BLEU SCORE: 0.01222796968620182

TEST MSG: Remove Pointer # SIZE replaced by Native # POINTER _ SIZE to prevent class loading deadlock
GENERATED MSG: Fix GetLastError bug

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java b / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java <nl> index f2687d0 . . 8d4da0c 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> package com . sun . jna . platform . win32 ; <nl> <nl> import com . sun . jna . IntegerType ; <nl> + import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . ptr . ByReference ; <nl> <nl> @ @ - 44 , 7 + 45 , 7 @ @ public interface BaseTSD { <nl> } <nl> <nl> public LONG _ PTR ( long value ) { <nl> - super ( Pointer . SIZE , value ) ; <nl> + super ( Native . POINTER _ SIZE , value ) ; <nl> } <nl> <nl> public Pointer toPointer ( ) { <nl> @ @ - 74 , 7 + 75 , 7 @ @ public interface BaseTSD { <nl> } <nl> <nl> public ULONG _ PTR ( long value ) { <nl> - super ( Pointer . SIZE , value , true ) ; <nl> + super ( Native . POINTER _ SIZE , value , true ) ; <nl> } <nl> <nl> public Pointer toPointer ( ) { <nl> @ @ - 90 , 11 + 91 , 11 @ @ public interface BaseTSD { <nl> this ( new ULONG _ PTR ( 0 ) ) ; <nl> } <nl> public ULONG _ PTRByReference ( ULONG _ PTR value ) { <nl> - super ( Pointer . SIZE ) ; <nl> + super ( Native . POINTER _ SIZE ) ; <nl> setValue ( value ) ; <nl> } <nl> public void setValue ( ULONG _ PTR value ) { <nl> - if ( Pointer . SIZE = = 4 ) { <nl> + if ( Native . POINTER _ SIZE = = 4 ) { <nl> getPointer ( ) . setInt ( 0 , value . intValue ( ) ) ; <nl> } <nl> else { <nl> @ @ - 102 , 7 + 103 , 7 @ @ public interface BaseTSD { <nl> } <nl> } <nl> public ULONG _ PTR getValue ( ) { <nl> - return new ULONG _ PTR ( Pointer . SIZE = = 4 <nl> + return new ULONG _ PTR ( Native . POINTER _ SIZE = = 4 <nl> ? getPointer ( ) . getInt ( 0 ) <nl> : getPointer ( ) . getLong ( 0 ) ) ; <nl> } <nl> @ @ - 118 , 7 + 119 , 7 @ @ public interface BaseTSD { <nl> } <nl> <nl> public DWORD _ PTR ( long value ) { <nl> - super ( Pointer . SIZE , value ) ; <nl> + super ( Native . POINTER _ SIZE , value ) ; <nl> } <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMInvoker . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMInvoker . java <nl> index ea5fee1 . . f5ffcbc 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMInvoker . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMInvoker . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> import com . sun . jna . Function ; <nl> + import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . PointerType ; <nl> <nl> @ @ - 34 , 7 + 35 , 7 @ @ public abstract class COMInvoker extends PointerType { <nl> / / we take the vtable id and multiply with the pointer size ( 4 bytes on <nl> / / 32bit OS ) <nl> Function func = Function . getFunction ( vptr . getPointer ( vtableId <nl> - * Pointer . SIZE ) ) ; <nl> + * Native . POINTER _ SIZE ) ) ; <nl> return func . invokeInt ( args ) ; <nl> } <nl> <nl> @ @ - 43 , 7 + 44 , 7 @ @ public abstract class COMInvoker extends PointerType { <nl> / / we take the vtable id and multiply with the pointer size ( 4 bytes on <nl> / / 32bit OS ) <nl> Function func = Function . getFunction ( vptr . getPointer ( vtableId <nl> - * Pointer . SIZE ) ) ; <nl> + * Native . POINTER _ SIZE ) ) ; <nl> return func . invoke ( returnType , args ) ; <nl> } <nl> <nl> @ @ - 52 , 7 + 53 , 7 @ @ public abstract class COMInvoker extends PointerType { <nl> / / we take the vtable id and multiply with the pointer size ( 4 bytes on <nl> / / 32bit OS ) <nl> Function func = Function . getFunction ( vptr . getPointer ( vtableId <nl> - * Pointer . SIZE ) ) ; <nl> + * Native . POINTER _ SIZE ) ) ; <nl> func . invokeVoid ( args ) ; <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> index e3b899a . . 1ae62a8 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> @ @ - 157 , 7 + 157 , 7 @ @ public interface WTypes { <nl> <nl> public class BSTRByReference extends ByReference { <nl> public BSTRByReference ( ) { <nl> - super ( Pointer . SIZE ) ; <nl> + super ( Native . POINTER _ SIZE ) ; <nl> } <nl> <nl> public BSTRByReference ( BSTR value ) { <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> index ecb0e25 . . 32e111d 100755 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public interface WinBase extends WinDef , BaseTSD { <nl> <nl> / * * Constant value representing an invalid HANDLE . * / <nl> HANDLE INVALID _ HANDLE _ VALUE = <nl> - new HANDLE ( Pointer . createConstant ( Pointer . SIZE = = 8 <nl> + new HANDLE ( Pointer . createConstant ( Native . POINTER _ SIZE = = 8 <nl> ? - 1 : 0xFFFFFFFFL ) ) ; <nl> <nl> int WAIT _ FAILED = 0xFFFFFFFF ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> index 7029b85 . . d27b2bc 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> @ @ - 683 , 7 + 683 , 7 @ @ public interface WinDef { <nl> * Instantiates a new int ptr . <nl> * / <nl> public INT _ PTR ( ) { <nl> - super ( Pointer . SIZE ) ; <nl> + super ( Native . POINTER _ SIZE ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 693 , 7 + 693 , 7 @ @ public interface WinDef { <nl> * the value <nl> * / <nl> public INT _ PTR ( long value ) { <nl> - super ( Pointer . SIZE , value ) ; <nl> + super ( Native . POINTER _ SIZE , value ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 715 , 7 + 715 , 7 @ @ public interface WinDef { <nl> * Instantiates a new uint ptr . <nl> * / <nl> public UINT _ PTR ( ) { <nl> - super ( Pointer . SIZE ) ; <nl> + super ( Native . POINTER _ SIZE ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 725 , 7 + 725 , 7 @ @ public interface WinDef { <nl> * the value <nl> * / <nl> public UINT _ PTR ( long value ) { <nl> - super ( Pointer . SIZE , value , true ) ; <nl> + super ( Native . POINTER _ SIZE , value , true ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> index adc8111 . . 0420d47 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> @ @ - 394 , 7 + 394 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> } <nl> <nl> public PSIDByReference ( PSID h ) { <nl> - super ( Pointer . SIZE ) ; <nl> + super ( Native . POINTER _ SIZE ) ; <nl> setValue ( h ) ; <nl> } <nl> <nl> @ @ - 1393 , 7 + 1393 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> } <nl> <nl> public HANDLEByReference ( HANDLE h ) { <nl> - super ( Pointer . SIZE ) ; <nl> + super ( Native . POINTER _ SIZE ) ; <nl> setValue ( h ) ; <nl> } <nl> <nl> @ @ - 2605 , 7 + 2605 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> } <nl> <nl> public PACLByReference ( ACL h ) { <nl> - super ( Pointer . SIZE ) ; <nl> + super ( Native . POINTER _ SIZE ) ; <nl> setValue ( h ) ; <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinReg . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinReg . java <nl> index b9794a6 . . b85447d 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinReg . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinReg . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 ; <nl> <nl> + import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> import com . sun . jna . ptr . ByReference ; <nl> @ @ - 48 , 7 + 49 , 7 @ @ public interface WinReg { <nl> } <nl> <nl> public HKEYByReference ( HKEY h ) { <nl> - super ( Pointer . SIZE ) ; <nl> + super ( Native . POINTER _ SIZE ) ; <nl> setValue ( h ) ; <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java <nl> index f371d7f . . f1b6824 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import com . sun . jna . Callback ; <nl> + import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . Union ; <nl> @ @ - 198 , 9 + 199 , 9 @ @ public interface WinUser extends WinDef { <nl> int GWL _ USERDATA = - 21 ; <nl> int GWL _ HWNDPARENT = - 8 ; <nl> <nl> - int DWL _ DLGPROC = Pointer . SIZE ; <nl> + int DWL _ DLGPROC = Native . POINTER _ SIZE ; <nl> int DWL _ MSGRESULT = 0 ; <nl> - int DWL _ USER = 2 * Pointer . SIZE ; <nl> + int DWL _ USER = 2 * Native . POINTER _ SIZE ; <nl> <nl> / * Window Styles * / <nl> <nl> diff - - git a / src / com / sun / jna / CallbackReference . java b / src / com / sun / jna / CallbackReference . java <nl> index 2a11ec0 . . 5c9d62c 100644 <nl> - - - a / src / com / sun / jna / CallbackReference . java <nl> + + + b / src / com / sun / jna / CallbackReference . java <nl> @ @ - 363 , 7 + 363 , 7 @ @ public class CallbackReference extends WeakReference < Callback > { <nl> <nl> / * * Set the behavioral options for this callback . * / <nl> private void setCallbackOptions ( int options ) { <nl> - cbstruct . setInt ( Pointer . SIZE , options ) ; <nl> + cbstruct . setInt ( Native . POINTER _ SIZE , options ) ; <nl> } <nl> <nl> / * * Obtain a pointer to the native glue code for this callback . * / <nl> diff - - git a / src / com / sun / jna / Function . java b / src / com / sun / jna / Function . java <nl> index 15e5b78 . . 795901d 100644 <nl> - - - a / src / com / sun / jna / Function . java <nl> + + + b / src / com / sun / jna / Function . java <nl> @ @ - 381 , 7 + 381 , 7 @ @ public class Function extends Pointer { <nl> Class < ? > type = inArg . getClass ( ) . getComponentType ( ) ; <nl> Structure [ ] ss = ( Structure [ ] ) inArg ; <nl> for ( int si = 0 ; si < ss . length ; si + + ) { <nl> - Pointer p = array . getPointer ( Pointer . SIZE * si ) ; <nl> + Pointer p = array . getPointer ( Native . POINTER _ SIZE * si ) ; <nl> ss [ si ] = Structure . updateStructureByReference ( type , ss [ si ] , p ) ; <nl> } <nl> } <nl> @ @ - 814 , 12 + 814 , 12 @ @ public class Function extends Pointer { <nl> private static class PointerArray extends Memory implements PostCallRead { <nl> private final Pointer [ ] original ; <nl> public PointerArray ( Pointer [ ] arg ) { <nl> - super ( Pointer . SIZE * ( arg . length + 1 ) ) ; <nl> + super ( Native . POINTER _ SIZE * ( arg . length + 1 ) ) ; <nl> this . original = arg ; <nl> for ( int i = 0 ; i < arg . length ; i + + ) { <nl> - setPointer ( i * Pointer . SIZE , arg [ i ] ) ; <nl> + setPointer ( i * Native . POINTER _ SIZE , arg [ i ] ) ; <nl> } <nl> - setPointer ( Pointer . SIZE * arg . length , null ) ; <nl> + setPointer ( Native . POINTER _ SIZE * arg . length , null ) ; <nl> } <nl> @ Override <nl> public void read ( ) { <nl> diff - - git a / src / com / sun / jna / Memory . java b / src / com / sun / jna / Memory . java <nl> index 632f08f . . 60dfd77 100644 <nl> - - - a / src / com / sun / jna / Memory . java <nl> + + + b / src / com / sun / jna / Memory . java <nl> @ @ - 537 , 7 + 537 , 7 @ @ public class Memory extends Pointer { <nl> * / <nl> @ Override <nl> public Pointer getPointer ( long offset ) { <nl> - boundsCheck ( offset , Pointer . SIZE ) ; <nl> + boundsCheck ( offset , Native . POINTER _ SIZE ) ; <nl> return super . getPointer ( offset ) ; <nl> } <nl> <nl> @ @ - 689 , 7 + 689 , 7 @ @ public class Memory extends Pointer { <nl> * / <nl> @ Override <nl> public void setPointer ( long offset , Pointer value ) { <nl> - boundsCheck ( offset , Pointer . SIZE ) ; <nl> + boundsCheck ( offset , Native . POINTER _ SIZE ) ; <nl> super . setPointer ( offset , value ) ; <nl> } <nl> <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index 274bb78 . . e36df27 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 210 , 7 + 210 , 7 @ @ public final class Native implements Version { <nl> WCHAR _ SIZE = sizeof ( TYPE _ WCHAR _ T ) ; <nl> SIZE _ T _ SIZE = sizeof ( TYPE _ SIZE _ T ) ; <nl> BOOL _ SIZE = sizeof ( TYPE _ BOOL ) ; <nl> - <nl> + <nl> / / Perform initialization of other JNA classes until * after * <nl> / / initializing the above final fields <nl> initIDs ( ) ; <nl> diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java <nl> index a1465d5 . . 7c86589 100644 <nl> - - - a / src / com / sun / jna / NativeLibrary . java <nl> + + + b / src / com / sun / jna / NativeLibrary . java <nl> @ @ - 870 , 7 + 870 , 7 @ @ public class NativeLibrary { <nl> if ( Platform . isLinux ( ) | | Platform . isSolaris ( ) <nl> | | Platform . isFreeBSD ( ) | | Platform . iskFreeBSD ( ) ) { <nl> / / Linux & FreeBSD use / usr / lib32 , solaris uses / usr / lib / 32 <nl> - archPath = ( Platform . isSolaris ( ) ? " / " : " " ) + Pointer . SIZE * 8 ; <nl> + archPath = ( Platform . isSolaris ( ) ? " / " : " " ) + Native . POINTER _ SIZE * 8 ; <nl> } <nl> String [ ] paths = { <nl> " / usr / lib " + archPath , <nl> diff - - git a / src / com / sun / jna / Pointer . java b / src / com / sun / jna / Pointer . java <nl> index e201d92 . . 815f256 100644 <nl> - - - a / src / com / sun / jna / Pointer . java <nl> + + + b / src / com / sun / jna / Pointer . java <nl> @ @ - 46 , 16 + 46 , 6 @ @ import java . util . List ; <nl> * / <nl> public class Pointer { <nl> <nl> - / * * Size of a native pointer , in bytes . * / <nl> - public static final int SIZE ; <nl> - <nl> - static { <nl> - / / Force load of native library <nl> - if ( ( SIZE = Native . POINTER _ SIZE ) = = 0 ) { <nl> - throw new Error ( " Native library not initialized " ) ; <nl> - } <nl> - } <nl> - <nl> / * * Convenience constant , same as < code > null < / code > . * / <nl> public static final Pointer NULL = null ; <nl> <nl> @ @ - 238 , 7 + 228 , 7 @ @ public class Pointer { <nl> * / <nl> public void read ( long offset , Pointer [ ] buf , int index , int length ) { <nl> for ( int i = 0 ; i < length ; i + + ) { <nl> - Pointer p = getPointer ( offset + i * Pointer . SIZE ) ; <nl> + Pointer p = getPointer ( offset + i * Native . POINTER _ SIZE ) ; <nl> Pointer oldp = buf [ i + index ] ; <nl> / / Avoid replacing the original pointer if it hasn ' t changed <nl> if ( oldp = = null | | p = = null | | p . peer ! = oldp . peer ) { <nl> @ @ - 359 , 7 + 349 , 7 @ @ public class Pointer { <nl> * / <nl> public void write ( long bOff , Pointer [ ] buf , int index , int length ) { <nl> for ( int i = 0 ; i < length ; i + + ) { <nl> - setPointer ( bOff + i * Pointer . SIZE , buf [ index + i ] ) ; <nl> + setPointer ( bOff + i * Native . POINTER _ SIZE , buf [ index + i ] ) ; <nl> } <nl> } <nl> <nl> @ @ - 779 , 7 + 769 , 7 @ @ v * @ param wide whether to convert from a wide or standard C string <nl> Pointer p = getPointer ( offset ) ; <nl> while ( p ! = null ) { <nl> array . add ( p ) ; <nl> - addOffset + = Pointer . SIZE ; <nl> + addOffset + = Native . POINTER _ SIZE ; <nl> p = getPointer ( offset + addOffset ) ; <nl> } <nl> return array . toArray ( new Pointer [ array . size ( ) ] ) ; <nl> @ @ - 875 , 7 + 865 , 7 @ @ v * @ param wide whether to convert from a wide or standard C string <nl> ? p . getWideString ( 0 ) : p . getString ( 0 , encoding ) ) ; <nl> strings . add ( s ) ; <nl> if ( count < length ) { <nl> - addOffset + = SIZE ; <nl> + addOffset + = Native . POINTER _ SIZE ; <nl> p = getPointer ( offset + addOffset ) ; <nl> } <nl> } <nl> @ @ - 886 , 7 + 876 , 7 @ @ v * @ param wide whether to convert from a wide or standard C string <nl> : ( NativeString . WIDE _ STRING . equals ( encoding ) <nl> ? p . getWideString ( 0 ) : p . getString ( 0 , encoding ) ) ; <nl> strings . add ( s ) ; <nl> - addOffset + = SIZE ; <nl> + addOffset + = Native . POINTER _ SIZE ; <nl> } <nl> } <nl> return strings . toArray ( new String [ strings . size ( ) ] ) ; <nl> diff - - git a / src / com / sun / jna / StringArray . java b / src / com / sun / jna / StringArray . java <nl> index 14145d0 . . 82f5d40 100644 <nl> - - - a / src / com / sun / jna / StringArray . java <nl> + + + b / src / com / sun / jna / StringArray . java <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class StringArray extends Memory implements Function . PostCallRead { <nl> this ( strings , NativeString . WIDE _ STRING ) ; <nl> } <nl> private StringArray ( Object [ ] strings , String encoding ) { <nl> - super ( ( strings . length + 1 ) * Pointer . SIZE ) ; <nl> + super ( ( strings . length + 1 ) * Native . POINTER _ SIZE ) ; <nl> this . original = strings ; <nl> this . encoding = encoding ; <nl> for ( int i = 0 ; i < strings . length ; i + + ) { <nl> @ @ - 63 , 9 + 63 , 9 @ @ public class StringArray extends Memory implements Function . PostCallRead { <nl> natives . add ( ns ) ; <nl> p = ns . getPointer ( ) ; <nl> } <nl> - setPointer ( Pointer . SIZE * i , p ) ; <nl> + setPointer ( Native . POINTER _ SIZE * i , p ) ; <nl> } <nl> - setPointer ( Pointer . SIZE * strings . length , null ) ; <nl> + setPointer ( Native . POINTER _ SIZE * strings . length , null ) ; <nl> } <nl> / * * Read back from native memory . * / <nl> @ Override <nl> @ @ - 73 , 7 + 73 , 7 @ @ public class StringArray extends Memory implements Function . PostCallRead { <nl> boolean returnWide = original instanceof WString [ ] ; <nl> boolean wide = NativeString . WIDE _ STRING . equals ( encoding ) ; <nl> for ( int si = 0 ; si < original . length ; si + + ) { <nl> - Pointer p = getPointer ( si * Pointer . SIZE ) ; <nl> + Pointer p = getPointer ( si * Native . POINTER _ SIZE ) ; <nl> Object s = null ; <nl> if ( p ! = null ) { <nl> s = wide ? p . getWideString ( 0 ) : p . getString ( 0 , encoding ) ; <nl> diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index c929a45 . . be71f4e 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 1411 , 11 + 1411 , 11 @ @ public abstract class Structure { <nl> | | Callback . class . isAssignableFrom ( type ) <nl> | | WString . class = = type <nl> | | String . class = = type ) { <nl> - alignment = Pointer . SIZE ; <nl> + alignment = Native . POINTER _ SIZE ; <nl> } <nl> else if ( Structure . class . isAssignableFrom ( type ) ) { <nl> if ( ByReference . class . isAssignableFrom ( type ) ) { <nl> - alignment = Pointer . SIZE ; <nl> + alignment = Native . POINTER _ SIZE ; <nl> } <nl> else { <nl> if ( value = = null ) <nl> @ @ - 1968 , 7 + 1968 , 7 @ @ public abstract class Structure { <nl> return Arrays . asList ( new String [ ] { " size " , " alignment " , " type " , " elements " } ) ; <nl> } <nl> private void init ( Pointer [ ] els ) { <nl> - elements = new Memory ( Pointer . SIZE * els . length ) ; <nl> + elements = new Memory ( Native . POINTER _ SIZE * els . length ) ; <nl> elements . write ( 0 , els , 0 , els . length ) ; <nl> write ( ) ; <nl> } <nl> diff - - git a / src / com / sun / jna / ptr / PointerByReference . java b / src / com / sun / jna / ptr / PointerByReference . java <nl> index e3b2b23 . . 91a7727 100644 <nl> - - - a / src / com / sun / jna / ptr / PointerByReference . java <nl> + + + b / src / com / sun / jna / ptr / PointerByReference . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ <nl> * / <nl> package com . sun . jna . ptr ; <nl> <nl> + import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> <nl> / * * Represents a reference to a pointer to native data . <nl> @ @ - 36 , 7 + 37 , 7 @ @ public class PointerByReference extends ByReference { <nl> } <nl> <nl> public PointerByReference ( Pointer value ) { <nl> - super ( Pointer . SIZE ) ; <nl> + super ( Native . POINTER _ SIZE ) ; <nl> setValue ( value ) ; <nl> } <nl> <nl> diff - - git a / src / com / sun / jna / win32 / StdCallFunctionMapper . java b / src / com / sun / jna / win32 / StdCallFunctionMapper . java <nl> index 91fa147 . . 951c6de 100644 <nl> - - - a / src / com / sun / jna / win32 / StdCallFunctionMapper . java <nl> + + + b / src / com / sun / jna / win32 / StdCallFunctionMapper . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class StdCallFunctionMapper implements FunctionMapper { <nl> cls = NativeMappedConverter . getInstance ( cls ) . nativeType ( ) ; <nl> } <nl> if ( cls . isArray ( ) ) { <nl> - return Pointer . SIZE ; <nl> + return Native . POINTER _ SIZE ; <nl> } <nl> try { <nl> return Native . getNativeSize ( cls ) ; <nl> diff - - git a / test / com / sun / jna / HeadlessLoadLibraryTest . java b / test / com / sun / jna / HeadlessLoadLibraryTest . java <nl> index 6ae2bb4 . . e602756 100644 <nl> - - - a / test / com / sun / jna / HeadlessLoadLibraryTest . java <nl> + + + b / test / com / sun / jna / HeadlessLoadLibraryTest . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ public class HeadlessLoadLibraryTest extends TestCase { <nl> <nl> public void testLoadWhenHeadless ( ) { <nl> System . setProperty ( " java . awt . headless " , " true " ) ; <nl> - assertTrue ( " Pointer size must not be zero " , Pointer . SIZE > 0 ) ; <nl> + assertTrue ( " Pointer size must not be zero " , Native . POINTER _ SIZE > 0 ) ; <nl> } <nl> <nl> public static void main ( String [ ] args ) { <nl> diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java <nl> index a3c7f57 . . 6678b26 100644 <nl> - - - a / test / com / sun / jna / LibraryLoadTest . java <nl> + + + b / test / com / sun / jna / LibraryLoadTest . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ public class LibraryLoadTest extends TestCase implements Paths { <nl> } <nl> <nl> public void testLoadJNALibrary ( ) { <nl> - assertTrue ( " Pointer size should never be zero " , Pointer . SIZE > 0 ) ; <nl> + assertTrue ( " Pointer size should never be zero " , Native . POINTER _ SIZE > 0 ) ; <nl> } <nl> <nl> public void testLoadJAWT ( ) { <nl> @ @ - 65 , 7 + 65 , 7 @ @ public class LibraryLoadTest extends TestCase implements Paths { <nl> <nl> if ( GraphicsEnvironment . isHeadless ( ) ) return ; <nl> <nl> - if ( Pointer . SIZE > 0 ) { <nl> + if ( Native . POINTER _ SIZE > 0 ) { <nl> Toolkit . getDefaultToolkit ( ) ; <nl> } <nl> } <nl> diff - - git a / test / com / sun / jna / PointerTest . java b / test / com / sun / jna / PointerTest . java <nl> index 8196257 . . a49d6af 100644 <nl> - - - a / test / com / sun / jna / PointerTest . java <nl> + + + b / test / com / sun / jna / PointerTest . java <nl> @ @ - 88 , 7 + 88 , 7 @ @ public class PointerTest extends TestCase { <nl> } <nl> <nl> public void testSetNativeMapped ( ) { <nl> - Pointer p = new Memory ( Pointer . SIZE ) ; <nl> + Pointer p = new Memory ( Native . POINTER _ SIZE ) ; <nl> TestPointerType tp = new TestPointerType ( p ) ; <nl> <nl> p . setValue ( 0 , tp , tp . getClass ( ) ) ; <nl> @ @ - 97 , 7 + 97 , 7 @ @ public class PointerTest extends TestCase { <nl> } <nl> <nl> public void testGetNativeMapped ( ) { <nl> - Pointer p = new Memory ( Pointer . SIZE ) ; <nl> + Pointer p = new Memory ( Native . POINTER _ SIZE ) ; <nl> p . setPointer ( 0 , null ) ; <nl> Object o = p . getValue ( 0 , TestPointerType . class , null ) ; <nl> assertNull ( " Wrong empty value : " + o , o ) ; <nl> @ @ - 107 , 14 + 107 , 14 @ @ public class PointerTest extends TestCase { <nl> } <nl> <nl> public void testGetStringArray ( ) { <nl> - Pointer p = new Memory ( Pointer . SIZE * 3 ) ; <nl> + Pointer p = new Memory ( Native . POINTER _ SIZE * 3 ) ; <nl> final String VALUE1 = getName ( ) + UNICODE ; <nl> final String VALUE2 = getName ( ) + " 2 " + UNICODE ; <nl> final String ENCODING = " utf8 " ; <nl> <nl> p . setPointer ( 0 , new NativeString ( VALUE1 , ENCODING ) . getPointer ( ) ) ; <nl> - p . setPointer ( Pointer . SIZE , new NativeString ( VALUE2 , ENCODING ) . getPointer ( ) ) ; <nl> - p . setPointer ( Pointer . SIZE * 2 , null ) ; <nl> + p . setPointer ( Native . POINTER _ SIZE , new NativeString ( VALUE2 , ENCODING ) . getPointer ( ) ) ; <nl> + p . setPointer ( Native . POINTER _ SIZE * 2 , null ) ; <nl> <nl> assertEquals ( " Wrong null - terminated String array " , <nl> Arrays . asList ( new String [ ] { VALUE1 , VALUE2 } ) , <nl> @ @ - 129 , 13 + 129 , 13 @ @ public class PointerTest extends TestCase { <nl> } <nl> <nl> public void testGetWideStringArray ( ) { <nl> - Pointer p = new Memory ( Pointer . SIZE * 3 ) ; <nl> + Pointer p = new Memory ( Native . POINTER _ SIZE * 3 ) ; <nl> final String VALUE1 = getName ( ) + UNICODE ; <nl> final String VALUE2 = getName ( ) + " 2 " + UNICODE ; <nl> <nl> p . setPointer ( 0 , new NativeString ( VALUE1 , true ) . getPointer ( ) ) ; <nl> - p . setPointer ( Pointer . SIZE , new NativeString ( VALUE2 , true ) . getPointer ( ) ) ; <nl> - p . setPointer ( Pointer . SIZE * 2 , null ) ; <nl> + p . setPointer ( Native . POINTER _ SIZE , new NativeString ( VALUE2 , true ) . getPointer ( ) ) ; <nl> + p . setPointer ( Native . POINTER _ SIZE * 2 , null ) ; <nl> <nl> assertEquals ( " Wrong null - terminated String array " , <nl> Arrays . asList ( new String [ ] { VALUE1 , VALUE2 } ) , <nl> @ @ - 150 , 7 + 150 , 7 @ @ public class PointerTest extends TestCase { <nl> } <nl> <nl> public void testReadPointerArray ( ) { <nl> - Pointer mem = new Memory ( Pointer . SIZE * 2 ) ; <nl> + Pointer mem = new Memory ( Native . POINTER _ SIZE * 2 ) ; <nl> Pointer [ ] p = new Pointer [ 2 ] ; <nl> String VALUE1 = getName ( ) ; <nl> <nl> @ @ - 166 , 7 + 166 , 7 @ @ public class PointerTest extends TestCase { <nl> assertSame ( " Pointer object not preserved [ 1 ] " , orig [ 1 ] , p [ 1 ] ) ; <nl> <nl> mem . setPointer ( 0 , null ) ; <nl> - mem . setPointer ( Pointer . SIZE , new Memory ( 1024 ) ) ; <nl> + mem . setPointer ( Native . POINTER _ SIZE , new Memory ( 1024 ) ) ; <nl> mem . read ( 0 , p , 0 , p . length ) ; <nl> assertNull ( " Pointer element not updated [ 0 ] " , p [ 0 ] ) ; <nl> assertNotSame ( " Pointer element not updated [ 1 ] " , orig [ 1 ] , p [ 1 ] ) ; <nl> @ @ - 181 , 7 + 181 , 7 @ @ public class PointerTest extends TestCase { <nl> } <nl> <nl> public void testReadStringArrayNULLElement ( ) { <nl> - Memory m = new Memory ( Pointer . SIZE ) ; <nl> + Memory m = new Memory ( Native . POINTER _ SIZE ) ; <nl> m . clear ( ) ; <nl> String [ ] arr = m . getStringArray ( 0 , 1 ) ; <nl> assertEquals ( " Wrong array size " , 1 , arr . length ) ; <nl> diff - - git a / test / com / sun / jna / StructureBufferFieldTest . java b / test / com / sun / jna / StructureBufferFieldTest . java <nl> index 9f89784 . . e66fabe 100644 <nl> - - - a / test / com / sun / jna / StructureBufferFieldTest . java <nl> + + + b / test / com / sun / jna / StructureBufferFieldTest . java <nl> @ @ - 74 , 7 + 74 , 7 @ @ public class StructureBufferFieldTest extends TestCase { <nl> public void testBufferFieldReadChanged ( ) { <nl> if ( ! Platform . HAS _ BUFFERS ) return ; <nl> BufferStructure bs = new BufferStructure ( ) ; <nl> - if ( Pointer . SIZE = = 4 ) { <nl> + if ( Native . POINTER _ SIZE = = 4 ) { <nl> bs . getPointer ( ) . setInt ( 0 , 0x1 ) ; <nl> } <nl> else { <nl> diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java <nl> index 3adc2e8 . . 21f80f6 100644 <nl> - - - a / test / com / sun / jna / StructureTest . java <nl> + + + b / test / com / sun / jna / StructureTest . java <nl> @ @ - 945 , 7 + 945 , 7 @ @ public class StructureTest extends TestCase { <nl> public void testPointerArrayField ( ) { <nl> ArrayOfPointerStructure s = new ArrayOfPointerStructure ( ) ; <nl> int size = s . size ( ) ; <nl> - assertEquals ( " Wrong size " , ArrayOfPointerStructure . SIZE * Pointer . SIZE , size ) ; <nl> + assertEquals ( " Wrong size " , ArrayOfPointerStructure . SIZE * Native . POINTER _ SIZE , size ) ; <nl> s . array [ 0 ] = s . getPointer ( ) ; <nl> s . write ( ) ; <nl> s . array [ 0 ] = null ; <nl> @ @ - 992 , 7 + 992 , 7 @ @ public class StructureTest extends TestCase { <nl> } <nl> public void testStructureByReferenceField ( ) { <nl> StructureWithPointers s = new StructureWithPointers ( ) ; <nl> - assertEquals ( " Wrong size for structure with structure references " , Pointer . SIZE * 2 , s . size ( ) ) ; <nl> + assertEquals ( " Wrong size for structure with structure references " , Native . POINTER _ SIZE * 2 , s . size ( ) ) ; <nl> assertNull ( " Initial refs should be null " , s . s1 ) ; <nl> } <nl> <nl> @ @ - 1060 , 14 + 1060 , 14 @ @ public class StructureTest extends TestCase { <nl> m2 . setString ( 0 , WVALUE ) ; <nl> <nl> s . getPointer ( ) . setPointer ( 0 , m ) ; <nl> - s . getPointer ( ) . setPointer ( Pointer . SIZE , m2 ) ; <nl> + s . getPointer ( ) . setPointer ( Native . POINTER _ SIZE , m2 ) ; <nl> s . read ( ) ; <nl> assertEquals ( " Wrong String field value " , VALUE , s . s ) ; <nl> assertEquals ( " Wrong WString field value " , WVALUE , s . ws ) ; <nl> <nl> s . write ( ) ; <nl> assertEquals ( " String field should not be overwritten : " + s , m , s . getPointer ( ) . getPointer ( 0 ) ) ; <nl> - assertEquals ( " WString field should not be overwritten : " + s , m2 , s . getPointer ( ) . getPointer ( Pointer . SIZE ) ) ; <nl> + assertEquals ( " WString field should not be overwritten : " + s , m2 , s . getPointer ( ) . getPointer ( Native . POINTER _ SIZE ) ) ; <nl> } <nl> <nl> / / Ensure string cacheing doesn ' t interfere with wrapped structure writes . <nl> @ @ - 1148 , 7 + 1148 , 7 @ @ public class StructureTest extends TestCase { <nl> } <nl> } <nl> TestStructure s = new TestStructure ( ) ; <nl> - assertEquals ( " Wrong structure size " , 2 * Pointer . SIZE , s . size ( ) ) ; <nl> + assertEquals ( " Wrong structure size " , 2 * Native . POINTER _ SIZE , s . size ( ) ) ; <nl> <nl> PublicTestStructure . ByReference ref = new PublicTestStructure . ByReference ( ) ; <nl> ref . x = 42 ; <nl> @ @ - 1256 , 9 + 1256 , 9 @ @ public class StructureTest extends TestCase { <nl> inner , els . getPointer ( 0 ) ) ; <nl> assertEquals ( " Wrong type information for integer field " , <nl> Structure . getTypeInfo ( Integer . valueOf ( 0 ) ) , <nl> - els . getPointer ( Pointer . SIZE ) ) ; <nl> + els . getPointer ( Native . POINTER _ SIZE ) ) ; <nl> assertNull ( " Type element list should be null - terminated " , <nl> - els . getPointer ( Pointer . SIZE * 2 ) ) ; <nl> + els . getPointer ( Native . POINTER _ SIZE * 2 ) ) ; <nl> } <nl> <nl> public void testInnerArrayTypeInfo ( ) { <nl> diff - - git a / test / com / sun / jna / UnionTest . java b / test / com / sun / jna / UnionTest . java <nl> index 43f69e0 . . de6a179 100644 <nl> - - - a / test / com / sun / jna / UnionTest . java <nl> + + + b / test / com / sun / jna / UnionTest . java <nl> @ @ - 92 , 7 + 92 , 7 @ @ public class UnionTest extends TestCase { <nl> <nl> public void testFieldOffsets ( ) { <nl> StructUnion u = new StructUnion ( ) ; <nl> - assertEquals ( " Wrong union size : " + u , Pointer . SIZE , u . size ( ) ) ; <nl> + assertEquals ( " Wrong union size : " + u , Native . POINTER _ SIZE , u . size ( ) ) ; <nl> u . setType ( u . testStruct . getClass ( ) ) ; <nl> u . write ( ) ; <nl> assertEquals ( " Wrong struct member base address " , <nl> @ @ - 132 , 7 + 132 , 7 @ @ public class UnionTest extends TestCase { <nl> final int VALUE = 0x12345678 ; <nl> / / write an instance of a direct union class to memory <nl> StructUnion u = new StructUnion ( ) ; <nl> - assertEquals ( " Wrong union size : " + u , Pointer . SIZE , u . size ( ) ) ; <nl> + assertEquals ( " Wrong union size : " + u , Native . POINTER _ SIZE , u . size ( ) ) ; <nl> IntStructure intStruct = new IntStructure ( ) ; <nl> intStruct . value = VALUE ; <nl> u . setTypedValue ( intStruct ) ; <nl> @ @ - 158 , 7 + 158 , 7 @ @ public class UnionTest extends TestCase { <nl> <nl> public void testReadTypedUnion ( ) { <nl> StructUnion u = new StructUnion ( ) ; <nl> - assertEquals ( " Wrong union size : " + u , Pointer . SIZE , u . size ( ) ) ; <nl> + assertEquals ( " Wrong union size : " + u , Native . POINTER _ SIZE , u . size ( ) ) ; <nl> final int VALUE = 0x12345678 ; <nl> u . getPointer ( ) . setInt ( 0 , VALUE ) ; <nl> assertEquals ( " int structure not read properly " , VALUE , ( ( IntStructure ) u . getTypedValue ( IntStructure . class ) ) . value ) ; <nl> diff - - git a / test / com / sun / jna / VMCrashProtectionTest . java b / test / com / sun / jna / VMCrashProtectionTest . java <nl> index 45474b0 . . 6c0fb6e 100644 <nl> - - - a / test / com / sun / jna / VMCrashProtectionTest . java <nl> + + + b / test / com / sun / jna / VMCrashProtectionTest . java <nl> @ @ - 40 , 8 + 40 , 8 @ @ public class VMCrashProtectionTest extends TestCase { <nl> if ( ! Native . isProtected ( ) ) <nl> return ; <nl> <nl> - Memory m = new Memory ( Pointer . SIZE ) ; <nl> - if ( Pointer . SIZE = = 4 ) <nl> + Memory m = new Memory ( Native . POINTER _ SIZE ) ; <nl> + if ( Native . POINTER _ SIZE = = 4 ) <nl> m . setInt ( 0 , 1 ) ; <nl> else <nl> m . setLong ( 0 , 1 ) ; <nl> diff - - git a / test / com / sun / jna / win32 / W32APIMapperTest . java b / test / com / sun / jna / win32 / W32APIMapperTest . java <nl> index 4f3d291 . . b5a5eb8 100644 <nl> - - - a / test / com / sun / jna / win32 / W32APIMapperTest . java <nl> + + + b / test / com / sun / jna / win32 / W32APIMapperTest . java <nl> @ @ - 96 , 10 + 96 , 10 @ @ public class W32APIMapperTest extends TestCase { <nl> <nl> public void testInvalidHandleValue ( ) { <nl> String EXPECTED = " @ 0xffffffff " ; <nl> - if ( Pointer . SIZE = = 8 ) { <nl> + if ( Native . POINTER _ SIZE = = 8 ) { <nl> EXPECTED + = " ffffffff " ; <nl> } <nl> - Pointer p = Pointer . createConstant ( Pointer . SIZE = = 8 ? - 1 : 0xFFFFFFFFL ) ; <nl> + Pointer p = Pointer . createConstant ( Native . POINTER _ SIZE = = 8 ? - 1 : 0xFFFFFFFFL ) ; <nl> assertTrue ( " Wrong value : " + p , p . toString ( ) . endsWith ( EXPECTED ) ) ; <nl> <nl> } <nl> @ @ - 133 , 41 + 133 , 41 @ @ public class W32APIMapperTest extends TestCase { <nl> public void testUnicodeStructureSize ( ) { <nl> UnicodeLibrary . TestStructure s = new UnicodeLibrary . TestStructure ( ) ; <nl> assertEquals ( " Wrong structure size " , <nl> - Pointer . SIZE * 2 + 8 , s . size ( ) ) ; <nl> + Native . POINTER _ SIZE * 2 + 8 , s . size ( ) ) ; <nl> } <nl> <nl> public void testASCIIStructureSize ( ) { <nl> ASCIILibrary . TestStructure s = new ASCIILibrary . TestStructure ( ) ; <nl> assertEquals ( " Wrong structure size " , <nl> - Pointer . SIZE * 2 + 8 , s . size ( ) ) ; <nl> + Native . POINTER _ SIZE * 2 + 8 , s . size ( ) ) ; <nl> } <nl> <nl> public void testUnicodeStructureWriteBoolean ( ) { <nl> UnicodeLibrary . TestStructure s = new UnicodeLibrary . TestStructure ( ) ; <nl> s . bool2 = true ; <nl> s . write ( ) ; <nl> - assertEquals ( " Wrong value written for FALSE " , 0 , s . getPointer ( ) . getInt ( Pointer . SIZE * 2 ) ) ; <nl> - assertEquals ( " Wrong value written for TRUE " , 1 , s . getPointer ( ) . getInt ( Pointer . SIZE * 2 + 4 ) ) ; <nl> + assertEquals ( " Wrong value written for FALSE " , 0 , s . getPointer ( ) . getInt ( Native . POINTER _ SIZE * 2 ) ) ; <nl> + assertEquals ( " Wrong value written for TRUE " , 1 , s . getPointer ( ) . getInt ( Native . POINTER _ SIZE * 2 + 4 ) ) ; <nl> } <nl> public void testASCIIStructureWriteBoolean ( ) { <nl> ASCIILibrary . TestStructure s = new ASCIILibrary . TestStructure ( ) ; <nl> s . bool2 = true ; <nl> s . write ( ) ; <nl> - assertEquals ( " Wrong value written for FALSE " , 0 , s . getPointer ( ) . getInt ( Pointer . SIZE * 2 ) ) ; <nl> - assertEquals ( " Wrong value written for TRUE " , 1 , s . getPointer ( ) . getInt ( Pointer . SIZE * 2 + 4 ) ) ; <nl> + assertEquals ( " Wrong value written for FALSE " , 0 , s . getPointer ( ) . getInt ( Native . POINTER _ SIZE * 2 ) ) ; <nl> + assertEquals ( " Wrong value written for TRUE " , 1 , s . getPointer ( ) . getInt ( Native . POINTER _ SIZE * 2 + 4 ) ) ; <nl> } <nl> public void testUnicodeStructureReadBoolean ( ) { <nl> UnicodeLibrary . TestStructure s = new UnicodeLibrary . TestStructure ( ) ; <nl> - s . getPointer ( ) . setInt ( Pointer . SIZE * 2 , 1 ) ; <nl> - s . getPointer ( ) . setInt ( Pointer . SIZE * 2 + 4 , 0 ) ; <nl> + s . getPointer ( ) . setInt ( Native . POINTER _ SIZE * 2 , 1 ) ; <nl> + s . getPointer ( ) . setInt ( Native . POINTER _ SIZE * 2 + 4 , 0 ) ; <nl> s . read ( ) ; <nl> assertTrue ( " Wrong value read for TRUE " , s . bool ) ; <nl> assertFalse ( " Wrong value read for FALSE " , s . bool2 ) ; <nl> } <nl> public void testASCIIStructureReadBoolean ( ) { <nl> ASCIILibrary . TestStructure s = new ASCIILibrary . TestStructure ( ) ; <nl> - s . getPointer ( ) . setInt ( Pointer . SIZE * 2 , 1 ) ; <nl> - s . getPointer ( ) . setInt ( Pointer . SIZE * 2 + 4 , 0 ) ; <nl> + s . getPointer ( ) . setInt ( Native . POINTER _ SIZE * 2 , 1 ) ; <nl> + s . getPointer ( ) . setInt ( Native . POINTER _ SIZE * 2 + 4 , 0 ) ; <nl> s . read ( ) ; <nl> assertTrue ( " Wrong value read for TRUE " , s . bool ) ; <nl> assertFalse ( " Wrong value read for FALSE " , s . bool2 ) ; <nl> @ @ - 178 , 7 + 178 , 7 @ @ public class W32APIMapperTest extends TestCase { <nl> s . string2 = MAGIC ; <nl> s . write ( ) ; <nl> assertEquals ( " Improper null write " , null , s . getPointer ( ) . getPointer ( 0 ) ) ; <nl> - assertEquals ( " Improper string write " , MAGIC , s . getPointer ( ) . getPointer ( Pointer . SIZE ) . getWideString ( 0 ) ) ; <nl> + assertEquals ( " Improper string write " , MAGIC , s . getPointer ( ) . getPointer ( Native . POINTER _ SIZE ) . getWideString ( 0 ) ) ; <nl> } <nl> public void testASCIIStructureWriteString ( ) { <nl> ASCIILibrary . TestStructure s = new ASCIILibrary . TestStructure ( ) ; <nl> @ @ - 186 , 7 + 186 , 7 @ @ public class W32APIMapperTest extends TestCase { <nl> s . string2 = MAGIC ; <nl> s . write ( ) ; <nl> assertEquals ( " Improper null write " , null , s . getPointer ( ) . getPointer ( 0 ) ) ; <nl> - assertEquals ( " Improper string write " , MAGIC , s . getPointer ( ) . getPointer ( Pointer . SIZE ) . getString ( 0 ) ) ; <nl> + assertEquals ( " Improper string write " , MAGIC , s . getPointer ( ) . getPointer ( Native . POINTER _ SIZE ) . getString ( 0 ) ) ; <nl> } <nl> public void testUnicodeStructureReadString ( ) { <nl> UnicodeLibrary . TestStructure s = new UnicodeLibrary . TestStructure ( ) ;
NEAREST DIFF (one line): diff - - git a / jnalib / dist / darwin . jar b / jnalib / dist / darwin . jar <nl> index fd1f7d4 . . 9bebd3d 100644 <nl> Binary files a / jnalib / dist / darwin . jar and b / jnalib / dist / darwin . jar differ <nl> diff - - git a / jnalib / dist / jna . jar b / jnalib / dist / jna . jar <nl> index a4433ac . . 2c98171 100644 <nl> Binary files a / jnalib / dist / jna . jar and b / jnalib / dist / jna . jar differ

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java b / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java 
 index f2687d0 . . 8d4da0c 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 package com . sun . jna . platform . win32 ; 
 
 import com . sun . jna . IntegerType ; 
 + import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . ptr . ByReference ; 
 
 @ @ - 44 , 7 + 45 , 7 @ @ public interface BaseTSD { 
 } 
 
 public LONG _ PTR ( long value ) { 
 - super ( Pointer . SIZE , value ) ; 
 + super ( Native . POINTER _ SIZE , value ) ; 
 } 
 
 public Pointer toPointer ( ) { 
 @ @ - 74 , 7 + 75 , 7 @ @ public interface BaseTSD { 
 } 
 
 public ULONG _ PTR ( long value ) { 
 - super ( Pointer . SIZE , value , true ) ; 
 + super ( Native . POINTER _ SIZE , value , true ) ; 
 } 
 
 public Pointer toPointer ( ) { 
 @ @ - 90 , 11 + 91 , 11 @ @ public interface BaseTSD { 
 this ( new ULONG _ PTR ( 0 ) ) ; 
 } 
 public ULONG _ PTRByReference ( ULONG _ PTR value ) { 
 - super ( Pointer . SIZE ) ; 
 + super ( Native . POINTER _ SIZE ) ; 
 setValue ( value ) ; 
 } 
 public void setValue ( ULONG _ PTR value ) { 
 - if ( Pointer . SIZE = = 4 ) { 
 + if ( Native . POINTER _ SIZE = = 4 ) { 
 getPointer ( ) . setInt ( 0 , value . intValue ( ) ) ; 
 } 
 else { 
 @ @ - 102 , 7 + 103 , 7 @ @ public interface BaseTSD { 
 } 
 } 
 public ULONG _ PTR getValue ( ) { 
 - return new ULONG _ PTR ( Pointer . SIZE = = 4 
 + return new ULONG _ PTR ( Native . POINTER _ SIZE = = 4 
 ? getPointer ( ) . getInt ( 0 ) 
 : getPointer ( ) . getLong ( 0 ) ) ; 
 } 
 @ @ - 118 , 7 + 119 , 7 @ @ public interface BaseTSD { 
 } 
 
 public DWORD _ PTR ( long value ) { 
 - super ( Pointer . SIZE , value ) ; 
 + super ( Native . POINTER _ SIZE , value ) ; 
 } 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMInvoker . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMInvoker . java 
 index ea5fee1 . . f5ffcbc 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMInvoker . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMInvoker . java 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 package com . sun . jna . platform . win32 . COM ; 
 
 import com . sun . jna . Function ; 
 + import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . PointerType ; 
 
 @ @ - 34 , 7 + 35 , 7 @ @ public abstract class COMInvoker extends PointerType { 
 / / we take the vtable id and multiply with the pointer size ( 4 bytes on 
 / / 32bit OS ) 
 Function func = Function . getFunction ( vptr . getPointer ( vtableId 
 - * Pointer . SIZE ) ) ; 
 + * Native . POINTER _ SIZE ) ) ; 
 return func . invokeInt ( args ) ; 
 } 
 
 @ @ - 43 , 7 + 44 , 7 @ @ public abstract class COMInvoker extends PointerType { 
 / / we take the vtable id and multiply with the pointer size ( 4 bytes on 
 / / 32bit OS ) 
 Function func = Function . getFunction ( vptr . getPointer ( vtableId 
 - * Pointer . SIZE ) ) ; 
 + * Native . POINTER _ SIZE ) ) ; 
 return func . invoke ( returnType , args ) ; 
 } 
 
 @ @ - 52 , 7 + 53 , 7 @ @ public abstract class COMInvoker extends PointerType { 
 / / we take the vtable id and multiply with the pointer size ( 4 bytes on 
 / / 32bit OS ) 
 Function func = Function . getFunction ( vptr . getPointer ( vtableId 
 - * Pointer . SIZE ) ) ; 
 + * Native . POINTER _ SIZE ) ) ; 
 func . invokeVoid ( args ) ; 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 index e3b899a . . 1ae62a8 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 @ @ - 157 , 7 + 157 , 7 @ @ public interface WTypes { 
 
 public class BSTRByReference extends ByReference { 
 public BSTRByReference ( ) { 
 - super ( Pointer . SIZE ) ; 
 + super ( Native . POINTER _ SIZE ) ; 
 } 
 
 public BSTRByReference ( BSTR value ) { 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 index ecb0e25 . . 32e111d 100755 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public interface WinBase extends WinDef , BaseTSD { 
 
 / * * Constant value representing an invalid HANDLE . * / 
 HANDLE INVALID _ HANDLE _ VALUE = 
 - new HANDLE ( Pointer . createConstant ( Pointer . SIZE = = 8 
 + new HANDLE ( Pointer . createConstant ( Native . POINTER _ SIZE = = 8 
 ? - 1 : 0xFFFFFFFFL ) ) ; 
 
 int WAIT _ FAILED = 0xFFFFFFFF ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 index 7029b85 . . d27b2bc 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 @ @ - 683 , 7 + 683 , 7 @ @ public interface WinDef { 
 * Instantiates a new int ptr . 
 * / 
 public INT _ PTR ( ) { 
 - super ( Pointer . SIZE ) ; 
 + super ( Native . POINTER _ SIZE ) ; 
 } 
 
 / * * 
 @ @ - 693 , 7 + 693 , 7 @ @ public interface WinDef { 
 * the value 
 * / 
 public INT _ PTR ( long value ) { 
 - super ( Pointer . SIZE , value ) ; 
 + super ( Native . POINTER _ SIZE , value ) ; 
 } 
 
 / * * 
 @ @ - 715 , 7 + 715 , 7 @ @ public interface WinDef { 
 * Instantiates a new uint ptr . 
 * / 
 public UINT _ PTR ( ) { 
 - super ( Pointer . SIZE ) ; 
 + super ( Native . POINTER _ SIZE ) ; 
 } 
 
 / * * 
 @ @ - 725 , 7 + 725 , 7 @ @ public interface WinDef { 
 * the value 
 * / 
 public UINT _ PTR ( long value ) { 
 - super ( Pointer . SIZE , value , true ) ; 
 + super ( Native . POINTER _ SIZE , value , true ) ; 
 } 
 
 / * * 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 index adc8111 . . 0420d47 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 @ @ - 394 , 7 + 394 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 } 
 
 public PSIDByReference ( PSID h ) { 
 - super ( Pointer . SIZE ) ; 
 + super ( Native . POINTER _ SIZE ) ; 
 setValue ( h ) ; 
 } 
 
 @ @ - 1393 , 7 + 1393 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 } 
 
 public HANDLEByReference ( HANDLE h ) { 
 - super ( Pointer . SIZE ) ; 
 + super ( Native . POINTER _ SIZE ) ; 
 setValue ( h ) ; 
 } 
 
 @ @ - 2605 , 7 + 2605 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 } 
 
 public PACLByReference ( ACL h ) { 
 - super ( Pointer . SIZE ) ; 
 + super ( Native . POINTER _ SIZE ) ; 
 setValue ( h ) ; 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinReg . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinReg . java 
 index b9794a6 . . b85447d 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinReg . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinReg . java 
 @ @ - 23 , 6 + 23 , 7 @ @ 
 * / 
 package com . sun . jna . platform . win32 ; 
 
 + import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 import com . sun . jna . ptr . ByReference ; 
 @ @ - 48 , 7 + 49 , 7 @ @ public interface WinReg { 
 } 
 
 public HKEYByReference ( HKEY h ) { 
 - super ( Pointer . SIZE ) ; 
 + super ( Native . POINTER _ SIZE ) ; 
 setValue ( h ) ; 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java 
 index f371d7f . . f1b6824 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Arrays ; 
 import java . util . List ; 
 
 import com . sun . jna . Callback ; 
 + import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . Union ; 
 @ @ - 198 , 9 + 199 , 9 @ @ public interface WinUser extends WinDef { 
 int GWL _ USERDATA = - 21 ; 
 int GWL _ HWNDPARENT = - 8 ; 
 
 - int DWL _ DLGPROC = Pointer . SIZE ; 
 + int DWL _ DLGPROC = Native . POINTER _ SIZE ; 
 int DWL _ MSGRESULT = 0 ; 
 - int DWL _ USER = 2 * Pointer . SIZE ; 
 + int DWL _ USER = 2 * Native . POINTER _ SIZE ; 
 
 / * Window Styles * / 
 
 diff - - git a / src / com / sun / jna / CallbackReference . java b / src / com / sun / jna / CallbackReference . java 
 index 2a11ec0 . . 5c9d62c 100644 
 - - - a / src / com / sun / jna / CallbackReference . java 
 + + + b / src / com / sun / jna / CallbackReference . java 
 @ @ - 363 , 7 + 363 , 7 @ @ public class CallbackReference extends WeakReference < Callback > { 
 
 / * * Set the behavioral options for this callback . * / 
 private void setCallbackOptions ( int options ) { 
 - cbstruct . setInt ( Pointer . SIZE , options ) ; 
 + cbstruct . setInt ( Native . POINTER _ SIZE , options ) ; 
 } 
 
 / * * Obtain a pointer to the native glue code for this callback . * / 
 diff - - git a / src / com / sun / jna / Function . java b / src / com / sun / jna / Function . java 
 index 15e5b78 . . 795901d 100644 
 - - - a / src / com / sun / jna / Function . java 
 + + + b / src / com / sun / jna / Function . java 
 @ @ - 381 , 7 + 381 , 7 @ @ public class Function extends Pointer { 
 Class < ? > type = inArg . getClass ( ) . getComponentType ( ) ; 
 Structure [ ] ss = ( Structure [ ] ) inArg ; 
 for ( int si = 0 ; si < ss . length ; si + + ) { 
 - Pointer p = array . getPointer ( Pointer . SIZE * si ) ; 
 + Pointer p = array . getPointer ( Native . POINTER _ SIZE * si ) ; 
 ss [ si ] = Structure . updateStructureByReference ( type , ss [ si ] , p ) ; 
 } 
 } 
 @ @ - 814 , 12 + 814 , 12 @ @ public class Function extends Pointer { 
 private static class PointerArray extends Memory implements PostCallRead { 
 private final Pointer [ ] original ; 
 public PointerArray ( Pointer [ ] arg ) { 
 - super ( Pointer . SIZE * ( arg . length + 1 ) ) ; 
 + super ( Native . POINTER _ SIZE * ( arg . length + 1 ) ) ; 
 this . original = arg ; 
 for ( int i = 0 ; i < arg . length ; i + + ) { 
 - setPointer ( i * Pointer . SIZE , arg [ i ] ) ; 
 + setPointer ( i * Native . POINTER _ SIZE , arg [ i ] ) ; 
 } 
 - setPointer ( Pointer . SIZE * arg . length , null ) ; 
 + setPointer ( Native . POINTER _ SIZE * arg . length , null ) ; 
 } 
 @ Override 
 public void read ( ) { 
 diff - - git a / src / com / sun / jna / Memory . java b / src / com / sun / jna / Memory . java 
 index 632f08f . . 60dfd77 100644 
 - - - a / src / com / sun / jna / Memory . java 
 + + + b / src / com / sun / jna / Memory . java 
 @ @ - 537 , 7 + 537 , 7 @ @ public class Memory extends Pointer { 
 * / 
 @ Override 
 public Pointer getPointer ( long offset ) { 
 - boundsCheck ( offset , Pointer . SIZE ) ; 
 + boundsCheck ( offset , Native . POINTER _ SIZE ) ; 
 return super . getPointer ( offset ) ; 
 } 
 
 @ @ - 689 , 7 + 689 , 7 @ @ public class Memory extends Pointer { 
 * / 
 @ Override 
 public void setPointer ( long offset , Pointer value ) { 
 - boundsCheck ( offset , Pointer . SIZE ) ; 
 + boundsCheck ( offset , Native . POINTER _ SIZE ) ; 
 super . setPointer ( offset , value ) ; 
 } 
 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index 274bb78 . . e36df27 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 210 , 7 + 210 , 7 @ @ public final class Native implements Version { 
 WCHAR _ SIZE = sizeof ( TYPE _ WCHAR _ T ) ; 
 SIZE _ T _ SIZE = sizeof ( TYPE _ SIZE _ T ) ; 
 BOOL _ SIZE = sizeof ( TYPE _ BOOL ) ; 
 - 
 + 
 / / Perform initialization of other JNA classes until * after * 
 / / initializing the above final fields 
 initIDs ( ) ; 
 diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java 
 index a1465d5 . . 7c86589 100644 
 - - - a / src / com / sun / jna / NativeLibrary . java 
 + + + b / src / com / sun / jna / NativeLibrary . java 
 @ @ - 870 , 7 + 870 , 7 @ @ public class NativeLibrary { 
 if ( Platform . isLinux ( ) | | Platform . isSolaris ( ) 
 | | Platform . isFreeBSD ( ) | | Platform . iskFreeBSD ( ) ) { 
 / / Linux & FreeBSD use / usr / lib32 , solaris uses / usr / lib / 32 
 - archPath = ( Platform . isSolaris ( ) ? " / " : " " ) + Pointer . SIZE * 8 ; 
 + archPath = ( Platform . isSolaris ( ) ? " / " : " " ) + Native . POINTER _ SIZE * 8 ; 
 } 
 String [ ] paths = { 
 " / usr / lib " + archPath , 
 diff - - git a / src / com / sun / jna / Pointer . java b / src / com / sun / jna / Pointer . java 
 index e201d92 . . 815f256 100644 
 - - - a / src / com / sun / jna / Pointer . java 
 + + + b / src / com / sun / jna / Pointer . java 
 @ @ - 46 , 16 + 46 , 6 @ @ import java . util . List ; 
 * / 
 public class Pointer { 
 
 - / * * Size of a native pointer , in bytes . * / 
 - public static final int SIZE ; 
 - 
 - static { 
 - / / Force load of native library 
 - if ( ( SIZE = Native . POINTER _ SIZE ) = = 0 ) { 
 - throw new Error ( " Native library not initialized " ) ; 
 - } 
 - } 
 - 
 / * * Convenience constant , same as < code > null < / code > . * / 
 public static final Pointer NULL = null ; 
 
 @ @ - 238 , 7 + 228 , 7 @ @ public class Pointer { 
 * / 
 public void read ( long offset , Pointer [ ] buf , int index , int length ) { 
 for ( int i = 0 ; i < length ; i + + ) { 
 - Pointer p = getPointer ( offset + i * Pointer . SIZE ) ; 
 + Pointer p = getPointer ( offset + i * Native . POINTER _ SIZE ) ; 
 Pointer oldp = buf [ i + index ] ; 
 / / Avoid replacing the original pointer if it hasn ' t changed 
 if ( oldp = = null | | p = = null | | p . peer ! = oldp . peer ) { 
 @ @ - 359 , 7 + 349 , 7 @ @ public class Pointer { 
 * / 
 public void write ( long bOff , Pointer [ ] buf , int index , int length ) { 
 for ( int i = 0 ; i < length ; i + + ) { 
 - setPointer ( bOff + i * Pointer . SIZE , buf [ index + i ] ) ; 
 + setPointer ( bOff + i * Native . POINTER _ SIZE , buf [ index + i ] ) ; 
 } 
 } 
 
 @ @ - 779 , 7 + 769 , 7 @ @ v * @ param wide whether to convert from a wide or standard C string 
 Pointer p = getPointer ( offset ) ; 
 while ( p ! = null ) { 
 array . add ( p ) ; 
 - addOffset + = Pointer . SIZE ; 
 + addOffset + = Native . POINTER _ SIZE ; 
 p = getPointer ( offset + addOffset ) ; 
 } 
 return array . toArray ( new Pointer [ array . size ( ) ] ) ; 
 @ @ - 875 , 7 + 865 , 7 @ @ v * @ param wide whether to convert from a wide or standard C string 
 ? p . getWideString ( 0 ) : p . getString ( 0 , encoding ) ) ; 
 strings . add ( s ) ; 
 if ( count < length ) { 
 - addOffset + = SIZE ; 
 + addOffset + = Native . POINTER _ SIZE ; 
 p = getPointer ( offset + addOffset ) ; 
 } 
 } 
 @ @ - 886 , 7 + 876 , 7 @ @ v * @ param wide whether to convert from a wide or standard C string 
 : ( NativeString . WIDE _ STRING . equals ( encoding ) 
 ? p . getWideString ( 0 ) : p . getString ( 0 , encoding ) ) ; 
 strings . add ( s ) ; 
 - addOffset + = SIZE ; 
 + addOffset + = Native . POINTER _ SIZE ; 
 } 
 } 
 return strings . toArray ( new String [ strings . size ( ) ] ) ; 
 diff - - git a / src / com / sun / jna / StringArray . java b / src / com / sun / jna / StringArray . java 
 index 14145d0 . . 82f5d40 100644 
 - - - a / src / com / sun / jna / StringArray . java 
 + + + b / src / com / sun / jna / StringArray . java 
 @ @ - 53 , 7 + 53 , 7 @ @ public class StringArray extends Memory implements Function . PostCallRead { 
 this ( strings , NativeString . WIDE _ STRING ) ; 
 } 
 private StringArray ( Object [ ] strings , String encoding ) { 
 - super ( ( strings . length + 1 ) * Pointer . SIZE ) ; 
 + super ( ( strings . length + 1 ) * Native . POINTER _ SIZE ) ; 
 this . original = strings ; 
 this . encoding = encoding ; 
 for ( int i = 0 ; i < strings . length ; i + + ) { 
 @ @ - 63 , 9 + 63 , 9 @ @ public class StringArray extends Memory implements Function . PostCallRead { 
 natives . add ( ns ) ; 
 p = ns . getPointer ( ) ; 
 } 
 - setPointer ( Pointer . SIZE * i , p ) ; 
 + setPointer ( Native . POINTER _ SIZE * i , p ) ; 
 } 
 - setPointer ( Pointer . SIZE * strings . length , null ) ; 
 + setPointer ( Native . POINTER _ SIZE * strings . length , null ) ; 
 } 
 / * * Read back from native memory . * / 
 @ Override 
 @ @ - 73 , 7 + 73 , 7 @ @ public class StringArray extends Memory implements Function . PostCallRead { 
 boolean returnWide = original instanceof WString [ ] ; 
 boolean wide = NativeString . WIDE _ STRING . equals ( encoding ) ; 
 for ( int si = 0 ; si < original . length ; si + + ) { 
 - Pointer p = getPointer ( si * Pointer . SIZE ) ; 
 + Pointer p = getPointer ( si * Native . POINTER _ SIZE ) ; 
 Object s = null ; 
 if ( p ! = null ) { 
 s = wide ? p . getWideString ( 0 ) : p . getString ( 0 , encoding ) ; 
 diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index c929a45 . . be71f4e 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 1411 , 11 + 1411 , 11 @ @ public abstract class Structure { 
 | | Callback . class . isAssignableFrom ( type ) 
 | | WString . class = = type 
 | | String . class = = type ) { 
 - alignment = Pointer . SIZE ; 
 + alignment = Native . POINTER _ SIZE ; 
 } 
 else if ( Structure . class . isAssignableFrom ( type ) ) { 
 if ( ByReference . class . isAssignableFrom ( type ) ) { 
 - alignment = Pointer . SIZE ; 
 + alignment = Native . POINTER _ SIZE ; 
 } 
 else { 
 if ( value = = null ) 
 @ @ - 1968 , 7 + 1968 , 7 @ @ public abstract class Structure { 
 return Arrays . asList ( new String [ ] { " size " , " alignment " , " type " , " elements " } ) ; 
 } 
 private void init ( Pointer [ ] els ) { 
 - elements = new Memory ( Pointer . SIZE * els . length ) ; 
 + elements = new Memory ( Native . POINTER _ SIZE * els . length ) ; 
 elements . write ( 0 , els , 0 , els . length ) ; 
 write ( ) ; 
 } 
 diff - - git a / src / com / sun / jna / ptr / PointerByReference . java b / src / com / sun / jna / ptr / PointerByReference . java 
 index e3b2b23 . . 91a7727 100644 
 - - - a / src / com / sun / jna / ptr / PointerByReference . java 
 + + + b / src / com / sun / jna / ptr / PointerByReference . java 
 @ @ - 23 , 6 + 23 , 7 @ @ 
 * / 
 package com . sun . jna . ptr ; 
 
 + import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 
 / * * Represents a reference to a pointer to native data . 
 @ @ - 36 , 7 + 37 , 7 @ @ public class PointerByReference extends ByReference { 
 } 
 
 public PointerByReference ( Pointer value ) { 
 - super ( Pointer . SIZE ) ; 
 + super ( Native . POINTER _ SIZE ) ; 
 setValue ( value ) ; 
 } 
 
 diff - - git a / src / com / sun / jna / win32 / StdCallFunctionMapper . java b / src / com / sun / jna / win32 / StdCallFunctionMapper . java 
 index 91fa147 . . 951c6de 100644 
 - - - a / src / com / sun / jna / win32 / StdCallFunctionMapper . java 
 + + + b / src / com / sun / jna / win32 / StdCallFunctionMapper . java 
 @ @ - 49 , 7 + 49 , 7 @ @ public class StdCallFunctionMapper implements FunctionMapper { 
 cls = NativeMappedConverter . getInstance ( cls ) . nativeType ( ) ; 
 } 
 if ( cls . isArray ( ) ) { 
 - return Pointer . SIZE ; 
 + return Native . POINTER _ SIZE ; 
 } 
 try { 
 return Native . getNativeSize ( cls ) ; 
 diff - - git a / test / com / sun / jna / HeadlessLoadLibraryTest . java b / test / com / sun / jna / HeadlessLoadLibraryTest . java 
 index 6ae2bb4 . . e602756 100644 
 - - - a / test / com / sun / jna / HeadlessLoadLibraryTest . java 
 + + + b / test / com / sun / jna / HeadlessLoadLibraryTest . java 
 @ @ - 28 , 7 + 28 , 7 @ @ public class HeadlessLoadLibraryTest extends TestCase { 
 
 public void testLoadWhenHeadless ( ) { 
 System . setProperty ( " java . awt . headless " , " true " ) ; 
 - assertTrue ( " Pointer size must not be zero " , Pointer . SIZE > 0 ) ; 
 + assertTrue ( " Pointer size must not be zero " , Native . POINTER _ SIZE > 0 ) ; 
 } 
 
 public static void main ( String [ ] args ) { 
 diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java 
 index a3c7f57 . . 6678b26 100644 
 - - - a / test / com / sun / jna / LibraryLoadTest . java 
 + + + b / test / com / sun / jna / LibraryLoadTest . java 
 @ @ - 47 , 7 + 47 , 7 @ @ public class LibraryLoadTest extends TestCase implements Paths { 
 } 
 
 public void testLoadJNALibrary ( ) { 
 - assertTrue ( " Pointer size should never be zero " , Pointer . SIZE > 0 ) ; 
 + assertTrue ( " Pointer size should never be zero " , Native . POINTER _ SIZE > 0 ) ; 
 } 
 
 public void testLoadJAWT ( ) { 
 @ @ - 65 , 7 + 65 , 7 @ @ public class LibraryLoadTest extends TestCase implements Paths { 
 
 if ( GraphicsEnvironment . isHeadless ( ) ) return ; 
 
 - if ( Pointer . SIZE > 0 ) { 
 + if ( Native . POINTER _ SIZE > 0 ) { 
 Toolkit . getDefaultToolkit ( ) ; 
 } 
 } 
 diff - - git a / test / com / sun / jna / PointerTest . java b / test / com / sun / jna / PointerTest . java 
 index 8196257 . . a49d6af 100644 
 - - - a / test / com / sun / jna / PointerTest . java 
 + + + b / test / com / sun / jna / PointerTest . java 
 @ @ - 88 , 7 + 88 , 7 @ @ public class PointerTest extends TestCase { 
 } 
 
 public void testSetNativeMapped ( ) { 
 - Pointer p = new Memory ( Pointer . SIZE ) ; 
 + Pointer p = new Memory ( Native . POINTER _ SIZE ) ; 
 TestPointerType tp = new TestPointerType ( p ) ; 
 
 p . setValue ( 0 , tp , tp . getClass ( ) ) ; 
 @ @ - 97 , 7 + 97 , 7 @ @ public class PointerTest extends TestCase { 
 } 
 
 public void testGetNativeMapped ( ) { 
 - Pointer p = new Memory ( Pointer . SIZE ) ; 
 + Pointer p = new Memory ( Native . POINTER _ SIZE ) ; 
 p . setPointer ( 0 , null ) ; 
 Object o = p . getValue ( 0 , TestPointerType . class , null ) ; 
 assertNull ( " Wrong empty value : " + o , o ) ; 
 @ @ - 107 , 14 + 107 , 14 @ @ public class PointerTest extends TestCase { 
 } 
 
 public void testGetStringArray ( ) { 
 - Pointer p = new Memory ( Pointer . SIZE * 3 ) ; 
 + Pointer p = new Memory ( Native . POINTER _ SIZE * 3 ) ; 
 final String VALUE1 = getName ( ) + UNICODE ; 
 final String VALUE2 = getName ( ) + " 2 " + UNICODE ; 
 final String ENCODING = " utf8 " ; 
 
 p . setPointer ( 0 , new NativeString ( VALUE1 , ENCODING ) . getPointer ( ) ) ; 
 - p . setPointer ( Pointer . SIZE , new NativeString ( VALUE2 , ENCODING ) . getPointer ( ) ) ; 
 - p . setPointer ( Pointer . SIZE * 2 , null ) ; 
 + p . setPointer ( Native . POINTER _ SIZE , new NativeString ( VALUE2 , ENCODING ) . getPointer ( ) ) ; 
 + p . setPointer ( Native . POINTER _ SIZE * 2 , null ) ; 
 
 assertEquals ( " Wrong null - terminated String array " , 
 Arrays . asList ( new String [ ] { VALUE1 , VALUE2 } ) , 
 @ @ - 129 , 13 + 129 , 13 @ @ public class PointerTest extends TestCase { 
 } 
 
 public void testGetWideStringArray ( ) { 
 - Pointer p = new Memory ( Pointer . SIZE * 3 ) ; 
 + Pointer p = new Memory ( Native . POINTER _ SIZE * 3 ) ; 
 final String VALUE1 = getName ( ) + UNICODE ; 
 final String VALUE2 = getName ( ) + " 2 " + UNICODE ; 
 
 p . setPointer ( 0 , new NativeString ( VALUE1 , true ) . getPointer ( ) ) ; 
 - p . setPointer ( Pointer . SIZE , new NativeString ( VALUE2 , true ) . getPointer ( ) ) ; 
 - p . setPointer ( Pointer . SIZE * 2 , null ) ; 
 + p . setPointer ( Native . POINTER _ SIZE , new NativeString ( VALUE2 , true ) . getPointer ( ) ) ; 
 + p . setPointer ( Native . POINTER _ SIZE * 2 , null ) ; 
 
 assertEquals ( " Wrong null - terminated String array " , 
 Arrays . asList ( new String [ ] { VALUE1 , VALUE2 } ) , 
 @ @ - 150 , 7 + 150 , 7 @ @ public class PointerTest extends TestCase { 
 } 
 
 public void testReadPointerArray ( ) { 
 - Pointer mem = new Memory ( Pointer . SIZE * 2 ) ; 
 + Pointer mem = new Memory ( Native . POINTER _ SIZE * 2 ) ; 
 Pointer [ ] p = new Pointer [ 2 ] ; 
 String VALUE1 = getName ( ) ; 
 
 @ @ - 166 , 7 + 166 , 7 @ @ public class PointerTest extends TestCase { 
 assertSame ( " Pointer object not preserved [ 1 ] " , orig [ 1 ] , p [ 1 ] ) ; 
 
 mem . setPointer ( 0 , null ) ; 
 - mem . setPointer ( Pointer . SIZE , new Memory ( 1024 ) ) ; 
 + mem . setPointer ( Native . POINTER _ SIZE , new Memory ( 1024 ) ) ; 
 mem . read ( 0 , p , 0 , p . length ) ; 
 assertNull ( " Pointer element not updated [ 0 ] " , p [ 0 ] ) ; 
 assertNotSame ( " Pointer element not updated [ 1 ] " , orig [ 1 ] , p [ 1 ] ) ; 
 @ @ - 181 , 7 + 181 , 7 @ @ public class PointerTest extends TestCase { 
 } 
 
 public void testReadStringArrayNULLElement ( ) { 
 - Memory m = new Memory ( Pointer . SIZE ) ; 
 + Memory m = new Memory ( Native . POINTER _ SIZE ) ; 
 m . clear ( ) ; 
 String [ ] arr = m . getStringArray ( 0 , 1 ) ; 
 assertEquals ( " Wrong array size " , 1 , arr . length ) ; 
 diff - - git a / test / com / sun / jna / StructureBufferFieldTest . java b / test / com / sun / jna / StructureBufferFieldTest . java 
 index 9f89784 . . e66fabe 100644 
 - - - a / test / com / sun / jna / StructureBufferFieldTest . java 
 + + + b / test / com / sun / jna / StructureBufferFieldTest . java 
 @ @ - 74 , 7 + 74 , 7 @ @ public class StructureBufferFieldTest extends TestCase { 
 public void testBufferFieldReadChanged ( ) { 
 if ( ! Platform . HAS _ BUFFERS ) return ; 
 BufferStructure bs = new BufferStructure ( ) ; 
 - if ( Pointer . SIZE = = 4 ) { 
 + if ( Native . POINTER _ SIZE = = 4 ) { 
 bs . getPointer ( ) . setInt ( 0 , 0x1 ) ; 
 } 
 else { 
 diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java 
 index 3adc2e8 . . 21f80f6 100644 
 - - - a / test / com / sun / jna / StructureTest . java 
 + + + b / test / com / sun / jna / StructureTest . java 
 @ @ - 945 , 7 + 945 , 7 @ @ public class StructureTest extends TestCase { 
 public void testPointerArrayField ( ) { 
 ArrayOfPointerStructure s = new ArrayOfPointerStructure ( ) ; 
 int size = s . size ( ) ; 
 - assertEquals ( " Wrong size " , ArrayOfPointerStructure . SIZE * Pointer . SIZE , size ) ; 
 + assertEquals ( " Wrong size " , ArrayOfPointerStructure . SIZE * Native . POINTER _ SIZE , size ) ; 
 s . array [ 0 ] = s . getPointer ( ) ; 
 s . write ( ) ; 
 s . array [ 0 ] = null ; 
 @ @ - 992 , 7 + 992 , 7 @ @ public class StructureTest extends TestCase { 
 } 
 public void testStructureByReferenceField ( ) { 
 StructureWithPointers s = new StructureWithPointers ( ) ; 
 - assertEquals ( " Wrong size for structure with structure references " , Pointer . SIZE * 2 , s . size ( ) ) ; 
 + assertEquals ( " Wrong size for structure with structure references " , Native . POINTER _ SIZE * 2 , s . size ( ) ) ; 
 assertNull ( " Initial refs should be null " , s . s1 ) ; 
 } 
 
 @ @ - 1060 , 14 + 1060 , 14 @ @ public class StructureTest extends TestCase { 
 m2 . setString ( 0 , WVALUE ) ; 
 
 s . getPointer ( ) . setPointer ( 0 , m ) ; 
 - s . getPointer ( ) . setPointer ( Pointer . SIZE , m2 ) ; 
 + s . getPointer ( ) . setPointer ( Native . POINTER _ SIZE , m2 ) ; 
 s . read ( ) ; 
 assertEquals ( " Wrong String field value " , VALUE , s . s ) ; 
 assertEquals ( " Wrong WString field value " , WVALUE , s . ws ) ; 
 
 s . write ( ) ; 
 assertEquals ( " String field should not be overwritten : " + s , m , s . getPointer ( ) . getPointer ( 0 ) ) ; 
 - assertEquals ( " WString field should not be overwritten : " + s , m2 , s . getPointer ( ) . getPointer ( Pointer . SIZE ) ) ; 
 + assertEquals ( " WString field should not be overwritten : " + s , m2 , s . getPointer ( ) . getPointer ( Native . POINTER _ SIZE ) ) ; 
 } 
 
 / / Ensure string cacheing doesn ' t interfere with wrapped structure writes . 
 @ @ - 1148 , 7 + 1148 , 7 @ @ public class StructureTest extends TestCase { 
 } 
 } 
 TestStructure s = new TestStructure ( ) ; 
 - assertEquals ( " Wrong structure size " , 2 * Pointer . SIZE , s . size ( ) ) ; 
 + assertEquals ( " Wrong structure size " , 2 * Native . POINTER _ SIZE , s . size ( ) ) ; 
 
 PublicTestStructure . ByReference ref = new PublicTestStructure . ByReference ( ) ; 
 ref . x = 42 ; 
 @ @ - 1256 , 9 + 1256 , 9 @ @ public class StructureTest extends TestCase { 
 inner , els . getPointer ( 0 ) ) ; 
 assertEquals ( " Wrong type information for integer field " , 
 Structure . getTypeInfo ( Integer . valueOf ( 0 ) ) , 
 - els . getPointer ( Pointer . SIZE ) ) ; 
 + els . getPointer ( Native . POINTER _ SIZE ) ) ; 
 assertNull ( " Type element list should be null - terminated " , 
 - els . getPointer ( Pointer . SIZE * 2 ) ) ; 
 + els . getPointer ( Native . POINTER _ SIZE * 2 ) ) ; 
 } 
 
 public void testInnerArrayTypeInfo ( ) { 
 diff - - git a / test / com / sun / jna / UnionTest . java b / test / com / sun / jna / UnionTest . java 
 index 43f69e0 . . de6a179 100644 
 - - - a / test / com / sun / jna / UnionTest . java 
 + + + b / test / com / sun / jna / UnionTest . java 
 @ @ - 92 , 7 + 92 , 7 @ @ public class UnionTest extends TestCase { 
 
 public void testFieldOffsets ( ) { 
 StructUnion u = new StructUnion ( ) ; 
 - assertEquals ( " Wrong union size : " + u , Pointer . SIZE , u . size ( ) ) ; 
 + assertEquals ( " Wrong union size : " + u , Native . POINTER _ SIZE , u . size ( ) ) ; 
 u . setType ( u . testStruct . getClass ( ) ) ; 
 u . write ( ) ; 
 assertEquals ( " Wrong struct member base address " , 
 @ @ - 132 , 7 + 132 , 7 @ @ public class UnionTest extends TestCase { 
 final int VALUE = 0x12345678 ; 
 / / write an instance of a direct union class to memory 
 StructUnion u = new StructUnion ( ) ; 
 - assertEquals ( " Wrong union size : " + u , Pointer . SIZE , u . size ( ) ) ; 
 + assertEquals ( " Wrong union size : " + u , Native . POINTER _ SIZE , u . size ( ) ) ; 
 IntStructure intStruct = new IntStructure ( ) ; 
 intStruct . value = VALUE ; 
 u . setTypedValue ( intStruct ) ; 
 @ @ - 158 , 7 + 158 , 7 @ @ public class UnionTest extends TestCase { 
 
 public void testReadTypedUnion ( ) { 
 StructUnion u = new StructUnion ( ) ; 
 - assertEquals ( " Wrong union size : " + u , Pointer . SIZE , u . size ( ) ) ; 
 + assertEquals ( " Wrong union size : " + u , Native . POINTER _ SIZE , u . size ( ) ) ; 
 final int VALUE = 0x12345678 ; 
 u . getPointer ( ) . setInt ( 0 , VALUE ) ; 
 assertEquals ( " int structure not read properly " , VALUE , ( ( IntStructure ) u . getTypedValue ( IntStructure . class ) ) . value ) ; 
 diff - - git a / test / com / sun / jna / VMCrashProtectionTest . java b / test / com / sun / jna / VMCrashProtectionTest . java 
 index 45474b0 . . 6c0fb6e 100644 
 - - - a / test / com / sun / jna / VMCrashProtectionTest . java 
 + + + b / test / com / sun / jna / VMCrashProtectionTest . java 
 @ @ - 40 , 8 + 40 , 8 @ @ public class VMCrashProtectionTest extends TestCase { 
 if ( ! Native . isProtected ( ) ) 
 return ; 
 
 - Memory m = new Memory ( Pointer . SIZE ) ; 
 - if ( Pointer . SIZE = = 4 ) 
 + Memory m = new Memory ( Native . POINTER _ SIZE ) ; 
 + if ( Native . POINTER _ SIZE = = 4 ) 
 m . setInt ( 0 , 1 ) ; 
 else 
 m . setLong ( 0 , 1 ) ; 
 diff - - git a / test / com / sun / jna / win32 / W32APIMapperTest . java b / test / com / sun / jna / win32 / W32APIMapperTest . java 
 index 4f3d291 . . b5a5eb8 100644 
 - - - a / test / com / sun / jna / win32 / W32APIMapperTest . java 
 + + + b / test / com / sun / jna / win32 / W32APIMapperTest . java 
 @ @ - 96 , 10 + 96 , 10 @ @ public class W32APIMapperTest extends TestCase { 
 
 public void testInvalidHandleValue ( ) { 
 String EXPECTED = " @ 0xffffffff " ; 
 - if ( Pointer . SIZE = = 8 ) { 
 + if ( Native . POINTER _ SIZE = = 8 ) { 
 EXPECTED + = " ffffffff " ; 
 } 
 - Pointer p = Pointer . createConstant ( Pointer . SIZE = = 8 ? - 1 : 0xFFFFFFFFL ) ; 
 + Pointer p = Pointer . createConstant ( Native . POINTER _ SIZE = = 8 ? - 1 : 0xFFFFFFFFL ) ; 
 assertTrue ( " Wrong value : " + p , p . toString ( ) . endsWith ( EXPECTED ) ) ; 
 
 } 
 @ @ - 133 , 41 + 133 , 41 @ @ public class W32APIMapperTest extends TestCase { 
 public void testUnicodeStructureSize ( ) { 
 UnicodeLibrary . TestStructure s = new UnicodeLibrary . TestStructure ( ) ; 
 assertEquals ( " Wrong structure size " , 
 - Pointer . SIZE * 2 + 8 , s . size ( ) ) ; 
 + Native . POINTER _ SIZE * 2 + 8 , s . size ( ) ) ; 
 } 
 
 public void testASCIIStructureSize ( ) { 
 ASCIILibrary . TestStructure s = new ASCIILibrary . TestStructure ( ) ; 
 assertEquals ( " Wrong structure size " , 
 - Pointer . SIZE * 2 + 8 , s . size ( ) ) ; 
 + Native . POINTER _ SIZE * 2 + 8 , s . size ( ) ) ; 
 } 
 
 public void testUnicodeStructureWriteBoolean ( ) { 
 UnicodeLibrary . TestStructure s = new UnicodeLibrary . TestStructure ( ) ; 
 s . bool2 = true ; 
 s . write ( ) ; 
 - assertEquals ( " Wrong value written for FALSE " , 0 , s . getPointer ( ) . getInt ( Pointer . SIZE * 2 ) ) ; 
 - assertEquals ( " Wrong value written for TRUE " , 1 , s . getPointer ( ) . getInt ( Pointer . SIZE * 2 + 4 ) ) ; 
 + assertEquals ( " Wrong value written for FALSE " , 0 , s . getPointer ( ) . getInt ( Native . POINTER _ SIZE * 2 ) ) ; 
 + assertEquals ( " Wrong value written for TRUE " , 1 , s . getPointer ( ) . getInt ( Native . POINTER _ SIZE * 2 + 4 ) ) ; 
 } 
 public void testASCIIStructureWriteBoolean ( ) { 
 ASCIILibrary . TestStructure s = new ASCIILibrary . TestStructure ( ) ; 
 s . bool2 = true ; 
 s . write ( ) ; 
 - assertEquals ( " Wrong value written for FALSE " , 0 , s . getPointer ( ) . getInt ( Pointer . SIZE * 2 ) ) ; 
 - assertEquals ( " Wrong value written for TRUE " , 1 , s . getPointer ( ) . getInt ( Pointer . SIZE * 2 + 4 ) ) ; 
 + assertEquals ( " Wrong value written for FALSE " , 0 , s . getPointer ( ) . getInt ( Native . POINTER _ SIZE * 2 ) ) ; 
 + assertEquals ( " Wrong value written for TRUE " , 1 , s . getPointer ( ) . getInt ( Native . POINTER _ SIZE * 2 + 4 ) ) ; 
 } 
 public void testUnicodeStructureReadBoolean ( ) { 
 UnicodeLibrary . TestStructure s = new UnicodeLibrary . TestStructure ( ) ; 
 - s . getPointer ( ) . setInt ( Pointer . SIZE * 2 , 1 ) ; 
 - s . getPointer ( ) . setInt ( Pointer . SIZE * 2 + 4 , 0 ) ; 
 + s . getPointer ( ) . setInt ( Native . POINTER _ SIZE * 2 , 1 ) ; 
 + s . getPointer ( ) . setInt ( Native . POINTER _ SIZE * 2 + 4 , 0 ) ; 
 s . read ( ) ; 
 assertTrue ( " Wrong value read for TRUE " , s . bool ) ; 
 assertFalse ( " Wrong value read for FALSE " , s . bool2 ) ; 
 } 
 public void testASCIIStructureReadBoolean ( ) { 
 ASCIILibrary . TestStructure s = new ASCIILibrary . TestStructure ( ) ; 
 - s . getPointer ( ) . setInt ( Pointer . SIZE * 2 , 1 ) ; 
 - s . getPointer ( ) . setInt ( Pointer . SIZE * 2 + 4 , 0 ) ; 
 + s . getPointer ( ) . setInt ( Native . POINTER _ SIZE * 2 , 1 ) ; 
 + s . getPointer ( ) . setInt ( Native . POINTER _ SIZE * 2 + 4 , 0 ) ; 
 s . read ( ) ; 
 assertTrue ( " Wrong value read for TRUE " , s . bool ) ; 
 assertFalse ( " Wrong value read for FALSE " , s . bool2 ) ; 
 @ @ - 178 , 7 + 178 , 7 @ @ public class W32APIMapperTest extends TestCase { 
 s . string2 = MAGIC ; 
 s . write ( ) ; 
 assertEquals ( " Improper null write " , null , s . getPointer ( ) . getPointer ( 0 ) ) ; 
 - assertEquals ( " Improper string write " , MAGIC , s . getPointer ( ) . getPointer ( Pointer . SIZE ) . getWideString ( 0 ) ) ; 
 + assertEquals ( " Improper string write " , MAGIC , s . getPointer ( ) . getPointer ( Native . POINTER _ SIZE ) . getWideString ( 0 ) ) ; 
 } 
 public void testASCIIStructureWriteString ( ) { 
 ASCIILibrary . TestStructure s = new ASCIILibrary . TestStructure ( ) ; 
 @ @ - 186 , 7 + 186 , 7 @ @ public class W32APIMapperTest extends TestCase { 
 s . string2 = MAGIC ; 
 s . write ( ) ; 
 assertEquals ( " Improper null write " , null , s . getPointer ( ) . getPointer ( 0 ) ) ; 
 - assertEquals ( " Improper string write " , MAGIC , s . getPointer ( ) . getPointer ( Pointer . SIZE ) . getString ( 0 ) ) ; 
 + assertEquals ( " Improper string write " , MAGIC , s . getPointer ( ) . getPointer ( Native . POINTER _ SIZE ) . getString ( 0 ) ) ; 
 } 
 public void testUnicodeStructureReadString ( ) { 
 UnicodeLibrary . TestStructure s = new UnicodeLibrary . TestStructure ( ) ;

NEAREST DIFF:
diff - - git a / jnalib / dist / darwin . jar b / jnalib / dist / darwin . jar 
 index fd1f7d4 . . 9bebd3d 100644 
 Binary files a / jnalib / dist / darwin . jar and b / jnalib / dist / darwin . jar differ 
 diff - - git a / jnalib / dist / jna . jar b / jnalib / dist / jna . jar 
 index a4433ac . . 2c98171 100644 
 Binary files a / jnalib / dist / jna . jar and b / jnalib / dist / jna . jar differ
