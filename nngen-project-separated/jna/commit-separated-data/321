BLEU SCORE: 0.040583489434387374

TEST MSG: weakly hold direct - mapped classes
GENERATED MSG: fix exception type

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index de909d6 . . d81554e 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 1219 , 8 + 1219 , 8 @ @ public final class Native implements Version { <nl> } <nl> <nl> <nl> - private static Map registeredClasses = new HashMap ( ) ; <nl> - private static Map registeredLibraries = new HashMap ( ) ; <nl> + private static Map registeredClasses = new WeakHashMap ( ) ; <nl> + private static Map registeredLibraries = new WeakHashMap ( ) ; <nl> <nl> private static void unregisterAll ( ) { <nl> synchronized ( registeredClasses ) {
NEAREST DIFF (one line): diff - - git a / jnalib / build . xml b / jnalib / build . xml <nl> index c841ffe . . 877ce36 100644 <nl> - - - a / jnalib / build . xml <nl> + + + b / jnalib / build . xml <nl> @ @ - 15 , 6 + 15 , 7 @ @ <nl> < ! - - ( all build - related props should go in - dynamic - properties ) - - > <nl> < property name = " name " value = " jna " / > <nl> < property name = " jar " value = " $ { name } . jar " / > <nl> + < property name = " testjar " value = " $ { name } - test . jar " / > <nl> < property name = " debug " value = " true " / > <nl> < property name = " debug . native " value = " false " / > <nl> < property name = " cflags _ extra . native " value = " " / > <nl> @ @ - 403 , 6 + 404 , 21 @ @ <nl> deprecation = " on " debug = " $ { debug } " > <nl> < src path = " $ { test . src } " / > <nl> < / javac > <nl> + < jar jarfile = " $ { build } / $ { testjar } " > <nl> + < fileset dir = " $ { test . classes } " > <nl> + < patternset refid = " jar - compiled " / > <nl> + < / fileset > <nl> + < / jar > <nl> + < mkdir dir = " $ { build } / jws " / > <nl> + < copy todir = " $ { build } / jws " file = " $ { build } / $ { jar } " / > <nl> + < copy todir = " $ { build } / jws " file = " $ { build } / $ { testjar } " / > <nl> + < copy todir = " $ { build } / jws " file = " lib / junit . jar " / > <nl> + < jar jarfile = " $ { build } / jws / jnidispatch . jar " > <nl> + < fileset dir = " $ { build . native } " includes = " * jnidispatch . * " / > <nl> + < / jar > <nl> + < signjar alias = " jna " keystore = " jna . keystore " storepass = " jnadev " > <nl> + < fileset dir = " $ { build } / jws " includes = " * . jar " / > <nl> + < / signjar > <nl> < / target > <nl> <nl> < ! - - When running tests from an IDE , be sure to set jna . library . path - - > <nl> diff - - git a / jnalib / jna . keystore b / jnalib / jna . keystore <nl> new file mode 100644 <nl> index 0000000 . . e991534 <nl> Binary files / dev / null and b / jnalib / jna . keystore differ <nl> diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java <nl> new file mode 100644 <nl> index 0000000 . . 29a54ea <nl> - - - / dev / null <nl> + + + b / jnalib / test / com / sun / jna / WebStartTest . java <nl> @ @ - 0 , 0 + 1 , 326 @ @ <nl> + / * Copyright ( c ) 2009 Timothy Wall , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna ; <nl> + <nl> + import javax . swing . JFrame ; <nl> + import javax . swing . JLabel ; <nl> + <nl> + import java . awt . GraphicsEnvironment ; <nl> + import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . InputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . OutputStream ; <nl> + import java . io . PrintStream ; <nl> + import java . net . InetAddress ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . ServerSocket ; <nl> + import java . net . Socket ; <nl> + import java . net . SocketTimeoutException ; <nl> + import java . net . URL ; <nl> + import java . net . URLClassLoader ; <nl> + import java . util . Enumeration ; <nl> + import java . util . Properties ; <nl> + <nl> + import junit . framework . AssertionFailedError ; <nl> + import junit . framework . Test ; <nl> + import junit . framework . TestCase ; <nl> + import junit . framework . TestFailure ; <nl> + import junit . framework . TestResult ; <nl> + <nl> + public class WebStartTest extends TestCase { <nl> + <nl> + / / Provide a policy file for unsigned jars <nl> + / / Unfortunately this does not allow native libraries <nl> + private static final String POLICY = <nl> + " grant { \ n " <nl> + + " permission java . security . AllPermission ; \ n " <nl> + + " } ; " ; <nl> + <nl> + private static final String JNLP = <nl> + " < ? xml version = ' 1 . 0 ' encoding = ' UTF - 8 ' ? > \ n " <nl> + + " < jnlp spec = ' 1 . 0 ' codebase = ' { CODEBASE } ' href = ' { JNLP _ FILE } ' > \ n " <nl> + + " < information > \ n " <nl> + + " < title > JNLP Web Start Test < / title > \ n " <nl> + + " < vendor > JNA < / vendor > \ n " <nl> + + " < homepage href = ' http : / / jna . dev . java . net ' / > \ n " <nl> + + " < description > Local JNLP launch test . < / description > \ n " <nl> + + " < description kind = ' short ' > Launch Test < / description > \ n " <nl> + + " < / information > \ n " <nl> + / / all - permissions is required for < nativelib > s <nl> + / / but will cause unsigned jars to fail ( irrespective of policy ) <nl> + + " < security > < all - permissions / > < / security > \ n " <nl> + + " < resources > \ n " <nl> + + " < j2se version = ' 1 . 3 + ' href = ' http : / / java . sun . com / products / autodl / j2se ' / > \ n " <nl> + + " < jar href = ' jna . jar ' / > \ n " <nl> + + " < jar href = ' jna - test . jar ' / > \ n " <nl> + + " < jar href = ' junit . jar ' / > \ n " <nl> + + " < nativelib href = ' jnidispatch . jar ' / > \ n " <nl> + + " < / resources > \ n " <nl> + + " < offline - allowed / > \ n " <nl> + + " < application - desc main - class = ' " + WebStartTest . class . getName ( ) + " ' > \ n " <nl> + + " < argument > { CLASS } < / argument > \ n " <nl> + + " < argument > { METHOD } < / argument > \ n " <nl> + + " < argument > { PORT } < / argument > \ n " <nl> + + " < / application - desc > \ n " <nl> + + " < / jnlp > " ; <nl> + <nl> + public void testLaunchedUnderWebStart ( ) throws Exception { <nl> + assertNotNull ( " Test not launched under web start " , <nl> + System . getProperty ( " javawebstart . version " ) ) ; <nl> + } <nl> + <nl> + public void testDetectFailure ( ) { <nl> + fail ( " This test is supposed to fail " ) ; <nl> + } <nl> + <nl> + public void testDetectError ( ) { <nl> + throw new Error ( " This test is supposed to error " ) ; <nl> + } <nl> + <nl> + public void testJNLPFindLibrary ( ) { <nl> + String path = Native . getWebStartLibraryPath ( " jnidispatch " ) ; <nl> + assertNotNull ( " Web Start library path not found " , path ) ; <nl> + } <nl> + <nl> + private void runTestUnderWebStart ( String testClass , String testMethod ) throws Exception { <nl> + String BUILDDIR = System . getProperty ( " jna . builddir " , <nl> + " build " <nl> + + ( Platform . is64Bit ( ) <nl> + ? " - d64 " : " " ) ) ; <nl> + String codebase = new File ( BUILDDIR , " jws " ) . toURI ( ) . toURL ( ) . toString ( ) ; <nl> + <nl> + ServerSocket s = new ServerSocket ( 0 ) ; <nl> + s . setSoTimeout ( 10000 ) ; <nl> + int port = s . getLocalPort ( ) ; <nl> + <nl> + / / File jnlp = new File ( getName ( ) + " . jnlp " ) ; <nl> + File jnlp = File . createTempFile ( getName ( ) , " . jnlp " ) ; <nl> + jnlp . deleteOnExit ( ) ; <nl> + String contents = JNLP . replace ( " { CLASS } " , testClass ) ; <nl> + contents = contents . replace ( " { METHOD } " , testMethod ) ; <nl> + contents = contents . replace ( " { CODEBASE } " , codebase ) ; <nl> + contents = contents . replace ( " { JNLP _ FILE } " , jnlp . toURI ( ) . toURL ( ) . toString ( ) ) ; <nl> + contents = contents . replace ( " { PORT } " , String . valueOf ( port ) ) ; <nl> + <nl> + OutputStream os = new FileOutputStream ( jnlp ) ; <nl> + os . write ( contents . getBytes ( ) ) ; <nl> + os . close ( ) ; <nl> + File keystore = new File ( " jna . keystore " ) ; <nl> + String JAVA _ HOME = System . getProperty ( " java . home " ) ; <nl> + String LIB = new File ( JAVA _ HOME , " / lib " ) . getAbsolutePath ( ) ; <nl> + if ( ! new File ( LIB , " javaws . jar " ) . exists ( ) ) { <nl> + LIB = new File ( " / System / Library / Frameworks / JavaVM . framework / Resources / Deploy . bundle / Contents / Home / lib " ) . getAbsolutePath ( ) ; <nl> + if ( ! new File ( LIB , " javaws . jar " ) . exists ( ) ) { <nl> + throw new IOException ( " javaws . jar not found " ) ; <nl> + } <nl> + } <nl> + String PS = System . getProperty ( " path . separator " ) ; <nl> + String [ ] cmd = { <nl> + " javaws " , <nl> + " - Xnosplash " , <nl> + " - wait " , <nl> + jnlp . toURI ( ) . toURL ( ) . toString ( ) , <nl> + } ; <nl> + Process p = Runtime . getRuntime ( ) . exec ( cmd ) ; <nl> + StringBuffer output = new StringBuffer ( ) ; <nl> + class SocketHandler extends Thread { <nl> + private InputStream is ; <nl> + private StringBuffer sb ; <nl> + public SocketHandler ( Socket s , StringBuffer b ) throws IOException { <nl> + this . is = s . getInputStream ( ) ; <nl> + this . sb = b ; <nl> + } <nl> + public void run ( ) { <nl> + byte [ ] buf = new byte [ 256 ] ; <nl> + while ( true ) { <nl> + try { <nl> + int count = is . read ( buf , 0 , buf . length ) ; <nl> + if ( count = = - 1 ) break ; <nl> + if ( count = = 0 ) { <nl> + try { sleep ( 1 ) ; } catch ( InterruptedException e ) { } <nl> + } <nl> + else { <nl> + sb . append ( new String ( buf , 0 , count ) ) ; <nl> + } <nl> + } <nl> + catch ( IOException e ) { <nl> + } <nl> + } <nl> + try { is . close ( ) ; } catch ( IOException e ) { } <nl> + } <nl> + } <nl> + <nl> + try { <nl> + Thread out = new SocketHandler ( s . accept ( ) , output ) ; <nl> + out . start ( ) ; <nl> + } <nl> + catch ( SocketTimeoutException e ) { <nl> + / / p . destroy ( ) ; <nl> + / / throw new Error ( " JWS Timed out " ) ; <nl> + } <nl> + p . waitFor ( ) ; <nl> + <nl> + int code = p . exitValue ( ) ; <nl> + String error = output . toString ( ) ; <nl> + if ( code ! = 0 | | ! " " . equals ( error ) ) { <nl> + if ( code = = 1 <nl> + | | error . indexOf ( " AssertionFailedError " ) ! = - 1 ) { <nl> + fail ( " JWS FAIL : " + error ) ; <nl> + } <nl> + throw new Error ( " JWS ERROR : " + error ) ; <nl> + } <nl> + } <nl> + <nl> + private static boolean runningWebStart ( ) { <nl> + return System . getProperty ( " javawebstart . version " ) ! = null ; <nl> + } <nl> + <nl> + private void runTestUnderWebStart ( ) throws Exception { <nl> + if ( getClass ( ) . equals ( WebStartTest . class ) ) { <nl> + if ( getName ( ) . equals ( " testDetectFailure " ) ) { <nl> + try { <nl> + runTestUnderWebStart ( getClass ( ) . getName ( ) , getName ( ) ) ; <nl> + } <nl> + catch ( AssertionFailedError e ) { <nl> + return ; <nl> + } <nl> + fail ( " Failed to detect test failure " ) ; <nl> + } <nl> + else if ( getName ( ) . equals ( " testDetectError " ) ) { <nl> + try { <nl> + runTestUnderWebStart ( getClass ( ) . getName ( ) , getName ( ) ) ; <nl> + } <nl> + catch ( AssertionFailedError e ) { <nl> + fail ( " Wrong error type : " + e ) ; <nl> + } <nl> + catch ( Error e ) { <nl> + return ; <nl> + } <nl> + fail ( " Failed to detect test error " ) ; <nl> + } <nl> + else { <nl> + runTestUnderWebStart ( getClass ( ) . getName ( ) , getName ( ) ) ; <nl> + } <nl> + } <nl> + else { <nl> + runTestUnderWebStart ( getClass ( ) . getName ( ) , getName ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + private File findDeploymentProperties ( ) { <nl> + String path = System . getProperty ( " user . home " ) ; <nl> + File deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; <nl> + if ( ! deployment . exists ( ) ) { <nl> + deployment = new File ( path + " / Library / Caches / Java " ) ; <nl> + } <nl> + if ( ! deployment . exists ( ) ) { <nl> + deployment = new File ( path + " / . java / deployment " ) ; <nl> + } <nl> + if ( ! deployment . exists ( ) ) { <nl> + throw new Error ( " Deployment directory does not exist ; save Java Control Panel settings to initialize it " ) ; <nl> + } <nl> + return new File ( deployment , " deployment . properties " ) ; <nl> + } <nl> + <nl> + private static final String POLICY _ KEY = <nl> + " deployment . user . security . policy " ; <nl> + private static final String CERTS _ KEY = <nl> + " deployment . user . security . trusted . certs " ; <nl> + public void runBare ( ) throws Throwable { <nl> + if ( runningWebStart ( ) ) { <nl> + super . runBare ( ) ; <nl> + } <nl> + else if ( ! GraphicsEnvironment . isHeadless ( ) ) { <nl> + / / File policy = new File ( getName ( ) + " . policy " ) ; <nl> + File policy = File . createTempFile ( getName ( ) , " . policy " ) ; <nl> + policy . deleteOnExit ( ) ; <nl> + OutputStream os = new FileOutputStream ( policy ) ; <nl> + os . write ( POLICY . getBytes ( ) ) ; <nl> + os . close ( ) ; <nl> + File dpfile = findDeploymentProperties ( ) ; <nl> + Properties saved = new Properties ( ) ; <nl> + saved . load ( new FileInputStream ( dpfile ) ) ; <nl> + Properties props = new Properties ( ) ; <nl> + props . putAll ( saved ) ; <nl> + props . setProperty ( CERTS _ KEY , " jna . keystore " ) ; <nl> + props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; <nl> + props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; <nl> + try { <nl> + runTestUnderWebStart ( ) ; <nl> + } <nl> + finally { <nl> + saved . store ( new FileOutputStream ( dpfile ) , " deployment . properties " ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void runTestCaseTest ( String testClass , String method , int port ) { <nl> + try { <nl> + TestCase test = ( TestCase ) Class . forName ( testClass ) . newInstance ( ) ; <nl> + test . setName ( method ) ; <nl> + TestResult result = new TestResult ( ) ; <nl> + test . run ( result ) ; <nl> + Socket s = new Socket ( InetAddress . getLocalHost ( ) , port ) ; <nl> + OutputStream os = s . getOutputStream ( ) ; <nl> + if ( result . failureCount ( ) ! = 0 ) { <nl> + Enumeration e = result . failures ( ) ; <nl> + Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; <nl> + t . printStackTrace ( new PrintStream ( os ) ) ; <nl> + s . close ( ) ; <nl> + System . exit ( 1 ) ; <nl> + } <nl> + else if ( result . errorCount ( ) ! = 0 ) { <nl> + Enumeration e = result . errors ( ) ; <nl> + Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; <nl> + t . printStackTrace ( new PrintStream ( os ) ) ; <nl> + s . close ( ) ; <nl> + System . exit ( 2 ) ; <nl> + } <nl> + s . close ( ) ; <nl> + Thread . sleep ( 5000 ) ; <nl> + System . exit ( 0 ) ; <nl> + } <nl> + catch ( Throwable e ) { <nl> + / / Can ' t communicate back to launching process <nl> + showMessage ( " ERROR : " + e . getMessage ( ) ) ; <nl> + System . exit ( - 1 ) ; <nl> + } <nl> + } <nl> + <nl> + private static void showMessage ( String msg ) { <nl> + JFrame f = new JFrame ( " Web Start Test Failure " ) ; <nl> + f . getContentPane ( ) . add ( new JLabel ( msg ) ) ; <nl> + f . pack ( ) ; <nl> + f . setLocation ( 100 , 100 ) ; <nl> + f . setVisible ( true ) ; <nl> + f . setDefaultCloseOperation ( JFrame . EXIT _ ON _ CLOSE ) ; <nl> + try { Thread . sleep ( 60000 ) ; } catch ( Exception e ) { } <nl> + } <nl> + <nl> + public static void main ( String [ ] args ) { <nl> + if ( runningWebStart ( ) ) { <nl> + String testClass = args . length > 0 <nl> + ? args [ 0 ] : WebStartTest . class . getName ( ) ; <nl> + String testMethod = args . length > 1 <nl> + ? args [ 1 ] : " testLaunchedUnderWebStart " ; <nl> + int port = args . length > 2 <nl> + ? Integer . parseInt ( args [ 2 ] ) : 8080 ; <nl> + runTestCaseTest ( testClass , testMethod , port ) ; <nl> + } <nl> + else { <nl> + junit . textui . TestRunner . run ( WebStartTest . class ) ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index de909d6 . . d81554e 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 1219 , 8 + 1219 , 8 @ @ public final class Native implements Version { 
 } 
 
 
 - private static Map registeredClasses = new HashMap ( ) ; 
 - private static Map registeredLibraries = new HashMap ( ) ; 
 + private static Map registeredClasses = new WeakHashMap ( ) ; 
 + private static Map registeredLibraries = new WeakHashMap ( ) ; 
 
 private static void unregisterAll ( ) { 
 synchronized ( registeredClasses ) {

NEAREST DIFF:
diff - - git a / jnalib / build . xml b / jnalib / build . xml 
 index c841ffe . . 877ce36 100644 
 - - - a / jnalib / build . xml 
 + + + b / jnalib / build . xml 
 @ @ - 15 , 6 + 15 , 7 @ @ 
 < ! - - ( all build - related props should go in - dynamic - properties ) - - > 
 < property name = " name " value = " jna " / > 
 < property name = " jar " value = " $ { name } . jar " / > 
 + < property name = " testjar " value = " $ { name } - test . jar " / > 
 < property name = " debug " value = " true " / > 
 < property name = " debug . native " value = " false " / > 
 < property name = " cflags _ extra . native " value = " " / > 
 @ @ - 403 , 6 + 404 , 21 @ @ 
 deprecation = " on " debug = " $ { debug } " > 
 < src path = " $ { test . src } " / > 
 < / javac > 
 + < jar jarfile = " $ { build } / $ { testjar } " > 
 + < fileset dir = " $ { test . classes } " > 
 + < patternset refid = " jar - compiled " / > 
 + < / fileset > 
 + < / jar > 
 + < mkdir dir = " $ { build } / jws " / > 
 + < copy todir = " $ { build } / jws " file = " $ { build } / $ { jar } " / > 
 + < copy todir = " $ { build } / jws " file = " $ { build } / $ { testjar } " / > 
 + < copy todir = " $ { build } / jws " file = " lib / junit . jar " / > 
 + < jar jarfile = " $ { build } / jws / jnidispatch . jar " > 
 + < fileset dir = " $ { build . native } " includes = " * jnidispatch . * " / > 
 + < / jar > 
 + < signjar alias = " jna " keystore = " jna . keystore " storepass = " jnadev " > 
 + < fileset dir = " $ { build } / jws " includes = " * . jar " / > 
 + < / signjar > 
 < / target > 
 
 < ! - - When running tests from an IDE , be sure to set jna . library . path - - > 
 diff - - git a / jnalib / jna . keystore b / jnalib / jna . keystore 
 new file mode 100644 
 index 0000000 . . e991534 
 Binary files / dev / null and b / jnalib / jna . keystore differ 
 diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java 
 new file mode 100644 
 index 0000000 . . 29a54ea 
 - - - / dev / null 
 + + + b / jnalib / test / com / sun / jna / WebStartTest . java 
 @ @ - 0 , 0 + 1 , 326 @ @ 
 + / * Copyright ( c ) 2009 Timothy Wall , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna ; 
 + 
 + import javax . swing . JFrame ; 
 + import javax . swing . JLabel ; 
 + 
 + import java . awt . GraphicsEnvironment ; 
 + import java . io . File ; 
 + import java . io . FileInputStream ; 
 + import java . io . FileOutputStream ; 
 + import java . io . InputStream ; 
 + import java . io . IOException ; 
 + import java . io . OutputStream ; 
 + import java . io . PrintStream ; 
 + import java . net . InetAddress ; 
 + import java . net . MalformedURLException ; 
 + import java . net . ServerSocket ; 
 + import java . net . Socket ; 
 + import java . net . SocketTimeoutException ; 
 + import java . net . URL ; 
 + import java . net . URLClassLoader ; 
 + import java . util . Enumeration ; 
 + import java . util . Properties ; 
 + 
 + import junit . framework . AssertionFailedError ; 
 + import junit . framework . Test ; 
 + import junit . framework . TestCase ; 
 + import junit . framework . TestFailure ; 
 + import junit . framework . TestResult ; 
 + 
 + public class WebStartTest extends TestCase { 
 + 
 + / / Provide a policy file for unsigned jars 
 + / / Unfortunately this does not allow native libraries 
 + private static final String POLICY = 
 + " grant { \ n " 
 + + " permission java . security . AllPermission ; \ n " 
 + + " } ; " ; 
 + 
 + private static final String JNLP = 
 + " < ? xml version = ' 1 . 0 ' encoding = ' UTF - 8 ' ? > \ n " 
 + + " < jnlp spec = ' 1 . 0 ' codebase = ' { CODEBASE } ' href = ' { JNLP _ FILE } ' > \ n " 
 + + " < information > \ n " 
 + + " < title > JNLP Web Start Test < / title > \ n " 
 + + " < vendor > JNA < / vendor > \ n " 
 + + " < homepage href = ' http : / / jna . dev . java . net ' / > \ n " 
 + + " < description > Local JNLP launch test . < / description > \ n " 
 + + " < description kind = ' short ' > Launch Test < / description > \ n " 
 + + " < / information > \ n " 
 + / / all - permissions is required for < nativelib > s 
 + / / but will cause unsigned jars to fail ( irrespective of policy ) 
 + + " < security > < all - permissions / > < / security > \ n " 
 + + " < resources > \ n " 
 + + " < j2se version = ' 1 . 3 + ' href = ' http : / / java . sun . com / products / autodl / j2se ' / > \ n " 
 + + " < jar href = ' jna . jar ' / > \ n " 
 + + " < jar href = ' jna - test . jar ' / > \ n " 
 + + " < jar href = ' junit . jar ' / > \ n " 
 + + " < nativelib href = ' jnidispatch . jar ' / > \ n " 
 + + " < / resources > \ n " 
 + + " < offline - allowed / > \ n " 
 + + " < application - desc main - class = ' " + WebStartTest . class . getName ( ) + " ' > \ n " 
 + + " < argument > { CLASS } < / argument > \ n " 
 + + " < argument > { METHOD } < / argument > \ n " 
 + + " < argument > { PORT } < / argument > \ n " 
 + + " < / application - desc > \ n " 
 + + " < / jnlp > " ; 
 + 
 + public void testLaunchedUnderWebStart ( ) throws Exception { 
 + assertNotNull ( " Test not launched under web start " , 
 + System . getProperty ( " javawebstart . version " ) ) ; 
 + } 
 + 
 + public void testDetectFailure ( ) { 
 + fail ( " This test is supposed to fail " ) ; 
 + } 
 + 
 + public void testDetectError ( ) { 
 + throw new Error ( " This test is supposed to error " ) ; 
 + } 
 + 
 + public void testJNLPFindLibrary ( ) { 
 + String path = Native . getWebStartLibraryPath ( " jnidispatch " ) ; 
 + assertNotNull ( " Web Start library path not found " , path ) ; 
 + } 
 + 
 + private void runTestUnderWebStart ( String testClass , String testMethod ) throws Exception { 
 + String BUILDDIR = System . getProperty ( " jna . builddir " , 
 + " build " 
 + + ( Platform . is64Bit ( ) 
 + ? " - d64 " : " " ) ) ; 
 + String codebase = new File ( BUILDDIR , " jws " ) . toURI ( ) . toURL ( ) . toString ( ) ; 
 + 
 + ServerSocket s = new ServerSocket ( 0 ) ; 
 + s . setSoTimeout ( 10000 ) ; 
 + int port = s . getLocalPort ( ) ; 
 + 
 + / / File jnlp = new File ( getName ( ) + " . jnlp " ) ; 
 + File jnlp = File . createTempFile ( getName ( ) , " . jnlp " ) ; 
 + jnlp . deleteOnExit ( ) ; 
 + String contents = JNLP . replace ( " { CLASS } " , testClass ) ; 
 + contents = contents . replace ( " { METHOD } " , testMethod ) ; 
 + contents = contents . replace ( " { CODEBASE } " , codebase ) ; 
 + contents = contents . replace ( " { JNLP _ FILE } " , jnlp . toURI ( ) . toURL ( ) . toString ( ) ) ; 
 + contents = contents . replace ( " { PORT } " , String . valueOf ( port ) ) ; 
 + 
 + OutputStream os = new FileOutputStream ( jnlp ) ; 
 + os . write ( contents . getBytes ( ) ) ; 
 + os . close ( ) ; 
 + File keystore = new File ( " jna . keystore " ) ; 
 + String JAVA _ HOME = System . getProperty ( " java . home " ) ; 
 + String LIB = new File ( JAVA _ HOME , " / lib " ) . getAbsolutePath ( ) ; 
 + if ( ! new File ( LIB , " javaws . jar " ) . exists ( ) ) { 
 + LIB = new File ( " / System / Library / Frameworks / JavaVM . framework / Resources / Deploy . bundle / Contents / Home / lib " ) . getAbsolutePath ( ) ; 
 + if ( ! new File ( LIB , " javaws . jar " ) . exists ( ) ) { 
 + throw new IOException ( " javaws . jar not found " ) ; 
 + } 
 + } 
 + String PS = System . getProperty ( " path . separator " ) ; 
 + String [ ] cmd = { 
 + " javaws " , 
 + " - Xnosplash " , 
 + " - wait " , 
 + jnlp . toURI ( ) . toURL ( ) . toString ( ) , 
 + } ; 
 + Process p = Runtime . getRuntime ( ) . exec ( cmd ) ; 
 + StringBuffer output = new StringBuffer ( ) ; 
 + class SocketHandler extends Thread { 
 + private InputStream is ; 
 + private StringBuffer sb ; 
 + public SocketHandler ( Socket s , StringBuffer b ) throws IOException { 
 + this . is = s . getInputStream ( ) ; 
 + this . sb = b ; 
 + } 
 + public void run ( ) { 
 + byte [ ] buf = new byte [ 256 ] ; 
 + while ( true ) { 
 + try { 
 + int count = is . read ( buf , 0 , buf . length ) ; 
 + if ( count = = - 1 ) break ; 
 + if ( count = = 0 ) { 
 + try { sleep ( 1 ) ; } catch ( InterruptedException e ) { } 
 + } 
 + else { 
 + sb . append ( new String ( buf , 0 , count ) ) ; 
 + } 
 + } 
 + catch ( IOException e ) { 
 + } 
 + } 
 + try { is . close ( ) ; } catch ( IOException e ) { } 
 + } 
 + } 
 + 
 + try { 
 + Thread out = new SocketHandler ( s . accept ( ) , output ) ; 
 + out . start ( ) ; 
 + } 
 + catch ( SocketTimeoutException e ) { 
 + / / p . destroy ( ) ; 
 + / / throw new Error ( " JWS Timed out " ) ; 
 + } 
 + p . waitFor ( ) ; 
 + 
 + int code = p . exitValue ( ) ; 
 + String error = output . toString ( ) ; 
 + if ( code ! = 0 | | ! " " . equals ( error ) ) { 
 + if ( code = = 1 
 + | | error . indexOf ( " AssertionFailedError " ) ! = - 1 ) { 
 + fail ( " JWS FAIL : " + error ) ; 
 + } 
 + throw new Error ( " JWS ERROR : " + error ) ; 
 + } 
 + } 
 + 
 + private static boolean runningWebStart ( ) { 
 + return System . getProperty ( " javawebstart . version " ) ! = null ; 
 + } 
 + 
 + private void runTestUnderWebStart ( ) throws Exception { 
 + if ( getClass ( ) . equals ( WebStartTest . class ) ) { 
 + if ( getName ( ) . equals ( " testDetectFailure " ) ) { 
 + try { 
 + runTestUnderWebStart ( getClass ( ) . getName ( ) , getName ( ) ) ; 
 + } 
 + catch ( AssertionFailedError e ) { 
 + return ; 
 + } 
 + fail ( " Failed to detect test failure " ) ; 
 + } 
 + else if ( getName ( ) . equals ( " testDetectError " ) ) { 
 + try { 
 + runTestUnderWebStart ( getClass ( ) . getName ( ) , getName ( ) ) ; 
 + } 
 + catch ( AssertionFailedError e ) { 
 + fail ( " Wrong error type : " + e ) ; 
 + } 
 + catch ( Error e ) { 
 + return ; 
 + } 
 + fail ( " Failed to detect test error " ) ; 
 + } 
 + else { 
 + runTestUnderWebStart ( getClass ( ) . getName ( ) , getName ( ) ) ; 
 + } 
 + } 
 + else { 
 + runTestUnderWebStart ( getClass ( ) . getName ( ) , getName ( ) ) ; 
 + } 
 + } 
 + 
 + private File findDeploymentProperties ( ) { 
 + String path = System . getProperty ( " user . home " ) ; 
 + File deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; 
 + if ( ! deployment . exists ( ) ) { 
 + deployment = new File ( path + " / Library / Caches / Java " ) ; 
 + } 
 + if ( ! deployment . exists ( ) ) { 
 + deployment = new File ( path + " / . java / deployment " ) ; 
 + } 
 + if ( ! deployment . exists ( ) ) { 
 + throw new Error ( " Deployment directory does not exist ; save Java Control Panel settings to initialize it " ) ; 
 + } 
 + return new File ( deployment , " deployment . properties " ) ; 
 + } 
 + 
 + private static final String POLICY _ KEY = 
 + " deployment . user . security . policy " ; 
 + private static final String CERTS _ KEY = 
 + " deployment . user . security . trusted . certs " ; 
 + public void runBare ( ) throws Throwable { 
 + if ( runningWebStart ( ) ) { 
 + super . runBare ( ) ; 
 + } 
 + else if ( ! GraphicsEnvironment . isHeadless ( ) ) { 
 + / / File policy = new File ( getName ( ) + " . policy " ) ; 
 + File policy = File . createTempFile ( getName ( ) , " . policy " ) ; 
 + policy . deleteOnExit ( ) ; 
 + OutputStream os = new FileOutputStream ( policy ) ; 
 + os . write ( POLICY . getBytes ( ) ) ; 
 + os . close ( ) ; 
 + File dpfile = findDeploymentProperties ( ) ; 
 + Properties saved = new Properties ( ) ; 
 + saved . load ( new FileInputStream ( dpfile ) ) ; 
 + Properties props = new Properties ( ) ; 
 + props . putAll ( saved ) ; 
 + props . setProperty ( CERTS _ KEY , " jna . keystore " ) ; 
 + props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; 
 + props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; 
 + try { 
 + runTestUnderWebStart ( ) ; 
 + } 
 + finally { 
 + saved . store ( new FileOutputStream ( dpfile ) , " deployment . properties " ) ; 
 + } 
 + } 
 + } 
 + 
 + private static void runTestCaseTest ( String testClass , String method , int port ) { 
 + try { 
 + TestCase test = ( TestCase ) Class . forName ( testClass ) . newInstance ( ) ; 
 + test . setName ( method ) ; 
 + TestResult result = new TestResult ( ) ; 
 + test . run ( result ) ; 
 + Socket s = new Socket ( InetAddress . getLocalHost ( ) , port ) ; 
 + OutputStream os = s . getOutputStream ( ) ; 
 + if ( result . failureCount ( ) ! = 0 ) { 
 + Enumeration e = result . failures ( ) ; 
 + Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; 
 + t . printStackTrace ( new PrintStream ( os ) ) ; 
 + s . close ( ) ; 
 + System . exit ( 1 ) ; 
 + } 
 + else if ( result . errorCount ( ) ! = 0 ) { 
 + Enumeration e = result . errors ( ) ; 
 + Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; 
 + t . printStackTrace ( new PrintStream ( os ) ) ; 
 + s . close ( ) ; 
 + System . exit ( 2 ) ; 
 + } 
 + s . close ( ) ; 
 + Thread . sleep ( 5000 ) ; 
 + System . exit ( 0 ) ; 
 + } 
 + catch ( Throwable e ) { 
 + / / Can ' t communicate back to launching process 
 + showMessage ( " ERROR : " + e . getMessage ( ) ) ; 
 + System . exit ( - 1 ) ; 
 + } 
 + } 
 + 
 + private static void showMessage ( String msg ) { 
 + JFrame f = new JFrame ( " Web Start Test Failure " ) ; 
 + f . getContentPane ( ) . add ( new JLabel ( msg ) ) ; 
 + f . pack ( ) ; 
 + f . setLocation ( 100 , 100 ) ; 
 + f . setVisible ( true ) ; 
 + f . setDefaultCloseOperation ( JFrame . EXIT _ ON _ CLOSE ) ; 
 + try { Thread . sleep ( 60000 ) ; } catch ( Exception e ) { } 
 + } 
 + 
 + public static void main ( String [ ] args ) { 
 + if ( runningWebStart ( ) ) { 
 + String testClass = args . length > 0 
 + ? args [ 0 ] : WebStartTest . class . getName ( ) ; 
 + String testMethod = args . length > 1 
 + ? args [ 1 ] : " testLaunchedUnderWebStart " ; 
 + int port = args . length > 2 
 + ? Integer . parseInt ( args [ 2 ] ) : 8080 ; 
 + runTestCaseTest ( testClass , testMethod , port ) ; 
 + } 
 + else { 
 + junit . textui . TestRunner . run ( WebStartTest . class ) ; 
 + } 
 + } 
 + }
