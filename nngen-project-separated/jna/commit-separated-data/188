BLEU SCORE: 0.026279617104084448

TEST MSG: Fixed issue # 604 : Kernel32 # GetLastError ( ) always returns ERROR _ SUCCESS
GENERATED MSG: Added com . sun . jna . platform . win32 . Kernel32 . ResetEvent .

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 8ff7741 . . 65be473 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 52 , 6 + 52 , 7 @ @ Bug Fixes <nl> * [ # 578 ] ( https : / / github . com / java - native - access / jna / pull / 578 ) : Fix COM CallbackHandlers , allow usage of VARIANTs directly in c . s . j . p . w . COM . util . ProxyObject and fix native memory leak in c . s . j . p . w . COM . util . ProxyObject - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) <nl> * [ # 601 ] ( https : / / github . com / java - native - access / jna / pull / 601 ) : Remove COMThread and COM initialization from objects and require callers to initialize COM themselves . Asserts are added to guard correct usage . - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 602 ] https : / / github . com / java - native - access / jna / pull / 602 ) : Make sure SID related memory is properly released once no longer required [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> + * [ # 610 ] ( https : / / github . com / java - native - access / jna / pull / 610 ) : Fixed issue # 604 : Kernel32 # GetLastError ( ) always returns ERROR _ SUCCESS [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> <nl> Release 4 . 2 . 1 <nl> = = = = = = = = = = = = = <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> index 5db76e9 . . 57cbb19 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> @ @ - 61 , 6 + 61 , 12 @ @ public class Kernel32Test extends TestCase { <nl> junit . textui . TestRunner . run ( Kernel32Test . class ) ; <nl> } <nl> <nl> + / / see https : / / github . com / java - native - access / jna / issues / 604 <nl> + public void testGetLastErrorNativeLibraryOverride ( ) { <nl> + assertFalse ( " Unexpected success " , Kernel32 . INSTANCE . CloseHandle ( null ) ) ; <nl> + assertEquals ( " Mismatched error code " , WinError . ERROR _ INVALID _ HANDLE , Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> + } <nl> + <nl> / / see https : / / github . com / twall / jna / issues / 482 <nl> public void testNoDuplicateMethodsNames ( ) { <nl> Collection < String > dupSet = AbstractWin32TestSupport . detectDuplicateMethods ( Kernel32 . class ) ; <nl> @ @ - 295 , 11 + 301 , 10 @ @ public class Kernel32Test extends TestCase { <nl> <nl> public void testGetCurrentThread ( ) { <nl> HANDLE h = Kernel32 . INSTANCE . GetCurrentThread ( ) ; <nl> - assertNotNull ( h ) ; <nl> - assertFalse ( h . equals ( 0 ) ) ; <nl> - / / CloseHandle does not need to be called for a thread handle <nl> - assertFalse ( Kernel32 . INSTANCE . CloseHandle ( h ) ) ; <nl> - assertEquals ( WinError . ERROR _ INVALID _ HANDLE , Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> + assertNotNull ( " No current thread handle " , h ) ; <nl> + assertFalse ( " Null current thread handle " , h . equals ( 0 ) ) ; <nl> + / / Calling the CloseHandle function with this handle has no effect <nl> + assertTrue ( Kernel32 . INSTANCE . CloseHandle ( h ) ) ; <nl> } <nl> <nl> public void testOpenThread ( ) { <nl> @ @ - 316 , 11 + 321 , 10 @ @ public class Kernel32Test extends TestCase { <nl> <nl> public void testGetCurrentProcess ( ) { <nl> HANDLE h = Kernel32 . INSTANCE . GetCurrentProcess ( ) ; <nl> - assertNotNull ( h ) ; <nl> - assertFalse ( h . equals ( 0 ) ) ; <nl> - / / CloseHandle does not need to be called for a process handle <nl> - assertFalse ( Kernel32 . INSTANCE . CloseHandle ( h ) ) ; <nl> - assertEquals ( WinError . ERROR _ INVALID _ HANDLE , Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> + assertNotNull ( " No current process handle " , h ) ; <nl> + assertFalse ( " Null current process handle " , h . equals ( 0 ) ) ; <nl> + / / Calling the CloseHandle function with a pseudo handle has no effect <nl> + assertTrue ( Kernel32 . INSTANCE . CloseHandle ( h ) ) ; <nl> } <nl> <nl> public void testOpenProcess ( ) { <nl> @ @ - 332 , 8 + 336 , 9 @ @ public class Kernel32Test extends TestCase { <nl> } <nl> <nl> public void testQueryFullProcessImageName ( ) { <nl> - HANDLE h = Kernel32 . INSTANCE . OpenProcess ( 0 , false , Kernel32 . INSTANCE . GetCurrentProcessId ( ) ) ; <nl> - assertNotNull ( " Failed ( " + Kernel32 . INSTANCE . GetLastError ( ) + " ) to get process handle " , h ) ; <nl> + int pid = Kernel32 . INSTANCE . GetCurrentProcessId ( ) ; <nl> + HANDLE h = Kernel32 . INSTANCE . OpenProcess ( 0 , false , pid ) ; <nl> + assertNotNull ( " Failed ( " + Kernel32 . INSTANCE . GetLastError ( ) + " ) to get process ID = " + pid + " handle " , h ) ; <nl> <nl> try { <nl> char [ ] path = new char [ WinDef . MAX _ PATH ] ; <nl> diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java <nl> index ea753cb . . d2ee5a4 100644 <nl> - - - a / src / com / sun / jna / NativeLibrary . java <nl> + + + b / src / com / sun / jna / NativeLibrary . java <nl> @ @ - 109 , 7 + 109 , 12 @ @ public class NativeLibrary { <nl> synchronized ( functions ) { <nl> Function f = new Function ( this , " GetLastError " , Function . ALT _ CONVENTION , encoding ) { <nl> @ Override <nl> - Object invoke ( Object [ ] args , Class < ? > returnType , boolean b ) { <nl> + Object invoke ( Object [ ] args , Class < ? > returnType , boolean b , int fixedArgs ) { <nl> + return Integer . valueOf ( Native . getLastError ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + Object invoke ( Method invokingMethod , Class < ? > [ ] paramTypes , Class < ? > returnType , Object [ ] inArgs , Map < String , ? > options ) { <nl> return Integer . valueOf ( Native . getLastError ( ) ) ; <nl> } <nl> } ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 8ff7741 . . 65be473 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 52 , 6 + 52 , 7 @ @ Bug Fixes 
 * [ # 578 ] ( https : / / github . com / java - native - access / jna / pull / 578 ) : Fix COM CallbackHandlers , allow usage of VARIANTs directly in c . s . j . p . w . COM . util . ProxyObject and fix native memory leak in c . s . j . p . w . COM . util . ProxyObject - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) 
 * [ # 601 ] ( https : / / github . com / java - native - access / jna / pull / 601 ) : Remove COMThread and COM initialization from objects and require callers to initialize COM themselves . Asserts are added to guard correct usage . - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 602 ] https : / / github . com / java - native - access / jna / pull / 602 ) : Make sure SID related memory is properly released once no longer required [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 + * [ # 610 ] ( https : / / github . com / java - native - access / jna / pull / 610 ) : Fixed issue # 604 : Kernel32 # GetLastError ( ) always returns ERROR _ SUCCESS [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 
 Release 4 . 2 . 1 
 = = = = = = = = = = = = = 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 index 5db76e9 . . 57cbb19 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 @ @ - 61 , 6 + 61 , 12 @ @ public class Kernel32Test extends TestCase { 
 junit . textui . TestRunner . run ( Kernel32Test . class ) ; 
 } 
 
 + / / see https : / / github . com / java - native - access / jna / issues / 604 
 + public void testGetLastErrorNativeLibraryOverride ( ) { 
 + assertFalse ( " Unexpected success " , Kernel32 . INSTANCE . CloseHandle ( null ) ) ; 
 + assertEquals ( " Mismatched error code " , WinError . ERROR _ INVALID _ HANDLE , Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 + } 
 + 
 / / see https : / / github . com / twall / jna / issues / 482 
 public void testNoDuplicateMethodsNames ( ) { 
 Collection < String > dupSet = AbstractWin32TestSupport . detectDuplicateMethods ( Kernel32 . class ) ; 
 @ @ - 295 , 11 + 301 , 10 @ @ public class Kernel32Test extends TestCase { 
 
 public void testGetCurrentThread ( ) { 
 HANDLE h = Kernel32 . INSTANCE . GetCurrentThread ( ) ; 
 - assertNotNull ( h ) ; 
 - assertFalse ( h . equals ( 0 ) ) ; 
 - / / CloseHandle does not need to be called for a thread handle 
 - assertFalse ( Kernel32 . INSTANCE . CloseHandle ( h ) ) ; 
 - assertEquals ( WinError . ERROR _ INVALID _ HANDLE , Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 + assertNotNull ( " No current thread handle " , h ) ; 
 + assertFalse ( " Null current thread handle " , h . equals ( 0 ) ) ; 
 + / / Calling the CloseHandle function with this handle has no effect 
 + assertTrue ( Kernel32 . INSTANCE . CloseHandle ( h ) ) ; 
 } 
 
 public void testOpenThread ( ) { 
 @ @ - 316 , 11 + 321 , 10 @ @ public class Kernel32Test extends TestCase { 
 
 public void testGetCurrentProcess ( ) { 
 HANDLE h = Kernel32 . INSTANCE . GetCurrentProcess ( ) ; 
 - assertNotNull ( h ) ; 
 - assertFalse ( h . equals ( 0 ) ) ; 
 - / / CloseHandle does not need to be called for a process handle 
 - assertFalse ( Kernel32 . INSTANCE . CloseHandle ( h ) ) ; 
 - assertEquals ( WinError . ERROR _ INVALID _ HANDLE , Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 + assertNotNull ( " No current process handle " , h ) ; 
 + assertFalse ( " Null current process handle " , h . equals ( 0 ) ) ; 
 + / / Calling the CloseHandle function with a pseudo handle has no effect 
 + assertTrue ( Kernel32 . INSTANCE . CloseHandle ( h ) ) ; 
 } 
 
 public void testOpenProcess ( ) { 
 @ @ - 332 , 8 + 336 , 9 @ @ public class Kernel32Test extends TestCase { 
 } 
 
 public void testQueryFullProcessImageName ( ) { 
 - HANDLE h = Kernel32 . INSTANCE . OpenProcess ( 0 , false , Kernel32 . INSTANCE . GetCurrentProcessId ( ) ) ; 
 - assertNotNull ( " Failed ( " + Kernel32 . INSTANCE . GetLastError ( ) + " ) to get process handle " , h ) ; 
 + int pid = Kernel32 . INSTANCE . GetCurrentProcessId ( ) ; 
 + HANDLE h = Kernel32 . INSTANCE . OpenProcess ( 0 , false , pid ) ; 
 + assertNotNull ( " Failed ( " + Kernel32 . INSTANCE . GetLastError ( ) + " ) to get process ID = " + pid + " handle " , h ) ; 
 
 try { 
 char [ ] path = new char [ WinDef . MAX _ PATH ] ; 
 diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java 
 index ea753cb . . d2ee5a4 100644 
 - - - a / src / com / sun / jna / NativeLibrary . java 
 + + + b / src / com / sun / jna / NativeLibrary . java 
 @ @ - 109 , 7 + 109 , 12 @ @ public class NativeLibrary { 
 synchronized ( functions ) { 
 Function f = new Function ( this , " GetLastError " , Function . ALT _ CONVENTION , encoding ) { 
 @ Override 
 - Object invoke ( Object [ ] args , Class < ? > returnType , boolean b ) { 
 + Object invoke ( Object [ ] args , Class < ? > returnType , boolean b , int fixedArgs ) { 
 + return Integer . valueOf ( Native . getLastError ( ) ) ; 
 + } 
 + 
 + @ Override 
 + Object invoke ( Method invokingMethod , Class < ? > [ ] paramTypes , Class < ? > returnType , Object [ ] inArgs , Map < String , ? > options ) { 
 return Integer . valueOf ( Native . getLastError ( ) ) ; 
 } 
 } ;

NEAREST DIFF:
ELIMINATEDSENTENCE
