BLEU SCORE: 0.016932492841722675

TEST MSG: Passing method and parameter types from Library $ Handler # invoke to
GENERATED MSG: auto - strip profiler prefix set in jna . profiler . prefix

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 36b5da3 . . af9e8a4 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 24 , 6 + 24 , 7 @ @ Features <nl> * [ # 350 ] ( https : / / github . com / twall / jna / pull / 350 ) : Added ` jnacontrib . x11 . api . X . Window . getSubwindows ` - [ @ rm5248 ] ( https : / / github . com / rm5248 ) . <nl> * Improved ` contrib / msoffice ` sample - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . <nl> * [ # 352 ] ( https : / / github . com / twall / jna / pull / 352 ) : Performance improvements due to reduced locking in ` com . sun . jna . Library $ Handler ` and fewer vararg checks in ` com . sun . jna . Function ` - [ @ Boereck ] ( https : / / github . com / Boereck ) . <nl> + * [ # 353 ] ( https : / / github . com / twall / jna / pull / 353 ) : Performance improvements by improved collaboration between ` com . sun . jna . Library $ Handler ` and ` com . sun . jna . Function ` - [ @ Boereck ] ( https : / / github . com / Boereck ) . <nl> * [ # 357 ] ( https : / / github . com / twall / jna / pull / 357 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . SetSystemTime ` - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) , [ @ thomasjoulin ] ( https : / / github . com / thomasjoulin ) . <nl> * [ # 365 ] ( https : / / github . com / twall / jna / pull / 365 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . GetComputerNameEx ` support - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> * [ # 368 ] ( https : / / github . com / twall / jna / pull / 368 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . VirtualQueryEx ` , ` com . sun . jna . platform . win32 . WinNT . MEMORY _ BASIC _ INFORMATION ` and ` MEM _ COMMIT ` , ` MEM _ FREE ` , ` MEM _ RESERVE ` , ` MEM _ IMAGE ` , ` MEM _ MAPPED ` , ` MEM _ PRIVATE ` constants - [ @ apsk ] ( https : / / github . com / apsk ) . <nl> diff - - git a / src / com / sun / jna / Function . java b / src / com / sun / jna / Function . java <nl> index 7bcc68c . . 6a58e4d 100644 <nl> - - - a / src / com / sun / jna / Function . java <nl> + + + b / src / com / sun / jna / Function . java <nl> @ @ - 272 , 6 + 272 , 17 @ @ public class Function extends Pointer { <nl> * native result as an Object . <nl> * / <nl> public Object invoke ( Class returnType , Object [ ] inArgs , Map options ) { <nl> + Method invokingMethod = ( Method ) options . get ( OPTION _ INVOKING _ METHOD ) ; <nl> + Class [ ] paramTypes = invokingMethod ! = null ? invokingMethod . getParameterTypes ( ) : null ; <nl> + return invoke ( invokingMethod , paramTypes , returnType , inArgs , options ) ; <nl> + } <nl> + <nl> + / * * Invoke the native function with the given arguments , returning the <nl> + * native result as an Object . This method can be called if invoking method and parameter <nl> + * types are already at hand . When calling { @ link Function # invoke ( Class , Object [ ] , Map ) } , <nl> + * the method has to be in the options under key { @ link Function # OPTION _ INVOKING _ METHOD } . <nl> + * / <nl> + Object invoke ( Method invokingMethod , Class [ ] paramTypes , Class returnType , Object [ ] inArgs , Map options ) { <nl> / / Clone the argument array to obtain a scratch space for modified <nl> / / types / values <nl> Object [ ] args = { } ; <nl> @ @ - 285 , 8 + 296 , 6 @ @ public class Function extends Pointer { <nl> <nl> TypeMapper mapper = <nl> ( TypeMapper ) options . get ( Library . OPTION _ TYPE _ MAPPER ) ; <nl> - Method invokingMethod = ( Method ) options . get ( OPTION _ INVOKING _ METHOD ) ; <nl> - Class [ ] paramTypes = invokingMethod ! = null ? invokingMethod . getParameterTypes ( ) : null ; <nl> boolean allowObjects = Boolean . TRUE . equals ( options . get ( Library . OPTION _ ALLOW _ OBJECTS ) ) ; <nl> boolean isVarArgs = args . length > 0 & & invokingMethod ! = null ? isVarArgs ( invokingMethod ) : false ; <nl> for ( int i = 0 ; i < args . length ; i + + ) { <nl> diff - - git a / src / com / sun / jna / Library . java b / src / com / sun / jna / Library . java <nl> index e4d0f5d . . 4d9e53c 100644 <nl> - - - a / src / com / sun / jna / Library . java <nl> + + + b / src / com / sun / jna / Library . java <nl> @ @ - 167 , 18 + 167 , 20 @ @ public interface Library { <nl> * / <nl> private static final class FunctionInfo { <nl> <nl> - FunctionInfo ( InvocationHandler handler , Function function , boolean isVarArgs , Map options ) { <nl> + FunctionInfo ( InvocationHandler handler , Function function , Class [ ] parameterTypes , boolean isVarArgs , Map options ) { <nl> super ( ) ; <nl> this . handler = handler ; <nl> this . function = function ; <nl> this . isVarArgs = isVarArgs ; <nl> this . options = options ; <nl> + this . parameterTypes = parameterTypes ; <nl> } <nl> <nl> final InvocationHandler handler ; <nl> final Function function ; <nl> final boolean isVarArgs ; <nl> final Map options ; <nl> + final Class [ ] parameterTypes ; <nl> } <nl> <nl> public Object invoke ( Object proxy , Method method , Object [ ] inArgs ) <nl> @ @ - 211 , 14 + 213 , 16 @ @ public interface Library { <nl> handler = invocationMapper . getInvocationHandler ( nativeLibrary , method ) ; <nl> } <nl> Function function = null ; <nl> + Class [ ] parameterTypes = null ; <nl> Map options = null ; <nl> if ( handler = = null ) { <nl> / / Find the function to invoke <nl> function = nativeLibrary . getFunction ( method . getName ( ) , method ) ; <nl> + parameterTypes = method . getParameterTypes ( ) ; <nl> options = new HashMap ( this . options ) ; <nl> options . put ( Function . OPTION _ INVOKING _ METHOD , method ) ; <nl> } <nl> - f = new FunctionInfo ( handler , function , isVarArgs , options ) ; <nl> + f = new FunctionInfo ( handler , function , parameterTypes , isVarArgs , options ) ; <nl> functions . put ( method , f ) ; <nl> } <nl> } <nl> @ @ - 229 , 7 + 233 , 7 @ @ public interface Library { <nl> if ( f . handler ! = null ) { <nl> return f . handler . invoke ( proxy , method , inArgs ) ; <nl> } <nl> - return f . function . invoke ( method . getReturnType ( ) , inArgs , f . options ) ; <nl> + return f . function . invoke ( method , f . parameterTypes , method . getReturnType ( ) , inArgs , f . options ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 36b5da3 . . af9e8a4 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 24 , 6 + 24 , 7 @ @ Features 
 * [ # 350 ] ( https : / / github . com / twall / jna / pull / 350 ) : Added ` jnacontrib . x11 . api . X . Window . getSubwindows ` - [ @ rm5248 ] ( https : / / github . com / rm5248 ) . 
 * Improved ` contrib / msoffice ` sample - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . 
 * [ # 352 ] ( https : / / github . com / twall / jna / pull / 352 ) : Performance improvements due to reduced locking in ` com . sun . jna . Library $ Handler ` and fewer vararg checks in ` com . sun . jna . Function ` - [ @ Boereck ] ( https : / / github . com / Boereck ) . 
 + * [ # 353 ] ( https : / / github . com / twall / jna / pull / 353 ) : Performance improvements by improved collaboration between ` com . sun . jna . Library $ Handler ` and ` com . sun . jna . Function ` - [ @ Boereck ] ( https : / / github . com / Boereck ) . 
 * [ # 357 ] ( https : / / github . com / twall / jna / pull / 357 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . SetSystemTime ` - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) , [ @ thomasjoulin ] ( https : / / github . com / thomasjoulin ) . 
 * [ # 365 ] ( https : / / github . com / twall / jna / pull / 365 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . GetComputerNameEx ` support - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 * [ # 368 ] ( https : / / github . com / twall / jna / pull / 368 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . VirtualQueryEx ` , ` com . sun . jna . platform . win32 . WinNT . MEMORY _ BASIC _ INFORMATION ` and ` MEM _ COMMIT ` , ` MEM _ FREE ` , ` MEM _ RESERVE ` , ` MEM _ IMAGE ` , ` MEM _ MAPPED ` , ` MEM _ PRIVATE ` constants - [ @ apsk ] ( https : / / github . com / apsk ) . 
 diff - - git a / src / com / sun / jna / Function . java b / src / com / sun / jna / Function . java 
 index 7bcc68c . . 6a58e4d 100644 
 - - - a / src / com / sun / jna / Function . java 
 + + + b / src / com / sun / jna / Function . java 
 @ @ - 272 , 6 + 272 , 17 @ @ public class Function extends Pointer { 
 * native result as an Object . 
 * / 
 public Object invoke ( Class returnType , Object [ ] inArgs , Map options ) { 
 + Method invokingMethod = ( Method ) options . get ( OPTION _ INVOKING _ METHOD ) ; 
 + Class [ ] paramTypes = invokingMethod ! = null ? invokingMethod . getParameterTypes ( ) : null ; 
 + return invoke ( invokingMethod , paramTypes , returnType , inArgs , options ) ; 
 + } 
 + 
 + / * * Invoke the native function with the given arguments , returning the 
 + * native result as an Object . This method can be called if invoking method and parameter 
 + * types are already at hand . When calling { @ link Function # invoke ( Class , Object [ ] , Map ) } , 
 + * the method has to be in the options under key { @ link Function # OPTION _ INVOKING _ METHOD } . 
 + * / 
 + Object invoke ( Method invokingMethod , Class [ ] paramTypes , Class returnType , Object [ ] inArgs , Map options ) { 
 / / Clone the argument array to obtain a scratch space for modified 
 / / types / values 
 Object [ ] args = { } ; 
 @ @ - 285 , 8 + 296 , 6 @ @ public class Function extends Pointer { 
 
 TypeMapper mapper = 
 ( TypeMapper ) options . get ( Library . OPTION _ TYPE _ MAPPER ) ; 
 - Method invokingMethod = ( Method ) options . get ( OPTION _ INVOKING _ METHOD ) ; 
 - Class [ ] paramTypes = invokingMethod ! = null ? invokingMethod . getParameterTypes ( ) : null ; 
 boolean allowObjects = Boolean . TRUE . equals ( options . get ( Library . OPTION _ ALLOW _ OBJECTS ) ) ; 
 boolean isVarArgs = args . length > 0 & & invokingMethod ! = null ? isVarArgs ( invokingMethod ) : false ; 
 for ( int i = 0 ; i < args . length ; i + + ) { 
 diff - - git a / src / com / sun / jna / Library . java b / src / com / sun / jna / Library . java 
 index e4d0f5d . . 4d9e53c 100644 
 - - - a / src / com / sun / jna / Library . java 
 + + + b / src / com / sun / jna / Library . java 
 @ @ - 167 , 18 + 167 , 20 @ @ public interface Library { 
 * / 
 private static final class FunctionInfo { 
 
 - FunctionInfo ( InvocationHandler handler , Function function , boolean isVarArgs , Map options ) { 
 + FunctionInfo ( InvocationHandler handler , Function function , Class [ ] parameterTypes , boolean isVarArgs , Map options ) { 
 super ( ) ; 
 this . handler = handler ; 
 this . function = function ; 
 this . isVarArgs = isVarArgs ; 
 this . options = options ; 
 + this . parameterTypes = parameterTypes ; 
 } 
 
 final InvocationHandler handler ; 
 final Function function ; 
 final boolean isVarArgs ; 
 final Map options ; 
 + final Class [ ] parameterTypes ; 
 } 
 
 public Object invoke ( Object proxy , Method method , Object [ ] inArgs ) 
 @ @ - 211 , 14 + 213 , 16 @ @ public interface Library { 
 handler = invocationMapper . getInvocationHandler ( nativeLibrary , method ) ; 
 } 
 Function function = null ; 
 + Class [ ] parameterTypes = null ; 
 Map options = null ; 
 if ( handler = = null ) { 
 / / Find the function to invoke 
 function = nativeLibrary . getFunction ( method . getName ( ) , method ) ; 
 + parameterTypes = method . getParameterTypes ( ) ; 
 options = new HashMap ( this . options ) ; 
 options . put ( Function . OPTION _ INVOKING _ METHOD , method ) ; 
 } 
 - f = new FunctionInfo ( handler , function , isVarArgs , options ) ; 
 + f = new FunctionInfo ( handler , function , parameterTypes , isVarArgs , options ) ; 
 functions . put ( method , f ) ; 
 } 
 } 
 @ @ - 229 , 7 + 233 , 7 @ @ public interface Library { 
 if ( f . handler ! = null ) { 
 return f . handler . invoke ( proxy , method , inArgs ) ; 
 } 
 - return f . function . invoke ( method . getReturnType ( ) , inArgs , f . options ) ; 
 + return f . function . invoke ( method , f . parameterTypes , method . getReturnType ( ) , inArgs , f . options ) ; 
 } 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
