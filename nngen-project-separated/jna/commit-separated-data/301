BLEU SCORE: 0.020980574531482755

TEST MSG: Apply input from @ joshtriplett on more general stdcall handling
GENERATED MSG: ensure sufficient space allocated for win64 ffi _ call stack

TEST DIFF (one line): diff - - git a / native / libffi / src / x86 / ffi . c b / native / libffi / src / x86 / ffi . c <nl> index 7075712 . . d16ec5b 100644 <nl> - - - a / native / libffi / src / x86 / ffi . c <nl> + + + b / native / libffi / src / x86 / ffi . c <nl> @ @ - 315 , 8 + 315 , 8 @ @ ffi _ status ffi _ prep _ cif _ machdep ( ffi _ cif * cif ) <nl> <nl> for ( ptr = cif - > arg _ types , i = cif - > nargs ; i > 0 ; i - - , ptr + + ) <nl> { <nl> - # ifdef X86 _ WIN32 <nl> - if ( cif - > abi ! = FFI _ STDCALL ) <nl> + # ifndef X86 _ WIN64 <nl> + if ( cif - > abi ! = FFI _ STDCALL & & cif - > abi ! = FFI _ FASTCALL & & cif - > abi ! = FFI _ THISCALL ) <nl> # endif <nl> if ( ( ( * ptr ) - > alignment - 1 ) & cif - > bytes ) <nl> cif - > bytes = ALIGN ( cif - > bytes , ( * ptr ) - > alignment ) ; <nl> @ @ - 332 , 7 + 332 , 6 @ @ ffi _ status ffi _ prep _ cif _ machdep ( ffi _ cif * cif ) <nl> # ifndef X86 _ WIN64 <nl> if ( cif - > abi = = FFI _ SYSV | | cif - > abi = = FFI _ UNIX64 ) <nl> # endif <nl> - if ( cif - > abi ! = FFI _ STDCALL ) <nl> cif - > bytes = ( cif - > bytes + 15 ) & ~ 0xF ; <nl> # endif <nl> <nl> diff - - git a / native / libffi / testsuite / libffi . call / align _ mixed . c b / native / libffi / testsuite / libffi . call / align _ mixed . c <nl> new file mode 100755 <nl> index 0000000 . . fe8e254 <nl> - - - / dev / null <nl> + + + b / native / libffi / testsuite / libffi . call / align _ mixed . c <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * Area : 	 ffi _ call <nl> + Purpose : 	 Check for proper argument alignment . <nl> + Limitations : 	 none . <nl> + PR : 	 	 none . <nl> + Originator : 	 < twalljava @ java . net > ( from many _ win32 . c ) * / <nl> + <nl> + / * { dg - do run } * / <nl> + <nl> + # include " ffitest . h " <nl> + # include < float . h > <nl> + <nl> + static float ABI _ ATTR align _ arguments ( int i1 , <nl> + double f2 , <nl> + int i3 , <nl> + double f4 ) <nl> + { <nl> + return i1 + f2 + i3 + f4 ; <nl> + } <nl> + <nl> + int main ( void ) <nl> + { <nl> + ffi _ cif cif ; <nl> + ffi _ type * args [ 4 ] = { & ffi _ type _ int , & ffi _ type _ double , & ffi _ type _ int , & ffi _ type _ double } ; <nl> + float fa [ 2 ] = { 1 , 2 } ; <nl> + int ia [ 2 ] = { 1 , 2 } ; <nl> + void * values [ 4 ] = { & ia [ 0 ] , & fa [ 0 ] , & ia [ 1 ] , & fa [ 1 ] } ; <nl> + float f , ff ; <nl> + <nl> + / * Initialize the cif * / <nl> + CHECK ( ffi _ prep _ cif ( & cif , ABI _ NUM , 4 , <nl> + 	 	 & ffi _ type _ float , args ) = = FFI _ OK ) ; <nl> + <nl> + ff = align _ arguments ( ia [ 0 ] , fa [ 0 ] , ia [ 1 ] , fa [ 1 ] ) ; <nl> + <nl> + ffi _ call ( & cif , FFI _ FN ( align _ arguments ) , & f , values ) ; <nl> + <nl> + if ( f - ff < FLT _ EPSILON ) <nl> + printf ( " align arguments tests ok ! \ n " ) ; <nl> + else <nl> + CHECK ( 0 ) ; <nl> + exit ( 0 ) ; <nl> + } <nl> diff - - git a / native / libffi / testsuite / libffi . call / align _ stdcall . c b / native / libffi / testsuite / libffi . call / align _ stdcall . c <nl> deleted file mode 100755 <nl> index ed3511b . . 0000000 <nl> - - - a / native / libffi / testsuite / libffi . call / align _ stdcall . c <nl> + + + / dev / null <nl> @ @ - 1 , 42 + 0 , 0 @ @ <nl> - / * Area : 	 ffi _ call <nl> - Purpose : 	 Check stdcall for argument alignment ( always 4 ) on X86 _ WIN32 systems . <nl> - Limitations : 	 none . <nl> - PR : 	 	 none . <nl> - Originator : 	 < twalljava @ java . net > ( from many _ win32 . c ) * / <nl> - <nl> - / * { dg - do run { target i ? 86 - * - cygwin * i ? 86 - * - mingw * } } * / <nl> - <nl> - # include " ffitest . h " <nl> - # include < float . h > <nl> - <nl> - static float _ _ attribute _ _ ( ( stdcall ) ) stdcall _ align ( int i1 , <nl> - double f2 , <nl> - int i3 , <nl> - double f4 ) <nl> - { <nl> - return i1 + f2 + i3 + f4 ; <nl> - } <nl> - <nl> - int main ( void ) <nl> - { <nl> - ffi _ cif cif ; <nl> - ffi _ type * args [ 4 ] = { & ffi _ type _ int , & ffi _ type _ double , & ffi _ type _ int , & ffi _ type _ double } ; <nl> - float fa [ 2 ] = { 1 , 2 } ; <nl> - int ia [ 2 ] = { 1 , 2 } ; <nl> - void * values [ 4 ] = { & ia [ 0 ] , & fa [ 0 ] , & ia [ 1 ] , & fa [ 1 ] } ; <nl> - float f , ff ; <nl> - <nl> - / * Initialize the cif * / <nl> - CHECK ( ffi _ prep _ cif ( & cif , FFI _ STDCALL , 4 , <nl> - 	 	 & ffi _ type _ float , args ) = = FFI _ OK ) ; <nl> - <nl> - ff = stdcall _ align ( ia [ 0 ] , fa [ 0 ] , ia [ 1 ] , fa [ 1 ] ) ; <nl> - <nl> - ffi _ call ( & cif , FFI _ FN ( stdcall _ align ) , & f , values ) ; <nl> - <nl> - if ( f - ff < FLT _ EPSILON ) <nl> - printf ( " stdcall many arg tests ok ! \ n " ) ; <nl> - else <nl> - CHECK ( 0 ) ; <nl> - exit ( 0 ) ; <nl> - }
NEAREST DIFF (one line): diff - - git a / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java b / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java <nl> index 9d6031a . . e766893 100644 <nl> - - - a / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java <nl> + + + b / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java <nl> @ @ - 205 , 11 + 205 , 11 @ @ public interface Kernel32 extends W32API { <nl> } <nl> } <nl> class OVERLAPPED extends Structure { <nl> - public int Internal ; <nl> - public int InternalHigh ; <nl> + public ULONG _ PTR Internal ; <nl> + public ULONG _ PTR InternalHigh ; <nl> public int Offset ; <nl> public int OffsetHigh ; <nl> - public Pointer hEvent ; <nl> + public HANDLE hEvent ; <nl> } <nl> / / TODO : figure out how OVERLAPPED is used and apply an appropriate mapping <nl> interface OVERLAPPED _ COMPLETION _ ROUTINE extends StdCallCallback {

TEST DIFF:
diff - - git a / native / libffi / src / x86 / ffi . c b / native / libffi / src / x86 / ffi . c 
 index 7075712 . . d16ec5b 100644 
 - - - a / native / libffi / src / x86 / ffi . c 
 + + + b / native / libffi / src / x86 / ffi . c 
 @ @ - 315 , 8 + 315 , 8 @ @ ffi _ status ffi _ prep _ cif _ machdep ( ffi _ cif * cif ) 
 
 for ( ptr = cif - > arg _ types , i = cif - > nargs ; i > 0 ; i - - , ptr + + ) 
 { 
 - # ifdef X86 _ WIN32 
 - if ( cif - > abi ! = FFI _ STDCALL ) 
 + # ifndef X86 _ WIN64 
 + if ( cif - > abi ! = FFI _ STDCALL & & cif - > abi ! = FFI _ FASTCALL & & cif - > abi ! = FFI _ THISCALL ) 
 # endif 
 if ( ( ( * ptr ) - > alignment - 1 ) & cif - > bytes ) 
 cif - > bytes = ALIGN ( cif - > bytes , ( * ptr ) - > alignment ) ; 
 @ @ - 332 , 7 + 332 , 6 @ @ ffi _ status ffi _ prep _ cif _ machdep ( ffi _ cif * cif ) 
 # ifndef X86 _ WIN64 
 if ( cif - > abi = = FFI _ SYSV | | cif - > abi = = FFI _ UNIX64 ) 
 # endif 
 - if ( cif - > abi ! = FFI _ STDCALL ) 
 cif - > bytes = ( cif - > bytes + 15 ) & ~ 0xF ; 
 # endif 
 
 diff - - git a / native / libffi / testsuite / libffi . call / align _ mixed . c b / native / libffi / testsuite / libffi . call / align _ mixed . c 
 new file mode 100755 
 index 0000000 . . fe8e254 
 - - - / dev / null 
 + + + b / native / libffi / testsuite / libffi . call / align _ mixed . c 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * Area : 	 ffi _ call 
 + Purpose : 	 Check for proper argument alignment . 
 + Limitations : 	 none . 
 + PR : 	 	 none . 
 + Originator : 	 < twalljava @ java . net > ( from many _ win32 . c ) * / 
 + 
 + / * { dg - do run } * / 
 + 
 + # include " ffitest . h " 
 + # include < float . h > 
 + 
 + static float ABI _ ATTR align _ arguments ( int i1 , 
 + double f2 , 
 + int i3 , 
 + double f4 ) 
 + { 
 + return i1 + f2 + i3 + f4 ; 
 + } 
 + 
 + int main ( void ) 
 + { 
 + ffi _ cif cif ; 
 + ffi _ type * args [ 4 ] = { & ffi _ type _ int , & ffi _ type _ double , & ffi _ type _ int , & ffi _ type _ double } ; 
 + float fa [ 2 ] = { 1 , 2 } ; 
 + int ia [ 2 ] = { 1 , 2 } ; 
 + void * values [ 4 ] = { & ia [ 0 ] , & fa [ 0 ] , & ia [ 1 ] , & fa [ 1 ] } ; 
 + float f , ff ; 
 + 
 + / * Initialize the cif * / 
 + CHECK ( ffi _ prep _ cif ( & cif , ABI _ NUM , 4 , 
 + 	 	 & ffi _ type _ float , args ) = = FFI _ OK ) ; 
 + 
 + ff = align _ arguments ( ia [ 0 ] , fa [ 0 ] , ia [ 1 ] , fa [ 1 ] ) ; 
 + 
 + ffi _ call ( & cif , FFI _ FN ( align _ arguments ) , & f , values ) ; 
 + 
 + if ( f - ff < FLT _ EPSILON ) 
 + printf ( " align arguments tests ok ! \ n " ) ; 
 + else 
 + CHECK ( 0 ) ; 
 + exit ( 0 ) ; 
 + } 
 diff - - git a / native / libffi / testsuite / libffi . call / align _ stdcall . c b / native / libffi / testsuite / libffi . call / align _ stdcall . c 
 deleted file mode 100755 
 index ed3511b . . 0000000 
 - - - a / native / libffi / testsuite / libffi . call / align _ stdcall . c 
 + + + / dev / null 
 @ @ - 1 , 42 + 0 , 0 @ @ 
 - / * Area : 	 ffi _ call 
 - Purpose : 	 Check stdcall for argument alignment ( always 4 ) on X86 _ WIN32 systems . 
 - Limitations : 	 none . 
 - PR : 	 	 none . 
 - Originator : 	 < twalljava @ java . net > ( from many _ win32 . c ) * / 
 - 
 - / * { dg - do run { target i ? 86 - * - cygwin * i ? 86 - * - mingw * } } * / 
 - 
 - # include " ffitest . h " 
 - # include < float . h > 
 - 
 - static float _ _ attribute _ _ ( ( stdcall ) ) stdcall _ align ( int i1 , 
 - double f2 , 
 - int i3 , 
 - double f4 ) 
 - { 
 - return i1 + f2 + i3 + f4 ; 
 - } 
 - 
 - int main ( void ) 
 - { 
 - ffi _ cif cif ; 
 - ffi _ type * args [ 4 ] = { & ffi _ type _ int , & ffi _ type _ double , & ffi _ type _ int , & ffi _ type _ double } ; 
 - float fa [ 2 ] = { 1 , 2 } ; 
 - int ia [ 2 ] = { 1 , 2 } ; 
 - void * values [ 4 ] = { & ia [ 0 ] , & fa [ 0 ] , & ia [ 1 ] , & fa [ 1 ] } ; 
 - float f , ff ; 
 - 
 - / * Initialize the cif * / 
 - CHECK ( ffi _ prep _ cif ( & cif , FFI _ STDCALL , 4 , 
 - 	 	 & ffi _ type _ float , args ) = = FFI _ OK ) ; 
 - 
 - ff = stdcall _ align ( ia [ 0 ] , fa [ 0 ] , ia [ 1 ] , fa [ 1 ] ) ; 
 - 
 - ffi _ call ( & cif , FFI _ FN ( stdcall _ align ) , & f , values ) ; 
 - 
 - if ( f - ff < FLT _ EPSILON ) 
 - printf ( " stdcall many arg tests ok ! \ n " ) ; 
 - else 
 - CHECK ( 0 ) ; 
 - exit ( 0 ) ; 
 - }

NEAREST DIFF:
diff - - git a / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java b / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java 
 index 9d6031a . . e766893 100644 
 - - - a / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java 
 + + + b / jnalib / src / com / sun / jna / examples / win32 / Kernel32 . java 
 @ @ - 205 , 11 + 205 , 11 @ @ public interface Kernel32 extends W32API { 
 } 
 } 
 class OVERLAPPED extends Structure { 
 - public int Internal ; 
 - public int InternalHigh ; 
 + public ULONG _ PTR Internal ; 
 + public ULONG _ PTR InternalHigh ; 
 public int Offset ; 
 public int OffsetHigh ; 
 - public Pointer hEvent ; 
 + public HANDLE hEvent ; 
 } 
 / / TODO : figure out how OVERLAPPED is used and apply an appropriate mapping 
 interface OVERLAPPED _ COMPLETION _ ROUTINE extends StdCallCallback {
