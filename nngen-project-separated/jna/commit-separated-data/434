BLEU SCORE: 0.014929831413909562

TEST MSG: add missing methods on opaque pointer
GENERATED MSG: Add native long support ( issue # 12 ) from wmeissner branch

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Pointer . java b / src / com / sun / jna / Pointer . java <nl> index d38dadb . . 73c0ab8 100644 <nl> - - - a / src / com / sun / jna / Pointer . java <nl> + + + b / src / com / sun / jna / Pointer . java <nl> @ @ - 1239 , 7 + 1239 , 7 @ @ v * @ param wide whether to convert from a wide or standard C string <nl> * @ param value < code > WString < / code > value to set <nl> * / <nl> public void setString ( long offset , WString value ) { <nl> - setWideString ( offset , value . toString ( ) ) ; <nl> + setWideString ( offset , value = = null ? null : value . toString ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1308 , 6 + 1308 , 12 @ @ v * @ param wide whether to convert from a wide or standard C string <nl> private static class Opaque extends Pointer { <nl> private Opaque ( long peer ) { super ( peer ) ; } <nl> private final String MSG = " This pointer is opaque : " + this ; <nl> + public Pointer share ( long offset , long size ) { <nl> + throw new UnsupportedOperationException ( MSG ) ; <nl> + } <nl> + public void clear ( long size ) { <nl> + throw new UnsupportedOperationException ( MSG ) ; <nl> + } <nl> public long indexOf ( long offset , byte value ) { <nl> throw new UnsupportedOperationException ( MSG ) ; <nl> } <nl> @ @ - 1332 , 6 + 1338 , 9 @ @ v * @ param wide whether to convert from a wide or standard C string <nl> public void read ( long bOff , double [ ] buf , int index , int length ) { <nl> throw new UnsupportedOperationException ( MSG ) ; <nl> } <nl> + public void read ( long bOff , Pointer [ ] buf , int index , int length ) { <nl> + throw new UnsupportedOperationException ( MSG ) ; <nl> + } <nl> public void write ( long bOff , byte [ ] buf , int index , int length ) { <nl> throw new UnsupportedOperationException ( MSG ) ; <nl> } <nl> @ @ - 1353 , 6 + 1362 , 12 @ @ v * @ param wide whether to convert from a wide or standard C string <nl> public void write ( long bOff , double [ ] buf , int index , int length ) { <nl> throw new UnsupportedOperationException ( MSG ) ; <nl> } <nl> + public void write ( long bOff , Pointer [ ] buf , int index , int length ) { <nl> + throw new UnsupportedOperationException ( MSG ) ; <nl> + } <nl> + public ByteBuffer getByteBuffer ( long offset , long length ) { <nl> + throw new UnsupportedOperationException ( MSG ) ; <nl> + } <nl> public byte getByte ( long bOff ) { <nl> throw new UnsupportedOperationException ( MSG ) ; <nl> } <nl> @ @ - 1413 , 8 + 1428 , 11 @ @ v * @ param wide whether to convert from a wide or standard C string <nl> public void setWideString ( long offset , String value ) { <nl> throw new UnsupportedOperationException ( MSG ) ; <nl> } <nl> + public void setMemory ( long offset , long size , byte value ) { <nl> + throw new UnsupportedOperationException ( MSG ) ; <nl> + } <nl> public String toString ( ) { <nl> - return " opaque @ 0x " + Long . toHexString ( peer ) ; <nl> + return " const @ 0x " + Long . toHexString ( peer ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / test / com / sun / jna / PointerTest . java b / test / com / sun / jna / PointerTest . java <nl> index f21101b . . 7058a69 100644 <nl> - - - a / test / com / sun / jna / PointerTest . java <nl> + + + b / test / com / sun / jna / PointerTest . java <nl> @ @ - 1 , 4 + 1 , 5 @ @ <nl> / * Copyright ( c ) 2007 Wayne Meissner , All Rights Reserved <nl> + * Copyright ( c ) 2007 - 2013 Timothy Wall , All Rights Reserved <nl> * <nl> * This library is free software ; you can redistribute it and / or <nl> * modify it under the terms of the GNU Lesser General Public <nl> @ @ - 13 , 6 + 14 , 9 @ @ <nl> <nl> package com . sun . jna ; <nl> <nl> + import java . lang . reflect . Method ; <nl> + import java . lang . reflect . Modifier ; <nl> + import java . lang . reflect . InvocationTargetException ; <nl> import java . util . Arrays ; <nl> import java . util . Iterator ; <nl> import java . util . Map ; <nl> @ @ - 157 , 6 + 161 , 53 @ @ public class PointerTest extends TestCase { <nl> assertNull ( " Array element should be null " , arr [ 0 ] ) ; <nl> } <nl> <nl> + private Object defaultArg ( Class type ) { <nl> + if ( type = = boolean . class | | type = = Boolean . class ) return Boolean . FALSE ; <nl> + if ( type = = byte . class | | type = = Byte . class ) return new Byte ( ( byte ) 0 ) ; <nl> + if ( type = = char . class | | type = = Character . class ) return new Character ( ( char ) 0 ) ; <nl> + if ( type = = short . class | | type = = Short . class ) return new Short ( ( short ) 0 ) ; <nl> + if ( type = = int . class | | type = = Integer . class ) return new Integer ( 0 ) ; <nl> + if ( type = = long . class | | type = = Long . class ) return new Long ( 0 ) ; <nl> + if ( type = = float . class | | type = = Float . class ) return new Float ( 0 ) ; <nl> + if ( type = = double . class | | type = = Double . class ) return new Double ( 0 ) ; <nl> + if ( type = = NativeLong . class ) return new NativeLong ( 0 ) ; <nl> + return null ; <nl> + } <nl> + <nl> + public void testOpaquePointer ( ) throws Exception { <nl> + Pointer p = Pointer . createConstant ( 0 ) ; <nl> + Class cls = p . getClass ( ) ; <nl> + Method [ ] methods = cls . getMethods ( ) ; <nl> + for ( int i = 0 ; i < methods . length ; i + + ) { <nl> + Method m = methods [ i ] ; <nl> + Class [ ] argTypes = m . getParameterTypes ( ) ; <nl> + try { <nl> + Object [ ] args = new Object [ argTypes . length ] ; <nl> + for ( int arg = 0 ; arg < args . length ; arg + + ) { <nl> + args [ arg ] = defaultArg ( argTypes [ arg ] ) ; <nl> + } <nl> + if ( " hashCode " . equals ( m . getName ( ) ) <nl> + | | " equals " . equals ( m . getName ( ) ) <nl> + | | m . getDeclaringClass ( ) = = Object . class <nl> + | | ( m . getModifiers ( ) & Modifier . STATIC ) ! = 0 ) { <nl> + continue ; <nl> + } <nl> + Object result = m . invoke ( p , args ) ; <nl> + if ( " toString " . equals ( m . getName ( ) ) ) { <nl> + assertTrue ( " toString ( ) should indicate const - ness " , ( ( String ) result ) . indexOf ( " const " ) ! = - 1 ) ; <nl> + continue ; <nl> + } <nl> + fail ( " Method ' " + m . getName ( ) + " ( " + Arrays . asList ( argTypes ) + " ) ' should throw UnsupportedOperationException " ) ; <nl> + } <nl> + catch ( InvocationTargetException e ) { <nl> + assertEquals ( " Wrong exception type thrown by ' " + m . getName ( ) + " ( " + Arrays . asList ( argTypes ) + " ) " , UnsupportedOperationException . class , e . getTargetException ( ) . getClass ( ) ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) { <nl> + fail ( " Need to fix test of method ' " + m . getName ( ) + " ( " + Arrays . asList ( argTypes ) + " ) ' " ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> public static void main ( String [ ] args ) { <nl> junit . textui . TestRunner . run ( PointerTest . class ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / native / testlib . c b / jnalib / native / testlib . c <nl> index d25f758 . . 64f7858 100644 <nl> - - - a / jnalib / native / testlib . c <nl> + + + b / jnalib / native / testlib . c <nl> @ @ - 236 , 6 + 236 , 11 @ @ returnStaticTestStructure ( ) { <nl> return & test _ structure ; <nl> } <nl> <nl> + EXPORT TestStructure * <nl> + returnNullTestStructure ( ) { <nl> + return NULL ; <nl> + } <nl> + <nl> EXPORT void <nl> incrementInt8ByReference ( int8 * arg ) { <nl> nonleaf ( ) ; <nl> diff - - git a / jnalib / src / com / sun / jna / Function . java b / jnalib / src / com / sun / jna / Function . java <nl> index e6d17c7 . . 43e4038 100644 <nl> - - - a / jnalib / src / com / sun / jna / Function . java <nl> + + + b / jnalib / src / com / sun / jna / Function . java <nl> @ @ - 209 , 8 + 209 , 13 @ @ public class Function extends Pointer { <nl> ss [ si ] = tmp [ si ] ; <nl> } <nl> } <nl> - catch ( Exception e ) { <nl> - throw new IllegalArgumentException ( " Can ' t instantiate " <nl> + catch ( InstantiationException e ) { <nl> + throw new IllegalArgumentException ( " Instantiation of " <nl> + + type + " failed : " <nl> + + e ) ; <nl> + } <nl> + catch ( IllegalAccessException e ) { <nl> + throw new IllegalArgumentException ( " Not allowed to instantiate " <nl> + type + " : " + e ) ; <nl> } <nl> args [ i ] = ss [ 0 ] . getPointer ( ) ; <nl> @ @ - 300 , 15 + 305 , 22 @ @ public class Function extends Pointer { <nl> } <nl> else if ( Structure . class . isAssignableFrom ( returnType ) ) { <nl> result = invokePointer ( callingConvention , args ) ; <nl> - try { <nl> - Structure s = ( Structure ) returnType . newInstance ( ) ; <nl> - s . useMemory ( ( Pointer ) result ) ; <nl> - s . read ( ) ; <nl> - result = s ; <nl> - } <nl> - catch ( Exception e ) { <nl> - throw new IllegalArgumentException ( " Can ' t instantiate " <nl> - + returnType + " : " + e ) ; <nl> + if ( result ! = null ) { <nl> + try { <nl> + Structure s = ( Structure ) returnType . newInstance ( ) ; <nl> + s . useMemory ( ( Pointer ) result ) ; <nl> + s . read ( ) ; <nl> + result = s ; <nl> + } <nl> + catch ( InstantiationException e ) { <nl> + throw new IllegalArgumentException ( " Instantiation of " <nl> + + returnType + " failed : " <nl> + + e ) ; <nl> + } <nl> + catch ( IllegalAccessException e ) { <nl> + throw new IllegalArgumentException ( " Not allowed to instantiate " <nl> + + returnType + " : " + e ) ; <nl> + } <nl> } <nl> } <nl> else { <nl> diff - - git a / jnalib / src / com / sun / jna / Structure . java b / jnalib / src / com / sun / jna / Structure . java <nl> index ae89bf4 . . 6ed231a 100644 <nl> - - - a / jnalib / src / com / sun / jna / Structure . java <nl> + + + b / jnalib / src / com / sun / jna / Structure . java <nl> @ @ - 102 , 14 + 102 , 12 @ @ public abstract class Structure { <nl> / / Analyze the struct <nl> size = calculateSize ( ) ; <nl> } <nl> - else if ( size < = 0 ) { <nl> + if ( size < = 0 ) { <nl> throw new IllegalArgumentException ( " Size must be greater than zero " ) ; <nl> } <nl> <nl> - if ( size > 0 ) { <nl> - memory = new Memory ( size ) ; <nl> - this . size = size ; <nl> - } <nl> + memory = new Memory ( size ) ; <nl> + this . size = size ; <nl> } <nl> <nl> public int size ( ) { <nl> diff - - git a / jnalib / test / com / sun / jna / ReturnTypesTest . java b / jnalib / test / com / sun / jna / ReturnTypesTest . java <nl> index 4ad6d62 . . 90deec2 100644 <nl> - - - a / jnalib / test / com / sun / jna / ReturnTypesTest . java <nl> + + + b / jnalib / test / com / sun / jna / ReturnTypesTest . java <nl> @ @ - 54 , 6 + 54 , 7 @ @ public class ReturnTypesTest extends TestCase { <nl> String returnStringMagic ( ) ; <nl> WString returnWStringMagic ( ) ; <nl> TestStructure returnStaticTestStructure ( ) ; <nl> + TestStructure returnNullTestStructure ( ) ; <nl> } <nl> <nl> TestLibrary lib ; <nl> @ @ - 127 , 6 + 128 , 11 @ @ public class ReturnTypesTest extends TestCase { <nl> assertEquals ( " Expect test structure magic " , DOUBLE _ MAGIC , s . value , 0d ) ; <nl> } <nl> <nl> + public void testInvokeNullStructure ( ) { <nl> + TestStructure s = lib . returnNullTestStructure ( ) ; <nl> + assertNull ( " Expect null structure return " , s ) ; <nl> + } <nl> + <nl> public static void main ( java . lang . String [ ] argList ) { <nl> junit . textui . TestRunner . run ( ReturnTypesTest . class ) ; <nl> }

TEST DIFF:
diff - - git a / src / com / sun / jna / Pointer . java b / src / com / sun / jna / Pointer . java 
 index d38dadb . . 73c0ab8 100644 
 - - - a / src / com / sun / jna / Pointer . java 
 + + + b / src / com / sun / jna / Pointer . java 
 @ @ - 1239 , 7 + 1239 , 7 @ @ v * @ param wide whether to convert from a wide or standard C string 
 * @ param value < code > WString < / code > value to set 
 * / 
 public void setString ( long offset , WString value ) { 
 - setWideString ( offset , value . toString ( ) ) ; 
 + setWideString ( offset , value = = null ? null : value . toString ( ) ) ; 
 } 
 
 / * * 
 @ @ - 1308 , 6 + 1308 , 12 @ @ v * @ param wide whether to convert from a wide or standard C string 
 private static class Opaque extends Pointer { 
 private Opaque ( long peer ) { super ( peer ) ; } 
 private final String MSG = " This pointer is opaque : " + this ; 
 + public Pointer share ( long offset , long size ) { 
 + throw new UnsupportedOperationException ( MSG ) ; 
 + } 
 + public void clear ( long size ) { 
 + throw new UnsupportedOperationException ( MSG ) ; 
 + } 
 public long indexOf ( long offset , byte value ) { 
 throw new UnsupportedOperationException ( MSG ) ; 
 } 
 @ @ - 1332 , 6 + 1338 , 9 @ @ v * @ param wide whether to convert from a wide or standard C string 
 public void read ( long bOff , double [ ] buf , int index , int length ) { 
 throw new UnsupportedOperationException ( MSG ) ; 
 } 
 + public void read ( long bOff , Pointer [ ] buf , int index , int length ) { 
 + throw new UnsupportedOperationException ( MSG ) ; 
 + } 
 public void write ( long bOff , byte [ ] buf , int index , int length ) { 
 throw new UnsupportedOperationException ( MSG ) ; 
 } 
 @ @ - 1353 , 6 + 1362 , 12 @ @ v * @ param wide whether to convert from a wide or standard C string 
 public void write ( long bOff , double [ ] buf , int index , int length ) { 
 throw new UnsupportedOperationException ( MSG ) ; 
 } 
 + public void write ( long bOff , Pointer [ ] buf , int index , int length ) { 
 + throw new UnsupportedOperationException ( MSG ) ; 
 + } 
 + public ByteBuffer getByteBuffer ( long offset , long length ) { 
 + throw new UnsupportedOperationException ( MSG ) ; 
 + } 
 public byte getByte ( long bOff ) { 
 throw new UnsupportedOperationException ( MSG ) ; 
 } 
 @ @ - 1413 , 8 + 1428 , 11 @ @ v * @ param wide whether to convert from a wide or standard C string 
 public void setWideString ( long offset , String value ) { 
 throw new UnsupportedOperationException ( MSG ) ; 
 } 
 + public void setMemory ( long offset , long size , byte value ) { 
 + throw new UnsupportedOperationException ( MSG ) ; 
 + } 
 public String toString ( ) { 
 - return " opaque @ 0x " + Long . toHexString ( peer ) ; 
 + return " const @ 0x " + Long . toHexString ( peer ) ; 
 } 
 } 
 } 
 diff - - git a / test / com / sun / jna / PointerTest . java b / test / com / sun / jna / PointerTest . java 
 index f21101b . . 7058a69 100644 
 - - - a / test / com / sun / jna / PointerTest . java 
 + + + b / test / com / sun / jna / PointerTest . java 
 @ @ - 1 , 4 + 1 , 5 @ @ 
 / * Copyright ( c ) 2007 Wayne Meissner , All Rights Reserved 
 + * Copyright ( c ) 2007 - 2013 Timothy Wall , All Rights Reserved 
 * 
 * This library is free software ; you can redistribute it and / or 
 * modify it under the terms of the GNU Lesser General Public 
 @ @ - 13 , 6 + 14 , 9 @ @ 
 
 package com . sun . jna ; 
 
 + import java . lang . reflect . Method ; 
 + import java . lang . reflect . Modifier ; 
 + import java . lang . reflect . InvocationTargetException ; 
 import java . util . Arrays ; 
 import java . util . Iterator ; 
 import java . util . Map ; 
 @ @ - 157 , 6 + 161 , 53 @ @ public class PointerTest extends TestCase { 
 assertNull ( " Array element should be null " , arr [ 0 ] ) ; 
 } 
 
 + private Object defaultArg ( Class type ) { 
 + if ( type = = boolean . class | | type = = Boolean . class ) return Boolean . FALSE ; 
 + if ( type = = byte . class | | type = = Byte . class ) return new Byte ( ( byte ) 0 ) ; 
 + if ( type = = char . class | | type = = Character . class ) return new Character ( ( char ) 0 ) ; 
 + if ( type = = short . class | | type = = Short . class ) return new Short ( ( short ) 0 ) ; 
 + if ( type = = int . class | | type = = Integer . class ) return new Integer ( 0 ) ; 
 + if ( type = = long . class | | type = = Long . class ) return new Long ( 0 ) ; 
 + if ( type = = float . class | | type = = Float . class ) return new Float ( 0 ) ; 
 + if ( type = = double . class | | type = = Double . class ) return new Double ( 0 ) ; 
 + if ( type = = NativeLong . class ) return new NativeLong ( 0 ) ; 
 + return null ; 
 + } 
 + 
 + public void testOpaquePointer ( ) throws Exception { 
 + Pointer p = Pointer . createConstant ( 0 ) ; 
 + Class cls = p . getClass ( ) ; 
 + Method [ ] methods = cls . getMethods ( ) ; 
 + for ( int i = 0 ; i < methods . length ; i + + ) { 
 + Method m = methods [ i ] ; 
 + Class [ ] argTypes = m . getParameterTypes ( ) ; 
 + try { 
 + Object [ ] args = new Object [ argTypes . length ] ; 
 + for ( int arg = 0 ; arg < args . length ; arg + + ) { 
 + args [ arg ] = defaultArg ( argTypes [ arg ] ) ; 
 + } 
 + if ( " hashCode " . equals ( m . getName ( ) ) 
 + | | " equals " . equals ( m . getName ( ) ) 
 + | | m . getDeclaringClass ( ) = = Object . class 
 + | | ( m . getModifiers ( ) & Modifier . STATIC ) ! = 0 ) { 
 + continue ; 
 + } 
 + Object result = m . invoke ( p , args ) ; 
 + if ( " toString " . equals ( m . getName ( ) ) ) { 
 + assertTrue ( " toString ( ) should indicate const - ness " , ( ( String ) result ) . indexOf ( " const " ) ! = - 1 ) ; 
 + continue ; 
 + } 
 + fail ( " Method ' " + m . getName ( ) + " ( " + Arrays . asList ( argTypes ) + " ) ' should throw UnsupportedOperationException " ) ; 
 + } 
 + catch ( InvocationTargetException e ) { 
 + assertEquals ( " Wrong exception type thrown by ' " + m . getName ( ) + " ( " + Arrays . asList ( argTypes ) + " ) " , UnsupportedOperationException . class , e . getTargetException ( ) . getClass ( ) ) ; 
 + } 
 + catch ( IllegalArgumentException e ) { 
 + fail ( " Need to fix test of method ' " + m . getName ( ) + " ( " + Arrays . asList ( argTypes ) + " ) ' " ) ; 
 + } 
 + } 
 + } 
 + 
 public static void main ( String [ ] args ) { 
 junit . textui . TestRunner . run ( PointerTest . class ) ; 
 }

NEAREST DIFF:
diff - - git a / jnalib / native / testlib . c b / jnalib / native / testlib . c 
 index d25f758 . . 64f7858 100644 
 - - - a / jnalib / native / testlib . c 
 + + + b / jnalib / native / testlib . c 
 @ @ - 236 , 6 + 236 , 11 @ @ returnStaticTestStructure ( ) { 
 return & test _ structure ; 
 } 
 
 + EXPORT TestStructure * 
 + returnNullTestStructure ( ) { 
 + return NULL ; 
 + } 
 + 
 EXPORT void 
 incrementInt8ByReference ( int8 * arg ) { 
 nonleaf ( ) ; 
 diff - - git a / jnalib / src / com / sun / jna / Function . java b / jnalib / src / com / sun / jna / Function . java 
 index e6d17c7 . . 43e4038 100644 
 - - - a / jnalib / src / com / sun / jna / Function . java 
 + + + b / jnalib / src / com / sun / jna / Function . java 
 @ @ - 209 , 8 + 209 , 13 @ @ public class Function extends Pointer { 
 ss [ si ] = tmp [ si ] ; 
 } 
 } 
 - catch ( Exception e ) { 
 - throw new IllegalArgumentException ( " Can ' t instantiate " 
 + catch ( InstantiationException e ) { 
 + throw new IllegalArgumentException ( " Instantiation of " 
 + + type + " failed : " 
 + + e ) ; 
 + } 
 + catch ( IllegalAccessException e ) { 
 + throw new IllegalArgumentException ( " Not allowed to instantiate " 
 + type + " : " + e ) ; 
 } 
 args [ i ] = ss [ 0 ] . getPointer ( ) ; 
 @ @ - 300 , 15 + 305 , 22 @ @ public class Function extends Pointer { 
 } 
 else if ( Structure . class . isAssignableFrom ( returnType ) ) { 
 result = invokePointer ( callingConvention , args ) ; 
 - try { 
 - Structure s = ( Structure ) returnType . newInstance ( ) ; 
 - s . useMemory ( ( Pointer ) result ) ; 
 - s . read ( ) ; 
 - result = s ; 
 - } 
 - catch ( Exception e ) { 
 - throw new IllegalArgumentException ( " Can ' t instantiate " 
 - + returnType + " : " + e ) ; 
 + if ( result ! = null ) { 
 + try { 
 + Structure s = ( Structure ) returnType . newInstance ( ) ; 
 + s . useMemory ( ( Pointer ) result ) ; 
 + s . read ( ) ; 
 + result = s ; 
 + } 
 + catch ( InstantiationException e ) { 
 + throw new IllegalArgumentException ( " Instantiation of " 
 + + returnType + " failed : " 
 + + e ) ; 
 + } 
 + catch ( IllegalAccessException e ) { 
 + throw new IllegalArgumentException ( " Not allowed to instantiate " 
 + + returnType + " : " + e ) ; 
 + } 
 } 
 } 
 else { 
 diff - - git a / jnalib / src / com / sun / jna / Structure . java b / jnalib / src / com / sun / jna / Structure . java 
 index ae89bf4 . . 6ed231a 100644 
 - - - a / jnalib / src / com / sun / jna / Structure . java 
 + + + b / jnalib / src / com / sun / jna / Structure . java 
 @ @ - 102 , 14 + 102 , 12 @ @ public abstract class Structure { 
 / / Analyze the struct 
 size = calculateSize ( ) ; 
 } 
 - else if ( size < = 0 ) { 
 + if ( size < = 0 ) { 
 throw new IllegalArgumentException ( " Size must be greater than zero " ) ; 
 } 
 
 - if ( size > 0 ) { 
 - memory = new Memory ( size ) ; 
 - this . size = size ; 
 - } 
 + memory = new Memory ( size ) ; 
 + this . size = size ; 
 } 
 
 public int size ( ) { 
 diff - - git a / jnalib / test / com / sun / jna / ReturnTypesTest . java b / jnalib / test / com / sun / jna / ReturnTypesTest . java 
 index 4ad6d62 . . 90deec2 100644 
 - - - a / jnalib / test / com / sun / jna / ReturnTypesTest . java 
 + + + b / jnalib / test / com / sun / jna / ReturnTypesTest . java 
 @ @ - 54 , 6 + 54 , 7 @ @ public class ReturnTypesTest extends TestCase { 
 String returnStringMagic ( ) ; 
 WString returnWStringMagic ( ) ; 
 TestStructure returnStaticTestStructure ( ) ; 
 + TestStructure returnNullTestStructure ( ) ; 
 } 
 
 TestLibrary lib ; 
 @ @ - 127 , 6 + 128 , 11 @ @ public class ReturnTypesTest extends TestCase { 
 assertEquals ( " Expect test structure magic " , DOUBLE _ MAGIC , s . value , 0d ) ; 
 } 
 
 + public void testInvokeNullStructure ( ) { 
 + TestStructure s = lib . returnNullTestStructure ( ) ; 
 + assertNull ( " Expect null structure return " , s ) ; 
 + } 
 + 
 public static void main ( java . lang . String [ ] argList ) { 
 junit . textui . TestRunner . run ( ReturnTypesTest . class ) ; 
 }
