BLEU SCORE: 0.04923026124015933

TEST MSG: Fix for resource leak on exception
GENERATED MSG: Add tests for library unloading and loading from jar

TEST DIFF (one line): diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java <nl> index 22b9f84 . . a9734e2 100644 <nl> - - - a / src / com / sun / jna / NativeLibrary . java <nl> + + + b / src / com / sun / jna / NativeLibrary . java <nl> @ @ - 959 , 22 + 959 , 29 @ @ public class NativeLibrary { <nl> * / <nl> private static ArrayList < String > getLinuxLdPaths ( ) { <nl> ArrayList < String > ldPaths = new ArrayList < String > ( ) ; <nl> + BufferedReader reader = null ; <nl> try { <nl> - Process process = Runtime . getRuntime ( ) . exec ( " / sbin / ldconfig - p " ) ; <nl> - BufferedReader reader = new BufferedReader ( new InputStreamReader ( process . getInputStream ( ) ) ) ; <nl> - String buffer = " " ; <nl> - while ( ( buffer = reader . readLine ( ) ) ! = null ) { <nl> - int startPath = buffer . indexOf ( " = > " ) ; <nl> - int endPath = buffer . lastIndexOf ( ' / ' ) ; <nl> - if ( startPath ! = - 1 & & endPath ! = - 1 & & startPath < endPath ) { <nl> - String path = buffer . substring ( startPath + 4 , endPath ) ; <nl> - if ( ldPaths . contains ( path ) = = false ) { <nl> - ldPaths . add ( path ) ; <nl> - } <nl> - } <nl> + Process process = Runtime . getRuntime ( ) . exec ( " / sbin / ldconfig - p " ) ; <nl> + reader = new BufferedReader ( new InputStreamReader ( process . getInputStream ( ) ) ) ; <nl> + String buffer ; <nl> + while ( ( buffer = reader . readLine ( ) ) ! = null ) { <nl> + int startPath = buffer . indexOf ( " = > " ) ; <nl> + int endPath = buffer . lastIndexOf ( ' / ' ) ; <nl> + if ( startPath ! = - 1 & & endPath ! = - 1 & & startPath < endPath ) { <nl> + String path = buffer . substring ( startPath + 4 , endPath ) ; <nl> + if ( ! ldPaths . contains ( path ) ) { <nl> + ldPaths . add ( path ) ; <nl> + } <nl> } <nl> - reader . close ( ) ; <nl> + } <nl> } catch ( Exception e ) { <nl> + } finally { <nl> + if ( reader ! = null ) { <nl> + try { <nl> + reader . close ( ) ; <nl> + } catch ( IOException e ) { <nl> + } <nl> + } <nl> } <nl> return ldPaths ; <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / src / com / sun / jna / Native . java b / jnalib / src / com / sun / jna / Native . java <nl> index 1e572da . . a082be2 100644 <nl> - - - a / jnalib / src / com / sun / jna / Native . java <nl> + + + b / jnalib / src / com / sun / jna / Native . java <nl> @ @ - 675 , 8 + 675 , 10 @ @ public final class Native { <nl> / / problems with Web Start . <nl> lib = File . createTempFile ( " jna " , Platform . isWindows ( ) ? " . dll " : null ) ; <nl> lib . deleteOnExit ( ) ; <nl> + ClassLoader cl = Native . class . getClassLoader ( ) ; <nl> if ( Platform . deleteNativeLibraryAfterVMExit ( ) <nl> - & & Native . class . getClassLoader ( ) . equals ( ClassLoader . getSystemClassLoader ( ) ) ) { <nl> + & & ( cl = = null <nl> + | | cl . equals ( ClassLoader . getSystemClassLoader ( ) ) ) ) { <nl> Runtime . getRuntime ( ) . addShutdownHook ( new DeleteNativeLibrary ( lib ) ) ; <nl> } <nl> fos = new FileOutputStream ( lib ) ;

TEST DIFF:
diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java 
 index 22b9f84 . . a9734e2 100644 
 - - - a / src / com / sun / jna / NativeLibrary . java 
 + + + b / src / com / sun / jna / NativeLibrary . java 
 @ @ - 959 , 22 + 959 , 29 @ @ public class NativeLibrary { 
 * / 
 private static ArrayList < String > getLinuxLdPaths ( ) { 
 ArrayList < String > ldPaths = new ArrayList < String > ( ) ; 
 + BufferedReader reader = null ; 
 try { 
 - Process process = Runtime . getRuntime ( ) . exec ( " / sbin / ldconfig - p " ) ; 
 - BufferedReader reader = new BufferedReader ( new InputStreamReader ( process . getInputStream ( ) ) ) ; 
 - String buffer = " " ; 
 - while ( ( buffer = reader . readLine ( ) ) ! = null ) { 
 - int startPath = buffer . indexOf ( " = > " ) ; 
 - int endPath = buffer . lastIndexOf ( ' / ' ) ; 
 - if ( startPath ! = - 1 & & endPath ! = - 1 & & startPath < endPath ) { 
 - String path = buffer . substring ( startPath + 4 , endPath ) ; 
 - if ( ldPaths . contains ( path ) = = false ) { 
 - ldPaths . add ( path ) ; 
 - } 
 - } 
 + Process process = Runtime . getRuntime ( ) . exec ( " / sbin / ldconfig - p " ) ; 
 + reader = new BufferedReader ( new InputStreamReader ( process . getInputStream ( ) ) ) ; 
 + String buffer ; 
 + while ( ( buffer = reader . readLine ( ) ) ! = null ) { 
 + int startPath = buffer . indexOf ( " = > " ) ; 
 + int endPath = buffer . lastIndexOf ( ' / ' ) ; 
 + if ( startPath ! = - 1 & & endPath ! = - 1 & & startPath < endPath ) { 
 + String path = buffer . substring ( startPath + 4 , endPath ) ; 
 + if ( ! ldPaths . contains ( path ) ) { 
 + ldPaths . add ( path ) ; 
 + } 
 } 
 - reader . close ( ) ; 
 + } 
 } catch ( Exception e ) { 
 + } finally { 
 + if ( reader ! = null ) { 
 + try { 
 + reader . close ( ) ; 
 + } catch ( IOException e ) { 
 + } 
 + } 
 } 
 return ldPaths ; 
 }

NEAREST DIFF:
diff - - git a / jnalib / src / com / sun / jna / Native . java b / jnalib / src / com / sun / jna / Native . java 
 index 1e572da . . a082be2 100644 
 - - - a / jnalib / src / com / sun / jna / Native . java 
 + + + b / jnalib / src / com / sun / jna / Native . java 
 @ @ - 675 , 8 + 675 , 10 @ @ public final class Native { 
 / / problems with Web Start . 
 lib = File . createTempFile ( " jna " , Platform . isWindows ( ) ? " . dll " : null ) ; 
 lib . deleteOnExit ( ) ; 
 + ClassLoader cl = Native . class . getClassLoader ( ) ; 
 if ( Platform . deleteNativeLibraryAfterVMExit ( ) 
 - & & Native . class . getClassLoader ( ) . equals ( ClassLoader . getSystemClassLoader ( ) ) ) { 
 + & & ( cl = = null 
 + | | cl . equals ( ClassLoader . getSystemClassLoader ( ) ) ) ) { 
 Runtime . getRuntime ( ) . addShutdownHook ( new DeleteNativeLibrary ( lib ) ) ; 
 } 
 fos = new FileOutputStream ( lib ) ;
