BLEU SCORE: 0.025292817518388536

TEST MSG: Add byte [ ] based bindings to c . s . j . p . linux . XAttr
GENERATED MSG: Add REG _ BINARY , REG _ EXPAND _ SZ and REG _ MULTI _ SZ support to Advapi32Util .

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / linux / XAttr . java b / contrib / platform / src / com / sun / jna / platform / linux / XAttr . java <nl> index 8d36dae . . 27337c5 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / linux / XAttr . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / linux / XAttr . java <nl> @ @ - 69 , 16 + 69 , 25 @ @ public interface XAttr extends Library { <nl> int EDQUOT = 122 ; <nl> <nl> int setxattr ( String path , String name , Pointer value , size _ t size , int flags ) ; <nl> + int setxattr ( String path , String name , byte [ ] value , size _ t size , int flags ) ; <nl> int lsetxattr ( String path , String name , Pointer value , size _ t size , int flags ) ; <nl> + int lsetxattr ( String path , String name , byte [ ] value , size _ t size , int flags ) ; <nl> int fsetxattr ( int fd , String name , Pointer value , size _ t size , int flags ) ; <nl> + int fsetxattr ( int fd , String name , byte [ ] value , size _ t size , int flags ) ; <nl> <nl> ssize _ t getxattr ( String path , String name , Pointer value , size _ t size ) ; <nl> + ssize _ t getxattr ( String path , String name , byte [ ] value , size _ t size ) ; <nl> ssize _ t lgetxattr ( String path , String name , Pointer value , size _ t size ) ; <nl> + ssize _ t lgetxattr ( String path , String name , byte [ ] value , size _ t size ) ; <nl> ssize _ t fgetxattr ( int fd , String name , Pointer value , size _ t size ) ; <nl> + ssize _ t fgetxattr ( int fd , String name , byte [ ] value , size _ t size ) ; <nl> <nl> ssize _ t listxattr ( String path , Pointer list , size _ t size ) ; <nl> + ssize _ t listxattr ( String path , byte [ ] list , size _ t size ) ; <nl> ssize _ t llistxattr ( String path , Pointer list , size _ t size ) ; <nl> + ssize _ t llistxattr ( String path , byte [ ] list , size _ t size ) ; <nl> ssize _ t flistxattr ( int fd , Pointer list , size _ t size ) ; <nl> + ssize _ t flistxattr ( int fd , byte [ ] list , size _ t size ) ; <nl> <nl> int removexattr ( String path , String name ) ; <nl> int lremovexattr ( String path , String name ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java b / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java <nl> index b5154ad . . b9f7f75 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java <nl> @ @ - 79 , 8 + 79 , 7 @ @ public abstract class XAttrUtil { <nl> * @ throws IOException on any error <nl> * / <nl> public static void setXAttr ( String path , String name , byte [ ] value ) throws IOException { <nl> - Memory valueMem = bytesToMemory ( value ) ; <nl> - int retval = XAttr . INSTANCE . setxattr ( path , name , valueMem , new size _ t ( valueMem . size ( ) ) , 0 ) ; <nl> + int retval = XAttr . INSTANCE . setxattr ( path , name , value , new size _ t ( value . length ) , 0 ) ; <nl> if ( retval ! = 0 ) { <nl> final int eno = Native . getLastError ( ) ; <nl> throw new IOException ( " errno : " + eno ) ; <nl> @ @ - 126 , 9 + 125 , 7 @ @ public abstract class XAttrUtil { <nl> * @ throws IOException on any error <nl> * / <nl> public static void lSetXAttr ( String path , String name , byte [ ] value ) throws IOException { <nl> - Memory valueMem = bytesToMemory ( value ) ; <nl> - final int retval = XAttr . INSTANCE . lsetxattr ( path , name , valueMem , <nl> - new size _ t ( valueMem . size ( ) ) , 0 ) ; <nl> + final int retval = XAttr . INSTANCE . lsetxattr ( path , name , value , new size _ t ( value . length ) , 0 ) ; <nl> if ( retval ! = 0 ) { <nl> final int eno = Native . getLastError ( ) ; <nl> throw new IOException ( " errno : " + eno ) ; <nl> @ @ - 171 , 9 + 168 , 7 @ @ public abstract class XAttrUtil { <nl> * @ throws IOException on any error <nl> * / <nl> public static void fSetXAttr ( int fd , String name , byte [ ] value ) throws IOException { <nl> - Memory valueMem = bytesToMemory ( value ) ; <nl> - final int retval = XAttr . INSTANCE . fsetxattr ( fd , name , valueMem , new size _ t ( valueMem . size ( ) ) , <nl> - 0 ) ; <nl> + final int retval = XAttr . INSTANCE . fsetxattr ( fd , name , value , new size _ t ( value . length ) , 0 ) ; <nl> if ( retval ! = 0 ) { <nl> final int eno = Native . getLastError ( ) ; <nl> throw new IOException ( " errno : " + eno ) ; <nl> @ @ - 203 , 10 + 198 , 8 @ @ public abstract class XAttrUtil { <nl> * @ throws IOException on any error except < code > ERANGE < / code > which handled internally <nl> * / <nl> public static String getXAttr ( String path , String name , String encoding ) throws IOException { <nl> - Memory valueMem = getXAttrAsMemory ( path , name ) ; <nl> - return Charset . forName ( encoding ) <nl> - . decode ( valueMem . getByteBuffer ( 0 , valueMem . size ( ) ) ) <nl> - . toString ( ) ; <nl> + byte [ ] valueMem = getXAttrBytes ( path , name ) ; <nl> + return new String ( valueMem , Charset . forName ( encoding ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 218 , 8 + 211 , 28 @ @ public abstract class XAttrUtil { <nl> * @ throws IOException on any error except < code > ERANGE < / code > which handled internally <nl> * / <nl> public static byte [ ] getXAttrBytes ( String path , String name ) throws IOException { <nl> - Memory valueMem = getXAttrAsMemory ( path , name ) ; <nl> - return valueMem . getByteArray ( 0 , ( int ) valueMem . size ( ) ) ; <nl> + ssize _ t retval ; <nl> + byte [ ] valueMem ; <nl> + int eno = 0 ; <nl> + <nl> + do { <nl> + retval = XAttr . INSTANCE . getxattr ( path , name , ( byte [ ] ) null , size _ t . ZERO ) ; <nl> + if ( retval . longValue ( ) < 0 ) { <nl> + eno = Native . getLastError ( ) ; <nl> + throw new IOException ( " errno : " + eno ) ; <nl> + } <nl> + <nl> + valueMem = new byte [ retval . intValue ( ) ] ; <nl> + retval = XAttr . INSTANCE . getxattr ( path , name , valueMem , new size _ t ( valueMem . length ) ) ; <nl> + if ( retval . longValue ( ) < 0 ) { <nl> + eno = Native . getLastError ( ) ; <nl> + if ( eno ! = XAttr . ERANGE ) { <nl> + throw new IOException ( " errno : " + eno ) ; <nl> + } <nl> + } <nl> + } while ( retval . longValue ( ) < 0 & & eno = = XAttr . ERANGE ) ; <nl> + <nl> + return valueMem ; <nl> } <nl> <nl> / * * <nl> @ @ - 236 , 7 + 249 , 7 @ @ public abstract class XAttrUtil { <nl> int eno = 0 ; <nl> <nl> do { <nl> - retval = XAttr . INSTANCE . getxattr ( path , name , null , size _ t . ZERO ) ; <nl> + retval = XAttr . INSTANCE . getxattr ( path , name , ( Memory ) null , size _ t . ZERO ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> eno = Native . getLastError ( ) ; <nl> throw new IOException ( " errno : " + eno ) ; <nl> @ @ - 280 , 10 + 293 , 8 @ @ public abstract class XAttrUtil { <nl> * @ throws IOException on any error except < code > ERANGE < / code > which handled internally <nl> * / <nl> public static String lGetXAttr ( String path , String name , String encoding ) throws IOException { <nl> - Memory valueMem = lGetXAttrAsMemory ( path , name ) ; <nl> - return Charset . forName ( encoding ) <nl> - . decode ( valueMem . getByteBuffer ( 0 , valueMem . size ( ) ) ) <nl> - . toString ( ) ; <nl> + byte [ ] valueMem = lGetXAttrBytes ( path , name ) ; <nl> + return new String ( valueMem , Charset . forName ( encoding ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 296 , 8 + 307 , 28 @ @ public abstract class XAttrUtil { <nl> * @ throws IOException on any error except < code > ERANGE < / code > which handled internally <nl> * / <nl> public static byte [ ] lGetXAttrBytes ( String path , String name ) throws IOException { <nl> - Memory valueMem = lGetXAttrAsMemory ( path , name ) ; <nl> - return valueMem . getByteArray ( 0 , ( int ) valueMem . size ( ) ) ; <nl> + ssize _ t retval ; <nl> + byte [ ] valueMem ; <nl> + int eno = 0 ; <nl> + <nl> + do { <nl> + retval = XAttr . INSTANCE . lgetxattr ( path , name , ( byte [ ] ) null , size _ t . ZERO ) ; <nl> + if ( retval . longValue ( ) < 0 ) { <nl> + eno = Native . getLastError ( ) ; <nl> + throw new IOException ( " errno : " + eno ) ; <nl> + } <nl> + <nl> + valueMem = new byte [ retval . intValue ( ) ] ; <nl> + retval = XAttr . INSTANCE . lgetxattr ( path , name , valueMem , new size _ t ( valueMem . length ) ) ; <nl> + if ( retval . longValue ( ) < 0 ) { <nl> + eno = Native . getLastError ( ) ; <nl> + if ( eno ! = XAttr . ERANGE ) { <nl> + throw new IOException ( " errno : " + eno ) ; <nl> + } <nl> + } <nl> + } while ( retval . longValue ( ) < 0 & & eno = = XAttr . ERANGE ) ; <nl> + <nl> + return valueMem ; <nl> } <nl> <nl> / * * <nl> @ @ - 315 , 7 + 346 , 7 @ @ public abstract class XAttrUtil { <nl> int eno = 0 ; <nl> <nl> do { <nl> - retval = XAttr . INSTANCE . lgetxattr ( path , name , null , size _ t . ZERO ) ; <nl> + retval = XAttr . INSTANCE . lgetxattr ( path , name , ( Memory ) null , size _ t . ZERO ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> eno = Native . getLastError ( ) ; <nl> throw new IOException ( " errno : " + eno ) ; <nl> @ @ - 357 , 10 + 388 , 8 @ @ public abstract class XAttrUtil { <nl> * @ throws IOException on any error except < code > ERANGE < / code > which handled internally <nl> * / <nl> public static String fGetXAttr ( int fd , String name , String encoding ) throws IOException { <nl> - Memory valueMem = fGetXAttrAsMemory ( fd , name ) ; <nl> - return Charset . forName ( encoding ) <nl> - . decode ( valueMem . getByteBuffer ( 0 , valueMem . size ( ) ) ) <nl> - . toString ( ) ; <nl> + byte [ ] valueMem = fGetXAttrBytes ( fd , name ) ; <nl> + return new String ( valueMem , Charset . forName ( encoding ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 372 , 8 + 401 , 28 @ @ public abstract class XAttrUtil { <nl> * @ throws IOException on any error except < code > ERANGE < / code > which handled internally <nl> * / <nl> public static byte [ ] fGetXAttrBytes ( int fd , String name ) throws IOException { <nl> - Memory valueMem = fGetXAttrAsMemory ( fd , name ) ; <nl> - return valueMem . getByteArray ( 0 , ( int ) valueMem . size ( ) ) ; <nl> + ssize _ t retval ; <nl> + byte [ ] valueMem ; <nl> + int eno = 0 ; <nl> + <nl> + do { <nl> + retval = XAttr . INSTANCE . fgetxattr ( fd , name , ( byte [ ] ) null , size _ t . ZERO ) ; <nl> + if ( retval . longValue ( ) < 0 ) { <nl> + eno = Native . getLastError ( ) ; <nl> + throw new IOException ( " errno : " + eno ) ; <nl> + } <nl> + <nl> + valueMem = new byte [ retval . intValue ( ) ] ; <nl> + retval = XAttr . INSTANCE . fgetxattr ( fd , name , valueMem , new size _ t ( valueMem . length ) ) ; <nl> + if ( retval . longValue ( ) < 0 ) { <nl> + eno = Native . getLastError ( ) ; <nl> + if ( eno ! = XAttr . ERANGE ) { <nl> + throw new IOException ( " errno : " + eno ) ; <nl> + } <nl> + } <nl> + } while ( retval . longValue ( ) < 0 & & eno = = XAttr . ERANGE ) ; <nl> + <nl> + return valueMem ; <nl> } <nl> <nl> / * * <nl> @ @ - 390 , 7 + 439 , 7 @ @ public abstract class XAttrUtil { <nl> int eno = 0 ; <nl> <nl> do { <nl> - retval = XAttr . INSTANCE . fgetxattr ( fd , name , null , size _ t . ZERO ) ; <nl> + retval = XAttr . INSTANCE . fgetxattr ( fd , name , ( Memory ) null , size _ t . ZERO ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> eno = Native . getLastError ( ) ; <nl> throw new IOException ( " errno : " + eno ) ; <nl> @ @ - 431 , 18 + 480 , 18 @ @ public abstract class XAttrUtil { <nl> * / <nl> public static Collection < String > listXAttr ( String path , String encoding ) throws IOException { <nl> ssize _ t retval ; <nl> - Memory listMem ; <nl> + byte [ ] listMem ; <nl> int eno = 0 ; <nl> <nl> do { <nl> - retval = XAttr . INSTANCE . listxattr ( path , null , size _ t . ZERO ) ; <nl> + retval = XAttr . INSTANCE . listxattr ( path , ( byte [ ] ) null , size _ t . ZERO ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> eno = Native . getLastError ( ) ; <nl> throw new IOException ( " errno : " + eno ) ; <nl> } <nl> <nl> - listMem = new Memory ( retval . longValue ( ) ) ; <nl> - retval = XAttr . INSTANCE . listxattr ( path , listMem , new size _ t ( listMem . size ( ) ) ) ; <nl> + listMem = new byte [ retval . intValue ( ) ] ; <nl> + retval = XAttr . INSTANCE . listxattr ( path , listMem , new size _ t ( listMem . length ) ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> eno = Native . getLastError ( ) ; <nl> if ( eno ! = XAttr . ERANGE ) { <nl> @ @ - 478 , 18 + 527 , 18 @ @ public abstract class XAttrUtil { <nl> * / <nl> public static Collection < String > lListXAttr ( String path , String encoding ) throws IOException { <nl> ssize _ t retval ; <nl> - Memory listMem ; <nl> + byte [ ] listMem ; <nl> int eno = 0 ; <nl> <nl> do { <nl> - retval = XAttr . INSTANCE . llistxattr ( path , null , size _ t . ZERO ) ; <nl> + retval = XAttr . INSTANCE . llistxattr ( path , ( byte [ ] ) null , size _ t . ZERO ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> eno = Native . getLastError ( ) ; <nl> throw new IOException ( " errno : " + eno ) ; <nl> } <nl> <nl> - listMem = new Memory ( retval . longValue ( ) ) ; <nl> - retval = XAttr . INSTANCE . llistxattr ( path , listMem , new size _ t ( listMem . size ( ) ) ) ; <nl> + listMem = new byte [ retval . intValue ( ) ] ; <nl> + retval = XAttr . INSTANCE . llistxattr ( path , listMem , new size _ t ( listMem . length ) ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> eno = Native . getLastError ( ) ; <nl> if ( eno ! = XAttr . ERANGE ) { <nl> @ @ - 523 , 18 + 572 , 18 @ @ public abstract class XAttrUtil { <nl> * / <nl> public static Collection < String > fListXAttr ( int fd , String encoding ) throws IOException { <nl> ssize _ t retval ; <nl> - Memory listMem ; <nl> + byte [ ] listMem ; <nl> int eno = 0 ; <nl> <nl> do { <nl> - retval = XAttr . INSTANCE . flistxattr ( fd , null , size _ t . ZERO ) ; <nl> + retval = XAttr . INSTANCE . flistxattr ( fd , ( byte [ ] ) null , size _ t . ZERO ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> eno = Native . getLastError ( ) ; <nl> throw new IOException ( " errno : " + eno ) ; <nl> } <nl> <nl> - listMem = new Memory ( retval . longValue ( ) ) ; <nl> - retval = XAttr . INSTANCE . flistxattr ( fd , listMem , new size _ t ( listMem . size ( ) ) ) ; <nl> + listMem = new byte [ retval . intValue ( ) ] ; <nl> + retval = XAttr . INSTANCE . flistxattr ( fd , listMem , new size _ t ( listMem . length ) ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> eno = Native . getLastError ( ) ; <nl> if ( eno ! = XAttr . ERANGE ) { <nl> @ @ - 593 , 33 + 642 , 19 @ @ public abstract class XAttrUtil { <nl> } <nl> } <nl> <nl> - private static Memory bytesToMemory ( byte [ ] value ) { <nl> - Memory valueMem = new Memory ( value . length ) ; <nl> - valueMem . write ( 0 , value , 0 , value . length ) ; <nl> - return valueMem ; <nl> - } <nl> - <nl> - private static Collection < String > splitBufferToStrings ( Memory valueMem , String encoding ) <nl> + private static Collection < String > splitBufferToStrings ( byte [ ] valueMem , String encoding ) <nl> throws IOException { <nl> final Charset charset = Charset . forName ( encoding ) ; <nl> final Set < String > attributesList = new LinkedHashSet < String > ( 1 ) ; <nl> - long offset = 0 ; <nl> - while ( offset ! = valueMem . size ( ) ) { <nl> - / / Find terminating NUL character . <nl> - long nulOffset = valueMem . indexOf ( offset , ( byte ) 0 ) ; <nl> - if ( nulOffset = = - 1 ) { <nl> - throw new IOException ( " Expected NUL character not found . " ) ; <nl> + int offset = 0 ; <nl> + for ( int i = 0 ; i < valueMem . length ; i + + ) { <nl> + / / each entry is terminated by a single \ 0 byte <nl> + if ( valueMem [ i ] = = 0 ) { <nl> + / / Convert bytes of the name to String . <nl> + final String name = new String ( valueMem , offset , i - offset , charset ) ; <nl> + attributesList . add ( name ) ; <nl> + offset = i + 1 ; <nl> } <nl> - <nl> - / / Duplicate buffer with limit at end of name . <nl> - final ByteBuffer nameBuffer = valueMem . getByteBuffer ( offset , nulOffset ) ; <nl> - <nl> - / / Convert bytes of the name to String . <nl> - final String name = charset . decode ( nameBuffer ) . toString ( ) ; <nl> - attributesList . add ( name ) ; <nl> - <nl> - / / Move past NUL . <nl> - offset + = nulOffset + 1 ; <nl> } <nl> return attributesList ; <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> index 978578b . . 8766039 100644 <nl> - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> @ @ - 750 , 9 + 750 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param hKey <nl> 	 * Parent key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetIntValue ( HKEY hKey , String name , int value ) { <nl> byte [ ] data = new byte [ 4 ] ; <nl> @ @ - 773 , 9 + 773 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetIntValue ( HKEY root , String keyPath , String name , int value ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> @ @ - 798 , 9 + 798 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param hKey <nl> 	 * Parent key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetStringValue ( HKEY hKey , String name , String value ) { <nl> 	 char [ ] data = Native . toCharArray ( value ) ; <nl> @ @ - 818 , 9 + 818 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetStringValue ( HKEY root , String keyPath , String name , String value ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> @ @ - 843 , 9 + 843 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param hKey <nl> 	 * Parent key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetExpandableStringValue ( HKEY hKey , String name , String value ) { <nl> 	 char [ ] data = Native . toCharArray ( value ) ; <nl> @ @ - 863 , 9 + 863 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetExpandableStringValue ( HKEY root , String keyPath , String name , String value ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> @ @ - 889 , 8 + 889 , 8 @ @ public abstract class Advapi32Util { <nl> 	 * Parent key . <nl> 	 * @ param name <nl> 	 * Name . <nl> - 	 * @ param value <nl> - 	 * Value . <nl> + 	 * @ param arr <nl> + 	 * Array of strings to write to registry . <nl> 	 * / <nl> 	 public static void registrySetStringArray ( HKEY hKey , String name , String [ ] arr ) { <nl> 	 	 int size = 0 ; <nl> @ @ - 922 , 18 + 922 , 18 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> - 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value name . <nl> + 	 * @ param arr <nl> + 	 * Array of strings to write to registry . <nl> 	 * / <nl> - 	 public static void registrySetStringArray ( HKEY root , String keyPath , String name , String [ ] value ) { <nl> + 	 public static void registrySetStringArray ( HKEY root , String keyPath , String name , String [ ] arr ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> 	 	 int rc = Advapi32 . INSTANCE . RegOpenKeyEx ( root , keyPath , 0 , WinNT . KEY _ READ | WinNT . KEY _ WRITE , phkKey ) ; <nl> 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { <nl> 	 	 	 throw new Win32Exception ( rc ) ; <nl> 	 	 } <nl> 	 	 try { <nl> - 	 	 	 registrySetStringArray ( phkKey . getValue ( ) , name , value ) ; <nl> + 	 	 	 registrySetStringArray ( phkKey . getValue ( ) , name , arr ) ; <nl> 	 	 } finally { <nl> 	 	 	 rc = Advapi32 . INSTANCE . RegCloseKey ( phkKey . getValue ( ) ) ; <nl> 	 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { <nl> @ @ - 947 , 9 + 947 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param hKey <nl> 	 * Parent key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> - 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value name . <nl> + 	 * @ param data <nl> + 	 * Data to write to registry . <nl> 	 * / <nl> 	 public static void registrySetBinaryValue ( HKEY hKey , String name , byte [ ] data ) { <nl> 	 	 int rc = Advapi32 . INSTANCE . RegSetValueEx ( hKey , name , 0 , WinNT . REG _ BINARY , data , data . length ) ; <nl> @ @ - 965 , 18 + 965 , 18 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Data to write to registry . <nl> 	 * / <nl> - 	 public static void registrySetBinaryValue ( HKEY root , String keyPath , String name , byte [ ] value ) { <nl> + 	 public static void registrySetBinaryValue ( HKEY root , String keyPath , String name , byte [ ] data ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> 	 	 int rc = Advapi32 . INSTANCE . RegOpenKeyEx ( root , keyPath , 0 , WinNT . KEY _ READ | WinNT . KEY _ WRITE , phkKey ) ; <nl> 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { <nl> 	 	 	 throw new Win32Exception ( rc ) ; <nl> 	 	 } <nl> 	 	 try { <nl> - 	 	 	 registrySetBinaryValue ( phkKey . getValue ( ) , name , value ) ; <nl> + 	 	 	 registrySetBinaryValue ( phkKey . getValue ( ) , name , data ) ; <nl> 	 	 } finally { <nl> 	 	 	 rc = Advapi32 . INSTANCE . RegCloseKey ( phkKey . getValue ( ) ) ; <nl> 	 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { <nl> diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> index 83bc754 . . cebfb96 100644 <nl> - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> @ @ - 24 , 11 + 24 , 20 @ @ import com . sun . jna . ptr . IntByReference ; <nl> * / <nl> public class W32Service { <nl> 	 SC _ HANDLE _ serviceHandle = null ; <nl> - 	 <nl> + <nl> + 	 / * * <nl> + 	 * Win32 Service <nl> + 	 * @ param serviceHandle <nl> + 	 * A handle to the service . This handle is returned by the CreateService or OpenService <nl> + 	 * function , and it must have the SERVICE _ QUERY _ STATUS access right . <nl> + 	 * / <nl> 	 public W32Service ( SC _ HANDLE serviceHandle ) { <nl> 	 	 _ serviceHandle = serviceHandle ; <nl> 	 } <nl> 	 <nl> + 	 / * * <nl> + 	 * Close service . <nl> + 	 * / <nl> 	 public void close ( ) { <nl> 	 	 if ( _ serviceHandle ! = null ) { <nl> 	 	 	 if ( ! Advapi32 . INSTANCE . CloseServiceHandle ( _ serviceHandle ) ) { <nl> @ @ - 40 , 12 + 49 , 8 @ @ public class W32Service { <nl> 	 <nl> 	 / * * <nl> 	 * Retrieves the current status of the specified service based on the specified information level . <nl> - 	 * @ param serviceHandle <nl> - 	 * A handle to the service . <nl> - 	 * This handle is returned by the CreateService or OpenService function , and <nl> - 	 * it must have the SERVICE _ QUERY _ STATUS access right . <nl> - 	 * @ return Service status information <nl> - 	 * @ throws Win32Exception <nl> + 	 * @ return <nl> + 	 * Service status information <nl> 	 * / <nl> 	 public SERVICE _ STATUS _ PROCESS queryStatus ( ) { <nl> 	 	 IntByReference size = new IntByReference ( ) ; <nl> @ @ - 77 , 6 + 82 , 9 @ @ public class W32Service { <nl> 	 	 } <nl> 	 } <nl> 	 <nl> + 	 / * * <nl> + 	 * Stop service . <nl> + 	 * / <nl> 	 public void stopService ( ) { <nl> 	 	 waitForNonPendingState ( ) ; <nl> 	 	 / / If the service is already stopped - return <nl> @ @ - 92 , 7 + 100 , 10 @ @ public class W32Service { <nl> 	 	 	 throw new RuntimeException ( " Unable to stop the service " ) ; <nl> 	 	 } <nl> 	 } <nl> - 	 <nl> + <nl> + 	 / * * <nl> + 	 * Continue service . <nl> + 	 * / <nl> 	 public void continueService ( ) { <nl> 	 	 waitForNonPendingState ( ) ; <nl> 	 	 / / If the service is already stopped - return <nl> @ @ - 109 , 6 + 120 , 9 @ @ public class W32Service { <nl> 	 	 } <nl> 	 } <nl> 	 <nl> + 	 / * * <nl> + 	 * Pause service . <nl> + 	 * / <nl> 	 public void pauseService ( ) { <nl> 	 	 waitForNonPendingState ( ) ; <nl> 	 	 / / If the service is already paused - return <nl> @ @ - 126 , 7 + 140 , 7 @ @ public class W32Service { <nl> 	 } <nl> <nl> / * * <nl> - * This call waits for the state to change to something other than a pending state <nl> + * Wait for the state to change to something other than a pending state . <nl> * / <nl> 	 public void waitForNonPendingState ( ) { <nl> <nl> @ @ - 137 , 18 + 151 , 18 @ @ public class W32Service { <nl> <nl> 	 	 while ( isPendingState ( status . dwCurrentState ) ) { <nl> <nl> - 	 	 	 / / If the checkpoint advanced , start new tick count <nl> + 	 	 	 / / if the checkpoint advanced , start new tick count <nl> 	 	 	 if ( status . dwCheckPoint > previousCheckPoint ) { <nl> 	 	 	 	 previousCheckPoint = status . dwCheckPoint ; <nl> 	 	 	 	 checkpointStartTickCount = Kernel32 . INSTANCE . GetTickCount ( ) ; <nl> 	 	 	 } 	 	 	 <nl> <nl> - 	 	 	 / / If the time that passed is greater than the wait hint - throw timeout exception <nl> + 	 	 	 / / if the time that passed is greater than the wait hint - throw timeout exception <nl> 	 	 	 if ( Kernel32 . INSTANCE . GetTickCount ( ) - checkpointStartTickCount > status . dwWaitHint ) { <nl> 	 	 	 	 throw new RuntimeException ( " Timeout waiting for service to change to a non - pending state . " ) ; <nl> 	 	 	 } <nl> <nl> - 	 	 	 / / Do not wait longer than the wait hint . A good interval is <nl> + 	 	 	 / / do not wait longer than the wait hint . A good interval is <nl> 	 	 	 / / one - tenth the wait hint , but no less than 1 second and no <nl> 	 	 	 / / more than 10 seconds . <nl> <nl> @ @ - 165 , 7 + 179 , 6 @ @ public class W32Service { <nl> 	 	 	 	 throw new RuntimeException ( e ) ; <nl> 	 	 	 } <nl> <nl> - 	 	 	 / / Check the status again <nl> 	 	 	 status = queryStatus ( ) ; <nl> 	 	 } <nl> 	 }

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / linux / XAttr . java b / contrib / platform / src / com / sun / jna / platform / linux / XAttr . java 
 index 8d36dae . . 27337c5 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / linux / XAttr . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / linux / XAttr . java 
 @ @ - 69 , 16 + 69 , 25 @ @ public interface XAttr extends Library { 
 int EDQUOT = 122 ; 
 
 int setxattr ( String path , String name , Pointer value , size _ t size , int flags ) ; 
 + int setxattr ( String path , String name , byte [ ] value , size _ t size , int flags ) ; 
 int lsetxattr ( String path , String name , Pointer value , size _ t size , int flags ) ; 
 + int lsetxattr ( String path , String name , byte [ ] value , size _ t size , int flags ) ; 
 int fsetxattr ( int fd , String name , Pointer value , size _ t size , int flags ) ; 
 + int fsetxattr ( int fd , String name , byte [ ] value , size _ t size , int flags ) ; 
 
 ssize _ t getxattr ( String path , String name , Pointer value , size _ t size ) ; 
 + ssize _ t getxattr ( String path , String name , byte [ ] value , size _ t size ) ; 
 ssize _ t lgetxattr ( String path , String name , Pointer value , size _ t size ) ; 
 + ssize _ t lgetxattr ( String path , String name , byte [ ] value , size _ t size ) ; 
 ssize _ t fgetxattr ( int fd , String name , Pointer value , size _ t size ) ; 
 + ssize _ t fgetxattr ( int fd , String name , byte [ ] value , size _ t size ) ; 
 
 ssize _ t listxattr ( String path , Pointer list , size _ t size ) ; 
 + ssize _ t listxattr ( String path , byte [ ] list , size _ t size ) ; 
 ssize _ t llistxattr ( String path , Pointer list , size _ t size ) ; 
 + ssize _ t llistxattr ( String path , byte [ ] list , size _ t size ) ; 
 ssize _ t flistxattr ( int fd , Pointer list , size _ t size ) ; 
 + ssize _ t flistxattr ( int fd , byte [ ] list , size _ t size ) ; 
 
 int removexattr ( String path , String name ) ; 
 int lremovexattr ( String path , String name ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java b / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java 
 index b5154ad . . b9f7f75 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java 
 @ @ - 79 , 8 + 79 , 7 @ @ public abstract class XAttrUtil { 
 * @ throws IOException on any error 
 * / 
 public static void setXAttr ( String path , String name , byte [ ] value ) throws IOException { 
 - Memory valueMem = bytesToMemory ( value ) ; 
 - int retval = XAttr . INSTANCE . setxattr ( path , name , valueMem , new size _ t ( valueMem . size ( ) ) , 0 ) ; 
 + int retval = XAttr . INSTANCE . setxattr ( path , name , value , new size _ t ( value . length ) , 0 ) ; 
 if ( retval ! = 0 ) { 
 final int eno = Native . getLastError ( ) ; 
 throw new IOException ( " errno : " + eno ) ; 
 @ @ - 126 , 9 + 125 , 7 @ @ public abstract class XAttrUtil { 
 * @ throws IOException on any error 
 * / 
 public static void lSetXAttr ( String path , String name , byte [ ] value ) throws IOException { 
 - Memory valueMem = bytesToMemory ( value ) ; 
 - final int retval = XAttr . INSTANCE . lsetxattr ( path , name , valueMem , 
 - new size _ t ( valueMem . size ( ) ) , 0 ) ; 
 + final int retval = XAttr . INSTANCE . lsetxattr ( path , name , value , new size _ t ( value . length ) , 0 ) ; 
 if ( retval ! = 0 ) { 
 final int eno = Native . getLastError ( ) ; 
 throw new IOException ( " errno : " + eno ) ; 
 @ @ - 171 , 9 + 168 , 7 @ @ public abstract class XAttrUtil { 
 * @ throws IOException on any error 
 * / 
 public static void fSetXAttr ( int fd , String name , byte [ ] value ) throws IOException { 
 - Memory valueMem = bytesToMemory ( value ) ; 
 - final int retval = XAttr . INSTANCE . fsetxattr ( fd , name , valueMem , new size _ t ( valueMem . size ( ) ) , 
 - 0 ) ; 
 + final int retval = XAttr . INSTANCE . fsetxattr ( fd , name , value , new size _ t ( value . length ) , 0 ) ; 
 if ( retval ! = 0 ) { 
 final int eno = Native . getLastError ( ) ; 
 throw new IOException ( " errno : " + eno ) ; 
 @ @ - 203 , 10 + 198 , 8 @ @ public abstract class XAttrUtil { 
 * @ throws IOException on any error except < code > ERANGE < / code > which handled internally 
 * / 
 public static String getXAttr ( String path , String name , String encoding ) throws IOException { 
 - Memory valueMem = getXAttrAsMemory ( path , name ) ; 
 - return Charset . forName ( encoding ) 
 - . decode ( valueMem . getByteBuffer ( 0 , valueMem . size ( ) ) ) 
 - . toString ( ) ; 
 + byte [ ] valueMem = getXAttrBytes ( path , name ) ; 
 + return new String ( valueMem , Charset . forName ( encoding ) ) ; 
 } 
 
 / * * 
 @ @ - 218 , 8 + 211 , 28 @ @ public abstract class XAttrUtil { 
 * @ throws IOException on any error except < code > ERANGE < / code > which handled internally 
 * / 
 public static byte [ ] getXAttrBytes ( String path , String name ) throws IOException { 
 - Memory valueMem = getXAttrAsMemory ( path , name ) ; 
 - return valueMem . getByteArray ( 0 , ( int ) valueMem . size ( ) ) ; 
 + ssize _ t retval ; 
 + byte [ ] valueMem ; 
 + int eno = 0 ; 
 + 
 + do { 
 + retval = XAttr . INSTANCE . getxattr ( path , name , ( byte [ ] ) null , size _ t . ZERO ) ; 
 + if ( retval . longValue ( ) < 0 ) { 
 + eno = Native . getLastError ( ) ; 
 + throw new IOException ( " errno : " + eno ) ; 
 + } 
 + 
 + valueMem = new byte [ retval . intValue ( ) ] ; 
 + retval = XAttr . INSTANCE . getxattr ( path , name , valueMem , new size _ t ( valueMem . length ) ) ; 
 + if ( retval . longValue ( ) < 0 ) { 
 + eno = Native . getLastError ( ) ; 
 + if ( eno ! = XAttr . ERANGE ) { 
 + throw new IOException ( " errno : " + eno ) ; 
 + } 
 + } 
 + } while ( retval . longValue ( ) < 0 & & eno = = XAttr . ERANGE ) ; 
 + 
 + return valueMem ; 
 } 
 
 / * * 
 @ @ - 236 , 7 + 249 , 7 @ @ public abstract class XAttrUtil { 
 int eno = 0 ; 
 
 do { 
 - retval = XAttr . INSTANCE . getxattr ( path , name , null , size _ t . ZERO ) ; 
 + retval = XAttr . INSTANCE . getxattr ( path , name , ( Memory ) null , size _ t . ZERO ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 eno = Native . getLastError ( ) ; 
 throw new IOException ( " errno : " + eno ) ; 
 @ @ - 280 , 10 + 293 , 8 @ @ public abstract class XAttrUtil { 
 * @ throws IOException on any error except < code > ERANGE < / code > which handled internally 
 * / 
 public static String lGetXAttr ( String path , String name , String encoding ) throws IOException { 
 - Memory valueMem = lGetXAttrAsMemory ( path , name ) ; 
 - return Charset . forName ( encoding ) 
 - . decode ( valueMem . getByteBuffer ( 0 , valueMem . size ( ) ) ) 
 - . toString ( ) ; 
 + byte [ ] valueMem = lGetXAttrBytes ( path , name ) ; 
 + return new String ( valueMem , Charset . forName ( encoding ) ) ; 
 } 
 
 / * * 
 @ @ - 296 , 8 + 307 , 28 @ @ public abstract class XAttrUtil { 
 * @ throws IOException on any error except < code > ERANGE < / code > which handled internally 
 * / 
 public static byte [ ] lGetXAttrBytes ( String path , String name ) throws IOException { 
 - Memory valueMem = lGetXAttrAsMemory ( path , name ) ; 
 - return valueMem . getByteArray ( 0 , ( int ) valueMem . size ( ) ) ; 
 + ssize _ t retval ; 
 + byte [ ] valueMem ; 
 + int eno = 0 ; 
 + 
 + do { 
 + retval = XAttr . INSTANCE . lgetxattr ( path , name , ( byte [ ] ) null , size _ t . ZERO ) ; 
 + if ( retval . longValue ( ) < 0 ) { 
 + eno = Native . getLastError ( ) ; 
 + throw new IOException ( " errno : " + eno ) ; 
 + } 
 + 
 + valueMem = new byte [ retval . intValue ( ) ] ; 
 + retval = XAttr . INSTANCE . lgetxattr ( path , name , valueMem , new size _ t ( valueMem . length ) ) ; 
 + if ( retval . longValue ( ) < 0 ) { 
 + eno = Native . getLastError ( ) ; 
 + if ( eno ! = XAttr . ERANGE ) { 
 + throw new IOException ( " errno : " + eno ) ; 
 + } 
 + } 
 + } while ( retval . longValue ( ) < 0 & & eno = = XAttr . ERANGE ) ; 
 + 
 + return valueMem ; 
 } 
 
 / * * 
 @ @ - 315 , 7 + 346 , 7 @ @ public abstract class XAttrUtil { 
 int eno = 0 ; 
 
 do { 
 - retval = XAttr . INSTANCE . lgetxattr ( path , name , null , size _ t . ZERO ) ; 
 + retval = XAttr . INSTANCE . lgetxattr ( path , name , ( Memory ) null , size _ t . ZERO ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 eno = Native . getLastError ( ) ; 
 throw new IOException ( " errno : " + eno ) ; 
 @ @ - 357 , 10 + 388 , 8 @ @ public abstract class XAttrUtil { 
 * @ throws IOException on any error except < code > ERANGE < / code > which handled internally 
 * / 
 public static String fGetXAttr ( int fd , String name , String encoding ) throws IOException { 
 - Memory valueMem = fGetXAttrAsMemory ( fd , name ) ; 
 - return Charset . forName ( encoding ) 
 - . decode ( valueMem . getByteBuffer ( 0 , valueMem . size ( ) ) ) 
 - . toString ( ) ; 
 + byte [ ] valueMem = fGetXAttrBytes ( fd , name ) ; 
 + return new String ( valueMem , Charset . forName ( encoding ) ) ; 
 } 
 
 / * * 
 @ @ - 372 , 8 + 401 , 28 @ @ public abstract class XAttrUtil { 
 * @ throws IOException on any error except < code > ERANGE < / code > which handled internally 
 * / 
 public static byte [ ] fGetXAttrBytes ( int fd , String name ) throws IOException { 
 - Memory valueMem = fGetXAttrAsMemory ( fd , name ) ; 
 - return valueMem . getByteArray ( 0 , ( int ) valueMem . size ( ) ) ; 
 + ssize _ t retval ; 
 + byte [ ] valueMem ; 
 + int eno = 0 ; 
 + 
 + do { 
 + retval = XAttr . INSTANCE . fgetxattr ( fd , name , ( byte [ ] ) null , size _ t . ZERO ) ; 
 + if ( retval . longValue ( ) < 0 ) { 
 + eno = Native . getLastError ( ) ; 
 + throw new IOException ( " errno : " + eno ) ; 
 + } 
 + 
 + valueMem = new byte [ retval . intValue ( ) ] ; 
 + retval = XAttr . INSTANCE . fgetxattr ( fd , name , valueMem , new size _ t ( valueMem . length ) ) ; 
 + if ( retval . longValue ( ) < 0 ) { 
 + eno = Native . getLastError ( ) ; 
 + if ( eno ! = XAttr . ERANGE ) { 
 + throw new IOException ( " errno : " + eno ) ; 
 + } 
 + } 
 + } while ( retval . longValue ( ) < 0 & & eno = = XAttr . ERANGE ) ; 
 + 
 + return valueMem ; 
 } 
 
 / * * 
 @ @ - 390 , 7 + 439 , 7 @ @ public abstract class XAttrUtil { 
 int eno = 0 ; 
 
 do { 
 - retval = XAttr . INSTANCE . fgetxattr ( fd , name , null , size _ t . ZERO ) ; 
 + retval = XAttr . INSTANCE . fgetxattr ( fd , name , ( Memory ) null , size _ t . ZERO ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 eno = Native . getLastError ( ) ; 
 throw new IOException ( " errno : " + eno ) ; 
 @ @ - 431 , 18 + 480 , 18 @ @ public abstract class XAttrUtil { 
 * / 
 public static Collection < String > listXAttr ( String path , String encoding ) throws IOException { 
 ssize _ t retval ; 
 - Memory listMem ; 
 + byte [ ] listMem ; 
 int eno = 0 ; 
 
 do { 
 - retval = XAttr . INSTANCE . listxattr ( path , null , size _ t . ZERO ) ; 
 + retval = XAttr . INSTANCE . listxattr ( path , ( byte [ ] ) null , size _ t . ZERO ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 eno = Native . getLastError ( ) ; 
 throw new IOException ( " errno : " + eno ) ; 
 } 
 
 - listMem = new Memory ( retval . longValue ( ) ) ; 
 - retval = XAttr . INSTANCE . listxattr ( path , listMem , new size _ t ( listMem . size ( ) ) ) ; 
 + listMem = new byte [ retval . intValue ( ) ] ; 
 + retval = XAttr . INSTANCE . listxattr ( path , listMem , new size _ t ( listMem . length ) ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 eno = Native . getLastError ( ) ; 
 if ( eno ! = XAttr . ERANGE ) { 
 @ @ - 478 , 18 + 527 , 18 @ @ public abstract class XAttrUtil { 
 * / 
 public static Collection < String > lListXAttr ( String path , String encoding ) throws IOException { 
 ssize _ t retval ; 
 - Memory listMem ; 
 + byte [ ] listMem ; 
 int eno = 0 ; 
 
 do { 
 - retval = XAttr . INSTANCE . llistxattr ( path , null , size _ t . ZERO ) ; 
 + retval = XAttr . INSTANCE . llistxattr ( path , ( byte [ ] ) null , size _ t . ZERO ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 eno = Native . getLastError ( ) ; 
 throw new IOException ( " errno : " + eno ) ; 
 } 
 
 - listMem = new Memory ( retval . longValue ( ) ) ; 
 - retval = XAttr . INSTANCE . llistxattr ( path , listMem , new size _ t ( listMem . size ( ) ) ) ; 
 + listMem = new byte [ retval . intValue ( ) ] ; 
 + retval = XAttr . INSTANCE . llistxattr ( path , listMem , new size _ t ( listMem . length ) ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 eno = Native . getLastError ( ) ; 
 if ( eno ! = XAttr . ERANGE ) { 
 @ @ - 523 , 18 + 572 , 18 @ @ public abstract class XAttrUtil { 
 * / 
 public static Collection < String > fListXAttr ( int fd , String encoding ) throws IOException { 
 ssize _ t retval ; 
 - Memory listMem ; 
 + byte [ ] listMem ; 
 int eno = 0 ; 
 
 do { 
 - retval = XAttr . INSTANCE . flistxattr ( fd , null , size _ t . ZERO ) ; 
 + retval = XAttr . INSTANCE . flistxattr ( fd , ( byte [ ] ) null , size _ t . ZERO ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 eno = Native . getLastError ( ) ; 
 throw new IOException ( " errno : " + eno ) ; 
 } 
 
 - listMem = new Memory ( retval . longValue ( ) ) ; 
 - retval = XAttr . INSTANCE . flistxattr ( fd , listMem , new size _ t ( listMem . size ( ) ) ) ; 
 + listMem = new byte [ retval . intValue ( ) ] ; 
 + retval = XAttr . INSTANCE . flistxattr ( fd , listMem , new size _ t ( listMem . length ) ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 eno = Native . getLastError ( ) ; 
 if ( eno ! = XAttr . ERANGE ) { 
 @ @ - 593 , 33 + 642 , 19 @ @ public abstract class XAttrUtil { 
 } 
 } 
 
 - private static Memory bytesToMemory ( byte [ ] value ) { 
 - Memory valueMem = new Memory ( value . length ) ; 
 - valueMem . write ( 0 , value , 0 , value . length ) ; 
 - return valueMem ; 
 - } 
 - 
 - private static Collection < String > splitBufferToStrings ( Memory valueMem , String encoding ) 
 + private static Collection < String > splitBufferToStrings ( byte [ ] valueMem , String encoding ) 
 throws IOException { 
 final Charset charset = Charset . forName ( encoding ) ; 
 final Set < String > attributesList = new LinkedHashSet < String > ( 1 ) ; 
 - long offset = 0 ; 
 - while ( offset ! = valueMem . size ( ) ) { 
 - / / Find terminating NUL character . 
 - long nulOffset = valueMem . indexOf ( offset , ( byte ) 0 ) ; 
 - if ( nulOffset = = - 1 ) { 
 - throw new IOException ( " Expected NUL character not found . " ) ; 
 + int offset = 0 ; 
 + for ( int i = 0 ; i < valueMem . length ; i + + ) { 
 + / / each entry is terminated by a single \ 0 byte 
 + if ( valueMem [ i ] = = 0 ) { 
 + / / Convert bytes of the name to String . 
 + final String name = new String ( valueMem , offset , i - offset , charset ) ; 
 + attributesList . add ( name ) ; 
 + offset = i + 1 ; 
 } 
 - 
 - / / Duplicate buffer with limit at end of name . 
 - final ByteBuffer nameBuffer = valueMem . getByteBuffer ( offset , nulOffset ) ; 
 - 
 - / / Convert bytes of the name to String . 
 - final String name = charset . decode ( nameBuffer ) . toString ( ) ; 
 - attributesList . add ( name ) ; 
 - 
 - / / Move past NUL . 
 - offset + = nulOffset + 1 ; 
 } 
 return attributesList ; 
 }

NEAREST DIFF:
diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 index 978578b . . 8766039 100644 
 - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 @ @ - 750 , 9 + 750 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param hKey 
 	 * Parent key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetIntValue ( HKEY hKey , String name , int value ) { 
 byte [ ] data = new byte [ 4 ] ; 
 @ @ - 773 , 9 + 773 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetIntValue ( HKEY root , String keyPath , String name , int value ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 @ @ - 798 , 9 + 798 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param hKey 
 	 * Parent key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetStringValue ( HKEY hKey , String name , String value ) { 
 	 char [ ] data = Native . toCharArray ( value ) ; 
 @ @ - 818 , 9 + 818 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetStringValue ( HKEY root , String keyPath , String name , String value ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 @ @ - 843 , 9 + 843 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param hKey 
 	 * Parent key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetExpandableStringValue ( HKEY hKey , String name , String value ) { 
 	 char [ ] data = Native . toCharArray ( value ) ; 
 @ @ - 863 , 9 + 863 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetExpandableStringValue ( HKEY root , String keyPath , String name , String value ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 @ @ - 889 , 8 + 889 , 8 @ @ public abstract class Advapi32Util { 
 	 * Parent key . 
 	 * @ param name 
 	 * Name . 
 - 	 * @ param value 
 - 	 * Value . 
 + 	 * @ param arr 
 + 	 * Array of strings to write to registry . 
 	 * / 
 	 public static void registrySetStringArray ( HKEY hKey , String name , String [ ] arr ) { 
 	 	 int size = 0 ; 
 @ @ - 922 , 18 + 922 , 18 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 - 	 * @ param value 
 - 	 * Value . 
 + 	 * Value name . 
 + 	 * @ param arr 
 + 	 * Array of strings to write to registry . 
 	 * / 
 - 	 public static void registrySetStringArray ( HKEY root , String keyPath , String name , String [ ] value ) { 
 + 	 public static void registrySetStringArray ( HKEY root , String keyPath , String name , String [ ] arr ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 	 	 int rc = Advapi32 . INSTANCE . RegOpenKeyEx ( root , keyPath , 0 , WinNT . KEY _ READ | WinNT . KEY _ WRITE , phkKey ) ; 
 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { 
 	 	 	 throw new Win32Exception ( rc ) ; 
 	 	 } 
 	 	 try { 
 - 	 	 	 registrySetStringArray ( phkKey . getValue ( ) , name , value ) ; 
 + 	 	 	 registrySetStringArray ( phkKey . getValue ( ) , name , arr ) ; 
 	 	 } finally { 
 	 	 	 rc = Advapi32 . INSTANCE . RegCloseKey ( phkKey . getValue ( ) ) ; 
 	 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { 
 @ @ - 947 , 9 + 947 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param hKey 
 	 * Parent key . 
 	 * @ param name 
 - 	 * Name . 
 - 	 * @ param value 
 - 	 * Value . 
 + 	 * Value name . 
 + 	 * @ param data 
 + 	 * Data to write to registry . 
 	 * / 
 	 public static void registrySetBinaryValue ( HKEY hKey , String name , byte [ ] data ) { 
 	 	 int rc = Advapi32 . INSTANCE . RegSetValueEx ( hKey , name , 0 , WinNT . REG _ BINARY , data , data . length ) ; 
 @ @ - 965 , 18 + 965 , 18 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Data to write to registry . 
 	 * / 
 - 	 public static void registrySetBinaryValue ( HKEY root , String keyPath , String name , byte [ ] value ) { 
 + 	 public static void registrySetBinaryValue ( HKEY root , String keyPath , String name , byte [ ] data ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 	 	 int rc = Advapi32 . INSTANCE . RegOpenKeyEx ( root , keyPath , 0 , WinNT . KEY _ READ | WinNT . KEY _ WRITE , phkKey ) ; 
 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { 
 	 	 	 throw new Win32Exception ( rc ) ; 
 	 	 } 
 	 	 try { 
 - 	 	 	 registrySetBinaryValue ( phkKey . getValue ( ) , name , value ) ; 
 + 	 	 	 registrySetBinaryValue ( phkKey . getValue ( ) , name , data ) ; 
 	 	 } finally { 
 	 	 	 rc = Advapi32 . INSTANCE . RegCloseKey ( phkKey . getValue ( ) ) ; 
 	 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { 
 diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 index 83bc754 . . cebfb96 100644 
 - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 @ @ - 24 , 11 + 24 , 20 @ @ import com . sun . jna . ptr . IntByReference ; 
 * / 
 public class W32Service { 
 	 SC _ HANDLE _ serviceHandle = null ; 
 - 	 
 + 
 + 	 / * * 
 + 	 * Win32 Service 
 + 	 * @ param serviceHandle 
 + 	 * A handle to the service . This handle is returned by the CreateService or OpenService 
 + 	 * function , and it must have the SERVICE _ QUERY _ STATUS access right . 
 + 	 * / 
 	 public W32Service ( SC _ HANDLE serviceHandle ) { 
 	 	 _ serviceHandle = serviceHandle ; 
 	 } 
 	 
 + 	 / * * 
 + 	 * Close service . 
 + 	 * / 
 	 public void close ( ) { 
 	 	 if ( _ serviceHandle ! = null ) { 
 	 	 	 if ( ! Advapi32 . INSTANCE . CloseServiceHandle ( _ serviceHandle ) ) { 
 @ @ - 40 , 12 + 49 , 8 @ @ public class W32Service { 
 	 
 	 / * * 
 	 * Retrieves the current status of the specified service based on the specified information level . 
 - 	 * @ param serviceHandle 
 - 	 * A handle to the service . 
 - 	 * This handle is returned by the CreateService or OpenService function , and 
 - 	 * it must have the SERVICE _ QUERY _ STATUS access right . 
 - 	 * @ return Service status information 
 - 	 * @ throws Win32Exception 
 + 	 * @ return 
 + 	 * Service status information 
 	 * / 
 	 public SERVICE _ STATUS _ PROCESS queryStatus ( ) { 
 	 	 IntByReference size = new IntByReference ( ) ; 
 @ @ - 77 , 6 + 82 , 9 @ @ public class W32Service { 
 	 	 } 
 	 } 
 	 
 + 	 / * * 
 + 	 * Stop service . 
 + 	 * / 
 	 public void stopService ( ) { 
 	 	 waitForNonPendingState ( ) ; 
 	 	 / / If the service is already stopped - return 
 @ @ - 92 , 7 + 100 , 10 @ @ public class W32Service { 
 	 	 	 throw new RuntimeException ( " Unable to stop the service " ) ; 
 	 	 } 
 	 } 
 - 	 
 + 
 + 	 / * * 
 + 	 * Continue service . 
 + 	 * / 
 	 public void continueService ( ) { 
 	 	 waitForNonPendingState ( ) ; 
 	 	 / / If the service is already stopped - return 
 @ @ - 109 , 6 + 120 , 9 @ @ public class W32Service { 
 	 	 } 
 	 } 
 	 
 + 	 / * * 
 + 	 * Pause service . 
 + 	 * / 
 	 public void pauseService ( ) { 
 	 	 waitForNonPendingState ( ) ; 
 	 	 / / If the service is already paused - return 
 @ @ - 126 , 7 + 140 , 7 @ @ public class W32Service { 
 	 } 
 
 / * * 
 - * This call waits for the state to change to something other than a pending state 
 + * Wait for the state to change to something other than a pending state . 
 * / 
 	 public void waitForNonPendingState ( ) { 
 
 @ @ - 137 , 18 + 151 , 18 @ @ public class W32Service { 
 
 	 	 while ( isPendingState ( status . dwCurrentState ) ) { 
 
 - 	 	 	 / / If the checkpoint advanced , start new tick count 
 + 	 	 	 / / if the checkpoint advanced , start new tick count 
 	 	 	 if ( status . dwCheckPoint > previousCheckPoint ) { 
 	 	 	 	 previousCheckPoint = status . dwCheckPoint ; 
 	 	 	 	 checkpointStartTickCount = Kernel32 . INSTANCE . GetTickCount ( ) ; 
 	 	 	 } 	 	 	 
 
 - 	 	 	 / / If the time that passed is greater than the wait hint - throw timeout exception 
 + 	 	 	 / / if the time that passed is greater than the wait hint - throw timeout exception 
 	 	 	 if ( Kernel32 . INSTANCE . GetTickCount ( ) - checkpointStartTickCount > status . dwWaitHint ) { 
 	 	 	 	 throw new RuntimeException ( " Timeout waiting for service to change to a non - pending state . " ) ; 
 	 	 	 } 
 
 - 	 	 	 / / Do not wait longer than the wait hint . A good interval is 
 + 	 	 	 / / do not wait longer than the wait hint . A good interval is 
 	 	 	 / / one - tenth the wait hint , but no less than 1 second and no 
 	 	 	 / / more than 10 seconds . 
 
 @ @ - 165 , 7 + 179 , 6 @ @ public class W32Service { 
 	 	 	 	 throw new RuntimeException ( e ) ; 
 	 	 	 } 
 
 - 	 	 	 / / Check the status again 
 	 	 	 status = queryStatus ( ) ; 
 	 	 } 
 	 }
