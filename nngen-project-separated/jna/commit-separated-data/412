BLEU SCORE: 0.510029457493824

TEST MSG: some changes
GENERATED MSG: some cosmetic changes

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java <nl> index 8fba48e . . 9694997 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; <nl> import com . sun . jna . platform . win32 . COM . TypeLibUtil ; <nl> import com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase ; <nl> import com . sun . jna . platform . win32 . COM . tlb . imp . TlbCoClass ; <nl> - import com . sun . jna . platform . win32 . COM . tlb . imp . TlbDispatchInterface ; <nl> + import com . sun . jna . platform . win32 . COM . tlb . imp . TlbDispInterface ; <nl> import com . sun . jna . platform . win32 . COM . tlb . imp . TlbEnum ; <nl> import com . sun . jna . platform . win32 . COM . tlb . imp . TlbInterface ; <nl> <nl> @ @ - 52 , 11 + 52 , 6 @ @ public class TlbImp { <nl> 	 / * * The out . * / <nl> 	 private File comRootDir ; <nl> <nl> - 	 private String packageName ; <nl> - <nl> - 	 / * * The content buffer . * / <nl> - 	 private StringBuffer contentBuffer = new StringBuffer ( ) ; <nl> - <nl> 	 / * * <nl> 	 * The main method . <nl> 	 * <nl> @ @ - 70 , 22 + 65 , 21 @ @ public class TlbImp { <nl> 	 public TlbImp ( ) { <nl> 	 	 Native . setProtected ( true ) ; <nl> 	 } <nl> - 	 <nl> + <nl> 	 / * * <nl> 	 * Start co m2 java . <nl> 	 * / <nl> 	 public void startCOM2Java ( ) { <nl> 	 	 try { <nl> 	 	 	 this . typeLibUtil = new TypeLibUtil ( TYPELIB _ ID _ SHELL , 1 , 0 ) ; <nl> - <nl> + 	 	 	 / / create output Dir <nl> 	 	 	 this . createDir ( ) ; <nl> - 	 	 	 this . createMainClass ( ) ; <nl> <nl> 	 	 	 for ( int i = 0 ; i < typeLibUtil . getTypeInfoCount ( ) ; + + i ) { <nl> 	 	 	 	 TYPEKIND typekind = typeLibUtil . getTypeInfoType ( i ) ; <nl> <nl> 	 	 	 	 if ( typekind . value = = TYPEKIND . TKIND _ ENUM ) { <nl> - 	 	 	 	 	 this . createCOMEnum ( i , typeLibUtil ) ; <nl> + 	 	 	 	 	 this . createCOMEnum ( i , this . getPackageName ( ) , typeLibUtil ) ; <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ RECORD ) { <nl> 	 	 	 	 	 System . out <nl> 	 	 	 	 	 	 	 . println ( " ' TKIND _ RECORD ' objects are currently not supported ! " ) ; <nl> @ @ - 93 , 17 + 87 , 19 @ @ public class TlbImp { <nl> 	 	 	 	 	 System . out <nl> 	 	 	 	 	 	 	 . println ( " ' TKIND _ MODULE ' objects are currently not supported ! " ) ; <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ INTERFACE ) { <nl> - 	 	 	 	 	 this . createCOMInterface ( i , typeLibUtil ) ; <nl> + 	 	 	 	 	 this . createCOMInterface ( i , this . getPackageName ( ) , <nl> + 	 	 	 	 	 	 	 typeLibUtil ) ; <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ DISPATCH ) { <nl> - 	 	 	 	 	 this . createCOMDispatch ( i , typeLibUtil ) ; <nl> + 	 	 	 	 	 this . createCOMDispInterface ( i , this . getPackageName ( ) , <nl> + 	 	 	 	 	 	 	 typeLibUtil ) ; <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ COCLASS ) { <nl> - 	 	 	 	 	 System . out . println ( " TKIND _ COCLASS " ) ; <nl> + 	 	 	 	 	 this . createCOMCoClass ( i , this . getPackageName ( ) , typeLibUtil ) ; <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ ALIAS ) { <nl> 	 	 	 	 	 System . out <nl> 	 	 	 	 	 	 	 . println ( " ' TKIND _ ALIAS ' objects are currently not supported ! " ) ; <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ UNION ) { <nl> 	 	 	 	 	 System . out <nl> - 	 	 	 	 	 	 	 . println ( " ' TKIND _ ALIAS ' objects are currently not supported ! " ) ; <nl> + 	 	 	 	 	 	 	 . println ( " ' TKIND _ UNION ' objects are currently not supported ! " ) ; <nl> 	 	 	 	 } <nl> 	 	 	 } <nl> 	 	 } catch ( Exception e ) { <nl> @ @ - 130 , 15 + 126 , 8 @ @ public class TlbImp { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 private void createMainClass ( ) throws IOException { <nl> - 	 	 this . packageName = " myPackage . " <nl> - 	 	 	 	 + this . typeLibUtil . getName ( ) . toLowerCase ( ) ; <nl> - 	 	 TlbCoClass tlbClass = new TlbCoClass ( - 1 , typeLibUtil ) ; <nl> - 	 	 tlbClass . createPackage ( packageName ) ; <nl> - 	 	 tlbClass . createContent ( contentBuffer . toString ( ) ) ; <nl> - 	 	 String mainClassStr = tlbClass . getClassBuffer ( ) . toString ( ) ; <nl> - <nl> - 	 	 this . writeTextFile ( this . typeLibUtil . getName ( ) + " . java " , mainClassStr ) ; <nl> + 	 private String getPackageName ( ) { <nl> + 	 	 return " myPackage . " 	 + this . typeLibUtil . getName ( ) . toLowerCase ( ) ; <nl> 	 } <nl> <nl> 	 private void writeTextFile ( String filename , String str ) throws IOException { <nl> @ @ - 162 , 9 + 151 , 9 @ @ public class TlbImp { <nl> 	 * the type lib util <nl> 	 * @ return the string buffer <nl> 	 * / <nl> - 	 private void createCOMEnum ( int index , TypeLibUtil typeLibUtil ) <nl> - 	 	 	 throws IOException { <nl> - 	 	 TlbEnum tlbEnum = new TlbEnum ( index , typeLibUtil ) ; <nl> + 	 private void createCOMEnum ( int index , String packagename , <nl> + 	 	 	 TypeLibUtil typeLibUtil ) throws IOException { <nl> + 	 	 TlbEnum tlbEnum = new TlbEnum ( index , packagename , typeLibUtil ) ; <nl> 	 	 this . writeTlbClass ( tlbEnum ) ; <nl> 	 } <nl> <nl> @ @ - 177 , 9 + 166 , 10 @ @ public class TlbImp { <nl> 	 * the type lib util <nl> 	 * @ return the string buffer <nl> 	 * / <nl> - 	 private void createCOMInterface ( int index , TypeLibUtil typeLibUtil ) <nl> - 	 	 	 throws IOException { <nl> - 	 	 TlbInterface tlbInterface = new TlbInterface ( index , typeLibUtil ) ; <nl> + 	 private void createCOMInterface ( int index , String packagename , <nl> + 	 	 	 TypeLibUtil typeLibUtil ) throws IOException { <nl> + 	 	 TlbInterface tlbInterface = new TlbInterface ( index , packagename , <nl> + 	 	 	 	 typeLibUtil ) ; <nl> 	 	 this . writeTlbClass ( tlbInterface ) ; <nl> 	 } <nl> <nl> @ @ - 192 , 13 + 182 , 20 @ @ public class TlbImp { <nl> 	 * the type lib util <nl> 	 * @ return the string buffer <nl> 	 * / <nl> - 	 private void createCOMDispatch ( int index , TypeLibUtil typeLibUtil ) <nl> - 	 	 	 throws IOException { <nl> - 	 	 TlbDispatchInterface tlbDispatch = new TlbDispatchInterface ( index , <nl> - 	 	 	 	 typeLibUtil ) ; <nl> + 	 private void createCOMDispInterface ( int index , String packagename , <nl> + 	 	 	 TypeLibUtil typeLibUtil ) throws IOException { <nl> + 	 	 TlbDispInterface tlbDispatch = new TlbDispInterface ( index , <nl> + 	 	 	 	 packagename , typeLibUtil ) ; <nl> 	 	 this . writeTlbClass ( tlbDispatch ) ; <nl> 	 } <nl> <nl> + 	 private void createCOMCoClass ( int index , String packagename , <nl> + 	 	 	 TypeLibUtil typeLibUtil ) throws IOException { <nl> + 	 	 TlbCoClass tlbCoClass = new TlbCoClass ( index , this . getPackageName ( ) , <nl> + 	 	 	 	 typeLibUtil ) ; <nl> + 	 	 this . writeTlbClass ( tlbCoClass ) ; <nl> + 	 } <nl> + <nl> 	 / * * <nl> 	 * Log info . <nl> 	 * <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java <nl> index 40b9484 . . f1a833b 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java <nl> @ @ - 60 , 6 + 60 , 14 @ @ public abstract class TlbBase { <nl> <nl> 	 protected String filename = " " ; <nl> <nl> + 	 / * * The iunknown methods . * / <nl> + 	 public static String [ ] IUNKNOWN _ METHODS = { " QueryInterface " , " AddRef " , <nl> + 	 	 	 " Release " } ; <nl> + <nl> + 	 / * * The idispatch methods . * / <nl> + 	 public static String [ ] IDISPATCH _ METHODS = { " GetTypeInfoCount " , <nl> + 	 	 	 " GetTypeInfo " , " GetIDsOfNames " , " Invoke " } ; <nl> + <nl> 	 / * * <nl> 	 * Instantiates a new tlb base . <nl> 	 * <nl> @ @ - 208 , 6 + 216 , 10 @ @ public abstract class TlbBase { <nl> 	 	 this . classBuffer = new StringBuffer ( result ) ; <nl> 	 } <nl> <nl> + 	 protected void createPackageName ( String packagename ) { <nl> + 	 	 this . replaceVariable ( " packagename " , packagename ) ; <nl> + 	 } <nl> + <nl> 	 / * * <nl> 	 * Creates the class name . <nl> 	 * <nl> @ @ - 217 , 4 + 229 , 25 @ @ public abstract class TlbBase { <nl> 	 protected void createClassName ( String name ) { <nl> 	 	 this . replaceVariable ( " classname " , name ) ; <nl> 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Checks if is reserved method . <nl> + 	 * <nl> + 	 * @ param method <nl> + 	 * the method <nl> + 	 * @ return true , if is reserved method <nl> + 	 * / <nl> + 	 protected boolean isReservedMethod ( String method ) { <nl> + 	 	 for ( int i = 0 ; i < IUNKNOWN _ METHODS . length ; i + + ) { <nl> + 	 	 	 if ( IUNKNOWN _ METHODS [ i ] . equalsIgnoreCase ( method ) ) <nl> + 	 	 	 	 return true ; <nl> + 	 	 } <nl> + <nl> + 	 	 for ( int i = 0 ; i < IDISPATCH _ METHODS . length ; i + + ) { <nl> + 	 	 	 if ( IDISPATCH _ METHODS [ i ] . equalsIgnoreCase ( method ) ) <nl> + 	 	 	 	 return true ; <nl> + 	 	 } <nl> + <nl> + 	 	 return false ; <nl> + 	 } <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java <nl> index 9ee2f27 . . 8251482 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java <nl> @ @ - 14 , 8 + 14 , 14 @ @ package com . sun . jna . platform . win32 . COM . tlb . imp ; <nl> <nl> import java . io . PrintStream ; <nl> <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; <nl> import com . sun . jna . platform . win32 . COM . TypeLibUtil ; <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; <nl> import com . sun . jna . platform . win32 . COM . TypeLibUtil . TypeLibDoc ; <nl> + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; <nl> + import com . sun . jna . platform . win32 . OaIdl . INVOKEKIND ; <nl> + import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; <nl> + import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; <nl> <nl> / / TODO : Auto - generated Javadoc <nl> / * * <nl> @ @ - 33 , 13 + 39 , 14 @ @ public class TlbCoClass extends TlbBase { <nl> 	 * @ param typeLibUtil <nl> 	 * the type lib util <nl> 	 * / <nl> - 	 public TlbCoClass ( int index , TypeLibUtil typeLibUtil ) { <nl> + 	 public TlbCoClass ( int index , String packagename , TypeLibUtil typeLibUtil ) { <nl> 	 	 super ( index , typeLibUtil ) ; <nl> <nl> 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; <nl> 	 	 String coClassName = typeLibDoc . getName ( ) ; <nl> 	 	 String docString = typeLibDoc . getDocString ( ) ; <nl> <nl> + 	 	 this . createPackageName ( packagename ) ; <nl> 	 	 this . createClassName ( coClassName ) ; <nl> 	 	 this . setFilename ( coClassName ) ; <nl> 	 	 <nl> @ @ - 50 , 6 + 57 , 52 @ @ public class TlbCoClass extends TlbBase { <nl> <nl> 	 	 this . createJavaDocHeader ( guidStr , version , docString ) ; <nl> 	 	 this . createCLSID ( guidStr ) ; <nl> + 	 	 <nl> + 	 	 / / Get the TypeAttributes <nl> + 	 	 TypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; <nl> + 	 	 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; <nl> + <nl> + 	 	 int cFuncs = typeAttr . cFuncs . intValue ( ) ; <nl> + 	 	 for ( int i = 0 ; i < cFuncs ; i + + ) { <nl> + 	 	 	 / / Get the function description <nl> + 	 	 	 FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( i ) ; <nl> + <nl> + 	 	 	 / / Get the member ID <nl> + 	 	 	 MEMBERID memberID = funcDesc . memid ; <nl> + <nl> + 	 	 	 / / Get the name of the method <nl> + 	 	 	 TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; <nl> + 	 	 	 String methodName = typeInfoDoc2 . getName ( ) ; <nl> + 	 	 	 TlbAbstractMethod method = null ; <nl> + <nl> + 	 	 	 if ( ! isReservedMethod ( methodName ) ) { <nl> + 	 	 	 	 if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ FUNC ) ) { <nl> + 	 	 	 	 	 method = new TlbFunction ( index , typeLibUtil , funcDesc , <nl> + 	 	 	 	 	 	 	 typeInfoUtil ) ; <nl> + 	 	 	 	 } else if ( funcDesc . invkind <nl> + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYGET ) ) { <nl> + 	 	 	 	 	 method = new TlbPropertyGet ( index , typeLibUtil , funcDesc , <nl> + 	 	 	 	 	 	 	 typeInfoUtil ) ; <nl> + 	 	 	 	 } else if ( funcDesc . invkind <nl> + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUT ) ) { <nl> + 	 	 	 	 	 method = new TlbPropertyPut ( index , typeLibUtil , funcDesc , <nl> + 	 	 	 	 	 	 	 typeInfoUtil ) ; <nl> + 	 	 	 	 } else if ( funcDesc . invkind <nl> + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUTREF ) ) { <nl> + <nl> + 	 	 	 	 } <nl> + <nl> + 	 	 	 	 this . content + = method . getClassBuffer ( ) ; <nl> + <nl> + 	 	 	 	 if ( i < cFuncs - 1 ) <nl> + 	 	 	 	 	 this . content + = CR ; <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 / / Release our function description stuff <nl> + 	 	 	 typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 this . createContent ( this . content ) ; <nl> 	 } <nl> <nl> 	 / * * <nl> @ @ - 73 , 16 + 126 , 6 @ @ public class TlbCoClass extends TlbBase { <nl> 	 	 this . replaceVariable ( " clsid " , clsid ) ; <nl> 	 } <nl> <nl> - 	 / * * <nl> - 	 * Creates the package . <nl> - 	 * <nl> - 	 * @ param packageName <nl> - 	 * the package name <nl> - 	 * / <nl> - 	 public void createPackage ( String packageName ) { <nl> - 	 	 this . replaceVariable ( " packagename " , packageName ) ; <nl> - 	 } <nl> - <nl> 	 / * <nl> 	 * ( non - Javadoc ) <nl> 	 * <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . java <nl> new file mode 100644 <nl> index 0000000 . . 79091ec <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . java <nl> @ @ - 0 , 0 + 1 , 123 @ @ <nl> + / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 . COM . tlb . imp ; <nl> + <nl> + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; <nl> + import com . sun . jna . platform . win32 . OaIdl . INVOKEKIND ; <nl> + import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; <nl> + import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; <nl> + import com . sun . jna . platform . win32 . COM . TypeLibUtil ; <nl> + import com . sun . jna . platform . win32 . COM . TypeLibUtil . TypeLibDoc ; <nl> + <nl> + / / TODO : Auto - generated Javadoc <nl> + / * * <nl> + * The Class TlbDispatch . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> + * / <nl> + public class TlbDispInterface extends TlbBase { <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new tlb dispatch . <nl> + 	 * <nl> + 	 * @ param index <nl> + 	 * the index <nl> + 	 * @ param typeLibUtil <nl> + 	 * the type lib util <nl> + 	 * / <nl> + 	 public TlbDispInterface ( int index , String packagename , TypeLibUtil typeLibUtil ) { <nl> + 	 	 super ( index , typeLibUtil ) ; <nl> + <nl> + 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; <nl> + 	 	 String dispName = typeLibDoc . getName ( ) ; <nl> + 	 	 String docString = typeLibDoc . getDocString ( ) ; <nl> + <nl> + 	 	 this . logInfo ( " Type of kind ' DispInterface ' found : " + dispName ) ; <nl> + 	 	 this . createPackageName ( packagename ) ; <nl> + 	 	 this . createClassName ( dispName ) ; <nl> + 	 	 this . setFilename ( dispName ) ; <nl> + 	 	 <nl> + 	 	 / / Get the TypeAttributes <nl> + 	 	 TypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; <nl> + 	 	 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; <nl> + <nl> + 	 	 this . createJavaDocHeader ( typeAttr . guid . toGuidString ( ) , docString ) ; <nl> + <nl> + 	 	 int cFuncs = typeAttr . cFuncs . intValue ( ) ; <nl> + 	 	 for ( int i = 0 ; i < cFuncs ; i + + ) { <nl> + 	 	 	 / / Get the function description <nl> + 	 	 	 FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( i ) ; <nl> + <nl> + 	 	 	 / / Get the member ID <nl> + 	 	 	 MEMBERID memberID = funcDesc . memid ; <nl> + <nl> + 	 	 	 / / Get the name of the method <nl> + 	 	 	 TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; <nl> + 	 	 	 String methodName = typeInfoDoc2 . getName ( ) ; <nl> + 	 	 	 TlbAbstractMethod method = null ; <nl> + <nl> + 	 	 	 if ( ! isReservedMethod ( methodName ) ) { <nl> + 	 	 	 	 if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ FUNC ) ) { <nl> + 	 	 	 	 	 method = new TlbFunctionStub ( index , typeLibUtil , funcDesc , <nl> + 	 	 	 	 	 	 	 typeInfoUtil ) ; <nl> + 	 	 	 	 } else if ( funcDesc . invkind <nl> + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYGET ) ) { <nl> + 	 	 	 	 	 method = new TlbPropertyGetStub ( index , typeLibUtil , funcDesc , <nl> + 	 	 	 	 	 	 	 typeInfoUtil ) ; <nl> + 	 	 	 	 } else if ( funcDesc . invkind <nl> + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUT ) ) { <nl> + 	 	 	 	 	 method = new TlbPropertyPutStub ( index , typeLibUtil , funcDesc , <nl> + 	 	 	 	 	 	 	 typeInfoUtil ) ; <nl> + 	 	 	 	 } else if ( funcDesc . invkind <nl> + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUTREF ) ) { <nl> + <nl> + 	 	 	 	 } <nl> + <nl> + 	 	 	 	 this . content + = method . getClassBuffer ( ) ; <nl> + <nl> + 	 	 	 	 if ( i < cFuncs - 1 ) <nl> + 	 	 	 	 	 this . content + = CR ; <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 / / Release our function description stuff <nl> + 	 	 	 typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 this . createContent ( this . content ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Creates the java doc header . <nl> + 	 * <nl> + 	 * @ param guid <nl> + 	 * the guid <nl> + 	 * @ param helpstring <nl> + 	 * the helpstring <nl> + 	 * / <nl> + 	 protected void createJavaDocHeader ( String guid , String helpstring ) { <nl> + 	 	 this . replaceVariable ( " uuid " , guid ) ; <nl> + 	 	 this . replaceVariable ( " helpstring " , helpstring ) ; <nl> + 	 } <nl> + <nl> + 	 / * <nl> + 	 * ( non - Javadoc ) <nl> + 	 * <nl> + 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) <nl> + 	 * / <nl> + 	 @ Override <nl> + 	 protected String getClassTemplate ( ) { <nl> + 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . template " ; <nl> + 	 } <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . template <nl> new file mode 100644 <nl> index 0000000 . . 815a177 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . template <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + package $ { packagename } ; <nl> + <nl> + import java . util . * ; <nl> + <nl> + import com . sun . jna . * ; <nl> + import com . sun . jna . platform . win32 . OaIdl . * ; <nl> + import com . sun . jna . platform . win32 . WinDef . * ; <nl> + import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> + import com . sun . jna . platform . win32 . WTypes . * ; <nl> + import com . sun . jna . platform . win32 . COM . * ; <nl> + <nl> + / * * <nl> + * uuid ( $ { uuid } ) <nl> + * version ( $ { version } ) <nl> + * helpstring ( $ { helpstring } ) <nl> + * <nl> + * / <nl> + public interface $ { classname } extends IDispatch { 	 <nl> + <nl> + $ { content } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . java <nl> deleted file mode 100644 <nl> index fa47cb1 . . 0000000 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . java <nl> + + + / dev / null <nl> @ @ - 1 , 151 + 0 , 0 @ @ <nl> - / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation ; either <nl> - * version 2 . 1 of the License , or ( at your option ) any later version . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * / <nl> - package com . sun . jna . platform . win32 . COM . tlb . imp ; <nl> - <nl> - import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; <nl> - import com . sun . jna . platform . win32 . OaIdl . INVOKEKIND ; <nl> - import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; <nl> - import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; <nl> - import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; <nl> - import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; <nl> - import com . sun . jna . platform . win32 . COM . TypeLibUtil ; <nl> - import com . sun . jna . platform . win32 . COM . TypeLibUtil . TypeLibDoc ; <nl> - <nl> - / / TODO : Auto - generated Javadoc <nl> - / * * <nl> - * The Class TlbDispatch . <nl> - * <nl> - * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> - * / <nl> - public class TlbDispatchInterface extends TlbBase { <nl> - <nl> - 	 / * * The iunknown methods . * / <nl> - 	 public static String [ ] IUNKNOWN _ METHODS = { " QueryInterface " , " AddRef " , <nl> - 	 	 	 " Release " } ; <nl> - <nl> - 	 / * * The idispatch methods . * / <nl> - 	 public static String [ ] IDISPATCH _ METHODS = { " GetTypeInfoCount " , <nl> - 	 	 	 " GetTypeInfo " , " GetIDsOfNames " , " Invoke " } ; <nl> - <nl> - 	 / * * <nl> - 	 * Instantiates a new tlb dispatch . <nl> - 	 * <nl> - 	 * @ param index <nl> - 	 * the index <nl> - 	 * @ param typeLibUtil <nl> - 	 * the type lib util <nl> - 	 * / <nl> - 	 public TlbDispatchInterface ( int index , TypeLibUtil typeLibUtil ) { <nl> - 	 	 super ( index , typeLibUtil ) ; <nl> - <nl> - 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; <nl> - 	 	 String dispName = typeLibDoc . getName ( ) ; <nl> - 	 	 String docString = typeLibDoc . getDocString ( ) ; <nl> - <nl> - 	 	 this . logInfo ( " Type of kind ' Dispatch ' found : " + dispName ) ; <nl> - 	 	 this . createClassName ( dispName ) ; <nl> - 	 	 this . setFilename ( dispName ) ; <nl> - 	 	 <nl> - 	 	 / / Get the TypeAttributes <nl> - 	 	 TypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; <nl> - 	 	 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; <nl> - <nl> - 	 	 this . createJavaDocHeader ( typeAttr . guid . toGuidString ( ) , docString ) ; <nl> - <nl> - 	 	 int cFuncs = typeAttr . cFuncs . intValue ( ) ; <nl> - 	 	 for ( int i = 0 ; i < cFuncs ; i + + ) { <nl> - 	 	 	 / / Get the function description <nl> - 	 	 	 FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( i ) ; <nl> - <nl> - 	 	 	 / / Get the member ID <nl> - 	 	 	 MEMBERID memberID = funcDesc . memid ; <nl> - <nl> - 	 	 	 / / Get the name of the method <nl> - 	 	 	 TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; <nl> - 	 	 	 String methodName = typeInfoDoc2 . getName ( ) ; <nl> - 	 	 	 TlbAbstractMethod method = null ; <nl> - <nl> - 	 	 	 if ( ! isReservedMethod ( methodName ) ) { <nl> - 	 	 	 	 if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ FUNC ) ) { <nl> - 	 	 	 	 	 method = new TlbFunction ( index , typeLibUtil , funcDesc , <nl> - 	 	 	 	 	 	 	 typeInfoUtil ) ; <nl> - 	 	 	 	 } else if ( funcDesc . invkind <nl> - 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYGET ) ) { <nl> - 	 	 	 	 	 method = new TlbPropertyGet ( index , typeLibUtil , funcDesc , <nl> - 	 	 	 	 	 	 	 typeInfoUtil ) ; <nl> - 	 	 	 	 } else if ( funcDesc . invkind <nl> - 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUT ) ) { <nl> - 	 	 	 	 	 method = new TlbPropertyPut ( index , typeLibUtil , funcDesc , <nl> - 	 	 	 	 	 	 	 typeInfoUtil ) ; <nl> - 	 	 	 	 } else if ( funcDesc . invkind <nl> - 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUTREF ) ) { <nl> - <nl> - 	 	 	 	 } <nl> - <nl> - 	 	 	 	 this . content + = method . getClassBuffer ( ) ; <nl> - <nl> - 	 	 	 	 if ( i < cFuncs - 1 ) <nl> - 	 	 	 	 	 this . content + = CR ; <nl> - 	 	 	 } <nl> - <nl> - 	 	 	 / / Release our function description stuff <nl> - 	 	 	 typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 this . createContent ( this . content ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Creates the java doc header . <nl> - 	 * <nl> - 	 * @ param guid <nl> - 	 * the guid <nl> - 	 * @ param helpstring <nl> - 	 * the helpstring <nl> - 	 * / <nl> - 	 protected void createJavaDocHeader ( String guid , String helpstring ) { <nl> - 	 	 this . replaceVariable ( " uuid " , guid ) ; <nl> - 	 	 this . replaceVariable ( " helpstring " , helpstring ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Checks if is reserved method . <nl> - 	 * <nl> - 	 * @ param method <nl> - 	 * the method <nl> - 	 * @ return true , if is reserved method <nl> - 	 * / <nl> - 	 protected boolean isReservedMethod ( String method ) { <nl> - 	 	 for ( int i = 0 ; i < IUNKNOWN _ METHODS . length ; i + + ) { <nl> - 	 	 	 if ( IUNKNOWN _ METHODS [ i ] . equalsIgnoreCase ( method ) ) <nl> - 	 	 	 	 return true ; <nl> - 	 	 } <nl> - <nl> - 	 	 for ( int i = 0 ; i < IDISPATCH _ METHODS . length ; i + + ) { <nl> - 	 	 	 if ( IDISPATCH _ METHODS [ i ] . equalsIgnoreCase ( method ) ) <nl> - 	 	 	 	 return true ; <nl> - 	 	 } <nl> - <nl> - 	 	 return false ; <nl> - 	 } <nl> - <nl> - 	 / * <nl> - 	 * ( non - Javadoc ) <nl> - 	 * <nl> - 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) <nl> - 	 * / <nl> - 	 @ Override <nl> - 	 protected String getClassTemplate ( ) { <nl> - 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . template " ; <nl> - 	 } <nl> - } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . template <nl> deleted file mode 100644 <nl> index 815a177 . . 0000000 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . template <nl> + + + / dev / null <nl> @ @ - 1 , 21 + 0 , 0 @ @ <nl> - package $ { packagename } ; <nl> - <nl> - import java . util . * ; <nl> - <nl> - import com . sun . jna . * ; <nl> - import com . sun . jna . platform . win32 . OaIdl . * ; <nl> - import com . sun . jna . platform . win32 . WinDef . * ; <nl> - import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> - import com . sun . jna . platform . win32 . WTypes . * ; <nl> - import com . sun . jna . platform . win32 . COM . * ; <nl> - <nl> - / * * <nl> - * uuid ( $ { uuid } ) <nl> - * version ( $ { version } ) <nl> - * helpstring ( $ { helpstring } ) <nl> - * <nl> - * / <nl> - public interface $ { classname } extends IDispatch { 	 <nl> - <nl> - $ { content } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . java <nl> index dfc7910 . . 78c2e0a 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class TlbEnum extends TlbBase { <nl> 	 * @ param typeLibUtil <nl> 	 * the type lib util <nl> 	 * / <nl> - 	 public TlbEnum ( int index , TypeLibUtil typeLibUtil ) { <nl> + 	 public TlbEnum ( int index , String packagename , TypeLibUtil typeLibUtil ) { <nl> 	 	 super ( index , typeLibUtil ) ; <nl> <nl> 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; <nl> @ @ - 47 , 6 + 47 , 7 @ @ public class TlbEnum extends TlbBase { <nl> 	 	 String docString = typeLibDoc . getDocString ( ) ; <nl> 	 	 <nl> 	 	 this . logInfo ( " Type of kind ' enum ' found : " + enumName ) ; <nl> + 	 	 this . createPackageName ( packagename ) ; <nl> 	 	 this . createClassName ( enumName ) ; <nl> 	 	 this . setFilename ( enumName ) ; <nl> 	 	 <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . template <nl> index b0ccfab . . 7ea5fc4 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . template <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . template <nl> @ @ - 1 , 9 + 1 , 15 @ @ <nl> + package $ { packagename } ; <nl> + <nl> + import java . util . * ; <nl> + <nl> + import com . sun . jna . * ; <nl> + <nl> / * * <nl> * uuid ( $ { uuid } ) <nl> * helpstring ( $ { helpstring } ) <nl> * <nl> * / <nl> - public static class $ { classname } extends Structure { <nl> + public class $ { classname } extends Structure { <nl> 	 public static class ByReference extends $ { classname } implements <nl> 	 	 	 Structure . ByReference { <nl> 	 } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . java <nl> new file mode 100644 <nl> index 0000000 . . 9cadbc3 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . java <nl> @ @ - 0 , 0 + 1 , 101 @ @ <nl> + / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 . COM . tlb . imp ; <nl> + <nl> + import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; <nl> + import com . sun . jna . platform . win32 . OaIdl . DATE ; <nl> + import com . sun . jna . platform . win32 . OaIdl . ELEMDESC ; <nl> + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; <nl> + import com . sun . jna . platform . win32 . Variant ; <nl> + import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; <nl> + import com . sun . jna . platform . win32 . WinDef . SCODE ; <nl> + import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; <nl> + import com . sun . jna . platform . win32 . COM . TypeLibUtil ; <nl> + import com . sun . jna . platform . win32 . COM . IUnknown ; <nl> + <nl> + / / TODO : Auto - generated Javadoc <nl> + / * * <nl> + * The Class TlbFunction . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> + * / <nl> + public class TlbFunctionStub extends TlbAbstractMethod implements Variant { <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new tlb function . <nl> + 	 * <nl> + 	 * @ param index <nl> + 	 * the index <nl> + 	 * @ param typeLibUtil <nl> + 	 * the type lib util <nl> + 	 * @ param funcDesc <nl> + 	 * the func desc <nl> + 	 * @ param typeInfoUtil <nl> + 	 * the type info util <nl> + 	 * / <nl> + 	 public TlbFunctionStub ( int index , TypeLibUtil typeLibUtil , FUNCDESC funcDesc , <nl> + 	 	 	 TypeInfoUtil typeInfoUtil ) { <nl> + 	 	 super ( index , typeLibUtil , funcDesc , typeInfoUtil ) ; <nl> + <nl> + 	 	 TypeInfoDoc typeInfoDoc = typeInfoUtil . getDocumentation ( funcDesc . memid ) ; <nl> + 	 	 String methodname = typeInfoDoc . getName ( ) ; <nl> + 	 	 String docStr = typeInfoDoc . getDocString ( ) ; <nl> + <nl> + 	 	 String methodparams = " " ; <nl> + 	 	 String methodvariables = " " ; <nl> + 	 	 short vtableId = funcDesc . oVft ; <nl> + 	 	 short paramCount = funcDesc . cParams ; <nl> + 	 	 ELEMDESC elemDesdRetType = funcDesc . elemdescFunc ; <nl> + 	 	 String returnType = this . getVarType ( elemDesdRetType . tdesc . vt ) ; <nl> + 	 	 String [ ] names = typeInfoUtil . getNames ( funcDesc . memid , paramCount + 1 ) ; <nl> + 	 	 <nl> + 	 	 / / if there is at least one param we need a comma <nl> + 	 	 if ( paramCount > 0 ) <nl> + 	 	 	 methodvariables = " , " ; <nl> + 	 	 <nl> + 	 	 for ( int i = 0 ; i < paramCount ; i + + ) { <nl> + 	 	 	 ELEMDESC elemdesc = funcDesc . lprgelemdescParam . elemDescArg [ i ] ; <nl> + 	 	 	 VARTYPE vt = elemdesc . tdesc . vt ; <nl> + <nl> + 	 	 	 String methodName = names [ i + 1 ] . toLowerCase ( ) ; <nl> + 	 	 	 methodparams + = this . getVarType ( vt ) + " " + methodName ; <nl> + 	 	 	 methodvariables + = methodName ; <nl> + 	 	 	 <nl> + 	 	 	 / / if there is more than 1 param <nl> + 	 	 	 if ( i < ( paramCount - 1 ) ) { <nl> + 	 	 	 	 methodparams + = " , " ; <nl> + 	 	 	 	 methodvariables + = " , " ; <nl> + 	 	 	 } <nl> + 	 	 } <nl> + <nl> + 	 	 this . replaceVariable ( " helpstring " , docStr ) ; <nl> + 	 	 this . replaceVariable ( " returntype " , returnType ) ; <nl> + 	 	 this . replaceVariable ( " methodname " , methodname ) ; <nl> + 	 	 this . replaceVariable ( " methodparams " , methodparams ) ; <nl> + 	 	 this . replaceVariable ( " methodvariables " , methodvariables ) ; <nl> + 	 	 this . replaceVariable ( " vtableid " , String . valueOf ( vtableId ) ) ; <nl> + 	 } <nl> + <nl> + 	 / * <nl> + 	 * ( non - Javadoc ) <nl> + 	 * <nl> + 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) <nl> + 	 * / <nl> + 	 @ Override <nl> + 	 protected String getClassTemplate ( ) { <nl> + 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . template " ; <nl> + 	 } <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . template <nl> new file mode 100644 <nl> index 0000000 . . 77b6b15 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . template <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + 	 	 / * * <nl> + 	 	 * $ { helpstring } <nl> + 	 	 * / <nl> + 	 	 public $ { returntype } $ { methodname } ( $ { methodparams } ) ; <nl> \ No newline at end of file <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbInterface . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbInterface . java <nl> index 60c81fa . . 2f252c0 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbInterface . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbInterface . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class TlbInterface extends TlbBase { <nl> 	 * @ param typeLibUtil <nl> 	 * the type lib util <nl> 	 * / <nl> - 	 public TlbInterface ( int index , TypeLibUtil typeLibUtil ) { <nl> + 	 public TlbInterface ( int index , String packagename , TypeLibUtil typeLibUtil ) { <nl> 	 	 super ( index , typeLibUtil ) ; <nl> <nl> 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; <nl> @ @ - 47 , 6 + 47 , 7 @ @ public class TlbInterface extends TlbBase { <nl> 	 	 String docString = typeLibDoc . getDocString ( ) ; <nl> <nl> 	 	 this . logInfo ( " Type of kind ' Interface ' found : " + enumName ) ; <nl> + 	 	 this . createPackageName ( packagename ) ; <nl> 	 	 this . createClassName ( enumName ) ; <nl> <nl> 	 	 / / Get the TypeAttributes <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . java <nl> new file mode 100644 <nl> index 0000000 . . fc7d46e <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . java <nl> @ @ - 0 , 0 + 1 , 73 @ @ <nl> + / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 . COM . tlb . imp ; <nl> + <nl> + import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; <nl> + import com . sun . jna . platform . win32 . OaIdl . DATE ; <nl> + import com . sun . jna . platform . win32 . OaIdl . ELEMDESC ; <nl> + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; <nl> + import com . sun . jna . platform . win32 . Variant ; <nl> + import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; <nl> + import com . sun . jna . platform . win32 . WinDef . SCODE ; <nl> + import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; <nl> + import com . sun . jna . platform . win32 . COM . TypeLibUtil ; <nl> + import com . sun . jna . platform . win32 . COM . IUnknown ; <nl> + <nl> + / / TODO : Auto - generated Javadoc <nl> + / * * <nl> + * The Class TlbPropertyGet . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> + * / <nl> + public class TlbPropertyGetStub extends TlbAbstractMethod implements Variant { <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new tlb property get . <nl> + 	 * <nl> + 	 * @ param index <nl> + 	 * the index <nl> + 	 * @ param typeLibUtil <nl> + 	 * the type lib util <nl> + 	 * @ param funcDesc <nl> + 	 * the func desc <nl> + 	 * @ param typeInfoUtil <nl> + 	 * the type info util <nl> + 	 * / <nl> + 	 public TlbPropertyGetStub ( int index , TypeLibUtil typeLibUtil , <nl> + 	 	 	 FUNCDESC funcDesc , TypeInfoUtil typeInfoUtil ) { <nl> + 	 	 super ( index , typeLibUtil , funcDesc , typeInfoUtil ) ; <nl> + <nl> + 	 	 TypeInfoDoc typeInfoDoc = typeInfoUtil . getDocumentation ( funcDesc . memid ) ; <nl> + 	 	 String docStr = typeInfoDoc . getDocString ( ) ; <nl> + 	 	 String methodname = " get " + typeInfoDoc . getName ( ) ; <nl> + 	 	 ELEMDESC elemDesdRetType = funcDesc . elemdescFunc ; <nl> + 	 	 String returnType = this . getVarType ( elemDesdRetType . tdesc . vt ) ; <nl> + <nl> + 	 	 this . replaceVariable ( " helpstring " , docStr ) ; <nl> + 	 	 this . replaceVariable ( " returntype " , returnType ) ; <nl> + 	 	 this . replaceVariable ( " methodname " , methodname ) ; <nl> + 	 } <nl> + <nl> + 	 / * <nl> + 	 * ( non - Javadoc ) <nl> + 	 * <nl> + 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) <nl> + 	 * / <nl> + 	 @ Override <nl> + 	 protected String getClassTemplate ( ) { <nl> + 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . template " ; <nl> + 	 } <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . template <nl> new file mode 100644 <nl> index 0000000 . . 579a1d6 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . template <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + 	 	 / * * <nl> + 	 	 * $ { helpstring } <nl> + 	 	 * / <nl> + 	 	 public $ { returntype } $ { methodname } ( ) ; <nl> \ No newline at end of file <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . java <nl> new file mode 100644 <nl> index 0000000 . . 0c84c54 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . java <nl> @ @ - 0 , 0 + 1 , 81 @ @ <nl> + / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 . COM . tlb . imp ; <nl> + <nl> + import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; <nl> + import com . sun . jna . platform . win32 . OaIdl . DATE ; <nl> + import com . sun . jna . platform . win32 . OaIdl . ELEMDESC ; <nl> + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; <nl> + import com . sun . jna . platform . win32 . Variant ; <nl> + import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; <nl> + import com . sun . jna . platform . win32 . WinDef . SCODE ; <nl> + import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; <nl> + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; <nl> + import com . sun . jna . platform . win32 . COM . TypeLibUtil ; <nl> + import com . sun . jna . platform . win32 . COM . IUnknown ; <nl> + <nl> + / / TODO : Auto - generated Javadoc <nl> + / * * <nl> + * The Class TlbPropertyPut . <nl> + * <nl> + * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> + * / <nl> + public class TlbPropertyPutStub extends TlbAbstractMethod implements Variant { <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates a new tlb property set . <nl> + 	 * <nl> + 	 * @ param index <nl> + 	 * the index <nl> + 	 * @ param typeLibUtil <nl> + 	 * the type lib util <nl> + 	 * @ param funcDesc <nl> + 	 * the func desc <nl> + 	 * @ param typeInfoUtil <nl> + 	 * the type info util <nl> + 	 * / <nl> + 	 public TlbPropertyPutStub ( int index , TypeLibUtil typeLibUtil , <nl> + 	 	 	 FUNCDESC funcDesc , TypeInfoUtil typeInfoUtil ) { <nl> + 	 	 super ( index , typeLibUtil , funcDesc , typeInfoUtil ) ; <nl> + <nl> + 	 	 TypeInfoDoc typeInfoDoc = typeInfoUtil . getDocumentation ( funcDesc . memid ) ; <nl> + 	 	 String docStr = typeInfoDoc . getDocString ( ) ; <nl> + 	 	 String methodname = " set " + typeInfoDoc . getName ( ) ; <nl> + 	 	 String methodparams = " " ; <nl> + 	 	 short paramCount = funcDesc . cParams ; <nl> + 	 	 String varType ; <nl> + 	 	 <nl> + 	 	 for ( int i = 0 ; i < paramCount ; i + + ) { <nl> + 	 	 	 ELEMDESC elemdesc = funcDesc . lprgelemdescParam . elemDescArg [ i ] ; <nl> + 	 	 	 VARTYPE vt = elemdesc . tdesc . vt ; <nl> + 	 	 	 varType = this . getVarType ( vt ) ; <nl> + 	 	 	 methodparams + = varType + " " + varType . toLowerCase ( ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 this . replaceVariable ( " helpstring " , docStr ) ; <nl> + 	 	 this . replaceVariable ( " methodname " , methodname ) ; <nl> + 	 	 this . replaceVariable ( " methodparams " , methodparams ) ; <nl> + 	 } <nl> + <nl> + 	 / * <nl> + 	 * ( non - Javadoc ) <nl> + 	 * <nl> + 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) <nl> + 	 * / <nl> + 	 @ Override <nl> + 	 protected String getClassTemplate ( ) { <nl> + 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . template " ; <nl> + 	 } <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . template <nl> new file mode 100644 <nl> index 0000000 . . a6f3496 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . template <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + 	 	 / * * <nl> + 	 	 * $ { helpstring } <nl> + 	 	 * / <nl> + 	 	 public void $ { methodname } ( $ { methodparams } ) ; <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / contrib / msoffice / jnatest . xls b / contrib / msoffice / jnatest . xls <nl> new file mode 100644 <nl> index 0000000 . . effa963 <nl> Binary files / dev / null and b / contrib / msoffice / jnatest . xls differ <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java <nl> new file mode 100644 <nl> index 0000000 . . 487c989 <nl> - - - / dev / null <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java <nl> @ @ - 0 , 0 + 1 , 162 @ @ <nl> + package com . sun . jna . platform . win32 . office ; <nl> + <nl> + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; <nl> + import com . sun . jna . platform . win32 . OleAut32 ; <nl> + import com . sun . jna . platform . win32 . Variant ; <nl> + import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> + import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> + import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> + import com . sun . jna . platform . win32 . COM . COMException ; <nl> + import com . sun . jna . platform . win32 . COM . COMObject ; <nl> + import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> + import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> + <nl> + public class MSExcel extends COMObject { <nl> + <nl> + 	 public MSExcel ( ) throws COMException { <nl> + 	 	 super ( " Excel . Application " , false ) ; <nl> + 	 } <nl> + <nl> + 	 public MSExcel ( boolean visible ) throws COMException { <nl> + 	 	 this ( ) ; <nl> + 	 	 this . setVisible ( Variant . VARIANT _ TRUE ) ; <nl> + 	 } <nl> + <nl> + 	 public void setVisible ( VARIANT _ BOOL bVisible ) throws COMException { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , result , this . iDispatch , <nl> + 	 	 	 	 " Visible " , new VARIANT ( bVisible ) ) ; <nl> + 	 } <nl> + <nl> + 	 public String getVersion ( ) throws COMException { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , <nl> + 	 	 	 	 " Version " ) ; <nl> + <nl> + 	 	 return result . getValue ( ) . toString ( ) ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT newExcelBook ( ) throws COMException { <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , getWorkbooks ( ) <nl> + 	 	 	 	 . getIDispatch ( ) , " Add " ) ; <nl> + <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT openExcelBook ( String filename , boolean bVisible ) <nl> + 	 	 	 throws COMException { <nl> + 	 	 / / OpenDocument <nl> + 	 	 BSTR bstrFilename = OleAut32 . INSTANCE . SysAllocString ( filename ) ; <nl> + 	 	 VARIANT varFilename = new VARIANT ( bstrFilename ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , getWorkbooks ( ) <nl> + 	 	 	 	 . getIDispatch ( ) , " Open " , varFilename ) ; <nl> + <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT closeActiveWorkbook ( VARIANT _ BOOL bSave ) throws COMException { <nl> + <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> + 	 	 	 	 getActiveWorkbook ( ) . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; <nl> + <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT quit ( ) throws COMException { <nl> + 	 	 HRESULT hr = this . oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> + 	 	 	 	 this . iDispatch , " Quit " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT insertValue ( String range , String value ) throws COMException { <nl> + 	 	 HRESULT hr ; <nl> + <nl> + 	 	 BSTR bstrRange = OleAut32 . INSTANCE . SysAllocString ( range ) ; <nl> + 	 	 VARIANT varRange = new VARIANT ( bstrRange ) ; <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this <nl> + 	 	 	 	 . getActiveSheet ( ) . getIDispatch ( ) , " Range " , varRange ) ; <nl> + 	 	 Range pRange = new Range ( ( IDispatch ) result . getValue ( ) ) ; <nl> + <nl> + 	 	 BSTR bstrValue = OleAut32 . INSTANCE . SysAllocString ( value ) ; <nl> + 	 	 VARIANT varText = new VARIANT ( bstrValue ) ; <nl> + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , null , <nl> + 	 	 	 	 pRange . getIDispatch ( ) , " Value " , varText ) ; <nl> + <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public Application getApplication ( ) { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> + 	 	 	 	 this . iDispatch , " Application " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new Application ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public ActiveWorkbook getActiveWorkbook ( ) { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> + 	 	 	 	 this . iDispatch , " ActiveWorkbook " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new ActiveWorkbook ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public Workbooks getWorkbooks ( ) { <nl> + 	 	 / / GetDocuments <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> + 	 	 	 	 this . iDispatch , " WorkBooks " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new Workbooks ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public ActiveSheet getActiveSheet ( ) { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> + 	 	 	 	 this . iDispatch , " ActiveSheet " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new ActiveSheet ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public class Application extends COMObject { <nl> + <nl> + 	 	 public Application ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class Workbooks extends COMObject { <nl> + <nl> + 	 	 public Workbooks ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class ActiveWorkbook extends COMObject { <nl> + <nl> + 	 	 public ActiveWorkbook ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class ActiveSheet extends COMObject { <nl> + <nl> + 	 	 public ActiveSheet ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class Range extends COMObject { <nl> + <nl> + 	 	 public Range ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + } <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> index 77c8b4b . . 7eb0115 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> @ @ - 18 , 11 + 18 , 16 @ @ public class MSOfficeDemo { <nl> 	 	 	 + File . separator ; <nl> <nl> 	 public MSOfficeDemo ( ) { <nl> + 	 	 / / this . testMSWord ( ) ; <nl> + 	 	 this . testMSExcel ( ) ; <nl> + 	 } <nl> + 	 <nl> + 	 public void testMSWord ( ) { <nl> 	 	 MSWord msWord = null ; <nl> <nl> 	 	 try { <nl> 	 	 	 msWord = new MSWord ( ) ; <nl> - 	 	 	 / / System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; <nl> + 	 	 	 System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; <nl> 	 	 	 msWord . setVisible ( Variant . VARIANT _ TRUE ) ; <nl> 	 	 	 msWord . newDocument ( ) ; <nl> 	 	 	 / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; <nl> @ @ - 44 , 4 + 49 , 32 @ @ public class MSOfficeDemo { <nl> 	 	 	 	 msWord . quit ( ) ; <nl> 	 	 } <nl> 	 } <nl> + 	 <nl> + 	 public void testMSExcel ( ) { <nl> + 	 	 MSExcel msExcel = null ; <nl> + <nl> + 	 	 try { <nl> + 	 	 	 msExcel = new MSExcel ( ) ; <nl> + 	 	 	 System . out . println ( " MSExcel version : " + msExcel . getVersion ( ) ) ; <nl> + 	 	 	 msExcel . setVisible ( Variant . VARIANT _ TRUE ) ; <nl> + 	 	 	 / / msExcel . newExcelBook ( ) ; <nl> + 	 	 	 msExcel . openExcelBook ( currentWorkingDir + " jnatest . xls " , true ) ; <nl> + 	 	 	 msExcel . insertValue ( " A1 " , " Hello from JNA ! " ) ; <nl> + 	 	 	 / / close and save the active sheet <nl> + 	 	 	 msExcel . closeActiveWorkbook ( Variant . VARIANT _ TRUE ) ; <nl> + 	 	 	 / / wait then close excel <nl> + 	 	 	 msExcel . quit ( ) ; <nl> + 	 	 } catch ( COMException e ) { <nl> + 	 	 	 if ( e . getExcepInfo ( ) ! = null ) { <nl> + 	 	 	 	 System . out <nl> + 	 	 	 	 	 	 . println ( " bstrSource : " + e . getExcepInfo ( ) . bstrSource ) ; <nl> + 	 	 	 	 System . out . println ( " bstrDescription : " <nl> + 	 	 	 	 	 	 + e . getExcepInfo ( ) . bstrDescription ) ; <nl> + 	 	 	 } else <nl> + 	 	 	 	 e . printStackTrace ( ) ; <nl> + 	 	 	 <nl> + 	 	 	 if ( msExcel ! = null ) <nl> + 	 	 	 	 msExcel . quit ( ) ; <nl> + 	 	 } <nl> + 	 } <nl> } <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java <nl> deleted file mode 100644 <nl> index 3762b9c . . 0000000 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java <nl> + + + / dev / null <nl> @ @ - 1 , 30 + 0 , 0 @ @ <nl> - package com . sun . jna . platform . win32 . office ; <nl> - <nl> - public class MSOfficeException extends Exception { <nl> - <nl> - 	 public MSOfficeException ( ) { <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - 	 public MSOfficeException ( String arg0 ) { <nl> - 	 	 super ( arg0 ) ; <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - 	 public MSOfficeException ( Throwable arg0 ) { <nl> - 	 	 super ( arg0 ) ; <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - 	 public MSOfficeException ( String arg0 , Throwable arg1 ) { <nl> - 	 	 super ( arg0 , arg1 ) ; <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - 	 public MSOfficeException ( String arg0 , Throwable arg1 , boolean arg2 , <nl> - 	 	 	 boolean arg3 ) { <nl> - 	 	 super ( arg0 , arg1 , arg2 , arg3 ) ; <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - } <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> index 61015fd . . 250d4f6 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> @ @ - 74 , 10 + 74 , 10 @ @ public class MSWord extends COMObject { <nl> 	 public HRESULT insertText ( String text ) throws COMException { <nl> 	 	 HRESULT hr ; <nl> <nl> - 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; <nl> - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result2 , <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> 	 	 	 	 this . iDispatch , " Selection " ) ; <nl> - 	 	 Selection pSelection = new Selection ( ( IDispatch ) result2 . getValue ( ) ) ; <nl> + 	 	 Selection pSelection = new Selection ( ( IDispatch ) result . getValue ( ) ) ; <nl> <nl> 	 	 BSTR bstrText = OleAut32 . INSTANCE . SysAllocString ( text ) ; <nl> 	 	 VARIANT varText = new VARIANT ( bstrText ) ;

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java 
 index 8fba48e . . 9694997 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java 
 @ @ - 22 , 7 + 22 , 7 @ @ import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; 
 import com . sun . jna . platform . win32 . COM . TypeLibUtil ; 
 import com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase ; 
 import com . sun . jna . platform . win32 . COM . tlb . imp . TlbCoClass ; 
 - import com . sun . jna . platform . win32 . COM . tlb . imp . TlbDispatchInterface ; 
 + import com . sun . jna . platform . win32 . COM . tlb . imp . TlbDispInterface ; 
 import com . sun . jna . platform . win32 . COM . tlb . imp . TlbEnum ; 
 import com . sun . jna . platform . win32 . COM . tlb . imp . TlbInterface ; 
 
 @ @ - 52 , 11 + 52 , 6 @ @ public class TlbImp { 
 	 / * * The out . * / 
 	 private File comRootDir ; 
 
 - 	 private String packageName ; 
 - 
 - 	 / * * The content buffer . * / 
 - 	 private StringBuffer contentBuffer = new StringBuffer ( ) ; 
 - 
 	 / * * 
 	 * The main method . 
 	 * 
 @ @ - 70 , 22 + 65 , 21 @ @ public class TlbImp { 
 	 public TlbImp ( ) { 
 	 	 Native . setProtected ( true ) ; 
 	 } 
 - 	 
 + 
 	 / * * 
 	 * Start co m2 java . 
 	 * / 
 	 public void startCOM2Java ( ) { 
 	 	 try { 
 	 	 	 this . typeLibUtil = new TypeLibUtil ( TYPELIB _ ID _ SHELL , 1 , 0 ) ; 
 - 
 + 	 	 	 / / create output Dir 
 	 	 	 this . createDir ( ) ; 
 - 	 	 	 this . createMainClass ( ) ; 
 
 	 	 	 for ( int i = 0 ; i < typeLibUtil . getTypeInfoCount ( ) ; + + i ) { 
 	 	 	 	 TYPEKIND typekind = typeLibUtil . getTypeInfoType ( i ) ; 
 
 	 	 	 	 if ( typekind . value = = TYPEKIND . TKIND _ ENUM ) { 
 - 	 	 	 	 	 this . createCOMEnum ( i , typeLibUtil ) ; 
 + 	 	 	 	 	 this . createCOMEnum ( i , this . getPackageName ( ) , typeLibUtil ) ; 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ RECORD ) { 
 	 	 	 	 	 System . out 
 	 	 	 	 	 	 	 . println ( " ' TKIND _ RECORD ' objects are currently not supported ! " ) ; 
 @ @ - 93 , 17 + 87 , 19 @ @ public class TlbImp { 
 	 	 	 	 	 System . out 
 	 	 	 	 	 	 	 . println ( " ' TKIND _ MODULE ' objects are currently not supported ! " ) ; 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ INTERFACE ) { 
 - 	 	 	 	 	 this . createCOMInterface ( i , typeLibUtil ) ; 
 + 	 	 	 	 	 this . createCOMInterface ( i , this . getPackageName ( ) , 
 + 	 	 	 	 	 	 	 typeLibUtil ) ; 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ DISPATCH ) { 
 - 	 	 	 	 	 this . createCOMDispatch ( i , typeLibUtil ) ; 
 + 	 	 	 	 	 this . createCOMDispInterface ( i , this . getPackageName ( ) , 
 + 	 	 	 	 	 	 	 typeLibUtil ) ; 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ COCLASS ) { 
 - 	 	 	 	 	 System . out . println ( " TKIND _ COCLASS " ) ; 
 + 	 	 	 	 	 this . createCOMCoClass ( i , this . getPackageName ( ) , typeLibUtil ) ; 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ ALIAS ) { 
 	 	 	 	 	 System . out 
 	 	 	 	 	 	 	 . println ( " ' TKIND _ ALIAS ' objects are currently not supported ! " ) ; 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ UNION ) { 
 	 	 	 	 	 System . out 
 - 	 	 	 	 	 	 	 . println ( " ' TKIND _ ALIAS ' objects are currently not supported ! " ) ; 
 + 	 	 	 	 	 	 	 . println ( " ' TKIND _ UNION ' objects are currently not supported ! " ) ; 
 	 	 	 	 } 
 	 	 	 } 
 	 	 } catch ( Exception e ) { 
 @ @ - 130 , 15 + 126 , 8 @ @ public class TlbImp { 
 	 	 } 
 	 } 
 
 - 	 private void createMainClass ( ) throws IOException { 
 - 	 	 this . packageName = " myPackage . " 
 - 	 	 	 	 + this . typeLibUtil . getName ( ) . toLowerCase ( ) ; 
 - 	 	 TlbCoClass tlbClass = new TlbCoClass ( - 1 , typeLibUtil ) ; 
 - 	 	 tlbClass . createPackage ( packageName ) ; 
 - 	 	 tlbClass . createContent ( contentBuffer . toString ( ) ) ; 
 - 	 	 String mainClassStr = tlbClass . getClassBuffer ( ) . toString ( ) ; 
 - 
 - 	 	 this . writeTextFile ( this . typeLibUtil . getName ( ) + " . java " , mainClassStr ) ; 
 + 	 private String getPackageName ( ) { 
 + 	 	 return " myPackage . " 	 + this . typeLibUtil . getName ( ) . toLowerCase ( ) ; 
 	 } 
 
 	 private void writeTextFile ( String filename , String str ) throws IOException { 
 @ @ - 162 , 9 + 151 , 9 @ @ public class TlbImp { 
 	 * the type lib util 
 	 * @ return the string buffer 
 	 * / 
 - 	 private void createCOMEnum ( int index , TypeLibUtil typeLibUtil ) 
 - 	 	 	 throws IOException { 
 - 	 	 TlbEnum tlbEnum = new TlbEnum ( index , typeLibUtil ) ; 
 + 	 private void createCOMEnum ( int index , String packagename , 
 + 	 	 	 TypeLibUtil typeLibUtil ) throws IOException { 
 + 	 	 TlbEnum tlbEnum = new TlbEnum ( index , packagename , typeLibUtil ) ; 
 	 	 this . writeTlbClass ( tlbEnum ) ; 
 	 } 
 
 @ @ - 177 , 9 + 166 , 10 @ @ public class TlbImp { 
 	 * the type lib util 
 	 * @ return the string buffer 
 	 * / 
 - 	 private void createCOMInterface ( int index , TypeLibUtil typeLibUtil ) 
 - 	 	 	 throws IOException { 
 - 	 	 TlbInterface tlbInterface = new TlbInterface ( index , typeLibUtil ) ; 
 + 	 private void createCOMInterface ( int index , String packagename , 
 + 	 	 	 TypeLibUtil typeLibUtil ) throws IOException { 
 + 	 	 TlbInterface tlbInterface = new TlbInterface ( index , packagename , 
 + 	 	 	 	 typeLibUtil ) ; 
 	 	 this . writeTlbClass ( tlbInterface ) ; 
 	 } 
 
 @ @ - 192 , 13 + 182 , 20 @ @ public class TlbImp { 
 	 * the type lib util 
 	 * @ return the string buffer 
 	 * / 
 - 	 private void createCOMDispatch ( int index , TypeLibUtil typeLibUtil ) 
 - 	 	 	 throws IOException { 
 - 	 	 TlbDispatchInterface tlbDispatch = new TlbDispatchInterface ( index , 
 - 	 	 	 	 typeLibUtil ) ; 
 + 	 private void createCOMDispInterface ( int index , String packagename , 
 + 	 	 	 TypeLibUtil typeLibUtil ) throws IOException { 
 + 	 	 TlbDispInterface tlbDispatch = new TlbDispInterface ( index , 
 + 	 	 	 	 packagename , typeLibUtil ) ; 
 	 	 this . writeTlbClass ( tlbDispatch ) ; 
 	 } 
 
 + 	 private void createCOMCoClass ( int index , String packagename , 
 + 	 	 	 TypeLibUtil typeLibUtil ) throws IOException { 
 + 	 	 TlbCoClass tlbCoClass = new TlbCoClass ( index , this . getPackageName ( ) , 
 + 	 	 	 	 typeLibUtil ) ; 
 + 	 	 this . writeTlbClass ( tlbCoClass ) ; 
 + 	 } 
 + 
 	 / * * 
 	 * Log info . 
 	 * 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java 
 index 40b9484 . . f1a833b 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java 
 @ @ - 60 , 6 + 60 , 14 @ @ public abstract class TlbBase { 
 
 	 protected String filename = " " ; 
 
 + 	 / * * The iunknown methods . * / 
 + 	 public static String [ ] IUNKNOWN _ METHODS = { " QueryInterface " , " AddRef " , 
 + 	 	 	 " Release " } ; 
 + 
 + 	 / * * The idispatch methods . * / 
 + 	 public static String [ ] IDISPATCH _ METHODS = { " GetTypeInfoCount " , 
 + 	 	 	 " GetTypeInfo " , " GetIDsOfNames " , " Invoke " } ; 
 + 
 	 / * * 
 	 * Instantiates a new tlb base . 
 	 * 
 @ @ - 208 , 6 + 216 , 10 @ @ public abstract class TlbBase { 
 	 	 this . classBuffer = new StringBuffer ( result ) ; 
 	 } 
 
 + 	 protected void createPackageName ( String packagename ) { 
 + 	 	 this . replaceVariable ( " packagename " , packagename ) ; 
 + 	 } 
 + 
 	 / * * 
 	 * Creates the class name . 
 	 * 
 @ @ - 217 , 4 + 229 , 25 @ @ public abstract class TlbBase { 
 	 protected void createClassName ( String name ) { 
 	 	 this . replaceVariable ( " classname " , name ) ; 
 	 } 
 + 
 + 	 / * * 
 + 	 * Checks if is reserved method . 
 + 	 * 
 + 	 * @ param method 
 + 	 * the method 
 + 	 * @ return true , if is reserved method 
 + 	 * / 
 + 	 protected boolean isReservedMethod ( String method ) { 
 + 	 	 for ( int i = 0 ; i < IUNKNOWN _ METHODS . length ; i + + ) { 
 + 	 	 	 if ( IUNKNOWN _ METHODS [ i ] . equalsIgnoreCase ( method ) ) 
 + 	 	 	 	 return true ; 
 + 	 	 } 
 + 
 + 	 	 for ( int i = 0 ; i < IDISPATCH _ METHODS . length ; i + + ) { 
 + 	 	 	 if ( IDISPATCH _ METHODS [ i ] . equalsIgnoreCase ( method ) ) 
 + 	 	 	 	 return true ; 
 + 	 	 } 
 + 
 + 	 	 return false ; 
 + 	 } 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java 
 index 9ee2f27 . . 8251482 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java 
 @ @ - 14 , 8 + 14 , 14 @ @ package com . sun . jna . platform . win32 . COM . tlb . imp ; 
 
 import java . io . PrintStream ; 
 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; 
 import com . sun . jna . platform . win32 . COM . TypeLibUtil ; 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; 
 import com . sun . jna . platform . win32 . COM . TypeLibUtil . TypeLibDoc ; 
 + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; 
 + import com . sun . jna . platform . win32 . OaIdl . INVOKEKIND ; 
 + import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; 
 + import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; 
 
 / / TODO : Auto - generated Javadoc 
 / * * 
 @ @ - 33 , 13 + 39 , 14 @ @ public class TlbCoClass extends TlbBase { 
 	 * @ param typeLibUtil 
 	 * the type lib util 
 	 * / 
 - 	 public TlbCoClass ( int index , TypeLibUtil typeLibUtil ) { 
 + 	 public TlbCoClass ( int index , String packagename , TypeLibUtil typeLibUtil ) { 
 	 	 super ( index , typeLibUtil ) ; 
 
 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; 
 	 	 String coClassName = typeLibDoc . getName ( ) ; 
 	 	 String docString = typeLibDoc . getDocString ( ) ; 
 
 + 	 	 this . createPackageName ( packagename ) ; 
 	 	 this . createClassName ( coClassName ) ; 
 	 	 this . setFilename ( coClassName ) ; 
 	 	 
 @ @ - 50 , 6 + 57 , 52 @ @ public class TlbCoClass extends TlbBase { 
 
 	 	 this . createJavaDocHeader ( guidStr , version , docString ) ; 
 	 	 this . createCLSID ( guidStr ) ; 
 + 	 	 
 + 	 	 / / Get the TypeAttributes 
 + 	 	 TypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; 
 + 	 	 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; 
 + 
 + 	 	 int cFuncs = typeAttr . cFuncs . intValue ( ) ; 
 + 	 	 for ( int i = 0 ; i < cFuncs ; i + + ) { 
 + 	 	 	 / / Get the function description 
 + 	 	 	 FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( i ) ; 
 + 
 + 	 	 	 / / Get the member ID 
 + 	 	 	 MEMBERID memberID = funcDesc . memid ; 
 + 
 + 	 	 	 / / Get the name of the method 
 + 	 	 	 TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; 
 + 	 	 	 String methodName = typeInfoDoc2 . getName ( ) ; 
 + 	 	 	 TlbAbstractMethod method = null ; 
 + 
 + 	 	 	 if ( ! isReservedMethod ( methodName ) ) { 
 + 	 	 	 	 if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ FUNC ) ) { 
 + 	 	 	 	 	 method = new TlbFunction ( index , typeLibUtil , funcDesc , 
 + 	 	 	 	 	 	 	 typeInfoUtil ) ; 
 + 	 	 	 	 } else if ( funcDesc . invkind 
 + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYGET ) ) { 
 + 	 	 	 	 	 method = new TlbPropertyGet ( index , typeLibUtil , funcDesc , 
 + 	 	 	 	 	 	 	 typeInfoUtil ) ; 
 + 	 	 	 	 } else if ( funcDesc . invkind 
 + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUT ) ) { 
 + 	 	 	 	 	 method = new TlbPropertyPut ( index , typeLibUtil , funcDesc , 
 + 	 	 	 	 	 	 	 typeInfoUtil ) ; 
 + 	 	 	 	 } else if ( funcDesc . invkind 
 + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUTREF ) ) { 
 + 
 + 	 	 	 	 } 
 + 
 + 	 	 	 	 this . content + = method . getClassBuffer ( ) ; 
 + 
 + 	 	 	 	 if ( i < cFuncs - 1 ) 
 + 	 	 	 	 	 this . content + = CR ; 
 + 	 	 	 } 
 + 
 + 	 	 	 / / Release our function description stuff 
 + 	 	 	 typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; 
 + 	 	 } 
 + 
 + 	 	 this . createContent ( this . content ) ; 
 	 } 
 
 	 / * * 
 @ @ - 73 , 16 + 126 , 6 @ @ public class TlbCoClass extends TlbBase { 
 	 	 this . replaceVariable ( " clsid " , clsid ) ; 
 	 } 
 
 - 	 / * * 
 - 	 * Creates the package . 
 - 	 * 
 - 	 * @ param packageName 
 - 	 * the package name 
 - 	 * / 
 - 	 public void createPackage ( String packageName ) { 
 - 	 	 this . replaceVariable ( " packagename " , packageName ) ; 
 - 	 } 
 - 
 	 / * 
 	 * ( non - Javadoc ) 
 	 * 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . java 
 new file mode 100644 
 index 0000000 . . 79091ec 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . java 
 @ @ - 0 , 0 + 1 , 123 @ @ 
 + / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 . COM . tlb . imp ; 
 + 
 + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; 
 + import com . sun . jna . platform . win32 . OaIdl . INVOKEKIND ; 
 + import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; 
 + import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; 
 + import com . sun . jna . platform . win32 . COM . TypeLibUtil ; 
 + import com . sun . jna . platform . win32 . COM . TypeLibUtil . TypeLibDoc ; 
 + 
 + / / TODO : Auto - generated Javadoc 
 + / * * 
 + * The Class TlbDispatch . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 + * / 
 + public class TlbDispInterface extends TlbBase { 
 + 
 + 	 / * * 
 + 	 * Instantiates a new tlb dispatch . 
 + 	 * 
 + 	 * @ param index 
 + 	 * the index 
 + 	 * @ param typeLibUtil 
 + 	 * the type lib util 
 + 	 * / 
 + 	 public TlbDispInterface ( int index , String packagename , TypeLibUtil typeLibUtil ) { 
 + 	 	 super ( index , typeLibUtil ) ; 
 + 
 + 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; 
 + 	 	 String dispName = typeLibDoc . getName ( ) ; 
 + 	 	 String docString = typeLibDoc . getDocString ( ) ; 
 + 
 + 	 	 this . logInfo ( " Type of kind ' DispInterface ' found : " + dispName ) ; 
 + 	 	 this . createPackageName ( packagename ) ; 
 + 	 	 this . createClassName ( dispName ) ; 
 + 	 	 this . setFilename ( dispName ) ; 
 + 	 	 
 + 	 	 / / Get the TypeAttributes 
 + 	 	 TypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; 
 + 	 	 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; 
 + 
 + 	 	 this . createJavaDocHeader ( typeAttr . guid . toGuidString ( ) , docString ) ; 
 + 
 + 	 	 int cFuncs = typeAttr . cFuncs . intValue ( ) ; 
 + 	 	 for ( int i = 0 ; i < cFuncs ; i + + ) { 
 + 	 	 	 / / Get the function description 
 + 	 	 	 FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( i ) ; 
 + 
 + 	 	 	 / / Get the member ID 
 + 	 	 	 MEMBERID memberID = funcDesc . memid ; 
 + 
 + 	 	 	 / / Get the name of the method 
 + 	 	 	 TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; 
 + 	 	 	 String methodName = typeInfoDoc2 . getName ( ) ; 
 + 	 	 	 TlbAbstractMethod method = null ; 
 + 
 + 	 	 	 if ( ! isReservedMethod ( methodName ) ) { 
 + 	 	 	 	 if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ FUNC ) ) { 
 + 	 	 	 	 	 method = new TlbFunctionStub ( index , typeLibUtil , funcDesc , 
 + 	 	 	 	 	 	 	 typeInfoUtil ) ; 
 + 	 	 	 	 } else if ( funcDesc . invkind 
 + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYGET ) ) { 
 + 	 	 	 	 	 method = new TlbPropertyGetStub ( index , typeLibUtil , funcDesc , 
 + 	 	 	 	 	 	 	 typeInfoUtil ) ; 
 + 	 	 	 	 } else if ( funcDesc . invkind 
 + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUT ) ) { 
 + 	 	 	 	 	 method = new TlbPropertyPutStub ( index , typeLibUtil , funcDesc , 
 + 	 	 	 	 	 	 	 typeInfoUtil ) ; 
 + 	 	 	 	 } else if ( funcDesc . invkind 
 + 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUTREF ) ) { 
 + 
 + 	 	 	 	 } 
 + 
 + 	 	 	 	 this . content + = method . getClassBuffer ( ) ; 
 + 
 + 	 	 	 	 if ( i < cFuncs - 1 ) 
 + 	 	 	 	 	 this . content + = CR ; 
 + 	 	 	 } 
 + 
 + 	 	 	 / / Release our function description stuff 
 + 	 	 	 typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; 
 + 	 	 } 
 + 
 + 	 	 this . createContent ( this . content ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Creates the java doc header . 
 + 	 * 
 + 	 * @ param guid 
 + 	 * the guid 
 + 	 * @ param helpstring 
 + 	 * the helpstring 
 + 	 * / 
 + 	 protected void createJavaDocHeader ( String guid , String helpstring ) { 
 + 	 	 this . replaceVariable ( " uuid " , guid ) ; 
 + 	 	 this . replaceVariable ( " helpstring " , helpstring ) ; 
 + 	 } 
 + 
 + 	 / * 
 + 	 * ( non - Javadoc ) 
 + 	 * 
 + 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) 
 + 	 * / 
 + 	 @ Override 
 + 	 protected String getClassTemplate ( ) { 
 + 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . template " ; 
 + 	 } 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . template 
 new file mode 100644 
 index 0000000 . . 815a177 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispInterface . template 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + package $ { packagename } ; 
 + 
 + import java . util . * ; 
 + 
 + import com . sun . jna . * ; 
 + import com . sun . jna . platform . win32 . OaIdl . * ; 
 + import com . sun . jna . platform . win32 . WinDef . * ; 
 + import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 + import com . sun . jna . platform . win32 . WTypes . * ; 
 + import com . sun . jna . platform . win32 . COM . * ; 
 + 
 + / * * 
 + * uuid ( $ { uuid } ) 
 + * version ( $ { version } ) 
 + * helpstring ( $ { helpstring } ) 
 + * 
 + * / 
 + public interface $ { classname } extends IDispatch { 	 
 + 
 + $ { content } 
 + } 
 \ No newline at end of file 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . java 
 deleted file mode 100644 
 index fa47cb1 . . 0000000 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . java 
 + + + / dev / null 
 @ @ - 1 , 151 + 0 , 0 @ @ 
 - / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation ; either 
 - * version 2 . 1 of the License , or ( at your option ) any later version . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * / 
 - package com . sun . jna . platform . win32 . COM . tlb . imp ; 
 - 
 - import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; 
 - import com . sun . jna . platform . win32 . OaIdl . INVOKEKIND ; 
 - import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; 
 - import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; 
 - import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; 
 - import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; 
 - import com . sun . jna . platform . win32 . COM . TypeLibUtil ; 
 - import com . sun . jna . platform . win32 . COM . TypeLibUtil . TypeLibDoc ; 
 - 
 - / / TODO : Auto - generated Javadoc 
 - / * * 
 - * The Class TlbDispatch . 
 - * 
 - * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 - * / 
 - public class TlbDispatchInterface extends TlbBase { 
 - 
 - 	 / * * The iunknown methods . * / 
 - 	 public static String [ ] IUNKNOWN _ METHODS = { " QueryInterface " , " AddRef " , 
 - 	 	 	 " Release " } ; 
 - 
 - 	 / * * The idispatch methods . * / 
 - 	 public static String [ ] IDISPATCH _ METHODS = { " GetTypeInfoCount " , 
 - 	 	 	 " GetTypeInfo " , " GetIDsOfNames " , " Invoke " } ; 
 - 
 - 	 / * * 
 - 	 * Instantiates a new tlb dispatch . 
 - 	 * 
 - 	 * @ param index 
 - 	 * the index 
 - 	 * @ param typeLibUtil 
 - 	 * the type lib util 
 - 	 * / 
 - 	 public TlbDispatchInterface ( int index , TypeLibUtil typeLibUtil ) { 
 - 	 	 super ( index , typeLibUtil ) ; 
 - 
 - 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; 
 - 	 	 String dispName = typeLibDoc . getName ( ) ; 
 - 	 	 String docString = typeLibDoc . getDocString ( ) ; 
 - 
 - 	 	 this . logInfo ( " Type of kind ' Dispatch ' found : " + dispName ) ; 
 - 	 	 this . createClassName ( dispName ) ; 
 - 	 	 this . setFilename ( dispName ) ; 
 - 	 	 
 - 	 	 / / Get the TypeAttributes 
 - 	 	 TypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; 
 - 	 	 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; 
 - 
 - 	 	 this . createJavaDocHeader ( typeAttr . guid . toGuidString ( ) , docString ) ; 
 - 
 - 	 	 int cFuncs = typeAttr . cFuncs . intValue ( ) ; 
 - 	 	 for ( int i = 0 ; i < cFuncs ; i + + ) { 
 - 	 	 	 / / Get the function description 
 - 	 	 	 FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( i ) ; 
 - 
 - 	 	 	 / / Get the member ID 
 - 	 	 	 MEMBERID memberID = funcDesc . memid ; 
 - 
 - 	 	 	 / / Get the name of the method 
 - 	 	 	 TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; 
 - 	 	 	 String methodName = typeInfoDoc2 . getName ( ) ; 
 - 	 	 	 TlbAbstractMethod method = null ; 
 - 
 - 	 	 	 if ( ! isReservedMethod ( methodName ) ) { 
 - 	 	 	 	 if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ FUNC ) ) { 
 - 	 	 	 	 	 method = new TlbFunction ( index , typeLibUtil , funcDesc , 
 - 	 	 	 	 	 	 	 typeInfoUtil ) ; 
 - 	 	 	 	 } else if ( funcDesc . invkind 
 - 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYGET ) ) { 
 - 	 	 	 	 	 method = new TlbPropertyGet ( index , typeLibUtil , funcDesc , 
 - 	 	 	 	 	 	 	 typeInfoUtil ) ; 
 - 	 	 	 	 } else if ( funcDesc . invkind 
 - 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUT ) ) { 
 - 	 	 	 	 	 method = new TlbPropertyPut ( index , typeLibUtil , funcDesc , 
 - 	 	 	 	 	 	 	 typeInfoUtil ) ; 
 - 	 	 	 	 } else if ( funcDesc . invkind 
 - 	 	 	 	 	 	 . equals ( INVOKEKIND . INVOKE _ PROPERTYPUTREF ) ) { 
 - 
 - 	 	 	 	 } 
 - 
 - 	 	 	 	 this . content + = method . getClassBuffer ( ) ; 
 - 
 - 	 	 	 	 if ( i < cFuncs - 1 ) 
 - 	 	 	 	 	 this . content + = CR ; 
 - 	 	 	 } 
 - 
 - 	 	 	 / / Release our function description stuff 
 - 	 	 	 typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; 
 - 	 	 } 
 - 
 - 	 	 this . createContent ( this . content ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Creates the java doc header . 
 - 	 * 
 - 	 * @ param guid 
 - 	 * the guid 
 - 	 * @ param helpstring 
 - 	 * the helpstring 
 - 	 * / 
 - 	 protected void createJavaDocHeader ( String guid , String helpstring ) { 
 - 	 	 this . replaceVariable ( " uuid " , guid ) ; 
 - 	 	 this . replaceVariable ( " helpstring " , helpstring ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Checks if is reserved method . 
 - 	 * 
 - 	 * @ param method 
 - 	 * the method 
 - 	 * @ return true , if is reserved method 
 - 	 * / 
 - 	 protected boolean isReservedMethod ( String method ) { 
 - 	 	 for ( int i = 0 ; i < IUNKNOWN _ METHODS . length ; i + + ) { 
 - 	 	 	 if ( IUNKNOWN _ METHODS [ i ] . equalsIgnoreCase ( method ) ) 
 - 	 	 	 	 return true ; 
 - 	 	 } 
 - 
 - 	 	 for ( int i = 0 ; i < IDISPATCH _ METHODS . length ; i + + ) { 
 - 	 	 	 if ( IDISPATCH _ METHODS [ i ] . equalsIgnoreCase ( method ) ) 
 - 	 	 	 	 return true ; 
 - 	 	 } 
 - 
 - 	 	 return false ; 
 - 	 } 
 - 
 - 	 / * 
 - 	 * ( non - Javadoc ) 
 - 	 * 
 - 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) 
 - 	 * / 
 - 	 @ Override 
 - 	 protected String getClassTemplate ( ) { 
 - 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . template " ; 
 - 	 } 
 - } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . template 
 deleted file mode 100644 
 index 815a177 . . 0000000 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbDispatchInterface . template 
 + + + / dev / null 
 @ @ - 1 , 21 + 0 , 0 @ @ 
 - package $ { packagename } ; 
 - 
 - import java . util . * ; 
 - 
 - import com . sun . jna . * ; 
 - import com . sun . jna . platform . win32 . OaIdl . * ; 
 - import com . sun . jna . platform . win32 . WinDef . * ; 
 - import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 - import com . sun . jna . platform . win32 . WTypes . * ; 
 - import com . sun . jna . platform . win32 . COM . * ; 
 - 
 - / * * 
 - * uuid ( $ { uuid } ) 
 - * version ( $ { version } ) 
 - * helpstring ( $ { helpstring } ) 
 - * 
 - * / 
 - public interface $ { classname } extends IDispatch { 	 
 - 
 - $ { content } 
 - } 
 \ No newline at end of file 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . java 
 index dfc7910 . . 78c2e0a 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . java 
 @ @ - 39 , 7 + 39 , 7 @ @ public class TlbEnum extends TlbBase { 
 	 * @ param typeLibUtil 
 	 * the type lib util 
 	 * / 
 - 	 public TlbEnum ( int index , TypeLibUtil typeLibUtil ) { 
 + 	 public TlbEnum ( int index , String packagename , TypeLibUtil typeLibUtil ) { 
 	 	 super ( index , typeLibUtil ) ; 
 
 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; 
 @ @ - 47 , 6 + 47 , 7 @ @ public class TlbEnum extends TlbBase { 
 	 	 String docString = typeLibDoc . getDocString ( ) ; 
 	 	 
 	 	 this . logInfo ( " Type of kind ' enum ' found : " + enumName ) ; 
 + 	 	 this . createPackageName ( packagename ) ; 
 	 	 this . createClassName ( enumName ) ; 
 	 	 this . setFilename ( enumName ) ; 
 	 	 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . template 
 index b0ccfab . . 7ea5fc4 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . template 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbEnum . template 
 @ @ - 1 , 9 + 1 , 15 @ @ 
 + package $ { packagename } ; 
 + 
 + import java . util . * ; 
 + 
 + import com . sun . jna . * ; 
 + 
 / * * 
 * uuid ( $ { uuid } ) 
 * helpstring ( $ { helpstring } ) 
 * 
 * / 
 - public static class $ { classname } extends Structure { 
 + public class $ { classname } extends Structure { 
 	 public static class ByReference extends $ { classname } implements 
 	 	 	 Structure . ByReference { 
 	 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . java 
 new file mode 100644 
 index 0000000 . . 9cadbc3 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 . COM . tlb . imp ; 
 + 
 + import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; 
 + import com . sun . jna . platform . win32 . OaIdl . DATE ; 
 + import com . sun . jna . platform . win32 . OaIdl . ELEMDESC ; 
 + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; 
 + import com . sun . jna . platform . win32 . Variant ; 
 + import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; 
 + import com . sun . jna . platform . win32 . WinDef . SCODE ; 
 + import com . sun . jna . platform . win32 . COM . IDispatch ; 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; 
 + import com . sun . jna . platform . win32 . COM . TypeLibUtil ; 
 + import com . sun . jna . platform . win32 . COM . IUnknown ; 
 + 
 + / / TODO : Auto - generated Javadoc 
 + / * * 
 + * The Class TlbFunction . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 + * / 
 + public class TlbFunctionStub extends TlbAbstractMethod implements Variant { 
 + 
 + 	 / * * 
 + 	 * Instantiates a new tlb function . 
 + 	 * 
 + 	 * @ param index 
 + 	 * the index 
 + 	 * @ param typeLibUtil 
 + 	 * the type lib util 
 + 	 * @ param funcDesc 
 + 	 * the func desc 
 + 	 * @ param typeInfoUtil 
 + 	 * the type info util 
 + 	 * / 
 + 	 public TlbFunctionStub ( int index , TypeLibUtil typeLibUtil , FUNCDESC funcDesc , 
 + 	 	 	 TypeInfoUtil typeInfoUtil ) { 
 + 	 	 super ( index , typeLibUtil , funcDesc , typeInfoUtil ) ; 
 + 
 + 	 	 TypeInfoDoc typeInfoDoc = typeInfoUtil . getDocumentation ( funcDesc . memid ) ; 
 + 	 	 String methodname = typeInfoDoc . getName ( ) ; 
 + 	 	 String docStr = typeInfoDoc . getDocString ( ) ; 
 + 
 + 	 	 String methodparams = " " ; 
 + 	 	 String methodvariables = " " ; 
 + 	 	 short vtableId = funcDesc . oVft ; 
 + 	 	 short paramCount = funcDesc . cParams ; 
 + 	 	 ELEMDESC elemDesdRetType = funcDesc . elemdescFunc ; 
 + 	 	 String returnType = this . getVarType ( elemDesdRetType . tdesc . vt ) ; 
 + 	 	 String [ ] names = typeInfoUtil . getNames ( funcDesc . memid , paramCount + 1 ) ; 
 + 	 	 
 + 	 	 / / if there is at least one param we need a comma 
 + 	 	 if ( paramCount > 0 ) 
 + 	 	 	 methodvariables = " , " ; 
 + 	 	 
 + 	 	 for ( int i = 0 ; i < paramCount ; i + + ) { 
 + 	 	 	 ELEMDESC elemdesc = funcDesc . lprgelemdescParam . elemDescArg [ i ] ; 
 + 	 	 	 VARTYPE vt = elemdesc . tdesc . vt ; 
 + 
 + 	 	 	 String methodName = names [ i + 1 ] . toLowerCase ( ) ; 
 + 	 	 	 methodparams + = this . getVarType ( vt ) + " " + methodName ; 
 + 	 	 	 methodvariables + = methodName ; 
 + 	 	 	 
 + 	 	 	 / / if there is more than 1 param 
 + 	 	 	 if ( i < ( paramCount - 1 ) ) { 
 + 	 	 	 	 methodparams + = " , " ; 
 + 	 	 	 	 methodvariables + = " , " ; 
 + 	 	 	 } 
 + 	 	 } 
 + 
 + 	 	 this . replaceVariable ( " helpstring " , docStr ) ; 
 + 	 	 this . replaceVariable ( " returntype " , returnType ) ; 
 + 	 	 this . replaceVariable ( " methodname " , methodname ) ; 
 + 	 	 this . replaceVariable ( " methodparams " , methodparams ) ; 
 + 	 	 this . replaceVariable ( " methodvariables " , methodvariables ) ; 
 + 	 	 this . replaceVariable ( " vtableid " , String . valueOf ( vtableId ) ) ; 
 + 	 } 
 + 
 + 	 / * 
 + 	 * ( non - Javadoc ) 
 + 	 * 
 + 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) 
 + 	 * / 
 + 	 @ Override 
 + 	 protected String getClassTemplate ( ) { 
 + 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . template " ; 
 + 	 } 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . template 
 new file mode 100644 
 index 0000000 . . 77b6b15 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionStub . template 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + 	 	 / * * 
 + 	 	 * $ { helpstring } 
 + 	 	 * / 
 + 	 	 public $ { returntype } $ { methodname } ( $ { methodparams } ) ; 
 \ No newline at end of file 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbInterface . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbInterface . java 
 index 60c81fa . . 2f252c0 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbInterface . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbInterface . java 
 @ @ - 39 , 7 + 39 , 7 @ @ public class TlbInterface extends TlbBase { 
 	 * @ param typeLibUtil 
 	 * the type lib util 
 	 * / 
 - 	 public TlbInterface ( int index , TypeLibUtil typeLibUtil ) { 
 + 	 public TlbInterface ( int index , String packagename , TypeLibUtil typeLibUtil ) { 
 	 	 super ( index , typeLibUtil ) ; 
 
 	 	 TypeLibDoc typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; 
 @ @ - 47 , 6 + 47 , 7 @ @ public class TlbInterface extends TlbBase { 
 	 	 String docString = typeLibDoc . getDocString ( ) ; 
 
 	 	 this . logInfo ( " Type of kind ' Interface ' found : " + enumName ) ; 
 + 	 	 this . createPackageName ( packagename ) ; 
 	 	 this . createClassName ( enumName ) ; 
 
 	 	 / / Get the TypeAttributes 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . java 
 new file mode 100644 
 index 0000000 . . fc7d46e 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . java 
 @ @ - 0 , 0 + 1 , 73 @ @ 
 + / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 . COM . tlb . imp ; 
 + 
 + import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; 
 + import com . sun . jna . platform . win32 . OaIdl . DATE ; 
 + import com . sun . jna . platform . win32 . OaIdl . ELEMDESC ; 
 + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; 
 + import com . sun . jna . platform . win32 . Variant ; 
 + import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; 
 + import com . sun . jna . platform . win32 . WinDef . SCODE ; 
 + import com . sun . jna . platform . win32 . COM . IDispatch ; 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; 
 + import com . sun . jna . platform . win32 . COM . TypeLibUtil ; 
 + import com . sun . jna . platform . win32 . COM . IUnknown ; 
 + 
 + / / TODO : Auto - generated Javadoc 
 + / * * 
 + * The Class TlbPropertyGet . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 + * / 
 + public class TlbPropertyGetStub extends TlbAbstractMethod implements Variant { 
 + 
 + 	 / * * 
 + 	 * Instantiates a new tlb property get . 
 + 	 * 
 + 	 * @ param index 
 + 	 * the index 
 + 	 * @ param typeLibUtil 
 + 	 * the type lib util 
 + 	 * @ param funcDesc 
 + 	 * the func desc 
 + 	 * @ param typeInfoUtil 
 + 	 * the type info util 
 + 	 * / 
 + 	 public TlbPropertyGetStub ( int index , TypeLibUtil typeLibUtil , 
 + 	 	 	 FUNCDESC funcDesc , TypeInfoUtil typeInfoUtil ) { 
 + 	 	 super ( index , typeLibUtil , funcDesc , typeInfoUtil ) ; 
 + 
 + 	 	 TypeInfoDoc typeInfoDoc = typeInfoUtil . getDocumentation ( funcDesc . memid ) ; 
 + 	 	 String docStr = typeInfoDoc . getDocString ( ) ; 
 + 	 	 String methodname = " get " + typeInfoDoc . getName ( ) ; 
 + 	 	 ELEMDESC elemDesdRetType = funcDesc . elemdescFunc ; 
 + 	 	 String returnType = this . getVarType ( elemDesdRetType . tdesc . vt ) ; 
 + 
 + 	 	 this . replaceVariable ( " helpstring " , docStr ) ; 
 + 	 	 this . replaceVariable ( " returntype " , returnType ) ; 
 + 	 	 this . replaceVariable ( " methodname " , methodname ) ; 
 + 	 } 
 + 
 + 	 / * 
 + 	 * ( non - Javadoc ) 
 + 	 * 
 + 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) 
 + 	 * / 
 + 	 @ Override 
 + 	 protected String getClassTemplate ( ) { 
 + 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . template " ; 
 + 	 } 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . template 
 new file mode 100644 
 index 0000000 . . 579a1d6 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyGetStub . template 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + 	 	 / * * 
 + 	 	 * $ { helpstring } 
 + 	 	 * / 
 + 	 	 public $ { returntype } $ { methodname } ( ) ; 
 \ No newline at end of file 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . java 
 new file mode 100644 
 index 0000000 . . 0c84c54 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . java 
 @ @ - 0 , 0 + 1 , 81 @ @ 
 + / * Copyright ( c ) 2013 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 . COM . tlb . imp ; 
 + 
 + import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; 
 + import com . sun . jna . platform . win32 . OaIdl . DATE ; 
 + import com . sun . jna . platform . win32 . OaIdl . ELEMDESC ; 
 + import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; 
 + import com . sun . jna . platform . win32 . Variant ; 
 + import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 + import com . sun . jna . platform . win32 . WTypes . VARTYPE ; 
 + import com . sun . jna . platform . win32 . WinDef . SCODE ; 
 + import com . sun . jna . platform . win32 . COM . IDispatch ; 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil ; 
 + import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; 
 + import com . sun . jna . platform . win32 . COM . TypeLibUtil ; 
 + import com . sun . jna . platform . win32 . COM . IUnknown ; 
 + 
 + / / TODO : Auto - generated Javadoc 
 + / * * 
 + * The Class TlbPropertyPut . 
 + * 
 + * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 + * / 
 + public class TlbPropertyPutStub extends TlbAbstractMethod implements Variant { 
 + 
 + 	 / * * 
 + 	 * Instantiates a new tlb property set . 
 + 	 * 
 + 	 * @ param index 
 + 	 * the index 
 + 	 * @ param typeLibUtil 
 + 	 * the type lib util 
 + 	 * @ param funcDesc 
 + 	 * the func desc 
 + 	 * @ param typeInfoUtil 
 + 	 * the type info util 
 + 	 * / 
 + 	 public TlbPropertyPutStub ( int index , TypeLibUtil typeLibUtil , 
 + 	 	 	 FUNCDESC funcDesc , TypeInfoUtil typeInfoUtil ) { 
 + 	 	 super ( index , typeLibUtil , funcDesc , typeInfoUtil ) ; 
 + 
 + 	 	 TypeInfoDoc typeInfoDoc = typeInfoUtil . getDocumentation ( funcDesc . memid ) ; 
 + 	 	 String docStr = typeInfoDoc . getDocString ( ) ; 
 + 	 	 String methodname = " set " + typeInfoDoc . getName ( ) ; 
 + 	 	 String methodparams = " " ; 
 + 	 	 short paramCount = funcDesc . cParams ; 
 + 	 	 String varType ; 
 + 	 	 
 + 	 	 for ( int i = 0 ; i < paramCount ; i + + ) { 
 + 	 	 	 ELEMDESC elemdesc = funcDesc . lprgelemdescParam . elemDescArg [ i ] ; 
 + 	 	 	 VARTYPE vt = elemdesc . tdesc . vt ; 
 + 	 	 	 varType = this . getVarType ( vt ) ; 
 + 	 	 	 methodparams + = varType + " " + varType . toLowerCase ( ) ; 
 + 	 	 } 
 + 
 + 	 	 this . replaceVariable ( " helpstring " , docStr ) ; 
 + 	 	 this . replaceVariable ( " methodname " , methodname ) ; 
 + 	 	 this . replaceVariable ( " methodparams " , methodparams ) ; 
 + 	 } 
 + 
 + 	 / * 
 + 	 * ( non - Javadoc ) 
 + 	 * 
 + 	 * @ see com . sun . jna . platform . win32 . COM . tlb . imp . TlbBase # getClassTemplate ( ) 
 + 	 * / 
 + 	 @ Override 
 + 	 protected String getClassTemplate ( ) { 
 + 	 	 return " com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . template " ; 
 + 	 } 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . template 
 new file mode 100644 
 index 0000000 . . a6f3496 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbPropertyPutStub . template 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + 	 	 / * * 
 + 	 	 * $ { helpstring } 
 + 	 	 * / 
 + 	 	 public void $ { methodname } ( $ { methodparams } ) ; 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / contrib / msoffice / jnatest . xls b / contrib / msoffice / jnatest . xls 
 new file mode 100644 
 index 0000000 . . effa963 
 Binary files / dev / null and b / contrib / msoffice / jnatest . xls differ 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java 
 new file mode 100644 
 index 0000000 . . 487c989 
 - - - / dev / null 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java 
 @ @ - 0 , 0 + 1 , 162 @ @ 
 + package com . sun . jna . platform . win32 . office ; 
 + 
 + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; 
 + import com . sun . jna . platform . win32 . OleAut32 ; 
 + import com . sun . jna . platform . win32 . Variant ; 
 + import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 + import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 + import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 + import com . sun . jna . platform . win32 . COM . COMException ; 
 + import com . sun . jna . platform . win32 . COM . COMObject ; 
 + import com . sun . jna . platform . win32 . COM . COMUtils ; 
 + import com . sun . jna . platform . win32 . COM . IDispatch ; 
 + 
 + public class MSExcel extends COMObject { 
 + 
 + 	 public MSExcel ( ) throws COMException { 
 + 	 	 super ( " Excel . Application " , false ) ; 
 + 	 } 
 + 
 + 	 public MSExcel ( boolean visible ) throws COMException { 
 + 	 	 this ( ) ; 
 + 	 	 this . setVisible ( Variant . VARIANT _ TRUE ) ; 
 + 	 } 
 + 
 + 	 public void setVisible ( VARIANT _ BOOL bVisible ) throws COMException { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , result , this . iDispatch , 
 + 	 	 	 	 " Visible " , new VARIANT ( bVisible ) ) ; 
 + 	 } 
 + 
 + 	 public String getVersion ( ) throws COMException { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , 
 + 	 	 	 	 " Version " ) ; 
 + 
 + 	 	 return result . getValue ( ) . toString ( ) ; 
 + 	 } 
 + 
 + 	 public HRESULT newExcelBook ( ) throws COMException { 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , getWorkbooks ( ) 
 + 	 	 	 	 . getIDispatch ( ) , " Add " ) ; 
 + 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public HRESULT openExcelBook ( String filename , boolean bVisible ) 
 + 	 	 	 throws COMException { 
 + 	 	 / / OpenDocument 
 + 	 	 BSTR bstrFilename = OleAut32 . INSTANCE . SysAllocString ( filename ) ; 
 + 	 	 VARIANT varFilename = new VARIANT ( bstrFilename ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , getWorkbooks ( ) 
 + 	 	 	 	 . getIDispatch ( ) , " Open " , varFilename ) ; 
 + 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public HRESULT closeActiveWorkbook ( VARIANT _ BOOL bSave ) throws COMException { 
 + 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 + 	 	 	 	 getActiveWorkbook ( ) . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; 
 + 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public HRESULT quit ( ) throws COMException { 
 + 	 	 HRESULT hr = this . oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 + 	 	 	 	 this . iDispatch , " Quit " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public HRESULT insertValue ( String range , String value ) throws COMException { 
 + 	 	 HRESULT hr ; 
 + 
 + 	 	 BSTR bstrRange = OleAut32 . INSTANCE . SysAllocString ( range ) ; 
 + 	 	 VARIANT varRange = new VARIANT ( bstrRange ) ; 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this 
 + 	 	 	 	 . getActiveSheet ( ) . getIDispatch ( ) , " Range " , varRange ) ; 
 + 	 	 Range pRange = new Range ( ( IDispatch ) result . getValue ( ) ) ; 
 + 
 + 	 	 BSTR bstrValue = OleAut32 . INSTANCE . SysAllocString ( value ) ; 
 + 	 	 VARIANT varText = new VARIANT ( bstrValue ) ; 
 + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , null , 
 + 	 	 	 	 pRange . getIDispatch ( ) , " Value " , varText ) ; 
 + 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public Application getApplication ( ) { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 + 	 	 	 	 this . iDispatch , " Application " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new Application ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 
 + 	 public ActiveWorkbook getActiveWorkbook ( ) { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 + 	 	 	 	 this . iDispatch , " ActiveWorkbook " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new ActiveWorkbook ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 
 + 	 public Workbooks getWorkbooks ( ) { 
 + 	 	 / / GetDocuments 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 + 	 	 	 	 this . iDispatch , " WorkBooks " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new Workbooks ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 
 + 	 public ActiveSheet getActiveSheet ( ) { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 + 	 	 	 	 this . iDispatch , " ActiveSheet " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new ActiveSheet ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 
 + 	 public class Application extends COMObject { 
 + 
 + 	 	 public Application ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class Workbooks extends COMObject { 
 + 
 + 	 	 public Workbooks ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class ActiveWorkbook extends COMObject { 
 + 
 + 	 	 public ActiveWorkbook ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class ActiveSheet extends COMObject { 
 + 
 + 	 	 public ActiveSheet ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class Range extends COMObject { 
 + 
 + 	 	 public Range ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + } 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 index 77c8b4b . . 7eb0115 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 @ @ - 18 , 11 + 18 , 16 @ @ public class MSOfficeDemo { 
 	 	 	 + File . separator ; 
 
 	 public MSOfficeDemo ( ) { 
 + 	 	 / / this . testMSWord ( ) ; 
 + 	 	 this . testMSExcel ( ) ; 
 + 	 } 
 + 	 
 + 	 public void testMSWord ( ) { 
 	 	 MSWord msWord = null ; 
 
 	 	 try { 
 	 	 	 msWord = new MSWord ( ) ; 
 - 	 	 	 / / System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; 
 + 	 	 	 System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; 
 	 	 	 msWord . setVisible ( Variant . VARIANT _ TRUE ) ; 
 	 	 	 msWord . newDocument ( ) ; 
 	 	 	 / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; 
 @ @ - 44 , 4 + 49 , 32 @ @ public class MSOfficeDemo { 
 	 	 	 	 msWord . quit ( ) ; 
 	 	 } 
 	 } 
 + 	 
 + 	 public void testMSExcel ( ) { 
 + 	 	 MSExcel msExcel = null ; 
 + 
 + 	 	 try { 
 + 	 	 	 msExcel = new MSExcel ( ) ; 
 + 	 	 	 System . out . println ( " MSExcel version : " + msExcel . getVersion ( ) ) ; 
 + 	 	 	 msExcel . setVisible ( Variant . VARIANT _ TRUE ) ; 
 + 	 	 	 / / msExcel . newExcelBook ( ) ; 
 + 	 	 	 msExcel . openExcelBook ( currentWorkingDir + " jnatest . xls " , true ) ; 
 + 	 	 	 msExcel . insertValue ( " A1 " , " Hello from JNA ! " ) ; 
 + 	 	 	 / / close and save the active sheet 
 + 	 	 	 msExcel . closeActiveWorkbook ( Variant . VARIANT _ TRUE ) ; 
 + 	 	 	 / / wait then close excel 
 + 	 	 	 msExcel . quit ( ) ; 
 + 	 	 } catch ( COMException e ) { 
 + 	 	 	 if ( e . getExcepInfo ( ) ! = null ) { 
 + 	 	 	 	 System . out 
 + 	 	 	 	 	 	 . println ( " bstrSource : " + e . getExcepInfo ( ) . bstrSource ) ; 
 + 	 	 	 	 System . out . println ( " bstrDescription : " 
 + 	 	 	 	 	 	 + e . getExcepInfo ( ) . bstrDescription ) ; 
 + 	 	 	 } else 
 + 	 	 	 	 e . printStackTrace ( ) ; 
 + 	 	 	 
 + 	 	 	 if ( msExcel ! = null ) 
 + 	 	 	 	 msExcel . quit ( ) ; 
 + 	 	 } 
 + 	 } 
 } 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java 
 deleted file mode 100644 
 index 3762b9c . . 0000000 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java 
 + + + / dev / null 
 @ @ - 1 , 30 + 0 , 0 @ @ 
 - package com . sun . jna . platform . win32 . office ; 
 - 
 - public class MSOfficeException extends Exception { 
 - 
 - 	 public MSOfficeException ( ) { 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - 	 public MSOfficeException ( String arg0 ) { 
 - 	 	 super ( arg0 ) ; 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - 	 public MSOfficeException ( Throwable arg0 ) { 
 - 	 	 super ( arg0 ) ; 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - 	 public MSOfficeException ( String arg0 , Throwable arg1 ) { 
 - 	 	 super ( arg0 , arg1 ) ; 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - 	 public MSOfficeException ( String arg0 , Throwable arg1 , boolean arg2 , 
 - 	 	 	 boolean arg3 ) { 
 - 	 	 super ( arg0 , arg1 , arg2 , arg3 ) ; 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - } 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 index 61015fd . . 250d4f6 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 @ @ - 74 , 10 + 74 , 10 @ @ public class MSWord extends COMObject { 
 	 public HRESULT insertText ( String text ) throws COMException { 
 	 	 HRESULT hr ; 
 
 - 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; 
 - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result2 , 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 	 	 	 	 this . iDispatch , " Selection " ) ; 
 - 	 	 Selection pSelection = new Selection ( ( IDispatch ) result2 . getValue ( ) ) ; 
 + 	 	 Selection pSelection = new Selection ( ( IDispatch ) result . getValue ( ) ) ; 
 
 	 	 BSTR bstrText = OleAut32 . INSTANCE . SysAllocString ( text ) ; 
 	 	 VARIANT varText = new VARIANT ( bstrText ) ;
