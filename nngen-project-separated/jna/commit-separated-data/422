BLEU SCORE: 0.02139089632303349

TEST MSG: fix library load error w / unicode
GENERATED MSG: add dll callbacks , tests , explicit flags for dlopen

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index a39f4d7 . . 9e90967 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 9 , 26 + 9 , 27 @ @ Features <nl> * Added ASL licensing to facilitate distribution - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 109 ] ( https : / / github . com / twall / jna / issues / 109 ) : Set default Java compatibility level to 1 . 6 - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 209 ] ( https : / / github . com / twall / jna / issues / 209 ) : Improved default performance saving last error results - [ @ twall ] ( https : / / github . com / twall ) . <nl> - * Used predictable names for CPU architecture prefix ( namely x86 , x86 - 64 ) ; names correspond to OSGI processor values - [ @ twall ] ( https : / / github . com / twall ) . <nl> - * Avoided superfluous Structure memory allocation from native - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Use predictable names for CPU architecture prefix ( namely x86 , x86 - 64 ) ; names correspond to OSGI processor values - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Avoid superfluous Structure memory allocation from native - [ @ twall ] ( https : / / github . com / twall ) . <nl> * Added ` Library . OPTION _ CLASSLOADER ` , which enables loading native libraries from any class loader ( including JNA ' s native library ) . This enables parallel dependencies on JNA ( e . g . within a tomcat deployment without having to include JNA in the app server environment ) - [ @ twall ] ( https : / / github . com / twall ) . <nl> - * Used per - library String encoding settings ( see ` Native . getDefaultStringEncoding ( ) ` and ` Structure . getStringEncoding ( ) ` ) - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Use per - library String encoding settings ( see ` Native . getDefaultStringEncoding ( ) ` and ` Structure . getStringEncoding ( ) ` ) - [ @ twall ] ( https : / / github . com / twall ) . <nl> * Added memory dump for debugging ( see ` com . sun . jna . Memory ` ) - [ @ twall ] ( https : / / github . com / twall ) . <nl> * Improved caching of Structure alignment , type mapping , and encoding information - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 225 ] ( https : / / github . com / twall / jna / pull / 225 ) : Added ` platform . win32 . Kernel32 . GetLogicalProcessorInformation ` and ` platform . win32 . Kernel32Util . getLogicalProcessorInformation ` - [ @ trejkaz ] ( https : / / github . com / trejkaz ) . <nl> * [ # 236 ] ( https : / / github . com / twall / jna / issues / 236 ) : Auto - strip profiler native method prefix specified by ` jna . profiler . prefix ` , which defaults to $ $ YJP $ $ - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Added ` jna . debug _ load ` property to diagnose library loading issues - [ @ twall ] ( https : / / github . com / twall ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> * [ # 213 ] ( https : / / github . com / twall / jna / pull / 213 ) : Fixed ` Structure . toString ( ) ` not to dump memory when ` jna . dump _ memory ` is false - [ @ tomohiron ] ( https : / / github . com / tomohiron ) . <nl> - * Used TLS to indicate callback detach state , to avoid any potential conflicts with last error storage - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Use dedicated TLS to indicate callback detach state , to avoid any potential conflicts with last error storage - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 173 ] ( https : / / github . com / twall / jna / issues / 173 ) : Fixed OSX 10 . 8 / Xcode 4 + builds , web start path with Oracle 1 . 7 JDK - [ @ mkjellman ] ( https : / / github . com / mkjellman ) . <nl> * [ # 215 ] ( https : / / github . com / twall / jna / issues / 215 ) : Forced use of XSI ` strerror _ r ` on linux - [ LionelCons ] ( https : / / github . com / LionelCons ) . <nl> * [ # 214 ] ( https : / / github . com / twall / jna / issues / 214 ) : Don ' t map library names when an absolute path is provided - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 218 ] ( https : / / github . com / twall / jna / issues / 218 ) : Explicitly handled broken Android ` SecurityManager ` implementation - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 223 ] ( https : / / github . com / twall / jna / issues / 223 ) : Fixed layout / size derivation for unions - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 229 ] ( https : / / github . com / twall / jna / issues / 229 ) : Added ` CreateProcessW ` ( Unicode version ) - [ @ twall ] ( https : / / github . com / twall ) . <nl> - * Avoided solaris / x86 JVM bug w / library open flags - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Avoid solaris / x86 JVM bug w / library open flags - [ @ twall ] ( https : / / github . com / twall ) . <nl> * Fixed NPE returning wide string from a direct - mapped function - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 237 ] ( https : / / github . com / twall / jna / issues / 237 ) : Fix LastErrorException / getLastError on AIX - [ @ skissane ] ( https : / / github . com / skissane ) . <nl> <nl> diff - - git a / build . xml b / build . xml <nl> index f1e9cda . . def7e45 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 764 , 7 + 764 , 7 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> < / jar > <nl> < ! - - Ensure jar - based library is unavailable on FS - based class path - - > <nl> < delete > <nl> - < fileset dir = " $ { test . classes } " > <nl> + < fileset dir = " $ { build } " > <nl> < include name = " * * / * testlib - jar * " / > <nl> < / fileset > <nl> < / delete > <nl> diff - - git a / native / callback . c b / native / callback . c <nl> index 1ea941c . . 522dac0 100644 <nl> - - - a / native / callback . c <nl> + + + b / native / callback . c <nl> @ @ - 645 , 6 + 645 , 7 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> tls = get _ thread _ storage ( env ) ; <nl> if ( tls ) { <nl> strncpy ( tls - > name , args . name ? args . name : " < unconfigured native thread > " , sizeof ( tls - > name ) ) ; <nl> + tls - > name [ sizeof ( tls - > name ) - 1 ] = 0 ; <nl> tls - > detach = detach ; <nl> tls - > jvm _ thread = JNI _ FALSE ; <nl> } <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index 2d477ca . . 805115f 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 49 , 7 + 49 , 7 @ @ <nl> # include < dlfcn . h > <nl> # include < errno . h > <nl> # define STRTYPE char * <nl> - # define NAME2CSTR ( ENV , JSTR ) newCStringUTF8 ( ENV , JSTR ) <nl> + # define NAME2CSTR ( ENV , JSTR ) newCString ( ENV , JSTR ) <nl> # define DEFAULT _ LOAD _ OPTS ( RTLD _ LAZY | RTLD _ GLOBAL ) <nl> # define LOAD _ LIBRARY ( NAME , OPTS ) dlopen ( NAME , OPTS ) <nl> # define LOAD _ ERROR ( BUF , LEN ) ( snprintf ( BUF , LEN , " % s " , dlerror ( ) ) , BUF ) <nl> @ @ - 276 , 6 + 276 , 8 @ @ static jfieldID FID _ Structure _ typeInfo ; <nl> static jfieldID FID _ IntegerType _ value ; <nl> static jfieldID FID _ PointerType _ pointer ; <nl> <nl> + jstring fileEncoding ; <nl> + <nl> / * Forward declarations * / <nl> static char * newCString ( JNIEnv * env , jstring jstr ) ; <nl> static char * newCStringEncoding ( JNIEnv * env , jstring jstr , const char * encoding ) ; <nl> @ @ - 290 , 7 + 292 , 7 @ @ static ffi _ type * getStructureType ( JNIEnv * , jobject ) ; <nl> <nl> typedef void ( JNICALL * release _ t ) ( JNIEnv * , jarray , void * , jint ) ; <nl> <nl> - # if 1 <nl> + # if 0 <nl> / * * Invokes System . err . println ( for debugging only ) . * / <nl> void <nl> println ( JNIEnv * env , const char * msg ) { <nl> @ @ - 1233 , 22 + 1235 , 15 @ @ getBufferArray ( JNIEnv * env , jobject buf , <nl> } <nl> # endif / * NO _ NIO _ BUFFERS * / <nl> <nl> - static const void * <nl> - get _ system _ property ( JNIEnv * env , const char * name , jboolean wide ) { <nl> + static jstring <nl> + get _ system _ property ( JNIEnv * env , const char * name ) { <nl> jclass classSystem = ( * env ) - > FindClass ( env , " java / lang / System " ) ; <nl> if ( classSystem ! = NULL ) { <nl> jmethodID mid = ( * env ) - > GetStaticMethodID ( env , classSystem , " getProperty " , <nl> " ( Ljava / lang / String ; ) Ljava / lang / String ; " ) ; <nl> if ( mid ! = NULL ) { <nl> jstring propname = newJavaString ( env , name , CHARSET _ UTF8 ) ; <nl> - jstring value = ( * env ) - > CallStaticObjectMethod ( env , classSystem , <nl> - mid , propname ) ; <nl> - if ( value ) { <nl> - if ( wide ) { <nl> - return newWideCString ( env , value ) ; <nl> - } <nl> - return newCStringUTF8 ( env , value ) ; <nl> - } <nl> + return ( * env ) - > CallStaticObjectMethod ( env , classSystem , mid , propname ) ; <nl> } <nl> } <nl> return NULL ; <nl> @ @ - 1383 , 6 + 1378 , 11 @ @ JNA _ init ( JNIEnv * env ) { <nl> if ( ! LOAD _ FID ( env , FID _ Double _ value , classDouble , " value " , " D " ) ) <nl> return " Double . value " ; <nl> <nl> + fileEncoding = get _ system _ property ( env , " file . encoding " ) ; <nl> + if ( fileEncoding ) { <nl> + fileEncoding = ( * env ) - > NewGlobalRef ( env , fileEncoding ) ; <nl> + } <nl> + <nl> return NULL ; <nl> } <nl> <nl> @ @ - 2837 , 8 + 2837 , 9 @ @ Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * env , jclass UNUSED ( classp ) , job <nl> / / Use Unicode strings in case the path to the library includes non - ASCII <nl> / / characters . <nl> wchar _ t * path = L " jawt . dll " ; <nl> - wchar _ t * prop = ( wchar _ t * ) get _ system _ property ( env , " java . home " , JNI _ TRUE ) ; <nl> - if ( prop ! = NULL ) { <nl> + jstring jprop = ( wchar _ t * ) get _ system _ property ( env , " java . home " ) ; <nl> + if ( jprop ! = NULL ) { <nl> + const wchar _ t * prop = newWideCString ( env , value ) ; <nl> const wchar _ t * suffix = L " / bin / jawt . dll " ; <nl> size _ t len = wcslen ( prop ) + wcslen ( suffix ) + 1 ; <nl> path = ( wchar _ t * ) alloca ( len * sizeof ( wchar _ t ) ) ; <nl> @ @ - 3067 , 6 + 3068 , 11 @ @ JNI _ OnUnload ( JavaVM * vm , void * UNUSED ( reserved ) ) { <nl> } <nl> } <nl> <nl> + if ( fileEncoding ) { <nl> + ( * env ) - > DeleteGlobalRef ( env , fileEncoding ) ; <nl> + fileEncoding = NULL ; <nl> + } <nl> + <nl> for ( i = 0 ; i < sizeof ( refs ) / sizeof ( refs [ 0 ] ) ; i + + ) { <nl> if ( * refs [ i ] ) { <nl> ( * env ) - > DeleteWeakGlobalRef ( env , * refs [ i ] ) ; <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index f377a4f . . 180477a 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 92 , 6 + 92 , 8 @ @ import com . sun . jna . Structure . FFIType ; <nl> public final class Native implements Version { <nl> <nl> public static final String DEFAULT _ ENCODING = " utf8 " ; <nl> + static final boolean DEBUG _ LOAD = Boolean . getBoolean ( " jna . debug _ load " ) ; <nl> + static final boolean DEBUG _ JNA _ LOAD = Boolean . getBoolean ( " jna . debug _ load . jna " ) ; <nl> <nl> / / Used by tests , do not remove <nl> private static String nativeLibraryPath = null ; <nl> @ @ - 660 , 8 + 662 , 14 @ @ public final class Native implements Version { <nl> String dir = dirs . nextToken ( ) ; <nl> File file = new File ( new File ( dir ) , System . mapLibraryName ( libName ) . replace ( " . dylib " , " . jnilib " ) ) ; <nl> String path = file . getAbsolutePath ( ) ; <nl> + 	 	 if ( DEBUG _ JNA _ LOAD ) { <nl> + 	 	 System . out . println ( " Looking in " + path ) ; <nl> + 	 	 } <nl> if ( file . exists ( ) ) { <nl> try { <nl> + 	 	 	 if ( DEBUG _ JNA _ LOAD ) { <nl> + 	 	 	 System . out . println ( " Trying " + path ) ; <nl> + 	 	 	 } <nl> System . load ( path ) ; <nl> nativeLibraryPath = path ; <nl> return ; <nl> @ @ - 681 , 8 + 689 , 14 @ @ public final class Native implements Version { <nl> ext = " dylib " ; <nl> } <nl> path = path . substring ( 0 , path . lastIndexOf ( orig ) ) + ext ; <nl> + 	 	 if ( DEBUG _ JNA _ LOAD ) { <nl> + 	 	 	 System . out . println ( " Looking in " + path ) ; <nl> + 	 	 } <nl> if ( new File ( path ) . exists ( ) ) { <nl> try { <nl> + 	 	 	 if ( DEBUG _ JNA _ LOAD ) { <nl> + 	 	 	 	 System . out . println ( " Trying " + path ) ; <nl> + 	 	 	 } <nl> System . load ( path ) ; <nl> nativeLibraryPath = path ; <nl> return ; <nl> @ @ - 695 , 6 + 709 , 9 @ @ public final class Native implements Version { <nl> } <nl> if ( ! Boolean . getBoolean ( " jna . nosys " ) ) { <nl> try { <nl> + 	 	 if ( DEBUG _ JNA _ LOAD ) { <nl> + 	 	 System . out . println ( " Trying ( via loadLibrary ) " + libName ) ; <nl> + 	 	 } <nl> System . loadLibrary ( libName ) ; <nl> return ; <nl> } <nl> @ @ - 723 , 7 + 740 , 10 @ @ public final class Native implements Version { <nl> throw new UnsatisfiedLinkError ( " Could not find JNA native support " ) ; <nl> } <nl> } <nl> - System . load ( lib . getAbsolutePath ( ) ) ; <nl> + 	 if ( DEBUG _ JNA _ LOAD ) { <nl> + 	 	 System . out . println ( " Trying " + lib . getAbsolutePath ( ) ) ; <nl> + 	 } <nl> + 	 System . load ( lib . getAbsolutePath ( ) ) ; <nl> nativeLibraryPath = lib . getAbsolutePath ( ) ; <nl> / / Attempt to delete immediately once jnidispatch is successfully <nl> / / loaded . This avoids the complexity of trying to do so on " exit " , <nl> @ @ - 778 , 6 + 798 , 9 @ @ public final class Native implements Version { <nl> loader = Native . class . getClassLoader ( ) ; <nl> } <nl> } <nl> + 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 System . out . println ( " Looking in classpath from " + loader + " for " + name ) ; <nl> + 	 } <nl> String libname = name . startsWith ( " / " ) ? name : NativeLibrary . mapSharedLibraryName ( name ) ; <nl> String resourcePath = name . startsWith ( " / " ) ? name : Platform . RESOURCE _ PREFIX + " / " + libname ; <nl> if ( resourcePath . startsWith ( " / " ) ) { <nl> @ @ - 804 , 11 + 827 , 18 @ @ public final class Native implements Version { <nl> catch ( URISyntaxException e ) { <nl> lib = new File ( url . getPath ( ) ) ; <nl> } <nl> + 	 if ( DEBUG _ LOAD ) { <nl> + 	 	 System . out . println ( " Looking in " + lib . getAbsolutePath ( ) ) ; <nl> + 	 } <nl> if ( ! lib . exists ( ) ) { <nl> throw new IOException ( " File URL " + url + " could not be properly decoded " ) ; <nl> } <nl> } <nl> else if ( ! Boolean . getBoolean ( " jna . nounpack " ) ) { <nl> + 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 System . out . println ( " Looking in " + resourcePath ) ; <nl> + 	 } <nl> + 	 <nl> InputStream is = loader . getResourceAsStream ( resourcePath ) ; <nl> if ( is = = null ) { <nl> throw new IOException ( " Can ' t obtain InputStream for " + resourcePath ) ; <nl> diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java <nl> index 655c141 . . 009ae75 100644 <nl> - - - a / src / com / sun / jna / NativeLibrary . java <nl> + + + b / src / com / sun / jna / NativeLibrary . java <nl> @ @ - 123 , 6 + 123 , 10 @ @ public class NativeLibrary { <nl> } <nl> <nl> private static NativeLibrary loadLibrary ( String libraryName , Map options ) { <nl> + 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 System . out . println ( " Looking for library ' " + libraryName + " ' " ) ; <nl> + 	 } <nl> + <nl> boolean isAbsolutePath = new File ( libraryName ) . isAbsolute ( ) ; <nl> List searchPath = new LinkedList ( ) ; <nl> int openFlags = openFlags ( options ) ; <nl> @ @ - 131 , 6 + 135 , 9 @ @ public class NativeLibrary { <nl> / / attempt any library name variations <nl> String webstartPath = Native . getWebStartLibraryPath ( libraryName ) ; <nl> if ( webstartPath ! = null ) { <nl> + 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 System . out . println ( " Adding web start path " + webstartPath ) ; <nl> + 	 } <nl> searchPath . add ( webstartPath ) ; <nl> } <nl> <nl> @ @ - 144 , 6 + 151 , 9 @ @ public class NativeLibrary { <nl> } <nl> } <nl> <nl> + 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 System . out . println ( " Adding paths from jna . library . path : " + System . getProperty ( " jna . library . path " ) ) ; <nl> + 	 } <nl> searchPath . addAll ( initPaths ( " jna . library . path " ) ) ; <nl> String libraryPath = findLibraryPath ( libraryName , searchPath ) ; <nl> long handle = 0 ; <nl> @ @ - 153 , 15 + 163 , 24 @ @ public class NativeLibrary { <nl> / / name if it cannot find the library . <nl> / / <nl> try { <nl> + 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 System . out . println ( " Trying " + libraryPath ) ; <nl> + 	 } <nl> handle = Native . open ( libraryPath , openFlags ) ; <nl> } <nl> catch ( UnsatisfiedLinkError e ) { <nl> / / Add the system paths back for all fallback searching <nl> + 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 System . out . println ( " Adding system paths : " + librarySearchPath ) ; <nl> + 	 } <nl> searchPath . addAll ( librarySearchPath ) ; <nl> } <nl> try { <nl> if ( handle = = 0 ) { <nl> libraryPath = findLibraryPath ( libraryName , searchPath ) ; <nl> + 	 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 System . out . println ( " Trying " + libraryPath ) ; <nl> + 	 	 } <nl> handle = Native . open ( libraryPath , openFlags ) ; <nl> if ( handle = = 0 ) { <nl> throw new UnsatisfiedLinkError ( " Failed to load library ' " + libraryName + " ' " ) ; <nl> @ @ - 174 , 6 + 193 , 9 @ @ public class NativeLibrary { <nl> / / path , not found in any properties <nl> if ( Platform . isAndroid ( ) ) { <nl> try { <nl> + 	 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 	 System . out . println ( " Preload ( via System . loadLibrary ) " + libraryName ) ; <nl> + 	 	 } <nl> System . loadLibrary ( libraryName ) ; <nl> handle = Native . open ( libraryPath , openFlags ) ; <nl> } <nl> @ @ - 183 , 9 + 205 , 15 @ @ public class NativeLibrary { <nl> / / <nl> / / Failed to load the library normally - try to match libfoo . so . * <nl> / / <nl> + 	 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 System . out . println ( " Looking for version variants " ) ; <nl> + 	 	 } <nl> libraryPath = matchLibrary ( libraryName , searchPath ) ; <nl> if ( libraryPath ! = null ) { <nl> - try { <nl> + 	 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 	 System . out . println ( " Trying " + libraryPath ) ; <nl> + 	 	 } <nl> + 	 	 try { <nl> handle = Native . open ( libraryPath , openFlags ) ; <nl> } <nl> catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } <nl> @ @ - 194 , 9 + 222 , 15 @ @ public class NativeLibrary { <nl> / / Search framework libraries on OS X <nl> else if ( Platform . isMac ( ) <nl> & & ! libraryName . endsWith ( " . dylib " ) ) { <nl> + 	 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 System . out . println ( " Looking for matching frameworks " ) ; <nl> + 	 	 } <nl> libraryPath = matchFramework ( libraryName ) ; <nl> if ( libraryPath ! = null ) { <nl> try { <nl> + 	 	 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 	 System . out . println ( " Trying " + libraryPath ) ; <nl> + 	 	 	 } <nl> handle = Native . open ( libraryPath , openFlags ) ; <nl> } <nl> catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } <nl> @ @ - 204 , 9 + 238 , 17 @ @ public class NativeLibrary { <nl> } <nl> / / Try the same library with a " lib " prefix <nl> else if ( Platform . isWindows ( ) & & ! isAbsolutePath ) { <nl> + 	 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 System . out . println ( " Looking for lib - prefix " ) ; <nl> + 	 	 } <nl> libraryPath = findLibraryPath ( " lib " + libraryName , searchPath ) ; <nl> - try { handle = Native . open ( libraryPath , openFlags ) ; } <nl> - catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } <nl> + 	 	 if ( libraryPath ! = null ) { <nl> + 	 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 	 	 System . out . println ( " Trying " + libraryPath ) ; <nl> + 	 	 } <nl> + 	 	 try { handle = Native . open ( libraryPath , openFlags ) ; } <nl> + 	 	 catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } <nl> + 	 	 } <nl> } <nl> / / As a last resort , try to extract the library from the class <nl> / / path , using the current context class loader . <nl> @ @ - 227 , 6 + 269 , 9 @ @ public class NativeLibrary { <nl> + e . getMessage ( ) ) ; <nl> } <nl> } <nl> + 	 if ( Native . DEBUG _ LOAD ) { <nl> + 	 System . out . println ( " Found library ' " + libraryName + " ' at " + libraryPath ) ; <nl> + 	 } <nl> return new NativeLibrary ( libraryName , libraryPath , handle , options ) ; <nl> } <nl> <nl> diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java <nl> index 16a654c . . 415eecb 100644 <nl> - - - a / test / com / sun / jna / LibraryLoadTest . java <nl> + + + b / test / com / sun / jna / LibraryLoadTest . java <nl> @ @ - 143 , 9 + 143 , 6 @ @ public class LibraryLoadTest extends TestCase implements Paths { <nl> File tmpdir = Native . getTempDir ( ) ; <nl> String libName = NativeLibrary . mapSharedLibraryName ( " testlib " ) ; <nl> File src = new File ( TESTPATH , libName ) ; <nl> - if ( Platform . isWindowsCE ( ) ) { <nl> - src = new File ( " / Storage Card " , libName ) ; <nl> - } <nl> assertTrue ( " Expected JNA native library at " + src + " is missing " , src . exists ( ) ) ; <nl> <nl> final String UNICODE = " \ u0444 \ u043b \ u0441 \ u0432 \ u0443 " ;
NEAREST DIFF (one line): diff - - git a / native / Makefile b / native / Makefile <nl> old mode 100755 <nl> new mode 100644 <nl> diff - - git a / pom - jna . xml b / pom - jna . xml <nl> old mode 100755 <nl> new mode 100644 <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> old mode 100755 <nl> new mode 100644

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index a39f4d7 . . 9e90967 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 9 , 26 + 9 , 27 @ @ Features 
 * Added ASL licensing to facilitate distribution - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 109 ] ( https : / / github . com / twall / jna / issues / 109 ) : Set default Java compatibility level to 1 . 6 - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 209 ] ( https : / / github . com / twall / jna / issues / 209 ) : Improved default performance saving last error results - [ @ twall ] ( https : / / github . com / twall ) . 
 - * Used predictable names for CPU architecture prefix ( namely x86 , x86 - 64 ) ; names correspond to OSGI processor values - [ @ twall ] ( https : / / github . com / twall ) . 
 - * Avoided superfluous Structure memory allocation from native - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Use predictable names for CPU architecture prefix ( namely x86 , x86 - 64 ) ; names correspond to OSGI processor values - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Avoid superfluous Structure memory allocation from native - [ @ twall ] ( https : / / github . com / twall ) . 
 * Added ` Library . OPTION _ CLASSLOADER ` , which enables loading native libraries from any class loader ( including JNA ' s native library ) . This enables parallel dependencies on JNA ( e . g . within a tomcat deployment without having to include JNA in the app server environment ) - [ @ twall ] ( https : / / github . com / twall ) . 
 - * Used per - library String encoding settings ( see ` Native . getDefaultStringEncoding ( ) ` and ` Structure . getStringEncoding ( ) ` ) - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Use per - library String encoding settings ( see ` Native . getDefaultStringEncoding ( ) ` and ` Structure . getStringEncoding ( ) ` ) - [ @ twall ] ( https : / / github . com / twall ) . 
 * Added memory dump for debugging ( see ` com . sun . jna . Memory ` ) - [ @ twall ] ( https : / / github . com / twall ) . 
 * Improved caching of Structure alignment , type mapping , and encoding information - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 225 ] ( https : / / github . com / twall / jna / pull / 225 ) : Added ` platform . win32 . Kernel32 . GetLogicalProcessorInformation ` and ` platform . win32 . Kernel32Util . getLogicalProcessorInformation ` - [ @ trejkaz ] ( https : / / github . com / trejkaz ) . 
 * [ # 236 ] ( https : / / github . com / twall / jna / issues / 236 ) : Auto - strip profiler native method prefix specified by ` jna . profiler . prefix ` , which defaults to $ $ YJP $ $ - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Added ` jna . debug _ load ` property to diagnose library loading issues - [ @ twall ] ( https : / / github . com / twall ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 * [ # 213 ] ( https : / / github . com / twall / jna / pull / 213 ) : Fixed ` Structure . toString ( ) ` not to dump memory when ` jna . dump _ memory ` is false - [ @ tomohiron ] ( https : / / github . com / tomohiron ) . 
 - * Used TLS to indicate callback detach state , to avoid any potential conflicts with last error storage - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Use dedicated TLS to indicate callback detach state , to avoid any potential conflicts with last error storage - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 173 ] ( https : / / github . com / twall / jna / issues / 173 ) : Fixed OSX 10 . 8 / Xcode 4 + builds , web start path with Oracle 1 . 7 JDK - [ @ mkjellman ] ( https : / / github . com / mkjellman ) . 
 * [ # 215 ] ( https : / / github . com / twall / jna / issues / 215 ) : Forced use of XSI ` strerror _ r ` on linux - [ LionelCons ] ( https : / / github . com / LionelCons ) . 
 * [ # 214 ] ( https : / / github . com / twall / jna / issues / 214 ) : Don ' t map library names when an absolute path is provided - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 218 ] ( https : / / github . com / twall / jna / issues / 218 ) : Explicitly handled broken Android ` SecurityManager ` implementation - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 223 ] ( https : / / github . com / twall / jna / issues / 223 ) : Fixed layout / size derivation for unions - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 229 ] ( https : / / github . com / twall / jna / issues / 229 ) : Added ` CreateProcessW ` ( Unicode version ) - [ @ twall ] ( https : / / github . com / twall ) . 
 - * Avoided solaris / x86 JVM bug w / library open flags - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Avoid solaris / x86 JVM bug w / library open flags - [ @ twall ] ( https : / / github . com / twall ) . 
 * Fixed NPE returning wide string from a direct - mapped function - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 237 ] ( https : / / github . com / twall / jna / issues / 237 ) : Fix LastErrorException / getLastError on AIX - [ @ skissane ] ( https : / / github . com / skissane ) . 
 
 diff - - git a / build . xml b / build . xml 
 index f1e9cda . . def7e45 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 764 , 7 + 764 , 7 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 < / jar > 
 < ! - - Ensure jar - based library is unavailable on FS - based class path - - > 
 < delete > 
 - < fileset dir = " $ { test . classes } " > 
 + < fileset dir = " $ { build } " > 
 < include name = " * * / * testlib - jar * " / > 
 < / fileset > 
 < / delete > 
 diff - - git a / native / callback . c b / native / callback . c 
 index 1ea941c . . 522dac0 100644 
 - - - a / native / callback . c 
 + + + b / native / callback . c 
 @ @ - 645 , 6 + 645 , 7 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 tls = get _ thread _ storage ( env ) ; 
 if ( tls ) { 
 strncpy ( tls - > name , args . name ? args . name : " < unconfigured native thread > " , sizeof ( tls - > name ) ) ; 
 + tls - > name [ sizeof ( tls - > name ) - 1 ] = 0 ; 
 tls - > detach = detach ; 
 tls - > jvm _ thread = JNI _ FALSE ; 
 } 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index 2d477ca . . 805115f 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 49 , 7 + 49 , 7 @ @ 
 # include < dlfcn . h > 
 # include < errno . h > 
 # define STRTYPE char * 
 - # define NAME2CSTR ( ENV , JSTR ) newCStringUTF8 ( ENV , JSTR ) 
 + # define NAME2CSTR ( ENV , JSTR ) newCString ( ENV , JSTR ) 
 # define DEFAULT _ LOAD _ OPTS ( RTLD _ LAZY | RTLD _ GLOBAL ) 
 # define LOAD _ LIBRARY ( NAME , OPTS ) dlopen ( NAME , OPTS ) 
 # define LOAD _ ERROR ( BUF , LEN ) ( snprintf ( BUF , LEN , " % s " , dlerror ( ) ) , BUF ) 
 @ @ - 276 , 6 + 276 , 8 @ @ static jfieldID FID _ Structure _ typeInfo ; 
 static jfieldID FID _ IntegerType _ value ; 
 static jfieldID FID _ PointerType _ pointer ; 
 
 + jstring fileEncoding ; 
 + 
 / * Forward declarations * / 
 static char * newCString ( JNIEnv * env , jstring jstr ) ; 
 static char * newCStringEncoding ( JNIEnv * env , jstring jstr , const char * encoding ) ; 
 @ @ - 290 , 7 + 292 , 7 @ @ static ffi _ type * getStructureType ( JNIEnv * , jobject ) ; 
 
 typedef void ( JNICALL * release _ t ) ( JNIEnv * , jarray , void * , jint ) ; 
 
 - # if 1 
 + # if 0 
 / * * Invokes System . err . println ( for debugging only ) . * / 
 void 
 println ( JNIEnv * env , const char * msg ) { 
 @ @ - 1233 , 22 + 1235 , 15 @ @ getBufferArray ( JNIEnv * env , jobject buf , 
 } 
 # endif / * NO _ NIO _ BUFFERS * / 
 
 - static const void * 
 - get _ system _ property ( JNIEnv * env , const char * name , jboolean wide ) { 
 + static jstring 
 + get _ system _ property ( JNIEnv * env , const char * name ) { 
 jclass classSystem = ( * env ) - > FindClass ( env , " java / lang / System " ) ; 
 if ( classSystem ! = NULL ) { 
 jmethodID mid = ( * env ) - > GetStaticMethodID ( env , classSystem , " getProperty " , 
 " ( Ljava / lang / String ; ) Ljava / lang / String ; " ) ; 
 if ( mid ! = NULL ) { 
 jstring propname = newJavaString ( env , name , CHARSET _ UTF8 ) ; 
 - jstring value = ( * env ) - > CallStaticObjectMethod ( env , classSystem , 
 - mid , propname ) ; 
 - if ( value ) { 
 - if ( wide ) { 
 - return newWideCString ( env , value ) ; 
 - } 
 - return newCStringUTF8 ( env , value ) ; 
 - } 
 + return ( * env ) - > CallStaticObjectMethod ( env , classSystem , mid , propname ) ; 
 } 
 } 
 return NULL ; 
 @ @ - 1383 , 6 + 1378 , 11 @ @ JNA _ init ( JNIEnv * env ) { 
 if ( ! LOAD _ FID ( env , FID _ Double _ value , classDouble , " value " , " D " ) ) 
 return " Double . value " ; 
 
 + fileEncoding = get _ system _ property ( env , " file . encoding " ) ; 
 + if ( fileEncoding ) { 
 + fileEncoding = ( * env ) - > NewGlobalRef ( env , fileEncoding ) ; 
 + } 
 + 
 return NULL ; 
 } 
 
 @ @ - 2837 , 8 + 2837 , 9 @ @ Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * env , jclass UNUSED ( classp ) , job 
 / / Use Unicode strings in case the path to the library includes non - ASCII 
 / / characters . 
 wchar _ t * path = L " jawt . dll " ; 
 - wchar _ t * prop = ( wchar _ t * ) get _ system _ property ( env , " java . home " , JNI _ TRUE ) ; 
 - if ( prop ! = NULL ) { 
 + jstring jprop = ( wchar _ t * ) get _ system _ property ( env , " java . home " ) ; 
 + if ( jprop ! = NULL ) { 
 + const wchar _ t * prop = newWideCString ( env , value ) ; 
 const wchar _ t * suffix = L " / bin / jawt . dll " ; 
 size _ t len = wcslen ( prop ) + wcslen ( suffix ) + 1 ; 
 path = ( wchar _ t * ) alloca ( len * sizeof ( wchar _ t ) ) ; 
 @ @ - 3067 , 6 + 3068 , 11 @ @ JNI _ OnUnload ( JavaVM * vm , void * UNUSED ( reserved ) ) { 
 } 
 } 
 
 + if ( fileEncoding ) { 
 + ( * env ) - > DeleteGlobalRef ( env , fileEncoding ) ; 
 + fileEncoding = NULL ; 
 + } 
 + 
 for ( i = 0 ; i < sizeof ( refs ) / sizeof ( refs [ 0 ] ) ; i + + ) { 
 if ( * refs [ i ] ) { 
 ( * env ) - > DeleteWeakGlobalRef ( env , * refs [ i ] ) ; 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index f377a4f . . 180477a 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 92 , 6 + 92 , 8 @ @ import com . sun . jna . Structure . FFIType ; 
 public final class Native implements Version { 
 
 public static final String DEFAULT _ ENCODING = " utf8 " ; 
 + static final boolean DEBUG _ LOAD = Boolean . getBoolean ( " jna . debug _ load " ) ; 
 + static final boolean DEBUG _ JNA _ LOAD = Boolean . getBoolean ( " jna . debug _ load . jna " ) ; 
 
 / / Used by tests , do not remove 
 private static String nativeLibraryPath = null ; 
 @ @ - 660 , 8 + 662 , 14 @ @ public final class Native implements Version { 
 String dir = dirs . nextToken ( ) ; 
 File file = new File ( new File ( dir ) , System . mapLibraryName ( libName ) . replace ( " . dylib " , " . jnilib " ) ) ; 
 String path = file . getAbsolutePath ( ) ; 
 + 	 	 if ( DEBUG _ JNA _ LOAD ) { 
 + 	 	 System . out . println ( " Looking in " + path ) ; 
 + 	 	 } 
 if ( file . exists ( ) ) { 
 try { 
 + 	 	 	 if ( DEBUG _ JNA _ LOAD ) { 
 + 	 	 	 System . out . println ( " Trying " + path ) ; 
 + 	 	 	 } 
 System . load ( path ) ; 
 nativeLibraryPath = path ; 
 return ; 
 @ @ - 681 , 8 + 689 , 14 @ @ public final class Native implements Version { 
 ext = " dylib " ; 
 } 
 path = path . substring ( 0 , path . lastIndexOf ( orig ) ) + ext ; 
 + 	 	 if ( DEBUG _ JNA _ LOAD ) { 
 + 	 	 	 System . out . println ( " Looking in " + path ) ; 
 + 	 	 } 
 if ( new File ( path ) . exists ( ) ) { 
 try { 
 + 	 	 	 if ( DEBUG _ JNA _ LOAD ) { 
 + 	 	 	 	 System . out . println ( " Trying " + path ) ; 
 + 	 	 	 } 
 System . load ( path ) ; 
 nativeLibraryPath = path ; 
 return ; 
 @ @ - 695 , 6 + 709 , 9 @ @ public final class Native implements Version { 
 } 
 if ( ! Boolean . getBoolean ( " jna . nosys " ) ) { 
 try { 
 + 	 	 if ( DEBUG _ JNA _ LOAD ) { 
 + 	 	 System . out . println ( " Trying ( via loadLibrary ) " + libName ) ; 
 + 	 	 } 
 System . loadLibrary ( libName ) ; 
 return ; 
 } 
 @ @ - 723 , 7 + 740 , 10 @ @ public final class Native implements Version { 
 throw new UnsatisfiedLinkError ( " Could not find JNA native support " ) ; 
 } 
 } 
 - System . load ( lib . getAbsolutePath ( ) ) ; 
 + 	 if ( DEBUG _ JNA _ LOAD ) { 
 + 	 	 System . out . println ( " Trying " + lib . getAbsolutePath ( ) ) ; 
 + 	 } 
 + 	 System . load ( lib . getAbsolutePath ( ) ) ; 
 nativeLibraryPath = lib . getAbsolutePath ( ) ; 
 / / Attempt to delete immediately once jnidispatch is successfully 
 / / loaded . This avoids the complexity of trying to do so on " exit " , 
 @ @ - 778 , 6 + 798 , 9 @ @ public final class Native implements Version { 
 loader = Native . class . getClassLoader ( ) ; 
 } 
 } 
 + 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 System . out . println ( " Looking in classpath from " + loader + " for " + name ) ; 
 + 	 } 
 String libname = name . startsWith ( " / " ) ? name : NativeLibrary . mapSharedLibraryName ( name ) ; 
 String resourcePath = name . startsWith ( " / " ) ? name : Platform . RESOURCE _ PREFIX + " / " + libname ; 
 if ( resourcePath . startsWith ( " / " ) ) { 
 @ @ - 804 , 11 + 827 , 18 @ @ public final class Native implements Version { 
 catch ( URISyntaxException e ) { 
 lib = new File ( url . getPath ( ) ) ; 
 } 
 + 	 if ( DEBUG _ LOAD ) { 
 + 	 	 System . out . println ( " Looking in " + lib . getAbsolutePath ( ) ) ; 
 + 	 } 
 if ( ! lib . exists ( ) ) { 
 throw new IOException ( " File URL " + url + " could not be properly decoded " ) ; 
 } 
 } 
 else if ( ! Boolean . getBoolean ( " jna . nounpack " ) ) { 
 + 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 System . out . println ( " Looking in " + resourcePath ) ; 
 + 	 } 
 + 	 
 InputStream is = loader . getResourceAsStream ( resourcePath ) ; 
 if ( is = = null ) { 
 throw new IOException ( " Can ' t obtain InputStream for " + resourcePath ) ; 
 diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java 
 index 655c141 . . 009ae75 100644 
 - - - a / src / com / sun / jna / NativeLibrary . java 
 + + + b / src / com / sun / jna / NativeLibrary . java 
 @ @ - 123 , 6 + 123 , 10 @ @ public class NativeLibrary { 
 } 
 
 private static NativeLibrary loadLibrary ( String libraryName , Map options ) { 
 + 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 System . out . println ( " Looking for library ' " + libraryName + " ' " ) ; 
 + 	 } 
 + 
 boolean isAbsolutePath = new File ( libraryName ) . isAbsolute ( ) ; 
 List searchPath = new LinkedList ( ) ; 
 int openFlags = openFlags ( options ) ; 
 @ @ - 131 , 6 + 135 , 9 @ @ public class NativeLibrary { 
 / / attempt any library name variations 
 String webstartPath = Native . getWebStartLibraryPath ( libraryName ) ; 
 if ( webstartPath ! = null ) { 
 + 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 System . out . println ( " Adding web start path " + webstartPath ) ; 
 + 	 } 
 searchPath . add ( webstartPath ) ; 
 } 
 
 @ @ - 144 , 6 + 151 , 9 @ @ public class NativeLibrary { 
 } 
 } 
 
 + 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 System . out . println ( " Adding paths from jna . library . path : " + System . getProperty ( " jna . library . path " ) ) ; 
 + 	 } 
 searchPath . addAll ( initPaths ( " jna . library . path " ) ) ; 
 String libraryPath = findLibraryPath ( libraryName , searchPath ) ; 
 long handle = 0 ; 
 @ @ - 153 , 15 + 163 , 24 @ @ public class NativeLibrary { 
 / / name if it cannot find the library . 
 / / 
 try { 
 + 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 System . out . println ( " Trying " + libraryPath ) ; 
 + 	 } 
 handle = Native . open ( libraryPath , openFlags ) ; 
 } 
 catch ( UnsatisfiedLinkError e ) { 
 / / Add the system paths back for all fallback searching 
 + 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 System . out . println ( " Adding system paths : " + librarySearchPath ) ; 
 + 	 } 
 searchPath . addAll ( librarySearchPath ) ; 
 } 
 try { 
 if ( handle = = 0 ) { 
 libraryPath = findLibraryPath ( libraryName , searchPath ) ; 
 + 	 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 System . out . println ( " Trying " + libraryPath ) ; 
 + 	 	 } 
 handle = Native . open ( libraryPath , openFlags ) ; 
 if ( handle = = 0 ) { 
 throw new UnsatisfiedLinkError ( " Failed to load library ' " + libraryName + " ' " ) ; 
 @ @ - 174 , 6 + 193 , 9 @ @ public class NativeLibrary { 
 / / path , not found in any properties 
 if ( Platform . isAndroid ( ) ) { 
 try { 
 + 	 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 	 System . out . println ( " Preload ( via System . loadLibrary ) " + libraryName ) ; 
 + 	 	 } 
 System . loadLibrary ( libraryName ) ; 
 handle = Native . open ( libraryPath , openFlags ) ; 
 } 
 @ @ - 183 , 9 + 205 , 15 @ @ public class NativeLibrary { 
 / / 
 / / Failed to load the library normally - try to match libfoo . so . * 
 / / 
 + 	 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 System . out . println ( " Looking for version variants " ) ; 
 + 	 	 } 
 libraryPath = matchLibrary ( libraryName , searchPath ) ; 
 if ( libraryPath ! = null ) { 
 - try { 
 + 	 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 	 System . out . println ( " Trying " + libraryPath ) ; 
 + 	 	 } 
 + 	 	 try { 
 handle = Native . open ( libraryPath , openFlags ) ; 
 } 
 catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } 
 @ @ - 194 , 9 + 222 , 15 @ @ public class NativeLibrary { 
 / / Search framework libraries on OS X 
 else if ( Platform . isMac ( ) 
 & & ! libraryName . endsWith ( " . dylib " ) ) { 
 + 	 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 System . out . println ( " Looking for matching frameworks " ) ; 
 + 	 	 } 
 libraryPath = matchFramework ( libraryName ) ; 
 if ( libraryPath ! = null ) { 
 try { 
 + 	 	 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 	 System . out . println ( " Trying " + libraryPath ) ; 
 + 	 	 	 } 
 handle = Native . open ( libraryPath , openFlags ) ; 
 } 
 catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } 
 @ @ - 204 , 9 + 238 , 17 @ @ public class NativeLibrary { 
 } 
 / / Try the same library with a " lib " prefix 
 else if ( Platform . isWindows ( ) & & ! isAbsolutePath ) { 
 + 	 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 System . out . println ( " Looking for lib - prefix " ) ; 
 + 	 	 } 
 libraryPath = findLibraryPath ( " lib " + libraryName , searchPath ) ; 
 - try { handle = Native . open ( libraryPath , openFlags ) ; } 
 - catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } 
 + 	 	 if ( libraryPath ! = null ) { 
 + 	 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 	 	 System . out . println ( " Trying " + libraryPath ) ; 
 + 	 	 } 
 + 	 	 try { handle = Native . open ( libraryPath , openFlags ) ; } 
 + 	 	 catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } 
 + 	 	 } 
 } 
 / / As a last resort , try to extract the library from the class 
 / / path , using the current context class loader . 
 @ @ - 227 , 6 + 269 , 9 @ @ public class NativeLibrary { 
 + e . getMessage ( ) ) ; 
 } 
 } 
 + 	 if ( Native . DEBUG _ LOAD ) { 
 + 	 System . out . println ( " Found library ' " + libraryName + " ' at " + libraryPath ) ; 
 + 	 } 
 return new NativeLibrary ( libraryName , libraryPath , handle , options ) ; 
 } 
 
 diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java 
 index 16a654c . . 415eecb 100644 
 - - - a / test / com / sun / jna / LibraryLoadTest . java 
 + + + b / test / com / sun / jna / LibraryLoadTest . java 
 @ @ - 143 , 9 + 143 , 6 @ @ public class LibraryLoadTest extends TestCase implements Paths { 
 File tmpdir = Native . getTempDir ( ) ; 
 String libName = NativeLibrary . mapSharedLibraryName ( " testlib " ) ; 
 File src = new File ( TESTPATH , libName ) ; 
 - if ( Platform . isWindowsCE ( ) ) { 
 - src = new File ( " / Storage Card " , libName ) ; 
 - } 
 assertTrue ( " Expected JNA native library at " + src + " is missing " , src . exists ( ) ) ; 
 
 final String UNICODE = " \ u0444 \ u043b \ u0441 \ u0432 \ u0443 " ;

NEAREST DIFF:
diff - - git a / native / Makefile b / native / Makefile 
 old mode 100755 
 new mode 100644 
 diff - - git a / pom - jna . xml b / pom - jna . xml 
 old mode 100755 
 new mode 100644 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 old mode 100755 
 new mode 100644
