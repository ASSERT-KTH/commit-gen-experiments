BLEU SCORE: 0.08116697886877475

TEST MSG: Fix : Win32 unit tests .
GENERATED MSG: Revert further duplicated changes .

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> index e51c30a . . de69521 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> @ @ - 1600 , 7 + 1600 , 7 @ @ public abstract class Advapi32Util { <nl> 	 	 	 	 ArrayList < String > result = new ArrayList < String > ( ) ; <nl> 	 	 	 	 int offset = 0 ; <nl> 	 	 	 	 while ( offset < stringData . size ( ) ) { <nl> - 	 	 	 	 	 String s = stringData . getWideString ( 0 ) ; <nl> + 	 	 	 	 	 String s = stringData . getWideString ( offset ) ; <nl> 	 	 	 	 	 offset + = s . length ( ) * Native . WCHAR _ SIZE ; <nl> 	 	 	 	 	 offset + = Native . WCHAR _ SIZE ; <nl> 	 	 	 	 	 if ( s . length ( ) = = 0 & & offset = = stringData . size ( ) ) { <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> index d7851cd . . 91d83de 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> @ @ - 493 , 7 + 493 , 7 @ @ public class Kernel32Test extends TestCase { <nl> } <nl> <nl> public final void testGetPrivateProfileString ( ) throws IOException { <nl> - final File tmp = File . createTempFile ( " testGetPrivateProfileString " , " ini " ) ; <nl> + final File tmp = File . createTempFile ( " testGetPrivateProfileString " , " . ini " ) ; <nl> tmp . deleteOnExit ( ) ; <nl> final PrintWriter writer = new PrintWriter ( new BufferedWriter ( new FileWriter ( tmp ) ) ) ; <nl> writer . println ( " [ Section ] " ) ; <nl> @ @ - 501 , 12 + 501 , 18 @ @ public class Kernel32Test extends TestCase { <nl> writer . close ( ) ; <nl> <nl> final char [ ] buffer = new char [ 8 ] ; <nl> - assertEquals ( " ABC " , Kernel32 . INSTANCE . GetPrivateProfileString ( " Section " , " existingKey " , " DEF " , buffer , new DWORD ( buffer . length ) , tmp . getCanonicalPath ( ) ) ) ; <nl> - assertEquals ( " DEF " , Kernel32 . INSTANCE . GetPrivateProfileString ( " Section " , " missingKey " , " DEF " , buffer , new DWORD ( buffer . length ) , tmp . getCanonicalPath ( ) ) ) ; <nl> + <nl> + DWORD len = Kernel32 . INSTANCE . GetPrivateProfileString ( " Section " , " existingKey " , " DEF " , buffer , new DWORD ( buffer . length ) , tmp . getCanonicalPath ( ) ) ; <nl> + assertEquals ( 3 , len . intValue ( ) ) ; <nl> + assertEquals ( " ABC " , Native . toString ( buffer ) ) ; <nl> + <nl> + len = Kernel32 . INSTANCE . GetPrivateProfileString ( " Section " , " missingKey " , " DEF " , buffer , new DWORD ( buffer . length ) , tmp . getCanonicalPath ( ) ) ; <nl> + assertEquals ( 3 , len . intValue ( ) ) ; <nl> + assertEquals ( " DEF " , Native . toString ( buffer ) ) ; <nl> } <nl> <nl> public final void testWritePrivateProfileString ( ) throws IOException { <nl> - final File tmp = File . createTempFile ( " testWritePrivateProfileString " , " ini " ) ; <nl> + final File tmp = File . createTempFile ( " testWritePrivateProfileString " , " . ini " ) ; <nl> tmp . deleteOnExit ( ) ; <nl> final PrintWriter writer = new PrintWriter ( new BufferedWriter ( new FileWriter ( tmp ) ) ) ; <nl> writer . println ( " [ Section ] " ) ;
NEAREST DIFF (one line): diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java <nl> index bce4ce4 . . f3ec1fa 100644 <nl> - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java <nl> + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java <nl> @ @ - 735 , 13 + 735 , 107 @ @ public interface User32 extends StdCallLibrary { <nl> 	 * / <nl> 	 public int GetSystemMetrics ( int nIndex ) ; <nl> <nl> - / / Nuix additions follow . TODO : Need docs . <nl> + / * * <nl> + * Changes the parent window of the specified child window . <nl> + * <nl> + * @ param hWndChild <nl> + * A handle to the child window . <nl> + * <nl> + * @ param hWndNewParent <nl> + * A handle to the new parent window . If this parameter is NULL , the desktop window becomes the new parent <nl> + * window . If this parameter is HWND _ MESSAGE , the child window becomes a message - only window . <nl> + * <nl> + * @ return <nl> + 	 * If the function succeeds , the return value is nonzero . <nl> + * <nl> + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . <nl> + * / <nl> HWND SetParent ( HWND hWndChild , HWND hWndNewParent ) ; <nl> + <nl> + / * * <nl> + * Determines the visibility state of the specified window . <nl> + * <nl> + * @ param hWnd <nl> + * A handle to the window to be tested . <nl> + * <nl> + * @ return <nl> + * If the specified window , its parent window , its parent ' s parent window , and so forth , have the WS _ VISIBLE <nl> + * style , the return value is nonzero . Otherwise , the return value is zero . <nl> + * <nl> + * Because the return value specifies whether the window has the WS _ VISIBLE style , it may be nonzero even if the <nl> + * window is totally obscured by other windows . <nl> + * / <nl> boolean IsWindowVisible ( HWND hWnd ) ; <nl> <nl> + / * * <nl> + * Retains the current Z order ( ignores the hWndInsertAfter parameter ) . <nl> + * / <nl> int SWP _ NOZORDER = 0x0004 ; <nl> <nl> + / * * <nl> + * Changes the position and dimensions of the specified window . For a top - level window , the position and dimensions <nl> + * are relative to the upper - left corner of the screen . For a child window , they are relative to the upper - left <nl> + * corner of the parent window ' s client area . <nl> + * <nl> + * @ param hWnd <nl> + * A handle to the window . <nl> + * <nl> + * @ param X <nl> + * The new position of the left side of the window . <nl> + * <nl> + * @ param Y <nl> + * The new position of the top of the window . <nl> + * <nl> + * @ param nWidth <nl> + * The new width of the window . <nl> + * <nl> + * @ param nHeight <nl> + * The new height of the window . <nl> + * <nl> + * @ param bRepaint <nl> + * Indicates whether the window is to be repainted . If this parameter is TRUE , the window receives a message . If <nl> + * the parameter is FALSE , no repainting of any kind occurs . This applies to the client area , the nonclient area <nl> + * ( including the title bar and scroll bars ) , and any part of the parent window uncovered as a result of moving <nl> + * a child window . <nl> + * <nl> + * @ return <nl> + 	 * If the function succeeds , the return value is nonzero . <nl> + * <nl> + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . <nl> + * / <nl> boolean MoveWindow ( HWND hWnd , int X , int Y , int nWidth , int nHeight , boolean bRepaint ) ; <nl> + <nl> + / * * <nl> + * Changes the size , position , and Z order of a child , pop - up , or top - level window . These windows are ordered <nl> + * according to their appearance on the screen . The topmost window receives the highest rank and is the first window <nl> + * in the Z order . <nl> + * <nl> + * @ param hWnd <nl> + * A handle to the window . <nl> + * <nl> + * @ param hWndInsertAfter <nl> + * A handle to the window to precede the positioned window in the Z order . <nl> + * <nl> + * @ param X <nl> + * The new position of the left side of the window , in client coordinates . <nl> + * <nl> + * @ param Y <nl> + * The new position of the top of the window , in client coordinates . <nl> + * <nl> + * @ param cx <nl> + * The new width of the window , in pixels . <nl> + * <nl> + * @ param cy <nl> + * The new height of the window , in pixels . <nl> + * <nl> + * @ param uFlags <nl> + * The window sizing and positioning flags . <nl> + * <nl> + * @ return <nl> + 	 * If the function succeeds , the return value is nonzero . <nl> + * <nl> + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . <nl> + * / <nl> boolean SetWindowPos ( HWND hWnd , HWND hWndInsertAfter , int X , int Y , int cx , int cy , int uFlags ) ; <nl> <nl> / * * <nl> @ @ - 1070 , 6 + 1164 , 35 @ @ public interface User32 extends StdCallLibrary { <nl> * / <nl> int SC _ MAXIMIZE = 0xF030 ; <nl> <nl> + / * * <nl> + * Sets the specified window ' s show state . <nl> + * <nl> + * @ param hWnd <nl> + * A handle to the window . <nl> + * <nl> + * @ param nCmdShow <nl> + * Controls how the window is to be shown . This parameter is ignored the first time an application calls <nl> + * ShowWindow , if the program that launched the application provides a STARTUPINFO structure . Otherwise , the <nl> + * first time ShowWindow is called , the value should be the value obtained by the WinMain function in its <nl> + * nCmdShow parameter . <nl> + * <nl> + * @ return <nl> + 	 * If the function succeeds , the return value is nonzero . <nl> + * <nl> + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . <nl> + * / <nl> boolean ShowWindow ( HWND hWnd , int nCmdShow ) ; <nl> + <nl> + / * * <nl> + * Minimizes ( but does not destroy ) the specified window . <nl> + * <nl> + * @ param hWnd <nl> + * A handle to the window to be minimized . <nl> + * <nl> + * @ return <nl> + 	 * If the function succeeds , the return value is nonzero . <nl> + * <nl> + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . <nl> + * / <nl> boolean CloseWindow ( HWND hWnd ) ; <nl> }

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 index e51c30a . . de69521 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 @ @ - 1600 , 7 + 1600 , 7 @ @ public abstract class Advapi32Util { 
 	 	 	 	 ArrayList < String > result = new ArrayList < String > ( ) ; 
 	 	 	 	 int offset = 0 ; 
 	 	 	 	 while ( offset < stringData . size ( ) ) { 
 - 	 	 	 	 	 String s = stringData . getWideString ( 0 ) ; 
 + 	 	 	 	 	 String s = stringData . getWideString ( offset ) ; 
 	 	 	 	 	 offset + = s . length ( ) * Native . WCHAR _ SIZE ; 
 	 	 	 	 	 offset + = Native . WCHAR _ SIZE ; 
 	 	 	 	 	 if ( s . length ( ) = = 0 & & offset = = stringData . size ( ) ) { 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 index d7851cd . . 91d83de 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 @ @ - 493 , 7 + 493 , 7 @ @ public class Kernel32Test extends TestCase { 
 } 
 
 public final void testGetPrivateProfileString ( ) throws IOException { 
 - final File tmp = File . createTempFile ( " testGetPrivateProfileString " , " ini " ) ; 
 + final File tmp = File . createTempFile ( " testGetPrivateProfileString " , " . ini " ) ; 
 tmp . deleteOnExit ( ) ; 
 final PrintWriter writer = new PrintWriter ( new BufferedWriter ( new FileWriter ( tmp ) ) ) ; 
 writer . println ( " [ Section ] " ) ; 
 @ @ - 501 , 12 + 501 , 18 @ @ public class Kernel32Test extends TestCase { 
 writer . close ( ) ; 
 
 final char [ ] buffer = new char [ 8 ] ; 
 - assertEquals ( " ABC " , Kernel32 . INSTANCE . GetPrivateProfileString ( " Section " , " existingKey " , " DEF " , buffer , new DWORD ( buffer . length ) , tmp . getCanonicalPath ( ) ) ) ; 
 - assertEquals ( " DEF " , Kernel32 . INSTANCE . GetPrivateProfileString ( " Section " , " missingKey " , " DEF " , buffer , new DWORD ( buffer . length ) , tmp . getCanonicalPath ( ) ) ) ; 
 + 
 + DWORD len = Kernel32 . INSTANCE . GetPrivateProfileString ( " Section " , " existingKey " , " DEF " , buffer , new DWORD ( buffer . length ) , tmp . getCanonicalPath ( ) ) ; 
 + assertEquals ( 3 , len . intValue ( ) ) ; 
 + assertEquals ( " ABC " , Native . toString ( buffer ) ) ; 
 + 
 + len = Kernel32 . INSTANCE . GetPrivateProfileString ( " Section " , " missingKey " , " DEF " , buffer , new DWORD ( buffer . length ) , tmp . getCanonicalPath ( ) ) ; 
 + assertEquals ( 3 , len . intValue ( ) ) ; 
 + assertEquals ( " DEF " , Native . toString ( buffer ) ) ; 
 } 
 
 public final void testWritePrivateProfileString ( ) throws IOException { 
 - final File tmp = File . createTempFile ( " testWritePrivateProfileString " , " ini " ) ; 
 + final File tmp = File . createTempFile ( " testWritePrivateProfileString " , " . ini " ) ; 
 tmp . deleteOnExit ( ) ; 
 final PrintWriter writer = new PrintWriter ( new BufferedWriter ( new FileWriter ( tmp ) ) ) ; 
 writer . println ( " [ Section ] " ) ;

NEAREST DIFF:
diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java 
 index bce4ce4 . . f3ec1fa 100644 
 - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java 
 + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / User32 . java 
 @ @ - 735 , 13 + 735 , 107 @ @ public interface User32 extends StdCallLibrary { 
 	 * / 
 	 public int GetSystemMetrics ( int nIndex ) ; 
 
 - / / Nuix additions follow . TODO : Need docs . 
 + / * * 
 + * Changes the parent window of the specified child window . 
 + * 
 + * @ param hWndChild 
 + * A handle to the child window . 
 + * 
 + * @ param hWndNewParent 
 + * A handle to the new parent window . If this parameter is NULL , the desktop window becomes the new parent 
 + * window . If this parameter is HWND _ MESSAGE , the child window becomes a message - only window . 
 + * 
 + * @ return 
 + 	 * If the function succeeds , the return value is nonzero . 
 + * 
 + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . 
 + * / 
 HWND SetParent ( HWND hWndChild , HWND hWndNewParent ) ; 
 + 
 + / * * 
 + * Determines the visibility state of the specified window . 
 + * 
 + * @ param hWnd 
 + * A handle to the window to be tested . 
 + * 
 + * @ return 
 + * If the specified window , its parent window , its parent ' s parent window , and so forth , have the WS _ VISIBLE 
 + * style , the return value is nonzero . Otherwise , the return value is zero . 
 + * 
 + * Because the return value specifies whether the window has the WS _ VISIBLE style , it may be nonzero even if the 
 + * window is totally obscured by other windows . 
 + * / 
 boolean IsWindowVisible ( HWND hWnd ) ; 
 
 + / * * 
 + * Retains the current Z order ( ignores the hWndInsertAfter parameter ) . 
 + * / 
 int SWP _ NOZORDER = 0x0004 ; 
 
 + / * * 
 + * Changes the position and dimensions of the specified window . For a top - level window , the position and dimensions 
 + * are relative to the upper - left corner of the screen . For a child window , they are relative to the upper - left 
 + * corner of the parent window ' s client area . 
 + * 
 + * @ param hWnd 
 + * A handle to the window . 
 + * 
 + * @ param X 
 + * The new position of the left side of the window . 
 + * 
 + * @ param Y 
 + * The new position of the top of the window . 
 + * 
 + * @ param nWidth 
 + * The new width of the window . 
 + * 
 + * @ param nHeight 
 + * The new height of the window . 
 + * 
 + * @ param bRepaint 
 + * Indicates whether the window is to be repainted . If this parameter is TRUE , the window receives a message . If 
 + * the parameter is FALSE , no repainting of any kind occurs . This applies to the client area , the nonclient area 
 + * ( including the title bar and scroll bars ) , and any part of the parent window uncovered as a result of moving 
 + * a child window . 
 + * 
 + * @ return 
 + 	 * If the function succeeds , the return value is nonzero . 
 + * 
 + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . 
 + * / 
 boolean MoveWindow ( HWND hWnd , int X , int Y , int nWidth , int nHeight , boolean bRepaint ) ; 
 + 
 + / * * 
 + * Changes the size , position , and Z order of a child , pop - up , or top - level window . These windows are ordered 
 + * according to their appearance on the screen . The topmost window receives the highest rank and is the first window 
 + * in the Z order . 
 + * 
 + * @ param hWnd 
 + * A handle to the window . 
 + * 
 + * @ param hWndInsertAfter 
 + * A handle to the window to precede the positioned window in the Z order . 
 + * 
 + * @ param X 
 + * The new position of the left side of the window , in client coordinates . 
 + * 
 + * @ param Y 
 + * The new position of the top of the window , in client coordinates . 
 + * 
 + * @ param cx 
 + * The new width of the window , in pixels . 
 + * 
 + * @ param cy 
 + * The new height of the window , in pixels . 
 + * 
 + * @ param uFlags 
 + * The window sizing and positioning flags . 
 + * 
 + * @ return 
 + 	 * If the function succeeds , the return value is nonzero . 
 + * 
 + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . 
 + * / 
 boolean SetWindowPos ( HWND hWnd , HWND hWndInsertAfter , int X , int Y , int cx , int cy , int uFlags ) ; 
 
 / * * 
 @ @ - 1070 , 6 + 1164 , 35 @ @ public interface User32 extends StdCallLibrary { 
 * / 
 int SC _ MAXIMIZE = 0xF030 ; 
 
 + / * * 
 + * Sets the specified window ' s show state . 
 + * 
 + * @ param hWnd 
 + * A handle to the window . 
 + * 
 + * @ param nCmdShow 
 + * Controls how the window is to be shown . This parameter is ignored the first time an application calls 
 + * ShowWindow , if the program that launched the application provides a STARTUPINFO structure . Otherwise , the 
 + * first time ShowWindow is called , the value should be the value obtained by the WinMain function in its 
 + * nCmdShow parameter . 
 + * 
 + * @ return 
 + 	 * If the function succeeds , the return value is nonzero . 
 + * 
 + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . 
 + * / 
 boolean ShowWindow ( HWND hWnd , int nCmdShow ) ; 
 + 
 + / * * 
 + * Minimizes ( but does not destroy ) the specified window . 
 + * 
 + * @ param hWnd 
 + * A handle to the window to be minimized . 
 + * 
 + * @ return 
 + 	 * If the function succeeds , the return value is nonzero . 
 + * 
 + 	 * If the function fails , the return value is zero . To get extended error information , call GetLastError . 
 + * / 
 boolean CloseWindow ( HWND hWnd ) ; 
 }
