BLEU SCORE: 0.027611988917697356

TEST MSG: add extra args , triggering stdcall stack bug
GENERATED MSG: attempt to reproduce issue # 300

TEST DIFF (one line): diff - - git a / native / testlib . c b / native / testlib . c <nl> index 4c924da . . b68e61d 100644 <nl> - - - a / native / testlib . c <nl> + + + b / native / testlib . c <nl> @ @ - 947 , 18 + 947 , 20 @ @ callBugCallback ( void ( _ _ stdcall * func ) ( long , int , double , <nl> double , long , long , long ) , <nl> long arg1 , int arg2 , double arg3 , <nl> const char * arg4 , const char * arg5 , <nl> - double arg6 , long arg7 , long arg8 , long arg9 ) { <nl> + double arg6 , long arg7 , <nl> + double arg8 , long arg9 , <nl> + long arg10 , long arg11 ) { <nl> void * sp1 = NULL ; <nl> void * sp2 = NULL ; <nl> int value = - 1 ; <nl> <nl> # if defined ( _ MSC _ VER ) <nl> _ _ asm mov sp1 , esp ; <nl> - ( * func ) ( arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 ) ; <nl> + ( * func ) ( arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , arg10 , arg11 ) ; <nl> _ _ asm mov sp2 , esp ; <nl> # elif defined ( _ _ GNUC _ _ ) <nl> asm volatile ( " movl % % esp , % 0 " : " = g " ( sp1 ) ) ; <nl> - ( * func ) ( arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 ) ; <nl> + ( * func ) ( arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , arg10 , arg11 ) ; <nl> asm volatile ( " movl % % esp , % 0 " : " = g " ( sp2 ) ) ; <nl> # endif <nl> <nl> diff - - git a / test / com / sun / jna / win32 / W32StdCallTest . java b / test / com / sun / jna / win32 / W32StdCallTest . java <nl> index c09e1ce . . 087f3d2 100644 <nl> - - - a / test / com / sun / jna / win32 / W32StdCallTest . java <nl> + + + b / test / com / sun / jna / win32 / W32StdCallTest . java <nl> @ @ - 57 , 13 + 57 , 16 @ @ public class W32StdCallTest extends TestCase { <nl> int callInt32StdCallCallback ( Int32Callback c , int arg , int arg2 ) ; <nl> interface BugCallback extends StdCallCallback { <nl> void callback ( NativeLong arg1 , int arg2 , double arg3 , <nl> - String arg4 , String arg5 , double arg6 , <nl> - NativeLong arg7 , NativeLong arg8 , NativeLong arg9 ) ; <nl> + String arg4 , String arg5 , <nl> + double arg6 , NativeLong arg7 , <nl> + double arg8 , NativeLong arg9 , <nl> + NativeLong arg10 , NativeLong arg11 ) ; <nl> } <nl> int callBugCallback ( BugCallback c , NativeLong arg1 , int arg2 , <nl> double arg3 , String arg4 , String arg5 , <nl> double arg6 , NativeLong arg7 , <nl> - NativeLong arg8 , NativeLong arg9 ) ; <nl> + double arg8 , NativeLong arg9 , <nl> + NativeLong arg10 , NativeLong arg11 ) ; <nl> } <nl> <nl> public static void main ( java . lang . String [ ] argList ) { <nl> @ @ - 151 , 17 + 154 , 19 @ @ public class W32StdCallTest extends TestCase { <nl> final boolean [ ] called = { false } ; <nl> TestLibrary . BugCallback cb = new TestLibrary . BugCallback ( ) { <nl> public void callback ( NativeLong arg1 , int arg2 , double arg3 , <nl> - String arg4 , String arg5 , double arg6 , <nl> - NativeLong arg7 , NativeLong arg8 , <nl> - NativeLong arg9 ) { <nl> + String arg4 , String arg5 , <nl> + double arg6 , NativeLong arg7 , <nl> + double arg8 , NativeLong arg9 , <nl> + NativeLong arg10 , NativeLong arg11 ) { <nl> called [ 0 ] = true ; <nl> } <nl> } ; <nl> int value = testlib . callBugCallback ( cb , new NativeLong ( 1 ) , <nl> - 2 , 3 , " four " , " five " , 6 , <nl> - new NativeLong ( 7 ) , <nl> - new NativeLong ( 8 ) , <nl> - new NativeLong ( 9 ) ) ; <nl> + 2 , 3 , " four " , " five " , <nl> + 6 , new NativeLong ( 7 ) , <nl> + 8 , new NativeLong ( 9 ) , <nl> + new NativeLong ( 10 ) , <nl> + new NativeLong ( 11 ) ) ; <nl> assertTrue ( " stdcall callback not called " , called [ 0 ] ) ; <nl> if ( value = = - 1 ) { <nl> fail ( " stdcall callback did not restore the stack pointer " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / native / testlib . c b / native / testlib . c 
 index 4c924da . . b68e61d 100644 
 - - - a / native / testlib . c 
 + + + b / native / testlib . c 
 @ @ - 947 , 18 + 947 , 20 @ @ callBugCallback ( void ( _ _ stdcall * func ) ( long , int , double , 
 double , long , long , long ) , 
 long arg1 , int arg2 , double arg3 , 
 const char * arg4 , const char * arg5 , 
 - double arg6 , long arg7 , long arg8 , long arg9 ) { 
 + double arg6 , long arg7 , 
 + double arg8 , long arg9 , 
 + long arg10 , long arg11 ) { 
 void * sp1 = NULL ; 
 void * sp2 = NULL ; 
 int value = - 1 ; 
 
 # if defined ( _ MSC _ VER ) 
 _ _ asm mov sp1 , esp ; 
 - ( * func ) ( arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 ) ; 
 + ( * func ) ( arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , arg10 , arg11 ) ; 
 _ _ asm mov sp2 , esp ; 
 # elif defined ( _ _ GNUC _ _ ) 
 asm volatile ( " movl % % esp , % 0 " : " = g " ( sp1 ) ) ; 
 - ( * func ) ( arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 ) ; 
 + ( * func ) ( arg1 , arg2 , arg3 , arg4 , arg5 , arg6 , arg7 , arg8 , arg9 , arg10 , arg11 ) ; 
 asm volatile ( " movl % % esp , % 0 " : " = g " ( sp2 ) ) ; 
 # endif 
 
 diff - - git a / test / com / sun / jna / win32 / W32StdCallTest . java b / test / com / sun / jna / win32 / W32StdCallTest . java 
 index c09e1ce . . 087f3d2 100644 
 - - - a / test / com / sun / jna / win32 / W32StdCallTest . java 
 + + + b / test / com / sun / jna / win32 / W32StdCallTest . java 
 @ @ - 57 , 13 + 57 , 16 @ @ public class W32StdCallTest extends TestCase { 
 int callInt32StdCallCallback ( Int32Callback c , int arg , int arg2 ) ; 
 interface BugCallback extends StdCallCallback { 
 void callback ( NativeLong arg1 , int arg2 , double arg3 , 
 - String arg4 , String arg5 , double arg6 , 
 - NativeLong arg7 , NativeLong arg8 , NativeLong arg9 ) ; 
 + String arg4 , String arg5 , 
 + double arg6 , NativeLong arg7 , 
 + double arg8 , NativeLong arg9 , 
 + NativeLong arg10 , NativeLong arg11 ) ; 
 } 
 int callBugCallback ( BugCallback c , NativeLong arg1 , int arg2 , 
 double arg3 , String arg4 , String arg5 , 
 double arg6 , NativeLong arg7 , 
 - NativeLong arg8 , NativeLong arg9 ) ; 
 + double arg8 , NativeLong arg9 , 
 + NativeLong arg10 , NativeLong arg11 ) ; 
 } 
 
 public static void main ( java . lang . String [ ] argList ) { 
 @ @ - 151 , 17 + 154 , 19 @ @ public class W32StdCallTest extends TestCase { 
 final boolean [ ] called = { false } ; 
 TestLibrary . BugCallback cb = new TestLibrary . BugCallback ( ) { 
 public void callback ( NativeLong arg1 , int arg2 , double arg3 , 
 - String arg4 , String arg5 , double arg6 , 
 - NativeLong arg7 , NativeLong arg8 , 
 - NativeLong arg9 ) { 
 + String arg4 , String arg5 , 
 + double arg6 , NativeLong arg7 , 
 + double arg8 , NativeLong arg9 , 
 + NativeLong arg10 , NativeLong arg11 ) { 
 called [ 0 ] = true ; 
 } 
 } ; 
 int value = testlib . callBugCallback ( cb , new NativeLong ( 1 ) , 
 - 2 , 3 , " four " , " five " , 6 , 
 - new NativeLong ( 7 ) , 
 - new NativeLong ( 8 ) , 
 - new NativeLong ( 9 ) ) ; 
 + 2 , 3 , " four " , " five " , 
 + 6 , new NativeLong ( 7 ) , 
 + 8 , new NativeLong ( 9 ) , 
 + new NativeLong ( 10 ) , 
 + new NativeLong ( 11 ) ) ; 
 assertTrue ( " stdcall callback not called " , called [ 0 ] ) ; 
 if ( value = = - 1 ) { 
 fail ( " stdcall callback did not restore the stack pointer " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
