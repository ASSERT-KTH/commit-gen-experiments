BLEU SCORE: 0.016932492841722675

TEST MSG: Add 0x prefix to Structure debug output when hexadecimal values are printed
GENERATED MSG: fix structure alignment issues on linux / ppc

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index 78ae1af . . c929a45 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 1499 , 23 + 1499 , 22 @ @ public abstract class Structure { <nl> type = format ( sf . type . getComponentType ( ) ) ; <nl> index = " [ " + Array . getLength ( value ) + " ] " ; <nl> } <nl> - contents + = " " + type + " " <nl> - + sf . name + index + " @ " + Integer . toHexString ( sf . offset ) ; <nl> + contents + = String . format ( " % s % s % s @ 0x % X " , type , sf . name , index , sf . offset ) ; <nl> if ( value instanceof Structure ) { <nl> value = ( ( Structure ) value ) . toString ( indent + 1 , ! ( value instanceof Structure . ByReference ) , dumpMemory ) ; <nl> } <nl> contents + = " = " ; <nl> if ( value instanceof Long ) { <nl> - contents + = Long . toHexString ( ( ( Long ) value ) . longValue ( ) ) ; <nl> + contents + = String . format ( " 0x % 08X " , ( Long ) value ) ; <nl> } <nl> else if ( value instanceof Integer ) { <nl> - contents + = Integer . toHexString ( ( ( Integer ) value ) . intValue ( ) ) ; <nl> + contents + = String . format ( " 0x % 04X " , ( Integer ) value ) ; <nl> } <nl> else if ( value instanceof Short ) { <nl> - contents + = Integer . toHexString ( ( ( Short ) value ) . shortValue ( ) ) ; <nl> + contents + = String . format ( " 0x % 02X " , ( Short ) value ) ; <nl> } <nl> else if ( value instanceof Byte ) { <nl> - contents + = Integer . toHexString ( ( ( Byte ) value ) . byteValue ( ) ) ; <nl> + contents + = String . format ( " 0x % 01X " , ( Byte ) value ) ; <nl> } <nl> else { <nl> contents + = String . valueOf ( value ) . trim ( ) ; <nl> diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java <nl> index d23abbc . . 3adc2e8 100644 <nl> - - - a / test / com / sun / jna / StructureTest . java <nl> + + + b / test / com / sun / jna / StructureTest . java <nl> @ @ - 1299 , 10 + 1299 , 10 @ @ public class StructureTest extends TestCase { <nl> final String LS = System . getProperty ( " line . separator " ) ; <nl> System . setProperty ( " jna . dump _ memory " , " true " ) ; <nl> final String EXPECTED = " ( ? m ) . * " + s . size ( ) + " bytes . * \ \ { " + LS <nl> - + " int intField @ 0 = 0 " + LS <nl> - + " . * inner @ 4 = . * \ \ { " + LS <nl> - + " int x @ 0 = . * " + LS <nl> - + " int y @ 4 = . * " + LS <nl> + + " int intField @ 0x0 = 0x0000 " + LS <nl> + + " . * inner @ 0x4 = . * \ \ { " + LS <nl> + + " int x @ 0x0 = . * " + LS <nl> + + " int y @ 0x4 = . * " + LS <nl> + " \ \ } " + LS <nl> + " \ \ } " + LS <nl> + " memory dump " + LS
NEAREST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 438a1dc . . c85d7d2 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 3 , 10 + 3 , 12 @ @ Release 3 . 3 . x <nl> <nl> Features <nl> - - - - - - - - <nl> + * linux / ppc 32 - bit support <nl> <nl> Bug Fixes <nl> - - - - - - - - <nl> * Revise cleanup of in - use temporary files on win32 ( issue 6 ) <nl> + * Fix structure alignment issues on linux / ppc <nl> <nl> Release 3 . 3 . 0 <nl> = = = = = = = = = = = = = <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index b225452 . . ff5ba40 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 219 , 7 + 219 , 8 @ @ public class CallbacksTest extends TestCase { <nl> assertEquals ( " Callback lookups for same pointer should return same Callback object " , cb , cb2 ) ; <nl> } <nl> <nl> - public void testGCCallback ( ) throws Exception { <nl> + / / Fails on OpenJDK ( linux / ppc ) , probably finalize not run <nl> + public void testGCCallbackOnFinalize ( ) throws Exception { <nl> final boolean [ ] called = { false } ; <nl> TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { <nl> public void callback ( ) { <nl> @ @ - 242 , 6 + 243 , 7 @ @ public class CallbacksTest extends TestCase { <nl> for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | refs . containsValue ( ref ) ) ; + + i ) { <nl> try { <nl> Thread . sleep ( 10 ) ; / / Give the GC a chance to run <nl> + System . gc ( ) ; <nl> } finally { } <nl> } <nl> assertNull ( " Callback not GC ' d " , ref . get ( ) ) ; <nl> diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java <nl> index 7f985a4 . . 93b4214 100644 <nl> - - - a / test / com / sun / jna / JNAUnloadTest . java <nl> + + + b / test / com / sun / jna / JNAUnloadTest . java <nl> @ @ - 95 , 7 + 95 , 7 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> <nl> - / / Fails under clover <nl> + / / Fails under clover and OpenJDK ( linux / ppc ) <nl> public void testUnload ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( false ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> @ @ - 136 , 8 + 136 , 9 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> try { <nl> - if ( loader = = null ) <nl> + if ( loader = = null ) { <nl> fail ( " Native library not unloaded : " + throwable . getMessage ( ) ) ; <nl> + } <nl> } <nl> finally { <nl> loader = null ;

TEST DIFF:
diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index 78ae1af . . c929a45 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 1499 , 23 + 1499 , 22 @ @ public abstract class Structure { 
 type = format ( sf . type . getComponentType ( ) ) ; 
 index = " [ " + Array . getLength ( value ) + " ] " ; 
 } 
 - contents + = " " + type + " " 
 - + sf . name + index + " @ " + Integer . toHexString ( sf . offset ) ; 
 + contents + = String . format ( " % s % s % s @ 0x % X " , type , sf . name , index , sf . offset ) ; 
 if ( value instanceof Structure ) { 
 value = ( ( Structure ) value ) . toString ( indent + 1 , ! ( value instanceof Structure . ByReference ) , dumpMemory ) ; 
 } 
 contents + = " = " ; 
 if ( value instanceof Long ) { 
 - contents + = Long . toHexString ( ( ( Long ) value ) . longValue ( ) ) ; 
 + contents + = String . format ( " 0x % 08X " , ( Long ) value ) ; 
 } 
 else if ( value instanceof Integer ) { 
 - contents + = Integer . toHexString ( ( ( Integer ) value ) . intValue ( ) ) ; 
 + contents + = String . format ( " 0x % 04X " , ( Integer ) value ) ; 
 } 
 else if ( value instanceof Short ) { 
 - contents + = Integer . toHexString ( ( ( Short ) value ) . shortValue ( ) ) ; 
 + contents + = String . format ( " 0x % 02X " , ( Short ) value ) ; 
 } 
 else if ( value instanceof Byte ) { 
 - contents + = Integer . toHexString ( ( ( Byte ) value ) . byteValue ( ) ) ; 
 + contents + = String . format ( " 0x % 01X " , ( Byte ) value ) ; 
 } 
 else { 
 contents + = String . valueOf ( value ) . trim ( ) ; 
 diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java 
 index d23abbc . . 3adc2e8 100644 
 - - - a / test / com / sun / jna / StructureTest . java 
 + + + b / test / com / sun / jna / StructureTest . java 
 @ @ - 1299 , 10 + 1299 , 10 @ @ public class StructureTest extends TestCase { 
 final String LS = System . getProperty ( " line . separator " ) ; 
 System . setProperty ( " jna . dump _ memory " , " true " ) ; 
 final String EXPECTED = " ( ? m ) . * " + s . size ( ) + " bytes . * \ \ { " + LS 
 - + " int intField @ 0 = 0 " + LS 
 - + " . * inner @ 4 = . * \ \ { " + LS 
 - + " int x @ 0 = . * " + LS 
 - + " int y @ 4 = . * " + LS 
 + + " int intField @ 0x0 = 0x0000 " + LS 
 + + " . * inner @ 0x4 = . * \ \ { " + LS 
 + + " int x @ 0x0 = . * " + LS 
 + + " int y @ 0x4 = . * " + LS 
 + " \ \ } " + LS 
 + " \ \ } " + LS 
 + " memory dump " + LS

NEAREST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 438a1dc . . c85d7d2 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 3 , 10 + 3 , 12 @ @ Release 3 . 3 . x 
 
 Features 
 - - - - - - - - 
 + * linux / ppc 32 - bit support 
 
 Bug Fixes 
 - - - - - - - - 
 * Revise cleanup of in - use temporary files on win32 ( issue 6 ) 
 + * Fix structure alignment issues on linux / ppc 
 
 Release 3 . 3 . 0 
 = = = = = = = = = = = = = 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index b225452 . . ff5ba40 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 219 , 7 + 219 , 8 @ @ public class CallbacksTest extends TestCase { 
 assertEquals ( " Callback lookups for same pointer should return same Callback object " , cb , cb2 ) ; 
 } 
 
 - public void testGCCallback ( ) throws Exception { 
 + / / Fails on OpenJDK ( linux / ppc ) , probably finalize not run 
 + public void testGCCallbackOnFinalize ( ) throws Exception { 
 final boolean [ ] called = { false } ; 
 TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { 
 public void callback ( ) { 
 @ @ - 242 , 6 + 243 , 7 @ @ public class CallbacksTest extends TestCase { 
 for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | refs . containsValue ( ref ) ) ; + + i ) { 
 try { 
 Thread . sleep ( 10 ) ; / / Give the GC a chance to run 
 + System . gc ( ) ; 
 } finally { } 
 } 
 assertNull ( " Callback not GC ' d " , ref . get ( ) ) ; 
 diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java 
 index 7f985a4 . . 93b4214 100644 
 - - - a / test / com / sun / jna / JNAUnloadTest . java 
 + + + b / test / com / sun / jna / JNAUnloadTest . java 
 @ @ - 95 , 7 + 95 , 7 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 
 - / / Fails under clover 
 + / / Fails under clover and OpenJDK ( linux / ppc ) 
 public void testUnload ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( false ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 @ @ - 136 , 8 + 136 , 9 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 try { 
 - if ( loader = = null ) 
 + if ( loader = = null ) { 
 fail ( " Native library not unloaded : " + throwable . getMessage ( ) ) ; 
 + } 
 } 
 finally { 
 loader = null ;
