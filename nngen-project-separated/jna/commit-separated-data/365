BLEU SCORE: 0.028465126651392333

TEST MSG: Addressed code review items from pull request
GENERATED MSG: Added Advapi32Util accessCheck method to verify file permissions

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index c4310c5 . . 4e83440 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 18 , 6 + 18 , 7 @ @ Features <nl> * [ # 250 ] ( https : / / github . com / twall / jna / pull / 250 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . GetPrivateProfileSection ` , ` GetPrivateProfileSectionNames ` and ` WritePrivateProfileSection ` and corresponding ` Kernel32Util ` helpers - [ @ quipsy - karg ] ( https : / / github . com / quipsy - karg ) . <nl> * [ # 287 ] ( https : / / github . com / twall / jna / pull / 287 ) : Added ` DBTF _ MEDIA ` and ` DBTF _ NET ` to ` com . sun . jna . platform . win32 . DBT ` - [ @ daifei4321 ] ( https : / / github . com / daifei4321 ) . <nl> * [ # 295 ] ( https : / / github . com / twall / jna / pull / 295 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . ResetEvent ` - [ @ manithree ] ( https : / / github . com / manithree ) . <nl> + * [ # 301 ] ( https : / / github . com / twall / jna / pull / 301 ) : Added ` com . sun . jna . platform . win32 . Advapi32Util . accessCheck ` and supporting classes / methods to verify file permissions - [ @ BusyByte ] ( https : / / github . com / BusyByte / jna ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> index 6c72931 . . d34c06d 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> @ @ - 32 , 6 + 32 , 12 @ @ import com . sun . jna . ptr . PointerByReference ; <nl> import com . sun . jna . win32 . StdCallLibrary ; <nl> import com . sun . jna . win32 . W32APIOptions ; <nl> <nl> + import static com . sun . jna . platform . win32 . WinDef . BOOLByReference ; <nl> + import static com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> + import static com . sun . jna . platform . win32 . WinDef . DWORDByReference ; <nl> + import static com . sun . jna . platform . win32 . WinNT . GENERIC _ MAPPING ; <nl> + import static com . sun . jna . platform . win32 . WinNT . PRIVILEGE _ SET ; <nl> + <nl> / * * <nl> * Advapi32 . dll Interface . <nl> * <nl> @ @ - 1529 , 7 + 1535 , 7 @ @ public interface Advapi32 extends StdCallLibrary { <nl> * @ param AccessMask [ in , out ] A pointer to an access mask . <nl> * @ param GenericMapping [ in ] A pointer to a GENERIC _ MAPPING structure specifying a mapping of generic access types to specific and standard access types . <nl> * / <nl> - public void MapGenericMask ( WinDef . DWORDByReference AccessMask , WinNT . GENERIC _ MAPPING GenericMapping ) ; <nl> + public void MapGenericMask ( DWORDByReference AccessMask , GENERIC _ MAPPING GenericMapping ) ; <nl> <nl> <nl> / * * <nl> @ @ - 1547 , 9 + 1553 , 9 @ @ public interface Advapi32 extends StdCallLibrary { <nl> * @ return true on success ; false on failure ( use GetLastError to get extended error information ) <nl> * / <nl> public boolean AccessCheck ( Pointer pSecurityDescriptor , <nl> - HANDLE ClientToken , WinDef . DWORD DesiredAccess , <nl> - WinNT . GENERIC _ MAPPING GenericMapping , <nl> - WinNT . PRIVILEGE _ SET PrivilegeSet , <nl> - WinDef . DWORDByReference PrivilegeSetLength , <nl> - WinDef . DWORDByReference GrantedAccess , WinDef . BOOLByReference AccessStatus ) ; <nl> + HANDLE ClientToken , DWORD DesiredAccess , <nl> + GENERIC _ MAPPING GenericMapping , <nl> + PRIVILEGE _ SET PrivilegeSet , <nl> + DWORDByReference PrivilegeSetLength , <nl> + DWORDByReference GrantedAccess , BOOLByReference AccessStatus ) ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> index 0892cec . . c28e348 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> @ @ - 41 , 6 + 41 , 12 @ @ import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . ptr . LongByReference ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> <nl> + import static com . sun . jna . platform . win32 . WinDef . BOOLByReference ; <nl> + import static com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> + import static com . sun . jna . platform . win32 . WinDef . DWORDByReference ; <nl> + import static com . sun . jna . platform . win32 . WinNT . * ; <nl> + <nl> + <nl> / * * <nl> * Advapi32 utility API . <nl> * <nl> @ @ - 432 , 14 + 438 , 14 @ @ public abstract class Advapi32Util { <nl> 	 	 	 / / open thread or process token <nl> 	 	 	 HANDLE threadHandle = Kernel32 . INSTANCE . GetCurrentThread ( ) ; <nl> 	 	 	 if ( ! Advapi32 . INSTANCE . OpenThreadToken ( threadHandle , <nl> - 	 	 	 	 	 WinNT . TOKEN _ DUPLICATE | WinNT . TOKEN _ QUERY , true , phToken ) ) { <nl> + 	 	 	 	 	 TOKEN _ DUPLICATE | TOKEN _ QUERY , true , phToken ) ) { <nl> 	 	 	 	 if ( W32Errors . ERROR _ NO _ TOKEN ! = Kernel32 . INSTANCE <nl> 	 	 	 	 	 	 . GetLastError ( ) ) { <nl> 	 	 	 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> 	 	 	 	 } <nl> 	 	 	 	 HANDLE processHandle = Kernel32 . INSTANCE . GetCurrentProcess ( ) ; <nl> 	 	 	 	 if ( ! Advapi32 . INSTANCE . OpenProcessToken ( processHandle , <nl> - 	 	 	 	 	 	 WinNT . TOKEN _ DUPLICATE | WinNT . TOKEN _ QUERY , phToken ) ) { <nl> + 	 	 	 	 	 	 TOKEN _ DUPLICATE | TOKEN _ QUERY , phToken ) ) { <nl> 	 	 	 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> 	 	 	 	 } <nl> 	 	 	 } <nl> @ @ - 2066 , 9 + 2072 , 9 @ @ public abstract class Advapi32Util { <nl> 	 } <nl> <nl> public static enum AccessCheckPermission { <nl> - READ ( WinNT . GENERIC _ READ ) , <nl> - WRITE ( WinNT . GENERIC _ WRITE ) , <nl> - EXECUTE ( WinNT . GENERIC _ EXECUTE ) ; <nl> + READ ( GENERIC _ READ ) , <nl> + WRITE ( GENERIC _ WRITE ) , <nl> + EXECUTE ( GENERIC _ EXECUTE ) ; <nl> <nl> final int code ; <nl> <nl> @ @ - 2083 , 8 + 2089 , 8 @ @ public abstract class Advapi32Util { <nl> <nl> <nl> private static Memory getSecurityDescriptorForFile ( final String absoluteFilePath ) { <nl> - final int infoType = WinNT . OWNER _ SECURITY _ INFORMATION | WinNT . GROUP _ SECURITY _ INFORMATION | <nl> - WinNT . DACL _ SECURITY _ INFORMATION ; <nl> + final int infoType = OWNER _ SECURITY _ INFORMATION | GROUP _ SECURITY _ INFORMATION | <nl> + DACL _ SECURITY _ INFORMATION ; <nl> <nl> final IntByReference lpnSize = new IntByReference ( ) ; <nl> boolean succeeded = Advapi32 . INSTANCE . GetFileSecurity ( <nl> @ @ - 2128 , 30 + 2134 , 30 @ @ public abstract class Advapi32Util { <nl> try { <nl> openedAccessToken = new HANDLEByReference ( ) ; <nl> <nl> - final int desireAccess = WinNT . TOKEN _ IMPERSONATE | WinNT . TOKEN _ QUERY | WinNT . TOKEN _ DUPLICATE | WinNT . STANDARD _ RIGHTS _ READ ; <nl> + final int desireAccess = TOKEN _ IMPERSONATE | TOKEN _ QUERY | TOKEN _ DUPLICATE | STANDARD _ RIGHTS _ READ ; <nl> if ( ! Advapi32 . INSTANCE . OpenProcessToken ( Kernel32 . INSTANCE . GetCurrentProcess ( ) , desireAccess , openedAccessToken ) ) { <nl> throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> } <nl> <nl> - if ( ! Advapi32 . INSTANCE . DuplicateToken ( openedAccessToken . getValue ( ) , WinNT . SECURITY _ IMPERSONATION _ LEVEL . SecurityImpersonation , duplicatedToken ) ) { <nl> + if ( ! Advapi32 . INSTANCE . DuplicateToken ( openedAccessToken . getValue ( ) , SECURITY _ IMPERSONATION _ LEVEL . SecurityImpersonation , duplicatedToken ) ) { <nl> throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> } <nl> <nl> - final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; <nl> - mapping . genericRead = new WinDef . DWORD ( WinNT . FILE _ GENERIC _ READ ) ; <nl> - mapping . genericWrite = new WinDef . DWORD ( WinNT . FILE _ GENERIC _ WRITE ) ; <nl> - mapping . genericExecute = new WinDef . DWORD ( WinNT . FILE _ GENERIC _ EXECUTE ) ; <nl> - mapping . genericAll = new WinDef . DWORD ( WinNT . FILE _ ALL _ ACCESS ) ; <nl> + final GENERIC _ MAPPING mapping = new GENERIC _ MAPPING ( ) ; <nl> + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; <nl> + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; <nl> + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; <nl> + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; <nl> <nl> - final WinDef . DWORDByReference rights = new WinDef . DWORDByReference ( new WinDef . DWORD ( permissionToCheck . getCode ( ) ) ) ; <nl> + final DWORDByReference rights = new DWORDByReference ( new DWORD ( permissionToCheck . getCode ( ) ) ) ; <nl> Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; <nl> <nl> - final WinNT . PRIVILEGE _ SET privileges = new WinNT . PRIVILEGE _ SET ( 1 ) ; <nl> - privileges . PrivilegeCount = new WinDef . DWORD ( 0 ) ; <nl> - final WinNT . DWORDByReference privilegeLength = new WinDef . DWORDByReference ( new WinDef . DWORD ( privileges . size ( ) ) ) ; <nl> + final PRIVILEGE _ SET privileges = new PRIVILEGE _ SET ( 1 ) ; <nl> + privileges . PrivilegeCount = new DWORD ( 0 ) ; <nl> + final DWORDByReference privilegeLength = new DWORDByReference ( new DWORD ( privileges . size ( ) ) ) ; <nl> <nl> - final WinDef . DWORDByReference grantedAccess = new WinDef . DWORDByReference ( ) ; <nl> - final WinDef . BOOLByReference result = new WinDef . BOOLByReference ( ) ; <nl> + final DWORDByReference grantedAccess = new DWORDByReference ( ) ; <nl> + final BOOLByReference result = new BOOLByReference ( ) ; <nl> if ( ! Advapi32 . INSTANCE . AccessCheck ( securityDescriptorMemoryPointer , <nl> duplicatedToken . getValue ( ) , <nl> rights . getValue ( ) , <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java <nl> index 229bf75 . . d96f63b 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java <nl> @ @ - 41 , 6 + 41 , 8 @ @ import com . sun . jna . platform . win32 . Winsvc . SERVICE _ STATUS _ PROCESS ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> <nl> + import static com . sun . jna . platform . win32 . WinNT . * ; <nl> + <nl> / * * <nl> * @ author dblock [ at ] dblock [ dot ] org <nl> * / <nl> @ @ - 826 , 4 + 828 , 61 @ @ public class Advapi32Test extends TestCase { <nl> 	 assertTrue ( Advapi32 . INSTANCE . ImpersonateSelf ( WinNT . SECURITY _ IMPERSONATION _ LEVEL . SecurityAnonymous ) ) ; <nl> 	 assertTrue ( Advapi32 . INSTANCE . RevertToSelf ( ) ) ; <nl> } <nl> + <nl> + public void testMapGenericReadMask ( ) { <nl> + final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; <nl> + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; <nl> + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; <nl> + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; <nl> + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; <nl> + <nl> + final DWORDByReference rights = new DWORDByReference ( new DWORD ( GENERIC _ READ ) ) ; <nl> + Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; <nl> + <nl> + assertEquals ( FILE _ GENERIC _ READ , rights . getValue ( ) . intValue ( ) ) ; <nl> + assertTrue ( GENERIC _ READ ! = ( rights . getValue ( ) . intValue ( ) & GENERIC _ READ ) ) ; <nl> + } <nl> + <nl> + public void testMapGenericWriteMask ( ) { <nl> + final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; <nl> + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; <nl> + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; <nl> + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; <nl> + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; <nl> + <nl> + final DWORDByReference rights = new DWORDByReference ( new DWORD ( GENERIC _ WRITE ) ) ; <nl> + Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; <nl> + <nl> + assertEquals ( FILE _ GENERIC _ WRITE , rights . getValue ( ) . intValue ( ) ) ; <nl> + assertTrue ( GENERIC _ WRITE ! = ( rights . getValue ( ) . intValue ( ) & GENERIC _ WRITE ) ) ; <nl> + } <nl> + <nl> + public void testMapGenericExecuteMask ( ) { <nl> + final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; <nl> + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; <nl> + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; <nl> + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; <nl> + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; <nl> + <nl> + final DWORDByReference rights = new DWORDByReference ( new DWORD ( GENERIC _ EXECUTE ) ) ; <nl> + Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; <nl> + <nl> + assertEquals ( FILE _ GENERIC _ EXECUTE , rights . getValue ( ) . intValue ( ) ) ; <nl> + assertTrue ( GENERIC _ EXECUTE ! = ( rights . getValue ( ) . intValue ( ) & GENERIC _ EXECUTE ) ) ; <nl> + } <nl> + <nl> + public void testMapGenericAllMask ( ) { <nl> + final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; <nl> + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; <nl> + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; <nl> + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; <nl> + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; <nl> + <nl> + final DWORDByReference rights = new DWORDByReference ( new DWORD ( GENERIC _ ALL ) ) ; <nl> + Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; <nl> + <nl> + assertEquals ( FILE _ ALL _ ACCESS , rights . getValue ( ) . intValue ( ) ) ; <nl> + assertTrue ( GENERIC _ ALL ! = ( rights . getValue ( ) . intValue ( ) & GENERIC _ ALL ) ) ; <nl> + } <nl> + <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index c4310c5 . . 4e83440 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 18 , 6 + 18 , 7 @ @ Features 
 * [ # 250 ] ( https : / / github . com / twall / jna / pull / 250 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . GetPrivateProfileSection ` , ` GetPrivateProfileSectionNames ` and ` WritePrivateProfileSection ` and corresponding ` Kernel32Util ` helpers - [ @ quipsy - karg ] ( https : / / github . com / quipsy - karg ) . 
 * [ # 287 ] ( https : / / github . com / twall / jna / pull / 287 ) : Added ` DBTF _ MEDIA ` and ` DBTF _ NET ` to ` com . sun . jna . platform . win32 . DBT ` - [ @ daifei4321 ] ( https : / / github . com / daifei4321 ) . 
 * [ # 295 ] ( https : / / github . com / twall / jna / pull / 295 ) : Added ` com . sun . jna . platform . win32 . Kernel32 . ResetEvent ` - [ @ manithree ] ( https : / / github . com / manithree ) . 
 + * [ # 301 ] ( https : / / github . com / twall / jna / pull / 301 ) : Added ` com . sun . jna . platform . win32 . Advapi32Util . accessCheck ` and supporting classes / methods to verify file permissions - [ @ BusyByte ] ( https : / / github . com / BusyByte / jna ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 index 6c72931 . . d34c06d 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 @ @ - 32 , 6 + 32 , 12 @ @ import com . sun . jna . ptr . PointerByReference ; 
 import com . sun . jna . win32 . StdCallLibrary ; 
 import com . sun . jna . win32 . W32APIOptions ; 
 
 + import static com . sun . jna . platform . win32 . WinDef . BOOLByReference ; 
 + import static com . sun . jna . platform . win32 . WinDef . DWORD ; 
 + import static com . sun . jna . platform . win32 . WinDef . DWORDByReference ; 
 + import static com . sun . jna . platform . win32 . WinNT . GENERIC _ MAPPING ; 
 + import static com . sun . jna . platform . win32 . WinNT . PRIVILEGE _ SET ; 
 + 
 / * * 
 * Advapi32 . dll Interface . 
 * 
 @ @ - 1529 , 7 + 1535 , 7 @ @ public interface Advapi32 extends StdCallLibrary { 
 * @ param AccessMask [ in , out ] A pointer to an access mask . 
 * @ param GenericMapping [ in ] A pointer to a GENERIC _ MAPPING structure specifying a mapping of generic access types to specific and standard access types . 
 * / 
 - public void MapGenericMask ( WinDef . DWORDByReference AccessMask , WinNT . GENERIC _ MAPPING GenericMapping ) ; 
 + public void MapGenericMask ( DWORDByReference AccessMask , GENERIC _ MAPPING GenericMapping ) ; 
 
 
 / * * 
 @ @ - 1547 , 9 + 1553 , 9 @ @ public interface Advapi32 extends StdCallLibrary { 
 * @ return true on success ; false on failure ( use GetLastError to get extended error information ) 
 * / 
 public boolean AccessCheck ( Pointer pSecurityDescriptor , 
 - HANDLE ClientToken , WinDef . DWORD DesiredAccess , 
 - WinNT . GENERIC _ MAPPING GenericMapping , 
 - WinNT . PRIVILEGE _ SET PrivilegeSet , 
 - WinDef . DWORDByReference PrivilegeSetLength , 
 - WinDef . DWORDByReference GrantedAccess , WinDef . BOOLByReference AccessStatus ) ; 
 + HANDLE ClientToken , DWORD DesiredAccess , 
 + GENERIC _ MAPPING GenericMapping , 
 + PRIVILEGE _ SET PrivilegeSet , 
 + DWORDByReference PrivilegeSetLength , 
 + DWORDByReference GrantedAccess , BOOLByReference AccessStatus ) ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 index 0892cec . . c28e348 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 @ @ - 41 , 6 + 41 , 12 @ @ import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . ptr . LongByReference ; 
 import com . sun . jna . ptr . PointerByReference ; 
 
 + import static com . sun . jna . platform . win32 . WinDef . BOOLByReference ; 
 + import static com . sun . jna . platform . win32 . WinDef . DWORD ; 
 + import static com . sun . jna . platform . win32 . WinDef . DWORDByReference ; 
 + import static com . sun . jna . platform . win32 . WinNT . * ; 
 + 
 + 
 / * * 
 * Advapi32 utility API . 
 * 
 @ @ - 432 , 14 + 438 , 14 @ @ public abstract class Advapi32Util { 
 	 	 	 / / open thread or process token 
 	 	 	 HANDLE threadHandle = Kernel32 . INSTANCE . GetCurrentThread ( ) ; 
 	 	 	 if ( ! Advapi32 . INSTANCE . OpenThreadToken ( threadHandle , 
 - 	 	 	 	 	 WinNT . TOKEN _ DUPLICATE | WinNT . TOKEN _ QUERY , true , phToken ) ) { 
 + 	 	 	 	 	 TOKEN _ DUPLICATE | TOKEN _ QUERY , true , phToken ) ) { 
 	 	 	 	 if ( W32Errors . ERROR _ NO _ TOKEN ! = Kernel32 . INSTANCE 
 	 	 	 	 	 	 . GetLastError ( ) ) { 
 	 	 	 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 	 	 	 	 } 
 	 	 	 	 HANDLE processHandle = Kernel32 . INSTANCE . GetCurrentProcess ( ) ; 
 	 	 	 	 if ( ! Advapi32 . INSTANCE . OpenProcessToken ( processHandle , 
 - 	 	 	 	 	 	 WinNT . TOKEN _ DUPLICATE | WinNT . TOKEN _ QUERY , phToken ) ) { 
 + 	 	 	 	 	 	 TOKEN _ DUPLICATE | TOKEN _ QUERY , phToken ) ) { 
 	 	 	 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 	 	 	 	 } 
 	 	 	 } 
 @ @ - 2066 , 9 + 2072 , 9 @ @ public abstract class Advapi32Util { 
 	 } 
 
 public static enum AccessCheckPermission { 
 - READ ( WinNT . GENERIC _ READ ) , 
 - WRITE ( WinNT . GENERIC _ WRITE ) , 
 - EXECUTE ( WinNT . GENERIC _ EXECUTE ) ; 
 + READ ( GENERIC _ READ ) , 
 + WRITE ( GENERIC _ WRITE ) , 
 + EXECUTE ( GENERIC _ EXECUTE ) ; 
 
 final int code ; 
 
 @ @ - 2083 , 8 + 2089 , 8 @ @ public abstract class Advapi32Util { 
 
 
 private static Memory getSecurityDescriptorForFile ( final String absoluteFilePath ) { 
 - final int infoType = WinNT . OWNER _ SECURITY _ INFORMATION | WinNT . GROUP _ SECURITY _ INFORMATION | 
 - WinNT . DACL _ SECURITY _ INFORMATION ; 
 + final int infoType = OWNER _ SECURITY _ INFORMATION | GROUP _ SECURITY _ INFORMATION | 
 + DACL _ SECURITY _ INFORMATION ; 
 
 final IntByReference lpnSize = new IntByReference ( ) ; 
 boolean succeeded = Advapi32 . INSTANCE . GetFileSecurity ( 
 @ @ - 2128 , 30 + 2134 , 30 @ @ public abstract class Advapi32Util { 
 try { 
 openedAccessToken = new HANDLEByReference ( ) ; 
 
 - final int desireAccess = WinNT . TOKEN _ IMPERSONATE | WinNT . TOKEN _ QUERY | WinNT . TOKEN _ DUPLICATE | WinNT . STANDARD _ RIGHTS _ READ ; 
 + final int desireAccess = TOKEN _ IMPERSONATE | TOKEN _ QUERY | TOKEN _ DUPLICATE | STANDARD _ RIGHTS _ READ ; 
 if ( ! Advapi32 . INSTANCE . OpenProcessToken ( Kernel32 . INSTANCE . GetCurrentProcess ( ) , desireAccess , openedAccessToken ) ) { 
 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 } 
 
 - if ( ! Advapi32 . INSTANCE . DuplicateToken ( openedAccessToken . getValue ( ) , WinNT . SECURITY _ IMPERSONATION _ LEVEL . SecurityImpersonation , duplicatedToken ) ) { 
 + if ( ! Advapi32 . INSTANCE . DuplicateToken ( openedAccessToken . getValue ( ) , SECURITY _ IMPERSONATION _ LEVEL . SecurityImpersonation , duplicatedToken ) ) { 
 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 } 
 
 - final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; 
 - mapping . genericRead = new WinDef . DWORD ( WinNT . FILE _ GENERIC _ READ ) ; 
 - mapping . genericWrite = new WinDef . DWORD ( WinNT . FILE _ GENERIC _ WRITE ) ; 
 - mapping . genericExecute = new WinDef . DWORD ( WinNT . FILE _ GENERIC _ EXECUTE ) ; 
 - mapping . genericAll = new WinDef . DWORD ( WinNT . FILE _ ALL _ ACCESS ) ; 
 + final GENERIC _ MAPPING mapping = new GENERIC _ MAPPING ( ) ; 
 + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; 
 + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; 
 + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; 
 + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; 
 
 - final WinDef . DWORDByReference rights = new WinDef . DWORDByReference ( new WinDef . DWORD ( permissionToCheck . getCode ( ) ) ) ; 
 + final DWORDByReference rights = new DWORDByReference ( new DWORD ( permissionToCheck . getCode ( ) ) ) ; 
 Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; 
 
 - final WinNT . PRIVILEGE _ SET privileges = new WinNT . PRIVILEGE _ SET ( 1 ) ; 
 - privileges . PrivilegeCount = new WinDef . DWORD ( 0 ) ; 
 - final WinNT . DWORDByReference privilegeLength = new WinDef . DWORDByReference ( new WinDef . DWORD ( privileges . size ( ) ) ) ; 
 + final PRIVILEGE _ SET privileges = new PRIVILEGE _ SET ( 1 ) ; 
 + privileges . PrivilegeCount = new DWORD ( 0 ) ; 
 + final DWORDByReference privilegeLength = new DWORDByReference ( new DWORD ( privileges . size ( ) ) ) ; 
 
 - final WinDef . DWORDByReference grantedAccess = new WinDef . DWORDByReference ( ) ; 
 - final WinDef . BOOLByReference result = new WinDef . BOOLByReference ( ) ; 
 + final DWORDByReference grantedAccess = new DWORDByReference ( ) ; 
 + final BOOLByReference result = new BOOLByReference ( ) ; 
 if ( ! Advapi32 . INSTANCE . AccessCheck ( securityDescriptorMemoryPointer , 
 duplicatedToken . getValue ( ) , 
 rights . getValue ( ) , 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java 
 index 229bf75 . . d96f63b 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java 
 @ @ - 41 , 6 + 41 , 8 @ @ import com . sun . jna . platform . win32 . Winsvc . SERVICE _ STATUS _ PROCESS ; 
 import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . ptr . PointerByReference ; 
 
 + import static com . sun . jna . platform . win32 . WinNT . * ; 
 + 
 / * * 
 * @ author dblock [ at ] dblock [ dot ] org 
 * / 
 @ @ - 826 , 4 + 828 , 61 @ @ public class Advapi32Test extends TestCase { 
 	 assertTrue ( Advapi32 . INSTANCE . ImpersonateSelf ( WinNT . SECURITY _ IMPERSONATION _ LEVEL . SecurityAnonymous ) ) ; 
 	 assertTrue ( Advapi32 . INSTANCE . RevertToSelf ( ) ) ; 
 } 
 + 
 + public void testMapGenericReadMask ( ) { 
 + final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; 
 + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; 
 + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; 
 + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; 
 + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; 
 + 
 + final DWORDByReference rights = new DWORDByReference ( new DWORD ( GENERIC _ READ ) ) ; 
 + Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; 
 + 
 + assertEquals ( FILE _ GENERIC _ READ , rights . getValue ( ) . intValue ( ) ) ; 
 + assertTrue ( GENERIC _ READ ! = ( rights . getValue ( ) . intValue ( ) & GENERIC _ READ ) ) ; 
 + } 
 + 
 + public void testMapGenericWriteMask ( ) { 
 + final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; 
 + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; 
 + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; 
 + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; 
 + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; 
 + 
 + final DWORDByReference rights = new DWORDByReference ( new DWORD ( GENERIC _ WRITE ) ) ; 
 + Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; 
 + 
 + assertEquals ( FILE _ GENERIC _ WRITE , rights . getValue ( ) . intValue ( ) ) ; 
 + assertTrue ( GENERIC _ WRITE ! = ( rights . getValue ( ) . intValue ( ) & GENERIC _ WRITE ) ) ; 
 + } 
 + 
 + public void testMapGenericExecuteMask ( ) { 
 + final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; 
 + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; 
 + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; 
 + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; 
 + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; 
 + 
 + final DWORDByReference rights = new DWORDByReference ( new DWORD ( GENERIC _ EXECUTE ) ) ; 
 + Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; 
 + 
 + assertEquals ( FILE _ GENERIC _ EXECUTE , rights . getValue ( ) . intValue ( ) ) ; 
 + assertTrue ( GENERIC _ EXECUTE ! = ( rights . getValue ( ) . intValue ( ) & GENERIC _ EXECUTE ) ) ; 
 + } 
 + 
 + public void testMapGenericAllMask ( ) { 
 + final WinNT . GENERIC _ MAPPING mapping = new WinNT . GENERIC _ MAPPING ( ) ; 
 + mapping . genericRead = new DWORD ( FILE _ GENERIC _ READ ) ; 
 + mapping . genericWrite = new DWORD ( FILE _ GENERIC _ WRITE ) ; 
 + mapping . genericExecute = new DWORD ( FILE _ GENERIC _ EXECUTE ) ; 
 + mapping . genericAll = new DWORD ( FILE _ ALL _ ACCESS ) ; 
 + 
 + final DWORDByReference rights = new DWORDByReference ( new DWORD ( GENERIC _ ALL ) ) ; 
 + Advapi32 . INSTANCE . MapGenericMask ( rights , mapping ) ; 
 + 
 + assertEquals ( FILE _ ALL _ ACCESS , rights . getValue ( ) . intValue ( ) ) ; 
 + assertTrue ( GENERIC _ ALL ! = ( rights . getValue ( ) . intValue ( ) & GENERIC _ ALL ) ) ; 
 + } 
 + 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
