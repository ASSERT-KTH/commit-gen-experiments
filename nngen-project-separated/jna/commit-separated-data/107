BLEU SCORE: 0.03772691894380681

TEST MSG: Support JNIEnv parameters .
GENERATED MSG: optionally allow Java objects in native calls

TEST DIFF (one line): diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index 50bb49c . . f8797ad 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 169 , 6 + 169 , 7 @ @ static jclass classAttachOptions ; <nl> static jclass classNativeMapped ; <nl> static jclass classIntegerType ; <nl> static jclass classPointerType ; <nl> + static jclass classJNIEnv ; <nl> static jclass class _ ffi _ callback ; <nl> <nl> static jmethodID MID _ Class _ getComponentType ; <nl> @ @ - 540 , 6 + 541 , 11 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray args , <nl> arg _ types [ i ] = & ffi _ type _ pointer ; <nl> arg _ values [ i ] = & c _ args [ i ] . l ; <nl> } <nl> + else if ( ( * env ) - > IsInstanceOf ( env , arg , classJNIEnv ) ) { <nl> + c _ args [ i ] . l = ( void * ) env ; <nl> + arg _ types [ i ] = & ffi _ type _ pointer ; <nl> + arg _ values [ i ] = & c _ args [ i ] . l ; <nl> + } <nl> else if ( ( * env ) - > IsInstanceOf ( env , arg , classStructure ) ) { <nl> c _ args [ i ] . l = getStructureAddress ( env , arg ) ; <nl> arg _ types [ i ] = getStructureType ( env , arg ) ; <nl> @ @ - 1793 , 6 + 1799 , 9 @ @ dispatch _ direct ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { <nl> case CVT _ POINTER : <nl> * ( void * * ) args [ i ] = getNativeAddress ( env , * ( void * * ) args [ i ] ) ; <nl> break ; <nl> + case CVT _ JNIENV : <nl> + * ( void * * ) args [ i ] = ( void * ) env ; <nl> + break ; <nl> case CVT _ STRUCTURE : <nl> objects [ i ] = * ( void * * ) args [ i ] ; <nl> writeStructure ( env , * ( void * * ) args [ i ] ) ; <nl> @ @ - 2959 , 6 + 2968 , 10 @ @ Java _ com _ sun _ jna _ Native _ initIDs ( JNIEnv * env , jclass cls ) { <nl> throwByName ( env , EUnsatisfiedLink , <nl> " Can ' t obtain constructor for class com . sun . jna . WString " ) ; <nl> } <nl> + else if ( ! LOAD _ CREF ( env , JNIEnv , " com / sun / jna / JNIEnv " ) ) { <nl> + throwByName ( env , EUnsatisfiedLink , <nl> + " Can ' t obtain class com . sun . jna . JNIEnv " ) ; <nl> + } <nl> else if ( ! LOAD _ CREF ( env , _ ffi _ callback , " com / sun / jna / Native $ ffi _ callback " ) ) { <nl> throwByName ( env , EUnsatisfiedLink , <nl> " Can ' t obtain class com . sun . jna . Native $ ffi _ callback " ) ; <nl> diff - - git a / native / dispatch . h b / native / dispatch . h <nl> index 91ddd27 . . aed8c89 100644 <nl> - - - a / native / dispatch . h <nl> + + + b / native / dispatch . h <nl> @ @ - 116 , 6 + 116 , 7 @ @ enum { <nl> CVT _ TYPE _ MAPPER _ STRING = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER _ STRING , <nl> CVT _ TYPE _ MAPPER _ WSTRING = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER _ WSTRING , <nl> CVT _ OBJECT = com _ sun _ jna _ Native _ CVT _ OBJECT , <nl> + CVT _ JNIENV = com _ sun _ jna _ Native _ CVT _ JNIENV , <nl> } ; <nl> <nl> / * callback behavior flags * / <nl> diff - - git a / native / testlib . c b / native / testlib . c <nl> index 0747e45 . . 4c8387f 100644 <nl> - - - a / native / testlib . c <nl> + + + b / native / testlib . c <nl> @ @ - 1026 , 6 + 1026 , 11 @ @ Java _ com _ sun _ jna _ PerformanceTest _ 00024JNILibrary _ getpid ( JNIEnv * UNUSED ( env ) , jcl <nl> # endif <nl> } <nl> <nl> + EXPORT jclass <nl> + returnClass ( JNIEnv * env , jobject arg ) { <nl> + return ( * env ) - > GetObjectClass ( env , arg ) ; <nl> + } <nl> + <nl> # ifdef _ _ cplusplus <nl> } <nl> # endif <nl> diff - - git a / src / com / sun / jna / JNIEnv . java b / src / com / sun / jna / JNIEnv . java <nl> new file mode 100644 <nl> index 0000000 . . e6205f5 <nl> - - - / dev / null <nl> + + + b / src / com / sun / jna / JNIEnv . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + / * <nl> + * The contents of this file is dual - licensed under 2 <nl> + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and <nl> + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . <nl> + * <nl> + * You can freely decide which license you want to apply to <nl> + * the project . <nl> + * <nl> + * You may obtain a copy of the LGPL License at : <nl> + * <nl> + * http : / / www . gnu . org / licenses / licenses . html <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " LGPL2 . 1 " . <nl> + * <nl> + * You may obtain a copy of the Apache License at : <nl> + * <nl> + * http : / / www . apache . org / licenses / <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " AL2 . 0 " . <nl> + * / <nl> + package com . sun . jna ; <nl> + <nl> + / * * Marker type for the JNIEnv pointer . <nl> + * Use this to wrap native methods that take a JNIEnv * parameter . <nl> + * Pass { @ link JNIEnv # CURRENT } as the argument . <nl> + * / <nl> + public final class JNIEnv { <nl> + / * * Marker object representing the current thread ' s JNIEnv pointer . * / <nl> + public static final JNIEnv CURRENT = new JNIEnv ( ) ; <nl> + <nl> + private JNIEnv ( ) { } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index cc28856 . . 7b7a7d4 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 1535 , 6 + 1535 , 7 @ @ public final class Native implements Version { <nl> private static final int CVT _ TYPE _ MAPPER _ STRING = 24 ; <nl> private static final int CVT _ TYPE _ MAPPER _ WSTRING = 25 ; <nl> private static final int CVT _ OBJECT = 26 ; <nl> + private static final int CVT _ JNIENV = 27 ; <nl> <nl> private static int getConversion ( Class < ? > type , TypeMapper mapper , boolean allowObjects ) { <nl> if ( type = = Boolean . class ) type = boolean . class ; <nl> @ @ - 1625 , 6 + 1626 , 9 @ @ public final class Native implements Version { <nl> } <nl> return CVT _ NATIVE _ MAPPED ; <nl> } <nl> + if ( JNIEnv . class = = type ) { <nl> + return CVT _ JNIENV ; <nl> + } <nl> return allowObjects ? CVT _ OBJECT : CVT _ UNSUPPORTED ; <nl> } <nl> <nl> diff - - git a / test / com / sun / jna / DirectReturnTypesTest . java b / test / com / sun / jna / DirectReturnTypesTest . java <nl> index 593b3d2 . . 69e9201 100644 <nl> - - - a / test / com / sun / jna / DirectReturnTypesTest . java <nl> + + + b / test / com / sun / jna / DirectReturnTypesTest . java <nl> @ @ - 42 , 6 + 42 , 10 @ @ public class DirectReturnTypesTest extends ReturnTypesTest { <nl> throw new IllegalArgumentException ( s . getClass ( ) . getName ( ) ) ; <nl> } <nl> @ Override <nl> + public Class returnClass ( JNIEnv env , Object arg ) { <nl> + throw new IllegalArgumentException ( arg . getClass ( ) . getName ( ) ) ; <nl> + } <nl> + @ Override <nl> public native boolean returnFalse ( ) ; <nl> @ Override <nl> public native boolean returnTrue ( ) ; <nl> @ @ - 95 , 6 + 99 , 8 @ @ public class DirectReturnTypesTest extends ReturnTypesTest { <nl> public native Object returnObjectArgument ( Object s ) ; <nl> @ Override <nl> public native TestObject returnObjectArgument ( TestObject s ) ; <nl> + @ Override <nl> + public native Class returnClass ( JNIEnv env , Object arg ) ; <nl> <nl> static { <nl> Native . register ( NativeLibrary . getInstance ( " testlib " , <nl> diff - - git a / test / com / sun / jna / ReturnTypesTest . java b / test / com / sun / jna / ReturnTypesTest . java <nl> index 0c98a9a . . f85288b 100644 <nl> - - - a / test / com / sun / jna / ReturnTypesTest . java <nl> + + + b / test / com / sun / jna / ReturnTypesTest . java <nl> @ @ - 107 , 6 + 107 , 7 @ @ public class ReturnTypesTest extends TestCase { <nl> class TestObject { } <nl> Object returnObjectArgument ( Object s ) ; <nl> TestObject returnObjectArgument ( TestObject s ) ; <nl> + Class returnClass ( JNIEnv env , Object arg ) ; <nl> boolean returnFalse ( ) ; <nl> boolean returnTrue ( ) ; <nl> int returnInt32Zero ( ) ; <nl> @ @ - 138 , 7 + 139 , 8 @ @ public class ReturnTypesTest extends TestCase { <nl> @ Override <nl> protected void setUp ( ) { <nl> lib = Native . loadLibrary ( " testlib " , TestLibrary . class ) ; <nl> - libSupportingObject = Native . loadLibrary ( " testlib " , TestLibrary . class , Collections . singletonMap ( Library . OPTION _ ALLOW _ OBJECTS , Boolean . TRUE ) ) ; <nl> + libSupportingObject = Native . loadLibrary ( " testlib " , TestLibrary . class , <nl> + Collections . singletonMap ( Library . OPTION _ ALLOW _ OBJECTS , Boolean . TRUE ) ) ; <nl> libNativeMapped = Native . loadLibrary ( " testlib " , NativeMappedLibrary . class ) ; <nl> } <nl> <nl> @ @ - 174 , 6 + 176 , 13 @ @ public class ReturnTypesTest extends TestCase { <nl> } <nl> } <nl> <nl> + public void testReturnClass ( ) throws Exception { <nl> + assertEquals ( " Wrong class returned " , Class . class , <nl> + libSupportingObject . returnClass ( JNIEnv . CURRENT , TestLibrary . class ) ) ; <nl> + assertEquals ( " Wrong class returned " , StringBuilder . class , <nl> + libSupportingObject . returnClass ( JNIEnv . CURRENT , new StringBuilder ( ) ) ) ; <nl> + } <nl> + <nl> public void testInvokeBoolean ( ) { <nl> assertFalse ( " Expect false " , lib . returnFalse ( ) ) ; <nl> assertTrue ( " Expect true " , lib . returnTrue ( ) ) ; <nl> @ @ - 349 , 4 + 358 , 4 @ @ public class ReturnTypesTest extends TestCase { <nl> junit . textui . TestRunner . run ( ReturnTypesTest . class ) ; <nl> } <nl> <nl> - } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / jnalib / src / com / sun / jna / Structure . java b / jnalib / src / com / sun / jna / Structure . java <nl> index 12d2d8b . . 6ef97f9 100644 <nl> - - - a / jnalib / src / com / sun / jna / Structure . java <nl> + + + b / jnalib / src / com / sun / jna / Structure . java <nl> @ @ - 1437 , 6 + 1437 , 8 @ @ public abstract class Structure { <nl> static Pointer get ( Object obj ) { <nl> if ( obj = = null ) <nl> return FFITypes . ffi _ type _ pointer ; <nl> + if ( obj instanceof Class ) <nl> + return get ( null , ( Class ) obj ) ; <nl> return get ( obj , obj . getClass ( ) ) ; <nl> } <nl> <nl> diff - - git a / jnalib / test / com / sun / jna / UnionTest . java b / jnalib / test / com / sun / jna / UnionTest . java <nl> index 79158d3 . . fc3283c 100644 <nl> - - - a / jnalib / test / com / sun / jna / UnionTest . java <nl> + + + b / jnalib / test / com / sun / jna / UnionTest . java <nl> @ @ - 20 , 6 + 20 , 11 @ @ public class UnionTest extends TestCase { <nl> public String value ; <nl> } <nl> <nl> + public static class BigTestStructure extends Structure { <nl> + public long field1 ; <nl> + public long field2 ; <nl> + } <nl> + <nl> public static class IntStructure extends Structure { <nl> public int value ; <nl> } <nl> @ @ - 36 , 6 + 41 , 7 @ @ public class UnionTest extends TestCase { <nl> public int intField ; <nl> public long longField ; <nl> public TestStructure structField ; <nl> + public BigTestStructure structField2 ; <nl> public String string ; <nl> public WString wstring ; <nl> public Pointer pointer ; <nl> @ @ - 50 , 7 + 56 , 8 @ @ public class UnionTest extends TestCase { <nl> <nl> public void testCalculateSize ( ) { <nl> Union u = new SizedUnion ( ) ; <nl> - assertEquals ( " Union should be size of largest field " , 8 , u . size ( ) ) ; <nl> + assertEquals ( " Union should be size of largest field " , <nl> + new BigTestStructure ( ) . size ( ) , u . size ( ) ) ; <nl> } <nl> <nl> public void testFieldOffsets ( ) { <nl> @ @ - 125 , 11 + 132 , 11 @ @ public class UnionTest extends TestCase { <nl> public void testReadTypeInfo ( ) { <nl> SizedUnion u = new SizedUnion ( ) ; <nl> assertEquals ( " Type should be that of longest field if no field active " , <nl> - Structure . getTypeInfo ( new Long ( 0 ) ) , <nl> + Structure . getTypeInfo ( BigTestStructure . class ) , <nl> u . getTypeInfo ( ) ) ; <nl> u . setType ( int . class ) ; <nl> assertEquals ( " Type should be that of longest field if field active " , <nl> - Structure . getTypeInfo ( new Long ( 0 ) ) , <nl> + Structure . getTypeInfo ( BigTestStructure . class ) , <nl> u . getTypeInfo ( ) ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / native / dispatch . c b / native / dispatch . c 
 index 50bb49c . . f8797ad 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 169 , 6 + 169 , 7 @ @ static jclass classAttachOptions ; 
 static jclass classNativeMapped ; 
 static jclass classIntegerType ; 
 static jclass classPointerType ; 
 + static jclass classJNIEnv ; 
 static jclass class _ ffi _ callback ; 
 
 static jmethodID MID _ Class _ getComponentType ; 
 @ @ - 540 , 6 + 541 , 11 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray args , 
 arg _ types [ i ] = & ffi _ type _ pointer ; 
 arg _ values [ i ] = & c _ args [ i ] . l ; 
 } 
 + else if ( ( * env ) - > IsInstanceOf ( env , arg , classJNIEnv ) ) { 
 + c _ args [ i ] . l = ( void * ) env ; 
 + arg _ types [ i ] = & ffi _ type _ pointer ; 
 + arg _ values [ i ] = & c _ args [ i ] . l ; 
 + } 
 else if ( ( * env ) - > IsInstanceOf ( env , arg , classStructure ) ) { 
 c _ args [ i ] . l = getStructureAddress ( env , arg ) ; 
 arg _ types [ i ] = getStructureType ( env , arg ) ; 
 @ @ - 1793 , 6 + 1799 , 9 @ @ dispatch _ direct ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { 
 case CVT _ POINTER : 
 * ( void * * ) args [ i ] = getNativeAddress ( env , * ( void * * ) args [ i ] ) ; 
 break ; 
 + case CVT _ JNIENV : 
 + * ( void * * ) args [ i ] = ( void * ) env ; 
 + break ; 
 case CVT _ STRUCTURE : 
 objects [ i ] = * ( void * * ) args [ i ] ; 
 writeStructure ( env , * ( void * * ) args [ i ] ) ; 
 @ @ - 2959 , 6 + 2968 , 10 @ @ Java _ com _ sun _ jna _ Native _ initIDs ( JNIEnv * env , jclass cls ) { 
 throwByName ( env , EUnsatisfiedLink , 
 " Can ' t obtain constructor for class com . sun . jna . WString " ) ; 
 } 
 + else if ( ! LOAD _ CREF ( env , JNIEnv , " com / sun / jna / JNIEnv " ) ) { 
 + throwByName ( env , EUnsatisfiedLink , 
 + " Can ' t obtain class com . sun . jna . JNIEnv " ) ; 
 + } 
 else if ( ! LOAD _ CREF ( env , _ ffi _ callback , " com / sun / jna / Native $ ffi _ callback " ) ) { 
 throwByName ( env , EUnsatisfiedLink , 
 " Can ' t obtain class com . sun . jna . Native $ ffi _ callback " ) ; 
 diff - - git a / native / dispatch . h b / native / dispatch . h 
 index 91ddd27 . . aed8c89 100644 
 - - - a / native / dispatch . h 
 + + + b / native / dispatch . h 
 @ @ - 116 , 6 + 116 , 7 @ @ enum { 
 CVT _ TYPE _ MAPPER _ STRING = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER _ STRING , 
 CVT _ TYPE _ MAPPER _ WSTRING = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER _ WSTRING , 
 CVT _ OBJECT = com _ sun _ jna _ Native _ CVT _ OBJECT , 
 + CVT _ JNIENV = com _ sun _ jna _ Native _ CVT _ JNIENV , 
 } ; 
 
 / * callback behavior flags * / 
 diff - - git a / native / testlib . c b / native / testlib . c 
 index 0747e45 . . 4c8387f 100644 
 - - - a / native / testlib . c 
 + + + b / native / testlib . c 
 @ @ - 1026 , 6 + 1026 , 11 @ @ Java _ com _ sun _ jna _ PerformanceTest _ 00024JNILibrary _ getpid ( JNIEnv * UNUSED ( env ) , jcl 
 # endif 
 } 
 
 + EXPORT jclass 
 + returnClass ( JNIEnv * env , jobject arg ) { 
 + return ( * env ) - > GetObjectClass ( env , arg ) ; 
 + } 
 + 
 # ifdef _ _ cplusplus 
 } 
 # endif 
 diff - - git a / src / com / sun / jna / JNIEnv . java b / src / com / sun / jna / JNIEnv . java 
 new file mode 100644 
 index 0000000 . . e6205f5 
 - - - / dev / null 
 + + + b / src / com / sun / jna / JNIEnv . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + / * 
 + * The contents of this file is dual - licensed under 2 
 + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and 
 + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . 
 + * 
 + * You can freely decide which license you want to apply to 
 + * the project . 
 + * 
 + * You may obtain a copy of the LGPL License at : 
 + * 
 + * http : / / www . gnu . org / licenses / licenses . html 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " LGPL2 . 1 " . 
 + * 
 + * You may obtain a copy of the Apache License at : 
 + * 
 + * http : / / www . apache . org / licenses / 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " AL2 . 0 " . 
 + * / 
 + package com . sun . jna ; 
 + 
 + / * * Marker type for the JNIEnv pointer . 
 + * Use this to wrap native methods that take a JNIEnv * parameter . 
 + * Pass { @ link JNIEnv # CURRENT } as the argument . 
 + * / 
 + public final class JNIEnv { 
 + / * * Marker object representing the current thread ' s JNIEnv pointer . * / 
 + public static final JNIEnv CURRENT = new JNIEnv ( ) ; 
 + 
 + private JNIEnv ( ) { } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index cc28856 . . 7b7a7d4 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 1535 , 6 + 1535 , 7 @ @ public final class Native implements Version { 
 private static final int CVT _ TYPE _ MAPPER _ STRING = 24 ; 
 private static final int CVT _ TYPE _ MAPPER _ WSTRING = 25 ; 
 private static final int CVT _ OBJECT = 26 ; 
 + private static final int CVT _ JNIENV = 27 ; 
 
 private static int getConversion ( Class < ? > type , TypeMapper mapper , boolean allowObjects ) { 
 if ( type = = Boolean . class ) type = boolean . class ; 
 @ @ - 1625 , 6 + 1626 , 9 @ @ public final class Native implements Version { 
 } 
 return CVT _ NATIVE _ MAPPED ; 
 } 
 + if ( JNIEnv . class = = type ) { 
 + return CVT _ JNIENV ; 
 + } 
 return allowObjects ? CVT _ OBJECT : CVT _ UNSUPPORTED ; 
 } 
 
 diff - - git a / test / com / sun / jna / DirectReturnTypesTest . java b / test / com / sun / jna / DirectReturnTypesTest . java 
 index 593b3d2 . . 69e9201 100644 
 - - - a / test / com / sun / jna / DirectReturnTypesTest . java 
 + + + b / test / com / sun / jna / DirectReturnTypesTest . java 
 @ @ - 42 , 6 + 42 , 10 @ @ public class DirectReturnTypesTest extends ReturnTypesTest { 
 throw new IllegalArgumentException ( s . getClass ( ) . getName ( ) ) ; 
 } 
 @ Override 
 + public Class returnClass ( JNIEnv env , Object arg ) { 
 + throw new IllegalArgumentException ( arg . getClass ( ) . getName ( ) ) ; 
 + } 
 + @ Override 
 public native boolean returnFalse ( ) ; 
 @ Override 
 public native boolean returnTrue ( ) ; 
 @ @ - 95 , 6 + 99 , 8 @ @ public class DirectReturnTypesTest extends ReturnTypesTest { 
 public native Object returnObjectArgument ( Object s ) ; 
 @ Override 
 public native TestObject returnObjectArgument ( TestObject s ) ; 
 + @ Override 
 + public native Class returnClass ( JNIEnv env , Object arg ) ; 
 
 static { 
 Native . register ( NativeLibrary . getInstance ( " testlib " , 
 diff - - git a / test / com / sun / jna / ReturnTypesTest . java b / test / com / sun / jna / ReturnTypesTest . java 
 index 0c98a9a . . f85288b 100644 
 - - - a / test / com / sun / jna / ReturnTypesTest . java 
 + + + b / test / com / sun / jna / ReturnTypesTest . java 
 @ @ - 107 , 6 + 107 , 7 @ @ public class ReturnTypesTest extends TestCase { 
 class TestObject { } 
 Object returnObjectArgument ( Object s ) ; 
 TestObject returnObjectArgument ( TestObject s ) ; 
 + Class returnClass ( JNIEnv env , Object arg ) ; 
 boolean returnFalse ( ) ; 
 boolean returnTrue ( ) ; 
 int returnInt32Zero ( ) ; 
 @ @ - 138 , 7 + 139 , 8 @ @ public class ReturnTypesTest extends TestCase { 
 @ Override 
 protected void setUp ( ) { 
 lib = Native . loadLibrary ( " testlib " , TestLibrary . class ) ; 
 - libSupportingObject = Native . loadLibrary ( " testlib " , TestLibrary . class , Collections . singletonMap ( Library . OPTION _ ALLOW _ OBJECTS , Boolean . TRUE ) ) ; 
 + libSupportingObject = Native . loadLibrary ( " testlib " , TestLibrary . class , 
 + Collections . singletonMap ( Library . OPTION _ ALLOW _ OBJECTS , Boolean . TRUE ) ) ; 
 libNativeMapped = Native . loadLibrary ( " testlib " , NativeMappedLibrary . class ) ; 
 } 
 
 @ @ - 174 , 6 + 176 , 13 @ @ public class ReturnTypesTest extends TestCase { 
 } 
 } 
 
 + public void testReturnClass ( ) throws Exception { 
 + assertEquals ( " Wrong class returned " , Class . class , 
 + libSupportingObject . returnClass ( JNIEnv . CURRENT , TestLibrary . class ) ) ; 
 + assertEquals ( " Wrong class returned " , StringBuilder . class , 
 + libSupportingObject . returnClass ( JNIEnv . CURRENT , new StringBuilder ( ) ) ) ; 
 + } 
 + 
 public void testInvokeBoolean ( ) { 
 assertFalse ( " Expect false " , lib . returnFalse ( ) ) ; 
 assertTrue ( " Expect true " , lib . returnTrue ( ) ) ; 
 @ @ - 349 , 4 + 358 , 4 @ @ public class ReturnTypesTest extends TestCase { 
 junit . textui . TestRunner . run ( ReturnTypesTest . class ) ; 
 } 
 
 - } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / jnalib / src / com / sun / jna / Structure . java b / jnalib / src / com / sun / jna / Structure . java 
 index 12d2d8b . . 6ef97f9 100644 
 - - - a / jnalib / src / com / sun / jna / Structure . java 
 + + + b / jnalib / src / com / sun / jna / Structure . java 
 @ @ - 1437 , 6 + 1437 , 8 @ @ public abstract class Structure { 
 static Pointer get ( Object obj ) { 
 if ( obj = = null ) 
 return FFITypes . ffi _ type _ pointer ; 
 + if ( obj instanceof Class ) 
 + return get ( null , ( Class ) obj ) ; 
 return get ( obj , obj . getClass ( ) ) ; 
 } 
 
 diff - - git a / jnalib / test / com / sun / jna / UnionTest . java b / jnalib / test / com / sun / jna / UnionTest . java 
 index 79158d3 . . fc3283c 100644 
 - - - a / jnalib / test / com / sun / jna / UnionTest . java 
 + + + b / jnalib / test / com / sun / jna / UnionTest . java 
 @ @ - 20 , 6 + 20 , 11 @ @ public class UnionTest extends TestCase { 
 public String value ; 
 } 
 
 + public static class BigTestStructure extends Structure { 
 + public long field1 ; 
 + public long field2 ; 
 + } 
 + 
 public static class IntStructure extends Structure { 
 public int value ; 
 } 
 @ @ - 36 , 6 + 41 , 7 @ @ public class UnionTest extends TestCase { 
 public int intField ; 
 public long longField ; 
 public TestStructure structField ; 
 + public BigTestStructure structField2 ; 
 public String string ; 
 public WString wstring ; 
 public Pointer pointer ; 
 @ @ - 50 , 7 + 56 , 8 @ @ public class UnionTest extends TestCase { 
 
 public void testCalculateSize ( ) { 
 Union u = new SizedUnion ( ) ; 
 - assertEquals ( " Union should be size of largest field " , 8 , u . size ( ) ) ; 
 + assertEquals ( " Union should be size of largest field " , 
 + new BigTestStructure ( ) . size ( ) , u . size ( ) ) ; 
 } 
 
 public void testFieldOffsets ( ) { 
 @ @ - 125 , 11 + 132 , 11 @ @ public class UnionTest extends TestCase { 
 public void testReadTypeInfo ( ) { 
 SizedUnion u = new SizedUnion ( ) ; 
 assertEquals ( " Type should be that of longest field if no field active " , 
 - Structure . getTypeInfo ( new Long ( 0 ) ) , 
 + Structure . getTypeInfo ( BigTestStructure . class ) , 
 u . getTypeInfo ( ) ) ; 
 u . setType ( int . class ) ; 
 assertEquals ( " Type should be that of longest field if field active " , 
 - Structure . getTypeInfo ( new Long ( 0 ) ) , 
 + Structure . getTypeInfo ( BigTestStructure . class ) , 
 u . getTypeInfo ( ) ) ; 
 } 

