BLEU SCORE: 0.05876350803261633

TEST MSG: add more test coverage
GENERATED MSG: Add explicit test for matching linux versioned libs

TEST DIFF (one line): diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java <nl> index 415eecb . . fbd8bc8 100644 <nl> - - - a / test / com / sun / jna / LibraryLoadTest . java <nl> + + + b / test / com / sun / jna / LibraryLoadTest . java <nl> @ @ - 74 , 6 + 74 , 11 @ @ public class LibraryLoadTest extends TestCase implements Paths { <nl> NativeLibrary . getInstance ( " testlib " ) ; <nl> } <nl> <nl> + public void testLoadFromCustomPath ( ) throws MalformedURLException { <nl> + NativeLibrary . addSearchPath ( " testlib - path " , TESTPATH ) ; <nl> + NativeLibrary . getInstance ( " testlib - path " , new TestLoader ( new File ( " . " ) ) ) ; <nl> + } <nl> + <nl> public void testLoadFromClasspath ( ) throws MalformedURLException { <nl> NativeLibrary . getInstance ( " testlib - path " , new TestLoader ( new File ( TESTPATH ) ) ) ; <nl> } <nl> diff - - git a / test / com / sun / jna / NativeLibraryTest . java b / test / com / sun / jna / NativeLibraryTest . java <nl> index 0c3906f . . c9f6bba 100644 <nl> - - - a / test / com / sun / jna / NativeLibraryTest . java <nl> + + + b / test / com / sun / jna / NativeLibraryTest . java <nl> @ @ - 122 , 6 + 122 , 28 @ @ public class NativeLibraryTest extends TestCase { <nl> int count2 = lib2 . callCount ( ) ; <nl> assertEquals ( " Simple library name not aliased " , count + 1 , count2 ) ; <nl> } <nl> + <nl> + public void testRejectNullFunctionName ( ) { <nl> + NativeLibrary lib = NativeLibrary . getInstance ( " testlib " ) ; <nl> + try { <nl> + Function f = lib . getFunction ( null ) ; <nl> + fail ( " Function must have a name " ) ; <nl> + } <nl> + catch ( NullPointerException e ) { <nl> + } <nl> + } <nl> + <nl> + public void testIncludeSymbolNameInLookupError ( ) { <nl> + NativeLibrary lib = NativeLibrary . getInstance ( " testlib " ) ; <nl> + try { <nl> + lib . getGlobalVariableAddress ( getName ( ) ) ; <nl> + fail ( " Non - existent global variable lookup should fail " ) ; <nl> + } <nl> + catch ( UnsatisfiedLinkError e ) { <nl> + assertTrue ( " Expect symbol name in error message : " + e . getMessage ( ) , e . getMessage ( ) . indexOf ( getName ( ) ) ! = - 1 ) ; <nl> + } <nl> + } <nl> + <nl> public void testFunctionHoldsLibraryReference ( ) throws Exception { <nl> NativeLibrary lib = NativeLibrary . getInstance ( " testlib " ) ; <nl> WeakReference ref = new WeakReference ( lib ) ;
NEAREST DIFF (one line): diff - - git a / jnalib / src / com / sun / jna / Native . java b / jnalib / src / com / sun / jna / Native . java <nl> index 1a5a0ca . . 7b2be2f 100644 <nl> - - - a / jnalib / src / com / sun / jna / Native . java <nl> + + + b / jnalib / src / com / sun / jna / Native . java <nl> @ @ - 643 , 7 + 643 , 7 @ @ public final class Native { <nl> f . setAccessible ( true ) ; <nl> String name = ( String ) f . get ( lib ) ; <nl> if ( name . equals ( path ) ) { <nl> - Method m = lib . getClass ( ) . getDeclaredMethod ( " unload " , new Class [ 0 ] ) ; <nl> + Method m = lib . getClass ( ) . getDeclaredMethod ( " finalize " , new Class [ 0 ] ) ; <nl> m . setAccessible ( true ) ; <nl> m . invoke ( lib , new Object [ 0 ] ) ; <nl> return true ;

TEST DIFF:
diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java 
 index 415eecb . . fbd8bc8 100644 
 - - - a / test / com / sun / jna / LibraryLoadTest . java 
 + + + b / test / com / sun / jna / LibraryLoadTest . java 
 @ @ - 74 , 6 + 74 , 11 @ @ public class LibraryLoadTest extends TestCase implements Paths { 
 NativeLibrary . getInstance ( " testlib " ) ; 
 } 
 
 + public void testLoadFromCustomPath ( ) throws MalformedURLException { 
 + NativeLibrary . addSearchPath ( " testlib - path " , TESTPATH ) ; 
 + NativeLibrary . getInstance ( " testlib - path " , new TestLoader ( new File ( " . " ) ) ) ; 
 + } 
 + 
 public void testLoadFromClasspath ( ) throws MalformedURLException { 
 NativeLibrary . getInstance ( " testlib - path " , new TestLoader ( new File ( TESTPATH ) ) ) ; 
 } 
 diff - - git a / test / com / sun / jna / NativeLibraryTest . java b / test / com / sun / jna / NativeLibraryTest . java 
 index 0c3906f . . c9f6bba 100644 
 - - - a / test / com / sun / jna / NativeLibraryTest . java 
 + + + b / test / com / sun / jna / NativeLibraryTest . java 
 @ @ - 122 , 6 + 122 , 28 @ @ public class NativeLibraryTest extends TestCase { 
 int count2 = lib2 . callCount ( ) ; 
 assertEquals ( " Simple library name not aliased " , count + 1 , count2 ) ; 
 } 
 + 
 + public void testRejectNullFunctionName ( ) { 
 + NativeLibrary lib = NativeLibrary . getInstance ( " testlib " ) ; 
 + try { 
 + Function f = lib . getFunction ( null ) ; 
 + fail ( " Function must have a name " ) ; 
 + } 
 + catch ( NullPointerException e ) { 
 + } 
 + } 
 + 
 + public void testIncludeSymbolNameInLookupError ( ) { 
 + NativeLibrary lib = NativeLibrary . getInstance ( " testlib " ) ; 
 + try { 
 + lib . getGlobalVariableAddress ( getName ( ) ) ; 
 + fail ( " Non - existent global variable lookup should fail " ) ; 
 + } 
 + catch ( UnsatisfiedLinkError e ) { 
 + assertTrue ( " Expect symbol name in error message : " + e . getMessage ( ) , e . getMessage ( ) . indexOf ( getName ( ) ) ! = - 1 ) ; 
 + } 
 + } 
 + 
 public void testFunctionHoldsLibraryReference ( ) throws Exception { 
 NativeLibrary lib = NativeLibrary . getInstance ( " testlib " ) ; 
 WeakReference ref = new WeakReference ( lib ) ;

NEAREST DIFF:
diff - - git a / jnalib / src / com / sun / jna / Native . java b / jnalib / src / com / sun / jna / Native . java 
 index 1a5a0ca . . 7b2be2f 100644 
 - - - a / jnalib / src / com / sun / jna / Native . java 
 + + + b / jnalib / src / com / sun / jna / Native . java 
 @ @ - 643 , 7 + 643 , 7 @ @ public final class Native { 
 f . setAccessible ( true ) ; 
 String name = ( String ) f . get ( lib ) ; 
 if ( name . equals ( path ) ) { 
 - Method m = lib . getClass ( ) . getDeclaredMethod ( " unload " , new Class [ 0 ] ) ; 
 + Method m = lib . getClass ( ) . getDeclaredMethod ( " finalize " , new Class [ 0 ] ) ; 
 m . setAccessible ( true ) ; 
 m . invoke ( lib , new Object [ 0 ] ) ; 
 return true ;
