BLEU SCORE: 0.11598118436136108

TEST MSG: Fix GCC8 warnings
GENERATED MSG: fix placement of exception throw

TEST DIFF (one line): diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index 072aed4 . . 6cee809 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 653 , 7 + 653 , 7 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray args , <nl> int err = GET _ LAST _ ERROR ( ) ; <nl> JNA _ set _ last _ error ( env , err ) ; <nl> if ( ( flags & THROW _ LAST _ ERROR ) & & err ) { <nl> - char emsg [ MSG _ SIZE ] ; <nl> + char emsg [ MSG _ SIZE - 3 / * literal characters * / - 10 / * max length of % d * / ] ; <nl> snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , err , STR _ ERROR ( err , emsg , sizeof ( emsg ) ) ) ; <nl> throw _ type = ELastError ; <nl> throw _ msg = msg ; <nl> @ @ - 1896 , 7 + 1896 , 7 @ @ dispatch _ direct ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { <nl> int err = GET _ LAST _ ERROR ( ) ; <nl> JNA _ set _ last _ error ( env , err ) ; <nl> if ( data - > throw _ last _ error & & err ) { <nl> - char emsg [ MSG _ SIZE ] ; <nl> + char emsg [ MSG _ SIZE - 3 / * literal characters * / - 10 / * max length of % d * / ] ; <nl> snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , err , STR _ ERROR ( err , emsg , sizeof ( emsg ) ) ) ; <nl> throw _ type = ELastError ; <nl> throw _ msg = msg ; <nl> @ @ - 3096 , 7 + 3096 , 7 @ @ Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * UNUSED _ JAWT ( env ) , jclass UNUSED <nl> return - 1 ; <nl> } <nl> if ( ( pJAWT _ GetAWT = ( void * ) FIND _ ENTRY ( jawt _ handle , METHOD _ NAME ) ) = = NULL ) { <nl> - char msg [ MSG _ SIZE ] , buf [ MSG _ SIZE ] ; <nl> + char msg [ MSG _ SIZE ] , buf [ MSG _ SIZE - 31 / * literal characters * / - sizeof ( METHOD _ NAME ) ] ; <nl> snprintf ( msg , sizeof ( msg ) , " Error looking up JAWT method % s : % s " , <nl> METHOD _ NAME , LOAD _ ERROR ( buf , sizeof ( buf ) ) ) ; <nl> throwByName ( env , EUnsatisfiedLink , msg ) ; <nl> diff - - git a / native / testlib . c b / native / testlib . c <nl> index 575cf01 . . 609ed75 100644 <nl> - - - a / native / testlib . c <nl> + + + b / native / testlib . c <nl> @ @ - 805 , 7 + 805 , 7 @ @ callCallbackWithStructByValue ( TestStructureByValue ( * func ) ( TestStructureByValue ) <nl> <nl> EXPORT callback _ t <nl> callCallbackWithCallback ( cb _ callback _ t cb ) { <nl> - return ( * cb ) ( ( callback _ t ) cb ) ; <nl> + return ( * cb ) ( ( callback _ t ) ( void * ) cb ) ; <nl> } <nl> <nl> static int32 _ t
NEAREST DIFF (one line): diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java <nl> index f575b75 . . 45e2b2c 100644 <nl> - - - a / jnalib / test / com / sun / jna / WebStartTest . java <nl> + + + b / jnalib / test / com / sun / jna / WebStartTest . java <nl> @ @ - 167 , 8 + 167 , 8 @ @ public class WebStartTest extends TestCase { <nl> out . start ( ) ; <nl> } <nl> catch ( SocketTimeoutException e ) { <nl> - / / p . destroy ( ) ; <nl> - / / throw new Error ( " JWS Timed out " ) ; <nl> + p . destroy ( ) ; <nl> + throw new Error ( " JWS Timed out " ) ; <nl> } <nl> p . waitFor ( ) ; <nl> <nl> @ @ - 223 , 6 + 223 , 7 @ @ public class WebStartTest extends TestCase { <nl> String path = System . getProperty ( " user . home " ) ; <nl> File deployment ; <nl> if ( Platform . isWindows ( ) ) { <nl> + / / FIXME " Sun " might be " IBM " or other vendor <nl> deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; <nl> } <nl> else if ( Platform . isMac ( ) ) { <nl> @ @ - 242 , 8 + 243 , 8 @ @ public class WebStartTest extends TestCase { <nl> private static final String CERTS _ KEY = <nl> " deployment . user . security . trusted . certs " ; <nl> public void runBare ( ) throws Throwable { <nl> - / / FIXME not yet cleanly running on windows , not tested on linux <nl> - if ( ! Platform . isMac ( ) ) return ; <nl> + / / FIXME only tested on mac and windows <nl> + if ( ! Platform . isMac ( ) & & ! Platform . isWindows ( ) ) return ; <nl> <nl> if ( runningWebStart ( ) ) { <nl> super . runBare ( ) ; <nl> @ @ - 262 , 12 + 263 , 16 @ @ public class WebStartTest extends TestCase { <nl> props . putAll ( saved ) ; <nl> props . setProperty ( CERTS _ KEY , new File ( " jna . keystore " ) . getAbsolutePath ( ) ) ; <nl> props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; <nl> - props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; <nl> + os = new FileOutputStream ( dpfile ) ; <nl> + props . store ( os , " deployment . properties ( for testing ) " ) ; <nl> + os . close ( ) ; <nl> try { <nl> runTestUnderWebStart ( ) ; <nl> } <nl> finally { <nl> - saved . store ( new FileOutputStream ( dpfile ) , " deployment . properties " ) ; <nl> + os = new FileOutputStream ( dpfile ) ; <nl> + saved . store ( os , " deployment . properties " ) ; <nl> + os . close ( ) ; <nl> } <nl> } <nl> } <nl> @ @ - 284 , 24 + 289 , 21 @ @ public class WebStartTest extends TestCase { <nl> Enumeration e = result . failures ( ) ; <nl> Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; <nl> t . printStackTrace ( new PrintStream ( os ) ) ; <nl> - s . close ( ) ; <nl> - System . exit ( 1 ) ; <nl> } <nl> else if ( result . errorCount ( ) ! = 0 ) { <nl> Enumeration e = result . errors ( ) ; <nl> Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; <nl> t . printStackTrace ( new PrintStream ( os ) ) ; <nl> - s . close ( ) ; <nl> - System . exit ( 2 ) ; <nl> } <nl> + / / NOTE : System . exit with non - zero status causes an error dialog <nl> + / / on w32 sun " 1 . 6 . 0 _ 14 " ( build 1 . 6 . 0 _ 14 - b08 ) <nl> s . close ( ) ; <nl> - Thread . sleep ( 5000 ) ; <nl> System . exit ( 0 ) ; <nl> } <nl> catch ( Throwable e ) { <nl> / / Can ' t communicate back to launching process <nl> showMessage ( " ERROR : " + e . getMessage ( ) ) ; <nl> - System . exit ( - 1 ) ; <nl> + System . exit ( 0 ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / native / dispatch . c b / native / dispatch . c 
 index 072aed4 . . 6cee809 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 653 , 7 + 653 , 7 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray args , 
 int err = GET _ LAST _ ERROR ( ) ; 
 JNA _ set _ last _ error ( env , err ) ; 
 if ( ( flags & THROW _ LAST _ ERROR ) & & err ) { 
 - char emsg [ MSG _ SIZE ] ; 
 + char emsg [ MSG _ SIZE - 3 / * literal characters * / - 10 / * max length of % d * / ] ; 
 snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , err , STR _ ERROR ( err , emsg , sizeof ( emsg ) ) ) ; 
 throw _ type = ELastError ; 
 throw _ msg = msg ; 
 @ @ - 1896 , 7 + 1896 , 7 @ @ dispatch _ direct ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { 
 int err = GET _ LAST _ ERROR ( ) ; 
 JNA _ set _ last _ error ( env , err ) ; 
 if ( data - > throw _ last _ error & & err ) { 
 - char emsg [ MSG _ SIZE ] ; 
 + char emsg [ MSG _ SIZE - 3 / * literal characters * / - 10 / * max length of % d * / ] ; 
 snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , err , STR _ ERROR ( err , emsg , sizeof ( emsg ) ) ) ; 
 throw _ type = ELastError ; 
 throw _ msg = msg ; 
 @ @ - 3096 , 7 + 3096 , 7 @ @ Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * UNUSED _ JAWT ( env ) , jclass UNUSED 
 return - 1 ; 
 } 
 if ( ( pJAWT _ GetAWT = ( void * ) FIND _ ENTRY ( jawt _ handle , METHOD _ NAME ) ) = = NULL ) { 
 - char msg [ MSG _ SIZE ] , buf [ MSG _ SIZE ] ; 
 + char msg [ MSG _ SIZE ] , buf [ MSG _ SIZE - 31 / * literal characters * / - sizeof ( METHOD _ NAME ) ] ; 
 snprintf ( msg , sizeof ( msg ) , " Error looking up JAWT method % s : % s " , 
 METHOD _ NAME , LOAD _ ERROR ( buf , sizeof ( buf ) ) ) ; 
 throwByName ( env , EUnsatisfiedLink , msg ) ; 
 diff - - git a / native / testlib . c b / native / testlib . c 
 index 575cf01 . . 609ed75 100644 
 - - - a / native / testlib . c 
 + + + b / native / testlib . c 
 @ @ - 805 , 7 + 805 , 7 @ @ callCallbackWithStructByValue ( TestStructureByValue ( * func ) ( TestStructureByValue ) 
 
 EXPORT callback _ t 
 callCallbackWithCallback ( cb _ callback _ t cb ) { 
 - return ( * cb ) ( ( callback _ t ) cb ) ; 
 + return ( * cb ) ( ( callback _ t ) ( void * ) cb ) ; 
 } 
 
 static int32 _ t

NEAREST DIFF:
diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java 
 index f575b75 . . 45e2b2c 100644 
 - - - a / jnalib / test / com / sun / jna / WebStartTest . java 
 + + + b / jnalib / test / com / sun / jna / WebStartTest . java 
 @ @ - 167 , 8 + 167 , 8 @ @ public class WebStartTest extends TestCase { 
 out . start ( ) ; 
 } 
 catch ( SocketTimeoutException e ) { 
 - / / p . destroy ( ) ; 
 - / / throw new Error ( " JWS Timed out " ) ; 
 + p . destroy ( ) ; 
 + throw new Error ( " JWS Timed out " ) ; 
 } 
 p . waitFor ( ) ; 
 
 @ @ - 223 , 6 + 223 , 7 @ @ public class WebStartTest extends TestCase { 
 String path = System . getProperty ( " user . home " ) ; 
 File deployment ; 
 if ( Platform . isWindows ( ) ) { 
 + / / FIXME " Sun " might be " IBM " or other vendor 
 deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; 
 } 
 else if ( Platform . isMac ( ) ) { 
 @ @ - 242 , 8 + 243 , 8 @ @ public class WebStartTest extends TestCase { 
 private static final String CERTS _ KEY = 
 " deployment . user . security . trusted . certs " ; 
 public void runBare ( ) throws Throwable { 
 - / / FIXME not yet cleanly running on windows , not tested on linux 
 - if ( ! Platform . isMac ( ) ) return ; 
 + / / FIXME only tested on mac and windows 
 + if ( ! Platform . isMac ( ) & & ! Platform . isWindows ( ) ) return ; 
 
 if ( runningWebStart ( ) ) { 
 super . runBare ( ) ; 
 @ @ - 262 , 12 + 263 , 16 @ @ public class WebStartTest extends TestCase { 
 props . putAll ( saved ) ; 
 props . setProperty ( CERTS _ KEY , new File ( " jna . keystore " ) . getAbsolutePath ( ) ) ; 
 props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; 
 - props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; 
 + os = new FileOutputStream ( dpfile ) ; 
 + props . store ( os , " deployment . properties ( for testing ) " ) ; 
 + os . close ( ) ; 
 try { 
 runTestUnderWebStart ( ) ; 
 } 
 finally { 
 - saved . store ( new FileOutputStream ( dpfile ) , " deployment . properties " ) ; 
 + os = new FileOutputStream ( dpfile ) ; 
 + saved . store ( os , " deployment . properties " ) ; 
 + os . close ( ) ; 
 } 
 } 
 } 
 @ @ - 284 , 24 + 289 , 21 @ @ public class WebStartTest extends TestCase { 
 Enumeration e = result . failures ( ) ; 
 Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; 
 t . printStackTrace ( new PrintStream ( os ) ) ; 
 - s . close ( ) ; 
 - System . exit ( 1 ) ; 
 } 
 else if ( result . errorCount ( ) ! = 0 ) { 
 Enumeration e = result . errors ( ) ; 
 Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; 
 t . printStackTrace ( new PrintStream ( os ) ) ; 
 - s . close ( ) ; 
 - System . exit ( 2 ) ; 
 } 
 + / / NOTE : System . exit with non - zero status causes an error dialog 
 + / / on w32 sun " 1 . 6 . 0 _ 14 " ( build 1 . 6 . 0 _ 14 - b08 ) 
 s . close ( ) ; 
 - Thread . sleep ( 5000 ) ; 
 System . exit ( 0 ) ; 
 } 
 catch ( Throwable e ) { 
 / / Can ' t communicate back to launching process 
 showMessage ( " ERROR : " + e . getMessage ( ) ) ; 
 - System . exit ( - 1 ) ; 
 + System . exit ( 0 ) ; 
 } 
 } 

