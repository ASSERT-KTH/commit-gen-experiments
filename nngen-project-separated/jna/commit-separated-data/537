BLEU SCORE: 0.020980574531482755

TEST MSG: Remove xfail for arm * - * - * .
GENERATED MSG: Updated some mips XFAILs

TEST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 3934695 . . 92e0b8b 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 12 @ @ <nl> + 2013 - 02 - 08 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * testsuite / libffi . call / cls _ longdouble . c : Remove xfail for <nl> + 	 arm * - * - * . <nl> + <nl> + 2013 - 02 - 08 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * src / sparc / ffi . c ( ffi _ prep _ closure _ loc ) : Fix cache flushing for GCC . <nl> + <nl> 2013 - 02 - 08 Matthias Klose < doko @ ubuntu . com > <nl> <nl> 	 * man / ffi _ prep _ cif . 3 : Clean up for debian linter . <nl> diff - - git a / testsuite / libffi . call / cls _ longdouble . c b / testsuite / libffi . call / cls _ longdouble . c <nl> index e6bac1f . . 5dc9ac7 100644 <nl> - - - a / testsuite / libffi . call / cls _ longdouble . c <nl> + + + b / testsuite / libffi . call / cls _ longdouble . c <nl> @ @ - 5 , 7 + 5 , 9 @ @ <nl> Originator : 	 Blake Chaffin 	 * / <nl> <nl> / * { dg - excess - errors " no long double format " { xfail x86 _ 64 - * - mingw * x86 _ 64 - * - cygwin * } } * / <nl> - / * { dg - do run { xfail arm * - * - * strongarm * - * - * xscale * - * - * } } * / <nl> + / * This test is known to PASS on armv7l - unknown - linux - gnueabihf , so I have <nl> + remove the xfail for arm * - * - * below , until we know more . * / <nl> + / * { dg - do run { xfail strongarm * - * - * xscale * - * - * } } * / <nl> / * { dg - options - mlong - double - 128 { target powerpc64 * - * - linux * } } * / <nl> / * { dg - output " " { xfail x86 _ 64 - * - mingw * x86 _ 64 - * - cygwin * } } * / <nl>
NEAREST DIFF (one line): diff - - git a / ChangeLog . libffi b / ChangeLog . libffi <nl> index f1db242 . . a61b3bc 100644 <nl> - - - a / ChangeLog . libffi <nl> + + + b / ChangeLog . libffi <nl> @ @ - 1 , 8 + 1 , 9 @ @ <nl> 2009 - 12 - 26 Andreas Tobler < a . tobler @ schweiz . org > <nl> + 	 Anthony Green < green @ redhat . com > <nl> <nl> 	 * testsuite / libffi . call / huge _ struct . c ( test _ large _ fn ) : Replace <nl> - 	 format code % p with % # x because % p does not add a leading 0x on <nl> - 	 Solaris . Also case relevant arguments to unsigned int . <nl> + 	 format code % p with % # lx because % p does not add a leading 0x on <nl> + 	 Solaris . Also change relevant arguments to unsigned long . <nl> <nl> 2009 - 12 - 26 Andreas Schwab < schwab @ linux - m68k . org > <nl> <nl> diff - - git a / patches / fix - huge _ struct - on - solaris b / patches / fix - huge _ struct - on - solaris <nl> index e6a256b . . 09d6ca8 100644 <nl> - - - a / patches / fix - huge _ struct - on - solaris <nl> + + + b / patches / fix - huge _ struct - on - solaris <nl> @ @ - 2 , 12 + 2 , 13 @ @ Index : libffi / ChangeLog . libffi <nl> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> - - - libffi . orig / ChangeLog . libffi <nl> + + + libffi / ChangeLog . libffi <nl> - @ @ - 1 , 3 + 1 , 9 @ @ <nl> + @ @ - 1 , 3 + 1 , 10 @ @ <nl> + 2009 - 12 - 26 Andreas Tobler < a . tobler @ schweiz . org > <nl> + + 	 Anthony Green < green @ redhat . com > <nl> + <nl> + 	 * testsuite / libffi . call / huge _ struct . c ( test _ large _ fn ) : Replace <nl> - + 	 format code % p with % # x because % p does not add a leading 0x on <nl> - + 	 Solaris . Also case relevant arguments to unsigned int . <nl> + + 	 format code % p with % # lx because % p does not add a leading 0x on <nl> + + 	 Solaris . Also case relevant arguments to unsigned long . <nl> + <nl> 2009 - 12 - 26 Andreas Schwab < schwab @ linux - m68k . org > <nl> <nl> @ @ - 16 , 7 + 17 , 7 @ @ Index : libffi / testsuite / libffi . call / huge _ struct . c <nl> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> - - - libffi . orig / testsuite / libffi . call / huge _ struct . c <nl> + + + libffi / testsuite / libffi . call / huge _ struct . c <nl> - @ @ - 131 , 18 + 131 , 18 @ @ test _ large _ fn ( <nl> + @ @ - 131 , 26 + 131 , 26 @ @ test _ large _ fn ( <nl> 	 	 	 ui64 _ 4 + 4 , si64 _ 4 + 4 , f _ 4 + 4 , d _ 4 + 4 , ld _ 4 + 4 , ( char * ) ( ( intptr _ t ) p _ 4 + 4 ) , <nl> 	 	 ui8 _ 5 + 5 , si8 _ 5 + 5 } ; <nl> <nl> @ @ - 32 , 21 + 33 , 33 @ @ Index : libffi / testsuite / libffi . call / huge _ struct . c <nl> - 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , p _ 2 , <nl> - 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , p _ 3 , <nl> - 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , p _ 4 , ui8 _ 5 , si8 _ 5 , <nl> - + 	 printf ( " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd : " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , <nl> - + 	 ui8 _ 1 , si8 _ 1 , ui16 _ 1 , si16 _ 1 , ui32 _ 1 , si32 _ 1 , ui64 _ 1 , si64 _ 1 , f _ 1 , d _ 1 , ld _ 1 , ( unsigned int ) p _ 1 , <nl> - + 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , ( unsigned int ) p _ 2 , <nl> - + 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , ( unsigned int ) p _ 3 , <nl> - + 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , ( unsigned int ) p _ 4 , ui8 _ 5 , si8 _ 5 , <nl> + + 	 printf ( " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd : " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , <nl> + + 	 ui8 _ 1 , si8 _ 1 , ui16 _ 1 , si16 _ 1 , ui32 _ 1 , si32 _ 1 , ui64 _ 1 , si64 _ 1 , f _ 1 , d _ 1 , ld _ 1 , ( unsigned long ) p _ 1 , <nl> + + 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , ( unsigned long ) p _ 2 , <nl> + + 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , ( unsigned long ) p _ 3 , <nl> + + 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , ( unsigned long ) p _ 4 , ui8 _ 5 , si8 _ 5 , <nl> 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , <nl> - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , <nl> + - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , <nl> + + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , <nl> 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , <nl> + - 	 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , retVal . x , <nl> + + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , <nl> + 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , <nl> + - 	 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , retVal . jj , <nl> + + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , <nl> + 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , <nl> + - 	 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , retVal . vv , retVal . ww , retVal . xx ) ; <nl> + + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> + <nl> + 	 return 	 retVal ; <nl> + } <nl> @ @ - 298 , 18 + 298 , 18 @ @ main ( int argc _ _ UNUSED _ _ , const char * * a <nl> <nl> 	 ffi _ call ( & cif , FFI _ FN ( test _ large _ fn ) , & retVal , argValues ) ; <nl> @ @ - 55 , 22 + 68 , 22 @ @ Index : libffi / testsuite / libffi . call / huge _ struct . c <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p % hhu % hhd \ n " , <nl> - + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , <nl> + + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , <nl> 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , <nl> - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , <nl> - + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned int ) retVal . l , <nl> + + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , <nl> 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , <nl> - 	 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , retVal . x , <nl> - + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned int ) retVal . x , <nl> + + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , <nl> 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , <nl> - 	 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , retVal . jj , <nl> - + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned int ) retVal . jj , <nl> + + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , <nl> 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , <nl> - 	 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , retVal . vv , retVal . ww , retVal . xx ) ; <nl> - + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned int ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> + + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> 	 / / { dg - output " \ nres : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } <nl> <nl> 	 CHECK ( ffi _ prep _ closure _ loc ( pcl , & cif , cls _ large _ fn , NULL , code ) = = FFI _ OK ) ; <nl> @ @ - 82 , 22 + 95 , 22 @ @ Index : libffi / testsuite / libffi . call / huge _ struct . c <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p % hhu % hhd \ n " , <nl> - + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , <nl> + + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , <nl> 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , <nl> - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , <nl> - + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned int ) retVal . l , <nl> + + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , <nl> 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , <nl> - 	 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , retVal . x , <nl> - + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned int ) retVal . x , <nl> + + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , <nl> 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , <nl> - 	 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , retVal . jj , <nl> - + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned int ) retVal . jj , <nl> + + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , <nl> 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , <nl> - 	 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , retVal . vv , retVal . ww , retVal . xx ) ; <nl> - + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned int ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> + + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> 	 / / { dg - output " \ nres : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } <nl> <nl> return 0 ; <nl> diff - - git a / testsuite / libffi . call / huge _ struct . c b / testsuite / libffi . call / huge _ struct . c <nl> index 3c205dc . . 7a3bdb8 100644 <nl> - - - a / testsuite / libffi . call / huge _ struct . c <nl> + + + b / testsuite / libffi . call / huge _ struct . c <nl> @ @ - 131 , 26 + 131 , 26 @ @ test _ large _ fn ( <nl> 	 	 	 ui64 _ 4 + 4 , si64 _ 4 + 4 , f _ 4 + 4 , d _ 4 + 4 , ld _ 4 + 4 , ( char * ) ( ( intptr _ t ) p _ 4 + 4 ) , <nl> 	 	 ui8 _ 5 + 5 , si8 _ 5 + 5 } ; <nl> <nl> - 	 printf ( " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd : " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , <nl> - 	 ui8 _ 1 , si8 _ 1 , ui16 _ 1 , si16 _ 1 , ui32 _ 1 , si32 _ 1 , ui64 _ 1 , si64 _ 1 , f _ 1 , d _ 1 , ld _ 1 , ( unsigned int ) p _ 1 , <nl> - 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , ( unsigned int ) p _ 2 , <nl> - 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , ( unsigned int ) p _ 3 , <nl> - 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , ( unsigned int ) p _ 4 , ui8 _ 5 , si8 _ 5 , <nl> + 	 printf ( " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd : " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , <nl> + 	 ui8 _ 1 , si8 _ 1 , ui16 _ 1 , si16 _ 1 , ui32 _ 1 , si32 _ 1 , ui64 _ 1 , si64 _ 1 , f _ 1 , d _ 1 , ld _ 1 , ( unsigned long ) p _ 1 , <nl> + 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , ( unsigned long ) p _ 2 , <nl> + 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , ( unsigned long ) p _ 3 , <nl> + 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , ( unsigned long ) p _ 4 , ui8 _ 5 , si8 _ 5 , <nl> 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , <nl> - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , <nl> + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , <nl> 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , <nl> - 	 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , retVal . x , <nl> + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , <nl> 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , <nl> - 	 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , retVal . jj , <nl> + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , <nl> 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , <nl> - 	 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , retVal . vv , retVal . ww , retVal . xx ) ; <nl> + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> <nl> 	 return 	 retVal ; <nl> } <nl> @ @ - 298 , 18 + 298 , 18 @ @ main ( int argc _ _ UNUSED _ _ , const char * * argv _ _ UNUSED _ _ ) <nl> <nl> 	 ffi _ call ( & cif , FFI _ FN ( test _ large _ fn ) , & retVal , argValues ) ; <nl> 	 / / { dg - output " 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } <nl> - 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , <nl> + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , <nl> 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , <nl> - 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned int ) retVal . l , <nl> + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , <nl> 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , <nl> - 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned int ) retVal . x , <nl> + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , <nl> 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , <nl> - 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned int ) retVal . jj , <nl> + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , <nl> 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , <nl> - 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned int ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> 	 / / { dg - output " \ nres : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } <nl> <nl> 	 CHECK ( ffi _ prep _ closure _ loc ( pcl , & cif , cls _ large _ fn , NULL , code ) = = FFI _ OK ) ; <nl> @ @ - 326 , 18 + 326 , 18 @ @ main ( int argc _ _ UNUSED _ _ , const char * * argv _ _ UNUSED _ _ ) <nl> 	 	 ui8 , si8 , ui16 , si16 , ui32 , si32 , ui64 , si64 , f , d , ld , p , <nl> 	 	 ui8 , si8 ) ; <nl> 	 / / { dg - output " \ n1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } <nl> - 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " <nl> - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , <nl> + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " <nl> + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , <nl> 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , <nl> - 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned int ) retVal . l , <nl> + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , <nl> 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , <nl> - 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned int ) retVal . x , <nl> + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , <nl> 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , <nl> - 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned int ) retVal . jj , <nl> + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , <nl> 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , <nl> - 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned int ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; <nl> 	 / / { dg - output " \ nres : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } <nl> <nl> return 0 ;

TEST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 3934695 . . 92e0b8b 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 12 @ @ 
 + 2013 - 02 - 08 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * testsuite / libffi . call / cls _ longdouble . c : Remove xfail for 
 + 	 arm * - * - * . 
 + 
 + 2013 - 02 - 08 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * src / sparc / ffi . c ( ffi _ prep _ closure _ loc ) : Fix cache flushing for GCC . 
 + 
 2013 - 02 - 08 Matthias Klose < doko @ ubuntu . com > 
 
 	 * man / ffi _ prep _ cif . 3 : Clean up for debian linter . 
 diff - - git a / testsuite / libffi . call / cls _ longdouble . c b / testsuite / libffi . call / cls _ longdouble . c 
 index e6bac1f . . 5dc9ac7 100644 
 - - - a / testsuite / libffi . call / cls _ longdouble . c 
 + + + b / testsuite / libffi . call / cls _ longdouble . c 
 @ @ - 5 , 7 + 5 , 9 @ @ 
 Originator : 	 Blake Chaffin 	 * / 
 
 / * { dg - excess - errors " no long double format " { xfail x86 _ 64 - * - mingw * x86 _ 64 - * - cygwin * } } * / 
 - / * { dg - do run { xfail arm * - * - * strongarm * - * - * xscale * - * - * } } * / 
 + / * This test is known to PASS on armv7l - unknown - linux - gnueabihf , so I have 
 + remove the xfail for arm * - * - * below , until we know more . * / 
 + / * { dg - do run { xfail strongarm * - * - * xscale * - * - * } } * / 
 / * { dg - options - mlong - double - 128 { target powerpc64 * - * - linux * } } * / 
 / * { dg - output " " { xfail x86 _ 64 - * - mingw * x86 _ 64 - * - cygwin * } } * / 


NEAREST DIFF:
diff - - git a / ChangeLog . libffi b / ChangeLog . libffi 
 index f1db242 . . a61b3bc 100644 
 - - - a / ChangeLog . libffi 
 + + + b / ChangeLog . libffi 
 @ @ - 1 , 8 + 1 , 9 @ @ 
 2009 - 12 - 26 Andreas Tobler < a . tobler @ schweiz . org > 
 + 	 Anthony Green < green @ redhat . com > 
 
 	 * testsuite / libffi . call / huge _ struct . c ( test _ large _ fn ) : Replace 
 - 	 format code % p with % # x because % p does not add a leading 0x on 
 - 	 Solaris . Also case relevant arguments to unsigned int . 
 + 	 format code % p with % # lx because % p does not add a leading 0x on 
 + 	 Solaris . Also change relevant arguments to unsigned long . 
 
 2009 - 12 - 26 Andreas Schwab < schwab @ linux - m68k . org > 
 
 diff - - git a / patches / fix - huge _ struct - on - solaris b / patches / fix - huge _ struct - on - solaris 
 index e6a256b . . 09d6ca8 100644 
 - - - a / patches / fix - huge _ struct - on - solaris 
 + + + b / patches / fix - huge _ struct - on - solaris 
 @ @ - 2 , 12 + 2 , 13 @ @ Index : libffi / ChangeLog . libffi 
 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 - - - libffi . orig / ChangeLog . libffi 
 + + + libffi / ChangeLog . libffi 
 - @ @ - 1 , 3 + 1 , 9 @ @ 
 + @ @ - 1 , 3 + 1 , 10 @ @ 
 + 2009 - 12 - 26 Andreas Tobler < a . tobler @ schweiz . org > 
 + + 	 Anthony Green < green @ redhat . com > 
 + 
 + 	 * testsuite / libffi . call / huge _ struct . c ( test _ large _ fn ) : Replace 
 - + 	 format code % p with % # x because % p does not add a leading 0x on 
 - + 	 Solaris . Also case relevant arguments to unsigned int . 
 + + 	 format code % p with % # lx because % p does not add a leading 0x on 
 + + 	 Solaris . Also case relevant arguments to unsigned long . 
 + 
 2009 - 12 - 26 Andreas Schwab < schwab @ linux - m68k . org > 
 
 @ @ - 16 , 7 + 17 , 7 @ @ Index : libffi / testsuite / libffi . call / huge _ struct . c 
 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 - - - libffi . orig / testsuite / libffi . call / huge _ struct . c 
 + + + libffi / testsuite / libffi . call / huge _ struct . c 
 - @ @ - 131 , 18 + 131 , 18 @ @ test _ large _ fn ( 
 + @ @ - 131 , 26 + 131 , 26 @ @ test _ large _ fn ( 
 	 	 	 ui64 _ 4 + 4 , si64 _ 4 + 4 , f _ 4 + 4 , d _ 4 + 4 , ld _ 4 + 4 , ( char * ) ( ( intptr _ t ) p _ 4 + 4 ) , 
 	 	 ui8 _ 5 + 5 , si8 _ 5 + 5 } ; 
 
 @ @ - 32 , 21 + 33 , 33 @ @ Index : libffi / testsuite / libffi . call / huge _ struct . c 
 - 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , p _ 2 , 
 - 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , p _ 3 , 
 - 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , p _ 4 , ui8 _ 5 , si8 _ 5 , 
 - + 	 printf ( " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd : " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , 
 - + 	 ui8 _ 1 , si8 _ 1 , ui16 _ 1 , si16 _ 1 , ui32 _ 1 , si32 _ 1 , ui64 _ 1 , si64 _ 1 , f _ 1 , d _ 1 , ld _ 1 , ( unsigned int ) p _ 1 , 
 - + 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , ( unsigned int ) p _ 2 , 
 - + 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , ( unsigned int ) p _ 3 , 
 - + 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , ( unsigned int ) p _ 4 , ui8 _ 5 , si8 _ 5 , 
 + + 	 printf ( " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd : " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , 
 + + 	 ui8 _ 1 , si8 _ 1 , ui16 _ 1 , si16 _ 1 , ui32 _ 1 , si32 _ 1 , ui64 _ 1 , si64 _ 1 , f _ 1 , d _ 1 , ld _ 1 , ( unsigned long ) p _ 1 , 
 + + 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , ( unsigned long ) p _ 2 , 
 + + 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , ( unsigned long ) p _ 3 , 
 + + 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , ( unsigned long ) p _ 4 , ui8 _ 5 , si8 _ 5 , 
 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , 
 - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , 
 + - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , 
 + + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , 
 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , 
 + - 	 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , retVal . x , 
 + + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , 
 + 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , 
 + - 	 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , retVal . jj , 
 + + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , 
 + 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , 
 + - 	 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , retVal . vv , retVal . ww , retVal . xx ) ; 
 + + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; 
 + 
 + 	 return 	 retVal ; 
 + } 
 @ @ - 298 , 18 + 298 , 18 @ @ main ( int argc _ _ UNUSED _ _ , const char * * a 
 
 	 ffi _ call ( & cif , FFI _ FN ( test _ large _ fn ) , & retVal , argValues ) ; 
 @ @ - 55 , 22 + 68 , 22 @ @ Index : libffi / testsuite / libffi . call / huge _ struct . c 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p % hhu % hhd \ n " , 
 - + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , 
 + + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , 
 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , 
 - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , 
 - + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned int ) retVal . l , 
 + + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , 
 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , 
 - 	 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , retVal . x , 
 - + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned int ) retVal . x , 
 + + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , 
 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , 
 - 	 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , retVal . jj , 
 - + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned int ) retVal . jj , 
 + + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , 
 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , 
 - 	 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , retVal . vv , retVal . ww , retVal . xx ) ; 
 - + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned int ) retVal . vv , retVal . ww , retVal . xx ) ; 
 + + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; 
 	 / / { dg - output " \ nres : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } 
 
 	 CHECK ( ffi _ prep _ closure _ loc ( pcl , & cif , cls _ large _ fn , NULL , code ) = = FFI _ OK ) ; 
 @ @ - 82 , 22 + 95 , 22 @ @ Index : libffi / testsuite / libffi . call / huge _ struct . c 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % p % hhu % hhd \ n " , 
 - + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , 
 + + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , 
 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , 
 - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , 
 - + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned int ) retVal . l , 
 + + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , 
 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , 
 - 	 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , retVal . x , 
 - + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned int ) retVal . x , 
 + + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , 
 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , 
 - 	 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , retVal . jj , 
 - + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned int ) retVal . jj , 
 + + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , 
 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , 
 - 	 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , retVal . vv , retVal . ww , retVal . xx ) ; 
 - + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned int ) retVal . vv , retVal . ww , retVal . xx ) ; 
 + + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; 
 	 / / { dg - output " \ nres : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } 
 
 return 0 ; 
 diff - - git a / testsuite / libffi . call / huge _ struct . c b / testsuite / libffi . call / huge _ struct . c 
 index 3c205dc . . 7a3bdb8 100644 
 - - - a / testsuite / libffi . call / huge _ struct . c 
 + + + b / testsuite / libffi . call / huge _ struct . c 
 @ @ - 131 , 26 + 131 , 26 @ @ test _ large _ fn ( 
 	 	 	 ui64 _ 4 + 4 , si64 _ 4 + 4 , f _ 4 + 4 , d _ 4 + 4 , ld _ 4 + 4 , ( char * ) ( ( intptr _ t ) p _ 4 + 4 ) , 
 	 	 ui8 _ 5 + 5 , si8 _ 5 + 5 } ; 
 
 - 	 printf ( " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd : " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , 
 - 	 ui8 _ 1 , si8 _ 1 , ui16 _ 1 , si16 _ 1 , ui32 _ 1 , si32 _ 1 , ui64 _ 1 , si64 _ 1 , f _ 1 , d _ 1 , ld _ 1 , ( unsigned int ) p _ 1 , 
 - 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , ( unsigned int ) p _ 2 , 
 - 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , ( unsigned int ) p _ 3 , 
 - 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , ( unsigned int ) p _ 4 , ui8 _ 5 , si8 _ 5 , 
 + 	 printf ( " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd : " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , 
 + 	 ui8 _ 1 , si8 _ 1 , ui16 _ 1 , si16 _ 1 , ui32 _ 1 , si32 _ 1 , ui64 _ 1 , si64 _ 1 , f _ 1 , d _ 1 , ld _ 1 , ( unsigned long ) p _ 1 , 
 + 	 	 ui8 _ 2 , si8 _ 2 , ui16 _ 2 , si16 _ 2 , ui32 _ 2 , si32 _ 2 , ui64 _ 2 , si64 _ 2 , f _ 2 , d _ 2 , ld _ 2 , ( unsigned long ) p _ 2 , 
 + 	 	 ui8 _ 3 , si8 _ 3 , ui16 _ 3 , si16 _ 3 , ui32 _ 3 , si32 _ 3 , ui64 _ 3 , si64 _ 3 , f _ 3 , d _ 3 , ld _ 3 , ( unsigned long ) p _ 3 , 
 + 	 	 ui8 _ 4 , si8 _ 4 , ui16 _ 4 , si16 _ 4 , ui32 _ 4 , si32 _ 4 , ui64 _ 4 , si64 _ 4 , f _ 4 , d _ 4 , ld _ 4 , ( unsigned long ) p _ 4 , ui8 _ 5 , si8 _ 5 , 
 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , 
 - 	 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , retVal . l , 
 + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , 
 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , 
 - 	 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , retVal . x , 
 + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , 
 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , 
 - 	 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , retVal . jj , 
 + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , 
 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , 
 - 	 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , retVal . vv , retVal . ww , retVal . xx ) ; 
 + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; 
 
 	 return 	 retVal ; 
 } 
 @ @ - 298 , 18 + 298 , 18 @ @ main ( int argc _ _ UNUSED _ _ , const char * * argv _ _ UNUSED _ _ ) 
 
 	 ffi _ call ( & cif , FFI _ FN ( test _ large _ fn ) , & retVal , argValues ) ; 
 	 / / { dg - output " 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } 
 - 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , 
 + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , 
 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , 
 - 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned int ) retVal . l , 
 + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , 
 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , 
 - 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned int ) retVal . x , 
 + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , 
 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , 
 - 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned int ) retVal . jj , 
 + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , 
 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , 
 - 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned int ) retVal . vv , retVal . ww , retVal . xx ) ; 
 + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; 
 	 / / { dg - output " \ nres : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } 
 
 	 CHECK ( ffi _ prep _ closure _ loc ( pcl , & cif , cls _ large _ fn , NULL , code ) = = FFI _ OK ) ; 
 @ @ - 326 , 18 + 326 , 18 @ @ main ( int argc _ _ UNUSED _ _ , const char * * argv _ _ UNUSED _ _ ) 
 	 	 ui8 , si8 , ui16 , si16 , ui32 , si32 , ui64 , si64 , f , d , ld , p , 
 	 	 ui8 , si8 ) ; 
 	 / / { dg - output " \ n1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 3 4 5 6 7 8 9 10 11 0x12345678 1 2 : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } 
 - 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x " 
 - 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # x % hhu % hhd \ n " , 
 + 	 printf ( " res : % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx " 
 + 	 	 " % hhu % hhd % hu % hd % u % d % " PRIu64 " % " PRId64 " % . 0f % . 0f % . 0Lf % # lx % hhu % hhd \ n " , 
 	 	 retVal . a , retVal . b , retVal . c , retVal . d , retVal . e , retVal . f , 
 - 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned int ) retVal . l , 
 + 	 retVal . g , retVal . h , retVal . i , retVal . j , retVal . k , ( unsigned long ) retVal . l , 
 	 	 retVal . m , retVal . n , retVal . o , retVal . p , retVal . q , retVal . r , 
 - 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned int ) retVal . x , 
 + 	 retVal . s , retVal . t , retVal . u , retVal . v , retVal . w , ( unsigned long ) retVal . x , 
 	 	 retVal . y , retVal . z , retVal . aa , retVal . bb , retVal . cc , retVal . dd , 
 - 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned int ) retVal . jj , 
 + 	 retVal . ee , retVal . ff , retVal . gg , retVal . hh , retVal . ii , ( unsigned long ) retVal . jj , 
 	 	 retVal . kk , retVal . ll , retVal . mm , retVal . nn , retVal . oo , retVal . pp , 
 - 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned int ) retVal . vv , retVal . ww , retVal . xx ) ; 
 + 	 retVal . qq , retVal . rr , retVal . ss , retVal . tt , retVal . uu , ( unsigned long ) retVal . vv , retVal . ww , retVal . xx ) ; 
 	 / / { dg - output " \ nres : 2 3 4 5 6 7 8 9 10 11 12 0x12345679 3 4 5 6 7 8 9 10 11 12 13 0x1234567a 4 5 6 7 8 9 10 11 12 13 14 0x1234567b 5 6 7 8 9 10 11 12 13 14 15 0x1234567c 6 7 " } 
 
 return 0 ;
