BLEU SCORE: 0.028465126651392333

TEST MSG: Added Shell32 . SHGetKnownFolderPath and corresponding constants
GENERATED MSG: fixed some changes asked by the jna team

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 6b76c35 . . ba6d688 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 12 , 6 + 12 , 7 @ @ Features <nl> * Added Winspool monitor sample and updated Kernel32 , WinBase , Winspool - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . <nl> * Added Some minor changes to MS Office samples Test and small changes to the MS Office samples Bug Fixes - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . <nl> * [ # 333 ] ( https : / / github . com / twall / jna / pull / 333 ) : Added ` CoTaskMemAlloc ` , ` CoTaskMemRealloc ` and ` CoTaskMemFree ` to ` com . sun . jna . platform . win32 . Ole32 ` - [ @ msteiger ] ( https : / / github . com / msteiger ) . <nl> + * [ # 334 ] ( https : / / github . com / twall / jna / pull / 334 ) : Added ` com . sun . jna . platform . win32 . Shell32 . SHGetKnownFolderPath ` and ` KnownFolders ` GUID constants - [ @ msteiger ] ( https : / / github . com / msteiger ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / KnownFolders . java b / contrib / platform / src / com / sun / jna / platform / win32 / KnownFolders . java <nl> new file mode 100644 <nl> index 0000000 . . 0abf39d <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / KnownFolders . java <nl> @ @ - 0 , 0 + 1 , 329 @ @ <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import com . sun . jna . platform . win32 . Guid . GUID ; <nl> + <nl> + / * * <nl> + * Ported from KnownFolders . h . <nl> + * Microsoft Windows SDK 7 . 0A . <nl> + * @ author Martin Steiger <nl> + * / <nl> + public class KnownFolders <nl> + { <nl> + / * * <nl> + * display name : " Network " < br / > <nl> + * legacy display name : " My Network Places " < br / > <nl> + * default path : < br / > <nl> + * legacy CSIDL value : CSIDL _ NETWORK < br / > <nl> + * / <nl> + public static final GUID FOLDERID _ NetworkFolder = GUID . fromString ( " { D20BEEC4 - 5CA8 - 4905 - AE3B - BF251EA09B53 } " ) ; <nl> + <nl> + / / { 0AC0837C - BBF8 - 452A - 850D - 79D08E667CA7 } <nl> + public static final GUID FOLDERID _ ComputerFolder = GUID . fromString ( " { 0AC0837C - BBF8 - 452A - 850D - 79D08E667CA7 } " ) ; <nl> + <nl> + / / { 4D9F7874 - 4E0C - 4904 - 967B - 40B0D20C3E4B } <nl> + public static final GUID FOLDERID _ InternetFolder = GUID . fromString ( " { 4D9F7874 - 4E0C - 4904 - 967B - 40B0D20C3E4B } " ) ; <nl> + <nl> + / / { 82A74AEB - AEB4 - 465C - A014 - D097EE346D63 } <nl> + public static final GUID FOLDERID _ ControlPanelFolder = GUID . fromString ( " { 82A74AEB - AEB4 - 465C - A014 - D097EE346D63 } " ) ; <nl> + <nl> + / / { 76FC4E2D - D6AD - 4519 - A663 - 37BD56068185 } <nl> + public static final GUID FOLDERID _ PrintersFolder = GUID . fromString ( " { 76FC4E2D - D6AD - 4519 - A663 - 37BD56068185 } " ) ; <nl> + <nl> + / / { 43668BF8 - C14E - 49B2 - 97C9 - 747784D784B7 } <nl> + public static final GUID FOLDERID _ SyncManagerFolder = GUID . fromString ( " { 43668BF8 - C14E - 49B2 - 97C9 - 747784D784B7 } " ) ; <nl> + <nl> + / / { 0F214138 - B1D3 - 4a90 - BBA9 - 27CBC0C5389A } <nl> + public static final GUID FOLDERID _ SyncSetupFolder = GUID . fromString ( " { 0f214138 - b1d3 - 4a90 - bba9 - 27cbc0c5389a } " ) ; <nl> + <nl> + / / { 4bfefb45 - 347d - 4006 - a5be - ac0cb0567192 } <nl> + public static final GUID FOLDERID _ ConflictFolder = GUID . fromString ( " { 4bfefb45 - 347d - 4006 - a5be - ac0cb0567192 } " ) ; <nl> + <nl> + / / { 289a9a43 - be44 - 4057 - a41b - 587a76d7e7f9 } <nl> + public static final GUID FOLDERID _ SyncResultsFolder = GUID . fromString ( " { 289a9a43 - be44 - 4057 - a41b - 587a76d7e7f9 } " ) ; <nl> + <nl> + / / { B7534046 - 3ECB - 4C18 - BE4E - 64CD4CB7D6AC } <nl> + public static final GUID FOLDERID _ RecycleBinFolder = GUID . fromString ( " { B7534046 - 3ECB - 4C18 - BE4E - 64CD4CB7D6AC } " ) ; <nl> + <nl> + / / { 6F0CD92B - 2E97 - 45D1 - 88FF - B0D186B8DEDD } <nl> + public static final GUID FOLDERID _ ConnectionsFolder = GUID . fromString ( " { 6F0CD92B - 2E97 - 45D1 - 88FF - B0D186B8DEDD } " ) ; <nl> + <nl> + / / { FD228CB7 - AE11 - 4AE3 - 864C - 16F3910AB8FE } <nl> + public static final GUID FOLDERID _ Fonts = GUID . fromString ( " { FD228CB7 - AE11 - 4AE3 - 864C - 16F3910AB8FE } " ) ; <nl> + <nl> + / * * <nl> + * display name : " Desktop " < br / > <nl> + * default path : " C : \ Users \ < UserName > \ Desktop " <nl> + * legacy default path : " C : \ Documents and Settings \ < userName > \ Desktop " <nl> + * legacy CSIDL value : CSIDL _ DESKTOP <nl> + * / <nl> + / / { B4BFCC3A - DB2C - 424C - B029 - 7FE99A87C641 } <nl> + public static final GUID FOLDERID _ Desktop = GUID . fromString ( " { B4BFCC3A - DB2C - 424C - B029 - 7FE99A87C641 } " ) ; <nl> + <nl> + / / { B97D20BB - F46A - 4C97 - BA10 - 5E3608430854 } <nl> + public static final GUID FOLDERID _ Startup = GUID . fromString ( " { B97D20BB - F46A - 4C97 - BA10 - 5E3608430854 } " ) ; <nl> + <nl> + / / { A77F5D77 - 2E2B - 44C3 - A6A2 - ABA601054A51 } <nl> + public static final GUID FOLDERID _ Programs = GUID . fromString ( " { A77F5D77 - 2E2B - 44C3 - A6A2 - ABA601054A51 } " ) ; <nl> + <nl> + / / { 625B53C3 - AB48 - 4EC1 - BA1F - A1EF4146FC19 } <nl> + public static final GUID FOLDERID _ StartMenu = GUID . fromString ( " { 625B53C3 - AB48 - 4EC1 - BA1F - A1EF4146FC19 } " ) ; <nl> + <nl> + / / { AE50C081 - EBD2 - 438A - 8655 - 8A092E34987A } <nl> + public static final GUID FOLDERID _ Recent = GUID . fromString ( " { AE50C081 - EBD2 - 438A - 8655 - 8A092E34987A } " ) ; <nl> + <nl> + / / { 8983036C - 27C0 - 404B - 8F08 - 102D10DCFD74 } <nl> + public static final GUID FOLDERID _ SendTo = GUID . fromString ( " { 8983036C - 27C0 - 404B - 8F08 - 102D10DCFD74 } " ) ; <nl> + <nl> + / / { FDD39AD0 - 238F - 46AF - ADB4 - 6C85480369C7 } <nl> + public static final GUID FOLDERID _ Documents = GUID . fromString ( " { FDD39AD0 - 238F - 46AF - ADB4 - 6C85480369C7 } " ) ; <nl> + <nl> + / / { 1777F761 - 68AD - 4D8A - 87BD - 30B759FA33DD } <nl> + public static final GUID FOLDERID _ Favorites = GUID . fromString ( " { 1777F761 - 68AD - 4D8A - 87BD - 30B759FA33DD } " ) ; <nl> + <nl> + / / { C5ABBF53 - E17F - 4121 - 8900 - 86626FC2C973 } <nl> + public static final GUID FOLDERID _ NetHood = GUID . fromString ( " { C5ABBF53 - E17F - 4121 - 8900 - 86626FC2C973 } " ) ; <nl> + <nl> + / / { 9274BD8D - CFD1 - 41C3 - B35E - B13F55A758F4 } <nl> + public static final GUID FOLDERID _ PrintHood = GUID . fromString ( " { 9274BD8D - CFD1 - 41C3 - B35E - B13F55A758F4 } " ) ; <nl> + <nl> + / / { A63293E8 - 664E - 48DB - A079 - DF759E0509F7 } <nl> + public static final GUID FOLDERID _ Templates = GUID . fromString ( " { A63293E8 - 664E - 48DB - A079 - DF759E0509F7 } " ) ; <nl> + <nl> + / / { 82A5EA35 - D9CD - 47C5 - 9629 - E15D2F714E6E } <nl> + public static final GUID FOLDERID _ CommonStartup = GUID . fromString ( " { 82A5EA35 - D9CD - 47C5 - 9629 - E15D2F714E6E } " ) ; <nl> + <nl> + / / { 0139D44E - 6AFE - 49F2 - 8690 - 3DAFCAE6FFB8 } <nl> + public static final GUID FOLDERID _ CommonPrograms = GUID . fromString ( " { 0139D44E - 6AFE - 49F2 - 8690 - 3DAFCAE6FFB8 } " ) ; <nl> + <nl> + / / { A4115719 - D62E - 491D - AA7C - E74B8BE3B067 } <nl> + public static final GUID FOLDERID _ CommonStartMenu = GUID . fromString ( " { A4115719 - D62E - 491D - AA7C - E74B8BE3B067 } " ) ; <nl> + <nl> + / / { C4AA340D - F20F - 4863 - AFEF - F87EF2E6BA25 } <nl> + public static final GUID FOLDERID _ PublicDesktop = GUID . fromString ( " { C4AA340D - F20F - 4863 - AFEF - F87EF2E6BA25 } " ) ; <nl> + <nl> + / / { 62AB5D82 - FDC1 - 4DC3 - A9DD - 070D1D495D97 } <nl> + public static final GUID FOLDERID _ ProgramData = GUID . fromString ( " { 62AB5D82 - FDC1 - 4DC3 - A9DD - 070D1D495D97 } " ) ; <nl> + <nl> + / / { B94237E7 - 57AC - 4347 - 9151 - B08C6C32D1F7 } <nl> + public static final GUID FOLDERID _ CommonTemplates = GUID . fromString ( " { B94237E7 - 57AC - 4347 - 9151 - B08C6C32D1F7 } " ) ; <nl> + <nl> + / / { ED4824AF - DCE4 - 45A8 - 81E2 - FC7965083634 } <nl> + public static final GUID FOLDERID _ PublicDocuments = GUID . fromString ( " { ED4824AF - DCE4 - 45A8 - 81E2 - FC7965083634 } " ) ; <nl> + <nl> + / / { 3EB685DB - 65F9 - 4CF6 - A03A - E3EF65729F3D } <nl> + public static final GUID FOLDERID _ RoamingAppData = GUID . fromString ( " { 3EB685DB - 65F9 - 4CF6 - A03A - E3EF65729F3D } " ) ; <nl> + <nl> + / / { F1B32785 - 6FBA - 4FCF - 9D55 - 7B8E7F157091 } <nl> + public static final GUID FOLDERID _ LocalAppData = GUID . fromString ( " { F1B32785 - 6FBA - 4FCF - 9D55 - 7B8E7F157091 } " ) ; <nl> + <nl> + / / { A520A1A4 - 1780 - 4FF6 - BD18 - 167343C5AF16 } <nl> + public static final GUID FOLDERID _ LocalAppDataLow = GUID . fromString ( " { A520A1A4 - 1780 - 4FF6 - BD18 - 167343C5AF16 } " ) ; <nl> + <nl> + / / { 352481E8 - 33BE - 4251 - BA85 - 6007CAEDCF9D } <nl> + public static final GUID FOLDERID _ InternetCache = GUID . fromString ( " { 352481E8 - 33BE - 4251 - BA85 - 6007CAEDCF9D } " ) ; <nl> + <nl> + / / { 2B0F765D - C0E9 - 4171 - 908E - 08A611B84FF6 } <nl> + public static final GUID FOLDERID _ Cookies = GUID . fromString ( " { 2B0F765D - C0E9 - 4171 - 908E - 08A611B84FF6 } " ) ; <nl> + <nl> + / / { D9DC8A3B - B784 - 432E - A781 - 5A1130A75963 } <nl> + public static final GUID FOLDERID _ History = GUID . fromString ( " { D9DC8A3B - B784 - 432E - A781 - 5A1130A75963 } " ) ; <nl> + <nl> + / / { 1AC14E77 - 02E7 - 4E5D - B744 - 2EB1AE5198B7 } <nl> + public static final GUID FOLDERID _ System = GUID . fromString ( " { 1AC14E77 - 02E7 - 4E5D - B744 - 2EB1AE5198B7 } " ) ; <nl> + <nl> + / / { D65231B0 - B2F1 - 4857 - A4CE - A8E7C6EA7D27 } <nl> + public static final GUID FOLDERID _ SystemX86 = GUID . fromString ( " { D65231B0 - B2F1 - 4857 - A4CE - A8E7C6EA7D27 } " ) ; <nl> + <nl> + / / { F38BF404 - 1D43 - 42F2 - 9305 - 67DE0B28FC23 } <nl> + public static final GUID FOLDERID _ Windows = GUID . fromString ( " { F38BF404 - 1D43 - 42F2 - 9305 - 67DE0B28FC23 } " ) ; <nl> + <nl> + / / { 5E6C858F - 0E22 - 4760 - 9AFE - EA3317B67173 } <nl> + public static final GUID FOLDERID _ Profile = GUID . fromString ( " { 5E6C858F - 0E22 - 4760 - 9AFE - EA3317B67173 } " ) ; <nl> + <nl> + / / { 33E28130 - 4E1E - 4676 - 835A - 98395C3BC3BB } <nl> + public static final GUID FOLDERID _ Pictures = GUID . fromString ( " { 33E28130 - 4E1E - 4676 - 835A - 98395C3BC3BB } " ) ; <nl> + <nl> + / / { 7C5A40EF - A0FB - 4BFC - 874A - C0F2E0B9FA8E } <nl> + public static final GUID FOLDERID _ ProgramFilesX86 = GUID . fromString ( " { 7C5A40EF - A0FB - 4BFC - 874A - C0F2E0B9FA8E } " ) ; <nl> + <nl> + / / { DE974D24 - D9C6 - 4D3E - BF91 - F4455120B917 } <nl> + public static final GUID FOLDERID _ ProgramFilesCommonX86 = GUID . fromString ( " { DE974D24 - D9C6 - 4D3E - BF91 - F4455120B917 } " ) ; <nl> + <nl> + / / { 6D809377 - 6AF0 - 444b - 8957 - A3773F02200E } <nl> + public static final GUID FOLDERID _ ProgramFilesX64 = GUID . fromString ( " { 6d809377 - 6af0 - 444b - 8957 - a3773f02200e } " ) ; <nl> + <nl> + / / { 6365D5A7 - 0F0D - 45e5 - 87F6 - 0DA56B6A4F7D } <nl> + public static final GUID FOLDERID _ ProgramFilesCommonX64 = GUID . fromString ( " { 6365d5a7 - 0f0d - 45e5 - 87f6 - 0da56b6a4f7d } " ) ; <nl> + <nl> + / / { 905e63b6 - c1bf - 494e - b29c - 65b732d3d21a } <nl> + public static final GUID FOLDERID _ ProgramFiles = GUID . fromString ( " { 905e63b6 - c1bf - 494e - b29c - 65b732d3d21a } " ) ; <nl> + <nl> + / / { F7F1ED05 - 9F6D - 47A2 - AAAE - 29D317C6F066 } <nl> + public static final GUID FOLDERID _ ProgramFilesCommon = GUID . fromString ( " { F7F1ED05 - 9F6D - 47A2 - AAAE - 29D317C6F066 } " ) ; <nl> + <nl> + / / { 5cd7aee2 - 2219 - 4a67 - b85d - 6c9ce15660cb } <nl> + public static final GUID FOLDERID _ UserProgramFiles = GUID . fromString ( " { 5cd7aee2 - 2219 - 4a67 - b85d - 6c9ce15660cb } " ) ; <nl> + <nl> + / / { bcbd3057 - ca5c - 4622 - b42d - bc56db0ae516 } <nl> + public static final GUID FOLDERID _ UserProgramFilesCommon = GUID . fromString ( " { bcbd3057 - ca5c - 4622 - b42d - bc56db0ae516 } " ) ; <nl> + <nl> + / / { 724EF170 - A42D - 4FEF - 9F26 - B60E846FBA4F } <nl> + public static final GUID FOLDERID _ AdminTools = GUID . fromString ( " { 724EF170 - A42D - 4FEF - 9F26 - B60E846FBA4F } " ) ; <nl> + <nl> + / / { D0384E7D - BAC3 - 4797 - 8F14 - CBA229B392B5 } <nl> + public static final GUID FOLDERID _ CommonAdminTools = GUID . fromString ( " { D0384E7D - BAC3 - 4797 - 8F14 - CBA229B392B5 } " ) ; <nl> + <nl> + / / { 4BD8D571 - 6D19 - 48D3 - BE97 - 422220080E43 } <nl> + public static final GUID FOLDERID _ Music = GUID . fromString ( " { 4BD8D571 - 6D19 - 48D3 - BE97 - 422220080E43 } " ) ; <nl> + <nl> + / / { 18989B1D - 99B5 - 455B - 841C - AB7C74E4DDFC } <nl> + public static final GUID FOLDERID _ Videos = GUID . fromString ( " { 18989B1D - 99B5 - 455B - 841C - AB7C74E4DDFC } " ) ; <nl> + <nl> + / / { C870044B - F49E - 4126 - A9C3 - B52A1FF411E8 } <nl> + public static final GUID FOLDERID _ Ringtones = GUID . fromString ( " { C870044B - F49E - 4126 - A9C3 - B52A1FF411E8 } " ) ; <nl> + <nl> + / / { B6EBFB86 - 6907 - 413C - 9AF7 - 4FC2ABF07CC5 } <nl> + public static final GUID FOLDERID _ PublicPictures = GUID . fromString ( " { B6EBFB86 - 6907 - 413C - 9AF7 - 4FC2ABF07CC5 } " ) ; <nl> + <nl> + / / { 3214FAB5 - 9757 - 4298 - BB61 - 92A9DEAA44FF } <nl> + public static final GUID FOLDERID _ PublicMusic = GUID . fromString ( " { 3214FAB5 - 9757 - 4298 - BB61 - 92A9DEAA44FF } " ) ; <nl> + <nl> + / / { 2400183A - 6185 - 49FB - A2D8 - 4A392A602BA3 } <nl> + public static final GUID FOLDERID _ PublicVideos = GUID . fromString ( " { 2400183A - 6185 - 49FB - A2D8 - 4A392A602BA3 } " ) ; <nl> + <nl> + / / { E555AB60 - 153B - 4D17 - 9F04 - A5FE99FC15EC } <nl> + public static final GUID FOLDERID _ PublicRingtones = GUID . fromString ( " { E555AB60 - 153B - 4D17 - 9F04 - A5FE99FC15EC } " ) ; <nl> + <nl> + / / { 8AD10C31 - 2ADB - 4296 - A8F7 - E4701232C972 } <nl> + public static final GUID FOLDERID _ ResourceDir = GUID . fromString ( " { 8AD10C31 - 2ADB - 4296 - A8F7 - E4701232C972 } " ) ; <nl> + <nl> + / / { 2A00375E - 224C - 49DE - B8D1 - 440DF7EF3DDC } <nl> + public static final GUID FOLDERID _ LocalizedResourcesDir = GUID . fromString ( " { 2A00375E - 224C - 49DE - B8D1 - 440DF7EF3DDC } " ) ; <nl> + <nl> + / / { C1BAE2D0 - 10DF - 4334 - BEDD - 7AA20B227A9D } <nl> + public static final GUID FOLDERID _ CommonOEMLinks = GUID . fromString ( " { C1BAE2D0 - 10DF - 4334 - BEDD - 7AA20B227A9D } " ) ; <nl> + <nl> + / / { 9E52AB10 - F80D - 49DF - ACB8 - 4330F5687855 } <nl> + public static final GUID FOLDERID _ CDBurning = GUID . fromString ( " { 9E52AB10 - F80D - 49DF - ACB8 - 4330F5687855 } " ) ; <nl> + <nl> + / / { 0762D272 - C50A - 4BB0 - A382 - 697DCD729B80 } <nl> + public static final GUID FOLDERID _ UserProfiles = GUID . fromString ( " { 0762D272 - C50A - 4BB0 - A382 - 697DCD729B80 } " ) ; <nl> + <nl> + / / { DE92C1C7 - 837F - 4F69 - A3BB - 86E631204A23 } <nl> + public static final GUID FOLDERID _ Playlists = GUID . fromString ( " { DE92C1C7 - 837F - 4F69 - A3BB - 86E631204A23 } " ) ; <nl> + <nl> + / / { 15CA69B3 - 30EE - 49C1 - ACE1 - 6B5EC372AFB5 } <nl> + public static final GUID FOLDERID _ SamplePlaylists = GUID . fromString ( " { 15CA69B3 - 30EE - 49C1 - ACE1 - 6B5EC372AFB5 } " ) ; <nl> + <nl> + / / { B250C668 - F57D - 4EE1 - A63C - 290EE7D1AA1F } <nl> + public static final GUID FOLDERID _ SampleMusic = GUID . fromString ( " { B250C668 - F57D - 4EE1 - A63C - 290EE7D1AA1F } " ) ; <nl> + <nl> + / / { C4900540 - 2379 - 4C75 - 844B - 64E6FAF8716B } <nl> + public static final GUID FOLDERID _ SamplePictures = GUID . fromString ( " { C4900540 - 2379 - 4C75 - 844B - 64E6FAF8716B } " ) ; <nl> + <nl> + / / { 859EAD94 - 2E85 - 48AD - A71A - 0969CB56A6CD } <nl> + public static final GUID FOLDERID _ SampleVideos = GUID . fromString ( " { 859EAD94 - 2E85 - 48AD - A71A - 0969CB56A6CD } " ) ; <nl> + <nl> + / / { 69D2CF90 - FC33 - 4FB7 - 9A0C - EBB0F0FCB43C } <nl> + public static final GUID FOLDERID _ PhotoAlbums = GUID . fromString ( " { 69D2CF90 - FC33 - 4FB7 - 9A0C - EBB0F0FCB43C } " ) ; <nl> + <nl> + / / { DFDF76A2 - C82A - 4D63 - 906A - 5644AC457385 } <nl> + public static final GUID FOLDERID _ Public = GUID . fromString ( " { DFDF76A2 - C82A - 4D63 - 906A - 5644AC457385 } " ) ; <nl> + <nl> + / / { df7266ac - 9274 - 4867 - 8d55 - 3bd661de872d } <nl> + public static final GUID FOLDERID _ ChangeRemovePrograms = GUID . fromString ( " { df7266ac - 9274 - 4867 - 8d55 - 3bd661de872d } " ) ; <nl> + <nl> + / / { a305ce99 - f527 - 492b - 8b1a - 7e76fa98d6e4 } <nl> + public static final GUID FOLDERID _ AppUpdates = GUID . fromString ( " { a305ce99 - f527 - 492b - 8b1a - 7e76fa98d6e4 } " ) ; <nl> + <nl> + / / { de61d971 - 5ebc - 4f02 - a3a9 - 6c82895e5c04 } <nl> + public static final GUID FOLDERID _ AddNewPrograms = GUID . fromString ( " { de61d971 - 5ebc - 4f02 - a3a9 - 6c82895e5c04 } " ) ; <nl> + <nl> + / / { 374DE290 - 123F - 4565 - 9164 - 39C4925E467B } <nl> + public static final GUID FOLDERID _ Downloads = GUID . fromString ( " { 374de290 - 123f - 4565 - 9164 - 39c4925e467b } " ) ; <nl> + <nl> + / / { 3D644C9B - 1FB8 - 4f30 - 9B45 - F670235F79C0 } <nl> + public static final GUID FOLDERID _ PublicDownloads = GUID . fromString ( " { 3d644c9b - 1fb8 - 4f30 - 9b45 - f670235f79c0 } " ) ; <nl> + <nl> + / / { 7d1d3a04 - debb - 4115 - 95cf - 2f29da2920da } <nl> + public static final GUID FOLDERID _ SavedSearches = GUID . fromString ( " { 7d1d3a04 - debb - 4115 - 95cf - 2f29da2920da } " ) ; <nl> + <nl> + / / { 52a4f021 - 7b75 - 48a9 - 9f6b - 4b87a210bc8f } <nl> + public static final GUID FOLDERID _ QuickLaunch = GUID . fromString ( " { 52a4f021 - 7b75 - 48a9 - 9f6b - 4b87a210bc8f } " ) ; <nl> + <nl> + / / { 56784854 - C6CB - 462b - 8169 - 88E350ACB882 } <nl> + public static final GUID FOLDERID _ Contacts = GUID . fromString ( " { 56784854 - c6cb - 462b - 8169 - 88e350acb882 } " ) ; <nl> + <nl> + / / { A75D362E - 50FC - 4fb7 - AC2C - A8BEAA314493 } <nl> + public static final GUID FOLDERID _ SidebarParts = GUID . fromString ( " { a75d362e - 50fc - 4fb7 - ac2c - a8beaa314493 } " ) ; <nl> + <nl> + / / { 7B396E54 - 9EC5 - 4300 - BE0A - 2482EBAE1A26 } <nl> + public static final GUID FOLDERID _ SidebarDefaultParts = GUID . fromString ( " { 7b396e54 - 9ec5 - 4300 - be0a - 2482ebae1a26 } " ) ; <nl> + <nl> + / / { DEBF2536 - E1A8 - 4c59 - B6A2 - 414586476AEA } <nl> + public static final GUID FOLDERID _ PublicGameTasks = GUID . fromString ( " { debf2536 - e1a8 - 4c59 - b6a2 - 414586476aea } " ) ; <nl> + <nl> + / / { 054FAE61 - 4DD8 - 4787 - 80B6 - 090220C4B700 } <nl> + public static final GUID FOLDERID _ GameTasks = GUID . fromString ( " { 054fae61 - 4dd8 - 4787 - 80b6 - 090220c4b700 } " ) ; <nl> + <nl> + / / { 4C5C32FF - BB9D - 43b0 - B5B4 - 2D72E54EAAA4 } <nl> + public static final GUID FOLDERID _ SavedGames = GUID . fromString ( " { 4c5c32ff - bb9d - 43b0 - b5b4 - 2d72e54eaaa4 } " ) ; <nl> + <nl> + / / { CAC52C1A - B53D - 4edc - 92D7 - 6B2E8AC19434 } <nl> + public static final GUID FOLDERID _ Games = GUID . fromString ( " { cac52c1a - b53d - 4edc - 92d7 - 6b2e8ac19434 } " ) ; <nl> + <nl> + / / { 98ec0e18 - 2098 - 4d44 - 8644 - 66979315a281 } <nl> + public static final GUID FOLDERID _ SEARCH _ MAPI = GUID . fromString ( " { 98ec0e18 - 2098 - 4d44 - 8644 - 66979315a281 } " ) ; <nl> + <nl> + / / { ee32e446 - 31ca - 4aba - 814f - a5ebd2fd6d5e } <nl> + public static final GUID FOLDERID _ SEARCH _ CSC = GUID . fromString ( " { ee32e446 - 31ca - 4aba - 814f - a5ebd2fd6d5e } " ) ; <nl> + <nl> + / / { bfb9d5e0 - c6a9 - 404c - b2b2 - ae6db6af4968 } <nl> + public static final GUID FOLDERID _ Links = GUID . fromString ( " { bfb9d5e0 - c6a9 - 404c - b2b2 - ae6db6af4968 } " ) ; <nl> + <nl> + / / { f3ce0f7c - 4901 - 4acc - 8648 - d5d44b04ef8f } <nl> + public static final GUID FOLDERID _ UsersFiles = GUID . fromString ( " { f3ce0f7c - 4901 - 4acc - 8648 - d5d44b04ef8f } " ) ; <nl> + <nl> + / / { A302545D - DEFF - 464b - ABE8 - 61C8648D939B } <nl> + public static final GUID FOLDERID _ UsersLibraries = GUID . fromString ( " { a302545d - deff - 464b - abe8 - 61c8648d939b } " ) ; <nl> + <nl> + / / { 190337d1 - b8ca - 4121 - a639 - 6d472d16972a } <nl> + public static final GUID FOLDERID _ SearchHome = GUID . fromString ( " { 190337d1 - b8ca - 4121 - a639 - 6d472d16972a } " ) ; <nl> + <nl> + / / { 2C36C0AA - 5812 - 4b87 - BFD0 - 4CD0DFB19B39 } <nl> + public static final GUID FOLDERID _ OriginalImages = GUID . fromString ( " { 2C36C0AA - 5812 - 4b87 - bfd0 - 4cd0dfb19b39 } " ) ; <nl> + <nl> + / / { 7b0db17d - 9cd2 - 4a93 - 9733 - 46cc89022e7c } <nl> + public static final GUID FOLDERID _ DocumentsLibrary = GUID . fromString ( " { 7b0db17d - 9cd2 - 4a93 - 9733 - 46cc89022e7c } " ) ; <nl> + <nl> + / / { 2112AB0A - C86A - 4ffe - A368 - 0DE96E47012E } <nl> + public static final GUID FOLDERID _ MusicLibrary = GUID . fromString ( " { 2112ab0a - c86a - 4ffe - a368 - 0de96e47012e } " ) ; <nl> + <nl> + / / { A990AE9F - A03B - 4e80 - 94BC - 9912D7504104 } <nl> + public static final GUID FOLDERID _ PicturesLibrary = GUID . fromString ( " { a990ae9f - a03b - 4e80 - 94bc - 9912d7504104 } " ) ; <nl> + <nl> + / / { 491E922F - 5643 - 4af4 - A7EB - 4E7A138D8174 } <nl> + public static final GUID FOLDERID _ VideosLibrary = GUID . fromString ( " { 491e922f - 5643 - 4af4 - a7eb - 4e7a138d8174 } " ) ; <nl> + <nl> + / / { 1A6FDBA2 - F42D - 4358 - A798 - B74D745926C5 } <nl> + public static final GUID FOLDERID _ RecordedTVLibrary = GUID . fromString ( " { 1a6fdba2 - f42d - 4358 - a798 - b74d745926c5 } " ) ; <nl> + <nl> + / / { 52528A6B - B9E3 - 4add - B60D - 588C2DBA842D } <nl> + public static final GUID FOLDERID _ HomeGroup = GUID . fromString ( " { 52528a6b - b9e3 - 4add - b60d - 588c2dba842d } " ) ; <nl> + <nl> + / / { 5CE4A5E9 - E4EB - 479D - B89F - 130C02886155 } <nl> + public static final GUID FOLDERID _ DeviceMetadataStore = GUID . fromString ( " { 5ce4a5e9 - e4eb - 479d - b89f - 130c02886155 } " ) ; <nl> + <nl> + / / { 1B3EA5DC - B587 - 4786 - B4EF - BD1DC332AEAE } <nl> + public static final GUID FOLDERID _ Libraries = GUID . fromString ( " { 1b3ea5dc - b587 - 4786 - b4ef - bd1dc332aeae } " ) ; <nl> + <nl> + / / { 48daf80b - e6cf - 4f4e - b800 - 0e69d84ee384 } <nl> + public static final GUID FOLDERID _ PublicLibraries = GUID . fromString ( " { 48daf80b - e6cf - 4f4e - b800 - 0e69d84ee384 } " ) ; <nl> + <nl> + / / { 9e3995ab - 1f9c - 4f13 - b827 - 48b24b6c7174 } <nl> + public static final GUID FOLDERID _ UserPinned = GUID . fromString ( " { 9e3995ab - 1f9c - 4f13 - b827 - 48b24b6c7174 } " ) ; <nl> + <nl> + / / { bcb5256f - 79f6 - 4cee - b725 - dc34e402fd46 } <nl> + public static final GUID FOLDERID _ ImplicitAppShortcuts = GUID . fromString ( " { bcb5256f - 79f6 - 4cee - b725 - dc34e402fd46 } " ) ; <nl> + <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java <nl> index b9df1e7 . . 65f90a8 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package com . sun . jna . platform . win32 ; <nl> <nl> import com . sun . jna . Native ; <nl> + import com . sun . jna . platform . win32 . Guid . GUID ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> import com . sun . jna . platform . win32 . WinDef . INT _ PTR ; <nl> @ @ - 66 , 6 + 67 , 36 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { <nl> 	 	 char [ ] pszPath ) ; <nl> <nl> / * * <nl> + * Retrieves the full path of a known folder identified by the folder ' s KNOWNFOLDERID . This function replaces <nl> + * { @ link # SHGetFolderPath } . That older function is now simply a wrapper for SHGetKnownFolderPath . <nl> + * @ param rfid A reference to the KNOWNFOLDERID ( in { @ link KnownFolders } ) that identifies the folder . <nl> + * @ param dwFlags Flags that specify special retrieval options . This value can be 0 ; otherwise , one or more of the <nl> + * { @ link ShlObj . KNOWN _ FOLDER _ FLAG } values . <nl> + * @ param hToken Type : HANDLE An access token that represents a particular user . If this parameter is NULL , which is <nl> + * the most common usage , the function requests the known folder for the current user . Request a specific user ' s <nl> + * folder by passing the hToken of that user . This is typically done in the context of a service that has sufficient <nl> + * privileges to retrieve the token of a given user . That token must be opened with TOKEN _ QUERY and <nl> + * TOKEN _ IMPERSONATE rights . In some cases , you also need to include TOKEN _ DUPLICATE . In addition to passing the <nl> + * user ' s hToken , the registry hive of that specific user must be mounted . See Access Control for further discussion <nl> + * of access control issues . Assigning the hToken parameter a value of - 1 indicates the Default User . This allows <nl> + * clients of SHGetKnownFolderPath to find folder locations ( such as the Desktop folder ) for the Default User . The <nl> + * Default User user profile is duplicated when any new user account is created , and includes special folders such <nl> + * as Documents and Desktop . Any items added to the Default User folder also appear in any new user account . Note <nl> + * that access to the Default User folders requires administrator privileges . <nl> + * @ param ppszPath When this method returns , contains the address of a pointer to a null - terminated <nl> + * Unicode string that specifies the path of the known folder . The calling process is responsible for freeing this <nl> + * resource once it is no longer needed by calling { @ link Ole32 # CoTaskMemFree } . The returned path does not include a trailing <nl> + * backslash . For example , " C : \ Users " is returned rather than " C : \ Users \ " . <nl> + * @ return Returns S _ OK if successful , or an error value otherwise , including the following : <nl> + * < li > E _ FAIL Among other things , this value can indicate that the rfid parameter references a KNOWNFOLDERID which <nl> + * does not have a path ( such as a folder marked as KF _ CATEGORY _ VIRTUAL ) . < / li > <nl> + * < li > E _ INVALIDARG Among other things , this value can indicate that the rfid parameter references a KNOWNFOLDERID <nl> + * that is not present on the system . Not all KNOWNFOLDERID values are present on all systems . Use <nl> + * IKnownFolderManager : : GetFolderIds to retrieve the set of KNOWNFOLDERID values for the current system . < / li > <nl> + * / <nl> + HRESULT SHGetKnownFolderPath ( GUID rfid , int dwFlags , HANDLE hToken , PointerByReference ppszPath ) ; <nl> + <nl> + / * * <nl> * Retrieves the IShellFolder interface for the desktop folder , which is the root of the Shell ' s namespace . <nl> * The retrieved COM interface pointer can be used via Com4JNA ' s ComObject . wrapNativeInterface call <nl> * given a suitable interface definition for IShellFolder <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32Util . java <nl> index 9641b51 . . 6748cc5 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32Util . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32Util . java <nl> @ @ - 13 , 9 + 13 , 13 @ @ <nl> package com . sun . jna . platform . win32 ; <nl> <nl> import com . sun . jna . Native ; <nl> + import com . sun . jna . platform . win32 . Guid . GUID ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> + import com . sun . jna . platform . win32 . WinDef . LPVOID ; <nl> + import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> <nl> / * * <nl> * Shell32 Utility API . <nl> @ @ - 56 , 6 + 60 , 34 @ @ public abstract class Shell32Util { <nl> 	 public static String getFolderPath ( int nFolder ) { <nl> 	 	 return getFolderPath ( null , nFolder , ShlObj . SHGFP _ TYPE _ CURRENT ) ; <nl> 	 } <nl> + 	 <nl> + / * * <nl> + * Retrieves the full path of a known folder identified by the folder ' s KNOWNFOLDERID . This function replaces <nl> + * { @ link # getFolderPath } . That older function is now simply a wrapper for getKnownFolderPath <nl> + * @ param guid the KNOWNFOLDERS GUID as defined in { @ link KnownFolders } <nl> + * @ return the path of the known folder . The returned path does not include a trailing backslash . For example , <nl> + * " C : \ Users " is returned rather than " C : \ Users \ " . <nl> + * @ throws Win32Exception if the guid references a KNOWNFOLDERID which does not have a path ( such as a folder marked <nl> + * as KF _ CATEGORY _ VIRTUAL ) or that the KNOWNFOLDERID is not present on the system . Not all KNOWNFOLDERID values are <nl> + * present on all systems . <nl> + * / <nl> + public static String getKnownFolderPath ( GUID guid ) throws Win32Exception <nl> + { <nl> + int flags = ShlObj . KNOWN _ FOLDER _ FLAG . NONE . getFlag ( ) ; <nl> + PointerByReference outPath = new PointerByReference ( ) ; <nl> + HANDLE token = null ; <nl> + HRESULT hr = Shell32 . INSTANCE . SHGetKnownFolderPath ( guid , flags , token , outPath ) ; <nl> + <nl> + if ( ! W32Errors . SUCCEEDED ( hr . intValue ( ) ) ) <nl> + { <nl> + throw new Win32Exception ( hr ) ; <nl> + } <nl> + <nl> + String result = outPath . getValue ( ) . getWideString ( 0 ) ; <nl> + Ole32 . INSTANCE . CoTaskMemFree ( new LPVOID ( outPath . getPointer ( ) . getLong ( 0 ) ) ) ; <nl> + <nl> + return result ; <nl> + } <nl> <nl> 	 / * * <nl> * Retrieves the path of a special folder , identified by its CSIDL . <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / ShlObj . java b / contrib / platform / src / com / sun / jna / platform / win32 / ShlObj . java <nl> index 99684fe . . d06f1c1 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / ShlObj . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / ShlObj . java <nl> @ @ - 81 , 4 + 81 , 102 @ @ public interface ShlObj { <nl> int CSIDL _ COMMON _ OEM _ LINKS = 0x003a ; / / Links to All Users OEM specific apps <nl> int CSIDL _ CDBURN _ AREA = 0x003b ; / / USERPROFILE \ Local Settings \ Application Data \ Microsoft \ CD Burning <nl> int CSIDL _ COMPUTERSNEARME = 0x003d ; / / Computers Near Me ( computered from Workgroup membership ) <nl> + <nl> + / * * <nl> + * KnownFolder flags as used by SHGetKnownFolderPath , SHGetKnownFolderIDList and others . <nl> + * Microsoft Windows SDK 7 . 0A . <nl> + * / <nl> + public enum KNOWN _ FOLDER _ FLAG <nl> + { <nl> + / * * <nl> + * None <nl> + * / <nl> + NONE ( 0x00000000 ) , <nl> + <nl> + / * * <nl> + * Build a simple IDList ( PIDL ) This value can be used when you want to retrieve the file system path but do not <nl> + * specify this value if you are retrieving the localized display name of the folder because it might not <nl> + * resolve correctly . <nl> + * / <nl> + SIMPLE _ IDLIST ( 0x00000100 ) , <nl> + <nl> + / * * <nl> + * Gets the folder ' s default path independent of the current location of its parent . KF _ FLAG _ DEFAULT _ PATH must <nl> + * also be set . <nl> + * / <nl> + NOT _ PARENT _ RELATIVE ( 0x00000200 ) , <nl> + <nl> + / * * <nl> + * Gets the default path for a known folder . If this flag is not set , the function retrieves the current - and <nl> + * possibly redirected - path of the folder . The execution of this flag includes a verification of the folder ' s <nl> + * existence unless KF _ FLAG _ DONT _ VERIFY is set . <nl> + * / <nl> + DEFAULT _ PATH ( 0x00000400 ) , <nl> + <nl> + / * * <nl> + * Initializes the folder using its Desktop . ini settings . If the folder cannot be initialized , the function <nl> + * returns a failure code and no path is returned . This flag should always be combined with KF _ FLAG _ CREATE . <nl> + * / <nl> + INIT ( 0x00000800 ) , <nl> + <nl> + / * * <nl> + * Gets the true system path for the folder , free of any aliased placeholders such as % USERPROFILE % , returned by <nl> + * SHGetKnownFolderIDList and IKnownFolder : : GetIDList . This flag has no effect on paths returned by <nl> + * SHGetKnownFolderPath and IKnownFolder : : GetPath . By default , known folder retrieval functions and methods <nl> + * return the aliased path if an alias exists . <nl> + * / <nl> + NO _ ALIAS ( 0x00001000 ) , <nl> + <nl> + / * * <nl> + * Stores the full path in the registry without using environment strings . If this flag is not set , portions of <nl> + * the path may be represented by environment strings such as % USERPROFILE % . This flag can only be used with <nl> + * SHSetKnownFolderPath and IKnownFolder : : SetPath . <nl> + * / <nl> + DONT _ UNEXPAND ( 0x00002000 ) , <nl> + <nl> + / * * <nl> + * Do not verify the folder ' s existence before attempting to retrieve the path or IDList . If this flag is not <nl> + * set , an attempt is made to verify that the folder is truly present at the path . If that verification fails <nl> + * due to the folder being absent or inaccessible , the function returns a failure code and no path is returned . <nl> + * If the folder is located on a network , the function might take a longer time to execute . Setting this flag <nl> + * can reduce that lag time . <nl> + * / <nl> + DONT _ VERIFY ( 0x00004000 ) , <nl> + <nl> + / * * <nl> + * Forces the creation of the specified folder if that folder does not already exist . The security provisions <nl> + * predefined for that folder are applied . If the folder does not exist and cannot be created , the function <nl> + * returns a failure code and no path is returned . This value can be used only with the following functions and <nl> + * methods : <nl> + * < li > SHGetKnownFolderPath < / li > <nl> + * < li > SHGetKnownFolderIDList < / li > <nl> + * < li > IKnownFolder : : GetIDList < / li > <nl> + * < li > IKnownFolder : : GetPath < / li > <nl> + * < li > IKnownFolder : : GetShellItem < / li > <nl> + * / <nl> + CREATE ( 0x00008000 ) , <nl> + / * * <nl> + * Introduced in Windows 7 : When running inside an app container , or when providing an app container token , this <nl> + * flag prevents redirection to app container folders . Instead , it retrieves the path that would be returned <nl> + * where it not running inside an app container . <nl> + * / <nl> + NO _ APPCONTAINER _ REDIRECTION ( 0x00010000 ) , <nl> + <nl> + / * * <nl> + * Introduced in Windows 7 . Return only aliased PIDLs . Do not use the file system path . <nl> + * / <nl> + ALIAS _ ONLY ( 0x80000000 ) ; <nl> + <nl> + private int flag ; <nl> + <nl> + KNOWN _ FOLDER _ FLAG ( int flag ) <nl> + { <nl> + this . flag = flag ; <nl> + } <nl> + <nl> + public int getFlag ( ) <nl> + { <nl> + return flag ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java <nl> index e5e1d70 . . 47a778b 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java <nl> @ @ - 15 , 10 + 15 , 14 @ @ package com . sun . jna . platform . win32 ; <nl> import junit . framework . TestCase ; <nl> <nl> import com . sun . jna . Native ; <nl> + import com . sun . jna . platform . win32 . Guid . GUID ; <nl> import com . sun . jna . platform . win32 . ShellAPI . APPBARDATA ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> + import com . sun . jna . platform . win32 . WinDef . LPVOID ; <nl> import com . sun . jna . platform . win32 . WinDef . RECT ; <nl> import com . sun . jna . platform . win32 . WinDef . UINT _ PTR ; <nl> + import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> + import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> <nl> <nl> @ @ - 127 , 4 + 131 , 16 @ @ public class Shell32Test extends TestCase { <nl> <nl> } <nl> <nl> + public void testSHGetKnownFolderPath ( ) <nl> + { <nl> + int flags = ShlObj . KNOWN _ FOLDER _ FLAG . NONE . getFlag ( ) ; <nl> + PointerByReference outPath = new PointerByReference ( ) ; <nl> + HANDLE token = null ; <nl> + GUID guid = KnownFolders . FOLDERID _ Fonts ; <nl> + HRESULT hr = Shell32 . INSTANCE . SHGetKnownFolderPath ( guid , flags , token , outPath ) ; <nl> + <nl> + Ole32 . INSTANCE . CoTaskMemFree ( new LPVOID ( outPath . getPointer ( ) . getLong ( 0 ) ) ) ; <nl> + <nl> + assertTrue ( W32Errors . SUCCEEDED ( hr . intValue ( ) ) ) ; <nl> + } <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32UtilTest . java <nl> index 7711ea5 . . c8a0976 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32UtilTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32UtilTest . java <nl> @ @ - 35 , 4 + 35 , 42 @ @ public class Shell32UtilTest extends TestCase { <nl> 	 public final void testGetSpecialFolderPath ( ) { <nl> assertFalse ( Shell32Util . getSpecialFolderPath ( ShlObj . CSIDL _ APPDATA , false ) . isEmpty ( ) ) ; <nl> } <nl> + <nl> + public void testGetKnownFolderPath ( ) <nl> + { <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Fonts ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Desktop ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Startup ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Programs ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ StartMenu ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Recent ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ SendTo ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Documents ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Favorites ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ NetHood ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ PrintHood ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Templates ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ CommonStartup ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ CommonAdminTools ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ CDBurning ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Music ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ SavedGames ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ SavedSearches ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ AdminTools ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ ProgramFiles ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ ProgramData ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ ProgramFilesCommon ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ ProgramFilesCommonX86 ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Programs ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Windows ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Public ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ PublicDesktop ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Links ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ LocalAppData ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Libraries ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ RoamingAppData ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ UserProfiles ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ UserProgramFiles ) ) ; <nl> + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ UserProgramFilesCommon ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> index 5f378fc . . 6c04a2f 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> @ @ - 1 , 17 + 1 , 18 @ @ <nl> / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved <nl> - * <nl> + * <nl> * This library is free software ; you can redistribute it and / or <nl> * modify it under the terms of the GNU Lesser General Public <nl> * License as published by the Free Software Foundation ; either <nl> * version 2 . 1 of the License , or ( at your option ) any later version . <nl> - * <nl> + * <nl> * This library is distributed in the hope that it will be useful , <nl> * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> + * Lesser General Public License for more details . <nl> * / <nl> package com . sun . jna . platform . win32 ; <nl> <nl> + import java . security . SecureRandom ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> @ @ - 21 , 7 + 22 , 7 @ @ import com . sun . jna . Structure ; <nl> / / TODO : Auto - generated Javadoc <nl> / * * <nl> * Ported from Guid . h . Microsoft Windows SDK 6 . 0A . <nl> - * <nl> + * <nl> * @ author dblock [ at ] dblock . org <nl> * / <nl> public interface Guid { <nl> @ @ - 45 , 7 + 46 , 7 @ @ public interface Guid { <nl> <nl> 	 	 	 / * * <nl> 	 	 	 * Instantiates a new by reference . <nl> - 	 	 	 * <nl> + 	 	 	 * <nl> 	 	 	 * @ param guid <nl> 	 	 	 * the guid <nl> 	 	 	 * / <nl> @ @ - 60 , 7 + 61 , 7 @ @ public interface Guid { <nl> <nl> 	 	 	 / * * <nl> 	 	 	 * Instantiates a new by reference . <nl> - 	 	 	 * <nl> + 	 	 	 * <nl> 	 	 	 * @ param memory <nl> 	 	 	 * the memory <nl> 	 	 	 * / <nl> @ @ - 89 , 7 + 90 , 7 @ @ public interface Guid { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new guid . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param guid <nl> 	 	 * the guid <nl> 	 	 * / <nl> @ @ - 98 , 13 + 99 , 13 @ @ public interface Guid { <nl> 	 	 	 this . Data2 = guid . Data2 ; <nl> 	 	 	 this . Data3 = guid . Data3 ; <nl> 	 	 	 this . Data4 = guid . Data4 ; <nl> - 	 	 	 <nl> + <nl> 	 	 	 this . writeFieldsToMemory ( ) ; <nl> 	 	 } <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new guid . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param guid <nl> 	 	 * the guid <nl> 	 	 * / <nl> @ @ - 114 , 7 + 115 , 7 @ @ public interface Guid { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new guid . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param data <nl> 	 	 * the data <nl> 	 	 * / <nl> @ @ - 124 , 7 + 125 , 7 @ @ public interface Guid { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new guid . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param memory <nl> 	 	 * the memory <nl> 	 	 * / <nl> @ @ - 135 , 7 + 136 , 7 @ @ public interface Guid { <nl> <nl> 	 	 / * * <nl> 	 	 * From binary . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param data <nl> 	 	 * the data <nl> 	 	 * @ return the guid <nl> @ @ - 174 , 15 + 175 , 15 @ @ public interface Guid { <nl> 	 	 	 newGuid . Data4 [ 5 ] = data [ 13 ] ; <nl> 	 	 	 newGuid . Data4 [ 6 ] = data [ 14 ] ; <nl> 	 	 	 newGuid . Data4 [ 7 ] = data [ 15 ] ; <nl> - 	 	 	 <nl> + <nl> 	 	 	 newGuid . writeFieldsToMemory ( ) ; <nl> - 	 	 	 <nl> + <nl> 	 	 	 return newGuid ; <nl> 	 	 } <nl> <nl> 	 	 / * * <nl> 	 	 * From string . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param guid <nl> 	 	 * the guid <nl> 	 	 * @ return the guid <nl> @ @ - 193 , 30 + 194 , 31 @ @ public interface Guid { <nl> 	 	 	 char [ ] _ cguid = guid . toCharArray ( ) ; <nl> 	 	 	 byte [ ] bdata = new byte [ 16 ] ; <nl> 	 	 	 GUID newGuid = new GUID ( ) ; <nl> - 	 	 	 <nl> + <nl> 	 	 	 / / we not accept a string longer than 38 chars <nl> 	 	 	 if ( guid . length ( ) > 38 ) { <nl> 	 	 	 	 throw new IllegalArgumentException ( " Invalid guid length : " <nl> 	 	 	 	 	 	 + guid . length ( ) ) ; <nl> 	 	 	 } <nl> - 	 	 	 <nl> + <nl> 	 	 	 / / remove ' { ' , ' } ' and ' - ' from guid string <nl> 	 	 	 for ( int i = 0 ; i < _ cguid . length ; i + + ) { <nl> - 	 	 	 	 if ( ( _ cguid [ i ] ! = ' { ' ) & & ( _ cguid [ i ] ! = ' - ' ) & & ( _ cguid [ i ] ! = ' } ' ) ) <nl> + 	 	 	 	 if ( ( _ cguid [ i ] ! = ' { ' ) & & ( _ cguid [ i ] ! = ' - ' ) <nl> + 	 	 	 	 	 	 & & ( _ cguid [ i ] ! = ' } ' ) ) <nl> 	 	 	 	 	 _ cnewguid [ y + + ] = _ cguid [ i ] ; <nl> 	 	 	 } <nl> - 	 	 	 <nl> + <nl> 	 	 	 / / convert char to byte <nl> 	 	 	 for ( int i = 0 ; i < 32 ; i + = 2 ) { <nl> - 	 	 	 	 bdata [ i / 2 ] = ( byte ) ( ( Character . digit ( _ cnewguid [ i ] , 16 ) < < 4 ) + Character <nl> - 	 	 	 	 	 	 . digit ( _ cnewguid [ i + 1 ] , 16 ) & 0xff ) ; <nl> + 	 	 	 	 bdata [ i / 2 ] = ( byte ) ( ( Character . digit ( _ cnewguid [ i ] , 16 ) < < 4 ) <nl> + 	 	 	 	 	 	 + Character . digit ( _ cnewguid [ i + 1 ] , 16 ) & 0xff ) ; <nl> 	 	 	 } <nl> - 	 	 	 <nl> + <nl> 	 	 	 if ( bdata . length ! = 16 ) { <nl> 	 	 	 	 throw new IllegalArgumentException ( " Invalid data length : " <nl> 	 	 	 	 	 	 + bdata . length ) ; <nl> 	 	 	 } <nl> - 	 	 	 <nl> + <nl> 	 	 	 long data1Temp = bdata [ 0 ] & 0xff ; <nl> 	 	 	 data1Temp < < = 8 ; <nl> 	 	 	 data1Temp | = bdata [ 1 ] & 0xff ; <nl> @ @ - 243 , 14 + 245 , 35 @ @ public interface Guid { <nl> 	 	 	 newGuid . Data4 [ 4 ] = bdata [ 12 ] ; <nl> 	 	 	 newGuid . Data4 [ 5 ] = bdata [ 13 ] ; <nl> 	 	 	 newGuid . Data4 [ 6 ] = bdata [ 14 ] ; <nl> - 	 	 	 newGuid . Data4 [ 7 ] = bdata [ 15 ] ; <nl> - 	 	 	 <nl> + 	 	 	 newGuid . Data4 [ 7 ] = bdata [ 15 ] ; <nl> + <nl> 	 	 	 newGuid . writeFieldsToMemory ( ) ; <nl> - 	 	 	 <nl> + <nl> 	 	 	 return newGuid ; <nl> 	 	 } <nl> <nl> 	 	 / * * <nl> + 	 	 * Generates a new guid . Code taken from the standard jdk <nl> + 	 	 * implementation ( see UUID class ) . <nl> + 	 	 * <nl> + 	 	 * @ param guid <nl> + 	 	 * the guid <nl> + 	 	 * @ return the guid <nl> + 	 	 * / <nl> + 	 	 public static GUID newGuid ( ) { <nl> + 	 	 	 SecureRandom ng = new SecureRandom ( ) ; <nl> + 	 	 	 byte [ ] randomBytes = new byte [ 16 ] ; <nl> + <nl> + 	 	 	 ng . nextBytes ( randomBytes ) ; <nl> + 	 	 	 randomBytes [ 6 ] & = 0x0f ; <nl> + 	 	 	 randomBytes [ 6 ] | = 0x40 ; <nl> + 	 	 	 randomBytes [ 8 ] & = 0x3f ; <nl> + 	 	 	 randomBytes [ 8 ] | = 0x80 ; <nl> + <nl> + 	 	 	 return new GUID ( randomBytes ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 / * * <nl> 	 	 * To byte array . <nl> 	 	 * <nl> 	 	 * @ return the byte [ ] <nl> @ @ - 287 , 7 + 310 , 7 @ @ public interface Guid { <nl> 	 	 / * * <nl> 	 	 * The value of this Guid , formatted as follows : <nl> 	 	 * xxxxxxxx - xxxx - xxxx - xxxx - xxxxxxxxxxxx . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ return the string <nl> 	 	 * / <nl> 	 	 public String toGuidString ( ) { <nl> @ @ - 298 , 18 + 321 , 18 @ @ public interface Guid { <nl> 	 	 	 hexStr . append ( " { " ) ; <nl> <nl> 	 	 	 for ( int i = 0 ; i < bGuid . length ; i + + ) { <nl> - 	 	 	 	 char ch1 = HEXES . charAt ( ( bGuid [ i ] & 0xF0 ) > > 4 ) ; <nl> + 	 	 	 	 char ch1 = HEXES . charAt ( ( bGuid [ i ] & 0xF0 ) > > 4 ) ; <nl> 	 	 	 	 char ch2 = HEXES . charAt ( bGuid [ i ] & 0x0F ) ; <nl> 	 	 	 	 hexStr . append ( ch1 ) . append ( ch2 ) ; <nl> - 	 	 	 	 <nl> - 	 	 	 	 if ( ( i = = 3 ) | | ( i = = 5 ) | | ( i = = 7 ) | | ( i = = 9 ) ) <nl> + <nl> + 	 	 	 	 if ( ( i = = 3 ) | | ( i = = 5 ) | | ( i = = 7 ) | | ( i = = 9 ) ) <nl> 	 	 	 	 	 hexStr . append ( " - " ) ; <nl> 	 	 	 } <nl> - 	 	 	 <nl> + <nl> 	 	 	 hexStr . append ( " } " ) ; <nl> 	 	 	 return hexStr . toString ( ) ; <nl> 	 	 } <nl> - 	 	 <nl> + <nl> 	 	 / * * <nl> 	 	 * Write fields to backing memory . <nl> 	 	 * / <nl> @ @ - 319 , 10 + 342 , 10 @ @ public interface Guid { <nl> 	 	 	 this . writeField ( " Data3 " ) ; <nl> 	 	 	 this . writeField ( " Data4 " ) ; <nl> 	 	 } <nl> - 	 	 <nl> + <nl> 	 	 / * <nl> 	 	 * ( non - Javadoc ) <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ see com . sun . jna . Structure # getFieldOrder ( ) <nl> 	 	 * / <nl> 	 	 protected List getFieldOrder ( ) { <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / GuidTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / GuidTest . java <nl> index dc02bd1 . . 0699a5d 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / GuidTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / GuidTest . java <nl> @ @ - 3 , 28 + 3 , 127 @ @ package com . sun . jna . platform . win32 ; <nl> import junit . framework . TestCase ; <nl> <nl> import com . sun . jna . platform . win32 . Guid . GUID ; <nl> - import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> <nl> + / / TODO : Auto - generated Javadoc <nl> + / * * <nl> + * The Class GuidTest . <nl> + * / <nl> public class GuidTest extends TestCase { <nl> <nl> + 	 / * * <nl> + 	 * The main method . <nl> + 	 * <nl> + 	 * @ param args <nl> + 	 * the arguments <nl> + 	 * / <nl> 	 public static void main ( String [ ] args ) { <nl> 	 	 junit . textui . TestRunner . run ( GuidTest . class ) ; <nl> 	 } <nl> <nl> + 	 / * * <nl> + 	 * Instantiates a new guid test . <nl> + 	 * / <nl> 	 public GuidTest ( ) { <nl> 	 } <nl> <nl> - 	 public void testGuid ( ) { <nl> - 	 	 System . out . println ( " ref . guid : " + " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; <nl> - 	 	 GUID guid = Ole32Util . getGUIDFromString ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; <nl> - 	 	 System . out . println ( " getGUIDFromString ( ) : " + guid . toGuidString ( ) ) ; <nl> - 	 	 <nl> - 	 	 guid = new GUID ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; <nl> - 	 	 byte [ ] byteArray = guid . toByteArray ( ) ; <nl> - 	 	 guid = new GUID ( byteArray ) ; <nl> - 	 	 System . out . println ( " toGuidString ( ) : " + guid . toGuidString ( ) ) ; <nl> - 	 	 <nl> - 	 	 guid = new GUID ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; <nl> - 	 	 System . out . println ( " getStringFromGUID : " + Ole32Util . getStringFromGUID ( guid ) ) ; <nl> + 	 / * * <nl> + 	 * Loads a GUID from string and verify that the guid returned has the <nl> + 	 * expected values in each byte . <nl> + 	 * / <nl> + 	 public void testGUIDFromString ( ) { <nl> + 	 	 String sourceGuidStr = " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ; <nl> + 	 	 / / test loading via static method <nl> + 	 	 GUID targetGuid = GUID . fromString ( sourceGuidStr ) ; <nl> + <nl> + 	 	 assertEquals ( targetGuid . toGuidString ( ) , sourceGuidStr ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Loads a GUID from string via the constructor and verify that the guid <nl> + 	 * returned has the expected values in each byte . <nl> + 	 * / <nl> + 	 public void testGUIDFromString2 ( ) { <nl> + 	 	 String sourceGuidStr = " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ; <nl> + 	 	 / / test loading via constructor <nl> + 	 	 GUID targetGuid = new GUID ( sourceGuidStr ) ; <nl> + <nl> + 	 	 assertEquals ( targetGuid . toGuidString ( ) , sourceGuidStr ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Loads a GUID from a byte array and verify that the guid returned has the <nl> + 	 * expected values in each byte . <nl> + 	 * / <nl> + 	 public void testGUIDFromBinary ( ) { <nl> + 	 	 byte [ ] sourceGuidBArr = new byte [ ] { ( byte ) 0xA5 , ( byte ) 0xDC , <nl> + 	 	 	 	 ( byte ) 0xBF , ( byte ) 0x10 , ( byte ) 0x65 , ( byte ) 0x30 , <nl> + 	 	 	 	 ( byte ) 0x11 , ( byte ) 0xD2 , ( byte ) 0x90 , ( byte ) 0x1F , <nl> + 	 	 	 	 ( byte ) 0x00 , ( byte ) 0xC0 , ( byte ) 0x4F , ( byte ) 0xB9 , <nl> + 	 	 	 	 ( byte ) 0x51 , ( byte ) 0xED } ; <nl> + <nl> + 	 	 / / test loading via static method <nl> + 	 	 GUID targetGuid = GUID . fromBinary ( sourceGuidBArr ) ; <nl> + 	 	 byte [ ] targetGuidBArr = targetGuid . toByteArray ( ) ; <nl> + <nl> + 	 	 for ( int i = 0 ; i < sourceGuidBArr . length ; i + + ) { <nl> + 	 	 	 assertEquals ( targetGuidBArr [ i ] , sourceGuidBArr [ i ] ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Loads a GUID from a byte array via the constructor and verify that the <nl> + 	 * guid returned has the expected values in each byte . <nl> + 	 * / <nl> + 	 public void testGUIDFromBinary2 ( ) { <nl> + 	 	 byte [ ] sourceGuidBArr = new byte [ ] { ( byte ) 0xA5 , ( byte ) 0xDC , <nl> + 	 	 	 	 ( byte ) 0xBF , ( byte ) 0x10 , ( byte ) 0x65 , ( byte ) 0x30 , <nl> + 	 	 	 	 ( byte ) 0x11 , ( byte ) 0xD2 , ( byte ) 0x90 , ( byte ) 0x1F , <nl> + 	 	 	 	 ( byte ) 0x00 , ( byte ) 0xC0 , ( byte ) 0x4F , ( byte ) 0xB9 , <nl> + 	 	 	 	 ( byte ) 0x51 , ( byte ) 0xED } ; <nl> + <nl> + 	 	 / / test loading via constructor <nl> + 	 	 GUID targetGuid = new GUID ( sourceGuidBArr ) ; <nl> + 	 	 byte [ ] targetGuidBArr = targetGuid . toByteArray ( ) ; <nl> + <nl> + 	 	 for ( int i = 0 ; i < sourceGuidBArr . length ; i + + ) { <nl> + 	 	 	 assertEquals ( targetGuidBArr [ i ] , sourceGuidBArr [ i ] ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Instantiates two guids , one with windows build - in function and one via <nl> + 	 * jna and compares it . <nl> + 	 * / <nl> + 	 public void testBehaviourWithOle32 ( ) { <nl> + 	 	 GUID ole32Guid = Ole32Util . getGUIDFromString ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; <nl> + 	 	 GUID jnaGuid = new GUID ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; <nl> + <nl> + 	 	 assertEquals ( ole32Guid , jnaGuid ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Test with the windows build - in function , compares the result of the <nl> + 	 * methods . <nl> + 	 * / <nl> + 	 public void testBehaviourWithOle32 _ 2 ( ) { <nl> + 	 	 GUID ole32Guid = Ole32Util <nl> + 	 	 	 	 . getGUIDFromString ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; <nl> + 	 	 GUID jnaGuid = new GUID ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; <nl> + <nl> + 	 	 String ole32Guidstr = Ole32Util . getStringFromGUID ( ole32Guid ) ; <nl> + 	 	 String jnaGuidStr = jnaGuid . toGuidString ( ) ; <nl> + <nl> + 	 	 assertEquals ( ole32Guidstr , jnaGuidStr ) ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Tests the new guid with the build - in function coming with windows . <nl> + 	 * / <nl> + 	 public void testNewGuid ( ) { <nl> + 	 	 GUID newGuid = GUID . newGuid ( ) ; <nl> + 	 	 String guidString = newGuid . toGuidString ( ) ; <nl> + 	 	 GUID guidFromString = Ole32Util . getGUIDFromString ( guidString ) ; <nl> + <nl> + 	 	 assertEquals ( guidFromString . toGuidString ( ) , guidString ) ; <nl> 	 } <nl> }

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 6b76c35 . . ba6d688 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 12 , 6 + 12 , 7 @ @ Features 
 * Added Winspool monitor sample and updated Kernel32 , WinBase , Winspool - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . 
 * Added Some minor changes to MS Office samples Test and small changes to the MS Office samples Bug Fixes - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . 
 * [ # 333 ] ( https : / / github . com / twall / jna / pull / 333 ) : Added ` CoTaskMemAlloc ` , ` CoTaskMemRealloc ` and ` CoTaskMemFree ` to ` com . sun . jna . platform . win32 . Ole32 ` - [ @ msteiger ] ( https : / / github . com / msteiger ) . 
 + * [ # 334 ] ( https : / / github . com / twall / jna / pull / 334 ) : Added ` com . sun . jna . platform . win32 . Shell32 . SHGetKnownFolderPath ` and ` KnownFolders ` GUID constants - [ @ msteiger ] ( https : / / github . com / msteiger ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / KnownFolders . java b / contrib / platform / src / com / sun / jna / platform / win32 / KnownFolders . java 
 new file mode 100644 
 index 0000000 . . 0abf39d 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / KnownFolders . java 
 @ @ - 0 , 0 + 1 , 329 @ @ 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import com . sun . jna . platform . win32 . Guid . GUID ; 
 + 
 + / * * 
 + * Ported from KnownFolders . h . 
 + * Microsoft Windows SDK 7 . 0A . 
 + * @ author Martin Steiger 
 + * / 
 + public class KnownFolders 
 + { 
 + / * * 
 + * display name : " Network " < br / > 
 + * legacy display name : " My Network Places " < br / > 
 + * default path : < br / > 
 + * legacy CSIDL value : CSIDL _ NETWORK < br / > 
 + * / 
 + public static final GUID FOLDERID _ NetworkFolder = GUID . fromString ( " { D20BEEC4 - 5CA8 - 4905 - AE3B - BF251EA09B53 } " ) ; 
 + 
 + / / { 0AC0837C - BBF8 - 452A - 850D - 79D08E667CA7 } 
 + public static final GUID FOLDERID _ ComputerFolder = GUID . fromString ( " { 0AC0837C - BBF8 - 452A - 850D - 79D08E667CA7 } " ) ; 
 + 
 + / / { 4D9F7874 - 4E0C - 4904 - 967B - 40B0D20C3E4B } 
 + public static final GUID FOLDERID _ InternetFolder = GUID . fromString ( " { 4D9F7874 - 4E0C - 4904 - 967B - 40B0D20C3E4B } " ) ; 
 + 
 + / / { 82A74AEB - AEB4 - 465C - A014 - D097EE346D63 } 
 + public static final GUID FOLDERID _ ControlPanelFolder = GUID . fromString ( " { 82A74AEB - AEB4 - 465C - A014 - D097EE346D63 } " ) ; 
 + 
 + / / { 76FC4E2D - D6AD - 4519 - A663 - 37BD56068185 } 
 + public static final GUID FOLDERID _ PrintersFolder = GUID . fromString ( " { 76FC4E2D - D6AD - 4519 - A663 - 37BD56068185 } " ) ; 
 + 
 + / / { 43668BF8 - C14E - 49B2 - 97C9 - 747784D784B7 } 
 + public static final GUID FOLDERID _ SyncManagerFolder = GUID . fromString ( " { 43668BF8 - C14E - 49B2 - 97C9 - 747784D784B7 } " ) ; 
 + 
 + / / { 0F214138 - B1D3 - 4a90 - BBA9 - 27CBC0C5389A } 
 + public static final GUID FOLDERID _ SyncSetupFolder = GUID . fromString ( " { 0f214138 - b1d3 - 4a90 - bba9 - 27cbc0c5389a } " ) ; 
 + 
 + / / { 4bfefb45 - 347d - 4006 - a5be - ac0cb0567192 } 
 + public static final GUID FOLDERID _ ConflictFolder = GUID . fromString ( " { 4bfefb45 - 347d - 4006 - a5be - ac0cb0567192 } " ) ; 
 + 
 + / / { 289a9a43 - be44 - 4057 - a41b - 587a76d7e7f9 } 
 + public static final GUID FOLDERID _ SyncResultsFolder = GUID . fromString ( " { 289a9a43 - be44 - 4057 - a41b - 587a76d7e7f9 } " ) ; 
 + 
 + / / { B7534046 - 3ECB - 4C18 - BE4E - 64CD4CB7D6AC } 
 + public static final GUID FOLDERID _ RecycleBinFolder = GUID . fromString ( " { B7534046 - 3ECB - 4C18 - BE4E - 64CD4CB7D6AC } " ) ; 
 + 
 + / / { 6F0CD92B - 2E97 - 45D1 - 88FF - B0D186B8DEDD } 
 + public static final GUID FOLDERID _ ConnectionsFolder = GUID . fromString ( " { 6F0CD92B - 2E97 - 45D1 - 88FF - B0D186B8DEDD } " ) ; 
 + 
 + / / { FD228CB7 - AE11 - 4AE3 - 864C - 16F3910AB8FE } 
 + public static final GUID FOLDERID _ Fonts = GUID . fromString ( " { FD228CB7 - AE11 - 4AE3 - 864C - 16F3910AB8FE } " ) ; 
 + 
 + / * * 
 + * display name : " Desktop " < br / > 
 + * default path : " C : \ Users \ < UserName > \ Desktop " 
 + * legacy default path : " C : \ Documents and Settings \ < userName > \ Desktop " 
 + * legacy CSIDL value : CSIDL _ DESKTOP 
 + * / 
 + / / { B4BFCC3A - DB2C - 424C - B029 - 7FE99A87C641 } 
 + public static final GUID FOLDERID _ Desktop = GUID . fromString ( " { B4BFCC3A - DB2C - 424C - B029 - 7FE99A87C641 } " ) ; 
 + 
 + / / { B97D20BB - F46A - 4C97 - BA10 - 5E3608430854 } 
 + public static final GUID FOLDERID _ Startup = GUID . fromString ( " { B97D20BB - F46A - 4C97 - BA10 - 5E3608430854 } " ) ; 
 + 
 + / / { A77F5D77 - 2E2B - 44C3 - A6A2 - ABA601054A51 } 
 + public static final GUID FOLDERID _ Programs = GUID . fromString ( " { A77F5D77 - 2E2B - 44C3 - A6A2 - ABA601054A51 } " ) ; 
 + 
 + / / { 625B53C3 - AB48 - 4EC1 - BA1F - A1EF4146FC19 } 
 + public static final GUID FOLDERID _ StartMenu = GUID . fromString ( " { 625B53C3 - AB48 - 4EC1 - BA1F - A1EF4146FC19 } " ) ; 
 + 
 + / / { AE50C081 - EBD2 - 438A - 8655 - 8A092E34987A } 
 + public static final GUID FOLDERID _ Recent = GUID . fromString ( " { AE50C081 - EBD2 - 438A - 8655 - 8A092E34987A } " ) ; 
 + 
 + / / { 8983036C - 27C0 - 404B - 8F08 - 102D10DCFD74 } 
 + public static final GUID FOLDERID _ SendTo = GUID . fromString ( " { 8983036C - 27C0 - 404B - 8F08 - 102D10DCFD74 } " ) ; 
 + 
 + / / { FDD39AD0 - 238F - 46AF - ADB4 - 6C85480369C7 } 
 + public static final GUID FOLDERID _ Documents = GUID . fromString ( " { FDD39AD0 - 238F - 46AF - ADB4 - 6C85480369C7 } " ) ; 
 + 
 + / / { 1777F761 - 68AD - 4D8A - 87BD - 30B759FA33DD } 
 + public static final GUID FOLDERID _ Favorites = GUID . fromString ( " { 1777F761 - 68AD - 4D8A - 87BD - 30B759FA33DD } " ) ; 
 + 
 + / / { C5ABBF53 - E17F - 4121 - 8900 - 86626FC2C973 } 
 + public static final GUID FOLDERID _ NetHood = GUID . fromString ( " { C5ABBF53 - E17F - 4121 - 8900 - 86626FC2C973 } " ) ; 
 + 
 + / / { 9274BD8D - CFD1 - 41C3 - B35E - B13F55A758F4 } 
 + public static final GUID FOLDERID _ PrintHood = GUID . fromString ( " { 9274BD8D - CFD1 - 41C3 - B35E - B13F55A758F4 } " ) ; 
 + 
 + / / { A63293E8 - 664E - 48DB - A079 - DF759E0509F7 } 
 + public static final GUID FOLDERID _ Templates = GUID . fromString ( " { A63293E8 - 664E - 48DB - A079 - DF759E0509F7 } " ) ; 
 + 
 + / / { 82A5EA35 - D9CD - 47C5 - 9629 - E15D2F714E6E } 
 + public static final GUID FOLDERID _ CommonStartup = GUID . fromString ( " { 82A5EA35 - D9CD - 47C5 - 9629 - E15D2F714E6E } " ) ; 
 + 
 + / / { 0139D44E - 6AFE - 49F2 - 8690 - 3DAFCAE6FFB8 } 
 + public static final GUID FOLDERID _ CommonPrograms = GUID . fromString ( " { 0139D44E - 6AFE - 49F2 - 8690 - 3DAFCAE6FFB8 } " ) ; 
 + 
 + / / { A4115719 - D62E - 491D - AA7C - E74B8BE3B067 } 
 + public static final GUID FOLDERID _ CommonStartMenu = GUID . fromString ( " { A4115719 - D62E - 491D - AA7C - E74B8BE3B067 } " ) ; 
 + 
 + / / { C4AA340D - F20F - 4863 - AFEF - F87EF2E6BA25 } 
 + public static final GUID FOLDERID _ PublicDesktop = GUID . fromString ( " { C4AA340D - F20F - 4863 - AFEF - F87EF2E6BA25 } " ) ; 
 + 
 + / / { 62AB5D82 - FDC1 - 4DC3 - A9DD - 070D1D495D97 } 
 + public static final GUID FOLDERID _ ProgramData = GUID . fromString ( " { 62AB5D82 - FDC1 - 4DC3 - A9DD - 070D1D495D97 } " ) ; 
 + 
 + / / { B94237E7 - 57AC - 4347 - 9151 - B08C6C32D1F7 } 
 + public static final GUID FOLDERID _ CommonTemplates = GUID . fromString ( " { B94237E7 - 57AC - 4347 - 9151 - B08C6C32D1F7 } " ) ; 
 + 
 + / / { ED4824AF - DCE4 - 45A8 - 81E2 - FC7965083634 } 
 + public static final GUID FOLDERID _ PublicDocuments = GUID . fromString ( " { ED4824AF - DCE4 - 45A8 - 81E2 - FC7965083634 } " ) ; 
 + 
 + / / { 3EB685DB - 65F9 - 4CF6 - A03A - E3EF65729F3D } 
 + public static final GUID FOLDERID _ RoamingAppData = GUID . fromString ( " { 3EB685DB - 65F9 - 4CF6 - A03A - E3EF65729F3D } " ) ; 
 + 
 + / / { F1B32785 - 6FBA - 4FCF - 9D55 - 7B8E7F157091 } 
 + public static final GUID FOLDERID _ LocalAppData = GUID . fromString ( " { F1B32785 - 6FBA - 4FCF - 9D55 - 7B8E7F157091 } " ) ; 
 + 
 + / / { A520A1A4 - 1780 - 4FF6 - BD18 - 167343C5AF16 } 
 + public static final GUID FOLDERID _ LocalAppDataLow = GUID . fromString ( " { A520A1A4 - 1780 - 4FF6 - BD18 - 167343C5AF16 } " ) ; 
 + 
 + / / { 352481E8 - 33BE - 4251 - BA85 - 6007CAEDCF9D } 
 + public static final GUID FOLDERID _ InternetCache = GUID . fromString ( " { 352481E8 - 33BE - 4251 - BA85 - 6007CAEDCF9D } " ) ; 
 + 
 + / / { 2B0F765D - C0E9 - 4171 - 908E - 08A611B84FF6 } 
 + public static final GUID FOLDERID _ Cookies = GUID . fromString ( " { 2B0F765D - C0E9 - 4171 - 908E - 08A611B84FF6 } " ) ; 
 + 
 + / / { D9DC8A3B - B784 - 432E - A781 - 5A1130A75963 } 
 + public static final GUID FOLDERID _ History = GUID . fromString ( " { D9DC8A3B - B784 - 432E - A781 - 5A1130A75963 } " ) ; 
 + 
 + / / { 1AC14E77 - 02E7 - 4E5D - B744 - 2EB1AE5198B7 } 
 + public static final GUID FOLDERID _ System = GUID . fromString ( " { 1AC14E77 - 02E7 - 4E5D - B744 - 2EB1AE5198B7 } " ) ; 
 + 
 + / / { D65231B0 - B2F1 - 4857 - A4CE - A8E7C6EA7D27 } 
 + public static final GUID FOLDERID _ SystemX86 = GUID . fromString ( " { D65231B0 - B2F1 - 4857 - A4CE - A8E7C6EA7D27 } " ) ; 
 + 
 + / / { F38BF404 - 1D43 - 42F2 - 9305 - 67DE0B28FC23 } 
 + public static final GUID FOLDERID _ Windows = GUID . fromString ( " { F38BF404 - 1D43 - 42F2 - 9305 - 67DE0B28FC23 } " ) ; 
 + 
 + / / { 5E6C858F - 0E22 - 4760 - 9AFE - EA3317B67173 } 
 + public static final GUID FOLDERID _ Profile = GUID . fromString ( " { 5E6C858F - 0E22 - 4760 - 9AFE - EA3317B67173 } " ) ; 
 + 
 + / / { 33E28130 - 4E1E - 4676 - 835A - 98395C3BC3BB } 
 + public static final GUID FOLDERID _ Pictures = GUID . fromString ( " { 33E28130 - 4E1E - 4676 - 835A - 98395C3BC3BB } " ) ; 
 + 
 + / / { 7C5A40EF - A0FB - 4BFC - 874A - C0F2E0B9FA8E } 
 + public static final GUID FOLDERID _ ProgramFilesX86 = GUID . fromString ( " { 7C5A40EF - A0FB - 4BFC - 874A - C0F2E0B9FA8E } " ) ; 
 + 
 + / / { DE974D24 - D9C6 - 4D3E - BF91 - F4455120B917 } 
 + public static final GUID FOLDERID _ ProgramFilesCommonX86 = GUID . fromString ( " { DE974D24 - D9C6 - 4D3E - BF91 - F4455120B917 } " ) ; 
 + 
 + / / { 6D809377 - 6AF0 - 444b - 8957 - A3773F02200E } 
 + public static final GUID FOLDERID _ ProgramFilesX64 = GUID . fromString ( " { 6d809377 - 6af0 - 444b - 8957 - a3773f02200e } " ) ; 
 + 
 + / / { 6365D5A7 - 0F0D - 45e5 - 87F6 - 0DA56B6A4F7D } 
 + public static final GUID FOLDERID _ ProgramFilesCommonX64 = GUID . fromString ( " { 6365d5a7 - 0f0d - 45e5 - 87f6 - 0da56b6a4f7d } " ) ; 
 + 
 + / / { 905e63b6 - c1bf - 494e - b29c - 65b732d3d21a } 
 + public static final GUID FOLDERID _ ProgramFiles = GUID . fromString ( " { 905e63b6 - c1bf - 494e - b29c - 65b732d3d21a } " ) ; 
 + 
 + / / { F7F1ED05 - 9F6D - 47A2 - AAAE - 29D317C6F066 } 
 + public static final GUID FOLDERID _ ProgramFilesCommon = GUID . fromString ( " { F7F1ED05 - 9F6D - 47A2 - AAAE - 29D317C6F066 } " ) ; 
 + 
 + / / { 5cd7aee2 - 2219 - 4a67 - b85d - 6c9ce15660cb } 
 + public static final GUID FOLDERID _ UserProgramFiles = GUID . fromString ( " { 5cd7aee2 - 2219 - 4a67 - b85d - 6c9ce15660cb } " ) ; 
 + 
 + / / { bcbd3057 - ca5c - 4622 - b42d - bc56db0ae516 } 
 + public static final GUID FOLDERID _ UserProgramFilesCommon = GUID . fromString ( " { bcbd3057 - ca5c - 4622 - b42d - bc56db0ae516 } " ) ; 
 + 
 + / / { 724EF170 - A42D - 4FEF - 9F26 - B60E846FBA4F } 
 + public static final GUID FOLDERID _ AdminTools = GUID . fromString ( " { 724EF170 - A42D - 4FEF - 9F26 - B60E846FBA4F } " ) ; 
 + 
 + / / { D0384E7D - BAC3 - 4797 - 8F14 - CBA229B392B5 } 
 + public static final GUID FOLDERID _ CommonAdminTools = GUID . fromString ( " { D0384E7D - BAC3 - 4797 - 8F14 - CBA229B392B5 } " ) ; 
 + 
 + / / { 4BD8D571 - 6D19 - 48D3 - BE97 - 422220080E43 } 
 + public static final GUID FOLDERID _ Music = GUID . fromString ( " { 4BD8D571 - 6D19 - 48D3 - BE97 - 422220080E43 } " ) ; 
 + 
 + / / { 18989B1D - 99B5 - 455B - 841C - AB7C74E4DDFC } 
 + public static final GUID FOLDERID _ Videos = GUID . fromString ( " { 18989B1D - 99B5 - 455B - 841C - AB7C74E4DDFC } " ) ; 
 + 
 + / / { C870044B - F49E - 4126 - A9C3 - B52A1FF411E8 } 
 + public static final GUID FOLDERID _ Ringtones = GUID . fromString ( " { C870044B - F49E - 4126 - A9C3 - B52A1FF411E8 } " ) ; 
 + 
 + / / { B6EBFB86 - 6907 - 413C - 9AF7 - 4FC2ABF07CC5 } 
 + public static final GUID FOLDERID _ PublicPictures = GUID . fromString ( " { B6EBFB86 - 6907 - 413C - 9AF7 - 4FC2ABF07CC5 } " ) ; 
 + 
 + / / { 3214FAB5 - 9757 - 4298 - BB61 - 92A9DEAA44FF } 
 + public static final GUID FOLDERID _ PublicMusic = GUID . fromString ( " { 3214FAB5 - 9757 - 4298 - BB61 - 92A9DEAA44FF } " ) ; 
 + 
 + / / { 2400183A - 6185 - 49FB - A2D8 - 4A392A602BA3 } 
 + public static final GUID FOLDERID _ PublicVideos = GUID . fromString ( " { 2400183A - 6185 - 49FB - A2D8 - 4A392A602BA3 } " ) ; 
 + 
 + / / { E555AB60 - 153B - 4D17 - 9F04 - A5FE99FC15EC } 
 + public static final GUID FOLDERID _ PublicRingtones = GUID . fromString ( " { E555AB60 - 153B - 4D17 - 9F04 - A5FE99FC15EC } " ) ; 
 + 
 + / / { 8AD10C31 - 2ADB - 4296 - A8F7 - E4701232C972 } 
 + public static final GUID FOLDERID _ ResourceDir = GUID . fromString ( " { 8AD10C31 - 2ADB - 4296 - A8F7 - E4701232C972 } " ) ; 
 + 
 + / / { 2A00375E - 224C - 49DE - B8D1 - 440DF7EF3DDC } 
 + public static final GUID FOLDERID _ LocalizedResourcesDir = GUID . fromString ( " { 2A00375E - 224C - 49DE - B8D1 - 440DF7EF3DDC } " ) ; 
 + 
 + / / { C1BAE2D0 - 10DF - 4334 - BEDD - 7AA20B227A9D } 
 + public static final GUID FOLDERID _ CommonOEMLinks = GUID . fromString ( " { C1BAE2D0 - 10DF - 4334 - BEDD - 7AA20B227A9D } " ) ; 
 + 
 + / / { 9E52AB10 - F80D - 49DF - ACB8 - 4330F5687855 } 
 + public static final GUID FOLDERID _ CDBurning = GUID . fromString ( " { 9E52AB10 - F80D - 49DF - ACB8 - 4330F5687855 } " ) ; 
 + 
 + / / { 0762D272 - C50A - 4BB0 - A382 - 697DCD729B80 } 
 + public static final GUID FOLDERID _ UserProfiles = GUID . fromString ( " { 0762D272 - C50A - 4BB0 - A382 - 697DCD729B80 } " ) ; 
 + 
 + / / { DE92C1C7 - 837F - 4F69 - A3BB - 86E631204A23 } 
 + public static final GUID FOLDERID _ Playlists = GUID . fromString ( " { DE92C1C7 - 837F - 4F69 - A3BB - 86E631204A23 } " ) ; 
 + 
 + / / { 15CA69B3 - 30EE - 49C1 - ACE1 - 6B5EC372AFB5 } 
 + public static final GUID FOLDERID _ SamplePlaylists = GUID . fromString ( " { 15CA69B3 - 30EE - 49C1 - ACE1 - 6B5EC372AFB5 } " ) ; 
 + 
 + / / { B250C668 - F57D - 4EE1 - A63C - 290EE7D1AA1F } 
 + public static final GUID FOLDERID _ SampleMusic = GUID . fromString ( " { B250C668 - F57D - 4EE1 - A63C - 290EE7D1AA1F } " ) ; 
 + 
 + / / { C4900540 - 2379 - 4C75 - 844B - 64E6FAF8716B } 
 + public static final GUID FOLDERID _ SamplePictures = GUID . fromString ( " { C4900540 - 2379 - 4C75 - 844B - 64E6FAF8716B } " ) ; 
 + 
 + / / { 859EAD94 - 2E85 - 48AD - A71A - 0969CB56A6CD } 
 + public static final GUID FOLDERID _ SampleVideos = GUID . fromString ( " { 859EAD94 - 2E85 - 48AD - A71A - 0969CB56A6CD } " ) ; 
 + 
 + / / { 69D2CF90 - FC33 - 4FB7 - 9A0C - EBB0F0FCB43C } 
 + public static final GUID FOLDERID _ PhotoAlbums = GUID . fromString ( " { 69D2CF90 - FC33 - 4FB7 - 9A0C - EBB0F0FCB43C } " ) ; 
 + 
 + / / { DFDF76A2 - C82A - 4D63 - 906A - 5644AC457385 } 
 + public static final GUID FOLDERID _ Public = GUID . fromString ( " { DFDF76A2 - C82A - 4D63 - 906A - 5644AC457385 } " ) ; 
 + 
 + / / { df7266ac - 9274 - 4867 - 8d55 - 3bd661de872d } 
 + public static final GUID FOLDERID _ ChangeRemovePrograms = GUID . fromString ( " { df7266ac - 9274 - 4867 - 8d55 - 3bd661de872d } " ) ; 
 + 
 + / / { a305ce99 - f527 - 492b - 8b1a - 7e76fa98d6e4 } 
 + public static final GUID FOLDERID _ AppUpdates = GUID . fromString ( " { a305ce99 - f527 - 492b - 8b1a - 7e76fa98d6e4 } " ) ; 
 + 
 + / / { de61d971 - 5ebc - 4f02 - a3a9 - 6c82895e5c04 } 
 + public static final GUID FOLDERID _ AddNewPrograms = GUID . fromString ( " { de61d971 - 5ebc - 4f02 - a3a9 - 6c82895e5c04 } " ) ; 
 + 
 + / / { 374DE290 - 123F - 4565 - 9164 - 39C4925E467B } 
 + public static final GUID FOLDERID _ Downloads = GUID . fromString ( " { 374de290 - 123f - 4565 - 9164 - 39c4925e467b } " ) ; 
 + 
 + / / { 3D644C9B - 1FB8 - 4f30 - 9B45 - F670235F79C0 } 
 + public static final GUID FOLDERID _ PublicDownloads = GUID . fromString ( " { 3d644c9b - 1fb8 - 4f30 - 9b45 - f670235f79c0 } " ) ; 
 + 
 + / / { 7d1d3a04 - debb - 4115 - 95cf - 2f29da2920da } 
 + public static final GUID FOLDERID _ SavedSearches = GUID . fromString ( " { 7d1d3a04 - debb - 4115 - 95cf - 2f29da2920da } " ) ; 
 + 
 + / / { 52a4f021 - 7b75 - 48a9 - 9f6b - 4b87a210bc8f } 
 + public static final GUID FOLDERID _ QuickLaunch = GUID . fromString ( " { 52a4f021 - 7b75 - 48a9 - 9f6b - 4b87a210bc8f } " ) ; 
 + 
 + / / { 56784854 - C6CB - 462b - 8169 - 88E350ACB882 } 
 + public static final GUID FOLDERID _ Contacts = GUID . fromString ( " { 56784854 - c6cb - 462b - 8169 - 88e350acb882 } " ) ; 
 + 
 + / / { A75D362E - 50FC - 4fb7 - AC2C - A8BEAA314493 } 
 + public static final GUID FOLDERID _ SidebarParts = GUID . fromString ( " { a75d362e - 50fc - 4fb7 - ac2c - a8beaa314493 } " ) ; 
 + 
 + / / { 7B396E54 - 9EC5 - 4300 - BE0A - 2482EBAE1A26 } 
 + public static final GUID FOLDERID _ SidebarDefaultParts = GUID . fromString ( " { 7b396e54 - 9ec5 - 4300 - be0a - 2482ebae1a26 } " ) ; 
 + 
 + / / { DEBF2536 - E1A8 - 4c59 - B6A2 - 414586476AEA } 
 + public static final GUID FOLDERID _ PublicGameTasks = GUID . fromString ( " { debf2536 - e1a8 - 4c59 - b6a2 - 414586476aea } " ) ; 
 + 
 + / / { 054FAE61 - 4DD8 - 4787 - 80B6 - 090220C4B700 } 
 + public static final GUID FOLDERID _ GameTasks = GUID . fromString ( " { 054fae61 - 4dd8 - 4787 - 80b6 - 090220c4b700 } " ) ; 
 + 
 + / / { 4C5C32FF - BB9D - 43b0 - B5B4 - 2D72E54EAAA4 } 
 + public static final GUID FOLDERID _ SavedGames = GUID . fromString ( " { 4c5c32ff - bb9d - 43b0 - b5b4 - 2d72e54eaaa4 } " ) ; 
 + 
 + / / { CAC52C1A - B53D - 4edc - 92D7 - 6B2E8AC19434 } 
 + public static final GUID FOLDERID _ Games = GUID . fromString ( " { cac52c1a - b53d - 4edc - 92d7 - 6b2e8ac19434 } " ) ; 
 + 
 + / / { 98ec0e18 - 2098 - 4d44 - 8644 - 66979315a281 } 
 + public static final GUID FOLDERID _ SEARCH _ MAPI = GUID . fromString ( " { 98ec0e18 - 2098 - 4d44 - 8644 - 66979315a281 } " ) ; 
 + 
 + / / { ee32e446 - 31ca - 4aba - 814f - a5ebd2fd6d5e } 
 + public static final GUID FOLDERID _ SEARCH _ CSC = GUID . fromString ( " { ee32e446 - 31ca - 4aba - 814f - a5ebd2fd6d5e } " ) ; 
 + 
 + / / { bfb9d5e0 - c6a9 - 404c - b2b2 - ae6db6af4968 } 
 + public static final GUID FOLDERID _ Links = GUID . fromString ( " { bfb9d5e0 - c6a9 - 404c - b2b2 - ae6db6af4968 } " ) ; 
 + 
 + / / { f3ce0f7c - 4901 - 4acc - 8648 - d5d44b04ef8f } 
 + public static final GUID FOLDERID _ UsersFiles = GUID . fromString ( " { f3ce0f7c - 4901 - 4acc - 8648 - d5d44b04ef8f } " ) ; 
 + 
 + / / { A302545D - DEFF - 464b - ABE8 - 61C8648D939B } 
 + public static final GUID FOLDERID _ UsersLibraries = GUID . fromString ( " { a302545d - deff - 464b - abe8 - 61c8648d939b } " ) ; 
 + 
 + / / { 190337d1 - b8ca - 4121 - a639 - 6d472d16972a } 
 + public static final GUID FOLDERID _ SearchHome = GUID . fromString ( " { 190337d1 - b8ca - 4121 - a639 - 6d472d16972a } " ) ; 
 + 
 + / / { 2C36C0AA - 5812 - 4b87 - BFD0 - 4CD0DFB19B39 } 
 + public static final GUID FOLDERID _ OriginalImages = GUID . fromString ( " { 2C36C0AA - 5812 - 4b87 - bfd0 - 4cd0dfb19b39 } " ) ; 
 + 
 + / / { 7b0db17d - 9cd2 - 4a93 - 9733 - 46cc89022e7c } 
 + public static final GUID FOLDERID _ DocumentsLibrary = GUID . fromString ( " { 7b0db17d - 9cd2 - 4a93 - 9733 - 46cc89022e7c } " ) ; 
 + 
 + / / { 2112AB0A - C86A - 4ffe - A368 - 0DE96E47012E } 
 + public static final GUID FOLDERID _ MusicLibrary = GUID . fromString ( " { 2112ab0a - c86a - 4ffe - a368 - 0de96e47012e } " ) ; 
 + 
 + / / { A990AE9F - A03B - 4e80 - 94BC - 9912D7504104 } 
 + public static final GUID FOLDERID _ PicturesLibrary = GUID . fromString ( " { a990ae9f - a03b - 4e80 - 94bc - 9912d7504104 } " ) ; 
 + 
 + / / { 491E922F - 5643 - 4af4 - A7EB - 4E7A138D8174 } 
 + public static final GUID FOLDERID _ VideosLibrary = GUID . fromString ( " { 491e922f - 5643 - 4af4 - a7eb - 4e7a138d8174 } " ) ; 
 + 
 + / / { 1A6FDBA2 - F42D - 4358 - A798 - B74D745926C5 } 
 + public static final GUID FOLDERID _ RecordedTVLibrary = GUID . fromString ( " { 1a6fdba2 - f42d - 4358 - a798 - b74d745926c5 } " ) ; 
 + 
 + / / { 52528A6B - B9E3 - 4add - B60D - 588C2DBA842D } 
 + public static final GUID FOLDERID _ HomeGroup = GUID . fromString ( " { 52528a6b - b9e3 - 4add - b60d - 588c2dba842d } " ) ; 
 + 
 + / / { 5CE4A5E9 - E4EB - 479D - B89F - 130C02886155 } 
 + public static final GUID FOLDERID _ DeviceMetadataStore = GUID . fromString ( " { 5ce4a5e9 - e4eb - 479d - b89f - 130c02886155 } " ) ; 
 + 
 + / / { 1B3EA5DC - B587 - 4786 - B4EF - BD1DC332AEAE } 
 + public static final GUID FOLDERID _ Libraries = GUID . fromString ( " { 1b3ea5dc - b587 - 4786 - b4ef - bd1dc332aeae } " ) ; 
 + 
 + / / { 48daf80b - e6cf - 4f4e - b800 - 0e69d84ee384 } 
 + public static final GUID FOLDERID _ PublicLibraries = GUID . fromString ( " { 48daf80b - e6cf - 4f4e - b800 - 0e69d84ee384 } " ) ; 
 + 
 + / / { 9e3995ab - 1f9c - 4f13 - b827 - 48b24b6c7174 } 
 + public static final GUID FOLDERID _ UserPinned = GUID . fromString ( " { 9e3995ab - 1f9c - 4f13 - b827 - 48b24b6c7174 } " ) ; 
 + 
 + / / { bcb5256f - 79f6 - 4cee - b725 - dc34e402fd46 } 
 + public static final GUID FOLDERID _ ImplicitAppShortcuts = GUID . fromString ( " { bcb5256f - 79f6 - 4cee - b725 - dc34e402fd46 } " ) ; 
 + 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java 
 index b9df1e7 . . 65f90a8 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package com . sun . jna . platform . win32 ; 
 
 import com . sun . jna . Native ; 
 + import com . sun . jna . platform . win32 . Guid . GUID ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 import com . sun . jna . platform . win32 . WinDef . HWND ; 
 import com . sun . jna . platform . win32 . WinDef . INT _ PTR ; 
 @ @ - 66 , 6 + 67 , 36 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { 
 	 	 char [ ] pszPath ) ; 
 
 / * * 
 + * Retrieves the full path of a known folder identified by the folder ' s KNOWNFOLDERID . This function replaces 
 + * { @ link # SHGetFolderPath } . That older function is now simply a wrapper for SHGetKnownFolderPath . 
 + * @ param rfid A reference to the KNOWNFOLDERID ( in { @ link KnownFolders } ) that identifies the folder . 
 + * @ param dwFlags Flags that specify special retrieval options . This value can be 0 ; otherwise , one or more of the 
 + * { @ link ShlObj . KNOWN _ FOLDER _ FLAG } values . 
 + * @ param hToken Type : HANDLE An access token that represents a particular user . If this parameter is NULL , which is 
 + * the most common usage , the function requests the known folder for the current user . Request a specific user ' s 
 + * folder by passing the hToken of that user . This is typically done in the context of a service that has sufficient 
 + * privileges to retrieve the token of a given user . That token must be opened with TOKEN _ QUERY and 
 + * TOKEN _ IMPERSONATE rights . In some cases , you also need to include TOKEN _ DUPLICATE . In addition to passing the 
 + * user ' s hToken , the registry hive of that specific user must be mounted . See Access Control for further discussion 
 + * of access control issues . Assigning the hToken parameter a value of - 1 indicates the Default User . This allows 
 + * clients of SHGetKnownFolderPath to find folder locations ( such as the Desktop folder ) for the Default User . The 
 + * Default User user profile is duplicated when any new user account is created , and includes special folders such 
 + * as Documents and Desktop . Any items added to the Default User folder also appear in any new user account . Note 
 + * that access to the Default User folders requires administrator privileges . 
 + * @ param ppszPath When this method returns , contains the address of a pointer to a null - terminated 
 + * Unicode string that specifies the path of the known folder . The calling process is responsible for freeing this 
 + * resource once it is no longer needed by calling { @ link Ole32 # CoTaskMemFree } . The returned path does not include a trailing 
 + * backslash . For example , " C : \ Users " is returned rather than " C : \ Users \ " . 
 + * @ return Returns S _ OK if successful , or an error value otherwise , including the following : 
 + * < li > E _ FAIL Among other things , this value can indicate that the rfid parameter references a KNOWNFOLDERID which 
 + * does not have a path ( such as a folder marked as KF _ CATEGORY _ VIRTUAL ) . < / li > 
 + * < li > E _ INVALIDARG Among other things , this value can indicate that the rfid parameter references a KNOWNFOLDERID 
 + * that is not present on the system . Not all KNOWNFOLDERID values are present on all systems . Use 
 + * IKnownFolderManager : : GetFolderIds to retrieve the set of KNOWNFOLDERID values for the current system . < / li > 
 + * / 
 + HRESULT SHGetKnownFolderPath ( GUID rfid , int dwFlags , HANDLE hToken , PointerByReference ppszPath ) ; 
 + 
 + / * * 
 * Retrieves the IShellFolder interface for the desktop folder , which is the root of the Shell ' s namespace . 
 * The retrieved COM interface pointer can be used via Com4JNA ' s ComObject . wrapNativeInterface call 
 * given a suitable interface definition for IShellFolder 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32Util . java 
 index 9641b51 . . 6748cc5 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32Util . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32Util . java 
 @ @ - 13 , 9 + 13 , 13 @ @ 
 package com . sun . jna . platform . win32 ; 
 
 import com . sun . jna . Native ; 
 + import com . sun . jna . platform . win32 . Guid . GUID ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 import com . sun . jna . platform . win32 . WinDef . HWND ; 
 + import com . sun . jna . platform . win32 . WinDef . LPVOID ; 
 + import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 
 / * * 
 * Shell32 Utility API . 
 @ @ - 56 , 6 + 60 , 34 @ @ public abstract class Shell32Util { 
 	 public static String getFolderPath ( int nFolder ) { 
 	 	 return getFolderPath ( null , nFolder , ShlObj . SHGFP _ TYPE _ CURRENT ) ; 
 	 } 
 + 	 
 + / * * 
 + * Retrieves the full path of a known folder identified by the folder ' s KNOWNFOLDERID . This function replaces 
 + * { @ link # getFolderPath } . That older function is now simply a wrapper for getKnownFolderPath 
 + * @ param guid the KNOWNFOLDERS GUID as defined in { @ link KnownFolders } 
 + * @ return the path of the known folder . The returned path does not include a trailing backslash . For example , 
 + * " C : \ Users " is returned rather than " C : \ Users \ " . 
 + * @ throws Win32Exception if the guid references a KNOWNFOLDERID which does not have a path ( such as a folder marked 
 + * as KF _ CATEGORY _ VIRTUAL ) or that the KNOWNFOLDERID is not present on the system . Not all KNOWNFOLDERID values are 
 + * present on all systems . 
 + * / 
 + public static String getKnownFolderPath ( GUID guid ) throws Win32Exception 
 + { 
 + int flags = ShlObj . KNOWN _ FOLDER _ FLAG . NONE . getFlag ( ) ; 
 + PointerByReference outPath = new PointerByReference ( ) ; 
 + HANDLE token = null ; 
 + HRESULT hr = Shell32 . INSTANCE . SHGetKnownFolderPath ( guid , flags , token , outPath ) ; 
 + 
 + if ( ! W32Errors . SUCCEEDED ( hr . intValue ( ) ) ) 
 + { 
 + throw new Win32Exception ( hr ) ; 
 + } 
 + 
 + String result = outPath . getValue ( ) . getWideString ( 0 ) ; 
 + Ole32 . INSTANCE . CoTaskMemFree ( new LPVOID ( outPath . getPointer ( ) . getLong ( 0 ) ) ) ; 
 + 
 + return result ; 
 + } 
 
 	 / * * 
 * Retrieves the path of a special folder , identified by its CSIDL . 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / ShlObj . java b / contrib / platform / src / com / sun / jna / platform / win32 / ShlObj . java 
 index 99684fe . . d06f1c1 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / ShlObj . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / ShlObj . java 
 @ @ - 81 , 4 + 81 , 102 @ @ public interface ShlObj { 
 int CSIDL _ COMMON _ OEM _ LINKS = 0x003a ; / / Links to All Users OEM specific apps 
 int CSIDL _ CDBURN _ AREA = 0x003b ; / / USERPROFILE \ Local Settings \ Application Data \ Microsoft \ CD Burning 
 int CSIDL _ COMPUTERSNEARME = 0x003d ; / / Computers Near Me ( computered from Workgroup membership ) 
 + 
 + / * * 
 + * KnownFolder flags as used by SHGetKnownFolderPath , SHGetKnownFolderIDList and others . 
 + * Microsoft Windows SDK 7 . 0A . 
 + * / 
 + public enum KNOWN _ FOLDER _ FLAG 
 + { 
 + / * * 
 + * None 
 + * / 
 + NONE ( 0x00000000 ) , 
 + 
 + / * * 
 + * Build a simple IDList ( PIDL ) This value can be used when you want to retrieve the file system path but do not 
 + * specify this value if you are retrieving the localized display name of the folder because it might not 
 + * resolve correctly . 
 + * / 
 + SIMPLE _ IDLIST ( 0x00000100 ) , 
 + 
 + / * * 
 + * Gets the folder ' s default path independent of the current location of its parent . KF _ FLAG _ DEFAULT _ PATH must 
 + * also be set . 
 + * / 
 + NOT _ PARENT _ RELATIVE ( 0x00000200 ) , 
 + 
 + / * * 
 + * Gets the default path for a known folder . If this flag is not set , the function retrieves the current - and 
 + * possibly redirected - path of the folder . The execution of this flag includes a verification of the folder ' s 
 + * existence unless KF _ FLAG _ DONT _ VERIFY is set . 
 + * / 
 + DEFAULT _ PATH ( 0x00000400 ) , 
 + 
 + / * * 
 + * Initializes the folder using its Desktop . ini settings . If the folder cannot be initialized , the function 
 + * returns a failure code and no path is returned . This flag should always be combined with KF _ FLAG _ CREATE . 
 + * / 
 + INIT ( 0x00000800 ) , 
 + 
 + / * * 
 + * Gets the true system path for the folder , free of any aliased placeholders such as % USERPROFILE % , returned by 
 + * SHGetKnownFolderIDList and IKnownFolder : : GetIDList . This flag has no effect on paths returned by 
 + * SHGetKnownFolderPath and IKnownFolder : : GetPath . By default , known folder retrieval functions and methods 
 + * return the aliased path if an alias exists . 
 + * / 
 + NO _ ALIAS ( 0x00001000 ) , 
 + 
 + / * * 
 + * Stores the full path in the registry without using environment strings . If this flag is not set , portions of 
 + * the path may be represented by environment strings such as % USERPROFILE % . This flag can only be used with 
 + * SHSetKnownFolderPath and IKnownFolder : : SetPath . 
 + * / 
 + DONT _ UNEXPAND ( 0x00002000 ) , 
 + 
 + / * * 
 + * Do not verify the folder ' s existence before attempting to retrieve the path or IDList . If this flag is not 
 + * set , an attempt is made to verify that the folder is truly present at the path . If that verification fails 
 + * due to the folder being absent or inaccessible , the function returns a failure code and no path is returned . 
 + * If the folder is located on a network , the function might take a longer time to execute . Setting this flag 
 + * can reduce that lag time . 
 + * / 
 + DONT _ VERIFY ( 0x00004000 ) , 
 + 
 + / * * 
 + * Forces the creation of the specified folder if that folder does not already exist . The security provisions 
 + * predefined for that folder are applied . If the folder does not exist and cannot be created , the function 
 + * returns a failure code and no path is returned . This value can be used only with the following functions and 
 + * methods : 
 + * < li > SHGetKnownFolderPath < / li > 
 + * < li > SHGetKnownFolderIDList < / li > 
 + * < li > IKnownFolder : : GetIDList < / li > 
 + * < li > IKnownFolder : : GetPath < / li > 
 + * < li > IKnownFolder : : GetShellItem < / li > 
 + * / 
 + CREATE ( 0x00008000 ) , 
 + / * * 
 + * Introduced in Windows 7 : When running inside an app container , or when providing an app container token , this 
 + * flag prevents redirection to app container folders . Instead , it retrieves the path that would be returned 
 + * where it not running inside an app container . 
 + * / 
 + NO _ APPCONTAINER _ REDIRECTION ( 0x00010000 ) , 
 + 
 + / * * 
 + * Introduced in Windows 7 . Return only aliased PIDLs . Do not use the file system path . 
 + * / 
 + ALIAS _ ONLY ( 0x80000000 ) ; 
 + 
 + private int flag ; 
 + 
 + KNOWN _ FOLDER _ FLAG ( int flag ) 
 + { 
 + this . flag = flag ; 
 + } 
 + 
 + public int getFlag ( ) 
 + { 
 + return flag ; 
 + } 
 + } 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java 
 index e5e1d70 . . 47a778b 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java 
 @ @ - 15 , 10 + 15 , 14 @ @ package com . sun . jna . platform . win32 ; 
 import junit . framework . TestCase ; 
 
 import com . sun . jna . Native ; 
 + import com . sun . jna . platform . win32 . Guid . GUID ; 
 import com . sun . jna . platform . win32 . ShellAPI . APPBARDATA ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 + import com . sun . jna . platform . win32 . WinDef . LPVOID ; 
 import com . sun . jna . platform . win32 . WinDef . RECT ; 
 import com . sun . jna . platform . win32 . WinDef . UINT _ PTR ; 
 + import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 + import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 import com . sun . jna . ptr . PointerByReference ; 
 
 
 @ @ - 127 , 4 + 131 , 16 @ @ public class Shell32Test extends TestCase { 
 
 } 
 
 + public void testSHGetKnownFolderPath ( ) 
 + { 
 + int flags = ShlObj . KNOWN _ FOLDER _ FLAG . NONE . getFlag ( ) ; 
 + PointerByReference outPath = new PointerByReference ( ) ; 
 + HANDLE token = null ; 
 + GUID guid = KnownFolders . FOLDERID _ Fonts ; 
 + HRESULT hr = Shell32 . INSTANCE . SHGetKnownFolderPath ( guid , flags , token , outPath ) ; 
 + 
 + Ole32 . INSTANCE . CoTaskMemFree ( new LPVOID ( outPath . getPointer ( ) . getLong ( 0 ) ) ) ; 
 + 
 + assertTrue ( W32Errors . SUCCEEDED ( hr . intValue ( ) ) ) ; 
 + } 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32UtilTest . java 
 index 7711ea5 . . c8a0976 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32UtilTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32UtilTest . java 
 @ @ - 35 , 4 + 35 , 42 @ @ public class Shell32UtilTest extends TestCase { 
 	 public final void testGetSpecialFolderPath ( ) { 
 assertFalse ( Shell32Util . getSpecialFolderPath ( ShlObj . CSIDL _ APPDATA , false ) . isEmpty ( ) ) ; 
 } 
 + 
 + public void testGetKnownFolderPath ( ) 
 + { 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Fonts ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Desktop ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Startup ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Programs ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ StartMenu ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Recent ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ SendTo ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Documents ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Favorites ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ NetHood ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ PrintHood ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Templates ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ CommonStartup ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ CommonAdminTools ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ CDBurning ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Music ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ SavedGames ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ SavedSearches ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ AdminTools ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ ProgramFiles ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ ProgramData ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ ProgramFilesCommon ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ ProgramFilesCommonX86 ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Programs ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Windows ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Public ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ PublicDesktop ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Links ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ LocalAppData ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ Libraries ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ RoamingAppData ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ UserProfiles ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ UserProgramFiles ) ) ; 
 + assertNotNull ( Shell32Util . getKnownFolderPath ( KnownFolders . FOLDERID _ UserProgramFilesCommon ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 index 5f378fc . . 6c04a2f 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 @ @ - 1 , 17 + 1 , 18 @ @ 
 / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved 
 - * 
 + * 
 * This library is free software ; you can redistribute it and / or 
 * modify it under the terms of the GNU Lesser General Public 
 * License as published by the Free Software Foundation ; either 
 * version 2 . 1 of the License , or ( at your option ) any later version . 
 - * 
 + * 
 * This library is distributed in the hope that it will be useful , 
 * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 + * Lesser General Public License for more details . 
 * / 
 package com . sun . jna . platform . win32 ; 
 
 + import java . security . SecureRandom ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 @ @ - 21 , 7 + 22 , 7 @ @ import com . sun . jna . Structure ; 
 / / TODO : Auto - generated Javadoc 
 / * * 
 * Ported from Guid . h . Microsoft Windows SDK 6 . 0A . 
 - * 
 + * 
 * @ author dblock [ at ] dblock . org 
 * / 
 public interface Guid { 
 @ @ - 45 , 7 + 46 , 7 @ @ public interface Guid { 
 
 	 	 	 / * * 
 	 	 	 * Instantiates a new by reference . 
 - 	 	 	 * 
 + 	 	 	 * 
 	 	 	 * @ param guid 
 	 	 	 * the guid 
 	 	 	 * / 
 @ @ - 60 , 7 + 61 , 7 @ @ public interface Guid { 
 
 	 	 	 / * * 
 	 	 	 * Instantiates a new by reference . 
 - 	 	 	 * 
 + 	 	 	 * 
 	 	 	 * @ param memory 
 	 	 	 * the memory 
 	 	 	 * / 
 @ @ - 89 , 7 + 90 , 7 @ @ public interface Guid { 
 
 	 	 / * * 
 	 	 * Instantiates a new guid . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param guid 
 	 	 * the guid 
 	 	 * / 
 @ @ - 98 , 13 + 99 , 13 @ @ public interface Guid { 
 	 	 	 this . Data2 = guid . Data2 ; 
 	 	 	 this . Data3 = guid . Data3 ; 
 	 	 	 this . Data4 = guid . Data4 ; 
 - 	 	 	 
 + 
 	 	 	 this . writeFieldsToMemory ( ) ; 
 	 	 } 
 
 	 	 / * * 
 	 	 * Instantiates a new guid . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param guid 
 	 	 * the guid 
 	 	 * / 
 @ @ - 114 , 7 + 115 , 7 @ @ public interface Guid { 
 
 	 	 / * * 
 	 	 * Instantiates a new guid . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param data 
 	 	 * the data 
 	 	 * / 
 @ @ - 124 , 7 + 125 , 7 @ @ public interface Guid { 
 
 	 	 / * * 
 	 	 * Instantiates a new guid . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param memory 
 	 	 * the memory 
 	 	 * / 
 @ @ - 135 , 7 + 136 , 7 @ @ public interface Guid { 
 
 	 	 / * * 
 	 	 * From binary . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param data 
 	 	 * the data 
 	 	 * @ return the guid 
 @ @ - 174 , 15 + 175 , 15 @ @ public interface Guid { 
 	 	 	 newGuid . Data4 [ 5 ] = data [ 13 ] ; 
 	 	 	 newGuid . Data4 [ 6 ] = data [ 14 ] ; 
 	 	 	 newGuid . Data4 [ 7 ] = data [ 15 ] ; 
 - 	 	 	 
 + 
 	 	 	 newGuid . writeFieldsToMemory ( ) ; 
 - 	 	 	 
 + 
 	 	 	 return newGuid ; 
 	 	 } 
 
 	 	 / * * 
 	 	 * From string . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param guid 
 	 	 * the guid 
 	 	 * @ return the guid 
 @ @ - 193 , 30 + 194 , 31 @ @ public interface Guid { 
 	 	 	 char [ ] _ cguid = guid . toCharArray ( ) ; 
 	 	 	 byte [ ] bdata = new byte [ 16 ] ; 
 	 	 	 GUID newGuid = new GUID ( ) ; 
 - 	 	 	 
 + 
 	 	 	 / / we not accept a string longer than 38 chars 
 	 	 	 if ( guid . length ( ) > 38 ) { 
 	 	 	 	 throw new IllegalArgumentException ( " Invalid guid length : " 
 	 	 	 	 	 	 + guid . length ( ) ) ; 
 	 	 	 } 
 - 	 	 	 
 + 
 	 	 	 / / remove ' { ' , ' } ' and ' - ' from guid string 
 	 	 	 for ( int i = 0 ; i < _ cguid . length ; i + + ) { 
 - 	 	 	 	 if ( ( _ cguid [ i ] ! = ' { ' ) & & ( _ cguid [ i ] ! = ' - ' ) & & ( _ cguid [ i ] ! = ' } ' ) ) 
 + 	 	 	 	 if ( ( _ cguid [ i ] ! = ' { ' ) & & ( _ cguid [ i ] ! = ' - ' ) 
 + 	 	 	 	 	 	 & & ( _ cguid [ i ] ! = ' } ' ) ) 
 	 	 	 	 	 _ cnewguid [ y + + ] = _ cguid [ i ] ; 
 	 	 	 } 
 - 	 	 	 
 + 
 	 	 	 / / convert char to byte 
 	 	 	 for ( int i = 0 ; i < 32 ; i + = 2 ) { 
 - 	 	 	 	 bdata [ i / 2 ] = ( byte ) ( ( Character . digit ( _ cnewguid [ i ] , 16 ) < < 4 ) + Character 
 - 	 	 	 	 	 	 . digit ( _ cnewguid [ i + 1 ] , 16 ) & 0xff ) ; 
 + 	 	 	 	 bdata [ i / 2 ] = ( byte ) ( ( Character . digit ( _ cnewguid [ i ] , 16 ) < < 4 ) 
 + 	 	 	 	 	 	 + Character . digit ( _ cnewguid [ i + 1 ] , 16 ) & 0xff ) ; 
 	 	 	 } 
 - 	 	 	 
 + 
 	 	 	 if ( bdata . length ! = 16 ) { 
 	 	 	 	 throw new IllegalArgumentException ( " Invalid data length : " 
 	 	 	 	 	 	 + bdata . length ) ; 
 	 	 	 } 
 - 	 	 	 
 + 
 	 	 	 long data1Temp = bdata [ 0 ] & 0xff ; 
 	 	 	 data1Temp < < = 8 ; 
 	 	 	 data1Temp | = bdata [ 1 ] & 0xff ; 
 @ @ - 243 , 14 + 245 , 35 @ @ public interface Guid { 
 	 	 	 newGuid . Data4 [ 4 ] = bdata [ 12 ] ; 
 	 	 	 newGuid . Data4 [ 5 ] = bdata [ 13 ] ; 
 	 	 	 newGuid . Data4 [ 6 ] = bdata [ 14 ] ; 
 - 	 	 	 newGuid . Data4 [ 7 ] = bdata [ 15 ] ; 
 - 	 	 	 
 + 	 	 	 newGuid . Data4 [ 7 ] = bdata [ 15 ] ; 
 + 
 	 	 	 newGuid . writeFieldsToMemory ( ) ; 
 - 	 	 	 
 + 
 	 	 	 return newGuid ; 
 	 	 } 
 
 	 	 / * * 
 + 	 	 * Generates a new guid . Code taken from the standard jdk 
 + 	 	 * implementation ( see UUID class ) . 
 + 	 	 * 
 + 	 	 * @ param guid 
 + 	 	 * the guid 
 + 	 	 * @ return the guid 
 + 	 	 * / 
 + 	 	 public static GUID newGuid ( ) { 
 + 	 	 	 SecureRandom ng = new SecureRandom ( ) ; 
 + 	 	 	 byte [ ] randomBytes = new byte [ 16 ] ; 
 + 
 + 	 	 	 ng . nextBytes ( randomBytes ) ; 
 + 	 	 	 randomBytes [ 6 ] & = 0x0f ; 
 + 	 	 	 randomBytes [ 6 ] | = 0x40 ; 
 + 	 	 	 randomBytes [ 8 ] & = 0x3f ; 
 + 	 	 	 randomBytes [ 8 ] | = 0x80 ; 
 + 
 + 	 	 	 return new GUID ( randomBytes ) ; 
 + 	 	 } 
 + 
 + 	 	 / * * 
 	 	 * To byte array . 
 	 	 * 
 	 	 * @ return the byte [ ] 
 @ @ - 287 , 7 + 310 , 7 @ @ public interface Guid { 
 	 	 / * * 
 	 	 * The value of this Guid , formatted as follows : 
 	 	 * xxxxxxxx - xxxx - xxxx - xxxx - xxxxxxxxxxxx . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ return the string 
 	 	 * / 
 	 	 public String toGuidString ( ) { 
 @ @ - 298 , 18 + 321 , 18 @ @ public interface Guid { 
 	 	 	 hexStr . append ( " { " ) ; 
 
 	 	 	 for ( int i = 0 ; i < bGuid . length ; i + + ) { 
 - 	 	 	 	 char ch1 = HEXES . charAt ( ( bGuid [ i ] & 0xF0 ) > > 4 ) ; 
 + 	 	 	 	 char ch1 = HEXES . charAt ( ( bGuid [ i ] & 0xF0 ) > > 4 ) ; 
 	 	 	 	 char ch2 = HEXES . charAt ( bGuid [ i ] & 0x0F ) ; 
 	 	 	 	 hexStr . append ( ch1 ) . append ( ch2 ) ; 
 - 	 	 	 	 
 - 	 	 	 	 if ( ( i = = 3 ) | | ( i = = 5 ) | | ( i = = 7 ) | | ( i = = 9 ) ) 
 + 
 + 	 	 	 	 if ( ( i = = 3 ) | | ( i = = 5 ) | | ( i = = 7 ) | | ( i = = 9 ) ) 
 	 	 	 	 	 hexStr . append ( " - " ) ; 
 	 	 	 } 
 - 	 	 	 
 + 
 	 	 	 hexStr . append ( " } " ) ; 
 	 	 	 return hexStr . toString ( ) ; 
 	 	 } 
 - 	 	 
 + 
 	 	 / * * 
 	 	 * Write fields to backing memory . 
 	 	 * / 
 @ @ - 319 , 10 + 342 , 10 @ @ public interface Guid { 
 	 	 	 this . writeField ( " Data3 " ) ; 
 	 	 	 this . writeField ( " Data4 " ) ; 
 	 	 } 
 - 	 	 
 + 
 	 	 / * 
 	 	 * ( non - Javadoc ) 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ see com . sun . jna . Structure # getFieldOrder ( ) 
 	 	 * / 
 	 	 protected List getFieldOrder ( ) { 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / GuidTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / GuidTest . java 
 index dc02bd1 . . 0699a5d 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / GuidTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / GuidTest . java 
 @ @ - 3 , 28 + 3 , 127 @ @ package com . sun . jna . platform . win32 ; 
 import junit . framework . TestCase ; 
 
 import com . sun . jna . platform . win32 . Guid . GUID ; 
 - import com . sun . jna . platform . win32 . WinDef . HWND ; 
 
 + / / TODO : Auto - generated Javadoc 
 + / * * 
 + * The Class GuidTest . 
 + * / 
 public class GuidTest extends TestCase { 
 
 + 	 / * * 
 + 	 * The main method . 
 + 	 * 
 + 	 * @ param args 
 + 	 * the arguments 
 + 	 * / 
 	 public static void main ( String [ ] args ) { 
 	 	 junit . textui . TestRunner . run ( GuidTest . class ) ; 
 	 } 
 
 + 	 / * * 
 + 	 * Instantiates a new guid test . 
 + 	 * / 
 	 public GuidTest ( ) { 
 	 } 
 
 - 	 public void testGuid ( ) { 
 - 	 	 System . out . println ( " ref . guid : " + " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; 
 - 	 	 GUID guid = Ole32Util . getGUIDFromString ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; 
 - 	 	 System . out . println ( " getGUIDFromString ( ) : " + guid . toGuidString ( ) ) ; 
 - 	 	 
 - 	 	 guid = new GUID ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; 
 - 	 	 byte [ ] byteArray = guid . toByteArray ( ) ; 
 - 	 	 guid = new GUID ( byteArray ) ; 
 - 	 	 System . out . println ( " toGuidString ( ) : " + guid . toGuidString ( ) ) ; 
 - 	 	 
 - 	 	 guid = new GUID ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; 
 - 	 	 System . out . println ( " getStringFromGUID : " + Ole32Util . getStringFromGUID ( guid ) ) ; 
 + 	 / * * 
 + 	 * Loads a GUID from string and verify that the guid returned has the 
 + 	 * expected values in each byte . 
 + 	 * / 
 + 	 public void testGUIDFromString ( ) { 
 + 	 	 String sourceGuidStr = " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ; 
 + 	 	 / / test loading via static method 
 + 	 	 GUID targetGuid = GUID . fromString ( sourceGuidStr ) ; 
 + 
 + 	 	 assertEquals ( targetGuid . toGuidString ( ) , sourceGuidStr ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Loads a GUID from string via the constructor and verify that the guid 
 + 	 * returned has the expected values in each byte . 
 + 	 * / 
 + 	 public void testGUIDFromString2 ( ) { 
 + 	 	 String sourceGuidStr = " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ; 
 + 	 	 / / test loading via constructor 
 + 	 	 GUID targetGuid = new GUID ( sourceGuidStr ) ; 
 + 
 + 	 	 assertEquals ( targetGuid . toGuidString ( ) , sourceGuidStr ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Loads a GUID from a byte array and verify that the guid returned has the 
 + 	 * expected values in each byte . 
 + 	 * / 
 + 	 public void testGUIDFromBinary ( ) { 
 + 	 	 byte [ ] sourceGuidBArr = new byte [ ] { ( byte ) 0xA5 , ( byte ) 0xDC , 
 + 	 	 	 	 ( byte ) 0xBF , ( byte ) 0x10 , ( byte ) 0x65 , ( byte ) 0x30 , 
 + 	 	 	 	 ( byte ) 0x11 , ( byte ) 0xD2 , ( byte ) 0x90 , ( byte ) 0x1F , 
 + 	 	 	 	 ( byte ) 0x00 , ( byte ) 0xC0 , ( byte ) 0x4F , ( byte ) 0xB9 , 
 + 	 	 	 	 ( byte ) 0x51 , ( byte ) 0xED } ; 
 + 
 + 	 	 / / test loading via static method 
 + 	 	 GUID targetGuid = GUID . fromBinary ( sourceGuidBArr ) ; 
 + 	 	 byte [ ] targetGuidBArr = targetGuid . toByteArray ( ) ; 
 + 
 + 	 	 for ( int i = 0 ; i < sourceGuidBArr . length ; i + + ) { 
 + 	 	 	 assertEquals ( targetGuidBArr [ i ] , sourceGuidBArr [ i ] ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Loads a GUID from a byte array via the constructor and verify that the 
 + 	 * guid returned has the expected values in each byte . 
 + 	 * / 
 + 	 public void testGUIDFromBinary2 ( ) { 
 + 	 	 byte [ ] sourceGuidBArr = new byte [ ] { ( byte ) 0xA5 , ( byte ) 0xDC , 
 + 	 	 	 	 ( byte ) 0xBF , ( byte ) 0x10 , ( byte ) 0x65 , ( byte ) 0x30 , 
 + 	 	 	 	 ( byte ) 0x11 , ( byte ) 0xD2 , ( byte ) 0x90 , ( byte ) 0x1F , 
 + 	 	 	 	 ( byte ) 0x00 , ( byte ) 0xC0 , ( byte ) 0x4F , ( byte ) 0xB9 , 
 + 	 	 	 	 ( byte ) 0x51 , ( byte ) 0xED } ; 
 + 
 + 	 	 / / test loading via constructor 
 + 	 	 GUID targetGuid = new GUID ( sourceGuidBArr ) ; 
 + 	 	 byte [ ] targetGuidBArr = targetGuid . toByteArray ( ) ; 
 + 
 + 	 	 for ( int i = 0 ; i < sourceGuidBArr . length ; i + + ) { 
 + 	 	 	 assertEquals ( targetGuidBArr [ i ] , sourceGuidBArr [ i ] ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Instantiates two guids , one with windows build - in function and one via 
 + 	 * jna and compares it . 
 + 	 * / 
 + 	 public void testBehaviourWithOle32 ( ) { 
 + 	 	 GUID ole32Guid = Ole32Util . getGUIDFromString ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; 
 + 	 	 GUID jnaGuid = new GUID ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; 
 + 
 + 	 	 assertEquals ( ole32Guid , jnaGuid ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Test with the windows build - in function , compares the result of the 
 + 	 * methods . 
 + 	 * / 
 + 	 public void testBehaviourWithOle32 _ 2 ( ) { 
 + 	 	 GUID ole32Guid = Ole32Util 
 + 	 	 	 	 . getGUIDFromString ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; 
 + 	 	 GUID jnaGuid = new GUID ( " { A5DCBF10 - 6530 - 11D2 - 901F - 00C04FB951ED } " ) ; 
 + 
 + 	 	 String ole32Guidstr = Ole32Util . getStringFromGUID ( ole32Guid ) ; 
 + 	 	 String jnaGuidStr = jnaGuid . toGuidString ( ) ; 
 + 
 + 	 	 assertEquals ( ole32Guidstr , jnaGuidStr ) ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Tests the new guid with the build - in function coming with windows . 
 + 	 * / 
 + 	 public void testNewGuid ( ) { 
 + 	 	 GUID newGuid = GUID . newGuid ( ) ; 
 + 	 	 String guidString = newGuid . toGuidString ( ) ; 
 + 	 	 GUID guidFromString = Ole32Util . getGUIDFromString ( guidString ) ; 
 + 
 + 	 	 assertEquals ( guidFromString . toGuidString ( ) , guidString ) ; 
 	 } 
 }
