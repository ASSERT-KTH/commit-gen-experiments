BLEU SCORE: 0.01232213501844496

TEST MSG: remove superfluous ( and problematic ) utf8 BOM
GENERATED MSG: Add REG _ BINARY , REG _ EXPAND _ SZ and REG _ MULTI _ SZ support to Advapi32Util .

TEST DIFF (one line): diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32UtilTest . java <nl> index 8432025 . . b97c0b5 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32UtilTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32UtilTest . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - ï»¿ / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved <nl> + / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved <nl> * <nl> * This library is free software ; you can redistribute it and / or <nl> * modify it under the terms of the GNU Lesser General Public <nl> @ @ - 40 , 71 + 40 , 71 @ @ public class Advapi32UtilTest extends TestCase { <nl> System . out . println ( " GetUserName : " + currentUserName ) ; <nl> 	 	 <nl> for ( Account group : Advapi32Util . getCurrentUserGroups ( ) ) { <nl> - 	 	 	 System . out . println ( " " + group . fqn + " [ " + group . sidString + " ] " ) ; <nl> - 	 	 } <nl> + System . out . println ( " " + group . fqn + " [ " + group . sidString + " ] " ) ; <nl> + } <nl> 	 	 <nl> - 	 	 Account accountByName = Advapi32Util . getAccountByName ( currentUserName ) ; <nl> - 	 	 System . out . println ( " AccountByName : " + currentUserName ) ; <nl> + Account accountByName = Advapi32Util . getAccountByName ( currentUserName ) ; <nl> + System . out . println ( " AccountByName : " + currentUserName ) ; <nl> System . out . println ( " Fqn : " + accountByName . fqn ) ; <nl> System . out . println ( " Domain : " + accountByName . domain ) ; <nl> System . out . println ( " Sid : " + accountByName . sidString ) ; <nl> <nl> Account accountBySid = Advapi32Util . getAccountBySid ( new PSID ( accountByName . sid ) ) ; <nl> - 	 	 System . out . println ( " AccountBySid : " + accountByName . sidString ) ; <nl> + System . out . println ( " AccountBySid : " + accountByName . sidString ) ; <nl> System . out . println ( " Fqn : " + accountBySid . fqn ) ; <nl> System . out . println ( " Name : " + accountBySid . name ) ; <nl> System . out . println ( " Domain : " + accountBySid . domain ) ; <nl> } <nl> <nl> - 	 public void testGetUsername ( ) { <nl> - 	 	 String username = Advapi32Util . getUserName ( ) ; <nl> - 	 	 assertTrue ( username . length ( ) > 0 ) ; <nl> - 	 } <nl> + public void testGetUsername ( ) { <nl> + String username = Advapi32Util . getUserName ( ) ; <nl> + assertTrue ( username . length ( ) > 0 ) ; <nl> + } <nl> 	 <nl> - 	 public void testGetAccountBySid ( ) { 	 	 <nl> - 	 	 String accountName = Advapi32Util . getUserName ( ) ; <nl> - 	 	 Account currentUser = Advapi32Util . getAccountByName ( accountName ) ; <nl> - 	 	 Account account = Advapi32Util . getAccountBySid ( new PSID ( currentUser . sid ) ) ; <nl> - 	 	 assertEquals ( SID _ NAME _ USE . SidTypeUser , account . accountType ) ; <nl> - 	 	 assertEquals ( currentUser . fqn . toLowerCase ( ) , account . fqn . toLowerCase ( ) ) ; <nl> - 	 	 assertEquals ( currentUser . name . toLowerCase ( ) , account . name . toLowerCase ( ) ) ; <nl> - 	 	 assertEquals ( currentUser . domain . toLowerCase ( ) , account . domain . toLowerCase ( ) ) ; <nl> - 	 	 assertEquals ( currentUser . sidString , account . sidString ) ; 	 	 <nl> - 	 } <nl> + public void testGetAccountBySid ( ) { 	 	 <nl> + String accountName = Advapi32Util . getUserName ( ) ; <nl> + Account currentUser = Advapi32Util . getAccountByName ( accountName ) ; <nl> + Account account = Advapi32Util . getAccountBySid ( new PSID ( currentUser . sid ) ) ; <nl> + assertEquals ( SID _ NAME _ USE . SidTypeUser , account . accountType ) ; <nl> + assertEquals ( currentUser . fqn . toLowerCase ( ) , account . fqn . toLowerCase ( ) ) ; <nl> + assertEquals ( currentUser . name . toLowerCase ( ) , account . name . toLowerCase ( ) ) ; <nl> + assertEquals ( currentUser . domain . toLowerCase ( ) , account . domain . toLowerCase ( ) ) ; <nl> + assertEquals ( currentUser . sidString , account . sidString ) ; 	 	 <nl> + } <nl> <nl> - 	 public void testGetAccountByName ( ) { 	 	 <nl> - 	 	 String accountName = Advapi32Util . getUserName ( ) ; <nl> - 	 	 Account account = Advapi32Util . getAccountByName ( accountName ) ; <nl> - 	 	 assertEquals ( SID _ NAME _ USE . SidTypeUser , account . accountType ) ; <nl> - 	 } <nl> + public void testGetAccountByName ( ) { 	 	 <nl> + String accountName = Advapi32Util . getUserName ( ) ; <nl> + Account account = Advapi32Util . getAccountByName ( accountName ) ; <nl> + assertEquals ( SID _ NAME _ USE . SidTypeUser , account . accountType ) ; <nl> + } <nl> 	 <nl> - 	 public void testGetAccountNameFromSid ( ) { <nl> + public void testGetAccountNameFromSid ( ) { <nl> assertEquals ( " Everyone " , Advapi32Util . getAccountBySid ( " S - 1 - 1 - 0 " ) . name ) ; 	 	 <nl> - 	 } <nl> + } <nl> <nl> - 	 public void testGetAccountSidFromName ( ) { <nl> + public void testGetAccountSidFromName ( ) { <nl> assertEquals ( " S - 1 - 1 - 0 " , Advapi32Util . getAccountByName ( " Everyone " ) . sidString ) ; <nl> - 	 } <nl> + } <nl> 	 <nl> - 	 public void testConvertSid ( ) { <nl> + public void testConvertSid ( ) { <nl> 	 String sidString = " S - 1 - 1 - 0 " ; / / Everyone <nl> 	 byte [ ] sidBytes = Advapi32Util . convertStringSidToSid ( sidString ) ; <nl> 	 assertTrue ( sidBytes . length > 0 ) ; <nl> 	 String convertedSidString = Advapi32Util . convertSidToStringSid ( new PSID ( sidBytes ) ) ; <nl> 	 assertEquals ( convertedSidString , sidString ) ; <nl> - 	 } <nl> + } <nl> 	 <nl> - 	 public void testGetCurrentUserGroups ( ) { <nl> - 	 	 Account [ ] groups = Advapi32Util . getCurrentUserGroups ( ) ; <nl> - 	 	 assertTrue ( groups . length > 0 ) ; <nl> - 	 	 for ( Account group : groups ) { <nl> - 	 	 	 assertTrue ( group . name . length ( ) > 0 ) ; <nl> - 	 	 	 assertTrue ( group . sidString . length ( ) > 0 ) ; <nl> - 	 	 	 assertTrue ( group . sid . length > 0 ) ; <nl> - 	 	 } <nl> - 	 } <nl> + public void testGetCurrentUserGroups ( ) { <nl> + Account [ ] groups = Advapi32Util . getCurrentUserGroups ( ) ; <nl> + assertTrue ( groups . length > 0 ) ; <nl> + for ( Account group : groups ) { <nl> + assertTrue ( group . name . length ( ) > 0 ) ; <nl> + assertTrue ( group . sidString . length ( ) > 0 ) ; <nl> + assertTrue ( group . sid . length > 0 ) ; <nl> + } <nl> + } <nl> 	 <nl> - 	 public void testGetUserGroups ( ) { <nl> + public void testGetUserGroups ( ) { <nl> 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; <nl> 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; <nl> 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; <nl> @ @ - 113 , 32 + 113 , 32 @ @ public class Advapi32UtilTest extends TestCase { <nl> if ( LMErr . NERR _ Success ! = Netapi32 . INSTANCE . NetUserAdd ( null , 1 , userInfo , null ) ) { <nl> return ; <nl> } <nl> - 	 	 try { <nl> - 	 	 	 HANDLEByReference phUser = new HANDLEByReference ( ) ; <nl> - 	 	 	 try { <nl> - 	 	 	 	 assertTrue ( Advapi32 . INSTANCE . LogonUser ( userInfo . usri1 _ name . toString ( ) , <nl> - 	 	 	 	 	 	 null , userInfo . usri1 _ password . toString ( ) , WinBase . LOGON32 _ LOGON _ NETWORK , <nl> - 	 	 	 	 	 	 WinBase . LOGON32 _ PROVIDER _ DEFAULT , phUser ) ) ; <nl> - 	 	 	 	 Account [ ] groups = Advapi32Util . getTokenGroups ( phUser . getValue ( ) ) ; <nl> - 	 	 	 	 assertTrue ( groups . length > 0 ) ; <nl> - 	 	 	 	 for ( Account group : groups ) { <nl> - 	 	 	 	 	 assertTrue ( group . name . length ( ) > 0 ) ; <nl> - 	 	 	 	 	 assertTrue ( group . sidString . length ( ) > 0 ) ; <nl> - 	 	 	 	 	 assertTrue ( group . sid . length > 0 ) ; <nl> - 	 	 	 	 } <nl> - 	 	 	 } finally { <nl> - 	 	 	 	 if ( phUser . getValue ( ) ! = WinBase . INVALID _ HANDLE _ VALUE ) { <nl> - 	 	 	 	 	 Kernel32 . INSTANCE . CloseHandle ( phUser . getValue ( ) ) ; <nl> - 	 	 	 	 } 	 	 	 	 <nl> - 	 	 	 } <nl> - 	 	 } finally { <nl> - assertEquals ( " Error in NetUserDel " , <nl> - LMErr . NERR _ Success , <nl> - Netapi32 . INSTANCE . NetUserDel ( null , userInfo . usri1 _ name . toString ( ) ) ) ; 	 	 	 <nl> - 	 	 } <nl> - 	 } <nl> + try { <nl> + HANDLEByReference phUser = new HANDLEByReference ( ) ; <nl> + try { <nl> + assertTrue ( Advapi32 . INSTANCE . LogonUser ( userInfo . usri1 _ name . toString ( ) , <nl> + null , userInfo . usri1 _ password . toString ( ) , WinBase . LOGON32 _ LOGON _ NETWORK , <nl> + WinBase . LOGON32 _ PROVIDER _ DEFAULT , phUser ) ) ; <nl> + Account [ ] groups = Advapi32Util . getTokenGroups ( phUser . getValue ( ) ) ; <nl> + assertTrue ( groups . length > 0 ) ; <nl> + for ( Account group : groups ) { <nl> + assertTrue ( group . name . length ( ) > 0 ) ; <nl> + assertTrue ( group . sidString . length ( ) > 0 ) ; <nl> + assertTrue ( group . sid . length > 0 ) ; <nl> + } <nl> + } finally { <nl> + if ( phUser . getValue ( ) ! = WinBase . INVALID _ HANDLE _ VALUE ) { <nl> + Kernel32 . INSTANCE . CloseHandle ( phUser . getValue ( ) ) ; <nl> + } 	 	 	 	 <nl> + } <nl> + } finally { <nl> + assertEquals ( " Error in NetUserDel " , <nl> + LMErr . NERR _ Success , <nl> + Netapi32 . INSTANCE . NetUserDel ( null , userInfo . usri1 _ name . toString ( ) ) ) ; 	 	 	 <nl> + } <nl> + } <nl> 	 <nl> - 	 public void testGetUserAccount ( ) { <nl> + public void testGetUserAccount ( ) { <nl> 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; <nl> 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; <nl> 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; <nl> @ @ - 147 , 197 + 147 , 197 @ @ public class Advapi32UtilTest extends TestCase { <nl> if ( LMErr . NERR _ Success ! = Netapi32 . INSTANCE . NetUserAdd ( null , 1 , userInfo , null ) ) { <nl> return ; <nl> } <nl> - 	 	 try { <nl> - 	 	 	 HANDLEByReference phUser = new HANDLEByReference ( ) ; <nl> - 	 	 	 try { <nl> - 	 	 	 	 assertTrue ( Advapi32 . INSTANCE . LogonUser ( userInfo . usri1 _ name . toString ( ) , <nl> - 	 	 	 	 	 	 null , userInfo . usri1 _ password . toString ( ) , WinBase . LOGON32 _ LOGON _ NETWORK , <nl> - 	 	 	 	 	 	 WinBase . LOGON32 _ PROVIDER _ DEFAULT , phUser ) ) ; <nl> - 	 	 	 	 Advapi32Util . Account account = Advapi32Util . getTokenAccount ( phUser . getValue ( ) ) ; <nl> - 	 	 	 	 assertTrue ( account . name . length ( ) > 0 ) ; <nl> - 	 	 	 	 assertEquals ( userInfo . usri1 _ name . toString ( ) , account . name ) ; <nl> - 	 	 	 } finally { <nl> - 	 	 	 	 if ( phUser . getValue ( ) ! = WinBase . INVALID _ HANDLE _ VALUE ) { <nl> - 	 	 	 	 	 Kernel32 . INSTANCE . CloseHandle ( phUser . getValue ( ) ) ; <nl> - 	 	 	 	 } <nl> - 	 	 	 } <nl> - 	 	 } finally { <nl> - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( <nl> - 	 	 	 	 null , userInfo . usri1 _ name . toString ( ) ) ) ; 	 	 	 <nl> - 	 	 } <nl> - 	 } 	 <nl> + try { <nl> + HANDLEByReference phUser = new HANDLEByReference ( ) ; <nl> + try { <nl> + assertTrue ( Advapi32 . INSTANCE . LogonUser ( userInfo . usri1 _ name . toString ( ) , <nl> + null , userInfo . usri1 _ password . toString ( ) , WinBase . LOGON32 _ LOGON _ NETWORK , <nl> + WinBase . LOGON32 _ PROVIDER _ DEFAULT , phUser ) ) ; <nl> + Advapi32Util . Account account = Advapi32Util . getTokenAccount ( phUser . getValue ( ) ) ; <nl> + assertTrue ( account . name . length ( ) > 0 ) ; <nl> + assertEquals ( userInfo . usri1 _ name . toString ( ) , account . name ) ; <nl> + } finally { <nl> + if ( phUser . getValue ( ) ! = WinBase . INVALID _ HANDLE _ VALUE ) { <nl> + Kernel32 . INSTANCE . CloseHandle ( phUser . getValue ( ) ) ; <nl> + } <nl> + } <nl> + } finally { <nl> + assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( <nl> + null , userInfo . usri1 _ name . toString ( ) ) ) ; 	 	 	 <nl> + } <nl> + } 	 <nl> 	 <nl> - 	 public void testRegistryKeyExists ( ) { <nl> - 	 	 assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> - 	 	 	 	 " " ) ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> - 	 	 	 	 " Software \ \ Microsoft " ) ) ; <nl> - 	 	 assertFalse ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> - 	 	 	 	 " KeyDoesNotExist \ \ SubKeyDoesNotExist " ) ) ; <nl> - 	 } <nl> + public void testRegistryKeyExists ( ) { <nl> + assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> + " " ) ) ; <nl> + assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> + " Software \ \ Microsoft " ) ) ; <nl> + assertFalse ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> + " KeyDoesNotExist \ \ SubKeyDoesNotExist " ) ) ; <nl> + } <nl> 	 <nl> - 	 public void testRegistryValueExists ( ) { <nl> - 	 	 assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> - 	 	 	 	 " Software \ \ Microsoft " , " " ) ) ; <nl> - 	 	 assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> - 	 	 	 	 " Software \ \ Microsoft " , " KeyDoesNotExist " ) ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> - 	 	 	 	 " SYSTEM \ \ CurrentControlSet \ \ Control " , " SystemBootDevice " ) ) ; <nl> - 	 } 	 <nl> + public void testRegistryValueExists ( ) { <nl> + assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> + " Software \ \ Microsoft " , " " ) ) ; <nl> + assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> + " Software \ \ Microsoft " , " KeyDoesNotExist " ) ) ; <nl> + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , <nl> + " SYSTEM \ \ CurrentControlSet \ \ Control " , " SystemBootDevice " ) ) ; <nl> + } 	 <nl> 	 <nl> - 	 public void testRegistryCreateDeleteKey ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 assertFalse ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; <nl> - 	 } <nl> + public void testRegistryCreateDeleteKey ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + assertFalse ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; <nl> + } <nl> 	 <nl> - 	 public void testRegistryCreateKeyDisposition ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ) ; <nl> - 	 	 assertFalse ( Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 } <nl> + public void testRegistryCreateKeyDisposition ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + assertTrue ( Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ) ; <nl> + assertFalse ( Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ) ; <nl> + assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + } <nl> <nl> - 	 public void testRegistryDeleteValue ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " , 42 ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ; 	 	 <nl> - 	 	 assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 } <nl> + public void testRegistryDeleteValue ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " , 42 ) ; <nl> + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; <nl> + Advapi32Util . registryDeleteValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ; 	 	 <nl> + assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + } <nl> 	 <nl> - 	 public void testRegistrySetGetIntValue ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " , 42 ) ; <nl> - 	 	 assertEquals ( 42 , Advapi32Util . registryGetIntValue ( WinReg . HKEY _ CURRENT _ USER , <nl> - 	 	 	 	 " Software \ \ JNA " , " IntValue " ) ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 } <nl> + public void testRegistrySetGetIntValue ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " , 42 ) ; <nl> + assertEquals ( 42 , Advapi32Util . registryGetIntValue ( WinReg . HKEY _ CURRENT _ USER , <nl> + " Software \ \ JNA " , " IntValue " ) ) ; <nl> + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + } <nl> 	 <nl> - 	 public void testRegistrySetGetLongValue ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registrySetLongValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " LongValue " , 1234L ) ; <nl> - 	 	 assertEquals ( 1234L , Advapi32Util . registryGetLongValue ( WinReg . HKEY _ CURRENT _ USER , <nl> - 	 	 	 	 " Software \ \ JNA " , " LongValue " ) ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " LongValue " ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 } <nl> + public void testRegistrySetGetLongValue ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registrySetLongValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " LongValue " , 1234L ) ; <nl> + assertEquals ( 1234L , Advapi32Util . registryGetLongValue ( WinReg . HKEY _ CURRENT _ USER , <nl> + " Software \ \ JNA " , " LongValue " ) ) ; <nl> + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " LongValue " ) ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + } <nl> 	 <nl> - 	 public void testRegistrySetGetStringValue ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registrySetStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " , " Hello World " ) ; <nl> - 	 	 assertEquals ( " Hello World " , Advapi32Util . registryGetStringValue ( WinReg . HKEY _ CURRENT _ USER , <nl> - 	 	 	 	 " Software \ \ JNA " , " StringValue " ) ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 <nl> - 	 } <nl> + public void testRegistrySetGetStringValue ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registrySetStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " , " Hello World " ) ; <nl> + assertEquals ( " Hello World " , Advapi32Util . registryGetStringValue ( WinReg . HKEY _ CURRENT _ USER , <nl> + " Software \ \ JNA " , " StringValue " ) ) ; <nl> + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " ) ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 <nl> + } <nl> <nl> - 	 public void testRegistrySetGetExpandableStringValue ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registrySetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " , " Temp is % TEMP % " ) ; <nl> - 	 	 assertEquals ( " Temp is % TEMP % " , Advapi32Util . registryGetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , <nl> - 	 	 	 	 " Software \ \ JNA " , " StringValue " ) ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 <nl> - 	 } <nl> + public void testRegistrySetGetExpandableStringValue ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registrySetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " , " Temp is % TEMP % " ) ; <nl> + assertEquals ( " Temp is % TEMP % " , Advapi32Util . registryGetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , <nl> + " Software \ \ JNA " , " StringValue " ) ) ; <nl> + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " ) ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 <nl> + } <nl> 	 <nl> - 	 public void testRegistrySetGetStringArray ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 String [ ] dataWritten = { " Hello " , " World " } ; <nl> - 	 	 Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " , dataWritten ) ; <nl> - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " ) ) ; <nl> - 	 	 String [ ] dataRead = Advapi32Util . registryGetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " ) ; <nl> - 	 	 assertEquals ( dataWritten . length , dataRead . length ) ; <nl> - 	 	 for ( int i = 0 ; i < dataRead . length ; i + + ) { <nl> - 	 	 	 assertEquals ( dataWritten [ i ] , dataRead [ i ] ) ; <nl> - 	 	 } <nl> - 	 	 dataWritten = new String [ 0 ] ; <nl> - 	 	 Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyMultiString " , dataWritten ) ; <nl> - 	 	 dataRead = Advapi32Util . registryGetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyMultiString " ) ; <nl> - 	 	 assertEquals ( 0 , dataRead . length ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 } <nl> + public void testRegistrySetGetStringArray ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + String [ ] dataWritten = { " Hello " , " World " } ; <nl> + Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " , dataWritten ) ; <nl> + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " ) ) ; <nl> + String [ ] dataRead = Advapi32Util . registryGetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " ) ; <nl> + assertEquals ( dataWritten . length , dataRead . length ) ; <nl> + for ( int i = 0 ; i < dataRead . length ; i + + ) { <nl> + assertEquals ( dataWritten [ i ] , dataRead [ i ] ) ; <nl> + } <nl> + dataWritten = new String [ 0 ] ; <nl> + Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyMultiString " , dataWritten ) ; <nl> + dataRead = Advapi32Util . registryGetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyMultiString " ) ; <nl> + assertEquals ( 0 , dataRead . length ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + } <nl> <nl> - 	 public void testRegistrySetGetBinaryValue ( ) { <nl> - 	 	 byte [ ] data = { 0x00 , 0x01 , 0x02 } ; <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " , data ) ; <nl> - 	 	 byte [ ] read = Advapi32Util . registryGetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " ) ; <nl> - 	 	 assertEquals ( data . length , read . length ) ; 	 	 <nl> - 	 	 for ( int i = 0 ; i < data . length ; i + + ) { <nl> - 	 	 	 assertEquals ( data [ i ] , read [ i ] ) ; <nl> - 	 	 } <nl> - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 } <nl> + public void testRegistrySetGetBinaryValue ( ) { <nl> + byte [ ] data = { 0x00 , 0x01 , 0x02 } ; <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " , data ) ; <nl> + byte [ ] read = Advapi32Util . registryGetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " ) ; <nl> + assertEquals ( data . length , read . length ) ; 	 	 <nl> + for ( int i = 0 ; i < data . length ; i + + ) { <nl> + assertEquals ( data [ i ] , read [ i ] ) ; <nl> + } <nl> + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " ) ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + } <nl> 	 <nl> - 	 public void testRegistryGetKeys ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; <nl> - 	 	 String [ ] subKeys = Advapi32Util . registryGetKeys ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ; <nl> - 	 	 assertEquals ( 2 , subKeys . length ) ; <nl> - 	 	 assertEquals ( subKeys [ 0 ] , " Key1 " ) ; <nl> - 	 	 assertEquals ( subKeys [ 1 ] , " Key2 " ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 	 	 <nl> - 	 } <nl> + public void testRegistryGetKeys ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; <nl> + String [ ] subKeys = Advapi32Util . registryGetKeys ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ; <nl> + assertEquals ( 2 , subKeys . length ) ; <nl> + assertEquals ( subKeys [ 0 ] , " Key1 " ) ; <nl> + assertEquals ( subKeys [ 1 ] , " Key2 " ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 	 	 <nl> + } <nl> 	 <nl> - 	 public void testRegistryGetCloseKey ( ) { <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; <nl> - 	 	 HKEYByReference phkKey = Advapi32Util . registryGetKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , WinNT . KEY _ READ ) ; <nl> - 	 	 String [ ] subKeys = Advapi32Util . registryGetKeys ( phkKey . getValue ( ) ) ; <nl> - 	 	 assertEquals ( 2 , subKeys . length ) ; <nl> - 	 	 assertEquals ( subKeys [ 0 ] , " Key1 " ) ; <nl> - 	 	 assertEquals ( subKeys [ 1 ] , " Key2 " ) ; <nl> - 	 	 Advapi32Util . registryCloseKey ( phkKey . getValue ( ) ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 } <nl> + public void testRegistryGetCloseKey ( ) { <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; <nl> + HKEYByReference phkKey = Advapi32Util . registryGetKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , WinNT . KEY _ READ ) ; <nl> + String [ ] subKeys = Advapi32Util . registryGetKeys ( phkKey . getValue ( ) ) ; <nl> + assertEquals ( 2 , subKeys . length ) ; <nl> + assertEquals ( subKeys [ 0 ] , " Key1 " ) ; <nl> + assertEquals ( subKeys [ 1 ] , " Key2 " ) ; <nl> + Advapi32Util . registryCloseKey ( phkKey . getValue ( ) ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + } <nl> 	 <nl> - 	 public void testRegistryGetValues ( ) { <nl> - 	 	 String uu = new String ( " A " + " \ \ u00ea " + " \ \ u00f1 " + " \ \ u00fc " + " C " ) ; <nl> - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> - 	 	 Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " FourtyTwo " + uu , 42 ) ; <nl> - 	 	 Advapi32Util . registrySetStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " 42 " + uu , " FourtyTwo " + uu ) ; <nl> - 	 	 Advapi32Util . registrySetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " ExpandableString " , " % TEMP % " ) ; <nl> - 	 	 byte [ ] dataWritten = { 0xD , 0xE , 0xA , 0xD , 0xB , 0xE , 0xE , 0xF } ; 	 	 <nl> - 	 	 Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " DeadBeef " , dataWritten ) ; <nl> - 	 	 String [ ] stringsWritten = { " Hello " , " World " , " Hello World " , uu } ; <nl> - 	 	 Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringArray " , stringsWritten ) ; <nl> - 	 	 String [ ] emptyArray = new String [ 0 ] ; <nl> - 	 	 Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyStringArray " , emptyArray ) ; <nl> - 	 	 Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyBinary " , new byte [ 0 ] ) ; <nl> - 	 	 TreeMap < String , Object > values = Advapi32Util . registryGetValues ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ; <nl> - 	 	 assertEquals ( 7 , values . keySet ( ) . size ( ) ) ; <nl> - 	 	 assertEquals ( " FourtyTwo " + uu , values . get ( " 42 " + uu ) ) ; <nl> - 	 	 assertEquals ( 42 , values . get ( " FourtyTwo " + uu ) ) ; <nl> - 	 	 assertEquals ( " % TEMP % " , values . get ( " ExpandableString " ) ) ; <nl> - 	 	 byte [ ] dataRead = ( byte [ ] ) values . get ( " DeadBeef " ) ; <nl> - 	 	 assertEquals ( dataWritten . length , dataRead . length ) ; <nl> - 	 	 for ( int i = 0 ; i < dataWritten . length ; i + + ) { <nl> - 	 	 	 assertEquals ( dataWritten [ i ] , dataRead [ i ] ) ; <nl> - 	 	 } <nl> - 	 	 String [ ] stringsRead = ( String [ ] ) values . get ( " StringArray " ) ; <nl> - 	 	 assertEquals ( stringsWritten . length , stringsRead . length ) ; <nl> - 	 	 for ( int i = 0 ; i < stringsWritten . length ; i + + ) { <nl> - 	 	 	 assertEquals ( stringsWritten [ i ] , stringsRead [ i ] ) ; <nl> - 	 	 } <nl> - 	 	 stringsRead = ( String [ ] ) values . get ( " EmptyStringArray " ) ; <nl> - 	 	 assertEquals ( 0 , stringsRead . length ) ; <nl> - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 	 	 	 	 <nl> - 	 } <nl> + public void testRegistryGetValues ( ) { <nl> + String uu = new String ( " A " + " \ \ u00ea " + " \ \ u00f1 " + " \ \ u00fc " + " C " ) ; <nl> + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; <nl> + Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " FourtyTwo " + uu , 42 ) ; <nl> + Advapi32Util . registrySetStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " 42 " + uu , " FourtyTwo " + uu ) ; <nl> + Advapi32Util . registrySetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " ExpandableString " , " % TEMP % " ) ; <nl> + byte [ ] dataWritten = { 0xD , 0xE , 0xA , 0xD , 0xB , 0xE , 0xE , 0xF } ; 	 	 <nl> + Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " DeadBeef " , dataWritten ) ; <nl> + String [ ] stringsWritten = { " Hello " , " World " , " Hello World " , uu } ; <nl> + Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringArray " , stringsWritten ) ; <nl> + String [ ] emptyArray = new String [ 0 ] ; <nl> + Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyStringArray " , emptyArray ) ; <nl> + Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyBinary " , new byte [ 0 ] ) ; <nl> + TreeMap < String , Object > values = Advapi32Util . registryGetValues ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ; <nl> + assertEquals ( 7 , values . keySet ( ) . size ( ) ) ; <nl> + assertEquals ( " FourtyTwo " + uu , values . get ( " 42 " + uu ) ) ; <nl> + assertEquals ( 42 , values . get ( " FourtyTwo " + uu ) ) ; <nl> + assertEquals ( " % TEMP % " , values . get ( " ExpandableString " ) ) ; <nl> + byte [ ] dataRead = ( byte [ ] ) values . get ( " DeadBeef " ) ; <nl> + assertEquals ( dataWritten . length , dataRead . length ) ; <nl> + for ( int i = 0 ; i < dataWritten . length ; i + + ) { <nl> + assertEquals ( dataWritten [ i ] , dataRead [ i ] ) ; <nl> + } <nl> + String [ ] stringsRead = ( String [ ] ) values . get ( " StringArray " ) ; <nl> + assertEquals ( stringsWritten . length , stringsRead . length ) ; <nl> + for ( int i = 0 ; i < stringsWritten . length ; i + + ) { <nl> + assertEquals ( stringsWritten [ i ] , stringsRead [ i ] ) ; <nl> + } <nl> + stringsRead = ( String [ ] ) values . get ( " EmptyStringArray " ) ; <nl> + assertEquals ( 0 , stringsRead . length ) ; <nl> + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 	 	 	 	 <nl> + } <nl> <nl> - 	 public void testRegistryGetEmptyValues ( ) { <nl> + public void testRegistryGetEmptyValues ( ) { <nl> HKEY root = WinReg . HKEY _ CURRENT _ USER ; <nl> String keyPath = " Software \ \ JNA " ; <nl> Advapi32Util . registryCreateKey ( root , " Software " , " JNA " ) ; <nl> @ @ - 377 , 94 + 377 , 93 @ @ public class Advapi32UtilTest extends TestCase { <nl> } <nl> } <nl> 	 <nl> - 	 public void testIsWellKnownSid ( ) { 	 	 <nl> - 	 	 String everyoneString = " S - 1 - 1 - 0 " ; <nl> + public void testIsWellKnownSid ( ) { 	 	 <nl> + String everyoneString = " S - 1 - 1 - 0 " ; <nl> assertTrue ( Advapi32Util . isWellKnownSid ( everyoneString , WELL _ KNOWN _ SID _ TYPE . WinWorldSid ) ) ; 	 	 <nl> assertFalse ( Advapi32Util . isWellKnownSid ( everyoneString , WELL _ KNOWN _ SID _ TYPE . WinAccountAdministratorSid ) ) ; <nl> byte [ ] everyoneBytes = Advapi32Util . convertStringSidToSid ( everyoneString ) ; <nl> assertTrue ( Advapi32Util . isWellKnownSid ( everyoneBytes , WELL _ KNOWN _ SID _ TYPE . WinWorldSid ) ) ; 	 	 <nl> assertFalse ( Advapi32Util . isWellKnownSid ( everyoneBytes , WELL _ KNOWN _ SID _ TYPE . WinAccountAdministratorSid ) ) ; <nl> - 	 } <nl> + } <nl> 	 <nl> - 	 public void testEventLogIteratorForwards ( ) { <nl> - 	 	 EventLogIterator iter = new EventLogIterator ( " Application " ) ; <nl> - 	 	 try { <nl> - 	 	 	 int max = 100 ; <nl> - 	 	 	 int lastId = 0 ; <nl> - 	 	 	 while ( iter . hasNext ( ) ) { <nl> - 	 	 	 	 EventLogRecord record = iter . next ( ) ; <nl> - 	 	 	 	 assertTrue ( record . getRecordNumber ( ) > lastId ) ; <nl> - 	 	 	 	 lastId = record . getRecordNumber ( ) ; <nl> - 	 	 	 	 assertNotNull ( record . getType ( ) . name ( ) ) ; <nl> - 	 	 	 	 assertNotNull ( record . getSource ( ) ) ; <nl> - 	 	 	 	 if ( record . getRecord ( ) . DataLength . intValue ( ) > 0 ) { <nl> - 	 	 	 	 	 assertEquals ( record . getData ( ) . length , <nl> - 	 	 	 	 	 	 	 record . getRecord ( ) . DataLength . intValue ( ) ) ; <nl> - 	 	 	 	 } else { <nl> - 	 	 	 	 	 assertNull ( record . getData ( ) ) ; <nl> - 	 	 	 	 } <nl> - 	 	 	 	 if ( record . getRecord ( ) . NumStrings . intValue ( ) > 0 ) { <nl> - 	 	 	 	 	 assertEquals ( record . getStrings ( ) . length , <nl> - 	 	 	 	 	 	 	 record . getRecord ( ) . NumStrings . intValue ( ) ) ; <nl> - 	 	 	 	 } else { <nl> - 	 	 	 	 	 assertNull ( record . getStrings ( ) ) ; <nl> - 	 	 	 	 } <nl> + public void testEventLogIteratorForwards ( ) { <nl> + EventLogIterator iter = new EventLogIterator ( " Application " ) ; <nl> + try { <nl> + int max = 100 ; <nl> + int lastId = 0 ; <nl> + while ( iter . hasNext ( ) ) { <nl> + EventLogRecord record = iter . next ( ) ; <nl> + assertTrue ( record . getRecordNumber ( ) > lastId ) ; <nl> + lastId = record . getRecordNumber ( ) ; <nl> + assertNotNull ( record . getType ( ) . name ( ) ) ; <nl> + assertNotNull ( record . getSource ( ) ) ; <nl> + if ( record . getRecord ( ) . DataLength . intValue ( ) > 0 ) { <nl> + assertEquals ( record . getData ( ) . length , <nl> + record . getRecord ( ) . DataLength . intValue ( ) ) ; <nl> + } else { <nl> + assertNull ( record . getData ( ) ) ; <nl> + } <nl> + if ( record . getRecord ( ) . NumStrings . intValue ( ) > 0 ) { <nl> + assertEquals ( record . getStrings ( ) . length , <nl> + record . getRecord ( ) . NumStrings . intValue ( ) ) ; <nl> + } else { <nl> + assertNull ( record . getStrings ( ) ) ; <nl> + } <nl> 	 	 	 	 <nl> - 	 	 	 	 if ( max - - < = 0 ) { <nl> - 	 	 	 	 	 break ; / / shorten test <nl> - 	 	 	 	 } <nl> - 	 	 	 	 / * <nl> - 	 	 	 	 System . out . println ( record . getRecordNumber ( ) <nl> - 	 	 	 	 	 	 + " : Event ID : " + record . getEventId ( ) <nl> - 	 	 	 	 	 	 + " , Event Type : " + record . getType ( ) <nl> - 	 	 	 	 	 	 + " , Event Source : " + record . getSource ( ) ) ; <nl> - 	 	 	 	 	 	 * / <nl> - 	 	 	 } <nl> - 	 	 } finally { <nl> - 	 	 	 iter . close ( ) ; <nl> - 	 	 } <nl> - 	 } <nl> + if ( max - - < = 0 ) { <nl> + break ; / / shorten test <nl> + } <nl> + / * <nl> + System . out . println ( record . getRecordNumber ( ) <nl> + + " : Event ID : " + record . getEventId ( ) <nl> + + " , Event Type : " + record . getType ( ) <nl> + + " , Event Source : " + record . getSource ( ) ) ; <nl> + * / <nl> + } <nl> + } finally { <nl> + iter . close ( ) ; <nl> + } <nl> + } <nl> 	 <nl> - 	 public void testEventLogIteratorBackwards ( ) { <nl> - 	 	 EventLogIterator iter = new EventLogIterator ( null , <nl> - 	 	 	 	 " Application " , WinNT . EVENTLOG _ BACKWARDS _ READ ) ; <nl> - 	 	 try { <nl> - 	 	 	 int max = 100 ; <nl> - 	 	 	 int lastId = - 1 ; <nl> - 	 	 	 while ( iter . hasNext ( ) ) { <nl> - 	 	 	 	 EventLogRecord record = iter . next ( ) ; <nl> - 	 	 	 	 / * <nl> - 	 	 	 	 System . out . println ( record . getRecordNumber ( ) <nl> - 	 	 	 	 	 	 + " : Event ID : " + record . getEventId ( ) <nl> - 	 	 	 	 	 	 + " , Event Type : " + record . getType ( ) <nl> - 	 	 	 	 	 	 + " , Event Source : " + record . getSource ( ) ) ; <nl> - 	 	 	 	 	 	 * / <nl> - 	 	 	 	 assertTrue ( record . getRecordNumber ( ) < lastId | | lastId = = - 1 ) ; <nl> - 	 	 	 	 lastId = record . getRecordNumber ( ) ; <nl> - 	 	 	 	 if ( max - - < = 0 ) { <nl> - 	 	 	 	 	 break ; / / shorten test <nl> - 	 	 	 	 } <nl> - 	 	 	 } <nl> - 	 	 } finally { <nl> - 	 	 	 iter . close ( ) ; <nl> - 	 	 } <nl> - 	 } <nl> + public void testEventLogIteratorBackwards ( ) { <nl> + EventLogIterator iter = new EventLogIterator ( null , <nl> + " Application " , WinNT . EVENTLOG _ BACKWARDS _ READ ) ; <nl> + try { <nl> + int max = 100 ; <nl> + int lastId = - 1 ; <nl> + while ( iter . hasNext ( ) ) { <nl> + EventLogRecord record = iter . next ( ) ; <nl> + / * <nl> + System . out . println ( record . getRecordNumber ( ) <nl> + + " : Event ID : " + record . getEventId ( ) <nl> + + " , Event Type : " + record . getType ( ) <nl> + + " , Event Source : " + record . getSource ( ) ) ; <nl> + * / <nl> + assertTrue ( record . getRecordNumber ( ) < lastId | | lastId = = - 1 ) ; <nl> + lastId = record . getRecordNumber ( ) ; <nl> + if ( max - - < = 0 ) { <nl> + break ; / / shorten test <nl> + } <nl> + } <nl> + } finally { <nl> + iter . close ( ) ; <nl> + } <nl> + } <nl> 	 <nl> - 	 public void testGetEnvironmentBlock ( ) { <nl> - 	 	 String expected = " KEY = value \ 0 " <nl> - 	 	 	 	 + " KEY _ EMPTY = \ 0 " <nl> - 	 	 	 	 + " KEY _ NUMBER = 2 \ 0 " <nl> - 	 	 	 	 + " \ 0 " ; <nl> + public void testGetEnvironmentBlock ( ) { <nl> + String expected = " KEY = value \ 0 " <nl> + + " KEY _ EMPTY = \ 0 " <nl> + + " KEY _ NUMBER = 2 \ 0 " <nl> + + " \ 0 " ; <nl> <nl> - 	 	 / / Order is important to kept checking result simple <nl> - 	 	 Map < String , String > mockEnvironment = new TreeMap < String , String > ( ) ; <nl> - 	 	 mockEnvironment . put ( " KEY " , " value " ) ; <nl> - 	 	 mockEnvironment . put ( " KEY _ EMPTY " , " " ) ; <nl> - 	 	 mockEnvironment . put ( " KEY _ NUMBER " , " 2 " ) ; <nl> - 	 	 mockEnvironment . put ( " KEY _ NULL " , null ) ; 	 	 <nl> + / / Order is important to kept checking result simple <nl> + Map < String , String > mockEnvironment = new TreeMap < String , String > ( ) ; <nl> + mockEnvironment . put ( " KEY " , " value " ) ; <nl> + mockEnvironment . put ( " KEY _ EMPTY " , " " ) ; <nl> + mockEnvironment . put ( " KEY _ NUMBER " , " 2 " ) ; <nl> + mockEnvironment . put ( " KEY _ NULL " , null ) ; 	 	 <nl> <nl> - 	 	 String block = Advapi32Util . getEnvironmentBlock ( mockEnvironment ) ; <nl> - 	 	 assertEquals ( " Environment block must comprise key = value pairs separated by NUL characters " , expected , block ) ; <nl> - 	 } <nl> + String block = Advapi32Util . getEnvironmentBlock ( mockEnvironment ) ; <nl> + assertEquals ( " Environment block must comprise key = value pairs separated by NUL characters " , expected , block ) ; <nl> + } <nl> } <nl> -
NEAREST DIFF (one line): diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> index 978578b . . 8766039 100644 <nl> - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> @ @ - 750 , 9 + 750 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param hKey <nl> 	 * Parent key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetIntValue ( HKEY hKey , String name , int value ) { <nl> byte [ ] data = new byte [ 4 ] ; <nl> @ @ - 773 , 9 + 773 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetIntValue ( HKEY root , String keyPath , String name , int value ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> @ @ - 798 , 9 + 798 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param hKey <nl> 	 * Parent key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetStringValue ( HKEY hKey , String name , String value ) { <nl> 	 char [ ] data = Native . toCharArray ( value ) ; <nl> @ @ - 818 , 9 + 818 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetStringValue ( HKEY root , String keyPath , String name , String value ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> @ @ - 843 , 9 + 843 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param hKey <nl> 	 * Parent key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetExpandableStringValue ( HKEY hKey , String name , String value ) { <nl> 	 char [ ] data = Native . toCharArray ( value ) ; <nl> @ @ - 863 , 9 + 863 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value to write to registry . <nl> 	 * / <nl> 	 public static void registrySetExpandableStringValue ( HKEY root , String keyPath , String name , String value ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> @ @ - 889 , 8 + 889 , 8 @ @ public abstract class Advapi32Util { <nl> 	 * Parent key . <nl> 	 * @ param name <nl> 	 * Name . <nl> - 	 * @ param value <nl> - 	 * Value . <nl> + 	 * @ param arr <nl> + 	 * Array of strings to write to registry . <nl> 	 * / <nl> 	 public static void registrySetStringArray ( HKEY hKey , String name , String [ ] arr ) { <nl> 	 	 int size = 0 ; <nl> @ @ - 922 , 18 + 922 , 18 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> - 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value name . <nl> + 	 * @ param arr <nl> + 	 * Array of strings to write to registry . <nl> 	 * / <nl> - 	 public static void registrySetStringArray ( HKEY root , String keyPath , String name , String [ ] value ) { <nl> + 	 public static void registrySetStringArray ( HKEY root , String keyPath , String name , String [ ] arr ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> 	 	 int rc = Advapi32 . INSTANCE . RegOpenKeyEx ( root , keyPath , 0 , WinNT . KEY _ READ | WinNT . KEY _ WRITE , phkKey ) ; <nl> 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { <nl> 	 	 	 throw new Win32Exception ( rc ) ; <nl> 	 	 } <nl> 	 	 try { <nl> - 	 	 	 registrySetStringArray ( phkKey . getValue ( ) , name , value ) ; <nl> + 	 	 	 registrySetStringArray ( phkKey . getValue ( ) , name , arr ) ; <nl> 	 	 } finally { <nl> 	 	 	 rc = Advapi32 . INSTANCE . RegCloseKey ( phkKey . getValue ( ) ) ; <nl> 	 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { <nl> @ @ - 947 , 9 + 947 , 9 @ @ public abstract class Advapi32Util { <nl> 	 * @ param hKey <nl> 	 * Parent key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> - 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Value name . <nl> + 	 * @ param data <nl> + 	 * Data to write to registry . <nl> 	 * / <nl> 	 public static void registrySetBinaryValue ( HKEY hKey , String name , byte [ ] data ) { <nl> 	 	 int rc = Advapi32 . INSTANCE . RegSetValueEx ( hKey , name , 0 , WinNT . REG _ BINARY , data , data . length ) ; <nl> @ @ - 965 , 18 + 965 , 18 @ @ public abstract class Advapi32Util { <nl> 	 * @ param keyPath <nl> 	 * Path to an existing registry key . <nl> 	 * @ param name <nl> - 	 * Name . <nl> + 	 * Value name . <nl> 	 * @ param value <nl> - 	 * Value . <nl> + 	 * Data to write to registry . <nl> 	 * / <nl> - 	 public static void registrySetBinaryValue ( HKEY root , String keyPath , String name , byte [ ] value ) { <nl> + 	 public static void registrySetBinaryValue ( HKEY root , String keyPath , String name , byte [ ] data ) { <nl> 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; <nl> 	 	 int rc = Advapi32 . INSTANCE . RegOpenKeyEx ( root , keyPath , 0 , WinNT . KEY _ READ | WinNT . KEY _ WRITE , phkKey ) ; <nl> 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { <nl> 	 	 	 throw new Win32Exception ( rc ) ; <nl> 	 	 } <nl> 	 	 try { <nl> - 	 	 	 registrySetBinaryValue ( phkKey . getValue ( ) , name , value ) ; <nl> + 	 	 	 registrySetBinaryValue ( phkKey . getValue ( ) , name , data ) ; <nl> 	 	 } finally { <nl> 	 	 	 rc = Advapi32 . INSTANCE . RegCloseKey ( phkKey . getValue ( ) ) ; <nl> 	 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { <nl> diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> index 83bc754 . . cebfb96 100644 <nl> - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> @ @ - 24 , 11 + 24 , 20 @ @ import com . sun . jna . ptr . IntByReference ; <nl> * / <nl> public class W32Service { <nl> 	 SC _ HANDLE _ serviceHandle = null ; <nl> - 	 <nl> + <nl> + 	 / * * <nl> + 	 * Win32 Service <nl> + 	 * @ param serviceHandle <nl> + 	 * A handle to the service . This handle is returned by the CreateService or OpenService <nl> + 	 * function , and it must have the SERVICE _ QUERY _ STATUS access right . <nl> + 	 * / <nl> 	 public W32Service ( SC _ HANDLE serviceHandle ) { <nl> 	 	 _ serviceHandle = serviceHandle ; <nl> 	 } <nl> 	 <nl> + 	 / * * <nl> + 	 * Close service . <nl> + 	 * / <nl> 	 public void close ( ) { <nl> 	 	 if ( _ serviceHandle ! = null ) { <nl> 	 	 	 if ( ! Advapi32 . INSTANCE . CloseServiceHandle ( _ serviceHandle ) ) { <nl> @ @ - 40 , 12 + 49 , 8 @ @ public class W32Service { <nl> 	 <nl> 	 / * * <nl> 	 * Retrieves the current status of the specified service based on the specified information level . <nl> - 	 * @ param serviceHandle <nl> - 	 * A handle to the service . <nl> - 	 * This handle is returned by the CreateService or OpenService function , and <nl> - 	 * it must have the SERVICE _ QUERY _ STATUS access right . <nl> - 	 * @ return Service status information <nl> - 	 * @ throws Win32Exception <nl> + 	 * @ return <nl> + 	 * Service status information <nl> 	 * / <nl> 	 public SERVICE _ STATUS _ PROCESS queryStatus ( ) { <nl> 	 	 IntByReference size = new IntByReference ( ) ; <nl> @ @ - 77 , 6 + 82 , 9 @ @ public class W32Service { <nl> 	 	 } <nl> 	 } <nl> 	 <nl> + 	 / * * <nl> + 	 * Stop service . <nl> + 	 * / <nl> 	 public void stopService ( ) { <nl> 	 	 waitForNonPendingState ( ) ; <nl> 	 	 / / If the service is already stopped - return <nl> @ @ - 92 , 7 + 100 , 10 @ @ public class W32Service { <nl> 	 	 	 throw new RuntimeException ( " Unable to stop the service " ) ; <nl> 	 	 } <nl> 	 } <nl> - 	 <nl> + <nl> + 	 / * * <nl> + 	 * Continue service . <nl> + 	 * / <nl> 	 public void continueService ( ) { <nl> 	 	 waitForNonPendingState ( ) ; <nl> 	 	 / / If the service is already stopped - return <nl> @ @ - 109 , 6 + 120 , 9 @ @ public class W32Service { <nl> 	 	 } <nl> 	 } <nl> 	 <nl> + 	 / * * <nl> + 	 * Pause service . <nl> + 	 * / <nl> 	 public void pauseService ( ) { <nl> 	 	 waitForNonPendingState ( ) ; <nl> 	 	 / / If the service is already paused - return <nl> @ @ - 126 , 7 + 140 , 7 @ @ public class W32Service { <nl> 	 } <nl> <nl> / * * <nl> - * This call waits for the state to change to something other than a pending state <nl> + * Wait for the state to change to something other than a pending state . <nl> * / <nl> 	 public void waitForNonPendingState ( ) { <nl> <nl> @ @ - 137 , 18 + 151 , 18 @ @ public class W32Service { <nl> <nl> 	 	 while ( isPendingState ( status . dwCurrentState ) ) { <nl> <nl> - 	 	 	 / / If the checkpoint advanced , start new tick count <nl> + 	 	 	 / / if the checkpoint advanced , start new tick count <nl> 	 	 	 if ( status . dwCheckPoint > previousCheckPoint ) { <nl> 	 	 	 	 previousCheckPoint = status . dwCheckPoint ; <nl> 	 	 	 	 checkpointStartTickCount = Kernel32 . INSTANCE . GetTickCount ( ) ; <nl> 	 	 	 } 	 	 	 <nl> <nl> - 	 	 	 / / If the time that passed is greater than the wait hint - throw timeout exception <nl> + 	 	 	 / / if the time that passed is greater than the wait hint - throw timeout exception <nl> 	 	 	 if ( Kernel32 . INSTANCE . GetTickCount ( ) - checkpointStartTickCount > status . dwWaitHint ) { <nl> 	 	 	 	 throw new RuntimeException ( " Timeout waiting for service to change to a non - pending state . " ) ; <nl> 	 	 	 } <nl> <nl> - 	 	 	 / / Do not wait longer than the wait hint . A good interval is <nl> + 	 	 	 / / do not wait longer than the wait hint . A good interval is <nl> 	 	 	 / / one - tenth the wait hint , but no less than 1 second and no <nl> 	 	 	 / / more than 10 seconds . <nl> <nl> @ @ - 165 , 7 + 179 , 6 @ @ public class W32Service { <nl> 	 	 	 	 throw new RuntimeException ( e ) ; <nl> 	 	 	 } <nl> <nl> - 	 	 	 / / Check the status again <nl> 	 	 	 status = queryStatus ( ) ; <nl> 	 	 } <nl> 	 }

TEST DIFF:
diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32UtilTest . java 
 index 8432025 . . b97c0b5 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32UtilTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32UtilTest . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - ï»¿ / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved 
 + / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved 
 * 
 * This library is free software ; you can redistribute it and / or 
 * modify it under the terms of the GNU Lesser General Public 
 @ @ - 40 , 71 + 40 , 71 @ @ public class Advapi32UtilTest extends TestCase { 
 System . out . println ( " GetUserName : " + currentUserName ) ; 
 	 	 
 for ( Account group : Advapi32Util . getCurrentUserGroups ( ) ) { 
 - 	 	 	 System . out . println ( " " + group . fqn + " [ " + group . sidString + " ] " ) ; 
 - 	 	 } 
 + System . out . println ( " " + group . fqn + " [ " + group . sidString + " ] " ) ; 
 + } 
 	 	 
 - 	 	 Account accountByName = Advapi32Util . getAccountByName ( currentUserName ) ; 
 - 	 	 System . out . println ( " AccountByName : " + currentUserName ) ; 
 + Account accountByName = Advapi32Util . getAccountByName ( currentUserName ) ; 
 + System . out . println ( " AccountByName : " + currentUserName ) ; 
 System . out . println ( " Fqn : " + accountByName . fqn ) ; 
 System . out . println ( " Domain : " + accountByName . domain ) ; 
 System . out . println ( " Sid : " + accountByName . sidString ) ; 
 
 Account accountBySid = Advapi32Util . getAccountBySid ( new PSID ( accountByName . sid ) ) ; 
 - 	 	 System . out . println ( " AccountBySid : " + accountByName . sidString ) ; 
 + System . out . println ( " AccountBySid : " + accountByName . sidString ) ; 
 System . out . println ( " Fqn : " + accountBySid . fqn ) ; 
 System . out . println ( " Name : " + accountBySid . name ) ; 
 System . out . println ( " Domain : " + accountBySid . domain ) ; 
 } 
 
 - 	 public void testGetUsername ( ) { 
 - 	 	 String username = Advapi32Util . getUserName ( ) ; 
 - 	 	 assertTrue ( username . length ( ) > 0 ) ; 
 - 	 } 
 + public void testGetUsername ( ) { 
 + String username = Advapi32Util . getUserName ( ) ; 
 + assertTrue ( username . length ( ) > 0 ) ; 
 + } 
 	 
 - 	 public void testGetAccountBySid ( ) { 	 	 
 - 	 	 String accountName = Advapi32Util . getUserName ( ) ; 
 - 	 	 Account currentUser = Advapi32Util . getAccountByName ( accountName ) ; 
 - 	 	 Account account = Advapi32Util . getAccountBySid ( new PSID ( currentUser . sid ) ) ; 
 - 	 	 assertEquals ( SID _ NAME _ USE . SidTypeUser , account . accountType ) ; 
 - 	 	 assertEquals ( currentUser . fqn . toLowerCase ( ) , account . fqn . toLowerCase ( ) ) ; 
 - 	 	 assertEquals ( currentUser . name . toLowerCase ( ) , account . name . toLowerCase ( ) ) ; 
 - 	 	 assertEquals ( currentUser . domain . toLowerCase ( ) , account . domain . toLowerCase ( ) ) ; 
 - 	 	 assertEquals ( currentUser . sidString , account . sidString ) ; 	 	 
 - 	 } 
 + public void testGetAccountBySid ( ) { 	 	 
 + String accountName = Advapi32Util . getUserName ( ) ; 
 + Account currentUser = Advapi32Util . getAccountByName ( accountName ) ; 
 + Account account = Advapi32Util . getAccountBySid ( new PSID ( currentUser . sid ) ) ; 
 + assertEquals ( SID _ NAME _ USE . SidTypeUser , account . accountType ) ; 
 + assertEquals ( currentUser . fqn . toLowerCase ( ) , account . fqn . toLowerCase ( ) ) ; 
 + assertEquals ( currentUser . name . toLowerCase ( ) , account . name . toLowerCase ( ) ) ; 
 + assertEquals ( currentUser . domain . toLowerCase ( ) , account . domain . toLowerCase ( ) ) ; 
 + assertEquals ( currentUser . sidString , account . sidString ) ; 	 	 
 + } 
 
 - 	 public void testGetAccountByName ( ) { 	 	 
 - 	 	 String accountName = Advapi32Util . getUserName ( ) ; 
 - 	 	 Account account = Advapi32Util . getAccountByName ( accountName ) ; 
 - 	 	 assertEquals ( SID _ NAME _ USE . SidTypeUser , account . accountType ) ; 
 - 	 } 
 + public void testGetAccountByName ( ) { 	 	 
 + String accountName = Advapi32Util . getUserName ( ) ; 
 + Account account = Advapi32Util . getAccountByName ( accountName ) ; 
 + assertEquals ( SID _ NAME _ USE . SidTypeUser , account . accountType ) ; 
 + } 
 	 
 - 	 public void testGetAccountNameFromSid ( ) { 
 + public void testGetAccountNameFromSid ( ) { 
 assertEquals ( " Everyone " , Advapi32Util . getAccountBySid ( " S - 1 - 1 - 0 " ) . name ) ; 	 	 
 - 	 } 
 + } 
 
 - 	 public void testGetAccountSidFromName ( ) { 
 + public void testGetAccountSidFromName ( ) { 
 assertEquals ( " S - 1 - 1 - 0 " , Advapi32Util . getAccountByName ( " Everyone " ) . sidString ) ; 
 - 	 } 
 + } 
 	 
 - 	 public void testConvertSid ( ) { 
 + public void testConvertSid ( ) { 
 	 String sidString = " S - 1 - 1 - 0 " ; / / Everyone 
 	 byte [ ] sidBytes = Advapi32Util . convertStringSidToSid ( sidString ) ; 
 	 assertTrue ( sidBytes . length > 0 ) ; 
 	 String convertedSidString = Advapi32Util . convertSidToStringSid ( new PSID ( sidBytes ) ) ; 
 	 assertEquals ( convertedSidString , sidString ) ; 
 - 	 } 
 + } 
 	 
 - 	 public void testGetCurrentUserGroups ( ) { 
 - 	 	 Account [ ] groups = Advapi32Util . getCurrentUserGroups ( ) ; 
 - 	 	 assertTrue ( groups . length > 0 ) ; 
 - 	 	 for ( Account group : groups ) { 
 - 	 	 	 assertTrue ( group . name . length ( ) > 0 ) ; 
 - 	 	 	 assertTrue ( group . sidString . length ( ) > 0 ) ; 
 - 	 	 	 assertTrue ( group . sid . length > 0 ) ; 
 - 	 	 } 
 - 	 } 
 + public void testGetCurrentUserGroups ( ) { 
 + Account [ ] groups = Advapi32Util . getCurrentUserGroups ( ) ; 
 + assertTrue ( groups . length > 0 ) ; 
 + for ( Account group : groups ) { 
 + assertTrue ( group . name . length ( ) > 0 ) ; 
 + assertTrue ( group . sidString . length ( ) > 0 ) ; 
 + assertTrue ( group . sid . length > 0 ) ; 
 + } 
 + } 
 	 
 - 	 public void testGetUserGroups ( ) { 
 + public void testGetUserGroups ( ) { 
 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; 
 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; 
 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; 
 @ @ - 113 , 32 + 113 , 32 @ @ public class Advapi32UtilTest extends TestCase { 
 if ( LMErr . NERR _ Success ! = Netapi32 . INSTANCE . NetUserAdd ( null , 1 , userInfo , null ) ) { 
 return ; 
 } 
 - 	 	 try { 
 - 	 	 	 HANDLEByReference phUser = new HANDLEByReference ( ) ; 
 - 	 	 	 try { 
 - 	 	 	 	 assertTrue ( Advapi32 . INSTANCE . LogonUser ( userInfo . usri1 _ name . toString ( ) , 
 - 	 	 	 	 	 	 null , userInfo . usri1 _ password . toString ( ) , WinBase . LOGON32 _ LOGON _ NETWORK , 
 - 	 	 	 	 	 	 WinBase . LOGON32 _ PROVIDER _ DEFAULT , phUser ) ) ; 
 - 	 	 	 	 Account [ ] groups = Advapi32Util . getTokenGroups ( phUser . getValue ( ) ) ; 
 - 	 	 	 	 assertTrue ( groups . length > 0 ) ; 
 - 	 	 	 	 for ( Account group : groups ) { 
 - 	 	 	 	 	 assertTrue ( group . name . length ( ) > 0 ) ; 
 - 	 	 	 	 	 assertTrue ( group . sidString . length ( ) > 0 ) ; 
 - 	 	 	 	 	 assertTrue ( group . sid . length > 0 ) ; 
 - 	 	 	 	 } 
 - 	 	 	 } finally { 
 - 	 	 	 	 if ( phUser . getValue ( ) ! = WinBase . INVALID _ HANDLE _ VALUE ) { 
 - 	 	 	 	 	 Kernel32 . INSTANCE . CloseHandle ( phUser . getValue ( ) ) ; 
 - 	 	 	 	 } 	 	 	 	 
 - 	 	 	 } 
 - 	 	 } finally { 
 - assertEquals ( " Error in NetUserDel " , 
 - LMErr . NERR _ Success , 
 - Netapi32 . INSTANCE . NetUserDel ( null , userInfo . usri1 _ name . toString ( ) ) ) ; 	 	 	 
 - 	 	 } 
 - 	 } 
 + try { 
 + HANDLEByReference phUser = new HANDLEByReference ( ) ; 
 + try { 
 + assertTrue ( Advapi32 . INSTANCE . LogonUser ( userInfo . usri1 _ name . toString ( ) , 
 + null , userInfo . usri1 _ password . toString ( ) , WinBase . LOGON32 _ LOGON _ NETWORK , 
 + WinBase . LOGON32 _ PROVIDER _ DEFAULT , phUser ) ) ; 
 + Account [ ] groups = Advapi32Util . getTokenGroups ( phUser . getValue ( ) ) ; 
 + assertTrue ( groups . length > 0 ) ; 
 + for ( Account group : groups ) { 
 + assertTrue ( group . name . length ( ) > 0 ) ; 
 + assertTrue ( group . sidString . length ( ) > 0 ) ; 
 + assertTrue ( group . sid . length > 0 ) ; 
 + } 
 + } finally { 
 + if ( phUser . getValue ( ) ! = WinBase . INVALID _ HANDLE _ VALUE ) { 
 + Kernel32 . INSTANCE . CloseHandle ( phUser . getValue ( ) ) ; 
 + } 	 	 	 	 
 + } 
 + } finally { 
 + assertEquals ( " Error in NetUserDel " , 
 + LMErr . NERR _ Success , 
 + Netapi32 . INSTANCE . NetUserDel ( null , userInfo . usri1 _ name . toString ( ) ) ) ; 	 	 	 
 + } 
 + } 
 	 
 - 	 public void testGetUserAccount ( ) { 
 + public void testGetUserAccount ( ) { 
 	 USER _ INFO _ 1 userInfo = new USER _ INFO _ 1 ( ) ; 
 	 userInfo . usri1 _ name = new WString ( " JNANetapi32TestUser " ) ; 
 	 userInfo . usri1 _ password = new WString ( " ! JNAP $ $ Wrd0 " ) ; 
 @ @ - 147 , 197 + 147 , 197 @ @ public class Advapi32UtilTest extends TestCase { 
 if ( LMErr . NERR _ Success ! = Netapi32 . INSTANCE . NetUserAdd ( null , 1 , userInfo , null ) ) { 
 return ; 
 } 
 - 	 	 try { 
 - 	 	 	 HANDLEByReference phUser = new HANDLEByReference ( ) ; 
 - 	 	 	 try { 
 - 	 	 	 	 assertTrue ( Advapi32 . INSTANCE . LogonUser ( userInfo . usri1 _ name . toString ( ) , 
 - 	 	 	 	 	 	 null , userInfo . usri1 _ password . toString ( ) , WinBase . LOGON32 _ LOGON _ NETWORK , 
 - 	 	 	 	 	 	 WinBase . LOGON32 _ PROVIDER _ DEFAULT , phUser ) ) ; 
 - 	 	 	 	 Advapi32Util . Account account = Advapi32Util . getTokenAccount ( phUser . getValue ( ) ) ; 
 - 	 	 	 	 assertTrue ( account . name . length ( ) > 0 ) ; 
 - 	 	 	 	 assertEquals ( userInfo . usri1 _ name . toString ( ) , account . name ) ; 
 - 	 	 	 } finally { 
 - 	 	 	 	 if ( phUser . getValue ( ) ! = WinBase . INVALID _ HANDLE _ VALUE ) { 
 - 	 	 	 	 	 Kernel32 . INSTANCE . CloseHandle ( phUser . getValue ( ) ) ; 
 - 	 	 	 	 } 
 - 	 	 	 } 
 - 	 	 } finally { 
 - 	 	 assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( 
 - 	 	 	 	 null , userInfo . usri1 _ name . toString ( ) ) ) ; 	 	 	 
 - 	 	 } 
 - 	 } 	 
 + try { 
 + HANDLEByReference phUser = new HANDLEByReference ( ) ; 
 + try { 
 + assertTrue ( Advapi32 . INSTANCE . LogonUser ( userInfo . usri1 _ name . toString ( ) , 
 + null , userInfo . usri1 _ password . toString ( ) , WinBase . LOGON32 _ LOGON _ NETWORK , 
 + WinBase . LOGON32 _ PROVIDER _ DEFAULT , phUser ) ) ; 
 + Advapi32Util . Account account = Advapi32Util . getTokenAccount ( phUser . getValue ( ) ) ; 
 + assertTrue ( account . name . length ( ) > 0 ) ; 
 + assertEquals ( userInfo . usri1 _ name . toString ( ) , account . name ) ; 
 + } finally { 
 + if ( phUser . getValue ( ) ! = WinBase . INVALID _ HANDLE _ VALUE ) { 
 + Kernel32 . INSTANCE . CloseHandle ( phUser . getValue ( ) ) ; 
 + } 
 + } 
 + } finally { 
 + assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetUserDel ( 
 + null , userInfo . usri1 _ name . toString ( ) ) ) ; 	 	 	 
 + } 
 + } 	 
 	 
 - 	 public void testRegistryKeyExists ( ) { 
 - 	 	 assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 - 	 	 	 	 " " ) ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 - 	 	 	 	 " Software \ \ Microsoft " ) ) ; 
 - 	 	 assertFalse ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 - 	 	 	 	 " KeyDoesNotExist \ \ SubKeyDoesNotExist " ) ) ; 
 - 	 } 
 + public void testRegistryKeyExists ( ) { 
 + assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 + " " ) ) ; 
 + assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 + " Software \ \ Microsoft " ) ) ; 
 + assertFalse ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 + " KeyDoesNotExist \ \ SubKeyDoesNotExist " ) ) ; 
 + } 
 	 
 - 	 public void testRegistryValueExists ( ) { 
 - 	 	 assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 - 	 	 	 	 " Software \ \ Microsoft " , " " ) ) ; 
 - 	 	 assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 - 	 	 	 	 " Software \ \ Microsoft " , " KeyDoesNotExist " ) ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 - 	 	 	 	 " SYSTEM \ \ CurrentControlSet \ \ Control " , " SystemBootDevice " ) ) ; 
 - 	 } 	 
 + public void testRegistryValueExists ( ) { 
 + assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 + " Software \ \ Microsoft " , " " ) ) ; 
 + assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 + " Software \ \ Microsoft " , " KeyDoesNotExist " ) ) ; 
 + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ LOCAL _ MACHINE , 
 + " SYSTEM \ \ CurrentControlSet \ \ Control " , " SystemBootDevice " ) ) ; 
 + } 	 
 	 
 - 	 public void testRegistryCreateDeleteKey ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 assertFalse ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; 
 - 	 } 
 + public void testRegistryCreateDeleteKey ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + assertFalse ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; 
 + } 
 	 
 - 	 public void testRegistryCreateKeyDisposition ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ) ; 
 - 	 	 assertFalse ( Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 } 
 + public void testRegistryCreateKeyDisposition ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + assertTrue ( Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ) ; 
 + assertFalse ( Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ) ; 
 + assertTrue ( Advapi32Util . registryKeyExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + } 
 
 - 	 public void testRegistryDeleteValue ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " , 42 ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; 
 - 	 	 Advapi32Util . registryDeleteValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ; 	 	 
 - 	 	 assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 } 
 + public void testRegistryDeleteValue ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " , 42 ) ; 
 + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; 
 + Advapi32Util . registryDeleteValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ; 	 	 
 + assertFalse ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + } 
 	 
 - 	 public void testRegistrySetGetIntValue ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " , 42 ) ; 
 - 	 	 assertEquals ( 42 , Advapi32Util . registryGetIntValue ( WinReg . HKEY _ CURRENT _ USER , 
 - 	 	 	 	 " Software \ \ JNA " , " IntValue " ) ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 } 
 + public void testRegistrySetGetIntValue ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " , 42 ) ; 
 + assertEquals ( 42 , Advapi32Util . registryGetIntValue ( WinReg . HKEY _ CURRENT _ USER , 
 + " Software \ \ JNA " , " IntValue " ) ) ; 
 + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " IntValue " ) ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + } 
 	 
 - 	 public void testRegistrySetGetLongValue ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registrySetLongValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " LongValue " , 1234L ) ; 
 - 	 	 assertEquals ( 1234L , Advapi32Util . registryGetLongValue ( WinReg . HKEY _ CURRENT _ USER , 
 - 	 	 	 	 " Software \ \ JNA " , " LongValue " ) ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " LongValue " ) ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 } 
 + public void testRegistrySetGetLongValue ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registrySetLongValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " LongValue " , 1234L ) ; 
 + assertEquals ( 1234L , Advapi32Util . registryGetLongValue ( WinReg . HKEY _ CURRENT _ USER , 
 + " Software \ \ JNA " , " LongValue " ) ) ; 
 + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " LongValue " ) ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + } 
 	 
 - 	 public void testRegistrySetGetStringValue ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registrySetStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " , " Hello World " ) ; 
 - 	 	 assertEquals ( " Hello World " , Advapi32Util . registryGetStringValue ( WinReg . HKEY _ CURRENT _ USER , 
 - 	 	 	 	 " Software \ \ JNA " , " StringValue " ) ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " ) ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 
 - 	 } 
 + public void testRegistrySetGetStringValue ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registrySetStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " , " Hello World " ) ; 
 + assertEquals ( " Hello World " , Advapi32Util . registryGetStringValue ( WinReg . HKEY _ CURRENT _ USER , 
 + " Software \ \ JNA " , " StringValue " ) ) ; 
 + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " ) ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 
 + } 
 
 - 	 public void testRegistrySetGetExpandableStringValue ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registrySetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " , " Temp is % TEMP % " ) ; 
 - 	 	 assertEquals ( " Temp is % TEMP % " , Advapi32Util . registryGetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , 
 - 	 	 	 	 " Software \ \ JNA " , " StringValue " ) ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " ) ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 
 - 	 } 
 + public void testRegistrySetGetExpandableStringValue ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registrySetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " , " Temp is % TEMP % " ) ; 
 + assertEquals ( " Temp is % TEMP % " , Advapi32Util . registryGetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , 
 + " Software \ \ JNA " , " StringValue " ) ) ; 
 + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringValue " ) ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 
 + } 
 	 
 - 	 public void testRegistrySetGetStringArray ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 String [ ] dataWritten = { " Hello " , " World " } ; 
 - 	 	 Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " , dataWritten ) ; 
 - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " ) ) ; 
 - 	 	 String [ ] dataRead = Advapi32Util . registryGetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " ) ; 
 - 	 	 assertEquals ( dataWritten . length , dataRead . length ) ; 
 - 	 	 for ( int i = 0 ; i < dataRead . length ; i + + ) { 
 - 	 	 	 assertEquals ( dataWritten [ i ] , dataRead [ i ] ) ; 
 - 	 	 } 
 - 	 	 dataWritten = new String [ 0 ] ; 
 - 	 	 Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyMultiString " , dataWritten ) ; 
 - 	 	 dataRead = Advapi32Util . registryGetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyMultiString " ) ; 
 - 	 	 assertEquals ( 0 , dataRead . length ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 } 
 + public void testRegistrySetGetStringArray ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + String [ ] dataWritten = { " Hello " , " World " } ; 
 + Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " , dataWritten ) ; 
 + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " ) ) ; 
 + String [ ] dataRead = Advapi32Util . registryGetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " MultiStringValue " ) ; 
 + assertEquals ( dataWritten . length , dataRead . length ) ; 
 + for ( int i = 0 ; i < dataRead . length ; i + + ) { 
 + assertEquals ( dataWritten [ i ] , dataRead [ i ] ) ; 
 + } 
 + dataWritten = new String [ 0 ] ; 
 + Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyMultiString " , dataWritten ) ; 
 + dataRead = Advapi32Util . registryGetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyMultiString " ) ; 
 + assertEquals ( 0 , dataRead . length ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + } 
 
 - 	 public void testRegistrySetGetBinaryValue ( ) { 
 - 	 	 byte [ ] data = { 0x00 , 0x01 , 0x02 } ; 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " , data ) ; 
 - 	 	 byte [ ] read = Advapi32Util . registryGetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " ) ; 
 - 	 	 assertEquals ( data . length , read . length ) ; 	 	 
 - 	 	 for ( int i = 0 ; i < data . length ; i + + ) { 
 - 	 	 	 assertEquals ( data [ i ] , read [ i ] ) ; 
 - 	 	 } 
 - 	 	 assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " ) ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 } 
 + public void testRegistrySetGetBinaryValue ( ) { 
 + byte [ ] data = { 0x00 , 0x01 , 0x02 } ; 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " , data ) ; 
 + byte [ ] read = Advapi32Util . registryGetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " ) ; 
 + assertEquals ( data . length , read . length ) ; 	 	 
 + for ( int i = 0 ; i < data . length ; i + + ) { 
 + assertEquals ( data [ i ] , read [ i ] ) ; 
 + } 
 + assertTrue ( Advapi32Util . registryValueExists ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " BinaryValue " ) ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + } 
 	 
 - 	 public void testRegistryGetKeys ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; 
 - 	 	 String [ ] subKeys = Advapi32Util . registryGetKeys ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ; 
 - 	 	 assertEquals ( 2 , subKeys . length ) ; 
 - 	 	 assertEquals ( subKeys [ 0 ] , " Key1 " ) ; 
 - 	 	 assertEquals ( subKeys [ 1 ] , " Key2 " ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 	 	 
 - 	 } 
 + public void testRegistryGetKeys ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; 
 + String [ ] subKeys = Advapi32Util . registryGetKeys ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ; 
 + assertEquals ( 2 , subKeys . length ) ; 
 + assertEquals ( subKeys [ 0 ] , " Key1 " ) ; 
 + assertEquals ( subKeys [ 1 ] , " Key2 " ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 	 	 
 + } 
 	 
 - 	 public void testRegistryGetCloseKey ( ) { 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; 
 - 	 	 HKEYByReference phkKey = Advapi32Util . registryGetKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , WinNT . KEY _ READ ) ; 
 - 	 	 String [ ] subKeys = Advapi32Util . registryGetKeys ( phkKey . getValue ( ) ) ; 
 - 	 	 assertEquals ( 2 , subKeys . length ) ; 
 - 	 	 assertEquals ( subKeys [ 0 ] , " Key1 " ) ; 
 - 	 	 assertEquals ( subKeys [ 1 ] , " Key2 " ) ; 
 - 	 	 Advapi32Util . registryCloseKey ( phkKey . getValue ( ) ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 } 
 + public void testRegistryGetCloseKey ( ) { 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; 
 + HKEYByReference phkKey = Advapi32Util . registryGetKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , WinNT . KEY _ READ ) ; 
 + String [ ] subKeys = Advapi32Util . registryGetKeys ( phkKey . getValue ( ) ) ; 
 + assertEquals ( 2 , subKeys . length ) ; 
 + assertEquals ( subKeys [ 0 ] , " Key1 " ) ; 
 + assertEquals ( subKeys [ 1 ] , " Key2 " ) ; 
 + Advapi32Util . registryCloseKey ( phkKey . getValue ( ) ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key1 " ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " Key2 " ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + } 
 	 
 - 	 public void testRegistryGetValues ( ) { 
 - 	 	 String uu = new String ( " A " + " \ \ u00ea " + " \ \ u00f1 " + " \ \ u00fc " + " C " ) ; 
 - 	 	 Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 - 	 	 Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " FourtyTwo " + uu , 42 ) ; 
 - 	 	 Advapi32Util . registrySetStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " 42 " + uu , " FourtyTwo " + uu ) ; 
 - 	 	 Advapi32Util . registrySetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " ExpandableString " , " % TEMP % " ) ; 
 - 	 	 byte [ ] dataWritten = { 0xD , 0xE , 0xA , 0xD , 0xB , 0xE , 0xE , 0xF } ; 	 	 
 - 	 	 Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " DeadBeef " , dataWritten ) ; 
 - 	 	 String [ ] stringsWritten = { " Hello " , " World " , " Hello World " , uu } ; 
 - 	 	 Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringArray " , stringsWritten ) ; 
 - 	 	 String [ ] emptyArray = new String [ 0 ] ; 
 - 	 	 Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyStringArray " , emptyArray ) ; 
 - 	 	 Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyBinary " , new byte [ 0 ] ) ; 
 - 	 	 TreeMap < String , Object > values = Advapi32Util . registryGetValues ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ; 
 - 	 	 assertEquals ( 7 , values . keySet ( ) . size ( ) ) ; 
 - 	 	 assertEquals ( " FourtyTwo " + uu , values . get ( " 42 " + uu ) ) ; 
 - 	 	 assertEquals ( 42 , values . get ( " FourtyTwo " + uu ) ) ; 
 - 	 	 assertEquals ( " % TEMP % " , values . get ( " ExpandableString " ) ) ; 
 - 	 	 byte [ ] dataRead = ( byte [ ] ) values . get ( " DeadBeef " ) ; 
 - 	 	 assertEquals ( dataWritten . length , dataRead . length ) ; 
 - 	 	 for ( int i = 0 ; i < dataWritten . length ; i + + ) { 
 - 	 	 	 assertEquals ( dataWritten [ i ] , dataRead [ i ] ) ; 
 - 	 	 } 
 - 	 	 String [ ] stringsRead = ( String [ ] ) values . get ( " StringArray " ) ; 
 - 	 	 assertEquals ( stringsWritten . length , stringsRead . length ) ; 
 - 	 	 for ( int i = 0 ; i < stringsWritten . length ; i + + ) { 
 - 	 	 	 assertEquals ( stringsWritten [ i ] , stringsRead [ i ] ) ; 
 - 	 	 } 
 - 	 	 stringsRead = ( String [ ] ) values . get ( " EmptyStringArray " ) ; 
 - 	 	 assertEquals ( 0 , stringsRead . length ) ; 
 - 	 	 Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 	 	 	 	 
 - 	 } 
 + public void testRegistryGetValues ( ) { 
 + String uu = new String ( " A " + " \ \ u00ea " + " \ \ u00f1 " + " \ \ u00fc " + " C " ) ; 
 + Advapi32Util . registryCreateKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 
 + Advapi32Util . registrySetIntValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " FourtyTwo " + uu , 42 ) ; 
 + Advapi32Util . registrySetStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " 42 " + uu , " FourtyTwo " + uu ) ; 
 + Advapi32Util . registrySetExpandableStringValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " ExpandableString " , " % TEMP % " ) ; 
 + byte [ ] dataWritten = { 0xD , 0xE , 0xA , 0xD , 0xB , 0xE , 0xE , 0xF } ; 	 	 
 + Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " DeadBeef " , dataWritten ) ; 
 + String [ ] stringsWritten = { " Hello " , " World " , " Hello World " , uu } ; 
 + Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " StringArray " , stringsWritten ) ; 
 + String [ ] emptyArray = new String [ 0 ] ; 
 + Advapi32Util . registrySetStringArray ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyStringArray " , emptyArray ) ; 
 + Advapi32Util . registrySetBinaryValue ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " , " EmptyBinary " , new byte [ 0 ] ) ; 
 + TreeMap < String , Object > values = Advapi32Util . registryGetValues ( WinReg . HKEY _ CURRENT _ USER , " Software \ \ JNA " ) ; 
 + assertEquals ( 7 , values . keySet ( ) . size ( ) ) ; 
 + assertEquals ( " FourtyTwo " + uu , values . get ( " 42 " + uu ) ) ; 
 + assertEquals ( 42 , values . get ( " FourtyTwo " + uu ) ) ; 
 + assertEquals ( " % TEMP % " , values . get ( " ExpandableString " ) ) ; 
 + byte [ ] dataRead = ( byte [ ] ) values . get ( " DeadBeef " ) ; 
 + assertEquals ( dataWritten . length , dataRead . length ) ; 
 + for ( int i = 0 ; i < dataWritten . length ; i + + ) { 
 + assertEquals ( dataWritten [ i ] , dataRead [ i ] ) ; 
 + } 
 + String [ ] stringsRead = ( String [ ] ) values . get ( " StringArray " ) ; 
 + assertEquals ( stringsWritten . length , stringsRead . length ) ; 
 + for ( int i = 0 ; i < stringsWritten . length ; i + + ) { 
 + assertEquals ( stringsWritten [ i ] , stringsRead [ i ] ) ; 
 + } 
 + stringsRead = ( String [ ] ) values . get ( " EmptyStringArray " ) ; 
 + assertEquals ( 0 , stringsRead . length ) ; 
 + Advapi32Util . registryDeleteKey ( WinReg . HKEY _ CURRENT _ USER , " Software " , " JNA " ) ; 	 	 	 	 	 	 
 + } 
 
 - 	 public void testRegistryGetEmptyValues ( ) { 
 + public void testRegistryGetEmptyValues ( ) { 
 HKEY root = WinReg . HKEY _ CURRENT _ USER ; 
 String keyPath = " Software \ \ JNA " ; 
 Advapi32Util . registryCreateKey ( root , " Software " , " JNA " ) ; 
 @ @ - 377 , 94 + 377 , 93 @ @ public class Advapi32UtilTest extends TestCase { 
 } 
 } 
 	 
 - 	 public void testIsWellKnownSid ( ) { 	 	 
 - 	 	 String everyoneString = " S - 1 - 1 - 0 " ; 
 + public void testIsWellKnownSid ( ) { 	 	 
 + String everyoneString = " S - 1 - 1 - 0 " ; 
 assertTrue ( Advapi32Util . isWellKnownSid ( everyoneString , WELL _ KNOWN _ SID _ TYPE . WinWorldSid ) ) ; 	 	 
 assertFalse ( Advapi32Util . isWellKnownSid ( everyoneString , WELL _ KNOWN _ SID _ TYPE . WinAccountAdministratorSid ) ) ; 
 byte [ ] everyoneBytes = Advapi32Util . convertStringSidToSid ( everyoneString ) ; 
 assertTrue ( Advapi32Util . isWellKnownSid ( everyoneBytes , WELL _ KNOWN _ SID _ TYPE . WinWorldSid ) ) ; 	 	 
 assertFalse ( Advapi32Util . isWellKnownSid ( everyoneBytes , WELL _ KNOWN _ SID _ TYPE . WinAccountAdministratorSid ) ) ; 
 - 	 } 
 + } 
 	 
 - 	 public void testEventLogIteratorForwards ( ) { 
 - 	 	 EventLogIterator iter = new EventLogIterator ( " Application " ) ; 
 - 	 	 try { 
 - 	 	 	 int max = 100 ; 
 - 	 	 	 int lastId = 0 ; 
 - 	 	 	 while ( iter . hasNext ( ) ) { 
 - 	 	 	 	 EventLogRecord record = iter . next ( ) ; 
 - 	 	 	 	 assertTrue ( record . getRecordNumber ( ) > lastId ) ; 
 - 	 	 	 	 lastId = record . getRecordNumber ( ) ; 
 - 	 	 	 	 assertNotNull ( record . getType ( ) . name ( ) ) ; 
 - 	 	 	 	 assertNotNull ( record . getSource ( ) ) ; 
 - 	 	 	 	 if ( record . getRecord ( ) . DataLength . intValue ( ) > 0 ) { 
 - 	 	 	 	 	 assertEquals ( record . getData ( ) . length , 
 - 	 	 	 	 	 	 	 record . getRecord ( ) . DataLength . intValue ( ) ) ; 
 - 	 	 	 	 } else { 
 - 	 	 	 	 	 assertNull ( record . getData ( ) ) ; 
 - 	 	 	 	 } 
 - 	 	 	 	 if ( record . getRecord ( ) . NumStrings . intValue ( ) > 0 ) { 
 - 	 	 	 	 	 assertEquals ( record . getStrings ( ) . length , 
 - 	 	 	 	 	 	 	 record . getRecord ( ) . NumStrings . intValue ( ) ) ; 
 - 	 	 	 	 } else { 
 - 	 	 	 	 	 assertNull ( record . getStrings ( ) ) ; 
 - 	 	 	 	 } 
 + public void testEventLogIteratorForwards ( ) { 
 + EventLogIterator iter = new EventLogIterator ( " Application " ) ; 
 + try { 
 + int max = 100 ; 
 + int lastId = 0 ; 
 + while ( iter . hasNext ( ) ) { 
 + EventLogRecord record = iter . next ( ) ; 
 + assertTrue ( record . getRecordNumber ( ) > lastId ) ; 
 + lastId = record . getRecordNumber ( ) ; 
 + assertNotNull ( record . getType ( ) . name ( ) ) ; 
 + assertNotNull ( record . getSource ( ) ) ; 
 + if ( record . getRecord ( ) . DataLength . intValue ( ) > 0 ) { 
 + assertEquals ( record . getData ( ) . length , 
 + record . getRecord ( ) . DataLength . intValue ( ) ) ; 
 + } else { 
 + assertNull ( record . getData ( ) ) ; 
 + } 
 + if ( record . getRecord ( ) . NumStrings . intValue ( ) > 0 ) { 
 + assertEquals ( record . getStrings ( ) . length , 
 + record . getRecord ( ) . NumStrings . intValue ( ) ) ; 
 + } else { 
 + assertNull ( record . getStrings ( ) ) ; 
 + } 
 	 	 	 	 
 - 	 	 	 	 if ( max - - < = 0 ) { 
 - 	 	 	 	 	 break ; / / shorten test 
 - 	 	 	 	 } 
 - 	 	 	 	 / * 
 - 	 	 	 	 System . out . println ( record . getRecordNumber ( ) 
 - 	 	 	 	 	 	 + " : Event ID : " + record . getEventId ( ) 
 - 	 	 	 	 	 	 + " , Event Type : " + record . getType ( ) 
 - 	 	 	 	 	 	 + " , Event Source : " + record . getSource ( ) ) ; 
 - 	 	 	 	 	 	 * / 
 - 	 	 	 } 
 - 	 	 } finally { 
 - 	 	 	 iter . close ( ) ; 
 - 	 	 } 
 - 	 } 
 + if ( max - - < = 0 ) { 
 + break ; / / shorten test 
 + } 
 + / * 
 + System . out . println ( record . getRecordNumber ( ) 
 + + " : Event ID : " + record . getEventId ( ) 
 + + " , Event Type : " + record . getType ( ) 
 + + " , Event Source : " + record . getSource ( ) ) ; 
 + * / 
 + } 
 + } finally { 
 + iter . close ( ) ; 
 + } 
 + } 
 	 
 - 	 public void testEventLogIteratorBackwards ( ) { 
 - 	 	 EventLogIterator iter = new EventLogIterator ( null , 
 - 	 	 	 	 " Application " , WinNT . EVENTLOG _ BACKWARDS _ READ ) ; 
 - 	 	 try { 
 - 	 	 	 int max = 100 ; 
 - 	 	 	 int lastId = - 1 ; 
 - 	 	 	 while ( iter . hasNext ( ) ) { 
 - 	 	 	 	 EventLogRecord record = iter . next ( ) ; 
 - 	 	 	 	 / * 
 - 	 	 	 	 System . out . println ( record . getRecordNumber ( ) 
 - 	 	 	 	 	 	 + " : Event ID : " + record . getEventId ( ) 
 - 	 	 	 	 	 	 + " , Event Type : " + record . getType ( ) 
 - 	 	 	 	 	 	 + " , Event Source : " + record . getSource ( ) ) ; 
 - 	 	 	 	 	 	 * / 
 - 	 	 	 	 assertTrue ( record . getRecordNumber ( ) < lastId | | lastId = = - 1 ) ; 
 - 	 	 	 	 lastId = record . getRecordNumber ( ) ; 
 - 	 	 	 	 if ( max - - < = 0 ) { 
 - 	 	 	 	 	 break ; / / shorten test 
 - 	 	 	 	 } 
 - 	 	 	 } 
 - 	 	 } finally { 
 - 	 	 	 iter . close ( ) ; 
 - 	 	 } 
 - 	 } 
 + public void testEventLogIteratorBackwards ( ) { 
 + EventLogIterator iter = new EventLogIterator ( null , 
 + " Application " , WinNT . EVENTLOG _ BACKWARDS _ READ ) ; 
 + try { 
 + int max = 100 ; 
 + int lastId = - 1 ; 
 + while ( iter . hasNext ( ) ) { 
 + EventLogRecord record = iter . next ( ) ; 
 + / * 
 + System . out . println ( record . getRecordNumber ( ) 
 + + " : Event ID : " + record . getEventId ( ) 
 + + " , Event Type : " + record . getType ( ) 
 + + " , Event Source : " + record . getSource ( ) ) ; 
 + * / 
 + assertTrue ( record . getRecordNumber ( ) < lastId | | lastId = = - 1 ) ; 
 + lastId = record . getRecordNumber ( ) ; 
 + if ( max - - < = 0 ) { 
 + break ; / / shorten test 
 + } 
 + } 
 + } finally { 
 + iter . close ( ) ; 
 + } 
 + } 
 	 
 - 	 public void testGetEnvironmentBlock ( ) { 
 - 	 	 String expected = " KEY = value \ 0 " 
 - 	 	 	 	 + " KEY _ EMPTY = \ 0 " 
 - 	 	 	 	 + " KEY _ NUMBER = 2 \ 0 " 
 - 	 	 	 	 + " \ 0 " ; 
 + public void testGetEnvironmentBlock ( ) { 
 + String expected = " KEY = value \ 0 " 
 + + " KEY _ EMPTY = \ 0 " 
 + + " KEY _ NUMBER = 2 \ 0 " 
 + + " \ 0 " ; 
 
 - 	 	 / / Order is important to kept checking result simple 
 - 	 	 Map < String , String > mockEnvironment = new TreeMap < String , String > ( ) ; 
 - 	 	 mockEnvironment . put ( " KEY " , " value " ) ; 
 - 	 	 mockEnvironment . put ( " KEY _ EMPTY " , " " ) ; 
 - 	 	 mockEnvironment . put ( " KEY _ NUMBER " , " 2 " ) ; 
 - 	 	 mockEnvironment . put ( " KEY _ NULL " , null ) ; 	 	 
 + / / Order is important to kept checking result simple 
 + Map < String , String > mockEnvironment = new TreeMap < String , String > ( ) ; 
 + mockEnvironment . put ( " KEY " , " value " ) ; 
 + mockEnvironment . put ( " KEY _ EMPTY " , " " ) ; 
 + mockEnvironment . put ( " KEY _ NUMBER " , " 2 " ) ; 
 + mockEnvironment . put ( " KEY _ NULL " , null ) ; 	 	 
 
 - 	 	 String block = Advapi32Util . getEnvironmentBlock ( mockEnvironment ) ; 
 - 	 	 assertEquals ( " Environment block must comprise key = value pairs separated by NUL characters " , expected , block ) ; 
 - 	 } 
 + String block = Advapi32Util . getEnvironmentBlock ( mockEnvironment ) ; 
 + assertEquals ( " Environment block must comprise key = value pairs separated by NUL characters " , expected , block ) ; 
 + } 
 } 
 -

NEAREST DIFF:
diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 index 978578b . . 8766039 100644 
 - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 @ @ - 750 , 9 + 750 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param hKey 
 	 * Parent key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetIntValue ( HKEY hKey , String name , int value ) { 
 byte [ ] data = new byte [ 4 ] ; 
 @ @ - 773 , 9 + 773 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetIntValue ( HKEY root , String keyPath , String name , int value ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 @ @ - 798 , 9 + 798 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param hKey 
 	 * Parent key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetStringValue ( HKEY hKey , String name , String value ) { 
 	 char [ ] data = Native . toCharArray ( value ) ; 
 @ @ - 818 , 9 + 818 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetStringValue ( HKEY root , String keyPath , String name , String value ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 @ @ - 843 , 9 + 843 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param hKey 
 	 * Parent key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetExpandableStringValue ( HKEY hKey , String name , String value ) { 
 	 char [ ] data = Native . toCharArray ( value ) ; 
 @ @ - 863 , 9 + 863 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Value to write to registry . 
 	 * / 
 	 public static void registrySetExpandableStringValue ( HKEY root , String keyPath , String name , String value ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 @ @ - 889 , 8 + 889 , 8 @ @ public abstract class Advapi32Util { 
 	 * Parent key . 
 	 * @ param name 
 	 * Name . 
 - 	 * @ param value 
 - 	 * Value . 
 + 	 * @ param arr 
 + 	 * Array of strings to write to registry . 
 	 * / 
 	 public static void registrySetStringArray ( HKEY hKey , String name , String [ ] arr ) { 
 	 	 int size = 0 ; 
 @ @ - 922 , 18 + 922 , 18 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 - 	 * @ param value 
 - 	 * Value . 
 + 	 * Value name . 
 + 	 * @ param arr 
 + 	 * Array of strings to write to registry . 
 	 * / 
 - 	 public static void registrySetStringArray ( HKEY root , String keyPath , String name , String [ ] value ) { 
 + 	 public static void registrySetStringArray ( HKEY root , String keyPath , String name , String [ ] arr ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 	 	 int rc = Advapi32 . INSTANCE . RegOpenKeyEx ( root , keyPath , 0 , WinNT . KEY _ READ | WinNT . KEY _ WRITE , phkKey ) ; 
 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { 
 	 	 	 throw new Win32Exception ( rc ) ; 
 	 	 } 
 	 	 try { 
 - 	 	 	 registrySetStringArray ( phkKey . getValue ( ) , name , value ) ; 
 + 	 	 	 registrySetStringArray ( phkKey . getValue ( ) , name , arr ) ; 
 	 	 } finally { 
 	 	 	 rc = Advapi32 . INSTANCE . RegCloseKey ( phkKey . getValue ( ) ) ; 
 	 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { 
 @ @ - 947 , 9 + 947 , 9 @ @ public abstract class Advapi32Util { 
 	 * @ param hKey 
 	 * Parent key . 
 	 * @ param name 
 - 	 * Name . 
 - 	 * @ param value 
 - 	 * Value . 
 + 	 * Value name . 
 + 	 * @ param data 
 + 	 * Data to write to registry . 
 	 * / 
 	 public static void registrySetBinaryValue ( HKEY hKey , String name , byte [ ] data ) { 
 	 	 int rc = Advapi32 . INSTANCE . RegSetValueEx ( hKey , name , 0 , WinNT . REG _ BINARY , data , data . length ) ; 
 @ @ - 965 , 18 + 965 , 18 @ @ public abstract class Advapi32Util { 
 	 * @ param keyPath 
 	 * Path to an existing registry key . 
 	 * @ param name 
 - 	 * Name . 
 + 	 * Value name . 
 	 * @ param value 
 - 	 * Value . 
 + 	 * Data to write to registry . 
 	 * / 
 - 	 public static void registrySetBinaryValue ( HKEY root , String keyPath , String name , byte [ ] value ) { 
 + 	 public static void registrySetBinaryValue ( HKEY root , String keyPath , String name , byte [ ] data ) { 
 	 	 HKEYByReference phkKey = new HKEYByReference ( ) ; 
 	 	 int rc = Advapi32 . INSTANCE . RegOpenKeyEx ( root , keyPath , 0 , WinNT . KEY _ READ | WinNT . KEY _ WRITE , phkKey ) ; 
 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { 
 	 	 	 throw new Win32Exception ( rc ) ; 
 	 	 } 
 	 	 try { 
 - 	 	 	 registrySetBinaryValue ( phkKey . getValue ( ) , name , value ) ; 
 + 	 	 	 registrySetBinaryValue ( phkKey . getValue ( ) , name , data ) ; 
 	 	 } finally { 
 	 	 	 rc = Advapi32 . INSTANCE . RegCloseKey ( phkKey . getValue ( ) ) ; 
 	 	 	 if ( rc ! = W32Errors . ERROR _ SUCCESS ) { 
 diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 index 83bc754 . . cebfb96 100644 
 - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 @ @ - 24 , 11 + 24 , 20 @ @ import com . sun . jna . ptr . IntByReference ; 
 * / 
 public class W32Service { 
 	 SC _ HANDLE _ serviceHandle = null ; 
 - 	 
 + 
 + 	 / * * 
 + 	 * Win32 Service 
 + 	 * @ param serviceHandle 
 + 	 * A handle to the service . This handle is returned by the CreateService or OpenService 
 + 	 * function , and it must have the SERVICE _ QUERY _ STATUS access right . 
 + 	 * / 
 	 public W32Service ( SC _ HANDLE serviceHandle ) { 
 	 	 _ serviceHandle = serviceHandle ; 
 	 } 
 	 
 + 	 / * * 
 + 	 * Close service . 
 + 	 * / 
 	 public void close ( ) { 
 	 	 if ( _ serviceHandle ! = null ) { 
 	 	 	 if ( ! Advapi32 . INSTANCE . CloseServiceHandle ( _ serviceHandle ) ) { 
 @ @ - 40 , 12 + 49 , 8 @ @ public class W32Service { 
 	 
 	 / * * 
 	 * Retrieves the current status of the specified service based on the specified information level . 
 - 	 * @ param serviceHandle 
 - 	 * A handle to the service . 
 - 	 * This handle is returned by the CreateService or OpenService function , and 
 - 	 * it must have the SERVICE _ QUERY _ STATUS access right . 
 - 	 * @ return Service status information 
 - 	 * @ throws Win32Exception 
 + 	 * @ return 
 + 	 * Service status information 
 	 * / 
 	 public SERVICE _ STATUS _ PROCESS queryStatus ( ) { 
 	 	 IntByReference size = new IntByReference ( ) ; 
 @ @ - 77 , 6 + 82 , 9 @ @ public class W32Service { 
 	 	 } 
 	 } 
 	 
 + 	 / * * 
 + 	 * Stop service . 
 + 	 * / 
 	 public void stopService ( ) { 
 	 	 waitForNonPendingState ( ) ; 
 	 	 / / If the service is already stopped - return 
 @ @ - 92 , 7 + 100 , 10 @ @ public class W32Service { 
 	 	 	 throw new RuntimeException ( " Unable to stop the service " ) ; 
 	 	 } 
 	 } 
 - 	 
 + 
 + 	 / * * 
 + 	 * Continue service . 
 + 	 * / 
 	 public void continueService ( ) { 
 	 	 waitForNonPendingState ( ) ; 
 	 	 / / If the service is already stopped - return 
 @ @ - 109 , 6 + 120 , 9 @ @ public class W32Service { 
 	 	 } 
 	 } 
 	 
 + 	 / * * 
 + 	 * Pause service . 
 + 	 * / 
 	 public void pauseService ( ) { 
 	 	 waitForNonPendingState ( ) ; 
 	 	 / / If the service is already paused - return 
 @ @ - 126 , 7 + 140 , 7 @ @ public class W32Service { 
 	 } 
 
 / * * 
 - * This call waits for the state to change to something other than a pending state 
 + * Wait for the state to change to something other than a pending state . 
 * / 
 	 public void waitForNonPendingState ( ) { 
 
 @ @ - 137 , 18 + 151 , 18 @ @ public class W32Service { 
 
 	 	 while ( isPendingState ( status . dwCurrentState ) ) { 
 
 - 	 	 	 / / If the checkpoint advanced , start new tick count 
 + 	 	 	 / / if the checkpoint advanced , start new tick count 
 	 	 	 if ( status . dwCheckPoint > previousCheckPoint ) { 
 	 	 	 	 previousCheckPoint = status . dwCheckPoint ; 
 	 	 	 	 checkpointStartTickCount = Kernel32 . INSTANCE . GetTickCount ( ) ; 
 	 	 	 } 	 	 	 
 
 - 	 	 	 / / If the time that passed is greater than the wait hint - throw timeout exception 
 + 	 	 	 / / if the time that passed is greater than the wait hint - throw timeout exception 
 	 	 	 if ( Kernel32 . INSTANCE . GetTickCount ( ) - checkpointStartTickCount > status . dwWaitHint ) { 
 	 	 	 	 throw new RuntimeException ( " Timeout waiting for service to change to a non - pending state . " ) ; 
 	 	 	 } 
 
 - 	 	 	 / / Do not wait longer than the wait hint . A good interval is 
 + 	 	 	 / / do not wait longer than the wait hint . A good interval is 
 	 	 	 / / one - tenth the wait hint , but no less than 1 second and no 
 	 	 	 / / more than 10 seconds . 
 
 @ @ - 165 , 7 + 179 , 6 @ @ public class W32Service { 
 	 	 	 	 throw new RuntimeException ( e ) ; 
 	 	 	 } 
 
 - 	 	 	 / / Check the status again 
 	 	 	 status = queryStatus ( ) ; 
 	 	 } 
 	 }
