BLEU SCORE: 1.0

TEST MSG: WinXP Compatibility for PdhUtil # PdhLookupPerfNameByIndex
GENERATED MSG: WinXP Compatibility for PdhUtil # PdhLookupPerfNameByIndex

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index a3413c7 . . 8f650c1 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 10 , 7 + 10 , 7 @ @ Features <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> - * [ # 1052 ] ( https : / / github . com / java - native - access / jna / issues / 1052 ) : WinXP compatibility for ` c . s . j . p . win32 . PdhUtil ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> + * [ # 1052 ] ( https : / / github . com / java - native - access / jna / issues / 1052 ) , [ # 1053 ] ( https : / / github . com / java - native - access / jna / issues / 1053 ) : WinXP compatibility for ` c . s . j . p . win32 . PdhUtil ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> <nl> Release 5 . 2 . 0 <nl> = = = = = = = = = = = = = <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / PdhUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / PdhUtil . java <nl> index 28546c5 . . 4de9d57 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / PdhUtil . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / PdhUtil . java <nl> @ @ - 62 , 25 + 62 , 33 @ @ public abstract class PdhUtil { <nl> / / Call once with null buffer to get required buffer size <nl> DWORDByReference pcchNameBufferSize = new DWORDByReference ( new DWORD ( 0 ) ) ; <nl> int result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , null , pcchNameBufferSize ) ; <nl> - / / Windows XP requires a non - null buffer <nl> - if ( result = = PdhMsg . PDH _ INVALID _ ARGUMENT ) { <nl> - pcchNameBufferSize = new DWORDByReference ( new DWORD ( 1 ) ) ; <nl> - result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , new Memory ( 1 ) , <nl> - pcchNameBufferSize ) ; <nl> - } <nl> - if ( result ! = WinError . ERROR _ SUCCESS & & result ! = Pdh . PDH _ MORE _ DATA & & result ! = Pdh . PDH _ INSUFFICIENT _ BUFFER ) { <nl> - throw new PdhException ( result ) ; <nl> - } <nl> - <nl> - / / Can ' t allocate 0 memory <nl> - if ( pcchNameBufferSize . getValue ( ) . intValue ( ) < 1 ) { <nl> - return " " ; <nl> + Memory mem = null ; <nl> + / / Windows XP requires a non - null buffer and nonzero buffer size and <nl> + / / will return PDH _ INVALID _ ARGUMENT . <nl> + if ( result ! = PdhMsg . PDH _ INVALID _ ARGUMENT ) { <nl> + / / Vista + branch : use returned buffer size for second query <nl> + if ( result ! = WinError . ERROR _ SUCCESS & & result ! = Pdh . PDH _ MORE _ DATA ) { <nl> + throw new PdhException ( result ) ; <nl> + } <nl> + / / Can ' t allocate 0 memory <nl> + if ( pcchNameBufferSize . getValue ( ) . intValue ( ) < 1 ) { <nl> + return " " ; <nl> + } <nl> + / / Allocate buffer and call again <nl> + mem = new Memory ( pcchNameBufferSize . getValue ( ) . intValue ( ) * CHAR _ TO _ BYTES ) ; <nl> + result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , mem , pcchNameBufferSize ) ; <nl> + } else { <nl> + / / XP branch : try increasing buffer sizes until successful <nl> + for ( int bufferSize = 32 ; bufferSize < = Pdh . PDH _ MAX _ COUNTER _ NAME ; bufferSize * = 2 ) { <nl> + pcchNameBufferSize = new DWORDByReference ( new DWORD ( bufferSize ) ) ; <nl> + mem = new Memory ( bufferSize * CHAR _ TO _ BYTES ) ; <nl> + result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , mem , pcchNameBufferSize ) ; <nl> + if ( result ! = PdhMsg . PDH _ INVALID _ ARGUMENT & & result ! = PdhMsg . PDH _ INSUFFICIENT _ BUFFER ) { <nl> + break ; <nl> + } <nl> + } <nl> } <nl> - / / Allocate buffer and call again <nl> - Memory mem = new Memory ( pcchNameBufferSize . getValue ( ) . intValue ( ) * CHAR _ TO _ BYTES ) ; <nl> - result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , mem , pcchNameBufferSize ) ; <nl> - <nl> - if ( result ! = WinError . ERROR _ SUCCESS ) { <nl> + if ( result ! = WinError . ERROR _ SUCCESS ) { <nl> throw new PdhException ( result ) ; <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index a3413c7 . . 8f650c1 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 10 , 7 + 10 , 7 @ @ Features 
 
 Bug Fixes 
 - - - - - - - - - 
 - * [ # 1052 ] ( https : / / github . com / java - native - access / jna / issues / 1052 ) : WinXP compatibility for ` c . s . j . p . win32 . PdhUtil ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 + * [ # 1052 ] ( https : / / github . com / java - native - access / jna / issues / 1052 ) , [ # 1053 ] ( https : / / github . com / java - native - access / jna / issues / 1053 ) : WinXP compatibility for ` c . s . j . p . win32 . PdhUtil ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 
 Release 5 . 2 . 0 
 = = = = = = = = = = = = = 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / PdhUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / PdhUtil . java 
 index 28546c5 . . 4de9d57 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / PdhUtil . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / PdhUtil . java 
 @ @ - 62 , 25 + 62 , 33 @ @ public abstract class PdhUtil { 
 / / Call once with null buffer to get required buffer size 
 DWORDByReference pcchNameBufferSize = new DWORDByReference ( new DWORD ( 0 ) ) ; 
 int result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , null , pcchNameBufferSize ) ; 
 - / / Windows XP requires a non - null buffer 
 - if ( result = = PdhMsg . PDH _ INVALID _ ARGUMENT ) { 
 - pcchNameBufferSize = new DWORDByReference ( new DWORD ( 1 ) ) ; 
 - result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , new Memory ( 1 ) , 
 - pcchNameBufferSize ) ; 
 - } 
 - if ( result ! = WinError . ERROR _ SUCCESS & & result ! = Pdh . PDH _ MORE _ DATA & & result ! = Pdh . PDH _ INSUFFICIENT _ BUFFER ) { 
 - throw new PdhException ( result ) ; 
 - } 
 - 
 - / / Can ' t allocate 0 memory 
 - if ( pcchNameBufferSize . getValue ( ) . intValue ( ) < 1 ) { 
 - return " " ; 
 + Memory mem = null ; 
 + / / Windows XP requires a non - null buffer and nonzero buffer size and 
 + / / will return PDH _ INVALID _ ARGUMENT . 
 + if ( result ! = PdhMsg . PDH _ INVALID _ ARGUMENT ) { 
 + / / Vista + branch : use returned buffer size for second query 
 + if ( result ! = WinError . ERROR _ SUCCESS & & result ! = Pdh . PDH _ MORE _ DATA ) { 
 + throw new PdhException ( result ) ; 
 + } 
 + / / Can ' t allocate 0 memory 
 + if ( pcchNameBufferSize . getValue ( ) . intValue ( ) < 1 ) { 
 + return " " ; 
 + } 
 + / / Allocate buffer and call again 
 + mem = new Memory ( pcchNameBufferSize . getValue ( ) . intValue ( ) * CHAR _ TO _ BYTES ) ; 
 + result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , mem , pcchNameBufferSize ) ; 
 + } else { 
 + / / XP branch : try increasing buffer sizes until successful 
 + for ( int bufferSize = 32 ; bufferSize < = Pdh . PDH _ MAX _ COUNTER _ NAME ; bufferSize * = 2 ) { 
 + pcchNameBufferSize = new DWORDByReference ( new DWORD ( bufferSize ) ) ; 
 + mem = new Memory ( bufferSize * CHAR _ TO _ BYTES ) ; 
 + result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , mem , pcchNameBufferSize ) ; 
 + if ( result ! = PdhMsg . PDH _ INVALID _ ARGUMENT & & result ! = PdhMsg . PDH _ INSUFFICIENT _ BUFFER ) { 
 + break ; 
 + } 
 + } 
 } 
 - / / Allocate buffer and call again 
 - Memory mem = new Memory ( pcchNameBufferSize . getValue ( ) . intValue ( ) * CHAR _ TO _ BYTES ) ; 
 - result = Pdh . INSTANCE . PdhLookupPerfNameByIndex ( szMachineName , dwNameIndex , mem , pcchNameBufferSize ) ; 
 - 
 - if ( result ! = WinError . ERROR _ SUCCESS ) { 
 + if ( result ! = WinError . ERROR _ SUCCESS ) { 
 throw new PdhException ( result ) ; 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
