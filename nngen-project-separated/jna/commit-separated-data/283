BLEU SCORE: 0.0114347838903095

TEST MSG: only extract values where we ' re returning a primitive type , otherwise return the java object
GENERATED MSG: properly propagate exceptions through native code

TEST DIFF (one line): diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index cfce635 . . 4a5969e 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 1138 , 33 + 1138 , 32 @ @ toNativeTypeMapped ( JNIEnv * env , jobject obj , void * valuep , size _ t size , jobject <nl> } <nl> } <nl> <nl> - static jboolean <nl> - is _ primitive ( JNIEnv * env , jobject converted ) { <nl> - return ( ( * env ) - > IsInstanceOf ( env , converted , classBoolean ) <nl> - | | ( * env ) - > IsInstanceOf ( env , converted , classByte ) <nl> - | | ( * env ) - > IsInstanceOf ( env , converted , classCharacter ) <nl> - | | ( * env ) - > IsInstanceOf ( env , converted , classShort ) <nl> - | | ( * env ) - > IsInstanceOf ( env , converted , classInteger ) <nl> - | | ( * env ) - > IsInstanceOf ( env , converted , classLong ) <nl> - | | ( * env ) - > IsInstanceOf ( env , converted , classFloat ) <nl> - | | ( * env ) - > IsInstanceOf ( env , converted , classDouble ) ) ; <nl> - } <nl> - <nl> static void <nl> - fromNativeTypeMapped ( JNIEnv * env , jobject from _ native , void * resp , ffi _ type * type , jclass java _ return _ class , void * result ) { <nl> - int jtype = get _ jtype _ from _ ffi _ type ( type ) ; <nl> - jobject value = new _ object ( env , ( char ) jtype , resp , JNI _ TRUE ) ; <nl> + fromNativeTypeMapped ( JNIEnv * env , jobject from _ native , <nl> + void * native _ return _ value , <nl> + ffi _ type * native _ return _ type , <nl> + jclass java _ return _ class , <nl> + void * result _ storage ) { <nl> + int jtype = get _ jtype _ from _ ffi _ type ( native _ return _ type ) ; <nl> + jobject value = new _ object ( env , ( char ) jtype , native _ return _ value , JNI _ TRUE ) ; <nl> if ( ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> jobject obj = ( * env ) - > CallStaticObjectMethod ( env , classNative , <nl> MID _ Native _ fromNativeTypeMapped , <nl> from _ native , value , java _ return _ class ) ; <nl> if ( ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> - / / Must extract primitive types <nl> - if ( is _ primitive ( env , obj ) ) { <nl> - extract _ value ( env , obj , result , type - > size , JNI _ TRUE ) ; <nl> + / / Convert objects into primitive types if the return class demands it <nl> + if ( ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveBoolean ) <nl> + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveByte ) <nl> + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveCharacter ) <nl> + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveShort ) <nl> + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveInteger ) <nl> + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveLong ) <nl> + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveFloat ) <nl> + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveDouble ) ) { <nl> + extract _ value ( env , obj , result _ storage , native _ return _ type - > size , JNI _ TRUE ) ; <nl> } <nl> else { <nl> - * ( jobject * ) result = obj ; <nl> + * ( jobject * ) result _ storage = obj ; <nl> } <nl> } <nl> } <nl> @ @ - 1456 , 6 + 1455 , 7 @ @ JNA _ init ( JNIEnv * env ) { <nl> return NULL ; <nl> } <nl> <nl> + / * * Copy value from the given Java object into the given storage buffer . * / <nl> void <nl> extract _ value ( JNIEnv * env , jobject value , void * resp , size _ t size , jboolean promote ) { <nl> if ( value = = NULL ) {
NEAREST DIFF (one line): diff - - git a / native / callback . c b / native / callback . c <nl> index 159354f . . 4394eb5 100644 <nl> - - - a / native / callback . c <nl> + + + b / native / callback . c <nl> @ @ - 132 , 6 + 132 , 9 @ @ create _ callback ( JNIEnv * env , jobject obj , jobject method , <nl> } <nl> cb - > arg _ jtypes [ i ] = ( char ) jtype ; <nl> cb - > java _ arg _ types [ i + 3 ] = cb - > arg _ types [ i ] = get _ ffi _ type ( env , cls , cb - > arg _ jtypes [ i ] ) ; <nl> + if ( ! cb - > java _ arg _ types [ i + 3 ] ) { <nl> + goto failure _ cleanup ; <nl> + } <nl> if ( cb - > flags [ i ] = = CVT _ NATIVE _ MAPPED <nl> | | cb - > flags [ i ] = = CVT _ POINTER _ TYPE <nl> | | cb - > flags [ i ] = = CVT _ INTEGER _ TYPE ) { <nl> @ @ - 147 , 6 + 150 , 9 @ @ create _ callback ( JNIEnv * env , jobject obj , jobject method , <nl> cb - > arg _ jtypes [ i ] = ( char ) jtype ; <nl> cb - > java _ arg _ types [ i + 3 ] = & ffi _ type _ pointer ; <nl> cb - > arg _ types [ i ] = get _ ffi _ type ( env , ncls , cb - > arg _ jtypes [ i ] ) ; <nl> + if ( ! cb - > arg _ types [ i ] ) { <nl> + goto failure _ cleanup ; <nl> + } <nl> } <nl> <nl> if ( cb - > arg _ types [ i ] - > type = = FFI _ TYPE _ FLOAT ) { <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index a99245a . . 3c0beae 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 836 , 13 + 836 , 17 @ @ newJavaStructure ( JNIEnv * env , void * data , jclass type , jboolean new _ memory ) <nl> volatile jobject obj = ( * env ) - > CallStaticObjectMethod ( env , classStructure , MID _ Structure _ newInstance , type ) ; <nl> if ( obj ! = NULL ) { <nl> ffi _ type * rtype = getStructureType ( env , obj ) ; <nl> - if ( new _ memory ) { <nl> - MEMCPY ( getStructureAddress ( env , obj ) , data , rtype - > size ) ; <nl> - } <nl> - else { <nl> - ( * env ) - > CallVoidMethod ( env , obj , MID _ Structure _ useMemory , newJavaPointer ( env , data ) ) ; <nl> + if ( rtype ) { <nl> + if ( new _ memory ) { <nl> + MEMCPY ( getStructureAddress ( env , obj ) , data , rtype - > size ) ; <nl> + } <nl> + else { <nl> + ( * env ) - > CallVoidMethod ( env , obj , MID _ Structure _ useMemory , newJavaPointer ( env , data ) ) ; <nl> + } <nl> + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> + ( * env ) - > CallVoidMethod ( env , obj , MID _ Structure _ read ) ; <nl> + } <nl> } <nl> - ( * env ) - > CallVoidMethod ( env , obj , MID _ Structure _ read ) ; <nl> } <nl> else { <nl> fprintf ( stderr , " JNA : failed to create structure \ n " ) ; <nl> @ @ - 1061 , 7 + 1065 , 9 @ @ void <nl> toNative ( JNIEnv * env , jobject obj , void * valuep , size _ t size , jboolean promote ) { <nl> if ( obj ! = NULL ) { <nl> jobject arg = ( * env ) - > CallObjectMethod ( env , obj , MID _ NativeMapped _ toNative ) ; <nl> - extract _ value ( env , arg , valuep , size , promote ) ; <nl> + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> + extract _ value ( env , arg , valuep , size , promote ) ; <nl> + } <nl> } <nl> else { <nl> MEMSET ( valuep , 0 , size ) ; <nl> @ @ - 1072 , 7 + 1078 , 9 @ @ static void <nl> toNativeTypeMapped ( JNIEnv * env , jobject obj , void * valuep , size _ t size , jobject to _ native ) { <nl> if ( obj ! = NULL ) { <nl> jobject arg = ( * env ) - > CallStaticObjectMethod ( env , classNative , MID _ Native _ toNativeTypeMapped , to _ native , obj ) ; <nl> - extract _ value ( env , arg , valuep , size , JNI _ FALSE ) ; <nl> + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> + extract _ value ( env , arg , valuep , size , JNI _ FALSE ) ; <nl> + } <nl> } <nl> else { <nl> MEMSET ( valuep , 0 , size ) ; <nl> @ @ - 1083 , 12 + 1091 , 16 @ @ static void <nl> fromNativeTypeMapped ( JNIEnv * env , jobject from _ native , void * resp , ffi _ type * type , jclass javaClass , void * result ) { <nl> int jtype = get _ jtype _ from _ ffi _ type ( type ) ; <nl> jobject value = new _ object ( env , ( char ) jtype , resp , JNI _ TRUE ) ; <nl> - jobject obj = ( * env ) - > CallStaticObjectMethod ( env , classNative , <nl> - MID _ Native _ fromNativeTypeMapped , <nl> - from _ native , value , javaClass ) ; <nl> - / / Must extract primitive types <nl> - if ( type - > type ! = FFI _ TYPE _ POINTER ) { <nl> - extract _ value ( env , obj , result , type - > size , JNI _ TRUE ) ; <nl> + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> + jobject obj = ( * env ) - > CallStaticObjectMethod ( env , classNative , <nl> + MID _ Native _ fromNativeTypeMapped , <nl> + from _ native , value , javaClass ) ; <nl> + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> + / / Must extract primitive types <nl> + if ( type - > type ! = FFI _ TYPE _ POINTER ) { <nl> + extract _ value ( env , obj , result , type - > size , JNI _ TRUE ) ; <nl> + } <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 1096 , 9 + 1108 , 12 @ @ jobject <nl> fromNative ( JNIEnv * env , jclass javaClass , ffi _ type * type , void * resp , jboolean promote ) { <nl> int jtype = get _ jtype _ from _ ffi _ type ( type ) ; <nl> jobject value = new _ object ( env , ( char ) jtype , resp , promote ) ; <nl> - return ( * env ) - > CallStaticObjectMethod ( env , classNative , <nl> - MID _ Native _ fromNative , <nl> - javaClass , value ) ; <nl> + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> + return ( * env ) - > CallStaticObjectMethod ( env , classNative , <nl> + MID _ Native _ fromNative , <nl> + javaClass , value ) ; <nl> + } <nl> + return NULL ; <nl> } <nl> <nl> <nl> @ @ - 1107 , 7 + 1122 , 9 @ @ getStructureType ( JNIEnv * env , jobject obj ) { <nl> jlong typeInfo = ( * env ) - > GetLongField ( env , obj , FID _ Structure _ typeInfo ) ; <nl> if ( ! typeInfo ) { <nl> ( * env ) - > CallObjectMethod ( env , obj , MID _ Structure _ getTypeInfo ) ; <nl> - typeInfo = ( * env ) - > GetLongField ( env , obj , FID _ Structure _ typeInfo ) ; <nl> + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> + typeInfo = ( * env ) - > GetLongField ( env , obj , FID _ Structure _ typeInfo ) ; <nl> + } <nl> } <nl> return ( ffi _ type * ) L2A ( typeInfo ) ; <nl> } <nl> @ @ - 1533 , 7 + 1550 , 10 @ @ get _ ffi _ type ( JNIEnv * env , jclass cls , char jtype ) { <nl> case ' s ' : { <nl> jobject s = ( * env ) - > CallStaticObjectMethod ( env , classStructure , <nl> MID _ Structure _ newInstance , cls ) ; <nl> - return getStructureType ( env , s ) ; <nl> + if ( s ) { <nl> + return getStructureType ( env , s ) ; <nl> + } <nl> + return NULL ; <nl> } <nl> case ' * ' : <nl> default : <nl> @ @ - 1782 , 7 + 1802 , 7 @ @ method _ handler ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { <nl> for ( i = 0 ; i < data - > cif . nargs ; i + + ) { <nl> switch ( data - > flags [ i ] ) { <nl> case CVT _ STRUCTURE : <nl> - if ( objects [ i ] ) { <nl> + if ( objects [ i ] & & ! ( * env ) - > ExceptionCheck ( env ) ) { <nl> ( * env ) - > CallVoidMethod ( env , objects [ i ] , MID _ Structure _ read ) ; <nl> } <nl> break ;

TEST DIFF:
diff - - git a / native / dispatch . c b / native / dispatch . c 
 index cfce635 . . 4a5969e 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 1138 , 33 + 1138 , 32 @ @ toNativeTypeMapped ( JNIEnv * env , jobject obj , void * valuep , size _ t size , jobject 
 } 
 } 
 
 - static jboolean 
 - is _ primitive ( JNIEnv * env , jobject converted ) { 
 - return ( ( * env ) - > IsInstanceOf ( env , converted , classBoolean ) 
 - | | ( * env ) - > IsInstanceOf ( env , converted , classByte ) 
 - | | ( * env ) - > IsInstanceOf ( env , converted , classCharacter ) 
 - | | ( * env ) - > IsInstanceOf ( env , converted , classShort ) 
 - | | ( * env ) - > IsInstanceOf ( env , converted , classInteger ) 
 - | | ( * env ) - > IsInstanceOf ( env , converted , classLong ) 
 - | | ( * env ) - > IsInstanceOf ( env , converted , classFloat ) 
 - | | ( * env ) - > IsInstanceOf ( env , converted , classDouble ) ) ; 
 - } 
 - 
 static void 
 - fromNativeTypeMapped ( JNIEnv * env , jobject from _ native , void * resp , ffi _ type * type , jclass java _ return _ class , void * result ) { 
 - int jtype = get _ jtype _ from _ ffi _ type ( type ) ; 
 - jobject value = new _ object ( env , ( char ) jtype , resp , JNI _ TRUE ) ; 
 + fromNativeTypeMapped ( JNIEnv * env , jobject from _ native , 
 + void * native _ return _ value , 
 + ffi _ type * native _ return _ type , 
 + jclass java _ return _ class , 
 + void * result _ storage ) { 
 + int jtype = get _ jtype _ from _ ffi _ type ( native _ return _ type ) ; 
 + jobject value = new _ object ( env , ( char ) jtype , native _ return _ value , JNI _ TRUE ) ; 
 if ( ! ( * env ) - > ExceptionCheck ( env ) ) { 
 jobject obj = ( * env ) - > CallStaticObjectMethod ( env , classNative , 
 MID _ Native _ fromNativeTypeMapped , 
 from _ native , value , java _ return _ class ) ; 
 if ( ! ( * env ) - > ExceptionCheck ( env ) ) { 
 - / / Must extract primitive types 
 - if ( is _ primitive ( env , obj ) ) { 
 - extract _ value ( env , obj , result , type - > size , JNI _ TRUE ) ; 
 + / / Convert objects into primitive types if the return class demands it 
 + if ( ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveBoolean ) 
 + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveByte ) 
 + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveCharacter ) 
 + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveShort ) 
 + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveInteger ) 
 + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveLong ) 
 + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveFloat ) 
 + | | ( * env ) - > IsSameObject ( env , java _ return _ class , classPrimitiveDouble ) ) { 
 + extract _ value ( env , obj , result _ storage , native _ return _ type - > size , JNI _ TRUE ) ; 
 } 
 else { 
 - * ( jobject * ) result = obj ; 
 + * ( jobject * ) result _ storage = obj ; 
 } 
 } 
 } 
 @ @ - 1456 , 6 + 1455 , 7 @ @ JNA _ init ( JNIEnv * env ) { 
 return NULL ; 
 } 
 
 + / * * Copy value from the given Java object into the given storage buffer . * / 
 void 
 extract _ value ( JNIEnv * env , jobject value , void * resp , size _ t size , jboolean promote ) { 
 if ( value = = NULL ) {

NEAREST DIFF:
diff - - git a / native / callback . c b / native / callback . c 
 index 159354f . . 4394eb5 100644 
 - - - a / native / callback . c 
 + + + b / native / callback . c 
 @ @ - 132 , 6 + 132 , 9 @ @ create _ callback ( JNIEnv * env , jobject obj , jobject method , 
 } 
 cb - > arg _ jtypes [ i ] = ( char ) jtype ; 
 cb - > java _ arg _ types [ i + 3 ] = cb - > arg _ types [ i ] = get _ ffi _ type ( env , cls , cb - > arg _ jtypes [ i ] ) ; 
 + if ( ! cb - > java _ arg _ types [ i + 3 ] ) { 
 + goto failure _ cleanup ; 
 + } 
 if ( cb - > flags [ i ] = = CVT _ NATIVE _ MAPPED 
 | | cb - > flags [ i ] = = CVT _ POINTER _ TYPE 
 | | cb - > flags [ i ] = = CVT _ INTEGER _ TYPE ) { 
 @ @ - 147 , 6 + 150 , 9 @ @ create _ callback ( JNIEnv * env , jobject obj , jobject method , 
 cb - > arg _ jtypes [ i ] = ( char ) jtype ; 
 cb - > java _ arg _ types [ i + 3 ] = & ffi _ type _ pointer ; 
 cb - > arg _ types [ i ] = get _ ffi _ type ( env , ncls , cb - > arg _ jtypes [ i ] ) ; 
 + if ( ! cb - > arg _ types [ i ] ) { 
 + goto failure _ cleanup ; 
 + } 
 } 
 
 if ( cb - > arg _ types [ i ] - > type = = FFI _ TYPE _ FLOAT ) { 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index a99245a . . 3c0beae 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 836 , 13 + 836 , 17 @ @ newJavaStructure ( JNIEnv * env , void * data , jclass type , jboolean new _ memory ) 
 volatile jobject obj = ( * env ) - > CallStaticObjectMethod ( env , classStructure , MID _ Structure _ newInstance , type ) ; 
 if ( obj ! = NULL ) { 
 ffi _ type * rtype = getStructureType ( env , obj ) ; 
 - if ( new _ memory ) { 
 - MEMCPY ( getStructureAddress ( env , obj ) , data , rtype - > size ) ; 
 - } 
 - else { 
 - ( * env ) - > CallVoidMethod ( env , obj , MID _ Structure _ useMemory , newJavaPointer ( env , data ) ) ; 
 + if ( rtype ) { 
 + if ( new _ memory ) { 
 + MEMCPY ( getStructureAddress ( env , obj ) , data , rtype - > size ) ; 
 + } 
 + else { 
 + ( * env ) - > CallVoidMethod ( env , obj , MID _ Structure _ useMemory , newJavaPointer ( env , data ) ) ; 
 + } 
 + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { 
 + ( * env ) - > CallVoidMethod ( env , obj , MID _ Structure _ read ) ; 
 + } 
 } 
 - ( * env ) - > CallVoidMethod ( env , obj , MID _ Structure _ read ) ; 
 } 
 else { 
 fprintf ( stderr , " JNA : failed to create structure \ n " ) ; 
 @ @ - 1061 , 7 + 1065 , 9 @ @ void 
 toNative ( JNIEnv * env , jobject obj , void * valuep , size _ t size , jboolean promote ) { 
 if ( obj ! = NULL ) { 
 jobject arg = ( * env ) - > CallObjectMethod ( env , obj , MID _ NativeMapped _ toNative ) ; 
 - extract _ value ( env , arg , valuep , size , promote ) ; 
 + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { 
 + extract _ value ( env , arg , valuep , size , promote ) ; 
 + } 
 } 
 else { 
 MEMSET ( valuep , 0 , size ) ; 
 @ @ - 1072 , 7 + 1078 , 9 @ @ static void 
 toNativeTypeMapped ( JNIEnv * env , jobject obj , void * valuep , size _ t size , jobject to _ native ) { 
 if ( obj ! = NULL ) { 
 jobject arg = ( * env ) - > CallStaticObjectMethod ( env , classNative , MID _ Native _ toNativeTypeMapped , to _ native , obj ) ; 
 - extract _ value ( env , arg , valuep , size , JNI _ FALSE ) ; 
 + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { 
 + extract _ value ( env , arg , valuep , size , JNI _ FALSE ) ; 
 + } 
 } 
 else { 
 MEMSET ( valuep , 0 , size ) ; 
 @ @ - 1083 , 12 + 1091 , 16 @ @ static void 
 fromNativeTypeMapped ( JNIEnv * env , jobject from _ native , void * resp , ffi _ type * type , jclass javaClass , void * result ) { 
 int jtype = get _ jtype _ from _ ffi _ type ( type ) ; 
 jobject value = new _ object ( env , ( char ) jtype , resp , JNI _ TRUE ) ; 
 - jobject obj = ( * env ) - > CallStaticObjectMethod ( env , classNative , 
 - MID _ Native _ fromNativeTypeMapped , 
 - from _ native , value , javaClass ) ; 
 - / / Must extract primitive types 
 - if ( type - > type ! = FFI _ TYPE _ POINTER ) { 
 - extract _ value ( env , obj , result , type - > size , JNI _ TRUE ) ; 
 + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { 
 + jobject obj = ( * env ) - > CallStaticObjectMethod ( env , classNative , 
 + MID _ Native _ fromNativeTypeMapped , 
 + from _ native , value , javaClass ) ; 
 + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { 
 + / / Must extract primitive types 
 + if ( type - > type ! = FFI _ TYPE _ POINTER ) { 
 + extract _ value ( env , obj , result , type - > size , JNI _ TRUE ) ; 
 + } 
 + } 
 } 
 } 
 
 @ @ - 1096 , 9 + 1108 , 12 @ @ jobject 
 fromNative ( JNIEnv * env , jclass javaClass , ffi _ type * type , void * resp , jboolean promote ) { 
 int jtype = get _ jtype _ from _ ffi _ type ( type ) ; 
 jobject value = new _ object ( env , ( char ) jtype , resp , promote ) ; 
 - return ( * env ) - > CallStaticObjectMethod ( env , classNative , 
 - MID _ Native _ fromNative , 
 - javaClass , value ) ; 
 + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { 
 + return ( * env ) - > CallStaticObjectMethod ( env , classNative , 
 + MID _ Native _ fromNative , 
 + javaClass , value ) ; 
 + } 
 + return NULL ; 
 } 
 
 
 @ @ - 1107 , 7 + 1122 , 9 @ @ getStructureType ( JNIEnv * env , jobject obj ) { 
 jlong typeInfo = ( * env ) - > GetLongField ( env , obj , FID _ Structure _ typeInfo ) ; 
 if ( ! typeInfo ) { 
 ( * env ) - > CallObjectMethod ( env , obj , MID _ Structure _ getTypeInfo ) ; 
 - typeInfo = ( * env ) - > GetLongField ( env , obj , FID _ Structure _ typeInfo ) ; 
 + if ( ! ( * env ) - > ExceptionCheck ( env ) ) { 
 + typeInfo = ( * env ) - > GetLongField ( env , obj , FID _ Structure _ typeInfo ) ; 
 + } 
 } 
 return ( ffi _ type * ) L2A ( typeInfo ) ; 
 } 
 @ @ - 1533 , 7 + 1550 , 10 @ @ get _ ffi _ type ( JNIEnv * env , jclass cls , char jtype ) { 
 case ' s ' : { 
 jobject s = ( * env ) - > CallStaticObjectMethod ( env , classStructure , 
 MID _ Structure _ newInstance , cls ) ; 
 - return getStructureType ( env , s ) ; 
 + if ( s ) { 
 + return getStructureType ( env , s ) ; 
 + } 
 + return NULL ; 
 } 
 case ' * ' : 
 default : 
 @ @ - 1782 , 7 + 1802 , 7 @ @ method _ handler ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { 
 for ( i = 0 ; i < data - > cif . nargs ; i + + ) { 
 switch ( data - > flags [ i ] ) { 
 case CVT _ STRUCTURE : 
 - if ( objects [ i ] ) { 
 + if ( objects [ i ] & & ! ( * env ) - > ExceptionCheck ( env ) ) { 
 ( * env ) - > CallVoidMethod ( env , objects [ i ] , MID _ Structure _ read ) ; 
 } 
 break ;
