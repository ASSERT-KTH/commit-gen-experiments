BLEU SCORE: 0.02931251013275449

TEST MSG: avoid static field initialization bug
GENERATED MSG: fix structure alignment issues on linux / ppc

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index cc33ecc . . 7efea6e 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 151 , 7 + 151 , 6 @ @ public final class Native implements Version { <nl> + " - set jna . boot . library . path to include the path to the version of the " + LS <nl> + " jnidispatch library included with the JNA jar file you are using " + LS ) ; <nl> } <nl> - setPreserveLastError ( " true " . equalsIgnoreCase ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; <nl> 	 MAX _ PADDING = Platform . isSPARC ( ) | | Platform . isWindows ( ) | | Platform . isARM ( ) <nl> | | Platform . isAIX ( ) | | Platform . isAndroid ( ) <nl> | | ( Platform . isPPC ( ) & & Platform . isLinux ( ) ) <nl> diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index a545847 . . e5faa21 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 122 , 7 + 122 , 6 @ @ public abstract class Structure { <nl> / * * Align to an 8 - byte boundary . * / <nl> / / public static final int ALIGN _ 8 = 6 ; <nl> <nl> - static final int MAX _ GNUC _ ALIGNMENT = Native . MAX _ PADDING ; <nl> protected static final int CALCULATE _ SIZE = - 1 ; <nl> static final Map layoutInfo = new WeakHashMap ( ) ; <nl> static final Map fieldOrder = new WeakHashMap ( ) ; <nl> @ @ - 1145 , 6 + 1144 , 9 @ @ public abstract class Structure { <nl> } <nl> <nl> / / Align fields as appropriate <nl> + if ( fieldAlignment = = 0 ) { <nl> + throw new Error ( " Field alignment is zero for field ' " + structField . name + " ' within " + getClass ( ) ) ; <nl> + } <nl> info . alignment = Math . max ( info . alignment , fieldAlignment ) ; <nl> if ( ( calculatedSize % fieldAlignment ) ! = 0 ) { <nl> calculatedSize + = fieldAlignment - ( calculatedSize % fieldAlignment ) ; <nl> @ @ - 1304 , 7 + 1306 , 7 @ @ public abstract class Structure { <nl> / / NOTE this is published ABI for 32 - bit gcc / linux / x86 , osx / x86 , <nl> / / and osx / ppc . osx / ppc special - cases the first element <nl> if ( ! isFirstElement | | ! ( Platform . isMac ( ) & & Platform . isPPC ( ) ) ) { <nl> - alignment = Math . min ( MAX _ GNUC _ ALIGNMENT , alignment ) ; <nl> + alignment = Math . min ( Native . MAX _ PADDING , alignment ) ; <nl> } <nl> if ( ! isFirstElement & & Platform . isAIX ( ) & & ( type = = double . class | | type = = Double . class ) ) { <nl> alignment = 4 ; <nl> diff - - git a / src / com / sun / jna / Union . java b / src / com / sun / jna / Union . java <nl> index d08b50d . . 2be0d19 100644 <nl> - - - a / src / com / sun / jna / Union . java <nl> + + + b / src / com / sun / jna / Union . java <nl> @ @ - 209 , 8 + 209 , 9 @ @ public abstract class Union extends Structure { <nl> return super . readField ( field ) ; <nl> } <nl> / / Field not accessible <nl> - / / TODO : read structure , to the extent possible ; need a " recursive " <nl> - / / flag to " read " to indicate we want to avoid pointer - based fields <nl> + / / TODO : read by - value structures , to the extent possible ; need a <nl> + / / " read cautiously " method to " read " to indicate we want to avoid <nl> + / / pointer - based fields <nl> return null ; <nl> } <nl> <nl> diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java <nl> index bf71373 . . 2e313db 100644 <nl> - - - a / test / com / sun / jna / StructureTest . java <nl> + + + b / test / com / sun / jna / StructureTest . java <nl> @ @ - 158 , 7 + 158 , 7 @ @ public class StructureTest extends TestCase { <nl> } <nl> Structure s = new TestStructure ( ) ; <nl> s . setAlignType ( Structure . ALIGN _ GNUC ) ; <nl> - final int SIZE = Structure . MAX _ GNUC _ ALIGNMENT = = 8 ? 32 : 28 ; <nl> + final int SIZE = Native . MAX _ PADDING = = 8 ? 32 : 28 ; <nl> assertEquals ( " Wrong structure size " , SIZE , s . size ( ) ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 438a1dc . . c85d7d2 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 3 , 10 + 3 , 12 @ @ Release 3 . 3 . x <nl> <nl> Features <nl> - - - - - - - - <nl> + * linux / ppc 32 - bit support <nl> <nl> Bug Fixes <nl> - - - - - - - - <nl> * Revise cleanup of in - use temporary files on win32 ( issue 6 ) <nl> + * Fix structure alignment issues on linux / ppc <nl> <nl> Release 3 . 3 . 0 <nl> = = = = = = = = = = = = = <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index b225452 . . ff5ba40 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 219 , 7 + 219 , 8 @ @ public class CallbacksTest extends TestCase { <nl> assertEquals ( " Callback lookups for same pointer should return same Callback object " , cb , cb2 ) ; <nl> } <nl> <nl> - public void testGCCallback ( ) throws Exception { <nl> + / / Fails on OpenJDK ( linux / ppc ) , probably finalize not run <nl> + public void testGCCallbackOnFinalize ( ) throws Exception { <nl> final boolean [ ] called = { false } ; <nl> TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { <nl> public void callback ( ) { <nl> @ @ - 242 , 6 + 243 , 7 @ @ public class CallbacksTest extends TestCase { <nl> for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | refs . containsValue ( ref ) ) ; + + i ) { <nl> try { <nl> Thread . sleep ( 10 ) ; / / Give the GC a chance to run <nl> + System . gc ( ) ; <nl> } finally { } <nl> } <nl> assertNull ( " Callback not GC ' d " , ref . get ( ) ) ; <nl> diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java <nl> index 7f985a4 . . 93b4214 100644 <nl> - - - a / test / com / sun / jna / JNAUnloadTest . java <nl> + + + b / test / com / sun / jna / JNAUnloadTest . java <nl> @ @ - 95 , 7 + 95 , 7 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> <nl> - / / Fails under clover <nl> + / / Fails under clover and OpenJDK ( linux / ppc ) <nl> public void testUnload ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( false ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> @ @ - 136 , 8 + 136 , 9 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> try { <nl> - if ( loader = = null ) <nl> + if ( loader = = null ) { <nl> fail ( " Native library not unloaded : " + throwable . getMessage ( ) ) ; <nl> + } <nl> } <nl> finally { <nl> loader = null ;

TEST DIFF:
diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index cc33ecc . . 7efea6e 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 151 , 7 + 151 , 6 @ @ public final class Native implements Version { 
 + " - set jna . boot . library . path to include the path to the version of the " + LS 
 + " jnidispatch library included with the JNA jar file you are using " + LS ) ; 
 } 
 - setPreserveLastError ( " true " . equalsIgnoreCase ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; 
 	 MAX _ PADDING = Platform . isSPARC ( ) | | Platform . isWindows ( ) | | Platform . isARM ( ) 
 | | Platform . isAIX ( ) | | Platform . isAndroid ( ) 
 | | ( Platform . isPPC ( ) & & Platform . isLinux ( ) ) 
 diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index a545847 . . e5faa21 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 122 , 7 + 122 , 6 @ @ public abstract class Structure { 
 / * * Align to an 8 - byte boundary . * / 
 / / public static final int ALIGN _ 8 = 6 ; 
 
 - static final int MAX _ GNUC _ ALIGNMENT = Native . MAX _ PADDING ; 
 protected static final int CALCULATE _ SIZE = - 1 ; 
 static final Map layoutInfo = new WeakHashMap ( ) ; 
 static final Map fieldOrder = new WeakHashMap ( ) ; 
 @ @ - 1145 , 6 + 1144 , 9 @ @ public abstract class Structure { 
 } 
 
 / / Align fields as appropriate 
 + if ( fieldAlignment = = 0 ) { 
 + throw new Error ( " Field alignment is zero for field ' " + structField . name + " ' within " + getClass ( ) ) ; 
 + } 
 info . alignment = Math . max ( info . alignment , fieldAlignment ) ; 
 if ( ( calculatedSize % fieldAlignment ) ! = 0 ) { 
 calculatedSize + = fieldAlignment - ( calculatedSize % fieldAlignment ) ; 
 @ @ - 1304 , 7 + 1306 , 7 @ @ public abstract class Structure { 
 / / NOTE this is published ABI for 32 - bit gcc / linux / x86 , osx / x86 , 
 / / and osx / ppc . osx / ppc special - cases the first element 
 if ( ! isFirstElement | | ! ( Platform . isMac ( ) & & Platform . isPPC ( ) ) ) { 
 - alignment = Math . min ( MAX _ GNUC _ ALIGNMENT , alignment ) ; 
 + alignment = Math . min ( Native . MAX _ PADDING , alignment ) ; 
 } 
 if ( ! isFirstElement & & Platform . isAIX ( ) & & ( type = = double . class | | type = = Double . class ) ) { 
 alignment = 4 ; 
 diff - - git a / src / com / sun / jna / Union . java b / src / com / sun / jna / Union . java 
 index d08b50d . . 2be0d19 100644 
 - - - a / src / com / sun / jna / Union . java 
 + + + b / src / com / sun / jna / Union . java 
 @ @ - 209 , 8 + 209 , 9 @ @ public abstract class Union extends Structure { 
 return super . readField ( field ) ; 
 } 
 / / Field not accessible 
 - / / TODO : read structure , to the extent possible ; need a " recursive " 
 - / / flag to " read " to indicate we want to avoid pointer - based fields 
 + / / TODO : read by - value structures , to the extent possible ; need a 
 + / / " read cautiously " method to " read " to indicate we want to avoid 
 + / / pointer - based fields 
 return null ; 
 } 
 
 diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java 
 index bf71373 . . 2e313db 100644 
 - - - a / test / com / sun / jna / StructureTest . java 
 + + + b / test / com / sun / jna / StructureTest . java 
 @ @ - 158 , 7 + 158 , 7 @ @ public class StructureTest extends TestCase { 
 } 
 Structure s = new TestStructure ( ) ; 
 s . setAlignType ( Structure . ALIGN _ GNUC ) ; 
 - final int SIZE = Structure . MAX _ GNUC _ ALIGNMENT = = 8 ? 32 : 28 ; 
 + final int SIZE = Native . MAX _ PADDING = = 8 ? 32 : 28 ; 
 assertEquals ( " Wrong structure size " , SIZE , s . size ( ) ) ; 
 } 


NEAREST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 438a1dc . . c85d7d2 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 3 , 10 + 3 , 12 @ @ Release 3 . 3 . x 
 
 Features 
 - - - - - - - - 
 + * linux / ppc 32 - bit support 
 
 Bug Fixes 
 - - - - - - - - 
 * Revise cleanup of in - use temporary files on win32 ( issue 6 ) 
 + * Fix structure alignment issues on linux / ppc 
 
 Release 3 . 3 . 0 
 = = = = = = = = = = = = = 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index b225452 . . ff5ba40 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 219 , 7 + 219 , 8 @ @ public class CallbacksTest extends TestCase { 
 assertEquals ( " Callback lookups for same pointer should return same Callback object " , cb , cb2 ) ; 
 } 
 
 - public void testGCCallback ( ) throws Exception { 
 + / / Fails on OpenJDK ( linux / ppc ) , probably finalize not run 
 + public void testGCCallbackOnFinalize ( ) throws Exception { 
 final boolean [ ] called = { false } ; 
 TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { 
 public void callback ( ) { 
 @ @ - 242 , 6 + 243 , 7 @ @ public class CallbacksTest extends TestCase { 
 for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | refs . containsValue ( ref ) ) ; + + i ) { 
 try { 
 Thread . sleep ( 10 ) ; / / Give the GC a chance to run 
 + System . gc ( ) ; 
 } finally { } 
 } 
 assertNull ( " Callback not GC ' d " , ref . get ( ) ) ; 
 diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java 
 index 7f985a4 . . 93b4214 100644 
 - - - a / test / com / sun / jna / JNAUnloadTest . java 
 + + + b / test / com / sun / jna / JNAUnloadTest . java 
 @ @ - 95 , 7 + 95 , 7 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 
 - / / Fails under clover 
 + / / Fails under clover and OpenJDK ( linux / ppc ) 
 public void testUnload ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( false ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 @ @ - 136 , 8 + 136 , 9 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 try { 
 - if ( loader = = null ) 
 + if ( loader = = null ) { 
 fail ( " Native library not unloaded : " + throwable . getMessage ( ) ) ; 
 + } 
 } 
 finally { 
 loader = null ;
