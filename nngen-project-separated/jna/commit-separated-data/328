BLEU SCORE: 0.002659170925018653

TEST MSG: PictFormat is typedefed from XID
GENERATED MSG: Update contrib / platform / src / com / sun / jna / platform / unix / X11 . java

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> index 1df00c3 . . f165741 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> @ @ - 284 , 10 + 284 , 9 @ @ public interface X11 extends Library { <nl> return Arrays . asList ( new String [ ] { " red " , " redMask " , " green " , " greenMask " , " blue " , " blueMask " , " alpha " , " alphaMask " } ) ; <nl> } <nl> } <nl> - class PictFormat extends IntegerType { <nl> + class PictFormat extends XID { <nl> private static final long serialVersionUID = 1L ; <nl> - public static final int SIZE = 4 ; <nl> - public PictFormat ( long value ) { super ( SIZE , value , true ) ; } <nl> + public PictFormat ( long value ) { super ( value ) ; } <nl> public PictFormat ( ) { this ( 0 ) ; } <nl> } <nl> class XRenderPictFormat extends Structure {
NEAREST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> index 190eef6 . . 2e557e0 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> @ @ - 11 , 6 + 11 , 7 @ @ import com . sun . jna . NativeLong ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . Union ; <nl> + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> import com . sun . jna . platform . win32 . WinDef . BYTE ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> @ @ - 23 , 6 + 24 , 7 @ @ import com . sun . jna . platform . win32 . WinDef . ULONGLONG ; <nl> import com . sun . jna . platform . win32 . WinDef . USHORT ; <nl> import com . sun . jna . platform . win32 . WinDef . WORD ; <nl> import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> + import com . sun . jna . ptr . ByReference ; <nl> import com . sun . jna . ptr . LongByReference ; <nl> <nl> / / TODO : Auto - generated Javadoc <nl> @ @ - 111 , 7 + 113 , 7 @ @ public interface OaIdl { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new excepinfo . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 121 , 7 + 123 , 7 @ @ public interface OaIdl { <nl> <nl> 	 	 / * <nl> 	 	 * ( non - Javadoc ) <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ see com . sun . jna . Structure # getFieldOrder ( ) <nl> 	 	 * / <nl> 	 	 @ Override <nl> @ @ - 134 , 6 + 136 , 7 @ @ public interface OaIdl { <nl> 	 } <nl> <nl> 	 public static class VARIANT _ BOOL extends IntegerType { <nl> + 	 	 public static final int SIZE = 8 ; <nl> <nl> 	 	 public VARIANT _ BOOL ( ) { <nl> 	 	 	 this ( 0 ) ; <nl> @ @ - 155 , 8 + 158 , 37 @ @ public interface OaIdl { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public static class DATE extends IntegerType { <nl> + 	 public class VARIANT _ BOOLByReference extends ByReference { <nl> + 	 	 public VARIANT _ BOOLByReference ( ) { <nl> + 	 	 	 this ( new VARIANT _ BOOL ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public VARIANT _ BOOLByReference ( VARIANT _ BOOL value ) { <nl> + 	 	 	 super ( VARIANT _ BOOL . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public void setValue ( VARIANT _ BOOL value ) { <nl> + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public VARIANT _ BOOL getValue ( ) { <nl> + 	 	 	 return new VARIANT _ BOOL ( getPointer ( ) . getLong ( 0 ) ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class _ VARIANT _ BOOLByReference extends VARIANT _ BOOLByReference { <nl> + 	 	 public _ VARIANT _ BOOLByReference ( ) { <nl> + 	 	 	 this ( new _ VARIANT _ BOOL ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public _ VARIANT _ BOOLByReference ( _ VARIANT _ BOOL value ) { <nl> + 	 	 	 super ( value ) ; <nl> + 	 	 } <nl> + 	 } <nl> <nl> + 	 public static class DATE extends IntegerType { <nl> + 	 	 public static final int SIZE = 8 ; <nl> 	 	 public DATE ( ) { <nl> 	 	 	 this ( 0 ) ; <nl> 	 	 } <nl> @ @ - 166 , 6 + 198 , 25 @ @ public interface OaIdl { <nl> 	 	 } <nl> 	 } <nl> <nl> + 	 public class DATEByReference extends ByReference { <nl> + 	 	 public DATEByReference ( ) { <nl> + 	 	 	 this ( new DATE ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public DATEByReference ( DATE value ) { <nl> + 	 	 	 super ( DATE . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public void setValue ( DATE value ) { <nl> + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public DATE getValue ( ) { <nl> + 	 	 	 return new DATE ( getPointer ( ) . getLong ( 0 ) ) ; <nl> + 	 	 } <nl> + 	 } <nl> + 	 <nl> 	 / * * <nl> 	 * The Class VARIANTARG . <nl> 	 * / <nl> @ @ - 225 , 7 + 276 , 7 @ @ public interface OaIdl { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new dispid . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OleAut32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / OleAut32Util . java <nl> index 3ad532b . . 6c58021 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OleAut32Util . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OleAut32Util . java <nl> @ @ - 49 , 7 + 49 , 6 @ @ public abstract class OleAut32Util { <nl> 	 	 long [ ] idx = new long [ 1 ] ; <nl> 	 	 idx [ 0 ] = index ; <nl> 	 	 VARIANT result = new VARIANT ( ) ; <nl> - 	 	 OleAut32 . INSTANCE . VariantInit ( result ) ; <nl> 	 	 HRESULT hr = OleAut32 . INSTANCE . SafeArrayGetElement ( array , idx , <nl> 	 	 	 	 result . getPointer ( ) ) ; <nl> 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> index 749ab70 . . a254c29 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> @ @ - 3 , 22 + 3 , 36 @ @ package com . sun . jna . platform . win32 ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> - import com . sun . jna . NativeLong ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . Union ; <nl> import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; <nl> import com . sun . jna . platform . win32 . OaIdl . DATE ; <nl> + import com . sun . jna . platform . win32 . OaIdl . DATEByReference ; <nl> import com . sun . jna . platform . win32 . OaIdl . DECIMAL ; <nl> import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; <nl> import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; <nl> - import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOL ; <nl> - import com . sun . jna . platform . win32 . Variant . VARIANT . _ VARIANT . _ _ VARIANT . BRECORD ; <nl> + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLByReference ; <nl> + import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOLByReference ; <nl> import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> + import com . sun . jna . platform . win32 . WinDef . BYTE ; <nl> import com . sun . jna . platform . win32 . WinDef . CHAR ; <nl> + import com . sun . jna . platform . win32 . WinDef . LONG ; <nl> + import com . sun . jna . platform . win32 . WinDef . LONGByReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . LONGLONG ; <nl> + import com . sun . jna . platform . win32 . WinDef . LONGLONGByReference ; <nl> import com . sun . jna . platform . win32 . WinDef . PVOID ; <nl> import com . sun . jna . platform . win32 . WinDef . SCODE ; <nl> + import com . sun . jna . platform . win32 . WinDef . SCODEbyReference ; <nl> import com . sun . jna . platform . win32 . WinDef . SHORT ; <nl> + import com . sun . jna . platform . win32 . WinDef . UINT ; <nl> + import com . sun . jna . platform . win32 . WinDef . UINTbyReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . ULONG ; <nl> + import com . sun . jna . platform . win32 . WinDef . ULONGByReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . ULONGLONG ; <nl> + import com . sun . jna . platform . win32 . WinDef . ULONGLONGByReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . USHORT ; <nl> + import com . sun . jna . platform . win32 . WinDef . USHORTbyReference ; <nl> import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> import com . sun . jna . platform . win32 . COM . IRecordInfo ; <nl> import com . sun . jna . platform . win32 . COM . IUnknown ; <nl> @ @ - 26 , 8 + 40 , 6 @ @ import com . sun . jna . ptr . ByteByReference ; <nl> import com . sun . jna . ptr . DoubleByReference ; <nl> import com . sun . jna . ptr . FloatByReference ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> - import com . sun . jna . ptr . LongByReference ; <nl> - import com . sun . jna . ptr . NativeLongByReference ; <nl> import com . sun . jna . ptr . ShortByReference ; <nl> <nl> public interface Variant { <nl> @ @ - 118 , 12 + 130 , 18 @ @ public interface Variant { <nl> 	 	 	 this . setValue ( VT _ BOOL , value ) ; <nl> 	 	 } <nl> <nl> - 	 	 public VARIANT ( int value ) { <nl> + 	 	 public VARIANT ( LONG value ) { <nl> 	 	 	 this ( ) ; <nl> 	 	 	 this . setValue ( VT _ I4 , value ) ; <nl> 	 	 } <nl> <nl> + 	 	 public VARIANT ( SHORT value ) { <nl> + 	 	 	 this ( ) ; <nl> + 	 	 	 this . setValue ( VT _ I2 , value ) ; <nl> + 	 	 } <nl> + <nl> 	 	 public int getVarType ( ) { <nl> + 	 	 	 this . read ( ) ; <nl> 	 	 	 return _ variant . vt ; <nl> 	 	 } <nl> <nl> @ @ - 133 , 9 + 151 , 12 @ @ public interface Variant { <nl> <nl> 	 	 public void setValue ( int vt , Object value ) { <nl> 	 	 	 switch ( vt ) { <nl> - 	 	 	 case VT _ I4 : <nl> + 	 	 	 case VT _ I2 : <nl> 	 	 	 	 this . _ variant . _ _ variant . writeField ( " iVal " , value ) ; <nl> 	 	 	 	 break ; <nl> + 	 	 	 case VT _ I4 : <nl> + 	 	 	 	 this . _ variant . _ _ variant . writeField ( " lVal " , value ) ; <nl> + 	 	 	 	 break ; <nl> 	 	 	 case VT _ BSTR : <nl> 	 	 	 	 this . _ variant . _ _ variant . writeField ( " bstrVal " , value ) ; <nl> 	 	 	 	 break ; <nl> @ @ - 158 , 6 + 179 , 7 @ @ public interface Variant { <nl> 	 	 } <nl> <nl> 	 	 public Object getValue ( ) { <nl> + 	 	 	 this . read ( ) ; <nl> 	 	 	 switch ( this . getVarType ( ) ) { <nl> 	 	 	 case VT _ I4 : <nl> 	 	 	 	 return this . _ variant . _ _ variant . readField ( " iVal " ) ; <nl> @ @ - 191 , 85 + 213 , 94 @ @ public interface Variant { <nl> 	 	 	 } <nl> <nl> 	 	 	 public static class _ _ VARIANT extends Union { <nl> - 	 	 	 	 public Long llVal ; <nl> - 	 	 	 	 public NativeLong lVal ; <nl> - 	 	 	 	 public Byte bVal ; <nl> - 	 	 	 	 public Integer iVal ; <nl> + 	 	 	 	 / / LONGLONG VT _ I8 <nl> + 	 	 	 	 public LONGLONG llVal ; <nl> + 	 	 	 	 / / LONG VT _ I4 <nl> + 	 	 	 	 public LONG lVal ; <nl> + 	 	 	 	 / / BYTE VT _ UI1 <nl> + 	 	 	 	 public BYTE bVal ; <nl> + 	 	 	 	 / / SHORT VT _ I2 <nl> + 	 	 	 	 public SHORT iVal ; <nl> + 	 	 	 	 / / FLOAT VT _ R4 <nl> 	 	 	 	 public Float fltVal ; <nl> + 	 	 	 	 / / DOUBLE VT _ R8 <nl> 	 	 	 	 public Double dblVal ; <nl> - 	 	 	 	 / / / C type : VARIANT _ BOOL <nl> + 	 	 	 	 / / VARIANT _ BOOL VT _ BOOL <nl> 	 	 	 	 public VARIANT _ BOOL boolVal ; <nl> - 	 	 	 	 / / / C type : _ VARIANT _ BOOL <nl> - 	 	 	 	 public _ VARIANT _ BOOL bool ; <nl> - 	 	 	 	 / / / C type : SCODE <nl> + 	 	 	 	 / / SCODE VT _ ERROR <nl> 	 	 	 	 public SCODE scode ; <nl> - 	 	 	 	 / / / C type : CY <nl> + 	 	 	 	 / / CY VT _ CY <nl> 	 	 	 	 public CURRENCY cyVal ; <nl> - 	 	 	 	 / / / C type : DATE <nl> + 	 	 	 	 / / DATE VT _ DATE <nl> 	 	 	 	 public DATE date ; <nl> - 	 	 	 	 / / / C type : BSTR <nl> + 	 	 	 	 / / BSTR VT _ BSTR <nl> 	 	 	 	 public BSTR bstrVal ; <nl> - 	 	 	 	 / / / C type : IUnknown * <nl> + 	 	 	 	 / / IUnknown * VT _ UNKNOWN <nl> 	 	 	 	 public IUnknown punkVal ; <nl> - 	 	 	 	 / / / C type : IDispatch * <nl> + 	 	 	 	 / / IDispatch * VT _ DISPATCH <nl> 	 	 	 	 public IDispatch pdispVal ; <nl> - 	 	 	 	 / / / C type : SAFEARRAY * <nl> - 	 	 	 	 public SAFEARRAY parray ; <nl> - 	 	 	 	 / / / C type : BYTE * <nl> + 	 	 	 	 / / SAFEARRAY * VT _ ARRAY <nl> + 	 	 	 	 public SAFEARRAY . ByReference parray ; <nl> + 	 	 	 	 / / BYTE * VT _ BYREF | VT _ UI1 <nl> 	 	 	 	 public ByteByReference pbVal ; <nl> - 	 	 	 	 / / / C type : short * <nl> + 	 	 	 	 / / SHORT * VT _ BYREF | VT _ I2 <nl> 	 	 	 	 public ShortByReference piVal ; <nl> - 	 	 	 	 / / / C type : long * <nl> - 	 	 	 	 public NativeLongByReference plVal ; <nl> - 	 	 	 	 / / / C type : LONGLONG * <nl> - 	 	 	 	 public LongByReference pllVal ; <nl> - 	 	 	 	 / / / C type : FLOAT * <nl> + 	 	 	 	 / / LONG * VT _ BYREF | VT _ I4 <nl> + 	 	 	 	 public LONGByReference plVal ; <nl> + 	 	 	 	 / / LONGLONG * VT _ BYREF | VT _ I8 <nl> + 	 	 	 	 public LONGLONGByReference pllVal ; <nl> + 	 	 	 	 / / FLOAT * VT _ BYREF | VT _ R4 <nl> 	 	 	 	 public FloatByReference pfltVal ; <nl> - 	 	 	 	 / / / C type : DOUBLE * <nl> + 	 	 	 	 / / DOUBLE * VT _ BYREF | VT _ R8 <nl> 	 	 	 	 public DoubleByReference pdblVal ; <nl> - 	 	 	 	 / / / C type : VARIANT _ BOOL * <nl> - 	 	 	 	 public VARIANT _ BOOL pboolVal ; <nl> - 	 	 	 	 / / / C type : _ VARIANT _ BOOL * <nl> - 	 	 	 	 public _ VARIANT _ BOOL pbool ; <nl> - 	 	 	 	 / / / C type : SCODE * <nl> - 	 	 	 	 public SCODE pscode ; <nl> - 	 	 	 	 / / / C type : CY * <nl> - 	 	 	 	 public CURRENCY pcyVal ; <nl> - 	 	 	 	 / / / C type : DATE * <nl> - 	 	 	 	 public DATE pdate ; <nl> - 	 	 	 	 / / / C type : BSTR * <nl> - 	 	 	 	 public BSTR pbstrVal ; <nl> - 	 	 	 	 / / / C type : IUnknown * * <nl> + 	 	 	 	 / / VARIANT _ BOOL * VT _ BYREF | VT _ BOOL <nl> + 	 	 	 	 public VARIANT _ BOOLByReference pboolVal ; <nl> + 	 	 	 	 / / VARIANT _ BOOL * VT _ BYREF | VT _ BOOL <nl> + 	 	 	 	 public _ VARIANT _ BOOLByReference pbool ; <nl> + 	 	 	 	 / / SCODE * VT _ BYREF | VT _ ERROR <nl> + 	 	 	 	 public SCODEbyReference pscode ; <nl> + 	 	 	 	 / / CY * VT _ BYREF | VT _ CY <nl> + 	 	 	 	 public CURRENCY . ByReference pcyVal ; <nl> + 	 	 	 	 / / DATE * VT _ BYREF | VT _ DATE <nl> + 	 	 	 	 public DATEByReference pdate ; <nl> + 	 	 	 	 / / BSTR * VT _ BYREF | VT _ BSTR <nl> + 	 	 	 	 public BSTR . ByReference pbstrVal ; <nl> + 	 	 	 	 / / IUnknown * * VT _ BYREF | VT _ UNKNOWN <nl> 	 	 	 	 public IUnknown . ByReference ppunkVal ; <nl> - 	 	 	 	 / / / C type : IDispatch * * <nl> + 	 	 	 	 / / IDispatch * * VT _ BYREF | VT _ DISPATCH <nl> 	 	 	 	 public IDispatch . ByReference ppdispVal ; <nl> - 	 	 	 	 / / / C type : SAFEARRAY * * <nl> + 	 	 	 	 / / SAFEARRAY * * VT _ BYREF | VT _ ARRAY <nl> 	 	 	 	 public SAFEARRAY . ByReference pparray ; <nl> - 	 	 	 	 / / / C type : VARIANT * <nl> + 	 	 	 	 / / VARIANT * VT _ BYREF | VT _ VARIANT <nl> 	 	 	 	 public VARIANT . ByReference pvarVal ; <nl> - 	 	 	 	 / / / C type : PVOID <nl> + 	 	 	 	 / / PVOID VT _ BYREF ( Generic ByRef ) <nl> 	 	 	 	 public PVOID byref ; <nl> - 	 	 	 	 / / / C type : CHAR <nl> + 	 	 	 	 / / CHAR VT _ I1 <nl> 	 	 	 	 public CHAR cVal ; <nl> - 	 	 	 	 public SHORT uiVal ; <nl> - 	 	 	 	 public NativeLong ulVal ; <nl> - 	 	 	 	 public Long ullVal ; <nl> + 	 	 	 	 / / USHORT VT _ UI2 <nl> + 	 	 	 	 public USHORT uiVal ; <nl> + 	 	 	 	 / / ULONG VT _ UI4 <nl> + 	 	 	 	 public ULONG ulVal ; <nl> + 	 	 	 	 / / ULONGLONG VT _ UI8 <nl> + 	 	 	 	 public ULONGLONG ullVal ; <nl> + 	 	 	 	 / / INT VT _ INT <nl> 	 	 	 	 public Integer intVal ; <nl> - 	 	 	 	 public Integer uintVal ; <nl> - 	 	 	 	 / / / C type : DECIMAL * <nl> + 	 	 	 	 / / UINT VT _ UINT <nl> + 	 	 	 	 public UINT uintVal ; <nl> + 	 	 	 	 / / DECIMAL * VT _ BYREF | VT _ DECIMAL <nl> 	 	 	 	 public DECIMAL . ByReference pdecVal ; <nl> - 	 	 	 	 / / / C type : CHAR * <nl> + 	 	 	 	 / / CHAR * VT _ BYREF | VT _ I1 <nl> 	 	 	 	 public CHAR . ByReference pcVal ; <nl> - 	 	 	 	 / / / C type : USHORT * <nl> - 	 	 	 	 public ShortByReference puiVal ; <nl> - 	 	 	 	 / / / C type : ULONG * <nl> - 	 	 	 	 public NativeLongByReference pulVal ; <nl> - 	 	 	 	 / / / C type : ULONGLONG * <nl> - 	 	 	 	 public LongByReference pullVal ; <nl> - 	 	 	 	 / / / C type : INT * <nl> + 	 	 	 	 / / USHORT * VT _ BYREF | VT _ UI2 <nl> + 	 	 	 	 public USHORTbyReference puiVal ; <nl> + 	 	 	 	 / / ULONG * VT _ BYREF | VT _ UI4 <nl> + 	 	 	 	 public ULONGByReference pulVal ; <nl> + 	 	 	 	 / / ULONGLONG * VT _ BYREF | VT _ UI8 <nl> + 	 	 	 	 public ULONGLONGByReference pullVal ; <nl> + 	 	 	 	 / / INT * VT _ BYREF | VT _ INT <nl> 	 	 	 	 public IntByReference pintVal ; <nl> - 	 	 	 	 / / / C type : UINT * <nl> - 	 	 	 	 public IntByReference puintVal ; <nl> + 	 	 	 	 / / UINT * VT _ BYREF | VT _ UINT <nl> + 	 	 	 	 public UINTbyReference puintVal ; <nl> <nl> 	 	 	 	 public static class BRECORD extends Structure { <nl> 	 	 	 	 	 public static class ByReference extends BRECORD implements <nl> @ @ - 277 , 6 + 308 , 7 @ @ public interface Variant { <nl> 	 	 	 	 	 } <nl> <nl> 	 	 	 	 	 public PVOID pvRecord ; <nl> + <nl> 	 	 	 	 	 public IRecordInfo pRecInfo ; <nl> <nl> 	 	 	 	 	 public BRECORD ( ) { <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> index 9e8b4fe . . acb0c28 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> @ @ - 16 , 14 + 16 , 12 @ @ <nl> package com . sun . jna . platform . win32 ; <nl> <nl> import com . sun . jna . Structure ; <nl> - import com . sun . jna . WString ; <nl> - import com . sun . jna . platform . win32 . OaIdl . DISPID ; <nl> - import com . sun . jna . platform . win32 . WinDef . USHORT ; <nl> + import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> import com . sun . jna . ptr . ByReference ; <nl> <nl> / * * <nl> * Constant defined in WTypes . h <nl> - * <nl> + * <nl> * @ author scott . palmer <nl> * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> @ @ - 58 , 12 + 56 , 16 @ @ public interface WTypes { <nl> 	 public static class BSTR extends ByReference implements <nl> 	 	 	 Structure . ByReference { <nl> <nl> + 	 	 public static class ByReference extends BSTR implements <nl> + 	 	 	 	 Structure . ByReference { <nl> + 	 	 } <nl> + <nl> 	 	 public BSTR ( ) { <nl> 	 	 	 this ( " null " ) ; <nl> 	 	 } <nl> <nl> 	 	 public BSTR ( String value ) { <nl> - 	 	 	 super ( value . length ( ) * 4 ) ; <nl> + 	 	 	 super ( value . length ( ) * 4 ) ; <nl> 	 	 	 setValue ( value ) ; <nl> 	 	 } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> index a1f211c . . ec2942b 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> @ @ - 22 , 12 + 22 , 13 @ @ import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . platform . win32 . BaseTSD . LONG _ PTR ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> + import com . sun . jna . ptr . ByReference ; <nl> import com . sun . jna . win32 . StdCallLibrary ; <nl> <nl> / / TODO : Auto - generated Javadoc <nl> / * * <nl> * Ported from Windef . h ( various macros and types ) . Microsoft Windows SDK 6 . 0A . <nl> - * <nl> + * <nl> * @ author dblock [ at ] dblock . org <nl> * / <nl> @ SuppressWarnings ( " serial " ) <nl> @ @ - 50 , 7 + 51 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new word . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 73 , 7 + 74 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new dword . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 83 , 7 + 84 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Low WORD . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ return Low WORD . <nl> 	 	 * / <nl> 	 	 public WORD getLow ( ) { <nl> @ @ - 92 , 7 + 93 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * High WORD . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ return High WORD . <nl> 	 	 * / <nl> 	 	 public WORD getHigh ( ) { <nl> @ @ - 104 , 22 + 105 , 64 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 * 32 - bit signed integer . <nl> 	 * / <nl> 	 public static class LONG extends IntegerType { <nl> + 	 	 public static final int SIZE = 8 ; <nl> <nl> - 	 	 / * * <nl> - 	 	 * Instantiates a new long . <nl> - 	 	 * / <nl> 	 	 public LONG ( ) { <nl> 	 	 	 this ( 0 ) ; <nl> 	 	 } <nl> <nl> - 	 	 / * * <nl> - 	 	 * Instantiates a new long . <nl> - 	 	 * <nl> - 	 	 * @ param value <nl> - 	 	 * the value <nl> - 	 	 * / <nl> 	 	 public LONG ( long value ) { <nl> - 	 	 	 super ( Native . LONG _ SIZE , value ) ; <nl> + 	 	 	 super ( 4 , value , false ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class LONGByReference extends ByReference { <nl> + 	 	 public LONGByReference ( ) { <nl> + 	 	 	 this ( new LONG ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public LONGByReference ( LONG value ) { <nl> + 	 	 	 super ( LONG . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public void setValue ( LONG value ) { <nl> + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public LONG getValue ( ) { <nl> + 	 	 	 return new LONG ( getPointer ( ) . getLong ( 0 ) ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public static class LONGLONG extends IntegerType { <nl> + 	 	 public static final int SIZE = 8 ; <nl> + <nl> + 	 	 public LONGLONG ( ) { <nl> + 	 	 	 this ( 0 ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public LONGLONG ( long value ) { <nl> + 	 	 	 super ( 8 , value , false ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class LONGLONGByReference extends ByReference { <nl> + 	 	 public LONGLONGByReference ( ) { <nl> + 	 	 	 this ( new LONGLONG ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public LONGLONGByReference ( LONGLONG value ) { <nl> + 	 	 	 super ( LONGLONG . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public void setValue ( LONGLONG value ) { <nl> + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public LONGLONG getValue ( ) { <nl> + 	 	 	 return new LONGLONG ( getPointer ( ) . getLong ( 0 ) ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> @ @ - 137 , 7 + 180 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hdc . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 160 , 7 + 203 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hicon . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 183 , 7 + 226 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hcursor . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 206 , 7 + 249 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hmenu . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 229 , 7 + 272 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hpen . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 252 , 7 + 295 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hrsrc . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 275 , 7 + 318 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hpalette . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 298 , 7 + 341 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hbitmap . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 321 , 7 + 364 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hrgn . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 344 , 7 + 387 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hwnd . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 381 , 7 + 424 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hfont . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 404 , 7 + 447 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new lparam . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 427 , 7 + 470 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new lresult . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 448 , 7 + 491 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new int ptr . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 458 , 7 + 501 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * To pointer . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ return the pointer <nl> 	 	 * / <nl> 	 	 public Pointer toPointer ( ) { <nl> @ @ - 480 , 7 + 523 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new uint ptr . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 490 , 7 + 533 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * To pointer . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ return the pointer <nl> 	 	 * / <nl> 	 	 public Pointer toPointer ( ) { <nl> @ @ - 512 , 7 + 555 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new wparam . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 540 , 7 + 583 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * <nl> 	 	 * ( non - Javadoc ) <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ see com . sun . jna . Structure # getFieldOrder ( ) <nl> 	 	 * / <nl> 	 	 protected List getFieldOrder ( ) { <nl> @ @ - 550 , 7 + 593 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * To rectangle . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ return the rectangle <nl> 	 	 * / <nl> 	 	 public Rectangle toRectangle ( ) { <nl> @ @ - 559 , 7 + 602 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * <nl> 	 	 * ( non - Javadoc ) <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ see com . sun . jna . Structure # toString ( ) <nl> 	 	 * / <nl> 	 	 public String toString ( ) { <nl> @ @ - 571 , 6 + 614 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 * 32 - bit unsigned integer . <nl> 	 * / <nl> 	 public static class ULONG extends IntegerType { <nl> + 	 	 public static final int SIZE = 8 ; <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new ulong . <nl> @ @ - 581 , 23 + 625 , 36 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new ulong . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> 	 	 public ULONG ( long value ) { <nl> 	 	 	 super ( Native . LONG _ SIZE , value , true ) ; <nl> 	 	 } <nl> + 	 } <nl> <nl> - 	 	 / * * <nl> - 	 	 * The Class ByReference . <nl> - 	 	 * / <nl> - 	 	 public static class ByReference implements Structure . ByReference { <nl> + 	 public class ULONGByReference extends ByReference { <nl> + 	 	 public ULONGByReference ( ) { <nl> + 	 	 	 this ( new ULONG ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public ULONGByReference ( ULONG value ) { <nl> + 	 	 	 super ( ULONG . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public void setValue ( ULONG value ) { <nl> + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; <nl> + 	 	 } <nl> <nl> + 	 	 public ULONG getValue ( ) { <nl> + 	 	 	 return new ULONG ( getPointer ( ) . getLong ( 0 ) ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> 	 public static class ULONGLONG extends IntegerType { <nl> + 	 	 public static final int SIZE = 8 ; <nl> <nl> 	 	 public ULONGLONG ( ) { <nl> 	 	 	 this ( 0 ) ; <nl> @ @ - 608 , 14 + 665 , 22 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public static class LONGLONG extends IntegerType { <nl> + 	 public class ULONGLONGByReference extends ByReference { <nl> + 	 	 public ULONGLONGByReference ( ) { <nl> + 	 	 	 this ( new ULONGLONG ( 0 ) ) ; <nl> + 	 	 } <nl> <nl> - 	 	 public LONGLONG ( ) { <nl> - 	 	 	 this ( 0 ) ; <nl> + 	 	 public ULONGLONGByReference ( ULONGLONG value ) { <nl> + 	 	 	 super ( ULONGLONG . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> 	 	 } <nl> <nl> - 	 	 public LONGLONG ( long value ) { <nl> - 	 	 	 super ( 8 , value , false ) ; <nl> + 	 	 public void setValue ( ULONGLONG value ) { <nl> + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public ULONGLONG getValue ( ) { <nl> + 	 	 	 return new ULONGLONG ( getPointer ( ) . getLong ( 0 ) ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> @ @ - 633 , 7 + 698 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new dwordlong . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 656 , 7 + 721 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new hbrush . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 679 , 7 + 744 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new atom . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 702 , 7 + 767 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new pvoid . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param p <nl> 	 	 * the p <nl> 	 	 * / <nl> @ @ - 725 , 7 + 790 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new lpvoid . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 754 , 7 + 819 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new point . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param memory <nl> 	 	 * the memory <nl> 	 	 * / <nl> @ @ - 768 , 7 + 833 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new point . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param x <nl> 	 	 * the x <nl> 	 	 * @ param y <nl> @ @ - 781 , 7 + 846 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * <nl> 	 	 * ( non - Javadoc ) <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ see com . sun . jna . Structure # getFieldOrder ( ) <nl> 	 	 * / <nl> 	 	 protected List getFieldOrder ( ) { <nl> @ @ - 793 , 6 + 858 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 * 16 - bit unsigned short . <nl> 	 * / <nl> 	 public static class USHORT extends IntegerType { <nl> + 	 	 public static final int SIZE = 2 ; <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new ushort . <nl> @ @ - 803 , 7 + 869 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new ushort . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 812 , 10 + 878 , 30 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 	 } <nl> 	 } <nl> <nl> + 	 public class USHORTbyReference extends ByReference { <nl> + 	 	 public USHORTbyReference ( ) { <nl> + 	 	 	 this ( new USHORT ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public USHORTbyReference ( USHORT value ) { <nl> + 	 	 	 super ( USHORT . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public void setValue ( USHORT value ) { <nl> + 	 	 	 getPointer ( ) . setShort ( 0 , value . shortValue ( ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public USHORT getValue ( ) { <nl> + 	 	 	 return new USHORT ( getPointer ( ) . getShort ( 0 ) ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> 	 / * * <nl> 	 * 16 - bit short . <nl> 	 * / <nl> 	 public static class SHORT extends IntegerType { <nl> + 	 	 public static final int SIZE = 2 ; <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new ushort . <nl> @ @ - 826 , 7 + 912 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new ushort . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 839 , 6 + 925 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 * 32 - bit unsigned int . <nl> 	 * / <nl> 	 public static class UINT extends IntegerType { <nl> + 	 	 public static final int SIZE = 4 ; <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new uint . <nl> @ @ - 849 , 7 + 936 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new uint . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> @ @ - 858 , 6 + 945 , 25 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 	 } <nl> 	 } <nl> <nl> + 	 public class UINTbyReference extends ByReference { <nl> + 	 	 public UINTbyReference ( ) { <nl> + 	 	 	 this ( new UINT ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public UINTbyReference ( UINT value ) { <nl> + 	 	 	 super ( UINT . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public void setValue ( UINT value ) { <nl> + 	 	 	 getPointer ( ) . setInt ( 0 , value . intValue ( ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public UINT getValue ( ) { <nl> + 	 	 	 return new UINT ( getPointer ( ) . getInt ( 0 ) ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> 	 / * * <nl> 	 * The Class SCODE . <nl> 	 * / <nl> @ @ - 872 , 19 + 978 , 31 @ @ public interface WinDef extends StdCallLibrary { <nl> <nl> 	 	 / * * <nl> 	 	 * Instantiates a new scode . <nl> - 	 	 * <nl> + 	 	 * <nl> 	 	 * @ param value <nl> 	 	 * the value <nl> 	 	 * / <nl> 	 	 public SCODE ( long value ) { <nl> 	 	 	 super ( value ) ; <nl> 	 	 } <nl> + 	 } <nl> <nl> - 	 	 / * * <nl> - 	 	 * The Class ByReference . <nl> - 	 	 * / <nl> - 	 	 public static class ByReference implements Structure . ByReference { <nl> + 	 public static class SCODEbyReference extends ByReference { <nl> + 	 	 public SCODEbyReference ( ) { <nl> + 	 	 	 this ( new SCODE ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public SCODEbyReference ( SCODE value ) { <nl> + 	 	 	 super ( SCODE . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public void setValue ( SCODE value ) { <nl> + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; <nl> + 	 	 } <nl> <nl> + 	 	 public SCODE getValue ( ) { <nl> + 	 	 	 return new SCODE ( getPointer ( ) . getLong ( 0 ) ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java <nl> index b68094f . . 8510468 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ import junit . framework . TestCase ; <nl> <nl> import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> + import com . sun . jna . platform . win32 . WinDef . SHORT ; <nl> import com . sun . jna . platform . win32 . COM . COMException ; <nl> <nl> / * * <nl> @ @ - 28 , 8 + 29 , 7 @ @ public class OleAut32UtilTest extends TestCase { <nl> 	 } <nl> <nl> 	 public void testCreateVarArray ( ) { <nl> - 	 	 SAFEARRAY varArray = OleAut32Util <nl> - 	 	 	 	 . createVarArray ( Variant . VT _ VARIANT , 10 ) ; <nl> + 	 	 SAFEARRAY varArray = OleAut32Util . createVarArray ( Variant . VT _ VARIANT , 1 ) ; <nl> 	 	 assertTrue ( varArray ! = null ) ; <nl> 	 } <nl> <nl> @ @ - 38 , 7 + 38 , 7 @ @ public class OleAut32UtilTest extends TestCase { <nl> <nl> 	 	 for ( int i = 0 ; i < 1 ; i + + ) { <nl> 	 	 	 try { <nl> - 	 	 	 	 VARIANT variant = new VARIANT ( i + 3333333 ) ; <nl> + 	 	 	 	 VARIANT variant = new VARIANT ( new SHORT ( i + 3333 ) ) ; <nl> 	 	 	 	 System . out . println ( variant . toString ( true ) ) ; <nl> 	 	 	 	 OleAut32Util . SafeArrayPutElement ( varArray , i , variant ) ; <nl> 	 	 	 } catch ( COMException e ) { <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java <nl> index fd06816 . . 1d18142 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java <nl> @ @ - 2 , 9 + 2 , 8 @ @ package com . sun . jna . platform . win32 ; <nl> <nl> import junit . framework . TestCase ; <nl> <nl> - import com . sun . jna . platform . win32 . Guid . GUID ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> - import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> + import com . sun . jna . platform . win32 . WinDef . SHORT ; <nl> <nl> public class VariantTest extends TestCase { <nl> <nl> @ @ - 16 , 7 + 15 , 7 @ @ public class VariantTest extends TestCase { <nl> 	 } <nl> <nl> 	 public void testVariant ( ) { <nl> - 	 	 VARIANT variant = new VARIANT ( 33333 ) ; <nl> + 	 	 VARIANT variant = new VARIANT ( new SHORT ( 33333 ) ) ; <nl> 	 	 System . out . println ( variant . toString ( false ) ) ; <nl> <nl> 	 	 VARIANT variant2 = new VARIANT ( variant . getPointer ( ) ) ;

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 index 1df00c3 . . f165741 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 @ @ - 284 , 10 + 284 , 9 @ @ public interface X11 extends Library { 
 return Arrays . asList ( new String [ ] { " red " , " redMask " , " green " , " greenMask " , " blue " , " blueMask " , " alpha " , " alphaMask " } ) ; 
 } 
 } 
 - class PictFormat extends IntegerType { 
 + class PictFormat extends XID { 
 private static final long serialVersionUID = 1L ; 
 - public static final int SIZE = 4 ; 
 - public PictFormat ( long value ) { super ( SIZE , value , true ) ; } 
 + public PictFormat ( long value ) { super ( value ) ; } 
 public PictFormat ( ) { this ( 0 ) ; } 
 } 
 class XRenderPictFormat extends Structure {

NEAREST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 index 190eef6 . . 2e557e0 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import com . sun . jna . NativeLong ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . Union ; 
 + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 import com . sun . jna . platform . win32 . WinDef . BYTE ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 @ @ - 23 , 6 + 24 , 7 @ @ import com . sun . jna . platform . win32 . WinDef . ULONGLONG ; 
 import com . sun . jna . platform . win32 . WinDef . USHORT ; 
 import com . sun . jna . platform . win32 . WinDef . WORD ; 
 import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 + import com . sun . jna . ptr . ByReference ; 
 import com . sun . jna . ptr . LongByReference ; 
 
 / / TODO : Auto - generated Javadoc 
 @ @ - 111 , 7 + 113 , 7 @ @ public interface OaIdl { 
 
 	 	 / * * 
 	 	 * Instantiates a new excepinfo . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 121 , 7 + 123 , 7 @ @ public interface OaIdl { 
 
 	 	 / * 
 	 	 * ( non - Javadoc ) 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ see com . sun . jna . Structure # getFieldOrder ( ) 
 	 	 * / 
 	 	 @ Override 
 @ @ - 134 , 6 + 136 , 7 @ @ public interface OaIdl { 
 	 } 
 
 	 public static class VARIANT _ BOOL extends IntegerType { 
 + 	 	 public static final int SIZE = 8 ; 
 
 	 	 public VARIANT _ BOOL ( ) { 
 	 	 	 this ( 0 ) ; 
 @ @ - 155 , 8 + 158 , 37 @ @ public interface OaIdl { 
 	 	 } 
 	 } 
 
 - 	 public static class DATE extends IntegerType { 
 + 	 public class VARIANT _ BOOLByReference extends ByReference { 
 + 	 	 public VARIANT _ BOOLByReference ( ) { 
 + 	 	 	 this ( new VARIANT _ BOOL ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public VARIANT _ BOOLByReference ( VARIANT _ BOOL value ) { 
 + 	 	 	 super ( VARIANT _ BOOL . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 + 	 	 } 
 + 
 + 	 	 public void setValue ( VARIANT _ BOOL value ) { 
 + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public VARIANT _ BOOL getValue ( ) { 
 + 	 	 	 return new VARIANT _ BOOL ( getPointer ( ) . getLong ( 0 ) ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class _ VARIANT _ BOOLByReference extends VARIANT _ BOOLByReference { 
 + 	 	 public _ VARIANT _ BOOLByReference ( ) { 
 + 	 	 	 this ( new _ VARIANT _ BOOL ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public _ VARIANT _ BOOLByReference ( _ VARIANT _ BOOL value ) { 
 + 	 	 	 super ( value ) ; 
 + 	 	 } 
 + 	 } 
 
 + 	 public static class DATE extends IntegerType { 
 + 	 	 public static final int SIZE = 8 ; 
 	 	 public DATE ( ) { 
 	 	 	 this ( 0 ) ; 
 	 	 } 
 @ @ - 166 , 6 + 198 , 25 @ @ public interface OaIdl { 
 	 	 } 
 	 } 
 
 + 	 public class DATEByReference extends ByReference { 
 + 	 	 public DATEByReference ( ) { 
 + 	 	 	 this ( new DATE ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public DATEByReference ( DATE value ) { 
 + 	 	 	 super ( DATE . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 + 	 	 } 
 + 
 + 	 	 public void setValue ( DATE value ) { 
 + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public DATE getValue ( ) { 
 + 	 	 	 return new DATE ( getPointer ( ) . getLong ( 0 ) ) ; 
 + 	 	 } 
 + 	 } 
 + 	 
 	 / * * 
 	 * The Class VARIANTARG . 
 	 * / 
 @ @ - 225 , 7 + 276 , 7 @ @ public interface OaIdl { 
 
 	 	 / * * 
 	 	 * Instantiates a new dispid . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OleAut32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / OleAut32Util . java 
 index 3ad532b . . 6c58021 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OleAut32Util . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OleAut32Util . java 
 @ @ - 49 , 7 + 49 , 6 @ @ public abstract class OleAut32Util { 
 	 	 long [ ] idx = new long [ 1 ] ; 
 	 	 idx [ 0 ] = index ; 
 	 	 VARIANT result = new VARIANT ( ) ; 
 - 	 	 OleAut32 . INSTANCE . VariantInit ( result ) ; 
 	 	 HRESULT hr = OleAut32 . INSTANCE . SafeArrayGetElement ( array , idx , 
 	 	 	 	 result . getPointer ( ) ) ; 
 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 index 749ab70 . . a254c29 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 @ @ - 3 , 22 + 3 , 36 @ @ package com . sun . jna . platform . win32 ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 
 - import com . sun . jna . NativeLong ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . Union ; 
 import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; 
 import com . sun . jna . platform . win32 . OaIdl . DATE ; 
 + import com . sun . jna . platform . win32 . OaIdl . DATEByReference ; 
 import com . sun . jna . platform . win32 . OaIdl . DECIMAL ; 
 import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; 
 import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; 
 - import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOL ; 
 - import com . sun . jna . platform . win32 . Variant . VARIANT . _ VARIANT . _ _ VARIANT . BRECORD ; 
 + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLByReference ; 
 + import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOLByReference ; 
 import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 + import com . sun . jna . platform . win32 . WinDef . BYTE ; 
 import com . sun . jna . platform . win32 . WinDef . CHAR ; 
 + import com . sun . jna . platform . win32 . WinDef . LONG ; 
 + import com . sun . jna . platform . win32 . WinDef . LONGByReference ; 
 + import com . sun . jna . platform . win32 . WinDef . LONGLONG ; 
 + import com . sun . jna . platform . win32 . WinDef . LONGLONGByReference ; 
 import com . sun . jna . platform . win32 . WinDef . PVOID ; 
 import com . sun . jna . platform . win32 . WinDef . SCODE ; 
 + import com . sun . jna . platform . win32 . WinDef . SCODEbyReference ; 
 import com . sun . jna . platform . win32 . WinDef . SHORT ; 
 + import com . sun . jna . platform . win32 . WinDef . UINT ; 
 + import com . sun . jna . platform . win32 . WinDef . UINTbyReference ; 
 + import com . sun . jna . platform . win32 . WinDef . ULONG ; 
 + import com . sun . jna . platform . win32 . WinDef . ULONGByReference ; 
 + import com . sun . jna . platform . win32 . WinDef . ULONGLONG ; 
 + import com . sun . jna . platform . win32 . WinDef . ULONGLONGByReference ; 
 + import com . sun . jna . platform . win32 . WinDef . USHORT ; 
 + import com . sun . jna . platform . win32 . WinDef . USHORTbyReference ; 
 import com . sun . jna . platform . win32 . COM . IDispatch ; 
 import com . sun . jna . platform . win32 . COM . IRecordInfo ; 
 import com . sun . jna . platform . win32 . COM . IUnknown ; 
 @ @ - 26 , 8 + 40 , 6 @ @ import com . sun . jna . ptr . ByteByReference ; 
 import com . sun . jna . ptr . DoubleByReference ; 
 import com . sun . jna . ptr . FloatByReference ; 
 import com . sun . jna . ptr . IntByReference ; 
 - import com . sun . jna . ptr . LongByReference ; 
 - import com . sun . jna . ptr . NativeLongByReference ; 
 import com . sun . jna . ptr . ShortByReference ; 
 
 public interface Variant { 
 @ @ - 118 , 12 + 130 , 18 @ @ public interface Variant { 
 	 	 	 this . setValue ( VT _ BOOL , value ) ; 
 	 	 } 
 
 - 	 	 public VARIANT ( int value ) { 
 + 	 	 public VARIANT ( LONG value ) { 
 	 	 	 this ( ) ; 
 	 	 	 this . setValue ( VT _ I4 , value ) ; 
 	 	 } 
 
 + 	 	 public VARIANT ( SHORT value ) { 
 + 	 	 	 this ( ) ; 
 + 	 	 	 this . setValue ( VT _ I2 , value ) ; 
 + 	 	 } 
 + 
 	 	 public int getVarType ( ) { 
 + 	 	 	 this . read ( ) ; 
 	 	 	 return _ variant . vt ; 
 	 	 } 
 
 @ @ - 133 , 9 + 151 , 12 @ @ public interface Variant { 
 
 	 	 public void setValue ( int vt , Object value ) { 
 	 	 	 switch ( vt ) { 
 - 	 	 	 case VT _ I4 : 
 + 	 	 	 case VT _ I2 : 
 	 	 	 	 this . _ variant . _ _ variant . writeField ( " iVal " , value ) ; 
 	 	 	 	 break ; 
 + 	 	 	 case VT _ I4 : 
 + 	 	 	 	 this . _ variant . _ _ variant . writeField ( " lVal " , value ) ; 
 + 	 	 	 	 break ; 
 	 	 	 case VT _ BSTR : 
 	 	 	 	 this . _ variant . _ _ variant . writeField ( " bstrVal " , value ) ; 
 	 	 	 	 break ; 
 @ @ - 158 , 6 + 179 , 7 @ @ public interface Variant { 
 	 	 } 
 
 	 	 public Object getValue ( ) { 
 + 	 	 	 this . read ( ) ; 
 	 	 	 switch ( this . getVarType ( ) ) { 
 	 	 	 case VT _ I4 : 
 	 	 	 	 return this . _ variant . _ _ variant . readField ( " iVal " ) ; 
 @ @ - 191 , 85 + 213 , 94 @ @ public interface Variant { 
 	 	 	 } 
 
 	 	 	 public static class _ _ VARIANT extends Union { 
 - 	 	 	 	 public Long llVal ; 
 - 	 	 	 	 public NativeLong lVal ; 
 - 	 	 	 	 public Byte bVal ; 
 - 	 	 	 	 public Integer iVal ; 
 + 	 	 	 	 / / LONGLONG VT _ I8 
 + 	 	 	 	 public LONGLONG llVal ; 
 + 	 	 	 	 / / LONG VT _ I4 
 + 	 	 	 	 public LONG lVal ; 
 + 	 	 	 	 / / BYTE VT _ UI1 
 + 	 	 	 	 public BYTE bVal ; 
 + 	 	 	 	 / / SHORT VT _ I2 
 + 	 	 	 	 public SHORT iVal ; 
 + 	 	 	 	 / / FLOAT VT _ R4 
 	 	 	 	 public Float fltVal ; 
 + 	 	 	 	 / / DOUBLE VT _ R8 
 	 	 	 	 public Double dblVal ; 
 - 	 	 	 	 / / / C type : VARIANT _ BOOL 
 + 	 	 	 	 / / VARIANT _ BOOL VT _ BOOL 
 	 	 	 	 public VARIANT _ BOOL boolVal ; 
 - 	 	 	 	 / / / C type : _ VARIANT _ BOOL 
 - 	 	 	 	 public _ VARIANT _ BOOL bool ; 
 - 	 	 	 	 / / / C type : SCODE 
 + 	 	 	 	 / / SCODE VT _ ERROR 
 	 	 	 	 public SCODE scode ; 
 - 	 	 	 	 / / / C type : CY 
 + 	 	 	 	 / / CY VT _ CY 
 	 	 	 	 public CURRENCY cyVal ; 
 - 	 	 	 	 / / / C type : DATE 
 + 	 	 	 	 / / DATE VT _ DATE 
 	 	 	 	 public DATE date ; 
 - 	 	 	 	 / / / C type : BSTR 
 + 	 	 	 	 / / BSTR VT _ BSTR 
 	 	 	 	 public BSTR bstrVal ; 
 - 	 	 	 	 / / / C type : IUnknown * 
 + 	 	 	 	 / / IUnknown * VT _ UNKNOWN 
 	 	 	 	 public IUnknown punkVal ; 
 - 	 	 	 	 / / / C type : IDispatch * 
 + 	 	 	 	 / / IDispatch * VT _ DISPATCH 
 	 	 	 	 public IDispatch pdispVal ; 
 - 	 	 	 	 / / / C type : SAFEARRAY * 
 - 	 	 	 	 public SAFEARRAY parray ; 
 - 	 	 	 	 / / / C type : BYTE * 
 + 	 	 	 	 / / SAFEARRAY * VT _ ARRAY 
 + 	 	 	 	 public SAFEARRAY . ByReference parray ; 
 + 	 	 	 	 / / BYTE * VT _ BYREF | VT _ UI1 
 	 	 	 	 public ByteByReference pbVal ; 
 - 	 	 	 	 / / / C type : short * 
 + 	 	 	 	 / / SHORT * VT _ BYREF | VT _ I2 
 	 	 	 	 public ShortByReference piVal ; 
 - 	 	 	 	 / / / C type : long * 
 - 	 	 	 	 public NativeLongByReference plVal ; 
 - 	 	 	 	 / / / C type : LONGLONG * 
 - 	 	 	 	 public LongByReference pllVal ; 
 - 	 	 	 	 / / / C type : FLOAT * 
 + 	 	 	 	 / / LONG * VT _ BYREF | VT _ I4 
 + 	 	 	 	 public LONGByReference plVal ; 
 + 	 	 	 	 / / LONGLONG * VT _ BYREF | VT _ I8 
 + 	 	 	 	 public LONGLONGByReference pllVal ; 
 + 	 	 	 	 / / FLOAT * VT _ BYREF | VT _ R4 
 	 	 	 	 public FloatByReference pfltVal ; 
 - 	 	 	 	 / / / C type : DOUBLE * 
 + 	 	 	 	 / / DOUBLE * VT _ BYREF | VT _ R8 
 	 	 	 	 public DoubleByReference pdblVal ; 
 - 	 	 	 	 / / / C type : VARIANT _ BOOL * 
 - 	 	 	 	 public VARIANT _ BOOL pboolVal ; 
 - 	 	 	 	 / / / C type : _ VARIANT _ BOOL * 
 - 	 	 	 	 public _ VARIANT _ BOOL pbool ; 
 - 	 	 	 	 / / / C type : SCODE * 
 - 	 	 	 	 public SCODE pscode ; 
 - 	 	 	 	 / / / C type : CY * 
 - 	 	 	 	 public CURRENCY pcyVal ; 
 - 	 	 	 	 / / / C type : DATE * 
 - 	 	 	 	 public DATE pdate ; 
 - 	 	 	 	 / / / C type : BSTR * 
 - 	 	 	 	 public BSTR pbstrVal ; 
 - 	 	 	 	 / / / C type : IUnknown * * 
 + 	 	 	 	 / / VARIANT _ BOOL * VT _ BYREF | VT _ BOOL 
 + 	 	 	 	 public VARIANT _ BOOLByReference pboolVal ; 
 + 	 	 	 	 / / VARIANT _ BOOL * VT _ BYREF | VT _ BOOL 
 + 	 	 	 	 public _ VARIANT _ BOOLByReference pbool ; 
 + 	 	 	 	 / / SCODE * VT _ BYREF | VT _ ERROR 
 + 	 	 	 	 public SCODEbyReference pscode ; 
 + 	 	 	 	 / / CY * VT _ BYREF | VT _ CY 
 + 	 	 	 	 public CURRENCY . ByReference pcyVal ; 
 + 	 	 	 	 / / DATE * VT _ BYREF | VT _ DATE 
 + 	 	 	 	 public DATEByReference pdate ; 
 + 	 	 	 	 / / BSTR * VT _ BYREF | VT _ BSTR 
 + 	 	 	 	 public BSTR . ByReference pbstrVal ; 
 + 	 	 	 	 / / IUnknown * * VT _ BYREF | VT _ UNKNOWN 
 	 	 	 	 public IUnknown . ByReference ppunkVal ; 
 - 	 	 	 	 / / / C type : IDispatch * * 
 + 	 	 	 	 / / IDispatch * * VT _ BYREF | VT _ DISPATCH 
 	 	 	 	 public IDispatch . ByReference ppdispVal ; 
 - 	 	 	 	 / / / C type : SAFEARRAY * * 
 + 	 	 	 	 / / SAFEARRAY * * VT _ BYREF | VT _ ARRAY 
 	 	 	 	 public SAFEARRAY . ByReference pparray ; 
 - 	 	 	 	 / / / C type : VARIANT * 
 + 	 	 	 	 / / VARIANT * VT _ BYREF | VT _ VARIANT 
 	 	 	 	 public VARIANT . ByReference pvarVal ; 
 - 	 	 	 	 / / / C type : PVOID 
 + 	 	 	 	 / / PVOID VT _ BYREF ( Generic ByRef ) 
 	 	 	 	 public PVOID byref ; 
 - 	 	 	 	 / / / C type : CHAR 
 + 	 	 	 	 / / CHAR VT _ I1 
 	 	 	 	 public CHAR cVal ; 
 - 	 	 	 	 public SHORT uiVal ; 
 - 	 	 	 	 public NativeLong ulVal ; 
 - 	 	 	 	 public Long ullVal ; 
 + 	 	 	 	 / / USHORT VT _ UI2 
 + 	 	 	 	 public USHORT uiVal ; 
 + 	 	 	 	 / / ULONG VT _ UI4 
 + 	 	 	 	 public ULONG ulVal ; 
 + 	 	 	 	 / / ULONGLONG VT _ UI8 
 + 	 	 	 	 public ULONGLONG ullVal ; 
 + 	 	 	 	 / / INT VT _ INT 
 	 	 	 	 public Integer intVal ; 
 - 	 	 	 	 public Integer uintVal ; 
 - 	 	 	 	 / / / C type : DECIMAL * 
 + 	 	 	 	 / / UINT VT _ UINT 
 + 	 	 	 	 public UINT uintVal ; 
 + 	 	 	 	 / / DECIMAL * VT _ BYREF | VT _ DECIMAL 
 	 	 	 	 public DECIMAL . ByReference pdecVal ; 
 - 	 	 	 	 / / / C type : CHAR * 
 + 	 	 	 	 / / CHAR * VT _ BYREF | VT _ I1 
 	 	 	 	 public CHAR . ByReference pcVal ; 
 - 	 	 	 	 / / / C type : USHORT * 
 - 	 	 	 	 public ShortByReference puiVal ; 
 - 	 	 	 	 / / / C type : ULONG * 
 - 	 	 	 	 public NativeLongByReference pulVal ; 
 - 	 	 	 	 / / / C type : ULONGLONG * 
 - 	 	 	 	 public LongByReference pullVal ; 
 - 	 	 	 	 / / / C type : INT * 
 + 	 	 	 	 / / USHORT * VT _ BYREF | VT _ UI2 
 + 	 	 	 	 public USHORTbyReference puiVal ; 
 + 	 	 	 	 / / ULONG * VT _ BYREF | VT _ UI4 
 + 	 	 	 	 public ULONGByReference pulVal ; 
 + 	 	 	 	 / / ULONGLONG * VT _ BYREF | VT _ UI8 
 + 	 	 	 	 public ULONGLONGByReference pullVal ; 
 + 	 	 	 	 / / INT * VT _ BYREF | VT _ INT 
 	 	 	 	 public IntByReference pintVal ; 
 - 	 	 	 	 / / / C type : UINT * 
 - 	 	 	 	 public IntByReference puintVal ; 
 + 	 	 	 	 / / UINT * VT _ BYREF | VT _ UINT 
 + 	 	 	 	 public UINTbyReference puintVal ; 
 
 	 	 	 	 public static class BRECORD extends Structure { 
 	 	 	 	 	 public static class ByReference extends BRECORD implements 
 @ @ - 277 , 6 + 308 , 7 @ @ public interface Variant { 
 	 	 	 	 	 } 
 
 	 	 	 	 	 public PVOID pvRecord ; 
 + 
 	 	 	 	 	 public IRecordInfo pRecInfo ; 
 
 	 	 	 	 	 public BRECORD ( ) { 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 index 9e8b4fe . . acb0c28 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 @ @ - 16 , 14 + 16 , 12 @ @ 
 package com . sun . jna . platform . win32 ; 
 
 import com . sun . jna . Structure ; 
 - import com . sun . jna . WString ; 
 - import com . sun . jna . platform . win32 . OaIdl . DISPID ; 
 - import com . sun . jna . platform . win32 . WinDef . USHORT ; 
 + import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 import com . sun . jna . ptr . ByReference ; 
 
 / * * 
 * Constant defined in WTypes . h 
 - * 
 + * 
 * @ author scott . palmer 
 * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 @ @ - 58 , 12 + 56 , 16 @ @ public interface WTypes { 
 	 public static class BSTR extends ByReference implements 
 	 	 	 Structure . ByReference { 
 
 + 	 	 public static class ByReference extends BSTR implements 
 + 	 	 	 	 Structure . ByReference { 
 + 	 	 } 
 + 
 	 	 public BSTR ( ) { 
 	 	 	 this ( " null " ) ; 
 	 	 } 
 
 	 	 public BSTR ( String value ) { 
 - 	 	 	 super ( value . length ( ) * 4 ) ; 
 + 	 	 	 super ( value . length ( ) * 4 ) ; 
 	 	 	 setValue ( value ) ; 
 	 	 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 index a1f211c . . ec2942b 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 @ @ - 22 , 12 + 22 , 13 @ @ import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . platform . win32 . BaseTSD . LONG _ PTR ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 + import com . sun . jna . ptr . ByReference ; 
 import com . sun . jna . win32 . StdCallLibrary ; 
 
 / / TODO : Auto - generated Javadoc 
 / * * 
 * Ported from Windef . h ( various macros and types ) . Microsoft Windows SDK 6 . 0A . 
 - * 
 + * 
 * @ author dblock [ at ] dblock . org 
 * / 
 @ SuppressWarnings ( " serial " ) 
 @ @ - 50 , 7 + 51 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new word . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 73 , 7 + 74 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new dword . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 83 , 7 + 84 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Low WORD . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ return Low WORD . 
 	 	 * / 
 	 	 public WORD getLow ( ) { 
 @ @ - 92 , 7 + 93 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * High WORD . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ return High WORD . 
 	 	 * / 
 	 	 public WORD getHigh ( ) { 
 @ @ - 104 , 22 + 105 , 64 @ @ public interface WinDef extends StdCallLibrary { 
 	 * 32 - bit signed integer . 
 	 * / 
 	 public static class LONG extends IntegerType { 
 + 	 	 public static final int SIZE = 8 ; 
 
 - 	 	 / * * 
 - 	 	 * Instantiates a new long . 
 - 	 	 * / 
 	 	 public LONG ( ) { 
 	 	 	 this ( 0 ) ; 
 	 	 } 
 
 - 	 	 / * * 
 - 	 	 * Instantiates a new long . 
 - 	 	 * 
 - 	 	 * @ param value 
 - 	 	 * the value 
 - 	 	 * / 
 	 	 public LONG ( long value ) { 
 - 	 	 	 super ( Native . LONG _ SIZE , value ) ; 
 + 	 	 	 super ( 4 , value , false ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class LONGByReference extends ByReference { 
 + 	 	 public LONGByReference ( ) { 
 + 	 	 	 this ( new LONG ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public LONGByReference ( LONG value ) { 
 + 	 	 	 super ( LONG . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 + 	 	 } 
 + 
 + 	 	 public void setValue ( LONG value ) { 
 + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public LONG getValue ( ) { 
 + 	 	 	 return new LONG ( getPointer ( ) . getLong ( 0 ) ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public static class LONGLONG extends IntegerType { 
 + 	 	 public static final int SIZE = 8 ; 
 + 
 + 	 	 public LONGLONG ( ) { 
 + 	 	 	 this ( 0 ) ; 
 + 	 	 } 
 + 
 + 	 	 public LONGLONG ( long value ) { 
 + 	 	 	 super ( 8 , value , false ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class LONGLONGByReference extends ByReference { 
 + 	 	 public LONGLONGByReference ( ) { 
 + 	 	 	 this ( new LONGLONG ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public LONGLONGByReference ( LONGLONG value ) { 
 + 	 	 	 super ( LONGLONG . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 + 	 	 } 
 + 
 + 	 	 public void setValue ( LONGLONG value ) { 
 + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public LONGLONG getValue ( ) { 
 + 	 	 	 return new LONGLONG ( getPointer ( ) . getLong ( 0 ) ) ; 
 	 	 } 
 	 } 
 
 @ @ - 137 , 7 + 180 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hdc . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 160 , 7 + 203 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hicon . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 183 , 7 + 226 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hcursor . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 206 , 7 + 249 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hmenu . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 229 , 7 + 272 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hpen . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 252 , 7 + 295 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hrsrc . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 275 , 7 + 318 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hpalette . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 298 , 7 + 341 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hbitmap . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 321 , 7 + 364 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hrgn . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 344 , 7 + 387 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hwnd . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 381 , 7 + 424 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hfont . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 404 , 7 + 447 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new lparam . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 427 , 7 + 470 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new lresult . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 448 , 7 + 491 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new int ptr . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 458 , 7 + 501 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * To pointer . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ return the pointer 
 	 	 * / 
 	 	 public Pointer toPointer ( ) { 
 @ @ - 480 , 7 + 523 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new uint ptr . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 490 , 7 + 533 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * To pointer . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ return the pointer 
 	 	 * / 
 	 	 public Pointer toPointer ( ) { 
 @ @ - 512 , 7 + 555 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new wparam . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 540 , 7 + 583 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * 
 	 	 * ( non - Javadoc ) 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ see com . sun . jna . Structure # getFieldOrder ( ) 
 	 	 * / 
 	 	 protected List getFieldOrder ( ) { 
 @ @ - 550 , 7 + 593 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * To rectangle . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ return the rectangle 
 	 	 * / 
 	 	 public Rectangle toRectangle ( ) { 
 @ @ - 559 , 7 + 602 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * 
 	 	 * ( non - Javadoc ) 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ see com . sun . jna . Structure # toString ( ) 
 	 	 * / 
 	 	 public String toString ( ) { 
 @ @ - 571 , 6 + 614 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 	 * 32 - bit unsigned integer . 
 	 * / 
 	 public static class ULONG extends IntegerType { 
 + 	 	 public static final int SIZE = 8 ; 
 
 	 	 / * * 
 	 	 * Instantiates a new ulong . 
 @ @ - 581 , 23 + 625 , 36 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new ulong . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 	 	 public ULONG ( long value ) { 
 	 	 	 super ( Native . LONG _ SIZE , value , true ) ; 
 	 	 } 
 + 	 } 
 
 - 	 	 / * * 
 - 	 	 * The Class ByReference . 
 - 	 	 * / 
 - 	 	 public static class ByReference implements Structure . ByReference { 
 + 	 public class ULONGByReference extends ByReference { 
 + 	 	 public ULONGByReference ( ) { 
 + 	 	 	 this ( new ULONG ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public ULONGByReference ( ULONG value ) { 
 + 	 	 	 super ( ULONG . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 + 	 	 } 
 + 
 + 	 	 public void setValue ( ULONG value ) { 
 + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; 
 + 	 	 } 
 
 + 	 	 public ULONG getValue ( ) { 
 + 	 	 	 return new ULONG ( getPointer ( ) . getLong ( 0 ) ) ; 
 	 	 } 
 	 } 
 
 	 public static class ULONGLONG extends IntegerType { 
 + 	 	 public static final int SIZE = 8 ; 
 
 	 	 public ULONGLONG ( ) { 
 	 	 	 this ( 0 ) ; 
 @ @ - 608 , 14 + 665 , 22 @ @ public interface WinDef extends StdCallLibrary { 
 	 	 } 
 	 } 
 
 - 	 public static class LONGLONG extends IntegerType { 
 + 	 public class ULONGLONGByReference extends ByReference { 
 + 	 	 public ULONGLONGByReference ( ) { 
 + 	 	 	 this ( new ULONGLONG ( 0 ) ) ; 
 + 	 	 } 
 
 - 	 	 public LONGLONG ( ) { 
 - 	 	 	 this ( 0 ) ; 
 + 	 	 public ULONGLONGByReference ( ULONGLONG value ) { 
 + 	 	 	 super ( ULONGLONG . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 	 	 } 
 
 - 	 	 public LONGLONG ( long value ) { 
 - 	 	 	 super ( 8 , value , false ) ; 
 + 	 	 public void setValue ( ULONGLONG value ) { 
 + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public ULONGLONG getValue ( ) { 
 + 	 	 	 return new ULONGLONG ( getPointer ( ) . getLong ( 0 ) ) ; 
 	 	 } 
 	 } 
 
 @ @ - 633 , 7 + 698 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new dwordlong . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 656 , 7 + 721 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new hbrush . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 679 , 7 + 744 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new atom . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 702 , 7 + 767 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new pvoid . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param p 
 	 	 * the p 
 	 	 * / 
 @ @ - 725 , 7 + 790 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new lpvoid . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 754 , 7 + 819 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new point . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param memory 
 	 	 * the memory 
 	 	 * / 
 @ @ - 768 , 7 + 833 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new point . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param x 
 	 	 * the x 
 	 	 * @ param y 
 @ @ - 781 , 7 + 846 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * 
 	 	 * ( non - Javadoc ) 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ see com . sun . jna . Structure # getFieldOrder ( ) 
 	 	 * / 
 	 	 protected List getFieldOrder ( ) { 
 @ @ - 793 , 6 + 858 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 	 * 16 - bit unsigned short . 
 	 * / 
 	 public static class USHORT extends IntegerType { 
 + 	 	 public static final int SIZE = 2 ; 
 
 	 	 / * * 
 	 	 * Instantiates a new ushort . 
 @ @ - 803 , 7 + 869 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new ushort . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 812 , 10 + 878 , 30 @ @ public interface WinDef extends StdCallLibrary { 
 	 	 } 
 	 } 
 
 + 	 public class USHORTbyReference extends ByReference { 
 + 	 	 public USHORTbyReference ( ) { 
 + 	 	 	 this ( new USHORT ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public USHORTbyReference ( USHORT value ) { 
 + 	 	 	 super ( USHORT . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 + 	 	 } 
 + 
 + 	 	 public void setValue ( USHORT value ) { 
 + 	 	 	 getPointer ( ) . setShort ( 0 , value . shortValue ( ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public USHORT getValue ( ) { 
 + 	 	 	 return new USHORT ( getPointer ( ) . getShort ( 0 ) ) ; 
 + 	 	 } 
 + 	 } 
 + 
 	 / * * 
 	 * 16 - bit short . 
 	 * / 
 	 public static class SHORT extends IntegerType { 
 + 	 	 public static final int SIZE = 2 ; 
 
 	 	 / * * 
 	 	 * Instantiates a new ushort . 
 @ @ - 826 , 7 + 912 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new ushort . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 839 , 6 + 925 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 	 * 32 - bit unsigned int . 
 	 * / 
 	 public static class UINT extends IntegerType { 
 + 	 	 public static final int SIZE = 4 ; 
 
 	 	 / * * 
 	 	 * Instantiates a new uint . 
 @ @ - 849 , 7 + 936 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new uint . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 @ @ - 858 , 6 + 945 , 25 @ @ public interface WinDef extends StdCallLibrary { 
 	 	 } 
 	 } 
 
 + 	 public class UINTbyReference extends ByReference { 
 + 	 	 public UINTbyReference ( ) { 
 + 	 	 	 this ( new UINT ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public UINTbyReference ( UINT value ) { 
 + 	 	 	 super ( UINT . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 + 	 	 } 
 + 
 + 	 	 public void setValue ( UINT value ) { 
 + 	 	 	 getPointer ( ) . setInt ( 0 , value . intValue ( ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public UINT getValue ( ) { 
 + 	 	 	 return new UINT ( getPointer ( ) . getInt ( 0 ) ) ; 
 + 	 	 } 
 + 	 } 
 + 
 	 / * * 
 	 * The Class SCODE . 
 	 * / 
 @ @ - 872 , 19 + 978 , 31 @ @ public interface WinDef extends StdCallLibrary { 
 
 	 	 / * * 
 	 	 * Instantiates a new scode . 
 - 	 	 * 
 + 	 	 * 
 	 	 * @ param value 
 	 	 * the value 
 	 	 * / 
 	 	 public SCODE ( long value ) { 
 	 	 	 super ( value ) ; 
 	 	 } 
 + 	 } 
 
 - 	 	 / * * 
 - 	 	 * The Class ByReference . 
 - 	 	 * / 
 - 	 	 public static class ByReference implements Structure . ByReference { 
 + 	 public static class SCODEbyReference extends ByReference { 
 + 	 	 public SCODEbyReference ( ) { 
 + 	 	 	 this ( new SCODE ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public SCODEbyReference ( SCODE value ) { 
 + 	 	 	 super ( SCODE . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 + 	 	 } 
 + 
 + 	 	 public void setValue ( SCODE value ) { 
 + 	 	 	 getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; 
 + 	 	 } 
 
 + 	 	 public SCODE getValue ( ) { 
 + 	 	 	 return new SCODE ( getPointer ( ) . getLong ( 0 ) ) ; 
 	 	 } 
 	 } 
 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java 
 index b68094f . . 8510468 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / OleAut32UtilTest . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import junit . framework . TestCase ; 
 
 import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 + import com . sun . jna . platform . win32 . WinDef . SHORT ; 
 import com . sun . jna . platform . win32 . COM . COMException ; 
 
 / * * 
 @ @ - 28 , 8 + 29 , 7 @ @ public class OleAut32UtilTest extends TestCase { 
 	 } 
 
 	 public void testCreateVarArray ( ) { 
 - 	 	 SAFEARRAY varArray = OleAut32Util 
 - 	 	 	 	 . createVarArray ( Variant . VT _ VARIANT , 10 ) ; 
 + 	 	 SAFEARRAY varArray = OleAut32Util . createVarArray ( Variant . VT _ VARIANT , 1 ) ; 
 	 	 assertTrue ( varArray ! = null ) ; 
 	 } 
 
 @ @ - 38 , 7 + 38 , 7 @ @ public class OleAut32UtilTest extends TestCase { 
 
 	 	 for ( int i = 0 ; i < 1 ; i + + ) { 
 	 	 	 try { 
 - 	 	 	 	 VARIANT variant = new VARIANT ( i + 3333333 ) ; 
 + 	 	 	 	 VARIANT variant = new VARIANT ( new SHORT ( i + 3333 ) ) ; 
 	 	 	 	 System . out . println ( variant . toString ( true ) ) ; 
 	 	 	 	 OleAut32Util . SafeArrayPutElement ( varArray , i , variant ) ; 
 	 	 	 } catch ( COMException e ) { 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java 
 index fd06816 . . 1d18142 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / VariantTest . java 
 @ @ - 2 , 9 + 2 , 8 @ @ package com . sun . jna . platform . win32 ; 
 
 import junit . framework . TestCase ; 
 
 - import com . sun . jna . platform . win32 . Guid . GUID ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 - import com . sun . jna . platform . win32 . WinDef . HWND ; 
 + import com . sun . jna . platform . win32 . WinDef . SHORT ; 
 
 public class VariantTest extends TestCase { 
 
 @ @ - 16 , 7 + 15 , 7 @ @ public class VariantTest extends TestCase { 
 	 } 
 
 	 public void testVariant ( ) { 
 - 	 	 VARIANT variant = new VARIANT ( 33333 ) ; 
 + 	 	 VARIANT variant = new VARIANT ( new SHORT ( 33333 ) ) ; 
 	 	 System . out . println ( variant . toString ( false ) ) ; 
 
 	 	 VARIANT variant2 = new VARIANT ( variant . getPointer ( ) ) ;
