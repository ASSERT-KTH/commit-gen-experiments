BLEU SCORE: 0.2722230298303347

TEST MSG: Update release documentation
GENERATED MSG: Update ReleasingJNA . md

TEST DIFF (one line): diff - - git a / www / ReleasingJNA . md b / www / ReleasingJNA . md <nl> index 71d29dd . . 2b22e09 100644 <nl> - - - a / www / ReleasingJNA . md <nl> + + + b / www / ReleasingJNA . md <nl> @ @ - 1 , 37 + 1 , 36 @ @ <nl> JNA Release Process <nl> = = = = = = = = = = = = = = = = = = = <nl> <nl> - * Bump version in CHANGES . md and build . xml , if not already . <nl> - * Change JNI version in build . xml * only * if JNA ' s native API has been changed ( i . e . md5 changed ) . <nl> + * Bump version in CHANGES . md and build . xml , if not already . <nl> + * Change JNI version in build . xml * only * if JNA ' s native API has been changed ( i . e . md5 changed ) . <nl> * Bump JNA minor version if its Java API has changed significantly or incompatibly . <nl> <nl> * If native changes have been made , run ` ant native ` target on each target <nl> platform , pushing the resulting target - specific jar ( in lib / native ) file to master . <nl> <nl> - * Run ` ant - Drelease = true clean dist ` target on a fully up - to - date checkout with no modifications . Commit generated files in ` dist ` . <nl> - * You will also see differences in the pom - * . xml files and src / . . . / Native . java . Do not commit these files . <nl> + * Run ` ant - Drelease = true clean dist ` target on a fully up - to - date checkout with no modifications . <nl> <nl> - * Update Javadoc <nl> - * Check out gh - pages branch <nl> - * Copy latest doc / javadoc into { version } / javadoc <nl> - * Commit and push <nl> + * Update versioned links in ` README . md ` ( search for old version and replace with new version ) <nl> <nl> - * Update versioned links <nl> - * Switch back to master branch <nl> - * Update links in README . md ( download and javadoc ) <nl> - * Commit and push <nl> + * Update ` CHANGES . md ` : remove the ` Next release ` label and replace it with the final version number . While doing this also check if the version number matches the release : major version should incremented when API incompatible changes are made , minor version should be incremented when features are added , revision should be updated when bugfixes are done . <nl> + <nl> + * Commit and push generated files in ` dist ` , ` pom - * . xml ` , ` CHANGES . md ` , ` README . md ` and ` src / com / sun / jna / Version . java ` . <nl> <nl> * Tag <nl> * Tag using the new version number ( e . g . ` git tag 4 . 2 . 1 ` ) <nl> * Push new tag to origin ( ` git push - - tags ` ) <nl> <nl> + * Update Javadoc <nl> + * Check out gh - pages branch <nl> + * Copy latest doc / javadoc into { version } / javadoc <nl> + * Commit and push <nl> + <nl> * [ Release to Maven Central ] ( PublishingToMavenCentral . md ) <nl> <nl> * Email release notice to [ jna - users Google group ] ( http : / / groups . google . com / group / jna - users ) . <nl> <nl> * Increment the version in build . xml for the next development iteration <nl> * Increment " jna . revision " in build . xml by one <nl> - * Increment " android . versionCode " in build . xml by one <nl> * Create a new section in CHANGES . md for ' Next Release ( x . y . z ) ' <nl> * Commit and push <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / www / ReleasingJNA . md b / www / ReleasingJNA . md 
 index 71d29dd . . 2b22e09 100644 
 - - - a / www / ReleasingJNA . md 
 + + + b / www / ReleasingJNA . md 
 @ @ - 1 , 37 + 1 , 36 @ @ 
 JNA Release Process 
 = = = = = = = = = = = = = = = = = = = 
 
 - * Bump version in CHANGES . md and build . xml , if not already . 
 - * Change JNI version in build . xml * only * if JNA ' s native API has been changed ( i . e . md5 changed ) . 
 + * Bump version in CHANGES . md and build . xml , if not already . 
 + * Change JNI version in build . xml * only * if JNA ' s native API has been changed ( i . e . md5 changed ) . 
 * Bump JNA minor version if its Java API has changed significantly or incompatibly . 
 
 * If native changes have been made , run ` ant native ` target on each target 
 platform , pushing the resulting target - specific jar ( in lib / native ) file to master . 
 
 - * Run ` ant - Drelease = true clean dist ` target on a fully up - to - date checkout with no modifications . Commit generated files in ` dist ` . 
 - * You will also see differences in the pom - * . xml files and src / . . . / Native . java . Do not commit these files . 
 + * Run ` ant - Drelease = true clean dist ` target on a fully up - to - date checkout with no modifications . 
 
 - * Update Javadoc 
 - * Check out gh - pages branch 
 - * Copy latest doc / javadoc into { version } / javadoc 
 - * Commit and push 
 + * Update versioned links in ` README . md ` ( search for old version and replace with new version ) 
 
 - * Update versioned links 
 - * Switch back to master branch 
 - * Update links in README . md ( download and javadoc ) 
 - * Commit and push 
 + * Update ` CHANGES . md ` : remove the ` Next release ` label and replace it with the final version number . While doing this also check if the version number matches the release : major version should incremented when API incompatible changes are made , minor version should be incremented when features are added , revision should be updated when bugfixes are done . 
 + 
 + * Commit and push generated files in ` dist ` , ` pom - * . xml ` , ` CHANGES . md ` , ` README . md ` and ` src / com / sun / jna / Version . java ` . 
 
 * Tag 
 * Tag using the new version number ( e . g . ` git tag 4 . 2 . 1 ` ) 
 * Push new tag to origin ( ` git push - - tags ` ) 
 
 + * Update Javadoc 
 + * Check out gh - pages branch 
 + * Copy latest doc / javadoc into { version } / javadoc 
 + * Commit and push 
 + 
 * [ Release to Maven Central ] ( PublishingToMavenCentral . md ) 
 
 * Email release notice to [ jna - users Google group ] ( http : / / groups . google . com / group / jna - users ) . 
 
 * Increment the version in build . xml for the next development iteration 
 * Increment " jna . revision " in build . xml by one 
 - * Increment " android . versionCode " in build . xml by one 
 * Create a new section in CHANGES . md for ' Next Release ( x . y . z ) ' 
 * Commit and push 


NEAREST DIFF:
ELIMINATEDSENTENCE
