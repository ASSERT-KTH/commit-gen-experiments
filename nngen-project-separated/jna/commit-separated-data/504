BLEU SCORE: 0.10682175159905853

TEST MSG: avoid inadvertent AWT library load
GENERATED MSG: catch all AWT loading errors

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Platform . java b / src / com / sun / jna / Platform . java <nl> index 1f1adc3 . . 329bcc5 100644 <nl> - - - a / src / com / sun / jna / Platform . java <nl> + + + b / src / com / sun / jna / Platform . java <nl> @ @ - 79 , 15 + 79 , 6 @ @ public final class Platform { <nl> else { <nl> osType = UNSPECIFIED ; <nl> } <nl> - boolean hasAWT = false ; <nl> - try { <nl> - Class . forName ( " java . awt . Component " ) ; <nl> - hasAWT = true ; <nl> - } <nl> - catch ( Throwable t ) { <nl> - / / Don ' t care why <nl> - } <nl> - HAS _ AWT = hasAWT ; <nl> boolean hasBuffers = false ; <nl> try { <nl> Class . forName ( " java . nio . Buffer " ) ; <nl> @ @ - 95 , 6 + 86 , 10 @ @ public final class Platform { <nl> } <nl> catch ( ClassNotFoundException e ) { <nl> } <nl> + / / NOTE : we used to do Class . forName ( " java . awt . Component " ) , but that <nl> + / / has the unintended side effect of actually loading AWT native libs , <nl> + / / which can be problematic <nl> + HAS _ AWT = osType ! = WINDOWSCE & & osType ! = ANDROID & & osType ! = AIX ; <nl> HAS _ BUFFERS = hasBuffers ; <nl> RO _ FIELDS = osType ! = WINDOWSCE ; <nl> C _ LIBRARY _ NAME = osType = = WINDOWS ? " msvcrt " : osType = = WINDOWSCE ? " coredll " : " c " ;
NEAREST DIFF (one line): diff - - git a / . gitignore b / . gitignore <nl> index 293761d . . e6984c3 100644 <nl> - - - a / . gitignore <nl> + + + b / . gitignore <nl> @ @ - 10 , 7 + 10 , 8 @ @ contrib / platform / dist <nl> doc <nl> * ~ <nl> * * / * ~ <nl> - dist / jna - * - javadoc . jar <nl> + dist / * . asc <nl> + dist / * - sources . jar <nl> + dist / * - javadoc . jar <nl> dist / src - mvn . zip <nl> dist / out - of - date . jar <nl> - <nl> diff - - git a / src / com / sun / jna / Library . java b / src / com / sun / jna / Library . java <nl> index 5cc6e6d . . 7ca76c8 100644 <nl> - - - a / src / com / sun / jna / Library . java <nl> + + + b / src / com / sun / jna / Library . java <nl> @ @ - 81 , 6 + 81 , 8 @ @ public interface Library { <nl> String OPTION _ ALLOW _ OBJECTS = " allow - objects " ; <nl> / * * Calling convention for the entire library . * / <nl> String OPTION _ CALLING _ CONVENTION = " calling - convention " ; <nl> + / * * Flags to use when opening the native library ( see { @ link Native # open ( String , int ) } ) * / <nl> + String OPTION _ OPEN _ FLAGS = " open - flags " ; <nl> <nl> static class Handler implements InvocationHandler { <nl> <nl> diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java <nl> index a4dec0e . . b62afa7 100644 <nl> - - - a / src / com / sun / jna / NativeLibrary . java <nl> + + + b / src / com / sun / jna / NativeLibrary . java <nl> @ @ - 96 , 8 + 96 , 19 @ @ public class NativeLibrary { <nl> } <nl> } <nl> <nl> + private static final int DEFAULT _ OPEN _ OPTIONS = - 1 ; <nl> + private static int openFlags ( Map options ) { <nl> + try { <nl> + return ( ( Integer ) options . get ( Library . OPTION _ OPEN _ FLAGS ) ) . intValue ( ) ; <nl> + } <nl> + catch ( Throwable t ) { <nl> + return DEFAULT _ OPEN _ OPTIONS ; <nl> + } <nl> + } <nl> + <nl> private static NativeLibrary loadLibrary ( String libraryName , Map options ) { <nl> List searchPath = new LinkedList ( ) ; <nl> + int openFlags = openFlags ( options ) ; <nl> <nl> / / Append web start path , if available . Note that this does not <nl> / / attempt any library name variations <nl> @ @ - 125 , 7 + 136 , 7 @ @ public class NativeLibrary { <nl> / / name if it cannot find the library . <nl> / / <nl> try { <nl> - handle = Native . open ( libraryPath ) ; <nl> + handle = Native . open ( libraryPath , openFlags ) ; <nl> } <nl> catch ( UnsatisfiedLinkError e ) { <nl> / / Add the system paths back for all fallback searching <nl> @ @ - 134 , 7 + 145 , 7 @ @ public class NativeLibrary { <nl> try { <nl> if ( handle = = 0 ) { <nl> libraryPath = findLibraryPath ( libraryName , searchPath ) ; <nl> - handle = Native . open ( libraryPath ) ; <nl> + handle = Native . open ( libraryPath , openFlags ) ; <nl> if ( handle = = 0 ) { <nl> throw new UnsatisfiedLinkError ( " Failed to load library ' " + libraryName + " ' " ) ; <nl> } <nl> @ @ - 147 , 7 + 158 , 7 @ @ public class NativeLibrary { <nl> if ( Platform . isAndroid ( ) ) { <nl> try { <nl> System . loadLibrary ( libraryName ) ; <nl> - handle = Native . open ( libraryPath ) ; <nl> + handle = Native . open ( libraryPath , openFlags ) ; <nl> } <nl> catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } <nl> } <nl> @ @ - 158 , 7 + 169 , 7 @ @ public class NativeLibrary { <nl> libraryPath = matchLibrary ( libraryName , searchPath ) ; <nl> if ( libraryPath ! = null ) { <nl> try { <nl> - handle = Native . open ( libraryPath ) ; <nl> + handle = Native . open ( libraryPath , openFlags ) ; <nl> } <nl> catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } <nl> } <nl> @ @ - 168 , 7 + 179 , 7 @ @ public class NativeLibrary { <nl> libraryPath = matchFramework ( libraryName ) ; <nl> if ( libraryPath ! = null ) { <nl> try { <nl> - handle = Native . open ( libraryPath ) ; <nl> + handle = Native . open ( libraryPath , openFlags ) ; <nl> } <nl> catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } <nl> } <nl> @ @ - 176 , 7 + 187 , 7 @ @ public class NativeLibrary { <nl> / / Try the same library with a " lib " prefix <nl> else if ( Platform . isWindows ( ) ) { <nl> libraryPath = findLibraryPath ( " lib " + libraryName , searchPath ) ; <nl> - try { handle = Native . open ( libraryPath ) ; } <nl> + try { handle = Native . open ( libraryPath , openFlags ) ; } <nl> catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } <nl> } <nl> if ( handle = = 0 ) { <nl> @ @ - 256 , 7 + 267 , 8 @ @ public class NativeLibrary { <nl> <nl> / / Use current process to load libraries we know are already <nl> / / loaded by the VM to ensure we get the correct version <nl> - if ( ( Platform . isLinux ( ) | | Platform . isAix ( ) ) & & " c " . equals ( libraryName ) ) { <nl> + if ( ( Platform . isLinux ( ) | | Platform . isAix ( ) ) <nl> + & & Platform . C _ LIBRARY _ NAME . equals ( libraryName ) ) { <nl> libraryName = null ; <nl> } <nl> synchronized ( libraries ) { <nl> @ @ - 265 , 7 + 277 , 7 @ @ public class NativeLibrary { <nl> <nl> if ( library = = null ) { <nl> if ( libraryName = = null ) { <nl> - library = new NativeLibrary ( " < process > " , null , Native . open ( null ) , options ) ; <nl> + library = new NativeLibrary ( " < process > " , null , Native . open ( null , openFlags ( options ) ) , options ) ; <nl> } <nl> else { <nl> library = loadLibrary ( libraryName , options ) ; <nl> diff - - git a / test / com / sun / jna / NativeLibraryTest . java b / test / com / sun / jna / NativeLibraryTest . java <nl> index 23d0b78 . . 5f7d756 100644 <nl> - - - a / test / com / sun / jna / NativeLibraryTest . java <nl> + + + b / test / com / sun / jna / NativeLibraryTest . java <nl> @ @ - 15 , 7 + 15 , 9 @ @ package com . sun . jna ; <nl> import java . io . File ; <nl> import java . lang . ref . WeakReference ; <nl> import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> import junit . framework . TestCase ; <nl> <nl> @ @ - 217 , 6 + 219 , 12 @ @ public class NativeLibraryTest extends TestCase { <nl> } <nl> } <nl> <nl> + public void testLoadLibraryWithOptions ( ) { <nl> + Map options = new HashMap ( ) ; <nl> + options . put ( Library . OPTION _ OPEN _ FLAGS , new Integer ( - 1 ) ) ; <nl> + Native . loadLibrary ( " testlib " , TestLibrary . class , options ) ; <nl> + } <nl> + <nl> public static void main ( String [ ] args ) { <nl> junit . textui . TestRunner . run ( NativeLibraryTest . class ) ; <nl> }

TEST DIFF:
diff - - git a / src / com / sun / jna / Platform . java b / src / com / sun / jna / Platform . java 
 index 1f1adc3 . . 329bcc5 100644 
 - - - a / src / com / sun / jna / Platform . java 
 + + + b / src / com / sun / jna / Platform . java 
 @ @ - 79 , 15 + 79 , 6 @ @ public final class Platform { 
 else { 
 osType = UNSPECIFIED ; 
 } 
 - boolean hasAWT = false ; 
 - try { 
 - Class . forName ( " java . awt . Component " ) ; 
 - hasAWT = true ; 
 - } 
 - catch ( Throwable t ) { 
 - / / Don ' t care why 
 - } 
 - HAS _ AWT = hasAWT ; 
 boolean hasBuffers = false ; 
 try { 
 Class . forName ( " java . nio . Buffer " ) ; 
 @ @ - 95 , 6 + 86 , 10 @ @ public final class Platform { 
 } 
 catch ( ClassNotFoundException e ) { 
 } 
 + / / NOTE : we used to do Class . forName ( " java . awt . Component " ) , but that 
 + / / has the unintended side effect of actually loading AWT native libs , 
 + / / which can be problematic 
 + HAS _ AWT = osType ! = WINDOWSCE & & osType ! = ANDROID & & osType ! = AIX ; 
 HAS _ BUFFERS = hasBuffers ; 
 RO _ FIELDS = osType ! = WINDOWSCE ; 
 C _ LIBRARY _ NAME = osType = = WINDOWS ? " msvcrt " : osType = = WINDOWSCE ? " coredll " : " c " ;

NEAREST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index 293761d . . e6984c3 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 10 , 7 + 10 , 8 @ @ contrib / platform / dist 
 doc 
 * ~ 
 * * / * ~ 
 - dist / jna - * - javadoc . jar 
 + dist / * . asc 
 + dist / * - sources . jar 
 + dist / * - javadoc . jar 
 dist / src - mvn . zip 
 dist / out - of - date . jar 
 - 
 diff - - git a / src / com / sun / jna / Library . java b / src / com / sun / jna / Library . java 
 index 5cc6e6d . . 7ca76c8 100644 
 - - - a / src / com / sun / jna / Library . java 
 + + + b / src / com / sun / jna / Library . java 
 @ @ - 81 , 6 + 81 , 8 @ @ public interface Library { 
 String OPTION _ ALLOW _ OBJECTS = " allow - objects " ; 
 / * * Calling convention for the entire library . * / 
 String OPTION _ CALLING _ CONVENTION = " calling - convention " ; 
 + / * * Flags to use when opening the native library ( see { @ link Native # open ( String , int ) } ) * / 
 + String OPTION _ OPEN _ FLAGS = " open - flags " ; 
 
 static class Handler implements InvocationHandler { 
 
 diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java 
 index a4dec0e . . b62afa7 100644 
 - - - a / src / com / sun / jna / NativeLibrary . java 
 + + + b / src / com / sun / jna / NativeLibrary . java 
 @ @ - 96 , 8 + 96 , 19 @ @ public class NativeLibrary { 
 } 
 } 
 
 + private static final int DEFAULT _ OPEN _ OPTIONS = - 1 ; 
 + private static int openFlags ( Map options ) { 
 + try { 
 + return ( ( Integer ) options . get ( Library . OPTION _ OPEN _ FLAGS ) ) . intValue ( ) ; 
 + } 
 + catch ( Throwable t ) { 
 + return DEFAULT _ OPEN _ OPTIONS ; 
 + } 
 + } 
 + 
 private static NativeLibrary loadLibrary ( String libraryName , Map options ) { 
 List searchPath = new LinkedList ( ) ; 
 + int openFlags = openFlags ( options ) ; 
 
 / / Append web start path , if available . Note that this does not 
 / / attempt any library name variations 
 @ @ - 125 , 7 + 136 , 7 @ @ public class NativeLibrary { 
 / / name if it cannot find the library . 
 / / 
 try { 
 - handle = Native . open ( libraryPath ) ; 
 + handle = Native . open ( libraryPath , openFlags ) ; 
 } 
 catch ( UnsatisfiedLinkError e ) { 
 / / Add the system paths back for all fallback searching 
 @ @ - 134 , 7 + 145 , 7 @ @ public class NativeLibrary { 
 try { 
 if ( handle = = 0 ) { 
 libraryPath = findLibraryPath ( libraryName , searchPath ) ; 
 - handle = Native . open ( libraryPath ) ; 
 + handle = Native . open ( libraryPath , openFlags ) ; 
 if ( handle = = 0 ) { 
 throw new UnsatisfiedLinkError ( " Failed to load library ' " + libraryName + " ' " ) ; 
 } 
 @ @ - 147 , 7 + 158 , 7 @ @ public class NativeLibrary { 
 if ( Platform . isAndroid ( ) ) { 
 try { 
 System . loadLibrary ( libraryName ) ; 
 - handle = Native . open ( libraryPath ) ; 
 + handle = Native . open ( libraryPath , openFlags ) ; 
 } 
 catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } 
 } 
 @ @ - 158 , 7 + 169 , 7 @ @ public class NativeLibrary { 
 libraryPath = matchLibrary ( libraryName , searchPath ) ; 
 if ( libraryPath ! = null ) { 
 try { 
 - handle = Native . open ( libraryPath ) ; 
 + handle = Native . open ( libraryPath , openFlags ) ; 
 } 
 catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } 
 } 
 @ @ - 168 , 7 + 179 , 7 @ @ public class NativeLibrary { 
 libraryPath = matchFramework ( libraryName ) ; 
 if ( libraryPath ! = null ) { 
 try { 
 - handle = Native . open ( libraryPath ) ; 
 + handle = Native . open ( libraryPath , openFlags ) ; 
 } 
 catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } 
 } 
 @ @ - 176 , 7 + 187 , 7 @ @ public class NativeLibrary { 
 / / Try the same library with a " lib " prefix 
 else if ( Platform . isWindows ( ) ) { 
 libraryPath = findLibraryPath ( " lib " + libraryName , searchPath ) ; 
 - try { handle = Native . open ( libraryPath ) ; } 
 + try { handle = Native . open ( libraryPath , openFlags ) ; } 
 catch ( UnsatisfiedLinkError e2 ) { e = e2 ; } 
 } 
 if ( handle = = 0 ) { 
 @ @ - 256 , 7 + 267 , 8 @ @ public class NativeLibrary { 
 
 / / Use current process to load libraries we know are already 
 / / loaded by the VM to ensure we get the correct version 
 - if ( ( Platform . isLinux ( ) | | Platform . isAix ( ) ) & & " c " . equals ( libraryName ) ) { 
 + if ( ( Platform . isLinux ( ) | | Platform . isAix ( ) ) 
 + & & Platform . C _ LIBRARY _ NAME . equals ( libraryName ) ) { 
 libraryName = null ; 
 } 
 synchronized ( libraries ) { 
 @ @ - 265 , 7 + 277 , 7 @ @ public class NativeLibrary { 
 
 if ( library = = null ) { 
 if ( libraryName = = null ) { 
 - library = new NativeLibrary ( " < process > " , null , Native . open ( null ) , options ) ; 
 + library = new NativeLibrary ( " < process > " , null , Native . open ( null , openFlags ( options ) ) , options ) ; 
 } 
 else { 
 library = loadLibrary ( libraryName , options ) ; 
 diff - - git a / test / com / sun / jna / NativeLibraryTest . java b / test / com / sun / jna / NativeLibraryTest . java 
 index 23d0b78 . . 5f7d756 100644 
 - - - a / test / com / sun / jna / NativeLibraryTest . java 
 + + + b / test / com / sun / jna / NativeLibraryTest . java 
 @ @ - 15 , 7 + 15 , 9 @ @ package com . sun . jna ; 
 import java . io . File ; 
 import java . lang . ref . WeakReference ; 
 import java . util . Arrays ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 + import java . util . Map ; 
 
 import junit . framework . TestCase ; 
 
 @ @ - 217 , 6 + 219 , 12 @ @ public class NativeLibraryTest extends TestCase { 
 } 
 } 
 
 + public void testLoadLibraryWithOptions ( ) { 
 + Map options = new HashMap ( ) ; 
 + options . put ( Library . OPTION _ OPEN _ FLAGS , new Integer ( - 1 ) ) ; 
 + Native . loadLibrary ( " testlib " , TestLibrary . class , options ) ; 
 + } 
 + 
 public static void main ( String [ ] args ) { 
 junit . textui . TestRunner . run ( NativeLibraryTest . class ) ; 
 }
