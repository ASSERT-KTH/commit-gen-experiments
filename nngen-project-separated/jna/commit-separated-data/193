BLEU SCORE: 0.020980574531482755

TEST MSG: Make REFIID a real pointer type to fix native callbacks
GENERATED MSG: more cleanup

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> index 1ac91bb . . f6794ae 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java <nl> @ @ - 17 , 9 + 17 , 9 @ @ import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import com . sun . jna . PointerType ; <nl> import com . sun . jna . Structure ; <nl> <nl> - / / TODO : Auto - generated Javadoc <nl> / * * <nl> * Ported from Guid . h . Microsoft Windows SDK 6 . 0A . <nl> * <nl> @ @ - 465 , 17 + 465 , 30 @ @ public interface Guid { <nl> } <nl> <nl> / * * <nl> - * The Class REFIID . <nl> - * <nl> - * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> + * REFIID is a pointer to an IID . <nl> + * <nl> + * This type needs to be seperate from IID , as the REFIID can be passed in <nl> + * from external code , that does not allow writes to memory . <nl> + * <nl> + * With the normal JNA behaviour a structure , that crosses the native < - > Java <nl> + * border will be autowritten , which causes a fault when written . <nl> + * Observed was this behaviour in COM - Callbacks , which get the REFIID passed <nl> + * into Invoke - method . <nl> + * <nl> + * So a IID can ' t be used directly , although the typedef of REFIID ( from MSDN ) : <nl> + * <nl> + * typedef IID * REFIID ; <nl> + * <nl> + * and the jna behaviour is described as : <nl> + * <nl> + * " When a function requires a pointer to a struct , a Java Structure should be used . " <nl> * / <nl> - public class REFIID extends IID { <nl> + public class REFIID extends PointerType { <nl> <nl> / * * <nl> * Instantiates a new refiid . <nl> * / <nl> public REFIID ( ) { <nl> - super ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 488 , 21 + 501 , 20 @ @ public interface Guid { <nl> super ( memory ) ; <nl> } <nl> <nl> - / * * <nl> - * Instantiates a new refiid . <nl> - * <nl> - * @ param data <nl> - * the data <nl> - * / <nl> - public REFIID ( byte [ ] data ) { <nl> - super ( data ) ; <nl> + public REFIID ( IID guid ) { <nl> + super ( guid . getPointer ( ) ) ; <nl> + } <nl> + <nl> + public void setValue ( IID value ) { <nl> + setPointer ( value . getPointer ( ) ) ; <nl> } <nl> <nl> - public REFIID ( GUID guid ) { <nl> - super ( guid ) ; <nl> + public IID getValue ( ) { <nl> + return new IID ( getPointer ( ) ) ; <nl> } <nl> + <nl> } <nl> - <nl> + <nl> / * * <nl> * The Class IID . <nl> * <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java <nl> index f7b8a0c . . 4b730f4 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java <nl> @ @ - 1 , 202 + 1 , 363 @ @ <nl> - / * Copyright ( c ) 2014 Dr David H . Akehurst ( itemis ) , All Rights Reserved <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation ; either <nl> - * version 2 . 1 of the License , or ( at your option ) any later version . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * / <nl> - package com . sun . jna . platform . win32 . COM ; <nl> - <nl> - import org . junit . After ; <nl> - import org . junit . Assert ; <nl> - import org . junit . Before ; <nl> - import org . junit . Test ; <nl> - <nl> - import com . sun . jna . Pointer ; <nl> - import com . sun . jna . WString ; <nl> - import com . sun . jna . platform . win32 . Guid ; <nl> - import com . sun . jna . platform . win32 . Guid . CLSID ; <nl> - import com . sun . jna . platform . win32 . Guid . IID ; <nl> - import com . sun . jna . platform . win32 . Guid . REFIID ; <nl> - import com . sun . jna . platform . win32 . Kernel32 ; <nl> - import com . sun . jna . platform . win32 . OaIdl . DISPID ; <nl> - import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; <nl> - import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; <nl> - import com . sun . jna . platform . win32 . Ole32 ; <nl> - import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; <nl> - import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> - import com . sun . jna . platform . win32 . WTypes ; <nl> - import com . sun . jna . platform . win32 . WinDef ; <nl> - import com . sun . jna . platform . win32 . WinDef . DWORDByReference ; <nl> - import com . sun . jna . platform . win32 . WinDef . LCID ; <nl> - import com . sun . jna . platform . win32 . WinDef . UINT ; <nl> - import com . sun . jna . platform . win32 . WinDef . UINTByReference ; <nl> - import com . sun . jna . platform . win32 . WinDef . WORD ; <nl> - import com . sun . jna . platform . win32 . WinError ; <nl> - import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> - import com . sun . jna . ptr . IntByReference ; <nl> - import com . sun . jna . ptr . PointerByReference ; <nl> - <nl> - public class ComEventCallbacks _ Test { <nl> - <nl> - 	 final String WORD _ APPLICATION _ INTERFACE = " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ; <nl> - 	 final String APPLICATION _ EVENTS _ 4 = " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ; <nl> - 	 <nl> - 	 @ Before <nl> - 	 public void before ( ) { <nl> - 	 	 HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( null , Ole32 . COINIT _ MULTITHREADED ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 } <nl> - <nl> - 	 @ After <nl> - 	 public void after ( ) { <nl> - 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> - 	 } <nl> - <nl> - 	 class Application _ Events4 implements IDispatchCallback { <nl> - 	 	 public DispatchListener listener = new DispatchListener ( this ) ; <nl> - <nl> - 	 	 @ Override <nl> - 	 	 public Pointer getPointer ( ) { <nl> - 	 	 	 return this . listener . getPointer ( ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IDispatch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT GetTypeInfoCount ( UINTByReference pctinfo ) { <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , PointerByReference ppTInfo ) { <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , DISPIDByReference rgDispId ) { <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 public boolean Invoke _ called = false ; <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , <nl> - 	 WORD wFlags , DISPPARAMS . ByReference pDispParams , <nl> - 	 VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> - 	 IntByReference puArgErr ) { <nl> - 	 	 	 this . Invoke _ called = true ; <nl> - 	 	 	 <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> - 	 	 } <nl> - 	 	 <nl> - 	 	 <nl> - 	 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IUnknown - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - 	 	 public boolean QueryInterface _ called = false ; <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT QueryInterface ( REFIID refid , PointerByReference ppvObject ) { <nl> - 	 	 	 this . QueryInterface _ called = true ; <nl> - 	 	 	 if ( null = = ppvObject ) { <nl> - 	 	 	 	 return new HRESULT ( WinError . E _ POINTER ) ; <nl> - 	 	 	 } <nl> - <nl> - 	 	 	 String s = refid . toGuidString ( ) ; <nl> - 	 	 	 IID appEvnts4 = new IID ( APPLICATION _ EVENTS _ 4 ) ; <nl> - 	 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; <nl> - <nl> - 	 	 	 if ( refid . equals ( riid ) ) { <nl> - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; <nl> - 	 	 	 	 return WinError . S _ OK ; <nl> - 	 	 	 } <nl> - 	 	 	 <nl> - 	 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Unknown . IID _ IUNKNOWN ) ) { <nl> - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; <nl> - 	 	 	 	 return WinError . S _ OK ; <nl> - 	 	 	 } <nl> - 	 	 	 <nl> - 	 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Dispatch . IID _ IDISPATCH ) ) { <nl> - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; <nl> - 	 	 	 	 return WinError . S _ OK ; <nl> - 	 	 	 } <nl> - 	 	 	 <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOINTERFACE ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 public int AddRef ( ) { <nl> - 	 	 	 return 0 ; <nl> - 	 	 } <nl> - <nl> - 	 	 public int Release ( ) { <nl> - 	 	 	 return 0 ; <nl> - 	 	 } <nl> - <nl> - 	 } <nl> - <nl> - 	 @ Test <nl> - 	 public void cause _ Quit _ Event ( ) { <nl> - 	 	 / / Create word object <nl> - 	 	 CLSID clsid = new CLSID ( " { 000209FF - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> - 	 	 PointerByReference ppWordApp = new PointerByReference ( ) ; <nl> - 	 	 HRESULT hr = Ole32 . INSTANCE <nl> - 	 	 	 	 . CoCreateInstance ( clsid , null , WTypes . CLSCTX _ SERVER , IDispatch . IID _ IDISPATCH , ppWordApp ) ; <nl> - / / 	 	 HRESULT hr = OleAuto . INSTANCE . GetActiveObject ( clsid , null , ppWordApp ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 <nl> - 	 	 / / query for ConnectionPointContainer <nl> - 	 	 Unknown unk = new Unknown ( ppWordApp . getValue ( ) ) ; <nl> - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; <nl> - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; <nl> - 	 	 hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; <nl> - <nl> - 	 	 / / find connection point for Application _ Events4 <nl> - 	 	 IID appEvnts4 = new IID ( APPLICATION _ EVENTS _ 4 ) ; <nl> - 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; <nl> - 	 	 PointerByReference ppCp = new PointerByReference ( ) ; <nl> - 	 	 hr = cpc . FindConnectionPoint ( riid , ppCp ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 final ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; <nl> - 	 	 IID cp _ iid = new IID ( ) ; <nl> - 	 	 hr = cp . GetConnectionInterface ( cp _ iid ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - <nl> - 	 	 final Application _ Events4 listener = new Application _ Events4 ( ) ; <nl> - 	 	 final DWORDByReference pdwCookie = new DWORDByReference ( ) ; <nl> - 	 	 HRESULT hr1 = cp . Advise ( listener , pdwCookie ) ; <nl> - 	 	 COMUtils . checkRC ( hr1 ) ; <nl> - <nl> - / / 	 	 Assert . assertTrue ( listener . QueryInterface _ called ) ; <nl> - / / 	 	 <nl> - 	 	 / / Call Quit <nl> - 	 	 Dispatch d = new Dispatch ( ppWordApp . getValue ( ) ) ; <nl> - 	 	 DISPID dispIdMember = new DISPID ( 1105 ) ; / / Quit <nl> - 	 	 REFIID niid = new REFIID ( Guid . IID _ NULL ) ; <nl> - 	 	 LCID lcid = Kernel32 . INSTANCE . GetSystemDefaultLCID ( ) ; <nl> - 	 	 WinDef . WORD wFlags = new WinDef . WORD ( 1 ) ; <nl> - 	 	 DISPPARAMS . ByReference pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> - 	 	 VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; <nl> - 	 	 IntByReference puArgErr = new IntByReference ( ) ; <nl> - 	 	 EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; <nl> - 	 	 hr = d . Invoke ( dispIdMember , niid , lcid , wFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 <nl> - 	 	 / / Wait for event to happen <nl> - 	 	 try { <nl> - 	 	 	 Thread . sleep ( 200 ) ; <nl> - / / 	 	 	 WinUser . MSG msg = new WinUser . MSG ( ) ; <nl> - / / 	 	 	 while ( ( ( User32 . INSTANCE . GetMessage ( msg , null , 0 , 0 ) ) ! = 0 ) ) { <nl> - / / 	 	 	 User32 . INSTANCE . TranslateMessage ( msg ) ; <nl> - / / 	 	 	 User32 . INSTANCE . DispatchMessage ( msg ) ; <nl> - / / 	 	 	 } <nl> - 	 	 } catch ( Exception e ) { <nl> - 	 	 	 e . printStackTrace ( ) ; <nl> - 	 	 } <nl> - 	 	 <nl> - 	 	 Assert . assertTrue ( listener . Invoke _ called ) ; <nl> - 	 } <nl> - <nl> - } <nl> + / * Copyright ( c ) 2014 Dr David H . Akehurst ( itemis ) , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 . COM ; <nl> + <nl> + import org . junit . After ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . WString ; <nl> + import com . sun . jna . platform . win32 . Guid ; <nl> + import com . sun . jna . platform . win32 . Guid . CLSID ; <nl> + import com . sun . jna . platform . win32 . Guid . IID ; <nl> + import com . sun . jna . platform . win32 . Guid . REFIID ; <nl> + import com . sun . jna . platform . win32 . OaIdl ; <nl> + import com . sun . jna . platform . win32 . OaIdl . DISPID ; <nl> + import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; <nl> + import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; <nl> + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLByReference ; <nl> + import com . sun . jna . platform . win32 . Ole32 ; <nl> + import com . sun . jna . platform . win32 . OleAuto ; <nl> + import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; <nl> + import com . sun . jna . platform . win32 . Variant ; <nl> + import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> + import com . sun . jna . platform . win32 . WTypes ; <nl> + import com . sun . jna . platform . win32 . WinDef ; <nl> + import com . sun . jna . platform . win32 . WinDef . DWORDByReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . LCID ; <nl> + import com . sun . jna . platform . win32 . WinDef . UINT ; <nl> + import com . sun . jna . platform . win32 . WinDef . UINTByReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . WORD ; <nl> + import com . sun . jna . platform . win32 . WinError ; <nl> + import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> + import org . junit . Assert ; <nl> + <nl> + public class ComEventCallbacks _ Test { <nl> + <nl> + private final CLSID CLSID _ InternetExplorer = new CLSID ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> + private final IID IID _ IConnectionPointContainer = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; <nl> + private final IID IID _ DWebBrowserEvents2 = new IID ( " { 34A715A0 - 6587 - 11D0 - 924A - 0020AFC7AC4D } " ) ; <nl> + private final REFIID niid = new REFIID ( Guid . IID _ NULL ) ; <nl> + private final LCID lcid = new LCID ( 0x0409 ) ; / / LCID for english locale <nl> + private final WinDef . WORD methodFlags = new WinDef . WORD ( OleAuto . DISPATCH _ METHOD ) ; <nl> + private final WinDef . WORD propertyPutFlags = new WinDef . WORD ( OleAuto . DISPATCH _ PROPERTYPUT ) ; <nl> + <nl> + private DISPIDByReference dispIdVisible = new DISPIDByReference ( ) ; <nl> + private DISPIDByReference dispIdQuit = new DISPIDByReference ( ) ; <nl> + private DISPIDByReference dispIdNavigate = new DISPIDByReference ( ) ; <nl> + <nl> + private PointerByReference ieApp ; <nl> + private Dispatch ieDispatch ; <nl> + <nl> + <nl> + <nl> + @ Before <nl> + public void before ( ) { <nl> + HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( null , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + <nl> + / / Create InternetExplorer object <nl> + ieApp = new PointerByReference ( ) ; <nl> + hr = Ole32 . INSTANCE <nl> + . CoCreateInstance ( CLSID _ InternetExplorer , null , WTypes . CLSCTX _ SERVER , IDispatch . IID _ IDISPATCH , ieApp ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + <nl> + ieDispatch = new Dispatch ( ieApp . getValue ( ) ) ; <nl> + ieDispatch . AddRef ( ) ; <nl> + hr = ieDispatch . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , new WString [ ] { new WString ( " Quit " ) } , 1 , lcid , dispIdQuit ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + hr = ieDispatch . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , new WString [ ] { new WString ( " Visible " ) } , 1 , lcid , dispIdVisible ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + hr = ieDispatch . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , new WString [ ] { new WString ( " Navigate " ) } , 1 , lcid , dispIdNavigate ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + } <nl> + <nl> + @ After <nl> + public void after ( ) { <nl> + / / Shutdown Internet Explorer <nl> + DISPPARAMS . ByReference pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> + pDispParams . cArgs = new UINT ( 0 ) ; <nl> + pDispParams . cNamedArgs = new UINT ( 0 ) ; <nl> + pDispParams . rgvarg = null ; <nl> + VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; <nl> + IntByReference puArgErr = new IntByReference ( ) ; <nl> + EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; <nl> + <nl> + HRESULT hr = ieDispatch . Invoke ( dispIdQuit . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; <nl> + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> + <nl> + ieDispatch . Release ( ) ; <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void queryInterface _ ConnectionPointContainer ( ) { <nl> + Unknown unk = new Unknown ( ieApp . getValue ( ) ) ; <nl> + PointerByReference ppCpc = new PointerByReference ( ) ; <nl> + HRESULT hr = unk . QueryInterface ( new REFIID ( IID _ IConnectionPointContainer ) , ppCpc ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + / / On success the returned pointer must not be null <nl> + Assert . assertNotNull ( ppCpc . getPointer ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void FindConnectionPoint ( ) { <nl> + / / query for ConnectionPointContainer <nl> + Unknown unk = new Unknown ( ieApp . getValue ( ) ) ; <nl> + PointerByReference ppCpc = new PointerByReference ( ) ; <nl> + HRESULT hr = unk . QueryInterface ( new REFIID ( IID _ IConnectionPointContainer ) , ppCpc ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; <nl> + <nl> + / / find connection point for DWebBrowserEvents2 <nl> + REFIID riid = new REFIID ( IID _ DWebBrowserEvents2 ) ; <nl> + PointerByReference ppCp = new PointerByReference ( ) ; <nl> + hr = cpc . FindConnectionPoint ( riid , ppCp ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + <nl> + / / On success the returned pointer must not be null <nl> + Assert . assertNotNull ( ppCpc . getPointer ( ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void GetConnectionInterface ( ) { <nl> + / / query for ConnectionPointContainer <nl> + Unknown unk = new Unknown ( this . ieApp . getValue ( ) ) ; <nl> + PointerByReference ppCpc = new PointerByReference ( ) ; <nl> + HRESULT hr = unk . QueryInterface ( new REFIID ( IID _ IConnectionPointContainer ) , ppCpc ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; <nl> + <nl> + / / find connection point for DWebBrowserEvents2 <nl> + REFIID riid = new REFIID ( IID _ DWebBrowserEvents2 ) ; <nl> + PointerByReference ppCp = new PointerByReference ( ) ; <nl> + hr = cpc . FindConnectionPoint ( riid , ppCp ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; <nl> + <nl> + IID cp _ iid = new IID ( ) ; <nl> + hr = cp . GetConnectionInterface ( cp _ iid ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + <nl> + Assert . assertEquals ( IID _ DWebBrowserEvents2 , cp _ iid ) ; <nl> + } <nl> + <nl> + class DWebBrowserEvents2 _ Listener implements IDispatchCallback { <nl> + <nl> + private final int DISPID _ NavigateComplete2 = 0x000000fc ; <nl> + private final int DISPID _ BeforeNavigate2 = 0x000000fa ; <nl> + <nl> + public DispatchListener listener = new DispatchListener ( this ) ; <nl> + <nl> + @ Override <nl> + public Pointer getPointer ( ) { <nl> + return this . listener . getPointer ( ) ; <nl> + } <nl> + <nl> + / / - - - - - - - - - - - - - - - - - - - - - - - - IDispatch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + @ Override <nl> + public HRESULT GetTypeInfoCount ( UINTByReference pctinfo ) { <nl> + return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , PointerByReference ppTInfo ) { <nl> + return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , DISPIDByReference rgDispId ) { <nl> + return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> + } <nl> + <nl> + public volatile boolean blockNavigation = false ; <nl> + public volatile boolean navigateComplete2Called = false ; <nl> + public volatile String navigateComplete2String = null ; <nl> + <nl> + @ Override <nl> + public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , <nl> + WORD wFlags , DISPPARAMS . ByReference pDispParams , <nl> + VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> + IntByReference puArgErr ) { <nl> + <nl> + / / @ toDo : Move setArraySize into invoke method <nl> + if ( pDispParams . rgvarg ! = null & & pDispParams . cArgs . intValue ( ) > 0 ) { <nl> + pDispParams . rgvarg . setArraySize ( pDispParams . cArgs . intValue ( ) ) ; <nl> + } <nl> + <nl> + try { <nl> + switch ( dispIdMember . intValue ( ) ) { <nl> + case DISPID _ NavigateComplete2 : <nl> + navigateComplete2Called = true ; <nl> + / / URL ist passed as VARIANT $ ByReference <nl> + VARIANT urlByRef = pDispParams . rgvarg . variantArg [ 0 ] ; <nl> + navigateComplete2String = ( ( VARIANT ) urlByRef . getValue ( ) ) . stringValue ( ) ; <nl> + break ; <nl> + case DISPID _ BeforeNavigate2 : <nl> + VARIANT Cancel = pDispParams . rgvarg . variantArg [ 0 ] ; <nl> + VARIANT Headers = pDispParams . rgvarg . variantArg [ 1 ] ; <nl> + VARIANT PostData = pDispParams . rgvarg . variantArg [ 2 ] ; <nl> + VARIANT TargetFrameName = pDispParams . rgvarg . variantArg [ 3 ] ; <nl> + VARIANT Flags = pDispParams . rgvarg . variantArg [ 4 ] ; <nl> + VARIANT URL = pDispParams . rgvarg . variantArg [ 5 ] ; <nl> + VARIANT pDisp = pDispParams . rgvarg . variantArg [ 6 ] ; <nl> + VARIANT _ BOOLByReference cancelValue = ( ( VARIANT _ BOOLByReference ) Cancel . getValue ( ) ) ; <nl> + if ( blockNavigation ) { <nl> + cancelValue . setValue ( Variant . VARIANT _ TRUE ) ; <nl> + } <nl> + break ; <nl> + } <nl> + } catch ( Throwable ex ) { <nl> + ex . printStackTrace ( System . out ) ; <nl> + System . out . println ( ex ) ; <nl> + } <nl> + <nl> + return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> + } <nl> + <nl> + / / - - - - - - - - - - - - - - - - - - - - - - - - IUnknown - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + public volatile boolean QueryInterface _ called = false ; <nl> + <nl> + @ Override <nl> + public HRESULT QueryInterface ( REFIID refiid , PointerByReference ppvObject ) { <nl> + this . QueryInterface _ called = true ; <nl> + if ( null = = ppvObject ) { <nl> + return new HRESULT ( WinError . E _ POINTER ) ; <nl> + } <nl> + <nl> + if ( refiid . getValue ( ) . equals ( IID _ DWebBrowserEvents2 ) ) { <nl> + ppvObject . setValue ( this . getPointer ( ) ) ; <nl> + return WinError . S _ OK ; <nl> + } <nl> + <nl> + if ( refiid . getValue ( ) . equals ( Unknown . IID _ IUNKNOWN ) ) { <nl> + ppvObject . setValue ( this . getPointer ( ) ) ; <nl> + return WinError . S _ OK ; <nl> + } <nl> + <nl> + if ( refiid . getValue ( ) . equals ( Dispatch . IID _ IDISPATCH ) ) { <nl> + ppvObject . setValue ( this . getPointer ( ) ) ; <nl> + return WinError . S _ OK ; <nl> + } <nl> + <nl> + ppvObject . setValue ( Pointer . NULL ) ; <nl> + return new HRESULT ( WinError . E _ NOINTERFACE ) ; <nl> + } <nl> + <nl> + public int AddRef ( ) { <nl> + return 0 ; <nl> + } <nl> + <nl> + public int Release ( ) { <nl> + return 0 ; <nl> + } <nl> + <nl> + } <nl> + <nl> + @ Test <nl> + public void testComEventCallback ( ) throws InterruptedException { <nl> + VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; <nl> + IntByReference puArgErr = new IntByReference ( ) ; <nl> + EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; <nl> + HRESULT hr ; <nl> + <nl> + DISPPARAMS . ByReference pDispParams ; <nl> + <nl> + pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> + pDispParams . cArgs = new UINT ( 1 ) ; <nl> + pDispParams . cNamedArgs = new UINT ( 1 ) ; <nl> + pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; <nl> + pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( true ) ; <nl> + pDispParams . rgdispidNamedArgs = new DISPIDByReference ( new DISPID ( OaIdl . DISPID _ PROPERTYPUT . intValue ( ) ) ) ; <nl> + / / Visible - Prioperty <nl> + hr = ieDispatch . Invoke ( dispIdVisible . getValue ( ) , niid , lcid , propertyPutFlags , pDispParams , null , null , null ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + <nl> + / / query for ConnectionPointContainer <nl> + Unknown unk = new Unknown ( ieApp . getValue ( ) ) ; <nl> + PointerByReference ppCpc = new PointerByReference ( ) ; <nl> + hr = unk . QueryInterface ( new REFIID ( IID _ IConnectionPointContainer ) , ppCpc ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; <nl> + <nl> + / / find connection point for DWebBrowserEvents2 <nl> + REFIID riid = new REFIID ( IID _ DWebBrowserEvents2 ) ; <nl> + PointerByReference ppCp = new PointerByReference ( ) ; <nl> + hr = cpc . FindConnectionPoint ( riid , ppCp ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + final ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; <nl> + IID cp _ iid = new IID ( ) ; <nl> + hr = cp . GetConnectionInterface ( cp _ iid ) ; <nl> + COMUtils . checkRC ( hr ) ; <nl> + <nl> + final DWebBrowserEvents2 _ Listener listener = new DWebBrowserEvents2 _ Listener ( ) ; <nl> + final DWORDByReference pdwCookie = new DWORDByReference ( ) ; <nl> + HRESULT hr1 = cp . Advise ( listener , pdwCookie ) ; <nl> + COMUtils . checkRC ( hr1 ) ; <nl> + <nl> + / / Advise make several callbacks into the object passed in - at this <nl> + / / point QueryInterface must have be called multiple times <nl> + Assert . assertTrue ( listener . QueryInterface _ called ) ; <nl> + <nl> + / / Call Navigate with URL https : / / github . com / java - native - access / jna <nl> + String navigateURL = " https : / / github . com / java - native - access / jna " ; <nl> + String blockedURL = " http : / / www . google . de " ; <nl> + <nl> + pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> + pDispParams . cArgs = new UINT ( 1 ) ; <nl> + pDispParams . cNamedArgs = new UINT ( 0 ) ; <nl> + pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; <nl> + pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( navigateURL ) ; <nl> + hr = ieDispatch . Invoke ( dispIdNavigate . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; <nl> + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> + <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + if ( listener . navigateComplete2Called ) { <nl> + break ; <nl> + } <nl> + Thread . sleep ( 1000 ) ; <nl> + } <nl> + <nl> + / / At this point the call to Navigate before should be complete <nl> + Assert . assertTrue ( listener . navigateComplete2Called ) ; <nl> + / / Navidate complete should have brought us to github <nl> + Assert . assertEquals ( navigateURL , listener . navigateComplete2String ) ; <nl> + <nl> + listener . navigateComplete2Called = false ; <nl> + listener . navigateComplete2String = null ; <nl> + listener . blockNavigation = true ; <nl> + <nl> + pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> + pDispParams . cArgs = new UINT ( 1 ) ; <nl> + pDispParams . cNamedArgs = new UINT ( 0 ) ; <nl> + pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; <nl> + pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( blockedURL ) ; <nl> + hr = ieDispatch . Invoke ( dispIdNavigate . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; <nl> + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> + <nl> + / / wait 10 seconds to ensure navigation won ' t happen <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + if ( listener . navigateComplete2Called ) { <nl> + break ; <nl> + } <nl> + Thread . sleep ( 1000 ) ; <nl> + } <nl> + <nl> + / / Naviation will be blocked - so NavigateComplete can ' t be called <nl> + Assert . assertFalse ( " NavigateComplete Handler was called although it should be blocked " , listener . navigateComplete2Called ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ConnectionPointContainer _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ConnectionPointContainer _ Test . java <nl> deleted file mode 100644 <nl> index be1f41b . . 0000000 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ConnectionPointContainer _ Test . java <nl> + + + / dev / null <nl> @ @ - 1 , 239 + 0 , 0 @ @ <nl> - / * Copyright ( c ) 2014 Dr David H . Akehurst ( itemis ) , All Rights Reserved <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation ; either <nl> - * version 2 . 1 of the License , or ( at your option ) any later version . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * / <nl> - package com . sun . jna . platform . win32 . COM ; <nl> - <nl> - import org . junit . After ; <nl> - import org . junit . Assert ; <nl> - import org . junit . Before ; <nl> - import org . junit . Test ; <nl> - <nl> - import com . sun . jna . Pointer ; <nl> - import com . sun . jna . WString ; <nl> - import com . sun . jna . platform . win32 . Guid . CLSID ; <nl> - import com . sun . jna . platform . win32 . Guid . IID ; <nl> - import com . sun . jna . platform . win32 . Guid . REFIID ; <nl> - import com . sun . jna . platform . win32 . OaIdl . DISPID ; <nl> - import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; <nl> - import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; <nl> - import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; <nl> - import com . sun . jna . platform . win32 . Guid ; <nl> - import com . sun . jna . platform . win32 . Kernel32 ; <nl> - import com . sun . jna . platform . win32 . Ole32 ; <nl> - import com . sun . jna . platform . win32 . WTypes ; <nl> - import com . sun . jna . platform . win32 . WinDef ; <nl> - import com . sun . jna . platform . win32 . WinError ; <nl> - import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> - import com . sun . jna . platform . win32 . WinDef . DWORDByReference ; <nl> - import com . sun . jna . platform . win32 . WinDef . LCID ; <nl> - import com . sun . jna . platform . win32 . WinDef . UINT ; <nl> - import com . sun . jna . platform . win32 . WinDef . UINTByReference ; <nl> - import com . sun . jna . platform . win32 . WinDef . WORD ; <nl> - import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> - import com . sun . jna . ptr . IntByReference ; <nl> - import com . sun . jna . ptr . PointerByReference ; <nl> - <nl> - public class ConnectionPointContainer _ Test { <nl> - <nl> - 	 PointerByReference ppWordApp ; <nl> - <nl> - 	 @ Before <nl> - 	 public void before ( ) { <nl> - 	 	 HRESULT hr = Ole32 . INSTANCE . CoInitialize ( null ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - <nl> - 	 	 / / Create word object <nl> - 	 	 CLSID clsid = new CLSID ( " { 000209FF - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> - 	 	 this . ppWordApp = new PointerByReference ( ) ; <nl> - 	 	 hr = Ole32 . INSTANCE <nl> - 	 	 	 	 . CoCreateInstance ( clsid , null , WTypes . CLSCTX _ SERVER , IDispatch . IID _ IDISPATCH , this . ppWordApp ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 } <nl> - <nl> - 	 @ After <nl> - 	 public void after ( ) { <nl> - 	 	 / / Close Word <nl> - 	 	 Dispatch d = new Dispatch ( this . ppWordApp . getValue ( ) ) ; <nl> - 	 	 DISPID dispIdMember = new DISPID ( 1105 ) ; / / Quit <nl> - 	 	 REFIID riid = new REFIID ( Guid . IID _ NULL ) ; <nl> - 	 	 LCID lcid = Kernel32 . INSTANCE . GetSystemDefaultLCID ( ) ; <nl> - 	 	 WinDef . WORD wFlags = new WinDef . WORD ( 1 ) ; <nl> - 	 	 DISPPARAMS . ByReference pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> - 	 	 VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; <nl> - 	 	 IntByReference puArgErr = new IntByReference ( ) ; <nl> - 	 	 EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; <nl> - 	 	 d . Invoke ( dispIdMember , riid , lcid , wFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; <nl> - 	 	 <nl> - 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> - 	 } <nl> - <nl> - 	 @ Test <nl> - 	 public void queryInterface _ ConnectionPointContainer ( ) { <nl> - 	 	 Unknown unk = new Unknown ( this . ppWordApp . getValue ( ) ) ; <nl> - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; <nl> - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; <nl> - 	 	 HRESULT hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; <nl> - 	 } <nl> - <nl> - 	 @ Test <nl> - 	 public void FindConnectionPoint ( ) { <nl> - 	 	 / / query for ConnectionPointContainer <nl> - 	 	 Unknown unk = new Unknown ( this . ppWordApp . getValue ( ) ) ; <nl> - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; <nl> - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; <nl> - 	 	 HRESULT hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; <nl> - <nl> - 	 	 / / find connection point for Application _ Events4 <nl> - 	 	 IID appEvnts4 = new IID ( " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> - 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; <nl> - 	 	 PointerByReference ppCp = new PointerByReference ( ) ; <nl> - 	 	 hr = cpc . FindConnectionPoint ( riid , ppCp ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; <nl> - 	 } <nl> - <nl> - 	 @ Test <nl> - 	 public void GetConnectionInterface ( ) { <nl> - 	 	 / / query for ConnectionPointContainer <nl> - 	 	 Unknown unk = new Unknown ( this . ppWordApp . getValue ( ) ) ; <nl> - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; <nl> - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; <nl> - 	 	 HRESULT hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; <nl> - <nl> - 	 	 / / find connection point for Application _ Events4 <nl> - 	 	 IID appEvnts4 = new IID ( " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> - 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; <nl> - 	 	 PointerByReference ppCp = new PointerByReference ( ) ; <nl> - 	 	 hr = cpc . FindConnectionPoint ( riid , ppCp ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; <nl> - <nl> - 	 	 IID cp _ iid = new IID ( ) ; <nl> - 	 	 hr = cp . GetConnectionInterface ( cp _ iid ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - <nl> - 	 	 Assert . assertEquals ( appEvnts4 , cp _ iid ) ; <nl> - 	 } <nl> - <nl> - 	 class Application _ Events4 implements IDispatchCallback { <nl> - 	 	 public DispatchListener listener = new DispatchListener ( this ) ; <nl> - <nl> - 	 	 @ Override <nl> - 	 	 public Pointer getPointer ( ) { <nl> - 	 	 	 return this . listener . getPointer ( ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IDispatch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT GetTypeInfoCount ( UINTByReference pctinfo ) { <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , PointerByReference ppTInfo ) { <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , DISPIDByReference rgDispId ) { <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 public boolean Invoke _ called = false ; <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , WORD wFlags , <nl> - 	 	 	 	 DISPPARAMS . ByReference pDispParams , VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> - 	 IntByReference puArgErr ) { <nl> - 	 	 	 this . Invoke _ called = true ; <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> - 	 	 } <nl> - 	 	 <nl> - 	 	 <nl> - 	 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IUnknown - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - 	 	 public boolean QueryInterface _ called = false ; <nl> - 	 	 @ Override <nl> - 	 	 public HRESULT QueryInterface ( REFIID refid , PointerByReference ppvObject ) { <nl> - 	 	 	 this . QueryInterface _ called = true ; <nl> - 	 	 	 if ( null = = ppvObject ) { <nl> - 	 	 	 	 return new HRESULT ( WinError . E _ POINTER ) ; <nl> - 	 	 	 } <nl> - <nl> - 	 	 	 String s = refid . toGuidString ( ) ; <nl> - 	 	 	 IID appEvnts4 = new IID ( " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> - 	 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; <nl> - <nl> - 	 	 	 if ( refid . equals ( riid ) ) { <nl> - 	 	 	 	 return WinError . S _ OK ; <nl> - 	 	 	 } <nl> - 	 	 	 <nl> - 	 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Unknown . IID _ IUNKNOWN ) ) { <nl> - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; <nl> - 	 	 	 	 return WinError . S _ OK ; <nl> - 	 	 	 } <nl> - 	 	 	 <nl> - 	 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Dispatch . IID _ IDISPATCH ) ) { <nl> - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; <nl> - 	 	 	 	 return WinError . S _ OK ; <nl> - 	 	 	 } <nl> - 	 	 	 <nl> - 	 	 	 return new HRESULT ( WinError . E _ NOINTERFACE ) ; <nl> - 	 	 } <nl> - <nl> - 	 	 public int AddRef ( ) { <nl> - 	 	 	 return 0 ; <nl> - 	 	 } <nl> - <nl> - 	 	 public int Release ( ) { <nl> - 	 	 	 return 0 ; <nl> - 	 	 } <nl> - <nl> - 	 } <nl> - <nl> - 	 @ Test <nl> - 	 public void Advise ( ) { <nl> - <nl> - 	 	 / / query for ConnectionPointContainer <nl> - 	 	 Unknown unk = new Unknown ( this . ppWordApp . getValue ( ) ) ; <nl> - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; <nl> - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; <nl> - 	 	 HRESULT hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; <nl> - <nl> - 	 	 / / find connection point for Application _ Events4 <nl> - 	 	 IID appEvnts4 = new IID ( " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> - 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; <nl> - 	 	 PointerByReference ppCp = new PointerByReference ( ) ; <nl> - 	 	 hr = cpc . FindConnectionPoint ( riid , ppCp ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; <nl> - 	 	 IID cp _ iid = new IID ( ) ; <nl> - 	 	 hr = cp . GetConnectionInterface ( cp _ iid ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - <nl> - 	 	 Application _ Events4 listener = new Application _ Events4 ( ) ; <nl> - <nl> - 	 	 DWORDByReference pdwCookie = new DWORDByReference ( ) ; <nl> - 	 	 hr = cp . Advise ( listener , pdwCookie ) ; <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - <nl> - 	 	 Assert . assertTrue ( listener . QueryInterface _ called ) ; <nl> - 	 	 <nl> - 	 } <nl> - <nl> - }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 index 1ac91bb . . f6794ae 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Guid . java 
 @ @ - 17 , 9 + 17 , 9 @ @ import java . util . Arrays ; 
 import java . util . List ; 
 
 import com . sun . jna . Pointer ; 
 + import com . sun . jna . PointerType ; 
 import com . sun . jna . Structure ; 
 
 - / / TODO : Auto - generated Javadoc 
 / * * 
 * Ported from Guid . h . Microsoft Windows SDK 6 . 0A . 
 * 
 @ @ - 465 , 17 + 465 , 30 @ @ public interface Guid { 
 } 
 
 / * * 
 - * The Class REFIID . 
 - * 
 - * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 + * REFIID is a pointer to an IID . 
 + * 
 + * This type needs to be seperate from IID , as the REFIID can be passed in 
 + * from external code , that does not allow writes to memory . 
 + * 
 + * With the normal JNA behaviour a structure , that crosses the native < - > Java 
 + * border will be autowritten , which causes a fault when written . 
 + * Observed was this behaviour in COM - Callbacks , which get the REFIID passed 
 + * into Invoke - method . 
 + * 
 + * So a IID can ' t be used directly , although the typedef of REFIID ( from MSDN ) : 
 + * 
 + * typedef IID * REFIID ; 
 + * 
 + * and the jna behaviour is described as : 
 + * 
 + * " When a function requires a pointer to a struct , a Java Structure should be used . " 
 * / 
 - public class REFIID extends IID { 
 + public class REFIID extends PointerType { 
 
 / * * 
 * Instantiates a new refiid . 
 * / 
 public REFIID ( ) { 
 - super ( ) ; 
 } 
 
 / * * 
 @ @ - 488 , 21 + 501 , 20 @ @ public interface Guid { 
 super ( memory ) ; 
 } 
 
 - / * * 
 - * Instantiates a new refiid . 
 - * 
 - * @ param data 
 - * the data 
 - * / 
 - public REFIID ( byte [ ] data ) { 
 - super ( data ) ; 
 + public REFIID ( IID guid ) { 
 + super ( guid . getPointer ( ) ) ; 
 + } 
 + 
 + public void setValue ( IID value ) { 
 + setPointer ( value . getPointer ( ) ) ; 
 } 
 
 - public REFIID ( GUID guid ) { 
 - super ( guid ) ; 
 + public IID getValue ( ) { 
 + return new IID ( getPointer ( ) ) ; 
 } 
 + 
 } 
 - 
 + 
 / * * 
 * The Class IID . 
 * 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java 
 index f7b8a0c . . 4b730f4 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java 
 @ @ - 1 , 202 + 1 , 363 @ @ 
 - / * Copyright ( c ) 2014 Dr David H . Akehurst ( itemis ) , All Rights Reserved 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation ; either 
 - * version 2 . 1 of the License , or ( at your option ) any later version . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * / 
 - package com . sun . jna . platform . win32 . COM ; 
 - 
 - import org . junit . After ; 
 - import org . junit . Assert ; 
 - import org . junit . Before ; 
 - import org . junit . Test ; 
 - 
 - import com . sun . jna . Pointer ; 
 - import com . sun . jna . WString ; 
 - import com . sun . jna . platform . win32 . Guid ; 
 - import com . sun . jna . platform . win32 . Guid . CLSID ; 
 - import com . sun . jna . platform . win32 . Guid . IID ; 
 - import com . sun . jna . platform . win32 . Guid . REFIID ; 
 - import com . sun . jna . platform . win32 . Kernel32 ; 
 - import com . sun . jna . platform . win32 . OaIdl . DISPID ; 
 - import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; 
 - import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; 
 - import com . sun . jna . platform . win32 . Ole32 ; 
 - import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; 
 - import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 - import com . sun . jna . platform . win32 . WTypes ; 
 - import com . sun . jna . platform . win32 . WinDef ; 
 - import com . sun . jna . platform . win32 . WinDef . DWORDByReference ; 
 - import com . sun . jna . platform . win32 . WinDef . LCID ; 
 - import com . sun . jna . platform . win32 . WinDef . UINT ; 
 - import com . sun . jna . platform . win32 . WinDef . UINTByReference ; 
 - import com . sun . jna . platform . win32 . WinDef . WORD ; 
 - import com . sun . jna . platform . win32 . WinError ; 
 - import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 - import com . sun . jna . ptr . IntByReference ; 
 - import com . sun . jna . ptr . PointerByReference ; 
 - 
 - public class ComEventCallbacks _ Test { 
 - 
 - 	 final String WORD _ APPLICATION _ INTERFACE = " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ; 
 - 	 final String APPLICATION _ EVENTS _ 4 = " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ; 
 - 	 
 - 	 @ Before 
 - 	 public void before ( ) { 
 - 	 	 HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( null , Ole32 . COINIT _ MULTITHREADED ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 } 
 - 
 - 	 @ After 
 - 	 public void after ( ) { 
 - 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; 
 - 	 } 
 - 
 - 	 class Application _ Events4 implements IDispatchCallback { 
 - 	 	 public DispatchListener listener = new DispatchListener ( this ) ; 
 - 
 - 	 	 @ Override 
 - 	 	 public Pointer getPointer ( ) { 
 - 	 	 	 return this . listener . getPointer ( ) ; 
 - 	 	 } 
 - 
 - 	 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IDispatch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - 	 	 @ Override 
 - 	 	 public HRESULT GetTypeInfoCount ( UINTByReference pctinfo ) { 
 - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 - 	 	 } 
 - 
 - 	 	 @ Override 
 - 	 	 public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , PointerByReference ppTInfo ) { 
 - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 - 	 	 } 
 - 
 - 	 	 @ Override 
 - 	 	 public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , DISPIDByReference rgDispId ) { 
 - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 - 	 	 } 
 - 
 - 	 	 public boolean Invoke _ called = false ; 
 - 	 	 @ Override 
 - 	 	 public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , 
 - 	 WORD wFlags , DISPPARAMS . ByReference pDispParams , 
 - 	 VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 - 	 IntByReference puArgErr ) { 
 - 	 	 	 this . Invoke _ called = true ; 
 - 	 	 	 
 - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 - 	 	 } 
 - 	 	 
 - 	 	 
 - 	 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IUnknown - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - 	 	 public boolean QueryInterface _ called = false ; 
 - 	 	 @ Override 
 - 	 	 public HRESULT QueryInterface ( REFIID refid , PointerByReference ppvObject ) { 
 - 	 	 	 this . QueryInterface _ called = true ; 
 - 	 	 	 if ( null = = ppvObject ) { 
 - 	 	 	 	 return new HRESULT ( WinError . E _ POINTER ) ; 
 - 	 	 	 } 
 - 
 - 	 	 	 String s = refid . toGuidString ( ) ; 
 - 	 	 	 IID appEvnts4 = new IID ( APPLICATION _ EVENTS _ 4 ) ; 
 - 	 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; 
 - 
 - 	 	 	 if ( refid . equals ( riid ) ) { 
 - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; 
 - 	 	 	 	 return WinError . S _ OK ; 
 - 	 	 	 } 
 - 	 	 	 
 - 	 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Unknown . IID _ IUNKNOWN ) ) { 
 - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; 
 - 	 	 	 	 return WinError . S _ OK ; 
 - 	 	 	 } 
 - 	 	 	 
 - 	 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Dispatch . IID _ IDISPATCH ) ) { 
 - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; 
 - 	 	 	 	 return WinError . S _ OK ; 
 - 	 	 	 } 
 - 	 	 	 
 - 	 	 	 return new HRESULT ( WinError . E _ NOINTERFACE ) ; 
 - 	 	 } 
 - 
 - 	 	 public int AddRef ( ) { 
 - 	 	 	 return 0 ; 
 - 	 	 } 
 - 
 - 	 	 public int Release ( ) { 
 - 	 	 	 return 0 ; 
 - 	 	 } 
 - 
 - 	 } 
 - 
 - 	 @ Test 
 - 	 public void cause _ Quit _ Event ( ) { 
 - 	 	 / / Create word object 
 - 	 	 CLSID clsid = new CLSID ( " { 000209FF - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 - 	 	 PointerByReference ppWordApp = new PointerByReference ( ) ; 
 - 	 	 HRESULT hr = Ole32 . INSTANCE 
 - 	 	 	 	 . CoCreateInstance ( clsid , null , WTypes . CLSCTX _ SERVER , IDispatch . IID _ IDISPATCH , ppWordApp ) ; 
 - / / 	 	 HRESULT hr = OleAuto . INSTANCE . GetActiveObject ( clsid , null , ppWordApp ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 
 - 	 	 / / query for ConnectionPointContainer 
 - 	 	 Unknown unk = new Unknown ( ppWordApp . getValue ( ) ) ; 
 - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; 
 - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; 
 - 	 	 hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; 
 - 
 - 	 	 / / find connection point for Application _ Events4 
 - 	 	 IID appEvnts4 = new IID ( APPLICATION _ EVENTS _ 4 ) ; 
 - 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; 
 - 	 	 PointerByReference ppCp = new PointerByReference ( ) ; 
 - 	 	 hr = cpc . FindConnectionPoint ( riid , ppCp ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 final ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; 
 - 	 	 IID cp _ iid = new IID ( ) ; 
 - 	 	 hr = cp . GetConnectionInterface ( cp _ iid ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 
 - 	 	 final Application _ Events4 listener = new Application _ Events4 ( ) ; 
 - 	 	 final DWORDByReference pdwCookie = new DWORDByReference ( ) ; 
 - 	 	 HRESULT hr1 = cp . Advise ( listener , pdwCookie ) ; 
 - 	 	 COMUtils . checkRC ( hr1 ) ; 
 - 
 - / / 	 	 Assert . assertTrue ( listener . QueryInterface _ called ) ; 
 - / / 	 	 
 - 	 	 / / Call Quit 
 - 	 	 Dispatch d = new Dispatch ( ppWordApp . getValue ( ) ) ; 
 - 	 	 DISPID dispIdMember = new DISPID ( 1105 ) ; / / Quit 
 - 	 	 REFIID niid = new REFIID ( Guid . IID _ NULL ) ; 
 - 	 	 LCID lcid = Kernel32 . INSTANCE . GetSystemDefaultLCID ( ) ; 
 - 	 	 WinDef . WORD wFlags = new WinDef . WORD ( 1 ) ; 
 - 	 	 DISPPARAMS . ByReference pDispParams = new DISPPARAMS . ByReference ( ) ; 
 - 	 	 VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; 
 - 	 	 IntByReference puArgErr = new IntByReference ( ) ; 
 - 	 	 EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; 
 - 	 	 hr = d . Invoke ( dispIdMember , niid , lcid , wFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 
 - 	 	 / / Wait for event to happen 
 - 	 	 try { 
 - 	 	 	 Thread . sleep ( 200 ) ; 
 - / / 	 	 	 WinUser . MSG msg = new WinUser . MSG ( ) ; 
 - / / 	 	 	 while ( ( ( User32 . INSTANCE . GetMessage ( msg , null , 0 , 0 ) ) ! = 0 ) ) { 
 - / / 	 	 	 User32 . INSTANCE . TranslateMessage ( msg ) ; 
 - / / 	 	 	 User32 . INSTANCE . DispatchMessage ( msg ) ; 
 - / / 	 	 	 } 
 - 	 	 } catch ( Exception e ) { 
 - 	 	 	 e . printStackTrace ( ) ; 
 - 	 	 } 
 - 	 	 
 - 	 	 Assert . assertTrue ( listener . Invoke _ called ) ; 
 - 	 } 
 - 
 - } 
 + / * Copyright ( c ) 2014 Dr David H . Akehurst ( itemis ) , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 . COM ; 
 + 
 + import org . junit . After ; 
 + import org . junit . Before ; 
 + import org . junit . Test ; 
 + 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . WString ; 
 + import com . sun . jna . platform . win32 . Guid ; 
 + import com . sun . jna . platform . win32 . Guid . CLSID ; 
 + import com . sun . jna . platform . win32 . Guid . IID ; 
 + import com . sun . jna . platform . win32 . Guid . REFIID ; 
 + import com . sun . jna . platform . win32 . OaIdl ; 
 + import com . sun . jna . platform . win32 . OaIdl . DISPID ; 
 + import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; 
 + import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; 
 + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLByReference ; 
 + import com . sun . jna . platform . win32 . Ole32 ; 
 + import com . sun . jna . platform . win32 . OleAuto ; 
 + import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; 
 + import com . sun . jna . platform . win32 . Variant ; 
 + import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 + import com . sun . jna . platform . win32 . WTypes ; 
 + import com . sun . jna . platform . win32 . WinDef ; 
 + import com . sun . jna . platform . win32 . WinDef . DWORDByReference ; 
 + import com . sun . jna . platform . win32 . WinDef . LCID ; 
 + import com . sun . jna . platform . win32 . WinDef . UINT ; 
 + import com . sun . jna . platform . win32 . WinDef . UINTByReference ; 
 + import com . sun . jna . platform . win32 . WinDef . WORD ; 
 + import com . sun . jna . platform . win32 . WinError ; 
 + import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 + import org . junit . Assert ; 
 + 
 + public class ComEventCallbacks _ Test { 
 + 
 + private final CLSID CLSID _ InternetExplorer = new CLSID ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 + private final IID IID _ IConnectionPointContainer = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; 
 + private final IID IID _ DWebBrowserEvents2 = new IID ( " { 34A715A0 - 6587 - 11D0 - 924A - 0020AFC7AC4D } " ) ; 
 + private final REFIID niid = new REFIID ( Guid . IID _ NULL ) ; 
 + private final LCID lcid = new LCID ( 0x0409 ) ; / / LCID for english locale 
 + private final WinDef . WORD methodFlags = new WinDef . WORD ( OleAuto . DISPATCH _ METHOD ) ; 
 + private final WinDef . WORD propertyPutFlags = new WinDef . WORD ( OleAuto . DISPATCH _ PROPERTYPUT ) ; 
 + 
 + private DISPIDByReference dispIdVisible = new DISPIDByReference ( ) ; 
 + private DISPIDByReference dispIdQuit = new DISPIDByReference ( ) ; 
 + private DISPIDByReference dispIdNavigate = new DISPIDByReference ( ) ; 
 + 
 + private PointerByReference ieApp ; 
 + private Dispatch ieDispatch ; 
 + 
 + 
 + 
 + @ Before 
 + public void before ( ) { 
 + HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( null , Ole32 . COINIT _ MULTITHREADED ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + 
 + / / Create InternetExplorer object 
 + ieApp = new PointerByReference ( ) ; 
 + hr = Ole32 . INSTANCE 
 + . CoCreateInstance ( CLSID _ InternetExplorer , null , WTypes . CLSCTX _ SERVER , IDispatch . IID _ IDISPATCH , ieApp ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + 
 + ieDispatch = new Dispatch ( ieApp . getValue ( ) ) ; 
 + ieDispatch . AddRef ( ) ; 
 + hr = ieDispatch . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , new WString [ ] { new WString ( " Quit " ) } , 1 , lcid , dispIdQuit ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + hr = ieDispatch . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , new WString [ ] { new WString ( " Visible " ) } , 1 , lcid , dispIdVisible ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + hr = ieDispatch . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , new WString [ ] { new WString ( " Navigate " ) } , 1 , lcid , dispIdNavigate ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + } 
 + 
 + @ After 
 + public void after ( ) { 
 + / / Shutdown Internet Explorer 
 + DISPPARAMS . ByReference pDispParams = new DISPPARAMS . ByReference ( ) ; 
 + pDispParams . cArgs = new UINT ( 0 ) ; 
 + pDispParams . cNamedArgs = new UINT ( 0 ) ; 
 + pDispParams . rgvarg = null ; 
 + VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; 
 + IntByReference puArgErr = new IntByReference ( ) ; 
 + EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; 
 + 
 + HRESULT hr = ieDispatch . Invoke ( dispIdQuit . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; 
 + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 + 
 + ieDispatch . Release ( ) ; 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + } 
 + 
 + @ Test 
 + public void queryInterface _ ConnectionPointContainer ( ) { 
 + Unknown unk = new Unknown ( ieApp . getValue ( ) ) ; 
 + PointerByReference ppCpc = new PointerByReference ( ) ; 
 + HRESULT hr = unk . QueryInterface ( new REFIID ( IID _ IConnectionPointContainer ) , ppCpc ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + / / On success the returned pointer must not be null 
 + Assert . assertNotNull ( ppCpc . getPointer ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void FindConnectionPoint ( ) { 
 + / / query for ConnectionPointContainer 
 + Unknown unk = new Unknown ( ieApp . getValue ( ) ) ; 
 + PointerByReference ppCpc = new PointerByReference ( ) ; 
 + HRESULT hr = unk . QueryInterface ( new REFIID ( IID _ IConnectionPointContainer ) , ppCpc ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; 
 + 
 + / / find connection point for DWebBrowserEvents2 
 + REFIID riid = new REFIID ( IID _ DWebBrowserEvents2 ) ; 
 + PointerByReference ppCp = new PointerByReference ( ) ; 
 + hr = cpc . FindConnectionPoint ( riid , ppCp ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + 
 + / / On success the returned pointer must not be null 
 + Assert . assertNotNull ( ppCpc . getPointer ( ) ) ; 
 + } 
 + 
 + @ Test 
 + public void GetConnectionInterface ( ) { 
 + / / query for ConnectionPointContainer 
 + Unknown unk = new Unknown ( this . ieApp . getValue ( ) ) ; 
 + PointerByReference ppCpc = new PointerByReference ( ) ; 
 + HRESULT hr = unk . QueryInterface ( new REFIID ( IID _ IConnectionPointContainer ) , ppCpc ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; 
 + 
 + / / find connection point for DWebBrowserEvents2 
 + REFIID riid = new REFIID ( IID _ DWebBrowserEvents2 ) ; 
 + PointerByReference ppCp = new PointerByReference ( ) ; 
 + hr = cpc . FindConnectionPoint ( riid , ppCp ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; 
 + 
 + IID cp _ iid = new IID ( ) ; 
 + hr = cp . GetConnectionInterface ( cp _ iid ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + 
 + Assert . assertEquals ( IID _ DWebBrowserEvents2 , cp _ iid ) ; 
 + } 
 + 
 + class DWebBrowserEvents2 _ Listener implements IDispatchCallback { 
 + 
 + private final int DISPID _ NavigateComplete2 = 0x000000fc ; 
 + private final int DISPID _ BeforeNavigate2 = 0x000000fa ; 
 + 
 + public DispatchListener listener = new DispatchListener ( this ) ; 
 + 
 + @ Override 
 + public Pointer getPointer ( ) { 
 + return this . listener . getPointer ( ) ; 
 + } 
 + 
 + / / - - - - - - - - - - - - - - - - - - - - - - - - IDispatch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + @ Override 
 + public HRESULT GetTypeInfoCount ( UINTByReference pctinfo ) { 
 + return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , PointerByReference ppTInfo ) { 
 + return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 + } 
 + 
 + @ Override 
 + public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , DISPIDByReference rgDispId ) { 
 + return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 + } 
 + 
 + public volatile boolean blockNavigation = false ; 
 + public volatile boolean navigateComplete2Called = false ; 
 + public volatile String navigateComplete2String = null ; 
 + 
 + @ Override 
 + public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , 
 + WORD wFlags , DISPPARAMS . ByReference pDispParams , 
 + VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 + IntByReference puArgErr ) { 
 + 
 + / / @ toDo : Move setArraySize into invoke method 
 + if ( pDispParams . rgvarg ! = null & & pDispParams . cArgs . intValue ( ) > 0 ) { 
 + pDispParams . rgvarg . setArraySize ( pDispParams . cArgs . intValue ( ) ) ; 
 + } 
 + 
 + try { 
 + switch ( dispIdMember . intValue ( ) ) { 
 + case DISPID _ NavigateComplete2 : 
 + navigateComplete2Called = true ; 
 + / / URL ist passed as VARIANT $ ByReference 
 + VARIANT urlByRef = pDispParams . rgvarg . variantArg [ 0 ] ; 
 + navigateComplete2String = ( ( VARIANT ) urlByRef . getValue ( ) ) . stringValue ( ) ; 
 + break ; 
 + case DISPID _ BeforeNavigate2 : 
 + VARIANT Cancel = pDispParams . rgvarg . variantArg [ 0 ] ; 
 + VARIANT Headers = pDispParams . rgvarg . variantArg [ 1 ] ; 
 + VARIANT PostData = pDispParams . rgvarg . variantArg [ 2 ] ; 
 + VARIANT TargetFrameName = pDispParams . rgvarg . variantArg [ 3 ] ; 
 + VARIANT Flags = pDispParams . rgvarg . variantArg [ 4 ] ; 
 + VARIANT URL = pDispParams . rgvarg . variantArg [ 5 ] ; 
 + VARIANT pDisp = pDispParams . rgvarg . variantArg [ 6 ] ; 
 + VARIANT _ BOOLByReference cancelValue = ( ( VARIANT _ BOOLByReference ) Cancel . getValue ( ) ) ; 
 + if ( blockNavigation ) { 
 + cancelValue . setValue ( Variant . VARIANT _ TRUE ) ; 
 + } 
 + break ; 
 + } 
 + } catch ( Throwable ex ) { 
 + ex . printStackTrace ( System . out ) ; 
 + System . out . println ( ex ) ; 
 + } 
 + 
 + return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 + } 
 + 
 + / / - - - - - - - - - - - - - - - - - - - - - - - - IUnknown - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + public volatile boolean QueryInterface _ called = false ; 
 + 
 + @ Override 
 + public HRESULT QueryInterface ( REFIID refiid , PointerByReference ppvObject ) { 
 + this . QueryInterface _ called = true ; 
 + if ( null = = ppvObject ) { 
 + return new HRESULT ( WinError . E _ POINTER ) ; 
 + } 
 + 
 + if ( refiid . getValue ( ) . equals ( IID _ DWebBrowserEvents2 ) ) { 
 + ppvObject . setValue ( this . getPointer ( ) ) ; 
 + return WinError . S _ OK ; 
 + } 
 + 
 + if ( refiid . getValue ( ) . equals ( Unknown . IID _ IUNKNOWN ) ) { 
 + ppvObject . setValue ( this . getPointer ( ) ) ; 
 + return WinError . S _ OK ; 
 + } 
 + 
 + if ( refiid . getValue ( ) . equals ( Dispatch . IID _ IDISPATCH ) ) { 
 + ppvObject . setValue ( this . getPointer ( ) ) ; 
 + return WinError . S _ OK ; 
 + } 
 + 
 + ppvObject . setValue ( Pointer . NULL ) ; 
 + return new HRESULT ( WinError . E _ NOINTERFACE ) ; 
 + } 
 + 
 + public int AddRef ( ) { 
 + return 0 ; 
 + } 
 + 
 + public int Release ( ) { 
 + return 0 ; 
 + } 
 + 
 + } 
 + 
 + @ Test 
 + public void testComEventCallback ( ) throws InterruptedException { 
 + VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; 
 + IntByReference puArgErr = new IntByReference ( ) ; 
 + EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; 
 + HRESULT hr ; 
 + 
 + DISPPARAMS . ByReference pDispParams ; 
 + 
 + pDispParams = new DISPPARAMS . ByReference ( ) ; 
 + pDispParams . cArgs = new UINT ( 1 ) ; 
 + pDispParams . cNamedArgs = new UINT ( 1 ) ; 
 + pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; 
 + pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( true ) ; 
 + pDispParams . rgdispidNamedArgs = new DISPIDByReference ( new DISPID ( OaIdl . DISPID _ PROPERTYPUT . intValue ( ) ) ) ; 
 + / / Visible - Prioperty 
 + hr = ieDispatch . Invoke ( dispIdVisible . getValue ( ) , niid , lcid , propertyPutFlags , pDispParams , null , null , null ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + 
 + / / query for ConnectionPointContainer 
 + Unknown unk = new Unknown ( ieApp . getValue ( ) ) ; 
 + PointerByReference ppCpc = new PointerByReference ( ) ; 
 + hr = unk . QueryInterface ( new REFIID ( IID _ IConnectionPointContainer ) , ppCpc ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; 
 + 
 + / / find connection point for DWebBrowserEvents2 
 + REFIID riid = new REFIID ( IID _ DWebBrowserEvents2 ) ; 
 + PointerByReference ppCp = new PointerByReference ( ) ; 
 + hr = cpc . FindConnectionPoint ( riid , ppCp ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + final ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; 
 + IID cp _ iid = new IID ( ) ; 
 + hr = cp . GetConnectionInterface ( cp _ iid ) ; 
 + COMUtils . checkRC ( hr ) ; 
 + 
 + final DWebBrowserEvents2 _ Listener listener = new DWebBrowserEvents2 _ Listener ( ) ; 
 + final DWORDByReference pdwCookie = new DWORDByReference ( ) ; 
 + HRESULT hr1 = cp . Advise ( listener , pdwCookie ) ; 
 + COMUtils . checkRC ( hr1 ) ; 
 + 
 + / / Advise make several callbacks into the object passed in - at this 
 + / / point QueryInterface must have be called multiple times 
 + Assert . assertTrue ( listener . QueryInterface _ called ) ; 
 + 
 + / / Call Navigate with URL https : / / github . com / java - native - access / jna 
 + String navigateURL = " https : / / github . com / java - native - access / jna " ; 
 + String blockedURL = " http : / / www . google . de " ; 
 + 
 + pDispParams = new DISPPARAMS . ByReference ( ) ; 
 + pDispParams . cArgs = new UINT ( 1 ) ; 
 + pDispParams . cNamedArgs = new UINT ( 0 ) ; 
 + pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; 
 + pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( navigateURL ) ; 
 + hr = ieDispatch . Invoke ( dispIdNavigate . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; 
 + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 + 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + if ( listener . navigateComplete2Called ) { 
 + break ; 
 + } 
 + Thread . sleep ( 1000 ) ; 
 + } 
 + 
 + / / At this point the call to Navigate before should be complete 
 + Assert . assertTrue ( listener . navigateComplete2Called ) ; 
 + / / Navidate complete should have brought us to github 
 + Assert . assertEquals ( navigateURL , listener . navigateComplete2String ) ; 
 + 
 + listener . navigateComplete2Called = false ; 
 + listener . navigateComplete2String = null ; 
 + listener . blockNavigation = true ; 
 + 
 + pDispParams = new DISPPARAMS . ByReference ( ) ; 
 + pDispParams . cArgs = new UINT ( 1 ) ; 
 + pDispParams . cNamedArgs = new UINT ( 0 ) ; 
 + pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; 
 + pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( blockedURL ) ; 
 + hr = ieDispatch . Invoke ( dispIdNavigate . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; 
 + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 + 
 + / / wait 10 seconds to ensure navigation won ' t happen 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + if ( listener . navigateComplete2Called ) { 
 + break ; 
 + } 
 + Thread . sleep ( 1000 ) ; 
 + } 
 + 
 + / / Naviation will be blocked - so NavigateComplete can ' t be called 
 + Assert . assertFalse ( " NavigateComplete Handler was called although it should be blocked " , listener . navigateComplete2Called ) ; 
 + } 
 + 
 + } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ConnectionPointContainer _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ConnectionPointContainer _ Test . java 
 deleted file mode 100644 
 index be1f41b . . 0000000 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ConnectionPointContainer _ Test . java 
 + + + / dev / null 
 @ @ - 1 , 239 + 0 , 0 @ @ 
 - / * Copyright ( c ) 2014 Dr David H . Akehurst ( itemis ) , All Rights Reserved 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation ; either 
 - * version 2 . 1 of the License , or ( at your option ) any later version . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * / 
 - package com . sun . jna . platform . win32 . COM ; 
 - 
 - import org . junit . After ; 
 - import org . junit . Assert ; 
 - import org . junit . Before ; 
 - import org . junit . Test ; 
 - 
 - import com . sun . jna . Pointer ; 
 - import com . sun . jna . WString ; 
 - import com . sun . jna . platform . win32 . Guid . CLSID ; 
 - import com . sun . jna . platform . win32 . Guid . IID ; 
 - import com . sun . jna . platform . win32 . Guid . REFIID ; 
 - import com . sun . jna . platform . win32 . OaIdl . DISPID ; 
 - import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; 
 - import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; 
 - import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; 
 - import com . sun . jna . platform . win32 . Guid ; 
 - import com . sun . jna . platform . win32 . Kernel32 ; 
 - import com . sun . jna . platform . win32 . Ole32 ; 
 - import com . sun . jna . platform . win32 . WTypes ; 
 - import com . sun . jna . platform . win32 . WinDef ; 
 - import com . sun . jna . platform . win32 . WinError ; 
 - import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 - import com . sun . jna . platform . win32 . WinDef . DWORDByReference ; 
 - import com . sun . jna . platform . win32 . WinDef . LCID ; 
 - import com . sun . jna . platform . win32 . WinDef . UINT ; 
 - import com . sun . jna . platform . win32 . WinDef . UINTByReference ; 
 - import com . sun . jna . platform . win32 . WinDef . WORD ; 
 - import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 - import com . sun . jna . ptr . IntByReference ; 
 - import com . sun . jna . ptr . PointerByReference ; 
 - 
 - public class ConnectionPointContainer _ Test { 
 - 
 - 	 PointerByReference ppWordApp ; 
 - 
 - 	 @ Before 
 - 	 public void before ( ) { 
 - 	 	 HRESULT hr = Ole32 . INSTANCE . CoInitialize ( null ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 
 - 	 	 / / Create word object 
 - 	 	 CLSID clsid = new CLSID ( " { 000209FF - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 - 	 	 this . ppWordApp = new PointerByReference ( ) ; 
 - 	 	 hr = Ole32 . INSTANCE 
 - 	 	 	 	 . CoCreateInstance ( clsid , null , WTypes . CLSCTX _ SERVER , IDispatch . IID _ IDISPATCH , this . ppWordApp ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 } 
 - 
 - 	 @ After 
 - 	 public void after ( ) { 
 - 	 	 / / Close Word 
 - 	 	 Dispatch d = new Dispatch ( this . ppWordApp . getValue ( ) ) ; 
 - 	 	 DISPID dispIdMember = new DISPID ( 1105 ) ; / / Quit 
 - 	 	 REFIID riid = new REFIID ( Guid . IID _ NULL ) ; 
 - 	 	 LCID lcid = Kernel32 . INSTANCE . GetSystemDefaultLCID ( ) ; 
 - 	 	 WinDef . WORD wFlags = new WinDef . WORD ( 1 ) ; 
 - 	 	 DISPPARAMS . ByReference pDispParams = new DISPPARAMS . ByReference ( ) ; 
 - 	 	 VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; 
 - 	 	 IntByReference puArgErr = new IntByReference ( ) ; 
 - 	 	 EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; 
 - 	 	 d . Invoke ( dispIdMember , riid , lcid , wFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; 
 - 	 	 
 - 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; 
 - 	 } 
 - 
 - 	 @ Test 
 - 	 public void queryInterface _ ConnectionPointContainer ( ) { 
 - 	 	 Unknown unk = new Unknown ( this . ppWordApp . getValue ( ) ) ; 
 - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; 
 - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; 
 - 	 	 HRESULT hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; 
 - 	 } 
 - 
 - 	 @ Test 
 - 	 public void FindConnectionPoint ( ) { 
 - 	 	 / / query for ConnectionPointContainer 
 - 	 	 Unknown unk = new Unknown ( this . ppWordApp . getValue ( ) ) ; 
 - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; 
 - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; 
 - 	 	 HRESULT hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; 
 - 
 - 	 	 / / find connection point for Application _ Events4 
 - 	 	 IID appEvnts4 = new IID ( " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 - 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; 
 - 	 	 PointerByReference ppCp = new PointerByReference ( ) ; 
 - 	 	 hr = cpc . FindConnectionPoint ( riid , ppCp ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; 
 - 	 } 
 - 
 - 	 @ Test 
 - 	 public void GetConnectionInterface ( ) { 
 - 	 	 / / query for ConnectionPointContainer 
 - 	 	 Unknown unk = new Unknown ( this . ppWordApp . getValue ( ) ) ; 
 - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; 
 - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; 
 - 	 	 HRESULT hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; 
 - 
 - 	 	 / / find connection point for Application _ Events4 
 - 	 	 IID appEvnts4 = new IID ( " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 - 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; 
 - 	 	 PointerByReference ppCp = new PointerByReference ( ) ; 
 - 	 	 hr = cpc . FindConnectionPoint ( riid , ppCp ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; 
 - 
 - 	 	 IID cp _ iid = new IID ( ) ; 
 - 	 	 hr = cp . GetConnectionInterface ( cp _ iid ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 
 - 	 	 Assert . assertEquals ( appEvnts4 , cp _ iid ) ; 
 - 	 } 
 - 
 - 	 class Application _ Events4 implements IDispatchCallback { 
 - 	 	 public DispatchListener listener = new DispatchListener ( this ) ; 
 - 
 - 	 	 @ Override 
 - 	 	 public Pointer getPointer ( ) { 
 - 	 	 	 return this . listener . getPointer ( ) ; 
 - 	 	 } 
 - 
 - 	 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IDispatch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - 	 	 @ Override 
 - 	 	 public HRESULT GetTypeInfoCount ( UINTByReference pctinfo ) { 
 - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 - 	 	 } 
 - 
 - 	 	 @ Override 
 - 	 	 public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , PointerByReference ppTInfo ) { 
 - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 - 	 	 } 
 - 
 - 	 	 @ Override 
 - 	 	 public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , DISPIDByReference rgDispId ) { 
 - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 - 	 	 } 
 - 
 - 	 	 public boolean Invoke _ called = false ; 
 - 	 	 @ Override 
 - 	 	 public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , WORD wFlags , 
 - 	 	 	 	 DISPPARAMS . ByReference pDispParams , VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 - 	 IntByReference puArgErr ) { 
 - 	 	 	 this . Invoke _ called = true ; 
 - 	 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 - 	 	 } 
 - 	 	 
 - 	 	 
 - 	 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IUnknown - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - 	 	 public boolean QueryInterface _ called = false ; 
 - 	 	 @ Override 
 - 	 	 public HRESULT QueryInterface ( REFIID refid , PointerByReference ppvObject ) { 
 - 	 	 	 this . QueryInterface _ called = true ; 
 - 	 	 	 if ( null = = ppvObject ) { 
 - 	 	 	 	 return new HRESULT ( WinError . E _ POINTER ) ; 
 - 	 	 	 } 
 - 
 - 	 	 	 String s = refid . toGuidString ( ) ; 
 - 	 	 	 IID appEvnts4 = new IID ( " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 - 	 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; 
 - 
 - 	 	 	 if ( refid . equals ( riid ) ) { 
 - 	 	 	 	 return WinError . S _ OK ; 
 - 	 	 	 } 
 - 	 	 	 
 - 	 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Unknown . IID _ IUNKNOWN ) ) { 
 - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; 
 - 	 	 	 	 return WinError . S _ OK ; 
 - 	 	 	 } 
 - 	 	 	 
 - 	 	 	 if ( new Guid . IID ( refid . getPointer ( ) ) . equals ( Dispatch . IID _ IDISPATCH ) ) { 
 - 	 	 	 	 ppvObject . setValue ( this . getPointer ( ) ) ; 
 - 	 	 	 	 return WinError . S _ OK ; 
 - 	 	 	 } 
 - 	 	 	 
 - 	 	 	 return new HRESULT ( WinError . E _ NOINTERFACE ) ; 
 - 	 	 } 
 - 
 - 	 	 public int AddRef ( ) { 
 - 	 	 	 return 0 ; 
 - 	 	 } 
 - 
 - 	 	 public int Release ( ) { 
 - 	 	 	 return 0 ; 
 - 	 	 } 
 - 
 - 	 } 
 - 
 - 	 @ Test 
 - 	 public void Advise ( ) { 
 - 
 - 	 	 / / query for ConnectionPointContainer 
 - 	 	 Unknown unk = new Unknown ( this . ppWordApp . getValue ( ) ) ; 
 - 	 	 PointerByReference ppCpc = new PointerByReference ( ) ; 
 - 	 	 IID cpcIID = new IID ( " { B196B284 - BAB4 - 101A - B69C - 00AA00341D07 } " ) ; 
 - 	 	 HRESULT hr = unk . QueryInterface ( new REFIID ( cpcIID ) , ppCpc ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 ConnectionPointContainer cpc = new ConnectionPointContainer ( ppCpc . getValue ( ) ) ; 
 - 
 - 	 	 / / find connection point for Application _ Events4 
 - 	 	 IID appEvnts4 = new IID ( " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 - 	 	 REFIID riid = new REFIID ( appEvnts4 . getPointer ( ) ) ; 
 - 	 	 PointerByReference ppCp = new PointerByReference ( ) ; 
 - 	 	 hr = cpc . FindConnectionPoint ( riid , ppCp ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 ConnectionPoint cp = new ConnectionPoint ( ppCp . getValue ( ) ) ; 
 - 	 	 IID cp _ iid = new IID ( ) ; 
 - 	 	 hr = cp . GetConnectionInterface ( cp _ iid ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 
 - 	 	 Application _ Events4 listener = new Application _ Events4 ( ) ; 
 - 
 - 	 	 DWORDByReference pdwCookie = new DWORDByReference ( ) ; 
 - 	 	 hr = cp . Advise ( listener , pdwCookie ) ; 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 
 - 	 	 Assert . assertTrue ( listener . QueryInterface _ called ) ; 
 - 	 	 
 - 	 } 
 - 
 - }

NEAREST DIFF:
ELIMINATEDSENTENCE
