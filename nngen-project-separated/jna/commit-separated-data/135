BLEU SCORE: 0.5

TEST MSG: Update documentation
GENERATED MSG: mend

TEST DIFF (one line): diff - - git a / www / AndroidDevelopmentEnvironment . md b / www / AndroidDevelopmentEnvironment . md <nl> index 3d5c9e6 . . 4ab86ff 100644 <nl> - - - a / www / AndroidDevelopmentEnvironment . md <nl> + + + b / www / AndroidDevelopmentEnvironment . md <nl> @ @ - 9 , 6 + 9 , 24 @ @ Android Development Environment <nl> * If you ' re using android - maven - plugin , ` jna . jar ` can be used as - is ( native libraries will be automatically copied into your project ) . <nl> * If you ' re using Google ' s Eclipse plugin then you must manually remove libjnidispatch . so from jna . jar / lib / armeabi and add it into your project ' s libs / armeabi directory . <nl> * See [ http : / / code . google . com / p / android / issues / detail ? id = 17861 ] ( http : / / code . google . com / p / android / issues / detail ? id = 17861 ) and [ http : / / developer . android . com / guide / practices / jni . html ] ( http : / / developer . android . com / guide / practices / jni . html ) for more information . <nl> + * The NDK can be downloaded from [ https : / / developer . android . com / ndk / index . html ] <nl> <nl> + Sample build <nl> + - - - - - - - - - - - - <nl> <nl> - <nl> + ` ` ` bash <nl> + export NDK _ PLATFORM = / home / matthias / bin / android - ndk - r12b / platforms / android - 21 <nl> + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / aarch64 - linux - android - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH <nl> + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / arm - linux - androideabi - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH <nl> + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / mips64el - linux - android - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH <nl> + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / mipsel - linux - android - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH <nl> + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / x86 - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH <nl> + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / x86 _ 64 - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH <nl> + ant - Dos . prefix = android - aarch64 <nl> + ant - Dos . prefix = android - armv7 <nl> + ant - Dos . prefix = android - arm <nl> + ant - Dos . prefix = android - mips64 <nl> + ant - Dos . prefix = android - mips <nl> + ant - Dos . prefix = android - x86 - 64 <nl> + ant - Dos . prefix = android - x86 <nl> + ` ` ` <nl> \ No newline at end of file <nl> diff - - git a / www / FrequentlyAskedQuestions . md b / www / FrequentlyAskedQuestions . md <nl> index dfe902e . . 76c6414 100644 <nl> - - - a / www / FrequentlyAskedQuestions . md <nl> + + + b / www / FrequentlyAskedQuestions . md <nl> @ @ - 3 , 7 + 3 , 7 @ @ Frequently Asked Questions <nl> <nl> I ' m having trouble generating correct library mappings <nl> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - Make sure you ' ve read [ this page ] ( https : / / github . com / java - native - access / jna / blob / master / www / Mappings . md ) and [ this one ] ( http : / / java - native - access . github . io / jna / 4 . 2 . 0 / javadoc / overview - summary . html # overview _ description ) . Try [ JNAerator ] ( http : / / code . google . com / p / jnaerator / ) . If you find its output too verbose , delete the mappings you don ' t need , or copy out the ones you do need . <nl> + Make sure you ' ve read [ this page ] ( https : / / github . com / java - native - access / jna / blob / master / www / Mappings . md ) and [ this one ] ( http : / / java - native - access . github . io / jna / 4 . 2 . 1 / overview - summary . html # overview . description ) . Try [ JNAerator ] ( http : / / code . google . com / p / jnaerator / ) . If you find its output too verbose , delete the mappings you don ' t need , or copy out the ones you do need . <nl> <nl> JNA is missing function XXX in its platform library mappings <nl> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> @ @ - 157 , 11 + 157 , 6 @ @ Does JNA work with J2ME / Windows CE / Mobile ? <nl> <nl> There is an implementation included in the regular JNA distribution built with cegcc and tested against phoneME . <nl> <nl> - I need to use a COM / OCX / ActiveX object . Can JNA do that ? <nl> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> - <nl> - Not really . Try JACOB or com4j , both of which can parse a COM interface definition and generate a Java object to match it . JNAerator is also working on generating COM bindings . <nl> - <nl> Why does the VM sometimes crash in my shutdown hook on Windows ? <nl> - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> <nl> @ @ - 187 , 4 + 182 , 11 @ @ You might expect a speedup of about an order of magnitude moving to JNA direct m <nl> <nl> JNA COM support <nl> - - - - - - - - - - - - - - - <nl> - There is a new implementation to support COM in conjunction with JNA directly . The development is relatively young , honestly the development has been finished just end of February ' 13 . Please note that fact if you use the COM support in JNA , there could be things missing or not absolutely tested or still not working . Please use the jna user group to report your experience with the JNA Com support . <nl> + There are two implementations to support COM in conjunction with JNA directly . <nl> + Please see the [ PlatformLibrary ] ( https : / / github . com / java - native - access / jna / blob / master / www / PlatformLibrary . md ) <nl> + documentation for more information and use the jna user group to report your <nl> + experience with the JNA COM support . <nl> + <nl> + Additional resource that should be checked are JACOB or com4j , both of which can <nl> + parse a COM interface definition and generate a Java object to match it . <nl> + JNAerator is also working on generating COM bindings . <nl> \ No newline at end of file <nl> diff - - git a / www / PlatformLibrary . md b / www / PlatformLibrary . md <nl> index 1c90d3f . . 8d72a6e 100644 <nl> - - - a / www / PlatformLibrary . md <nl> + + + b / www / PlatformLibrary . md <nl> @ @ - 18 , 20 + 18 , 37 @ @ Cross - platform functions and structures are implemented in ` com . sun . jna . platform <nl> COM support <nl> = = = = = = = = = = = <nl> <nl> - late - time - binding <nl> - - - - - - - - - - - - - - - - - - <nl> + JNA contains two different approaches to binding COM object for access from <nl> + java . Both mainly focus on late - time - binding / invoke usage . <nl> <nl> - JNA includes basic Microsoft COM support in the package ` com . sun . jna . platform . win32 . COM . * ` . <nl> - The COM support is being implemented with late - time - binding , vtable support is not yet available . <nl> - The straightforward approach is to extend the class ` COMObject . class ` as base class for all COM enabled java applications . <nl> + The first and older variant is found in the ` com . sun . jna . platform . win32 . COM ` <nl> + package . The straightforward approach is to extend the class ` COMBindingBaseObject ` <nl> + as base class for all COM enabled java applications . <nl> <nl> - * ` COMObject ( String progId , boolean useActiveInstance ) ` : first parameter describes the ` ProgID ` ( e . g . WinWord - > ` Word . Application ` ) , second parameter if a current running instance should be used . <nl> - <nl> - * ` COMObject . oleMethod ` : provides the possability to call any kind of COM method like ` Properties ` and ` Methods ` . The ' oleMethod ' should be used to create a COM method in the custom java wrapper , <nl> + * ` COMBindingBaseObject ( String clsid , boolean useActiveInstance ) ` : first parameter describes the ` ProgID ` ( e . g . WinWord - > ` Word . Application ` ) , second parameter if a current running instance should be used . <nl> + * ` COMBindingBaseObject # oleMethod ` : provides the possability to call any kind of COM method like ` Properties ` and ` Methods ` . The ' oleMethod ' should be used to create a COM method in the custom java wrapper , <nl> <nl> e . g . ( part of the MSWord sample ) <nl> ` this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , result , this . iDispatch , " Visible " , new VARIANT ( bVisible ) ) ; ` <nl> <nl> + The approach means , that each method that is to be called needs to be manually <nl> + wrapped and all potential parameters need to be marshalled and return values <nl> + need to be manually unmarshalled . <nl> + <nl> + While very flexible , the first approach has the drawback , that the same operation : <nl> + marshalling and unmarshalling needs to be done manually each time . Following <nl> + the example set by JNA itself , this approach is based on interfaces and using <nl> + a [ dynamic proxy ] ( https : / / docs . oracle . com / javase / 7 / docs / api / java / lang / reflect / Proxy . html ) and an [ InvocationHandler ] ( https : / / docs . oracle . com / javase / 7 / docs / api / java / lang / reflect / InvocationHandler . html ) <nl> + to centralize the marshalling and demarshalling . <nl> + <nl> + The support for the second approach is demonstrated in the ` com . sun . jna . platform . win32 . COM . util ` <nl> + package . <nl> + <nl> + Both approaches are demonstrated in the [ msoffice contrib project ] ( https : / / github . com / java - native - access / jna / tree / master / contrib / msoffice ) . <nl> + <nl> + A minimal VTable based call sample can be found in ` com . sun . jna . platform . win32 . COM . COMInvoker ` . <nl> + <nl> + <nl> * ` ITypeLib . java ` : a wrapper for a ` TypeLib ` definition <nl> * ` IUnknown . java ` : a wrapper for the ` IUnknown ` interface <nl> * COMException . java : used as exception <nl> @ @ - 46 , 3 + 63 , 32 @ @ e . g . ( part of the MSWord sample ) <nl> Typelib parsing <nl> - - - - - - - - - - - - - - - <nl> <nl> + For both above described approaches code generators exist . Included is a generator <nl> + for the first approach . Here is a sample call : <nl> + <nl> + ` ` ` <nl> + java - cp " dist / jna . jar ; dist / jna - platform . jar " com . sun . jna . platform . win32 . COM . tlb . TlbImp - tlb . id { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } - tlb . major . version 1 - tlb . minor . version 0 - bind . mode dispId - output . dir outputdir <nl> + ` ` ` <nl> + <nl> + That call generates the bindings for the Microsoft Shell Controls . <nl> + <nl> + For the second approach a code generator exists out of tree : <nl> + <nl> + https : / / github . com / matthiasblaesing / TlbCodeGenerator <nl> + <nl> + That code generator is implemented as a maven plugin . <nl> + <nl> + That code generator was used to generate the bindings located in this repository : <nl> + <nl> + https : / / github . com / matthiasblaesing / COMTypelibraries <nl> + <nl> + There are bindings for : <nl> + <nl> + - Microsoft Excel <nl> + - Microsoft Outlook <nl> + - Microsoft Word <nl> + - Microsoft Visual Basic for Applications Extensibility ( vbide ) <nl> + - Microsoft Office 15 . 0 Object Library <nl> + - OLE Automation ( stdole ) <nl> + - Microsoft Internet Controls ( shdocvw ) <nl> + - Microsoft Windows Image Acquisition Library <nl> \ No newline at end of file <nl> diff - - git a / www / WindowsDevelopmentEnvironment . md b / www / WindowsDevelopmentEnvironment . md <nl> index 518ad96 . . b2c7017 100644 <nl> - - - a / www / WindowsDevelopmentEnvironment . md <nl> + + + b / www / WindowsDevelopmentEnvironment . md <nl> @ @ - 58 , 3 + 58 , 64 @ @ for each file that it ' s complaining about . <nl> # # # Building <nl> <nl> Type ` ant ` from the top to build the project . <nl> + <nl> + Recipe for building on windows <nl> + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> + <nl> + This is the contents of a note I made for myself to be able to build JNA on <nl> + windows . <nl> + <nl> + < pre > <nl> + 0 . Start - Point : A clean Windows 10 Installation with all patches as of 2016 - 06 - 10 <nl> + 1 . Install Windows SDK 7 . 1 : <nl> + <nl> + 	 Version registry key : <nl> + <nl> + 	 HKEY _ LOCAL _ MACHINE \ SOFTWARE \ Wow6432Node \ Microsoft \ NET Framework Setup \ NDP \ v4 \ Client <nl> + 	 HKEY _ LOCAL _ MACHINE \ SOFTWARE \ Wow6432Node \ Microsoft \ NET Framework Setup \ NDP \ v4 \ Full <nl> + <nl> + 	 Relevant attribute : VERSION <nl> + <nl> + 	 1 . Note down the values in the version value ( Windows 10 pure with patches as of 2016 - 06 - 10 : 4 . 6 . 01038 ) <nl> + 	 2 . Change ownership of the registry keys to your current user ( Open permissions for the key and choose " Extended " ) <nl> + 	 3 . Add full access righs for your current user to the permissions <nl> + 	 4 . Change both version attributes to 4 . 0 . 30319 <nl> + 	 5 . Download and Install Windows SDK 7 . 1 with defaults : http : / / www . microsoft . com / en - us / download / details . aspx ? id = 8279 <nl> + 	 6 . Restore Version from first item of this list <nl> + <nl> + <nl> + 2 . Install Oracle JDK 8u92 ( 64 bit ) <nl> + 3 . Install Cygwin ( https : / / cygwin . com / install . html ) <nl> + 	 - make <nl> + 	 - automake <nl> + 	 - automake1 . 15 <nl> + 	 - libtool <nl> + 	 - mingw64 - x86 _ 64 - gcc - g + + ( Version 5 . 3 . 0 - 1 ) <nl> + 	 - mingw64 - x86 _ 64 - gcc - core ( Version 5 . 3 . 0 - 1 ) <nl> + 	 - gcc - g + + <nl> + 	 - diffutils <nl> + 4 . Ensure ant , maven , cygwin are accessible from the PATH <nl> + 5 . Run <nl> + 	 C : \ Program Files \ Microsoft SDKs \ Windows \ v7 . 1 \ Bin \ SetEnv . Cmd / Release / x64 <nl> + inside a windows command prompt <nl> + 6 . Point JAVA _ HOME to the root of a 64 Bit JDK <nl> + 7 . Run native build <nl> + <nl> + <nl> + For 32bit : <nl> + <nl> + - Install : <nl> + - mingw64 - i686 - gcc - g + + ( Version 5 . 3 . 0 - 1 ) <nl> + - mingw64 - i686 - gcc - core ( Version 5 . 3 . 0 - 1 ) <nl> + - Modify the recipe : <nl> + - Step 5 : <nl> + C : \ Program Files \ Microsoft SDKs \ Windows \ v7 . 1 \ Bin \ SetEnv . Cmd / Release / x86 <nl> + - Step 6 : <nl> + Point JAVA _ HOME to the root of a 32 Bit JDK <nl> + <nl> + To build with Visual Studio 2015 : <nl> + - Instead of Step 5 start the build environments from start menu : <nl> + - VS2015 x86 Native Tools <nl> + - VS2015 x64 Native Tools <nl> + - Run steps 6 + 7 inside that environment <nl> + < / pre > <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / configure b / configure <nl> index 1cbbe27 . . 3e7d415 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 14297 , 7 + 14297 , 7 @ @ case " $ target " in <nl> $ as _ echo " # define FFI _ EXEC _ TRAMPOLINE _ TABLE 1 " > > confdefs . h <nl> <nl> ; ; <nl> - * - apple - darwin1 [ 10 ] * | * - * - freebsd * | * - * - kfreebsd * | * - * - openbsd * | * - pc - solaris * ) <nl> + * - apple - darwin1 * | * - * - freebsd * | * - * - kfreebsd * | * - * - openbsd * | * - pc - solaris * ) <nl> <nl> $ as _ echo " # define FFI _ MMAP _ EXEC _ WRIT 1 " > > confdefs . h <nl>

TEST DIFF:
diff - - git a / www / AndroidDevelopmentEnvironment . md b / www / AndroidDevelopmentEnvironment . md 
 index 3d5c9e6 . . 4ab86ff 100644 
 - - - a / www / AndroidDevelopmentEnvironment . md 
 + + + b / www / AndroidDevelopmentEnvironment . md 
 @ @ - 9 , 6 + 9 , 24 @ @ Android Development Environment 
 * If you ' re using android - maven - plugin , ` jna . jar ` can be used as - is ( native libraries will be automatically copied into your project ) . 
 * If you ' re using Google ' s Eclipse plugin then you must manually remove libjnidispatch . so from jna . jar / lib / armeabi and add it into your project ' s libs / armeabi directory . 
 * See [ http : / / code . google . com / p / android / issues / detail ? id = 17861 ] ( http : / / code . google . com / p / android / issues / detail ? id = 17861 ) and [ http : / / developer . android . com / guide / practices / jni . html ] ( http : / / developer . android . com / guide / practices / jni . html ) for more information . 
 + * The NDK can be downloaded from [ https : / / developer . android . com / ndk / index . html ] 
 
 + Sample build 
 + - - - - - - - - - - - - 
 
 - 
 + ` ` ` bash 
 + export NDK _ PLATFORM = / home / matthias / bin / android - ndk - r12b / platforms / android - 21 
 + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / aarch64 - linux - android - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH 
 + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / arm - linux - androideabi - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH 
 + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / mips64el - linux - android - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH 
 + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / mipsel - linux - android - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH 
 + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / x86 - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH 
 + export PATH = $ NDK _ PLATFORM / . . / . . / toolchains / x86 _ 64 - 4 . 9 / prebuilt / linux - x86 _ 64 / bin / : $ PATH 
 + ant - Dos . prefix = android - aarch64 
 + ant - Dos . prefix = android - armv7 
 + ant - Dos . prefix = android - arm 
 + ant - Dos . prefix = android - mips64 
 + ant - Dos . prefix = android - mips 
 + ant - Dos . prefix = android - x86 - 64 
 + ant - Dos . prefix = android - x86 
 + ` ` ` 
 \ No newline at end of file 
 diff - - git a / www / FrequentlyAskedQuestions . md b / www / FrequentlyAskedQuestions . md 
 index dfe902e . . 76c6414 100644 
 - - - a / www / FrequentlyAskedQuestions . md 
 + + + b / www / FrequentlyAskedQuestions . md 
 @ @ - 3 , 7 + 3 , 7 @ @ Frequently Asked Questions 
 
 I ' m having trouble generating correct library mappings 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - Make sure you ' ve read [ this page ] ( https : / / github . com / java - native - access / jna / blob / master / www / Mappings . md ) and [ this one ] ( http : / / java - native - access . github . io / jna / 4 . 2 . 0 / javadoc / overview - summary . html # overview _ description ) . Try [ JNAerator ] ( http : / / code . google . com / p / jnaerator / ) . If you find its output too verbose , delete the mappings you don ' t need , or copy out the ones you do need . 
 + Make sure you ' ve read [ this page ] ( https : / / github . com / java - native - access / jna / blob / master / www / Mappings . md ) and [ this one ] ( http : / / java - native - access . github . io / jna / 4 . 2 . 1 / overview - summary . html # overview . description ) . Try [ JNAerator ] ( http : / / code . google . com / p / jnaerator / ) . If you find its output too verbose , delete the mappings you don ' t need , or copy out the ones you do need . 
 
 JNA is missing function XXX in its platform library mappings 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 @ @ - 157 , 11 + 157 , 6 @ @ Does JNA work with J2ME / Windows CE / Mobile ? 
 
 There is an implementation included in the regular JNA distribution built with cegcc and tested against phoneME . 
 
 - I need to use a COM / OCX / ActiveX object . Can JNA do that ? 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - 
 - Not really . Try JACOB or com4j , both of which can parse a COM interface definition and generate a Java object to match it . JNAerator is also working on generating COM bindings . 
 - 
 Why does the VM sometimes crash in my shutdown hook on Windows ? 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 
 @ @ - 187 , 4 + 182 , 11 @ @ You might expect a speedup of about an order of magnitude moving to JNA direct m 
 
 JNA COM support 
 - - - - - - - - - - - - - - - 
 - There is a new implementation to support COM in conjunction with JNA directly . The development is relatively young , honestly the development has been finished just end of February ' 13 . Please note that fact if you use the COM support in JNA , there could be things missing or not absolutely tested or still not working . Please use the jna user group to report your experience with the JNA Com support . 
 + There are two implementations to support COM in conjunction with JNA directly . 
 + Please see the [ PlatformLibrary ] ( https : / / github . com / java - native - access / jna / blob / master / www / PlatformLibrary . md ) 
 + documentation for more information and use the jna user group to report your 
 + experience with the JNA COM support . 
 + 
 + Additional resource that should be checked are JACOB or com4j , both of which can 
 + parse a COM interface definition and generate a Java object to match it . 
 + JNAerator is also working on generating COM bindings . 
 \ No newline at end of file 
 diff - - git a / www / PlatformLibrary . md b / www / PlatformLibrary . md 
 index 1c90d3f . . 8d72a6e 100644 
 - - - a / www / PlatformLibrary . md 
 + + + b / www / PlatformLibrary . md 
 @ @ - 18 , 20 + 18 , 37 @ @ Cross - platform functions and structures are implemented in ` com . sun . jna . platform 
 COM support 
 = = = = = = = = = = = 
 
 - late - time - binding 
 - - - - - - - - - - - - - - - - - - 
 + JNA contains two different approaches to binding COM object for access from 
 + java . Both mainly focus on late - time - binding / invoke usage . 
 
 - JNA includes basic Microsoft COM support in the package ` com . sun . jna . platform . win32 . COM . * ` . 
 - The COM support is being implemented with late - time - binding , vtable support is not yet available . 
 - The straightforward approach is to extend the class ` COMObject . class ` as base class for all COM enabled java applications . 
 + The first and older variant is found in the ` com . sun . jna . platform . win32 . COM ` 
 + package . The straightforward approach is to extend the class ` COMBindingBaseObject ` 
 + as base class for all COM enabled java applications . 
 
 - * ` COMObject ( String progId , boolean useActiveInstance ) ` : first parameter describes the ` ProgID ` ( e . g . WinWord - > ` Word . Application ` ) , second parameter if a current running instance should be used . 
 - 
 - * ` COMObject . oleMethod ` : provides the possability to call any kind of COM method like ` Properties ` and ` Methods ` . The ' oleMethod ' should be used to create a COM method in the custom java wrapper , 
 + * ` COMBindingBaseObject ( String clsid , boolean useActiveInstance ) ` : first parameter describes the ` ProgID ` ( e . g . WinWord - > ` Word . Application ` ) , second parameter if a current running instance should be used . 
 + * ` COMBindingBaseObject # oleMethod ` : provides the possability to call any kind of COM method like ` Properties ` and ` Methods ` . The ' oleMethod ' should be used to create a COM method in the custom java wrapper , 
 
 e . g . ( part of the MSWord sample ) 
 ` this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , result , this . iDispatch , " Visible " , new VARIANT ( bVisible ) ) ; ` 
 
 + The approach means , that each method that is to be called needs to be manually 
 + wrapped and all potential parameters need to be marshalled and return values 
 + need to be manually unmarshalled . 
 + 
 + While very flexible , the first approach has the drawback , that the same operation : 
 + marshalling and unmarshalling needs to be done manually each time . Following 
 + the example set by JNA itself , this approach is based on interfaces and using 
 + a [ dynamic proxy ] ( https : / / docs . oracle . com / javase / 7 / docs / api / java / lang / reflect / Proxy . html ) and an [ InvocationHandler ] ( https : / / docs . oracle . com / javase / 7 / docs / api / java / lang / reflect / InvocationHandler . html ) 
 + to centralize the marshalling and demarshalling . 
 + 
 + The support for the second approach is demonstrated in the ` com . sun . jna . platform . win32 . COM . util ` 
 + package . 
 + 
 + Both approaches are demonstrated in the [ msoffice contrib project ] ( https : / / github . com / java - native - access / jna / tree / master / contrib / msoffice ) . 
 + 
 + A minimal VTable based call sample can be found in ` com . sun . jna . platform . win32 . COM . COMInvoker ` . 
 + 
 + 
 * ` ITypeLib . java ` : a wrapper for a ` TypeLib ` definition 
 * ` IUnknown . java ` : a wrapper for the ` IUnknown ` interface 
 * COMException . java : used as exception 
 @ @ - 46 , 3 + 63 , 32 @ @ e . g . ( part of the MSWord sample ) 
 Typelib parsing 
 - - - - - - - - - - - - - - - 
 
 + For both above described approaches code generators exist . Included is a generator 
 + for the first approach . Here is a sample call : 
 + 
 + ` ` ` 
 + java - cp " dist / jna . jar ; dist / jna - platform . jar " com . sun . jna . platform . win32 . COM . tlb . TlbImp - tlb . id { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } - tlb . major . version 1 - tlb . minor . version 0 - bind . mode dispId - output . dir outputdir 
 + ` ` ` 
 + 
 + That call generates the bindings for the Microsoft Shell Controls . 
 + 
 + For the second approach a code generator exists out of tree : 
 + 
 + https : / / github . com / matthiasblaesing / TlbCodeGenerator 
 + 
 + That code generator is implemented as a maven plugin . 
 + 
 + That code generator was used to generate the bindings located in this repository : 
 + 
 + https : / / github . com / matthiasblaesing / COMTypelibraries 
 + 
 + There are bindings for : 
 + 
 + - Microsoft Excel 
 + - Microsoft Outlook 
 + - Microsoft Word 
 + - Microsoft Visual Basic for Applications Extensibility ( vbide ) 
 + - Microsoft Office 15 . 0 Object Library 
 + - OLE Automation ( stdole ) 
 + - Microsoft Internet Controls ( shdocvw ) 
 + - Microsoft Windows Image Acquisition Library 
 \ No newline at end of file 
 diff - - git a / www / WindowsDevelopmentEnvironment . md b / www / WindowsDevelopmentEnvironment . md 
 index 518ad96 . . b2c7017 100644 
 - - - a / www / WindowsDevelopmentEnvironment . md 
 + + + b / www / WindowsDevelopmentEnvironment . md 
 @ @ - 58 , 3 + 58 , 64 @ @ for each file that it ' s complaining about . 
 # # # Building 
 
 Type ` ant ` from the top to build the project . 
 + 
 + Recipe for building on windows 
 + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 + 
 + This is the contents of a note I made for myself to be able to build JNA on 
 + windows . 
 + 
 + < pre > 
 + 0 . Start - Point : A clean Windows 10 Installation with all patches as of 2016 - 06 - 10 
 + 1 . Install Windows SDK 7 . 1 : 
 + 
 + 	 Version registry key : 
 + 
 + 	 HKEY _ LOCAL _ MACHINE \ SOFTWARE \ Wow6432Node \ Microsoft \ NET Framework Setup \ NDP \ v4 \ Client 
 + 	 HKEY _ LOCAL _ MACHINE \ SOFTWARE \ Wow6432Node \ Microsoft \ NET Framework Setup \ NDP \ v4 \ Full 
 + 
 + 	 Relevant attribute : VERSION 
 + 
 + 	 1 . Note down the values in the version value ( Windows 10 pure with patches as of 2016 - 06 - 10 : 4 . 6 . 01038 ) 
 + 	 2 . Change ownership of the registry keys to your current user ( Open permissions for the key and choose " Extended " ) 
 + 	 3 . Add full access righs for your current user to the permissions 
 + 	 4 . Change both version attributes to 4 . 0 . 30319 
 + 	 5 . Download and Install Windows SDK 7 . 1 with defaults : http : / / www . microsoft . com / en - us / download / details . aspx ? id = 8279 
 + 	 6 . Restore Version from first item of this list 
 + 
 + 
 + 2 . Install Oracle JDK 8u92 ( 64 bit ) 
 + 3 . Install Cygwin ( https : / / cygwin . com / install . html ) 
 + 	 - make 
 + 	 - automake 
 + 	 - automake1 . 15 
 + 	 - libtool 
 + 	 - mingw64 - x86 _ 64 - gcc - g + + ( Version 5 . 3 . 0 - 1 ) 
 + 	 - mingw64 - x86 _ 64 - gcc - core ( Version 5 . 3 . 0 - 1 ) 
 + 	 - gcc - g + + 
 + 	 - diffutils 
 + 4 . Ensure ant , maven , cygwin are accessible from the PATH 
 + 5 . Run 
 + 	 C : \ Program Files \ Microsoft SDKs \ Windows \ v7 . 1 \ Bin \ SetEnv . Cmd / Release / x64 
 + inside a windows command prompt 
 + 6 . Point JAVA _ HOME to the root of a 64 Bit JDK 
 + 7 . Run native build 
 + 
 + 
 + For 32bit : 
 + 
 + - Install : 
 + - mingw64 - i686 - gcc - g + + ( Version 5 . 3 . 0 - 1 ) 
 + - mingw64 - i686 - gcc - core ( Version 5 . 3 . 0 - 1 ) 
 + - Modify the recipe : 
 + - Step 5 : 
 + C : \ Program Files \ Microsoft SDKs \ Windows \ v7 . 1 \ Bin \ SetEnv . Cmd / Release / x86 
 + - Step 6 : 
 + Point JAVA _ HOME to the root of a 32 Bit JDK 
 + 
 + To build with Visual Studio 2015 : 
 + - Instead of Step 5 start the build environments from start menu : 
 + - VS2015 x86 Native Tools 
 + - VS2015 x64 Native Tools 
 + - Run steps 6 + 7 inside that environment 
 + < / pre > 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / configure b / configure 
 index 1cbbe27 . . 3e7d415 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 14297 , 7 + 14297 , 7 @ @ case " $ target " in 
 $ as _ echo " # define FFI _ EXEC _ TRAMPOLINE _ TABLE 1 " > > confdefs . h 
 
 ; ; 
 - * - apple - darwin1 [ 10 ] * | * - * - freebsd * | * - * - kfreebsd * | * - * - openbsd * | * - pc - solaris * ) 
 + * - apple - darwin1 * | * - * - freebsd * | * - * - kfreebsd * | * - * - openbsd * | * - pc - solaris * ) 
 
 $ as _ echo " # define FFI _ MMAP _ EXEC _ WRIT 1 " > > confdefs . h 

