BLEU SCORE: 0.06916271812933183

TEST MSG: add thread termination flags and checking
GENERATED MSG: initial callback behavior flags setup and test harness

TEST DIFF (one line): diff - - git a / native / callback . c b / native / callback . c <nl> index 1ee41e3 . . 036ab5f 100644 <nl> - - - a / native / callback . c <nl> + + + b / native / callback . c <nl> @ @ - 81 , 6 + 81 , 7 @ @ static void * const dll _ fptrs [ ] = { <nl> typedef struct _ tls { <nl> JavaVM * jvm ; <nl> jint last _ error ; <nl> + int * termination _ flag ; <nl> jboolean detach ; <nl> char name [ 256 ] ; <nl> } thread _ storage ; <nl> @ @ - 512 , 9 + 513 , 6 @ @ static thread _ storage * get _ thread _ storage ( JNIEnv * env ) { <nl> throwByName ( env , EOutOfMemory , " JNA : Internal TLS error " ) ; <nl> tls = NULL ; <nl> } <nl> - else { <nl> - fprintf ( stderr , " Created thread storage for % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; <nl> - } <nl> } <nl> } <nl> return tls ; <nl> @ @ - 529 , 13 + 527 , 9 @ @ static void dispose _ thread _ data ( void * data ) { <nl> if ( ( * jvm ) - > DetachCurrentThread ( jvm ) ! = 0 ) { <nl> fprintf ( stderr , " JNA : could not detach native thread ( automatic ) \ n " ) ; <nl> } <nl> - else { <nl> - fprintf ( stderr , " Thread detached : % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; <nl> - } <nl> - fprintf ( stderr , " Dispose thread data % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; <nl> } <nl> - else { <nl> - fprintf ( stderr , " Thread already detached % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; <nl> + if ( tls - > termination _ flag ) { <nl> + * ( tls - > termination _ flag ) = JNI _ TRUE ; <nl> } <nl> free ( data ) ; <nl> } <nl> @ @ - 617 , 6 + 611 , 7 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> int attach _ status = 0 ; <nl> JavaVMAttachArgs args ; <nl> int daemon = JNI _ FALSE ; <nl> + int * termination _ flag = NULL ; <nl> <nl> args . version = JNI _ VERSION _ 1 _ 2 ; <nl> args . name = NULL ; <nl> @ @ - 630 , 6 + 625 , 7 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> daemon = options . daemon ? JNI _ TRUE : JNI _ FALSE ; <nl> detach = options . detach ? JNI _ TRUE : JNI _ FALSE ; <nl> args . name = options . name ; <nl> + termination _ flag = options . termination _ flag ; <nl> } <nl> if ( daemon ) { <nl> attach _ status = ( * jvm ) - > AttachCurrentThreadAsDaemon ( jvm , ( void * ) & env , & args ) ; <nl> @ @ - 639 , 8 + 635 , 8 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> } <nl> tls = get _ thread _ storage ( env ) ; <nl> if ( tls ) { <nl> - snprintf ( tls - > name , sizeof ( tls - > name ) , <nl> - args . name ? args . name : " < unconfigured thread > " ) ; <nl> + strncpy ( tls - > name , args . name ? args . name : " < unconfigured thread > " , sizeof ( tls - > name ) ) ; <nl> + tls - > termination _ flag = termination _ flag ; <nl> } <nl> / / Dispose of allocated memory <nl> free ( args . name ) ; <nl> @ @ - 658 , 8 + 654 , 6 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> return ; <nl> } <nl> <nl> - fprintf ( stderr , " % p ( % s ) was attached : % d \ n " , pthread _ self ( ) , tls - > name , was _ attached ) ; <nl> - <nl> / / Give the callback glue its own local frame to ensure all local references <nl> / / are properly disposed <nl> if ( ( * env ) - > PushLocalFrame ( env , 16 ) < 0 ) { <nl> @ @ - 677 , 9 + 671 , 6 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> fprintf ( stderr , " JNA : could not detach thread \ n " ) ; <nl> } <nl> } <nl> - else { <nl> - fprintf ( stderr , " Thread will detach automatically % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; <nl> - } <nl> } <nl> <nl> const char * <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index 7b795b0 . . aa064f5 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 577 , 7 + 577 , 7 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray arr , <nl> throw _ msg = msg ; <nl> } <nl> } <nl> - JNA _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; <nl> + JNA _ set _ last _ error ( env , GET _ LAST _ ERROR ( ) ) ; <nl> <nl> PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; <nl> } <nl> @ @ - 1756 , 7 + 1756 , 7 @ @ method _ handler ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { <nl> throw _ msg = msg ; <nl> } <nl> } <nl> - JNA _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; <nl> + JNA _ set _ last _ error ( env , GET _ LAST _ ERROR ( ) ) ; <nl> <nl> PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; <nl> } <nl> diff - - git a / native / dispatch . h b / native / dispatch . h <nl> index bfaa5c6 . . 5f2e1c2 100644 <nl> - - - a / native / dispatch . h <nl> + + + b / native / dispatch . h <nl> @ @ - 214 , 6 + 214 , 7 @ @ typedef struct _ AttachOptions { <nl> int daemon ; <nl> int detach ; <nl> char * name ; <nl> + int * termination _ flag ; <nl> } AttachOptions ; <nl> extern jobject initializeThread ( callback * , AttachOptions * ) ; <nl> <nl> diff - - git a / native / testlib . c b / native / testlib . c <nl> index 5b5070d . . 7ac66d3 100644 <nl> - - - a / native / testlib . c <nl> + + + b / native / testlib . c <nl> @ @ - 646 , 13 + 646 , 11 @ @ static THREAD _ FUNC ( thread _ function , arg ) { <nl> thread _ data td = * ( thread _ data * ) arg ; <nl> void ( * func ) ( void ) = td . func ; <nl> int i ; <nl> - fprintf ( stderr , " thread start 0x % p ( % s ) \ n " , THREAD _ CURRENT ( ) , td . name ) ; <nl> <nl> for ( i = 0 ; i < td . repeat _ count ; i + + ) { <nl> func ( ) ; <nl> SLEEP ( td . sleep _ time ) ; <nl> } <nl> - fprintf ( stderr , " thread exiting 0x % p ( % s ) \ n " , THREAD _ CURRENT ( ) , td . name ) ; <nl> free ( ( void * ) arg ) ; <nl> THREAD _ EXIT ( ) ; <nl> THREAD _ RETURN ; <nl> diff - - git a / src / com / sun / jna / CallbackReference . java b / src / com / sun / jna / CallbackReference . java <nl> index ff3b11b . . b8554da 100644 <nl> - - - a / src / com / sun / jna / CallbackReference . java <nl> + + + b / src / com / sun / jna / CallbackReference . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> import java . lang . reflect . Proxy ; <nl> import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> import java . util . Iterator ; <nl> @ @ - 37 , 6 + 38 , 8 @ @ class CallbackReference extends WeakReference { <nl> static final Map callbackMap = new WeakHashMap ( ) ; <nl> static final Map directCallbackMap = new WeakHashMap ( ) ; <nl> static final Map allocations = new WeakHashMap ( ) ; <nl> + static final Map nativeThreads = Collections . synchronizedMap ( new WeakHashMap ( ) ) ; <nl> + <nl> private static final Method PROXY _ CALLBACK _ METHOD ; <nl> <nl> static { <nl> @ @ - 64 , 12 + 67 , 25 @ @ class CallbackReference extends WeakReference { <nl> public boolean daemon ; <nl> public boolean detach ; <nl> public String name ; <nl> + public Pointer termination _ flag ; <nl> / / Thread name must be UTF8 - encoded <nl> { setStringEncoding ( " utf8 " ) ; } <nl> protected List getFieldOrder ( ) { <nl> - return Arrays . asList ( new String [ ] { " daemon " , " detach " , " name " } ) ; <nl> + return Arrays . asList ( new String [ ] { " daemon " , " detach " , " name " , " termination _ flag " } ) ; <nl> + } <nl> + } <nl> + <nl> + private static ThreadLocal terminationFlag = new ThreadLocal ( ) { <nl> + protected Object initialValue ( ) { <nl> + return new Memory ( 4 ) ; <nl> } <nl> + } ; <nl> + <nl> + / * * Returns the termination flag associated with the given thread . * / <nl> + static Pointer getTerminationFlag ( Thread t ) { <nl> + return ( Pointer ) nativeThreads . get ( t ) ; <nl> } <nl> + <nl> / * * Called from native code to initialize a callback thread . * / <nl> private static ThreadGroup initializeThread ( Callback cb , AttachOptions args ) { <nl> CallbackThreadInitializer init = null ; <nl> @ @ - 85 , 8 + 101 , 11 @ @ class CallbackReference extends WeakReference { <nl> args . name = init . getName ( cb ) ; <nl> args . daemon = init . isDaemon ( cb ) ; <nl> args . detach = init . detach ( cb ) ; <nl> - args . write ( ) ; <nl> } <nl> + args . termination _ flag = ( Pointer ) terminationFlag . get ( ) ; <nl> + args . termination _ flag . setInt ( 0 , 0 ) ; <nl> + args . write ( ) ; <nl> + nativeThreads . put ( Thread . currentThread ( ) , args . termination _ flag ) ; <nl> return group ; <nl> } <nl> <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index f5b09c7 . . 7ac8d7a 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 153 , 7 + 153 , 7 @ @ public final class Native implements Version { <nl> } <nl> 	 MAX _ PADDING = Platform . isSPARC ( ) | | Platform . isWindows ( ) | | Platform . isARM ( ) <nl> | | Platform . isAIX ( ) | | Platform . isAndroid ( ) <nl> - | | ( Platform . isPPC ( ) & & Platform . isLinux ( ) ) <nl> + | | Platform . isPPC ( ) <nl> ? 8 : LONG _ SIZE ; <nl> } <nl> <nl> diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index ccca3aa . . d203293 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 1565 , 15 + 1565 , 21 @ @ public abstract class Structure { <nl> } <nl> <nl> / * * Called from native code only ; same as { @ link <nl> - * # newInstance ( Class , Pointer ) } , except that it additionally performs <nl> + * # newInstance ( Class , Pointer ) } , except that it additionally calls <nl> * { @ link # conditionalAutoRead ( ) } . <nl> * / <nl> - private static Structure newInstance ( Class type , long init ) throws IllegalArgumentException { <nl> - Structure s = newInstance ( type , init = = 0 ? PLACEHOLDER _ MEMORY : new Pointer ( init ) ) ; <nl> - if ( init ! = 0 ) { <nl> - s . conditionalAutoRead ( ) ; <nl> + private static Structure newInstance ( Class type , long init ) { <nl> + try { <nl> + Structure s = newInstance ( type , init = = 0 ? PLACEHOLDER _ MEMORY : new Pointer ( init ) ) ; <nl> + if ( init ! = 0 ) { <nl> + s . conditionalAutoRead ( ) ; <nl> + } <nl> + return s ; <nl> + } <nl> + catch ( Throwable e ) { <nl> + System . err . println ( " JNA : Error creating structure : " + e ) ; <nl> + return null ; <nl> } <nl> - return s ; <nl> } <nl> <nl> / * * Create a new Structure instance of the given type , initialized with <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index 8948edf . . 5c75288 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 189 , 7 + 189 , 6 @ @ public class CallbacksTest extends TestCase implements Paths { <nl> TestLibrary lib ; <nl> protected void setUp ( ) { <nl> lib = ( TestLibrary ) Native . loadLibrary ( " testlib " , TestLibrary . class ) ; <nl> - 	 System . out . println ( " Run " + getName ( ) ) ; <nl> } <nl> <nl> protected void tearDown ( ) { <nl> @ @ - 1152 , 14 + 1151 , 20 @ @ public class CallbacksTest extends TestCase implements Paths { <nl> } <nl> long start = System . currentTimeMillis ( ) ; <nl> WeakReference ref = ( WeakReference ) threads . iterator ( ) . next ( ) ; <nl> + <nl> while ( ref . get ( ) ! = null ) { <nl> System . gc ( ) ; <nl> - Thread . sleep ( 1000 ) ; <nl> + Thread . sleep ( 100 ) ; <nl> 	 Thread [ ] remaining = new Thread [ Thread . activeCount ( ) ] ; <nl> 	 Thread . enumerate ( remaining ) ; <nl> if ( System . currentTimeMillis ( ) - start > 10000 ) { <nl> Thread t = ( Thread ) ref . get ( ) ; <nl> - fail ( " Timed out waiting for native attached thread to be GC ' d : " + t + " alive : " + t . isAlive ( ) + " daemon : " + t . isDaemon ( ) + " \ n " + Arrays . asList ( remaining ) ) ; <nl> + Pointer terminationFlag = CallbackReference . getTerminationFlag ( t ) ; <nl> + if ( terminationFlag . getInt ( 0 ) = = 0 ) { <nl> + fail ( " Timed out waiting for native attached thread to be GC ' d : " + t + " alive : " <nl> + + t . isAlive ( ) + " daemon : " + t . isDaemon ( ) + " \ n " + Arrays . asList ( remaining ) ) ; <nl> + } <nl> + System . err . println ( " Warning : JVM did not GC Thread mapping after native thread terminated " ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> index 9cff04a . . 10172a7 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> @ @ - 1231 , 18 + 1231 , 22 @ @ public interface Kernel32 extends StdCallLibrary { <nl> boolean DeviceIoControl ( HANDLE hDevice , int dwIoControlCode , Pointer lpInBuffer , int nInBufferSize , <nl> Pointer lpOutBuffer , int nOutBufferSize , IntByReference lpBytesReturned , Pointer lpOverlapped ) ; <nl> 	 <nl> - 	 / * * <nl> - 	 * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of <nl> - 	 * space , the total amount of free space , and the total amount of free space available to the user that is <nl> - 	 * associated with the calling thread . <nl> - 	 * <nl> - 	 * @ param lpDirectoryName <nl> - 	 * @ param lpFreeBytesAvailable <nl> - 	 * @ param lpTotalNumberOfBytes <nl> - 	 * @ param lpTotalNumberOfFreeBytes <nl> - 	 * @ return <nl> - 	 * / <nl> - 	 boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; <nl> + / * * <nl> + * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of <nl> + * space , the total amount of free space , and the total amount of free space available to the user that is <nl> + * associated with the calling thread . <nl> + * <nl> + * @ param lpDirectoryName <nl> + * @ param lpFreeBytesAvailable <nl> + * @ param lpTotalNumberOfBytes <nl> + * @ param lpTotalNumberOfFreeBytes <nl> + * @ return <nl> + * If the function succeeds , the return value is nonzero . <nl> + * <nl> + * If the function fails , the return value is zero ( 0 ) . To get extended error information , <nl> + * call GetLastError . <nl> + * / <nl> + boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; <nl> <nl> / * * <nl> * Takes a snapshot of the specified processes , as well as the heaps , modules , and threads used by these processes .

TEST DIFF:
diff - - git a / native / callback . c b / native / callback . c 
 index 1ee41e3 . . 036ab5f 100644 
 - - - a / native / callback . c 
 + + + b / native / callback . c 
 @ @ - 81 , 6 + 81 , 7 @ @ static void * const dll _ fptrs [ ] = { 
 typedef struct _ tls { 
 JavaVM * jvm ; 
 jint last _ error ; 
 + int * termination _ flag ; 
 jboolean detach ; 
 char name [ 256 ] ; 
 } thread _ storage ; 
 @ @ - 512 , 9 + 513 , 6 @ @ static thread _ storage * get _ thread _ storage ( JNIEnv * env ) { 
 throwByName ( env , EOutOfMemory , " JNA : Internal TLS error " ) ; 
 tls = NULL ; 
 } 
 - else { 
 - fprintf ( stderr , " Created thread storage for % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; 
 - } 
 } 
 } 
 return tls ; 
 @ @ - 529 , 13 + 527 , 9 @ @ static void dispose _ thread _ data ( void * data ) { 
 if ( ( * jvm ) - > DetachCurrentThread ( jvm ) ! = 0 ) { 
 fprintf ( stderr , " JNA : could not detach native thread ( automatic ) \ n " ) ; 
 } 
 - else { 
 - fprintf ( stderr , " Thread detached : % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; 
 - } 
 - fprintf ( stderr , " Dispose thread data % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; 
 } 
 - else { 
 - fprintf ( stderr , " Thread already detached % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; 
 + if ( tls - > termination _ flag ) { 
 + * ( tls - > termination _ flag ) = JNI _ TRUE ; 
 } 
 free ( data ) ; 
 } 
 @ @ - 617 , 6 + 611 , 7 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 int attach _ status = 0 ; 
 JavaVMAttachArgs args ; 
 int daemon = JNI _ FALSE ; 
 + int * termination _ flag = NULL ; 
 
 args . version = JNI _ VERSION _ 1 _ 2 ; 
 args . name = NULL ; 
 @ @ - 630 , 6 + 625 , 7 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 daemon = options . daemon ? JNI _ TRUE : JNI _ FALSE ; 
 detach = options . detach ? JNI _ TRUE : JNI _ FALSE ; 
 args . name = options . name ; 
 + termination _ flag = options . termination _ flag ; 
 } 
 if ( daemon ) { 
 attach _ status = ( * jvm ) - > AttachCurrentThreadAsDaemon ( jvm , ( void * ) & env , & args ) ; 
 @ @ - 639 , 8 + 635 , 8 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 } 
 tls = get _ thread _ storage ( env ) ; 
 if ( tls ) { 
 - snprintf ( tls - > name , sizeof ( tls - > name ) , 
 - args . name ? args . name : " < unconfigured thread > " ) ; 
 + strncpy ( tls - > name , args . name ? args . name : " < unconfigured thread > " , sizeof ( tls - > name ) ) ; 
 + tls - > termination _ flag = termination _ flag ; 
 } 
 / / Dispose of allocated memory 
 free ( args . name ) ; 
 @ @ - 658 , 8 + 654 , 6 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 return ; 
 } 
 
 - fprintf ( stderr , " % p ( % s ) was attached : % d \ n " , pthread _ self ( ) , tls - > name , was _ attached ) ; 
 - 
 / / Give the callback glue its own local frame to ensure all local references 
 / / are properly disposed 
 if ( ( * env ) - > PushLocalFrame ( env , 16 ) < 0 ) { 
 @ @ - 677 , 9 + 671 , 6 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 fprintf ( stderr , " JNA : could not detach thread \ n " ) ; 
 } 
 } 
 - else { 
 - fprintf ( stderr , " Thread will detach automatically % p ( % s ) \ n " , pthread _ self ( ) , tls - > name ) ; 
 - } 
 } 
 
 const char * 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index 7b795b0 . . aa064f5 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 577 , 7 + 577 , 7 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray arr , 
 throw _ msg = msg ; 
 } 
 } 
 - JNA _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; 
 + JNA _ set _ last _ error ( env , GET _ LAST _ ERROR ( ) ) ; 
 
 PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; 
 } 
 @ @ - 1756 , 7 + 1756 , 7 @ @ method _ handler ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { 
 throw _ msg = msg ; 
 } 
 } 
 - JNA _ set _ last _ error ( GET _ LAST _ ERROR ( ) ) ; 
 + JNA _ set _ last _ error ( env , GET _ LAST _ ERROR ( ) ) ; 
 
 PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; 
 } 
 diff - - git a / native / dispatch . h b / native / dispatch . h 
 index bfaa5c6 . . 5f2e1c2 100644 
 - - - a / native / dispatch . h 
 + + + b / native / dispatch . h 
 @ @ - 214 , 6 + 214 , 7 @ @ typedef struct _ AttachOptions { 
 int daemon ; 
 int detach ; 
 char * name ; 
 + int * termination _ flag ; 
 } AttachOptions ; 
 extern jobject initializeThread ( callback * , AttachOptions * ) ; 
 
 diff - - git a / native / testlib . c b / native / testlib . c 
 index 5b5070d . . 7ac66d3 100644 
 - - - a / native / testlib . c 
 + + + b / native / testlib . c 
 @ @ - 646 , 13 + 646 , 11 @ @ static THREAD _ FUNC ( thread _ function , arg ) { 
 thread _ data td = * ( thread _ data * ) arg ; 
 void ( * func ) ( void ) = td . func ; 
 int i ; 
 - fprintf ( stderr , " thread start 0x % p ( % s ) \ n " , THREAD _ CURRENT ( ) , td . name ) ; 
 
 for ( i = 0 ; i < td . repeat _ count ; i + + ) { 
 func ( ) ; 
 SLEEP ( td . sleep _ time ) ; 
 } 
 - fprintf ( stderr , " thread exiting 0x % p ( % s ) \ n " , THREAD _ CURRENT ( ) , td . name ) ; 
 free ( ( void * ) arg ) ; 
 THREAD _ EXIT ( ) ; 
 THREAD _ RETURN ; 
 diff - - git a / src / com / sun / jna / CallbackReference . java b / src / com / sun / jna / CallbackReference . java 
 index ff3b11b . . b8554da 100644 
 - - - a / src / com / sun / jna / CallbackReference . java 
 + + + b / src / com / sun / jna / CallbackReference . java 
 @ @ - 18 , 6 + 18 , 7 @ @ import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 import java . lang . reflect . Proxy ; 
 import java . util . Arrays ; 
 + import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . HashSet ; 
 import java . util . Iterator ; 
 @ @ - 37 , 6 + 38 , 8 @ @ class CallbackReference extends WeakReference { 
 static final Map callbackMap = new WeakHashMap ( ) ; 
 static final Map directCallbackMap = new WeakHashMap ( ) ; 
 static final Map allocations = new WeakHashMap ( ) ; 
 + static final Map nativeThreads = Collections . synchronizedMap ( new WeakHashMap ( ) ) ; 
 + 
 private static final Method PROXY _ CALLBACK _ METHOD ; 
 
 static { 
 @ @ - 64 , 12 + 67 , 25 @ @ class CallbackReference extends WeakReference { 
 public boolean daemon ; 
 public boolean detach ; 
 public String name ; 
 + public Pointer termination _ flag ; 
 / / Thread name must be UTF8 - encoded 
 { setStringEncoding ( " utf8 " ) ; } 
 protected List getFieldOrder ( ) { 
 - return Arrays . asList ( new String [ ] { " daemon " , " detach " , " name " } ) ; 
 + return Arrays . asList ( new String [ ] { " daemon " , " detach " , " name " , " termination _ flag " } ) ; 
 + } 
 + } 
 + 
 + private static ThreadLocal terminationFlag = new ThreadLocal ( ) { 
 + protected Object initialValue ( ) { 
 + return new Memory ( 4 ) ; 
 } 
 + } ; 
 + 
 + / * * Returns the termination flag associated with the given thread . * / 
 + static Pointer getTerminationFlag ( Thread t ) { 
 + return ( Pointer ) nativeThreads . get ( t ) ; 
 } 
 + 
 / * * Called from native code to initialize a callback thread . * / 
 private static ThreadGroup initializeThread ( Callback cb , AttachOptions args ) { 
 CallbackThreadInitializer init = null ; 
 @ @ - 85 , 8 + 101 , 11 @ @ class CallbackReference extends WeakReference { 
 args . name = init . getName ( cb ) ; 
 args . daemon = init . isDaemon ( cb ) ; 
 args . detach = init . detach ( cb ) ; 
 - args . write ( ) ; 
 } 
 + args . termination _ flag = ( Pointer ) terminationFlag . get ( ) ; 
 + args . termination _ flag . setInt ( 0 , 0 ) ; 
 + args . write ( ) ; 
 + nativeThreads . put ( Thread . currentThread ( ) , args . termination _ flag ) ; 
 return group ; 
 } 
 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index f5b09c7 . . 7ac8d7a 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 153 , 7 + 153 , 7 @ @ public final class Native implements Version { 
 } 
 	 MAX _ PADDING = Platform . isSPARC ( ) | | Platform . isWindows ( ) | | Platform . isARM ( ) 
 | | Platform . isAIX ( ) | | Platform . isAndroid ( ) 
 - | | ( Platform . isPPC ( ) & & Platform . isLinux ( ) ) 
 + | | Platform . isPPC ( ) 
 ? 8 : LONG _ SIZE ; 
 } 
 
 diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index ccca3aa . . d203293 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 1565 , 15 + 1565 , 21 @ @ public abstract class Structure { 
 } 
 
 / * * Called from native code only ; same as { @ link 
 - * # newInstance ( Class , Pointer ) } , except that it additionally performs 
 + * # newInstance ( Class , Pointer ) } , except that it additionally calls 
 * { @ link # conditionalAutoRead ( ) } . 
 * / 
 - private static Structure newInstance ( Class type , long init ) throws IllegalArgumentException { 
 - Structure s = newInstance ( type , init = = 0 ? PLACEHOLDER _ MEMORY : new Pointer ( init ) ) ; 
 - if ( init ! = 0 ) { 
 - s . conditionalAutoRead ( ) ; 
 + private static Structure newInstance ( Class type , long init ) { 
 + try { 
 + Structure s = newInstance ( type , init = = 0 ? PLACEHOLDER _ MEMORY : new Pointer ( init ) ) ; 
 + if ( init ! = 0 ) { 
 + s . conditionalAutoRead ( ) ; 
 + } 
 + return s ; 
 + } 
 + catch ( Throwable e ) { 
 + System . err . println ( " JNA : Error creating structure : " + e ) ; 
 + return null ; 
 } 
 - return s ; 
 } 
 
 / * * Create a new Structure instance of the given type , initialized with 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index 8948edf . . 5c75288 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 189 , 7 + 189 , 6 @ @ public class CallbacksTest extends TestCase implements Paths { 
 TestLibrary lib ; 
 protected void setUp ( ) { 
 lib = ( TestLibrary ) Native . loadLibrary ( " testlib " , TestLibrary . class ) ; 
 - 	 System . out . println ( " Run " + getName ( ) ) ; 
 } 
 
 protected void tearDown ( ) { 
 @ @ - 1152 , 14 + 1151 , 20 @ @ public class CallbacksTest extends TestCase implements Paths { 
 } 
 long start = System . currentTimeMillis ( ) ; 
 WeakReference ref = ( WeakReference ) threads . iterator ( ) . next ( ) ; 
 + 
 while ( ref . get ( ) ! = null ) { 
 System . gc ( ) ; 
 - Thread . sleep ( 1000 ) ; 
 + Thread . sleep ( 100 ) ; 
 	 Thread [ ] remaining = new Thread [ Thread . activeCount ( ) ] ; 
 	 Thread . enumerate ( remaining ) ; 
 if ( System . currentTimeMillis ( ) - start > 10000 ) { 
 Thread t = ( Thread ) ref . get ( ) ; 
 - fail ( " Timed out waiting for native attached thread to be GC ' d : " + t + " alive : " + t . isAlive ( ) + " daemon : " + t . isDaemon ( ) + " \ n " + Arrays . asList ( remaining ) ) ; 
 + Pointer terminationFlag = CallbackReference . getTerminationFlag ( t ) ; 
 + if ( terminationFlag . getInt ( 0 ) = = 0 ) { 
 + fail ( " Timed out waiting for native attached thread to be GC ' d : " + t + " alive : " 
 + + t . isAlive ( ) + " daemon : " + t . isDaemon ( ) + " \ n " + Arrays . asList ( remaining ) ) ; 
 + } 
 + System . err . println ( " Warning : JVM did not GC Thread mapping after native thread terminated " ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 index 9cff04a . . 10172a7 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 @ @ - 1231 , 18 + 1231 , 22 @ @ public interface Kernel32 extends StdCallLibrary { 
 boolean DeviceIoControl ( HANDLE hDevice , int dwIoControlCode , Pointer lpInBuffer , int nInBufferSize , 
 Pointer lpOutBuffer , int nOutBufferSize , IntByReference lpBytesReturned , Pointer lpOverlapped ) ; 
 	 
 - 	 / * * 
 - 	 * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of 
 - 	 * space , the total amount of free space , and the total amount of free space available to the user that is 
 - 	 * associated with the calling thread . 
 - 	 * 
 - 	 * @ param lpDirectoryName 
 - 	 * @ param lpFreeBytesAvailable 
 - 	 * @ param lpTotalNumberOfBytes 
 - 	 * @ param lpTotalNumberOfFreeBytes 
 - 	 * @ return 
 - 	 * / 
 - 	 boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; 
 + / * * 
 + * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of 
 + * space , the total amount of free space , and the total amount of free space available to the user that is 
 + * associated with the calling thread . 
 + * 
 + * @ param lpDirectoryName 
 + * @ param lpFreeBytesAvailable 
 + * @ param lpTotalNumberOfBytes 
 + * @ param lpTotalNumberOfFreeBytes 
 + * @ return 
 + * If the function succeeds , the return value is nonzero . 
 + * 
 + * If the function fails , the return value is zero ( 0 ) . To get extended error information , 
 + * call GetLastError . 
 + * / 
 + boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; 
 
 / * * 
 * Takes a snapshot of the specified processes , as well as the heaps , modules , and threads used by these processes .
