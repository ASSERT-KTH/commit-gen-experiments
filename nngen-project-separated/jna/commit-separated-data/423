BLEU SCORE: 0.02931251013275449

TEST MSG: revise thread termination flag logic
GENERATED MSG: initial callback behavior flags setup and test harness

TEST DIFF (one line): diff - - git a / native / Makefile b / native / Makefile <nl> index d77ed8f . . f5fc61a 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 48 , 7 + 48 , 7 @ @ OS = $ ( shell uname | sed - e ' s / CYGWIN . * / win32 / g ' \ <nl> - e ' s / Linux . * / linux / g ' ) <nl> <nl> JNA _ JNI _ VERSION = 4 . 0 . 0 # auto - generated by ant <nl> - CHECKSUM = 059b6e5f0534df9b7f28dd7a87485721 # auto - generated by ant <nl> + CHECKSUM = 1a6047467b59e8748f975e03016ce3d9 # auto - generated by ant <nl> <nl> JAVA _ INCLUDES = - I " $ ( JAVA _ HOME ) / include " \ <nl> - I " $ ( JAVA _ HOME ) / include / $ ( OS ) " <nl> diff - - git a / native / callback . c b / native / callback . c <nl> index 036ab5f . . 7c376fd 100644 <nl> - - - a / native / callback . c <nl> + + + b / native / callback . c <nl> @ @ - 81 , 6 + 81 , 7 @ @ static void * const dll _ fptrs [ ] = { <nl> typedef struct _ tls { <nl> JavaVM * jvm ; <nl> jint last _ error ; <nl> + / / Contents set to JNI _ TRUE if thread has terminated and detached properly <nl> int * termination _ flag ; <nl> jboolean detach ; <nl> char name [ 256 ] ; <nl> @ @ - 503 , 6 + 504 , 8 @ @ static thread _ storage * get _ thread _ storage ( JNIEnv * env ) { <nl> } <nl> else { <nl> snprintf ( tls - > name , sizeof ( tls - > name ) , " < uninitialized thread name > " ) ; <nl> + tls - > last _ error = 0 ; <nl> + tls - > termination _ flag = NULL ; <nl> if ( ( * env ) - > GetJavaVM ( env , & tls - > jvm ) ! = JNI _ OK ) { <nl> free ( tls ) ; <nl> throwByName ( env , EIllegalState , " JNA : Could not get JavaVM " ) ; <nl> @ @ - 523 , 12 + 526 , 14 @ @ static void dispose _ thread _ data ( void * data ) { <nl> JavaVM * jvm = tls - > jvm ; <nl> JNIEnv * env ; <nl> int is _ attached = ( * jvm ) - > GetEnv ( jvm , ( void * ) & env , JNI _ VERSION _ 1 _ 4 ) = = JNI _ OK ; <nl> + jboolean detached = JNI _ TRUE ; <nl> if ( is _ attached ) { <nl> if ( ( * jvm ) - > DetachCurrentThread ( jvm ) ! = 0 ) { <nl> fprintf ( stderr , " JNA : could not detach native thread ( automatic ) \ n " ) ; <nl> + detached = JNI _ FALSE ; <nl> } <nl> } <nl> - if ( tls - > termination _ flag ) { <nl> + if ( tls - > termination _ flag & & detached ) { <nl> * ( tls - > termination _ flag ) = JNI _ TRUE ; <nl> } <nl> free ( data ) ; <nl> @ @ - 572 , 10 + 577 , 11 @ @ static void make _ thread _ data _ key ( ) { <nl> <nl> / * * Store the requested detach state for the current thread . * / <nl> void <nl> - JNA _ detach ( JNIEnv * env , jboolean d ) { <nl> + JNA _ detach ( JNIEnv * env , jboolean d , void * termination _ flag ) { <nl> thread _ storage * tls = get _ thread _ storage ( env ) ; <nl> if ( tls ) { <nl> tls - > detach = d ; <nl> + tls - > termination _ flag = ( int * ) termination _ flag ; <nl> } <nl> } <nl> <nl> @ @ - 611 , 7 + 617 , 6 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> int attach _ status = 0 ; <nl> JavaVMAttachArgs args ; <nl> int daemon = JNI _ FALSE ; <nl> - int * termination _ flag = NULL ; <nl> <nl> args . version = JNI _ VERSION _ 1 _ 2 ; <nl> args . name = NULL ; <nl> @ @ - 625 , 7 + 630 , 6 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> daemon = options . daemon ? JNI _ TRUE : JNI _ FALSE ; <nl> detach = options . detach ? JNI _ TRUE : JNI _ FALSE ; <nl> args . name = options . name ; <nl> - termination _ flag = options . termination _ flag ; <nl> } <nl> if ( daemon ) { <nl> attach _ status = ( * jvm ) - > AttachCurrentThreadAsDaemon ( jvm , ( void * ) & env , & args ) ; <nl> @ @ - 635 , 8 + 639 , 8 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> } <nl> tls = get _ thread _ storage ( env ) ; <nl> if ( tls ) { <nl> - strncpy ( tls - > name , args . name ? args . name : " < unconfigured thread > " , sizeof ( tls - > name ) ) ; <nl> - tls - > termination _ flag = termination _ flag ; <nl> + strncpy ( tls - > name , args . name ? args . name : " < unconfigured native thread > " , sizeof ( tls - > name ) ) ; <nl> + tls - > detach = detach ; <nl> } <nl> / / Dispose of allocated memory <nl> free ( args . name ) ; <nl> @ @ - 660 , 9 + 664 , 11 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { <nl> fprintf ( stderr , " JNA : Out of memory : Can ' t allocate local frame \ n " ) ; <nl> } <nl> else { <nl> - tls - > detach = detach ; <nl> callback _ invoke ( env , cb , cif , resp , cbargs ) ; <nl> - detach = tls - > detach ; <nl> + / / Make note of whether the callback wants to avoid detach <nl> + if ( ! tls - > detach ) { <nl> + detach = JNI _ FALSE ; <nl> + } <nl> ( * env ) - > PopLocalFrame ( env , NULL ) ; <nl> } <nl> <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index aa064f5 . . d6c48ba 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 3298 , 8 + 3298 , 8 @ @ Java _ com _ sun _ jna _ Native _ initialize _ 1ffi _ 1type ( JNIEnv * env , jclass UNUSED ( cls ) , j <nl> } <nl> <nl> JNIEXPORT void JNICALL <nl> - Java _ com _ sun _ jna _ Native _ detach ( JNIEnv * env , jclass UNUSED ( cls ) , jboolean d ) { <nl> - JNA _ detach ( env , d ) ; <nl> + Java _ com _ sun _ jna _ Native _ setDetachState ( JNIEnv * env , jclass UNUSED ( cls ) , jboolean d , jlong flag ) { <nl> + JNA _ detach ( env , d , L2A ( flag ) ) ; <nl> } <nl> <nl> # ifdef _ _ cplusplus <nl> diff - - git a / native / dispatch . h b / native / dispatch . h <nl> index 5f2e1c2 . . 30d00c8 100644 <nl> - - - a / native / dispatch . h <nl> + + + b / native / dispatch . h <nl> @ @ - 182 , 7 + 182 , 7 @ @ extern const char * JNA _ callback _ init ( JNIEnv * ) ; <nl> extern void JNA _ set _ last _ error ( JNIEnv * , int ) ; <nl> extern int JNA _ get _ last _ error ( JNIEnv * ) ; <nl> extern void JNA _ callback _ dispose ( JNIEnv * ) ; <nl> - extern void JNA _ detach ( JNIEnv * , jboolean ) ; <nl> + extern void JNA _ detach ( JNIEnv * , jboolean , void * ) ; <nl> extern callback * create _ callback ( JNIEnv * , jobject , jobject , <nl> jobjectArray , jclass , <nl> callconv _ t , jint , jstring ) ; <nl> @ @ - 214 , 7 + 214 , 6 @ @ typedef struct _ AttachOptions { <nl> int daemon ; <nl> int detach ; <nl> char * name ; <nl> - int * termination _ flag ; <nl> } AttachOptions ; <nl> extern jobject initializeThread ( callback * , AttachOptions * ) ; <nl> <nl> diff - - git a / src / com / sun / jna / CallbackReference . java b / src / com / sun / jna / CallbackReference . java <nl> index b8554da . . 35dfe61 100644 <nl> - - - a / src / com / sun / jna / CallbackReference . java <nl> + + + b / src / com / sun / jna / CallbackReference . java <nl> @ @ - 38 , 7 + 38 , 6 @ @ class CallbackReference extends WeakReference { <nl> static final Map callbackMap = new WeakHashMap ( ) ; <nl> static final Map directCallbackMap = new WeakHashMap ( ) ; <nl> static final Map allocations = new WeakHashMap ( ) ; <nl> - static final Map nativeThreads = Collections . synchronizedMap ( new WeakHashMap ( ) ) ; <nl> <nl> private static final Method PROXY _ CALLBACK _ METHOD ; <nl> <nl> @ @ - 67 , 32 + 66 , 20 @ @ class CallbackReference extends WeakReference { <nl> public boolean daemon ; <nl> public boolean detach ; <nl> public String name ; <nl> - public Pointer termination _ flag ; <nl> / / Thread name must be UTF8 - encoded <nl> { setStringEncoding ( " utf8 " ) ; } <nl> protected List getFieldOrder ( ) { <nl> - return Arrays . asList ( new String [ ] { " daemon " , " detach " , " name " , " termination _ flag " } ) ; <nl> + return Arrays . asList ( new String [ ] { " daemon " , " detach " , " name " , } ) ; <nl> } <nl> } <nl> <nl> - private static ThreadLocal terminationFlag = new ThreadLocal ( ) { <nl> - protected Object initialValue ( ) { <nl> - return new Memory ( 4 ) ; <nl> - } <nl> - } ; <nl> - <nl> - / * * Returns the termination flag associated with the given thread . * / <nl> - static Pointer getTerminationFlag ( Thread t ) { <nl> - return ( Pointer ) nativeThreads . get ( t ) ; <nl> - } <nl> - <nl> / * * Called from native code to initialize a callback thread . * / <nl> private static ThreadGroup initializeThread ( Callback cb , AttachOptions args ) { <nl> CallbackThreadInitializer init = null ; <nl> if ( cb instanceof DefaultCallbackProxy ) { <nl> cb = ( ( DefaultCallbackProxy ) cb ) . getCallback ( ) ; <nl> } <nl> - synchronized ( initializers ) { <nl> + synchronized ( callbackMap ) { <nl> init = ( CallbackThreadInitializer ) initializers . get ( cb ) ; <nl> } <nl> ThreadGroup group = null ; <nl> @ @ - 101 , 11 + 88 , 8 @ @ class CallbackReference extends WeakReference { <nl> args . name = init . getName ( cb ) ; <nl> args . daemon = init . isDaemon ( cb ) ; <nl> args . detach = init . detach ( cb ) ; <nl> + args . write ( ) ; <nl> } <nl> - args . termination _ flag = ( Pointer ) terminationFlag . get ( ) ; <nl> - args . termination _ flag . setInt ( 0 , 0 ) ; <nl> - args . write ( ) ; <nl> - nativeThreads . put ( Thread . currentThread ( ) , args . termination _ flag ) ; <nl> return group ; <nl> } <nl> <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index 3468d00 . . 0f5587b 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 1838 , 9 + 1838 , 28 @ @ public final class Native implements Version { <nl> < em > Warning < / em > : avoid calling { @ link # detach detach ( true ) } on threads <nl> spawned by the JVM ; the resulting behavior is not defined . <nl> * / <nl> - / / TODO : keep references to Java non - detached threads , and clear them when <nl> - / / native side sets a flag saying they ' re detached ( cleanup ) <nl> - public static native void detach ( boolean detach ) ; <nl> + public static void detach ( boolean detach ) { <nl> + Pointer p = ( Pointer ) nativeThreadTerminationFlag . get ( ) ; <nl> + nativeThreads . put ( Thread . currentThread ( ) , p ) ; <nl> + setDetachState ( detach , p . peer ) ; <nl> + } <nl> + <nl> + static Pointer getTerminationFlag ( Thread t ) { <nl> + return ( Pointer ) nativeThreads . get ( t ) ; <nl> + } <nl> + <nl> + private static Map nativeThreads = Collections . synchronizedMap ( new WeakHashMap ( ) ) ; <nl> + <nl> + private static ThreadLocal nativeThreadTerminationFlag = <nl> + new ThreadLocal ( ) { <nl> + protected Object initialValue ( ) { <nl> + Memory m = new Memory ( 4 ) ; <nl> + m . clear ( ) ; <nl> + return m ; <nl> + } <nl> + } ; <nl> + <nl> + private static native void setDetachState ( boolean detach , long terminationFlag ) ; <nl> <nl> private static class Buffers { <nl> static boolean isBuffer ( Class cls ) { <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index 5c75288 . . 4a6835b 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 1159 , 7 + 1159 , 8 @ @ public class CallbacksTest extends TestCase implements Paths { <nl> 	 Thread . enumerate ( remaining ) ; <nl> if ( System . currentTimeMillis ( ) - start > 10000 ) { <nl> Thread t = ( Thread ) ref . get ( ) ; <nl> - Pointer terminationFlag = CallbackReference . getTerminationFlag ( t ) ; <nl> + Pointer terminationFlag = Native . getTerminationFlag ( t ) ; <nl> + assertNotNull ( " Native thread termination flag is missing " , terminationFlag ) ; <nl> if ( terminationFlag . getInt ( 0 ) = = 0 ) { <nl> fail ( " Timed out waiting for native attached thread to be GC ' d : " + t + " alive : " <nl> + t . isAlive ( ) + " daemon : " + t . isDaemon ( ) + " \ n " + Arrays . asList ( remaining ) ) ;
NEAREST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> index 9cff04a . . 10172a7 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> @ @ - 1231 , 18 + 1231 , 22 @ @ public interface Kernel32 extends StdCallLibrary { <nl> boolean DeviceIoControl ( HANDLE hDevice , int dwIoControlCode , Pointer lpInBuffer , int nInBufferSize , <nl> Pointer lpOutBuffer , int nOutBufferSize , IntByReference lpBytesReturned , Pointer lpOverlapped ) ; <nl> 	 <nl> - 	 / * * <nl> - 	 * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of <nl> - 	 * space , the total amount of free space , and the total amount of free space available to the user that is <nl> - 	 * associated with the calling thread . <nl> - 	 * <nl> - 	 * @ param lpDirectoryName <nl> - 	 * @ param lpFreeBytesAvailable <nl> - 	 * @ param lpTotalNumberOfBytes <nl> - 	 * @ param lpTotalNumberOfFreeBytes <nl> - 	 * @ return <nl> - 	 * / <nl> - 	 boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; <nl> + / * * <nl> + * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of <nl> + * space , the total amount of free space , and the total amount of free space available to the user that is <nl> + * associated with the calling thread . <nl> + * <nl> + * @ param lpDirectoryName <nl> + * @ param lpFreeBytesAvailable <nl> + * @ param lpTotalNumberOfBytes <nl> + * @ param lpTotalNumberOfFreeBytes <nl> + * @ return <nl> + * If the function succeeds , the return value is nonzero . <nl> + * <nl> + * If the function fails , the return value is zero ( 0 ) . To get extended error information , <nl> + * call GetLastError . <nl> + * / <nl> + boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; <nl> <nl> / * * <nl> * Takes a snapshot of the specified processes , as well as the heaps , modules , and threads used by these processes .

TEST DIFF:
diff - - git a / native / Makefile b / native / Makefile 
 index d77ed8f . . f5fc61a 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 48 , 7 + 48 , 7 @ @ OS = $ ( shell uname | sed - e ' s / CYGWIN . * / win32 / g ' \ 
 - e ' s / Linux . * / linux / g ' ) 
 
 JNA _ JNI _ VERSION = 4 . 0 . 0 # auto - generated by ant 
 - CHECKSUM = 059b6e5f0534df9b7f28dd7a87485721 # auto - generated by ant 
 + CHECKSUM = 1a6047467b59e8748f975e03016ce3d9 # auto - generated by ant 
 
 JAVA _ INCLUDES = - I " $ ( JAVA _ HOME ) / include " \ 
 - I " $ ( JAVA _ HOME ) / include / $ ( OS ) " 
 diff - - git a / native / callback . c b / native / callback . c 
 index 036ab5f . . 7c376fd 100644 
 - - - a / native / callback . c 
 + + + b / native / callback . c 
 @ @ - 81 , 6 + 81 , 7 @ @ static void * const dll _ fptrs [ ] = { 
 typedef struct _ tls { 
 JavaVM * jvm ; 
 jint last _ error ; 
 + / / Contents set to JNI _ TRUE if thread has terminated and detached properly 
 int * termination _ flag ; 
 jboolean detach ; 
 char name [ 256 ] ; 
 @ @ - 503 , 6 + 504 , 8 @ @ static thread _ storage * get _ thread _ storage ( JNIEnv * env ) { 
 } 
 else { 
 snprintf ( tls - > name , sizeof ( tls - > name ) , " < uninitialized thread name > " ) ; 
 + tls - > last _ error = 0 ; 
 + tls - > termination _ flag = NULL ; 
 if ( ( * env ) - > GetJavaVM ( env , & tls - > jvm ) ! = JNI _ OK ) { 
 free ( tls ) ; 
 throwByName ( env , EIllegalState , " JNA : Could not get JavaVM " ) ; 
 @ @ - 523 , 12 + 526 , 14 @ @ static void dispose _ thread _ data ( void * data ) { 
 JavaVM * jvm = tls - > jvm ; 
 JNIEnv * env ; 
 int is _ attached = ( * jvm ) - > GetEnv ( jvm , ( void * ) & env , JNI _ VERSION _ 1 _ 4 ) = = JNI _ OK ; 
 + jboolean detached = JNI _ TRUE ; 
 if ( is _ attached ) { 
 if ( ( * jvm ) - > DetachCurrentThread ( jvm ) ! = 0 ) { 
 fprintf ( stderr , " JNA : could not detach native thread ( automatic ) \ n " ) ; 
 + detached = JNI _ FALSE ; 
 } 
 } 
 - if ( tls - > termination _ flag ) { 
 + if ( tls - > termination _ flag & & detached ) { 
 * ( tls - > termination _ flag ) = JNI _ TRUE ; 
 } 
 free ( data ) ; 
 @ @ - 572 , 10 + 577 , 11 @ @ static void make _ thread _ data _ key ( ) { 
 
 / * * Store the requested detach state for the current thread . * / 
 void 
 - JNA _ detach ( JNIEnv * env , jboolean d ) { 
 + JNA _ detach ( JNIEnv * env , jboolean d , void * termination _ flag ) { 
 thread _ storage * tls = get _ thread _ storage ( env ) ; 
 if ( tls ) { 
 tls - > detach = d ; 
 + tls - > termination _ flag = ( int * ) termination _ flag ; 
 } 
 } 
 
 @ @ - 611 , 7 + 617 , 6 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 int attach _ status = 0 ; 
 JavaVMAttachArgs args ; 
 int daemon = JNI _ FALSE ; 
 - int * termination _ flag = NULL ; 
 
 args . version = JNI _ VERSION _ 1 _ 2 ; 
 args . name = NULL ; 
 @ @ - 625 , 7 + 630 , 6 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 daemon = options . daemon ? JNI _ TRUE : JNI _ FALSE ; 
 detach = options . detach ? JNI _ TRUE : JNI _ FALSE ; 
 args . name = options . name ; 
 - termination _ flag = options . termination _ flag ; 
 } 
 if ( daemon ) { 
 attach _ status = ( * jvm ) - > AttachCurrentThreadAsDaemon ( jvm , ( void * ) & env , & args ) ; 
 @ @ - 635 , 8 + 639 , 8 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 } 
 tls = get _ thread _ storage ( env ) ; 
 if ( tls ) { 
 - strncpy ( tls - > name , args . name ? args . name : " < unconfigured thread > " , sizeof ( tls - > name ) ) ; 
 - tls - > termination _ flag = termination _ flag ; 
 + strncpy ( tls - > name , args . name ? args . name : " < unconfigured native thread > " , sizeof ( tls - > name ) ) ; 
 + tls - > detach = detach ; 
 } 
 / / Dispose of allocated memory 
 free ( args . name ) ; 
 @ @ - 660 , 9 + 664 , 11 @ @ callback _ dispatch ( ffi _ cif * cif , void * resp , void * * cbargs , void * user _ data ) { 
 fprintf ( stderr , " JNA : Out of memory : Can ' t allocate local frame \ n " ) ; 
 } 
 else { 
 - tls - > detach = detach ; 
 callback _ invoke ( env , cb , cif , resp , cbargs ) ; 
 - detach = tls - > detach ; 
 + / / Make note of whether the callback wants to avoid detach 
 + if ( ! tls - > detach ) { 
 + detach = JNI _ FALSE ; 
 + } 
 ( * env ) - > PopLocalFrame ( env , NULL ) ; 
 } 
 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index aa064f5 . . d6c48ba 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 3298 , 8 + 3298 , 8 @ @ Java _ com _ sun _ jna _ Native _ initialize _ 1ffi _ 1type ( JNIEnv * env , jclass UNUSED ( cls ) , j 
 } 
 
 JNIEXPORT void JNICALL 
 - Java _ com _ sun _ jna _ Native _ detach ( JNIEnv * env , jclass UNUSED ( cls ) , jboolean d ) { 
 - JNA _ detach ( env , d ) ; 
 + Java _ com _ sun _ jna _ Native _ setDetachState ( JNIEnv * env , jclass UNUSED ( cls ) , jboolean d , jlong flag ) { 
 + JNA _ detach ( env , d , L2A ( flag ) ) ; 
 } 
 
 # ifdef _ _ cplusplus 
 diff - - git a / native / dispatch . h b / native / dispatch . h 
 index 5f2e1c2 . . 30d00c8 100644 
 - - - a / native / dispatch . h 
 + + + b / native / dispatch . h 
 @ @ - 182 , 7 + 182 , 7 @ @ extern const char * JNA _ callback _ init ( JNIEnv * ) ; 
 extern void JNA _ set _ last _ error ( JNIEnv * , int ) ; 
 extern int JNA _ get _ last _ error ( JNIEnv * ) ; 
 extern void JNA _ callback _ dispose ( JNIEnv * ) ; 
 - extern void JNA _ detach ( JNIEnv * , jboolean ) ; 
 + extern void JNA _ detach ( JNIEnv * , jboolean , void * ) ; 
 extern callback * create _ callback ( JNIEnv * , jobject , jobject , 
 jobjectArray , jclass , 
 callconv _ t , jint , jstring ) ; 
 @ @ - 214 , 7 + 214 , 6 @ @ typedef struct _ AttachOptions { 
 int daemon ; 
 int detach ; 
 char * name ; 
 - int * termination _ flag ; 
 } AttachOptions ; 
 extern jobject initializeThread ( callback * , AttachOptions * ) ; 
 
 diff - - git a / src / com / sun / jna / CallbackReference . java b / src / com / sun / jna / CallbackReference . java 
 index b8554da . . 35dfe61 100644 
 - - - a / src / com / sun / jna / CallbackReference . java 
 + + + b / src / com / sun / jna / CallbackReference . java 
 @ @ - 38 , 7 + 38 , 6 @ @ class CallbackReference extends WeakReference { 
 static final Map callbackMap = new WeakHashMap ( ) ; 
 static final Map directCallbackMap = new WeakHashMap ( ) ; 
 static final Map allocations = new WeakHashMap ( ) ; 
 - static final Map nativeThreads = Collections . synchronizedMap ( new WeakHashMap ( ) ) ; 
 
 private static final Method PROXY _ CALLBACK _ METHOD ; 
 
 @ @ - 67 , 32 + 66 , 20 @ @ class CallbackReference extends WeakReference { 
 public boolean daemon ; 
 public boolean detach ; 
 public String name ; 
 - public Pointer termination _ flag ; 
 / / Thread name must be UTF8 - encoded 
 { setStringEncoding ( " utf8 " ) ; } 
 protected List getFieldOrder ( ) { 
 - return Arrays . asList ( new String [ ] { " daemon " , " detach " , " name " , " termination _ flag " } ) ; 
 + return Arrays . asList ( new String [ ] { " daemon " , " detach " , " name " , } ) ; 
 } 
 } 
 
 - private static ThreadLocal terminationFlag = new ThreadLocal ( ) { 
 - protected Object initialValue ( ) { 
 - return new Memory ( 4 ) ; 
 - } 
 - } ; 
 - 
 - / * * Returns the termination flag associated with the given thread . * / 
 - static Pointer getTerminationFlag ( Thread t ) { 
 - return ( Pointer ) nativeThreads . get ( t ) ; 
 - } 
 - 
 / * * Called from native code to initialize a callback thread . * / 
 private static ThreadGroup initializeThread ( Callback cb , AttachOptions args ) { 
 CallbackThreadInitializer init = null ; 
 if ( cb instanceof DefaultCallbackProxy ) { 
 cb = ( ( DefaultCallbackProxy ) cb ) . getCallback ( ) ; 
 } 
 - synchronized ( initializers ) { 
 + synchronized ( callbackMap ) { 
 init = ( CallbackThreadInitializer ) initializers . get ( cb ) ; 
 } 
 ThreadGroup group = null ; 
 @ @ - 101 , 11 + 88 , 8 @ @ class CallbackReference extends WeakReference { 
 args . name = init . getName ( cb ) ; 
 args . daemon = init . isDaemon ( cb ) ; 
 args . detach = init . detach ( cb ) ; 
 + args . write ( ) ; 
 } 
 - args . termination _ flag = ( Pointer ) terminationFlag . get ( ) ; 
 - args . termination _ flag . setInt ( 0 , 0 ) ; 
 - args . write ( ) ; 
 - nativeThreads . put ( Thread . currentThread ( ) , args . termination _ flag ) ; 
 return group ; 
 } 
 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index 3468d00 . . 0f5587b 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 1838 , 9 + 1838 , 28 @ @ public final class Native implements Version { 
 < em > Warning < / em > : avoid calling { @ link # detach detach ( true ) } on threads 
 spawned by the JVM ; the resulting behavior is not defined . 
 * / 
 - / / TODO : keep references to Java non - detached threads , and clear them when 
 - / / native side sets a flag saying they ' re detached ( cleanup ) 
 - public static native void detach ( boolean detach ) ; 
 + public static void detach ( boolean detach ) { 
 + Pointer p = ( Pointer ) nativeThreadTerminationFlag . get ( ) ; 
 + nativeThreads . put ( Thread . currentThread ( ) , p ) ; 
 + setDetachState ( detach , p . peer ) ; 
 + } 
 + 
 + static Pointer getTerminationFlag ( Thread t ) { 
 + return ( Pointer ) nativeThreads . get ( t ) ; 
 + } 
 + 
 + private static Map nativeThreads = Collections . synchronizedMap ( new WeakHashMap ( ) ) ; 
 + 
 + private static ThreadLocal nativeThreadTerminationFlag = 
 + new ThreadLocal ( ) { 
 + protected Object initialValue ( ) { 
 + Memory m = new Memory ( 4 ) ; 
 + m . clear ( ) ; 
 + return m ; 
 + } 
 + } ; 
 + 
 + private static native void setDetachState ( boolean detach , long terminationFlag ) ; 
 
 private static class Buffers { 
 static boolean isBuffer ( Class cls ) { 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index 5c75288 . . 4a6835b 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 1159 , 7 + 1159 , 8 @ @ public class CallbacksTest extends TestCase implements Paths { 
 	 Thread . enumerate ( remaining ) ; 
 if ( System . currentTimeMillis ( ) - start > 10000 ) { 
 Thread t = ( Thread ) ref . get ( ) ; 
 - Pointer terminationFlag = CallbackReference . getTerminationFlag ( t ) ; 
 + Pointer terminationFlag = Native . getTerminationFlag ( t ) ; 
 + assertNotNull ( " Native thread termination flag is missing " , terminationFlag ) ; 
 if ( terminationFlag . getInt ( 0 ) = = 0 ) { 
 fail ( " Timed out waiting for native attached thread to be GC ' d : " + t + " alive : " 
 + t . isAlive ( ) + " daemon : " + t . isDaemon ( ) + " \ n " + Arrays . asList ( remaining ) ) ;

NEAREST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 index 9cff04a . . 10172a7 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 @ @ - 1231 , 18 + 1231 , 22 @ @ public interface Kernel32 extends StdCallLibrary { 
 boolean DeviceIoControl ( HANDLE hDevice , int dwIoControlCode , Pointer lpInBuffer , int nInBufferSize , 
 Pointer lpOutBuffer , int nOutBufferSize , IntByReference lpBytesReturned , Pointer lpOverlapped ) ; 
 	 
 - 	 / * * 
 - 	 * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of 
 - 	 * space , the total amount of free space , and the total amount of free space available to the user that is 
 - 	 * associated with the calling thread . 
 - 	 * 
 - 	 * @ param lpDirectoryName 
 - 	 * @ param lpFreeBytesAvailable 
 - 	 * @ param lpTotalNumberOfBytes 
 - 	 * @ param lpTotalNumberOfFreeBytes 
 - 	 * @ return 
 - 	 * / 
 - 	 boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; 
 + / * * 
 + * Retrieves information about the amount of space that is available on a disk volume , which is the total amount of 
 + * space , the total amount of free space , and the total amount of free space available to the user that is 
 + * associated with the calling thread . 
 + * 
 + * @ param lpDirectoryName 
 + * @ param lpFreeBytesAvailable 
 + * @ param lpTotalNumberOfBytes 
 + * @ param lpTotalNumberOfFreeBytes 
 + * @ return 
 + * If the function succeeds , the return value is nonzero . 
 + * 
 + * If the function fails , the return value is zero ( 0 ) . To get extended error information , 
 + * call GetLastError . 
 + * / 
 + boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LongByReference lpFreeBytesAvailable , LongByReference lpTotalNumberOfBytes , LongByReference lpTotalNumberOfFreeBytes ) ; 
 
 / * * 
 * Takes a snapshot of the specified processes , as well as the heaps , modules , and threads used by these processes .
