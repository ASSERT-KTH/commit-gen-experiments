BLEU SCORE: 0.016934096677198085

TEST MSG: [ GITHUB - 1073 ] Support COM setters with multiple parameters using ` c . s . j . p . win32 . COM . util . ProxyObject `
GENERATED MSG: [ ci skip ] Fix conflict in CHANGES . md

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 93ff868 . . 81a3187 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 14 , 7 + 14 , 8 @ @ Features <nl> * [ # 1065 ] ( https : / / github . com / java - native - access / jna / pull / 1065 ) : Add ` c . s . j . p . win32 . PowrProf # CallNTPowerInformation ` and supporting structures - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> * [ # 1063 ] ( https : / / github . com / java - native - access / jna / pull / 1063 ) : Enhance ` c . s . j . p . win32 . User32 ` and associated classes to support keyboard related functionality . - [ @ kevemueller ] ( https : / / github . com / kevemueller ) . <nl> * [ # 1068 ] ( https : / / github . com / java - native - access / jna / pull / 1068 ) : ` c . s . j . p . win32 . Advapi32Util . getAccountBySid ( String systemName , PSID sid ) ` ignored parameter instead of passing it to the native function - [ @ nirud ] ( https : / / github . com / nirud ) . <nl> - * [ # 813 ] ( https : / / github . com / java - native - access / jna / issues / 813 ) : Support for default mehods on interfaces ( experimental ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 813 ] ( https : / / github . com / java - native - access / jna / issues / 813 ) : Support for default methods on interfaces ( experimental ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 1073 ] ( https : / / github . com / java - native - access / jna / issues / 1073 ) : Support COM setters with multiple parameters using ` c . s . j . p . win32 . COM . util . ProxyObject ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> index 57f6fa6 . . 5970a1c 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> @ @ - 228 , 13 + 228 , 14 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> ComProperty prop = method . getAnnotation ( ComProperty . class ) ; <nl> if ( null ! = prop ) { <nl> int dispId = prop . dispId ( ) ; <nl> + Object [ ] fullLengthArgs = unfoldWhenVarargs ( method , args ) ; <nl> if ( isVoid ) { <nl> if ( dispId ! = - 1 ) { <nl> - this . setProperty ( new DISPID ( dispId ) , args [ 0 ] ) ; <nl> + this . setProperty ( new DISPID ( dispId ) , fullLengthArgs ) ; <nl> return null ; <nl> } else { <nl> String propName = this . getMutatorName ( method , prop ) ; <nl> - this . setProperty ( propName , args [ 0 ] ) ; <nl> + this . setProperty ( propName , fullLengthArgs ) ; <nl> return null ; <nl> } <nl> } else { <nl> @ @ - 368 , 6 + 369 , 35 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> COMUtils . checkRC ( hr ) ; <nl> } <nl> <nl> + private void setProperty ( String name , Object . . . args ) { <nl> + assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> + DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ; <nl> + setProperty ( dispID , args ) ; <nl> + } <nl> + <nl> + private void setProperty ( DISPID dispID , Object . . . args ) { <nl> + assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> + <nl> + VARIANT [ ] vargs ; <nl> + if ( null = = args ) { <nl> + vargs = new VARIANT [ 0 ] ; <nl> + } else { <nl> + vargs = new VARIANT [ args . length ] ; <nl> + } <nl> + for ( int i = 0 ; i < vargs . length ; + + i ) { <nl> + vargs [ i ] = Convert . toVariant ( args [ i ] ) ; <nl> + } <nl> + Variant . VARIANT . ByReference result = new Variant . VARIANT . ByReference ( ) ; <nl> + WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getRawDispatch ( ) , dispID , vargs ) ; <nl> + <nl> + for ( int i = 0 ; i < vargs . length ; i + + ) { <nl> + / / Free value allocated by Convert # toVariant <nl> + Convert . free ( vargs [ i ] , args [ i ] ) ; <nl> + } <nl> + <nl> + COMUtils . checkRC ( hr ) ; <nl> + } <nl> + <nl> @ Override <nl> public < T > T getProperty ( Class < T > returnType , String name , Object . . . args ) { <nl> DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 93ff868 . . 81a3187 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 14 , 7 + 14 , 8 @ @ Features 
 * [ # 1065 ] ( https : / / github . com / java - native - access / jna / pull / 1065 ) : Add ` c . s . j . p . win32 . PowrProf # CallNTPowerInformation ` and supporting structures - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 * [ # 1063 ] ( https : / / github . com / java - native - access / jna / pull / 1063 ) : Enhance ` c . s . j . p . win32 . User32 ` and associated classes to support keyboard related functionality . - [ @ kevemueller ] ( https : / / github . com / kevemueller ) . 
 * [ # 1068 ] ( https : / / github . com / java - native - access / jna / pull / 1068 ) : ` c . s . j . p . win32 . Advapi32Util . getAccountBySid ( String systemName , PSID sid ) ` ignored parameter instead of passing it to the native function - [ @ nirud ] ( https : / / github . com / nirud ) . 
 - * [ # 813 ] ( https : / / github . com / java - native - access / jna / issues / 813 ) : Support for default mehods on interfaces ( experimental ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 813 ] ( https : / / github . com / java - native - access / jna / issues / 813 ) : Support for default methods on interfaces ( experimental ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 1073 ] ( https : / / github . com / java - native - access / jna / issues / 1073 ) : Support COM setters with multiple parameters using ` c . s . j . p . win32 . COM . util . ProxyObject ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 index 57f6fa6 . . 5970a1c 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 @ @ - 228 , 13 + 228 , 14 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 ComProperty prop = method . getAnnotation ( ComProperty . class ) ; 
 if ( null ! = prop ) { 
 int dispId = prop . dispId ( ) ; 
 + Object [ ] fullLengthArgs = unfoldWhenVarargs ( method , args ) ; 
 if ( isVoid ) { 
 if ( dispId ! = - 1 ) { 
 - this . setProperty ( new DISPID ( dispId ) , args [ 0 ] ) ; 
 + this . setProperty ( new DISPID ( dispId ) , fullLengthArgs ) ; 
 return null ; 
 } else { 
 String propName = this . getMutatorName ( method , prop ) ; 
 - this . setProperty ( propName , args [ 0 ] ) ; 
 + this . setProperty ( propName , fullLengthArgs ) ; 
 return null ; 
 } 
 } else { 
 @ @ - 368 , 6 + 369 , 35 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 COMUtils . checkRC ( hr ) ; 
 } 
 
 + private void setProperty ( String name , Object . . . args ) { 
 + assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 + DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ; 
 + setProperty ( dispID , args ) ; 
 + } 
 + 
 + private void setProperty ( DISPID dispID , Object . . . args ) { 
 + assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 + 
 + VARIANT [ ] vargs ; 
 + if ( null = = args ) { 
 + vargs = new VARIANT [ 0 ] ; 
 + } else { 
 + vargs = new VARIANT [ args . length ] ; 
 + } 
 + for ( int i = 0 ; i < vargs . length ; + + i ) { 
 + vargs [ i ] = Convert . toVariant ( args [ i ] ) ; 
 + } 
 + Variant . VARIANT . ByReference result = new Variant . VARIANT . ByReference ( ) ; 
 + WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getRawDispatch ( ) , dispID , vargs ) ; 
 + 
 + for ( int i = 0 ; i < vargs . length ; i + + ) { 
 + / / Free value allocated by Convert # toVariant 
 + Convert . free ( vargs [ i ] , args [ i ] ) ; 
 + } 
 + 
 + COMUtils . checkRC ( hr ) ; 
 + } 
 + 
 @ Override 
 public < T > T getProperty ( Class < T > returnType , String name , Object . . . args ) { 
 DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
