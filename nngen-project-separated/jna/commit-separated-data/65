BLEU SCORE: 0.014265919394432253

TEST MSG: Cleanup ' lastError ' state before test and remove undocumented checks
GENERATED MSG: Fix binding of IShellFolder # GetDisplayNameOf the STRRET must be bound as a structure

TEST DIFF (one line): diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java <nl> index a124243 . . 7069d97 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java <nl> @ @ - 49 , 6 + 49 , 7 @ @ import com . sun . jna . platform . win32 . WinUser . LASTINPUTINFO ; <nl> import com . sun . jna . platform . win32 . WinUser . MONITORENUMPROC ; <nl> import com . sun . jna . platform . win32 . WinUser . MONITORINFO ; <nl> import com . sun . jna . platform . win32 . WinUser . MONITORINFOEX ; <nl> + import org . junit . Before ; <nl> <nl> / * * <nl> * @ author dblock [ at ] dblock [ dot ] org <nl> @ @ - 58 , 7 + 59 , 12 @ @ public class User32Test extends AbstractWin32TestSupport { <nl> public static void main ( String [ ] args ) { <nl> JUnitCore . runClasses ( User32Test . class ) ; <nl> } <nl> - <nl> + <nl> + @ Before <nl> + public void setUp ( ) { <nl> + Native . setLastError ( 0 ) ; <nl> + } <nl> + <nl> / * * <nl> * Iterates over all currently available Desktop windows and searches for <nl> * the window with the associated process whose full PE file path ends with <nl> @ @ - 339 , 7 + 345 , 6 @ @ public class User32Test extends AbstractWin32TestSupport { <nl> public void testIsWindow ( ) { <nl> boolean iwResult = User32 . INSTANCE . IsWindow ( null ) ; <nl> assertFalse ( " IsWindow result should be false " , iwResult ) ; <nl> - assertEquals ( " GetLastError should be ERROR _ SUCCESS . " , WinError . ERROR _ SUCCESS , Native . getLastError ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 356 , 7 + 361 , 6 @ @ public class User32Test extends AbstractWin32TestSupport { <nl> <nl> HWND result = User32 . INSTANCE . GetAncestor ( desktopWindow , WinUser . GA _ PARENT ) ; <nl> assertNull ( " GetAncestor result should be null " , result ) ; <nl> - assertEquals ( " GetLastError should be ERROR _ SUCCESS . " , WinError . ERROR _ SUCCESS , Native . getLastError ( ) ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 414 , 10 + 418 , 8 @ @ public class User32Test extends AbstractWin32TestSupport { <nl> <nl> @ Test <nl> public void testGetActiveWindow ( ) { <nl> - <nl> HWND result = User32 . INSTANCE . GetActiveWindow ( ) ; <nl> - assertNull ( " GetActiveWindow result should be null " , result ) ; <nl> - assertEquals ( " GetLastError should be ERROR _ SUCCESS . " , WinError . ERROR _ SUCCESS , Native . getLastError ( ) ) ; <nl> + assertNull ( " GetActiveWindow result should be null ( there is no active window ) " , result ) ; <nl> } <nl> <nl> @ Test
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java 
 index a124243 . . 7069d97 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / User32Test . java 
 @ @ - 49 , 6 + 49 , 7 @ @ import com . sun . jna . platform . win32 . WinUser . LASTINPUTINFO ; 
 import com . sun . jna . platform . win32 . WinUser . MONITORENUMPROC ; 
 import com . sun . jna . platform . win32 . WinUser . MONITORINFO ; 
 import com . sun . jna . platform . win32 . WinUser . MONITORINFOEX ; 
 + import org . junit . Before ; 
 
 / * * 
 * @ author dblock [ at ] dblock [ dot ] org 
 @ @ - 58 , 7 + 59 , 12 @ @ public class User32Test extends AbstractWin32TestSupport { 
 public static void main ( String [ ] args ) { 
 JUnitCore . runClasses ( User32Test . class ) ; 
 } 
 - 
 + 
 + @ Before 
 + public void setUp ( ) { 
 + Native . setLastError ( 0 ) ; 
 + } 
 + 
 / * * 
 * Iterates over all currently available Desktop windows and searches for 
 * the window with the associated process whose full PE file path ends with 
 @ @ - 339 , 7 + 345 , 6 @ @ public class User32Test extends AbstractWin32TestSupport { 
 public void testIsWindow ( ) { 
 boolean iwResult = User32 . INSTANCE . IsWindow ( null ) ; 
 assertFalse ( " IsWindow result should be false " , iwResult ) ; 
 - assertEquals ( " GetLastError should be ERROR _ SUCCESS . " , WinError . ERROR _ SUCCESS , Native . getLastError ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 356 , 7 + 361 , 6 @ @ public class User32Test extends AbstractWin32TestSupport { 
 
 HWND result = User32 . INSTANCE . GetAncestor ( desktopWindow , WinUser . GA _ PARENT ) ; 
 assertNull ( " GetAncestor result should be null " , result ) ; 
 - assertEquals ( " GetLastError should be ERROR _ SUCCESS . " , WinError . ERROR _ SUCCESS , Native . getLastError ( ) ) ; 
 } 
 
 @ Test 
 @ @ - 414 , 10 + 418 , 8 @ @ public class User32Test extends AbstractWin32TestSupport { 
 
 @ Test 
 public void testGetActiveWindow ( ) { 
 - 
 HWND result = User32 . INSTANCE . GetActiveWindow ( ) ; 
 - assertNull ( " GetActiveWindow result should be null " , result ) ; 
 - assertEquals ( " GetLastError should be ERROR _ SUCCESS . " , WinError . ERROR _ SUCCESS , Native . getLastError ( ) ) ; 
 + assertNull ( " GetActiveWindow result should be null ( there is no active window ) " , result ) ; 
 } 
 
 @ Test

NEAREST DIFF:
ELIMINATEDSENTENCE
