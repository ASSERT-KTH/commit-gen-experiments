BLEU SCORE: 0.1270331870386537

TEST MSG: fix load / unload tests
GENERATED MSG: fix more tests

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index bda7ae1 . . c608dc2 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 120 , 7 + 120 , 7 @ @ public final class Native implements Version { <nl> private static final int TYPE _ SIZE _ T = 3 ; <nl> <nl> static { <nl> - loadNativeLibrary ( ) ; <nl> + loadNativeDispatchLibrary ( ) ; <nl> POINTER _ SIZE = sizeof ( TYPE _ VOIDP ) ; <nl> LONG _ SIZE = sizeof ( TYPE _ LONG ) ; <nl> WCHAR _ SIZE = sizeof ( TYPE _ WCHAR _ T ) ; <nl> @ @ - 615 , 52 + 615 , 7 @ @ public final class Native implements Version { <nl> @ param name from < code > os . name < / code > System property <nl> * / <nl> public static String getNativeLibraryResourcePrefix ( int osType , String arch , String name ) { <nl> - String osPrefix ; <nl> - arch = arch . toLowerCase ( ) ; <nl> - if ( " powerpc " . equals ( arch ) ) { <nl> - arch = " ppc " ; <nl> - } <nl> - else if ( " powerpc64 " . equals ( arch ) ) { <nl> - arch = " ppc64 " ; <nl> - } <nl> - else if ( " i386 " . equals ( arch ) ) { <nl> - arch = " x86 " ; <nl> - } <nl> - else if ( " x86 _ 64 " . equals ( arch ) | | " amd64 " . equals ( arch ) ) { <nl> - arch = " x86 - 64 " ; <nl> - } <nl> - switch ( osType ) { <nl> - case Platform . ANDROID : <nl> - if ( arch . startsWith ( " arm " ) ) { <nl> - arch = " arm " ; <nl> - } <nl> - osPrefix = " android - " + arch ; <nl> - break ; <nl> - case Platform . WINDOWS : <nl> - osPrefix = " win32 - " + arch ; <nl> - break ; <nl> - case Platform . WINDOWSCE : <nl> - osPrefix = " w32ce - " + arch ; <nl> - break ; <nl> - case Platform . MAC : <nl> - osPrefix = " darwin " ; <nl> - break ; <nl> - case Platform . LINUX : <nl> - osPrefix = " linux - " + arch ; <nl> - break ; <nl> - case Platform . SOLARIS : <nl> - osPrefix = " sunos - " + arch ; <nl> - break ; <nl> - default : <nl> - osPrefix = name . toLowerCase ( ) ; <nl> - int space = osPrefix . indexOf ( " " ) ; <nl> - if ( space ! = - 1 ) { <nl> - osPrefix = osPrefix . substring ( 0 , space ) ; <nl> - } <nl> - osPrefix + = " - " + arch ; <nl> - break ; <nl> - } <nl> - return osPrefix ; <nl> + return Platform . getNativeLibraryResourcePrefix ( osType , arch , name ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 668 , 7 + 623 , 7 @ @ public final class Native implements Version { <nl> * First tries jna . boot . library . path , then the system path , then from the <nl> * jar file . <nl> * / <nl> - private static void loadNativeLibrary ( ) { <nl> + private static void loadNativeDispatchLibrary ( ) { <nl> <nl> if ( ! Boolean . getBoolean ( " jna . nounpack " ) ) { <nl> try { <nl> @ @ - 721 , 16 + 676 , 20 @ @ public final class Native implements Version { <nl> } <nl> } <nl> } <nl> - try { <nl> - if ( ! Boolean . getBoolean ( " jna . nosys " ) ) { <nl> + if ( ! Boolean . getBoolean ( " jna . nosys " ) ) { <nl> + try { <nl> System . loadLibrary ( libName ) ; <nl> return ; <nl> } <nl> + catch ( UnsatisfiedLinkError e ) { <nl> + } <nl> } <nl> - catch ( UnsatisfiedLinkError e ) { <nl> - System . err . println ( " File found on system path , but not loadable : " + e . getMessage ( ) ) ; <nl> + if ( ! Boolean . getBoolean ( " jna . noclasspath " ) ) { <nl> + loadNativeDispatchLibraryFromClasspath ( ) ; <nl> + } <nl> + else { <nl> + throw new UnsatisfiedLinkError ( " Unable to locate JNA native support library " ) ; <nl> } <nl> - loadNativeLibraryFromClasspath ( ) ; <nl> } <nl> <nl> static final String JNA _ TMPLIB _ PREFIX = " jna " ; <nl> @ @ - 738 , 10 + 697 , 13 @ @ public final class Native implements Version { <nl> * Attempts to load the native library resource from the filesystem , <nl> * extracting the JNA stub library from jna . jar if not already available . <nl> * / <nl> - private static void loadNativeLibraryFromClasspath ( ) { <nl> + private static void loadNativeDispatchLibraryFromClasspath ( ) { <nl> try { <nl> String prefix = " com / sun / jna / " + getNativeLibraryResourcePrefix ( ) ; <nl> File lib = extractFromResourcePath ( " jnidispatch " , prefix , Native . class . getClassLoader ( ) ) ; <nl> + if ( lib = = null ) { <nl> + throw new UnsatisfiedLinkError ( " Could not find JNA native support " ) ; <nl> + } <nl> System . load ( lib . getAbsolutePath ( ) ) ; <nl> nativeLibraryPath = lib . getAbsolutePath ( ) ; <nl> / / Attempt to delete immediately once jnidispatch is successfully <nl> diff - - git a / src / com / sun / jna / Platform . java b / src / com / sun / jna / Platform . java <nl> index 10220d9 . . 878afa7 100644 <nl> - - - a / src / com / sun / jna / Platform . java <nl> + + + b / src / com / sun / jna / Platform . java <nl> @ @ - 103 , 7 + 103 , 7 @ @ public final class Platform { <nl> C _ LIBRARY _ NAME = osType = = WINDOWS ? " msvcrt " : osType = = WINDOWSCE ? " coredll " : " c " ; <nl> MATH _ LIBRARY _ NAME = osType = = WINDOWS ? " msvcrt " : osType = = WINDOWSCE ? " coredll " : " m " ; <nl> HAS _ DLL _ CALLBACKS = osType = = WINDOWS ; <nl> - RESOURCE _ PREFIX = Native . getNativeLibraryResourcePrefix ( ) ; <nl> + RESOURCE _ PREFIX = getNativeLibraryResourcePrefix ( ) ; <nl> } <nl> private Platform ( ) { } <nl> public static final int getOSType ( ) { <nl> @ @ - 199 , 4 + 199 , 66 @ @ public final class Platform { <nl> System . getProperty ( " os . arch " ) . toLowerCase ( ) . trim ( ) ; <nl> return arch . startsWith ( " arm " ) ; <nl> } <nl> + <nl> + / * * Generate a canonical String prefix based on the current OS <nl> + type / arch / name . <nl> + * / <nl> + static String getNativeLibraryResourcePrefix ( ) { <nl> + return getNativeLibraryResourcePrefix ( getOSType ( ) , System . getProperty ( " os . arch " ) , System . getProperty ( " os . name " ) ) ; <nl> + } <nl> + <nl> + / * * Generate a canonical String prefix based on the given OS <nl> + type / arch / name . <nl> + @ param osType from { @ link # getOSType ( ) } <nl> + @ param arch from < code > os . arch < / code > System property <nl> + @ param name from < code > os . name < / code > System property <nl> + * / <nl> + static String getNativeLibraryResourcePrefix ( int osType , String arch , String name ) { <nl> + String osPrefix ; <nl> + arch = arch . toLowerCase ( ) ; <nl> + if ( " powerpc " . equals ( arch ) ) { <nl> + arch = " ppc " ; <nl> + } <nl> + else if ( " powerpc64 " . equals ( arch ) ) { <nl> + arch = " ppc64 " ; <nl> + } <nl> + else if ( " i386 " . equals ( arch ) ) { <nl> + arch = " x86 " ; <nl> + } <nl> + else if ( " x86 _ 64 " . equals ( arch ) | | " amd64 " . equals ( arch ) ) { <nl> + arch = " x86 - 64 " ; <nl> + } <nl> + switch ( osType ) { <nl> + case Platform . ANDROID : <nl> + if ( arch . startsWith ( " arm " ) ) { <nl> + arch = " arm " ; <nl> + } <nl> + osPrefix = " android - " + arch ; <nl> + break ; <nl> + case Platform . WINDOWS : <nl> + osPrefix = " win32 - " + arch ; <nl> + break ; <nl> + case Platform . WINDOWSCE : <nl> + osPrefix = " w32ce - " + arch ; <nl> + break ; <nl> + case Platform . MAC : <nl> + osPrefix = " darwin " ; <nl> + break ; <nl> + case Platform . LINUX : <nl> + osPrefix = " linux - " + arch ; <nl> + break ; <nl> + case Platform . SOLARIS : <nl> + osPrefix = " sunos - " + arch ; <nl> + break ; <nl> + default : <nl> + osPrefix = name . toLowerCase ( ) ; <nl> + int space = osPrefix . indexOf ( " " ) ; <nl> + if ( space ! = - 1 ) { <nl> + osPrefix = osPrefix . substring ( 0 , space ) ; <nl> + } <nl> + osPrefix + = " - " + arch ; <nl> + break ; <nl> + } <nl> + return osPrefix ; <nl> + } <nl> } <nl> diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java <nl> index cb93418 . . 1c34258 100644 <nl> - - - a / test / com / sun / jna / JNAUnloadTest . java <nl> + + + b / test / com / sun / jna / JNAUnloadTest . java <nl> @ @ - 21 , 19 + 21 , 28 @ @ import java . net . URLClassLoader ; <nl> <nl> import junit . framework . TestCase ; <nl> <nl> + / * * Test loading and unloading native support from various locations . Note <nl> + * that no JNI classes are directly referenced in these tests . <nl> + * / <nl> public class JNAUnloadTest extends TestCase { <nl> <nl> private static final String BUILDDIR = <nl> System . getProperty ( " jna . builddir " , " build " <nl> + ( Platform . is64Bit ( ) ? " - d64 " : " " ) ) ; <nl> <nl> - private static class TestLoader extends URLClassLoader { <nl> + private class TestLoader extends URLClassLoader { <nl> public TestLoader ( boolean fromJar ) throws MalformedURLException { <nl> super ( new URL [ ] { <nl> Platform . isWindowsCE ( ) <nl> ? new File ( " / Storage Card / " + ( fromJar ? " jna . jar " : " test . jar " ) ) . toURI ( ) . toURL ( ) <nl> : new File ( BUILDDIR + ( fromJar ? " / jna . jar " : " / classes " ) ) . toURI ( ) . toURL ( ) , <nl> } , null ) ; <nl> + if ( fromJar ) { <nl> + assertJarExists ( ) ; <nl> + } <nl> + else { <nl> + assertLibraryExists ( ) ; <nl> + } <nl> } <nl> protected Class findClass ( String name ) throws ClassNotFoundException { <nl> String boot = System . getProperty ( " jna . boot . library . path " ) ; <nl> @ @ - 48 , 15 + 57 , 26 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> <nl> - public void testLoadFromJar ( ) throws Exception { <nl> - Class . forName ( " com . sun . jna . Native " , true , new TestLoader ( true ) ) ; <nl> + protected void assertJarExists ( ) { <nl> + File jar = new File ( ( Platform . isWindowsCE ( ) ? " / Storage Card " : BUILDDIR ) + " / jna . jar " ) ; <nl> + if ( ! jar . exists ( ) ) { <nl> + throw new Error ( " Expected JNA jar file at " + jar + " is missing " ) ; <nl> + } <nl> + } <nl> + <nl> + protected void assertLibraryExists ( ) { <nl> + String osPrefix = Platform . getNativeLibraryResourcePrefix ( ) ; <nl> + String name = System . mapLibraryName ( " jnidispatch " ) ; <nl> + File lib = new File ( ( Platform . isWindowsCE ( ) ? " / Storage Card " : BUILDDIR + " / classes " ) + " / com / sun / jna / " + osPrefix + " / " + name ) ; <nl> + if ( ! lib . exists ( ) ) { <nl> + throw new Error ( " Expected JNA library at " + lib + " is missing " ) ; <nl> + } <nl> } <nl> <nl> public void testAvoidJarUnpacking ( ) throws Exception { <nl> System . setProperty ( " jna . nounpack " , " true " ) ; <nl> - ClassLoader loader = new TestLoader ( true ) ; <nl> try { <nl> - Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> + Class cls = Class . forName ( " com . sun . jna . Native " , true , new TestLoader ( true ) ) ; <nl> <nl> fail ( " Class com . sun . jna . Native should not be loadable if jna . nounpack = true : " <nl> + cls . getClassLoader ( ) ) ; <nl> @ @ - 68 , 13 + 88 , 23 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> <nl> - / / Fails under clover <nl> - public void testUnloadFromJar ( ) throws Exception { <nl> - File jar = new File ( ( Platform . isWindowsCE ( ) ? " / Storage Card " : BUILDDIR ) + " / jna . jar " ) ; <nl> - if ( ! jar . exists ( ) ) { <nl> - throw new Error ( " Expected JNA jar file at " + jar + " is missing " ) ; <nl> + public void testAvoidResourcePathLoading ( ) throws Exception { <nl> + System . setProperty ( " jna . noclasspath " , " true " ) ; <nl> + try { <nl> + Class cls = Class . forName ( " com . sun . jna . Native " , true , new TestLoader ( false ) ) ; <nl> + <nl> + fail ( " Class com . sun . jna . Native should not be loadable if jna . noclasspath = true : " <nl> + + cls . getClassLoader ( ) ) ; <nl> } <nl> + catch ( UnsatisfiedLinkError e ) { <nl> + } <nl> + finally { <nl> + System . setProperty ( " jna . noclasspath " , " false " ) ; <nl> + } <nl> + } <nl> <nl> + / / Fails under clover <nl> + public void testLoadAndUnloadFromJar ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( true ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ; <nl> @ @ - 128 , 7 + 158 , 7 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> <nl> / / Fails under clover and OpenJDK ( linux / ppc ) <nl> - public void testUnload ( ) throws Exception { <nl> + public void testLoadAndUnloadFromResourcePath ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( false ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ;
NEAREST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index 3764e99 . . 905477c 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 623 , 6 + 623 , 11 @ @ <nl> <nl> < target name = " dist " depends = " jar , contrib - jars , compile - tests , native , javadoc " <nl> description = " Build distribution files " > <nl> + < copy todir = " $ { dist } " > <nl> + < fileset dir = " $ { build } " > <nl> + < include name = " $ { native . jar } " / > <nl> + < / fileset > <nl> + < / copy > <nl> < jar jarfile = " $ { dist } / jna . jar " duplicate = " preserve " > <nl> < manifest > <nl> < attribute name = " Main - Class " value = " com . sun . jna . Native " / > <nl> @ @ - 655 , 6 + 660 , 8 @ @ com / sun / jna / win32 - x86 / jnidispatch . dll ; <nl> processor = x86 ; osname = win32 , <nl> com / sun / jna / win32 - amd64 / jnidispatch . dll ; <nl> processor = x86 - 64 ; osname = win32 , <nl> + com / sun / jna / w32ce - arm / jnidispatch . dll ; <nl> + processor = arm ; osname = wince , <nl> <nl> com / sun / jna / sunos - x86 / libjnidispatch . so ; <nl> processor = x86 ; osname = sunos , <nl> @ @ - 728 , 17 + 735 , 14 @ @ osname = macos , <nl> prefix = " com / sun / jna / w32ce - arm " / > <nl> < / jar > <nl> < copy todir = " $ { dist } " > <nl> - < fileset dir = " $ { build } " > <nl> - < include name = " $ { native . jar } " / > <nl> + < fileset dir = " $ { contrib } / platform / dist " > <nl> + 	 < include name = " platform . jar " / > <nl> < / fileset > <nl> - 	 < fileset dir = " $ { contrib } / platform / dist " > <nl> - 	 	 < include name = " platform . jar " / > <nl> - 	 < / fileset > <nl> < / copy > <nl> < copy todir = " $ { dist } / jnacontrib " flatten = " true " > <nl> - 	 < fileset dir = " $ { contrib } " > <nl> - 	 	 < include name = " * * / build / demo - * . jar " / > <nl> - 	 < / fileset > <nl> + < fileset dir = " $ { contrib } " > <nl> + 	 < include name = " * * / build / demo - * . jar " / > <nl> + < / fileset > <nl> < / copy > <nl> < zip zipfile = " $ { dist } / doc . zip " > <nl> < zipfileset dir = " $ { javadoc } " prefix = " javadoc " / >

TEST DIFF:
diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index bda7ae1 . . c608dc2 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 120 , 7 + 120 , 7 @ @ public final class Native implements Version { 
 private static final int TYPE _ SIZE _ T = 3 ; 
 
 static { 
 - loadNativeLibrary ( ) ; 
 + loadNativeDispatchLibrary ( ) ; 
 POINTER _ SIZE = sizeof ( TYPE _ VOIDP ) ; 
 LONG _ SIZE = sizeof ( TYPE _ LONG ) ; 
 WCHAR _ SIZE = sizeof ( TYPE _ WCHAR _ T ) ; 
 @ @ - 615 , 52 + 615 , 7 @ @ public final class Native implements Version { 
 @ param name from < code > os . name < / code > System property 
 * / 
 public static String getNativeLibraryResourcePrefix ( int osType , String arch , String name ) { 
 - String osPrefix ; 
 - arch = arch . toLowerCase ( ) ; 
 - if ( " powerpc " . equals ( arch ) ) { 
 - arch = " ppc " ; 
 - } 
 - else if ( " powerpc64 " . equals ( arch ) ) { 
 - arch = " ppc64 " ; 
 - } 
 - else if ( " i386 " . equals ( arch ) ) { 
 - arch = " x86 " ; 
 - } 
 - else if ( " x86 _ 64 " . equals ( arch ) | | " amd64 " . equals ( arch ) ) { 
 - arch = " x86 - 64 " ; 
 - } 
 - switch ( osType ) { 
 - case Platform . ANDROID : 
 - if ( arch . startsWith ( " arm " ) ) { 
 - arch = " arm " ; 
 - } 
 - osPrefix = " android - " + arch ; 
 - break ; 
 - case Platform . WINDOWS : 
 - osPrefix = " win32 - " + arch ; 
 - break ; 
 - case Platform . WINDOWSCE : 
 - osPrefix = " w32ce - " + arch ; 
 - break ; 
 - case Platform . MAC : 
 - osPrefix = " darwin " ; 
 - break ; 
 - case Platform . LINUX : 
 - osPrefix = " linux - " + arch ; 
 - break ; 
 - case Platform . SOLARIS : 
 - osPrefix = " sunos - " + arch ; 
 - break ; 
 - default : 
 - osPrefix = name . toLowerCase ( ) ; 
 - int space = osPrefix . indexOf ( " " ) ; 
 - if ( space ! = - 1 ) { 
 - osPrefix = osPrefix . substring ( 0 , space ) ; 
 - } 
 - osPrefix + = " - " + arch ; 
 - break ; 
 - } 
 - return osPrefix ; 
 + return Platform . getNativeLibraryResourcePrefix ( osType , arch , name ) ; 
 } 
 
 / * * 
 @ @ - 668 , 7 + 623 , 7 @ @ public final class Native implements Version { 
 * First tries jna . boot . library . path , then the system path , then from the 
 * jar file . 
 * / 
 - private static void loadNativeLibrary ( ) { 
 + private static void loadNativeDispatchLibrary ( ) { 
 
 if ( ! Boolean . getBoolean ( " jna . nounpack " ) ) { 
 try { 
 @ @ - 721 , 16 + 676 , 20 @ @ public final class Native implements Version { 
 } 
 } 
 } 
 - try { 
 - if ( ! Boolean . getBoolean ( " jna . nosys " ) ) { 
 + if ( ! Boolean . getBoolean ( " jna . nosys " ) ) { 
 + try { 
 System . loadLibrary ( libName ) ; 
 return ; 
 } 
 + catch ( UnsatisfiedLinkError e ) { 
 + } 
 } 
 - catch ( UnsatisfiedLinkError e ) { 
 - System . err . println ( " File found on system path , but not loadable : " + e . getMessage ( ) ) ; 
 + if ( ! Boolean . getBoolean ( " jna . noclasspath " ) ) { 
 + loadNativeDispatchLibraryFromClasspath ( ) ; 
 + } 
 + else { 
 + throw new UnsatisfiedLinkError ( " Unable to locate JNA native support library " ) ; 
 } 
 - loadNativeLibraryFromClasspath ( ) ; 
 } 
 
 static final String JNA _ TMPLIB _ PREFIX = " jna " ; 
 @ @ - 738 , 10 + 697 , 13 @ @ public final class Native implements Version { 
 * Attempts to load the native library resource from the filesystem , 
 * extracting the JNA stub library from jna . jar if not already available . 
 * / 
 - private static void loadNativeLibraryFromClasspath ( ) { 
 + private static void loadNativeDispatchLibraryFromClasspath ( ) { 
 try { 
 String prefix = " com / sun / jna / " + getNativeLibraryResourcePrefix ( ) ; 
 File lib = extractFromResourcePath ( " jnidispatch " , prefix , Native . class . getClassLoader ( ) ) ; 
 + if ( lib = = null ) { 
 + throw new UnsatisfiedLinkError ( " Could not find JNA native support " ) ; 
 + } 
 System . load ( lib . getAbsolutePath ( ) ) ; 
 nativeLibraryPath = lib . getAbsolutePath ( ) ; 
 / / Attempt to delete immediately once jnidispatch is successfully 
 diff - - git a / src / com / sun / jna / Platform . java b / src / com / sun / jna / Platform . java 
 index 10220d9 . . 878afa7 100644 
 - - - a / src / com / sun / jna / Platform . java 
 + + + b / src / com / sun / jna / Platform . java 
 @ @ - 103 , 7 + 103 , 7 @ @ public final class Platform { 
 C _ LIBRARY _ NAME = osType = = WINDOWS ? " msvcrt " : osType = = WINDOWSCE ? " coredll " : " c " ; 
 MATH _ LIBRARY _ NAME = osType = = WINDOWS ? " msvcrt " : osType = = WINDOWSCE ? " coredll " : " m " ; 
 HAS _ DLL _ CALLBACKS = osType = = WINDOWS ; 
 - RESOURCE _ PREFIX = Native . getNativeLibraryResourcePrefix ( ) ; 
 + RESOURCE _ PREFIX = getNativeLibraryResourcePrefix ( ) ; 
 } 
 private Platform ( ) { } 
 public static final int getOSType ( ) { 
 @ @ - 199 , 4 + 199 , 66 @ @ public final class Platform { 
 System . getProperty ( " os . arch " ) . toLowerCase ( ) . trim ( ) ; 
 return arch . startsWith ( " arm " ) ; 
 } 
 + 
 + / * * Generate a canonical String prefix based on the current OS 
 + type / arch / name . 
 + * / 
 + static String getNativeLibraryResourcePrefix ( ) { 
 + return getNativeLibraryResourcePrefix ( getOSType ( ) , System . getProperty ( " os . arch " ) , System . getProperty ( " os . name " ) ) ; 
 + } 
 + 
 + / * * Generate a canonical String prefix based on the given OS 
 + type / arch / name . 
 + @ param osType from { @ link # getOSType ( ) } 
 + @ param arch from < code > os . arch < / code > System property 
 + @ param name from < code > os . name < / code > System property 
 + * / 
 + static String getNativeLibraryResourcePrefix ( int osType , String arch , String name ) { 
 + String osPrefix ; 
 + arch = arch . toLowerCase ( ) ; 
 + if ( " powerpc " . equals ( arch ) ) { 
 + arch = " ppc " ; 
 + } 
 + else if ( " powerpc64 " . equals ( arch ) ) { 
 + arch = " ppc64 " ; 
 + } 
 + else if ( " i386 " . equals ( arch ) ) { 
 + arch = " x86 " ; 
 + } 
 + else if ( " x86 _ 64 " . equals ( arch ) | | " amd64 " . equals ( arch ) ) { 
 + arch = " x86 - 64 " ; 
 + } 
 + switch ( osType ) { 
 + case Platform . ANDROID : 
 + if ( arch . startsWith ( " arm " ) ) { 
 + arch = " arm " ; 
 + } 
 + osPrefix = " android - " + arch ; 
 + break ; 
 + case Platform . WINDOWS : 
 + osPrefix = " win32 - " + arch ; 
 + break ; 
 + case Platform . WINDOWSCE : 
 + osPrefix = " w32ce - " + arch ; 
 + break ; 
 + case Platform . MAC : 
 + osPrefix = " darwin " ; 
 + break ; 
 + case Platform . LINUX : 
 + osPrefix = " linux - " + arch ; 
 + break ; 
 + case Platform . SOLARIS : 
 + osPrefix = " sunos - " + arch ; 
 + break ; 
 + default : 
 + osPrefix = name . toLowerCase ( ) ; 
 + int space = osPrefix . indexOf ( " " ) ; 
 + if ( space ! = - 1 ) { 
 + osPrefix = osPrefix . substring ( 0 , space ) ; 
 + } 
 + osPrefix + = " - " + arch ; 
 + break ; 
 + } 
 + return osPrefix ; 
 + } 
 } 
 diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java 
 index cb93418 . . 1c34258 100644 
 - - - a / test / com / sun / jna / JNAUnloadTest . java 
 + + + b / test / com / sun / jna / JNAUnloadTest . java 
 @ @ - 21 , 19 + 21 , 28 @ @ import java . net . URLClassLoader ; 
 
 import junit . framework . TestCase ; 
 
 + / * * Test loading and unloading native support from various locations . Note 
 + * that no JNI classes are directly referenced in these tests . 
 + * / 
 public class JNAUnloadTest extends TestCase { 
 
 private static final String BUILDDIR = 
 System . getProperty ( " jna . builddir " , " build " 
 + ( Platform . is64Bit ( ) ? " - d64 " : " " ) ) ; 
 
 - private static class TestLoader extends URLClassLoader { 
 + private class TestLoader extends URLClassLoader { 
 public TestLoader ( boolean fromJar ) throws MalformedURLException { 
 super ( new URL [ ] { 
 Platform . isWindowsCE ( ) 
 ? new File ( " / Storage Card / " + ( fromJar ? " jna . jar " : " test . jar " ) ) . toURI ( ) . toURL ( ) 
 : new File ( BUILDDIR + ( fromJar ? " / jna . jar " : " / classes " ) ) . toURI ( ) . toURL ( ) , 
 } , null ) ; 
 + if ( fromJar ) { 
 + assertJarExists ( ) ; 
 + } 
 + else { 
 + assertLibraryExists ( ) ; 
 + } 
 } 
 protected Class findClass ( String name ) throws ClassNotFoundException { 
 String boot = System . getProperty ( " jna . boot . library . path " ) ; 
 @ @ - 48 , 15 + 57 , 26 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 
 - public void testLoadFromJar ( ) throws Exception { 
 - Class . forName ( " com . sun . jna . Native " , true , new TestLoader ( true ) ) ; 
 + protected void assertJarExists ( ) { 
 + File jar = new File ( ( Platform . isWindowsCE ( ) ? " / Storage Card " : BUILDDIR ) + " / jna . jar " ) ; 
 + if ( ! jar . exists ( ) ) { 
 + throw new Error ( " Expected JNA jar file at " + jar + " is missing " ) ; 
 + } 
 + } 
 + 
 + protected void assertLibraryExists ( ) { 
 + String osPrefix = Platform . getNativeLibraryResourcePrefix ( ) ; 
 + String name = System . mapLibraryName ( " jnidispatch " ) ; 
 + File lib = new File ( ( Platform . isWindowsCE ( ) ? " / Storage Card " : BUILDDIR + " / classes " ) + " / com / sun / jna / " + osPrefix + " / " + name ) ; 
 + if ( ! lib . exists ( ) ) { 
 + throw new Error ( " Expected JNA library at " + lib + " is missing " ) ; 
 + } 
 } 
 
 public void testAvoidJarUnpacking ( ) throws Exception { 
 System . setProperty ( " jna . nounpack " , " true " ) ; 
 - ClassLoader loader = new TestLoader ( true ) ; 
 try { 
 - Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 + Class cls = Class . forName ( " com . sun . jna . Native " , true , new TestLoader ( true ) ) ; 
 
 fail ( " Class com . sun . jna . Native should not be loadable if jna . nounpack = true : " 
 + cls . getClassLoader ( ) ) ; 
 @ @ - 68 , 13 + 88 , 23 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 
 - / / Fails under clover 
 - public void testUnloadFromJar ( ) throws Exception { 
 - File jar = new File ( ( Platform . isWindowsCE ( ) ? " / Storage Card " : BUILDDIR ) + " / jna . jar " ) ; 
 - if ( ! jar . exists ( ) ) { 
 - throw new Error ( " Expected JNA jar file at " + jar + " is missing " ) ; 
 + public void testAvoidResourcePathLoading ( ) throws Exception { 
 + System . setProperty ( " jna . noclasspath " , " true " ) ; 
 + try { 
 + Class cls = Class . forName ( " com . sun . jna . Native " , true , new TestLoader ( false ) ) ; 
 + 
 + fail ( " Class com . sun . jna . Native should not be loadable if jna . noclasspath = true : " 
 + + cls . getClassLoader ( ) ) ; 
 } 
 + catch ( UnsatisfiedLinkError e ) { 
 + } 
 + finally { 
 + System . setProperty ( " jna . noclasspath " , " false " ) ; 
 + } 
 + } 
 
 + / / Fails under clover 
 + public void testLoadAndUnloadFromJar ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( true ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ; 
 @ @ - 128 , 7 + 158 , 7 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 
 / / Fails under clover and OpenJDK ( linux / ppc ) 
 - public void testUnload ( ) throws Exception { 
 + public void testLoadAndUnloadFromResourcePath ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( false ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ;

NEAREST DIFF:
diff - - git a / build . xml b / build . xml 
 index 3764e99 . . 905477c 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 623 , 6 + 623 , 11 @ @ 
 
 < target name = " dist " depends = " jar , contrib - jars , compile - tests , native , javadoc " 
 description = " Build distribution files " > 
 + < copy todir = " $ { dist } " > 
 + < fileset dir = " $ { build } " > 
 + < include name = " $ { native . jar } " / > 
 + < / fileset > 
 + < / copy > 
 < jar jarfile = " $ { dist } / jna . jar " duplicate = " preserve " > 
 < manifest > 
 < attribute name = " Main - Class " value = " com . sun . jna . Native " / > 
 @ @ - 655 , 6 + 660 , 8 @ @ com / sun / jna / win32 - x86 / jnidispatch . dll ; 
 processor = x86 ; osname = win32 , 
 com / sun / jna / win32 - amd64 / jnidispatch . dll ; 
 processor = x86 - 64 ; osname = win32 , 
 + com / sun / jna / w32ce - arm / jnidispatch . dll ; 
 + processor = arm ; osname = wince , 
 
 com / sun / jna / sunos - x86 / libjnidispatch . so ; 
 processor = x86 ; osname = sunos , 
 @ @ - 728 , 17 + 735 , 14 @ @ osname = macos , 
 prefix = " com / sun / jna / w32ce - arm " / > 
 < / jar > 
 < copy todir = " $ { dist } " > 
 - < fileset dir = " $ { build } " > 
 - < include name = " $ { native . jar } " / > 
 + < fileset dir = " $ { contrib } / platform / dist " > 
 + 	 < include name = " platform . jar " / > 
 < / fileset > 
 - 	 < fileset dir = " $ { contrib } / platform / dist " > 
 - 	 	 < include name = " platform . jar " / > 
 - 	 < / fileset > 
 < / copy > 
 < copy todir = " $ { dist } / jnacontrib " flatten = " true " > 
 - 	 < fileset dir = " $ { contrib } " > 
 - 	 	 < include name = " * * / build / demo - * . jar " / > 
 - 	 < / fileset > 
 + < fileset dir = " $ { contrib } " > 
 + 	 < include name = " * * / build / demo - * . jar " / > 
 + < / fileset > 
 < / copy > 
 < zip zipfile = " $ { dist } / doc . zip " > 
 < zipfileset dir = " $ { javadoc } " prefix = " javadoc " / >
