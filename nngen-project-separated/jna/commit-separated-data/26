BLEU SCORE: 0.027611988917697356

TEST MSG: Deprecate pseudo instance methods in COM * methods
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> index e8dc4fc . . a6a6cab 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> @ @ - 175 , 32 + 175 , 26 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> } <nl> <nl> protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> - IDispatch pDisp , String name , VARIANT [ ] pArgs ) throws COMException { <nl> - <nl> - if ( pDisp = = null ) <nl> - throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; <nl> + String name , VARIANT [ ] pArgs ) throws COMException { <nl> <nl> / / variable declaration <nl> WString [ ] ptName = new WString [ ] { new WString ( name ) } ; <nl> DISPIDByReference pdispID = new DISPIDByReference ( ) ; <nl> <nl> / / Get DISPID for name passed . . . <nl> - HRESULT hr = pDisp . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , <nl> + HRESULT hr = iDispatch . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , <nl> LOCALE _ USER _ DEFAULT , pdispID ) ; <nl> <nl> COMUtils . checkRC ( hr ) ; <nl> <nl> return this <nl> - . oleMethod ( nType , pvResult , pDisp , pdispID . getValue ( ) , pArgs ) ; <nl> + . oleMethod ( nType , pvResult , iDispatch , pdispID . getValue ( ) , pArgs ) ; <nl> } <nl> <nl> protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> - IDispatch pDisp , DISPID dispId , VARIANT [ ] pArgs ) <nl> + DISPID dispId , VARIANT [ ] pArgs ) <nl> throws COMException { <nl> <nl> - if ( pDisp = = null ) <nl> - throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; <nl> - <nl> / / variable declaration <nl> int _ argsLen = 0 ; <nl> VARIANT [ ] _ args = null ; <nl> @ @ - 244 , 12 + 238 , 12 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> / / need to be compatible with VisualBasic which does not distingish methods <nl> / / and property getters and will set both flags always . <nl> / / <nl> - / / The MSDN article advises this behaviour : " [ . . . ] Some languages cannot <nl> - / / distinguish between retrieving a property and calling a method . In this <nl> + / / The MSDN article advises this behaviour : " [ . . . ] Some languages cannot <nl> + / / distinguish between retrieving a property and calling a method . In this <nl> / / case , you should set the flags DISPATCH _ PROPERTYGET and DISPATCH _ METHOD . <nl> / / [ . . . ] " ) ) <nl> / / <nl> - / / This was found when trying to bind InchesToPoints from the _ Application <nl> + / / This was found when trying to bind InchesToPoints from the _ Application <nl> / / dispatch interface of the MS Word 15 type library <nl> / / <nl> / / The signature according the ITypeLib Viewer ( OLE / COM Object Viewer ) : <nl> @ @ - 264 , 7 + 258 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> } <nl> <nl> / / Make the call ! <nl> - HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , <nl> + HRESULT hr = iDispatch . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , <nl> new WinDef . WORD ( finalNType ) , dp , pvResult , pExcepInfo , puArgErr ) ; <nl> <nl> COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> @ @ - 289 , 17 + 283 , 15 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> * the cOM exception <nl> * / <nl> protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> - IDispatch pDisp , String name , VARIANT pArg ) throws COMException { <nl> + String name , VARIANT pArg ) throws COMException { <nl> <nl> - return this . oleMethod ( nType , pvResult , pDisp , name , <nl> - new VARIANT [ ] { pArg } ) ; <nl> + return this . oleMethod ( nType , pvResult , name , new VARIANT [ ] { pArg } ) ; <nl> } <nl> <nl> protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> - IDispatch pDisp , DISPID dispId , VARIANT pArg ) throws COMException { <nl> + DISPID dispId , VARIANT pArg ) throws COMException { <nl> <nl> - return this . oleMethod ( nType , pvResult , pDisp , dispId , <nl> - new VARIANT [ ] { pArg } ) ; <nl> + return this . oleMethod ( nType , pvResult , dispId , new VARIANT [ ] { pArg } ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 318 , 11 + 310 , 158 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> * the cOM exception <nl> * / <nl> protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> + String name ) throws COMException { <nl> + <nl> + return this . oleMethod ( nType , pvResult , name , ( VARIANT [ ] ) null ) ; <nl> + } <nl> + <nl> + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> + DISPID dispId ) throws COMException { <nl> + <nl> + return this . oleMethod ( nType , pvResult , dispId , ( VARIANT [ ] ) null ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ deprecated { @ link COMBindingBaseObject # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) } <nl> + * / <nl> + @ Deprecated <nl> + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> + IDispatch pDisp , String name , VARIANT [ ] pArgs ) throws COMException { <nl> + <nl> + if ( pDisp = = null ) <nl> + throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; <nl> + <nl> + / / variable declaration <nl> + WString [ ] ptName = new WString [ ] { new WString ( name ) } ; <nl> + DISPIDByReference pdispID = new DISPIDByReference ( ) ; <nl> + <nl> + / / Get DISPID for name passed . . . <nl> + HRESULT hr = pDisp . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , <nl> + LOCALE _ USER _ DEFAULT , pdispID ) ; <nl> + <nl> + COMUtils . checkRC ( hr ) ; <nl> + <nl> + return this <nl> + . oleMethod ( nType , pvResult , pDisp , pdispID . getValue ( ) , pArgs ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ deprecated { @ link COMBindingBaseObject # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , com . sun . jna . platform . win32 . OaIdl . DISPID , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) } <nl> + * / <nl> + @ Deprecated <nl> + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> + IDispatch pDisp , DISPID dispId , VARIANT [ ] pArgs ) <nl> + throws COMException { <nl> + <nl> + if ( pDisp = = null ) <nl> + throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; <nl> + <nl> + / / variable declaration <nl> + int _ argsLen = 0 ; <nl> + VARIANT [ ] _ args = null ; <nl> + DISPPARAMS . ByReference dp = new DISPPARAMS . ByReference ( ) ; <nl> + EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; <nl> + IntByReference puArgErr = new IntByReference ( ) ; <nl> + <nl> + / / make parameter reverse ordering as expected by COM runtime <nl> + if ( ( pArgs ! = null ) & & ( pArgs . length > 0 ) ) { <nl> + _ argsLen = pArgs . length ; <nl> + _ args = new VARIANT [ _ argsLen ] ; <nl> + <nl> + int revCount = _ argsLen ; <nl> + for ( int i = 0 ; i < _ argsLen ; i + + ) { <nl> + _ args [ i ] = pArgs [ - - revCount ] ; <nl> + } <nl> + } <nl> + <nl> + / / Handle special - case for property - puts ! <nl> + if ( nType = = OleAuto . DISPATCH _ PROPERTYPUT ) { <nl> + dp . setRgdispidNamedArgs ( new DISPID [ ] { OaIdl . DISPID _ PROPERTYPUT } ) ; <nl> + } <nl> + <nl> + / / Build DISPPARAMS <nl> + if ( _ argsLen > 0 ) { <nl> + dp . setArgs ( _ args ) ; <nl> + <nl> + / / write ' DISPPARAMS ' structure to memory <nl> + dp . write ( ) ; <nl> + } <nl> + <nl> + / / Apply " fix " according to <nl> + / / https : / / www . delphitools . info / 2013 / 04 / 30 / gaining - visual - basic - ole - super - powers / <nl> + / / https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms221486 ( v = vs . 85 ) . aspx <nl> + / / <nl> + / / Summary : there are methods in the word typelibrary that require both <nl> + / / PROPERTYGET _ and _ METHOD to be set . With only one of these set the call <nl> + / / fails . <nl> + / / <nl> + / / The article from delphitools argues , that automation compatible libraries <nl> + / / need to be compatible with VisualBasic which does not distingish methods <nl> + / / and property getters and will set both flags always . <nl> + / / <nl> + / / The MSDN article advises this behaviour : " [ . . . ] Some languages cannot <nl> + / / distinguish between retrieving a property and calling a method . In this <nl> + / / case , you should set the flags DISPATCH _ PROPERTYGET and DISPATCH _ METHOD . <nl> + / / [ . . . ] " ) ) <nl> + / / <nl> + / / This was found when trying to bind InchesToPoints from the _ Application <nl> + / / dispatch interface of the MS Word 15 type library <nl> + / / <nl> + / / The signature according the ITypeLib Viewer ( OLE / COM Object Viewer ) : <nl> + / / [ id ( 0x00000172 ) , helpcontext ( 0x09700172 ) ] <nl> + / / single InchesToPoints ( [ in ] single Inches ) ; <nl> + <nl> + final int finalNType ; <nl> + if ( nType = = OleAuto . DISPATCH _ METHOD | | nType = = OleAuto . DISPATCH _ PROPERTYGET ) { <nl> + finalNType = OleAuto . DISPATCH _ METHOD | OleAuto . DISPATCH _ PROPERTYGET ; <nl> + } else { <nl> + finalNType = nType ; <nl> + } <nl> + <nl> + / / Make the call ! <nl> + HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , <nl> + new WinDef . WORD ( finalNType ) , dp , pvResult , pExcepInfo , puArgErr ) ; <nl> + <nl> + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> + return hr ; <nl> + } <nl> + <nl> + / * * <nl> + * @ deprecated Use { @ link # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) <nl> + * / <nl> + @ Deprecated <nl> + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> + IDispatch pDisp , String name , VARIANT pArg ) throws COMException { <nl> + <nl> + return this . oleMethod ( nType , pvResult , pDisp , name , <nl> + new VARIANT [ ] { pArg } ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ deprecated Use { @ link # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , com . sun . jna . platform . win32 . OaIdl . DISPID , com . sun . jna . platform . win32 . Variant . VARIANT ) <nl> + * / <nl> + @ Deprecated <nl> + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> + IDispatch pDisp , DISPID dispId , VARIANT pArg ) throws COMException { <nl> + <nl> + return this . oleMethod ( nType , pvResult , pDisp , dispId , <nl> + new VARIANT [ ] { pArg } ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ deprecated Use { @ link # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , java . lang . String ) <nl> + * / <nl> + @ Deprecated <nl> + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> IDispatch pDisp , String name ) throws COMException { <nl> <nl> return this . oleMethod ( nType , pvResult , pDisp , name , ( VARIANT [ ] ) null ) ; <nl> } <nl> <nl> + / * * <nl> + * @ deprecated Use { @ link # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , com . sun . jna . platform . win32 . OaIdl . DISPID ) } <nl> + * / <nl> + @ Deprecated <nl> protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , <nl> IDispatch pDisp , DISPID dispId ) throws COMException { <nl> <nl> @ @ - 334 , 7 + 473 , 9 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> * <nl> * @ param hr <nl> * the hr <nl> + * @ deprecated Use { @ link COMUtils # checkRC ( com . sun . jna . platform . win32 . WinNT . HRESULT ) <nl> * / <nl> + @ Deprecated <nl> protected void checkFailed ( HRESULT hr ) { <nl> COMUtils . checkRC ( hr ) ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java <nl> index 3e5f64d . . ee94a94 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java <nl> @ @ - 56 , 15 + 56 , 13 @ @ public class COMEarlyBindingObject extends COMBindingBaseObject implements <nl> <nl> protected String getStringProperty ( DISPID dispId ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - this . getIDispatch ( ) , dispId ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , dispId ) ; <nl> <nl> return result . getValue ( ) . toString ( ) ; <nl> } <nl> <nl> protected void setProperty ( DISPID dispId , boolean value ) { <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , <nl> - dispId , new VARIANT ( value ) ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , dispId , new VARIANT ( value ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMLateBindingObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMLateBindingObject . java <nl> index 5d15e44 . . 079361a 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMLateBindingObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMLateBindingObject . java <nl> @ @ - 83 , 8 + 83 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected IDispatch getAutomationProperty ( String propertyName ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - this . getIDispatch ( ) , propertyName ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; <nl> <nl> return ( ( IDispatch ) result . getValue ( ) ) ; <nl> } <nl> @ @ - 101 , 8 + 100 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> protected IDispatch getAutomationProperty ( String propertyName , <nl> COMLateBindingObject comObject ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - comObject . getIDispatch ( ) , propertyName ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; <nl> <nl> return ( ( IDispatch ) result . getValue ( ) ) ; <nl> } <nl> @ @ - 121 , 8 + 119 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> protected IDispatch getAutomationProperty ( String propertyName , <nl> COMLateBindingObject comObject , VARIANT value ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - comObject . getIDispatch ( ) , propertyName , value ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName , value ) ; <nl> <nl> return ( ( IDispatch ) result . getValue ( ) ) ; <nl> } <nl> @ @ - 139 , 8 + 136 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> protected IDispatch getAutomationProperty ( String propertyName , <nl> IDispatch iDispatch ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - iDispatch , propertyName ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; <nl> <nl> return ( ( IDispatch ) result . getValue ( ) ) ; <nl> } <nl> @ @ - 154 , 8 + 150 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected boolean getBooleanProperty ( String propertyName ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - this . getIDispatch ( ) , propertyName ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; <nl> <nl> return result . booleanValue ( ) ; <nl> } <nl> @ @ - 169 , 8 + 164 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected Date getDateProperty ( String propertyName ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - this . getIDispatch ( ) , propertyName ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; <nl> <nl> return result . dateValue ( ) ; <nl> } <nl> @ @ - 184 , 8 + 178 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected int getIntProperty ( String propertyName ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - this . getIDispatch ( ) , propertyName ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; <nl> <nl> return result . intValue ( ) ; <nl> } <nl> @ @ - 199 , 8 + 192 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected short getShortProperty ( String propertyName ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - this . getIDispatch ( ) , propertyName ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; <nl> <nl> return result . shortValue ( ) ; <nl> } <nl> @ @ - 214 , 13 + 206 , 12 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected String getStringProperty ( String propertyName ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , <nl> - this . getIDispatch ( ) , propertyName ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; <nl> <nl> String res = result . stringValue ( ) ; <nl> - <nl> + <nl> OleAuto . INSTANCE . VariantClear ( result ) ; <nl> - <nl> + <nl> return res ; <nl> } <nl> <nl> @ @ - 233 , 8 + 224 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected VARIANT invoke ( String methodName ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , <nl> - methodName ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName ) ; <nl> <nl> return result ; <nl> } <nl> @ @ - 250 , 8 + 240 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected VARIANT invoke ( String methodName , VARIANT arg ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , <nl> - methodName , arg ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName , arg ) ; <nl> <nl> return result ; <nl> } <nl> @ @ - 267 , 8 + 256 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected VARIANT invoke ( String methodName , VARIANT [ ] args ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , <nl> - methodName , args ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName , args ) ; <nl> <nl> return result ; <nl> } <nl> @ @ - 327 , 27 + 315 , 18 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> } <nl> <nl> / * * <nl> - * Invoke no reply . <nl> - * <nl> - * @ param methodName <nl> - * the method name <nl> - * @ param dispatch <nl> - * the dispatch <nl> + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String ) <nl> * / <nl> + @ Deprecated <nl> protected void invokeNoReply ( String methodName , IDispatch dispatch ) { <nl> this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , methodName ) ; <nl> } <nl> <nl> / * * <nl> - * Invoke no reply . <nl> - * <nl> - * @ param methodName <nl> - * the method name <nl> - * @ param comObject <nl> - * the com object <nl> + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String ) <nl> * / <nl> - protected void invokeNoReply ( String methodName , <nl> - COMLateBindingObject comObject ) { <nl> + @ Deprecated <nl> + protected void invokeNoReply ( String methodName , COMLateBindingObject comObject ) { <nl> this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , comObject . getIDispatch ( ) , <nl> methodName ) ; <nl> } <nl> @ @ - 357 , 34 + 336 , 36 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * <nl> * @ param methodName <nl> * the method name <nl> - * @ param dispatch <nl> - * the dispatch <nl> * @ param arg <nl> * the arg <nl> * / <nl> + protected void invokeNoReply ( String methodName , VARIANT arg ) { <nl> + this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , methodName , arg ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) <nl> + * / <nl> + @ Deprecated <nl> protected void invokeNoReply ( String methodName , IDispatch dispatch , <nl> VARIANT arg ) { <nl> this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , methodName , arg ) ; <nl> } <nl> <nl> / * * <nl> - * Invoke no reply . <nl> - * <nl> - * @ param methodName <nl> - * the method name <nl> - * @ param dispatch <nl> - * the dispatch <nl> - * @ param arg1 <nl> - * the arg1 <nl> - * @ param arg2 <nl> - * the arg2 <nl> + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) <nl> * / <nl> + @ Deprecated <nl> protected void invokeNoReply ( String methodName , IDispatch dispatch , <nl> VARIANT arg1 , VARIANT arg2 ) { <nl> this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , methodName , <nl> new VARIANT [ ] { arg1 , arg2 } ) ; <nl> } <nl> <nl> + / * * <nl> + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) <nl> + * / <nl> + @ Deprecated <nl> protected void invokeNoReply ( String methodName , COMLateBindingObject comObject , <nl> VARIANT arg1 , VARIANT arg2 ) { <nl> this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , comObject . getIDispatch ( ) , methodName , <nl> @ @ - 392 , 14 + 373 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> } <nl> <nl> / * * <nl> - * Invoke no reply . <nl> - * <nl> - * @ param methodName <nl> - * the method name <nl> - * @ param comObject <nl> - * the com object <nl> - * @ param arg <nl> - * the arg <nl> + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) <nl> * / <nl> protected void invokeNoReply ( String methodName , <nl> COMLateBindingObject comObject , VARIANT arg ) { <nl> @ @ - 407 , 16 + 381 , 11 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> methodName , arg ) ; <nl> } <nl> <nl> + <nl> / * * <nl> - * Invoke no reply . <nl> - * <nl> - * @ param methodName <nl> - * the method name <nl> - * @ param dispatch <nl> - * the dispatch <nl> - * @ param args <nl> - * the args <nl> + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) <nl> * / <nl> + @ Deprecated <nl> protected void invokeNoReply ( String methodName , IDispatch dispatch , <nl> VARIANT [ ] args ) { <nl> this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , methodName , <nl> @ @ - 431 , 22 + 400 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected void invokeNoReply ( String methodName ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , <nl> - methodName ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Invoke no reply . <nl> - * <nl> - * @ param methodName <nl> - * the method name <nl> - * @ param arg <nl> - * the arg <nl> - * / <nl> - protected void invokeNoReply ( String methodName , VARIANT arg ) { <nl> - VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , <nl> - methodName , arg ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 459 , 8 + 413 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * / <nl> protected void invokeNoReply ( String methodName , VARIANT [ ] args ) { <nl> VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , <nl> - methodName , args ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName , args ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 522 , 8 + 475 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * the value <nl> * / <nl> protected void setProperty ( String propertyName , boolean value ) { <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , <nl> - propertyName , new VARIANT ( value ) ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 535 , 8 + 487 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * the value <nl> * / <nl> protected void setProperty ( String propertyName , Date value ) { <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , <nl> - propertyName , new VARIANT ( value ) ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 548 , 8 + 499 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * the value <nl> * / <nl> protected void setProperty ( String propertyName , IDispatch value ) { <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , <nl> - propertyName , new VARIANT ( value ) ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 561 , 8 + 511 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * the value <nl> * / <nl> protected void setProperty ( String propertyName , int value ) { <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , <nl> - propertyName , new VARIANT ( value ) ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 574 , 8 + 523 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * the value <nl> * / <nl> protected void setProperty ( String propertyName , short value ) { <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , <nl> - propertyName , new VARIANT ( value ) ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 587 , 8 + 535 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * the value <nl> * / <nl> protected void setProperty ( String propertyName , String value ) { <nl> - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , <nl> - propertyName , new VARIANT ( value ) ) ; <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 596 , 11 + 543 , 17 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> * <nl> * @ param propertyName <nl> * the property name <nl> - * @ param iDispatch <nl> - * the i dispatch <nl> * @ param value <nl> * the value <nl> * / <nl> + protected void setProperty ( String propertyName , VARIANT value ) { <nl> + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , value ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ deprecated Use { @ link # setProperty ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) } <nl> + * / <nl> + @ Deprecated <nl> protected void setProperty ( String propertyName , IDispatch iDispatch , <nl> VARIANT value ) { <nl> this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , iDispatch , <nl> @ @ - 608 , 15 + 561 , 9 @ @ public class COMLateBindingObject extends COMBindingBaseObject { <nl> } <nl> <nl> / * * <nl> - * Sets the property . <nl> - * <nl> - * @ param propertyName <nl> - * the property name <nl> - * @ param comObject <nl> - * the com object <nl> - * @ param value <nl> - * the value <nl> + * @ deprecated Use { @ link # setProperty ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) } <nl> * / <nl> + @ Deprecated <nl> protected void setProperty ( String propertyName , <nl> COMLateBindingObject comObject , VARIANT value ) { <nl> this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null ,
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 index e8dc4fc . . a6a6cab 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 @ @ - 175 , 32 + 175 , 26 @ @ public class COMBindingBaseObject extends COMInvoker { 
 } 
 
 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 - IDispatch pDisp , String name , VARIANT [ ] pArgs ) throws COMException { 
 - 
 - if ( pDisp = = null ) 
 - throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; 
 + String name , VARIANT [ ] pArgs ) throws COMException { 
 
 / / variable declaration 
 WString [ ] ptName = new WString [ ] { new WString ( name ) } ; 
 DISPIDByReference pdispID = new DISPIDByReference ( ) ; 
 
 / / Get DISPID for name passed . . . 
 - HRESULT hr = pDisp . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , 
 + HRESULT hr = iDispatch . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , 
 LOCALE _ USER _ DEFAULT , pdispID ) ; 
 
 COMUtils . checkRC ( hr ) ; 
 
 return this 
 - . oleMethod ( nType , pvResult , pDisp , pdispID . getValue ( ) , pArgs ) ; 
 + . oleMethod ( nType , pvResult , iDispatch , pdispID . getValue ( ) , pArgs ) ; 
 } 
 
 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 - IDispatch pDisp , DISPID dispId , VARIANT [ ] pArgs ) 
 + DISPID dispId , VARIANT [ ] pArgs ) 
 throws COMException { 
 
 - if ( pDisp = = null ) 
 - throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; 
 - 
 / / variable declaration 
 int _ argsLen = 0 ; 
 VARIANT [ ] _ args = null ; 
 @ @ - 244 , 12 + 238 , 12 @ @ public class COMBindingBaseObject extends COMInvoker { 
 / / need to be compatible with VisualBasic which does not distingish methods 
 / / and property getters and will set both flags always . 
 / / 
 - / / The MSDN article advises this behaviour : " [ . . . ] Some languages cannot 
 - / / distinguish between retrieving a property and calling a method . In this 
 + / / The MSDN article advises this behaviour : " [ . . . ] Some languages cannot 
 + / / distinguish between retrieving a property and calling a method . In this 
 / / case , you should set the flags DISPATCH _ PROPERTYGET and DISPATCH _ METHOD . 
 / / [ . . . ] " ) ) 
 / / 
 - / / This was found when trying to bind InchesToPoints from the _ Application 
 + / / This was found when trying to bind InchesToPoints from the _ Application 
 / / dispatch interface of the MS Word 15 type library 
 / / 
 / / The signature according the ITypeLib Viewer ( OLE / COM Object Viewer ) : 
 @ @ - 264 , 7 + 258 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { 
 } 
 
 / / Make the call ! 
 - HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , 
 + HRESULT hr = iDispatch . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , 
 new WinDef . WORD ( finalNType ) , dp , pvResult , pExcepInfo , puArgErr ) ; 
 
 COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 @ @ - 289 , 17 + 283 , 15 @ @ public class COMBindingBaseObject extends COMInvoker { 
 * the cOM exception 
 * / 
 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 - IDispatch pDisp , String name , VARIANT pArg ) throws COMException { 
 + String name , VARIANT pArg ) throws COMException { 
 
 - return this . oleMethod ( nType , pvResult , pDisp , name , 
 - new VARIANT [ ] { pArg } ) ; 
 + return this . oleMethod ( nType , pvResult , name , new VARIANT [ ] { pArg } ) ; 
 } 
 
 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 - IDispatch pDisp , DISPID dispId , VARIANT pArg ) throws COMException { 
 + DISPID dispId , VARIANT pArg ) throws COMException { 
 
 - return this . oleMethod ( nType , pvResult , pDisp , dispId , 
 - new VARIANT [ ] { pArg } ) ; 
 + return this . oleMethod ( nType , pvResult , dispId , new VARIANT [ ] { pArg } ) ; 
 } 
 
 / * * 
 @ @ - 318 , 11 + 310 , 158 @ @ public class COMBindingBaseObject extends COMInvoker { 
 * the cOM exception 
 * / 
 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 + String name ) throws COMException { 
 + 
 + return this . oleMethod ( nType , pvResult , name , ( VARIANT [ ] ) null ) ; 
 + } 
 + 
 + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 + DISPID dispId ) throws COMException { 
 + 
 + return this . oleMethod ( nType , pvResult , dispId , ( VARIANT [ ] ) null ) ; 
 + } 
 + 
 + / * * 
 + * @ deprecated { @ link COMBindingBaseObject # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) } 
 + * / 
 + @ Deprecated 
 + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 + IDispatch pDisp , String name , VARIANT [ ] pArgs ) throws COMException { 
 + 
 + if ( pDisp = = null ) 
 + throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; 
 + 
 + / / variable declaration 
 + WString [ ] ptName = new WString [ ] { new WString ( name ) } ; 
 + DISPIDByReference pdispID = new DISPIDByReference ( ) ; 
 + 
 + / / Get DISPID for name passed . . . 
 + HRESULT hr = pDisp . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , 
 + LOCALE _ USER _ DEFAULT , pdispID ) ; 
 + 
 + COMUtils . checkRC ( hr ) ; 
 + 
 + return this 
 + . oleMethod ( nType , pvResult , pDisp , pdispID . getValue ( ) , pArgs ) ; 
 + } 
 + 
 + / * * 
 + * @ deprecated { @ link COMBindingBaseObject # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , com . sun . jna . platform . win32 . OaIdl . DISPID , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) } 
 + * / 
 + @ Deprecated 
 + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 + IDispatch pDisp , DISPID dispId , VARIANT [ ] pArgs ) 
 + throws COMException { 
 + 
 + if ( pDisp = = null ) 
 + throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; 
 + 
 + / / variable declaration 
 + int _ argsLen = 0 ; 
 + VARIANT [ ] _ args = null ; 
 + DISPPARAMS . ByReference dp = new DISPPARAMS . ByReference ( ) ; 
 + EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; 
 + IntByReference puArgErr = new IntByReference ( ) ; 
 + 
 + / / make parameter reverse ordering as expected by COM runtime 
 + if ( ( pArgs ! = null ) & & ( pArgs . length > 0 ) ) { 
 + _ argsLen = pArgs . length ; 
 + _ args = new VARIANT [ _ argsLen ] ; 
 + 
 + int revCount = _ argsLen ; 
 + for ( int i = 0 ; i < _ argsLen ; i + + ) { 
 + _ args [ i ] = pArgs [ - - revCount ] ; 
 + } 
 + } 
 + 
 + / / Handle special - case for property - puts ! 
 + if ( nType = = OleAuto . DISPATCH _ PROPERTYPUT ) { 
 + dp . setRgdispidNamedArgs ( new DISPID [ ] { OaIdl . DISPID _ PROPERTYPUT } ) ; 
 + } 
 + 
 + / / Build DISPPARAMS 
 + if ( _ argsLen > 0 ) { 
 + dp . setArgs ( _ args ) ; 
 + 
 + / / write ' DISPPARAMS ' structure to memory 
 + dp . write ( ) ; 
 + } 
 + 
 + / / Apply " fix " according to 
 + / / https : / / www . delphitools . info / 2013 / 04 / 30 / gaining - visual - basic - ole - super - powers / 
 + / / https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms221486 ( v = vs . 85 ) . aspx 
 + / / 
 + / / Summary : there are methods in the word typelibrary that require both 
 + / / PROPERTYGET _ and _ METHOD to be set . With only one of these set the call 
 + / / fails . 
 + / / 
 + / / The article from delphitools argues , that automation compatible libraries 
 + / / need to be compatible with VisualBasic which does not distingish methods 
 + / / and property getters and will set both flags always . 
 + / / 
 + / / The MSDN article advises this behaviour : " [ . . . ] Some languages cannot 
 + / / distinguish between retrieving a property and calling a method . In this 
 + / / case , you should set the flags DISPATCH _ PROPERTYGET and DISPATCH _ METHOD . 
 + / / [ . . . ] " ) ) 
 + / / 
 + / / This was found when trying to bind InchesToPoints from the _ Application 
 + / / dispatch interface of the MS Word 15 type library 
 + / / 
 + / / The signature according the ITypeLib Viewer ( OLE / COM Object Viewer ) : 
 + / / [ id ( 0x00000172 ) , helpcontext ( 0x09700172 ) ] 
 + / / single InchesToPoints ( [ in ] single Inches ) ; 
 + 
 + final int finalNType ; 
 + if ( nType = = OleAuto . DISPATCH _ METHOD | | nType = = OleAuto . DISPATCH _ PROPERTYGET ) { 
 + finalNType = OleAuto . DISPATCH _ METHOD | OleAuto . DISPATCH _ PROPERTYGET ; 
 + } else { 
 + finalNType = nType ; 
 + } 
 + 
 + / / Make the call ! 
 + HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , 
 + new WinDef . WORD ( finalNType ) , dp , pvResult , pExcepInfo , puArgErr ) ; 
 + 
 + COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 + return hr ; 
 + } 
 + 
 + / * * 
 + * @ deprecated Use { @ link # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) 
 + * / 
 + @ Deprecated 
 + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 + IDispatch pDisp , String name , VARIANT pArg ) throws COMException { 
 + 
 + return this . oleMethod ( nType , pvResult , pDisp , name , 
 + new VARIANT [ ] { pArg } ) ; 
 + } 
 + 
 + / * * 
 + * @ deprecated Use { @ link # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , com . sun . jna . platform . win32 . OaIdl . DISPID , com . sun . jna . platform . win32 . Variant . VARIANT ) 
 + * / 
 + @ Deprecated 
 + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 + IDispatch pDisp , DISPID dispId , VARIANT pArg ) throws COMException { 
 + 
 + return this . oleMethod ( nType , pvResult , pDisp , dispId , 
 + new VARIANT [ ] { pArg } ) ; 
 + } 
 + 
 + / * * 
 + * @ deprecated Use { @ link # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , java . lang . String ) 
 + * / 
 + @ Deprecated 
 + protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 IDispatch pDisp , String name ) throws COMException { 
 
 return this . oleMethod ( nType , pvResult , pDisp , name , ( VARIANT [ ] ) null ) ; 
 } 
 
 + / * * 
 + * @ deprecated Use { @ link # oleMethod ( int , com . sun . jna . platform . win32 . Variant . VARIANT . ByReference , com . sun . jna . platform . win32 . OaIdl . DISPID ) } 
 + * / 
 + @ Deprecated 
 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , 
 IDispatch pDisp , DISPID dispId ) throws COMException { 
 
 @ @ - 334 , 7 + 473 , 9 @ @ public class COMBindingBaseObject extends COMInvoker { 
 * 
 * @ param hr 
 * the hr 
 + * @ deprecated Use { @ link COMUtils # checkRC ( com . sun . jna . platform . win32 . WinNT . HRESULT ) 
 * / 
 + @ Deprecated 
 protected void checkFailed ( HRESULT hr ) { 
 COMUtils . checkRC ( hr ) ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java 
 index 3e5f64d . . ee94a94 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java 
 @ @ - 56 , 15 + 56 , 13 @ @ public class COMEarlyBindingObject extends COMBindingBaseObject implements 
 
 protected String getStringProperty ( DISPID dispId ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - this . getIDispatch ( ) , dispId ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , dispId ) ; 
 
 return result . getValue ( ) . toString ( ) ; 
 } 
 
 protected void setProperty ( DISPID dispId , boolean value ) { 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , 
 - dispId , new VARIANT ( value ) ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , dispId , new VARIANT ( value ) ) ; 
 } 
 
 @ Override 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMLateBindingObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMLateBindingObject . java 
 index 5d15e44 . . 079361a 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMLateBindingObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMLateBindingObject . java 
 @ @ - 83 , 8 + 83 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected IDispatch getAutomationProperty ( String propertyName ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - this . getIDispatch ( ) , propertyName ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; 
 
 return ( ( IDispatch ) result . getValue ( ) ) ; 
 } 
 @ @ - 101 , 8 + 100 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 protected IDispatch getAutomationProperty ( String propertyName , 
 COMLateBindingObject comObject ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - comObject . getIDispatch ( ) , propertyName ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; 
 
 return ( ( IDispatch ) result . getValue ( ) ) ; 
 } 
 @ @ - 121 , 8 + 119 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 protected IDispatch getAutomationProperty ( String propertyName , 
 COMLateBindingObject comObject , VARIANT value ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - comObject . getIDispatch ( ) , propertyName , value ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName , value ) ; 
 
 return ( ( IDispatch ) result . getValue ( ) ) ; 
 } 
 @ @ - 139 , 8 + 136 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 protected IDispatch getAutomationProperty ( String propertyName , 
 IDispatch iDispatch ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - iDispatch , propertyName ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; 
 
 return ( ( IDispatch ) result . getValue ( ) ) ; 
 } 
 @ @ - 154 , 8 + 150 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected boolean getBooleanProperty ( String propertyName ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - this . getIDispatch ( ) , propertyName ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; 
 
 return result . booleanValue ( ) ; 
 } 
 @ @ - 169 , 8 + 164 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected Date getDateProperty ( String propertyName ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - this . getIDispatch ( ) , propertyName ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; 
 
 return result . dateValue ( ) ; 
 } 
 @ @ - 184 , 8 + 178 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected int getIntProperty ( String propertyName ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - this . getIDispatch ( ) , propertyName ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; 
 
 return result . intValue ( ) ; 
 } 
 @ @ - 199 , 8 + 192 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected short getShortProperty ( String propertyName ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - this . getIDispatch ( ) , propertyName ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; 
 
 return result . shortValue ( ) ; 
 } 
 @ @ - 214 , 13 + 206 , 12 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected String getStringProperty ( String propertyName ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , 
 - this . getIDispatch ( ) , propertyName ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , propertyName ) ; 
 
 String res = result . stringValue ( ) ; 
 - 
 + 
 OleAuto . INSTANCE . VariantClear ( result ) ; 
 - 
 + 
 return res ; 
 } 
 
 @ @ - 233 , 8 + 224 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected VARIANT invoke ( String methodName ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , 
 - methodName ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName ) ; 
 
 return result ; 
 } 
 @ @ - 250 , 8 + 240 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected VARIANT invoke ( String methodName , VARIANT arg ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , 
 - methodName , arg ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName , arg ) ; 
 
 return result ; 
 } 
 @ @ - 267 , 8 + 256 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected VARIANT invoke ( String methodName , VARIANT [ ] args ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , 
 - methodName , args ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName , args ) ; 
 
 return result ; 
 } 
 @ @ - 327 , 27 + 315 , 18 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 } 
 
 / * * 
 - * Invoke no reply . 
 - * 
 - * @ param methodName 
 - * the method name 
 - * @ param dispatch 
 - * the dispatch 
 + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String ) 
 * / 
 + @ Deprecated 
 protected void invokeNoReply ( String methodName , IDispatch dispatch ) { 
 this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , methodName ) ; 
 } 
 
 / * * 
 - * Invoke no reply . 
 - * 
 - * @ param methodName 
 - * the method name 
 - * @ param comObject 
 - * the com object 
 + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String ) 
 * / 
 - protected void invokeNoReply ( String methodName , 
 - COMLateBindingObject comObject ) { 
 + @ Deprecated 
 + protected void invokeNoReply ( String methodName , COMLateBindingObject comObject ) { 
 this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , comObject . getIDispatch ( ) , 
 methodName ) ; 
 } 
 @ @ - 357 , 34 + 336 , 36 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * 
 * @ param methodName 
 * the method name 
 - * @ param dispatch 
 - * the dispatch 
 * @ param arg 
 * the arg 
 * / 
 + protected void invokeNoReply ( String methodName , VARIANT arg ) { 
 + this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , methodName , arg ) ; 
 + } 
 + 
 + / * * 
 + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) 
 + * / 
 + @ Deprecated 
 protected void invokeNoReply ( String methodName , IDispatch dispatch , 
 VARIANT arg ) { 
 this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , methodName , arg ) ; 
 } 
 
 / * * 
 - * Invoke no reply . 
 - * 
 - * @ param methodName 
 - * the method name 
 - * @ param dispatch 
 - * the dispatch 
 - * @ param arg1 
 - * the arg1 
 - * @ param arg2 
 - * the arg2 
 + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) 
 * / 
 + @ Deprecated 
 protected void invokeNoReply ( String methodName , IDispatch dispatch , 
 VARIANT arg1 , VARIANT arg2 ) { 
 this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , methodName , 
 new VARIANT [ ] { arg1 , arg2 } ) ; 
 } 
 
 + / * * 
 + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) 
 + * / 
 + @ Deprecated 
 protected void invokeNoReply ( String methodName , COMLateBindingObject comObject , 
 VARIANT arg1 , VARIANT arg2 ) { 
 this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , comObject . getIDispatch ( ) , methodName , 
 @ @ - 392 , 14 + 373 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 } 
 
 / * * 
 - * Invoke no reply . 
 - * 
 - * @ param methodName 
 - * the method name 
 - * @ param comObject 
 - * the com object 
 - * @ param arg 
 - * the arg 
 + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) 
 * / 
 protected void invokeNoReply ( String methodName , 
 COMLateBindingObject comObject , VARIANT arg ) { 
 @ @ - 407 , 16 + 381 , 11 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 methodName , arg ) ; 
 } 
 
 + 
 / * * 
 - * Invoke no reply . 
 - * 
 - * @ param methodName 
 - * the method name 
 - * @ param dispatch 
 - * the dispatch 
 - * @ param args 
 - * the args 
 + * @ deprecated Use { @ link # invokeNoReply ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT [ ] ) 
 * / 
 + @ Deprecated 
 protected void invokeNoReply ( String methodName , IDispatch dispatch , 
 VARIANT [ ] args ) { 
 this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , methodName , 
 @ @ - 431 , 22 + 400 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected void invokeNoReply ( String methodName ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , 
 - methodName ) ; 
 - } 
 - 
 - / * * 
 - * Invoke no reply . 
 - * 
 - * @ param methodName 
 - * the method name 
 - * @ param arg 
 - * the arg 
 - * / 
 - protected void invokeNoReply ( String methodName , VARIANT arg ) { 
 - VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , 
 - methodName , arg ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName ) ; 
 } 
 
 / * * 
 @ @ - 459 , 8 + 413 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * / 
 protected void invokeNoReply ( String methodName , VARIANT [ ] args ) { 
 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getIDispatch ( ) , 
 - methodName , args ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , methodName , args ) ; 
 } 
 
 / * * 
 @ @ - 522 , 8 + 475 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * the value 
 * / 
 protected void setProperty ( String propertyName , boolean value ) { 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , 
 - propertyName , new VARIANT ( value ) ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; 
 } 
 
 / * * 
 @ @ - 535 , 8 + 487 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * the value 
 * / 
 protected void setProperty ( String propertyName , Date value ) { 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , 
 - propertyName , new VARIANT ( value ) ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; 
 } 
 
 / * * 
 @ @ - 548 , 8 + 499 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * the value 
 * / 
 protected void setProperty ( String propertyName , IDispatch value ) { 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , 
 - propertyName , new VARIANT ( value ) ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; 
 } 
 
 / * * 
 @ @ - 561 , 8 + 511 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * the value 
 * / 
 protected void setProperty ( String propertyName , int value ) { 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , 
 - propertyName , new VARIANT ( value ) ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; 
 } 
 
 / * * 
 @ @ - 574 , 8 + 523 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * the value 
 * / 
 protected void setProperty ( String propertyName , short value ) { 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , 
 - propertyName , new VARIANT ( value ) ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; 
 } 
 
 / * * 
 @ @ - 587 , 8 + 535 , 7 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * the value 
 * / 
 protected void setProperty ( String propertyName , String value ) { 
 - this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getIDispatch ( ) , 
 - propertyName , new VARIANT ( value ) ) ; 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , new VARIANT ( value ) ) ; 
 } 
 
 / * * 
 @ @ - 596 , 11 + 543 , 17 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 * 
 * @ param propertyName 
 * the property name 
 - * @ param iDispatch 
 - * the i dispatch 
 * @ param value 
 * the value 
 * / 
 + protected void setProperty ( String propertyName , VARIANT value ) { 
 + this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , propertyName , value ) ; 
 + } 
 + 
 + / * * 
 + * @ deprecated Use { @ link # setProperty ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) } 
 + * / 
 + @ Deprecated 
 protected void setProperty ( String propertyName , IDispatch iDispatch , 
 VARIANT value ) { 
 this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , iDispatch , 
 @ @ - 608 , 15 + 561 , 9 @ @ public class COMLateBindingObject extends COMBindingBaseObject { 
 } 
 
 / * * 
 - * Sets the property . 
 - * 
 - * @ param propertyName 
 - * the property name 
 - * @ param comObject 
 - * the com object 
 - * @ param value 
 - * the value 
 + * @ deprecated Use { @ link # setProperty ( java . lang . String , com . sun . jna . platform . win32 . Variant . VARIANT ) } 
 * / 
 + @ Deprecated 
 protected void setProperty ( String propertyName , 
 COMLateBindingObject comObject , VARIANT value ) { 
 this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null ,

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
