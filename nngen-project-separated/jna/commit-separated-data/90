BLEU SCORE: 0.0065955635923767245

TEST MSG: set to softfloat if both bit are clear
GENERATED MSG: Ensure that temporary library files extracted from resource path are cleaned up , even in case something goes wrong while actually opening the library .

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 4388f98 . . 6c16a70 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 12 , 7 + 12 , 7 @ @ Bug Fixes <nl> - - - - - - - - - <nl> * [ # 652 ] ( https : / / github . com / java - native - access / jna / issues / 652 ) : Dead Lock in class initialization - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 843 ] ( https : / / github . com / java - native - access / jna / pull / 843 ) : Correctly bind ` com . sun . jna . platform . win32 . SecBufferDesc ` and add convenience binding as ` com . sun . jna . platform . win32 . SspiUtil . ManagedSecBufferDesc ` . Bind SSPI functions ` InitializeSecurityContext ` , ` AcceptSecurityContext ` , ` QueryCredentialsAttributes ` , ` QuerySecurityPackageInfo ` , ` EncryptMessage ` , ` DecryptMessage ` , ` MakeSignature ` , ` VerifySignature ` in ` com . sun . jna . platform . win32 . Secur32 ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> - <nl> + * [ # 863 ] ( https : / / github . com / java - native - access / jna / pull / 863 ) : change armSoftFloat condition in ELFAnalyser - [ @ kunkun26 ] ( https : / / github . com / kunkun26 ) . <nl> <nl> Breaking Changes <nl> - - - - - - - - - - - - - - - - <nl> diff - - git a / src / com / sun / jna / ELFAnalyser . java b / src / com / sun / jna / ELFAnalyser . java <nl> index c3eed79 . . 6e7d990 100644 <nl> - - - a / src / com / sun / jna / ELFAnalyser . java <nl> + + + b / src / com / sun / jna / ELFAnalyser . java <nl> @ @ - 133 , 8 + 133 , 8 @ @ class ELFAnalyser { <nl> <nl> if ( arm ) { <nl> int flags = headerData . getInt ( _ 64Bit ? 0x30 : 0x24 ) ; <nl> - armSoftFloat = ( flags & EF _ ARM _ ABI _ FLOAT _ SOFT ) = = EF _ ARM _ ABI _ FLOAT _ SOFT ; <nl> armHardFloat = ( flags & EF _ ARM _ ABI _ FLOAT _ HARD ) = = EF _ ARM _ ABI _ FLOAT _ HARD ; <nl> + armSoftFloat = ! armHardFloat ; <nl> } <nl> } <nl> } <nl> diff - - git a / test / com / sun / jna / ELFAnalyserTest . java b / test / com / sun / jna / ELFAnalyserTest . java <nl> index 9367cc9 . . b1ce5c6 100644 <nl> - - - a / test / com / sun / jna / ELFAnalyserTest . java <nl> + + + b / test / com / sun / jna / ELFAnalyserTest . java <nl> @ @ - 1 , 11 + 1 , 10 @ @ <nl> <nl> package com . sun . jna ; <nl> <nl> - import java . io . File ; <nl> - import java . io . FileOutputStream ; <nl> - import java . io . IOException ; <nl> - import java . io . InputStream ; <nl> - import java . io . OutputStream ; <nl> + import java . io . * ; <nl> + import java . nio . file . CopyOption ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . StandardCopyOption ; <nl> import java . util . zip . ZipEntry ; <nl> import java . util . zip . ZipFile ; <nl> import org . junit . AfterClass ; <nl> @ @ - 21 , 6 + 20 , 7 @ @ public class ELFAnalyserTest { <nl> private static File testResources = new File ( " build / test - resources " ) ; <nl> private static File win32Lib = new File ( testResources , " win32 - x86 - 64 . dll " ) ; <nl> private static File linuxArmelLib = new File ( testResources , " linux - armel . so " ) ; <nl> + private static File linuxArmelNoflagLib = new File ( testResources , " linux - armel - noflag . so " ) ; <nl> private static File linuxArmhfLib = new File ( testResources , " linux - armhf . so " ) ; <nl> private static File linuxAmd64Lib = new File ( testResources , " linux - amd64 . so " ) ; <nl> <nl> @ @ - 37 , 6 + 37 , 7 @ @ public class ELFAnalyserTest { <nl> extractFileFromZip ( linuxArmelZip , " libjnidispatch . so " , linuxArmelLib ) ; <nl> extractFileFromZip ( linuxArmhfZip , " libjnidispatch . so " , linuxArmhfLib ) ; <nl> extractFileFromZip ( linuxAmd64Zip , " libjnidispatch . so " , linuxAmd64Lib ) ; <nl> + makeLinuxArmelNoflagLib ( linuxArmelLib , linuxArmelNoflagLib ) ; <nl> } <nl> <nl> @ Test <nl> @ @ - 72 , 6 + 73 , 16 @ @ public class ELFAnalyserTest { <nl> assertTrue ( ahfd . isArmSoftFloat ( ) ) ; <nl> assertFalse ( ahfd . isArmHardFloat ( ) ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testArmelNoflag ( ) throws IOException { <nl> + ELFAnalyser ahfd = ELFAnalyser . analyse ( linuxArmelNoflagLib . getAbsolutePath ( ) ) ; <nl> + assertTrue ( ahfd . isELF ( ) ) ; <nl> + assertTrue ( ahfd . isArm ( ) ) ; <nl> + assertFalse ( ahfd . is64Bit ( ) ) ; <nl> + assertTrue ( ahfd . isArmSoftFloat ( ) ) ; <nl> + assertFalse ( ahfd . isArmHardFloat ( ) ) ; <nl> + } <nl> <nl> @ AfterClass <nl> public static void afterClass ( ) throws IOException { <nl> @ @ - 79 , 6 + 90 , 7 @ @ public class ELFAnalyserTest { <nl> linuxArmhfLib . delete ( ) ; <nl> linuxArmelLib . delete ( ) ; <nl> win32Lib . delete ( ) ; <nl> + linuxArmelNoflagLib . delete ( ) ; <nl> testResources . delete ( ) ; <nl> } <nl> <nl> @ @ - 104 , 5 + 116 , 18 @ @ public class ELFAnalyserTest { <nl> zip . close ( ) ; <nl> } <nl> } <nl> + <nl> + / / The e _ flags for elf arm binaries begin at an offset of 0x24 bytes . <nl> + / / The procedure call standard is coded on the second byte . <nl> + private static void makeLinuxArmelNoflagLib ( File sourceFile , File outputFile ) throws IOException { <nl> + final int POS _ ABI _ FLOAT _ BIT = ( byte ) 0x25 ; <nl> + Files . copy ( sourceFile . toPath ( ) , outputFile . toPath ( ) , StandardCopyOption . REPLACE _ EXISTING ) ; <nl> + RandomAccessFile out = new RandomAccessFile ( outputFile , " rw " ) ; <nl> + <nl> + out . seek ( POS _ ABI _ FLOAT _ BIT ) ; <nl> + out . write ( 0 ) ; <nl> + <nl> + out . close ( ) ; <nl> + } <nl> } <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 4388f98 . . 6c16a70 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 12 , 7 + 12 , 7 @ @ Bug Fixes 
 - - - - - - - - - 
 * [ # 652 ] ( https : / / github . com / java - native - access / jna / issues / 652 ) : Dead Lock in class initialization - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 843 ] ( https : / / github . com / java - native - access / jna / pull / 843 ) : Correctly bind ` com . sun . jna . platform . win32 . SecBufferDesc ` and add convenience binding as ` com . sun . jna . platform . win32 . SspiUtil . ManagedSecBufferDesc ` . Bind SSPI functions ` InitializeSecurityContext ` , ` AcceptSecurityContext ` , ` QueryCredentialsAttributes ` , ` QuerySecurityPackageInfo ` , ` EncryptMessage ` , ` DecryptMessage ` , ` MakeSignature ` , ` VerifySignature ` in ` com . sun . jna . platform . win32 . Secur32 ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 - 
 + * [ # 863 ] ( https : / / github . com / java - native - access / jna / pull / 863 ) : change armSoftFloat condition in ELFAnalyser - [ @ kunkun26 ] ( https : / / github . com / kunkun26 ) . 
 
 Breaking Changes 
 - - - - - - - - - - - - - - - - 
 diff - - git a / src / com / sun / jna / ELFAnalyser . java b / src / com / sun / jna / ELFAnalyser . java 
 index c3eed79 . . 6e7d990 100644 
 - - - a / src / com / sun / jna / ELFAnalyser . java 
 + + + b / src / com / sun / jna / ELFAnalyser . java 
 @ @ - 133 , 8 + 133 , 8 @ @ class ELFAnalyser { 
 
 if ( arm ) { 
 int flags = headerData . getInt ( _ 64Bit ? 0x30 : 0x24 ) ; 
 - armSoftFloat = ( flags & EF _ ARM _ ABI _ FLOAT _ SOFT ) = = EF _ ARM _ ABI _ FLOAT _ SOFT ; 
 armHardFloat = ( flags & EF _ ARM _ ABI _ FLOAT _ HARD ) = = EF _ ARM _ ABI _ FLOAT _ HARD ; 
 + armSoftFloat = ! armHardFloat ; 
 } 
 } 
 } 
 diff - - git a / test / com / sun / jna / ELFAnalyserTest . java b / test / com / sun / jna / ELFAnalyserTest . java 
 index 9367cc9 . . b1ce5c6 100644 
 - - - a / test / com / sun / jna / ELFAnalyserTest . java 
 + + + b / test / com / sun / jna / ELFAnalyserTest . java 
 @ @ - 1 , 11 + 1 , 10 @ @ 
 
 package com . sun . jna ; 
 
 - import java . io . File ; 
 - import java . io . FileOutputStream ; 
 - import java . io . IOException ; 
 - import java . io . InputStream ; 
 - import java . io . OutputStream ; 
 + import java . io . * ; 
 + import java . nio . file . CopyOption ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . StandardCopyOption ; 
 import java . util . zip . ZipEntry ; 
 import java . util . zip . ZipFile ; 
 import org . junit . AfterClass ; 
 @ @ - 21 , 6 + 20 , 7 @ @ public class ELFAnalyserTest { 
 private static File testResources = new File ( " build / test - resources " ) ; 
 private static File win32Lib = new File ( testResources , " win32 - x86 - 64 . dll " ) ; 
 private static File linuxArmelLib = new File ( testResources , " linux - armel . so " ) ; 
 + private static File linuxArmelNoflagLib = new File ( testResources , " linux - armel - noflag . so " ) ; 
 private static File linuxArmhfLib = new File ( testResources , " linux - armhf . so " ) ; 
 private static File linuxAmd64Lib = new File ( testResources , " linux - amd64 . so " ) ; 
 
 @ @ - 37 , 6 + 37 , 7 @ @ public class ELFAnalyserTest { 
 extractFileFromZip ( linuxArmelZip , " libjnidispatch . so " , linuxArmelLib ) ; 
 extractFileFromZip ( linuxArmhfZip , " libjnidispatch . so " , linuxArmhfLib ) ; 
 extractFileFromZip ( linuxAmd64Zip , " libjnidispatch . so " , linuxAmd64Lib ) ; 
 + makeLinuxArmelNoflagLib ( linuxArmelLib , linuxArmelNoflagLib ) ; 
 } 
 
 @ Test 
 @ @ - 72 , 6 + 73 , 16 @ @ public class ELFAnalyserTest { 
 assertTrue ( ahfd . isArmSoftFloat ( ) ) ; 
 assertFalse ( ahfd . isArmHardFloat ( ) ) ; 
 } 
 + 
 + @ Test 
 + public void testArmelNoflag ( ) throws IOException { 
 + ELFAnalyser ahfd = ELFAnalyser . analyse ( linuxArmelNoflagLib . getAbsolutePath ( ) ) ; 
 + assertTrue ( ahfd . isELF ( ) ) ; 
 + assertTrue ( ahfd . isArm ( ) ) ; 
 + assertFalse ( ahfd . is64Bit ( ) ) ; 
 + assertTrue ( ahfd . isArmSoftFloat ( ) ) ; 
 + assertFalse ( ahfd . isArmHardFloat ( ) ) ; 
 + } 
 
 @ AfterClass 
 public static void afterClass ( ) throws IOException { 
 @ @ - 79 , 6 + 90 , 7 @ @ public class ELFAnalyserTest { 
 linuxArmhfLib . delete ( ) ; 
 linuxArmelLib . delete ( ) ; 
 win32Lib . delete ( ) ; 
 + linuxArmelNoflagLib . delete ( ) ; 
 testResources . delete ( ) ; 
 } 
 
 @ @ - 104 , 5 + 116 , 18 @ @ public class ELFAnalyserTest { 
 zip . close ( ) ; 
 } 
 } 
 + 
 + / / The e _ flags for elf arm binaries begin at an offset of 0x24 bytes . 
 + / / The procedure call standard is coded on the second byte . 
 + private static void makeLinuxArmelNoflagLib ( File sourceFile , File outputFile ) throws IOException { 
 + final int POS _ ABI _ FLOAT _ BIT = ( byte ) 0x25 ; 
 + Files . copy ( sourceFile . toPath ( ) , outputFile . toPath ( ) , StandardCopyOption . REPLACE _ EXISTING ) ; 
 + RandomAccessFile out = new RandomAccessFile ( outputFile , " rw " ) ; 
 + 
 + out . seek ( POS _ ABI _ FLOAT _ BIT ) ; 
 + out . write ( 0 ) ; 
 + 
 + out . close ( ) ; 
 + } 
 } 


NEAREST DIFF:
ELIMINATEDSENTENCE
