BLEU SCORE: 0.013878957858167952

TEST MSG: fix more merge fallout
GENERATED MSG: attach native thread as daemon to avoid tests hanging on exit

TEST DIFF (one line): diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index 641def1 . . 62987d6 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 46 , 10 + 46 , 10 @ @ public class CallbacksTest extends TestCase implements Paths { <nl> <nl> private static final int THREAD _ TIMEOUT = 5000 ; <nl> <nl> - protected void waitFor ( Thread t ) { <nl> + protected void waitFor ( Thread thread ) { <nl> long start = System . currentTimeMillis ( ) ; <nl> - 	 while ( t . isAlive ( ) ) { <nl> - 	 Thread . sleep ( 10 ) ; <nl> + 	 while ( thread . isAlive ( ) ) { <nl> + 	 try { Thread . sleep ( 10 ) ; } catch ( InterruptedException e ) { } <nl> 	 if ( System . currentTimeMillis ( ) - start > THREAD _ TIMEOUT ) { <nl> 	 	 fail ( " Timed out waiting for native thread " + thread <nl> + " to detach and terminate " ) ;
NEAREST DIFF (one line): diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index a8d8056 . . d9446bb 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 1036 , 13 + 1036 , 16 @ @ public class CallbacksTest extends TestCase { <nl> 1 , threads . size ( ) ) ; <nl> } <nl> <nl> + / / Thread object is never GC ' d on linux - amd64 and ( sometimes ) win32 - amd64 <nl> public void testAttachedThreadCleanupOnExit ( ) throws Exception { <nl> final Set threads = new HashSet ( ) ; <nl> final int [ ] called = { 0 } ; <nl> TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { <nl> public void callback ( ) { <nl> threads . add ( new WeakReference ( Thread . currentThread ( ) ) ) ; <nl> - + + called [ 0 ] ; <nl> + if ( + + called [ 0 ] = = 1 ) { <nl> + Thread . currentThread ( ) . setName ( " Thread to be cleaned up " ) ; <nl> + } <nl> Native . detach ( false ) ; <nl> } <nl> } ; <nl> @ @ - 1056 , 11 + 1059 , 10 @ @ public class CallbacksTest extends TestCase { <nl> while ( ref . get ( ) ! = null ) { <nl> System . gc ( ) ; <nl> Thread . sleep ( 10 ) ; <nl> - if ( System . currentTimeMillis ( ) - start > 5000 ) { <nl> - fail ( " Timed out waiting for attached thread to be detached on exit and disposed : " + ref . get ( ) ) ; <nl> + if ( System . currentTimeMillis ( ) - start > 10000 ) { <nl> + Thread t = ( Thread ) ref . get ( ) ; <nl> + fail ( " Timed out waiting for attached thread to be detached on exit and disposed : " + t + " alive : " + t . isAlive ( ) + " daemon " + t . isDaemon ( ) ) ; <nl> } <nl> - / / Try calling into native to spur thread cleanup <nl> - lib . callVoidCallback ( cb ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index 641def1 . . 62987d6 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 46 , 10 + 46 , 10 @ @ public class CallbacksTest extends TestCase implements Paths { 
 
 private static final int THREAD _ TIMEOUT = 5000 ; 
 
 - protected void waitFor ( Thread t ) { 
 + protected void waitFor ( Thread thread ) { 
 long start = System . currentTimeMillis ( ) ; 
 - 	 while ( t . isAlive ( ) ) { 
 - 	 Thread . sleep ( 10 ) ; 
 + 	 while ( thread . isAlive ( ) ) { 
 + 	 try { Thread . sleep ( 10 ) ; } catch ( InterruptedException e ) { } 
 	 if ( System . currentTimeMillis ( ) - start > THREAD _ TIMEOUT ) { 
 	 	 fail ( " Timed out waiting for native thread " + thread 
 + " to detach and terminate " ) ;

NEAREST DIFF:
diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index a8d8056 . . d9446bb 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 1036 , 13 + 1036 , 16 @ @ public class CallbacksTest extends TestCase { 
 1 , threads . size ( ) ) ; 
 } 
 
 + / / Thread object is never GC ' d on linux - amd64 and ( sometimes ) win32 - amd64 
 public void testAttachedThreadCleanupOnExit ( ) throws Exception { 
 final Set threads = new HashSet ( ) ; 
 final int [ ] called = { 0 } ; 
 TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { 
 public void callback ( ) { 
 threads . add ( new WeakReference ( Thread . currentThread ( ) ) ) ; 
 - + + called [ 0 ] ; 
 + if ( + + called [ 0 ] = = 1 ) { 
 + Thread . currentThread ( ) . setName ( " Thread to be cleaned up " ) ; 
 + } 
 Native . detach ( false ) ; 
 } 
 } ; 
 @ @ - 1056 , 11 + 1059 , 10 @ @ public class CallbacksTest extends TestCase { 
 while ( ref . get ( ) ! = null ) { 
 System . gc ( ) ; 
 Thread . sleep ( 10 ) ; 
 - if ( System . currentTimeMillis ( ) - start > 5000 ) { 
 - fail ( " Timed out waiting for attached thread to be detached on exit and disposed : " + ref . get ( ) ) ; 
 + if ( System . currentTimeMillis ( ) - start > 10000 ) { 
 + Thread t = ( Thread ) ref . get ( ) ; 
 + fail ( " Timed out waiting for attached thread to be detached on exit and disposed : " + t + " alive : " + t . isAlive ( ) + " daemon " + t . isDaemon ( ) ) ; 
 } 
 - / / Try calling into native to spur thread cleanup 
 - lib . callVoidCallback ( cb ) ; 
 } 
 } 

