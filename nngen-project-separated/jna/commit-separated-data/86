BLEU SCORE: 0.03283637368030199

TEST MSG: Correctly close RandomAccessFile in ELFAnalyser # runDetection
GENERATED MSG: Add union support

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 6016125 . . 2c4e968 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 16 , 6 + 16 , 7 @ @ Bug Fixes <nl> * [ # 867 ] ( https : / / github . com / java - native - access / jna / issues / 867 ) : Fix memory leak in ` COMLateBindingObject # getStringProperty ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 871 ] ( https : / / github . com / java - native - access / jna / issues / 871 ) : Fix mapping of libc function ` gethostname ` , ` sethostname ` , ` getdomainname ` and ` setdomainname ` and bind ` com . sun . jna . platform . win32 . Winsock2 . gethostname ( byte [ ] , int ) ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 876 ] ( https : / / github . com / java - native - access / jna / pull / 876 ) : Restore java 6 compatibility - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 882 ] ( https : / / github . com / java - native - access / jna / pull / 882 ) : Correctly close file in ` ELFAnalyser # runDetection ` , fix suggested by [ @ Sylvyrfysh ] ( https : / / github . com / Sylvyrfysh ) in [ # 880 ] ( https : / / github . com / java - native - access / jna / pull / 880 ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Breaking Changes <nl> - - - - - - - - - - - - - - - - <nl> diff - - git a / src / com / sun / jna / ELFAnalyser . java b / src / com / sun / jna / ELFAnalyser . java <nl> index 6e7d990 . . ba84382 100644 <nl> - - - a / src / com / sun / jna / ELFAnalyser . java <nl> + + + b / src / com / sun / jna / ELFAnalyser . java <nl> @ @ - 104 , 37 + 104 , 45 @ @ class ELFAnalyser { <nl> } <nl> <nl> private void runDetection ( ) throws IOException { <nl> - / / run precheck - only of if the file at least hold an ELF header parsing <nl> - / / runs further . <nl> RandomAccessFile raf = new RandomAccessFile ( filename , " r " ) ; <nl> - if ( raf . length ( ) > 4 ) { <nl> - byte [ ] magic = new byte [ 4 ] ; <nl> - raf . seek ( 0 ) ; <nl> - raf . read ( magic ) ; <nl> - if ( Arrays . equals ( magic , ELF _ MAGIC ) ) { <nl> - ELF = true ; <nl> + try { <nl> + / / run precheck - only of if the file at least hold an ELF header parsing <nl> + / / runs further . <nl> + if ( raf . length ( ) > 4 ) { <nl> + byte [ ] magic = new byte [ 4 ] ; <nl> + raf . seek ( 0 ) ; <nl> + raf . read ( magic ) ; <nl> + if ( Arrays . equals ( magic , ELF _ MAGIC ) ) { <nl> + ELF = true ; <nl> + } <nl> } <nl> - } <nl> - if ( ! ELF ) { <nl> - return ; <nl> - } <nl> - raf . seek ( 4 ) ; <nl> - / / The total header size depends on the pointer size of the platform <nl> - / / so before the header is loaded the pointer size has to be determined <nl> - byte sizeIndicator = raf . readByte ( ) ; <nl> - _ 64Bit = sizeIndicator = = EI _ CLASS _ 64BIT ; <nl> - raf . seek ( 0 ) ; <nl> - ByteBuffer headerData = ByteBuffer . allocate ( _ 64Bit ? 64 : 52 ) ; <nl> - raf . getChannel ( ) . read ( headerData , 0 ) ; <nl> - bigEndian = headerData . get ( 5 ) = = EI _ DATA _ BIG _ ENDIAN ; <nl> - headerData . order ( bigEndian ? ByteOrder . BIG _ ENDIAN : ByteOrder . LITTLE _ ENDIAN ) ; <nl> + if ( ! ELF ) { <nl> + return ; <nl> + } <nl> + raf . seek ( 4 ) ; <nl> + / / The total header size depends on the pointer size of the platform <nl> + / / so before the header is loaded the pointer size has to be determined <nl> + byte sizeIndicator = raf . readByte ( ) ; <nl> + _ 64Bit = sizeIndicator = = EI _ CLASS _ 64BIT ; <nl> + raf . seek ( 0 ) ; <nl> + ByteBuffer headerData = ByteBuffer . allocate ( _ 64Bit ? 64 : 52 ) ; <nl> + raf . getChannel ( ) . read ( headerData , 0 ) ; <nl> + bigEndian = headerData . get ( 5 ) = = EI _ DATA _ BIG _ ENDIAN ; <nl> + headerData . order ( bigEndian ? ByteOrder . BIG _ ENDIAN : ByteOrder . LITTLE _ ENDIAN ) ; <nl> + <nl> + arm = headerData . get ( 0x12 ) = = E _ MACHINE _ ARM ; <nl> <nl> - arm = headerData . get ( 0x12 ) = = E _ MACHINE _ ARM ; <nl> - <nl> - if ( arm ) { <nl> - int flags = headerData . getInt ( _ 64Bit ? 0x30 : 0x24 ) ; <nl> - armHardFloat = ( flags & EF _ ARM _ ABI _ FLOAT _ HARD ) = = EF _ ARM _ ABI _ FLOAT _ HARD ; <nl> - armSoftFloat = ! armHardFloat ; <nl> + if ( arm ) { <nl> + int flags = headerData . getInt ( _ 64Bit ? 0x30 : 0x24 ) ; <nl> + armHardFloat = ( flags & EF _ ARM _ ABI _ FLOAT _ HARD ) = = EF _ ARM _ ABI _ FLOAT _ HARD ; <nl> + armSoftFloat = ! armHardFloat ; <nl> + } <nl> + } finally { <nl> + try { <nl> + raf . close ( ) ; <nl> + } catch ( IOException ex ) { <nl> + / / Swallow - closing <nl> + } <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / TODO b / jnalib / TODO <nl> index 70a6e96 . . a6f48f1 100644 <nl> - - - a / jnalib / TODO <nl> + + + b / jnalib / TODO <nl> @ @ - 6 , 10 + 6 , 10 @ @ <nl> <nl> # TODO : <nl> <nl> - * Union <nl> - <nl> * review / use ByteBuffer everywhere <nl> * change / augment getWindowHandle0 to provide any heavyweight component window <nl> + * use jna . encoding property to affect string encoding instead of just using <nl> + the system default encoding . <nl> <nl> * design : <nl> <nl> @ @ - 30 , 6 + 30 , 9 @ @ <nl> or move callback asm templates into dispatch _ < arch > . c <nl> <nl> <nl> + * provide library load / unload hooks ( Runnables in options ? ) . Examples : <nl> + o GetLastError in kernel32 <nl> + o WSAInit ? <nl> * determine X11 display name from current java program ( if any ) ; null is ok <nl> since it uses getenv ( DISPLAY ) , which is what java would do <nl> note : DISPLAY may be available in GraphicsDevice - > getIDstring <nl> @ @ - 82 , 6 + 85 , 7 @ @ <nl> <nl> <nl> # DONE <nl> + * Union <nl> * rename Argument / Result Converter to be fromNative / toNative <nl> * split unit tests <nl> * auto - convert struct pointers in callback args to Java Structure <nl> diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c <nl> index b48de2f . . cf4ac02 100644 <nl> - - - a / jnalib / native / dispatch . c <nl> + + + b / jnalib / native / dispatch . c <nl> @ @ - 1018 , 7 + 1018 , 7 @ @ throwByName ( JNIEnv * env , const char * name , const char * msg ) <nl> / * Translates a Java string to a C string using the String . getBytes <nl> * method , which uses default local encoding . <nl> * / <nl> - / / TODO : make sure encoding is correct <nl> + / / TODO : use jna . encoding <nl> static char * <nl> newCString ( JNIEnv * env , jstring jstr ) <nl> { <nl> @ @ - 1044 , 7 + 1044 , 7 @ @ newCString ( JNIEnv * env , jstring jstr ) <nl> / * Translates a Java string to a wide C string using the String . toCharArray <nl> * method . <nl> * / <nl> - / / TODO : make any required encoding changes <nl> + / / TODO : are any encoding changes required ? <nl> static wchar _ t * <nl> newWideCString ( JNIEnv * env , jstring str ) <nl> { <nl> diff - - git a / jnalib / native / testlib . c b / jnalib / native / testlib . c <nl> index c6a68f5 . . bfb60da 100644 <nl> - - - a / jnalib / native / testlib . c <nl> + + + b / jnalib / native / testlib . c <nl> @ @ - 413 , 6 + 413 , 16 @ @ testStructureAlignment ( void * s , unsigned index , int * offsetp , int64 * valuep ) { <nl> return - 2 ; <nl> } <nl> <nl> + EXPORT int32 <nl> + testStructureArrayInitialization ( struct CheckFieldAlignment arg [ ] , int len ) { <nl> + int i ; <nl> + for ( i = 0 ; i < len ; i + + ) { <nl> + if ( arg [ i ] . int32Field ! = i ) <nl> + return i ; <nl> + } <nl> + return - 1 ; <nl> + } <nl> + <nl> EXPORT void <nl> modifyStructureArray ( struct CheckFieldAlignment arg [ ] , int length ) { <nl> int i ; <nl> diff - - git a / jnalib / release - notes . txt b / jnalib / release - notes . txt <nl> index 8440578 . . b54dd9a 100755 <nl> - - - a / jnalib / release - notes . txt <nl> + + + b / jnalib / release - notes . txt <nl> @ @ - 11 , 6 + 11 , 8 @ @ Bug Fixes <nl> * Avoid making window undecorated when clearing window mask on X11 <nl> * Fix structure alignment bug on OSX / PPC when first element is > 4 bytes in size <nl> * Clearing OSX window mask by setting to MASK _ NONE now works properly <nl> + * Avoid index exceptions if native buffers are not NUL - terminated on string conversions <nl> + * Write initialized Structure [ ] argument memory prior to function calls <nl> <nl> Release 2 . 4 <nl> Features <nl> diff - - git a / jnalib / src / com / sun / jna / Function . java b / jnalib / src / com / sun / jna / Function . java <nl> index 656d46c . . aa43c25 100644 <nl> - - - a / jnalib / src / com / sun / jna / Function . java <nl> + + + b / jnalib / src / com / sun / jna / Function . java <nl> @ @ - 392 , 12 + 392 , 14 @ @ public class Function extends Pointer { <nl> else { <nl> Pointer base = ss [ 0 ] . getPointer ( ) ; <nl> int size = ss [ 0 ] . size ( ) ; <nl> + ss [ 0 ] . write ( ) ; <nl> for ( int si = 1 ; si < ss . length ; si + + ) { <nl> try { <nl> Pointer p = base . share ( size * si , size ) ; <nl> if ( ss [ si ] . getPointer ( ) . peer ! = p . peer ) { <nl> throw new RuntimeException ( ) ; <nl> } <nl> + ss [ si ] . write ( ) ; <nl> } <nl> catch ( RuntimeException e ) { <nl> String msg = " Structure array elements must use " <nl> diff - - git a / jnalib / test / com / sun / jna / ArgumentsMarshalTest . java b / jnalib / test / com / sun / jna / ArgumentsMarshalTest . java <nl> index 0a7613e . . 47d1fd7 100644 <nl> - - - a / jnalib / test / com / sun / jna / ArgumentsMarshalTest . java <nl> + + + b / jnalib / test / com / sun / jna / ArgumentsMarshalTest . java <nl> @ @ - 55 , 6 + 55 , 7 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> long checkInt64ArgumentAlignment ( int i , long j , int i2 , long j2 ) ; <nl> double checkDoubleArgumentAlignment ( float i , double j , float i2 , double j2 ) ; <nl> Pointer testSimpleStructurePointerArgument ( CheckFieldAlignment p ) ; <nl> + int testStructureArrayInitialization ( CheckFieldAlignment [ ] p , int len ) ; <nl> void modifyStructureArray ( CheckFieldAlignment [ ] p , int length ) ; <nl> <nl> int fillInt8Buffer ( byte [ ] buf , int len , byte value ) ; <nl> @ @ - 214 , 6 + 215 , 22 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> struct . getPointer ( ) , <nl> lib . testSimpleStructurePointerArgument ( struct ) ) ; <nl> } <nl> + <nl> + <nl> + public void testWriteStructureArrayArgumentMemory ( ) { <nl> + final int LENGTH = 10 ; <nl> + TestLibrary . CheckFieldAlignment block = new TestLibrary . CheckFieldAlignment ( ) ; <nl> + block . useMemory ( new Memory ( block . size ( ) * LENGTH ) ) ; <nl> + TestLibrary . CheckFieldAlignment [ ] array = <nl> + new TestLibrary . CheckFieldAlignment [ LENGTH ] ; <nl> + block . toArray ( array ) ; <nl> + for ( int i = 0 ; i < array . length ; i + + ) { <nl> + array [ i ] . int32Field = i ; <nl> + } <nl> + assertEquals ( " Structure array memory not properly initialized " , <nl> + - 1 , lib . testStructureArrayInitialization ( array , array . length ) ) ; <nl> + <nl> + } <nl> <nl> public void testUninitializedStructureArrayArgument ( ) { <nl> final int LENGTH = 10 ;

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 6016125 . . 2c4e968 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 16 , 6 + 16 , 7 @ @ Bug Fixes 
 * [ # 867 ] ( https : / / github . com / java - native - access / jna / issues / 867 ) : Fix memory leak in ` COMLateBindingObject # getStringProperty ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 871 ] ( https : / / github . com / java - native - access / jna / issues / 871 ) : Fix mapping of libc function ` gethostname ` , ` sethostname ` , ` getdomainname ` and ` setdomainname ` and bind ` com . sun . jna . platform . win32 . Winsock2 . gethostname ( byte [ ] , int ) ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 876 ] ( https : / / github . com / java - native - access / jna / pull / 876 ) : Restore java 6 compatibility - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 882 ] ( https : / / github . com / java - native - access / jna / pull / 882 ) : Correctly close file in ` ELFAnalyser # runDetection ` , fix suggested by [ @ Sylvyrfysh ] ( https : / / github . com / Sylvyrfysh ) in [ # 880 ] ( https : / / github . com / java - native - access / jna / pull / 880 ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Breaking Changes 
 - - - - - - - - - - - - - - - - 
 diff - - git a / src / com / sun / jna / ELFAnalyser . java b / src / com / sun / jna / ELFAnalyser . java 
 index 6e7d990 . . ba84382 100644 
 - - - a / src / com / sun / jna / ELFAnalyser . java 
 + + + b / src / com / sun / jna / ELFAnalyser . java 
 @ @ - 104 , 37 + 104 , 45 @ @ class ELFAnalyser { 
 } 
 
 private void runDetection ( ) throws IOException { 
 - / / run precheck - only of if the file at least hold an ELF header parsing 
 - / / runs further . 
 RandomAccessFile raf = new RandomAccessFile ( filename , " r " ) ; 
 - if ( raf . length ( ) > 4 ) { 
 - byte [ ] magic = new byte [ 4 ] ; 
 - raf . seek ( 0 ) ; 
 - raf . read ( magic ) ; 
 - if ( Arrays . equals ( magic , ELF _ MAGIC ) ) { 
 - ELF = true ; 
 + try { 
 + / / run precheck - only of if the file at least hold an ELF header parsing 
 + / / runs further . 
 + if ( raf . length ( ) > 4 ) { 
 + byte [ ] magic = new byte [ 4 ] ; 
 + raf . seek ( 0 ) ; 
 + raf . read ( magic ) ; 
 + if ( Arrays . equals ( magic , ELF _ MAGIC ) ) { 
 + ELF = true ; 
 + } 
 } 
 - } 
 - if ( ! ELF ) { 
 - return ; 
 - } 
 - raf . seek ( 4 ) ; 
 - / / The total header size depends on the pointer size of the platform 
 - / / so before the header is loaded the pointer size has to be determined 
 - byte sizeIndicator = raf . readByte ( ) ; 
 - _ 64Bit = sizeIndicator = = EI _ CLASS _ 64BIT ; 
 - raf . seek ( 0 ) ; 
 - ByteBuffer headerData = ByteBuffer . allocate ( _ 64Bit ? 64 : 52 ) ; 
 - raf . getChannel ( ) . read ( headerData , 0 ) ; 
 - bigEndian = headerData . get ( 5 ) = = EI _ DATA _ BIG _ ENDIAN ; 
 - headerData . order ( bigEndian ? ByteOrder . BIG _ ENDIAN : ByteOrder . LITTLE _ ENDIAN ) ; 
 + if ( ! ELF ) { 
 + return ; 
 + } 
 + raf . seek ( 4 ) ; 
 + / / The total header size depends on the pointer size of the platform 
 + / / so before the header is loaded the pointer size has to be determined 
 + byte sizeIndicator = raf . readByte ( ) ; 
 + _ 64Bit = sizeIndicator = = EI _ CLASS _ 64BIT ; 
 + raf . seek ( 0 ) ; 
 + ByteBuffer headerData = ByteBuffer . allocate ( _ 64Bit ? 64 : 52 ) ; 
 + raf . getChannel ( ) . read ( headerData , 0 ) ; 
 + bigEndian = headerData . get ( 5 ) = = EI _ DATA _ BIG _ ENDIAN ; 
 + headerData . order ( bigEndian ? ByteOrder . BIG _ ENDIAN : ByteOrder . LITTLE _ ENDIAN ) ; 
 + 
 + arm = headerData . get ( 0x12 ) = = E _ MACHINE _ ARM ; 
 
 - arm = headerData . get ( 0x12 ) = = E _ MACHINE _ ARM ; 
 - 
 - if ( arm ) { 
 - int flags = headerData . getInt ( _ 64Bit ? 0x30 : 0x24 ) ; 
 - armHardFloat = ( flags & EF _ ARM _ ABI _ FLOAT _ HARD ) = = EF _ ARM _ ABI _ FLOAT _ HARD ; 
 - armSoftFloat = ! armHardFloat ; 
 + if ( arm ) { 
 + int flags = headerData . getInt ( _ 64Bit ? 0x30 : 0x24 ) ; 
 + armHardFloat = ( flags & EF _ ARM _ ABI _ FLOAT _ HARD ) = = EF _ ARM _ ABI _ FLOAT _ HARD ; 
 + armSoftFloat = ! armHardFloat ; 
 + } 
 + } finally { 
 + try { 
 + raf . close ( ) ; 
 + } catch ( IOException ex ) { 
 + / / Swallow - closing 
 + } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / jnalib / TODO b / jnalib / TODO 
 index 70a6e96 . . a6f48f1 100644 
 - - - a / jnalib / TODO 
 + + + b / jnalib / TODO 
 @ @ - 6 , 10 + 6 , 10 @ @ 
 
 # TODO : 
 
 - * Union 
 - 
 * review / use ByteBuffer everywhere 
 * change / augment getWindowHandle0 to provide any heavyweight component window 
 + * use jna . encoding property to affect string encoding instead of just using 
 + the system default encoding . 
 
 * design : 
 
 @ @ - 30 , 6 + 30 , 9 @ @ 
 or move callback asm templates into dispatch _ < arch > . c 
 
 
 + * provide library load / unload hooks ( Runnables in options ? ) . Examples : 
 + o GetLastError in kernel32 
 + o WSAInit ? 
 * determine X11 display name from current java program ( if any ) ; null is ok 
 since it uses getenv ( DISPLAY ) , which is what java would do 
 note : DISPLAY may be available in GraphicsDevice - > getIDstring 
 @ @ - 82 , 6 + 85 , 7 @ @ 
 
 
 # DONE 
 + * Union 
 * rename Argument / Result Converter to be fromNative / toNative 
 * split unit tests 
 * auto - convert struct pointers in callback args to Java Structure 
 diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c 
 index b48de2f . . cf4ac02 100644 
 - - - a / jnalib / native / dispatch . c 
 + + + b / jnalib / native / dispatch . c 
 @ @ - 1018 , 7 + 1018 , 7 @ @ throwByName ( JNIEnv * env , const char * name , const char * msg ) 
 / * Translates a Java string to a C string using the String . getBytes 
 * method , which uses default local encoding . 
 * / 
 - / / TODO : make sure encoding is correct 
 + / / TODO : use jna . encoding 
 static char * 
 newCString ( JNIEnv * env , jstring jstr ) 
 { 
 @ @ - 1044 , 7 + 1044 , 7 @ @ newCString ( JNIEnv * env , jstring jstr ) 
 / * Translates a Java string to a wide C string using the String . toCharArray 
 * method . 
 * / 
 - / / TODO : make any required encoding changes 
 + / / TODO : are any encoding changes required ? 
 static wchar _ t * 
 newWideCString ( JNIEnv * env , jstring str ) 
 { 
 diff - - git a / jnalib / native / testlib . c b / jnalib / native / testlib . c 
 index c6a68f5 . . bfb60da 100644 
 - - - a / jnalib / native / testlib . c 
 + + + b / jnalib / native / testlib . c 
 @ @ - 413 , 6 + 413 , 16 @ @ testStructureAlignment ( void * s , unsigned index , int * offsetp , int64 * valuep ) { 
 return - 2 ; 
 } 
 
 + EXPORT int32 
 + testStructureArrayInitialization ( struct CheckFieldAlignment arg [ ] , int len ) { 
 + int i ; 
 + for ( i = 0 ; i < len ; i + + ) { 
 + if ( arg [ i ] . int32Field ! = i ) 
 + return i ; 
 + } 
 + return - 1 ; 
 + } 
 + 
 EXPORT void 
 modifyStructureArray ( struct CheckFieldAlignment arg [ ] , int length ) { 
 int i ; 
 diff - - git a / jnalib / release - notes . txt b / jnalib / release - notes . txt 
 index 8440578 . . b54dd9a 100755 
 - - - a / jnalib / release - notes . txt 
 + + + b / jnalib / release - notes . txt 
 @ @ - 11 , 6 + 11 , 8 @ @ Bug Fixes 
 * Avoid making window undecorated when clearing window mask on X11 
 * Fix structure alignment bug on OSX / PPC when first element is > 4 bytes in size 
 * Clearing OSX window mask by setting to MASK _ NONE now works properly 
 + * Avoid index exceptions if native buffers are not NUL - terminated on string conversions 
 + * Write initialized Structure [ ] argument memory prior to function calls 
 
 Release 2 . 4 
 Features 
 diff - - git a / jnalib / src / com / sun / jna / Function . java b / jnalib / src / com / sun / jna / Function . java 
 index 656d46c . . aa43c25 100644 
 - - - a / jnalib / src / com / sun / jna / Function . java 
 + + + b / jnalib / src / com / sun / jna / Function . java 
 @ @ - 392 , 12 + 392 , 14 @ @ public class Function extends Pointer { 
 else { 
 Pointer base = ss [ 0 ] . getPointer ( ) ; 
 int size = ss [ 0 ] . size ( ) ; 
 + ss [ 0 ] . write ( ) ; 
 for ( int si = 1 ; si < ss . length ; si + + ) { 
 try { 
 Pointer p = base . share ( size * si , size ) ; 
 if ( ss [ si ] . getPointer ( ) . peer ! = p . peer ) { 
 throw new RuntimeException ( ) ; 
 } 
 + ss [ si ] . write ( ) ; 
 } 
 catch ( RuntimeException e ) { 
 String msg = " Structure array elements must use " 
 diff - - git a / jnalib / test / com / sun / jna / ArgumentsMarshalTest . java b / jnalib / test / com / sun / jna / ArgumentsMarshalTest . java 
 index 0a7613e . . 47d1fd7 100644 
 - - - a / jnalib / test / com / sun / jna / ArgumentsMarshalTest . java 
 + + + b / jnalib / test / com / sun / jna / ArgumentsMarshalTest . java 
 @ @ - 55 , 6 + 55 , 7 @ @ public class ArgumentsMarshalTest extends TestCase { 
 long checkInt64ArgumentAlignment ( int i , long j , int i2 , long j2 ) ; 
 double checkDoubleArgumentAlignment ( float i , double j , float i2 , double j2 ) ; 
 Pointer testSimpleStructurePointerArgument ( CheckFieldAlignment p ) ; 
 + int testStructureArrayInitialization ( CheckFieldAlignment [ ] p , int len ) ; 
 void modifyStructureArray ( CheckFieldAlignment [ ] p , int length ) ; 
 
 int fillInt8Buffer ( byte [ ] buf , int len , byte value ) ; 
 @ @ - 214 , 6 + 215 , 22 @ @ public class ArgumentsMarshalTest extends TestCase { 
 struct . getPointer ( ) , 
 lib . testSimpleStructurePointerArgument ( struct ) ) ; 
 } 
 + 
 + 
 + public void testWriteStructureArrayArgumentMemory ( ) { 
 + final int LENGTH = 10 ; 
 + TestLibrary . CheckFieldAlignment block = new TestLibrary . CheckFieldAlignment ( ) ; 
 + block . useMemory ( new Memory ( block . size ( ) * LENGTH ) ) ; 
 + TestLibrary . CheckFieldAlignment [ ] array = 
 + new TestLibrary . CheckFieldAlignment [ LENGTH ] ; 
 + block . toArray ( array ) ; 
 + for ( int i = 0 ; i < array . length ; i + + ) { 
 + array [ i ] . int32Field = i ; 
 + } 
 + assertEquals ( " Structure array memory not properly initialized " , 
 + - 1 , lib . testStructureArrayInitialization ( array , array . length ) ) ; 
 + 
 + } 
 
 public void testUninitializedStructureArrayArgument ( ) { 
 final int LENGTH = 10 ;
