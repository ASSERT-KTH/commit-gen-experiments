BLEU SCORE: 0.04372912656590315

TEST MSG: Fixed incorrect structure write override
GENERATED MSG: correct mappings causing failure on win64

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> index c058fb2 . . 26f432a 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> @ @ - 2778 , 6 + 2778 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> this . AceSize = ( short ) ( super . fieldOffset ( " SidStart " ) + psid . getBytes ( ) . length ) ; <nl> this . psid = psid ; <nl> this . Mask = Mask ; <nl> + this . SidStart = psid . getPointer ( ) . getByteArray ( 0 , SidStart . length ) ; <nl> this . allocateMemory ( AceSize ) ; <nl> write ( ) ; <nl> } <nl> @ @ - 2792 , 6 + 2793 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> * / <nl> @ Override <nl> public void write ( ) { <nl> + super . write ( ) ; <nl> int offsetOfSID = super . fieldOffset ( " SidStart " ) ; <nl> int sizeOfSID = super . AceSize - super . fieldOffset ( " SidStart " ) ; <nl> if ( psid ! = null ) {
NEAREST DIFF (one line): diff - - git a / contrib / w32keyhook / KeyHook . java b / contrib / w32keyhook / KeyHook . java <nl> deleted file mode 100644 <nl> index bb0bb41 . . 0000000 <nl> - - - a / contrib / w32keyhook / KeyHook . java <nl> + + + / dev / null <nl> @ @ - 1 , 67 + 0 , 0 @ @ <nl> - import com . sun . jna . platform . win32 . Kernel32 ; <nl> - import com . sun . jna . platform . win32 . User32 ; <nl> - import com . sun . jna . platform . win32 . WinUser ; <nl> - import com . sun . jna . platform . win32 . WinDef . HMODULE ; <nl> - import com . sun . jna . platform . win32 . WinDef . LRESULT ; <nl> - import com . sun . jna . platform . win32 . WinDef . WPARAM ; <nl> - import com . sun . jna . platform . win32 . WinUser . HHOOK ; <nl> - import com . sun . jna . platform . win32 . WinUser . KBDLLHOOKSTRUCT ; <nl> - import com . sun . jna . platform . win32 . WinUser . LowLevelKeyboardProc ; <nl> - import com . sun . jna . platform . win32 . WinUser . MSG ; <nl> - <nl> - / * * Sample implementation of a low - level keyboard hook on W32 . * / <nl> - public class KeyHook { <nl> - private static volatile boolean quit ; <nl> - private static HHOOK hhk ; <nl> - private static LowLevelKeyboardProc keyboardHook ; <nl> - <nl> - public static void main ( String [ ] args ) { <nl> - final User32 lib = User32 . INSTANCE ; <nl> - HMODULE hMod = Kernel32 . INSTANCE . GetModuleHandle ( null ) ; <nl> - keyboardHook = new LowLevelKeyboardProc ( ) { <nl> - public LRESULT callback ( int nCode , WPARAM wParam , KBDLLHOOKSTRUCT info ) { <nl> - if ( nCode > = 0 ) { <nl> - switch ( wParam . intValue ( ) ) { <nl> - case WinUser . WM _ KEYUP : <nl> - case WinUser . WM _ KEYDOWN : <nl> - case WinUser . WM _ SYSKEYUP : <nl> - case WinUser . WM _ SYSKEYDOWN : <nl> - System . err . println ( " in callback , key = " + info . vkCode ) ; <nl> - if ( info . vkCode = = 81 ) { <nl> - quit = true ; <nl> - } <nl> - } <nl> - } <nl> - return lib . CallNextHookEx ( hhk , nCode , wParam , info . getPointer ( ) ) ; <nl> - } <nl> - } ; <nl> - hhk = lib . SetWindowsHookEx ( WinUser . WH _ KEYBOARD _ LL , keyboardHook , hMod , 0 ) ; <nl> - System . out . println ( " Keyboard hook installed , type anywhere , ' q ' to quit " ) ; <nl> - new Thread ( ) { <nl> - public void run ( ) { <nl> - while ( ! quit ) { <nl> - try { Thread . sleep ( 10 ) ; } catch ( Exception e ) { } <nl> - } <nl> - System . err . println ( " unhook and exit " ) ; <nl> - lib . UnhookWindowsHookEx ( hhk ) ; <nl> - System . exit ( 0 ) ; <nl> - } <nl> - } . start ( ) ; <nl> - <nl> - / / This bit never returns from GetMessage <nl> - int result ; <nl> - MSG msg = new MSG ( ) ; <nl> - while ( ( result = lib . GetMessage ( msg , null , 0 , 0 ) ) ! = 0 ) { <nl> - if ( result = = - 1 ) { <nl> - System . err . println ( " error in get message " ) ; <nl> - break ; <nl> - } <nl> - else { <nl> - System . err . println ( " got message " ) ; <nl> - lib . TranslateMessage ( msg ) ; <nl> - lib . DispatchMessage ( msg ) ; <nl> - } <nl> - } <nl> - lib . UnhookWindowsHookEx ( hhk ) ; <nl> - } <nl> - } <nl> \ No newline at end of file <nl> diff - - git a / contrib / w32keyhook / build . xml b / contrib / w32keyhook / build . xml <nl> index 556f31a . . ece0955 100644 <nl> - - - a / contrib / w32keyhook / build . xml <nl> + + + b / contrib / w32keyhook / build . xml <nl> @ @ - 2 , 7 + 2 , 7 @ @ <nl> < project name = " jnacontrib . w32keyhook " default = " jar " basedir = " . " > <nl> < description > Builds , tests , and runs the project jnacontrib . w32keyhook . < / description > <nl> < ! - - Locations - - > <nl> - < property name = " src " location = " . " / > <nl> + < property name = " src " location = " src " / > <nl> < property name = " build " location = " build " / > <nl> < property name = " jna - dist " location = " . . / . . / dist " / > <nl> <nl> @ @ - 44 , 9 + 44 , 6 @ @ <nl> < classpath > <nl> < path refid = " classpath " / > <nl> < / classpath > <nl> - < src > <nl> - < dirset dir = " $ { src } " / > <nl> - < / src > <nl> < / javac > <nl> <nl> < ! - - Copy all non - java files to classes . - - > <nl> diff - - git a / contrib / w32keyhook / src / KeyHook . java b / contrib / w32keyhook / src / KeyHook . java <nl> new file mode 100644 <nl> index 0000000 . . bb0bb41 <nl> - - - / dev / null <nl> + + + b / contrib / w32keyhook / src / KeyHook . java <nl> @ @ - 0 , 0 + 1 , 67 @ @ <nl> + import com . sun . jna . platform . win32 . Kernel32 ; <nl> + import com . sun . jna . platform . win32 . User32 ; <nl> + import com . sun . jna . platform . win32 . WinUser ; <nl> + import com . sun . jna . platform . win32 . WinDef . HMODULE ; <nl> + import com . sun . jna . platform . win32 . WinDef . LRESULT ; <nl> + import com . sun . jna . platform . win32 . WinDef . WPARAM ; <nl> + import com . sun . jna . platform . win32 . WinUser . HHOOK ; <nl> + import com . sun . jna . platform . win32 . WinUser . KBDLLHOOKSTRUCT ; <nl> + import com . sun . jna . platform . win32 . WinUser . LowLevelKeyboardProc ; <nl> + import com . sun . jna . platform . win32 . WinUser . MSG ; <nl> + <nl> + / * * Sample implementation of a low - level keyboard hook on W32 . * / <nl> + public class KeyHook { <nl> + private static volatile boolean quit ; <nl> + private static HHOOK hhk ; <nl> + private static LowLevelKeyboardProc keyboardHook ; <nl> + <nl> + public static void main ( String [ ] args ) { <nl> + final User32 lib = User32 . INSTANCE ; <nl> + HMODULE hMod = Kernel32 . INSTANCE . GetModuleHandle ( null ) ; <nl> + keyboardHook = new LowLevelKeyboardProc ( ) { <nl> + public LRESULT callback ( int nCode , WPARAM wParam , KBDLLHOOKSTRUCT info ) { <nl> + if ( nCode > = 0 ) { <nl> + switch ( wParam . intValue ( ) ) { <nl> + case WinUser . WM _ KEYUP : <nl> + case WinUser . WM _ KEYDOWN : <nl> + case WinUser . WM _ SYSKEYUP : <nl> + case WinUser . WM _ SYSKEYDOWN : <nl> + System . err . println ( " in callback , key = " + info . vkCode ) ; <nl> + if ( info . vkCode = = 81 ) { <nl> + quit = true ; <nl> + } <nl> + } <nl> + } <nl> + return lib . CallNextHookEx ( hhk , nCode , wParam , info . getPointer ( ) ) ; <nl> + } <nl> + } ; <nl> + hhk = lib . SetWindowsHookEx ( WinUser . WH _ KEYBOARD _ LL , keyboardHook , hMod , 0 ) ; <nl> + System . out . println ( " Keyboard hook installed , type anywhere , ' q ' to quit " ) ; <nl> + new Thread ( ) { <nl> + public void run ( ) { <nl> + while ( ! quit ) { <nl> + try { Thread . sleep ( 10 ) ; } catch ( Exception e ) { } <nl> + } <nl> + System . err . println ( " unhook and exit " ) ; <nl> + lib . UnhookWindowsHookEx ( hhk ) ; <nl> + System . exit ( 0 ) ; <nl> + } <nl> + } . start ( ) ; <nl> + <nl> + / / This bit never returns from GetMessage <nl> + int result ; <nl> + MSG msg = new MSG ( ) ; <nl> + while ( ( result = lib . GetMessage ( msg , null , 0 , 0 ) ) ! = 0 ) { <nl> + if ( result = = - 1 ) { <nl> + System . err . println ( " error in get message " ) ; <nl> + break ; <nl> + } <nl> + else { <nl> + System . err . println ( " got message " ) ; <nl> + lib . TranslateMessage ( msg ) ; <nl> + lib . DispatchMessage ( msg ) ; <nl> + } <nl> + } <nl> + lib . UnhookWindowsHookEx ( hhk ) ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 index c058fb2 . . 26f432a 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 @ @ - 2778 , 6 + 2778 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 this . AceSize = ( short ) ( super . fieldOffset ( " SidStart " ) + psid . getBytes ( ) . length ) ; 
 this . psid = psid ; 
 this . Mask = Mask ; 
 + this . SidStart = psid . getPointer ( ) . getByteArray ( 0 , SidStart . length ) ; 
 this . allocateMemory ( AceSize ) ; 
 write ( ) ; 
 } 
 @ @ - 2792 , 6 + 2793 , 7 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 * / 
 @ Override 
 public void write ( ) { 
 + super . write ( ) ; 
 int offsetOfSID = super . fieldOffset ( " SidStart " ) ; 
 int sizeOfSID = super . AceSize - super . fieldOffset ( " SidStart " ) ; 
 if ( psid ! = null ) {

NEAREST DIFF:
diff - - git a / contrib / w32keyhook / KeyHook . java b / contrib / w32keyhook / KeyHook . java 
 deleted file mode 100644 
 index bb0bb41 . . 0000000 
 - - - a / contrib / w32keyhook / KeyHook . java 
 + + + / dev / null 
 @ @ - 1 , 67 + 0 , 0 @ @ 
 - import com . sun . jna . platform . win32 . Kernel32 ; 
 - import com . sun . jna . platform . win32 . User32 ; 
 - import com . sun . jna . platform . win32 . WinUser ; 
 - import com . sun . jna . platform . win32 . WinDef . HMODULE ; 
 - import com . sun . jna . platform . win32 . WinDef . LRESULT ; 
 - import com . sun . jna . platform . win32 . WinDef . WPARAM ; 
 - import com . sun . jna . platform . win32 . WinUser . HHOOK ; 
 - import com . sun . jna . platform . win32 . WinUser . KBDLLHOOKSTRUCT ; 
 - import com . sun . jna . platform . win32 . WinUser . LowLevelKeyboardProc ; 
 - import com . sun . jna . platform . win32 . WinUser . MSG ; 
 - 
 - / * * Sample implementation of a low - level keyboard hook on W32 . * / 
 - public class KeyHook { 
 - private static volatile boolean quit ; 
 - private static HHOOK hhk ; 
 - private static LowLevelKeyboardProc keyboardHook ; 
 - 
 - public static void main ( String [ ] args ) { 
 - final User32 lib = User32 . INSTANCE ; 
 - HMODULE hMod = Kernel32 . INSTANCE . GetModuleHandle ( null ) ; 
 - keyboardHook = new LowLevelKeyboardProc ( ) { 
 - public LRESULT callback ( int nCode , WPARAM wParam , KBDLLHOOKSTRUCT info ) { 
 - if ( nCode > = 0 ) { 
 - switch ( wParam . intValue ( ) ) { 
 - case WinUser . WM _ KEYUP : 
 - case WinUser . WM _ KEYDOWN : 
 - case WinUser . WM _ SYSKEYUP : 
 - case WinUser . WM _ SYSKEYDOWN : 
 - System . err . println ( " in callback , key = " + info . vkCode ) ; 
 - if ( info . vkCode = = 81 ) { 
 - quit = true ; 
 - } 
 - } 
 - } 
 - return lib . CallNextHookEx ( hhk , nCode , wParam , info . getPointer ( ) ) ; 
 - } 
 - } ; 
 - hhk = lib . SetWindowsHookEx ( WinUser . WH _ KEYBOARD _ LL , keyboardHook , hMod , 0 ) ; 
 - System . out . println ( " Keyboard hook installed , type anywhere , ' q ' to quit " ) ; 
 - new Thread ( ) { 
 - public void run ( ) { 
 - while ( ! quit ) { 
 - try { Thread . sleep ( 10 ) ; } catch ( Exception e ) { } 
 - } 
 - System . err . println ( " unhook and exit " ) ; 
 - lib . UnhookWindowsHookEx ( hhk ) ; 
 - System . exit ( 0 ) ; 
 - } 
 - } . start ( ) ; 
 - 
 - / / This bit never returns from GetMessage 
 - int result ; 
 - MSG msg = new MSG ( ) ; 
 - while ( ( result = lib . GetMessage ( msg , null , 0 , 0 ) ) ! = 0 ) { 
 - if ( result = = - 1 ) { 
 - System . err . println ( " error in get message " ) ; 
 - break ; 
 - } 
 - else { 
 - System . err . println ( " got message " ) ; 
 - lib . TranslateMessage ( msg ) ; 
 - lib . DispatchMessage ( msg ) ; 
 - } 
 - } 
 - lib . UnhookWindowsHookEx ( hhk ) ; 
 - } 
 - } 
 \ No newline at end of file 
 diff - - git a / contrib / w32keyhook / build . xml b / contrib / w32keyhook / build . xml 
 index 556f31a . . ece0955 100644 
 - - - a / contrib / w32keyhook / build . xml 
 + + + b / contrib / w32keyhook / build . xml 
 @ @ - 2 , 7 + 2 , 7 @ @ 
 < project name = " jnacontrib . w32keyhook " default = " jar " basedir = " . " > 
 < description > Builds , tests , and runs the project jnacontrib . w32keyhook . < / description > 
 < ! - - Locations - - > 
 - < property name = " src " location = " . " / > 
 + < property name = " src " location = " src " / > 
 < property name = " build " location = " build " / > 
 < property name = " jna - dist " location = " . . / . . / dist " / > 
 
 @ @ - 44 , 9 + 44 , 6 @ @ 
 < classpath > 
 < path refid = " classpath " / > 
 < / classpath > 
 - < src > 
 - < dirset dir = " $ { src } " / > 
 - < / src > 
 < / javac > 
 
 < ! - - Copy all non - java files to classes . - - > 
 diff - - git a / contrib / w32keyhook / src / KeyHook . java b / contrib / w32keyhook / src / KeyHook . java 
 new file mode 100644 
 index 0000000 . . bb0bb41 
 - - - / dev / null 
 + + + b / contrib / w32keyhook / src / KeyHook . java 
 @ @ - 0 , 0 + 1 , 67 @ @ 
 + import com . sun . jna . platform . win32 . Kernel32 ; 
 + import com . sun . jna . platform . win32 . User32 ; 
 + import com . sun . jna . platform . win32 . WinUser ; 
 + import com . sun . jna . platform . win32 . WinDef . HMODULE ; 
 + import com . sun . jna . platform . win32 . WinDef . LRESULT ; 
 + import com . sun . jna . platform . win32 . WinDef . WPARAM ; 
 + import com . sun . jna . platform . win32 . WinUser . HHOOK ; 
 + import com . sun . jna . platform . win32 . WinUser . KBDLLHOOKSTRUCT ; 
 + import com . sun . jna . platform . win32 . WinUser . LowLevelKeyboardProc ; 
 + import com . sun . jna . platform . win32 . WinUser . MSG ; 
 + 
 + / * * Sample implementation of a low - level keyboard hook on W32 . * / 
 + public class KeyHook { 
 + private static volatile boolean quit ; 
 + private static HHOOK hhk ; 
 + private static LowLevelKeyboardProc keyboardHook ; 
 + 
 + public static void main ( String [ ] args ) { 
 + final User32 lib = User32 . INSTANCE ; 
 + HMODULE hMod = Kernel32 . INSTANCE . GetModuleHandle ( null ) ; 
 + keyboardHook = new LowLevelKeyboardProc ( ) { 
 + public LRESULT callback ( int nCode , WPARAM wParam , KBDLLHOOKSTRUCT info ) { 
 + if ( nCode > = 0 ) { 
 + switch ( wParam . intValue ( ) ) { 
 + case WinUser . WM _ KEYUP : 
 + case WinUser . WM _ KEYDOWN : 
 + case WinUser . WM _ SYSKEYUP : 
 + case WinUser . WM _ SYSKEYDOWN : 
 + System . err . println ( " in callback , key = " + info . vkCode ) ; 
 + if ( info . vkCode = = 81 ) { 
 + quit = true ; 
 + } 
 + } 
 + } 
 + return lib . CallNextHookEx ( hhk , nCode , wParam , info . getPointer ( ) ) ; 
 + } 
 + } ; 
 + hhk = lib . SetWindowsHookEx ( WinUser . WH _ KEYBOARD _ LL , keyboardHook , hMod , 0 ) ; 
 + System . out . println ( " Keyboard hook installed , type anywhere , ' q ' to quit " ) ; 
 + new Thread ( ) { 
 + public void run ( ) { 
 + while ( ! quit ) { 
 + try { Thread . sleep ( 10 ) ; } catch ( Exception e ) { } 
 + } 
 + System . err . println ( " unhook and exit " ) ; 
 + lib . UnhookWindowsHookEx ( hhk ) ; 
 + System . exit ( 0 ) ; 
 + } 
 + } . start ( ) ; 
 + 
 + / / This bit never returns from GetMessage 
 + int result ; 
 + MSG msg = new MSG ( ) ; 
 + while ( ( result = lib . GetMessage ( msg , null , 0 , 0 ) ) ! = 0 ) { 
 + if ( result = = - 1 ) { 
 + System . err . println ( " error in get message " ) ; 
 + break ; 
 + } 
 + else { 
 + System . err . println ( " got message " ) ; 
 + lib . TranslateMessage ( msg ) ; 
 + lib . DispatchMessage ( msg ) ; 
 + } 
 + } 
 + lib . UnhookWindowsHookEx ( hhk ) ; 
 + } 
 + } 
 \ No newline at end of file
