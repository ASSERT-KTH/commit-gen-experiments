BLEU SCORE: 0.07160476144948855

TEST MSG: add performance test for getpid
GENERATED MSG: add alternate call convention handling to callbacks

TEST DIFF (one line): diff - - git a / native / testlib . c b / native / testlib . c <nl> index 9384ecf . . 7080d1d 100644 <nl> - - - a / native / testlib . c <nl> + + + b / native / testlib . c <nl> @ @ - 982 , 12 + 982 , 23 @ @ callManyArgsStdCallCallback ( void ( _ _ stdcall * func ) ( long , int , double , <nl> <nl> # include < jni . h > <nl> # include < math . h > <nl> + # include < sys / types . h > <nl> # include " dispatch . h " <nl> JNIEXPORT jdouble JNICALL <nl> - Java _ com _ sun _ jna _ PerformanceTest _ 00024JNIMathLibrary _ cos ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( cls ) , jdouble x ) { <nl> + Java _ com _ sun _ jna _ PerformanceTest _ 00024JNILibrary _ cos ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( cls ) , jdouble x ) { <nl> return cos ( x ) ; <nl> } <nl> <nl> + JNIEXPORT jint JNICALL <nl> + Java _ com _ sun _ jna _ PerformanceTest _ 00024JNILibrary _ getpid ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( cls ) ) { <nl> + # ifdef _ WIN32 <nl> + extern int _ getpid ( ) ; <nl> + return _ getpid ( ) ; <nl> + # else <nl> + return getpid ( ) ; <nl> + # endif <nl> + } <nl> + <nl> # ifdef _ _ cplusplus <nl> } <nl> # endif <nl> diff - - git a / test / com / sun / jna / PerformanceTest . java b / test / com / sun / jna / PerformanceTest . java <nl> index 49a348a . . f65c508 100644 <nl> - - - a / test / com / sun / jna / PerformanceTest . java <nl> + + + b / test / com / sun / jna / PerformanceTest . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { <nl> <nl> public void testEmpty ( ) { } <nl> <nl> - private static class JNIMathLibrary { <nl> + private static class JNILibrary { <nl> static { <nl> String path = TESTPATH + NativeLibrary . mapSharedLibraryName ( " testlib " ) ; ; <nl> if ( ! new File ( path ) . isAbsolute ( ) ) { <nl> @ @ - 39 , 6 + 39 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { <nl> } <nl> <nl> private static native double cos ( double x ) ; <nl> + private static native int getpid ( ) ; <nl> } <nl> <nl> public static void main ( java . lang . String [ ] argList ) { <nl> @ @ - 68 , 6 + 69 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { <nl> } <nl> } <nl> <nl> + public static native int getpid ( ) ; <nl> public static native Pointer memset ( Pointer p , int v , size _ t len ) ; <nl> public static native Pointer memset ( Pointer p , int v , int len ) ; <nl> public static native Pointer memset ( Pointer p , int v , long len ) ; <nl> @ @ - 84 , 6 + 86 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { <nl> } <nl> <nl> static interface CInterface extends Library { <nl> + int getpid ( ) ; <nl> Pointer memset ( Pointer p , int v , int len ) ; <nl> int strlen ( String s ) ; <nl> } <nl> @ @ - 168 , 7 + 171 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { <nl> <nl> start = System . currentTimeMillis ( ) ; <nl> for ( int i = 0 ; i < COUNT ; i + + ) { <nl> - dresult = JNIMathLibrary . cos ( 0d ) ; <nl> + dresult = JNILibrary . cos ( 0d ) ; <nl> } <nl> delta = System . currentTimeMillis ( ) - start ; <nl> System . out . println ( " cos ( JNI ) : " + delta + " ms " ) ; <nl> @ @ - 180 , 12 + 183 , 37 @ @ public class PerformanceTest extends TestCase implements Paths { <nl> delta = System . currentTimeMillis ( ) - start ; <nl> System . out . println ( " cos ( pure java ) : " + delta + " ms " ) ; <nl> <nl> - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> - / / memset <nl> Pointer presult ; <nl> String cname = Platform . C _ LIBRARY _ NAME ; <nl> CInterface clib = ( CInterface ) <nl> Native . loadLibrary ( cname , CInterface . class ) ; <nl> + <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / getpid <nl> + int pid ; <nl> + start = System . currentTimeMillis ( ) ; <nl> + for ( int i = 0 ; i < COUNT ; i + + ) { <nl> + pid = clib . getpid ( ) ; <nl> + } <nl> + delta = System . currentTimeMillis ( ) - start ; <nl> + System . out . println ( " getpid ( JNA interface ) : " + delta + " ms " ) ; <nl> + <nl> + start = System . currentTimeMillis ( ) ; <nl> + for ( int i = 0 ; i < COUNT ; i + + ) { <nl> + pid = CLibrary . getpid ( ) ; <nl> + } <nl> + delta = System . currentTimeMillis ( ) - start ; <nl> + System . out . println ( " getpid ( JNA direct ) : " + delta + " ms " ) ; <nl> + <nl> + start = System . currentTimeMillis ( ) ; <nl> + for ( int i = 0 ; i < COUNT ; i + + ) { <nl> + pid = JNILibrary . getpid ( ) ; <nl> + } <nl> + delta = System . currentTimeMillis ( ) - start ; <nl> + System . out . println ( " getpid ( JNI ) : " + delta + " ms " ) ; <nl> + <nl> + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / <nl> + / / memset <nl> start = System . currentTimeMillis ( ) ; <nl> for ( int i = 0 ; i < COUNT ; i + + ) { <nl> presult = clib . memset ( null , 0 , 0 ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / native / testlib . c b / native / testlib . c 
 index 9384ecf . . 7080d1d 100644 
 - - - a / native / testlib . c 
 + + + b / native / testlib . c 
 @ @ - 982 , 12 + 982 , 23 @ @ callManyArgsStdCallCallback ( void ( _ _ stdcall * func ) ( long , int , double , 
 
 # include < jni . h > 
 # include < math . h > 
 + # include < sys / types . h > 
 # include " dispatch . h " 
 JNIEXPORT jdouble JNICALL 
 - Java _ com _ sun _ jna _ PerformanceTest _ 00024JNIMathLibrary _ cos ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( cls ) , jdouble x ) { 
 + Java _ com _ sun _ jna _ PerformanceTest _ 00024JNILibrary _ cos ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( cls ) , jdouble x ) { 
 return cos ( x ) ; 
 } 
 
 + JNIEXPORT jint JNICALL 
 + Java _ com _ sun _ jna _ PerformanceTest _ 00024JNILibrary _ getpid ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( cls ) ) { 
 + # ifdef _ WIN32 
 + extern int _ getpid ( ) ; 
 + return _ getpid ( ) ; 
 + # else 
 + return getpid ( ) ; 
 + # endif 
 + } 
 + 
 # ifdef _ _ cplusplus 
 } 
 # endif 
 diff - - git a / test / com / sun / jna / PerformanceTest . java b / test / com / sun / jna / PerformanceTest . java 
 index 49a348a . . f65c508 100644 
 - - - a / test / com / sun / jna / PerformanceTest . java 
 + + + b / test / com / sun / jna / PerformanceTest . java 
 @ @ - 29 , 7 + 29 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { 
 
 public void testEmpty ( ) { } 
 
 - private static class JNIMathLibrary { 
 + private static class JNILibrary { 
 static { 
 String path = TESTPATH + NativeLibrary . mapSharedLibraryName ( " testlib " ) ; ; 
 if ( ! new File ( path ) . isAbsolute ( ) ) { 
 @ @ - 39 , 6 + 39 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { 
 } 
 
 private static native double cos ( double x ) ; 
 + private static native int getpid ( ) ; 
 } 
 
 public static void main ( java . lang . String [ ] argList ) { 
 @ @ - 68 , 6 + 69 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { 
 } 
 } 
 
 + public static native int getpid ( ) ; 
 public static native Pointer memset ( Pointer p , int v , size _ t len ) ; 
 public static native Pointer memset ( Pointer p , int v , int len ) ; 
 public static native Pointer memset ( Pointer p , int v , long len ) ; 
 @ @ - 84 , 6 + 86 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { 
 } 
 
 static interface CInterface extends Library { 
 + int getpid ( ) ; 
 Pointer memset ( Pointer p , int v , int len ) ; 
 int strlen ( String s ) ; 
 } 
 @ @ - 168 , 7 + 171 , 7 @ @ public class PerformanceTest extends TestCase implements Paths { 
 
 start = System . currentTimeMillis ( ) ; 
 for ( int i = 0 ; i < COUNT ; i + + ) { 
 - dresult = JNIMathLibrary . cos ( 0d ) ; 
 + dresult = JNILibrary . cos ( 0d ) ; 
 } 
 delta = System . currentTimeMillis ( ) - start ; 
 System . out . println ( " cos ( JNI ) : " + delta + " ms " ) ; 
 @ @ - 180 , 12 + 183 , 37 @ @ public class PerformanceTest extends TestCase implements Paths { 
 delta = System . currentTimeMillis ( ) - start ; 
 System . out . println ( " cos ( pure java ) : " + delta + " ms " ) ; 
 
 - / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 - / / memset 
 Pointer presult ; 
 String cname = Platform . C _ LIBRARY _ NAME ; 
 CInterface clib = ( CInterface ) 
 Native . loadLibrary ( cname , CInterface . class ) ; 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / getpid 
 + int pid ; 
 + start = System . currentTimeMillis ( ) ; 
 + for ( int i = 0 ; i < COUNT ; i + + ) { 
 + pid = clib . getpid ( ) ; 
 + } 
 + delta = System . currentTimeMillis ( ) - start ; 
 + System . out . println ( " getpid ( JNA interface ) : " + delta + " ms " ) ; 
 + 
 + start = System . currentTimeMillis ( ) ; 
 + for ( int i = 0 ; i < COUNT ; i + + ) { 
 + pid = CLibrary . getpid ( ) ; 
 + } 
 + delta = System . currentTimeMillis ( ) - start ; 
 + System . out . println ( " getpid ( JNA direct ) : " + delta + " ms " ) ; 
 + 
 + start = System . currentTimeMillis ( ) ; 
 + for ( int i = 0 ; i < COUNT ; i + + ) { 
 + pid = JNILibrary . getpid ( ) ; 
 + } 
 + delta = System . currentTimeMillis ( ) - start ; 
 + System . out . println ( " getpid ( JNI ) : " + delta + " ms " ) ; 
 + 
 + / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / 
 + / / memset 
 start = System . currentTimeMillis ( ) ; 
 for ( int i = 0 ; i < COUNT ; i + + ) { 
 presult = clib . memset ( null , 0 , 0 ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
