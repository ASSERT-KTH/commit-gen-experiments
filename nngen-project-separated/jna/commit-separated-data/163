BLEU SCORE: 0.040583489434387374

TEST MSG: Correct typemapper used for structures defined
GENERATED MSG: some changes to typelib parsing

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 1e01d5b . . 8407152 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 76 , 6 + 76 , 7 @ @ Bug Fixes <nl> * [ # 674 ] ( https : / / github . com / java - native - access / jna / pull / 674 ) : Update references to Apache License as requested by issue # 673 [ @ bhamail ] ( https : / / github . com / bhamail ) <nl> * [ # 636 ] ( https : / / github . com / java - native - access / jna / issues / 636 ) : Staticly link visual c + + runtime when building with MSVC - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 624 ] ( https : / / github . com / java - native - access / jna / issues / 624 ) : WinDef . DWORD getLow ( ) & getHigh ( ) using incorrect bit mask - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 668 ] ( https : / / github . com / java - native - access / jna / issues / 668 ) : Correct typemapper used for structures defined in ` com . sun . jna . platform . win32 . DsGetDC ` , ` com . sun . jna . platform . win32 . LMAccess ` , ` com . sun . jna . platform . win32 . LMShare ` , ` com . sun . jna . platform . win32 . Sspi ` , ` com . sun . jna . platform . win32 . WinBase ` , ` com . sun . jna . platform . win32 . WinCrypt ` , ` com . sun . jna . platform . win32 . WinUser ` and ` com . sun . jna . platform . win32 . Winnetwk ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Release 4 . 2 . 1 <nl> = = = = = = = = = = = = = <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / DsGetDC . java b / contrib / platform / src / com / sun / jna / platform / win32 / DsGetDC . java <nl> index cb2836a . . a979b41 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / DsGetDC . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / DsGetDC . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . platform . win32 . Guid . GUID ; <nl> import com . sun . jna . platform . win32 . WinNT . PSID ; <nl> + import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> / * * <nl> * Ported from DsGetDC . h . Windows SDK 6 . 0a <nl> @ @ - 107 , 11 + 108 , 11 @ @ public interface DsGetDC { <nl> public String ClientSiteName ; <nl> <nl> public DOMAIN _ CONTROLLER _ INFO ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> } <nl> <nl> public DOMAIN _ CONTROLLER _ INFO ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 235 , 11 + 236 , 11 @ @ public interface DsGetDC { <nl> } <nl> <nl> public DS _ DOMAIN _ TRUSTS ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> } <nl> <nl> public DS _ DOMAIN _ TRUSTS ( Pointer p ) { <nl> - super ( p ) ; <nl> + super ( p , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; <nl> read ( ) ; <nl> } <nl> } ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / LMAccess . java b / contrib / platform / src / com / sun / jna / platform / win32 / LMAccess . java <nl> index e0eb6ae . . dcaacf0 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / LMAccess . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / LMAccess . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ import java . util . List ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . platform . win32 . WinNT . PSID ; <nl> + import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> / * * <nl> * Ported from LMAccess . h . <nl> @ @ - 31 , 11 + 32 , 11 @ @ public interface LMAccess { <nl> public String lgrui0 _ name ; <nl> <nl> public LOCALGROUP _ INFO _ 0 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public LOCALGROUP _ INFO _ 0 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 52 , 11 + 53 , 11 @ @ public interface LMAccess { <nl> public String lgrui1 _ comment ; <nl> <nl> public LOCALGROUP _ INFO _ 1 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public LOCALGROUP _ INFO _ 1 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 88 , 11 + 89 , 11 @ @ public interface LMAccess { <nl> public String usri0 _ name ; <nl> <nl> public USER _ INFO _ 0 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public USER _ INFO _ 0 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 153 , 11 + 154 , 11 @ @ public interface LMAccess { <nl> public String usri1 _ script _ path ; <nl> <nl> public USER _ INFO _ 1 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public USER _ INFO _ 1 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 232 , 11 + 233 , 11 @ @ public interface LMAccess { <nl> public PSID . ByReference usri23 _ user _ sid ; <nl> <nl> public USER _ INFO _ 23 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public USER _ INFO _ 23 ( Pointer memory ) { <nl> - useMemory ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 257 , 11 + 258 , 11 @ @ public interface LMAccess { <nl> public String grui0 _ name ; <nl> <nl> public GROUP _ USERS _ INFO _ 0 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public GROUP _ USERS _ INFO _ 0 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 282 , 11 + 283 , 11 @ @ public interface LMAccess { <nl> public String lgrui0 _ name ; <nl> <nl> public LOCALGROUP _ USERS _ INFO _ 0 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public LOCALGROUP _ USERS _ INFO _ 0 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 311 , 11 + 312 , 11 @ @ public interface LMAccess { <nl> public String grpi0 _ name ; <nl> <nl> public GROUP _ INFO _ 0 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public GROUP _ INFO _ 0 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 345 , 11 + 346 , 11 @ @ public interface LMAccess { <nl> public String grpi1 _ comment ; <nl> <nl> public GROUP _ INFO _ 1 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public GROUP _ INFO _ 1 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 390 , 11 + 391 , 11 @ @ public interface LMAccess { <nl> public int grpi2 _ attributes ; <nl> <nl> public GROUP _ INFO _ 2 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public GROUP _ INFO _ 2 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 435 , 11 + 436 , 11 @ @ public interface LMAccess { <nl> public int grpi3 _ attributes ; <nl> <nl> public GROUP _ INFO _ 3 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public GROUP _ INFO _ 3 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / LMShare . java b / contrib / platform / src / com / sun / jna / platform / win32 / LMShare . java <nl> index 650b3f6 . . 72b03a3 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / LMShare . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / LMShare . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ import java . util . List ; <nl> <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> + import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> / * * <nl> * Ported from LMShare . h . <nl> @ @ - 118 , 11 + 119 , 11 @ @ public interface LMShare { <nl> public String shi2 _ passwd ; <nl> <nl> public SHARE _ INFO _ 2 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public SHARE _ INFO _ 2 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 202 , 11 + 203 , 11 @ @ public interface LMShare { <nl> public Pointer shi502 _ security _ descriptor ; <nl> <nl> public SHARE _ INFO _ 502 ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . UNICODE ) ; <nl> } <nl> <nl> public SHARE _ INFO _ 502 ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; <nl> read ( ) ; <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Sspi . java b / contrib / platform / src / com / sun / jna / platform / win32 / Sspi . java <nl> index be8ea16 . . 3ed3cb7 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Sspi . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Sspi . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ import java . util . List ; <nl> import com . sun . jna . Memory ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> + import com . sun . jna . TypeMapper ; <nl> + import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> / * * <nl> * Ported from Sspi . h . <nl> @ @ - 450 , 6 + 452 , 10 @ @ public interface Sspi { <nl> * / <nl> public String Comment ; <nl> <nl> + public SecPkgInfo ( ) { <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> + } <nl> + <nl> @ Override <nl> protected List < String > getFieldOrder ( ) { <nl> return FIELDS ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> index 7d78ed6 . . 51a8009 100755 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import com . sun . jna . Union ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> import com . sun . jna . ptr . ByteByReference ; <nl> import com . sun . jna . win32 . StdCallLibrary . StdCallCallback ; <nl> + import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> / * * <nl> * Ported from Winbase . h ( kernel32 . dll / kernel services ) . <nl> @ @ - 427 , 6 + 428 , 10 @ @ public interface WinBase extends WinDef , BaseTSD { <nl> public SYSTEMTIME DaylightDate ; <nl> public LONG DaylightBias ; <nl> <nl> + public TIME _ ZONE _ INFORMATION ( ) { <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> + } <nl> + <nl> @ Override <nl> protected List < String > getFieldOrder ( ) { <nl> return Arrays . asList ( new String [ ] { " Bias " , " StandardName " , " StandardDate " , " StandardBias " , " DaylightName " , " DaylightDate " , " DaylightBias " } ) ; <nl> @ @ - 902 , 6 + 907 , 7 @ @ public interface WinBase extends WinDef , BaseTSD { <nl> } <nl> <nl> public STARTUPINFO ( ) { <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> cb = new DWORD ( size ( ) ) ; <nl> } <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java <nl> index ba241dd . . 499d43b 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> + import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> / * * <nl> * Ported from WinCrypt . h . <nl> @ @ - 101 , 11 + 102 , 11 @ @ public interface WinCrypt { <nl> public String szPrompt ; <nl> <nl> public CRYPTPROTECT _ PROMPTSTRUCT ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> } <nl> <nl> public CRYPTPROTECT _ PROMPTSTRUCT ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; <nl> read ( ) ; <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java <nl> index 36ab452 . . e827d71 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import com . sun . jna . Union ; <nl> import com . sun . jna . platform . win32 . BaseTSD . ULONG _ PTR ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> import com . sun . jna . win32 . StdCallLibrary . StdCallCallback ; <nl> + import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> / * * <nl> * Ported from WinUser . h Microsoft Windows SDK 6 . 0A . <nl> @ @ - 1166 , 6 + 1167 , 7 @ @ public interface WinUser extends WinDef { <nl> * Instantiates a new wndclassex . <nl> * / <nl> public WNDCLASSEX ( ) { <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 1175 , 7 + 1177 , 7 @ @ public interface WinUser extends WinDef { <nl> * the memory <nl> * / <nl> public WNDCLASSEX ( Pointer memory ) { <nl> - super ( memory ) ; <nl> + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; <nl> read ( ) ; <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winnetwk . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winnetwk . java <nl> index 5a37ca6 . . 5efce2e 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winnetwk . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winnetwk . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ import java . util . List ; <nl> <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> + import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> / * * <nl> * Ported from AccCtrl . h . Microsoft Windows SDK 7 . 1 <nl> @ @ - 346 , 11 + 347 , 11 @ @ public abstract class Winnetwk { <nl> public String lpProvider ; <nl> <nl> public NETRESOURCE ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> } <nl> <nl> public NETRESOURCE ( Pointer address ) { <nl> - super ( address ) ; <nl> + super ( address , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 391 , 11 + 392 , 11 @ @ public abstract class Winnetwk { <nl> public String lpUniversalName ; <nl> <nl> public UNIVERSAL _ NAME _ INFO ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> } <nl> <nl> public UNIVERSAL _ NAME _ INFO ( Pointer address ) { <nl> - super ( address ) ; <nl> + super ( address , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; <nl> read ( ) ; <nl> } <nl> <nl> @ @ - 444 , 11 + 445 , 11 @ @ public abstract class Winnetwk { <nl> public String lpRemainingPath ; <nl> <nl> public REMOTE _ NAME _ INFO ( ) { <nl> - super ( ) ; <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> } <nl> <nl> public REMOTE _ NAME _ INFO ( Pointer address ) { <nl> - super ( address ) ; <nl> + super ( address , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; <nl> read ( ) ; <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java <nl> index e93481c . . dcccc64 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java <nl> @ @ - 18 , 7 + 18 , 6 @ @ import java . util . List ; <nl> import com . sun . jna . Memory ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> - import com . sun . jna . TypeMapper ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / MprTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / MprTest . java <nl> index c174136 . . 869eaf0 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / MprTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / MprTest . java <nl> @ @ - 39 , 6 + 39 , 12 @ @ public class MprTest extends TestCase { <nl> junit . textui . TestRunner . run ( MprTest . class ) ; <nl> } <nl> <nl> + public void testCreateLocalShare ( ) throws Exception { <nl> + File fileShareFolder = createTempFolder ( ) ; <nl> + String share = createLocalShare ( fileShareFolder ) ; <nl> + Netapi32 . INSTANCE . NetShareDel ( null , share , 0 ) ; <nl> + } <nl> + <nl> public void testWNetUseConnection ( ) throws Exception { <nl> / / First create a share on the local machine <nl> File fileShareFolder = createTempFolder ( ) ; <nl> @ @ - 262 , 10 + 268 , 11 @ @ public class MprTest extends TestCase { <nl> shi . write ( ) ; <nl> <nl> IntByReference parm _ err = new IntByReference ( 0 ) ; <nl> - assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetShareAdd ( null , / / Use <nl> - / / local <nl> - / / computer <nl> - 2 , shi . getPointer ( ) , parm _ err ) ) ; <nl> + int errorCode = Netapi32 . INSTANCE . NetShareAdd ( null , / / Use local computer <nl> + 2 , shi . getPointer ( ) , parm _ err ) ; <nl> + assertEquals ( <nl> + String . format ( " Failed to create share - errorCode : % d ( Param : % d ) " , errorCode , parm _ err . getValue ( ) ) , <nl> + LMErr . NERR _ Success , errorCode ) ; <nl> <nl> return shareFolder . getName ( ) ; <nl> } <nl> diff - - git a / src / com / sun / jna / win32 / W32APITypeMapper . java b / src / com / sun / jna / win32 / W32APITypeMapper . java <nl> index 98d193c . . 63b3e0d 100644 <nl> - - - a / src / com / sun / jna / win32 / W32APITypeMapper . java <nl> + + + b / src / com / sun / jna / win32 / W32APITypeMapper . java <nl> @ @ - 29 , 9 + 29 , 12 @ @ import com . sun . jna . WString ; <nl> * @ author twall <nl> * / <nl> public class W32APITypeMapper extends DefaultTypeMapper { <nl> - <nl> + / * * Standard TypeMapper to use the unicode version of a w32 API . * / <nl> public static final TypeMapper UNICODE = new W32APITypeMapper ( true ) ; <nl> + / * * Standard TypeMapper to use the ASCII / MBCS version of a w32 API . * / <nl> public static final TypeMapper ASCII = new W32APITypeMapper ( false ) ; <nl> + / * * Default TypeMapper to use - depends on the value of { @ code w32 . ascii } system property * / <nl> + public static final TypeMapper DEFAULT = Boolean . getBoolean ( " w32 . ascii " ) ? ASCII : UNICODE ; <nl> <nl> protected W32APITypeMapper ( boolean unicode ) { <nl> if ( unicode ) {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 1e01d5b . . 8407152 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 76 , 6 + 76 , 7 @ @ Bug Fixes 
 * [ # 674 ] ( https : / / github . com / java - native - access / jna / pull / 674 ) : Update references to Apache License as requested by issue # 673 [ @ bhamail ] ( https : / / github . com / bhamail ) 
 * [ # 636 ] ( https : / / github . com / java - native - access / jna / issues / 636 ) : Staticly link visual c + + runtime when building with MSVC - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 624 ] ( https : / / github . com / java - native - access / jna / issues / 624 ) : WinDef . DWORD getLow ( ) & getHigh ( ) using incorrect bit mask - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 668 ] ( https : / / github . com / java - native - access / jna / issues / 668 ) : Correct typemapper used for structures defined in ` com . sun . jna . platform . win32 . DsGetDC ` , ` com . sun . jna . platform . win32 . LMAccess ` , ` com . sun . jna . platform . win32 . LMShare ` , ` com . sun . jna . platform . win32 . Sspi ` , ` com . sun . jna . platform . win32 . WinBase ` , ` com . sun . jna . platform . win32 . WinCrypt ` , ` com . sun . jna . platform . win32 . WinUser ` and ` com . sun . jna . platform . win32 . Winnetwk ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Release 4 . 2 . 1 
 = = = = = = = = = = = = = 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / DsGetDC . java b / contrib / platform / src / com / sun / jna / platform / win32 / DsGetDC . java 
 index cb2836a . . a979b41 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / DsGetDC . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / DsGetDC . java 
 @ @ - 18 , 6 + 18 , 7 @ @ import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . platform . win32 . Guid . GUID ; 
 import com . sun . jna . platform . win32 . WinNT . PSID ; 
 + import com . sun . jna . win32 . W32APITypeMapper ; 
 
 / * * 
 * Ported from DsGetDC . h . Windows SDK 6 . 0a 
 @ @ - 107 , 11 + 108 , 11 @ @ public interface DsGetDC { 
 public String ClientSiteName ; 
 
 public DOMAIN _ CONTROLLER _ INFO ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 } 
 
 public DOMAIN _ CONTROLLER _ INFO ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; 
 read ( ) ; 
 } 
 
 @ @ - 235 , 11 + 236 , 11 @ @ public interface DsGetDC { 
 } 
 
 public DS _ DOMAIN _ TRUSTS ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 } 
 
 public DS _ DOMAIN _ TRUSTS ( Pointer p ) { 
 - super ( p ) ; 
 + super ( p , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; 
 read ( ) ; 
 } 
 } ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / LMAccess . java b / contrib / platform / src / com / sun / jna / platform / win32 / LMAccess . java 
 index e0eb6ae . . dcaacf0 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / LMAccess . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / LMAccess . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import java . util . List ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . platform . win32 . WinNT . PSID ; 
 + import com . sun . jna . win32 . W32APITypeMapper ; 
 
 / * * 
 * Ported from LMAccess . h . 
 @ @ - 31 , 11 + 32 , 11 @ @ public interface LMAccess { 
 public String lgrui0 _ name ; 
 
 public LOCALGROUP _ INFO _ 0 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public LOCALGROUP _ INFO _ 0 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 52 , 11 + 53 , 11 @ @ public interface LMAccess { 
 public String lgrui1 _ comment ; 
 
 public LOCALGROUP _ INFO _ 1 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public LOCALGROUP _ INFO _ 1 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 88 , 11 + 89 , 11 @ @ public interface LMAccess { 
 public String usri0 _ name ; 
 
 public USER _ INFO _ 0 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public USER _ INFO _ 0 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 153 , 11 + 154 , 11 @ @ public interface LMAccess { 
 public String usri1 _ script _ path ; 
 
 public USER _ INFO _ 1 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public USER _ INFO _ 1 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 232 , 11 + 233 , 11 @ @ public interface LMAccess { 
 public PSID . ByReference usri23 _ user _ sid ; 
 
 public USER _ INFO _ 23 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public USER _ INFO _ 23 ( Pointer memory ) { 
 - useMemory ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 257 , 11 + 258 , 11 @ @ public interface LMAccess { 
 public String grui0 _ name ; 
 
 public GROUP _ USERS _ INFO _ 0 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public GROUP _ USERS _ INFO _ 0 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 282 , 11 + 283 , 11 @ @ public interface LMAccess { 
 public String lgrui0 _ name ; 
 
 public LOCALGROUP _ USERS _ INFO _ 0 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public LOCALGROUP _ USERS _ INFO _ 0 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 311 , 11 + 312 , 11 @ @ public interface LMAccess { 
 public String grpi0 _ name ; 
 
 public GROUP _ INFO _ 0 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public GROUP _ INFO _ 0 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 345 , 11 + 346 , 11 @ @ public interface LMAccess { 
 public String grpi1 _ comment ; 
 
 public GROUP _ INFO _ 1 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public GROUP _ INFO _ 1 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 390 , 11 + 391 , 11 @ @ public interface LMAccess { 
 public int grpi2 _ attributes ; 
 
 public GROUP _ INFO _ 2 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public GROUP _ INFO _ 2 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 435 , 11 + 436 , 11 @ @ public interface LMAccess { 
 public int grpi3 _ attributes ; 
 
 public GROUP _ INFO _ 3 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public GROUP _ INFO _ 3 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / LMShare . java b / contrib / platform / src / com / sun / jna / platform / win32 / LMShare . java 
 index 650b3f6 . . 72b03a3 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / LMShare . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / LMShare . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import java . util . List ; 
 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 + import com . sun . jna . win32 . W32APITypeMapper ; 
 
 / * * 
 * Ported from LMShare . h . 
 @ @ - 118 , 11 + 119 , 11 @ @ public interface LMShare { 
 public String shi2 _ passwd ; 
 
 public SHARE _ INFO _ 2 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public SHARE _ INFO _ 2 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 @ @ - 202 , 11 + 203 , 11 @ @ public interface LMShare { 
 public Pointer shi502 _ security _ descriptor ; 
 
 public SHARE _ INFO _ 502 ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . UNICODE ) ; 
 } 
 
 public SHARE _ INFO _ 502 ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . UNICODE ) ; 
 read ( ) ; 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Sspi . java b / contrib / platform / src / com / sun / jna / platform / win32 / Sspi . java 
 index be8ea16 . . 3ed3cb7 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Sspi . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Sspi . java 
 @ @ - 17 , 6 + 17 , 8 @ @ import java . util . List ; 
 import com . sun . jna . Memory ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 + import com . sun . jna . TypeMapper ; 
 + import com . sun . jna . win32 . W32APITypeMapper ; 
 
 / * * 
 * Ported from Sspi . h . 
 @ @ - 450 , 6 + 452 , 10 @ @ public interface Sspi { 
 * / 
 public String Comment ; 
 
 + public SecPkgInfo ( ) { 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 + } 
 + 
 @ Override 
 protected List < String > getFieldOrder ( ) { 
 return FIELDS ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 index 7d78ed6 . . 51a8009 100755 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import com . sun . jna . Union ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 import com . sun . jna . ptr . ByteByReference ; 
 import com . sun . jna . win32 . StdCallLibrary . StdCallCallback ; 
 + import com . sun . jna . win32 . W32APITypeMapper ; 
 
 / * * 
 * Ported from Winbase . h ( kernel32 . dll / kernel services ) . 
 @ @ - 427 , 6 + 428 , 10 @ @ public interface WinBase extends WinDef , BaseTSD { 
 public SYSTEMTIME DaylightDate ; 
 public LONG DaylightBias ; 
 
 + public TIME _ ZONE _ INFORMATION ( ) { 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 + } 
 + 
 @ Override 
 protected List < String > getFieldOrder ( ) { 
 return Arrays . asList ( new String [ ] { " Bias " , " StandardName " , " StandardDate " , " StandardBias " , " DaylightName " , " DaylightDate " , " DaylightBias " } ) ; 
 @ @ - 902 , 6 + 907 , 7 @ @ public interface WinBase extends WinDef , BaseTSD { 
 } 
 
 public STARTUPINFO ( ) { 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 cb = new DWORD ( size ( ) ) ; 
 } 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java 
 index ba241dd . . 499d43b 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . platform . win32 . WinDef . HWND ; 
 + import com . sun . jna . win32 . W32APITypeMapper ; 
 
 / * * 
 * Ported from WinCrypt . h . 
 @ @ - 101 , 11 + 102 , 11 @ @ public interface WinCrypt { 
 public String szPrompt ; 
 
 public CRYPTPROTECT _ PROMPTSTRUCT ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 } 
 
 public CRYPTPROTECT _ PROMPTSTRUCT ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; 
 read ( ) ; 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java 
 index 36ab452 . . e827d71 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinUser . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import com . sun . jna . Union ; 
 import com . sun . jna . platform . win32 . BaseTSD . ULONG _ PTR ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 import com . sun . jna . win32 . StdCallLibrary . StdCallCallback ; 
 + import com . sun . jna . win32 . W32APITypeMapper ; 
 
 / * * 
 * Ported from WinUser . h Microsoft Windows SDK 6 . 0A . 
 @ @ - 1166 , 6 + 1167 , 7 @ @ public interface WinUser extends WinDef { 
 * Instantiates a new wndclassex . 
 * / 
 public WNDCLASSEX ( ) { 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 } 
 
 / * * 
 @ @ - 1175 , 7 + 1177 , 7 @ @ public interface WinUser extends WinDef { 
 * the memory 
 * / 
 public WNDCLASSEX ( Pointer memory ) { 
 - super ( memory ) ; 
 + super ( memory , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; 
 read ( ) ; 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winnetwk . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winnetwk . java 
 index 5a37ca6 . . 5efce2e 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winnetwk . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winnetwk . java 
 @ @ - 18 , 6 + 18 , 7 @ @ import java . util . List ; 
 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 + import com . sun . jna . win32 . W32APITypeMapper ; 
 
 / * * 
 * Ported from AccCtrl . h . Microsoft Windows SDK 7 . 1 
 @ @ - 346 , 11 + 347 , 11 @ @ public abstract class Winnetwk { 
 public String lpProvider ; 
 
 public NETRESOURCE ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 } 
 
 public NETRESOURCE ( Pointer address ) { 
 - super ( address ) ; 
 + super ( address , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; 
 read ( ) ; 
 } 
 
 @ @ - 391 , 11 + 392 , 11 @ @ public abstract class Winnetwk { 
 public String lpUniversalName ; 
 
 public UNIVERSAL _ NAME _ INFO ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 } 
 
 public UNIVERSAL _ NAME _ INFO ( Pointer address ) { 
 - super ( address ) ; 
 + super ( address , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; 
 read ( ) ; 
 } 
 
 @ @ - 444 , 11 + 445 , 11 @ @ public abstract class Winnetwk { 
 public String lpRemainingPath ; 
 
 public REMOTE _ NAME _ INFO ( ) { 
 - super ( ) ; 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 } 
 
 public REMOTE _ NAME _ INFO ( Pointer address ) { 
 - super ( address ) ; 
 + super ( address , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; 
 read ( ) ; 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java 
 index e93481c . . dcccc64 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java 
 @ @ - 18 , 7 + 18 , 6 @ @ import java . util . List ; 
 import com . sun . jna . Memory ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 - import com . sun . jna . TypeMapper ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 import com . sun . jna . win32 . W32APITypeMapper ; 
 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / MprTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / MprTest . java 
 index c174136 . . 869eaf0 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / MprTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / MprTest . java 
 @ @ - 39 , 6 + 39 , 12 @ @ public class MprTest extends TestCase { 
 junit . textui . TestRunner . run ( MprTest . class ) ; 
 } 
 
 + public void testCreateLocalShare ( ) throws Exception { 
 + File fileShareFolder = createTempFolder ( ) ; 
 + String share = createLocalShare ( fileShareFolder ) ; 
 + Netapi32 . INSTANCE . NetShareDel ( null , share , 0 ) ; 
 + } 
 + 
 public void testWNetUseConnection ( ) throws Exception { 
 / / First create a share on the local machine 
 File fileShareFolder = createTempFolder ( ) ; 
 @ @ - 262 , 10 + 268 , 11 @ @ public class MprTest extends TestCase { 
 shi . write ( ) ; 
 
 IntByReference parm _ err = new IntByReference ( 0 ) ; 
 - assertEquals ( LMErr . NERR _ Success , Netapi32 . INSTANCE . NetShareAdd ( null , / / Use 
 - / / local 
 - / / computer 
 - 2 , shi . getPointer ( ) , parm _ err ) ) ; 
 + int errorCode = Netapi32 . INSTANCE . NetShareAdd ( null , / / Use local computer 
 + 2 , shi . getPointer ( ) , parm _ err ) ; 
 + assertEquals ( 
 + String . format ( " Failed to create share - errorCode : % d ( Param : % d ) " , errorCode , parm _ err . getValue ( ) ) , 
 + LMErr . NERR _ Success , errorCode ) ; 
 
 return shareFolder . getName ( ) ; 
 } 
 diff - - git a / src / com / sun / jna / win32 / W32APITypeMapper . java b / src / com / sun / jna / win32 / W32APITypeMapper . java 
 index 98d193c . . 63b3e0d 100644 
 - - - a / src / com / sun / jna / win32 / W32APITypeMapper . java 
 + + + b / src / com / sun / jna / win32 / W32APITypeMapper . java 
 @ @ - 29 , 9 + 29 , 12 @ @ import com . sun . jna . WString ; 
 * @ author twall 
 * / 
 public class W32APITypeMapper extends DefaultTypeMapper { 
 - 
 + / * * Standard TypeMapper to use the unicode version of a w32 API . * / 
 public static final TypeMapper UNICODE = new W32APITypeMapper ( true ) ; 
 + / * * Standard TypeMapper to use the ASCII / MBCS version of a w32 API . * / 
 public static final TypeMapper ASCII = new W32APITypeMapper ( false ) ; 
 + / * * Default TypeMapper to use - depends on the value of { @ code w32 . ascii } system property * / 
 + public static final TypeMapper DEFAULT = Boolean . getBoolean ( " w32 . ascii " ) ? ASCII : UNICODE ; 
 
 protected W32APITypeMapper ( boolean unicode ) { 
 if ( unicode ) {

NEAREST DIFF:
ELIMINATEDSENTENCE
