BLEU SCORE: 0.041961149062965476

TEST MSG: Add unittest for XSI compliant behavior of strerror _ r
GENERATED MSG: add docs for lasterror , fix last error failure

TEST DIFF (one line): diff - - git a / build . xml b / build . xml <nl> index eed81b0 . . 877a9ce 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 1001 , 6 + 1001 , 7 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> < syspropertyset refid = " headless " / > <nl> < ! - - avoid VM conflicts with JNA protected mode - - > <nl> < env key = " $ { ld . preload . name } " file = " $ { libjsig } " / > <nl> + < env key = " LC _ MESSAGES " value = " C " / > <nl> < sysproperty key = " jna . library . path " file = " $ { build . native } " / > <nl> < ! - - Ignore any system install of JNA - - > <nl> < sysproperty key = " jna . nosys " value = " true " / > <nl> diff - - git a / test / com / sun / jna / unix / XsiComplianceTest . java b / test / com / sun / jna / unix / XsiComplianceTest . java <nl> new file mode 100644 <nl> index 0000000 . . 342e2f2 <nl> - - - / dev / null <nl> + + + b / test / com / sun / jna / unix / XsiComplianceTest . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + package com . sun . jna . unix ; <nl> + <nl> + import com . sun . jna . LastErrorException ; <nl> + import com . sun . jna . Library ; <nl> + import com . sun . jna . Memory ; <nl> + import com . sun . jna . Native ; <nl> + import com . sun . jna . Pointer ; <nl> + import junit . framework . TestCase ; <nl> + <nl> + public final class XsiComplianceTest extends TestCase { <nl> + <nl> + public static void main ( String [ ] args ) { <nl> + junit . textui . TestRunner . run ( XsiComplianceTest . class ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Regression test for https : / / github . com / java - native - access / jna / issues / 392 <nl> + * <nl> + * Depending on the toolchain on GCC / GLIBC the wrong definition of <nl> + * strerror _ r was included . <nl> + * <nl> + * This leads to broken messages . <nl> + * / <nl> + public void testErrorReporting ( ) { <nl> + boolean exceptionWasCaught = false ; <nl> + try { <nl> + INSTANCE . read ( Integer . MAX _ VALUE , new Memory ( 1024 ) , 1024 ) ; <nl> + } catch ( LastErrorException ex ) { <nl> + exceptionWasCaught = true ; <nl> + assertEquals ( " [ 9 ] Bad file descriptor " , ex . getMessage ( ) ) ; <nl> + assertEquals ( 9 , ex . getErrorCode ( ) ) ; <nl> + } <nl> + assertEquals ( true , exceptionWasCaught ) ; <nl> + } <nl> + <nl> + static POSIX INSTANCE = ( POSIX ) Native . loadLibrary ( POSIX . class ) ; <nl> + <nl> + interface POSIX extends Library { <nl> + <nl> + long read ( int fildes , Pointer buf , long nbyte ) throws LastErrorException ; <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / dist / w32ce - arm . jar b / dist / w32ce - arm . jar <nl> index a4880a5 . . ef6210b 100644 <nl> Binary files a / dist / w32ce - arm . jar and b / dist / w32ce - arm . jar differ <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index ae4322c . . ead5717 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 144 , 7 + 144 , 7 @ @ public final class Native { <nl> + " - set the system property jna . nosys = true " + LS <nl> + " - set jna . boot . library . path to include the path to the version of the " + LS + " jnidispatch library included with the JNA jar file you are using " + LS ) ; <nl> } <nl> - setPreserveLastError ( Boolean . parseBoolean ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; <nl> + setPreserveLastError ( " true " . equalsIgnoreCase ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; <nl> } <nl> <nl> / * * Force a dispose when this class is GC ' d . * / <nl> diff - - git a / src / com / sun / jna / overview . html b / src / com / sun / jna / overview . html <nl> index cda22a5 . . e953d6d 100644 <nl> - - - a / src / com / sun / jna / overview . html <nl> + + + b / src / com / sun / jna / overview . html <nl> @ @ - 731 , 7 + 731 , 7 @ @ of interest . <nl> < h3 > Throw exceptions on last error < / h3 > <nl> If you are interested in the value of errno / GetLastError ( ) , declare your <nl> method to throw LastErrorException , and call <nl> - { @ link com . sun . jna . Native # PreserveLastError PreserveLastError ( false ) } or set <nl> + { @ link com . sun . jna . Native # setPreserveLastError setPreserveLastError ( false ) } or set <nl> the System property < code > jna . preserve _ last _ error = false < / code > . <nl> < / body > <nl> < / html > <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index 14b3cf5 . . 96da062 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 906 , 10 + 906 , 10 @ @ public class CallbacksTest extends TestCase { <nl> assertEquals ( " Incorrect result of callback invocation " , - 2 , result , 0 ) ; <nl> } <nl> <nl> - protected void callCallback ( TestLibrary . VoidCallback cb , <nl> - CallbackThreadInitializer cti , <nl> - int repeat , int sleepms , <nl> - int [ ] called ) throws Exception { <nl> + protected void callThreadedCallback ( TestLibrary . VoidCallback cb , <nl> + CallbackThreadInitializer cti , <nl> + int repeat , int sleepms , <nl> + int [ ] called ) throws Exception { <nl> if ( cti ! = null ) { <nl> Native . setCallbackThreadInitializer ( cb , cti ) ; <nl> } <nl> @ @ - 942 , 13 + 942 , 13 @ @ public class CallbacksTest extends TestCase { <nl> + + called [ 0 ] ; <nl> } <nl> } ; <nl> - callCallback ( cb , null , 1 , 100 , called ) ; <nl> + callThreadedCallback ( cb , null , 1 , 100 , called ) ; <nl> <nl> assertFalse ( " Callback thread default should not be attached as daemon " , daemon [ 0 ] ) ; <nl> / / thread name and group are not defined <nl> } <nl> <nl> - public void XFAIL _ WCE _ testCustomizeCallbackThread ( ) throws Exception { <nl> + public void testCustomizeCallbackThread ( ) throws Exception { <nl> 	 final int [ ] called = { 0 } ; <nl> 	 final boolean [ ] daemon = { false } ; <nl> final String [ ] name = { null } ; <nl> @ @ - 961 , 22 + 961 , 26 @ @ public class CallbacksTest extends TestCase { <nl> TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { <nl> public void callback ( ) { <nl> Thread thread = Thread . currentThread ( ) ; <nl> + System . out . println ( " Callback called on " + thread ) ; <nl> daemon [ 0 ] = thread . isDaemon ( ) ; <nl> name [ 0 ] = thread . getName ( ) ; <nl> group [ 0 ] = thread . getThreadGroup ( ) ; <nl> t [ 0 ] = thread ; <nl> <nl> if ( called [ 0 ] = = 1 ) { <nl> + / / Allow the thread to exit <nl> + System . out . println ( " Callback detach " ) ; <nl> Native . detach ( true ) ; <nl> } <nl> + + called [ 0 ] ; <nl> } <nl> } ; <nl> - callCallback ( cb , init , 1 , 100 , called ) ; <nl> + callThreadedCallback ( cb , init , 1 , 100 , called ) ; <nl> <nl> assertTrue ( " Callback thread not attached as daemon " , daemon [ 0 ] ) ; <nl> assertEquals ( " Wrong thread name " , tname , name [ 0 ] ) ; <nl> assertEquals ( " Wrong thread group " , testGroup , group [ 0 ] ) ; <nl> + / / fails on wce <nl> assertTrue ( " Thread should still be alive " , t [ 0 ] . isAlive ( ) ) ; <nl> } <nl> <nl> @ @ - 998 , 7 + 1002 , 7 @ @ public class CallbacksTest extends TestCase { <nl> + + called [ 0 ] ; <nl> } <nl> } ; <nl> - callCallback ( cb , init , COUNT , 100 , called ) ; <nl> + callThreadedCallback ( cb , init , COUNT , 100 , called ) ; <nl> <nl> assertEquals ( " Native thread mapping not preserved : " + threads , <nl> 1 , threads . size ( ) ) ; <nl> @ @ - 1024 , 7 + 1028 , 7 @ @ public class CallbacksTest extends TestCase { <nl> called [ 0 ] = count ; <nl> } <nl> } ; <nl> - callCallback ( cb , null , COUNT , 100 , called ) ; <nl> + callThreadedCallback ( cb , null , COUNT , 100 , called ) ; <nl> <nl> assertEquals ( " Native thread mapping not preserved : " + threads , <nl> 1 , threads . size ( ) ) ;

TEST DIFF:
diff - - git a / build . xml b / build . xml 
 index eed81b0 . . 877a9ce 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 1001 , 6 + 1001 , 7 @ @ osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 < syspropertyset refid = " headless " / > 
 < ! - - avoid VM conflicts with JNA protected mode - - > 
 < env key = " $ { ld . preload . name } " file = " $ { libjsig } " / > 
 + < env key = " LC _ MESSAGES " value = " C " / > 
 < sysproperty key = " jna . library . path " file = " $ { build . native } " / > 
 < ! - - Ignore any system install of JNA - - > 
 < sysproperty key = " jna . nosys " value = " true " / > 
 diff - - git a / test / com / sun / jna / unix / XsiComplianceTest . java b / test / com / sun / jna / unix / XsiComplianceTest . java 
 new file mode 100644 
 index 0000000 . . 342e2f2 
 - - - / dev / null 
 + + + b / test / com / sun / jna / unix / XsiComplianceTest . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + package com . sun . jna . unix ; 
 + 
 + import com . sun . jna . LastErrorException ; 
 + import com . sun . jna . Library ; 
 + import com . sun . jna . Memory ; 
 + import com . sun . jna . Native ; 
 + import com . sun . jna . Pointer ; 
 + import junit . framework . TestCase ; 
 + 
 + public final class XsiComplianceTest extends TestCase { 
 + 
 + public static void main ( String [ ] args ) { 
 + junit . textui . TestRunner . run ( XsiComplianceTest . class ) ; 
 + } 
 + 
 + / * * 
 + * Regression test for https : / / github . com / java - native - access / jna / issues / 392 
 + * 
 + * Depending on the toolchain on GCC / GLIBC the wrong definition of 
 + * strerror _ r was included . 
 + * 
 + * This leads to broken messages . 
 + * / 
 + public void testErrorReporting ( ) { 
 + boolean exceptionWasCaught = false ; 
 + try { 
 + INSTANCE . read ( Integer . MAX _ VALUE , new Memory ( 1024 ) , 1024 ) ; 
 + } catch ( LastErrorException ex ) { 
 + exceptionWasCaught = true ; 
 + assertEquals ( " [ 9 ] Bad file descriptor " , ex . getMessage ( ) ) ; 
 + assertEquals ( 9 , ex . getErrorCode ( ) ) ; 
 + } 
 + assertEquals ( true , exceptionWasCaught ) ; 
 + } 
 + 
 + static POSIX INSTANCE = ( POSIX ) Native . loadLibrary ( POSIX . class ) ; 
 + 
 + interface POSIX extends Library { 
 + 
 + long read ( int fildes , Pointer buf , long nbyte ) throws LastErrorException ; 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / dist / w32ce - arm . jar b / dist / w32ce - arm . jar 
 index a4880a5 . . ef6210b 100644 
 Binary files a / dist / w32ce - arm . jar and b / dist / w32ce - arm . jar differ 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index ae4322c . . ead5717 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 144 , 7 + 144 , 7 @ @ public final class Native { 
 + " - set the system property jna . nosys = true " + LS 
 + " - set jna . boot . library . path to include the path to the version of the " + LS + " jnidispatch library included with the JNA jar file you are using " + LS ) ; 
 } 
 - setPreserveLastError ( Boolean . parseBoolean ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; 
 + setPreserveLastError ( " true " . equalsIgnoreCase ( System . getProperty ( " jna . preserve _ last _ error " , " true " ) ) ) ; 
 } 
 
 / * * Force a dispose when this class is GC ' d . * / 
 diff - - git a / src / com / sun / jna / overview . html b / src / com / sun / jna / overview . html 
 index cda22a5 . . e953d6d 100644 
 - - - a / src / com / sun / jna / overview . html 
 + + + b / src / com / sun / jna / overview . html 
 @ @ - 731 , 7 + 731 , 7 @ @ of interest . 
 < h3 > Throw exceptions on last error < / h3 > 
 If you are interested in the value of errno / GetLastError ( ) , declare your 
 method to throw LastErrorException , and call 
 - { @ link com . sun . jna . Native # PreserveLastError PreserveLastError ( false ) } or set 
 + { @ link com . sun . jna . Native # setPreserveLastError setPreserveLastError ( false ) } or set 
 the System property < code > jna . preserve _ last _ error = false < / code > . 
 < / body > 
 < / html > 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index 14b3cf5 . . 96da062 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 906 , 10 + 906 , 10 @ @ public class CallbacksTest extends TestCase { 
 assertEquals ( " Incorrect result of callback invocation " , - 2 , result , 0 ) ; 
 } 
 
 - protected void callCallback ( TestLibrary . VoidCallback cb , 
 - CallbackThreadInitializer cti , 
 - int repeat , int sleepms , 
 - int [ ] called ) throws Exception { 
 + protected void callThreadedCallback ( TestLibrary . VoidCallback cb , 
 + CallbackThreadInitializer cti , 
 + int repeat , int sleepms , 
 + int [ ] called ) throws Exception { 
 if ( cti ! = null ) { 
 Native . setCallbackThreadInitializer ( cb , cti ) ; 
 } 
 @ @ - 942 , 13 + 942 , 13 @ @ public class CallbacksTest extends TestCase { 
 + + called [ 0 ] ; 
 } 
 } ; 
 - callCallback ( cb , null , 1 , 100 , called ) ; 
 + callThreadedCallback ( cb , null , 1 , 100 , called ) ; 
 
 assertFalse ( " Callback thread default should not be attached as daemon " , daemon [ 0 ] ) ; 
 / / thread name and group are not defined 
 } 
 
 - public void XFAIL _ WCE _ testCustomizeCallbackThread ( ) throws Exception { 
 + public void testCustomizeCallbackThread ( ) throws Exception { 
 	 final int [ ] called = { 0 } ; 
 	 final boolean [ ] daemon = { false } ; 
 final String [ ] name = { null } ; 
 @ @ - 961 , 22 + 961 , 26 @ @ public class CallbacksTest extends TestCase { 
 TestLibrary . VoidCallback cb = new TestLibrary . VoidCallback ( ) { 
 public void callback ( ) { 
 Thread thread = Thread . currentThread ( ) ; 
 + System . out . println ( " Callback called on " + thread ) ; 
 daemon [ 0 ] = thread . isDaemon ( ) ; 
 name [ 0 ] = thread . getName ( ) ; 
 group [ 0 ] = thread . getThreadGroup ( ) ; 
 t [ 0 ] = thread ; 
 
 if ( called [ 0 ] = = 1 ) { 
 + / / Allow the thread to exit 
 + System . out . println ( " Callback detach " ) ; 
 Native . detach ( true ) ; 
 } 
 + + called [ 0 ] ; 
 } 
 } ; 
 - callCallback ( cb , init , 1 , 100 , called ) ; 
 + callThreadedCallback ( cb , init , 1 , 100 , called ) ; 
 
 assertTrue ( " Callback thread not attached as daemon " , daemon [ 0 ] ) ; 
 assertEquals ( " Wrong thread name " , tname , name [ 0 ] ) ; 
 assertEquals ( " Wrong thread group " , testGroup , group [ 0 ] ) ; 
 + / / fails on wce 
 assertTrue ( " Thread should still be alive " , t [ 0 ] . isAlive ( ) ) ; 
 } 
 
 @ @ - 998 , 7 + 1002 , 7 @ @ public class CallbacksTest extends TestCase { 
 + + called [ 0 ] ; 
 } 
 } ; 
 - callCallback ( cb , init , COUNT , 100 , called ) ; 
 + callThreadedCallback ( cb , init , COUNT , 100 , called ) ; 
 
 assertEquals ( " Native thread mapping not preserved : " + threads , 
 1 , threads . size ( ) ) ; 
 @ @ - 1024 , 7 + 1028 , 7 @ @ public class CallbacksTest extends TestCase { 
 called [ 0 ] = count ; 
 } 
 } ; 
 - callCallback ( cb , null , COUNT , 100 , called ) ; 
 + callThreadedCallback ( cb , null , COUNT , 100 , called ) ; 
 
 assertEquals ( " Native thread mapping not preserved : " + threads , 
 1 , threads . size ( ) ) ;
