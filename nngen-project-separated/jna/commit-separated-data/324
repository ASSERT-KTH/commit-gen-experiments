BLEU SCORE: 0.024455939372403628

TEST MSG: Fix compiler warnings on OSX , remove no - longer - supported JAWT operations from OSX
GENERATED MSG: Fixed a number if UNUSED warnings .

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 21aa85c . . 1f71ee0 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 30 , 6 + 30 , 9 @ @ Bug Fixes <nl> * Fixed ` com . sun . jna . platform . win32 . Variant ` and ` TlbImp ` - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . <nl> * Fixed ` com . sun . jna . Pointer . getWideStringArray ` not respecting the length parameter - [ @ csoren ] ( https : / / github . com / csoren ) . <nl> * Fix missing code in X11 demos - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Fix compiler warnings OSX - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Remove unsupported JAWT from OSX build - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * Disable WebStart tests - [ @ twall ] ( https : / / github . com / twall ) . <nl> <nl> Release 4 . 1 <nl> = = = = = = = = = = = <nl> diff - - git a / native / Makefile b / native / Makefile <nl> index 44d9320 . . 3e31ff3 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 348 , 7 + 348 , 8 @ @ endif <nl> endif <nl> <nl> PCFLAGS + = $ ( ISYSROOT ) - x objective - c <nl> - CDEFINES + = - DTARGET _ RT _ MAC _ CFM = 0 - DFFI _ MMAP _ EXEC _ WRIT <nl> + # JAWT no longer supported on OSX <nl> + CDEFINES + = - DTARGET _ RT _ MAC _ CFM = 0 - DFFI _ MMAP _ EXEC _ WRIT - DNO _ JAWT <nl> LDFLAGS = $ ( ARCHFLAGS ) - dynamiclib - o $ @ - framework JavaVM \ <nl> - compatibility _ version $ ( shell echo $ { JNA _ JNI _ VERSION } | sed ' s / ^ \ ( [ 0 - 9 ] [ 0 - 9 ] * \ ) . * / \ 1 / g ' ) \ <nl> - current _ version $ ( JNA _ JNI _ VERSION ) \ <nl> diff - - git a / native / callback . c b / native / callback . c <nl> index a4ccf5e . . c61284e 100644 <nl> - - - a / native / callback . c <nl> + + + b / native / callback . c <nl> @ @ - 93 , 10 + 93 , 19 @ @ static jclass classObject ; <nl> <nl> extern void println ( JNIEnv * , const char * ) ; <nl> <nl> + # if defined ( _ WIN32 ) & & ! defined ( _ WIN64 ) & & ! defined ( _ WIN32 _ WCE ) <nl> + # define HAS _ ALT _ CALLING _ CONVENTION <nl> + # endif <nl> + <nl> callback * <nl> create _ callback ( JNIEnv * env , jobject obj , jobject method , <nl> jobjectArray param _ types , jclass return _ type , <nl> - callconv _ t calling _ convention , jint options , <nl> + # ifdef HAS _ ALT _ CALLING _ CONVENTION <nl> + callconv _ t calling _ convention , <nl> + # else <nl> + callconv _ t UNUSED ( calling _ convention ) , <nl> + # endif <nl> + jint options , <nl> jstring encoding ) { <nl> jboolean direct = options & CB _ OPTION _ DIRECT ; <nl> jboolean in _ dll = options & CB _ OPTION _ IN _ DLL ; <nl> @ @ - 208 , 7 + 217 , 8 @ @ create _ callback ( JNIEnv * env , jobject obj , jobject method , <nl> } <nl> } <nl> <nl> - # if defined ( _ WIN32 ) & & ! defined ( _ WIN64 ) & & ! defined ( _ WIN32 _ WCE ) <nl> + # if HAS _ ALT _ CALLING _ CONVENTION <nl> + / / Currently only w32 stdcall is supported <nl> if ( calling _ convention = = CALLCONV _ STDCALL ) { <nl> abi = FFI _ STDCALL ; <nl> } <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index 426e4fb . . aa78577 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 2239 , 7 + 2239 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ write _ _ J _ 3SII <nl> * Signature : ( JB ) J <nl> * / <nl> JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Native _ indexOf _ _ JB <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jbyte value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jbyte value ) <nl> { <nl> jbyte * peer = ( jbyte * ) L2A ( addr ) ; <nl> volatile jlong i = 0 ; <nl> @ @ - 2350 , 7 + 2350 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ read _ _ J _ 3SII <nl> * Signature : ( J ) B <nl> * / <nl> JNIEXPORT jbyte JNICALL Java _ com _ sun _ jna _ Native _ getByte <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) <nl> { <nl> jbyte res = 0 ; <nl> MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; <nl> @ @ - 2363 , 7 + 2363 , 7 @ @ JNIEXPORT jbyte JNICALL Java _ com _ sun _ jna _ Native _ getByte <nl> * Signature : ( J ) C <nl> * / <nl> JNIEXPORT jchar JNICALL Java _ com _ sun _ jna _ Native _ getChar <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) <nl> { <nl> wchar _ t res = 0 ; <nl> MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; <nl> @ @ - 2376 , 7 + 2376 , 7 @ @ JNIEXPORT jchar JNICALL Java _ com _ sun _ jna _ Native _ getChar <nl> * Signature : ( J ) Lcom / sun / jna / Pointer ; <nl> * / <nl> JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Native _ _ 1getPointer <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) <nl> { <nl> void * ptr = NULL ; <nl> MEMCPY ( env , & ptr , L2A ( addr ) , sizeof ( ptr ) ) ; <nl> @ @ - 2404 , 7 + 2404 , 7 @ @ JNIEXPORT jobject JNICALL Java _ com _ sun _ jna _ Native _ getDirectByteBuffer <nl> * Signature : ( J ) D <nl> * / <nl> JNIEXPORT jdouble JNICALL Java _ com _ sun _ jna _ Native _ getDouble <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) <nl> { <nl> jdouble res = 0 ; <nl> MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; <nl> @ @ - 2417 , 7 + 2417 , 7 @ @ JNIEXPORT jdouble JNICALL Java _ com _ sun _ jna _ Native _ getDouble <nl> * Signature : ( J ) F <nl> * / <nl> JNIEXPORT jfloat JNICALL Java _ com _ sun _ jna _ Native _ getFloat <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) <nl> { <nl> jfloat res = 0 ; <nl> MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; <nl> @ @ - 2430 , 7 + 2430 , 7 @ @ JNIEXPORT jfloat JNICALL Java _ com _ sun _ jna _ Native _ getFloat <nl> * Signature : ( J ) I <nl> * / <nl> JNIEXPORT jint JNICALL Java _ com _ sun _ jna _ Native _ getInt <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) <nl> { <nl> jint res = 0 ; <nl> MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; <nl> @ @ - 2443 , 7 + 2443 , 7 @ @ JNIEXPORT jint JNICALL Java _ com _ sun _ jna _ Native _ getInt <nl> * Signature : ( J ) J <nl> * / <nl> JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Native _ getLong <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) <nl> { <nl> jlong res = 0 ; <nl> MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; <nl> @ @ - 2456 , 7 + 2456 , 7 @ @ JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Native _ getLong <nl> * Signature : ( J ) S <nl> * / <nl> JNIEXPORT jshort JNICALL Java _ com _ sun _ jna _ Native _ getShort <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) <nl> { <nl> jshort res = 0 ; <nl> MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; <nl> @ @ - 2504 , 7 + 2504 , 7 @ @ JNIEXPORT jbyteArray JNICALL Java _ com _ sun _ jna _ Native _ getStringBytes <nl> * Signature : ( JJB ) V <nl> * / <nl> JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setMemory <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jlong count , jbyte value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jlong count , jbyte value ) <nl> { <nl> MEMSET ( env , L2A ( addr ) , ( int ) value , ( size _ t ) count ) ; <nl> } <nl> @ @ - 2515 , 7 + 2515 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setMemory <nl> * Signature : ( JB ) V <nl> * / <nl> JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setByte <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jbyte value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jbyte value ) <nl> { <nl> MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; <nl> } <nl> @ @ - 2526 , 7 + 2526 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setByte <nl> * Signature : ( JC ) V <nl> * / <nl> JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setChar <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jchar value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jchar value ) <nl> { <nl> wchar _ t ch = value ; <nl> MEMCPY ( env , L2A ( addr ) , & ch , sizeof ( ch ) ) ; <nl> @ @ - 2538 , 7 + 2538 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setChar <nl> * Signature : ( JJ ) V <nl> * / <nl> JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setPointer <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jlong value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jlong value ) <nl> { <nl> void * ptr = L2A ( value ) ; <nl> MEMCPY ( env , L2A ( addr ) , & ptr , sizeof ( void * ) ) ; <nl> @ @ - 2550 , 7 + 2550 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setPointer <nl> * Signature : ( JD ) V <nl> * / <nl> JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setDouble <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jdouble value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jdouble value ) <nl> { <nl> MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; <nl> } <nl> @ @ - 2561 , 7 + 2561 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setDouble <nl> * Signature : ( JF ) V <nl> * / <nl> JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setFloat <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jfloat value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jfloat value ) <nl> { <nl> MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; <nl> } <nl> @ @ - 2572 , 7 + 2572 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setFloat <nl> * Signature : ( JI ) V <nl> * / <nl> JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setInt <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jint value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jint value ) <nl> { <nl> MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; <nl> } <nl> @ @ - 2583 , 7 + 2583 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setInt <nl> * Signature : ( JJ ) V <nl> * / <nl> JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setLong <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jlong value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jlong value ) <nl> { <nl> MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; <nl> } <nl> @ @ - 2594 , 7 + 2594 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setLong <nl> * Signature : ( JS ) V <nl> * / <nl> JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setShort <nl> - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jshort value ) <nl> + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jshort value ) <nl> { <nl> MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; <nl> } <nl> @ @ - 2884 , 7 + 2884 , 7 @ @ static jboolean ( JNICALL * pJAWT _ GetAWT ) ( JNIEnv * , JAWT * ) ; <nl> # endif / * NO _ JAWT * / <nl> <nl> JNIEXPORT jlong JNICALL <nl> - Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * env , jclass UNUSED ( classp ) , jobject w ) { <nl> + Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( classp ) , jobject UNUSED _ JAWT ( w ) ) { <nl> jlong handle = 0 ; <nl> # ifndef NO _ JAWT <nl> JAWT _ DrawingSurface * ds ; <nl> diff - - git a / native / dispatch . h b / native / dispatch . h <nl> index 602b304 . . 42fd0b0 100644 <nl> - - - a / native / dispatch . h <nl> + + + b / native / dispatch . h <nl> @ @ - 50 , 6 + 50 , 18 @ @ <nl> # endif <nl> # endif / * ! defined ( UNUSED ) * / <nl> <nl> + # if ! defined ( PROTECT ) <nl> + # define UNUSED _ ENV ( X ) UNUSED ( X ) <nl> + # else <nl> + # define UNUSED _ ENV ( X ) X <nl> + # endif / * PROTECT * / <nl> + <nl> + # ifdef NO _ JAWT <nl> + # define UNUSED _ JAWT ( X ) UNUSED ( X ) <nl> + # else <nl> + # define UNUSED _ JAWT ( X ) X <nl> + # endif <nl> + <nl> # ifdef _ _ cplusplus <nl> extern " C " { <nl> # endif <nl> diff - - git a / native / testlib . c b / native / testlib . c <nl> index 24df5a7 . . c615bff 100644 <nl> - - - a / native / testlib . c <nl> + + + b / native / testlib . c <nl> @ @ - 983 , 8 + 983 , 9 @ @ callBugCallback ( void ( _ _ stdcall * func ) ( long , int , double , <nl> <nl> # include < jni . h > <nl> # include < math . h > <nl> + # include " dispatch . h " <nl> JNIEXPORT jdouble JNICALL <nl> - Java _ com _ sun _ jna _ PerformanceTest _ 00024JNI _ cos ( JNIEnv * env , jclass cls , jdouble x ) { <nl> + Java _ com _ sun _ jna _ PerformanceTest _ 00024JNI _ cos ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( cls ) , jdouble x ) { <nl> return cos ( x ) ; <nl> } <nl> <nl> diff - - git a / src / com / sun / jna / Platform . java b / src / com / sun / jna / Platform . java <nl> index d4fc34f . . 593cba8 100644 <nl> - - - a / src / com / sun / jna / Platform . java <nl> + + + b / src / com / sun / jna / Platform . java <nl> @ @ - 33 , 6 + 33 , 8 @ @ public final class Platform { <nl> * running headless . <nl> * / <nl> public static final boolean HAS _ AWT ; <nl> + / * * Whether this platform supports the JAWT library . * / <nl> + public static final boolean HAS _ JAWT ; <nl> / * * Canonical name of this platform ' s math library . * / <nl> public static final String MATH _ LIBRARY _ NAME ; <nl> / * * Canonical name of this platform ' s C runtime library . * / <nl> @ @ - 104 , 6 + 106 , 7 @ @ public final class Platform { <nl> / / has the unintended side effect of actually loading AWT native libs , <nl> / / which can be problematic <nl> HAS _ AWT = osType ! = WINDOWSCE & & osType ! = ANDROID & & osType ! = AIX ; <nl> + HAS _ JAWT = HAS _ AWT & & osType ! = MAC ; <nl> HAS _ BUFFERS = hasBuffers ; <nl> RO _ FIELDS = osType ! = WINDOWSCE ; <nl> C _ LIBRARY _ NAME = osType = = WINDOWS ? " msvcrt " : osType = = WINDOWSCE ? " coredll " : " c " ; <nl> diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java <nl> index 8c00d95 . . 51de74a 100644 <nl> - - - a / test / com / sun / jna / LibraryLoadTest . java <nl> + + + b / test / com / sun / jna / LibraryLoadTest . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class LibraryLoadTest extends TestCase implements Paths { <nl> } <nl> <nl> public void testLoadJAWT ( ) { <nl> - if ( ! Platform . HAS _ AWT ) return ; <nl> + if ( ! Platform . HAS _ AWT | | ! Platform . HAS _ JAWT ) return ; <nl> <nl> if ( GraphicsEnvironment . isHeadless ( ) ) return ; <nl>
NEAREST DIFF (one line): diff - - git a / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / WinspoolTest . java b / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / WinspoolTest . java <nl> index b083241 . . a5e84ab 100644 <nl> - - - a / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / WinspoolTest . java <nl> + + + b / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / WinspoolTest . java <nl> @ @ - 31 , 17 + 31 , 18 @ @ public class WinspoolTest extends TestCase { <nl> 	 IntByReference pcReturned = new IntByReference ( ) ; <nl> 	 assertFalse ( Winspool . INSTANCE . EnumPrinters ( Winspool . PRINTER _ ENUM _ LOCAL , <nl> 	 	 	 null , 1 , null , 0 , pcbNeeded , pcReturned ) ) ; <nl> - 	 assertTrue ( pcbNeeded . getValue ( ) > 0 ) ; <nl> - 	 PRINTER _ INFO _ 1 pPrinterEnum = new PRINTER _ INFO _ 1 ( pcbNeeded . getValue ( ) ) ; <nl> - 	 assertTrue ( pcbNeeded . getValue ( ) > 0 ) ; <nl> 	 assertTrue ( pcReturned . getValue ( ) = = 0 ) ; <nl> - 	 assertTrue ( Winspool . INSTANCE . EnumPrinters ( Winspool . PRINTER _ ENUM _ LOCAL , <nl> - 	 	 	 null , 1 , pPrinterEnum . getPointer ( ) , pcbNeeded . getValue ( ) , pcbNeeded , pcReturned ) ) ; <nl> - 	 assertTrue ( pcReturned . getValue ( ) > = 0 ) ; <nl> - 	 PRINTER _ INFO _ 1 [ ] printerInfo = ( PRINTER _ INFO _ 1 [ ] ) pPrinterEnum . toArray ( pcReturned . getValue ( ) ) ; <nl> - 	 for ( PRINTER _ INFO _ 1 pi : printerInfo ) { <nl> - 	 	 assertTrue ( pi . pName = = null | | pi . pName . length ( ) > = 0 ) ; <nl> - 	 	 / / System . out . println ( pi . pName ) ; <nl> + 	 if ( pcbNeeded . getValue ( ) > 0 ) { <nl> + 	 	 PRINTER _ INFO _ 1 pPrinterEnum = new PRINTER _ INFO _ 1 ( pcbNeeded . getValue ( ) ) ; <nl> + 	 	 assertTrue ( pcbNeeded . getValue ( ) > 0 ) ; <nl> + 	 	 assertTrue ( Winspool . INSTANCE . EnumPrinters ( Winspool . PRINTER _ ENUM _ LOCAL , <nl> + 	 	 	 	 null , 1 , pPrinterEnum . getPointer ( ) , pcbNeeded . getValue ( ) , pcbNeeded , pcReturned ) ) ; <nl> + 	 	 assertTrue ( pcReturned . getValue ( ) > = 0 ) ; <nl> + 	 	 PRINTER _ INFO _ 1 [ ] printerInfo = ( PRINTER _ INFO _ 1 [ ] ) pPrinterEnum . toArray ( pcReturned . getValue ( ) ) ; <nl> + 	 	 for ( PRINTER _ INFO _ 1 pi : printerInfo ) { <nl> + 	 	 	 assertTrue ( pi . pName = = null | | pi . pName . length ( ) > = 0 ) ; <nl> + 	 	 	 / / System . out . println ( pi . pName ) ; <nl> + 	 	 } <nl> 	 } <nl> } <nl> }

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 21aa85c . . 1f71ee0 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 30 , 6 + 30 , 9 @ @ Bug Fixes 
 * Fixed ` com . sun . jna . platform . win32 . Variant ` and ` TlbImp ` - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . 
 * Fixed ` com . sun . jna . Pointer . getWideStringArray ` not respecting the length parameter - [ @ csoren ] ( https : / / github . com / csoren ) . 
 * Fix missing code in X11 demos - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Fix compiler warnings OSX - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Remove unsupported JAWT from OSX build - [ @ twall ] ( https : / / github . com / twall ) . 
 + * Disable WebStart tests - [ @ twall ] ( https : / / github . com / twall ) . 
 
 Release 4 . 1 
 = = = = = = = = = = = 
 diff - - git a / native / Makefile b / native / Makefile 
 index 44d9320 . . 3e31ff3 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 348 , 7 + 348 , 8 @ @ endif 
 endif 
 
 PCFLAGS + = $ ( ISYSROOT ) - x objective - c 
 - CDEFINES + = - DTARGET _ RT _ MAC _ CFM = 0 - DFFI _ MMAP _ EXEC _ WRIT 
 + # JAWT no longer supported on OSX 
 + CDEFINES + = - DTARGET _ RT _ MAC _ CFM = 0 - DFFI _ MMAP _ EXEC _ WRIT - DNO _ JAWT 
 LDFLAGS = $ ( ARCHFLAGS ) - dynamiclib - o $ @ - framework JavaVM \ 
 - compatibility _ version $ ( shell echo $ { JNA _ JNI _ VERSION } | sed ' s / ^ \ ( [ 0 - 9 ] [ 0 - 9 ] * \ ) . * / \ 1 / g ' ) \ 
 - current _ version $ ( JNA _ JNI _ VERSION ) \ 
 diff - - git a / native / callback . c b / native / callback . c 
 index a4ccf5e . . c61284e 100644 
 - - - a / native / callback . c 
 + + + b / native / callback . c 
 @ @ - 93 , 10 + 93 , 19 @ @ static jclass classObject ; 
 
 extern void println ( JNIEnv * , const char * ) ; 
 
 + # if defined ( _ WIN32 ) & & ! defined ( _ WIN64 ) & & ! defined ( _ WIN32 _ WCE ) 
 + # define HAS _ ALT _ CALLING _ CONVENTION 
 + # endif 
 + 
 callback * 
 create _ callback ( JNIEnv * env , jobject obj , jobject method , 
 jobjectArray param _ types , jclass return _ type , 
 - callconv _ t calling _ convention , jint options , 
 + # ifdef HAS _ ALT _ CALLING _ CONVENTION 
 + callconv _ t calling _ convention , 
 + # else 
 + callconv _ t UNUSED ( calling _ convention ) , 
 + # endif 
 + jint options , 
 jstring encoding ) { 
 jboolean direct = options & CB _ OPTION _ DIRECT ; 
 jboolean in _ dll = options & CB _ OPTION _ IN _ DLL ; 
 @ @ - 208 , 7 + 217 , 8 @ @ create _ callback ( JNIEnv * env , jobject obj , jobject method , 
 } 
 } 
 
 - # if defined ( _ WIN32 ) & & ! defined ( _ WIN64 ) & & ! defined ( _ WIN32 _ WCE ) 
 + # if HAS _ ALT _ CALLING _ CONVENTION 
 + / / Currently only w32 stdcall is supported 
 if ( calling _ convention = = CALLCONV _ STDCALL ) { 
 abi = FFI _ STDCALL ; 
 } 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index 426e4fb . . aa78577 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 2239 , 7 + 2239 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ write _ _ J _ 3SII 
 * Signature : ( JB ) J 
 * / 
 JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Native _ indexOf _ _ JB 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jbyte value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jbyte value ) 
 { 
 jbyte * peer = ( jbyte * ) L2A ( addr ) ; 
 volatile jlong i = 0 ; 
 @ @ - 2350 , 7 + 2350 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ read _ _ J _ 3SII 
 * Signature : ( J ) B 
 * / 
 JNIEXPORT jbyte JNICALL Java _ com _ sun _ jna _ Native _ getByte 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) 
 { 
 jbyte res = 0 ; 
 MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; 
 @ @ - 2363 , 7 + 2363 , 7 @ @ JNIEXPORT jbyte JNICALL Java _ com _ sun _ jna _ Native _ getByte 
 * Signature : ( J ) C 
 * / 
 JNIEXPORT jchar JNICALL Java _ com _ sun _ jna _ Native _ getChar 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) 
 { 
 wchar _ t res = 0 ; 
 MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; 
 @ @ - 2376 , 7 + 2376 , 7 @ @ JNIEXPORT jchar JNICALL Java _ com _ sun _ jna _ Native _ getChar 
 * Signature : ( J ) Lcom / sun / jna / Pointer ; 
 * / 
 JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Native _ _ 1getPointer 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) 
 { 
 void * ptr = NULL ; 
 MEMCPY ( env , & ptr , L2A ( addr ) , sizeof ( ptr ) ) ; 
 @ @ - 2404 , 7 + 2404 , 7 @ @ JNIEXPORT jobject JNICALL Java _ com _ sun _ jna _ Native _ getDirectByteBuffer 
 * Signature : ( J ) D 
 * / 
 JNIEXPORT jdouble JNICALL Java _ com _ sun _ jna _ Native _ getDouble 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) 
 { 
 jdouble res = 0 ; 
 MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; 
 @ @ - 2417 , 7 + 2417 , 7 @ @ JNIEXPORT jdouble JNICALL Java _ com _ sun _ jna _ Native _ getDouble 
 * Signature : ( J ) F 
 * / 
 JNIEXPORT jfloat JNICALL Java _ com _ sun _ jna _ Native _ getFloat 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) 
 { 
 jfloat res = 0 ; 
 MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; 
 @ @ - 2430 , 7 + 2430 , 7 @ @ JNIEXPORT jfloat JNICALL Java _ com _ sun _ jna _ Native _ getFloat 
 * Signature : ( J ) I 
 * / 
 JNIEXPORT jint JNICALL Java _ com _ sun _ jna _ Native _ getInt 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) 
 { 
 jint res = 0 ; 
 MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; 
 @ @ - 2443 , 7 + 2443 , 7 @ @ JNIEXPORT jint JNICALL Java _ com _ sun _ jna _ Native _ getInt 
 * Signature : ( J ) J 
 * / 
 JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Native _ getLong 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) 
 { 
 jlong res = 0 ; 
 MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; 
 @ @ - 2456 , 7 + 2456 , 7 @ @ JNIEXPORT jlong JNICALL Java _ com _ sun _ jna _ Native _ getLong 
 * Signature : ( J ) S 
 * / 
 JNIEXPORT jshort JNICALL Java _ com _ sun _ jna _ Native _ getShort 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr ) 
 { 
 jshort res = 0 ; 
 MEMCPY ( env , & res , L2A ( addr ) , sizeof ( res ) ) ; 
 @ @ - 2504 , 7 + 2504 , 7 @ @ JNIEXPORT jbyteArray JNICALL Java _ com _ sun _ jna _ Native _ getStringBytes 
 * Signature : ( JJB ) V 
 * / 
 JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setMemory 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jlong count , jbyte value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jlong count , jbyte value ) 
 { 
 MEMSET ( env , L2A ( addr ) , ( int ) value , ( size _ t ) count ) ; 
 } 
 @ @ - 2515 , 7 + 2515 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setMemory 
 * Signature : ( JB ) V 
 * / 
 JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setByte 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jbyte value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jbyte value ) 
 { 
 MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; 
 } 
 @ @ - 2526 , 7 + 2526 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setByte 
 * Signature : ( JC ) V 
 * / 
 JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setChar 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jchar value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jchar value ) 
 { 
 wchar _ t ch = value ; 
 MEMCPY ( env , L2A ( addr ) , & ch , sizeof ( ch ) ) ; 
 @ @ - 2538 , 7 + 2538 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setChar 
 * Signature : ( JJ ) V 
 * / 
 JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setPointer 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jlong value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jlong value ) 
 { 
 void * ptr = L2A ( value ) ; 
 MEMCPY ( env , L2A ( addr ) , & ptr , sizeof ( void * ) ) ; 
 @ @ - 2550 , 7 + 2550 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setPointer 
 * Signature : ( JD ) V 
 * / 
 JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setDouble 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jdouble value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jdouble value ) 
 { 
 MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; 
 } 
 @ @ - 2561 , 7 + 2561 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setDouble 
 * Signature : ( JF ) V 
 * / 
 JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setFloat 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jfloat value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jfloat value ) 
 { 
 MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; 
 } 
 @ @ - 2572 , 7 + 2572 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setFloat 
 * Signature : ( JI ) V 
 * / 
 JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setInt 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jint value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jint value ) 
 { 
 MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; 
 } 
 @ @ - 2583 , 7 + 2583 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setInt 
 * Signature : ( JJ ) V 
 * / 
 JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setLong 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jlong value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jlong value ) 
 { 
 MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; 
 } 
 @ @ - 2594 , 7 + 2594 , 7 @ @ JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setLong 
 * Signature : ( JS ) V 
 * / 
 JNIEXPORT void JNICALL Java _ com _ sun _ jna _ Native _ setShort 
 - ( JNIEnv * env , jclass UNUSED ( cls ) , jlong addr , jshort value ) 
 + ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( cls ) , jlong addr , jshort value ) 
 { 
 MEMCPY ( env , L2A ( addr ) , & value , sizeof ( value ) ) ; 
 } 
 @ @ - 2884 , 7 + 2884 , 7 @ @ static jboolean ( JNICALL * pJAWT _ GetAWT ) ( JNIEnv * , JAWT * ) ; 
 # endif / * NO _ JAWT * / 
 
 JNIEXPORT jlong JNICALL 
 - Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * env , jclass UNUSED ( classp ) , jobject w ) { 
 + Java _ com _ sun _ jna _ Native _ getWindowHandle0 ( JNIEnv * UNUSED _ ENV ( env ) , jclass UNUSED ( classp ) , jobject UNUSED _ JAWT ( w ) ) { 
 jlong handle = 0 ; 
 # ifndef NO _ JAWT 
 JAWT _ DrawingSurface * ds ; 
 diff - - git a / native / dispatch . h b / native / dispatch . h 
 index 602b304 . . 42fd0b0 100644 
 - - - a / native / dispatch . h 
 + + + b / native / dispatch . h 
 @ @ - 50 , 6 + 50 , 18 @ @ 
 # endif 
 # endif / * ! defined ( UNUSED ) * / 
 
 + # if ! defined ( PROTECT ) 
 + # define UNUSED _ ENV ( X ) UNUSED ( X ) 
 + # else 
 + # define UNUSED _ ENV ( X ) X 
 + # endif / * PROTECT * / 
 + 
 + # ifdef NO _ JAWT 
 + # define UNUSED _ JAWT ( X ) UNUSED ( X ) 
 + # else 
 + # define UNUSED _ JAWT ( X ) X 
 + # endif 
 + 
 # ifdef _ _ cplusplus 
 extern " C " { 
 # endif 
 diff - - git a / native / testlib . c b / native / testlib . c 
 index 24df5a7 . . c615bff 100644 
 - - - a / native / testlib . c 
 + + + b / native / testlib . c 
 @ @ - 983 , 8 + 983 , 9 @ @ callBugCallback ( void ( _ _ stdcall * func ) ( long , int , double , 
 
 # include < jni . h > 
 # include < math . h > 
 + # include " dispatch . h " 
 JNIEXPORT jdouble JNICALL 
 - Java _ com _ sun _ jna _ PerformanceTest _ 00024JNI _ cos ( JNIEnv * env , jclass cls , jdouble x ) { 
 + Java _ com _ sun _ jna _ PerformanceTest _ 00024JNI _ cos ( JNIEnv * UNUSED ( env ) , jclass UNUSED ( cls ) , jdouble x ) { 
 return cos ( x ) ; 
 } 
 
 diff - - git a / src / com / sun / jna / Platform . java b / src / com / sun / jna / Platform . java 
 index d4fc34f . . 593cba8 100644 
 - - - a / src / com / sun / jna / Platform . java 
 + + + b / src / com / sun / jna / Platform . java 
 @ @ - 33 , 6 + 33 , 8 @ @ public final class Platform { 
 * running headless . 
 * / 
 public static final boolean HAS _ AWT ; 
 + / * * Whether this platform supports the JAWT library . * / 
 + public static final boolean HAS _ JAWT ; 
 / * * Canonical name of this platform ' s math library . * / 
 public static final String MATH _ LIBRARY _ NAME ; 
 / * * Canonical name of this platform ' s C runtime library . * / 
 @ @ - 104 , 6 + 106 , 7 @ @ public final class Platform { 
 / / has the unintended side effect of actually loading AWT native libs , 
 / / which can be problematic 
 HAS _ AWT = osType ! = WINDOWSCE & & osType ! = ANDROID & & osType ! = AIX ; 
 + HAS _ JAWT = HAS _ AWT & & osType ! = MAC ; 
 HAS _ BUFFERS = hasBuffers ; 
 RO _ FIELDS = osType ! = WINDOWSCE ; 
 C _ LIBRARY _ NAME = osType = = WINDOWS ? " msvcrt " : osType = = WINDOWSCE ? " coredll " : " c " ; 
 diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java 
 index 8c00d95 . . 51de74a 100644 
 - - - a / test / com / sun / jna / LibraryLoadTest . java 
 + + + b / test / com / sun / jna / LibraryLoadTest . java 
 @ @ - 40 , 7 + 40 , 7 @ @ public class LibraryLoadTest extends TestCase implements Paths { 
 } 
 
 public void testLoadJAWT ( ) { 
 - if ( ! Platform . HAS _ AWT ) return ; 
 + if ( ! Platform . HAS _ AWT | | ! Platform . HAS _ JAWT ) return ; 
 
 if ( GraphicsEnvironment . isHeadless ( ) ) return ; 


NEAREST DIFF:
diff - - git a / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / WinspoolTest . java b / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / WinspoolTest . java 
 index b083241 . . a5e84ab 100644 
 - - - a / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / WinspoolTest . java 
 + + + b / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / WinspoolTest . java 
 @ @ - 31 , 17 + 31 , 18 @ @ public class WinspoolTest extends TestCase { 
 	 IntByReference pcReturned = new IntByReference ( ) ; 
 	 assertFalse ( Winspool . INSTANCE . EnumPrinters ( Winspool . PRINTER _ ENUM _ LOCAL , 
 	 	 	 null , 1 , null , 0 , pcbNeeded , pcReturned ) ) ; 
 - 	 assertTrue ( pcbNeeded . getValue ( ) > 0 ) ; 
 - 	 PRINTER _ INFO _ 1 pPrinterEnum = new PRINTER _ INFO _ 1 ( pcbNeeded . getValue ( ) ) ; 
 - 	 assertTrue ( pcbNeeded . getValue ( ) > 0 ) ; 
 	 assertTrue ( pcReturned . getValue ( ) = = 0 ) ; 
 - 	 assertTrue ( Winspool . INSTANCE . EnumPrinters ( Winspool . PRINTER _ ENUM _ LOCAL , 
 - 	 	 	 null , 1 , pPrinterEnum . getPointer ( ) , pcbNeeded . getValue ( ) , pcbNeeded , pcReturned ) ) ; 
 - 	 assertTrue ( pcReturned . getValue ( ) > = 0 ) ; 
 - 	 PRINTER _ INFO _ 1 [ ] printerInfo = ( PRINTER _ INFO _ 1 [ ] ) pPrinterEnum . toArray ( pcReturned . getValue ( ) ) ; 
 - 	 for ( PRINTER _ INFO _ 1 pi : printerInfo ) { 
 - 	 	 assertTrue ( pi . pName = = null | | pi . pName . length ( ) > = 0 ) ; 
 - 	 	 / / System . out . println ( pi . pName ) ; 
 + 	 if ( pcbNeeded . getValue ( ) > 0 ) { 
 + 	 	 PRINTER _ INFO _ 1 pPrinterEnum = new PRINTER _ INFO _ 1 ( pcbNeeded . getValue ( ) ) ; 
 + 	 	 assertTrue ( pcbNeeded . getValue ( ) > 0 ) ; 
 + 	 	 assertTrue ( Winspool . INSTANCE . EnumPrinters ( Winspool . PRINTER _ ENUM _ LOCAL , 
 + 	 	 	 	 null , 1 , pPrinterEnum . getPointer ( ) , pcbNeeded . getValue ( ) , pcbNeeded , pcReturned ) ) ; 
 + 	 	 assertTrue ( pcReturned . getValue ( ) > = 0 ) ; 
 + 	 	 PRINTER _ INFO _ 1 [ ] printerInfo = ( PRINTER _ INFO _ 1 [ ] ) pPrinterEnum . toArray ( pcReturned . getValue ( ) ) ; 
 + 	 	 for ( PRINTER _ INFO _ 1 pi : printerInfo ) { 
 + 	 	 	 assertTrue ( pi . pName = = null | | pi . pName . length ( ) > = 0 ) ; 
 + 	 	 	 / / System . out . println ( pi . pName ) ; 
 + 	 	 } 
 	 } 
 } 
 }
