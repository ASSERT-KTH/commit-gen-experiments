BLEU SCORE: 0.018738883683389617

TEST MSG: Implement Windows Mutex functions ( CreateMutex , OpenMutex , ReleaseMutex )
GENERATED MSG: GetProcessTimes and GetProcessIoCounters

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> index 0e9d1b1 . . 9016a16 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> @ @ - 3648 , 4 + 3648 , 136 @ @ public interface Kernel32 extends StdCallLibrary , WinNT , Wincon { <nl> * information , call GetLastError . <nl> * / <nl> boolean GetProcessIoCounters ( HANDLE hProcess , WinNT . IO _ COUNTERS lpIoCounters ) ; <nl> + <nl> + / * * <nl> + * Creates or opens a named or unnamed mutex object . <nl> + * <nl> + * @ param lpMutexAttributes <nl> + * <nl> + * A pointer to a { @ link WinBase . SECURITY _ ATTRIBUTES } structure . If this <nl> + * parameter is NULL , the mutex handle cannot be inherited by child <nl> + * processes . <nl> + * <nl> + * < p > <nl> + * The lpSecurityDescriptor member of the structure specifies a security <nl> + * descriptor for the new mutex . If lpMutexAttributes is NULL , the mutex <nl> + * gets a default security descriptor . The ACLs in the default security <nl> + * descriptor for a mutex come from the primary or impersonation token of <nl> + * the creator . < / p > <nl> + * <nl> + * @ param bInitialOwner <nl> + * <nl> + * If this value is TRUE and the caller created the mutex , the calling <nl> + * thread obtains initial ownership of the mutex object . Otherwise , the <nl> + * calling thread does not obtain ownership of the mutex . To determine if <nl> + * the caller created the mutex , see the Return Values section . <nl> + * <nl> + * @ param lpName <nl> + * <nl> + * The name of the mutex object . The name is limited to <nl> + * { @ link WinDef # MAX _ PATH } characters . Name comparison is case sensitive . <nl> + * <nl> + * < p > <nl> + * If lpName matches the name of an existing named mutex object , this <nl> + * function requests the { @ link WinBase # MUTEX _ ALL _ ACCESS } access right . In <nl> + * this case , the bInitialOwner parameter is ignored because it has already <nl> + * been set by the creating process . If the lpMutexAttributes parameter is <nl> + * not NULL , it determines whether the handle can be inherited , but its <nl> + * security - descriptor member is ignored . < / p > <nl> + * <nl> + * < p > <nl> + * If lpName is NULL , the mutex object is created without a name . < / p > <nl> + * <nl> + * < p > <nl> + * If lpName matches the name of an existing event , semaphore , waitable <nl> + * timer , job , or file - mapping object , the function fails and the <nl> + * { @ link com . sun . jna . Native # getLastError ( ) } function returns <nl> + * { @ link WinError # ERROR _ INVALID _ HANDLE } . This occurs because these objects <nl> + * share the same namespace . < / p > <nl> + * <nl> + * < p > <nl> + * The name can have a " Global \ " or " Local \ " prefix to explicitly create the <nl> + * object in the global or session namespace . The remainder of the name can <nl> + * contain any character except the backslash character ( \ ) . < / p > <nl> + * <nl> + * @ return <nl> + * <nl> + * If the function succeeds , the return value is a handle to the newly <nl> + * created mutex object . <nl> + * <nl> + * < p > <nl> + * If the function fails , the return value is NULL . To get extended error <nl> + * information , call { @ link com . sun . jna . Native # getLastError ( ) } . < / p > <nl> + * <nl> + * < p > If the mutex is a named mutex and the object existed before this function <nl> + * call , the return value is a handle to the existing object , <nl> + * { @ link com . sun . jna . Native # getLastError ( ) } returns <nl> + * { @ link WinError # ERROR _ ALREADY _ EXISTS } , bInitialOwner is ignored , and the <nl> + * calling thread is not granted ownership . However , if the caller has <nl> + * limited access rights , the function will fail with <nl> + * { @ link WinError # ERROR _ ACCESS _ DENIED } and the caller should use the <nl> + * { @ link # OpenMutex } function . < / p > <nl> + * / <nl> + HANDLE CreateMutex ( SECURITY _ ATTRIBUTES lpMutexAttributes , <nl> + boolean bInitialOwner , <nl> + String lpName ) ; <nl> + <nl> + / * * <nl> + * Opens an existing named mutex object . <nl> + * <nl> + * @ param dwDesiredAccess <nl> + * <nl> + * The access to the mutex object . Only the { @ link WinNT # SYNCHRONIZE } access <nl> + * right is required to use a mutex ; to change the mutex ' s security , specify <nl> + * { @ link WinBase # MUTEX _ ALL _ ACCESS } . <nl> + * <nl> + * @ param bInheritHandle <nl> + * <nl> + * If this value is TRUE , processes created by this process will inherit the <nl> + * handle . Otherwise , the processes do not inherit this handle . <nl> + * <nl> + * @ param lpName <nl> + * <nl> + * The name of the mutex to be opened . Name comparisons are case sensitive . <nl> + * <nl> + * < p > <nl> + * This function can open objects in a private namespace . < / p > <nl> + * <nl> + * < p > <nl> + * Terminal Services : The name can have a " Global \ " or " Local \ " prefix to <nl> + * explicitly open an object in the global or session namespace . The <nl> + * remainder of the name can contain any character except the backslash <nl> + * character ( \ ) . < / p > <nl> + * <nl> + * @ return <nl> + * <nl> + * If the function succeeds , the return value is a handle to the mutex object . <nl> + * <nl> + * < p > If the function fails , the return value is NULL . To get extended error <nl> + * information , call { @ link com . sun . jna . Native # getLastError ( ) } . < / p > <nl> + * <nl> + * < p > If a named mutex does not exist , the function fails and <nl> + * { @ link com . sun . jna . Native # getLastError ( ) } returns <nl> + * ERROR _ FILE _ NOT _ FOUND . < / p > <nl> + * / <nl> + HANDLE OpenMutex ( int dwDesiredAccess , <nl> + boolean bInheritHandle , <nl> + String lpName ) ; <nl> + <nl> + / * * <nl> + * Releases ownership of the specified mutex object . <nl> + * <nl> + * @ param handle <nl> + * <nl> + * A handle to the mutex object . The CreateMutex or OpenMutex function <nl> + * returns this handle . <nl> + * <nl> + * @ return <nl> + * <nl> + * If the function succeeds , the return value is nonzero . <nl> + * <nl> + * < p > If the function fails , the return value is zero . To get extended error <nl> + * information , call { @ link com . sun . jna . Native # getLastError ( ) } . < / p > <nl> + * / <nl> + boolean ReleaseMutex ( HANDLE handle ) ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> index da3a694 . . 027567a 100755 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> @ @ - 2557 , 4 + 2557 , 8 @ @ public interface WinBase extends WinDef , BaseTSD { <nl> * be set . <nl> * / <nl> int ES _ USER _ PRESENT = 0x00000004 ; <nl> + <nl> + <nl> + int MUTEX _ MODIFY _ STATE = WinNT . MUTANT _ QUERY _ STATE ; <nl> + int MUTEX _ ALL _ ACCESS = WinNT . MUTANT _ ALL _ ACCESS ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> index d2a7224 . . 920d327 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> @ @ - 76 , 6 + 76 , 10 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> <nl> int SPECIFIC _ RIGHTS _ ALL = 0x0000FFFF ; <nl> <nl> + int MUTANT _ QUERY _ STATE = 0x0001 ; <nl> + int MUTANT _ ALL _ ACCESS = STANDARD _ RIGHTS _ REQUIRED | SYNCHRONIZE <nl> + | MUTANT _ QUERY _ STATE ; <nl> + <nl> / / <nl> / / Token Specific Access Rights . <nl> / / <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> index bc9a485 . . e0bfe5c 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> @ @ - 67 , 6 + 67 , 8 @ @ import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFO ; <nl> import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . ptr . ShortByReference ; <nl> + import java . util . concurrent . CountDownLatch ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> import junit . framework . TestCase ; <nl> <nl> @ @ - 1696 , 4 + 1698 , 55 @ @ public class Kernel32Test extends TestCase { <nl> <nl> Kernel32 . INSTANCE . SetThreadExecutionState ( originalExecutionState ) ; <nl> } <nl> + <nl> + public void testMutex ( ) throws InterruptedException { <nl> + HANDLE mutexHandle = Kernel32 . INSTANCE . CreateMutex ( null , true , " JNA - Test - Mutex " ) ; <nl> + <nl> + assertNotNull ( mutexHandle ) ; <nl> + <nl> + final CountDownLatch preWait = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch postWait = new CountDownLatch ( 1 ) ; <nl> + final CountDownLatch postRelease = new CountDownLatch ( 1 ) ; <nl> + <nl> + final Exception [ ] exceptions = new Exception [ 1 ] ; <nl> + Thread t = new Thread ( ) { <nl> + @ Override <nl> + public void run ( ) { <nl> + try { <nl> + HANDLE mutexHandle2 = Kernel32 . INSTANCE . OpenMutex ( WinNT . SYNCHRONIZE , false , " JNA - Test - Mutex " ) ; <nl> + try { <nl> + assertNotNull ( mutexHandle2 ) ; <nl> + preWait . countDown ( ) ; <nl> + int result = Kernel32 . INSTANCE . WaitForSingleObject ( mutexHandle2 , WinBase . INFINITE ) ; <nl> + assertEquals ( result , WinBase . WAIT _ OBJECT _ 0 ) ; <nl> + postWait . countDown ( ) ; <nl> + } finally { <nl> + Kernel32 . INSTANCE . ReleaseMutex ( mutexHandle2 ) ; <nl> + Kernel32 . INSTANCE . CloseHandle ( mutexHandle2 ) ; <nl> + postRelease . countDown ( ) ; <nl> + } <nl> + } catch ( Exception ex ) { <nl> + exceptions [ 0 ] = ex ; <nl> + } <nl> + } <nl> + } ; <nl> + <nl> + t . start ( ) ; <nl> + <nl> + assertTrue ( preWait . await ( 2 , TimeUnit . SECONDS ) ) ; <nl> + <nl> + Kernel32 . INSTANCE . ReleaseMutex ( mutexHandle ) ; <nl> + <nl> + assertTrue ( postWait . await ( 2 , TimeUnit . SECONDS ) ) ; <nl> + <nl> + Kernel32 . INSTANCE . CloseHandle ( mutexHandle ) ; <nl> + <nl> + assertTrue ( postRelease . await ( 2 , TimeUnit . SECONDS ) ) ; <nl> + <nl> + assertNull ( exceptions [ 0 ] ) ; <nl> + <nl> + mutexHandle = Kernel32 . INSTANCE . OpenMutex ( WinNT . SYNCHRONIZE , false , " JNA - Test - Mutex " ) ; <nl> + <nl> + assertNull ( mutexHandle ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 index 0e9d1b1 . . 9016a16 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 @ @ - 3648 , 4 + 3648 , 136 @ @ public interface Kernel32 extends StdCallLibrary , WinNT , Wincon { 
 * information , call GetLastError . 
 * / 
 boolean GetProcessIoCounters ( HANDLE hProcess , WinNT . IO _ COUNTERS lpIoCounters ) ; 
 + 
 + / * * 
 + * Creates or opens a named or unnamed mutex object . 
 + * 
 + * @ param lpMutexAttributes 
 + * 
 + * A pointer to a { @ link WinBase . SECURITY _ ATTRIBUTES } structure . If this 
 + * parameter is NULL , the mutex handle cannot be inherited by child 
 + * processes . 
 + * 
 + * < p > 
 + * The lpSecurityDescriptor member of the structure specifies a security 
 + * descriptor for the new mutex . If lpMutexAttributes is NULL , the mutex 
 + * gets a default security descriptor . The ACLs in the default security 
 + * descriptor for a mutex come from the primary or impersonation token of 
 + * the creator . < / p > 
 + * 
 + * @ param bInitialOwner 
 + * 
 + * If this value is TRUE and the caller created the mutex , the calling 
 + * thread obtains initial ownership of the mutex object . Otherwise , the 
 + * calling thread does not obtain ownership of the mutex . To determine if 
 + * the caller created the mutex , see the Return Values section . 
 + * 
 + * @ param lpName 
 + * 
 + * The name of the mutex object . The name is limited to 
 + * { @ link WinDef # MAX _ PATH } characters . Name comparison is case sensitive . 
 + * 
 + * < p > 
 + * If lpName matches the name of an existing named mutex object , this 
 + * function requests the { @ link WinBase # MUTEX _ ALL _ ACCESS } access right . In 
 + * this case , the bInitialOwner parameter is ignored because it has already 
 + * been set by the creating process . If the lpMutexAttributes parameter is 
 + * not NULL , it determines whether the handle can be inherited , but its 
 + * security - descriptor member is ignored . < / p > 
 + * 
 + * < p > 
 + * If lpName is NULL , the mutex object is created without a name . < / p > 
 + * 
 + * < p > 
 + * If lpName matches the name of an existing event , semaphore , waitable 
 + * timer , job , or file - mapping object , the function fails and the 
 + * { @ link com . sun . jna . Native # getLastError ( ) } function returns 
 + * { @ link WinError # ERROR _ INVALID _ HANDLE } . This occurs because these objects 
 + * share the same namespace . < / p > 
 + * 
 + * < p > 
 + * The name can have a " Global \ " or " Local \ " prefix to explicitly create the 
 + * object in the global or session namespace . The remainder of the name can 
 + * contain any character except the backslash character ( \ ) . < / p > 
 + * 
 + * @ return 
 + * 
 + * If the function succeeds , the return value is a handle to the newly 
 + * created mutex object . 
 + * 
 + * < p > 
 + * If the function fails , the return value is NULL . To get extended error 
 + * information , call { @ link com . sun . jna . Native # getLastError ( ) } . < / p > 
 + * 
 + * < p > If the mutex is a named mutex and the object existed before this function 
 + * call , the return value is a handle to the existing object , 
 + * { @ link com . sun . jna . Native # getLastError ( ) } returns 
 + * { @ link WinError # ERROR _ ALREADY _ EXISTS } , bInitialOwner is ignored , and the 
 + * calling thread is not granted ownership . However , if the caller has 
 + * limited access rights , the function will fail with 
 + * { @ link WinError # ERROR _ ACCESS _ DENIED } and the caller should use the 
 + * { @ link # OpenMutex } function . < / p > 
 + * / 
 + HANDLE CreateMutex ( SECURITY _ ATTRIBUTES lpMutexAttributes , 
 + boolean bInitialOwner , 
 + String lpName ) ; 
 + 
 + / * * 
 + * Opens an existing named mutex object . 
 + * 
 + * @ param dwDesiredAccess 
 + * 
 + * The access to the mutex object . Only the { @ link WinNT # SYNCHRONIZE } access 
 + * right is required to use a mutex ; to change the mutex ' s security , specify 
 + * { @ link WinBase # MUTEX _ ALL _ ACCESS } . 
 + * 
 + * @ param bInheritHandle 
 + * 
 + * If this value is TRUE , processes created by this process will inherit the 
 + * handle . Otherwise , the processes do not inherit this handle . 
 + * 
 + * @ param lpName 
 + * 
 + * The name of the mutex to be opened . Name comparisons are case sensitive . 
 + * 
 + * < p > 
 + * This function can open objects in a private namespace . < / p > 
 + * 
 + * < p > 
 + * Terminal Services : The name can have a " Global \ " or " Local \ " prefix to 
 + * explicitly open an object in the global or session namespace . The 
 + * remainder of the name can contain any character except the backslash 
 + * character ( \ ) . < / p > 
 + * 
 + * @ return 
 + * 
 + * If the function succeeds , the return value is a handle to the mutex object . 
 + * 
 + * < p > If the function fails , the return value is NULL . To get extended error 
 + * information , call { @ link com . sun . jna . Native # getLastError ( ) } . < / p > 
 + * 
 + * < p > If a named mutex does not exist , the function fails and 
 + * { @ link com . sun . jna . Native # getLastError ( ) } returns 
 + * ERROR _ FILE _ NOT _ FOUND . < / p > 
 + * / 
 + HANDLE OpenMutex ( int dwDesiredAccess , 
 + boolean bInheritHandle , 
 + String lpName ) ; 
 + 
 + / * * 
 + * Releases ownership of the specified mutex object . 
 + * 
 + * @ param handle 
 + * 
 + * A handle to the mutex object . The CreateMutex or OpenMutex function 
 + * returns this handle . 
 + * 
 + * @ return 
 + * 
 + * If the function succeeds , the return value is nonzero . 
 + * 
 + * < p > If the function fails , the return value is zero . To get extended error 
 + * information , call { @ link com . sun . jna . Native # getLastError ( ) } . < / p > 
 + * / 
 + boolean ReleaseMutex ( HANDLE handle ) ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 index da3a694 . . 027567a 100755 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 @ @ - 2557 , 4 + 2557 , 8 @ @ public interface WinBase extends WinDef , BaseTSD { 
 * be set . 
 * / 
 int ES _ USER _ PRESENT = 0x00000004 ; 
 + 
 + 
 + int MUTEX _ MODIFY _ STATE = WinNT . MUTANT _ QUERY _ STATE ; 
 + int MUTEX _ ALL _ ACCESS = WinNT . MUTANT _ ALL _ ACCESS ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 index d2a7224 . . 920d327 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 @ @ - 76 , 6 + 76 , 10 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 
 int SPECIFIC _ RIGHTS _ ALL = 0x0000FFFF ; 
 
 + int MUTANT _ QUERY _ STATE = 0x0001 ; 
 + int MUTANT _ ALL _ ACCESS = STANDARD _ RIGHTS _ REQUIRED | SYNCHRONIZE 
 + | MUTANT _ QUERY _ STATE ; 
 + 
 / / 
 / / Token Specific Access Rights . 
 / / 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 index bc9a485 . . e0bfe5c 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 @ @ - 67 , 6 + 67 , 8 @ @ import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFO ; 
 import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX ; 
 import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . ptr . ShortByReference ; 
 + import java . util . concurrent . CountDownLatch ; 
 + import java . util . concurrent . TimeUnit ; 
 
 import junit . framework . TestCase ; 
 
 @ @ - 1696 , 4 + 1698 , 55 @ @ public class Kernel32Test extends TestCase { 
 
 Kernel32 . INSTANCE . SetThreadExecutionState ( originalExecutionState ) ; 
 } 
 + 
 + public void testMutex ( ) throws InterruptedException { 
 + HANDLE mutexHandle = Kernel32 . INSTANCE . CreateMutex ( null , true , " JNA - Test - Mutex " ) ; 
 + 
 + assertNotNull ( mutexHandle ) ; 
 + 
 + final CountDownLatch preWait = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch postWait = new CountDownLatch ( 1 ) ; 
 + final CountDownLatch postRelease = new CountDownLatch ( 1 ) ; 
 + 
 + final Exception [ ] exceptions = new Exception [ 1 ] ; 
 + Thread t = new Thread ( ) { 
 + @ Override 
 + public void run ( ) { 
 + try { 
 + HANDLE mutexHandle2 = Kernel32 . INSTANCE . OpenMutex ( WinNT . SYNCHRONIZE , false , " JNA - Test - Mutex " ) ; 
 + try { 
 + assertNotNull ( mutexHandle2 ) ; 
 + preWait . countDown ( ) ; 
 + int result = Kernel32 . INSTANCE . WaitForSingleObject ( mutexHandle2 , WinBase . INFINITE ) ; 
 + assertEquals ( result , WinBase . WAIT _ OBJECT _ 0 ) ; 
 + postWait . countDown ( ) ; 
 + } finally { 
 + Kernel32 . INSTANCE . ReleaseMutex ( mutexHandle2 ) ; 
 + Kernel32 . INSTANCE . CloseHandle ( mutexHandle2 ) ; 
 + postRelease . countDown ( ) ; 
 + } 
 + } catch ( Exception ex ) { 
 + exceptions [ 0 ] = ex ; 
 + } 
 + } 
 + } ; 
 + 
 + t . start ( ) ; 
 + 
 + assertTrue ( preWait . await ( 2 , TimeUnit . SECONDS ) ) ; 
 + 
 + Kernel32 . INSTANCE . ReleaseMutex ( mutexHandle ) ; 
 + 
 + assertTrue ( postWait . await ( 2 , TimeUnit . SECONDS ) ) ; 
 + 
 + Kernel32 . INSTANCE . CloseHandle ( mutexHandle ) ; 
 + 
 + assertTrue ( postRelease . await ( 2 , TimeUnit . SECONDS ) ) ; 
 + 
 + assertNull ( exceptions [ 0 ] ) ; 
 + 
 + mutexHandle = Kernel32 . INSTANCE . OpenMutex ( WinNT . SYNCHRONIZE , false , " JNA - Test - Mutex " ) ; 
 + 
 + assertNull ( mutexHandle ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
