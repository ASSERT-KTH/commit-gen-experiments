BLEU SCORE: 0.0156963464356626

TEST MSG: expand test coverage
GENERATED MSG: Improve error messages when illegal argument / return types are used

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index b5eb3a7 . . f5b09c7 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 1101 , 7 + 1101 , 7 @ @ public final class Native implements Version { <nl> * @ param libName library name to which functions should be bound <nl> * / <nl> public static void register ( String libName ) { <nl> - register ( getNativeClass ( getCallingClass ( ) ) , libName ) ; <nl> + register ( findDirectMappedClass ( getCallingClass ( ) ) , libName ) ; <nl> } <nl> <nl> / * * When called from a class static initializer , maps all native methods <nl> @ @ - 1110 , 11 + 1110 , 11 @ @ public final class Native implements Version { <nl> * @ param lib native library to which functions should be bound <nl> * / <nl> public static void register ( NativeLibrary lib ) { <nl> - register ( getNativeClass ( getCallingClass ( ) ) , lib ) ; <nl> + register ( findDirectMappedClass ( getCallingClass ( ) ) , lib ) ; <nl> } <nl> <nl> / * * Find the nearest enclosing class with native methods . * / <nl> - static Class getNativeClass ( Class cls ) { <nl> + static Class findDirectMappedClass ( Class cls ) { <nl> Method [ ] methods = cls . getDeclaredMethods ( ) ; <nl> for ( int i = 0 ; i < methods . length ; i + + ) { <nl> if ( ( methods [ i ] . getModifiers ( ) & Modifier . NATIVE ) ! = 0 ) { <nl> @ @ - 1125 , 7 + 1125 , 7 @ @ public final class Native implements Version { <nl> if ( idx ! = - 1 ) { <nl> String name = cls . getName ( ) . substring ( 0 , idx ) ; <nl> try { <nl> - return getNativeClass ( Class . forName ( name , true , cls . getClassLoader ( ) ) ) ; <nl> + return findDirectMappedClass ( Class . forName ( name , true , cls . getClassLoader ( ) ) ) ; <nl> } <nl> catch ( ClassNotFoundException e ) { <nl> } <nl> @ @ - 1180 , 7 + 1180 , 7 @ @ public final class Native implements Version { <nl> to be garbage collected . <nl> * / <nl> public static void unregister ( ) { <nl> - unregister ( getNativeClass ( getCallingClass ( ) ) ) ; <nl> + unregister ( findDirectMappedClass ( getCallingClass ( ) ) ) ; <nl> } <nl> <nl> / * * Remove all native mappings for the given class . <nl> diff - - git a / test / com / sun / jna / DirectTest . java b / test / com / sun / jna / DirectTest . java <nl> index 7fa5a28 . . 36e578a 100644 <nl> - - - a / test / com / sun / jna / DirectTest . java <nl> + + + b / test / com / sun / jna / DirectTest . java <nl> @ @ - 125 , 7 + 125 , 6 @ @ public class DirectTest extends TestCase implements Paths { <nl> } <nl> } <nl> <nl> - / / Fails under clover <nl> public void testRegisterMethods ( ) throws Exception { <nl> / / Use a dedicated class loader to ensure the class can be gc ' d <nl> String name = " com . sun . jna . DirectTest $ MathLibrary " ; <nl> @ @ - 159 , 20 + 158 , 20 @ @ public class DirectTest extends TestCase implements Paths { <nl> public void testFindNativeClass ( ) { <nl> class UnregisterLibrary { <nl> class Inner { <nl> - public Class getNativeClass ( ) { <nl> - return getNativeClassInner ( ) ; <nl> + public Class findDirectMappedClass ( ) { <nl> + return findDirectMappedClassInner ( ) ; <nl> } <nl> - public Class getNativeClassInner ( ) { <nl> - return Native . getNativeClass ( Native . getCallingClass ( ) ) ; <nl> + public Class findDirectMappedClassInner ( ) { <nl> + return Native . findDirectMappedClass ( Native . getCallingClass ( ) ) ; <nl> } ; <nl> } <nl> public native double cos ( double x ) ; <nl> - public Class getNativeClass ( ) { <nl> - return new Inner ( ) . getNativeClass ( ) ; <nl> + public Class findDirectMappedClass ( ) { <nl> + return new Inner ( ) . findDirectMappedClass ( ) ; <nl> } ; <nl> } <nl> assertEquals ( " Wrong native class found " , <nl> - UnregisterLibrary . class , new UnregisterLibrary ( ) . getNativeClass ( ) ) ; <nl> + UnregisterLibrary . class , new UnregisterLibrary ( ) . findDirectMappedClass ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java <nl> index 3bf2456 . . a736ad0 100644 <nl> - - - a / test / com / sun / jna / JNAUnloadTest . java <nl> + + + b / test / com / sun / jna / JNAUnloadTest . java <nl> @ @ - 100 , 7 + 100 , 6 @ @ public class JNAUnloadTest extends TestCase implements Paths { <nl> } <nl> } <nl> <nl> - / / GC Fails under clover <nl> public void testLoadAndUnloadFromJar ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( true ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> @ @ - 154 , 7 + 153 , 7 @ @ public class JNAUnloadTest extends TestCase implements Paths { <nl> } <nl> } <nl> <nl> - / / GC Fails under clover and OpenJDK ( linux / ppc ) <nl> + / / GC Fails under OpenJDK ( linux / ppc ) <nl> public void testLoadAndUnloadFromResourcePath ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( false ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java <nl> index 7d099f7 . . 16a654c 100644 <nl> - - - a / test / com / sun / jna / LibraryLoadTest . java <nl> + + + b / test / com / sun / jna / LibraryLoadTest . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; <nl> import java . net . MalformedURLException ; <nl> import java . net . URL ; <nl> import java . net . URLClassLoader ; <nl> + import java . util . Collections ; <nl> <nl> import junit . framework . TestCase ; <nl> <nl> @ @ - 110 , 6 + 111 , 14 @ @ public class LibraryLoadTest extends TestCase implements Paths { <nl> return Native . loadLibrary ( Platform . C _ LIBRARY _ NAME , CLibrary . class ) ; <nl> } <nl> <nl> + public void testLoadProcess ( ) { <nl> + Native . loadLibrary ( CLibrary . class ) ; <nl> + } <nl> + <nl> + public void testLoadProcessWithOptions ( ) { <nl> + Native . loadLibrary ( CLibrary . class , Collections . EMPTY _ MAP ) ; <nl> + } <nl> + <nl> public void testLoadCLibrary ( ) { <nl> load ( ) ; <nl> } <nl> diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java <nl> index 87ecdd2 . . ce717e0 100644 <nl> - - - a / test / com / sun / jna / NativeTest . java <nl> + + + b / test / com / sun / jna / NativeTest . java <nl> @ @ - 417 , 6 + 417 , 45 @ @ public class NativeTest extends TestCase { <nl> } <nl> } <nl> <nl> + private static final String NUL = " \ 0 " ; <nl> + public void testStringConversion ( ) { <nl> + byte [ ] buf = ( getName ( ) + NUL ) . getBytes ( ) ; <nl> + assertEquals ( " C string improperly converted " , getName ( ) , Native . toString ( buf ) ) ; <nl> + } <nl> + <nl> + public void testStringConversionWithEncoding ( ) throws Exception { <nl> + byte [ ] buf = ( getName ( ) + UNICODE + NUL ) . getBytes ( " utf8 " ) ; <nl> + assertEquals ( " Encoded C string improperly converted " , getName ( ) + UNICODE , Native . toString ( buf , " utf8 " ) ) ; <nl> + } <nl> + <nl> + public void testWideStringConversion ( ) { <nl> + char [ ] buf = ( getName ( ) + NUL ) . toCharArray ( ) ; <nl> + assertEquals ( " Wide C string improperly converted " , getName ( ) , Native . toString ( buf ) ) ; <nl> + } <nl> + <nl> + public void testGetBytes ( ) throws Exception { <nl> + byte [ ] buf = Native . getBytes ( getName ( ) + UNICODE , " utf8 " ) ; <nl> + assertEquals ( " Incorrect native bytes from Java String " , getName ( ) + UNICODE , new String ( buf , " utf8 " ) ) ; <nl> + } <nl> + <nl> + public void testGetBytesBadEncoding ( ) throws Exception { <nl> + byte [ ] buf = Native . getBytes ( getName ( ) , " unsupported " ) ; <nl> + assertEquals ( " Incorrect fallback bytes with bad encoding " , <nl> + getName ( ) , new String ( buf , System . getProperty ( " file . encoding " ) ) ) ; <nl> + } <nl> + <nl> + public void testFindDirectMappedClassFailure ( ) { <nl> + try { <nl> + Native . findDirectMappedClass ( NativeTest . class ) ; <nl> + fail ( " Expect an exception if native - mapped class can ' t be found " ) ; <nl> + } <nl> + catch ( IllegalArgumentException e ) { <nl> + } <nl> + } <nl> + <nl> + / * * This method facilitates running tests from a single entry point <nl> + outside of ant ( i . e . for androide , WCE , etc . ) . <nl> + * / <nl> public static void main ( String [ ] args ) { <nl> if ( args . length = = 0 ) { <nl> junit . textui . TestRunner . run ( NativeTest . class ) ; <nl> diff - - git a / test / com / sun / jna / Paths . java b / test / com / sun / jna / Paths . java <nl> index b63e33f . . 1c57a68 100644 <nl> - - - a / test / com / sun / jna / Paths . java <nl> + + + b / test / com / sun / jna / Paths . java <nl> @ @ - 1 , 4 + 1 , 4 @ @ <nl> - / * Copyright ( c ) 2009 Timothy Wall , All Rights Reserved <nl> + / * Copyright ( c ) 2013 Timothy Wall , All Rights Reserved <nl> * <nl> * This library is free software ; you can redistribute it and / or <nl> * modify it under the terms of the GNU Lesser General Public
NEAREST DIFF (one line): diff - - git a / jnalib / src / com / sun / jna / overview . html b / jnalib / src / com / sun / jna / overview . html <nl> index 59606ed . . a01e107 100644 <nl> - - - a / jnalib / src / com / sun / jna / overview . html <nl> + + + b / jnalib / src / com / sun / jna / overview . html <nl> @ @ - 430 , 7 + 430 , 9 @ @ class Line2 extends Structure { <nl> } <nl> < / pre > < / code > < / blockquote > <nl> <nl> - The more general case is just a pointer to a buffer : < br > <nl> + The more general case is just a pointer to memory . This allows you to define <nl> + the field without necessarily defining the inner structure itself , similar to <nl> + declaring a struct without defining it in C : < br > <nl> <nl> < blockquote > < code > < pre > <nl> / / Original C code

TEST DIFF:
diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index b5eb3a7 . . f5b09c7 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 1101 , 7 + 1101 , 7 @ @ public final class Native implements Version { 
 * @ param libName library name to which functions should be bound 
 * / 
 public static void register ( String libName ) { 
 - register ( getNativeClass ( getCallingClass ( ) ) , libName ) ; 
 + register ( findDirectMappedClass ( getCallingClass ( ) ) , libName ) ; 
 } 
 
 / * * When called from a class static initializer , maps all native methods 
 @ @ - 1110 , 11 + 1110 , 11 @ @ public final class Native implements Version { 
 * @ param lib native library to which functions should be bound 
 * / 
 public static void register ( NativeLibrary lib ) { 
 - register ( getNativeClass ( getCallingClass ( ) ) , lib ) ; 
 + register ( findDirectMappedClass ( getCallingClass ( ) ) , lib ) ; 
 } 
 
 / * * Find the nearest enclosing class with native methods . * / 
 - static Class getNativeClass ( Class cls ) { 
 + static Class findDirectMappedClass ( Class cls ) { 
 Method [ ] methods = cls . getDeclaredMethods ( ) ; 
 for ( int i = 0 ; i < methods . length ; i + + ) { 
 if ( ( methods [ i ] . getModifiers ( ) & Modifier . NATIVE ) ! = 0 ) { 
 @ @ - 1125 , 7 + 1125 , 7 @ @ public final class Native implements Version { 
 if ( idx ! = - 1 ) { 
 String name = cls . getName ( ) . substring ( 0 , idx ) ; 
 try { 
 - return getNativeClass ( Class . forName ( name , true , cls . getClassLoader ( ) ) ) ; 
 + return findDirectMappedClass ( Class . forName ( name , true , cls . getClassLoader ( ) ) ) ; 
 } 
 catch ( ClassNotFoundException e ) { 
 } 
 @ @ - 1180 , 7 + 1180 , 7 @ @ public final class Native implements Version { 
 to be garbage collected . 
 * / 
 public static void unregister ( ) { 
 - unregister ( getNativeClass ( getCallingClass ( ) ) ) ; 
 + unregister ( findDirectMappedClass ( getCallingClass ( ) ) ) ; 
 } 
 
 / * * Remove all native mappings for the given class . 
 diff - - git a / test / com / sun / jna / DirectTest . java b / test / com / sun / jna / DirectTest . java 
 index 7fa5a28 . . 36e578a 100644 
 - - - a / test / com / sun / jna / DirectTest . java 
 + + + b / test / com / sun / jna / DirectTest . java 
 @ @ - 125 , 7 + 125 , 6 @ @ public class DirectTest extends TestCase implements Paths { 
 } 
 } 
 
 - / / Fails under clover 
 public void testRegisterMethods ( ) throws Exception { 
 / / Use a dedicated class loader to ensure the class can be gc ' d 
 String name = " com . sun . jna . DirectTest $ MathLibrary " ; 
 @ @ - 159 , 20 + 158 , 20 @ @ public class DirectTest extends TestCase implements Paths { 
 public void testFindNativeClass ( ) { 
 class UnregisterLibrary { 
 class Inner { 
 - public Class getNativeClass ( ) { 
 - return getNativeClassInner ( ) ; 
 + public Class findDirectMappedClass ( ) { 
 + return findDirectMappedClassInner ( ) ; 
 } 
 - public Class getNativeClassInner ( ) { 
 - return Native . getNativeClass ( Native . getCallingClass ( ) ) ; 
 + public Class findDirectMappedClassInner ( ) { 
 + return Native . findDirectMappedClass ( Native . getCallingClass ( ) ) ; 
 } ; 
 } 
 public native double cos ( double x ) ; 
 - public Class getNativeClass ( ) { 
 - return new Inner ( ) . getNativeClass ( ) ; 
 + public Class findDirectMappedClass ( ) { 
 + return new Inner ( ) . findDirectMappedClass ( ) ; 
 } ; 
 } 
 assertEquals ( " Wrong native class found " , 
 - UnregisterLibrary . class , new UnregisterLibrary ( ) . getNativeClass ( ) ) ; 
 + UnregisterLibrary . class , new UnregisterLibrary ( ) . findDirectMappedClass ( ) ) ; 
 } 
 } 
 
 diff - - git a / test / com / sun / jna / JNAUnloadTest . java b / test / com / sun / jna / JNAUnloadTest . java 
 index 3bf2456 . . a736ad0 100644 
 - - - a / test / com / sun / jna / JNAUnloadTest . java 
 + + + b / test / com / sun / jna / JNAUnloadTest . java 
 @ @ - 100 , 7 + 100 , 6 @ @ public class JNAUnloadTest extends TestCase implements Paths { 
 } 
 } 
 
 - / / GC Fails under clover 
 public void testLoadAndUnloadFromJar ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( true ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 @ @ - 154 , 7 + 153 , 7 @ @ public class JNAUnloadTest extends TestCase implements Paths { 
 } 
 } 
 
 - / / GC Fails under clover and OpenJDK ( linux / ppc ) 
 + / / GC Fails under OpenJDK ( linux / ppc ) 
 public void testLoadAndUnloadFromResourcePath ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( false ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 diff - - git a / test / com / sun / jna / LibraryLoadTest . java b / test / com / sun / jna / LibraryLoadTest . java 
 index 7d099f7 . . 16a654c 100644 
 - - - a / test / com / sun / jna / LibraryLoadTest . java 
 + + + b / test / com / sun / jna / LibraryLoadTest . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . io . IOException ; 
 import java . net . MalformedURLException ; 
 import java . net . URL ; 
 import java . net . URLClassLoader ; 
 + import java . util . Collections ; 
 
 import junit . framework . TestCase ; 
 
 @ @ - 110 , 6 + 111 , 14 @ @ public class LibraryLoadTest extends TestCase implements Paths { 
 return Native . loadLibrary ( Platform . C _ LIBRARY _ NAME , CLibrary . class ) ; 
 } 
 
 + public void testLoadProcess ( ) { 
 + Native . loadLibrary ( CLibrary . class ) ; 
 + } 
 + 
 + public void testLoadProcessWithOptions ( ) { 
 + Native . loadLibrary ( CLibrary . class , Collections . EMPTY _ MAP ) ; 
 + } 
 + 
 public void testLoadCLibrary ( ) { 
 load ( ) ; 
 } 
 diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java 
 index 87ecdd2 . . ce717e0 100644 
 - - - a / test / com / sun / jna / NativeTest . java 
 + + + b / test / com / sun / jna / NativeTest . java 
 @ @ - 417 , 6 + 417 , 45 @ @ public class NativeTest extends TestCase { 
 } 
 } 
 
 + private static final String NUL = " \ 0 " ; 
 + public void testStringConversion ( ) { 
 + byte [ ] buf = ( getName ( ) + NUL ) . getBytes ( ) ; 
 + assertEquals ( " C string improperly converted " , getName ( ) , Native . toString ( buf ) ) ; 
 + } 
 + 
 + public void testStringConversionWithEncoding ( ) throws Exception { 
 + byte [ ] buf = ( getName ( ) + UNICODE + NUL ) . getBytes ( " utf8 " ) ; 
 + assertEquals ( " Encoded C string improperly converted " , getName ( ) + UNICODE , Native . toString ( buf , " utf8 " ) ) ; 
 + } 
 + 
 + public void testWideStringConversion ( ) { 
 + char [ ] buf = ( getName ( ) + NUL ) . toCharArray ( ) ; 
 + assertEquals ( " Wide C string improperly converted " , getName ( ) , Native . toString ( buf ) ) ; 
 + } 
 + 
 + public void testGetBytes ( ) throws Exception { 
 + byte [ ] buf = Native . getBytes ( getName ( ) + UNICODE , " utf8 " ) ; 
 + assertEquals ( " Incorrect native bytes from Java String " , getName ( ) + UNICODE , new String ( buf , " utf8 " ) ) ; 
 + } 
 + 
 + public void testGetBytesBadEncoding ( ) throws Exception { 
 + byte [ ] buf = Native . getBytes ( getName ( ) , " unsupported " ) ; 
 + assertEquals ( " Incorrect fallback bytes with bad encoding " , 
 + getName ( ) , new String ( buf , System . getProperty ( " file . encoding " ) ) ) ; 
 + } 
 + 
 + public void testFindDirectMappedClassFailure ( ) { 
 + try { 
 + Native . findDirectMappedClass ( NativeTest . class ) ; 
 + fail ( " Expect an exception if native - mapped class can ' t be found " ) ; 
 + } 
 + catch ( IllegalArgumentException e ) { 
 + } 
 + } 
 + 
 + / * * This method facilitates running tests from a single entry point 
 + outside of ant ( i . e . for androide , WCE , etc . ) . 
 + * / 
 public static void main ( String [ ] args ) { 
 if ( args . length = = 0 ) { 
 junit . textui . TestRunner . run ( NativeTest . class ) ; 
 diff - - git a / test / com / sun / jna / Paths . java b / test / com / sun / jna / Paths . java 
 index b63e33f . . 1c57a68 100644 
 - - - a / test / com / sun / jna / Paths . java 
 + + + b / test / com / sun / jna / Paths . java 
 @ @ - 1 , 4 + 1 , 4 @ @ 
 - / * Copyright ( c ) 2009 Timothy Wall , All Rights Reserved 
 + / * Copyright ( c ) 2013 Timothy Wall , All Rights Reserved 
 * 
 * This library is free software ; you can redistribute it and / or 
 * modify it under the terms of the GNU Lesser General Public

NEAREST DIFF:
diff - - git a / jnalib / src / com / sun / jna / overview . html b / jnalib / src / com / sun / jna / overview . html 
 index 59606ed . . a01e107 100644 
 - - - a / jnalib / src / com / sun / jna / overview . html 
 + + + b / jnalib / src / com / sun / jna / overview . html 
 @ @ - 430 , 7 + 430 , 9 @ @ class Line2 extends Structure { 
 } 
 < / pre > < / code > < / blockquote > 
 
 - The more general case is just a pointer to a buffer : < br > 
 + The more general case is just a pointer to memory . This allows you to define 
 + the field without necessarily defining the inner structure itself , similar to 
 + declaring a struct without defining it in C : < br > 
 
 < blockquote > < code > < pre > 
 / / Original C code
