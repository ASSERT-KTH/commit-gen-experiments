BLEU SCORE: 0.024367494694068095

TEST MSG: add missing changelog entry , extend GC timeout
GENERATED MSG: fix tests on IBM J9 ( windows ) VM

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index d55b6fa . . 5f2b2a4 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 49 , 6 + 49 , 7 @ @ Features <nl> * Loosen OSGI OS name matching to accommodate Windows 8 family - Niels Bertram . <nl> * [ # 436 ] ( https : / / github . com / twall / jna / pull / 469 ) : Added basic Pdh API implementation to ' com . sun . jna . platform . win32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> * [ # 451 ] ( https : / / github . com / twall / jna / pull / 451 ) : Add VARIANT support for CHAR and BYTE - [ @ mitkola ] ( https : / / github . com / mitkola ) . <nl> + * [ # 478 ] ( https : / / github . com / twall / jna / issues / 451 ) : Ask ldconfig for more places to search for libraries - [ @ gohal ] ( https : / / github . com / gohal ) . <nl> * [ # 481 ] ( https : / / github . com / twall / jna / pull / 481 ) : Added volume management functions to ' com . sun . jna . platform . win32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> * [ # 483 ] ( https : / / github . com / twall / jna / pull / 483 ) : Found and fixed duplicate method definitions for the same API in ' com . sun . jna . platform . win32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> * [ # 485 ] ( https : / / github . com / twall / jna / pull / 485 ) : Implemented Comparable interface for many of the base types in ' com . sun . jna . platform . win32 . WinDef ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> diff - - git a / test / com / sun / jna / JNALoadTest . java b / test / com / sun / jna / JNALoadTest . java <nl> index b8fba65 . . e84cf94 100644 <nl> - - - a / test / com / sun / jna / JNALoadTest . java <nl> + + + b / test / com / sun / jna / JNALoadTest . java <nl> @ @ - 27 , 6 + 27 , 11 @ @ import junit . framework . TestCase ; <nl> * / <nl> public class JNALoadTest extends TestCase implements Paths { <nl> <nl> + / / Amount of time to wait for GC , in ms <nl> + private static final int GC _ WAIT _ TIMEOUT = 5000 ; <nl> + private static final int GC _ WAIT _ INTERVAL = 10 ; <nl> + private static final int GC _ WAITS = GC _ WAIT _ TIMEOUT / GC _ WAIT _ INTERVAL ; <nl> + <nl> private class TestLoader extends URLClassLoader { <nl> public TestLoader ( boolean fromJar ) throws MalformedURLException { <nl> super ( new URL [ ] { <nl> @ @ - 119 , 8 + 124 , 8 @ @ public class JNALoadTest extends TestCase implements Paths { <nl> cls = null ; <nl> field = null ; <nl> System . gc ( ) ; <nl> - for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { <nl> - Thread . sleep ( 10 ) ; <nl> + for ( int i = 0 ; i < GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { <nl> + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> System . gc ( ) ; <nl> } <nl> assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; <nl> @ @ - 128 , 8 + 133 , 8 @ @ public class JNALoadTest extends TestCase implements Paths { <nl> <nl> / / Check for temporary file deletion <nl> File f = new File ( path ) ; <nl> - for ( int i = 0 ; i < 100 & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> - Thread . sleep ( 10 ) ; <nl> + for ( int i = 0 ; i < GC _ WAITS & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> System . gc ( ) ; <nl> } <nl> <nl> @ @ - 173 , 8 + 178 , 8 @ @ public class JNALoadTest extends TestCase implements Paths { <nl> cls = null ; <nl> field = null ; <nl> System . gc ( ) ; <nl> - for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> - Thread . sleep ( 10 ) ; <nl> + for ( int i = 0 ; i < GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> System . gc ( ) ; <nl> } <nl> assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; <nl> @ @ - 184 , 9 + 189 , 9 @ @ public class JNALoadTest extends TestCase implements Paths { <nl> Throwable throwable = null ; <nl> / / NOTE : IBM J9 needs some extra time to unload the native library , <nl> / / so try a few times before failing <nl> - for ( int i = 0 ; i < 100 ; i + + ) { <nl> + for ( int i = 0 ; i < GC _ WAITS ; i + + ) { <nl> System . gc ( ) ; <nl> - Thread . sleep ( 10 ) ; <nl> + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> try { <nl> loader = new TestLoader ( false ) ; <nl> cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ;
NEAREST DIFF (one line): diff - - git a / jnalib / test / com / sun / jna / JNAUnloadTest . java b / jnalib / test / com / sun / jna / JNAUnloadTest . java <nl> index 6da10cf . . 4260d49 100644 <nl> - - - a / jnalib / test / com / sun / jna / JNAUnloadTest . java <nl> + + + b / jnalib / test / com / sun / jna / JNAUnloadTest . java <nl> @ @ - 35 , 8 + 35 , 11 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> <nl> - / / Fails on VMs other than Sun ' s <nl> + / / Fails under clover <nl> public void testUnloadFromJar ( ) throws Exception { <nl> + File jar = new File ( BUILDDIR + " / jna . jar " ) ; <nl> + assertTrue ( " Expected JNA jar file at " + jar + " is missing " , jar . exists ( ) ) ; <nl> + <nl> ClassLoader loader = new TestLoader ( true ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ; <nl> @ @ - 90 , 7 + 93 , 7 @ @ public class JNAUnloadTest extends TestCase { <nl> } <nl> } <nl> <nl> - / / Fails on VMs other than Sun ' s <nl> + / / Fails under clover <nl> public void testUnload ( ) throws Exception { <nl> ClassLoader loader = new TestLoader ( false ) ; <nl> Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> diff - - git a / jnalib / test / com / sun / jna / LibraryLoadTest . java b / jnalib / test / com / sun / jna / LibraryLoadTest . java <nl> index 6ec74ab . . 92cf502 100644 <nl> - - - a / jnalib / test / com / sun / jna / LibraryLoadTest . java <nl> + + + b / jnalib / test / com / sun / jna / LibraryLoadTest . java <nl> @ @ - 91 , 6 + 91 , 8 @ @ public class LibraryLoadTest extends TestCase { <nl> String tmp = System . getProperty ( " java . io . tmpdir " ) ; <nl> String libName = System . mapLibraryName ( " jnidispatch " ) ; <nl> File src = new File ( BUILDDIR + " / native " , libName ) ; <nl> + assertTrue ( " Expected JNA native library at " + src + " is missing " , src . exists ( ) ) ; <nl> + <nl> String newLibName = UNICODE ; <nl> if ( libName . startsWith ( " lib " ) ) <nl> newLibName = " lib " + newLibName ;

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index d55b6fa . . 5f2b2a4 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 49 , 6 + 49 , 7 @ @ Features 
 * Loosen OSGI OS name matching to accommodate Windows 8 family - Niels Bertram . 
 * [ # 436 ] ( https : / / github . com / twall / jna / pull / 469 ) : Added basic Pdh API implementation to ' com . sun . jna . platform . win32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 * [ # 451 ] ( https : / / github . com / twall / jna / pull / 451 ) : Add VARIANT support for CHAR and BYTE - [ @ mitkola ] ( https : / / github . com / mitkola ) . 
 + * [ # 478 ] ( https : / / github . com / twall / jna / issues / 451 ) : Ask ldconfig for more places to search for libraries - [ @ gohal ] ( https : / / github . com / gohal ) . 
 * [ # 481 ] ( https : / / github . com / twall / jna / pull / 481 ) : Added volume management functions to ' com . sun . jna . platform . win32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 * [ # 483 ] ( https : / / github . com / twall / jna / pull / 483 ) : Found and fixed duplicate method definitions for the same API in ' com . sun . jna . platform . win32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 * [ # 485 ] ( https : / / github . com / twall / jna / pull / 485 ) : Implemented Comparable interface for many of the base types in ' com . sun . jna . platform . win32 . WinDef ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 diff - - git a / test / com / sun / jna / JNALoadTest . java b / test / com / sun / jna / JNALoadTest . java 
 index b8fba65 . . e84cf94 100644 
 - - - a / test / com / sun / jna / JNALoadTest . java 
 + + + b / test / com / sun / jna / JNALoadTest . java 
 @ @ - 27 , 6 + 27 , 11 @ @ import junit . framework . TestCase ; 
 * / 
 public class JNALoadTest extends TestCase implements Paths { 
 
 + / / Amount of time to wait for GC , in ms 
 + private static final int GC _ WAIT _ TIMEOUT = 5000 ; 
 + private static final int GC _ WAIT _ INTERVAL = 10 ; 
 + private static final int GC _ WAITS = GC _ WAIT _ TIMEOUT / GC _ WAIT _ INTERVAL ; 
 + 
 private class TestLoader extends URLClassLoader { 
 public TestLoader ( boolean fromJar ) throws MalformedURLException { 
 super ( new URL [ ] { 
 @ @ - 119 , 8 + 124 , 8 @ @ public class JNALoadTest extends TestCase implements Paths { 
 cls = null ; 
 field = null ; 
 System . gc ( ) ; 
 - for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { 
 - Thread . sleep ( 10 ) ; 
 + for ( int i = 0 ; i < GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { 
 + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 System . gc ( ) ; 
 } 
 assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; 
 @ @ - 128 , 8 + 133 , 8 @ @ public class JNALoadTest extends TestCase implements Paths { 
 
 / / Check for temporary file deletion 
 File f = new File ( path ) ; 
 - for ( int i = 0 ; i < 100 & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 - Thread . sleep ( 10 ) ; 
 + for ( int i = 0 ; i < GC _ WAITS & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 System . gc ( ) ; 
 } 
 
 @ @ - 173 , 8 + 178 , 8 @ @ public class JNALoadTest extends TestCase implements Paths { 
 cls = null ; 
 field = null ; 
 System . gc ( ) ; 
 - for ( int i = 0 ; i < 100 & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 - Thread . sleep ( 10 ) ; 
 + for ( int i = 0 ; i < GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 System . gc ( ) ; 
 } 
 assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; 
 @ @ - 184 , 9 + 189 , 9 @ @ public class JNALoadTest extends TestCase implements Paths { 
 Throwable throwable = null ; 
 / / NOTE : IBM J9 needs some extra time to unload the native library , 
 / / so try a few times before failing 
 - for ( int i = 0 ; i < 100 ; i + + ) { 
 + for ( int i = 0 ; i < GC _ WAITS ; i + + ) { 
 System . gc ( ) ; 
 - Thread . sleep ( 10 ) ; 
 + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 try { 
 loader = new TestLoader ( false ) ; 
 cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ;

NEAREST DIFF:
diff - - git a / jnalib / test / com / sun / jna / JNAUnloadTest . java b / jnalib / test / com / sun / jna / JNAUnloadTest . java 
 index 6da10cf . . 4260d49 100644 
 - - - a / jnalib / test / com / sun / jna / JNAUnloadTest . java 
 + + + b / jnalib / test / com / sun / jna / JNAUnloadTest . java 
 @ @ - 35 , 8 + 35 , 11 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 
 - / / Fails on VMs other than Sun ' s 
 + / / Fails under clover 
 public void testUnloadFromJar ( ) throws Exception { 
 + File jar = new File ( BUILDDIR + " / jna . jar " ) ; 
 + assertTrue ( " Expected JNA jar file at " + jar + " is missing " , jar . exists ( ) ) ; 
 + 
 ClassLoader loader = new TestLoader ( true ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 assertEquals ( " Wrong class loader " , loader , cls . getClassLoader ( ) ) ; 
 @ @ - 90 , 7 + 93 , 7 @ @ public class JNAUnloadTest extends TestCase { 
 } 
 } 
 
 - / / Fails on VMs other than Sun ' s 
 + / / Fails under clover 
 public void testUnload ( ) throws Exception { 
 ClassLoader loader = new TestLoader ( false ) ; 
 Class cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 diff - - git a / jnalib / test / com / sun / jna / LibraryLoadTest . java b / jnalib / test / com / sun / jna / LibraryLoadTest . java 
 index 6ec74ab . . 92cf502 100644 
 - - - a / jnalib / test / com / sun / jna / LibraryLoadTest . java 
 + + + b / jnalib / test / com / sun / jna / LibraryLoadTest . java 
 @ @ - 91 , 6 + 91 , 8 @ @ public class LibraryLoadTest extends TestCase { 
 String tmp = System . getProperty ( " java . io . tmpdir " ) ; 
 String libName = System . mapLibraryName ( " jnidispatch " ) ; 
 File src = new File ( BUILDDIR + " / native " , libName ) ; 
 + assertTrue ( " Expected JNA native library at " + src + " is missing " , src . exists ( ) ) ; 
 + 
 String newLibName = UNICODE ; 
 if ( libName . startsWith ( " lib " ) ) 
 newLibName = " lib " + newLibName ;
