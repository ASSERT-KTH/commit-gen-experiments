BLEU SCORE: 0.01222796968620182

TEST MSG: When deriving from a native - mapped struct , need to provide an updated fromNative method
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 7ea4ae7 . . 8eabf39 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 21 , 6 + 21 , 7 @ @ Features <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> + * [ # 549 ] ( https : / / github . com / java - native - access / jna / pull / 549 ) : Fixed bug in types derived from XID - [ @ twall ] ( https : / / github . com / twall ) . <nl> <nl> Release 4 . 2 . 1 <nl> = = = = = = = = = = = = = <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> index 8190b4d . . 9804106 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> @ @ - 35 , 8 + 35 , 19 @ @ public interface X11 extends Library { <nl> <nl> class VisualID extends NativeLong { <nl> private static final long serialVersionUID = 1L ; <nl> + public static final VisualID None = null ; <nl> public VisualID ( ) { this ( 0 ) ; } <nl> public VisualID ( long value ) { super ( value , true ) ; } <nl> + protected boolean isNone ( Object o ) { <nl> + return o = = null <nl> + | | ( o instanceof Number <nl> + & & ( ( Number ) o ) . longValue ( ) = = X11 . None ) ; <nl> + } <nl> + public Object fromNative ( Object nativeValue , FromNativeContext context ) { <nl> + if ( isNone ( nativeValue ) ) <nl> + return None ; <nl> + return new VisualID ( ( ( Number ) nativeValue ) . longValue ( ) ) ; <nl> + } <nl> } <nl> <nl> class XID extends NativeLong { <nl> @ @ - 286 , 8 + 297 , 14 @ @ public interface X11 extends Library { <nl> } <nl> class PictFormat extends XID { <nl> private static final long serialVersionUID = 1L ; <nl> + public static final PictFormat None = null ; <nl> public PictFormat ( long value ) { super ( value ) ; } <nl> public PictFormat ( ) { this ( 0 ) ; } <nl> + public Object fromNative ( Object nativeValue , FromNativeContext context ) { <nl> + if ( isNone ( nativeValue ) ) <nl> + return None ; <nl> + return new PictFormat ( ( ( Number ) nativeValue ) . longValue ( ) ) ; <nl> + } <nl> } <nl> class XRenderPictFormat extends Structure { <nl> public PictFormat id ; <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java b / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java <nl> new file mode 100644 <nl> index 0000000 . . 3616898 <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / * Copyright ( c ) 2015 Timothy Wall , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * < p / > <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . unix ; <nl> + <nl> + import junit . framework . TestCase ; <nl> + <nl> + / * * <nl> + * Exercise the { @ link X11 } class . <nl> + * <nl> + * @ author twalljava @ java . net <nl> + * / <nl> + / / @ SuppressWarnings ( " unused " ) <nl> + public class X11Test extends TestCase { <nl> + <nl> + public void testXrender ( ) { <nl> + X11 . Xrender . XRenderPictFormat s = new X11 . Xrender . XRenderPictFormat ( ) ; <nl> + s . getPointer ( ) . setInt ( 0 , 25 ) ; <nl> + s . read ( ) ; <nl> + } <nl> + <nl> + public static void main ( java . lang . String [ ] argList ) { <nl> + junit . textui . TestRunner . run ( X11Test . class ) ; <nl> + } <nl> + } <nl> + <nl> +
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 7ea4ae7 . . 8eabf39 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 21 , 6 + 21 , 7 @ @ Features 
 
 Bug Fixes 
 - - - - - - - - - 
 + * [ # 549 ] ( https : / / github . com / java - native - access / jna / pull / 549 ) : Fixed bug in types derived from XID - [ @ twall ] ( https : / / github . com / twall ) . 
 
 Release 4 . 2 . 1 
 = = = = = = = = = = = = = 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 index 8190b4d . . 9804106 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 @ @ - 35 , 8 + 35 , 19 @ @ public interface X11 extends Library { 
 
 class VisualID extends NativeLong { 
 private static final long serialVersionUID = 1L ; 
 + public static final VisualID None = null ; 
 public VisualID ( ) { this ( 0 ) ; } 
 public VisualID ( long value ) { super ( value , true ) ; } 
 + protected boolean isNone ( Object o ) { 
 + return o = = null 
 + | | ( o instanceof Number 
 + & & ( ( Number ) o ) . longValue ( ) = = X11 . None ) ; 
 + } 
 + public Object fromNative ( Object nativeValue , FromNativeContext context ) { 
 + if ( isNone ( nativeValue ) ) 
 + return None ; 
 + return new VisualID ( ( ( Number ) nativeValue ) . longValue ( ) ) ; 
 + } 
 } 
 
 class XID extends NativeLong { 
 @ @ - 286 , 8 + 297 , 14 @ @ public interface X11 extends Library { 
 } 
 class PictFormat extends XID { 
 private static final long serialVersionUID = 1L ; 
 + public static final PictFormat None = null ; 
 public PictFormat ( long value ) { super ( value ) ; } 
 public PictFormat ( ) { this ( 0 ) ; } 
 + public Object fromNative ( Object nativeValue , FromNativeContext context ) { 
 + if ( isNone ( nativeValue ) ) 
 + return None ; 
 + return new PictFormat ( ( ( Number ) nativeValue ) . longValue ( ) ) ; 
 + } 
 } 
 class XRenderPictFormat extends Structure { 
 public PictFormat id ; 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java b / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java 
 new file mode 100644 
 index 0000000 . . 3616898 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / * Copyright ( c ) 2015 Timothy Wall , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * < p / > 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . unix ; 
 + 
 + import junit . framework . TestCase ; 
 + 
 + / * * 
 + * Exercise the { @ link X11 } class . 
 + * 
 + * @ author twalljava @ java . net 
 + * / 
 + / / @ SuppressWarnings ( " unused " ) 
 + public class X11Test extends TestCase { 
 + 
 + public void testXrender ( ) { 
 + X11 . Xrender . XRenderPictFormat s = new X11 . Xrender . XRenderPictFormat ( ) ; 
 + s . getPointer ( ) . setInt ( 0 , 25 ) ; 
 + s . read ( ) ; 
 + } 
 + 
 + public static void main ( java . lang . String [ ] argList ) { 
 + junit . textui . TestRunner . run ( X11Test . class ) ; 
 + } 
 + } 
 + 
 +

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
