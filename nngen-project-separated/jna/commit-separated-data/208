BLEU SCORE: 0.014537746758657346

TEST MSG: Added ` EnumProcessModules ` , ` GetModuleInformation ` , ` GetProcessImageFileName ` to Psapi and ` ExtractIconEx ` to Shell32
GENERATED MSG: [ issue # 169 ] Added new Win32 platform function mappings related to process creation . SECURITY _ ATTRIBUTES structure has been moved to WinBase to reflect latest MSDN doco .

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index e25c3e6 . . f07408d 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 29 , 7 + 29 , 7 @ @ Features <nl> * [ # 562 ] ( https : / / github . com / java - native - access / jna / pull / 562 ) : Added ` com . sun . jna . platform . win32 . VersionUtil ` with ` getFileVersionInfo ` utility method to get file major , minor , revision , and build version parts - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . <nl> * [ # 563 ] ( https : / / github . com / java - native - access / jna / pull / 563 ) : Added ` com . sun . jna . platform . win32 . Wininet ` with the following 4 methods : ` FindFirstUrlCacheEntry ` , ` DeleteUrlCacheEntry ` , ` FindCloseUrlCache ` , ` FindNextUrlCacheEntry ` , and the ` INTERNET _ CACHE _ ENTRY _ INFO ` structure , and a helper in ` com . sun . jna . platform . win32 . WininetUtil ` for parsing WinInet ' s cache - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . <nl> * [ # 567 ] ( https : / / github . com / java - native - access / jna / pull / 567 ) : Added ` PrintWindow ` , ` IsWindowEnabled ` , ` IsWindow ` , ` FindWindowEx ` , ` GetAncestor ` , ` GetCursorPos ` , ` SetCursorPos ` , ` SetWinEventHook ` , ` UnhookWinEvent ` , ` CopyIcon ` , and ` GetClassLong ` to ` com . sun . jna . platform . win32 . User32 ` and supporting constants to ` com . sun . jna . platform . win32 . WinUser ` - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . <nl> - <nl> + * [ # 573 ] ( https : / / github . com / java - native - access / jna / pull / 573 ) : Added ` EnumProcessModules ` , ` GetModuleInformation ` , and ` GetProcessImageFileName ` to ` com . sun . jna . platform . win32 . Psapi ` and added ` ExtractIconEx ` to ` com . sun . jna . platform . win32 . Shell32 ` - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Psapi . java b / contrib / platform / src / com / sun / jna / platform / win32 / Psapi . java <nl> index 50b1426 . . 72a2136 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Psapi . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Psapi . java <nl> @ @ - 12 , 9 + 12 , 15 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 ; <nl> <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> + import com . sun . jna . Structure ; <nl> + import com . sun . jna . platform . win32 . WinDef . HMODULE ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . win32 . StdCallLibrary ; <nl> import com . sun . jna . win32 . W32APIOptions ; <nl> <nl> @ @ - 26 , 77 + 32 , 217 @ @ import com . sun . jna . win32 . W32APIOptions ; <nl> * @ author Andreas " PAX " L & uuml ; ck , onkelpax - git [ at ] yahoo . de <nl> * / <nl> public interface Psapi extends StdCallLibrary { <nl> - 	 Psapi INSTANCE = Native . loadLibrary ( " psapi " , Psapi . class , W32APIOptions . DEFAULT _ OPTIONS ) ; <nl> - 	 <nl> - 	 / * * <nl> - 	 * Retrieves the fully qualified path for the file containing the specified <nl> - 	 * module . <nl> - 	 * <nl> - 	 * @ param process <nl> - 	 * A handle to the process that contains the module . <nl> - 	 * @ param module <nl> - 	 * A handle to the module . If this parameter is NULL , <nl> - 	 * GetModuleFileNameEx returns the path of the executable file of <nl> - 	 * the process specified in hProcess . <nl> - 	 * @ param lpFilename <nl> - 	 * A pointer to a buffer that receives the fully qualified path <nl> - 	 * to the module . If the size of the file name is larger than the <nl> - 	 * value of the nSize parameter , the function succeeds but the <nl> - 	 * file name is truncated and null - terminated . <nl> - 	 * @ param nSize <nl> - 	 * The size of the lpFilename buffer , in characters . <nl> - 	 * @ return If the function succeeds , the return value specifies the length <nl> - 	 * of the string copied to the buffer . If the function fails , the <nl> - 	 * return value is zero . To get extended error information , call <nl> - 	 * { @ link Kernel32Util # getLastErrorMessage ( ) } . <nl> - 	 * / <nl> - 	 int GetModuleFileNameExA ( HANDLE process , HANDLE module , byte [ ] lpFilename , int nSize ) ; <nl> - 	 <nl> - 	 / * * <nl> - 	 * Retrieves the fully qualified path for the file containing the specified <nl> - 	 * module . <nl> - 	 * <nl> - 	 * @ param process <nl> - 	 * A handle to the process that contains the module . <nl> - 	 * @ param module <nl> - 	 * A handle to the module . If this parameter is NULL , <nl> - 	 * GetModuleFileNameEx returns the path of the executable file of <nl> - 	 * the process specified in hProcess . <nl> - 	 * @ param lpFilename <nl> - 	 * A pointer to a buffer that receives the fully qualified path <nl> - 	 * to the module . If the size of the file name is larger than the <nl> - 	 * value of the nSize parameter , the function succeeds but the <nl> - 	 * file name is truncated and null - terminated . <nl> - 	 * @ param nSize <nl> - 	 * The size of the lpFilename buffer , in characters . <nl> - 	 * @ return If the function succeeds , the return value specifies the length <nl> - 	 * of the string copied to the buffer . If the function fails , the <nl> - 	 * return value is zero . To get extended error information , call <nl> - 	 * { @ link Kernel32Util # getLastErrorMessage ( ) } . <nl> - 	 * / <nl> - 	 int GetModuleFileNameExW ( HANDLE process , HANDLE module , char [ ] lpFilename , int nSize ) ; <nl> + Psapi INSTANCE = Native . loadLibrary ( " psapi " , Psapi . class , W32APIOptions . DEFAULT _ OPTIONS ) ; <nl> + <nl> + / * * <nl> + * Retrieves the fully qualified path for the file containing the specified <nl> + * module . <nl> + * <nl> + * @ param process <nl> + * A handle to the process that contains the module . <nl> + * @ param module <nl> + * A handle to the module . If this parameter is NULL , <nl> + * GetModuleFileNameEx returns the path of the executable file of <nl> + * the process specified in hProcess . <nl> + * @ param lpFilename <nl> + * A pointer to a buffer that receives the fully qualified path <nl> + * to the module . If the size of the file name is larger than the <nl> + * value of the nSize parameter , the function succeeds but the <nl> + * file name is truncated and null - terminated . <nl> + * @ param nSize <nl> + * The size of the lpFilename buffer , in characters . <nl> + * @ return If the function succeeds , the return value specifies the length <nl> + * of the string copied to the buffer . If the function fails , the <nl> + * return value is zero . To get extended error information , call <nl> + * { @ link Kernel32Util # getLastErrorMessage ( ) } . <nl> + * / <nl> + int GetModuleFileNameExA ( HANDLE process , HANDLE module , byte [ ] lpFilename , int nSize ) ; <nl> + <nl> + / * * <nl> + * Retrieves the fully qualified path for the file containing the specified <nl> + * module . <nl> + * <nl> + * @ param process <nl> + * A handle to the process that contains the module . <nl> + * @ param module <nl> + * A handle to the module . If this parameter is NULL , <nl> + * GetModuleFileNameEx returns the path of the executable file of <nl> + * the process specified in hProcess . <nl> + * @ param lpFilename <nl> + * A pointer to a buffer that receives the fully qualified path <nl> + * to the module . If the size of the file name is larger than the <nl> + * value of the nSize parameter , the function succeeds but the <nl> + * file name is truncated and null - terminated . <nl> + * @ param nSize <nl> + * The size of the lpFilename buffer , in characters . <nl> + * @ return If the function succeeds , the return value specifies the length <nl> + * of the string copied to the buffer . If the function fails , the <nl> + * return value is zero . To get extended error information , call <nl> + * { @ link Kernel32Util # getLastErrorMessage ( ) } . <nl> + * / <nl> + int GetModuleFileNameExW ( HANDLE process , HANDLE module , char [ ] lpFilename , int nSize ) ; <nl> + <nl> + / * * <nl> + * Retrieves the fully qualified path for the file containing the specified <nl> + * module . <nl> + * <nl> + * @ param process <nl> + * A handle to the process that contains the module . <nl> + * @ param module <nl> + * A handle to the module . If this parameter is NULL , <nl> + * GetModuleFileNameEx returns the path of the executable file of <nl> + * the process specified in hProcess . <nl> + * @ param lpFilename <nl> + * A pointer to a buffer that receives the fully qualified path <nl> + * to the module . If the size of the file name is larger than the <nl> + * value of the nSize parameter , the function succeeds but the <nl> + * file name is truncated and null - terminated . <nl> + * @ param nSize <nl> + * The size of the lpFilename buffer , in characters . <nl> + * @ return If the function succeeds , the return value specifies the length <nl> + * of the string copied to the buffer . If the function fails , the <nl> + * return value is zero . To get extended error information , call <nl> + * { @ link Kernel32Util # getLastErrorMessage ( ) } . <nl> + * / <nl> + int GetModuleFileNameEx ( HANDLE process , HANDLE module , Pointer lpFilename , int nSize ) ; <nl> + <nl> + / * * <nl> + * <nl> + * The EnumProcessModules function is primarily designed for use by <nl> + * debuggers and similar applications that must extract module information <nl> + * from another process . < br > <nl> + * If the module list in the target process is corrupted or not yet <nl> + * initialized , or if the module list changes during the function call as a <nl> + * result of DLLs being loaded or unloaded , EnumProcessModules may fail or <nl> + * return incorrect information . < br > <nl> + * It is a good idea to specify a large array of HMODULE values , because it <nl> + * is hard to predict how many modules there will be in the process at the <nl> + * time you call EnumProcessModules . < br > <nl> + * To determine if the lphModule array is too small to hold all module <nl> + * handles for the process , compare the value returned in lpcbNeeded with <nl> + * the value specified in cb . < br > <nl> + * If lpcbNeeded is greater than cb , increase the size of the array and call <nl> + * EnumProcessModules again . To determine how many modules were enumerated <nl> + * by the call to EnumProcessModules , divide the resulting value in the <nl> + * lpcbNeeded parameter by sizeof ( HMODULE ) . < br > <nl> + * The EnumProcessModules function does not retrieve handles for modules <nl> + * that were loaded with the LOAD _ LIBRARY _ AS _ DATAFILE or similar flags . For <nl> + * more information , see LoadLibraryEx . < br > <nl> + * Do not call CloseHandle on any of the handles returned by this function . <nl> + * The information comes from a snapshot , so there are no resources to be <nl> + * freed . < br > <nl> + * If this function is called from a 32 - bit application running on WOW64 , it <nl> + * can only enumerate the modules of a 32 - bit process . < br > <nl> + * If the process is a 64 - bit process , this function fails and the last <nl> + * error code is ERROR _ PARTIAL _ COPY ( 299 ) . < br > <nl> + * To take a snapshot of specified processes and the heaps , modules , and <nl> + * threads used by these processes , use the CreateToolhelp32Snapshot <nl> + * function . < br > <nl> + * Starting with Windows 7 and Windows Server 2008 R2 , Psapi . h establishes <nl> + * version numbers for the PSAPI functions . < br > <nl> + * The PSAPI version number affects the name used to call the function and <nl> + * the library that a program must load . < br > <nl> + * If PSAPI _ VERSION is 2 or greater , this function is defined as <nl> + * K32EnumProcessModules in Psapi . h and exported in Kernel32 . lib and <nl> + * Kernel32 . dll . < br > <nl> + * If PSAPI _ VERSION is 1 , this function is defined as EnumProcessModules in <nl> + * Psapi . h and exported in Psapi . lib and Psapi . dll as a wrapper that calls <nl> + * K32EnumProcessModules . < br > <nl> + * Programs that must run on earlier versions of Windows as well as Windows <nl> + * 7 and later versions should always call this function as <nl> + * EnumProcessModules . < br > <nl> + * To ensure correct resolution of symbols , add Psapi . lib to the TARGETLIBS <nl> + * macro and compile the program with - DPSAPI _ VERSION = 1 . < br > <nl> + * To use run - time dynamic linking , load Psapi . dll . <nl> + * <nl> + * @ param hProcess <nl> + * A handle to the process . <nl> + * @ param lphModule <nl> + * An array that receives the list of module handles . <nl> + * @ param cb <nl> + * The size of the lphModule array , in bytes . <nl> + * @ param lpcbNeeded <nl> + * The number of bytes required to store all module handles in <nl> + * the lphModule array . <nl> + * @ return If the function succeeds , the return value is nonzero . If the <nl> + * function fails , the return value is zero . To get extended error <nl> + * information , call GetLastError . <nl> + * @ see < a href = " http : / / msdn . microsoft . com / en - us / library / ms682631 ( VS . 85 ) . aspx " > MSDN / a > <nl> + * / <nl> + boolean EnumProcessModules ( HANDLE hProcess , HMODULE [ ] lphModule , int cb , IntByReference lpcbNeeded ) ; <nl> + <nl> + / * * <nl> + * To get information for the calling process , pass the handle returned by <nl> + * GetCurrentProcess . < br > <nl> + * The GetModuleInformation function does not retrieve information for <nl> + * modules that were loaded with the LOAD _ LIBRARY _ AS _ DATAFILE flag . < br > <nl> + * For more information , see LoadLibraryEx . < br > <nl> + * Starting with Windows 7 and Windows Server 2008 R2 , Psapi . h establishes <nl> + * version numbers for the PSAPI functions . < br > <nl> + * The PSAPI version number affects the name used to call the function and <nl> + * the library that a program must load . < br > <nl> + * If PSAPI _ VERSION is 2 or greater , this function is defined as <nl> + * K32GetModuleInformation in Psapi . h and exported in Kernel32 . lib and <nl> + * Kernel32 . dll . < br > <nl> + * If PSAPI _ VERSION is 1 , this function is defined as <nl> + * K32GetModuleInformation in Psapi . h and exported in Psapi . lib and <nl> + * Psapi . dll as a wrapper that calls K32GetModuleInformation . < br > <nl> + * Programs that must run on earlier versions of Windows as well as Windows <nl> + * 7 and later versions should always call this function as <nl> + * K32GetModuleInformation . < br > <nl> + * To ensure correct resolution of symbols , add Psapi . lib to the TARGETLIBS <nl> + * macro and compile the program with - DPSAPI _ VERSION = 1 . < br > <nl> + * To use run - time dynamic linking , load Psapi . dll . <nl> + * <nl> + * @ param hProcess <nl> + * A handle to the process that contains the module . The handle <nl> + * must have the PROCESS _ QUERY _ INFORMATION and PROCESS _ VM _ READ <nl> + * access rights . For more information , see Process Security and <nl> + * Access Rights . <nl> + * @ param hModule <nl> + * A handle to the module . <nl> + * <nl> + * @ param lpmodinfo <nl> + * A pointer to the MODULEINFO structure that receives <nl> + * information about the module . <nl> + * @ param cb <nl> + * The size of the MODULEINFO structure , in bytes . <nl> + * @ return If the function succeeds , the return value is nonzero . If the <nl> + * function fails , the return value is zero . To get extended error <nl> + * information , call GetLastError . <nl> + * @ see < a href = " http : / / msdn . microsoft . com / en - us / library / ms683201 ( VS . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + boolean GetModuleInformation ( HANDLE hProcess , HMODULE hModule , MODULEINFO lpmodinfo , int cb ) ; <nl> + <nl> + / * * <nl> + * @ param hProcess <nl> + * A handle to the process . The handle must have the <nl> + * PROCESS _ QUERY _ INFORMATION or PROCESS _ QUERY _ LIMITED _ INFORMATION <nl> + * access right . For more information , see Process Security and <nl> + * Access Rights . < br > <nl> + * Windows Server 2003 and Windows XP : The handle must have the <nl> + * PROCESS _ QUERY _ INFORMATION access right . <nl> + * @ param lpImageFileName <nl> + * A pointer to a buffer that receives the full path to the <nl> + * executable file . <nl> + * @ param nSize <nl> + * The size of the lpImageFileName buffer , in characters . <nl> + * @ return If the function succeeds , the return value specifies the length <nl> + * of the string copied to the buffer . If the function fails , the <nl> + * return value is zero . To get extended error information , call <nl> + * GetLastError . <nl> + * @ see < a href = " http : / / msdn . microsoft . com / en - us / library / ms683217 ( VS . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + int GetProcessImageFileName ( HANDLE hProcess , char [ ] lpImageFileName , int nSize ) ; <nl> + <nl> + class MODULEINFO extends Structure { <nl> + public Pointer EntryPoint ; <nl> + public Pointer lpBaseOfDll ; <nl> + public int SizeOfImage ; <nl> <nl> - 	 / * * <nl> - 	 * Retrieves the fully qualified path for the file containing the specified <nl> - 	 * module . <nl> - 	 * <nl> - 	 * @ param process <nl> - 	 * A handle to the process that contains the module . <nl> - 	 * @ param module <nl> - 	 * A handle to the module . If this parameter is NULL , <nl> - 	 * GetModuleFileNameEx returns the path of the executable file of <nl> - 	 * the process specified in hProcess . <nl> - 	 * @ param lpFilename <nl> - 	 * A pointer to a buffer that receives the fully qualified path <nl> - 	 * to the module . If the size of the file name is larger than the <nl> - 	 * value of the nSize parameter , the function succeeds but the <nl> - 	 * file name is truncated and null - terminated . <nl> - 	 * @ param nSize <nl> - 	 * The size of the lpFilename buffer , in characters . <nl> - 	 * @ return If the function succeeds , the return value specifies the length <nl> - 	 * of the string copied to the buffer . If the function fails , the <nl> - 	 * return value is zero . To get extended error information , call <nl> - 	 * { @ link Kernel32Util # getLastErrorMessage ( ) } . <nl> - 	 * / <nl> - 	 int GetModuleFileNameEx ( HANDLE process , HANDLE module , Pointer lpFilename , int nSize ) ; <nl> + @ Override <nl> + protected List getFieldOrder ( ) { <nl> + return Arrays . asList ( new String [ ] { " lpBaseOfDll " , " SizeOfImage " , " EntryPoint " } ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java <nl> index 9c560d2 . . eb74a1d 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java <nl> @ @ - 15 , 6 + 15 , 7 @ @ package com . sun . jna . platform . win32 ; <nl> import com . sun . jna . Native ; <nl> import com . sun . jna . platform . win32 . Guid . GUID ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> + import com . sun . jna . platform . win32 . WinDef . HICON ; <nl> import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> import com . sun . jna . platform . win32 . WinDef . INT _ PTR ; <nl> import com . sun . jna . platform . win32 . WinDef . UINT _ PTR ; <nl> @ @ - 31 , 41 + 32 , 41 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { <nl> / * * The instance * * / <nl> Shell32 INSTANCE = Native . loadLibrary ( " shell32 " , Shell32 . class , W32APIOptions . DEFAULT _ OPTIONS ) ; <nl> <nl> - 	 / * * <nl> - 	 * No dialog box confirming the deletion of the objects will be displayed . <nl> - 	 * / <nl> - 	 int SHERB _ NOCONFIRMATION = 0x00000001 ; <nl> + / * * <nl> + * No dialog box confirming the deletion of the objects will be displayed . <nl> + * / <nl> + int SHERB _ NOCONFIRMATION = 0x00000001 ; <nl> <nl> - 	 / * * <nl> - 	 * No dialog box indicating the progress will be displayed . <nl> - 	 * / <nl> - 	 int SHERB _ NOPROGRESSUI = 0x00000002 ; <nl> + / * * <nl> + * No dialog box indicating the progress will be displayed . <nl> + * / <nl> + int SHERB _ NOPROGRESSUI = 0x00000002 ; <nl> <nl> - 	 / * * <nl> - 	 * No sound will be played when the operation is complete . <nl> - 	 * / <nl> - 	 int SHERB _ NOSOUND = 0x00000004 ; <nl> + / * * <nl> + * No sound will be played when the operation is complete . <nl> + * / <nl> + int SHERB _ NOSOUND = 0x00000004 ; <nl> <nl> - 	 / * * <nl> - 	 * < p > <nl> - 	 * < strong > SEE _ MASK _ NOCLOSEPROCESS < / strong > ( 0x00000040 ) <nl> - 	 * < / p > <nl> - 	 * < p > <nl> - 	 * Use to indicate that the < strong > hProcess < / strong > member receives the <nl> - 	 * process handle . This handle is typically used to allow an application to <nl> - 	 * find out when a process created with terminates . In some cases , such as <nl> - 	 * when execution is satisfied through a DDE conversation , no handle will be <nl> - 	 * returned . The calling application is responsible for closing the handle <nl> - 	 * when it is no longer needed . <nl> - 	 * < / p > <nl> - 	 * / <nl> - 	 int SEE _ MASK _ NOCLOSEPROCESS = 0x00000040 ; <nl> - 	 <nl> - 	 / * * <nl> - 	 * Do not display an error message box if an error occurs . <nl> - 	 * / <nl> - 	 int SEE _ MASK _ FLAG _ NO _ UI = 0x00000400 ; <nl> - 	 <nl> + / * * <nl> + * < p > <nl> + * < strong > SEE _ MASK _ NOCLOSEPROCESS < / strong > ( 0x00000040 ) <nl> + * < / p > <nl> + * < p > <nl> + * Use to indicate that the < strong > hProcess < / strong > member receives the <nl> + * process handle . This handle is typically used to allow an application to <nl> + * find out when a process created with terminates . In some cases , such as <nl> + * when execution is satisfied through a DDE conversation , no handle will be <nl> + * returned . The calling application is responsible for closing the handle <nl> + * when it is no longer needed . <nl> + * < / p > <nl> + * / <nl> + int SEE _ MASK _ NOCLOSEPROCESS = 0x00000040 ; <nl> + <nl> + / * * <nl> + * Do not display an error message box if an error occurs . <nl> + * / <nl> + int SEE _ MASK _ FLAG _ NO _ UI = 0x00000400 ; <nl> + <nl> / * * <nl> * This function can be used to copy , move , rename , or delete a file system object . <nl> * @ param fileop <nl> @ @ - 239 , 15 + 240 , 15 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { <nl> * @ param dwMessage <nl> * Appbar message value to send . This parameter can be one of the following values . <nl> * { @ link ShellAPI # ABM _ NEW } Registers a new appbar and specifies the message identifier that the system should use to send notification messages to the appbar . <nl> - * 	 { @ link ShellAPI # ABM _ REMOVE } Unregisters an appbar , removing the bar from the system ' s internal list . <nl> - * 	 { @ link ShellAPI # ABM _ QUERYPOS } Requests a size and screen position for an appbar . <nl> + * { @ link ShellAPI # ABM _ REMOVE } Unregisters an appbar , removing the bar from the system ' s internal list . <nl> + * { @ link ShellAPI # ABM _ QUERYPOS } Requests a size and screen position for an appbar . <nl> * { @ link ShellAPI # ABM _ SETPOS } Sets the size and screen position of an appbar . <nl> - * 	 { @ link ShellAPI # ABM _ GETSTATE } Retrieves the autohide and always - on - top states of the Windows taskbar . <nl> - * 	 { @ link ShellAPI # ABM _ GETTASKBARPOS } Retrieves the bounding rectangle of the Windows taskbar . Note that this applies only to the system taskbar . Other objects , particularly toolbars supplied with third - party software , also can be present . As a result , some of the screen area not covered by the Windows taskbar might not be visible to the user . To retrieve the area of the screen not covered by both the taskbar and other app bars - - the working area available to your application - - , use the GetMonitorInfo function . <nl> - * 	 { @ link ShellAPI # ABM _ ACTIVATE } Notifies the system to activate or deactivate an appbar . The lParam member of the APPBARDATA pointed to by pData is set to TRUE to activate or FALSE to deactivate . <nl> - * 	 { @ link ShellAPI # ABM _ GETAUTOHIDEBAR } Retrieves the handle to the autohide appbar associated with a particular edge of the screen . <nl> - * 	 { @ link ShellAPI # ABM _ SETAUTOHIDEBAR } Registers or unregisters an autohide appbar for an edge of the screen . <nl> - * 	 { @ link ShellAPI # ABM _ WINDOWPOSCHANGED } Notifies the system when an appbar ' s position has changed . <nl> + * { @ link ShellAPI # ABM _ GETSTATE } Retrieves the autohide and always - on - top states of the Windows taskbar . <nl> + * { @ link ShellAPI # ABM _ GETTASKBARPOS } Retrieves the bounding rectangle of the Windows taskbar . Note that this applies only to the system taskbar . Other objects , particularly toolbars supplied with third - party software , also can be present . As a result , some of the screen area not covered by the Windows taskbar might not be visible to the user . To retrieve the area of the screen not covered by both the taskbar and other app bars - - the working area available to your application - - , use the GetMonitorInfo function . <nl> + * { @ link ShellAPI # ABM _ ACTIVATE } Notifies the system to activate or deactivate an appbar . The lParam member of the APPBARDATA pointed to by pData is set to TRUE to activate or FALSE to deactivate . <nl> + * { @ link ShellAPI # ABM _ GETAUTOHIDEBAR } Retrieves the handle to the autohide appbar associated with a particular edge of the screen . <nl> + * { @ link ShellAPI # ABM _ SETAUTOHIDEBAR } Registers or unregisters an autohide appbar for an edge of the screen . <nl> + * { @ link ShellAPI # ABM _ WINDOWPOSCHANGED } Notifies the system when an appbar ' s position has changed . <nl> * { @ link ShellAPI # ABM _ SETSTATE } Windows XP and later : Sets the state of the appbar ' s autohide and always - on - top attributes . <nl> * <nl> * @ param pData <nl> @ @ - 307 , 7 + 308 , 7 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { <nl> * about the application being executed . <nl> * < / p > <nl> * @ return <nl> - * 	 	 < p > <nl> + * < p > <nl> * Returns < strong > TRUE < / strong > if successful ; otherwise , <nl> * < strong > FALSE < / strong > . Call < a href = <nl> * " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms679360 ( v = vs . 85 ) . aspx " > <nl> @ @ - 330 , 6 + 331 , 50 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { <nl> * @ return If this function succeeds , it returns S _ OK . Otherwise , it returns an HRESULT error code . <nl> * <nl> * / <nl> - WinNT . HRESULT SHGetSpecialFolderLocation ( WinDef . HWND hwndOwner , int nFolder , PointerByReference ppidl ) ; <nl> + HRESULT SHGetSpecialFolderLocation ( WinDef . HWND hwndOwner , int nFolder , PointerByReference ppidl ) ; <nl> + <nl> + / * * <nl> + * @ param lpszFile <nl> + * Type : LPCTSTR < br > <nl> + * The name of an executable file , DLL , or icon file from which <nl> + * icons will be extracted . <nl> + * @ param nIconIndex <nl> + * Type : int < br > <nl> + * The zero - based index of the first icon to extract . For <nl> + * example , if this value is zero , the function extracts the <nl> + * first icon in the specified file . < br > <nl> + * If this value is - 1 and phiconLarge and phiconSmall are both <nl> + * NULL , the function returns the total number of icons in the <nl> + * specified file . < br > <nl> + * If the file is an executable file or DLL , the return value is <nl> + * the number of RT _ GROUP _ ICON resources . < br > <nl> + * If the file is an . ico file , the return value is 1 . If this <nl> + * value is a negative number and either phiconLarge or <nl> + * phiconSmall is not NULL , the function begins by extracting the <nl> + * icon whose resource identifier is equal to the absolute value <nl> + * of nIconIndex . For example , use - 3 to extract the icon whose <nl> + * resource identifier is 3 . <nl> + * @ param phiconLarge <nl> + * Type : HICON * < br > <nl> + * An array of icon handles that receives handles to the large <nl> + * icons extracted from the file . If this parameter is NULL , no <nl> + * large icons are extracted from the file . <nl> + * @ param phiconSmall <nl> + * Type : HICON * < br > <nl> + * An array of icon handles that receives handles to the small <nl> + * icons extracted from the file . If this parameter is NULL , no <nl> + * small icons are extracted from the file . <nl> + * @ param nIcons <nl> + * Type : UINT < br > <nl> + * The number of icons to be extracted from the file . <nl> + * @ return Type : UINT < br > <nl> + * If the nIconIndex parameter is - 1 , the phiconLarge parameter is <nl> + * NULL , and the phiconSmall parameter is NULL , then the return <nl> + * value is the number of icons contained in the specified file . <nl> + * Otherwise , the return value is the number of icons successfully <nl> + * extracted from the file . <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / ms648069 ( VS . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + int ExtractIconEx ( String lpszFile , int nIconIndex , HICON [ ] phiconLarge , HICON [ ] phiconSmall , int nIcons ) ; <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> index 85de588 . . 005fa16 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import java . util . List ; <nl> import com . sun . jna . FromNativeContext ; <nl> import com . sun . jna . IntegerType ; <nl> import com . sun . jna . Memory ; <nl> + import com . sun . jna . Native ; <nl> import com . sun . jna . NativeLong ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . PointerType ; <nl> @ @ - 666 , 14 + 667 , 99 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> / / AccessSystemAcl access type <nl> / / <nl> <nl> - int ACCESS _ SYSTEM _ SECURITY = 0x01000000 ; <nl> + int ACCESS _ SYSTEM _ SECURITY = 0x01000000 ; <nl> <nl> - int PAGE _ READONLY = 0x02 ; <nl> - int PAGE _ READWRITE = 0x04 ; <nl> + / * * <nl> + * Pages in the region become guard pages . < br > <nl> + * Any attempt to access a guard page causes the system to raise a <nl> + * STATUS _ GUARD _ PAGE _ VIOLATION exception and turn off the guard page status . <nl> + * < br > <nl> + * Guard pages thus act as a one - time access alarm . < br > <nl> + * For more information , see Creating Guard Pages . < br > <nl> + * When an access attempt leads the system to turn off guard page status , <nl> + * the underlying page protection takes over . < br > <nl> + * If a guard page exception occurs during a system service , the service <nl> + * typically returns a failure status indicator . < br > <nl> + * This value cannot be used with PAGE _ NOACCESS . This flag is not supported <nl> + * by the CreateFileMapping function . <nl> + * <nl> + * @ see < a href = <nl> + * " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > <nl> + * MSDN < / a > <nl> + * / <nl> + int PAGE _ GUARD = 0x100 ; <nl> + <nl> + / * * <nl> + * Disables all access to the committed region of pages . < br > <nl> + * An attempt to read from , write to , or execute the committed region <nl> + * results in an access violation . < br > <nl> + * This flag is not supported by the CreateFileMapping function . <nl> + * <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + int PAGE _ NOACCESS = 0x01 ; <nl> + <nl> + / * * <nl> + * Enables read - only access to the committed region of pages . < br > <nl> + * An attempt to write to the committed region results in an access <nl> + * violation . < br > <nl> + * If Data Execution Prevention is enabled , an attempt to execute code in <nl> + * the committed region results in an access violation . <nl> + * <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + int PAGE _ READONLY = 0x02 ; <nl> + <nl> + / * * <nl> + * Enables read - only or read / write access to the committed region of pages . < br > <nl> + * If Data Execution Prevention is enabled , attempting to execute code in <nl> + * the committed region results in an access violation . <nl> + * <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + int PAGE _ READWRITE = 0x04 ; <nl> + <nl> + / * * <nl> + * Enables read - only or copy - on - write access to a mapped view of a file <nl> + * mapping object . An attempt to write to a committed copy - on - write page <nl> + * results in a private copy of the page being made for the process . The <nl> + * private page is marked as PAGE _ READWRITE , and the change is written to <nl> + * the new page . If Data Execution Prevention is enabled , attempting to <nl> + * execute code in the committed region results in an access violation . <nl> + * <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> int PAGE _ WRITECOPY = 0x08 ; <nl> - int PAGE _ EXECUTE = 0x10 ; <nl> - int PAGE _ EXECUTE _ READ = 0x20 ; <nl> - int PAGE _ EXECUTE _ READWRITE = 0x40 ; <nl> + <nl> + / * * <nl> + * Enables execute access to the committed region of pages . An attempt to <nl> + * write to the committed region results in an access violation . This flag <nl> + * is not supported by the CreateFileMapping function . <nl> + * <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + int PAGE _ EXECUTE = 0x10 ; <nl> + <nl> + / * * <nl> + * Enables execute or read - only access to the committed region of pages . An <nl> + * attempt to write to the committed region results in an access violation . <nl> + * Windows Server 2003 and Windows XP : This attribute is not supported by <nl> + * the CreateFileMapping function until Windows XP with SP2 and Windows <nl> + * Server 2003 with SP1 . <nl> + * <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + int PAGE _ EXECUTE _ READ = 0x20 ; <nl> + <nl> + / * * <nl> + * Enables execute , read - only , or read / write access to the committed region <nl> + * of pages . Windows Server 2003 and Windows XP : This attribute is not <nl> + * supported by the CreateFileMapping function until Windows XP with SP2 and <nl> + * Windows Server 2003 with SP1 . <nl> + * <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + int PAGE _ EXECUTE _ READWRITE = 0x40 ; <nl> <nl> int SECTION _ QUERY = 0x0001 ; <nl> int SECTION _ MAP _ WRITE = 0x0002 ; <nl> @ @ - 1864 , 6 + 1950 , 59 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> super ( memory ) ; <nl> read ( ) ; <nl> } <nl> + <nl> + <nl> + <nl> + / * * <nl> + * @ return The major version number of the operating system . <nl> + * / <nl> + public int getMajor ( ) { <nl> + return dwMajorVersion . intValue ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The minor version number of the operating system . <nl> + * / <nl> + public int getMinor ( ) { <nl> + return dwMinorVersion . intValue ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The build number of the operating system . <nl> + * / <nl> + public int getBuildNumber ( ) { <nl> + return dwBuildNumber . intValue ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The operating system platform . This member can be VER _ PLATFORM _ WIN32 _ NT . <nl> + * / <nl> + public int getPlatformId ( ) { <nl> + return dwPlatformId . intValue ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return String , such as " Service Pack 3 " , that indicates the latest <nl> + * Service Pack installed on the system . < br > <nl> + * If no Service Pack has been installed , the string is empty . <nl> + * / <nl> + public String getServicePack ( ) { <nl> + return Native . toString ( szCSDVersion ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return A bit mask that identifies the product suites available on the system . <nl> + * / <nl> + public int getSuiteMask ( ) { <nl> + return wSuiteMask . intValue ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return Any additional information about the system . <nl> + * / <nl> + public byte getProductType ( ) { <nl> + return wProductType ; <nl> + } <nl> } <nl> <nl> int VER _ EQUAL = 1 ; <nl> @ @ - 2137 , 6 + 2276 , 42 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { <nl> 	 * / <nl> 	 int PROCESS _ DUP _ HANDLE = 0x0040 ; <nl> <nl> + / * * <nl> + * All possible access rights for a process object . Windows Server 2003 and <nl> + * Windows XP : The size of the PROCESS _ ALL _ ACCESS flag increased on Windows <nl> + * Server 2008 and Windows Vista . < br > <nl> + * If an application compiled for Windows Server 2008 and Windows Vista is <nl> + * run on Windows Server 2003 or Windows XP , the PROCESS _ ALL _ ACCESS flag is <nl> + * too large and the function specifying this flag fails with <nl> + * ERROR _ ACCESS _ DENIED . < br > <nl> + * To avoid this problem , specify the minimum set of access rights required <nl> + * for the operation . < br > <nl> + * If PROCESS _ ALL _ ACCESS must be used , set _ WIN32 _ WINNT to the minimum <nl> + * operating system targeted by your application ( for example , # define <nl> + * _ WIN32 _ WINNT _ WIN32 _ WINNT _ WINXP ) . < br > <nl> + * For more information , see Using the Windows Headers . <nl> + * <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / ms684880 ( v = VS . 85 ) . aspx " > MSDN < / a > <nl> + * / <nl> + int PROCESS _ ALL _ ACCESS = WinNT . PROCESS _ CREATE _ PROCESS <nl> + | WinNT . PROCESS _ CREATE _ THREAD <nl> + | WinNT . PROCESS _ DUP _ HANDLE <nl> + | WinNT . PROCESS _ QUERY _ INFORMATION <nl> + | WinNT . PROCESS _ QUERY _ LIMITED _ INFORMATION <nl> + | WinNT . PROCESS _ SET _ INFORMATION <nl> + | WinNT . PROCESS _ SET _ QUOTA <nl> + | WinNT . PROCESS _ SUSPEND _ RESUME <nl> + | WinNT . PROCESS _ SYNCHRONIZE <nl> + | WinNT . PROCESS _ TERMINATE <nl> + | WinNT . PROCESS _ VM _ OPERATION <nl> + | WinNT . PROCESS _ VM _ READ <nl> + | WinNT . PROCESS _ VM _ WRITE <nl> + | WinNT . DELETE <nl> + | WinNT . READ _ CONTROL <nl> + | WinNT . WRITE _ DAC <nl> + | WinNT . WRITE _ OWNER <nl> + | WinNT . SYNCHRONIZE ; <nl> + 	 <nl> 	 / * * <nl> 	 * Required to retrieve certain information about a process , such as its <nl> 	 * token , exit code , and priority class ( see <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> index 065290f . . 644bc0d 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> @ @ - 382 , 13 + 382 , 13 @ @ public class Kernel32Test extends TestCase { <nl> OSVERSIONINFOEX lpVersionInfo = new OSVERSIONINFOEX ( ) ; <nl> assertEquals ( lpVersionInfo . size ( ) , lpVersionInfo . dwOSVersionInfoSize . longValue ( ) ) ; <nl> assertTrue ( Kernel32 . INSTANCE . GetVersionEx ( lpVersionInfo ) ) ; <nl> - assertTrue ( lpVersionInfo . dwMajorVersion . longValue ( ) > 0 ) ; <nl> - assertTrue ( lpVersionInfo . dwMinorVersion . longValue ( ) > = 0 ) ; <nl> + assertTrue ( lpVersionInfo . getMajor ( ) > 0 ) ; <nl> + assertTrue ( lpVersionInfo . getMinor ( ) > = 0 ) ; <nl> assertEquals ( lpVersionInfo . size ( ) , lpVersionInfo . dwOSVersionInfoSize . longValue ( ) ) ; <nl> - assertTrue ( lpVersionInfo . dwPlatformId . longValue ( ) > 0 ) ; <nl> - assertTrue ( lpVersionInfo . dwBuildNumber . longValue ( ) > 0 ) ; <nl> - assertTrue ( Native . toString ( lpVersionInfo . szCSDVersion ) . length ( ) > = 0 ) ; <nl> - assertTrue ( lpVersionInfo . wProductType > = 0 ) ; <nl> + assertTrue ( lpVersionInfo . getPlatformId ( ) > 0 ) ; <nl> + assertTrue ( lpVersionInfo . getBuildNumber ( ) > 0 ) ; <nl> + assertTrue ( lpVersionInfo . getServicePack ( ) . length ( ) > = 0 ) ; <nl> + assertTrue ( lpVersionInfo . getProductType ( ) > = 0 ) ; <nl> } <nl> <nl> public void testGetSystemInfo ( ) { <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / PsapiTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / PsapiTest . java <nl> index 560f50d . . c77e2e9 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / PsapiTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / PsapiTest . java <nl> @ @ - 14 , 12 + 14 , 17 @ @ package com . sun . jna . platform . win32 ; <nl> <nl> import static org . junit . Assert . assertTrue ; <nl> <nl> + import java . util . LinkedList ; <nl> + import java . util . List ; <nl> + <nl> import javax . swing . JFrame ; <nl> <nl> import org . junit . Test ; <nl> <nl> import com . sun . jna . Memory ; <nl> import com . sun . jna . Native ; <nl> + import com . sun . jna . platform . win32 . Psapi . MODULEINFO ; <nl> + import com . sun . jna . platform . win32 . WinDef . HMODULE ; <nl> import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> @ @ - 94 , 4 + 99 , 129 @ @ public class PsapiTest { <nl> 	 	 	 w . dispose ( ) ; <nl> 	 	 } <nl> 	 } <nl> + 	 <nl> + 	 @ Test <nl> + public void testEnumProcessModules ( ) { <nl> + HANDLE me = null ; <nl> + Win32Exception we = null ; <nl> + <nl> + try { <nl> + me = Kernel32 . INSTANCE . OpenProcess ( WinNT . PROCESS _ ALL _ ACCESS , false , Kernel32 . INSTANCE . GetCurrentProcessId ( ) ) ; <nl> + assertTrue ( " Handle to my process should not be null " , me ! = null ) ; <nl> + <nl> + List < HMODULE > list = new LinkedList < HMODULE > ( ) ; <nl> + <nl> + HMODULE [ ] lphModule = new HMODULE [ 100 * 4 ] ; <nl> + IntByReference lpcbNeeded = new IntByReference ( ) ; <nl> + <nl> + if ( ! Psapi . INSTANCE . EnumProcessModules ( me , lphModule , lphModule . length , lpcbNeeded ) ) { <nl> + throw new Win32Exception ( Native . getLastError ( ) ) ; <nl> + } <nl> + <nl> + for ( int i = 0 ; i < lpcbNeeded . getValue ( ) / 4 ; i + + ) { <nl> + list . add ( lphModule [ i ] ) ; <nl> + } <nl> + <nl> + assertTrue ( " List should have at least 1 item in it . " , list . size ( ) > 0 ) ; <nl> + } catch ( Win32Exception e ) { <nl> + we = e ; <nl> + } finally { <nl> + if ( me ! = null ) { <nl> + if ( ! Kernel32 . INSTANCE . CloseHandle ( me ) ) { <nl> + Win32Exception e = new Win32Exception ( Native . getLastError ( ) ) ; <nl> + if ( we ! = null ) { <nl> + e . addSuppressed ( we ) ; <nl> + } <nl> + we = e ; <nl> + } <nl> + } <nl> + } <nl> + if ( we ! = null ) { <nl> + throw we ; <nl> + } <nl> + <nl> + } <nl> + 	 <nl> + 	 @ Test <nl> + public void testGetModuleInformation ( ) { <nl> + HANDLE me = null ; <nl> + Win32Exception we = null ; <nl> + <nl> + try { <nl> + me = Kernel32 . INSTANCE . OpenProcess ( WinNT . PROCESS _ ALL _ ACCESS , false , Kernel32 . INSTANCE . GetCurrentProcessId ( ) ) ; <nl> + assertTrue ( " Handle to my process should not be null " , me ! = null ) ; <nl> + <nl> + List < HMODULE > list = new LinkedList < HMODULE > ( ) ; <nl> + <nl> + HMODULE [ ] lphModule = new HMODULE [ 100 * 4 ] ; <nl> + IntByReference lpcbNeeded = new IntByReference ( ) ; <nl> + <nl> + if ( ! Psapi . INSTANCE . EnumProcessModules ( me , lphModule , lphModule . length , lpcbNeeded ) ) { <nl> + throw new Win32Exception ( Native . getLastError ( ) ) ; <nl> + } <nl> + <nl> + for ( int i = 0 ; i < lpcbNeeded . getValue ( ) / 4 ; i + + ) { <nl> + list . add ( lphModule [ i ] ) ; <nl> + } <nl> + <nl> + assertTrue ( " List should have at least 1 item in it . " , list . size ( ) > 0 ) ; <nl> + <nl> + MODULEINFO lpmodinfo = new MODULEINFO ( ) ; <nl> + <nl> + if ( ! Psapi . INSTANCE . GetModuleInformation ( me , list . get ( 0 ) , lpmodinfo , lpmodinfo . size ( ) ) ) { <nl> + throw new Win32Exception ( Native . getLastError ( ) ) ; <nl> + } <nl> + <nl> + assertTrue ( " MODULEINFO . EntryPoint should not be null . " , lpmodinfo . EntryPoint ! = null ) ; <nl> + <nl> + } catch ( Win32Exception e ) { <nl> + we = e ; <nl> + } finally { <nl> + if ( me ! = null ) { <nl> + if ( ! Kernel32 . INSTANCE . CloseHandle ( me ) ) { <nl> + Win32Exception e = new Win32Exception ( Native . getLastError ( ) ) ; <nl> + if ( we ! = null ) { <nl> + e . addSuppressed ( we ) ; <nl> + } <nl> + we = e ; <nl> + } <nl> + } <nl> + } <nl> + if ( we ! = null ) { <nl> + throw we ; <nl> + } <nl> + <nl> + } <nl> + 	 <nl> + 	 @ Test <nl> + public void testGetProcessImageFileName ( ) { <nl> + HANDLE me = null ; <nl> + Win32Exception we = null ; <nl> + <nl> + try { <nl> + me = Kernel32 . INSTANCE . OpenProcess ( WinNT . PROCESS _ ALL _ ACCESS , false , Kernel32 . INSTANCE . GetCurrentProcessId ( ) ) ; <nl> + assertTrue ( " Handle to my process should not be null " , me ! = null ) ; <nl> + <nl> + char [ ] buffer = new char [ 256 ] ; <nl> + Psapi . INSTANCE . GetProcessImageFileName ( me , buffer , 256 ) ; <nl> + String path = new String ( buffer ) ; <nl> + assertTrue ( " Image path should contain ' java ' and ' . exe ' " , path . contains ( " java " ) & & path . contains ( " . exe " ) ) ; <nl> + } catch ( Win32Exception e ) { <nl> + we = e ; <nl> + } finally { <nl> + if ( me ! = null ) { <nl> + if ( ! Kernel32 . INSTANCE . CloseHandle ( me ) ) { <nl> + Win32Exception e = new Win32Exception ( Native . getLastError ( ) ) ; <nl> + if ( we ! = null ) { <nl> + e . addSuppressed ( we ) ; <nl> + } <nl> + we = e ; <nl> + } <nl> + } <nl> + } <nl> + if ( we ! = null ) { <nl> + throw we ; <nl> + } <nl> + <nl> + } <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java <nl> index 609166e . . 66171e4 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java <nl> @ @ - 225 , 4 + 225 , 13 @ @ public class Shell32Test extends TestCase { <nl> fileWriter . close ( ) ; <nl> } <nl> } <nl> + <nl> + public void testExtractIconEx ( ) { <nl> + String winDir = Kernel32Util . getEnvironmentVariable ( " WINDIR " ) ; <nl> + assertNotNull ( " No WINDIR value returned " , winDir ) ; <nl> + assertTrue ( " Specified WINDIR does not exist : " + winDir , new File ( winDir ) . exists ( ) ) ; <nl> + <nl> + int iconCount = Shell32 . INSTANCE . ExtractIconEx ( new File ( winDir , " explorer . exe " ) . getAbsolutePath ( ) , - 1 , null , null , 1 ) ; <nl> + assertTrue ( " Should be at least two icons in explorer . exe " , iconCount > 1 ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> index e29ebe3 . . e451069 100644 <nl> - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> @ @ - 378 , 8 + 378 , 17 @ @ public interface Advapi32 extends StdCallLibrary { <nl> 	 * @ return <nl> 	 * If the function succeeds , the return value is nonzero . <nl> 	 * / <nl> - 	 public boolean ImpersonateLoggedOnUser ( <nl> - 	 	 	 HANDLE hToken ) ; <nl> + 	 public boolean ImpersonateLoggedOnUser ( HANDLE hToken ) ; <nl> + 	 <nl> + 	 / * * <nl> + 	 * The ImpersonateSelf function obtains an access token that impersonates the security <nl> + 	 * context of the calling process . The token is assigned to the calling thread . <nl> + 	 * @ param ImpersonationLevel Specifies a SECURITY _ IMPERSONATION _ LEVEL enumerated type <nl> + 	 * that supplies the impersonation level of the new token . <nl> + 	 * @ return If the function succeeds , the return value is nonzero . <nl> + 	 * / <nl> + 	 public boolean ImpersonateSelf ( int ImpersonationLevel ) ; <nl> + <nl> 	 <nl> 	 / * * <nl> 	 * The RevertToSelf function terminates the impersonation of a client application . <nl> diff - - git a / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java b / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java <nl> index da08545 . . 257e9c7 100644 <nl> - - - a / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java <nl> + + + b / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java <nl> @ @ - 801 , 4 + 801 , 9 @ @ public class Advapi32Test extends TestCase { <nl> 	 assertTrue ( Advapi32 . INSTANCE . AdjustTokenPrivileges ( hToken . getValue ( ) , false , tp , 0 , null , null ) ) ; <nl> 	 assertTrue ( Kernel32 . INSTANCE . CloseHandle ( hToken . getValue ( ) ) ) ; <nl> } <nl> + <nl> + public void testImpersonateSelf ( ) { <nl> + 	 assertTrue ( Advapi32 . INSTANCE . ImpersonateSelf ( WinNT . SECURITY _ IMPERSONATION _ LEVEL . SecurityAnonymous ) ) ; <nl> + 	 assertTrue ( Advapi32 . INSTANCE . RevertToSelf ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / jnalib / release - notes . html b / jnalib / release - notes . html <nl> index de8a53c . . d3f78d4 100755 <nl> - - - a / jnalib / release - notes . html <nl> + + + b / jnalib / release - notes . html <nl> @ @ - 2 , 7 + 2 , 7 @ @ <nl> < h2 > Release 3 . x . x < / h2 > <nl> < h3 > Features < / h3 > <nl> < ul > <nl> - < li > Add < code > platform . win32 . Advapi32 . AdjustTokenPrivileges < / code > , < code > platform . win32 . Advapi32 . LookupPrivilegeName < / code > , < code > platform . win32 . Advapi32 . LookupPrivilegeValue < / code > . <nl> + < li > Add < code > platform . win32 . Advapi32 . AdjustTokenPrivileges < / code > , < code > platform . win32 . Advapi32 . LookupPrivilegeName < / code > , < code > platform . win32 . Advapi32 . LookupPrivilegeValue < / code > , < code > platform . win32 . Advapi32 . ImpersonateSelf < / code > . <nl> < li > Add < code > platform . win32 . Advapi32 . DuplicateTokenEx < / code > , < code > platform . win32 . Advapi32 . CreateProcessAsUser < / code > , <nl> < code > platform . win32 . Kernel32 . GetExitCodeProcess < / code > , < code > platform . win32 . Kernel32 . TerminateProcess < / code > , < code > platform . win32 . Kernel32 . ReadFile < / code > , <nl> < code > platform . win32 . Kernel32 . CreatePipe < / code > , < code > platform . win32 . Kernel32 . SetHandleInformation < / code > and related constants / structures in < code > platform . win32 . WinBase < / code >

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index e25c3e6 . . f07408d 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 29 , 7 + 29 , 7 @ @ Features 
 * [ # 562 ] ( https : / / github . com / java - native - access / jna / pull / 562 ) : Added ` com . sun . jna . platform . win32 . VersionUtil ` with ` getFileVersionInfo ` utility method to get file major , minor , revision , and build version parts - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . 
 * [ # 563 ] ( https : / / github . com / java - native - access / jna / pull / 563 ) : Added ` com . sun . jna . platform . win32 . Wininet ` with the following 4 methods : ` FindFirstUrlCacheEntry ` , ` DeleteUrlCacheEntry ` , ` FindCloseUrlCache ` , ` FindNextUrlCacheEntry ` , and the ` INTERNET _ CACHE _ ENTRY _ INFO ` structure , and a helper in ` com . sun . jna . platform . win32 . WininetUtil ` for parsing WinInet ' s cache - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . 
 * [ # 567 ] ( https : / / github . com / java - native - access / jna / pull / 567 ) : Added ` PrintWindow ` , ` IsWindowEnabled ` , ` IsWindow ` , ` FindWindowEx ` , ` GetAncestor ` , ` GetCursorPos ` , ` SetCursorPos ` , ` SetWinEventHook ` , ` UnhookWinEvent ` , ` CopyIcon ` , and ` GetClassLong ` to ` com . sun . jna . platform . win32 . User32 ` and supporting constants to ` com . sun . jna . platform . win32 . WinUser ` - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . 
 - 
 + * [ # 573 ] ( https : / / github . com / java - native - access / jna / pull / 573 ) : Added ` EnumProcessModules ` , ` GetModuleInformation ` , and ` GetProcessImageFileName ` to ` com . sun . jna . platform . win32 . Psapi ` and added ` ExtractIconEx ` to ` com . sun . jna . platform . win32 . Shell32 ` - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Psapi . java b / contrib / platform / src / com / sun / jna / platform / win32 / Psapi . java 
 index 50b1426 . . 72a2136 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Psapi . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Psapi . java 
 @ @ - 12 , 9 + 12 , 15 @ @ 
 * / 
 package com . sun . jna . platform . win32 ; 
 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 + import com . sun . jna . Structure ; 
 + import com . sun . jna . platform . win32 . WinDef . HMODULE ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 + import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . win32 . StdCallLibrary ; 
 import com . sun . jna . win32 . W32APIOptions ; 
 
 @ @ - 26 , 77 + 32 , 217 @ @ import com . sun . jna . win32 . W32APIOptions ; 
 * @ author Andreas " PAX " L & uuml ; ck , onkelpax - git [ at ] yahoo . de 
 * / 
 public interface Psapi extends StdCallLibrary { 
 - 	 Psapi INSTANCE = Native . loadLibrary ( " psapi " , Psapi . class , W32APIOptions . DEFAULT _ OPTIONS ) ; 
 - 	 
 - 	 / * * 
 - 	 * Retrieves the fully qualified path for the file containing the specified 
 - 	 * module . 
 - 	 * 
 - 	 * @ param process 
 - 	 * A handle to the process that contains the module . 
 - 	 * @ param module 
 - 	 * A handle to the module . If this parameter is NULL , 
 - 	 * GetModuleFileNameEx returns the path of the executable file of 
 - 	 * the process specified in hProcess . 
 - 	 * @ param lpFilename 
 - 	 * A pointer to a buffer that receives the fully qualified path 
 - 	 * to the module . If the size of the file name is larger than the 
 - 	 * value of the nSize parameter , the function succeeds but the 
 - 	 * file name is truncated and null - terminated . 
 - 	 * @ param nSize 
 - 	 * The size of the lpFilename buffer , in characters . 
 - 	 * @ return If the function succeeds , the return value specifies the length 
 - 	 * of the string copied to the buffer . If the function fails , the 
 - 	 * return value is zero . To get extended error information , call 
 - 	 * { @ link Kernel32Util # getLastErrorMessage ( ) } . 
 - 	 * / 
 - 	 int GetModuleFileNameExA ( HANDLE process , HANDLE module , byte [ ] lpFilename , int nSize ) ; 
 - 	 
 - 	 / * * 
 - 	 * Retrieves the fully qualified path for the file containing the specified 
 - 	 * module . 
 - 	 * 
 - 	 * @ param process 
 - 	 * A handle to the process that contains the module . 
 - 	 * @ param module 
 - 	 * A handle to the module . If this parameter is NULL , 
 - 	 * GetModuleFileNameEx returns the path of the executable file of 
 - 	 * the process specified in hProcess . 
 - 	 * @ param lpFilename 
 - 	 * A pointer to a buffer that receives the fully qualified path 
 - 	 * to the module . If the size of the file name is larger than the 
 - 	 * value of the nSize parameter , the function succeeds but the 
 - 	 * file name is truncated and null - terminated . 
 - 	 * @ param nSize 
 - 	 * The size of the lpFilename buffer , in characters . 
 - 	 * @ return If the function succeeds , the return value specifies the length 
 - 	 * of the string copied to the buffer . If the function fails , the 
 - 	 * return value is zero . To get extended error information , call 
 - 	 * { @ link Kernel32Util # getLastErrorMessage ( ) } . 
 - 	 * / 
 - 	 int GetModuleFileNameExW ( HANDLE process , HANDLE module , char [ ] lpFilename , int nSize ) ; 
 + Psapi INSTANCE = Native . loadLibrary ( " psapi " , Psapi . class , W32APIOptions . DEFAULT _ OPTIONS ) ; 
 + 
 + / * * 
 + * Retrieves the fully qualified path for the file containing the specified 
 + * module . 
 + * 
 + * @ param process 
 + * A handle to the process that contains the module . 
 + * @ param module 
 + * A handle to the module . If this parameter is NULL , 
 + * GetModuleFileNameEx returns the path of the executable file of 
 + * the process specified in hProcess . 
 + * @ param lpFilename 
 + * A pointer to a buffer that receives the fully qualified path 
 + * to the module . If the size of the file name is larger than the 
 + * value of the nSize parameter , the function succeeds but the 
 + * file name is truncated and null - terminated . 
 + * @ param nSize 
 + * The size of the lpFilename buffer , in characters . 
 + * @ return If the function succeeds , the return value specifies the length 
 + * of the string copied to the buffer . If the function fails , the 
 + * return value is zero . To get extended error information , call 
 + * { @ link Kernel32Util # getLastErrorMessage ( ) } . 
 + * / 
 + int GetModuleFileNameExA ( HANDLE process , HANDLE module , byte [ ] lpFilename , int nSize ) ; 
 + 
 + / * * 
 + * Retrieves the fully qualified path for the file containing the specified 
 + * module . 
 + * 
 + * @ param process 
 + * A handle to the process that contains the module . 
 + * @ param module 
 + * A handle to the module . If this parameter is NULL , 
 + * GetModuleFileNameEx returns the path of the executable file of 
 + * the process specified in hProcess . 
 + * @ param lpFilename 
 + * A pointer to a buffer that receives the fully qualified path 
 + * to the module . If the size of the file name is larger than the 
 + * value of the nSize parameter , the function succeeds but the 
 + * file name is truncated and null - terminated . 
 + * @ param nSize 
 + * The size of the lpFilename buffer , in characters . 
 + * @ return If the function succeeds , the return value specifies the length 
 + * of the string copied to the buffer . If the function fails , the 
 + * return value is zero . To get extended error information , call 
 + * { @ link Kernel32Util # getLastErrorMessage ( ) } . 
 + * / 
 + int GetModuleFileNameExW ( HANDLE process , HANDLE module , char [ ] lpFilename , int nSize ) ; 
 + 
 + / * * 
 + * Retrieves the fully qualified path for the file containing the specified 
 + * module . 
 + * 
 + * @ param process 
 + * A handle to the process that contains the module . 
 + * @ param module 
 + * A handle to the module . If this parameter is NULL , 
 + * GetModuleFileNameEx returns the path of the executable file of 
 + * the process specified in hProcess . 
 + * @ param lpFilename 
 + * A pointer to a buffer that receives the fully qualified path 
 + * to the module . If the size of the file name is larger than the 
 + * value of the nSize parameter , the function succeeds but the 
 + * file name is truncated and null - terminated . 
 + * @ param nSize 
 + * The size of the lpFilename buffer , in characters . 
 + * @ return If the function succeeds , the return value specifies the length 
 + * of the string copied to the buffer . If the function fails , the 
 + * return value is zero . To get extended error information , call 
 + * { @ link Kernel32Util # getLastErrorMessage ( ) } . 
 + * / 
 + int GetModuleFileNameEx ( HANDLE process , HANDLE module , Pointer lpFilename , int nSize ) ; 
 + 
 + / * * 
 + * 
 + * The EnumProcessModules function is primarily designed for use by 
 + * debuggers and similar applications that must extract module information 
 + * from another process . < br > 
 + * If the module list in the target process is corrupted or not yet 
 + * initialized , or if the module list changes during the function call as a 
 + * result of DLLs being loaded or unloaded , EnumProcessModules may fail or 
 + * return incorrect information . < br > 
 + * It is a good idea to specify a large array of HMODULE values , because it 
 + * is hard to predict how many modules there will be in the process at the 
 + * time you call EnumProcessModules . < br > 
 + * To determine if the lphModule array is too small to hold all module 
 + * handles for the process , compare the value returned in lpcbNeeded with 
 + * the value specified in cb . < br > 
 + * If lpcbNeeded is greater than cb , increase the size of the array and call 
 + * EnumProcessModules again . To determine how many modules were enumerated 
 + * by the call to EnumProcessModules , divide the resulting value in the 
 + * lpcbNeeded parameter by sizeof ( HMODULE ) . < br > 
 + * The EnumProcessModules function does not retrieve handles for modules 
 + * that were loaded with the LOAD _ LIBRARY _ AS _ DATAFILE or similar flags . For 
 + * more information , see LoadLibraryEx . < br > 
 + * Do not call CloseHandle on any of the handles returned by this function . 
 + * The information comes from a snapshot , so there are no resources to be 
 + * freed . < br > 
 + * If this function is called from a 32 - bit application running on WOW64 , it 
 + * can only enumerate the modules of a 32 - bit process . < br > 
 + * If the process is a 64 - bit process , this function fails and the last 
 + * error code is ERROR _ PARTIAL _ COPY ( 299 ) . < br > 
 + * To take a snapshot of specified processes and the heaps , modules , and 
 + * threads used by these processes , use the CreateToolhelp32Snapshot 
 + * function . < br > 
 + * Starting with Windows 7 and Windows Server 2008 R2 , Psapi . h establishes 
 + * version numbers for the PSAPI functions . < br > 
 + * The PSAPI version number affects the name used to call the function and 
 + * the library that a program must load . < br > 
 + * If PSAPI _ VERSION is 2 or greater , this function is defined as 
 + * K32EnumProcessModules in Psapi . h and exported in Kernel32 . lib and 
 + * Kernel32 . dll . < br > 
 + * If PSAPI _ VERSION is 1 , this function is defined as EnumProcessModules in 
 + * Psapi . h and exported in Psapi . lib and Psapi . dll as a wrapper that calls 
 + * K32EnumProcessModules . < br > 
 + * Programs that must run on earlier versions of Windows as well as Windows 
 + * 7 and later versions should always call this function as 
 + * EnumProcessModules . < br > 
 + * To ensure correct resolution of symbols , add Psapi . lib to the TARGETLIBS 
 + * macro and compile the program with - DPSAPI _ VERSION = 1 . < br > 
 + * To use run - time dynamic linking , load Psapi . dll . 
 + * 
 + * @ param hProcess 
 + * A handle to the process . 
 + * @ param lphModule 
 + * An array that receives the list of module handles . 
 + * @ param cb 
 + * The size of the lphModule array , in bytes . 
 + * @ param lpcbNeeded 
 + * The number of bytes required to store all module handles in 
 + * the lphModule array . 
 + * @ return If the function succeeds , the return value is nonzero . If the 
 + * function fails , the return value is zero . To get extended error 
 + * information , call GetLastError . 
 + * @ see < a href = " http : / / msdn . microsoft . com / en - us / library / ms682631 ( VS . 85 ) . aspx " > MSDN / a > 
 + * / 
 + boolean EnumProcessModules ( HANDLE hProcess , HMODULE [ ] lphModule , int cb , IntByReference lpcbNeeded ) ; 
 + 
 + / * * 
 + * To get information for the calling process , pass the handle returned by 
 + * GetCurrentProcess . < br > 
 + * The GetModuleInformation function does not retrieve information for 
 + * modules that were loaded with the LOAD _ LIBRARY _ AS _ DATAFILE flag . < br > 
 + * For more information , see LoadLibraryEx . < br > 
 + * Starting with Windows 7 and Windows Server 2008 R2 , Psapi . h establishes 
 + * version numbers for the PSAPI functions . < br > 
 + * The PSAPI version number affects the name used to call the function and 
 + * the library that a program must load . < br > 
 + * If PSAPI _ VERSION is 2 or greater , this function is defined as 
 + * K32GetModuleInformation in Psapi . h and exported in Kernel32 . lib and 
 + * Kernel32 . dll . < br > 
 + * If PSAPI _ VERSION is 1 , this function is defined as 
 + * K32GetModuleInformation in Psapi . h and exported in Psapi . lib and 
 + * Psapi . dll as a wrapper that calls K32GetModuleInformation . < br > 
 + * Programs that must run on earlier versions of Windows as well as Windows 
 + * 7 and later versions should always call this function as 
 + * K32GetModuleInformation . < br > 
 + * To ensure correct resolution of symbols , add Psapi . lib to the TARGETLIBS 
 + * macro and compile the program with - DPSAPI _ VERSION = 1 . < br > 
 + * To use run - time dynamic linking , load Psapi . dll . 
 + * 
 + * @ param hProcess 
 + * A handle to the process that contains the module . The handle 
 + * must have the PROCESS _ QUERY _ INFORMATION and PROCESS _ VM _ READ 
 + * access rights . For more information , see Process Security and 
 + * Access Rights . 
 + * @ param hModule 
 + * A handle to the module . 
 + * 
 + * @ param lpmodinfo 
 + * A pointer to the MODULEINFO structure that receives 
 + * information about the module . 
 + * @ param cb 
 + * The size of the MODULEINFO structure , in bytes . 
 + * @ return If the function succeeds , the return value is nonzero . If the 
 + * function fails , the return value is zero . To get extended error 
 + * information , call GetLastError . 
 + * @ see < a href = " http : / / msdn . microsoft . com / en - us / library / ms683201 ( VS . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + boolean GetModuleInformation ( HANDLE hProcess , HMODULE hModule , MODULEINFO lpmodinfo , int cb ) ; 
 + 
 + / * * 
 + * @ param hProcess 
 + * A handle to the process . The handle must have the 
 + * PROCESS _ QUERY _ INFORMATION or PROCESS _ QUERY _ LIMITED _ INFORMATION 
 + * access right . For more information , see Process Security and 
 + * Access Rights . < br > 
 + * Windows Server 2003 and Windows XP : The handle must have the 
 + * PROCESS _ QUERY _ INFORMATION access right . 
 + * @ param lpImageFileName 
 + * A pointer to a buffer that receives the full path to the 
 + * executable file . 
 + * @ param nSize 
 + * The size of the lpImageFileName buffer , in characters . 
 + * @ return If the function succeeds , the return value specifies the length 
 + * of the string copied to the buffer . If the function fails , the 
 + * return value is zero . To get extended error information , call 
 + * GetLastError . 
 + * @ see < a href = " http : / / msdn . microsoft . com / en - us / library / ms683217 ( VS . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + int GetProcessImageFileName ( HANDLE hProcess , char [ ] lpImageFileName , int nSize ) ; 
 + 
 + class MODULEINFO extends Structure { 
 + public Pointer EntryPoint ; 
 + public Pointer lpBaseOfDll ; 
 + public int SizeOfImage ; 
 
 - 	 / * * 
 - 	 * Retrieves the fully qualified path for the file containing the specified 
 - 	 * module . 
 - 	 * 
 - 	 * @ param process 
 - 	 * A handle to the process that contains the module . 
 - 	 * @ param module 
 - 	 * A handle to the module . If this parameter is NULL , 
 - 	 * GetModuleFileNameEx returns the path of the executable file of 
 - 	 * the process specified in hProcess . 
 - 	 * @ param lpFilename 
 - 	 * A pointer to a buffer that receives the fully qualified path 
 - 	 * to the module . If the size of the file name is larger than the 
 - 	 * value of the nSize parameter , the function succeeds but the 
 - 	 * file name is truncated and null - terminated . 
 - 	 * @ param nSize 
 - 	 * The size of the lpFilename buffer , in characters . 
 - 	 * @ return If the function succeeds , the return value specifies the length 
 - 	 * of the string copied to the buffer . If the function fails , the 
 - 	 * return value is zero . To get extended error information , call 
 - 	 * { @ link Kernel32Util # getLastErrorMessage ( ) } . 
 - 	 * / 
 - 	 int GetModuleFileNameEx ( HANDLE process , HANDLE module , Pointer lpFilename , int nSize ) ; 
 + @ Override 
 + protected List getFieldOrder ( ) { 
 + return Arrays . asList ( new String [ ] { " lpBaseOfDll " , " SizeOfImage " , " EntryPoint " } ) ; 
 + } 
 + } 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java 
 index 9c560d2 . . eb74a1d 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Shell32 . java 
 @ @ - 15 , 6 + 15 , 7 @ @ package com . sun . jna . platform . win32 ; 
 import com . sun . jna . Native ; 
 import com . sun . jna . platform . win32 . Guid . GUID ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 + import com . sun . jna . platform . win32 . WinDef . HICON ; 
 import com . sun . jna . platform . win32 . WinDef . HWND ; 
 import com . sun . jna . platform . win32 . WinDef . INT _ PTR ; 
 import com . sun . jna . platform . win32 . WinDef . UINT _ PTR ; 
 @ @ - 31 , 41 + 32 , 41 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { 
 / * * The instance * * / 
 Shell32 INSTANCE = Native . loadLibrary ( " shell32 " , Shell32 . class , W32APIOptions . DEFAULT _ OPTIONS ) ; 
 
 - 	 / * * 
 - 	 * No dialog box confirming the deletion of the objects will be displayed . 
 - 	 * / 
 - 	 int SHERB _ NOCONFIRMATION = 0x00000001 ; 
 + / * * 
 + * No dialog box confirming the deletion of the objects will be displayed . 
 + * / 
 + int SHERB _ NOCONFIRMATION = 0x00000001 ; 
 
 - 	 / * * 
 - 	 * No dialog box indicating the progress will be displayed . 
 - 	 * / 
 - 	 int SHERB _ NOPROGRESSUI = 0x00000002 ; 
 + / * * 
 + * No dialog box indicating the progress will be displayed . 
 + * / 
 + int SHERB _ NOPROGRESSUI = 0x00000002 ; 
 
 - 	 / * * 
 - 	 * No sound will be played when the operation is complete . 
 - 	 * / 
 - 	 int SHERB _ NOSOUND = 0x00000004 ; 
 + / * * 
 + * No sound will be played when the operation is complete . 
 + * / 
 + int SHERB _ NOSOUND = 0x00000004 ; 
 
 - 	 / * * 
 - 	 * < p > 
 - 	 * < strong > SEE _ MASK _ NOCLOSEPROCESS < / strong > ( 0x00000040 ) 
 - 	 * < / p > 
 - 	 * < p > 
 - 	 * Use to indicate that the < strong > hProcess < / strong > member receives the 
 - 	 * process handle . This handle is typically used to allow an application to 
 - 	 * find out when a process created with terminates . In some cases , such as 
 - 	 * when execution is satisfied through a DDE conversation , no handle will be 
 - 	 * returned . The calling application is responsible for closing the handle 
 - 	 * when it is no longer needed . 
 - 	 * < / p > 
 - 	 * / 
 - 	 int SEE _ MASK _ NOCLOSEPROCESS = 0x00000040 ; 
 - 	 
 - 	 / * * 
 - 	 * Do not display an error message box if an error occurs . 
 - 	 * / 
 - 	 int SEE _ MASK _ FLAG _ NO _ UI = 0x00000400 ; 
 - 	 
 + / * * 
 + * < p > 
 + * < strong > SEE _ MASK _ NOCLOSEPROCESS < / strong > ( 0x00000040 ) 
 + * < / p > 
 + * < p > 
 + * Use to indicate that the < strong > hProcess < / strong > member receives the 
 + * process handle . This handle is typically used to allow an application to 
 + * find out when a process created with terminates . In some cases , such as 
 + * when execution is satisfied through a DDE conversation , no handle will be 
 + * returned . The calling application is responsible for closing the handle 
 + * when it is no longer needed . 
 + * < / p > 
 + * / 
 + int SEE _ MASK _ NOCLOSEPROCESS = 0x00000040 ; 
 + 
 + / * * 
 + * Do not display an error message box if an error occurs . 
 + * / 
 + int SEE _ MASK _ FLAG _ NO _ UI = 0x00000400 ; 
 + 
 / * * 
 * This function can be used to copy , move , rename , or delete a file system object . 
 * @ param fileop 
 @ @ - 239 , 15 + 240 , 15 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { 
 * @ param dwMessage 
 * Appbar message value to send . This parameter can be one of the following values . 
 * { @ link ShellAPI # ABM _ NEW } Registers a new appbar and specifies the message identifier that the system should use to send notification messages to the appbar . 
 - * 	 { @ link ShellAPI # ABM _ REMOVE } Unregisters an appbar , removing the bar from the system ' s internal list . 
 - * 	 { @ link ShellAPI # ABM _ QUERYPOS } Requests a size and screen position for an appbar . 
 + * { @ link ShellAPI # ABM _ REMOVE } Unregisters an appbar , removing the bar from the system ' s internal list . 
 + * { @ link ShellAPI # ABM _ QUERYPOS } Requests a size and screen position for an appbar . 
 * { @ link ShellAPI # ABM _ SETPOS } Sets the size and screen position of an appbar . 
 - * 	 { @ link ShellAPI # ABM _ GETSTATE } Retrieves the autohide and always - on - top states of the Windows taskbar . 
 - * 	 { @ link ShellAPI # ABM _ GETTASKBARPOS } Retrieves the bounding rectangle of the Windows taskbar . Note that this applies only to the system taskbar . Other objects , particularly toolbars supplied with third - party software , also can be present . As a result , some of the screen area not covered by the Windows taskbar might not be visible to the user . To retrieve the area of the screen not covered by both the taskbar and other app bars - - the working area available to your application - - , use the GetMonitorInfo function . 
 - * 	 { @ link ShellAPI # ABM _ ACTIVATE } Notifies the system to activate or deactivate an appbar . The lParam member of the APPBARDATA pointed to by pData is set to TRUE to activate or FALSE to deactivate . 
 - * 	 { @ link ShellAPI # ABM _ GETAUTOHIDEBAR } Retrieves the handle to the autohide appbar associated with a particular edge of the screen . 
 - * 	 { @ link ShellAPI # ABM _ SETAUTOHIDEBAR } Registers or unregisters an autohide appbar for an edge of the screen . 
 - * 	 { @ link ShellAPI # ABM _ WINDOWPOSCHANGED } Notifies the system when an appbar ' s position has changed . 
 + * { @ link ShellAPI # ABM _ GETSTATE } Retrieves the autohide and always - on - top states of the Windows taskbar . 
 + * { @ link ShellAPI # ABM _ GETTASKBARPOS } Retrieves the bounding rectangle of the Windows taskbar . Note that this applies only to the system taskbar . Other objects , particularly toolbars supplied with third - party software , also can be present . As a result , some of the screen area not covered by the Windows taskbar might not be visible to the user . To retrieve the area of the screen not covered by both the taskbar and other app bars - - the working area available to your application - - , use the GetMonitorInfo function . 
 + * { @ link ShellAPI # ABM _ ACTIVATE } Notifies the system to activate or deactivate an appbar . The lParam member of the APPBARDATA pointed to by pData is set to TRUE to activate or FALSE to deactivate . 
 + * { @ link ShellAPI # ABM _ GETAUTOHIDEBAR } Retrieves the handle to the autohide appbar associated with a particular edge of the screen . 
 + * { @ link ShellAPI # ABM _ SETAUTOHIDEBAR } Registers or unregisters an autohide appbar for an edge of the screen . 
 + * { @ link ShellAPI # ABM _ WINDOWPOSCHANGED } Notifies the system when an appbar ' s position has changed . 
 * { @ link ShellAPI # ABM _ SETSTATE } Windows XP and later : Sets the state of the appbar ' s autohide and always - on - top attributes . 
 * 
 * @ param pData 
 @ @ - 307 , 7 + 308 , 7 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { 
 * about the application being executed . 
 * < / p > 
 * @ return 
 - * 	 	 < p > 
 + * < p > 
 * Returns < strong > TRUE < / strong > if successful ; otherwise , 
 * < strong > FALSE < / strong > . Call < a href = 
 * " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms679360 ( v = vs . 85 ) . aspx " > 
 @ @ - 330 , 6 + 331 , 50 @ @ public interface Shell32 extends ShellAPI , StdCallLibrary { 
 * @ return If this function succeeds , it returns S _ OK . Otherwise , it returns an HRESULT error code . 
 * 
 * / 
 - WinNT . HRESULT SHGetSpecialFolderLocation ( WinDef . HWND hwndOwner , int nFolder , PointerByReference ppidl ) ; 
 + HRESULT SHGetSpecialFolderLocation ( WinDef . HWND hwndOwner , int nFolder , PointerByReference ppidl ) ; 
 + 
 + / * * 
 + * @ param lpszFile 
 + * Type : LPCTSTR < br > 
 + * The name of an executable file , DLL , or icon file from which 
 + * icons will be extracted . 
 + * @ param nIconIndex 
 + * Type : int < br > 
 + * The zero - based index of the first icon to extract . For 
 + * example , if this value is zero , the function extracts the 
 + * first icon in the specified file . < br > 
 + * If this value is - 1 and phiconLarge and phiconSmall are both 
 + * NULL , the function returns the total number of icons in the 
 + * specified file . < br > 
 + * If the file is an executable file or DLL , the return value is 
 + * the number of RT _ GROUP _ ICON resources . < br > 
 + * If the file is an . ico file , the return value is 1 . If this 
 + * value is a negative number and either phiconLarge or 
 + * phiconSmall is not NULL , the function begins by extracting the 
 + * icon whose resource identifier is equal to the absolute value 
 + * of nIconIndex . For example , use - 3 to extract the icon whose 
 + * resource identifier is 3 . 
 + * @ param phiconLarge 
 + * Type : HICON * < br > 
 + * An array of icon handles that receives handles to the large 
 + * icons extracted from the file . If this parameter is NULL , no 
 + * large icons are extracted from the file . 
 + * @ param phiconSmall 
 + * Type : HICON * < br > 
 + * An array of icon handles that receives handles to the small 
 + * icons extracted from the file . If this parameter is NULL , no 
 + * small icons are extracted from the file . 
 + * @ param nIcons 
 + * Type : UINT < br > 
 + * The number of icons to be extracted from the file . 
 + * @ return Type : UINT < br > 
 + * If the nIconIndex parameter is - 1 , the phiconLarge parameter is 
 + * NULL , and the phiconSmall parameter is NULL , then the return 
 + * value is the number of icons contained in the specified file . 
 + * Otherwise , the return value is the number of icons successfully 
 + * extracted from the file . 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / ms648069 ( VS . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + int ExtractIconEx ( String lpszFile , int nIconIndex , HICON [ ] phiconLarge , HICON [ ] phiconSmall , int nIcons ) ; 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 index 85de588 . . 005fa16 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import java . util . List ; 
 import com . sun . jna . FromNativeContext ; 
 import com . sun . jna . IntegerType ; 
 import com . sun . jna . Memory ; 
 + import com . sun . jna . Native ; 
 import com . sun . jna . NativeLong ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . PointerType ; 
 @ @ - 666 , 14 + 667 , 99 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 / / AccessSystemAcl access type 
 / / 
 
 - int ACCESS _ SYSTEM _ SECURITY = 0x01000000 ; 
 + int ACCESS _ SYSTEM _ SECURITY = 0x01000000 ; 
 
 - int PAGE _ READONLY = 0x02 ; 
 - int PAGE _ READWRITE = 0x04 ; 
 + / * * 
 + * Pages in the region become guard pages . < br > 
 + * Any attempt to access a guard page causes the system to raise a 
 + * STATUS _ GUARD _ PAGE _ VIOLATION exception and turn off the guard page status . 
 + * < br > 
 + * Guard pages thus act as a one - time access alarm . < br > 
 + * For more information , see Creating Guard Pages . < br > 
 + * When an access attempt leads the system to turn off guard page status , 
 + * the underlying page protection takes over . < br > 
 + * If a guard page exception occurs during a system service , the service 
 + * typically returns a failure status indicator . < br > 
 + * This value cannot be used with PAGE _ NOACCESS . This flag is not supported 
 + * by the CreateFileMapping function . 
 + * 
 + * @ see < a href = 
 + * " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > 
 + * MSDN < / a > 
 + * / 
 + int PAGE _ GUARD = 0x100 ; 
 + 
 + / * * 
 + * Disables all access to the committed region of pages . < br > 
 + * An attempt to read from , write to , or execute the committed region 
 + * results in an access violation . < br > 
 + * This flag is not supported by the CreateFileMapping function . 
 + * 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + int PAGE _ NOACCESS = 0x01 ; 
 + 
 + / * * 
 + * Enables read - only access to the committed region of pages . < br > 
 + * An attempt to write to the committed region results in an access 
 + * violation . < br > 
 + * If Data Execution Prevention is enabled , an attempt to execute code in 
 + * the committed region results in an access violation . 
 + * 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + int PAGE _ READONLY = 0x02 ; 
 + 
 + / * * 
 + * Enables read - only or read / write access to the committed region of pages . < br > 
 + * If Data Execution Prevention is enabled , attempting to execute code in 
 + * the committed region results in an access violation . 
 + * 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + int PAGE _ READWRITE = 0x04 ; 
 + 
 + / * * 
 + * Enables read - only or copy - on - write access to a mapped view of a file 
 + * mapping object . An attempt to write to a committed copy - on - write page 
 + * results in a private copy of the page being made for the process . The 
 + * private page is marked as PAGE _ READWRITE , and the change is written to 
 + * the new page . If Data Execution Prevention is enabled , attempting to 
 + * execute code in the committed region results in an access violation . 
 + * 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > 
 + * / 
 int PAGE _ WRITECOPY = 0x08 ; 
 - int PAGE _ EXECUTE = 0x10 ; 
 - int PAGE _ EXECUTE _ READ = 0x20 ; 
 - int PAGE _ EXECUTE _ READWRITE = 0x40 ; 
 + 
 + / * * 
 + * Enables execute access to the committed region of pages . An attempt to 
 + * write to the committed region results in an access violation . This flag 
 + * is not supported by the CreateFileMapping function . 
 + * 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + int PAGE _ EXECUTE = 0x10 ; 
 + 
 + / * * 
 + * Enables execute or read - only access to the committed region of pages . An 
 + * attempt to write to the committed region results in an access violation . 
 + * Windows Server 2003 and Windows XP : This attribute is not supported by 
 + * the CreateFileMapping function until Windows XP with SP2 and Windows 
 + * Server 2003 with SP1 . 
 + * 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + int PAGE _ EXECUTE _ READ = 0x20 ; 
 + 
 + / * * 
 + * Enables execute , read - only , or read / write access to the committed region 
 + * of pages . Windows Server 2003 and Windows XP : This attribute is not 
 + * supported by the CreateFileMapping function until Windows XP with SP2 and 
 + * Windows Server 2003 with SP1 . 
 + * 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa366786 ( v = vs . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + int PAGE _ EXECUTE _ READWRITE = 0x40 ; 
 
 int SECTION _ QUERY = 0x0001 ; 
 int SECTION _ MAP _ WRITE = 0x0002 ; 
 @ @ - 1864 , 6 + 1950 , 59 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 super ( memory ) ; 
 read ( ) ; 
 } 
 + 
 + 
 + 
 + / * * 
 + * @ return The major version number of the operating system . 
 + * / 
 + public int getMajor ( ) { 
 + return dwMajorVersion . intValue ( ) ; 
 + } 
 + 
 + / * * 
 + * @ return The minor version number of the operating system . 
 + * / 
 + public int getMinor ( ) { 
 + return dwMinorVersion . intValue ( ) ; 
 + } 
 + 
 + / * * 
 + * @ return The build number of the operating system . 
 + * / 
 + public int getBuildNumber ( ) { 
 + return dwBuildNumber . intValue ( ) ; 
 + } 
 + 
 + / * * 
 + * @ return The operating system platform . This member can be VER _ PLATFORM _ WIN32 _ NT . 
 + * / 
 + public int getPlatformId ( ) { 
 + return dwPlatformId . intValue ( ) ; 
 + } 
 + 
 + / * * 
 + * @ return String , such as " Service Pack 3 " , that indicates the latest 
 + * Service Pack installed on the system . < br > 
 + * If no Service Pack has been installed , the string is empty . 
 + * / 
 + public String getServicePack ( ) { 
 + return Native . toString ( szCSDVersion ) ; 
 + } 
 + 
 + / * * 
 + * @ return A bit mask that identifies the product suites available on the system . 
 + * / 
 + public int getSuiteMask ( ) { 
 + return wSuiteMask . intValue ( ) ; 
 + } 
 + 
 + / * * 
 + * @ return Any additional information about the system . 
 + * / 
 + public byte getProductType ( ) { 
 + return wProductType ; 
 + } 
 } 
 
 int VER _ EQUAL = 1 ; 
 @ @ - 2137 , 6 + 2276 , 42 @ @ public interface WinNT extends WinError , WinDef , WinBase , BaseTSD { 
 	 * / 
 	 int PROCESS _ DUP _ HANDLE = 0x0040 ; 
 
 + / * * 
 + * All possible access rights for a process object . Windows Server 2003 and 
 + * Windows XP : The size of the PROCESS _ ALL _ ACCESS flag increased on Windows 
 + * Server 2008 and Windows Vista . < br > 
 + * If an application compiled for Windows Server 2008 and Windows Vista is 
 + * run on Windows Server 2003 or Windows XP , the PROCESS _ ALL _ ACCESS flag is 
 + * too large and the function specifying this flag fails with 
 + * ERROR _ ACCESS _ DENIED . < br > 
 + * To avoid this problem , specify the minimum set of access rights required 
 + * for the operation . < br > 
 + * If PROCESS _ ALL _ ACCESS must be used , set _ WIN32 _ WINNT to the minimum 
 + * operating system targeted by your application ( for example , # define 
 + * _ WIN32 _ WINNT _ WIN32 _ WINNT _ WINXP ) . < br > 
 + * For more information , see Using the Windows Headers . 
 + * 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / ms684880 ( v = VS . 85 ) . aspx " > MSDN < / a > 
 + * / 
 + int PROCESS _ ALL _ ACCESS = WinNT . PROCESS _ CREATE _ PROCESS 
 + | WinNT . PROCESS _ CREATE _ THREAD 
 + | WinNT . PROCESS _ DUP _ HANDLE 
 + | WinNT . PROCESS _ QUERY _ INFORMATION 
 + | WinNT . PROCESS _ QUERY _ LIMITED _ INFORMATION 
 + | WinNT . PROCESS _ SET _ INFORMATION 
 + | WinNT . PROCESS _ SET _ QUOTA 
 + | WinNT . PROCESS _ SUSPEND _ RESUME 
 + | WinNT . PROCESS _ SYNCHRONIZE 
 + | WinNT . PROCESS _ TERMINATE 
 + | WinNT . PROCESS _ VM _ OPERATION 
 + | WinNT . PROCESS _ VM _ READ 
 + | WinNT . PROCESS _ VM _ WRITE 
 + | WinNT . DELETE 
 + | WinNT . READ _ CONTROL 
 + | WinNT . WRITE _ DAC 
 + | WinNT . WRITE _ OWNER 
 + | WinNT . SYNCHRONIZE ; 
 + 	 
 	 / * * 
 	 * Required to retrieve certain information about a process , such as its 
 	 * token , exit code , and priority class ( see 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 index 065290f . . 644bc0d 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 @ @ - 382 , 13 + 382 , 13 @ @ public class Kernel32Test extends TestCase { 
 OSVERSIONINFOEX lpVersionInfo = new OSVERSIONINFOEX ( ) ; 
 assertEquals ( lpVersionInfo . size ( ) , lpVersionInfo . dwOSVersionInfoSize . longValue ( ) ) ; 
 assertTrue ( Kernel32 . INSTANCE . GetVersionEx ( lpVersionInfo ) ) ; 
 - assertTrue ( lpVersionInfo . dwMajorVersion . longValue ( ) > 0 ) ; 
 - assertTrue ( lpVersionInfo . dwMinorVersion . longValue ( ) > = 0 ) ; 
 + assertTrue ( lpVersionInfo . getMajor ( ) > 0 ) ; 
 + assertTrue ( lpVersionInfo . getMinor ( ) > = 0 ) ; 
 assertEquals ( lpVersionInfo . size ( ) , lpVersionInfo . dwOSVersionInfoSize . longValue ( ) ) ; 
 - assertTrue ( lpVersionInfo . dwPlatformId . longValue ( ) > 0 ) ; 
 - assertTrue ( lpVersionInfo . dwBuildNumber . longValue ( ) > 0 ) ; 
 - assertTrue ( Native . toString ( lpVersionInfo . szCSDVersion ) . length ( ) > = 0 ) ; 
 - assertTrue ( lpVersionInfo . wProductType > = 0 ) ; 
 + assertTrue ( lpVersionInfo . getPlatformId ( ) > 0 ) ; 
 + assertTrue ( lpVersionInfo . getBuildNumber ( ) > 0 ) ; 
 + assertTrue ( lpVersionInfo . getServicePack ( ) . length ( ) > = 0 ) ; 
 + assertTrue ( lpVersionInfo . getProductType ( ) > = 0 ) ; 
 } 
 
 public void testGetSystemInfo ( ) { 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / PsapiTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / PsapiTest . java 
 index 560f50d . . c77e2e9 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / PsapiTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / PsapiTest . java 
 @ @ - 14 , 12 + 14 , 17 @ @ package com . sun . jna . platform . win32 ; 
 
 import static org . junit . Assert . assertTrue ; 
 
 + import java . util . LinkedList ; 
 + import java . util . List ; 
 + 
 import javax . swing . JFrame ; 
 
 import org . junit . Test ; 
 
 import com . sun . jna . Memory ; 
 import com . sun . jna . Native ; 
 + import com . sun . jna . platform . win32 . Psapi . MODULEINFO ; 
 + import com . sun . jna . platform . win32 . WinDef . HMODULE ; 
 import com . sun . jna . platform . win32 . WinDef . HWND ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 import com . sun . jna . ptr . IntByReference ; 
 @ @ - 94 , 4 + 99 , 129 @ @ public class PsapiTest { 
 	 	 	 w . dispose ( ) ; 
 	 	 } 
 	 } 
 + 	 
 + 	 @ Test 
 + public void testEnumProcessModules ( ) { 
 + HANDLE me = null ; 
 + Win32Exception we = null ; 
 + 
 + try { 
 + me = Kernel32 . INSTANCE . OpenProcess ( WinNT . PROCESS _ ALL _ ACCESS , false , Kernel32 . INSTANCE . GetCurrentProcessId ( ) ) ; 
 + assertTrue ( " Handle to my process should not be null " , me ! = null ) ; 
 + 
 + List < HMODULE > list = new LinkedList < HMODULE > ( ) ; 
 + 
 + HMODULE [ ] lphModule = new HMODULE [ 100 * 4 ] ; 
 + IntByReference lpcbNeeded = new IntByReference ( ) ; 
 + 
 + if ( ! Psapi . INSTANCE . EnumProcessModules ( me , lphModule , lphModule . length , lpcbNeeded ) ) { 
 + throw new Win32Exception ( Native . getLastError ( ) ) ; 
 + } 
 + 
 + for ( int i = 0 ; i < lpcbNeeded . getValue ( ) / 4 ; i + + ) { 
 + list . add ( lphModule [ i ] ) ; 
 + } 
 + 
 + assertTrue ( " List should have at least 1 item in it . " , list . size ( ) > 0 ) ; 
 + } catch ( Win32Exception e ) { 
 + we = e ; 
 + } finally { 
 + if ( me ! = null ) { 
 + if ( ! Kernel32 . INSTANCE . CloseHandle ( me ) ) { 
 + Win32Exception e = new Win32Exception ( Native . getLastError ( ) ) ; 
 + if ( we ! = null ) { 
 + e . addSuppressed ( we ) ; 
 + } 
 + we = e ; 
 + } 
 + } 
 + } 
 + if ( we ! = null ) { 
 + throw we ; 
 + } 
 + 
 + } 
 + 	 
 + 	 @ Test 
 + public void testGetModuleInformation ( ) { 
 + HANDLE me = null ; 
 + Win32Exception we = null ; 
 + 
 + try { 
 + me = Kernel32 . INSTANCE . OpenProcess ( WinNT . PROCESS _ ALL _ ACCESS , false , Kernel32 . INSTANCE . GetCurrentProcessId ( ) ) ; 
 + assertTrue ( " Handle to my process should not be null " , me ! = null ) ; 
 + 
 + List < HMODULE > list = new LinkedList < HMODULE > ( ) ; 
 + 
 + HMODULE [ ] lphModule = new HMODULE [ 100 * 4 ] ; 
 + IntByReference lpcbNeeded = new IntByReference ( ) ; 
 + 
 + if ( ! Psapi . INSTANCE . EnumProcessModules ( me , lphModule , lphModule . length , lpcbNeeded ) ) { 
 + throw new Win32Exception ( Native . getLastError ( ) ) ; 
 + } 
 + 
 + for ( int i = 0 ; i < lpcbNeeded . getValue ( ) / 4 ; i + + ) { 
 + list . add ( lphModule [ i ] ) ; 
 + } 
 + 
 + assertTrue ( " List should have at least 1 item in it . " , list . size ( ) > 0 ) ; 
 + 
 + MODULEINFO lpmodinfo = new MODULEINFO ( ) ; 
 + 
 + if ( ! Psapi . INSTANCE . GetModuleInformation ( me , list . get ( 0 ) , lpmodinfo , lpmodinfo . size ( ) ) ) { 
 + throw new Win32Exception ( Native . getLastError ( ) ) ; 
 + } 
 + 
 + assertTrue ( " MODULEINFO . EntryPoint should not be null . " , lpmodinfo . EntryPoint ! = null ) ; 
 + 
 + } catch ( Win32Exception e ) { 
 + we = e ; 
 + } finally { 
 + if ( me ! = null ) { 
 + if ( ! Kernel32 . INSTANCE . CloseHandle ( me ) ) { 
 + Win32Exception e = new Win32Exception ( Native . getLastError ( ) ) ; 
 + if ( we ! = null ) { 
 + e . addSuppressed ( we ) ; 
 + } 
 + we = e ; 
 + } 
 + } 
 + } 
 + if ( we ! = null ) { 
 + throw we ; 
 + } 
 + 
 + } 
 + 	 
 + 	 @ Test 
 + public void testGetProcessImageFileName ( ) { 
 + HANDLE me = null ; 
 + Win32Exception we = null ; 
 + 
 + try { 
 + me = Kernel32 . INSTANCE . OpenProcess ( WinNT . PROCESS _ ALL _ ACCESS , false , Kernel32 . INSTANCE . GetCurrentProcessId ( ) ) ; 
 + assertTrue ( " Handle to my process should not be null " , me ! = null ) ; 
 + 
 + char [ ] buffer = new char [ 256 ] ; 
 + Psapi . INSTANCE . GetProcessImageFileName ( me , buffer , 256 ) ; 
 + String path = new String ( buffer ) ; 
 + assertTrue ( " Image path should contain ' java ' and ' . exe ' " , path . contains ( " java " ) & & path . contains ( " . exe " ) ) ; 
 + } catch ( Win32Exception e ) { 
 + we = e ; 
 + } finally { 
 + if ( me ! = null ) { 
 + if ( ! Kernel32 . INSTANCE . CloseHandle ( me ) ) { 
 + Win32Exception e = new Win32Exception ( Native . getLastError ( ) ) ; 
 + if ( we ! = null ) { 
 + e . addSuppressed ( we ) ; 
 + } 
 + we = e ; 
 + } 
 + } 
 + } 
 + if ( we ! = null ) { 
 + throw we ; 
 + } 
 + 
 + } 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java 
 index 609166e . . 66171e4 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Shell32Test . java 
 @ @ - 225 , 4 + 225 , 13 @ @ public class Shell32Test extends TestCase { 
 fileWriter . close ( ) ; 
 } 
 } 
 + 
 + public void testExtractIconEx ( ) { 
 + String winDir = Kernel32Util . getEnvironmentVariable ( " WINDIR " ) ; 
 + assertNotNull ( " No WINDIR value returned " , winDir ) ; 
 + assertTrue ( " Specified WINDIR does not exist : " + winDir , new File ( winDir ) . exists ( ) ) ; 
 + 
 + int iconCount = Shell32 . INSTANCE . ExtractIconEx ( new File ( winDir , " explorer . exe " ) . getAbsolutePath ( ) , - 1 , null , null , 1 ) ; 
 + assertTrue ( " Should be at least two icons in explorer . exe " , iconCount > 1 ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 index e29ebe3 . . e451069 100644 
 - - - a / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 + + + b / jnalib / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 @ @ - 378 , 8 + 378 , 17 @ @ public interface Advapi32 extends StdCallLibrary { 
 	 * @ return 
 	 * If the function succeeds , the return value is nonzero . 
 	 * / 
 - 	 public boolean ImpersonateLoggedOnUser ( 
 - 	 	 	 HANDLE hToken ) ; 
 + 	 public boolean ImpersonateLoggedOnUser ( HANDLE hToken ) ; 
 + 	 
 + 	 / * * 
 + 	 * The ImpersonateSelf function obtains an access token that impersonates the security 
 + 	 * context of the calling process . The token is assigned to the calling thread . 
 + 	 * @ param ImpersonationLevel Specifies a SECURITY _ IMPERSONATION _ LEVEL enumerated type 
 + 	 * that supplies the impersonation level of the new token . 
 + 	 * @ return If the function succeeds , the return value is nonzero . 
 + 	 * / 
 + 	 public boolean ImpersonateSelf ( int ImpersonationLevel ) ; 
 + 
 	 
 	 / * * 
 	 * The RevertToSelf function terminates the impersonation of a client application . 
 diff - - git a / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java b / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java 
 index da08545 . . 257e9c7 100644 
 - - - a / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java 
 + + + b / jnalib / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java 
 @ @ - 801 , 4 + 801 , 9 @ @ public class Advapi32Test extends TestCase { 
 	 assertTrue ( Advapi32 . INSTANCE . AdjustTokenPrivileges ( hToken . getValue ( ) , false , tp , 0 , null , null ) ) ; 
 	 assertTrue ( Kernel32 . INSTANCE . CloseHandle ( hToken . getValue ( ) ) ) ; 
 } 
 + 
 + public void testImpersonateSelf ( ) { 
 + 	 assertTrue ( Advapi32 . INSTANCE . ImpersonateSelf ( WinNT . SECURITY _ IMPERSONATION _ LEVEL . SecurityAnonymous ) ) ; 
 + 	 assertTrue ( Advapi32 . INSTANCE . RevertToSelf ( ) ) ; 
 + } 
 } 
 diff - - git a / jnalib / release - notes . html b / jnalib / release - notes . html 
 index de8a53c . . d3f78d4 100755 
 - - - a / jnalib / release - notes . html 
 + + + b / jnalib / release - notes . html 
 @ @ - 2 , 7 + 2 , 7 @ @ 
 < h2 > Release 3 . x . x < / h2 > 
 < h3 > Features < / h3 > 
 < ul > 
 - < li > Add < code > platform . win32 . Advapi32 . AdjustTokenPrivileges < / code > , < code > platform . win32 . Advapi32 . LookupPrivilegeName < / code > , < code > platform . win32 . Advapi32 . LookupPrivilegeValue < / code > . 
 + < li > Add < code > platform . win32 . Advapi32 . AdjustTokenPrivileges < / code > , < code > platform . win32 . Advapi32 . LookupPrivilegeName < / code > , < code > platform . win32 . Advapi32 . LookupPrivilegeValue < / code > , < code > platform . win32 . Advapi32 . ImpersonateSelf < / code > . 
 < li > Add < code > platform . win32 . Advapi32 . DuplicateTokenEx < / code > , < code > platform . win32 . Advapi32 . CreateProcessAsUser < / code > , 
 < code > platform . win32 . Kernel32 . GetExitCodeProcess < / code > , < code > platform . win32 . Kernel32 . TerminateProcess < / code > , < code > platform . win32 . Kernel32 . ReadFile < / code > , 
 < code > platform . win32 . Kernel32 . CreatePipe < / code > , < code > platform . win32 . Kernel32 . SetHandleInformation < / code > and related constants / structures in < code > platform . win32 . WinBase < / code >
