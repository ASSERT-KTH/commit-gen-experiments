BLEU SCORE: 0.04844232281716619

TEST MSG: Added functions to Advapi32
GENERATED MSG: Add version docs and test .

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> index a43a2fa . . 6378a86 100755 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> @ @ - 347 , 31 + 347 , 85 @ @ public interface Advapi32 extends StdCallLibrary { <nl> boolean SetSecurityDescriptorControl ( SECURITY _ DESCRIPTOR pSecurityDescriptor , int ControlBitsOfInterest , int ControlBitsToSet ) ; <nl> <nl> / * * <nl> - * The SetSecurityDescriptorDacl function sets information in a discretionary access control list ( DACL ) . <nl> - * If a DACL is already present in the security descriptor , the DACL is replaced . <nl> + * The GetSecurityDescriptorOwner function retrieves the owner information from a security descriptor . <nl> * @ param pSecurityDescriptor <nl> - * A pointer to the SECURITY _ DESCRIPTOR structure to which the function adds the DACL . This <nl> - * security descriptor must be in absolute format , meaning that its members must be pointers <nl> - * to other structures , rather than offsets to contiguous data . <nl> - * @ param bDaclPresent <nl> - * A flag that indicates the presence of a DACL in the security descriptor . If this parameter <nl> - * is TRUE , the function sets the SE _ DACL _ PRESENT flag in the SECURITY _ DESCRIPTOR _ CONTROL <nl> - * structure and uses the values in the pDacl and bDaclDefaulted parameters . If this parameter <nl> - * is FALSE , the function clears the SE _ DACL _ PRESENT flag , and pDacl and bDaclDefaulted are ignored . <nl> - * @ param pDacl <nl> - * A pointer to an ACL structure that specifies the DACL for the security descriptor . If this <nl> - * parameter is NULL , a NULL DACL is assigned to the security descriptor , which allows all access <nl> - * to the object . The DACL is referenced by , not copied into , the security descriptor . <nl> - * @ param bDaclDefaulted <nl> - * A flag that indicates the source of the DACL . If this flag is TRUE , the DACL has been retrieved <nl> - * by some default mechanism . If FALSE , the DACL has been explicitly specified by a user . The function <nl> - * stores this value in the SE _ DACL _ DEFAULTED flag of the SECURITY _ DESCRIPTOR _ CONTROL structure . If <nl> - * this parameter is not specified , the SE _ DACL _ DEFAULTED flag is cleared . <nl> + * A pointer to a SECURITY _ DESCRIPTOR structure whose owner information the function retrieves . <nl> + * @ param pOwner <nl> + * A pointer to a pointer to a security identifier ( SID ) that identifies the owner when the function returns . <nl> + * If the security descriptor does not contain an owner , the function sets the pointer pointed to by pOwner <nl> + * to NULL and ignores the remaining output parameter , lpbOwnerDefaulted . If the security descriptor contains an owner , <nl> + * the function sets the pointer pointed to by pOwner to the address of the security descriptor ' s owner SID <nl> + * and provides a valid value for the variable pointed to by lpbOwnerDefaulted . <nl> + * @ param lpbOwnerDefaulted <nl> + * A pointer to a flag that is set to the value of the SE _ OWNER _ DEFAULTED flag in the SECURITY _ DESCRIPTOR _ CONTROL <nl> + * structure when the function returns . If the value stored in the variable pointed to by the pOwner parameter is <nl> + * NULL , no value is set . <nl> * @ return If the function succeeds , the return value is nonzero . If the <nl> * function fails , the return value is zero . For extended error <nl> * information , call GetLastError . <nl> * / <nl> - boolean SetSecurityDescriptorDacl ( SECURITY _ DESCRIPTOR pSecurityDescriptor , boolean bDaclPresent , ACL pDacl , boolean bDaclDefaulted ) ; <nl> + boolean GetSecurityDescriptorOwner ( SECURITY _ DESCRIPTOR pSecurityDescriptor , PointerByReference pOwner , BOOLByReference lpbOwnerDefaulted ) ; <nl> + <nl> + / * * <nl> + * The SetSecurityDescriptorOwner function sets the owner information of an absolute - format security descriptor . It replaces <nl> + * any owner information already present in the security descriptor . <nl> + * @ param pSecurityDescriptor <nl> + * A pointer to the SECURITY _ DESCRIPTOR structure whose owner is set by this function . The function replaces any existing <nl> + * owner with the new owner . <nl> + * @ param pOwner <nl> + * A pointer to a SID structure for the security descriptor ' s new primary owner . The SID structure is referenced by , not <nl> + * copied into , the security descriptor . If this parameter is NULL , the function clears the security descriptor ' s owner <nl> + * information . This marks the security descriptor as having no owner . <nl> + * @ param bOwnerDefaulted <nl> + * Indicates whether the owner information is derived from a default mechanism . If this value is TRUE , it is default information . <nl> + * The function stores this value as the SE _ OWNER _ DEFAULTED flag in the SECURITY _ DESCRIPTOR _ CONTROL structure . If this parameter <nl> + * is zero , the SE _ OWNER _ DEFAULTED flag is cleared . <nl> + * @ return If the function succeeds , the return value is nonzero . If the <nl> + * function fails , the return value is zero . For extended error <nl> + * information , call GetLastError . <nl> + * / <nl> + boolean SetSecurityDescriptorOwner ( SECURITY _ DESCRIPTOR pSecurityDescriptor , PSID pOwner , boolean bOwnerDefaulted ) ; <nl> + <nl> + / * * <nl> + * The GetSecurityDescriptorGroup function retrieves the primary group information from a security descriptor . <nl> + * @ param pSecurityDescriptor <nl> + * A pointer to a SECURITY _ DESCRIPTOR structure whose primary group information the function retrieves . <nl> + * @ param pGroup <nl> + * A pointer to a pointer to a security identifier ( SID ) that identifies the primary group when the function <nl> + * returns . If the security descriptor does not contain a primary group , the function sets the pointer <nl> + * pointed to by pGroup to NULL and ignores the remaining output parameter , lpbGroupDefaulted . If the <nl> + * security descriptor contains a primary group , the function sets the pointer pointed to by pGroup to the <nl> + * address of the security descriptor ' s group SID and provides a valid value for the variable pointed to <nl> + * by lpbGroupDefaulted . <nl> + * @ param lpbGroupDefaulted <nl> + * A pointer to a flag that is set to the value of the SE _ GROUP _ DEFAULTED flag in the <nl> + * SECURITY _ DESCRIPTOR _ CONTROL structure when the function returns . If the value stored in the variable <nl> + * pointed to by the pGroup parameter is NULL , no value is set . <nl> + * @ return If the function succeeds , the return value is nonzero . If the <nl> + * function fails , the return value is zero . For extended error <nl> + * information , call GetLastError . <nl> + * / <nl> + boolean GetSecurityDescriptorGroup ( SECURITY _ DESCRIPTOR pSecurityDescriptor , PointerByReference pGroup , BOOLByReference lpbGroupDefaulted ) ; <nl> + <nl> + / * * <nl> + * The SetSecurityDescriptorGroup function sets the primary group information of an absolute - format security descriptor , replacing <nl> + * any primary group information already present in the security descriptor . <nl> + * @ param pSecurityDescriptor <nl> + * A pointer to the SECURITY _ DESCRIPTOR structure whose primary group is set by this function . The function replaces <nl> + * any existing primary group with the new primary group . <nl> + * @ param pGroup <nl> + * A pointer to a SID structure for the security descriptor ' s new primary group . The SID structure is referenced by , not copied <nl> + * into , the security descriptor . If this parameter is NULL , the function clears the security descriptor ' s primary group <nl> + * information . This marks the security descriptor as having no primary group . <nl> + * @ param bGroupDefaulted <nl> + * Indicates whether the primary group information was derived from a default mechanism . If this value is TRUE , it is default <nl> + * information , and the function stores this value as the SE _ GROUP _ DEFAULTED flag in the SECURITY _ DESCRIPTOR _ CONTROL structure . <nl> + * If this parameter is zero , the SE _ GROUP _ DEFAULTED flag is cleared . <nl> + * @ return If the function succeeds , the return value is nonzero . If the <nl> + * function fails , the return value is zero . For extended error <nl> + * information , call GetLastError . <nl> + * / <nl> + boolean SetSecurityDescriptorGroup ( SECURITY _ DESCRIPTOR pSecurityDescriptor , PSID pGroup , boolean bGroupDefaulted ) ; <nl> <nl> / * * <nl> * The GetSecurityDescriptorDacl function retrieves a pointer to the discretionary access control list ( DACL ) in <nl> @ @ - 404 , 6 + 458 , 33 @ @ public interface Advapi32 extends StdCallLibrary { <nl> boolean GetSecurityDescriptorDacl ( SECURITY _ DESCRIPTOR pSecurityDescriptor , BOOLByReference bDaclPresent , PointerByReference pDacl , BOOLByReference bDaclDefaulted ) ; <nl> <nl> / * * <nl> + * The SetSecurityDescriptorDacl function sets information in a discretionary access control list ( DACL ) . <nl> + * If a DACL is already present in the security descriptor , the DACL is replaced . <nl> + * @ param pSecurityDescriptor <nl> + * A pointer to the SECURITY _ DESCRIPTOR structure to which the function adds the DACL . This <nl> + * security descriptor must be in absolute format , meaning that its members must be pointers <nl> + * to other structures , rather than offsets to contiguous data . <nl> + * @ param bDaclPresent <nl> + * A flag that indicates the presence of a DACL in the security descriptor . If this parameter <nl> + * is TRUE , the function sets the SE _ DACL _ PRESENT flag in the SECURITY _ DESCRIPTOR _ CONTROL <nl> + * structure and uses the values in the pDacl and bDaclDefaulted parameters . If this parameter <nl> + * is FALSE , the function clears the SE _ DACL _ PRESENT flag , and pDacl and bDaclDefaulted are ignored . <nl> + * @ param pDacl <nl> + * A pointer to an ACL structure that specifies the DACL for the security descriptor . If this <nl> + * parameter is NULL , a NULL DACL is assigned to the security descriptor , which allows all access <nl> + * to the object . The DACL is referenced by , not copied into , the security descriptor . <nl> + * @ param bDaclDefaulted <nl> + * A flag that indicates the source of the DACL . If this flag is TRUE , the DACL has been retrieved <nl> + * by some default mechanism . If FALSE , the DACL has been explicitly specified by a user . The function <nl> + * stores this value in the SE _ DACL _ DEFAULTED flag of the SECURITY _ DESCRIPTOR _ CONTROL structure . If <nl> + * this parameter is not specified , the SE _ DACL _ DEFAULTED flag is cleared . <nl> + * @ return If the function succeeds , the return value is nonzero . If the <nl> + * function fails , the return value is zero . For extended error <nl> + * information , call GetLastError . <nl> + * / <nl> + boolean SetSecurityDescriptorDacl ( SECURITY _ DESCRIPTOR pSecurityDescriptor , boolean bDaclPresent , ACL pDacl , boolean bDaclDefaulted ) ; <nl> + <nl> + / * * <nl> * The InitializeAcl function initializes a new ACL structure . <nl> * @ param pAcl <nl> * A pointer to an ACL structure to be initialized by this function . <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java <nl> index 9df9a5c . . 8b59a3a 100755 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java <nl> @ @ - 712 , 6 + 712 , 44 @ @ public class Advapi32Test extends TestCase { <nl> assertTrue ( lpdwRevision . getValue ( ) = = WinNT . SECURITY _ DESCRIPTOR _ REVISION ) ; <nl> } <nl> <nl> + public void testSetGetSecurityDescriptorOwner ( ) { <nl> + SECURITY _ DESCRIPTOR sd = new SECURITY _ DESCRIPTOR ( 64 * 1024 ) ; <nl> + assertTrue ( Advapi32 . INSTANCE . InitializeSecurityDescriptor ( sd , WinNT . SECURITY _ DESCRIPTOR _ REVISION ) ) ; <nl> + <nl> + PSID pSidPut = new PSID ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ; <nl> + IntByReference cbSid = new IntByReference ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ; <nl> + assertTrue ( " Failed to create well - known SID " , <nl> + Advapi32 . INSTANCE . CreateWellKnownSid ( WELL _ KNOWN _ SID _ TYPE . WinBuiltinAdministratorsSid , null , pSidPut , cbSid ) ) ; <nl> + <nl> + assertTrue ( Advapi32 . INSTANCE . SetSecurityDescriptorOwner ( sd , pSidPut , true ) ) ; <nl> + <nl> + BOOLByReference lpbOwnerDefaulted = new BOOLByReference ( ) ; <nl> + PointerByReference prSd = new PointerByReference ( new Memory ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ) ; <nl> + assertTrue ( Advapi32 . INSTANCE . GetSecurityDescriptorOwner ( sd , prSd , lpbOwnerDefaulted ) ) ; <nl> + <nl> + PSID pSidGet = new PSID ( prSd . getValue ( ) ) ; <nl> + assertTrue ( Advapi32 . INSTANCE . EqualSid ( pSidPut , pSidGet ) ) ; <nl> + } <nl> + <nl> + public void testSetGetSecurityDescriptorGroup ( ) { <nl> + SECURITY _ DESCRIPTOR sd = new SECURITY _ DESCRIPTOR ( 64 * 1024 ) ; <nl> + assertTrue ( Advapi32 . INSTANCE . InitializeSecurityDescriptor ( sd , WinNT . SECURITY _ DESCRIPTOR _ REVISION ) ) ; <nl> + <nl> + PSID pSidPut = new PSID ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ; <nl> + IntByReference cbSid = new IntByReference ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ; <nl> + assertTrue ( " Failed to create well - known SID " , <nl> + Advapi32 . INSTANCE . CreateWellKnownSid ( WELL _ KNOWN _ SID _ TYPE . WinBuiltinAdministratorsSid , null , pSidPut , cbSid ) ) ; <nl> + <nl> + assertTrue ( Advapi32 . INSTANCE . SetSecurityDescriptorGroup ( sd , pSidPut , true ) ) ; <nl> + <nl> + BOOLByReference lpbOwnerDefaulted = new BOOLByReference ( ) ; <nl> + PointerByReference prSd = new PointerByReference ( new Memory ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ) ; <nl> + assertTrue ( Advapi32 . INSTANCE . GetSecurityDescriptorGroup ( sd , prSd , lpbOwnerDefaulted ) ) ; <nl> + <nl> + PSID pSidGet = new PSID ( prSd . getValue ( ) ) ; <nl> + assertTrue ( Advapi32 . INSTANCE . EqualSid ( pSidPut , pSidGet ) ) ; <nl> + } <nl> + <nl> public void testSetGetSecurityDescriptorDacl ( ) throws IOException { <nl> SECURITY _ DESCRIPTOR sd = new SECURITY _ DESCRIPTOR ( 64 * 1024 ) ; <nl> assertTrue ( Advapi32 . INSTANCE . InitializeSecurityDescriptor ( sd , WinNT . SECURITY _ DESCRIPTOR _ REVISION ) ) ;
NEAREST DIFF (one line): diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index 2393c49 . . ed8ccff 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 131 , 7 + 131 , 9 @ @ public abstract class Structure { <nl> / * * Align to an 8 - byte boundary . * / <nl> / / public static final int ALIGN _ 8 = 6 ; <nl> <nl> - private static final int MAX _ GNUC _ ALIGNMENT = isSPARC ? 8 : Native . LONG _ SIZE ; <nl> + static final int MAX _ GNUC _ ALIGNMENT = <nl> + isSPARC | | ( isPPC & & Platform . isLinux ( ) ) <nl> + ? 8 : Native . LONG _ SIZE ; <nl> protected static final int CALCULATE _ SIZE = - 1 ; <nl> <nl> / / This field is accessed by native code <nl> @ @ - 957 , 7 + 959 , 11 @ @ public abstract class Structure { <nl> } <nl> <nl> public String toString ( ) { <nl> - return toString ( 0 , true ) ; <nl> + return toString ( Boolean . getBoolean ( " jna . dump _ memory " ) ) ; <nl> + } <nl> + <nl> + public String toString ( boolean debug ) { <nl> + return toString ( 0 , true , true ) ; <nl> } <nl> <nl> private String format ( Class type ) { <nl> @ @ - 966 , 7 + 972 , 7 @ @ public abstract class Structure { <nl> return s . substring ( dot + 1 ) ; <nl> } <nl> <nl> - private String toString ( int indent , boolean showContents ) { <nl> + private String toString ( int indent , boolean showContents , boolean dumpMemory ) { <nl> String LS = System . getProperty ( " line . separator " ) ; <nl> String name = format ( getClass ( ) ) + " ( " + getPointer ( ) + " ) " ; <nl> if ( ! ( getPointer ( ) instanceof Memory ) ) { <nl> @ @ - 993 , 7 + 999 , 7 @ @ public abstract class Structure { <nl> contents + = " " + type + " " <nl> + sf . name + index + " @ " + Integer . toHexString ( sf . offset ) ; <nl> if ( value instanceof Structure ) { <nl> - value = ( ( Structure ) value ) . toString ( indent + 1 , ! ( value instanceof Structure . ByReference ) ) ; <nl> + value = ( ( Structure ) value ) . toString ( indent + 1 , ! ( value instanceof Structure . ByReference ) , dumpMemory ) ; <nl> } <nl> contents + = " = " ; <nl> if ( value instanceof Long ) { <nl> @ @ - 1015 , 7 + 1021 , 7 @ @ public abstract class Structure { <nl> if ( ! i . hasNext ( ) ) <nl> contents + = prefix + " } " ; <nl> } <nl> - if ( indent = = 0 & & Boolean . getBoolean ( " jna . dump _ memory " ) ) { <nl> + if ( indent = = 0 & & dumpMemory ) { <nl> byte [ ] buf = getPointer ( ) . getByteArray ( 0 , size ( ) ) ; <nl> final int BYTES _ PER _ ROW = 4 ; <nl> contents + = LS + " memory dump " + LS ; <nl> diff - - git a / test / com / sun / jna / ArgumentsMarshalTest . java b / test / com / sun / jna / ArgumentsMarshalTest . java <nl> index da638c4 . . 2f67eab 100644 <nl> - - - a / test / com / sun / jna / ArgumentsMarshalTest . java <nl> + + + b / test / com / sun / jna / ArgumentsMarshalTest . java <nl> @ @ - 341 , 7 + 341 , 7 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> public void testStructureByValueArgument ( ) { <nl> TestLibrary . CheckFieldAlignment . ByValue struct = <nl> new TestLibrary . CheckFieldAlignment . ByValue ( ) ; <nl> - assertEquals ( " Wrong sum of fields " , <nl> + assertEquals ( " Wrong sum of fields for " + struct . toString ( true ) , <nl> 21d , lib . testStructureByValueArgument ( struct ) ) ; <nl> } <nl> <nl> diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java <nl> index 083589e . . 3bdfb38 100644 <nl> - - - a / test / com / sun / jna / StructureTest . java <nl> + + + b / test / com / sun / jna / StructureTest . java <nl> @ @ - 108 , 8 + 108 , 7 @ @ public class StructureTest extends TestCase { <nl> } <nl> TestStructure s = new TestStructure ( ) ; <nl> s . setAlignType ( Structure . ALIGN _ GNUC ) ; <nl> - boolean isSPARC = " sparc " . equals ( System . getProperty ( " os . arch " ) ) ; <nl> - final int SIZE = NativeLong . SIZE = = 4 & & ! isSPARC ? 28 : 32 ; <nl> + final int SIZE = Structure . MAX _ GNUC _ ALIGNMENT = = 8 ? 32 : 28 ; <nl> assertEquals ( " Wrong structure size " , SIZE , s . size ( ) ) ; <nl> } <nl> <nl> @ @ - 171 , 7 + 170 , 7 @ @ public class StructureTest extends TestCase { <nl> SizeTest lib = ( SizeTest ) Native . loadLibrary ( " testlib " , SizeTest . class ) ; <nl> Class cls = Class . forName ( getClass ( ) . getName ( ) + " $ TestStructure " + index ) ; <nl> Structure s = Structure . newInstance ( cls ) ; <nl> - assertEquals ( " Incorrect size : " + s , lib . getStructureSize ( index ) , s . size ( ) ) ; <nl> + assertEquals ( " Incorrect size for structure " + index + " = > " + s . toString ( true ) , lib . getStructureSize ( index ) , s . size ( ) ) ; <nl> } <nl> catch ( Exception e ) { <nl> throw new Error ( e ) ;

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 index a43a2fa . . 6378a86 100755 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 @ @ - 347 , 31 + 347 , 85 @ @ public interface Advapi32 extends StdCallLibrary { 
 boolean SetSecurityDescriptorControl ( SECURITY _ DESCRIPTOR pSecurityDescriptor , int ControlBitsOfInterest , int ControlBitsToSet ) ; 
 
 / * * 
 - * The SetSecurityDescriptorDacl function sets information in a discretionary access control list ( DACL ) . 
 - * If a DACL is already present in the security descriptor , the DACL is replaced . 
 + * The GetSecurityDescriptorOwner function retrieves the owner information from a security descriptor . 
 * @ param pSecurityDescriptor 
 - * A pointer to the SECURITY _ DESCRIPTOR structure to which the function adds the DACL . This 
 - * security descriptor must be in absolute format , meaning that its members must be pointers 
 - * to other structures , rather than offsets to contiguous data . 
 - * @ param bDaclPresent 
 - * A flag that indicates the presence of a DACL in the security descriptor . If this parameter 
 - * is TRUE , the function sets the SE _ DACL _ PRESENT flag in the SECURITY _ DESCRIPTOR _ CONTROL 
 - * structure and uses the values in the pDacl and bDaclDefaulted parameters . If this parameter 
 - * is FALSE , the function clears the SE _ DACL _ PRESENT flag , and pDacl and bDaclDefaulted are ignored . 
 - * @ param pDacl 
 - * A pointer to an ACL structure that specifies the DACL for the security descriptor . If this 
 - * parameter is NULL , a NULL DACL is assigned to the security descriptor , which allows all access 
 - * to the object . The DACL is referenced by , not copied into , the security descriptor . 
 - * @ param bDaclDefaulted 
 - * A flag that indicates the source of the DACL . If this flag is TRUE , the DACL has been retrieved 
 - * by some default mechanism . If FALSE , the DACL has been explicitly specified by a user . The function 
 - * stores this value in the SE _ DACL _ DEFAULTED flag of the SECURITY _ DESCRIPTOR _ CONTROL structure . If 
 - * this parameter is not specified , the SE _ DACL _ DEFAULTED flag is cleared . 
 + * A pointer to a SECURITY _ DESCRIPTOR structure whose owner information the function retrieves . 
 + * @ param pOwner 
 + * A pointer to a pointer to a security identifier ( SID ) that identifies the owner when the function returns . 
 + * If the security descriptor does not contain an owner , the function sets the pointer pointed to by pOwner 
 + * to NULL and ignores the remaining output parameter , lpbOwnerDefaulted . If the security descriptor contains an owner , 
 + * the function sets the pointer pointed to by pOwner to the address of the security descriptor ' s owner SID 
 + * and provides a valid value for the variable pointed to by lpbOwnerDefaulted . 
 + * @ param lpbOwnerDefaulted 
 + * A pointer to a flag that is set to the value of the SE _ OWNER _ DEFAULTED flag in the SECURITY _ DESCRIPTOR _ CONTROL 
 + * structure when the function returns . If the value stored in the variable pointed to by the pOwner parameter is 
 + * NULL , no value is set . 
 * @ return If the function succeeds , the return value is nonzero . If the 
 * function fails , the return value is zero . For extended error 
 * information , call GetLastError . 
 * / 
 - boolean SetSecurityDescriptorDacl ( SECURITY _ DESCRIPTOR pSecurityDescriptor , boolean bDaclPresent , ACL pDacl , boolean bDaclDefaulted ) ; 
 + boolean GetSecurityDescriptorOwner ( SECURITY _ DESCRIPTOR pSecurityDescriptor , PointerByReference pOwner , BOOLByReference lpbOwnerDefaulted ) ; 
 + 
 + / * * 
 + * The SetSecurityDescriptorOwner function sets the owner information of an absolute - format security descriptor . It replaces 
 + * any owner information already present in the security descriptor . 
 + * @ param pSecurityDescriptor 
 + * A pointer to the SECURITY _ DESCRIPTOR structure whose owner is set by this function . The function replaces any existing 
 + * owner with the new owner . 
 + * @ param pOwner 
 + * A pointer to a SID structure for the security descriptor ' s new primary owner . The SID structure is referenced by , not 
 + * copied into , the security descriptor . If this parameter is NULL , the function clears the security descriptor ' s owner 
 + * information . This marks the security descriptor as having no owner . 
 + * @ param bOwnerDefaulted 
 + * Indicates whether the owner information is derived from a default mechanism . If this value is TRUE , it is default information . 
 + * The function stores this value as the SE _ OWNER _ DEFAULTED flag in the SECURITY _ DESCRIPTOR _ CONTROL structure . If this parameter 
 + * is zero , the SE _ OWNER _ DEFAULTED flag is cleared . 
 + * @ return If the function succeeds , the return value is nonzero . If the 
 + * function fails , the return value is zero . For extended error 
 + * information , call GetLastError . 
 + * / 
 + boolean SetSecurityDescriptorOwner ( SECURITY _ DESCRIPTOR pSecurityDescriptor , PSID pOwner , boolean bOwnerDefaulted ) ; 
 + 
 + / * * 
 + * The GetSecurityDescriptorGroup function retrieves the primary group information from a security descriptor . 
 + * @ param pSecurityDescriptor 
 + * A pointer to a SECURITY _ DESCRIPTOR structure whose primary group information the function retrieves . 
 + * @ param pGroup 
 + * A pointer to a pointer to a security identifier ( SID ) that identifies the primary group when the function 
 + * returns . If the security descriptor does not contain a primary group , the function sets the pointer 
 + * pointed to by pGroup to NULL and ignores the remaining output parameter , lpbGroupDefaulted . If the 
 + * security descriptor contains a primary group , the function sets the pointer pointed to by pGroup to the 
 + * address of the security descriptor ' s group SID and provides a valid value for the variable pointed to 
 + * by lpbGroupDefaulted . 
 + * @ param lpbGroupDefaulted 
 + * A pointer to a flag that is set to the value of the SE _ GROUP _ DEFAULTED flag in the 
 + * SECURITY _ DESCRIPTOR _ CONTROL structure when the function returns . If the value stored in the variable 
 + * pointed to by the pGroup parameter is NULL , no value is set . 
 + * @ return If the function succeeds , the return value is nonzero . If the 
 + * function fails , the return value is zero . For extended error 
 + * information , call GetLastError . 
 + * / 
 + boolean GetSecurityDescriptorGroup ( SECURITY _ DESCRIPTOR pSecurityDescriptor , PointerByReference pGroup , BOOLByReference lpbGroupDefaulted ) ; 
 + 
 + / * * 
 + * The SetSecurityDescriptorGroup function sets the primary group information of an absolute - format security descriptor , replacing 
 + * any primary group information already present in the security descriptor . 
 + * @ param pSecurityDescriptor 
 + * A pointer to the SECURITY _ DESCRIPTOR structure whose primary group is set by this function . The function replaces 
 + * any existing primary group with the new primary group . 
 + * @ param pGroup 
 + * A pointer to a SID structure for the security descriptor ' s new primary group . The SID structure is referenced by , not copied 
 + * into , the security descriptor . If this parameter is NULL , the function clears the security descriptor ' s primary group 
 + * information . This marks the security descriptor as having no primary group . 
 + * @ param bGroupDefaulted 
 + * Indicates whether the primary group information was derived from a default mechanism . If this value is TRUE , it is default 
 + * information , and the function stores this value as the SE _ GROUP _ DEFAULTED flag in the SECURITY _ DESCRIPTOR _ CONTROL structure . 
 + * If this parameter is zero , the SE _ GROUP _ DEFAULTED flag is cleared . 
 + * @ return If the function succeeds , the return value is nonzero . If the 
 + * function fails , the return value is zero . For extended error 
 + * information , call GetLastError . 
 + * / 
 + boolean SetSecurityDescriptorGroup ( SECURITY _ DESCRIPTOR pSecurityDescriptor , PSID pGroup , boolean bGroupDefaulted ) ; 
 
 / * * 
 * The GetSecurityDescriptorDacl function retrieves a pointer to the discretionary access control list ( DACL ) in 
 @ @ - 404 , 6 + 458 , 33 @ @ public interface Advapi32 extends StdCallLibrary { 
 boolean GetSecurityDescriptorDacl ( SECURITY _ DESCRIPTOR pSecurityDescriptor , BOOLByReference bDaclPresent , PointerByReference pDacl , BOOLByReference bDaclDefaulted ) ; 
 
 / * * 
 + * The SetSecurityDescriptorDacl function sets information in a discretionary access control list ( DACL ) . 
 + * If a DACL is already present in the security descriptor , the DACL is replaced . 
 + * @ param pSecurityDescriptor 
 + * A pointer to the SECURITY _ DESCRIPTOR structure to which the function adds the DACL . This 
 + * security descriptor must be in absolute format , meaning that its members must be pointers 
 + * to other structures , rather than offsets to contiguous data . 
 + * @ param bDaclPresent 
 + * A flag that indicates the presence of a DACL in the security descriptor . If this parameter 
 + * is TRUE , the function sets the SE _ DACL _ PRESENT flag in the SECURITY _ DESCRIPTOR _ CONTROL 
 + * structure and uses the values in the pDacl and bDaclDefaulted parameters . If this parameter 
 + * is FALSE , the function clears the SE _ DACL _ PRESENT flag , and pDacl and bDaclDefaulted are ignored . 
 + * @ param pDacl 
 + * A pointer to an ACL structure that specifies the DACL for the security descriptor . If this 
 + * parameter is NULL , a NULL DACL is assigned to the security descriptor , which allows all access 
 + * to the object . The DACL is referenced by , not copied into , the security descriptor . 
 + * @ param bDaclDefaulted 
 + * A flag that indicates the source of the DACL . If this flag is TRUE , the DACL has been retrieved 
 + * by some default mechanism . If FALSE , the DACL has been explicitly specified by a user . The function 
 + * stores this value in the SE _ DACL _ DEFAULTED flag of the SECURITY _ DESCRIPTOR _ CONTROL structure . If 
 + * this parameter is not specified , the SE _ DACL _ DEFAULTED flag is cleared . 
 + * @ return If the function succeeds , the return value is nonzero . If the 
 + * function fails , the return value is zero . For extended error 
 + * information , call GetLastError . 
 + * / 
 + boolean SetSecurityDescriptorDacl ( SECURITY _ DESCRIPTOR pSecurityDescriptor , boolean bDaclPresent , ACL pDacl , boolean bDaclDefaulted ) ; 
 + 
 + / * * 
 * The InitializeAcl function initializes a new ACL structure . 
 * @ param pAcl 
 * A pointer to an ACL structure to be initialized by this function . 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java 
 index 9df9a5c . . 8b59a3a 100755 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Advapi32Test . java 
 @ @ - 712 , 6 + 712 , 44 @ @ public class Advapi32Test extends TestCase { 
 assertTrue ( lpdwRevision . getValue ( ) = = WinNT . SECURITY _ DESCRIPTOR _ REVISION ) ; 
 } 
 
 + public void testSetGetSecurityDescriptorOwner ( ) { 
 + SECURITY _ DESCRIPTOR sd = new SECURITY _ DESCRIPTOR ( 64 * 1024 ) ; 
 + assertTrue ( Advapi32 . INSTANCE . InitializeSecurityDescriptor ( sd , WinNT . SECURITY _ DESCRIPTOR _ REVISION ) ) ; 
 + 
 + PSID pSidPut = new PSID ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ; 
 + IntByReference cbSid = new IntByReference ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ; 
 + assertTrue ( " Failed to create well - known SID " , 
 + Advapi32 . INSTANCE . CreateWellKnownSid ( WELL _ KNOWN _ SID _ TYPE . WinBuiltinAdministratorsSid , null , pSidPut , cbSid ) ) ; 
 + 
 + assertTrue ( Advapi32 . INSTANCE . SetSecurityDescriptorOwner ( sd , pSidPut , true ) ) ; 
 + 
 + BOOLByReference lpbOwnerDefaulted = new BOOLByReference ( ) ; 
 + PointerByReference prSd = new PointerByReference ( new Memory ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ) ; 
 + assertTrue ( Advapi32 . INSTANCE . GetSecurityDescriptorOwner ( sd , prSd , lpbOwnerDefaulted ) ) ; 
 + 
 + PSID pSidGet = new PSID ( prSd . getValue ( ) ) ; 
 + assertTrue ( Advapi32 . INSTANCE . EqualSid ( pSidPut , pSidGet ) ) ; 
 + } 
 + 
 + public void testSetGetSecurityDescriptorGroup ( ) { 
 + SECURITY _ DESCRIPTOR sd = new SECURITY _ DESCRIPTOR ( 64 * 1024 ) ; 
 + assertTrue ( Advapi32 . INSTANCE . InitializeSecurityDescriptor ( sd , WinNT . SECURITY _ DESCRIPTOR _ REVISION ) ) ; 
 + 
 + PSID pSidPut = new PSID ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ; 
 + IntByReference cbSid = new IntByReference ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ; 
 + assertTrue ( " Failed to create well - known SID " , 
 + Advapi32 . INSTANCE . CreateWellKnownSid ( WELL _ KNOWN _ SID _ TYPE . WinBuiltinAdministratorsSid , null , pSidPut , cbSid ) ) ; 
 + 
 + assertTrue ( Advapi32 . INSTANCE . SetSecurityDescriptorGroup ( sd , pSidPut , true ) ) ; 
 + 
 + BOOLByReference lpbOwnerDefaulted = new BOOLByReference ( ) ; 
 + PointerByReference prSd = new PointerByReference ( new Memory ( WinNT . SECURITY _ MAX _ SID _ SIZE ) ) ; 
 + assertTrue ( Advapi32 . INSTANCE . GetSecurityDescriptorGroup ( sd , prSd , lpbOwnerDefaulted ) ) ; 
 + 
 + PSID pSidGet = new PSID ( prSd . getValue ( ) ) ; 
 + assertTrue ( Advapi32 . INSTANCE . EqualSid ( pSidPut , pSidGet ) ) ; 
 + } 
 + 
 public void testSetGetSecurityDescriptorDacl ( ) throws IOException { 
 SECURITY _ DESCRIPTOR sd = new SECURITY _ DESCRIPTOR ( 64 * 1024 ) ; 
 assertTrue ( Advapi32 . INSTANCE . InitializeSecurityDescriptor ( sd , WinNT . SECURITY _ DESCRIPTOR _ REVISION ) ) ;

NEAREST DIFF:
diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index 2393c49 . . ed8ccff 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 131 , 7 + 131 , 9 @ @ public abstract class Structure { 
 / * * Align to an 8 - byte boundary . * / 
 / / public static final int ALIGN _ 8 = 6 ; 
 
 - private static final int MAX _ GNUC _ ALIGNMENT = isSPARC ? 8 : Native . LONG _ SIZE ; 
 + static final int MAX _ GNUC _ ALIGNMENT = 
 + isSPARC | | ( isPPC & & Platform . isLinux ( ) ) 
 + ? 8 : Native . LONG _ SIZE ; 
 protected static final int CALCULATE _ SIZE = - 1 ; 
 
 / / This field is accessed by native code 
 @ @ - 957 , 7 + 959 , 11 @ @ public abstract class Structure { 
 } 
 
 public String toString ( ) { 
 - return toString ( 0 , true ) ; 
 + return toString ( Boolean . getBoolean ( " jna . dump _ memory " ) ) ; 
 + } 
 + 
 + public String toString ( boolean debug ) { 
 + return toString ( 0 , true , true ) ; 
 } 
 
 private String format ( Class type ) { 
 @ @ - 966 , 7 + 972 , 7 @ @ public abstract class Structure { 
 return s . substring ( dot + 1 ) ; 
 } 
 
 - private String toString ( int indent , boolean showContents ) { 
 + private String toString ( int indent , boolean showContents , boolean dumpMemory ) { 
 String LS = System . getProperty ( " line . separator " ) ; 
 String name = format ( getClass ( ) ) + " ( " + getPointer ( ) + " ) " ; 
 if ( ! ( getPointer ( ) instanceof Memory ) ) { 
 @ @ - 993 , 7 + 999 , 7 @ @ public abstract class Structure { 
 contents + = " " + type + " " 
 + sf . name + index + " @ " + Integer . toHexString ( sf . offset ) ; 
 if ( value instanceof Structure ) { 
 - value = ( ( Structure ) value ) . toString ( indent + 1 , ! ( value instanceof Structure . ByReference ) ) ; 
 + value = ( ( Structure ) value ) . toString ( indent + 1 , ! ( value instanceof Structure . ByReference ) , dumpMemory ) ; 
 } 
 contents + = " = " ; 
 if ( value instanceof Long ) { 
 @ @ - 1015 , 7 + 1021 , 7 @ @ public abstract class Structure { 
 if ( ! i . hasNext ( ) ) 
 contents + = prefix + " } " ; 
 } 
 - if ( indent = = 0 & & Boolean . getBoolean ( " jna . dump _ memory " ) ) { 
 + if ( indent = = 0 & & dumpMemory ) { 
 byte [ ] buf = getPointer ( ) . getByteArray ( 0 , size ( ) ) ; 
 final int BYTES _ PER _ ROW = 4 ; 
 contents + = LS + " memory dump " + LS ; 
 diff - - git a / test / com / sun / jna / ArgumentsMarshalTest . java b / test / com / sun / jna / ArgumentsMarshalTest . java 
 index da638c4 . . 2f67eab 100644 
 - - - a / test / com / sun / jna / ArgumentsMarshalTest . java 
 + + + b / test / com / sun / jna / ArgumentsMarshalTest . java 
 @ @ - 341 , 7 + 341 , 7 @ @ public class ArgumentsMarshalTest extends TestCase { 
 public void testStructureByValueArgument ( ) { 
 TestLibrary . CheckFieldAlignment . ByValue struct = 
 new TestLibrary . CheckFieldAlignment . ByValue ( ) ; 
 - assertEquals ( " Wrong sum of fields " , 
 + assertEquals ( " Wrong sum of fields for " + struct . toString ( true ) , 
 21d , lib . testStructureByValueArgument ( struct ) ) ; 
 } 
 
 diff - - git a / test / com / sun / jna / StructureTest . java b / test / com / sun / jna / StructureTest . java 
 index 083589e . . 3bdfb38 100644 
 - - - a / test / com / sun / jna / StructureTest . java 
 + + + b / test / com / sun / jna / StructureTest . java 
 @ @ - 108 , 8 + 108 , 7 @ @ public class StructureTest extends TestCase { 
 } 
 TestStructure s = new TestStructure ( ) ; 
 s . setAlignType ( Structure . ALIGN _ GNUC ) ; 
 - boolean isSPARC = " sparc " . equals ( System . getProperty ( " os . arch " ) ) ; 
 - final int SIZE = NativeLong . SIZE = = 4 & & ! isSPARC ? 28 : 32 ; 
 + final int SIZE = Structure . MAX _ GNUC _ ALIGNMENT = = 8 ? 32 : 28 ; 
 assertEquals ( " Wrong structure size " , SIZE , s . size ( ) ) ; 
 } 
 
 @ @ - 171 , 7 + 170 , 7 @ @ public class StructureTest extends TestCase { 
 SizeTest lib = ( SizeTest ) Native . loadLibrary ( " testlib " , SizeTest . class ) ; 
 Class cls = Class . forName ( getClass ( ) . getName ( ) + " $ TestStructure " + index ) ; 
 Structure s = Structure . newInstance ( cls ) ; 
 - assertEquals ( " Incorrect size : " + s , lib . getStructureSize ( index ) , s . size ( ) ) ; 
 + assertEquals ( " Incorrect size for structure " + index + " = > " + s . toString ( true ) , lib . getStructureSize ( index ) , s . size ( ) ) ; 
 } 
 catch ( Exception e ) { 
 throw new Error ( e ) ;
