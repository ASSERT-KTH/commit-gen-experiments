BLEU SCORE: 0.040583489434387374

TEST MSG: manual handling of wchar vs char
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java b / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> index cd6b946 . . 8c6217e 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java <nl> @ @ - 86 , 8 + 86 , 8 @ @ public class W32Service { <nl> 	 	 	 String command ) { <nl> 	 	 SERVICE _ FAILURE _ ACTIONS . ByReference actionStruct = new SERVICE _ FAILURE _ ACTIONS . ByReference ( ) ; <nl> 	 	 actionStruct . dwResetPeriod = resetPeriod ; <nl> - 	 	 actionStruct . lpRebootMsg = new WString ( rebootMsg ) ; <nl> - 	 	 actionStruct . lpCommand = new WString ( command ) ; <nl> + 	 	 actionStruct . setRebootMessage ( rebootMsg ) ; <nl> + 	 	 actionStruct . setCommand ( command ) ; <nl> 	 	 actionStruct . cActions = actions . size ( ) ; <nl> <nl> 	 	 actionStruct . lpsaActions = new SC _ ACTION . ByReference ( ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java <nl> index dfe5157 . . 1bfbb9b 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ import java . util . Arrays ; <nl> import java . util . List ; <nl> <nl> import com . sun . jna . Memory ; <nl> + import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . WString ; <nl> @ @ - 211 , 6 + 212 , 7 @ @ public interface Winsvc extends StdCallLibrary { <nl> * / <nl> public class SERVICE _ FAILURE _ ACTIONS extends Structure { <nl> public static class ByReference extends SERVICE _ FAILURE _ ACTIONS implements Structure . ByReference { } <nl> + private static final boolean ASCII = Boolean . getBoolean ( " w32 . ascii " ) ; <nl> / * * <nl> * The time after which to reset the failure count to zero if there are no failures , in <nl> * seconds . Specify INFINITE to indicate that this value should never be reset . <nl> @ @ - 228 , 7 + 230 , 7 @ @ public interface Winsvc extends StdCallLibrary { <nl> * Windows Server 2003 and Windows XP : Localized strings are not supported until Windows <nl> * Vista . <nl> * / <nl> - public WString lpRebootMsg ; <nl> + public Pointer lpRebootMsg ; <nl> / * * <nl> * The command line of the process for the CreateProcess function to execute in response to <nl> * the SC _ ACTION _ RUN _ COMMAND service controller action . This process runs under the same <nl> @ @ - 236 , 7 + 238 , 7 @ @ public interface Winsvc extends StdCallLibrary { <nl> * If this value is NULL , the command is unchanged . If the value is an empty string ( " " ) , <nl> * the command is deleted and no program is run when the service fails . <nl> * / <nl> - public WString lpCommand ; <nl> + public Pointer lpCommand ; <nl> / * * <nl> * The number of elements in the lpsaActions array . <nl> * If this value is 0 , but lpsaActions is not NULL , the reset period and array of failure <nl> @ @ - 261 , 6 + 263 , 42 @ @ public interface Winsvc extends StdCallLibrary { <nl> protected List getFieldOrder ( ) { <nl> return Arrays . asList ( new String [ ] { " dwResetPeriod " , " lpRebootMsg " , " lpCommand " , " cActions " , " lpsaActions " } ) ; <nl> } <nl> + <nl> + public void setRebootMessage ( String s ) { <nl> + if ( ASCII ) { <nl> + lpRebootMsg = new Memory ( s . length ( ) + 1 ) ; <nl> + lpRebootMsg . setString ( 0 , s ) ; <nl> + } else { <nl> + lpRebootMsg = new Memory ( ( s . length ( ) + 1 ) * Native . WCHAR _ SIZE ) ; <nl> + lpRebootMsg . setWideString ( 0 , s ) ; <nl> + } <nl> + } <nl> + <nl> + public String getRebootMessage ( ) { <nl> + if ( ASCII ) { <nl> + return lpRebootMsg . getString ( 0 ) ; <nl> + } else { <nl> + return lpRebootMsg . getWideString ( 0 ) ; <nl> + } <nl> + } <nl> + <nl> + public void setCommand ( String s ) { <nl> + if ( ASCII ) { <nl> + lpCommand = new Memory ( s . length ( ) + 1 ) ; <nl> + lpCommand . setString ( 0 , s ) ; <nl> + } else { <nl> + lpCommand = new Memory ( ( s . length ( ) + 1 ) * Native . WCHAR _ SIZE ) ; <nl> + lpCommand . setWideString ( 0 , s ) ; <nl> + } <nl> + } <nl> + <nl> + public String getCommand ( ) { <nl> + if ( ASCII ) { <nl> + return lpCommand . getString ( 0 ) ; <nl> + } else { <nl> + return lpCommand . getWideString ( 0 ) ; <nl> + } <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / W32ServiceTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / W32ServiceTest . java <nl> index 13f8e44 . . 51ce874 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / W32ServiceTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / W32ServiceTest . java <nl> @ @ - 108 , 8 + 108 , 8 @ @ public class W32ServiceTest extends TestCase { <nl> 	 	 service . setFailureActions ( actions , resetPeriod , rebootMsg , command ) ; <nl> <nl> 	 	 SERVICE _ FAILURE _ ACTIONS changedActions = service . getFailureActions ( ) ; <nl> - 	 	 assertEquals ( changedActions . lpRebootMsg . toString ( ) , rebootMsg ) ; <nl> - 	 	 assertEquals ( changedActions . lpCommand . toString ( ) , command ) ; <nl> + 	 	 assertEquals ( changedActions . getRebootMessage ( ) , rebootMsg ) ; <nl> + 	 	 assertEquals ( changedActions . getCommand ( ) , command ) ; <nl> 	 	 assertEquals ( changedActions . dwResetPeriod , resetPeriod ) ; <nl> 	 	 assertEquals ( changedActions . cActions , 4 ) ; <nl> 	 	 SC _ ACTION [ ] actionArray = ( SC _ ACTION [ ] ) changedActions . lpsaActions . toArray ( changedActions . cActions ) ;
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java b / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 index cd6b946 . . 8c6217e 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / W32Service . java 
 @ @ - 86 , 8 + 86 , 8 @ @ public class W32Service { 
 	 	 	 String command ) { 
 	 	 SERVICE _ FAILURE _ ACTIONS . ByReference actionStruct = new SERVICE _ FAILURE _ ACTIONS . ByReference ( ) ; 
 	 	 actionStruct . dwResetPeriod = resetPeriod ; 
 - 	 	 actionStruct . lpRebootMsg = new WString ( rebootMsg ) ; 
 - 	 	 actionStruct . lpCommand = new WString ( command ) ; 
 + 	 	 actionStruct . setRebootMessage ( rebootMsg ) ; 
 + 	 	 actionStruct . setCommand ( command ) ; 
 	 	 actionStruct . cActions = actions . size ( ) ; 
 
 	 	 actionStruct . lpsaActions = new SC _ ACTION . ByReference ( ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java 
 index dfe5157 . . 1bfbb9b 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import java . util . Arrays ; 
 import java . util . List ; 
 
 import com . sun . jna . Memory ; 
 + import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . WString ; 
 @ @ - 211 , 6 + 212 , 7 @ @ public interface Winsvc extends StdCallLibrary { 
 * / 
 public class SERVICE _ FAILURE _ ACTIONS extends Structure { 
 public static class ByReference extends SERVICE _ FAILURE _ ACTIONS implements Structure . ByReference { } 
 + private static final boolean ASCII = Boolean . getBoolean ( " w32 . ascii " ) ; 
 / * * 
 * The time after which to reset the failure count to zero if there are no failures , in 
 * seconds . Specify INFINITE to indicate that this value should never be reset . 
 @ @ - 228 , 7 + 230 , 7 @ @ public interface Winsvc extends StdCallLibrary { 
 * Windows Server 2003 and Windows XP : Localized strings are not supported until Windows 
 * Vista . 
 * / 
 - public WString lpRebootMsg ; 
 + public Pointer lpRebootMsg ; 
 / * * 
 * The command line of the process for the CreateProcess function to execute in response to 
 * the SC _ ACTION _ RUN _ COMMAND service controller action . This process runs under the same 
 @ @ - 236 , 7 + 238 , 7 @ @ public interface Winsvc extends StdCallLibrary { 
 * If this value is NULL , the command is unchanged . If the value is an empty string ( " " ) , 
 * the command is deleted and no program is run when the service fails . 
 * / 
 - public WString lpCommand ; 
 + public Pointer lpCommand ; 
 / * * 
 * The number of elements in the lpsaActions array . 
 * If this value is 0 , but lpsaActions is not NULL , the reset period and array of failure 
 @ @ - 261 , 6 + 263 , 42 @ @ public interface Winsvc extends StdCallLibrary { 
 protected List getFieldOrder ( ) { 
 return Arrays . asList ( new String [ ] { " dwResetPeriod " , " lpRebootMsg " , " lpCommand " , " cActions " , " lpsaActions " } ) ; 
 } 
 + 
 + public void setRebootMessage ( String s ) { 
 + if ( ASCII ) { 
 + lpRebootMsg = new Memory ( s . length ( ) + 1 ) ; 
 + lpRebootMsg . setString ( 0 , s ) ; 
 + } else { 
 + lpRebootMsg = new Memory ( ( s . length ( ) + 1 ) * Native . WCHAR _ SIZE ) ; 
 + lpRebootMsg . setWideString ( 0 , s ) ; 
 + } 
 + } 
 + 
 + public String getRebootMessage ( ) { 
 + if ( ASCII ) { 
 + return lpRebootMsg . getString ( 0 ) ; 
 + } else { 
 + return lpRebootMsg . getWideString ( 0 ) ; 
 + } 
 + } 
 + 
 + public void setCommand ( String s ) { 
 + if ( ASCII ) { 
 + lpCommand = new Memory ( s . length ( ) + 1 ) ; 
 + lpCommand . setString ( 0 , s ) ; 
 + } else { 
 + lpCommand = new Memory ( ( s . length ( ) + 1 ) * Native . WCHAR _ SIZE ) ; 
 + lpCommand . setWideString ( 0 , s ) ; 
 + } 
 + } 
 + 
 + public String getCommand ( ) { 
 + if ( ASCII ) { 
 + return lpCommand . getString ( 0 ) ; 
 + } else { 
 + return lpCommand . getWideString ( 0 ) ; 
 + } 
 + } 
 } 
 
 / * * 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / W32ServiceTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / W32ServiceTest . java 
 index 13f8e44 . . 51ce874 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / W32ServiceTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / W32ServiceTest . java 
 @ @ - 108 , 8 + 108 , 8 @ @ public class W32ServiceTest extends TestCase { 
 	 	 service . setFailureActions ( actions , resetPeriod , rebootMsg , command ) ; 
 
 	 	 SERVICE _ FAILURE _ ACTIONS changedActions = service . getFailureActions ( ) ; 
 - 	 	 assertEquals ( changedActions . lpRebootMsg . toString ( ) , rebootMsg ) ; 
 - 	 	 assertEquals ( changedActions . lpCommand . toString ( ) , command ) ; 
 + 	 	 assertEquals ( changedActions . getRebootMessage ( ) , rebootMsg ) ; 
 + 	 	 assertEquals ( changedActions . getCommand ( ) , command ) ; 
 	 	 assertEquals ( changedActions . dwResetPeriod , resetPeriod ) ; 
 	 	 assertEquals ( changedActions . cActions , 4 ) ; 
 	 	 SC _ ACTION [ ] actionArray = ( SC _ ACTION [ ] ) changedActions . lpsaActions . toArray ( changedActions . cActions ) ;

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
