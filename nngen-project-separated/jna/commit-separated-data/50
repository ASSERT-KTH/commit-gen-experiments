BLEU SCORE: 0.03283637368030199

TEST MSG: Add Cfgmgr32 functions for navigating device tree
GENERATED MSG: change license header to dual - license

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 8707a27 . . c9d585b 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 24 , 6 + 24 , 7 @ @ Features <nl> * [ # 980 ] ( https : / / github . com / java - native - access / jna / issues / 980 ) : Added ` PERF _ OBJECT _ TYPE ` , ` PERF _ COUNTER _ BLOCK ` , and ` PERF _ COUNTER _ DEFINITION ` to ` c . s . j . platform . win32 . WinPerf ` and added ` Pointer ` constructors to ` ` PERF _ INSTANCE _ DEFINITION ` and ` PERF _ DATA _ BLOCK ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> * [ # 981 ] ( https : / / github . com / java - native - access / jna / issues / 981 ) : Added ` WTS _ PROCESS _ INFO _ EX ` , ` WTSEnumerateProcessesEx ` , and ` WTSFreeMemoryEx ` to ` c . s . j . platform . win32 . Wtsapi32 ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> * [ # 983 ] ( https : / / github . com / java - native - access / jna / issues / 983 ) : Added ` GetIfEntry ` , ` GetIfEntry2 ` , and ` GetNetworkParams ` and supporting structures ` MIB _ IFROW ` , ` MIB _ IF _ ROW2 ` , and ` FIXED _ INFO ` to ` c . s . j . platform . win32 . IPHlpAPI . java ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> + * [ # 984 ] ( https : / / github . com / java - native - access / jna / issues / 984 ) : Added ` CM _ Locate _ DevNode ` , ` CM _ Get _ Parent ` , ` CM _ Get _ Child ` , ` CM _ Get _ Sibling ` , ` CM _ Get _ Device _ ID ` , and ` CM _ Get _ Device _ ID _ Size ` to ` c . s . j . platform . win32 . Cfgmgr32 . java ` and a ` c . s . j . platform . win32 . Cfgmgr32Util ` class for ` CM _ Get _ Device _ ID ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> * [ # 988 ] ( https : / / github . com / java - native - access / jna / issues / 988 ) : Added ` PdhLookupPerfIndexByEnglishName ` to ` c . s . j . platform . win32 . PdhUtil ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> <nl> Bug Fixes <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32 . java <nl> new file mode 100644 <nl> index 0000000 . . b857c66 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32 . java <nl> @ @ - 0 , 0 + 1 , 192 @ @ <nl> + / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved <nl> + * <nl> + * The contents of this file is dual - licensed under 2 <nl> + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and <nl> + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . <nl> + * <nl> + * You can freely decide which license you want to apply to <nl> + * the project . <nl> + * <nl> + * You may obtain a copy of the LGPL License at : <nl> + * <nl> + * http : / / www . gnu . org / licenses / licenses . html <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " LGPL2 . 1 " . <nl> + * <nl> + * You may obtain a copy of the Apache License at : <nl> + * <nl> + * http : / / www . apache . org / licenses / <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " AL2 . 0 " . <nl> + * / <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import com . sun . jna . Library ; <nl> + import com . sun . jna . Native ; <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + import com . sun . jna . win32 . W32APIOptions ; <nl> + <nl> + / * * <nl> + * Windows Cfgmgr32 . <nl> + * <nl> + * @ author widdis [ at ] gmail [ dot ] com <nl> + * / <nl> + public interface Cfgmgr32 extends Library { <nl> + Cfgmgr32 INSTANCE = Native . load ( " Cfgmgr32 " , Cfgmgr32 . class , W32APIOptions . DEFAULT _ OPTIONS ) ; <nl> + <nl> + public final static int CR _ SUCCESS = 0 ; <nl> + public final static int CR _ BUFFER _ SMALL = 0x0000001A ; <nl> + <nl> + public final static int CM _ LOCATE _ DEVNODE _ NORMAL = 0 ; <nl> + public final static int CM _ LOCATE _ DEVNODE _ PHANTOM = 1 ; <nl> + public final static int CM _ LOCATE _ DEVNODE _ CANCELREMOVE = 2 ; <nl> + public final static int CM _ LOCATE _ DEVNODE _ NOVALIDATION = 4 ; <nl> + public final static int CM _ LOCATE _ DEVNODE _ BITS = 7 ; <nl> + <nl> + / * * <nl> + * The CM _ Locate _ DevNode function obtains a device instance handle to the <nl> + * device node that is associated with a specified device instance ID on the <nl> + * local machine . <nl> + * <nl> + * @ param pdnDevInst <nl> + * A pointer to a device instance handle that CM _ Locate _ DevNode <nl> + * retrieves . The retrieved handle is bound to the local machine . <nl> + * @ param pDeviceID <nl> + * A pointer to a NULL - terminated string representing a device <nl> + * instance ID . If this value is NULL , or if it points to a <nl> + * zero - length string , the function retrieves a device instance <nl> + * handle to the device at the root of the device tree . * <nl> + * @ param ulFlags <nl> + * A variable of ULONG type that supplies one of the following <nl> + * flag values that apply if the caller supplies a device <nl> + * instance identifier : CM _ LOCATE _ DEVNODE _ NORMAL , <nl> + * CM _ LOCATE _ DEVNODE _ PHANTOM , CM _ LOCATE _ DEVNODE _ CANCELREMOVE , or <nl> + * CM _ LOCATE _ DEVNODE _ NOVALIDATION <nl> + * @ return If the operation succeeds , CM _ Locate _ DevNode returns CR _ SUCCESS . <nl> + * Otherwise , the function returns one of the CR _ Xxx error codes <nl> + * that are defined in Cfgmgr32 . h . <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ locate _ devnodea " > <nl> + * CM _ Locate _ DevNode < / A > <nl> + * / <nl> + int CM _ Locate _ DevNode ( IntByReference pdnDevInst , String pDeviceID , int ulFlags ) ; <nl> + <nl> + / * * <nl> + * The CM _ Get _ Parent function obtains a device instance handle to the parent <nl> + * node of a specified device node ( devnode ) in the local machine ' s device <nl> + * tree . <nl> + * <nl> + * @ param pdnDevInst <nl> + * Caller - supplied pointer to the device instance handle to the <nl> + * parent node that this function retrieves . The retrieved handle <nl> + * is bound to the local machine . <nl> + * @ param dnDevInst <nl> + * Caller - supplied device instance handle that is bound to the <nl> + * local machine . <nl> + * @ param ulFlags <nl> + * Not used , must be zero . <nl> + * @ return If the operation succeeds , the function returns CR _ SUCCESS . <nl> + * Otherwise , it returns one of the CR _ - prefixed error codes defined <nl> + * in Cfgmgr32 . h . <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ parent " > <nl> + * CM _ Get _ Parent < / A > <nl> + * / <nl> + int CM _ Get _ Parent ( IntByReference pdnDevInst , int dnDevInst , int ulFlags ) ; <nl> + <nl> + / * * <nl> + * The CM _ Get _ Child function is used to retrieve a device instance handle to <nl> + * the first child node of a specified device node ( devnode ) in the local <nl> + * machine ' s device tree . <nl> + * <nl> + * @ param pdnDevInst <nl> + * Caller - supplied pointer to the device instance handle to the <nl> + * child node that this function retrieves . The retrieved handle <nl> + * is bound to the local machine . <nl> + * @ param dnDevInst <nl> + * Caller - supplied device instance handle that is bound to the <nl> + * local machine . <nl> + * @ param ulFlags <nl> + * Not used , must be zero . <nl> + * @ return If the operation succeeds , the function returns CR _ SUCCESS . <nl> + * Otherwise , it returns one of the CR _ - prefixed error codes defined <nl> + * in Cfgmgr32 . h . <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ child " > <nl> + * CM _ Get _ Child < / A > <nl> + * / <nl> + int CM _ Get _ Child ( IntByReference pdnDevInst , int dnDevInst , int ulFlags ) ; <nl> + <nl> + / * * <nl> + * The CM _ Get _ Sibling function obtains a device instance handle to the next <nl> + * sibling node of a specified device node ( devnode ) in the local machine ' s <nl> + * device tree . <nl> + * <nl> + * @ param pdnDevInst <nl> + * Caller - supplied pointer to the device instance handle to the <nl> + * sibling node that this function retrieves . The retrieved <nl> + * handle is bound to the local machine . <nl> + * @ param dnDevInst <nl> + * Caller - supplied device instance handle that is bound to the <nl> + * local machine . <nl> + * @ param ulFlags <nl> + * Not used , must be zero . <nl> + * @ return If the operation succeeds , the function returns CR _ SUCCESS . <nl> + * Otherwise , it returns one of the CR _ - prefixed error codes defined <nl> + * in Cfgmgr32 . h . <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ sibling " > <nl> + * CM _ Get _ Sibling < / A > <nl> + * / <nl> + int CM _ Get _ Sibling ( IntByReference pdnDevInst , int dnDevInst , int ulFlags ) ; <nl> + <nl> + / * * <nl> + * The CM _ Get _ Device _ ID function retrieves the device instance ID for a <nl> + * specified device instance on the local machine . <nl> + * <nl> + * @ param devInst <nl> + * Caller - supplied device instance handle that is bound to the <nl> + * local machine . <nl> + * @ param Buffer <nl> + * Address of a buffer to receive a device instance ID string . <nl> + * The required buffer size can be obtained by calling <nl> + * CM _ Get _ Device _ ID _ Size , then incrementing the received value to <nl> + * allow room for the string ' s terminating NULL . <nl> + * @ param BufferLen <nl> + * Caller - supplied length , in characters , of the buffer specified <nl> + * by Buffer . <nl> + * @ param ulFlags <nl> + * Not used , must be zero . <nl> + * @ return If the operation succeeds , the function returns CR _ SUCCESS . <nl> + * Otherwise , it returns one of the CR _ - prefixed error codes defined <nl> + * in Cfgmgr32 . h . <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ device _ idw " > <nl> + * CM _ Get _ Device _ ID < / A > <nl> + * / <nl> + int CM _ Get _ Device _ ID ( int devInst , Pointer Buffer , int BufferLen , int ulFlags ) ; <nl> + <nl> + / * * <nl> + * The CM _ Get _ Device _ ID _ Size function retrieves the buffer size required to <nl> + * hold a device instance ID for a device instance on the local machine . <nl> + * <nl> + * @ param pulLen <nl> + * Receives a value representing the required buffer size , in <nl> + * characters . <nl> + * @ param dnDevInst <nl> + * Caller - supplied device instance handle that is bound to the <nl> + * local machine . <nl> + * @ param ulFlags <nl> + * Not used , must be zero . <nl> + * @ return If the operation succeeds , the function returns CR _ SUCCESS . <nl> + * Otherwise , it returns one of the CR _ - prefixed error codes defined <nl> + * in Cfgmgr32 . h . <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ device _ id _ size " > <nl> + * CM _ Get _ Device _ ID _ Size < / A > <nl> + * / <nl> + int CM _ Get _ Device _ ID _ Size ( IntByReference pulLen , int dnDevInst , int ulFlags ) ; <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32Util . java <nl> new file mode 100644 <nl> index 0000000 . . 935cbf8 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32Util . java <nl> @ @ - 0 , 0 + 1 , 99 @ @ <nl> + / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved <nl> + * <nl> + * The contents of this file is dual - licensed under 2 <nl> + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and <nl> + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . <nl> + * <nl> + * You can freely decide which license you want to apply to <nl> + * the project . <nl> + * <nl> + * You may obtain a copy of the LGPL License at : <nl> + * <nl> + * http : / / www . gnu . org / licenses / licenses . html <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " LGPL2 . 1 " . <nl> + * <nl> + * You may obtain a copy of the Apache License at : <nl> + * <nl> + * http : / / www . apache . org / licenses / <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " AL2 . 0 " . <nl> + * / <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import com . sun . jna . Memory ; <nl> + import com . sun . jna . Native ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + <nl> + / * * <nl> + * Cfgmgr32 utility API . <nl> + * <nl> + * @ author widdis [ at ] gmail [ dot ] com <nl> + * / <nl> + public abstract class Cfgmgr32Util { <nl> + @ SuppressWarnings ( " serial " ) <nl> + public static class Cfgmgr32Exception extends RuntimeException { <nl> + private final int errorCode ; <nl> + <nl> + public Cfgmgr32Exception ( int errorCode ) { <nl> + this . errorCode = errorCode ; <nl> + } <nl> + <nl> + public int getErrorCode ( ) { <nl> + return errorCode ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Utility method to call Cfgmgr32 ' s CM _ Get _ Device _ ID that allocates the <nl> + * required memory for the Buffer parameter based on the type mapping used , <nl> + * calls to CM _ Get _ Device _ ID , and returns the received string . <nl> + * <nl> + * @ param devInst <nl> + * Caller - supplied device instance handle that is bound to the <nl> + * local machine . <nl> + * @ return The device instance ID string . <nl> + * @ throws Cfgmgr32Exception <nl> + * / <nl> + public static String CM _ Get _ Device _ ID ( int devInst ) throws Cfgmgr32Exception { <nl> + int charToBytes = Boolean . getBoolean ( " w32 . ascii " ) ? 1 : Native . WCHAR _ SIZE ; <nl> + <nl> + / / Get Device ID character count <nl> + IntByReference pulLen = new IntByReference ( ) ; <nl> + int ret = Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID _ Size ( pulLen , devInst , 0 ) ; <nl> + if ( ret ! = Cfgmgr32 . CR _ SUCCESS ) { <nl> + throw new Cfgmgr32Exception ( ret ) ; <nl> + } <nl> + <nl> + / / Add one to length to allow null terminator <nl> + Memory buffer = new Memory ( ( pulLen . getValue ( ) + 1 ) * charToBytes ) ; <nl> + / / Zero the buffer ( including the extra character ) <nl> + buffer . clear ( ) ; <nl> + / / Fetch the buffer specifying only the current length <nl> + ret = Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID ( devInst , buffer , pulLen . getValue ( ) , 0 ) ; <nl> + / / In the unlikely event the device id changes this might not be big <nl> + / / enough , try again . This happens rarely enough one retry should be <nl> + / / sufficient . <nl> + if ( ret = = Cfgmgr32 . CR _ BUFFER _ SMALL ) { <nl> + ret = Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID _ Size ( pulLen , devInst , 0 ) ; <nl> + if ( ret ! = Cfgmgr32 . CR _ SUCCESS ) { <nl> + throw new Cfgmgr32Exception ( ret ) ; <nl> + } <nl> + buffer = new Memory ( ( pulLen . getValue ( ) + 1 ) * charToBytes ) ; <nl> + buffer . clear ( ) ; <nl> + ret = Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID ( devInst , buffer , pulLen . getValue ( ) , 0 ) ; <nl> + } <nl> + / / If we still aren ' t successful throw an exception <nl> + if ( ret ! = Cfgmgr32 . CR _ SUCCESS ) { <nl> + throw new Cfgmgr32Exception ( ret ) ; <nl> + } <nl> + / / Convert buffer to Java String <nl> + if ( charToBytes = = 1 ) { <nl> + return buffer . getString ( 0 ) ; <nl> + } else { <nl> + return buffer . getWideString ( 0 ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Cfgmgr32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Cfgmgr32Test . java <nl> new file mode 100644 <nl> index 0000000 . . 885bd4b <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Cfgmgr32Test . java <nl> @ @ - 0 , 0 + 1 , 90 @ @ <nl> + / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved <nl> + * <nl> + * The contents of this file is dual - licensed under 2 <nl> + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and <nl> + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . <nl> + * <nl> + * You can freely decide which license you want to apply to <nl> + * the project . <nl> + * <nl> + * You may obtain a copy of the LGPL License at : <nl> + * <nl> + * http : / / www . gnu . org / licenses / licenses . html <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " LGPL2 . 1 " . <nl> + * <nl> + * You may obtain a copy of the Apache License at : <nl> + * <nl> + * http : / / www . apache . org / licenses / <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " AL2 . 0 " . <nl> + * / <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertTrue ; <nl> + <nl> + import java . io . UnsupportedEncodingException ; <nl> + <nl> + import org . junit . Test ; <nl> + <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + <nl> + / * * <nl> + * Tests methods in Cfgmgr32 <nl> + * <nl> + * @ author widdis [ at ] gmail [ dot ] com <nl> + * / <nl> + public class Cfgmgr32Test { <nl> + / * * <nl> + * Tests CM _ Locate _ DevNode , CM _ Get _ Parent , CM _ Get _ Child , CM _ Get _ Sibling <nl> + * / <nl> + @ Test <nl> + public void testDevNode ( ) { <nl> + / / Fetch the root node <nl> + IntByReference outputNode = new IntByReference ( ) ; <nl> + assertEquals ( Cfgmgr32 . CR _ SUCCESS , <nl> + Cfgmgr32 . INSTANCE . CM _ Locate _ DevNode ( outputNode , null , Cfgmgr32 . CM _ LOCATE _ DEVNODE _ NORMAL ) ) ; <nl> + / / Get first child <nl> + int rootNode = outputNode . getValue ( ) ; <nl> + int inputNode = rootNode ; <nl> + assertEquals ( Cfgmgr32 . CR _ SUCCESS , Cfgmgr32 . INSTANCE . CM _ Get _ Child ( outputNode , inputNode , 0 ) ) ; <nl> + / / Iterate this child and its siblings <nl> + do { <nl> + inputNode = outputNode . getValue ( ) ; <nl> + / / Get parent , confirm it matches root <nl> + assertEquals ( Cfgmgr32 . CR _ SUCCESS , Cfgmgr32 . INSTANCE . CM _ Get _ Parent ( outputNode , inputNode , 0 ) ) ; <nl> + assertEquals ( rootNode , outputNode . getValue ( ) ) ; <nl> + } while ( Cfgmgr32 . CR _ SUCCESS = = Cfgmgr32 . INSTANCE . CM _ Get _ Sibling ( outputNode , inputNode , 0 ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Tests CM _ Locate _ DevNode , CM _ Get _ Device _ ID _ Size , CM _ Get _ Device _ ID <nl> + * <nl> + * @ throws UnsupportedEncodingException <nl> + * / <nl> + @ Test <nl> + public void testDeviceID ( ) { <nl> + / / Fetch the root node <nl> + IntByReference outputNode = new IntByReference ( ) ; <nl> + assertEquals ( Cfgmgr32 . CR _ SUCCESS , <nl> + Cfgmgr32 . INSTANCE . CM _ Locate _ DevNode ( outputNode , null , Cfgmgr32 . CM _ LOCATE _ DEVNODE _ NORMAL ) ) ; <nl> + int rootNode = outputNode . getValue ( ) ; <nl> + <nl> + / / Get Device ID character count <nl> + IntByReference pulLen = new IntByReference ( ) ; <nl> + Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID _ Size ( pulLen , rootNode , 0 ) ; <nl> + assertTrue ( pulLen . getValue ( ) > 0 ) ; <nl> + <nl> + / / Get Device ID from util <nl> + String deviceId = Cfgmgr32Util . CM _ Get _ Device _ ID ( rootNode ) ; <nl> + assertEquals ( pulLen . getValue ( ) , deviceId . length ( ) ) ; <nl> + <nl> + / / Look up node from device ID <nl> + assertEquals ( Cfgmgr32 . CR _ SUCCESS , <nl> + Cfgmgr32 . INSTANCE . CM _ Locate _ DevNode ( outputNode , deviceId , Cfgmgr32 . CM _ LOCATE _ DEVNODE _ NORMAL ) ) ; <nl> + assertEquals ( rootNode , outputNode . getValue ( ) ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 8707a27 . . c9d585b 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 24 , 6 + 24 , 7 @ @ Features 
 * [ # 980 ] ( https : / / github . com / java - native - access / jna / issues / 980 ) : Added ` PERF _ OBJECT _ TYPE ` , ` PERF _ COUNTER _ BLOCK ` , and ` PERF _ COUNTER _ DEFINITION ` to ` c . s . j . platform . win32 . WinPerf ` and added ` Pointer ` constructors to ` ` PERF _ INSTANCE _ DEFINITION ` and ` PERF _ DATA _ BLOCK ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 * [ # 981 ] ( https : / / github . com / java - native - access / jna / issues / 981 ) : Added ` WTS _ PROCESS _ INFO _ EX ` , ` WTSEnumerateProcessesEx ` , and ` WTSFreeMemoryEx ` to ` c . s . j . platform . win32 . Wtsapi32 ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 * [ # 983 ] ( https : / / github . com / java - native - access / jna / issues / 983 ) : Added ` GetIfEntry ` , ` GetIfEntry2 ` , and ` GetNetworkParams ` and supporting structures ` MIB _ IFROW ` , ` MIB _ IF _ ROW2 ` , and ` FIXED _ INFO ` to ` c . s . j . platform . win32 . IPHlpAPI . java ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 + * [ # 984 ] ( https : / / github . com / java - native - access / jna / issues / 984 ) : Added ` CM _ Locate _ DevNode ` , ` CM _ Get _ Parent ` , ` CM _ Get _ Child ` , ` CM _ Get _ Sibling ` , ` CM _ Get _ Device _ ID ` , and ` CM _ Get _ Device _ ID _ Size ` to ` c . s . j . platform . win32 . Cfgmgr32 . java ` and a ` c . s . j . platform . win32 . Cfgmgr32Util ` class for ` CM _ Get _ Device _ ID ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 * [ # 988 ] ( https : / / github . com / java - native - access / jna / issues / 988 ) : Added ` PdhLookupPerfIndexByEnglishName ` to ` c . s . j . platform . win32 . PdhUtil ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 
 Bug Fixes 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32 . java 
 new file mode 100644 
 index 0000000 . . b857c66 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32 . java 
 @ @ - 0 , 0 + 1 , 192 @ @ 
 + / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved 
 + * 
 + * The contents of this file is dual - licensed under 2 
 + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and 
 + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . 
 + * 
 + * You can freely decide which license you want to apply to 
 + * the project . 
 + * 
 + * You may obtain a copy of the LGPL License at : 
 + * 
 + * http : / / www . gnu . org / licenses / licenses . html 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " LGPL2 . 1 " . 
 + * 
 + * You may obtain a copy of the Apache License at : 
 + * 
 + * http : / / www . apache . org / licenses / 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " AL2 . 0 " . 
 + * / 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import com . sun . jna . Library ; 
 + import com . sun . jna . Native ; 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + import com . sun . jna . win32 . W32APIOptions ; 
 + 
 + / * * 
 + * Windows Cfgmgr32 . 
 + * 
 + * @ author widdis [ at ] gmail [ dot ] com 
 + * / 
 + public interface Cfgmgr32 extends Library { 
 + Cfgmgr32 INSTANCE = Native . load ( " Cfgmgr32 " , Cfgmgr32 . class , W32APIOptions . DEFAULT _ OPTIONS ) ; 
 + 
 + public final static int CR _ SUCCESS = 0 ; 
 + public final static int CR _ BUFFER _ SMALL = 0x0000001A ; 
 + 
 + public final static int CM _ LOCATE _ DEVNODE _ NORMAL = 0 ; 
 + public final static int CM _ LOCATE _ DEVNODE _ PHANTOM = 1 ; 
 + public final static int CM _ LOCATE _ DEVNODE _ CANCELREMOVE = 2 ; 
 + public final static int CM _ LOCATE _ DEVNODE _ NOVALIDATION = 4 ; 
 + public final static int CM _ LOCATE _ DEVNODE _ BITS = 7 ; 
 + 
 + / * * 
 + * The CM _ Locate _ DevNode function obtains a device instance handle to the 
 + * device node that is associated with a specified device instance ID on the 
 + * local machine . 
 + * 
 + * @ param pdnDevInst 
 + * A pointer to a device instance handle that CM _ Locate _ DevNode 
 + * retrieves . The retrieved handle is bound to the local machine . 
 + * @ param pDeviceID 
 + * A pointer to a NULL - terminated string representing a device 
 + * instance ID . If this value is NULL , or if it points to a 
 + * zero - length string , the function retrieves a device instance 
 + * handle to the device at the root of the device tree . * 
 + * @ param ulFlags 
 + * A variable of ULONG type that supplies one of the following 
 + * flag values that apply if the caller supplies a device 
 + * instance identifier : CM _ LOCATE _ DEVNODE _ NORMAL , 
 + * CM _ LOCATE _ DEVNODE _ PHANTOM , CM _ LOCATE _ DEVNODE _ CANCELREMOVE , or 
 + * CM _ LOCATE _ DEVNODE _ NOVALIDATION 
 + * @ return If the operation succeeds , CM _ Locate _ DevNode returns CR _ SUCCESS . 
 + * Otherwise , the function returns one of the CR _ Xxx error codes 
 + * that are defined in Cfgmgr32 . h . 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ locate _ devnodea " > 
 + * CM _ Locate _ DevNode < / A > 
 + * / 
 + int CM _ Locate _ DevNode ( IntByReference pdnDevInst , String pDeviceID , int ulFlags ) ; 
 + 
 + / * * 
 + * The CM _ Get _ Parent function obtains a device instance handle to the parent 
 + * node of a specified device node ( devnode ) in the local machine ' s device 
 + * tree . 
 + * 
 + * @ param pdnDevInst 
 + * Caller - supplied pointer to the device instance handle to the 
 + * parent node that this function retrieves . The retrieved handle 
 + * is bound to the local machine . 
 + * @ param dnDevInst 
 + * Caller - supplied device instance handle that is bound to the 
 + * local machine . 
 + * @ param ulFlags 
 + * Not used , must be zero . 
 + * @ return If the operation succeeds , the function returns CR _ SUCCESS . 
 + * Otherwise , it returns one of the CR _ - prefixed error codes defined 
 + * in Cfgmgr32 . h . 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ parent " > 
 + * CM _ Get _ Parent < / A > 
 + * / 
 + int CM _ Get _ Parent ( IntByReference pdnDevInst , int dnDevInst , int ulFlags ) ; 
 + 
 + / * * 
 + * The CM _ Get _ Child function is used to retrieve a device instance handle to 
 + * the first child node of a specified device node ( devnode ) in the local 
 + * machine ' s device tree . 
 + * 
 + * @ param pdnDevInst 
 + * Caller - supplied pointer to the device instance handle to the 
 + * child node that this function retrieves . The retrieved handle 
 + * is bound to the local machine . 
 + * @ param dnDevInst 
 + * Caller - supplied device instance handle that is bound to the 
 + * local machine . 
 + * @ param ulFlags 
 + * Not used , must be zero . 
 + * @ return If the operation succeeds , the function returns CR _ SUCCESS . 
 + * Otherwise , it returns one of the CR _ - prefixed error codes defined 
 + * in Cfgmgr32 . h . 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ child " > 
 + * CM _ Get _ Child < / A > 
 + * / 
 + int CM _ Get _ Child ( IntByReference pdnDevInst , int dnDevInst , int ulFlags ) ; 
 + 
 + / * * 
 + * The CM _ Get _ Sibling function obtains a device instance handle to the next 
 + * sibling node of a specified device node ( devnode ) in the local machine ' s 
 + * device tree . 
 + * 
 + * @ param pdnDevInst 
 + * Caller - supplied pointer to the device instance handle to the 
 + * sibling node that this function retrieves . The retrieved 
 + * handle is bound to the local machine . 
 + * @ param dnDevInst 
 + * Caller - supplied device instance handle that is bound to the 
 + * local machine . 
 + * @ param ulFlags 
 + * Not used , must be zero . 
 + * @ return If the operation succeeds , the function returns CR _ SUCCESS . 
 + * Otherwise , it returns one of the CR _ - prefixed error codes defined 
 + * in Cfgmgr32 . h . 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ sibling " > 
 + * CM _ Get _ Sibling < / A > 
 + * / 
 + int CM _ Get _ Sibling ( IntByReference pdnDevInst , int dnDevInst , int ulFlags ) ; 
 + 
 + / * * 
 + * The CM _ Get _ Device _ ID function retrieves the device instance ID for a 
 + * specified device instance on the local machine . 
 + * 
 + * @ param devInst 
 + * Caller - supplied device instance handle that is bound to the 
 + * local machine . 
 + * @ param Buffer 
 + * Address of a buffer to receive a device instance ID string . 
 + * The required buffer size can be obtained by calling 
 + * CM _ Get _ Device _ ID _ Size , then incrementing the received value to 
 + * allow room for the string ' s terminating NULL . 
 + * @ param BufferLen 
 + * Caller - supplied length , in characters , of the buffer specified 
 + * by Buffer . 
 + * @ param ulFlags 
 + * Not used , must be zero . 
 + * @ return If the operation succeeds , the function returns CR _ SUCCESS . 
 + * Otherwise , it returns one of the CR _ - prefixed error codes defined 
 + * in Cfgmgr32 . h . 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ device _ idw " > 
 + * CM _ Get _ Device _ ID < / A > 
 + * / 
 + int CM _ Get _ Device _ ID ( int devInst , Pointer Buffer , int BufferLen , int ulFlags ) ; 
 + 
 + / * * 
 + * The CM _ Get _ Device _ ID _ Size function retrieves the buffer size required to 
 + * hold a device instance ID for a device instance on the local machine . 
 + * 
 + * @ param pulLen 
 + * Receives a value representing the required buffer size , in 
 + * characters . 
 + * @ param dnDevInst 
 + * Caller - supplied device instance handle that is bound to the 
 + * local machine . 
 + * @ param ulFlags 
 + * Not used , must be zero . 
 + * @ return If the operation succeeds , the function returns CR _ SUCCESS . 
 + * Otherwise , it returns one of the CR _ - prefixed error codes defined 
 + * in Cfgmgr32 . h . 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / cfgmgr32 / nf - cfgmgr32 - cm _ get _ device _ id _ size " > 
 + * CM _ Get _ Device _ ID _ Size < / A > 
 + * / 
 + int CM _ Get _ Device _ ID _ Size ( IntByReference pulLen , int dnDevInst , int ulFlags ) ; 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32Util . java 
 new file mode 100644 
 index 0000000 . . 935cbf8 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Cfgmgr32Util . java 
 @ @ - 0 , 0 + 1 , 99 @ @ 
 + / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved 
 + * 
 + * The contents of this file is dual - licensed under 2 
 + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and 
 + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . 
 + * 
 + * You can freely decide which license you want to apply to 
 + * the project . 
 + * 
 + * You may obtain a copy of the LGPL License at : 
 + * 
 + * http : / / www . gnu . org / licenses / licenses . html 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " LGPL2 . 1 " . 
 + * 
 + * You may obtain a copy of the Apache License at : 
 + * 
 + * http : / / www . apache . org / licenses / 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " AL2 . 0 " . 
 + * / 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import com . sun . jna . Memory ; 
 + import com . sun . jna . Native ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + 
 + / * * 
 + * Cfgmgr32 utility API . 
 + * 
 + * @ author widdis [ at ] gmail [ dot ] com 
 + * / 
 + public abstract class Cfgmgr32Util { 
 + @ SuppressWarnings ( " serial " ) 
 + public static class Cfgmgr32Exception extends RuntimeException { 
 + private final int errorCode ; 
 + 
 + public Cfgmgr32Exception ( int errorCode ) { 
 + this . errorCode = errorCode ; 
 + } 
 + 
 + public int getErrorCode ( ) { 
 + return errorCode ; 
 + } 
 + } 
 + 
 + / * * 
 + * Utility method to call Cfgmgr32 ' s CM _ Get _ Device _ ID that allocates the 
 + * required memory for the Buffer parameter based on the type mapping used , 
 + * calls to CM _ Get _ Device _ ID , and returns the received string . 
 + * 
 + * @ param devInst 
 + * Caller - supplied device instance handle that is bound to the 
 + * local machine . 
 + * @ return The device instance ID string . 
 + * @ throws Cfgmgr32Exception 
 + * / 
 + public static String CM _ Get _ Device _ ID ( int devInst ) throws Cfgmgr32Exception { 
 + int charToBytes = Boolean . getBoolean ( " w32 . ascii " ) ? 1 : Native . WCHAR _ SIZE ; 
 + 
 + / / Get Device ID character count 
 + IntByReference pulLen = new IntByReference ( ) ; 
 + int ret = Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID _ Size ( pulLen , devInst , 0 ) ; 
 + if ( ret ! = Cfgmgr32 . CR _ SUCCESS ) { 
 + throw new Cfgmgr32Exception ( ret ) ; 
 + } 
 + 
 + / / Add one to length to allow null terminator 
 + Memory buffer = new Memory ( ( pulLen . getValue ( ) + 1 ) * charToBytes ) ; 
 + / / Zero the buffer ( including the extra character ) 
 + buffer . clear ( ) ; 
 + / / Fetch the buffer specifying only the current length 
 + ret = Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID ( devInst , buffer , pulLen . getValue ( ) , 0 ) ; 
 + / / In the unlikely event the device id changes this might not be big 
 + / / enough , try again . This happens rarely enough one retry should be 
 + / / sufficient . 
 + if ( ret = = Cfgmgr32 . CR _ BUFFER _ SMALL ) { 
 + ret = Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID _ Size ( pulLen , devInst , 0 ) ; 
 + if ( ret ! = Cfgmgr32 . CR _ SUCCESS ) { 
 + throw new Cfgmgr32Exception ( ret ) ; 
 + } 
 + buffer = new Memory ( ( pulLen . getValue ( ) + 1 ) * charToBytes ) ; 
 + buffer . clear ( ) ; 
 + ret = Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID ( devInst , buffer , pulLen . getValue ( ) , 0 ) ; 
 + } 
 + / / If we still aren ' t successful throw an exception 
 + if ( ret ! = Cfgmgr32 . CR _ SUCCESS ) { 
 + throw new Cfgmgr32Exception ( ret ) ; 
 + } 
 + / / Convert buffer to Java String 
 + if ( charToBytes = = 1 ) { 
 + return buffer . getString ( 0 ) ; 
 + } else { 
 + return buffer . getWideString ( 0 ) ; 
 + } 
 + } 
 + } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Cfgmgr32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Cfgmgr32Test . java 
 new file mode 100644 
 index 0000000 . . 885bd4b 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Cfgmgr32Test . java 
 @ @ - 0 , 0 + 1 , 90 @ @ 
 + / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved 
 + * 
 + * The contents of this file is dual - licensed under 2 
 + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and 
 + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . 
 + * 
 + * You can freely decide which license you want to apply to 
 + * the project . 
 + * 
 + * You may obtain a copy of the LGPL License at : 
 + * 
 + * http : / / www . gnu . org / licenses / licenses . html 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " LGPL2 . 1 " . 
 + * 
 + * You may obtain a copy of the Apache License at : 
 + * 
 + * http : / / www . apache . org / licenses / 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " AL2 . 0 " . 
 + * / 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertTrue ; 
 + 
 + import java . io . UnsupportedEncodingException ; 
 + 
 + import org . junit . Test ; 
 + 
 + import com . sun . jna . ptr . IntByReference ; 
 + 
 + / * * 
 + * Tests methods in Cfgmgr32 
 + * 
 + * @ author widdis [ at ] gmail [ dot ] com 
 + * / 
 + public class Cfgmgr32Test { 
 + / * * 
 + * Tests CM _ Locate _ DevNode , CM _ Get _ Parent , CM _ Get _ Child , CM _ Get _ Sibling 
 + * / 
 + @ Test 
 + public void testDevNode ( ) { 
 + / / Fetch the root node 
 + IntByReference outputNode = new IntByReference ( ) ; 
 + assertEquals ( Cfgmgr32 . CR _ SUCCESS , 
 + Cfgmgr32 . INSTANCE . CM _ Locate _ DevNode ( outputNode , null , Cfgmgr32 . CM _ LOCATE _ DEVNODE _ NORMAL ) ) ; 
 + / / Get first child 
 + int rootNode = outputNode . getValue ( ) ; 
 + int inputNode = rootNode ; 
 + assertEquals ( Cfgmgr32 . CR _ SUCCESS , Cfgmgr32 . INSTANCE . CM _ Get _ Child ( outputNode , inputNode , 0 ) ) ; 
 + / / Iterate this child and its siblings 
 + do { 
 + inputNode = outputNode . getValue ( ) ; 
 + / / Get parent , confirm it matches root 
 + assertEquals ( Cfgmgr32 . CR _ SUCCESS , Cfgmgr32 . INSTANCE . CM _ Get _ Parent ( outputNode , inputNode , 0 ) ) ; 
 + assertEquals ( rootNode , outputNode . getValue ( ) ) ; 
 + } while ( Cfgmgr32 . CR _ SUCCESS = = Cfgmgr32 . INSTANCE . CM _ Get _ Sibling ( outputNode , inputNode , 0 ) ) ; 
 + } 
 + 
 + / * * 
 + * Tests CM _ Locate _ DevNode , CM _ Get _ Device _ ID _ Size , CM _ Get _ Device _ ID 
 + * 
 + * @ throws UnsupportedEncodingException 
 + * / 
 + @ Test 
 + public void testDeviceID ( ) { 
 + / / Fetch the root node 
 + IntByReference outputNode = new IntByReference ( ) ; 
 + assertEquals ( Cfgmgr32 . CR _ SUCCESS , 
 + Cfgmgr32 . INSTANCE . CM _ Locate _ DevNode ( outputNode , null , Cfgmgr32 . CM _ LOCATE _ DEVNODE _ NORMAL ) ) ; 
 + int rootNode = outputNode . getValue ( ) ; 
 + 
 + / / Get Device ID character count 
 + IntByReference pulLen = new IntByReference ( ) ; 
 + Cfgmgr32 . INSTANCE . CM _ Get _ Device _ ID _ Size ( pulLen , rootNode , 0 ) ; 
 + assertTrue ( pulLen . getValue ( ) > 0 ) ; 
 + 
 + / / Get Device ID from util 
 + String deviceId = Cfgmgr32Util . CM _ Get _ Device _ ID ( rootNode ) ; 
 + assertEquals ( pulLen . getValue ( ) , deviceId . length ( ) ) ; 
 + 
 + / / Look up node from device ID 
 + assertEquals ( Cfgmgr32 . CR _ SUCCESS , 
 + Cfgmgr32 . INSTANCE . CM _ Locate _ DevNode ( outputNode , deviceId , Cfgmgr32 . CM _ LOCATE _ DEVNODE _ NORMAL ) ) ; 
 + assertEquals ( rootNode , outputNode . getValue ( ) ) ; 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
