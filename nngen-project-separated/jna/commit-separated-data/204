BLEU SCORE: 0.392814650900513

TEST MSG: updated " Promote float varargs to double " bug fix
GENERATED MSG: Promote float varargs to double

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 8871e13 . . c107223 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 40 , 6 + 40 , 7 @ @ Bug Fixes <nl> * [ # 536 ] ( https : / / github . com / java - native - access / jna / pull / 536 ) : Fixed bug in determining the Library and options associated with types defined outside of a Library - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 531 ] ( https : / / github . com / java - native - access / jna / pull / 531 ) : Ensure direct - mapped callbacks use the right calling convention - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 566 ] ( https : / / github . com / java - native - access / jna / pull / 566 ) : Fix return type of Native # loadLibrary to match unconstrained generic [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) <nl> + * [ # 584 ] ( https : / / github . com / java - native - access / jna / pull / 584 ) : Promote float varargs to double - [ @ marco2357 ] ( https : / / github . com / marco2357 ) . <nl> <nl> Release 4 . 2 . 1 <nl> = = = = = = = = = = = = = <nl> diff - - git a / native / testlib . c b / native / testlib . c <nl> index 5cdb681 . . def7eb9 100644 <nl> - - - a / native / testlib . c <nl> + + + b / native / testlib . c <nl> @ @ - 872 , 7 + 872 , 8 @ @ addInt32VarArgs ( const char * fmt , . . . ) { <nl> case ' c ' : <nl> sum + = ( int ) va _ arg ( ap , int ) ; <nl> break ; <nl> - case ' f ' : <nl> + case ' f ' : / / float ( promoted to ‘ double ’ when passed through ‘ . . . ’ ) <nl> + case ' F ' : / / double <nl> sum + = va _ arg ( ap , double ) ; <nl> break ; <nl> default : <nl> diff - - git a / test / com / sun / jna / VarArgsTest . java b / test / com / sun / jna / VarArgsTest . java <nl> index dd67266 . . 2654831 100644 <nl> - - - a / test / com / sun / jna / VarArgsTest . java <nl> + + + b / test / com / sun / jna / VarArgsTest . java <nl> @ @ - 70 , 7 + 70 , 7 @ @ public class VarArgsTest extends TestCase { <nl> double arg1 = 1 ; <nl> double arg2 = 2 ; <nl> assertEquals ( " VarArgs not added correctly " , ( int ) arg1 + ( int ) arg2 , <nl> - lib . addInt32VarArgs ( " ff " , Double . valueOf ( arg1 ) , Double . valueOf ( arg2 ) ) ) ; <nl> + lib . addInt32VarArgs ( " FF " , Double . valueOf ( arg1 ) , Double . valueOf ( arg2 ) ) ) ; <nl> } <nl> public void testStringVarArgs ( ) { <nl> Object [ ] args = new Object [ ] { " Test " } ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 8871e13 . . c107223 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 40 , 6 + 40 , 7 @ @ Bug Fixes 
 * [ # 536 ] ( https : / / github . com / java - native - access / jna / pull / 536 ) : Fixed bug in determining the Library and options associated with types defined outside of a Library - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 531 ] ( https : / / github . com / java - native - access / jna / pull / 531 ) : Ensure direct - mapped callbacks use the right calling convention - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 566 ] ( https : / / github . com / java - native - access / jna / pull / 566 ) : Fix return type of Native # loadLibrary to match unconstrained generic [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) 
 + * [ # 584 ] ( https : / / github . com / java - native - access / jna / pull / 584 ) : Promote float varargs to double - [ @ marco2357 ] ( https : / / github . com / marco2357 ) . 
 
 Release 4 . 2 . 1 
 = = = = = = = = = = = = = 
 diff - - git a / native / testlib . c b / native / testlib . c 
 index 5cdb681 . . def7eb9 100644 
 - - - a / native / testlib . c 
 + + + b / native / testlib . c 
 @ @ - 872 , 7 + 872 , 8 @ @ addInt32VarArgs ( const char * fmt , . . . ) { 
 case ' c ' : 
 sum + = ( int ) va _ arg ( ap , int ) ; 
 break ; 
 - case ' f ' : 
 + case ' f ' : / / float ( promoted to ‘ double ’ when passed through ‘ . . . ’ ) 
 + case ' F ' : / / double 
 sum + = va _ arg ( ap , double ) ; 
 break ; 
 default : 
 diff - - git a / test / com / sun / jna / VarArgsTest . java b / test / com / sun / jna / VarArgsTest . java 
 index dd67266 . . 2654831 100644 
 - - - a / test / com / sun / jna / VarArgsTest . java 
 + + + b / test / com / sun / jna / VarArgsTest . java 
 @ @ - 70 , 7 + 70 , 7 @ @ public class VarArgsTest extends TestCase { 
 double arg1 = 1 ; 
 double arg2 = 2 ; 
 assertEquals ( " VarArgs not added correctly " , ( int ) arg1 + ( int ) arg2 , 
 - lib . addInt32VarArgs ( " ff " , Double . valueOf ( arg1 ) , Double . valueOf ( arg2 ) ) ) ; 
 + lib . addInt32VarArgs ( " FF " , Double . valueOf ( arg1 ) , Double . valueOf ( arg2 ) ) ) ; 
 } 
 public void testStringVarArgs ( ) { 
 Object [ ] args = new Object [ ] { " Test " } ;

NEAREST DIFF:
ELIMINATEDSENTENCE
