BLEU SCORE: 0.016932492841722675

TEST MSG: reorganize tests , ensure by value arguments always use their own memory
GENERATED MSG: fix cacheing of union type information

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index 5035dfc . . da386bb 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 289 , 14 + 289 , 22 @ @ public abstract class Structure { <nl> / / Clear any local cache <nl> nativeStrings . clear ( ) ; <nl> <nl> - / / Ensure our memory pointer is initialized , even if we can ' t <nl> - / / yet figure out a proper size / layout <nl> - this . memory = m . share ( offset ) ; <nl> - if ( size = = CALCULATE _ SIZE ) { <nl> - size = calculateSize ( false ) ; <nl> + if ( this instanceof ByValue ) { <nl> + / / ByValue always uses own memory <nl> + byte [ ] buf = new byte [ size ( ) ] ; <nl> + m . read ( 0 , buf , 0 , buf . length ) ; <nl> + this . memory . write ( 0 , buf , 0 , buf . length ) ; <nl> } <nl> - if ( size ! = CALCULATE _ SIZE ) { <nl> - this . memory = m . share ( offset , size ) ; <nl> + else { <nl> + / / Ensure our memory pointer is initialized , even if we can ' t <nl> + / / yet figure out a proper size / layout <nl> + this . memory = m . share ( offset ) ; <nl> + if ( size = = CALCULATE _ SIZE ) { <nl> + size = calculateSize ( false ) ; <nl> + } <nl> + if ( size ! = CALCULATE _ SIZE ) { <nl> + this . memory = m . share ( offset , size ) ; <nl> + } <nl> } <nl> this . array = null ; <nl> this . readCalled = false ; <nl> @ @ - 1581 , 7 + 1589 , 9 @ @ public abstract class Structure { <nl> throw new IllegalArgumentException ( msg ) ; <nl> } <nl> Structure s = newInstance ( type ) ; <nl> - s . useMemory ( init ) ; <nl> + if ( init ! = PLACEHOLDER _ MEMORY ) { <nl> + s . useMemory ( init ) ; <nl> + } <nl> return s ; <nl> } <nl> <nl> diff - - git a / test / com / sun / jna / ArgumentsMarshalTest . java b / test / com / sun / jna / ArgumentsMarshalTest . java <nl> index b920ad9 . . a59d835 100644 <nl> - - - a / test / com / sun / jna / ArgumentsMarshalTest . java <nl> + + + b / test / com / sun / jna / ArgumentsMarshalTest . java <nl> @ @ - 130 , 16 + 130 , 6 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> } <nl> } <nl> void setCallbackInStruct ( CbStruct cbstruct ) ; <nl> - <nl> - / / Union ( by value ) <nl> - class TestUnion extends Union implements Structure . ByValue { <nl> - public String f1 ; <nl> - public int f2 ; <nl> - } <nl> - interface UnionCallback extends Callback { <nl> - TestUnion invoke ( TestUnion arg ) ; <nl> - } <nl> - TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; <nl> } <nl> <nl> TestLibrary lib ; <nl> @ @ - 600 , 27 + 590 , 6 @ @ public class ArgumentsMarshalTest extends TestCase { <nl> assertEquals ( " Auto read should be disabled " , EXPECTED , s . field ) ; <nl> } <nl> <nl> - public void testUnionByValueCallbackArgument ( ) throws Exception { <nl> - TestLibrary . TestUnion arg = new TestLibrary . TestUnion ( ) ; <nl> - arg . setType ( String . class ) ; <nl> - final String VALUE = getName ( ) ; <nl> - arg . f1 = VALUE ; <nl> - final boolean [ ] called = { false } ; <nl> - final String [ ] cbvalue = { null } ; <nl> - TestLibrary . TestUnion result = lib . testUnionByValueCallbackArgument ( new TestLibrary . UnionCallback ( ) { <nl> - public TestLibrary . TestUnion invoke ( TestLibrary . TestUnion v ) { <nl> - called [ 0 ] = true ; <nl> - v . setType ( String . class ) ; <nl> - v . read ( ) ; <nl> - cbvalue [ 0 ] = v . f1 ; <nl> - return v ; <nl> - } <nl> - } , arg ) ; <nl> - assertTrue ( " Callback not called " , called [ 0 ] ) ; <nl> - assertEquals ( " Incorrect callback union argument " , VALUE , cbvalue [ 0 ] ) ; <nl> - assertEquals ( " Union value not propagated " , VALUE , result . getTypedValue ( String . class ) ) ; <nl> - } <nl> - <nl> public static void main ( java . lang . String [ ] argList ) { <nl> junit . textui . TestRunner . run ( ArgumentsMarshalTest . class ) ; <nl> } <nl> diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java <nl> index c127823 . . 612751b 100644 <nl> - - - a / test / com / sun / jna / CallbacksTest . java <nl> + + + b / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 169 , 6 + 169 , 16 @ @ public class CallbacksTest extends TestCase { <nl> } <nl> } <nl> void callCallbackInStruct ( CbStruct cbstruct ) ; <nl> + <nl> + / / Union ( by value ) <nl> + class TestUnion extends Union implements Structure . ByValue { <nl> + public String f1 ; <nl> + public int f2 ; <nl> + } <nl> + interface UnionCallback extends Callback { <nl> + TestUnion invoke ( TestUnion arg ) ; <nl> + } <nl> + TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; <nl> } <nl> <nl> TestLibrary lib ; <nl> @ @ - 664 , 17 + 674 , 14 @ @ public class CallbacksTest extends TestCase { <nl> } <nl> <nl> public void testCallCallbackWithStructByValue ( ) { <nl> + final boolean [ ] called = { false } ; <nl> + final TestStructure . ByValue [ ] arg = { null } ; <nl> final TestStructure . ByValue s = new TestStructure . ByValue ( ) ; <nl> - final TestStructure innerResult = new TestStructure ( ) ; <nl> TestStructure . TestCallback cb = new TestStructure . TestCallback ( ) { <nl> public TestStructure . ByValue callback ( TestStructure . ByValue s ) { <nl> / / Copy the argument value for later comparison <nl> - Pointer old = innerResult . getPointer ( ) ; <nl> - innerResult . useMemory ( s . getPointer ( ) ) ; <nl> - innerResult . read ( ) ; <nl> - innerResult . useMemory ( old ) ; <nl> - innerResult . write ( ) ; <nl> - return s ; <nl> + called [ 0 ] = true ; <nl> + return arg [ 0 ] = s ; <nl> } <nl> } ; <nl> s . c = ( byte ) 0x11 ; <nl> @ @ - 684 , 10 + 691 , 39 @ @ public class CallbacksTest extends TestCase { <nl> s . inner . value = 5 ; <nl> <nl> TestStructure result = lib . callCallbackWithStructByValue ( cb , s ) ; <nl> - assertEquals ( " Wrong value passed to callback " , s , innerResult ) ; <nl> - assertEquals ( " Wrong value for result " , s , result ) ; <nl> + assertTrue ( " Callback not called " , called [ 0 ] ) ; <nl> + assertTrue ( " ByValue argument should own its own memory , instead was " <nl> + + arg [ 0 ] . getPointer ( ) , arg [ 0 ] . getPointer ( ) instanceof Memory ) ; <nl> + assertTrue ( " ByValue result should own its own memory , instead was " <nl> + + result . getPointer ( ) , result . getPointer ( ) instanceof Memory ) ; <nl> + assertEquals ( " Wrong value for callback argument " , s , arg [ 0 ] ) ; <nl> + assertEquals ( " Wrong value for callback result " , s , result ) ; <nl> } <nl> <nl> + public void testUnionByValueCallbackArgument ( ) throws Exception { <nl> + TestLibrary . TestUnion arg = new TestLibrary . TestUnion ( ) ; <nl> + arg . setType ( String . class ) ; <nl> + final String VALUE = getName ( ) ; <nl> + arg . f1 = VALUE ; <nl> + final boolean [ ] called = { false } ; <nl> + final TestLibrary . TestUnion [ ] cbvalue = { null } ; <nl> + TestLibrary . TestUnion result = lib . testUnionByValueCallbackArgument ( new TestLibrary . UnionCallback ( ) { <nl> + public TestLibrary . TestUnion invoke ( TestLibrary . TestUnion v ) { <nl> + called [ 0 ] = true ; <nl> + v . setType ( String . class ) ; <nl> + v . read ( ) ; <nl> + cbvalue [ 0 ] = v ; <nl> + return v ; <nl> + } <nl> + } , arg ) ; <nl> + assertTrue ( " Callback not called " , called [ 0 ] ) ; <nl> + assertTrue ( " ByValue argument should have its own allocated memory , instead was " <nl> + + cbvalue [ 0 ] . getPointer ( ) , <nl> + cbvalue [ 0 ] . getPointer ( ) instanceof Memory ) ; <nl> + assertEquals ( " Wrong value for callback argument " , VALUE , cbvalue [ 0 ] . f1 ) ; <nl> + assertEquals ( " Wrong value for callback result " , VALUE , result . getTypedValue ( String . class ) ) ; <nl> + } <nl> + <nl> public void testCallCallbackWithCallbackArgumentAndResult ( ) { <nl> TestLibrary . CbCallback cb = new TestLibrary . CbCallback ( ) { <nl> public CbCallback callback ( CbCallback arg ) { <nl> diff - - git a / test / com / sun / jna / DirectArgumentsMarshalTest . java b / test / com / sun / jna / DirectArgumentsMarshalTest . java <nl> index be9c564 . . f47fb2e 100644 <nl> - - - a / test / com / sun / jna / DirectArgumentsMarshalTest . java <nl> + + + b / test / com / sun / jna / DirectArgumentsMarshalTest . java <nl> @ @ - 79 , 7 + 79 , 6 @ @ public class DirectArgumentsMarshalTest extends ArgumentsMarshalTest { <nl> public native Pointer testStructurePointerArgument ( MinTestStructure s ) ; <nl> public native String returnStringFromVariableSizedStructure ( VariableSizedStructure s ) ; <nl> public native void setCallbackInStruct ( CbStruct s ) ; <nl> - public native TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; <nl> <nl> static { <nl> Native . register ( " testlib " ) ; <nl> diff - - git a / test / com / sun / jna / DirectCallbacksTest . java b / test / com / sun / jna / DirectCallbacksTest . java <nl> index 11347d2 . . e97a449 100644 <nl> - - - a / test / com / sun / jna / DirectCallbacksTest . java <nl> + + + b / test / com / sun / jna / DirectCallbacksTest . java <nl> @ @ - 46 , 6 + 46 , 7 @ @ public class DirectCallbacksTest extends CallbacksTest { <nl> <nl> public native int callInt32Callback ( CustomCallback cb , int arg1 , int arg2 ) ; <nl> public native void callCallbackInStruct ( CbStruct s ) ; <nl> + public native TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; <nl> <nl> static { <nl> Native . register ( " testlib " ) ;
NEAREST DIFF (one line): diff - - git a / jnalib / release - notes . html b / jnalib / release - notes . html <nl> index 130c5ae . . a64e6ec 100755 <nl> - - - a / jnalib / release - notes . html <nl> + + + b / jnalib / release - notes . html <nl> @ @ - 9 , 6 + 9 , 7 @ @ <nl> < li > Allow implicit library access to current process on linux ( < a href = " https : / / jna . dev . java . net / issues / show _ bug . cgi ? id = 98 " > issue 98 < / a > ) . <nl> < li > Open all shared libraries with RTLD _ GLOBAL , if applicable . This was the <nl> default behavior on OSX and changes the default behavior on linux . <nl> + < li > Allow NIO Buffer as Structure field ( with limitations ) ( < a href = " https : / / jna . dev . java . net / issues / show _ bug . cgi ? id = 57 " > Issue 57 < / a > ) <nl> < / ul > <nl> < b > Bug Fixes < / b > <nl> < ul > <nl> diff - - git a / jnalib / src / com / sun / jna / Structure . java b / jnalib / src / com / sun / jna / Structure . java <nl> index 05edafe2 . . b038df0 100644 <nl> - - - a / jnalib / src / com / sun / jna / Structure . java <nl> + + + b / jnalib / src / com / sun / jna / Structure . java <nl> @ @ - 491 , 6 + 491 , 19 @ @ public abstract class Structure { <nl> result = cb ; <nl> } <nl> } <nl> + else if ( Buffer . class . isAssignableFrom ( nativeType ) ) { <nl> + Pointer bp = memory . getPointer ( offset ) ; <nl> + if ( bp = = null ) { <nl> + result = null ; <nl> + } <nl> + else { <nl> + Pointer oldbp = currentValue = = null ? null <nl> + : Native . getDirectBufferPointer ( ( Buffer ) currentValue ) ; <nl> + if ( oldbp = = null | | ! oldbp . equals ( bp ) ) { <nl> + throw new IllegalStateException ( " Can ' t autogenerate a direct buffers on Structure read " ) ; <nl> + } <nl> + } <nl> + } <nl> else if ( nativeType . isArray ( ) ) { <nl> result = currentValue ; <nl> if ( result = = null ) { <nl> @ @ - 725 , 6 + 738 , 11 @ @ public abstract class Structure { <nl> else if ( Callback . class . isAssignableFrom ( nativeType ) ) { <nl> memory . setPointer ( offset , CallbackReference . getFunctionPointer ( ( Callback ) value ) ) ; <nl> } <nl> + else if ( nativeType = = Buffer . class ) { <nl> + Pointer p = value = = null ? null <nl> + : Native . getDirectBufferPointer ( ( Buffer ) value ) ; <nl> + memory . setPointer ( offset , p ) ; <nl> + } <nl> else if ( nativeType . isArray ( ) ) { <nl> return writeArrayValue ( offset , value , nativeType . getComponentType ( ) ) ; <nl> } <nl> @ @ - 1092 , 12 + 1110 , 6 @ @ public abstract class Structure { <nl> / / Don ' t process zero - length arrays <nl> throw new IllegalArgumentException ( " Arrays of length zero not allowed in structure : " + type ) ; <nl> } <nl> - / / May provide this in future ; problematic on read , since we can ' t <nl> - / / auto - create a java . nio . Buffer w / o knowing its size <nl> - if ( Buffer . class . isAssignableFrom ( type ) ) { <nl> - throw new IllegalArgumentException ( " the type \ " " + type . getName ( ) <nl> - + " \ " is not supported as a structure field : " ) ; <nl> - } <nl> if ( Structure . class . isAssignableFrom ( type ) <nl> & & ! Structure . ByReference . class . isAssignableFrom ( type ) ) { <nl> if ( value = = null ) <nl> diff - - git a / jnalib / test / com / sun / jna / StructureTest . java b / jnalib / test / com / sun / jna / StructureTest . java <nl> index c93e822 . . 863a0cb 100644 <nl> - - - a / jnalib / test / com / sun / jna / StructureTest . java <nl> + + + b / jnalib / test / com / sun / jna / StructureTest . java <nl> @ @ - 531 , 20 + 531 , 51 @ @ public class StructureTest extends TestCase { <nl> assertEquals ( " Wrong first element " , s . getPointer ( ) , s . array [ 0 ] ) ; <nl> } <nl> <nl> - public void testBufferField ( ) { <nl> - / / NOTE : may support write - only Buffer fields in the future <nl> - class BufferStructure extends Structure { <nl> - public Buffer buffer ; <nl> - public BufferStructure ( byte [ ] buf ) { <nl> - buffer = ByteBuffer . wrap ( buf ) ; <nl> - } <nl> + class BufferStructure extends Structure { <nl> + public Buffer buffer ; <nl> + } <nl> + public void testBufferFieldWriteNULL ( ) { <nl> + BufferStructure bs = new BufferStructure ( ) ; <nl> + bs . write ( ) ; <nl> + } <nl> + public void testBufferFieldWriteNonNULL ( ) { <nl> + BufferStructure bs = new BufferStructure ( ) ; <nl> + bs . buffer = ByteBuffer . allocateDirect ( 16 ) ; <nl> + bs . write ( ) ; <nl> + } <nl> + public void testBufferFieldReadUnchanged ( ) { <nl> + BufferStructure bs = new BufferStructure ( ) ; <nl> + bs . buffer = ByteBuffer . allocateDirect ( 16 ) ; <nl> + bs . write ( ) ; <nl> + bs . read ( ) ; <nl> + } <nl> + public void testBufferFieldReadChanged ( ) { <nl> + BufferStructure bs = new BufferStructure ( ) ; <nl> + if ( Pointer . SIZE = = 4 ) { <nl> + bs . getPointer ( ) . setInt ( 0 , 0x1 ) ; <nl> } <nl> - 	 try { <nl> - new BufferStructure ( new byte [ 1024 ] ) . size ( ) ; <nl> - fail ( " Buffer fields should not be allowed " ) ; <nl> - 	 } <nl> - 	 catch ( IllegalArgumentException e ) { <nl> - 	 } <nl> + else { <nl> + bs . getPointer ( ) . setLong ( 0 , 0x1 ) ; <nl> + } <nl> + try { <nl> + bs . read ( ) ; <nl> + fail ( " Structure read should fail if Buffer pointer was set " ) ; <nl> + } <nl> + catch ( IllegalStateException e ) { <nl> + } <nl> + bs . buffer = ByteBuffer . allocateDirect ( 16 ) ; <nl> + try { <nl> + bs . read ( ) ; <nl> + fail ( " Structure read should fail if Buffer pointer has changed " ) ; <nl> + } <nl> + catch ( IllegalStateException e ) { <nl> + } <nl> + } <nl> + public void testBufferFieldReadChangedToNULL ( ) { <nl> + BufferStructure bs = new BufferStructure ( ) ; <nl> + bs . buffer = ByteBuffer . allocateDirect ( 16 ) ; <nl> + bs . read ( ) ; <nl> + assertNull ( " Structure Buffer field should be set null " , bs . buffer ) ; <nl> } <nl> <nl> public void testVolatileStructureField ( ) {

TEST DIFF:
diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index 5035dfc . . da386bb 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 289 , 14 + 289 , 22 @ @ public abstract class Structure { 
 / / Clear any local cache 
 nativeStrings . clear ( ) ; 
 
 - / / Ensure our memory pointer is initialized , even if we can ' t 
 - / / yet figure out a proper size / layout 
 - this . memory = m . share ( offset ) ; 
 - if ( size = = CALCULATE _ SIZE ) { 
 - size = calculateSize ( false ) ; 
 + if ( this instanceof ByValue ) { 
 + / / ByValue always uses own memory 
 + byte [ ] buf = new byte [ size ( ) ] ; 
 + m . read ( 0 , buf , 0 , buf . length ) ; 
 + this . memory . write ( 0 , buf , 0 , buf . length ) ; 
 } 
 - if ( size ! = CALCULATE _ SIZE ) { 
 - this . memory = m . share ( offset , size ) ; 
 + else { 
 + / / Ensure our memory pointer is initialized , even if we can ' t 
 + / / yet figure out a proper size / layout 
 + this . memory = m . share ( offset ) ; 
 + if ( size = = CALCULATE _ SIZE ) { 
 + size = calculateSize ( false ) ; 
 + } 
 + if ( size ! = CALCULATE _ SIZE ) { 
 + this . memory = m . share ( offset , size ) ; 
 + } 
 } 
 this . array = null ; 
 this . readCalled = false ; 
 @ @ - 1581 , 7 + 1589 , 9 @ @ public abstract class Structure { 
 throw new IllegalArgumentException ( msg ) ; 
 } 
 Structure s = newInstance ( type ) ; 
 - s . useMemory ( init ) ; 
 + if ( init ! = PLACEHOLDER _ MEMORY ) { 
 + s . useMemory ( init ) ; 
 + } 
 return s ; 
 } 
 
 diff - - git a / test / com / sun / jna / ArgumentsMarshalTest . java b / test / com / sun / jna / ArgumentsMarshalTest . java 
 index b920ad9 . . a59d835 100644 
 - - - a / test / com / sun / jna / ArgumentsMarshalTest . java 
 + + + b / test / com / sun / jna / ArgumentsMarshalTest . java 
 @ @ - 130 , 16 + 130 , 6 @ @ public class ArgumentsMarshalTest extends TestCase { 
 } 
 } 
 void setCallbackInStruct ( CbStruct cbstruct ) ; 
 - 
 - / / Union ( by value ) 
 - class TestUnion extends Union implements Structure . ByValue { 
 - public String f1 ; 
 - public int f2 ; 
 - } 
 - interface UnionCallback extends Callback { 
 - TestUnion invoke ( TestUnion arg ) ; 
 - } 
 - TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; 
 } 
 
 TestLibrary lib ; 
 @ @ - 600 , 27 + 590 , 6 @ @ public class ArgumentsMarshalTest extends TestCase { 
 assertEquals ( " Auto read should be disabled " , EXPECTED , s . field ) ; 
 } 
 
 - public void testUnionByValueCallbackArgument ( ) throws Exception { 
 - TestLibrary . TestUnion arg = new TestLibrary . TestUnion ( ) ; 
 - arg . setType ( String . class ) ; 
 - final String VALUE = getName ( ) ; 
 - arg . f1 = VALUE ; 
 - final boolean [ ] called = { false } ; 
 - final String [ ] cbvalue = { null } ; 
 - TestLibrary . TestUnion result = lib . testUnionByValueCallbackArgument ( new TestLibrary . UnionCallback ( ) { 
 - public TestLibrary . TestUnion invoke ( TestLibrary . TestUnion v ) { 
 - called [ 0 ] = true ; 
 - v . setType ( String . class ) ; 
 - v . read ( ) ; 
 - cbvalue [ 0 ] = v . f1 ; 
 - return v ; 
 - } 
 - } , arg ) ; 
 - assertTrue ( " Callback not called " , called [ 0 ] ) ; 
 - assertEquals ( " Incorrect callback union argument " , VALUE , cbvalue [ 0 ] ) ; 
 - assertEquals ( " Union value not propagated " , VALUE , result . getTypedValue ( String . class ) ) ; 
 - } 
 - 
 public static void main ( java . lang . String [ ] argList ) { 
 junit . textui . TestRunner . run ( ArgumentsMarshalTest . class ) ; 
 } 
 diff - - git a / test / com / sun / jna / CallbacksTest . java b / test / com / sun / jna / CallbacksTest . java 
 index c127823 . . 612751b 100644 
 - - - a / test / com / sun / jna / CallbacksTest . java 
 + + + b / test / com / sun / jna / CallbacksTest . java 
 @ @ - 169 , 6 + 169 , 16 @ @ public class CallbacksTest extends TestCase { 
 } 
 } 
 void callCallbackInStruct ( CbStruct cbstruct ) ; 
 + 
 + / / Union ( by value ) 
 + class TestUnion extends Union implements Structure . ByValue { 
 + public String f1 ; 
 + public int f2 ; 
 + } 
 + interface UnionCallback extends Callback { 
 + TestUnion invoke ( TestUnion arg ) ; 
 + } 
 + TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; 
 } 
 
 TestLibrary lib ; 
 @ @ - 664 , 17 + 674 , 14 @ @ public class CallbacksTest extends TestCase { 
 } 
 
 public void testCallCallbackWithStructByValue ( ) { 
 + final boolean [ ] called = { false } ; 
 + final TestStructure . ByValue [ ] arg = { null } ; 
 final TestStructure . ByValue s = new TestStructure . ByValue ( ) ; 
 - final TestStructure innerResult = new TestStructure ( ) ; 
 TestStructure . TestCallback cb = new TestStructure . TestCallback ( ) { 
 public TestStructure . ByValue callback ( TestStructure . ByValue s ) { 
 / / Copy the argument value for later comparison 
 - Pointer old = innerResult . getPointer ( ) ; 
 - innerResult . useMemory ( s . getPointer ( ) ) ; 
 - innerResult . read ( ) ; 
 - innerResult . useMemory ( old ) ; 
 - innerResult . write ( ) ; 
 - return s ; 
 + called [ 0 ] = true ; 
 + return arg [ 0 ] = s ; 
 } 
 } ; 
 s . c = ( byte ) 0x11 ; 
 @ @ - 684 , 10 + 691 , 39 @ @ public class CallbacksTest extends TestCase { 
 s . inner . value = 5 ; 
 
 TestStructure result = lib . callCallbackWithStructByValue ( cb , s ) ; 
 - assertEquals ( " Wrong value passed to callback " , s , innerResult ) ; 
 - assertEquals ( " Wrong value for result " , s , result ) ; 
 + assertTrue ( " Callback not called " , called [ 0 ] ) ; 
 + assertTrue ( " ByValue argument should own its own memory , instead was " 
 + + arg [ 0 ] . getPointer ( ) , arg [ 0 ] . getPointer ( ) instanceof Memory ) ; 
 + assertTrue ( " ByValue result should own its own memory , instead was " 
 + + result . getPointer ( ) , result . getPointer ( ) instanceof Memory ) ; 
 + assertEquals ( " Wrong value for callback argument " , s , arg [ 0 ] ) ; 
 + assertEquals ( " Wrong value for callback result " , s , result ) ; 
 } 
 
 + public void testUnionByValueCallbackArgument ( ) throws Exception { 
 + TestLibrary . TestUnion arg = new TestLibrary . TestUnion ( ) ; 
 + arg . setType ( String . class ) ; 
 + final String VALUE = getName ( ) ; 
 + arg . f1 = VALUE ; 
 + final boolean [ ] called = { false } ; 
 + final TestLibrary . TestUnion [ ] cbvalue = { null } ; 
 + TestLibrary . TestUnion result = lib . testUnionByValueCallbackArgument ( new TestLibrary . UnionCallback ( ) { 
 + public TestLibrary . TestUnion invoke ( TestLibrary . TestUnion v ) { 
 + called [ 0 ] = true ; 
 + v . setType ( String . class ) ; 
 + v . read ( ) ; 
 + cbvalue [ 0 ] = v ; 
 + return v ; 
 + } 
 + } , arg ) ; 
 + assertTrue ( " Callback not called " , called [ 0 ] ) ; 
 + assertTrue ( " ByValue argument should have its own allocated memory , instead was " 
 + + cbvalue [ 0 ] . getPointer ( ) , 
 + cbvalue [ 0 ] . getPointer ( ) instanceof Memory ) ; 
 + assertEquals ( " Wrong value for callback argument " , VALUE , cbvalue [ 0 ] . f1 ) ; 
 + assertEquals ( " Wrong value for callback result " , VALUE , result . getTypedValue ( String . class ) ) ; 
 + } 
 + 
 public void testCallCallbackWithCallbackArgumentAndResult ( ) { 
 TestLibrary . CbCallback cb = new TestLibrary . CbCallback ( ) { 
 public CbCallback callback ( CbCallback arg ) { 
 diff - - git a / test / com / sun / jna / DirectArgumentsMarshalTest . java b / test / com / sun / jna / DirectArgumentsMarshalTest . java 
 index be9c564 . . f47fb2e 100644 
 - - - a / test / com / sun / jna / DirectArgumentsMarshalTest . java 
 + + + b / test / com / sun / jna / DirectArgumentsMarshalTest . java 
 @ @ - 79 , 7 + 79 , 6 @ @ public class DirectArgumentsMarshalTest extends ArgumentsMarshalTest { 
 public native Pointer testStructurePointerArgument ( MinTestStructure s ) ; 
 public native String returnStringFromVariableSizedStructure ( VariableSizedStructure s ) ; 
 public native void setCallbackInStruct ( CbStruct s ) ; 
 - public native TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; 
 
 static { 
 Native . register ( " testlib " ) ; 
 diff - - git a / test / com / sun / jna / DirectCallbacksTest . java b / test / com / sun / jna / DirectCallbacksTest . java 
 index 11347d2 . . e97a449 100644 
 - - - a / test / com / sun / jna / DirectCallbacksTest . java 
 + + + b / test / com / sun / jna / DirectCallbacksTest . java 
 @ @ - 46 , 6 + 46 , 7 @ @ public class DirectCallbacksTest extends CallbacksTest { 
 
 public native int callInt32Callback ( CustomCallback cb , int arg1 , int arg2 ) ; 
 public native void callCallbackInStruct ( CbStruct s ) ; 
 + public native TestUnion testUnionByValueCallbackArgument ( UnionCallback cb , TestUnion arg ) ; 
 
 static { 
 Native . register ( " testlib " ) ;

NEAREST DIFF:
diff - - git a / jnalib / release - notes . html b / jnalib / release - notes . html 
 index 130c5ae . . a64e6ec 100755 
 - - - a / jnalib / release - notes . html 
 + + + b / jnalib / release - notes . html 
 @ @ - 9 , 6 + 9 , 7 @ @ 
 < li > Allow implicit library access to current process on linux ( < a href = " https : / / jna . dev . java . net / issues / show _ bug . cgi ? id = 98 " > issue 98 < / a > ) . 
 < li > Open all shared libraries with RTLD _ GLOBAL , if applicable . This was the 
 default behavior on OSX and changes the default behavior on linux . 
 + < li > Allow NIO Buffer as Structure field ( with limitations ) ( < a href = " https : / / jna . dev . java . net / issues / show _ bug . cgi ? id = 57 " > Issue 57 < / a > ) 
 < / ul > 
 < b > Bug Fixes < / b > 
 < ul > 
 diff - - git a / jnalib / src / com / sun / jna / Structure . java b / jnalib / src / com / sun / jna / Structure . java 
 index 05edafe2 . . b038df0 100644 
 - - - a / jnalib / src / com / sun / jna / Structure . java 
 + + + b / jnalib / src / com / sun / jna / Structure . java 
 @ @ - 491 , 6 + 491 , 19 @ @ public abstract class Structure { 
 result = cb ; 
 } 
 } 
 + else if ( Buffer . class . isAssignableFrom ( nativeType ) ) { 
 + Pointer bp = memory . getPointer ( offset ) ; 
 + if ( bp = = null ) { 
 + result = null ; 
 + } 
 + else { 
 + Pointer oldbp = currentValue = = null ? null 
 + : Native . getDirectBufferPointer ( ( Buffer ) currentValue ) ; 
 + if ( oldbp = = null | | ! oldbp . equals ( bp ) ) { 
 + throw new IllegalStateException ( " Can ' t autogenerate a direct buffers on Structure read " ) ; 
 + } 
 + } 
 + } 
 else if ( nativeType . isArray ( ) ) { 
 result = currentValue ; 
 if ( result = = null ) { 
 @ @ - 725 , 6 + 738 , 11 @ @ public abstract class Structure { 
 else if ( Callback . class . isAssignableFrom ( nativeType ) ) { 
 memory . setPointer ( offset , CallbackReference . getFunctionPointer ( ( Callback ) value ) ) ; 
 } 
 + else if ( nativeType = = Buffer . class ) { 
 + Pointer p = value = = null ? null 
 + : Native . getDirectBufferPointer ( ( Buffer ) value ) ; 
 + memory . setPointer ( offset , p ) ; 
 + } 
 else if ( nativeType . isArray ( ) ) { 
 return writeArrayValue ( offset , value , nativeType . getComponentType ( ) ) ; 
 } 
 @ @ - 1092 , 12 + 1110 , 6 @ @ public abstract class Structure { 
 / / Don ' t process zero - length arrays 
 throw new IllegalArgumentException ( " Arrays of length zero not allowed in structure : " + type ) ; 
 } 
 - / / May provide this in future ; problematic on read , since we can ' t 
 - / / auto - create a java . nio . Buffer w / o knowing its size 
 - if ( Buffer . class . isAssignableFrom ( type ) ) { 
 - throw new IllegalArgumentException ( " the type \ " " + type . getName ( ) 
 - + " \ " is not supported as a structure field : " ) ; 
 - } 
 if ( Structure . class . isAssignableFrom ( type ) 
 & & ! Structure . ByReference . class . isAssignableFrom ( type ) ) { 
 if ( value = = null ) 
 diff - - git a / jnalib / test / com / sun / jna / StructureTest . java b / jnalib / test / com / sun / jna / StructureTest . java 
 index c93e822 . . 863a0cb 100644 
 - - - a / jnalib / test / com / sun / jna / StructureTest . java 
 + + + b / jnalib / test / com / sun / jna / StructureTest . java 
 @ @ - 531 , 20 + 531 , 51 @ @ public class StructureTest extends TestCase { 
 assertEquals ( " Wrong first element " , s . getPointer ( ) , s . array [ 0 ] ) ; 
 } 
 
 - public void testBufferField ( ) { 
 - / / NOTE : may support write - only Buffer fields in the future 
 - class BufferStructure extends Structure { 
 - public Buffer buffer ; 
 - public BufferStructure ( byte [ ] buf ) { 
 - buffer = ByteBuffer . wrap ( buf ) ; 
 - } 
 + class BufferStructure extends Structure { 
 + public Buffer buffer ; 
 + } 
 + public void testBufferFieldWriteNULL ( ) { 
 + BufferStructure bs = new BufferStructure ( ) ; 
 + bs . write ( ) ; 
 + } 
 + public void testBufferFieldWriteNonNULL ( ) { 
 + BufferStructure bs = new BufferStructure ( ) ; 
 + bs . buffer = ByteBuffer . allocateDirect ( 16 ) ; 
 + bs . write ( ) ; 
 + } 
 + public void testBufferFieldReadUnchanged ( ) { 
 + BufferStructure bs = new BufferStructure ( ) ; 
 + bs . buffer = ByteBuffer . allocateDirect ( 16 ) ; 
 + bs . write ( ) ; 
 + bs . read ( ) ; 
 + } 
 + public void testBufferFieldReadChanged ( ) { 
 + BufferStructure bs = new BufferStructure ( ) ; 
 + if ( Pointer . SIZE = = 4 ) { 
 + bs . getPointer ( ) . setInt ( 0 , 0x1 ) ; 
 } 
 - 	 try { 
 - new BufferStructure ( new byte [ 1024 ] ) . size ( ) ; 
 - fail ( " Buffer fields should not be allowed " ) ; 
 - 	 } 
 - 	 catch ( IllegalArgumentException e ) { 
 - 	 } 
 + else { 
 + bs . getPointer ( ) . setLong ( 0 , 0x1 ) ; 
 + } 
 + try { 
 + bs . read ( ) ; 
 + fail ( " Structure read should fail if Buffer pointer was set " ) ; 
 + } 
 + catch ( IllegalStateException e ) { 
 + } 
 + bs . buffer = ByteBuffer . allocateDirect ( 16 ) ; 
 + try { 
 + bs . read ( ) ; 
 + fail ( " Structure read should fail if Buffer pointer has changed " ) ; 
 + } 
 + catch ( IllegalStateException e ) { 
 + } 
 + } 
 + public void testBufferFieldReadChangedToNULL ( ) { 
 + BufferStructure bs = new BufferStructure ( ) ; 
 + bs . buffer = ByteBuffer . allocateDirect ( 16 ) ; 
 + bs . read ( ) ; 
 + assertNull ( " Structure Buffer field should be set null " , bs . buffer ) ; 
 } 
 
 public void testVolatileStructureField ( ) {
