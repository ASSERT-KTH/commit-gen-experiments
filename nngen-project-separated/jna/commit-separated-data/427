BLEU SCORE: 0.044568827606990644

TEST MSG: add explicit test for direct mapping use of supplied function mapper
GENERATED MSG: narrow direct callback test failure

TEST DIFF (one line): diff - - git a / test / com / sun / jna / DirectTest . java b / test / com / sun / jna / DirectTest . java <nl> index 36e578a . . d290a22 100644 <nl> - - - a / test / com / sun / jna / DirectTest . java <nl> + + + b / test / com / sun / jna / DirectTest . java <nl> @ @ - 16 , 10 + 16 , 15 @ @ import junit . framework . * ; <nl> import com . sun . jna . * ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> import java . lang . ref . * ; <nl> + import java . lang . reflect . Method ; <nl> import java . io . File ; <nl> import java . net . MalformedURLException ; <nl> import java . net . URL ; <nl> import java . net . URLClassLoader ; <nl> + import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> / / @ SuppressWarnings ( " unused " ) <nl> public class DirectTest extends TestCase implements Paths { <nl> @ @ - 173 , 5 + 178 , 117 @ @ public class DirectTest extends TestCase implements Paths { <nl> assertEquals ( " Wrong native class found " , <nl> UnregisterLibrary . class , new UnregisterLibrary ( ) . findDirectMappedClass ( ) ) ; <nl> } <nl> + <nl> + public static class DirectMapping { <nl> + public static class DirectStructure extends Structure { <nl> + public int field ; <nl> + protected List getFieldOrder ( ) { <nl> + return Arrays . asList ( new String [ ] { " field " } ) ; <nl> + } <nl> + } <nl> + public static interface DirectCallback extends Callback { <nl> + void invoke ( ) ; <nl> + } <nl> + public DirectMapping ( Map options ) { <nl> + Native . register ( getClass ( ) , NativeLibrary . getInstance ( " testlib " , options ) ) ; <nl> + } <nl> + } <nl> + <nl> + public void testGetOptionsForDirectMappingWithMemberInitializer ( ) { <nl> + Class [ ] classes = { <nl> + DirectMapping . class , <nl> + DirectMapping . DirectStructure . class , <nl> + DirectMapping . DirectCallback . class , <nl> + } ; <nl> + final TypeMapper mapper = new DefaultTypeMapper ( ) ; <nl> + final int alignment = Structure . ALIGN _ NONE ; <nl> + final String encoding = System . getProperty ( " file . encoding " ) ; <nl> + Map options = new HashMap ( ) ; <nl> + options . put ( Library . OPTION _ TYPE _ MAPPER , mapper ) ; <nl> + options . put ( Library . OPTION _ STRUCTURE _ ALIGNMENT , alignment ) ; <nl> + options . put ( Library . OPTION _ STRING _ ENCODING , encoding ) ; <nl> + DirectMapping lib = new DirectMapping ( options ) ; <nl> + for ( int i = 0 ; i < classes . length ; i + + ) { <nl> + assertEquals ( " Wrong type mapper for direct mapping " + classes [ i ] , <nl> + mapper , Native . getTypeMapper ( classes [ i ] ) ) ; <nl> + assertEquals ( " Wrong alignment for direct mapping " + classes [ i ] , <nl> + alignment , Native . getStructureAlignment ( classes [ i ] ) ) ; <nl> + assertEquals ( " Wrong encoding for direct mapping " + classes [ i ] , <nl> + encoding , Native . getStringEncoding ( classes [ i ] ) ) ; <nl> + Object last = Native . getLibraryOptions ( classes [ i ] ) ; ; <nl> + assertSame ( " Options not cached " , last , Native . getLibraryOptions ( classes [ i ] ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static class DirectMappingStatic { <nl> + final static TypeMapper TEST _ MAPPER = new DefaultTypeMapper ( ) ; <nl> + final static int TEST _ ALIGNMENT = Structure . ALIGN _ DEFAULT ; <nl> + final static String TEST _ ENCODING = System . getProperty ( " file . encoding " ) ; <nl> + final static Map TEST _ OPTIONS = new HashMap ( ) { <nl> + { <nl> + put ( Library . OPTION _ TYPE _ MAPPER , TEST _ MAPPER ) ; <nl> + put ( Library . OPTION _ STRUCTURE _ ALIGNMENT , TEST _ ALIGNMENT ) ; <nl> + put ( Library . OPTION _ STRING _ ENCODING , TEST _ ENCODING ) ; <nl> + } <nl> + } ; <nl> + static { <nl> + Native . register ( DirectMappingStatic . class , NativeLibrary . getInstance ( " testlib " , TEST _ OPTIONS ) ) ; <nl> + } <nl> + public static class DirectStructure extends Structure { <nl> + public int field ; <nl> + protected List getFieldOrder ( ) { <nl> + return Arrays . asList ( new String [ ] { " field " } ) ; <nl> + } <nl> + } <nl> + public static interface DirectCallback extends Callback { <nl> + void invoke ( ) ; <nl> + } <nl> + } <nl> + <nl> + public void testGetOptionsForDirectMappingWithStaticInitializer ( ) { <nl> + Class [ ] classes = { <nl> + DirectMappingStatic . class , <nl> + DirectMappingStatic . DirectStructure . class , <nl> + DirectMappingStatic . DirectCallback . class , <nl> + } ; <nl> + for ( int i = 0 ; i < classes . length ; i + + ) { <nl> + assertEquals ( " Wrong type mapper for direct mapping " + classes [ i ] , <nl> + DirectMappingStatic . TEST _ MAPPER , Native . getTypeMapper ( classes [ i ] ) ) ; <nl> + assertEquals ( " Wrong alignment for direct mapping " + classes [ i ] , <nl> + DirectMappingStatic . TEST _ ALIGNMENT , Native . getStructureAlignment ( classes [ i ] ) ) ; <nl> + assertEquals ( " Wrong encoding for direct mapping " + classes [ i ] , <nl> + DirectMappingStatic . TEST _ ENCODING , Native . getStringEncoding ( classes [ i ] ) ) ; <nl> + Object last = Native . getLibraryOptions ( classes [ i ] ) ; ; <nl> + assertSame ( " Options not cached " , last , Native . getLibraryOptions ( classes [ i ] ) ) ; <nl> + } <nl> + } <nl> + <nl> + static class RemappedCLibrary { <nl> + public static native int _ prefixed _ strlen ( String s ) ; <nl> + } <nl> + <nl> + public void testDirectMappingFunctionMapper ( ) { <nl> + FunctionMapper MAPPER = new FunctionMapper ( ) { <nl> + public String getFunctionName ( NativeLibrary lib , Method method ) { <nl> + String name = method . getName ( ) ; <nl> + if ( name . startsWith ( " _ prefixed _ " ) ) { <nl> + return name . substring ( 10 ) ; <nl> + } <nl> + return name ; <nl> + } <nl> + } ; <nl> + Map options = new HashMap ( ) ; <nl> + options . put ( Library . OPTION _ FUNCTION _ MAPPER , MAPPER ) ; <nl> + try { <nl> + Native . register ( RemappedCLibrary . class , <nl> + NativeLibrary . getInstance ( Platform . C _ LIBRARY _ NAME , options ) ) ; <nl> + final String VALUE = getName ( ) ; <nl> + int len = RemappedCLibrary . _ prefixed _ strlen ( VALUE ) ; <nl> + assertEquals ( VALUE . length ( ) , len ) ; <nl> + } <nl> + catch ( Exception e ) { <nl> + fail ( " Native method was not properly mapped : " + e ) ; <nl> + } <nl> + } <nl> } <nl> <nl> diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java <nl> index ce717e0 . . 521774d 100644 <nl> - - - a / test / com / sun / jna / NativeTest . java <nl> + + + b / test / com / sun / jna / NativeTest . java <nl> @ @ - 300 , 90 + 300 , 6 @ @ public class NativeTest extends TestCase { <nl> assertEquals ( " Wrong char array contents : " + new String ( buf ) , VALUE , new String ( buf , 0 , buf . length - 1 ) ) ; <nl> } <nl> <nl> - public static class DirectMapping { <nl> - public static class DirectStructure extends Structure { <nl> - public int field ; <nl> - protected List getFieldOrder ( ) { <nl> - return Arrays . asList ( new String [ ] { " field " } ) ; <nl> - } <nl> - } <nl> - public static interface DirectCallback extends Callback { <nl> - void invoke ( ) ; <nl> - } <nl> - public DirectMapping ( Map options ) { <nl> - Native . register ( getClass ( ) , NativeLibrary . getInstance ( " testlib " , options ) ) ; <nl> - } <nl> - } <nl> - <nl> - public void testGetOptionsForDirectMapping ( ) { <nl> - Class [ ] classes = { <nl> - DirectMapping . class , <nl> - DirectMapping . DirectStructure . class , <nl> - DirectMapping . DirectCallback . class , <nl> - } ; <nl> - final TypeMapper mapper = new DefaultTypeMapper ( ) ; <nl> - final int alignment = Structure . ALIGN _ NONE ; <nl> - final String encoding = System . getProperty ( " file . encoding " ) ; <nl> - Map options = new HashMap ( ) ; <nl> - options . put ( Library . OPTION _ TYPE _ MAPPER , mapper ) ; <nl> - options . put ( Library . OPTION _ STRUCTURE _ ALIGNMENT , alignment ) ; <nl> - options . put ( Library . OPTION _ STRING _ ENCODING , encoding ) ; <nl> - DirectMapping lib = new DirectMapping ( options ) ; <nl> - for ( int i = 0 ; i < classes . length ; i + + ) { <nl> - assertEquals ( " Wrong type mapper for direct mapping " + classes [ i ] , <nl> - mapper , Native . getTypeMapper ( classes [ i ] ) ) ; <nl> - assertEquals ( " Wrong alignment for direct mapping " + classes [ i ] , <nl> - alignment , Native . getStructureAlignment ( classes [ i ] ) ) ; <nl> - assertEquals ( " Wrong encoding for direct mapping " + classes [ i ] , <nl> - encoding , Native . getStringEncoding ( classes [ i ] ) ) ; <nl> - Object last = Native . getLibraryOptions ( classes [ i ] ) ; ; <nl> - assertSame ( " Options not cached " , last , Native . getLibraryOptions ( classes [ i ] ) ) ; <nl> - } <nl> - } <nl> - <nl> - public static class DirectMappingStatic { <nl> - final static TypeMapper TEST _ MAPPER = new DefaultTypeMapper ( ) ; <nl> - final static int TEST _ ALIGNMENT = Structure . ALIGN _ DEFAULT ; <nl> - final static String TEST _ ENCODING = System . getProperty ( " file . encoding " ) ; <nl> - final static Map TEST _ OPTIONS = new HashMap ( ) { <nl> - { <nl> - put ( Library . OPTION _ TYPE _ MAPPER , TEST _ MAPPER ) ; <nl> - put ( Library . OPTION _ STRUCTURE _ ALIGNMENT , TEST _ ALIGNMENT ) ; <nl> - put ( Library . OPTION _ STRING _ ENCODING , TEST _ ENCODING ) ; <nl> - } <nl> - } ; <nl> - static { <nl> - Native . register ( DirectMappingStatic . class , NativeLibrary . getInstance ( " testlib " , TEST _ OPTIONS ) ) ; <nl> - } <nl> - public static class DirectStructure extends Structure { <nl> - public int field ; <nl> - protected List getFieldOrder ( ) { <nl> - return Arrays . asList ( new String [ ] { " field " } ) ; <nl> - } <nl> - } <nl> - public static interface DirectCallback extends Callback { <nl> - void invoke ( ) ; <nl> - } <nl> - } <nl> - <nl> - public void testGetOptionsForDirectMappingStatic ( ) { <nl> - Class [ ] classes = { <nl> - DirectMappingStatic . class , <nl> - DirectMappingStatic . DirectStructure . class , <nl> - DirectMappingStatic . DirectCallback . class , <nl> - } ; <nl> - for ( int i = 0 ; i < classes . length ; i + + ) { <nl> - assertEquals ( " Wrong type mapper for direct mapping " + classes [ i ] , <nl> - DirectMappingStatic . TEST _ MAPPER , Native . getTypeMapper ( classes [ i ] ) ) ; <nl> - assertEquals ( " Wrong alignment for direct mapping " + classes [ i ] , <nl> - DirectMappingStatic . TEST _ ALIGNMENT , Native . getStructureAlignment ( classes [ i ] ) ) ; <nl> - assertEquals ( " Wrong encoding for direct mapping " + classes [ i ] , <nl> - DirectMappingStatic . TEST _ ENCODING , Native . getStringEncoding ( classes [ i ] ) ) ; <nl> - Object last = Native . getLibraryOptions ( classes [ i ] ) ; ; <nl> - assertSame ( " Options not cached " , last , Native . getLibraryOptions ( classes [ i ] ) ) ; <nl> - } <nl> - } <nl> - <nl> private static class TestCallback implements Callback { <nl> public static final TypeMapper TYPE _ MAPPER = new DefaultTypeMapper ( ) ; <nl> public void callback ( ) { }
NEAREST DIFF (one line): diff - - git a / jnalib / test / com / sun / jna / CallbacksTest . java b / jnalib / test / com / sun / jna / CallbacksTest . java <nl> index 428bd9e . . 12608df 100644 <nl> - - - a / jnalib / test / com / sun / jna / CallbacksTest . java <nl> + + + b / jnalib / test / com / sun / jna / CallbacksTest . java <nl> @ @ - 790 , 6 + 790 , 18 @ @ public class CallbacksTest extends TestCase { <nl> } <nl> } ; <nl> addTypeConverter ( double . class , converter ) ; <nl> + converter = new TypeConverter ( ) { <nl> + public Object fromNative ( Object value , FromNativeContext context ) { <nl> + return new Float ( ( ( Long ) value ) . intValue ( ) ) ; <nl> + } <nl> + public Class nativeType ( ) { <nl> + return Long . class ; <nl> + } <nl> + public Object toNative ( Object value , ToNativeContext ctx ) { <nl> + return new Long ( ( ( Float ) value ) . longValue ( ) ) ; <nl> + } <nl> + } ; <nl> + addTypeConverter ( float . class , converter ) ; <nl> } <nl> } ; <nl> final Map _ OPTIONS = new HashMap ( ) { <nl> @ @ - 797 , 10 + 809 , 14 @ @ public class CallbacksTest extends TestCase { <nl> put ( Library . OPTION _ TYPE _ MAPPER , _ MAPPER ) ; <nl> } <nl> } ; <nl> - interface Int32Callback extends Callback { <nl> + interface DoubleCallback extends Callback { <nl> double callback ( double arg , double arg2 ) ; <nl> } <nl> - double callInt32Callback ( Int32Callback c , double arg , double arg2 ) ; <nl> + double callInt32Callback ( DoubleCallback c , double arg , double arg2 ) ; <nl> + interface FloatCallback extends Callback { <nl> + float callback ( float arg , float arg2 ) ; <nl> + } <nl> + float callInt64Callback ( FloatCallback c , float arg , float arg2 ) ; <nl> } <nl> <nl> protected CallbackTestLibrary loadCallbackTestLibrary ( ) { <nl> @ @ - 818 , 7 + 834 , 7 @ @ public class CallbacksTest extends TestCase { <nl> <nl> final double [ ] ARGS = new double [ 2 ] ; <nl> <nl> - CallbackTestLibrary . Int32Callback cb = new CallbackTestLibrary . Int32Callback ( ) { <nl> + CallbackTestLibrary . DoubleCallback cb = new CallbackTestLibrary . DoubleCallback ( ) { <nl> public double callback ( double arg , double arg2 ) { <nl> ARGS [ 0 ] = arg ; <nl> ARGS [ 1 ] = arg2 ; <nl> @ @ - 826 , 7 + 842 , 7 @ @ public class CallbacksTest extends TestCase { <nl> } <nl> } ; <nl> assertEquals ( " Wrong type mapper for callback class " , lib . _ MAPPER , <nl> - Native . getTypeMapper ( CallbackTestLibrary . Int32Callback . class ) ) ; <nl> + Native . getTypeMapper ( CallbackTestLibrary . DoubleCallback . class ) ) ; <nl> assertEquals ( " Wrong type mapper for callback object " , lib . _ MAPPER , <nl> Native . getTypeMapper ( cb . getClass ( ) ) ) ; <nl> <nl> @ @ - 836 , 6 + 852 , 29 @ @ public class CallbacksTest extends TestCase { <nl> assertEquals ( " Incorrect result of callback invocation " , - 2 , result , 0 ) ; <nl> } <nl> <nl> + public void testCallbackUsesTypeMapperWithDifferentReturnTypeSize ( ) throws Exception { <nl> + CallbackTestLibrary lib = loadCallbackTestLibrary ( ) ; <nl> + <nl> + final float [ ] ARGS = new float [ 2 ] ; <nl> + <nl> + CallbackTestLibrary . FloatCallback cb = new CallbackTestLibrary . FloatCallback ( ) { <nl> + public float callback ( float arg , float arg2 ) { <nl> + ARGS [ 0 ] = arg ; <nl> + ARGS [ 1 ] = arg2 ; <nl> + return arg + arg2 ; <nl> + } <nl> + } ; <nl> + assertEquals ( " Wrong type mapper for callback class " , lib . _ MAPPER , <nl> + Native . getTypeMapper ( CallbackTestLibrary . FloatCallback . class ) ) ; <nl> + assertEquals ( " Wrong type mapper for callback object " , lib . _ MAPPER , <nl> + Native . getTypeMapper ( cb . getClass ( ) ) ) ; <nl> + <nl> + float result = lib . callInt64Callback ( cb , - 1 , - 1 ) ; <nl> + assertEquals ( " Wrong callback argument 1 " , - 1 , ARGS [ 0 ] , 0 ) ; <nl> + assertEquals ( " Wrong callback argument 2 " , - 1 , ARGS [ 1 ] , 0 ) ; <nl> + assertEquals ( " Incorrect result of callback invocation " , - 2 , result , 0 ) ; <nl> + } <nl> + <nl> public static void main ( java . lang . String [ ] argList ) { <nl> junit . textui . TestRunner . run ( CallbacksTest . class ) ; <nl> } <nl> diff - - git a / jnalib / test / com / sun / jna / RawCallbacksTest . java b / jnalib / test / com / sun / jna / RawCallbacksTest . java <nl> index 35c7c87 . . 1f8906b 100644 <nl> - - - a / jnalib / test / com / sun / jna / RawCallbacksTest . java <nl> + + + b / jnalib / test / com / sun / jna / RawCallbacksTest . java <nl> @ @ - 56 , 7 + 56 , 8 @ @ public class RawCallbacksTest extends CallbacksTest { <nl> } <nl> <nl> public static class DirectCallbackTestLibrary implements CallbackTestLibrary { <nl> - public native double callInt32Callback ( Int32Callback c , double arg , double arg2 ) ; <nl> + public native double callInt32Callback ( DoubleCallback c , double arg , double arg2 ) ; <nl> + public native float callInt64Callback ( FloatCallback c , float arg , float arg2 ) ; <nl> static { <nl> Native . register ( NativeLibrary . getInstance ( " testlib " , _ OPTIONS ) ) ; <nl> }

TEST DIFF:
diff - - git a / test / com / sun / jna / DirectTest . java b / test / com / sun / jna / DirectTest . java 
 index 36e578a . . d290a22 100644 
 - - - a / test / com / sun / jna / DirectTest . java 
 + + + b / test / com / sun / jna / DirectTest . java 
 @ @ - 16 , 10 + 16 , 15 @ @ import junit . framework . * ; 
 import com . sun . jna . * ; 
 import com . sun . jna . ptr . PointerByReference ; 
 import java . lang . ref . * ; 
 + import java . lang . reflect . Method ; 
 import java . io . File ; 
 import java . net . MalformedURLException ; 
 import java . net . URL ; 
 import java . net . URLClassLoader ; 
 + import java . util . Arrays ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 
 / / @ SuppressWarnings ( " unused " ) 
 public class DirectTest extends TestCase implements Paths { 
 @ @ - 173 , 5 + 178 , 117 @ @ public class DirectTest extends TestCase implements Paths { 
 assertEquals ( " Wrong native class found " , 
 UnregisterLibrary . class , new UnregisterLibrary ( ) . findDirectMappedClass ( ) ) ; 
 } 
 + 
 + public static class DirectMapping { 
 + public static class DirectStructure extends Structure { 
 + public int field ; 
 + protected List getFieldOrder ( ) { 
 + return Arrays . asList ( new String [ ] { " field " } ) ; 
 + } 
 + } 
 + public static interface DirectCallback extends Callback { 
 + void invoke ( ) ; 
 + } 
 + public DirectMapping ( Map options ) { 
 + Native . register ( getClass ( ) , NativeLibrary . getInstance ( " testlib " , options ) ) ; 
 + } 
 + } 
 + 
 + public void testGetOptionsForDirectMappingWithMemberInitializer ( ) { 
 + Class [ ] classes = { 
 + DirectMapping . class , 
 + DirectMapping . DirectStructure . class , 
 + DirectMapping . DirectCallback . class , 
 + } ; 
 + final TypeMapper mapper = new DefaultTypeMapper ( ) ; 
 + final int alignment = Structure . ALIGN _ NONE ; 
 + final String encoding = System . getProperty ( " file . encoding " ) ; 
 + Map options = new HashMap ( ) ; 
 + options . put ( Library . OPTION _ TYPE _ MAPPER , mapper ) ; 
 + options . put ( Library . OPTION _ STRUCTURE _ ALIGNMENT , alignment ) ; 
 + options . put ( Library . OPTION _ STRING _ ENCODING , encoding ) ; 
 + DirectMapping lib = new DirectMapping ( options ) ; 
 + for ( int i = 0 ; i < classes . length ; i + + ) { 
 + assertEquals ( " Wrong type mapper for direct mapping " + classes [ i ] , 
 + mapper , Native . getTypeMapper ( classes [ i ] ) ) ; 
 + assertEquals ( " Wrong alignment for direct mapping " + classes [ i ] , 
 + alignment , Native . getStructureAlignment ( classes [ i ] ) ) ; 
 + assertEquals ( " Wrong encoding for direct mapping " + classes [ i ] , 
 + encoding , Native . getStringEncoding ( classes [ i ] ) ) ; 
 + Object last = Native . getLibraryOptions ( classes [ i ] ) ; ; 
 + assertSame ( " Options not cached " , last , Native . getLibraryOptions ( classes [ i ] ) ) ; 
 + } 
 + } 
 + 
 + public static class DirectMappingStatic { 
 + final static TypeMapper TEST _ MAPPER = new DefaultTypeMapper ( ) ; 
 + final static int TEST _ ALIGNMENT = Structure . ALIGN _ DEFAULT ; 
 + final static String TEST _ ENCODING = System . getProperty ( " file . encoding " ) ; 
 + final static Map TEST _ OPTIONS = new HashMap ( ) { 
 + { 
 + put ( Library . OPTION _ TYPE _ MAPPER , TEST _ MAPPER ) ; 
 + put ( Library . OPTION _ STRUCTURE _ ALIGNMENT , TEST _ ALIGNMENT ) ; 
 + put ( Library . OPTION _ STRING _ ENCODING , TEST _ ENCODING ) ; 
 + } 
 + } ; 
 + static { 
 + Native . register ( DirectMappingStatic . class , NativeLibrary . getInstance ( " testlib " , TEST _ OPTIONS ) ) ; 
 + } 
 + public static class DirectStructure extends Structure { 
 + public int field ; 
 + protected List getFieldOrder ( ) { 
 + return Arrays . asList ( new String [ ] { " field " } ) ; 
 + } 
 + } 
 + public static interface DirectCallback extends Callback { 
 + void invoke ( ) ; 
 + } 
 + } 
 + 
 + public void testGetOptionsForDirectMappingWithStaticInitializer ( ) { 
 + Class [ ] classes = { 
 + DirectMappingStatic . class , 
 + DirectMappingStatic . DirectStructure . class , 
 + DirectMappingStatic . DirectCallback . class , 
 + } ; 
 + for ( int i = 0 ; i < classes . length ; i + + ) { 
 + assertEquals ( " Wrong type mapper for direct mapping " + classes [ i ] , 
 + DirectMappingStatic . TEST _ MAPPER , Native . getTypeMapper ( classes [ i ] ) ) ; 
 + assertEquals ( " Wrong alignment for direct mapping " + classes [ i ] , 
 + DirectMappingStatic . TEST _ ALIGNMENT , Native . getStructureAlignment ( classes [ i ] ) ) ; 
 + assertEquals ( " Wrong encoding for direct mapping " + classes [ i ] , 
 + DirectMappingStatic . TEST _ ENCODING , Native . getStringEncoding ( classes [ i ] ) ) ; 
 + Object last = Native . getLibraryOptions ( classes [ i ] ) ; ; 
 + assertSame ( " Options not cached " , last , Native . getLibraryOptions ( classes [ i ] ) ) ; 
 + } 
 + } 
 + 
 + static class RemappedCLibrary { 
 + public static native int _ prefixed _ strlen ( String s ) ; 
 + } 
 + 
 + public void testDirectMappingFunctionMapper ( ) { 
 + FunctionMapper MAPPER = new FunctionMapper ( ) { 
 + public String getFunctionName ( NativeLibrary lib , Method method ) { 
 + String name = method . getName ( ) ; 
 + if ( name . startsWith ( " _ prefixed _ " ) ) { 
 + return name . substring ( 10 ) ; 
 + } 
 + return name ; 
 + } 
 + } ; 
 + Map options = new HashMap ( ) ; 
 + options . put ( Library . OPTION _ FUNCTION _ MAPPER , MAPPER ) ; 
 + try { 
 + Native . register ( RemappedCLibrary . class , 
 + NativeLibrary . getInstance ( Platform . C _ LIBRARY _ NAME , options ) ) ; 
 + final String VALUE = getName ( ) ; 
 + int len = RemappedCLibrary . _ prefixed _ strlen ( VALUE ) ; 
 + assertEquals ( VALUE . length ( ) , len ) ; 
 + } 
 + catch ( Exception e ) { 
 + fail ( " Native method was not properly mapped : " + e ) ; 
 + } 
 + } 
 } 
 
 diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java 
 index ce717e0 . . 521774d 100644 
 - - - a / test / com / sun / jna / NativeTest . java 
 + + + b / test / com / sun / jna / NativeTest . java 
 @ @ - 300 , 90 + 300 , 6 @ @ public class NativeTest extends TestCase { 
 assertEquals ( " Wrong char array contents : " + new String ( buf ) , VALUE , new String ( buf , 0 , buf . length - 1 ) ) ; 
 } 
 
 - public static class DirectMapping { 
 - public static class DirectStructure extends Structure { 
 - public int field ; 
 - protected List getFieldOrder ( ) { 
 - return Arrays . asList ( new String [ ] { " field " } ) ; 
 - } 
 - } 
 - public static interface DirectCallback extends Callback { 
 - void invoke ( ) ; 
 - } 
 - public DirectMapping ( Map options ) { 
 - Native . register ( getClass ( ) , NativeLibrary . getInstance ( " testlib " , options ) ) ; 
 - } 
 - } 
 - 
 - public void testGetOptionsForDirectMapping ( ) { 
 - Class [ ] classes = { 
 - DirectMapping . class , 
 - DirectMapping . DirectStructure . class , 
 - DirectMapping . DirectCallback . class , 
 - } ; 
 - final TypeMapper mapper = new DefaultTypeMapper ( ) ; 
 - final int alignment = Structure . ALIGN _ NONE ; 
 - final String encoding = System . getProperty ( " file . encoding " ) ; 
 - Map options = new HashMap ( ) ; 
 - options . put ( Library . OPTION _ TYPE _ MAPPER , mapper ) ; 
 - options . put ( Library . OPTION _ STRUCTURE _ ALIGNMENT , alignment ) ; 
 - options . put ( Library . OPTION _ STRING _ ENCODING , encoding ) ; 
 - DirectMapping lib = new DirectMapping ( options ) ; 
 - for ( int i = 0 ; i < classes . length ; i + + ) { 
 - assertEquals ( " Wrong type mapper for direct mapping " + classes [ i ] , 
 - mapper , Native . getTypeMapper ( classes [ i ] ) ) ; 
 - assertEquals ( " Wrong alignment for direct mapping " + classes [ i ] , 
 - alignment , Native . getStructureAlignment ( classes [ i ] ) ) ; 
 - assertEquals ( " Wrong encoding for direct mapping " + classes [ i ] , 
 - encoding , Native . getStringEncoding ( classes [ i ] ) ) ; 
 - Object last = Native . getLibraryOptions ( classes [ i ] ) ; ; 
 - assertSame ( " Options not cached " , last , Native . getLibraryOptions ( classes [ i ] ) ) ; 
 - } 
 - } 
 - 
 - public static class DirectMappingStatic { 
 - final static TypeMapper TEST _ MAPPER = new DefaultTypeMapper ( ) ; 
 - final static int TEST _ ALIGNMENT = Structure . ALIGN _ DEFAULT ; 
 - final static String TEST _ ENCODING = System . getProperty ( " file . encoding " ) ; 
 - final static Map TEST _ OPTIONS = new HashMap ( ) { 
 - { 
 - put ( Library . OPTION _ TYPE _ MAPPER , TEST _ MAPPER ) ; 
 - put ( Library . OPTION _ STRUCTURE _ ALIGNMENT , TEST _ ALIGNMENT ) ; 
 - put ( Library . OPTION _ STRING _ ENCODING , TEST _ ENCODING ) ; 
 - } 
 - } ; 
 - static { 
 - Native . register ( DirectMappingStatic . class , NativeLibrary . getInstance ( " testlib " , TEST _ OPTIONS ) ) ; 
 - } 
 - public static class DirectStructure extends Structure { 
 - public int field ; 
 - protected List getFieldOrder ( ) { 
 - return Arrays . asList ( new String [ ] { " field " } ) ; 
 - } 
 - } 
 - public static interface DirectCallback extends Callback { 
 - void invoke ( ) ; 
 - } 
 - } 
 - 
 - public void testGetOptionsForDirectMappingStatic ( ) { 
 - Class [ ] classes = { 
 - DirectMappingStatic . class , 
 - DirectMappingStatic . DirectStructure . class , 
 - DirectMappingStatic . DirectCallback . class , 
 - } ; 
 - for ( int i = 0 ; i < classes . length ; i + + ) { 
 - assertEquals ( " Wrong type mapper for direct mapping " + classes [ i ] , 
 - DirectMappingStatic . TEST _ MAPPER , Native . getTypeMapper ( classes [ i ] ) ) ; 
 - assertEquals ( " Wrong alignment for direct mapping " + classes [ i ] , 
 - DirectMappingStatic . TEST _ ALIGNMENT , Native . getStructureAlignment ( classes [ i ] ) ) ; 
 - assertEquals ( " Wrong encoding for direct mapping " + classes [ i ] , 
 - DirectMappingStatic . TEST _ ENCODING , Native . getStringEncoding ( classes [ i ] ) ) ; 
 - Object last = Native . getLibraryOptions ( classes [ i ] ) ; ; 
 - assertSame ( " Options not cached " , last , Native . getLibraryOptions ( classes [ i ] ) ) ; 
 - } 
 - } 
 - 
 private static class TestCallback implements Callback { 
 public static final TypeMapper TYPE _ MAPPER = new DefaultTypeMapper ( ) ; 
 public void callback ( ) { }

NEAREST DIFF:
diff - - git a / jnalib / test / com / sun / jna / CallbacksTest . java b / jnalib / test / com / sun / jna / CallbacksTest . java 
 index 428bd9e . . 12608df 100644 
 - - - a / jnalib / test / com / sun / jna / CallbacksTest . java 
 + + + b / jnalib / test / com / sun / jna / CallbacksTest . java 
 @ @ - 790 , 6 + 790 , 18 @ @ public class CallbacksTest extends TestCase { 
 } 
 } ; 
 addTypeConverter ( double . class , converter ) ; 
 + converter = new TypeConverter ( ) { 
 + public Object fromNative ( Object value , FromNativeContext context ) { 
 + return new Float ( ( ( Long ) value ) . intValue ( ) ) ; 
 + } 
 + public Class nativeType ( ) { 
 + return Long . class ; 
 + } 
 + public Object toNative ( Object value , ToNativeContext ctx ) { 
 + return new Long ( ( ( Float ) value ) . longValue ( ) ) ; 
 + } 
 + } ; 
 + addTypeConverter ( float . class , converter ) ; 
 } 
 } ; 
 final Map _ OPTIONS = new HashMap ( ) { 
 @ @ - 797 , 10 + 809 , 14 @ @ public class CallbacksTest extends TestCase { 
 put ( Library . OPTION _ TYPE _ MAPPER , _ MAPPER ) ; 
 } 
 } ; 
 - interface Int32Callback extends Callback { 
 + interface DoubleCallback extends Callback { 
 double callback ( double arg , double arg2 ) ; 
 } 
 - double callInt32Callback ( Int32Callback c , double arg , double arg2 ) ; 
 + double callInt32Callback ( DoubleCallback c , double arg , double arg2 ) ; 
 + interface FloatCallback extends Callback { 
 + float callback ( float arg , float arg2 ) ; 
 + } 
 + float callInt64Callback ( FloatCallback c , float arg , float arg2 ) ; 
 } 
 
 protected CallbackTestLibrary loadCallbackTestLibrary ( ) { 
 @ @ - 818 , 7 + 834 , 7 @ @ public class CallbacksTest extends TestCase { 
 
 final double [ ] ARGS = new double [ 2 ] ; 
 
 - CallbackTestLibrary . Int32Callback cb = new CallbackTestLibrary . Int32Callback ( ) { 
 + CallbackTestLibrary . DoubleCallback cb = new CallbackTestLibrary . DoubleCallback ( ) { 
 public double callback ( double arg , double arg2 ) { 
 ARGS [ 0 ] = arg ; 
 ARGS [ 1 ] = arg2 ; 
 @ @ - 826 , 7 + 842 , 7 @ @ public class CallbacksTest extends TestCase { 
 } 
 } ; 
 assertEquals ( " Wrong type mapper for callback class " , lib . _ MAPPER , 
 - Native . getTypeMapper ( CallbackTestLibrary . Int32Callback . class ) ) ; 
 + Native . getTypeMapper ( CallbackTestLibrary . DoubleCallback . class ) ) ; 
 assertEquals ( " Wrong type mapper for callback object " , lib . _ MAPPER , 
 Native . getTypeMapper ( cb . getClass ( ) ) ) ; 
 
 @ @ - 836 , 6 + 852 , 29 @ @ public class CallbacksTest extends TestCase { 
 assertEquals ( " Incorrect result of callback invocation " , - 2 , result , 0 ) ; 
 } 
 
 + public void testCallbackUsesTypeMapperWithDifferentReturnTypeSize ( ) throws Exception { 
 + CallbackTestLibrary lib = loadCallbackTestLibrary ( ) ; 
 + 
 + final float [ ] ARGS = new float [ 2 ] ; 
 + 
 + CallbackTestLibrary . FloatCallback cb = new CallbackTestLibrary . FloatCallback ( ) { 
 + public float callback ( float arg , float arg2 ) { 
 + ARGS [ 0 ] = arg ; 
 + ARGS [ 1 ] = arg2 ; 
 + return arg + arg2 ; 
 + } 
 + } ; 
 + assertEquals ( " Wrong type mapper for callback class " , lib . _ MAPPER , 
 + Native . getTypeMapper ( CallbackTestLibrary . FloatCallback . class ) ) ; 
 + assertEquals ( " Wrong type mapper for callback object " , lib . _ MAPPER , 
 + Native . getTypeMapper ( cb . getClass ( ) ) ) ; 
 + 
 + float result = lib . callInt64Callback ( cb , - 1 , - 1 ) ; 
 + assertEquals ( " Wrong callback argument 1 " , - 1 , ARGS [ 0 ] , 0 ) ; 
 + assertEquals ( " Wrong callback argument 2 " , - 1 , ARGS [ 1 ] , 0 ) ; 
 + assertEquals ( " Incorrect result of callback invocation " , - 2 , result , 0 ) ; 
 + } 
 + 
 public static void main ( java . lang . String [ ] argList ) { 
 junit . textui . TestRunner . run ( CallbacksTest . class ) ; 
 } 
 diff - - git a / jnalib / test / com / sun / jna / RawCallbacksTest . java b / jnalib / test / com / sun / jna / RawCallbacksTest . java 
 index 35c7c87 . . 1f8906b 100644 
 - - - a / jnalib / test / com / sun / jna / RawCallbacksTest . java 
 + + + b / jnalib / test / com / sun / jna / RawCallbacksTest . java 
 @ @ - 56 , 7 + 56 , 8 @ @ public class RawCallbacksTest extends CallbacksTest { 
 } 
 
 public static class DirectCallbackTestLibrary implements CallbackTestLibrary { 
 - public native double callInt32Callback ( Int32Callback c , double arg , double arg2 ) ; 
 + public native double callInt32Callback ( DoubleCallback c , double arg , double arg2 ) ; 
 + public native float callInt64Callback ( FloatCallback c , float arg , float arg2 ) ; 
 static { 
 Native . register ( NativeLibrary . getInstance ( " testlib " , _ OPTIONS ) ) ; 
 }
