BLEU SCORE: 0.027611988917697356

TEST MSG: Avoid exception when getting zero - length xattrs
GENERATED MSG: added some test

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index c481730 . . fb14f67 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 14 , 6 + 14 , 7 @ @ Bug Fixes <nl> - - - - - - - - - <nl> * [ # 1036 ] ( https : / / github . com / java - native - access / jna / issues / 1036 ) : ` Advapi32Util . registryValueExists ` called on non existing key raises exception instead of returning ` false ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 384 ] ( https : / / github . com / java - native - access / jna / issues / 384 ) : Android only supports loading libraries through the JVM ` System # loadLibrary ` mechanism , defaulting ` jna . nosys ` to ` true ` disabled that code path - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 1041 ] ( https : / / github . com / java - native - access / jna / pull / 1041 ) : Avoid IllegalArgumentException when reading xattrs with zero length - [ @ jrobhoward ] ( https : / / github . com / jrobhoward ) . <nl> <nl> Release 5 . 1 . 0 <nl> = = = = = = = = = = = = = <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java b / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java <nl> index b9f7f75 . . 3176a49 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java <nl> @ @ - 255 , 6 + 255 , 10 @ @ public abstract class XAttrUtil { <nl> throw new IOException ( " errno : " + eno ) ; <nl> } <nl> <nl> + if ( retval . longValue ( ) = = 0 ) { <nl> + return null ; <nl> + } <nl> + <nl> valueMem = new Memory ( retval . longValue ( ) ) ; <nl> retval = XAttr . INSTANCE . getxattr ( path , name , valueMem , new size _ t ( valueMem . size ( ) ) ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> @ @ - 352 , 6 + 356 , 10 @ @ public abstract class XAttrUtil { <nl> throw new IOException ( " errno : " + eno ) ; <nl> } <nl> <nl> + if ( retval . longValue ( ) = = 0 ) { <nl> + return null ; <nl> + } <nl> + <nl> valueMem = new Memory ( retval . longValue ( ) ) ; <nl> retval = XAttr . INSTANCE . lgetxattr ( path , name , valueMem , new size _ t ( valueMem . size ( ) ) ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> @ @ - 445 , 6 + 453 , 10 @ @ public abstract class XAttrUtil { <nl> throw new IOException ( " errno : " + eno ) ; <nl> } <nl> <nl> + if ( retval . longValue ( ) = = 0 ) { <nl> + return null ; <nl> + } <nl> + <nl> valueMem = new Memory ( retval . longValue ( ) ) ; <nl> retval = XAttr . INSTANCE . fgetxattr ( fd , name , valueMem , new size _ t ( valueMem . size ( ) ) ) ; <nl> if ( retval . longValue ( ) < 0 ) { <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java b / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java <nl> index e6a0559 . . 150c3d9 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java <nl> @ @ - 58 , 6 + 58 , 9 @ @ public class XAttrUtil { <nl> 	 	 if ( bufferLength < 0 ) <nl> 	 	 	 return null ; <nl> <nl> + 	 	 if ( bufferLength = = 0 ) <nl> + 	 	 	 return " " ; <nl> + <nl> 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; <nl> 	 	 long valueLength = XAttr . INSTANCE . getxattr ( path , name , valueBuffer , bufferLength , 0 , 0 ) ; <nl> <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / linux / XAttrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / linux / XAttrUtilTest . java <nl> index c4a074b . . bd1f14f 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / linux / XAttrUtilTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / linux / XAttrUtilTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> * / <nl> package com . sun . jna . platform . linux ; <nl> <nl> + import com . sun . jna . Memory ; <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> import java . util . Collection ; <nl> @ @ - 33 , 12 + 34 , 16 @ @ import org . junit . Test ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertFalse ; <nl> import static org . junit . Assert . assertTrue ; <nl> + import static org . junit . Assert . assertNull ; <nl> + import static org . junit . Assert . assertNotNull ; <nl> <nl> public class XAttrUtilTest { <nl> private static final String TEST _ STRING = " Ž lu ť ou č k ý k ů ň ú p ě l nebo tak n ě co . " ; <nl> private static final String TEST _ STRING _ 2 = " P ř í li š ž lu ť ou č k ý k ů ň ú p ě l ď á belsk é ó dy . " ; <nl> + private static final String TEST _ EMPTY _ STRING = " " ; <nl> private static final String TEST _ ATTRIBUTE = " user . test " ; <nl> private static final String TEST _ ATTRIBUTE _ FOO = TEST _ ATTRIBUTE + " . foo " ; <nl> + private static final String TEST _ ATTRIBUTE _ EMPTY = TEST _ ATTRIBUTE + " . empty " ; <nl> <nl> @ Test <nl> public void setXAttr ( ) throws IOException { <nl> @ @ - 66 , 5 + 71 , 26 @ @ public class XAttrUtilTest { <nl> xattrs = XAttrUtil . lListXAttr ( file . getAbsolutePath ( ) ) ; <nl> assertFalse ( xattrs . contains ( TEST _ ATTRIBUTE ) ) ; <nl> assertTrue ( xattrs . contains ( TEST _ ATTRIBUTE _ FOO ) ) ; <nl> + <nl> + file . delete ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testGetXAttr ( ) throws IOException { <nl> + File file = File . createTempFile ( " xattr " , " test " ) ; <nl> + file . deleteOnExit ( ) ; <nl> + <nl> + XAttrUtil . setXAttr ( file . getAbsolutePath ( ) , TEST _ ATTRIBUTE _ EMPTY , TEST _ EMPTY _ STRING ) ; <nl> + <nl> + Memory memoryReadMissing = XAttrUtil . getXAttrAsMemory ( file . getAbsolutePath ( ) , TEST _ ATTRIBUTE _ EMPTY ) ; <nl> + byte [ ] byteReadMissing = XAttrUtil . getXAttrBytes ( file . getAbsolutePath ( ) , TEST _ ATTRIBUTE _ EMPTY ) ; <nl> + String stringReadMissing = XAttrUtil . getXAttr ( file . getAbsolutePath ( ) , TEST _ ATTRIBUTE _ EMPTY ) ; <nl> + assertNull ( memoryReadMissing ) ; <nl> + assertNotNull ( byteReadMissing ) ; <nl> + assertEquals ( 0 , byteReadMissing . length ) ; <nl> + assertNotNull ( stringReadMissing ) ; <nl> + assertTrue ( stringReadMissing . isEmpty ( ) ) ; <nl> + <nl> + file . delete ( ) ; <nl> } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java <nl> index 6abd401 . . 53abd3f 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java <nl> @ @ - 12 , 6 + 12 , 8 @ @ <nl> * / <nl> package com . sun . jna . platform . mac ; <nl> <nl> + import com . sun . jna . Memory ; <nl> + import com . sun . jna . Pointer ; <nl> import java . io . File ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 58 , 6 + 60 , 10 @ @ public class XAttrUtilTest extends TestCase { <nl> 	 	 value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; <nl> <nl> 	 	 assertEquals ( Arrays . toString ( " Java Native Access " . getBytes ( ) ) , Arrays . toString ( value . getBytes ( ) ) ) ; <nl> + <nl> + XAttr . INSTANCE . setxattr ( testPath , " JNA . empty " , Pointer . NULL , 0 , 0 , 0 ) ; <nl> + value = XAttrUtil . getXAttr ( testPath , " JNA . empty " ) ; <nl> + assertEquals ( " " , value ) ; <nl> 	 } <nl> <nl> 	 public void testSetXAttr ( ) {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index c481730 . . fb14f67 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 14 , 6 + 14 , 7 @ @ Bug Fixes 
 - - - - - - - - - 
 * [ # 1036 ] ( https : / / github . com / java - native - access / jna / issues / 1036 ) : ` Advapi32Util . registryValueExists ` called on non existing key raises exception instead of returning ` false ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 384 ] ( https : / / github . com / java - native - access / jna / issues / 384 ) : Android only supports loading libraries through the JVM ` System # loadLibrary ` mechanism , defaulting ` jna . nosys ` to ` true ` disabled that code path - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 1041 ] ( https : / / github . com / java - native - access / jna / pull / 1041 ) : Avoid IllegalArgumentException when reading xattrs with zero length - [ @ jrobhoward ] ( https : / / github . com / jrobhoward ) . 
 
 Release 5 . 1 . 0 
 = = = = = = = = = = = = = 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java b / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java 
 index b9f7f75 . . 3176a49 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / linux / XAttrUtil . java 
 @ @ - 255 , 6 + 255 , 10 @ @ public abstract class XAttrUtil { 
 throw new IOException ( " errno : " + eno ) ; 
 } 
 
 + if ( retval . longValue ( ) = = 0 ) { 
 + return null ; 
 + } 
 + 
 valueMem = new Memory ( retval . longValue ( ) ) ; 
 retval = XAttr . INSTANCE . getxattr ( path , name , valueMem , new size _ t ( valueMem . size ( ) ) ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 @ @ - 352 , 6 + 356 , 10 @ @ public abstract class XAttrUtil { 
 throw new IOException ( " errno : " + eno ) ; 
 } 
 
 + if ( retval . longValue ( ) = = 0 ) { 
 + return null ; 
 + } 
 + 
 valueMem = new Memory ( retval . longValue ( ) ) ; 
 retval = XAttr . INSTANCE . lgetxattr ( path , name , valueMem , new size _ t ( valueMem . size ( ) ) ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 @ @ - 445 , 6 + 453 , 10 @ @ public abstract class XAttrUtil { 
 throw new IOException ( " errno : " + eno ) ; 
 } 
 
 + if ( retval . longValue ( ) = = 0 ) { 
 + return null ; 
 + } 
 + 
 valueMem = new Memory ( retval . longValue ( ) ) ; 
 retval = XAttr . INSTANCE . fgetxattr ( fd , name , valueMem , new size _ t ( valueMem . size ( ) ) ) ; 
 if ( retval . longValue ( ) < 0 ) { 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java b / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java 
 index e6a0559 . . 150c3d9 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java 
 @ @ - 58 , 6 + 58 , 9 @ @ public class XAttrUtil { 
 	 	 if ( bufferLength < 0 ) 
 	 	 	 return null ; 
 
 + 	 	 if ( bufferLength = = 0 ) 
 + 	 	 	 return " " ; 
 + 
 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; 
 	 	 long valueLength = XAttr . INSTANCE . getxattr ( path , name , valueBuffer , bufferLength , 0 , 0 ) ; 
 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / linux / XAttrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / linux / XAttrUtilTest . java 
 index c4a074b . . bd1f14f 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / linux / XAttrUtilTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / linux / XAttrUtilTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 * / 
 package com . sun . jna . platform . linux ; 
 
 + import com . sun . jna . Memory ; 
 import java . io . File ; 
 import java . io . IOException ; 
 import java . util . Collection ; 
 @ @ - 33 , 12 + 34 , 16 @ @ import org . junit . Test ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertFalse ; 
 import static org . junit . Assert . assertTrue ; 
 + import static org . junit . Assert . assertNull ; 
 + import static org . junit . Assert . assertNotNull ; 
 
 public class XAttrUtilTest { 
 private static final String TEST _ STRING = " Ž lu ť ou č k ý k ů ň ú p ě l nebo tak n ě co . " ; 
 private static final String TEST _ STRING _ 2 = " P ř í li š ž lu ť ou č k ý k ů ň ú p ě l ď á belsk é ó dy . " ; 
 + private static final String TEST _ EMPTY _ STRING = " " ; 
 private static final String TEST _ ATTRIBUTE = " user . test " ; 
 private static final String TEST _ ATTRIBUTE _ FOO = TEST _ ATTRIBUTE + " . foo " ; 
 + private static final String TEST _ ATTRIBUTE _ EMPTY = TEST _ ATTRIBUTE + " . empty " ; 
 
 @ Test 
 public void setXAttr ( ) throws IOException { 
 @ @ - 66 , 5 + 71 , 26 @ @ public class XAttrUtilTest { 
 xattrs = XAttrUtil . lListXAttr ( file . getAbsolutePath ( ) ) ; 
 assertFalse ( xattrs . contains ( TEST _ ATTRIBUTE ) ) ; 
 assertTrue ( xattrs . contains ( TEST _ ATTRIBUTE _ FOO ) ) ; 
 + 
 + file . delete ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testGetXAttr ( ) throws IOException { 
 + File file = File . createTempFile ( " xattr " , " test " ) ; 
 + file . deleteOnExit ( ) ; 
 + 
 + XAttrUtil . setXAttr ( file . getAbsolutePath ( ) , TEST _ ATTRIBUTE _ EMPTY , TEST _ EMPTY _ STRING ) ; 
 + 
 + Memory memoryReadMissing = XAttrUtil . getXAttrAsMemory ( file . getAbsolutePath ( ) , TEST _ ATTRIBUTE _ EMPTY ) ; 
 + byte [ ] byteReadMissing = XAttrUtil . getXAttrBytes ( file . getAbsolutePath ( ) , TEST _ ATTRIBUTE _ EMPTY ) ; 
 + String stringReadMissing = XAttrUtil . getXAttr ( file . getAbsolutePath ( ) , TEST _ ATTRIBUTE _ EMPTY ) ; 
 + assertNull ( memoryReadMissing ) ; 
 + assertNotNull ( byteReadMissing ) ; 
 + assertEquals ( 0 , byteReadMissing . length ) ; 
 + assertNotNull ( stringReadMissing ) ; 
 + assertTrue ( stringReadMissing . isEmpty ( ) ) ; 
 + 
 + file . delete ( ) ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java 
 index 6abd401 . . 53abd3f 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java 
 @ @ - 12 , 6 + 12 , 8 @ @ 
 * / 
 package com . sun . jna . platform . mac ; 
 
 + import com . sun . jna . Memory ; 
 + import com . sun . jna . Pointer ; 
 import java . io . File ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 58 , 6 + 60 , 10 @ @ public class XAttrUtilTest extends TestCase { 
 	 	 value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; 
 
 	 	 assertEquals ( Arrays . toString ( " Java Native Access " . getBytes ( ) ) , Arrays . toString ( value . getBytes ( ) ) ) ; 
 + 
 + XAttr . INSTANCE . setxattr ( testPath , " JNA . empty " , Pointer . NULL , 0 , 0 , 0 ) ; 
 + value = XAttrUtil . getXAttr ( testPath , " JNA . empty " ) ; 
 + assertEquals ( " " , value ) ; 
 	 } 
 
 	 public void testSetXAttr ( ) {

NEAREST DIFF:
ELIMINATEDSENTENCE
