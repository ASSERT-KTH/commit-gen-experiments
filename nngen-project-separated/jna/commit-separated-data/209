BLEU SCORE: 0.018738883683389617

TEST MSG: added VersionUtil class and utility method for obtaining file version information
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 27e1037 . . bca64c6 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 26 , 6 + 26 , 7 @ @ Features <nl> * [ # 554 ] ( https : / / github . com / java - native - access / jna / pull / 554 ) : Initial code for a few Unix ' libc ' API ( s ) [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) <nl> * [ # 552 ] ( https : / / github . com / java - native - access / jna / pull / 552 ) : Added ` Module32FirstW ` and ` Module32NextW ` to ` com . sun . jna . platform . win32 . Kernel32 ` ( and helper to ` com . sun . jna . platform . win32 . Kernel32Util ` ) and ` MODULEENTRY32W ` structure to ` com . sun . jna . platform . win32 . Tlhelp32 ` - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . <nl> * [ # 564 ] ( https : / / github . com / java - native - access / jna / pull / 564 ) : Use generic definition of Native # loadLibrary [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) <nl> + * [ # 562 ] ( https : / / github . com / java - native - access / jna / pull / 562 ) : Added ` com . sun . jna . platform . win32 . VersionUtil ` with ` getFileVersionInfo ` utility method to get file major , minor , revision , and build version parts - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / VerRsrc . java b / contrib / platform / src / com / sun / jna / platform / win32 / VerRsrc . java <nl> index 2b69e97 . . 8431a9f 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / VerRsrc . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / VerRsrc . java <nl> @ @ - 116 , 6 + 116 , 38 @ @ public interface VerRsrc { <nl> * / <nl> public WinDef . DWORD dwFileDateLS ; <nl> <nl> + public int getFileVersionMajor ( ) { <nl> + return dwFileVersionMS . intValue ( ) > > > 16 ; <nl> + } <nl> + <nl> + public int getFileVersionMinor ( ) { <nl> + return dwFileVersionMS . intValue ( ) & 0xffff ; <nl> + } <nl> + <nl> + public int getFileVersionRevision ( ) { <nl> + return dwFileVersionLS . intValue ( ) > > > 16 ; <nl> + } <nl> + <nl> + public int getFileVersionBuild ( ) { <nl> + return dwFileVersionLS . intValue ( ) & 0xffff ; <nl> + } <nl> + <nl> + public int getProductVersionMajor ( ) { <nl> + return dwProductVersionMS . intValue ( ) > > > 16 ; <nl> + } <nl> + <nl> + public int getProductVersionMinor ( ) { <nl> + return dwProductVersionMS . intValue ( ) & 0xffff ; <nl> + } <nl> + <nl> + public int getProductVersionRevision ( ) { <nl> + return dwProductVersionLS . intValue ( ) > > > 16 ; <nl> + } <nl> + <nl> + public int getProductVersionBuild ( ) { <nl> + return dwProductVersionLS . intValue ( ) & 0xffff ; <nl> + } <nl> + <nl> protected List getFieldOrder ( ) { <nl> return Arrays . asList ( new String [ ] { " dwSignature " , " dwStrucVersion " , " dwFileVersionMS " , " dwFileVersionLS " , " dwProductVersionMS " , " dwProductVersionLS " , " dwFileFlagsMask " , " dwFileFlags " , " dwFileOS " , " dwFileType " , " dwFileSubtype " , " dwFileDateMS " , " dwFileDateLS " } ) ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / VersionUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / VersionUtil . java <nl> new file mode 100644 <nl> index 0000000 . . bdfa1f6 <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / VersionUtil . java <nl> @ @ - 0 , 0 + 1 , 77 @ @ <nl> + / * Copyright ( c ) 2015 Michael Freeman , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import com . sun . jna . Memory ; <nl> + import com . sun . jna . Native ; <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . platform . win32 . VerRsrc . VS _ FIXEDFILEINFO ; <nl> + import com . sun . jna . platform . win32 . Version ; <nl> + import com . sun . jna . platform . win32 . Win32Exception ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> + <nl> + / * * <nl> + * Reads Windows Version info from files ( the version details you can see by <nl> + * right - clicking and choosing properties ) <nl> + * <nl> + * @ author mlfreeman [ at ] gmail . com <nl> + * / <nl> + public class VersionUtil { <nl> + <nl> + / * * <nl> + * Gets the file ' s version number info <nl> + * <nl> + * @ param filePath <nl> + * The path to the file <nl> + * @ return The VS _ FIXEDFILEINFO structure read from the file . < br > <nl> + * Use the getFileVersionMajor ( ) , getFileVersionMinor ( ) , <nl> + * getFileVersionRevision ( ) , and getFileVersionBuild ( ) <nl> + * @ throws UnsupportedOperationException <nl> + * if VerQueryValue fails to get version info from the file . <nl> + * / <nl> + public static VS _ FIXEDFILEINFO getFileVersionInfo ( String filePath ) { <nl> + IntByReference dwDummy = new IntByReference ( ) ; <nl> + <nl> + int versionLength = Version . INSTANCE . GetFileVersionInfoSize ( filePath , dwDummy ) ; <nl> + <nl> + / / Reading version info failed . <nl> + / / throw a Win32Exception with GetLastError ( ) <nl> + if ( versionLength = = 0 ) { <nl> + throw new Win32Exception ( Native . getLastError ( ) ) ; <nl> + } <nl> + <nl> + / / buffer to hold version info <nl> + Pointer lpData = new Memory ( versionLength ) ; <nl> + <nl> + / / pointer to pointer to location in aforementioned buffer <nl> + PointerByReference lplpBuffer = new PointerByReference ( ) ; <nl> + <nl> + if ( ! Version . INSTANCE . GetFileVersionInfo ( filePath , 0 , versionLength , lpData ) ) { <nl> + throw new Win32Exception ( Native . getLastError ( ) ) ; <nl> + } <nl> + <nl> + / / here to make VerQueryValue happy . <nl> + IntByReference puLen = new IntByReference ( ) ; <nl> + <nl> + / / this does not set GetLastError , so no need to throw a Win32Exception <nl> + if ( ! Version . INSTANCE . VerQueryValue ( lpData , " \ \ " , lplpBuffer , puLen ) ) { <nl> + throw new UnsupportedOperationException ( " Unable to extract version info from the file : \ " " + filePath + " \ " " ) ; <nl> + } <nl> + <nl> + VS _ FIXEDFILEINFO fileInfo = new VS _ FIXEDFILEINFO ( lplpBuffer . getValue ( ) ) ; <nl> + fileInfo . read ( ) ; <nl> + return fileInfo ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / VersionUtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / VersionUtilTest . java <nl> new file mode 100644 <nl> index 0000000 . . eb8b397 <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / VersionUtilTest . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + / * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import java . io . File ; <nl> + <nl> + import com . sun . jna . platform . win32 . VerRsrc . VS _ FIXEDFILEINFO ; <nl> + <nl> + import junit . framework . TestCase ; <nl> + <nl> + public class VersionUtilTest extends TestCase { <nl> + <nl> + public static void main ( String [ ] args ) { <nl> + junit . textui . TestRunner . run ( VersionUtilTest . class ) ; <nl> + } <nl> + <nl> + public void testGetFileVersionNumbers ( ) { <nl> + String testFileName = " regedit . exe " ; <nl> + File file = new File ( System . getenv ( " SystemRoot " ) , testFileName ) ; <nl> + assertTrue ( " Test file with version info in it should exist . " , file . exists ( ) ) ; <nl> + <nl> + VS _ FIXEDFILEINFO version = VersionUtil . getFileVersionInfo ( file . getAbsolutePath ( ) ) ; <nl> + assertNotNull ( " Version info should have been returned . " , version ) ; <nl> + <nl> + assertTrue ( " The major file version number should be greater than 0 when pulling version from \ " " + testFileName + " \ " " , version . getFileVersionMajor ( ) > 0 ) ; <nl> + assertTrue ( " The minor file version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getFileVersionMinor ( ) > = 0 ) ; <nl> + assertTrue ( " The revision file version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getFileVersionRevision ( ) > = 0 ) ; <nl> + assertTrue ( " The build file version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getFileVersionBuild ( ) > 0 ) ; <nl> + <nl> + assertTrue ( " The major product version number should be greater than 0 when pulling version from \ " " + testFileName + " \ " " , version . getProductVersionMajor ( ) > 0 ) ; <nl> + assertTrue ( " The minor product version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getProductVersionMinor ( ) > = 0 ) ; <nl> + assertTrue ( " The revision product version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getProductVersionRevision ( ) > = 0 ) ; <nl> + assertTrue ( " The build product version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getProductVersionBuild ( ) > 0 ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 27e1037 . . bca64c6 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 26 , 6 + 26 , 7 @ @ Features 
 * [ # 554 ] ( https : / / github . com / java - native - access / jna / pull / 554 ) : Initial code for a few Unix ' libc ' API ( s ) [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) 
 * [ # 552 ] ( https : / / github . com / java - native - access / jna / pull / 552 ) : Added ` Module32FirstW ` and ` Module32NextW ` to ` com . sun . jna . platform . win32 . Kernel32 ` ( and helper to ` com . sun . jna . platform . win32 . Kernel32Util ` ) and ` MODULEENTRY32W ` structure to ` com . sun . jna . platform . win32 . Tlhelp32 ` - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . 
 * [ # 564 ] ( https : / / github . com / java - native - access / jna / pull / 564 ) : Use generic definition of Native # loadLibrary [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) 
 + * [ # 562 ] ( https : / / github . com / java - native - access / jna / pull / 562 ) : Added ` com . sun . jna . platform . win32 . VersionUtil ` with ` getFileVersionInfo ` utility method to get file major , minor , revision , and build version parts - [ @ mlfreeman2 ] ( https : / / github . com / mlfreeman2 ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / VerRsrc . java b / contrib / platform / src / com / sun / jna / platform / win32 / VerRsrc . java 
 index 2b69e97 . . 8431a9f 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / VerRsrc . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / VerRsrc . java 
 @ @ - 116 , 6 + 116 , 38 @ @ public interface VerRsrc { 
 * / 
 public WinDef . DWORD dwFileDateLS ; 
 
 + public int getFileVersionMajor ( ) { 
 + return dwFileVersionMS . intValue ( ) > > > 16 ; 
 + } 
 + 
 + public int getFileVersionMinor ( ) { 
 + return dwFileVersionMS . intValue ( ) & 0xffff ; 
 + } 
 + 
 + public int getFileVersionRevision ( ) { 
 + return dwFileVersionLS . intValue ( ) > > > 16 ; 
 + } 
 + 
 + public int getFileVersionBuild ( ) { 
 + return dwFileVersionLS . intValue ( ) & 0xffff ; 
 + } 
 + 
 + public int getProductVersionMajor ( ) { 
 + return dwProductVersionMS . intValue ( ) > > > 16 ; 
 + } 
 + 
 + public int getProductVersionMinor ( ) { 
 + return dwProductVersionMS . intValue ( ) & 0xffff ; 
 + } 
 + 
 + public int getProductVersionRevision ( ) { 
 + return dwProductVersionLS . intValue ( ) > > > 16 ; 
 + } 
 + 
 + public int getProductVersionBuild ( ) { 
 + return dwProductVersionLS . intValue ( ) & 0xffff ; 
 + } 
 + 
 protected List getFieldOrder ( ) { 
 return Arrays . asList ( new String [ ] { " dwSignature " , " dwStrucVersion " , " dwFileVersionMS " , " dwFileVersionLS " , " dwProductVersionMS " , " dwProductVersionLS " , " dwFileFlagsMask " , " dwFileFlags " , " dwFileOS " , " dwFileType " , " dwFileSubtype " , " dwFileDateMS " , " dwFileDateLS " } ) ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / VersionUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / VersionUtil . java 
 new file mode 100644 
 index 0000000 . . bdfa1f6 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / VersionUtil . java 
 @ @ - 0 , 0 + 1 , 77 @ @ 
 + / * Copyright ( c ) 2015 Michael Freeman , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import com . sun . jna . Memory ; 
 + import com . sun . jna . Native ; 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . platform . win32 . VerRsrc . VS _ FIXEDFILEINFO ; 
 + import com . sun . jna . platform . win32 . Version ; 
 + import com . sun . jna . platform . win32 . Win32Exception ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 + 
 + / * * 
 + * Reads Windows Version info from files ( the version details you can see by 
 + * right - clicking and choosing properties ) 
 + * 
 + * @ author mlfreeman [ at ] gmail . com 
 + * / 
 + public class VersionUtil { 
 + 
 + / * * 
 + * Gets the file ' s version number info 
 + * 
 + * @ param filePath 
 + * The path to the file 
 + * @ return The VS _ FIXEDFILEINFO structure read from the file . < br > 
 + * Use the getFileVersionMajor ( ) , getFileVersionMinor ( ) , 
 + * getFileVersionRevision ( ) , and getFileVersionBuild ( ) 
 + * @ throws UnsupportedOperationException 
 + * if VerQueryValue fails to get version info from the file . 
 + * / 
 + public static VS _ FIXEDFILEINFO getFileVersionInfo ( String filePath ) { 
 + IntByReference dwDummy = new IntByReference ( ) ; 
 + 
 + int versionLength = Version . INSTANCE . GetFileVersionInfoSize ( filePath , dwDummy ) ; 
 + 
 + / / Reading version info failed . 
 + / / throw a Win32Exception with GetLastError ( ) 
 + if ( versionLength = = 0 ) { 
 + throw new Win32Exception ( Native . getLastError ( ) ) ; 
 + } 
 + 
 + / / buffer to hold version info 
 + Pointer lpData = new Memory ( versionLength ) ; 
 + 
 + / / pointer to pointer to location in aforementioned buffer 
 + PointerByReference lplpBuffer = new PointerByReference ( ) ; 
 + 
 + if ( ! Version . INSTANCE . GetFileVersionInfo ( filePath , 0 , versionLength , lpData ) ) { 
 + throw new Win32Exception ( Native . getLastError ( ) ) ; 
 + } 
 + 
 + / / here to make VerQueryValue happy . 
 + IntByReference puLen = new IntByReference ( ) ; 
 + 
 + / / this does not set GetLastError , so no need to throw a Win32Exception 
 + if ( ! Version . INSTANCE . VerQueryValue ( lpData , " \ \ " , lplpBuffer , puLen ) ) { 
 + throw new UnsupportedOperationException ( " Unable to extract version info from the file : \ " " + filePath + " \ " " ) ; 
 + } 
 + 
 + VS _ FIXEDFILEINFO fileInfo = new VS _ FIXEDFILEINFO ( lplpBuffer . getValue ( ) ) ; 
 + fileInfo . read ( ) ; 
 + return fileInfo ; 
 + } 
 + 
 + } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / VersionUtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / VersionUtilTest . java 
 new file mode 100644 
 index 0000000 . . eb8b397 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / VersionUtilTest . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + / * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import java . io . File ; 
 + 
 + import com . sun . jna . platform . win32 . VerRsrc . VS _ FIXEDFILEINFO ; 
 + 
 + import junit . framework . TestCase ; 
 + 
 + public class VersionUtilTest extends TestCase { 
 + 
 + public static void main ( String [ ] args ) { 
 + junit . textui . TestRunner . run ( VersionUtilTest . class ) ; 
 + } 
 + 
 + public void testGetFileVersionNumbers ( ) { 
 + String testFileName = " regedit . exe " ; 
 + File file = new File ( System . getenv ( " SystemRoot " ) , testFileName ) ; 
 + assertTrue ( " Test file with version info in it should exist . " , file . exists ( ) ) ; 
 + 
 + VS _ FIXEDFILEINFO version = VersionUtil . getFileVersionInfo ( file . getAbsolutePath ( ) ) ; 
 + assertNotNull ( " Version info should have been returned . " , version ) ; 
 + 
 + assertTrue ( " The major file version number should be greater than 0 when pulling version from \ " " + testFileName + " \ " " , version . getFileVersionMajor ( ) > 0 ) ; 
 + assertTrue ( " The minor file version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getFileVersionMinor ( ) > = 0 ) ; 
 + assertTrue ( " The revision file version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getFileVersionRevision ( ) > = 0 ) ; 
 + assertTrue ( " The build file version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getFileVersionBuild ( ) > 0 ) ; 
 + 
 + assertTrue ( " The major product version number should be greater than 0 when pulling version from \ " " + testFileName + " \ " " , version . getProductVersionMajor ( ) > 0 ) ; 
 + assertTrue ( " The minor product version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getProductVersionMinor ( ) > = 0 ) ; 
 + assertTrue ( " The revision product version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getProductVersionRevision ( ) > = 0 ) ; 
 + assertTrue ( " The build product version number should be greater than or equal to 0 when pulling version from \ " " + testFileName + " \ " " , version . getProductVersionBuild ( ) > 0 ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
