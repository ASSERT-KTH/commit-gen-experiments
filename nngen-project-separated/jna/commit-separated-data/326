BLEU SCORE: 1.0

TEST MSG: patch missing code , remove apparent duplicate code , fix overall compilation
GENERATED MSG: patch missing code , remove apparent duplicate code , fix overall compilation

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 5a66fa2 . . 21aa85c 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 29 , 6 + 29 , 7 @ @ Bug Fixes <nl> * [ # 350 ] ( https : / / github . com / twall / jna / pull / 350 ) : Fix ` jnacontrib . x11 . api . X . Window . getXXXProperty ` , returns ` null ` if the window property is not found - [ @ rm5248 ] ( https : / / github . com / rm5248 ) . <nl> * Fixed ` com . sun . jna . platform . win32 . Variant ` and ` TlbImp ` - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . <nl> * Fixed ` com . sun . jna . Pointer . getWideStringArray ` not respecting the length parameter - [ @ csoren ] ( https : / / github . com / csoren ) . <nl> + * Fix missing code in X11 demos - [ @ twall ] ( https : / / github . com / twall ) . <nl> <nl> Release 4 . 1 <nl> = = = = = = = = = = = <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> index 1887cb7 . . 1df00c3 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ import java . util . List ; <nl> <nl> import com . sun . jna . Callback ; <nl> import com . sun . jna . FromNativeContext ; <nl> + import com . sun . jna . IntegerType ; <nl> import com . sun . jna . Library ; <nl> import com . sun . jna . Native ; <nl> import com . sun . jna . NativeLong ; <nl> @ @ - 33 , 16 + 34 , 16 @ @ import com . sun . jna . ptr . PointerByReference ; <nl> public interface X11 extends Library { <nl> <nl> class VisualID extends NativeLong { <nl> - 	 	 private static final long serialVersionUID = 1L ; <nl> - 	 	 public VisualID ( ) { } <nl> - public VisualID ( long value ) { super ( value ) ; } <nl> + private static final long serialVersionUID = 1L ; <nl> + public VisualID ( ) { this ( 0 ) ; } <nl> + public VisualID ( long value ) { super ( value , true ) ; } <nl> } <nl> <nl> class XID extends NativeLong { <nl> - 	 	 private static final long serialVersionUID = 1L ; <nl> - 	 	 public static final XID None = null ; <nl> + private static final long serialVersionUID = 1L ; <nl> + public static final XID None = null ; <nl> public XID ( ) { this ( 0 ) ; } <nl> - public XID ( long id ) { super ( id ) ; } <nl> + public XID ( long id ) { super ( id , true ) ; } <nl> protected boolean isNone ( Object o ) { <nl> return o = = null <nl> | | ( o instanceof Number <nl> @ @ - 58 , 7 + 59 , 7 @ @ public interface X11 extends Library { <nl> } <nl> } <nl> class Atom extends XID { <nl> - 	 	 private static final long serialVersionUID = 1L ; <nl> + private static final long serialVersionUID = 1L ; <nl> public static final Atom None = null ; <nl> public Atom ( ) { } <nl> public Atom ( long id ) { super ( id ) ; } <nl> @ @ - 145 , 7 + 146 , 7 @ @ public interface X11 extends Library { <nl> class AtomByReference extends ByReference { <nl> public AtomByReference ( ) { super ( XID . SIZE ) ; } <nl> public Atom getValue ( ) { <nl> - NativeLong value = getPointer ( ) . getNativeLong ( 0 ) ; <nl> + int value = getPointer ( ) . getInt ( 0 ) ; <nl> return ( Atom ) new Atom ( ) . fromNative ( value , null ) ; <nl> } <nl> } <nl> @ @ - 194 , 7 + 195 , 7 @ @ public interface X11 extends Library { <nl> } <nl> } <nl> class Drawable extends XID { <nl> - 	 	 private static final long serialVersionUID = 1L ; <nl> + private static final long serialVersionUID = 1L ; <nl> public static final Drawable None = null ; <nl> public Drawable ( ) { } <nl> public Drawable ( long id ) { super ( id ) ; } <nl> @ @ - 205 , 8 + 206 , 8 @ @ public interface X11 extends Library { <nl> } <nl> } <nl> class Window extends Drawable { <nl> - 	 	 private static final long serialVersionUID = 1L ; <nl> - 	 	 public static final Window None = null ; <nl> + private static final long serialVersionUID = 1L ; <nl> + public static final Window None = null ; <nl> public Window ( ) { } <nl> public Window ( long id ) { super ( id ) ; } <nl> public Object fromNative ( Object nativeValue , FromNativeContext context ) { <nl> @ @ - 218 , 14 + 219 , 13 @ @ public interface X11 extends Library { <nl> class WindowByReference extends ByReference { <nl> public WindowByReference ( ) { super ( XID . SIZE ) ; } <nl> public Window getValue ( ) { <nl> - NativeLong value = getPointer ( ) . getNativeLong ( 0 ) ; <nl> - return value . longValue ( ) = = X11 . None <nl> - ? Window . None : new Window ( value . longValue ( ) ) ; <nl> + int value = getPointer ( ) . getInt ( 0 ) ; <nl> + return value = = 0 ? Window . None : new Window ( value ) ; <nl> } <nl> } <nl> class Pixmap extends Drawable { <nl> - 	 	 private static final long serialVersionUID = 1L ; <nl> - 	 	 public static final Pixmap None = null ; <nl> + private static final long serialVersionUID = 1L ; <nl> + public static final Pixmap None = null ; <nl> public Pixmap ( ) { } <nl> public Pixmap ( long id ) { super ( id ) ; } <nl> public Object fromNative ( Object nativeValue , FromNativeContext context ) { <nl> @ @ - 238 , 13 + 238 , 13 @ @ public interface X11 extends Library { <nl> class Display extends PointerType { } <nl> / / TODO : define structure <nl> class Visual extends PointerType { <nl> - public NativeLong getVisualID ( ) { <nl> + public int getVisualID ( ) { <nl> if ( getPointer ( ) ! = null ) <nl> - return getPointer ( ) . getNativeLong ( Native . POINTER _ SIZE ) ; <nl> - return new NativeLong ( 0 ) ; <nl> + return getPointer ( ) . getInt ( Native . POINTER _ SIZE ) ; <nl> + return 0 ; <nl> } <nl> public String toString ( ) { <nl> - return " Visual : VisualID = 0x " + Long . toHexString ( getVisualID ( ) . longValue ( ) ) ; <nl> + return " Visual : VisualID = 0x " + Long . toHexString ( getVisualID ( ) ) ; <nl> } <nl> } <nl> / / TODO : define structure <nl> @ @ - 284 , 10 + 284 , 11 @ @ public interface X11 extends Library { <nl> return Arrays . asList ( new String [ ] { " red " , " redMask " , " green " , " greenMask " , " blue " , " blueMask " , " alpha " , " alphaMask " } ) ; <nl> } <nl> } <nl> - class PictFormat extends NativeLong { <nl> + class PictFormat extends IntegerType { <nl> private static final long serialVersionUID = 1L ; <nl> - public PictFormat ( long value ) { super ( value ) ; } <nl> - public PictFormat ( ) { } <nl> + public static final int SIZE = 4 ; <nl> + public PictFormat ( long value ) { super ( SIZE , value , true ) ; } <nl> + public PictFormat ( ) { this ( 0 ) ; } <nl> } <nl> class XRenderPictFormat extends Structure { <nl> public PictFormat id ; <nl> diff - - git a / contrib / x11 / src / jnacontrib / x11 / api / X . java b / contrib / x11 / src / jnacontrib / x11 / api / X . java <nl> index bce7519 . . f087963 100644 <nl> - - - a / contrib / x11 / src / jnacontrib / x11 / api / X . java <nl> + + + b / contrib / x11 / src / jnacontrib / x11 / api / X . java <nl> @ @ - 1122 , 14 + 1122 , 28 @ @ public class X { <nl> <nl> Window [ ] retVal = new Window [ childCount . getValue ( ) ] ; <nl> / / Depending on if we ' re running on 64 - bit or 32 - bit systems , <nl> - / / the long size may be different ; we need to make sure that <nl> + / / the Window ID size may be different ; we need to make sure that <nl> / / we get the data properly no matter what <nl> - if ( Native . LONG _ SIZE = = 4 ) { <nl> + if ( X11 . XID . SIZE = = 4 ) { <nl> int [ ] windows = children . getValue ( ) . getIntArray ( 0 , childCount . getValue ( ) ) ; <nl> for ( int x = 0 ; x < retVal . length ; x + + ) { <nl> X11 . Window win = new X11 . Window ( windows [ x ] ) ; <nl> retVal [ x ] = new Window ( display , win ) ; <nl> } <nl> + } <nl> + else { <nl> + long [ ] windows = children . getValue ( ) . getLongArray ( 0 , childCount . getValue ( ) ) ; <nl> + for ( int x = 0 ; x < retVal . length ; x + + ) { <nl> + X11 . Window win = new X11 . Window ( windows [ x ] ) ; <nl> + retVal [ x ] = new Window ( display , win ) ; <nl> + } <nl> + } <nl> + x11 . XFree ( children . getValue ( ) ) ; <nl> + <nl> + return retVal ; <nl> + } <nl> + <nl> + <nl> public String toString ( ) { <nl> return x11Window . toString ( ) ; <nl> } <nl> diff - - git a / contrib / x11 / src / jnacontrib / x11 / demos / XDesktopDemo . java b / contrib / x11 / src / jnacontrib / x11 / demos / XDesktopDemo . java <nl> index 0dc4bd8 . . 2660d67 100644 <nl> - - - a / contrib / x11 / src / jnacontrib / x11 / demos / XDesktopDemo . java <nl> + + + b / contrib / x11 / src / jnacontrib / x11 / demos / XDesktopDemo . java <nl> @ @ - 172 , 127 + 172 , 6 @ @ public class XDesktopDemo extends JFrame { <nl> <nl> try { <nl> final JDialog jd = new JDialog ( ) ; <nl> - <nl> - refreshDesktopsAndWindows ( ) ; <nl> - <nl> - pack ( ) ; <nl> - addListeners ( ) ; <nl> - setVisible ( true ) ; <nl> - <nl> - printWmInfo ( ) ; <nl> - } <nl> - <nl> - private void printWmInfo ( ) throws X . X11Exception { <nl> - X . Window wm = display . getWindowManagerInfo ( ) ; <nl> - System . out . println ( " wm . getTitle ( ) = " + wm . getTitle ( ) ) ; <nl> - System . out . println ( " wm . getWindowClass ( ) = " + wm . getWindowClass ( ) ) ; <nl> - System . out . println ( " wm . getPID ( ) = " + wm . getPID ( ) ) ; <nl> - } <nl> - <nl> - private void addListeners ( ) { <nl> - refreshButton . addActionListener ( new ActionListener ( ) { <nl> - public void actionPerformed ( ActionEvent event ) { <nl> - try { <nl> - refreshDesktopsAndWindows ( ) ; <nl> - } catch ( X . X11Exception e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - goToDesktopButton . addActionListener ( new ActionListener ( ) { <nl> - public void actionPerformed ( ActionEvent event ) { <nl> - int desktopNr = desktopList . getSelectedIndex ( ) ; <nl> - if ( desktopNr > = 0 ) { <nl> - try { <nl> - display . switchDesktop ( desktopNr ) ; <nl> - display . flush ( ) ; <nl> - } catch ( X . X11Exception e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - } <nl> - } <nl> - } ) ; <nl> - goToWindowButton . addActionListener ( new ActionListener ( ) { <nl> - public void actionPerformed ( ActionEvent event ) { <nl> - X . Window window = getSelectedWindow ( ) ; <nl> - try { <nl> - window . activate ( ) ; <nl> - display . flush ( ) ; <nl> - } catch ( X . X11Exception e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - showDesktop . addActionListener ( new ActionListener ( ) { <nl> - public void actionPerformed ( ActionEvent event ) { <nl> - try { <nl> - display . showingDesktop ( true ) ; <nl> - display . flush ( ) ; <nl> - } catch ( X . X11Exception e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - moveWindowToDesktopButton . addActionListener ( new ActionListener ( ) { <nl> - public void actionPerformed ( ActionEvent event ) { <nl> - X . Window window = getSelectedWindow ( ) ; <nl> - try { <nl> - window . moveToDesktop ( desktopList . getSelectedIndex ( ) ) ; <nl> - display . flush ( ) ; <nl> - } catch ( X . X11Exception e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - moveWindowAndGoToDesktopButton . addActionListener ( new ActionListener ( ) { <nl> - public void actionPerformed ( ActionEvent event ) { <nl> - X . Window window = getSelectedWindow ( ) ; <nl> - try { <nl> - window . moveToDesktop ( desktopList . getSelectedIndex ( ) ) ; <nl> - window . activate ( ) ; <nl> - display . flush ( ) ; <nl> - } catch ( X . X11Exception e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - closeWindowButton . addActionListener ( new ActionListener ( ) { <nl> - public void actionPerformed ( ActionEvent event ) { <nl> - X . Window window = getSelectedWindow ( ) ; <nl> - try { <nl> - window . close ( ) ; <nl> - display . flush ( ) ; <nl> - } catch ( X . X11Exception e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - } <nl> - } ) ; <nl> - showSubwindows . addActionListener ( new ActionListener ( ) { <nl> - <nl> - private void addWindowsToArea ( JTextArea area , int depth , X . Window win ) throws X11Exception { <nl> - X . Window [ ] subWindows = win . getSubwindows ( ) ; <nl> - String title = win . getTitle ( ) ; <nl> - if ( title ! = null ) { <nl> - area . append ( String . format ( " % " + depth + " s0x % 08X - % s " , " " , win . getID ( ) , title ) ) ; <nl> - } else { <nl> - area . append ( String . format ( " % " + depth + " s0x % 08X " , " " , win . getID ( ) ) ) ; <nl> - } <nl> - area . append ( System . getProperty ( " line . separator " ) ) ; <nl> - <nl> - if ( subWindows = = null ) { <nl> - return ; <nl> - } <nl> - for ( int x = 0 ; x < subWindows . length ; x + + ) { <nl> - addWindowsToArea ( area , depth + 4 , subWindows [ x ] ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void actionPerformed ( ActionEvent event ) { <nl> - X . Window window = getSelectedWindow ( ) ; <nl> - <nl> - try { <nl> - final JDialog jd = new JDialog ( ) ; <nl> JPanel dialogPanel = new JPanel ( new BorderLayout ( ) ) ; <nl> jd . setSize ( 320 , 240 ) ; <nl> jd . setTitle ( " Subwindows " ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 5a66fa2 . . 21aa85c 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 29 , 6 + 29 , 7 @ @ Bug Fixes 
 * [ # 350 ] ( https : / / github . com / twall / jna / pull / 350 ) : Fix ` jnacontrib . x11 . api . X . Window . getXXXProperty ` , returns ` null ` if the window property is not found - [ @ rm5248 ] ( https : / / github . com / rm5248 ) . 
 * Fixed ` com . sun . jna . platform . win32 . Variant ` and ` TlbImp ` - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . 
 * Fixed ` com . sun . jna . Pointer . getWideStringArray ` not respecting the length parameter - [ @ csoren ] ( https : / / github . com / csoren ) . 
 + * Fix missing code in X11 demos - [ @ twall ] ( https : / / github . com / twall ) . 
 
 Release 4 . 1 
 = = = = = = = = = = = 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 index 1887cb7 . . 1df00c3 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import java . util . List ; 
 
 import com . sun . jna . Callback ; 
 import com . sun . jna . FromNativeContext ; 
 + import com . sun . jna . IntegerType ; 
 import com . sun . jna . Library ; 
 import com . sun . jna . Native ; 
 import com . sun . jna . NativeLong ; 
 @ @ - 33 , 16 + 34 , 16 @ @ import com . sun . jna . ptr . PointerByReference ; 
 public interface X11 extends Library { 
 
 class VisualID extends NativeLong { 
 - 	 	 private static final long serialVersionUID = 1L ; 
 - 	 	 public VisualID ( ) { } 
 - public VisualID ( long value ) { super ( value ) ; } 
 + private static final long serialVersionUID = 1L ; 
 + public VisualID ( ) { this ( 0 ) ; } 
 + public VisualID ( long value ) { super ( value , true ) ; } 
 } 
 
 class XID extends NativeLong { 
 - 	 	 private static final long serialVersionUID = 1L ; 
 - 	 	 public static final XID None = null ; 
 + private static final long serialVersionUID = 1L ; 
 + public static final XID None = null ; 
 public XID ( ) { this ( 0 ) ; } 
 - public XID ( long id ) { super ( id ) ; } 
 + public XID ( long id ) { super ( id , true ) ; } 
 protected boolean isNone ( Object o ) { 
 return o = = null 
 | | ( o instanceof Number 
 @ @ - 58 , 7 + 59 , 7 @ @ public interface X11 extends Library { 
 } 
 } 
 class Atom extends XID { 
 - 	 	 private static final long serialVersionUID = 1L ; 
 + private static final long serialVersionUID = 1L ; 
 public static final Atom None = null ; 
 public Atom ( ) { } 
 public Atom ( long id ) { super ( id ) ; } 
 @ @ - 145 , 7 + 146 , 7 @ @ public interface X11 extends Library { 
 class AtomByReference extends ByReference { 
 public AtomByReference ( ) { super ( XID . SIZE ) ; } 
 public Atom getValue ( ) { 
 - NativeLong value = getPointer ( ) . getNativeLong ( 0 ) ; 
 + int value = getPointer ( ) . getInt ( 0 ) ; 
 return ( Atom ) new Atom ( ) . fromNative ( value , null ) ; 
 } 
 } 
 @ @ - 194 , 7 + 195 , 7 @ @ public interface X11 extends Library { 
 } 
 } 
 class Drawable extends XID { 
 - 	 	 private static final long serialVersionUID = 1L ; 
 + private static final long serialVersionUID = 1L ; 
 public static final Drawable None = null ; 
 public Drawable ( ) { } 
 public Drawable ( long id ) { super ( id ) ; } 
 @ @ - 205 , 8 + 206 , 8 @ @ public interface X11 extends Library { 
 } 
 } 
 class Window extends Drawable { 
 - 	 	 private static final long serialVersionUID = 1L ; 
 - 	 	 public static final Window None = null ; 
 + private static final long serialVersionUID = 1L ; 
 + public static final Window None = null ; 
 public Window ( ) { } 
 public Window ( long id ) { super ( id ) ; } 
 public Object fromNative ( Object nativeValue , FromNativeContext context ) { 
 @ @ - 218 , 14 + 219 , 13 @ @ public interface X11 extends Library { 
 class WindowByReference extends ByReference { 
 public WindowByReference ( ) { super ( XID . SIZE ) ; } 
 public Window getValue ( ) { 
 - NativeLong value = getPointer ( ) . getNativeLong ( 0 ) ; 
 - return value . longValue ( ) = = X11 . None 
 - ? Window . None : new Window ( value . longValue ( ) ) ; 
 + int value = getPointer ( ) . getInt ( 0 ) ; 
 + return value = = 0 ? Window . None : new Window ( value ) ; 
 } 
 } 
 class Pixmap extends Drawable { 
 - 	 	 private static final long serialVersionUID = 1L ; 
 - 	 	 public static final Pixmap None = null ; 
 + private static final long serialVersionUID = 1L ; 
 + public static final Pixmap None = null ; 
 public Pixmap ( ) { } 
 public Pixmap ( long id ) { super ( id ) ; } 
 public Object fromNative ( Object nativeValue , FromNativeContext context ) { 
 @ @ - 238 , 13 + 238 , 13 @ @ public interface X11 extends Library { 
 class Display extends PointerType { } 
 / / TODO : define structure 
 class Visual extends PointerType { 
 - public NativeLong getVisualID ( ) { 
 + public int getVisualID ( ) { 
 if ( getPointer ( ) ! = null ) 
 - return getPointer ( ) . getNativeLong ( Native . POINTER _ SIZE ) ; 
 - return new NativeLong ( 0 ) ; 
 + return getPointer ( ) . getInt ( Native . POINTER _ SIZE ) ; 
 + return 0 ; 
 } 
 public String toString ( ) { 
 - return " Visual : VisualID = 0x " + Long . toHexString ( getVisualID ( ) . longValue ( ) ) ; 
 + return " Visual : VisualID = 0x " + Long . toHexString ( getVisualID ( ) ) ; 
 } 
 } 
 / / TODO : define structure 
 @ @ - 284 , 10 + 284 , 11 @ @ public interface X11 extends Library { 
 return Arrays . asList ( new String [ ] { " red " , " redMask " , " green " , " greenMask " , " blue " , " blueMask " , " alpha " , " alphaMask " } ) ; 
 } 
 } 
 - class PictFormat extends NativeLong { 
 + class PictFormat extends IntegerType { 
 private static final long serialVersionUID = 1L ; 
 - public PictFormat ( long value ) { super ( value ) ; } 
 - public PictFormat ( ) { } 
 + public static final int SIZE = 4 ; 
 + public PictFormat ( long value ) { super ( SIZE , value , true ) ; } 
 + public PictFormat ( ) { this ( 0 ) ; } 
 } 
 class XRenderPictFormat extends Structure { 
 public PictFormat id ; 
 diff - - git a / contrib / x11 / src / jnacontrib / x11 / api / X . java b / contrib / x11 / src / jnacontrib / x11 / api / X . java 
 index bce7519 . . f087963 100644 
 - - - a / contrib / x11 / src / jnacontrib / x11 / api / X . java 
 + + + b / contrib / x11 / src / jnacontrib / x11 / api / X . java 
 @ @ - 1122 , 14 + 1122 , 28 @ @ public class X { 
 
 Window [ ] retVal = new Window [ childCount . getValue ( ) ] ; 
 / / Depending on if we ' re running on 64 - bit or 32 - bit systems , 
 - / / the long size may be different ; we need to make sure that 
 + / / the Window ID size may be different ; we need to make sure that 
 / / we get the data properly no matter what 
 - if ( Native . LONG _ SIZE = = 4 ) { 
 + if ( X11 . XID . SIZE = = 4 ) { 
 int [ ] windows = children . getValue ( ) . getIntArray ( 0 , childCount . getValue ( ) ) ; 
 for ( int x = 0 ; x < retVal . length ; x + + ) { 
 X11 . Window win = new X11 . Window ( windows [ x ] ) ; 
 retVal [ x ] = new Window ( display , win ) ; 
 } 
 + } 
 + else { 
 + long [ ] windows = children . getValue ( ) . getLongArray ( 0 , childCount . getValue ( ) ) ; 
 + for ( int x = 0 ; x < retVal . length ; x + + ) { 
 + X11 . Window win = new X11 . Window ( windows [ x ] ) ; 
 + retVal [ x ] = new Window ( display , win ) ; 
 + } 
 + } 
 + x11 . XFree ( children . getValue ( ) ) ; 
 + 
 + return retVal ; 
 + } 
 + 
 + 
 public String toString ( ) { 
 return x11Window . toString ( ) ; 
 } 
 diff - - git a / contrib / x11 / src / jnacontrib / x11 / demos / XDesktopDemo . java b / contrib / x11 / src / jnacontrib / x11 / demos / XDesktopDemo . java 
 index 0dc4bd8 . . 2660d67 100644 
 - - - a / contrib / x11 / src / jnacontrib / x11 / demos / XDesktopDemo . java 
 + + + b / contrib / x11 / src / jnacontrib / x11 / demos / XDesktopDemo . java 
 @ @ - 172 , 127 + 172 , 6 @ @ public class XDesktopDemo extends JFrame { 
 
 try { 
 final JDialog jd = new JDialog ( ) ; 
 - 
 - refreshDesktopsAndWindows ( ) ; 
 - 
 - pack ( ) ; 
 - addListeners ( ) ; 
 - setVisible ( true ) ; 
 - 
 - printWmInfo ( ) ; 
 - } 
 - 
 - private void printWmInfo ( ) throws X . X11Exception { 
 - X . Window wm = display . getWindowManagerInfo ( ) ; 
 - System . out . println ( " wm . getTitle ( ) = " + wm . getTitle ( ) ) ; 
 - System . out . println ( " wm . getWindowClass ( ) = " + wm . getWindowClass ( ) ) ; 
 - System . out . println ( " wm . getPID ( ) = " + wm . getPID ( ) ) ; 
 - } 
 - 
 - private void addListeners ( ) { 
 - refreshButton . addActionListener ( new ActionListener ( ) { 
 - public void actionPerformed ( ActionEvent event ) { 
 - try { 
 - refreshDesktopsAndWindows ( ) ; 
 - } catch ( X . X11Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } ) ; 
 - goToDesktopButton . addActionListener ( new ActionListener ( ) { 
 - public void actionPerformed ( ActionEvent event ) { 
 - int desktopNr = desktopList . getSelectedIndex ( ) ; 
 - if ( desktopNr > = 0 ) { 
 - try { 
 - display . switchDesktop ( desktopNr ) ; 
 - display . flush ( ) ; 
 - } catch ( X . X11Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } 
 - } ) ; 
 - goToWindowButton . addActionListener ( new ActionListener ( ) { 
 - public void actionPerformed ( ActionEvent event ) { 
 - X . Window window = getSelectedWindow ( ) ; 
 - try { 
 - window . activate ( ) ; 
 - display . flush ( ) ; 
 - } catch ( X . X11Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } ) ; 
 - showDesktop . addActionListener ( new ActionListener ( ) { 
 - public void actionPerformed ( ActionEvent event ) { 
 - try { 
 - display . showingDesktop ( true ) ; 
 - display . flush ( ) ; 
 - } catch ( X . X11Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } ) ; 
 - moveWindowToDesktopButton . addActionListener ( new ActionListener ( ) { 
 - public void actionPerformed ( ActionEvent event ) { 
 - X . Window window = getSelectedWindow ( ) ; 
 - try { 
 - window . moveToDesktop ( desktopList . getSelectedIndex ( ) ) ; 
 - display . flush ( ) ; 
 - } catch ( X . X11Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } ) ; 
 - moveWindowAndGoToDesktopButton . addActionListener ( new ActionListener ( ) { 
 - public void actionPerformed ( ActionEvent event ) { 
 - X . Window window = getSelectedWindow ( ) ; 
 - try { 
 - window . moveToDesktop ( desktopList . getSelectedIndex ( ) ) ; 
 - window . activate ( ) ; 
 - display . flush ( ) ; 
 - } catch ( X . X11Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } ) ; 
 - closeWindowButton . addActionListener ( new ActionListener ( ) { 
 - public void actionPerformed ( ActionEvent event ) { 
 - X . Window window = getSelectedWindow ( ) ; 
 - try { 
 - window . close ( ) ; 
 - display . flush ( ) ; 
 - } catch ( X . X11Exception e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - } 
 - } ) ; 
 - showSubwindows . addActionListener ( new ActionListener ( ) { 
 - 
 - private void addWindowsToArea ( JTextArea area , int depth , X . Window win ) throws X11Exception { 
 - X . Window [ ] subWindows = win . getSubwindows ( ) ; 
 - String title = win . getTitle ( ) ; 
 - if ( title ! = null ) { 
 - area . append ( String . format ( " % " + depth + " s0x % 08X - % s " , " " , win . getID ( ) , title ) ) ; 
 - } else { 
 - area . append ( String . format ( " % " + depth + " s0x % 08X " , " " , win . getID ( ) ) ) ; 
 - } 
 - area . append ( System . getProperty ( " line . separator " ) ) ; 
 - 
 - if ( subWindows = = null ) { 
 - return ; 
 - } 
 - for ( int x = 0 ; x < subWindows . length ; x + + ) { 
 - addWindowsToArea ( area , depth + 4 , subWindows [ x ] ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void actionPerformed ( ActionEvent event ) { 
 - X . Window window = getSelectedWindow ( ) ; 
 - 
 - try { 
 - final JDialog jd = new JDialog ( ) ; 
 JPanel dialogPanel = new JPanel ( new BorderLayout ( ) ) ; 
 jd . setSize ( 320 , 240 ) ; 
 jd . setTitle ( " Subwindows " ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
