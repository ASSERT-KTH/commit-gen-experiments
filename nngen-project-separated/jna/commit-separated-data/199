BLEU SCORE: 0.05341087579952926

TEST MSG: Improve binding of TypeLib bindings
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 8a90817 . . 5e28d10 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 44 , 6 + 44 , 7 @ @ Bug Fixes <nl> * [ # 566 ] ( https : / / github . com / java - native - access / jna / pull / 566 ) : Fix return type of Native # loadLibrary to match unconstrained generic [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) <nl> * [ # 584 ] ( https : / / github . com / java - native - access / jna / pull / 584 ) : Promote float varargs to double - [ @ marco2357 ] ( https : / / github . com / marco2357 ) . <nl> * [ # 588 ] ( https : / / github . com / java - native - access / jna / pull / 588 ) : Fix varargs calls on arm - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * [ # 593 ] ( https : / / github . com / java - native - access / jna / pull / 593 ) : Improve binding of TypeLib bindings - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Release 4 . 2 . 1 <nl> = = = = = = = = = = = = = <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java <nl> index dd51e5b . . 955148d 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> + import com . sun . jna . Pointer ; <nl> import com . sun . jna . platform . win32 . Guid . GUID ; <nl> import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; <nl> import com . sun . jna . platform . win32 . OaIdl . TLIBATTR ; <nl> @ @ - 69 , 9 + 70 , 9 @ @ public interface ITypeLib extends IUnknown { <nl> <nl> public HRESULT FindName ( <nl> / * [ annotation ] [ out ] [ in ] * / <nl> - BSTRByReference szNameBuf , <nl> + LPOLESTR szNameBuf , <nl> / * [ in ] * / ULONG lHashVal , <nl> - / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo , <nl> + / * [ length _ is ] [ size _ is ] [ out ] * / Pointer [ ] ppTInfo , <nl> / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId , <nl> / * [ out ] [ in ] * / USHORTByReference pcFound ) ; <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java <nl> index 5ec1e8a . . e5153f5 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java <nl> @ @ - 188 , 8 + 188 , 7 @ @ public class TypeLib extends Unknown implements ITypeLib { <nl> * @ return the hresult <nl> * / <nl> public HRESULT IsName ( <nl> - / * [ annotation ] [ out ] [ in ] * / <nl> - LPOLESTR szNameBuf , <nl> + / * [ annotation ] [ out ] [ in ] * / LPOLESTR szNameBuf , <nl> / * [ in ] * / ULONG lHashVal , <nl> / * [ out ] * / BOOLByReference pfName ) { <nl> <nl> @ @ - 214 , 10 + 213 , 9 @ @ public class TypeLib extends Unknown implements ITypeLib { <nl> * @ return the hresult <nl> * / <nl> public HRESULT FindName ( <nl> - / * [ annotation ] [ out ] [ in ] * / <nl> - BSTRByReference szNameBuf , <nl> + / * [ annotation ] [ out ] [ in ] * / LPOLESTR szNameBuf , <nl> / * [ in ] * / ULONG lHashVal , <nl> - / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo , <nl> + / * [ length _ is ] [ size _ is ] [ out ] * / Pointer [ ] ppTInfo , <nl> / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId , <nl> / * [ out ] [ in ] * / USHORTByReference pcFound ) { <nl> <nl> @ @ - 233 , 7 + 231 , 7 @ @ public class TypeLib extends Unknown implements ITypeLib { <nl> * the t lib attr <nl> * / <nl> public void ReleaseTLibAttr ( / * [ in ] * / TLIBATTR pTLibAttr ) { <nl> - this . _ invokeNativeObject ( 12 , new Object [ ] { this . getPointer ( ) } , <nl> - HRESULT . class ) ; <nl> + this . _ invokeNativeObject ( 12 , new Object [ ] { this . getPointer ( ) , <nl> + pTLibAttr . getPointer ( ) } , HRESULT . class ) ; <nl> } <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java <nl> index ebe28da . . 9348bed 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> + import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . WString ; <nl> import com . sun . jna . platform . win32 . Guid . CLSID ; <nl> @ @ - 21 , 6 + 22 , 7 @ @ import com . sun . jna . platform . win32 . OaIdl . TLIBATTR ; <nl> import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; <nl> import com . sun . jna . platform . win32 . Ole32 ; <nl> import com . sun . jna . platform . win32 . OleAuto ; <nl> + import com . sun . jna . platform . win32 . WTypes ; <nl> import com . sun . jna . platform . win32 . WTypes . BSTRByReference ; <nl> import com . sun . jna . platform . win32 . WTypes . LPOLESTR ; <nl> import com . sun . jna . platform . win32 . WinDef . BOOLByReference ; <nl> @ @ - 364 , 32 + 366 , 29 @ @ public class TypeLibUtil { <nl> * @ param name <nl> * the name <nl> * @ param hashVal <nl> - * the hash val <nl> - * @ param found <nl> - * the found <nl> + * the hash val or 0 if unknown <nl> + * @ param maxResult <nl> + * maximum number of items to search <nl> * @ return the find name <nl> * / <nl> - public FindName FindName ( String name , int hashVal , short found ) { <nl> - / * [ annotation ] [ out ] [ in ] * / <nl> - BSTRByReference szNameBuf = new BSTRByReference ( <nl> - OleAuto . INSTANCE . SysAllocString ( name ) ) ; <nl> - / * [ in ] * / ULONG lHashVal = new ULONG ( hashVal ) ; <nl> - / * [ out ] [ in ] * / USHORTByReference pcFound = new USHORTByReference ( found ) ; <nl> - <nl> - HRESULT hr = this . typelib . FindName ( szNameBuf , lHashVal , null , null , <nl> - pcFound ) ; <nl> - COMUtils . checkRC ( hr ) ; <nl> + public FindName FindName ( String name , int hashVal , short maxResult ) { <nl> + Pointer p = Ole32 . INSTANCE . CoTaskMemAlloc ( ( name . length ( ) + 1L ) * Native . WCHAR _ SIZE ) ; <nl> + WTypes . LPOLESTR olestr = new WTypes . LPOLESTR ( p ) ; <nl> + olestr . setValue ( name ) ; <nl> <nl> - found = pcFound . getValue ( ) . shortValue ( ) ; <nl> - / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo = new PointerByReference ( ) ; <nl> - / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId = new MEMBERID [ found ] ; <nl> - hr = this . typelib . FindName ( szNameBuf , lHashVal , ppTInfo , rgMemId , <nl> + ULONG lHashVal = new ULONG ( hashVal ) ; <nl> + USHORTByReference pcFound = new USHORTByReference ( maxResult ) ; <nl> + <nl> + Pointer [ ] ppTInfo = new Pointer [ maxResult ] ; <nl> + MEMBERID [ ] rgMemId = new MEMBERID [ maxResult ] ; <nl> + HRESULT hr = this . typelib . FindName ( olestr , lHashVal , ppTInfo , rgMemId , <nl> pcFound ) ; <nl> COMUtils . checkRC ( hr ) ; <nl> <nl> - FindName findName = new FindName ( szNameBuf . getString ( ) , ppTInfo , <nl> - rgMemId , found ) ; <nl> - OLEAUTO . SysFreeString ( szNameBuf . getValue ( ) ) ; <nl> + FindName findName = new FindName ( olestr . getValue ( ) , ppTInfo , <nl> + rgMemId , pcFound . getValue ( ) . shortValue ( ) ) ; <nl> + <nl> + Ole32 . INSTANCE . CoTaskMemFree ( p ) ; <nl> <nl> return findName ; <nl> } <nl> @ @ - 405 , 7 + 404 , 7 @ @ public class TypeLibUtil { <nl> private String nameBuf ; <nl> <nl> / * * The p t info . * / <nl> - private PointerByReference pTInfo ; <nl> + private Pointer [ ] pTInfo ; <nl> <nl> / * * The rg mem id . * / <nl> private MEMBERID [ ] rgMemId ; <nl> @ @ - 423 , 12 + 422 , 14 @ @ public class TypeLibUtil { <nl> * the rg mem id <nl> * @ param pcFound <nl> * / <nl> - public FindName ( String nameBuf , PointerByReference pTInfo , MEMBERID [ ] rgMemId , <nl> + FindName ( String nameBuf , Pointer [ ] pTInfo , MEMBERID [ ] rgMemId , <nl> short pcFound ) { <nl> this . nameBuf = nameBuf ; <nl> - this . pTInfo = pTInfo ; <nl> - this . rgMemId = rgMemId ; <nl> + this . pTInfo = new Pointer [ pcFound ] ; <nl> + this . rgMemId = new MEMBERID [ pcFound ] ; <nl> this . pcFound = pcFound ; <nl> + System . arraycopy ( pTInfo , 0 , this . pTInfo , 0 , pcFound ) ; <nl> + System . arraycopy ( rgMemId , 0 , this . rgMemId , 0 , pcFound ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 446 , 12 + 447 , 10 @ @ public class TypeLibUtil { <nl> * @ return the t info <nl> * / <nl> public ITypeInfo [ ] getTInfo ( ) { <nl> - <nl> - Pointer pVals = pTInfo . getValue ( ) ; <nl> ITypeInfo [ ] values = new ITypeInfo [ pcFound ] ; <nl> for ( int i = 0 ; i < pcFound ; i + + ) <nl> { <nl> - values [ i ] = new TypeInfo ( pVals . getPointer ( i * Pointer . SIZE ) ) ; <nl> + values [ i ] = new TypeInfo ( pTInfo [ i ] ) ; <nl> } <nl> return values ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> index b3eafa0 . . 247dd09 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> @ @ - 196 , 7 + 196 , 7 @ @ public interface WTypes { <nl> } <nl> <nl> public static class LPOLESTR extends PointerType { <nl> - public static class ByReference extends BSTR implements <nl> + public static class ByReference extends LPOLESTR implements <nl> Structure . ByReference { <nl> } <nl> <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ITypeLibTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ITypeLibTest . java <nl> index 67c852b . . a90b2f9 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ITypeLibTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ITypeLibTest . java <nl> @ @ - 12 , 16 + 12 , 22 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> + import com . sun . jna . Native ; <nl> + import com . sun . jna . Pointer ; <nl> import junit . framework . TestCase ; <nl> <nl> import com . sun . jna . WString ; <nl> import com . sun . jna . platform . win32 . Guid . CLSID ; <nl> + import com . sun . jna . platform . win32 . Guid . GUID ; <nl> import com . sun . jna . platform . win32 . Kernel32 ; <nl> + import com . sun . jna . platform . win32 . OaIdl ; <nl> import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; <nl> import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; <nl> import com . sun . jna . platform . win32 . Ole32 ; <nl> import com . sun . jna . platform . win32 . OleAuto ; <nl> - import com . sun . jna . platform . win32 . WTypes . BSTRByReference ; <nl> + import com . sun . jna . platform . win32 . WTypes ; <nl> + import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> + import com . sun . jna . platform . win32 . WinDef ; <nl> import com . sun . jna . platform . win32 . WinDef . LCID ; <nl> import com . sun . jna . platform . win32 . WinDef . UINT ; <nl> import com . sun . jna . platform . win32 . WinDef . ULONG ; <nl> @ @ - 33 , 7 + 39 , 12 @ @ import com . sun . jna . ptr . PointerByReference ; <nl> * @ author dblock [ at ] dblock [ dot ] org <nl> * / <nl> public class ITypeLibTest extends TestCase { <nl> - <nl> + / / Microsoft Shell Controls And Automation <nl> + private static final String SHELL _ CLSID = " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " ; <nl> + / / Version 1 . 0 <nl> + private static final int SHELL _ MAJOR = 1 ; <nl> + private static final int SHELL _ MINOR = 0 ; <nl> + <nl> public static void main ( String [ ] args ) { <nl> junit . textui . TestRunner . run ( ITypeLibTest . class ) ; <nl> } <nl> @ @ - 42 , 22 + 53 , 19 @ @ public class ITypeLibTest extends TestCase { <nl> } <nl> <nl> private ITypeLib loadShellTypeLib ( ) { <nl> - / / Microsoft Shell Controls And Automation <nl> CLSID . ByReference clsid = new CLSID . ByReference ( ) ; <nl> / / get CLSID from string <nl> - HRESULT hr = Ole32 . INSTANCE . CLSIDFromString ( new WString ( <nl> - " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " ) , clsid ) ; <nl> - COMUtils . checkRC ( hr ) ; <nl> - assertEquals ( 0 , hr . intValue ( ) ) ; <nl> + HRESULT hr = Ole32 . INSTANCE . CLSIDFromString ( new WString ( SHELL _ CLSID ) , clsid ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> <nl> / / get user default lcid <nl> LCID lcid = Kernel32 . INSTANCE . GetUserDefaultLCID ( ) ; <nl> - / / create a IUnknown pointer <nl> + <nl> PointerByReference pShellTypeLib = new PointerByReference ( ) ; <nl> / / load typelib <nl> - hr = OleAuto . INSTANCE . LoadRegTypeLib ( clsid , 1 , 0 , lcid , pShellTypeLib ) ; <nl> - COMUtils . checkRC ( hr ) ; <nl> - assertEquals ( 0 , hr . intValue ( ) ) ; <nl> + hr = OleAuto . INSTANCE . LoadRegTypeLib ( clsid , SHELL _ MAJOR , SHELL _ MINOR , lcid , pShellTypeLib ) ; <nl> + <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> <nl> return new TypeLib ( pShellTypeLib . getValue ( ) ) ; <nl> } <nl> @ @ - 65 , 7 + 73 , 7 @ @ public class ITypeLibTest extends TestCase { <nl> public void testGetTypeInfoCount ( ) { <nl> ITypeLib shellTypeLib = loadShellTypeLib ( ) ; <nl> UINT typeInfoCount = shellTypeLib . GetTypeInfoCount ( ) ; <nl> - / / System . out . println ( " GetTypeInfoCount : " + typeInfoCount ) ; <nl> + assertEquals ( 38 , typeInfoCount . intValue ( ) ) ; <nl> } <nl> <nl> public void testGetTypeInfo ( ) { <nl> @ @ - 74 , 8 + 82 , 8 @ @ public class ITypeLibTest extends TestCase { <nl> PointerByReference ppTInfo = new PointerByReference ( ) ; <nl> HRESULT hr = shellTypeLib . GetTypeInfo ( new UINT ( 0 ) , ppTInfo ) ; <nl> <nl> - COMUtils . checkRC ( hr ) ; <nl> - assertEquals ( 0 , hr . intValue ( ) ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + <nl> / / System . out . println ( " ITypeInfo : " + ppTInfo . toString ( ) ) ; <nl> } <nl> <nl> @ @ - 85 , 55 + 93 , 119 @ @ public class ITypeLibTest extends TestCase { <nl> TYPEKIND . ByReference pTKind = new TYPEKIND . ByReference ( ) ; <nl> HRESULT hr = shellTypeLib . GetTypeInfoType ( new UINT ( 0 ) , pTKind ) ; <nl> <nl> - COMUtils . checkRC ( hr ) ; <nl> - assertEquals ( 0 , hr . intValue ( ) ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + <nl> / / System . out . println ( " TYPEKIND : " + pTKind ) ; <nl> } <nl> <nl> public void testGetTypeInfoOfGuid ( ) { <nl> - / / ITypeLib shellTypeLib = loadShellTypeLib ( ) ; <nl> - / / <nl> - / / GUID shellGuid = new GUID ( " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " ) ; <nl> - / / TypeInfo . ByReference pTInfo = new TypeInfo . ByReference ( ) ; <nl> - / / HRESULT hr = shellTypeLib . GetTypeInfoOfGuid ( shellGuid , pTInfo ) ; <nl> - / / <nl> - / / COMUtils . checkRC ( hr ) ; <nl> - / / assertEquals ( 0 , hr . intValue ( ) ) ; <nl> - / / System . out . println ( " ITypeInfo : " + pTInfo . toString ( ) ) ; <nl> + ITypeLib shellTypeLib = loadShellTypeLib ( ) ; <nl> + <nl> + / / GUID for dispinterface IFolderViewOC <nl> + GUID iFolderViewOC = new GUID ( " { 9BA05970 - F6A8 - 11CF - A442 - 00A0C90A8F39 } " ) ; <nl> + PointerByReference pbr = new PointerByReference ( ) ; <nl> + HRESULT hr = shellTypeLib . GetTypeInfoOfGuid ( iFolderViewOC , pbr ) ; <nl> + <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> } <nl> <nl> - public void testGetLibAttr ( ) { <nl> - / / ITypeLib shellTypeLib = loadShellTypeLib ( ) ; <nl> - / / <nl> - / / TLIBATTR . ByReference ppTLibAttr = new TLIBATTR . ByReference ( ) ; <nl> - / / HRESULT hr = shellTypeLib . GetLibAttr ( ppTLibAttr ) ; <nl> - / / <nl> - / / COMUtils . checkRC ( hr ) ; <nl> - / / assertEquals ( 0 , hr . intValue ( ) ) ; <nl> - / / System . out . println ( " ppTLibAttr : " + ppTLibAttr . toString ( ) ) ; <nl> + public void testLibAttr ( ) { <nl> + ITypeLib shellTypeLib = loadShellTypeLib ( ) ; <nl> + <nl> + PointerByReference pbr = new PointerByReference ( ) ; <nl> + HRESULT hr = shellTypeLib . GetLibAttr ( pbr ) ; <nl> + <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + <nl> + OaIdl . TLIBATTR tlibAttr = new OaIdl . TLIBATTR ( pbr . getValue ( ) ) ; <nl> + <nl> + assertEquals ( SHELL _ CLSID , tlibAttr . guid . toGuidString ( ) ) ; <nl> + assertEquals ( SHELL _ MAJOR , tlibAttr . wMajorVerNum . intValue ( ) ) ; <nl> + assertEquals ( SHELL _ MINOR , tlibAttr . wMinorVerNum . intValue ( ) ) ; <nl> + <nl> + shellTypeLib . ReleaseTLibAttr ( tlibAttr ) ; <nl> } <nl> <nl> public void testGetTypeComp ( ) { <nl> - / / ITypeLib shellTypeLib = loadShellTypeLib ( ) ; <nl> - / / <nl> - / / TypeComp . ByReference pTComp = new TypeComp . ByReference ( ) ; <nl> - / / HRESULT hr = shellTypeLib . GetTypeComp ( pTComp ) ; <nl> - / / <nl> - / / COMUtils . checkRC ( hr ) ; <nl> - / / assertEquals ( 0 , hr . intValue ( ) ) ; <nl> - / / System . out . println ( " pTComp : " + pTComp . toString ( ) ) ; <nl> + ITypeLib shellTypeLib = loadShellTypeLib ( ) ; <nl> + <nl> + PointerByReference pbr = new PointerByReference ( ) ; <nl> + HRESULT hr = shellTypeLib . GetTypeComp ( pbr ) ; <nl> + <nl> + / / Only check that call works <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> } <nl> <nl> + public void testIsName ( ) { <nl> + ITypeLib shellTypeLib = loadShellTypeLib ( ) ; <nl> + <nl> + String memberValue = " Folder " ; <nl> + Pointer p = Ole32 . INSTANCE . CoTaskMemAlloc ( ( memberValue . length ( ) + 1L ) * Native . WCHAR _ SIZE ) ; <nl> + WTypes . LPOLESTR olestr = new WTypes . LPOLESTR ( p ) ; <nl> + olestr . setValue ( memberValue ) ; <nl> + <nl> + WinDef . BOOLByReference boolByRef = new WinDef . BOOLByReference ( ) ; <nl> + <nl> + HRESULT hr = shellTypeLib . IsName ( olestr , new ULONG ( 0 ) , boolByRef ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + <nl> + / / Folder is a member <nl> + assertTrue ( boolByRef . getValue ( ) . booleanValue ( ) ) ; <nl> + <nl> + Ole32 . INSTANCE . CoTaskMemFree ( p ) ; <nl> + } <nl> + <nl> public void testFindName ( ) { <nl> ITypeLib shellTypeLib = loadShellTypeLib ( ) ; <nl> - BSTRByReference szNameBuf = new BSTRByReference ( OleAuto . INSTANCE . SysAllocString ( " Application " ) ) ; <nl> + <nl> + / / The found member is Count , search done with lowercase value to test <nl> + / / correct behaviour ( search is case insensitive ) <nl> + String memberValue = " count " ; <nl> + String memberValueOk = " Count " ; <nl> + Pointer p = Ole32 . INSTANCE . CoTaskMemAlloc ( ( memberValue . length ( ) + 1L ) * Native . WCHAR _ SIZE ) ; <nl> + WTypes . LPOLESTR olestr = new WTypes . LPOLESTR ( p ) ; <nl> + olestr . setValue ( memberValue ) ; <nl> + <nl> + short maxResults = 100 ; <nl> + <nl> ULONG lHashVal = new ULONG ( 0 ) ; <nl> - USHORTByReference pcFound = new USHORTByReference ( ( short ) 20 ) ; <nl> - PointerByReference ppTInfo = new PointerByReference ( ) ; <nl> - MEMBERID [ ] rgMemId = new MEMBERID [ 20 ] ; <nl> - HRESULT hr = shellTypeLib . FindName ( szNameBuf , lHashVal , ppTInfo , rgMemId , pcFound ) ; <nl> - <nl> - COMUtils . checkRC ( hr ) ; <nl> - / / System . out . println ( " szNameBuf : " + szNameBuf ) ; <nl> + USHORTByReference pcFound = new USHORTByReference ( maxResults ) ; <nl> + Pointer [ ] pointers = new Pointer [ maxResults ] ; <nl> + MEMBERID [ ] rgMemId = new MEMBERID [ maxResults ] ; <nl> + <nl> + HRESULT hr = shellTypeLib . FindName ( olestr , lHashVal , pointers , rgMemId , pcFound ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + <nl> + / / If a reader can come up with more tests it would be appretiated , <nl> + / / the documentation is unclear what more can be expected <nl> + <nl> + / / 2 matches come from manual tests <nl> + assertTrue ( pcFound . getValue ( ) . intValue ( ) = = 2 ) ; <nl> + / / Check that function return corrected member name ( Count ) - see uppercase C <nl> + assertEquals ( memberValueOk , olestr . getValue ( ) ) ; <nl> + <nl> + / / There have to be as many pointers as reported by pcFound <nl> + assertNotNull ( pointers [ 0 ] ) ; <nl> + assertNotNull ( pointers [ 1 ] ) ; <nl> + assertNull ( pointers [ 2 ] ) ; / / Might be flaky , contract only defined positions 0 - > ( pcFound - 1 ) <nl> + <nl> + / / Test access to second value <nl> + TypeInfo secondTypeInfo = new TypeInfo ( pointers [ 1 ] ) ; <nl> + <nl> + PointerByReference pbr = new PointerByReference ( ) ; <nl> + hr = secondTypeInfo . GetTypeAttr ( pbr ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + OaIdl . TYPEATTR pTypeAttr = new OaIdl . TYPEATTR ( pbr . getValue ( ) ) ; <nl> + <nl> + / / Either interface FolderItemVerbs ( { 1F8352C0 - 50B0 - 11CF - 960C - 0080C7F4EE85 } ) <nl> + / / or FolderItems ( { 744129E0 - CBE5 - 11CE - 8350 - 444553540000 } ) <nl> + String typeGUID = pTypeAttr . guid . toGuidString ( ) ; <nl> + <nl> + assertTrue ( typeGUID . equals ( " { 1F8352C0 - 50B0 - 11CF - 960C - 0080C7F4EE85 } " ) | | <nl> + typeGUID . equals ( " { 744129E0 - CBE5 - 11CE - 8350 - 444553540000 } " ) ) ; <nl> + <nl> + secondTypeInfo . ReleaseTypeAttr ( pTypeAttr ) ; <nl> + <nl> + Ole32 . INSTANCE . CoTaskMemFree ( olestr . getPointer ( ) ) ; <nl> } <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java <nl> index b425a2d . . a37100d 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java <nl> @ @ - 15 , 9 + 15 , 14 @ @ package com . sun . jna . platform . win32 . COM ; <nl> import junit . framework . TestCase ; <nl> <nl> import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; <nl> + import com . sun . jna . platform . win32 . COM . TypeLibUtil . FindName ; <nl> + import com . sun . jna . platform . win32 . COM . TypeLibUtil . IsName ; <nl> + import com . sun . jna . platform . win32 . OaIdl ; <nl> import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; <nl> import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; <nl> import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; <nl> + import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> <nl> / * * <nl> * @ author dblock [ at ] dblock [ dot ] org <nl> @ @ - 70 , 31 + 75 , 52 @ @ public class TypeLibUtilTest extends TestCase { <nl> typeInfoUtil . ReleaseTypeAttr ( typeAttr ) ; <nl> } <nl> } <nl> - <nl> - public void testBug ( ) { <nl> + <nl> + public void testFindName ( ) { <nl> + / / Test is modelled after ITypeLibTest # testFindName <nl> TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; <nl> - int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; <nl> <nl> - ITypeInfo typeInfo = shellTypeLib . getTypeInfo ( 4 ) ; <nl> - TypeInfoUtil typeInfoUtil = new TypeInfoUtil ( typeInfo ) ; <nl> + String memberValue = " count " ; <nl> + String memberValueOk = " Count " ; <nl> <nl> - TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; <nl> - int cFuncs = typeAttr . cFuncs . intValue ( ) ; <nl> - <nl> - for ( int y = 0 ; y < cFuncs ; y + + ) { <nl> - / / Get the function description <nl> - FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( y ) ; <nl> - / / Get the member ID <nl> - MEMBERID memberID = funcDesc . memid ; <nl> - / / Get the name of the method <nl> - TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; <nl> - String methodName = typeInfoDoc2 . getName ( ) ; <nl> - <nl> - assertNotNull ( methodName ) ; <nl> - <nl> - typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; <nl> - } <nl> + FindName result = shellTypeLib . FindName ( memberValue , 0 , ( short ) 100 ) ; <nl> + <nl> + / / 2 matches come from manual tests <nl> + assertEquals ( 2 , result . getFound ( ) ) ; <nl> + / / Check that function return corrected member name ( Count ) - see uppercase C <nl> + assertEquals ( memberValueOk , result . getNameBuf ( ) ) ; <nl> + <nl> + / / There have to be as many pointers as reported by pcFound <nl> + ITypeInfo [ ] typelib = result . getTInfo ( ) ; <nl> + assertEquals ( 2 , typelib . length ) ; <nl> + assertNotNull ( typelib [ 0 ] ) ; <nl> + assertNotNull ( typelib [ 1 ] ) ; <nl> <nl> - typeInfoUtil . ReleaseTypeAttr ( typeAttr ) ; <nl> + PointerByReference pbr = new PointerByReference ( ) ; <nl> + HRESULT hr = typelib [ 1 ] . GetTypeAttr ( pbr ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; <nl> + OaIdl . TYPEATTR pTypeAttr = new OaIdl . TYPEATTR ( pbr . getValue ( ) ) ; <nl> + <nl> + / / Either interface FolderItemVerbs ( { 1F8352C0 - 50B0 - 11CF - 960C - 0080C7F4EE85 } ) <nl> + / / or FolderItems ( { 744129E0 - CBE5 - 11CE - 8350 - 444553540000 } ) <nl> + String typeGUID = pTypeAttr . guid . toGuidString ( ) ; <nl> + <nl> + assertTrue ( typeGUID . equals ( " { 1F8352C0 - 50B0 - 11CF - 960C - 0080C7F4EE85 } " ) | | <nl> + typeGUID . equals ( " { 744129E0 - CBE5 - 11CE - 8350 - 444553540000 } " ) ) ; <nl> + <nl> + typelib [ 1 ] . ReleaseTypeAttr ( pTypeAttr ) ; <nl> } <nl> + <nl> + public void testIsName ( ) { <nl> + / / Test is modelled after ITypeLibTest # testFindName <nl> + TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; <nl> + <nl> + String memberValue = " count " ; <nl> + String memberValueOk = " Count " ; <nl> + <nl> + IsName isNameResult = shellTypeLib . IsName ( memberValue , 0 ) ; <nl> + <nl> + assertEquals ( memberValueOk , isNameResult . getNameBuf ( ) ) ; <nl> + assertTrue ( isNameResult . isName ( ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 8a90817 . . 5e28d10 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 44 , 6 + 44 , 7 @ @ Bug Fixes 
 * [ # 566 ] ( https : / / github . com / java - native - access / jna / pull / 566 ) : Fix return type of Native # loadLibrary to match unconstrained generic [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) 
 * [ # 584 ] ( https : / / github . com / java - native - access / jna / pull / 584 ) : Promote float varargs to double - [ @ marco2357 ] ( https : / / github . com / marco2357 ) . 
 * [ # 588 ] ( https : / / github . com / java - native - access / jna / pull / 588 ) : Fix varargs calls on arm - [ @ twall ] ( https : / / github . com / twall ) . 
 + * [ # 593 ] ( https : / / github . com / java - native - access / jna / pull / 593 ) : Improve binding of TypeLib bindings - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Release 4 . 2 . 1 
 = = = = = = = = = = = = = 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java 
 index dd51e5b . . 955148d 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * / 
 package com . sun . jna . platform . win32 . COM ; 
 
 + import com . sun . jna . Pointer ; 
 import com . sun . jna . platform . win32 . Guid . GUID ; 
 import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; 
 import com . sun . jna . platform . win32 . OaIdl . TLIBATTR ; 
 @ @ - 69 , 9 + 70 , 9 @ @ public interface ITypeLib extends IUnknown { 
 
 public HRESULT FindName ( 
 / * [ annotation ] [ out ] [ in ] * / 
 - BSTRByReference szNameBuf , 
 + LPOLESTR szNameBuf , 
 / * [ in ] * / ULONG lHashVal , 
 - / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo , 
 + / * [ length _ is ] [ size _ is ] [ out ] * / Pointer [ ] ppTInfo , 
 / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId , 
 / * [ out ] [ in ] * / USHORTByReference pcFound ) ; 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java 
 index 5ec1e8a . . e5153f5 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java 
 @ @ - 188 , 8 + 188 , 7 @ @ public class TypeLib extends Unknown implements ITypeLib { 
 * @ return the hresult 
 * / 
 public HRESULT IsName ( 
 - / * [ annotation ] [ out ] [ in ] * / 
 - LPOLESTR szNameBuf , 
 + / * [ annotation ] [ out ] [ in ] * / LPOLESTR szNameBuf , 
 / * [ in ] * / ULONG lHashVal , 
 / * [ out ] * / BOOLByReference pfName ) { 
 
 @ @ - 214 , 10 + 213 , 9 @ @ public class TypeLib extends Unknown implements ITypeLib { 
 * @ return the hresult 
 * / 
 public HRESULT FindName ( 
 - / * [ annotation ] [ out ] [ in ] * / 
 - BSTRByReference szNameBuf , 
 + / * [ annotation ] [ out ] [ in ] * / LPOLESTR szNameBuf , 
 / * [ in ] * / ULONG lHashVal , 
 - / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo , 
 + / * [ length _ is ] [ size _ is ] [ out ] * / Pointer [ ] ppTInfo , 
 / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId , 
 / * [ out ] [ in ] * / USHORTByReference pcFound ) { 
 
 @ @ - 233 , 7 + 231 , 7 @ @ public class TypeLib extends Unknown implements ITypeLib { 
 * the t lib attr 
 * / 
 public void ReleaseTLibAttr ( / * [ in ] * / TLIBATTR pTLibAttr ) { 
 - this . _ invokeNativeObject ( 12 , new Object [ ] { this . getPointer ( ) } , 
 - HRESULT . class ) ; 
 + this . _ invokeNativeObject ( 12 , new Object [ ] { this . getPointer ( ) , 
 + pTLibAttr . getPointer ( ) } , HRESULT . class ) ; 
 } 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java 
 index ebe28da . . 9348bed 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * / 
 package com . sun . jna . platform . win32 . COM ; 
 
 + import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . WString ; 
 import com . sun . jna . platform . win32 . Guid . CLSID ; 
 @ @ - 21 , 6 + 22 , 7 @ @ import com . sun . jna . platform . win32 . OaIdl . TLIBATTR ; 
 import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; 
 import com . sun . jna . platform . win32 . Ole32 ; 
 import com . sun . jna . platform . win32 . OleAuto ; 
 + import com . sun . jna . platform . win32 . WTypes ; 
 import com . sun . jna . platform . win32 . WTypes . BSTRByReference ; 
 import com . sun . jna . platform . win32 . WTypes . LPOLESTR ; 
 import com . sun . jna . platform . win32 . WinDef . BOOLByReference ; 
 @ @ - 364 , 32 + 366 , 29 @ @ public class TypeLibUtil { 
 * @ param name 
 * the name 
 * @ param hashVal 
 - * the hash val 
 - * @ param found 
 - * the found 
 + * the hash val or 0 if unknown 
 + * @ param maxResult 
 + * maximum number of items to search 
 * @ return the find name 
 * / 
 - public FindName FindName ( String name , int hashVal , short found ) { 
 - / * [ annotation ] [ out ] [ in ] * / 
 - BSTRByReference szNameBuf = new BSTRByReference ( 
 - OleAuto . INSTANCE . SysAllocString ( name ) ) ; 
 - / * [ in ] * / ULONG lHashVal = new ULONG ( hashVal ) ; 
 - / * [ out ] [ in ] * / USHORTByReference pcFound = new USHORTByReference ( found ) ; 
 - 
 - HRESULT hr = this . typelib . FindName ( szNameBuf , lHashVal , null , null , 
 - pcFound ) ; 
 - COMUtils . checkRC ( hr ) ; 
 + public FindName FindName ( String name , int hashVal , short maxResult ) { 
 + Pointer p = Ole32 . INSTANCE . CoTaskMemAlloc ( ( name . length ( ) + 1L ) * Native . WCHAR _ SIZE ) ; 
 + WTypes . LPOLESTR olestr = new WTypes . LPOLESTR ( p ) ; 
 + olestr . setValue ( name ) ; 
 
 - found = pcFound . getValue ( ) . shortValue ( ) ; 
 - / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo = new PointerByReference ( ) ; 
 - / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId = new MEMBERID [ found ] ; 
 - hr = this . typelib . FindName ( szNameBuf , lHashVal , ppTInfo , rgMemId , 
 + ULONG lHashVal = new ULONG ( hashVal ) ; 
 + USHORTByReference pcFound = new USHORTByReference ( maxResult ) ; 
 + 
 + Pointer [ ] ppTInfo = new Pointer [ maxResult ] ; 
 + MEMBERID [ ] rgMemId = new MEMBERID [ maxResult ] ; 
 + HRESULT hr = this . typelib . FindName ( olestr , lHashVal , ppTInfo , rgMemId , 
 pcFound ) ; 
 COMUtils . checkRC ( hr ) ; 
 
 - FindName findName = new FindName ( szNameBuf . getString ( ) , ppTInfo , 
 - rgMemId , found ) ; 
 - OLEAUTO . SysFreeString ( szNameBuf . getValue ( ) ) ; 
 + FindName findName = new FindName ( olestr . getValue ( ) , ppTInfo , 
 + rgMemId , pcFound . getValue ( ) . shortValue ( ) ) ; 
 + 
 + Ole32 . INSTANCE . CoTaskMemFree ( p ) ; 
 
 return findName ; 
 } 
 @ @ - 405 , 7 + 404 , 7 @ @ public class TypeLibUtil { 
 private String nameBuf ; 
 
 / * * The p t info . * / 
 - private PointerByReference pTInfo ; 
 + private Pointer [ ] pTInfo ; 
 
 / * * The rg mem id . * / 
 private MEMBERID [ ] rgMemId ; 
 @ @ - 423 , 12 + 422 , 14 @ @ public class TypeLibUtil { 
 * the rg mem id 
 * @ param pcFound 
 * / 
 - public FindName ( String nameBuf , PointerByReference pTInfo , MEMBERID [ ] rgMemId , 
 + FindName ( String nameBuf , Pointer [ ] pTInfo , MEMBERID [ ] rgMemId , 
 short pcFound ) { 
 this . nameBuf = nameBuf ; 
 - this . pTInfo = pTInfo ; 
 - this . rgMemId = rgMemId ; 
 + this . pTInfo = new Pointer [ pcFound ] ; 
 + this . rgMemId = new MEMBERID [ pcFound ] ; 
 this . pcFound = pcFound ; 
 + System . arraycopy ( pTInfo , 0 , this . pTInfo , 0 , pcFound ) ; 
 + System . arraycopy ( rgMemId , 0 , this . rgMemId , 0 , pcFound ) ; 
 } 
 
 / * * 
 @ @ - 446 , 12 + 447 , 10 @ @ public class TypeLibUtil { 
 * @ return the t info 
 * / 
 public ITypeInfo [ ] getTInfo ( ) { 
 - 
 - Pointer pVals = pTInfo . getValue ( ) ; 
 ITypeInfo [ ] values = new ITypeInfo [ pcFound ] ; 
 for ( int i = 0 ; i < pcFound ; i + + ) 
 { 
 - values [ i ] = new TypeInfo ( pVals . getPointer ( i * Pointer . SIZE ) ) ; 
 + values [ i ] = new TypeInfo ( pTInfo [ i ] ) ; 
 } 
 return values ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 index b3eafa0 . . 247dd09 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 @ @ - 196 , 7 + 196 , 7 @ @ public interface WTypes { 
 } 
 
 public static class LPOLESTR extends PointerType { 
 - public static class ByReference extends BSTR implements 
 + public static class ByReference extends LPOLESTR implements 
 Structure . ByReference { 
 } 
 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ITypeLibTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ITypeLibTest . java 
 index 67c852b . . a90b2f9 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ITypeLibTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ITypeLibTest . java 
 @ @ - 12 , 16 + 12 , 22 @ @ 
 * / 
 package com . sun . jna . platform . win32 . COM ; 
 
 + import com . sun . jna . Native ; 
 + import com . sun . jna . Pointer ; 
 import junit . framework . TestCase ; 
 
 import com . sun . jna . WString ; 
 import com . sun . jna . platform . win32 . Guid . CLSID ; 
 + import com . sun . jna . platform . win32 . Guid . GUID ; 
 import com . sun . jna . platform . win32 . Kernel32 ; 
 + import com . sun . jna . platform . win32 . OaIdl ; 
 import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; 
 import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; 
 import com . sun . jna . platform . win32 . Ole32 ; 
 import com . sun . jna . platform . win32 . OleAuto ; 
 - import com . sun . jna . platform . win32 . WTypes . BSTRByReference ; 
 + import com . sun . jna . platform . win32 . WTypes ; 
 + import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 + import com . sun . jna . platform . win32 . WinDef ; 
 import com . sun . jna . platform . win32 . WinDef . LCID ; 
 import com . sun . jna . platform . win32 . WinDef . UINT ; 
 import com . sun . jna . platform . win32 . WinDef . ULONG ; 
 @ @ - 33 , 7 + 39 , 12 @ @ import com . sun . jna . ptr . PointerByReference ; 
 * @ author dblock [ at ] dblock [ dot ] org 
 * / 
 public class ITypeLibTest extends TestCase { 
 - 
 + / / Microsoft Shell Controls And Automation 
 + private static final String SHELL _ CLSID = " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " ; 
 + / / Version 1 . 0 
 + private static final int SHELL _ MAJOR = 1 ; 
 + private static final int SHELL _ MINOR = 0 ; 
 + 
 public static void main ( String [ ] args ) { 
 junit . textui . TestRunner . run ( ITypeLibTest . class ) ; 
 } 
 @ @ - 42 , 22 + 53 , 19 @ @ public class ITypeLibTest extends TestCase { 
 } 
 
 private ITypeLib loadShellTypeLib ( ) { 
 - / / Microsoft Shell Controls And Automation 
 CLSID . ByReference clsid = new CLSID . ByReference ( ) ; 
 / / get CLSID from string 
 - HRESULT hr = Ole32 . INSTANCE . CLSIDFromString ( new WString ( 
 - " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " ) , clsid ) ; 
 - COMUtils . checkRC ( hr ) ; 
 - assertEquals ( 0 , hr . intValue ( ) ) ; 
 + HRESULT hr = Ole32 . INSTANCE . CLSIDFromString ( new WString ( SHELL _ CLSID ) , clsid ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 
 / / get user default lcid 
 LCID lcid = Kernel32 . INSTANCE . GetUserDefaultLCID ( ) ; 
 - / / create a IUnknown pointer 
 + 
 PointerByReference pShellTypeLib = new PointerByReference ( ) ; 
 / / load typelib 
 - hr = OleAuto . INSTANCE . LoadRegTypeLib ( clsid , 1 , 0 , lcid , pShellTypeLib ) ; 
 - COMUtils . checkRC ( hr ) ; 
 - assertEquals ( 0 , hr . intValue ( ) ) ; 
 + hr = OleAuto . INSTANCE . LoadRegTypeLib ( clsid , SHELL _ MAJOR , SHELL _ MINOR , lcid , pShellTypeLib ) ; 
 + 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 
 return new TypeLib ( pShellTypeLib . getValue ( ) ) ; 
 } 
 @ @ - 65 , 7 + 73 , 7 @ @ public class ITypeLibTest extends TestCase { 
 public void testGetTypeInfoCount ( ) { 
 ITypeLib shellTypeLib = loadShellTypeLib ( ) ; 
 UINT typeInfoCount = shellTypeLib . GetTypeInfoCount ( ) ; 
 - / / System . out . println ( " GetTypeInfoCount : " + typeInfoCount ) ; 
 + assertEquals ( 38 , typeInfoCount . intValue ( ) ) ; 
 } 
 
 public void testGetTypeInfo ( ) { 
 @ @ - 74 , 8 + 82 , 8 @ @ public class ITypeLibTest extends TestCase { 
 PointerByReference ppTInfo = new PointerByReference ( ) ; 
 HRESULT hr = shellTypeLib . GetTypeInfo ( new UINT ( 0 ) , ppTInfo ) ; 
 
 - COMUtils . checkRC ( hr ) ; 
 - assertEquals ( 0 , hr . intValue ( ) ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + 
 / / System . out . println ( " ITypeInfo : " + ppTInfo . toString ( ) ) ; 
 } 
 
 @ @ - 85 , 55 + 93 , 119 @ @ public class ITypeLibTest extends TestCase { 
 TYPEKIND . ByReference pTKind = new TYPEKIND . ByReference ( ) ; 
 HRESULT hr = shellTypeLib . GetTypeInfoType ( new UINT ( 0 ) , pTKind ) ; 
 
 - COMUtils . checkRC ( hr ) ; 
 - assertEquals ( 0 , hr . intValue ( ) ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + 
 / / System . out . println ( " TYPEKIND : " + pTKind ) ; 
 } 
 
 public void testGetTypeInfoOfGuid ( ) { 
 - / / ITypeLib shellTypeLib = loadShellTypeLib ( ) ; 
 - / / 
 - / / GUID shellGuid = new GUID ( " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " ) ; 
 - / / TypeInfo . ByReference pTInfo = new TypeInfo . ByReference ( ) ; 
 - / / HRESULT hr = shellTypeLib . GetTypeInfoOfGuid ( shellGuid , pTInfo ) ; 
 - / / 
 - / / COMUtils . checkRC ( hr ) ; 
 - / / assertEquals ( 0 , hr . intValue ( ) ) ; 
 - / / System . out . println ( " ITypeInfo : " + pTInfo . toString ( ) ) ; 
 + ITypeLib shellTypeLib = loadShellTypeLib ( ) ; 
 + 
 + / / GUID for dispinterface IFolderViewOC 
 + GUID iFolderViewOC = new GUID ( " { 9BA05970 - F6A8 - 11CF - A442 - 00A0C90A8F39 } " ) ; 
 + PointerByReference pbr = new PointerByReference ( ) ; 
 + HRESULT hr = shellTypeLib . GetTypeInfoOfGuid ( iFolderViewOC , pbr ) ; 
 + 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 } 
 
 - public void testGetLibAttr ( ) { 
 - / / ITypeLib shellTypeLib = loadShellTypeLib ( ) ; 
 - / / 
 - / / TLIBATTR . ByReference ppTLibAttr = new TLIBATTR . ByReference ( ) ; 
 - / / HRESULT hr = shellTypeLib . GetLibAttr ( ppTLibAttr ) ; 
 - / / 
 - / / COMUtils . checkRC ( hr ) ; 
 - / / assertEquals ( 0 , hr . intValue ( ) ) ; 
 - / / System . out . println ( " ppTLibAttr : " + ppTLibAttr . toString ( ) ) ; 
 + public void testLibAttr ( ) { 
 + ITypeLib shellTypeLib = loadShellTypeLib ( ) ; 
 + 
 + PointerByReference pbr = new PointerByReference ( ) ; 
 + HRESULT hr = shellTypeLib . GetLibAttr ( pbr ) ; 
 + 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + 
 + OaIdl . TLIBATTR tlibAttr = new OaIdl . TLIBATTR ( pbr . getValue ( ) ) ; 
 + 
 + assertEquals ( SHELL _ CLSID , tlibAttr . guid . toGuidString ( ) ) ; 
 + assertEquals ( SHELL _ MAJOR , tlibAttr . wMajorVerNum . intValue ( ) ) ; 
 + assertEquals ( SHELL _ MINOR , tlibAttr . wMinorVerNum . intValue ( ) ) ; 
 + 
 + shellTypeLib . ReleaseTLibAttr ( tlibAttr ) ; 
 } 
 
 public void testGetTypeComp ( ) { 
 - / / ITypeLib shellTypeLib = loadShellTypeLib ( ) ; 
 - / / 
 - / / TypeComp . ByReference pTComp = new TypeComp . ByReference ( ) ; 
 - / / HRESULT hr = shellTypeLib . GetTypeComp ( pTComp ) ; 
 - / / 
 - / / COMUtils . checkRC ( hr ) ; 
 - / / assertEquals ( 0 , hr . intValue ( ) ) ; 
 - / / System . out . println ( " pTComp : " + pTComp . toString ( ) ) ; 
 + ITypeLib shellTypeLib = loadShellTypeLib ( ) ; 
 + 
 + PointerByReference pbr = new PointerByReference ( ) ; 
 + HRESULT hr = shellTypeLib . GetTypeComp ( pbr ) ; 
 + 
 + / / Only check that call works 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 } 
 
 + public void testIsName ( ) { 
 + ITypeLib shellTypeLib = loadShellTypeLib ( ) ; 
 + 
 + String memberValue = " Folder " ; 
 + Pointer p = Ole32 . INSTANCE . CoTaskMemAlloc ( ( memberValue . length ( ) + 1L ) * Native . WCHAR _ SIZE ) ; 
 + WTypes . LPOLESTR olestr = new WTypes . LPOLESTR ( p ) ; 
 + olestr . setValue ( memberValue ) ; 
 + 
 + WinDef . BOOLByReference boolByRef = new WinDef . BOOLByReference ( ) ; 
 + 
 + HRESULT hr = shellTypeLib . IsName ( olestr , new ULONG ( 0 ) , boolByRef ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + 
 + / / Folder is a member 
 + assertTrue ( boolByRef . getValue ( ) . booleanValue ( ) ) ; 
 + 
 + Ole32 . INSTANCE . CoTaskMemFree ( p ) ; 
 + } 
 + 
 public void testFindName ( ) { 
 ITypeLib shellTypeLib = loadShellTypeLib ( ) ; 
 - BSTRByReference szNameBuf = new BSTRByReference ( OleAuto . INSTANCE . SysAllocString ( " Application " ) ) ; 
 + 
 + / / The found member is Count , search done with lowercase value to test 
 + / / correct behaviour ( search is case insensitive ) 
 + String memberValue = " count " ; 
 + String memberValueOk = " Count " ; 
 + Pointer p = Ole32 . INSTANCE . CoTaskMemAlloc ( ( memberValue . length ( ) + 1L ) * Native . WCHAR _ SIZE ) ; 
 + WTypes . LPOLESTR olestr = new WTypes . LPOLESTR ( p ) ; 
 + olestr . setValue ( memberValue ) ; 
 + 
 + short maxResults = 100 ; 
 + 
 ULONG lHashVal = new ULONG ( 0 ) ; 
 - USHORTByReference pcFound = new USHORTByReference ( ( short ) 20 ) ; 
 - PointerByReference ppTInfo = new PointerByReference ( ) ; 
 - MEMBERID [ ] rgMemId = new MEMBERID [ 20 ] ; 
 - HRESULT hr = shellTypeLib . FindName ( szNameBuf , lHashVal , ppTInfo , rgMemId , pcFound ) ; 
 - 
 - COMUtils . checkRC ( hr ) ; 
 - / / System . out . println ( " szNameBuf : " + szNameBuf ) ; 
 + USHORTByReference pcFound = new USHORTByReference ( maxResults ) ; 
 + Pointer [ ] pointers = new Pointer [ maxResults ] ; 
 + MEMBERID [ ] rgMemId = new MEMBERID [ maxResults ] ; 
 + 
 + HRESULT hr = shellTypeLib . FindName ( olestr , lHashVal , pointers , rgMemId , pcFound ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + 
 + / / If a reader can come up with more tests it would be appretiated , 
 + / / the documentation is unclear what more can be expected 
 + 
 + / / 2 matches come from manual tests 
 + assertTrue ( pcFound . getValue ( ) . intValue ( ) = = 2 ) ; 
 + / / Check that function return corrected member name ( Count ) - see uppercase C 
 + assertEquals ( memberValueOk , olestr . getValue ( ) ) ; 
 + 
 + / / There have to be as many pointers as reported by pcFound 
 + assertNotNull ( pointers [ 0 ] ) ; 
 + assertNotNull ( pointers [ 1 ] ) ; 
 + assertNull ( pointers [ 2 ] ) ; / / Might be flaky , contract only defined positions 0 - > ( pcFound - 1 ) 
 + 
 + / / Test access to second value 
 + TypeInfo secondTypeInfo = new TypeInfo ( pointers [ 1 ] ) ; 
 + 
 + PointerByReference pbr = new PointerByReference ( ) ; 
 + hr = secondTypeInfo . GetTypeAttr ( pbr ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + OaIdl . TYPEATTR pTypeAttr = new OaIdl . TYPEATTR ( pbr . getValue ( ) ) ; 
 + 
 + / / Either interface FolderItemVerbs ( { 1F8352C0 - 50B0 - 11CF - 960C - 0080C7F4EE85 } ) 
 + / / or FolderItems ( { 744129E0 - CBE5 - 11CE - 8350 - 444553540000 } ) 
 + String typeGUID = pTypeAttr . guid . toGuidString ( ) ; 
 + 
 + assertTrue ( typeGUID . equals ( " { 1F8352C0 - 50B0 - 11CF - 960C - 0080C7F4EE85 } " ) | | 
 + typeGUID . equals ( " { 744129E0 - CBE5 - 11CE - 8350 - 444553540000 } " ) ) ; 
 + 
 + secondTypeInfo . ReleaseTypeAttr ( pTypeAttr ) ; 
 + 
 + Ole32 . INSTANCE . CoTaskMemFree ( olestr . getPointer ( ) ) ; 
 } 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java 
 index b425a2d . . a37100d 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / TypeLibUtilTest . java 
 @ @ - 15 , 9 + 15 , 14 @ @ package com . sun . jna . platform . win32 . COM ; 
 import junit . framework . TestCase ; 
 
 import com . sun . jna . platform . win32 . COM . TypeInfoUtil . TypeInfoDoc ; 
 + import com . sun . jna . platform . win32 . COM . TypeLibUtil . FindName ; 
 + import com . sun . jna . platform . win32 . COM . TypeLibUtil . IsName ; 
 + import com . sun . jna . platform . win32 . OaIdl ; 
 import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; 
 import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; 
 import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; 
 + import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 
 / * * 
 * @ author dblock [ at ] dblock [ dot ] org 
 @ @ - 70 , 31 + 75 , 52 @ @ public class TypeLibUtilTest extends TestCase { 
 typeInfoUtil . ReleaseTypeAttr ( typeAttr ) ; 
 } 
 } 
 - 
 - public void testBug ( ) { 
 + 
 + public void testFindName ( ) { 
 + / / Test is modelled after ITypeLibTest # testFindName 
 TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; 
 - int typeInfoCount = shellTypeLib . getTypeInfoCount ( ) ; 
 
 - ITypeInfo typeInfo = shellTypeLib . getTypeInfo ( 4 ) ; 
 - TypeInfoUtil typeInfoUtil = new TypeInfoUtil ( typeInfo ) ; 
 + String memberValue = " count " ; 
 + String memberValueOk = " Count " ; 
 
 - TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; 
 - int cFuncs = typeAttr . cFuncs . intValue ( ) ; 
 - 
 - for ( int y = 0 ; y < cFuncs ; y + + ) { 
 - / / Get the function description 
 - FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( y ) ; 
 - / / Get the member ID 
 - MEMBERID memberID = funcDesc . memid ; 
 - / / Get the name of the method 
 - TypeInfoDoc typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; 
 - String methodName = typeInfoDoc2 . getName ( ) ; 
 - 
 - assertNotNull ( methodName ) ; 
 - 
 - typeInfoUtil . ReleaseFuncDesc ( funcDesc ) ; 
 - } 
 + FindName result = shellTypeLib . FindName ( memberValue , 0 , ( short ) 100 ) ; 
 + 
 + / / 2 matches come from manual tests 
 + assertEquals ( 2 , result . getFound ( ) ) ; 
 + / / Check that function return corrected member name ( Count ) - see uppercase C 
 + assertEquals ( memberValueOk , result . getNameBuf ( ) ) ; 
 + 
 + / / There have to be as many pointers as reported by pcFound 
 + ITypeInfo [ ] typelib = result . getTInfo ( ) ; 
 + assertEquals ( 2 , typelib . length ) ; 
 + assertNotNull ( typelib [ 0 ] ) ; 
 + assertNotNull ( typelib [ 1 ] ) ; 
 
 - typeInfoUtil . ReleaseTypeAttr ( typeAttr ) ; 
 + PointerByReference pbr = new PointerByReference ( ) ; 
 + HRESULT hr = typelib [ 1 ] . GetTypeAttr ( pbr ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( hr ) ) ; 
 + OaIdl . TYPEATTR pTypeAttr = new OaIdl . TYPEATTR ( pbr . getValue ( ) ) ; 
 + 
 + / / Either interface FolderItemVerbs ( { 1F8352C0 - 50B0 - 11CF - 960C - 0080C7F4EE85 } ) 
 + / / or FolderItems ( { 744129E0 - CBE5 - 11CE - 8350 - 444553540000 } ) 
 + String typeGUID = pTypeAttr . guid . toGuidString ( ) ; 
 + 
 + assertTrue ( typeGUID . equals ( " { 1F8352C0 - 50B0 - 11CF - 960C - 0080C7F4EE85 } " ) | | 
 + typeGUID . equals ( " { 744129E0 - CBE5 - 11CE - 8350 - 444553540000 } " ) ) ; 
 + 
 + typelib [ 1 ] . ReleaseTypeAttr ( pTypeAttr ) ; 
 } 
 + 
 + public void testIsName ( ) { 
 + / / Test is modelled after ITypeLibTest # testFindName 
 + TypeLibUtil shellTypeLib = loadShellTypeLib ( ) ; 
 + 
 + String memberValue = " count " ; 
 + String memberValueOk = " Count " ; 
 + 
 + IsName isNameResult = shellTypeLib . IsName ( memberValue , 0 ) ; 
 + 
 + assertEquals ( memberValueOk , isNameResult . getNameBuf ( ) ) ; 
 + assertTrue ( isNameResult . isName ( ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
