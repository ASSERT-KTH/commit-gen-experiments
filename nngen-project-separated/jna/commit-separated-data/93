BLEU SCORE: 0.013139808552042212

TEST MSG: Fix building JNA on gcc version < 5 and gnu make version 3 . 80
GENERATED MSG: successful compilation / link of android

TEST DIFF (one line): diff - - git a / native / Makefile b / native / Makefile <nl> index a465660 . . 6f9ad25 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 84 , 16 + 84 , 6 @ @ JNISFX = $ ( LIBSFX ) <nl> CC = gcc <nl> LD = $ ( CC ) <nl> LIBS = <nl> - # CC _ OPTS only applied to objects build for jnidispatch , not for libffi <nl> - # - Wno - unknown - warning - option <nl> - # = > Suppress warning for unknown warnings <nl> - # - Werror = > Treat warnings as errors <nl> - # - Wno - clobbered = > Silence GCC warning about clobbered automatic variables . <nl> - # The " longjmp " case only happens in protect . h in the logic <nl> - # that implements " protected " mode . In that case an exception <nl> - # is raised and the value of the potentially clobbered <nl> - # variables is ignored . <nl> - LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered <nl> # Default to Sun recommendations for JNI compilation <nl> COPT = - O2 - fno - omit - frame - pointer - fno - strict - aliasing <nl> CASM = - S <nl> @ @ - 130 , 31 + 120 , 37 @ @ ifeq ( $ ( ARCH ) , arm ) <nl> PREFIX = arm - linux - androideabi - <nl> COPT + = - mthumb - interwork - march = armv5te - mtune = xscale - msoft - float - fstack - protector <nl> HOST = arm - linux - eabi <nl> - else ifeq ( $ ( ARCH ) , armv7 ) <nl> + else <nl> + ifeq ( $ ( ARCH ) , armv7 ) <nl> PREFIX = arm - linux - androideabi - <nl> COPT + = - march = armv7 - a - mfloat - abi = softfp - mfpu = vfpv3 - d16 - Wl , - - fix - cortex - a8 <nl> HOST = arm - linux - eabi <nl> AARCH = arm <nl> - else ifeq ( $ ( ARCH ) , aarch64 ) <nl> + else <nl> + ifeq ( $ ( ARCH ) , aarch64 ) <nl> PREFIX = aarch64 - linux - android - <nl> HOST = aarch64 - linux - android <nl> AARCH = arm64 <nl> ALIBDIR = / usr / lib64 <nl> - else ifeq ( $ ( ARCH ) , x86 ) <nl> + else <nl> + ifeq ( $ ( ARCH ) , x86 ) <nl> PREFIX = i686 - linux - android - <nl> COPT + = - march = i686 <nl> HOST = i686 - linux - android <nl> - else ifeq ( $ ( ARCH ) , x86 - 64 ) <nl> + else <nl> + ifeq ( $ ( ARCH ) , x86 - 64 ) <nl> PREFIX = x86 _ 64 - linux - android - <nl> COPT + = - m64 <nl> HOST = x86 _ 64 - linux - android <nl> AARCH = x86 _ 64 <nl> ALIBDIR = / usr / lib64 <nl> - else ifeq ( $ ( ARCH ) , mips ) <nl> + else <nl> + ifeq ( $ ( ARCH ) , mips ) <nl> PREFIX = mipsel - linux - android - <nl> HOST = mipsel - linux - android <nl> COPT + = <nl> - else ifeq ( $ ( ARCH ) , mips64 ) <nl> + else <nl> + ifeq ( $ ( ARCH ) , mips64 ) <nl> PREFIX = mips64el - linux - android - <nl> HOST = mips64el - linux - android <nl> COPT + = <nl> @ @ - 162 , 6 + 158 , 12 @ @ ALIBDIR = / usr / lib64 <nl> else <nl> ERROR = $ ( error " Unsupported android architecture ' $ ( ARCH ) ' " ) <nl> endif <nl> + endif <nl> + endif <nl> + endif <nl> + endif <nl> + endif <nl> + endif <nl> NDK ? = / Developer / Applications / android - ndk - r10e <nl> NDK _ PLATFORM ? = $ ( NDK ) / platforms / android - 21 <nl> SYSROOT = $ ( NDK _ PLATFORM ) / arch - $ ( AARCH ) <nl> @ @ - 318 , 6 + 320 , 27 @ @ ifeq ( $ ( ARCH ) , ppc ) <nl> endif <nl> endif <nl> <nl> + # CC _ OPTS only applied to objects build for jnidispatch , not for libffi <nl> + # - Wno - unknown - warning - option <nl> + # = > Suppress warning for unknown warnings <nl> + # - Werror = > Treat warnings as errors <nl> + # - Wno - clobbered = > Silence GCC warning about clobbered automatic variables . <nl> + # The " longjmp " case only happens in protect . h in the logic <nl> + # that implements " protected " mode . In that case an exception <nl> + # is raised and the value of the potentially clobbered <nl> + # variables is ignored . <nl> + # <nl> + # Enable this only on GCC versions , that can work with it . It is assumed , that <nl> + # GCC version 4 . X is the lower bound . That version is problematic , as it <nl> + # does not support - Wno - unknown - warning - option <nl> + ifeq ( $ ( CC ) , gcc ) <nl> + GCC _ MAJOR _ VERSION = $ ( shell gcc - dumpversion | cut - f 1 - d ' . ' ) <nl> + ifneq ( $ ( GCC _ MAJOR _ VERSION ) , 4 ) <nl> + 	 LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable <nl> + endif <nl> + else <nl> + LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable <nl> + endif <nl> <nl> # Enable 64 - bit builds if the arch demands it <nl> ifeq ( $ ( CC ) , gcc )
NEAREST DIFF (one line): diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index cc4b62b . . 956d10b 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 849 , 7 + 849 , 7 @ @ public abstract class Structure { <nl> / * * Keep track of structure layout information . Alignment type , type <nl> mapper , and explicit field order will affect this information . <nl> * / <nl> - private class LayoutInfo { <nl> + private static class LayoutInfo { <nl> int size = CALCULATE _ SIZE ; <nl> int alignment = 1 ; <nl> Map fields = Collections . synchronizedMap ( new LinkedHashMap ( ) ) ; <nl> @ @ - 1546 , 7 + 1546 , 7 @ @ public abstract class Structure { <nl> } <nl> } <nl> <nl> - private class AutoAllocated extends Memory { <nl> + private static class AutoAllocated extends Memory { <nl> public AutoAllocated ( int size ) { <nl> super ( size ) ; <nl> / / Always clear new structure memory

TEST DIFF:
diff - - git a / native / Makefile b / native / Makefile 
 index a465660 . . 6f9ad25 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 84 , 16 + 84 , 6 @ @ JNISFX = $ ( LIBSFX ) 
 CC = gcc 
 LD = $ ( CC ) 
 LIBS = 
 - # CC _ OPTS only applied to objects build for jnidispatch , not for libffi 
 - # - Wno - unknown - warning - option 
 - # = > Suppress warning for unknown warnings 
 - # - Werror = > Treat warnings as errors 
 - # - Wno - clobbered = > Silence GCC warning about clobbered automatic variables . 
 - # The " longjmp " case only happens in protect . h in the logic 
 - # that implements " protected " mode . In that case an exception 
 - # is raised and the value of the potentially clobbered 
 - # variables is ignored . 
 - LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered 
 # Default to Sun recommendations for JNI compilation 
 COPT = - O2 - fno - omit - frame - pointer - fno - strict - aliasing 
 CASM = - S 
 @ @ - 130 , 31 + 120 , 37 @ @ ifeq ( $ ( ARCH ) , arm ) 
 PREFIX = arm - linux - androideabi - 
 COPT + = - mthumb - interwork - march = armv5te - mtune = xscale - msoft - float - fstack - protector 
 HOST = arm - linux - eabi 
 - else ifeq ( $ ( ARCH ) , armv7 ) 
 + else 
 + ifeq ( $ ( ARCH ) , armv7 ) 
 PREFIX = arm - linux - androideabi - 
 COPT + = - march = armv7 - a - mfloat - abi = softfp - mfpu = vfpv3 - d16 - Wl , - - fix - cortex - a8 
 HOST = arm - linux - eabi 
 AARCH = arm 
 - else ifeq ( $ ( ARCH ) , aarch64 ) 
 + else 
 + ifeq ( $ ( ARCH ) , aarch64 ) 
 PREFIX = aarch64 - linux - android - 
 HOST = aarch64 - linux - android 
 AARCH = arm64 
 ALIBDIR = / usr / lib64 
 - else ifeq ( $ ( ARCH ) , x86 ) 
 + else 
 + ifeq ( $ ( ARCH ) , x86 ) 
 PREFIX = i686 - linux - android - 
 COPT + = - march = i686 
 HOST = i686 - linux - android 
 - else ifeq ( $ ( ARCH ) , x86 - 64 ) 
 + else 
 + ifeq ( $ ( ARCH ) , x86 - 64 ) 
 PREFIX = x86 _ 64 - linux - android - 
 COPT + = - m64 
 HOST = x86 _ 64 - linux - android 
 AARCH = x86 _ 64 
 ALIBDIR = / usr / lib64 
 - else ifeq ( $ ( ARCH ) , mips ) 
 + else 
 + ifeq ( $ ( ARCH ) , mips ) 
 PREFIX = mipsel - linux - android - 
 HOST = mipsel - linux - android 
 COPT + = 
 - else ifeq ( $ ( ARCH ) , mips64 ) 
 + else 
 + ifeq ( $ ( ARCH ) , mips64 ) 
 PREFIX = mips64el - linux - android - 
 HOST = mips64el - linux - android 
 COPT + = 
 @ @ - 162 , 6 + 158 , 12 @ @ ALIBDIR = / usr / lib64 
 else 
 ERROR = $ ( error " Unsupported android architecture ' $ ( ARCH ) ' " ) 
 endif 
 + endif 
 + endif 
 + endif 
 + endif 
 + endif 
 + endif 
 NDK ? = / Developer / Applications / android - ndk - r10e 
 NDK _ PLATFORM ? = $ ( NDK ) / platforms / android - 21 
 SYSROOT = $ ( NDK _ PLATFORM ) / arch - $ ( AARCH ) 
 @ @ - 318 , 6 + 320 , 27 @ @ ifeq ( $ ( ARCH ) , ppc ) 
 endif 
 endif 
 
 + # CC _ OPTS only applied to objects build for jnidispatch , not for libffi 
 + # - Wno - unknown - warning - option 
 + # = > Suppress warning for unknown warnings 
 + # - Werror = > Treat warnings as errors 
 + # - Wno - clobbered = > Silence GCC warning about clobbered automatic variables . 
 + # The " longjmp " case only happens in protect . h in the logic 
 + # that implements " protected " mode . In that case an exception 
 + # is raised and the value of the potentially clobbered 
 + # variables is ignored . 
 + # 
 + # Enable this only on GCC versions , that can work with it . It is assumed , that 
 + # GCC version 4 . X is the lower bound . That version is problematic , as it 
 + # does not support - Wno - unknown - warning - option 
 + ifeq ( $ ( CC ) , gcc ) 
 + GCC _ MAJOR _ VERSION = $ ( shell gcc - dumpversion | cut - f 1 - d ' . ' ) 
 + ifneq ( $ ( GCC _ MAJOR _ VERSION ) , 4 ) 
 + 	 LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable 
 + endif 
 + else 
 + LOC _ CC _ OPTS = - Wno - unknown - warning - option - Werror - Wno - clobbered - Wno - unused - variable 
 + endif 
 
 # Enable 64 - bit builds if the arch demands it 
 ifeq ( $ ( CC ) , gcc )

NEAREST DIFF:
diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index cc4b62b . . 956d10b 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 849 , 7 + 849 , 7 @ @ public abstract class Structure { 
 / * * Keep track of structure layout information . Alignment type , type 
 mapper , and explicit field order will affect this information . 
 * / 
 - private class LayoutInfo { 
 + private static class LayoutInfo { 
 int size = CALCULATE _ SIZE ; 
 int alignment = 1 ; 
 Map fields = Collections . synchronizedMap ( new LinkedHashMap ( ) ) ; 
 @ @ - 1546 , 7 + 1546 , 7 @ @ public abstract class Structure { 
 } 
 } 
 
 - private class AutoAllocated extends Memory { 
 + private static class AutoAllocated extends Memory { 
 public AutoAllocated ( int size ) { 
 super ( size ) ; 
 / / Always clear new structure memory
