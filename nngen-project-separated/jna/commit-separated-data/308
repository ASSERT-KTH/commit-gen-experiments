BLEU SCORE: 0.007866467405572666

TEST MSG: Fix SUCCEEDED and FAILED instead of trying to fix the bug where it ' s visible . See MSDN for FAILED and SUCCEEDED definitions
GENERATED MSG: added some test

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index fae7c2d . . 9357f52 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 40 , 6 + 40 , 7 @ @ Bug Fixes <nl> * [ # 382 ] ( https : / / github . com / twall / jna / pull / 382 ) : Fixed memory allocation in ` com . sun . jna . platform . win32 . WTypes . LPWSTR ` and ` LPSTR ` constructors - [ @ junak - michal ] ( https : / / github . com / junak - michal ) . <nl> * Fix publish doc links - [ @ bhamail ] ( https : / / github . com / bhamail ) . <nl> * [ # 388 ] ( https : / / github . com / twall / jna / issues / 388 ) : Ensure native library always opened with provided flags - [ @ zolyfarkas ] ( https : / / github . com / zolyfarkas ) . <nl> + * [ # 403 ] ( https : / / github . com / twall / jna / pull / 403 ) : Make com . sun . jna . platform . win32 . COM . COMUtils . SUCCEEDED and FAILED conform to MSDN specification for said macros - [ @ lwahonen ] ( https : / / github . com / lwahonen ) . <nl> <nl> Release 4 . 1 <nl> = = = = = = = = = = = <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> index eddbbd4 . . 9bdfcac 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> @ @ - 73 , 8 + 73 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> int dwClsContext ) { <nl> / / Initialize COM for this thread . . . <nl> HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( null , Ole32 . COINIT _ APARTMENTTHREADED ) ; <nl> - if ( hr . intValue ( ) = = 1 ) / / Already initialized , no problem <nl> - hr = new HRESULT ( 0 ) ; <nl> + <nl> if ( COMUtils . FAILED ( hr ) ) { <nl> Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> throw new COMException ( " CoInitialize ( ) failed ! " ) ; <nl> @ @ - 108 , 8 + 107 , 6 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> int dwClsContext ) throws COMException { <nl> / / Initialize COM for this thread . . . <nl> HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( null , Ole32 . COINIT _ APARTMENTTHREADED ) ; <nl> - if ( hr . intValue ( ) = = 1 ) / / Already initialized , no problem <nl> - hr = new HRESULT ( 0 ) ; <nl> <nl> if ( COMUtils . FAILED ( hr ) ) { <nl> this . release ( ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> index b362d0c . . d2e15e4 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> @ @ - 38 , 6 + 38 , 8 @ @ public abstract class COMUtils { <nl> <nl> / * * The Constant CO _ E _ NOTINITIALIZED . * / <nl> public static final int S _ OK = 0 ; <nl> + public static final int S _ FALSE = 1 ; <nl> + public static final int E _ UNEXPECTED = 0x8000FFFF ; <nl> <nl> / * * <nl> * Succeeded . <nl> @ @ - 58 , 10 + 60 , 7 @ @ public abstract class COMUtils { <nl> * @ return true , if successful <nl> * / <nl> public static boolean SUCCEEDED ( int hr ) { <nl> - if ( hr = = S _ OK ) <nl> - return true ; <nl> - else <nl> - return false ; <nl> + return hr > = 0 ; <nl> } <nl> <nl> / * * <nl> @ @ - 83 , 7 + 82 , 7 @ @ public abstract class COMUtils { <nl> * @ return true , if successful <nl> * / <nl> public static boolean FAILED ( int hr ) { <nl> - return ( hr ! = S _ OK ) ; <nl> + return hr < 0 ; <nl> } <nl> <nl> / * * <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java <nl> new file mode 100644 <nl> index 0000000 . . 56aac85 <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package com . sun . jna . platform . win32 . COM ; <nl> + <nl> + import junit . framework . TestCase ; <nl> + <nl> + public class COMUtilsTest extends TestCase { <nl> + <nl> + public void testSUCCEEDED ( ) throws Exception { <nl> + assertTrue ( COMUtils . SUCCEEDED ( COMUtils . S _ OK ) ) ; <nl> + assertTrue ( COMUtils . SUCCEEDED ( COMUtils . S _ FALSE ) ) ; <nl> + assertFalse ( COMUtils . SUCCEEDED ( COMUtils . E _ UNEXPECTED ) ) ; <nl> + } <nl> + <nl> + public void testFAILED ( ) throws Exception { <nl> + assertFalse ( COMUtils . FAILED ( COMUtils . S _ OK ) ) ; <nl> + assertFalse ( COMUtils . FAILED ( COMUtils . S _ FALSE ) ) ; <nl> + assertTrue ( COMUtils . FAILED ( COMUtils . E _ UNEXPECTED ) ) ; <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index fae7c2d . . 9357f52 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 40 , 6 + 40 , 7 @ @ Bug Fixes 
 * [ # 382 ] ( https : / / github . com / twall / jna / pull / 382 ) : Fixed memory allocation in ` com . sun . jna . platform . win32 . WTypes . LPWSTR ` and ` LPSTR ` constructors - [ @ junak - michal ] ( https : / / github . com / junak - michal ) . 
 * Fix publish doc links - [ @ bhamail ] ( https : / / github . com / bhamail ) . 
 * [ # 388 ] ( https : / / github . com / twall / jna / issues / 388 ) : Ensure native library always opened with provided flags - [ @ zolyfarkas ] ( https : / / github . com / zolyfarkas ) . 
 + * [ # 403 ] ( https : / / github . com / twall / jna / pull / 403 ) : Make com . sun . jna . platform . win32 . COM . COMUtils . SUCCEEDED and FAILED conform to MSDN specification for said macros - [ @ lwahonen ] ( https : / / github . com / lwahonen ) . 
 
 Release 4 . 1 
 = = = = = = = = = = = 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 index eddbbd4 . . 9bdfcac 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 @ @ - 73 , 8 + 73 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { 
 int dwClsContext ) { 
 / / Initialize COM for this thread . . . 
 HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( null , Ole32 . COINIT _ APARTMENTTHREADED ) ; 
 - if ( hr . intValue ( ) = = 1 ) / / Already initialized , no problem 
 - hr = new HRESULT ( 0 ) ; 
 + 
 if ( COMUtils . FAILED ( hr ) ) { 
 Ole32 . INSTANCE . CoUninitialize ( ) ; 
 throw new COMException ( " CoInitialize ( ) failed ! " ) ; 
 @ @ - 108 , 8 + 107 , 6 @ @ public class COMBindingBaseObject extends COMInvoker { 
 int dwClsContext ) throws COMException { 
 / / Initialize COM for this thread . . . 
 HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( null , Ole32 . COINIT _ APARTMENTTHREADED ) ; 
 - if ( hr . intValue ( ) = = 1 ) / / Already initialized , no problem 
 - hr = new HRESULT ( 0 ) ; 
 
 if ( COMUtils . FAILED ( hr ) ) { 
 this . release ( ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 index b362d0c . . d2e15e4 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 @ @ - 38 , 6 + 38 , 8 @ @ public abstract class COMUtils { 
 
 / * * The Constant CO _ E _ NOTINITIALIZED . * / 
 public static final int S _ OK = 0 ; 
 + public static final int S _ FALSE = 1 ; 
 + public static final int E _ UNEXPECTED = 0x8000FFFF ; 
 
 / * * 
 * Succeeded . 
 @ @ - 58 , 10 + 60 , 7 @ @ public abstract class COMUtils { 
 * @ return true , if successful 
 * / 
 public static boolean SUCCEEDED ( int hr ) { 
 - if ( hr = = S _ OK ) 
 - return true ; 
 - else 
 - return false ; 
 + return hr > = 0 ; 
 } 
 
 / * * 
 @ @ - 83 , 7 + 82 , 7 @ @ public abstract class COMUtils { 
 * @ return true , if successful 
 * / 
 public static boolean FAILED ( int hr ) { 
 - return ( hr ! = S _ OK ) ; 
 + return hr < 0 ; 
 } 
 
 / * * 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java 
 new file mode 100644 
 index 0000000 . . 56aac85 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMUtilsTest . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package com . sun . jna . platform . win32 . COM ; 
 + 
 + import junit . framework . TestCase ; 
 + 
 + public class COMUtilsTest extends TestCase { 
 + 
 + public void testSUCCEEDED ( ) throws Exception { 
 + assertTrue ( COMUtils . SUCCEEDED ( COMUtils . S _ OK ) ) ; 
 + assertTrue ( COMUtils . SUCCEEDED ( COMUtils . S _ FALSE ) ) ; 
 + assertFalse ( COMUtils . SUCCEEDED ( COMUtils . E _ UNEXPECTED ) ) ; 
 + } 
 + 
 + public void testFAILED ( ) throws Exception { 
 + assertFalse ( COMUtils . FAILED ( COMUtils . S _ OK ) ) ; 
 + assertFalse ( COMUtils . FAILED ( COMUtils . S _ FALSE ) ) ; 
 + assertTrue ( COMUtils . FAILED ( COMUtils . E _ UNEXPECTED ) ) ; 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
ELIMINATEDSENTENCE
