BLEU SCORE: 0.007530946615469337

TEST MSG: COM Call through the ` com . sun . jna . platform . win32 . COM . util . Factory ` loose stack trace information
GENERATED MSG: Add @ ComInterface anntation to IConnectionPoint

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java <nl> index f65da63 . . f2c1c9a 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java <nl> @ @ - 177 , 10 + 177 , 12 @ @ public class Factory extends ObjectFactory { <nl> } catch ( ExecutionException ex ) { <nl> Throwable cause = ex . getCause ( ) ; <nl> if ( cause instanceof RuntimeException ) { <nl> + appendStacktrace ( ex , cause ) ; <nl> throw ( RuntimeException ) cause ; <nl> } else if ( cause instanceof InvocationTargetException ) { <nl> cause = ( ( InvocationTargetException ) cause ) . getTargetException ( ) ; <nl> if ( cause instanceof RuntimeException ) { <nl> + appendStacktrace ( ex , cause ) ; <nl> throw ( RuntimeException ) cause ; <nl> } <nl> } <nl> @ @ - 188 , 6 + 190 , 19 @ @ public class Factory extends ObjectFactory { <nl> } <nl> } <nl> <nl> + / * * <nl> + * Append the stack trace available via caughtException to the stack trace <nl> + * of toBeThrown . The combined stack trace is reassigned to toBeThrown <nl> + * / <nl> + private static void appendStacktrace ( Exception caughtException , Throwable toBeThrown ) { <nl> + StackTraceElement [ ] upperTrace = caughtException . getStackTrace ( ) ; <nl> + StackTraceElement [ ] lowerTrace = toBeThrown . getStackTrace ( ) ; <nl> + StackTraceElement [ ] trace = new StackTraceElement [ upperTrace . length + lowerTrace . length ] ; <nl> + System . arraycopy ( upperTrace , 0 , trace , lowerTrace . length , upperTrace . length ) ; <nl> + System . arraycopy ( lowerTrace , 0 , trace , 0 , lowerTrace . length ) ; <nl> + toBeThrown . setStackTrace ( trace ) ; <nl> + } <nl> + <nl> public ComThread getComThread ( ) { <nl> return comThread ; <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java <nl> index 4c66f4d . . d543bc7 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java <nl> @ @ - 154 , 8 + 154 , 17 @ @ public class ProxyObjectFactory _ Test { <nl> assertNotNull ( " fetchObject on a non - running Object must raise an exception " , exceptionRaised ) ; <nl> assertEquals ( " Unexpected error code " , exceptionRaised . getHresult ( ) . intValue ( ) , WinError . MK _ E _ UNAVAILABLE ) ; <nl> assertTrue ( " Error code not matched " , exceptionRaised . matchesErrorCode ( WinError . MK _ E _ UNAVAILABLE ) ) ; <nl> + boolean callingMethodPartOfStackTrace = false ; <nl> + for ( StackTraceElement ste : exceptionRaised . getStackTrace ( ) ) { <nl> + if ( " testFetchNotExistingObject " . equals ( ste . getMethodName ( ) ) <nl> + & & getClass ( ) . getName ( ) . equals ( ste . getClassName ( ) ) ) { <nl> + callingMethodPartOfStackTrace = true ; <nl> + break ; <nl> + } <nl> + } <nl> + assertTrue ( " The calling method must be part of the reported stack trace " , callingMethodPartOfStackTrace ) ; <nl> } <nl> - <nl> + <nl> 	 @ Test <nl> 	 public void equals ( ) { <nl> 	 	 MsWordApp comObj1 = this . factory . createObject ( MsWordApp . class ) ; <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java <nl> index 3bb5106 . . f1753a0 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java <nl> @ @ - 158 , 6 + 158 , 15 @ @ public class ProxyObjectObjectFactory _ Test { <nl> assertNotNull ( " fetchObject on a non - running Object must raise an exception " , exceptionRaised ) ; <nl> assertEquals ( " Unexpected error code " , exceptionRaised . getHresult ( ) . intValue ( ) , WinError . MK _ E _ UNAVAILABLE ) ; <nl> assertTrue ( " Error code not matched " , exceptionRaised . matchesErrorCode ( WinError . MK _ E _ UNAVAILABLE ) ) ; <nl> + boolean callingMethodPartOfStackTrace = false ; <nl> + for ( StackTraceElement ste : exceptionRaised . getStackTrace ( ) ) { <nl> + if ( " testFetchNotExistingObject " . equals ( ste . getMethodName ( ) ) <nl> + & & getClass ( ) . getName ( ) . equals ( ste . getClassName ( ) ) ) { <nl> + callingMethodPartOfStackTrace = true ; <nl> + break ; <nl> + } <nl> + } <nl> + assertTrue ( " The calling method must be part of the reported stack trace " , callingMethodPartOfStackTrace ) ; <nl> } <nl> <nl> 	 @ Test
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java 
 index f65da63 . . f2c1c9a 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Factory . java 
 @ @ - 177 , 10 + 177 , 12 @ @ public class Factory extends ObjectFactory { 
 } catch ( ExecutionException ex ) { 
 Throwable cause = ex . getCause ( ) ; 
 if ( cause instanceof RuntimeException ) { 
 + appendStacktrace ( ex , cause ) ; 
 throw ( RuntimeException ) cause ; 
 } else if ( cause instanceof InvocationTargetException ) { 
 cause = ( ( InvocationTargetException ) cause ) . getTargetException ( ) ; 
 if ( cause instanceof RuntimeException ) { 
 + appendStacktrace ( ex , cause ) ; 
 throw ( RuntimeException ) cause ; 
 } 
 } 
 @ @ - 188 , 6 + 190 , 19 @ @ public class Factory extends ObjectFactory { 
 } 
 } 
 
 + / * * 
 + * Append the stack trace available via caughtException to the stack trace 
 + * of toBeThrown . The combined stack trace is reassigned to toBeThrown 
 + * / 
 + private static void appendStacktrace ( Exception caughtException , Throwable toBeThrown ) { 
 + StackTraceElement [ ] upperTrace = caughtException . getStackTrace ( ) ; 
 + StackTraceElement [ ] lowerTrace = toBeThrown . getStackTrace ( ) ; 
 + StackTraceElement [ ] trace = new StackTraceElement [ upperTrace . length + lowerTrace . length ] ; 
 + System . arraycopy ( upperTrace , 0 , trace , lowerTrace . length , upperTrace . length ) ; 
 + System . arraycopy ( lowerTrace , 0 , trace , 0 , lowerTrace . length ) ; 
 + toBeThrown . setStackTrace ( trace ) ; 
 + } 
 + 
 public ComThread getComThread ( ) { 
 return comThread ; 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java 
 index 4c66f4d . . d543bc7 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java 
 @ @ - 154 , 8 + 154 , 17 @ @ public class ProxyObjectFactory _ Test { 
 assertNotNull ( " fetchObject on a non - running Object must raise an exception " , exceptionRaised ) ; 
 assertEquals ( " Unexpected error code " , exceptionRaised . getHresult ( ) . intValue ( ) , WinError . MK _ E _ UNAVAILABLE ) ; 
 assertTrue ( " Error code not matched " , exceptionRaised . matchesErrorCode ( WinError . MK _ E _ UNAVAILABLE ) ) ; 
 + boolean callingMethodPartOfStackTrace = false ; 
 + for ( StackTraceElement ste : exceptionRaised . getStackTrace ( ) ) { 
 + if ( " testFetchNotExistingObject " . equals ( ste . getMethodName ( ) ) 
 + & & getClass ( ) . getName ( ) . equals ( ste . getClassName ( ) ) ) { 
 + callingMethodPartOfStackTrace = true ; 
 + break ; 
 + } 
 + } 
 + assertTrue ( " The calling method must be part of the reported stack trace " , callingMethodPartOfStackTrace ) ; 
 } 
 - 
 + 
 	 @ Test 
 	 public void equals ( ) { 
 	 	 MsWordApp comObj1 = this . factory . createObject ( MsWordApp . class ) ; 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java 
 index 3bb5106 . . f1753a0 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java 
 @ @ - 158 , 6 + 158 , 15 @ @ public class ProxyObjectObjectFactory _ Test { 
 assertNotNull ( " fetchObject on a non - running Object must raise an exception " , exceptionRaised ) ; 
 assertEquals ( " Unexpected error code " , exceptionRaised . getHresult ( ) . intValue ( ) , WinError . MK _ E _ UNAVAILABLE ) ; 
 assertTrue ( " Error code not matched " , exceptionRaised . matchesErrorCode ( WinError . MK _ E _ UNAVAILABLE ) ) ; 
 + boolean callingMethodPartOfStackTrace = false ; 
 + for ( StackTraceElement ste : exceptionRaised . getStackTrace ( ) ) { 
 + if ( " testFetchNotExistingObject " . equals ( ste . getMethodName ( ) ) 
 + & & getClass ( ) . getName ( ) . equals ( ste . getClassName ( ) ) ) { 
 + callingMethodPartOfStackTrace = true ; 
 + break ; 
 + } 
 + } 
 + assertTrue ( " The calling method must be part of the reported stack trace " , callingMethodPartOfStackTrace ) ; 
 } 
 
 	 @ Test

NEAREST DIFF:
ELIMINATEDSENTENCE
