BLEU SCORE: 1.0

TEST MSG: * fix class name casing
GENERATED MSG: * fix class name casing

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java b / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java <nl> new file mode 100644 <nl> index 0000000 . . da1db0e <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . mac ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . nio . charset . Charset ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + import com . sun . jna . Memory ; <nl> + import com . sun . jna . Pointer ; <nl> + <nl> + public class XAttrUtil { <nl> + <nl> + 	 public static List < String > listXAttr ( String path ) { <nl> + 	 	 / / get required buffer size <nl> + 	 	 long bufferLength = XAttr . INSTANCE . listxattr ( path , Pointer . NULL , 0 , 0 ) ; <nl> + <nl> + 	 	 if ( bufferLength < 0 ) <nl> + 	 	 	 return null ; <nl> + <nl> + 	 	 if ( bufferLength = = 0 ) <nl> + 	 	 	 return new ArrayList < String > ( 0 ) ; <nl> + <nl> + 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; <nl> + 	 	 long valueLength = XAttr . INSTANCE . listxattr ( path , valueBuffer , bufferLength , 0 ) ; <nl> + <nl> + 	 	 if ( valueLength < 0 ) <nl> + 	 	 	 return null ; <nl> + <nl> + 	 	 return decodeStringSequence ( valueBuffer . getByteBuffer ( 0 , valueLength ) ) ; <nl> + 	 } <nl> + <nl> + 	 public static String getXAttr ( String path , String name ) { <nl> + 	 	 / / get required buffer size <nl> + 	 	 long bufferLength = XAttr . INSTANCE . getxattr ( path , name , Pointer . NULL , 0 , 0 , 0 ) ; <nl> + <nl> + 	 	 if ( bufferLength < 0 ) <nl> + 	 	 	 return null ; <nl> + <nl> + 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; <nl> + 	 	 long valueLength = XAttr . INSTANCE . getxattr ( path , name , valueBuffer , bufferLength , 0 , 0 ) ; <nl> + <nl> + 	 	 if ( valueLength < 0 ) <nl> + 	 	 	 return null ; <nl> + <nl> + 	 	 return decodeString ( valueBuffer . getByteBuffer ( 0 , valueLength - 1 ) ) ; <nl> + 	 } <nl> + <nl> + 	 public static int setXAttr ( String path , String name , String value ) { <nl> + 	 	 Memory valueBuffer = encodeString ( value ) ; <nl> + 	 	 return XAttr . INSTANCE . setxattr ( path , name , valueBuffer , valueBuffer . size ( ) , 0 , 0 ) ; <nl> + 	 } <nl> + <nl> + 	 public static int removeXAttr ( String path , String name ) { <nl> + 	 	 return XAttr . INSTANCE . removexattr ( path , name , 0 ) ; <nl> + 	 } <nl> + <nl> + 	 protected static Memory encodeString ( String s ) { <nl> + 	 	 / / create NULL - terminated UTF - 8 String <nl> + 	 	 byte [ ] bb = s . getBytes ( Charset . forName ( " UTF - 8 " ) ) ; <nl> + 	 	 Memory valueBuffer = new Memory ( bb . length + 1 ) ; <nl> + 	 	 valueBuffer . write ( 0 , bb , 0 , bb . length ) ; <nl> + 	 	 valueBuffer . setByte ( valueBuffer . size ( ) - 1 , ( byte ) 0 ) ; <nl> + 	 	 return valueBuffer ; <nl> + 	 } <nl> + <nl> + 	 protected static String decodeString ( ByteBuffer bb ) { <nl> + 	 	 return Charset . forName ( " UTF - 8 " ) . decode ( bb ) . toString ( ) ; <nl> + 	 } <nl> + <nl> + 	 protected static List < String > decodeStringSequence ( ByteBuffer bb ) { <nl> + 	 	 List < String > names = new ArrayList < String > ( ) ; <nl> + <nl> + 	 	 bb . mark ( ) ; / / first key starts from here <nl> + 	 	 while ( bb . hasRemaining ( ) ) { <nl> + 	 	 	 if ( bb . get ( ) = = 0 ) { <nl> + 	 	 	 	 ByteBuffer nameBuffer = ( ByteBuffer ) bb . duplicate ( ) . limit ( bb . position ( ) - 1 ) . reset ( ) ; <nl> + 	 	 	 	 if ( nameBuffer . hasRemaining ( ) ) { <nl> + 	 	 	 	 	 names . add ( decodeString ( nameBuffer ) ) ; <nl> + 	 	 	 	 } <nl> + 	 	 	 	 bb . mark ( ) ; / / next key starts from here <nl> + 	 	 	 } <nl> + 	 	 } <nl> + <nl> + 	 	 return names ; <nl> + 	 } <nl> + <nl> + } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java <nl> new file mode 100644 <nl> index 0000000 . . 8902fe6 <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java <nl> @ @ - 0 , 0 + 1 , 117 @ @ <nl> + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . mac ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> + <nl> + import junit . framework . TestCase ; <nl> + <nl> + public class XAttrUtilTest extends TestCase { <nl> + <nl> + 	 String testPath ; <nl> + <nl> + 	 protected void setUp ( ) throws Exception { <nl> + 	 	 testPath = File . createTempFile ( " xattr - test " , " . txt " ) . getAbsolutePath ( ) ; <nl> + 	 	 assertTrue ( new File ( testPath ) . exists ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 protected void tearDown ( ) throws Exception { <nl> + 	 	 new File ( testPath ) . delete ( ) ; <nl> + 	 	 assertFalse ( new File ( testPath ) . exists ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public void testListXAttr ( ) { <nl> + 	 	 / / no xattr initially <nl> + 	 	 List < String > keys = XAttrUtil . listXAttr ( testPath ) ; <nl> + 	 	 assertEquals ( 0 , keys . size ( ) ) ; <nl> + <nl> + 	 	 / / set multiple xattr <nl> + 	 	 String [ ] names = new String [ ] { " Java " , " Native " , " Access " } ; <nl> + 	 	 for ( int i = 0 ; i < names . length ; i + + ) { <nl> + 	 	 	 / / set xattr <nl> + 	 	 	 XAttrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ; <nl> + <nl> + 	 	 	 / / check if new xattr is listed <nl> + 	 	 	 keys = XAttrUtil . listXAttr ( testPath ) ; <nl> + 	 	 	 assertEquals ( i + 1 , keys . size ( ) ) ; <nl> + 	 	 	 assertTrue ( keys . contains ( names [ i ] ) ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public void testGetXAttr ( ) { <nl> + 	 	 String value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + 	 	 assertNull ( value ) ; <nl> + <nl> + 	 	 XAttrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; <nl> + 	 	 value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + <nl> + 	 	 assertEquals ( Arrays . toString ( " Java Native Access " . getBytes ( ) ) , Arrays . toString ( value . getBytes ( ) ) ) ; <nl> + 	 } <nl> + <nl> + 	 public void testSetXAttr ( ) { <nl> + 	 	 String value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + 	 	 assertNull ( value ) ; <nl> + <nl> + 	 	 XAttrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; <nl> + 	 	 value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + 	 	 assertEquals ( " Java Native Access " , value ) ; <nl> + <nl> + 	 	 XAttrUtil . setXAttr ( testPath , " JNA " , " is nice " ) ; <nl> + 	 	 value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; <nl> + 	 	 assertEquals ( " is nice " , value ) ; <nl> + 	 } <nl> + <nl> + 	 public void testRemoveXAttr ( ) { <nl> + 	 	 XAttrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; <nl> + 	 	 assertEquals ( " [ JNA ] " , XAttrUtil . listXAttr ( testPath ) . toString ( ) ) ; <nl> + <nl> + 	 	 / / remove xattr <nl> + 	 	 XAttrUtil . removeXAttr ( testPath , " JNA " ) ; <nl> + <nl> + 	 	 assertEquals ( " [ ] " , XAttrUtil . listXAttr ( testPath ) . toString ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public void testUnicode ( ) { <nl> + 	 	 String [ ] names = new String [ ] { " 中 文 " , " に ほ ん ご " , " Ö sterreichisch " , " Fran ç aise " , " Portugu ê s " } ; <nl> + 	 	 for ( int i = 0 ; i < names . length ; i + + ) { <nl> + 	 	 	 / / set xattr <nl> + 	 	 	 XAttrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ; <nl> + <nl> + 	 	 	 / / check if new xattr is listed <nl> + 	 	 	 List < String > keys = XAttrUtil . listXAttr ( testPath ) ; <nl> + 	 	 	 assertEquals ( i + 1 , keys . size ( ) ) ; <nl> + 	 	 	 assertTrue ( keys . contains ( names [ i ] ) ) ; <nl> + <nl> + 	 	 	 String value = XAttrUtil . getXAttr ( testPath , names [ i ] ) ; <nl> + 	 	 	 assertEquals ( names [ i ] , value ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public void testLargeData ( ) { <nl> + 	 	 StringBuilder name = new StringBuilder ( ) ; <nl> + 	 	 while ( name . length ( ) < XAttr . XATTR _ MAXNAMELEN ) { <nl> + 	 	 	 name . append ( ' X ' ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 StringBuilder data = new StringBuilder ( ) ; <nl> + 	 	 while ( data . length ( ) < 4 * 1024 * 1024 ) { <nl> + 	 	 	 data . append ( ' X ' ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 XAttrUtil . setXAttr ( testPath , name . toString ( ) , data . toString ( ) ) ; <nl> + 	 	 String value = XAttrUtil . getXAttr ( testPath , name . toString ( ) ) ; <nl> + 	 	 assertEquals ( data . toString ( ) , value . toString ( ) ) ; <nl> + 	 } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java b / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java 
 new file mode 100644 
 index 0000000 . . da1db0e 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / mac / XAttrUtil . java 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . mac ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . nio . charset . Charset ; 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + import com . sun . jna . Memory ; 
 + import com . sun . jna . Pointer ; 
 + 
 + public class XAttrUtil { 
 + 
 + 	 public static List < String > listXAttr ( String path ) { 
 + 	 	 / / get required buffer size 
 + 	 	 long bufferLength = XAttr . INSTANCE . listxattr ( path , Pointer . NULL , 0 , 0 ) ; 
 + 
 + 	 	 if ( bufferLength < 0 ) 
 + 	 	 	 return null ; 
 + 
 + 	 	 if ( bufferLength = = 0 ) 
 + 	 	 	 return new ArrayList < String > ( 0 ) ; 
 + 
 + 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; 
 + 	 	 long valueLength = XAttr . INSTANCE . listxattr ( path , valueBuffer , bufferLength , 0 ) ; 
 + 
 + 	 	 if ( valueLength < 0 ) 
 + 	 	 	 return null ; 
 + 
 + 	 	 return decodeStringSequence ( valueBuffer . getByteBuffer ( 0 , valueLength ) ) ; 
 + 	 } 
 + 
 + 	 public static String getXAttr ( String path , String name ) { 
 + 	 	 / / get required buffer size 
 + 	 	 long bufferLength = XAttr . INSTANCE . getxattr ( path , name , Pointer . NULL , 0 , 0 , 0 ) ; 
 + 
 + 	 	 if ( bufferLength < 0 ) 
 + 	 	 	 return null ; 
 + 
 + 	 	 Memory valueBuffer = new Memory ( bufferLength ) ; 
 + 	 	 long valueLength = XAttr . INSTANCE . getxattr ( path , name , valueBuffer , bufferLength , 0 , 0 ) ; 
 + 
 + 	 	 if ( valueLength < 0 ) 
 + 	 	 	 return null ; 
 + 
 + 	 	 return decodeString ( valueBuffer . getByteBuffer ( 0 , valueLength - 1 ) ) ; 
 + 	 } 
 + 
 + 	 public static int setXAttr ( String path , String name , String value ) { 
 + 	 	 Memory valueBuffer = encodeString ( value ) ; 
 + 	 	 return XAttr . INSTANCE . setxattr ( path , name , valueBuffer , valueBuffer . size ( ) , 0 , 0 ) ; 
 + 	 } 
 + 
 + 	 public static int removeXAttr ( String path , String name ) { 
 + 	 	 return XAttr . INSTANCE . removexattr ( path , name , 0 ) ; 
 + 	 } 
 + 
 + 	 protected static Memory encodeString ( String s ) { 
 + 	 	 / / create NULL - terminated UTF - 8 String 
 + 	 	 byte [ ] bb = s . getBytes ( Charset . forName ( " UTF - 8 " ) ) ; 
 + 	 	 Memory valueBuffer = new Memory ( bb . length + 1 ) ; 
 + 	 	 valueBuffer . write ( 0 , bb , 0 , bb . length ) ; 
 + 	 	 valueBuffer . setByte ( valueBuffer . size ( ) - 1 , ( byte ) 0 ) ; 
 + 	 	 return valueBuffer ; 
 + 	 } 
 + 
 + 	 protected static String decodeString ( ByteBuffer bb ) { 
 + 	 	 return Charset . forName ( " UTF - 8 " ) . decode ( bb ) . toString ( ) ; 
 + 	 } 
 + 
 + 	 protected static List < String > decodeStringSequence ( ByteBuffer bb ) { 
 + 	 	 List < String > names = new ArrayList < String > ( ) ; 
 + 
 + 	 	 bb . mark ( ) ; / / first key starts from here 
 + 	 	 while ( bb . hasRemaining ( ) ) { 
 + 	 	 	 if ( bb . get ( ) = = 0 ) { 
 + 	 	 	 	 ByteBuffer nameBuffer = ( ByteBuffer ) bb . duplicate ( ) . limit ( bb . position ( ) - 1 ) . reset ( ) ; 
 + 	 	 	 	 if ( nameBuffer . hasRemaining ( ) ) { 
 + 	 	 	 	 	 names . add ( decodeString ( nameBuffer ) ) ; 
 + 	 	 	 	 } 
 + 	 	 	 	 bb . mark ( ) ; / / next key starts from here 
 + 	 	 	 } 
 + 	 	 } 
 + 
 + 	 	 return names ; 
 + 	 } 
 + 
 + } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java 
 new file mode 100644 
 index 0000000 . . 8902fe6 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / mac / XAttrUtilTest . java 
 @ @ - 0 , 0 + 1 , 117 @ @ 
 + / * Copyright ( c ) 2014 Reinhard Pointner , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . mac ; 
 + 
 + import java . io . File ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 + 
 + import junit . framework . TestCase ; 
 + 
 + public class XAttrUtilTest extends TestCase { 
 + 
 + 	 String testPath ; 
 + 
 + 	 protected void setUp ( ) throws Exception { 
 + 	 	 testPath = File . createTempFile ( " xattr - test " , " . txt " ) . getAbsolutePath ( ) ; 
 + 	 	 assertTrue ( new File ( testPath ) . exists ( ) ) ; 
 + 	 } 
 + 
 + 	 protected void tearDown ( ) throws Exception { 
 + 	 	 new File ( testPath ) . delete ( ) ; 
 + 	 	 assertFalse ( new File ( testPath ) . exists ( ) ) ; 
 + 	 } 
 + 
 + 	 public void testListXAttr ( ) { 
 + 	 	 / / no xattr initially 
 + 	 	 List < String > keys = XAttrUtil . listXAttr ( testPath ) ; 
 + 	 	 assertEquals ( 0 , keys . size ( ) ) ; 
 + 
 + 	 	 / / set multiple xattr 
 + 	 	 String [ ] names = new String [ ] { " Java " , " Native " , " Access " } ; 
 + 	 	 for ( int i = 0 ; i < names . length ; i + + ) { 
 + 	 	 	 / / set xattr 
 + 	 	 	 XAttrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ; 
 + 
 + 	 	 	 / / check if new xattr is listed 
 + 	 	 	 keys = XAttrUtil . listXAttr ( testPath ) ; 
 + 	 	 	 assertEquals ( i + 1 , keys . size ( ) ) ; 
 + 	 	 	 assertTrue ( keys . contains ( names [ i ] ) ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public void testGetXAttr ( ) { 
 + 	 	 String value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 	 	 assertNull ( value ) ; 
 + 
 + 	 	 XAttrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; 
 + 	 	 value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 
 + 	 	 assertEquals ( Arrays . toString ( " Java Native Access " . getBytes ( ) ) , Arrays . toString ( value . getBytes ( ) ) ) ; 
 + 	 } 
 + 
 + 	 public void testSetXAttr ( ) { 
 + 	 	 String value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 	 	 assertNull ( value ) ; 
 + 
 + 	 	 XAttrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; 
 + 	 	 value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 	 	 assertEquals ( " Java Native Access " , value ) ; 
 + 
 + 	 	 XAttrUtil . setXAttr ( testPath , " JNA " , " is nice " ) ; 
 + 	 	 value = XAttrUtil . getXAttr ( testPath , " JNA " ) ; 
 + 	 	 assertEquals ( " is nice " , value ) ; 
 + 	 } 
 + 
 + 	 public void testRemoveXAttr ( ) { 
 + 	 	 XAttrUtil . setXAttr ( testPath , " JNA " , " Java Native Access " ) ; 
 + 	 	 assertEquals ( " [ JNA ] " , XAttrUtil . listXAttr ( testPath ) . toString ( ) ) ; 
 + 
 + 	 	 / / remove xattr 
 + 	 	 XAttrUtil . removeXAttr ( testPath , " JNA " ) ; 
 + 
 + 	 	 assertEquals ( " [ ] " , XAttrUtil . listXAttr ( testPath ) . toString ( ) ) ; 
 + 	 } 
 + 
 + 	 public void testUnicode ( ) { 
 + 	 	 String [ ] names = new String [ ] { " 中 文 " , " に ほ ん ご " , " Ö sterreichisch " , " Fran ç aise " , " Portugu ê s " } ; 
 + 	 	 for ( int i = 0 ; i < names . length ; i + + ) { 
 + 	 	 	 / / set xattr 
 + 	 	 	 XAttrUtil . setXAttr ( testPath , names [ i ] , names [ i ] ) ; 
 + 
 + 	 	 	 / / check if new xattr is listed 
 + 	 	 	 List < String > keys = XAttrUtil . listXAttr ( testPath ) ; 
 + 	 	 	 assertEquals ( i + 1 , keys . size ( ) ) ; 
 + 	 	 	 assertTrue ( keys . contains ( names [ i ] ) ) ; 
 + 
 + 	 	 	 String value = XAttrUtil . getXAttr ( testPath , names [ i ] ) ; 
 + 	 	 	 assertEquals ( names [ i ] , value ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public void testLargeData ( ) { 
 + 	 	 StringBuilder name = new StringBuilder ( ) ; 
 + 	 	 while ( name . length ( ) < XAttr . XATTR _ MAXNAMELEN ) { 
 + 	 	 	 name . append ( ' X ' ) ; 
 + 	 	 } 
 + 
 + 	 	 StringBuilder data = new StringBuilder ( ) ; 
 + 	 	 while ( data . length ( ) < 4 * 1024 * 1024 ) { 
 + 	 	 	 data . append ( ' X ' ) ; 
 + 	 	 } 
 + 
 + 	 	 XAttrUtil . setXAttr ( testPath , name . toString ( ) , data . toString ( ) ) ; 
 + 	 	 String value = XAttrUtil . getXAttr ( testPath , name . toString ( ) ) ; 
 + 	 	 assertEquals ( data . toString ( ) , value . toString ( ) ) ; 
 + 	 } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
