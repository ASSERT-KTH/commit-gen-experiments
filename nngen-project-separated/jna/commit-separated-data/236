BLEU SCORE: 0.017272237992167865

TEST MSG: # 466 : Improve performance of Pointer . dump for large dumps . Added simle unit test for Pointer . dump .
GENERATED MSG: avoid premature GC of Memory with NIO Buffers extant

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Pointer . java b / src / com / sun / jna / Pointer . java <nl> index 111a683 . . 0e27f46 100644 <nl> - - - a / src / com / sun / jna / Pointer . java <nl> + + + b / src / com / sun / jna / Pointer . java <nl> @ @ - 10 , 6 + 10 , 8 @ @ <nl> * / <nl> package com . sun . jna ; <nl> <nl> + import java . io . PrintWriter ; <nl> + import java . io . StringWriter ; <nl> import java . lang . reflect . Array ; <nl> import java . nio . Buffer ; <nl> import java . nio . ByteBuffer ; <nl> @ @ - 1271 , 22 + 1273 , 27 @ @ v * @ param wide whether to convert from a wide or standard C string <nl> <nl> / * * Dump memory for debugging purposes . * / <nl> public String dump ( long offset , int size ) { <nl> - String LS = System . getProperty ( " line . separator " ) ; <nl> - String contents = " memory dump " + LS ; <nl> final int BYTES _ PER _ ROW = 4 ; <nl> - byte [ ] buf = getByteArray ( offset , size ) ; <nl> - for ( int i = 0 ; i < buf . length ; i + + ) { <nl> - if ( ( i % BYTES _ PER _ ROW ) = = 0 ) contents + = " [ " ; <nl> - if ( buf [ i ] > = 0 & & buf [ i ] < 16 ) <nl> - contents + = " 0 " ; <nl> - contents + = Integer . toHexString ( buf [ i ] & 0xFF ) ; <nl> - if ( ( i % BYTES _ PER _ ROW ) = = BYTES _ PER _ ROW - 1 & & i < buf . length - 1 ) <nl> - contents + = " ] " + LS ; <nl> - } <nl> - if ( ! contents . endsWith ( " ] " + LS ) ) { <nl> - contents + = " ] " + LS ; <nl> - } <nl> - return contents ; <nl> + final String TITLE = " memory dump " ; <nl> + / / estimate initial size assuming a 2 char line separator <nl> + StringWriter sw = new StringWriter ( TITLE . length ( ) + 2 + size * 2 + ( size / BYTES _ PER _ ROW * 4 ) ) ; <nl> + PrintWriter out = new PrintWriter ( sw ) ; <nl> + out . println ( TITLE ) ; <nl> + / / byte [ ] buf = getByteArray ( offset , size ) ; <nl> + for ( int i = 0 ; i < size ; i + + ) { <nl> + / / byte b = buf [ i ] ; <nl> + byte b = getByte ( offset + i ) ; <nl> + if ( ( i % BYTES _ PER _ ROW ) = = 0 ) out . print ( " [ " ) ; <nl> + if ( b > = 0 & & b < 16 ) <nl> + out . print ( " 0 " ) ; <nl> + out . print ( Integer . toHexString ( b & 0xFF ) ) ; <nl> + if ( ( i % BYTES _ PER _ ROW ) = = BYTES _ PER _ ROW - 1 & & i < size - 1 ) <nl> + out . println ( " ] " ) ; <nl> + } <nl> + if ( sw . getBuffer ( ) . charAt ( sw . getBuffer ( ) . length ( ) - 2 ) ! = ' ] ' ) { <nl> + out . println ( " ] " ) ; <nl> + } <nl> + return sw . toString ( ) ; <nl> } <nl> <nl> public String toString ( ) { <nl> diff - - git a / test / com / sun / jna / MemoryTest . java b / test / com / sun / jna / MemoryTest . java <nl> index 59614e5 . . 8714d4c 100644 <nl> - - - a / test / com / sun / jna / MemoryTest . java <nl> + + + b / test / com / sun / jna / MemoryTest . java <nl> @ @ - 155 , 6 + 155 , 25 @ @ public class MemoryTest extends TestCase implements GCWaits { <nl> assertNull ( " Memory not GC ' d after buffer GC ' d \ n " , ref . get ( ) ) ; <nl> } <nl> <nl> + public void testDump ( ) { <nl> + / / test with 15 bytes so last line has less than 4 bytes <nl> + int n = 15 ; <nl> + <nl> + Memory m = new Memory ( n ) ; <nl> + <nl> + for ( int i = 0 ; i < n ; i + + ) { <nl> + m . setByte ( i , ( byte ) i ) ; <nl> + } <nl> + <nl> + String ls = System . getProperty ( " line . separator " ) ; <nl> + <nl> + assertEquals ( " memory dump " + ls + <nl> + " [ 00010203 ] " + ls + <nl> + " [ 04050607 ] " + ls + <nl> + " [ 08090a0b ] " + ls + <nl> + " [ 0c0d0e ] " + ls , m . dump ( ) ) ; <nl> + } <nl> + <nl> public static void main ( String [ ] args ) { <nl> junit . textui . TestRunner . run ( MemoryTest . class ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c <nl> index 8965edc . . c10d624 100644 <nl> - - - a / jnalib / native / dispatch . c <nl> + + + b / jnalib / native / dispatch . c <nl> @ @ - 2188 , 6 + 2188 , 7 @ @ typedef struct _ method _ data { <nl> ffi _ cif closure _ cif ; <nl> void * fptr ; <nl> ffi _ type * * arg _ types ; <nl> + ffi _ type * * closure _ arg _ types ; <nl> int * flags ; <nl> int rflag ; <nl> jclass rclass ; <nl> @ @ - 2224 , 7 + 2225 , 6 @ @ method _ handler ( ffi _ cif * cif , void * resp , void * * argp , void * cdata ) { <nl> void * oldresp = resp ; <nl> <nl> / / TODO : conversions here otherwise done in JNA interface code <nl> - / / TODO : String , structure ( by ref / value ) , primitive arrays <nl> if ( data - > flags ) { <nl> objects = alloca ( data - > cif . nargs * sizeof ( void * ) ) ; <nl> array _ types = alloca ( data - > cif . nargs * sizeof ( char ) ) ; <nl> @ @ - 2362 , 6 + 2362 , 7 @ @ Java _ com _ sun _ jna _ Native _ unregister ( JNIEnv * env , jclass ncls , jclass cls , jlongAr <nl> method _ data * md = ( method _ data * ) L2A ( data [ count ] ) ; <nl> if ( md - > rclass ) ( * env ) - > DeleteWeakGlobalRef ( env , md - > rclass ) ; <nl> free ( md - > arg _ types ) ; <nl> + free ( md - > closure _ arg _ types ) ; <nl> free ( md - > flags ) ; <nl> free ( md ) ; <nl> } <nl> @ @ - 2399 , 14 + 2400 , 22 @ @ Java _ com _ sun _ jna _ Native _ registerMethod ( JNIEnv * env , jclass ncls , <nl> if ( cc = = CALLCONV _ STDCALL ) abi = FFI _ STDCALL ; <nl> # endif <nl> <nl> - data - > arg _ types = malloc ( sizeof ( ffi _ type * ) * ( argc + 2 ) ) ; <nl> - data - > arg _ types [ 0 ] = & ffi _ type _ pointer ; <nl> - data - > arg _ types [ 1 ] = & ffi _ type _ pointer ; <nl> + data - > arg _ types = malloc ( sizeof ( ffi _ type * ) * argc ) ; <nl> + data - > closure _ arg _ types = malloc ( sizeof ( ffi _ type * ) * ( argc + 2 ) ) ; <nl> + data - > closure _ arg _ types [ 0 ] = & ffi _ type _ pointer ; <nl> + data - > closure _ arg _ types [ 1 ] = & ffi _ type _ pointer ; <nl> data - > flags = cvts ? malloc ( sizeof ( jint ) * argc ) : NULL ; <nl> data - > rflag = rconversion ; <nl> for ( i = 0 ; i < argc ; i + + ) { <nl> - data - > arg _ types [ i + 2 ] = ( ffi _ type * ) L2A ( types [ i ] ) ; <nl> - if ( cvts ) data - > flags [ i ] = cvts [ i ] ; <nl> + data - > closure _ arg _ types [ i + 2 ] = data - > arg _ types [ i ] = <nl> + ( ffi _ type * ) L2A ( types [ i ] ) ; <nl> + if ( cvts ) { <nl> + data - > flags [ i ] = cvts [ i ] ; <nl> + / / By value struct arguments are passed to the closure as a Java object <nl> + if ( cvts [ i ] = = CVT _ STRUCTURE _ BYVAL ) { <nl> + 	 data - > closure _ arg _ types [ i + 2 ] = & ffi _ type _ pointer ; <nl> + } <nl> + } <nl> } <nl> if ( types ) ( * env ) - > ReleaseLongArrayElements ( env , atypes , types , 0 ) ; <nl> if ( cvts ) ( * env ) - > ReleaseIntArrayElements ( env , conversions , cvts , 0 ) ; <nl> @ @ - 2424 , 13 + 2433 , 13 @ @ Java _ com _ sun _ jna _ Native _ registerMethod ( JNIEnv * env , jclass ncls , <nl> else { <nl> data - > rclass = NULL ; <nl> } <nl> - status = ffi _ prep _ cif ( closure _ cif , abi , argc + 2 , closure _ rtype , data - > arg _ types ) ; <nl> + status = ffi _ prep _ cif ( closure _ cif , abi , argc + 2 , closure _ rtype , data - > closure _ arg _ types ) ; <nl> if ( status ! = FFI _ OK ) { <nl> throwByName ( env , EError , " Native method mapping failed " ) ; <nl> goto cleanup ; <nl> } <nl> <nl> - status = ffi _ prep _ cif ( & data - > cif , abi , argc , rtype , & data - > arg _ types [ 2 ] ) ; <nl> + status = ffi _ prep _ cif ( & data - > cif , abi , argc , rtype , data - > arg _ types ) ; <nl> if ( status ! = FFI _ OK ) { <nl> throwByName ( env , EError , " Native method setup failed " ) ; <nl> goto cleanup ;

TEST DIFF:
diff - - git a / src / com / sun / jna / Pointer . java b / src / com / sun / jna / Pointer . java 
 index 111a683 . . 0e27f46 100644 
 - - - a / src / com / sun / jna / Pointer . java 
 + + + b / src / com / sun / jna / Pointer . java 
 @ @ - 10 , 6 + 10 , 8 @ @ 
 * / 
 package com . sun . jna ; 
 
 + import java . io . PrintWriter ; 
 + import java . io . StringWriter ; 
 import java . lang . reflect . Array ; 
 import java . nio . Buffer ; 
 import java . nio . ByteBuffer ; 
 @ @ - 1271 , 22 + 1273 , 27 @ @ v * @ param wide whether to convert from a wide or standard C string 
 
 / * * Dump memory for debugging purposes . * / 
 public String dump ( long offset , int size ) { 
 - String LS = System . getProperty ( " line . separator " ) ; 
 - String contents = " memory dump " + LS ; 
 final int BYTES _ PER _ ROW = 4 ; 
 - byte [ ] buf = getByteArray ( offset , size ) ; 
 - for ( int i = 0 ; i < buf . length ; i + + ) { 
 - if ( ( i % BYTES _ PER _ ROW ) = = 0 ) contents + = " [ " ; 
 - if ( buf [ i ] > = 0 & & buf [ i ] < 16 ) 
 - contents + = " 0 " ; 
 - contents + = Integer . toHexString ( buf [ i ] & 0xFF ) ; 
 - if ( ( i % BYTES _ PER _ ROW ) = = BYTES _ PER _ ROW - 1 & & i < buf . length - 1 ) 
 - contents + = " ] " + LS ; 
 - } 
 - if ( ! contents . endsWith ( " ] " + LS ) ) { 
 - contents + = " ] " + LS ; 
 - } 
 - return contents ; 
 + final String TITLE = " memory dump " ; 
 + / / estimate initial size assuming a 2 char line separator 
 + StringWriter sw = new StringWriter ( TITLE . length ( ) + 2 + size * 2 + ( size / BYTES _ PER _ ROW * 4 ) ) ; 
 + PrintWriter out = new PrintWriter ( sw ) ; 
 + out . println ( TITLE ) ; 
 + / / byte [ ] buf = getByteArray ( offset , size ) ; 
 + for ( int i = 0 ; i < size ; i + + ) { 
 + / / byte b = buf [ i ] ; 
 + byte b = getByte ( offset + i ) ; 
 + if ( ( i % BYTES _ PER _ ROW ) = = 0 ) out . print ( " [ " ) ; 
 + if ( b > = 0 & & b < 16 ) 
 + out . print ( " 0 " ) ; 
 + out . print ( Integer . toHexString ( b & 0xFF ) ) ; 
 + if ( ( i % BYTES _ PER _ ROW ) = = BYTES _ PER _ ROW - 1 & & i < size - 1 ) 
 + out . println ( " ] " ) ; 
 + } 
 + if ( sw . getBuffer ( ) . charAt ( sw . getBuffer ( ) . length ( ) - 2 ) ! = ' ] ' ) { 
 + out . println ( " ] " ) ; 
 + } 
 + return sw . toString ( ) ; 
 } 
 
 public String toString ( ) { 
 diff - - git a / test / com / sun / jna / MemoryTest . java b / test / com / sun / jna / MemoryTest . java 
 index 59614e5 . . 8714d4c 100644 
 - - - a / test / com / sun / jna / MemoryTest . java 
 + + + b / test / com / sun / jna / MemoryTest . java 
 @ @ - 155 , 6 + 155 , 25 @ @ public class MemoryTest extends TestCase implements GCWaits { 
 assertNull ( " Memory not GC ' d after buffer GC ' d \ n " , ref . get ( ) ) ; 
 } 
 
 + public void testDump ( ) { 
 + / / test with 15 bytes so last line has less than 4 bytes 
 + int n = 15 ; 
 + 
 + Memory m = new Memory ( n ) ; 
 + 
 + for ( int i = 0 ; i < n ; i + + ) { 
 + m . setByte ( i , ( byte ) i ) ; 
 + } 
 + 
 + String ls = System . getProperty ( " line . separator " ) ; 
 + 
 + assertEquals ( " memory dump " + ls + 
 + " [ 00010203 ] " + ls + 
 + " [ 04050607 ] " + ls + 
 + " [ 08090a0b ] " + ls + 
 + " [ 0c0d0e ] " + ls , m . dump ( ) ) ; 
 + } 
 + 
 public static void main ( String [ ] args ) { 
 junit . textui . TestRunner . run ( MemoryTest . class ) ; 
 }

NEAREST DIFF:
diff - - git a / jnalib / native / dispatch . c b / jnalib / native / dispatch . c 
 index 8965edc . . c10d624 100644 
 - - - a / jnalib / native / dispatch . c 
 + + + b / jnalib / native / dispatch . c 
 @ @ - 2188 , 6 + 2188 , 7 @ @ typedef struct _ method _ data { 
 ffi _ cif closure _ cif ; 
 void * fptr ; 
 ffi _ type * * arg _ types ; 
 + ffi _ type * * closure _ arg _ types ; 
 int * flags ; 
 int rflag ; 
 jclass rclass ; 
 @ @ - 2224 , 7 + 2225 , 6 @ @ method _ handler ( ffi _ cif * cif , void * resp , void * * argp , void * cdata ) { 
 void * oldresp = resp ; 
 
 / / TODO : conversions here otherwise done in JNA interface code 
 - / / TODO : String , structure ( by ref / value ) , primitive arrays 
 if ( data - > flags ) { 
 objects = alloca ( data - > cif . nargs * sizeof ( void * ) ) ; 
 array _ types = alloca ( data - > cif . nargs * sizeof ( char ) ) ; 
 @ @ - 2362 , 6 + 2362 , 7 @ @ Java _ com _ sun _ jna _ Native _ unregister ( JNIEnv * env , jclass ncls , jclass cls , jlongAr 
 method _ data * md = ( method _ data * ) L2A ( data [ count ] ) ; 
 if ( md - > rclass ) ( * env ) - > DeleteWeakGlobalRef ( env , md - > rclass ) ; 
 free ( md - > arg _ types ) ; 
 + free ( md - > closure _ arg _ types ) ; 
 free ( md - > flags ) ; 
 free ( md ) ; 
 } 
 @ @ - 2399 , 14 + 2400 , 22 @ @ Java _ com _ sun _ jna _ Native _ registerMethod ( JNIEnv * env , jclass ncls , 
 if ( cc = = CALLCONV _ STDCALL ) abi = FFI _ STDCALL ; 
 # endif 
 
 - data - > arg _ types = malloc ( sizeof ( ffi _ type * ) * ( argc + 2 ) ) ; 
 - data - > arg _ types [ 0 ] = & ffi _ type _ pointer ; 
 - data - > arg _ types [ 1 ] = & ffi _ type _ pointer ; 
 + data - > arg _ types = malloc ( sizeof ( ffi _ type * ) * argc ) ; 
 + data - > closure _ arg _ types = malloc ( sizeof ( ffi _ type * ) * ( argc + 2 ) ) ; 
 + data - > closure _ arg _ types [ 0 ] = & ffi _ type _ pointer ; 
 + data - > closure _ arg _ types [ 1 ] = & ffi _ type _ pointer ; 
 data - > flags = cvts ? malloc ( sizeof ( jint ) * argc ) : NULL ; 
 data - > rflag = rconversion ; 
 for ( i = 0 ; i < argc ; i + + ) { 
 - data - > arg _ types [ i + 2 ] = ( ffi _ type * ) L2A ( types [ i ] ) ; 
 - if ( cvts ) data - > flags [ i ] = cvts [ i ] ; 
 + data - > closure _ arg _ types [ i + 2 ] = data - > arg _ types [ i ] = 
 + ( ffi _ type * ) L2A ( types [ i ] ) ; 
 + if ( cvts ) { 
 + data - > flags [ i ] = cvts [ i ] ; 
 + / / By value struct arguments are passed to the closure as a Java object 
 + if ( cvts [ i ] = = CVT _ STRUCTURE _ BYVAL ) { 
 + 	 data - > closure _ arg _ types [ i + 2 ] = & ffi _ type _ pointer ; 
 + } 
 + } 
 } 
 if ( types ) ( * env ) - > ReleaseLongArrayElements ( env , atypes , types , 0 ) ; 
 if ( cvts ) ( * env ) - > ReleaseIntArrayElements ( env , conversions , cvts , 0 ) ; 
 @ @ - 2424 , 13 + 2433 , 13 @ @ Java _ com _ sun _ jna _ Native _ registerMethod ( JNIEnv * env , jclass ncls , 
 else { 
 data - > rclass = NULL ; 
 } 
 - status = ffi _ prep _ cif ( closure _ cif , abi , argc + 2 , closure _ rtype , data - > arg _ types ) ; 
 + status = ffi _ prep _ cif ( closure _ cif , abi , argc + 2 , closure _ rtype , data - > closure _ arg _ types ) ; 
 if ( status ! = FFI _ OK ) { 
 throwByName ( env , EError , " Native method mapping failed " ) ; 
 goto cleanup ; 
 } 
 
 - status = ffi _ prep _ cif ( & data - > cif , abi , argc , rtype , & data - > arg _ types [ 2 ] ) ; 
 + status = ffi _ prep _ cif ( & data - > cif , abi , argc , rtype , data - > arg _ types ) ; 
 if ( status ! = FFI _ OK ) { 
 throwByName ( env , EError , " Native method setup failed " ) ; 
 goto cleanup ;
