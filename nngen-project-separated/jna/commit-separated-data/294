BLEU SCORE: 0.030098043843528283

TEST MSG: Added SetLocalTime definition to ' com . sun . jna . platform . win32 . Kernel32 '
GENERATED MSG: Added Kernel32 # SetSystemTime .

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 8aaaea9 . . da360d6 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 43 , 6 + 43 , 7 @ @ Features <nl> * [ # 425 ] ( https : / / github . com / twall / jna / pull / 425 ) : Add support for PPCLE - [ @ tdaitx ] ( https : / / github . com / tdaix ) . <nl> * [ # 428 ] ( https : / / github . com / twall / jna / pull / 428 ) : Added Wincon . h related functions and definitions to ` com . sun . jna . platform . win32 . Kernel32 ` - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> * [ # 431 ] ( https : / / github . com / twall / jna / pull / 431 ) : Added named pipe API support to ` com . sun . jna . platform . win32 . Kernel32 ` - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> + * [ # 432 ] ( https : / / github . com / twall / jna / pull / 432 ) : Added SetLocalTime definition to ' com . sun . jna . platform . win32 . Kernel32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> index 09fe3cd . . 5a304c8 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> @ @ - 155 , 35 + 155 , 56 @ @ public interface Kernel32 extends WinNT , Wincon { <nl> * The system time is expressed in Coordinated Universal Time ( UTC ) . <nl> * <nl> * @ param lpSystemTime <nl> - * Pointer to a SYSTEMTIME structure to receive the current <nl> + * Pointer to a { @ link # SYSTEMTIME } structure to receive the current <nl> * system date and time . <nl> + * @ see < A HREF = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms724390 ( v = vs . 85 ) . aspx " > GetSystemTime < / A > <nl> + * documentation <nl> * / <nl> - void GetSystemTime ( WinBase . SYSTEMTIME lpSystemTime ) ; <nl> + void GetSystemTime ( SYSTEMTIME lpSystemTime ) ; <nl> <nl> / * * <nl> * The SetSystemTime function modifies the current system date and time . <nl> * The system time is expressed in Coordinated Universal Time ( UTC ) . <nl> * <nl> * @ param lpSystemTime <nl> - * Pointer to a SYSTEMTIME structure holding the new <nl> + * Pointer to a { @ link # SYSTEMTIME } structure holding the new <nl> * system date and time . < B > Note : < / B > The { @ code wDayOfWeek } <nl> * member of the SYSTEMTIME structure is ignored . <nl> * @ return { @ code true } if the function succeeds , { @ code false } otherwise . <nl> - * If the function fails , call GetLastError to get extended error <nl> + * If the function fails , call { @ link # GetLastError ( ) } to get extended error <nl> * information . <nl> + * @ see < A HREF = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms724942 ( v = vs . 85 ) . aspx " > SetSystemTime < / A > <nl> + * documentation <nl> * / <nl> - boolean SetSystemTime ( WinBase . SYSTEMTIME lpSystemTime ) ; <nl> + boolean SetSystemTime ( SYSTEMTIME lpSystemTime ) ; <nl> <nl> / * * <nl> * Retrieves the current local date and time . <nl> * <nl> * @ param lpSystemTime <nl> - * A pointer to a SYSTEMTIME structure to receive the current <nl> + * A pointer to a { @ link # SYSTEMTIME } structure to receive the current <nl> * local date and time . <nl> + * @ see < A HREF = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms724338 ( v = vs . 85 ) . aspx " > GetLocalTime < / A > <nl> + * documentation <nl> * / <nl> void GetLocalTime ( WinBase . SYSTEMTIME lpSystemTime ) ; <nl> <nl> / * * <nl> + * Sets the current local time and date <nl> + * <nl> + * @ param lpSystemTime <nl> + * Pointer to a { @ link # SYSTEMTIME } structure holding the new <nl> + * system date and time . < B > Note : < / B > The { @ code wDayOfWeek } <nl> + * member of the SYSTEMTIME structure is ignored . <nl> + * @ return { @ code true } if the function succeeds , { @ code false } otherwise . <nl> + * If the function fails , call { @ link # GetLastError ( ) } to get extended error <nl> + * information . <nl> + * @ see < A HREF = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms724936 ( v = vs . 85 ) . aspx " > SetLocalTime < / A > <nl> + * documentation <nl> + * / <nl> + boolean SetLocalTime ( SYSTEMTIME lpSystemTime ) ; <nl> + <nl> + / * * <nl> * The GetTickCount function retrieves the number of milliseconds that have <nl> * elapsed since the system was started , up to 49 . 7 days . <nl> * <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> index 88dddb0 . . d881bf7 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> @ @ - 101 , 20 + 101 , 73 @ @ public class Kernel32Test extends TestCase { <nl> expected . wHour + + ; <nl> } <nl> <nl> - if ( ! kernel . SetSystemTime ( expected ) ) { <nl> - fail ( " Failed to modify time : error = " + kernel . GetLastError ( ) ) ; <nl> + if ( assertTimeSettingOperationSucceeded ( " SetSystemTime " , kernel . SetSystemTime ( expected ) ) ) { <nl> + WinBase . SYSTEMTIME actual = new WinBase . SYSTEMTIME ( ) ; <nl> + kernel . GetSystemTime ( actual ) ; <nl> + assertEquals ( " Mismatched hour value " , expected . wHour , actual . wHour ) ; <nl> } <nl> - <nl> - WinBase . SYSTEMTIME actual = new WinBase . SYSTEMTIME ( ) ; <nl> - kernel . GetSystemTime ( actual ) ; <nl> - assertEquals ( " Mismatched hour value " , expected . wHour , actual . wHour ) ; <nl> } finally { <nl> - if ( ! kernel . SetSystemTime ( time ) ) { <nl> - fail ( " Failed to restore original time : error = " + kernel . GetLastError ( ) ) ; <nl> + assertTimeSettingOperationSucceeded ( " Restore original system time " , kernel . SetSystemTime ( time ) ) ; <nl> + } <nl> + } <nl> + <nl> + public void testSetLocaltime ( ) { <nl> + Kernel32 kernel = Kernel32 . INSTANCE ; <nl> + WinBase . SYSTEMTIME time = new WinBase . SYSTEMTIME ( ) ; <nl> + kernel . GetLocalTime ( time ) ; <nl> + try { <nl> + WinBase . SYSTEMTIME expected = new WinBase . SYSTEMTIME ( ) ; <nl> + expected . wYear = time . wYear ; <nl> + expected . wMonth = time . wMonth ; <nl> + expected . wDay = time . wDay ; <nl> + expected . wHour = time . wHour ; <nl> + expected . wMinute = time . wMinute ; <nl> + expected . wSecond = time . wSecond ; <nl> + expected . wMilliseconds = time . wMilliseconds ; <nl> + <nl> + if ( expected . wHour > 0 ) { <nl> + expected . wHour - - ; <nl> + } else { <nl> + expected . wHour + + ; <nl> } <nl> + <nl> + if ( assertTimeSettingOperationSucceeded ( " SetLocalTime " , kernel . SetLocalTime ( expected ) ) ) { <nl> + WinBase . SYSTEMTIME actual = new WinBase . SYSTEMTIME ( ) ; <nl> + kernel . GetLocalTime ( actual ) ; <nl> + assertEquals ( " Mismatched hour value " , expected . wHour , actual . wHour ) ; <nl> + } <nl> + } finally { <nl> + assertTimeSettingOperationSucceeded ( " Restore local time " , kernel . SetLocalTime ( time ) ) ; <nl> } <nl> } <nl> <nl> + private static boolean assertTimeSettingOperationSucceeded ( String message , boolean result ) { <nl> + if ( result ) { <nl> + return result ; <nl> + } <nl> + <nl> + int hr = Kernel32 . INSTANCE . GetLastError ( ) ; <nl> + / * <nl> + * Check special error in case the user running the test isn ' t allowed <nl> + * to change the time . This can happen for hosts that are managed <nl> + * by some central administrator using an automated time setting mechanism . <nl> + * In such cases , the user running the tests might not have admin <nl> + * privileges and it may be too much to ask to have them just for running <nl> + * this JNA API test . . . <nl> + * / <nl> + if ( hr = = WinError . ERROR _ PRIVILEGE _ NOT _ HELD ) { <nl> + return false ; / / don ' t fail the test , but signal the failure <nl> + } <nl> + <nl> + if ( hr ! = WinError . ERROR _ SUCCESS ) { <nl> + fail ( message + " failed : hr = " + hr ) ; <nl> + } else { <nl> + fail ( message + " unknown failure reason code " ) ; <nl> + } <nl> + <nl> + return false ; <nl> + } <nl> + <nl> public void testGetLastError ( ) { <nl> Kernel32 kernel = Kernel32 . INSTANCE ; <nl> int ERRCODE = 8 ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 8aaaea9 . . da360d6 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 43 , 6 + 43 , 7 @ @ Features 
 * [ # 425 ] ( https : / / github . com / twall / jna / pull / 425 ) : Add support for PPCLE - [ @ tdaitx ] ( https : / / github . com / tdaix ) . 
 * [ # 428 ] ( https : / / github . com / twall / jna / pull / 428 ) : Added Wincon . h related functions and definitions to ` com . sun . jna . platform . win32 . Kernel32 ` - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 * [ # 431 ] ( https : / / github . com / twall / jna / pull / 431 ) : Added named pipe API support to ` com . sun . jna . platform . win32 . Kernel32 ` - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 + * [ # 432 ] ( https : / / github . com / twall / jna / pull / 432 ) : Added SetLocalTime definition to ' com . sun . jna . platform . win32 . Kernel32 ' - [ @ lgoldstein ] ( https : / / github . com / lgoldstein ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 index 09fe3cd . . 5a304c8 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 @ @ - 155 , 35 + 155 , 56 @ @ public interface Kernel32 extends WinNT , Wincon { 
 * The system time is expressed in Coordinated Universal Time ( UTC ) . 
 * 
 * @ param lpSystemTime 
 - * Pointer to a SYSTEMTIME structure to receive the current 
 + * Pointer to a { @ link # SYSTEMTIME } structure to receive the current 
 * system date and time . 
 + * @ see < A HREF = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms724390 ( v = vs . 85 ) . aspx " > GetSystemTime < / A > 
 + * documentation 
 * / 
 - void GetSystemTime ( WinBase . SYSTEMTIME lpSystemTime ) ; 
 + void GetSystemTime ( SYSTEMTIME lpSystemTime ) ; 
 
 / * * 
 * The SetSystemTime function modifies the current system date and time . 
 * The system time is expressed in Coordinated Universal Time ( UTC ) . 
 * 
 * @ param lpSystemTime 
 - * Pointer to a SYSTEMTIME structure holding the new 
 + * Pointer to a { @ link # SYSTEMTIME } structure holding the new 
 * system date and time . < B > Note : < / B > The { @ code wDayOfWeek } 
 * member of the SYSTEMTIME structure is ignored . 
 * @ return { @ code true } if the function succeeds , { @ code false } otherwise . 
 - * If the function fails , call GetLastError to get extended error 
 + * If the function fails , call { @ link # GetLastError ( ) } to get extended error 
 * information . 
 + * @ see < A HREF = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms724942 ( v = vs . 85 ) . aspx " > SetSystemTime < / A > 
 + * documentation 
 * / 
 - boolean SetSystemTime ( WinBase . SYSTEMTIME lpSystemTime ) ; 
 + boolean SetSystemTime ( SYSTEMTIME lpSystemTime ) ; 
 
 / * * 
 * Retrieves the current local date and time . 
 * 
 * @ param lpSystemTime 
 - * A pointer to a SYSTEMTIME structure to receive the current 
 + * A pointer to a { @ link # SYSTEMTIME } structure to receive the current 
 * local date and time . 
 + * @ see < A HREF = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms724338 ( v = vs . 85 ) . aspx " > GetLocalTime < / A > 
 + * documentation 
 * / 
 void GetLocalTime ( WinBase . SYSTEMTIME lpSystemTime ) ; 
 
 / * * 
 + * Sets the current local time and date 
 + * 
 + * @ param lpSystemTime 
 + * Pointer to a { @ link # SYSTEMTIME } structure holding the new 
 + * system date and time . < B > Note : < / B > The { @ code wDayOfWeek } 
 + * member of the SYSTEMTIME structure is ignored . 
 + * @ return { @ code true } if the function succeeds , { @ code false } otherwise . 
 + * If the function fails , call { @ link # GetLastError ( ) } to get extended error 
 + * information . 
 + * @ see < A HREF = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms724936 ( v = vs . 85 ) . aspx " > SetLocalTime < / A > 
 + * documentation 
 + * / 
 + boolean SetLocalTime ( SYSTEMTIME lpSystemTime ) ; 
 + 
 + / * * 
 * The GetTickCount function retrieves the number of milliseconds that have 
 * elapsed since the system was started , up to 49 . 7 days . 
 * 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 index 88dddb0 . . d881bf7 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 @ @ - 101 , 20 + 101 , 73 @ @ public class Kernel32Test extends TestCase { 
 expected . wHour + + ; 
 } 
 
 - if ( ! kernel . SetSystemTime ( expected ) ) { 
 - fail ( " Failed to modify time : error = " + kernel . GetLastError ( ) ) ; 
 + if ( assertTimeSettingOperationSucceeded ( " SetSystemTime " , kernel . SetSystemTime ( expected ) ) ) { 
 + WinBase . SYSTEMTIME actual = new WinBase . SYSTEMTIME ( ) ; 
 + kernel . GetSystemTime ( actual ) ; 
 + assertEquals ( " Mismatched hour value " , expected . wHour , actual . wHour ) ; 
 } 
 - 
 - WinBase . SYSTEMTIME actual = new WinBase . SYSTEMTIME ( ) ; 
 - kernel . GetSystemTime ( actual ) ; 
 - assertEquals ( " Mismatched hour value " , expected . wHour , actual . wHour ) ; 
 } finally { 
 - if ( ! kernel . SetSystemTime ( time ) ) { 
 - fail ( " Failed to restore original time : error = " + kernel . GetLastError ( ) ) ; 
 + assertTimeSettingOperationSucceeded ( " Restore original system time " , kernel . SetSystemTime ( time ) ) ; 
 + } 
 + } 
 + 
 + public void testSetLocaltime ( ) { 
 + Kernel32 kernel = Kernel32 . INSTANCE ; 
 + WinBase . SYSTEMTIME time = new WinBase . SYSTEMTIME ( ) ; 
 + kernel . GetLocalTime ( time ) ; 
 + try { 
 + WinBase . SYSTEMTIME expected = new WinBase . SYSTEMTIME ( ) ; 
 + expected . wYear = time . wYear ; 
 + expected . wMonth = time . wMonth ; 
 + expected . wDay = time . wDay ; 
 + expected . wHour = time . wHour ; 
 + expected . wMinute = time . wMinute ; 
 + expected . wSecond = time . wSecond ; 
 + expected . wMilliseconds = time . wMilliseconds ; 
 + 
 + if ( expected . wHour > 0 ) { 
 + expected . wHour - - ; 
 + } else { 
 + expected . wHour + + ; 
 } 
 + 
 + if ( assertTimeSettingOperationSucceeded ( " SetLocalTime " , kernel . SetLocalTime ( expected ) ) ) { 
 + WinBase . SYSTEMTIME actual = new WinBase . SYSTEMTIME ( ) ; 
 + kernel . GetLocalTime ( actual ) ; 
 + assertEquals ( " Mismatched hour value " , expected . wHour , actual . wHour ) ; 
 + } 
 + } finally { 
 + assertTimeSettingOperationSucceeded ( " Restore local time " , kernel . SetLocalTime ( time ) ) ; 
 } 
 } 
 
 + private static boolean assertTimeSettingOperationSucceeded ( String message , boolean result ) { 
 + if ( result ) { 
 + return result ; 
 + } 
 + 
 + int hr = Kernel32 . INSTANCE . GetLastError ( ) ; 
 + / * 
 + * Check special error in case the user running the test isn ' t allowed 
 + * to change the time . This can happen for hosts that are managed 
 + * by some central administrator using an automated time setting mechanism . 
 + * In such cases , the user running the tests might not have admin 
 + * privileges and it may be too much to ask to have them just for running 
 + * this JNA API test . . . 
 + * / 
 + if ( hr = = WinError . ERROR _ PRIVILEGE _ NOT _ HELD ) { 
 + return false ; / / don ' t fail the test , but signal the failure 
 + } 
 + 
 + if ( hr ! = WinError . ERROR _ SUCCESS ) { 
 + fail ( message + " failed : hr = " + hr ) ; 
 + } else { 
 + fail ( message + " unknown failure reason code " ) ; 
 + } 
 + 
 + return false ; 
 + } 
 + 
 public void testGetLastError ( ) { 
 Kernel32 kernel = Kernel32 . INSTANCE ; 
 int ERRCODE = 8 ;

NEAREST DIFF:
ELIMINATEDSENTENCE
