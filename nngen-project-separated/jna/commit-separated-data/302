BLEU SCORE: 0.011354443244942601

TEST MSG: added mappings for XGrabKeyboard and XUngrabKeyboard
GENERATED MSG: [ x11 ] added mappings to XGrabKey and XUngrabKey functions used for Global Hotkeys and XSetErrorHanler used to handle program errors without exiting

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> index 607db1d . . adb49d9 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> @ @ - 1953 , 6 + 1953 , 27 @ @ public interface X11 extends Library { <nl> * / <nl> int XUngrabKey ( Display display , int keyCode , int modifiers , Window grab _ window ) ; <nl> <nl> + / * * <nl> + * Actively grabs control of the keyboard and generates FocusIn and FocusOut events <nl> + * <nl> + * @ param display Specifies the connection to the X server . <nl> + * @ param grab _ window Specifies the grab window . <nl> + * @ param owner _ events Specifies a Boolean value that indicates whether the keyboard events are to be reported as usual . <nl> + * @ param pointer _ mode Specifies further processing of pointer events . You can pass GrabModeSync or GrabModeAsync . <nl> + * @ param keyboard _ mode Specifies further processing of keyboard events . You can pass GrabModeSync or GrabModeAsync . <nl> + * @ param time Specifies the time . You can pass either a timestamp or CurrentTime . <nl> + * @ return nothing <nl> + * / <nl> + int XGrabKeyboard ( Display display , Window grab _ window , int owner _ events , int pointer _ mode , int keyboard _ mode , NativeLong time ) ; <nl> + <nl> + / * * <nl> + * Releases the keyboard and any queued events if this client has it actively grabbed from either XGrabKeyboard ( ) or XGrabKey ( ) . <nl> + * @ param display Specifies the connection to the X server . <nl> + * @ param time Specifies the time . You can pass either a timestamp or CurrentTime . <nl> + * @ return nothing <nl> + * / <nl> + int XUngrabKeyboard ( Display display , NativeLong time ) ; <nl> + <nl> / / int XChangeKeyboardMapping ( Display display , int first _ keycode , int keysyms _ per _ keycode , KeySym * keysyms , int num _ codes ) ; <nl> / * * Defines the symbols for the specified number of KeyCodes starting with first _ keycode . The symbols for KeyCodes outside this range remain unchanged . The number of elements in keysyms must be : num _ codes * keysyms _ per _ keycode . The specified first _ keycode must be greater than or equal to min _ keycode returned by XDisplayKeycodes , or a BadValue error results . In addition , the following expression must be less than or equal to max _ keycode as returned by XDisplayKeycodes , or a BadValue error results : first _ keycode + num _ codes - 1 . * / <nl> int XChangeKeyboardMapping ( Display display , int first _ keycode , int keysyms _ per _ keycode , KeySym [ ] keysyms , int num _ codes ) ;
NEAREST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / Carbon . java b / contrib / platform / src / com / sun / jna / platform / mac / Carbon . java <nl> new file mode 100644 <nl> index 0000000 . . 3af4aed <nl> - - - / dev / null <nl> + + + b / contrib / platform / src / com / sun / jna / platform / mac / Carbon . java <nl> @ @ - 0 , 0 + 1 , 87 @ @ <nl> + / * <nl> + * Copyright ( c ) 2011 Denis Tulskiy <nl> + * <nl> + * This program is free software : you can redistribute it and / or modify <nl> + * it under the terms of the GNU Lesser General Public License as published by <nl> + * the Free Software Foundation , either version 3 of the License , or <nl> + * ( at your option ) any later version . <nl> + * <nl> + * This program is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the <nl> + * GNU Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public License <nl> + * version 3 along with this work . If not , see < http : / / www . gnu . org / licenses / > . <nl> + * / <nl> + <nl> + package com . sun . jna . platform . mac ; <nl> + <nl> + import com . sun . jna . Callback ; <nl> + import com . sun . jna . Native ; <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . Structure ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> + <nl> + import java . nio . IntBuffer ; <nl> + <nl> + / * * <nl> + * Author : Denis Tulskiy <nl> + * Date : 7 / 25 / 11 <nl> + * / <nl> + public interface Carbon { <nl> + public static Carbon INSTANCE = ( Carbon ) Native . loadLibrary ( " Carbon " , Carbon . class ) ; <nl> + <nl> + public static final int cmdKey = 0x0100 ; <nl> + public static final int shiftKey = 0x0200 ; <nl> + public static final int optionKey = 0x0800 ; <nl> + public static final int controlKey = 0x1000 ; <nl> + <nl> + / * * <nl> + * Obtains the event target reference for the standard toolbox dispatcher <nl> + * / <nl> + public Pointer GetEventDispatcherTarget ( ) ; <nl> + <nl> + / * * <nl> + * Installs an event handler on a specified event target . <nl> + * / <nl> + public int InstallEventHandler ( Pointer inTarget , EventHandlerProcPtr inHandler , int inNumTypes , EventTypeSpec [ ] inList , Pointer inUserData , PointerByReference outRef ) ; <nl> + <nl> + / * * <nl> + * Registers a global hot key . <nl> + * / <nl> + public int RegisterEventHotKey ( int inHotKeyCode , int inHotKeyModifiers , EventHotKeyID . ByValue inHotKeyID , Pointer inTarget , int inOptions , PointerByReference outRef ) ; <nl> + <nl> + / * * <nl> + * Obtains a parameter from the specified event . <nl> + * / <nl> + public int GetEventParameter ( Pointer inEvent , int inName , int inDesiredType , Pointer outActualType , int inBufferSize , IntBuffer outActualSize , EventHotKeyID outData ) ; <nl> + <nl> + / * * <nl> + * Removes the specified event handler <nl> + * / <nl> + public int RemoveEventHandler ( Pointer inHandlerRef ) ; <nl> + <nl> + / * * <nl> + * Unregisters a global hot key . <nl> + * / <nl> + public int UnregisterEventHotKey ( Pointer inHotKey ) ; <nl> + <nl> + public class EventTypeSpec extends Structure { <nl> + public int eventClass ; <nl> + public int eventKind ; <nl> + } <nl> + <nl> + public static class EventHotKeyID extends Structure { <nl> + public int signature ; <nl> + public int id ; <nl> + <nl> + public static class ByValue extends EventHotKeyID implements Structure . ByValue { <nl> + <nl> + } <nl> + } <nl> + <nl> + public static interface EventHandlerProcPtr extends Callback { <nl> + public int callback ( Pointer inHandlerCallRef , Pointer inEvent , Pointer inUserData ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 index 607db1d . . adb49d9 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 @ @ - 1953 , 6 + 1953 , 27 @ @ public interface X11 extends Library { 
 * / 
 int XUngrabKey ( Display display , int keyCode , int modifiers , Window grab _ window ) ; 
 
 + / * * 
 + * Actively grabs control of the keyboard and generates FocusIn and FocusOut events 
 + * 
 + * @ param display Specifies the connection to the X server . 
 + * @ param grab _ window Specifies the grab window . 
 + * @ param owner _ events Specifies a Boolean value that indicates whether the keyboard events are to be reported as usual . 
 + * @ param pointer _ mode Specifies further processing of pointer events . You can pass GrabModeSync or GrabModeAsync . 
 + * @ param keyboard _ mode Specifies further processing of keyboard events . You can pass GrabModeSync or GrabModeAsync . 
 + * @ param time Specifies the time . You can pass either a timestamp or CurrentTime . 
 + * @ return nothing 
 + * / 
 + int XGrabKeyboard ( Display display , Window grab _ window , int owner _ events , int pointer _ mode , int keyboard _ mode , NativeLong time ) ; 
 + 
 + / * * 
 + * Releases the keyboard and any queued events if this client has it actively grabbed from either XGrabKeyboard ( ) or XGrabKey ( ) . 
 + * @ param display Specifies the connection to the X server . 
 + * @ param time Specifies the time . You can pass either a timestamp or CurrentTime . 
 + * @ return nothing 
 + * / 
 + int XUngrabKeyboard ( Display display , NativeLong time ) ; 
 + 
 / / int XChangeKeyboardMapping ( Display display , int first _ keycode , int keysyms _ per _ keycode , KeySym * keysyms , int num _ codes ) ; 
 / * * Defines the symbols for the specified number of KeyCodes starting with first _ keycode . The symbols for KeyCodes outside this range remain unchanged . The number of elements in keysyms must be : num _ codes * keysyms _ per _ keycode . The specified first _ keycode must be greater than or equal to min _ keycode returned by XDisplayKeycodes , or a BadValue error results . In addition , the following expression must be less than or equal to max _ keycode as returned by XDisplayKeycodes , or a BadValue error results : first _ keycode + num _ codes - 1 . * / 
 int XChangeKeyboardMapping ( Display display , int first _ keycode , int keysyms _ per _ keycode , KeySym [ ] keysyms , int num _ codes ) ;

NEAREST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / mac / Carbon . java b / contrib / platform / src / com / sun / jna / platform / mac / Carbon . java 
 new file mode 100644 
 index 0000000 . . 3af4aed 
 - - - / dev / null 
 + + + b / contrib / platform / src / com / sun / jna / platform / mac / Carbon . java 
 @ @ - 0 , 0 + 1 , 87 @ @ 
 + / * 
 + * Copyright ( c ) 2011 Denis Tulskiy 
 + * 
 + * This program is free software : you can redistribute it and / or modify 
 + * it under the terms of the GNU Lesser General Public License as published by 
 + * the Free Software Foundation , either version 3 of the License , or 
 + * ( at your option ) any later version . 
 + * 
 + * This program is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the 
 + * GNU Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public License 
 + * version 3 along with this work . If not , see < http : / / www . gnu . org / licenses / > . 
 + * / 
 + 
 + package com . sun . jna . platform . mac ; 
 + 
 + import com . sun . jna . Callback ; 
 + import com . sun . jna . Native ; 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . Structure ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 + 
 + import java . nio . IntBuffer ; 
 + 
 + / * * 
 + * Author : Denis Tulskiy 
 + * Date : 7 / 25 / 11 
 + * / 
 + public interface Carbon { 
 + public static Carbon INSTANCE = ( Carbon ) Native . loadLibrary ( " Carbon " , Carbon . class ) ; 
 + 
 + public static final int cmdKey = 0x0100 ; 
 + public static final int shiftKey = 0x0200 ; 
 + public static final int optionKey = 0x0800 ; 
 + public static final int controlKey = 0x1000 ; 
 + 
 + / * * 
 + * Obtains the event target reference for the standard toolbox dispatcher 
 + * / 
 + public Pointer GetEventDispatcherTarget ( ) ; 
 + 
 + / * * 
 + * Installs an event handler on a specified event target . 
 + * / 
 + public int InstallEventHandler ( Pointer inTarget , EventHandlerProcPtr inHandler , int inNumTypes , EventTypeSpec [ ] inList , Pointer inUserData , PointerByReference outRef ) ; 
 + 
 + / * * 
 + * Registers a global hot key . 
 + * / 
 + public int RegisterEventHotKey ( int inHotKeyCode , int inHotKeyModifiers , EventHotKeyID . ByValue inHotKeyID , Pointer inTarget , int inOptions , PointerByReference outRef ) ; 
 + 
 + / * * 
 + * Obtains a parameter from the specified event . 
 + * / 
 + public int GetEventParameter ( Pointer inEvent , int inName , int inDesiredType , Pointer outActualType , int inBufferSize , IntBuffer outActualSize , EventHotKeyID outData ) ; 
 + 
 + / * * 
 + * Removes the specified event handler 
 + * / 
 + public int RemoveEventHandler ( Pointer inHandlerRef ) ; 
 + 
 + / * * 
 + * Unregisters a global hot key . 
 + * / 
 + public int UnregisterEventHotKey ( Pointer inHotKey ) ; 
 + 
 + public class EventTypeSpec extends Structure { 
 + public int eventClass ; 
 + public int eventKind ; 
 + } 
 + 
 + public static class EventHotKeyID extends Structure { 
 + public int signature ; 
 + public int id ; 
 + 
 + public static class ByValue extends EventHotKeyID implements Structure . ByValue { 
 + 
 + } 
 + } 
 + 
 + public static interface EventHandlerProcPtr extends Callback { 
 + public int callback ( Pointer inHandlerCallRef , Pointer inEvent , Pointer inUserData ) ; 
 + } 
 + }
