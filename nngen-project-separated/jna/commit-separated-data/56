BLEU SCORE: 0.033864985683445356

TEST MSG: Add WTSEnumerateProcessesEx and WTS _ PROCESS _ INFO _ EX to Wtsapi32
GENERATED MSG: GetProcessTimes and GetProcessIoCounters

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 3f6bb3d . . 610bf7b 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 21 , 6 + 21 , 7 @ @ Features <nl> * [ # 952 ] ( https : / / github . com / java - native - access / jna / issues / 952 ) : Added ` CreateMutex ` , ` OpenMutex ` and ` ReleaseMutex ` to ` com . sun . jna . platform . win32 . Kernel32 ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 973 ] ( https : / / github . com / java - native - access / jna / issues / 973 ) : Added ` PdhLookupPerfNameByIndex ` , ` PdhLookupPerfIndexByName ` , and ` PdhEnumObjectItems ` to ` c . s . j . platform . win32 . Pdh ` and a ` c . s . j . platform . win32 . PdhUtil ` class to access them - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> * [ # 980 ] ( https : / / github . com / java - native - access / jna / issues / 980 ) : Added ` PERF _ OBJECT _ TYPE ` , ` PERF _ COUNTER _ BLOCK ` , and ` PERF _ COUNTER _ DEFINITION ` to ` c . s . j . platform . win32 . WinPerf ` and added ` Pointer ` constructors to ` ` PERF _ INSTANCE _ DEFINITION ` and ` PERF _ DATA _ BLOCK ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> + * [ # 981 ] ( https : / / github . com / java - native - access / jna / issues / 981 ) : Added ` WTS _ PROCESS _ INFO _ EX ` , ` WTSEnumerateProcessesEx ` , and ` WTSFreeMemoryEx ` to ` c . s . j . platform . win32 . Wtsapi32 ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Wtsapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Wtsapi32 . java <nl> index 902083c . . afe3d02 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Wtsapi32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Wtsapi32 . java <nl> @ @ - 24 , 9 + 24 , 18 @ @ <nl> package com . sun . jna . platform . win32 ; <nl> <nl> import com . sun . jna . Native ; <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . Structure ; <nl> + import com . sun . jna . Structure . FieldOrder ; <nl> import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> + import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> + import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; <nl> + import com . sun . jna . platform . win32 . WinNT . PSID ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> import com . sun . jna . win32 . StdCallLibrary ; <nl> import com . sun . jna . win32 . W32APIOptions ; <nl> + import com . sun . jna . win32 . W32APITypeMapper ; <nl> <nl> public interface Wtsapi32 extends StdCallLibrary { <nl> <nl> @ @ - 86 , 6 + 95 , 61 @ @ public interface Wtsapi32 extends StdCallLibrary { <nl> 	 * / <nl> 	 int WTS _ SESSION _ REMOTE _ CONTROL = 0x9 ; <nl> <nl> + / * * <nl> + * Specifies the current server <nl> + * / <nl> + HANDLE WTS _ CURRENT _ SERVER _ HANDLE = new HANDLE ( null ) ; <nl> + <nl> + / * * <nl> + * Specifies the current session ( SessionId ) <nl> + * / <nl> + int WTS _ CURRENT _ SESSION = - 1 ; <nl> + <nl> + / * * <nl> + * Specifies any - session ( SessionId ) <nl> + * / <nl> + int WTS _ ANY _ SESSION = - 2 ; <nl> + <nl> + int WTS _ PROCESS _ INFO _ LEVEL _ 0 = 0 ; <nl> + int WTS _ PROCESS _ INFO _ LEVEL _ 1 = 1 ; <nl> + <nl> + / * * <nl> + * Contains extended information about a process running on a Remote Desktop <nl> + * Session Host ( RD Session Host ) server . This structure is returned by the <nl> + * WTSEnumerateProcessesEx function when you set the pLevel parameter to <nl> + * one . <nl> + * <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / wtsapi32 / ns - wtsapi32 - _ wts _ process _ info _ exa " > WTS _ PROCESS _ INFO _ EXA < / A > <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / wtsapi32 / ns - wtsapi32 - _ wts _ process _ info _ exw " > WTS _ PROCESS _ INFO _ EXW < / A > <nl> + * / <nl> + @ FieldOrder ( { " SessionId " , " ProcessId " , " pProcessName " , " pUserSid " , " NumberOfThreads " , " HandleCount " , <nl> + " PagefileUsage " , " PeakPagefileUsage " , " WorkingSetSize " , " PeakWorkingSetSize " , " UserTime " , " KernelTime " } ) <nl> + class WTS _ PROCESS _ INFO _ EX extends Structure { <nl> + public int SessionId ; <nl> + public int ProcessId ; <nl> + public String pProcessName ; / / Either LPSTR or LPWSTR <nl> + public PSID pUserSid ; <nl> + public int NumberOfThreads ; <nl> + public int HandleCount ; <nl> + public int PagefileUsage ; <nl> + public int PeakPagefileUsage ; <nl> + public int WorkingSetSize ; <nl> + public int PeakWorkingSetSize ; <nl> + public LARGE _ INTEGER UserTime ; <nl> + public LARGE _ INTEGER KernelTime ; <nl> + <nl> + public WTS _ PROCESS _ INFO _ EX ( ) { <nl> + super ( W32APITypeMapper . DEFAULT ) ; <nl> + } <nl> + <nl> + public WTS _ PROCESS _ INFO _ EX ( Pointer p ) { <nl> + super ( p , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; <nl> + read ( ) ; <nl> + } <nl> + } <nl> + <nl> 	 / * * <nl> 	 * Registers the specified window to receive session change notifications . <nl> 	 * <nl> @ @ - 114 , 4 + 178 , 65 @ @ public interface Wtsapi32 extends StdCallLibrary { <nl> 	 * is FALSE . To get extended error information , call GetLastError . <nl> 	 * / <nl> 	 boolean WTSUnRegisterSessionNotification ( HWND hWnd ) ; <nl> + <nl> + / * * <nl> + * Retrieves information about the active processes on the specified Remote <nl> + * Desktop Session Host ( RD Session Host ) server or Remote Desktop <nl> + * Virtualization Host ( RD Virtualization Host ) server . <nl> + * <nl> + * @ param hServer <nl> + * A handle to an RD Session Host server . Specify a handle opened <nl> + * by the WTSOpenServer function , or specify <nl> + * WTS _ CURRENT _ SERVER _ HANDLE to indicate the server on which your <nl> + * application is running . <nl> + * @ param pLevel <nl> + * A pointer to a DWORD variable that , on input , specifies the <nl> + * type of information to return . To return an array of <nl> + * WTS _ PROCESS _ INFO structures , specify zero . To return an array <nl> + * of WTS _ PROCESS _ INFO _ EX structures , specify one . If you do not <nl> + * specify a valid value for this parameter , on output , <nl> + * WTSEnumerateProcessesEx sets this parameter to one and returns <nl> + * an error . Otherwise , on output , WTSEnumerateProcessesEx does <nl> + * not change the value of this parameter . <nl> + * @ param SessionID <nl> + * The session for which to enumerate processes . To enumerate <nl> + * processes for all sessions on the server , specify <nl> + * WTS _ ANY _ SESSION . <nl> + * @ param ppProcessInfo <nl> + * A pointer to a variable that receives a pointer to an array of <nl> + * WTS _ PROCESS _ INFO or WTS _ PROCESS _ INFO _ EX structures . The type <nl> + * of structure is determined by the value passed to the pLevel <nl> + * parameter . Each structure in the array contains information <nl> + * about an active process . When you have finished using the <nl> + * array , free it by calling the WTSFreeMemoryEx function . You <nl> + * should also set the pointer to NULL . <nl> + * @ param pCount <nl> + * A pointer to a variable that receives the number of structures <nl> + * returned in the buffer referenced by the ppProcessInfo <nl> + * parameter . <nl> + * @ return If the function succeeds , the return value is a nonzero value . If <nl> + * the function fails , the return value is zero . To get extended <nl> + * error information , call the GetLastError function . <nl> + * / <nl> + boolean WTSEnumerateProcessesEx ( HANDLE hServer , IntByReference pLevel , int SessionID , <nl> + PointerByReference ppProcessInfo , IntByReference pCount ) ; <nl> + <nl> + / * * <nl> + * Frees memory that contains WTS _ PROCESS _ INFO _ EX or WTS _ SESSION _ INFO _ 1 <nl> + * structures allocated by a Remote Desktop Services function . <nl> + * <nl> + * @ param WTSTypeClass <nl> + * A value of the WTS _ TYPE _ CLASS enumeration type that specifies <nl> + * the type of structures contained in the buffer referenced by <nl> + * the pMemory parameter . <nl> + * @ param pMemory <nl> + * A pointer to the buffer to free . <nl> + * @ param NumberOfEntries <nl> + * The number of elements in the buffer referenced by the pMemory <nl> + * parameter . <nl> + * @ return If the function succeeds , the return value is a nonzero value . If <nl> + * the function fails , the return value is zero . To get extended <nl> + * error information , call the GetLastError function . <nl> + * / <nl> + boolean WTSFreeMemoryEx ( int WTSTypeClass , Pointer pMemory , int NumberOfEntries ) ; <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Wtsapi32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Wtsapi32Test . java <nl> index d8daffc . . 5bc516f 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Wtsapi32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Wtsapi32Test . java <nl> @ @ - 1 , 11 + 1 , 17 @ @ <nl> package com . sun . jna . platform . win32 ; <nl> <nl> import java . awt . Frame ; <nl> + import java . util . HashSet ; <nl> + import java . util . Set ; <nl> <nl> import com . sun . jna . Native ; <nl> - import junit . framework . TestCase ; <nl> - <nl> + import com . sun . jna . Pointer ; <nl> import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> + import com . sun . jna . platform . win32 . Wtsapi32 . WTS _ PROCESS _ INFO _ EX ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + import com . sun . jna . ptr . PointerByReference ; <nl> + <nl> + import junit . framework . TestCase ; <nl> <nl> public class Wtsapi32Test extends TestCase { <nl> <nl> @ @ - 35 , 4 + 41 , 41 @ @ public class Wtsapi32Test extends TestCase { <nl> <nl> 	 	 assertEquals ( true , result ) ; <nl> 	 } <nl> + 	 <nl> + public void testWTSEnumerateProcessesEx ( ) { <nl> + / / Get processes from WTS <nl> + PointerByReference ppProcessInfo = new PointerByReference ( ) ; <nl> + IntByReference pCount = new IntByReference ( 0 ) ; <nl> + assertTrue ( Wtsapi32 . INSTANCE . WTSEnumerateProcessesEx ( Wtsapi32 . WTS _ CURRENT _ SERVER _ HANDLE , <nl> + new IntByReference ( Wtsapi32 . WTS _ PROCESS _ INFO _ LEVEL _ 1 ) , Wtsapi32 . WTS _ ANY _ SESSION , ppProcessInfo , <nl> + pCount ) ) ; <nl> + / / extract the pointed - to pointer and create array <nl> + Pointer pProcessInfo = ppProcessInfo . getValue ( ) ; <nl> + WTS _ PROCESS _ INFO _ EX processInfoRef = new WTS _ PROCESS _ INFO _ EX ( pProcessInfo ) ; <nl> + WTS _ PROCESS _ INFO _ EX [ ] processInfo = ( WTS _ PROCESS _ INFO _ EX [ ] ) processInfoRef . toArray ( pCount . getValue ( ) ) ; <nl> + <nl> + Set < Integer > pidSet = new HashSet < Integer > ( ) ; <nl> + for ( WTS _ PROCESS _ INFO _ EX procInfo : processInfo ) { <nl> + / / PIDs should be unique <nl> + if ( procInfo . ProcessId ! = 0 ) { <nl> + assertFalse ( pidSet . contains ( procInfo . ProcessId ) ) ; <nl> + pidSet . add ( procInfo . ProcessId ) ; <nl> + } <nl> + <nl> + / / A process cannot time travel and use negative CPU ticks <nl> + assertTrue ( procInfo . KernelTime . getValue ( ) > = 0 ) ; <nl> + assertTrue ( procInfo . UserTime . getValue ( ) > = 0 ) ; <nl> + <nl> + / / Process name should be nonempty except for the Idle process <nl> + String name = procInfo . pProcessName ; <nl> + if ( procInfo . ProcessId ! = 0 ) { <nl> + assertFalse ( name . isEmpty ( ) ) ; <nl> + } <nl> + <nl> + } <nl> + / / Clean up memory allocated in C <nl> + assertTrue ( <nl> + Wtsapi32 . INSTANCE . WTSFreeMemoryEx ( Wtsapi32 . WTS _ PROCESS _ INFO _ LEVEL _ 1 , pProcessInfo , pCount . getValue ( ) ) ) ; <nl> + <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 3f6bb3d . . 610bf7b 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 21 , 6 + 21 , 7 @ @ Features 
 * [ # 952 ] ( https : / / github . com / java - native - access / jna / issues / 952 ) : Added ` CreateMutex ` , ` OpenMutex ` and ` ReleaseMutex ` to ` com . sun . jna . platform . win32 . Kernel32 ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 973 ] ( https : / / github . com / java - native - access / jna / issues / 973 ) : Added ` PdhLookupPerfNameByIndex ` , ` PdhLookupPerfIndexByName ` , and ` PdhEnumObjectItems ` to ` c . s . j . platform . win32 . Pdh ` and a ` c . s . j . platform . win32 . PdhUtil ` class to access them - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 * [ # 980 ] ( https : / / github . com / java - native - access / jna / issues / 980 ) : Added ` PERF _ OBJECT _ TYPE ` , ` PERF _ COUNTER _ BLOCK ` , and ` PERF _ COUNTER _ DEFINITION ` to ` c . s . j . platform . win32 . WinPerf ` and added ` Pointer ` constructors to ` ` PERF _ INSTANCE _ DEFINITION ` and ` PERF _ DATA _ BLOCK ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 + * [ # 981 ] ( https : / / github . com / java - native - access / jna / issues / 981 ) : Added ` WTS _ PROCESS _ INFO _ EX ` , ` WTSEnumerateProcessesEx ` , and ` WTSFreeMemoryEx ` to ` c . s . j . platform . win32 . Wtsapi32 ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Wtsapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Wtsapi32 . java 
 index 902083c . . afe3d02 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Wtsapi32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Wtsapi32 . java 
 @ @ - 24 , 9 + 24 , 18 @ @ 
 package com . sun . jna . platform . win32 ; 
 
 import com . sun . jna . Native ; 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . Structure ; 
 + import com . sun . jna . Structure . FieldOrder ; 
 import com . sun . jna . platform . win32 . WinDef . HWND ; 
 + import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 + import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; 
 + import com . sun . jna . platform . win32 . WinNT . PSID ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 import com . sun . jna . win32 . StdCallLibrary ; 
 import com . sun . jna . win32 . W32APIOptions ; 
 + import com . sun . jna . win32 . W32APITypeMapper ; 
 
 public interface Wtsapi32 extends StdCallLibrary { 
 
 @ @ - 86 , 6 + 95 , 61 @ @ public interface Wtsapi32 extends StdCallLibrary { 
 	 * / 
 	 int WTS _ SESSION _ REMOTE _ CONTROL = 0x9 ; 
 
 + / * * 
 + * Specifies the current server 
 + * / 
 + HANDLE WTS _ CURRENT _ SERVER _ HANDLE = new HANDLE ( null ) ; 
 + 
 + / * * 
 + * Specifies the current session ( SessionId ) 
 + * / 
 + int WTS _ CURRENT _ SESSION = - 1 ; 
 + 
 + / * * 
 + * Specifies any - session ( SessionId ) 
 + * / 
 + int WTS _ ANY _ SESSION = - 2 ; 
 + 
 + int WTS _ PROCESS _ INFO _ LEVEL _ 0 = 0 ; 
 + int WTS _ PROCESS _ INFO _ LEVEL _ 1 = 1 ; 
 + 
 + / * * 
 + * Contains extended information about a process running on a Remote Desktop 
 + * Session Host ( RD Session Host ) server . This structure is returned by the 
 + * WTSEnumerateProcessesEx function when you set the pLevel parameter to 
 + * one . 
 + * 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / wtsapi32 / ns - wtsapi32 - _ wts _ process _ info _ exa " > WTS _ PROCESS _ INFO _ EXA < / A > 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / wtsapi32 / ns - wtsapi32 - _ wts _ process _ info _ exw " > WTS _ PROCESS _ INFO _ EXW < / A > 
 + * / 
 + @ FieldOrder ( { " SessionId " , " ProcessId " , " pProcessName " , " pUserSid " , " NumberOfThreads " , " HandleCount " , 
 + " PagefileUsage " , " PeakPagefileUsage " , " WorkingSetSize " , " PeakWorkingSetSize " , " UserTime " , " KernelTime " } ) 
 + class WTS _ PROCESS _ INFO _ EX extends Structure { 
 + public int SessionId ; 
 + public int ProcessId ; 
 + public String pProcessName ; / / Either LPSTR or LPWSTR 
 + public PSID pUserSid ; 
 + public int NumberOfThreads ; 
 + public int HandleCount ; 
 + public int PagefileUsage ; 
 + public int PeakPagefileUsage ; 
 + public int WorkingSetSize ; 
 + public int PeakWorkingSetSize ; 
 + public LARGE _ INTEGER UserTime ; 
 + public LARGE _ INTEGER KernelTime ; 
 + 
 + public WTS _ PROCESS _ INFO _ EX ( ) { 
 + super ( W32APITypeMapper . DEFAULT ) ; 
 + } 
 + 
 + public WTS _ PROCESS _ INFO _ EX ( Pointer p ) { 
 + super ( p , Structure . ALIGN _ DEFAULT , W32APITypeMapper . DEFAULT ) ; 
 + read ( ) ; 
 + } 
 + } 
 + 
 	 / * * 
 	 * Registers the specified window to receive session change notifications . 
 	 * 
 @ @ - 114 , 4 + 178 , 65 @ @ public interface Wtsapi32 extends StdCallLibrary { 
 	 * is FALSE . To get extended error information , call GetLastError . 
 	 * / 
 	 boolean WTSUnRegisterSessionNotification ( HWND hWnd ) ; 
 + 
 + / * * 
 + * Retrieves information about the active processes on the specified Remote 
 + * Desktop Session Host ( RD Session Host ) server or Remote Desktop 
 + * Virtualization Host ( RD Virtualization Host ) server . 
 + * 
 + * @ param hServer 
 + * A handle to an RD Session Host server . Specify a handle opened 
 + * by the WTSOpenServer function , or specify 
 + * WTS _ CURRENT _ SERVER _ HANDLE to indicate the server on which your 
 + * application is running . 
 + * @ param pLevel 
 + * A pointer to a DWORD variable that , on input , specifies the 
 + * type of information to return . To return an array of 
 + * WTS _ PROCESS _ INFO structures , specify zero . To return an array 
 + * of WTS _ PROCESS _ INFO _ EX structures , specify one . If you do not 
 + * specify a valid value for this parameter , on output , 
 + * WTSEnumerateProcessesEx sets this parameter to one and returns 
 + * an error . Otherwise , on output , WTSEnumerateProcessesEx does 
 + * not change the value of this parameter . 
 + * @ param SessionID 
 + * The session for which to enumerate processes . To enumerate 
 + * processes for all sessions on the server , specify 
 + * WTS _ ANY _ SESSION . 
 + * @ param ppProcessInfo 
 + * A pointer to a variable that receives a pointer to an array of 
 + * WTS _ PROCESS _ INFO or WTS _ PROCESS _ INFO _ EX structures . The type 
 + * of structure is determined by the value passed to the pLevel 
 + * parameter . Each structure in the array contains information 
 + * about an active process . When you have finished using the 
 + * array , free it by calling the WTSFreeMemoryEx function . You 
 + * should also set the pointer to NULL . 
 + * @ param pCount 
 + * A pointer to a variable that receives the number of structures 
 + * returned in the buffer referenced by the ppProcessInfo 
 + * parameter . 
 + * @ return If the function succeeds , the return value is a nonzero value . If 
 + * the function fails , the return value is zero . To get extended 
 + * error information , call the GetLastError function . 
 + * / 
 + boolean WTSEnumerateProcessesEx ( HANDLE hServer , IntByReference pLevel , int SessionID , 
 + PointerByReference ppProcessInfo , IntByReference pCount ) ; 
 + 
 + / * * 
 + * Frees memory that contains WTS _ PROCESS _ INFO _ EX or WTS _ SESSION _ INFO _ 1 
 + * structures allocated by a Remote Desktop Services function . 
 + * 
 + * @ param WTSTypeClass 
 + * A value of the WTS _ TYPE _ CLASS enumeration type that specifies 
 + * the type of structures contained in the buffer referenced by 
 + * the pMemory parameter . 
 + * @ param pMemory 
 + * A pointer to the buffer to free . 
 + * @ param NumberOfEntries 
 + * The number of elements in the buffer referenced by the pMemory 
 + * parameter . 
 + * @ return If the function succeeds , the return value is a nonzero value . If 
 + * the function fails , the return value is zero . To get extended 
 + * error information , call the GetLastError function . 
 + * / 
 + boolean WTSFreeMemoryEx ( int WTSTypeClass , Pointer pMemory , int NumberOfEntries ) ; 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Wtsapi32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Wtsapi32Test . java 
 index d8daffc . . 5bc516f 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Wtsapi32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Wtsapi32Test . java 
 @ @ - 1 , 11 + 1 , 17 @ @ 
 package com . sun . jna . platform . win32 ; 
 
 import java . awt . Frame ; 
 + import java . util . HashSet ; 
 + import java . util . Set ; 
 
 import com . sun . jna . Native ; 
 - import junit . framework . TestCase ; 
 - 
 + import com . sun . jna . Pointer ; 
 import com . sun . jna . platform . win32 . WinDef . HWND ; 
 + import com . sun . jna . platform . win32 . Wtsapi32 . WTS _ PROCESS _ INFO _ EX ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + import com . sun . jna . ptr . PointerByReference ; 
 + 
 + import junit . framework . TestCase ; 
 
 public class Wtsapi32Test extends TestCase { 
 
 @ @ - 35 , 4 + 41 , 41 @ @ public class Wtsapi32Test extends TestCase { 
 
 	 	 assertEquals ( true , result ) ; 
 	 } 
 + 	 
 + public void testWTSEnumerateProcessesEx ( ) { 
 + / / Get processes from WTS 
 + PointerByReference ppProcessInfo = new PointerByReference ( ) ; 
 + IntByReference pCount = new IntByReference ( 0 ) ; 
 + assertTrue ( Wtsapi32 . INSTANCE . WTSEnumerateProcessesEx ( Wtsapi32 . WTS _ CURRENT _ SERVER _ HANDLE , 
 + new IntByReference ( Wtsapi32 . WTS _ PROCESS _ INFO _ LEVEL _ 1 ) , Wtsapi32 . WTS _ ANY _ SESSION , ppProcessInfo , 
 + pCount ) ) ; 
 + / / extract the pointed - to pointer and create array 
 + Pointer pProcessInfo = ppProcessInfo . getValue ( ) ; 
 + WTS _ PROCESS _ INFO _ EX processInfoRef = new WTS _ PROCESS _ INFO _ EX ( pProcessInfo ) ; 
 + WTS _ PROCESS _ INFO _ EX [ ] processInfo = ( WTS _ PROCESS _ INFO _ EX [ ] ) processInfoRef . toArray ( pCount . getValue ( ) ) ; 
 + 
 + Set < Integer > pidSet = new HashSet < Integer > ( ) ; 
 + for ( WTS _ PROCESS _ INFO _ EX procInfo : processInfo ) { 
 + / / PIDs should be unique 
 + if ( procInfo . ProcessId ! = 0 ) { 
 + assertFalse ( pidSet . contains ( procInfo . ProcessId ) ) ; 
 + pidSet . add ( procInfo . ProcessId ) ; 
 + } 
 + 
 + / / A process cannot time travel and use negative CPU ticks 
 + assertTrue ( procInfo . KernelTime . getValue ( ) > = 0 ) ; 
 + assertTrue ( procInfo . UserTime . getValue ( ) > = 0 ) ; 
 + 
 + / / Process name should be nonempty except for the Idle process 
 + String name = procInfo . pProcessName ; 
 + if ( procInfo . ProcessId ! = 0 ) { 
 + assertFalse ( name . isEmpty ( ) ) ; 
 + } 
 + 
 + } 
 + / / Clean up memory allocated in C 
 + assertTrue ( 
 + Wtsapi32 . INSTANCE . WTSFreeMemoryEx ( Wtsapi32 . WTS _ PROCESS _ INFO _ LEVEL _ 1 , pProcessInfo , pCount . getValue ( ) ) ) ; 
 + 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
