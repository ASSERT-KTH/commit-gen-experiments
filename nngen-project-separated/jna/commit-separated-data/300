BLEU SCORE: 0.0032261949000137397

TEST MSG: Regenerate configure script if missing ( temporary workaround )
GENERATED MSG: Use the full path to / usr / bin / libtool - macports installs GNU libtool in the path before / usr / bin / libtool .

TEST DIFF (one line): diff - - git a / native / Makefile b / native / Makefile <nl> index fc4d081 . . 3e55a63 100644 <nl> - - - a / native / Makefile <nl> + + + b / native / Makefile <nl> @ @ - 419 , 6 + 419 , 10 @ @ $ ( TESTLIB2 ) : $ ( BUILD ) / testlib2 . o <nl> ifneq ( $ ( DYNAMIC _ LIBFFI ) , true ) <nl> $ ( FFI _ LIB ) : <nl> 	 @ mkdir - p $ ( FFI _ BUILD ) <nl> + 	 @ if [ ! - f $ ( FFI _ SRC ) / configure ] ; then \ <nl> + 	 echo " Generating configure " ; \ <nl> + 	 ( cd $ ( FFI _ SRC ) ; . / autogen . sh ) ; \ <nl> + 	 fi <nl> 	 @ if [ ! - f $ ( FFI _ BUILD ) / Makefile ] ; then \ <nl> 	 echo " Configuring libffi ( $ ( ARCH ) ) " ; \ <nl> 	 ( cd $ ( FFI _ BUILD ) \
NEAREST DIFF (one line): diff - - git a / www / index . html b / www / index . html <nl> index 1bc01ba . . 4b46ea5 100644 <nl> - - - a / www / index . html <nl> + + + b / www / index . html <nl> @ @ - 3 , 7 + 3 , 7 @ @ <nl> < meta name = " author " content = " Timothy Wall " > <nl> < meta name = " keywords " content = " java , jna , jni , c / c + + , native , method , function , call , ctypes , ffi , foreign function interface , jdirect , jinvoke , pinvoke , platform invoke , native library access , native access , call native from java , java c library , easy jni , call c code from java , avoid jni " > <nl> < meta name = " description " content = " Java Native Access ( JNA ) : access native libraries with pure Java code . " > <nl> - < meta name = " date " content = " 2007 - 09 - 02 " > <nl> + < meta name = " date " content = " 2007 - 09 - 04 " > <nl> < title > Java Native Access ( JNA ) : Pure Java access to native libraries < / title > <nl> < meta http - equiv = " Content - Type " content = " text / html ; charset = iso - 8859 - 1 " > <nl> < / head > <nl> @ @ - 12 , 7 + 12 , 7 @ @ <nl> < p > JNA provides Java programs easy access to native shared libraries ( e . g . DLLs on Windows ) without writing anything but Java code & # 8212 ; no JNI or native code is required . This functionality is comparable to Windows ' Platform / Invoke and Python ' s ctypes . Access is dynamic at runtime without code generation . < / p > <nl> < p > JNA ' s design aims to provide native access in a natural way with a minimum of effort . No boilerplate or generated code is required . While some attention is paid to performance , correctness and ease of use take priority . < / p > <nl> < p > The JNA library uses a small native library stub to dynamically invoke native code without the developer having to write JNI code . The developer describes functions and structures from the target native library in a Java interface . From his perspective , he interacts only with Java code . This makes it quite easy to take advantage of native platform features without getting into the major hassle of writing your own JNI code . It also facilitates implementing cross - platofrm features withing incurring the high overhead of configuring and building JNI for multiple platforms . < / p > <nl> - The < a href = " javadoc / index . html " > JavaDoc is available online < / a > , <nl> + The < a href = " javadoc / overview - summary . html " > JavaDoc is available online < / a > , <nl> which includes an overview of specific usage . < p > <nl> <nl> < h3 > Features < / h3 >

TEST DIFF:
diff - - git a / native / Makefile b / native / Makefile 
 index fc4d081 . . 3e55a63 100644 
 - - - a / native / Makefile 
 + + + b / native / Makefile 
 @ @ - 419 , 6 + 419 , 10 @ @ $ ( TESTLIB2 ) : $ ( BUILD ) / testlib2 . o 
 ifneq ( $ ( DYNAMIC _ LIBFFI ) , true ) 
 $ ( FFI _ LIB ) : 
 	 @ mkdir - p $ ( FFI _ BUILD ) 
 + 	 @ if [ ! - f $ ( FFI _ SRC ) / configure ] ; then \ 
 + 	 echo " Generating configure " ; \ 
 + 	 ( cd $ ( FFI _ SRC ) ; . / autogen . sh ) ; \ 
 + 	 fi 
 	 @ if [ ! - f $ ( FFI _ BUILD ) / Makefile ] ; then \ 
 	 echo " Configuring libffi ( $ ( ARCH ) ) " ; \ 
 	 ( cd $ ( FFI _ BUILD ) \

NEAREST DIFF:
diff - - git a / www / index . html b / www / index . html 
 index 1bc01ba . . 4b46ea5 100644 
 - - - a / www / index . html 
 + + + b / www / index . html 
 @ @ - 3 , 7 + 3 , 7 @ @ 
 < meta name = " author " content = " Timothy Wall " > 
 < meta name = " keywords " content = " java , jna , jni , c / c + + , native , method , function , call , ctypes , ffi , foreign function interface , jdirect , jinvoke , pinvoke , platform invoke , native library access , native access , call native from java , java c library , easy jni , call c code from java , avoid jni " > 
 < meta name = " description " content = " Java Native Access ( JNA ) : access native libraries with pure Java code . " > 
 - < meta name = " date " content = " 2007 - 09 - 02 " > 
 + < meta name = " date " content = " 2007 - 09 - 04 " > 
 < title > Java Native Access ( JNA ) : Pure Java access to native libraries < / title > 
 < meta http - equiv = " Content - Type " content = " text / html ; charset = iso - 8859 - 1 " > 
 < / head > 
 @ @ - 12 , 7 + 12 , 7 @ @ 
 < p > JNA provides Java programs easy access to native shared libraries ( e . g . DLLs on Windows ) without writing anything but Java code & # 8212 ; no JNI or native code is required . This functionality is comparable to Windows ' Platform / Invoke and Python ' s ctypes . Access is dynamic at runtime without code generation . < / p > 
 < p > JNA ' s design aims to provide native access in a natural way with a minimum of effort . No boilerplate or generated code is required . While some attention is paid to performance , correctness and ease of use take priority . < / p > 
 < p > The JNA library uses a small native library stub to dynamically invoke native code without the developer having to write JNI code . The developer describes functions and structures from the target native library in a Java interface . From his perspective , he interacts only with Java code . This makes it quite easy to take advantage of native platform features without getting into the major hassle of writing your own JNI code . It also facilitates implementing cross - platofrm features withing incurring the high overhead of configuring and building JNI for multiple platforms . < / p > 
 - The < a href = " javadoc / index . html " > JavaDoc is available online < / a > , 
 + The < a href = " javadoc / overview - summary . html " > JavaDoc is available online < / a > , 
 which includes an overview of specific usage . < p > 
 
 < h3 > Features < / h3 >
