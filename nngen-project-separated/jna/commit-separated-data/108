BLEU SCORE: 0.041961149062965476

TEST MSG: Direct Mapping support for OPTION _ ALLOW _ OBJECTS .
GENERATED MSG: ensure enclosing class query shows up properly for cached options

TEST DIFF (one line): diff - - git a / native / dispatch . h b / native / dispatch . h <nl> index ceb1813 . . 91ddd27 100644 <nl> - - - a / native / dispatch . h <nl> + + + b / native / dispatch . h <nl> @ @ - 115 , 6 + 115 , 7 @ @ enum { <nl> CVT _ TYPE _ MAPPER = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER , <nl> CVT _ TYPE _ MAPPER _ STRING = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER _ STRING , <nl> CVT _ TYPE _ MAPPER _ WSTRING = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER _ WSTRING , <nl> + CVT _ OBJECT = com _ sun _ jna _ Native _ CVT _ OBJECT , <nl> } ; <nl> <nl> / * callback behavior flags * / <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index 274bb78 . . cc28856 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 1534 , 8 + 1534 , 9 @ @ public final class Native implements Version { <nl> private static final int CVT _ TYPE _ MAPPER = 23 ; <nl> private static final int CVT _ TYPE _ MAPPER _ STRING = 24 ; <nl> private static final int CVT _ TYPE _ MAPPER _ WSTRING = 25 ; <nl> + private static final int CVT _ OBJECT = 26 ; <nl> <nl> - private static int getConversion ( Class < ? > type , TypeMapper mapper ) { <nl> + private static int getConversion ( Class < ? > type , TypeMapper mapper , boolean allowObjects ) { <nl> if ( type = = Boolean . class ) type = boolean . class ; <nl> else if ( type = = Byte . class ) type = byte . class ; <nl> else if ( type = = Short . class ) type = short . class ; <nl> @ @ - 1624 , 7 + 1625 , 7 @ @ public final class Native implements Version { <nl> } <nl> return CVT _ NATIVE _ MAPPED ; <nl> } <nl> - return CVT _ UNSUPPORTED ; <nl> + return allowObjects ? CVT _ OBJECT : CVT _ UNSUPPORTED ; <nl> } <nl> <nl> / * * <nl> @ @ - 1657 , 6 + 1658 , 7 @ @ public final class Native implements Version { <nl> List < Method > mlist = new ArrayList < Method > ( ) ; <nl> Map < String , ? > options = lib . getOptions ( ) ; <nl> TypeMapper mapper = ( TypeMapper ) options . get ( Library . OPTION _ TYPE _ MAPPER ) ; <nl> + boolean allowObjects = Boolean . TRUE . equals ( options . get ( Library . OPTION _ ALLOW _ OBJECTS ) ) ; <nl> options = cacheOptions ( cls , options , null ) ; <nl> <nl> for ( Method m : methods ) { <nl> @ @ - 1677 , 7 + 1679 , 7 @ @ public final class Native implements Version { <nl> int [ ] cvt = new int [ ptypes . length ] ; <nl> ToNativeConverter [ ] toNative = new ToNativeConverter [ ptypes . length ] ; <nl> FromNativeConverter fromNative = null ; <nl> - int rcvt = getConversion ( rclass , mapper ) ; <nl> + int rcvt = getConversion ( rclass , mapper , allowObjects ) ; <nl> boolean throwLastError = false ; <nl> switch ( rcvt ) { <nl> case CVT _ UNSUPPORTED : <nl> @ @ - 1701 , 6 + 1703 , 7 @ @ public final class Native implements Version { <nl> rtype = FFIType . get ( NativeMappedConverter . getInstance ( rclass ) . nativeType ( ) ) . peer ; <nl> break ; <nl> case CVT _ STRUCTURE : <nl> + case CVT _ OBJECT : <nl> closure _ rtype = rtype = FFIType . get ( Pointer . class ) . peer ; <nl> break ; <nl> case CVT _ STRUCTURE _ BYVAL : <nl> @ @ - 1714 , 7 + 1717 , 7 @ @ public final class Native implements Version { <nl> for ( int t = 0 ; t < ptypes . length ; t + + ) { <nl> Class < ? > type = ptypes [ t ] ; <nl> sig + = getSignature ( type ) ; <nl> - int conversionType = getConversion ( type , mapper ) ; <nl> + int conversionType = getConversion ( type , mapper , allowObjects ) ; <nl> cvt [ t ] = conversionType ; <nl> if ( conversionType = = CVT _ UNSUPPORTED ) { <nl> throw new IllegalArgumentException ( type + " is not a supported argument type ( in method " + method . getName ( ) + " in " + cls + " ) " ) ; <nl> diff - - git a / test / com / sun / jna / DirectReturnTypesTest . java b / test / com / sun / jna / DirectReturnTypesTest . java <nl> index 087471b . . afe0778 100644 <nl> - - - a / test / com / sun / jna / DirectReturnTypesTest . java <nl> + + + b / test / com / sun / jna / DirectReturnTypesTest . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ <nl> package com . sun . jna ; <nl> <nl> import java . util . Map ; <nl> + import java . util . Collections ; <nl> <nl> / * * Exercise a range of native methods . <nl> * <nl> @ @ - 96 , 8 + 97 , 13 @ @ public class DirectReturnTypesTest extends ReturnTypesTest { <nl> } <nl> <nl> public static class DirectObjectTestLibrary extends DirectTestLibrary { <nl> - public DirectObjectTestLibrary ( Map < String , ? > options ) { <nl> - Native . register ( getClass ( ) , NativeLibrary . getInstance ( " testlib " , options ) ) ; <nl> + @ Override <nl> + public native Object returnObjectArgument ( Object s ) ; <nl> + @ Override <nl> + public native TestObject returnObjectArgument ( TestObject s ) ; <nl> + public DirectObjectTestLibrary ( ) { <nl> + Native . register ( getClass ( ) , NativeLibrary . getInstance ( " testlib " , <nl> + Collections . singletonMap ( Library . OPTION _ ALLOW _ OBJECTS , Boolean . TRUE ) ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 117 , 9 + 123 , 13 @ @ public class DirectReturnTypesTest extends ReturnTypesTest { <nl> return new DirectNativeMappedLibrary ( ) ; <nl> } <nl> <nl> - / / Override not - yet - supported tests <nl> + <nl> @ Override <nl> - public void testReturnObject ( ) { } <nl> + public void testReturnObject ( ) { <nl> + lib = new DirectObjectTestLibrary ( ) ; <nl> + } <nl> + <nl> + / / Override not - yet - supported tests <nl> @ Override <nl> public void testReturnPointerArray ( ) { } <nl> @ Override
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / native / dispatch . h b / native / dispatch . h 
 index ceb1813 . . 91ddd27 100644 
 - - - a / native / dispatch . h 
 + + + b / native / dispatch . h 
 @ @ - 115 , 6 + 115 , 7 @ @ enum { 
 CVT _ TYPE _ MAPPER = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER , 
 CVT _ TYPE _ MAPPER _ STRING = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER _ STRING , 
 CVT _ TYPE _ MAPPER _ WSTRING = com _ sun _ jna _ Native _ CVT _ TYPE _ MAPPER _ WSTRING , 
 + CVT _ OBJECT = com _ sun _ jna _ Native _ CVT _ OBJECT , 
 } ; 
 
 / * callback behavior flags * / 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index 274bb78 . . cc28856 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 1534 , 8 + 1534 , 9 @ @ public final class Native implements Version { 
 private static final int CVT _ TYPE _ MAPPER = 23 ; 
 private static final int CVT _ TYPE _ MAPPER _ STRING = 24 ; 
 private static final int CVT _ TYPE _ MAPPER _ WSTRING = 25 ; 
 + private static final int CVT _ OBJECT = 26 ; 
 
 - private static int getConversion ( Class < ? > type , TypeMapper mapper ) { 
 + private static int getConversion ( Class < ? > type , TypeMapper mapper , boolean allowObjects ) { 
 if ( type = = Boolean . class ) type = boolean . class ; 
 else if ( type = = Byte . class ) type = byte . class ; 
 else if ( type = = Short . class ) type = short . class ; 
 @ @ - 1624 , 7 + 1625 , 7 @ @ public final class Native implements Version { 
 } 
 return CVT _ NATIVE _ MAPPED ; 
 } 
 - return CVT _ UNSUPPORTED ; 
 + return allowObjects ? CVT _ OBJECT : CVT _ UNSUPPORTED ; 
 } 
 
 / * * 
 @ @ - 1657 , 6 + 1658 , 7 @ @ public final class Native implements Version { 
 List < Method > mlist = new ArrayList < Method > ( ) ; 
 Map < String , ? > options = lib . getOptions ( ) ; 
 TypeMapper mapper = ( TypeMapper ) options . get ( Library . OPTION _ TYPE _ MAPPER ) ; 
 + boolean allowObjects = Boolean . TRUE . equals ( options . get ( Library . OPTION _ ALLOW _ OBJECTS ) ) ; 
 options = cacheOptions ( cls , options , null ) ; 
 
 for ( Method m : methods ) { 
 @ @ - 1677 , 7 + 1679 , 7 @ @ public final class Native implements Version { 
 int [ ] cvt = new int [ ptypes . length ] ; 
 ToNativeConverter [ ] toNative = new ToNativeConverter [ ptypes . length ] ; 
 FromNativeConverter fromNative = null ; 
 - int rcvt = getConversion ( rclass , mapper ) ; 
 + int rcvt = getConversion ( rclass , mapper , allowObjects ) ; 
 boolean throwLastError = false ; 
 switch ( rcvt ) { 
 case CVT _ UNSUPPORTED : 
 @ @ - 1701 , 6 + 1703 , 7 @ @ public final class Native implements Version { 
 rtype = FFIType . get ( NativeMappedConverter . getInstance ( rclass ) . nativeType ( ) ) . peer ; 
 break ; 
 case CVT _ STRUCTURE : 
 + case CVT _ OBJECT : 
 closure _ rtype = rtype = FFIType . get ( Pointer . class ) . peer ; 
 break ; 
 case CVT _ STRUCTURE _ BYVAL : 
 @ @ - 1714 , 7 + 1717 , 7 @ @ public final class Native implements Version { 
 for ( int t = 0 ; t < ptypes . length ; t + + ) { 
 Class < ? > type = ptypes [ t ] ; 
 sig + = getSignature ( type ) ; 
 - int conversionType = getConversion ( type , mapper ) ; 
 + int conversionType = getConversion ( type , mapper , allowObjects ) ; 
 cvt [ t ] = conversionType ; 
 if ( conversionType = = CVT _ UNSUPPORTED ) { 
 throw new IllegalArgumentException ( type + " is not a supported argument type ( in method " + method . getName ( ) + " in " + cls + " ) " ) ; 
 diff - - git a / test / com / sun / jna / DirectReturnTypesTest . java b / test / com / sun / jna / DirectReturnTypesTest . java 
 index 087471b . . afe0778 100644 
 - - - a / test / com / sun / jna / DirectReturnTypesTest . java 
 + + + b / test / com / sun / jna / DirectReturnTypesTest . java 
 @ @ - 24 , 6 + 24 , 7 @ @ 
 package com . sun . jna ; 
 
 import java . util . Map ; 
 + import java . util . Collections ; 
 
 / * * Exercise a range of native methods . 
 * 
 @ @ - 96 , 8 + 97 , 13 @ @ public class DirectReturnTypesTest extends ReturnTypesTest { 
 } 
 
 public static class DirectObjectTestLibrary extends DirectTestLibrary { 
 - public DirectObjectTestLibrary ( Map < String , ? > options ) { 
 - Native . register ( getClass ( ) , NativeLibrary . getInstance ( " testlib " , options ) ) ; 
 + @ Override 
 + public native Object returnObjectArgument ( Object s ) ; 
 + @ Override 
 + public native TestObject returnObjectArgument ( TestObject s ) ; 
 + public DirectObjectTestLibrary ( ) { 
 + Native . register ( getClass ( ) , NativeLibrary . getInstance ( " testlib " , 
 + Collections . singletonMap ( Library . OPTION _ ALLOW _ OBJECTS , Boolean . TRUE ) ) ) ; 
 } 
 } 
 
 @ @ - 117 , 9 + 123 , 13 @ @ public class DirectReturnTypesTest extends ReturnTypesTest { 
 return new DirectNativeMappedLibrary ( ) ; 
 } 
 
 - / / Override not - yet - supported tests 
 + 
 @ Override 
 - public void testReturnObject ( ) { } 
 + public void testReturnObject ( ) { 
 + lib = new DirectObjectTestLibrary ( ) ; 
 + } 
 + 
 + / / Override not - yet - supported tests 
 @ Override 
 public void testReturnPointerArray ( ) { } 
 @ Override

NEAREST DIFF:
ELIMINATEDSENTENCE
