BLEU SCORE: 0.044568827606990644

TEST MSG: Pass a pointer to GetNetworkParams and cast to Structure later .
GENERATED MSG: Add GetIfEntry , GetNetworkParams , and supporting structures

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / IPHlpAPI . java b / contrib / platform / src / com / sun / jna / platform / win32 / IPHlpAPI . java <nl> index 4e4e4e7 . . 1009533 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / IPHlpAPI . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / IPHlpAPI . java <nl> @ @ - 1 , 278 + 1 , 278 @ @ <nl> - / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved <nl> - * <nl> - * The contents of this file is dual - licensed under 2 <nl> - * alternative Open Source / Free licenses : LGPL 2 . 1 or later and <nl> - * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . <nl> - * <nl> - * You can freely decide which license you want to apply to <nl> - * the project . <nl> - * <nl> - * You may obtain a copy of the LGPL License at : <nl> - * <nl> - * http : / / www . gnu . org / licenses / licenses . html <nl> - * <nl> - * A copy is also included in the downloadable source code package <nl> - * containing JNA , in file " LGPL2 . 1 " . <nl> - * <nl> - * You may obtain a copy of the Apache License at : <nl> - * <nl> - * http : / / www . apache . org / licenses / <nl> - * <nl> - * A copy is also included in the downloadable source code package <nl> - * containing JNA , in file " AL2 . 0 " . <nl> - * / <nl> - package com . sun . jna . platform . win32 ; <nl> - <nl> - import com . sun . jna . Library ; <nl> - import com . sun . jna . Native ; <nl> - import com . sun . jna . Pointer ; <nl> - import com . sun . jna . Structure ; <nl> - import com . sun . jna . Structure . FieldOrder ; <nl> - import com . sun . jna . platform . win32 . Guid . GUID ; <nl> - import com . sun . jna . ptr . IntByReference ; <nl> - import com . sun . jna . win32 . W32APIOptions ; <nl> - <nl> - / * * <nl> - * Windows IP Helper API <nl> - * <nl> - * @ see < A HREF = <nl> - * " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa373083 ( v = vs . 85 ) . aspx " > IP <nl> - * Helper Reference < / A > <nl> - * / <nl> - public interface IPHlpAPI extends Library { <nl> - IPHlpAPI INSTANCE = Native . load ( " IPHlpAPI " , IPHlpAPI . class , W32APIOptions . DEFAULT _ OPTIONS ) ; <nl> - <nl> - int IF _ MAX _ STRING _ SIZE = 256 ; <nl> - int IF _ MAX _ PHYS _ ADDRESS _ LENGTH = 32 ; <nl> - int MAX _ INTERFACE _ NAME _ LEN = 256 ; <nl> - int MAXLEN _ IFDESCR = 256 ; <nl> - int MAXLEN _ PHYSADDR = 8 ; <nl> - int MAX _ HOSTNAME _ LEN = 128 ; <nl> - int MAX _ DOMAIN _ NAME _ LEN = 128 ; <nl> - int MAX _ SCOPE _ ID _ LEN = 256 ; <nl> - <nl> - / * * <nl> - * The MIB _ IFROW structure stores information about a particular interface . <nl> - * <nl> - * @ see < A HREF = <nl> - * " https : / / docs . microsoft . com / en - us / previous - versions / windows / desktop / api / ifmib / ns - ifmib - _ mib _ ifrow " > MIB _ IFROW < / A > <nl> - * / <nl> - @ FieldOrder ( { " wszName " , " dwIndex " , " dwType " , " dwMtu " , " dwSpeed " , " dwPhysAddrLen " , " bPhysAddr " , " dwAdminStatus " , <nl> - " dwOperStatus " , " dwLastChange " , " dwInOctets " , " dwInUcastPkts " , " dwInNUcastPkts " , " dwInDiscards " , <nl> - " dwInErrors " , " dwInUnknownProtos " , " dwOutOctets " , " dwOutUcastPkts " , " dwOutNUcastPkts " , " dwOutDiscards " , <nl> - " dwOutErrors " , " dwOutQLen " , " dwDescrLen " , " bDescr " } ) <nl> - class MIB _ IFROW extends Structure { <nl> - public char [ ] wszName = new char [ MAX _ INTERFACE _ NAME _ LEN ] ; <nl> - public int dwIndex ; <nl> - public int dwType ; <nl> - public int dwMtu ; <nl> - public int dwSpeed ; <nl> - public int dwPhysAddrLen ; <nl> - public byte [ ] bPhysAddr = new byte [ MAXLEN _ PHYSADDR ] ; <nl> - public int dwAdminStatus ; <nl> - public int dwOperStatus ; <nl> - public int dwLastChange ; <nl> - public int dwInOctets ; <nl> - public int dwInUcastPkts ; <nl> - public int dwInNUcastPkts ; <nl> - public int dwInDiscards ; <nl> - public int dwInErrors ; <nl> - public int dwInUnknownProtos ; <nl> - public int dwOutOctets ; <nl> - public int dwOutUcastPkts ; <nl> - public int dwOutNUcastPkts ; <nl> - public int dwOutDiscards ; <nl> - public int dwOutErrors ; <nl> - public int dwOutQLen ; <nl> - public int dwDescrLen ; <nl> - public byte [ ] bDescr = new byte [ MAXLEN _ IFDESCR ] ; <nl> - } <nl> - <nl> - / * * <nl> - * The MIB _ IF _ ROW2 structure stores information about a particular <nl> - * interface . <nl> - * <nl> - * @ see < A HREF = <nl> - * " https : / / msdn . microsoft . com / library / windows / hardware / ff559214 " > MIB _ IF _ ROW2 < / A > <nl> - * / <nl> - @ FieldOrder ( { " InterfaceLuid " , " InterfaceIndex " , " InterfaceGuid " , " Alias " , " Description " , " PhysicalAddressLength " , <nl> - " PhysicalAddress " , " PermanentPhysicalAddress " , " Mtu " , " Type " , " TunnelType " , " MediaType " , <nl> - " PhysicalMediumType " , " AccessType " , " DirectionType " , " InterfaceAndOperStatusFlags " , " OperStatus " , <nl> - " AdminStatus " , " MediaConnectState " , " NetworkGuid " , " ConnectionType " , " TransmitLinkSpeed " , <nl> - " ReceiveLinkSpeed " , " InOctets " , " InUcastPkts " , " InNUcastPkts " , " InDiscards " , " InErrors " , " InUnknownProtos " , <nl> - " InUcastOctets " , " InMulticastOctets " , " InBroadcastOctets " , " OutOctets " , " OutUcastPkts " , " OutNUcastPkts " , <nl> - " OutDiscards " , " OutErrors " , " OutUcastOctets " , " OutMulticastOctets " , " OutBroadcastOctets " , " OutQLen " } ) <nl> - class MIB _ IF _ ROW2 extends Structure { <nl> - public long InterfaceLuid ; / / 64 - bit union NET _ LUID <nl> - public int InterfaceIndex ; <nl> - public GUID InterfaceGuid ; <nl> - public char [ ] Alias = new char [ IF _ MAX _ STRING _ SIZE + 1 ] ; <nl> - public char [ ] Description = new char [ IF _ MAX _ STRING _ SIZE + 1 ] ; <nl> - public int PhysicalAddressLength ; <nl> - public byte [ ] PhysicalAddress = new byte [ IF _ MAX _ PHYS _ ADDRESS _ LENGTH ] ; <nl> - public byte [ ] PermanentPhysicalAddress = new byte [ IF _ MAX _ PHYS _ ADDRESS _ LENGTH ] ; <nl> - public int Mtu ; <nl> - public int Type ; <nl> - / / enums <nl> - public int TunnelType ; <nl> - public int MediaType ; <nl> - public int PhysicalMediumType ; <nl> - public int AccessType ; <nl> - public int DirectionType ; <nl> - / / 8 - bit structure <nl> - public byte InterfaceAndOperStatusFlags ; <nl> - / / enums <nl> - public int OperStatus ; <nl> - public int AdminStatus ; <nl> - public int MediaConnectState ; <nl> - public GUID NetworkGuid ; <nl> - public int ConnectionType ; <nl> - public long TransmitLinkSpeed ; <nl> - public long ReceiveLinkSpeed ; <nl> - public long InOctets ; <nl> - public long InUcastPkts ; <nl> - public long InNUcastPkts ; <nl> - public long InDiscards ; <nl> - public long InErrors ; <nl> - public long InUnknownProtos ; <nl> - public long InUcastOctets ; <nl> - public long InMulticastOctets ; <nl> - public long InBroadcastOctets ; <nl> - public long OutOctets ; <nl> - public long OutUcastPkts ; <nl> - public long OutNUcastPkts ; <nl> - public long OutDiscards ; <nl> - public long OutErrors ; <nl> - public long OutUcastOctets ; <nl> - public long OutMulticastOctets ; <nl> - public long OutBroadcastOctets ; <nl> - public long OutQLen ; <nl> - } <nl> - <nl> - / * * <nl> - * The IP _ ADDRESS _ STRING structure stores an IPv4 address in dotted decimal <nl> - * notation . The IP _ ADDRESS _ STRING structure definition is also the type <nl> - * definition for the IP _ MASK _ STRING structure . <nl> - * <nl> - * @ see < A HREF = <nl> - * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - ip _ address _ string " > IP _ ADDRESS _ STRING < / A > <nl> - * / <nl> - @ FieldOrder ( { " String " } ) <nl> - class IP _ ADDRESS _ STRING extends Structure { <nl> - / / Null terminated string <nl> - / / up to 3 chars ( decimal 0 - 255 ) and dot <nl> - / / ending with null <nl> - public byte [ ] String = new byte [ 16 ] ; <nl> - } <nl> - <nl> - / * * <nl> - * The IP _ ADDR _ STRING structure represents a node in a linked - list of IPv4 <nl> - * addresses . <nl> - * <nl> - * @ see < A HREF = <nl> - * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - _ ip _ addr _ string " > IP _ ADDR _ STRING < / A > <nl> - * / <nl> - @ FieldOrder ( { " Next " , " IpAddress " , " IpMask " , " Context " } ) <nl> - class IP _ ADDR _ STRING extends Structure { <nl> - public IP _ ADDR _ STRING . ByReference Next ; <nl> - public IP _ ADDRESS _ STRING IpAddress ; <nl> - public IP _ ADDRESS _ STRING IpMask ; <nl> - public int Context ; <nl> - <nl> - public static class ByReference extends IP _ ADDR _ STRING implements Structure . ByReference { <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * The FIXED _ INFO structure contains information that is the same across all <nl> - * the interfaces on a computer . <nl> - * <nl> - * @ see < A HREF = <nl> - * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - fixed _ info _ w2ksp1 " > FIXED _ INFO < / A > <nl> - * / <nl> - @ FieldOrder ( { " HostName " , " DomainName " , " CurrentDnsServer " , " DnsServerList " , " NodeType " , " ScopeId " , " EnableRouting " , <nl> - " EnableProxy " , " EnableDns " } ) <nl> - class FIXED _ INFO extends Structure { <nl> - public byte [ ] HostName = new byte [ MAX _ HOSTNAME _ LEN + 4 ] ; <nl> - public byte [ ] DomainName = new byte [ MAX _ DOMAIN _ NAME _ LEN + 4 ] ; <nl> - public IP _ ADDR _ STRING . ByReference CurrentDnsServer ; / / IP _ ADDR _ STRING <nl> - public IP _ ADDR _ STRING DnsServerList ; <nl> - public int NodeType ; <nl> - public byte [ ] ScopeId = new byte [ MAX _ SCOPE _ ID _ LEN + 4 ] ; <nl> - public int EnableRouting ; <nl> - public int EnableProxy ; <nl> - public int EnableDns ; <nl> - <nl> - public FIXED _ INFO ( Pointer p ) { <nl> - super ( p ) ; <nl> - read ( ) ; <nl> - } <nl> - <nl> - public FIXED _ INFO ( ) { <nl> - super ( ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * The GetIfEntry function retrieves information for the specified interface <nl> - * on the local computer . <nl> - * <nl> - * The dwIndex member in the MIB _ IFROW structure pointed to by the pIfRow <nl> - * parameter must be initialized to a valid network interface index <nl> - * retrieved by a previous call to the GetIfTable , GetIfTable2 , or <nl> - * GetIfTable2Ex function . The GetIfEntry function will fail if the dwIndex <nl> - * member of the MIB _ IFROW pointed to by the pIfRow parameter does not match <nl> - * an existing interface index on the local computer . <nl> - * <nl> - * @ param pIfRow <nl> - * A pointer to a MIB _ IFROW structure that , on successful return , <nl> - * receives information for an interface on the local computer . <nl> - * On input , set the dwIndex member of MIB _ IFROW to the index of <nl> - * the interface for which to retrieve information . <nl> - * @ return If the function succeeds , the return value is NO _ ERROR . <nl> - * / <nl> - int GetIfEntry ( MIB _ IFROW pIfRow ) ; <nl> - <nl> - / * * <nl> - * The GetIfEntry2 function retrieves information for the specified <nl> - * interface on the local computer . <nl> - * <nl> - * On input , at least one of the following members in the MIB _ IF _ ROW2 <nl> - * structure passed in the Row parameter must be initialized : InterfaceLuid <nl> - * or InterfaceIndex . The fields are used in the order listed above . So if <nl> - * the InterfaceLuid is specified , then this member is used to determine the <nl> - * interface . If no value was set for the InterfaceLuid member ( the value of <nl> - * this member was set to zero ) , then the InterfaceIndex member is next used <nl> - * to determine the interface . On output , the remaining fields of the <nl> - * MIB _ IF _ ROW2 structure pointed to by the Row parameter are filled in . <nl> - * <nl> - * @ param pIfRow2 <nl> - * A pointer to a MIB _ IF _ ROW2 structure that , on successful <nl> - * return , receives information for an interface on the local <nl> - * computer . On input , the InterfaceLuid or the InterfaceIndex <nl> - * member of the MIB _ IF _ ROW2 must be set to the interface for <nl> - * which to retrieve information . <nl> - * @ return If the function succeeds , the return value is NO _ ERROR . <nl> - * / <nl> - int GetIfEntry2 ( MIB _ IF _ ROW2 pIfRow2 ) ; <nl> - <nl> - / * * <nl> - * The GetNetworkParams function retrieves network parameters for the local <nl> - * computer . <nl> - * <nl> - * @ param pFixedInfo <nl> - * A pointer to a buffer that contains a FIXED _ INFO structure <nl> - * that receives the network parameters for the local computer , <nl> - * if the function was successful . This buffer must be allocated <nl> - * by the caller prior to calling the GetNetworkParams function . <nl> - * @ param pOutBufLen <nl> - * A pointer to a ULONG variable that specifies the size of the <nl> - * FIXED _ INFO structure . If this size is insufficient to hold the <nl> - * information , GetNetworkParams fills in this variable with the <nl> - * required size , and returns an error code of <nl> - * ERROR _ BUFFER _ OVERFLOW . <nl> - * @ return If the function succeeds , the return value is ERROR _ SUCCESS . <nl> - * / <nl> - int GetNetworkParams ( FIXED _ INFO pFixedInfo , IntByReference pOutBufLen ) ; <nl> - } <nl> - <nl> + / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved <nl> + * <nl> + * The contents of this file is dual - licensed under 2 <nl> + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and <nl> + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . <nl> + * <nl> + * You can freely decide which license you want to apply to <nl> + * the project . <nl> + * <nl> + * You may obtain a copy of the LGPL License at : <nl> + * <nl> + * http : / / www . gnu . org / licenses / licenses . html <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " LGPL2 . 1 " . <nl> + * <nl> + * You may obtain a copy of the Apache License at : <nl> + * <nl> + * http : / / www . apache . org / licenses / <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " AL2 . 0 " . <nl> + * / <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import com . sun . jna . Library ; <nl> + import com . sun . jna . Native ; <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . Structure ; <nl> + import com . sun . jna . Structure . FieldOrder ; <nl> + import com . sun . jna . platform . win32 . Guid . GUID ; <nl> + import com . sun . jna . ptr . IntByReference ; <nl> + import com . sun . jna . win32 . W32APIOptions ; <nl> + <nl> + / * * <nl> + * Windows IP Helper API <nl> + * <nl> + * @ see < A HREF = <nl> + * " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa373083 ( v = vs . 85 ) . aspx " > IP <nl> + * Helper Reference < / A > <nl> + * / <nl> + public interface IPHlpAPI extends Library { <nl> + IPHlpAPI INSTANCE = Native . load ( " IPHlpAPI " , IPHlpAPI . class , W32APIOptions . DEFAULT _ OPTIONS ) ; <nl> + <nl> + int IF _ MAX _ STRING _ SIZE = 256 ; <nl> + int IF _ MAX _ PHYS _ ADDRESS _ LENGTH = 32 ; <nl> + int MAX _ INTERFACE _ NAME _ LEN = 256 ; <nl> + int MAXLEN _ IFDESCR = 256 ; <nl> + int MAXLEN _ PHYSADDR = 8 ; <nl> + int MAX _ HOSTNAME _ LEN = 128 ; <nl> + int MAX _ DOMAIN _ NAME _ LEN = 128 ; <nl> + int MAX _ SCOPE _ ID _ LEN = 256 ; <nl> + <nl> + / * * <nl> + * The MIB _ IFROW structure stores information about a particular interface . <nl> + * <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / previous - versions / windows / desktop / api / ifmib / ns - ifmib - _ mib _ ifrow " > MIB _ IFROW < / A > <nl> + * / <nl> + @ FieldOrder ( { " wszName " , " dwIndex " , " dwType " , " dwMtu " , " dwSpeed " , " dwPhysAddrLen " , " bPhysAddr " , " dwAdminStatus " , <nl> + " dwOperStatus " , " dwLastChange " , " dwInOctets " , " dwInUcastPkts " , " dwInNUcastPkts " , " dwInDiscards " , <nl> + " dwInErrors " , " dwInUnknownProtos " , " dwOutOctets " , " dwOutUcastPkts " , " dwOutNUcastPkts " , " dwOutDiscards " , <nl> + " dwOutErrors " , " dwOutQLen " , " dwDescrLen " , " bDescr " } ) <nl> + class MIB _ IFROW extends Structure { <nl> + public char [ ] wszName = new char [ MAX _ INTERFACE _ NAME _ LEN ] ; <nl> + public int dwIndex ; <nl> + public int dwType ; <nl> + public int dwMtu ; <nl> + public int dwSpeed ; <nl> + public int dwPhysAddrLen ; <nl> + public byte [ ] bPhysAddr = new byte [ MAXLEN _ PHYSADDR ] ; <nl> + public int dwAdminStatus ; <nl> + public int dwOperStatus ; <nl> + public int dwLastChange ; <nl> + public int dwInOctets ; <nl> + public int dwInUcastPkts ; <nl> + public int dwInNUcastPkts ; <nl> + public int dwInDiscards ; <nl> + public int dwInErrors ; <nl> + public int dwInUnknownProtos ; <nl> + public int dwOutOctets ; <nl> + public int dwOutUcastPkts ; <nl> + public int dwOutNUcastPkts ; <nl> + public int dwOutDiscards ; <nl> + public int dwOutErrors ; <nl> + public int dwOutQLen ; <nl> + public int dwDescrLen ; <nl> + public byte [ ] bDescr = new byte [ MAXLEN _ IFDESCR ] ; <nl> + } <nl> + <nl> + / * * <nl> + * The MIB _ IF _ ROW2 structure stores information about a particular <nl> + * interface . <nl> + * <nl> + * @ see < A HREF = <nl> + * " https : / / msdn . microsoft . com / library / windows / hardware / ff559214 " > MIB _ IF _ ROW2 < / A > <nl> + * / <nl> + @ FieldOrder ( { " InterfaceLuid " , " InterfaceIndex " , " InterfaceGuid " , " Alias " , " Description " , " PhysicalAddressLength " , <nl> + " PhysicalAddress " , " PermanentPhysicalAddress " , " Mtu " , " Type " , " TunnelType " , " MediaType " , <nl> + " PhysicalMediumType " , " AccessType " , " DirectionType " , " InterfaceAndOperStatusFlags " , " OperStatus " , <nl> + " AdminStatus " , " MediaConnectState " , " NetworkGuid " , " ConnectionType " , " TransmitLinkSpeed " , <nl> + " ReceiveLinkSpeed " , " InOctets " , " InUcastPkts " , " InNUcastPkts " , " InDiscards " , " InErrors " , " InUnknownProtos " , <nl> + " InUcastOctets " , " InMulticastOctets " , " InBroadcastOctets " , " OutOctets " , " OutUcastPkts " , " OutNUcastPkts " , <nl> + " OutDiscards " , " OutErrors " , " OutUcastOctets " , " OutMulticastOctets " , " OutBroadcastOctets " , " OutQLen " } ) <nl> + class MIB _ IF _ ROW2 extends Structure { <nl> + public long InterfaceLuid ; / / 64 - bit union NET _ LUID <nl> + public int InterfaceIndex ; <nl> + public GUID InterfaceGuid ; <nl> + public char [ ] Alias = new char [ IF _ MAX _ STRING _ SIZE + 1 ] ; <nl> + public char [ ] Description = new char [ IF _ MAX _ STRING _ SIZE + 1 ] ; <nl> + public int PhysicalAddressLength ; <nl> + public byte [ ] PhysicalAddress = new byte [ IF _ MAX _ PHYS _ ADDRESS _ LENGTH ] ; <nl> + public byte [ ] PermanentPhysicalAddress = new byte [ IF _ MAX _ PHYS _ ADDRESS _ LENGTH ] ; <nl> + public int Mtu ; <nl> + public int Type ; <nl> + / / enums <nl> + public int TunnelType ; <nl> + public int MediaType ; <nl> + public int PhysicalMediumType ; <nl> + public int AccessType ; <nl> + public int DirectionType ; <nl> + / / 8 - bit structure <nl> + public byte InterfaceAndOperStatusFlags ; <nl> + / / enums <nl> + public int OperStatus ; <nl> + public int AdminStatus ; <nl> + public int MediaConnectState ; <nl> + public GUID NetworkGuid ; <nl> + public int ConnectionType ; <nl> + public long TransmitLinkSpeed ; <nl> + public long ReceiveLinkSpeed ; <nl> + public long InOctets ; <nl> + public long InUcastPkts ; <nl> + public long InNUcastPkts ; <nl> + public long InDiscards ; <nl> + public long InErrors ; <nl> + public long InUnknownProtos ; <nl> + public long InUcastOctets ; <nl> + public long InMulticastOctets ; <nl> + public long InBroadcastOctets ; <nl> + public long OutOctets ; <nl> + public long OutUcastPkts ; <nl> + public long OutNUcastPkts ; <nl> + public long OutDiscards ; <nl> + public long OutErrors ; <nl> + public long OutUcastOctets ; <nl> + public long OutMulticastOctets ; <nl> + public long OutBroadcastOctets ; <nl> + public long OutQLen ; <nl> + } <nl> + <nl> + / * * <nl> + * The IP _ ADDRESS _ STRING structure stores an IPv4 address in dotted decimal <nl> + * notation . The IP _ ADDRESS _ STRING structure definition is also the type <nl> + * definition for the IP _ MASK _ STRING structure . <nl> + * <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - ip _ address _ string " > IP _ ADDRESS _ STRING < / A > <nl> + * / <nl> + @ FieldOrder ( { " String " } ) <nl> + class IP _ ADDRESS _ STRING extends Structure { <nl> + / / Null terminated string <nl> + / / up to 3 chars ( decimal 0 - 255 ) and dot <nl> + / / ending with null <nl> + public byte [ ] String = new byte [ 16 ] ; <nl> + } <nl> + <nl> + / * * <nl> + * The IP _ ADDR _ STRING structure represents a node in a linked - list of IPv4 <nl> + * addresses . <nl> + * <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - _ ip _ addr _ string " > IP _ ADDR _ STRING < / A > <nl> + * / <nl> + @ FieldOrder ( { " Next " , " IpAddress " , " IpMask " , " Context " } ) <nl> + class IP _ ADDR _ STRING extends Structure { <nl> + public IP _ ADDR _ STRING . ByReference Next ; <nl> + public IP _ ADDRESS _ STRING IpAddress ; <nl> + public IP _ ADDRESS _ STRING IpMask ; <nl> + public int Context ; <nl> + <nl> + public static class ByReference extends IP _ ADDR _ STRING implements Structure . ByReference { <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * The FIXED _ INFO structure contains information that is the same across all <nl> + * the interfaces on a computer . <nl> + * <nl> + * @ see < A HREF = <nl> + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - fixed _ info _ w2ksp1 " > FIXED _ INFO < / A > <nl> + * / <nl> + @ FieldOrder ( { " HostName " , " DomainName " , " CurrentDnsServer " , " DnsServerList " , " NodeType " , " ScopeId " , " EnableRouting " , <nl> + " EnableProxy " , " EnableDns " } ) <nl> + class FIXED _ INFO extends Structure { <nl> + public byte [ ] HostName = new byte [ MAX _ HOSTNAME _ LEN + 4 ] ; <nl> + public byte [ ] DomainName = new byte [ MAX _ DOMAIN _ NAME _ LEN + 4 ] ; <nl> + public IP _ ADDR _ STRING . ByReference CurrentDnsServer ; <nl> + public IP _ ADDR _ STRING DnsServerList ; <nl> + public int NodeType ; <nl> + public byte [ ] ScopeId = new byte [ MAX _ SCOPE _ ID _ LEN + 4 ] ; <nl> + public int EnableRouting ; <nl> + public int EnableProxy ; <nl> + public int EnableDns ; <nl> + <nl> + public FIXED _ INFO ( Pointer p ) { <nl> + super ( p ) ; <nl> + read ( ) ; <nl> + } <nl> + <nl> + public FIXED _ INFO ( ) { <nl> + super ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * The GetIfEntry function retrieves information for the specified interface <nl> + * on the local computer . <nl> + * <nl> + * The dwIndex member in the MIB _ IFROW structure pointed to by the pIfRow <nl> + * parameter must be initialized to a valid network interface index <nl> + * retrieved by a previous call to the GetIfTable , GetIfTable2 , or <nl> + * GetIfTable2Ex function . The GetIfEntry function will fail if the dwIndex <nl> + * member of the MIB _ IFROW pointed to by the pIfRow parameter does not match <nl> + * an existing interface index on the local computer . <nl> + * <nl> + * @ param pIfRow <nl> + * A pointer to a MIB _ IFROW structure that , on successful return , <nl> + * receives information for an interface on the local computer . <nl> + * On input , set the dwIndex member of MIB _ IFROW to the index of <nl> + * the interface for which to retrieve information . <nl> + * @ return If the function succeeds , the return value is NO _ ERROR . <nl> + * / <nl> + int GetIfEntry ( MIB _ IFROW pIfRow ) ; <nl> + <nl> + / * * <nl> + * The GetIfEntry2 function retrieves information for the specified <nl> + * interface on the local computer . <nl> + * <nl> + * On input , at least one of the following members in the MIB _ IF _ ROW2 <nl> + * structure passed in the Row parameter must be initialized : InterfaceLuid <nl> + * or InterfaceIndex . The fields are used in the order listed above . So if <nl> + * the InterfaceLuid is specified , then this member is used to determine the <nl> + * interface . If no value was set for the InterfaceLuid member ( the value of <nl> + * this member was set to zero ) , then the InterfaceIndex member is next used <nl> + * to determine the interface . On output , the remaining fields of the <nl> + * MIB _ IF _ ROW2 structure pointed to by the Row parameter are filled in . <nl> + * <nl> + * @ param pIfRow2 <nl> + * A pointer to a MIB _ IF _ ROW2 structure that , on successful <nl> + * return , receives information for an interface on the local <nl> + * computer . On input , the InterfaceLuid or the InterfaceIndex <nl> + * member of the MIB _ IF _ ROW2 must be set to the interface for <nl> + * which to retrieve information . <nl> + * @ return If the function succeeds , the return value is NO _ ERROR . <nl> + * / <nl> + int GetIfEntry2 ( MIB _ IF _ ROW2 pIfRow2 ) ; <nl> + <nl> + / * * <nl> + * The GetNetworkParams function retrieves network parameters for the local <nl> + * computer . <nl> + * <nl> + * @ param pFixedInfo <nl> + * A pointer to a buffer that contains a FIXED _ INFO structure <nl> + * that receives the network parameters for the local computer , <nl> + * if the function was successful . This buffer must be allocated <nl> + * by the caller prior to calling the GetNetworkParams function . <nl> + * @ param pOutBufLen <nl> + * A pointer to a ULONG variable that specifies the size of the <nl> + * FIXED _ INFO structure . If this size is insufficient to hold the <nl> + * information , GetNetworkParams fills in this variable with the <nl> + * required size , and returns an error code of <nl> + * ERROR _ BUFFER _ OVERFLOW . <nl> + * @ return If the function succeeds , the return value is ERROR _ SUCCESS . <nl> + * / <nl> + int GetNetworkParams ( Pointer pFixedInfo , IntByReference pOutBufLen ) ; <nl> + } <nl> + <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / IPHlpAPITest . java b / contrib / platform / test / com / sun / jna / platform / win32 / IPHlpAPITest . java <nl> index e59ec5c . . 731fbaf 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / IPHlpAPITest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / IPHlpAPITest . java <nl> @ @ - 116 , 11 + 116 , 12 @ @ public class IPHlpAPITest { <nl> <nl> IntByReference bufferSize = new IntByReference ( ) ; <nl> assertEquals ( WinError . ERROR _ BUFFER _ OVERFLOW , IPHlpAPI . INSTANCE . GetNetworkParams ( null , bufferSize ) ) ; <nl> - FIXED _ INFO buffer = new FIXED _ INFO ( new Memory ( bufferSize . getValue ( ) ) ) ; <nl> + Memory buffer = new Memory ( bufferSize . getValue ( ) ) ; <nl> assertEquals ( WinError . ERROR _ SUCCESS , IPHlpAPI . INSTANCE . GetNetworkParams ( buffer , bufferSize ) ) ; <nl> + FIXED _ INFO fixedInfo = new FIXED _ INFO ( buffer ) ; <nl> <nl> / / Check all DNS servers are valid IPs <nl> - IPHlpAPI . IP _ ADDR _ STRING dns = buffer . DnsServerList ; <nl> + IPHlpAPI . IP _ ADDR _ STRING dns = fixedInfo . DnsServerList ; <nl> while ( dns ! = null ) { <nl> / / Start with 16 - char byte array <nl> String addr = new String ( dns . IpAddress . String ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / IPHlpAPI . java b / contrib / platform / src / com / sun / jna / platform / win32 / IPHlpAPI . java 
 index 4e4e4e7 . . 1009533 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / IPHlpAPI . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / IPHlpAPI . java 
 @ @ - 1 , 278 + 1 , 278 @ @ 
 - / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved 
 - * 
 - * The contents of this file is dual - licensed under 2 
 - * alternative Open Source / Free licenses : LGPL 2 . 1 or later and 
 - * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . 
 - * 
 - * You can freely decide which license you want to apply to 
 - * the project . 
 - * 
 - * You may obtain a copy of the LGPL License at : 
 - * 
 - * http : / / www . gnu . org / licenses / licenses . html 
 - * 
 - * A copy is also included in the downloadable source code package 
 - * containing JNA , in file " LGPL2 . 1 " . 
 - * 
 - * You may obtain a copy of the Apache License at : 
 - * 
 - * http : / / www . apache . org / licenses / 
 - * 
 - * A copy is also included in the downloadable source code package 
 - * containing JNA , in file " AL2 . 0 " . 
 - * / 
 - package com . sun . jna . platform . win32 ; 
 - 
 - import com . sun . jna . Library ; 
 - import com . sun . jna . Native ; 
 - import com . sun . jna . Pointer ; 
 - import com . sun . jna . Structure ; 
 - import com . sun . jna . Structure . FieldOrder ; 
 - import com . sun . jna . platform . win32 . Guid . GUID ; 
 - import com . sun . jna . ptr . IntByReference ; 
 - import com . sun . jna . win32 . W32APIOptions ; 
 - 
 - / * * 
 - * Windows IP Helper API 
 - * 
 - * @ see < A HREF = 
 - * " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa373083 ( v = vs . 85 ) . aspx " > IP 
 - * Helper Reference < / A > 
 - * / 
 - public interface IPHlpAPI extends Library { 
 - IPHlpAPI INSTANCE = Native . load ( " IPHlpAPI " , IPHlpAPI . class , W32APIOptions . DEFAULT _ OPTIONS ) ; 
 - 
 - int IF _ MAX _ STRING _ SIZE = 256 ; 
 - int IF _ MAX _ PHYS _ ADDRESS _ LENGTH = 32 ; 
 - int MAX _ INTERFACE _ NAME _ LEN = 256 ; 
 - int MAXLEN _ IFDESCR = 256 ; 
 - int MAXLEN _ PHYSADDR = 8 ; 
 - int MAX _ HOSTNAME _ LEN = 128 ; 
 - int MAX _ DOMAIN _ NAME _ LEN = 128 ; 
 - int MAX _ SCOPE _ ID _ LEN = 256 ; 
 - 
 - / * * 
 - * The MIB _ IFROW structure stores information about a particular interface . 
 - * 
 - * @ see < A HREF = 
 - * " https : / / docs . microsoft . com / en - us / previous - versions / windows / desktop / api / ifmib / ns - ifmib - _ mib _ ifrow " > MIB _ IFROW < / A > 
 - * / 
 - @ FieldOrder ( { " wszName " , " dwIndex " , " dwType " , " dwMtu " , " dwSpeed " , " dwPhysAddrLen " , " bPhysAddr " , " dwAdminStatus " , 
 - " dwOperStatus " , " dwLastChange " , " dwInOctets " , " dwInUcastPkts " , " dwInNUcastPkts " , " dwInDiscards " , 
 - " dwInErrors " , " dwInUnknownProtos " , " dwOutOctets " , " dwOutUcastPkts " , " dwOutNUcastPkts " , " dwOutDiscards " , 
 - " dwOutErrors " , " dwOutQLen " , " dwDescrLen " , " bDescr " } ) 
 - class MIB _ IFROW extends Structure { 
 - public char [ ] wszName = new char [ MAX _ INTERFACE _ NAME _ LEN ] ; 
 - public int dwIndex ; 
 - public int dwType ; 
 - public int dwMtu ; 
 - public int dwSpeed ; 
 - public int dwPhysAddrLen ; 
 - public byte [ ] bPhysAddr = new byte [ MAXLEN _ PHYSADDR ] ; 
 - public int dwAdminStatus ; 
 - public int dwOperStatus ; 
 - public int dwLastChange ; 
 - public int dwInOctets ; 
 - public int dwInUcastPkts ; 
 - public int dwInNUcastPkts ; 
 - public int dwInDiscards ; 
 - public int dwInErrors ; 
 - public int dwInUnknownProtos ; 
 - public int dwOutOctets ; 
 - public int dwOutUcastPkts ; 
 - public int dwOutNUcastPkts ; 
 - public int dwOutDiscards ; 
 - public int dwOutErrors ; 
 - public int dwOutQLen ; 
 - public int dwDescrLen ; 
 - public byte [ ] bDescr = new byte [ MAXLEN _ IFDESCR ] ; 
 - } 
 - 
 - / * * 
 - * The MIB _ IF _ ROW2 structure stores information about a particular 
 - * interface . 
 - * 
 - * @ see < A HREF = 
 - * " https : / / msdn . microsoft . com / library / windows / hardware / ff559214 " > MIB _ IF _ ROW2 < / A > 
 - * / 
 - @ FieldOrder ( { " InterfaceLuid " , " InterfaceIndex " , " InterfaceGuid " , " Alias " , " Description " , " PhysicalAddressLength " , 
 - " PhysicalAddress " , " PermanentPhysicalAddress " , " Mtu " , " Type " , " TunnelType " , " MediaType " , 
 - " PhysicalMediumType " , " AccessType " , " DirectionType " , " InterfaceAndOperStatusFlags " , " OperStatus " , 
 - " AdminStatus " , " MediaConnectState " , " NetworkGuid " , " ConnectionType " , " TransmitLinkSpeed " , 
 - " ReceiveLinkSpeed " , " InOctets " , " InUcastPkts " , " InNUcastPkts " , " InDiscards " , " InErrors " , " InUnknownProtos " , 
 - " InUcastOctets " , " InMulticastOctets " , " InBroadcastOctets " , " OutOctets " , " OutUcastPkts " , " OutNUcastPkts " , 
 - " OutDiscards " , " OutErrors " , " OutUcastOctets " , " OutMulticastOctets " , " OutBroadcastOctets " , " OutQLen " } ) 
 - class MIB _ IF _ ROW2 extends Structure { 
 - public long InterfaceLuid ; / / 64 - bit union NET _ LUID 
 - public int InterfaceIndex ; 
 - public GUID InterfaceGuid ; 
 - public char [ ] Alias = new char [ IF _ MAX _ STRING _ SIZE + 1 ] ; 
 - public char [ ] Description = new char [ IF _ MAX _ STRING _ SIZE + 1 ] ; 
 - public int PhysicalAddressLength ; 
 - public byte [ ] PhysicalAddress = new byte [ IF _ MAX _ PHYS _ ADDRESS _ LENGTH ] ; 
 - public byte [ ] PermanentPhysicalAddress = new byte [ IF _ MAX _ PHYS _ ADDRESS _ LENGTH ] ; 
 - public int Mtu ; 
 - public int Type ; 
 - / / enums 
 - public int TunnelType ; 
 - public int MediaType ; 
 - public int PhysicalMediumType ; 
 - public int AccessType ; 
 - public int DirectionType ; 
 - / / 8 - bit structure 
 - public byte InterfaceAndOperStatusFlags ; 
 - / / enums 
 - public int OperStatus ; 
 - public int AdminStatus ; 
 - public int MediaConnectState ; 
 - public GUID NetworkGuid ; 
 - public int ConnectionType ; 
 - public long TransmitLinkSpeed ; 
 - public long ReceiveLinkSpeed ; 
 - public long InOctets ; 
 - public long InUcastPkts ; 
 - public long InNUcastPkts ; 
 - public long InDiscards ; 
 - public long InErrors ; 
 - public long InUnknownProtos ; 
 - public long InUcastOctets ; 
 - public long InMulticastOctets ; 
 - public long InBroadcastOctets ; 
 - public long OutOctets ; 
 - public long OutUcastPkts ; 
 - public long OutNUcastPkts ; 
 - public long OutDiscards ; 
 - public long OutErrors ; 
 - public long OutUcastOctets ; 
 - public long OutMulticastOctets ; 
 - public long OutBroadcastOctets ; 
 - public long OutQLen ; 
 - } 
 - 
 - / * * 
 - * The IP _ ADDRESS _ STRING structure stores an IPv4 address in dotted decimal 
 - * notation . The IP _ ADDRESS _ STRING structure definition is also the type 
 - * definition for the IP _ MASK _ STRING structure . 
 - * 
 - * @ see < A HREF = 
 - * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - ip _ address _ string " > IP _ ADDRESS _ STRING < / A > 
 - * / 
 - @ FieldOrder ( { " String " } ) 
 - class IP _ ADDRESS _ STRING extends Structure { 
 - / / Null terminated string 
 - / / up to 3 chars ( decimal 0 - 255 ) and dot 
 - / / ending with null 
 - public byte [ ] String = new byte [ 16 ] ; 
 - } 
 - 
 - / * * 
 - * The IP _ ADDR _ STRING structure represents a node in a linked - list of IPv4 
 - * addresses . 
 - * 
 - * @ see < A HREF = 
 - * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - _ ip _ addr _ string " > IP _ ADDR _ STRING < / A > 
 - * / 
 - @ FieldOrder ( { " Next " , " IpAddress " , " IpMask " , " Context " } ) 
 - class IP _ ADDR _ STRING extends Structure { 
 - public IP _ ADDR _ STRING . ByReference Next ; 
 - public IP _ ADDRESS _ STRING IpAddress ; 
 - public IP _ ADDRESS _ STRING IpMask ; 
 - public int Context ; 
 - 
 - public static class ByReference extends IP _ ADDR _ STRING implements Structure . ByReference { 
 - } 
 - } 
 - 
 - / * * 
 - * The FIXED _ INFO structure contains information that is the same across all 
 - * the interfaces on a computer . 
 - * 
 - * @ see < A HREF = 
 - * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - fixed _ info _ w2ksp1 " > FIXED _ INFO < / A > 
 - * / 
 - @ FieldOrder ( { " HostName " , " DomainName " , " CurrentDnsServer " , " DnsServerList " , " NodeType " , " ScopeId " , " EnableRouting " , 
 - " EnableProxy " , " EnableDns " } ) 
 - class FIXED _ INFO extends Structure { 
 - public byte [ ] HostName = new byte [ MAX _ HOSTNAME _ LEN + 4 ] ; 
 - public byte [ ] DomainName = new byte [ MAX _ DOMAIN _ NAME _ LEN + 4 ] ; 
 - public IP _ ADDR _ STRING . ByReference CurrentDnsServer ; / / IP _ ADDR _ STRING 
 - public IP _ ADDR _ STRING DnsServerList ; 
 - public int NodeType ; 
 - public byte [ ] ScopeId = new byte [ MAX _ SCOPE _ ID _ LEN + 4 ] ; 
 - public int EnableRouting ; 
 - public int EnableProxy ; 
 - public int EnableDns ; 
 - 
 - public FIXED _ INFO ( Pointer p ) { 
 - super ( p ) ; 
 - read ( ) ; 
 - } 
 - 
 - public FIXED _ INFO ( ) { 
 - super ( ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * The GetIfEntry function retrieves information for the specified interface 
 - * on the local computer . 
 - * 
 - * The dwIndex member in the MIB _ IFROW structure pointed to by the pIfRow 
 - * parameter must be initialized to a valid network interface index 
 - * retrieved by a previous call to the GetIfTable , GetIfTable2 , or 
 - * GetIfTable2Ex function . The GetIfEntry function will fail if the dwIndex 
 - * member of the MIB _ IFROW pointed to by the pIfRow parameter does not match 
 - * an existing interface index on the local computer . 
 - * 
 - * @ param pIfRow 
 - * A pointer to a MIB _ IFROW structure that , on successful return , 
 - * receives information for an interface on the local computer . 
 - * On input , set the dwIndex member of MIB _ IFROW to the index of 
 - * the interface for which to retrieve information . 
 - * @ return If the function succeeds , the return value is NO _ ERROR . 
 - * / 
 - int GetIfEntry ( MIB _ IFROW pIfRow ) ; 
 - 
 - / * * 
 - * The GetIfEntry2 function retrieves information for the specified 
 - * interface on the local computer . 
 - * 
 - * On input , at least one of the following members in the MIB _ IF _ ROW2 
 - * structure passed in the Row parameter must be initialized : InterfaceLuid 
 - * or InterfaceIndex . The fields are used in the order listed above . So if 
 - * the InterfaceLuid is specified , then this member is used to determine the 
 - * interface . If no value was set for the InterfaceLuid member ( the value of 
 - * this member was set to zero ) , then the InterfaceIndex member is next used 
 - * to determine the interface . On output , the remaining fields of the 
 - * MIB _ IF _ ROW2 structure pointed to by the Row parameter are filled in . 
 - * 
 - * @ param pIfRow2 
 - * A pointer to a MIB _ IF _ ROW2 structure that , on successful 
 - * return , receives information for an interface on the local 
 - * computer . On input , the InterfaceLuid or the InterfaceIndex 
 - * member of the MIB _ IF _ ROW2 must be set to the interface for 
 - * which to retrieve information . 
 - * @ return If the function succeeds , the return value is NO _ ERROR . 
 - * / 
 - int GetIfEntry2 ( MIB _ IF _ ROW2 pIfRow2 ) ; 
 - 
 - / * * 
 - * The GetNetworkParams function retrieves network parameters for the local 
 - * computer . 
 - * 
 - * @ param pFixedInfo 
 - * A pointer to a buffer that contains a FIXED _ INFO structure 
 - * that receives the network parameters for the local computer , 
 - * if the function was successful . This buffer must be allocated 
 - * by the caller prior to calling the GetNetworkParams function . 
 - * @ param pOutBufLen 
 - * A pointer to a ULONG variable that specifies the size of the 
 - * FIXED _ INFO structure . If this size is insufficient to hold the 
 - * information , GetNetworkParams fills in this variable with the 
 - * required size , and returns an error code of 
 - * ERROR _ BUFFER _ OVERFLOW . 
 - * @ return If the function succeeds , the return value is ERROR _ SUCCESS . 
 - * / 
 - int GetNetworkParams ( FIXED _ INFO pFixedInfo , IntByReference pOutBufLen ) ; 
 - } 
 - 
 + / * Copyright ( c ) 2018 Daniel Widdis , All Rights Reserved 
 + * 
 + * The contents of this file is dual - licensed under 2 
 + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and 
 + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . 
 + * 
 + * You can freely decide which license you want to apply to 
 + * the project . 
 + * 
 + * You may obtain a copy of the LGPL License at : 
 + * 
 + * http : / / www . gnu . org / licenses / licenses . html 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " LGPL2 . 1 " . 
 + * 
 + * You may obtain a copy of the Apache License at : 
 + * 
 + * http : / / www . apache . org / licenses / 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " AL2 . 0 " . 
 + * / 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import com . sun . jna . Library ; 
 + import com . sun . jna . Native ; 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . Structure ; 
 + import com . sun . jna . Structure . FieldOrder ; 
 + import com . sun . jna . platform . win32 . Guid . GUID ; 
 + import com . sun . jna . ptr . IntByReference ; 
 + import com . sun . jna . win32 . W32APIOptions ; 
 + 
 + / * * 
 + * Windows IP Helper API 
 + * 
 + * @ see < A HREF = 
 + * " https : / / msdn . microsoft . com / en - us / library / windows / desktop / aa373083 ( v = vs . 85 ) . aspx " > IP 
 + * Helper Reference < / A > 
 + * / 
 + public interface IPHlpAPI extends Library { 
 + IPHlpAPI INSTANCE = Native . load ( " IPHlpAPI " , IPHlpAPI . class , W32APIOptions . DEFAULT _ OPTIONS ) ; 
 + 
 + int IF _ MAX _ STRING _ SIZE = 256 ; 
 + int IF _ MAX _ PHYS _ ADDRESS _ LENGTH = 32 ; 
 + int MAX _ INTERFACE _ NAME _ LEN = 256 ; 
 + int MAXLEN _ IFDESCR = 256 ; 
 + int MAXLEN _ PHYSADDR = 8 ; 
 + int MAX _ HOSTNAME _ LEN = 128 ; 
 + int MAX _ DOMAIN _ NAME _ LEN = 128 ; 
 + int MAX _ SCOPE _ ID _ LEN = 256 ; 
 + 
 + / * * 
 + * The MIB _ IFROW structure stores information about a particular interface . 
 + * 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / previous - versions / windows / desktop / api / ifmib / ns - ifmib - _ mib _ ifrow " > MIB _ IFROW < / A > 
 + * / 
 + @ FieldOrder ( { " wszName " , " dwIndex " , " dwType " , " dwMtu " , " dwSpeed " , " dwPhysAddrLen " , " bPhysAddr " , " dwAdminStatus " , 
 + " dwOperStatus " , " dwLastChange " , " dwInOctets " , " dwInUcastPkts " , " dwInNUcastPkts " , " dwInDiscards " , 
 + " dwInErrors " , " dwInUnknownProtos " , " dwOutOctets " , " dwOutUcastPkts " , " dwOutNUcastPkts " , " dwOutDiscards " , 
 + " dwOutErrors " , " dwOutQLen " , " dwDescrLen " , " bDescr " } ) 
 + class MIB _ IFROW extends Structure { 
 + public char [ ] wszName = new char [ MAX _ INTERFACE _ NAME _ LEN ] ; 
 + public int dwIndex ; 
 + public int dwType ; 
 + public int dwMtu ; 
 + public int dwSpeed ; 
 + public int dwPhysAddrLen ; 
 + public byte [ ] bPhysAddr = new byte [ MAXLEN _ PHYSADDR ] ; 
 + public int dwAdminStatus ; 
 + public int dwOperStatus ; 
 + public int dwLastChange ; 
 + public int dwInOctets ; 
 + public int dwInUcastPkts ; 
 + public int dwInNUcastPkts ; 
 + public int dwInDiscards ; 
 + public int dwInErrors ; 
 + public int dwInUnknownProtos ; 
 + public int dwOutOctets ; 
 + public int dwOutUcastPkts ; 
 + public int dwOutNUcastPkts ; 
 + public int dwOutDiscards ; 
 + public int dwOutErrors ; 
 + public int dwOutQLen ; 
 + public int dwDescrLen ; 
 + public byte [ ] bDescr = new byte [ MAXLEN _ IFDESCR ] ; 
 + } 
 + 
 + / * * 
 + * The MIB _ IF _ ROW2 structure stores information about a particular 
 + * interface . 
 + * 
 + * @ see < A HREF = 
 + * " https : / / msdn . microsoft . com / library / windows / hardware / ff559214 " > MIB _ IF _ ROW2 < / A > 
 + * / 
 + @ FieldOrder ( { " InterfaceLuid " , " InterfaceIndex " , " InterfaceGuid " , " Alias " , " Description " , " PhysicalAddressLength " , 
 + " PhysicalAddress " , " PermanentPhysicalAddress " , " Mtu " , " Type " , " TunnelType " , " MediaType " , 
 + " PhysicalMediumType " , " AccessType " , " DirectionType " , " InterfaceAndOperStatusFlags " , " OperStatus " , 
 + " AdminStatus " , " MediaConnectState " , " NetworkGuid " , " ConnectionType " , " TransmitLinkSpeed " , 
 + " ReceiveLinkSpeed " , " InOctets " , " InUcastPkts " , " InNUcastPkts " , " InDiscards " , " InErrors " , " InUnknownProtos " , 
 + " InUcastOctets " , " InMulticastOctets " , " InBroadcastOctets " , " OutOctets " , " OutUcastPkts " , " OutNUcastPkts " , 
 + " OutDiscards " , " OutErrors " , " OutUcastOctets " , " OutMulticastOctets " , " OutBroadcastOctets " , " OutQLen " } ) 
 + class MIB _ IF _ ROW2 extends Structure { 
 + public long InterfaceLuid ; / / 64 - bit union NET _ LUID 
 + public int InterfaceIndex ; 
 + public GUID InterfaceGuid ; 
 + public char [ ] Alias = new char [ IF _ MAX _ STRING _ SIZE + 1 ] ; 
 + public char [ ] Description = new char [ IF _ MAX _ STRING _ SIZE + 1 ] ; 
 + public int PhysicalAddressLength ; 
 + public byte [ ] PhysicalAddress = new byte [ IF _ MAX _ PHYS _ ADDRESS _ LENGTH ] ; 
 + public byte [ ] PermanentPhysicalAddress = new byte [ IF _ MAX _ PHYS _ ADDRESS _ LENGTH ] ; 
 + public int Mtu ; 
 + public int Type ; 
 + / / enums 
 + public int TunnelType ; 
 + public int MediaType ; 
 + public int PhysicalMediumType ; 
 + public int AccessType ; 
 + public int DirectionType ; 
 + / / 8 - bit structure 
 + public byte InterfaceAndOperStatusFlags ; 
 + / / enums 
 + public int OperStatus ; 
 + public int AdminStatus ; 
 + public int MediaConnectState ; 
 + public GUID NetworkGuid ; 
 + public int ConnectionType ; 
 + public long TransmitLinkSpeed ; 
 + public long ReceiveLinkSpeed ; 
 + public long InOctets ; 
 + public long InUcastPkts ; 
 + public long InNUcastPkts ; 
 + public long InDiscards ; 
 + public long InErrors ; 
 + public long InUnknownProtos ; 
 + public long InUcastOctets ; 
 + public long InMulticastOctets ; 
 + public long InBroadcastOctets ; 
 + public long OutOctets ; 
 + public long OutUcastPkts ; 
 + public long OutNUcastPkts ; 
 + public long OutDiscards ; 
 + public long OutErrors ; 
 + public long OutUcastOctets ; 
 + public long OutMulticastOctets ; 
 + public long OutBroadcastOctets ; 
 + public long OutQLen ; 
 + } 
 + 
 + / * * 
 + * The IP _ ADDRESS _ STRING structure stores an IPv4 address in dotted decimal 
 + * notation . The IP _ ADDRESS _ STRING structure definition is also the type 
 + * definition for the IP _ MASK _ STRING structure . 
 + * 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - ip _ address _ string " > IP _ ADDRESS _ STRING < / A > 
 + * / 
 + @ FieldOrder ( { " String " } ) 
 + class IP _ ADDRESS _ STRING extends Structure { 
 + / / Null terminated string 
 + / / up to 3 chars ( decimal 0 - 255 ) and dot 
 + / / ending with null 
 + public byte [ ] String = new byte [ 16 ] ; 
 + } 
 + 
 + / * * 
 + * The IP _ ADDR _ STRING structure represents a node in a linked - list of IPv4 
 + * addresses . 
 + * 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - _ ip _ addr _ string " > IP _ ADDR _ STRING < / A > 
 + * / 
 + @ FieldOrder ( { " Next " , " IpAddress " , " IpMask " , " Context " } ) 
 + class IP _ ADDR _ STRING extends Structure { 
 + public IP _ ADDR _ STRING . ByReference Next ; 
 + public IP _ ADDRESS _ STRING IpAddress ; 
 + public IP _ ADDRESS _ STRING IpMask ; 
 + public int Context ; 
 + 
 + public static class ByReference extends IP _ ADDR _ STRING implements Structure . ByReference { 
 + } 
 + } 
 + 
 + / * * 
 + * The FIXED _ INFO structure contains information that is the same across all 
 + * the interfaces on a computer . 
 + * 
 + * @ see < A HREF = 
 + * " https : / / docs . microsoft . com / en - us / windows / desktop / api / iptypes / ns - iptypes - fixed _ info _ w2ksp1 " > FIXED _ INFO < / A > 
 + * / 
 + @ FieldOrder ( { " HostName " , " DomainName " , " CurrentDnsServer " , " DnsServerList " , " NodeType " , " ScopeId " , " EnableRouting " , 
 + " EnableProxy " , " EnableDns " } ) 
 + class FIXED _ INFO extends Structure { 
 + public byte [ ] HostName = new byte [ MAX _ HOSTNAME _ LEN + 4 ] ; 
 + public byte [ ] DomainName = new byte [ MAX _ DOMAIN _ NAME _ LEN + 4 ] ; 
 + public IP _ ADDR _ STRING . ByReference CurrentDnsServer ; 
 + public IP _ ADDR _ STRING DnsServerList ; 
 + public int NodeType ; 
 + public byte [ ] ScopeId = new byte [ MAX _ SCOPE _ ID _ LEN + 4 ] ; 
 + public int EnableRouting ; 
 + public int EnableProxy ; 
 + public int EnableDns ; 
 + 
 + public FIXED _ INFO ( Pointer p ) { 
 + super ( p ) ; 
 + read ( ) ; 
 + } 
 + 
 + public FIXED _ INFO ( ) { 
 + super ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * The GetIfEntry function retrieves information for the specified interface 
 + * on the local computer . 
 + * 
 + * The dwIndex member in the MIB _ IFROW structure pointed to by the pIfRow 
 + * parameter must be initialized to a valid network interface index 
 + * retrieved by a previous call to the GetIfTable , GetIfTable2 , or 
 + * GetIfTable2Ex function . The GetIfEntry function will fail if the dwIndex 
 + * member of the MIB _ IFROW pointed to by the pIfRow parameter does not match 
 + * an existing interface index on the local computer . 
 + * 
 + * @ param pIfRow 
 + * A pointer to a MIB _ IFROW structure that , on successful return , 
 + * receives information for an interface on the local computer . 
 + * On input , set the dwIndex member of MIB _ IFROW to the index of 
 + * the interface for which to retrieve information . 
 + * @ return If the function succeeds , the return value is NO _ ERROR . 
 + * / 
 + int GetIfEntry ( MIB _ IFROW pIfRow ) ; 
 + 
 + / * * 
 + * The GetIfEntry2 function retrieves information for the specified 
 + * interface on the local computer . 
 + * 
 + * On input , at least one of the following members in the MIB _ IF _ ROW2 
 + * structure passed in the Row parameter must be initialized : InterfaceLuid 
 + * or InterfaceIndex . The fields are used in the order listed above . So if 
 + * the InterfaceLuid is specified , then this member is used to determine the 
 + * interface . If no value was set for the InterfaceLuid member ( the value of 
 + * this member was set to zero ) , then the InterfaceIndex member is next used 
 + * to determine the interface . On output , the remaining fields of the 
 + * MIB _ IF _ ROW2 structure pointed to by the Row parameter are filled in . 
 + * 
 + * @ param pIfRow2 
 + * A pointer to a MIB _ IF _ ROW2 structure that , on successful 
 + * return , receives information for an interface on the local 
 + * computer . On input , the InterfaceLuid or the InterfaceIndex 
 + * member of the MIB _ IF _ ROW2 must be set to the interface for 
 + * which to retrieve information . 
 + * @ return If the function succeeds , the return value is NO _ ERROR . 
 + * / 
 + int GetIfEntry2 ( MIB _ IF _ ROW2 pIfRow2 ) ; 
 + 
 + / * * 
 + * The GetNetworkParams function retrieves network parameters for the local 
 + * computer . 
 + * 
 + * @ param pFixedInfo 
 + * A pointer to a buffer that contains a FIXED _ INFO structure 
 + * that receives the network parameters for the local computer , 
 + * if the function was successful . This buffer must be allocated 
 + * by the caller prior to calling the GetNetworkParams function . 
 + * @ param pOutBufLen 
 + * A pointer to a ULONG variable that specifies the size of the 
 + * FIXED _ INFO structure . If this size is insufficient to hold the 
 + * information , GetNetworkParams fills in this variable with the 
 + * required size , and returns an error code of 
 + * ERROR _ BUFFER _ OVERFLOW . 
 + * @ return If the function succeeds , the return value is ERROR _ SUCCESS . 
 + * / 
 + int GetNetworkParams ( Pointer pFixedInfo , IntByReference pOutBufLen ) ; 
 + } 
 + 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / IPHlpAPITest . java b / contrib / platform / test / com / sun / jna / platform / win32 / IPHlpAPITest . java 
 index e59ec5c . . 731fbaf 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / IPHlpAPITest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / IPHlpAPITest . java 
 @ @ - 116 , 11 + 116 , 12 @ @ public class IPHlpAPITest { 
 
 IntByReference bufferSize = new IntByReference ( ) ; 
 assertEquals ( WinError . ERROR _ BUFFER _ OVERFLOW , IPHlpAPI . INSTANCE . GetNetworkParams ( null , bufferSize ) ) ; 
 - FIXED _ INFO buffer = new FIXED _ INFO ( new Memory ( bufferSize . getValue ( ) ) ) ; 
 + Memory buffer = new Memory ( bufferSize . getValue ( ) ) ; 
 assertEquals ( WinError . ERROR _ SUCCESS , IPHlpAPI . INSTANCE . GetNetworkParams ( buffer , bufferSize ) ) ; 
 + FIXED _ INFO fixedInfo = new FIXED _ INFO ( buffer ) ; 
 
 / / Check all DNS servers are valid IPs 
 - IPHlpAPI . IP _ ADDR _ STRING dns = buffer . DnsServerList ; 
 + IPHlpAPI . IP _ ADDR _ STRING dns = fixedInfo . DnsServerList ; 
 while ( dns ! = null ) { 
 / / Start with 16 - char byte array 
 String addr = new String ( dns . IpAddress . String ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
