BLEU SCORE: 0.007866467405572666

TEST MSG: Client - side XIDs may be 32 - bit or 64 - bit ; only server - side XIDs are always 32 - bit
GENERATED MSG: patch missing code , remove apparent duplicate code , fix overall compilation

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 5a66fa2 . . 29d2e6d 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 29 , 6 + 29 , 7 @ @ Bug Fixes <nl> * [ # 350 ] ( https : / / github . com / twall / jna / pull / 350 ) : Fix ` jnacontrib . x11 . api . X . Window . getXXXProperty ` , returns ` null ` if the window property is not found - [ @ rm5248 ] ( https : / / github . com / rm5248 ) . <nl> * Fixed ` com . sun . jna . platform . win32 . Variant ` and ` TlbImp ` - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . <nl> * Fixed ` com . sun . jna . Pointer . getWideStringArray ` not respecting the length parameter - [ @ csoren ] ( https : / / github . com / csoren ) . <nl> + * X11 XID is always 32 bits - [ @ twall ] ( https : / / github . com / twall ) . <nl> <nl> Release 4 . 1 <nl> = = = = = = = = = = = <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> index 3b32b73 . . 1df00c3 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java <nl> @ @ - 33 , 19 + 33 , 17 @ @ import com . sun . jna . ptr . PointerByReference ; <nl> / * * Definition ( incomplete ) of the X library . * / <nl> public interface X11 extends Library { <nl> <nl> - class VisualID extends IntegerType { <nl> + class VisualID extends NativeLong { <nl> private static final long serialVersionUID = 1L ; <nl> - public static final int SIZE = 4 ; <nl> public VisualID ( ) { this ( 0 ) ; } <nl> - public VisualID ( long value ) { super ( SIZE , value , true ) ; } <nl> + public VisualID ( long value ) { super ( value , true ) ; } <nl> } <nl> <nl> - class XID extends IntegerType { <nl> + class XID extends NativeLong { <nl> private static final long serialVersionUID = 1L ; <nl> public static final XID None = null ; <nl> - public static final int SIZE = 4 ; <nl> public XID ( ) { this ( 0 ) ; } <nl> - public XID ( long id ) { super ( SIZE , id , true ) ; } <nl> + public XID ( long id ) { super ( id , true ) ; } <nl> protected boolean isNone ( Object o ) { <nl> return o = = null <nl> | | ( o instanceof Number <nl> diff - - git a / contrib / x11 / src / jnacontrib / x11 / api / X . java b / contrib / x11 / src / jnacontrib / x11 / api / X . java <nl> index cf8024e . . f087963 100644 <nl> - - - a / contrib / x11 / src / jnacontrib / x11 / api / X . java <nl> + + + b / contrib / x11 / src / jnacontrib / x11 / api / X . java <nl> @ @ - 1122 , 12 + 1122 , 21 @ @ public class X { <nl> <nl> Window [ ] retVal = new Window [ childCount . getValue ( ) ] ; <nl> / / Depending on if we ' re running on 64 - bit or 32 - bit systems , <nl> - / / the long size may be different ; we need to make sure that <nl> + / / the Window ID size may be different ; we need to make sure that <nl> / / we get the data properly no matter what <nl> - int [ ] windows = children . getValue ( ) . getIntArray ( 0 , childCount . getValue ( ) ) ; <nl> - for ( int x = 0 ; x < retVal . length ; x + + ) { <nl> - X11 . Window win = new X11 . Window ( windows [ x ] ) ; <nl> - retVal [ x ] = new Window ( display , win ) ; <nl> + if ( X11 . XID . SIZE = = 4 ) { <nl> + int [ ] windows = children . getValue ( ) . getIntArray ( 0 , childCount . getValue ( ) ) ; <nl> + for ( int x = 0 ; x < retVal . length ; x + + ) { <nl> + X11 . Window win = new X11 . Window ( windows [ x ] ) ; <nl> + retVal [ x ] = new Window ( display , win ) ; <nl> + } <nl> + } <nl> + else { <nl> + long [ ] windows = children . getValue ( ) . getLongArray ( 0 , childCount . getValue ( ) ) ; <nl> + for ( int x = 0 ; x < retVal . length ; x + + ) { <nl> + X11 . Window win = new X11 . Window ( windows [ x ] ) ; <nl> + retVal [ x ] = new Window ( display , win ) ; <nl> + } <nl> } <nl> x11 . XFree ( children . getValue ( ) ) ; <nl>
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 5a66fa2 . . 29d2e6d 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 29 , 6 + 29 , 7 @ @ Bug Fixes 
 * [ # 350 ] ( https : / / github . com / twall / jna / pull / 350 ) : Fix ` jnacontrib . x11 . api . X . Window . getXXXProperty ` , returns ` null ` if the window property is not found - [ @ rm5248 ] ( https : / / github . com / rm5248 ) . 
 * Fixed ` com . sun . jna . platform . win32 . Variant ` and ` TlbImp ` - [ @ wolftobias ] ( https : / / github . com / wolftobias ) . 
 * Fixed ` com . sun . jna . Pointer . getWideStringArray ` not respecting the length parameter - [ @ csoren ] ( https : / / github . com / csoren ) . 
 + * X11 XID is always 32 bits - [ @ twall ] ( https : / / github . com / twall ) . 
 
 Release 4 . 1 
 = = = = = = = = = = = 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 index 3b32b73 . . 1df00c3 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / unix / X11 . java 
 @ @ - 33 , 19 + 33 , 17 @ @ import com . sun . jna . ptr . PointerByReference ; 
 / * * Definition ( incomplete ) of the X library . * / 
 public interface X11 extends Library { 
 
 - class VisualID extends IntegerType { 
 + class VisualID extends NativeLong { 
 private static final long serialVersionUID = 1L ; 
 - public static final int SIZE = 4 ; 
 public VisualID ( ) { this ( 0 ) ; } 
 - public VisualID ( long value ) { super ( SIZE , value , true ) ; } 
 + public VisualID ( long value ) { super ( value , true ) ; } 
 } 
 
 - class XID extends IntegerType { 
 + class XID extends NativeLong { 
 private static final long serialVersionUID = 1L ; 
 public static final XID None = null ; 
 - public static final int SIZE = 4 ; 
 public XID ( ) { this ( 0 ) ; } 
 - public XID ( long id ) { super ( SIZE , id , true ) ; } 
 + public XID ( long id ) { super ( id , true ) ; } 
 protected boolean isNone ( Object o ) { 
 return o = = null 
 | | ( o instanceof Number 
 diff - - git a / contrib / x11 / src / jnacontrib / x11 / api / X . java b / contrib / x11 / src / jnacontrib / x11 / api / X . java 
 index cf8024e . . f087963 100644 
 - - - a / contrib / x11 / src / jnacontrib / x11 / api / X . java 
 + + + b / contrib / x11 / src / jnacontrib / x11 / api / X . java 
 @ @ - 1122 , 12 + 1122 , 21 @ @ public class X { 
 
 Window [ ] retVal = new Window [ childCount . getValue ( ) ] ; 
 / / Depending on if we ' re running on 64 - bit or 32 - bit systems , 
 - / / the long size may be different ; we need to make sure that 
 + / / the Window ID size may be different ; we need to make sure that 
 / / we get the data properly no matter what 
 - int [ ] windows = children . getValue ( ) . getIntArray ( 0 , childCount . getValue ( ) ) ; 
 - for ( int x = 0 ; x < retVal . length ; x + + ) { 
 - X11 . Window win = new X11 . Window ( windows [ x ] ) ; 
 - retVal [ x ] = new Window ( display , win ) ; 
 + if ( X11 . XID . SIZE = = 4 ) { 
 + int [ ] windows = children . getValue ( ) . getIntArray ( 0 , childCount . getValue ( ) ) ; 
 + for ( int x = 0 ; x < retVal . length ; x + + ) { 
 + X11 . Window win = new X11 . Window ( windows [ x ] ) ; 
 + retVal [ x ] = new Window ( display , win ) ; 
 + } 
 + } 
 + else { 
 + long [ ] windows = children . getValue ( ) . getLongArray ( 0 , childCount . getValue ( ) ) ; 
 + for ( int x = 0 ; x < retVal . length ; x + + ) { 
 + X11 . Window win = new X11 . Window ( windows [ x ] ) ; 
 + retVal [ x ] = new Window ( display , win ) ; 
 + } 
 } 
 x11 . XFree ( children . getValue ( ) ) ; 


NEAREST DIFF:
ELIMINATEDSENTENCE
