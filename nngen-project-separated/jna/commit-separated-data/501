BLEU SCORE: 0.024893534183931972

TEST MSG: update docs
GENERATED MSG: avoid negative interactions with system install of JNA

TEST DIFF (one line): diff - - git a / . gitignore b / . gitignore <nl> index 32093a8 . . a1e428d 100644 <nl> - - - a / . gitignore <nl> + + + b / . gitignore <nl> @ @ - 16 , 3 + 16 , 4 @ @ dist / * - sources . jar <nl> dist / * - javadoc . jar <nl> dist / src - mvn . zip <nl> dist / out - of - date . jar <nl> + perf * . txt <nl> \ No newline at end of file <nl> diff - - git a / CHANGES . md b / CHANGES . md <nl> index 9381134 . . e3206e7 100755 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 27 , 6 + 27 , 7 @ @ Bug Fixes <nl> * Remove deprecated methods on Memory ( getSize , isValid ) and Structure ( getSize ) - [ @ twall ] ( https : / / github . com / twall ) . <nl> * [ # 206 ] ( https : / / github . com / twall / jna / pull / 206 ) : Fix ` moveToTrash ( ) ` on OSX to work with symlinks - [ @ twall ] ( https : / / github . com / twall ) . <nl> * Remove problematic AWT check via ` Class . forName ( " java . awt . Component " ) ` ( see [ here ] ( https : / / bugs . eclipse . org / bugs / show _ bug . cgi ? id = 388170 ) ) - [ @ twall ] ( https : / / github . com / twall ) . <nl> + * [ PR # 210 ] ( https : / / github . com / twall / jna / pull / 210 ) Add OSGI processor specs for Mac OS X - [ @ bertfrees ] ( https : / / github . com / bertfrees ) . <nl> <nl> Release 3 . 5 . 1 <nl> = = = = = = = = = = = = = <nl> diff - - git a / TODO b / TODO <nl> index 4955d51 . . 3860204 100644 <nl> - - - a / TODO <nl> + + + b / TODO <nl> @ @ - 21 , 6 + 21 , 9 @ @ <nl> <nl> # TODO <nl> <nl> + * use consistent cpu references ( x86 - > i386 , x86 _ 64 - > amd64 ) <nl> + * osgi for osx <nl> + <nl> * make native dll extraction from jar public , to use with user dlls packaged <nl> in a jar <nl> <nl> diff - - git a / build . xml b / build . xml <nl> index ebc0890 . . 948da14 100644 <nl> - - - a / build . xml <nl> + + + b / build . xml <nl> @ @ - 368 , 7 + 368 , 7 @ @ com / sun / jna / freebsd - amd64 / libjnidispatch . so ; <nl> processor = x86 - 64 ; osname = freebsd , <nl> <nl> com / sun / jna / darwin / libjnidispatch . jnilib ; <nl> - osname = macosx ; processor = x86 ; processor = x86 _ 64 ; processor = ppc <nl> + osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc <nl> " / > <nl> < / manifest > <nl> < fileset dir = " $ { classes } " excludes = " $ { jar . omitted } " > <nl> diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index 6a4c588 . . 9642457 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 77 , 6 + 77 , 10 @ @ import com . sun . jna . Structure . FFIType ; <nl> * finalized / disposed before this class is disposed and / or removed from <nl> * memory ( most notably Memory and any other class which by default frees its <nl> * resources in a finalizer ) . < p / > <nl> + * < a name = native _ library _ loading < / a > <nl> + * < h2 > Native Library Loading < / h2 > <nl> + * Native libraries loaded via { @ link # loadLibrary ( Class ) } may be found in <nl> + * < a href = " NativeLibrary . html # library _ search _ paths " > several locations < / a > . <nl> * @ see Library <nl> * @ author Todd Fast , todd . fast @ sun . com <nl> * @ author twall @ users . sf . net <nl> @ @ - 367 , 6 + 371 , 8 @ @ public final class Native { <nl> * If no library options are detected the map is interpreted as a map <nl> * of Java method names to native function names . < p > <nl> * If < code > name < / code > is null , attempts to map onto the current process . <nl> + * Native libraries loaded via this method may be found in <nl> + * < a href = " NativeLibrary . html # library _ search _ paths " > several locations < / a > . <nl> * @ param name <nl> * @ param interfaceClass <nl> * @ param options Map of library options <nl> @ @ - 777 , 7 + 783 , 7 @ @ public final class Native { <nl> <nl> / * * Attempt to extract a native library from the current resource path . <nl> * Expects native libraries to be stored under <nl> - * the path returned by { @ link # getNativeLibraryResourcePath ( int , String , <nl> + * the path returned by { @ link # getNativeLibraryResourcePrefix ( int , String , <nl> * String ) } . <nl> * @ param name Base name of native library to extract <nl> * @ param loader Class loader to use to load resources <nl> diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java <nl> index a68ed3d . . 2e6743c 100644 <nl> - - - a / src / com / sun / jna / NativeLibrary . java <nl> + + + b / src / com / sun / jna / NativeLibrary . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import java . util . StringTokenizer ; <nl> * class corresponds to a single loaded native library . May also be used <nl> * to map to the current process ( see { @ link NativeLibrary # getProcess ( ) } ) . <nl> * < p > <nl> + * < a name = library _ search _ paths > < / a > <nl> * < b > Library Search Paths < / b > <nl> * A search for a given library will scan the following locations : <nl> * < ol > <nl> @ @ - 49 , 6 + 50 , 13 @ @ import java . util . StringTokenizer ; <nl> * are also accepted , either ending at the framework name ( sans " . framework " ) <nl> * or the full path to the framework shared library <nl> * ( e . g . CoreServices . framework / CoreServices ) . <nl> + * < li > Context class loader classpath . Deployed native libraries may be <nl> + * installed on the classpath under <nl> + * < code > $ { os - prefix } / LIBRARY _ FILENAME < / code > , where < code > $ { os - prefix } < / code > <nl> + * is the OS / Arch prefix returned by { @ link <nl> + * Native # getNativeLibraryResourcePrefix ( ) } . If bundled in a jar file , the <nl> + * resource will be extracted to < code > jna . tmpdir < / code > for loading , and <nl> + * later removed . <nl> * < / ol > <nl> * @ author Wayne Meissner , split library loading from Function . java <nl> * @ author twall <nl> diff - - git a / www / GettingStarted . md b / www / GettingStarted . md <nl> index 2a2a2a1 . . 2f6eb62 100644 <nl> - - - a / www / GettingStarted . md <nl> + + + b / www / GettingStarted . md <nl> @ @ - 37 , 10 + 37 , 11 @ @ The following example maps the printf function from the standard C library and c <nl> <nl> Identify a native target library that you want to use . This can be any shared library with exported functions . Many examples of mappings for common system libraries , especially on Windows , may be found in the platform package . <nl> <nl> - Make your target library available to your Java program . There are two ways to do this : <nl> + Make your target library available to your Java program . There are several ways to do this : <nl> <nl> * The preferred method is to set the ` jna . library . path ` system property to the path to your target library . This property is similar to ` java . library . path ` , but only applies to libraries loaded by JNA . <nl> * Change the appropriate library access environment variable before launching the VM . This is ` PATH ` on Windows , ` LD _ LIBRARY _ PATH ` on Linux , and ` DYLD _ LIBRARY _ PATH ` on OSX . <nl> + * Make your native library available on your classpath , under the path ` { OS } - { ARCH } / { LIBRARY } ` , where ` { OS } - { ARCH } ` is JNA ' s canonical prefix for native libraries ( e . g . ` win32 - x86 ` , ` linux - amd64 ` , or ` darwin ` ) . If the resource is within a jar file it will be automatically extracted when loaded . <nl> <nl> Declare a Java interface to hold the native library methods by extending the Library interface . <nl>
NEAREST DIFF (one line): diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java <nl> index 7a69d36 . . c697280 100644 <nl> - - - a / src / com / sun / jna / NativeLibrary . java <nl> + + + b / src / com / sun / jna / NativeLibrary . java <nl> @ @ - 120 , 7 + 120 , 6 @ @ public class NativeLibrary { <nl> / / name if it cannot find the library . <nl> / / <nl> try { <nl> - System . out . println ( " Attempt " + libraryPath ) ; <nl> handle = Native . open ( libraryPath ) ; <nl> } <nl> catch ( UnsatisfiedLinkError e ) { <nl> @ @ - 130 , 7 + 129 , 6 @ @ public class NativeLibrary { <nl> try { <nl> if ( handle = = 0 ) { <nl> libraryPath = findLibraryPath ( libraryName , searchPath ) ; <nl> - System . out . println ( " Attempt " + libraryPath ) ; <nl> handle = Native . open ( libraryPath ) ; <nl> if ( handle = = 0 ) { <nl> throw new UnsatisfiedLinkError ( " Failed to load library ' " + libraryName + " ' " ) ;

TEST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index 32093a8 . . a1e428d 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 16 , 3 + 16 , 4 @ @ dist / * - sources . jar 
 dist / * - javadoc . jar 
 dist / src - mvn . zip 
 dist / out - of - date . jar 
 + perf * . txt 
 \ No newline at end of file 
 diff - - git a / CHANGES . md b / CHANGES . md 
 index 9381134 . . e3206e7 100755 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 27 , 6 + 27 , 7 @ @ Bug Fixes 
 * Remove deprecated methods on Memory ( getSize , isValid ) and Structure ( getSize ) - [ @ twall ] ( https : / / github . com / twall ) . 
 * [ # 206 ] ( https : / / github . com / twall / jna / pull / 206 ) : Fix ` moveToTrash ( ) ` on OSX to work with symlinks - [ @ twall ] ( https : / / github . com / twall ) . 
 * Remove problematic AWT check via ` Class . forName ( " java . awt . Component " ) ` ( see [ here ] ( https : / / bugs . eclipse . org / bugs / show _ bug . cgi ? id = 388170 ) ) - [ @ twall ] ( https : / / github . com / twall ) . 
 + * [ PR # 210 ] ( https : / / github . com / twall / jna / pull / 210 ) Add OSGI processor specs for Mac OS X - [ @ bertfrees ] ( https : / / github . com / bertfrees ) . 
 
 Release 3 . 5 . 1 
 = = = = = = = = = = = = = 
 diff - - git a / TODO b / TODO 
 index 4955d51 . . 3860204 100644 
 - - - a / TODO 
 + + + b / TODO 
 @ @ - 21 , 6 + 21 , 9 @ @ 
 
 # TODO 
 
 + * use consistent cpu references ( x86 - > i386 , x86 _ 64 - > amd64 ) 
 + * osgi for osx 
 + 
 * make native dll extraction from jar public , to use with user dlls packaged 
 in a jar 
 
 diff - - git a / build . xml b / build . xml 
 index ebc0890 . . 948da14 100644 
 - - - a / build . xml 
 + + + b / build . xml 
 @ @ - 368 , 7 + 368 , 7 @ @ com / sun / jna / freebsd - amd64 / libjnidispatch . so ; 
 processor = x86 - 64 ; osname = freebsd , 
 
 com / sun / jna / darwin / libjnidispatch . jnilib ; 
 - osname = macosx ; processor = x86 ; processor = x86 _ 64 ; processor = ppc 
 + osname = macosx ; processor = x86 ; processor = x86 - 64 ; processor = ppc 
 " / > 
 < / manifest > 
 < fileset dir = " $ { classes } " excludes = " $ { jar . omitted } " > 
 diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index 6a4c588 . . 9642457 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 77 , 6 + 77 , 10 @ @ import com . sun . jna . Structure . FFIType ; 
 * finalized / disposed before this class is disposed and / or removed from 
 * memory ( most notably Memory and any other class which by default frees its 
 * resources in a finalizer ) . < p / > 
 + * < a name = native _ library _ loading < / a > 
 + * < h2 > Native Library Loading < / h2 > 
 + * Native libraries loaded via { @ link # loadLibrary ( Class ) } may be found in 
 + * < a href = " NativeLibrary . html # library _ search _ paths " > several locations < / a > . 
 * @ see Library 
 * @ author Todd Fast , todd . fast @ sun . com 
 * @ author twall @ users . sf . net 
 @ @ - 367 , 6 + 371 , 8 @ @ public final class Native { 
 * If no library options are detected the map is interpreted as a map 
 * of Java method names to native function names . < p > 
 * If < code > name < / code > is null , attempts to map onto the current process . 
 + * Native libraries loaded via this method may be found in 
 + * < a href = " NativeLibrary . html # library _ search _ paths " > several locations < / a > . 
 * @ param name 
 * @ param interfaceClass 
 * @ param options Map of library options 
 @ @ - 777 , 7 + 783 , 7 @ @ public final class Native { 
 
 / * * Attempt to extract a native library from the current resource path . 
 * Expects native libraries to be stored under 
 - * the path returned by { @ link # getNativeLibraryResourcePath ( int , String , 
 + * the path returned by { @ link # getNativeLibraryResourcePrefix ( int , String , 
 * String ) } . 
 * @ param name Base name of native library to extract 
 * @ param loader Class loader to use to load resources 
 diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java 
 index a68ed3d . . 2e6743c 100644 
 - - - a / src / com / sun / jna / NativeLibrary . java 
 + + + b / src / com / sun / jna / NativeLibrary . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import java . util . StringTokenizer ; 
 * class corresponds to a single loaded native library . May also be used 
 * to map to the current process ( see { @ link NativeLibrary # getProcess ( ) } ) . 
 * < p > 
 + * < a name = library _ search _ paths > < / a > 
 * < b > Library Search Paths < / b > 
 * A search for a given library will scan the following locations : 
 * < ol > 
 @ @ - 49 , 6 + 50 , 13 @ @ import java . util . StringTokenizer ; 
 * are also accepted , either ending at the framework name ( sans " . framework " ) 
 * or the full path to the framework shared library 
 * ( e . g . CoreServices . framework / CoreServices ) . 
 + * < li > Context class loader classpath . Deployed native libraries may be 
 + * installed on the classpath under 
 + * < code > $ { os - prefix } / LIBRARY _ FILENAME < / code > , where < code > $ { os - prefix } < / code > 
 + * is the OS / Arch prefix returned by { @ link 
 + * Native # getNativeLibraryResourcePrefix ( ) } . If bundled in a jar file , the 
 + * resource will be extracted to < code > jna . tmpdir < / code > for loading , and 
 + * later removed . 
 * < / ol > 
 * @ author Wayne Meissner , split library loading from Function . java 
 * @ author twall 
 diff - - git a / www / GettingStarted . md b / www / GettingStarted . md 
 index 2a2a2a1 . . 2f6eb62 100644 
 - - - a / www / GettingStarted . md 
 + + + b / www / GettingStarted . md 
 @ @ - 37 , 10 + 37 , 11 @ @ The following example maps the printf function from the standard C library and c 
 
 Identify a native target library that you want to use . This can be any shared library with exported functions . Many examples of mappings for common system libraries , especially on Windows , may be found in the platform package . 
 
 - Make your target library available to your Java program . There are two ways to do this : 
 + Make your target library available to your Java program . There are several ways to do this : 
 
 * The preferred method is to set the ` jna . library . path ` system property to the path to your target library . This property is similar to ` java . library . path ` , but only applies to libraries loaded by JNA . 
 * Change the appropriate library access environment variable before launching the VM . This is ` PATH ` on Windows , ` LD _ LIBRARY _ PATH ` on Linux , and ` DYLD _ LIBRARY _ PATH ` on OSX . 
 + * Make your native library available on your classpath , under the path ` { OS } - { ARCH } / { LIBRARY } ` , where ` { OS } - { ARCH } ` is JNA ' s canonical prefix for native libraries ( e . g . ` win32 - x86 ` , ` linux - amd64 ` , or ` darwin ` ) . If the resource is within a jar file it will be automatically extracted when loaded . 
 
 Declare a Java interface to hold the native library methods by extending the Library interface . 


NEAREST DIFF:
diff - - git a / src / com / sun / jna / NativeLibrary . java b / src / com / sun / jna / NativeLibrary . java 
 index 7a69d36 . . c697280 100644 
 - - - a / src / com / sun / jna / NativeLibrary . java 
 + + + b / src / com / sun / jna / NativeLibrary . java 
 @ @ - 120 , 7 + 120 , 6 @ @ public class NativeLibrary { 
 / / name if it cannot find the library . 
 / / 
 try { 
 - System . out . println ( " Attempt " + libraryPath ) ; 
 handle = Native . open ( libraryPath ) ; 
 } 
 catch ( UnsatisfiedLinkError e ) { 
 @ @ - 130 , 7 + 129 , 6 @ @ public class NativeLibrary { 
 try { 
 if ( handle = = 0 ) { 
 libraryPath = findLibraryPath ( libraryName , searchPath ) ; 
 - System . out . println ( " Attempt " + libraryPath ) ; 
 handle = Native . open ( libraryPath ) ; 
 if ( handle = = 0 ) { 
 throw new UnsatisfiedLinkError ( " Failed to load library ' " + libraryName + " ' " ) ;
