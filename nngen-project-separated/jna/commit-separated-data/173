BLEU SCORE: 0.18393972058572117

TEST MSG: Add SetErrorMode
GENERATED MSG: added test to QueryFullProcessImageName

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index aaadbbd . . 227b495 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 48 , 7 + 48 , 7 @ @ Features <nl> * [ # 621 ] ( https : / / github . com / java - native - access / jna / pull / 621 ) : Added TYPEFLAGS - constants for ` wTypeFlags ` in ` com . sun . jna . platform . win32 . OaIdl . TYPEATTR ` - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . <nl> * [ # 625 ] ( https : / / github . com / java - native - access / jna / pull / 625 ) : Make conversion to / from java to / from VARIANT in ` com . sun . jna . platform . win32 . COM . util . Convert ` more flexible and dependable - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 639 ] ( https : / / github . com / java - native - access / jna / pull / 639 ) : Add getloadavg ( ) to OS X and Unix - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> - * [ # 640 ] ( https : / / github . com / java - native - access / jna / pull / 640 ) : Add ` com . sun . jna . platform . win32 . Psapi . GetPerformanceInfo ( ) ` and ` com . sun . jna . platform . win32 . Kernel32 . GetTickCount64 ( ) ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> + * [ # 640 ] ( https : / / github . com / java - native - access / jna / pull / 640 ) : Add ` com . sun . jna . platform . win32 . Psapi . GetPerformanceInfo ( ) ` , ` com . sun . jna . platform . win32 . Kernel32 . GetTickCount64 ( ) ` , and ` com . sun . jna . platform . win32 . Kernel32 . SetErrorMode ( ) ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> * [ # 642 ] ( https : / / github . com / java - native - access / jna / pull / 642 ) : COM calls with variable number of arguments ( varargs ) are now supported - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . <nl> <nl> Bug Fixes <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> index b365d9e . . 5ae4acb 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> @ @ - 3335 , 4 + 3335 , 16 @ @ public interface Kernel32 extends StdCallLibrary , WinNT , Wincon { <nl> * not contain module information . <nl> * / <nl> boolean Module32NextW ( HANDLE hSnapshot , Tlhelp32 . MODULEENTRY32W lpme ) ; <nl> + <nl> + / * * <nl> + * Controls whether the system will handle the specified types of serious <nl> + * errors or whether the process will handle them . <nl> + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms680621 ( v = vs . 85 ) . aspx " > MSDN < / a > <nl> + * <nl> + * @ param umode <nl> + * The process error mode . <nl> + * @ return The return value is the previous state of the error - mode bit <nl> + * flags . <nl> + * / <nl> + int SetErrorMode ( int umode ) ; <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> index fcb5fd6 . . 1f42ef3 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> @ @ - 1151 , 4 + 1151 , 11 @ @ public class Kernel32Test extends TestCase { <nl> } <nl> } <nl> } <nl> + <nl> + public void testSetErrorMode ( ) { <nl> + / / Set bit flags to 0x0001 <nl> + int previousMode = Kernel32 . INSTANCE . SetErrorMode ( 0x0001 ) ; <nl> + / / Restore to previous state ; 0x0001 is now " previous " <nl> + assertEquals ( Kernel32 . INSTANCE . SetErrorMode ( previousMode ) , 0x0001 ) ; <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index aaadbbd . . 227b495 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 48 , 7 + 48 , 7 @ @ Features 
 * [ # 621 ] ( https : / / github . com / java - native - access / jna / pull / 621 ) : Added TYPEFLAGS - constants for ` wTypeFlags ` in ` com . sun . jna . platform . win32 . OaIdl . TYPEATTR ` - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . 
 * [ # 625 ] ( https : / / github . com / java - native - access / jna / pull / 625 ) : Make conversion to / from java to / from VARIANT in ` com . sun . jna . platform . win32 . COM . util . Convert ` more flexible and dependable - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 639 ] ( https : / / github . com / java - native - access / jna / pull / 639 ) : Add getloadavg ( ) to OS X and Unix - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 - * [ # 640 ] ( https : / / github . com / java - native - access / jna / pull / 640 ) : Add ` com . sun . jna . platform . win32 . Psapi . GetPerformanceInfo ( ) ` and ` com . sun . jna . platform . win32 . Kernel32 . GetTickCount64 ( ) ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 + * [ # 640 ] ( https : / / github . com / java - native - access / jna / pull / 640 ) : Add ` com . sun . jna . platform . win32 . Psapi . GetPerformanceInfo ( ) ` , ` com . sun . jna . platform . win32 . Kernel32 . GetTickCount64 ( ) ` , and ` com . sun . jna . platform . win32 . Kernel32 . SetErrorMode ( ) ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 * [ # 642 ] ( https : / / github . com / java - native - access / jna / pull / 642 ) : COM calls with variable number of arguments ( varargs ) are now supported - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . 
 
 Bug Fixes 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 index b365d9e . . 5ae4acb 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 @ @ - 3335 , 4 + 3335 , 16 @ @ public interface Kernel32 extends StdCallLibrary , WinNT , Wincon { 
 * not contain module information . 
 * / 
 boolean Module32NextW ( HANDLE hSnapshot , Tlhelp32 . MODULEENTRY32W lpme ) ; 
 + 
 + / * * 
 + * Controls whether the system will handle the specified types of serious 
 + * errors or whether the process will handle them . 
 + * @ see < a href = " https : / / msdn . microsoft . com / en - us / library / windows / desktop / ms680621 ( v = vs . 85 ) . aspx " > MSDN < / a > 
 + * 
 + * @ param umode 
 + * The process error mode . 
 + * @ return The return value is the previous state of the error - mode bit 
 + * flags . 
 + * / 
 + int SetErrorMode ( int umode ) ; 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 index fcb5fd6 . . 1f42ef3 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 @ @ - 1151 , 4 + 1151 , 11 @ @ public class Kernel32Test extends TestCase { 
 } 
 } 
 } 
 + 
 + public void testSetErrorMode ( ) { 
 + / / Set bit flags to 0x0001 
 + int previousMode = Kernel32 . INSTANCE . SetErrorMode ( 0x0001 ) ; 
 + / / Restore to previous state ; 0x0001 is now " previous " 
 + assertEquals ( Kernel32 . INSTANCE . SetErrorMode ( previousMode ) , 0x0001 ) ; 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
