BLEU SCORE: 0.18393972058572117

TEST MSG: some changes
GENERATED MSG: datatypes over - worked

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java b / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java <nl> index 611d34c . . d8b4d20 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java <nl> @ @ - 1 , 127 + 1 , 129 @ @ <nl> - / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation ; either <nl> - * version 2 . 1 of the License , or ( at your option ) any later version . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * / <nl> - package com . sun . jna . platform . win32 ; <nl> - <nl> - import com . sun . jna . IntegerType ; <nl> - import com . sun . jna . Pointer ; <nl> - import com . sun . jna . ptr . ByReference ; <nl> - import com . sun . jna . win32 . StdCallLibrary ; <nl> - <nl> - / * * <nl> - * Based on basetsd . h ( various types ) <nl> - * @ author dblock [ at ] dblock [ dot ] org <nl> - * / <nl> - @ SuppressWarnings ( " serial " ) <nl> - public interface BaseTSD extends StdCallLibrary { <nl> - / * * <nl> - * Signed long type for pointer precision . <nl> - * Use when casting a pointer to a long to perform pointer arithmetic . <nl> - * / <nl> - public static class LONG _ PTR extends IntegerType { <nl> - public LONG _ PTR ( ) { <nl> - this ( 0 ) ; <nl> - } <nl> - <nl> - public LONG _ PTR ( long value ) { <nl> - super ( Pointer . SIZE , value ) ; <nl> - } <nl> - <nl> - public Pointer toPointer ( ) { <nl> - return Pointer . createConstant ( longValue ( ) ) ; <nl> - } <nl> - } <nl> - 	 <nl> - / * * <nl> - * Signed SIZE _ T . <nl> - * / <nl> - public static class SSIZE _ T extends LONG _ PTR { <nl> - public SSIZE _ T ( ) { <nl> - this ( 0 ) ; <nl> - } <nl> - <nl> - public SSIZE _ T ( long value ) { <nl> - super ( value ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Unsigned LONG _ PTR . <nl> - * / <nl> - public static class ULONG _ PTR extends IntegerType { <nl> - public ULONG _ PTR ( ) { <nl> - this ( 0 ) ; <nl> - } <nl> - <nl> - public ULONG _ PTR ( long value ) { <nl> - super ( Pointer . SIZE , value , true ) ; <nl> - } <nl> - <nl> - public Pointer toPointer ( ) { <nl> - return Pointer . createConstant ( longValue ( ) ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * PULONG _ PTR <nl> - * / <nl> - public static class ULONG _ PTRByReference extends ByReference { <nl> - public ULONG _ PTRByReference ( ) { <nl> - this ( new ULONG _ PTR ( 0 ) ) ; <nl> - } <nl> - public ULONG _ PTRByReference ( ULONG _ PTR value ) { <nl> - super ( Pointer . SIZE ) ; <nl> - setValue ( value ) ; <nl> - } <nl> - public void setValue ( ULONG _ PTR value ) { <nl> - if ( Pointer . SIZE = = 4 ) { <nl> - getPointer ( ) . setInt ( 0 , value . intValue ( ) ) ; <nl> - } <nl> - else { <nl> - getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; <nl> - } <nl> - } <nl> - public ULONG _ PTR getValue ( ) { <nl> - return new ULONG _ PTR ( Pointer . SIZE = = 4 <nl> - ? getPointer ( ) . getInt ( 0 ) <nl> - : getPointer ( ) . getLong ( 0 ) ) ; <nl> - } <nl> - } <nl> - <nl> - <nl> - / * * <nl> - * Unsigned DWORD _ PTR . <nl> - * / <nl> - public static class DWORD _ PTR extends IntegerType { <nl> - public DWORD _ PTR ( ) { <nl> - this ( 0 ) ; <nl> - } <nl> - <nl> - public DWORD _ PTR ( long value ) { <nl> - super ( Pointer . SIZE , value ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * The maximum number of bytes to which a pointer can point . <nl> - * Use for a count that must span the full range of a pointer . <nl> - * / <nl> - public static class SIZE _ T extends ULONG _ PTR { <nl> - public SIZE _ T ( ) { <nl> - this ( 0 ) ; <nl> - } <nl> - <nl> - public SIZE _ T ( long value ) { <nl> - super ( value ) ; <nl> - } <nl> - } <nl> - } <nl> + / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 ; <nl> + <nl> + import com . sun . jna . IntegerType ; <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . ptr . ByReference ; <nl> + import com . sun . jna . win32 . StdCallLibrary ; <nl> + <nl> + / * * <nl> + * Based on basetsd . h ( various types ) <nl> + * @ author dblock [ at ] dblock [ dot ] org <nl> + * / <nl> + @ SuppressWarnings ( " serial " ) <nl> + public interface BaseTSD extends StdCallLibrary { <nl> + / * * <nl> + * Signed long type for pointer precision . <nl> + * Use when casting a pointer to a long to perform pointer arithmetic . <nl> + * / <nl> + public static class LONG _ PTR extends IntegerType { <nl> + public LONG _ PTR ( ) { <nl> + this ( 0 ) ; <nl> + } <nl> + <nl> + public LONG _ PTR ( long value ) { <nl> + super ( Pointer . SIZE , value ) ; <nl> + } <nl> + <nl> + public Pointer toPointer ( ) { <nl> + return Pointer . createConstant ( longValue ( ) ) ; <nl> + } <nl> + } <nl> + 	 <nl> + / * * <nl> + * Signed SIZE _ T . <nl> + * / <nl> + public static class SSIZE _ T extends LONG _ PTR { <nl> + public SSIZE _ T ( ) { <nl> + this ( 0 ) ; <nl> + } <nl> + <nl> + public SSIZE _ T ( long value ) { <nl> + super ( value ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Unsigned LONG _ PTR . <nl> + * / <nl> + public static class ULONG _ PTR extends IntegerType { <nl> + 	 public static final int SIZE = 4 ; <nl> + 	 <nl> + public ULONG _ PTR ( ) { <nl> + this ( 0 ) ; <nl> + } <nl> + <nl> + public ULONG _ PTR ( long value ) { <nl> + super ( SIZE , value , true ) ; <nl> + } <nl> + <nl> + public Pointer toPointer ( ) { <nl> + return Pointer . createConstant ( longValue ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * PULONG _ PTR <nl> + * / <nl> + public static class ULONG _ PTRByReference extends ByReference { <nl> + public ULONG _ PTRByReference ( ) { <nl> + this ( new ULONG _ PTR ( 0 ) ) ; <nl> + } <nl> + public ULONG _ PTRByReference ( ULONG _ PTR value ) { <nl> + super ( Pointer . SIZE ) ; <nl> + setValue ( value ) ; <nl> + } <nl> + public void setValue ( ULONG _ PTR value ) { <nl> + if ( Pointer . SIZE = = 4 ) { <nl> + getPointer ( ) . setInt ( 0 , value . intValue ( ) ) ; <nl> + } <nl> + else { <nl> + getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; <nl> + } <nl> + } <nl> + public ULONG _ PTR getValue ( ) { <nl> + return new ULONG _ PTR ( Pointer . SIZE = = 4 <nl> + ? getPointer ( ) . getInt ( 0 ) <nl> + : getPointer ( ) . getLong ( 0 ) ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Unsigned DWORD _ PTR . <nl> + * / <nl> + public static class DWORD _ PTR extends IntegerType { <nl> + public DWORD _ PTR ( ) { <nl> + this ( 0 ) ; <nl> + } <nl> + <nl> + public DWORD _ PTR ( long value ) { <nl> + super ( Pointer . SIZE , value ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * The maximum number of bytes to which a pointer can point . <nl> + * Use for a count that must span the full range of a pointer . <nl> + * / <nl> + public static class SIZE _ T extends ULONG _ PTR { <nl> + public SIZE _ T ( ) { <nl> + this ( 0 ) ; <nl> + } <nl> + <nl> + public SIZE _ T ( long value ) { <nl> + super ( value ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java <nl> index ed00ba6 . . d73408c 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java <nl> @ @ - 57 , 9 + 57 , 10 @ @ public class ITypeInfo extends IUnknown { <nl> 	 } <nl> <nl> 	 public HRESULT GetTypeAttr ( <nl> - 	 / * [ out ] * / TYPEATTR . ByReference pTypeAttr ) { <nl> - <nl> - 	 	 int hr = this . invoke ( 3 , new Object [ ] { this . getPointer ( ) , pTypeAttr } ) ; <nl> + 	 / * [ out ] * / TYPEATTR . ByReference ppTypeAttr ) { <nl> + 	 	 <nl> + 	 	 <nl> + 	 	 int hr = this . invoke ( 3 , new Object [ ] { this . getPointer ( ) , ppTypeAttr } ) ; <nl> 	 	 return new HRESULT ( hr ) ; <nl> 	 } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibraryImporter . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibraryImporter . java <nl> index 13d26f0 . . 5f32f2f 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibraryImporter . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibraryImporter . java <nl> @ @ - 7 , 6 + 7 , 7 @ @ import java . io . PrintStream ; <nl> import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; <nl> import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; <nl> import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; <nl> + import com . sun . jna . platform . win32 . OaIdl . TYPEDESC ; <nl> import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; <nl> import com . sun . jna . platform . win32 . OaIdl . VARDESC ; <nl> import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> @ @ - 43 , 17 + 44 , 15 @ @ public class TypeLibraryImporter { <nl> <nl> 	 	 	 for ( int i = 0 ; i < typeLibUtil . getTypeInfoCount ( ) ; + + i ) { <nl> 	 	 	 	 TYPEKIND typekind = typeLibUtil . getTypeInfoType ( i ) ; <nl> - 	 	 	 	 ITypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( i ) ; <nl> - 	 	 	 	 Object [ ] typeLibDoc = this . typeLibUtil . getDocumentation ( i ) ; <nl> <nl> 	 	 	 	 if ( typekind . value = = TYPEKIND . TKIND _ ENUM ) { <nl> - 	 	 	 	 	 this . createCOMEnum ( typeLibDoc , typeInfoUtil ) ; <nl> + 	 	 	 	 	 this . createCOMEnum ( i ) ; <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ RECORD ) { <nl> <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ MODULE ) { <nl> <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ INTERFACE ) { <nl> - <nl> + 	 	 	 	 	 this . createCOMInterface ( i ) ; <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ DISPATCH ) { <nl> <nl> 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ COCLASS ) { <nl> @ @ - 108 , 9 + 107 , 69 @ @ public class TypeLibraryImporter { <nl> 	 	 this . out . println ( " * / " ) ; <nl> 	 } <nl> <nl> - 	 private void createCOMEnum ( Object [ ] typeLibDoc , ITypeInfoUtil typeInfoUtil ) { <nl> - 	 	 String enumName = ( String ) typeLibDoc [ 0 ] ; <nl> - 	 	 System . out . println ( enumName ) ; <nl> + 	 private void createCOMEnum ( int index ) { <nl> + 	 	 Object [ ] typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; <nl> + <nl> + 	 	 String enumName = ( String ) typeLibDoc [ 0 ] ; <nl> + 	 	 String helpString = ( String ) typeLibDoc [ 1 ] ; <nl> + 	 	 System . out . println ( enumName ) ; <nl> + 	 	 / / <nl> + 	 	 / / <nl> + 	 	 / / this . logInfo ( " Type of kind ' enum ' found : " + enumName ) ; <nl> + 	 	 / / this . out . print ( " 	 public static class TYPEKIND extends Structure { " <nl> + 	 	 / / + CR <nl> + 	 	 / / + <nl> + 	 	 / / " 	 public static class ByReference extends TYPEKIND implements 	 Structure . ByReference { } " <nl> + 	 	 / / + CRCR + " 	 	 	 public int value ; " + CRCR + " 	 	 	 public " <nl> + 	 	 / / + enumName + " ( ) { } " + CRCR <nl> + 	 	 / / + " public static final int " + enumName <nl> + 	 	 / / + " _ ENUM = 0 ; " + CRCR ) ; <nl> + 	 	 / / <nl> + 	 	 / / System . out . println ( documentation [ 0 ] ) ; <nl> + <nl> + 	 	 MEMBERID memberID ; <nl> + 	 	 FUNCDESC pFuncDesc ; <nl> + 	 	 VARDESC pVarDesc ; <nl> + 	 	 BSTR bstrMethod ; <nl> + 	 	 BSTR bstrProperty ; <nl> + <nl> + 	 	 / / Get the TypeAttributes <nl> + 	 	 ITypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; <nl> + 	 	 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; <nl> + 	 	 <nl> + 	 	 System . out . println ( typeAttr . toString ( ) ) ; <nl> + 	 	 <nl> + 	 	 / / Lets get all the methods for this Type Info <nl> + 	 	 for ( int i = 0 ; i < typeAttr . cFuncs . intValue ( ) ; i + + ) { <nl> + 	 	 	 / / Get the function description <nl> + 	 	 	 FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( i ) ; <nl> + <nl> + 	 	 	 / / Get the member ID <nl> + 	 	 	 memberID = funcDesc . memid ; <nl> + <nl> + 	 	 	 / / Get the name of the method <nl> + 	 	 	 Object [ ] typeInfoDoc = typeInfoUtil . getDocumentation ( memberID ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 for ( int i = 0 ; i < typeAttr . cVars . intValue ( ) ; i + + ) { <nl> + 	 	 	 / / Get the property description <nl> + 	 	 	 VARDESC varDesc = typeInfoUtil . getVarDesc ( i ) ; <nl> + <nl> + 	 	 	 / / Get the member ID <nl> + 	 	 	 memberID = varDesc . memid ; <nl> + <nl> + 	 	 	 / / Get the name of the property <nl> + 	 	 	 Object [ ] typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; <nl> + 	 	 } <nl> + <nl> + 	 } <nl> + <nl> + 	 private void createCOMInterface ( int index ) { <nl> + 	 	 ITypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; <nl> + 	 	 Object [ ] typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; <nl> + <nl> + 	 	 String enumName = ( String ) typeLibDoc [ 0 ] ; <nl> + 	 	 System . out . println ( enumName ) ; <nl> 	 	 / / <nl> 	 	 / / <nl> 	 	 / / this . logInfo ( " Type of kind ' enum ' found : " + enumName ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> index 8a7c364 . . e09a852 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> @ @ - 347 , 6 + 347 , 18 @ @ public interface OaIdl { <nl> 	 public static class TYPEKIND extends Structure { <nl> 	 	 public static class ByReference extends TYPEKIND implements <nl> 	 	 	 	 Structure . ByReference { <nl> + 	 	 	 public ByReference ( ) { <nl> + 	 	 	 	 / / TODO Auto - generated constructor stub <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 public ByReference ( int value ) { <nl> + 	 	 	 	 super ( value ) ; <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 public ByReference ( TYPEKIND typekind ) { <nl> + 	 	 	 	 super ( typekind . getPointer ( ) ) ; <nl> + 	 	 	 	 value = typekind . value ; <nl> + 	 	 	 } <nl> 	 	 } <nl> <nl> 	 	 public int value ; <nl> @ @ - 1105 , 6 + 1117 , 13 @ @ public interface OaIdl { <nl> 	 public static class TYPEDESC extends Structure { <nl> 	 	 public static class ByReference extends TYPEDESC implements <nl> 	 	 	 	 Structure . ByReference { <nl> + <nl> + 	 	 	 public ByReference ( ) { <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 public ByReference ( TYPEDESC typedesc ) { <nl> + 	 	 	 	 super ( typedesc . getPointer ( ) ) ; <nl> + 	 	 	 } <nl> 	 	 } ; <nl> <nl> 	 	 public _ TYPEDESC _ typeDesc ; <nl> @ @ - 1117 , 43 + 1136 , 26 @ @ public interface OaIdl { <nl> <nl> 	 	 	 public ARRAYDESC . ByReference lpadesc ; <nl> <nl> - 	 	 	 public HREFTYPEbyReference hreftype ; <nl> + 	 	 	 public HREFTYPE hreftype ; <nl> <nl> 	 	 	 public _ TYPEDESC ( ) { <nl> 	 	 	 	 super ( ) ; <nl> - 	 	 	 	 setType ( " lptdesc " ) ; <nl> - 	 	 	 	 this . read ( ) ; <nl> + 	 	 	 	 setType ( " hreftype " ) ; <nl> 	 	 	 } <nl> <nl> 	 	 	 public _ TYPEDESC ( Pointer pointer ) { <nl> 	 	 	 	 super ( pointer ) ; <nl> - 	 	 	 	 this . read ( ) ; <nl> - 	 	 	 } <nl> - <nl> - 	 	 	 public _ TYPEDESC ( ARRAYDESC . ByReference lpadesc ) { <nl> - 	 	 	 	 super ( ) ; <nl> - 	 	 	 	 this . lpadesc = lpadesc ; <nl> - 	 	 	 	 setType ( " lpadesc " ) ; <nl> - 	 	 	 } <nl> - <nl> - 	 	 	 public _ TYPEDESC ( HREFTYPEbyReference hreftype ) { <nl> - 	 	 	 	 super ( ) ; <nl> - 	 	 	 	 this . hreftype = hreftype ; <nl> 	 	 	 	 setType ( " hreftype " ) ; <nl> 	 	 	 } <nl> - <nl> - 	 	 	 public _ TYPEDESC ( TYPEDESC . ByReference lptdesc ) { <nl> - 	 	 	 	 super ( ) ; <nl> - 	 	 	 	 this . lptdesc = lptdesc ; <nl> - 	 	 	 	 setType ( " lptdesc " ) ; <nl> - 	 	 	 } <nl> 	 	 } ; <nl> <nl> 	 	 public TYPEDESC ( ) { <nl> + 	 	 	 this . write ( ) ; <nl> 	 	 } <nl> <nl> 	 	 public TYPEDESC ( Pointer pointer ) { <nl> 	 	 	 super ( pointer ) ; <nl> + 	 	 	 this . write ( ) ; <nl> 	 	 } <nl> <nl> 	 	 public TYPEDESC ( _ TYPEDESC _ typeDesc , VARTYPE vt ) { <nl> @ @ - 1171 , 18 + 1173 , 25 @ @ public interface OaIdl { <nl> 	 public static class IDLDESC extends Structure { <nl> 	 	 public static class ByReference extends IDLDESC implements <nl> 	 	 	 	 Structure . ByReference { <nl> + <nl> + 	 	 	 public ByReference ( ) { <nl> + 	 	 	 } <nl> + <nl> + 	 	 	 public ByReference ( IDLDESC idldesc ) { <nl> + 	 	 	 	 super ( idldesc . dwReserved , idldesc . wIDLFlags ) ; <nl> + 	 	 	 } <nl> 	 	 } ; <nl> <nl> 	 	 / / / C type : ULONG _ PTR <nl> 	 	 public ULONG _ PTR dwReserved ; <nl> - 	 	 public short wIDLFlags ; <nl> + 	 	 public USHORT wIDLFlags ; <nl> <nl> 	 	 public IDLDESC ( ) { <nl> 	 	 	 super ( ) ; <nl> 	 	 } <nl> <nl> 	 	 / / / @ param dwReserved C type : ULONG _ PTR <nl> - 	 	 public IDLDESC ( ULONG _ PTR dwReserved , short wIDLFlags ) { <nl> + 	 	 public IDLDESC ( ULONG _ PTR dwReserved , USHORT wIDLFlags ) { <nl> 	 	 	 super ( ) ; <nl> 	 	 	 this . dwReserved = dwReserved ; <nl> 	 	 	 this . wIDLFlags = wIDLFlags ; <nl> @ @ - 1281 , 16 + 1290 , 16 @ @ public interface OaIdl { <nl> 	 public static class TYPEATTR extends Structure { <nl> 	 	 public static class ByReference extends TYPEATTR implements <nl> 	 	 	 	 Structure . ByReference { <nl> - 	 	 } ; <nl> + 	 	 } <nl> <nl> - 	 	 public GUID guid ; <nl> + 	 	 public GUID . ByReference guid ; <nl> 	 	 public LCID lcid ; <nl> 	 	 public DWORD dwReserved ; <nl> 	 	 public MEMBERID memidConstructor ; <nl> 	 	 public MEMBERID memidDestructor ; <nl> 	 	 public LPOLESTR lpstrSchema ; <nl> 	 	 public ULONG cbSizeInstance ; <nl> - 	 	 public TYPEKIND typekind ; <nl> + 	 	 public TYPEKIND . ByReference typekind ; <nl> 	 	 public WORD cFuncs ; <nl> 	 	 public WORD cVars ; <nl> 	 	 public WORD cImplTypes ; <nl> @ @ - 1299 , 15 + 1308 , 14 @ @ public interface OaIdl { <nl> 	 	 public WORD wTypeFlags ; <nl> 	 	 public WORD wMajorVerNum ; <nl> 	 	 public WORD wMinorVerNum ; <nl> - 	 	 public TYPEDESC tdescAlias ; <nl> - 	 	 public IDLDESC idldescType ; <nl> + 	 	 public TYPEDESC . ByReference tdescAlias ; <nl> + 	 	 public IDLDESC . ByReference idldescType ; <nl> <nl> 	 	 public TYPEATTR ( ) { <nl> 	 	 } <nl> <nl> 	 	 public TYPEATTR ( Pointer pointer ) { <nl> 	 	 	 super ( pointer ) ; <nl> - 	 	 	 this . read ( ) ; <nl> 	 	 } <nl> <nl> 	 	 @ Override <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> index 02cb5f0 . . d4be134 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java <nl> @ @ - 15 , 10 + 15 , 10 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 ; <nl> <nl> + import com . sun . jna . Memory ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . PointerType ; <nl> import com . sun . jna . Structure ; <nl> - import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; <nl> import com . sun . jna . platform . win32 . WinDef . USHORT ; <nl> import com . sun . jna . ptr . ByReference ; <nl> <nl> @ @ - 98 , 13 + 98 , 12 @ @ public interface WTypes { <nl> 	 } <nl> <nl> 	 public class BSTRByReference extends ByReference { <nl> - <nl> 	 	 public BSTRByReference ( ) { <nl> 	 	 	 super ( Pointer . SIZE ) ; <nl> 	 	 } <nl> <nl> 	 	 public BSTRByReference ( BSTR value ) { <nl> - 	 	 	 super ( Pointer . SIZE ) ; <nl> + 	 	 	 this ( ) ; <nl> 	 	 	 setValue ( value ) ; <nl> 	 	 } <nl> <nl> @ @ - 115 , 21 + 114 , 25 @ @ public interface WTypes { <nl> 	 	 public BSTR getValue ( ) { <nl> 	 	 	 return new BSTR ( getPointer ( ) . getPointer ( 0 ) ) ; <nl> 	 	 } <nl> - 	 	 <nl> + <nl> 	 	 public String getString ( ) { <nl> 	 	 	 return this . getValue ( ) . getValue ( ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public class LPOLESTR extends ByReference { <nl> - <nl> + 	 public class LPOLESTR extends PointerType { <nl> 	 	 public LPOLESTR ( ) { <nl> - 	 	 	 super ( Pointer . SIZE ) ; <nl> + 	 	 	 super ( ) ; <nl> + 	 	 	 setPointer ( new Memory ( Pointer . SIZE ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public LPOLESTR ( Pointer pointer ) { <nl> + 	 	 	 super ( pointer ) ; <nl> 	 	 } <nl> <nl> 	 	 public LPOLESTR ( String value ) { <nl> 	 	 	 this ( ) ; <nl> - 	 	 	 setValue ( value ) ; <nl> + 	 	 	 this . setValue ( value ) ; <nl> 	 	 } <nl> <nl> 	 	 public void setValue ( String value ) { <nl> @ @ - 137 , 12 + 140 , 17 @ @ public interface WTypes { <nl> 	 	 } <nl> <nl> 	 	 public String getValue ( ) { <nl> - 	 	 	 return getPointer ( ) . getString ( 0 , true ) ; <nl> + 	 	 	 Pointer pointer = this . getPointer ( ) ; <nl> + 	 	 	 String str = null ; <nl> + 	 	 	 if ( pointer ! = null ) <nl> + 	 	 	 	 str = pointer . getString ( 0 , true ) ; <nl> + <nl> + 	 	 	 return str ; <nl> 	 	 } <nl> - 	 	 <nl> + <nl> 	 	 @ Override <nl> 	 	 public String toString ( ) { <nl> - 	 	 	 return getValue ( ) ; <nl> + 	 	 	 return this . getValue ( ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMTest . java <nl> new file mode 100644 <nl> index 0000000 . . fa86e42 <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMTest . java <nl> @ @ - 0 , 0 + 1 , 77 @ @ <nl> + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation ; either <nl> + * version 2 . 1 of the License , or ( at your option ) any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * / <nl> + package com . sun . jna . platform . win32 . COM ; <nl> + <nl> + import junit . framework . TestCase ; <nl> + <nl> + import com . sun . jna . Native ; <nl> + import com . sun . jna . platform . win32 . Guid . GUID ; <nl> + import com . sun . jna . platform . win32 . Kernel32 ; <nl> + import com . sun . jna . platform . win32 . OaIdl . IDLDESC ; <nl> + import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; <nl> + import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; <nl> + import com . sun . jna . platform . win32 . OaIdl . TYPEDESC ; <nl> + import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; <nl> + import com . sun . jna . platform . win32 . WTypes . LPOLESTR ; <nl> + import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> + import com . sun . jna . platform . win32 . WinDef . ULONG ; <nl> + import com . sun . jna . platform . win32 . WinDef . WORD ; <nl> + <nl> + / * * <nl> + * @ author dblock [ at ] dblock [ dot ] org <nl> + * / <nl> + public class COMTest extends TestCase { <nl> + <nl> + 	 public static void main ( String [ ] args ) { <nl> + 	 	 junit . textui . TestRunner . run ( COMTest . class ) ; <nl> + 	 } <nl> + <nl> + 	 public COMTest ( ) { <nl> + 	 	 Native . setProtected ( true ) ; <nl> + 	 } <nl> + <nl> + 	 @ Override <nl> + 	 protected void setUp ( ) throws Exception { <nl> + 	 } <nl> + <nl> + 	 @ Override <nl> + 	 protected void tearDown ( ) throws Exception { <nl> + 	 } <nl> + <nl> + 	 public void testTYPEATTR ( ) { <nl> + 	 	 TYPEATTR typeAttr = new TYPEATTR ( ) ; <nl> + 	 	 typeAttr . guid = new GUID . ByReference ( <nl> + 	 	 	 	 GUID . fromString ( " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " ) ) ; <nl> + 	 	 typeAttr . lcid = Kernel32 . INSTANCE . GetSystemDefaultLCID ( ) ; <nl> + 	 	 typeAttr . dwReserved = new DWORD ( 1 ) ; <nl> + 	 	 typeAttr . memidConstructor = new MEMBERID ( 1 ) ; <nl> + 	 	 typeAttr . memidDestructor = new MEMBERID ( 1 ) ; <nl> + 	 	 / / typeAttr . lpstrSchema = new LPOLESTR ( " Hello World ! " ) ; <nl> + 	 	 typeAttr . cbSizeInstance = new ULONG ( 1 ) ; <nl> + 	 	 typeAttr . typekind = new TYPEKIND . ByReference ( 10 ) ; <nl> + 	 	 typeAttr . cFuncs = new WORD ( 100 ) ; <nl> + 	 	 typeAttr . cVars = new WORD ( 100 ) ; <nl> + 	 	 typeAttr . cImplTypes = new WORD ( 12345 ) ; <nl> + 	 	 typeAttr . cbSizeVft = new WORD ( 1234 ) ; <nl> + 	 	 typeAttr . cbAlignment = new WORD ( 123 ) ; <nl> + 	 	 typeAttr . wMajorVerNum = new WORD ( 111 ) ; <nl> + 	 	 typeAttr . wMinorVerNum = new WORD ( 101 ) ; <nl> + 	 	 typeAttr . tdescAlias = new TYPEDESC . ByReference ( ) ; <nl> + 	 	 typeAttr . idldescType = new IDLDESC . ByReference ( ) ; <nl> + <nl> + 	 	 System . out . println ( typeAttr . toString ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public void testDirectMemory ( ) { <nl> + 	 } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> index 2e557e0 . . 81b0585 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> @ @ - 11 , 7 + 11 , 6 @ @ import com . sun . jna . NativeLong ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . Union ; <nl> - import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> import com . sun . jna . platform . win32 . WinDef . BYTE ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> @ @ - 158 , 12 + 157 , 12 @ @ public interface OaIdl { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public class VARIANT _ BOOLByReference extends ByReference { <nl> - 	 	 public VARIANT _ BOOLByReference ( ) { <nl> + 	 public class VARIANT _ BOOLbyReference extends ByReference { <nl> + 	 	 public VARIANT _ BOOLbyReference ( ) { <nl> 	 	 	 this ( new VARIANT _ BOOL ( 0 ) ) ; <nl> 	 	 } <nl> <nl> - 	 	 public VARIANT _ BOOLByReference ( VARIANT _ BOOL value ) { <nl> + 	 	 public VARIANT _ BOOLbyReference ( VARIANT _ BOOL value ) { <nl> 	 	 	 super ( VARIANT _ BOOL . SIZE ) ; <nl> 	 	 	 setValue ( value ) ; <nl> 	 	 } <nl> @ @ - 177 , 18 + 176 , 19 @ @ public interface OaIdl { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public class _ VARIANT _ BOOLByReference extends VARIANT _ BOOLByReference { <nl> - 	 	 public _ VARIANT _ BOOLByReference ( ) { <nl> + 	 public class _ VARIANT _ BOOLbyReference extends VARIANT _ BOOLbyReference { <nl> + 	 	 public _ VARIANT _ BOOLbyReference ( ) { <nl> 	 	 	 this ( new _ VARIANT _ BOOL ( 0 ) ) ; <nl> 	 	 } <nl> <nl> - 	 	 public _ VARIANT _ BOOLByReference ( _ VARIANT _ BOOL value ) { <nl> + 	 	 public _ VARIANT _ BOOLbyReference ( _ VARIANT _ BOOL value ) { <nl> 	 	 	 super ( value ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> 	 public static class DATE extends IntegerType { <nl> 	 	 public static final int SIZE = 8 ; <nl> + <nl> 	 	 public DATE ( ) { <nl> 	 	 	 this ( 0 ) ; <nl> 	 	 } <nl> @ @ - 198 , 12 + 198 , 12 @ @ public interface OaIdl { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public class DATEByReference extends ByReference { <nl> - 	 	 public DATEByReference ( ) { <nl> + 	 public class DATEbyReference extends ByReference { <nl> + 	 	 public DATEbyReference ( ) { <nl> 	 	 	 this ( new DATE ( 0 ) ) ; <nl> 	 	 } <nl> <nl> - 	 	 public DATEByReference ( DATE value ) { <nl> + 	 	 public DATEbyReference ( DATE value ) { <nl> 	 	 	 super ( DATE . SIZE ) ; <nl> 	 	 	 setValue ( value ) ; <nl> 	 	 } <nl> @ @ - 216 , 7 + 216 , 7 @ @ public interface OaIdl { <nl> 	 	 	 return new DATE ( getPointer ( ) . getLong ( 0 ) ) ; <nl> 	 	 } <nl> 	 } <nl> - 	 <nl> + <nl> 	 / * * <nl> 	 * The Class VARIANTARG . <nl> 	 * / <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> index a254c29 . . a46a092 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> @ @ - 8 , 19 + 8 , 20 @ @ import com . sun . jna . Structure ; <nl> import com . sun . jna . Union ; <nl> import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; <nl> import com . sun . jna . platform . win32 . OaIdl . DATE ; <nl> - import com . sun . jna . platform . win32 . OaIdl . DATEByReference ; <nl> + import com . sun . jna . platform . win32 . OaIdl . DATEbyReference ; <nl> import com . sun . jna . platform . win32 . OaIdl . DECIMAL ; <nl> import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; <nl> import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; <nl> - import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLByReference ; <nl> - import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOLByReference ; <nl> + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLbyReference ; <nl> + import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOLbyReference ; <nl> import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> import com . sun . jna . platform . win32 . WinDef . BYTE ; <nl> import com . sun . jna . platform . win32 . WinDef . CHAR ; <nl> + import com . sun . jna . platform . win32 . WinDef . CHARbyReference ; <nl> import com . sun . jna . platform . win32 . WinDef . LONG ; <nl> - import com . sun . jna . platform . win32 . WinDef . LONGByReference ; <nl> import com . sun . jna . platform . win32 . WinDef . LONGLONG ; <nl> - import com . sun . jna . platform . win32 . WinDef . LONGLONGByReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . LONGLONGbyReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . LONGbyReference ; <nl> import com . sun . jna . platform . win32 . WinDef . PVOID ; <nl> import com . sun . jna . platform . win32 . WinDef . SCODE ; <nl> import com . sun . jna . platform . win32 . WinDef . SCODEbyReference ; <nl> @ @ - 28 , 9 + 29 , 9 @ @ import com . sun . jna . platform . win32 . WinDef . SHORT ; <nl> import com . sun . jna . platform . win32 . WinDef . UINT ; <nl> import com . sun . jna . platform . win32 . WinDef . UINTbyReference ; <nl> import com . sun . jna . platform . win32 . WinDef . ULONG ; <nl> - import com . sun . jna . platform . win32 . WinDef . ULONGByReference ; <nl> import com . sun . jna . platform . win32 . WinDef . ULONGLONG ; <nl> - import com . sun . jna . platform . win32 . WinDef . ULONGLONGByReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . ULONGLONGbyReference ; <nl> + import com . sun . jna . platform . win32 . WinDef . ULONGbyReference ; <nl> import com . sun . jna . platform . win32 . WinDef . USHORT ; <nl> import com . sun . jna . platform . win32 . WinDef . USHORTbyReference ; <nl> import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> @ @ - 246 , 23 + 247 , 23 @ @ public interface Variant { <nl> 	 	 	 	 / / SHORT * VT _ BYREF | VT _ I2 <nl> 	 	 	 	 public ShortByReference piVal ; <nl> 	 	 	 	 / / LONG * VT _ BYREF | VT _ I4 <nl> - 	 	 	 	 public LONGByReference plVal ; <nl> + 	 	 	 	 public LONGbyReference plVal ; <nl> 	 	 	 	 / / LONGLONG * VT _ BYREF | VT _ I8 <nl> - 	 	 	 	 public LONGLONGByReference pllVal ; <nl> + 	 	 	 	 public LONGLONGbyReference pllVal ; <nl> 	 	 	 	 / / FLOAT * VT _ BYREF | VT _ R4 <nl> 	 	 	 	 public FloatByReference pfltVal ; <nl> 	 	 	 	 / / DOUBLE * VT _ BYREF | VT _ R8 <nl> 	 	 	 	 public DoubleByReference pdblVal ; <nl> 	 	 	 	 / / VARIANT _ BOOL * VT _ BYREF | VT _ BOOL <nl> - 	 	 	 	 public VARIANT _ BOOLByReference pboolVal ; <nl> + 	 	 	 	 public VARIANT _ BOOLbyReference pboolVal ; <nl> 	 	 	 	 / / VARIANT _ BOOL * VT _ BYREF | VT _ BOOL <nl> - 	 	 	 	 public _ VARIANT _ BOOLByReference pbool ; <nl> + 	 	 	 	 public _ VARIANT _ BOOLbyReference pbool ; <nl> 	 	 	 	 / / SCODE * VT _ BYREF | VT _ ERROR <nl> 	 	 	 	 public SCODEbyReference pscode ; <nl> 	 	 	 	 / / CY * VT _ BYREF | VT _ CY <nl> 	 	 	 	 public CURRENCY . ByReference pcyVal ; <nl> 	 	 	 	 / / DATE * VT _ BYREF | VT _ DATE <nl> - 	 	 	 	 public DATEByReference pdate ; <nl> + 	 	 	 	 public DATEbyReference pdate ; <nl> 	 	 	 	 / / BSTR * VT _ BYREF | VT _ BSTR <nl> 	 	 	 	 public BSTR . ByReference pbstrVal ; <nl> 	 	 	 	 / / IUnknown * * VT _ BYREF | VT _ UNKNOWN <nl> @ @ - 290 , 13 + 291 , 13 @ @ public interface Variant { <nl> 	 	 	 	 / / DECIMAL * VT _ BYREF | VT _ DECIMAL <nl> 	 	 	 	 public DECIMAL . ByReference pdecVal ; <nl> 	 	 	 	 / / CHAR * VT _ BYREF | VT _ I1 <nl> - 	 	 	 	 public CHAR . ByReference pcVal ; <nl> + 	 	 	 	 public CHARbyReference pcVal ; <nl> 	 	 	 	 / / USHORT * VT _ BYREF | VT _ UI2 <nl> 	 	 	 	 public USHORTbyReference puiVal ; <nl> 	 	 	 	 / / ULONG * VT _ BYREF | VT _ UI4 <nl> - 	 	 	 	 public ULONGByReference pulVal ; <nl> + 	 	 	 	 public ULONGbyReference pulVal ; <nl> 	 	 	 	 / / ULONGLONG * VT _ BYREF | VT _ UI8 <nl> - 	 	 	 	 public ULONGLONGByReference pullVal ; <nl> + 	 	 	 	 public ULONGLONGbyReference pullVal ; <nl> 	 	 	 	 / / INT * VT _ BYREF | VT _ INT <nl> 	 	 	 	 public IntByReference pintVal ; <nl> 	 	 	 	 / / UINT * VT _ BYREF | VT _ UINT <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> index ec2942b . . dfb6a2e 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> @ @ - 116 , 12 + 116 , 12 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public class LONGByReference extends ByReference { <nl> - 	 	 public LONGByReference ( ) { <nl> + 	 public class LONGbyReference extends ByReference { <nl> + 	 	 public LONGbyReference ( ) { <nl> 	 	 	 this ( new LONG ( 0 ) ) ; <nl> 	 	 } <nl> <nl> - 	 	 public LONGByReference ( LONG value ) { <nl> + 	 	 public LONGbyReference ( LONG value ) { <nl> 	 	 	 super ( LONG . SIZE ) ; <nl> 	 	 	 setValue ( value ) ; <nl> 	 	 } <nl> @ @ - 147 , 12 + 147 , 12 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public class LONGLONGByReference extends ByReference { <nl> - 	 	 public LONGLONGByReference ( ) { <nl> + 	 public class LONGLONGbyReference extends ByReference { <nl> + 	 	 public LONGLONGbyReference ( ) { <nl> 	 	 	 this ( new LONGLONG ( 0 ) ) ; <nl> 	 	 } <nl> <nl> - 	 	 public LONGLONGByReference ( LONGLONG value ) { <nl> + 	 	 public LONGLONGbyReference ( LONGLONG value ) { <nl> 	 	 	 super ( LONGLONG . SIZE ) ; <nl> 	 	 	 setValue ( value ) ; <nl> 	 	 } <nl> @ @ - 634 , 12 + 634 , 12 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public class ULONGByReference extends ByReference { <nl> - 	 	 public ULONGByReference ( ) { <nl> + 	 public class ULONGbyReference extends ByReference { <nl> + 	 	 public ULONGbyReference ( ) { <nl> 	 	 	 this ( new ULONG ( 0 ) ) ; <nl> 	 	 } <nl> <nl> - 	 	 public ULONGByReference ( ULONG value ) { <nl> + 	 	 public ULONGbyReference ( ULONG value ) { <nl> 	 	 	 super ( ULONG . SIZE ) ; <nl> 	 	 	 setValue ( value ) ; <nl> 	 	 } <nl> @ @ - 665 , 12 + 665 , 12 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public class ULONGLONGByReference extends ByReference { <nl> - 	 	 public ULONGLONGByReference ( ) { <nl> + 	 public class ULONGLONGbyReference extends ByReference { <nl> + 	 	 public ULONGLONGbyReference ( ) { <nl> 	 	 	 this ( new ULONGLONG ( 0 ) ) ; <nl> 	 	 } <nl> <nl> - 	 	 public ULONGLONGByReference ( ULONGLONG value ) { <nl> + 	 	 public ULONGLONGbyReference ( ULONGLONG value ) { <nl> 	 	 	 super ( ULONGLONG . SIZE ) ; <nl> 	 	 	 setValue ( value ) ; <nl> 	 	 } <nl> @ @ - 1051 , 11 + 1051 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 } <nl> <nl> 	 public static class CHAR extends IntegerType { <nl> - <nl> - 	 	 public static class ByReference extends CHAR implements <nl> - 	 	 	 	 Structure . ByReference { <nl> - <nl> - 	 	 } <nl> + 	 	 public static final int SIZE = 1 ; <nl> <nl> 	 	 public CHAR ( ) { <nl> 	 	 	 this ( 0 ) ; <nl> @ @ - 1065 , 4 + 1061 , 23 @ @ public interface WinDef extends StdCallLibrary { <nl> 	 	 	 super ( 1 , value , false ) ; <nl> 	 	 } <nl> 	 } <nl> + <nl> + 	 public static class CHARbyReference extends ByReference { <nl> + 	 	 public CHARbyReference ( ) { <nl> + 	 	 	 this ( new CHAR ( 0 ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public CHARbyReference ( CHAR value ) { <nl> + 	 	 	 super ( CHAR . SIZE ) ; <nl> + 	 	 	 setValue ( value ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public void setValue ( CHAR value ) { <nl> + 	 	 	 getPointer ( ) . setByte ( 0 , value . byteValue ( ) ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public CHAR getValue ( ) { <nl> + 	 	 	 return new CHAR ( getPointer ( ) . getChar ( 0 ) ) ; <nl> + 	 	 } <nl> + 	 } <nl> }

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java b / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java 
 index 611d34c . . d8b4d20 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / BaseTSD . java 
 @ @ - 1 , 127 + 1 , 129 @ @ 
 - / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation ; either 
 - * version 2 . 1 of the License , or ( at your option ) any later version . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * / 
 - package com . sun . jna . platform . win32 ; 
 - 
 - import com . sun . jna . IntegerType ; 
 - import com . sun . jna . Pointer ; 
 - import com . sun . jna . ptr . ByReference ; 
 - import com . sun . jna . win32 . StdCallLibrary ; 
 - 
 - / * * 
 - * Based on basetsd . h ( various types ) 
 - * @ author dblock [ at ] dblock [ dot ] org 
 - * / 
 - @ SuppressWarnings ( " serial " ) 
 - public interface BaseTSD extends StdCallLibrary { 
 - / * * 
 - * Signed long type for pointer precision . 
 - * Use when casting a pointer to a long to perform pointer arithmetic . 
 - * / 
 - public static class LONG _ PTR extends IntegerType { 
 - public LONG _ PTR ( ) { 
 - this ( 0 ) ; 
 - } 
 - 
 - public LONG _ PTR ( long value ) { 
 - super ( Pointer . SIZE , value ) ; 
 - } 
 - 
 - public Pointer toPointer ( ) { 
 - return Pointer . createConstant ( longValue ( ) ) ; 
 - } 
 - } 
 - 	 
 - / * * 
 - * Signed SIZE _ T . 
 - * / 
 - public static class SSIZE _ T extends LONG _ PTR { 
 - public SSIZE _ T ( ) { 
 - this ( 0 ) ; 
 - } 
 - 
 - public SSIZE _ T ( long value ) { 
 - super ( value ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Unsigned LONG _ PTR . 
 - * / 
 - public static class ULONG _ PTR extends IntegerType { 
 - public ULONG _ PTR ( ) { 
 - this ( 0 ) ; 
 - } 
 - 
 - public ULONG _ PTR ( long value ) { 
 - super ( Pointer . SIZE , value , true ) ; 
 - } 
 - 
 - public Pointer toPointer ( ) { 
 - return Pointer . createConstant ( longValue ( ) ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * PULONG _ PTR 
 - * / 
 - public static class ULONG _ PTRByReference extends ByReference { 
 - public ULONG _ PTRByReference ( ) { 
 - this ( new ULONG _ PTR ( 0 ) ) ; 
 - } 
 - public ULONG _ PTRByReference ( ULONG _ PTR value ) { 
 - super ( Pointer . SIZE ) ; 
 - setValue ( value ) ; 
 - } 
 - public void setValue ( ULONG _ PTR value ) { 
 - if ( Pointer . SIZE = = 4 ) { 
 - getPointer ( ) . setInt ( 0 , value . intValue ( ) ) ; 
 - } 
 - else { 
 - getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; 
 - } 
 - } 
 - public ULONG _ PTR getValue ( ) { 
 - return new ULONG _ PTR ( Pointer . SIZE = = 4 
 - ? getPointer ( ) . getInt ( 0 ) 
 - : getPointer ( ) . getLong ( 0 ) ) ; 
 - } 
 - } 
 - 
 - 
 - / * * 
 - * Unsigned DWORD _ PTR . 
 - * / 
 - public static class DWORD _ PTR extends IntegerType { 
 - public DWORD _ PTR ( ) { 
 - this ( 0 ) ; 
 - } 
 - 
 - public DWORD _ PTR ( long value ) { 
 - super ( Pointer . SIZE , value ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * The maximum number of bytes to which a pointer can point . 
 - * Use for a count that must span the full range of a pointer . 
 - * / 
 - public static class SIZE _ T extends ULONG _ PTR { 
 - public SIZE _ T ( ) { 
 - this ( 0 ) ; 
 - } 
 - 
 - public SIZE _ T ( long value ) { 
 - super ( value ) ; 
 - } 
 - } 
 - } 
 + / * Copyright ( c ) 2010 Daniel Doubrovkine , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 ; 
 + 
 + import com . sun . jna . IntegerType ; 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . ptr . ByReference ; 
 + import com . sun . jna . win32 . StdCallLibrary ; 
 + 
 + / * * 
 + * Based on basetsd . h ( various types ) 
 + * @ author dblock [ at ] dblock [ dot ] org 
 + * / 
 + @ SuppressWarnings ( " serial " ) 
 + public interface BaseTSD extends StdCallLibrary { 
 + / * * 
 + * Signed long type for pointer precision . 
 + * Use when casting a pointer to a long to perform pointer arithmetic . 
 + * / 
 + public static class LONG _ PTR extends IntegerType { 
 + public LONG _ PTR ( ) { 
 + this ( 0 ) ; 
 + } 
 + 
 + public LONG _ PTR ( long value ) { 
 + super ( Pointer . SIZE , value ) ; 
 + } 
 + 
 + public Pointer toPointer ( ) { 
 + return Pointer . createConstant ( longValue ( ) ) ; 
 + } 
 + } 
 + 	 
 + / * * 
 + * Signed SIZE _ T . 
 + * / 
 + public static class SSIZE _ T extends LONG _ PTR { 
 + public SSIZE _ T ( ) { 
 + this ( 0 ) ; 
 + } 
 + 
 + public SSIZE _ T ( long value ) { 
 + super ( value ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Unsigned LONG _ PTR . 
 + * / 
 + public static class ULONG _ PTR extends IntegerType { 
 + 	 public static final int SIZE = 4 ; 
 + 	 
 + public ULONG _ PTR ( ) { 
 + this ( 0 ) ; 
 + } 
 + 
 + public ULONG _ PTR ( long value ) { 
 + super ( SIZE , value , true ) ; 
 + } 
 + 
 + public Pointer toPointer ( ) { 
 + return Pointer . createConstant ( longValue ( ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * PULONG _ PTR 
 + * / 
 + public static class ULONG _ PTRByReference extends ByReference { 
 + public ULONG _ PTRByReference ( ) { 
 + this ( new ULONG _ PTR ( 0 ) ) ; 
 + } 
 + public ULONG _ PTRByReference ( ULONG _ PTR value ) { 
 + super ( Pointer . SIZE ) ; 
 + setValue ( value ) ; 
 + } 
 + public void setValue ( ULONG _ PTR value ) { 
 + if ( Pointer . SIZE = = 4 ) { 
 + getPointer ( ) . setInt ( 0 , value . intValue ( ) ) ; 
 + } 
 + else { 
 + getPointer ( ) . setLong ( 0 , value . longValue ( ) ) ; 
 + } 
 + } 
 + public ULONG _ PTR getValue ( ) { 
 + return new ULONG _ PTR ( Pointer . SIZE = = 4 
 + ? getPointer ( ) . getInt ( 0 ) 
 + : getPointer ( ) . getLong ( 0 ) ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Unsigned DWORD _ PTR . 
 + * / 
 + public static class DWORD _ PTR extends IntegerType { 
 + public DWORD _ PTR ( ) { 
 + this ( 0 ) ; 
 + } 
 + 
 + public DWORD _ PTR ( long value ) { 
 + super ( Pointer . SIZE , value ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * The maximum number of bytes to which a pointer can point . 
 + * Use for a count that must span the full range of a pointer . 
 + * / 
 + public static class SIZE _ T extends ULONG _ PTR { 
 + public SIZE _ T ( ) { 
 + this ( 0 ) ; 
 + } 
 + 
 + public SIZE _ T ( long value ) { 
 + super ( value ) ; 
 + } 
 + } 
 + } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java 
 index ed00ba6 . . d73408c 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeInfo . java 
 @ @ - 57 , 9 + 57 , 10 @ @ public class ITypeInfo extends IUnknown { 
 	 } 
 
 	 public HRESULT GetTypeAttr ( 
 - 	 / * [ out ] * / TYPEATTR . ByReference pTypeAttr ) { 
 - 
 - 	 	 int hr = this . invoke ( 3 , new Object [ ] { this . getPointer ( ) , pTypeAttr } ) ; 
 + 	 / * [ out ] * / TYPEATTR . ByReference ppTypeAttr ) { 
 + 	 	 
 + 	 	 
 + 	 	 int hr = this . invoke ( 3 , new Object [ ] { this . getPointer ( ) , ppTypeAttr } ) ; 
 	 	 return new HRESULT ( hr ) ; 
 	 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibraryImporter . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibraryImporter . java 
 index 13d26f0 . . 5f32f2f 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibraryImporter . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibraryImporter . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import java . io . PrintStream ; 
 import com . sun . jna . platform . win32 . OaIdl . FUNCDESC ; 
 import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; 
 import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; 
 + import com . sun . jna . platform . win32 . OaIdl . TYPEDESC ; 
 import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; 
 import com . sun . jna . platform . win32 . OaIdl . VARDESC ; 
 import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 @ @ - 43 , 17 + 44 , 15 @ @ public class TypeLibraryImporter { 
 
 	 	 	 for ( int i = 0 ; i < typeLibUtil . getTypeInfoCount ( ) ; + + i ) { 
 	 	 	 	 TYPEKIND typekind = typeLibUtil . getTypeInfoType ( i ) ; 
 - 	 	 	 	 ITypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( i ) ; 
 - 	 	 	 	 Object [ ] typeLibDoc = this . typeLibUtil . getDocumentation ( i ) ; 
 
 	 	 	 	 if ( typekind . value = = TYPEKIND . TKIND _ ENUM ) { 
 - 	 	 	 	 	 this . createCOMEnum ( typeLibDoc , typeInfoUtil ) ; 
 + 	 	 	 	 	 this . createCOMEnum ( i ) ; 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ RECORD ) { 
 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ MODULE ) { 
 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ INTERFACE ) { 
 - 
 + 	 	 	 	 	 this . createCOMInterface ( i ) ; 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ DISPATCH ) { 
 
 	 	 	 	 } else if ( typekind . value = = TYPEKIND . TKIND _ COCLASS ) { 
 @ @ - 108 , 9 + 107 , 69 @ @ public class TypeLibraryImporter { 
 	 	 this . out . println ( " * / " ) ; 
 	 } 
 
 - 	 private void createCOMEnum ( Object [ ] typeLibDoc , ITypeInfoUtil typeInfoUtil ) { 
 - 	 	 String enumName = ( String ) typeLibDoc [ 0 ] ; 
 - 	 	 System . out . println ( enumName ) ; 
 + 	 private void createCOMEnum ( int index ) { 
 + 	 	 Object [ ] typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; 
 + 
 + 	 	 String enumName = ( String ) typeLibDoc [ 0 ] ; 
 + 	 	 String helpString = ( String ) typeLibDoc [ 1 ] ; 
 + 	 	 System . out . println ( enumName ) ; 
 + 	 	 / / 
 + 	 	 / / 
 + 	 	 / / this . logInfo ( " Type of kind ' enum ' found : " + enumName ) ; 
 + 	 	 / / this . out . print ( " 	 public static class TYPEKIND extends Structure { " 
 + 	 	 / / + CR 
 + 	 	 / / + 
 + 	 	 / / " 	 public static class ByReference extends TYPEKIND implements 	 Structure . ByReference { } " 
 + 	 	 / / + CRCR + " 	 	 	 public int value ; " + CRCR + " 	 	 	 public " 
 + 	 	 / / + enumName + " ( ) { } " + CRCR 
 + 	 	 / / + " public static final int " + enumName 
 + 	 	 / / + " _ ENUM = 0 ; " + CRCR ) ; 
 + 	 	 / / 
 + 	 	 / / System . out . println ( documentation [ 0 ] ) ; 
 + 
 + 	 	 MEMBERID memberID ; 
 + 	 	 FUNCDESC pFuncDesc ; 
 + 	 	 VARDESC pVarDesc ; 
 + 	 	 BSTR bstrMethod ; 
 + 	 	 BSTR bstrProperty ; 
 + 
 + 	 	 / / Get the TypeAttributes 
 + 	 	 ITypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; 
 + 	 	 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; 
 + 	 	 
 + 	 	 System . out . println ( typeAttr . toString ( ) ) ; 
 + 	 	 
 + 	 	 / / Lets get all the methods for this Type Info 
 + 	 	 for ( int i = 0 ; i < typeAttr . cFuncs . intValue ( ) ; i + + ) { 
 + 	 	 	 / / Get the function description 
 + 	 	 	 FUNCDESC funcDesc = typeInfoUtil . getFuncDesc ( i ) ; 
 + 
 + 	 	 	 / / Get the member ID 
 + 	 	 	 memberID = funcDesc . memid ; 
 + 
 + 	 	 	 / / Get the name of the method 
 + 	 	 	 Object [ ] typeInfoDoc = typeInfoUtil . getDocumentation ( memberID ) ; 
 + 	 	 } 
 + 
 + 	 	 for ( int i = 0 ; i < typeAttr . cVars . intValue ( ) ; i + + ) { 
 + 	 	 	 / / Get the property description 
 + 	 	 	 VARDESC varDesc = typeInfoUtil . getVarDesc ( i ) ; 
 + 
 + 	 	 	 / / Get the member ID 
 + 	 	 	 memberID = varDesc . memid ; 
 + 
 + 	 	 	 / / Get the name of the property 
 + 	 	 	 Object [ ] typeInfoDoc2 = typeInfoUtil . getDocumentation ( memberID ) ; 
 + 	 	 } 
 + 
 + 	 } 
 + 
 + 	 private void createCOMInterface ( int index ) { 
 + 	 	 ITypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; 
 + 	 	 Object [ ] typeLibDoc = this . typeLibUtil . getDocumentation ( index ) ; 
 + 
 + 	 	 String enumName = ( String ) typeLibDoc [ 0 ] ; 
 + 	 	 System . out . println ( enumName ) ; 
 	 	 / / 
 	 	 / / 
 	 	 / / this . logInfo ( " Type of kind ' enum ' found : " + enumName ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 index 8a7c364 . . e09a852 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 @ @ - 347 , 6 + 347 , 18 @ @ public interface OaIdl { 
 	 public static class TYPEKIND extends Structure { 
 	 	 public static class ByReference extends TYPEKIND implements 
 	 	 	 	 Structure . ByReference { 
 + 	 	 	 public ByReference ( ) { 
 + 	 	 	 	 / / TODO Auto - generated constructor stub 
 + 	 	 	 } 
 + 
 + 	 	 	 public ByReference ( int value ) { 
 + 	 	 	 	 super ( value ) ; 
 + 	 	 	 } 
 + 
 + 	 	 	 public ByReference ( TYPEKIND typekind ) { 
 + 	 	 	 	 super ( typekind . getPointer ( ) ) ; 
 + 	 	 	 	 value = typekind . value ; 
 + 	 	 	 } 
 	 	 } 
 
 	 	 public int value ; 
 @ @ - 1105 , 6 + 1117 , 13 @ @ public interface OaIdl { 
 	 public static class TYPEDESC extends Structure { 
 	 	 public static class ByReference extends TYPEDESC implements 
 	 	 	 	 Structure . ByReference { 
 + 
 + 	 	 	 public ByReference ( ) { 
 + 	 	 	 } 
 + 
 + 	 	 	 public ByReference ( TYPEDESC typedesc ) { 
 + 	 	 	 	 super ( typedesc . getPointer ( ) ) ; 
 + 	 	 	 } 
 	 	 } ; 
 
 	 	 public _ TYPEDESC _ typeDesc ; 
 @ @ - 1117 , 43 + 1136 , 26 @ @ public interface OaIdl { 
 
 	 	 	 public ARRAYDESC . ByReference lpadesc ; 
 
 - 	 	 	 public HREFTYPEbyReference hreftype ; 
 + 	 	 	 public HREFTYPE hreftype ; 
 
 	 	 	 public _ TYPEDESC ( ) { 
 	 	 	 	 super ( ) ; 
 - 	 	 	 	 setType ( " lptdesc " ) ; 
 - 	 	 	 	 this . read ( ) ; 
 + 	 	 	 	 setType ( " hreftype " ) ; 
 	 	 	 } 
 
 	 	 	 public _ TYPEDESC ( Pointer pointer ) { 
 	 	 	 	 super ( pointer ) ; 
 - 	 	 	 	 this . read ( ) ; 
 - 	 	 	 } 
 - 
 - 	 	 	 public _ TYPEDESC ( ARRAYDESC . ByReference lpadesc ) { 
 - 	 	 	 	 super ( ) ; 
 - 	 	 	 	 this . lpadesc = lpadesc ; 
 - 	 	 	 	 setType ( " lpadesc " ) ; 
 - 	 	 	 } 
 - 
 - 	 	 	 public _ TYPEDESC ( HREFTYPEbyReference hreftype ) { 
 - 	 	 	 	 super ( ) ; 
 - 	 	 	 	 this . hreftype = hreftype ; 
 	 	 	 	 setType ( " hreftype " ) ; 
 	 	 	 } 
 - 
 - 	 	 	 public _ TYPEDESC ( TYPEDESC . ByReference lptdesc ) { 
 - 	 	 	 	 super ( ) ; 
 - 	 	 	 	 this . lptdesc = lptdesc ; 
 - 	 	 	 	 setType ( " lptdesc " ) ; 
 - 	 	 	 } 
 	 	 } ; 
 
 	 	 public TYPEDESC ( ) { 
 + 	 	 	 this . write ( ) ; 
 	 	 } 
 
 	 	 public TYPEDESC ( Pointer pointer ) { 
 	 	 	 super ( pointer ) ; 
 + 	 	 	 this . write ( ) ; 
 	 	 } 
 
 	 	 public TYPEDESC ( _ TYPEDESC _ typeDesc , VARTYPE vt ) { 
 @ @ - 1171 , 18 + 1173 , 25 @ @ public interface OaIdl { 
 	 public static class IDLDESC extends Structure { 
 	 	 public static class ByReference extends IDLDESC implements 
 	 	 	 	 Structure . ByReference { 
 + 
 + 	 	 	 public ByReference ( ) { 
 + 	 	 	 } 
 + 
 + 	 	 	 public ByReference ( IDLDESC idldesc ) { 
 + 	 	 	 	 super ( idldesc . dwReserved , idldesc . wIDLFlags ) ; 
 + 	 	 	 } 
 	 	 } ; 
 
 	 	 / / / C type : ULONG _ PTR 
 	 	 public ULONG _ PTR dwReserved ; 
 - 	 	 public short wIDLFlags ; 
 + 	 	 public USHORT wIDLFlags ; 
 
 	 	 public IDLDESC ( ) { 
 	 	 	 super ( ) ; 
 	 	 } 
 
 	 	 / / / @ param dwReserved C type : ULONG _ PTR 
 - 	 	 public IDLDESC ( ULONG _ PTR dwReserved , short wIDLFlags ) { 
 + 	 	 public IDLDESC ( ULONG _ PTR dwReserved , USHORT wIDLFlags ) { 
 	 	 	 super ( ) ; 
 	 	 	 this . dwReserved = dwReserved ; 
 	 	 	 this . wIDLFlags = wIDLFlags ; 
 @ @ - 1281 , 16 + 1290 , 16 @ @ public interface OaIdl { 
 	 public static class TYPEATTR extends Structure { 
 	 	 public static class ByReference extends TYPEATTR implements 
 	 	 	 	 Structure . ByReference { 
 - 	 	 } ; 
 + 	 	 } 
 
 - 	 	 public GUID guid ; 
 + 	 	 public GUID . ByReference guid ; 
 	 	 public LCID lcid ; 
 	 	 public DWORD dwReserved ; 
 	 	 public MEMBERID memidConstructor ; 
 	 	 public MEMBERID memidDestructor ; 
 	 	 public LPOLESTR lpstrSchema ; 
 	 	 public ULONG cbSizeInstance ; 
 - 	 	 public TYPEKIND typekind ; 
 + 	 	 public TYPEKIND . ByReference typekind ; 
 	 	 public WORD cFuncs ; 
 	 	 public WORD cVars ; 
 	 	 public WORD cImplTypes ; 
 @ @ - 1299 , 15 + 1308 , 14 @ @ public interface OaIdl { 
 	 	 public WORD wTypeFlags ; 
 	 	 public WORD wMajorVerNum ; 
 	 	 public WORD wMinorVerNum ; 
 - 	 	 public TYPEDESC tdescAlias ; 
 - 	 	 public IDLDESC idldescType ; 
 + 	 	 public TYPEDESC . ByReference tdescAlias ; 
 + 	 	 public IDLDESC . ByReference idldescType ; 
 
 	 	 public TYPEATTR ( ) { 
 	 	 } 
 
 	 	 public TYPEATTR ( Pointer pointer ) { 
 	 	 	 super ( pointer ) ; 
 - 	 	 	 this . read ( ) ; 
 	 	 } 
 
 	 	 @ Override 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 index 02cb5f0 . . d4be134 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WTypes . java 
 @ @ - 15 , 10 + 15 , 10 @ @ 
 * / 
 package com . sun . jna . platform . win32 ; 
 
 + import com . sun . jna . Memory ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . PointerType ; 
 import com . sun . jna . Structure ; 
 - import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; 
 import com . sun . jna . platform . win32 . WinDef . USHORT ; 
 import com . sun . jna . ptr . ByReference ; 
 
 @ @ - 98 , 13 + 98 , 12 @ @ public interface WTypes { 
 	 } 
 
 	 public class BSTRByReference extends ByReference { 
 - 
 	 	 public BSTRByReference ( ) { 
 	 	 	 super ( Pointer . SIZE ) ; 
 	 	 } 
 
 	 	 public BSTRByReference ( BSTR value ) { 
 - 	 	 	 super ( Pointer . SIZE ) ; 
 + 	 	 	 this ( ) ; 
 	 	 	 setValue ( value ) ; 
 	 	 } 
 
 @ @ - 115 , 21 + 114 , 25 @ @ public interface WTypes { 
 	 	 public BSTR getValue ( ) { 
 	 	 	 return new BSTR ( getPointer ( ) . getPointer ( 0 ) ) ; 
 	 	 } 
 - 	 	 
 + 
 	 	 public String getString ( ) { 
 	 	 	 return this . getValue ( ) . getValue ( ) ; 
 	 	 } 
 	 } 
 
 - 	 public class LPOLESTR extends ByReference { 
 - 
 + 	 public class LPOLESTR extends PointerType { 
 	 	 public LPOLESTR ( ) { 
 - 	 	 	 super ( Pointer . SIZE ) ; 
 + 	 	 	 super ( ) ; 
 + 	 	 	 setPointer ( new Memory ( Pointer . SIZE ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public LPOLESTR ( Pointer pointer ) { 
 + 	 	 	 super ( pointer ) ; 
 	 	 } 
 
 	 	 public LPOLESTR ( String value ) { 
 	 	 	 this ( ) ; 
 - 	 	 	 setValue ( value ) ; 
 + 	 	 	 this . setValue ( value ) ; 
 	 	 } 
 
 	 	 public void setValue ( String value ) { 
 @ @ - 137 , 12 + 140 , 17 @ @ public interface WTypes { 
 	 	 } 
 
 	 	 public String getValue ( ) { 
 - 	 	 	 return getPointer ( ) . getString ( 0 , true ) ; 
 + 	 	 	 Pointer pointer = this . getPointer ( ) ; 
 + 	 	 	 String str = null ; 
 + 	 	 	 if ( pointer ! = null ) 
 + 	 	 	 	 str = pointer . getString ( 0 , true ) ; 
 + 
 + 	 	 	 return str ; 
 	 	 } 
 - 	 	 
 + 
 	 	 @ Override 
 	 	 public String toString ( ) { 
 - 	 	 	 return getValue ( ) ; 
 + 	 	 	 return this . getValue ( ) ; 
 	 	 } 
 	 } 
 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMTest . java 
 new file mode 100644 
 index 0000000 . . fa86e42 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / COMTest . java 
 @ @ - 0 , 0 + 1 , 77 @ @ 
 + / * Copyright ( c ) 2012 Tobias Wolf , All Rights Reserved 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation ; either 
 + * version 2 . 1 of the License , or ( at your option ) any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * / 
 + package com . sun . jna . platform . win32 . COM ; 
 + 
 + import junit . framework . TestCase ; 
 + 
 + import com . sun . jna . Native ; 
 + import com . sun . jna . platform . win32 . Guid . GUID ; 
 + import com . sun . jna . platform . win32 . Kernel32 ; 
 + import com . sun . jna . platform . win32 . OaIdl . IDLDESC ; 
 + import com . sun . jna . platform . win32 . OaIdl . MEMBERID ; 
 + import com . sun . jna . platform . win32 . OaIdl . TYPEATTR ; 
 + import com . sun . jna . platform . win32 . OaIdl . TYPEDESC ; 
 + import com . sun . jna . platform . win32 . OaIdl . TYPEKIND ; 
 + import com . sun . jna . platform . win32 . WTypes . LPOLESTR ; 
 + import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 + import com . sun . jna . platform . win32 . WinDef . ULONG ; 
 + import com . sun . jna . platform . win32 . WinDef . WORD ; 
 + 
 + / * * 
 + * @ author dblock [ at ] dblock [ dot ] org 
 + * / 
 + public class COMTest extends TestCase { 
 + 
 + 	 public static void main ( String [ ] args ) { 
 + 	 	 junit . textui . TestRunner . run ( COMTest . class ) ; 
 + 	 } 
 + 
 + 	 public COMTest ( ) { 
 + 	 	 Native . setProtected ( true ) ; 
 + 	 } 
 + 
 + 	 @ Override 
 + 	 protected void setUp ( ) throws Exception { 
 + 	 } 
 + 
 + 	 @ Override 
 + 	 protected void tearDown ( ) throws Exception { 
 + 	 } 
 + 
 + 	 public void testTYPEATTR ( ) { 
 + 	 	 TYPEATTR typeAttr = new TYPEATTR ( ) ; 
 + 	 	 typeAttr . guid = new GUID . ByReference ( 
 + 	 	 	 	 GUID . fromString ( " { 50A7E9B0 - 70EF - 11D1 - B75A - 00A0C90564FE } " ) ) ; 
 + 	 	 typeAttr . lcid = Kernel32 . INSTANCE . GetSystemDefaultLCID ( ) ; 
 + 	 	 typeAttr . dwReserved = new DWORD ( 1 ) ; 
 + 	 	 typeAttr . memidConstructor = new MEMBERID ( 1 ) ; 
 + 	 	 typeAttr . memidDestructor = new MEMBERID ( 1 ) ; 
 + 	 	 / / typeAttr . lpstrSchema = new LPOLESTR ( " Hello World ! " ) ; 
 + 	 	 typeAttr . cbSizeInstance = new ULONG ( 1 ) ; 
 + 	 	 typeAttr . typekind = new TYPEKIND . ByReference ( 10 ) ; 
 + 	 	 typeAttr . cFuncs = new WORD ( 100 ) ; 
 + 	 	 typeAttr . cVars = new WORD ( 100 ) ; 
 + 	 	 typeAttr . cImplTypes = new WORD ( 12345 ) ; 
 + 	 	 typeAttr . cbSizeVft = new WORD ( 1234 ) ; 
 + 	 	 typeAttr . cbAlignment = new WORD ( 123 ) ; 
 + 	 	 typeAttr . wMajorVerNum = new WORD ( 111 ) ; 
 + 	 	 typeAttr . wMinorVerNum = new WORD ( 101 ) ; 
 + 	 	 typeAttr . tdescAlias = new TYPEDESC . ByReference ( ) ; 
 + 	 	 typeAttr . idldescType = new IDLDESC . ByReference ( ) ; 
 + 
 + 	 	 System . out . println ( typeAttr . toString ( ) ) ; 
 + 	 } 
 + 
 + 	 public void testDirectMemory ( ) { 
 + 	 } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 index 2e557e0 . . 81b0585 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 @ @ - 11 , 7 + 11 , 6 @ @ import com . sun . jna . NativeLong ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . Union ; 
 - import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 import com . sun . jna . platform . win32 . WinDef . BYTE ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 @ @ - 158 , 12 + 157 , 12 @ @ public interface OaIdl { 
 	 	 } 
 	 } 
 
 - 	 public class VARIANT _ BOOLByReference extends ByReference { 
 - 	 	 public VARIANT _ BOOLByReference ( ) { 
 + 	 public class VARIANT _ BOOLbyReference extends ByReference { 
 + 	 	 public VARIANT _ BOOLbyReference ( ) { 
 	 	 	 this ( new VARIANT _ BOOL ( 0 ) ) ; 
 	 	 } 
 
 - 	 	 public VARIANT _ BOOLByReference ( VARIANT _ BOOL value ) { 
 + 	 	 public VARIANT _ BOOLbyReference ( VARIANT _ BOOL value ) { 
 	 	 	 super ( VARIANT _ BOOL . SIZE ) ; 
 	 	 	 setValue ( value ) ; 
 	 	 } 
 @ @ - 177 , 18 + 176 , 19 @ @ public interface OaIdl { 
 	 	 } 
 	 } 
 
 - 	 public class _ VARIANT _ BOOLByReference extends VARIANT _ BOOLByReference { 
 - 	 	 public _ VARIANT _ BOOLByReference ( ) { 
 + 	 public class _ VARIANT _ BOOLbyReference extends VARIANT _ BOOLbyReference { 
 + 	 	 public _ VARIANT _ BOOLbyReference ( ) { 
 	 	 	 this ( new _ VARIANT _ BOOL ( 0 ) ) ; 
 	 	 } 
 
 - 	 	 public _ VARIANT _ BOOLByReference ( _ VARIANT _ BOOL value ) { 
 + 	 	 public _ VARIANT _ BOOLbyReference ( _ VARIANT _ BOOL value ) { 
 	 	 	 super ( value ) ; 
 	 	 } 
 	 } 
 
 	 public static class DATE extends IntegerType { 
 	 	 public static final int SIZE = 8 ; 
 + 
 	 	 public DATE ( ) { 
 	 	 	 this ( 0 ) ; 
 	 	 } 
 @ @ - 198 , 12 + 198 , 12 @ @ public interface OaIdl { 
 	 	 } 
 	 } 
 
 - 	 public class DATEByReference extends ByReference { 
 - 	 	 public DATEByReference ( ) { 
 + 	 public class DATEbyReference extends ByReference { 
 + 	 	 public DATEbyReference ( ) { 
 	 	 	 this ( new DATE ( 0 ) ) ; 
 	 	 } 
 
 - 	 	 public DATEByReference ( DATE value ) { 
 + 	 	 public DATEbyReference ( DATE value ) { 
 	 	 	 super ( DATE . SIZE ) ; 
 	 	 	 setValue ( value ) ; 
 	 	 } 
 @ @ - 216 , 7 + 216 , 7 @ @ public interface OaIdl { 
 	 	 	 return new DATE ( getPointer ( ) . getLong ( 0 ) ) ; 
 	 	 } 
 	 } 
 - 	 
 + 
 	 / * * 
 	 * The Class VARIANTARG . 
 	 * / 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 index a254c29 . . a46a092 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 @ @ - 8 , 19 + 8 , 20 @ @ import com . sun . jna . Structure ; 
 import com . sun . jna . Union ; 
 import com . sun . jna . platform . win32 . OaIdl . CURRENCY ; 
 import com . sun . jna . platform . win32 . OaIdl . DATE ; 
 - import com . sun . jna . platform . win32 . OaIdl . DATEByReference ; 
 + import com . sun . jna . platform . win32 . OaIdl . DATEbyReference ; 
 import com . sun . jna . platform . win32 . OaIdl . DECIMAL ; 
 import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; 
 import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; 
 - import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLByReference ; 
 - import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOLByReference ; 
 + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLbyReference ; 
 + import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOLbyReference ; 
 import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 import com . sun . jna . platform . win32 . WinDef . BYTE ; 
 import com . sun . jna . platform . win32 . WinDef . CHAR ; 
 + import com . sun . jna . platform . win32 . WinDef . CHARbyReference ; 
 import com . sun . jna . platform . win32 . WinDef . LONG ; 
 - import com . sun . jna . platform . win32 . WinDef . LONGByReference ; 
 import com . sun . jna . platform . win32 . WinDef . LONGLONG ; 
 - import com . sun . jna . platform . win32 . WinDef . LONGLONGByReference ; 
 + import com . sun . jna . platform . win32 . WinDef . LONGLONGbyReference ; 
 + import com . sun . jna . platform . win32 . WinDef . LONGbyReference ; 
 import com . sun . jna . platform . win32 . WinDef . PVOID ; 
 import com . sun . jna . platform . win32 . WinDef . SCODE ; 
 import com . sun . jna . platform . win32 . WinDef . SCODEbyReference ; 
 @ @ - 28 , 9 + 29 , 9 @ @ import com . sun . jna . platform . win32 . WinDef . SHORT ; 
 import com . sun . jna . platform . win32 . WinDef . UINT ; 
 import com . sun . jna . platform . win32 . WinDef . UINTbyReference ; 
 import com . sun . jna . platform . win32 . WinDef . ULONG ; 
 - import com . sun . jna . platform . win32 . WinDef . ULONGByReference ; 
 import com . sun . jna . platform . win32 . WinDef . ULONGLONG ; 
 - import com . sun . jna . platform . win32 . WinDef . ULONGLONGByReference ; 
 + import com . sun . jna . platform . win32 . WinDef . ULONGLONGbyReference ; 
 + import com . sun . jna . platform . win32 . WinDef . ULONGbyReference ; 
 import com . sun . jna . platform . win32 . WinDef . USHORT ; 
 import com . sun . jna . platform . win32 . WinDef . USHORTbyReference ; 
 import com . sun . jna . platform . win32 . COM . IDispatch ; 
 @ @ - 246 , 23 + 247 , 23 @ @ public interface Variant { 
 	 	 	 	 / / SHORT * VT _ BYREF | VT _ I2 
 	 	 	 	 public ShortByReference piVal ; 
 	 	 	 	 / / LONG * VT _ BYREF | VT _ I4 
 - 	 	 	 	 public LONGByReference plVal ; 
 + 	 	 	 	 public LONGbyReference plVal ; 
 	 	 	 	 / / LONGLONG * VT _ BYREF | VT _ I8 
 - 	 	 	 	 public LONGLONGByReference pllVal ; 
 + 	 	 	 	 public LONGLONGbyReference pllVal ; 
 	 	 	 	 / / FLOAT * VT _ BYREF | VT _ R4 
 	 	 	 	 public FloatByReference pfltVal ; 
 	 	 	 	 / / DOUBLE * VT _ BYREF | VT _ R8 
 	 	 	 	 public DoubleByReference pdblVal ; 
 	 	 	 	 / / VARIANT _ BOOL * VT _ BYREF | VT _ BOOL 
 - 	 	 	 	 public VARIANT _ BOOLByReference pboolVal ; 
 + 	 	 	 	 public VARIANT _ BOOLbyReference pboolVal ; 
 	 	 	 	 / / VARIANT _ BOOL * VT _ BYREF | VT _ BOOL 
 - 	 	 	 	 public _ VARIANT _ BOOLByReference pbool ; 
 + 	 	 	 	 public _ VARIANT _ BOOLbyReference pbool ; 
 	 	 	 	 / / SCODE * VT _ BYREF | VT _ ERROR 
 	 	 	 	 public SCODEbyReference pscode ; 
 	 	 	 	 / / CY * VT _ BYREF | VT _ CY 
 	 	 	 	 public CURRENCY . ByReference pcyVal ; 
 	 	 	 	 / / DATE * VT _ BYREF | VT _ DATE 
 - 	 	 	 	 public DATEByReference pdate ; 
 + 	 	 	 	 public DATEbyReference pdate ; 
 	 	 	 	 / / BSTR * VT _ BYREF | VT _ BSTR 
 	 	 	 	 public BSTR . ByReference pbstrVal ; 
 	 	 	 	 / / IUnknown * * VT _ BYREF | VT _ UNKNOWN 
 @ @ - 290 , 13 + 291 , 13 @ @ public interface Variant { 
 	 	 	 	 / / DECIMAL * VT _ BYREF | VT _ DECIMAL 
 	 	 	 	 public DECIMAL . ByReference pdecVal ; 
 	 	 	 	 / / CHAR * VT _ BYREF | VT _ I1 
 - 	 	 	 	 public CHAR . ByReference pcVal ; 
 + 	 	 	 	 public CHARbyReference pcVal ; 
 	 	 	 	 / / USHORT * VT _ BYREF | VT _ UI2 
 	 	 	 	 public USHORTbyReference puiVal ; 
 	 	 	 	 / / ULONG * VT _ BYREF | VT _ UI4 
 - 	 	 	 	 public ULONGByReference pulVal ; 
 + 	 	 	 	 public ULONGbyReference pulVal ; 
 	 	 	 	 / / ULONGLONG * VT _ BYREF | VT _ UI8 
 - 	 	 	 	 public ULONGLONGByReference pullVal ; 
 + 	 	 	 	 public ULONGLONGbyReference pullVal ; 
 	 	 	 	 / / INT * VT _ BYREF | VT _ INT 
 	 	 	 	 public IntByReference pintVal ; 
 	 	 	 	 / / UINT * VT _ BYREF | VT _ UINT 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 index ec2942b . . dfb6a2e 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 @ @ - 116 , 12 + 116 , 12 @ @ public interface WinDef extends StdCallLibrary { 
 	 	 } 
 	 } 
 
 - 	 public class LONGByReference extends ByReference { 
 - 	 	 public LONGByReference ( ) { 
 + 	 public class LONGbyReference extends ByReference { 
 + 	 	 public LONGbyReference ( ) { 
 	 	 	 this ( new LONG ( 0 ) ) ; 
 	 	 } 
 
 - 	 	 public LONGByReference ( LONG value ) { 
 + 	 	 public LONGbyReference ( LONG value ) { 
 	 	 	 super ( LONG . SIZE ) ; 
 	 	 	 setValue ( value ) ; 
 	 	 } 
 @ @ - 147 , 12 + 147 , 12 @ @ public interface WinDef extends StdCallLibrary { 
 	 	 } 
 	 } 
 
 - 	 public class LONGLONGByReference extends ByReference { 
 - 	 	 public LONGLONGByReference ( ) { 
 + 	 public class LONGLONGbyReference extends ByReference { 
 + 	 	 public LONGLONGbyReference ( ) { 
 	 	 	 this ( new LONGLONG ( 0 ) ) ; 
 	 	 } 
 
 - 	 	 public LONGLONGByReference ( LONGLONG value ) { 
 + 	 	 public LONGLONGbyReference ( LONGLONG value ) { 
 	 	 	 super ( LONGLONG . SIZE ) ; 
 	 	 	 setValue ( value ) ; 
 	 	 } 
 @ @ - 634 , 12 + 634 , 12 @ @ public interface WinDef extends StdCallLibrary { 
 	 	 } 
 	 } 
 
 - 	 public class ULONGByReference extends ByReference { 
 - 	 	 public ULONGByReference ( ) { 
 + 	 public class ULONGbyReference extends ByReference { 
 + 	 	 public ULONGbyReference ( ) { 
 	 	 	 this ( new ULONG ( 0 ) ) ; 
 	 	 } 
 
 - 	 	 public ULONGByReference ( ULONG value ) { 
 + 	 	 public ULONGbyReference ( ULONG value ) { 
 	 	 	 super ( ULONG . SIZE ) ; 
 	 	 	 setValue ( value ) ; 
 	 	 } 
 @ @ - 665 , 12 + 665 , 12 @ @ public interface WinDef extends StdCallLibrary { 
 	 	 } 
 	 } 
 
 - 	 public class ULONGLONGByReference extends ByReference { 
 - 	 	 public ULONGLONGByReference ( ) { 
 + 	 public class ULONGLONGbyReference extends ByReference { 
 + 	 	 public ULONGLONGbyReference ( ) { 
 	 	 	 this ( new ULONGLONG ( 0 ) ) ; 
 	 	 } 
 
 - 	 	 public ULONGLONGByReference ( ULONGLONG value ) { 
 + 	 	 public ULONGLONGbyReference ( ULONGLONG value ) { 
 	 	 	 super ( ULONGLONG . SIZE ) ; 
 	 	 	 setValue ( value ) ; 
 	 	 } 
 @ @ - 1051 , 11 + 1051 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 	 } 
 
 	 public static class CHAR extends IntegerType { 
 - 
 - 	 	 public static class ByReference extends CHAR implements 
 - 	 	 	 	 Structure . ByReference { 
 - 
 - 	 	 } 
 + 	 	 public static final int SIZE = 1 ; 
 
 	 	 public CHAR ( ) { 
 	 	 	 this ( 0 ) ; 
 @ @ - 1065 , 4 + 1061 , 23 @ @ public interface WinDef extends StdCallLibrary { 
 	 	 	 super ( 1 , value , false ) ; 
 	 	 } 
 	 } 
 + 
 + 	 public static class CHARbyReference extends ByReference { 
 + 	 	 public CHARbyReference ( ) { 
 + 	 	 	 this ( new CHAR ( 0 ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public CHARbyReference ( CHAR value ) { 
 + 	 	 	 super ( CHAR . SIZE ) ; 
 + 	 	 	 setValue ( value ) ; 
 + 	 	 } 
 + 
 + 	 	 public void setValue ( CHAR value ) { 
 + 	 	 	 getPointer ( ) . setByte ( 0 , value . byteValue ( ) ) ; 
 + 	 	 } 
 + 
 + 	 	 public CHAR getValue ( ) { 
 + 	 	 	 return new CHAR ( getPointer ( ) . getChar ( 0 ) ) ; 
 + 	 	 } 
 + 	 } 
 }
