BLEU SCORE: 0.027611988917697356

TEST MSG: Ensure required COM library is present for test
GENERATED MSG: Improve stability of tests

TEST DIFF (one line): diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / AbstractWin32TestSupport . java b / contrib / platform / test / com / sun / jna / platform / win32 / AbstractWin32TestSupport . java <nl> index f59b5a9 . . 87535cf 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / AbstractWin32TestSupport . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / AbstractWin32TestSupport . java <nl> @ @ - 145 , 4 + 145 , 38 @ @ public abstract class AbstractWin32TestSupport extends AbstractPlatformTestSuppo <nl> } <nl> Kernel32 . INSTANCE . CloseHandle ( hSnapShot ) ; <nl> } <nl> + <nl> + / * * <nl> + * Return true if the supplied uuid can be found in the registry . <nl> + * <nl> + * @ param uuid Format : { & lt ; UID & gt ; } <nl> + * / <nl> + public static boolean checkCOMRegistered ( String uuid ) { <nl> + WinReg . HKEYByReference phkKey = null ; <nl> + try { <nl> + phkKey = Advapi32Util . registryGetKey ( WinReg . HKEY _ CLASSES _ ROOT , " Interface \ \ " + uuid , WinNT . KEY _ READ ) ; <nl> + if ( phkKey ! = null ) { <nl> + return true ; <nl> + } <nl> + } catch ( Win32Exception ex ) { <nl> + / / Ok - failed . . . <nl> + } finally { <nl> + if ( phkKey ! = null & & phkKey . getValue ( ) ! = null ) { <nl> + Advapi32Util . registryCloseKey ( phkKey . getValue ( ) ) ; <nl> + } <nl> + } <nl> + try { <nl> + phkKey = Advapi32Util . registryGetKey ( WinReg . HKEY _ CLASSES _ ROOT , " CLSID \ \ " + uuid , WinNT . KEY _ READ ) ; <nl> + if ( phkKey ! = null ) { <nl> + return true ; <nl> + } <nl> + } catch ( Win32Exception ex ) { <nl> + / / Ok - failed . . . <nl> + } finally { <nl> + if ( phkKey ! = null & & phkKey . getValue ( ) ! = null ) { <nl> + Advapi32Util . registryCloseKey ( phkKey . getValue ( ) ) ; <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / EnumMoniker _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / EnumMoniker _ Test . java <nl> index c2e4d1a . . 0cff45c 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / EnumMoniker _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / EnumMoniker _ Test . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> import static org . junit . Assert . assertEquals ; <nl> import static org . junit . Assert . assertNotEquals ; <nl> <nl> @ @ - 32 , 6 + 33 , 7 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> + import org . junit . Assume ; <nl> <nl> public class EnumMoniker _ Test { <nl> static { <nl> @ @ - 54 , 15 + 56 , 17 @ @ public class EnumMoniker _ Test { <nl> 	 interface MsWordApp extends Application { <nl> 	 } <nl> 	 <nl> - 	 ObjectFactory factory ; <nl> - 	 MsWordApp ob1 ; <nl> - 	 MsWordApp ob2 ; <nl> + 	 private ObjectFactory factory ; <nl> + 	 private MsWordApp ob1 ; <nl> + 	 private MsWordApp ob2 ; <nl> + private boolean initialized = false ; <nl> <nl> 	 @ Before <nl> 	 public void before ( ) { <nl> - WinNT . HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> - COMUtils . checkRC ( hr ) ; <nl> - <nl> + / / Check Existence of Word Application <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; <nl> + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; <nl> + initialized = true ; <nl> 	 	 this . factory = new ObjectFactory ( ) ; <nl> 	 	 / / Two COM objects are require to be running for these tests to work <nl> 	 	 this . ob1 = this . factory . createObject ( MsWordApp . class ) ; <nl> @ @ - 77 , 7 + 81 , 12 @ @ public class EnumMoniker _ Test { <nl> if ( ob2 ! = null ) { <nl> ob2 . Quit ( ) ; <nl> } <nl> - 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + if ( factory ! = null ) { <nl> + factory . disposeAll ( ) ; <nl> + } <nl> + if ( initialized ) { <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + } <nl> 	 } <nl> <nl> 	 @ Test <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java <nl> index d47406e . . 0603465 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java <nl> @ @ - 1 , 6 + 1 , 8 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> + import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComEventCallback ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> @ @ - 8 , 6 + 10 , 7 @ @ import com . sun . jna . platform . win32 . Ole32 ; <nl> import com . sun . jna . platform . win32 . Variant ; <nl> import org . junit . After ; <nl> import org . junit . Assert ; <nl> + import org . junit . Assume ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> @ @ - 17 , 18 + 20 , 26 @ @ public class ComEventCallbacks2 _ Test { <nl> ClassLoader . getSystemClassLoader ( ) . setDefaultAssertionStatus ( true ) ; <nl> } <nl> <nl> - Factory factory ; <nl> + private boolean initialized = false ; <nl> + private Factory factory ; <nl> <nl> @ Before <nl> public void before ( ) { <nl> - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + / / Check if Word is registered in the registry <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 000209FF - 0000 - 0000 - C000 - 000000000046 } " ) ) ; <nl> + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; <nl> + initialized = true ; <nl> this . factory = new Factory ( ) ; <nl> } <nl> <nl> @ After <nl> public void after ( ) { <nl> - this . factory . disposeAll ( ) ; <nl> - Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + if ( this . factory ! = null ) { <nl> + this . factory . disposeAll ( ) ; <nl> + } <nl> + if ( initialized ) { <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksFactory _ Test . java <nl> index 8169036 . . 7f88981 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksFactory _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksFactory _ Test . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . platform . win32 . AbstractWin32TestSupport ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import org . junit . After ; <nl> import org . junit . Assert ; <nl> @ @ - 36 , 6 + 37 , 7 @ @ import org . hamcrest . CoreMatchers ; <nl> import static com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; <nl> import static com . sun . jna . platform . win32 . COM . IDispatch . IID _ IDISPATCH ; <nl> import static org . junit . Assert . * ; <nl> + import org . junit . Assume ; <nl> <nl> public class ComEventCallbacksFactory _ Test { <nl> <nl> @ @ - 47 , 6 + 49 , 8 @ @ public class ComEventCallbacksFactory _ Test { <nl> 	 <nl> 	 @ Before <nl> 	 public void before ( ) { <nl> + / / Check that Internet Explorer is registered in the registry <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; <nl> AbstractWin32TestSupport . killProcessByName ( " iexplore . exe " ) ; <nl> try { <nl> Thread . sleep ( 5 * 1000 ) ; <nl> @ @ - 63 , 8 + 67 , 10 @ @ public class ComEventCallbacksFactory _ Test { <nl> <nl> 	 @ After <nl> 	 public void after ( ) { <nl> - 	 	 this . factory . disposeAll ( ) ; <nl> - this . factory . getComThread ( ) . terminate ( 10000 ) ; <nl> + if ( this . factory ! = null ) { <nl> + this . factory . disposeAll ( ) ; <nl> + this . factory . getComThread ( ) . terminate ( 10000 ) ; <nl> + } <nl> } <nl> 	 <nl> 	 <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksObjectFactory _ Test . java <nl> index 405e0ea . . 5babe87 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksObjectFactory _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksObjectFactory _ Test . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . platform . win32 . AbstractWin32TestSupport ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import org . junit . After ; <nl> import org . junit . Assert ; <nl> @ @ - 38 , 6 + 39 , 7 @ @ import org . hamcrest . CoreMatchers ; <nl> import static com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; <nl> import static com . sun . jna . platform . win32 . COM . IDispatch . IID _ IDISPATCH ; <nl> import static org . junit . Assert . * ; <nl> + import org . junit . Assume ; <nl> <nl> public class ComEventCallbacksObjectFactory _ Test { <nl> <nl> @ @ - 45 , 22 + 47 , 30 @ @ public class ComEventCallbacksObjectFactory _ Test { <nl> ClassLoader . getSystemClassLoader ( ) . setDefaultAssertionStatus ( true ) ; <nl> } <nl> <nl> - 	 ObjectFactory factory ; <nl> + private boolean initialized = false ; <nl> + 	 private ObjectFactory factory ; <nl> 	 <nl> 	 @ Before <nl> 	 public void before ( ) { <nl> + / / Check that Internet Explorer is registered in the registry <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; <nl> AbstractWin32TestSupport . killProcessByName ( " iexplore . exe " ) ; <nl> try { <nl> Thread . sleep ( 5 * 1000 ) ; <nl> } catch ( InterruptedException ex ) { } <nl> - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; <nl> + initialized = true ; <nl> 	 	 this . factory = new ObjectFactory ( ) ; <nl> 	 } <nl> <nl> 	 @ After <nl> 	 public void after ( ) { <nl> - 	 	 this . factory . disposeAll ( ) ; <nl> - Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + if ( this . factory ! = null ) { <nl> + this . factory . disposeAll ( ) ; <nl> + } <nl> + if ( initialized ) { <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + } <nl> 	 } <nl> 	 <nl> 	 <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConfigurateLCID _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConfigurateLCID _ Test . java <nl> index 098247f . . e237be1 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConfigurateLCID _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConfigurateLCID _ Test . java <nl> @ @ - 1 , 12 + 1 , 15 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> + import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> import com . sun . jna . platform . win32 . Ole32 ; <nl> import com . sun . jna . platform . win32 . WinDef . LCID ; <nl> import org . junit . After ; <nl> import org . junit . Assert ; <nl> + import org . junit . Assume ; <nl> import org . junit . Before ; <nl> import org . junit . Ignore ; <nl> import org . junit . Test ; <nl> @ @ - 14 , 11 + 17 , 15 @ @ import org . junit . Test ; <nl> <nl> public class ConfigurateLCID _ Test { <nl> <nl> + private boolean initialized = false ; <nl> private Factory factory ; <nl> <nl> @ Before <nl> public void before ( ) { <nl> - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + / / Check that Excel is registered in the registry <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; <nl> + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; <nl> + initialized = true ; <nl> this . factory = new Factory ( ) ; <nl> / / switch to english locale ( the test is only valid if office is <nl> / / installed in a non - english locale <nl> @ @ - 27 , 8 + 34 , 12 @ @ public class ConfigurateLCID _ Test { <nl> <nl> @ After <nl> public void after ( ) { <nl> - this . factory . disposeAll ( ) ; <nl> - Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + if ( this . factory ! = null ) { <nl> + this . factory . disposeAll ( ) ; <nl> + } <nl> + if ( initialized ) { <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConvertTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConvertTest . java <nl> index bc1971b . . 8f2ed02 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConvertTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConvertTest . java <nl> @ @ - 1 , 10 + 1 , 11 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> + import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> - import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; <nl> import com . sun . jna . platform . win32 . OaIdl . DATE ; <nl> import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; <nl> import com . sun . jna . platform . win32 . Ole32 ; <nl> @ @ - 20 , 25 + 21 , 34 @ @ import java . util . Date ; <nl> import org . junit . AfterClass ; <nl> import org . junit . Test ; <nl> import static org . junit . Assert . * ; <nl> + import org . junit . Assume ; <nl> import org . junit . BeforeClass ; <nl> <nl> / / Untested : IDispatch <nl> / / Untested : Proxy <nl> public class ConvertTest { <nl> <nl> + private static boolean initialized = false ; <nl> private static ObjectFactory fact ; <nl> <nl> @ BeforeClass <nl> public static void init ( ) { <nl> - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + / / Check that FileSystemObject is registered in the registry <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0D43FE01 - F093 - 11CF - 8940 - 00A0C9054228 } " ) ) ; <nl> + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; <nl> + initialized = true ; <nl> fact = new ObjectFactory ( ) ; <nl> } <nl> <nl> @ AfterClass <nl> public static void destruct ( ) { <nl> - fact . disposeAll ( ) ; <nl> + if ( fact ! = null ) { <nl> + fact . disposeAll ( ) ; <nl> + } <nl> fact = null ; <nl> - Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + if ( initialized ) { <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + } <nl> } <nl> <nl> @ Test <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java <nl> index f55a0b6 . . 353d80a 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> import com . sun . jna . platform . win32 . COM . COMException ; <nl> import com . sun . jna . platform . win32 . COM . COMLateBindingObject ; <nl> import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> @ @ - 33 , 6 + 34 , 7 @ @ import static org . hamcrest . CoreMatchers . is ; <nl> import org . junit . After ; <nl> import org . junit . Test ; <nl> import static org . junit . Assert . * ; <nl> + import org . junit . Assume ; <nl> import org . junit . Before ; <nl> <nl> / * * <nl> @ @ - 59 , 15 + 61 , 23 @ @ public class HybdridCOMInvocationTest { <nl> private static final GUID CLSID _ WORD = new GUID ( CLSID _ WORD _ STRING ) ; <nl> private static final IID IID _ APPLICATION = new IID ( new GUID ( IID _ APPLICATION _ STRING ) ) ; <nl> <nl> + private boolean initialized = false ; <nl> + <nl> @ After <nl> public void tearDown ( ) throws Exception { <nl> - Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + if ( initialized ) { <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + initialized = false ; <nl> + } <nl> } <nl> <nl> @ Before <nl> public void setUp ( ) throws Exception { <nl> / / Initialize COM for this thread . . . <nl> - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + / / Check that FileSystemObject is registered in the registry <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( CLSID _ WORD _ STRING ) ) ; <nl> + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; <nl> + initialized = true ; <nl> } <nl> <nl> @ Test <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java <nl> index 11c123f . . 3c188d2 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java <nl> @ @ - 2 , 6 + 2 , 8 @ @ package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . platform . win32 . AbstractWin32TestSupport ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> + import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComEventCallback ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; <nl> @ @ - 14 , 25 + 16 , 34 @ @ import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import static org . junit . Assert . * ; <nl> + import org . junit . Assume ; <nl> <nl> public class IDispatchTest { <nl> - <nl> - ObjectFactory factory ; <nl> + private boolean initialized = false ; <nl> + private ObjectFactory factory ; <nl> <nl> @ Before <nl> public void before ( ) { <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; <nl> + <nl> AbstractWin32TestSupport . killProcessByName ( " iexplore . exe " ) ; <nl> try { <nl> Thread . sleep ( 5 * 1000 ) ; <nl> } catch ( InterruptedException ex ) { } <nl> - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; <nl> + initialized = true ; <nl> this . factory = new ObjectFactory ( ) ; <nl> } <nl> <nl> @ After <nl> public void after ( ) { <nl> - this . factory . disposeAll ( ) ; <nl> - Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + if ( this . factory ! = null ) { <nl> + this . factory . disposeAll ( ) ; <nl> + } <nl> + if ( initialized ) { <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + initialized = false ; <nl> + } <nl> } <nl> <nl> @ Test <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java <nl> index d543bc7 . . 639a8b5 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> import com . sun . jna . platform . win32 . COM . COMException ; <nl> import com . sun . jna . platform . win32 . COM . COMInvokeException ; <nl> import static org . junit . Assert . * ; <nl> @ @ - 29 , 6 + 30 , 7 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; <nl> import com . sun . jna . platform . win32 . WinError ; <nl> + import org . junit . Assume ; <nl> <nl> public class ProxyObjectFactory _ Test { <nl> private static final Logger LOG = Logger . getLogger ( ProxyObjectFactory _ Test . class . getName ( ) ) ; <nl> @ @ - 98 , 10 + 100 , 13 @ @ public class ProxyObjectFactory _ Test { <nl> 	 interface MsWordApp extends Application { <nl> 	 } <nl> <nl> - 	 Factory factory ; <nl> + 	 private Factory factory ; <nl> <nl> 	 @ Before <nl> 	 public void before ( ) { <nl> + / / Check Existence of Word Application <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; <nl> + <nl> 	 	 this . factory = new Factory ( ) ; <nl> 	 	 / / ensure there are no word applications running . <nl> 	 	 while ( true ) { <nl> @ @ - 139 , 8 + 144 , 11 @ @ public class ProxyObjectFactory _ Test { <nl> <nl> 	 @ After <nl> 	 public void after ( ) { <nl> + if ( factory ! = null ) { <nl> factory . disposeAll ( ) ; <nl> factory . getComThread ( ) . terminate ( 10000 ) ; <nl> + factory = null ; <nl> + } <nl> 	 } <nl> <nl> 	 @ Test <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java <nl> index f1753a0 . . 56ff0ff 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java <nl> @ @ - 13 , 8 + 13 , 10 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> import com . sun . jna . platform . win32 . COM . COMException ; <nl> import com . sun . jna . platform . win32 . COM . COMInvokeException ; <nl> + import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import static org . junit . Assert . * ; <nl> <nl> import java . lang . reflect . Proxy ; <nl> @ @ - 32 , 6 + 34 , 7 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; <nl> import com . sun . jna . platform . win32 . Ole32 ; <nl> import com . sun . jna . platform . win32 . WinError ; <nl> + import org . junit . Assume ; <nl> <nl> public class ProxyObjectObjectFactory _ Test { <nl> private static final Logger LOG = Logger . getLogger ( ProxyObjectObjectFactory _ Test . class . getName ( ) ) ; <nl> @ @ - 101 , 11 + 104 , 15 @ @ public class ProxyObjectObjectFactory _ Test { <nl> 	 interface MsWordApp extends Application { <nl> 	 } <nl> <nl> - 	 ObjectFactory factory ; <nl> + 	 private ObjectFactory factory ; <nl> + private boolean initialized = false ; <nl> <nl> 	 @ Before <nl> 	 public void before ( ) { <nl> - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + / / Check Existence of Word Application <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; <nl> + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; <nl> + initialized = true ; <nl> 	 	 this . factory = new ObjectFactory ( ) ; <nl> 	 	 / / ensure there are no word applications running . <nl> 	 	 while ( true ) { <nl> @ @ - 143 , 8 + 150 , 12 @ @ public class ProxyObjectObjectFactory _ Test { <nl> <nl> 	 @ After <nl> 	 public void after ( ) { <nl> + if ( factory ! = null ) { <nl> factory . disposeAll ( ) ; <nl> + } <nl> + if ( initialized ) { <nl> 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + } <nl> 	 } <nl> <nl> 	 @ Test <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / RunningObjectTable _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / RunningObjectTable _ Test . java <nl> index c95784d . . 58e91a2 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / RunningObjectTable _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / RunningObjectTable _ Test . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> import static org . junit . Assert . * ; <nl> <nl> import java . util . List ; <nl> @ @ - 22 , 11 + 23 , 13 @ @ import org . junit . Before ; <nl> import org . junit . Test ; <nl> <nl> import com . sun . jna . platform . win32 . COM . COMException ; <nl> + import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; <nl> import com . sun . jna . platform . win32 . Ole32 ; <nl> + import org . junit . Assume ; <nl> <nl> public class RunningObjectTable _ Test { <nl> <nl> @ @ - 50 , 12 + 53 , 18 @ @ public class RunningObjectTable _ Test { <nl> 	 interface MsWordApp extends Application { <nl> 	 } <nl> 	 <nl> - 	 ObjectFactory factory ; <nl> - 	 MsWordApp msWord ; <nl> + 	 private ObjectFactory factory ; <nl> + 	 private MsWordApp msWord ; <nl> + private boolean initialized = false ; <nl> <nl> 	 @ Before <nl> 	 public void before ( ) { <nl> - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + / / Check Existence of Word Application <nl> + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; <nl> + <nl> + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; <nl> + initialized = true ; <nl> + <nl> 	 	 this . factory = new ObjectFactory ( ) ; <nl> 	 	 / / ensure there is only one word application running . <nl> 	 	 while ( true ) { <nl> @ @ - 85 , 15 + 94 , 21 @ @ public class RunningObjectTable _ Test { <nl> 	 <nl> 	 @ After <nl> 	 public void after ( ) { <nl> - 	 	 this . msWord . Quit ( true , null , null ) ; <nl> - 	 	 try { <nl> - 	 	 	 / / wait for it to quit <nl> - 	 	 	 Thread . sleep ( 100 ) ; <nl> - 	 	 } catch ( InterruptedException e ) { <nl> - 	 	 	 e . printStackTrace ( ) ; <nl> - 	 	 } <nl> + if ( this . msWord ! = null ) { <nl> + this . msWord . Quit ( true , null , null ) ; <nl> + } <nl> + try { <nl> + / / wait for it to quit <nl> + Thread . sleep ( 100 ) ; <nl> + } catch ( InterruptedException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + if ( factory ! = null ) { <nl> factory . disposeAll ( ) ; <nl> + } <nl> + if ( initialized ) { <nl> Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + } <nl> 	 } <nl> 	 <nl> 	 @ Test <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java <nl> index 164f783 . . 4e63a88 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ package com . sun . jna . platform . win32 ; <nl> <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; <nl> import com . sun . jna . platform . win32 . COM . COMException ; <nl> import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import com . sun . jna . platform . win32 . COM . util . ObjectFactory ; <nl> @ @ - 63 , 6 + 64 , 7 @ @ import static com . sun . jna . platform . win32 . OaIdlUtil . toPrimitiveArray ; <nl> import com . sun . jna . platform . win32 . WTypes . VARTYPE ; <nl> import com . sun . jna . platform . win32 . WinDef . LONG ; <nl> import java . lang . reflect . Field ; <nl> + import org . junit . Assume ; <nl> <nl> public class SAFEARRAYTest { <nl> static { <nl> @ @ - 492 , 7 + 494 , 11 @ @ public class SAFEARRAYTest { <nl> / / Open a record set with a sample search ( basicly get the first five <nl> / / entries from the search index <nl> Connection conn = fact . createObject ( Connection . class ) ; <nl> - conn . Open ( " Provider = Search . CollatorDSO ; Extended Properties = ' Application = Windows ' ; " , " " , " " , - 1 ) ; <nl> + try { <nl> + conn . Open ( " Provider = Search . CollatorDSO ; Extended Properties = ' Application = Windows ' ; " , " " , " " , - 1 ) ; <nl> + } catch ( COMException ex ) { <nl> + Assume . assumeNoException ( ex ) ; <nl> + } <nl> <nl> Recordset recordset = fact . createObject ( Recordset . class ) ; <nl> recordset . Open ( " SELECT TOP 5 System . ItemPathDisplay , System . ItemName , System . ItemUrl , System . DateCreated FROM SYSTEMINDEX ORDER BY System . ItemUrl " , conn , CursorTypeEnum . adOpenUnspecified , LockTypeEnum . adLockUnspecified , - 1 ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / AbstractWin32TestSupport . java b / contrib / platform / test / com / sun / jna / platform / win32 / AbstractWin32TestSupport . java 
 index f59b5a9 . . 87535cf 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / AbstractWin32TestSupport . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / AbstractWin32TestSupport . java 
 @ @ - 145 , 4 + 145 , 38 @ @ public abstract class AbstractWin32TestSupport extends AbstractPlatformTestSuppo 
 } 
 Kernel32 . INSTANCE . CloseHandle ( hSnapShot ) ; 
 } 
 + 
 + / * * 
 + * Return true if the supplied uuid can be found in the registry . 
 + * 
 + * @ param uuid Format : { & lt ; UID & gt ; } 
 + * / 
 + public static boolean checkCOMRegistered ( String uuid ) { 
 + WinReg . HKEYByReference phkKey = null ; 
 + try { 
 + phkKey = Advapi32Util . registryGetKey ( WinReg . HKEY _ CLASSES _ ROOT , " Interface \ \ " + uuid , WinNT . KEY _ READ ) ; 
 + if ( phkKey ! = null ) { 
 + return true ; 
 + } 
 + } catch ( Win32Exception ex ) { 
 + / / Ok - failed . . . 
 + } finally { 
 + if ( phkKey ! = null & & phkKey . getValue ( ) ! = null ) { 
 + Advapi32Util . registryCloseKey ( phkKey . getValue ( ) ) ; 
 + } 
 + } 
 + try { 
 + phkKey = Advapi32Util . registryGetKey ( WinReg . HKEY _ CLASSES _ ROOT , " CLSID \ \ " + uuid , WinNT . KEY _ READ ) ; 
 + if ( phkKey ! = null ) { 
 + return true ; 
 + } 
 + } catch ( Win32Exception ex ) { 
 + / / Ok - failed . . . 
 + } finally { 
 + if ( phkKey ! = null & & phkKey . getValue ( ) ! = null ) { 
 + Advapi32Util . registryCloseKey ( phkKey . getValue ( ) ) ; 
 + } 
 + } 
 + return false ; 
 + } 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / EnumMoniker _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / EnumMoniker _ Test . java 
 index c2e4d1a . . 0cff45c 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / EnumMoniker _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / EnumMoniker _ Test . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package com . sun . jna . platform . win32 . COM ; 
 
 import com . sun . jna . Pointer ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 import static org . junit . Assert . assertEquals ; 
 import static org . junit . Assert . assertNotEquals ; 
 
 @ @ - 32 , 6 + 33 , 7 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; 
 import com . sun . jna . ptr . PointerByReference ; 
 + import org . junit . Assume ; 
 
 public class EnumMoniker _ Test { 
 static { 
 @ @ - 54 , 15 + 56 , 17 @ @ public class EnumMoniker _ Test { 
 	 interface MsWordApp extends Application { 
 	 } 
 	 
 - 	 ObjectFactory factory ; 
 - 	 MsWordApp ob1 ; 
 - 	 MsWordApp ob2 ; 
 + 	 private ObjectFactory factory ; 
 + 	 private MsWordApp ob1 ; 
 + 	 private MsWordApp ob2 ; 
 + private boolean initialized = false ; 
 
 	 @ Before 
 	 public void before ( ) { 
 - WinNT . HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 - COMUtils . checkRC ( hr ) ; 
 - 
 + / / Check Existence of Word Application 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; 
 + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; 
 + initialized = true ; 
 	 	 this . factory = new ObjectFactory ( ) ; 
 	 	 / / Two COM objects are require to be running for these tests to work 
 	 	 this . ob1 = this . factory . createObject ( MsWordApp . class ) ; 
 @ @ - 77 , 7 + 81 , 12 @ @ public class EnumMoniker _ Test { 
 if ( ob2 ! = null ) { 
 ob2 . Quit ( ) ; 
 } 
 - 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + if ( factory ! = null ) { 
 + factory . disposeAll ( ) ; 
 + } 
 + if ( initialized ) { 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + } 
 	 } 
 
 	 @ Test 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java 
 index d47406e . . 0603465 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java 
 @ @ - 1 , 6 + 1 , 8 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . Pointer ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 + import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComEventCallback ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 @ @ - 8 , 6 + 10 , 7 @ @ import com . sun . jna . platform . win32 . Ole32 ; 
 import com . sun . jna . platform . win32 . Variant ; 
 import org . junit . After ; 
 import org . junit . Assert ; 
 + import org . junit . Assume ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 
 @ @ - 17 , 18 + 20 , 26 @ @ public class ComEventCallbacks2 _ Test { 
 ClassLoader . getSystemClassLoader ( ) . setDefaultAssertionStatus ( true ) ; 
 } 
 
 - Factory factory ; 
 + private boolean initialized = false ; 
 + private Factory factory ; 
 
 @ Before 
 public void before ( ) { 
 - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 + / / Check if Word is registered in the registry 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 000209FF - 0000 - 0000 - C000 - 000000000046 } " ) ) ; 
 + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; 
 + initialized = true ; 
 this . factory = new Factory ( ) ; 
 } 
 
 @ After 
 public void after ( ) { 
 - this . factory . disposeAll ( ) ; 
 - Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + if ( this . factory ! = null ) { 
 + this . factory . disposeAll ( ) ; 
 + } 
 + if ( initialized ) { 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + } 
 } 
 
 @ Test 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksFactory _ Test . java 
 index 8169036 . . 7f88981 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksFactory _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksFactory _ Test . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . platform . win32 . AbstractWin32TestSupport ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import org . junit . After ; 
 import org . junit . Assert ; 
 @ @ - 36 , 6 + 37 , 7 @ @ import org . hamcrest . CoreMatchers ; 
 import static com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; 
 import static com . sun . jna . platform . win32 . COM . IDispatch . IID _ IDISPATCH ; 
 import static org . junit . Assert . * ; 
 + import org . junit . Assume ; 
 
 public class ComEventCallbacksFactory _ Test { 
 
 @ @ - 47 , 6 + 49 , 8 @ @ public class ComEventCallbacksFactory _ Test { 
 	 
 	 @ Before 
 	 public void before ( ) { 
 + / / Check that Internet Explorer is registered in the registry 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; 
 AbstractWin32TestSupport . killProcessByName ( " iexplore . exe " ) ; 
 try { 
 Thread . sleep ( 5 * 1000 ) ; 
 @ @ - 63 , 8 + 67 , 10 @ @ public class ComEventCallbacksFactory _ Test { 
 
 	 @ After 
 	 public void after ( ) { 
 - 	 	 this . factory . disposeAll ( ) ; 
 - this . factory . getComThread ( ) . terminate ( 10000 ) ; 
 + if ( this . factory ! = null ) { 
 + this . factory . disposeAll ( ) ; 
 + this . factory . getComThread ( ) . terminate ( 10000 ) ; 
 + } 
 } 
 	 
 	 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksObjectFactory _ Test . java 
 index 405e0ea . . 5babe87 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksObjectFactory _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacksObjectFactory _ Test . java 
 @ @ - 14 , 6 + 14 , 7 @ @ package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . platform . win32 . AbstractWin32TestSupport ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import org . junit . After ; 
 import org . junit . Assert ; 
 @ @ - 38 , 6 + 39 , 7 @ @ import org . hamcrest . CoreMatchers ; 
 import static com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; 
 import static com . sun . jna . platform . win32 . COM . IDispatch . IID _ IDISPATCH ; 
 import static org . junit . Assert . * ; 
 + import org . junit . Assume ; 
 
 public class ComEventCallbacksObjectFactory _ Test { 
 
 @ @ - 45 , 22 + 47 , 30 @ @ public class ComEventCallbacksObjectFactory _ Test { 
 ClassLoader . getSystemClassLoader ( ) . setDefaultAssertionStatus ( true ) ; 
 } 
 
 - 	 ObjectFactory factory ; 
 + private boolean initialized = false ; 
 + 	 private ObjectFactory factory ; 
 	 
 	 @ Before 
 	 public void before ( ) { 
 + / / Check that Internet Explorer is registered in the registry 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; 
 AbstractWin32TestSupport . killProcessByName ( " iexplore . exe " ) ; 
 try { 
 Thread . sleep ( 5 * 1000 ) ; 
 } catch ( InterruptedException ex ) { } 
 - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; 
 + initialized = true ; 
 	 	 this . factory = new ObjectFactory ( ) ; 
 	 } 
 
 	 @ After 
 	 public void after ( ) { 
 - 	 	 this . factory . disposeAll ( ) ; 
 - Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + if ( this . factory ! = null ) { 
 + this . factory . disposeAll ( ) ; 
 + } 
 + if ( initialized ) { 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + } 
 	 } 
 	 
 	 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConfigurateLCID _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConfigurateLCID _ Test . java 
 index 098247f . . e237be1 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConfigurateLCID _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConfigurateLCID _ Test . java 
 @ @ - 1 , 12 + 1 , 15 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . Pointer ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 + import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 import com . sun . jna . platform . win32 . Ole32 ; 
 import com . sun . jna . platform . win32 . WinDef . LCID ; 
 import org . junit . After ; 
 import org . junit . Assert ; 
 + import org . junit . Assume ; 
 import org . junit . Before ; 
 import org . junit . Ignore ; 
 import org . junit . Test ; 
 @ @ - 14 , 11 + 17 , 15 @ @ import org . junit . Test ; 
 
 public class ConfigurateLCID _ Test { 
 
 + private boolean initialized = false ; 
 private Factory factory ; 
 
 @ Before 
 public void before ( ) { 
 - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 + / / Check that Excel is registered in the registry 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; 
 + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; 
 + initialized = true ; 
 this . factory = new Factory ( ) ; 
 / / switch to english locale ( the test is only valid if office is 
 / / installed in a non - english locale 
 @ @ - 27 , 8 + 34 , 12 @ @ public class ConfigurateLCID _ Test { 
 
 @ After 
 public void after ( ) { 
 - this . factory . disposeAll ( ) ; 
 - Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + if ( this . factory ! = null ) { 
 + this . factory . disposeAll ( ) ; 
 + } 
 + if ( initialized ) { 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + } 
 } 
 
 @ Test 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConvertTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConvertTest . java 
 index bc1971b . . 8f2ed02 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConvertTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ConvertTest . java 
 @ @ - 1 , 10 + 1 , 11 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . Pointer ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 + import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 - import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; 
 import com . sun . jna . platform . win32 . OaIdl . DATE ; 
 import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; 
 import com . sun . jna . platform . win32 . Ole32 ; 
 @ @ - 20 , 25 + 21 , 34 @ @ import java . util . Date ; 
 import org . junit . AfterClass ; 
 import org . junit . Test ; 
 import static org . junit . Assert . * ; 
 + import org . junit . Assume ; 
 import org . junit . BeforeClass ; 
 
 / / Untested : IDispatch 
 / / Untested : Proxy 
 public class ConvertTest { 
 
 + private static boolean initialized = false ; 
 private static ObjectFactory fact ; 
 
 @ BeforeClass 
 public static void init ( ) { 
 - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 + / / Check that FileSystemObject is registered in the registry 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0D43FE01 - F093 - 11CF - 8940 - 00A0C9054228 } " ) ) ; 
 + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; 
 + initialized = true ; 
 fact = new ObjectFactory ( ) ; 
 } 
 
 @ AfterClass 
 public static void destruct ( ) { 
 - fact . disposeAll ( ) ; 
 + if ( fact ! = null ) { 
 + fact . disposeAll ( ) ; 
 + } 
 fact = null ; 
 - Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + if ( initialized ) { 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + } 
 } 
 
 @ Test 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java 
 index f55a0b6 . . 353d80a 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . Pointer ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 import com . sun . jna . platform . win32 . COM . COMException ; 
 import com . sun . jna . platform . win32 . COM . COMLateBindingObject ; 
 import com . sun . jna . platform . win32 . COM . COMUtils ; 
 @ @ - 33 , 6 + 34 , 7 @ @ import static org . hamcrest . CoreMatchers . is ; 
 import org . junit . After ; 
 import org . junit . Test ; 
 import static org . junit . Assert . * ; 
 + import org . junit . Assume ; 
 import org . junit . Before ; 
 
 / * * 
 @ @ - 59 , 15 + 61 , 23 @ @ public class HybdridCOMInvocationTest { 
 private static final GUID CLSID _ WORD = new GUID ( CLSID _ WORD _ STRING ) ; 
 private static final IID IID _ APPLICATION = new IID ( new GUID ( IID _ APPLICATION _ STRING ) ) ; 
 
 + private boolean initialized = false ; 
 + 
 @ After 
 public void tearDown ( ) throws Exception { 
 - Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + if ( initialized ) { 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + initialized = false ; 
 + } 
 } 
 
 @ Before 
 public void setUp ( ) throws Exception { 
 / / Initialize COM for this thread . . . 
 - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 + / / Check that FileSystemObject is registered in the registry 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( CLSID _ WORD _ STRING ) ) ; 
 + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; 
 + initialized = true ; 
 } 
 
 @ Test 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java 
 index 11c123f . . 3c188d2 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java 
 @ @ - 2 , 6 + 2 , 8 @ @ package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . platform . win32 . AbstractWin32TestSupport ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 + import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComEventCallback ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; 
 @ @ - 14 , 25 + 16 , 34 @ @ import org . junit . Before ; 
 import org . junit . Test ; 
 
 import static org . junit . Assert . * ; 
 + import org . junit . Assume ; 
 
 public class IDispatchTest { 
 - 
 - ObjectFactory factory ; 
 + private boolean initialized = false ; 
 + private ObjectFactory factory ; 
 
 @ Before 
 public void before ( ) { 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; 
 + 
 AbstractWin32TestSupport . killProcessByName ( " iexplore . exe " ) ; 
 try { 
 Thread . sleep ( 5 * 1000 ) ; 
 } catch ( InterruptedException ex ) { } 
 - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; 
 + initialized = true ; 
 this . factory = new ObjectFactory ( ) ; 
 } 
 
 @ After 
 public void after ( ) { 
 - this . factory . disposeAll ( ) ; 
 - Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + if ( this . factory ! = null ) { 
 + this . factory . disposeAll ( ) ; 
 + } 
 + if ( initialized ) { 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + initialized = false ; 
 + } 
 } 
 
 @ Test 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java 
 index d543bc7 . . 639a8b5 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectFactory _ Test . java 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * / 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 import com . sun . jna . platform . win32 . COM . COMException ; 
 import com . sun . jna . platform . win32 . COM . COMInvokeException ; 
 import static org . junit . Assert . * ; 
 @ @ - 29 , 6 + 30 , 7 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; 
 import com . sun . jna . platform . win32 . WinError ; 
 + import org . junit . Assume ; 
 
 public class ProxyObjectFactory _ Test { 
 private static final Logger LOG = Logger . getLogger ( ProxyObjectFactory _ Test . class . getName ( ) ) ; 
 @ @ - 98 , 10 + 100 , 13 @ @ public class ProxyObjectFactory _ Test { 
 	 interface MsWordApp extends Application { 
 	 } 
 
 - 	 Factory factory ; 
 + 	 private Factory factory ; 
 
 	 @ Before 
 	 public void before ( ) { 
 + / / Check Existence of Word Application 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; 
 + 
 	 	 this . factory = new Factory ( ) ; 
 	 	 / / ensure there are no word applications running . 
 	 	 while ( true ) { 
 @ @ - 139 , 8 + 144 , 11 @ @ public class ProxyObjectFactory _ Test { 
 
 	 @ After 
 	 public void after ( ) { 
 + if ( factory ! = null ) { 
 factory . disposeAll ( ) ; 
 factory . getComThread ( ) . terminate ( 10000 ) ; 
 + factory = null ; 
 + } 
 	 } 
 
 	 @ Test 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java 
 index f1753a0 . . 56ff0ff 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ProxyObjectObjectFactory _ Test . java 
 @ @ - 13 , 8 + 13 , 10 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . Pointer ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 import com . sun . jna . platform . win32 . COM . COMException ; 
 import com . sun . jna . platform . win32 . COM . COMInvokeException ; 
 + import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import static org . junit . Assert . * ; 
 
 import java . lang . reflect . Proxy ; 
 @ @ - 32 , 6 + 34 , 7 @ @ import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; 
 import com . sun . jna . platform . win32 . Ole32 ; 
 import com . sun . jna . platform . win32 . WinError ; 
 + import org . junit . Assume ; 
 
 public class ProxyObjectObjectFactory _ Test { 
 private static final Logger LOG = Logger . getLogger ( ProxyObjectObjectFactory _ Test . class . getName ( ) ) ; 
 @ @ - 101 , 11 + 104 , 15 @ @ public class ProxyObjectObjectFactory _ Test { 
 	 interface MsWordApp extends Application { 
 	 } 
 
 - 	 ObjectFactory factory ; 
 + 	 private ObjectFactory factory ; 
 + private boolean initialized = false ; 
 
 	 @ Before 
 	 public void before ( ) { 
 - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 + / / Check Existence of Word Application 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; 
 + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; 
 + initialized = true ; 
 	 	 this . factory = new ObjectFactory ( ) ; 
 	 	 / / ensure there are no word applications running . 
 	 	 while ( true ) { 
 @ @ - 143 , 8 + 150 , 12 @ @ public class ProxyObjectObjectFactory _ Test { 
 
 	 @ After 
 	 public void after ( ) { 
 + if ( factory ! = null ) { 
 factory . disposeAll ( ) ; 
 + } 
 + if ( initialized ) { 
 	 	 Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + } 
 	 } 
 
 	 @ Test 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / RunningObjectTable _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / RunningObjectTable _ Test . java 
 index c95784d . . 58e91a2 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / RunningObjectTable _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / RunningObjectTable _ Test . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 import com . sun . jna . Pointer ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 import static org . junit . Assert . * ; 
 
 import java . util . List ; 
 @ @ - 22 , 11 + 23 , 13 @ @ import org . junit . Before ; 
 import org . junit . Test ; 
 
 import com . sun . jna . platform . win32 . COM . COMException ; 
 + import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; 
 import com . sun . jna . platform . win32 . Ole32 ; 
 + import org . junit . Assume ; 
 
 public class RunningObjectTable _ Test { 
 
 @ @ - 50 , 12 + 53 , 18 @ @ public class RunningObjectTable _ Test { 
 	 interface MsWordApp extends Application { 
 	 } 
 	 
 - 	 ObjectFactory factory ; 
 - 	 MsWordApp msWord ; 
 + 	 private ObjectFactory factory ; 
 + 	 private MsWordApp msWord ; 
 + private boolean initialized = false ; 
 
 	 @ Before 
 	 public void before ( ) { 
 - Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 + / / Check Existence of Word Application 
 + Assume . assumeTrue ( " Could not find registration " , checkCOMRegistered ( " { 00020970 - 0000 - 0000 - C000 - 000000000046 } " ) ) ; 
 + 
 + COMUtils . checkRC ( Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ) ; 
 + initialized = true ; 
 + 
 	 	 this . factory = new ObjectFactory ( ) ; 
 	 	 / / ensure there is only one word application running . 
 	 	 while ( true ) { 
 @ @ - 85 , 15 + 94 , 21 @ @ public class RunningObjectTable _ Test { 
 	 
 	 @ After 
 	 public void after ( ) { 
 - 	 	 this . msWord . Quit ( true , null , null ) ; 
 - 	 	 try { 
 - 	 	 	 / / wait for it to quit 
 - 	 	 	 Thread . sleep ( 100 ) ; 
 - 	 	 } catch ( InterruptedException e ) { 
 - 	 	 	 e . printStackTrace ( ) ; 
 - 	 	 } 
 + if ( this . msWord ! = null ) { 
 + this . msWord . Quit ( true , null , null ) ; 
 + } 
 + try { 
 + / / wait for it to quit 
 + Thread . sleep ( 100 ) ; 
 + } catch ( InterruptedException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + if ( factory ! = null ) { 
 factory . disposeAll ( ) ; 
 + } 
 + if ( initialized ) { 
 Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + } 
 	 } 
 	 
 	 @ Test 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java 
 index 164f783 . . 4e63a88 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java 
 @ @ - 14 , 6 + 14 , 7 @ @ package com . sun . jna . platform . win32 ; 
 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 + import static com . sun . jna . platform . win32 . AbstractWin32TestSupport . checkCOMRegistered ; 
 import com . sun . jna . platform . win32 . COM . COMException ; 
 import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import com . sun . jna . platform . win32 . COM . util . ObjectFactory ; 
 @ @ - 63 , 6 + 64 , 7 @ @ import static com . sun . jna . platform . win32 . OaIdlUtil . toPrimitiveArray ; 
 import com . sun . jna . platform . win32 . WTypes . VARTYPE ; 
 import com . sun . jna . platform . win32 . WinDef . LONG ; 
 import java . lang . reflect . Field ; 
 + import org . junit . Assume ; 
 
 public class SAFEARRAYTest { 
 static { 
 @ @ - 492 , 7 + 494 , 11 @ @ public class SAFEARRAYTest { 
 / / Open a record set with a sample search ( basicly get the first five 
 / / entries from the search index 
 Connection conn = fact . createObject ( Connection . class ) ; 
 - conn . Open ( " Provider = Search . CollatorDSO ; Extended Properties = ' Application = Windows ' ; " , " " , " " , - 1 ) ; 
 + try { 
 + conn . Open ( " Provider = Search . CollatorDSO ; Extended Properties = ' Application = Windows ' ; " , " " , " " , - 1 ) ; 
 + } catch ( COMException ex ) { 
 + Assume . assumeNoException ( ex ) ; 
 + } 
 
 Recordset recordset = fact . createObject ( Recordset . class ) ; 
 recordset . Open ( " SELECT TOP 5 System . ItemPathDisplay , System . ItemName , System . ItemUrl , System . DateCreated FROM SYSTEMINDEX ORDER BY System . ItemUrl " , conn , CursorTypeEnum . adOpenUnspecified , LockTypeEnum . adLockUnspecified , - 1 ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
