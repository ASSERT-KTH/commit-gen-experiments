BLEU SCORE: 0.005918093729486186

TEST MSG: skip X11 tests if headless
GENERATED MSG: add unit test to platform project to scan for Structure . getFieldOrder ( ) problems .

TEST DIFF (one line): diff - - git a / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java b / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java <nl> index 336e488 . . 12134a9 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * / <nl> package com . sun . jna . platform . unix ; <nl> <nl> + import java . awt . GraphicsEnvironment ; <nl> import junit . framework . TestCase ; <nl> <nl> import com . sun . jna . Pointer ; <nl> @ @ - 45 , 6 + 46 , 13 @ @ public class X11Test extends TestCase { <nl> } <nl> } <nl> <nl> + @ Override <nl> + protected void runTest ( ) throws Throwable { <nl> + if ( ! GraphicsEnvironment . isHeadless ( ) ) { <nl> + super . runTest ( ) ; <nl> + } <nl> + } <nl> + <nl> public void testXrender ( ) { <nl> X11 . Xrender . XRenderPictFormat s = new X11 . Xrender . XRenderPictFormat ( ) ; <nl> s . getPointer ( ) . setInt ( 0 , 25 ) ;
NEAREST DIFF (one line): diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> index 8801450 . . c18214b 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> @ @ - 25 , 17 + 25 , 12 @ @ public class MSOfficeDemo { <nl> 	 	 	 / / System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; <nl> 	 	 	 msWord . setVisible ( Variant . VARIANT _ TRUE ) ; <nl> 	 	 	 msWord . newDocument ( ) ; <nl> - 	 	 	 Thread . currentThread ( ) . sleep ( 2000 ) ; <nl> - 	 	 	 / / msWord . insertText ( " Hello from JNA ! " ) ; <nl> - 	 	 	 / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; <nl> - 	 	 	 Thread . currentThread ( ) . sleep ( 2000 ) ; <nl> + 	 	 	 / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; <nl> + 	 	 	 msWord . insertText ( " Hello from JNA ! " ) ; <nl> 	 	 	 / / close and save the document <nl> - 	 	 	 msWord . closeActiveDocument ( Variant . VARIANT _ FALSE ) ; <nl> - 	 	 	 Thread . currentThread ( ) . sleep ( 2000 ) ; <nl> + 	 	 	 msWord . closeActiveDocument ( Variant . VARIANT _ TRUE ) ; <nl> 	 	 	 / / wait then close word <nl> 	 	 	 msWord . quit ( ) ; <nl> - 	 	 } catch ( InterruptedException ie ) { <nl> - 	 	 	 ie . printStackTrace ( ) ; <nl> 	 	 } catch ( AutomationException e ) { <nl> 	 	 	 if ( e . getExcepInfo ( ) ! = null ) { <nl> 	 	 	 	 System . out <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> index 9af9426 . . 8ec27e3 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> @ @ - 13 , 10 + 13 , 6 @ @ import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> <nl> public class MSWord extends COMObject { <nl> <nl> - 	 private Documents m _ pDocuments ; <nl> - <nl> - 	 private ActiveDocument m _ pActiveDocument ; <nl> - <nl> 	 public MSWord ( ) throws AutomationException { <nl> 	 	 super ( " Word . Application " , false ) ; <nl> 	 } <nl> @ @ - 41 , 39 + 37 , 19 @ @ public class MSWord extends COMObject { <nl> 	 } <nl> <nl> 	 public HRESULT newDocument ( ) throws AutomationException { <nl> - 	 	 HRESULT hr ; <nl> - 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , <nl> - 	 	 	 	 " Documents " ) ; <nl> - 	 	 this . m _ pDocuments = new Documents ( ( IDispatch ) result . getValue ( ) ) ; <nl> - <nl> - 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; <nl> - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , result2 , <nl> - 	 	 	 	 m _ pDocuments . getIDispatch ( ) , " Add " ) ; <nl> - 	 	 this . m _ pActiveDocument = new ActiveDocument ( ( IDispatch ) result2 . getValue ( ) ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> + 	 	 	 	 getDocuments ( ) . getIDispatch ( ) , " Add " ) ; <nl> <nl> 	 	 return hr ; <nl> 	 } <nl> <nl> 	 public HRESULT openDocument ( String filename , boolean bVisible ) <nl> 	 	 	 throws AutomationException { <nl> - <nl> - 	 	 HRESULT hr ; <nl> - 	 	 / / GetDocuments <nl> - 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , <nl> - 	 	 	 	 " Documents " ) ; <nl> - 	 	 m _ pDocuments = new Documents ( ( IDispatch ) result . getValue ( ) ) ; <nl> - <nl> 	 	 / / OpenDocument <nl> 	 	 BSTR bstrFilename = OleAut32 . INSTANCE . SysAllocString ( filename ) ; <nl> 	 	 VARIANT varFilename = new VARIANT ( bstrFilename ) ; <nl> - 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; <nl> - <nl> - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , result2 , <nl> - 	 	 	 	 m _ pDocuments . getIDispatch ( ) , " Open " , varFilename ) ; <nl> - 	 	 this . m _ pActiveDocument = new ActiveDocument ( <nl> - 	 	 	 	 ( IDispatch ) result2 . getValue ( ) ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> + 	 	 	 	 getDocuments ( ) . getIDispatch ( ) , " Open " , varFilename ) ; <nl> <nl> 	 	 return hr ; <nl> 	 } <nl> @ @ - 82 , 8 + 58 , 7 @ @ public class MSWord extends COMObject { <nl> 	 	 	 throws AutomationException { <nl> <nl> 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> - 	 	 	 	 m _ pActiveDocument . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; <nl> - 	 	 this . m _ pActiveDocument = null ; <nl> + 	 	 	 	 getActiveDocument ( ) . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; <nl> <nl> 	 	 return hr ; <nl> 	 } <nl> @ @ - 99 , 14 + 74 , 9 @ @ public class MSWord extends COMObject { <nl> 	 public HRESULT insertText ( String text ) throws AutomationException { <nl> 	 	 HRESULT hr ; <nl> <nl> - 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> - 	 	 	 	 m _ pActiveDocument . getIDispatch ( ) , " Application " ) ; <nl> - 	 	 Application pDocApp = new Application ( ( IDispatch ) result . getValue ( ) ) ; <nl> - <nl> 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; <nl> 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result2 , <nl> - 	 	 	 	 pDocApp . getIDispatch ( ) , " Selection " ) ; <nl> + 	 	 	 	 this . iDispatch , " Selection " ) ; <nl> 	 	 Selection pSelection = new Selection ( ( IDispatch ) result2 . getValue ( ) ) ; <nl> <nl> 	 	 BSTR bstrText = OleAut32 . INSTANCE . SysAllocString ( text ) ; <nl> @ @ - 114 , 29 + 84 , 54 @ @ public class MSWord extends COMObject { <nl> 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> 	 	 	 	 pSelection . getIDispatch ( ) , " TypeText " , varText ) ; <nl> <nl> - 	 	 pDocApp . release ( ) ; <nl> - 	 	 pSelection . release ( ) ; <nl> - <nl> 	 	 return hr ; <nl> 	 } <nl> <nl> - 	 public class Documents extends COMObject { <nl> + 	 public ActiveDocument getActiveDocument ( ) { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , <nl> + 	 	 	 	 " ActiveDocument " ) ; <nl> + 	 	 <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new ActiveDocument ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + 	 <nl> + 	 public Documents getDocuments ( ) { <nl> + 	 	 / / GetDocuments <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , <nl> + 	 	 	 	 " Documents " ) ; <nl> + 	 	 <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new Documents ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + 	 <nl> + 	 public Application getApplication ( ) { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , <nl> + 	 	 	 	 " Application " ) ; <nl> + 	 	 <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new Application ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + 	 <nl> + 	 public class Application extends COMObject { <nl> <nl> - 	 	 public Documents ( IDispatch iDispatch ) throws AutomationException { <nl> + 	 	 public Application ( IDispatch iDispatch ) throws AutomationException { <nl> 	 	 	 super ( iDispatch ) ; <nl> 	 	 } <nl> 	 } <nl> + 	 <nl> + 	 public class Documents extends COMObject { <nl> <nl> - 	 public class ActiveDocument extends COMObject { <nl> - <nl> - 	 	 public ActiveDocument ( IDispatch iDispatch ) throws AutomationException { <nl> + 	 	 public Documents ( IDispatch iDispatch ) throws AutomationException { <nl> 	 	 	 super ( iDispatch ) ; <nl> 	 	 } <nl> 	 } <nl> <nl> - 	 public class Application extends COMObject { <nl> + 	 public class ActiveDocument extends COMObject { <nl> <nl> - 	 	 public Application ( IDispatch iDispatch ) throws AutomationException { <nl> + 	 	 public ActiveDocument ( IDispatch iDispatch ) throws AutomationException { <nl> 	 	 	 super ( iDispatch ) ; <nl> 	 	 } <nl> 	 } <nl> @ @ - 147 , 5 + 142 , 4 @ @ public class MSWord extends COMObject { <nl> 	 	 	 super ( iDispatch ) ; <nl> 	 	 } <nl> 	 } <nl> - <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> index 97e5c47 . . afd54d8 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> @ @ - 100 , 6 + 100 , 9 @ @ public abstract class COMUtils { <nl> 	 / * * The Constant DISP _ E _ NONAMEDARGS . * / <nl> 	 public static final int DISP _ E _ NONAMEDARGS = - 2147352569 ; <nl> <nl> + 	 / * * The Constant CO _ E _ OBJNOTCONNECTED . * / <nl> + 	 public static final int CO _ E _ OBJNOTCONNECTED = - 2147220995 ; <nl> + <nl> 	 / * * <nl> 	 * Succeeded . <nl> 	 * <nl> @ @ - 219 , 6 + 222 , 9 @ @ public abstract class COMUtils { <nl> 	 	 case DISP _ E _ UNKNOWNINTERFACE : <nl> 	 	 	 throw new AutomationException ( <nl> 	 	 	 	 	 " The interface identifier passed in riid is not IID _ NULL ! " ) ; <nl> + 	 	 case CO _ E _ OBJNOTCONNECTED : <nl> + 	 	 	 throw new AutomationException ( <nl> + 	 	 	 	 	 " The method is not connected to the Dispatch pointer ! " ) ; <nl> 	 	 default : <nl> 	 	 	 throw new AutomationException ( " Unexpected COM error code : " <nl> 	 	 	 	 	 + hr . intValue ( ) ) ;

TEST DIFF:
diff - - git a / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java b / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java 
 index 336e488 . . 12134a9 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / unix / X11Test . java 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * / 
 package com . sun . jna . platform . unix ; 
 
 + import java . awt . GraphicsEnvironment ; 
 import junit . framework . TestCase ; 
 
 import com . sun . jna . Pointer ; 
 @ @ - 45 , 6 + 46 , 13 @ @ public class X11Test extends TestCase { 
 } 
 } 
 
 + @ Override 
 + protected void runTest ( ) throws Throwable { 
 + if ( ! GraphicsEnvironment . isHeadless ( ) ) { 
 + super . runTest ( ) ; 
 + } 
 + } 
 + 
 public void testXrender ( ) { 
 X11 . Xrender . XRenderPictFormat s = new X11 . Xrender . XRenderPictFormat ( ) ; 
 s . getPointer ( ) . setInt ( 0 , 25 ) ;

NEAREST DIFF:
diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 index 8801450 . . c18214b 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 @ @ - 25 , 17 + 25 , 12 @ @ public class MSOfficeDemo { 
 	 	 	 / / System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; 
 	 	 	 msWord . setVisible ( Variant . VARIANT _ TRUE ) ; 
 	 	 	 msWord . newDocument ( ) ; 
 - 	 	 	 Thread . currentThread ( ) . sleep ( 2000 ) ; 
 - 	 	 	 / / msWord . insertText ( " Hello from JNA ! " ) ; 
 - 	 	 	 / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; 
 - 	 	 	 Thread . currentThread ( ) . sleep ( 2000 ) ; 
 + 	 	 	 / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; 
 + 	 	 	 msWord . insertText ( " Hello from JNA ! " ) ; 
 	 	 	 / / close and save the document 
 - 	 	 	 msWord . closeActiveDocument ( Variant . VARIANT _ FALSE ) ; 
 - 	 	 	 Thread . currentThread ( ) . sleep ( 2000 ) ; 
 + 	 	 	 msWord . closeActiveDocument ( Variant . VARIANT _ TRUE ) ; 
 	 	 	 / / wait then close word 
 	 	 	 msWord . quit ( ) ; 
 - 	 	 } catch ( InterruptedException ie ) { 
 - 	 	 	 ie . printStackTrace ( ) ; 
 	 	 } catch ( AutomationException e ) { 
 	 	 	 if ( e . getExcepInfo ( ) ! = null ) { 
 	 	 	 	 System . out 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 index 9af9426 . . 8ec27e3 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 @ @ - 13 , 10 + 13 , 6 @ @ import com . sun . jna . platform . win32 . COM . IDispatch ; 
 
 public class MSWord extends COMObject { 
 
 - 	 private Documents m _ pDocuments ; 
 - 
 - 	 private ActiveDocument m _ pActiveDocument ; 
 - 
 	 public MSWord ( ) throws AutomationException { 
 	 	 super ( " Word . Application " , false ) ; 
 	 } 
 @ @ - 41 , 39 + 37 , 19 @ @ public class MSWord extends COMObject { 
 	 } 
 
 	 public HRESULT newDocument ( ) throws AutomationException { 
 - 	 	 HRESULT hr ; 
 - 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , 
 - 	 	 	 	 " Documents " ) ; 
 - 	 	 this . m _ pDocuments = new Documents ( ( IDispatch ) result . getValue ( ) ) ; 
 - 
 - 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; 
 - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , result2 , 
 - 	 	 	 	 m _ pDocuments . getIDispatch ( ) , " Add " ) ; 
 - 	 	 this . m _ pActiveDocument = new ActiveDocument ( ( IDispatch ) result2 . getValue ( ) ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 + 	 	 	 	 getDocuments ( ) . getIDispatch ( ) , " Add " ) ; 
 
 	 	 return hr ; 
 	 } 
 
 	 public HRESULT openDocument ( String filename , boolean bVisible ) 
 	 	 	 throws AutomationException { 
 - 
 - 	 	 HRESULT hr ; 
 - 	 	 / / GetDocuments 
 - 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , 
 - 	 	 	 	 " Documents " ) ; 
 - 	 	 m _ pDocuments = new Documents ( ( IDispatch ) result . getValue ( ) ) ; 
 - 
 	 	 / / OpenDocument 
 	 	 BSTR bstrFilename = OleAut32 . INSTANCE . SysAllocString ( filename ) ; 
 	 	 VARIANT varFilename = new VARIANT ( bstrFilename ) ; 
 - 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; 
 - 
 - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , result2 , 
 - 	 	 	 	 m _ pDocuments . getIDispatch ( ) , " Open " , varFilename ) ; 
 - 	 	 this . m _ pActiveDocument = new ActiveDocument ( 
 - 	 	 	 	 ( IDispatch ) result2 . getValue ( ) ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 + 	 	 	 	 getDocuments ( ) . getIDispatch ( ) , " Open " , varFilename ) ; 
 
 	 	 return hr ; 
 	 } 
 @ @ - 82 , 8 + 58 , 7 @ @ public class MSWord extends COMObject { 
 	 	 	 throws AutomationException { 
 
 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 - 	 	 	 	 m _ pActiveDocument . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; 
 - 	 	 this . m _ pActiveDocument = null ; 
 + 	 	 	 	 getActiveDocument ( ) . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; 
 
 	 	 return hr ; 
 	 } 
 @ @ - 99 , 14 + 74 , 9 @ @ public class MSWord extends COMObject { 
 	 public HRESULT insertText ( String text ) throws AutomationException { 
 	 	 HRESULT hr ; 
 
 - 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 - 	 	 	 	 m _ pActiveDocument . getIDispatch ( ) , " Application " ) ; 
 - 	 	 Application pDocApp = new Application ( ( IDispatch ) result . getValue ( ) ) ; 
 - 
 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; 
 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result2 , 
 - 	 	 	 	 pDocApp . getIDispatch ( ) , " Selection " ) ; 
 + 	 	 	 	 this . iDispatch , " Selection " ) ; 
 	 	 Selection pSelection = new Selection ( ( IDispatch ) result2 . getValue ( ) ) ; 
 
 	 	 BSTR bstrText = OleAut32 . INSTANCE . SysAllocString ( text ) ; 
 @ @ - 114 , 29 + 84 , 54 @ @ public class MSWord extends COMObject { 
 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 	 	 	 	 pSelection . getIDispatch ( ) , " TypeText " , varText ) ; 
 
 - 	 	 pDocApp . release ( ) ; 
 - 	 	 pSelection . release ( ) ; 
 - 
 	 	 return hr ; 
 	 } 
 
 - 	 public class Documents extends COMObject { 
 + 	 public ActiveDocument getActiveDocument ( ) { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , 
 + 	 	 	 	 " ActiveDocument " ) ; 
 + 	 	 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new ActiveDocument ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 	 
 + 	 public Documents getDocuments ( ) { 
 + 	 	 / / GetDocuments 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , 
 + 	 	 	 	 " Documents " ) ; 
 + 	 	 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new Documents ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 	 
 + 	 public Application getApplication ( ) { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , 
 + 	 	 	 	 " Application " ) ; 
 + 	 	 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new Application ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 	 
 + 	 public class Application extends COMObject { 
 
 - 	 	 public Documents ( IDispatch iDispatch ) throws AutomationException { 
 + 	 	 public Application ( IDispatch iDispatch ) throws AutomationException { 
 	 	 	 super ( iDispatch ) ; 
 	 	 } 
 	 } 
 + 	 
 + 	 public class Documents extends COMObject { 
 
 - 	 public class ActiveDocument extends COMObject { 
 - 
 - 	 	 public ActiveDocument ( IDispatch iDispatch ) throws AutomationException { 
 + 	 	 public Documents ( IDispatch iDispatch ) throws AutomationException { 
 	 	 	 super ( iDispatch ) ; 
 	 	 } 
 	 } 
 
 - 	 public class Application extends COMObject { 
 + 	 public class ActiveDocument extends COMObject { 
 
 - 	 	 public Application ( IDispatch iDispatch ) throws AutomationException { 
 + 	 	 public ActiveDocument ( IDispatch iDispatch ) throws AutomationException { 
 	 	 	 super ( iDispatch ) ; 
 	 	 } 
 	 } 
 @ @ - 147 , 5 + 142 , 4 @ @ public class MSWord extends COMObject { 
 	 	 	 super ( iDispatch ) ; 
 	 	 } 
 	 } 
 - 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 index 97e5c47 . . afd54d8 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 @ @ - 100 , 6 + 100 , 9 @ @ public abstract class COMUtils { 
 	 / * * The Constant DISP _ E _ NONAMEDARGS . * / 
 	 public static final int DISP _ E _ NONAMEDARGS = - 2147352569 ; 
 
 + 	 / * * The Constant CO _ E _ OBJNOTCONNECTED . * / 
 + 	 public static final int CO _ E _ OBJNOTCONNECTED = - 2147220995 ; 
 + 
 	 / * * 
 	 * Succeeded . 
 	 * 
 @ @ - 219 , 6 + 222 , 9 @ @ public abstract class COMUtils { 
 	 	 case DISP _ E _ UNKNOWNINTERFACE : 
 	 	 	 throw new AutomationException ( 
 	 	 	 	 	 " The interface identifier passed in riid is not IID _ NULL ! " ) ; 
 + 	 	 case CO _ E _ OBJNOTCONNECTED : 
 + 	 	 	 throw new AutomationException ( 
 + 	 	 	 	 	 " The method is not connected to the Dispatch pointer ! " ) ; 
 	 	 default : 
 	 	 	 throw new AutomationException ( " Unexpected COM error code : " 
 	 	 	 	 	 + hr . intValue ( ) ) ;
