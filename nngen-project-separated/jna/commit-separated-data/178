BLEU SCORE: 0.16186478197091597

TEST MSG: Fix javadoc errors
GENERATED MSG: Correct freeing of BSTRs

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> index cf7cc5e . . 2cddf3d 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> @ @ - 192 , 11 + 192 , 11 @ @ public abstract class COMUtils { <nl> } <nl> <nl> / * * <nl> - * Check is COM was initialized correctly . The initialization status is not changed ! <nl> + * Check if COM was initialized correctly . The initialization status is not changed ! <nl> * <nl> * < p > This is a debug function , not for normal usage ! < / p > <nl> * <nl> - * @ return <nl> + * @ return whether COM has been initialized <nl> * / <nl> public static boolean comIsInitialized ( ) { <nl> WinNT . HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Convert . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Convert . java <nl> index 40b6207 . . adc1003 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Convert . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Convert . java <nl> @ @ - 74 , 10 + 74 , 9 @ @ class Convert { <nl> * < li > VARIANTs are not rewrapped , but passed through unmodified < / li > <nl> * < li > A string is wrapped into a BSTR , that is wrapped into the VARIANT . <nl> * The string is allocated as native memory by the VARIANT constructor . <nl> - * The BSTR needs to be freed by { @ see com . sun . jna . platform . win32 . OleAuto # SysFreeString } . < / li > <nl> + * The BSTR needs to be freed by { @ link com . sun . jna . platform . win32 . OleAuto # SysFreeString } . < / li > <nl> * < / ul > <nl> * <nl> - * @ see com . sun . jna . platform . win32 . Variant . VARIANT # VARIANT ( java . lang . String ) <nl> * @ param value to be wrapped <nl> * @ return wrapped VARIANT <nl> * / <nl> @ @ - 325 , 7 + 324 , 7 @ @ class Convert { <nl> / * * <nl> * Free the contents of the supplied VARIANT . <nl> * <nl> - * < p > This method is a companion to { @ see # toVariant } . Primary usage is <nl> + * < p > This method is a companion to { @ link # toVariant } . Primary usage is <nl> * to free BSTRs contained in VARIANTs . < / p > <nl> * <nl> * @ param variant to be cleared <nl> @ @ - 345 , 7 + 344 , 7 @ @ class Convert { <nl> / * * <nl> * Free the contents of the supplied VARIANT . <nl> * <nl> - * < p > This method is a companion to { @ see # toVariant } . Primary usage is <nl> + * < p > This method is a companion to { @ link # toVariant } . Primary usage is <nl> * to free BSTRs contained in VARIANTs . < / p > <nl> * <nl> * @ param variant to be cleared <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java <nl> index 48ce652 . . abf8b4e 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java <nl> @ @ - 88 , 7 + 88 , 7 @ @ public abstract class Kernel32Util implements WinDef { <nl> * Once closed all handles , the accumulated exception ( if any ) is thrown <nl> * <nl> * @ param refs The references to close <nl> - * @ see # closeHandleRef ( HANDLEByReference ) <nl> + * @ see # closeHandleRef ( WinNT . HANDLEByReference ) <nl> * / <nl> public static void closeHandleRefs ( HANDLEByReference . . . refs ) { <nl> Win32Exception err = null ; <nl> @ @ - 112 , 14 + 112 , 14 @ @ public abstract class Kernel32Util implements WinDef { <nl> * Closes the handle in the reference <nl> * <nl> * @ param ref The handle reference - ignored if { @ code null } <nl> - * @ see # closeHandle ( HANDLE ) <nl> + * @ see # closeHandle ( WinNT . HANDLE ) <nl> * / <nl> public static void closeHandleRef ( HANDLEByReference ref ) { <nl> closeHandle ( ( ref = = null ) ? null : ref . getValue ( ) ) ; <nl> } <nl> <nl> / * * <nl> - * Invokes { @ link # closeHandle ( HANDLE ) } on each handle . If an exception <nl> + * Invokes { @ link # closeHandle ( WinNT . HANDLE ) } on each handle . If an exception <nl> * is thrown for a specific handle , then it is accumulated until all <nl> * handles have been closed . If more than one exception occurs , then it <nl> * is added as a suppressed exception to the first one . Once closed all <nl> @ @ - 148 , 7 + 148 , 7 @ @ public abstract class Kernel32Util implements WinDef { <nl> } <nl> <nl> / * * <nl> - * Invokes { @ link Kernel32 # CloseHandle ( HANDLE ) } and checks the success code . <nl> + * Invokes { @ link Kernel32 # CloseHandle ( WinNT . HANDLE ) } and checks the success code . <nl> * If not successful , then throws a { @ link Win32Exception } with the <nl> * { @ code GetLastError } value <nl> * <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> index d223eb5 . . 4f83ed8 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> @ @ - 885 , 7 + 885 , 7 @ @ public interface OaIdl { <nl> * java conventions . < / p > <nl> * <nl> * @ param dimension zerobased index <nl> - * @ return <nl> + * @ return lower bound for the selected dimension <nl> * / <nl> public int getLBound ( int dimension ) { <nl> int targetDimension = getDimensionCount ( ) - dimension ; <nl> @ @ - 902 , 7 + 902 , 7 @ @ public interface OaIdl { <nl> * java conventions . < / p > <nl> * <nl> * @ param dimension zerobased index <nl> - * @ return <nl> + * @ return upper bound for the selected dimension <nl> * / <nl> public int getUBound ( int dimension ) { <nl> int targetDimension = getDimensionCount ( ) - dimension ; <nl> @ @ - 915 , 7 + 915 , 7 @ @ public interface OaIdl { <nl> / * * <nl> * Return number of dimensions of the SAFEARRAY <nl> * <nl> - * @ return <nl> + * @ return number of dimensions of the SAFEARRAY <nl> * / <nl> public int getDimensionCount ( ) { <nl> return OleAuto . INSTANCE . SafeArrayGetDim ( this ) . intValue ( ) ; <nl> @ @ - 974 , 7 + 974 , 7 @ @ public interface OaIdl { <nl> / * * <nl> * Return VARTYPE of the SAFEARRAY <nl> * <nl> - * @ return <nl> + * @ return VARTYPE of the SAFEARRAY <nl> * / <nl> public VARTYPE getVarType ( ) { <nl> WTypes . VARTYPEByReference resultHolder = new WTypes . VARTYPEByReference ( ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java <nl> index 1ce2dc7 . . 1a4d20c 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java <nl> @ @ - 77 , 7 + 77 , 7 @ @ public abstract class OaIdlUtil { <nl> * @ param sa SAFEARRAY to convert <nl> * @ param destruct if true the supplied SAFEARRAY is destroyed , there must <nl> * not be additional locks on the array ! <nl> - * @ return <nl> + * @ return Java array corresponding to the given SAFEARRAY <nl> * / <nl> public static Object toPrimitiveArray ( SAFEARRAY sa , boolean destruct ) { <nl> Pointer dataPointer = sa . accessData ( ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> index bbfbeab . . d0c3d8b 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> @ @ - 248 , 9 + 248 , 9 @ @ public interface Variant { <nl> * Create a new VARIANT wrapping the supplied string . <nl> * <nl> * < p > < i > Implementation note : < / i > the string is wrapped as a BSTR value , <nl> - * that is allocated using { @ see com . sun . jna . platform . win32 . OleAuto # SysAllocString } <nl> + * that is allocated using { @ link com . sun . jna . platform . win32 . OleAuto # SysAllocString } <nl> * and needs to be freed using <nl> - * { @ see com . sun . jna . platform . win32 . OleAuto # SysFreeString } by the user < / p > <nl> + * { @ link com . sun . jna . platform . win32 . OleAuto # SysFreeString } by the user < / p > <nl> * <nl> * @ param value to be wrapped <nl> * /
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 index cf7cc5e . . 2cddf3d 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 @ @ - 192 , 11 + 192 , 11 @ @ public abstract class COMUtils { 
 } 
 
 / * * 
 - * Check is COM was initialized correctly . The initialization status is not changed ! 
 + * Check if COM was initialized correctly . The initialization status is not changed ! 
 * 
 * < p > This is a debug function , not for normal usage ! < / p > 
 * 
 - * @ return 
 + * @ return whether COM has been initialized 
 * / 
 public static boolean comIsInitialized ( ) { 
 WinNT . HRESULT hr = Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Convert . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Convert . java 
 index 40b6207 . . adc1003 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Convert . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / Convert . java 
 @ @ - 74 , 10 + 74 , 9 @ @ class Convert { 
 * < li > VARIANTs are not rewrapped , but passed through unmodified < / li > 
 * < li > A string is wrapped into a BSTR , that is wrapped into the VARIANT . 
 * The string is allocated as native memory by the VARIANT constructor . 
 - * The BSTR needs to be freed by { @ see com . sun . jna . platform . win32 . OleAuto # SysFreeString } . < / li > 
 + * The BSTR needs to be freed by { @ link com . sun . jna . platform . win32 . OleAuto # SysFreeString } . < / li > 
 * < / ul > 
 * 
 - * @ see com . sun . jna . platform . win32 . Variant . VARIANT # VARIANT ( java . lang . String ) 
 * @ param value to be wrapped 
 * @ return wrapped VARIANT 
 * / 
 @ @ - 325 , 7 + 324 , 7 @ @ class Convert { 
 / * * 
 * Free the contents of the supplied VARIANT . 
 * 
 - * < p > This method is a companion to { @ see # toVariant } . Primary usage is 
 + * < p > This method is a companion to { @ link # toVariant } . Primary usage is 
 * to free BSTRs contained in VARIANTs . < / p > 
 * 
 * @ param variant to be cleared 
 @ @ - 345 , 7 + 344 , 7 @ @ class Convert { 
 / * * 
 * Free the contents of the supplied VARIANT . 
 * 
 - * < p > This method is a companion to { @ see # toVariant } . Primary usage is 
 + * < p > This method is a companion to { @ link # toVariant } . Primary usage is 
 * to free BSTRs contained in VARIANTs . < / p > 
 * 
 * @ param variant to be cleared 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java 
 index 48ce652 . . abf8b4e 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java 
 @ @ - 88 , 7 + 88 , 7 @ @ public abstract class Kernel32Util implements WinDef { 
 * Once closed all handles , the accumulated exception ( if any ) is thrown 
 * 
 * @ param refs The references to close 
 - * @ see # closeHandleRef ( HANDLEByReference ) 
 + * @ see # closeHandleRef ( WinNT . HANDLEByReference ) 
 * / 
 public static void closeHandleRefs ( HANDLEByReference . . . refs ) { 
 Win32Exception err = null ; 
 @ @ - 112 , 14 + 112 , 14 @ @ public abstract class Kernel32Util implements WinDef { 
 * Closes the handle in the reference 
 * 
 * @ param ref The handle reference - ignored if { @ code null } 
 - * @ see # closeHandle ( HANDLE ) 
 + * @ see # closeHandle ( WinNT . HANDLE ) 
 * / 
 public static void closeHandleRef ( HANDLEByReference ref ) { 
 closeHandle ( ( ref = = null ) ? null : ref . getValue ( ) ) ; 
 } 
 
 / * * 
 - * Invokes { @ link # closeHandle ( HANDLE ) } on each handle . If an exception 
 + * Invokes { @ link # closeHandle ( WinNT . HANDLE ) } on each handle . If an exception 
 * is thrown for a specific handle , then it is accumulated until all 
 * handles have been closed . If more than one exception occurs , then it 
 * is added as a suppressed exception to the first one . Once closed all 
 @ @ - 148 , 7 + 148 , 7 @ @ public abstract class Kernel32Util implements WinDef { 
 } 
 
 / * * 
 - * Invokes { @ link Kernel32 # CloseHandle ( HANDLE ) } and checks the success code . 
 + * Invokes { @ link Kernel32 # CloseHandle ( WinNT . HANDLE ) } and checks the success code . 
 * If not successful , then throws a { @ link Win32Exception } with the 
 * { @ code GetLastError } value 
 * 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 index d223eb5 . . 4f83ed8 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 @ @ - 885 , 7 + 885 , 7 @ @ public interface OaIdl { 
 * java conventions . < / p > 
 * 
 * @ param dimension zerobased index 
 - * @ return 
 + * @ return lower bound for the selected dimension 
 * / 
 public int getLBound ( int dimension ) { 
 int targetDimension = getDimensionCount ( ) - dimension ; 
 @ @ - 902 , 7 + 902 , 7 @ @ public interface OaIdl { 
 * java conventions . < / p > 
 * 
 * @ param dimension zerobased index 
 - * @ return 
 + * @ return upper bound for the selected dimension 
 * / 
 public int getUBound ( int dimension ) { 
 int targetDimension = getDimensionCount ( ) - dimension ; 
 @ @ - 915 , 7 + 915 , 7 @ @ public interface OaIdl { 
 / * * 
 * Return number of dimensions of the SAFEARRAY 
 * 
 - * @ return 
 + * @ return number of dimensions of the SAFEARRAY 
 * / 
 public int getDimensionCount ( ) { 
 return OleAuto . INSTANCE . SafeArrayGetDim ( this ) . intValue ( ) ; 
 @ @ - 974 , 7 + 974 , 7 @ @ public interface OaIdl { 
 / * * 
 * Return VARTYPE of the SAFEARRAY 
 * 
 - * @ return 
 + * @ return VARTYPE of the SAFEARRAY 
 * / 
 public VARTYPE getVarType ( ) { 
 WTypes . VARTYPEByReference resultHolder = new WTypes . VARTYPEByReference ( ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java 
 index 1ce2dc7 . . 1a4d20c 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdlUtil . java 
 @ @ - 77 , 7 + 77 , 7 @ @ public abstract class OaIdlUtil { 
 * @ param sa SAFEARRAY to convert 
 * @ param destruct if true the supplied SAFEARRAY is destroyed , there must 
 * not be additional locks on the array ! 
 - * @ return 
 + * @ return Java array corresponding to the given SAFEARRAY 
 * / 
 public static Object toPrimitiveArray ( SAFEARRAY sa , boolean destruct ) { 
 Pointer dataPointer = sa . accessData ( ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 index bbfbeab . . d0c3d8b 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 @ @ - 248 , 9 + 248 , 9 @ @ public interface Variant { 
 * Create a new VARIANT wrapping the supplied string . 
 * 
 * < p > < i > Implementation note : < / i > the string is wrapped as a BSTR value , 
 - * that is allocated using { @ see com . sun . jna . platform . win32 . OleAuto # SysAllocString } 
 + * that is allocated using { @ link com . sun . jna . platform . win32 . OleAuto # SysAllocString } 
 * and needs to be freed using 
 - * { @ see com . sun . jna . platform . win32 . OleAuto # SysFreeString } by the user < / p > 
 + * { @ link com . sun . jna . platform . win32 . OleAuto # SysFreeString } by the user < / p > 
 * 
 * @ param value to be wrapped 
 * /

NEAREST DIFF:
ELIMINATEDSENTENCE
