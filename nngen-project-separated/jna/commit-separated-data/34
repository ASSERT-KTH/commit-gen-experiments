BLEU SCORE: 0.011354463501096666

TEST MSG: Address javadoc warnings ( production build is done on Oracle JDK 8u181 )
GENERATED MSG: Add com . sun . jna . platform . win32 . BaseTSD . DWORD _ PTR .

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> index b55c3f2 . . 511ecfb 100755 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java <nl> @ @ - 1932 , 7 + 1932 , 7 @ @ public interface Advapi32 extends StdCallLibrary { <nl> * <nl> * @ param hSCManager A handle to the service control manager <nl> * database . This handle is returned by the <nl> - * { @ link OpenSCManager } function , and must have <nl> + * { @ link # OpenSCManager } function , and must have <nl> * the { @ link Winsvc # SC _ MANAGER _ ENUMERATE _ SERVICE } <nl> * access right . For more information , see Service <nl> * Security and Access Rights . <nl> @ @ - 2006 , 14 + 2006 , 14 @ @ public interface Advapi32 extends StdCallLibrary { <nl> * @ param lpResumeHandle A pointer to a variable that , on input , <nl> * specifies the starting point of enumeration . <nl> * You must set this value to zero the first time <nl> - * the { @ link EnumServicesStatusEx } function is <nl> + * the { @ link # EnumServicesStatusEx } function is <nl> * called . On output , this value is zero if the <nl> * function succeeds . However , if the function <nl> * returns zero and the <nl> * { @ link Kernel32 # GetLastError } function returns <nl> * { @ link WinError # ERROR _ MORE _ DATA } , this value <nl> * indicates the next service entry to be read <nl> - * when the { @ link EnumServicesStatusEx } function <nl> + * when the { @ link # EnumServicesStatusEx } function <nl> * is called to retrieve the additional data . <nl> * @ param pszGroupName The load - order group name . If this parameter is <nl> * a string , the only services enumerated are <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> index d8d410b . . 7c7abfc 100755 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java <nl> @ @ - 2575 , 7 + 2575 , 7 @ @ public abstract class Advapi32Util { <nl> / * * <nl> * @ param fileName path to the file <nl> * @ param compact if true compatible ACEs are merged if possible <nl> - * @ return <nl> + * @ return list of ACEs in the DACL of the referenced file <nl> * / <nl> 	 public static ACE _ HEADER [ ] getFileSecurity ( String fileName , <nl> 	 	 	 boolean compact ) { <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java <nl> index 10d5e55 . . 6e2e599 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java <nl> @ @ - 1029 , 7 + 1029 , 8 @ @ public interface WinCrypt { <nl> * signer . <nl> * @ param hMsgCertStore A handle to the certificate store containing all <nl> * the certificates and CRLs in the signed message . <nl> - * @ return <nl> + * @ return Pointer to a read - only { @ link com . sun . jna . platform . win32 . WinCrypt . CERT _ CONTEXT } <nl> + * if a signer certificate is found , { @ code null } if the function fails . <nl> * / <nl> public CERT _ CONTEXT . ByReference callback ( Pointer pvGetArg , int dwCertEncodingType , <nl> CERT _ INFO pSignerId , <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java <nl> index 1bf9277 . . 42a999f 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java <nl> @ @ - 842 , 7 + 842 , 7 @ @ public interface Winsvc { <nl> * / <nl> public String lpDisplayName ; <nl> / * * <nl> - * A { @ link Winsvc # SERVICE _ STATUS } structure that contains status <nl> + * A { @ link com . sun . jna . platform . win32 . Winsvc . SERVICE _ STATUS } structure that contains status <nl> * information for the lpServiceName service . <nl> * / <nl> public SERVICE _ STATUS ServiceStatus ;
NEAREST DIFF (one line): diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> index b01a11e . . 5c1f15a 100644 <nl> - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32 . java <nl> @ @ - 16 , 11 + 16 , 13 @ @ import java . nio . Buffer ; <nl> <nl> import com . sun . jna . Native ; <nl> import com . sun . jna . Pointer ; <nl> + import com . sun . jna . platform . win32 . WinBase . MEMORYSTATUSEX ; <nl> import com . sun . jna . platform . win32 . WinBase . SYSTEM _ INFO ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> import com . sun . jna . platform . win32 . WinDef . HMODULE ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLEByReference ; <nl> + import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; <nl> import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFO ; <nl> import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX ; <nl> import com . sun . jna . ptr . ByReference ; <nl> @ @ - 149 , 14 + 151 , 14 @ @ public interface Kernel32 extends StdCallLibrary { <nl> / * * <nl> * The GetDriveType function determines whether a disk drive is a removable , <nl> * fixed , CD - ROM , RAM disk , or network drive . <nl> - * @ param rootPathName <nl> + * @ param lpRootPathName <nl> * Pointer to a null - terminated string that specifies the root directory of <nl> * the disk to return information about . A trailing backslash is required . <nl> * If this parameter is NULL , the function uses the root of the current directory . <nl> * @ return <nl> * The return value specifies the type of drive . <nl> * / <nl> - int GetDriveType ( String rootPathName ) ; <nl> + int GetDriveType ( String lpRootPathName ) ; <nl> <nl> / * * <nl> * The FormatMessage function formats a message string . The function requires a <nl> @ @ - 781 , 4 + 783 , 66 @ @ public interface Kernel32 extends StdCallLibrary { <nl> * If the function fails , the return value is zero . To get extended error information , call GetLastError . <nl> * / <nl> boolean IsWow64Process ( HANDLE hProcess , IntByReference Wow64Process ) ; <nl> + <nl> + / * * <nl> + * Retrieves information about the system ' s current usage of both physical and virtual memory . <nl> + * @ param lpBuffer <nl> + * A pointer to a MEMORYSTATUSEX structure that receives information about current memory availability . <nl> + * @ return <nl> + * If the function succeeds , the return value is nonzero . <nl> + * If the function fails , the return value is zero . To get extended error information , <nl> + * call GetLastError . <nl> + * / <nl> + boolean GlobalMemoryStatusEx ( MEMORYSTATUSEX lpBuffer ) ; <nl> + <nl> + / * * <nl> + * The GetLogicalDriveStrings function fills a buffer with strings that specify <nl> + * valid drives in the system . <nl> + * @ param nBufferLength <nl> + * Maximum size of the buffer pointed to by lpBuffer , in TCHARs . This size does not include <nl> + * the terminating null character . If this parameter is zero , lpBuffer is not used . <nl> + * @ param lpBuffer <nl> + * Pointer to a buffer that receives a series of null - terminated strings , one for each valid <nl> + * drive in the system , plus with an additional null character . Each string is a device name . <nl> + * @ return <nl> + * If the function succeeds , the return value is the length , in characters , of the strings <nl> + * copied to the buffer , not including the terminating null character . Note that an ANSI - ASCII <nl> + * null character uses one byte , but a Unicode null character uses two bytes . <nl> + * If the buffer is not large enough , the return value is greater than nBufferLength . It is <nl> + * the size of the buffer required to hold the drive strings . <nl> + * If the function fails , the return value is zero . To get extended error information , use <nl> + * the GetLastError function . <nl> + * / <nl> + DWORD GetLogicalDriveStrings ( DWORD nBufferLength , char [ ] lpBuffer ) ; <nl> + <nl> + / * * <nl> + * The GetDiskFreeSpaceEx function retrieves information about the amount of space that is <nl> + * available on a disk volume , which is the total amount of space , the total amount of free <nl> + * space , and the total amount of free space available to the user that is associated with <nl> + * the calling thread . <nl> + * @ param lpDirectoryName <nl> + * A pointer to a null - terminated string that specifies a directory on a disk . <nl> + * If this parameter is NULL , the function uses the root of the current disk . <nl> + * If this parameter is a UNC name , it must include a trailing backslash , for example , <nl> + * \ \ MyServer \ MyShare \ . <nl> + * This parameter does not have to specify the root directory on a disk . The function <nl> + * accepts any directory on a disk . <nl> + * @ param lpFreeBytesAvailable <nl> + * A pointer to a variable that receives the total number of free bytes on a disk that <nl> + * are available to the user who is associated with the calling thread . <nl> + * This parameter can be NULL . <nl> + * @ param lpTotalNumberOfBytes <nl> + * A pointer to a variable that receives the total number of bytes on a disk that are <nl> + * available to the user who is associated with the calling thread . <nl> + * This parameter can be NULL . <nl> + * @ param lpTotalNumberOfFreeBytes <nl> + * A pointer to a variable that receives the total number of free bytes on a disk . <nl> + * This parameter can be NULL . <nl> + * @ return <nl> + * If the function succeeds , the return value is nonzero . <nl> + * If the function fails , the return value is 0 ( zero ) . To get extended error information , <nl> + * call GetLastError . <nl> + * / <nl> + boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LARGE _ INTEGER . ByReference lpFreeBytesAvailable , <nl> + 	 	 LARGE _ INTEGER . ByReference lpTotalNumberOfBytes , LARGE _ INTEGER . ByReference lpTotalNumberOfFreeBytes ) ; <nl> } <nl> diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java <nl> index d5171f3 . . 74c937e 100644 <nl> - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java <nl> + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java <nl> @ @ - 12 , 6 + 12 , 9 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 ; <nl> <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> import com . sun . jna . LastErrorException ; <nl> import com . sun . jna . Native ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> @ @ - 90 , 4 + 93 , 35 @ @ public abstract class Kernel32Util { <nl> 	 } <nl> 	 return Native . toString ( buffer ) ; <nl> 	 } <nl> + 	 <nl> + 	 / * * <nl> + 	 * Returns valid drives in the system . <nl> + 	 * @ return <nl> + 	 * An array of valid drives . <nl> + 	 * / <nl> + 	 public static String [ ] getLogicalDriveStrings ( ) { <nl> + 	 DWORD dwSize = Kernel32 . INSTANCE . GetLogicalDriveStrings ( new DWORD ( 0 ) , null ) ; <nl> + 	 if ( dwSize . intValue ( ) < = 0 ) { <nl> + 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> + 	 } <nl> + 	 <nl> + 	 char buf [ ] = new char [ dwSize . intValue ( ) ] ; <nl> + 	 dwSize = Kernel32 . INSTANCE . GetLogicalDriveStrings ( dwSize , buf ) ; <nl> + 	 if ( dwSize . intValue ( ) < = 0 ) { <nl> + 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 List < String > drives = new ArrayList < String > ( ) ; 	 <nl> + 	 String drive = " " ; <nl> + 	 / / the buffer is double - null - terminated <nl> + 	 for ( int i = 0 ; i < buf . length - 1 ; i + + ) { <nl> + 	 	 if ( buf [ i ] = = 0 ) { <nl> + 	 	 	 drives . add ( drive ) ; <nl> + 	 	 	 drive = " " ; <nl> + 	 	 } else { <nl> + 	 	 	 drive + = buf [ i ] ; <nl> + 	 	 } <nl> + 	 } <nl> + 	 return drives . toArray ( new String [ 0 ] ) ; <nl> + 	 } 	 <nl> } <nl> diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinBase . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> index b38cbd3 . . 2fd3a76 100644 <nl> - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinBase . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import com . sun . jna . Union ; <nl> import com . sun . jna . platform . win32 . BaseTSD . DWORD _ PTR ; <nl> import com . sun . jna . platform . win32 . BaseTSD . ULONG _ PTR ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> + import com . sun . jna . platform . win32 . WinDef . DWORDLONG ; <nl> import com . sun . jna . platform . win32 . WinDef . WORD ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> <nl> @ @ - 315 , 7 + 316 , 12 @ @ public abstract class WinBase { <nl> } <nl> <nl> public static final int INFINITE = 0xFFFFFFFF ; <nl> - <nl> + <nl> + / * * <nl> + * Contains information about the current computer system . This includes the architecture and <nl> + * type of the processor , the number of processors in the system , the page size , and other such <nl> + * information . <nl> + * / <nl> public static class SYSTEM _ INFO extends Structure { <nl> 	 <nl> 	 public static class PI extends Structure { <nl> @ @ - 408 , 4 + 414 , 56 @ @ public abstract class WinBase { <nl> 	 	 * / <nl> 	 	 public WORD wProcessorRevision ; <nl> } <nl> + <nl> + / * * <nl> + * Contains information about the current state of both physical and virtual memory , including <nl> + * extended memory . The GlobalMemoryStatusEx function stores information in this structure . <nl> + * / <nl> + public static class MEMORYSTATUSEX extends Structure { <nl> + 	 / * * <nl> + 	 * The size of the structure , in bytes . <nl> + 	 * / <nl> + public DWORD dwLength ; <nl> + / * * <nl> + * A number between 0 and 100 that specifies the approximate percentage of physical memory <nl> + * that is in use ( 0 indicates no memory use and 100 indicates full memory use ) . <nl> + * / <nl> + public DWORD dwMemoryLoad ; <nl> + / * * <nl> + * The amount of actual physical memory , in bytes . <nl> + * / <nl> + public DWORDLONG ullTotalPhys ; <nl> + / * * <nl> + * The amount of physical memory currently available , in bytes . This is the amount of physical <nl> + * memory that can be immediately reused without having to write its contents to disk first . <nl> + * It is the sum of the size of the standby , free , and zero lists . <nl> + * / <nl> + public DWORDLONG ullAvailPhys ; <nl> + / * * <nl> + * The current committed memory limit for the system or the current process , whichever is smaller , in bytes . <nl> + * / <nl> + public DWORDLONG ullTotalPageFile ; <nl> + / * * <nl> + * The maximum amount of memory the current process can commit , in bytes . This value is equal to or smaller <nl> + * than the system - wide available commit value . <nl> + * / <nl> + public DWORDLONG ullAvailPageFile ; <nl> + / * * <nl> + * The size of the user - mode portion of the virtual address space of the calling process , in bytes . <nl> + * / <nl> + public DWORDLONG ullTotalVirtual ; <nl> + / * * <nl> + * The amount of unreserved and uncommitted memory currently in the user - mode portion of the <nl> + * virtual address space of the calling process , in bytes . <nl> + * / <nl> + public DWORDLONG ullAvailVirtual ; <nl> + / * * <nl> + * Reserved . This value is always 0 . <nl> + * / <nl> + public DWORDLONG ullAvailExtendedVirtual ; <nl> + <nl> + public MEMORYSTATUSEX ( ) { <nl> + 	 dwLength = new DWORD ( size ( ) ) ; <nl> + } <nl> + } ; <nl> } <nl> diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinDef . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> index 468fbdd . . 2289653 100644 <nl> - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> @ @ - 316 , 4 + 316 , 30 @ @ public interface WinDef extends StdCallLibrary { <nl> return " [ ( " + left + " , " + top + " ) ( " + right + " , " + bottom + " ) ] " ; <nl> } <nl> } <nl> + <nl> + 	 / * * <nl> + 	 * 64 - bit unsigned integer . <nl> + 	 * / <nl> + 	 public static class ULONGLONG extends IntegerType { <nl> + 	 	 public ULONGLONG ( ) { <nl> + 	 	 	 this ( 0 ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public ULONGLONG ( long value ) { <nl> + 	 	 	 super ( 8 , value ) ; <nl> + 	 	 } <nl> + 	 } <nl> + 	 <nl> + 	 / * * <nl> + 	 * 64 - bit unsigned integer . <nl> + 	 * / <nl> + 	 public static class DWORDLONG extends IntegerType { <nl> + 	 	 public DWORDLONG ( ) { <nl> + 	 	 	 this ( 0 ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 public DWORDLONG ( long value ) { <nl> + 	 	 	 super ( 8 , value ) ; <nl> + 	 	 } <nl> + 	 } <nl> } <nl> diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinNT . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> index f455042 . . fb354a9 100644 <nl> - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinNT . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ import com . sun . jna . NativeLong ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . PointerType ; <nl> import com . sun . jna . Structure ; <nl> + import com . sun . jna . Union ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> import com . sun . jna . platform . win32 . WinDef . WORD ; <nl> import com . sun . jna . ptr . ByReference ; <nl> @ @ - 785 , 11 + 786 , 51 @ @ public interface WinNT extends StdCallLibrary { <nl> 	 <nl> 	 / * * <nl> 	 * A 64 - bit integer ; <nl> - 	 * TODO : this should be a union and allow direct 64 - bit integer access . <nl> 	 * / <nl> 	 public static class LARGE _ INTEGER extends Structure { <nl> - 	 	 public DWORD LowPart ; <nl> - 	 	 public DWORD HighPart ; 	 	 	 	 	 <nl> + 	 	 public static class ByReference extends LARGE _ INTEGER <nl> + 	 	 	 implements Structure . ByReference { <nl> + <nl> + 	 	 } <nl> + 	 	 <nl> + 	 	 public static class LowHigh extends Structure { <nl> + 	 	 	 public DWORD LowPart ; <nl> + 	 	 	 public DWORD HighPart ; <nl> + 	 	 } <nl> + 	 	 <nl> + 	 	 public static class UNION extends Union { <nl> + 	 	 	 public LowHigh lh ; <nl> + 	 	 	 public long value ; <nl> + 	 	 } <nl> + 	 	 <nl> + 	 	 public UNION u ; <nl> + 	 	 <nl> + 	 	 / * * <nl> + 	 	 * Low DWORD . <nl> + 	 	 * @ return <nl> + 	 	 * DWORD . <nl> + 	 	 * / <nl> + 	 	 public DWORD getLow ( ) { <nl> + 	 	 	 return u . lh . LowPart ; <nl> + 	 	 } <nl> + 	 	 <nl> + 	 	 / * * <nl> + 	 	 * High DWORD . <nl> + 	 	 * @ return <nl> + 	 	 * DWORD . <nl> + 	 	 * / <nl> + 	 	 public DWORD getHigh ( ) { <nl> + 	 	 	 return u . lh . HighPart ; <nl> + 	 	 } <nl> + <nl> + 	 	 / * * <nl> + 	 	 * 64 - bit value . <nl> + 	 	 * @ return <nl> + 	 	 * 64 - bit value . <nl> + 	 	 * / <nl> + 	 	 public long getValue ( ) { <nl> + 	 	 	 return u . value ; <nl> + 	 	 } <nl> 	 } <nl> 	 <nl> 	 / * * <nl> diff - - git a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> index 6d76a14 . . 6da32d3 100644 <nl> - - - a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> + + + b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> @ @ - 19 , 10 + 19 , 12 @ @ import junit . framework . TestCase ; <nl> import com . sun . jna . Native ; <nl> import com . sun . jna . NativeMappedConverter ; <nl> import com . sun . jna . Platform ; <nl> + import com . sun . jna . platform . win32 . WinBase . MEMORYSTATUSEX ; <nl> import com . sun . jna . platform . win32 . WinBase . SYSTEM _ INFO ; <nl> import com . sun . jna . platform . win32 . WinDef . DWORD ; <nl> import com . sun . jna . platform . win32 . WinDef . HWND ; <nl> import com . sun . jna . platform . win32 . WinNT . HANDLE ; <nl> + import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; <nl> import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFO ; <nl> import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> @ @ - 232 , 5 + 234 , 29 @ @ public class Kernel32Test extends TestCase { <nl> 	 	 / / only available under WOW64 <nl> 	 } <nl> } <nl> + <nl> + public void testGlobalMemoryStatusEx ( ) { <nl> + 	 MEMORYSTATUSEX lpBuffer = new MEMORYSTATUSEX ( ) ; <nl> + 	 assertTrue ( Kernel32 . INSTANCE . GlobalMemoryStatusEx ( lpBuffer ) ) ; <nl> + 	 assertTrue ( lpBuffer . ullTotalPhys . longValue ( ) > 0 ) ; <nl> + 	 assertTrue ( lpBuffer . dwMemoryLoad . intValue ( ) > = 0 & & lpBuffer . dwMemoryLoad . intValue ( ) < = 100 ) ; <nl> + 	 assertEquals ( 0 , lpBuffer . ullAvailExtendedVirtual . intValue ( ) ) ; <nl> + } <nl> <nl> + public void testGetLogicalDriveStrings ( ) { <nl> + 	 DWORD dwSize = Kernel32 . INSTANCE . GetLogicalDriveStrings ( new DWORD ( 0 ) , null ) ; <nl> + 	 assertTrue ( dwSize . intValue ( ) > 0 ) ; <nl> + 	 char buf [ ] = new char [ dwSize . intValue ( ) ] ; <nl> + 	 assertTrue ( Kernel32 . INSTANCE . GetLogicalDriveStrings ( dwSize , buf ) . intValue ( ) > 0 ) ; <nl> + } <nl> + <nl> + public void testGetDiskFreeSpaceEx ( ) { <nl> + 	 LARGE _ INTEGER . ByReference lpFreeBytesAvailable = new LARGE _ INTEGER . ByReference ( ) ; <nl> + 	 LARGE _ INTEGER . ByReference lpTotalNumberOfBytes = new LARGE _ INTEGER . ByReference ( ) ; <nl> + 	 LARGE _ INTEGER . ByReference lpTotalNumberOfFreeBytes = new LARGE _ INTEGER . ByReference ( ) ; <nl> + 	 assertTrue ( Kernel32 . INSTANCE . GetDiskFreeSpaceEx ( null , <nl> + 	 	 	 lpFreeBytesAvailable , lpTotalNumberOfBytes , lpTotalNumberOfFreeBytes ) ) ; <nl> + 	 assertTrue ( lpTotalNumberOfFreeBytes . getValue ( ) > 0 ) ; <nl> + 	 assertTrue ( lpTotalNumberOfFreeBytes . getValue ( ) < lpTotalNumberOfBytes . getValue ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32UtilTest . java b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32UtilTest . java <nl> index 54b1e47 . . 0e11fa9 100644 <nl> - - - a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32UtilTest . java <nl> + + + b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32UtilTest . java <nl> @ @ - 12 , 6 + 12 , 8 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 ; <nl> <nl> + import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; <nl> + <nl> import junit . framework . TestCase ; <nl> <nl> / * * <nl> @ @ - 20 , 11 + 22 , 61 @ @ import junit . framework . TestCase ; <nl> public class Kernel32UtilTest extends TestCase { <nl> 	 <nl> public static void main ( String [ ] args ) throws Exception { <nl> - junit . textui . TestRunner . run ( Advapi32UtilTest . class ) ; <nl> System . out . println ( " Computer name : " + Kernel32Util . getComputerName ( ) ) ; <nl> - System . out . println ( " Temp path : " + Kernel32Util . getTempPath ( ) ) ; <nl> + System . out . println ( " Temp path : " + Kernel32Util . getTempPath ( ) ) ; <nl> + / / logical drives <nl> + System . out . println ( " Logical drives : " ) ; <nl> + 	 	 String [ ] logicalDrives = Kernel32Util . getLogicalDriveStrings ( ) ; <nl> + 	 	 for ( String logicalDrive : logicalDrives ) { <nl> + 	 	 	 / / drive type <nl> + 	 	 	 System . out . println ( " " + logicalDrive + " ( " <nl> + 	 	 	 	 	 + Kernel32 . INSTANCE . GetDriveType ( logicalDrive ) + " ) " ) ; <nl> + 	 	 	 / / free space <nl> + 	 	 LARGE _ INTEGER . ByReference lpFreeBytesAvailable = new LARGE _ INTEGER . ByReference ( ) ; <nl> + 	 	 LARGE _ INTEGER . ByReference lpTotalNumberOfBytes = new LARGE _ INTEGER . ByReference ( ) ; <nl> + 	 	 LARGE _ INTEGER . ByReference lpTotalNumberOfFreeBytes = new LARGE _ INTEGER . ByReference ( ) ; <nl> + 	 	 if ( Kernel32 . INSTANCE . GetDiskFreeSpaceEx ( logicalDrive , lpFreeBytesAvailable , lpTotalNumberOfBytes , lpTotalNumberOfFreeBytes ) ) { <nl> + 	 	 	 System . out . println ( " Total : " + formatBytes ( lpTotalNumberOfBytes . getValue ( ) ) ) ; <nl> + 	 	 	 System . out . println ( " Free : " + formatBytes ( lpTotalNumberOfFreeBytes . getValue ( ) ) ) ; <nl> + 	 	 } <nl> + 	 	 } <nl> + <nl> + 	 	 junit . textui . TestRunner . run ( Kernel32UtilTest . class ) ; <nl> } <nl> - 	 <nl> + <nl> + 	 / * * <nl> + 	 * Format bytes . <nl> + 	 * @ param bytes <nl> + 	 * Bytes . <nl> + 	 * @ return <nl> + 	 * Rounded string representation of the byte size . <nl> + 	 * / <nl> + private static String formatBytes ( long bytes ) { <nl> + 	 	 if ( bytes = = 1 ) { / / bytes <nl> + 	 	 	 return String . format ( " % d byte " , bytes ) ; <nl> + 	 	 } else if ( bytes < 1024 ) { / / bytes <nl> + 	 	 	 return String . format ( " % d bytes " , bytes ) ; <nl> + 	 	 } else if ( bytes < 1048576 & & bytes % 1024 = = 0 ) { / / Kb <nl> + 	 	 	 return String . format ( " % . 0f KB " , ( double ) bytes / 1024 ) ; <nl> + 	 	 } else if ( bytes < 1048576 ) { / / Kb <nl> + 	 	 	 return String . format ( " % . 1f KB " , ( double ) bytes / 1024 ) ; <nl> + 	 	 } else if ( bytes % 1048576 = = 0 & & bytes < 1073741824 ) { / / Mb <nl> + 	 	 	 return String . format ( " % . 0f MB " , ( double ) bytes / 1048576 ) ; <nl> + 	 	 } else if ( bytes < 1073741824 ) { / / Mb <nl> + 	 	 	 return String . format ( " % . 1f MB " , ( double ) bytes / 1048576 ) ; <nl> + 	 	 } else if ( bytes % 1073741824 = = 0 & & bytes < 1099511627776L ) { / / GB <nl> + 	 	 	 return String . format ( " % . 0f GB " , ( double ) bytes / 1073741824 ) ; <nl> + 	 	 } else if ( bytes < 1099511627776L ) { <nl> + 	 	 	 return String . format ( " % . 1f GB " , ( double ) bytes / 1073741824 ) ; <nl> + 	 	 } else if ( bytes % 1099511627776L = = 0 & & bytes < 1125899906842624L ) { / / TB <nl> + 	 	 	 return String . format ( " % . 0f TB " , ( double ) bytes / 1099511627776L ) ; <nl> + 	 	 } else if ( bytes < 1125899906842624L ) { <nl> + 	 	 	 return String . format ( " % . 1f TB " , ( double ) bytes / 1099511627776L ) ; <nl> + 	 	 } else { <nl> + 	 	 	 return String . format ( " % d bytes " , bytes ) ; <nl> + 	 	 } <nl> + } <nl> + <nl> 	 public void testGetComputerName ( ) { <nl> 	 	 assertTrue ( Kernel32Util . getComputerName ( ) . length ( ) > 0 ) ; <nl> 	 } <nl> @ @ - 42 , 4 + 94 , 12 @ @ public class Kernel32UtilTest extends TestCase { <nl> 	 public void testGetTempPath ( ) { <nl> 	 	 assertTrue ( Kernel32Util . getTempPath ( ) . length ( ) > 0 ) ; <nl> 	 } <nl> + 	 <nl> + 	 public void testGetLogicalDriveStrings ( ) { <nl> + 	 	 String [ ] logicalDrives = Kernel32Util . getLogicalDriveStrings ( ) ; <nl> + 	 	 assertTrue ( logicalDrives . length > 0 ) ; <nl> + 	 	 for ( String logicalDrive : logicalDrives ) { <nl> + 	 	 	 assertTrue ( logicalDrive . length ( ) > 0 ) ; <nl> + 	 	 } <nl> + 	 } <nl> } <nl> diff - - git a / jnalib / release - notes . html b / jnalib / release - notes . html <nl> index 52b449d . . 50e7082 100755 <nl> - - - a / jnalib / release - notes . html <nl> + + + b / jnalib / release - notes . html <nl> @ @ - 4 , 18 + 4 , 21 @ @ <nl> < ul > <nl> < li > The < code > jna . library . path < / code > property is now re - evaluated whenever a native library is loaded . Previously this value was cached when the JNA classes loaded . <nl> < li > Refactor < code > com . sun . jna . platform . win32 . WINBASE < / code > into < code > WinDef < / code > , < code > WinNT < / code > and < code > BaseTSD < / code > , matching Windows SDK headers . <nl> - < li > Add < code > com . sun . jna . platform . win32 . ObjBase < / code > , < code > com . sun . jna . platform . win32 . Ole32 . CoInitializeEx < / code > , < code > CoUninitialize < / code > , and < code > CoCreateInstance < / code > . <nl> - < li > Add < code > com . sun . jna . platform . win32 . Oleaut32 . SysAllocString < / code > and < code > SysFreeString < / code > . <nl> - < li > Add < code > com . sun . jna . platform . win32 . Secur32 . ImpersonateSecurityContext < / code > and < code > RevertSecurityContext < / code > . <nl> - < li > Add < code > com . sun . jna . platform . win32 . WinNT . WELL _ KNOWN _ SID _ TYPE < / code > , < code > SECURITY _ MAX _ SID _ SIZE < / code > and other related SID - related constants . <nl> - < li > Add < code > com . sun . jna . platform . win32 . Advapi32 . CreateWellKnownSid < / code > and < code > IsWellKnownSid < / code > and < code > com . sun . jna . platform . win32 . Advapi32Util . isWellKnownSid < / code > . <nl> - < li > Add < code > com . sun . jna . platform . win32 . Kernel32 . GetVersion < / code > , < code > GetVersionEx < / code > , < code > GetSystemInfo < / code > , < code > GetNativeSystemInfo < / code > and < code > IsWow64Process < / code > . <nl> - < li > Add < code > com . sun . jna . platform . win32 . User32 . GetSystemMetrics < / code > . <nl> < li > Refactor constants from < code > com . sun . jna . platform . win32 . GDI32 < / code > into < code > WinGDI < / code > , matching Windows SDK headers . <nl> < li > Refactor constants from < code > com . sun . jna . platform . win32 . User32 < / code > into < code > WinUser < / code > , matching Windows SDK headers . <nl> - < li > Add < code > com . sun . jna . platform . win32 . BaseTSD . DWORD _ PTR < / code > . <nl> - < li > Add < code > com . sun . jna . platform . win32 . WinBase . SYSTEM _ INFO < / code > . <nl> - < li > Add < code > com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX < / code > . <nl> + < li > Refactor < code > platform . win32 . WinNT . LARGE _ INTEGER < / code > into a union . <nl> + < li > Add < code > platform . win32 . ObjBase < / code > , < code > com . sun . jna . platform . win32 . Ole32 . CoInitializeEx < / code > , < code > CoUninitialize < / code > , and < code > CoCreateInstance < / code > . <nl> + < li > Add < code > platform . win32 . Oleaut32 . SysAllocString < / code > and < code > SysFreeString < / code > . <nl> + < li > Add < code > platform . win32 . Secur32 . ImpersonateSecurityContext < / code > and < code > RevertSecurityContext < / code > . <nl> + < li > Add < code > platform . win32 . WinNT . WELL _ KNOWN _ SID _ TYPE < / code > , < code > SECURITY _ MAX _ SID _ SIZE < / code > and other related SID - related constants . <nl> + < li > Add < code > platform . win32 . Advapi32 . CreateWellKnownSid < / code > and < code > IsWellKnownSid < / code > and < code > com . sun . jna . platform . win32 . Advapi32Util . isWellKnownSid < / code > . <nl> + < li > Add < code > platform . win32 . Kernel32 . GetVersion < / code > , < code > GetVersionEx < / code > , < code > GetSystemInfo < / code > , < code > GetNativeSystemInfo < / code > , < code > GlobalMemoryStatusEx < / code > , < code > GetLogicalDriveStrings < / code > and < code > IsWow64Process < / code > . <nl> + < li > Add < code > platform . win32 . Kernel32Util . getLogicalDriveStrings < / code > . <nl> + < li > Add < code > platform . win32 . User32 . GetSystemMetrics < / code > . <nl> + < li > Add < code > platform . win32 . BaseTSD . DWORD _ PTR < / code > . <nl> + < li > Add < code > platform . win32 . WinBase . SYSTEM _ INFO < / code > and < code > MEMORYSTATUSEX < / code > . <nl> + < li > Add < code > platform . win32 . WinNT . OSVERSIONINFOEX < / code > , < code > VER < / code > constants . <nl> + < li > Add < code > platform . win32 . WinDef . ULONGLONG < / code > and < code > DWORDLONG < / code > . <nl> < / ul > <nl> < h3 > BugFixes < / h3 > <nl> < ul >

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 index b55c3f2 . . 511ecfb 100755 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32 . java 
 @ @ - 1932 , 7 + 1932 , 7 @ @ public interface Advapi32 extends StdCallLibrary { 
 * 
 * @ param hSCManager A handle to the service control manager 
 * database . This handle is returned by the 
 - * { @ link OpenSCManager } function , and must have 
 + * { @ link # OpenSCManager } function , and must have 
 * the { @ link Winsvc # SC _ MANAGER _ ENUMERATE _ SERVICE } 
 * access right . For more information , see Service 
 * Security and Access Rights . 
 @ @ - 2006 , 14 + 2006 , 14 @ @ public interface Advapi32 extends StdCallLibrary { 
 * @ param lpResumeHandle A pointer to a variable that , on input , 
 * specifies the starting point of enumeration . 
 * You must set this value to zero the first time 
 - * the { @ link EnumServicesStatusEx } function is 
 + * the { @ link # EnumServicesStatusEx } function is 
 * called . On output , this value is zero if the 
 * function succeeds . However , if the function 
 * returns zero and the 
 * { @ link Kernel32 # GetLastError } function returns 
 * { @ link WinError # ERROR _ MORE _ DATA } , this value 
 * indicates the next service entry to be read 
 - * when the { @ link EnumServicesStatusEx } function 
 + * when the { @ link # EnumServicesStatusEx } function 
 * is called to retrieve the additional data . 
 * @ param pszGroupName The load - order group name . If this parameter is 
 * a string , the only services enumerated are 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 index d8d410b . . 7c7abfc 100755 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Advapi32Util . java 
 @ @ - 2575 , 7 + 2575 , 7 @ @ public abstract class Advapi32Util { 
 / * * 
 * @ param fileName path to the file 
 * @ param compact if true compatible ACEs are merged if possible 
 - * @ return 
 + * @ return list of ACEs in the DACL of the referenced file 
 * / 
 	 public static ACE _ HEADER [ ] getFileSecurity ( String fileName , 
 	 	 	 boolean compact ) { 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java 
 index 10d5e55 . . 6e2e599 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinCrypt . java 
 @ @ - 1029 , 7 + 1029 , 8 @ @ public interface WinCrypt { 
 * signer . 
 * @ param hMsgCertStore A handle to the certificate store containing all 
 * the certificates and CRLs in the signed message . 
 - * @ return 
 + * @ return Pointer to a read - only { @ link com . sun . jna . platform . win32 . WinCrypt . CERT _ CONTEXT } 
 + * if a signer certificate is found , { @ code null } if the function fails . 
 * / 
 public CERT _ CONTEXT . ByReference callback ( Pointer pvGetArg , int dwCertEncodingType , 
 CERT _ INFO pSignerId , 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java 
 index 1bf9277 . . 42a999f 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Winsvc . java 
 @ @ - 842 , 7 + 842 , 7 @ @ public interface Winsvc { 
 * / 
 public String lpDisplayName ; 
 / * * 
 - * A { @ link Winsvc # SERVICE _ STATUS } structure that contains status 
 + * A { @ link com . sun . jna . platform . win32 . Winsvc . SERVICE _ STATUS } structure that contains status 
 * information for the lpServiceName service . 
 * / 
 public SERVICE _ STATUS ServiceStatus ;

NEAREST DIFF:
diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32 . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 index b01a11e . . 5c1f15a 100644 
 - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32 . java 
 @ @ - 16 , 11 + 16 , 13 @ @ import java . nio . Buffer ; 
 
 import com . sun . jna . Native ; 
 import com . sun . jna . Pointer ; 
 + import com . sun . jna . platform . win32 . WinBase . MEMORYSTATUSEX ; 
 import com . sun . jna . platform . win32 . WinBase . SYSTEM _ INFO ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 import com . sun . jna . platform . win32 . WinDef . HMODULE ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLEByReference ; 
 + import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; 
 import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFO ; 
 import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX ; 
 import com . sun . jna . ptr . ByReference ; 
 @ @ - 149 , 14 + 151 , 14 @ @ public interface Kernel32 extends StdCallLibrary { 
 / * * 
 * The GetDriveType function determines whether a disk drive is a removable , 
 * fixed , CD - ROM , RAM disk , or network drive . 
 - * @ param rootPathName 
 + * @ param lpRootPathName 
 * Pointer to a null - terminated string that specifies the root directory of 
 * the disk to return information about . A trailing backslash is required . 
 * If this parameter is NULL , the function uses the root of the current directory . 
 * @ return 
 * The return value specifies the type of drive . 
 * / 
 - int GetDriveType ( String rootPathName ) ; 
 + int GetDriveType ( String lpRootPathName ) ; 
 
 / * * 
 * The FormatMessage function formats a message string . The function requires a 
 @ @ - 781 , 4 + 783 , 66 @ @ public interface Kernel32 extends StdCallLibrary { 
 * If the function fails , the return value is zero . To get extended error information , call GetLastError . 
 * / 
 boolean IsWow64Process ( HANDLE hProcess , IntByReference Wow64Process ) ; 
 + 
 + / * * 
 + * Retrieves information about the system ' s current usage of both physical and virtual memory . 
 + * @ param lpBuffer 
 + * A pointer to a MEMORYSTATUSEX structure that receives information about current memory availability . 
 + * @ return 
 + * If the function succeeds , the return value is nonzero . 
 + * If the function fails , the return value is zero . To get extended error information , 
 + * call GetLastError . 
 + * / 
 + boolean GlobalMemoryStatusEx ( MEMORYSTATUSEX lpBuffer ) ; 
 + 
 + / * * 
 + * The GetLogicalDriveStrings function fills a buffer with strings that specify 
 + * valid drives in the system . 
 + * @ param nBufferLength 
 + * Maximum size of the buffer pointed to by lpBuffer , in TCHARs . This size does not include 
 + * the terminating null character . If this parameter is zero , lpBuffer is not used . 
 + * @ param lpBuffer 
 + * Pointer to a buffer that receives a series of null - terminated strings , one for each valid 
 + * drive in the system , plus with an additional null character . Each string is a device name . 
 + * @ return 
 + * If the function succeeds , the return value is the length , in characters , of the strings 
 + * copied to the buffer , not including the terminating null character . Note that an ANSI - ASCII 
 + * null character uses one byte , but a Unicode null character uses two bytes . 
 + * If the buffer is not large enough , the return value is greater than nBufferLength . It is 
 + * the size of the buffer required to hold the drive strings . 
 + * If the function fails , the return value is zero . To get extended error information , use 
 + * the GetLastError function . 
 + * / 
 + DWORD GetLogicalDriveStrings ( DWORD nBufferLength , char [ ] lpBuffer ) ; 
 + 
 + / * * 
 + * The GetDiskFreeSpaceEx function retrieves information about the amount of space that is 
 + * available on a disk volume , which is the total amount of space , the total amount of free 
 + * space , and the total amount of free space available to the user that is associated with 
 + * the calling thread . 
 + * @ param lpDirectoryName 
 + * A pointer to a null - terminated string that specifies a directory on a disk . 
 + * If this parameter is NULL , the function uses the root of the current disk . 
 + * If this parameter is a UNC name , it must include a trailing backslash , for example , 
 + * \ \ MyServer \ MyShare \ . 
 + * This parameter does not have to specify the root directory on a disk . The function 
 + * accepts any directory on a disk . 
 + * @ param lpFreeBytesAvailable 
 + * A pointer to a variable that receives the total number of free bytes on a disk that 
 + * are available to the user who is associated with the calling thread . 
 + * This parameter can be NULL . 
 + * @ param lpTotalNumberOfBytes 
 + * A pointer to a variable that receives the total number of bytes on a disk that are 
 + * available to the user who is associated with the calling thread . 
 + * This parameter can be NULL . 
 + * @ param lpTotalNumberOfFreeBytes 
 + * A pointer to a variable that receives the total number of free bytes on a disk . 
 + * This parameter can be NULL . 
 + * @ return 
 + * If the function succeeds , the return value is nonzero . 
 + * If the function fails , the return value is 0 ( zero ) . To get extended error information , 
 + * call GetLastError . 
 + * / 
 + boolean GetDiskFreeSpaceEx ( String lpDirectoryName , LARGE _ INTEGER . ByReference lpFreeBytesAvailable , 
 + 	 	 LARGE _ INTEGER . ByReference lpTotalNumberOfBytes , LARGE _ INTEGER . ByReference lpTotalNumberOfFreeBytes ) ; 
 } 
 diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java 
 index d5171f3 . . 74c937e 100644 
 - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java 
 + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Kernel32Util . java 
 @ @ - 12 , 6 + 12 , 9 @ @ 
 * / 
 package com . sun . jna . platform . win32 ; 
 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 import com . sun . jna . LastErrorException ; 
 import com . sun . jna . Native ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 @ @ - 90 , 4 + 93 , 35 @ @ public abstract class Kernel32Util { 
 	 } 
 	 return Native . toString ( buffer ) ; 
 	 } 
 + 	 
 + 	 / * * 
 + 	 * Returns valid drives in the system . 
 + 	 * @ return 
 + 	 * An array of valid drives . 
 + 	 * / 
 + 	 public static String [ ] getLogicalDriveStrings ( ) { 
 + 	 DWORD dwSize = Kernel32 . INSTANCE . GetLogicalDriveStrings ( new DWORD ( 0 ) , null ) ; 
 + 	 if ( dwSize . intValue ( ) < = 0 ) { 
 + 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 + 	 } 
 + 	 
 + 	 char buf [ ] = new char [ dwSize . intValue ( ) ] ; 
 + 	 dwSize = Kernel32 . INSTANCE . GetLogicalDriveStrings ( dwSize , buf ) ; 
 + 	 if ( dwSize . intValue ( ) < = 0 ) { 
 + 	 	 throw new Win32Exception ( Kernel32 . INSTANCE . GetLastError ( ) ) ; 
 + 	 } 
 + 
 + 	 List < String > drives = new ArrayList < String > ( ) ; 	 
 + 	 String drive = " " ; 
 + 	 / / the buffer is double - null - terminated 
 + 	 for ( int i = 0 ; i < buf . length - 1 ; i + + ) { 
 + 	 	 if ( buf [ i ] = = 0 ) { 
 + 	 	 	 drives . add ( drive ) ; 
 + 	 	 	 drive = " " ; 
 + 	 	 } else { 
 + 	 	 	 drive + = buf [ i ] ; 
 + 	 	 } 
 + 	 } 
 + 	 return drives . toArray ( new String [ 0 ] ) ; 
 + 	 } 	 
 } 
 diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinBase . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 index b38cbd3 . . 2fd3a76 100644 
 - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinBase . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import com . sun . jna . Union ; 
 import com . sun . jna . platform . win32 . BaseTSD . DWORD _ PTR ; 
 import com . sun . jna . platform . win32 . BaseTSD . ULONG _ PTR ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 + import com . sun . jna . platform . win32 . WinDef . DWORDLONG ; 
 import com . sun . jna . platform . win32 . WinDef . WORD ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 
 @ @ - 315 , 7 + 316 , 12 @ @ public abstract class WinBase { 
 } 
 
 public static final int INFINITE = 0xFFFFFFFF ; 
 - 
 + 
 + / * * 
 + * Contains information about the current computer system . This includes the architecture and 
 + * type of the processor , the number of processors in the system , the page size , and other such 
 + * information . 
 + * / 
 public static class SYSTEM _ INFO extends Structure { 
 	 
 	 public static class PI extends Structure { 
 @ @ - 408 , 4 + 414 , 56 @ @ public abstract class WinBase { 
 	 	 * / 
 	 	 public WORD wProcessorRevision ; 
 } 
 + 
 + / * * 
 + * Contains information about the current state of both physical and virtual memory , including 
 + * extended memory . The GlobalMemoryStatusEx function stores information in this structure . 
 + * / 
 + public static class MEMORYSTATUSEX extends Structure { 
 + 	 / * * 
 + 	 * The size of the structure , in bytes . 
 + 	 * / 
 + public DWORD dwLength ; 
 + / * * 
 + * A number between 0 and 100 that specifies the approximate percentage of physical memory 
 + * that is in use ( 0 indicates no memory use and 100 indicates full memory use ) . 
 + * / 
 + public DWORD dwMemoryLoad ; 
 + / * * 
 + * The amount of actual physical memory , in bytes . 
 + * / 
 + public DWORDLONG ullTotalPhys ; 
 + / * * 
 + * The amount of physical memory currently available , in bytes . This is the amount of physical 
 + * memory that can be immediately reused without having to write its contents to disk first . 
 + * It is the sum of the size of the standby , free , and zero lists . 
 + * / 
 + public DWORDLONG ullAvailPhys ; 
 + / * * 
 + * The current committed memory limit for the system or the current process , whichever is smaller , in bytes . 
 + * / 
 + public DWORDLONG ullTotalPageFile ; 
 + / * * 
 + * The maximum amount of memory the current process can commit , in bytes . This value is equal to or smaller 
 + * than the system - wide available commit value . 
 + * / 
 + public DWORDLONG ullAvailPageFile ; 
 + / * * 
 + * The size of the user - mode portion of the virtual address space of the calling process , in bytes . 
 + * / 
 + public DWORDLONG ullTotalVirtual ; 
 + / * * 
 + * The amount of unreserved and uncommitted memory currently in the user - mode portion of the 
 + * virtual address space of the calling process , in bytes . 
 + * / 
 + public DWORDLONG ullAvailVirtual ; 
 + / * * 
 + * Reserved . This value is always 0 . 
 + * / 
 + public DWORDLONG ullAvailExtendedVirtual ; 
 + 
 + public MEMORYSTATUSEX ( ) { 
 + 	 dwLength = new DWORD ( size ( ) ) ; 
 + } 
 + } ; 
 } 
 diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinDef . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 index 468fbdd . . 2289653 100644 
 - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 @ @ - 316 , 4 + 316 , 30 @ @ public interface WinDef extends StdCallLibrary { 
 return " [ ( " + left + " , " + top + " ) ( " + right + " , " + bottom + " ) ] " ; 
 } 
 } 
 + 
 + 	 / * * 
 + 	 * 64 - bit unsigned integer . 
 + 	 * / 
 + 	 public static class ULONGLONG extends IntegerType { 
 + 	 	 public ULONGLONG ( ) { 
 + 	 	 	 this ( 0 ) ; 
 + 	 	 } 
 + 
 + 	 	 public ULONGLONG ( long value ) { 
 + 	 	 	 super ( 8 , value ) ; 
 + 	 	 } 
 + 	 } 
 + 	 
 + 	 / * * 
 + 	 * 64 - bit unsigned integer . 
 + 	 * / 
 + 	 public static class DWORDLONG extends IntegerType { 
 + 	 	 public DWORDLONG ( ) { 
 + 	 	 	 this ( 0 ) ; 
 + 	 	 } 
 + 
 + 	 	 public DWORDLONG ( long value ) { 
 + 	 	 	 super ( 8 , value ) ; 
 + 	 	 } 
 + 	 } 
 } 
 diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinNT . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 index f455042 . . fb354a9 100644 
 - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / WinNT . java 
 @ @ - 18 , 6 + 18 , 7 @ @ import com . sun . jna . NativeLong ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . PointerType ; 
 import com . sun . jna . Structure ; 
 + import com . sun . jna . Union ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 import com . sun . jna . platform . win32 . WinDef . WORD ; 
 import com . sun . jna . ptr . ByReference ; 
 @ @ - 785 , 11 + 786 , 51 @ @ public interface WinNT extends StdCallLibrary { 
 	 
 	 / * * 
 	 * A 64 - bit integer ; 
 - 	 * TODO : this should be a union and allow direct 64 - bit integer access . 
 	 * / 
 	 public static class LARGE _ INTEGER extends Structure { 
 - 	 	 public DWORD LowPart ; 
 - 	 	 public DWORD HighPart ; 	 	 	 	 	 
 + 	 	 public static class ByReference extends LARGE _ INTEGER 
 + 	 	 	 implements Structure . ByReference { 
 + 
 + 	 	 } 
 + 	 	 
 + 	 	 public static class LowHigh extends Structure { 
 + 	 	 	 public DWORD LowPart ; 
 + 	 	 	 public DWORD HighPart ; 
 + 	 	 } 
 + 	 	 
 + 	 	 public static class UNION extends Union { 
 + 	 	 	 public LowHigh lh ; 
 + 	 	 	 public long value ; 
 + 	 	 } 
 + 	 	 
 + 	 	 public UNION u ; 
 + 	 	 
 + 	 	 / * * 
 + 	 	 * Low DWORD . 
 + 	 	 * @ return 
 + 	 	 * DWORD . 
 + 	 	 * / 
 + 	 	 public DWORD getLow ( ) { 
 + 	 	 	 return u . lh . LowPart ; 
 + 	 	 } 
 + 	 	 
 + 	 	 / * * 
 + 	 	 * High DWORD . 
 + 	 	 * @ return 
 + 	 	 * DWORD . 
 + 	 	 * / 
 + 	 	 public DWORD getHigh ( ) { 
 + 	 	 	 return u . lh . HighPart ; 
 + 	 	 } 
 + 
 + 	 	 / * * 
 + 	 	 * 64 - bit value . 
 + 	 	 * @ return 
 + 	 	 * 64 - bit value . 
 + 	 	 * / 
 + 	 	 public long getValue ( ) { 
 + 	 	 	 return u . value ; 
 + 	 	 } 
 	 } 
 	 
 	 / * * 
 diff - - git a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 index 6d76a14 . . 6da32d3 100644 
 - - - a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 + + + b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 @ @ - 19 , 10 + 19 , 12 @ @ import junit . framework . TestCase ; 
 import com . sun . jna . Native ; 
 import com . sun . jna . NativeMappedConverter ; 
 import com . sun . jna . Platform ; 
 + import com . sun . jna . platform . win32 . WinBase . MEMORYSTATUSEX ; 
 import com . sun . jna . platform . win32 . WinBase . SYSTEM _ INFO ; 
 import com . sun . jna . platform . win32 . WinDef . DWORD ; 
 import com . sun . jna . platform . win32 . WinDef . HWND ; 
 import com . sun . jna . platform . win32 . WinNT . HANDLE ; 
 + import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; 
 import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFO ; 
 import com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX ; 
 import com . sun . jna . ptr . IntByReference ; 
 @ @ - 232 , 5 + 234 , 29 @ @ public class Kernel32Test extends TestCase { 
 	 	 / / only available under WOW64 
 	 } 
 } 
 + 
 + public void testGlobalMemoryStatusEx ( ) { 
 + 	 MEMORYSTATUSEX lpBuffer = new MEMORYSTATUSEX ( ) ; 
 + 	 assertTrue ( Kernel32 . INSTANCE . GlobalMemoryStatusEx ( lpBuffer ) ) ; 
 + 	 assertTrue ( lpBuffer . ullTotalPhys . longValue ( ) > 0 ) ; 
 + 	 assertTrue ( lpBuffer . dwMemoryLoad . intValue ( ) > = 0 & & lpBuffer . dwMemoryLoad . intValue ( ) < = 100 ) ; 
 + 	 assertEquals ( 0 , lpBuffer . ullAvailExtendedVirtual . intValue ( ) ) ; 
 + } 
 
 + public void testGetLogicalDriveStrings ( ) { 
 + 	 DWORD dwSize = Kernel32 . INSTANCE . GetLogicalDriveStrings ( new DWORD ( 0 ) , null ) ; 
 + 	 assertTrue ( dwSize . intValue ( ) > 0 ) ; 
 + 	 char buf [ ] = new char [ dwSize . intValue ( ) ] ; 
 + 	 assertTrue ( Kernel32 . INSTANCE . GetLogicalDriveStrings ( dwSize , buf ) . intValue ( ) > 0 ) ; 
 + } 
 + 
 + public void testGetDiskFreeSpaceEx ( ) { 
 + 	 LARGE _ INTEGER . ByReference lpFreeBytesAvailable = new LARGE _ INTEGER . ByReference ( ) ; 
 + 	 LARGE _ INTEGER . ByReference lpTotalNumberOfBytes = new LARGE _ INTEGER . ByReference ( ) ; 
 + 	 LARGE _ INTEGER . ByReference lpTotalNumberOfFreeBytes = new LARGE _ INTEGER . ByReference ( ) ; 
 + 	 assertTrue ( Kernel32 . INSTANCE . GetDiskFreeSpaceEx ( null , 
 + 	 	 	 lpFreeBytesAvailable , lpTotalNumberOfBytes , lpTotalNumberOfFreeBytes ) ) ; 
 + 	 assertTrue ( lpTotalNumberOfFreeBytes . getValue ( ) > 0 ) ; 
 + 	 assertTrue ( lpTotalNumberOfFreeBytes . getValue ( ) < lpTotalNumberOfBytes . getValue ( ) ) ; 
 + } 
 } 
 diff - - git a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32UtilTest . java b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32UtilTest . java 
 index 54b1e47 . . 0e11fa9 100644 
 - - - a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32UtilTest . java 
 + + + b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Kernel32UtilTest . java 
 @ @ - 12 , 6 + 12 , 8 @ @ 
 * / 
 package com . sun . jna . platform . win32 ; 
 
 + import com . sun . jna . platform . win32 . WinNT . LARGE _ INTEGER ; 
 + 
 import junit . framework . TestCase ; 
 
 / * * 
 @ @ - 20 , 11 + 22 , 61 @ @ import junit . framework . TestCase ; 
 public class Kernel32UtilTest extends TestCase { 
 	 
 public static void main ( String [ ] args ) throws Exception { 
 - junit . textui . TestRunner . run ( Advapi32UtilTest . class ) ; 
 System . out . println ( " Computer name : " + Kernel32Util . getComputerName ( ) ) ; 
 - System . out . println ( " Temp path : " + Kernel32Util . getTempPath ( ) ) ; 
 + System . out . println ( " Temp path : " + Kernel32Util . getTempPath ( ) ) ; 
 + / / logical drives 
 + System . out . println ( " Logical drives : " ) ; 
 + 	 	 String [ ] logicalDrives = Kernel32Util . getLogicalDriveStrings ( ) ; 
 + 	 	 for ( String logicalDrive : logicalDrives ) { 
 + 	 	 	 / / drive type 
 + 	 	 	 System . out . println ( " " + logicalDrive + " ( " 
 + 	 	 	 	 	 + Kernel32 . INSTANCE . GetDriveType ( logicalDrive ) + " ) " ) ; 
 + 	 	 	 / / free space 
 + 	 	 LARGE _ INTEGER . ByReference lpFreeBytesAvailable = new LARGE _ INTEGER . ByReference ( ) ; 
 + 	 	 LARGE _ INTEGER . ByReference lpTotalNumberOfBytes = new LARGE _ INTEGER . ByReference ( ) ; 
 + 	 	 LARGE _ INTEGER . ByReference lpTotalNumberOfFreeBytes = new LARGE _ INTEGER . ByReference ( ) ; 
 + 	 	 if ( Kernel32 . INSTANCE . GetDiskFreeSpaceEx ( logicalDrive , lpFreeBytesAvailable , lpTotalNumberOfBytes , lpTotalNumberOfFreeBytes ) ) { 
 + 	 	 	 System . out . println ( " Total : " + formatBytes ( lpTotalNumberOfBytes . getValue ( ) ) ) ; 
 + 	 	 	 System . out . println ( " Free : " + formatBytes ( lpTotalNumberOfFreeBytes . getValue ( ) ) ) ; 
 + 	 	 } 
 + 	 	 } 
 + 
 + 	 	 junit . textui . TestRunner . run ( Kernel32UtilTest . class ) ; 
 } 
 - 	 
 + 
 + 	 / * * 
 + 	 * Format bytes . 
 + 	 * @ param bytes 
 + 	 * Bytes . 
 + 	 * @ return 
 + 	 * Rounded string representation of the byte size . 
 + 	 * / 
 + private static String formatBytes ( long bytes ) { 
 + 	 	 if ( bytes = = 1 ) { / / bytes 
 + 	 	 	 return String . format ( " % d byte " , bytes ) ; 
 + 	 	 } else if ( bytes < 1024 ) { / / bytes 
 + 	 	 	 return String . format ( " % d bytes " , bytes ) ; 
 + 	 	 } else if ( bytes < 1048576 & & bytes % 1024 = = 0 ) { / / Kb 
 + 	 	 	 return String . format ( " % . 0f KB " , ( double ) bytes / 1024 ) ; 
 + 	 	 } else if ( bytes < 1048576 ) { / / Kb 
 + 	 	 	 return String . format ( " % . 1f KB " , ( double ) bytes / 1024 ) ; 
 + 	 	 } else if ( bytes % 1048576 = = 0 & & bytes < 1073741824 ) { / / Mb 
 + 	 	 	 return String . format ( " % . 0f MB " , ( double ) bytes / 1048576 ) ; 
 + 	 	 } else if ( bytes < 1073741824 ) { / / Mb 
 + 	 	 	 return String . format ( " % . 1f MB " , ( double ) bytes / 1048576 ) ; 
 + 	 	 } else if ( bytes % 1073741824 = = 0 & & bytes < 1099511627776L ) { / / GB 
 + 	 	 	 return String . format ( " % . 0f GB " , ( double ) bytes / 1073741824 ) ; 
 + 	 	 } else if ( bytes < 1099511627776L ) { 
 + 	 	 	 return String . format ( " % . 1f GB " , ( double ) bytes / 1073741824 ) ; 
 + 	 	 } else if ( bytes % 1099511627776L = = 0 & & bytes < 1125899906842624L ) { / / TB 
 + 	 	 	 return String . format ( " % . 0f TB " , ( double ) bytes / 1099511627776L ) ; 
 + 	 	 } else if ( bytes < 1125899906842624L ) { 
 + 	 	 	 return String . format ( " % . 1f TB " , ( double ) bytes / 1099511627776L ) ; 
 + 	 	 } else { 
 + 	 	 	 return String . format ( " % d bytes " , bytes ) ; 
 + 	 	 } 
 + } 
 + 
 	 public void testGetComputerName ( ) { 
 	 	 assertTrue ( Kernel32Util . getComputerName ( ) . length ( ) > 0 ) ; 
 	 } 
 @ @ - 42 , 4 + 94 , 12 @ @ public class Kernel32UtilTest extends TestCase { 
 	 public void testGetTempPath ( ) { 
 	 	 assertTrue ( Kernel32Util . getTempPath ( ) . length ( ) > 0 ) ; 
 	 } 
 + 	 
 + 	 public void testGetLogicalDriveStrings ( ) { 
 + 	 	 String [ ] logicalDrives = Kernel32Util . getLogicalDriveStrings ( ) ; 
 + 	 	 assertTrue ( logicalDrives . length > 0 ) ; 
 + 	 	 for ( String logicalDrive : logicalDrives ) { 
 + 	 	 	 assertTrue ( logicalDrive . length ( ) > 0 ) ; 
 + 	 	 } 
 + 	 } 
 } 
 diff - - git a / jnalib / release - notes . html b / jnalib / release - notes . html 
 index 52b449d . . 50e7082 100755 
 - - - a / jnalib / release - notes . html 
 + + + b / jnalib / release - notes . html 
 @ @ - 4 , 18 + 4 , 21 @ @ 
 < ul > 
 < li > The < code > jna . library . path < / code > property is now re - evaluated whenever a native library is loaded . Previously this value was cached when the JNA classes loaded . 
 < li > Refactor < code > com . sun . jna . platform . win32 . WINBASE < / code > into < code > WinDef < / code > , < code > WinNT < / code > and < code > BaseTSD < / code > , matching Windows SDK headers . 
 - < li > Add < code > com . sun . jna . platform . win32 . ObjBase < / code > , < code > com . sun . jna . platform . win32 . Ole32 . CoInitializeEx < / code > , < code > CoUninitialize < / code > , and < code > CoCreateInstance < / code > . 
 - < li > Add < code > com . sun . jna . platform . win32 . Oleaut32 . SysAllocString < / code > and < code > SysFreeString < / code > . 
 - < li > Add < code > com . sun . jna . platform . win32 . Secur32 . ImpersonateSecurityContext < / code > and < code > RevertSecurityContext < / code > . 
 - < li > Add < code > com . sun . jna . platform . win32 . WinNT . WELL _ KNOWN _ SID _ TYPE < / code > , < code > SECURITY _ MAX _ SID _ SIZE < / code > and other related SID - related constants . 
 - < li > Add < code > com . sun . jna . platform . win32 . Advapi32 . CreateWellKnownSid < / code > and < code > IsWellKnownSid < / code > and < code > com . sun . jna . platform . win32 . Advapi32Util . isWellKnownSid < / code > . 
 - < li > Add < code > com . sun . jna . platform . win32 . Kernel32 . GetVersion < / code > , < code > GetVersionEx < / code > , < code > GetSystemInfo < / code > , < code > GetNativeSystemInfo < / code > and < code > IsWow64Process < / code > . 
 - < li > Add < code > com . sun . jna . platform . win32 . User32 . GetSystemMetrics < / code > . 
 < li > Refactor constants from < code > com . sun . jna . platform . win32 . GDI32 < / code > into < code > WinGDI < / code > , matching Windows SDK headers . 
 < li > Refactor constants from < code > com . sun . jna . platform . win32 . User32 < / code > into < code > WinUser < / code > , matching Windows SDK headers . 
 - < li > Add < code > com . sun . jna . platform . win32 . BaseTSD . DWORD _ PTR < / code > . 
 - < li > Add < code > com . sun . jna . platform . win32 . WinBase . SYSTEM _ INFO < / code > . 
 - < li > Add < code > com . sun . jna . platform . win32 . WinNT . OSVERSIONINFOEX < / code > . 
 + < li > Refactor < code > platform . win32 . WinNT . LARGE _ INTEGER < / code > into a union . 
 + < li > Add < code > platform . win32 . ObjBase < / code > , < code > com . sun . jna . platform . win32 . Ole32 . CoInitializeEx < / code > , < code > CoUninitialize < / code > , and < code > CoCreateInstance < / code > . 
 + < li > Add < code > platform . win32 . Oleaut32 . SysAllocString < / code > and < code > SysFreeString < / code > . 
 + < li > Add < code > platform . win32 . Secur32 . ImpersonateSecurityContext < / code > and < code > RevertSecurityContext < / code > . 
 + < li > Add < code > platform . win32 . WinNT . WELL _ KNOWN _ SID _ TYPE < / code > , < code > SECURITY _ MAX _ SID _ SIZE < / code > and other related SID - related constants . 
 + < li > Add < code > platform . win32 . Advapi32 . CreateWellKnownSid < / code > and < code > IsWellKnownSid < / code > and < code > com . sun . jna . platform . win32 . Advapi32Util . isWellKnownSid < / code > . 
 + < li > Add < code > platform . win32 . Kernel32 . GetVersion < / code > , < code > GetVersionEx < / code > , < code > GetSystemInfo < / code > , < code > GetNativeSystemInfo < / code > , < code > GlobalMemoryStatusEx < / code > , < code > GetLogicalDriveStrings < / code > and < code > IsWow64Process < / code > . 
 + < li > Add < code > platform . win32 . Kernel32Util . getLogicalDriveStrings < / code > . 
 + < li > Add < code > platform . win32 . User32 . GetSystemMetrics < / code > . 
 + < li > Add < code > platform . win32 . BaseTSD . DWORD _ PTR < / code > . 
 + < li > Add < code > platform . win32 . WinBase . SYSTEM _ INFO < / code > and < code > MEMORYSTATUSEX < / code > . 
 + < li > Add < code > platform . win32 . WinNT . OSVERSIONINFOEX < / code > , < code > VER < / code > constants . 
 + < li > Add < code > platform . win32 . WinDef . ULONGLONG < / code > and < code > DWORDLONG < / code > . 
 < / ul > 
 < h3 > BugFixes < / h3 > 
 < ul >
