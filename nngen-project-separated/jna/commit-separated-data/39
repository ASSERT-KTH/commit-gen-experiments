BLEU SCORE: 0.02383853510228548

TEST MSG: Update CHANGE . md and simplify and enhance NativeMappedTest
GENERATED MSG: Allow enums to implement NativeMapped

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 2467a54 . . bfa1bba 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 31 , 10 + 31 , 10 @ @ Features <nl> * [ # 997 ] ( https : / / github . com / java - native - access / jna / issues / 997 ) : Added ` Sysinfo ` structure and function to ` c . s . j . platform . linux . LibC ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . <nl> * [ # 1001 ] ( https : / / github . com / java - native - access / jna / pull / 1001 ) : Added overloads to ` c . s . j . platform . win32 . Advapi32Util ` methods which allow the caller to specify ` samDesiredExtra ` to request additional registry key security and access rights - [ @ camw ] ( https : / / github . com / camw ) . <nl> * [ # 1007 ] ( https : / / github . com / java - native - access / jna / pull / 1007 ) : Added OSGi export of Solaris package - [ @ swimmesberger ] ( https : / / github . com / swimmesberger ) . <nl> + * [ # 1003 ] ( https : / / github . com / java - native - access / jna / pull / 1003 ) : Allow ` NativeMapped ` to be used with enums - [ @ koraktor ] ( https : / / github . com / koraktor ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> - * [ # 1003 ] ( https : / / github . com / java - native - access / jna / pull / 1003 ) : Allow ` NativeMapped ` to be used with enums - [ @ koraktor ] ( https : / / github . com / koraktor ) <nl> * [ # 652 ] ( https : / / github . com / java - native - access / jna / issues / 652 ) : Dead Lock in class initialization - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 843 ] ( https : / / github . com / java - native - access / jna / pull / 843 ) : Correctly bind ` com . sun . jna . platform . win32 . SecBufferDesc ` and add convenience binding as ` com . sun . jna . platform . win32 . SspiUtil . ManagedSecBufferDesc ` . Bind SSPI functions ` InitializeSecurityContext ` , ` AcceptSecurityContext ` , ` QueryCredentialsAttributes ` , ` QuerySecurityPackageInfo ` , ` EncryptMessage ` , ` DecryptMessage ` , ` MakeSignature ` , ` VerifySignature ` in ` com . sun . jna . platform . win32 . Secur32 ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 863 ] ( https : / / github . com / java - native - access / jna / pull / 863 ) : Fix ARM softfloat / hardfloat detection by modifying armSoftFloat condition in ELFAnalyser . Before this fix a softfloat binary could be misdetected as hardfloat . - [ @ kunkun26 ] ( https : / / github . com / kunkun26 ) . <nl> diff - - git a / test / com / sun / jna / NativeMappedTestClass . java b / test / com / sun / jna / NativeMappedTestClass . java <nl> deleted file mode 100644 <nl> index 74e12f9 . . 0000000 <nl> - - - a / test / com / sun / jna / NativeMappedTestClass . java <nl> + + + / dev / null <nl> @ @ - 1 , 26 + 0 , 0 @ @ <nl> - package com . sun . jna ; <nl> - <nl> - class NativeMappedTestClass implements NativeMapped { <nl> - <nl> - private String name ; <nl> - <nl> - public NativeMappedTestClass ( ) { } <nl> - <nl> - @ Override <nl> - public Object fromNative ( Object nativeValue , FromNativeContext context ) { <nl> - NativeMappedTestClass object = new NativeMappedTestClass ( ) ; <nl> - object . name = ( String ) nativeValue ; <nl> - <nl> - return object ; <nl> - } <nl> - <nl> - @ Override <nl> - public Object toNative ( ) { <nl> - return name ; <nl> - } <nl> - <nl> - @ Override <nl> - public Class < ? > nativeType ( ) { <nl> - return String . class ; <nl> - } <nl> - } <nl> diff - - git a / test / com / sun / jna / NativedMappedConverterTest . java b / test / com / sun / jna / NativedMappedConverterTest . java <nl> deleted file mode 100644 <nl> index 0f72b2f . . 0000000 <nl> - - - a / test / com / sun / jna / NativedMappedConverterTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 37 + 0 , 0 @ @ <nl> - package com . sun . jna ; <nl> - <nl> - import junit . framework . TestCase ; <nl> - <nl> - public class NativedMappedConverterTest extends TestCase { <nl> - <nl> - public void testDefaultValueForClass ( ) { <nl> - NativeMappedConverter converter = new NativeMappedConverter ( NativeMappedTestClass . class ) ; <nl> - <nl> - assertTrue ( converter . defaultValue ( ) instanceof NativeMappedTestClass ) ; <nl> - } <nl> - <nl> - public void testDefaultValueForEnum ( ) { <nl> - NativeMappedConverter converter = new NativeMappedConverter ( TestEnum . class ) ; <nl> - <nl> - assertSame ( converter . defaultValue ( ) , TestEnum . VALUE1 ) ; <nl> - } <nl> - <nl> - private enum TestEnum implements NativeMapped { VALUE1 , VALUE2 ; <nl> - <nl> - @ Override <nl> - public Object fromNative ( Object nativeValue , FromNativeContext context ) { <nl> - return values ( ) [ ( Integer ) nativeValue ] ; <nl> - } <nl> - <nl> - @ Override <nl> - public Object toNative ( ) { <nl> - return ordinal ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Class < ? > nativeType ( ) { <nl> - return Integer . class ; <nl> - } <nl> - } <nl> - <nl> - } <nl> diff - - git a / test / com / sun / jna / NativedMappedTest . java b / test / com / sun / jna / NativedMappedTest . java <nl> new file mode 100644 <nl> index 0000000 . . 357f6b1 <nl> - - - / dev / null <nl> + + + b / test / com / sun / jna / NativedMappedTest . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + / * Copyright ( c ) 2018 Sebastian Staudt , Matthias Bl Ã¤ sing , All Rights Reserved <nl> + * <nl> + * The contents of this file is dual - licensed under 2 <nl> + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and <nl> + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . <nl> + * <nl> + * You can freely decide which license you want to apply to <nl> + * the project . <nl> + * <nl> + * You may obtain a copy of the LGPL License at : <nl> + * <nl> + * http : / / www . gnu . org / licenses / licenses . html <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " LGPL2 . 1 " . <nl> + * <nl> + * You may obtain a copy of the Apache License at : <nl> + * <nl> + * http : / / www . apache . org / licenses / <nl> + * <nl> + * A copy is also included in the downloadable source code package <nl> + * containing JNA , in file " AL2 . 0 " . <nl> + * / <nl> + package com . sun . jna ; <nl> + <nl> + import junit . framework . TestCase ; <nl> + import static junit . framework . TestCase . assertEquals ; <nl> + <nl> + public class NativedMappedTest extends TestCase { <nl> + <nl> + public void testDefaultValueForClass ( ) { <nl> + NativeMappedConverter converter = new NativeMappedConverter ( NativeMappedTestClass . class ) ; <nl> + <nl> + assertTrue ( converter . defaultValue ( ) instanceof NativeMappedTestClass ) ; <nl> + } <nl> + <nl> + public void testDefaultValueForEnum ( ) { <nl> + NativeMappedConverter converter = new NativeMappedConverter ( TestEnum . class ) ; <nl> + <nl> + assertSame ( converter . defaultValue ( ) , TestEnum . VALUE1 ) ; <nl> + } <nl> + <nl> + public static interface EnumerationTestLibrary extends Library { <nl> + TestEnum returnInt32Argument ( TestEnum arg ) ; <nl> + <nl> + @ Structure . FieldOrder ( { " field " } ) <nl> + class MinTestStructure extends Structure { <nl> + public TestEnum field ; <nl> + } <nl> + MinTestStructure testStructurePointerArgument ( MinTestStructure s ) ; <nl> + } <nl> + <nl> + public void testEnumConversion ( ) throws Exception { <nl> + EnumerationTestLibrary lib = Native . load ( " testlib " , EnumerationTestLibrary . class ) ; <nl> + assertEquals ( " Enumeration improperly converted " , TestEnum . VALUE1 , lib . returnInt32Argument ( TestEnum . VALUE1 ) ) ; <nl> + assertEquals ( " Enumeration improperly converted " , TestEnum . VALUE2 , lib . returnInt32Argument ( TestEnum . VALUE2 ) ) ; <nl> + EnumerationTestLibrary . MinTestStructure struct = new EnumerationTestLibrary . MinTestStructure ( ) ; <nl> + struct . field = TestEnum . VALUE1 ; <nl> + assertEquals ( " Enumeration in structure improperly converted " , TestEnum . VALUE1 , lib . testStructurePointerArgument ( struct ) . field ) ; <nl> + struct . field = TestEnum . VALUE2 ; <nl> + assertEquals ( " Enumeration in structure improperly converted " , TestEnum . VALUE2 , lib . testStructurePointerArgument ( struct ) . field ) ; <nl> + } <nl> + <nl> + public enum TestEnum implements NativeMapped { <nl> + VALUE1 , VALUE2 ; <nl> + <nl> + @ Override <nl> + public Object fromNative ( Object nativeValue , FromNativeContext context ) { <nl> + return values ( ) [ ( Integer ) nativeValue ] ; <nl> + } <nl> + <nl> + @ Override <nl> + public Object toNative ( ) { <nl> + return ordinal ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Class < ? > nativeType ( ) { <nl> + return Integer . class ; <nl> + } <nl> + } <nl> + <nl> + public static class NativeMappedTestClass implements NativeMapped { <nl> + <nl> + private String name ; <nl> + <nl> + public NativeMappedTestClass ( ) { <nl> + } <nl> + <nl> + @ Override <nl> + public Object fromNative ( Object nativeValue , FromNativeContext context ) { <nl> + NativeMappedTestClass object = new NativeMappedTestClass ( ) ; <nl> + object . name = ( String ) nativeValue ; <nl> + <nl> + return object ; <nl> + } <nl> + <nl> + @ Override <nl> + public Object toNative ( ) { <nl> + return name ; <nl> + } <nl> + <nl> + @ Override <nl> + public Class < ? > nativeType ( ) { <nl> + return String . class ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 2467a54 . . bfa1bba 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 31 , 10 + 31 , 10 @ @ Features 
 * [ # 997 ] ( https : / / github . com / java - native - access / jna / issues / 997 ) : Added ` Sysinfo ` structure and function to ` c . s . j . platform . linux . LibC ` - [ @ dbwiddis ] ( https : / / github . com / dbwiddis ) . 
 * [ # 1001 ] ( https : / / github . com / java - native - access / jna / pull / 1001 ) : Added overloads to ` c . s . j . platform . win32 . Advapi32Util ` methods which allow the caller to specify ` samDesiredExtra ` to request additional registry key security and access rights - [ @ camw ] ( https : / / github . com / camw ) . 
 * [ # 1007 ] ( https : / / github . com / java - native - access / jna / pull / 1007 ) : Added OSGi export of Solaris package - [ @ swimmesberger ] ( https : / / github . com / swimmesberger ) . 
 + * [ # 1003 ] ( https : / / github . com / java - native - access / jna / pull / 1003 ) : Allow ` NativeMapped ` to be used with enums - [ @ koraktor ] ( https : / / github . com / koraktor ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 - * [ # 1003 ] ( https : / / github . com / java - native - access / jna / pull / 1003 ) : Allow ` NativeMapped ` to be used with enums - [ @ koraktor ] ( https : / / github . com / koraktor ) 
 * [ # 652 ] ( https : / / github . com / java - native - access / jna / issues / 652 ) : Dead Lock in class initialization - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 843 ] ( https : / / github . com / java - native - access / jna / pull / 843 ) : Correctly bind ` com . sun . jna . platform . win32 . SecBufferDesc ` and add convenience binding as ` com . sun . jna . platform . win32 . SspiUtil . ManagedSecBufferDesc ` . Bind SSPI functions ` InitializeSecurityContext ` , ` AcceptSecurityContext ` , ` QueryCredentialsAttributes ` , ` QuerySecurityPackageInfo ` , ` EncryptMessage ` , ` DecryptMessage ` , ` MakeSignature ` , ` VerifySignature ` in ` com . sun . jna . platform . win32 . Secur32 ` - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 863 ] ( https : / / github . com / java - native - access / jna / pull / 863 ) : Fix ARM softfloat / hardfloat detection by modifying armSoftFloat condition in ELFAnalyser . Before this fix a softfloat binary could be misdetected as hardfloat . - [ @ kunkun26 ] ( https : / / github . com / kunkun26 ) . 
 diff - - git a / test / com / sun / jna / NativeMappedTestClass . java b / test / com / sun / jna / NativeMappedTestClass . java 
 deleted file mode 100644 
 index 74e12f9 . . 0000000 
 - - - a / test / com / sun / jna / NativeMappedTestClass . java 
 + + + / dev / null 
 @ @ - 1 , 26 + 0 , 0 @ @ 
 - package com . sun . jna ; 
 - 
 - class NativeMappedTestClass implements NativeMapped { 
 - 
 - private String name ; 
 - 
 - public NativeMappedTestClass ( ) { } 
 - 
 - @ Override 
 - public Object fromNative ( Object nativeValue , FromNativeContext context ) { 
 - NativeMappedTestClass object = new NativeMappedTestClass ( ) ; 
 - object . name = ( String ) nativeValue ; 
 - 
 - return object ; 
 - } 
 - 
 - @ Override 
 - public Object toNative ( ) { 
 - return name ; 
 - } 
 - 
 - @ Override 
 - public Class < ? > nativeType ( ) { 
 - return String . class ; 
 - } 
 - } 
 diff - - git a / test / com / sun / jna / NativedMappedConverterTest . java b / test / com / sun / jna / NativedMappedConverterTest . java 
 deleted file mode 100644 
 index 0f72b2f . . 0000000 
 - - - a / test / com / sun / jna / NativedMappedConverterTest . java 
 + + + / dev / null 
 @ @ - 1 , 37 + 0 , 0 @ @ 
 - package com . sun . jna ; 
 - 
 - import junit . framework . TestCase ; 
 - 
 - public class NativedMappedConverterTest extends TestCase { 
 - 
 - public void testDefaultValueForClass ( ) { 
 - NativeMappedConverter converter = new NativeMappedConverter ( NativeMappedTestClass . class ) ; 
 - 
 - assertTrue ( converter . defaultValue ( ) instanceof NativeMappedTestClass ) ; 
 - } 
 - 
 - public void testDefaultValueForEnum ( ) { 
 - NativeMappedConverter converter = new NativeMappedConverter ( TestEnum . class ) ; 
 - 
 - assertSame ( converter . defaultValue ( ) , TestEnum . VALUE1 ) ; 
 - } 
 - 
 - private enum TestEnum implements NativeMapped { VALUE1 , VALUE2 ; 
 - 
 - @ Override 
 - public Object fromNative ( Object nativeValue , FromNativeContext context ) { 
 - return values ( ) [ ( Integer ) nativeValue ] ; 
 - } 
 - 
 - @ Override 
 - public Object toNative ( ) { 
 - return ordinal ( ) ; 
 - } 
 - 
 - @ Override 
 - public Class < ? > nativeType ( ) { 
 - return Integer . class ; 
 - } 
 - } 
 - 
 - } 
 diff - - git a / test / com / sun / jna / NativedMappedTest . java b / test / com / sun / jna / NativedMappedTest . java 
 new file mode 100644 
 index 0000000 . . 357f6b1 
 - - - / dev / null 
 + + + b / test / com / sun / jna / NativedMappedTest . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + / * Copyright ( c ) 2018 Sebastian Staudt , Matthias Bl Ã¤ sing , All Rights Reserved 
 + * 
 + * The contents of this file is dual - licensed under 2 
 + * alternative Open Source / Free licenses : LGPL 2 . 1 or later and 
 + * Apache License 2 . 0 . ( starting with JNA version 4 . 0 . 0 ) . 
 + * 
 + * You can freely decide which license you want to apply to 
 + * the project . 
 + * 
 + * You may obtain a copy of the LGPL License at : 
 + * 
 + * http : / / www . gnu . org / licenses / licenses . html 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " LGPL2 . 1 " . 
 + * 
 + * You may obtain a copy of the Apache License at : 
 + * 
 + * http : / / www . apache . org / licenses / 
 + * 
 + * A copy is also included in the downloadable source code package 
 + * containing JNA , in file " AL2 . 0 " . 
 + * / 
 + package com . sun . jna ; 
 + 
 + import junit . framework . TestCase ; 
 + import static junit . framework . TestCase . assertEquals ; 
 + 
 + public class NativedMappedTest extends TestCase { 
 + 
 + public void testDefaultValueForClass ( ) { 
 + NativeMappedConverter converter = new NativeMappedConverter ( NativeMappedTestClass . class ) ; 
 + 
 + assertTrue ( converter . defaultValue ( ) instanceof NativeMappedTestClass ) ; 
 + } 
 + 
 + public void testDefaultValueForEnum ( ) { 
 + NativeMappedConverter converter = new NativeMappedConverter ( TestEnum . class ) ; 
 + 
 + assertSame ( converter . defaultValue ( ) , TestEnum . VALUE1 ) ; 
 + } 
 + 
 + public static interface EnumerationTestLibrary extends Library { 
 + TestEnum returnInt32Argument ( TestEnum arg ) ; 
 + 
 + @ Structure . FieldOrder ( { " field " } ) 
 + class MinTestStructure extends Structure { 
 + public TestEnum field ; 
 + } 
 + MinTestStructure testStructurePointerArgument ( MinTestStructure s ) ; 
 + } 
 + 
 + public void testEnumConversion ( ) throws Exception { 
 + EnumerationTestLibrary lib = Native . load ( " testlib " , EnumerationTestLibrary . class ) ; 
 + assertEquals ( " Enumeration improperly converted " , TestEnum . VALUE1 , lib . returnInt32Argument ( TestEnum . VALUE1 ) ) ; 
 + assertEquals ( " Enumeration improperly converted " , TestEnum . VALUE2 , lib . returnInt32Argument ( TestEnum . VALUE2 ) ) ; 
 + EnumerationTestLibrary . MinTestStructure struct = new EnumerationTestLibrary . MinTestStructure ( ) ; 
 + struct . field = TestEnum . VALUE1 ; 
 + assertEquals ( " Enumeration in structure improperly converted " , TestEnum . VALUE1 , lib . testStructurePointerArgument ( struct ) . field ) ; 
 + struct . field = TestEnum . VALUE2 ; 
 + assertEquals ( " Enumeration in structure improperly converted " , TestEnum . VALUE2 , lib . testStructurePointerArgument ( struct ) . field ) ; 
 + } 
 + 
 + public enum TestEnum implements NativeMapped { 
 + VALUE1 , VALUE2 ; 
 + 
 + @ Override 
 + public Object fromNative ( Object nativeValue , FromNativeContext context ) { 
 + return values ( ) [ ( Integer ) nativeValue ] ; 
 + } 
 + 
 + @ Override 
 + public Object toNative ( ) { 
 + return ordinal ( ) ; 
 + } 
 + 
 + @ Override 
 + public Class < ? > nativeType ( ) { 
 + return Integer . class ; 
 + } 
 + } 
 + 
 + public static class NativeMappedTestClass implements NativeMapped { 
 + 
 + private String name ; 
 + 
 + public NativeMappedTestClass ( ) { 
 + } 
 + 
 + @ Override 
 + public Object fromNative ( Object nativeValue , FromNativeContext context ) { 
 + NativeMappedTestClass object = new NativeMappedTestClass ( ) ; 
 + object . name = ( String ) nativeValue ; 
 + 
 + return object ; 
 + } 
 + 
 + @ Override 
 + public Object toNative ( ) { 
 + return name ; 
 + } 
 + 
 + @ Override 
 + public Class < ? > nativeType ( ) { 
 + return String . class ; 
 + } 
 + } 
 + }

NEAREST DIFF:
ELIMINATEDSENTENCE
