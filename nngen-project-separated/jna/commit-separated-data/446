BLEU SCORE: 0.0156963464356626

TEST MSG: add CoInit constants
GENERATED MSG: Added Sspi . java , ported from sspi . h .

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java <nl> index cfed154 . . 40f572a 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java <nl> @ @ - 38 , 127 + 38 , 127 @ @ import com . sun . jna . ptr . PointerByReference ; <nl> * / <nl> public class IDispatch extends IUnknown { <nl> <nl> - 	 / * * <nl> - 	 * The Class ByReference . <nl> - 	 * / <nl> - 	 public static class ByReference extends IDispatch implements <nl> - 	 	 	 Structure . ByReference { <nl> - 	 } <nl> - <nl> - 	 / * * The Constant IID _ IDispatch . * / <nl> - 	 public final static IID IID _ IDispatch = new IID ( <nl> - 	 	 	 " 00020400 - 0000 - 0000 - C000 - 000000000046 " ) ; <nl> - <nl> - 	 / * * <nl> - 	 * Instantiates a new i dispatch . <nl> - 	 * / <nl> - 	 public IDispatch ( ) { <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Instantiates a new i dispatch . <nl> - 	 * <nl> - 	 * @ param pvInstance <nl> - 	 * the pv instance <nl> - 	 * / <nl> - 	 public IDispatch ( Pointer pvInstance ) { <nl> - 	 	 super ( pvInstance ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Gets the type info count . <nl> - 	 * <nl> - 	 * @ param pctinfo <nl> - 	 * the pctinfo <nl> - 	 * @ return the hresult <nl> - 	 * / <nl> - 	 public HRESULT GetTypeInfoCount ( IntByReference pctinfo ) { <nl> - 	 	 Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; <nl> - 	 	 Function func = Function . getFunction ( vptr . getPointer ( 12 ) ) ; <nl> - 	 	 int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , pctinfo } ) ; <nl> - <nl> - 	 	 return new HRESULT ( hr ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Gets the type info . <nl> - 	 * <nl> - 	 * @ param iTInfo <nl> - 	 * the i t info <nl> - 	 * @ param lcid <nl> - 	 * the lcid <nl> - 	 * @ param ppTInfo <nl> - 	 * the pp t info <nl> - 	 * @ return the hresult <nl> - 	 * / <nl> - 	 public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , <nl> - 	 	 	 PointerByReference ppTInfo ) { <nl> - 	 	 Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; <nl> - 	 	 Function func = Function . getFunction ( vptr . getPointer ( 16 ) ) ; <nl> - 	 	 int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , iTInfo , lcid , <nl> - 	 	 	 	 ppTInfo } ) ; <nl> - <nl> - 	 	 return new HRESULT ( hr ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Gets the i ds of names . <nl> - 	 * <nl> - 	 * @ param riid <nl> - 	 * the riid <nl> - 	 * @ param rgszNames <nl> - 	 * the rgsz names <nl> - 	 * @ param cNames <nl> - 	 * the c names <nl> - 	 * @ param lcid <nl> - 	 * the lcid <nl> - 	 * @ param rgDispId <nl> - 	 * the rg disp id <nl> - 	 * @ return the hresult <nl> - 	 * / <nl> - 	 public HRESULT GetIDsOfNames ( IID riid , WString [ ] rgszNames , int cNames , <nl> - 	 	 	 LCID lcid , DISPIDByReference rgDispId ) { <nl> - <nl> - 	 	 Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; <nl> - 	 	 Function func = Function . getFunction ( vptr . getPointer ( 20 ) ) ; <nl> - 	 	 int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , riid , <nl> - 	 	 	 	 rgszNames , cNames , lcid , rgDispId } ) ; <nl> - <nl> - 	 	 return new HRESULT ( hr ) ; <nl> - 	 } <nl> - <nl> - 	 / * * <nl> - 	 * Invoke . <nl> - 	 * <nl> - 	 * @ param dispIdMember <nl> - 	 * the disp id member <nl> - 	 * @ param riid <nl> - 	 * the riid <nl> - 	 * @ param lcid <nl> - 	 * the lcid <nl> - 	 * @ param wFlags <nl> - 	 * the w flags <nl> - 	 * @ param pDispParams <nl> - 	 * the disp params <nl> - 	 * @ param pVarResult <nl> - 	 * the var result <nl> - 	 * @ param pExcepInfo <nl> - 	 * the excep info <nl> - 	 * @ param puArgErr <nl> - 	 * the pu arg err <nl> - 	 * @ return the hresult <nl> - 	 * / <nl> - 	 public HRESULT Invoke ( DISPID dispIdMember , IID riid , LCID lcid , <nl> - 	 	 	 DISPID wFlags , DISPPARAMS pDispParams , <nl> - 	 	 	 VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> - 	 	 	 IntByReference puArgErr ) { <nl> - <nl> - 	 	 Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; <nl> - 	 	 Function func = Function . getFunction ( vptr . getPointer ( 24 ) ) ; <nl> - 	 	 int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , dispIdMember , <nl> - 	 	 	 	 riid , lcid , wFlags , pDispParams , pVarResult , pExcepInfo , <nl> - 	 	 	 	 puArgErr } ) ; <nl> - <nl> - 	 	 return new HRESULT ( hr ) ; <nl> - 	 } <nl> + / * * <nl> + * The Class ByReference . <nl> + * / <nl> + public static class ByReference extends IDispatch implements <nl> + Structure . ByReference { <nl> + } <nl> + <nl> + / * * The Constant IID _ IDispatch . * / <nl> + public final static IID IID _ IDispatch = new IID ( <nl> + " 00020400 - 0000 - 0000 - C000 - 000000000046 " ) ; <nl> + <nl> + / * * <nl> + * Instantiates a new i dispatch . <nl> + * / <nl> + public IDispatch ( ) { <nl> + } <nl> + <nl> + / * * <nl> + * Instantiates a new i dispatch . <nl> + * <nl> + * @ param pvInstance <nl> + * the pv instance <nl> + * / <nl> + public IDispatch ( Pointer pvInstance ) { <nl> + super ( pvInstance ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets the type info count . <nl> + * <nl> + * @ param pctinfo <nl> + * the pctinfo <nl> + * @ return the hresult <nl> + * / <nl> + public HRESULT GetTypeInfoCount ( IntByReference pctinfo ) { <nl> + Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; <nl> + Function func = Function . getFunction ( vptr . getPointer ( 12 ) ) ; <nl> + int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , pctinfo } ) ; <nl> + <nl> + return new HRESULT ( hr ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets the type info . <nl> + * <nl> + * @ param iTInfo <nl> + * the i t info <nl> + * @ param lcid <nl> + * the lcid <nl> + * @ param ppTInfo <nl> + * the pp t info <nl> + * @ return the hresult <nl> + * / <nl> + public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , <nl> + PointerByReference ppTInfo ) { <nl> + Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; <nl> + Function func = Function . getFunction ( vptr . getPointer ( 16 ) ) ; <nl> + int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , iTInfo , lcid , <nl> + ppTInfo } ) ; <nl> + <nl> + return new HRESULT ( hr ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Gets the i ds of names . <nl> + * <nl> + * @ param riid <nl> + * the riid <nl> + * @ param rgszNames <nl> + * the rgsz names <nl> + * @ param cNames <nl> + * the c names <nl> + * @ param lcid <nl> + * the lcid <nl> + * @ param rgDispId <nl> + * the rg disp id <nl> + * @ return the hresult <nl> + * / <nl> + public HRESULT GetIDsOfNames ( IID riid , WString [ ] rgszNames , int cNames , <nl> + LCID lcid , DISPIDByReference rgDispId ) { <nl> + <nl> + Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; <nl> + Function func = Function . getFunction ( vptr . getPointer ( 20 ) ) ; <nl> + int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , riid , <nl> + rgszNames , cNames , lcid , rgDispId } ) ; <nl> + <nl> + return new HRESULT ( hr ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Invoke . <nl> + * <nl> + * @ param dispIdMember <nl> + * the disp id member <nl> + * @ param riid <nl> + * the riid <nl> + * @ param lcid <nl> + * the lcid <nl> + * @ param wFlags <nl> + * the w flags <nl> + * @ param pDispParams <nl> + * the disp params <nl> + * @ param pVarResult <nl> + * the var result <nl> + * @ param pExcepInfo <nl> + * the excep info <nl> + * @ param puArgErr <nl> + * the pu arg err <nl> + * @ return the hresult <nl> + * / <nl> + public HRESULT Invoke ( DISPID dispIdMember , IID riid , LCID lcid , <nl> + DISPID wFlags , DISPPARAMS pDispParams , <nl> + VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> + IntByReference puArgErr ) { <nl> + <nl> + Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; <nl> + Function func = Function . getFunction ( vptr . getPointer ( 24 ) ) ; <nl> + int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , dispIdMember , <nl> + riid , lcid , wFlags , pDispParams , pVarResult , pExcepInfo , <nl> + puArgErr } ) ; <nl> + <nl> + return new HRESULT ( hr ) ; <nl> + } <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> index ae28ea2 . . a11cd6f 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> @ @ - 1214 , 5 + 1214 , 4 @ @ public interface OaIdl { <nl> 	 	 	 	 	 	 	 " wMinorVerNum " , " tdescAlias " , " idldescType " } ) ; <nl> 	 	 } <nl> 	 } <nl> - <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Ole32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Ole32 . java <nl> index 3b7df2f . . cb50582 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Ole32 . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Ole32 . java <nl> @ @ - 32 , 181 + 32 , 187 @ @ import com . sun . jna . win32 . W32APIOptions ; <nl> * / <nl> public interface Ole32 extends StdCallLibrary { <nl> <nl> - 	 / * * The instance . * / <nl> - 	 Ole32 INSTANCE = ( Ole32 ) Native . loadLibrary ( " Ole32 " , Ole32 . class , <nl> - 	 	 	 W32APIOptions . UNICODE _ OPTIONS ) ; <nl> + / * * The instance . * / <nl> + Ole32 INSTANCE = ( Ole32 ) Native . loadLibrary ( " Ole32 " , Ole32 . class , <nl> + W32APIOptions . UNICODE _ OPTIONS ) ; <nl> <nl> - 	 / * * <nl> - 	 * Creates a GUID , a unique 128 - bit integer used for CLSIDs and interface <nl> - 	 * identifiers . <nl> - 	 * <nl> - 	 * @ param pguid <nl> - 	 * A pointer to the requested GUID . <nl> - 	 * @ return S _ OK if the GUID was successfully created . <nl> - 	 * / <nl> - 	 HRESULT CoCreateGuid ( GUID pguid ) ; <nl> + / * * <nl> + * Creates a GUID , a unique 128 - bit integer used for CLSIDs and interface <nl> + * identifiers . <nl> + * <nl> + * @ param pguid <nl> + * A pointer to the requested GUID . <nl> + * @ return S _ OK if the GUID was successfully created . <nl> + * / <nl> + HRESULT CoCreateGuid ( GUID pguid ) ; <nl> <nl> - / * * @ deprecated use { @ link # CoCreateGuid ( GUID ) } . * / <nl> - 	 HRESULT CoCreateGuid ( GUID . ByReference pguid ) ; <nl> + / * * @ deprecated use { @ link # CoCreateGuid ( GUID ) } . * / <nl> + HRESULT CoCreateGuid ( GUID . ByReference pguid ) ; <nl> <nl> - 	 / * * <nl> - 	 * Converts a globally unique identifier ( GUID ) into a string of printable <nl> - 	 * characters . <nl> - 	 * <nl> - 	 * @ param rguid <nl> - 	 * The GUID to be converted . <nl> - 	 * @ param lpsz <nl> - 	 * A pointer to a caller - allocated string variable to receive the <nl> - 	 * resulting string . <nl> - 	 * @ param cchMax <nl> - 	 * The number of characters available in the lpsz buffer . <nl> - 	 * @ return If the function succeeds , the return value is the number of <nl> - 	 * characters in the returned string , including the null terminator . <nl> - 	 * If the buffer is too small to contain the string , the return <nl> - 	 * value is 0 . <nl> - 	 * / <nl> - 	 int StringFromGUID2 ( GUID rguid , char [ ] lpsz , int cchMax ) ; <nl> + / * * <nl> + * Converts a globally unique identifier ( GUID ) into a string of printable <nl> + * characters . <nl> + * <nl> + * @ param rguid <nl> + * The GUID to be converted . <nl> + * @ param lpsz <nl> + * A pointer to a caller - allocated string variable to receive the <nl> + * resulting string . <nl> + * @ param cchMax <nl> + * The number of characters available in the lpsz buffer . <nl> + * @ return If the function succeeds , the return value is the number of <nl> + * characters in the returned string , including the null terminator . <nl> + * If the buffer is too small to contain the string , the return <nl> + * value is 0 . <nl> + * / <nl> + int StringFromGUID2 ( GUID rguid , char [ ] lpsz , int cchMax ) ; <nl> <nl> - 	 / * * <nl> - 	 * Converts a string generated by the StringFromIID function back into the <nl> - 	 * original interface identifier ( IID ) . <nl> - 	 * <nl> - 	 * @ param lpsz <nl> - 	 * A pointer to the string representation of the IID . <nl> - 	 * @ param lpiid <nl> - 	 * A pointer to the requested IID on return . <nl> - 	 * @ return This function can return the standard return values E _ INVALIDARG , <nl> - 	 * E _ OUTOFMEMORY , and S _ OK . <nl> - 	 * / <nl> - 	 HRESULT IIDFromString ( String lpsz , GUID lpiid ) ; <nl> + / * * <nl> + * Converts a string generated by the StringFromIID function back into the <nl> + * original interface identifier ( IID ) . <nl> + * <nl> + * @ param lpsz <nl> + * A pointer to the string representation of the IID . <nl> + * @ param lpiid <nl> + * A pointer to the requested IID on return . <nl> + * @ return This function can return the standard return values E _ INVALIDARG , <nl> + * E _ OUTOFMEMORY , and S _ OK . <nl> + * / <nl> + HRESULT IIDFromString ( String lpsz , GUID lpiid ) ; <nl> <nl> - 	 / * * <nl> - 	 * Initializes the COM library on the current thread and identifies the <nl> - 	 * concurrency model as single - thread apartment ( STA ) . <nl> - 	 * <nl> - 	 * New applications should call CoInitializeEx instead of CoInitialize . <nl> - 	 * <nl> - 	 * pvReserved [ in , optional ] This parameter is reserved and must be NULL . <nl> - 	 * <nl> - 	 * @ param pvReserved <nl> - 	 * the pv reserved <nl> - 	 * @ return S _ OK The COM library was initialized successfully on this thread . <nl> - 	 * <nl> - 	 * S _ FALSE The COM library is already initialized on this thread . <nl> - 	 * <nl> - 	 * RPC _ E _ CHANGED _ MODE A previous call to CoInitializeEx specified <nl> - 	 * the concurrency model for this thread as multithread apartment <nl> - 	 * ( MTA ) . This could also indicate that a change from <nl> - 	 * neutral - threaded apartment to single - threaded apartment has <nl> - 	 * occurred . <nl> - 	 * / <nl> - 	 HRESULT CoInitialize ( LPVOID pvReserved ) ; <nl> + / * * <nl> + * Initializes the COM library on the current thread and identifies the <nl> + * concurrency model as single - thread apartment ( STA ) . <nl> + * <nl> + * New applications should call CoInitializeEx instead of CoInitialize . <nl> + * <nl> + * pvReserved [ in , optional ] This parameter is reserved and must be NULL . <nl> + * <nl> + * @ param pvReserved <nl> + * the pv reserved <nl> + * @ return S _ OK The COM library was initialized successfully on this thread . <nl> + * <nl> + * S _ FALSE The COM library is already initialized on this thread . <nl> + * <nl> + * RPC _ E _ CHANGED _ MODE A previous call to CoInitializeEx specified <nl> + * the concurrency model for this thread as multithread apartment <nl> + * ( MTA ) . This could also indicate that a change from <nl> + * neutral - threaded apartment to single - threaded apartment has <nl> + * occurred . <nl> + * / <nl> + HRESULT CoInitialize ( LPVOID pvReserved ) ; <nl> <nl> - 	 / * * <nl> - 	 * Initializes the COM library for use by the calling thread , sets the <nl> - 	 * thread ' s concurrency model , and creates a new apartment for the thread if <nl> - 	 * one is required . <nl> - 	 * <nl> - 	 * @ param reserved <nl> - 	 * This parameter is reserved and must be NULL . <nl> - 	 * @ param dwCoInit <nl> - 	 * The concurrency model and initialization options for the <nl> - 	 * thread . Values for this parameter are taken from the COINIT <nl> - 	 * enumeration . Any combination of values from COINIT can be <nl> - 	 * used , except that the COINIT _ APARTMENTTHREADED and <nl> - 	 * COINIT _ MULTITHREADED flags cannot both be set . The default <nl> - 	 * ( and only sane choice ) is COINIT _ MULTITHREADED . <nl> - 	 * @ return This function can return the standard return values E _ INVALIDARG , <nl> - 	 * E _ OUTOFMEMORY , and E _ UNEXPECTED , as well as the following values . <nl> - 	 * S _ OK , S _ FALSE , RPC _ E _ CHANGED _ MODE <nl> - 	 * / <nl> - 	 HRESULT CoInitializeEx ( Pointer reserved , int dwCoInit ) ; <nl> + int COINIT _ APARTMENTTHREADED = 0x2 ; <nl> + int COINIT _ MULTITHREADED = 0x0 ; <nl> + int COINIT _ DISABLE _ OLE1DDE = 0x4 ; <nl> + int COINIT _ SPEED _ OVER _ MEMORY = 0x8 ; <nl> <nl> - 	 / * * <nl> - 	 * Closes the COM library on the current thread , unloads all DLLs loaded by <nl> - 	 * the thread , frees any other resources that the thread maintains , and <nl> - 	 * forces all RPC connections on the thread to close . <nl> - 	 * <nl> - 	 * / <nl> - 	 void CoUninitialize ( ) ; <nl> + / * * <nl> + * Initializes the COM library for use by the calling thread , sets the <nl> + * thread ' s concurrency model , and creates a new apartment for the thread if <nl> + * one is required . <nl> + * <nl> + * @ param reserved <nl> + * This parameter is reserved and must be NULL . <nl> + * @ param dwCoInit <nl> + * The concurrency model and initialization options for the <nl> + * thread . Values for this parameter are taken from the COINIT <nl> + * enumeration . Any combination of values from COINIT can be <nl> + * used , except that the { @ link # COINIT _ APARTMENTTHREADED } and <nl> + * { @ link # COINIT _ MULTITHREADED } flags cannot both be set . The <nl> + * default ( and only sane choice ) is <nl> + * { @ link # COINIT _ MULTITHREADED } . <nl> + * @ return This function can return the standard return values E _ INVALIDARG , <nl> + * E _ OUTOFMEMORY , and E _ UNEXPECTED , as well as the following values . <nl> + * S _ OK , S _ FALSE , RPC _ E _ CHANGED _ MODE <nl> + * / <nl> + HRESULT CoInitializeEx ( Pointer reserved , int dwCoInit ) ; <nl> <nl> - 	 / * * <nl> - 	 * Creates a single uninitialized object of the class associated with a <nl> - 	 * specified CLSID . <nl> - 	 * <nl> - 	 * @ param rclsid <nl> - 	 * The CLSID associated with the data and code that will be used <nl> - 	 * to create the object . <nl> - 	 * @ param pUnkOuter <nl> - 	 * If NULL , indicates that the object is not being created as <nl> - 	 * part of an aggregate . If non - NULL , pointer to the aggregate <nl> - 	 * object ' s IUnknown interface ( the controlling IUnknown ) . <nl> - 	 * @ param dwClsContext <nl> - 	 * Context in which the code that manages the newly created <nl> - 	 * object will run . The values are taken from the enumeration <nl> - 	 * CLSCTX defined in WTypes . <nl> - 	 * @ param riid <nl> - 	 * A reference to the identifier of the interface to be used to <nl> - 	 * communicate with the object . <nl> - 	 * @ param ppv <nl> - 	 * Address of pointer variable that receives the interface <nl> - 	 * pointer requested in riid . Upon successful return , * ppv <nl> - 	 * contains the requested interface pointer . Upon failure , * ppv <nl> - 	 * contains NULL . <nl> - 	 * @ return an HRESULT <nl> - 	 * / <nl> - 	 HRESULT CoCreateInstance ( GUID rclsid , Pointer pUnkOuter , int dwClsContext , <nl> - 	 	 	 GUID riid , PointerByReference ppv ) ; <nl> + / * * <nl> + * Closes the COM library on the current thread , unloads all DLLs loaded by <nl> + * the thread , frees any other resources that the thread maintains , and <nl> + * forces all RPC connections on the thread to close . <nl> + * <nl> + * / <nl> + void CoUninitialize ( ) ; <nl> <nl> - 	 / * * <nl> - 	 * Looks up a CLSID in the registry , given a ProgID . <nl> - 	 * <nl> - 	 * @ param lpszProgID <nl> - 	 * [ in ] A pointer to the ProgID whose CLSID is requested . <nl> - 	 * @ param lpclsid <nl> - 	 * [ out ] Receives a pointer to the retrieved CLSID on return . <nl> - 	 * <nl> - 	 * @ return S _ OK The CLSID was retrieved successfully . <nl> - 	 * <nl> - 	 * CO _ E _ CLASSSTRING The registered CLSID for the ProgID is invalid . <nl> - 	 * <nl> - 	 * REGDB _ E _ WRITEREGDB An error occurred writing the CLSID to the <nl> - 	 * registry . See Remarks below . <nl> - 	 * <nl> - 	 * Remarks Given a ProgID , CLSIDFromProgID looks up its associated <nl> - 	 * CLSID in the registry . If the ProgID cannot be found in the <nl> - 	 * registry , CLSIDFromProgID creates an OLE 1 CLSID for the ProgID <nl> - 	 * and a CLSID entry in the registry . Because of the restrictions <nl> - 	 * placed on OLE 1 CLSID values , CLSIDFromProgID and CLSIDFromString <nl> - 	 * are the only two functions that can be used to generate a CLSID <nl> - 	 * for an OLE 1 object . <nl> - 	 * / <nl> - 	 HRESULT CLSIDFromProgID ( String lpszProgID , CLSID lpclsid ) ; <nl> + / * * <nl> + * Creates a single uninitialized object of the class associated with a <nl> + * specified CLSID . <nl> + * <nl> + * @ param rclsid <nl> + * The CLSID associated with the data and code that will be used <nl> + * to create the object . <nl> + * @ param pUnkOuter <nl> + * If NULL , indicates that the object is not being created as <nl> + * part of an aggregate . If non - NULL , pointer to the aggregate <nl> + * object ' s IUnknown interface ( the controlling IUnknown ) . <nl> + * @ param dwClsContext <nl> + * Context in which the code that manages the newly created <nl> + * object will run . The values are taken from the enumeration <nl> + * CLSCTX defined in WTypes . <nl> + * @ param riid <nl> + * A reference to the identifier of the interface to be used to <nl> + * communicate with the object . <nl> + * @ param ppv <nl> + * Address of pointer variable that receives the interface <nl> + * pointer requested in riid . Upon successful return , * ppv <nl> + * contains the requested interface pointer . Upon failure , * ppv <nl> + * contains NULL . <nl> + * @ return an HRESULT <nl> + * / <nl> + HRESULT CoCreateInstance ( GUID rclsid , Pointer pUnkOuter , int dwClsContext , <nl> + GUID riid , PointerByReference ppv ) ; <nl> <nl> - 	 / * * <nl> - 	 * Converts a string generated by the StringFromCLSID function back into the <nl> - 	 * original CLSID . <nl> - 	 * <nl> - 	 * @ param lpsz <nl> - 	 * [ in ] The string representation of the CLSID . <nl> - 	 * <nl> - 	 * @ param pclsid <nl> - 	 * [ out ] A pointer to the CLSID . <nl> - 	 * <nl> - 	 * @ return Return value <nl> - 	 * <nl> - 	 * This function can return the standard return value E _ INVALIDARG , <nl> - 	 * as well as the following values . <nl> - 	 * <nl> - 	 * NOERROR The CLSID was obtained successfully . <nl> - 	 * <nl> - 	 * CO _ E _ CLASSSTRING The class string was improperly formatted . <nl> - 	 * <nl> - 	 * REGDB _ E _ CLASSNOTREG The CLSID corresponding to the class string <nl> - 	 * was not found in the registry . <nl> - 	 * <nl> - 	 * REGDB _ E _ READREGDB The registry could not be opened for reading . <nl> - 	 * / <nl> - 	 HRESULT CLSIDFromString ( WString lpsz , CLSID pclsid ) ; <nl> + / * * <nl> + * Looks up a CLSID in the registry , given a ProgID . <nl> + * <nl> + * @ param lpszProgID <nl> + * [ in ] A pointer to the ProgID whose CLSID is requested . <nl> + * @ param lpclsid <nl> + * [ out ] Receives a pointer to the retrieved CLSID on return . <nl> + * <nl> + * @ return S _ OK The CLSID was retrieved successfully . <nl> + * <nl> + * CO _ E _ CLASSSTRING The registered CLSID for the ProgID is invalid . <nl> + * <nl> + * REGDB _ E _ WRITEREGDB An error occurred writing the CLSID to the <nl> + * registry . See Remarks below . <nl> + * <nl> + * Remarks Given a ProgID , CLSIDFromProgID looks up its associated <nl> + * CLSID in the registry . If the ProgID cannot be found in the <nl> + * registry , CLSIDFromProgID creates an OLE 1 CLSID for the ProgID <nl> + * and a CLSID entry in the registry . Because of the restrictions <nl> + * placed on OLE 1 CLSID values , CLSIDFromProgID and CLSIDFromString <nl> + * are the only two functions that can be used to generate a CLSID <nl> + * for an OLE 1 object . <nl> + * / <nl> + HRESULT CLSIDFromProgID ( String lpszProgID , CLSID lpclsid ) ; <nl> + <nl> + / * * <nl> + * Converts a string generated by the StringFromCLSID function back into the <nl> + * original CLSID . <nl> + * <nl> + * @ param lpsz <nl> + * [ in ] The string representation of the CLSID . <nl> + * <nl> + * @ param pclsid <nl> + * [ out ] A pointer to the CLSID . <nl> + * <nl> + * @ return Return value <nl> + * <nl> + * This function can return the standard return value E _ INVALIDARG , <nl> + * as well as the following values . <nl> + * <nl> + * NOERROR The CLSID was obtained successfully . <nl> + * <nl> + * CO _ E _ CLASSSTRING The class string was improperly formatted . <nl> + * <nl> + * REGDB _ E _ CLASSNOTREG The CLSID corresponding to the class string <nl> + * was not found in the registry . <nl> + * <nl> + * REGDB _ E _ READREGDB The registry could not be opened for reading . <nl> + * / <nl> + HRESULT CLSIDFromString ( WString lpsz , CLSID pclsid ) ; <nl> <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> index 782cb97 . . a17c58a 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java <nl> @ @ - 411 , 7 + 411 , 6 @ @ public class Kernel32Test extends TestCase { <nl> assertTrue ( processInformation . dwProcessId . longValue ( ) > 0 ) ; <nl> } <nl> <nl> - / / TODO <nl> public void testCreateProcessW ( ) { <nl> WinBase . STARTUPINFO startupInfo = new WinBase . STARTUPINFO ( ) ; <nl> WinBase . PROCESS _ INFORMATION . ByReference processInformation = new WinBase . PROCESS _ INFORMATION . ByReference ( ) ; <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index a1f7bf8 . . 7fc777a 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 562 , 7 + 562 , 7 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray arr , <nl> int error = GET _ LAST _ ERROR ( ) ; <nl> if ( error ) { <nl> char emsg [ 1024 ] ; <nl> - snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; <nl> + snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; <nl> throw _ type = ELastError ; <nl> throw _ msg = msg ; <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Secur32 . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Secur32 . java <nl> index fc0d20c . . fcd522e 100644 <nl> - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Secur32 . java <nl> + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Secur32 . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ import com . sun . jna . NativeLong ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . platform . win32 . Sspi . CredHandle ; <nl> import com . sun . jna . platform . win32 . Sspi . CtxtHandle ; <nl> + import com . sun . jna . platform . win32 . Sspi . PSecHandle ; <nl> import com . sun . jna . platform . win32 . Sspi . PSecPkgInfo ; <nl> import com . sun . jna . platform . win32 . Sspi . SecBufferDesc ; <nl> import com . sun . jna . platform . win32 . Sspi . TimeStamp ; <nl> @ @ - 268 , 4 + 269 , 19 @ @ public interface Secur32 extends W32API { <nl> 	 * If the function fails , it returns a nonzero error code . <nl> 	 * / <nl> 	 public int FreeContextBuffer ( Pointer buffer ) ; <nl> + 	 <nl> + 	 / * * <nl> + 	 * The QuerySecurityContextToken function obtains the access token for a client security context <nl> + 	 * and uses it directly . <nl> + 	 * @ param phContext <nl> + 	 * Handle of the context to query . <nl> + 	 * @ param phToken <nl> + 	 * Returned handle to the access token . <nl> + 	 * @ return <nl> + 	 * If the function succeeds , the function returns SEC _ E _ OK . <nl> + 	 * If the function fails , it returns a nonzero error code . One possible error code return is <nl> + 	 * SEC _ E _ INVALID _ HANDLE . <nl> + 	 * / <nl> + 	 public int QuerySecurityContextToken ( PSecHandle phContext , <nl> + 	 	 	 HANDLEByReference phToken ) ; <nl> } <nl> diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Sspi . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Sspi . java <nl> index cad26c2 . . acc4993 100644 <nl> - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Sspi . java <nl> + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Sspi . java <nl> @ @ - 136 , 6 + 136 , 10 @ @ public abstract class Sspi { <nl> 	 public static class SecHandle extends Structure { 	 	 <nl> 	 	 public Pointer dwLower ; <nl> 	 	 public Pointer dwUpper ; <nl> + <nl> + 	 	 public static class ByReference extends SecHandle implements Structure . ByReference { <nl> + <nl> + 	 	 } <nl> 	 	 <nl> 	 	 / * * <nl> 	 	 * An empty SecHandle . <nl> @ @ - 155 , 6 + 159 , 30 @ @ public abstract class Sspi { <nl> 	 	 } <nl> 	 } <nl> <nl> + 	 / * * <nl> + 	 * A pointer to a SecHandle <nl> + 	 * / <nl> + 	 public static class PSecHandle extends Structure { <nl> + <nl> + 	 	 public static class ByReference extends PSecHandle implements Structure . ByReference { <nl> + <nl> + 	 	 } <nl> + 	 	 <nl> + 	 	 / * * <nl> + 	 	 * The first entry in an array of SecPkgInfo structures . <nl> + 	 	 * / <nl> + 	 	 public SecHandle . ByReference secHandle ; <nl> + 	 	 <nl> + 	 	 public PSecHandle ( ) { <nl> + 	 	 	 <nl> + 	 	 } <nl> + <nl> + 	 	 public PSecHandle ( SecHandle h ) { <nl> + 	 	 	 useMemory ( h . getPointer ( ) ) ; <nl> + 	 	 	 read ( ) ; <nl> + 	 	 } <nl> + 	 } <nl> + 	 <nl> / * * <nl> 	 * Credentials handle . <nl> 	 * / <nl> @ @ - 194 , 6 + 222 , 10 @ @ public abstract class Sspi { <nl> 	 	 	 public ByReference ( int type , int size ) { <nl> 	 	 	 	 super ( type , size ) ; <nl> 	 	 	 } <nl> + <nl> + 	 	 	 public ByReference ( int type , byte [ ] token ) { <nl> + 	 	 	 	 super ( type , token ) ; <nl> + 	 	 	 } <nl> 	 	 	 <nl> 	 	 / * * <nl> 	 	 * Get buffer bytes . <nl> @ @ - 243 , 12 + 275 , 27 @ @ public abstract class Sspi { <nl> 	 } <nl> 	 <nl> 	 / * * <nl> + 	 * Create a SecBuffer of a given type with initial data . <nl> + 	 	 * @ param type <nl> + 	 	 * Buffer type , one of SECBUFFER _ EMTPY , etc . <nl> + 	 * @ param token <nl> + 	 * Existing token . <nl> + 	 * / <nl> + 	 public SecBuffer ( int type , byte [ ] token ) { <nl> + 	 	 cbBuffer = new NativeLong ( token . length ) ; 	 	 <nl> + 	 	 pvBuffer = new Memory ( token . length ) ; <nl> + 	 	 pvBuffer . write ( 0 , token , 0 , token . length ) ; <nl> + 	 	 BufferType = new NativeLong ( type ) ; <nl> + 	 	 allocateMemory ( ) ; <nl> + 	 } <nl> + 	 <nl> + 	 / * * <nl> 	 * Get buffer bytes . <nl> 	 * @ return <nl> 	 * Raw buffer bytes . <nl> 	 * / <nl> 	 public byte [ ] getBytes ( ) { <nl> - 	 	 return getPointer ( ) . getByteArray ( 0 , super . size ( ) ) ; <nl> + 	 	 return pvBuffer . getByteArray ( 0 , cbBuffer . intValue ( ) ) ; <nl> 	 } <nl> 	 } <nl> <nl> @ @ - 279 , 6 + 326 , 21 @ @ public abstract class Sspi { <nl> 	 } <nl> 	 <nl> 	 / * * <nl> + 	 * Create a new SecBufferDesc with initial data . <nl> + 	 * @ param type <nl> + 	 * Token type . <nl> + 	 * @ param token <nl> + 	 * Initial token data . <nl> + 	 * / <nl> + 	 public SecBufferDesc ( int type , byte [ ] token ) { <nl> + 	 	 ulVersion = new NativeLong ( SECBUFFER _ VERSION ) ; <nl> + 	 	 cBuffers = new NativeLong ( 1 ) ; <nl> + 	 	 SecBuffer . ByReference secBuffer = new SecBuffer . ByReference ( type , token ) ; <nl> + 	 	 pBuffers = ( SecBuffer . ByReference [ ] ) secBuffer . toArray ( 1 ) ; <nl> + 	 	 allocateMemory ( ) ; 	 	 <nl> + 	 } <nl> + 	 <nl> + 	 / * * <nl> 	 * Create a new SecBufferDesc with one SecBuffer of a given type and size . <nl> 	 * @ param type <nl> 	 * @ param tokenSize <nl> @ @ - 290 , 6 + 352 , 16 @ @ public abstract class Sspi { <nl> 	 	 pBuffers = ( SecBuffer . ByReference [ ] ) secBuffer . toArray ( 1 ) ; <nl> 	 	 allocateMemory ( ) ; <nl> 	 } 	 	 <nl> + 	 <nl> + 	 public byte [ ] getBytes ( ) { <nl> + 	 	 if ( pBuffers = = null | | cBuffers = = null ) { <nl> + 	 	 	 throw new RuntimeException ( " pBuffers | cBuffers " ) ; <nl> + 	 	 } <nl> + 	 	 if ( cBuffers . intValue ( ) = = 1 ) { <nl> + 	 	 	 return pBuffers [ 0 ] . getBytes ( ) ; <nl> + 	 	 } 	 	 <nl> + 	 	 throw new RuntimeException ( " cBuffers > 1 " ) ; <nl> + 	 } <nl> 	 } <nl> 	 <nl> 	 / * * <nl> diff - - git a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Secur32Test . java b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Secur32Test . java <nl> index ac1e0c4 . . cc9d96b 100644 <nl> - - - a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Secur32Test . java <nl> + + + b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Secur32Test . java <nl> @ @ - 18 , 10 + 18 , 12 @ @ import com . sun . jna . Native ; <nl> import com . sun . jna . NativeLong ; <nl> import com . sun . jna . platform . win32 . Sspi . CredHandle ; <nl> import com . sun . jna . platform . win32 . Sspi . CtxtHandle ; <nl> + import com . sun . jna . platform . win32 . Sspi . PSecHandle ; <nl> import com . sun . jna . platform . win32 . Sspi . PSecPkgInfo ; <nl> import com . sun . jna . platform . win32 . Sspi . SecBufferDesc ; <nl> import com . sun . jna . platform . win32 . Sspi . SecPkgInfo ; <nl> import com . sun . jna . platform . win32 . Sspi . TimeStamp ; <nl> + import com . sun . jna . platform . win32 . W32API . HANDLEByReference ; <nl> import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . ptr . NativeLongByReference ; <nl> <nl> @ @ - 107 , 42 + 109 , 45 @ @ public class Secur32Test extends TestCase { <nl> 	 	 	 null , phServerCredential , ptsServerExpiry ) ) ; <nl> 	 / / server - - - - - - - - - - - security context <nl> 	 	 CtxtHandle phServerContext = new CtxtHandle ( ) ; <nl> - 	 SecBufferDesc pbServerToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; <nl> + 	 SecBufferDesc pbServerToken = null ; <nl> 	 NativeLongByReference pfServerContextAttr = new NativeLongByReference ( ) ; <nl> - 	 while ( true ) { 	 	 <nl> + 	 int clientRc = W32Errors . SEC _ I _ CONTINUE _ NEEDED ; <nl> + 	 int serverRc = W32Errors . SEC _ I _ CONTINUE _ NEEDED ; <nl> + 	 do { <nl> 	 / / client - - - - - - - - - - - initialize security context , produce a client token <nl> 	 	 / / client token returned is always new <nl> 	 SecBufferDesc pbClientToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; <nl> 	 / / server token is empty the first time <nl> - 	 	 int clientRc = Secur32 . INSTANCE . InitializeSecurityContext ( <nl> + 	 SecBufferDesc pbServerTokenCopy = pbServerToken = = null <nl> + 	 	 ? null : new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , pbServerToken . getBytes ( ) ) ; <nl> + 	 clientRc = Secur32 . INSTANCE . InitializeSecurityContext ( <nl> 	 	 	 	 phClientCredential , <nl> 	 	 	 	 phClientContext . isNull ( ) ? null : phClientContext , <nl> 	 	 	 Advapi32Util . getUserName ( ) , <nl> 	 	 	 new NativeLong ( Sspi . ISC _ REQ _ CONNECTION ) , <nl> 	 	 	 new NativeLong ( 0 ) , <nl> 	 	 	 new NativeLong ( Sspi . SECURITY _ NATIVE _ DREP ) , <nl> - 	 	 	 pbServerToken , <nl> + 	 	 	 pbServerTokenCopy , <nl> 	 	 	 new NativeLong ( 0 ) , <nl> 	 	 	 phClientContext , <nl> 	 	 	 pbClientToken , <nl> 	 	 	 pfClientContextAttr , <nl> 	 	 	 null ) ; 	 	 <nl> - 	 	 if ( clientRc = = W32Errors . SEC _ E _ OK ) <nl> - 	 	 	 break ; 	 	 <nl> - 	 	 assertTrue ( clientRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED ) ; 	 	 <nl> + 	 	 assertTrue ( clientRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED | | clientRc = = W32Errors . SEC _ E _ OK ) ; 	 	 <nl> 	 / / server - - - - - - - - - - - accept security context , produce a server token <nl> - 	 	 int serverRc = Secur32 . INSTANCE . AcceptSecurityContext ( phServerCredential , <nl> + 	 	 pbServerToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; <nl> + 	 	 SecBufferDesc pbClientTokenByValue = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , pbClientToken . getBytes ( ) ) ; <nl> + 	 	 serverRc = Secur32 . INSTANCE . AcceptSecurityContext ( phServerCredential , <nl> 	 	 	 	 phServerContext . isNull ( ) ? null : phServerContext , <nl> - 	 	 	 	 pbClientToken , <nl> + 	 	 	 	 pbClientTokenByValue , <nl> 	 	 	 	 new NativeLong ( Sspi . ISC _ REQ _ CONNECTION ) , <nl> 	 	 	 	 new NativeLong ( Sspi . SECURITY _ NATIVE _ DREP ) , <nl> 	 	 	 	 phServerContext , <nl> 	 	 	 	 pbServerToken , <nl> 	 	 	 	 pfServerContextAttr , <nl> 	 	 	 	 ptsServerExpiry ) ; 	 	 <nl> - 	 	 assertTrue ( serverRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED <nl> - 	 	 	 	 | | serverRc = = W32Errors . SEC _ E _ OK ) ; 	 	 <nl> - 	 } <nl> + 	 	 assertTrue ( serverRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED | | serverRc = = W32Errors . SEC _ E _ OK ) ; 	 	 <nl> + 	 } while ( serverRc ! = W32Errors . SEC _ E _ OK | | clientRc ! = W32Errors . SEC _ E _ OK ) ; <nl> 	 / / release server context <nl> 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . DeleteSecurityContext ( <nl> 	 	 	 phServerContext ) ) ; <nl> @ @ - 169 , 4 + 174 , 76 @ @ public class Secur32Test extends TestCase { <nl> 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . FreeContextBuffer ( <nl> 	 	 	 pPackageInfo . getPointer ( ) ) ) ; <nl> } <nl> + <nl> + public void testQuerySecurityContextToken ( ) { <nl> + 	 / / client - - - - - - - - - - - acquire outbound credential handle <nl> + 	 CredHandle phClientCredential = new CredHandle ( ) ; <nl> + 	 TimeStamp ptsClientExpiry = new TimeStamp ( ) ; <nl> + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . AcquireCredentialsHandle ( <nl> + 	 	 	 null , " Negotiate " , new NativeLong ( Sspi . SECPKG _ CRED _ OUTBOUND ) , null , null , null , <nl> + 	 	 	 null , phClientCredential , ptsClientExpiry ) ) ; <nl> + 	 / / client - - - - - - - - - - - security context <nl> + 	 CtxtHandle phClientContext = new CtxtHandle ( ) ; <nl> + 	 NativeLongByReference pfClientContextAttr = new NativeLongByReference ( ) ; <nl> + 	 	 / / server - - - - - - - - - - - acquire inbound credential handle <nl> + 	 CredHandle phServerCredential = new CredHandle ( ) ; <nl> + 	 TimeStamp ptsServerExpiry = new TimeStamp ( ) ; <nl> + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . AcquireCredentialsHandle ( <nl> + 	 	 	 null , " Negotiate " , new NativeLong ( Sspi . SECPKG _ CRED _ INBOUND ) , null , null , null , <nl> + 	 	 	 null , phServerCredential , ptsServerExpiry ) ) ; <nl> + 	 / / server - - - - - - - - - - - security context <nl> + 	 	 CtxtHandle phServerContext = new CtxtHandle ( ) ; <nl> + 	 SecBufferDesc pbServerToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; <nl> + 	 NativeLongByReference pfServerContextAttr = new NativeLongByReference ( ) ; <nl> + 	 int clientRc = W32Errors . SEC _ I _ CONTINUE _ NEEDED ; <nl> + 	 int serverRc = W32Errors . SEC _ I _ CONTINUE _ NEEDED ; <nl> + 	 do { <nl> + 	 / / client - - - - - - - - - - - initialize security context , produce a client token <nl> + 	 	 / / client token returned is always new <nl> + 	 SecBufferDesc pbClientToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; <nl> + 	 / / server token is empty the first time <nl> + 	 	 clientRc = Secur32 . INSTANCE . InitializeSecurityContext ( <nl> + 	 	 	 	 phClientCredential , <nl> + 	 	 	 	 phClientContext . isNull ( ) ? null : phClientContext , <nl> + 	 	 	 Advapi32Util . getUserName ( ) , <nl> + 	 	 	 new NativeLong ( Sspi . ISC _ REQ _ CONNECTION ) , <nl> + 	 	 	 new NativeLong ( 0 ) , <nl> + 	 	 	 new NativeLong ( Sspi . SECURITY _ NATIVE _ DREP ) , <nl> + 	 	 	 pbServerToken , <nl> + 	 	 	 new NativeLong ( 0 ) , <nl> + 	 	 	 phClientContext , <nl> + 	 	 	 pbClientToken , <nl> + 	 	 	 pfClientContextAttr , <nl> + 	 	 	 null ) ; 	 	 <nl> + 	 	 assertTrue ( clientRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED | | clientRc = = W32Errors . SEC _ E _ OK ) ; 	 	 <nl> + 	 / / server - - - - - - - - - - - accept security context , produce a server token <nl> + 	 	 serverRc = Secur32 . INSTANCE . AcceptSecurityContext ( phServerCredential , <nl> + 	 	 	 	 phServerContext . isNull ( ) ? null : phServerContext , <nl> + 	 	 	 	 pbClientToken , <nl> + 	 	 	 	 new NativeLong ( Sspi . ISC _ REQ _ CONNECTION ) , <nl> + 	 	 	 	 new NativeLong ( Sspi . SECURITY _ NATIVE _ DREP ) , <nl> + 	 	 	 	 phServerContext , <nl> + 	 	 	 	 pbServerToken , <nl> + 	 	 	 	 pfServerContextAttr , <nl> + 	 	 	 	 ptsServerExpiry ) ; 	 	 <nl> + 	 	 assertTrue ( serverRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED | | serverRc = = W32Errors . SEC _ E _ OK ) ; 	 	 <nl> + 	 } while ( serverRc ! = W32Errors . SEC _ E _ OK | | clientRc ! = W32Errors . SEC _ E _ OK ) ; 	 <nl> + 	 / / query security context token <nl> + 	 HANDLEByReference phContextToken = new HANDLEByReference ( ) ; <nl> + 	 PSecHandle pphServerContext = new PSecHandle ( phServerContext ) ; <nl> + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . QuerySecurityContextToken ( <nl> + 	 	 	 pphServerContext , phContextToken ) ) ; <nl> + 	 / / release security context token <nl> + 	 assertTrue ( Kernel32 . INSTANCE . CloseHandle ( phContextToken . getValue ( ) ) ) ; <nl> + 	 / / release server context <nl> + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . DeleteSecurityContext ( <nl> + 	 	 	 phServerContext ) ) ; <nl> + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . FreeCredentialsHandle ( <nl> + 	 	 	 phServerCredential ) ) ; <nl> + 	 / / release client context <nl> + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . DeleteSecurityContext ( <nl> + 	 	 	 phClientContext ) ) ; <nl> + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . FreeCredentialsHandle ( <nl> + 	 	 	 phClientCredential ) ) ; 	 <nl> + } <nl> }

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java 
 index cfed154 . . 40f572a 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java 
 @ @ - 38 , 127 + 38 , 127 @ @ import com . sun . jna . ptr . PointerByReference ; 
 * / 
 public class IDispatch extends IUnknown { 
 
 - 	 / * * 
 - 	 * The Class ByReference . 
 - 	 * / 
 - 	 public static class ByReference extends IDispatch implements 
 - 	 	 	 Structure . ByReference { 
 - 	 } 
 - 
 - 	 / * * The Constant IID _ IDispatch . * / 
 - 	 public final static IID IID _ IDispatch = new IID ( 
 - 	 	 	 " 00020400 - 0000 - 0000 - C000 - 000000000046 " ) ; 
 - 
 - 	 / * * 
 - 	 * Instantiates a new i dispatch . 
 - 	 * / 
 - 	 public IDispatch ( ) { 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Instantiates a new i dispatch . 
 - 	 * 
 - 	 * @ param pvInstance 
 - 	 * the pv instance 
 - 	 * / 
 - 	 public IDispatch ( Pointer pvInstance ) { 
 - 	 	 super ( pvInstance ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Gets the type info count . 
 - 	 * 
 - 	 * @ param pctinfo 
 - 	 * the pctinfo 
 - 	 * @ return the hresult 
 - 	 * / 
 - 	 public HRESULT GetTypeInfoCount ( IntByReference pctinfo ) { 
 - 	 	 Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; 
 - 	 	 Function func = Function . getFunction ( vptr . getPointer ( 12 ) ) ; 
 - 	 	 int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , pctinfo } ) ; 
 - 
 - 	 	 return new HRESULT ( hr ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Gets the type info . 
 - 	 * 
 - 	 * @ param iTInfo 
 - 	 * the i t info 
 - 	 * @ param lcid 
 - 	 * the lcid 
 - 	 * @ param ppTInfo 
 - 	 * the pp t info 
 - 	 * @ return the hresult 
 - 	 * / 
 - 	 public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , 
 - 	 	 	 PointerByReference ppTInfo ) { 
 - 	 	 Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; 
 - 	 	 Function func = Function . getFunction ( vptr . getPointer ( 16 ) ) ; 
 - 	 	 int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , iTInfo , lcid , 
 - 	 	 	 	 ppTInfo } ) ; 
 - 
 - 	 	 return new HRESULT ( hr ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Gets the i ds of names . 
 - 	 * 
 - 	 * @ param riid 
 - 	 * the riid 
 - 	 * @ param rgszNames 
 - 	 * the rgsz names 
 - 	 * @ param cNames 
 - 	 * the c names 
 - 	 * @ param lcid 
 - 	 * the lcid 
 - 	 * @ param rgDispId 
 - 	 * the rg disp id 
 - 	 * @ return the hresult 
 - 	 * / 
 - 	 public HRESULT GetIDsOfNames ( IID riid , WString [ ] rgszNames , int cNames , 
 - 	 	 	 LCID lcid , DISPIDByReference rgDispId ) { 
 - 
 - 	 	 Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; 
 - 	 	 Function func = Function . getFunction ( vptr . getPointer ( 20 ) ) ; 
 - 	 	 int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , riid , 
 - 	 	 	 	 rgszNames , cNames , lcid , rgDispId } ) ; 
 - 
 - 	 	 return new HRESULT ( hr ) ; 
 - 	 } 
 - 
 - 	 / * * 
 - 	 * Invoke . 
 - 	 * 
 - 	 * @ param dispIdMember 
 - 	 * the disp id member 
 - 	 * @ param riid 
 - 	 * the riid 
 - 	 * @ param lcid 
 - 	 * the lcid 
 - 	 * @ param wFlags 
 - 	 * the w flags 
 - 	 * @ param pDispParams 
 - 	 * the disp params 
 - 	 * @ param pVarResult 
 - 	 * the var result 
 - 	 * @ param pExcepInfo 
 - 	 * the excep info 
 - 	 * @ param puArgErr 
 - 	 * the pu arg err 
 - 	 * @ return the hresult 
 - 	 * / 
 - 	 public HRESULT Invoke ( DISPID dispIdMember , IID riid , LCID lcid , 
 - 	 	 	 DISPID wFlags , DISPPARAMS pDispParams , 
 - 	 	 	 VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 - 	 	 	 IntByReference puArgErr ) { 
 - 
 - 	 	 Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; 
 - 	 	 Function func = Function . getFunction ( vptr . getPointer ( 24 ) ) ; 
 - 	 	 int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , dispIdMember , 
 - 	 	 	 	 riid , lcid , wFlags , pDispParams , pVarResult , pExcepInfo , 
 - 	 	 	 	 puArgErr } ) ; 
 - 
 - 	 	 return new HRESULT ( hr ) ; 
 - 	 } 
 + / * * 
 + * The Class ByReference . 
 + * / 
 + public static class ByReference extends IDispatch implements 
 + Structure . ByReference { 
 + } 
 + 
 + / * * The Constant IID _ IDispatch . * / 
 + public final static IID IID _ IDispatch = new IID ( 
 + " 00020400 - 0000 - 0000 - C000 - 000000000046 " ) ; 
 + 
 + / * * 
 + * Instantiates a new i dispatch . 
 + * / 
 + public IDispatch ( ) { 
 + } 
 + 
 + / * * 
 + * Instantiates a new i dispatch . 
 + * 
 + * @ param pvInstance 
 + * the pv instance 
 + * / 
 + public IDispatch ( Pointer pvInstance ) { 
 + super ( pvInstance ) ; 
 + } 
 + 
 + / * * 
 + * Gets the type info count . 
 + * 
 + * @ param pctinfo 
 + * the pctinfo 
 + * @ return the hresult 
 + * / 
 + public HRESULT GetTypeInfoCount ( IntByReference pctinfo ) { 
 + Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; 
 + Function func = Function . getFunction ( vptr . getPointer ( 12 ) ) ; 
 + int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , pctinfo } ) ; 
 + 
 + return new HRESULT ( hr ) ; 
 + } 
 + 
 + / * * 
 + * Gets the type info . 
 + * 
 + * @ param iTInfo 
 + * the i t info 
 + * @ param lcid 
 + * the lcid 
 + * @ param ppTInfo 
 + * the pp t info 
 + * @ return the hresult 
 + * / 
 + public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , 
 + PointerByReference ppTInfo ) { 
 + Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; 
 + Function func = Function . getFunction ( vptr . getPointer ( 16 ) ) ; 
 + int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , iTInfo , lcid , 
 + ppTInfo } ) ; 
 + 
 + return new HRESULT ( hr ) ; 
 + } 
 + 
 + / * * 
 + * Gets the i ds of names . 
 + * 
 + * @ param riid 
 + * the riid 
 + * @ param rgszNames 
 + * the rgsz names 
 + * @ param cNames 
 + * the c names 
 + * @ param lcid 
 + * the lcid 
 + * @ param rgDispId 
 + * the rg disp id 
 + * @ return the hresult 
 + * / 
 + public HRESULT GetIDsOfNames ( IID riid , WString [ ] rgszNames , int cNames , 
 + LCID lcid , DISPIDByReference rgDispId ) { 
 + 
 + Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; 
 + Function func = Function . getFunction ( vptr . getPointer ( 20 ) ) ; 
 + int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , riid , 
 + rgszNames , cNames , lcid , rgDispId } ) ; 
 + 
 + return new HRESULT ( hr ) ; 
 + } 
 + 
 + / * * 
 + * Invoke . 
 + * 
 + * @ param dispIdMember 
 + * the disp id member 
 + * @ param riid 
 + * the riid 
 + * @ param lcid 
 + * the lcid 
 + * @ param wFlags 
 + * the w flags 
 + * @ param pDispParams 
 + * the disp params 
 + * @ param pVarResult 
 + * the var result 
 + * @ param pExcepInfo 
 + * the excep info 
 + * @ param puArgErr 
 + * the pu arg err 
 + * @ return the hresult 
 + * / 
 + public HRESULT Invoke ( DISPID dispIdMember , IID riid , LCID lcid , 
 + DISPID wFlags , DISPPARAMS pDispParams , 
 + VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 + IntByReference puArgErr ) { 
 + 
 + Pointer vptr = this . getPointer ( ) . getPointer ( 0 ) ; 
 + Function func = Function . getFunction ( vptr . getPointer ( 24 ) ) ; 
 + int hr = func . invokeInt ( new Object [ ] { this . getPointer ( ) , dispIdMember , 
 + riid , lcid , wFlags , pDispParams , pVarResult , pExcepInfo , 
 + puArgErr } ) ; 
 + 
 + return new HRESULT ( hr ) ; 
 + } 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 index ae28ea2 . . a11cd6f 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 @ @ - 1214 , 5 + 1214 , 4 @ @ public interface OaIdl { 
 	 	 	 	 	 	 	 " wMinorVerNum " , " tdescAlias " , " idldescType " } ) ; 
 	 	 } 
 	 } 
 - 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Ole32 . java b / contrib / platform / src / com / sun / jna / platform / win32 / Ole32 . java 
 index 3b7df2f . . cb50582 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Ole32 . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Ole32 . java 
 @ @ - 32 , 181 + 32 , 187 @ @ import com . sun . jna . win32 . W32APIOptions ; 
 * / 
 public interface Ole32 extends StdCallLibrary { 
 
 - 	 / * * The instance . * / 
 - 	 Ole32 INSTANCE = ( Ole32 ) Native . loadLibrary ( " Ole32 " , Ole32 . class , 
 - 	 	 	 W32APIOptions . UNICODE _ OPTIONS ) ; 
 + / * * The instance . * / 
 + Ole32 INSTANCE = ( Ole32 ) Native . loadLibrary ( " Ole32 " , Ole32 . class , 
 + W32APIOptions . UNICODE _ OPTIONS ) ; 
 
 - 	 / * * 
 - 	 * Creates a GUID , a unique 128 - bit integer used for CLSIDs and interface 
 - 	 * identifiers . 
 - 	 * 
 - 	 * @ param pguid 
 - 	 * A pointer to the requested GUID . 
 - 	 * @ return S _ OK if the GUID was successfully created . 
 - 	 * / 
 - 	 HRESULT CoCreateGuid ( GUID pguid ) ; 
 + / * * 
 + * Creates a GUID , a unique 128 - bit integer used for CLSIDs and interface 
 + * identifiers . 
 + * 
 + * @ param pguid 
 + * A pointer to the requested GUID . 
 + * @ return S _ OK if the GUID was successfully created . 
 + * / 
 + HRESULT CoCreateGuid ( GUID pguid ) ; 
 
 - / * * @ deprecated use { @ link # CoCreateGuid ( GUID ) } . * / 
 - 	 HRESULT CoCreateGuid ( GUID . ByReference pguid ) ; 
 + / * * @ deprecated use { @ link # CoCreateGuid ( GUID ) } . * / 
 + HRESULT CoCreateGuid ( GUID . ByReference pguid ) ; 
 
 - 	 / * * 
 - 	 * Converts a globally unique identifier ( GUID ) into a string of printable 
 - 	 * characters . 
 - 	 * 
 - 	 * @ param rguid 
 - 	 * The GUID to be converted . 
 - 	 * @ param lpsz 
 - 	 * A pointer to a caller - allocated string variable to receive the 
 - 	 * resulting string . 
 - 	 * @ param cchMax 
 - 	 * The number of characters available in the lpsz buffer . 
 - 	 * @ return If the function succeeds , the return value is the number of 
 - 	 * characters in the returned string , including the null terminator . 
 - 	 * If the buffer is too small to contain the string , the return 
 - 	 * value is 0 . 
 - 	 * / 
 - 	 int StringFromGUID2 ( GUID rguid , char [ ] lpsz , int cchMax ) ; 
 + / * * 
 + * Converts a globally unique identifier ( GUID ) into a string of printable 
 + * characters . 
 + * 
 + * @ param rguid 
 + * The GUID to be converted . 
 + * @ param lpsz 
 + * A pointer to a caller - allocated string variable to receive the 
 + * resulting string . 
 + * @ param cchMax 
 + * The number of characters available in the lpsz buffer . 
 + * @ return If the function succeeds , the return value is the number of 
 + * characters in the returned string , including the null terminator . 
 + * If the buffer is too small to contain the string , the return 
 + * value is 0 . 
 + * / 
 + int StringFromGUID2 ( GUID rguid , char [ ] lpsz , int cchMax ) ; 
 
 - 	 / * * 
 - 	 * Converts a string generated by the StringFromIID function back into the 
 - 	 * original interface identifier ( IID ) . 
 - 	 * 
 - 	 * @ param lpsz 
 - 	 * A pointer to the string representation of the IID . 
 - 	 * @ param lpiid 
 - 	 * A pointer to the requested IID on return . 
 - 	 * @ return This function can return the standard return values E _ INVALIDARG , 
 - 	 * E _ OUTOFMEMORY , and S _ OK . 
 - 	 * / 
 - 	 HRESULT IIDFromString ( String lpsz , GUID lpiid ) ; 
 + / * * 
 + * Converts a string generated by the StringFromIID function back into the 
 + * original interface identifier ( IID ) . 
 + * 
 + * @ param lpsz 
 + * A pointer to the string representation of the IID . 
 + * @ param lpiid 
 + * A pointer to the requested IID on return . 
 + * @ return This function can return the standard return values E _ INVALIDARG , 
 + * E _ OUTOFMEMORY , and S _ OK . 
 + * / 
 + HRESULT IIDFromString ( String lpsz , GUID lpiid ) ; 
 
 - 	 / * * 
 - 	 * Initializes the COM library on the current thread and identifies the 
 - 	 * concurrency model as single - thread apartment ( STA ) . 
 - 	 * 
 - 	 * New applications should call CoInitializeEx instead of CoInitialize . 
 - 	 * 
 - 	 * pvReserved [ in , optional ] This parameter is reserved and must be NULL . 
 - 	 * 
 - 	 * @ param pvReserved 
 - 	 * the pv reserved 
 - 	 * @ return S _ OK The COM library was initialized successfully on this thread . 
 - 	 * 
 - 	 * S _ FALSE The COM library is already initialized on this thread . 
 - 	 * 
 - 	 * RPC _ E _ CHANGED _ MODE A previous call to CoInitializeEx specified 
 - 	 * the concurrency model for this thread as multithread apartment 
 - 	 * ( MTA ) . This could also indicate that a change from 
 - 	 * neutral - threaded apartment to single - threaded apartment has 
 - 	 * occurred . 
 - 	 * / 
 - 	 HRESULT CoInitialize ( LPVOID pvReserved ) ; 
 + / * * 
 + * Initializes the COM library on the current thread and identifies the 
 + * concurrency model as single - thread apartment ( STA ) . 
 + * 
 + * New applications should call CoInitializeEx instead of CoInitialize . 
 + * 
 + * pvReserved [ in , optional ] This parameter is reserved and must be NULL . 
 + * 
 + * @ param pvReserved 
 + * the pv reserved 
 + * @ return S _ OK The COM library was initialized successfully on this thread . 
 + * 
 + * S _ FALSE The COM library is already initialized on this thread . 
 + * 
 + * RPC _ E _ CHANGED _ MODE A previous call to CoInitializeEx specified 
 + * the concurrency model for this thread as multithread apartment 
 + * ( MTA ) . This could also indicate that a change from 
 + * neutral - threaded apartment to single - threaded apartment has 
 + * occurred . 
 + * / 
 + HRESULT CoInitialize ( LPVOID pvReserved ) ; 
 
 - 	 / * * 
 - 	 * Initializes the COM library for use by the calling thread , sets the 
 - 	 * thread ' s concurrency model , and creates a new apartment for the thread if 
 - 	 * one is required . 
 - 	 * 
 - 	 * @ param reserved 
 - 	 * This parameter is reserved and must be NULL . 
 - 	 * @ param dwCoInit 
 - 	 * The concurrency model and initialization options for the 
 - 	 * thread . Values for this parameter are taken from the COINIT 
 - 	 * enumeration . Any combination of values from COINIT can be 
 - 	 * used , except that the COINIT _ APARTMENTTHREADED and 
 - 	 * COINIT _ MULTITHREADED flags cannot both be set . The default 
 - 	 * ( and only sane choice ) is COINIT _ MULTITHREADED . 
 - 	 * @ return This function can return the standard return values E _ INVALIDARG , 
 - 	 * E _ OUTOFMEMORY , and E _ UNEXPECTED , as well as the following values . 
 - 	 * S _ OK , S _ FALSE , RPC _ E _ CHANGED _ MODE 
 - 	 * / 
 - 	 HRESULT CoInitializeEx ( Pointer reserved , int dwCoInit ) ; 
 + int COINIT _ APARTMENTTHREADED = 0x2 ; 
 + int COINIT _ MULTITHREADED = 0x0 ; 
 + int COINIT _ DISABLE _ OLE1DDE = 0x4 ; 
 + int COINIT _ SPEED _ OVER _ MEMORY = 0x8 ; 
 
 - 	 / * * 
 - 	 * Closes the COM library on the current thread , unloads all DLLs loaded by 
 - 	 * the thread , frees any other resources that the thread maintains , and 
 - 	 * forces all RPC connections on the thread to close . 
 - 	 * 
 - 	 * / 
 - 	 void CoUninitialize ( ) ; 
 + / * * 
 + * Initializes the COM library for use by the calling thread , sets the 
 + * thread ' s concurrency model , and creates a new apartment for the thread if 
 + * one is required . 
 + * 
 + * @ param reserved 
 + * This parameter is reserved and must be NULL . 
 + * @ param dwCoInit 
 + * The concurrency model and initialization options for the 
 + * thread . Values for this parameter are taken from the COINIT 
 + * enumeration . Any combination of values from COINIT can be 
 + * used , except that the { @ link # COINIT _ APARTMENTTHREADED } and 
 + * { @ link # COINIT _ MULTITHREADED } flags cannot both be set . The 
 + * default ( and only sane choice ) is 
 + * { @ link # COINIT _ MULTITHREADED } . 
 + * @ return This function can return the standard return values E _ INVALIDARG , 
 + * E _ OUTOFMEMORY , and E _ UNEXPECTED , as well as the following values . 
 + * S _ OK , S _ FALSE , RPC _ E _ CHANGED _ MODE 
 + * / 
 + HRESULT CoInitializeEx ( Pointer reserved , int dwCoInit ) ; 
 
 - 	 / * * 
 - 	 * Creates a single uninitialized object of the class associated with a 
 - 	 * specified CLSID . 
 - 	 * 
 - 	 * @ param rclsid 
 - 	 * The CLSID associated with the data and code that will be used 
 - 	 * to create the object . 
 - 	 * @ param pUnkOuter 
 - 	 * If NULL , indicates that the object is not being created as 
 - 	 * part of an aggregate . If non - NULL , pointer to the aggregate 
 - 	 * object ' s IUnknown interface ( the controlling IUnknown ) . 
 - 	 * @ param dwClsContext 
 - 	 * Context in which the code that manages the newly created 
 - 	 * object will run . The values are taken from the enumeration 
 - 	 * CLSCTX defined in WTypes . 
 - 	 * @ param riid 
 - 	 * A reference to the identifier of the interface to be used to 
 - 	 * communicate with the object . 
 - 	 * @ param ppv 
 - 	 * Address of pointer variable that receives the interface 
 - 	 * pointer requested in riid . Upon successful return , * ppv 
 - 	 * contains the requested interface pointer . Upon failure , * ppv 
 - 	 * contains NULL . 
 - 	 * @ return an HRESULT 
 - 	 * / 
 - 	 HRESULT CoCreateInstance ( GUID rclsid , Pointer pUnkOuter , int dwClsContext , 
 - 	 	 	 GUID riid , PointerByReference ppv ) ; 
 + / * * 
 + * Closes the COM library on the current thread , unloads all DLLs loaded by 
 + * the thread , frees any other resources that the thread maintains , and 
 + * forces all RPC connections on the thread to close . 
 + * 
 + * / 
 + void CoUninitialize ( ) ; 
 
 - 	 / * * 
 - 	 * Looks up a CLSID in the registry , given a ProgID . 
 - 	 * 
 - 	 * @ param lpszProgID 
 - 	 * [ in ] A pointer to the ProgID whose CLSID is requested . 
 - 	 * @ param lpclsid 
 - 	 * [ out ] Receives a pointer to the retrieved CLSID on return . 
 - 	 * 
 - 	 * @ return S _ OK The CLSID was retrieved successfully . 
 - 	 * 
 - 	 * CO _ E _ CLASSSTRING The registered CLSID for the ProgID is invalid . 
 - 	 * 
 - 	 * REGDB _ E _ WRITEREGDB An error occurred writing the CLSID to the 
 - 	 * registry . See Remarks below . 
 - 	 * 
 - 	 * Remarks Given a ProgID , CLSIDFromProgID looks up its associated 
 - 	 * CLSID in the registry . If the ProgID cannot be found in the 
 - 	 * registry , CLSIDFromProgID creates an OLE 1 CLSID for the ProgID 
 - 	 * and a CLSID entry in the registry . Because of the restrictions 
 - 	 * placed on OLE 1 CLSID values , CLSIDFromProgID and CLSIDFromString 
 - 	 * are the only two functions that can be used to generate a CLSID 
 - 	 * for an OLE 1 object . 
 - 	 * / 
 - 	 HRESULT CLSIDFromProgID ( String lpszProgID , CLSID lpclsid ) ; 
 + / * * 
 + * Creates a single uninitialized object of the class associated with a 
 + * specified CLSID . 
 + * 
 + * @ param rclsid 
 + * The CLSID associated with the data and code that will be used 
 + * to create the object . 
 + * @ param pUnkOuter 
 + * If NULL , indicates that the object is not being created as 
 + * part of an aggregate . If non - NULL , pointer to the aggregate 
 + * object ' s IUnknown interface ( the controlling IUnknown ) . 
 + * @ param dwClsContext 
 + * Context in which the code that manages the newly created 
 + * object will run . The values are taken from the enumeration 
 + * CLSCTX defined in WTypes . 
 + * @ param riid 
 + * A reference to the identifier of the interface to be used to 
 + * communicate with the object . 
 + * @ param ppv 
 + * Address of pointer variable that receives the interface 
 + * pointer requested in riid . Upon successful return , * ppv 
 + * contains the requested interface pointer . Upon failure , * ppv 
 + * contains NULL . 
 + * @ return an HRESULT 
 + * / 
 + HRESULT CoCreateInstance ( GUID rclsid , Pointer pUnkOuter , int dwClsContext , 
 + GUID riid , PointerByReference ppv ) ; 
 
 - 	 / * * 
 - 	 * Converts a string generated by the StringFromCLSID function back into the 
 - 	 * original CLSID . 
 - 	 * 
 - 	 * @ param lpsz 
 - 	 * [ in ] The string representation of the CLSID . 
 - 	 * 
 - 	 * @ param pclsid 
 - 	 * [ out ] A pointer to the CLSID . 
 - 	 * 
 - 	 * @ return Return value 
 - 	 * 
 - 	 * This function can return the standard return value E _ INVALIDARG , 
 - 	 * as well as the following values . 
 - 	 * 
 - 	 * NOERROR The CLSID was obtained successfully . 
 - 	 * 
 - 	 * CO _ E _ CLASSSTRING The class string was improperly formatted . 
 - 	 * 
 - 	 * REGDB _ E _ CLASSNOTREG The CLSID corresponding to the class string 
 - 	 * was not found in the registry . 
 - 	 * 
 - 	 * REGDB _ E _ READREGDB The registry could not be opened for reading . 
 - 	 * / 
 - 	 HRESULT CLSIDFromString ( WString lpsz , CLSID pclsid ) ; 
 + / * * 
 + * Looks up a CLSID in the registry , given a ProgID . 
 + * 
 + * @ param lpszProgID 
 + * [ in ] A pointer to the ProgID whose CLSID is requested . 
 + * @ param lpclsid 
 + * [ out ] Receives a pointer to the retrieved CLSID on return . 
 + * 
 + * @ return S _ OK The CLSID was retrieved successfully . 
 + * 
 + * CO _ E _ CLASSSTRING The registered CLSID for the ProgID is invalid . 
 + * 
 + * REGDB _ E _ WRITEREGDB An error occurred writing the CLSID to the 
 + * registry . See Remarks below . 
 + * 
 + * Remarks Given a ProgID , CLSIDFromProgID looks up its associated 
 + * CLSID in the registry . If the ProgID cannot be found in the 
 + * registry , CLSIDFromProgID creates an OLE 1 CLSID for the ProgID 
 + * and a CLSID entry in the registry . Because of the restrictions 
 + * placed on OLE 1 CLSID values , CLSIDFromProgID and CLSIDFromString 
 + * are the only two functions that can be used to generate a CLSID 
 + * for an OLE 1 object . 
 + * / 
 + HRESULT CLSIDFromProgID ( String lpszProgID , CLSID lpclsid ) ; 
 + 
 + / * * 
 + * Converts a string generated by the StringFromCLSID function back into the 
 + * original CLSID . 
 + * 
 + * @ param lpsz 
 + * [ in ] The string representation of the CLSID . 
 + * 
 + * @ param pclsid 
 + * [ out ] A pointer to the CLSID . 
 + * 
 + * @ return Return value 
 + * 
 + * This function can return the standard return value E _ INVALIDARG , 
 + * as well as the following values . 
 + * 
 + * NOERROR The CLSID was obtained successfully . 
 + * 
 + * CO _ E _ CLASSSTRING The class string was improperly formatted . 
 + * 
 + * REGDB _ E _ CLASSNOTREG The CLSID corresponding to the class string 
 + * was not found in the registry . 
 + * 
 + * REGDB _ E _ READREGDB The registry could not be opened for reading . 
 + * / 
 + HRESULT CLSIDFromString ( WString lpsz , CLSID pclsid ) ; 
 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 index 782cb97 . . a17c58a 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / Kernel32Test . java 
 @ @ - 411 , 7 + 411 , 6 @ @ public class Kernel32Test extends TestCase { 
 assertTrue ( processInformation . dwProcessId . longValue ( ) > 0 ) ; 
 } 
 
 - / / TODO 
 public void testCreateProcessW ( ) { 
 WinBase . STARTUPINFO startupInfo = new WinBase . STARTUPINFO ( ) ; 
 WinBase . PROCESS _ INFORMATION . ByReference processInformation = new WinBase . PROCESS _ INFORMATION . ByReference ( ) ; 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index a1f7bf8 . . 7fc777a 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 562 , 7 + 562 , 7 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray arr , 
 int error = GET _ LAST _ ERROR ( ) ; 
 if ( error ) { 
 char emsg [ 1024 ] ; 
 - snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; 
 + snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; 
 throw _ type = ELastError ; 
 throw _ msg = msg ; 
 }

NEAREST DIFF:
diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Secur32 . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Secur32 . java 
 index fc0d20c . . fcd522e 100644 
 - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Secur32 . java 
 + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Secur32 . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import com . sun . jna . NativeLong ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . platform . win32 . Sspi . CredHandle ; 
 import com . sun . jna . platform . win32 . Sspi . CtxtHandle ; 
 + import com . sun . jna . platform . win32 . Sspi . PSecHandle ; 
 import com . sun . jna . platform . win32 . Sspi . PSecPkgInfo ; 
 import com . sun . jna . platform . win32 . Sspi . SecBufferDesc ; 
 import com . sun . jna . platform . win32 . Sspi . TimeStamp ; 
 @ @ - 268 , 4 + 269 , 19 @ @ public interface Secur32 extends W32API { 
 	 * If the function fails , it returns a nonzero error code . 
 	 * / 
 	 public int FreeContextBuffer ( Pointer buffer ) ; 
 + 	 
 + 	 / * * 
 + 	 * The QuerySecurityContextToken function obtains the access token for a client security context 
 + 	 * and uses it directly . 
 + 	 * @ param phContext 
 + 	 * Handle of the context to query . 
 + 	 * @ param phToken 
 + 	 * Returned handle to the access token . 
 + 	 * @ return 
 + 	 * If the function succeeds , the function returns SEC _ E _ OK . 
 + 	 * If the function fails , it returns a nonzero error code . One possible error code return is 
 + 	 * SEC _ E _ INVALID _ HANDLE . 
 + 	 * / 
 + 	 public int QuerySecurityContextToken ( PSecHandle phContext , 
 + 	 	 	 HANDLEByReference phToken ) ; 
 } 
 diff - - git a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Sspi . java b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Sspi . java 
 index cad26c2 . . acc4993 100644 
 - - - a / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Sspi . java 
 + + + b / jnalib / contrib / src / platform / src / com / sun / jna / platform / win32 / Sspi . java 
 @ @ - 136 , 6 + 136 , 10 @ @ public abstract class Sspi { 
 	 public static class SecHandle extends Structure { 	 	 
 	 	 public Pointer dwLower ; 
 	 	 public Pointer dwUpper ; 
 + 
 + 	 	 public static class ByReference extends SecHandle implements Structure . ByReference { 
 + 
 + 	 	 } 
 	 	 
 	 	 / * * 
 	 	 * An empty SecHandle . 
 @ @ - 155 , 6 + 159 , 30 @ @ public abstract class Sspi { 
 	 	 } 
 	 } 
 
 + 	 / * * 
 + 	 * A pointer to a SecHandle 
 + 	 * / 
 + 	 public static class PSecHandle extends Structure { 
 + 
 + 	 	 public static class ByReference extends PSecHandle implements Structure . ByReference { 
 + 
 + 	 	 } 
 + 	 	 
 + 	 	 / * * 
 + 	 	 * The first entry in an array of SecPkgInfo structures . 
 + 	 	 * / 
 + 	 	 public SecHandle . ByReference secHandle ; 
 + 	 	 
 + 	 	 public PSecHandle ( ) { 
 + 	 	 	 
 + 	 	 } 
 + 
 + 	 	 public PSecHandle ( SecHandle h ) { 
 + 	 	 	 useMemory ( h . getPointer ( ) ) ; 
 + 	 	 	 read ( ) ; 
 + 	 	 } 
 + 	 } 
 + 	 
 / * * 
 	 * Credentials handle . 
 	 * / 
 @ @ - 194 , 6 + 222 , 10 @ @ public abstract class Sspi { 
 	 	 	 public ByReference ( int type , int size ) { 
 	 	 	 	 super ( type , size ) ; 
 	 	 	 } 
 + 
 + 	 	 	 public ByReference ( int type , byte [ ] token ) { 
 + 	 	 	 	 super ( type , token ) ; 
 + 	 	 	 } 
 	 	 	 
 	 	 / * * 
 	 	 * Get buffer bytes . 
 @ @ - 243 , 12 + 275 , 27 @ @ public abstract class Sspi { 
 	 } 
 	 
 	 / * * 
 + 	 * Create a SecBuffer of a given type with initial data . 
 + 	 	 * @ param type 
 + 	 	 * Buffer type , one of SECBUFFER _ EMTPY , etc . 
 + 	 * @ param token 
 + 	 * Existing token . 
 + 	 * / 
 + 	 public SecBuffer ( int type , byte [ ] token ) { 
 + 	 	 cbBuffer = new NativeLong ( token . length ) ; 	 	 
 + 	 	 pvBuffer = new Memory ( token . length ) ; 
 + 	 	 pvBuffer . write ( 0 , token , 0 , token . length ) ; 
 + 	 	 BufferType = new NativeLong ( type ) ; 
 + 	 	 allocateMemory ( ) ; 
 + 	 } 
 + 	 
 + 	 / * * 
 	 * Get buffer bytes . 
 	 * @ return 
 	 * Raw buffer bytes . 
 	 * / 
 	 public byte [ ] getBytes ( ) { 
 - 	 	 return getPointer ( ) . getByteArray ( 0 , super . size ( ) ) ; 
 + 	 	 return pvBuffer . getByteArray ( 0 , cbBuffer . intValue ( ) ) ; 
 	 } 
 	 } 
 
 @ @ - 279 , 6 + 326 , 21 @ @ public abstract class Sspi { 
 	 } 
 	 
 	 / * * 
 + 	 * Create a new SecBufferDesc with initial data . 
 + 	 * @ param type 
 + 	 * Token type . 
 + 	 * @ param token 
 + 	 * Initial token data . 
 + 	 * / 
 + 	 public SecBufferDesc ( int type , byte [ ] token ) { 
 + 	 	 ulVersion = new NativeLong ( SECBUFFER _ VERSION ) ; 
 + 	 	 cBuffers = new NativeLong ( 1 ) ; 
 + 	 	 SecBuffer . ByReference secBuffer = new SecBuffer . ByReference ( type , token ) ; 
 + 	 	 pBuffers = ( SecBuffer . ByReference [ ] ) secBuffer . toArray ( 1 ) ; 
 + 	 	 allocateMemory ( ) ; 	 	 
 + 	 } 
 + 	 
 + 	 / * * 
 	 * Create a new SecBufferDesc with one SecBuffer of a given type and size . 
 	 * @ param type 
 	 * @ param tokenSize 
 @ @ - 290 , 6 + 352 , 16 @ @ public abstract class Sspi { 
 	 	 pBuffers = ( SecBuffer . ByReference [ ] ) secBuffer . toArray ( 1 ) ; 
 	 	 allocateMemory ( ) ; 
 	 } 	 	 
 + 	 
 + 	 public byte [ ] getBytes ( ) { 
 + 	 	 if ( pBuffers = = null | | cBuffers = = null ) { 
 + 	 	 	 throw new RuntimeException ( " pBuffers | cBuffers " ) ; 
 + 	 	 } 
 + 	 	 if ( cBuffers . intValue ( ) = = 1 ) { 
 + 	 	 	 return pBuffers [ 0 ] . getBytes ( ) ; 
 + 	 	 } 	 	 
 + 	 	 throw new RuntimeException ( " cBuffers > 1 " ) ; 
 + 	 } 
 	 } 
 	 
 	 / * * 
 diff - - git a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Secur32Test . java b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Secur32Test . java 
 index ac1e0c4 . . cc9d96b 100644 
 - - - a / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Secur32Test . java 
 + + + b / jnalib / contrib / src / platform / test / com / sun / jna / platform / win32 / Secur32Test . java 
 @ @ - 18 , 10 + 18 , 12 @ @ import com . sun . jna . Native ; 
 import com . sun . jna . NativeLong ; 
 import com . sun . jna . platform . win32 . Sspi . CredHandle ; 
 import com . sun . jna . platform . win32 . Sspi . CtxtHandle ; 
 + import com . sun . jna . platform . win32 . Sspi . PSecHandle ; 
 import com . sun . jna . platform . win32 . Sspi . PSecPkgInfo ; 
 import com . sun . jna . platform . win32 . Sspi . SecBufferDesc ; 
 import com . sun . jna . platform . win32 . Sspi . SecPkgInfo ; 
 import com . sun . jna . platform . win32 . Sspi . TimeStamp ; 
 + import com . sun . jna . platform . win32 . W32API . HANDLEByReference ; 
 import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . ptr . NativeLongByReference ; 
 
 @ @ - 107 , 42 + 109 , 45 @ @ public class Secur32Test extends TestCase { 
 	 	 	 null , phServerCredential , ptsServerExpiry ) ) ; 
 	 / / server - - - - - - - - - - - security context 
 	 	 CtxtHandle phServerContext = new CtxtHandle ( ) ; 
 - 	 SecBufferDesc pbServerToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; 
 + 	 SecBufferDesc pbServerToken = null ; 
 	 NativeLongByReference pfServerContextAttr = new NativeLongByReference ( ) ; 
 - 	 while ( true ) { 	 	 
 + 	 int clientRc = W32Errors . SEC _ I _ CONTINUE _ NEEDED ; 
 + 	 int serverRc = W32Errors . SEC _ I _ CONTINUE _ NEEDED ; 
 + 	 do { 
 	 / / client - - - - - - - - - - - initialize security context , produce a client token 
 	 	 / / client token returned is always new 
 	 SecBufferDesc pbClientToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; 
 	 / / server token is empty the first time 
 - 	 	 int clientRc = Secur32 . INSTANCE . InitializeSecurityContext ( 
 + 	 SecBufferDesc pbServerTokenCopy = pbServerToken = = null 
 + 	 	 ? null : new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , pbServerToken . getBytes ( ) ) ; 
 + 	 clientRc = Secur32 . INSTANCE . InitializeSecurityContext ( 
 	 	 	 	 phClientCredential , 
 	 	 	 	 phClientContext . isNull ( ) ? null : phClientContext , 
 	 	 	 Advapi32Util . getUserName ( ) , 
 	 	 	 new NativeLong ( Sspi . ISC _ REQ _ CONNECTION ) , 
 	 	 	 new NativeLong ( 0 ) , 
 	 	 	 new NativeLong ( Sspi . SECURITY _ NATIVE _ DREP ) , 
 - 	 	 	 pbServerToken , 
 + 	 	 	 pbServerTokenCopy , 
 	 	 	 new NativeLong ( 0 ) , 
 	 	 	 phClientContext , 
 	 	 	 pbClientToken , 
 	 	 	 pfClientContextAttr , 
 	 	 	 null ) ; 	 	 
 - 	 	 if ( clientRc = = W32Errors . SEC _ E _ OK ) 
 - 	 	 	 break ; 	 	 
 - 	 	 assertTrue ( clientRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED ) ; 	 	 
 + 	 	 assertTrue ( clientRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED | | clientRc = = W32Errors . SEC _ E _ OK ) ; 	 	 
 	 / / server - - - - - - - - - - - accept security context , produce a server token 
 - 	 	 int serverRc = Secur32 . INSTANCE . AcceptSecurityContext ( phServerCredential , 
 + 	 	 pbServerToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; 
 + 	 	 SecBufferDesc pbClientTokenByValue = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , pbClientToken . getBytes ( ) ) ; 
 + 	 	 serverRc = Secur32 . INSTANCE . AcceptSecurityContext ( phServerCredential , 
 	 	 	 	 phServerContext . isNull ( ) ? null : phServerContext , 
 - 	 	 	 	 pbClientToken , 
 + 	 	 	 	 pbClientTokenByValue , 
 	 	 	 	 new NativeLong ( Sspi . ISC _ REQ _ CONNECTION ) , 
 	 	 	 	 new NativeLong ( Sspi . SECURITY _ NATIVE _ DREP ) , 
 	 	 	 	 phServerContext , 
 	 	 	 	 pbServerToken , 
 	 	 	 	 pfServerContextAttr , 
 	 	 	 	 ptsServerExpiry ) ; 	 	 
 - 	 	 assertTrue ( serverRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED 
 - 	 	 	 	 | | serverRc = = W32Errors . SEC _ E _ OK ) ; 	 	 
 - 	 } 
 + 	 	 assertTrue ( serverRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED | | serverRc = = W32Errors . SEC _ E _ OK ) ; 	 	 
 + 	 } while ( serverRc ! = W32Errors . SEC _ E _ OK | | clientRc ! = W32Errors . SEC _ E _ OK ) ; 
 	 / / release server context 
 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . DeleteSecurityContext ( 
 	 	 	 phServerContext ) ) ; 
 @ @ - 169 , 4 + 174 , 76 @ @ public class Secur32Test extends TestCase { 
 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . FreeContextBuffer ( 
 	 	 	 pPackageInfo . getPointer ( ) ) ) ; 
 } 
 + 
 + public void testQuerySecurityContextToken ( ) { 
 + 	 / / client - - - - - - - - - - - acquire outbound credential handle 
 + 	 CredHandle phClientCredential = new CredHandle ( ) ; 
 + 	 TimeStamp ptsClientExpiry = new TimeStamp ( ) ; 
 + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . AcquireCredentialsHandle ( 
 + 	 	 	 null , " Negotiate " , new NativeLong ( Sspi . SECPKG _ CRED _ OUTBOUND ) , null , null , null , 
 + 	 	 	 null , phClientCredential , ptsClientExpiry ) ) ; 
 + 	 / / client - - - - - - - - - - - security context 
 + 	 CtxtHandle phClientContext = new CtxtHandle ( ) ; 
 + 	 NativeLongByReference pfClientContextAttr = new NativeLongByReference ( ) ; 
 + 	 	 / / server - - - - - - - - - - - acquire inbound credential handle 
 + 	 CredHandle phServerCredential = new CredHandle ( ) ; 
 + 	 TimeStamp ptsServerExpiry = new TimeStamp ( ) ; 
 + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . AcquireCredentialsHandle ( 
 + 	 	 	 null , " Negotiate " , new NativeLong ( Sspi . SECPKG _ CRED _ INBOUND ) , null , null , null , 
 + 	 	 	 null , phServerCredential , ptsServerExpiry ) ) ; 
 + 	 / / server - - - - - - - - - - - security context 
 + 	 	 CtxtHandle phServerContext = new CtxtHandle ( ) ; 
 + 	 SecBufferDesc pbServerToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; 
 + 	 NativeLongByReference pfServerContextAttr = new NativeLongByReference ( ) ; 
 + 	 int clientRc = W32Errors . SEC _ I _ CONTINUE _ NEEDED ; 
 + 	 int serverRc = W32Errors . SEC _ I _ CONTINUE _ NEEDED ; 
 + 	 do { 
 + 	 / / client - - - - - - - - - - - initialize security context , produce a client token 
 + 	 	 / / client token returned is always new 
 + 	 SecBufferDesc pbClientToken = new SecBufferDesc ( Sspi . SECBUFFER _ TOKEN , Sspi . MAX _ TOKEN _ SIZE ) ; 
 + 	 / / server token is empty the first time 
 + 	 	 clientRc = Secur32 . INSTANCE . InitializeSecurityContext ( 
 + 	 	 	 	 phClientCredential , 
 + 	 	 	 	 phClientContext . isNull ( ) ? null : phClientContext , 
 + 	 	 	 Advapi32Util . getUserName ( ) , 
 + 	 	 	 new NativeLong ( Sspi . ISC _ REQ _ CONNECTION ) , 
 + 	 	 	 new NativeLong ( 0 ) , 
 + 	 	 	 new NativeLong ( Sspi . SECURITY _ NATIVE _ DREP ) , 
 + 	 	 	 pbServerToken , 
 + 	 	 	 new NativeLong ( 0 ) , 
 + 	 	 	 phClientContext , 
 + 	 	 	 pbClientToken , 
 + 	 	 	 pfClientContextAttr , 
 + 	 	 	 null ) ; 	 	 
 + 	 	 assertTrue ( clientRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED | | clientRc = = W32Errors . SEC _ E _ OK ) ; 	 	 
 + 	 / / server - - - - - - - - - - - accept security context , produce a server token 
 + 	 	 serverRc = Secur32 . INSTANCE . AcceptSecurityContext ( phServerCredential , 
 + 	 	 	 	 phServerContext . isNull ( ) ? null : phServerContext , 
 + 	 	 	 	 pbClientToken , 
 + 	 	 	 	 new NativeLong ( Sspi . ISC _ REQ _ CONNECTION ) , 
 + 	 	 	 	 new NativeLong ( Sspi . SECURITY _ NATIVE _ DREP ) , 
 + 	 	 	 	 phServerContext , 
 + 	 	 	 	 pbServerToken , 
 + 	 	 	 	 pfServerContextAttr , 
 + 	 	 	 	 ptsServerExpiry ) ; 	 	 
 + 	 	 assertTrue ( serverRc = = W32Errors . SEC _ I _ CONTINUE _ NEEDED | | serverRc = = W32Errors . SEC _ E _ OK ) ; 	 	 
 + 	 } while ( serverRc ! = W32Errors . SEC _ E _ OK | | clientRc ! = W32Errors . SEC _ E _ OK ) ; 	 
 + 	 / / query security context token 
 + 	 HANDLEByReference phContextToken = new HANDLEByReference ( ) ; 
 + 	 PSecHandle pphServerContext = new PSecHandle ( phServerContext ) ; 
 + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . QuerySecurityContextToken ( 
 + 	 	 	 pphServerContext , phContextToken ) ) ; 
 + 	 / / release security context token 
 + 	 assertTrue ( Kernel32 . INSTANCE . CloseHandle ( phContextToken . getValue ( ) ) ) ; 
 + 	 / / release server context 
 + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . DeleteSecurityContext ( 
 + 	 	 	 phServerContext ) ) ; 
 + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . FreeCredentialsHandle ( 
 + 	 	 	 phServerCredential ) ) ; 
 + 	 / / release client context 
 + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . DeleteSecurityContext ( 
 + 	 	 	 phClientContext ) ) ; 
 + 	 assertEquals ( W32Errors . SEC _ E _ OK , Secur32 . INSTANCE . FreeCredentialsHandle ( 
 + 	 	 	 phClientCredential ) ) ; 	 
 + } 
 }
