BLEU SCORE: 0.037477767366779206

TEST MSG: Centralize GC runs and explicitly ask the VM to run finalizations
GENERATED MSG: add alternate call convention handling to callbacks

TEST DIFF (one line): diff - - git a / test / com / sun / jna / DirectTest . java b / test / com / sun / jna / DirectTest . java <nl> index 041f2f0 . . aa4943a 100644 <nl> - - - a / test / com / sun / jna / DirectTest . java <nl> + + + b / test / com / sun / jna / DirectTest . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> <nl> / / @ SuppressWarnings ( " unused " ) <nl> - public class DirectTest extends TestCase implements Paths , GCWaits { <nl> + public class DirectTest extends TestCase implements Paths { <nl> <nl> public static void main ( java . lang . String [ ] argList ) { <nl> junit . textui . TestRunner . run ( DirectTest . class ) ; <nl> diff - - git a / test / com / sun / jna / GCWaits . java b / test / com / sun / jna / GCWaits . java <nl> index 48453ea . . e941886 100644 <nl> - - - a / test / com / sun / jna / GCWaits . java <nl> + + + b / test / com / sun / jna / GCWaits . java <nl> @ @ - 24 , 11 + 24 , 24 @ @ <nl> <nl> package com . sun . jna ; <nl> <nl> - public interface GCWaits { <nl> + public class GCWaits { <nl> + private GCWaits ( ) { } <nl> + <nl> + public static void gcRun ( ) { <nl> + try { <nl> + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> + } catch ( InterruptedException ex ) { <nl> + return ; <nl> + } <nl> + System . gc ( ) ; <nl> + System . runFinalization ( ) ; <nl> + Memory . purge ( ) ; <nl> + } <nl> + <nl> / * * Amount of time to wait for GC , in ms * / <nl> - int GC _ WAIT _ TIMEOUT = 5000 ; <nl> + public static final int GC _ WAIT _ TIMEOUT = 5000 ; <nl> / * * How long to sleep between GC * / <nl> - int GC _ WAIT _ INTERVAL = 10 ; <nl> + public static final int GC _ WAIT _ INTERVAL = 10 ; <nl> / * * Number of times to attempt GC * / <nl> - int GC _ WAITS = GC _ WAIT _ TIMEOUT / GC _ WAIT _ INTERVAL ; <nl> + public static final int GC _ WAITS = GC _ WAIT _ TIMEOUT / GC _ WAIT _ INTERVAL ; <nl> } <nl> \ No newline at end of file <nl> diff - - git a / test / com / sun / jna / JNALoadTest . java b / test / com / sun / jna / JNALoadTest . java <nl> index d953fc4 . . e64ccad 100644 <nl> - - - a / test / com / sun / jna / JNALoadTest . java <nl> + + + b / test / com / sun / jna / JNALoadTest . java <nl> @ @ - 37 , 7 + 37 , 7 @ @ import junit . framework . TestCase ; <nl> / * * Test loading and unloading native support from various locations . Note <nl> * that no JNI classes are directly referenced in these tests . <nl> * / <nl> - public class JNALoadTest extends TestCase implements Paths , GCWaits { <nl> + public class JNALoadTest extends TestCase implements Paths { <nl> <nl> private class TestLoader extends URLClassLoader { <nl> public TestLoader ( boolean fromJar ) throws MalformedURLException { <nl> @ @ - 133 , 19 + 133 , 16 @ @ public class JNALoadTest extends TestCase implements Paths , GCWaits { <nl> cls = null ; <nl> field = null ; <nl> System . gc ( ) ; <nl> - for ( int i = 0 ; i < GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { <nl> - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> - System . gc ( ) ; <nl> + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { <nl> + GCWaits . gcRun ( ) ; <nl> } <nl> assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; <nl> assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; <nl> <nl> / / Check for temporary file deletion <nl> File f = new File ( path ) ; <nl> - for ( int i = 0 ; i < GC _ WAITS & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> - System . gc ( ) ; / / attempt to fix intermittent test failures <nl> - Thread . sleep ( 4 * GC _ WAIT _ INTERVAL ) ; / / ' 4 * ' is attempt to fix intermittent test failures <nl> - System . gc ( ) ; <nl> + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> + GCWaits . gcRun ( ) ; <nl> } <nl> <nl> if ( f . exists ( ) ) { <nl> @ @ - 186 , 9 + 183 , 8 @ @ public class JNALoadTest extends TestCase implements Paths , GCWaits { <nl> cls = null ; <nl> field = null ; <nl> System . gc ( ) ; <nl> - for ( int i = 0 ; i < GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> - Thread . sleep ( 2 * GC _ WAIT _ INTERVAL ) ; / / ' 2 * ' is attempt to fix intermittent test failures <nl> - System . gc ( ) ; <nl> + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { <nl> + GCWaits . gcRun ( ) ; <nl> } <nl> assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; <nl> assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; <nl> @ @ - 197 , 9 + 193 , 8 @ @ public class JNALoadTest extends TestCase implements Paths , GCWaits { <nl> Throwable throwable = null ; <nl> / / NOTE : IBM J9 needs some extra time to unload the native library , <nl> / / so try a few times before failing <nl> - for ( int i = 0 ; i < GC _ WAITS ; i + + ) { <nl> - System . gc ( ) ; <nl> - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> + for ( int i = 0 ; i < GCWaits . GC _ WAITS ; i + + ) { <nl> + GCWaits . gcRun ( ) ; <nl> try { <nl> loader = new TestLoader ( false ) ; <nl> cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; <nl> diff - - git a / test / com / sun / jna / MemoryTest . java b / test / com / sun / jna / MemoryTest . java <nl> index a3d4d79 . . a340f99 100644 <nl> - - - a / test / com / sun / jna / MemoryTest . java <nl> + + + b / test / com / sun / jna / MemoryTest . java <nl> @ @ - 31 , 7 + 31 , 7 @ @ import java . util . Map ; <nl> <nl> import junit . framework . TestCase ; <nl> <nl> - public class MemoryTest extends TestCase implements GCWaits { <nl> + public class MemoryTest extends TestCase { <nl> <nl> public void testAutoFreeMemory ( ) throws Exception { <nl> final boolean [ ] flag = { false } ; <nl> @ @ - 56 , 10 + 56 , 8 @ @ public class MemoryTest extends TestCase implements GCWaits { <nl> long start = System . currentTimeMillis ( ) ; <nl> System . gc ( ) ; <nl> Memory . purge ( ) ; <nl> - for ( int i = 0 ; i < GC _ WAITS & & ref . get ( ) ! = null ; i + + ) { <nl> - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> - System . gc ( ) ; <nl> - Memory . purge ( ) ; <nl> + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ref . get ( ) ! = null ; i + + ) { <nl> + GCWaits . gcRun ( ) ; <nl> } <nl> long end = System . currentTimeMillis ( ) ; <nl> assertNull ( " Memory not GC ' d after " + ( end - start ) + " millis " , ref . get ( ) ) ; <nl> @ @ - 148 , 10 + 146 , 8 @ @ public class MemoryTest extends TestCase implements GCWaits { <nl> m = null ; <nl> System . gc ( ) ; <nl> Memory . purge ( ) ; <nl> - for ( int i = 0 ; i < GC _ WAITS & & ref . get ( ) ! = null ; i + + ) { <nl> - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> - System . gc ( ) ; <nl> - Memory . purge ( ) ; <nl> + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ref . get ( ) ! = null ; i + + ) { <nl> + GCWaits . gcRun ( ) ; <nl> } <nl> assertNotNull ( " Memory GC ' d while NIO Buffer still exists " , ref . get ( ) ) ; <nl> <nl> @ @ - 161 , 10 + 157 , 8 @ @ public class MemoryTest extends TestCase implements GCWaits { <nl> b = null ; <nl> System . gc ( ) ; <nl> Memory . purge ( ) ; <nl> - for ( int i = 0 ; i < GC _ WAITS & & ( bref . get ( ) ! = null | | ref . get ( ) ! = null ) ; i + + ) { <nl> - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; <nl> - System . gc ( ) ; <nl> - Memory . purge ( ) ; <nl> + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ( bref . get ( ) ! = null | | ref . get ( ) ! = null ) ; i + + ) { <nl> + GCWaits . gcRun ( ) ; <nl> } <nl> assertNull ( " Buffer not GC ' d \ n " , bref . get ( ) ) ; <nl> assertNull ( " Memory not GC ' d after buffer GC ' d \ n " , ref . get ( ) ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / test / com / sun / jna / DirectTest . java b / test / com / sun / jna / DirectTest . java 
 index 041f2f0 . . aa4943a 100644 
 - - - a / test / com / sun / jna / DirectTest . java 
 + + + b / test / com / sun / jna / DirectTest . java 
 @ @ - 36 , 7 + 36 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 
 / / @ SuppressWarnings ( " unused " ) 
 - public class DirectTest extends TestCase implements Paths , GCWaits { 
 + public class DirectTest extends TestCase implements Paths { 
 
 public static void main ( java . lang . String [ ] argList ) { 
 junit . textui . TestRunner . run ( DirectTest . class ) ; 
 diff - - git a / test / com / sun / jna / GCWaits . java b / test / com / sun / jna / GCWaits . java 
 index 48453ea . . e941886 100644 
 - - - a / test / com / sun / jna / GCWaits . java 
 + + + b / test / com / sun / jna / GCWaits . java 
 @ @ - 24 , 11 + 24 , 24 @ @ 
 
 package com . sun . jna ; 
 
 - public interface GCWaits { 
 + public class GCWaits { 
 + private GCWaits ( ) { } 
 + 
 + public static void gcRun ( ) { 
 + try { 
 + Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 + } catch ( InterruptedException ex ) { 
 + return ; 
 + } 
 + System . gc ( ) ; 
 + System . runFinalization ( ) ; 
 + Memory . purge ( ) ; 
 + } 
 + 
 / * * Amount of time to wait for GC , in ms * / 
 - int GC _ WAIT _ TIMEOUT = 5000 ; 
 + public static final int GC _ WAIT _ TIMEOUT = 5000 ; 
 / * * How long to sleep between GC * / 
 - int GC _ WAIT _ INTERVAL = 10 ; 
 + public static final int GC _ WAIT _ INTERVAL = 10 ; 
 / * * Number of times to attempt GC * / 
 - int GC _ WAITS = GC _ WAIT _ TIMEOUT / GC _ WAIT _ INTERVAL ; 
 + public static final int GC _ WAITS = GC _ WAIT _ TIMEOUT / GC _ WAIT _ INTERVAL ; 
 } 
 \ No newline at end of file 
 diff - - git a / test / com / sun / jna / JNALoadTest . java b / test / com / sun / jna / JNALoadTest . java 
 index d953fc4 . . e64ccad 100644 
 - - - a / test / com / sun / jna / JNALoadTest . java 
 + + + b / test / com / sun / jna / JNALoadTest . java 
 @ @ - 37 , 7 + 37 , 7 @ @ import junit . framework . TestCase ; 
 / * * Test loading and unloading native support from various locations . Note 
 * that no JNI classes are directly referenced in these tests . 
 * / 
 - public class JNALoadTest extends TestCase implements Paths , GCWaits { 
 + public class JNALoadTest extends TestCase implements Paths { 
 
 private class TestLoader extends URLClassLoader { 
 public TestLoader ( boolean fromJar ) throws MalformedURLException { 
 @ @ - 133 , 19 + 133 , 16 @ @ public class JNALoadTest extends TestCase implements Paths , GCWaits { 
 cls = null ; 
 field = null ; 
 System . gc ( ) ; 
 - for ( int i = 0 ; i < GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { 
 - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 - System . gc ( ) ; 
 + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null ) ; i + + ) { 
 + GCWaits . gcRun ( ) ; 
 } 
 assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; 
 assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; 
 
 / / Check for temporary file deletion 
 File f = new File ( path ) ; 
 - for ( int i = 0 ; i < GC _ WAITS & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 - System . gc ( ) ; / / attempt to fix intermittent test failures 
 - Thread . sleep ( 4 * GC _ WAIT _ INTERVAL ) ; / / ' 4 * ' is attempt to fix intermittent test failures 
 - System . gc ( ) ; 
 + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ( f . exists ( ) | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 + GCWaits . gcRun ( ) ; 
 } 
 
 if ( f . exists ( ) ) { 
 @ @ - 186 , 9 + 183 , 8 @ @ public class JNALoadTest extends TestCase implements Paths , GCWaits { 
 cls = null ; 
 field = null ; 
 System . gc ( ) ; 
 - for ( int i = 0 ; i < GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 - Thread . sleep ( 2 * GC _ WAIT _ INTERVAL ) ; / / ' 2 * ' is attempt to fix intermittent test failures 
 - System . gc ( ) ; 
 + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ( ref . get ( ) ! = null | | clref . get ( ) ! = null | | Boolean . getBoolean ( " jna . loaded " ) ) ; i + + ) { 
 + GCWaits . gcRun ( ) ; 
 } 
 assertNull ( " Class not GC ' d : " + ref . get ( ) , ref . get ( ) ) ; 
 assertNull ( " ClassLoader not GC ' d : " + clref . get ( ) , clref . get ( ) ) ; 
 @ @ - 197 , 9 + 193 , 8 @ @ public class JNALoadTest extends TestCase implements Paths , GCWaits { 
 Throwable throwable = null ; 
 / / NOTE : IBM J9 needs some extra time to unload the native library , 
 / / so try a few times before failing 
 - for ( int i = 0 ; i < GC _ WAITS ; i + + ) { 
 - System . gc ( ) ; 
 - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 + for ( int i = 0 ; i < GCWaits . GC _ WAITS ; i + + ) { 
 + GCWaits . gcRun ( ) ; 
 try { 
 loader = new TestLoader ( false ) ; 
 cls = Class . forName ( " com . sun . jna . Native " , true , loader ) ; 
 diff - - git a / test / com / sun / jna / MemoryTest . java b / test / com / sun / jna / MemoryTest . java 
 index a3d4d79 . . a340f99 100644 
 - - - a / test / com / sun / jna / MemoryTest . java 
 + + + b / test / com / sun / jna / MemoryTest . java 
 @ @ - 31 , 7 + 31 , 7 @ @ import java . util . Map ; 
 
 import junit . framework . TestCase ; 
 
 - public class MemoryTest extends TestCase implements GCWaits { 
 + public class MemoryTest extends TestCase { 
 
 public void testAutoFreeMemory ( ) throws Exception { 
 final boolean [ ] flag = { false } ; 
 @ @ - 56 , 10 + 56 , 8 @ @ public class MemoryTest extends TestCase implements GCWaits { 
 long start = System . currentTimeMillis ( ) ; 
 System . gc ( ) ; 
 Memory . purge ( ) ; 
 - for ( int i = 0 ; i < GC _ WAITS & & ref . get ( ) ! = null ; i + + ) { 
 - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 - System . gc ( ) ; 
 - Memory . purge ( ) ; 
 + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ref . get ( ) ! = null ; i + + ) { 
 + GCWaits . gcRun ( ) ; 
 } 
 long end = System . currentTimeMillis ( ) ; 
 assertNull ( " Memory not GC ' d after " + ( end - start ) + " millis " , ref . get ( ) ) ; 
 @ @ - 148 , 10 + 146 , 8 @ @ public class MemoryTest extends TestCase implements GCWaits { 
 m = null ; 
 System . gc ( ) ; 
 Memory . purge ( ) ; 
 - for ( int i = 0 ; i < GC _ WAITS & & ref . get ( ) ! = null ; i + + ) { 
 - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 - System . gc ( ) ; 
 - Memory . purge ( ) ; 
 + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ref . get ( ) ! = null ; i + + ) { 
 + GCWaits . gcRun ( ) ; 
 } 
 assertNotNull ( " Memory GC ' d while NIO Buffer still exists " , ref . get ( ) ) ; 
 
 @ @ - 161 , 10 + 157 , 8 @ @ public class MemoryTest extends TestCase implements GCWaits { 
 b = null ; 
 System . gc ( ) ; 
 Memory . purge ( ) ; 
 - for ( int i = 0 ; i < GC _ WAITS & & ( bref . get ( ) ! = null | | ref . get ( ) ! = null ) ; i + + ) { 
 - Thread . sleep ( GC _ WAIT _ INTERVAL ) ; 
 - System . gc ( ) ; 
 - Memory . purge ( ) ; 
 + for ( int i = 0 ; i < GCWaits . GC _ WAITS & & ( bref . get ( ) ! = null | | ref . get ( ) ! = null ) ; i + + ) { 
 + GCWaits . gcRun ( ) ; 
 } 
 assertNull ( " Buffer not GC ' d \ n " , bref . get ( ) ) ; 
 assertNull ( " Memory not GC ' d after buffer GC ' d \ n " , ref . get ( ) ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
