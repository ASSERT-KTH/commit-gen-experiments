BLEU SCORE: 0.004160891977396565

TEST MSG: REFIID in MSDN is defined as IID & , and IID is defined as GUID . Not sure why all of these had REFIID . ByValue , as it a ) doesn ' t work b ) crashes the JVM with invalid memory access
GENERATED MSG: some cosmetic changes

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> index 3a219cf . . c7de503 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> @ @ - 86 , 7 + 86 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> <nl> if ( COMUtils . SUCCEEDED ( hr ) ) { <nl> this . iUnknown = new Unknown ( this . pUnknown . getValue ( ) ) ; <nl> - hr = iUnknown . QueryInterface ( new REFIID . ByValue ( IDispatch . IID _ IDISPATCH ) , <nl> + hr = iUnknown . QueryInterface ( new REFIID ( IDispatch . IID _ IDISPATCH ) , <nl> this . pDispatch ) ; <nl> } else { <nl> hr = Ole32 . INSTANCE . CoCreateInstance ( clsid , null , dwClsContext , <nl> @ @ - 129 , 7 + 129 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> <nl> if ( COMUtils . SUCCEEDED ( hr ) ) { <nl> this . iUnknown = new Unknown ( this . pUnknown . getValue ( ) ) ; <nl> - hr = iUnknown . QueryInterface ( new REFIID . ByValue ( IDispatch . IID _ IDISPATCH ) , <nl> + hr = iUnknown . QueryInterface ( new REFIID ( IDispatch . IID _ IDISPATCH ) , <nl> this . pDispatch ) ; <nl> } else { <nl> hr = Ole32 . INSTANCE . CoCreateInstance ( clsid , null , dwClsContext , <nl> @ @ - 211 , 7 + 211 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> DISPIDByReference pdispID = new DISPIDByReference ( ) ; <nl> <nl> / / Get DISPID for name passed . . . <nl> - HRESULT hr = pDisp . GetIDsOfNames ( new REFIID . ByValue ( Guid . IID _ NULL ) , ptName , 1 , <nl> + HRESULT hr = pDisp . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , <nl> LOCALE _ USER _ DEFAULT , pdispID ) ; <nl> <nl> COMUtils . checkRC ( hr ) ; <nl> @ @ - 263 , 7 + 263 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> } <nl> <nl> / / Make the call ! <nl> - HRESULT hr = pDisp . Invoke ( dispId , new REFIID . ByValue ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , <nl> + HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , <nl> new WinDef . WORD ( nType ) , dp , pvResult , pExcepInfo , puArgErr ) ; <nl> <nl> COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java <nl> index 34a23b5 . . 8d55229 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class COMEarlyBindingObject extends COMBindingBaseObject implements <nl> } <nl> <nl> @ Override <nl> - public HRESULT QueryInterface ( REFIID . ByValue riid , PointerByReference ppvObject ) { <nl> + public HRESULT QueryInterface ( REFIID riid , PointerByReference ppvObject ) { <nl> return this . getIDispatch ( ) . QueryInterface ( riid , ppvObject ) ; <nl> } <nl> <nl> @ @ - 85 , 14 + 85 , 14 @ @ public class COMEarlyBindingObject extends COMBindingBaseObject implements <nl> } <nl> <nl> @ Override <nl> - public HRESULT GetIDsOfNames ( REFIID . ByValue riid , WString [ ] rgszNames , int cNames , <nl> + public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , <nl> LCID lcid , DISPIDByReference rgDispId ) { <nl> return this . getIDispatch ( ) . GetIDsOfNames ( riid , rgszNames , cNames , lcid , <nl> rgDispId ) ; <nl> } <nl> <nl> @ Override <nl> - public HRESULT Invoke ( DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , <nl> + public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , <nl> WORD wFlags , DISPPARAMS . ByReference pDispParams , <nl> VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> IntByReference puArgErr ) { <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / Dispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / Dispatch . java <nl> index c5f6577 . . d8448f2 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / Dispatch . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / Dispatch . java <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class Dispatch extends Unknown implements IDispatch { <nl> * the rg disp id <nl> * @ return the hresult <nl> * / <nl> - public HRESULT GetIDsOfNames ( REFIID . ByValue riid , WString [ ] rgszNames , int cNames , <nl> + public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , <nl> LCID lcid , DISPIDByReference rgDispId ) { <nl> return ( HRESULT ) this . _ invokeNativeObject ( 5 , <nl> new Object [ ] { this . getPointer ( ) , riid , rgszNames , cNames , <nl> @ @ - 127 , 7 + 127 , 7 @ @ public class Dispatch extends Unknown implements IDispatch { <nl> * the pu arg err <nl> * @ return the hresult <nl> * / <nl> - public HRESULT Invoke ( DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , <nl> + public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , <nl> WORD wFlags , DISPPARAMS . ByReference pDispParams , <nl> VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> IntByReference puArgErr ) { <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchListener . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchListener . java <nl> index 0043ab1 . . c3f0e79 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchListener . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchListener . java <nl> @ @ - 54 , 7 + 54 , 7 @ @ public class DispatchListener extends Structure { <nl> 	 protected void initVTable ( final IDispatchCallback callback ) { <nl> 	 	 this . vtbl . QueryInterfaceCallback = new DispatchVTable . QueryInterfaceCallback ( ) { <nl> 	 	 	 @ Override <nl> - 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID . ByValue refid , PointerByReference ppvObject ) { <nl> + 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID refid , PointerByReference ppvObject ) { <nl> 	 	 	 	 return callback . QueryInterface ( refid , ppvObject ) ; <nl> 	 	 	 } <nl> 	 	 } ; <nl> @ @ - 84 , 14 + 84 , 14 @ @ public class DispatchListener extends Structure { <nl> 	 	 } ; <nl> 	 	 this . vtbl . GetIDsOfNamesCallback = new DispatchVTable . GetIDsOfNamesCallback ( ) { <nl> 	 	 	 @ Override <nl> - 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID . ByValue riid , WString [ ] rgszNames , int cNames , LCID lcid , <nl> + 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , <nl> 	 	 	 	 	 DISPIDByReference rgDispId ) { <nl> 	 	 	 	 return callback . GetIDsOfNames ( riid , rgszNames , cNames , lcid , rgDispId ) ; <nl> 	 	 	 } <nl> 	 	 } ; <nl> 	 	 this . vtbl . InvokeCallback = new DispatchVTable . InvokeCallback ( ) { <nl> 	 	 	 @ Override <nl> - 	 	 	 public HRESULT invoke ( Pointer thisPointer , DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , WORD wFlags , <nl> + 	 	 	 public HRESULT invoke ( Pointer thisPointer , DISPID dispIdMember , REFIID riid , LCID lcid , WORD wFlags , <nl> 	 	 	 	 	 DISPPARAMS . ByReference pDispParams , VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> 	 	 IntByReference puArgErr ) { <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchVTable . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchVTable . java <nl> index 16fb47f . . ad8a61c 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchVTable . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchVTable . java <nl> @ @ - 57 , 7 + 57 , 7 @ @ public class DispatchVTable extends Structure { <nl> 	 } <nl> <nl> 	 public static interface QueryInterfaceCallback extends StdCallLibrary . StdCallCallback { <nl> - 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID . ByValue refid , PointerByReference ppvObject ) ; <nl> + 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID refid , PointerByReference ppvObject ) ; <nl> 	 } <nl> <nl> 	 public static interface AddRefCallback extends StdCallLibrary . StdCallCallback { <nl> @ @ - 77 , 12 + 77 , 12 @ @ public class DispatchVTable extends Structure { <nl> 	 } <nl> <nl> 	 public static interface GetIDsOfNamesCallback extends StdCallLibrary . StdCallCallback { <nl> - 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID . ByValue riid , WString [ ] rgszNames , int cNames , LCID lcid , <nl> + 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , <nl> 	 	 	 	 DISPIDByReference rgDispId ) ; <nl> 	 } <nl> <nl> 	 public static interface InvokeCallback extends StdCallLibrary . StdCallCallback { <nl> - 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , WORD wFlags , <nl> + 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , DISPID dispIdMember , REFIID riid , LCID lcid , WORD wFlags , <nl> 	 	 	 	 DISPPARAMS . ByReference pDispParams , VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> 	 	 	 	 IntByReference puArgErr ) ; <nl> 	 } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java <nl> index e4904cb . . 5bda7a8 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java <nl> @ @ - 31 , 10 + 31 , 10 @ @ import com . sun . jna . ptr . PointerByReference ; <nl> / / TODO : Auto - generated Javadoc <nl> / * * <nl> * Wrapper class for the IDispatch interface <nl> - * <nl> + * <nl> * IDispatch . GetTypeInfoCount 12 IDispatch . GetTypeInfo 16 <nl> * IDispatch . GetIDsOfNames 20 IDispatch . Invoke 24 <nl> - * <nl> + * <nl> * @ author Tobias Wolf , wolf . tobias @ gmx . net <nl> * / <nl> public interface IDispatch extends IUnknown { <nl> @ @ - 42 , 15 + 42 , 102 @ @ public interface IDispatch extends IUnknown { <nl> public final static IID IID _ IDISPATCH = new IID ( <nl> " 00020400 - 0000 - 0000 - C000 - 000000000046 " ) ; <nl> <nl> + / * * <nl> + * Retrieves the number of type information interfaces that an object provides ( either 0 or 1 ) . <nl> + * <nl> + * @ param pctinfo The number of type information interfaces provided by the object . If the object provides type information , this number is 1 ; otherwise the number is 0 . <nl> + * @ return This method can return one of these values . <nl> + * S _ OK <nl> + * Success . <nl> + * E _ NOTIMPL <nl> + * Failure . <nl> + * / <nl> public HRESULT GetTypeInfoCount ( UINTByReference pctinfo ) ; <nl> <nl> + / * * <nl> + * Retrieves the type information for an object , which can then be used to get the type information for an interface . <nl> + * <nl> + * @ param iTInfo The type information to return . Pass 0 to retrieve type information for the IDispatch implementation . <nl> + * @ param lcid The locale identifier for the type information . <nl> + * An object may be able to return different type information for different languages . This is important <nl> + * for classes that support localized member names . For classes that do not support localized member names , <nl> + * this parameter can be ignored . <nl> + * @ param ppTInfo The requested type information object . <nl> + * @ return S _ OK <nl> + * Success . <nl> + * DISP _ E _ BADINDEX <nl> + * The iTInfo parameter was not 0 . <nl> + * / <nl> public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , <nl> PointerByReference ppTInfo ) ; <nl> <nl> - public HRESULT GetIDsOfNames ( REFIID . ByValue riid , WString [ ] rgszNames , int cNames , <nl> + / * * <nl> + * Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs , which can be used <nl> + * on subsequent calls to Invoke . The dispatch function DispGetIDsOfNames provides a standard implementation of GetIDsOfNames . <nl> + * <nl> + * @ param riid Reserved for future use . Must be IID _ NULL . <nl> + * @ param rgszNames The array of names to be mapped . <nl> + * @ param cNames The count of the names to be mapped . <nl> + * @ param lcid The locale context in which to interpret the names . <nl> + * @ param rgDispId Caller - allocated array , each element of which contains an identifier ( ID ) corresponding to one of the names passed in <nl> + * the rgszNames array . The first element represents the member name . The subsequent elements represent each of the member ' s parameters . <nl> + * @ return <nl> + * / <nl> + public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , <nl> LCID lcid , DISPIDByReference rgDispId ) ; <nl> <nl> - public HRESULT Invoke ( DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , <nl> + / * * <nl> + * Provides access to properties and methods exposed by an object . The dispatch function DispInvoke provides a standard implementation of Invoke . <nl> + * <nl> + * @ param dispIdMember Identifies the member . Use GetIDsOfNames or the object ' s documentation to obtain the dispatch identifier . <nl> + * @ param riid Reserved for future use . Must be IID _ NULL . <nl> + * @ param lcid The locale context in which to interpret arguments . The lcid is used by the GetIDsOfNames function , and is also <nl> + * passed to Invoke to allow the object to interpret its arguments specific to a locale . <nl> + * < p / > <nl> + * Applications that do not support multiple national languages can ignore this parameter . For more information , <nl> + * refer to Supporting Multiple National Languages and Exposing ActiveX Objects . <nl> + * @ param wFlags Flags describing the context of the Invoke call . <nl> + * DISPATCH _ METHOD <nl> + * The member is invoked as a method . If a property has the same name , both this and the DISPATCH _ PROPERTYGET flag can be set . <nl> + * DISPATCH _ PROPERTYGET <nl> + * The member is retrieved as a property or data member . <nl> + * DISPATCH _ PROPERTYPUT <nl> + * The member is changed as a property or data member . <nl> + * DISPATCH _ PROPERTYPUTREF <nl> + * The member is changed by a reference assignment , rather than a value assignment . This flag is valid only when the property accepts a reference to an object . <nl> + * @ param pDispParams Pointer to a DISPPARAMS structure containing an array of arguments , an array of argument DISPIDs for named arguments , and counts for the number of elements in the arrays . <nl> + * @ param pVarResult Pointer to the location where the result is to be stored , or NULL if the caller expects no result . This argument is ignored if DISPATCH _ PROPERTYPUT or DISPATCH _ PROPERTYPUTREF is specified . <nl> + * @ param pExcepInfo Pointer to a structure that contains exception information . This structure should be filled in if DISP _ E _ EXCEPTION is returned . Can be NULL . <nl> + * @ param puArgErr The index within rgvarg of the first argument that has an error . Arguments are stored in pDispParams - > rgvarg in reverse order , <nl> + * so the first argument is the one with the highest index in the array . This parameter is returned only when the resulting return <nl> + * value is DISP _ E _ TYPEMISMATCH or DISP _ E _ PARAMNOTFOUND . This argument can be set to null . For details , see Returning Errors . <nl> + * @ return This method can return one of these values . <nl> + * S _ OK <nl> + * Success . <nl> + * DISP _ E _ BADPARAMCOUNT <nl> + * The number of elements provided to DISPPARAMS is different from the number of arguments accepted by the method or property . <nl> + * DISP _ E _ BADVARTYPE <nl> + * One of the arguments in DISPPARAMS is not a valid variant type . <nl> + * DISP _ E _ EXCEPTION <nl> + * The application needs to raise an exception . In this case , the structure passed in pexcepinfo should be filled in . <nl> + * DISP _ E _ MEMBERNOTFOUND <nl> + * The requested member does not exist . <nl> + * DISP _ E _ NONAMEDARGS <nl> + * This implementation of IDispatch does not support named arguments . <nl> + * DISP _ E _ OVERFLOW <nl> + * One of the arguments in DISPPARAMS could not be coerced to the specified type . <nl> + * DISP _ E _ PARAMNOTFOUND <nl> + * One of the parameter IDs does not correspond to a parameter on the method . In this case , puArgErr is set to the first argument that contains the error . <nl> + * DISP _ E _ TYPEMISMATCH <nl> + * One or more of the arguments could not be coerced . The index of the first parameter with the incorrect type within rgvarg is returned in puArgErr . <nl> + * DISP _ E _ UNKNOWNINTERFACE <nl> + * The interface identifier passed in riid is not IID _ NULL . <nl> + * DISP _ E _ UNKNOWNLCID <nl> + * The member being invoked interprets string arguments according to the LCID , and the LCID is not recognized . If the LCID is not needed to interpret arguments , this error should not be returned <nl> + * DISP _ E _ PARAMNOTOPTIONAL <nl> + * A required parameter was omitted . <nl> + * / <nl> + public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , <nl> WORD wFlags , DISPPARAMS . ByReference pDispParams , <nl> VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> IntByReference puArgErr ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java <nl> index e21d768 . . dd51e5b 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public interface ITypeLib extends IUnknown { <nl> / * [ annotation ] [ out ] [ in ] * / <nl> BSTRByReference szNameBuf , <nl> / * [ in ] * / ULONG lHashVal , <nl> - / * [ length _ is ] [ size _ is ] [ out ] * / ITypeInfo [ ] ppTInfo , <nl> + / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo , <nl> / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId , <nl> / * [ out ] [ in ] * / USHORTByReference pcFound ) ; <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java <nl> index 061f611 . . 049c970 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ public interface IUnknown { <nl> public final static IID IID _ IUNKNOWN = new IID ( <nl> " { 00000000 - 0000 - 0000 - C000 - 000000000046 } " ) ; <nl> <nl> - public HRESULT QueryInterface ( REFIID . ByValue riid , PointerByReference ppvObject ) ; <nl> + public HRESULT QueryInterface ( REFIID riid , PointerByReference ppvObject ) ; <nl> <nl> public int AddRef ( ) ; <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java <nl> index 04a7f25 . . 5ec1e8a 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java <nl> @ @ - 217 , 7 + 217 , 7 @ @ public class TypeLib extends Unknown implements ITypeLib { <nl> / * [ annotation ] [ out ] [ in ] * / <nl> BSTRByReference szNameBuf , <nl> / * [ in ] * / ULONG lHashVal , <nl> - / * [ length _ is ] [ size _ is ] [ out ] * / ITypeInfo [ ] ppTInfo , <nl> + / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo , <nl> / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId , <nl> / * [ out ] [ in ] * / USHORTByReference pcFound ) { <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java <nl> index 92c1adf . . ebe28da 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 . COM ; <nl> <nl> + import com . sun . jna . Pointer ; <nl> import com . sun . jna . WString ; <nl> import com . sun . jna . platform . win32 . Guid . CLSID ; <nl> import com . sun . jna . platform . win32 . Kernel32 ; <nl> @ @ - 380 , 7 + 381 , 7 @ @ public class TypeLibUtil { <nl> COMUtils . checkRC ( hr ) ; <nl> <nl> found = pcFound . getValue ( ) . shortValue ( ) ; <nl> - / * [ length _ is ] [ size _ is ] [ out ] * / ITypeInfo [ ] ppTInfo = new ITypeInfo [ found ] ; <nl> + / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo = new PointerByReference ( ) ; <nl> / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId = new MEMBERID [ found ] ; <nl> hr = this . typelib . FindName ( szNameBuf , lHashVal , ppTInfo , rgMemId , <nl> pcFound ) ; <nl> @ @ - 404 , 7 + 405 , 7 @ @ public class TypeLibUtil { <nl> private String nameBuf ; <nl> <nl> / * * The p t info . * / <nl> - private ITypeInfo [ ] pTInfo ; <nl> + private PointerByReference pTInfo ; <nl> <nl> / * * The rg mem id . * / <nl> private MEMBERID [ ] rgMemId ; <nl> @ @ - 414 , 18 + 415 , 16 @ @ public class TypeLibUtil { <nl> <nl> / * * <nl> * Instantiates a new find name . <nl> - * <nl> - * @ param nameBuf <nl> + * @ param nameBuf <nl> * the name buf <nl> * @ param pTInfo <nl> * the t info <nl> * @ param rgMemId <nl> - * the rg mem id <nl> + * the rg mem id <nl> * @ param pcFound <nl> - * the pc found <nl> * / <nl> - public FindName ( String nameBuf , ITypeInfo [ ] pTInfo , MEMBERID [ ] rgMemId , <nl> - short pcFound ) { <nl> + public FindName ( String nameBuf , PointerByReference pTInfo , MEMBERID [ ] rgMemId , <nl> + short pcFound ) { <nl> this . nameBuf = nameBuf ; <nl> this . pTInfo = pTInfo ; <nl> this . rgMemId = rgMemId ; <nl> @ @ - 447 , 7 + 446 , 14 @ @ public class TypeLibUtil { <nl> * @ return the t info <nl> * / <nl> public ITypeInfo [ ] getTInfo ( ) { <nl> - return pTInfo ; <nl> + <nl> + Pointer pVals = pTInfo . getValue ( ) ; <nl> + ITypeInfo [ ] values = new ITypeInfo [ pcFound ] ; <nl> + for ( int i = 0 ; i < pcFound ; i + + ) <nl> + { <nl> + values [ i ] = new TypeInfo ( pVals . getPointer ( i * Pointer . SIZE ) ) ; <nl> + } <nl> + return values ; <nl> } <nl> <nl> / * * <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / Unknown . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / Unknown . java <nl> index a3d993b . . 1f3f18e 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / Unknown . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / Unknown . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public class Unknown extends COMInvoker implements IUnknown { <nl> * the ppv object <nl> * @ return the hresult <nl> * / <nl> - public HRESULT QueryInterface ( REFIID . ByValue riid , PointerByReference ppvObject ) { <nl> + public HRESULT QueryInterface ( REFIID riid , PointerByReference ppvObject ) { <nl> return ( HRESULT ) this . _ invokeNativeObject ( 0 , <nl> new Object [ ] { this . getPointer ( ) , riid , ppvObject } , <nl> HRESULT . class ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownListener . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownListener . java <nl> index 8c9322b . . be1af2f 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownListener . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownListener . java <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class UnknownListener extends Structure { <nl> 	 protected void initVTable ( final IUnknownCallback callback ) { <nl> 	 	 this . vtbl . QueryInterfaceCallback = new UnknownVTable . QueryInterfaceCallback ( ) { <nl> 	 	 	 @ Override <nl> - 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID . ByValue refid , PointerByReference ppvObject ) { <nl> + 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID refid , PointerByReference ppvObject ) { <nl> 	 	 	 	 return callback . QueryInterface ( refid , ppvObject ) ; <nl> 	 	 	 } <nl> 	 	 } ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownVTable . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownVTable . java <nl> index ec53e1b . . e1052ab 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownVTable . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownVTable . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ public class UnknownVTable extends Structure { <nl> 	 } <nl> <nl> 	 public static interface QueryInterfaceCallback extends StdCallLibrary . StdCallCallback { <nl> - 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID . ByValue refid , PointerByReference ppvObject ) ; <nl> + 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID refid , PointerByReference ppvObject ) ; <nl> 	 } <nl> <nl> 	 public static interface AddRefCallback extends StdCallLibrary . StdCallCallback { <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> index 7a8ccc3 . . 3e4ac9b 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> @ @ - 85 , 12 + 85 , 12 @ @ public class CallbackProxy implements IDispatchCallback { <nl> 	 Factory factory ; <nl> 	 Class < ? > comEventCallbackInterface ; <nl> 	 IComEventCallbackListener comEventCallbackListener ; <nl> - 	 REFIID . ByValue listenedToRiid ; <nl> + 	 REFIID listenedToRiid ; <nl> 	 public DispatchListener dispatchListener ; <nl> 	 Map < DISPID , Method > dsipIdMap ; <nl> 	 ExecutorService executorService ; <nl> <nl> - 	 REFIID . ByValue createRIID ( Class < ? > comEventCallbackInterface ) { <nl> + 	 REFIID createRIID ( Class < ? > comEventCallbackInterface ) { <nl> 	 	 ComInterface comInterfaceAnnotation = comEventCallbackInterface . getAnnotation ( ComInterface . class ) ; <nl> 	 	 if ( null = = comInterfaceAnnotation ) { <nl> 	 	 	 throw new COMException ( <nl> @ @ - 100 , 7 + 100 , 7 @ @ public class CallbackProxy implements IDispatchCallback { <nl> 	 	 if ( null = = iidStr | | iidStr . isEmpty ( ) ) { <nl> 	 	 	 throw new COMException ( " ComInterface must define a value for iid " ) ; <nl> 	 	 } <nl> - 	 	 return new REFIID . ByValue ( new IID ( iidStr ) . getPointer ( ) ) ; <nl> + 	 	 return new REFIID ( new IID ( iidStr ) . getPointer ( ) ) ; <nl> 	 } <nl> <nl> 	 Map < DISPID , Method > createDispIdMap ( Class < ? > comEventCallbackInterface ) { <nl> @ @ - 125 , 7 + 125 , 7 @ @ public class CallbackProxy implements IDispatchCallback { <nl> 	 	 return - 1 ; <nl> 	 } <nl> <nl> - 	 void invokeOnThread ( final DISPID dispIdMember , final REFIID . ByValue riid , LCID lcid , WORD wFlags , <nl> + 	 void invokeOnThread ( final DISPID dispIdMember , final REFIID riid , LCID lcid , WORD wFlags , <nl> 	 	 	 final DISPPARAMS . ByReference pDispParams ) { <nl> 	 	 / / decode arguments <nl> 	 	 / / must decode them on this thread , and create a proxy for any COM objects ( IDispatch ) <nl> @ @ - 142 , 7 + 142 , 7 @ @ public class CallbackProxy implements IDispatchCallback { <nl> 	 	 	 	 	 / / get raw IUnknown interface <nl> 	 	 	 	 	 PointerByReference ppvObject = new PointerByReference ( ) ; <nl> 	 	 	 	 	 IID iid = com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; <nl> - 	 	 	 	 	 dispatch . QueryInterface ( new REFIID . ByValue ( iid ) , ppvObject ) ; <nl> + 	 	 	 	 	 dispatch . QueryInterface ( new REFIID ( iid ) , ppvObject ) ; <nl> 	 	 	 	 	 Unknown rawUnk = new Unknown ( ppvObject . getValue ( ) ) ; <nl> 	 	 	 	 	 long unknownId = Pointer . nativeValue ( rawUnk . getPointer ( ) ) ; <nl> 	 	 	 	 	 int n = rawUnk . Release ( ) ; <nl> @ @ - 222 , 13 + 222 , 13 @ @ public class CallbackProxy implements IDispatchCallback { <nl> 	 } <nl> <nl> 	 @ Override <nl> - 	 public HRESULT GetIDsOfNames ( REFIID . ByValue riid , WString [ ] rgszNames , int cNames , LCID lcid , <nl> + 	 public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , <nl> 	 	 	 DISPIDByReference rgDispId ) { <nl> 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; <nl> 	 } <nl> <nl> 	 @ Override <nl> - 	 public HRESULT Invoke ( DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , WORD wFlags , <nl> + 	 public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , WORD wFlags , <nl> 	 	 	 DISPPARAMS . ByReference pDispParams , VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> 	 	 	 IntByReference puArgErr ) { <nl> <nl> @ @ - 239 , 7 + 239 , 7 @ @ public class CallbackProxy implements IDispatchCallback { <nl> <nl> 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IUnknown - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> 	 @ Override <nl> - 	 public HRESULT QueryInterface ( REFIID . ByValue refid , PointerByReference ppvObject ) { <nl> + 	 public HRESULT QueryInterface ( REFIID refid , PointerByReference ppvObject ) { <nl> 	 	 if ( null = = ppvObject ) { <nl> 	 	 	 return new HRESULT ( WinError . E _ POINTER ) ; <nl> 	 	 } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> index 20cbb12 . . 307c0ff 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> @ @ - 116 , 7 + 116 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 	 	 	 @ Override <nl> 	 	 	 	 	 public HRESULT call ( ) throws Exception { <nl> 	 	 	 	 	 	 IID iid = com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; <nl> - 	 	 	 	 	 	 return ProxyObject . this . getRawDispatch ( ) . QueryInterface ( new REFIID . ByValue ( iid ) , ppvObject ) ; <nl> + 	 	 	 	 	 	 return ProxyObject . this . getRawDispatch ( ) . QueryInterface ( new REFIID ( iid ) , ppvObject ) ; <nl> 	 	 	 	 	 } <nl> 	 	 	 	 } ) ; <nl> 	 	 	 	 <nl> @ @ - 439 , 7 + 439 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 	 HRESULT hr = this . comThread . execute ( new Callable < HRESULT > ( ) { <nl> 	 	 	 	 @ Override <nl> 	 	 	 	 public HRESULT call ( ) throws Exception { <nl> - 	 	 	 	 	 return ProxyObject . this . getRawDispatch ( ) . QueryInterface ( new REFIID . ByValue ( iid ) , ppvObject ) ; <nl> + 	 	 	 	 	 return ProxyObject . this . getRawDispatch ( ) . QueryInterface ( new REFIID ( iid ) , ppvObject ) ; <nl> 	 	 	 	 } <nl> 	 	 	 } ) ; <nl> <nl> @ @ - 564 , 7 + 564 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 	 HRESULT hr = this . comThread . execute ( new Callable < HRESULT > ( ) { <nl> 	 	 	 	 @ Override <nl> 	 	 	 	 public HRESULT call ( ) throws Exception { <nl> - 	 	 	 	 	 HRESULT hr = pDisp . GetIDsOfNames ( new REFIID . ByValue ( Guid . IID _ NULL ) , ptName , 1 , LOCALE _ USER _ DEFAULT , <nl> + 	 	 	 	 	 HRESULT hr = pDisp . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , LOCALE _ USER _ DEFAULT , <nl> 	 	 	 	 	 	 	 pdispID ) ; <nl> 	 	 	 	 	 return hr ; <nl> 	 	 	 	 } <nl> @ @ - 630 , 7 + 630 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 	 HRESULT hr = this . comThread . execute ( new Callable < HRESULT > ( ) { <nl> 	 	 	 	 @ Override <nl> 	 	 	 	 public HRESULT call ( ) throws Exception { <nl> - 	 	 	 	 	 return pDisp . Invoke ( dispId , new REFIID . ByValue ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , <nl> + 	 	 	 	 	 return pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , <nl> 	 	 	 	 	 	 	 new WinDef . WORD ( nType ) , dp , pvResult , pExcepInfo , puArgErr ) ; <nl> 	 	 	 	 } <nl> 	 	 	 } ) ;
NEAREST DIFF (one line): diff - - git a / contrib / msoffice / jnatest . xls b / contrib / msoffice / jnatest . xls <nl> new file mode 100644 <nl> index 0000000 . . effa963 <nl> Binary files / dev / null and b / contrib / msoffice / jnatest . xls differ <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java <nl> new file mode 100644 <nl> index 0000000 . . 487c989 <nl> - - - / dev / null <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java <nl> @ @ - 0 , 0 + 1 , 162 @ @ <nl> + package com . sun . jna . platform . win32 . office ; <nl> + <nl> + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; <nl> + import com . sun . jna . platform . win32 . OleAut32 ; <nl> + import com . sun . jna . platform . win32 . Variant ; <nl> + import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> + import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> + import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> + import com . sun . jna . platform . win32 . COM . COMException ; <nl> + import com . sun . jna . platform . win32 . COM . COMObject ; <nl> + import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> + import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> + <nl> + public class MSExcel extends COMObject { <nl> + <nl> + 	 public MSExcel ( ) throws COMException { <nl> + 	 	 super ( " Excel . Application " , false ) ; <nl> + 	 } <nl> + <nl> + 	 public MSExcel ( boolean visible ) throws COMException { <nl> + 	 	 this ( ) ; <nl> + 	 	 this . setVisible ( Variant . VARIANT _ TRUE ) ; <nl> + 	 } <nl> + <nl> + 	 public void setVisible ( VARIANT _ BOOL bVisible ) throws COMException { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , result , this . iDispatch , <nl> + 	 	 	 	 " Visible " , new VARIANT ( bVisible ) ) ; <nl> + 	 } <nl> + <nl> + 	 public String getVersion ( ) throws COMException { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , <nl> + 	 	 	 	 " Version " ) ; <nl> + <nl> + 	 	 return result . getValue ( ) . toString ( ) ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT newExcelBook ( ) throws COMException { <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , getWorkbooks ( ) <nl> + 	 	 	 	 . getIDispatch ( ) , " Add " ) ; <nl> + <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT openExcelBook ( String filename , boolean bVisible ) <nl> + 	 	 	 throws COMException { <nl> + 	 	 / / OpenDocument <nl> + 	 	 BSTR bstrFilename = OleAut32 . INSTANCE . SysAllocString ( filename ) ; <nl> + 	 	 VARIANT varFilename = new VARIANT ( bstrFilename ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , getWorkbooks ( ) <nl> + 	 	 	 	 . getIDispatch ( ) , " Open " , varFilename ) ; <nl> + <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT closeActiveWorkbook ( VARIANT _ BOOL bSave ) throws COMException { <nl> + <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> + 	 	 	 	 getActiveWorkbook ( ) . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; <nl> + <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT quit ( ) throws COMException { <nl> + 	 	 HRESULT hr = this . oleMethod ( OleAut32 . DISPATCH _ METHOD , null , <nl> + 	 	 	 	 this . iDispatch , " Quit " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public HRESULT insertValue ( String range , String value ) throws COMException { <nl> + 	 	 HRESULT hr ; <nl> + <nl> + 	 	 BSTR bstrRange = OleAut32 . INSTANCE . SysAllocString ( range ) ; <nl> + 	 	 VARIANT varRange = new VARIANT ( bstrRange ) ; <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this <nl> + 	 	 	 	 . getActiveSheet ( ) . getIDispatch ( ) , " Range " , varRange ) ; <nl> + 	 	 Range pRange = new Range ( ( IDispatch ) result . getValue ( ) ) ; <nl> + <nl> + 	 	 BSTR bstrValue = OleAut32 . INSTANCE . SysAllocString ( value ) ; <nl> + 	 	 VARIANT varText = new VARIANT ( bstrValue ) ; <nl> + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , null , <nl> + 	 	 	 	 pRange . getIDispatch ( ) , " Value " , varText ) ; <nl> + <nl> + 	 	 return hr ; <nl> + 	 } <nl> + <nl> + 	 public Application getApplication ( ) { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> + 	 	 	 	 this . iDispatch , " Application " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new Application ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public ActiveWorkbook getActiveWorkbook ( ) { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> + 	 	 	 	 this . iDispatch , " ActiveWorkbook " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new ActiveWorkbook ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public Workbooks getWorkbooks ( ) { <nl> + 	 	 / / GetDocuments <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> + 	 	 	 	 this . iDispatch , " WorkBooks " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new Workbooks ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public ActiveSheet getActiveSheet ( ) { <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> + 	 	 	 	 this . iDispatch , " ActiveSheet " ) ; <nl> + <nl> + 	 	 COMUtils . SUCCEEDED ( hr ) ; <nl> + 	 	 return new ActiveSheet ( ( IDispatch ) result . getValue ( ) ) ; <nl> + 	 } <nl> + <nl> + 	 public class Application extends COMObject { <nl> + <nl> + 	 	 public Application ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class Workbooks extends COMObject { <nl> + <nl> + 	 	 public Workbooks ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class ActiveWorkbook extends COMObject { <nl> + <nl> + 	 	 public ActiveWorkbook ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class ActiveSheet extends COMObject { <nl> + <nl> + 	 	 public ActiveSheet ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public class Range extends COMObject { <nl> + <nl> + 	 	 public Range ( IDispatch iDispatch ) throws COMException { <nl> + 	 	 	 super ( iDispatch ) ; <nl> + 	 	 } <nl> + 	 } <nl> + } <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> index 77c8b4b . . 7eb0115 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java <nl> @ @ - 18 , 11 + 18 , 16 @ @ public class MSOfficeDemo { <nl> 	 	 	 + File . separator ; <nl> <nl> 	 public MSOfficeDemo ( ) { <nl> + 	 	 / / this . testMSWord ( ) ; <nl> + 	 	 this . testMSExcel ( ) ; <nl> + 	 } <nl> + 	 <nl> + 	 public void testMSWord ( ) { <nl> 	 	 MSWord msWord = null ; <nl> <nl> 	 	 try { <nl> 	 	 	 msWord = new MSWord ( ) ; <nl> - 	 	 	 / / System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; <nl> + 	 	 	 System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; <nl> 	 	 	 msWord . setVisible ( Variant . VARIANT _ TRUE ) ; <nl> 	 	 	 msWord . newDocument ( ) ; <nl> 	 	 	 / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; <nl> @ @ - 44 , 4 + 49 , 32 @ @ public class MSOfficeDemo { <nl> 	 	 	 	 msWord . quit ( ) ; <nl> 	 	 } <nl> 	 } <nl> + 	 <nl> + 	 public void testMSExcel ( ) { <nl> + 	 	 MSExcel msExcel = null ; <nl> + <nl> + 	 	 try { <nl> + 	 	 	 msExcel = new MSExcel ( ) ; <nl> + 	 	 	 System . out . println ( " MSExcel version : " + msExcel . getVersion ( ) ) ; <nl> + 	 	 	 msExcel . setVisible ( Variant . VARIANT _ TRUE ) ; <nl> + 	 	 	 / / msExcel . newExcelBook ( ) ; <nl> + 	 	 	 msExcel . openExcelBook ( currentWorkingDir + " jnatest . xls " , true ) ; <nl> + 	 	 	 msExcel . insertValue ( " A1 " , " Hello from JNA ! " ) ; <nl> + 	 	 	 / / close and save the active sheet <nl> + 	 	 	 msExcel . closeActiveWorkbook ( Variant . VARIANT _ TRUE ) ; <nl> + 	 	 	 / / wait then close excel <nl> + 	 	 	 msExcel . quit ( ) ; <nl> + 	 	 } catch ( COMException e ) { <nl> + 	 	 	 if ( e . getExcepInfo ( ) ! = null ) { <nl> + 	 	 	 	 System . out <nl> + 	 	 	 	 	 	 . println ( " bstrSource : " + e . getExcepInfo ( ) . bstrSource ) ; <nl> + 	 	 	 	 System . out . println ( " bstrDescription : " <nl> + 	 	 	 	 	 	 + e . getExcepInfo ( ) . bstrDescription ) ; <nl> + 	 	 	 } else <nl> + 	 	 	 	 e . printStackTrace ( ) ; <nl> + 	 	 	 <nl> + 	 	 	 if ( msExcel ! = null ) <nl> + 	 	 	 	 msExcel . quit ( ) ; <nl> + 	 	 } <nl> + 	 } <nl> } <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java <nl> deleted file mode 100644 <nl> index 3762b9c . . 0000000 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java <nl> + + + / dev / null <nl> @ @ - 1 , 30 + 0 , 0 @ @ <nl> - package com . sun . jna . platform . win32 . office ; <nl> - <nl> - public class MSOfficeException extends Exception { <nl> - <nl> - 	 public MSOfficeException ( ) { <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - 	 public MSOfficeException ( String arg0 ) { <nl> - 	 	 super ( arg0 ) ; <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - 	 public MSOfficeException ( Throwable arg0 ) { <nl> - 	 	 super ( arg0 ) ; <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - 	 public MSOfficeException ( String arg0 , Throwable arg1 ) { <nl> - 	 	 super ( arg0 , arg1 ) ; <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - 	 public MSOfficeException ( String arg0 , Throwable arg1 , boolean arg2 , <nl> - 	 	 	 boolean arg3 ) { <nl> - 	 	 super ( arg0 , arg1 , arg2 , arg3 ) ; <nl> - 	 	 / / TODO Auto - generated constructor stub <nl> - 	 } <nl> - <nl> - } <nl> diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> index 61015fd . . 250d4f6 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java <nl> @ @ - 74 , 10 + 74 , 10 @ @ public class MSWord extends COMObject { <nl> 	 public HRESULT insertText ( String text ) throws COMException { <nl> 	 	 HRESULT hr ; <nl> <nl> - 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; <nl> - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result2 , <nl> + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; <nl> + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , <nl> 	 	 	 	 this . iDispatch , " Selection " ) ; <nl> - 	 	 Selection pSelection = new Selection ( ( IDispatch ) result2 . getValue ( ) ) ; <nl> + 	 	 Selection pSelection = new Selection ( ( IDispatch ) result . getValue ( ) ) ; <nl> <nl> 	 	 BSTR bstrText = OleAut32 . INSTANCE . SysAllocString ( text ) ; <nl> 	 	 VARIANT varText = new VARIANT ( bstrText ) ;

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 index 3a219cf . . c7de503 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 @ @ - 86 , 7 + 86 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { 
 
 if ( COMUtils . SUCCEEDED ( hr ) ) { 
 this . iUnknown = new Unknown ( this . pUnknown . getValue ( ) ) ; 
 - hr = iUnknown . QueryInterface ( new REFIID . ByValue ( IDispatch . IID _ IDISPATCH ) , 
 + hr = iUnknown . QueryInterface ( new REFIID ( IDispatch . IID _ IDISPATCH ) , 
 this . pDispatch ) ; 
 } else { 
 hr = Ole32 . INSTANCE . CoCreateInstance ( clsid , null , dwClsContext , 
 @ @ - 129 , 7 + 129 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { 
 
 if ( COMUtils . SUCCEEDED ( hr ) ) { 
 this . iUnknown = new Unknown ( this . pUnknown . getValue ( ) ) ; 
 - hr = iUnknown . QueryInterface ( new REFIID . ByValue ( IDispatch . IID _ IDISPATCH ) , 
 + hr = iUnknown . QueryInterface ( new REFIID ( IDispatch . IID _ IDISPATCH ) , 
 this . pDispatch ) ; 
 } else { 
 hr = Ole32 . INSTANCE . CoCreateInstance ( clsid , null , dwClsContext , 
 @ @ - 211 , 7 + 211 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { 
 DISPIDByReference pdispID = new DISPIDByReference ( ) ; 
 
 / / Get DISPID for name passed . . . 
 - HRESULT hr = pDisp . GetIDsOfNames ( new REFIID . ByValue ( Guid . IID _ NULL ) , ptName , 1 , 
 + HRESULT hr = pDisp . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , 
 LOCALE _ USER _ DEFAULT , pdispID ) ; 
 
 COMUtils . checkRC ( hr ) ; 
 @ @ - 263 , 7 + 263 , 7 @ @ public class COMBindingBaseObject extends COMInvoker { 
 } 
 
 / / Make the call ! 
 - HRESULT hr = pDisp . Invoke ( dispId , new REFIID . ByValue ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , 
 + HRESULT hr = pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , 
 new WinDef . WORD ( nType ) , dp , pvResult , pExcepInfo , puArgErr ) ; 
 
 COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java 
 index 34a23b5 . . 8d55229 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java 
 @ @ - 59 , 7 + 59 , 7 @ @ public class COMEarlyBindingObject extends COMBindingBaseObject implements 
 } 
 
 @ Override 
 - public HRESULT QueryInterface ( REFIID . ByValue riid , PointerByReference ppvObject ) { 
 + public HRESULT QueryInterface ( REFIID riid , PointerByReference ppvObject ) { 
 return this . getIDispatch ( ) . QueryInterface ( riid , ppvObject ) ; 
 } 
 
 @ @ - 85 , 14 + 85 , 14 @ @ public class COMEarlyBindingObject extends COMBindingBaseObject implements 
 } 
 
 @ Override 
 - public HRESULT GetIDsOfNames ( REFIID . ByValue riid , WString [ ] rgszNames , int cNames , 
 + public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , 
 LCID lcid , DISPIDByReference rgDispId ) { 
 return this . getIDispatch ( ) . GetIDsOfNames ( riid , rgszNames , cNames , lcid , 
 rgDispId ) ; 
 } 
 
 @ Override 
 - public HRESULT Invoke ( DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , 
 + public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , 
 WORD wFlags , DISPPARAMS . ByReference pDispParams , 
 VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 IntByReference puArgErr ) { 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / Dispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / Dispatch . java 
 index c5f6577 . . d8448f2 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / Dispatch . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / Dispatch . java 
 @ @ - 99 , 7 + 99 , 7 @ @ public class Dispatch extends Unknown implements IDispatch { 
 * the rg disp id 
 * @ return the hresult 
 * / 
 - public HRESULT GetIDsOfNames ( REFIID . ByValue riid , WString [ ] rgszNames , int cNames , 
 + public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , 
 LCID lcid , DISPIDByReference rgDispId ) { 
 return ( HRESULT ) this . _ invokeNativeObject ( 5 , 
 new Object [ ] { this . getPointer ( ) , riid , rgszNames , cNames , 
 @ @ - 127 , 7 + 127 , 7 @ @ public class Dispatch extends Unknown implements IDispatch { 
 * the pu arg err 
 * @ return the hresult 
 * / 
 - public HRESULT Invoke ( DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , 
 + public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , 
 WORD wFlags , DISPPARAMS . ByReference pDispParams , 
 VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 IntByReference puArgErr ) { 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchListener . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchListener . java 
 index 0043ab1 . . c3f0e79 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchListener . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchListener . java 
 @ @ - 54 , 7 + 54 , 7 @ @ public class DispatchListener extends Structure { 
 	 protected void initVTable ( final IDispatchCallback callback ) { 
 	 	 this . vtbl . QueryInterfaceCallback = new DispatchVTable . QueryInterfaceCallback ( ) { 
 	 	 	 @ Override 
 - 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID . ByValue refid , PointerByReference ppvObject ) { 
 + 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID refid , PointerByReference ppvObject ) { 
 	 	 	 	 return callback . QueryInterface ( refid , ppvObject ) ; 
 	 	 	 } 
 	 	 } ; 
 @ @ - 84 , 14 + 84 , 14 @ @ public class DispatchListener extends Structure { 
 	 	 } ; 
 	 	 this . vtbl . GetIDsOfNamesCallback = new DispatchVTable . GetIDsOfNamesCallback ( ) { 
 	 	 	 @ Override 
 - 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID . ByValue riid , WString [ ] rgszNames , int cNames , LCID lcid , 
 + 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , 
 	 	 	 	 	 DISPIDByReference rgDispId ) { 
 	 	 	 	 return callback . GetIDsOfNames ( riid , rgszNames , cNames , lcid , rgDispId ) ; 
 	 	 	 } 
 	 	 } ; 
 	 	 this . vtbl . InvokeCallback = new DispatchVTable . InvokeCallback ( ) { 
 	 	 	 @ Override 
 - 	 	 	 public HRESULT invoke ( Pointer thisPointer , DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , WORD wFlags , 
 + 	 	 	 public HRESULT invoke ( Pointer thisPointer , DISPID dispIdMember , REFIID riid , LCID lcid , WORD wFlags , 
 	 	 	 	 	 DISPPARAMS . ByReference pDispParams , VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 	 	 IntByReference puArgErr ) { 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchVTable . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchVTable . java 
 index 16fb47f . . ad8a61c 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchVTable . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / DispatchVTable . java 
 @ @ - 57 , 7 + 57 , 7 @ @ public class DispatchVTable extends Structure { 
 	 } 
 
 	 public static interface QueryInterfaceCallback extends StdCallLibrary . StdCallCallback { 
 - 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID . ByValue refid , PointerByReference ppvObject ) ; 
 + 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID refid , PointerByReference ppvObject ) ; 
 	 } 
 
 	 public static interface AddRefCallback extends StdCallLibrary . StdCallCallback { 
 @ @ - 77 , 12 + 77 , 12 @ @ public class DispatchVTable extends Structure { 
 	 } 
 
 	 public static interface GetIDsOfNamesCallback extends StdCallLibrary . StdCallCallback { 
 - 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID . ByValue riid , WString [ ] rgszNames , int cNames , LCID lcid , 
 + 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , 
 	 	 	 	 DISPIDByReference rgDispId ) ; 
 	 } 
 
 	 public static interface InvokeCallback extends StdCallLibrary . StdCallCallback { 
 - 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , WORD wFlags , 
 + 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , DISPID dispIdMember , REFIID riid , LCID lcid , WORD wFlags , 
 	 	 	 	 DISPPARAMS . ByReference pDispParams , VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 	 	 	 	 IntByReference puArgErr ) ; 
 	 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java 
 index e4904cb . . 5bda7a8 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IDispatch . java 
 @ @ - 31 , 10 + 31 , 10 @ @ import com . sun . jna . ptr . PointerByReference ; 
 / / TODO : Auto - generated Javadoc 
 / * * 
 * Wrapper class for the IDispatch interface 
 - * 
 + * 
 * IDispatch . GetTypeInfoCount 12 IDispatch . GetTypeInfo 16 
 * IDispatch . GetIDsOfNames 20 IDispatch . Invoke 24 
 - * 
 + * 
 * @ author Tobias Wolf , wolf . tobias @ gmx . net 
 * / 
 public interface IDispatch extends IUnknown { 
 @ @ - 42 , 15 + 42 , 102 @ @ public interface IDispatch extends IUnknown { 
 public final static IID IID _ IDISPATCH = new IID ( 
 " 00020400 - 0000 - 0000 - C000 - 000000000046 " ) ; 
 
 + / * * 
 + * Retrieves the number of type information interfaces that an object provides ( either 0 or 1 ) . 
 + * 
 + * @ param pctinfo The number of type information interfaces provided by the object . If the object provides type information , this number is 1 ; otherwise the number is 0 . 
 + * @ return This method can return one of these values . 
 + * S _ OK 
 + * Success . 
 + * E _ NOTIMPL 
 + * Failure . 
 + * / 
 public HRESULT GetTypeInfoCount ( UINTByReference pctinfo ) ; 
 
 + / * * 
 + * Retrieves the type information for an object , which can then be used to get the type information for an interface . 
 + * 
 + * @ param iTInfo The type information to return . Pass 0 to retrieve type information for the IDispatch implementation . 
 + * @ param lcid The locale identifier for the type information . 
 + * An object may be able to return different type information for different languages . This is important 
 + * for classes that support localized member names . For classes that do not support localized member names , 
 + * this parameter can be ignored . 
 + * @ param ppTInfo The requested type information object . 
 + * @ return S _ OK 
 + * Success . 
 + * DISP _ E _ BADINDEX 
 + * The iTInfo parameter was not 0 . 
 + * / 
 public HRESULT GetTypeInfo ( UINT iTInfo , LCID lcid , 
 PointerByReference ppTInfo ) ; 
 
 - public HRESULT GetIDsOfNames ( REFIID . ByValue riid , WString [ ] rgszNames , int cNames , 
 + / * * 
 + * Maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs , which can be used 
 + * on subsequent calls to Invoke . The dispatch function DispGetIDsOfNames provides a standard implementation of GetIDsOfNames . 
 + * 
 + * @ param riid Reserved for future use . Must be IID _ NULL . 
 + * @ param rgszNames The array of names to be mapped . 
 + * @ param cNames The count of the names to be mapped . 
 + * @ param lcid The locale context in which to interpret the names . 
 + * @ param rgDispId Caller - allocated array , each element of which contains an identifier ( ID ) corresponding to one of the names passed in 
 + * the rgszNames array . The first element represents the member name . The subsequent elements represent each of the member ' s parameters . 
 + * @ return 
 + * / 
 + public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , 
 LCID lcid , DISPIDByReference rgDispId ) ; 
 
 - public HRESULT Invoke ( DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , 
 + / * * 
 + * Provides access to properties and methods exposed by an object . The dispatch function DispInvoke provides a standard implementation of Invoke . 
 + * 
 + * @ param dispIdMember Identifies the member . Use GetIDsOfNames or the object ' s documentation to obtain the dispatch identifier . 
 + * @ param riid Reserved for future use . Must be IID _ NULL . 
 + * @ param lcid The locale context in which to interpret arguments . The lcid is used by the GetIDsOfNames function , and is also 
 + * passed to Invoke to allow the object to interpret its arguments specific to a locale . 
 + * < p / > 
 + * Applications that do not support multiple national languages can ignore this parameter . For more information , 
 + * refer to Supporting Multiple National Languages and Exposing ActiveX Objects . 
 + * @ param wFlags Flags describing the context of the Invoke call . 
 + * DISPATCH _ METHOD 
 + * The member is invoked as a method . If a property has the same name , both this and the DISPATCH _ PROPERTYGET flag can be set . 
 + * DISPATCH _ PROPERTYGET 
 + * The member is retrieved as a property or data member . 
 + * DISPATCH _ PROPERTYPUT 
 + * The member is changed as a property or data member . 
 + * DISPATCH _ PROPERTYPUTREF 
 + * The member is changed by a reference assignment , rather than a value assignment . This flag is valid only when the property accepts a reference to an object . 
 + * @ param pDispParams Pointer to a DISPPARAMS structure containing an array of arguments , an array of argument DISPIDs for named arguments , and counts for the number of elements in the arrays . 
 + * @ param pVarResult Pointer to the location where the result is to be stored , or NULL if the caller expects no result . This argument is ignored if DISPATCH _ PROPERTYPUT or DISPATCH _ PROPERTYPUTREF is specified . 
 + * @ param pExcepInfo Pointer to a structure that contains exception information . This structure should be filled in if DISP _ E _ EXCEPTION is returned . Can be NULL . 
 + * @ param puArgErr The index within rgvarg of the first argument that has an error . Arguments are stored in pDispParams - > rgvarg in reverse order , 
 + * so the first argument is the one with the highest index in the array . This parameter is returned only when the resulting return 
 + * value is DISP _ E _ TYPEMISMATCH or DISP _ E _ PARAMNOTFOUND . This argument can be set to null . For details , see Returning Errors . 
 + * @ return This method can return one of these values . 
 + * S _ OK 
 + * Success . 
 + * DISP _ E _ BADPARAMCOUNT 
 + * The number of elements provided to DISPPARAMS is different from the number of arguments accepted by the method or property . 
 + * DISP _ E _ BADVARTYPE 
 + * One of the arguments in DISPPARAMS is not a valid variant type . 
 + * DISP _ E _ EXCEPTION 
 + * The application needs to raise an exception . In this case , the structure passed in pexcepinfo should be filled in . 
 + * DISP _ E _ MEMBERNOTFOUND 
 + * The requested member does not exist . 
 + * DISP _ E _ NONAMEDARGS 
 + * This implementation of IDispatch does not support named arguments . 
 + * DISP _ E _ OVERFLOW 
 + * One of the arguments in DISPPARAMS could not be coerced to the specified type . 
 + * DISP _ E _ PARAMNOTFOUND 
 + * One of the parameter IDs does not correspond to a parameter on the method . In this case , puArgErr is set to the first argument that contains the error . 
 + * DISP _ E _ TYPEMISMATCH 
 + * One or more of the arguments could not be coerced . The index of the first parameter with the incorrect type within rgvarg is returned in puArgErr . 
 + * DISP _ E _ UNKNOWNINTERFACE 
 + * The interface identifier passed in riid is not IID _ NULL . 
 + * DISP _ E _ UNKNOWNLCID 
 + * The member being invoked interprets string arguments according to the LCID , and the LCID is not recognized . If the LCID is not needed to interpret arguments , this error should not be returned 
 + * DISP _ E _ PARAMNOTOPTIONAL 
 + * A required parameter was omitted . 
 + * / 
 + public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , 
 WORD wFlags , DISPPARAMS . ByReference pDispParams , 
 VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 IntByReference puArgErr ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java 
 index e21d768 . . dd51e5b 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / ITypeLib . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public interface ITypeLib extends IUnknown { 
 / * [ annotation ] [ out ] [ in ] * / 
 BSTRByReference szNameBuf , 
 / * [ in ] * / ULONG lHashVal , 
 - / * [ length _ is ] [ size _ is ] [ out ] * / ITypeInfo [ ] ppTInfo , 
 + / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo , 
 / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId , 
 / * [ out ] [ in ] * / USHORTByReference pcFound ) ; 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java 
 index 061f611 . . 049c970 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / IUnknown . java 
 @ @ - 32 , 7 + 32 , 7 @ @ public interface IUnknown { 
 public final static IID IID _ IUNKNOWN = new IID ( 
 " { 00000000 - 0000 - 0000 - C000 - 000000000046 } " ) ; 
 
 - public HRESULT QueryInterface ( REFIID . ByValue riid , PointerByReference ppvObject ) ; 
 + public HRESULT QueryInterface ( REFIID riid , PointerByReference ppvObject ) ; 
 
 public int AddRef ( ) ; 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java 
 index 04a7f25 . . 5ec1e8a 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLib . java 
 @ @ - 217 , 7 + 217 , 7 @ @ public class TypeLib extends Unknown implements ITypeLib { 
 / * [ annotation ] [ out ] [ in ] * / 
 BSTRByReference szNameBuf , 
 / * [ in ] * / ULONG lHashVal , 
 - / * [ length _ is ] [ size _ is ] [ out ] * / ITypeInfo [ ] ppTInfo , 
 + / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo , 
 / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId , 
 / * [ out ] [ in ] * / USHORTByReference pcFound ) { 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java 
 index 92c1adf . . ebe28da 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / TypeLibUtil . java 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * / 
 package com . sun . jna . platform . win32 . COM ; 
 
 + import com . sun . jna . Pointer ; 
 import com . sun . jna . WString ; 
 import com . sun . jna . platform . win32 . Guid . CLSID ; 
 import com . sun . jna . platform . win32 . Kernel32 ; 
 @ @ - 380 , 7 + 381 , 7 @ @ public class TypeLibUtil { 
 COMUtils . checkRC ( hr ) ; 
 
 found = pcFound . getValue ( ) . shortValue ( ) ; 
 - / * [ length _ is ] [ size _ is ] [ out ] * / ITypeInfo [ ] ppTInfo = new ITypeInfo [ found ] ; 
 + / * [ length _ is ] [ size _ is ] [ out ] * / PointerByReference ppTInfo = new PointerByReference ( ) ; 
 / * [ length _ is ] [ size _ is ] [ out ] * / MEMBERID [ ] rgMemId = new MEMBERID [ found ] ; 
 hr = this . typelib . FindName ( szNameBuf , lHashVal , ppTInfo , rgMemId , 
 pcFound ) ; 
 @ @ - 404 , 7 + 405 , 7 @ @ public class TypeLibUtil { 
 private String nameBuf ; 
 
 / * * The p t info . * / 
 - private ITypeInfo [ ] pTInfo ; 
 + private PointerByReference pTInfo ; 
 
 / * * The rg mem id . * / 
 private MEMBERID [ ] rgMemId ; 
 @ @ - 414 , 18 + 415 , 16 @ @ public class TypeLibUtil { 
 
 / * * 
 * Instantiates a new find name . 
 - * 
 - * @ param nameBuf 
 + * @ param nameBuf 
 * the name buf 
 * @ param pTInfo 
 * the t info 
 * @ param rgMemId 
 - * the rg mem id 
 + * the rg mem id 
 * @ param pcFound 
 - * the pc found 
 * / 
 - public FindName ( String nameBuf , ITypeInfo [ ] pTInfo , MEMBERID [ ] rgMemId , 
 - short pcFound ) { 
 + public FindName ( String nameBuf , PointerByReference pTInfo , MEMBERID [ ] rgMemId , 
 + short pcFound ) { 
 this . nameBuf = nameBuf ; 
 this . pTInfo = pTInfo ; 
 this . rgMemId = rgMemId ; 
 @ @ - 447 , 7 + 446 , 14 @ @ public class TypeLibUtil { 
 * @ return the t info 
 * / 
 public ITypeInfo [ ] getTInfo ( ) { 
 - return pTInfo ; 
 + 
 + Pointer pVals = pTInfo . getValue ( ) ; 
 + ITypeInfo [ ] values = new ITypeInfo [ pcFound ] ; 
 + for ( int i = 0 ; i < pcFound ; i + + ) 
 + { 
 + values [ i ] = new TypeInfo ( pVals . getPointer ( i * Pointer . SIZE ) ) ; 
 + } 
 + return values ; 
 } 
 
 / * * 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / Unknown . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / Unknown . java 
 index a3d993b . . 1f3f18e 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / Unknown . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / Unknown . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public class Unknown extends COMInvoker implements IUnknown { 
 * the ppv object 
 * @ return the hresult 
 * / 
 - public HRESULT QueryInterface ( REFIID . ByValue riid , PointerByReference ppvObject ) { 
 + public HRESULT QueryInterface ( REFIID riid , PointerByReference ppvObject ) { 
 return ( HRESULT ) this . _ invokeNativeObject ( 0 , 
 new Object [ ] { this . getPointer ( ) , riid , ppvObject } , 
 HRESULT . class ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownListener . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownListener . java 
 index 8c9322b . . be1af2f 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownListener . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownListener . java 
 @ @ - 45 , 7 + 45 , 7 @ @ public class UnknownListener extends Structure { 
 	 protected void initVTable ( final IUnknownCallback callback ) { 
 	 	 this . vtbl . QueryInterfaceCallback = new UnknownVTable . QueryInterfaceCallback ( ) { 
 	 	 	 @ Override 
 - 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID . ByValue refid , PointerByReference ppvObject ) { 
 + 	 	 	 public HRESULT invoke ( Pointer thisPointer , REFIID refid , PointerByReference ppvObject ) { 
 	 	 	 	 return callback . QueryInterface ( refid , ppvObject ) ; 
 	 	 	 } 
 	 	 } ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownVTable . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownVTable . java 
 index ec53e1b . . e1052ab 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownVTable . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / UnknownVTable . java 
 @ @ - 36 , 7 + 36 , 7 @ @ public class UnknownVTable extends Structure { 
 	 } 
 
 	 public static interface QueryInterfaceCallback extends StdCallLibrary . StdCallCallback { 
 - 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID . ByValue refid , PointerByReference ppvObject ) ; 
 + 	 	 WinNT . HRESULT invoke ( Pointer thisPointer , REFIID refid , PointerByReference ppvObject ) ; 
 	 } 
 
 	 public static interface AddRefCallback extends StdCallLibrary . StdCallCallback { 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 index 7a8ccc3 . . 3e4ac9b 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 @ @ - 85 , 12 + 85 , 12 @ @ public class CallbackProxy implements IDispatchCallback { 
 	 Factory factory ; 
 	 Class < ? > comEventCallbackInterface ; 
 	 IComEventCallbackListener comEventCallbackListener ; 
 - 	 REFIID . ByValue listenedToRiid ; 
 + 	 REFIID listenedToRiid ; 
 	 public DispatchListener dispatchListener ; 
 	 Map < DISPID , Method > dsipIdMap ; 
 	 ExecutorService executorService ; 
 
 - 	 REFIID . ByValue createRIID ( Class < ? > comEventCallbackInterface ) { 
 + 	 REFIID createRIID ( Class < ? > comEventCallbackInterface ) { 
 	 	 ComInterface comInterfaceAnnotation = comEventCallbackInterface . getAnnotation ( ComInterface . class ) ; 
 	 	 if ( null = = comInterfaceAnnotation ) { 
 	 	 	 throw new COMException ( 
 @ @ - 100 , 7 + 100 , 7 @ @ public class CallbackProxy implements IDispatchCallback { 
 	 	 if ( null = = iidStr | | iidStr . isEmpty ( ) ) { 
 	 	 	 throw new COMException ( " ComInterface must define a value for iid " ) ; 
 	 	 } 
 - 	 	 return new REFIID . ByValue ( new IID ( iidStr ) . getPointer ( ) ) ; 
 + 	 	 return new REFIID ( new IID ( iidStr ) . getPointer ( ) ) ; 
 	 } 
 
 	 Map < DISPID , Method > createDispIdMap ( Class < ? > comEventCallbackInterface ) { 
 @ @ - 125 , 7 + 125 , 7 @ @ public class CallbackProxy implements IDispatchCallback { 
 	 	 return - 1 ; 
 	 } 
 
 - 	 void invokeOnThread ( final DISPID dispIdMember , final REFIID . ByValue riid , LCID lcid , WORD wFlags , 
 + 	 void invokeOnThread ( final DISPID dispIdMember , final REFIID riid , LCID lcid , WORD wFlags , 
 	 	 	 final DISPPARAMS . ByReference pDispParams ) { 
 	 	 / / decode arguments 
 	 	 / / must decode them on this thread , and create a proxy for any COM objects ( IDispatch ) 
 @ @ - 142 , 7 + 142 , 7 @ @ public class CallbackProxy implements IDispatchCallback { 
 	 	 	 	 	 / / get raw IUnknown interface 
 	 	 	 	 	 PointerByReference ppvObject = new PointerByReference ( ) ; 
 	 	 	 	 	 IID iid = com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; 
 - 	 	 	 	 	 dispatch . QueryInterface ( new REFIID . ByValue ( iid ) , ppvObject ) ; 
 + 	 	 	 	 	 dispatch . QueryInterface ( new REFIID ( iid ) , ppvObject ) ; 
 	 	 	 	 	 Unknown rawUnk = new Unknown ( ppvObject . getValue ( ) ) ; 
 	 	 	 	 	 long unknownId = Pointer . nativeValue ( rawUnk . getPointer ( ) ) ; 
 	 	 	 	 	 int n = rawUnk . Release ( ) ; 
 @ @ - 222 , 13 + 222 , 13 @ @ public class CallbackProxy implements IDispatchCallback { 
 	 } 
 
 	 @ Override 
 - 	 public HRESULT GetIDsOfNames ( REFIID . ByValue riid , WString [ ] rgszNames , int cNames , LCID lcid , 
 + 	 public HRESULT GetIDsOfNames ( REFIID riid , WString [ ] rgszNames , int cNames , LCID lcid , 
 	 	 	 DISPIDByReference rgDispId ) { 
 	 	 return new HRESULT ( WinError . E _ NOTIMPL ) ; 
 	 } 
 
 	 @ Override 
 - 	 public HRESULT Invoke ( DISPID dispIdMember , REFIID . ByValue riid , LCID lcid , WORD wFlags , 
 + 	 public HRESULT Invoke ( DISPID dispIdMember , REFIID riid , LCID lcid , WORD wFlags , 
 	 	 	 DISPPARAMS . ByReference pDispParams , VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 	 	 	 IntByReference puArgErr ) { 
 
 @ @ - 239 , 7 + 239 , 7 @ @ public class CallbackProxy implements IDispatchCallback { 
 
 	 / / - - - - - - - - - - - - - - - - - - - - - - - - IUnknown - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 	 @ Override 
 - 	 public HRESULT QueryInterface ( REFIID . ByValue refid , PointerByReference ppvObject ) { 
 + 	 public HRESULT QueryInterface ( REFIID refid , PointerByReference ppvObject ) { 
 	 	 if ( null = = ppvObject ) { 
 	 	 	 return new HRESULT ( WinError . E _ POINTER ) ; 
 	 	 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 index 20cbb12 . . 307c0ff 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 @ @ - 116 , 7 + 116 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 	 	 	 @ Override 
 	 	 	 	 	 public HRESULT call ( ) throws Exception { 
 	 	 	 	 	 	 IID iid = com . sun . jna . platform . win32 . COM . IUnknown . IID _ IUNKNOWN ; 
 - 	 	 	 	 	 	 return ProxyObject . this . getRawDispatch ( ) . QueryInterface ( new REFIID . ByValue ( iid ) , ppvObject ) ; 
 + 	 	 	 	 	 	 return ProxyObject . this . getRawDispatch ( ) . QueryInterface ( new REFIID ( iid ) , ppvObject ) ; 
 	 	 	 	 	 } 
 	 	 	 	 } ) ; 
 	 	 	 	 
 @ @ - 439 , 7 + 439 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 	 HRESULT hr = this . comThread . execute ( new Callable < HRESULT > ( ) { 
 	 	 	 	 @ Override 
 	 	 	 	 public HRESULT call ( ) throws Exception { 
 - 	 	 	 	 	 return ProxyObject . this . getRawDispatch ( ) . QueryInterface ( new REFIID . ByValue ( iid ) , ppvObject ) ; 
 + 	 	 	 	 	 return ProxyObject . this . getRawDispatch ( ) . QueryInterface ( new REFIID ( iid ) , ppvObject ) ; 
 	 	 	 	 } 
 	 	 	 } ) ; 
 
 @ @ - 564 , 7 + 564 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 	 HRESULT hr = this . comThread . execute ( new Callable < HRESULT > ( ) { 
 	 	 	 	 @ Override 
 	 	 	 	 public HRESULT call ( ) throws Exception { 
 - 	 	 	 	 	 HRESULT hr = pDisp . GetIDsOfNames ( new REFIID . ByValue ( Guid . IID _ NULL ) , ptName , 1 , LOCALE _ USER _ DEFAULT , 
 + 	 	 	 	 	 HRESULT hr = pDisp . GetIDsOfNames ( new REFIID ( Guid . IID _ NULL ) , ptName , 1 , LOCALE _ USER _ DEFAULT , 
 	 	 	 	 	 	 	 pdispID ) ; 
 	 	 	 	 	 return hr ; 
 	 	 	 	 } 
 @ @ - 630 , 7 + 630 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 	 HRESULT hr = this . comThread . execute ( new Callable < HRESULT > ( ) { 
 	 	 	 	 @ Override 
 	 	 	 	 public HRESULT call ( ) throws Exception { 
 - 	 	 	 	 	 return pDisp . Invoke ( dispId , new REFIID . ByValue ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , 
 + 	 	 	 	 	 return pDisp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , 
 	 	 	 	 	 	 	 new WinDef . WORD ( nType ) , dp , pvResult , pExcepInfo , puArgErr ) ; 
 	 	 	 	 } 
 	 	 	 } ) ;

NEAREST DIFF:
diff - - git a / contrib / msoffice / jnatest . xls b / contrib / msoffice / jnatest . xls 
 new file mode 100644 
 index 0000000 . . effa963 
 Binary files / dev / null and b / contrib / msoffice / jnatest . xls differ 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java 
 new file mode 100644 
 index 0000000 . . 487c989 
 - - - / dev / null 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSExcel . java 
 @ @ - 0 , 0 + 1 , 162 @ @ 
 + package com . sun . jna . platform . win32 . office ; 
 + 
 + import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; 
 + import com . sun . jna . platform . win32 . OleAut32 ; 
 + import com . sun . jna . platform . win32 . Variant ; 
 + import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 + import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 + import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 + import com . sun . jna . platform . win32 . COM . COMException ; 
 + import com . sun . jna . platform . win32 . COM . COMObject ; 
 + import com . sun . jna . platform . win32 . COM . COMUtils ; 
 + import com . sun . jna . platform . win32 . COM . IDispatch ; 
 + 
 + public class MSExcel extends COMObject { 
 + 
 + 	 public MSExcel ( ) throws COMException { 
 + 	 	 super ( " Excel . Application " , false ) ; 
 + 	 } 
 + 
 + 	 public MSExcel ( boolean visible ) throws COMException { 
 + 	 	 this ( ) ; 
 + 	 	 this . setVisible ( Variant . VARIANT _ TRUE ) ; 
 + 	 } 
 + 
 + 	 public void setVisible ( VARIANT _ BOOL bVisible ) throws COMException { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , result , this . iDispatch , 
 + 	 	 	 	 " Visible " , new VARIANT ( bVisible ) ) ; 
 + 	 } 
 + 
 + 	 public String getVersion ( ) throws COMException { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 this . oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this . iDispatch , 
 + 	 	 	 	 " Version " ) ; 
 + 
 + 	 	 return result . getValue ( ) . toString ( ) ; 
 + 	 } 
 + 
 + 	 public HRESULT newExcelBook ( ) throws COMException { 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , getWorkbooks ( ) 
 + 	 	 	 	 . getIDispatch ( ) , " Add " ) ; 
 + 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public HRESULT openExcelBook ( String filename , boolean bVisible ) 
 + 	 	 	 throws COMException { 
 + 	 	 / / OpenDocument 
 + 	 	 BSTR bstrFilename = OleAut32 . INSTANCE . SysAllocString ( filename ) ; 
 + 	 	 VARIANT varFilename = new VARIANT ( bstrFilename ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , getWorkbooks ( ) 
 + 	 	 	 	 . getIDispatch ( ) , " Open " , varFilename ) ; 
 + 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public HRESULT closeActiveWorkbook ( VARIANT _ BOOL bSave ) throws COMException { 
 + 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 + 	 	 	 	 getActiveWorkbook ( ) . getIDispatch ( ) , " Close " , new VARIANT ( bSave ) ) ; 
 + 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public HRESULT quit ( ) throws COMException { 
 + 	 	 HRESULT hr = this . oleMethod ( OleAut32 . DISPATCH _ METHOD , null , 
 + 	 	 	 	 this . iDispatch , " Quit " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public HRESULT insertValue ( String range , String value ) throws COMException { 
 + 	 	 HRESULT hr ; 
 + 
 + 	 	 BSTR bstrRange = OleAut32 . INSTANCE . SysAllocString ( range ) ; 
 + 	 	 VARIANT varRange = new VARIANT ( bstrRange ) ; 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , this 
 + 	 	 	 	 . getActiveSheet ( ) . getIDispatch ( ) , " Range " , varRange ) ; 
 + 	 	 Range pRange = new Range ( ( IDispatch ) result . getValue ( ) ) ; 
 + 
 + 	 	 BSTR bstrValue = OleAut32 . INSTANCE . SysAllocString ( value ) ; 
 + 	 	 VARIANT varText = new VARIANT ( bstrValue ) ; 
 + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYPUT , null , 
 + 	 	 	 	 pRange . getIDispatch ( ) , " Value " , varText ) ; 
 + 
 + 	 	 return hr ; 
 + 	 } 
 + 
 + 	 public Application getApplication ( ) { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 + 	 	 	 	 this . iDispatch , " Application " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new Application ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 
 + 	 public ActiveWorkbook getActiveWorkbook ( ) { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 + 	 	 	 	 this . iDispatch , " ActiveWorkbook " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new ActiveWorkbook ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 
 + 	 public Workbooks getWorkbooks ( ) { 
 + 	 	 / / GetDocuments 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 + 	 	 	 	 this . iDispatch , " WorkBooks " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new Workbooks ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 
 + 	 public ActiveSheet getActiveSheet ( ) { 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 HRESULT hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 + 	 	 	 	 this . iDispatch , " ActiveSheet " ) ; 
 + 
 + 	 	 COMUtils . SUCCEEDED ( hr ) ; 
 + 	 	 return new ActiveSheet ( ( IDispatch ) result . getValue ( ) ) ; 
 + 	 } 
 + 
 + 	 public class Application extends COMObject { 
 + 
 + 	 	 public Application ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class Workbooks extends COMObject { 
 + 
 + 	 	 public Workbooks ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class ActiveWorkbook extends COMObject { 
 + 
 + 	 	 public ActiveWorkbook ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class ActiveSheet extends COMObject { 
 + 
 + 	 	 public ActiveSheet ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public class Range extends COMObject { 
 + 
 + 	 	 public Range ( IDispatch iDispatch ) throws COMException { 
 + 	 	 	 super ( iDispatch ) ; 
 + 	 	 } 
 + 	 } 
 + } 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 index 77c8b4b . . 7eb0115 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeDemo . java 
 @ @ - 18 , 11 + 18 , 16 @ @ public class MSOfficeDemo { 
 	 	 	 + File . separator ; 
 
 	 public MSOfficeDemo ( ) { 
 + 	 	 / / this . testMSWord ( ) ; 
 + 	 	 this . testMSExcel ( ) ; 
 + 	 } 
 + 	 
 + 	 public void testMSWord ( ) { 
 	 	 MSWord msWord = null ; 
 
 	 	 try { 
 	 	 	 msWord = new MSWord ( ) ; 
 - 	 	 	 / / System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; 
 + 	 	 	 System . out . println ( " MSWord version : " + msWord . getVersion ( ) ) ; 
 	 	 	 msWord . setVisible ( Variant . VARIANT _ TRUE ) ; 
 	 	 	 msWord . newDocument ( ) ; 
 	 	 	 / / msWord . openDocument ( currentWorkingDir + " jnatest . doc " , true ) ; 
 @ @ - 44 , 4 + 49 , 32 @ @ public class MSOfficeDemo { 
 	 	 	 	 msWord . quit ( ) ; 
 	 	 } 
 	 } 
 + 	 
 + 	 public void testMSExcel ( ) { 
 + 	 	 MSExcel msExcel = null ; 
 + 
 + 	 	 try { 
 + 	 	 	 msExcel = new MSExcel ( ) ; 
 + 	 	 	 System . out . println ( " MSExcel version : " + msExcel . getVersion ( ) ) ; 
 + 	 	 	 msExcel . setVisible ( Variant . VARIANT _ TRUE ) ; 
 + 	 	 	 / / msExcel . newExcelBook ( ) ; 
 + 	 	 	 msExcel . openExcelBook ( currentWorkingDir + " jnatest . xls " , true ) ; 
 + 	 	 	 msExcel . insertValue ( " A1 " , " Hello from JNA ! " ) ; 
 + 	 	 	 / / close and save the active sheet 
 + 	 	 	 msExcel . closeActiveWorkbook ( Variant . VARIANT _ TRUE ) ; 
 + 	 	 	 / / wait then close excel 
 + 	 	 	 msExcel . quit ( ) ; 
 + 	 	 } catch ( COMException e ) { 
 + 	 	 	 if ( e . getExcepInfo ( ) ! = null ) { 
 + 	 	 	 	 System . out 
 + 	 	 	 	 	 	 . println ( " bstrSource : " + e . getExcepInfo ( ) . bstrSource ) ; 
 + 	 	 	 	 System . out . println ( " bstrDescription : " 
 + 	 	 	 	 	 	 + e . getExcepInfo ( ) . bstrDescription ) ; 
 + 	 	 	 } else 
 + 	 	 	 	 e . printStackTrace ( ) ; 
 + 	 	 	 
 + 	 	 	 if ( msExcel ! = null ) 
 + 	 	 	 	 msExcel . quit ( ) ; 
 + 	 	 } 
 + 	 } 
 } 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java 
 deleted file mode 100644 
 index 3762b9c . . 0000000 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSOfficeException . java 
 + + + / dev / null 
 @ @ - 1 , 30 + 0 , 0 @ @ 
 - package com . sun . jna . platform . win32 . office ; 
 - 
 - public class MSOfficeException extends Exception { 
 - 
 - 	 public MSOfficeException ( ) { 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - 	 public MSOfficeException ( String arg0 ) { 
 - 	 	 super ( arg0 ) ; 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - 	 public MSOfficeException ( Throwable arg0 ) { 
 - 	 	 super ( arg0 ) ; 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - 	 public MSOfficeException ( String arg0 , Throwable arg1 ) { 
 - 	 	 super ( arg0 , arg1 ) ; 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - 	 public MSOfficeException ( String arg0 , Throwable arg1 , boolean arg2 , 
 - 	 	 	 boolean arg3 ) { 
 - 	 	 super ( arg0 , arg1 , arg2 , arg3 ) ; 
 - 	 	 / / TODO Auto - generated constructor stub 
 - 	 } 
 - 
 - } 
 diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 index 61015fd . . 250d4f6 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / office / MSWord . java 
 @ @ - 74 , 10 + 74 , 10 @ @ public class MSWord extends COMObject { 
 	 public HRESULT insertText ( String text ) throws COMException { 
 	 	 HRESULT hr ; 
 
 - 	 	 VARIANT . ByReference result2 = new VARIANT . ByReference ( ) ; 
 - 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result2 , 
 + 	 	 VARIANT . ByReference result = new VARIANT . ByReference ( ) ; 
 + 	 	 hr = oleMethod ( OleAut32 . DISPATCH _ PROPERTYGET , result , 
 	 	 	 	 this . iDispatch , " Selection " ) ; 
 - 	 	 Selection pSelection = new Selection ( ( IDispatch ) result2 . getValue ( ) ) ; 
 + 	 	 Selection pSelection = new Selection ( ( IDispatch ) result . getValue ( ) ) ; 
 
 	 	 BSTR bstrText = OleAut32 . INSTANCE . SysAllocString ( text ) ; 
 	 	 VARIANT varText = new VARIANT ( bstrText ) ;
