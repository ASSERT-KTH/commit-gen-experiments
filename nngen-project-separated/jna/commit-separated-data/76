BLEU SCORE: 0.028398387225677897

TEST MSG: Optimize Structure # validate and prevent AIOOBE in SAFEARRAY # read for zero dimensions
GENERATED MSG: Add Psapi . GetPerformanceInfo ( ) and Kernel32 . GetTickCount64 ( ) .

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 97b8615 . . 8c8edcd 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 23 , 6 + 23 , 7 @ @ Bug Fixes <nl> * [ # 882 ] ( https : / / github . com / java - native - access / jna / pull / 882 ) : Correctly close file in ` ELFAnalyser # runDetection ` , fix suggested by [ @ Sylvyrfysh ] ( https : / / github . com / Sylvyrfysh ) in [ # 880 ] ( https : / / github . com / java - native - access / jna / pull / 880 ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 887 ] ( https : / / github . com / java - native - access / jna / issues / 887 ) : MacFileUtils . moveToTrash ( ) doesn ' t work in a sandboxed app fix suggested by [ @ sobakasu ] ( https : / / github . com / sobakasu ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> * [ # 894 ] ( https : / / github . com / java - native - access / jna / issues / 894 ) : NullPointerException can be caused by calling ` com . sun . jna . platform . win32 . COM . util . ProxyObject # dispose ` multiple times - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 925 ] ( https : / / github . com / java - native - access / jna / issues / 925 ) : Optimize ` Structure # validate ` and prevent ` ArrayIndexOutOfBoundsException ` in ` SAFEARRAY # read ` for zero dimensions - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Breaking Changes <nl> - - - - - - - - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> index 8480374 . . 908010c 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java <nl> @ @ - 607 , 7 + 607 , 11 @ @ public interface OaIdl { <nl> @ Override <nl> public void read ( ) { <nl> super . read ( ) ; <nl> - rgsabound = ( SAFEARRAYBOUND [ ] ) rgsabound [ 0 ] . toArray ( cDims . intValue ( ) ) ; <nl> + if ( cDims . intValue ( ) > 0 ) { <nl> + rgsabound = ( SAFEARRAYBOUND [ ] ) rgsabound [ 0 ] . toArray ( cDims . intValue ( ) ) ; <nl> + } else { <nl> + rgsabound = new SAFEARRAYBOUND [ ] { new SAFEARRAYBOUND ( ) } ; <nl> + } <nl> } <nl> <nl> @ Override <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java <nl> index 0caba84 . . 164f783 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package com . sun . jna . platform . win32 ; <nl> <nl> import com . sun . jna . Pointer ; <nl> + import com . sun . jna . Structure ; <nl> import com . sun . jna . platform . win32 . COM . COMException ; <nl> import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import com . sun . jna . platform . win32 . COM . util . ObjectFactory ; <nl> @ @ - 61 , 6 + 62 , 7 @ @ import org . junit . Before ; <nl> import static com . sun . jna . platform . win32 . OaIdlUtil . toPrimitiveArray ; <nl> import com . sun . jna . platform . win32 . WTypes . VARTYPE ; <nl> import com . sun . jna . platform . win32 . WinDef . LONG ; <nl> + import java . lang . reflect . Field ; <nl> <nl> public class SAFEARRAYTest { <nl> static { <nl> @ @ - 82 , 6 + 84 , 15 @ @ public class SAFEARRAYTest { <nl> SAFEARRAY varArray = SAFEARRAY . createSafeArray ( 1 ) ; <nl> Assert . assertTrue ( varArray ! = null ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testCreateEmpty ( ) throws NoSuchFieldException , IllegalArgumentException , IllegalAccessException { <nl> + Field f = Structure . class . getDeclaredField ( " PLACEHOLDER _ MEMORY " ) ; <nl> + f . setAccessible ( true ) ; <nl> + Pointer PLACEHOLDER _ MEMORY = ( Pointer ) f . get ( null ) ; <nl> + SAFEARRAY sa = Structure . newInstance ( SAFEARRAY . class , PLACEHOLDER _ MEMORY ) ; <nl> + Assert . assertTrue ( sa ! = null ) ; <nl> + } <nl> <nl> @ Test <nl> public void testSafeArrayPutGetElement ( ) throws Exception { <nl> diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java <nl> index 13f3c14 . . 42df030 100644 <nl> - - - a / src / com / sun / jna / Structure . java <nl> + + + b / src / com / sun / jna / Structure . java <nl> @ @ - 2125 , 6 + 2125 , 13 @ @ public abstract class Structure { <nl> * @ param cls Structure subclass to check <nl> * / <nl> static void validate ( Class < ? extends Structure > cls ) { <nl> - Structure . newInstance ( cls , PLACEHOLDER _ MEMORY ) ; <nl> + try { <nl> + cls . getConstructor ( ) ; <nl> + return ; <nl> + } catch ( NoSuchMethodException e ) { <nl> + } <nl> + catch ( SecurityException e ) { <nl> + } <nl> + throw new IllegalArgumentException ( " No suitable constructor found for class : " + cls . getName ( ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 97b8615 . . 8c8edcd 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 23 , 6 + 23 , 7 @ @ Bug Fixes 
 * [ # 882 ] ( https : / / github . com / java - native - access / jna / pull / 882 ) : Correctly close file in ` ELFAnalyser # runDetection ` , fix suggested by [ @ Sylvyrfysh ] ( https : / / github . com / Sylvyrfysh ) in [ # 880 ] ( https : / / github . com / java - native - access / jna / pull / 880 ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 887 ] ( https : / / github . com / java - native - access / jna / issues / 887 ) : MacFileUtils . moveToTrash ( ) doesn ' t work in a sandboxed app fix suggested by [ @ sobakasu ] ( https : / / github . com / sobakasu ) - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 * [ # 894 ] ( https : / / github . com / java - native - access / jna / issues / 894 ) : NullPointerException can be caused by calling ` com . sun . jna . platform . win32 . COM . util . ProxyObject # dispose ` multiple times - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 925 ] ( https : / / github . com / java - native - access / jna / issues / 925 ) : Optimize ` Structure # validate ` and prevent ` ArrayIndexOutOfBoundsException ` in ` SAFEARRAY # read ` for zero dimensions - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Breaking Changes 
 - - - - - - - - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 index 8480374 . . 908010c 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OaIdl . java 
 @ @ - 607 , 7 + 607 , 11 @ @ public interface OaIdl { 
 @ Override 
 public void read ( ) { 
 super . read ( ) ; 
 - rgsabound = ( SAFEARRAYBOUND [ ] ) rgsabound [ 0 ] . toArray ( cDims . intValue ( ) ) ; 
 + if ( cDims . intValue ( ) > 0 ) { 
 + rgsabound = ( SAFEARRAYBOUND [ ] ) rgsabound [ 0 ] . toArray ( cDims . intValue ( ) ) ; 
 + } else { 
 + rgsabound = new SAFEARRAYBOUND [ ] { new SAFEARRAYBOUND ( ) } ; 
 + } 
 } 
 
 @ Override 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java 
 index 0caba84 . . 164f783 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / SAFEARRAYTest . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package com . sun . jna . platform . win32 ; 
 
 import com . sun . jna . Pointer ; 
 + import com . sun . jna . Structure ; 
 import com . sun . jna . platform . win32 . COM . COMException ; 
 import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import com . sun . jna . platform . win32 . COM . util . ObjectFactory ; 
 @ @ - 61 , 6 + 62 , 7 @ @ import org . junit . Before ; 
 import static com . sun . jna . platform . win32 . OaIdlUtil . toPrimitiveArray ; 
 import com . sun . jna . platform . win32 . WTypes . VARTYPE ; 
 import com . sun . jna . platform . win32 . WinDef . LONG ; 
 + import java . lang . reflect . Field ; 
 
 public class SAFEARRAYTest { 
 static { 
 @ @ - 82 , 6 + 84 , 15 @ @ public class SAFEARRAYTest { 
 SAFEARRAY varArray = SAFEARRAY . createSafeArray ( 1 ) ; 
 Assert . assertTrue ( varArray ! = null ) ; 
 } 
 + 
 + @ Test 
 + public void testCreateEmpty ( ) throws NoSuchFieldException , IllegalArgumentException , IllegalAccessException { 
 + Field f = Structure . class . getDeclaredField ( " PLACEHOLDER _ MEMORY " ) ; 
 + f . setAccessible ( true ) ; 
 + Pointer PLACEHOLDER _ MEMORY = ( Pointer ) f . get ( null ) ; 
 + SAFEARRAY sa = Structure . newInstance ( SAFEARRAY . class , PLACEHOLDER _ MEMORY ) ; 
 + Assert . assertTrue ( sa ! = null ) ; 
 + } 
 
 @ Test 
 public void testSafeArrayPutGetElement ( ) throws Exception { 
 diff - - git a / src / com / sun / jna / Structure . java b / src / com / sun / jna / Structure . java 
 index 13f3c14 . . 42df030 100644 
 - - - a / src / com / sun / jna / Structure . java 
 + + + b / src / com / sun / jna / Structure . java 
 @ @ - 2125 , 6 + 2125 , 13 @ @ public abstract class Structure { 
 * @ param cls Structure subclass to check 
 * / 
 static void validate ( Class < ? extends Structure > cls ) { 
 - Structure . newInstance ( cls , PLACEHOLDER _ MEMORY ) ; 
 + try { 
 + cls . getConstructor ( ) ; 
 + return ; 
 + } catch ( NoSuchMethodException e ) { 
 + } 
 + catch ( SecurityException e ) { 
 + } 
 + throw new IllegalArgumentException ( " No suitable constructor found for class : " + cls . getName ( ) ) ; 
 } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
