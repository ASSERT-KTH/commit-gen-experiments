BLEU SCORE: 0.031251907639724415

TEST MSG: Add dispId to ComProperty and use value to simplify COM calls ( skip GetIDsOfNames )
GENERATED MSG: Make ( Un ) marshalling context sensitive

TEST DIFF (one line): diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / IDispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / IDispatch . java <nl> index f3d57b0 . . 5a67f89 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / IDispatch . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / IDispatch . java <nl> @ @ - 12 , 13 + 12 , 17 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> + import com . sun . jna . platform . win32 . OaIdl . DISPID ; <nl> + <nl> / * * <nl> * Java friendly version of { @ link com . sun . jna . platform . win32 . COM . IDispatch } . <nl> * <nl> * / <nl> public interface IDispatch extends IUnknown { <nl> - <nl> 	 < T > void setProperty ( String name , T value ) ; <nl> 	 < T > T getProperty ( Class < T > returnType , String name , Object . . . args ) ; <nl> 	 < T > T invokeMethod ( Class < T > returnType , String name , Object . . . args ) ; <nl> + 	 < T > void setProperty ( DISPID dispid , T value ) ; <nl> + 	 < T > T getProperty ( Class < T > returnType , DISPID dispid , Object . . . args ) ; <nl> + 	 < T > T invokeMethod ( Class < T > returnType , DISPID dispid , Object . . . args ) ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> index 78a0eee . . 9942afb 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> @ @ - 14 , 7 + 14 , 6 @ @ package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> import java . lang . reflect . InvocationHandler ; <nl> import java . lang . reflect . Proxy ; <nl> - import java . util . concurrent . Callable ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . TimeoutException ; <nl> <nl> @ @ - 227 , 21 + 226 , 35 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> <nl> 	 	 ComProperty prop = method . getAnnotation ( ComProperty . class ) ; <nl> 	 	 if ( null ! = prop ) { <nl> + int dispId = prop . dispId ( ) ; <nl> 	 	 	 if ( isVoid ) { <nl> - 	 	 	 	 String propName = this . getMutatorName ( method , prop ) ; <nl> - 	 	 	 	 this . setProperty ( propName , args [ 0 ] ) ; <nl> - 	 	 	 	 return null ; <nl> + if ( dispId ! = - 1 ) { <nl> + this . setProperty ( new DISPID ( dispId ) , args [ 0 ] ) ; <nl> + return null ; <nl> + } else { <nl> + String propName = this . getMutatorName ( method , prop ) ; <nl> + this . setProperty ( propName , args [ 0 ] ) ; <nl> + return null ; <nl> + } <nl> 	 	 	 } else { <nl> - 	 	 	 	 String propName = this . getAccessorName ( method , prop ) ; <nl> - 	 	 	 	 return this . getProperty ( returnType , propName , args ) ; <nl> + if ( dispId ! = - 1 ) { <nl> + return this . getProperty ( returnType , new DISPID ( dispId ) , args ) ; <nl> + } else { <nl> + String propName = this . getAccessorName ( method , prop ) ; <nl> + return this . getProperty ( returnType , propName , args ) ; <nl> + } <nl> 	 	 	 } <nl> 	 	 } <nl> <nl> 	 	 ComMethod meth = method . getAnnotation ( ComMethod . class ) ; <nl> 	 	 if ( null ! = meth ) { <nl> - 	 	 	 String methName = this . getMethodName ( method , meth ) ; <nl> - 	 	 	 Object res = this . invokeMethod ( returnType , methName , args ) ; <nl> - 	 	 	 return res ; <nl> + int dispId = meth . dispId ( ) ; <nl> + if ( dispId ! = - 1 ) { <nl> + return this . invokeMethod ( returnType , new DISPID ( dispId ) , args ) ; <nl> + } else { <nl> + String methName = this . getMethodName ( method , meth ) ; <nl> + return this . invokeMethod ( returnType , methName , args ) ; <nl> + } <nl> 	 	 } <nl> <nl> 	 	 return null ; <nl> @ @ - 328 , 42 + 341 , 58 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 / / - - - - - - - - - - - - - - - - - - - - - IDispatch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <nl> 	 @ Override <nl> 	 public < T > void setProperty ( String name , T value ) { <nl> + DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ; <nl> + setProperty ( dispID , value ) ; <nl> + 	 } <nl> + <nl> + @ Override <nl> + 	 public < T > void setProperty ( DISPID dispId , T value ) { <nl> assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> <nl> VARIANT v = Convert . toVariant ( value ) ; <nl> - WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getRawDispatch ( ) , name , v ) ; <nl> + WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getRawDispatch ( ) , dispId , v ) ; <nl> Convert . free ( v , value ) ; / / Free value allocated by Convert # toVariant <nl> COMUtils . checkRC ( hr ) ; <nl> 	 } <nl> - <nl> + <nl> 	 @ Override <nl> 	 public < T > T getProperty ( Class < T > returnType , String name , Object . . . args ) { <nl> - assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> - <nl> - 	 	 VARIANT [ ] vargs ; <nl> - 	 	 if ( null = = args ) { <nl> - 	 	 	 vargs = new VARIANT [ 0 ] ; <nl> - 	 	 } else { <nl> - 	 	 	 vargs = new VARIANT [ args . length ] ; <nl> - 	 	 } <nl> - 	 	 for ( int i = 0 ; i < vargs . length ; + + i ) { <nl> - 	 	 	 vargs [ i ] = Convert . toVariant ( args [ i ] ) ; <nl> - 	 	 } <nl> - 	 	 Variant . VARIANT . ByReference result = new Variant . VARIANT . ByReference ( ) ; <nl> - 	 	 WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , this . getRawDispatch ( ) , name , vargs ) ; <nl> - <nl> - for ( int i = 0 ; i < vargs . length ; i + + ) { <nl> - / / Free value allocated by Convert # toVariant <nl> - Convert . free ( vargs [ i ] , args [ i ] ) ; <nl> - } <nl> - <nl> - 	 	 COMUtils . checkRC ( hr ) ; <nl> - 	 	 <nl> - return convertAndFreeReturn ( result , returnType ) ; <nl> + DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ; <nl> + return getProperty ( returnType , dispID , args ) ; <nl> 	 } <nl> <nl> + @ Override <nl> + public < T > T getProperty ( Class < T > returnType , DISPID dispID , Object . . . args ) { <nl> + VARIANT [ ] vargs ; <nl> + if ( null = = args ) { <nl> + vargs = new VARIANT [ 0 ] ; <nl> + } else { <nl> + vargs = new VARIANT [ args . length ] ; <nl> + } <nl> + for ( int i = 0 ; i < vargs . length ; + + i ) { <nl> + vargs [ i ] = Convert . toVariant ( args [ i ] ) ; <nl> + } <nl> + Variant . VARIANT . ByReference result = new Variant . VARIANT . ByReference ( ) ; <nl> + WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , this . getRawDispatch ( ) , dispID , vargs ) ; <nl> + <nl> + for ( int i = 0 ; i < vargs . length ; i + + ) { <nl> + / / Free value allocated by Convert # toVariant <nl> + Convert . free ( vargs [ i ] , args [ i ] ) ; <nl> + } <nl> + <nl> + COMUtils . checkRC ( hr ) ; <nl> + <nl> + return convertAndFreeReturn ( result , returnType ) ; <nl> + } <nl> + <nl> 	 @ Override <nl> 	 public < T > T invokeMethod ( Class < T > returnType , String name , Object . . . args ) { <nl> + DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ; <nl> + return invokeMethod ( returnType , dispID , args ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public < T > T invokeMethod ( Class < T > returnType , DISPID dispID , Object . . . args ) { <nl> assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> <nl> 	 	 VARIANT [ ] vargs ; <nl> @ @ - 376 , 7 + 405 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 	 vargs [ i ] = Convert . toVariant ( args [ i ] ) ; <nl> 	 	 } <nl> 	 	 Variant . VARIANT . ByReference result = new Variant . VARIANT . ByReference ( ) ; <nl> - 	 	 WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getRawDispatch ( ) , name , vargs ) ; <nl> + 	 	 WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getRawDispatch ( ) , dispID , vargs ) ; <nl> <nl> for ( int i = 0 ; i < vargs . length ; i + + ) { <nl> / / Free value allocated by Convert # toVariant <nl> @ @ - 524 , 11 + 553 , 9 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> 	 	 return this . oleMethod ( nType , pvResult , pDisp , dispId , ( VARIANT [ ] ) null ) ; <nl> 	 } <nl> <nl> - 	 / * <nl> - 	 * @ see com . sun . jna . platform . win32 . COM . COMBindingBaseObject # oleMethod <nl> - 	 * / <nl> - 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , final IDispatch pDisp , String name , <nl> - 	 	 	 VARIANT [ ] pArgs ) throws COMException { <nl> + protected DISPID resolveDispId ( final IDispatch pDisp , String name ) { <nl> + assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; <nl> + <nl> if ( pDisp = = null ) <nl> throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; <nl> <nl> @ @ - 541 , 8 + 568 , 17 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> pdispID ) ; <nl> <nl> COMUtils . checkRC ( hr ) ; <nl> + <nl> + return pdispID . getValue ( ) ; <nl> + } <nl> + <nl> + 	 / * <nl> + 	 * @ see com . sun . jna . platform . win32 . COM . COMBindingBaseObject # oleMethod <nl> + 	 * / <nl> + 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , final IDispatch pDisp , String name , <nl> + 	 	 	 VARIANT [ ] pArgs ) throws COMException { <nl> <nl> - return this . oleMethod ( nType , pvResult , pDisp , pdispID . getValue ( ) , pArgs ) ; <nl> + return this . oleMethod ( nType , pvResult , pDisp , resolveDispId ( pDisp , name ) , pArgs ) ; <nl> 	 } <nl> <nl> 	 / * <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / annotation / ComProperty . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / annotation / ComProperty . java <nl> index 6104c1d . . 33dd4c3 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / annotation / ComProperty . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / annotation / ComProperty . java <nl> @ @ - 23 , 4 + 23 , 5 @ @ import java . lang . annotation . Target ; <nl> @ Inherited <nl> public @ interface ComProperty { <nl> 	 String name ( ) default " " ; <nl> + int dispId ( ) default - 1 ; / / default to dispid unknown <nl> } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java <nl> index 7da4a2c . . 3232f4b 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java <nl> @ @ - 1 , 7 + 1 , 13 @ @ <nl> package com . sun . jna . platform . win32 . COM . util ; <nl> <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> + import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; <nl> + import com . sun . jna . platform . win32 . OaIdl . DISPID ; <nl> + import com . sun . jna . platform . win32 . Ole32 ; <nl> import junit . framework . TestCase ; <nl> + import static junit . framework . TestCase . assertTrue ; <nl> import org . junit . After ; <nl> import org . junit . Before ; <nl> import org . junit . Test ; <nl> @ @ - 12 , 36 + 18 , 87 @ @ public class IDispatchTest { <nl> <nl> @ Before <nl> public void before ( ) { <nl> + Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> this . factory = new Factory ( ) ; <nl> } <nl> <nl> @ After <nl> public void after ( ) { <nl> this . factory . disposeAll ( ) ; <nl> - this . factory . getComThread ( ) . terminate ( 1000 ) ; <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> } <nl> - <nl> + <nl> @ Test <nl> - public void testIDispatch ( ) throws InterruptedException { <nl> - ComInternetExplorer ieApp = factory . createObject ( ComInternetExplorer . class ) ; <nl> - IDispatch appDispatch = ieApp ; <nl> + public void testDispatchBaseOnMethodName ( ) throws InterruptedException { <nl> + ComInternetExplorerMethodname ieApp = factory . createObject ( ComInternetExplorerMethodname . class ) ; <nl> <nl> / / Test getting property <nl> - TestCase . assertFalse ( appDispatch . getProperty ( Boolean . class , " Visible " ) ) ; <nl> + TestCase . assertFalse ( ieApp . getVisible ( ) ) ; <nl> <nl> / / Test setting property <nl> - appDispatch . setProperty ( " Visible " , Boolean . TRUE ) ; <nl> - TestCase . assertTrue ( appDispatch . getProperty ( Boolean . class , " Visible " ) ) ; <nl> + ieApp . setVisible ( Boolean . TRUE ) ; <nl> + TestCase . assertTrue ( ieApp . getVisible ( ) ) ; <nl> <nl> / / Check navigate function and with that the method invocation <nl> - assert appDispatch . getProperty ( String . class , " LocationURL " ) . isEmpty ( ) ; <nl> + assertTrue ( ieApp . getLocationURL ( ) . isEmpty ( ) ) ; <nl> + <nl> + ieApp . Navigate2 ( " https : / / github . com / java - native - access / " ) ; <nl> + <nl> + / / Check max . 2s if Navigation happend <nl> + boolean navigationHappend = false ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + String url = ieApp . getLocationURL ( ) ; <nl> + if ( ! url . isEmpty ( ) ) { <nl> + navigationHappend = true ; <nl> + break ; <nl> + } else { <nl> + Thread . sleep ( 200 ) ; <nl> + } <nl> + } <nl> + <nl> + TestCase . assertTrue ( navigationHappend ) ; <nl> + <nl> + ieApp . Quit ( ) ; <nl> + } <nl> + <nl> + @ ComObject ( progId = " Internet . Explorer . 1 " , clsId = " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) <nl> + interface ComInternetExplorerMethodname { <nl> + @ ComProperty <nl> + String getLocationURL ( ) ; <nl> + <nl> + @ ComMethod <nl> + void Navigate2 ( String url ) ; <nl> + <nl> + @ ComProperty <nl> + Boolean getVisible ( ) ; <nl> + <nl> + @ ComProperty <nl> + void setVisible ( Boolean visible ) ; <nl> + <nl> + @ ComMethod <nl> + void Quit ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testDispatchBaseOnNamed ( ) throws InterruptedException { <nl> + ComInternetExplorerNamed ieApp = factory . createObject ( ComInternetExplorerNamed . class ) ; <nl> + <nl> + / / Test getting property <nl> + TestCase . assertFalse ( ieApp . getVisible _ MOD ( ) ) ; <nl> + <nl> + / / Test setting property <nl> + ieApp . setVisible _ MOD ( Boolean . TRUE ) ; <nl> + TestCase . assertTrue ( ieApp . getVisible _ MOD ( ) ) ; <nl> <nl> - appDispatch . invokeMethod ( Void . class , " Navigate2 " , " http : / / www . heise . de " ) ; <nl> + / / Check navigate function and with that the method invocation <nl> + assertTrue ( ieApp . getLocationURL _ MOD ( ) . isEmpty ( ) ) ; <nl> + <nl> + ieApp . Navigate2 _ MOD ( " https : / / github . com / java - native - access / " ) ; <nl> <nl> / / Check max . 2s if Navigation happend <nl> boolean navigationHappend = false ; <nl> for ( int i = 0 ; i < 10 ; i + + ) { <nl> - String url = appDispatch . getProperty ( String . class , " LocationURL " ) ; <nl> + String url = ieApp . getLocationURL _ MOD ( ) ; <nl> if ( ! url . isEmpty ( ) ) { <nl> navigationHappend = true ; <nl> break ; <nl> @ @ - 51 , 12 + 108 , 151 @ @ public class IDispatchTest { <nl> } <nl> <nl> TestCase . assertTrue ( navigationHappend ) ; <nl> - <nl> - appDispatch . invokeMethod ( Void . class , " Quit " ) ; <nl> + <nl> + ieApp . Quit _ MOD ( ) ; <nl> + } <nl> + <nl> + @ ComObject ( progId = " Internet . Explorer . 1 " , clsId = " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) <nl> + interface ComInternetExplorerNamed { <nl> + @ ComProperty ( name = " LocationURL " ) <nl> + String getLocationURL _ MOD ( ) ; <nl> + <nl> + @ ComMethod ( name = " Navigate2 " ) <nl> + void Navigate2 _ MOD ( String url ) ; <nl> + <nl> + @ ComProperty ( name = " Visible " ) <nl> + Boolean getVisible _ MOD ( ) ; <nl> + <nl> + @ ComProperty ( name = " Visible " ) <nl> + void setVisible _ MOD ( Boolean visible ) ; <nl> + <nl> + @ ComMethod ( name = " Quit " ) <nl> + void Quit _ MOD ( ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testDispatchBaseOnDISPID ( ) throws InterruptedException { <nl> + ComInternetExplorerDISPID ieApp = factory . createObject ( ComInternetExplorerDISPID . class ) ; <nl> + <nl> + / / Test getting property <nl> + TestCase . assertFalse ( ieApp . getVisible _ MOD ( ) ) ; <nl> <nl> + / / Test setting property <nl> + ieApp . setVisible _ MOD ( Boolean . TRUE ) ; <nl> + TestCase . assertTrue ( ieApp . getVisible _ MOD ( ) ) ; <nl> + <nl> + / / Check navigate function and with that the method invocation <nl> + assertTrue ( ieApp . getLocationURL _ MOD ( ) . isEmpty ( ) ) ; <nl> + <nl> + ieApp . Navigate2 _ MOD ( " https : / / github . com / java - native - access / " ) ; <nl> + <nl> + / / Check max . 2s if Navigation happend <nl> + boolean navigationHappend = false ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + String url = ieApp . getLocationURL _ MOD ( ) ; <nl> + if ( ! url . isEmpty ( ) ) { <nl> + navigationHappend = true ; <nl> + break ; <nl> + } else { <nl> + Thread . sleep ( 200 ) ; <nl> + } <nl> + } <nl> + <nl> + TestCase . assertTrue ( navigationHappend ) ; <nl> + <nl> + ieApp . Quit _ MOD ( ) ; <nl> + } <nl> + <nl> @ ComObject ( progId = " Internet . Explorer . 1 " , clsId = " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) <nl> - interface ComInternetExplorer extends IUnknown , IDispatch { <nl> + interface ComInternetExplorerDISPID { <nl> + @ ComProperty ( dispId = 0x000000d3 ) <nl> + String getLocationURL _ MOD ( ) ; <nl> + <nl> + @ ComMethod ( dispId = 0x000001f4 ) <nl> + void Navigate2 _ MOD ( String url ) ; <nl> + <nl> + @ ComProperty ( dispId = 0x00000192 ) <nl> + Boolean getVisible _ MOD ( ) ; <nl> + <nl> + @ ComProperty ( dispId = 0x00000192 ) <nl> + void setVisible _ MOD ( Boolean visible ) ; <nl> + <nl> + @ ComMethod ( dispId = 0x0000012c ) <nl> + void Quit _ MOD ( ) ; <nl> } <nl> + <nl> + @ Test <nl> + public void testIDispatchName ( ) throws InterruptedException { <nl> + ComInternetExplorerIDispatch ieApp = factory . createObject ( ComInternetExplorerIDispatch . class ) ; <nl> + <nl> + / / Test getting property <nl> + TestCase . assertFalse ( ieApp . getProperty ( Boolean . class , " Visible " ) ) ; <nl> + <nl> + / / Test setting property <nl> + ieApp . setProperty ( " Visible " , Boolean . TRUE ) ; <nl> + TestCase . assertTrue ( ieApp . getProperty ( Boolean . class , " Visible " ) ) ; <nl> + <nl> + / / Check navigate function and with that the method invocation <nl> + assertTrue ( ieApp . getProperty ( String . class , " LocationURL " ) . isEmpty ( ) ) ; <nl> + <nl> + ieApp . invokeMethod ( Void . class , " Navigate2 " , " https : / / github . com / java - native - access / " ) ; <nl> + <nl> + / / Check max . 2s if Navigation happend <nl> + boolean navigationHappend = false ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + String url = ieApp . getProperty ( String . class , " LocationURL " ) ; <nl> + if ( ! url . isEmpty ( ) ) { <nl> + navigationHappend = true ; <nl> + break ; <nl> + } else { <nl> + Thread . sleep ( 200 ) ; <nl> + } <nl> + } <nl> + <nl> + TestCase . assertTrue ( navigationHappend ) ; <nl> + <nl> + ieApp . invokeMethod ( Void . class , " Quit " ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testIDispatchDISPID ( ) throws InterruptedException { <nl> + DISPID locationURL = new DISPID ( 0x000000d3 ) ; <nl> + DISPID visible = new DISPID ( 0x00000192 ) ; <nl> + DISPID quit = new DISPID ( 0x0000012c ) ; <nl> + DISPID navigate2 = new DISPID ( 0x000001f4 ) ; <nl> + <nl> + ComInternetExplorerIDispatch ieApp = factory . createObject ( ComInternetExplorerIDispatch . class ) ; <nl> <nl> + / / Test getting property <nl> + TestCase . assertFalse ( ieApp . getProperty ( Boolean . class , visible ) ) ; <nl> + <nl> + / / Test setting property <nl> + ieApp . setProperty ( visible , Boolean . TRUE ) ; <nl> + TestCase . assertTrue ( ieApp . getProperty ( Boolean . class , visible ) ) ; <nl> + <nl> + / / Check navigate function and with that the method invocation <nl> + assertTrue ( ieApp . getProperty ( String . class , locationURL ) . isEmpty ( ) ) ; <nl> + <nl> + ieApp . invokeMethod ( Void . class , navigate2 , " https : / / github . com / java - native - access / " ) ; <nl> + <nl> + / / Check max . 2s if Navigation happend <nl> + boolean navigationHappend = false ; <nl> + for ( int i = 0 ; i < 10 ; i + + ) { <nl> + String url = ieApp . getProperty ( String . class , locationURL ) ; <nl> + if ( ! url . isEmpty ( ) ) { <nl> + navigationHappend = true ; <nl> + break ; <nl> + } else { <nl> + Thread . sleep ( 200 ) ; <nl> + } <nl> + } <nl> + <nl> + TestCase . assertTrue ( navigationHappend ) ; <nl> + <nl> + ieApp . invokeMethod ( Void . class , quit ) ; <nl> + } <nl> + <nl> + @ ComObject ( progId = " Internet . Explorer . 1 " , clsId = " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) <nl> + interface ComInternetExplorerIDispatch extends IDispatch { <nl> + } <nl> }
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / IDispatch . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / IDispatch . java 
 index f3d57b0 . . 5a67f89 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / IDispatch . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / IDispatch . java 
 @ @ - 12 , 13 + 12 , 17 @ @ 
 * / 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 + import com . sun . jna . platform . win32 . OaIdl . DISPID ; 
 + 
 / * * 
 * Java friendly version of { @ link com . sun . jna . platform . win32 . COM . IDispatch } . 
 * 
 * / 
 public interface IDispatch extends IUnknown { 
 - 
 	 < T > void setProperty ( String name , T value ) ; 
 	 < T > T getProperty ( Class < T > returnType , String name , Object . . . args ) ; 
 	 < T > T invokeMethod ( Class < T > returnType , String name , Object . . . args ) ; 
 + 	 < T > void setProperty ( DISPID dispid , T value ) ; 
 + 	 < T > T getProperty ( Class < T > returnType , DISPID dispid , Object . . . args ) ; 
 + 	 < T > T invokeMethod ( Class < T > returnType , DISPID dispid , Object . . . args ) ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 index 78a0eee . . 9942afb 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 @ @ - 14 , 7 + 14 , 6 @ @ package com . sun . jna . platform . win32 . COM . util ; 
 
 import java . lang . reflect . InvocationHandler ; 
 import java . lang . reflect . Proxy ; 
 - import java . util . concurrent . Callable ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . TimeoutException ; 
 
 @ @ - 227 , 21 + 226 , 35 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 
 	 	 ComProperty prop = method . getAnnotation ( ComProperty . class ) ; 
 	 	 if ( null ! = prop ) { 
 + int dispId = prop . dispId ( ) ; 
 	 	 	 if ( isVoid ) { 
 - 	 	 	 	 String propName = this . getMutatorName ( method , prop ) ; 
 - 	 	 	 	 this . setProperty ( propName , args [ 0 ] ) ; 
 - 	 	 	 	 return null ; 
 + if ( dispId ! = - 1 ) { 
 + this . setProperty ( new DISPID ( dispId ) , args [ 0 ] ) ; 
 + return null ; 
 + } else { 
 + String propName = this . getMutatorName ( method , prop ) ; 
 + this . setProperty ( propName , args [ 0 ] ) ; 
 + return null ; 
 + } 
 	 	 	 } else { 
 - 	 	 	 	 String propName = this . getAccessorName ( method , prop ) ; 
 - 	 	 	 	 return this . getProperty ( returnType , propName , args ) ; 
 + if ( dispId ! = - 1 ) { 
 + return this . getProperty ( returnType , new DISPID ( dispId ) , args ) ; 
 + } else { 
 + String propName = this . getAccessorName ( method , prop ) ; 
 + return this . getProperty ( returnType , propName , args ) ; 
 + } 
 	 	 	 } 
 	 	 } 
 
 	 	 ComMethod meth = method . getAnnotation ( ComMethod . class ) ; 
 	 	 if ( null ! = meth ) { 
 - 	 	 	 String methName = this . getMethodName ( method , meth ) ; 
 - 	 	 	 Object res = this . invokeMethod ( returnType , methName , args ) ; 
 - 	 	 	 return res ; 
 + int dispId = meth . dispId ( ) ; 
 + if ( dispId ! = - 1 ) { 
 + return this . invokeMethod ( returnType , new DISPID ( dispId ) , args ) ; 
 + } else { 
 + String methName = this . getMethodName ( method , meth ) ; 
 + return this . invokeMethod ( returnType , methName , args ) ; 
 + } 
 	 	 } 
 
 	 	 return null ; 
 @ @ - 328 , 42 + 341 , 58 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 / / - - - - - - - - - - - - - - - - - - - - - IDispatch - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 	 @ Override 
 	 public < T > void setProperty ( String name , T value ) { 
 + DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ; 
 + setProperty ( dispID , value ) ; 
 + 	 } 
 + 
 + @ Override 
 + 	 public < T > void setProperty ( DISPID dispId , T value ) { 
 assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 
 VARIANT v = Convert . toVariant ( value ) ; 
 - WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getRawDispatch ( ) , name , v ) ; 
 + WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYPUT , null , this . getRawDispatch ( ) , dispId , v ) ; 
 Convert . free ( v , value ) ; / / Free value allocated by Convert # toVariant 
 COMUtils . checkRC ( hr ) ; 
 	 } 
 - 
 + 
 	 @ Override 
 	 public < T > T getProperty ( Class < T > returnType , String name , Object . . . args ) { 
 - assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 - 
 - 	 	 VARIANT [ ] vargs ; 
 - 	 	 if ( null = = args ) { 
 - 	 	 	 vargs = new VARIANT [ 0 ] ; 
 - 	 	 } else { 
 - 	 	 	 vargs = new VARIANT [ args . length ] ; 
 - 	 	 } 
 - 	 	 for ( int i = 0 ; i < vargs . length ; + + i ) { 
 - 	 	 	 vargs [ i ] = Convert . toVariant ( args [ i ] ) ; 
 - 	 	 } 
 - 	 	 Variant . VARIANT . ByReference result = new Variant . VARIANT . ByReference ( ) ; 
 - 	 	 WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , this . getRawDispatch ( ) , name , vargs ) ; 
 - 
 - for ( int i = 0 ; i < vargs . length ; i + + ) { 
 - / / Free value allocated by Convert # toVariant 
 - Convert . free ( vargs [ i ] , args [ i ] ) ; 
 - } 
 - 
 - 	 	 COMUtils . checkRC ( hr ) ; 
 - 	 	 
 - return convertAndFreeReturn ( result , returnType ) ; 
 + DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ; 
 + return getProperty ( returnType , dispID , args ) ; 
 	 } 
 
 + @ Override 
 + public < T > T getProperty ( Class < T > returnType , DISPID dispID , Object . . . args ) { 
 + VARIANT [ ] vargs ; 
 + if ( null = = args ) { 
 + vargs = new VARIANT [ 0 ] ; 
 + } else { 
 + vargs = new VARIANT [ args . length ] ; 
 + } 
 + for ( int i = 0 ; i < vargs . length ; + + i ) { 
 + vargs [ i ] = Convert . toVariant ( args [ i ] ) ; 
 + } 
 + Variant . VARIANT . ByReference result = new Variant . VARIANT . ByReference ( ) ; 
 + WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ PROPERTYGET , result , this . getRawDispatch ( ) , dispID , vargs ) ; 
 + 
 + for ( int i = 0 ; i < vargs . length ; i + + ) { 
 + / / Free value allocated by Convert # toVariant 
 + Convert . free ( vargs [ i ] , args [ i ] ) ; 
 + } 
 + 
 + COMUtils . checkRC ( hr ) ; 
 + 
 + return convertAndFreeReturn ( result , returnType ) ; 
 + } 
 + 
 	 @ Override 
 	 public < T > T invokeMethod ( Class < T > returnType , String name , Object . . . args ) { 
 + DISPID dispID = resolveDispId ( this . getRawDispatch ( ) , name ) ; 
 + return invokeMethod ( returnType , dispID , args ) ; 
 + } 
 + 
 + @ Override 
 + public < T > T invokeMethod ( Class < T > returnType , DISPID dispID , Object . . . args ) { 
 assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 
 	 	 VARIANT [ ] vargs ; 
 @ @ - 376 , 7 + 405 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 	 vargs [ i ] = Convert . toVariant ( args [ i ] ) ; 
 	 	 } 
 	 	 Variant . VARIANT . ByReference result = new Variant . VARIANT . ByReference ( ) ; 
 - 	 	 WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getRawDispatch ( ) , name , vargs ) ; 
 + 	 	 WinNT . HRESULT hr = this . oleMethod ( OleAuto . DISPATCH _ METHOD , result , this . getRawDispatch ( ) , dispID , vargs ) ; 
 
 for ( int i = 0 ; i < vargs . length ; i + + ) { 
 / / Free value allocated by Convert # toVariant 
 @ @ - 524 , 11 + 553 , 9 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 	 	 return this . oleMethod ( nType , pvResult , pDisp , dispId , ( VARIANT [ ] ) null ) ; 
 	 } 
 
 - 	 / * 
 - 	 * @ see com . sun . jna . platform . win32 . COM . COMBindingBaseObject # oleMethod 
 - 	 * / 
 - 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , final IDispatch pDisp , String name , 
 - 	 	 	 VARIANT [ ] pArgs ) throws COMException { 
 + protected DISPID resolveDispId ( final IDispatch pDisp , String name ) { 
 + assert COMUtils . comIsInitialized ( ) : " COM not initialized " ; 
 + 
 if ( pDisp = = null ) 
 throw new COMException ( " pDisp ( IDispatch ) parameter is null ! " ) ; 
 
 @ @ - 541 , 8 + 568 , 17 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 pdispID ) ; 
 
 COMUtils . checkRC ( hr ) ; 
 + 
 + return pdispID . getValue ( ) ; 
 + } 
 + 
 + 	 / * 
 + 	 * @ see com . sun . jna . platform . win32 . COM . COMBindingBaseObject # oleMethod 
 + 	 * / 
 + 	 protected HRESULT oleMethod ( int nType , VARIANT . ByReference pvResult , final IDispatch pDisp , String name , 
 + 	 	 	 VARIANT [ ] pArgs ) throws COMException { 
 
 - return this . oleMethod ( nType , pvResult , pDisp , pdispID . getValue ( ) , pArgs ) ; 
 + return this . oleMethod ( nType , pvResult , pDisp , resolveDispId ( pDisp , name ) , pArgs ) ; 
 	 } 
 
 	 / * 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / annotation / ComProperty . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / annotation / ComProperty . java 
 index 6104c1d . . 33dd4c3 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / annotation / ComProperty . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / annotation / ComProperty . java 
 @ @ - 23 , 4 + 23 , 5 @ @ import java . lang . annotation . Target ; 
 @ Inherited 
 public @ interface ComProperty { 
 	 String name ( ) default " " ; 
 + int dispId ( ) default - 1 ; / / default to dispid unknown 
 } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java 
 index 7da4a2c . . 3232f4b 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / IDispatchTest . java 
 @ @ - 1 , 7 + 1 , 13 @ @ 
 package com . sun . jna . platform . win32 . COM . util ; 
 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . platform . win32 . COM . util . annotation . ComMethod ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 + import com . sun . jna . platform . win32 . COM . util . annotation . ComProperty ; 
 + import com . sun . jna . platform . win32 . OaIdl . DISPID ; 
 + import com . sun . jna . platform . win32 . Ole32 ; 
 import junit . framework . TestCase ; 
 + import static junit . framework . TestCase . assertTrue ; 
 import org . junit . After ; 
 import org . junit . Before ; 
 import org . junit . Test ; 
 @ @ - 12 , 36 + 18 , 87 @ @ public class IDispatchTest { 
 
 @ Before 
 public void before ( ) { 
 + Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 this . factory = new Factory ( ) ; 
 } 
 
 @ After 
 public void after ( ) { 
 this . factory . disposeAll ( ) ; 
 - this . factory . getComThread ( ) . terminate ( 1000 ) ; 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 } 
 - 
 + 
 @ Test 
 - public void testIDispatch ( ) throws InterruptedException { 
 - ComInternetExplorer ieApp = factory . createObject ( ComInternetExplorer . class ) ; 
 - IDispatch appDispatch = ieApp ; 
 + public void testDispatchBaseOnMethodName ( ) throws InterruptedException { 
 + ComInternetExplorerMethodname ieApp = factory . createObject ( ComInternetExplorerMethodname . class ) ; 
 
 / / Test getting property 
 - TestCase . assertFalse ( appDispatch . getProperty ( Boolean . class , " Visible " ) ) ; 
 + TestCase . assertFalse ( ieApp . getVisible ( ) ) ; 
 
 / / Test setting property 
 - appDispatch . setProperty ( " Visible " , Boolean . TRUE ) ; 
 - TestCase . assertTrue ( appDispatch . getProperty ( Boolean . class , " Visible " ) ) ; 
 + ieApp . setVisible ( Boolean . TRUE ) ; 
 + TestCase . assertTrue ( ieApp . getVisible ( ) ) ; 
 
 / / Check navigate function and with that the method invocation 
 - assert appDispatch . getProperty ( String . class , " LocationURL " ) . isEmpty ( ) ; 
 + assertTrue ( ieApp . getLocationURL ( ) . isEmpty ( ) ) ; 
 + 
 + ieApp . Navigate2 ( " https : / / github . com / java - native - access / " ) ; 
 + 
 + / / Check max . 2s if Navigation happend 
 + boolean navigationHappend = false ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + String url = ieApp . getLocationURL ( ) ; 
 + if ( ! url . isEmpty ( ) ) { 
 + navigationHappend = true ; 
 + break ; 
 + } else { 
 + Thread . sleep ( 200 ) ; 
 + } 
 + } 
 + 
 + TestCase . assertTrue ( navigationHappend ) ; 
 + 
 + ieApp . Quit ( ) ; 
 + } 
 + 
 + @ ComObject ( progId = " Internet . Explorer . 1 " , clsId = " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) 
 + interface ComInternetExplorerMethodname { 
 + @ ComProperty 
 + String getLocationURL ( ) ; 
 + 
 + @ ComMethod 
 + void Navigate2 ( String url ) ; 
 + 
 + @ ComProperty 
 + Boolean getVisible ( ) ; 
 + 
 + @ ComProperty 
 + void setVisible ( Boolean visible ) ; 
 + 
 + @ ComMethod 
 + void Quit ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testDispatchBaseOnNamed ( ) throws InterruptedException { 
 + ComInternetExplorerNamed ieApp = factory . createObject ( ComInternetExplorerNamed . class ) ; 
 + 
 + / / Test getting property 
 + TestCase . assertFalse ( ieApp . getVisible _ MOD ( ) ) ; 
 + 
 + / / Test setting property 
 + ieApp . setVisible _ MOD ( Boolean . TRUE ) ; 
 + TestCase . assertTrue ( ieApp . getVisible _ MOD ( ) ) ; 
 
 - appDispatch . invokeMethod ( Void . class , " Navigate2 " , " http : / / www . heise . de " ) ; 
 + / / Check navigate function and with that the method invocation 
 + assertTrue ( ieApp . getLocationURL _ MOD ( ) . isEmpty ( ) ) ; 
 + 
 + ieApp . Navigate2 _ MOD ( " https : / / github . com / java - native - access / " ) ; 
 
 / / Check max . 2s if Navigation happend 
 boolean navigationHappend = false ; 
 for ( int i = 0 ; i < 10 ; i + + ) { 
 - String url = appDispatch . getProperty ( String . class , " LocationURL " ) ; 
 + String url = ieApp . getLocationURL _ MOD ( ) ; 
 if ( ! url . isEmpty ( ) ) { 
 navigationHappend = true ; 
 break ; 
 @ @ - 51 , 12 + 108 , 151 @ @ public class IDispatchTest { 
 } 
 
 TestCase . assertTrue ( navigationHappend ) ; 
 - 
 - appDispatch . invokeMethod ( Void . class , " Quit " ) ; 
 + 
 + ieApp . Quit _ MOD ( ) ; 
 + } 
 + 
 + @ ComObject ( progId = " Internet . Explorer . 1 " , clsId = " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) 
 + interface ComInternetExplorerNamed { 
 + @ ComProperty ( name = " LocationURL " ) 
 + String getLocationURL _ MOD ( ) ; 
 + 
 + @ ComMethod ( name = " Navigate2 " ) 
 + void Navigate2 _ MOD ( String url ) ; 
 + 
 + @ ComProperty ( name = " Visible " ) 
 + Boolean getVisible _ MOD ( ) ; 
 + 
 + @ ComProperty ( name = " Visible " ) 
 + void setVisible _ MOD ( Boolean visible ) ; 
 + 
 + @ ComMethod ( name = " Quit " ) 
 + void Quit _ MOD ( ) ; 
 } 
 + 
 + @ Test 
 + public void testDispatchBaseOnDISPID ( ) throws InterruptedException { 
 + ComInternetExplorerDISPID ieApp = factory . createObject ( ComInternetExplorerDISPID . class ) ; 
 + 
 + / / Test getting property 
 + TestCase . assertFalse ( ieApp . getVisible _ MOD ( ) ) ; 
 
 + / / Test setting property 
 + ieApp . setVisible _ MOD ( Boolean . TRUE ) ; 
 + TestCase . assertTrue ( ieApp . getVisible _ MOD ( ) ) ; 
 + 
 + / / Check navigate function and with that the method invocation 
 + assertTrue ( ieApp . getLocationURL _ MOD ( ) . isEmpty ( ) ) ; 
 + 
 + ieApp . Navigate2 _ MOD ( " https : / / github . com / java - native - access / " ) ; 
 + 
 + / / Check max . 2s if Navigation happend 
 + boolean navigationHappend = false ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + String url = ieApp . getLocationURL _ MOD ( ) ; 
 + if ( ! url . isEmpty ( ) ) { 
 + navigationHappend = true ; 
 + break ; 
 + } else { 
 + Thread . sleep ( 200 ) ; 
 + } 
 + } 
 + 
 + TestCase . assertTrue ( navigationHappend ) ; 
 + 
 + ieApp . Quit _ MOD ( ) ; 
 + } 
 + 
 @ ComObject ( progId = " Internet . Explorer . 1 " , clsId = " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) 
 - interface ComInternetExplorer extends IUnknown , IDispatch { 
 + interface ComInternetExplorerDISPID { 
 + @ ComProperty ( dispId = 0x000000d3 ) 
 + String getLocationURL _ MOD ( ) ; 
 + 
 + @ ComMethod ( dispId = 0x000001f4 ) 
 + void Navigate2 _ MOD ( String url ) ; 
 + 
 + @ ComProperty ( dispId = 0x00000192 ) 
 + Boolean getVisible _ MOD ( ) ; 
 + 
 + @ ComProperty ( dispId = 0x00000192 ) 
 + void setVisible _ MOD ( Boolean visible ) ; 
 + 
 + @ ComMethod ( dispId = 0x0000012c ) 
 + void Quit _ MOD ( ) ; 
 } 
 + 
 + @ Test 
 + public void testIDispatchName ( ) throws InterruptedException { 
 + ComInternetExplorerIDispatch ieApp = factory . createObject ( ComInternetExplorerIDispatch . class ) ; 
 + 
 + / / Test getting property 
 + TestCase . assertFalse ( ieApp . getProperty ( Boolean . class , " Visible " ) ) ; 
 + 
 + / / Test setting property 
 + ieApp . setProperty ( " Visible " , Boolean . TRUE ) ; 
 + TestCase . assertTrue ( ieApp . getProperty ( Boolean . class , " Visible " ) ) ; 
 + 
 + / / Check navigate function and with that the method invocation 
 + assertTrue ( ieApp . getProperty ( String . class , " LocationURL " ) . isEmpty ( ) ) ; 
 + 
 + ieApp . invokeMethod ( Void . class , " Navigate2 " , " https : / / github . com / java - native - access / " ) ; 
 + 
 + / / Check max . 2s if Navigation happend 
 + boolean navigationHappend = false ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + String url = ieApp . getProperty ( String . class , " LocationURL " ) ; 
 + if ( ! url . isEmpty ( ) ) { 
 + navigationHappend = true ; 
 + break ; 
 + } else { 
 + Thread . sleep ( 200 ) ; 
 + } 
 + } 
 + 
 + TestCase . assertTrue ( navigationHappend ) ; 
 + 
 + ieApp . invokeMethod ( Void . class , " Quit " ) ; 
 + } 
 + 
 + @ Test 
 + public void testIDispatchDISPID ( ) throws InterruptedException { 
 + DISPID locationURL = new DISPID ( 0x000000d3 ) ; 
 + DISPID visible = new DISPID ( 0x00000192 ) ; 
 + DISPID quit = new DISPID ( 0x0000012c ) ; 
 + DISPID navigate2 = new DISPID ( 0x000001f4 ) ; 
 + 
 + ComInternetExplorerIDispatch ieApp = factory . createObject ( ComInternetExplorerIDispatch . class ) ; 
 
 + / / Test getting property 
 + TestCase . assertFalse ( ieApp . getProperty ( Boolean . class , visible ) ) ; 
 + 
 + / / Test setting property 
 + ieApp . setProperty ( visible , Boolean . TRUE ) ; 
 + TestCase . assertTrue ( ieApp . getProperty ( Boolean . class , visible ) ) ; 
 + 
 + / / Check navigate function and with that the method invocation 
 + assertTrue ( ieApp . getProperty ( String . class , locationURL ) . isEmpty ( ) ) ; 
 + 
 + ieApp . invokeMethod ( Void . class , navigate2 , " https : / / github . com / java - native - access / " ) ; 
 + 
 + / / Check max . 2s if Navigation happend 
 + boolean navigationHappend = false ; 
 + for ( int i = 0 ; i < 10 ; i + + ) { 
 + String url = ieApp . getProperty ( String . class , locationURL ) ; 
 + if ( ! url . isEmpty ( ) ) { 
 + navigationHappend = true ; 
 + break ; 
 + } else { 
 + Thread . sleep ( 200 ) ; 
 + } 
 + } 
 + 
 + TestCase . assertTrue ( navigationHappend ) ; 
 + 
 + ieApp . invokeMethod ( Void . class , quit ) ; 
 + } 
 + 
 + @ ComObject ( progId = " Internet . Explorer . 1 " , clsId = " { 0002DF01 - 0000 - 0000 - C000 - 000000000046 } " ) 
 + interface ComInternetExplorerIDispatch extends IDispatch { 
 + } 
 }

NEAREST DIFF:
ELIMINATEDSENTENCE
