BLEU SCORE: 0.040583489434387374

TEST MSG: Some Changes to the COM support
GENERATED MSG: some changes

TEST DIFF (one line): diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java <nl> index abc7e8f . . 80e063b 100644 <nl> - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java <nl> + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class MSOfficeDemo { <nl> Thread . currentThread ( ) . sleep ( 10000 ) ; <nl> / / save in different formats <nl> / / pdf format is only supported in MSWord 2007 and above <nl> - / / msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . pdf " , wdFormatPDF ) ; <nl> + msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . pdf " , wdFormatPDF ) ; <nl> msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . rtf " , wdFormatRTF ) ; <nl> msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . html " , wdFormatHTML ) ; <nl> / / close and save the document <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java <nl> index bff8428 . . 07220e0 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ import com . sun . jna . platform . win32 . Guid . CLSID ; <nl> import com . sun . jna . platform . win32 . Guid . IID ; <nl> import com . sun . jna . platform . win32 . OaIdl . DISPID ; <nl> import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; <nl> + import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; <nl> import com . sun . jna . platform . win32 . OleAuto ; <nl> import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> @ @ - 91 , 7 + 92 , 7 @ @ public class COMEarlyBindingObject extends COMBindingBaseObject implements <nl> @ Override <nl> public HRESULT Invoke ( DISPID dispIdMember , IID riid , LCID lcid , <nl> DISPID wFlags , DISPPARAMS pDispParams , ByReference pVarResult , <nl> - com . sun . jna . platform . win32 . OaIdl . EXCEPINFO . ByReference pExcepInfo , <nl> + EXCEPINFO . ByReference pExcepInfo , <nl> IntByReference puArgErr ) { <nl> return this . getIDispatch ( ) . Invoke ( dispIdMember , riid , lcid , wFlags , <nl> pDispParams , pVarResult , pExcepInfo , puArgErr ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java <nl> index 518bc6e . . eefc7d6 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java <nl> @ @ - 28 , 7 + 28 , 9 @ @ public class COMException extends RuntimeException { <nl> <nl> / * * The pu arg err . * / <nl> private IntByReference puArgErr ; <nl> - <nl> + <nl> + private int uArgErr ; <nl> + <nl> / * * <nl> * Instantiates a new automation exception . <nl> * / <nl> @ @ - 70 , 7 + 72 , 7 @ @ public class COMException extends RuntimeException { <nl> * / <nl> public COMException ( String message , EXCEPINFO pExcepInfo , <nl> IntByReference puArgErr ) { <nl> - super ( message ) ; <nl> + super ( message + " ( puArgErr = " + puArgErr . getValue ( ) + " ) " ) ; <nl> this . pExcepInfo = pExcepInfo ; <nl> this . puArgErr = puArgErr ; <nl> } <nl> @ @ - 102 , 4 + 104 , 12 @ @ public class COMException extends RuntimeException { <nl> public IntByReference getArgErr ( ) { <nl> return puArgErr ; <nl> } <nl> + <nl> + public int getuArgErr ( ) { <nl> + return uArgErr ; <nl> + } <nl> + <nl> + public void setuArgErr ( int uArgErr ) { <nl> + this . uArgErr = uArgErr ; <nl> + } <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> index cdb4cfc . . 0f170a2 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import com . sun . jna . platform . win32 . Advapi32Util . EnumKey ; <nl> import com . sun . jna . platform . win32 . Advapi32Util . InfoKey ; <nl> import com . sun . jna . platform . win32 . Kernel32Util ; <nl> import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; <nl> + import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> import com . sun . jna . platform . win32 . WinNT ; <nl> import com . sun . jna . platform . win32 . WinNT . HRESULT ; <nl> import com . sun . jna . platform . win32 . WinReg ; <nl> @ @ - 112 , 7 + 113 , 7 @ @ public abstract class COMUtils { <nl> IntByReference puArgErr ) { <nl> if ( FAILED ( hr ) ) { <nl> String formatMessageFromHR = Kernel32Util . formatMessage ( hr ) ; <nl> - throw new COMException ( formatMessageFromHR ) ; <nl> + throw new COMException ( formatMessageFromHR , pExcepInfo , puArgErr ) ; <nl> } <nl> } <nl> <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java <nl> index 6a16a69 . . b983f0d 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java <nl> @ @ - 42 , 6 + 42 , 8 @ @ public class TlbImp implements TlbConst { <nl> / * * The out . * / <nl> private File comRootDir ; <nl> <nl> + private File outputDir ; <nl> + <nl> private TlbCmdlineArgs cmdlineArgs ; <nl> <nl> / * * <nl> @ @ - 56 , 9 + 58 , 9 @ @ public class TlbImp implements TlbConst { <nl> <nl> public TlbImp ( String [ ] args ) { <nl> this . cmdlineArgs = new TlbCmdlineArgs ( args ) ; <nl> - <nl> + <nl> if ( this . cmdlineArgs . isTlbId ( ) ) { <nl> - String clsid = this . cmdlineArgs . getParam ( CMD _ ARG _ TYPELIB _ ID ) ; <nl> + String clsid = this . cmdlineArgs . getRequiredParam ( CMD _ ARG _ TYPELIB _ ID ) ; <nl> int majorVersion = this . cmdlineArgs <nl> . getIntParam ( CMD _ ARG _ TYPELIB _ MAJOR _ VERSION ) ; <nl> int minorVersion = this . cmdlineArgs <nl> @ @ - 70 , 7 + 72 , 7 @ @ public class TlbImp implements TlbConst { <nl> minorVersion ) ; <nl> this . startCOM2Java ( ) ; <nl> } else if ( this . cmdlineArgs . isTlbFile ( ) ) { <nl> - String file = this . cmdlineArgs . getParam ( CMD _ ARG _ TYPELIB _ FILE ) ; <nl> + String file = this . cmdlineArgs . getRequiredParam ( CMD _ ARG _ TYPELIB _ FILE ) ; <nl> / / initialize typelib <nl> / / check version numbers with registry entries ! ! ! <nl> this . typeLibUtil = new TypeLibUtil ( file ) ; <nl> @ @ - 86 , 9 + 88 , 9 @ @ public class TlbImp implements TlbConst { <nl> try { <nl> / / create output Dir <nl> this . createDir ( ) ; <nl> - <nl> - int bindingMode = this . cmdlineArgs . getBindingMode ( ) ; <nl> - <nl> + <nl> + String bindingMode = this . cmdlineArgs . getBindingMode ( ) ; <nl> + <nl> int typeInfoCount = typeLibUtil . getTypeInfoCount ( ) ; <nl> for ( int i = 0 ; i < typeInfoCount ; + + i ) { <nl> TYPEKIND typekind = typeLibUtil . getTypeInfoType ( i ) ; <nl> @ @ - 106 , 7 + 108 , 8 @ @ public class TlbImp implements TlbConst { <nl> this . createCOMDispInterface ( i , this . getPackageName ( ) , <nl> typeLibUtil ) ; <nl> } else if ( typekind . value = = TYPEKIND . TKIND _ COCLASS ) { <nl> - this . createCOMCoClass ( i , this . getPackageName ( ) , typeLibUtil , bindingMode ) ; <nl> + this . createCOMCoClass ( i , this . getPackageName ( ) , <nl> + typeLibUtil , bindingMode ) ; <nl> } else if ( typekind . value = = TYPEKIND . TKIND _ ALIAS ) { <nl> this . logInfo ( " ' TKIND _ ALIAS ' objects are currently not supported ! " ) ; <nl> } else if ( typekind . value = = TYPEKIND . TKIND _ UNION ) { <nl> @ @ - 122 , 10 + 125 , 16 @ @ public class TlbImp implements TlbConst { <nl> } <nl> <nl> private void createDir ( ) throws FileNotFoundException { <nl> - String tmp = System . getProperty ( " java . io . tmpdir " ) ; <nl> - this . comRootDir = new File ( tmp + " _ jnaCOM _ " <nl> - + System . currentTimeMillis ( ) + " \ \ myPackage \ \ " <nl> - + this . typeLibUtil . getName ( ) . toLowerCase ( ) + " \ \ " ) ; <nl> + String _ outputDir = this . cmdlineArgs . getParam ( CMD _ ARG _ OUTPUT _ DIR ) ; <nl> + String path = " _ jnaCOM _ " + System . currentTimeMillis ( ) + " \ \ myPackage \ \ " <nl> + + this . typeLibUtil . getName ( ) . toLowerCase ( ) + " \ \ " ; <nl> + <nl> + if ( _ outputDir ! = null ) { <nl> + this . comRootDir = new File ( _ outputDir + " \ \ " + path ) ; <nl> + } else { <nl> + String tmp = System . getProperty ( " java . io . tmpdir " ) ; <nl> + this . comRootDir = new File ( tmp + " \ \ " + path ) ; <nl> + } <nl> <nl> if ( this . comRootDir . exists ( ) ) <nl> this . comRootDir . delete ( ) ; <nl> @ @ - 204 , 7 + 213 , 7 @ @ public class TlbImp implements TlbConst { <nl> } <nl> <nl> private void createCOMCoClass ( int index , String packagename , <nl> - TypeLibUtil typeLibUtil , int bindingMode ) throws IOException { <nl> + TypeLibUtil typeLibUtil , String bindingMode ) throws IOException { <nl> TlbCoClass tlbCoClass = new TlbCoClass ( index , this . getPackageName ( ) , <nl> typeLibUtil , bindingMode ) ; <nl> this . writeTlbClass ( tlbCoClass ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java <nl> index 477c437 . . ce1f4c6 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java <nl> @ @ - 73 , 13 + 73 , 13 @ @ public abstract class TlbBase { <nl> public static String [ ] IDISPATCH _ METHODS = { " GetTypeInfoCount " , <nl> " GetTypeInfo " , " GetIDsOfNames " , " Invoke " } ; <nl> <nl> - protected int bindingMode = TlbConst . BINDING _ MODE _ DISPID ; <nl> + protected String bindingMode = TlbConst . BINDING _ MODE _ DISPID ; <nl> <nl> public TlbBase ( int index , TypeLibUtil typeLibUtil , TypeInfoUtil typeInfoUtil ) { <nl> this ( index , typeLibUtil , typeInfoUtil , TlbConst . BINDING _ MODE _ DISPID ) ; <nl> } <nl> <nl> - public TlbBase ( int index , TypeLibUtil typeLibUtil , TypeInfoUtil typeInfoUtil , int bindingMode ) { <nl> + public TlbBase ( int index , TypeLibUtil typeLibUtil , TypeInfoUtil typeInfoUtil , String bindingMode ) { <nl> this . index = index ; <nl> this . typeLibUtil = typeLibUtil ; <nl> this . typeInfoUtil = typeInfoUtil ; <nl> @ @ - 266 , 14 + 266 , 14 @ @ public abstract class TlbBase { <nl> } <nl> <nl> protected boolean isVTableMode ( ) { <nl> - if ( this . bindingMode = = TlbConst . BINDING _ MODE _ VTABLE ) <nl> + if ( this . bindingMode . equalsIgnoreCase ( TlbConst . BINDING _ MODE _ VTABLE ) ) <nl> return true ; <nl> else <nl> return false ; <nl> } <nl> <nl> protected boolean isDispIdMode ( ) { <nl> - if ( this . bindingMode = = TlbConst . BINDING _ MODE _ DISPID ) <nl> + if ( this . bindingMode . equalsIgnoreCase ( TlbConst . BINDING _ MODE _ DISPID ) ) <nl> return true ; <nl> else <nl> return false ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCmdlineArgs . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCmdlineArgs . java <nl> index a560b59 . . ce71e24 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCmdlineArgs . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCmdlineArgs . java <nl> @ @ - 22 , 12 + 22 , 16 @ @ public class TlbCmdlineArgs extends Hashtable < String , String > implements <nl> } <nl> <nl> public int getIntParam ( String key ) { <nl> - String param = this . getParam ( key ) ; <nl> + String param = this . getRequiredParam ( key ) ; <nl> return new Integer ( param ) . intValue ( ) ; <nl> } <nl> <nl> public String getParam ( String key ) { <nl> - String param = this . get ( key ) ; <nl> + return this . get ( key ) ; <nl> + } <nl> + <nl> + public String getRequiredParam ( String key ) { <nl> + String param = this . getParam ( key ) ; <nl> if ( param = = null ) <nl> throw new TlbParameterNotFoundException ( <nl> " Commandline parameter not found : " + key ) ; <nl> @ @ - 55 , 15 + 59 , 15 @ @ public class TlbCmdlineArgs extends Hashtable < String , String > implements <nl> return this . containsKey ( CMD _ ARG _ TYPELIB _ ID ) ; <nl> } <nl> <nl> - public int getBindingMode ( ) { <nl> + public String getBindingMode ( ) { <nl> if ( this . containsKey ( CMD _ ARG _ BINDING _ MODE ) ) <nl> - return this . getIntParam ( CMD _ ARG _ BINDING _ MODE ) ; <nl> + return this . getParam ( CMD _ ARG _ BINDING _ MODE ) ; <nl> else <nl> return BINDING _ MODE _ VTABLE ; <nl> } <nl> <nl> public void showCmdHelp ( ) { <nl> - String helpStr = " usage : TlbImp [ - tlb . id - tlb . major . version - tlb . minor . version ] [ - tlb . file ] [ - bind . mode vTable , dispId ] " <nl> + String helpStr = " usage : TlbImp [ - tlb . id - tlb . major . version - tlb . minor . version ] [ - tlb . file ] [ - bind . mode vTable , dispId ] [ - output . dir ] " <nl> + CRCR <nl> + " options : " <nl> + CR <nl> @ @ - 76 , 6 + 80 , 8 @ @ public class TlbCmdlineArgs extends Hashtable < String , String > implements <nl> + " - tlb . file The file name containing the type library . " <nl> + CR <nl> + " - bind . mode The binding mode used to create the Java code . " <nl> + + CR <nl> + + " - output . dir The optional output directory , default is the user temp directory . " <nl> + CRCR <nl> + " samples : " <nl> + CR <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java <nl> index 2f2797f . . 1cf55e0 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class TlbCoClass extends TlbBase { <nl> * @ param typeLibUtil <nl> * the type lib util <nl> * / <nl> - public TlbCoClass ( int index , String packagename , TypeLibUtil typeLibUtil , int bindingMode ) { <nl> + public TlbCoClass ( int index , String packagename , TypeLibUtil typeLibUtil , String bindingMode ) { <nl> super ( index , typeLibUtil , null ) ; <nl> <nl> TypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; <nl> @ @ - 89 , 7 + 89 , 7 @ @ public class TlbCoClass extends TlbBase { <nl> this . createContent ( this . content ) ; <nl> } <nl> <nl> - protected void createFunctions ( TypeInfoUtil typeInfoUtil , int bindingMode ) { <nl> + protected void createFunctions ( TypeInfoUtil typeInfoUtil , String bindingMode ) { <nl> TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; <nl> int cFuncs = typeAttr . cFuncs . intValue ( ) ; <nl> for ( int i = 0 ; i < cFuncs ; i + + ) { <nl> @ @ - 98 , 10 + 98 , 10 @ @ public class TlbCoClass extends TlbBase { <nl> <nl> TlbAbstractMethod method = null ; <nl> if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ FUNC ) ) { <nl> - if ( this . isDispIdMode ( ) ) <nl> + if ( this . isVTableMode ( ) ) <nl> method = new TlbFunctionVTable ( i , index , typeLibUtil , funcDesc , typeInfoUtil ) ; <nl> else <nl> - method = new TlbFunctionVTable ( i , index , typeLibUtil , funcDesc , typeInfoUtil ) ; <nl> + method = new TlbFunctionDispId ( i , index , typeLibUtil , funcDesc , typeInfoUtil ) ; <nl> } else if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ PROPERTYGET ) ) { <nl> method = new TlbPropertyGet ( i , index , typeLibUtil , funcDesc , <nl> typeInfoUtil ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbConst . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbConst . java <nl> index 4b24ecf . . 838c69d 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbConst . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbConst . java <nl> @ @ - 40 , 13 + 40 , 15 @ @ public interface TlbConst { <nl> <nl> public final static String CMD _ ARG _ BINDING _ MODE = " bind . mode " ; <nl> <nl> - public final static int BINDING _ MODE _ VTABLE = 0 ; <nl> + public final static String BINDING _ MODE _ VTABLE = " vtable " ; <nl> <nl> - public final static int BINDING _ MODE _ DISPID = 1 ; <nl> + public final static String BINDING _ MODE _ DISPID = " dispid " ; <nl> <nl> public final static String CMD _ ARG _ TYPELIB _ MAJOR _ VERSION = " tlb . major . version " ; <nl> <nl> public final static String CMD _ ARG _ TYPELIB _ MINOR _ VERSION = " tlb . minor . version " ; <nl> <nl> public final static String CMD _ ARG _ TYPELIB _ FILE = " tlb . file " ; <nl> + <nl> + public final static String CMD _ ARG _ OUTPUT _ DIR = " output . dir " ; <nl> } <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . java <nl> index 3358f0f . . 247b941 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . java <nl> @ @ - 43 , 15 + 43 , 18 @ @ public class TlbFunctionDispId extends TlbAbstractMethod { <nl> <nl> String [ ] names = typeInfoUtil . getNames ( funcDesc . memid , paramCount + 1 ) ; <nl> <nl> - / / if there is at least one param we need a comma <nl> - if ( paramCount > 0 ) <nl> - methodvariables = " , " ; <nl> - <nl> for ( int i = 0 ; i < paramCount ; i + + ) { <nl> ELEMDESC elemdesc = funcDesc . lprgelemdescParam . elemDescArg [ i ] ; <nl> String methodName = names [ i + 1 ] . toLowerCase ( ) ; <nl> - methodparams + = this . getType ( elemdesc . tdesc ) + " " + this . replaceJavaKeyword ( methodName ) ; <nl> - methodvariables + = methodName ; <nl> + String type = this . getType ( elemdesc . tdesc ) ; <nl> + String _ methodName = this . replaceJavaKeyword ( methodName ) ; <nl> + methodparams + = type + " " + _ methodName ; <nl> + <nl> + / / wrap all in a VARIANT <nl> + if ( type . equals ( " VARIANT " ) ) <nl> + methodvariables + = _ methodName ; <nl> + else <nl> + methodvariables + = " new VARIANT ( " + _ methodName + " ) " ; <nl> <nl> / / if there is more than 1 param <nl> if ( i < ( paramCount - 1 ) ) { <nl> @ @ - 59 , 9 + 62 , 16 @ @ public class TlbFunctionDispId extends TlbAbstractMethod { <nl> methodvariables + = " , " ; <nl> } <nl> } <nl> + <nl> + String returnValue ; <nl> + if ( this . returnType . equalsIgnoreCase ( " VARIANT " ) ) <nl> + returnValue = " pResult " ; <nl> + else <nl> + returnValue = " ( ( " + returnType + " ) pResult . getValue ( ) ) " ; <nl> <nl> this . replaceVariable ( " helpstring " , docStr ) ; <nl> this . replaceVariable ( " returntype " , returnType ) ; <nl> + this . replaceVariable ( " returnvalue " , returnValue ) ; <nl> this . replaceVariable ( " methodname " , methodName ) ; <nl> this . replaceVariable ( " methodparams " , methodparams ) ; <nl> this . replaceVariable ( " methodvariables " , methodvariables ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . template <nl> index f7e2a5d . . 7d5584a 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . template <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . template <nl> @ @ - 4 , 5 + 4 , 7 @ @ <nl> 	 * Member id : $ { memberid } <nl> 	 * / <nl> 	 public $ { returntype } $ { methodname } ( $ { methodparams } ) { <nl> - 	 	 return this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , new DISPID ( $ { memberid } ) ) ; <nl> + 	 	 VARIANT . ByReference pResult = new VARIANT . ByReference ( ) ; <nl> + 	 	 this . oleMethod ( OleAuto . DISPATCH _ METHOD , pResult , getIDispatch ( ) , new DISPID ( $ { memberid } ) , new VARIANT [ ] { $ { methodvariables } } ) ; <nl> + 	 	 return $ { returnvalue } ; <nl> 	 } <nl> \ No newline at end of file <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> index 64ee249 . . 6c34759 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import java . util . Arrays ; <nl> import java . util . Date ; <nl> import java . util . List ; <nl> <nl> + import com . sun . jna . IntegerType ; <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . Union ; <nl> @ @ - 15 , 14 + 16 , 16 @ @ import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; <nl> import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLByReference ; <nl> import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOLByReference ; <nl> import com . sun . jna . platform . win32 . WTypes . BSTR ; <nl> + import com . sun . jna . platform . win32 . WTypes . BSTRByReference ; <nl> import com . sun . jna . platform . win32 . WTypes . VARTYPE ; <nl> + import com . sun . jna . platform . win32 . WinDef . BOOL ; <nl> import com . sun . jna . platform . win32 . WinDef . BYTE ; <nl> import com . sun . jna . platform . win32 . WinDef . CHAR ; <nl> import com . sun . jna . platform . win32 . WinDef . CHARByReference ; <nl> import com . sun . jna . platform . win32 . WinDef . LONG ; <nl> + import com . sun . jna . platform . win32 . WinDef . LONGByReference ; <nl> import com . sun . jna . platform . win32 . WinDef . LONGLONG ; <nl> import com . sun . jna . platform . win32 . WinDef . LONGLONGByReference ; <nl> - import com . sun . jna . platform . win32 . WinDef . LONGByReference ; <nl> import com . sun . jna . platform . win32 . WinDef . PVOID ; <nl> import com . sun . jna . platform . win32 . WinDef . SCODE ; <nl> import com . sun . jna . platform . win32 . WinDef . SCODEByReference ; <nl> @ @ - 30 , 9 + 33 , 9 @ @ import com . sun . jna . platform . win32 . WinDef . SHORT ; <nl> import com . sun . jna . platform . win32 . WinDef . UINT ; <nl> import com . sun . jna . platform . win32 . WinDef . UINTByReference ; <nl> import com . sun . jna . platform . win32 . WinDef . ULONG ; <nl> + import com . sun . jna . platform . win32 . WinDef . ULONGByReference ; <nl> import com . sun . jna . platform . win32 . WinDef . ULONGLONG ; <nl> import com . sun . jna . platform . win32 . WinDef . ULONGLONGByReference ; <nl> - import com . sun . jna . platform . win32 . WinDef . ULONGByReference ; <nl> import com . sun . jna . platform . win32 . WinDef . USHORT ; <nl> import com . sun . jna . platform . win32 . WinDef . USHORTByReference ; <nl> import com . sun . jna . platform . win32 . COM . Dispatch ; <nl> @ @ - 135 , 8 + 138 , 18 @ @ public interface Variant { <nl> this . setValue ( VT _ BSTR , value ) ; <nl> } <nl> <nl> + public VARIANT ( BSTRByReference value ) { <nl> + this ( ) ; <nl> + this . setValue ( VT _ BYREF | VT _ BSTR , value ) ; <nl> + } <nl> + <nl> public VARIANT ( VARIANT _ BOOL value ) { <nl> this ( ) ; <nl> + this . setValue ( VT _ BOOL , new BOOL ( value . intValue ( ) ) ) ; <nl> + } <nl> + <nl> + public VARIANT ( BOOL value ) { <nl> + this ( ) ; <nl> this . setValue ( VT _ BOOL , value ) ; <nl> } <nl> <nl> @ @ - 189 , 9 + 202 , 9 @ @ public interface Variant { <nl> public VARIANT ( boolean value ) { <nl> this ( ) ; <nl> if ( value ) <nl> - this . setValue ( VT _ BOOL , VARIANT _ TRUE ) ; <nl> + this . setValue ( VT _ BOOL , new BOOL ( VARIANT _ TRUE . intValue ( ) ) ) ; <nl> else <nl> - this . setValue ( VT _ BOOL , VARIANT _ FALSE ) ; <nl> + this . setValue ( VT _ BOOL , new BOOL ( VARIANT _ FALSE . intValue ( ) ) ) ; <nl> } <nl> <nl> public VARIANT ( IDispatch value ) { <nl> @ @ - 537 , 7 + 550 , 7 @ @ public interface Variant { <nl> / / DOUBLE VT _ R8 <nl> public Double dblVal ; <nl> / / VARIANT _ BOOL VT _ BOOL <nl> - public VARIANT _ BOOL boolVal ; <nl> + public BOOL boolVal ; <nl> / / SCODE VT _ ERROR <nl> public SCODE scode ; <nl> / / CY VT _ CY <nl> @ @ - 575 , 7 + 588 , 7 @ @ public interface Variant { <nl> / / DATE * VT _ BYREF | VT _ DATE <nl> public DATE . ByReference pdate ; <nl> / / BSTR * VT _ BYREF | VT _ BSTR <nl> - public BSTR pbstrVal ; <nl> + public BSTR . ByReference pbstrVal ; <nl> / / IUnknown * * VT _ BYREF | VT _ UNKNOWN <nl> public Unknown . ByReference ppunkVal ; <nl> / / IDispatch * * VT _ BYREF | VT _ DISPATCH <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> index 21e7942 . . 889773a 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java <nl> @ @ - 1091 , 7 + 1091 , 7 @ @ public interface WinDef extends StdCallLibrary { <nl> * the value <nl> * / <nl> public USHORT ( long value ) { <nl> - super ( 2 , value , true ) ; <nl> + super ( SIZE , value , true ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / ChangeLog b / ChangeLog <nl> index 289d195 . . ff76645 100644 <nl> - - - a / ChangeLog <nl> + + + b / ChangeLog <nl> @ @ - 1 , 3 + 1 , 13 @ @ <nl> + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > <nl> + <nl> + 	 * configure . ac : Put local . exp in the right place . <nl> + 	 * configure : Rebuilt . <nl> + <nl> + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . <nl> + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires <nl> + 	 that all function arguments be passed on the stack ( no regparm <nl> + 	 support ) . <nl> + <nl> 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > <nl> <nl> 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET <nl> diff - - git a / configure b / configure <nl> index 5876eb7 . . 4a12b96 100755 <nl> - - - a / configure <nl> + + + b / configure <nl> @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu <nl> <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / configure . ac b / configure . ac <nl> index 7ffb36c . . 13d5bc2 100644 <nl> - - - a / configure . ac <nl> + + + b / configure . ac <nl> @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT <nl> AX _ CFLAGS _ WARN _ ALL <nl> if test " x $ GCC " = " xyes " ; then <nl> CFLAGS = " $ CFLAGS - fexceptions " <nl> - touch testsuite / local . exp <nl> + touch local . exp <nl> else <nl> cat > local . exp < < EOF <nl> - set CC _ FOR _ TARGET $ CC <nl> + set CC _ FOR _ TARGET " $ CC " <nl> EOF <nl> fi <nl> <nl> diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c <nl> index 611e221 . . 3f46693 100644 <nl> - - - a / src / x86 / ffi . c <nl> + + + b / src / x86 / ffi . c <nl> @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) <nl> / * * private members * * / <nl> <nl> / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect <nl> - on MSVC - standard cdecl convention applies . * / <nl> + on MSVC or SUNPRO _ C - - standard conventions apply . * / <nl> static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , <nl> void * * args , ffi _ cif * cif ) ; <nl> void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) <nl> diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S <nl> index 69e7e8d . . 71502bb 100644 <nl> - - - a / src / x86 / sysv . S <nl> + + + b / src / x86 / sysv . S <nl> @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : <nl> 	 leal 	 - 24 ( % ebp ) , % edx <nl> 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / <nl> 	 leal 	 8 ( % ebp ) , % edx <nl> + # ifdef _ _ SUNPRO _ C <nl> + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function <nl> + 	 attribute , so we have to pass all three arguments to <nl> + 	 ffi _ closure _ SYSV _ inner on the stack . * / <nl> + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> + 	 leal 	 - 12 ( % ebp ) , % edx <nl> + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / <nl> + 	 movl % eax , ( % esp ) / * closure * / <nl> + # else <nl> 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / <nl> 	 leal 	 - 12 ( % ebp ) , % edx <nl> 	 movl 	 % edx , ( % esp ) 	 / * & resp * / <nl> + # endif <nl> # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ <nl> 	 call 	 ffi _ closure _ SYSV _ inner <nl> # else

TEST DIFF:
diff - - git a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java 
 index abc7e8f . . 80e063b 100644 
 - - - a / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java 
 + + + b / contrib / msoffice / src / com / sun / jna / platform / win32 / COM / office / MSOfficeDemo . java 
 @ @ - 40 , 7 + 40 , 7 @ @ public class MSOfficeDemo { 
 Thread . currentThread ( ) . sleep ( 10000 ) ; 
 / / save in different formats 
 / / pdf format is only supported in MSWord 2007 and above 
 - / / msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . pdf " , wdFormatPDF ) ; 
 + msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . pdf " , wdFormatPDF ) ; 
 msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . rtf " , wdFormatRTF ) ; 
 msWord . SaveAs ( " C : \ \ TEMP \ \ jnatestSaveAs . html " , wdFormatHTML ) ; 
 / / close and save the document 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java 
 index bff8428 . . 07220e0 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMEarlyBindingObject . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import com . sun . jna . platform . win32 . Guid . CLSID ; 
 import com . sun . jna . platform . win32 . Guid . IID ; 
 import com . sun . jna . platform . win32 . OaIdl . DISPID ; 
 import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; 
 + import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; 
 import com . sun . jna . platform . win32 . OleAuto ; 
 import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 @ @ - 91 , 7 + 92 , 7 @ @ public class COMEarlyBindingObject extends COMBindingBaseObject implements 
 @ Override 
 public HRESULT Invoke ( DISPID dispIdMember , IID riid , LCID lcid , 
 DISPID wFlags , DISPPARAMS pDispParams , ByReference pVarResult , 
 - com . sun . jna . platform . win32 . OaIdl . EXCEPINFO . ByReference pExcepInfo , 
 + EXCEPINFO . ByReference pExcepInfo , 
 IntByReference puArgErr ) { 
 return this . getIDispatch ( ) . Invoke ( dispIdMember , riid , lcid , wFlags , 
 pDispParams , pVarResult , pExcepInfo , puArgErr ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java 
 index 518bc6e . . eefc7d6 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMException . java 
 @ @ - 28 , 7 + 28 , 9 @ @ public class COMException extends RuntimeException { 
 
 / * * The pu arg err . * / 
 private IntByReference puArgErr ; 
 - 
 + 
 + private int uArgErr ; 
 + 
 / * * 
 * Instantiates a new automation exception . 
 * / 
 @ @ - 70 , 7 + 72 , 7 @ @ public class COMException extends RuntimeException { 
 * / 
 public COMException ( String message , EXCEPINFO pExcepInfo , 
 IntByReference puArgErr ) { 
 - super ( message ) ; 
 + super ( message + " ( puArgErr = " + puArgErr . getValue ( ) + " ) " ) ; 
 this . pExcepInfo = pExcepInfo ; 
 this . puArgErr = puArgErr ; 
 } 
 @ @ - 102 , 4 + 104 , 12 @ @ public class COMException extends RuntimeException { 
 public IntByReference getArgErr ( ) { 
 return puArgErr ; 
 } 
 + 
 + public int getuArgErr ( ) { 
 + return uArgErr ; 
 + } 
 + 
 + public void setuArgErr ( int uArgErr ) { 
 + this . uArgErr = uArgErr ; 
 + } 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 index cdb4cfc . . 0f170a2 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMUtils . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import com . sun . jna . platform . win32 . Advapi32Util . EnumKey ; 
 import com . sun . jna . platform . win32 . Advapi32Util . InfoKey ; 
 import com . sun . jna . platform . win32 . Kernel32Util ; 
 import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; 
 + import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 import com . sun . jna . platform . win32 . WinNT ; 
 import com . sun . jna . platform . win32 . WinNT . HRESULT ; 
 import com . sun . jna . platform . win32 . WinReg ; 
 @ @ - 112 , 7 + 113 , 7 @ @ public abstract class COMUtils { 
 IntByReference puArgErr ) { 
 if ( FAILED ( hr ) ) { 
 String formatMessageFromHR = Kernel32Util . formatMessage ( hr ) ; 
 - throw new COMException ( formatMessageFromHR ) ; 
 + throw new COMException ( formatMessageFromHR , pExcepInfo , puArgErr ) ; 
 } 
 } 
 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java 
 index 6a16a69 . . b983f0d 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / TlbImp . java 
 @ @ - 42 , 6 + 42 , 8 @ @ public class TlbImp implements TlbConst { 
 / * * The out . * / 
 private File comRootDir ; 
 
 + private File outputDir ; 
 + 
 private TlbCmdlineArgs cmdlineArgs ; 
 
 / * * 
 @ @ - 56 , 9 + 58 , 9 @ @ public class TlbImp implements TlbConst { 
 
 public TlbImp ( String [ ] args ) { 
 this . cmdlineArgs = new TlbCmdlineArgs ( args ) ; 
 - 
 + 
 if ( this . cmdlineArgs . isTlbId ( ) ) { 
 - String clsid = this . cmdlineArgs . getParam ( CMD _ ARG _ TYPELIB _ ID ) ; 
 + String clsid = this . cmdlineArgs . getRequiredParam ( CMD _ ARG _ TYPELIB _ ID ) ; 
 int majorVersion = this . cmdlineArgs 
 . getIntParam ( CMD _ ARG _ TYPELIB _ MAJOR _ VERSION ) ; 
 int minorVersion = this . cmdlineArgs 
 @ @ - 70 , 7 + 72 , 7 @ @ public class TlbImp implements TlbConst { 
 minorVersion ) ; 
 this . startCOM2Java ( ) ; 
 } else if ( this . cmdlineArgs . isTlbFile ( ) ) { 
 - String file = this . cmdlineArgs . getParam ( CMD _ ARG _ TYPELIB _ FILE ) ; 
 + String file = this . cmdlineArgs . getRequiredParam ( CMD _ ARG _ TYPELIB _ FILE ) ; 
 / / initialize typelib 
 / / check version numbers with registry entries ! ! ! 
 this . typeLibUtil = new TypeLibUtil ( file ) ; 
 @ @ - 86 , 9 + 88 , 9 @ @ public class TlbImp implements TlbConst { 
 try { 
 / / create output Dir 
 this . createDir ( ) ; 
 - 
 - int bindingMode = this . cmdlineArgs . getBindingMode ( ) ; 
 - 
 + 
 + String bindingMode = this . cmdlineArgs . getBindingMode ( ) ; 
 + 
 int typeInfoCount = typeLibUtil . getTypeInfoCount ( ) ; 
 for ( int i = 0 ; i < typeInfoCount ; + + i ) { 
 TYPEKIND typekind = typeLibUtil . getTypeInfoType ( i ) ; 
 @ @ - 106 , 7 + 108 , 8 @ @ public class TlbImp implements TlbConst { 
 this . createCOMDispInterface ( i , this . getPackageName ( ) , 
 typeLibUtil ) ; 
 } else if ( typekind . value = = TYPEKIND . TKIND _ COCLASS ) { 
 - this . createCOMCoClass ( i , this . getPackageName ( ) , typeLibUtil , bindingMode ) ; 
 + this . createCOMCoClass ( i , this . getPackageName ( ) , 
 + typeLibUtil , bindingMode ) ; 
 } else if ( typekind . value = = TYPEKIND . TKIND _ ALIAS ) { 
 this . logInfo ( " ' TKIND _ ALIAS ' objects are currently not supported ! " ) ; 
 } else if ( typekind . value = = TYPEKIND . TKIND _ UNION ) { 
 @ @ - 122 , 10 + 125 , 16 @ @ public class TlbImp implements TlbConst { 
 } 
 
 private void createDir ( ) throws FileNotFoundException { 
 - String tmp = System . getProperty ( " java . io . tmpdir " ) ; 
 - this . comRootDir = new File ( tmp + " _ jnaCOM _ " 
 - + System . currentTimeMillis ( ) + " \ \ myPackage \ \ " 
 - + this . typeLibUtil . getName ( ) . toLowerCase ( ) + " \ \ " ) ; 
 + String _ outputDir = this . cmdlineArgs . getParam ( CMD _ ARG _ OUTPUT _ DIR ) ; 
 + String path = " _ jnaCOM _ " + System . currentTimeMillis ( ) + " \ \ myPackage \ \ " 
 + + this . typeLibUtil . getName ( ) . toLowerCase ( ) + " \ \ " ; 
 + 
 + if ( _ outputDir ! = null ) { 
 + this . comRootDir = new File ( _ outputDir + " \ \ " + path ) ; 
 + } else { 
 + String tmp = System . getProperty ( " java . io . tmpdir " ) ; 
 + this . comRootDir = new File ( tmp + " \ \ " + path ) ; 
 + } 
 
 if ( this . comRootDir . exists ( ) ) 
 this . comRootDir . delete ( ) ; 
 @ @ - 204 , 7 + 213 , 7 @ @ public class TlbImp implements TlbConst { 
 } 
 
 private void createCOMCoClass ( int index , String packagename , 
 - TypeLibUtil typeLibUtil , int bindingMode ) throws IOException { 
 + TypeLibUtil typeLibUtil , String bindingMode ) throws IOException { 
 TlbCoClass tlbCoClass = new TlbCoClass ( index , this . getPackageName ( ) , 
 typeLibUtil , bindingMode ) ; 
 this . writeTlbClass ( tlbCoClass ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java 
 index 477c437 . . ce1f4c6 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbBase . java 
 @ @ - 73 , 13 + 73 , 13 @ @ public abstract class TlbBase { 
 public static String [ ] IDISPATCH _ METHODS = { " GetTypeInfoCount " , 
 " GetTypeInfo " , " GetIDsOfNames " , " Invoke " } ; 
 
 - protected int bindingMode = TlbConst . BINDING _ MODE _ DISPID ; 
 + protected String bindingMode = TlbConst . BINDING _ MODE _ DISPID ; 
 
 public TlbBase ( int index , TypeLibUtil typeLibUtil , TypeInfoUtil typeInfoUtil ) { 
 this ( index , typeLibUtil , typeInfoUtil , TlbConst . BINDING _ MODE _ DISPID ) ; 
 } 
 
 - public TlbBase ( int index , TypeLibUtil typeLibUtil , TypeInfoUtil typeInfoUtil , int bindingMode ) { 
 + public TlbBase ( int index , TypeLibUtil typeLibUtil , TypeInfoUtil typeInfoUtil , String bindingMode ) { 
 this . index = index ; 
 this . typeLibUtil = typeLibUtil ; 
 this . typeInfoUtil = typeInfoUtil ; 
 @ @ - 266 , 14 + 266 , 14 @ @ public abstract class TlbBase { 
 } 
 
 protected boolean isVTableMode ( ) { 
 - if ( this . bindingMode = = TlbConst . BINDING _ MODE _ VTABLE ) 
 + if ( this . bindingMode . equalsIgnoreCase ( TlbConst . BINDING _ MODE _ VTABLE ) ) 
 return true ; 
 else 
 return false ; 
 } 
 
 protected boolean isDispIdMode ( ) { 
 - if ( this . bindingMode = = TlbConst . BINDING _ MODE _ DISPID ) 
 + if ( this . bindingMode . equalsIgnoreCase ( TlbConst . BINDING _ MODE _ DISPID ) ) 
 return true ; 
 else 
 return false ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCmdlineArgs . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCmdlineArgs . java 
 index a560b59 . . ce71e24 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCmdlineArgs . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCmdlineArgs . java 
 @ @ - 22 , 12 + 22 , 16 @ @ public class TlbCmdlineArgs extends Hashtable < String , String > implements 
 } 
 
 public int getIntParam ( String key ) { 
 - String param = this . getParam ( key ) ; 
 + String param = this . getRequiredParam ( key ) ; 
 return new Integer ( param ) . intValue ( ) ; 
 } 
 
 public String getParam ( String key ) { 
 - String param = this . get ( key ) ; 
 + return this . get ( key ) ; 
 + } 
 + 
 + public String getRequiredParam ( String key ) { 
 + String param = this . getParam ( key ) ; 
 if ( param = = null ) 
 throw new TlbParameterNotFoundException ( 
 " Commandline parameter not found : " + key ) ; 
 @ @ - 55 , 15 + 59 , 15 @ @ public class TlbCmdlineArgs extends Hashtable < String , String > implements 
 return this . containsKey ( CMD _ ARG _ TYPELIB _ ID ) ; 
 } 
 
 - public int getBindingMode ( ) { 
 + public String getBindingMode ( ) { 
 if ( this . containsKey ( CMD _ ARG _ BINDING _ MODE ) ) 
 - return this . getIntParam ( CMD _ ARG _ BINDING _ MODE ) ; 
 + return this . getParam ( CMD _ ARG _ BINDING _ MODE ) ; 
 else 
 return BINDING _ MODE _ VTABLE ; 
 } 
 
 public void showCmdHelp ( ) { 
 - String helpStr = " usage : TlbImp [ - tlb . id - tlb . major . version - tlb . minor . version ] [ - tlb . file ] [ - bind . mode vTable , dispId ] " 
 + String helpStr = " usage : TlbImp [ - tlb . id - tlb . major . version - tlb . minor . version ] [ - tlb . file ] [ - bind . mode vTable , dispId ] [ - output . dir ] " 
 + CRCR 
 + " options : " 
 + CR 
 @ @ - 76 , 6 + 80 , 8 @ @ public class TlbCmdlineArgs extends Hashtable < String , String > implements 
 + " - tlb . file The file name containing the type library . " 
 + CR 
 + " - bind . mode The binding mode used to create the Java code . " 
 + + CR 
 + + " - output . dir The optional output directory , default is the user temp directory . " 
 + CRCR 
 + " samples : " 
 + CR 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java 
 index 2f2797f . . 1cf55e0 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbCoClass . java 
 @ @ - 39 , 7 + 39 , 7 @ @ public class TlbCoClass extends TlbBase { 
 * @ param typeLibUtil 
 * the type lib util 
 * / 
 - public TlbCoClass ( int index , String packagename , TypeLibUtil typeLibUtil , int bindingMode ) { 
 + public TlbCoClass ( int index , String packagename , TypeLibUtil typeLibUtil , String bindingMode ) { 
 super ( index , typeLibUtil , null ) ; 
 
 TypeInfoUtil typeInfoUtil = typeLibUtil . getTypeInfoUtil ( index ) ; 
 @ @ - 89 , 7 + 89 , 7 @ @ public class TlbCoClass extends TlbBase { 
 this . createContent ( this . content ) ; 
 } 
 
 - protected void createFunctions ( TypeInfoUtil typeInfoUtil , int bindingMode ) { 
 + protected void createFunctions ( TypeInfoUtil typeInfoUtil , String bindingMode ) { 
 TYPEATTR typeAttr = typeInfoUtil . getTypeAttr ( ) ; 
 int cFuncs = typeAttr . cFuncs . intValue ( ) ; 
 for ( int i = 0 ; i < cFuncs ; i + + ) { 
 @ @ - 98 , 10 + 98 , 10 @ @ public class TlbCoClass extends TlbBase { 
 
 TlbAbstractMethod method = null ; 
 if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ FUNC ) ) { 
 - if ( this . isDispIdMode ( ) ) 
 + if ( this . isVTableMode ( ) ) 
 method = new TlbFunctionVTable ( i , index , typeLibUtil , funcDesc , typeInfoUtil ) ; 
 else 
 - method = new TlbFunctionVTable ( i , index , typeLibUtil , funcDesc , typeInfoUtil ) ; 
 + method = new TlbFunctionDispId ( i , index , typeLibUtil , funcDesc , typeInfoUtil ) ; 
 } else if ( funcDesc . invkind . equals ( INVOKEKIND . INVOKE _ PROPERTYGET ) ) { 
 method = new TlbPropertyGet ( i , index , typeLibUtil , funcDesc , 
 typeInfoUtil ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbConst . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbConst . java 
 index 4b24ecf . . 838c69d 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbConst . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbConst . java 
 @ @ - 40 , 13 + 40 , 15 @ @ public interface TlbConst { 
 
 public final static String CMD _ ARG _ BINDING _ MODE = " bind . mode " ; 
 
 - public final static int BINDING _ MODE _ VTABLE = 0 ; 
 + public final static String BINDING _ MODE _ VTABLE = " vtable " ; 
 
 - public final static int BINDING _ MODE _ DISPID = 1 ; 
 + public final static String BINDING _ MODE _ DISPID = " dispid " ; 
 
 public final static String CMD _ ARG _ TYPELIB _ MAJOR _ VERSION = " tlb . major . version " ; 
 
 public final static String CMD _ ARG _ TYPELIB _ MINOR _ VERSION = " tlb . minor . version " ; 
 
 public final static String CMD _ ARG _ TYPELIB _ FILE = " tlb . file " ; 
 + 
 + public final static String CMD _ ARG _ OUTPUT _ DIR = " output . dir " ; 
 } 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . java 
 index 3358f0f . . 247b941 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . java 
 @ @ - 43 , 15 + 43 , 18 @ @ public class TlbFunctionDispId extends TlbAbstractMethod { 
 
 String [ ] names = typeInfoUtil . getNames ( funcDesc . memid , paramCount + 1 ) ; 
 
 - / / if there is at least one param we need a comma 
 - if ( paramCount > 0 ) 
 - methodvariables = " , " ; 
 - 
 for ( int i = 0 ; i < paramCount ; i + + ) { 
 ELEMDESC elemdesc = funcDesc . lprgelemdescParam . elemDescArg [ i ] ; 
 String methodName = names [ i + 1 ] . toLowerCase ( ) ; 
 - methodparams + = this . getType ( elemdesc . tdesc ) + " " + this . replaceJavaKeyword ( methodName ) ; 
 - methodvariables + = methodName ; 
 + String type = this . getType ( elemdesc . tdesc ) ; 
 + String _ methodName = this . replaceJavaKeyword ( methodName ) ; 
 + methodparams + = type + " " + _ methodName ; 
 + 
 + / / wrap all in a VARIANT 
 + if ( type . equals ( " VARIANT " ) ) 
 + methodvariables + = _ methodName ; 
 + else 
 + methodvariables + = " new VARIANT ( " + _ methodName + " ) " ; 
 
 / / if there is more than 1 param 
 if ( i < ( paramCount - 1 ) ) { 
 @ @ - 59 , 9 + 62 , 16 @ @ public class TlbFunctionDispId extends TlbAbstractMethod { 
 methodvariables + = " , " ; 
 } 
 } 
 + 
 + String returnValue ; 
 + if ( this . returnType . equalsIgnoreCase ( " VARIANT " ) ) 
 + returnValue = " pResult " ; 
 + else 
 + returnValue = " ( ( " + returnType + " ) pResult . getValue ( ) ) " ; 
 
 this . replaceVariable ( " helpstring " , docStr ) ; 
 this . replaceVariable ( " returntype " , returnType ) ; 
 + this . replaceVariable ( " returnvalue " , returnValue ) ; 
 this . replaceVariable ( " methodname " , methodName ) ; 
 this . replaceVariable ( " methodparams " , methodparams ) ; 
 this . replaceVariable ( " methodvariables " , methodvariables ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . template b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . template 
 index f7e2a5d . . 7d5584a 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . template 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / tlb / imp / TlbFunctionDispId . template 
 @ @ - 4 , 5 + 4 , 7 @ @ 
 	 * Member id : $ { memberid } 
 	 * / 
 	 public $ { returntype } $ { methodname } ( $ { methodparams } ) { 
 - 	 	 return this . oleMethod ( OleAuto . DISPATCH _ METHOD , null , dispatch , new DISPID ( $ { memberid } ) ) ; 
 + 	 	 VARIANT . ByReference pResult = new VARIANT . ByReference ( ) ; 
 + 	 	 this . oleMethod ( OleAuto . DISPATCH _ METHOD , pResult , getIDispatch ( ) , new DISPID ( $ { memberid } ) , new VARIANT [ ] { $ { methodvariables } } ) ; 
 + 	 	 return $ { returnvalue } ; 
 	 } 
 \ No newline at end of file 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 index 64ee249 . . 6c34759 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / Variant . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import java . util . Arrays ; 
 import java . util . Date ; 
 import java . util . List ; 
 
 + import com . sun . jna . IntegerType ; 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . Union ; 
 @ @ - 15 , 14 + 16 , 16 @ @ import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOL ; 
 import com . sun . jna . platform . win32 . OaIdl . VARIANT _ BOOLByReference ; 
 import com . sun . jna . platform . win32 . OaIdl . _ VARIANT _ BOOLByReference ; 
 import com . sun . jna . platform . win32 . WTypes . BSTR ; 
 + import com . sun . jna . platform . win32 . WTypes . BSTRByReference ; 
 import com . sun . jna . platform . win32 . WTypes . VARTYPE ; 
 + import com . sun . jna . platform . win32 . WinDef . BOOL ; 
 import com . sun . jna . platform . win32 . WinDef . BYTE ; 
 import com . sun . jna . platform . win32 . WinDef . CHAR ; 
 import com . sun . jna . platform . win32 . WinDef . CHARByReference ; 
 import com . sun . jna . platform . win32 . WinDef . LONG ; 
 + import com . sun . jna . platform . win32 . WinDef . LONGByReference ; 
 import com . sun . jna . platform . win32 . WinDef . LONGLONG ; 
 import com . sun . jna . platform . win32 . WinDef . LONGLONGByReference ; 
 - import com . sun . jna . platform . win32 . WinDef . LONGByReference ; 
 import com . sun . jna . platform . win32 . WinDef . PVOID ; 
 import com . sun . jna . platform . win32 . WinDef . SCODE ; 
 import com . sun . jna . platform . win32 . WinDef . SCODEByReference ; 
 @ @ - 30 , 9 + 33 , 9 @ @ import com . sun . jna . platform . win32 . WinDef . SHORT ; 
 import com . sun . jna . platform . win32 . WinDef . UINT ; 
 import com . sun . jna . platform . win32 . WinDef . UINTByReference ; 
 import com . sun . jna . platform . win32 . WinDef . ULONG ; 
 + import com . sun . jna . platform . win32 . WinDef . ULONGByReference ; 
 import com . sun . jna . platform . win32 . WinDef . ULONGLONG ; 
 import com . sun . jna . platform . win32 . WinDef . ULONGLONGByReference ; 
 - import com . sun . jna . platform . win32 . WinDef . ULONGByReference ; 
 import com . sun . jna . platform . win32 . WinDef . USHORT ; 
 import com . sun . jna . platform . win32 . WinDef . USHORTByReference ; 
 import com . sun . jna . platform . win32 . COM . Dispatch ; 
 @ @ - 135 , 8 + 138 , 18 @ @ public interface Variant { 
 this . setValue ( VT _ BSTR , value ) ; 
 } 
 
 + public VARIANT ( BSTRByReference value ) { 
 + this ( ) ; 
 + this . setValue ( VT _ BYREF | VT _ BSTR , value ) ; 
 + } 
 + 
 public VARIANT ( VARIANT _ BOOL value ) { 
 this ( ) ; 
 + this . setValue ( VT _ BOOL , new BOOL ( value . intValue ( ) ) ) ; 
 + } 
 + 
 + public VARIANT ( BOOL value ) { 
 + this ( ) ; 
 this . setValue ( VT _ BOOL , value ) ; 
 } 
 
 @ @ - 189 , 9 + 202 , 9 @ @ public interface Variant { 
 public VARIANT ( boolean value ) { 
 this ( ) ; 
 if ( value ) 
 - this . setValue ( VT _ BOOL , VARIANT _ TRUE ) ; 
 + this . setValue ( VT _ BOOL , new BOOL ( VARIANT _ TRUE . intValue ( ) ) ) ; 
 else 
 - this . setValue ( VT _ BOOL , VARIANT _ FALSE ) ; 
 + this . setValue ( VT _ BOOL , new BOOL ( VARIANT _ FALSE . intValue ( ) ) ) ; 
 } 
 
 public VARIANT ( IDispatch value ) { 
 @ @ - 537 , 7 + 550 , 7 @ @ public interface Variant { 
 / / DOUBLE VT _ R8 
 public Double dblVal ; 
 / / VARIANT _ BOOL VT _ BOOL 
 - public VARIANT _ BOOL boolVal ; 
 + public BOOL boolVal ; 
 / / SCODE VT _ ERROR 
 public SCODE scode ; 
 / / CY VT _ CY 
 @ @ - 575 , 7 + 588 , 7 @ @ public interface Variant { 
 / / DATE * VT _ BYREF | VT _ DATE 
 public DATE . ByReference pdate ; 
 / / BSTR * VT _ BYREF | VT _ BSTR 
 - public BSTR pbstrVal ; 
 + public BSTR . ByReference pbstrVal ; 
 / / IUnknown * * VT _ BYREF | VT _ UNKNOWN 
 public Unknown . ByReference ppunkVal ; 
 / / IDispatch * * VT _ BYREF | VT _ DISPATCH 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 index 21e7942 . . 889773a 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / WinDef . java 
 @ @ - 1091 , 7 + 1091 , 7 @ @ public interface WinDef extends StdCallLibrary { 
 * the value 
 * / 
 public USHORT ( long value ) { 
 - super ( 2 , value , true ) ; 
 + super ( SIZE , value , true ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / ChangeLog b / ChangeLog 
 index 289d195 . . ff76645 100644 
 - - - a / ChangeLog 
 + + + b / ChangeLog 
 @ @ - 1 , 3 + 1 , 13 @ @ 
 + 2013 - 01 - 10 Anthony Green < green @ moxielogic . com > 
 + 
 + 	 * configure . ac : Put local . exp in the right place . 
 + 	 * configure : Rebuilt . 
 + 
 + 	 * src / x86 / ffi . c : Update comment about regparm function attributes . 
 + 	 * src / x86 / sysv . S ( ffi _ closure _ SYSV ) : The SUNPRO compiler requires 
 + 	 that all function arguments be passed on the stack ( no regparm 
 + 	 support ) . 
 + 
 2013 - 01 - 08 Anthony Green < green @ moxielogic . com > 
 
 	 * configure . ac : Generate local . exp . This sets CC _ FOR _ TARGET 
 diff - - git a / configure b / configure 
 index 5876eb7 . . 4a12b96 100755 
 - - - a / configure 
 + + + b / configure 
 @ @ - 13068 , 10 + 13068 , 10 @ @ ac _ compiler _ gnu = $ ac _ cv _ c _ compiler _ gnu 
 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / configure . ac b / configure . ac 
 index 7ffb36c . . 13d5bc2 100644 
 - - - a / configure . ac 
 + + + b / configure . ac 
 @ @ - 40 , 10 + 40 , 10 @ @ AX _ CC _ MAXOPT 
 AX _ CFLAGS _ WARN _ ALL 
 if test " x $ GCC " = " xyes " ; then 
 CFLAGS = " $ CFLAGS - fexceptions " 
 - touch testsuite / local . exp 
 + touch local . exp 
 else 
 cat > local . exp < < EOF 
 - set CC _ FOR _ TARGET $ CC 
 + set CC _ FOR _ TARGET " $ CC " 
 EOF 
 fi 
 
 diff - - git a / src / x86 / ffi . c b / src / x86 / ffi . c 
 index 611e221 . . 3f46693 100644 
 - - - a / src / x86 / ffi . c 
 + + + b / src / x86 / ffi . c 
 @ @ - 424 , 7 + 424 , 7 @ @ void ffi _ call ( ffi _ cif * cif , void ( * fn ) ( void ) , void * rvalue , void * * avalue ) 
 / * * private members * * / 
 
 / * The following _ _ attribute _ _ ( ( regparm ( 1 ) ) ) decorations will have no effect 
 - on MSVC - standard cdecl convention applies . * / 
 + on MSVC or SUNPRO _ C - - standard conventions apply . * / 
 static void ffi _ prep _ incoming _ args _ SYSV ( char * stack , void * * ret , 
 void * * args , ffi _ cif * cif ) ; 
 void FFI _ HIDDEN ffi _ closure _ SYSV ( ffi _ closure * ) 
 diff - - git a / src / x86 / sysv . S b / src / x86 / sysv . S 
 index 69e7e8d . . 71502bb 100644 
 - - - a / src / x86 / sysv . S 
 + + + b / src / x86 / sysv . S 
 @ @ - 182 , 9 + 182 , 19 @ @ ffi _ closure _ SYSV : 
 	 leal 	 - 24 ( % ebp ) , % edx 
 	 movl 	 % edx , - 12 ( % ebp ) 	 / * resp * / 
 	 leal 	 8 ( % ebp ) , % edx 
 + # ifdef _ _ SUNPRO _ C 
 + 	 / * The SUNPRO compiler doesn ' t support GCC ' s regparm function 
 + 	 attribute , so we have to pass all three arguments to 
 + 	 ffi _ closure _ SYSV _ inner on the stack . * / 
 + 	 movl 	 % edx , 8 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 + 	 leal 	 - 12 ( % ebp ) , % edx 
 + 	 movl 	 % edx , 4 ( % esp ) 	 / * & resp * / 
 + 	 movl % eax , ( % esp ) / * closure * / 
 + # else 
 	 movl 	 % edx , 4 ( % esp ) 	 / * args = _ _ builtin _ dwarf _ cfa ( ) * / 
 	 leal 	 - 12 ( % ebp ) , % edx 
 	 movl 	 % edx , ( % esp ) 	 / * & resp * / 
 + # endif 
 # if defined HAVE _ HIDDEN _ VISIBILITY _ ATTRIBUTE | | ! defined _ _ PIC _ _ 
 	 call 	 ffi _ closure _ SYSV _ inner 
 # else
