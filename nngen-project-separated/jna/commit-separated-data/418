BLEU SCORE: 0.06220117374063391

TEST MSG: revise last error checking
GENERATED MSG: fix placement of exception throw

TEST DIFF (one line): diff - - git a / lib / native / win32 - x86 . jar b / lib / native / win32 - x86 . jar <nl> index 2387644 . . 6d465bb 100755 <nl> Binary files a / lib / native / win32 - x86 . jar and b / lib / native / win32 - x86 . jar differ <nl> diff - - git a / native / dispatch . c b / native / dispatch . c <nl> index 523f875 . . 3701484 100644 <nl> - - - a / native / dispatch . c <nl> + + + b / native / dispatch . c <nl> @ @ - 106 , 12 + 106 , 22 @ @ static char * <nl> w32 _ format _ error ( int error , char * buf , int len ) { <nl> wchar _ t * wbuf = NULL ; <nl> int wlen = <nl> - FormatMessageW ( FORMAT _ MESSAGE _ FROM _ SYSTEM | FORMAT _ MESSAGE _ IGNORE _ INSERTS | FORMAT _ MESSAGE _ ALLOCATE _ BUFFER , <nl> + FormatMessageW ( FORMAT _ MESSAGE _ FROM _ SYSTEM <nl> + | FORMAT _ MESSAGE _ IGNORE _ INSERTS <nl> + | FORMAT _ MESSAGE _ ALLOCATE _ BUFFER , <nl> NULL , error , 0 , ( LPWSTR ) & wbuf , 0 , NULL ) ; <nl> if ( wlen > 0 ) { <nl> - WideCharToMultiByte ( CP _ UTF8 , 0 , wbuf , wlen + 1 , buf , len , NULL , NULL ) ; <nl> + int result = WideCharToMultiByte ( CP _ UTF8 , 0 , wbuf , - 1 , buf , len , NULL , NULL ) ; <nl> + if ( result = = 0 ) { <nl> + fprintf ( stderr , " JNA : error converting error message : % d \ n " , GET _ LAST _ ERROR ( ) ) ; <nl> + * buf = 0 ; <nl> + } <nl> + else { <nl> + buf [ len - 1 ] = 0 ; <nl> + } <nl> } <nl> else { <nl> + / / Error retrieving message <nl> * buf = 0 ; <nl> } <nl> if ( wbuf ) { <nl> @ @ - 561 , 20 + 571 , 20 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray arr , <nl> status = ffi _ prep _ cif ( & cif , abi , nargs , ffi _ return _ type , ffi _ types ) ; <nl> if ( ! ffi _ error ( env , " Native call setup " , status ) ) { <nl> PSTART ( ) ; <nl> - if ( flags & THROW _ LAST _ ERROR ) { <nl> + if ( ( flags & THROW _ LAST _ ERROR ) ! = 0 ) { <nl> SET _ LAST _ ERROR ( 0 ) ; <nl> } <nl> ffi _ call ( & cif , FFI _ FN ( func ) , resP , ffi _ values ) ; <nl> - if ( flags & THROW _ LAST _ ERROR ) { <nl> + { <nl> int error = GET _ LAST _ ERROR ( ) ; <nl> - if ( error ) { <nl> + JNA _ set _ last _ error ( env , error ) ; <nl> + if ( ( flags & THROW _ LAST _ ERROR ) & & error ) { <nl> char emsg [ 1024 ] ; <nl> snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; <nl> throw _ type = ELastError ; <nl> throw _ msg = msg ; <nl> } <nl> } <nl> - JNA _ set _ last _ error ( env , GET _ LAST _ ERROR ( ) ) ; <nl> <nl> PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; <nl> } <nl> @ @ - 1742 , 16 + 1752 , 16 @ @ method _ handler ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { <nl> SET _ LAST _ ERROR ( 0 ) ; <nl> } <nl> ffi _ call ( & data - > cif , FFI _ FN ( data - > fptr ) , resp , args ) ; <nl> - if ( data - > throw _ last _ error ) { <nl> + { <nl> int error = GET _ LAST _ ERROR ( ) ; <nl> - if ( error ) { <nl> + JNA _ set _ last _ error ( env , error ) ; <nl> + if ( data - > throw _ last _ error & & error ) { <nl> char emsg [ 1024 ] ; <nl> - snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; <nl> + snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; <nl> throw _ type = ELastError ; <nl> throw _ msg = msg ; <nl> } <nl> } <nl> - JNA _ set _ last _ error ( env , GET _ LAST _ ERROR ( ) ) ; <nl> <nl> PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java <nl> index f575b75 . . 45e2b2c 100644 <nl> - - - a / jnalib / test / com / sun / jna / WebStartTest . java <nl> + + + b / jnalib / test / com / sun / jna / WebStartTest . java <nl> @ @ - 167 , 8 + 167 , 8 @ @ public class WebStartTest extends TestCase { <nl> out . start ( ) ; <nl> } <nl> catch ( SocketTimeoutException e ) { <nl> - / / p . destroy ( ) ; <nl> - / / throw new Error ( " JWS Timed out " ) ; <nl> + p . destroy ( ) ; <nl> + throw new Error ( " JWS Timed out " ) ; <nl> } <nl> p . waitFor ( ) ; <nl> <nl> @ @ - 223 , 6 + 223 , 7 @ @ public class WebStartTest extends TestCase { <nl> String path = System . getProperty ( " user . home " ) ; <nl> File deployment ; <nl> if ( Platform . isWindows ( ) ) { <nl> + / / FIXME " Sun " might be " IBM " or other vendor <nl> deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; <nl> } <nl> else if ( Platform . isMac ( ) ) { <nl> @ @ - 242 , 8 + 243 , 8 @ @ public class WebStartTest extends TestCase { <nl> private static final String CERTS _ KEY = <nl> " deployment . user . security . trusted . certs " ; <nl> public void runBare ( ) throws Throwable { <nl> - / / FIXME not yet cleanly running on windows , not tested on linux <nl> - if ( ! Platform . isMac ( ) ) return ; <nl> + / / FIXME only tested on mac and windows <nl> + if ( ! Platform . isMac ( ) & & ! Platform . isWindows ( ) ) return ; <nl> <nl> if ( runningWebStart ( ) ) { <nl> super . runBare ( ) ; <nl> @ @ - 262 , 12 + 263 , 16 @ @ public class WebStartTest extends TestCase { <nl> props . putAll ( saved ) ; <nl> props . setProperty ( CERTS _ KEY , new File ( " jna . keystore " ) . getAbsolutePath ( ) ) ; <nl> props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; <nl> - props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; <nl> + os = new FileOutputStream ( dpfile ) ; <nl> + props . store ( os , " deployment . properties ( for testing ) " ) ; <nl> + os . close ( ) ; <nl> try { <nl> runTestUnderWebStart ( ) ; <nl> } <nl> finally { <nl> - saved . store ( new FileOutputStream ( dpfile ) , " deployment . properties " ) ; <nl> + os = new FileOutputStream ( dpfile ) ; <nl> + saved . store ( os , " deployment . properties " ) ; <nl> + os . close ( ) ; <nl> } <nl> } <nl> } <nl> @ @ - 284 , 24 + 289 , 21 @ @ public class WebStartTest extends TestCase { <nl> Enumeration e = result . failures ( ) ; <nl> Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; <nl> t . printStackTrace ( new PrintStream ( os ) ) ; <nl> - s . close ( ) ; <nl> - System . exit ( 1 ) ; <nl> } <nl> else if ( result . errorCount ( ) ! = 0 ) { <nl> Enumeration e = result . errors ( ) ; <nl> Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; <nl> t . printStackTrace ( new PrintStream ( os ) ) ; <nl> - s . close ( ) ; <nl> - System . exit ( 2 ) ; <nl> } <nl> + / / NOTE : System . exit with non - zero status causes an error dialog <nl> + / / on w32 sun " 1 . 6 . 0 _ 14 " ( build 1 . 6 . 0 _ 14 - b08 ) <nl> s . close ( ) ; <nl> - Thread . sleep ( 5000 ) ; <nl> System . exit ( 0 ) ; <nl> } <nl> catch ( Throwable e ) { <nl> / / Can ' t communicate back to launching process <nl> showMessage ( " ERROR : " + e . getMessage ( ) ) ; <nl> - System . exit ( - 1 ) ; <nl> + System . exit ( 0 ) ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / lib / native / win32 - x86 . jar b / lib / native / win32 - x86 . jar 
 index 2387644 . . 6d465bb 100755 
 Binary files a / lib / native / win32 - x86 . jar and b / lib / native / win32 - x86 . jar differ 
 diff - - git a / native / dispatch . c b / native / dispatch . c 
 index 523f875 . . 3701484 100644 
 - - - a / native / dispatch . c 
 + + + b / native / dispatch . c 
 @ @ - 106 , 12 + 106 , 22 @ @ static char * 
 w32 _ format _ error ( int error , char * buf , int len ) { 
 wchar _ t * wbuf = NULL ; 
 int wlen = 
 - FormatMessageW ( FORMAT _ MESSAGE _ FROM _ SYSTEM | FORMAT _ MESSAGE _ IGNORE _ INSERTS | FORMAT _ MESSAGE _ ALLOCATE _ BUFFER , 
 + FormatMessageW ( FORMAT _ MESSAGE _ FROM _ SYSTEM 
 + | FORMAT _ MESSAGE _ IGNORE _ INSERTS 
 + | FORMAT _ MESSAGE _ ALLOCATE _ BUFFER , 
 NULL , error , 0 , ( LPWSTR ) & wbuf , 0 , NULL ) ; 
 if ( wlen > 0 ) { 
 - WideCharToMultiByte ( CP _ UTF8 , 0 , wbuf , wlen + 1 , buf , len , NULL , NULL ) ; 
 + int result = WideCharToMultiByte ( CP _ UTF8 , 0 , wbuf , - 1 , buf , len , NULL , NULL ) ; 
 + if ( result = = 0 ) { 
 + fprintf ( stderr , " JNA : error converting error message : % d \ n " , GET _ LAST _ ERROR ( ) ) ; 
 + * buf = 0 ; 
 + } 
 + else { 
 + buf [ len - 1 ] = 0 ; 
 + } 
 } 
 else { 
 + / / Error retrieving message 
 * buf = 0 ; 
 } 
 if ( wbuf ) { 
 @ @ - 561 , 20 + 571 , 20 @ @ dispatch ( JNIEnv * env , void * func , jint flags , jobjectArray arr , 
 status = ffi _ prep _ cif ( & cif , abi , nargs , ffi _ return _ type , ffi _ types ) ; 
 if ( ! ffi _ error ( env , " Native call setup " , status ) ) { 
 PSTART ( ) ; 
 - if ( flags & THROW _ LAST _ ERROR ) { 
 + if ( ( flags & THROW _ LAST _ ERROR ) ! = 0 ) { 
 SET _ LAST _ ERROR ( 0 ) ; 
 } 
 ffi _ call ( & cif , FFI _ FN ( func ) , resP , ffi _ values ) ; 
 - if ( flags & THROW _ LAST _ ERROR ) { 
 + { 
 int error = GET _ LAST _ ERROR ( ) ; 
 - if ( error ) { 
 + JNA _ set _ last _ error ( env , error ) ; 
 + if ( ( flags & THROW _ LAST _ ERROR ) & & error ) { 
 char emsg [ 1024 ] ; 
 snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; 
 throw _ type = ELastError ; 
 throw _ msg = msg ; 
 } 
 } 
 - JNA _ set _ last _ error ( env , GET _ LAST _ ERROR ( ) ) ; 
 
 PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; 
 } 
 @ @ - 1742 , 16 + 1752 , 16 @ @ method _ handler ( ffi _ cif * cif , void * volatile resp , void * * argp , void * cdata ) { 
 SET _ LAST _ ERROR ( 0 ) ; 
 } 
 ffi _ call ( & data - > cif , FFI _ FN ( data - > fptr ) , resp , args ) ; 
 - if ( data - > throw _ last _ error ) { 
 + { 
 int error = GET _ LAST _ ERROR ( ) ; 
 - if ( error ) { 
 + JNA _ set _ last _ error ( env , error ) ; 
 + if ( data - > throw _ last _ error & & error ) { 
 char emsg [ 1024 ] ; 
 - snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; 
 + snprintf ( msg , sizeof ( msg ) , " [ % d ] % s " , error , STR _ ERROR ( error , emsg , sizeof ( emsg ) ) ) ; 
 throw _ type = ELastError ; 
 throw _ msg = msg ; 
 } 
 } 
 - JNA _ set _ last _ error ( env , GET _ LAST _ ERROR ( ) ) ; 
 
 PROTECTED _ END ( do { throw _ type = EError ; throw _ msg = " Invalid memory access " ; } while ( 0 ) ) ; 
 }

NEAREST DIFF:
diff - - git a / jnalib / test / com / sun / jna / WebStartTest . java b / jnalib / test / com / sun / jna / WebStartTest . java 
 index f575b75 . . 45e2b2c 100644 
 - - - a / jnalib / test / com / sun / jna / WebStartTest . java 
 + + + b / jnalib / test / com / sun / jna / WebStartTest . java 
 @ @ - 167 , 8 + 167 , 8 @ @ public class WebStartTest extends TestCase { 
 out . start ( ) ; 
 } 
 catch ( SocketTimeoutException e ) { 
 - / / p . destroy ( ) ; 
 - / / throw new Error ( " JWS Timed out " ) ; 
 + p . destroy ( ) ; 
 + throw new Error ( " JWS Timed out " ) ; 
 } 
 p . waitFor ( ) ; 
 
 @ @ - 223 , 6 + 223 , 7 @ @ public class WebStartTest extends TestCase { 
 String path = System . getProperty ( " user . home " ) ; 
 File deployment ; 
 if ( Platform . isWindows ( ) ) { 
 + / / FIXME " Sun " might be " IBM " or other vendor 
 deployment = new File ( path + " / Application Data / Sun / Java / Deployment " ) ; 
 } 
 else if ( Platform . isMac ( ) ) { 
 @ @ - 242 , 8 + 243 , 8 @ @ public class WebStartTest extends TestCase { 
 private static final String CERTS _ KEY = 
 " deployment . user . security . trusted . certs " ; 
 public void runBare ( ) throws Throwable { 
 - / / FIXME not yet cleanly running on windows , not tested on linux 
 - if ( ! Platform . isMac ( ) ) return ; 
 + / / FIXME only tested on mac and windows 
 + if ( ! Platform . isMac ( ) & & ! Platform . isWindows ( ) ) return ; 
 
 if ( runningWebStart ( ) ) { 
 super . runBare ( ) ; 
 @ @ - 262 , 12 + 263 , 16 @ @ public class WebStartTest extends TestCase { 
 props . putAll ( saved ) ; 
 props . setProperty ( CERTS _ KEY , new File ( " jna . keystore " ) . getAbsolutePath ( ) ) ; 
 props . setProperty ( POLICY _ KEY , policy . getAbsolutePath ( ) ) ; 
 - props . store ( new FileOutputStream ( dpfile ) , " deployment . properties ( for testing ) " ) ; 
 + os = new FileOutputStream ( dpfile ) ; 
 + props . store ( os , " deployment . properties ( for testing ) " ) ; 
 + os . close ( ) ; 
 try { 
 runTestUnderWebStart ( ) ; 
 } 
 finally { 
 - saved . store ( new FileOutputStream ( dpfile ) , " deployment . properties " ) ; 
 + os = new FileOutputStream ( dpfile ) ; 
 + saved . store ( os , " deployment . properties " ) ; 
 + os . close ( ) ; 
 } 
 } 
 } 
 @ @ - 284 , 24 + 289 , 21 @ @ public class WebStartTest extends TestCase { 
 Enumeration e = result . failures ( ) ; 
 Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; 
 t . printStackTrace ( new PrintStream ( os ) ) ; 
 - s . close ( ) ; 
 - System . exit ( 1 ) ; 
 } 
 else if ( result . errorCount ( ) ! = 0 ) { 
 Enumeration e = result . errors ( ) ; 
 Throwable t = ( ( TestFailure ) e . nextElement ( ) ) . thrownException ( ) ; 
 t . printStackTrace ( new PrintStream ( os ) ) ; 
 - s . close ( ) ; 
 - System . exit ( 2 ) ; 
 } 
 + / / NOTE : System . exit with non - zero status causes an error dialog 
 + / / on w32 sun " 1 . 6 . 0 _ 14 " ( build 1 . 6 . 0 _ 14 - b08 ) 
 s . close ( ) ; 
 - Thread . sleep ( 5000 ) ; 
 System . exit ( 0 ) ; 
 } 
 catch ( Throwable e ) { 
 / / Can ' t communicate back to launching process 
 showMessage ( " ERROR : " + e . getMessage ( ) ) ; 
 - System . exit ( - 1 ) ; 
 + System . exit ( 0 ) ; 
 } 
 } 

