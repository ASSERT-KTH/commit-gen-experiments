BLEU SCORE: 0.03283637368030199

TEST MSG: Implement named callback parameters for COM Callbacks
GENERATED MSG: Make ( Un ) marshalling context sensitive

TEST DIFF (one line): diff - - git a / CHANGES . md b / CHANGES . md <nl> index 672f0aa . . b7c1e66 100644 <nl> - - - a / CHANGES . md <nl> + + + b / CHANGES . md <nl> @ @ - 52 , 6 + 52 , 7 @ @ Features <nl> * [ # 642 ] ( https : / / github . com / java - native - access / jna / pull / 642 ) : COM calls with variable number of arguments ( varargs ) are now supported - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . <nl> * [ # 644 ] ( https : / / github . com / java - native - access / jna / pull / 644 ) : New ant target ' install ' for installing JNA artifacts in local m2 - repository - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . <nl> * [ # 649 ] ( https : / / github . com / java - native - access / jna / pull / 649 ) : Bugfix msoffice sample and add two samples taken from MSDN and translated from VisualBasic to Java - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> + * [ # 654 ] ( https : / / github . com / java - native - access / jna / pull / 654 ) : Support named arguments for ` com . sun . jna . platform . win32 . COM . util . CallbackProxy ` based callbacks - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . <nl> <nl> Bug Fixes <nl> - - - - - - - - - <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> index 857ecd2 . . ddad2c2 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java <nl> @ @ - 236 , 16 + 236 , 12 @ @ public class COMBindingBaseObject extends COMInvoker { <nl> <nl> / / Handle special - case for property - puts ! <nl> if ( nType = = OleAuto . DISPATCH _ PROPERTYPUT ) { <nl> - dp . cNamedArgs = new UINT ( _ argsLen ) ; <nl> - dp . rgdispidNamedArgs = new DISPIDByReference ( <nl> - OaIdl . DISPID _ PROPERTYPUT ) ; <nl> + dp . setRgdispidNamedArgs ( new DISPID [ ] { OaIdl . DISPID _ PROPERTYPUT } ) ; <nl> } <nl> <nl> / / Build DISPPARAMS <nl> if ( _ argsLen > 0 ) { <nl> - dp . cArgs = new UINT ( _ args . length ) ; <nl> - / / make pointer of variant array <nl> - dp . rgvarg = new VariantArg . ByReference ( _ args ) ; <nl> + dp . setArgs ( _ args ) ; <nl> <nl> / / write ' DISPPARAMS ' structure to memory <nl> dp . write ( ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> index 0504051 . . f675aaa 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ import java . util . Map ; <nl> <nl> import com . sun . jna . Pointer ; <nl> import com . sun . jna . WString ; <nl> - import com . sun . jna . platform . win32 . Guid ; <nl> import com . sun . jna . platform . win32 . Guid . IID ; <nl> import com . sun . jna . platform . win32 . Guid . REFIID ; <nl> import com . sun . jna . platform . win32 . OaIdl . DISPID ; <nl> @ @ - 29 , 7 + 28 , 6 @ @ import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; <nl> import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; <nl> import com . sun . jna . platform . win32 . Variant ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> - import com . sun . jna . platform . win32 . Variant . VariantArg ; <nl> import com . sun . jna . platform . win32 . WinDef . LCID ; <nl> import com . sun . jna . platform . win32 . WinDef . UINT ; <nl> import com . sun . jna . platform . win32 . WinDef . UINTByReference ; <nl> @ @ - 40 , 7 + 38 , 6 @ @ import com . sun . jna . platform . win32 . COM . COMException ; <nl> import com . sun . jna . platform . win32 . COM . COMUtils ; <nl> import com . sun . jna . platform . win32 . COM . Dispatch ; <nl> import com . sun . jna . platform . win32 . COM . DispatchListener ; <nl> - import com . sun . jna . platform . win32 . COM . IDispatch ; <nl> import com . sun . jna . platform . win32 . COM . IDispatchCallback ; <nl> import com . sun . jna . platform . win32 . COM . Unknown ; <nl> import com . sun . jna . platform . win32 . COM . util . annotation . ComEventCallback ; <nl> @ @ - 49 , 7 + 46 , 15 @ @ import com . sun . jna . ptr . IntByReference ; <nl> import com . sun . jna . ptr . PointerByReference ; <nl> <nl> public class CallbackProxy implements IDispatchCallback { <nl> - <nl> + / / Helper declarations , initialized to default values by jvm <nl> + private static boolean DEFAULT _ BOOLEAN ; <nl> + private static byte DEFAULT _ BYTE ; <nl> + private static short DEFAULT _ SHORT ; <nl> + private static int DEFAULT _ INT ; <nl> + private static long DEFAULT _ LONG ; <nl> + private static float DEFAULT _ FLOAT ; <nl> + private static double DEFAULT _ DOUBLE ; <nl> + <nl> 	 public CallbackProxy ( Factory factory , Class < ? > comEventCallbackInterface , <nl> 	 	 	 IComEventCallbackListener comEventCallbackListener ) { <nl> 	 	 this . factory = factory ; <nl> @ @ - 90 , 6 + 95 , 11 @ @ public class CallbackProxy implements IDispatchCallback { <nl> 	 	 	 	 if ( - 1 = = dispId ) { <nl> 	 	 	 	 	 dispId = this . fetchDispIdFromName ( annotation ) ; <nl> 	 	 	 	 } <nl> + if ( dispId = = - 1 ) { <nl> + CallbackProxy . this . comEventCallbackListener . errorReceivingCallbackEvent ( <nl> + " DISPID for " + meth . getName ( ) + " not found " , <nl> + null ) ; <nl> + } <nl> 	 	 	 	 map . put ( new DISPID ( dispId ) , meth ) ; <nl> 	 	 	 } <nl> 	 	 } <nl> @ @ - 105 , 50 + 115 , 105 @ @ public class CallbackProxy implements IDispatchCallback { <nl> 	 void invokeOnThread ( final DISPID dispIdMember , final REFIID riid , LCID lcid , WORD wFlags , <nl> final DISPPARAMS . ByReference pDispParams ) { <nl> <nl> - final Method eventMethod ; <nl> - if ( CallbackProxy . this . dsipIdMap . containsKey ( dispIdMember ) ) { <nl> - eventMethod = CallbackProxy . this . dsipIdMap . get ( dispIdMember ) ; <nl> - if ( eventMethod . getParameterTypes ( ) . length ! = pDispParams . cArgs . intValue ( ) ) { <nl> - CallbackProxy . this . comEventCallbackListener . errorReceivingCallbackEvent ( <nl> - " Trying to invoke method " + eventMethod + " with " + pDispParams . cArgs . intValue ( ) + " arguments " , <nl> - null ) ; <nl> - return ; <nl> - } <nl> - } else { <nl> + VARIANT [ ] arguments = pDispParams . getArgs ( ) ; <nl> + <nl> + final Method eventMethod = CallbackProxy . this . dsipIdMap . get ( dispIdMember ) ; <nl> + if ( eventMethod = = null ) { <nl> CallbackProxy . this . comEventCallbackListener . errorReceivingCallbackEvent ( <nl> " No method found with dispId = " + dispIdMember , null ) ; <nl> return ; <nl> } <nl> <nl> + / * * <nl> + * DISPPARAMs provides two different ways to pass arguments . <nl> + * <nl> + * Arguments can be passed as a linear list with all arguments <nl> + * specified to a certain position ( positional ) or the position of <nl> + * an argument can be passed via the rgdispidNamedArgs array <nl> + * ( named ) . <nl> + * <nl> + * pDispParams . rgvarg ( length in pDispParams . cArgs ) contains all <nl> + * arguments ( named + position based ) <nl> + * <nl> + * pDispParams . rgdispidNamedArgs ( length in pDispParams . cNamedArgs ) <nl> + * contains the named parameters as DISPIDs - the DISPIDs are the <nl> + * target index in the method signature ( zero based ) . <nl> + * <nl> + * Each entry in pDispParams . rgvarg is either position based or name <nl> + * based and the position bases arguments are passed in reverse <nl> + * order , so getting this : <nl> + * <nl> + * rgvarg = [ " arg1 " , " arg2 " , " arg3 " , " arg4 " , " arg5 " ] <nl> + * rgdispidNamedArgs = [ 3 , 4 ] <nl> + * <nl> + * Would lead to this paramater array in the handler : <nl> + * <nl> + * [ " arg5 " , " arg4 " , " arg3 " , " arg1 " , " arg2 " ] <nl> + * <nl> + * See also : <nl> + * https : / / msdn . microsoft . com / de - de / library / windows / desktop / ms221653 % 28v = vs . 85 % 29 . aspx <nl> + * / <nl> + <nl> / / Arguments are converted to the JAVA side and IDispatch Interfaces <nl> / / are wrapped into an ProxyObject if so requested . <nl> / / <nl> / / Out - Parameter need to be specified as VARIANT , VARIANT args are <nl> / / not converted , so COM memory allocation rules apply . <nl> - final Class < ? > [ ] params = eventMethod . getParameterTypes ( ) ; <nl> - List < Object > rjargs = new ArrayList < Object > ( ) ; <nl> - if ( pDispParams . cArgs . intValue ( ) > 0 ) { <nl> - VariantArg vargs = pDispParams . rgvarg ; <nl> - vargs . setArraySize ( pDispParams . cArgs . intValue ( ) ) ; <nl> - for ( int i = 0 ; i < vargs . variantArg . length ; i + + ) { <nl> - Class targetClass = params [ vargs . variantArg . length - 1 - i ] ; <nl> - Variant . VARIANT varg = vargs . variantArg [ i ] ; <nl> - Object jarg = Convert . toJavaObject ( varg , targetClass , factory , true , false ) ; <nl> - rjargs . add ( jarg ) ; <nl> + <nl> + DISPID [ ] positionMap = pDispParams . getRgdispidNamedArgs ( ) ; <nl> + <nl> + final Class < ? > [ ] paramTypes = eventMethod . getParameterTypes ( ) ; <nl> + final Object [ ] params = new Object [ paramTypes . length ] ; <nl> + <nl> + / / Handle position based parameters first <nl> + for ( int i = 0 ; i < params . length & & ( arguments . length - positionMap . length - i ) > 0 ; i + + ) { <nl> + Class targetClass = paramTypes [ i ] ; <nl> + Variant . VARIANT varg = arguments [ arguments . length - i - 1 ] ; <nl> + params [ i ] = Convert . toJavaObject ( varg , targetClass , factory , true , false ) ; <nl> + } <nl> + <nl> + for ( int i = 0 ; i < positionMap . length ; i + + ) { <nl> + int targetPosition = positionMap [ i ] . intValue ( ) ; <nl> + if ( targetPosition > = params . length ) { <nl> + / / If less parameters are mapped then supplied , ignore <nl> + continue ; <nl> } <nl> + Class targetClass = paramTypes [ targetPosition ] ; <nl> + Variant . VARIANT varg = arguments [ i ] ; <nl> + params [ targetPosition ] = Convert . toJavaObject ( varg , targetClass , factory , true , false ) ; <nl> } <nl> <nl> - List < Object > margs = new ArrayList < Object > ( ) ; <nl> - try { <nl> - / / Reverse order from calling convention <nl> - int lastParamIdx = eventMethod . getParameterTypes ( ) . length - 1 ; <nl> - for ( int i = lastParamIdx ; i > = 0 ; i - - ) { <nl> - margs . add ( rjargs . get ( i ) ) ; <nl> + <nl> + / / Make sure the parameters are correctly initialized - - primitives <nl> + / / are initialized to their default value , else a NullPointer <nl> + / / exception occurs while doing the call into the target method <nl> + for ( int i = 0 ; i < params . length ; i + + ) { <nl> + if ( params [ i ] = = null & & paramTypes [ i ] . isPrimitive ( ) ) { <nl> + if ( paramTypes [ i ] . equals ( boolean . class ) ) { <nl> + params [ i ] = DEFAULT _ BOOLEAN ; <nl> + } else if ( paramTypes [ i ] . equals ( byte . class ) ) { <nl> + params [ i ] = DEFAULT _ BYTE ; <nl> + } else if ( paramTypes [ i ] . equals ( short . class ) ) { <nl> + params [ i ] = DEFAULT _ SHORT ; <nl> + } else if ( paramTypes [ i ] . equals ( int . class ) ) { <nl> + params [ i ] = DEFAULT _ INT ; <nl> + } else if ( paramTypes [ i ] . equals ( long . class ) ) { <nl> + params [ i ] = DEFAULT _ LONG ; <nl> + } else if ( paramTypes [ i ] . equals ( float . class ) ) { <nl> + params [ i ] = DEFAULT _ FLOAT ; <nl> + } else if ( paramTypes [ i ] . equals ( double . class ) ) { <nl> + params [ i ] = DEFAULT _ DOUBLE ; <nl> + } else { <nl> + throw new IllegalArgumentException ( " Class type " + paramTypes [ i ] . getName ( ) + " not mapped to primitive default value . " ) ; <nl> + } <nl> } <nl> - eventMethod . invoke ( comEventCallbackListener , margs . toArray ( ) ) ; <nl> + } <nl> + <nl> + try { <nl> + eventMethod . invoke ( comEventCallbackListener , params ) ; <nl> } catch ( Exception e ) { <nl> - List < String > decodedClassNames = new ArrayList < String > ( margs . size ( ) ) ; <nl> - for ( Object o : margs ) { <nl> + List < String > decodedClassNames = new ArrayList < String > ( params . length ) ; <nl> + for ( Object o : params ) { <nl> if ( o = = null ) { <nl> decodedClassNames . add ( " NULL " ) ; <nl> } else { <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> index 62dfeb4 . . 9b01908 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java <nl> @ @ - 595 , 8 + 595 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> <nl> 	 	 / / Handle special - case for property - puts ! <nl> 	 	 if ( nType = = OleAuto . DISPATCH _ PROPERTYPUT ) { <nl> - 	 	 	 dp . cNamedArgs = new UINT ( _ argsLen ) ; <nl> - 	 	 	 dp . rgdispidNamedArgs = new DISPIDByReference ( OaIdl . DISPID _ PROPERTYPUT ) ; <nl> + 	 	 	 dp . setRgdispidNamedArgs ( new DISPID [ ] { OaIdl . DISPID _ PROPERTYPUT } ) ; <nl> 	 	 } <nl> <nl> / / Apply " fix " according to <nl> @ @ - 631 , 9 + 630 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 <nl> <nl> 	 	 / / Build DISPPARAMS <nl> 	 	 if ( _ argsLen > 0 ) { <nl> - 	 	 	 dp . cArgs = new UINT ( _ args . length ) ; <nl> - 	 	 	 / / make pointer of variant array <nl> - 	 	 	 dp . rgvarg = new VariantArg . ByReference ( _ args ) ; <nl> + 	 	 	 dp . setArgs ( _ args ) ; <nl> <nl> 	 	 	 / / write ' DISPPARAMS ' structure to memory <nl> 	 	 	 dp . write ( ) ; <nl> diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OleAuto . java b / contrib / platform / src / com / sun / jna / platform / win32 / OleAuto . java <nl> index a7af894 . . e93aebf 100644 <nl> - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OleAuto . java <nl> + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OleAuto . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ <nl> * / <nl> package com . sun . jna . platform . win32 ; <nl> <nl> + import com . sun . jna . Memory ; <nl> import java . util . List ; <nl> <nl> import com . sun . jna . Native ; <nl> @ @ - 19 , 7 + 20 , 7 @ @ import com . sun . jna . Pointer ; <nl> import com . sun . jna . Structure ; <nl> import com . sun . jna . WString ; <nl> import com . sun . jna . platform . win32 . Guid . GUID ; <nl> - import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; <nl> + import com . sun . jna . platform . win32 . OaIdl . DISPID ; <nl> import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; <nl> import com . sun . jna . platform . win32 . OaIdl . SAFEARRAYBOUND ; <nl> import com . sun . jna . platform . win32 . Variant . VARIANT ; <nl> @ @ - 563 , 15 + 564 , 61 @ @ public interface OleAuto extends StdCallLibrary { <nl> 	 	 / * * The rgvarg . * / <nl> 	 	 public VariantArg . ByReference rgvarg ; <nl> <nl> - 	 	 / * * The rgdispid named args . * / <nl> - 	 	 public DISPIDByReference rgdispidNamedArgs ; <nl> - <nl> - 	 	 / * * The c args . * / <nl> - 	 	 public UINT cArgs ; <nl> - <nl> - 	 	 / * * The c named args . * / <nl> - 	 	 public UINT cNamedArgs ; <nl> - <nl> + / * * The rgdispid named args . * / <nl> + public Pointer rgdispidNamedArgs = Pointer . NULL ; <nl> + <nl> + 	 	 / * * The c args . - use setArgs to update arguments * / <nl> + 	 	 public UINT cArgs = new UINT ( 0 ) ; <nl> + <nl> + 	 	 / * * The c named args . - use setRgdispidNamedArgs to update named arguments map * / <nl> + 	 	 public UINT cNamedArgs = new UINT ( 0 ) ; <nl> + <nl> + public DISPID [ ] getRgdispidNamedArgs ( ) { <nl> + DISPID [ ] namedArgs = null ; <nl> + int count = cNamedArgs . intValue ( ) ; <nl> + if ( rgdispidNamedArgs ! = null & & count > 0 ) { <nl> + int [ ] rawData = rgdispidNamedArgs . getIntArray ( 0 , count ) ; <nl> + namedArgs = new DISPID [ count ] ; <nl> + for ( int i = 0 ; i < count ; i + + ) { <nl> + namedArgs [ i ] = new DISPID ( rawData [ i ] ) ; <nl> + } <nl> + } else { <nl> + namedArgs = new DISPID [ 0 ] ; <nl> + } <nl> + return namedArgs ; <nl> + } <nl> + <nl> + public void setRgdispidNamedArgs ( DISPID [ ] namedArgs ) { <nl> + if ( namedArgs = = null ) { <nl> + namedArgs = new DISPID [ 0 ] ; <nl> + } <nl> + cNamedArgs = new UINT ( namedArgs . length ) ; <nl> + rgdispidNamedArgs = new Memory ( DISPID . SIZE * namedArgs . length ) ; <nl> + int [ ] rawData = new int [ namedArgs . length ] ; <nl> + for ( int i = 0 ; i < rawData . length ; i + + ) { <nl> + rawData [ i ] = namedArgs [ i ] . intValue ( ) ; <nl> + } <nl> + rgdispidNamedArgs . write ( 0 , rawData , 0 , namedArgs . length ) ; <nl> + } <nl> + <nl> + public VARIANT [ ] getArgs ( ) { <nl> + if ( this . rgvarg ! = null ) { <nl> + this . rgvarg . setArraySize ( cArgs . intValue ( ) ) ; <nl> + return this . rgvarg . variantArg ; <nl> + } else { <nl> + return new VARIANT [ 0 ] ; <nl> + } <nl> + } <nl> + <nl> + public void setArgs ( VARIANT [ ] arguments ) { <nl> + if ( arguments = = null ) { <nl> + arguments = new VARIANT [ 0 ] ; <nl> + } <nl> + <nl> + rgvarg = new VariantArg . ByReference ( arguments ) ; <nl> + cArgs = new UINT ( arguments . length ) ; <nl> + } <nl> + <nl> 	 	 / * * <nl> 	 	 * Instantiates a new dispparams . <nl> 	 	 * / <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java <nl> index 4652cb6 . . 7d54294 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java <nl> @ @ - 92 , 9 + 92 , 6 @ @ public class ComEventCallbacks _ Test { <nl> public void after ( ) { <nl> / / Shutdown Internet Explorer <nl> DISPPARAMS . ByReference pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> - pDispParams . cArgs = new UINT ( 0 ) ; <nl> - pDispParams . cNamedArgs = new UINT ( 0 ) ; <nl> - pDispParams . rgvarg = null ; <nl> VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; <nl> IntByReference puArgErr = new IntByReference ( ) ; <nl> EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; <nl> @ @ - 196 , 27 + 193 , 24 @ @ public class ComEventCallbacks _ Test { <nl> VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , <nl> IntByReference puArgErr ) { <nl> <nl> - / / @ toDo : Move setArraySize into invoke method <nl> - if ( pDispParams . rgvarg ! = null & & pDispParams . cArgs . intValue ( ) > 0 ) { <nl> - pDispParams . rgvarg . setArraySize ( pDispParams . cArgs . intValue ( ) ) ; <nl> - } <nl> + VARIANT [ ] arguments = pDispParams . getArgs ( ) ; <nl> <nl> try { <nl> switch ( dispIdMember . intValue ( ) ) { <nl> case DISPID _ NavigateComplete2 : <nl> navigateComplete2Called = true ; <nl> / / URL ist passed as VARIANT $ ByReference <nl> - VARIANT urlByRef = pDispParams . rgvarg . variantArg [ 0 ] ; <nl> + VARIANT urlByRef = arguments [ 0 ] ; <nl> navigateComplete2String = ( ( VARIANT ) urlByRef . getValue ( ) ) . stringValue ( ) ; <nl> break ; <nl> case DISPID _ BeforeNavigate2 : <nl> - VARIANT Cancel = pDispParams . rgvarg . variantArg [ 0 ] ; <nl> - VARIANT Headers = pDispParams . rgvarg . variantArg [ 1 ] ; <nl> - VARIANT PostData = pDispParams . rgvarg . variantArg [ 2 ] ; <nl> - VARIANT TargetFrameName = pDispParams . rgvarg . variantArg [ 3 ] ; <nl> - VARIANT Flags = pDispParams . rgvarg . variantArg [ 4 ] ; <nl> - VARIANT URL = pDispParams . rgvarg . variantArg [ 5 ] ; <nl> - VARIANT pDisp = pDispParams . rgvarg . variantArg [ 6 ] ; <nl> + VARIANT Cancel = arguments [ 0 ] ; <nl> + VARIANT Headers = arguments [ 1 ] ; <nl> + VARIANT PostData = arguments [ 2 ] ; <nl> + VARIANT TargetFrameName = arguments [ 3 ] ; <nl> + VARIANT Flags = arguments [ 4 ] ; <nl> + VARIANT URL = arguments [ 5 ] ; <nl> + VARIANT pDisp = arguments [ 6 ] ; <nl> VARIANT _ BOOLByReference cancelValue = ( ( VARIANT _ BOOLByReference ) Cancel . getValue ( ) ) ; <nl> if ( blockNavigation ) { <nl> cancelValue . setValue ( Variant . VARIANT _ TRUE ) ; <nl> @ @ - 280 , 11 + 274 , 8 @ @ public class ComEventCallbacks _ Test { <nl> DISPPARAMS . ByReference pDispParams ; <nl> <nl> pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> - pDispParams . cArgs = new UINT ( 1 ) ; <nl> - pDispParams . cNamedArgs = new UINT ( 1 ) ; <nl> - pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; <nl> - pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( true ) ; <nl> - pDispParams . rgdispidNamedArgs = new DISPIDByReference ( new DISPID ( OaIdl . DISPID _ PROPERTYPUT . intValue ( ) ) ) ; <nl> + pDispParams . setArgs ( new VARIANT [ ] { new VARIANT ( true ) } ) ; <nl> + pDispParams . setRgdispidNamedArgs ( new DISPID [ ] { OaIdl . DISPID _ PROPERTYPUT } ) ; <nl> / / Visible - Prioperty <nl> hr = ieDispatch . Invoke ( dispIdVisible . getValue ( ) , niid , lcid , propertyPutFlags , pDispParams , null , null , null ) ; <nl> COMUtils . checkRC ( hr ) ; <nl> @ @ - 319 , 11 + 310 , 9 @ @ public class ComEventCallbacks _ Test { <nl> String navigateURL = " https : / / github . com / java - native - access / jna " ; <nl> String blockedURL = " http : / / www . google . de " ; <nl> <nl> + VARIANT [ ] arguments = new VARIANT [ ] { new VARIANT ( navigateURL ) } ; <nl> pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> - pDispParams . cArgs = new UINT ( 1 ) ; <nl> - pDispParams . cNamedArgs = new UINT ( 0 ) ; <nl> - pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; <nl> - pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( navigateURL ) ; <nl> + pDispParams . setArgs ( arguments ) ; <nl> hr = ieDispatch . Invoke ( dispIdNavigate . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; <nl> COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> <nl> @ @ - 343 , 11 + 332 , 9 @ @ public class ComEventCallbacks _ Test { <nl> listener . navigateComplete2String = null ; <nl> listener . blockNavigation = true ; <nl> <nl> + arguments = new VARIANT [ ] { new VARIANT ( blockedURL ) } ; <nl> pDispParams = new DISPPARAMS . ByReference ( ) ; <nl> - pDispParams . cArgs = new UINT ( 1 ) ; <nl> - pDispParams . cNamedArgs = new UINT ( 0 ) ; <nl> - pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; <nl> - pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( blockedURL ) ; <nl> + pDispParams . setArgs ( arguments ) ; <nl> hr = ieDispatch . Invoke ( dispIdNavigate . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; <nl> COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; <nl> <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java <nl> new file mode 100644 <nl> index 0000000 . . d47406e <nl> - - - / dev / null <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java <nl> @ @ - 0 , 0 + 1 , 287 @ @ <nl> + package com . sun . jna . platform . win32 . COM . util ; <nl> + <nl> + import com . sun . jna . Pointer ; <nl> + import com . sun . jna . platform . win32 . COM . util . annotation . ComEventCallback ; <nl> + import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; <nl> + import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; <nl> + import com . sun . jna . platform . win32 . Ole32 ; <nl> + import com . sun . jna . platform . win32 . Variant ; <nl> + import org . junit . After ; <nl> + import org . junit . Assert ; <nl> + import org . junit . Before ; <nl> + import org . junit . Test ; <nl> + <nl> + public class ComEventCallbacks2 _ Test { <nl> + <nl> + static { <nl> + ClassLoader . getSystemClassLoader ( ) . setDefaultAssertionStatus ( true ) ; <nl> + } <nl> + <nl> + Factory factory ; <nl> + <nl> + @ Before <nl> + public void before ( ) { <nl> + Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; <nl> + this . factory = new Factory ( ) ; <nl> + } <nl> + <nl> + @ After <nl> + public void after ( ) { <nl> + this . factory . disposeAll ( ) ; <nl> + Ole32 . INSTANCE . CoUninitialize ( ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFireCloseHandlerMatching ( ) throws InterruptedException { <nl> + <nl> + class ApplicatonEventsHandler extends AbstractComEventCallbackListener implements ApplicationEvents4ListenerMatching { <nl> + <nl> + public volatile boolean changed = false ; <nl> + public volatile boolean beforeClose = false ; <nl> + public volatile boolean error = false ; <nl> + <nl> + @ Override <nl> + public void errorReceivingCallbackEvent ( String string , Exception excptn ) { <nl> + if ( string . startsWith ( " No method found with " ) ) { <nl> + return ; / / Normal case <nl> + } <nl> + System . out . println ( " Error : " + string ) ; <nl> + error = true ; <nl> + } <nl> + <nl> + public void DocumentChange ( ) { <nl> + changed = true ; <nl> + } <nl> + <nl> + public void DocumentBeforeClose ( IDispatch Doc , Variant . VARIANT Cancel ) { <nl> + beforeClose = true ; <nl> + } <nl> + } <nl> + <nl> + ApplicatonEventsHandler handler = new ApplicatonEventsHandler ( ) ; <nl> + <nl> + Application appX = factory . createObject ( Application . class ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + IComEventCallbackCookie cookie = appX . advise ( ApplicationEvents4ListenerMatching . class , handler ) ; <nl> + <nl> + IDispatch doc = appX . getProperty ( IDispatch . class , " Documents " ) . invokeMethod ( IDispatch . class , " Add " ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + doc . getProperty ( IDispatch . class , " Paragraphs " ) <nl> + . invokeMethod ( IDispatch . class , " Item " , 1 ) <nl> + . getProperty ( IDispatch . class , " Range " ) <nl> + . setProperty ( " Text " , " Test text " ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + doc . invokeMethod ( Void . class , " Close " , Boolean . FALSE ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + appX . unadvise ( ApplicationEvents4ListenerMatching . class , cookie ) ; <nl> + <nl> + appX . invokeMethod ( Void . class , " Quit " , Boolean . FALSE ) ; <nl> + <nl> + Assert . assertTrue ( handler . changed ) ; <nl> + Assert . assertTrue ( handler . beforeClose ) ; <nl> + Assert . assertFalse ( handler . error ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFireCloseHandlerLessArguments ( ) throws InterruptedException { <nl> + <nl> + class ApplicatonEventsHandler extends AbstractComEventCallbackListener implements ApplicationEvents4ListenerLessArguments { <nl> + <nl> + public volatile boolean changed = false ; <nl> + public volatile boolean beforeClose = false ; <nl> + public volatile boolean error = false ; <nl> + <nl> + @ Override <nl> + public void errorReceivingCallbackEvent ( String string , Exception excptn ) { <nl> + if ( string . startsWith ( " No method found with " ) ) { <nl> + return ; / / Normal case <nl> + } <nl> + System . out . println ( " Error : " + string ) ; <nl> + if ( excptn ! = null ) { <nl> + System . out . println ( excptn . getMessage ( ) ) ; <nl> + excptn . printStackTrace ( System . out ) ; <nl> + } <nl> + error = true ; <nl> + } <nl> + <nl> + public void DocumentChange ( ) { <nl> + changed = true ; <nl> + } <nl> + <nl> + public void DocumentBeforeClose ( ) { <nl> + beforeClose = true ; <nl> + } <nl> + } <nl> + <nl> + ApplicatonEventsHandler handler = new ApplicatonEventsHandler ( ) ; <nl> + <nl> + Application appX = factory . createObject ( Application . class ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + IComEventCallbackCookie cookie = appX . advise ( ApplicationEvents4ListenerLessArguments . class , handler ) ; <nl> + <nl> + IDispatch doc = appX . getProperty ( IDispatch . class , " Documents " ) . invokeMethod ( IDispatch . class , " Add " ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + doc . getProperty ( IDispatch . class , " Paragraphs " ) <nl> + . invokeMethod ( IDispatch . class , " Item " , 1 ) <nl> + . getProperty ( IDispatch . class , " Range " ) <nl> + . setProperty ( " Text " , " Test text " ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + doc . invokeMethod ( Void . class , " Close " , Boolean . FALSE ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + appX . unadvise ( ApplicationEvents4ListenerMatching . class , cookie ) ; <nl> + <nl> + appX . invokeMethod ( Void . class , " Quit " , Boolean . FALSE ) ; <nl> + <nl> + Assert . assertTrue ( handler . changed ) ; <nl> + Assert . assertTrue ( handler . beforeClose ) ; <nl> + Assert . assertFalse ( handler . error ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testFireCloseHandlerMoreArguments ( ) throws InterruptedException { <nl> + <nl> + class ApplicatonEventsHandler extends AbstractComEventCallbackListener implements ApplicationEvents4ListenerMoreArguments { <nl> + <nl> + public volatile boolean changed = false ; <nl> + public volatile boolean beforeClose = false ; <nl> + public volatile boolean error = false ; <nl> + public volatile boolean fakeArgumentObjectWasNull = false ; <nl> + public volatile boolean fakeArgumentIntWas0 = false ; <nl> + <nl> + @ Override <nl> + public void errorReceivingCallbackEvent ( String string , Exception excptn ) { <nl> + if ( string . startsWith ( " No method found with " ) ) { <nl> + return ; / / Normal case <nl> + } <nl> + System . out . println ( " Error : " + string ) ; <nl> + if ( excptn ! = null ) { <nl> + System . out . println ( excptn . getMessage ( ) ) ; <nl> + excptn . printStackTrace ( System . out ) ; <nl> + } <nl> + error = true ; <nl> + } <nl> + <nl> + public void DocumentChange ( ) { <nl> + changed = true ; <nl> + } <nl> + <nl> + public void DocumentBeforeClose ( IDispatch Doc , Variant . VARIANT Cancel , Boolean fakeArgumentObject , int fakeArgumentInt ) { <nl> + beforeClose = true ; <nl> + fakeArgumentObjectWasNull = fakeArgumentObject = = null ; <nl> + fakeArgumentIntWas0 = fakeArgumentInt = = 0 ; <nl> + } <nl> + } <nl> + <nl> + ApplicatonEventsHandler handler = new ApplicatonEventsHandler ( ) ; <nl> + <nl> + Application appX = factory . createObject ( Application . class ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + IComEventCallbackCookie cookie = appX . advise ( ApplicationEvents4ListenerMoreArguments . class , handler ) ; <nl> + <nl> + IDispatch doc = appX . getProperty ( IDispatch . class , " Documents " ) . invokeMethod ( IDispatch . class , " Add " ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + doc . getProperty ( IDispatch . class , " Paragraphs " ) <nl> + . invokeMethod ( IDispatch . class , " Item " , 1 ) <nl> + . getProperty ( IDispatch . class , " Range " ) <nl> + . setProperty ( " Text " , " Test text " ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + doc . invokeMethod ( Void . class , " Close " , Boolean . FALSE ) ; <nl> + <nl> + Thread . sleep ( 500 ) ; <nl> + <nl> + appX . unadvise ( ApplicationEvents4ListenerMatching . class , cookie ) ; <nl> + <nl> + appX . invokeMethod ( Void . class , " Quit " , Boolean . FALSE ) ; <nl> + <nl> + Assert . assertTrue ( handler . changed ) ; <nl> + Assert . assertTrue ( handler . beforeClose ) ; <nl> + Assert . assertFalse ( handler . error ) ; <nl> + Assert . assertTrue ( handler . fakeArgumentIntWas0 ) ; <nl> + Assert . assertTrue ( handler . fakeArgumentObjectWasNull ) ; <nl> + } <nl> + <nl> + <nl> + @ ComInterface ( iid = " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) <nl> + interface ApplicationEvents4ListenerMatching { <nl> + <nl> + / * * <nl> + * < p > <nl> + * id ( 0x3 ) < / p > <nl> + * / <nl> + @ ComEventCallback ( dispid = 0x3 ) <nl> + void DocumentChange ( ) ; <nl> + <nl> + / * * <nl> + * < p > <nl> + * id ( 0x6 ) < / p > <nl> + * / <nl> + @ ComEventCallback ( dispid = 0x6 ) <nl> + void DocumentBeforeClose ( IDispatch Doc , Variant . VARIANT Cancel ) ; <nl> + } <nl> + <nl> + @ ComInterface ( iid = " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) <nl> + interface ApplicationEvents4ListenerLessArguments { <nl> + <nl> + / * * <nl> + * < p > <nl> + * id ( 0x3 ) < / p > <nl> + * / <nl> + @ ComEventCallback ( dispid = 0x3 ) <nl> + void DocumentChange ( ) ; <nl> + <nl> + / * * <nl> + * < p > <nl> + * id ( 0x6 ) < / p > <nl> + * / <nl> + @ ComEventCallback ( dispid = 0x6 ) <nl> + void DocumentBeforeClose ( ) ; <nl> + } <nl> + <nl> + @ ComInterface ( iid = " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) <nl> + interface ApplicationEvents4ListenerMoreArguments { <nl> + <nl> + / * * <nl> + * < p > <nl> + * id ( 0x3 ) < / p > <nl> + * / <nl> + @ ComEventCallback ( dispid = 0x3 ) <nl> + void DocumentChange ( ) ; <nl> + <nl> + / * * <nl> + * < p > <nl> + * id ( 0x6 ) < / p > <nl> + * / <nl> + @ ComEventCallback ( dispid = 0x6 ) <nl> + void DocumentBeforeClose ( IDispatch Doc , Variant . VARIANT Cancel , Boolean fakeArgumentObject , int fakeArgumentInt ) ; <nl> + } <nl> + <nl> + @ ComObject ( clsId = " { 000209FF - 0000 - 0000 - C000 - 000000000046 } " ) <nl> + public interface Application extends <nl> + IDispatch , <nl> + IConnectionPoint , <nl> + IUnknown { <nl> + <nl> + } <nl> + } <nl> diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java <nl> index 363cb7f . . b375a91 100644 <nl> - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java <nl> + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java <nl> @ @ - 129 , 12 + 129 , 8 @ @ public class HybdridCOMInvocationTest { <nl> WORD wFlagsCombined = new WinDef . WORD ( OleAuto . DISPATCH _ METHOD | OleAuto . DISPATCH _ PROPERTYGET ) ; <nl> <nl> OleAuto . DISPPARAMS . ByReference pDispParams = new OleAuto . DISPPARAMS . ByReference ( ) ; <nl> - VARIANT [ ] params = new VARIANT [ 1 ] ; <nl> - params [ 0 ] = new VARIANT ( 1f ) ; <nl> - pDispParams . cArgs = new UINT ( 1 ) ; <nl> - pDispParams . cNamedArgs = new UINT ( 0 ) ; <nl> - pDispParams . rgvarg = new Variant . VariantArg . ByReference ( params ) ; <nl> - pDispParams . rgdispidNamedArgs = new OaIdl . DISPIDByReference ( ) ; <nl> + VARIANT [ ] params = new VARIANT [ ] { new VARIANT ( 1f ) } ; <nl> + pDispParams . setArgs ( params ) ; <nl> <nl> / / Call InchesToPoints as a method <nl> hr = dp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , wFlagsMethod , pDispParams , result , pExcepInfo , puArgErr ) ;
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / CHANGES . md b / CHANGES . md 
 index 672f0aa . . b7c1e66 100644 
 - - - a / CHANGES . md 
 + + + b / CHANGES . md 
 @ @ - 52 , 6 + 52 , 7 @ @ Features 
 * [ # 642 ] ( https : / / github . com / java - native - access / jna / pull / 642 ) : COM calls with variable number of arguments ( varargs ) are now supported - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . 
 * [ # 644 ] ( https : / / github . com / java - native - access / jna / pull / 644 ) : New ant target ' install ' for installing JNA artifacts in local m2 - repository - [ @ SevenOf9Sleeper ] ( https : / / github . com / SevenOf9Sleeper ) . 
 * [ # 649 ] ( https : / / github . com / java - native - access / jna / pull / 649 ) : Bugfix msoffice sample and add two samples taken from MSDN and translated from VisualBasic to Java - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 + * [ # 654 ] ( https : / / github . com / java - native - access / jna / pull / 654 ) : Support named arguments for ` com . sun . jna . platform . win32 . COM . util . CallbackProxy ` based callbacks - [ @ matthiasblaesing ] ( https : / / github . com / matthiasblaesing ) . 
 
 Bug Fixes 
 - - - - - - - - - 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 index 857ecd2 . . ddad2c2 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / COMBindingBaseObject . java 
 @ @ - 236 , 16 + 236 , 12 @ @ public class COMBindingBaseObject extends COMInvoker { 
 
 / / Handle special - case for property - puts ! 
 if ( nType = = OleAuto . DISPATCH _ PROPERTYPUT ) { 
 - dp . cNamedArgs = new UINT ( _ argsLen ) ; 
 - dp . rgdispidNamedArgs = new DISPIDByReference ( 
 - OaIdl . DISPID _ PROPERTYPUT ) ; 
 + dp . setRgdispidNamedArgs ( new DISPID [ ] { OaIdl . DISPID _ PROPERTYPUT } ) ; 
 } 
 
 / / Build DISPPARAMS 
 if ( _ argsLen > 0 ) { 
 - dp . cArgs = new UINT ( _ args . length ) ; 
 - / / make pointer of variant array 
 - dp . rgvarg = new VariantArg . ByReference ( _ args ) ; 
 + dp . setArgs ( _ args ) ; 
 
 / / write ' DISPPARAMS ' structure to memory 
 dp . write ( ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 index 0504051 . . f675aaa 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / CallbackProxy . java 
 @ @ - 20 , 7 + 20 , 6 @ @ import java . util . Map ; 
 
 import com . sun . jna . Pointer ; 
 import com . sun . jna . WString ; 
 - import com . sun . jna . platform . win32 . Guid ; 
 import com . sun . jna . platform . win32 . Guid . IID ; 
 import com . sun . jna . platform . win32 . Guid . REFIID ; 
 import com . sun . jna . platform . win32 . OaIdl . DISPID ; 
 @ @ - 29 , 7 + 28 , 6 @ @ import com . sun . jna . platform . win32 . OaIdl . EXCEPINFO ; 
 import com . sun . jna . platform . win32 . OleAuto . DISPPARAMS ; 
 import com . sun . jna . platform . win32 . Variant ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 - import com . sun . jna . platform . win32 . Variant . VariantArg ; 
 import com . sun . jna . platform . win32 . WinDef . LCID ; 
 import com . sun . jna . platform . win32 . WinDef . UINT ; 
 import com . sun . jna . platform . win32 . WinDef . UINTByReference ; 
 @ @ - 40 , 7 + 38 , 6 @ @ import com . sun . jna . platform . win32 . COM . COMException ; 
 import com . sun . jna . platform . win32 . COM . COMUtils ; 
 import com . sun . jna . platform . win32 . COM . Dispatch ; 
 import com . sun . jna . platform . win32 . COM . DispatchListener ; 
 - import com . sun . jna . platform . win32 . COM . IDispatch ; 
 import com . sun . jna . platform . win32 . COM . IDispatchCallback ; 
 import com . sun . jna . platform . win32 . COM . Unknown ; 
 import com . sun . jna . platform . win32 . COM . util . annotation . ComEventCallback ; 
 @ @ - 49 , 7 + 46 , 15 @ @ import com . sun . jna . ptr . IntByReference ; 
 import com . sun . jna . ptr . PointerByReference ; 
 
 public class CallbackProxy implements IDispatchCallback { 
 - 
 + / / Helper declarations , initialized to default values by jvm 
 + private static boolean DEFAULT _ BOOLEAN ; 
 + private static byte DEFAULT _ BYTE ; 
 + private static short DEFAULT _ SHORT ; 
 + private static int DEFAULT _ INT ; 
 + private static long DEFAULT _ LONG ; 
 + private static float DEFAULT _ FLOAT ; 
 + private static double DEFAULT _ DOUBLE ; 
 + 
 	 public CallbackProxy ( Factory factory , Class < ? > comEventCallbackInterface , 
 	 	 	 IComEventCallbackListener comEventCallbackListener ) { 
 	 	 this . factory = factory ; 
 @ @ - 90 , 6 + 95 , 11 @ @ public class CallbackProxy implements IDispatchCallback { 
 	 	 	 	 if ( - 1 = = dispId ) { 
 	 	 	 	 	 dispId = this . fetchDispIdFromName ( annotation ) ; 
 	 	 	 	 } 
 + if ( dispId = = - 1 ) { 
 + CallbackProxy . this . comEventCallbackListener . errorReceivingCallbackEvent ( 
 + " DISPID for " + meth . getName ( ) + " not found " , 
 + null ) ; 
 + } 
 	 	 	 	 map . put ( new DISPID ( dispId ) , meth ) ; 
 	 	 	 } 
 	 	 } 
 @ @ - 105 , 50 + 115 , 105 @ @ public class CallbackProxy implements IDispatchCallback { 
 	 void invokeOnThread ( final DISPID dispIdMember , final REFIID riid , LCID lcid , WORD wFlags , 
 final DISPPARAMS . ByReference pDispParams ) { 
 
 - final Method eventMethod ; 
 - if ( CallbackProxy . this . dsipIdMap . containsKey ( dispIdMember ) ) { 
 - eventMethod = CallbackProxy . this . dsipIdMap . get ( dispIdMember ) ; 
 - if ( eventMethod . getParameterTypes ( ) . length ! = pDispParams . cArgs . intValue ( ) ) { 
 - CallbackProxy . this . comEventCallbackListener . errorReceivingCallbackEvent ( 
 - " Trying to invoke method " + eventMethod + " with " + pDispParams . cArgs . intValue ( ) + " arguments " , 
 - null ) ; 
 - return ; 
 - } 
 - } else { 
 + VARIANT [ ] arguments = pDispParams . getArgs ( ) ; 
 + 
 + final Method eventMethod = CallbackProxy . this . dsipIdMap . get ( dispIdMember ) ; 
 + if ( eventMethod = = null ) { 
 CallbackProxy . this . comEventCallbackListener . errorReceivingCallbackEvent ( 
 " No method found with dispId = " + dispIdMember , null ) ; 
 return ; 
 } 
 
 + / * * 
 + * DISPPARAMs provides two different ways to pass arguments . 
 + * 
 + * Arguments can be passed as a linear list with all arguments 
 + * specified to a certain position ( positional ) or the position of 
 + * an argument can be passed via the rgdispidNamedArgs array 
 + * ( named ) . 
 + * 
 + * pDispParams . rgvarg ( length in pDispParams . cArgs ) contains all 
 + * arguments ( named + position based ) 
 + * 
 + * pDispParams . rgdispidNamedArgs ( length in pDispParams . cNamedArgs ) 
 + * contains the named parameters as DISPIDs - the DISPIDs are the 
 + * target index in the method signature ( zero based ) . 
 + * 
 + * Each entry in pDispParams . rgvarg is either position based or name 
 + * based and the position bases arguments are passed in reverse 
 + * order , so getting this : 
 + * 
 + * rgvarg = [ " arg1 " , " arg2 " , " arg3 " , " arg4 " , " arg5 " ] 
 + * rgdispidNamedArgs = [ 3 , 4 ] 
 + * 
 + * Would lead to this paramater array in the handler : 
 + * 
 + * [ " arg5 " , " arg4 " , " arg3 " , " arg1 " , " arg2 " ] 
 + * 
 + * See also : 
 + * https : / / msdn . microsoft . com / de - de / library / windows / desktop / ms221653 % 28v = vs . 85 % 29 . aspx 
 + * / 
 + 
 / / Arguments are converted to the JAVA side and IDispatch Interfaces 
 / / are wrapped into an ProxyObject if so requested . 
 / / 
 / / Out - Parameter need to be specified as VARIANT , VARIANT args are 
 / / not converted , so COM memory allocation rules apply . 
 - final Class < ? > [ ] params = eventMethod . getParameterTypes ( ) ; 
 - List < Object > rjargs = new ArrayList < Object > ( ) ; 
 - if ( pDispParams . cArgs . intValue ( ) > 0 ) { 
 - VariantArg vargs = pDispParams . rgvarg ; 
 - vargs . setArraySize ( pDispParams . cArgs . intValue ( ) ) ; 
 - for ( int i = 0 ; i < vargs . variantArg . length ; i + + ) { 
 - Class targetClass = params [ vargs . variantArg . length - 1 - i ] ; 
 - Variant . VARIANT varg = vargs . variantArg [ i ] ; 
 - Object jarg = Convert . toJavaObject ( varg , targetClass , factory , true , false ) ; 
 - rjargs . add ( jarg ) ; 
 + 
 + DISPID [ ] positionMap = pDispParams . getRgdispidNamedArgs ( ) ; 
 + 
 + final Class < ? > [ ] paramTypes = eventMethod . getParameterTypes ( ) ; 
 + final Object [ ] params = new Object [ paramTypes . length ] ; 
 + 
 + / / Handle position based parameters first 
 + for ( int i = 0 ; i < params . length & & ( arguments . length - positionMap . length - i ) > 0 ; i + + ) { 
 + Class targetClass = paramTypes [ i ] ; 
 + Variant . VARIANT varg = arguments [ arguments . length - i - 1 ] ; 
 + params [ i ] = Convert . toJavaObject ( varg , targetClass , factory , true , false ) ; 
 + } 
 + 
 + for ( int i = 0 ; i < positionMap . length ; i + + ) { 
 + int targetPosition = positionMap [ i ] . intValue ( ) ; 
 + if ( targetPosition > = params . length ) { 
 + / / If less parameters are mapped then supplied , ignore 
 + continue ; 
 } 
 + Class targetClass = paramTypes [ targetPosition ] ; 
 + Variant . VARIANT varg = arguments [ i ] ; 
 + params [ targetPosition ] = Convert . toJavaObject ( varg , targetClass , factory , true , false ) ; 
 } 
 
 - List < Object > margs = new ArrayList < Object > ( ) ; 
 - try { 
 - / / Reverse order from calling convention 
 - int lastParamIdx = eventMethod . getParameterTypes ( ) . length - 1 ; 
 - for ( int i = lastParamIdx ; i > = 0 ; i - - ) { 
 - margs . add ( rjargs . get ( i ) ) ; 
 + 
 + / / Make sure the parameters are correctly initialized - - primitives 
 + / / are initialized to their default value , else a NullPointer 
 + / / exception occurs while doing the call into the target method 
 + for ( int i = 0 ; i < params . length ; i + + ) { 
 + if ( params [ i ] = = null & & paramTypes [ i ] . isPrimitive ( ) ) { 
 + if ( paramTypes [ i ] . equals ( boolean . class ) ) { 
 + params [ i ] = DEFAULT _ BOOLEAN ; 
 + } else if ( paramTypes [ i ] . equals ( byte . class ) ) { 
 + params [ i ] = DEFAULT _ BYTE ; 
 + } else if ( paramTypes [ i ] . equals ( short . class ) ) { 
 + params [ i ] = DEFAULT _ SHORT ; 
 + } else if ( paramTypes [ i ] . equals ( int . class ) ) { 
 + params [ i ] = DEFAULT _ INT ; 
 + } else if ( paramTypes [ i ] . equals ( long . class ) ) { 
 + params [ i ] = DEFAULT _ LONG ; 
 + } else if ( paramTypes [ i ] . equals ( float . class ) ) { 
 + params [ i ] = DEFAULT _ FLOAT ; 
 + } else if ( paramTypes [ i ] . equals ( double . class ) ) { 
 + params [ i ] = DEFAULT _ DOUBLE ; 
 + } else { 
 + throw new IllegalArgumentException ( " Class type " + paramTypes [ i ] . getName ( ) + " not mapped to primitive default value . " ) ; 
 + } 
 } 
 - eventMethod . invoke ( comEventCallbackListener , margs . toArray ( ) ) ; 
 + } 
 + 
 + try { 
 + eventMethod . invoke ( comEventCallbackListener , params ) ; 
 } catch ( Exception e ) { 
 - List < String > decodedClassNames = new ArrayList < String > ( margs . size ( ) ) ; 
 - for ( Object o : margs ) { 
 + List < String > decodedClassNames = new ArrayList < String > ( params . length ) ; 
 + for ( Object o : params ) { 
 if ( o = = null ) { 
 decodedClassNames . add ( " NULL " ) ; 
 } else { 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 index 62dfeb4 . . 9b01908 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / COM / util / ProxyObject . java 
 @ @ - 595 , 8 + 595 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 
 	 	 / / Handle special - case for property - puts ! 
 	 	 if ( nType = = OleAuto . DISPATCH _ PROPERTYPUT ) { 
 - 	 	 	 dp . cNamedArgs = new UINT ( _ argsLen ) ; 
 - 	 	 	 dp . rgdispidNamedArgs = new DISPIDByReference ( OaIdl . DISPID _ PROPERTYPUT ) ; 
 + 	 	 	 dp . setRgdispidNamedArgs ( new DISPID [ ] { OaIdl . DISPID _ PROPERTYPUT } ) ; 
 	 	 } 
 
 / / Apply " fix " according to 
 @ @ - 631 , 9 + 630 , 7 @ @ public class ProxyObject implements InvocationHandler , com . sun . jna . platform . win3 
 
 	 	 / / Build DISPPARAMS 
 	 	 if ( _ argsLen > 0 ) { 
 - 	 	 	 dp . cArgs = new UINT ( _ args . length ) ; 
 - 	 	 	 / / make pointer of variant array 
 - 	 	 	 dp . rgvarg = new VariantArg . ByReference ( _ args ) ; 
 + 	 	 	 dp . setArgs ( _ args ) ; 
 
 	 	 	 / / write ' DISPPARAMS ' structure to memory 
 	 	 	 dp . write ( ) ; 
 diff - - git a / contrib / platform / src / com / sun / jna / platform / win32 / OleAuto . java b / contrib / platform / src / com / sun / jna / platform / win32 / OleAuto . java 
 index a7af894 . . e93aebf 100644 
 - - - a / contrib / platform / src / com / sun / jna / platform / win32 / OleAuto . java 
 + + + b / contrib / platform / src / com / sun / jna / platform / win32 / OleAuto . java 
 @ @ - 12 , 6 + 12 , 7 @ @ 
 * / 
 package com . sun . jna . platform . win32 ; 
 
 + import com . sun . jna . Memory ; 
 import java . util . List ; 
 
 import com . sun . jna . Native ; 
 @ @ - 19 , 7 + 20 , 7 @ @ import com . sun . jna . Pointer ; 
 import com . sun . jna . Structure ; 
 import com . sun . jna . WString ; 
 import com . sun . jna . platform . win32 . Guid . GUID ; 
 - import com . sun . jna . platform . win32 . OaIdl . DISPIDByReference ; 
 + import com . sun . jna . platform . win32 . OaIdl . DISPID ; 
 import com . sun . jna . platform . win32 . OaIdl . SAFEARRAY ; 
 import com . sun . jna . platform . win32 . OaIdl . SAFEARRAYBOUND ; 
 import com . sun . jna . platform . win32 . Variant . VARIANT ; 
 @ @ - 563 , 15 + 564 , 61 @ @ public interface OleAuto extends StdCallLibrary { 
 	 	 / * * The rgvarg . * / 
 	 	 public VariantArg . ByReference rgvarg ; 
 
 - 	 	 / * * The rgdispid named args . * / 
 - 	 	 public DISPIDByReference rgdispidNamedArgs ; 
 - 
 - 	 	 / * * The c args . * / 
 - 	 	 public UINT cArgs ; 
 - 
 - 	 	 / * * The c named args . * / 
 - 	 	 public UINT cNamedArgs ; 
 - 
 + / * * The rgdispid named args . * / 
 + public Pointer rgdispidNamedArgs = Pointer . NULL ; 
 + 
 + 	 	 / * * The c args . - use setArgs to update arguments * / 
 + 	 	 public UINT cArgs = new UINT ( 0 ) ; 
 + 
 + 	 	 / * * The c named args . - use setRgdispidNamedArgs to update named arguments map * / 
 + 	 	 public UINT cNamedArgs = new UINT ( 0 ) ; 
 + 
 + public DISPID [ ] getRgdispidNamedArgs ( ) { 
 + DISPID [ ] namedArgs = null ; 
 + int count = cNamedArgs . intValue ( ) ; 
 + if ( rgdispidNamedArgs ! = null & & count > 0 ) { 
 + int [ ] rawData = rgdispidNamedArgs . getIntArray ( 0 , count ) ; 
 + namedArgs = new DISPID [ count ] ; 
 + for ( int i = 0 ; i < count ; i + + ) { 
 + namedArgs [ i ] = new DISPID ( rawData [ i ] ) ; 
 + } 
 + } else { 
 + namedArgs = new DISPID [ 0 ] ; 
 + } 
 + return namedArgs ; 
 + } 
 + 
 + public void setRgdispidNamedArgs ( DISPID [ ] namedArgs ) { 
 + if ( namedArgs = = null ) { 
 + namedArgs = new DISPID [ 0 ] ; 
 + } 
 + cNamedArgs = new UINT ( namedArgs . length ) ; 
 + rgdispidNamedArgs = new Memory ( DISPID . SIZE * namedArgs . length ) ; 
 + int [ ] rawData = new int [ namedArgs . length ] ; 
 + for ( int i = 0 ; i < rawData . length ; i + + ) { 
 + rawData [ i ] = namedArgs [ i ] . intValue ( ) ; 
 + } 
 + rgdispidNamedArgs . write ( 0 , rawData , 0 , namedArgs . length ) ; 
 + } 
 + 
 + public VARIANT [ ] getArgs ( ) { 
 + if ( this . rgvarg ! = null ) { 
 + this . rgvarg . setArraySize ( cArgs . intValue ( ) ) ; 
 + return this . rgvarg . variantArg ; 
 + } else { 
 + return new VARIANT [ 0 ] ; 
 + } 
 + } 
 + 
 + public void setArgs ( VARIANT [ ] arguments ) { 
 + if ( arguments = = null ) { 
 + arguments = new VARIANT [ 0 ] ; 
 + } 
 + 
 + rgvarg = new VariantArg . ByReference ( arguments ) ; 
 + cArgs = new UINT ( arguments . length ) ; 
 + } 
 + 
 	 	 / * * 
 	 	 * Instantiates a new dispparams . 
 	 	 * / 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java 
 index 4652cb6 . . 7d54294 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / ComEventCallbacks _ Test . java 
 @ @ - 92 , 9 + 92 , 6 @ @ public class ComEventCallbacks _ Test { 
 public void after ( ) { 
 / / Shutdown Internet Explorer 
 DISPPARAMS . ByReference pDispParams = new DISPPARAMS . ByReference ( ) ; 
 - pDispParams . cArgs = new UINT ( 0 ) ; 
 - pDispParams . cNamedArgs = new UINT ( 0 ) ; 
 - pDispParams . rgvarg = null ; 
 VARIANT . ByReference pVarResult = new VARIANT . ByReference ( ) ; 
 IntByReference puArgErr = new IntByReference ( ) ; 
 EXCEPINFO . ByReference pExcepInfo = new EXCEPINFO . ByReference ( ) ; 
 @ @ - 196 , 27 + 193 , 24 @ @ public class ComEventCallbacks _ Test { 
 VARIANT . ByReference pVarResult , EXCEPINFO . ByReference pExcepInfo , 
 IntByReference puArgErr ) { 
 
 - / / @ toDo : Move setArraySize into invoke method 
 - if ( pDispParams . rgvarg ! = null & & pDispParams . cArgs . intValue ( ) > 0 ) { 
 - pDispParams . rgvarg . setArraySize ( pDispParams . cArgs . intValue ( ) ) ; 
 - } 
 + VARIANT [ ] arguments = pDispParams . getArgs ( ) ; 
 
 try { 
 switch ( dispIdMember . intValue ( ) ) { 
 case DISPID _ NavigateComplete2 : 
 navigateComplete2Called = true ; 
 / / URL ist passed as VARIANT $ ByReference 
 - VARIANT urlByRef = pDispParams . rgvarg . variantArg [ 0 ] ; 
 + VARIANT urlByRef = arguments [ 0 ] ; 
 navigateComplete2String = ( ( VARIANT ) urlByRef . getValue ( ) ) . stringValue ( ) ; 
 break ; 
 case DISPID _ BeforeNavigate2 : 
 - VARIANT Cancel = pDispParams . rgvarg . variantArg [ 0 ] ; 
 - VARIANT Headers = pDispParams . rgvarg . variantArg [ 1 ] ; 
 - VARIANT PostData = pDispParams . rgvarg . variantArg [ 2 ] ; 
 - VARIANT TargetFrameName = pDispParams . rgvarg . variantArg [ 3 ] ; 
 - VARIANT Flags = pDispParams . rgvarg . variantArg [ 4 ] ; 
 - VARIANT URL = pDispParams . rgvarg . variantArg [ 5 ] ; 
 - VARIANT pDisp = pDispParams . rgvarg . variantArg [ 6 ] ; 
 + VARIANT Cancel = arguments [ 0 ] ; 
 + VARIANT Headers = arguments [ 1 ] ; 
 + VARIANT PostData = arguments [ 2 ] ; 
 + VARIANT TargetFrameName = arguments [ 3 ] ; 
 + VARIANT Flags = arguments [ 4 ] ; 
 + VARIANT URL = arguments [ 5 ] ; 
 + VARIANT pDisp = arguments [ 6 ] ; 
 VARIANT _ BOOLByReference cancelValue = ( ( VARIANT _ BOOLByReference ) Cancel . getValue ( ) ) ; 
 if ( blockNavigation ) { 
 cancelValue . setValue ( Variant . VARIANT _ TRUE ) ; 
 @ @ - 280 , 11 + 274 , 8 @ @ public class ComEventCallbacks _ Test { 
 DISPPARAMS . ByReference pDispParams ; 
 
 pDispParams = new DISPPARAMS . ByReference ( ) ; 
 - pDispParams . cArgs = new UINT ( 1 ) ; 
 - pDispParams . cNamedArgs = new UINT ( 1 ) ; 
 - pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; 
 - pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( true ) ; 
 - pDispParams . rgdispidNamedArgs = new DISPIDByReference ( new DISPID ( OaIdl . DISPID _ PROPERTYPUT . intValue ( ) ) ) ; 
 + pDispParams . setArgs ( new VARIANT [ ] { new VARIANT ( true ) } ) ; 
 + pDispParams . setRgdispidNamedArgs ( new DISPID [ ] { OaIdl . DISPID _ PROPERTYPUT } ) ; 
 / / Visible - Prioperty 
 hr = ieDispatch . Invoke ( dispIdVisible . getValue ( ) , niid , lcid , propertyPutFlags , pDispParams , null , null , null ) ; 
 COMUtils . checkRC ( hr ) ; 
 @ @ - 319 , 11 + 310 , 9 @ @ public class ComEventCallbacks _ Test { 
 String navigateURL = " https : / / github . com / java - native - access / jna " ; 
 String blockedURL = " http : / / www . google . de " ; 
 
 + VARIANT [ ] arguments = new VARIANT [ ] { new VARIANT ( navigateURL ) } ; 
 pDispParams = new DISPPARAMS . ByReference ( ) ; 
 - pDispParams . cArgs = new UINT ( 1 ) ; 
 - pDispParams . cNamedArgs = new UINT ( 0 ) ; 
 - pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; 
 - pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( navigateURL ) ; 
 + pDispParams . setArgs ( arguments ) ; 
 hr = ieDispatch . Invoke ( dispIdNavigate . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; 
 COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 
 @ @ - 343 , 11 + 332 , 9 @ @ public class ComEventCallbacks _ Test { 
 listener . navigateComplete2String = null ; 
 listener . blockNavigation = true ; 
 
 + arguments = new VARIANT [ ] { new VARIANT ( blockedURL ) } ; 
 pDispParams = new DISPPARAMS . ByReference ( ) ; 
 - pDispParams . cArgs = new UINT ( 1 ) ; 
 - pDispParams . cNamedArgs = new UINT ( 0 ) ; 
 - pDispParams . rgvarg = new Variant . VariantArg . ByReference ( new VARIANT [ 1 ] ) ; 
 - pDispParams . rgvarg . variantArg [ 0 ] = new VARIANT ( blockedURL ) ; 
 + pDispParams . setArgs ( arguments ) ; 
 hr = ieDispatch . Invoke ( dispIdNavigate . getValue ( ) , niid , lcid , methodFlags , pDispParams , pVarResult , pExcepInfo , puArgErr ) ; 
 COMUtils . checkRC ( hr , pExcepInfo , puArgErr ) ; 
 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java 
 new file mode 100644 
 index 0000000 . . d47406e 
 - - - / dev / null 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / ComEventCallbacks2 _ Test . java 
 @ @ - 0 , 0 + 1 , 287 @ @ 
 + package com . sun . jna . platform . win32 . COM . util ; 
 + 
 + import com . sun . jna . Pointer ; 
 + import com . sun . jna . platform . win32 . COM . util . annotation . ComEventCallback ; 
 + import com . sun . jna . platform . win32 . COM . util . annotation . ComInterface ; 
 + import com . sun . jna . platform . win32 . COM . util . annotation . ComObject ; 
 + import com . sun . jna . platform . win32 . Ole32 ; 
 + import com . sun . jna . platform . win32 . Variant ; 
 + import org . junit . After ; 
 + import org . junit . Assert ; 
 + import org . junit . Before ; 
 + import org . junit . Test ; 
 + 
 + public class ComEventCallbacks2 _ Test { 
 + 
 + static { 
 + ClassLoader . getSystemClassLoader ( ) . setDefaultAssertionStatus ( true ) ; 
 + } 
 + 
 + Factory factory ; 
 + 
 + @ Before 
 + public void before ( ) { 
 + Ole32 . INSTANCE . CoInitializeEx ( Pointer . NULL , Ole32 . COINIT _ MULTITHREADED ) ; 
 + this . factory = new Factory ( ) ; 
 + } 
 + 
 + @ After 
 + public void after ( ) { 
 + this . factory . disposeAll ( ) ; 
 + Ole32 . INSTANCE . CoUninitialize ( ) ; 
 + } 
 + 
 + @ Test 
 + public void testFireCloseHandlerMatching ( ) throws InterruptedException { 
 + 
 + class ApplicatonEventsHandler extends AbstractComEventCallbackListener implements ApplicationEvents4ListenerMatching { 
 + 
 + public volatile boolean changed = false ; 
 + public volatile boolean beforeClose = false ; 
 + public volatile boolean error = false ; 
 + 
 + @ Override 
 + public void errorReceivingCallbackEvent ( String string , Exception excptn ) { 
 + if ( string . startsWith ( " No method found with " ) ) { 
 + return ; / / Normal case 
 + } 
 + System . out . println ( " Error : " + string ) ; 
 + error = true ; 
 + } 
 + 
 + public void DocumentChange ( ) { 
 + changed = true ; 
 + } 
 + 
 + public void DocumentBeforeClose ( IDispatch Doc , Variant . VARIANT Cancel ) { 
 + beforeClose = true ; 
 + } 
 + } 
 + 
 + ApplicatonEventsHandler handler = new ApplicatonEventsHandler ( ) ; 
 + 
 + Application appX = factory . createObject ( Application . class ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + IComEventCallbackCookie cookie = appX . advise ( ApplicationEvents4ListenerMatching . class , handler ) ; 
 + 
 + IDispatch doc = appX . getProperty ( IDispatch . class , " Documents " ) . invokeMethod ( IDispatch . class , " Add " ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + doc . getProperty ( IDispatch . class , " Paragraphs " ) 
 + . invokeMethod ( IDispatch . class , " Item " , 1 ) 
 + . getProperty ( IDispatch . class , " Range " ) 
 + . setProperty ( " Text " , " Test text " ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + doc . invokeMethod ( Void . class , " Close " , Boolean . FALSE ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + appX . unadvise ( ApplicationEvents4ListenerMatching . class , cookie ) ; 
 + 
 + appX . invokeMethod ( Void . class , " Quit " , Boolean . FALSE ) ; 
 + 
 + Assert . assertTrue ( handler . changed ) ; 
 + Assert . assertTrue ( handler . beforeClose ) ; 
 + Assert . assertFalse ( handler . error ) ; 
 + } 
 + 
 + @ Test 
 + public void testFireCloseHandlerLessArguments ( ) throws InterruptedException { 
 + 
 + class ApplicatonEventsHandler extends AbstractComEventCallbackListener implements ApplicationEvents4ListenerLessArguments { 
 + 
 + public volatile boolean changed = false ; 
 + public volatile boolean beforeClose = false ; 
 + public volatile boolean error = false ; 
 + 
 + @ Override 
 + public void errorReceivingCallbackEvent ( String string , Exception excptn ) { 
 + if ( string . startsWith ( " No method found with " ) ) { 
 + return ; / / Normal case 
 + } 
 + System . out . println ( " Error : " + string ) ; 
 + if ( excptn ! = null ) { 
 + System . out . println ( excptn . getMessage ( ) ) ; 
 + excptn . printStackTrace ( System . out ) ; 
 + } 
 + error = true ; 
 + } 
 + 
 + public void DocumentChange ( ) { 
 + changed = true ; 
 + } 
 + 
 + public void DocumentBeforeClose ( ) { 
 + beforeClose = true ; 
 + } 
 + } 
 + 
 + ApplicatonEventsHandler handler = new ApplicatonEventsHandler ( ) ; 
 + 
 + Application appX = factory . createObject ( Application . class ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + IComEventCallbackCookie cookie = appX . advise ( ApplicationEvents4ListenerLessArguments . class , handler ) ; 
 + 
 + IDispatch doc = appX . getProperty ( IDispatch . class , " Documents " ) . invokeMethod ( IDispatch . class , " Add " ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + doc . getProperty ( IDispatch . class , " Paragraphs " ) 
 + . invokeMethod ( IDispatch . class , " Item " , 1 ) 
 + . getProperty ( IDispatch . class , " Range " ) 
 + . setProperty ( " Text " , " Test text " ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + doc . invokeMethod ( Void . class , " Close " , Boolean . FALSE ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + appX . unadvise ( ApplicationEvents4ListenerMatching . class , cookie ) ; 
 + 
 + appX . invokeMethod ( Void . class , " Quit " , Boolean . FALSE ) ; 
 + 
 + Assert . assertTrue ( handler . changed ) ; 
 + Assert . assertTrue ( handler . beforeClose ) ; 
 + Assert . assertFalse ( handler . error ) ; 
 + } 
 + 
 + @ Test 
 + public void testFireCloseHandlerMoreArguments ( ) throws InterruptedException { 
 + 
 + class ApplicatonEventsHandler extends AbstractComEventCallbackListener implements ApplicationEvents4ListenerMoreArguments { 
 + 
 + public volatile boolean changed = false ; 
 + public volatile boolean beforeClose = false ; 
 + public volatile boolean error = false ; 
 + public volatile boolean fakeArgumentObjectWasNull = false ; 
 + public volatile boolean fakeArgumentIntWas0 = false ; 
 + 
 + @ Override 
 + public void errorReceivingCallbackEvent ( String string , Exception excptn ) { 
 + if ( string . startsWith ( " No method found with " ) ) { 
 + return ; / / Normal case 
 + } 
 + System . out . println ( " Error : " + string ) ; 
 + if ( excptn ! = null ) { 
 + System . out . println ( excptn . getMessage ( ) ) ; 
 + excptn . printStackTrace ( System . out ) ; 
 + } 
 + error = true ; 
 + } 
 + 
 + public void DocumentChange ( ) { 
 + changed = true ; 
 + } 
 + 
 + public void DocumentBeforeClose ( IDispatch Doc , Variant . VARIANT Cancel , Boolean fakeArgumentObject , int fakeArgumentInt ) { 
 + beforeClose = true ; 
 + fakeArgumentObjectWasNull = fakeArgumentObject = = null ; 
 + fakeArgumentIntWas0 = fakeArgumentInt = = 0 ; 
 + } 
 + } 
 + 
 + ApplicatonEventsHandler handler = new ApplicatonEventsHandler ( ) ; 
 + 
 + Application appX = factory . createObject ( Application . class ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + IComEventCallbackCookie cookie = appX . advise ( ApplicationEvents4ListenerMoreArguments . class , handler ) ; 
 + 
 + IDispatch doc = appX . getProperty ( IDispatch . class , " Documents " ) . invokeMethod ( IDispatch . class , " Add " ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + doc . getProperty ( IDispatch . class , " Paragraphs " ) 
 + . invokeMethod ( IDispatch . class , " Item " , 1 ) 
 + . getProperty ( IDispatch . class , " Range " ) 
 + . setProperty ( " Text " , " Test text " ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + doc . invokeMethod ( Void . class , " Close " , Boolean . FALSE ) ; 
 + 
 + Thread . sleep ( 500 ) ; 
 + 
 + appX . unadvise ( ApplicationEvents4ListenerMatching . class , cookie ) ; 
 + 
 + appX . invokeMethod ( Void . class , " Quit " , Boolean . FALSE ) ; 
 + 
 + Assert . assertTrue ( handler . changed ) ; 
 + Assert . assertTrue ( handler . beforeClose ) ; 
 + Assert . assertFalse ( handler . error ) ; 
 + Assert . assertTrue ( handler . fakeArgumentIntWas0 ) ; 
 + Assert . assertTrue ( handler . fakeArgumentObjectWasNull ) ; 
 + } 
 + 
 + 
 + @ ComInterface ( iid = " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) 
 + interface ApplicationEvents4ListenerMatching { 
 + 
 + / * * 
 + * < p > 
 + * id ( 0x3 ) < / p > 
 + * / 
 + @ ComEventCallback ( dispid = 0x3 ) 
 + void DocumentChange ( ) ; 
 + 
 + / * * 
 + * < p > 
 + * id ( 0x6 ) < / p > 
 + * / 
 + @ ComEventCallback ( dispid = 0x6 ) 
 + void DocumentBeforeClose ( IDispatch Doc , Variant . VARIANT Cancel ) ; 
 + } 
 + 
 + @ ComInterface ( iid = " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) 
 + interface ApplicationEvents4ListenerLessArguments { 
 + 
 + / * * 
 + * < p > 
 + * id ( 0x3 ) < / p > 
 + * / 
 + @ ComEventCallback ( dispid = 0x3 ) 
 + void DocumentChange ( ) ; 
 + 
 + / * * 
 + * < p > 
 + * id ( 0x6 ) < / p > 
 + * / 
 + @ ComEventCallback ( dispid = 0x6 ) 
 + void DocumentBeforeClose ( ) ; 
 + } 
 + 
 + @ ComInterface ( iid = " { 00020A01 - 0000 - 0000 - C000 - 000000000046 } " ) 
 + interface ApplicationEvents4ListenerMoreArguments { 
 + 
 + / * * 
 + * < p > 
 + * id ( 0x3 ) < / p > 
 + * / 
 + @ ComEventCallback ( dispid = 0x3 ) 
 + void DocumentChange ( ) ; 
 + 
 + / * * 
 + * < p > 
 + * id ( 0x6 ) < / p > 
 + * / 
 + @ ComEventCallback ( dispid = 0x6 ) 
 + void DocumentBeforeClose ( IDispatch Doc , Variant . VARIANT Cancel , Boolean fakeArgumentObject , int fakeArgumentInt ) ; 
 + } 
 + 
 + @ ComObject ( clsId = " { 000209FF - 0000 - 0000 - C000 - 000000000046 } " ) 
 + public interface Application extends 
 + IDispatch , 
 + IConnectionPoint , 
 + IUnknown { 
 + 
 + } 
 + } 
 diff - - git a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java 
 index 363cb7f . . b375a91 100644 
 - - - a / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java 
 + + + b / contrib / platform / test / com / sun / jna / platform / win32 / COM / util / HybdridCOMInvocationTest . java 
 @ @ - 129 , 12 + 129 , 8 @ @ public class HybdridCOMInvocationTest { 
 WORD wFlagsCombined = new WinDef . WORD ( OleAuto . DISPATCH _ METHOD | OleAuto . DISPATCH _ PROPERTYGET ) ; 
 
 OleAuto . DISPPARAMS . ByReference pDispParams = new OleAuto . DISPPARAMS . ByReference ( ) ; 
 - VARIANT [ ] params = new VARIANT [ 1 ] ; 
 - params [ 0 ] = new VARIANT ( 1f ) ; 
 - pDispParams . cArgs = new UINT ( 1 ) ; 
 - pDispParams . cNamedArgs = new UINT ( 0 ) ; 
 - pDispParams . rgvarg = new Variant . VariantArg . ByReference ( params ) ; 
 - pDispParams . rgdispidNamedArgs = new OaIdl . DISPIDByReference ( ) ; 
 + VARIANT [ ] params = new VARIANT [ ] { new VARIANT ( 1f ) } ; 
 + pDispParams . setArgs ( params ) ; 
 
 / / Call InchesToPoints as a method 
 hr = dp . Invoke ( dispId , new REFIID ( Guid . IID _ NULL ) , LOCALE _ SYSTEM _ DEFAULT , wFlagsMethod , pDispParams , result , pExcepInfo , puArgErr ) ;

NEAREST DIFF:
ELIMINATEDSENTENCE
