BLEU SCORE: 0.01146212677558107

TEST MSG: Use platform native encoding , not UTF - 8 , by default
GENERATED MSG: Ensure that temporary library files extracted from resource path are cleaned up , even in case something goes wrong while actually opening the library .

TEST DIFF (one line): diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java <nl> index 1b10bb3 . . b706837 100644 <nl> - - - a / src / com / sun / jna / Native . java <nl> + + + b / src / com / sun / jna / Native . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import java . net . URL ; <nl> import java . net . URLClassLoader ; <nl> import java . nio . Buffer ; <nl> import java . nio . ByteBuffer ; <nl> + import java . nio . charset . Charset ; <nl> import java . security . AccessController ; <nl> import java . security . PrivilegedAction ; <nl> import java . util . ArrayList ; <nl> @ @ - 95 , 7 + 96 , 7 @ @ import com . sun . jna . Structure . FFIType ; <nl> * / <nl> public final class Native implements Version { <nl> <nl> - public static final String DEFAULT _ ENCODING = " utf8 " ; <nl> + public static final String DEFAULT _ ENCODING = Charset . defaultCharset ( ) . name ( ) ; <nl> public static boolean DEBUG _ LOAD = Boolean . getBoolean ( " jna . debug _ load " ) ; <nl> public static boolean DEBUG _ JNA _ LOAD = Boolean . getBoolean ( " jna . debug _ load . jna " ) ; <nl> <nl> diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java <nl> index 164d033 . . cfc5fa1 100644 <nl> - - - a / test / com / sun / jna / NativeTest . java <nl> + + + b / test / com / sun / jna / NativeTest . java <nl> @ @ - 131 , 18 + 131 , 23 @ @ public class NativeTest extends TestCase { <nl> public void testDefaultStringEncoding ( ) throws Exception { <nl> final String UNICODE = " \ u0444 \ u043b \ u0441 \ u0432 \ u0443 " ; <nl> final String UNICODEZ = UNICODE + " \ 0more stuff " ; <nl> - byte [ ] utf8 = Native . getBytes ( UNICODE ) ; <nl> + byte [ ] nativeEnc = Native . getBytes ( UNICODE ) ; <nl> byte [ ] expected = UNICODE . getBytes ( Native . DEFAULT _ ENCODING ) ; <nl> - for ( int i = 0 ; i < Math . min ( utf8 . length , expected . length ) ; i + + ) { <nl> + for ( int i = 0 ; i < Math . min ( nativeEnc . length , expected . length ) ; i + + ) { <nl> assertEquals ( " Improperly encoded at " + i , <nl> - expected [ i ] , utf8 [ i ] ) ; <nl> + expected [ i ] , nativeEnc [ i ] ) ; <nl> } <nl> - assertEquals ( " Wrong number of encoded characters " , expected . length , utf8 . length ) ; <nl> - String result = Native . toString ( utf8 ) ; <nl> - assertEquals ( " Improperly decoded " , UNICODE , result ) ; <nl> - <nl> + assertEquals ( " Wrong number of encoded characters " , expected . length , nativeEnc . length ) ; <nl> + String result = Native . toString ( nativeEnc ) ; <nl> + / / The native encoding might not support our test string ; the result <nl> + / / will then be all ' ? ' <nl> + if ( ! result . matches ( " ^ \ \ ? + $ " ) ) { <nl> + assertEquals ( " Improperly decoded " , UNICODE , result ) ; <nl> + } <nl> + / / When the native encoding doesn ' t support our test string , we can only <nl> + / / usefully compare the lengths . <nl> assertEquals ( " Should truncate bytes at NUL terminator " , <nl> - UNICODE , Native . toString ( UNICODEZ . getBytes ( Native . DEFAULT _ ENCODING ) ) ) ; <nl> + UNICODE . length ( ) , Native . toString ( UNICODEZ . getBytes ( Native . DEFAULT _ ENCODING ) ) . length ( ) ) ; <nl> } <nl> <nl> public void testCustomizeDefaultStringEncoding ( ) {
NEAREST DIFF (one line): ELIMINATEDSENTENCE

TEST DIFF:
diff - - git a / src / com / sun / jna / Native . java b / src / com / sun / jna / Native . java 
 index 1b10bb3 . . b706837 100644 
 - - - a / src / com / sun / jna / Native . java 
 + + + b / src / com / sun / jna / Native . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import java . net . URL ; 
 import java . net . URLClassLoader ; 
 import java . nio . Buffer ; 
 import java . nio . ByteBuffer ; 
 + import java . nio . charset . Charset ; 
 import java . security . AccessController ; 
 import java . security . PrivilegedAction ; 
 import java . util . ArrayList ; 
 @ @ - 95 , 7 + 96 , 7 @ @ import com . sun . jna . Structure . FFIType ; 
 * / 
 public final class Native implements Version { 
 
 - public static final String DEFAULT _ ENCODING = " utf8 " ; 
 + public static final String DEFAULT _ ENCODING = Charset . defaultCharset ( ) . name ( ) ; 
 public static boolean DEBUG _ LOAD = Boolean . getBoolean ( " jna . debug _ load " ) ; 
 public static boolean DEBUG _ JNA _ LOAD = Boolean . getBoolean ( " jna . debug _ load . jna " ) ; 
 
 diff - - git a / test / com / sun / jna / NativeTest . java b / test / com / sun / jna / NativeTest . java 
 index 164d033 . . cfc5fa1 100644 
 - - - a / test / com / sun / jna / NativeTest . java 
 + + + b / test / com / sun / jna / NativeTest . java 
 @ @ - 131 , 18 + 131 , 23 @ @ public class NativeTest extends TestCase { 
 public void testDefaultStringEncoding ( ) throws Exception { 
 final String UNICODE = " \ u0444 \ u043b \ u0441 \ u0432 \ u0443 " ; 
 final String UNICODEZ = UNICODE + " \ 0more stuff " ; 
 - byte [ ] utf8 = Native . getBytes ( UNICODE ) ; 
 + byte [ ] nativeEnc = Native . getBytes ( UNICODE ) ; 
 byte [ ] expected = UNICODE . getBytes ( Native . DEFAULT _ ENCODING ) ; 
 - for ( int i = 0 ; i < Math . min ( utf8 . length , expected . length ) ; i + + ) { 
 + for ( int i = 0 ; i < Math . min ( nativeEnc . length , expected . length ) ; i + + ) { 
 assertEquals ( " Improperly encoded at " + i , 
 - expected [ i ] , utf8 [ i ] ) ; 
 + expected [ i ] , nativeEnc [ i ] ) ; 
 } 
 - assertEquals ( " Wrong number of encoded characters " , expected . length , utf8 . length ) ; 
 - String result = Native . toString ( utf8 ) ; 
 - assertEquals ( " Improperly decoded " , UNICODE , result ) ; 
 - 
 + assertEquals ( " Wrong number of encoded characters " , expected . length , nativeEnc . length ) ; 
 + String result = Native . toString ( nativeEnc ) ; 
 + / / The native encoding might not support our test string ; the result 
 + / / will then be all ' ? ' 
 + if ( ! result . matches ( " ^ \ \ ? + $ " ) ) { 
 + assertEquals ( " Improperly decoded " , UNICODE , result ) ; 
 + } 
 + / / When the native encoding doesn ' t support our test string , we can only 
 + / / usefully compare the lengths . 
 assertEquals ( " Should truncate bytes at NUL terminator " , 
 - UNICODE , Native . toString ( UNICODEZ . getBytes ( Native . DEFAULT _ ENCODING ) ) ) ; 
 + UNICODE . length ( ) , Native . toString ( UNICODEZ . getBytes ( Native . DEFAULT _ ENCODING ) ) . length ( ) ) ; 
 } 
 
 public void testCustomizeDefaultStringEncoding ( ) {

NEAREST DIFF:
ELIMINATEDSENTENCE
