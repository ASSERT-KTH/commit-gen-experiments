BLEU SCORE: 0.018738883683389617

TEST MSG: DimensionManager . registerDimension now returns the DimensionType instance for convienance .
GENERATED MSG: Avoid copying Forge Registry keys , values , and entries

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> index 8a73366 . . 19ce39c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> @ @ - 87 , 7 + 87 , 7 @ @ public class DimensionManager <nl> * @ param type Dimension Type . <nl> * @ param data Configuration data for this dimension , passed into <nl> * / <nl> - public static void registerDimension ( ResourceLocation name , ModDimension type , PacketBuffer data ) <nl> + public static DimensionType registerDimension ( ResourceLocation name , ModDimension type , PacketBuffer data ) <nl> { <nl> Validate . notNull ( name , " Can not register a dimesnion with null name " ) ; <nl> Validate . isTrue ( ! REGISTRY . func _ 212607 _ c ( name ) , " Dimension : " + name + " Already registered " ) ; <nl> @ @ - 105 , 6 + 105 , 7 @ @ public class DimensionManager <nl> DimensionType instance = new DimensionType ( id , " " , name . getNamespace ( ) + " / " + name . getPath ( ) , type . getFactory ( ) , type , data ) ; <nl> REGISTRY . register ( id , name , instance ) ; <nl> LOGGER . info ( DIMMGR , " Registered dimension { } of type { } and id { } " , name . toString ( ) , type . getRegistryName ( ) . toString ( ) , id ) ; <nl> + return instance ; <nl> } <nl> <nl> / * * <nl> @ @ - 170 , 7 + 171 , 7 @ @ public class DimensionManager <nl> dimensions . remove ( id ) ; <nl> } <nl> <nl> - public static void registerDimensionInternal ( int id , ResourceLocation name , ModDimension type , PacketBuffer data ) <nl> + public static DimensionType registerDimensionInternal ( int id , ResourceLocation name , ModDimension type , PacketBuffer data ) <nl> { <nl> Validate . notNull ( name , " Can not register a dimesnion with null name " ) ; <nl> Validate . notNull ( type , " Can not register a null dimension type " ) ; <nl> @ @ - 180 , 6 + 181 , 7 @ @ public class DimensionManager <nl> DimensionType instance = new DimensionType ( id , " " , name . getNamespace ( ) + " / " + name . getPath ( ) , type . getFactory ( ) , type , data ) ; <nl> REGISTRY . register ( id , name , instance ) ; <nl> LOGGER . info ( DIMMGR , " Registered dimension { } of type { } and id { } " , name . toString ( ) , type . getRegistryName ( ) . toString ( ) , id ) ; <nl> + return instance ; <nl> } <nl> <nl> @ SuppressWarnings ( " deprecation " ) <nl> diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> index 5842be2 . . d764fe5 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> @ @ - 191 , 6 + 191 , 12 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> } <nl> <nl> @ Override <nl> + public boolean isEmpty ( ) <nl> + { <nl> + return this . names . isEmpty ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public V getValue ( ResourceLocation key ) <nl> { <nl> V ret = this . names . get ( key ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java <nl> index fd6e0a1 . . e466c16 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java <nl> @ @ - 44 , 6 + 44 , 7 @ @ public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterab <nl> <nl> boolean containsKey ( ResourceLocation key ) ; <nl> boolean containsValue ( V value ) ; <nl> + boolean isEmpty ( ) ; <nl> <nl> @ Nullable V getValue ( ResourceLocation key ) ; <nl> @ Nullable ResourceLocation getKey ( V value ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java <nl> index 4a664cd . . 2f922a8 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java <nl> @ @ - 133 , 6 + 133 , 12 @ @ class NamespacedDefaultedWrapper < V extends IForgeRegistryEntry < V > > extends Regis <nl> return this . delegate . getDefaultKey ( ) ; <nl> } <nl> <nl> + @ Override <nl> + public boolean isEmpty ( ) <nl> + { <nl> + return this . delegate . isEmpty ( ) ; <nl> + } <nl> + <nl> / / internal <nl> @ Override <nl> public void lock ( ) { this . locked = true ; } <nl> diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java <nl> index f27cfd0 . . 191979b 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java <nl> @ @ - 121 , 6 + 121 , 12 @ @ class NamespacedWrapper < V extends IForgeRegistryEntry < V > > extends RegistryNamesp <nl> return values . stream ( ) . skip ( random . nextInt ( values . size ( ) ) ) . findFirst ( ) . orElse ( null ) ; <nl> } <nl> <nl> + @ Override <nl> + public boolean isEmpty ( ) <nl> + { <nl> + return this . delegate . isEmpty ( ) ; <nl> + } <nl> + <nl> / / internal <nl> @ Override <nl> public void lock ( ) { this . locked = true ; }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 805d304 . . 5b3251f 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 494 , 7 + 494 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> <nl> private static void registerAllBiomesAndGenerateEvents ( ) <nl> { <nl> - for ( Biome biome : ForgeRegistries . BIOMES . getValues ( ) ) <nl> + for ( Biome biome : ForgeRegistries . BIOMES . getValuesCollection ( ) ) <nl> { <nl> if ( biome . decorator instanceof DeferredBiomeDecorator ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> index a63e625 . . bfb7dc3 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> <nl> + import javax . annotation . Nonnull ; <nl> import javax . annotation . Nullable ; <nl> <nl> import org . apache . commons . lang3 . Validate ; <nl> @ @ - 188 , 19 + 189 , 30 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> @ Override <nl> public Set < ResourceLocation > getKeys ( ) <nl> { <nl> - return ImmutableSet . copyOf ( this . names . keySet ( ) ) ; <nl> + return Collections . unmodifiableSet ( this . names . keySet ( ) ) ; <nl> } <nl> <nl> + / * * <nl> + * @ deprecated use { @ link # getValuesCollection } to avoid copying <nl> + * / <nl> + @ Deprecated <nl> @ Override <nl> public List < V > getValues ( ) <nl> { <nl> return ImmutableList . copyOf ( this . names . values ( ) ) ; <nl> } <nl> <nl> + @ Nonnull <nl> + @ Override <nl> + public Collection < V > getValuesCollection ( ) <nl> + { <nl> + return Collections . unmodifiableSet ( this . names . values ( ) ) ; <nl> + } <nl> + <nl> @ Override <nl> public Set < Entry < ResourceLocation , V > > getEntries ( ) <nl> { <nl> - return ImmutableSet . copyOf ( this . names . entrySet ( ) ) ; <nl> + return Collections . unmodifiableSet ( this . names . entrySet ( ) ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> diff - - git a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java <nl> index a2bd3b7 . . 767c777 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package net . minecraftforge . registries ; <nl> <nl> + import java . util . Collection ; <nl> import java . util . List ; <nl> import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> @ @ - 48 , 7 + 49 , 13 @ @ public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterab <nl> @ Nullable ResourceLocation getKey ( V value ) ; <nl> <nl> @ Nonnull Set < ResourceLocation > getKeys ( ) ; <nl> + / * * @ deprecated use { @ link # getValuesCollection } * / <nl> + @ Deprecated / / TODO : remove in 1 . 13 <nl> @ Nonnull List < V > getValues ( ) ; <nl> + @ Nonnull <nl> + default Collection < V > getValuesCollection ( ) { / / TODO rename this to getValues in 1 . 13 <nl> + return getValues ( ) ; <nl> + } <nl> @ Nonnull Set < Entry < ResourceLocation , V > > getEntries ( ) ; <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java <nl> index de4e5fb . . 5257083 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package net . minecraftforge . registries ; <nl> <nl> + import java . util . Collection ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 104 , 10 + 105 , 8 @ @ class NamespacedDefaultedWrapper < V extends IForgeRegistryEntry < V > > extends Regis <nl> @ Nullable <nl> public V getRandomObject ( Random random ) <nl> { <nl> - List < V > lst = this . delegate . getValues ( ) ; <nl> - if ( lst . isEmpty ( ) ) <nl> - return null ; <nl> - return lst . get ( random . nextInt ( lst . size ( ) ) ) ; <nl> + Collection < V > values = this . delegate . getValuesCollection ( ) ; <nl> + return values . stream ( ) . skip ( random . nextInt ( values . size ( ) ) ) . findFirst ( ) . orElse ( null ) ; <nl> } <nl> <nl> / / internal <nl> diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java <nl> index b501509 . . 1580263 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java <nl> @ @ - 1 , 5 + 1 , 7 @ @ <nl> package net . minecraftforge . registries ; <nl> <nl> + import java . util . ArrayList ; <nl> + import java . util . Collection ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 97 , 10 + 99 , 8 @ @ class NamespacedWrapper < V extends IForgeRegistryEntry < V > > extends RegistryNamesp <nl> @ Nullable <nl> public V getRandomObject ( Random random ) <nl> { <nl> - List < V > lst = this . delegate . getValues ( ) ; <nl> - if ( lst . isEmpty ( ) ) <nl> - return null ; <nl> - return lst . get ( random . nextInt ( lst . size ( ) ) ) ; <nl> + Collection < V > values = this . delegate . getValuesCollection ( ) ; <nl> + return values . stream ( ) . skip ( random . nextInt ( values . size ( ) ) ) . findFirst ( ) . orElse ( null ) ; <nl> } <nl> <nl> / / internal <nl> diff - - git a / src / test / java / net / minecraftforge / debug / FluidHandlerTest . java b / src / test / java / net / minecraftforge / debug / FluidHandlerTest . java <nl> index e1cebe1 . . 48a7301 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / FluidHandlerTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / FluidHandlerTest . java <nl> @ @ - 130 , 7 + 130 , 7 @ @ public class FluidHandlerTest <nl> private static List < ItemStack > getAllItems ( ) <nl> { <nl> NonNullList < ItemStack > list = NonNullList . create ( ) ; <nl> - for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) <nl> + for ( Item item : ForgeRegistries . ITEMS . getValuesCollection ( ) ) <nl> { <nl> for ( CreativeTabs tab : item . getCreativeTabs ( ) ) <nl> {

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 index 8a73366 . . 19ce39c 100644 
 - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java 
 + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 @ @ - 87 , 7 + 87 , 7 @ @ public class DimensionManager 
 * @ param type Dimension Type . 
 * @ param data Configuration data for this dimension , passed into 
 * / 
 - public static void registerDimension ( ResourceLocation name , ModDimension type , PacketBuffer data ) 
 + public static DimensionType registerDimension ( ResourceLocation name , ModDimension type , PacketBuffer data ) 
 { 
 Validate . notNull ( name , " Can not register a dimesnion with null name " ) ; 
 Validate . isTrue ( ! REGISTRY . func _ 212607 _ c ( name ) , " Dimension : " + name + " Already registered " ) ; 
 @ @ - 105 , 6 + 105 , 7 @ @ public class DimensionManager 
 DimensionType instance = new DimensionType ( id , " " , name . getNamespace ( ) + " / " + name . getPath ( ) , type . getFactory ( ) , type , data ) ; 
 REGISTRY . register ( id , name , instance ) ; 
 LOGGER . info ( DIMMGR , " Registered dimension { } of type { } and id { } " , name . toString ( ) , type . getRegistryName ( ) . toString ( ) , id ) ; 
 + return instance ; 
 } 
 
 / * * 
 @ @ - 170 , 7 + 171 , 7 @ @ public class DimensionManager 
 dimensions . remove ( id ) ; 
 } 
 
 - public static void registerDimensionInternal ( int id , ResourceLocation name , ModDimension type , PacketBuffer data ) 
 + public static DimensionType registerDimensionInternal ( int id , ResourceLocation name , ModDimension type , PacketBuffer data ) 
 { 
 Validate . notNull ( name , " Can not register a dimesnion with null name " ) ; 
 Validate . notNull ( type , " Can not register a null dimension type " ) ; 
 @ @ - 180 , 6 + 181 , 7 @ @ public class DimensionManager 
 DimensionType instance = new DimensionType ( id , " " , name . getNamespace ( ) + " / " + name . getPath ( ) , type . getFactory ( ) , type , data ) ; 
 REGISTRY . register ( id , name , instance ) ; 
 LOGGER . info ( DIMMGR , " Registered dimension { } of type { } and id { } " , name . toString ( ) , type . getRegistryName ( ) . toString ( ) , id ) ; 
 + return instance ; 
 } 
 
 @ SuppressWarnings ( " deprecation " ) 
 diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 index 5842be2 . . d764fe5 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 @ @ - 191 , 6 + 191 , 12 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 } 
 
 @ Override 
 + public boolean isEmpty ( ) 
 + { 
 + return this . names . isEmpty ( ) ; 
 + } 
 + 
 + @ Override 
 public V getValue ( ResourceLocation key ) 
 { 
 V ret = this . names . get ( key ) ; 
 diff - - git a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java 
 index fd6e0a1 . . e466c16 100644 
 - - - a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java 
 @ @ - 44 , 6 + 44 , 7 @ @ public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterab 
 
 boolean containsKey ( ResourceLocation key ) ; 
 boolean containsValue ( V value ) ; 
 + boolean isEmpty ( ) ; 
 
 @ Nullable V getValue ( ResourceLocation key ) ; 
 @ Nullable ResourceLocation getKey ( V value ) ; 
 diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java 
 index 4a664cd . . 2f922a8 100644 
 - - - a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java 
 + + + b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java 
 @ @ - 133 , 6 + 133 , 12 @ @ class NamespacedDefaultedWrapper < V extends IForgeRegistryEntry < V > > extends Regis 
 return this . delegate . getDefaultKey ( ) ; 
 } 
 
 + @ Override 
 + public boolean isEmpty ( ) 
 + { 
 + return this . delegate . isEmpty ( ) ; 
 + } 
 + 
 / / internal 
 @ Override 
 public void lock ( ) { this . locked = true ; } 
 diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java 
 index f27cfd0 . . 191979b 100644 
 - - - a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java 
 + + + b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java 
 @ @ - 121 , 6 + 121 , 12 @ @ class NamespacedWrapper < V extends IForgeRegistryEntry < V > > extends RegistryNamesp 
 return values . stream ( ) . skip ( random . nextInt ( values . size ( ) ) ) . findFirst ( ) . orElse ( null ) ; 
 } 
 
 + @ Override 
 + public boolean isEmpty ( ) 
 + { 
 + return this . delegate . isEmpty ( ) ; 
 + } 
 + 
 / / internal 
 @ Override 
 public void lock ( ) { this . locked = true ; }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 805d304 . . 5b3251f 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 494 , 7 + 494 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 
 private static void registerAllBiomesAndGenerateEvents ( ) 
 { 
 - for ( Biome biome : ForgeRegistries . BIOMES . getValues ( ) ) 
 + for ( Biome biome : ForgeRegistries . BIOMES . getValuesCollection ( ) ) 
 { 
 if ( biome . decorator instanceof DeferredBiomeDecorator ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 index a63e625 . . bfb7dc3 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 
 + import javax . annotation . Nonnull ; 
 import javax . annotation . Nullable ; 
 
 import org . apache . commons . lang3 . Validate ; 
 @ @ - 188 , 19 + 189 , 30 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 @ Override 
 public Set < ResourceLocation > getKeys ( ) 
 { 
 - return ImmutableSet . copyOf ( this . names . keySet ( ) ) ; 
 + return Collections . unmodifiableSet ( this . names . keySet ( ) ) ; 
 } 
 
 + / * * 
 + * @ deprecated use { @ link # getValuesCollection } to avoid copying 
 + * / 
 + @ Deprecated 
 @ Override 
 public List < V > getValues ( ) 
 { 
 return ImmutableList . copyOf ( this . names . values ( ) ) ; 
 } 
 
 + @ Nonnull 
 + @ Override 
 + public Collection < V > getValuesCollection ( ) 
 + { 
 + return Collections . unmodifiableSet ( this . names . values ( ) ) ; 
 + } 
 + 
 @ Override 
 public Set < Entry < ResourceLocation , V > > getEntries ( ) 
 { 
 - return ImmutableSet . copyOf ( this . names . entrySet ( ) ) ; 
 + return Collections . unmodifiableSet ( this . names . entrySet ( ) ) ; 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 diff - - git a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java 
 index a2bd3b7 . . 767c777 100644 
 - - - a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package net . minecraftforge . registries ; 
 
 + import java . util . Collection ; 
 import java . util . List ; 
 import java . util . Map . Entry ; 
 import java . util . Set ; 
 @ @ - 48 , 7 + 49 , 13 @ @ public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterab 
 @ Nullable ResourceLocation getKey ( V value ) ; 
 
 @ Nonnull Set < ResourceLocation > getKeys ( ) ; 
 + / * * @ deprecated use { @ link # getValuesCollection } * / 
 + @ Deprecated / / TODO : remove in 1 . 13 
 @ Nonnull List < V > getValues ( ) ; 
 + @ Nonnull 
 + default Collection < V > getValuesCollection ( ) { / / TODO rename this to getValues in 1 . 13 
 + return getValues ( ) ; 
 + } 
 @ Nonnull Set < Entry < ResourceLocation , V > > getEntries ( ) ; 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java 
 index de4e5fb . . 5257083 100644 
 - - - a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java 
 + + + b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package net . minecraftforge . registries ; 
 
 + import java . util . Collection ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 104 , 10 + 105 , 8 @ @ class NamespacedDefaultedWrapper < V extends IForgeRegistryEntry < V > > extends Regis 
 @ Nullable 
 public V getRandomObject ( Random random ) 
 { 
 - List < V > lst = this . delegate . getValues ( ) ; 
 - if ( lst . isEmpty ( ) ) 
 - return null ; 
 - return lst . get ( random . nextInt ( lst . size ( ) ) ) ; 
 + Collection < V > values = this . delegate . getValuesCollection ( ) ; 
 + return values . stream ( ) . skip ( random . nextInt ( values . size ( ) ) ) . findFirst ( ) . orElse ( null ) ; 
 } 
 
 / / internal 
 diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java 
 index b501509 . . 1580263 100644 
 - - - a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java 
 + + + b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package net . minecraftforge . registries ; 
 
 + import java . util . ArrayList ; 
 + import java . util . Collection ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 97 , 10 + 99 , 8 @ @ class NamespacedWrapper < V extends IForgeRegistryEntry < V > > extends RegistryNamesp 
 @ Nullable 
 public V getRandomObject ( Random random ) 
 { 
 - List < V > lst = this . delegate . getValues ( ) ; 
 - if ( lst . isEmpty ( ) ) 
 - return null ; 
 - return lst . get ( random . nextInt ( lst . size ( ) ) ) ; 
 + Collection < V > values = this . delegate . getValuesCollection ( ) ; 
 + return values . stream ( ) . skip ( random . nextInt ( values . size ( ) ) ) . findFirst ( ) . orElse ( null ) ; 
 } 
 
 / / internal 
 diff - - git a / src / test / java / net / minecraftforge / debug / FluidHandlerTest . java b / src / test / java / net / minecraftforge / debug / FluidHandlerTest . java 
 index e1cebe1 . . 48a7301 100644 
 - - - a / src / test / java / net / minecraftforge / debug / FluidHandlerTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / FluidHandlerTest . java 
 @ @ - 130 , 7 + 130 , 7 @ @ public class FluidHandlerTest 
 private static List < ItemStack > getAllItems ( ) 
 { 
 NonNullList < ItemStack > list = NonNullList . create ( ) ; 
 - for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) 
 + for ( Item item : ForgeRegistries . ITEMS . getValuesCollection ( ) ) 
 { 
 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) 
 {
