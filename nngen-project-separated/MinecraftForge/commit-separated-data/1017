BLEU SCORE: 1.0

TEST MSG: Quiet ClassPatchManager debug spam by default . Reenable using - Dfml . debugClassPatchManager = true .
GENERATED MSG: Quiet ClassPatchManager debug spam by default . Reenable using - Dfml . debugClassPatchManager = true .

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / patcher / ClassPatchManager . java b / fml / src / main / java / cpw / mods / fml / common / patcher / ClassPatchManager . java <nl> index 8df8d6d . . 01243dc 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / patcher / ClassPatchManager . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / patcher / ClassPatchManager . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ public class ClassPatchManager { <nl> public static final ClassPatchManager INSTANCE = new ClassPatchManager ( ) ; <nl> <nl> public static final boolean dumpPatched = Boolean . parseBoolean ( System . getProperty ( " fml . dumpPatchedClasses " , " false " ) ) ; <nl> + public static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugClassPatchManager " , " false " ) ) ; <nl> <nl> private GDiffPatcher patcher = new GDiffPatcher ( ) ; <nl> private ListMultimap < String , ClassPatch > patches ; <nl> @ @ - 75 , 7 + 76 , 8 @ @ public class ClassPatchManager { <nl> return inputData ; <nl> } <nl> boolean ignoredError = false ; <nl> - FMLRelaunchLog . fine ( " Runtime patching class % s ( input size % d ) , found % d patch % s " , mappedName , ( inputData = = null ? 0 : inputData . length ) , list . size ( ) , list . size ( ) ! = 1 ? " es " : " " ) ; <nl> + if ( DEBUG ) <nl> + FMLRelaunchLog . fine ( " Runtime patching class % s ( input size % d ) , found % d patch % s " , mappedName , ( inputData = = null ? 0 : inputData . length ) , list . size ( ) , list . size ( ) ! = 1 ? " es " : " " ) ; <nl> for ( ClassPatch patch : list ) <nl> { <nl> if ( ! patch . targetClassName . equals ( mappedName ) & & ! patch . sourceClassName . equals ( name ) ) <nl> @ @ - 122 , 7 + 124 , 7 @ @ public class ClassPatchManager { <nl> } <nl> } <nl> } <nl> - if ( ! ignoredError ) <nl> + if ( ! ignoredError & & DEBUG ) <nl> { <nl> FMLRelaunchLog . fine ( " Successfully applied runtime patches for % s ( new size % d ) " , mappedName , inputData . length ) ; <nl> } <nl> @ @ - 194 , 13 + 196 , 15 @ @ public class ClassPatchManager { <nl> } <nl> } while ( true ) ; <nl> FMLRelaunchLog . fine ( " Read % d binary patches " , patches . size ( ) ) ; <nl> - FMLRelaunchLog . fine ( " Patch list : \ n \ t % s " , Joiner . on ( " \ t \ n " ) . join ( patches . asMap ( ) . entrySet ( ) ) ) ; <nl> + if ( DEBUG ) <nl> + FMLRelaunchLog . fine ( " Patch list : \ n \ t % s " , Joiner . on ( " \ t \ n " ) . join ( patches . asMap ( ) . entrySet ( ) ) ) ; <nl> patchedClasses . clear ( ) ; <nl> } <nl> <nl> private ClassPatch readPatch ( JarEntry patchEntry , JarInputStream jis ) <nl> { <nl> - FMLRelaunchLog . finer ( " Reading patch data from % s " , patchEntry . getName ( ) ) ; <nl> + if ( DEBUG ) <nl> + FMLRelaunchLog . finer ( " Reading patch data from % s " , patchEntry . getName ( ) ) ; <nl> ByteArrayDataInput input ; <nl> try <nl> {
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / patcher / ClassPatchManager . java b / fml / src / main / java / net / minecraftforge / fml / common / patcher / ClassPatchManager . java <nl> index 353eb0c . . 48b2797 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / patcher / ClassPatchManager . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / patcher / ClassPatchManager . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ public class ClassPatchManager { <nl> public static final ClassPatchManager INSTANCE = new ClassPatchManager ( ) ; <nl> <nl> public static final boolean dumpPatched = Boolean . parseBoolean ( System . getProperty ( " fml . dumpPatchedClasses " , " false " ) ) ; <nl> + public static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugClassPatchManager " , " false " ) ) ; <nl> <nl> private GDiffPatcher patcher = new GDiffPatcher ( ) ; <nl> private ListMultimap < String , ClassPatch > patches ; <nl> @ @ - 51 , 7 + 52 , 6 @ @ public class ClassPatchManager { <nl> } <nl> } <nl> <nl> - <nl> public byte [ ] getPatchedResource ( String name , String mappedName , LaunchClassLoader loader ) throws IOException <nl> { <nl> byte [ ] rawClassBytes = loader . getClassBytes ( name ) ; <nl> @ @ - 73 , 7 + 73 , 8 @ @ public class ClassPatchManager { <nl> return inputData ; <nl> } <nl> boolean ignoredError = false ; <nl> - FMLRelaunchLog . fine ( " Runtime patching class % s ( input size % d ) , found % d patch % s " , mappedName , ( inputData = = null ? 0 : inputData . length ) , list . size ( ) , list . size ( ) ! = 1 ? " es " : " " ) ; <nl> + if ( DEBUG ) <nl> + FMLRelaunchLog . fine ( " Runtime patching class % s ( input size % d ) , found % d patch % s " , mappedName , ( inputData = = null ? 0 : inputData . length ) , list . size ( ) , list . size ( ) ! = 1 ? " es " : " " ) ; <nl> for ( ClassPatch patch : list ) <nl> { <nl> if ( ! patch . targetClassName . equals ( mappedName ) & & ! patch . sourceClassName . equals ( name ) ) <nl> @ @ - 120 , 7 + 121 , 7 @ @ public class ClassPatchManager { <nl> } <nl> } <nl> } <nl> - if ( ! ignoredError ) <nl> + if ( ! ignoredError & & DEBUG ) <nl> { <nl> FMLRelaunchLog . fine ( " Successfully applied runtime patches for % s ( new size % d ) " , mappedName , inputData . length ) ; <nl> } <nl> @ @ - 192 , 13 + 193 , 15 @ @ public class ClassPatchManager { <nl> } <nl> } while ( true ) ; <nl> FMLRelaunchLog . fine ( " Read % d binary patches " , patches . size ( ) ) ; <nl> - FMLRelaunchLog . fine ( " Patch list : \ n \ t % s " , Joiner . on ( " \ t \ n " ) . join ( patches . asMap ( ) . entrySet ( ) ) ) ; <nl> + if ( DEBUG ) <nl> + FMLRelaunchLog . fine ( " Patch list : \ n \ t % s " , Joiner . on ( " \ t \ n " ) . join ( patches . asMap ( ) . entrySet ( ) ) ) ; <nl> patchedClasses . clear ( ) ; <nl> } <nl> <nl> private ClassPatch readPatch ( JarEntry patchEntry , JarInputStream jis ) <nl> { <nl> - FMLRelaunchLog . finer ( " Reading patch data from % s " , patchEntry . getName ( ) ) ; <nl> + if ( DEBUG ) <nl> + FMLRelaunchLog . finer ( " Reading patch data from % s " , patchEntry . getName ( ) ) ; <nl> ByteArrayDataInput input ; <nl> try <nl> {

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / patcher / ClassPatchManager . java b / fml / src / main / java / cpw / mods / fml / common / patcher / ClassPatchManager . java 
 index 8df8d6d . . 01243dc 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / patcher / ClassPatchManager . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / patcher / ClassPatchManager . java 
 @ @ - 38 , 6 + 38 , 7 @ @ public class ClassPatchManager { 
 public static final ClassPatchManager INSTANCE = new ClassPatchManager ( ) ; 
 
 public static final boolean dumpPatched = Boolean . parseBoolean ( System . getProperty ( " fml . dumpPatchedClasses " , " false " ) ) ; 
 + public static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugClassPatchManager " , " false " ) ) ; 
 
 private GDiffPatcher patcher = new GDiffPatcher ( ) ; 
 private ListMultimap < String , ClassPatch > patches ; 
 @ @ - 75 , 7 + 76 , 8 @ @ public class ClassPatchManager { 
 return inputData ; 
 } 
 boolean ignoredError = false ; 
 - FMLRelaunchLog . fine ( " Runtime patching class % s ( input size % d ) , found % d patch % s " , mappedName , ( inputData = = null ? 0 : inputData . length ) , list . size ( ) , list . size ( ) ! = 1 ? " es " : " " ) ; 
 + if ( DEBUG ) 
 + FMLRelaunchLog . fine ( " Runtime patching class % s ( input size % d ) , found % d patch % s " , mappedName , ( inputData = = null ? 0 : inputData . length ) , list . size ( ) , list . size ( ) ! = 1 ? " es " : " " ) ; 
 for ( ClassPatch patch : list ) 
 { 
 if ( ! patch . targetClassName . equals ( mappedName ) & & ! patch . sourceClassName . equals ( name ) ) 
 @ @ - 122 , 7 + 124 , 7 @ @ public class ClassPatchManager { 
 } 
 } 
 } 
 - if ( ! ignoredError ) 
 + if ( ! ignoredError & & DEBUG ) 
 { 
 FMLRelaunchLog . fine ( " Successfully applied runtime patches for % s ( new size % d ) " , mappedName , inputData . length ) ; 
 } 
 @ @ - 194 , 13 + 196 , 15 @ @ public class ClassPatchManager { 
 } 
 } while ( true ) ; 
 FMLRelaunchLog . fine ( " Read % d binary patches " , patches . size ( ) ) ; 
 - FMLRelaunchLog . fine ( " Patch list : \ n \ t % s " , Joiner . on ( " \ t \ n " ) . join ( patches . asMap ( ) . entrySet ( ) ) ) ; 
 + if ( DEBUG ) 
 + FMLRelaunchLog . fine ( " Patch list : \ n \ t % s " , Joiner . on ( " \ t \ n " ) . join ( patches . asMap ( ) . entrySet ( ) ) ) ; 
 patchedClasses . clear ( ) ; 
 } 
 
 private ClassPatch readPatch ( JarEntry patchEntry , JarInputStream jis ) 
 { 
 - FMLRelaunchLog . finer ( " Reading patch data from % s " , patchEntry . getName ( ) ) ; 
 + if ( DEBUG ) 
 + FMLRelaunchLog . finer ( " Reading patch data from % s " , patchEntry . getName ( ) ) ; 
 ByteArrayDataInput input ; 
 try 
 {

NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / patcher / ClassPatchManager . java b / fml / src / main / java / net / minecraftforge / fml / common / patcher / ClassPatchManager . java 
 index 353eb0c . . 48b2797 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / patcher / ClassPatchManager . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / patcher / ClassPatchManager . java 
 @ @ - 36 , 6 + 36 , 7 @ @ public class ClassPatchManager { 
 public static final ClassPatchManager INSTANCE = new ClassPatchManager ( ) ; 
 
 public static final boolean dumpPatched = Boolean . parseBoolean ( System . getProperty ( " fml . dumpPatchedClasses " , " false " ) ) ; 
 + public static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugClassPatchManager " , " false " ) ) ; 
 
 private GDiffPatcher patcher = new GDiffPatcher ( ) ; 
 private ListMultimap < String , ClassPatch > patches ; 
 @ @ - 51 , 7 + 52 , 6 @ @ public class ClassPatchManager { 
 } 
 } 
 
 - 
 public byte [ ] getPatchedResource ( String name , String mappedName , LaunchClassLoader loader ) throws IOException 
 { 
 byte [ ] rawClassBytes = loader . getClassBytes ( name ) ; 
 @ @ - 73 , 7 + 73 , 8 @ @ public class ClassPatchManager { 
 return inputData ; 
 } 
 boolean ignoredError = false ; 
 - FMLRelaunchLog . fine ( " Runtime patching class % s ( input size % d ) , found % d patch % s " , mappedName , ( inputData = = null ? 0 : inputData . length ) , list . size ( ) , list . size ( ) ! = 1 ? " es " : " " ) ; 
 + if ( DEBUG ) 
 + FMLRelaunchLog . fine ( " Runtime patching class % s ( input size % d ) , found % d patch % s " , mappedName , ( inputData = = null ? 0 : inputData . length ) , list . size ( ) , list . size ( ) ! = 1 ? " es " : " " ) ; 
 for ( ClassPatch patch : list ) 
 { 
 if ( ! patch . targetClassName . equals ( mappedName ) & & ! patch . sourceClassName . equals ( name ) ) 
 @ @ - 120 , 7 + 121 , 7 @ @ public class ClassPatchManager { 
 } 
 } 
 } 
 - if ( ! ignoredError ) 
 + if ( ! ignoredError & & DEBUG ) 
 { 
 FMLRelaunchLog . fine ( " Successfully applied runtime patches for % s ( new size % d ) " , mappedName , inputData . length ) ; 
 } 
 @ @ - 192 , 13 + 193 , 15 @ @ public class ClassPatchManager { 
 } 
 } while ( true ) ; 
 FMLRelaunchLog . fine ( " Read % d binary patches " , patches . size ( ) ) ; 
 - FMLRelaunchLog . fine ( " Patch list : \ n \ t % s " , Joiner . on ( " \ t \ n " ) . join ( patches . asMap ( ) . entrySet ( ) ) ) ; 
 + if ( DEBUG ) 
 + FMLRelaunchLog . fine ( " Patch list : \ n \ t % s " , Joiner . on ( " \ t \ n " ) . join ( patches . asMap ( ) . entrySet ( ) ) ) ; 
 patchedClasses . clear ( ) ; 
 } 
 
 private ClassPatch readPatch ( JarEntry patchEntry , JarInputStream jis ) 
 { 
 - FMLRelaunchLog . finer ( " Reading patch data from % s " , patchEntry . getName ( ) ) ; 
 + if ( DEBUG ) 
 + FMLRelaunchLog . finer ( " Reading patch data from % s " , patchEntry . getName ( ) ) ; 
 ByteArrayDataInput input ; 
 try 
 {
