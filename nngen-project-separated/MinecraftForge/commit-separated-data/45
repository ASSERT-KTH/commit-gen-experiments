BLEU SCORE: 0.03377156414337854

TEST MSG: Update Night - Config to 3 . 5 . 0 , improve defineEnum methods
GENERATED MSG: Tweak library locating code . Works well on vanilla and dev now .

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 812681a . . 67827c0 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 294 , 8 + 294 , 8 @ @ project ( ' : forge ' ) { <nl> installer ' net . minecraftforge : forgespi : 0 . 11 . + ' <nl> installer ' net . minecraftforge : coremods : 0 . 4 . + ' <nl> installer ' net . minecraftforge : unsafe : 0 . 2 . + ' <nl> - installer ' com . electronwill . night - config : core : 3 . 4 . 2 ' <nl> - installer ' com . electronwill . night - config : toml : 3 . 4 . 2 ' <nl> + installer ' com . electronwill . night - config : core : 3 . 5 . 0 ' <nl> + installer ' com . electronwill . night - config : toml : 3 . 5 . 0 ' <nl> installer ' org . jline : jline : 3 . 9 . 0 ' <nl> installer ' org . apache . maven : maven - artifact : 3 . 6 . 0 ' <nl> installer ' net . jodah : typetools : 0 . 6 . 0 ' <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java b / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java <nl> index f43430b . . ddafe1a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import static com . electronwill . nightconfig . core . ConfigSpec . CorrectionAction . REMO <nl> import static com . electronwill . nightconfig . core . ConfigSpec . CorrectionAction . REPLACE ; <nl> import static net . minecraftforge . fml . Logging . CORE ; <nl> <nl> - import java . nio . file . Path ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collection ; <nl> @ @ - 33 , 10 + 32 , 8 @ @ import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> - import java . util . ListIterator ; <nl> import java . util . Map ; <nl> import java . util . Objects ; <nl> - import java . util . function . Consumer ; <nl> import java . util . function . Function ; <nl> import java . util . function . Predicate ; <nl> import java . util . function . Supplier ; <nl> @ @ - 46 , 20 + 43 , 17 @ @ import org . apache . logging . log4j . LogManager ; <nl> <nl> import com . electronwill . nightconfig . core . CommentedConfig ; <nl> import com . electronwill . nightconfig . core . Config ; <nl> - import com . electronwill . nightconfig . core . InMemoryFormat ; <nl> - import com . electronwill . nightconfig . core . utils . UnmodifiableConfigWrapper ; <nl> + import com . electronwill . nightconfig . core . EnumGetMethod ; <nl> import com . electronwill . nightconfig . core . ConfigSpec . CorrectionAction ; <nl> import com . electronwill . nightconfig . core . ConfigSpec . CorrectionListener ; <nl> - import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> + import com . electronwill . nightconfig . core . InMemoryFormat ; <nl> import com . electronwill . nightconfig . core . file . FileConfig ; <nl> - import com . electronwill . nightconfig . core . io . WritingMode ; <nl> + import com . electronwill . nightconfig . core . utils . UnmodifiableConfigWrapper ; <nl> import com . google . common . base . Joiner ; <nl> import com . google . common . base . Preconditions ; <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . Lists ; <nl> <nl> - import io . netty . util . BooleanSupplier ; <nl> - <nl> / * <nl> * Like { @ link com . electronwill . nightconfig . core . ConfigSpec } except in builder format , and extended to acept comments , language keys , <nl> * and other things Forge configs would find useful . <nl> @ @ - 296 , 37 + 290 , 84 @ @ public class ForgeConfigSpec extends UnmodifiableConfigWrapper < Config > <nl> } <nl> <nl> / / Enum <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , V defaultValue ) { <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue ) { <nl> return defineEnum ( split ( path ) , defaultValue ) ; <nl> } <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , V defaultValue ) { <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , EnumGetMethod converter ) { <nl> + return defineEnum ( split ( path ) , defaultValue , converter ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue ) { <nl> return defineEnum ( path , defaultValue , defaultValue . getDeclaringClass ( ) . getEnumConstants ( ) ) ; <nl> } <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , V defaultValue , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , EnumGetMethod converter ) { <nl> + return defineEnum ( path , defaultValue , converter , defaultValue . getDeclaringClass ( ) . getEnumConstants ( ) ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { <nl> return defineEnum ( split ( path ) , defaultValue , acceptableValues ) ; <nl> } <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , V defaultValue , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { <nl> - return defineEnum ( path , defaultValue , Arrays . asList ( acceptableValues ) ) ; <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , EnumGetMethod converter , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { <nl> + return defineEnum ( split ( path ) , defaultValue , converter , acceptableValues ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { <nl> + return defineEnum ( path , defaultValue , ( Collection < V > ) Arrays . asList ( acceptableValues ) ) ; <nl> } <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , V defaultValue , Collection < V > acceptableValues ) { <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , EnumGetMethod converter , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { <nl> + return defineEnum ( path , defaultValue , converter , Arrays . asList ( acceptableValues ) ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , Collection < V > acceptableValues ) { <nl> return defineEnum ( split ( path ) , defaultValue , acceptableValues ) ; <nl> } <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , V defaultValue , Collection < V > acceptableValues ) { <nl> - return defineEnum ( path , defaultValue , acceptableValues : : contains ) ; <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , EnumGetMethod converter , Collection < V > acceptableValues ) { <nl> + return defineEnum ( split ( path ) , defaultValue , converter , acceptableValues ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , Collection < V > acceptableValues ) { <nl> + return defineEnum ( path , defaultValue , EnumGetMethod . NAME _ IGNORECASE , acceptableValues ) ; <nl> } <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , V defaultValue , Predicate < Object > validator ) { <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , EnumGetMethod converter , Collection < V > acceptableValues ) { <nl> + return defineEnum ( path , defaultValue , converter , obj - > { <nl> + if ( obj instanceof Enum ) { <nl> + return acceptableValues . contains ( obj ) ; <nl> + } <nl> + if ( obj = = null ) { <nl> + return false ; <nl> + } <nl> + try { <nl> + return acceptableValues . contains ( converter . get ( obj , defaultValue . getClass ( ) ) ) ; <nl> + } catch ( IllegalArgumentException | ClassCastException e ) { <nl> + return false ; <nl> + } <nl> + } ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , Predicate < Object > validator ) { <nl> return defineEnum ( split ( path ) , defaultValue , validator ) ; <nl> } <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , V defaultValue , Predicate < Object > validator ) { <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , EnumGetMethod converter , Predicate < Object > validator ) { <nl> + return defineEnum ( split ( path ) , defaultValue , converter , validator ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , Predicate < Object > validator ) { <nl> return defineEnum ( path , ( ) - > defaultValue , validator , defaultValue . getDeclaringClass ( ) ) ; <nl> } <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , Supplier < V > defaultSupplier , Predicate < Object > validator , Class < V > clazz ) { <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , EnumGetMethod converter , Predicate < Object > validator ) { <nl> + return defineEnum ( path , ( ) - > defaultValue , converter , validator , defaultValue . getDeclaringClass ( ) ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , Supplier < V > defaultSupplier , Predicate < Object > validator , Class < V > clazz ) { <nl> return defineEnum ( split ( path ) , defaultSupplier , validator , clazz ) ; <nl> } <nl> - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , Supplier < V > defaultSupplier , Predicate < Object > validator , Class < V > clazz ) { <nl> - return define ( path , defaultSupplier , validator , clazz ) ; <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , Supplier < V > defaultSupplier , EnumGetMethod converter , Predicate < Object > validator , Class < V > clazz ) { <nl> + return defineEnum ( split ( path ) , defaultSupplier , converter , validator , clazz ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , Supplier < V > defaultSupplier , Predicate < Object > validator , Class < V > clazz ) { <nl> + return defineEnum ( path , defaultSupplier , EnumGetMethod . NAME _ IGNORECASE , validator , clazz ) ; <nl> + } <nl> + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , Supplier < V > defaultSupplier , EnumGetMethod converter , Predicate < Object > validator , Class < V > clazz ) { <nl> + context . setClazz ( clazz ) ; <nl> + return new EnumValue < V > ( this , define ( path , new ValueSpec ( defaultSupplier , validator , context ) { <nl> + @ Override <nl> + public Object correct ( Object value ) { <nl> + return ( ( Enum < ? > ) super . correct ( value ) ) . name ( ) ; <nl> + } <nl> + } , defaultSupplier ) . getPath ( ) , defaultSupplier , converter , clazz ) ; <nl> } <nl> - <nl> <nl> / / boolean <nl> public BooleanValue define ( String path , boolean defaultValue ) { <nl> @ @ - 593 , 7 + 634 , 12 @ @ public class ForgeConfigSpec extends UnmodifiableConfigWrapper < Config > <nl> { <nl> Preconditions . checkNotNull ( spec , " Cannot get config value before spec is built " ) ; <nl> Preconditions . checkNotNull ( spec . childConfig , " Cannot get config value without assigned Config object present " ) ; <nl> - return spec . childConfig . getOrElse ( path , defaultSupplier ) ; <nl> + return getRaw ( spec . childConfig , path , defaultSupplier ) ; <nl> + } <nl> + <nl> + protected T getRaw ( Config config , List < String > path , Supplier < T > defaultSupplier ) <nl> + { <nl> + return config . getOrElse ( path , defaultSupplier ) ; <nl> } <nl> <nl> public Builder next ( ) <nl> @ @ - 633 , 6 + 679 , 25 @ @ public class ForgeConfigSpec extends UnmodifiableConfigWrapper < Config > <nl> super ( parent , path , defaultSupplier ) ; <nl> } <nl> } <nl> + <nl> + public static class EnumValue < T extends Enum < T > > extends ConfigValue < T > <nl> + { <nl> + private final EnumGetMethod converter ; <nl> + private final Class < T > clazz ; <nl> + <nl> + EnumValue ( Builder parent , List < String > path , Supplier < T > defaultSupplier , EnumGetMethod converter , Class < T > clazz ) <nl> + { <nl> + super ( parent , path , defaultSupplier ) ; <nl> + this . converter = converter ; <nl> + this . clazz = clazz ; <nl> + } <nl> + <nl> + @ Override <nl> + protected T getRaw ( Config config , List < String > path , Supplier < T > defaultSupplier ) <nl> + { <nl> + return config . getEnumOrElse ( path , clazz , converter , defaultSupplier ) ; <nl> + } <nl> + } <nl> <nl> private static final Joiner LINE _ JOINER = Joiner . on ( " \ n " ) ; <nl> private static final Joiner DOT _ JOINER = Joiner . on ( " . " ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> index d36f519 . . d520016 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class FMLModContainer extends ModContainer <nl> try <nl> { <nl> modClass = Class . forName ( className , true , modClassLoader ) ; <nl> - LOGGER . error ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; <nl> + LOGGER . debug ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; <nl> } <nl> catch ( Throwable e ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index 375764e . . bfa8e30 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import cpw . mods . modlauncher . api . IEnvironment ; <nl> import cpw . mods . modlauncher . api . ILaunchHandlerService ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> + import net . minecraftforge . fml . relauncher . libraries . LibraryManager ; <nl> import net . minecraftforge . versions . forge . ForgeVersion ; <nl> import net . minecraftforge . versions . mcp . MCPVersion ; <nl> import org . apache . logging . log4j . LogManager ; <nl> @ @ - 37 , 26 + 38 , 7 @ @ import java . util . concurrent . Callable ; <nl> public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> - private static final Path forgePath ; <nl> - private static final Path patchedBinariesPath ; <nl> - private static final Path srgMcPath ; <nl> <nl> - static { <nl> - Path forgePath1 = null ; <nl> - Path patchedBinariesPath1 = null ; <nl> - Path srgMcPath1 = null ; <nl> - try { <nl> - forgePath1 = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - patchedBinariesPath1 = forgePath1 . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; <nl> - Path libs = forgePath1 . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; <nl> - srgMcPath1 = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; <nl> - } catch ( URISyntaxException e ) { <nl> - <nl> - } <nl> - forgePath = forgePath1 ; <nl> - patchedBinariesPath = patchedBinariesPath1 ; <nl> - srgMcPath = srgMcPath1 ; <nl> - } <nl> @ Override <nl> public String name ( ) <nl> { <nl> @ @ - 66 , 20 + 48 , 23 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> + Path libsPath = findLibsPath ( ) ; <nl> + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; <nl> + Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; <nl> LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; <nl> LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; <nl> - LOGGER . info ( " Forge at { } is { } " , forgePath . toString ( ) , Files . exists ( forgePath ) ? " present " : " missing " ) ; <nl> - if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( forgePath ) ) ) { <nl> + LOGGER . info ( " Forge at { } is { } " , getForgePath ( ) . toString ( ) , Files . exists ( getForgePath ( ) ) ? " present " : " missing " ) ; <nl> + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( getForgePath ( ) ) ) ) { <nl> throw new RuntimeException ( " Failed to find patched jars " ) ; <nl> } <nl> - return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; <nl> + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) , patchedBinariesPath , srgMcPath } ) ; <nl> } <nl> <nl> @ Override <nl> public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) <nl> { <nl> return ( ) - > { <nl> - super . beforeStart ( launchClassLoader , forgePath ) ; <nl> + super . beforeStart ( launchClassLoader ) ; <nl> launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> index 94f8d4f . . 76ad5be 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> @ @ - 19 , 25 + 19 , 38 @ @ <nl> <nl> package net . minecraftforge . fml . loading ; <nl> <nl> + import com . google . common . collect . ObjectArrays ; <nl> import cpw . mods . modlauncher . api . IEnvironment ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> <nl> + import java . net . URI ; <nl> + import java . net . URISyntaxException ; <nl> + import java . net . URL ; <nl> import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . function . Predicate ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> + <nl> public abstract class FMLCommonLaunchHandler <nl> { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> private static final List < String > SKIPPACKAGES = Arrays . asList ( <nl> / / standard libs <nl> - " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , " org . apache . commons . " , " io . netty . " , <nl> + " joptsimple . " , " org . lwjgl . " , " com . mojang . guava . " , " com . google . " , " org . apache . commons . " , " io . netty . " , <nl> + " org . apache . logging . log4j . " , " org . apache . http . " , " org . apache . maven . " , " org . objectweb . asm . " , <nl> " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , <nl> " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , " net . minecraftforge . versions . " , <nl> " net . minecraftforge . eventbus . " , " net . minecraftforge . api . " <nl> ) ; <nl> <nl> + private Path forgePath ; <nl> + <nl> protected Predicate < String > getPackagePredicate ( ) { <nl> return cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ; <nl> } <nl> @ @ - 47 , 10 + 60 , 46 @ @ public abstract class FMLCommonLaunchHandler <nl> <nl> } <nl> <nl> + Path findLibsPath ( ) { <nl> + final Path asm = findJarPathFor ( " org / objectweb / asm / Opcodes . class " , " asm " ) ; <nl> + / / go up SIX parents to find the libs dir <nl> + final Path libs = asm . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; <nl> + LOGGER . debug ( CORE , " Found probable library path { } " , libs ) ; <nl> + return libs ; <nl> + } <nl> + Path findJarPathFor ( final String className , final String jarName ) { <nl> + final URL resource = getClass ( ) . getClassLoader ( ) . getResource ( className ) ; <nl> + try { <nl> + Path path ; <nl> + final URI uri = resource . toURI ( ) ; <nl> + if ( uri . getSchemeSpecificPart ( ) . contains ( " ! " ) ) { <nl> + path = Paths . get ( new URI ( uri . getSchemeSpecificPart ( ) . split ( " ! " ) [ 0 ] ) ) ; <nl> + } else { <nl> + path = Paths . get ( new URI ( " file : / / / " + uri . getSchemeSpecificPart ( ) . substring ( 0 , uri . getSchemeSpecificPart ( ) . length ( ) - className . length ( ) ) ) ) ; <nl> + } <nl> + LOGGER . debug ( CORE , " Found JAR { } at path { } " , jarName , path . toString ( ) ) ; <nl> + return path ; <nl> + } catch ( URISyntaxException e ) { <nl> + LOGGER . error ( CORE , " Failed to find JAR for class { } - { } " , className , jarName ) ; <nl> + throw new RuntimeException ( " Unable to locate " + className + " - " + jarName , e ) ; <nl> + } <nl> + } <nl> + Path [ ] commonLibPaths ( Path [ ] extras ) { <nl> + final Path realms = findJarPathFor ( " com / mojang / realmsclient / RealmsVersion . class " , " realms " ) ; <nl> + return ObjectArrays . concat ( extras , realms ) ; <nl> + } <nl> + <nl> + Path getForgePath ( ) { <nl> + if ( forgePath = = null ) { <nl> + forgePath = findJarPathFor ( " net / minecraftforge / versions / forge / ForgeVersion . class " , " forge " ) ; <nl> + LOGGER . debug ( CORE , " Found forge path { } " , forgePath ) ; <nl> + } <nl> + return forgePath ; <nl> + } <nl> public abstract Dist getDist ( ) ; <nl> <nl> - protected void beforeStart ( ITransformingClassLoader launchClassLoader , Path forgePath ) <nl> + protected void beforeStart ( ITransformingClassLoader launchClassLoader ) <nl> { <nl> - FMLLoader . beforeStart ( launchClassLoader , forgePath ) ; <nl> + FMLLoader . beforeStart ( launchClassLoader , getForgePath ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> index 27d441d . . 3a025d3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> @ @ - 47 , 24 + 47 , 10 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement <nl> return " fmldevclient " ; <nl> } <nl> <nl> - private static final Path myPath ; <nl> - <nl> - static <nl> - { <nl> - try <nl> - { <nl> - myPath = Paths . get ( FMLDevClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - } <nl> - catch ( URISyntaxException e ) <nl> - { <nl> - throw new RuntimeException ( " HUH ? " ) ; <nl> - } <nl> - } <nl> - <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ ] { myPath } ; <nl> + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 72 , 7 + 58 , 7 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement <nl> { <nl> return ( ) - > { <nl> LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; <nl> - super . beforeStart ( launchClassLoader , myPath ) ; <nl> + super . beforeStart ( launchClassLoader ) ; <nl> launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java <nl> index 7c0da5a . . 2aea0e2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java <nl> @ @ - 39 , 7 + 39 , 6 @ @ import static net . minecraftforge . fml . Logging . CORE ; <nl> <nl> public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> - <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> <nl> @ Override <nl> @ @ - 48 , 24 + 47 , 10 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement <nl> return " fmldevserver " ; <nl> } <nl> <nl> - private static final Path myPath ; <nl> - <nl> - static <nl> - { <nl> - try <nl> - { <nl> - myPath = Paths . get ( FMLDevServerLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - } <nl> - catch ( URISyntaxException e ) <nl> - { <nl> - throw new RuntimeException ( " HUH ? " ) ; <nl> - } <nl> - } <nl> - <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ ] { myPath } ; <nl> + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 73 , 7 + 58 , 7 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement <nl> { <nl> return ( ) - > { <nl> LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; <nl> - super . beforeStart ( launchClassLoader , myPath ) ; <nl> + super . beforeStart ( launchClassLoader ) ; <nl> launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> Thread . currentThread ( ) . setContextClassLoader ( launchClassLoader . getInstance ( ) ) ; <nl> Class . forName ( " net . minecraft . server . MinecraftServer " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ;

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 812681a . . 67827c0 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 294 , 8 + 294 , 8 @ @ project ( ' : forge ' ) { 
 installer ' net . minecraftforge : forgespi : 0 . 11 . + ' 
 installer ' net . minecraftforge : coremods : 0 . 4 . + ' 
 installer ' net . minecraftforge : unsafe : 0 . 2 . + ' 
 - installer ' com . electronwill . night - config : core : 3 . 4 . 2 ' 
 - installer ' com . electronwill . night - config : toml : 3 . 4 . 2 ' 
 + installer ' com . electronwill . night - config : core : 3 . 5 . 0 ' 
 + installer ' com . electronwill . night - config : toml : 3 . 5 . 0 ' 
 installer ' org . jline : jline : 3 . 9 . 0 ' 
 installer ' org . apache . maven : maven - artifact : 3 . 6 . 0 ' 
 installer ' net . jodah : typetools : 0 . 6 . 0 ' 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java b / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java 
 index f43430b . . ddafe1a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import static com . electronwill . nightconfig . core . ConfigSpec . CorrectionAction . REMO 
 import static com . electronwill . nightconfig . core . ConfigSpec . CorrectionAction . REPLACE ; 
 import static net . minecraftforge . fml . Logging . CORE ; 
 
 - import java . nio . file . Path ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collection ; 
 @ @ - 33 , 10 + 32 , 8 @ @ import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . LinkedList ; 
 import java . util . List ; 
 - import java . util . ListIterator ; 
 import java . util . Map ; 
 import java . util . Objects ; 
 - import java . util . function . Consumer ; 
 import java . util . function . Function ; 
 import java . util . function . Predicate ; 
 import java . util . function . Supplier ; 
 @ @ - 46 , 20 + 43 , 17 @ @ import org . apache . logging . log4j . LogManager ; 
 
 import com . electronwill . nightconfig . core . CommentedConfig ; 
 import com . electronwill . nightconfig . core . Config ; 
 - import com . electronwill . nightconfig . core . InMemoryFormat ; 
 - import com . electronwill . nightconfig . core . utils . UnmodifiableConfigWrapper ; 
 + import com . electronwill . nightconfig . core . EnumGetMethod ; 
 import com . electronwill . nightconfig . core . ConfigSpec . CorrectionAction ; 
 import com . electronwill . nightconfig . core . ConfigSpec . CorrectionListener ; 
 - import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 + import com . electronwill . nightconfig . core . InMemoryFormat ; 
 import com . electronwill . nightconfig . core . file . FileConfig ; 
 - import com . electronwill . nightconfig . core . io . WritingMode ; 
 + import com . electronwill . nightconfig . core . utils . UnmodifiableConfigWrapper ; 
 import com . google . common . base . Joiner ; 
 import com . google . common . base . Preconditions ; 
 import com . google . common . base . Splitter ; 
 import com . google . common . collect . Lists ; 
 
 - import io . netty . util . BooleanSupplier ; 
 - 
 / * 
 * Like { @ link com . electronwill . nightconfig . core . ConfigSpec } except in builder format , and extended to acept comments , language keys , 
 * and other things Forge configs would find useful . 
 @ @ - 296 , 37 + 290 , 84 @ @ public class ForgeConfigSpec extends UnmodifiableConfigWrapper < Config > 
 } 
 
 / / Enum 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , V defaultValue ) { 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue ) { 
 return defineEnum ( split ( path ) , defaultValue ) ; 
 } 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , V defaultValue ) { 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , EnumGetMethod converter ) { 
 + return defineEnum ( split ( path ) , defaultValue , converter ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue ) { 
 return defineEnum ( path , defaultValue , defaultValue . getDeclaringClass ( ) . getEnumConstants ( ) ) ; 
 } 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , V defaultValue , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , EnumGetMethod converter ) { 
 + return defineEnum ( path , defaultValue , converter , defaultValue . getDeclaringClass ( ) . getEnumConstants ( ) ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { 
 return defineEnum ( split ( path ) , defaultValue , acceptableValues ) ; 
 } 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , V defaultValue , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { 
 - return defineEnum ( path , defaultValue , Arrays . asList ( acceptableValues ) ) ; 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , EnumGetMethod converter , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { 
 + return defineEnum ( split ( path ) , defaultValue , converter , acceptableValues ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { 
 + return defineEnum ( path , defaultValue , ( Collection < V > ) Arrays . asList ( acceptableValues ) ) ; 
 } 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , V defaultValue , Collection < V > acceptableValues ) { 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , EnumGetMethod converter , @ SuppressWarnings ( " unchecked " ) V . . . acceptableValues ) { 
 + return defineEnum ( path , defaultValue , converter , Arrays . asList ( acceptableValues ) ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , Collection < V > acceptableValues ) { 
 return defineEnum ( split ( path ) , defaultValue , acceptableValues ) ; 
 } 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , V defaultValue , Collection < V > acceptableValues ) { 
 - return defineEnum ( path , defaultValue , acceptableValues : : contains ) ; 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , EnumGetMethod converter , Collection < V > acceptableValues ) { 
 + return defineEnum ( split ( path ) , defaultValue , converter , acceptableValues ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , Collection < V > acceptableValues ) { 
 + return defineEnum ( path , defaultValue , EnumGetMethod . NAME _ IGNORECASE , acceptableValues ) ; 
 } 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , V defaultValue , Predicate < Object > validator ) { 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , EnumGetMethod converter , Collection < V > acceptableValues ) { 
 + return defineEnum ( path , defaultValue , converter , obj - > { 
 + if ( obj instanceof Enum ) { 
 + return acceptableValues . contains ( obj ) ; 
 + } 
 + if ( obj = = null ) { 
 + return false ; 
 + } 
 + try { 
 + return acceptableValues . contains ( converter . get ( obj , defaultValue . getClass ( ) ) ) ; 
 + } catch ( IllegalArgumentException | ClassCastException e ) { 
 + return false ; 
 + } 
 + } ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , Predicate < Object > validator ) { 
 return defineEnum ( split ( path ) , defaultValue , validator ) ; 
 } 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , V defaultValue , Predicate < Object > validator ) { 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , V defaultValue , EnumGetMethod converter , Predicate < Object > validator ) { 
 + return defineEnum ( split ( path ) , defaultValue , converter , validator ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , Predicate < Object > validator ) { 
 return defineEnum ( path , ( ) - > defaultValue , validator , defaultValue . getDeclaringClass ( ) ) ; 
 } 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( String path , Supplier < V > defaultSupplier , Predicate < Object > validator , Class < V > clazz ) { 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , V defaultValue , EnumGetMethod converter , Predicate < Object > validator ) { 
 + return defineEnum ( path , ( ) - > defaultValue , converter , validator , defaultValue . getDeclaringClass ( ) ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , Supplier < V > defaultSupplier , Predicate < Object > validator , Class < V > clazz ) { 
 return defineEnum ( split ( path ) , defaultSupplier , validator , clazz ) ; 
 } 
 - public < V extends Enum < V > > ConfigValue < V > defineEnum ( List < String > path , Supplier < V > defaultSupplier , Predicate < Object > validator , Class < V > clazz ) { 
 - return define ( path , defaultSupplier , validator , clazz ) ; 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( String path , Supplier < V > defaultSupplier , EnumGetMethod converter , Predicate < Object > validator , Class < V > clazz ) { 
 + return defineEnum ( split ( path ) , defaultSupplier , converter , validator , clazz ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , Supplier < V > defaultSupplier , Predicate < Object > validator , Class < V > clazz ) { 
 + return defineEnum ( path , defaultSupplier , EnumGetMethod . NAME _ IGNORECASE , validator , clazz ) ; 
 + } 
 + public < V extends Enum < V > > EnumValue < V > defineEnum ( List < String > path , Supplier < V > defaultSupplier , EnumGetMethod converter , Predicate < Object > validator , Class < V > clazz ) { 
 + context . setClazz ( clazz ) ; 
 + return new EnumValue < V > ( this , define ( path , new ValueSpec ( defaultSupplier , validator , context ) { 
 + @ Override 
 + public Object correct ( Object value ) { 
 + return ( ( Enum < ? > ) super . correct ( value ) ) . name ( ) ; 
 + } 
 + } , defaultSupplier ) . getPath ( ) , defaultSupplier , converter , clazz ) ; 
 } 
 - 
 
 / / boolean 
 public BooleanValue define ( String path , boolean defaultValue ) { 
 @ @ - 593 , 7 + 634 , 12 @ @ public class ForgeConfigSpec extends UnmodifiableConfigWrapper < Config > 
 { 
 Preconditions . checkNotNull ( spec , " Cannot get config value before spec is built " ) ; 
 Preconditions . checkNotNull ( spec . childConfig , " Cannot get config value without assigned Config object present " ) ; 
 - return spec . childConfig . getOrElse ( path , defaultSupplier ) ; 
 + return getRaw ( spec . childConfig , path , defaultSupplier ) ; 
 + } 
 + 
 + protected T getRaw ( Config config , List < String > path , Supplier < T > defaultSupplier ) 
 + { 
 + return config . getOrElse ( path , defaultSupplier ) ; 
 } 
 
 public Builder next ( ) 
 @ @ - 633 , 6 + 679 , 25 @ @ public class ForgeConfigSpec extends UnmodifiableConfigWrapper < Config > 
 super ( parent , path , defaultSupplier ) ; 
 } 
 } 
 + 
 + public static class EnumValue < T extends Enum < T > > extends ConfigValue < T > 
 + { 
 + private final EnumGetMethod converter ; 
 + private final Class < T > clazz ; 
 + 
 + EnumValue ( Builder parent , List < String > path , Supplier < T > defaultSupplier , EnumGetMethod converter , Class < T > clazz ) 
 + { 
 + super ( parent , path , defaultSupplier ) ; 
 + this . converter = converter ; 
 + this . clazz = clazz ; 
 + } 
 + 
 + @ Override 
 + protected T getRaw ( Config config , List < String > path , Supplier < T > defaultSupplier ) 
 + { 
 + return config . getEnumOrElse ( path , clazz , converter , defaultSupplier ) ; 
 + } 
 + } 
 
 private static final Joiner LINE _ JOINER = Joiner . on ( " \ n " ) ; 
 private static final Joiner DOT _ JOINER = Joiner . on ( " . " ) ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 index d36f519 . . d520016 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class FMLModContainer extends ModContainer 
 try 
 { 
 modClass = Class . forName ( className , true , modClassLoader ) ; 
 - LOGGER . error ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; 
 + LOGGER . debug ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; 
 } 
 catch ( Throwable e ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index 375764e . . bfa8e30 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import cpw . mods . modlauncher . api . IEnvironment ; 
 import cpw . mods . modlauncher . api . ILaunchHandlerService ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 + import net . minecraftforge . fml . relauncher . libraries . LibraryManager ; 
 import net . minecraftforge . versions . forge . ForgeVersion ; 
 import net . minecraftforge . versions . mcp . MCPVersion ; 
 import org . apache . logging . log4j . LogManager ; 
 @ @ - 37 , 26 + 38 , 7 @ @ import java . util . concurrent . Callable ; 
 public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 - private static final Path forgePath ; 
 - private static final Path patchedBinariesPath ; 
 - private static final Path srgMcPath ; 
 
 - static { 
 - Path forgePath1 = null ; 
 - Path patchedBinariesPath1 = null ; 
 - Path srgMcPath1 = null ; 
 - try { 
 - forgePath1 = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - patchedBinariesPath1 = forgePath1 . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; 
 - Path libs = forgePath1 . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; 
 - srgMcPath1 = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; 
 - } catch ( URISyntaxException e ) { 
 - 
 - } 
 - forgePath = forgePath1 ; 
 - patchedBinariesPath = patchedBinariesPath1 ; 
 - srgMcPath = srgMcPath1 ; 
 - } 
 @ Override 
 public String name ( ) 
 { 
 @ @ - 66 , 20 + 48 , 23 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 + Path libsPath = findLibsPath ( ) ; 
 + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; 
 + Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; 
 LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; 
 LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; 
 - LOGGER . info ( " Forge at { } is { } " , forgePath . toString ( ) , Files . exists ( forgePath ) ? " present " : " missing " ) ; 
 - if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( forgePath ) ) ) { 
 + LOGGER . info ( " Forge at { } is { } " , getForgePath ( ) . toString ( ) , Files . exists ( getForgePath ( ) ) ? " present " : " missing " ) ; 
 + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( getForgePath ( ) ) ) ) { 
 throw new RuntimeException ( " Failed to find patched jars " ) ; 
 } 
 - return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; 
 + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) , patchedBinariesPath , srgMcPath } ) ; 
 } 
 
 @ Override 
 public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) 
 { 
 return ( ) - > { 
 - super . beforeStart ( launchClassLoader , forgePath ) ; 
 + super . beforeStart ( launchClassLoader ) ; 
 launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 index 94f8d4f . . 76ad5be 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 @ @ - 19 , 25 + 19 , 38 @ @ 
 
 package net . minecraftforge . fml . loading ; 
 
 + import com . google . common . collect . ObjectArrays ; 
 import cpw . mods . modlauncher . api . IEnvironment ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 
 + import java . net . URI ; 
 + import java . net . URISyntaxException ; 
 + import java . net . URL ; 
 import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . function . Predicate ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 + 
 public abstract class FMLCommonLaunchHandler 
 { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 private static final List < String > SKIPPACKAGES = Arrays . asList ( 
 / / standard libs 
 - " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , " org . apache . commons . " , " io . netty . " , 
 + " joptsimple . " , " org . lwjgl . " , " com . mojang . guava . " , " com . google . " , " org . apache . commons . " , " io . netty . " , 
 + " org . apache . logging . log4j . " , " org . apache . http . " , " org . apache . maven . " , " org . objectweb . asm . " , 
 " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , 
 " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , " net . minecraftforge . versions . " , 
 " net . minecraftforge . eventbus . " , " net . minecraftforge . api . " 
 ) ; 
 
 + private Path forgePath ; 
 + 
 protected Predicate < String > getPackagePredicate ( ) { 
 return cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ; 
 } 
 @ @ - 47 , 10 + 60 , 46 @ @ public abstract class FMLCommonLaunchHandler 
 
 } 
 
 + Path findLibsPath ( ) { 
 + final Path asm = findJarPathFor ( " org / objectweb / asm / Opcodes . class " , " asm " ) ; 
 + / / go up SIX parents to find the libs dir 
 + final Path libs = asm . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; 
 + LOGGER . debug ( CORE , " Found probable library path { } " , libs ) ; 
 + return libs ; 
 + } 
 + Path findJarPathFor ( final String className , final String jarName ) { 
 + final URL resource = getClass ( ) . getClassLoader ( ) . getResource ( className ) ; 
 + try { 
 + Path path ; 
 + final URI uri = resource . toURI ( ) ; 
 + if ( uri . getSchemeSpecificPart ( ) . contains ( " ! " ) ) { 
 + path = Paths . get ( new URI ( uri . getSchemeSpecificPart ( ) . split ( " ! " ) [ 0 ] ) ) ; 
 + } else { 
 + path = Paths . get ( new URI ( " file : / / / " + uri . getSchemeSpecificPart ( ) . substring ( 0 , uri . getSchemeSpecificPart ( ) . length ( ) - className . length ( ) ) ) ) ; 
 + } 
 + LOGGER . debug ( CORE , " Found JAR { } at path { } " , jarName , path . toString ( ) ) ; 
 + return path ; 
 + } catch ( URISyntaxException e ) { 
 + LOGGER . error ( CORE , " Failed to find JAR for class { } - { } " , className , jarName ) ; 
 + throw new RuntimeException ( " Unable to locate " + className + " - " + jarName , e ) ; 
 + } 
 + } 
 + Path [ ] commonLibPaths ( Path [ ] extras ) { 
 + final Path realms = findJarPathFor ( " com / mojang / realmsclient / RealmsVersion . class " , " realms " ) ; 
 + return ObjectArrays . concat ( extras , realms ) ; 
 + } 
 + 
 + Path getForgePath ( ) { 
 + if ( forgePath = = null ) { 
 + forgePath = findJarPathFor ( " net / minecraftforge / versions / forge / ForgeVersion . class " , " forge " ) ; 
 + LOGGER . debug ( CORE , " Found forge path { } " , forgePath ) ; 
 + } 
 + return forgePath ; 
 + } 
 public abstract Dist getDist ( ) ; 
 
 - protected void beforeStart ( ITransformingClassLoader launchClassLoader , Path forgePath ) 
 + protected void beforeStart ( ITransformingClassLoader launchClassLoader ) 
 { 
 - FMLLoader . beforeStart ( launchClassLoader , forgePath ) ; 
 + FMLLoader . beforeStart ( launchClassLoader , getForgePath ( ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 index 27d441d . . 3a025d3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 @ @ - 47 , 24 + 47 , 10 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement 
 return " fmldevclient " ; 
 } 
 
 - private static final Path myPath ; 
 - 
 - static 
 - { 
 - try 
 - { 
 - myPath = Paths . get ( FMLDevClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - } 
 - catch ( URISyntaxException e ) 
 - { 
 - throw new RuntimeException ( " HUH ? " ) ; 
 - } 
 - } 
 - 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ ] { myPath } ; 
 + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; 
 } 
 
 @ Override 
 @ @ - 72 , 7 + 58 , 7 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement 
 { 
 return ( ) - > { 
 LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; 
 - super . beforeStart ( launchClassLoader , myPath ) ; 
 + super . beforeStart ( launchClassLoader ) ; 
 launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java 
 index 7c0da5a . . 2aea0e2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java 
 @ @ - 39 , 7 + 39 , 6 @ @ import static net . minecraftforge . fml . Logging . CORE ; 
 
 public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 - 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 
 @ Override 
 @ @ - 48 , 24 + 47 , 10 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement 
 return " fmldevserver " ; 
 } 
 
 - private static final Path myPath ; 
 - 
 - static 
 - { 
 - try 
 - { 
 - myPath = Paths . get ( FMLDevServerLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - } 
 - catch ( URISyntaxException e ) 
 - { 
 - throw new RuntimeException ( " HUH ? " ) ; 
 - } 
 - } 
 - 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ ] { myPath } ; 
 + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; 
 } 
 
 @ Override 
 @ @ - 73 , 7 + 58 , 7 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement 
 { 
 return ( ) - > { 
 LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; 
 - super . beforeStart ( launchClassLoader , myPath ) ; 
 + super . beforeStart ( launchClassLoader ) ; 
 launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 Thread . currentThread ( ) . setContextClassLoader ( launchClassLoader . getInstance ( ) ) ; 
 Class . forName ( " net . minecraft . server . MinecraftServer " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ;
