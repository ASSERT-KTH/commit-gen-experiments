BLEU SCORE: 0.028629993657668888

TEST MSG: Introduce entity entry builder , useful in the Register < EntityEntry > event replacing needed calls to EntityRegistry .
GENERATED MSG: A lot of tweaks to the chunkloading for entity behaviour . Entities are now bound by a new

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java <nl> index 6bc6e5a . . 0aa5c76 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java <nl> @ @ - 18 , 21 + 18 , 20 @ @ <nl> * / <nl> package net . minecraftforge . fml . common . registry ; <nl> <nl> - import java . lang . reflect . Constructor ; <nl> - <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityList ; <nl> import net . minecraft . entity . EntityList . EntityEggInfo ; <nl> import net . minecraft . world . World ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . registries . IForgeRegistryEntry . Impl ; <nl> <nl> + import java . util . function . Function ; <nl> + <nl> public class EntityEntry extends Impl < EntityEntry > <nl> { <nl> private Class < ? extends Entity > cls ; <nl> private String name ; <nl> private EntityEggInfo egg ; <nl> - private Constructor < ? > ctr ; <nl> + Function < World , ? extends Entity > factory ; <nl> <nl> public EntityEntry ( Class < ? extends Entity > cls , String name ) <nl> { <nl> @ @ - 44 , 14 + 43 , 12 @ @ public class EntityEntry extends Impl < EntityEntry > <nl> / / Protected method , to make this optional , in case people subclass this to have a better factory . <nl> protected void init ( ) <nl> { <nl> - try <nl> - { <nl> - this . ctr = this . cls . getConstructor ( World . class ) ; <nl> - } <nl> - catch ( NoSuchMethodException e ) <nl> - { <nl> - throw new RuntimeException ( " Invalid class " + this . cls + " no constructor taking " + World . class . getName ( ) ) ; <nl> - } <nl> + this . factory = new EntityEntryBuilder . ConstructorFactory < Entity > ( this . cls ) { <nl> + @ Override <nl> + protected String describeEntity ( ) { <nl> + return String . valueOf ( EntityEntry . this . getRegistryName ( ) ) ; <nl> + } <nl> + } ; <nl> } <nl> <nl> public Class < ? extends Entity > getEntityClass ( ) { return this . cls ; } <nl> @ @ - 67 , 14 + 64 , 6 @ @ public class EntityEntry extends Impl < EntityEntry > <nl> <nl> public Entity newInstance ( World world ) <nl> { <nl> - try <nl> - { <nl> - return ( Entity ) this . ctr . newInstance ( world ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - FMLLog . log . error ( " Error creating entity . " , e ) ; <nl> - return null ; <nl> - } <nl> + return this . factory . apply ( world ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntryBuilder . java b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntryBuilder . java <nl> new file mode 100644 <nl> index 0000000 . . 325519e <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntryBuilder . java <nl> @ @ - 0 , 0 + 1 , 370 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . fml . common . registry ; <nl> + <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraft . entity . EntityList ; <nl> + import net . minecraft . entity . EntityLiving ; <nl> + import net . minecraft . entity . EnumCreatureType ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraft . world . biome . Biome ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import net . minecraftforge . fml . relauncher . ReflectionHelper ; <nl> + <nl> + import java . lang . reflect . Constructor ; <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . List ; <nl> + import java . util . function . Function ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + import javax . annotation . Nullable ; <nl> + <nl> + import static com . google . common . base . Preconditions . checkArgument ; <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> + import static com . google . common . base . Preconditions . checkState ; <nl> + <nl> + / * * <nl> + * An entity registry entry builder . <nl> + * <nl> + * @ param < E > The entity type <nl> + * / <nl> + public final class EntityEntryBuilder < E extends Entity > <nl> + { <nl> + private final ModContainer mod ; <nl> + @ Nullable private Class < ? extends E > entity ; <nl> + @ Nullable private Function < World , E > factory ; <nl> + @ Nullable private ResourceLocation id ; <nl> + private int network ; <nl> + @ Nullable private String name ; <nl> + private int trackingRange ; <nl> + private int trackingUpdateFrequency ; <nl> + private boolean trackingVelocityUpdates ; <nl> + private boolean eggProvided ; <nl> + private int primaryEggColor ; <nl> + private int secondaryEggColor ; <nl> + @ Nullable private Collection < Spawn > spawns ; <nl> + <nl> + / * * <nl> + * Creates a new entity entry builder . <nl> + * <nl> + * @ param < E > The entity type <nl> + * @ return A new entity entry builder <nl> + * / <nl> + @ Nonnull <nl> + public static < E extends Entity > EntityEntryBuilder < E > create ( ) <nl> + { <nl> + return new EntityEntryBuilder < > ( ) ; <nl> + } <nl> + <nl> + private EntityEntryBuilder ( ) <nl> + { <nl> + this . mod = Loader . instance ( ) . activeModContainer ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the class of the entity . <nl> + * <nl> + * < p > Entities will be constructed using a constructor accepting { @ link World } . If you wish <nl> + * to use your own factory , use { @ link # factory ( Function ) } . < / p > <nl> + * <nl> + * @ param entity The entity class <nl> + * @ return This builder <nl> + * @ throws NullPointerException If { @ code entity } is { @ code null } <nl> + * / <nl> + @ Nonnull <nl> + public final EntityEntryBuilder < E > entity ( @ Nonnull final Class < ? extends E > entity ) <nl> + { <nl> + this . entity = checkNotNull ( entity , " entity class " ) ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the factory of the entity . <nl> + * <nl> + * @ param factory The entity factory <nl> + * @ return This builder <nl> + * @ throws NullPointerException If { @ code entity } is { @ code null } <nl> + * / <nl> + @ Nonnull <nl> + public final EntityEntryBuilder < E > factory ( @ Nonnull final Function < World , E > factory ) <nl> + { <nl> + this . factory = checkNotNull ( factory , " entity factory " ) ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the id of the entity . <nl> + * <nl> + * @ param id The entity id <nl> + * @ param network The network id <nl> + * @ return This builder <nl> + * @ throws NullPointerException If { @ code id } is { @ code null } <nl> + * / <nl> + @ Nonnull <nl> + public final EntityEntryBuilder < E > id ( @ Nonnull final ResourceLocation id , final int network ) <nl> + { <nl> + this . id = checkNotNull ( id , " id " ) ; <nl> + this . network = network ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the id of the entity . <nl> + * <nl> + * @ param id The entity id <nl> + * @ param network The network id <nl> + * @ return This builder <nl> + * @ throws NullPointerException If { @ code id } is { @ code null } <nl> + * / <nl> + @ Nonnull <nl> + public final EntityEntryBuilder < E > id ( @ Nonnull final String id , final int network ) <nl> + { <nl> + return this . id ( new ResourceLocation ( checkNotNull ( id , " id " ) ) , network ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the name of the entity . <nl> + * <nl> + * @ param name The entity name <nl> + * @ return This builder <nl> + * @ throws NullPointerException If { @ code name } is { @ code null } <nl> + * / <nl> + @ Nonnull <nl> + public final EntityEntryBuilder < E > name ( @ Nonnull final String name ) <nl> + { <nl> + this . name = checkNotNull ( name , " name " ) ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets entity tracking information . <nl> + * <nl> + * @ param range The tracking range <nl> + * @ param updateFrequency The tracking update frequency <nl> + * @ param sendVelocityUpdates If the entity should send velocity updates <nl> + * @ return This builder <nl> + * / <nl> + @ Nonnull <nl> + public final EntityEntryBuilder < E > tracker ( final int range , final int updateFrequency , final boolean sendVelocityUpdates ) <nl> + { <nl> + this . trackingRange = range ; <nl> + this . trackingUpdateFrequency = updateFrequency ; <nl> + this . trackingVelocityUpdates = sendVelocityUpdates ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds a spawn entry . <nl> + * <nl> + * @ param type The creature type <nl> + * @ param weight The spawn entry weight <nl> + * @ param min The minimum spawn count <nl> + * @ param max The maximum spawn count <nl> + * @ param biomes The biomes to add an entry in <nl> + * @ return This builder <nl> + * @ throws IllegalArgumentException If the entity is not a { @ link EntityLiving } <nl> + * @ throws NullPointerException If { @ code type } is { @ code null } <nl> + * @ throws NullPointerException If { @ code biomes } is { @ code null } <nl> + * / <nl> + @ Nonnull <nl> + public final EntityEntryBuilder < E > spawn ( @ Nonnull final EnumCreatureType type , final int weight , final int min , final int max , @ Nonnull final Biome . . . biomes ) <nl> + { <nl> + checkNotNull ( biomes , " biomes " ) ; <nl> + return this . spawn ( type , weight , min , max , Arrays . asList ( biomes ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds a spawn entry . <nl> + * <nl> + * @ param type The creature type <nl> + * @ param weight The spawn entry weight <nl> + * @ param min The minimum spawn count <nl> + * @ param max The maximum spawn count <nl> + * @ param biomes The biomes to add an entry in <nl> + * @ return This builder <nl> + * @ throws IllegalArgumentException If the entity is not a { @ link EntityLiving } <nl> + * @ throws NullPointerException If { @ code type } is { @ code null } <nl> + * @ throws NullPointerException If { @ code biomes } is { @ code null } <nl> + * / <nl> + @ Nonnull <nl> + public final EntityEntryBuilder < E > spawn ( @ Nonnull final EnumCreatureType type , final int weight , final int min , final int max , @ Nonnull final Iterable < Biome > biomes ) <nl> + { <nl> + checkNotNull ( type , " type " ) ; <nl> + checkNotNull ( biomes , " biomes " ) ; <nl> + if ( this . entity ! = null ) checkArgument ( EntityLiving . class . isAssignableFrom ( this . entity ) , " Cannot add spawns to a non - % s " , EntityLiving . class . getSimpleName ( ) ) ; <nl> + if ( this . spawns = = null ) this . spawns = new ArrayList < > ( ) ; <nl> + this . spawns . add ( new Spawn ( type , weight , min , max , biomes ) ) ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the egg of the entity . <nl> + * <nl> + * @ param primaryColor the primary egg color <nl> + * @ param secondaryColor the secondary egg color <nl> + * @ return This builder <nl> + * / <nl> + @ Nonnull <nl> + public final EntityEntryBuilder < E > egg ( final int primaryColor , final int secondaryColor ) <nl> + { <nl> + this . eggProvided = true ; <nl> + this . primaryEggColor = primaryColor ; <nl> + this . secondaryEggColor = secondaryColor ; <nl> + return this ; <nl> + } <nl> + <nl> + / * * <nl> + * Create an entity entry based on the data in this builder . <nl> + * <nl> + * @ return The entity entry <nl> + * @ throws IllegalStateException If the entity class has not been provided <nl> + * @ throws IllegalStateException If the entity id has not been provided <nl> + * @ throws IllegalStateException If the entity name has not been provided <nl> + * @ throws IllegalStateException If spawns have been provided for a non { @ link EntityLiving } <nl> + * @ throws ReflectionHelper . UnknownConstructorException If a { @ link # factory } has not been provided <nl> + * and { @ link # entity } does not have a constructor accepting { @ link World } <nl> + * / <nl> + @ Nonnull <nl> + public EntityEntry build ( ) <nl> + { <nl> + checkState ( this . entity ! = null , " entity class not provided " ) ; <nl> + checkState ( this . id ! = null , " entity id not provided " ) ; <nl> + checkState ( this . name ! = null , " entity name not provided " ) ; <nl> + if ( this . spawns ! = null ) checkState ( EntityLiving . class . isAssignableFrom ( EntityEntryBuilder . this . entity ) , " Cannot add spawns to a non - % s " , EntityLiving . class . getSimpleName ( ) ) ; <nl> + final BuiltEntityEntry entry = new BuiltEntityEntry ( this . entity , this . name ) ; <nl> + entry . factory = this . factory ! = null ? this . factory : new ConstructorFactory < E > ( this . entity ) { <nl> + @ Override <nl> + protected String describeEntity ( ) { <nl> + return String . valueOf ( EntityEntryBuilder . this . id ) ; <nl> + } <nl> + } ; <nl> + entry . setRegistryName ( this . id ) ; <nl> + if ( this . eggProvided ) entry . setEgg ( new EntityList . EntityEggInfo ( this . id , this . primaryEggColor , this . secondaryEggColor ) ) ; <nl> + return entry ; <nl> + } <nl> + <nl> + @ Nonnull <nl> + private EntityRegistry . EntityRegistration createRegistration ( ) <nl> + { <nl> + return EntityRegistry . instance ( ) . new EntityRegistration ( <nl> + this . mod , this . id , this . entity , this . name , this . network , <nl> + this . trackingRange , this . trackingUpdateFrequency , this . trackingVelocityUpdates <nl> + ) ; <nl> + } <nl> + <nl> + static abstract class ConstructorFactory < E extends Entity > implements Function < World , E > <nl> + { <nl> + private final Constructor < ? extends E > constructor ; <nl> + <nl> + ConstructorFactory ( final Class < ? extends E > entity ) <nl> + { <nl> + this . constructor = ReflectionHelper . findConstructor ( entity , World . class ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public E apply ( final World world ) <nl> + { <nl> + try <nl> + { <nl> + return this . constructor . newInstance ( world ) ; <nl> + } <nl> + catch ( final IllegalAccessException | InstantiationException | InvocationTargetException e ) <nl> + { <nl> + FMLLog . log . error ( " Encountered an exception while constructing entity ' { } ' " , this . describeEntity ( ) , e ) ; <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + protected abstract String describeEntity ( ) ; <nl> + } <nl> + <nl> + public final class BuiltEntityEntry extends EntityEntry <nl> + { <nl> + private boolean added ; <nl> + <nl> + BuiltEntityEntry ( final Class < ? extends Entity > cls , final String name ) <nl> + { <nl> + super ( cls , name ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected final void init ( ) { <nl> + / / NOOP - we handle this in build <nl> + } <nl> + <nl> + @ SuppressWarnings ( " ConstantConditions " ) <nl> + public final void addedToRegistry ( ) <nl> + { <nl> + if ( this . added ) return ; <nl> + this . added = true ; <nl> + EntityRegistry . instance ( ) . insert ( EntityEntryBuilder . this . entity , EntityEntryBuilder . this . createRegistration ( ) ) ; <nl> + if ( EntityEntryBuilder . this . spawns ! = null ) <nl> + { <nl> + for ( final Spawn spawn : EntityEntryBuilder . this . spawns ) <nl> + { <nl> + spawn . insert ( ) ; <nl> + } <nl> + EntityEntryBuilder . this . spawns = null ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public final class Spawn <nl> + { <nl> + private final EnumCreatureType type ; <nl> + private final int weight ; <nl> + private final int min ; <nl> + private final int max ; <nl> + private final Iterable < Biome > biomes ; <nl> + <nl> + public Spawn ( final EnumCreatureType type , final int weight , final int min , final int max , final Iterable < Biome > biomes ) <nl> + { <nl> + this . type = type ; <nl> + this . weight = weight ; <nl> + this . min = min ; <nl> + this . max = max ; <nl> + this . biomes = biomes ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + final void insert ( ) <nl> + { <nl> + for ( final Biome biome : this . biomes ) { <nl> + final List < Biome . SpawnListEntry > entries = biome . getSpawnableList ( this . type ) ; <nl> + boolean found = false ; <nl> + for ( final Biome . SpawnListEntry entry : entries ) { <nl> + if ( entry . entityClass = = EntityEntryBuilder . this . entity ) { <nl> + entry . itemWeight = this . weight ; <nl> + entry . minGroupCount = this . min ; <nl> + entry . maxGroupCount = this . max ; <nl> + found = true ; <nl> + break ; <nl> + } <nl> + } <nl> + if ( ! found ) entries . add ( new Biome . SpawnListEntry ( ( Class < ? extends EntityLiving > ) EntityEntryBuilder . this . entity , this . weight , this . min , this . max ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / EntityRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / EntityRegistry . java <nl> index 77abd68 . . a1de924 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / EntityRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / EntityRegistry . java <nl> @ @ - 362 , 4 + 362 , 11 @ @ public class EntityRegistry <nl> } <nl> return null ; <nl> } <nl> + <nl> + / / This is an internal method - do not touch . <nl> + final void insert ( final Class < ? extends Entity > entity , final EntityRegistration registration ) <nl> + { <nl> + this . entityClassRegistrations . put ( entity , registration ) ; <nl> + this . entityRegistrations . put ( registration . container , registration ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / ReflectionHelper . java b / src / main / java / net / minecraftforge / fml / relauncher / ReflectionHelper . java <nl> index 434d56b . . e5b7281 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / ReflectionHelper . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / ReflectionHelper . java <nl> @ @ - 24 , 6 + 24 , 8 @ @ import org . apache . commons . lang3 . StringUtils ; <nl> <nl> import javax . annotation . Nonnull ; <nl> import javax . annotation . Nullable ; <nl> + <nl> + import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> / * * <nl> @ @ - 88 , 6 + 90 , 14 @ @ public class ReflectionHelper <nl> } <nl> } <nl> <nl> + public static class UnknownConstructorException extends RuntimeException <nl> + { <nl> + public UnknownConstructorException ( final String message ) <nl> + { <nl> + super ( message ) ; <nl> + } <nl> + } <nl> + <nl> public static Field findField ( Class < ? > clazz , String . . . fieldNames ) <nl> { <nl> Exception failed = null ; <nl> @ @ - 220 , 4 + 230 , 45 @ @ public class ReflectionHelper <nl> throw new UnableToFindMethodException ( e ) ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Finds a constructor in the specified class that has matching parameter types . <nl> + * <nl> + * @ param klass The class to find the constructor in <nl> + * @ param parameterTypes The parameter types of the constructor . <nl> + * @ param < T > The type <nl> + * @ return The constructor <nl> + * @ throws NullPointerException if { @ code klass } is null <nl> + * @ throws NullPointerException if { @ code parameterTypes } is null <nl> + * @ throws UnknownConstructorException if the constructor could not be found <nl> + * / <nl> + @ Nonnull <nl> + public static < T > Constructor < T > findConstructor ( @ Nonnull final Class < T > klass , @ Nonnull final Class < ? > . . . parameterTypes ) <nl> + { <nl> + Preconditions . checkNotNull ( klass , " class " ) ; <nl> + Preconditions . checkNotNull ( parameterTypes , " parameter types " ) ; <nl> + <nl> + final Constructor < T > constructor ; <nl> + try <nl> + { <nl> + constructor = klass . getDeclaredConstructor ( parameterTypes ) ; <nl> + constructor . setAccessible ( true ) ; <nl> + } <nl> + catch ( final NoSuchMethodException e ) <nl> + { <nl> + final StringBuilder desc = new StringBuilder ( ) ; <nl> + desc . append ( klass . getSimpleName ( ) ) . append ( ' ( ' ) ; <nl> + for ( int i = 0 , length = parameterTypes . length ; i < length ; i + + ) <nl> + { <nl> + desc . append ( parameterTypes [ i ] . getName ( ) ) ; <nl> + if ( i > length ) <nl> + { <nl> + desc . append ( ' , ' ) . append ( ' ' ) ; <nl> + } <nl> + } <nl> + desc . append ( ' ) ' ) ; <nl> + throw new UnknownConstructorException ( " Could not find constructor ' " + desc . toString ( ) + " ' in " + klass ) ; <nl> + } <nl> + return constructor ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 21c285e . . bfab5de 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 56 , 6 + 56 , 7 @ @ import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . StartupQuery ; <nl> import net . minecraftforge . fml . common . ZipperUtil ; <nl> import net . minecraftforge . fml . common . registry . EntityEntry ; <nl> + import net . minecraftforge . fml . common . registry . EntityEntryBuilder ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfession ; <nl> <nl> @ @ - 442 , 6 + 443 , 10 @ @ public class GameData <nl> @ Override <nl> public void onAdd ( IForgeRegistryInternal < EntityEntry > owner , RegistryManager stage , int id , EntityEntry entry , @ Nullable EntityEntry oldEntry ) <nl> { <nl> + if ( entry instanceof EntityEntryBuilder . BuiltEntityEntry ) <nl> + { <nl> + ( ( EntityEntryBuilder . BuiltEntityEntry ) entry ) . addedToRegistry ( ) ; <nl> + } <nl> if ( entry . getEgg ( ) ! = null ) <nl> EntityList . ENTITY _ EGGS . put ( entry . getRegistryName ( ) , entry . getEgg ( ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / common / ForgeChunkManager . java b / common / net / minecraftforge / common / ForgeChunkManager . java <nl> index 5182906 . . 7d91e49 100644 <nl> - - - a / common / net / minecraftforge / common / ForgeChunkManager . java <nl> + + + b / common / net / minecraftforge / common / ForgeChunkManager . java <nl> @ @ - 9 , 9 + 9 , 14 @ @ import java . util . LinkedHashSet ; <nl> import java . util . LinkedList ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> + import java . util . UUID ; <nl> import java . util . logging . Level ; <nl> <nl> import com . google . common . collect . ArrayListMultimap ; <nl> + import com . google . common . collect . BiMap ; <nl> + import com . google . common . collect . HashBiMap ; <nl> + import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . ImmutableSetMultimap ; <nl> import com . google . common . collect . LinkedHashMultimap ; <nl> import com . google . common . collect . ListMultimap ; <nl> @ @ - 27 , 6 + 32 , 7 @ @ import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> <nl> + import net . minecraft . src . Chunk ; <nl> import net . minecraft . src . ChunkCoordIntPair ; <nl> import net . minecraft . src . CompressedStreamTools ; <nl> import net . minecraft . src . Entity ; <nl> @ @ - 68 , 6 + 74 , 7 @ @ public class ForgeChunkManager <nl> private static Map < String , LoadingCallback > callbacks = Maps . newHashMap ( ) ; <nl> <nl> private static Map < World , SetMultimap < ChunkCoordIntPair , Ticket > > forcedChunks = Maps . newHashMap ( ) ; <nl> + private static BiMap < UUID , Ticket > pendingEntities = HashBiMap . create ( ) ; <nl> <nl> / * * <nl> * All mods requiring chunkloading need to implement this to handle the <nl> @ @ - 108 , 9 + 115 , 8 @ @ public class ForgeChunkManager <nl> private World world ; <nl> private int maxDepth ; <nl> private String entityClazz ; <nl> - private int entityX ; <nl> - private int entityY ; <nl> - private int entityZ ; <nl> + private int entityChunkX ; <nl> + private int entityChunkZ ; <nl> private Entity entity ; <nl> <nl> Ticket ( String modId , Type type , World world ) <nl> @ @ - 122 , 14 + 128 , 6 @ @ public class ForgeChunkManager <nl> this . requestedChunks = Sets . newLinkedHashSet ( ) ; <nl> } <nl> <nl> - void bindEntityData ( int x , int y , int z , String clazz ) <nl> - { <nl> - this . entityX = x ; <nl> - this . entityY = y ; <nl> - this . entityZ = z ; <nl> - this . entityClazz = clazz ; <nl> - } <nl> - <nl> / * * <nl> * The chunk list depth can be manipulated up to the maximal grant allowed for the mod . This value is configurable . Once the maximum is reached , <nl> * the least recently forced chunk , by original registration time , is removed from the forced chunk list . <nl> @ @ - 189 , 37 + 187 , 12 @ @ public class ForgeChunkManager <nl> } <nl> <nl> / * * <nl> - * Get the entity class associated with this ticket . Only valid for callbacks . <nl> - * @ return <nl> - * / <nl> - public String getEntityClass ( ) <nl> - { <nl> - return this . entityClazz ; <nl> - } <nl> - <nl> - / * * <nl> - * Get the last known entity X coordinate for this ticket . Only valid for callbacks . <nl> - * @ return <nl> - * / <nl> - public int getEntityX ( ) <nl> - { <nl> - return entityX ; <nl> - } <nl> - / * * <nl> - * Get the last known entity Y coordinate for this ticket . Only valid for callbacks . <nl> - * @ return <nl> - * / <nl> - public int getEntityY ( ) <nl> - { <nl> - return entityY ; <nl> - } <nl> - / * * <nl> - * Get the last known entity Z coordinate for this ticket . Only valid for callbacks . <nl> + * Get the entity associated with this { @ link Type # ENTITY } type ticket <nl> * @ return <nl> * / <nl> - public int getEntityZ ( ) <nl> + public Entity getEntity ( ) <nl> { <nl> - return entityZ ; <nl> + return entity ; <nl> } <nl> } <nl> <nl> @ @ - 287 , 16 + 260 , 35 @ @ public class ForgeChunkManager <nl> tick . modData = modData ; <nl> if ( type = = Type . ENTITY ) <nl> { <nl> - int entX = ticket . getInteger ( " entityX " ) ; <nl> - int entY = ticket . getInteger ( " entityY " ) ; <nl> - int entZ = ticket . getInteger ( " entityZ " ) ; <nl> - String entClass = ticket . getString ( " entityClass " ) ; <nl> - tick . bindEntityData ( entX , entY , entZ , entClass ) ; <nl> + tick . entityChunkX = ticket . getInteger ( " chunkX " ) ; <nl> + tick . entityChunkZ = ticket . getInteger ( " chunkZ " ) ; <nl> + UUID uuid = new UUID ( ticket . getLong ( " PersistentIDMSB " ) , ticket . getLong ( " PersistentIDLSB " ) ) ; <nl> + / / add the ticket to the " pending entity " list <nl> + pendingEntities . put ( uuid , tick ) ; <nl> } <nl> loadedTickets . put ( modId , tick ) ; <nl> } <nl> } <nl> <nl> + for ( Ticket tick : ImmutableSet . copyOf ( pendingEntities . values ( ) ) ) <nl> + { <nl> + if ( tick . ticketType = = Type . ENTITY & & tick . entity = = null ) <nl> + { <nl> + / / force the world to load the entity ' s chunk <nl> + / / the load will come back through the loadEntity method and attach the entity <nl> + / / to the ticket <nl> + world . getChunkFromChunkCoords ( tick . entityChunkX , tick . entityChunkZ ) ; <nl> + } <nl> + } <nl> + for ( Ticket tick : ImmutableSet . copyOf ( pendingEntities . values ( ) ) ) <nl> + { <nl> + if ( tick . ticketType = = Type . ENTITY & & tick . entity = = null ) <nl> + { <nl> + FMLLog . warning ( " Failed to load persistent chunkloading entity % s from store . " , pendingEntities . inverse ( ) . get ( tick ) ) ; <nl> + loadedTickets . remove ( tick . modId , tick ) ; <nl> + } <nl> + } <nl> + pendingEntities . clear ( ) ; <nl> / / send callbacks <nl> for ( String modId : loadedTickets . keySet ( ) ) <nl> { <nl> @ @ - 537 , 10 + 529 , 10 @ @ public class ForgeChunkManager <nl> ticket . setCompoundTag ( " ModData " , tick . modData ) ; <nl> if ( tick . ticketType = = Type . ENTITY ) <nl> { <nl> - ticket . setInteger ( " entityX " , MathHelper . floor _ double ( tick . entity . posX ) ) ; <nl> - ticket . setInteger ( " entityY " , MathHelper . floor _ double ( tick . entity . posY ) ) ; <nl> - ticket . setInteger ( " entityZ " , MathHelper . floor _ double ( tick . entity . posZ ) ) ; <nl> - ticket . setString ( " entityClass " , tick . entity . getClass ( ) . getName ( ) ) ; <nl> + ticket . setInteger ( " chunkX " , MathHelper . floor _ double ( tick . entity . chunkCoordX ) ) ; <nl> + ticket . setInteger ( " chunkZ " , MathHelper . floor _ double ( tick . entity . chunkCoordZ ) ) ; <nl> + ticket . setLong ( " persistentIDMSB " , tick . entity . getPersistentID ( ) . getMostSignificantBits ( ) ) ; <nl> + ticket . setLong ( " persistentIDLSB " , tick . entity . getPersistentID ( ) . getLeastSignificantBits ( ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 554 , 4 + 546 , 15 @ @ public class ForgeChunkManager <nl> return ; <nl> } <nl> } <nl> + <nl> + static void loadEntity ( Entity entity ) <nl> + { <nl> + UUID id = entity . getPersistentID ( ) ; <nl> + Ticket tick = pendingEntities . get ( id ) ; <nl> + if ( tick ! = null ) <nl> + { <nl> + tick . bindEntity ( entity ) ; <nl> + pendingEntities . remove ( id ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / common / net / minecraftforge / common / ForgeInternalHandler . java b / common / net / minecraftforge / common / ForgeInternalHandler . java <nl> index d926438 . . 7def0dd 100644 <nl> - - - a / common / net / minecraftforge / common / ForgeInternalHandler . java <nl> + + + b / common / net / minecraftforge / common / ForgeInternalHandler . java <nl> @ @ - 1 , 5 + 1 , 7 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> + import java . util . UUID ; <nl> + <nl> import net . minecraft . src . * ; <nl> import net . minecraftforge . event . * ; <nl> import net . minecraftforge . event . entity . * ; <nl> @ @ - 10 , 6 + 12 , 17 @ @ public class ForgeInternalHandler <nl> @ ForgeSubscribe ( priority = EventPriority . HIGHEST ) <nl> public void onEntityJoinWorld ( EntityJoinWorldEvent event ) <nl> { <nl> + if ( ! event . world . isRemote ) <nl> + { <nl> + if ( event . entity . getPersistentID ( ) = = null ) <nl> + { <nl> + event . entity . generatePersistentID ( ) ; <nl> + } <nl> + else <nl> + { <nl> + ForgeChunkManager . loadEntity ( event . entity ) ; <nl> + } <nl> + } <nl> Entity entity = event . entity ; <nl> if ( entity instanceof EntityItem ) <nl> { <nl> diff - - git a / patches / common / net / minecraft / src / Entity . java . patch b / patches / common / net / minecraft / src / Entity . java . patch <nl> index fd46d31 . . c7ff3cd 100644 <nl> - - - a / patches / common / net / minecraft / src / Entity . java . patch <nl> + + + b / patches / common / net / minecraft / src / Entity . java . patch <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - - - . . / src _ base / common / net / minecraft / src / Entity . java <nl> + + + . . / src _ work / common / net / minecraft / src / Entity . java <nl> - @ @ - 2 , 6 + 2 , 8 @ @ <nl> + @ @ - 2 , 9 + 2 , 12 @ @ <nl> <nl> import cpw . mods . fml . common . Side ; <nl> import cpw . mods . fml . common . asm . SideOnly ; <nl> @ @ - 9 , 7 + 9 , 11 @ @ <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Random ; <nl> - @ @ - 186 , 6 + 188 , 10 @ @ <nl> + + import java . util . UUID ; <nl> + <nl> + public abstract class Entity <nl> + { <nl> + @ @ - 186 , 6 + 189 , 11 @ @ <nl> public boolean ignoreFrustumCheck ; <nl> public boolean isAirBorne ; <nl> public EnumEntitySize myEntitySize ; <nl> @ @ - 17 , 13 + 21 , 19 @ @ <nl> + private NBTTagCompound customEntityData ; <nl> + public boolean captureDrops = false ; <nl> + public ArrayList < EntityItem > capturedDrops = new ArrayList < EntityItem > ( ) ; <nl> + + private UUID persistentID ; <nl> <nl> public Entity ( World par1World ) <nl> { <nl> - @ @ - 1382 , 6 + 1388 , 10 @ @ <nl> + @ @ - 1382 , 6 + 1390 , 15 @ @ <nl> par1NBTTagCompound . setShort ( " Fire " , ( short ) this . fire ) ; <nl> par1NBTTagCompound . setShort ( " Air " , ( short ) this . getAir ( ) ) ; <nl> par1NBTTagCompound . setBoolean ( " OnGround " , this . onGround ) ; <nl> + + if ( persistentID ! = null ) <nl> + + { <nl> + + par1NBTTagCompound . setLong ( " PersistentIDMSB " , persistentID . getMostSignificantBits ( ) ) ; <nl> + + par1NBTTagCompound . setLong ( " PersistentIDLSB " , persistentID . getLeastSignificantBits ( ) ) ; <nl> + + } <nl> + if ( customEntityData ! = null ) <nl> + { <nl> + par1NBTTagCompound . setCompoundTag ( " ForgeData " , customEntityData ) ; <nl> @ @ - 31 , 7 + 41 , 7 @ @ <nl> this . writeEntityToNBT ( par1NBTTagCompound ) ; <nl> } <nl> <nl> - @ @ - 1423 , 6 + 1433 , 10 @ @ <nl> + @ @ - 1423 , 6 + 1440 , 14 @ @ <nl> this . onGround = par1NBTTagCompound . getBoolean ( " OnGround " ) ; <nl> this . setPosition ( this . posX , this . posY , this . posZ ) ; <nl> this . setRotation ( this . rotationYaw , this . rotationPitch ) ; <nl> @ @ - 39 , 10 + 49 , 14 @ @ <nl> + { <nl> + customEntityData = par1NBTTagCompound . getCompoundTag ( " ForgeData " ) ; <nl> + } <nl> + + if ( par1NBTTagCompound . hasKey ( " PersistentIDMSB " ) & & par1NBTTagCompound . hasKey ( " PersistentIDLSB " ) ) <nl> + + { <nl> + + persistentID = new UUID ( par1NBTTagCompound . getLong ( " PersistentIDMSB " ) , par1NBTTagCompound . getLong ( " PersistentIDLSB " ) ) ; <nl> + + } <nl> this . readEntityFromNBT ( par1NBTTagCompound ) ; <nl> } <nl> <nl> - @ @ - 1509 , 7 + 1523 , 14 @ @ <nl> + @ @ - 1509 , 7 + 1534 , 14 @ @ <nl> { <nl> EntityItem var3 = new EntityItem ( this . worldObj , this . posX , this . posY + ( double ) par2 , this . posZ , par1ItemStack ) ; <nl> var3 . delayBeforeCanPickup = 10 ; <nl> @ @ - 58 , 7 + 72 , 7 @ @ <nl> return var3 ; <nl> } <nl> <nl> - @ @ - 1843 , 7 + 1864 , 7 @ @ <nl> + @ @ - 1843 , 7 + 1875 , 7 @ @ <nl> * / <nl> public boolean isRiding ( ) <nl> { <nl> @ @ - 67 , 7 + 81 , 7 @ @ <nl> } <nl> <nl> / * * <nl> - @ @ - 2107 , 4 + 2128 , 59 @ @ <nl> + @ @ - 2107 , 4 + 2139 , 72 @ @ <nl> { <nl> return String . format ( " % s [ \ ' % s \ ' / % d , l = \ ' % s \ ' , x = % . 2f , y = % . 2f , z = % . 2f ] " , new Object [ ] { this . getClass ( ) . getSimpleName ( ) , this . getEntityName ( ) , Integer . valueOf ( this . entityId ) , this . worldObj = = null ? " ~ NULL ~ " : this . worldObj . getWorldInfo ( ) . getWorldName ( ) , Double . valueOf ( this . posX ) , Double . valueOf ( this . posY ) , Double . valueOf ( this . posZ ) } ) ; <nl> } <nl> @ @ - 98 , 7 + 112 , 7 @ @ <nl> + <nl> + / * * <nl> + * Called when a user uses the creative pick block button on this entity . <nl> - + * <nl> + + * <nl> + * @ param target The full target the player is looking at <nl> + * @ return A ItemStack to add to the player ' s inventory , Null if nothing should be added . <nl> + * / <nl> @ @ - 126 , 4 + 140 , 17 @ @ <nl> + } <nl> + return null ; <nl> + } <nl> + + <nl> + + public UUID getPersistentID ( ) <nl> + + { <nl> + + return persistentID ; <nl> + + } <nl> + + <nl> + + public synchronized void generatePersistentID ( ) <nl> + + { <nl> + + if ( persistentID = = null ) <nl> + + { <nl> + + persistentID = UUID . randomUUID ( ) ; <nl> + + } <nl> + + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java 
 index 6bc6e5a . . 0aa5c76 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java 
 @ @ - 18 , 21 + 18 , 20 @ @ 
 * / 
 package net . minecraftforge . fml . common . registry ; 
 
 - import java . lang . reflect . Constructor ; 
 - 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityList ; 
 import net . minecraft . entity . EntityList . EntityEggInfo ; 
 import net . minecraft . world . World ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . registries . IForgeRegistryEntry . Impl ; 
 
 + import java . util . function . Function ; 
 + 
 public class EntityEntry extends Impl < EntityEntry > 
 { 
 private Class < ? extends Entity > cls ; 
 private String name ; 
 private EntityEggInfo egg ; 
 - private Constructor < ? > ctr ; 
 + Function < World , ? extends Entity > factory ; 
 
 public EntityEntry ( Class < ? extends Entity > cls , String name ) 
 { 
 @ @ - 44 , 14 + 43 , 12 @ @ public class EntityEntry extends Impl < EntityEntry > 
 / / Protected method , to make this optional , in case people subclass this to have a better factory . 
 protected void init ( ) 
 { 
 - try 
 - { 
 - this . ctr = this . cls . getConstructor ( World . class ) ; 
 - } 
 - catch ( NoSuchMethodException e ) 
 - { 
 - throw new RuntimeException ( " Invalid class " + this . cls + " no constructor taking " + World . class . getName ( ) ) ; 
 - } 
 + this . factory = new EntityEntryBuilder . ConstructorFactory < Entity > ( this . cls ) { 
 + @ Override 
 + protected String describeEntity ( ) { 
 + return String . valueOf ( EntityEntry . this . getRegistryName ( ) ) ; 
 + } 
 + } ; 
 } 
 
 public Class < ? extends Entity > getEntityClass ( ) { return this . cls ; } 
 @ @ - 67 , 14 + 64 , 6 @ @ public class EntityEntry extends Impl < EntityEntry > 
 
 public Entity newInstance ( World world ) 
 { 
 - try 
 - { 
 - return ( Entity ) this . ctr . newInstance ( world ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - FMLLog . log . error ( " Error creating entity . " , e ) ; 
 - return null ; 
 - } 
 + return this . factory . apply ( world ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntryBuilder . java b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntryBuilder . java 
 new file mode 100644 
 index 0000000 . . 325519e 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntryBuilder . java 
 @ @ - 0 , 0 + 1 , 370 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . fml . common . registry ; 
 + 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraft . entity . EntityList ; 
 + import net . minecraft . entity . EntityLiving ; 
 + import net . minecraft . entity . EnumCreatureType ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . world . World ; 
 + import net . minecraft . world . biome . Biome ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import net . minecraftforge . fml . relauncher . ReflectionHelper ; 
 + 
 + import java . lang . reflect . Constructor ; 
 + import java . lang . reflect . InvocationTargetException ; 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . List ; 
 + import java . util . function . Function ; 
 + 
 + import javax . annotation . Nonnull ; 
 + import javax . annotation . Nullable ; 
 + 
 + import static com . google . common . base . Preconditions . checkArgument ; 
 + import static com . google . common . base . Preconditions . checkNotNull ; 
 + import static com . google . common . base . Preconditions . checkState ; 
 + 
 + / * * 
 + * An entity registry entry builder . 
 + * 
 + * @ param < E > The entity type 
 + * / 
 + public final class EntityEntryBuilder < E extends Entity > 
 + { 
 + private final ModContainer mod ; 
 + @ Nullable private Class < ? extends E > entity ; 
 + @ Nullable private Function < World , E > factory ; 
 + @ Nullable private ResourceLocation id ; 
 + private int network ; 
 + @ Nullable private String name ; 
 + private int trackingRange ; 
 + private int trackingUpdateFrequency ; 
 + private boolean trackingVelocityUpdates ; 
 + private boolean eggProvided ; 
 + private int primaryEggColor ; 
 + private int secondaryEggColor ; 
 + @ Nullable private Collection < Spawn > spawns ; 
 + 
 + / * * 
 + * Creates a new entity entry builder . 
 + * 
 + * @ param < E > The entity type 
 + * @ return A new entity entry builder 
 + * / 
 + @ Nonnull 
 + public static < E extends Entity > EntityEntryBuilder < E > create ( ) 
 + { 
 + return new EntityEntryBuilder < > ( ) ; 
 + } 
 + 
 + private EntityEntryBuilder ( ) 
 + { 
 + this . mod = Loader . instance ( ) . activeModContainer ( ) ; 
 + } 
 + 
 + / * * 
 + * Sets the class of the entity . 
 + * 
 + * < p > Entities will be constructed using a constructor accepting { @ link World } . If you wish 
 + * to use your own factory , use { @ link # factory ( Function ) } . < / p > 
 + * 
 + * @ param entity The entity class 
 + * @ return This builder 
 + * @ throws NullPointerException If { @ code entity } is { @ code null } 
 + * / 
 + @ Nonnull 
 + public final EntityEntryBuilder < E > entity ( @ Nonnull final Class < ? extends E > entity ) 
 + { 
 + this . entity = checkNotNull ( entity , " entity class " ) ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Sets the factory of the entity . 
 + * 
 + * @ param factory The entity factory 
 + * @ return This builder 
 + * @ throws NullPointerException If { @ code entity } is { @ code null } 
 + * / 
 + @ Nonnull 
 + public final EntityEntryBuilder < E > factory ( @ Nonnull final Function < World , E > factory ) 
 + { 
 + this . factory = checkNotNull ( factory , " entity factory " ) ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Sets the id of the entity . 
 + * 
 + * @ param id The entity id 
 + * @ param network The network id 
 + * @ return This builder 
 + * @ throws NullPointerException If { @ code id } is { @ code null } 
 + * / 
 + @ Nonnull 
 + public final EntityEntryBuilder < E > id ( @ Nonnull final ResourceLocation id , final int network ) 
 + { 
 + this . id = checkNotNull ( id , " id " ) ; 
 + this . network = network ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Sets the id of the entity . 
 + * 
 + * @ param id The entity id 
 + * @ param network The network id 
 + * @ return This builder 
 + * @ throws NullPointerException If { @ code id } is { @ code null } 
 + * / 
 + @ Nonnull 
 + public final EntityEntryBuilder < E > id ( @ Nonnull final String id , final int network ) 
 + { 
 + return this . id ( new ResourceLocation ( checkNotNull ( id , " id " ) ) , network ) ; 
 + } 
 + 
 + / * * 
 + * Sets the name of the entity . 
 + * 
 + * @ param name The entity name 
 + * @ return This builder 
 + * @ throws NullPointerException If { @ code name } is { @ code null } 
 + * / 
 + @ Nonnull 
 + public final EntityEntryBuilder < E > name ( @ Nonnull final String name ) 
 + { 
 + this . name = checkNotNull ( name , " name " ) ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Sets entity tracking information . 
 + * 
 + * @ param range The tracking range 
 + * @ param updateFrequency The tracking update frequency 
 + * @ param sendVelocityUpdates If the entity should send velocity updates 
 + * @ return This builder 
 + * / 
 + @ Nonnull 
 + public final EntityEntryBuilder < E > tracker ( final int range , final int updateFrequency , final boolean sendVelocityUpdates ) 
 + { 
 + this . trackingRange = range ; 
 + this . trackingUpdateFrequency = updateFrequency ; 
 + this . trackingVelocityUpdates = sendVelocityUpdates ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Adds a spawn entry . 
 + * 
 + * @ param type The creature type 
 + * @ param weight The spawn entry weight 
 + * @ param min The minimum spawn count 
 + * @ param max The maximum spawn count 
 + * @ param biomes The biomes to add an entry in 
 + * @ return This builder 
 + * @ throws IllegalArgumentException If the entity is not a { @ link EntityLiving } 
 + * @ throws NullPointerException If { @ code type } is { @ code null } 
 + * @ throws NullPointerException If { @ code biomes } is { @ code null } 
 + * / 
 + @ Nonnull 
 + public final EntityEntryBuilder < E > spawn ( @ Nonnull final EnumCreatureType type , final int weight , final int min , final int max , @ Nonnull final Biome . . . biomes ) 
 + { 
 + checkNotNull ( biomes , " biomes " ) ; 
 + return this . spawn ( type , weight , min , max , Arrays . asList ( biomes ) ) ; 
 + } 
 + 
 + / * * 
 + * Adds a spawn entry . 
 + * 
 + * @ param type The creature type 
 + * @ param weight The spawn entry weight 
 + * @ param min The minimum spawn count 
 + * @ param max The maximum spawn count 
 + * @ param biomes The biomes to add an entry in 
 + * @ return This builder 
 + * @ throws IllegalArgumentException If the entity is not a { @ link EntityLiving } 
 + * @ throws NullPointerException If { @ code type } is { @ code null } 
 + * @ throws NullPointerException If { @ code biomes } is { @ code null } 
 + * / 
 + @ Nonnull 
 + public final EntityEntryBuilder < E > spawn ( @ Nonnull final EnumCreatureType type , final int weight , final int min , final int max , @ Nonnull final Iterable < Biome > biomes ) 
 + { 
 + checkNotNull ( type , " type " ) ; 
 + checkNotNull ( biomes , " biomes " ) ; 
 + if ( this . entity ! = null ) checkArgument ( EntityLiving . class . isAssignableFrom ( this . entity ) , " Cannot add spawns to a non - % s " , EntityLiving . class . getSimpleName ( ) ) ; 
 + if ( this . spawns = = null ) this . spawns = new ArrayList < > ( ) ; 
 + this . spawns . add ( new Spawn ( type , weight , min , max , biomes ) ) ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Sets the egg of the entity . 
 + * 
 + * @ param primaryColor the primary egg color 
 + * @ param secondaryColor the secondary egg color 
 + * @ return This builder 
 + * / 
 + @ Nonnull 
 + public final EntityEntryBuilder < E > egg ( final int primaryColor , final int secondaryColor ) 
 + { 
 + this . eggProvided = true ; 
 + this . primaryEggColor = primaryColor ; 
 + this . secondaryEggColor = secondaryColor ; 
 + return this ; 
 + } 
 + 
 + / * * 
 + * Create an entity entry based on the data in this builder . 
 + * 
 + * @ return The entity entry 
 + * @ throws IllegalStateException If the entity class has not been provided 
 + * @ throws IllegalStateException If the entity id has not been provided 
 + * @ throws IllegalStateException If the entity name has not been provided 
 + * @ throws IllegalStateException If spawns have been provided for a non { @ link EntityLiving } 
 + * @ throws ReflectionHelper . UnknownConstructorException If a { @ link # factory } has not been provided 
 + * and { @ link # entity } does not have a constructor accepting { @ link World } 
 + * / 
 + @ Nonnull 
 + public EntityEntry build ( ) 
 + { 
 + checkState ( this . entity ! = null , " entity class not provided " ) ; 
 + checkState ( this . id ! = null , " entity id not provided " ) ; 
 + checkState ( this . name ! = null , " entity name not provided " ) ; 
 + if ( this . spawns ! = null ) checkState ( EntityLiving . class . isAssignableFrom ( EntityEntryBuilder . this . entity ) , " Cannot add spawns to a non - % s " , EntityLiving . class . getSimpleName ( ) ) ; 
 + final BuiltEntityEntry entry = new BuiltEntityEntry ( this . entity , this . name ) ; 
 + entry . factory = this . factory ! = null ? this . factory : new ConstructorFactory < E > ( this . entity ) { 
 + @ Override 
 + protected String describeEntity ( ) { 
 + return String . valueOf ( EntityEntryBuilder . this . id ) ; 
 + } 
 + } ; 
 + entry . setRegistryName ( this . id ) ; 
 + if ( this . eggProvided ) entry . setEgg ( new EntityList . EntityEggInfo ( this . id , this . primaryEggColor , this . secondaryEggColor ) ) ; 
 + return entry ; 
 + } 
 + 
 + @ Nonnull 
 + private EntityRegistry . EntityRegistration createRegistration ( ) 
 + { 
 + return EntityRegistry . instance ( ) . new EntityRegistration ( 
 + this . mod , this . id , this . entity , this . name , this . network , 
 + this . trackingRange , this . trackingUpdateFrequency , this . trackingVelocityUpdates 
 + ) ; 
 + } 
 + 
 + static abstract class ConstructorFactory < E extends Entity > implements Function < World , E > 
 + { 
 + private final Constructor < ? extends E > constructor ; 
 + 
 + ConstructorFactory ( final Class < ? extends E > entity ) 
 + { 
 + this . constructor = ReflectionHelper . findConstructor ( entity , World . class ) ; 
 + } 
 + 
 + @ Override 
 + public E apply ( final World world ) 
 + { 
 + try 
 + { 
 + return this . constructor . newInstance ( world ) ; 
 + } 
 + catch ( final IllegalAccessException | InstantiationException | InvocationTargetException e ) 
 + { 
 + FMLLog . log . error ( " Encountered an exception while constructing entity ' { } ' " , this . describeEntity ( ) , e ) ; 
 + return null ; 
 + } 
 + } 
 + 
 + protected abstract String describeEntity ( ) ; 
 + } 
 + 
 + public final class BuiltEntityEntry extends EntityEntry 
 + { 
 + private boolean added ; 
 + 
 + BuiltEntityEntry ( final Class < ? extends Entity > cls , final String name ) 
 + { 
 + super ( cls , name ) ; 
 + } 
 + 
 + @ Override 
 + protected final void init ( ) { 
 + / / NOOP - we handle this in build 
 + } 
 + 
 + @ SuppressWarnings ( " ConstantConditions " ) 
 + public final void addedToRegistry ( ) 
 + { 
 + if ( this . added ) return ; 
 + this . added = true ; 
 + EntityRegistry . instance ( ) . insert ( EntityEntryBuilder . this . entity , EntityEntryBuilder . this . createRegistration ( ) ) ; 
 + if ( EntityEntryBuilder . this . spawns ! = null ) 
 + { 
 + for ( final Spawn spawn : EntityEntryBuilder . this . spawns ) 
 + { 
 + spawn . insert ( ) ; 
 + } 
 + EntityEntryBuilder . this . spawns = null ; 
 + } 
 + } 
 + } 
 + 
 + public final class Spawn 
 + { 
 + private final EnumCreatureType type ; 
 + private final int weight ; 
 + private final int min ; 
 + private final int max ; 
 + private final Iterable < Biome > biomes ; 
 + 
 + public Spawn ( final EnumCreatureType type , final int weight , final int min , final int max , final Iterable < Biome > biomes ) 
 + { 
 + this . type = type ; 
 + this . weight = weight ; 
 + this . min = min ; 
 + this . max = max ; 
 + this . biomes = biomes ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + final void insert ( ) 
 + { 
 + for ( final Biome biome : this . biomes ) { 
 + final List < Biome . SpawnListEntry > entries = biome . getSpawnableList ( this . type ) ; 
 + boolean found = false ; 
 + for ( final Biome . SpawnListEntry entry : entries ) { 
 + if ( entry . entityClass = = EntityEntryBuilder . this . entity ) { 
 + entry . itemWeight = this . weight ; 
 + entry . minGroupCount = this . min ; 
 + entry . maxGroupCount = this . max ; 
 + found = true ; 
 + break ; 
 + } 
 + } 
 + if ( ! found ) entries . add ( new Biome . SpawnListEntry ( ( Class < ? extends EntityLiving > ) EntityEntryBuilder . this . entity , this . weight , this . min , this . max ) ) ; 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / EntityRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / EntityRegistry . java 
 index 77abd68 . . a1de924 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / EntityRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / EntityRegistry . java 
 @ @ - 362 , 4 + 362 , 11 @ @ public class EntityRegistry 
 } 
 return null ; 
 } 
 + 
 + / / This is an internal method - do not touch . 
 + final void insert ( final Class < ? extends Entity > entity , final EntityRegistration registration ) 
 + { 
 + this . entityClassRegistrations . put ( entity , registration ) ; 
 + this . entityRegistrations . put ( registration . container , registration ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / ReflectionHelper . java b / src / main / java / net / minecraftforge / fml / relauncher / ReflectionHelper . java 
 index 434d56b . . e5b7281 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / ReflectionHelper . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / ReflectionHelper . java 
 @ @ - 24 , 6 + 24 , 8 @ @ import org . apache . commons . lang3 . StringUtils ; 
 
 import javax . annotation . Nonnull ; 
 import javax . annotation . Nullable ; 
 + 
 + import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 / * * 
 @ @ - 88 , 6 + 90 , 14 @ @ public class ReflectionHelper 
 } 
 } 
 
 + public static class UnknownConstructorException extends RuntimeException 
 + { 
 + public UnknownConstructorException ( final String message ) 
 + { 
 + super ( message ) ; 
 + } 
 + } 
 + 
 public static Field findField ( Class < ? > clazz , String . . . fieldNames ) 
 { 
 Exception failed = null ; 
 @ @ - 220 , 4 + 230 , 45 @ @ public class ReflectionHelper 
 throw new UnableToFindMethodException ( e ) ; 
 } 
 } 
 + 
 + / * * 
 + * Finds a constructor in the specified class that has matching parameter types . 
 + * 
 + * @ param klass The class to find the constructor in 
 + * @ param parameterTypes The parameter types of the constructor . 
 + * @ param < T > The type 
 + * @ return The constructor 
 + * @ throws NullPointerException if { @ code klass } is null 
 + * @ throws NullPointerException if { @ code parameterTypes } is null 
 + * @ throws UnknownConstructorException if the constructor could not be found 
 + * / 
 + @ Nonnull 
 + public static < T > Constructor < T > findConstructor ( @ Nonnull final Class < T > klass , @ Nonnull final Class < ? > . . . parameterTypes ) 
 + { 
 + Preconditions . checkNotNull ( klass , " class " ) ; 
 + Preconditions . checkNotNull ( parameterTypes , " parameter types " ) ; 
 + 
 + final Constructor < T > constructor ; 
 + try 
 + { 
 + constructor = klass . getDeclaredConstructor ( parameterTypes ) ; 
 + constructor . setAccessible ( true ) ; 
 + } 
 + catch ( final NoSuchMethodException e ) 
 + { 
 + final StringBuilder desc = new StringBuilder ( ) ; 
 + desc . append ( klass . getSimpleName ( ) ) . append ( ' ( ' ) ; 
 + for ( int i = 0 , length = parameterTypes . length ; i < length ; i + + ) 
 + { 
 + desc . append ( parameterTypes [ i ] . getName ( ) ) ; 
 + if ( i > length ) 
 + { 
 + desc . append ( ' , ' ) . append ( ' ' ) ; 
 + } 
 + } 
 + desc . append ( ' ) ' ) ; 
 + throw new UnknownConstructorException ( " Could not find constructor ' " + desc . toString ( ) + " ' in " + klass ) ; 
 + } 
 + return constructor ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 21c285e . . bfab5de 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 56 , 6 + 56 , 7 @ @ import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . StartupQuery ; 
 import net . minecraftforge . fml . common . ZipperUtil ; 
 import net . minecraftforge . fml . common . registry . EntityEntry ; 
 + import net . minecraftforge . fml . common . registry . EntityEntryBuilder ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfession ; 
 
 @ @ - 442 , 6 + 443 , 10 @ @ public class GameData 
 @ Override 
 public void onAdd ( IForgeRegistryInternal < EntityEntry > owner , RegistryManager stage , int id , EntityEntry entry , @ Nullable EntityEntry oldEntry ) 
 { 
 + if ( entry instanceof EntityEntryBuilder . BuiltEntityEntry ) 
 + { 
 + ( ( EntityEntryBuilder . BuiltEntityEntry ) entry ) . addedToRegistry ( ) ; 
 + } 
 if ( entry . getEgg ( ) ! = null ) 
 EntityList . ENTITY _ EGGS . put ( entry . getRegistryName ( ) , entry . getEgg ( ) ) ; 
 }

NEAREST DIFF:
diff - - git a / common / net / minecraftforge / common / ForgeChunkManager . java b / common / net / minecraftforge / common / ForgeChunkManager . java 
 index 5182906 . . 7d91e49 100644 
 - - - a / common / net / minecraftforge / common / ForgeChunkManager . java 
 + + + b / common / net / minecraftforge / common / ForgeChunkManager . java 
 @ @ - 9 , 9 + 9 , 14 @ @ import java . util . LinkedHashSet ; 
 import java . util . LinkedList ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Set ; 
 + import java . util . UUID ; 
 import java . util . logging . Level ; 
 
 import com . google . common . collect . ArrayListMultimap ; 
 + import com . google . common . collect . BiMap ; 
 + import com . google . common . collect . HashBiMap ; 
 + import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . ImmutableSetMultimap ; 
 import com . google . common . collect . LinkedHashMultimap ; 
 import com . google . common . collect . ListMultimap ; 
 @ @ - 27 , 6 + 32 , 7 @ @ import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 
 + import net . minecraft . src . Chunk ; 
 import net . minecraft . src . ChunkCoordIntPair ; 
 import net . minecraft . src . CompressedStreamTools ; 
 import net . minecraft . src . Entity ; 
 @ @ - 68 , 6 + 74 , 7 @ @ public class ForgeChunkManager 
 private static Map < String , LoadingCallback > callbacks = Maps . newHashMap ( ) ; 
 
 private static Map < World , SetMultimap < ChunkCoordIntPair , Ticket > > forcedChunks = Maps . newHashMap ( ) ; 
 + private static BiMap < UUID , Ticket > pendingEntities = HashBiMap . create ( ) ; 
 
 / * * 
 * All mods requiring chunkloading need to implement this to handle the 
 @ @ - 108 , 9 + 115 , 8 @ @ public class ForgeChunkManager 
 private World world ; 
 private int maxDepth ; 
 private String entityClazz ; 
 - private int entityX ; 
 - private int entityY ; 
 - private int entityZ ; 
 + private int entityChunkX ; 
 + private int entityChunkZ ; 
 private Entity entity ; 
 
 Ticket ( String modId , Type type , World world ) 
 @ @ - 122 , 14 + 128 , 6 @ @ public class ForgeChunkManager 
 this . requestedChunks = Sets . newLinkedHashSet ( ) ; 
 } 
 
 - void bindEntityData ( int x , int y , int z , String clazz ) 
 - { 
 - this . entityX = x ; 
 - this . entityY = y ; 
 - this . entityZ = z ; 
 - this . entityClazz = clazz ; 
 - } 
 - 
 / * * 
 * The chunk list depth can be manipulated up to the maximal grant allowed for the mod . This value is configurable . Once the maximum is reached , 
 * the least recently forced chunk , by original registration time , is removed from the forced chunk list . 
 @ @ - 189 , 37 + 187 , 12 @ @ public class ForgeChunkManager 
 } 
 
 / * * 
 - * Get the entity class associated with this ticket . Only valid for callbacks . 
 - * @ return 
 - * / 
 - public String getEntityClass ( ) 
 - { 
 - return this . entityClazz ; 
 - } 
 - 
 - / * * 
 - * Get the last known entity X coordinate for this ticket . Only valid for callbacks . 
 - * @ return 
 - * / 
 - public int getEntityX ( ) 
 - { 
 - return entityX ; 
 - } 
 - / * * 
 - * Get the last known entity Y coordinate for this ticket . Only valid for callbacks . 
 - * @ return 
 - * / 
 - public int getEntityY ( ) 
 - { 
 - return entityY ; 
 - } 
 - / * * 
 - * Get the last known entity Z coordinate for this ticket . Only valid for callbacks . 
 + * Get the entity associated with this { @ link Type # ENTITY } type ticket 
 * @ return 
 * / 
 - public int getEntityZ ( ) 
 + public Entity getEntity ( ) 
 { 
 - return entityZ ; 
 + return entity ; 
 } 
 } 
 
 @ @ - 287 , 16 + 260 , 35 @ @ public class ForgeChunkManager 
 tick . modData = modData ; 
 if ( type = = Type . ENTITY ) 
 { 
 - int entX = ticket . getInteger ( " entityX " ) ; 
 - int entY = ticket . getInteger ( " entityY " ) ; 
 - int entZ = ticket . getInteger ( " entityZ " ) ; 
 - String entClass = ticket . getString ( " entityClass " ) ; 
 - tick . bindEntityData ( entX , entY , entZ , entClass ) ; 
 + tick . entityChunkX = ticket . getInteger ( " chunkX " ) ; 
 + tick . entityChunkZ = ticket . getInteger ( " chunkZ " ) ; 
 + UUID uuid = new UUID ( ticket . getLong ( " PersistentIDMSB " ) , ticket . getLong ( " PersistentIDLSB " ) ) ; 
 + / / add the ticket to the " pending entity " list 
 + pendingEntities . put ( uuid , tick ) ; 
 } 
 loadedTickets . put ( modId , tick ) ; 
 } 
 } 
 
 + for ( Ticket tick : ImmutableSet . copyOf ( pendingEntities . values ( ) ) ) 
 + { 
 + if ( tick . ticketType = = Type . ENTITY & & tick . entity = = null ) 
 + { 
 + / / force the world to load the entity ' s chunk 
 + / / the load will come back through the loadEntity method and attach the entity 
 + / / to the ticket 
 + world . getChunkFromChunkCoords ( tick . entityChunkX , tick . entityChunkZ ) ; 
 + } 
 + } 
 + for ( Ticket tick : ImmutableSet . copyOf ( pendingEntities . values ( ) ) ) 
 + { 
 + if ( tick . ticketType = = Type . ENTITY & & tick . entity = = null ) 
 + { 
 + FMLLog . warning ( " Failed to load persistent chunkloading entity % s from store . " , pendingEntities . inverse ( ) . get ( tick ) ) ; 
 + loadedTickets . remove ( tick . modId , tick ) ; 
 + } 
 + } 
 + pendingEntities . clear ( ) ; 
 / / send callbacks 
 for ( String modId : loadedTickets . keySet ( ) ) 
 { 
 @ @ - 537 , 10 + 529 , 10 @ @ public class ForgeChunkManager 
 ticket . setCompoundTag ( " ModData " , tick . modData ) ; 
 if ( tick . ticketType = = Type . ENTITY ) 
 { 
 - ticket . setInteger ( " entityX " , MathHelper . floor _ double ( tick . entity . posX ) ) ; 
 - ticket . setInteger ( " entityY " , MathHelper . floor _ double ( tick . entity . posY ) ) ; 
 - ticket . setInteger ( " entityZ " , MathHelper . floor _ double ( tick . entity . posZ ) ) ; 
 - ticket . setString ( " entityClass " , tick . entity . getClass ( ) . getName ( ) ) ; 
 + ticket . setInteger ( " chunkX " , MathHelper . floor _ double ( tick . entity . chunkCoordX ) ) ; 
 + ticket . setInteger ( " chunkZ " , MathHelper . floor _ double ( tick . entity . chunkCoordZ ) ) ; 
 + ticket . setLong ( " persistentIDMSB " , tick . entity . getPersistentID ( ) . getMostSignificantBits ( ) ) ; 
 + ticket . setLong ( " persistentIDLSB " , tick . entity . getPersistentID ( ) . getLeastSignificantBits ( ) ) ; 
 } 
 } 
 } 
 @ @ - 554 , 4 + 546 , 15 @ @ public class ForgeChunkManager 
 return ; 
 } 
 } 
 + 
 + static void loadEntity ( Entity entity ) 
 + { 
 + UUID id = entity . getPersistentID ( ) ; 
 + Ticket tick = pendingEntities . get ( id ) ; 
 + if ( tick ! = null ) 
 + { 
 + tick . bindEntity ( entity ) ; 
 + pendingEntities . remove ( id ) ; 
 + } 
 + } 
 } 
 diff - - git a / common / net / minecraftforge / common / ForgeInternalHandler . java b / common / net / minecraftforge / common / ForgeInternalHandler . java 
 index d926438 . . 7def0dd 100644 
 - - - a / common / net / minecraftforge / common / ForgeInternalHandler . java 
 + + + b / common / net / minecraftforge / common / ForgeInternalHandler . java 
 @ @ - 1 , 5 + 1 , 7 @ @ 
 package net . minecraftforge . common ; 
 
 + import java . util . UUID ; 
 + 
 import net . minecraft . src . * ; 
 import net . minecraftforge . event . * ; 
 import net . minecraftforge . event . entity . * ; 
 @ @ - 10 , 6 + 12 , 17 @ @ public class ForgeInternalHandler 
 @ ForgeSubscribe ( priority = EventPriority . HIGHEST ) 
 public void onEntityJoinWorld ( EntityJoinWorldEvent event ) 
 { 
 + if ( ! event . world . isRemote ) 
 + { 
 + if ( event . entity . getPersistentID ( ) = = null ) 
 + { 
 + event . entity . generatePersistentID ( ) ; 
 + } 
 + else 
 + { 
 + ForgeChunkManager . loadEntity ( event . entity ) ; 
 + } 
 + } 
 Entity entity = event . entity ; 
 if ( entity instanceof EntityItem ) 
 { 
 diff - - git a / patches / common / net / minecraft / src / Entity . java . patch b / patches / common / net / minecraft / src / Entity . java . patch 
 index fd46d31 . . c7ff3cd 100644 
 - - - a / patches / common / net / minecraft / src / Entity . java . patch 
 + + + b / patches / common / net / minecraft / src / Entity . java . patch 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 - - - . . / src _ base / common / net / minecraft / src / Entity . java 
 + + + . . / src _ work / common / net / minecraft / src / Entity . java 
 - @ @ - 2 , 6 + 2 , 8 @ @ 
 + @ @ - 2 , 9 + 2 , 12 @ @ 
 
 import cpw . mods . fml . common . Side ; 
 import cpw . mods . fml . common . asm . SideOnly ; 
 @ @ - 9 , 7 + 9 , 11 @ @ 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Random ; 
 - @ @ - 186 , 6 + 188 , 10 @ @ 
 + + import java . util . UUID ; 
 + 
 + public abstract class Entity 
 + { 
 + @ @ - 186 , 6 + 189 , 11 @ @ 
 public boolean ignoreFrustumCheck ; 
 public boolean isAirBorne ; 
 public EnumEntitySize myEntitySize ; 
 @ @ - 17 , 13 + 21 , 19 @ @ 
 + private NBTTagCompound customEntityData ; 
 + public boolean captureDrops = false ; 
 + public ArrayList < EntityItem > capturedDrops = new ArrayList < EntityItem > ( ) ; 
 + + private UUID persistentID ; 
 
 public Entity ( World par1World ) 
 { 
 - @ @ - 1382 , 6 + 1388 , 10 @ @ 
 + @ @ - 1382 , 6 + 1390 , 15 @ @ 
 par1NBTTagCompound . setShort ( " Fire " , ( short ) this . fire ) ; 
 par1NBTTagCompound . setShort ( " Air " , ( short ) this . getAir ( ) ) ; 
 par1NBTTagCompound . setBoolean ( " OnGround " , this . onGround ) ; 
 + + if ( persistentID ! = null ) 
 + + { 
 + + par1NBTTagCompound . setLong ( " PersistentIDMSB " , persistentID . getMostSignificantBits ( ) ) ; 
 + + par1NBTTagCompound . setLong ( " PersistentIDLSB " , persistentID . getLeastSignificantBits ( ) ) ; 
 + + } 
 + if ( customEntityData ! = null ) 
 + { 
 + par1NBTTagCompound . setCompoundTag ( " ForgeData " , customEntityData ) ; 
 @ @ - 31 , 7 + 41 , 7 @ @ 
 this . writeEntityToNBT ( par1NBTTagCompound ) ; 
 } 
 
 - @ @ - 1423 , 6 + 1433 , 10 @ @ 
 + @ @ - 1423 , 6 + 1440 , 14 @ @ 
 this . onGround = par1NBTTagCompound . getBoolean ( " OnGround " ) ; 
 this . setPosition ( this . posX , this . posY , this . posZ ) ; 
 this . setRotation ( this . rotationYaw , this . rotationPitch ) ; 
 @ @ - 39 , 10 + 49 , 14 @ @ 
 + { 
 + customEntityData = par1NBTTagCompound . getCompoundTag ( " ForgeData " ) ; 
 + } 
 + + if ( par1NBTTagCompound . hasKey ( " PersistentIDMSB " ) & & par1NBTTagCompound . hasKey ( " PersistentIDLSB " ) ) 
 + + { 
 + + persistentID = new UUID ( par1NBTTagCompound . getLong ( " PersistentIDMSB " ) , par1NBTTagCompound . getLong ( " PersistentIDLSB " ) ) ; 
 + + } 
 this . readEntityFromNBT ( par1NBTTagCompound ) ; 
 } 
 
 - @ @ - 1509 , 7 + 1523 , 14 @ @ 
 + @ @ - 1509 , 7 + 1534 , 14 @ @ 
 { 
 EntityItem var3 = new EntityItem ( this . worldObj , this . posX , this . posY + ( double ) par2 , this . posZ , par1ItemStack ) ; 
 var3 . delayBeforeCanPickup = 10 ; 
 @ @ - 58 , 7 + 72 , 7 @ @ 
 return var3 ; 
 } 
 
 - @ @ - 1843 , 7 + 1864 , 7 @ @ 
 + @ @ - 1843 , 7 + 1875 , 7 @ @ 
 * / 
 public boolean isRiding ( ) 
 { 
 @ @ - 67 , 7 + 81 , 7 @ @ 
 } 
 
 / * * 
 - @ @ - 2107 , 4 + 2128 , 59 @ @ 
 + @ @ - 2107 , 4 + 2139 , 72 @ @ 
 { 
 return String . format ( " % s [ \ ' % s \ ' / % d , l = \ ' % s \ ' , x = % . 2f , y = % . 2f , z = % . 2f ] " , new Object [ ] { this . getClass ( ) . getSimpleName ( ) , this . getEntityName ( ) , Integer . valueOf ( this . entityId ) , this . worldObj = = null ? " ~ NULL ~ " : this . worldObj . getWorldInfo ( ) . getWorldName ( ) , Double . valueOf ( this . posX ) , Double . valueOf ( this . posY ) , Double . valueOf ( this . posZ ) } ) ; 
 } 
 @ @ - 98 , 7 + 112 , 7 @ @ 
 + 
 + / * * 
 + * Called when a user uses the creative pick block button on this entity . 
 - + * 
 + + * 
 + * @ param target The full target the player is looking at 
 + * @ return A ItemStack to add to the player ' s inventory , Null if nothing should be added . 
 + * / 
 @ @ - 126 , 4 + 140 , 17 @ @ 
 + } 
 + return null ; 
 + } 
 + + 
 + + public UUID getPersistentID ( ) 
 + + { 
 + + return persistentID ; 
 + + } 
 + + 
 + + public synchronized void generatePersistentID ( ) 
 + + { 
 + + if ( persistentID = = null ) 
 + + { 
 + + persistentID = UUID . randomUUID ( ) ; 
 + + } 
 + + } 
 }
