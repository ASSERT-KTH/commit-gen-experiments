BLEU SCORE: 0.021597011339333432

TEST MSG: Cherry pick some changes from 1 . 8 for inner class discovery , also fix the negativecache . Closes # 1872
GENERATED MSG: Strip control codes in progress bar messages . They cause crashes sometimes .

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / discovery / DirectoryDiscoverer . java b / fml / src / main / java / cpw / mods / fml / common / discovery / DirectoryDiscoverer . java <nl> index 199ec600 . . 9aa7218 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / discovery / DirectoryDiscoverer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / discovery / DirectoryDiscoverer . java <nl> @ @ - 38 , 7 + 38 , 7 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer <nl> @ Override <nl> public boolean accept ( File file ) <nl> { <nl> - return ( file . isFile ( ) & & classFile . matcher ( file . getName ( ) ) . find ( ) ) | | file . isDirectory ( ) ; <nl> + return ( file . isFile ( ) & & classFile . matcher ( file . getName ( ) ) . matches ( ) ) | | file . isDirectory ( ) ; <nl> } <nl> } <nl> <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / discovery / ITypeDiscoverer . java b / fml / src / main / java / cpw / mods / fml / common / discovery / ITypeDiscoverer . java <nl> index e194469 . . efb0b2f 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / discovery / ITypeDiscoverer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / discovery / ITypeDiscoverer . java <nl> @ @ - 5 , 7 + 5 , 7 @ @ <nl> * are made available under the terms of the GNU Lesser Public License v2 . 1 <nl> * which accompanies this distribution , and is available at <nl> * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html <nl> - * <nl> + * <nl> * Contributors : <nl> * cpw - implementation <nl> * / <nl> @ @ - 19 , 7 + 19 , 8 @ @ import cpw . mods . fml . common . ModContainer ; <nl> <nl> public interface ITypeDiscoverer <nl> { <nl> - public static Pattern classFile = Pattern . compile ( " ( [ ^ \ \ s $ ] + ) . class $ " ) ; <nl> + / / main class part , followed by an optional $ and an " inner class " part . $ cannot be last , otherwise scala breaks <nl> + public static Pattern classFile = Pattern . compile ( " [ ^ \ \ s \ \ $ ] + ( \ \ $ [ ^ \ \ s ] + ) ? \ \ . class $ " ) ; <nl> <nl> public List < ModContainer > discover ( ModCandidate candidate , ASMDataTable table ) ; <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / discovery / ModCandidate . java b / fml / src / main / java / cpw / mods / fml / common / discovery / ModCandidate . java <nl> index 7581f67 . . 746185f 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / discovery / ModCandidate . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / discovery / ModCandidate . java <nl> @ @ - 80 , 7 + 80 , 7 @ @ public class ModCandidate <nl> public void addClassEntry ( String name ) <nl> { <nl> String className = name . substring ( 0 , name . lastIndexOf ( ' . ' ) ) ; / / strip the . class <nl> - foundClasses . add ( className . replace ( ' . ' , ' / ' ) ) ; <nl> + foundClasses . add ( className ) ; <nl> className = className . replace ( ' / ' , ' . ' ) ; <nl> int pkgIdx = className . lastIndexOf ( ' . ' ) ; <nl> if ( pkgIdx > - 1 )
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> index 53b7f3c . . 73dc9a6 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 58 , 6 + 58 , 7 @ @ import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . ServerStatusResponse ; <nl> import net . minecraft . server . MinecraftServer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . StringUtils ; <nl> import net . minecraft . world . WorldSettings ; <nl> import net . minecraft . world . storage . SaveFormatOld ; <nl> <nl> @ @ - 1010 , 4 + 1011 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> Display . processMessages ( ) ; <nl> SplashProgress . mutex . release ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String stripSpecialChars ( String message ) <nl> + { <nl> + return StringUtils . stripControlCodes ( message ) ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> index ed4e613 . . b770baf 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> @ @ - 632 , 4 + 632 , 9 @ @ public class FMLCommonHandler <nl> Runtime . getRuntime ( ) . exit ( exitCode ) ; <nl> } <nl> } <nl> + <nl> + public String stripSpecialChars ( String message ) <nl> + { <nl> + return sidedDelegate ! = null ? sidedDelegate . stripSpecialChars ( message ) : message ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> index abc08bc . . 5daadbb 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> @ @ - 63 , 4 + 63 , 6 @ @ public interface IFMLSidedHandler <nl> void allowLogins ( ) ; <nl> <nl> void processWindowMessages ( ) ; <nl> + <nl> + String stripSpecialChars ( String message ) ; <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / ProgressManager . java b / fml / src / main / java / cpw / mods / fml / common / ProgressManager . java <nl> index a2a7194 . . 7808c3d 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / ProgressManager . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / ProgressManager . java <nl> @ @ - 71 , 7 + 71 , 7 @ @ public class ProgressManager <nl> { <nl> if ( step > = steps ) throw new IllegalStateException ( " too much steps for ProgressBar " + title ) ; <nl> step + + ; <nl> - this . message = message ; <nl> + this . message = FMLCommonHandler . instance ( ) . stripSpecialChars ( message ) ; <nl> FMLCommonHandler . instance ( ) . processWindowMessages ( ) ; <nl> } <nl> <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> index 0a362de . . d8dc4e9 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> @ @ - 259 , 7 + 259 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> return DedicatedServer . allowPlayerLogins ; <nl> } <nl> - <nl> + <nl> @ Override <nl> public void allowLogins ( ) { <nl> DedicatedServer . allowPlayerLogins = true ; <nl> @ @ - 270 , 4 + 270 , 10 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> / / NOOP <nl> } <nl> + <nl> + @ Override <nl> + public String stripSpecialChars ( String message ) <nl> + { <nl> + return message ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / discovery / DirectoryDiscoverer . java b / fml / src / main / java / cpw / mods / fml / common / discovery / DirectoryDiscoverer . java 
 index 199ec600 . . 9aa7218 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / discovery / DirectoryDiscoverer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / discovery / DirectoryDiscoverer . java 
 @ @ - 38 , 7 + 38 , 7 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer 
 @ Override 
 public boolean accept ( File file ) 
 { 
 - return ( file . isFile ( ) & & classFile . matcher ( file . getName ( ) ) . find ( ) ) | | file . isDirectory ( ) ; 
 + return ( file . isFile ( ) & & classFile . matcher ( file . getName ( ) ) . matches ( ) ) | | file . isDirectory ( ) ; 
 } 
 } 
 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / discovery / ITypeDiscoverer . java b / fml / src / main / java / cpw / mods / fml / common / discovery / ITypeDiscoverer . java 
 index e194469 . . efb0b2f 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / discovery / ITypeDiscoverer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / discovery / ITypeDiscoverer . java 
 @ @ - 5 , 7 + 5 , 7 @ @ 
 * are made available under the terms of the GNU Lesser Public License v2 . 1 
 * which accompanies this distribution , and is available at 
 * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html 
 - * 
 + * 
 * Contributors : 
 * cpw - implementation 
 * / 
 @ @ - 19 , 7 + 19 , 8 @ @ import cpw . mods . fml . common . ModContainer ; 
 
 public interface ITypeDiscoverer 
 { 
 - public static Pattern classFile = Pattern . compile ( " ( [ ^ \ \ s $ ] + ) . class $ " ) ; 
 + / / main class part , followed by an optional $ and an " inner class " part . $ cannot be last , otherwise scala breaks 
 + public static Pattern classFile = Pattern . compile ( " [ ^ \ \ s \ \ $ ] + ( \ \ $ [ ^ \ \ s ] + ) ? \ \ . class $ " ) ; 
 
 public List < ModContainer > discover ( ModCandidate candidate , ASMDataTable table ) ; 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / discovery / ModCandidate . java b / fml / src / main / java / cpw / mods / fml / common / discovery / ModCandidate . java 
 index 7581f67 . . 746185f 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / discovery / ModCandidate . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / discovery / ModCandidate . java 
 @ @ - 80 , 7 + 80 , 7 @ @ public class ModCandidate 
 public void addClassEntry ( String name ) 
 { 
 String className = name . substring ( 0 , name . lastIndexOf ( ' . ' ) ) ; / / strip the . class 
 - foundClasses . add ( className . replace ( ' . ' , ' / ' ) ) ; 
 + foundClasses . add ( className ) ; 
 className = className . replace ( ' / ' , ' . ' ) ; 
 int pkgIdx = className . lastIndexOf ( ' . ' ) ; 
 if ( pkgIdx > - 1 )

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 index 53b7f3c . . 73dc9a6 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 58 , 6 + 58 , 7 @ @ import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . ServerStatusResponse ; 
 import net . minecraft . server . MinecraftServer ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . StringUtils ; 
 import net . minecraft . world . WorldSettings ; 
 import net . minecraft . world . storage . SaveFormatOld ; 
 
 @ @ - 1010 , 4 + 1011 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 Display . processMessages ( ) ; 
 SplashProgress . mutex . release ( ) ; 
 } 
 + 
 + @ Override 
 + public String stripSpecialChars ( String message ) 
 + { 
 + return StringUtils . stripControlCodes ( message ) ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 index ed4e613 . . b770baf 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 @ @ - 632 , 4 + 632 , 9 @ @ public class FMLCommonHandler 
 Runtime . getRuntime ( ) . exit ( exitCode ) ; 
 } 
 } 
 + 
 + public String stripSpecialChars ( String message ) 
 + { 
 + return sidedDelegate ! = null ? sidedDelegate . stripSpecialChars ( message ) : message ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 index abc08bc . . 5daadbb 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 @ @ - 63 , 4 + 63 , 6 @ @ public interface IFMLSidedHandler 
 void allowLogins ( ) ; 
 
 void processWindowMessages ( ) ; 
 + 
 + String stripSpecialChars ( String message ) ; 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / ProgressManager . java b / fml / src / main / java / cpw / mods / fml / common / ProgressManager . java 
 index a2a7194 . . 7808c3d 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / ProgressManager . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / ProgressManager . java 
 @ @ - 71 , 7 + 71 , 7 @ @ public class ProgressManager 
 { 
 if ( step > = steps ) throw new IllegalStateException ( " too much steps for ProgressBar " + title ) ; 
 step + + ; 
 - this . message = message ; 
 + this . message = FMLCommonHandler . instance ( ) . stripSpecialChars ( message ) ; 
 FMLCommonHandler . instance ( ) . processWindowMessages ( ) ; 
 } 
 
 diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 index 0a362de . . d8dc4e9 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 @ @ - 259 , 7 + 259 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 return DedicatedServer . allowPlayerLogins ; 
 } 
 - 
 + 
 @ Override 
 public void allowLogins ( ) { 
 DedicatedServer . allowPlayerLogins = true ; 
 @ @ - 270 , 4 + 270 , 10 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 / / NOOP 
 } 
 + 
 + @ Override 
 + public String stripSpecialChars ( String message ) 
 + { 
 + return message ; 
 + } 
 }
