BLEU SCORE: 1.706713493730354E-5

TEST MSG: New LootTable interaction system and event .
GENERATED MSG: Added model bake event ( allows mods to insert custom baked models , much like TextureStitchEvent allows to load custom textures ) , ISmartBlock / ItemModel ( ability form models to react to block / item states ) , Block . getExtendedState , support for unlisted properties in block states . Includes example implementation of http : / / imgur . com / a / FyyJX

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootEntry . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootEntry . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 31c3c53 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootEntry . java . patch <nl> @ @ - 0 , 0 + 1 , 59 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootEntry . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootEntry . java <nl> + @ @ - 18 , 15 + 18 , 17 @ @ <nl> + <nl> + public abstract class LootEntry <nl> + { <nl> + + protected final String entryName ; <nl> + protected final int field _ 186364 _ c ; <nl> + protected final int field _ 186365 _ d ; <nl> + protected final LootCondition [ ] field _ 186366 _ e ; <nl> + <nl> + - protected LootEntry ( int p _ i46642 _ 1 _ , int p _ i46642 _ 2 _ , LootCondition [ ] p _ i46642 _ 3 _ ) <nl> + + protected LootEntry ( int p _ i46642 _ 1 _ , int p _ i46642 _ 2 _ , LootCondition [ ] p _ i46642 _ 3 _ , String entryName ) <nl> + { <nl> + this . field _ 186364 _ c = p _ i46642 _ 1 _ ; <nl> + this . field _ 186365 _ d = p _ i46642 _ 2 _ ; <nl> + this . field _ 186366 _ e = p _ i46642 _ 3 _ ; <nl> + + this . entryName = entryName ; <nl> + } <nl> + <nl> + public int func _ 186361 _ a ( float p _ 186361 _ 1 _ ) <nl> + @ @ - 34 , 6 + 36 , 8 @ @ <nl> + return Math . max ( MathHelper . func _ 76141 _ d ( ( float ) this . field _ 186364 _ c + ( float ) this . field _ 186365 _ d * p _ 186361 _ 1 _ ) , 0 ) ; <nl> + } <nl> + <nl> + + public String getEntryName ( ) { return this . entryName ; } <nl> + + <nl> + public abstract void func _ 186363 _ a ( Collection < ItemStack > p _ 186363 _ 1 _ , Random p _ 186363 _ 2 _ , LootContext p _ 186363 _ 3 _ ) ; <nl> + <nl> + protected abstract void func _ 186362 _ a ( JsonObject p _ 186362 _ 1 _ , JsonSerializationContext p _ 186362 _ 2 _ ) ; <nl> + @ @ - 57 , 6 + 61 , 9 @ @ <nl> + alootcondition = new LootCondition [ 0 ] ; <nl> + } <nl> + <nl> + + LootEntry ret = net . minecraftforge . common . ForgeHooks . deserializeJsonLootEntry ( s , jsonobject , i , j , alootcondition ) ; <nl> + + if ( ret ! = null ) return ret ; <nl> + + <nl> + if ( s . equals ( " item " ) ) <nl> + { <nl> + return LootEntryItem . func _ 186367 _ a ( jsonobject , p _ deserialize _ 3 _ , i , j , alootcondition ) ; <nl> + @ @ - 78 , 6 + 85 , 8 @ @ <nl> + public JsonElement serialize ( LootEntry p _ serialize _ 1 _ , Type p _ serialize _ 2 _ , JsonSerializationContext p _ serialize _ 3 _ ) <nl> + { <nl> + JsonObject jsonobject = new JsonObject ( ) ; <nl> + + if ( p _ serialize _ 1 _ . entryName ! = null & & ! p _ serialize _ 1 _ . entryName . startsWith ( " custom # " ) ) <nl> + + jsonobject . addProperty ( " entryName " , p _ serialize _ 1 _ . entryName ) ; <nl> + jsonobject . addProperty ( " weight " , ( Number ) Integer . valueOf ( p _ serialize _ 1 _ . field _ 186364 _ c ) ) ; <nl> + jsonobject . addProperty ( " quality " , ( Number ) Integer . valueOf ( p _ serialize _ 1 _ . field _ 186365 _ d ) ) ; <nl> + <nl> + @ @ - 86 , 6 + 95 , 9 @ @ <nl> + jsonobject . add ( " conditions " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186366 _ e ) ) ; <nl> + } <nl> + <nl> + + String type = net . minecraftforge . common . ForgeHooks . getLootEntryType ( p _ serialize _ 1 _ ) ; <nl> + + if ( type ! = null ) jsonobject . addProperty ( " type " , type ) ; <nl> + + else <nl> + if ( p _ serialize _ 1 _ instanceof LootEntryItem ) <nl> + { <nl> + jsonobject . addProperty ( " type " , " item " ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 058252b <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java . patch <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java <nl> + @ @ - 10 , 9 + 10 , 9 @ @ <nl> + <nl> + public class LootEntryEmpty extends LootEntry <nl> + { <nl> + - public LootEntryEmpty ( int p _ i46645 _ 1 _ , int p _ i46645 _ 2 _ , LootCondition [ ] p _ i46645 _ 3 _ ) <nl> + + public LootEntryEmpty ( int p _ i46645 _ 1 _ , int p _ i46645 _ 2 _ , LootCondition [ ] p _ i46645 _ 3 _ , String entryName ) <nl> + { <nl> + - super ( p _ i46645 _ 1 _ , p _ i46645 _ 2 _ , p _ i46645 _ 3 _ ) ; <nl> + + super ( p _ i46645 _ 1 _ , p _ i46645 _ 2 _ , p _ i46645 _ 3 _ , entryName ) ; <nl> + } <nl> + <nl> + public void func _ 186363 _ a ( Collection < ItemStack > p _ 186363 _ 1 _ , Random p _ 186363 _ 2 _ , LootContext p _ 186363 _ 3 _ ) <nl> + @ @ - 25 , 6 + 25 , 6 @ @ <nl> + <nl> + public static LootEntryEmpty func _ 186372 _ a ( JsonObject p _ 186372 _ 0 _ , JsonDeserializationContext p _ 186372 _ 1 _ , int p _ 186372 _ 2 _ , int p _ 186372 _ 3 _ , LootCondition [ ] p _ 186372 _ 4 _ ) <nl> + { <nl> + - return new LootEntryEmpty ( p _ 186372 _ 2 _ , p _ 186372 _ 3 _ , p _ 186372 _ 4 _ ) ; <nl> + + return new LootEntryEmpty ( p _ 186372 _ 2 _ , p _ 186372 _ 3 _ , p _ 186372 _ 4 _ , net . minecraftforge . common . ForgeHooks . readLootEntryName ( p _ 186372 _ 0 _ , " empty " ) ) ; <nl> + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java . patch <nl> new file mode 100644 <nl> index 0000000 . . ea63362 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java . patch <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java <nl> + @ @ - 18 , 9 + 18 , 9 @ @ <nl> + protected final Item field _ 186368 _ a ; <nl> + protected final LootFunction [ ] field _ 186369 _ b ; <nl> + <nl> + - public LootEntryItem ( Item p _ i46644 _ 1 _ , int p _ i46644 _ 2 _ , int p _ i46644 _ 3 _ , LootFunction [ ] p _ i46644 _ 4 _ , LootCondition [ ] p _ i46644 _ 5 _ ) <nl> + + public LootEntryItem ( Item p _ i46644 _ 1 _ , int p _ i46644 _ 2 _ , int p _ i46644 _ 3 _ , LootFunction [ ] p _ i46644 _ 4 _ , LootCondition [ ] p _ i46644 _ 5 _ , String entryName ) <nl> + { <nl> + - super ( p _ i46644 _ 2 _ , p _ i46644 _ 3 _ , p _ i46644 _ 5 _ ) ; <nl> + + super ( p _ i46644 _ 2 _ , p _ i46644 _ 3 _ , p _ i46644 _ 5 _ , entryName ) ; <nl> + this . field _ 186368 _ a = p _ i46644 _ 1 _ ; <nl> + this . field _ 186369 _ b = p _ i46644 _ 4 _ ; <nl> + } <nl> + @ @ - 42 , 7 + 42 , 7 @ @ <nl> + <nl> + if ( itemstack . field _ 77994 _ a > 0 ) <nl> + { <nl> + - if ( itemstack . field _ 77994 _ a < this . field _ 186368 _ a . func _ 77639 _ j ( ) ) <nl> + + if ( itemstack . field _ 77994 _ a < this . field _ 186368 _ a . getItemStackLimit ( itemstack ) ) <nl> + { <nl> + p _ 186363 _ 1 _ . add ( itemstack ) ; <nl> + } <nl> + @ @ - 82 , 6 + 82 , 7 @ @ <nl> + <nl> + public static LootEntryItem func _ 186367 _ a ( JsonObject p _ 186367 _ 0 _ , JsonDeserializationContext p _ 186367 _ 1 _ , int p _ 186367 _ 2 _ , int p _ 186367 _ 3 _ , LootCondition [ ] p _ 186367 _ 4 _ ) <nl> + { <nl> + + String name = net . minecraftforge . common . ForgeHooks . readLootEntryName ( p _ 186367 _ 0 _ , " item " ) ; <nl> + Item item = JsonUtils . func _ 188180 _ i ( p _ 186367 _ 0 _ , " name " ) ; <nl> + LootFunction [ ] alootfunction ; <nl> + <nl> + @ @ - 94 , 6 + 95 , 6 @ @ <nl> + alootfunction = new LootFunction [ 0 ] ; <nl> + } <nl> + <nl> + - return new LootEntryItem ( item , p _ 186367 _ 2 _ , p _ 186367 _ 3 _ , alootfunction , p _ 186367 _ 4 _ ) ; <nl> + + return new LootEntryItem ( item , p _ 186367 _ 2 _ , p _ 186367 _ 3 _ , alootfunction , p _ 186367 _ 4 _ , name ) ; <nl> + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java . patch <nl> new file mode 100644 <nl> index 0000000 . . fa2158b <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java . patch <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java <nl> + @ @ - 14 , 9 + 14 , 9 @ @ <nl> + { <nl> + protected final ResourceLocation field _ 186371 _ a ; <nl> + <nl> + - public LootEntryTable ( ResourceLocation p _ i46639 _ 1 _ , int p _ i46639 _ 2 _ , int p _ i46639 _ 3 _ , LootCondition [ ] p _ i46639 _ 4 _ ) <nl> + + public LootEntryTable ( ResourceLocation p _ i46639 _ 1 _ , int p _ i46639 _ 2 _ , int p _ i46639 _ 3 _ , LootCondition [ ] p _ i46639 _ 4 _ , String entryName ) <nl> + { <nl> + - super ( p _ i46639 _ 2 _ , p _ i46639 _ 3 _ , p _ i46639 _ 4 _ ) ; <nl> + + super ( p _ i46639 _ 2 _ , p _ i46639 _ 3 _ , p _ i46639 _ 4 _ , entryName ) ; <nl> + this . field _ 186371 _ a = p _ i46639 _ 1 _ ; <nl> + } <nl> + <nl> + @ @ - 34 , 7 + 34 , 8 @ @ <nl> + <nl> + public static LootEntryTable func _ 186370 _ a ( JsonObject p _ 186370 _ 0 _ , JsonDeserializationContext p _ 186370 _ 1 _ , int p _ 186370 _ 2 _ , int p _ 186370 _ 3 _ , LootCondition [ ] p _ 186370 _ 4 _ ) <nl> + { <nl> + + String name = net . minecraftforge . common . ForgeHooks . readLootEntryName ( p _ 186370 _ 0 _ , " loot _ table " ) ; <nl> + ResourceLocation resourcelocation = new ResourceLocation ( JsonUtils . func _ 151200 _ h ( p _ 186370 _ 0 _ , " name " ) ) ; <nl> + - return new LootEntryTable ( resourcelocation , p _ 186370 _ 2 _ , p _ 186370 _ 3 _ , p _ 186370 _ 4 _ ) ; <nl> + + return new LootEntryTable ( resourcelocation , p _ 186370 _ 2 _ , p _ 186370 _ 3 _ , p _ 186370 _ 4 _ , name ) ; <nl> + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootPool . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootPool . java . patch <nl> new file mode 100644 <nl> index 0000000 . . e6fd85c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootPool . java . patch <nl> @ @ - 0 , 0 + 1 , 121 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootPool . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootPool . java <nl> + @ @ - 21 , 17 + 21 , 19 @ @ <nl> + <nl> + public class LootPool <nl> + { <nl> + - private final LootEntry [ ] field _ 186453 _ a ; <nl> + - private final LootCondition [ ] field _ 186454 _ b ; <nl> + + private final List < LootEntry > field _ 186453 _ a ; <nl> + + private final List < LootCondition > field _ 186454 _ b ; <nl> + private RandomValueRange field _ 186455 _ c ; <nl> + private RandomValueRange field _ 186456 _ d ; <nl> + + private final String name ; <nl> + <nl> + - public LootPool ( LootEntry [ ] p _ i46643 _ 1 _ , LootCondition [ ] p _ i46643 _ 2 _ , RandomValueRange p _ i46643 _ 3 _ , RandomValueRange p _ i46643 _ 4 _ ) <nl> + + private LootPool ( LootEntry [ ] p _ i46643 _ 1 _ , LootCondition [ ] p _ i46643 _ 2 _ , RandomValueRange p _ i46643 _ 3 _ , RandomValueRange p _ i46643 _ 4 _ , String name ) <nl> + { <nl> + - this . field _ 186453 _ a = p _ i46643 _ 1 _ ; <nl> + - this . field _ 186454 _ b = p _ i46643 _ 2 _ ; <nl> + + this . field _ 186453 _ a = Lists . newArrayList ( p _ i46643 _ 1 _ ) ; <nl> + + this . field _ 186454 _ b = Lists . newArrayList ( p _ i46643 _ 2 _ ) ; <nl> + this . field _ 186455 _ c = p _ i46643 _ 3 _ ; <nl> + this . field _ 186456 _ d = p _ i46643 _ 4 _ ; <nl> + + this . name = name ; <nl> + } <nl> + <nl> + protected void func _ 186452 _ a ( Collection < ItemStack > p _ 186452 _ 1 _ , Random p _ 186452 _ 2 _ , LootContext p _ 186452 _ 3 _ ) <nl> + @ @ - 72 , 7 + 74 , 7 @ @ <nl> + <nl> + public void func _ 186449 _ b ( Collection < ItemStack > p _ 186449 _ 1 _ , Random p _ 186449 _ 2 _ , LootContext p _ 186449 _ 3 _ ) <nl> + { <nl> + - if ( LootConditionManager . func _ 186638 _ a ( this . field _ 186454 _ b , p _ 186449 _ 2 _ , p _ 186449 _ 3 _ ) ) <nl> + + if ( LootConditionManager . testAllConditions ( this . field _ 186454 _ b , p _ 186449 _ 2 _ , p _ 186449 _ 3 _ ) ) <nl> + { <nl> + int i = this . field _ 186455 _ c . func _ 186511 _ a ( p _ 186449 _ 2 _ ) + MathHelper . func _ 76141 _ d ( this . field _ 186456 _ d . func _ 186507 _ b ( p _ 186449 _ 2 _ ) * p _ 186449 _ 3 _ . func _ 186491 _ f ( ) ) ; <nl> + <nl> + @ @ - 83 , 21 + 85 , 74 @ @ <nl> + } <nl> + } <nl> + <nl> + + / / = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + + private boolean isFinalized = false ; <nl> + + public void finalize ( ) <nl> + + { <nl> + + this . isFinalized = true ; <nl> + + } <nl> + + public boolean isFinalized ( ) { return this . isFinalized ; } <nl> + + private void checkFinalized ( ) <nl> + + { <nl> + + if ( this . isFinalized ( ) ) <nl> + + throw new RuntimeException ( " Attempted to modify LootPool after being finalized ! " ) ; <nl> + + } <nl> + + <nl> + + public String getName ( ) { return this . name ; } <nl> + + public RandomValueRange getRolls ( ) { return this . field _ 186455 _ c ; } <nl> + + public RandomValueRange getBonusRolls ( ) { return this . field _ 186456 _ d ; } <nl> + + public void setRolls ( RandomValueRange v ) { checkFinalized ( ) ; this . field _ 186455 _ c = v ; } <nl> + + public void setBonusRolls ( RandomValueRange v ) { checkFinalized ( ) ; this . field _ 186456 _ d = v ; } <nl> + + <nl> + + public LootEntry getEntry ( String name ) <nl> + + { <nl> + + for ( LootEntry entry : this . field _ 186453 _ a ) <nl> + + if ( name . equals ( entry . getEntryName ( ) ) ) <nl> + + return entry ; <nl> + + return null ; <nl> + + } <nl> + + public LootEntry removeEntry ( String name ) <nl> + + { <nl> + + checkFinalized ( ) ; <nl> + + for ( LootEntry entry : this . field _ 186453 _ a ) <nl> + + { <nl> + + if ( name . equals ( entry . getEntryName ( ) ) ) <nl> + + { <nl> + + this . field _ 186453 _ a . remove ( entry ) ; <nl> + + return entry ; <nl> + + } <nl> + + } <nl> + + return null ; <nl> + + } <nl> + + public void addEntry ( LootEntry entry ) <nl> + + { <nl> + + checkFinalized ( ) ; <nl> + + for ( LootEntry e : this . field _ 186453 _ a ) <nl> + + if ( e = = entry | | e . getEntryName ( ) . equals ( entry . getEntryName ( ) ) ) <nl> + + throw new RuntimeException ( " Attempted to add a duplicate entry to pool : " + e . getEntryName ( ) ) ; <nl> + + this . field _ 186453 _ a . add ( entry ) ; <nl> + + } <nl> + + / / TODO : Allow modifications of conditions ? If so need a way to uniquely identify them . <nl> + + / / = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + + <nl> + public static class Serializer implements JsonDeserializer < LootPool > , JsonSerializer < LootPool > <nl> + { <nl> + public LootPool deserialize ( JsonElement p _ deserialize _ 1 _ , Type p _ deserialize _ 2 _ , JsonDeserializationContext p _ deserialize _ 3 _ ) throws JsonParseException <nl> + { <nl> + JsonObject jsonobject = JsonUtils . func _ 151210 _ l ( p _ deserialize _ 1 _ , " loot pool " ) ; <nl> + + String name = net . minecraftforge . common . ForgeHooks . readPoolName ( jsonobject ) ; <nl> + LootEntry [ ] alootentry = ( LootEntry [ ] ) JsonUtils . func _ 188174 _ a ( jsonobject , " entries " , p _ deserialize _ 3 _ , LootEntry [ ] . class ) ; <nl> + LootCondition [ ] alootcondition = ( LootCondition [ ] ) JsonUtils . func _ 188177 _ a ( jsonobject , " conditions " , new LootCondition [ 0 ] , p _ deserialize _ 3 _ , LootCondition [ ] . class ) ; <nl> + RandomValueRange randomvaluerange = ( RandomValueRange ) JsonUtils . func _ 188174 _ a ( jsonobject , " rolls " , p _ deserialize _ 3 _ , RandomValueRange . class ) ; <nl> + RandomValueRange randomvaluerange1 = ( RandomValueRange ) JsonUtils . func _ 188177 _ a ( jsonobject , " bonus _ rolls " , new RandomValueRange ( 0 . 0F , 0 . 0F ) , p _ deserialize _ 3 _ , RandomValueRange . class ) ; <nl> + - return new LootPool ( alootentry , alootcondition , randomvaluerange , randomvaluerange1 ) ; <nl> + + return new LootPool ( alootentry , alootcondition , randomvaluerange , randomvaluerange1 , name ) ; <nl> + } <nl> + <nl> + public JsonElement serialize ( LootPool p _ serialize _ 1 _ , Type p _ serialize _ 2 _ , JsonSerializationContext p _ serialize _ 3 _ ) <nl> + { <nl> + JsonObject jsonobject = new JsonObject ( ) ; <nl> + + if ( p _ serialize _ 1 _ . name ! = null & & ! p _ serialize _ 1 _ . name . startsWith ( " custom # " ) ) <nl> + + jsonobject . add ( " name " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . name ) ) ; <nl> + jsonobject . add ( " entries " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186453 _ a ) ) ; <nl> + jsonobject . add ( " rolls " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186455 _ c ) ) ; <nl> + <nl> + @ @ - 106 , 7 + 161 , 7 @ @ <nl> + jsonobject . add ( " bonus _ rolls " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186456 _ d ) ) ; <nl> + } <nl> + <nl> + - if ( ! ArrayUtils . isEmpty ( ( Object [ ] ) p _ serialize _ 1 _ . field _ 186454 _ b ) ) <nl> + + if ( ! p _ serialize _ 1 _ . field _ 186454 _ b . isEmpty ( ) ) <nl> + { <nl> + jsonobject . add ( " conditions " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186454 _ b ) ) ; <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootTable . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootTable . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 915e804 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootTable . java . patch <nl> @ @ - 0 , 0 + 1 , 75 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootTable . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootTable . java <nl> + @ @ - 24 , 11 + 24 , 11 @ @ <nl> + { <nl> + private static final Logger field _ 186465 _ b = LogManager . getLogger ( ) ; <nl> + public static final LootTable field _ 186464 _ a = new LootTable ( new LootPool [ 0 ] ) ; <nl> + - private final LootPool [ ] field _ 186466 _ c ; <nl> + + private final List < LootPool > field _ 186466 _ c ; <nl> + <nl> + public LootTable ( LootPool [ ] p _ i46641 _ 1 _ ) <nl> + { <nl> + - this . field _ 186466 _ c = p _ i46641 _ 1 _ ; <nl> + + this . field _ 186466 _ c = Lists . newArrayList ( p _ i46641 _ 1 _ ) ; <nl> + } <nl> + <nl> + public List < ItemStack > func _ 186462 _ a ( Random p _ 186462 _ 1 _ , LootContext p _ 186462 _ 2 _ ) <nl> + @ @ - 146 , 6 + 146 , 58 @ @ <nl> + return list ; <nl> + } <nl> + <nl> + + / / = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + + private boolean isFinalized = false ; <nl> + + public void finalize ( ) <nl> + + { <nl> + + this . isFinalized = true ; <nl> + + for ( LootPool pool : this . field _ 186466 _ c ) <nl> + + pool . finalize ( ) ; <nl> + + } <nl> + + public boolean isFinalized ( ) { return this . isFinalized ; } <nl> + + private void checkFinalized ( ) <nl> + + { <nl> + + if ( this . isFinalized ( ) ) <nl> + + throw new RuntimeException ( " Attempted to modify LootTable after being finalized ! " ) ; <nl> + + } <nl> + + <nl> + + public LootPool getPool ( String name ) <nl> + + { <nl> + + for ( LootPool pool : this . field _ 186466 _ c ) <nl> + + { <nl> + + if ( name . equals ( pool . getName ( ) ) ) <nl> + + return pool ; <nl> + + } <nl> + + return null ; <nl> + + } <nl> + + <nl> + + public LootPool removePool ( String name ) <nl> + + { <nl> + + checkFinalized ( ) ; <nl> + + for ( LootPool pool : this . field _ 186466 _ c ) <nl> + + { <nl> + + if ( name . equals ( pool . getName ( ) ) ) <nl> + + { <nl> + + this . field _ 186466 _ c . remove ( pool ) ; <nl> + + return pool ; <nl> + + } <nl> + + } <nl> + + <nl> + + return null ; <nl> + + } <nl> + + <nl> + + public void addPool ( LootPool pool ) <nl> + + { <nl> + + checkFinalized ( ) ; <nl> + + for ( LootPool p : this . field _ 186466 _ c ) <nl> + + { <nl> + + if ( p = = pool | | p . getName ( ) . equals ( pool . getName ( ) ) ) <nl> + + throw new RuntimeException ( " Attempted to add a duplicate pool to loot table : " + pool . getName ( ) ) ; <nl> + + } <nl> + + this . field _ 186466 _ c . add ( pool ) ; <nl> + + } <nl> + + / / = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + + <nl> + public static class Serializer implements JsonDeserializer < LootTable > , JsonSerializer < LootTable > <nl> + { <nl> + public LootTable deserialize ( JsonElement p _ deserialize _ 1 _ , Type p _ deserialize _ 2 _ , JsonDeserializationContext p _ deserialize _ 3 _ ) throws JsonParseException <nl> diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootTableManager . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootTableManager . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 3c75218 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootTableManager . java . patch <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootTableManager . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootTableManager . java <nl> + @ @ - 102 , 7 + 102 , 7 @ @ <nl> + <nl> + try <nl> + { <nl> + - return ( LootTable ) LootTableManager . field _ 186526 _ b . fromJson ( s , LootTable . class ) ; <nl> + + return net . minecraftforge . common . ForgeHooks . loadLootTable ( LootTableManager . field _ 186526 _ b , p _ 186517 _ 1 _ , s , true ) ; <nl> + } <nl> + catch ( JsonParseException jsonparseexception ) <nl> + { <nl> + @ @ - 142 , 7 + 142 , 7 @ @ <nl> + <nl> + try <nl> + { <nl> + - return ( LootTable ) LootTableManager . field _ 186526 _ b . fromJson ( s , LootTable . class ) ; <nl> + + return net . minecraftforge . common . ForgeHooks . loadLootTable ( LootTableManager . field _ 186526 _ b , p _ 186518 _ 1 _ , s , false ) ; <nl> + } <nl> + catch ( JsonParseException jsonparseexception ) <nl> + { <nl> diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 511a8e4 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java . patch <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java <nl> + @ @ - 41 , 6 + 41 , 16 @ @ <nl> + } <nl> + } <nl> + <nl> + + <nl> + + public static boolean testAllConditions ( Iterable < LootCondition > conditions , Random rand , LootContext context ) <nl> + + { <nl> + + if ( conditions = = null ) return true ; <nl> + + for ( LootCondition cond : conditions ) <nl> + + if ( ! cond . func _ 186618 _ a ( rand , context ) ) <nl> + + return false ; <nl> + + return true ; <nl> + + } <nl> + + <nl> + public static boolean func _ 186638 _ a ( LootCondition [ ] p _ 186638 _ 0 _ , Random p _ 186638 _ 1 _ , LootContext p _ 186638 _ 2 _ ) <nl> + { <nl> + if ( p _ 186638 _ 0 _ = = null ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 09497d8 . . adcdd6c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 3 , 12 + 3 , 21 @ @ package net . minecraftforge . common ; <nl> import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> import java . util . ArrayList ; <nl> + import java . util . Deque ; <nl> + import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . Random ; <nl> import java . util . Set ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> + import com . google . common . base . Throwables ; <nl> + import com . google . common . collect . Queues ; <nl> + import com . google . common . collect . Sets ; <nl> + import com . google . gson . Gson ; <nl> + import com . google . gson . JsonObject ; <nl> + import com . google . gson . JsonParseException ; <nl> + <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockLiquid ; <nl> import net . minecraft . block . material . Material ; <nl> @ @ - 47 , 6 + 56 , 8 @ @ import net . minecraft . util . DamageSource ; <nl> import net . minecraft . util . EnumActionResult ; <nl> import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . EnumHand ; <nl> + import net . minecraft . util . JsonUtils ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . WeightedRandom ; <nl> import net . minecraft . util . math . AxisAlignedBB ; <nl> import net . minecraft . util . math . BlockPos ; <nl> @ @ - 61 , 6 + 72 , 10 @ @ import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> import net . minecraft . world . WorldSettings ; <nl> import net . minecraft . world . WorldSettings . GameType ; <nl> + import net . minecraft . world . storage . loot . LootEntry ; <nl> + import net . minecraft . world . storage . loot . LootTable ; <nl> + import net . minecraft . world . storage . loot . LootTableManager ; <nl> + import net . minecraft . world . storage . loot . conditions . LootCondition ; <nl> import net . minecraftforge . common . util . BlockSnapshot ; <nl> import net . minecraftforge . event . AnvilUpdateEvent ; <nl> import net . minecraftforge . event . ForgeEventFactory ; <nl> @ @ - 970 , 4 + 985 , 132 @ @ public class ForgeHooks <nl> { <nl> MinecraftForge . EVENT _ BUS . post ( new PlayerInteractEvent . RightClickEmpty ( player , hand ) ) ; <nl> } <nl> + <nl> + private static ThreadLocal < Deque < LootTableContext > > lootContext = new ThreadLocal < Deque < LootTableContext > > ( ) ; <nl> + private static LootTableContext getLootTableContext ( ) <nl> + { <nl> + LootTableContext ctx = lootContext . get ( ) . peek ( ) ; <nl> + <nl> + if ( ctx = = null ) <nl> + throw new JsonParseException ( " Invalid call stack , could to grab json context ! " ) ; / / Show I throw this ? Do we care about custom deserializers outside the manager ? <nl> + <nl> + return ctx ; <nl> + } <nl> + public static LootTable loadLootTable ( Gson gson , ResourceLocation name , String data , boolean custom ) <nl> + { <nl> + Deque < LootTableContext > que = lootContext . get ( ) ; <nl> + if ( que = = null ) <nl> + { <nl> + que = Queues . newArrayDeque ( ) ; <nl> + lootContext . set ( que ) ; <nl> + } <nl> + <nl> + LootTable ret = null ; <nl> + try <nl> + { <nl> + que . push ( new LootTableContext ( name , custom ) ) ; <nl> + ret = gson . fromJson ( data , LootTable . class ) ; <nl> + que . pop ( ) ; <nl> + } <nl> + catch ( JsonParseException e ) <nl> + { <nl> + que . pop ( ) ; <nl> + throw e ; <nl> + } <nl> + <nl> + if ( ! custom ) <nl> + ret = ForgeEventFactory . loadLootTable ( name , ret ) ; <nl> + <nl> + return ret ; <nl> + } <nl> + <nl> + private static class LootTableContext <nl> + { <nl> + public final ResourceLocation name ; <nl> + private final boolean vanilla ; <nl> + public final boolean custom ; <nl> + public int poolCount = 0 ; <nl> + public int entryCount = 0 ; <nl> + private HashSet < String > entryNames = Sets . newHashSet ( ) ; <nl> + <nl> + private LootTableContext ( ResourceLocation name , boolean custom ) <nl> + { <nl> + this . name = name ; <nl> + this . custom = custom ; <nl> + this . vanilla = " minecraft " . equals ( this . name . getResourceDomain ( ) ) ; <nl> + } <nl> + <nl> + private void resetPoolCtx ( ) <nl> + { <nl> + this . entryCount = 0 ; <nl> + this . entryNames . clear ( ) ; <nl> + } <nl> + <nl> + public String validateEntryName ( String name ) <nl> + { <nl> + if ( ! this . entryNames . contains ( name ) ) <nl> + { <nl> + this . entryNames . add ( name ) ; <nl> + return name ; <nl> + } <nl> + <nl> + if ( ! this . vanilla ) <nl> + throw new JsonParseException ( " Loot Table \ " " + this . name . toString ( ) + " \ " Duplicate entry name \ " " + name + " \ " for pool # " + ( this . poolCount - 1 ) + " entry # " + ( this . entryCount - 1 ) ) ; <nl> + <nl> + int x = 0 ; <nl> + while ( this . entryNames . contains ( name + " # " + x ) ) <nl> + x + + ; <nl> + <nl> + name = name + " # " + x ; <nl> + this . entryNames . add ( name ) ; <nl> + <nl> + return name ; <nl> + } <nl> + } <nl> + <nl> + public static String readPoolName ( JsonObject json ) <nl> + { <nl> + LootTableContext ctx = ForgeHooks . getLootTableContext ( ) ; <nl> + ctx . resetPoolCtx ( ) ; <nl> + <nl> + if ( json . has ( " name " ) ) <nl> + return JsonUtils . getString ( json , " name " ) ; <nl> + <nl> + if ( ctx . custom ) <nl> + return " custom # " + json . hashCode ( ) ; / / We don ' t care about custom ones modders shouldn ' t be editing them ! <nl> + <nl> + ctx . poolCount + + ; <nl> + <nl> + if ( ! ctx . vanilla ) <nl> + throw new JsonParseException ( " Loot Table \ " " + ctx . name . toString ( ) + " \ " Missing ` name ` entry for pool # " + ( ctx . poolCount - 1 ) ) ; <nl> + <nl> + return ctx . poolCount = = 1 ? " main " : " pool " + ( ctx . poolCount - 1 ) ; <nl> + } <nl> + <nl> + public static String readLootEntryName ( JsonObject json , String type ) <nl> + { <nl> + LootTableContext ctx = ForgeHooks . getLootTableContext ( ) ; <nl> + ctx . entryCount + + ; <nl> + <nl> + if ( json . has ( " entryName " ) ) <nl> + return ctx . validateEntryName ( JsonUtils . getString ( json , " EntryName " ) ) ; <nl> + <nl> + if ( ctx . custom ) <nl> + return " custom # " + json . hashCode ( ) ; / / We don ' t care about custom ones modders shouldn ' t be editing them ! <nl> + <nl> + String name = null ; <nl> + if ( " item " . equals ( type ) ) <nl> + name = JsonUtils . getString ( json , " name " ) ; <nl> + else if ( " loot _ table " . equals ( type ) ) <nl> + name = JsonUtils . getString ( json , " name " ) ; <nl> + else if ( " empty " . equals ( type ) ) <nl> + name = " empty " ; <nl> + <nl> + return ctx . validateEntryName ( name ) ; <nl> + } <nl> + <nl> + <nl> + / / TODO : Some registry to support custom LootEntry types ? <nl> + public static LootEntry deserializeJsonLootEntry ( String type , JsonObject json , int weight , int quality , LootCondition [ ] conditions ) { return null ; } <nl> + public static String getLootEntryType ( LootEntry entry ) { return null ; } / / Companion to above function <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> index d590a89 . . 8afe6d3 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import net . minecraft . util . DamageSource ; <nl> import net . minecraft . util . EnumActionResult ; <nl> import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . EnumHand ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . SoundCategory ; <nl> import net . minecraft . util . SoundEvent ; <nl> import net . minecraft . util . math . BlockPos ; <nl> @ @ - 39 , 6 + 40 , 7 @ @ import net . minecraft . world . chunk . ChunkPrimer ; <nl> import net . minecraft . world . chunk . IChunkGenerator ; <nl> import net . minecraft . world . storage . IPlayerFileData ; <nl> import net . minecraft . world . storage . SaveHandler ; <nl> + import net . minecraft . world . storage . loot . LootTable ; <nl> import net . minecraftforge . client . event . ClientChatReceivedEvent ; <nl> import net . minecraftforge . client . event . RenderBlockOverlayEvent ; <nl> import net . minecraftforge . client . event . RenderBlockOverlayEvent . OverlayType ; <nl> @ @ - 541 , 4 + 543 , 12 @ @ public class ForgeEventFactory <nl> MinecraftForge . EVENT _ BUS . post ( pre ? new PopulateChunkEvent . Pre ( gen , world , rand , x , z , hasVillageGenerated ) : new PopulateChunkEvent . Post ( gen , world , rand , x , z , hasVillageGenerated ) ) ; <nl> } <nl> <nl> + public static LootTable loadLootTable ( ResourceLocation name , LootTable table ) <nl> + { <nl> + LootTableLoadEvent event = new LootTableLoadEvent ( name , table ) ; <nl> + if ( MinecraftForge . EVENT _ BUS . post ( event ) ) <nl> + return LootTable . EMPTY _ LOOT _ TABLE ; <nl> + return event . getTable ( ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / event / LootTableLoadEvent . java b / src / main / java / net / minecraftforge / event / LootTableLoadEvent . java <nl> new file mode 100644 <nl> index 0000000 . . ab8870a <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / LootTableLoadEvent . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + package net . minecraftforge . event ; <nl> + <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . world . storage . loot . LootTable ; <nl> + import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + <nl> + / * * <nl> + * Event fired when a LootTable json is loaded from json . <nl> + * This event is fired whenever resources are loaded , or when the server starts . <nl> + * This event will NOT be fired for LootTables loaded from the world folder , these are <nl> + * considered configurations files and should not be modified by mods . <nl> + * <nl> + * Canceling the event will make it load a empty loot table . <nl> + * <nl> + * / <nl> + @ Cancelable <nl> + public class LootTableLoadEvent extends Event <nl> + { <nl> + private final ResourceLocation name ; <nl> + private LootTable table ; <nl> + <nl> + public LootTableLoadEvent ( ResourceLocation name , LootTable table ) <nl> + { <nl> + this . name = name ; <nl> + this . table = table ; <nl> + } <nl> + <nl> + public ResourceLocation getName ( ) <nl> + { <nl> + return this . name ; <nl> + } <nl> + <nl> + public LootTable getTable ( ) <nl> + { <nl> + return this . table ; <nl> + } <nl> + <nl> + public void setTable ( LootTable table ) <nl> + { <nl> + this . table = table ; <nl> + } <nl> + } <nl> diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc <nl> index 6902fce . . ddeb959 100644 <nl> - - - a / src / main / resources / forge . exc <nl> + + + b / src / main / resources / forge . exc <nl> @ @ - 47 , 3 + 47 , 9 @ @ net / minecraft / item / ItemStack . < init > ( Lnet / minecraft / item / Item ; IILnet / minecraft / nb <nl> net / minecraft / block / BlockRedstoneWire . canConnectTo ( Lnet / minecraft / block / state / IBlockState ; Lnet / minecraft / util / EnumFacing ; Lnet / minecraft / world / IBlockAccess ; Lnet / minecraft / util / math / BlockPos ; ) Z = p _ 176343 _ 0 _ , p _ 176343 _ 1 _ , world , pos <nl> net / minecraft / client / renderer / block / model / BakedQuad . < init > ( [ IILnet / minecraft / util / EnumFacing ; Lnet / minecraft / client / renderer / texture / TextureAtlasSprite ; ZLnet / minecraft / client / renderer / vertex / VertexFormat ; ) V = | p _ i46574 _ 1 _ , p _ i46574 _ 2 _ , p _ i46574 _ 3 _ , p _ i46574 _ 4 _ , applyDiffuseLighting , format <nl> net / minecraft / client / renderer / texture / TextureMap . < init > ( Ljava / lang / String ; Lnet / minecraft / client / renderer / texture / IIconCreator ; Z ) V = | p _ i46100 _ 1 _ , p _ i46100 _ 2 _ , skipFirst <nl> + <nl> + net / minecraft / world / storage / loot / LootPool . < init > ( [ Lnet / minecraft / world / storage / loot / LootEntry ; [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Lnet / minecraft / world / storage / loot / RandomValueRange ; Lnet / minecraft / world / storage / loot / RandomValueRange ; Ljava / lang / String ; ) V = | p _ i46643 _ 1 _ , p _ i46643 _ 2 _ , p _ i46643 _ 3 _ , p _ i46643 _ 4 _ <nl> + net / minecraft / world / storage / loot / LootEntry . < init > ( II [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Ljava / lang / String ; ) V = | p _ i46642 _ 1 _ , p _ i46642 _ 2 _ , p _ i46642 _ 3 _ , entryName <nl> + net / minecraft / world / storage / loot / LootEntryItem . < init > ( Lnet / minecraft / item / Item ; II [ Lnet / minecraft / world / storage / loot / functions / LootFunction ; [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Ljava / lang / String ; ) V = | p _ i46644 _ 1 _ , p _ i46644 _ 2 _ , p _ i46644 _ 3 _ , p _ i46644 _ 4 _ , p _ i46644 _ 5 _ , entryName <nl> + net / minecraft / world / storage / loot / LootEntryTable . < init > ( Lnet / minecraft / util / ResourceLocation ; II [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Ljava / lang / String ; ) V = | p _ i46639 _ 1 _ , p _ i46639 _ 2 _ , p _ i46639 _ 3 _ , p _ i46639 _ 4 _ , entryName <nl> + net / minecraft / world / storage / loot / LootEntryEmpty . < init > ( II [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Ljava / lang / String ; ) V = | p _ i46645 _ 1 _ , p _ i46645 _ 2 _ , p _ i46645 _ 3 _ , entryName <nl> diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg <nl> index 316062b . . 64c6552 100644 <nl> - - - a / src / main / resources / forge _ at . cfg <nl> + + + b / src / main / resources / forge _ at . cfg <nl> @ @ - 289 , 3 + 289 , 7 @ @ private - f net . minecraft . server . management . PlayerManager $ PlayerInstance field _ 187 <nl> # RenderLivingBase <nl> public net . minecraft . client . renderer . entity . RenderLivingBase func _ 177094 _ a ( Lnet / minecraft / client / renderer / entity / layers / LayerRenderer ; ) Z # addLayer <nl> public net . minecraft . client . renderer . entity . RenderLivingBase func _ 177089 _ b ( Lnet / minecraft / client / renderer / entity / layers / LayerRenderer ; ) Z # removeLayer <nl> + <nl> + # LootTable Stuff <nl> + private - f net . minecraft . world . storage . loot . LootPool field _ 186455 _ c # rolls <nl> + private - f net . minecraft . world . storage . loot . LootPool field _ 186456 _ d # bonusRolls <nl> \ No newline at end of file <nl> diff - - git a / src / test / java / net / minecraftforge / debug / LootTablesDebug . java b / src / test / java / net / minecraftforge / debug / LootTablesDebug . java <nl> new file mode 100644 <nl> index 0000000 . . f22247a <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / LootTablesDebug . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . init . Items ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . world . storage . loot . LootEntryItem ; <nl> + import net . minecraft . world . storage . loot . LootPool ; <nl> + import net . minecraft . world . storage . loot . LootTableList ; <nl> + import net . minecraft . world . storage . loot . conditions . LootCondition ; <nl> + import net . minecraft . world . storage . loot . functions . LootFunction ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . LootTableLoadEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + @ Mod ( modid = LootTablesDebug . MODID ) <nl> + public class LootTablesDebug { <nl> + public static final String MODID = " loot _ table _ debug " ; <nl> + private static final ResourceLocation CUSTOM _ LOOT = LootTableList . register ( new ResourceLocation ( MODID , " custom _ loot " ) ) ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void lootLoad ( LootTableLoadEvent event ) <nl> + { <nl> + if ( ! event . getName ( ) . equals ( LootTableList . CHESTS _ SPAWN _ BONUS _ CHEST ) ) <nl> + return ; <nl> + <nl> + / / Remove axes and replace with chestpeice , First vanilla entry is always called " main " <nl> + LootPool main = event . getTable ( ) . getPool ( " main " ) ; / / Note : This CAN NPE if another mod removes things <nl> + main . removeEntry ( " minecraft : wooden _ axe " ) ; <nl> + main . removeEntry ( " minecraft : stone _ axe " ) ; <nl> + main . addEntry ( new LootEntryItem ( Items . diamond _ chestplate , 1 , 0 , new LootFunction [ 0 ] , new LootCondition [ 0 ] , MODID + " : diamond _ chestplate " ) ) ; <nl> + <nl> + / / Get rid of all building mats . Which is pool # 3 , index starts at 0 , but 0 is named " main " <nl> + event . getTable ( ) . removePool ( " pool3 " ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index 523a8df . . a946cbd 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 161 , 7 + 161 , 7 @ @ <nl> } <nl> <nl> protected ItemStack func _ 180643 _ i ( IBlockState p _ 180643 _ 1 _ ) <nl> - @ @ - 971 , 6 + 989 , 1011 @ @ <nl> + @ @ - 971 , 6 + 989 , 1019 @ @ <nl> return Block . EnumOffsetType . NONE ; <nl> } <nl> <nl> @ @ - 1145 , 6 + 1145 , 14 @ @ <nl> + return type ! = null & & type . equals ( getHarvestTool ( state ) ) ; <nl> + } <nl> + <nl> + + / * * <nl> + + * Can return IExtendedBlockState <nl> + + * / <nl> + + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> + + { <nl> + + return func _ 176221 _ a ( state , world , pos ) ; <nl> + + } <nl> + + <nl> + / / For Internal use only to capture droped items inside getDrops <nl> + protected static ThreadLocal < Boolean > captureDrops = new ThreadLocal < Boolean > ( ) <nl> + { <nl> diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 90b08e7 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / block / state / BlockState . java <nl> + + + + . . / src - work / minecraft / net / minecraft / block / state / BlockState . java <nl> + @ @ - 47 , 6 + 47 , 16 @ @ <nl> + <nl> + public BlockState ( Block p _ i45663 _ 1 _ , IProperty . . . p _ i45663 _ 2 _ ) <nl> + { <nl> + + this ( p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , null ) ; <nl> + + } <nl> + + <nl> + + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) <nl> + + { <nl> + + return new StateImplementation ( block , properties ) ; <nl> + + } <nl> + + <nl> + + protected BlockState ( Block p _ i45663 _ 1 _ , IProperty [ ] p _ i45663 _ 2 _ , ImmutableMap unlistedProperties ) <nl> + + { <nl> + this . field _ 177627 _ c = p _ i45663 _ 1 _ ; <nl> + Arrays . sort ( p _ i45663 _ 2 _ , new Comparator ( ) <nl> + { <nl> + @ @ - 70 , 7 + 80 , 7 @ @ <nl> + { <nl> + List list = ( List ) iterator . next ( ) ; <nl> + Map map = MapPopulator . func _ 179400 _ b ( this . field _ 177624 _ d , list ) ; <nl> + - BlockState . StateImplementation stateimplementation = new BlockState . StateImplementation ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , null ) ; <nl> + + BlockState . StateImplementation stateimplementation = createState ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , unlistedProperties ) ; <nl> + linkedhashmap . put ( map , stateimplementation ) ; <nl> + arraylist . add ( stateimplementation ) ; <nl> + } <nl> + @ @ - 231 , 5 + 241 , 10 @ @ <nl> + { <nl> + this ( p _ i45661 _ 1 _ , p _ i45661 _ 2 _ ) ; <nl> + } <nl> + + <nl> + + public ImmutableTable < IProperty , Comparable , IBlockState > getPropertyValueTable ( ) <nl> + + { <nl> + + return field _ 177238 _ c ; <nl> + + } <nl> + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> new file mode 100644 <nl> index 0000000 . . a24be3d <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + @ @ - 129 , 6 + 129 , 12 @ @ <nl> + ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; <nl> + } <nl> + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) <nl> + + { <nl> + + IBlockState extendedState = block . getExtendedState ( p _ 175022 _ 1 _ , p _ 175022 _ 2 _ , p _ 175022 _ 3 _ ) ; <nl> + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; <nl> + + } <nl> + + <nl> + return ibakedmodel ; <nl> + } <nl> + <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch <nl> new file mode 100644 <nl> index 0000000 . . dbe123b <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / ItemModelMesher . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / ItemModelMesher . java <nl> + @ @ - 52 , 6 + 52 , 11 @ @ <nl> + } <nl> + } <nl> + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartItemModel ) <nl> + + { <nl> + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartItemModel ) ibakedmodel ) . handleItemState ( p _ 178089 _ 1 _ ) ; <nl> + + } <nl> + + <nl> + if ( ibakedmodel = = null ) <nl> + { <nl> + ibakedmodel = this . field _ 178090 _ d . func _ 174951 _ a ( ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 9b2da14 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / resources / model / ModelManager . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / resources / model / ModelManager . java <nl> + @ @ - 28 , 6 + 28 , 7 @ @ <nl> + ModelBakery modelbakery = new ModelBakery ( p _ 110549 _ 1 _ , this . field _ 174956 _ b , this . field _ 174957 _ c ) ; <nl> + this . field _ 174958 _ a = modelbakery . func _ 177570 _ a ( ) ; <nl> + this . field _ 174955 _ d = ( IBakedModel ) this . field _ 174958 _ a . func _ 82594 _ a ( ModelBakery . field _ 177604 _ a ) ; <nl> + + net . minecraftforge . client . ForgeHooksClient . onModelBake ( this , this . field _ 174958 _ a , modelbakery ) ; <nl> + this . field _ 174957 _ c . func _ 178124 _ c ( ) ; <nl> + } <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 9b9b75e . . d0126b6 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 2 , 41 + 2 , 31 @ @ package net . minecraftforge . client ; <nl> <nl> import static net . minecraftforge . common . ForgeVersion . Status . BETA ; <nl> import static net . minecraftforge . common . ForgeVersion . Status . BETA _ OUTDATED ; <nl> - import java . util . Random ; <nl> - import javax . imageio . ImageIO ; <nl> import net . minecraft . block . Block ; <nl> - import net . minecraft . block . BlockBed ; <nl> - import net . minecraft . block . BlockLiquid ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . audio . ISound ; <nl> import net . minecraft . client . audio . SoundEventAccessorComposite ; <nl> import net . minecraft . client . audio . SoundManager ; <nl> - import net . minecraft . client . entity . EntityPlayerSP ; <nl> import net . minecraft . client . gui . FontRenderer ; <nl> import net . minecraft . client . gui . GuiMainMenu ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . client . model . ModelBase ; <nl> - import net . minecraft . client . model . ModelBiped ; <nl> import net . minecraft . client . renderer . EntityRenderer ; <nl> - import net . minecraft . client . renderer . GlStateManager ; <nl> import net . minecraft . client . renderer . RenderGlobal ; <nl> - import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . client . renderer . texture . TextureManager ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . client . resources . model . ModelBakery ; <nl> + import net . minecraft . client . resources . model . ModelManager ; <nl> import net . minecraft . client . settings . GameSettings ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityLivingBase ; <nl> - import net . minecraft . entity . item . EntityItem ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> - import net . minecraft . init . Blocks ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . BlockPos ; <nl> - import net . minecraft . util . ChatComponentTranslation ; <nl> import net . minecraft . util . EnumChatFormatting ; <nl> - import net . minecraft . util . EnumFacing ; <nl> - import net . minecraft . util . MathHelper ; <nl> + import net . minecraft . util . IRegistry ; <nl> import net . minecraft . util . MovingObjectPosition ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> @ @ - 45 , 6 + 35 , 7 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> import net . minecraftforge . client . event . EntityViewRenderEvent ; <nl> import net . minecraftforge . client . event . FOVUpdateEvent ; <nl> import net . minecraftforge . client . event . GuiScreenEvent ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> import net . minecraftforge . client . event . RenderHandEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> @ @ - 54 , 14 + 45 , 9 @ @ import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> - import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> - import net . minecraftforge . fml . client . registry . RenderingRegistry ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> - import org . lwjgl . LWJGLException ; <nl> - import org . lwjgl . opengl . Display ; <nl> + <nl> import org . lwjgl . opengl . GL11 ; <nl> - import org . lwjgl . opengl . PixelFormat ; <nl> / / import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; <nl> / / import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; <nl> <nl> @ @ - 470 , 4 + 456 , 9 @ @ public class ForgeHooksClient <nl> } <nl> } <nl> * / <nl> + <nl> + public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 502454f <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package net . minecraftforge . client . event ; <nl> + <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + import net . minecraft . client . resources . model . ModelBakery ; <nl> + import net . minecraft . client . resources . model . ModelManager ; <nl> + import net . minecraft . util . IRegistry ; <nl> + <nl> + / * * <nl> + * Fired when the ModelManager is notified of the resource manager reloading . <nl> + * Called after model registry is setup , but before it ' s passed to BlockModelShapes . <nl> + * / <nl> + public class ModelBakeEvent extends Event <nl> + { <nl> + public final ModelManager modelManager ; <nl> + public final IRegistry modelRegistry ; <nl> + public final ModelBakery modelBakery ; <nl> + <nl> + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + { <nl> + this . modelManager = modelManager ; <nl> + this . modelRegistry = modelRegistry ; <nl> + this . modelBakery = modelBakery ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java <nl> new file mode 100644 <nl> index 0000000 . . 37dee84 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + <nl> + public interface ISmartBlockModel extends IBakedModel <nl> + { <nl> + IBakedModel handleBlockState ( IBlockState state ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java <nl> new file mode 100644 <nl> index 0000000 . . 7973271 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + <nl> + public interface ISmartItemModel extends IBakedModel <nl> + { <nl> + IBakedModel handleItemState ( ItemStack stack ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> new file mode 100644 <nl> index 0000000 . . ef54140 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> @ @ - 0 , 0 + 1 , 138 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . properties . IProperty ; <nl> + import net . minecraft . block . state . BlockState ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . base . Predicates ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . collect . ImmutableTable ; <nl> + import com . google . common . collect . Iterables ; <nl> + <nl> + public class ExtendedBlockState extends BlockState <nl> + { <nl> + private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; <nl> + <nl> + public ExtendedBlockState ( Block blockIn , IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> + { <nl> + super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; <nl> + ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; <nl> + for ( IUnlistedProperty < ? > property : unlistedProperties ) <nl> + { <nl> + builder . add ( property ) ; <nl> + } <nl> + this . unlistedProperties = builder . build ( ) ; <nl> + } <nl> + <nl> + private static ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > buildUnlistedMap ( IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> + { <nl> + ImmutableMap . Builder < IUnlistedProperty < ? > , Optional < ? > > builder = ImmutableMap . < IUnlistedProperty < ? > , Optional < ? > > builder ( ) ; <nl> + for ( IUnlistedProperty < ? > p : unlistedProperties ) <nl> + { <nl> + builder . put ( p , Optional . absent ( ) ) ; <nl> + } <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) <nl> + { <nl> + return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; <nl> + } <nl> + <nl> + protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState <nl> + { <nl> + private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; <nl> + private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; <nl> + <nl> + protected ExtendedStateImplementation ( Block block , ImmutableMap properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) <nl> + { <nl> + super ( block , properties ) ; <nl> + this . unlistedProperties = unlistedProperties ; <nl> + this . propertyValueTable = table ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBlockState withProperty ( IProperty property , Comparable value ) <nl> + { <nl> + if ( ! this . getProperties ( ) . containsKey ( property ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; <nl> + } <nl> + else if ( ! property . getAllowedValues ( ) . contains ( value ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; <nl> + } <nl> + else <nl> + { <nl> + if ( this . getProperties ( ) . get ( property ) = = value ) <nl> + { <nl> + return this ; <nl> + } <nl> + if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) <nl> + { / / no dynamic properties present , looking up in the normal table <nl> + return super . withProperty ( property , value ) ; <nl> + } <nl> + Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; <nl> + map . put ( property , value ) ; <nl> + ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; <nl> + table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; <nl> + return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) ; <nl> + } <nl> + } <nl> + <nl> + public < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) <nl> + { <nl> + if ( ! this . unlistedProperties . containsKey ( property ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; <nl> + } <nl> + if ( ! property . isValid ( value ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; <nl> + } <nl> + Map < IUnlistedProperty < ? > , Optional < ? > > newMap = new HashMap < IUnlistedProperty < ? > , Optional < ? > > ( unlistedProperties ) ; <nl> + newMap . put ( property , Optional . fromNullable ( value ) ) ; <nl> + if ( Iterables . all ( newMap . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) <nl> + { / / no dynamic properties , lookup normal state <nl> + return ( IExtendedBlockState ) normalMap . get ( getProperties ( ) ) ; <nl> + } <nl> + return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) ; <nl> + } <nl> + <nl> + public Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) <nl> + { <nl> + return Collections . unmodifiableCollection ( unlistedProperties . keySet ( ) ) ; <nl> + } <nl> + <nl> + public < V > V getValue ( IUnlistedProperty < V > property ) <nl> + { <nl> + if ( ! this . unlistedProperties . containsKey ( property ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot get unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; <nl> + } <nl> + return property . getType ( ) . cast ( this . unlistedProperties . get ( property ) . orNull ( ) ) ; <nl> + } <nl> + <nl> + public ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) <nl> + { <nl> + return unlistedProperties ; <nl> + } <nl> + <nl> + @ Override <nl> + public void buildPropertyValueTable ( Map map ) <nl> + { <nl> + this . normalMap = map ; <nl> + super . buildPropertyValueTable ( map ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java <nl> new file mode 100644 <nl> index 0000000 . . 218e427 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + import java . util . Collection ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + public interface IExtendedBlockState extends IBlockState <nl> + { <nl> + Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) ; <nl> + <nl> + < V > V getValue ( IUnlistedProperty < V > property ) ; <nl> + <nl> + < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) ; <nl> + <nl> + ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java <nl> new file mode 100644 <nl> index 0000000 . . da4b702 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + public interface IUnlistedProperty < V > <nl> + { <nl> + String getName ( ) ; <nl> + <nl> + boolean isValid ( V value ) ; <nl> + <nl> + Class < V > getType ( ) ; <nl> + <nl> + String valueToString ( V value ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / Properties . java b / src / main / java / net / minecraftforge / common / property / Properties . java <nl> new file mode 100644 <nl> index 0000000 . . b24e6be <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / Properties . java <nl> @ @ - 0 , 0 + 1 , 45 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + <nl> + import net . minecraft . block . properties . IProperty ; <nl> + <nl> + import org . apache . commons . lang3 . reflect . ConstructorUtils ; <nl> + <nl> + public class Properties <nl> + { <nl> + public static < P extends IProperty , V > IUnlistedProperty < V > toUnlisted ( P property ) <nl> + { <nl> + return new PropertyAdapter ( property ) ; <nl> + } <nl> + <nl> + public static class PropertyAdapter < V extends Comparable > implements IUnlistedProperty < V > <nl> + { <nl> + private final IProperty parent ; <nl> + <nl> + public PropertyAdapter ( IProperty parent ) <nl> + { <nl> + this . parent = parent ; <nl> + } <nl> + <nl> + public String getName ( ) <nl> + { <nl> + return parent . getName ( ) ; <nl> + } <nl> + <nl> + public boolean isValid ( V value ) <nl> + { <nl> + return parent . getAllowedValues ( ) . contains ( value ) ; <nl> + } <nl> + <nl> + public Class < V > getType ( ) <nl> + { <nl> + return parent . getValueClass ( ) ; <nl> + } <nl> + <nl> + public String valueToString ( V value ) <nl> + { <nl> + return parent . getName ( value ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc <nl> index c2381c6 . . f59ef26 100644 <nl> - - - a / src / main / resources / forge . exc <nl> + + + b / src / main / resources / forge . exc <nl> @ @ - 26 , 4 + 26 , 5 @ @ net / minecraft / block / BlockFire . tryCatchFire ( Lnet / minecraft / world / World ; Lnet / minec <nl> net / minecraft / block / BlockSkull . getDrops ( Lnet / minecraft / world / IBlockAccess ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / block / state / IBlockState ; I ) Ljava / util / List ; = | p _ 180663 _ 1 _ , p _ 180663 _ 2 _ , p _ 180663 _ 3 _ , fortune <nl> net / minecraft / item / ItemDye . applyBonemeal ( Lnet / minecraft / item / ItemStack ; Lnet / minecraft / world / World ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / entity / player / EntityPlayer ; ) Z = | p _ 179234 _ 0 _ , p _ 179234 _ 1 _ , p _ 179234 _ 2 _ , player <nl> net / minecraft / server / management / ItemInWorldManager . removeBlock ( Lnet / minecraft / util / BlockPos ; Z ) Z = | p _ 180235 _ 1 _ , canHarvest <nl> - net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font <nl> \ No newline at end of file <nl> + net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font <nl> + net / minecraft / block / state / BlockState . < init > ( Lnet / minecraft / block / Block ; [ Lnet / minecraft / block / properties / IProperty ; Lcom / google / common / collect / ImmutableMap ; ) V = | p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , unlistedProperties <nl> diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg <nl> index ff42e14 . . 6c78cf2 100644 <nl> - - - a / src / main / resources / forge _ at . cfg <nl> + + + b / src / main / resources / forge _ at . cfg <nl> @ @ - 119 , 4 + 119 , 7 @ @ public net . minecraft . world . gen . ChunkProviderServer field _ 73251 _ h # worldObj <nl> # RenderEntityItem <nl> protected net . minecraft . client . renderer . entity . RenderEntityItem func _ 177078 _ a ( Lnet / minecraft / item / ItemStack ; ) I # getMiniItemCount <nl> public net . minecraft . item . crafting . RecipesBanners $ RecipeAddPattern <nl> - public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern <nl> \ No newline at end of file <nl> + public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern <nl> + protected net . minecraft . block . state . BlockState $ StateImplementation <nl> + protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V <nl> + protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> new file mode 100644 <nl> index 0000000 . . c8de9a4 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> @ @ - 0 , 0 + 1 , 354 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . block . BlockContainer ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . properties . IProperty ; <nl> + import net . minecraft . block . properties . PropertyInteger ; <nl> + import net . minecraft . block . state . BlockState ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . entity . RenderItem ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . tileentity . TileEntity ; <nl> + import net . minecraft . util . BlockPos ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . Vec3 ; <nl> + import net . minecraft . world . IBlockAccess ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> + import net . minecraftforge . client . model . ISmartBlockModel ; <nl> + import net . minecraftforge . client . model . ISmartItemModel ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . common . property . ExtendedBlockState ; <nl> + import net . minecraftforge . common . property . IExtendedBlockState ; <nl> + import net . minecraftforge . common . property . IUnlistedProperty ; <nl> + import net . minecraftforge . common . property . Properties ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . SidedProxy ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> + @ Mod ( modid = ModelBakeEventDebug . MODID , version = ModelBakeEventDebug . VERSION ) <nl> + public class ModelBakeEventDebug <nl> + { <nl> + public static final String MODID = " ForgeDebugModelBakeEvent " ; <nl> + public static final String VERSION = " 1 . 0 " ; <nl> + public static final int cubeSize = 3 ; <nl> + <nl> + private static String blockName = MODID . toLowerCase ( ) + " : " + CustomModelBlock . name ; <nl> + <nl> + public static final IUnlistedProperty < Integer > [ ] properties = new IUnlistedProperty [ 6 ] ; <nl> + <nl> + static <nl> + { <nl> + for ( EnumFacing f : EnumFacing . values ( ) ) <nl> + { <nl> + properties [ f . ordinal ( ) ] = Properties . toUnlisted ( PropertyInteger . create ( f . getName ( ) , 0 , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ SidedProxy ( serverSide = " net . minecraftforge . debug . ModelBakeEventDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . ModelBakeEventDebug $ ClientProxy " ) <nl> + public static CommonProxy proxy ; <nl> + <nl> + @ EventHandler <nl> + public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } <nl> + <nl> + @ EventHandler <nl> + public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } <nl> + <nl> + public static class CommonProxy <nl> + { <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; <nl> + GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; <nl> + } <nl> + <nl> + public void postInit ( FMLPostInitializationEvent event ) { } <nl> + } <nl> + <nl> + public static class ClientProxy extends CommonProxy <nl> + { <nl> + private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; <nl> + <nl> + @ Override <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + super . init ( event ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void postInit ( FMLPostInitializationEvent event ) { <nl> + super . postInit ( event ) ; <nl> + Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> + RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; <nl> + if ( renderItem ! = null ) <nl> + { <nl> + renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { <nl> + public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> + { <nl> + return modelLocation ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static class BakeEventHandler <nl> + { <nl> + public static final BakeEventHandler instance = new BakeEventHandler ( ) ; <nl> + <nl> + private BakeEventHandler ( ) { } ; <nl> + <nl> + @ SubscribeEvent <nl> + public void onModelBakeEvent ( ModelBakeEvent event ) <nl> + { <nl> + TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; <nl> + TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; <nl> + event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static class CustomModelBlock extends BlockContainer <nl> + { <nl> + public static final CustomModelBlock instance = new CustomModelBlock ( ) ; <nl> + public static final String name = " custom _ model _ block " ; <nl> + <nl> + private CustomModelBlock ( ) <nl> + { <nl> + super ( Material . iron ) ; <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + setUnlocalizedName ( MODID + " : " + name ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getRenderType ( ) { return 3 ; } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean isFullCube ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean isVisuallyOpaque ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public TileEntity createNewTileEntity ( World world , int meta ) <nl> + { <nl> + return new CustomTileEntity ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> + { <nl> + TileEntity te = world . getTileEntity ( pos ) ; <nl> + if ( te instanceof CustomTileEntity ) <nl> + { <nl> + CustomTileEntity cte = ( CustomTileEntity ) te ; <nl> + Vec3 vec = revRotate ( new Vec3 ( hitX - . 5 , hitY - . 5 , hitZ - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + IUnlistedProperty property = properties [ side . ordinal ( ) ] ; <nl> + Integer value = ( Integer ) cte . getState ( ) . getValue ( property ) ; <nl> + if ( value = = null ) value = 0 ; <nl> + value ^ = ( 1 < < ( cubeSize * ( ( int ) ( vec . xCoord * ( cubeSize - . 0001 ) ) ) + ( ( int ) ( vec . zCoord * ( cubeSize - . 0001 ) ) ) ) ) ; <nl> + cte . setState ( cte . getState ( ) . withProperty ( property , value ) ) ; <nl> + world . markBlockRangeForRenderUpdate ( pos , pos ) ; <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> + { <nl> + TileEntity te = world . getTileEntity ( pos ) ; <nl> + if ( te instanceof CustomTileEntity ) <nl> + { <nl> + CustomTileEntity cte = ( CustomTileEntity ) te ; <nl> + return cte . getState ( ) ; <nl> + } <nl> + return state ; <nl> + } <nl> + <nl> + @ Override <nl> + protected BlockState createBlockState ( ) <nl> + { <nl> + return new ExtendedBlockState ( this , new IProperty [ 0 ] , properties ) ; <nl> + } <nl> + } <nl> + <nl> + public static class CustomTileEntity extends TileEntity <nl> + { <nl> + private IExtendedBlockState state ; <nl> + public CustomTileEntity ( ) { } <nl> + <nl> + public IExtendedBlockState getState ( ) <nl> + { <nl> + if ( state = = null ) <nl> + { <nl> + state = ( IExtendedBlockState ) getBlockType ( ) . getDefaultState ( ) ; <nl> + } <nl> + return state ; <nl> + } <nl> + <nl> + public void setState ( IExtendedBlockState state ) <nl> + { <nl> + this . state = state ; <nl> + } <nl> + } <nl> + <nl> + public static class CustomModel implements IBakedModel , ISmartBlockModel , ISmartItemModel <nl> + { <nl> + private final TextureAtlasSprite base , overlay ; <nl> + private boolean hasStateSet = false ; <nl> + private final IExtendedBlockState state ; <nl> + <nl> + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay ) <nl> + { <nl> + this ( base , overlay , null ) ; <nl> + } <nl> + <nl> + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay , IExtendedBlockState state ) <nl> + { <nl> + this . base = base ; <nl> + this . overlay = overlay ; <nl> + this . state = state ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , float u , float v ) <nl> + { <nl> + return new int [ ] { <nl> + Float . floatToRawIntBits ( x ) , <nl> + Float . floatToRawIntBits ( y ) , <nl> + Float . floatToRawIntBits ( z ) , <nl> + color , <nl> + Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , <nl> + Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , <nl> + 0 <nl> + } ; <nl> + } <nl> + <nl> + private BakedQuad createSidedBakedQuad ( float x1 , float x2 , float z1 , float z2 , float y , TextureAtlasSprite texture , EnumFacing side ) <nl> + { <nl> + Vec3 v1 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + Vec3 v2 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + Vec3 v3 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + Vec3 v4 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + return new BakedQuad ( Ints . concat ( <nl> + vertexToInts ( ( float ) v1 . xCoord , ( float ) v1 . yCoord , ( float ) v1 . zCoord , - 1 , texture , 0 , 0 ) , <nl> + vertexToInts ( ( float ) v2 . xCoord , ( float ) v2 . yCoord , ( float ) v2 . zCoord , - 1 , texture , 0 , 16 ) , <nl> + vertexToInts ( ( float ) v3 . xCoord , ( float ) v3 . yCoord , ( float ) v3 . zCoord , - 1 , texture , 16 , 16 ) , <nl> + vertexToInts ( ( float ) v4 . xCoord , ( float ) v4 . yCoord , ( float ) v4 . zCoord , - 1 , texture , 16 , 0 ) <nl> + ) , - 1 , side ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getGeneralQuads ( ) <nl> + { <nl> + int len = cubeSize * 5 + 1 ; <nl> + List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; <nl> + for ( EnumFacing f : EnumFacing . values ( ) ) <nl> + { <nl> + ret . add ( createSidedBakedQuad ( 0 , 1 , 0 , 1 , 1 , base , f ) ) ; <nl> + for ( int i = 0 ; i < cubeSize ; i + + ) <nl> + { <nl> + for ( int j = 0 ; j < cubeSize ; j + + ) <nl> + { <nl> + if ( state ! = null ) <nl> + { <nl> + Integer value = ( Integer ) state . getValue ( properties [ f . ordinal ( ) ] ) ; <nl> + if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) <nl> + { <nl> + ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + return ret ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) { return true ; } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) { return true ; } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) { return this . base ; } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleBlockState ( IBlockState state ) <nl> + { <nl> + return new CustomModel ( base , overlay , ( IExtendedBlockState ) state ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleItemState ( ItemStack stack ) <nl> + { <nl> + IExtendedBlockState itemState = ( ( IExtendedBlockState ) CustomModelBlock . instance . getDefaultState ( ) ) . withProperty ( properties [ 1 ] , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ; <nl> + return new CustomModel ( base , overlay , itemState ) ; <nl> + } <nl> + } <nl> + <nl> + private static Vec3 rotate ( Vec3 vec , EnumFacing side ) <nl> + { <nl> + switch ( side ) <nl> + { <nl> + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; <nl> + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; <nl> + case NORTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; <nl> + case SOUTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; <nl> + case WEST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; <nl> + case EAST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + private static Vec3 revRotate ( Vec3 vec , EnumFacing side ) <nl> + { <nl> + switch ( side ) <nl> + { <nl> + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; <nl> + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; <nl> + case NORTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; <nl> + case SOUTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; <nl> + case WEST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; <nl> + case EAST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> new file mode 100644 <nl> index 0000000 . . c2352ff <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + { <nl> + " variants " : { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> new file mode 100644 <nl> index 0000000 . . 43a272a <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> @ @ - 0 , 0 + 1 , 3 @ @ <nl> + { <nl> + " parent " : " builtin / entity " <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootEntry . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootEntry . java . patch 
 new file mode 100644 
 index 0000000 . . 31c3c53 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootEntry . java . patch 
 @ @ - 0 , 0 + 1 , 59 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootEntry . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootEntry . java 
 + @ @ - 18 , 15 + 18 , 17 @ @ 
 + 
 + public abstract class LootEntry 
 + { 
 + + protected final String entryName ; 
 + protected final int field _ 186364 _ c ; 
 + protected final int field _ 186365 _ d ; 
 + protected final LootCondition [ ] field _ 186366 _ e ; 
 + 
 + - protected LootEntry ( int p _ i46642 _ 1 _ , int p _ i46642 _ 2 _ , LootCondition [ ] p _ i46642 _ 3 _ ) 
 + + protected LootEntry ( int p _ i46642 _ 1 _ , int p _ i46642 _ 2 _ , LootCondition [ ] p _ i46642 _ 3 _ , String entryName ) 
 + { 
 + this . field _ 186364 _ c = p _ i46642 _ 1 _ ; 
 + this . field _ 186365 _ d = p _ i46642 _ 2 _ ; 
 + this . field _ 186366 _ e = p _ i46642 _ 3 _ ; 
 + + this . entryName = entryName ; 
 + } 
 + 
 + public int func _ 186361 _ a ( float p _ 186361 _ 1 _ ) 
 + @ @ - 34 , 6 + 36 , 8 @ @ 
 + return Math . max ( MathHelper . func _ 76141 _ d ( ( float ) this . field _ 186364 _ c + ( float ) this . field _ 186365 _ d * p _ 186361 _ 1 _ ) , 0 ) ; 
 + } 
 + 
 + + public String getEntryName ( ) { return this . entryName ; } 
 + + 
 + public abstract void func _ 186363 _ a ( Collection < ItemStack > p _ 186363 _ 1 _ , Random p _ 186363 _ 2 _ , LootContext p _ 186363 _ 3 _ ) ; 
 + 
 + protected abstract void func _ 186362 _ a ( JsonObject p _ 186362 _ 1 _ , JsonSerializationContext p _ 186362 _ 2 _ ) ; 
 + @ @ - 57 , 6 + 61 , 9 @ @ 
 + alootcondition = new LootCondition [ 0 ] ; 
 + } 
 + 
 + + LootEntry ret = net . minecraftforge . common . ForgeHooks . deserializeJsonLootEntry ( s , jsonobject , i , j , alootcondition ) ; 
 + + if ( ret ! = null ) return ret ; 
 + + 
 + if ( s . equals ( " item " ) ) 
 + { 
 + return LootEntryItem . func _ 186367 _ a ( jsonobject , p _ deserialize _ 3 _ , i , j , alootcondition ) ; 
 + @ @ - 78 , 6 + 85 , 8 @ @ 
 + public JsonElement serialize ( LootEntry p _ serialize _ 1 _ , Type p _ serialize _ 2 _ , JsonSerializationContext p _ serialize _ 3 _ ) 
 + { 
 + JsonObject jsonobject = new JsonObject ( ) ; 
 + + if ( p _ serialize _ 1 _ . entryName ! = null & & ! p _ serialize _ 1 _ . entryName . startsWith ( " custom # " ) ) 
 + + jsonobject . addProperty ( " entryName " , p _ serialize _ 1 _ . entryName ) ; 
 + jsonobject . addProperty ( " weight " , ( Number ) Integer . valueOf ( p _ serialize _ 1 _ . field _ 186364 _ c ) ) ; 
 + jsonobject . addProperty ( " quality " , ( Number ) Integer . valueOf ( p _ serialize _ 1 _ . field _ 186365 _ d ) ) ; 
 + 
 + @ @ - 86 , 6 + 95 , 9 @ @ 
 + jsonobject . add ( " conditions " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186366 _ e ) ) ; 
 + } 
 + 
 + + String type = net . minecraftforge . common . ForgeHooks . getLootEntryType ( p _ serialize _ 1 _ ) ; 
 + + if ( type ! = null ) jsonobject . addProperty ( " type " , type ) ; 
 + + else 
 + if ( p _ serialize _ 1 _ instanceof LootEntryItem ) 
 + { 
 + jsonobject . addProperty ( " type " , " item " ) ; 
 diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java . patch 
 new file mode 100644 
 index 0000000 . . 058252b 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java . patch 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootEntryEmpty . java 
 + @ @ - 10 , 9 + 10 , 9 @ @ 
 + 
 + public class LootEntryEmpty extends LootEntry 
 + { 
 + - public LootEntryEmpty ( int p _ i46645 _ 1 _ , int p _ i46645 _ 2 _ , LootCondition [ ] p _ i46645 _ 3 _ ) 
 + + public LootEntryEmpty ( int p _ i46645 _ 1 _ , int p _ i46645 _ 2 _ , LootCondition [ ] p _ i46645 _ 3 _ , String entryName ) 
 + { 
 + - super ( p _ i46645 _ 1 _ , p _ i46645 _ 2 _ , p _ i46645 _ 3 _ ) ; 
 + + super ( p _ i46645 _ 1 _ , p _ i46645 _ 2 _ , p _ i46645 _ 3 _ , entryName ) ; 
 + } 
 + 
 + public void func _ 186363 _ a ( Collection < ItemStack > p _ 186363 _ 1 _ , Random p _ 186363 _ 2 _ , LootContext p _ 186363 _ 3 _ ) 
 + @ @ - 25 , 6 + 25 , 6 @ @ 
 + 
 + public static LootEntryEmpty func _ 186372 _ a ( JsonObject p _ 186372 _ 0 _ , JsonDeserializationContext p _ 186372 _ 1 _ , int p _ 186372 _ 2 _ , int p _ 186372 _ 3 _ , LootCondition [ ] p _ 186372 _ 4 _ ) 
 + { 
 + - return new LootEntryEmpty ( p _ 186372 _ 2 _ , p _ 186372 _ 3 _ , p _ 186372 _ 4 _ ) ; 
 + + return new LootEntryEmpty ( p _ 186372 _ 2 _ , p _ 186372 _ 3 _ , p _ 186372 _ 4 _ , net . minecraftforge . common . ForgeHooks . readLootEntryName ( p _ 186372 _ 0 _ , " empty " ) ) ; 
 + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java . patch 
 new file mode 100644 
 index 0000000 . . ea63362 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java . patch 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootEntryItem . java 
 + @ @ - 18 , 9 + 18 , 9 @ @ 
 + protected final Item field _ 186368 _ a ; 
 + protected final LootFunction [ ] field _ 186369 _ b ; 
 + 
 + - public LootEntryItem ( Item p _ i46644 _ 1 _ , int p _ i46644 _ 2 _ , int p _ i46644 _ 3 _ , LootFunction [ ] p _ i46644 _ 4 _ , LootCondition [ ] p _ i46644 _ 5 _ ) 
 + + public LootEntryItem ( Item p _ i46644 _ 1 _ , int p _ i46644 _ 2 _ , int p _ i46644 _ 3 _ , LootFunction [ ] p _ i46644 _ 4 _ , LootCondition [ ] p _ i46644 _ 5 _ , String entryName ) 
 + { 
 + - super ( p _ i46644 _ 2 _ , p _ i46644 _ 3 _ , p _ i46644 _ 5 _ ) ; 
 + + super ( p _ i46644 _ 2 _ , p _ i46644 _ 3 _ , p _ i46644 _ 5 _ , entryName ) ; 
 + this . field _ 186368 _ a = p _ i46644 _ 1 _ ; 
 + this . field _ 186369 _ b = p _ i46644 _ 4 _ ; 
 + } 
 + @ @ - 42 , 7 + 42 , 7 @ @ 
 + 
 + if ( itemstack . field _ 77994 _ a > 0 ) 
 + { 
 + - if ( itemstack . field _ 77994 _ a < this . field _ 186368 _ a . func _ 77639 _ j ( ) ) 
 + + if ( itemstack . field _ 77994 _ a < this . field _ 186368 _ a . getItemStackLimit ( itemstack ) ) 
 + { 
 + p _ 186363 _ 1 _ . add ( itemstack ) ; 
 + } 
 + @ @ - 82 , 6 + 82 , 7 @ @ 
 + 
 + public static LootEntryItem func _ 186367 _ a ( JsonObject p _ 186367 _ 0 _ , JsonDeserializationContext p _ 186367 _ 1 _ , int p _ 186367 _ 2 _ , int p _ 186367 _ 3 _ , LootCondition [ ] p _ 186367 _ 4 _ ) 
 + { 
 + + String name = net . minecraftforge . common . ForgeHooks . readLootEntryName ( p _ 186367 _ 0 _ , " item " ) ; 
 + Item item = JsonUtils . func _ 188180 _ i ( p _ 186367 _ 0 _ , " name " ) ; 
 + LootFunction [ ] alootfunction ; 
 + 
 + @ @ - 94 , 6 + 95 , 6 @ @ 
 + alootfunction = new LootFunction [ 0 ] ; 
 + } 
 + 
 + - return new LootEntryItem ( item , p _ 186367 _ 2 _ , p _ 186367 _ 3 _ , alootfunction , p _ 186367 _ 4 _ ) ; 
 + + return new LootEntryItem ( item , p _ 186367 _ 2 _ , p _ 186367 _ 3 _ , alootfunction , p _ 186367 _ 4 _ , name ) ; 
 + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java . patch 
 new file mode 100644 
 index 0000000 . . fa2158b 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java . patch 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootEntryTable . java 
 + @ @ - 14 , 9 + 14 , 9 @ @ 
 + { 
 + protected final ResourceLocation field _ 186371 _ a ; 
 + 
 + - public LootEntryTable ( ResourceLocation p _ i46639 _ 1 _ , int p _ i46639 _ 2 _ , int p _ i46639 _ 3 _ , LootCondition [ ] p _ i46639 _ 4 _ ) 
 + + public LootEntryTable ( ResourceLocation p _ i46639 _ 1 _ , int p _ i46639 _ 2 _ , int p _ i46639 _ 3 _ , LootCondition [ ] p _ i46639 _ 4 _ , String entryName ) 
 + { 
 + - super ( p _ i46639 _ 2 _ , p _ i46639 _ 3 _ , p _ i46639 _ 4 _ ) ; 
 + + super ( p _ i46639 _ 2 _ , p _ i46639 _ 3 _ , p _ i46639 _ 4 _ , entryName ) ; 
 + this . field _ 186371 _ a = p _ i46639 _ 1 _ ; 
 + } 
 + 
 + @ @ - 34 , 7 + 34 , 8 @ @ 
 + 
 + public static LootEntryTable func _ 186370 _ a ( JsonObject p _ 186370 _ 0 _ , JsonDeserializationContext p _ 186370 _ 1 _ , int p _ 186370 _ 2 _ , int p _ 186370 _ 3 _ , LootCondition [ ] p _ 186370 _ 4 _ ) 
 + { 
 + + String name = net . minecraftforge . common . ForgeHooks . readLootEntryName ( p _ 186370 _ 0 _ , " loot _ table " ) ; 
 + ResourceLocation resourcelocation = new ResourceLocation ( JsonUtils . func _ 151200 _ h ( p _ 186370 _ 0 _ , " name " ) ) ; 
 + - return new LootEntryTable ( resourcelocation , p _ 186370 _ 2 _ , p _ 186370 _ 3 _ , p _ 186370 _ 4 _ ) ; 
 + + return new LootEntryTable ( resourcelocation , p _ 186370 _ 2 _ , p _ 186370 _ 3 _ , p _ 186370 _ 4 _ , name ) ; 
 + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootPool . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootPool . java . patch 
 new file mode 100644 
 index 0000000 . . e6fd85c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootPool . java . patch 
 @ @ - 0 , 0 + 1 , 121 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootPool . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootPool . java 
 + @ @ - 21 , 17 + 21 , 19 @ @ 
 + 
 + public class LootPool 
 + { 
 + - private final LootEntry [ ] field _ 186453 _ a ; 
 + - private final LootCondition [ ] field _ 186454 _ b ; 
 + + private final List < LootEntry > field _ 186453 _ a ; 
 + + private final List < LootCondition > field _ 186454 _ b ; 
 + private RandomValueRange field _ 186455 _ c ; 
 + private RandomValueRange field _ 186456 _ d ; 
 + + private final String name ; 
 + 
 + - public LootPool ( LootEntry [ ] p _ i46643 _ 1 _ , LootCondition [ ] p _ i46643 _ 2 _ , RandomValueRange p _ i46643 _ 3 _ , RandomValueRange p _ i46643 _ 4 _ ) 
 + + private LootPool ( LootEntry [ ] p _ i46643 _ 1 _ , LootCondition [ ] p _ i46643 _ 2 _ , RandomValueRange p _ i46643 _ 3 _ , RandomValueRange p _ i46643 _ 4 _ , String name ) 
 + { 
 + - this . field _ 186453 _ a = p _ i46643 _ 1 _ ; 
 + - this . field _ 186454 _ b = p _ i46643 _ 2 _ ; 
 + + this . field _ 186453 _ a = Lists . newArrayList ( p _ i46643 _ 1 _ ) ; 
 + + this . field _ 186454 _ b = Lists . newArrayList ( p _ i46643 _ 2 _ ) ; 
 + this . field _ 186455 _ c = p _ i46643 _ 3 _ ; 
 + this . field _ 186456 _ d = p _ i46643 _ 4 _ ; 
 + + this . name = name ; 
 + } 
 + 
 + protected void func _ 186452 _ a ( Collection < ItemStack > p _ 186452 _ 1 _ , Random p _ 186452 _ 2 _ , LootContext p _ 186452 _ 3 _ ) 
 + @ @ - 72 , 7 + 74 , 7 @ @ 
 + 
 + public void func _ 186449 _ b ( Collection < ItemStack > p _ 186449 _ 1 _ , Random p _ 186449 _ 2 _ , LootContext p _ 186449 _ 3 _ ) 
 + { 
 + - if ( LootConditionManager . func _ 186638 _ a ( this . field _ 186454 _ b , p _ 186449 _ 2 _ , p _ 186449 _ 3 _ ) ) 
 + + if ( LootConditionManager . testAllConditions ( this . field _ 186454 _ b , p _ 186449 _ 2 _ , p _ 186449 _ 3 _ ) ) 
 + { 
 + int i = this . field _ 186455 _ c . func _ 186511 _ a ( p _ 186449 _ 2 _ ) + MathHelper . func _ 76141 _ d ( this . field _ 186456 _ d . func _ 186507 _ b ( p _ 186449 _ 2 _ ) * p _ 186449 _ 3 _ . func _ 186491 _ f ( ) ) ; 
 + 
 + @ @ - 83 , 21 + 85 , 74 @ @ 
 + } 
 + } 
 + 
 + + / / = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + + private boolean isFinalized = false ; 
 + + public void finalize ( ) 
 + + { 
 + + this . isFinalized = true ; 
 + + } 
 + + public boolean isFinalized ( ) { return this . isFinalized ; } 
 + + private void checkFinalized ( ) 
 + + { 
 + + if ( this . isFinalized ( ) ) 
 + + throw new RuntimeException ( " Attempted to modify LootPool after being finalized ! " ) ; 
 + + } 
 + + 
 + + public String getName ( ) { return this . name ; } 
 + + public RandomValueRange getRolls ( ) { return this . field _ 186455 _ c ; } 
 + + public RandomValueRange getBonusRolls ( ) { return this . field _ 186456 _ d ; } 
 + + public void setRolls ( RandomValueRange v ) { checkFinalized ( ) ; this . field _ 186455 _ c = v ; } 
 + + public void setBonusRolls ( RandomValueRange v ) { checkFinalized ( ) ; this . field _ 186456 _ d = v ; } 
 + + 
 + + public LootEntry getEntry ( String name ) 
 + + { 
 + + for ( LootEntry entry : this . field _ 186453 _ a ) 
 + + if ( name . equals ( entry . getEntryName ( ) ) ) 
 + + return entry ; 
 + + return null ; 
 + + } 
 + + public LootEntry removeEntry ( String name ) 
 + + { 
 + + checkFinalized ( ) ; 
 + + for ( LootEntry entry : this . field _ 186453 _ a ) 
 + + { 
 + + if ( name . equals ( entry . getEntryName ( ) ) ) 
 + + { 
 + + this . field _ 186453 _ a . remove ( entry ) ; 
 + + return entry ; 
 + + } 
 + + } 
 + + return null ; 
 + + } 
 + + public void addEntry ( LootEntry entry ) 
 + + { 
 + + checkFinalized ( ) ; 
 + + for ( LootEntry e : this . field _ 186453 _ a ) 
 + + if ( e = = entry | | e . getEntryName ( ) . equals ( entry . getEntryName ( ) ) ) 
 + + throw new RuntimeException ( " Attempted to add a duplicate entry to pool : " + e . getEntryName ( ) ) ; 
 + + this . field _ 186453 _ a . add ( entry ) ; 
 + + } 
 + + / / TODO : Allow modifications of conditions ? If so need a way to uniquely identify them . 
 + + / / = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + + 
 + public static class Serializer implements JsonDeserializer < LootPool > , JsonSerializer < LootPool > 
 + { 
 + public LootPool deserialize ( JsonElement p _ deserialize _ 1 _ , Type p _ deserialize _ 2 _ , JsonDeserializationContext p _ deserialize _ 3 _ ) throws JsonParseException 
 + { 
 + JsonObject jsonobject = JsonUtils . func _ 151210 _ l ( p _ deserialize _ 1 _ , " loot pool " ) ; 
 + + String name = net . minecraftforge . common . ForgeHooks . readPoolName ( jsonobject ) ; 
 + LootEntry [ ] alootentry = ( LootEntry [ ] ) JsonUtils . func _ 188174 _ a ( jsonobject , " entries " , p _ deserialize _ 3 _ , LootEntry [ ] . class ) ; 
 + LootCondition [ ] alootcondition = ( LootCondition [ ] ) JsonUtils . func _ 188177 _ a ( jsonobject , " conditions " , new LootCondition [ 0 ] , p _ deserialize _ 3 _ , LootCondition [ ] . class ) ; 
 + RandomValueRange randomvaluerange = ( RandomValueRange ) JsonUtils . func _ 188174 _ a ( jsonobject , " rolls " , p _ deserialize _ 3 _ , RandomValueRange . class ) ; 
 + RandomValueRange randomvaluerange1 = ( RandomValueRange ) JsonUtils . func _ 188177 _ a ( jsonobject , " bonus _ rolls " , new RandomValueRange ( 0 . 0F , 0 . 0F ) , p _ deserialize _ 3 _ , RandomValueRange . class ) ; 
 + - return new LootPool ( alootentry , alootcondition , randomvaluerange , randomvaluerange1 ) ; 
 + + return new LootPool ( alootentry , alootcondition , randomvaluerange , randomvaluerange1 , name ) ; 
 + } 
 + 
 + public JsonElement serialize ( LootPool p _ serialize _ 1 _ , Type p _ serialize _ 2 _ , JsonSerializationContext p _ serialize _ 3 _ ) 
 + { 
 + JsonObject jsonobject = new JsonObject ( ) ; 
 + + if ( p _ serialize _ 1 _ . name ! = null & & ! p _ serialize _ 1 _ . name . startsWith ( " custom # " ) ) 
 + + jsonobject . add ( " name " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . name ) ) ; 
 + jsonobject . add ( " entries " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186453 _ a ) ) ; 
 + jsonobject . add ( " rolls " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186455 _ c ) ) ; 
 + 
 + @ @ - 106 , 7 + 161 , 7 @ @ 
 + jsonobject . add ( " bonus _ rolls " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186456 _ d ) ) ; 
 + } 
 + 
 + - if ( ! ArrayUtils . isEmpty ( ( Object [ ] ) p _ serialize _ 1 _ . field _ 186454 _ b ) ) 
 + + if ( ! p _ serialize _ 1 _ . field _ 186454 _ b . isEmpty ( ) ) 
 + { 
 + jsonobject . add ( " conditions " , p _ serialize _ 3 _ . serialize ( p _ serialize _ 1 _ . field _ 186454 _ b ) ) ; 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootTable . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootTable . java . patch 
 new file mode 100644 
 index 0000000 . . 915e804 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootTable . java . patch 
 @ @ - 0 , 0 + 1 , 75 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootTable . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootTable . java 
 + @ @ - 24 , 11 + 24 , 11 @ @ 
 + { 
 + private static final Logger field _ 186465 _ b = LogManager . getLogger ( ) ; 
 + public static final LootTable field _ 186464 _ a = new LootTable ( new LootPool [ 0 ] ) ; 
 + - private final LootPool [ ] field _ 186466 _ c ; 
 + + private final List < LootPool > field _ 186466 _ c ; 
 + 
 + public LootTable ( LootPool [ ] p _ i46641 _ 1 _ ) 
 + { 
 + - this . field _ 186466 _ c = p _ i46641 _ 1 _ ; 
 + + this . field _ 186466 _ c = Lists . newArrayList ( p _ i46641 _ 1 _ ) ; 
 + } 
 + 
 + public List < ItemStack > func _ 186462 _ a ( Random p _ 186462 _ 1 _ , LootContext p _ 186462 _ 2 _ ) 
 + @ @ - 146 , 6 + 146 , 58 @ @ 
 + return list ; 
 + } 
 + 
 + + / / = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + + private boolean isFinalized = false ; 
 + + public void finalize ( ) 
 + + { 
 + + this . isFinalized = true ; 
 + + for ( LootPool pool : this . field _ 186466 _ c ) 
 + + pool . finalize ( ) ; 
 + + } 
 + + public boolean isFinalized ( ) { return this . isFinalized ; } 
 + + private void checkFinalized ( ) 
 + + { 
 + + if ( this . isFinalized ( ) ) 
 + + throw new RuntimeException ( " Attempted to modify LootTable after being finalized ! " ) ; 
 + + } 
 + + 
 + + public LootPool getPool ( String name ) 
 + + { 
 + + for ( LootPool pool : this . field _ 186466 _ c ) 
 + + { 
 + + if ( name . equals ( pool . getName ( ) ) ) 
 + + return pool ; 
 + + } 
 + + return null ; 
 + + } 
 + + 
 + + public LootPool removePool ( String name ) 
 + + { 
 + + checkFinalized ( ) ; 
 + + for ( LootPool pool : this . field _ 186466 _ c ) 
 + + { 
 + + if ( name . equals ( pool . getName ( ) ) ) 
 + + { 
 + + this . field _ 186466 _ c . remove ( pool ) ; 
 + + return pool ; 
 + + } 
 + + } 
 + + 
 + + return null ; 
 + + } 
 + + 
 + + public void addPool ( LootPool pool ) 
 + + { 
 + + checkFinalized ( ) ; 
 + + for ( LootPool p : this . field _ 186466 _ c ) 
 + + { 
 + + if ( p = = pool | | p . getName ( ) . equals ( pool . getName ( ) ) ) 
 + + throw new RuntimeException ( " Attempted to add a duplicate pool to loot table : " + pool . getName ( ) ) ; 
 + + } 
 + + this . field _ 186466 _ c . add ( pool ) ; 
 + + } 
 + + / / = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + + 
 + public static class Serializer implements JsonDeserializer < LootTable > , JsonSerializer < LootTable > 
 + { 
 + public LootTable deserialize ( JsonElement p _ deserialize _ 1 _ , Type p _ deserialize _ 2 _ , JsonDeserializationContext p _ deserialize _ 3 _ ) throws JsonParseException 
 diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / LootTableManager . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / LootTableManager . java . patch 
 new file mode 100644 
 index 0000000 . . 3c75218 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / storage / loot / LootTableManager . java . patch 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / LootTableManager . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / LootTableManager . java 
 + @ @ - 102 , 7 + 102 , 7 @ @ 
 + 
 + try 
 + { 
 + - return ( LootTable ) LootTableManager . field _ 186526 _ b . fromJson ( s , LootTable . class ) ; 
 + + return net . minecraftforge . common . ForgeHooks . loadLootTable ( LootTableManager . field _ 186526 _ b , p _ 186517 _ 1 _ , s , true ) ; 
 + } 
 + catch ( JsonParseException jsonparseexception ) 
 + { 
 + @ @ - 142 , 7 + 142 , 7 @ @ 
 + 
 + try 
 + { 
 + - return ( LootTable ) LootTableManager . field _ 186526 _ b . fromJson ( s , LootTable . class ) ; 
 + + return net . minecraftforge . common . ForgeHooks . loadLootTable ( LootTableManager . field _ 186526 _ b , p _ 186518 _ 1 _ , s , false ) ; 
 + } 
 + catch ( JsonParseException jsonparseexception ) 
 + { 
 diff - - git a / patches / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java . patch b / patches / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java . patch 
 new file mode 100644 
 index 0000000 . . 511a8e4 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java . patch 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / storage / loot / conditions / LootConditionManager . java 
 + @ @ - 41 , 6 + 41 , 16 @ @ 
 + } 
 + } 
 + 
 + + 
 + + public static boolean testAllConditions ( Iterable < LootCondition > conditions , Random rand , LootContext context ) 
 + + { 
 + + if ( conditions = = null ) return true ; 
 + + for ( LootCondition cond : conditions ) 
 + + if ( ! cond . func _ 186618 _ a ( rand , context ) ) 
 + + return false ; 
 + + return true ; 
 + + } 
 + + 
 + public static boolean func _ 186638 _ a ( LootCondition [ ] p _ 186638 _ 0 _ , Random p _ 186638 _ 1 _ , LootContext p _ 186638 _ 2 _ ) 
 + { 
 + if ( p _ 186638 _ 0 _ = = null ) 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 09497d8 . . adcdd6c 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 3 , 12 + 3 , 21 @ @ package net . minecraftforge . common ; 
 import java . net . URI ; 
 import java . net . URISyntaxException ; 
 import java . util . ArrayList ; 
 + import java . util . Deque ; 
 + import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Random ; 
 import java . util . Set ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 + import com . google . common . base . Throwables ; 
 + import com . google . common . collect . Queues ; 
 + import com . google . common . collect . Sets ; 
 + import com . google . gson . Gson ; 
 + import com . google . gson . JsonObject ; 
 + import com . google . gson . JsonParseException ; 
 + 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockLiquid ; 
 import net . minecraft . block . material . Material ; 
 @ @ - 47 , 6 + 56 , 8 @ @ import net . minecraft . util . DamageSource ; 
 import net . minecraft . util . EnumActionResult ; 
 import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . EnumHand ; 
 + import net . minecraft . util . JsonUtils ; 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . WeightedRandom ; 
 import net . minecraft . util . math . AxisAlignedBB ; 
 import net . minecraft . util . math . BlockPos ; 
 @ @ - 61 , 6 + 72 , 10 @ @ import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 import net . minecraft . world . WorldSettings ; 
 import net . minecraft . world . WorldSettings . GameType ; 
 + import net . minecraft . world . storage . loot . LootEntry ; 
 + import net . minecraft . world . storage . loot . LootTable ; 
 + import net . minecraft . world . storage . loot . LootTableManager ; 
 + import net . minecraft . world . storage . loot . conditions . LootCondition ; 
 import net . minecraftforge . common . util . BlockSnapshot ; 
 import net . minecraftforge . event . AnvilUpdateEvent ; 
 import net . minecraftforge . event . ForgeEventFactory ; 
 @ @ - 970 , 4 + 985 , 132 @ @ public class ForgeHooks 
 { 
 MinecraftForge . EVENT _ BUS . post ( new PlayerInteractEvent . RightClickEmpty ( player , hand ) ) ; 
 } 
 + 
 + private static ThreadLocal < Deque < LootTableContext > > lootContext = new ThreadLocal < Deque < LootTableContext > > ( ) ; 
 + private static LootTableContext getLootTableContext ( ) 
 + { 
 + LootTableContext ctx = lootContext . get ( ) . peek ( ) ; 
 + 
 + if ( ctx = = null ) 
 + throw new JsonParseException ( " Invalid call stack , could to grab json context ! " ) ; / / Show I throw this ? Do we care about custom deserializers outside the manager ? 
 + 
 + return ctx ; 
 + } 
 + public static LootTable loadLootTable ( Gson gson , ResourceLocation name , String data , boolean custom ) 
 + { 
 + Deque < LootTableContext > que = lootContext . get ( ) ; 
 + if ( que = = null ) 
 + { 
 + que = Queues . newArrayDeque ( ) ; 
 + lootContext . set ( que ) ; 
 + } 
 + 
 + LootTable ret = null ; 
 + try 
 + { 
 + que . push ( new LootTableContext ( name , custom ) ) ; 
 + ret = gson . fromJson ( data , LootTable . class ) ; 
 + que . pop ( ) ; 
 + } 
 + catch ( JsonParseException e ) 
 + { 
 + que . pop ( ) ; 
 + throw e ; 
 + } 
 + 
 + if ( ! custom ) 
 + ret = ForgeEventFactory . loadLootTable ( name , ret ) ; 
 + 
 + return ret ; 
 + } 
 + 
 + private static class LootTableContext 
 + { 
 + public final ResourceLocation name ; 
 + private final boolean vanilla ; 
 + public final boolean custom ; 
 + public int poolCount = 0 ; 
 + public int entryCount = 0 ; 
 + private HashSet < String > entryNames = Sets . newHashSet ( ) ; 
 + 
 + private LootTableContext ( ResourceLocation name , boolean custom ) 
 + { 
 + this . name = name ; 
 + this . custom = custom ; 
 + this . vanilla = " minecraft " . equals ( this . name . getResourceDomain ( ) ) ; 
 + } 
 + 
 + private void resetPoolCtx ( ) 
 + { 
 + this . entryCount = 0 ; 
 + this . entryNames . clear ( ) ; 
 + } 
 + 
 + public String validateEntryName ( String name ) 
 + { 
 + if ( ! this . entryNames . contains ( name ) ) 
 + { 
 + this . entryNames . add ( name ) ; 
 + return name ; 
 + } 
 + 
 + if ( ! this . vanilla ) 
 + throw new JsonParseException ( " Loot Table \ " " + this . name . toString ( ) + " \ " Duplicate entry name \ " " + name + " \ " for pool # " + ( this . poolCount - 1 ) + " entry # " + ( this . entryCount - 1 ) ) ; 
 + 
 + int x = 0 ; 
 + while ( this . entryNames . contains ( name + " # " + x ) ) 
 + x + + ; 
 + 
 + name = name + " # " + x ; 
 + this . entryNames . add ( name ) ; 
 + 
 + return name ; 
 + } 
 + } 
 + 
 + public static String readPoolName ( JsonObject json ) 
 + { 
 + LootTableContext ctx = ForgeHooks . getLootTableContext ( ) ; 
 + ctx . resetPoolCtx ( ) ; 
 + 
 + if ( json . has ( " name " ) ) 
 + return JsonUtils . getString ( json , " name " ) ; 
 + 
 + if ( ctx . custom ) 
 + return " custom # " + json . hashCode ( ) ; / / We don ' t care about custom ones modders shouldn ' t be editing them ! 
 + 
 + ctx . poolCount + + ; 
 + 
 + if ( ! ctx . vanilla ) 
 + throw new JsonParseException ( " Loot Table \ " " + ctx . name . toString ( ) + " \ " Missing ` name ` entry for pool # " + ( ctx . poolCount - 1 ) ) ; 
 + 
 + return ctx . poolCount = = 1 ? " main " : " pool " + ( ctx . poolCount - 1 ) ; 
 + } 
 + 
 + public static String readLootEntryName ( JsonObject json , String type ) 
 + { 
 + LootTableContext ctx = ForgeHooks . getLootTableContext ( ) ; 
 + ctx . entryCount + + ; 
 + 
 + if ( json . has ( " entryName " ) ) 
 + return ctx . validateEntryName ( JsonUtils . getString ( json , " EntryName " ) ) ; 
 + 
 + if ( ctx . custom ) 
 + return " custom # " + json . hashCode ( ) ; / / We don ' t care about custom ones modders shouldn ' t be editing them ! 
 + 
 + String name = null ; 
 + if ( " item " . equals ( type ) ) 
 + name = JsonUtils . getString ( json , " name " ) ; 
 + else if ( " loot _ table " . equals ( type ) ) 
 + name = JsonUtils . getString ( json , " name " ) ; 
 + else if ( " empty " . equals ( type ) ) 
 + name = " empty " ; 
 + 
 + return ctx . validateEntryName ( name ) ; 
 + } 
 + 
 + 
 + / / TODO : Some registry to support custom LootEntry types ? 
 + public static LootEntry deserializeJsonLootEntry ( String type , JsonObject json , int weight , int quality , LootCondition [ ] conditions ) { return null ; } 
 + public static String getLootEntryType ( LootEntry entry ) { return null ; } / / Companion to above function 
 } 
 diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 index d590a89 . . 8afe6d3 100644 
 - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import net . minecraft . util . DamageSource ; 
 import net . minecraft . util . EnumActionResult ; 
 import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . EnumHand ; 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . SoundCategory ; 
 import net . minecraft . util . SoundEvent ; 
 import net . minecraft . util . math . BlockPos ; 
 @ @ - 39 , 6 + 40 , 7 @ @ import net . minecraft . world . chunk . ChunkPrimer ; 
 import net . minecraft . world . chunk . IChunkGenerator ; 
 import net . minecraft . world . storage . IPlayerFileData ; 
 import net . minecraft . world . storage . SaveHandler ; 
 + import net . minecraft . world . storage . loot . LootTable ; 
 import net . minecraftforge . client . event . ClientChatReceivedEvent ; 
 import net . minecraftforge . client . event . RenderBlockOverlayEvent ; 
 import net . minecraftforge . client . event . RenderBlockOverlayEvent . OverlayType ; 
 @ @ - 541 , 4 + 543 , 12 @ @ public class ForgeEventFactory 
 MinecraftForge . EVENT _ BUS . post ( pre ? new PopulateChunkEvent . Pre ( gen , world , rand , x , z , hasVillageGenerated ) : new PopulateChunkEvent . Post ( gen , world , rand , x , z , hasVillageGenerated ) ) ; 
 } 
 
 + public static LootTable loadLootTable ( ResourceLocation name , LootTable table ) 
 + { 
 + LootTableLoadEvent event = new LootTableLoadEvent ( name , table ) ; 
 + if ( MinecraftForge . EVENT _ BUS . post ( event ) ) 
 + return LootTable . EMPTY _ LOOT _ TABLE ; 
 + return event . getTable ( ) ; 
 + } 
 + 
 } 
 diff - - git a / src / main / java / net / minecraftforge / event / LootTableLoadEvent . java b / src / main / java / net / minecraftforge / event / LootTableLoadEvent . java 
 new file mode 100644 
 index 0000000 . . ab8870a 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / LootTableLoadEvent . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + package net . minecraftforge . event ; 
 + 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . world . storage . loot . LootTable ; 
 + import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + 
 + / * * 
 + * Event fired when a LootTable json is loaded from json . 
 + * This event is fired whenever resources are loaded , or when the server starts . 
 + * This event will NOT be fired for LootTables loaded from the world folder , these are 
 + * considered configurations files and should not be modified by mods . 
 + * 
 + * Canceling the event will make it load a empty loot table . 
 + * 
 + * / 
 + @ Cancelable 
 + public class LootTableLoadEvent extends Event 
 + { 
 + private final ResourceLocation name ; 
 + private LootTable table ; 
 + 
 + public LootTableLoadEvent ( ResourceLocation name , LootTable table ) 
 + { 
 + this . name = name ; 
 + this . table = table ; 
 + } 
 + 
 + public ResourceLocation getName ( ) 
 + { 
 + return this . name ; 
 + } 
 + 
 + public LootTable getTable ( ) 
 + { 
 + return this . table ; 
 + } 
 + 
 + public void setTable ( LootTable table ) 
 + { 
 + this . table = table ; 
 + } 
 + } 
 diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc 
 index 6902fce . . ddeb959 100644 
 - - - a / src / main / resources / forge . exc 
 + + + b / src / main / resources / forge . exc 
 @ @ - 47 , 3 + 47 , 9 @ @ net / minecraft / item / ItemStack . < init > ( Lnet / minecraft / item / Item ; IILnet / minecraft / nb 
 net / minecraft / block / BlockRedstoneWire . canConnectTo ( Lnet / minecraft / block / state / IBlockState ; Lnet / minecraft / util / EnumFacing ; Lnet / minecraft / world / IBlockAccess ; Lnet / minecraft / util / math / BlockPos ; ) Z = p _ 176343 _ 0 _ , p _ 176343 _ 1 _ , world , pos 
 net / minecraft / client / renderer / block / model / BakedQuad . < init > ( [ IILnet / minecraft / util / EnumFacing ; Lnet / minecraft / client / renderer / texture / TextureAtlasSprite ; ZLnet / minecraft / client / renderer / vertex / VertexFormat ; ) V = | p _ i46574 _ 1 _ , p _ i46574 _ 2 _ , p _ i46574 _ 3 _ , p _ i46574 _ 4 _ , applyDiffuseLighting , format 
 net / minecraft / client / renderer / texture / TextureMap . < init > ( Ljava / lang / String ; Lnet / minecraft / client / renderer / texture / IIconCreator ; Z ) V = | p _ i46100 _ 1 _ , p _ i46100 _ 2 _ , skipFirst 
 + 
 + net / minecraft / world / storage / loot / LootPool . < init > ( [ Lnet / minecraft / world / storage / loot / LootEntry ; [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Lnet / minecraft / world / storage / loot / RandomValueRange ; Lnet / minecraft / world / storage / loot / RandomValueRange ; Ljava / lang / String ; ) V = | p _ i46643 _ 1 _ , p _ i46643 _ 2 _ , p _ i46643 _ 3 _ , p _ i46643 _ 4 _ 
 + net / minecraft / world / storage / loot / LootEntry . < init > ( II [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Ljava / lang / String ; ) V = | p _ i46642 _ 1 _ , p _ i46642 _ 2 _ , p _ i46642 _ 3 _ , entryName 
 + net / minecraft / world / storage / loot / LootEntryItem . < init > ( Lnet / minecraft / item / Item ; II [ Lnet / minecraft / world / storage / loot / functions / LootFunction ; [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Ljava / lang / String ; ) V = | p _ i46644 _ 1 _ , p _ i46644 _ 2 _ , p _ i46644 _ 3 _ , p _ i46644 _ 4 _ , p _ i46644 _ 5 _ , entryName 
 + net / minecraft / world / storage / loot / LootEntryTable . < init > ( Lnet / minecraft / util / ResourceLocation ; II [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Ljava / lang / String ; ) V = | p _ i46639 _ 1 _ , p _ i46639 _ 2 _ , p _ i46639 _ 3 _ , p _ i46639 _ 4 _ , entryName 
 + net / minecraft / world / storage / loot / LootEntryEmpty . < init > ( II [ Lnet / minecraft / world / storage / loot / conditions / LootCondition ; Ljava / lang / String ; ) V = | p _ i46645 _ 1 _ , p _ i46645 _ 2 _ , p _ i46645 _ 3 _ , entryName 
 diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg 
 index 316062b . . 64c6552 100644 
 - - - a / src / main / resources / forge _ at . cfg 
 + + + b / src / main / resources / forge _ at . cfg 
 @ @ - 289 , 3 + 289 , 7 @ @ private - f net . minecraft . server . management . PlayerManager $ PlayerInstance field _ 187 
 # RenderLivingBase 
 public net . minecraft . client . renderer . entity . RenderLivingBase func _ 177094 _ a ( Lnet / minecraft / client / renderer / entity / layers / LayerRenderer ; ) Z # addLayer 
 public net . minecraft . client . renderer . entity . RenderLivingBase func _ 177089 _ b ( Lnet / minecraft / client / renderer / entity / layers / LayerRenderer ; ) Z # removeLayer 
 + 
 + # LootTable Stuff 
 + private - f net . minecraft . world . storage . loot . LootPool field _ 186455 _ c # rolls 
 + private - f net . minecraft . world . storage . loot . LootPool field _ 186456 _ d # bonusRolls 
 \ No newline at end of file 
 diff - - git a / src / test / java / net / minecraftforge / debug / LootTablesDebug . java b / src / test / java / net / minecraftforge / debug / LootTablesDebug . java 
 new file mode 100644 
 index 0000000 . . f22247a 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / LootTablesDebug . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . init . Items ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . world . storage . loot . LootEntryItem ; 
 + import net . minecraft . world . storage . loot . LootPool ; 
 + import net . minecraft . world . storage . loot . LootTableList ; 
 + import net . minecraft . world . storage . loot . conditions . LootCondition ; 
 + import net . minecraft . world . storage . loot . functions . LootFunction ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . LootTableLoadEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + @ Mod ( modid = LootTablesDebug . MODID ) 
 + public class LootTablesDebug { 
 + public static final String MODID = " loot _ table _ debug " ; 
 + private static final ResourceLocation CUSTOM _ LOOT = LootTableList . register ( new ResourceLocation ( MODID , " custom _ loot " ) ) ; 
 + 
 + @ Mod . EventHandler 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void lootLoad ( LootTableLoadEvent event ) 
 + { 
 + if ( ! event . getName ( ) . equals ( LootTableList . CHESTS _ SPAWN _ BONUS _ CHEST ) ) 
 + return ; 
 + 
 + / / Remove axes and replace with chestpeice , First vanilla entry is always called " main " 
 + LootPool main = event . getTable ( ) . getPool ( " main " ) ; / / Note : This CAN NPE if another mod removes things 
 + main . removeEntry ( " minecraft : wooden _ axe " ) ; 
 + main . removeEntry ( " minecraft : stone _ axe " ) ; 
 + main . addEntry ( new LootEntryItem ( Items . diamond _ chestplate , 1 , 0 , new LootFunction [ 0 ] , new LootCondition [ 0 ] , MODID + " : diamond _ chestplate " ) ) ; 
 + 
 + / / Get rid of all building mats . Which is pool # 3 , index starts at 0 , but 0 is named " main " 
 + event . getTable ( ) . removePool ( " pool3 " ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch 
 index 523a8df . . a946cbd 100644 
 - - - a / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 161 , 7 + 161 , 7 @ @ 
 } 
 
 protected ItemStack func _ 180643 _ i ( IBlockState p _ 180643 _ 1 _ ) 
 - @ @ - 971 , 6 + 989 , 1011 @ @ 
 + @ @ - 971 , 6 + 989 , 1019 @ @ 
 return Block . EnumOffsetType . NONE ; 
 } 
 
 @ @ - 1145 , 6 + 1145 , 14 @ @ 
 + return type ! = null & & type . equals ( getHarvestTool ( state ) ) ; 
 + } 
 + 
 + + / * * 
 + + * Can return IExtendedBlockState 
 + + * / 
 + + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 + + { 
 + + return func _ 176221 _ a ( state , world , pos ) ; 
 + + } 
 + + 
 + / / For Internal use only to capture droped items inside getDrops 
 + protected static ThreadLocal < Boolean > captureDrops = new ThreadLocal < Boolean > ( ) 
 + { 
 diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 new file mode 100644 
 index 0000000 . . 90b08e7 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / block / state / BlockState . java 
 + + + + . . / src - work / minecraft / net / minecraft / block / state / BlockState . java 
 + @ @ - 47 , 6 + 47 , 16 @ @ 
 + 
 + public BlockState ( Block p _ i45663 _ 1 _ , IProperty . . . p _ i45663 _ 2 _ ) 
 + { 
 + + this ( p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , null ) ; 
 + + } 
 + + 
 + + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) 
 + + { 
 + + return new StateImplementation ( block , properties ) ; 
 + + } 
 + + 
 + + protected BlockState ( Block p _ i45663 _ 1 _ , IProperty [ ] p _ i45663 _ 2 _ , ImmutableMap unlistedProperties ) 
 + + { 
 + this . field _ 177627 _ c = p _ i45663 _ 1 _ ; 
 + Arrays . sort ( p _ i45663 _ 2 _ , new Comparator ( ) 
 + { 
 + @ @ - 70 , 7 + 80 , 7 @ @ 
 + { 
 + List list = ( List ) iterator . next ( ) ; 
 + Map map = MapPopulator . func _ 179400 _ b ( this . field _ 177624 _ d , list ) ; 
 + - BlockState . StateImplementation stateimplementation = new BlockState . StateImplementation ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , null ) ; 
 + + BlockState . StateImplementation stateimplementation = createState ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , unlistedProperties ) ; 
 + linkedhashmap . put ( map , stateimplementation ) ; 
 + arraylist . add ( stateimplementation ) ; 
 + } 
 + @ @ - 231 , 5 + 241 , 10 @ @ 
 + { 
 + this ( p _ i45661 _ 1 _ , p _ i45661 _ 2 _ ) ; 
 + } 
 + + 
 + + public ImmutableTable < IProperty , Comparable , IBlockState > getPropertyValueTable ( ) 
 + + { 
 + + return field _ 177238 _ c ; 
 + + } 
 + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 new file mode 100644 
 index 0000000 . . a24be3d 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + @ @ - 129 , 6 + 129 , 12 @ @ 
 + ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; 
 + } 
 + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) 
 + + { 
 + + IBlockState extendedState = block . getExtendedState ( p _ 175022 _ 1 _ , p _ 175022 _ 2 _ , p _ 175022 _ 3 _ ) ; 
 + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; 
 + + } 
 + + 
 + return ibakedmodel ; 
 + } 
 + 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch 
 new file mode 100644 
 index 0000000 . . dbe123b 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / ItemModelMesher . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / ItemModelMesher . java 
 + @ @ - 52 , 6 + 52 , 11 @ @ 
 + } 
 + } 
 + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartItemModel ) 
 + + { 
 + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartItemModel ) ibakedmodel ) . handleItemState ( p _ 178089 _ 1 _ ) ; 
 + + } 
 + + 
 + if ( ibakedmodel = = null ) 
 + { 
 + ibakedmodel = this . field _ 178090 _ d . func _ 174951 _ a ( ) ; 
 diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch 
 new file mode 100644 
 index 0000000 . . 9b2da14 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / resources / model / ModelManager . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / resources / model / ModelManager . java 
 + @ @ - 28 , 6 + 28 , 7 @ @ 
 + ModelBakery modelbakery = new ModelBakery ( p _ 110549 _ 1 _ , this . field _ 174956 _ b , this . field _ 174957 _ c ) ; 
 + this . field _ 174958 _ a = modelbakery . func _ 177570 _ a ( ) ; 
 + this . field _ 174955 _ d = ( IBakedModel ) this . field _ 174958 _ a . func _ 82594 _ a ( ModelBakery . field _ 177604 _ a ) ; 
 + + net . minecraftforge . client . ForgeHooksClient . onModelBake ( this , this . field _ 174958 _ a , modelbakery ) ; 
 + this . field _ 174957 _ c . func _ 178124 _ c ( ) ; 
 + } 
 + 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 9b9b75e . . d0126b6 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 2 , 41 + 2 , 31 @ @ package net . minecraftforge . client ; 
 
 import static net . minecraftforge . common . ForgeVersion . Status . BETA ; 
 import static net . minecraftforge . common . ForgeVersion . Status . BETA _ OUTDATED ; 
 - import java . util . Random ; 
 - import javax . imageio . ImageIO ; 
 import net . minecraft . block . Block ; 
 - import net . minecraft . block . BlockBed ; 
 - import net . minecraft . block . BlockLiquid ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . audio . ISound ; 
 import net . minecraft . client . audio . SoundEventAccessorComposite ; 
 import net . minecraft . client . audio . SoundManager ; 
 - import net . minecraft . client . entity . EntityPlayerSP ; 
 import net . minecraft . client . gui . FontRenderer ; 
 import net . minecraft . client . gui . GuiMainMenu ; 
 import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . client . model . ModelBase ; 
 - import net . minecraft . client . model . ModelBiped ; 
 import net . minecraft . client . renderer . EntityRenderer ; 
 - import net . minecraft . client . renderer . GlStateManager ; 
 import net . minecraft . client . renderer . RenderGlobal ; 
 - import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . client . renderer . texture . TextureManager ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . client . resources . model . ModelBakery ; 
 + import net . minecraft . client . resources . model . ModelManager ; 
 import net . minecraft . client . settings . GameSettings ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityLivingBase ; 
 - import net . minecraft . entity . item . EntityItem ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 - import net . minecraft . init . Blocks ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . BlockPos ; 
 - import net . minecraft . util . ChatComponentTranslation ; 
 import net . minecraft . util . EnumChatFormatting ; 
 - import net . minecraft . util . EnumFacing ; 
 - import net . minecraft . util . MathHelper ; 
 + import net . minecraft . util . IRegistry ; 
 import net . minecraft . util . MovingObjectPosition ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 @ @ - 45 , 6 + 35 , 7 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 import net . minecraftforge . client . event . EntityViewRenderEvent ; 
 import net . minecraftforge . client . event . FOVUpdateEvent ; 
 import net . minecraftforge . client . event . GuiScreenEvent ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 import net . minecraftforge . client . event . MouseEvent ; 
 import net . minecraftforge . client . event . RenderHandEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 @ @ - 54 , 14 + 45 , 9 @ @ import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . common . MinecraftForge ; 
 - import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 - import net . minecraftforge . fml . client . registry . RenderingRegistry ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 - import org . lwjgl . LWJGLException ; 
 - import org . lwjgl . opengl . Display ; 
 + 
 import org . lwjgl . opengl . GL11 ; 
 - import org . lwjgl . opengl . PixelFormat ; 
 / / import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; 
 / / import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; 
 
 @ @ - 470 , 4 + 456 , 9 @ @ public class ForgeHooksClient 
 } 
 } 
 * / 
 + 
 + public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 new file mode 100644 
 index 0000000 . . 502454f 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package net . minecraftforge . client . event ; 
 + 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + import net . minecraft . client . resources . model . ModelBakery ; 
 + import net . minecraft . client . resources . model . ModelManager ; 
 + import net . minecraft . util . IRegistry ; 
 + 
 + / * * 
 + * Fired when the ModelManager is notified of the resource manager reloading . 
 + * Called after model registry is setup , but before it ' s passed to BlockModelShapes . 
 + * / 
 + public class ModelBakeEvent extends Event 
 + { 
 + public final ModelManager modelManager ; 
 + public final IRegistry modelRegistry ; 
 + public final ModelBakery modelBakery ; 
 + 
 + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + { 
 + this . modelManager = modelManager ; 
 + this . modelRegistry = modelRegistry ; 
 + this . modelBakery = modelBakery ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java 
 new file mode 100644 
 index 0000000 . . 37dee84 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + 
 + public interface ISmartBlockModel extends IBakedModel 
 + { 
 + IBakedModel handleBlockState ( IBlockState state ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java 
 new file mode 100644 
 index 0000000 . . 7973271 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + 
 + public interface ISmartItemModel extends IBakedModel 
 + { 
 + IBakedModel handleItemState ( ItemStack stack ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 new file mode 100644 
 index 0000000 . . ef54140 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 @ @ - 0 , 0 + 1 , 138 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . properties . IProperty ; 
 + import net . minecraft . block . state . BlockState ; 
 + import net . minecraft . block . state . IBlockState ; 
 + 
 + import com . google . common . base . Optional ; 
 + import com . google . common . base . Predicates ; 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . ImmutableSet ; 
 + import com . google . common . collect . ImmutableTable ; 
 + import com . google . common . collect . Iterables ; 
 + 
 + public class ExtendedBlockState extends BlockState 
 + { 
 + private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; 
 + 
 + public ExtendedBlockState ( Block blockIn , IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) 
 + { 
 + super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; 
 + ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; 
 + for ( IUnlistedProperty < ? > property : unlistedProperties ) 
 + { 
 + builder . add ( property ) ; 
 + } 
 + this . unlistedProperties = builder . build ( ) ; 
 + } 
 + 
 + private static ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > buildUnlistedMap ( IUnlistedProperty < ? > [ ] unlistedProperties ) 
 + { 
 + ImmutableMap . Builder < IUnlistedProperty < ? > , Optional < ? > > builder = ImmutableMap . < IUnlistedProperty < ? > , Optional < ? > > builder ( ) ; 
 + for ( IUnlistedProperty < ? > p : unlistedProperties ) 
 + { 
 + builder . put ( p , Optional . absent ( ) ) ; 
 + } 
 + return builder . build ( ) ; 
 + } 
 + 
 + @ Override 
 + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) 
 + { 
 + return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; 
 + } 
 + 
 + protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState 
 + { 
 + private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; 
 + private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; 
 + 
 + protected ExtendedStateImplementation ( Block block , ImmutableMap properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) 
 + { 
 + super ( block , properties ) ; 
 + this . unlistedProperties = unlistedProperties ; 
 + this . propertyValueTable = table ; 
 + } 
 + 
 + @ Override 
 + public IBlockState withProperty ( IProperty property , Comparable value ) 
 + { 
 + if ( ! this . getProperties ( ) . containsKey ( property ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; 
 + } 
 + else if ( ! property . getAllowedValues ( ) . contains ( value ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; 
 + } 
 + else 
 + { 
 + if ( this . getProperties ( ) . get ( property ) = = value ) 
 + { 
 + return this ; 
 + } 
 + if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) 
 + { / / no dynamic properties present , looking up in the normal table 
 + return super . withProperty ( property , value ) ; 
 + } 
 + Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; 
 + map . put ( property , value ) ; 
 + ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; 
 + table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; 
 + return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) ; 
 + } 
 + } 
 + 
 + public < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) 
 + { 
 + if ( ! this . unlistedProperties . containsKey ( property ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; 
 + } 
 + if ( ! property . isValid ( value ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; 
 + } 
 + Map < IUnlistedProperty < ? > , Optional < ? > > newMap = new HashMap < IUnlistedProperty < ? > , Optional < ? > > ( unlistedProperties ) ; 
 + newMap . put ( property , Optional . fromNullable ( value ) ) ; 
 + if ( Iterables . all ( newMap . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) 
 + { / / no dynamic properties , lookup normal state 
 + return ( IExtendedBlockState ) normalMap . get ( getProperties ( ) ) ; 
 + } 
 + return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) ; 
 + } 
 + 
 + public Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) 
 + { 
 + return Collections . unmodifiableCollection ( unlistedProperties . keySet ( ) ) ; 
 + } 
 + 
 + public < V > V getValue ( IUnlistedProperty < V > property ) 
 + { 
 + if ( ! this . unlistedProperties . containsKey ( property ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot get unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; 
 + } 
 + return property . getType ( ) . cast ( this . unlistedProperties . get ( property ) . orNull ( ) ) ; 
 + } 
 + 
 + public ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) 
 + { 
 + return unlistedProperties ; 
 + } 
 + 
 + @ Override 
 + public void buildPropertyValueTable ( Map map ) 
 + { 
 + this . normalMap = map ; 
 + super . buildPropertyValueTable ( map ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java 
 new file mode 100644 
 index 0000000 . . 218e427 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + import java . util . Collection ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + 
 + import com . google . common . base . Optional ; 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + public interface IExtendedBlockState extends IBlockState 
 + { 
 + Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) ; 
 + 
 + < V > V getValue ( IUnlistedProperty < V > property ) ; 
 + 
 + < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) ; 
 + 
 + ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java 
 new file mode 100644 
 index 0000000 . . da4b702 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + public interface IUnlistedProperty < V > 
 + { 
 + String getName ( ) ; 
 + 
 + boolean isValid ( V value ) ; 
 + 
 + Class < V > getType ( ) ; 
 + 
 + String valueToString ( V value ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / Properties . java b / src / main / java / net / minecraftforge / common / property / Properties . java 
 new file mode 100644 
 index 0000000 . . b24e6be 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / Properties . java 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + import java . lang . reflect . InvocationTargetException ; 
 + 
 + import net . minecraft . block . properties . IProperty ; 
 + 
 + import org . apache . commons . lang3 . reflect . ConstructorUtils ; 
 + 
 + public class Properties 
 + { 
 + public static < P extends IProperty , V > IUnlistedProperty < V > toUnlisted ( P property ) 
 + { 
 + return new PropertyAdapter ( property ) ; 
 + } 
 + 
 + public static class PropertyAdapter < V extends Comparable > implements IUnlistedProperty < V > 
 + { 
 + private final IProperty parent ; 
 + 
 + public PropertyAdapter ( IProperty parent ) 
 + { 
 + this . parent = parent ; 
 + } 
 + 
 + public String getName ( ) 
 + { 
 + return parent . getName ( ) ; 
 + } 
 + 
 + public boolean isValid ( V value ) 
 + { 
 + return parent . getAllowedValues ( ) . contains ( value ) ; 
 + } 
 + 
 + public Class < V > getType ( ) 
 + { 
 + return parent . getValueClass ( ) ; 
 + } 
 + 
 + public String valueToString ( V value ) 
 + { 
 + return parent . getName ( value ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc 
 index c2381c6 . . f59ef26 100644 
 - - - a / src / main / resources / forge . exc 
 + + + b / src / main / resources / forge . exc 
 @ @ - 26 , 4 + 26 , 5 @ @ net / minecraft / block / BlockFire . tryCatchFire ( Lnet / minecraft / world / World ; Lnet / minec 
 net / minecraft / block / BlockSkull . getDrops ( Lnet / minecraft / world / IBlockAccess ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / block / state / IBlockState ; I ) Ljava / util / List ; = | p _ 180663 _ 1 _ , p _ 180663 _ 2 _ , p _ 180663 _ 3 _ , fortune 
 net / minecraft / item / ItemDye . applyBonemeal ( Lnet / minecraft / item / ItemStack ; Lnet / minecraft / world / World ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / entity / player / EntityPlayer ; ) Z = | p _ 179234 _ 0 _ , p _ 179234 _ 1 _ , p _ 179234 _ 2 _ , player 
 net / minecraft / server / management / ItemInWorldManager . removeBlock ( Lnet / minecraft / util / BlockPos ; Z ) Z = | p _ 180235 _ 1 _ , canHarvest 
 - net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font 
 \ No newline at end of file 
 + net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font 
 + net / minecraft / block / state / BlockState . < init > ( Lnet / minecraft / block / Block ; [ Lnet / minecraft / block / properties / IProperty ; Lcom / google / common / collect / ImmutableMap ; ) V = | p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , unlistedProperties 
 diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg 
 index ff42e14 . . 6c78cf2 100644 
 - - - a / src / main / resources / forge _ at . cfg 
 + + + b / src / main / resources / forge _ at . cfg 
 @ @ - 119 , 4 + 119 , 7 @ @ public net . minecraft . world . gen . ChunkProviderServer field _ 73251 _ h # worldObj 
 # RenderEntityItem 
 protected net . minecraft . client . renderer . entity . RenderEntityItem func _ 177078 _ a ( Lnet / minecraft / item / ItemStack ; ) I # getMiniItemCount 
 public net . minecraft . item . crafting . RecipesBanners $ RecipeAddPattern 
 - public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern 
 \ No newline at end of file 
 + public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern 
 + protected net . minecraft . block . state . BlockState $ StateImplementation 
 + protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V 
 + protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 new file mode 100644 
 index 0000000 . . c8de9a4 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 @ @ - 0 , 0 + 1 , 354 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . block . BlockContainer ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . properties . IProperty ; 
 + import net . minecraft . block . properties . PropertyInteger ; 
 + import net . minecraft . block . state . BlockState ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . ItemMeshDefinition ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . entity . RenderItem ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . tileentity . TileEntity ; 
 + import net . minecraft . util . BlockPos ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . Vec3 ; 
 + import net . minecraft . world . IBlockAccess ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 + import net . minecraftforge . client . model . ISmartBlockModel ; 
 + import net . minecraftforge . client . model . ISmartItemModel ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . common . property . ExtendedBlockState ; 
 + import net . minecraftforge . common . property . IExtendedBlockState ; 
 + import net . minecraftforge . common . property . IUnlistedProperty ; 
 + import net . minecraftforge . common . property . Properties ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . SidedProxy ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + import com . google . common . primitives . Ints ; 
 + 
 + @ Mod ( modid = ModelBakeEventDebug . MODID , version = ModelBakeEventDebug . VERSION ) 
 + public class ModelBakeEventDebug 
 + { 
 + public static final String MODID = " ForgeDebugModelBakeEvent " ; 
 + public static final String VERSION = " 1 . 0 " ; 
 + public static final int cubeSize = 3 ; 
 + 
 + private static String blockName = MODID . toLowerCase ( ) + " : " + CustomModelBlock . name ; 
 + 
 + public static final IUnlistedProperty < Integer > [ ] properties = new IUnlistedProperty [ 6 ] ; 
 + 
 + static 
 + { 
 + for ( EnumFacing f : EnumFacing . values ( ) ) 
 + { 
 + properties [ f . ordinal ( ) ] = Properties . toUnlisted ( PropertyInteger . create ( f . getName ( ) , 0 , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ) ; 
 + } 
 + } 
 + 
 + @ SidedProxy ( serverSide = " net . minecraftforge . debug . ModelBakeEventDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . ModelBakeEventDebug $ ClientProxy " ) 
 + public static CommonProxy proxy ; 
 + 
 + @ EventHandler 
 + public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } 
 + 
 + @ EventHandler 
 + public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } 
 + 
 + public static class CommonProxy 
 + { 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; 
 + GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; 
 + } 
 + 
 + public void postInit ( FMLPostInitializationEvent event ) { } 
 + } 
 + 
 + public static class ClientProxy extends CommonProxy 
 + { 
 + private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; 
 + 
 + @ Override 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + super . init ( event ) ; 
 + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 + } 
 + 
 + @ Override 
 + public void postInit ( FMLPostInitializationEvent event ) { 
 + super . postInit ( event ) ; 
 + Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 + RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; 
 + if ( renderItem ! = null ) 
 + { 
 + renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { 
 + public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 + { 
 + return modelLocation ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + } 
 + 
 + public static class BakeEventHandler 
 + { 
 + public static final BakeEventHandler instance = new BakeEventHandler ( ) ; 
 + 
 + private BakeEventHandler ( ) { } ; 
 + 
 + @ SubscribeEvent 
 + public void onModelBakeEvent ( ModelBakeEvent event ) 
 + { 
 + TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; 
 + TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; 
 + event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; 
 + } 
 + } 
 + 
 + public static class CustomModelBlock extends BlockContainer 
 + { 
 + public static final CustomModelBlock instance = new CustomModelBlock ( ) ; 
 + public static final String name = " custom _ model _ block " ; 
 + 
 + private CustomModelBlock ( ) 
 + { 
 + super ( Material . iron ) ; 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + setUnlocalizedName ( MODID + " : " + name ) ; 
 + } 
 + 
 + @ Override 
 + public int getRenderType ( ) { return 3 ; } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( ) { return false ; } 
 + 
 + @ Override 
 + public boolean isFullCube ( ) { return false ; } 
 + 
 + @ Override 
 + public boolean isVisuallyOpaque ( ) { return false ; } 
 + 
 + @ Override 
 + public TileEntity createNewTileEntity ( World world , int meta ) 
 + { 
 + return new CustomTileEntity ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) 
 + { 
 + TileEntity te = world . getTileEntity ( pos ) ; 
 + if ( te instanceof CustomTileEntity ) 
 + { 
 + CustomTileEntity cte = ( CustomTileEntity ) te ; 
 + Vec3 vec = revRotate ( new Vec3 ( hitX - . 5 , hitY - . 5 , hitZ - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + IUnlistedProperty property = properties [ side . ordinal ( ) ] ; 
 + Integer value = ( Integer ) cte . getState ( ) . getValue ( property ) ; 
 + if ( value = = null ) value = 0 ; 
 + value ^ = ( 1 < < ( cubeSize * ( ( int ) ( vec . xCoord * ( cubeSize - . 0001 ) ) ) + ( ( int ) ( vec . zCoord * ( cubeSize - . 0001 ) ) ) ) ) ; 
 + cte . setState ( cte . getState ( ) . withProperty ( property , value ) ) ; 
 + world . markBlockRangeForRenderUpdate ( pos , pos ) ; 
 + } 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 + { 
 + TileEntity te = world . getTileEntity ( pos ) ; 
 + if ( te instanceof CustomTileEntity ) 
 + { 
 + CustomTileEntity cte = ( CustomTileEntity ) te ; 
 + return cte . getState ( ) ; 
 + } 
 + return state ; 
 + } 
 + 
 + @ Override 
 + protected BlockState createBlockState ( ) 
 + { 
 + return new ExtendedBlockState ( this , new IProperty [ 0 ] , properties ) ; 
 + } 
 + } 
 + 
 + public static class CustomTileEntity extends TileEntity 
 + { 
 + private IExtendedBlockState state ; 
 + public CustomTileEntity ( ) { } 
 + 
 + public IExtendedBlockState getState ( ) 
 + { 
 + if ( state = = null ) 
 + { 
 + state = ( IExtendedBlockState ) getBlockType ( ) . getDefaultState ( ) ; 
 + } 
 + return state ; 
 + } 
 + 
 + public void setState ( IExtendedBlockState state ) 
 + { 
 + this . state = state ; 
 + } 
 + } 
 + 
 + public static class CustomModel implements IBakedModel , ISmartBlockModel , ISmartItemModel 
 + { 
 + private final TextureAtlasSprite base , overlay ; 
 + private boolean hasStateSet = false ; 
 + private final IExtendedBlockState state ; 
 + 
 + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay ) 
 + { 
 + this ( base , overlay , null ) ; 
 + } 
 + 
 + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay , IExtendedBlockState state ) 
 + { 
 + this . base = base ; 
 + this . overlay = overlay ; 
 + this . state = state ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , float u , float v ) 
 + { 
 + return new int [ ] { 
 + Float . floatToRawIntBits ( x ) , 
 + Float . floatToRawIntBits ( y ) , 
 + Float . floatToRawIntBits ( z ) , 
 + color , 
 + Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , 
 + Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 
 + 0 
 + } ; 
 + } 
 + 
 + private BakedQuad createSidedBakedQuad ( float x1 , float x2 , float z1 , float z2 , float y , TextureAtlasSprite texture , EnumFacing side ) 
 + { 
 + Vec3 v1 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + Vec3 v2 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + Vec3 v3 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + Vec3 v4 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + return new BakedQuad ( Ints . concat ( 
 + vertexToInts ( ( float ) v1 . xCoord , ( float ) v1 . yCoord , ( float ) v1 . zCoord , - 1 , texture , 0 , 0 ) , 
 + vertexToInts ( ( float ) v2 . xCoord , ( float ) v2 . yCoord , ( float ) v2 . zCoord , - 1 , texture , 0 , 16 ) , 
 + vertexToInts ( ( float ) v3 . xCoord , ( float ) v3 . yCoord , ( float ) v3 . zCoord , - 1 , texture , 16 , 16 ) , 
 + vertexToInts ( ( float ) v4 . xCoord , ( float ) v4 . yCoord , ( float ) v4 . zCoord , - 1 , texture , 16 , 0 ) 
 + ) , - 1 , side ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getGeneralQuads ( ) 
 + { 
 + int len = cubeSize * 5 + 1 ; 
 + List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; 
 + for ( EnumFacing f : EnumFacing . values ( ) ) 
 + { 
 + ret . add ( createSidedBakedQuad ( 0 , 1 , 0 , 1 , 1 , base , f ) ) ; 
 + for ( int i = 0 ; i < cubeSize ; i + + ) 
 + { 
 + for ( int j = 0 ; j < cubeSize ; j + + ) 
 + { 
 + if ( state ! = null ) 
 + { 
 + Integer value = ( Integer ) state . getValue ( properties [ f . ordinal ( ) ] ) ; 
 + if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) 
 + { 
 + ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + return ret ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) { return true ; } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) { return true ; } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) { return false ; } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) { return this . base ; } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleBlockState ( IBlockState state ) 
 + { 
 + return new CustomModel ( base , overlay , ( IExtendedBlockState ) state ) ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleItemState ( ItemStack stack ) 
 + { 
 + IExtendedBlockState itemState = ( ( IExtendedBlockState ) CustomModelBlock . instance . getDefaultState ( ) ) . withProperty ( properties [ 1 ] , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ; 
 + return new CustomModel ( base , overlay , itemState ) ; 
 + } 
 + } 
 + 
 + private static Vec3 rotate ( Vec3 vec , EnumFacing side ) 
 + { 
 + switch ( side ) 
 + { 
 + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; 
 + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; 
 + case NORTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; 
 + case SOUTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; 
 + case WEST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; 
 + case EAST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; 
 + } 
 + return null ; 
 + } 
 + 
 + private static Vec3 revRotate ( Vec3 vec , EnumFacing side ) 
 + { 
 + switch ( side ) 
 + { 
 + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; 
 + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; 
 + case NORTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; 
 + case SOUTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; 
 + case WEST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; 
 + case EAST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; 
 + } 
 + return null ; 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 new file mode 100644 
 index 0000000 . . c2352ff 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + { 
 + " variants " : { 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 new file mode 100644 
 index 0000000 . . 43a272a 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + { 
 + " parent " : " builtin / entity " 
 + }
