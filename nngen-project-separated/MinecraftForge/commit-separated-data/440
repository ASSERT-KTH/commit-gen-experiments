BLEU SCORE: 0.021504238591261653

TEST MSG: IRecipeConditions forge : and and forge : false
GENERATED MSG: Fix parseShaped missing Empty slot item . Closes # 3990

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index 64382a8 . . f596cdb 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 432 , 6 + 432 , 20 @ @ public class CraftingHelper { <nl> } <nl> return ( ) - > children . stream ( ) . anyMatch ( c - > c . getAsBoolean ( ) ) ; <nl> } ) ; <nl> + registerC ( " forge : and " , ( context , json ) - > { <nl> + JsonArray values = JsonUtils . getJsonArray ( json , " values " ) ; <nl> + List < BooleanSupplier > children = Lists . newArrayList ( ) ; <nl> + for ( JsonElement j : values ) <nl> + { <nl> + if ( ! j . isJsonObject ( ) ) <nl> + throw new JsonSyntaxException ( " And condition values must be an array of JsonObjects " ) ; <nl> + children . add ( CraftingHelper . getCondition ( j . getAsJsonObject ( ) , context ) ) ; <nl> + } <nl> + return ( ) - > children . stream ( ) . allMatch ( c - > c . getAsBoolean ( ) ) ; <nl> + } ) ; <nl> + registerC ( " forge : false " , ( context , json ) - > { <nl> + return ( ) - > false ; <nl> + } ) ; <nl> <nl> registerR ( " minecraft : crafting _ shaped " , ( context , json ) - > { <nl> String group = JsonUtils . getString ( json , " group " , " " ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index 788f8d1 . . abc31a2 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 308 , 6 + 308 , 7 @ @ public class CraftingHelper { <nl> } <nl> <nl> HashMap < Character , Ingredient > itemMap = Maps . newHashMap ( ) ; <nl> + itemMap . put ( ' ' , Ingredient . field _ 193370 _ a ) ; <nl> <nl> for ( ; idx < recipe . length ; idx + = 2 ) <nl> { <nl> @ @ - 315 , 6 + 316 , 9 @ @ public class CraftingHelper { <nl> Object in = recipe [ idx + 1 ] ; <nl> Ingredient ing = CraftingHelper . getIngredient ( in ) ; <nl> <nl> + if ( ' ' = = chr . charValue ( ) ) <nl> + throw new JsonSyntaxException ( " Invalid key entry : ' ' is a reserved symbol . " ) ; <nl> + <nl> if ( ing ! = null ) <nl> { <nl> itemMap . put ( chr , ing ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index 64382a8 . . f596cdb 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 432 , 6 + 432 , 20 @ @ public class CraftingHelper { 
 } 
 return ( ) - > children . stream ( ) . anyMatch ( c - > c . getAsBoolean ( ) ) ; 
 } ) ; 
 + registerC ( " forge : and " , ( context , json ) - > { 
 + JsonArray values = JsonUtils . getJsonArray ( json , " values " ) ; 
 + List < BooleanSupplier > children = Lists . newArrayList ( ) ; 
 + for ( JsonElement j : values ) 
 + { 
 + if ( ! j . isJsonObject ( ) ) 
 + throw new JsonSyntaxException ( " And condition values must be an array of JsonObjects " ) ; 
 + children . add ( CraftingHelper . getCondition ( j . getAsJsonObject ( ) , context ) ) ; 
 + } 
 + return ( ) - > children . stream ( ) . allMatch ( c - > c . getAsBoolean ( ) ) ; 
 + } ) ; 
 + registerC ( " forge : false " , ( context , json ) - > { 
 + return ( ) - > false ; 
 + } ) ; 
 
 registerR ( " minecraft : crafting _ shaped " , ( context , json ) - > { 
 String group = JsonUtils . getString ( json , " group " , " " ) ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index 788f8d1 . . abc31a2 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 308 , 6 + 308 , 7 @ @ public class CraftingHelper { 
 } 
 
 HashMap < Character , Ingredient > itemMap = Maps . newHashMap ( ) ; 
 + itemMap . put ( ' ' , Ingredient . field _ 193370 _ a ) ; 
 
 for ( ; idx < recipe . length ; idx + = 2 ) 
 { 
 @ @ - 315 , 6 + 316 , 9 @ @ public class CraftingHelper { 
 Object in = recipe [ idx + 1 ] ; 
 Ingredient ing = CraftingHelper . getIngredient ( in ) ; 
 
 + if ( ' ' = = chr . charValue ( ) ) 
 + throw new JsonSyntaxException ( " Invalid key entry : ' ' is a reserved symbol . " ) ; 
 + 
 if ( ing ! = null ) 
 { 
 itemMap . put ( chr , ing ) ;
