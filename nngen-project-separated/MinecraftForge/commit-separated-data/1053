BLEU SCORE: 0.030098043843528283

TEST MSG: Add a config file that lets you add additional soft dependencies at runtime - injectedDependencies . json
GENERATED MSG: Add in a remapping event for mods to consume .

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java <nl> index d85fb47 . . 3aa7750 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java <nl> @ @ - 164 , 6 + 164 , 8 @ @ public class FMLModContainer implements ModContainer <nl> List < ArtifactVersion > dependants = Lists . newArrayList ( ) ; <nl> annotationDependencies = ( String ) descriptor . get ( " dependencies " ) ; <nl> Loader . instance ( ) . computeDependencies ( annotationDependencies , requirements , dependencies , dependants ) ; <nl> + dependants . addAll ( Loader . instance ( ) . getInjectedBefore ( getModId ( ) ) ) ; <nl> + dependencies . addAll ( Loader . instance ( ) . getInjectedAfter ( getModId ( ) ) ) ; <nl> modMetadata . requiredMods = requirements ; <nl> modMetadata . dependencies = dependencies ; <nl> modMetadata . dependants = dependants ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / Loader . java b / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> index ece0458 . . 19cb52c 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package cpw . mods . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . io . FileNotFoundException ; <nl> import java . io . FileReader ; <nl> import java . io . FileWriter ; <nl> import java . io . IOException ; <nl> @ @ - 35 , 6 + 36 , 7 @ @ import com . google . common . base . Splitter ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBiMap ; <nl> + import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableMultiset ; <nl> @ @ - 50 , 8 + 52 , 17 @ @ import com . google . common . collect . Ordering ; <nl> import com . google . common . collect . SetMultimap ; <nl> import com . google . common . collect . Sets ; <nl> import com . google . common . collect . TreeMultimap ; <nl> + import com . google . gson . Gson ; <nl> + import com . google . gson . GsonBuilder ; <nl> + import com . google . gson . JsonArray ; <nl> + import com . google . gson . JsonElement ; <nl> + import com . google . gson . JsonIOException ; <nl> + import com . google . gson . JsonObject ; <nl> + import com . google . gson . JsonParser ; <nl> + import com . google . gson . JsonSyntaxException ; <nl> <nl> import cpw . mods . fml . common . LoaderState . ModState ; <nl> + import cpw . mods . fml . common . MetadataCollection . ArtifactVersionAdapter ; <nl> import cpw . mods . fml . common . ModContainer . Disableable ; <nl> import cpw . mods . fml . common . ProgressManager . ProgressBar ; <nl> import cpw . mods . fml . common . discovery . ModDiscoverer ; <nl> @ @ - 450 , 6 + 461 , 8 @ @ public class Loader <nl> FMLLog . severe ( " Attempting to load configuration from % s , which is not a directory " , canonicalConfigPath ) ; <nl> throw new LoaderException ( ) ; <nl> } <nl> + <nl> + readInjectedDependencies ( ) ; <nl> } <nl> <nl> public List < ModContainer > getModList ( ) <nl> @ @ - 994 , 4 + 1007 , 57 @ @ public class Loader <nl> ProgressManager . pop ( progressBar ) ; <nl> progressBar = null ; <nl> } <nl> + <nl> + private ListMultimap < String , ArtifactVersion > injectedBefore = ArrayListMultimap . create ( ) ; <nl> + private ListMultimap < String , ArtifactVersion > injectedAfter = ArrayListMultimap . create ( ) ; <nl> + <nl> + private void readInjectedDependencies ( ) <nl> + { <nl> + File injectedDepFile = new File ( getConfigDir ( ) , " injectedDependencies . json " ) ; <nl> + if ( ! injectedDepFile . exists ( ) ) <nl> + { <nl> + FMLLog . getLogger ( ) . log ( Level . DEBUG , " File { } not found . No dependencies injected " , injectedDepFile . getAbsolutePath ( ) ) ; <nl> + return ; <nl> + } <nl> + JsonParser parser = new JsonParser ( ) ; <nl> + JsonElement injectedDeps ; <nl> + try <nl> + { <nl> + injectedDeps = parser . parse ( new FileReader ( injectedDepFile ) ) ; <nl> + for ( JsonElement el : injectedDeps . getAsJsonArray ( ) ) <nl> + { <nl> + JsonObject jo = el . getAsJsonObject ( ) ; <nl> + String modId = jo . get ( " modId " ) . getAsString ( ) ; <nl> + JsonArray deps = jo . get ( " deps " ) . getAsJsonArray ( ) ; <nl> + for ( JsonElement dep : deps ) <nl> + { <nl> + JsonObject depObj = dep . getAsJsonObject ( ) ; <nl> + String type = depObj . get ( " type " ) . getAsString ( ) ; <nl> + if ( type . equals ( " before " ) ) { <nl> + injectedBefore . put ( modId , VersionParser . parseVersionReference ( depObj . get ( " target " ) . getAsString ( ) ) ) ; <nl> + } else if ( type . equals ( " after " ) ) { <nl> + injectedAfter . put ( modId , VersionParser . parseVersionReference ( depObj . get ( " target " ) . getAsString ( ) ) ) ; <nl> + } else { <nl> + FMLLog . getLogger ( ) . log ( Level . ERROR , " Invalid dependency type { } " , type ) ; <nl> + throw new RuntimeException ( " Unable to parse type " ) ; <nl> + } <nl> + } <nl> + } <nl> + } catch ( Exception e ) <nl> + { <nl> + FMLLog . getLogger ( ) . log ( Level . ERROR , " Unable to parse { } - skipping " , injectedDepFile ) ; <nl> + FMLLog . getLogger ( ) . throwing ( Level . ERROR , e ) ; <nl> + return ; <nl> + } <nl> + FMLLog . getLogger ( ) . log ( Level . DEBUG , " Loaded { } injected dependencies on modIds : { } " , injectedBefore . size ( ) , injectedBefore . keySet ( ) ) ; <nl> + } <nl> + <nl> + List < ArtifactVersion > getInjectedBefore ( String modId ) <nl> + { <nl> + return injectedBefore . get ( modId ) ; <nl> + } <nl> + List < ArtifactVersion > getInjectedAfter ( String modId ) <nl> + { <nl> + return injectedAfter . get ( modId ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / Loader . java b / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> index 780fc13 . . 7376106 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ import cpw . mods . fml . common . LoaderState . ModState ; <nl> import cpw . mods . fml . common . discovery . ModDiscoverer ; <nl> import cpw . mods . fml . common . event . FMLInterModComms ; <nl> import cpw . mods . fml . common . event . FMLLoadEvent ; <nl> + import cpw . mods . fml . common . event . FMLModIdMappingEvent ; <nl> import cpw . mods . fml . common . functions . ArtifactVersionNameFunction ; <nl> import cpw . mods . fml . common . functions . ModIdFunction ; <nl> import cpw . mods . fml . common . registry . GameData ; <nl> @ @ - 837 , 4 + 838 , 16 @ @ public class Loader <nl> FMLLog . info ( " Attempting connection with missing mods % s at % s " , difference , side ) ; <nl> return true ; <nl> } <nl> + <nl> + public void fireRemapEvent ( Map < String , Integer [ ] > remaps ) <nl> + { <nl> + if ( remaps . isEmpty ( ) ) <nl> + { <nl> + FMLLog . finest ( " Skipping remap event - no remaps occured " ) ; <nl> + } <nl> + else <nl> + { <nl> + modController . propogateStateMessage ( new FMLModIdMappingEvent ( remaps ) ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / event / FMLModIdMappingEvent . java b / fml / src / main / java / cpw / mods / fml / common / event / FMLModIdMappingEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 80b4820 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / event / FMLModIdMappingEvent . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + package cpw . mods . fml . common . event ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . Lists ; <nl> + <nl> + public class FMLModIdMappingEvent extends FMLEvent { <nl> + public static enum RemapTarget { BLOCK , ITEM } <nl> + public class ModRemapping <nl> + { <nl> + public final int oldId ; <nl> + public final int newId ; <nl> + public final String tag ; <nl> + public final RemapTarget remapTarget ; <nl> + public ModRemapping ( int oldId , int newId , String tag ) <nl> + { <nl> + this . oldId = oldId ; <nl> + this . newId = newId ; <nl> + this . tag = tag . substring ( 1 ) ; <nl> + this . remapTarget = tag . charAt ( 0 ) = = ' \ u0001 ' ? RemapTarget . BLOCK : RemapTarget . ITEM ; <nl> + } <nl> + <nl> + } <nl> + public final ImmutableList < ModRemapping > remappedIds ; <nl> + <nl> + public FMLModIdMappingEvent ( Map < String , Integer [ ] > mappings ) <nl> + { <nl> + List < ModRemapping > remappings = Lists . newArrayList ( ) ; <nl> + for ( Entry < String , Integer [ ] > mapping : mappings . entrySet ( ) ) <nl> + { <nl> + remappings . add ( new ModRemapping ( mapping . getValue ( ) [ 0 ] , mapping . getValue ( ) [ 1 ] , mapping . getKey ( ) ) ) ; <nl> + } <nl> + <nl> + Collections . sort ( remappings , new Comparator < ModRemapping > ( ) { <nl> + @ Override <nl> + public int compare ( ModRemapping o1 , ModRemapping o2 ) <nl> + { <nl> + return Integer . compare ( o1 . newId , o2 . newId ) ; <nl> + } <nl> + } ) ; <nl> + remappedIds = ImmutableList . copyOf ( remappings ) ; <nl> + } <nl> + } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java b / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java <nl> index 6a9e337 . . e195b17 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java <nl> @ @ - 16 , 15 + 16 , 12 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> - import java . util . Set ; <nl> import java . util . logging . Level ; <nl> <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraft . nbt . NBTTagCompound ; <nl> - import net . minecraft . nbt . NBTTagList ; <nl> <nl> import com . google . common . base . Charsets ; <nl> import com . google . common . base . Joiner ; <nl> @ @ - 32 , 7 + 29 , 6 @ @ import com . google . common . base . Joiner . MapJoiner ; <nl> import com . google . common . collect . HashBasedTable ; <nl> import com . google . common . collect . ImmutableListMultimap ; <nl> import com . google . common . collect . Maps ; <nl> - import com . google . common . collect . Sets ; <nl> import com . google . common . collect . Table ; <nl> import com . google . common . io . Files ; <nl> <nl> @ @ - 215 , 6 + 211 , 7 @ @ public class GameData { <nl> <nl> public static void injectWorldIDMap ( Map < String , Integer > dataList ) <nl> { <nl> + Map < String , Integer [ ] > remaps = Maps . newHashMap ( ) ; <nl> blockRegistry . beginIdSwap ( ) ; <nl> itemRegistry . beginIdSwap ( ) ; <nl> for ( Entry < String , Integer > entry : dataList . entrySet ( ) ) <nl> @ @ - 237 , 6 + 234 , 7 @ @ public class GameData { <nl> if ( currId ! = newId ) <nl> { <nl> FMLLog . info ( " Found % s id mismatch % s : % d % d " , isBlock ? " block " : " item " , itemName , currId , newId ) ; <nl> + remaps . put ( itemName , new Integer [ ] { currId , newId } ) ; <nl> } <nl> <nl> if ( isBlock ) <nl> @ @ - 251 , 5 + 249 , 6 @ @ public class GameData { <nl> <nl> blockRegistry . completeIdSwap ( ) ; <nl> itemRegistry . completeIdSwap ( ) ; <nl> + Loader . instance ( ) . fireRemapEvent ( remaps ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java 
 index d85fb47 . . 3aa7750 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java 
 @ @ - 164 , 6 + 164 , 8 @ @ public class FMLModContainer implements ModContainer 
 List < ArtifactVersion > dependants = Lists . newArrayList ( ) ; 
 annotationDependencies = ( String ) descriptor . get ( " dependencies " ) ; 
 Loader . instance ( ) . computeDependencies ( annotationDependencies , requirements , dependencies , dependants ) ; 
 + dependants . addAll ( Loader . instance ( ) . getInjectedBefore ( getModId ( ) ) ) ; 
 + dependencies . addAll ( Loader . instance ( ) . getInjectedAfter ( getModId ( ) ) ) ; 
 modMetadata . requiredMods = requirements ; 
 modMetadata . dependencies = dependencies ; 
 modMetadata . dependants = dependants ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / Loader . java b / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 index ece0458 . . 19cb52c 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package cpw . mods . fml . common ; 
 
 import java . io . File ; 
 + import java . io . FileNotFoundException ; 
 import java . io . FileReader ; 
 import java . io . FileWriter ; 
 import java . io . IOException ; 
 @ @ - 35 , 6 + 36 , 7 @ @ import com . google . common . base . Splitter ; 
 import com . google . common . collect . ArrayListMultimap ; 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBiMap ; 
 + import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableMultiset ; 
 @ @ - 50 , 8 + 52 , 17 @ @ import com . google . common . collect . Ordering ; 
 import com . google . common . collect . SetMultimap ; 
 import com . google . common . collect . Sets ; 
 import com . google . common . collect . TreeMultimap ; 
 + import com . google . gson . Gson ; 
 + import com . google . gson . GsonBuilder ; 
 + import com . google . gson . JsonArray ; 
 + import com . google . gson . JsonElement ; 
 + import com . google . gson . JsonIOException ; 
 + import com . google . gson . JsonObject ; 
 + import com . google . gson . JsonParser ; 
 + import com . google . gson . JsonSyntaxException ; 
 
 import cpw . mods . fml . common . LoaderState . ModState ; 
 + import cpw . mods . fml . common . MetadataCollection . ArtifactVersionAdapter ; 
 import cpw . mods . fml . common . ModContainer . Disableable ; 
 import cpw . mods . fml . common . ProgressManager . ProgressBar ; 
 import cpw . mods . fml . common . discovery . ModDiscoverer ; 
 @ @ - 450 , 6 + 461 , 8 @ @ public class Loader 
 FMLLog . severe ( " Attempting to load configuration from % s , which is not a directory " , canonicalConfigPath ) ; 
 throw new LoaderException ( ) ; 
 } 
 + 
 + readInjectedDependencies ( ) ; 
 } 
 
 public List < ModContainer > getModList ( ) 
 @ @ - 994 , 4 + 1007 , 57 @ @ public class Loader 
 ProgressManager . pop ( progressBar ) ; 
 progressBar = null ; 
 } 
 + 
 + private ListMultimap < String , ArtifactVersion > injectedBefore = ArrayListMultimap . create ( ) ; 
 + private ListMultimap < String , ArtifactVersion > injectedAfter = ArrayListMultimap . create ( ) ; 
 + 
 + private void readInjectedDependencies ( ) 
 + { 
 + File injectedDepFile = new File ( getConfigDir ( ) , " injectedDependencies . json " ) ; 
 + if ( ! injectedDepFile . exists ( ) ) 
 + { 
 + FMLLog . getLogger ( ) . log ( Level . DEBUG , " File { } not found . No dependencies injected " , injectedDepFile . getAbsolutePath ( ) ) ; 
 + return ; 
 + } 
 + JsonParser parser = new JsonParser ( ) ; 
 + JsonElement injectedDeps ; 
 + try 
 + { 
 + injectedDeps = parser . parse ( new FileReader ( injectedDepFile ) ) ; 
 + for ( JsonElement el : injectedDeps . getAsJsonArray ( ) ) 
 + { 
 + JsonObject jo = el . getAsJsonObject ( ) ; 
 + String modId = jo . get ( " modId " ) . getAsString ( ) ; 
 + JsonArray deps = jo . get ( " deps " ) . getAsJsonArray ( ) ; 
 + for ( JsonElement dep : deps ) 
 + { 
 + JsonObject depObj = dep . getAsJsonObject ( ) ; 
 + String type = depObj . get ( " type " ) . getAsString ( ) ; 
 + if ( type . equals ( " before " ) ) { 
 + injectedBefore . put ( modId , VersionParser . parseVersionReference ( depObj . get ( " target " ) . getAsString ( ) ) ) ; 
 + } else if ( type . equals ( " after " ) ) { 
 + injectedAfter . put ( modId , VersionParser . parseVersionReference ( depObj . get ( " target " ) . getAsString ( ) ) ) ; 
 + } else { 
 + FMLLog . getLogger ( ) . log ( Level . ERROR , " Invalid dependency type { } " , type ) ; 
 + throw new RuntimeException ( " Unable to parse type " ) ; 
 + } 
 + } 
 + } 
 + } catch ( Exception e ) 
 + { 
 + FMLLog . getLogger ( ) . log ( Level . ERROR , " Unable to parse { } - skipping " , injectedDepFile ) ; 
 + FMLLog . getLogger ( ) . throwing ( Level . ERROR , e ) ; 
 + return ; 
 + } 
 + FMLLog . getLogger ( ) . log ( Level . DEBUG , " Loaded { } injected dependencies on modIds : { } " , injectedBefore . size ( ) , injectedBefore . keySet ( ) ) ; 
 + } 
 + 
 + List < ArtifactVersion > getInjectedBefore ( String modId ) 
 + { 
 + return injectedBefore . get ( modId ) ; 
 + } 
 + List < ArtifactVersion > getInjectedAfter ( String modId ) 
 + { 
 + return injectedAfter . get ( modId ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / Loader . java b / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 index 780fc13 . . 7376106 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import cpw . mods . fml . common . LoaderState . ModState ; 
 import cpw . mods . fml . common . discovery . ModDiscoverer ; 
 import cpw . mods . fml . common . event . FMLInterModComms ; 
 import cpw . mods . fml . common . event . FMLLoadEvent ; 
 + import cpw . mods . fml . common . event . FMLModIdMappingEvent ; 
 import cpw . mods . fml . common . functions . ArtifactVersionNameFunction ; 
 import cpw . mods . fml . common . functions . ModIdFunction ; 
 import cpw . mods . fml . common . registry . GameData ; 
 @ @ - 837 , 4 + 838 , 16 @ @ public class Loader 
 FMLLog . info ( " Attempting connection with missing mods % s at % s " , difference , side ) ; 
 return true ; 
 } 
 + 
 + public void fireRemapEvent ( Map < String , Integer [ ] > remaps ) 
 + { 
 + if ( remaps . isEmpty ( ) ) 
 + { 
 + FMLLog . finest ( " Skipping remap event - no remaps occured " ) ; 
 + } 
 + else 
 + { 
 + modController . propogateStateMessage ( new FMLModIdMappingEvent ( remaps ) ) ; 
 + } 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / event / FMLModIdMappingEvent . java b / fml / src / main / java / cpw / mods / fml / common / event / FMLModIdMappingEvent . java 
 new file mode 100644 
 index 0000000 . . 80b4820 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / common / event / FMLModIdMappingEvent . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package cpw . mods . fml . common . event ; 
 + 
 + import java . util . Collections ; 
 + import java . util . Comparator ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . Lists ; 
 + 
 + public class FMLModIdMappingEvent extends FMLEvent { 
 + public static enum RemapTarget { BLOCK , ITEM } 
 + public class ModRemapping 
 + { 
 + public final int oldId ; 
 + public final int newId ; 
 + public final String tag ; 
 + public final RemapTarget remapTarget ; 
 + public ModRemapping ( int oldId , int newId , String tag ) 
 + { 
 + this . oldId = oldId ; 
 + this . newId = newId ; 
 + this . tag = tag . substring ( 1 ) ; 
 + this . remapTarget = tag . charAt ( 0 ) = = ' \ u0001 ' ? RemapTarget . BLOCK : RemapTarget . ITEM ; 
 + } 
 + 
 + } 
 + public final ImmutableList < ModRemapping > remappedIds ; 
 + 
 + public FMLModIdMappingEvent ( Map < String , Integer [ ] > mappings ) 
 + { 
 + List < ModRemapping > remappings = Lists . newArrayList ( ) ; 
 + for ( Entry < String , Integer [ ] > mapping : mappings . entrySet ( ) ) 
 + { 
 + remappings . add ( new ModRemapping ( mapping . getValue ( ) [ 0 ] , mapping . getValue ( ) [ 1 ] , mapping . getKey ( ) ) ) ; 
 + } 
 + 
 + Collections . sort ( remappings , new Comparator < ModRemapping > ( ) { 
 + @ Override 
 + public int compare ( ModRemapping o1 , ModRemapping o2 ) 
 + { 
 + return Integer . compare ( o1 . newId , o2 . newId ) ; 
 + } 
 + } ) ; 
 + remappedIds = ImmutableList . copyOf ( remappings ) ; 
 + } 
 + } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java b / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java 
 index 6a9e337 . . e195b17 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java 
 @ @ - 16 , 15 + 16 , 12 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 - import java . util . Set ; 
 import java . util . logging . Level ; 
 
 import net . minecraft . block . Block ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraft . nbt . NBTTagCompound ; 
 - import net . minecraft . nbt . NBTTagList ; 
 
 import com . google . common . base . Charsets ; 
 import com . google . common . base . Joiner ; 
 @ @ - 32 , 7 + 29 , 6 @ @ import com . google . common . base . Joiner . MapJoiner ; 
 import com . google . common . collect . HashBasedTable ; 
 import com . google . common . collect . ImmutableListMultimap ; 
 import com . google . common . collect . Maps ; 
 - import com . google . common . collect . Sets ; 
 import com . google . common . collect . Table ; 
 import com . google . common . io . Files ; 
 
 @ @ - 215 , 6 + 211 , 7 @ @ public class GameData { 
 
 public static void injectWorldIDMap ( Map < String , Integer > dataList ) 
 { 
 + Map < String , Integer [ ] > remaps = Maps . newHashMap ( ) ; 
 blockRegistry . beginIdSwap ( ) ; 
 itemRegistry . beginIdSwap ( ) ; 
 for ( Entry < String , Integer > entry : dataList . entrySet ( ) ) 
 @ @ - 237 , 6 + 234 , 7 @ @ public class GameData { 
 if ( currId ! = newId ) 
 { 
 FMLLog . info ( " Found % s id mismatch % s : % d % d " , isBlock ? " block " : " item " , itemName , currId , newId ) ; 
 + remaps . put ( itemName , new Integer [ ] { currId , newId } ) ; 
 } 
 
 if ( isBlock ) 
 @ @ - 251 , 5 + 249 , 6 @ @ public class GameData { 
 
 blockRegistry . completeIdSwap ( ) ; 
 itemRegistry . completeIdSwap ( ) ; 
 + Loader . instance ( ) . fireRemapEvent ( remaps ) ; 
 } 
 }
