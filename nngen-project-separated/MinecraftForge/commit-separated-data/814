BLEU SCORE: 0.010885011049519647

TEST MSG: Fishing is now a loot table no more need for FishingHooks . { LootTables still need to be evaludated if they need extra hooks , but thats later } Goodbye 44 compile errors !
GENERATED MSG: Add FishingHooks

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / FishingHooks . java b / src / main / java / net / minecraftforge / common / FishingHooks . java <nl> deleted file mode 100644 <nl> index 70c1018 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / common / FishingHooks . java <nl> + + + / dev / null <nl> @ @ - 1 , 113 + 0 , 0 @ @ <nl> - package net . minecraftforge . common ; <nl> - <nl> - import java . util . ArrayList ; <nl> - import java . util . Iterator ; <nl> - import java . util . Random ; <nl> - <nl> - import com . google . common . base . Predicate ; <nl> - <nl> - import net . minecraft . entity . projectile . EntityFishHook ; <nl> - import net . minecraft . item . ItemStack ; <nl> - import net . minecraft . stats . StatBase ; <nl> - import net . minecraft . stats . StatList ; <nl> - import net . minecraft . util . MathHelper ; <nl> - import net . minecraft . util . WeightedRandom ; <nl> - import net . minecraft . util . WeightedRandomFishable ; <nl> - <nl> - public class FishingHooks <nl> - { <nl> - private static ArrayList < WeightedRandomFishable > fish = new ArrayList < WeightedRandomFishable > ( ) ; <nl> - private static ArrayList < WeightedRandomFishable > junk = new ArrayList < WeightedRandomFishable > ( ) ; <nl> - private static ArrayList < WeightedRandomFishable > treasure = new ArrayList < WeightedRandomFishable > ( ) ; <nl> - <nl> - public static void addFish ( WeightedRandomFishable item ) { fish . add ( item ) ; } <nl> - public static void addJunk ( WeightedRandomFishable item ) { junk . add ( item ) ; } <nl> - public static void addTreasure ( WeightedRandomFishable item ) { treasure . add ( item ) ; } <nl> - <nl> - public static void removeFish ( Predicate < WeightedRandomFishable > test ) { remove ( fish . iterator ( ) , test ) ; } <nl> - public static void removeJunk ( Predicate < WeightedRandomFishable > test ) { remove ( junk . iterator ( ) , test ) ; } <nl> - public static void removeTreasure ( Predicate < WeightedRandomFishable > test ) { remove ( treasure . iterator ( ) , test ) ; } <nl> - <nl> - public static ItemStack getRandomFishable ( Random rand , float chance ) <nl> - { <nl> - return getRandomFishable ( rand , chance , 0 , 0 ) ; <nl> - } <nl> - <nl> - public static ItemStack getRandomFishable ( Random rand , float chance , int luck , int speed ) <nl> - { <nl> - float junkChance = 0 . 1F - luck * 0 . 025F - speed * 0 . 01F ; <nl> - float treasureChance = 0 . 05F + luck * 0 . 01F - speed * 0 . 01F ; <nl> - junkChance = MathHelper . clamp _ float ( junkChance , 0 . 0F , 1 . 0F ) ; <nl> - treasureChance = MathHelper . clamp _ float ( treasureChance , 0 . 0F , 1 . 0F ) ; <nl> - <nl> - if ( chance < junkChance ) <nl> - { <nl> - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , junk ) ) . getItemStack ( rand ) ; <nl> - } <nl> - <nl> - chance - = junkChance ; <nl> - if ( chance < treasureChance ) <nl> - { <nl> - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , treasure ) ) . getItemStack ( rand ) ; <nl> - } <nl> - <nl> - chance - = treasureChance ; <nl> - / / this is done in EntityFishHook . func _ 146033 _ f . more loot types expected ? <nl> - { <nl> - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , fish ) ) . getItemStack ( rand ) ; <nl> - } <nl> - } <nl> - <nl> - public static FishableCategory getFishableCategory ( float chance , int luck , int speed ) <nl> - { <nl> - float junkChance = 0 . 1F - luck * 0 . 025F - speed * 0 . 01F ; <nl> - float treasureChance = 0 . 05F + luck * 0 . 01F - speed * 0 . 01F ; <nl> - junkChance = MathHelper . clamp _ float ( junkChance , 0 . 0F , 1 . 0F ) ; <nl> - treasureChance = MathHelper . clamp _ float ( treasureChance , 0 . 0F , 1 . 0F ) ; <nl> - <nl> - if ( chance < junkChance ) <nl> - { <nl> - return FishableCategory . JUNK ; <nl> - } <nl> - <nl> - chance - = junkChance ; <nl> - if ( chance < treasureChance ) <nl> - { <nl> - return FishableCategory . TREASURE ; <nl> - } <nl> - <nl> - chance - = treasureChance ; <nl> - / / this is done in EntityFishHook . func _ 146033 _ f . more loot types expected ? <nl> - { <nl> - return FishableCategory . FISH ; <nl> - } <nl> - } <nl> - <nl> - private static void remove ( Iterator < WeightedRandomFishable > iter , Predicate < WeightedRandomFishable > test ) <nl> - { <nl> - while ( iter . hasNext ( ) ) <nl> - if ( ! test . apply ( iter . next ( ) ) ) <nl> - iter . remove ( ) ; <nl> - } <nl> - <nl> - static <nl> - { <nl> - fish . addAll ( EntityFishHook . FISH ) ; <nl> - junk . addAll ( EntityFishHook . JUNK ) ; <nl> - treasure . addAll ( EntityFishHook . TREASURE ) ; <nl> - } <nl> - <nl> - public static enum FishableCategory <nl> - { <nl> - JUNK ( StatList . junkFishedStat ) , <nl> - TREASURE ( StatList . treasureFishedStat ) , <nl> - FISH ( StatList . fishCaughtStat ) ; <nl> - <nl> - public final StatBase stat ; <nl> - <nl> - FishableCategory ( StatBase stat ) <nl> - { <nl> - this . stat = stat ; <nl> - } <nl> - } <nl> - } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / projectile / EntityFishHook . java . patch b / patches / minecraft / net / minecraft / entity / projectile / EntityFishHook . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 4346d15 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / entity / projectile / EntityFishHook . java . patch <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / entity / projectile / EntityFishHook . java <nl> + + + + . . / src - work / minecraft / net / minecraft / entity / projectile / EntityFishHook . java <nl> + @ @ - 571 , 32 + 571 , 8 @ @ public class EntityFishHook extends Entity <nl> + float f = this . worldObj . rand . nextFloat ( ) ; <nl> + int i = EnchantmentHelper . func _ 151386 _ g ( this . field _ 146042 _ b ) ; <nl> + int j = EnchantmentHelper . func _ 151387 _ h ( this . field _ 146042 _ b ) ; <nl> + - float f1 = 0 . 1F - ( float ) i * 0 . 025F - ( float ) j * 0 . 01F ; <nl> + - float f2 = 0 . 05F + ( float ) i * 0 . 01F - ( float ) j * 0 . 01F ; <nl> + - f1 = MathHelper . clamp _ float ( f1 , 0 . 0F , 1 . 0F ) ; <nl> + - f2 = MathHelper . clamp _ float ( f2 , 0 . 0F , 1 . 0F ) ; <nl> + - <nl> + - if ( f < f1 ) <nl> + - { <nl> + - this . field _ 146042 _ b . addStat ( StatList . field _ 151183 _ A , 1 ) ; <nl> + - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( this . rand , field _ 146039 _ d ) ) . func _ 150708 _ a ( this . rand ) ; <nl> + - } <nl> + - else <nl> + - { <nl> + - f - = f1 ; <nl> + - <nl> + - if ( f < f2 ) <nl> + - { <nl> + - this . field _ 146042 _ b . addStat ( StatList . field _ 151184 _ B , 1 ) ; <nl> + - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( this . rand , field _ 146041 _ e ) ) . func _ 150708 _ a ( this . rand ) ; <nl> + - } <nl> + - else <nl> + - { <nl> + - float f3 = f - f2 ; <nl> + - this . field _ 146042 _ b . addStat ( StatList . fishCaughtStat , 1 ) ; <nl> + - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( this . rand , field _ 146036 _ f ) ) . func _ 150708 _ a ( this . rand ) ; <nl> + - } <nl> + - } <nl> + + this . field _ 146042 _ b . addStat ( net . minecraftforge . common . FishingHooks . getFishableCategory ( f , i , j ) . stat , 1 ) ; <nl> + + return net . minecraftforge . common . FishingHooks . getRandomFishable ( this . rand , f , i , j ) ; <nl> + } <nl> + <nl> + / * * <nl> diff - - git a / src / main / java / net / minecraftforge / common / FishingHooks . java b / src / main / java / net / minecraftforge / common / FishingHooks . java <nl> new file mode 100644 <nl> index 0000000 . . f9aa18b <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / FishingHooks . java <nl> @ @ - 0 , 0 + 1 , 98 @ @ <nl> + package net . minecraftforge . common ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Random ; <nl> + import net . minecraft . entity . projectile . EntityFishHook ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . stats . StatBase ; <nl> + import net . minecraft . stats . StatList ; <nl> + import net . minecraft . util . MathHelper ; <nl> + import net . minecraft . util . WeightedRandom ; <nl> + import net . minecraft . util . WeightedRandomFishable ; <nl> + <nl> + public class FishingHooks <nl> + { <nl> + 	 private static ArrayList < WeightedRandomFishable > fish = new ArrayList < WeightedRandomFishable > ( ) ; <nl> + 	 private static ArrayList < WeightedRandomFishable > junk = new ArrayList < WeightedRandomFishable > ( ) ; <nl> + 	 private static ArrayList < WeightedRandomFishable > treasure = new ArrayList < WeightedRandomFishable > ( ) ; <nl> + <nl> + 	 public static ItemStack getRandomfishable ( Random rand , float chance ) <nl> + 	 { <nl> + 	 	 return getRandomFishable ( rand , chance , 0 , 0 ) ; <nl> + 	 } <nl> + <nl> + 	 public static ItemStack getRandomFishable ( Random rand , float chance , int luck , int speed ) <nl> + 	 { <nl> + 	 	 float junkChance = 0 . 1F - luck * 0 . 025F - speed * 0 . 01F ; <nl> + 	 	 float treasureChance = 0 . 05F + luck * 0 . 01F - speed * 0 . 01F ; <nl> + 	 	 junkChance = MathHelper . clamp _ float ( junkChance , 0 . 0F , 1 . 0F ) ; <nl> + 	 	 treasureChance = MathHelper . clamp _ float ( treasureChance , 0 . 0F , 1 . 0F ) ; <nl> + <nl> + 	 	 if ( chance < junkChance ) <nl> + 	 	 { <nl> + 	 	 	 return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , junk ) ) . func _ 150708 _ a ( rand ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 chance - = junkChance ; <nl> + 	 	 if ( chance < treasureChance ) <nl> + 	 	 { <nl> + 	 	 	 return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , treasure ) ) . func _ 150708 _ a ( rand ) ; <nl> + 	 	 } <nl> + <nl> + 	 	 chance - = treasureChance ; <nl> + 	 	 / / this is done in EntityFishHook . func _ 146033 _ f . more loot types expected ? <nl> + 	 	 { <nl> + 	 	 	 return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , fish ) ) . func _ 150708 _ a ( rand ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public static FishableCategory getFishableCategory ( float chance , int luck , int speed ) <nl> + 	 { <nl> + 	 	 float junkChance = 0 . 1F - luck * 0 . 025F - speed * 0 . 01F ; <nl> + 	 	 float treasureChance = 0 . 05F + luck * 0 . 01F - speed * 0 . 01F ; <nl> + 	 	 junkChance = MathHelper . clamp _ float ( junkChance , 0 . 0F , 1 . 0F ) ; <nl> + 	 	 treasureChance = MathHelper . clamp _ float ( treasureChance , 0 . 0F , 1 . 0F ) ; <nl> + <nl> + 	 	 if ( chance < junkChance ) <nl> + 	 	 { <nl> + 	 	 	 return FishableCategory . JUNK ; <nl> + 	 	 } <nl> + <nl> + 	 	 chance - = junkChance ; <nl> + 	 	 if ( chance < treasureChance ) <nl> + 	 	 { <nl> + 	 	 	 return FishableCategory . TREASURE ; <nl> + 	 	 } <nl> + <nl> + 	 	 chance - = treasureChance ; <nl> + 	 	 / / this is done in EntityFishHook . func _ 146033 _ f . more loot types expected ? <nl> + 	 	 { <nl> + 	 	 	 return FishableCategory . FISH ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public static enum FishableCategory <nl> + 	 { <nl> + 	 	 JUNK ( StatList . field _ 151183 _ A ) , <nl> + 	 	 TREASURE ( StatList . field _ 151184 _ B ) , <nl> + 	 	 FISH ( StatList . fishCaughtStat ) ; <nl> + <nl> + 	 	 public final StatBase stat ; <nl> + <nl> + 	 	 FishableCategory ( StatBase stat ) <nl> + 	 	 { <nl> + 	 	 	 this . stat = stat ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 public static void addFish ( WeightedRandomFishable item ) { fish . add ( item ) ; } <nl> + 	 public static void addJunk ( WeightedRandomFishable item ) { junk . add ( item ) ; } <nl> + 	 public static void addTreasure ( WeightedRandomFishable item ) { treasure . add ( item ) ; } <nl> + <nl> + 	 static <nl> + 	 { <nl> + 	 	 fish . addAll ( EntityFishHook . field _ 146036 _ f ) ; <nl> + 	 	 junk . addAll ( EntityFishHook . field _ 146039 _ d ) ; <nl> + 	 	 treasure . addAll ( EntityFishHook . field _ 146041 _ e ) ; <nl> + 	 } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / FishingHooks . java b / src / main / java / net / minecraftforge / common / FishingHooks . java 
 deleted file mode 100644 
 index 70c1018 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / common / FishingHooks . java 
 + + + / dev / null 
 @ @ - 1 , 113 + 0 , 0 @ @ 
 - package net . minecraftforge . common ; 
 - 
 - import java . util . ArrayList ; 
 - import java . util . Iterator ; 
 - import java . util . Random ; 
 - 
 - import com . google . common . base . Predicate ; 
 - 
 - import net . minecraft . entity . projectile . EntityFishHook ; 
 - import net . minecraft . item . ItemStack ; 
 - import net . minecraft . stats . StatBase ; 
 - import net . minecraft . stats . StatList ; 
 - import net . minecraft . util . MathHelper ; 
 - import net . minecraft . util . WeightedRandom ; 
 - import net . minecraft . util . WeightedRandomFishable ; 
 - 
 - public class FishingHooks 
 - { 
 - private static ArrayList < WeightedRandomFishable > fish = new ArrayList < WeightedRandomFishable > ( ) ; 
 - private static ArrayList < WeightedRandomFishable > junk = new ArrayList < WeightedRandomFishable > ( ) ; 
 - private static ArrayList < WeightedRandomFishable > treasure = new ArrayList < WeightedRandomFishable > ( ) ; 
 - 
 - public static void addFish ( WeightedRandomFishable item ) { fish . add ( item ) ; } 
 - public static void addJunk ( WeightedRandomFishable item ) { junk . add ( item ) ; } 
 - public static void addTreasure ( WeightedRandomFishable item ) { treasure . add ( item ) ; } 
 - 
 - public static void removeFish ( Predicate < WeightedRandomFishable > test ) { remove ( fish . iterator ( ) , test ) ; } 
 - public static void removeJunk ( Predicate < WeightedRandomFishable > test ) { remove ( junk . iterator ( ) , test ) ; } 
 - public static void removeTreasure ( Predicate < WeightedRandomFishable > test ) { remove ( treasure . iterator ( ) , test ) ; } 
 - 
 - public static ItemStack getRandomFishable ( Random rand , float chance ) 
 - { 
 - return getRandomFishable ( rand , chance , 0 , 0 ) ; 
 - } 
 - 
 - public static ItemStack getRandomFishable ( Random rand , float chance , int luck , int speed ) 
 - { 
 - float junkChance = 0 . 1F - luck * 0 . 025F - speed * 0 . 01F ; 
 - float treasureChance = 0 . 05F + luck * 0 . 01F - speed * 0 . 01F ; 
 - junkChance = MathHelper . clamp _ float ( junkChance , 0 . 0F , 1 . 0F ) ; 
 - treasureChance = MathHelper . clamp _ float ( treasureChance , 0 . 0F , 1 . 0F ) ; 
 - 
 - if ( chance < junkChance ) 
 - { 
 - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , junk ) ) . getItemStack ( rand ) ; 
 - } 
 - 
 - chance - = junkChance ; 
 - if ( chance < treasureChance ) 
 - { 
 - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , treasure ) ) . getItemStack ( rand ) ; 
 - } 
 - 
 - chance - = treasureChance ; 
 - / / this is done in EntityFishHook . func _ 146033 _ f . more loot types expected ? 
 - { 
 - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , fish ) ) . getItemStack ( rand ) ; 
 - } 
 - } 
 - 
 - public static FishableCategory getFishableCategory ( float chance , int luck , int speed ) 
 - { 
 - float junkChance = 0 . 1F - luck * 0 . 025F - speed * 0 . 01F ; 
 - float treasureChance = 0 . 05F + luck * 0 . 01F - speed * 0 . 01F ; 
 - junkChance = MathHelper . clamp _ float ( junkChance , 0 . 0F , 1 . 0F ) ; 
 - treasureChance = MathHelper . clamp _ float ( treasureChance , 0 . 0F , 1 . 0F ) ; 
 - 
 - if ( chance < junkChance ) 
 - { 
 - return FishableCategory . JUNK ; 
 - } 
 - 
 - chance - = junkChance ; 
 - if ( chance < treasureChance ) 
 - { 
 - return FishableCategory . TREASURE ; 
 - } 
 - 
 - chance - = treasureChance ; 
 - / / this is done in EntityFishHook . func _ 146033 _ f . more loot types expected ? 
 - { 
 - return FishableCategory . FISH ; 
 - } 
 - } 
 - 
 - private static void remove ( Iterator < WeightedRandomFishable > iter , Predicate < WeightedRandomFishable > test ) 
 - { 
 - while ( iter . hasNext ( ) ) 
 - if ( ! test . apply ( iter . next ( ) ) ) 
 - iter . remove ( ) ; 
 - } 
 - 
 - static 
 - { 
 - fish . addAll ( EntityFishHook . FISH ) ; 
 - junk . addAll ( EntityFishHook . JUNK ) ; 
 - treasure . addAll ( EntityFishHook . TREASURE ) ; 
 - } 
 - 
 - public static enum FishableCategory 
 - { 
 - JUNK ( StatList . junkFishedStat ) , 
 - TREASURE ( StatList . treasureFishedStat ) , 
 - FISH ( StatList . fishCaughtStat ) ; 
 - 
 - public final StatBase stat ; 
 - 
 - FishableCategory ( StatBase stat ) 
 - { 
 - this . stat = stat ; 
 - } 
 - } 
 - } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / projectile / EntityFishHook . java . patch b / patches / minecraft / net / minecraft / entity / projectile / EntityFishHook . java . patch 
 new file mode 100644 
 index 0000000 . . 4346d15 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / entity / projectile / EntityFishHook . java . patch 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / entity / projectile / EntityFishHook . java 
 + + + + . . / src - work / minecraft / net / minecraft / entity / projectile / EntityFishHook . java 
 + @ @ - 571 , 32 + 571 , 8 @ @ public class EntityFishHook extends Entity 
 + float f = this . worldObj . rand . nextFloat ( ) ; 
 + int i = EnchantmentHelper . func _ 151386 _ g ( this . field _ 146042 _ b ) ; 
 + int j = EnchantmentHelper . func _ 151387 _ h ( this . field _ 146042 _ b ) ; 
 + - float f1 = 0 . 1F - ( float ) i * 0 . 025F - ( float ) j * 0 . 01F ; 
 + - float f2 = 0 . 05F + ( float ) i * 0 . 01F - ( float ) j * 0 . 01F ; 
 + - f1 = MathHelper . clamp _ float ( f1 , 0 . 0F , 1 . 0F ) ; 
 + - f2 = MathHelper . clamp _ float ( f2 , 0 . 0F , 1 . 0F ) ; 
 + - 
 + - if ( f < f1 ) 
 + - { 
 + - this . field _ 146042 _ b . addStat ( StatList . field _ 151183 _ A , 1 ) ; 
 + - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( this . rand , field _ 146039 _ d ) ) . func _ 150708 _ a ( this . rand ) ; 
 + - } 
 + - else 
 + - { 
 + - f - = f1 ; 
 + - 
 + - if ( f < f2 ) 
 + - { 
 + - this . field _ 146042 _ b . addStat ( StatList . field _ 151184 _ B , 1 ) ; 
 + - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( this . rand , field _ 146041 _ e ) ) . func _ 150708 _ a ( this . rand ) ; 
 + - } 
 + - else 
 + - { 
 + - float f3 = f - f2 ; 
 + - this . field _ 146042 _ b . addStat ( StatList . fishCaughtStat , 1 ) ; 
 + - return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( this . rand , field _ 146036 _ f ) ) . func _ 150708 _ a ( this . rand ) ; 
 + - } 
 + - } 
 + + this . field _ 146042 _ b . addStat ( net . minecraftforge . common . FishingHooks . getFishableCategory ( f , i , j ) . stat , 1 ) ; 
 + + return net . minecraftforge . common . FishingHooks . getRandomFishable ( this . rand , f , i , j ) ; 
 + } 
 + 
 + / * * 
 diff - - git a / src / main / java / net / minecraftforge / common / FishingHooks . java b / src / main / java / net / minecraftforge / common / FishingHooks . java 
 new file mode 100644 
 index 0000000 . . f9aa18b 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / FishingHooks . java 
 @ @ - 0 , 0 + 1 , 98 @ @ 
 + package net . minecraftforge . common ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Random ; 
 + import net . minecraft . entity . projectile . EntityFishHook ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . stats . StatBase ; 
 + import net . minecraft . stats . StatList ; 
 + import net . minecraft . util . MathHelper ; 
 + import net . minecraft . util . WeightedRandom ; 
 + import net . minecraft . util . WeightedRandomFishable ; 
 + 
 + public class FishingHooks 
 + { 
 + 	 private static ArrayList < WeightedRandomFishable > fish = new ArrayList < WeightedRandomFishable > ( ) ; 
 + 	 private static ArrayList < WeightedRandomFishable > junk = new ArrayList < WeightedRandomFishable > ( ) ; 
 + 	 private static ArrayList < WeightedRandomFishable > treasure = new ArrayList < WeightedRandomFishable > ( ) ; 
 + 
 + 	 public static ItemStack getRandomfishable ( Random rand , float chance ) 
 + 	 { 
 + 	 	 return getRandomFishable ( rand , chance , 0 , 0 ) ; 
 + 	 } 
 + 
 + 	 public static ItemStack getRandomFishable ( Random rand , float chance , int luck , int speed ) 
 + 	 { 
 + 	 	 float junkChance = 0 . 1F - luck * 0 . 025F - speed * 0 . 01F ; 
 + 	 	 float treasureChance = 0 . 05F + luck * 0 . 01F - speed * 0 . 01F ; 
 + 	 	 junkChance = MathHelper . clamp _ float ( junkChance , 0 . 0F , 1 . 0F ) ; 
 + 	 	 treasureChance = MathHelper . clamp _ float ( treasureChance , 0 . 0F , 1 . 0F ) ; 
 + 
 + 	 	 if ( chance < junkChance ) 
 + 	 	 { 
 + 	 	 	 return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , junk ) ) . func _ 150708 _ a ( rand ) ; 
 + 	 	 } 
 + 
 + 	 	 chance - = junkChance ; 
 + 	 	 if ( chance < treasureChance ) 
 + 	 	 { 
 + 	 	 	 return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , treasure ) ) . func _ 150708 _ a ( rand ) ; 
 + 	 	 } 
 + 
 + 	 	 chance - = treasureChance ; 
 + 	 	 / / this is done in EntityFishHook . func _ 146033 _ f . more loot types expected ? 
 + 	 	 { 
 + 	 	 	 return ( ( WeightedRandomFishable ) WeightedRandom . getRandomItem ( rand , fish ) ) . func _ 150708 _ a ( rand ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public static FishableCategory getFishableCategory ( float chance , int luck , int speed ) 
 + 	 { 
 + 	 	 float junkChance = 0 . 1F - luck * 0 . 025F - speed * 0 . 01F ; 
 + 	 	 float treasureChance = 0 . 05F + luck * 0 . 01F - speed * 0 . 01F ; 
 + 	 	 junkChance = MathHelper . clamp _ float ( junkChance , 0 . 0F , 1 . 0F ) ; 
 + 	 	 treasureChance = MathHelper . clamp _ float ( treasureChance , 0 . 0F , 1 . 0F ) ; 
 + 
 + 	 	 if ( chance < junkChance ) 
 + 	 	 { 
 + 	 	 	 return FishableCategory . JUNK ; 
 + 	 	 } 
 + 
 + 	 	 chance - = junkChance ; 
 + 	 	 if ( chance < treasureChance ) 
 + 	 	 { 
 + 	 	 	 return FishableCategory . TREASURE ; 
 + 	 	 } 
 + 
 + 	 	 chance - = treasureChance ; 
 + 	 	 / / this is done in EntityFishHook . func _ 146033 _ f . more loot types expected ? 
 + 	 	 { 
 + 	 	 	 return FishableCategory . FISH ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public static enum FishableCategory 
 + 	 { 
 + 	 	 JUNK ( StatList . field _ 151183 _ A ) , 
 + 	 	 TREASURE ( StatList . field _ 151184 _ B ) , 
 + 	 	 FISH ( StatList . fishCaughtStat ) ; 
 + 
 + 	 	 public final StatBase stat ; 
 + 
 + 	 	 FishableCategory ( StatBase stat ) 
 + 	 	 { 
 + 	 	 	 this . stat = stat ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 public static void addFish ( WeightedRandomFishable item ) { fish . add ( item ) ; } 
 + 	 public static void addJunk ( WeightedRandomFishable item ) { junk . add ( item ) ; } 
 + 	 public static void addTreasure ( WeightedRandomFishable item ) { treasure . add ( item ) ; } 
 + 
 + 	 static 
 + 	 { 
 + 	 	 fish . addAll ( EntityFishHook . field _ 146036 _ f ) ; 
 + 	 	 junk . addAll ( EntityFishHook . field _ 146039 _ d ) ; 
 + 	 	 treasure . addAll ( EntityFishHook . field _ 146041 _ e ) ; 
 + 	 } 
 + }
