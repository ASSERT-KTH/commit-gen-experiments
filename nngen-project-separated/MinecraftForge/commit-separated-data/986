BLEU SCORE: 0.00957301534505126

TEST MSG: Fixed a bug with ExtendedBlockStates containing at least one IProperty and one IUnlistedProperty not allowing blocks to be placed .
GENERATED MSG: Update forge

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> index 90b08e7 . . 7168f05 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> @ @ - 26 , 7 + 26 , 21 @ @ <nl> linkedhashmap . put ( map , stateimplementation ) ; <nl> arraylist . add ( stateimplementation ) ; <nl> } <nl> - @ @ - 231 , 5 + 241 , 10 @ @ <nl> + @ @ - 135 , 6 + 145 , 13 @ @ <nl> + this . field _ 177239 _ a = p _ i45660 _ 1 _ ; <nl> + this . field _ 177237 _ b = p _ i45660 _ 2 _ ; <nl> + } <nl> + + <nl> + + protected StateImplementation ( Block blockIn , ImmutableMap propertiesIn , ImmutableTable propertyValueTable ) <nl> + + { <nl> + + this . field _ 177239 _ a = blockIn ; <nl> + + this . field _ 177237 _ b = propertiesIn ; <nl> + + this . field _ 177238 _ c = propertyValueTable ; <nl> + + } <nl> + <nl> + public Collection func _ 177227 _ a ( ) <nl> + { <nl> + @ @ - 231 , 5 + 248 , 10 @ @ <nl> { <nl> this ( p _ i45661 _ 1 _ , p _ i45661 _ 2 _ ) ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / block / state / BlockStateBase . java . patch b / patches / minecraft / net / minecraft / block / state / BlockStateBase . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 9587997 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / block / state / BlockStateBase . java . patch <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / block / state / BlockStateBase . java <nl> + + + + . . / src - work / minecraft / net / minecraft / block / state / BlockStateBase . java <nl> + @ @ - 76 , 4 + 76 , 9 @ @ <nl> + <nl> + return stringbuilder . toString ( ) ; <nl> + } <nl> + + <nl> + + public com . google . common . collect . ImmutableTable < IProperty , Comparable , IBlockState > getPropertyValueTable ( ) <nl> + + { <nl> + + return null ; <nl> + + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java . patch b / patches / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 34fba06 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java . patch <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java <nl> + @ @ - 35 , 6 + 35 , 8 @ @ <nl> + <nl> + public void func _ 177484 _ a ( int p _ 177484 _ 1 _ , int p _ 177484 _ 2 _ , int p _ 177484 _ 3 _ , IBlockState p _ 177484 _ 4 _ ) <nl> + { <nl> + + if ( p _ 177484 _ 4 _ instanceof net . minecraftforge . common . property . IExtendedBlockState ) <nl> + + p _ 177484 _ 4 _ = ( ( net . minecraftforge . common . property . IExtendedBlockState ) p _ 177484 _ 4 _ ) . getClean ( ) ; <nl> + IBlockState iblockstate1 = this . func _ 177485 _ a ( p _ 177484 _ 1 _ , p _ 177484 _ 2 _ , p _ 177484 _ 3 _ ) ; <nl> + Block block = iblockstate1 . func _ 177230 _ c ( ) ; <nl> + Block block1 = p _ 177484 _ 4 _ . func _ 177230 _ c ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> index 9677910 . . e213a7f 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ public class ExtendedBlockState extends BlockState <nl> @ Override <nl> protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) <nl> { <nl> + if ( unlistedProperties = = null | | unlistedProperties . isEmpty ( ) ) return super . createState ( block , properties , unlistedProperties ) ; <nl> return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; <nl> } <nl> <nl> @ @ - 79 , 15 + 80 , 15 @ @ public class ExtendedBlockState extends BlockState <nl> { <nl> return this ; <nl> } <nl> + Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; <nl> + map . put ( property , value ) ; <nl> if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) <nl> { / / no dynamic properties present , looking up in the normal table <nl> - return super . withProperty ( property , value ) ; <nl> + return ( IExtendedBlockState ) normalMap . get ( map ) ; <nl> } <nl> - Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; <nl> - map . put ( property , value ) ; <nl> ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; <nl> table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; <nl> - return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) ; <nl> + return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) . setMap ( this . normalMap ) ; <nl> } <nl> } <nl> <nl> @ @ - 107 , 7 + 108 , 7 @ @ public class ExtendedBlockState extends BlockState <nl> { / / no dynamic properties , lookup normal state <nl> return ( IExtendedBlockState ) normalMap . get ( getProperties ( ) ) ; <nl> } <nl> - return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) ; <nl> + return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) . setMap ( this . normalMap ) ; <nl> } <nl> <nl> public Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) <nl> @ @ - 135 , 5 + 136 , 16 @ @ public class ExtendedBlockState extends BlockState <nl> this . normalMap = map ; <nl> super . buildPropertyValueTable ( map ) ; <nl> } <nl> + <nl> + private ExtendedStateImplementation setMap ( Map < Map < IProperty , Comparable > , IBlockState > map ) <nl> + { <nl> + this . normalMap = map ; <nl> + return this ; <nl> + } <nl> + <nl> + public IBlockState getClean ( ) <nl> + { <nl> + return this . normalMap . get ( getProperties ( ) ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java <nl> index 218e427 . . 5c809ad 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java <nl> + + + b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java <nl> @ @ - 16 , 4 + 16 , 6 @ @ public interface IExtendedBlockState extends IBlockState <nl> < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) ; <nl> <nl> ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) ; <nl> + <nl> + IBlockState getClean ( ) ; <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> index 2358b93 . . c15c8f3 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> @ @ - 1 , 38 + 1 , 22 @ @ <nl> package net . minecraftforge . debug ; <nl> <nl> - import java . util . ArrayList ; <nl> - import java . util . Collection ; <nl> - import java . util . Collections ; <nl> - import java . util . List ; <nl> - <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . material . Material ; <nl> import net . minecraft . block . properties . IProperty ; <nl> + import net . minecraft . block . properties . PropertyDirection ; <nl> + import net . minecraft . block . state . BlockState ; <nl> import net . minecraft . block . state . IBlockState ; <nl> - import net . minecraft . client . Minecraft ; <nl> - import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> - import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> - import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> - import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> - import net . minecraft . client . resources . IResourceManager ; <nl> - import net . minecraft . client . resources . model . ModelBakery ; <nl> import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> - import net . minecraft . client . resources . model . ModelRotation ; <nl> import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . EntityLivingBase ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . util . BlockPos ; <nl> import net . minecraft . util . EnumFacing ; <nl> - import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . MathHelper ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> - import net . minecraftforge . client . model . Attributes ; <nl> - import net . minecraftforge . client . model . ICustomModelLoader ; <nl> - import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> - import net . minecraftforge . client . model . IModel ; <nl> - import net . minecraftforge . client . model . IModelState ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> - import net . minecraftforge . client . model . ModelLoaderRegistry ; <nl> import net . minecraftforge . client . model . b3d . B3DLoader ; <nl> import net . minecraftforge . common . property . ExtendedBlockState ; <nl> import net . minecraftforge . common . property . IExtendedBlockState ; <nl> @ @ - 44 , 9 + 28 , 6 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> - import com . google . common . base . Function ; <nl> - import com . google . common . primitives . Ints ; <nl> - <nl> @ Mod ( modid = ModelLoaderRegistryDebug . MODID , version = ModelLoaderRegistryDebug . VERSION ) <nl> <nl> public class ModelLoaderRegistryDebug <nl> @ @ - 71 , 14 + 52 , 16 @ @ public class ModelLoaderRegistryDebug <nl> <nl> public static class CustomModelBlock extends Block <nl> { <nl> + public static final PropertyDirection FACING = PropertyDirection . create ( " facing " ) ; <nl> public static final CustomModelBlock instance = new CustomModelBlock ( ) ; <nl> public static final String name = " CustomModelBlock " ; <nl> private int counter = 1 ; <nl> - private ExtendedBlockState state = new ExtendedBlockState ( this , new IProperty [ 0 ] , new IUnlistedProperty [ ] { B3DLoader . B3DFrameProperty . instance } ) ; <nl> + public ExtendedBlockState state = new ExtendedBlockState ( this , new IProperty [ ] { FACING } , new IUnlistedProperty [ ] { B3DLoader . B3DFrameProperty . instance } ) ; <nl> <nl> private CustomModelBlock ( ) <nl> { <nl> super ( Material . iron ) ; <nl> + this . setDefaultState ( this . blockState . getBaseState ( ) . withProperty ( FACING , EnumFacing . NORTH ) ) ; <nl> setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> setUnlocalizedName ( MODID + " : " + name ) ; <nl> } <nl> @ @ - 93 , 10 + 76 , 29 @ @ public class ModelLoaderRegistryDebug <nl> public boolean isVisuallyOpaque ( ) { return false ; } <nl> <nl> @ Override <nl> + public IBlockState onBlockPlaced ( World world , BlockPos pos , EnumFacing facing , float hitX , float hitY , float hitZ , int meta , EntityLivingBase placer ) <nl> + { <nl> + return this . getDefaultState ( ) . withProperty ( FACING , getFacingFromEntity ( world , pos , placer ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBlockState getStateFromMeta ( int meta ) <nl> + { <nl> + return this . getDefaultState ( ) . withProperty ( FACING , EnumFacing . getFront ( meta ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getMetaFromState ( IBlockState state ) <nl> + { <nl> + return ( ( EnumFacing ) state . getValue ( FACING ) ) . getIndex ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> { <nl> + / / Only return an IExtendedBlockState from this method and createState ( ) , otherwise block placement might break ! <nl> B3DLoader . B3DState newState = new B3DLoader . B3DState ( null , counter ) ; <nl> - return ( ( IExtendedBlockState ) this . state . getBaseState ( ) ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; <nl> + return ( ( IExtendedBlockState ) state ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 112 , 5 + 114 , 31 @ @ public class ModelLoaderRegistryDebug <nl> } <nl> return false ; <nl> } <nl> + <nl> + @ Override <nl> + public BlockState createBlockState ( ) <nl> + { <nl> + return new ExtendedBlockState ( this , new IProperty [ ] { FACING } , new IUnlistedProperty [ ] { B3DLoader . B3DFrameProperty . instance } ) ; <nl> + } <nl> + <nl> + public static EnumFacing getFacingFromEntity ( World worldIn , BlockPos clickedBlock , EntityLivingBase entityIn ) <nl> + { <nl> + if ( MathHelper . abs ( ( float ) entityIn . posX - ( float ) clickedBlock . getX ( ) ) < 2 . 0F & & MathHelper . abs ( ( float ) entityIn . posZ - ( float ) clickedBlock . getZ ( ) ) < 2 . 0F ) <nl> + { <nl> + double d0 = entityIn . posY + ( double ) entityIn . getEyeHeight ( ) ; <nl> + <nl> + if ( d0 - ( double ) clickedBlock . getY ( ) > 2 . 0D ) <nl> + { <nl> + return EnumFacing . UP ; <nl> + } <nl> + <nl> + if ( ( double ) clickedBlock . getY ( ) - d0 > 0 . 0D ) <nl> + { <nl> + return EnumFacing . DOWN ; <nl> + } <nl> + } <nl> + <nl> + return entityIn . getHorizontalFacing ( ) . getOpposite ( ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> index 4b73e67 . . 6bd2f3f 100644 <nl> - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> @ @ - 9 , 9 + 9 , 9 @ @ <nl> } , <nl> " variants " : { <nl> " normal " : [ { <nl> - " transform " : { <nl> + / * " transform " : { <nl> " rotation " : { " y " : 45 } <nl> - } <nl> + } * / <nl> } ] , <nl> " inventory " : [ { <nl> / * " transform " : { <nl> @ @ - 22 , 6 + 22 , 14 @ @ <nl> } <nl> } * / <nl> " transform " : " forge : default - block " <nl> - } ] <nl> + } ] , <nl> + " facing " : { <nl> + " down " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " x " : 90 } , <nl> + " up " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " x " : 270 } , <nl> + " north " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " } , <nl> + " south " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 180 } , <nl> + " west " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 270 } , <nl> + " east " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 90 } <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / fml b / fml <nl> index a6dc03a . . 4d46abf 160000 <nl> - - - a / fml <nl> + + + b / fml <nl> @ @ - 1 + 1 @ @ <nl> - Subproject commit a6dc03aa7e956841ce74feda3b3058934606600c <nl> + Subproject commit 4d46abf761c681010f338a27978e87cd56c5e32e <nl> diff - - git a / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch b / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch <nl> index 0ef9b48 . . 63a9622 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch <nl> @ @ - 21 , 10 + 21 , 10 @ @ <nl> this . disconnected = true ; <nl> this . mc . loadWorld ( ( WorldClient ) null ) ; <nl> <nl> - @ @ - 866 , 7 + 871 , 11 @ @ <nl> - public void handleChat ( Packet3Chat par1Packet3Chat ) <nl> - { <nl> - par1Packet3Chat = FMLNetworkHandler . handleChatMessage ( this , par1Packet3Chat ) ; <nl> + @ @ - 870 , 7 + 875 , 11 @ @ <nl> + { <nl> + return ; <nl> + } <nl> - this . mc . ingameGUI . getChatGUI ( ) . printChatMessage ( ChatMessageComponent . createFromJson ( par1Packet3Chat . message ) . toStringWithFormatting ( true ) ) ; <nl> + ClientChatReceivedEvent event = new ClientChatReceivedEvent ( par1Packet3Chat . message ) ; <nl> + if ( ! MinecraftForge . EVENT _ BUS . post ( event ) & & event . message ! = null ) <nl> @ @ - 34 , 7 + 34 , 7 @ @ <nl> } <nl> <nl> public void handleAnimation ( Packet18Animation par1Packet18Animation ) <nl> - @ @ - 1354 , 6 + 1363 , 10 @ @ <nl> + @ @ - 1358 , 6 + 1367 , 10 @ @ <nl> { <nl> tileentity . readFromNBT ( par1Packet132TileEntityData . data ) ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch <nl> index 6d2c8e1 . . a186e0f 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch <nl> @ @ - 13 , 11 + 13 , 16 @ @ <nl> public class EntityPlayerMP extends EntityPlayer implements ICrafting <nl> { <nl> private String translator = " en _ US " ; <nl> - @ @ - 165 , 18 + 171 , 10 @ @ <nl> + @ @ - 164 , 19 + 170 , 14 @ @ <nl> + super ( par2World , par3Str ) ; <nl> par4ItemInWorldManager . thisPlayerMP = this ; <nl> this . theItemInWorldManager = par4ItemInWorldManager ; <nl> - this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; <nl> + - this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; <nl> - ChunkCoordinates chunkcoordinates = par2World . getSpawnPoint ( ) ; <nl> + + if ( par1MinecraftServer = = null ) / / ToDo : Remove this in 1 . 7 , Fake players shouldn ' t be used purely client side . <nl> + + this . renderDistance = 0 ; <nl> + + else <nl> + + this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; <nl> + ChunkCoordinates chunkcoordinates = par2World . provider . getRandomizedSpawnPoint ( ) ; <nl> int i = chunkcoordinates . posX ; <nl> int j = chunkcoordinates . posZ ; <nl> @ @ - 33 , 7 + 38 , 7 @ @ <nl> <nl> this . mcServer = par1MinecraftServer ; <nl> this . stepHeight = 0 . 0F ; <nl> - @ @ - 240 , 11 + 238 , 6 @ @ <nl> + @ @ - 240 , 11 + 241 , 6 @ @ <nl> this . yOffset = 0 . 0F ; <nl> } <nl> <nl> @ @ - 45 , 7 + 50 , 7 @ @ <nl> / * * <nl> * Called to update the entity ' s position / logic . <nl> * / <nl> - @ @ - 254 , 7 + 247 , 7 @ @ <nl> + @ @ - 254 , 7 + 250 , 7 @ @ <nl> - - this . initialInvulnerability ; <nl> this . openContainer . detectAndSendChanges ( ) ; <nl> <nl> @ @ - 54 , 7 + 59 , 7 @ @ <nl> { <nl> this . closeScreen ( ) ; <nl> this . openContainer = this . inventoryContainer ; <nl> - @ @ - 290 , 7 + 283 , 10 @ @ <nl> + @ @ - 290 , 7 + 286 , 10 @ @ <nl> if ( chunkcoordintpair ! = null & & this . worldObj . blockExists ( chunkcoordintpair . chunkXPos < < 4 , 0 , chunkcoordintpair . chunkZPos < < 4 ) ) <nl> { <nl> arraylist . add ( this . worldObj . getChunkFromChunkCoords ( chunkcoordintpair . chunkXPos , chunkcoordintpair . chunkZPos ) ) ; <nl> @ @ - 66 , 7 + 71 , 7 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 311 , 6 + 307 , 7 @ @ <nl> + @ @ - 311 , 6 + 310 , 7 @ @ <nl> { <nl> Chunk chunk = ( Chunk ) iterator2 . next ( ) ; <nl> this . getServerForPlayer ( ) . getEntityTracker ( ) . func _ 85172 _ a ( this , chunk ) ; <nl> @ @ - 74 , 7 + 79 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 383 , 11 + 380 , 25 @ @ <nl> + @ @ - 383 , 11 + 383 , 25 @ @ <nl> * / <nl> public void onDeath ( DamageSource par1DamageSource ) <nl> { <nl> @ @ - 100 , 7 + 105 , 7 @ @ <nl> } <nl> <nl> Collection collection = this . worldObj . getScoreboard ( ) . func _ 96520 _ a ( ScoreObjectiveCriteria . deathCount ) ; <nl> - @ @ - 1054 , 4 + 1065 , 16 @ @ <nl> + @ @ - 1054 , 4 + 1068 , 16 @ @ <nl> { <nl> this . field _ 143005 _ bX = MinecraftServer . getSystemTimeMillis ( ) ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch b / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch <nl> index d28a430 . . 7e6a155 100644 <nl> - - - a / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch <nl> + + + b / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch <nl> @ @ - 127 , 7 + 127 , 7 @ @ <nl> { <nl> this . playerEntity . theItemInWorldManager . activateBlockOrUseItem ( this . playerEntity , worldserver , itemstack , i , j , k , l , par1Packet15Place . getXOffset ( ) , par1Packet15Place . getYOffset ( ) , par1Packet15Place . getZOffset ( ) ) ; <nl> } <nl> - @ @ - 695 , 6 + 733 , 8 @ @ <nl> + @ @ - 698 , 6 + 736 , 8 @ @ <nl> } <nl> <nl> ChatMessageComponent chatmessagecomponent = ChatMessageComponent . createFromTranslationWithSubstitutions ( " chat . type . text " , new Object [ ] { this . playerEntity . getTranslatedEntityName ( ) , s } ) ; <nl> @ @ - 136 , 7 + 136 , 7 @ @ <nl> this . mcServer . getConfigurationManager ( ) . func _ 110459 _ a ( chatmessagecomponent , false ) ; <nl> } <nl> <nl> - @ @ - 849 , 7 + 889 , 7 @ @ <nl> + @ @ - 852 , 7 + 892 , 7 @ @ <nl> return ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / FakePlayer . java b / src / main / java / net / minecraftforge / common / FakePlayer . java <nl> index 7d63255 . . 7413a7d 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / FakePlayer . java <nl> + + + b / src / main / java / net / minecraftforge / common / FakePlayer . java <nl> @ @ - 1 , 11 + 1 , 15 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> import cpw . mods . fml . common . FMLCommonHandler ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . entity . player . EntityPlayerMP ; <nl> import net . minecraft . item . ItemInWorldManager ; <nl> + import net . minecraft . network . packet . Packet204ClientInfo ; <nl> import net . minecraft . server . MinecraftServer ; <nl> + import net . minecraft . stats . StatBase ; <nl> import net . minecraft . util . ChatMessageComponent ; <nl> import net . minecraft . util . ChunkCoordinates ; <nl> + import net . minecraft . util . DamageSource ; <nl> import net . minecraft . world . World ; <nl> <nl> / / Preliminary , simple Fake Player class <nl> @ @ - 25 , 4 + 29 , 20 @ @ public class FakePlayer extends EntityPlayerMP <nl> <nl> @ Override <nl> public void sendChatToPlayer ( ChatMessageComponent chatmessagecomponent ) { } <nl> + @ Override <nl> + public void addStat ( StatBase par1StatBase , int par2 ) { } <nl> + @ Override <nl> + public void openGui ( Object mod , int modGuiId , World world , int x , int y , int z ) { } <nl> + @ Override <nl> + public boolean isEntityInvulnerable ( ) { return true ; } <nl> + @ Override <nl> + public boolean canAttackPlayer ( EntityPlayer player ) { return false ; } <nl> + @ Override <nl> + public void onDeath ( DamageSource source ) { return ; } <nl> + @ Override <nl> + public void onUpdate ( ) { return ; } <nl> + @ Override <nl> + public void travelToDimension ( int dim ) { return ; } <nl> + @ Override <nl> + public void updateClientInfo ( Packet204ClientInfo pkt ) { return ; } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 43dbe83 . . 8d98241 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import net . minecraft . item . ItemSpade ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . item . ItemSword ; <nl> import net . minecraft . network . NetServerHandler ; <nl> + import net . minecraft . network . packet . Packet ; <nl> import net . minecraft . network . packet . Packet53BlockChange ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> import net . minecraft . util . AxisAlignedBB ; <nl> @ @ - 487 , 7 + 488 , 11 @ @ public class ForgeHooks <nl> TileEntity tileentity = world . getBlockTileEntity ( x , y , z ) ; <nl> if ( tileentity ! = null ) <nl> { <nl> - entityPlayer . playerNetServerHandler . sendPacketToPlayer ( tileentity . getDescriptionPacket ( ) ) ; <nl> + Packet pkt = tileentity . getDescriptionPacket ( ) ; <nl> + if ( pkt ! = null ) <nl> + { <nl> + entityPlayer . playerNetServerHandler . sendPacketToPlayer ( pkt ) ; <nl> + } <nl> } <nl> } <nl> return event ; <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> index 5031fa6 . . 16d011f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> import net . minecraft . block . Block ; <nl> + import net . minecraft . util . StatCollector ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . event . Event ; <nl> <nl> @ @ - 25 , 8 + 26 , 19 @ @ public abstract class FluidRegistry <nl> static BiMap < String , Integer > fluidIDs = HashBiMap . create ( ) ; <nl> static BiMap < Block , Fluid > fluidBlocks ; <nl> <nl> - public static final Fluid WATER = new Fluid ( " water " ) . setBlockID ( Block . waterStill . blockID ) . setUnlocalizedName ( Block . waterStill . getUnlocalizedName ( ) ) ; <nl> - public static final Fluid LAVA = new Fluid ( " lava " ) . setBlockID ( Block . lavaStill . blockID ) . setLuminosity ( 15 ) . setDensity ( 3000 ) . setViscosity ( 6000 ) . setTemperature ( 1300 ) . setUnlocalizedName ( Block . lavaStill . getUnlocalizedName ( ) ) ; <nl> + public static final Fluid WATER = new Fluid ( " water " ) { <nl> + @ Override <nl> + public String getLocalizedName ( ) { <nl> + return StatCollector . translateToLocal ( " tile . water . name " ) ; <nl> + } <nl> + } . setBlockID ( Block . waterStill . blockID ) . setUnlocalizedName ( Block . waterStill . getUnlocalizedName ( ) ) ; <nl> + <nl> + public static final Fluid LAVA = new Fluid ( " lava " ) { <nl> + @ Override <nl> + public String getLocalizedName ( ) { <nl> + return StatCollector . translateToLocal ( " tile . lava . name " ) ; <nl> + } <nl> + } . setBlockID ( Block . lavaStill . blockID ) . setLuminosity ( 15 ) . setDensity ( 3000 ) . setViscosity ( 6000 ) . setTemperature ( 1300 ) . setUnlocalizedName ( Block . lavaStill . getUnlocalizedName ( ) ) ; <nl> <nl> public static int renderIdFluid = - 1 ; <nl>

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 index 90b08e7 . . 7168f05 100644 
 - - - a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 @ @ - 26 , 7 + 26 , 21 @ @ 
 linkedhashmap . put ( map , stateimplementation ) ; 
 arraylist . add ( stateimplementation ) ; 
 } 
 - @ @ - 231 , 5 + 241 , 10 @ @ 
 + @ @ - 135 , 6 + 145 , 13 @ @ 
 + this . field _ 177239 _ a = p _ i45660 _ 1 _ ; 
 + this . field _ 177237 _ b = p _ i45660 _ 2 _ ; 
 + } 
 + + 
 + + protected StateImplementation ( Block blockIn , ImmutableMap propertiesIn , ImmutableTable propertyValueTable ) 
 + + { 
 + + this . field _ 177239 _ a = blockIn ; 
 + + this . field _ 177237 _ b = propertiesIn ; 
 + + this . field _ 177238 _ c = propertyValueTable ; 
 + + } 
 + 
 + public Collection func _ 177227 _ a ( ) 
 + { 
 + @ @ - 231 , 5 + 248 , 10 @ @ 
 { 
 this ( p _ i45661 _ 1 _ , p _ i45661 _ 2 _ ) ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / block / state / BlockStateBase . java . patch b / patches / minecraft / net / minecraft / block / state / BlockStateBase . java . patch 
 new file mode 100644 
 index 0000000 . . 9587997 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / block / state / BlockStateBase . java . patch 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / block / state / BlockStateBase . java 
 + + + + . . / src - work / minecraft / net / minecraft / block / state / BlockStateBase . java 
 + @ @ - 76 , 4 + 76 , 9 @ @ 
 + 
 + return stringbuilder . toString ( ) ; 
 + } 
 + + 
 + + public com . google . common . collect . ImmutableTable < IProperty , Comparable , IBlockState > getPropertyValueTable ( ) 
 + + { 
 + + return null ; 
 + + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java . patch b / patches / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java . patch 
 new file mode 100644 
 index 0000000 . . 34fba06 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java . patch 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / chunk / storage / ExtendedBlockStorage . java 
 + @ @ - 35 , 6 + 35 , 8 @ @ 
 + 
 + public void func _ 177484 _ a ( int p _ 177484 _ 1 _ , int p _ 177484 _ 2 _ , int p _ 177484 _ 3 _ , IBlockState p _ 177484 _ 4 _ ) 
 + { 
 + + if ( p _ 177484 _ 4 _ instanceof net . minecraftforge . common . property . IExtendedBlockState ) 
 + + p _ 177484 _ 4 _ = ( ( net . minecraftforge . common . property . IExtendedBlockState ) p _ 177484 _ 4 _ ) . getClean ( ) ; 
 + IBlockState iblockstate1 = this . func _ 177485 _ a ( p _ 177484 _ 1 _ , p _ 177484 _ 2 _ , p _ 177484 _ 3 _ ) ; 
 + Block block = iblockstate1 . func _ 177230 _ c ( ) ; 
 + Block block1 = p _ 177484 _ 4 _ . func _ 177230 _ c ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 index 9677910 . . e213a7f 100644 
 - - - a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 @ @ - 47 , 6 + 47 , 7 @ @ public class ExtendedBlockState extends BlockState 
 @ Override 
 protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) 
 { 
 + if ( unlistedProperties = = null | | unlistedProperties . isEmpty ( ) ) return super . createState ( block , properties , unlistedProperties ) ; 
 return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; 
 } 
 
 @ @ - 79 , 15 + 80 , 15 @ @ public class ExtendedBlockState extends BlockState 
 { 
 return this ; 
 } 
 + Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; 
 + map . put ( property , value ) ; 
 if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) 
 { / / no dynamic properties present , looking up in the normal table 
 - return super . withProperty ( property , value ) ; 
 + return ( IExtendedBlockState ) normalMap . get ( map ) ; 
 } 
 - Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; 
 - map . put ( property , value ) ; 
 ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; 
 table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; 
 - return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) ; 
 + return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) . setMap ( this . normalMap ) ; 
 } 
 } 
 
 @ @ - 107 , 7 + 108 , 7 @ @ public class ExtendedBlockState extends BlockState 
 { / / no dynamic properties , lookup normal state 
 return ( IExtendedBlockState ) normalMap . get ( getProperties ( ) ) ; 
 } 
 - return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) ; 
 + return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) . setMap ( this . normalMap ) ; 
 } 
 
 public Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) 
 @ @ - 135 , 5 + 136 , 16 @ @ public class ExtendedBlockState extends BlockState 
 this . normalMap = map ; 
 super . buildPropertyValueTable ( map ) ; 
 } 
 + 
 + private ExtendedStateImplementation setMap ( Map < Map < IProperty , Comparable > , IBlockState > map ) 
 + { 
 + this . normalMap = map ; 
 + return this ; 
 + } 
 + 
 + public IBlockState getClean ( ) 
 + { 
 + return this . normalMap . get ( getProperties ( ) ) ; 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java 
 index 218e427 . . 5c809ad 100644 
 - - - a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java 
 + + + b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java 
 @ @ - 16 , 4 + 16 , 6 @ @ public interface IExtendedBlockState extends IBlockState 
 < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) ; 
 
 ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) ; 
 + 
 + IBlockState getClean ( ) ; 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 index 2358b93 . . c15c8f3 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 @ @ - 1 , 38 + 1 , 22 @ @ 
 package net . minecraftforge . debug ; 
 
 - import java . util . ArrayList ; 
 - import java . util . Collection ; 
 - import java . util . Collections ; 
 - import java . util . List ; 
 - 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . material . Material ; 
 import net . minecraft . block . properties . IProperty ; 
 + import net . minecraft . block . properties . PropertyDirection ; 
 + import net . minecraft . block . state . BlockState ; 
 import net . minecraft . block . state . IBlockState ; 
 - import net . minecraft . client . Minecraft ; 
 - import net . minecraft . client . renderer . block . model . BakedQuad ; 
 - import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 - import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 - import net . minecraft . client . renderer . vertex . VertexFormat ; 
 - import net . minecraft . client . resources . IResourceManager ; 
 - import net . minecraft . client . resources . model . ModelBakery ; 
 import net . minecraft . client . resources . model . ModelResourceLocation ; 
 - import net . minecraft . client . resources . model . ModelRotation ; 
 import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . EntityLivingBase ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . util . BlockPos ; 
 import net . minecraft . util . EnumFacing ; 
 - import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . MathHelper ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 - import net . minecraftforge . client . model . Attributes ; 
 - import net . minecraftforge . client . model . ICustomModelLoader ; 
 - import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 - import net . minecraftforge . client . model . IModel ; 
 - import net . minecraftforge . client . model . IModelState ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 - import net . minecraftforge . client . model . ModelLoaderRegistry ; 
 import net . minecraftforge . client . model . b3d . B3DLoader ; 
 import net . minecraftforge . common . property . ExtendedBlockState ; 
 import net . minecraftforge . common . property . IExtendedBlockState ; 
 @ @ - 44 , 9 + 28 , 6 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 - import com . google . common . base . Function ; 
 - import com . google . common . primitives . Ints ; 
 - 
 @ Mod ( modid = ModelLoaderRegistryDebug . MODID , version = ModelLoaderRegistryDebug . VERSION ) 
 
 public class ModelLoaderRegistryDebug 
 @ @ - 71 , 14 + 52 , 16 @ @ public class ModelLoaderRegistryDebug 
 
 public static class CustomModelBlock extends Block 
 { 
 + public static final PropertyDirection FACING = PropertyDirection . create ( " facing " ) ; 
 public static final CustomModelBlock instance = new CustomModelBlock ( ) ; 
 public static final String name = " CustomModelBlock " ; 
 private int counter = 1 ; 
 - private ExtendedBlockState state = new ExtendedBlockState ( this , new IProperty [ 0 ] , new IUnlistedProperty [ ] { B3DLoader . B3DFrameProperty . instance } ) ; 
 + public ExtendedBlockState state = new ExtendedBlockState ( this , new IProperty [ ] { FACING } , new IUnlistedProperty [ ] { B3DLoader . B3DFrameProperty . instance } ) ; 
 
 private CustomModelBlock ( ) 
 { 
 super ( Material . iron ) ; 
 + this . setDefaultState ( this . blockState . getBaseState ( ) . withProperty ( FACING , EnumFacing . NORTH ) ) ; 
 setCreativeTab ( CreativeTabs . tabBlock ) ; 
 setUnlocalizedName ( MODID + " : " + name ) ; 
 } 
 @ @ - 93 , 10 + 76 , 29 @ @ public class ModelLoaderRegistryDebug 
 public boolean isVisuallyOpaque ( ) { return false ; } 
 
 @ Override 
 + public IBlockState onBlockPlaced ( World world , BlockPos pos , EnumFacing facing , float hitX , float hitY , float hitZ , int meta , EntityLivingBase placer ) 
 + { 
 + return this . getDefaultState ( ) . withProperty ( FACING , getFacingFromEntity ( world , pos , placer ) ) ; 
 + } 
 + 
 + @ Override 
 + public IBlockState getStateFromMeta ( int meta ) 
 + { 
 + return this . getDefaultState ( ) . withProperty ( FACING , EnumFacing . getFront ( meta ) ) ; 
 + } 
 + 
 + @ Override 
 + public int getMetaFromState ( IBlockState state ) 
 + { 
 + return ( ( EnumFacing ) state . getValue ( FACING ) ) . getIndex ( ) ; 
 + } 
 + 
 + @ Override 
 public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 { 
 + / / Only return an IExtendedBlockState from this method and createState ( ) , otherwise block placement might break ! 
 B3DLoader . B3DState newState = new B3DLoader . B3DState ( null , counter ) ; 
 - return ( ( IExtendedBlockState ) this . state . getBaseState ( ) ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; 
 + return ( ( IExtendedBlockState ) state ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; 
 } 
 
 @ Override 
 @ @ - 112 , 5 + 114 , 31 @ @ public class ModelLoaderRegistryDebug 
 } 
 return false ; 
 } 
 + 
 + @ Override 
 + public BlockState createBlockState ( ) 
 + { 
 + return new ExtendedBlockState ( this , new IProperty [ ] { FACING } , new IUnlistedProperty [ ] { B3DLoader . B3DFrameProperty . instance } ) ; 
 + } 
 + 
 + public static EnumFacing getFacingFromEntity ( World worldIn , BlockPos clickedBlock , EntityLivingBase entityIn ) 
 + { 
 + if ( MathHelper . abs ( ( float ) entityIn . posX - ( float ) clickedBlock . getX ( ) ) < 2 . 0F & & MathHelper . abs ( ( float ) entityIn . posZ - ( float ) clickedBlock . getZ ( ) ) < 2 . 0F ) 
 + { 
 + double d0 = entityIn . posY + ( double ) entityIn . getEyeHeight ( ) ; 
 + 
 + if ( d0 - ( double ) clickedBlock . getY ( ) > 2 . 0D ) 
 + { 
 + return EnumFacing . UP ; 
 + } 
 + 
 + if ( ( double ) clickedBlock . getY ( ) - d0 > 0 . 0D ) 
 + { 
 + return EnumFacing . DOWN ; 
 + } 
 + } 
 + 
 + return entityIn . getHorizontalFacing ( ) . getOpposite ( ) ; 
 + } 
 } 
 } 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 index 4b73e67 . . 6bd2f3f 100644 
 - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 @ @ - 9 , 9 + 9 , 9 @ @ 
 } , 
 " variants " : { 
 " normal " : [ { 
 - " transform " : { 
 + / * " transform " : { 
 " rotation " : { " y " : 45 } 
 - } 
 + } * / 
 } ] , 
 " inventory " : [ { 
 / * " transform " : { 
 @ @ - 22 , 6 + 22 , 14 @ @ 
 } 
 } * / 
 " transform " : " forge : default - block " 
 - } ] 
 + } ] , 
 + " facing " : { 
 + " down " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " x " : 90 } , 
 + " up " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " x " : 270 } , 
 + " north " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " } , 
 + " south " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 180 } , 
 + " west " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 270 } , 
 + " east " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 90 } 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / fml b / fml 
 index a6dc03a . . 4d46abf 160000 
 - - - a / fml 
 + + + b / fml 
 @ @ - 1 + 1 @ @ 
 - Subproject commit a6dc03aa7e956841ce74feda3b3058934606600c 
 + Subproject commit 4d46abf761c681010f338a27978e87cd56c5e32e 
 diff - - git a / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch b / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch 
 index 0ef9b48 . . 63a9622 100644 
 - - - a / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch 
 @ @ - 21 , 10 + 21 , 10 @ @ 
 this . disconnected = true ; 
 this . mc . loadWorld ( ( WorldClient ) null ) ; 
 
 - @ @ - 866 , 7 + 871 , 11 @ @ 
 - public void handleChat ( Packet3Chat par1Packet3Chat ) 
 - { 
 - par1Packet3Chat = FMLNetworkHandler . handleChatMessage ( this , par1Packet3Chat ) ; 
 + @ @ - 870 , 7 + 875 , 11 @ @ 
 + { 
 + return ; 
 + } 
 - this . mc . ingameGUI . getChatGUI ( ) . printChatMessage ( ChatMessageComponent . createFromJson ( par1Packet3Chat . message ) . toStringWithFormatting ( true ) ) ; 
 + ClientChatReceivedEvent event = new ClientChatReceivedEvent ( par1Packet3Chat . message ) ; 
 + if ( ! MinecraftForge . EVENT _ BUS . post ( event ) & & event . message ! = null ) 
 @ @ - 34 , 7 + 34 , 7 @ @ 
 } 
 
 public void handleAnimation ( Packet18Animation par1Packet18Animation ) 
 - @ @ - 1354 , 6 + 1363 , 10 @ @ 
 + @ @ - 1358 , 6 + 1367 , 10 @ @ 
 { 
 tileentity . readFromNBT ( par1Packet132TileEntityData . data ) ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch 
 index 6d2c8e1 . . a186e0f 100644 
 - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch 
 @ @ - 13 , 11 + 13 , 16 @ @ 
 public class EntityPlayerMP extends EntityPlayer implements ICrafting 
 { 
 private String translator = " en _ US " ; 
 - @ @ - 165 , 18 + 171 , 10 @ @ 
 + @ @ - 164 , 19 + 170 , 14 @ @ 
 + super ( par2World , par3Str ) ; 
 par4ItemInWorldManager . thisPlayerMP = this ; 
 this . theItemInWorldManager = par4ItemInWorldManager ; 
 - this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; 
 + - this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; 
 - ChunkCoordinates chunkcoordinates = par2World . getSpawnPoint ( ) ; 
 + + if ( par1MinecraftServer = = null ) / / ToDo : Remove this in 1 . 7 , Fake players shouldn ' t be used purely client side . 
 + + this . renderDistance = 0 ; 
 + + else 
 + + this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; 
 + ChunkCoordinates chunkcoordinates = par2World . provider . getRandomizedSpawnPoint ( ) ; 
 int i = chunkcoordinates . posX ; 
 int j = chunkcoordinates . posZ ; 
 @ @ - 33 , 7 + 38 , 7 @ @ 
 
 this . mcServer = par1MinecraftServer ; 
 this . stepHeight = 0 . 0F ; 
 - @ @ - 240 , 11 + 238 , 6 @ @ 
 + @ @ - 240 , 11 + 241 , 6 @ @ 
 this . yOffset = 0 . 0F ; 
 } 
 
 @ @ - 45 , 7 + 50 , 7 @ @ 
 / * * 
 * Called to update the entity ' s position / logic . 
 * / 
 - @ @ - 254 , 7 + 247 , 7 @ @ 
 + @ @ - 254 , 7 + 250 , 7 @ @ 
 - - this . initialInvulnerability ; 
 this . openContainer . detectAndSendChanges ( ) ; 
 
 @ @ - 54 , 7 + 59 , 7 @ @ 
 { 
 this . closeScreen ( ) ; 
 this . openContainer = this . inventoryContainer ; 
 - @ @ - 290 , 7 + 283 , 10 @ @ 
 + @ @ - 290 , 7 + 286 , 10 @ @ 
 if ( chunkcoordintpair ! = null & & this . worldObj . blockExists ( chunkcoordintpair . chunkXPos < < 4 , 0 , chunkcoordintpair . chunkZPos < < 4 ) ) 
 { 
 arraylist . add ( this . worldObj . getChunkFromChunkCoords ( chunkcoordintpair . chunkXPos , chunkcoordintpair . chunkZPos ) ) ; 
 @ @ - 66 , 7 + 71 , 7 @ @ 
 } 
 } 
 
 - @ @ - 311 , 6 + 307 , 7 @ @ 
 + @ @ - 311 , 6 + 310 , 7 @ @ 
 { 
 Chunk chunk = ( Chunk ) iterator2 . next ( ) ; 
 this . getServerForPlayer ( ) . getEntityTracker ( ) . func _ 85172 _ a ( this , chunk ) ; 
 @ @ - 74 , 7 + 79 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 383 , 11 + 380 , 25 @ @ 
 + @ @ - 383 , 11 + 383 , 25 @ @ 
 * / 
 public void onDeath ( DamageSource par1DamageSource ) 
 { 
 @ @ - 100 , 7 + 105 , 7 @ @ 
 } 
 
 Collection collection = this . worldObj . getScoreboard ( ) . func _ 96520 _ a ( ScoreObjectiveCriteria . deathCount ) ; 
 - @ @ - 1054 , 4 + 1065 , 16 @ @ 
 + @ @ - 1054 , 4 + 1068 , 16 @ @ 
 { 
 this . field _ 143005 _ bX = MinecraftServer . getSystemTimeMillis ( ) ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch b / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch 
 index d28a430 . . 7e6a155 100644 
 - - - a / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch 
 + + + b / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch 
 @ @ - 127 , 7 + 127 , 7 @ @ 
 { 
 this . playerEntity . theItemInWorldManager . activateBlockOrUseItem ( this . playerEntity , worldserver , itemstack , i , j , k , l , par1Packet15Place . getXOffset ( ) , par1Packet15Place . getYOffset ( ) , par1Packet15Place . getZOffset ( ) ) ; 
 } 
 - @ @ - 695 , 6 + 733 , 8 @ @ 
 + @ @ - 698 , 6 + 736 , 8 @ @ 
 } 
 
 ChatMessageComponent chatmessagecomponent = ChatMessageComponent . createFromTranslationWithSubstitutions ( " chat . type . text " , new Object [ ] { this . playerEntity . getTranslatedEntityName ( ) , s } ) ; 
 @ @ - 136 , 7 + 136 , 7 @ @ 
 this . mcServer . getConfigurationManager ( ) . func _ 110459 _ a ( chatmessagecomponent , false ) ; 
 } 
 
 - @ @ - 849 , 7 + 889 , 7 @ @ 
 + @ @ - 852 , 7 + 892 , 7 @ @ 
 return ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / FakePlayer . java b / src / main / java / net / minecraftforge / common / FakePlayer . java 
 index 7d63255 . . 7413a7d 100644 
 - - - a / src / main / java / net / minecraftforge / common / FakePlayer . java 
 + + + b / src / main / java / net / minecraftforge / common / FakePlayer . java 
 @ @ - 1 , 11 + 1 , 15 @ @ 
 package net . minecraftforge . common ; 
 
 import cpw . mods . fml . common . FMLCommonHandler ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . entity . player . EntityPlayerMP ; 
 import net . minecraft . item . ItemInWorldManager ; 
 + import net . minecraft . network . packet . Packet204ClientInfo ; 
 import net . minecraft . server . MinecraftServer ; 
 + import net . minecraft . stats . StatBase ; 
 import net . minecraft . util . ChatMessageComponent ; 
 import net . minecraft . util . ChunkCoordinates ; 
 + import net . minecraft . util . DamageSource ; 
 import net . minecraft . world . World ; 
 
 / / Preliminary , simple Fake Player class 
 @ @ - 25 , 4 + 29 , 20 @ @ public class FakePlayer extends EntityPlayerMP 
 
 @ Override 
 public void sendChatToPlayer ( ChatMessageComponent chatmessagecomponent ) { } 
 + @ Override 
 + public void addStat ( StatBase par1StatBase , int par2 ) { } 
 + @ Override 
 + public void openGui ( Object mod , int modGuiId , World world , int x , int y , int z ) { } 
 + @ Override 
 + public boolean isEntityInvulnerable ( ) { return true ; } 
 + @ Override 
 + public boolean canAttackPlayer ( EntityPlayer player ) { return false ; } 
 + @ Override 
 + public void onDeath ( DamageSource source ) { return ; } 
 + @ Override 
 + public void onUpdate ( ) { return ; } 
 + @ Override 
 + public void travelToDimension ( int dim ) { return ; } 
 + @ Override 
 + public void updateClientInfo ( Packet204ClientInfo pkt ) { return ; } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 43dbe83 . . 8d98241 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import net . minecraft . item . ItemSpade ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . item . ItemSword ; 
 import net . minecraft . network . NetServerHandler ; 
 + import net . minecraft . network . packet . Packet ; 
 import net . minecraft . network . packet . Packet53BlockChange ; 
 import net . minecraft . tileentity . TileEntity ; 
 import net . minecraft . util . AxisAlignedBB ; 
 @ @ - 487 , 7 + 488 , 11 @ @ public class ForgeHooks 
 TileEntity tileentity = world . getBlockTileEntity ( x , y , z ) ; 
 if ( tileentity ! = null ) 
 { 
 - entityPlayer . playerNetServerHandler . sendPacketToPlayer ( tileentity . getDescriptionPacket ( ) ) ; 
 + Packet pkt = tileentity . getDescriptionPacket ( ) ; 
 + if ( pkt ! = null ) 
 + { 
 + entityPlayer . playerNetServerHandler . sendPacketToPlayer ( pkt ) ; 
 + } 
 } 
 } 
 return event ; 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 index 5031fa6 . . 16d011f 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import java . util . HashMap ; 
 import java . util . Map ; 
 
 import net . minecraft . block . Block ; 
 + import net . minecraft . util . StatCollector ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . event . Event ; 
 
 @ @ - 25 , 8 + 26 , 19 @ @ public abstract class FluidRegistry 
 static BiMap < String , Integer > fluidIDs = HashBiMap . create ( ) ; 
 static BiMap < Block , Fluid > fluidBlocks ; 
 
 - public static final Fluid WATER = new Fluid ( " water " ) . setBlockID ( Block . waterStill . blockID ) . setUnlocalizedName ( Block . waterStill . getUnlocalizedName ( ) ) ; 
 - public static final Fluid LAVA = new Fluid ( " lava " ) . setBlockID ( Block . lavaStill . blockID ) . setLuminosity ( 15 ) . setDensity ( 3000 ) . setViscosity ( 6000 ) . setTemperature ( 1300 ) . setUnlocalizedName ( Block . lavaStill . getUnlocalizedName ( ) ) ; 
 + public static final Fluid WATER = new Fluid ( " water " ) { 
 + @ Override 
 + public String getLocalizedName ( ) { 
 + return StatCollector . translateToLocal ( " tile . water . name " ) ; 
 + } 
 + } . setBlockID ( Block . waterStill . blockID ) . setUnlocalizedName ( Block . waterStill . getUnlocalizedName ( ) ) ; 
 + 
 + public static final Fluid LAVA = new Fluid ( " lava " ) { 
 + @ Override 
 + public String getLocalizedName ( ) { 
 + return StatCollector . translateToLocal ( " tile . lava . name " ) ; 
 + } 
 + } . setBlockID ( Block . lavaStill . blockID ) . setLuminosity ( 15 ) . setDensity ( 3000 ) . setViscosity ( 6000 ) . setTemperature ( 1300 ) . setUnlocalizedName ( Block . lavaStill . getUnlocalizedName ( ) ) ; 
 
 public static int renderIdFluid = - 1 ; 

