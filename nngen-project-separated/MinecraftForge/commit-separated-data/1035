BLEU SCORE: 0.02276859592073037

TEST MSG: Cleanup a lot of spammy output . Everything hidden behind environment flags now . Scale anvil image down 50 %
GENERATED MSG: New @ Mod properties to define which environment to load the mod on .

TEST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / fml / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> index c778182 . . 7f53da6 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> @ @ - 57 , 6 + 57 , 8 @ @ import java . io . FileReader ; <nl> import java . io . FileWriter ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . io . PrintStream ; <nl> + import java . io . PrintWriter ; <nl> import java . lang . Thread . UncaughtExceptionHandler ; <nl> import java . nio . IntBuffer ; <nl> import java . util . Iterator ; <nl> @ @ - 220 , 7 + 222 , 12 @ @ public class SplashProgress <nl> return " GL info " ; <nl> } <nl> } ) ; <nl> - CrashReport report = CrashReport . makeCrashReport ( new Throwable ( ) , " Loading screen debug info " ) ; <nl> + CrashReport report = CrashReport . makeCrashReport ( new Throwable ( ) <nl> + { <nl> + @ Override public String getMessage ( ) { return " This is just a prompt for computer specs to be printed . THIS IS NOT A ERROR " ; } <nl> + @ Override public void printStackTrace ( final PrintWriter s ) { s . println ( getMessage ( ) ) ; } <nl> + @ Override public void printStackTrace ( final PrintStream s ) { s . println ( getMessage ( ) ) ; } <nl> + } , " Loading screen debug info " ) ; <nl> System . out . println ( report . getCompleteReport ( ) ) ; <nl> <nl> try <nl> @ @ - 316 , 8 + 323 , 8 @ @ public class SplashProgress <nl> <nl> / / forge logo <nl> setColor ( backgroundColor ) ; <nl> - float fw = ( float ) forgeTexture . getWidth ( ) / 2 ; <nl> - float fh = ( float ) forgeTexture . getHeight ( ) / 2 ; <nl> + float fw = ( float ) forgeTexture . getWidth ( ) / 2 / 2 ; <nl> + float fh = ( float ) forgeTexture . getHeight ( ) / 2 / 2 ; <nl> if ( rotate ) <nl> { <nl> float sh = Math . max ( fw , fh ) ; <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java <nl> index ea571ba . . 50c8c57 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java <nl> @ @ - 117 , 7 + 117 , 7 @ @ public class AccessTransformer implements IClassTransformer <nl> rulesResource = Resources . getResource ( rulesFile ) ; <nl> } <nl> processATFile ( Resources . asCharSource ( rulesResource , Charsets . UTF _ 8 ) ) ; <nl> - FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer config file % s \ n " , modifiers . size ( ) , rulesFile ) ; <nl> + FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer config file % s " , modifiers . size ( ) , rulesFile ) ; <nl> } <nl> protected void processATFile ( CharSource rulesResource ) throws IOException <nl> { <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / ModAPITransformer . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / ModAPITransformer . java <nl> index bc0ede0 . . 849e73b 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / ModAPITransformer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / ModAPITransformer . java <nl> @ @ - 24 , 7 + 24 , 7 @ @ import com . google . common . collect . Sets ; <nl> <nl> public class ModAPITransformer implements IClassTransformer { <nl> <nl> - private static final boolean logDebugInfo = Boolean . valueOf ( System . getProperty ( " fml . debugAPITransformer " , " true " ) ) ; <nl> + private static final boolean logDebugInfo = Boolean . valueOf ( System . getProperty ( " fml . debugAPITransformer " , " false " ) ) ; <nl> private ListMultimap < String , ASMData > optionals ; <nl> <nl> @ Override <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java <nl> index 24770d1 . . 2174951 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import java . io . InputStreamReader ; <nl> import java . net . URL ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . Properties ; <nl> @ @ - 41 , 6 + 42 , 8 @ @ import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> import com . google . common . base . Charsets ; <nl> + import com . google . common . base . Joiner ; <nl> + import com . google . common . collect . Lists ; <nl> <nl> public class LanguageRegistry <nl> { <nl> @ @ - 273 , 13 + 276 , 15 @ @ public class LanguageRegistry <nl> private void searchZipForLanguages ( File source , Side side ) throws IOException <nl> { <nl> ZipFile zf = new ZipFile ( source ) ; <nl> + List < String > added = Lists . newArrayList ( ) ; <nl> for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) <nl> { <nl> Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; <nl> if ( matcher . matches ( ) ) <nl> { <nl> String lang = matcher . group ( 2 ) ; <nl> - FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; <nl> + / / FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; <nl> + added . add ( lang ) ; <nl> LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( zf . getInputStream ( ze ) ) ) ; <nl> / / Ensure en _ US is available to StringTranslate on the server <nl> if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) <nl> @ @ - 288 , 6 + 293 , 8 @ @ public class LanguageRegistry <nl> } <nl> } <nl> } <nl> + if ( added . size ( ) > 0 ) <nl> + FMLLog . fine ( " Found translations in % s [ % s ] " , source . getName ( ) , Joiner . on ( " , " ) . join ( added ) ) ; <nl> zf . close ( ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> index d2c567f . . 88b171c 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> @ @ - 200 , 4 + 200 , 10 @ @ public class DummyModContainer implements ModContainer <nl> { <nl> return ImmutableList . of ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean shouldLoadInEnvironment ( ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index e4e6ae4 . . 1b6bb19 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> import net . minecraftforge . fml . common . versioning . VersionParser ; <nl> import net . minecraftforge . fml . common . versioning . VersionRange ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> <nl> @ @ - 611 , 4 + 612 , 30 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> return candidate . getContainedPackages ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean shouldLoadInEnvironment ( ) <nl> + { <nl> + boolean clientSideOnly = ( Boolean ) this . descriptor . get ( " clientSideOnly " ) ; <nl> + boolean serverSideOnly = ( Boolean ) this . descriptor . get ( " serverSideOnly " ) ; <nl> + <nl> + if ( clientSideOnly & & serverSideOnly ) <nl> + throw new RuntimeException ( " Mod annotation claims to be both client and server side only ! " ) ; <nl> + <nl> + Side side = FMLCommonHandler . instance ( ) . getSide ( ) ; <nl> + <nl> + if ( clientSideOnly & & side ! = Side . CLIENT ) <nl> + { <nl> + FMLLog . info ( " Disabling mod % d it is client side only . " , getModId ( ) ) ; <nl> + return false ; <nl> + } <nl> + <nl> + if ( serverSideOnly & & side ! = Side . SERVER ) <nl> + { <nl> + FMLLog . info ( " Disabling mod % d it is server side only . " , getModId ( ) ) ; <nl> + return false ; <nl> + } <nl> + <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> index f5e6e8d . . af91db1 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> @ @ - 201 , 4 + 201 , 10 @ @ public class InjectedModContainer implements ModContainer <nl> { <nl> return wrappedContainer . getOwnedPackages ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean shouldLoadInEnvironment ( ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index de29255 . . ac51b40 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 90 , 8 + 90 , 21 @ @ public @ interface Mod <nl> boolean useMetadata ( ) default false ; <nl> <nl> / * * <nl> + * If true , this mod will not be loaded on the Dedicated Server environment . <nl> + * Will crash if both serverSideOnly and clientSideOnly are set to true . <nl> + * / <nl> + boolean clientSideOnly ( ) default false ; <nl> + <nl> + / * * <nl> + * If true , this mod will not be loaded on the Client environment . <nl> + * Will crash if both serverSideOnly and clientSideOnly are set to true . <nl> + * / <nl> + boolean serverSideOnly ( ) default false ; <nl> + <nl> + / * * <nl> * The acceptable range of minecraft versions that this mod will load and run in <nl> - * The default ( " empty string " ) indicates that only the current minecraft version is acceptable . <nl> + * The default ( " empty string " ) indicates that the currently RUNNING minecraft version is acceptable . <nl> + * This means ANY version that the end user adds the mod to . Modders PLEASS set this . <nl> * FML will refuse to run with an error if the minecraft version is not in this range across all mods . <nl> * @ return A version range as specified by the maven version range specification or the empty string <nl> * / <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> index 984b899 . . dde8dde 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> @ @ - 147 , 4 + 147 , 6 @ @ public interface ModContainer <nl> String getGuiClassName ( ) ; <nl> <nl> List < String > getOwnedPackages ( ) ; <nl> + <nl> + boolean shouldLoadInEnvironment ( ) ; <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java b / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java <nl> index db2cd06 . . 6b1a124 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ public class ModContainerFactory <nl> public static Map < Type , Constructor < ? extends ModContainer > > modTypes = Maps . newHashMap ( ) ; <nl> private static Pattern modClass = Pattern . compile ( " . * ( \ \ . | ) ( mod \ \ _ [ ^ \ \ s $ ] + ) $ " ) ; <nl> private static ModContainerFactory INSTANCE = new ModContainerFactory ( ) ; <nl> - <nl> + <nl> private ModContainerFactory ( ) { <nl> / / We always know about Mod type <nl> registerContainerType ( Type . getType ( Mod . class ) , FMLModContainer . class ) ; <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class ModContainerFactory <nl> public static ModContainerFactory instance ( ) { <nl> return INSTANCE ; <nl> } <nl> - <nl> + <nl> public void registerContainerType ( Type type , Class < ? extends ModContainer > container ) <nl> { <nl> try { <nl> @ @ - 76 , 7 + 76 , 13 @ @ public class ModContainerFactory <nl> { <nl> FMLLog . fine ( " Identified a mod of type % s ( % s ) - loading " , ann . getASMType ( ) , className ) ; <nl> try { <nl> - return modTypes . get ( ann . getASMType ( ) ) . newInstance ( className , container , ann . getValues ( ) ) ; <nl> + ModContainer ret = modTypes . get ( ann . getASMType ( ) ) . newInstance ( className , container , ann . getValues ( ) ) ; <nl> + if ( ! ret . shouldLoadInEnvironment ( ) ) <nl> + { <nl> + FMLLog . fine ( " Skipping mod % s , container opted to not load . " , className ) ; <nl> + return null ; <nl> + } <nl> + return ret ; <nl> } catch ( Exception e ) { <nl> FMLLog . log ( Level . ERROR , e , " Unable to construct % s container " , ann . getASMType ( ) . getClassName ( ) ) ; <nl> return null ;

TEST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / fml / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 index c778182 . . 7f53da6 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 @ @ - 57 , 6 + 57 , 8 @ @ import java . io . FileReader ; 
 import java . io . FileWriter ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 + import java . io . PrintStream ; 
 + import java . io . PrintWriter ; 
 import java . lang . Thread . UncaughtExceptionHandler ; 
 import java . nio . IntBuffer ; 
 import java . util . Iterator ; 
 @ @ - 220 , 7 + 222 , 12 @ @ public class SplashProgress 
 return " GL info " ; 
 } 
 } ) ; 
 - CrashReport report = CrashReport . makeCrashReport ( new Throwable ( ) , " Loading screen debug info " ) ; 
 + CrashReport report = CrashReport . makeCrashReport ( new Throwable ( ) 
 + { 
 + @ Override public String getMessage ( ) { return " This is just a prompt for computer specs to be printed . THIS IS NOT A ERROR " ; } 
 + @ Override public void printStackTrace ( final PrintWriter s ) { s . println ( getMessage ( ) ) ; } 
 + @ Override public void printStackTrace ( final PrintStream s ) { s . println ( getMessage ( ) ) ; } 
 + } , " Loading screen debug info " ) ; 
 System . out . println ( report . getCompleteReport ( ) ) ; 
 
 try 
 @ @ - 316 , 8 + 323 , 8 @ @ public class SplashProgress 
 
 / / forge logo 
 setColor ( backgroundColor ) ; 
 - float fw = ( float ) forgeTexture . getWidth ( ) / 2 ; 
 - float fh = ( float ) forgeTexture . getHeight ( ) / 2 ; 
 + float fw = ( float ) forgeTexture . getWidth ( ) / 2 / 2 ; 
 + float fh = ( float ) forgeTexture . getHeight ( ) / 2 / 2 ; 
 if ( rotate ) 
 { 
 float sh = Math . max ( fw , fh ) ; 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java 
 index ea571ba . . 50c8c57 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java 
 @ @ - 117 , 7 + 117 , 7 @ @ public class AccessTransformer implements IClassTransformer 
 rulesResource = Resources . getResource ( rulesFile ) ; 
 } 
 processATFile ( Resources . asCharSource ( rulesResource , Charsets . UTF _ 8 ) ) ; 
 - FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer config file % s \ n " , modifiers . size ( ) , rulesFile ) ; 
 + FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer config file % s " , modifiers . size ( ) , rulesFile ) ; 
 } 
 protected void processATFile ( CharSource rulesResource ) throws IOException 
 { 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / ModAPITransformer . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / ModAPITransformer . java 
 index bc0ede0 . . 849e73b 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / ModAPITransformer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / ModAPITransformer . java 
 @ @ - 24 , 7 + 24 , 7 @ @ import com . google . common . collect . Sets ; 
 
 public class ModAPITransformer implements IClassTransformer { 
 
 - private static final boolean logDebugInfo = Boolean . valueOf ( System . getProperty ( " fml . debugAPITransformer " , " true " ) ) ; 
 + private static final boolean logDebugInfo = Boolean . valueOf ( System . getProperty ( " fml . debugAPITransformer " , " false " ) ) ; 
 private ListMultimap < String , ASMData > optionals ; 
 
 @ Override 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java 
 index 24770d1 . . 2174951 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import java . io . InputStreamReader ; 
 import java . net . URL ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 + import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . Properties ; 
 @ @ - 41 , 6 + 42 , 8 @ @ import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 import com . google . common . base . Charsets ; 
 + import com . google . common . base . Joiner ; 
 + import com . google . common . collect . Lists ; 
 
 public class LanguageRegistry 
 { 
 @ @ - 273 , 13 + 276 , 15 @ @ public class LanguageRegistry 
 private void searchZipForLanguages ( File source , Side side ) throws IOException 
 { 
 ZipFile zf = new ZipFile ( source ) ; 
 + List < String > added = Lists . newArrayList ( ) ; 
 for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) 
 { 
 Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; 
 if ( matcher . matches ( ) ) 
 { 
 String lang = matcher . group ( 2 ) ; 
 - FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; 
 + / / FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; 
 + added . add ( lang ) ; 
 LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( zf . getInputStream ( ze ) ) ) ; 
 / / Ensure en _ US is available to StringTranslate on the server 
 if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) 
 @ @ - 288 , 6 + 293 , 8 @ @ public class LanguageRegistry 
 } 
 } 
 } 
 + if ( added . size ( ) > 0 ) 
 + FMLLog . fine ( " Found translations in % s [ % s ] " , source . getName ( ) , Joiner . on ( " , " ) . join ( added ) ) ; 
 zf . close ( ) ; 
 } 


NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 index d2c567f . . 88b171c 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 @ @ - 200 , 4 + 200 , 10 @ @ public class DummyModContainer implements ModContainer 
 { 
 return ImmutableList . of ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean shouldLoadInEnvironment ( ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index e4e6ae4 . . 1b6bb19 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 import net . minecraftforge . fml . common . versioning . VersionParser ; 
 import net . minecraftforge . fml . common . versioning . VersionRange ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 
 import org . apache . logging . log4j . Level ; 
 
 @ @ - 611 , 4 + 612 , 30 @ @ public class FMLModContainer implements ModContainer 
 { 
 return candidate . getContainedPackages ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean shouldLoadInEnvironment ( ) 
 + { 
 + boolean clientSideOnly = ( Boolean ) this . descriptor . get ( " clientSideOnly " ) ; 
 + boolean serverSideOnly = ( Boolean ) this . descriptor . get ( " serverSideOnly " ) ; 
 + 
 + if ( clientSideOnly & & serverSideOnly ) 
 + throw new RuntimeException ( " Mod annotation claims to be both client and server side only ! " ) ; 
 + 
 + Side side = FMLCommonHandler . instance ( ) . getSide ( ) ; 
 + 
 + if ( clientSideOnly & & side ! = Side . CLIENT ) 
 + { 
 + FMLLog . info ( " Disabling mod % d it is client side only . " , getModId ( ) ) ; 
 + return false ; 
 + } 
 + 
 + if ( serverSideOnly & & side ! = Side . SERVER ) 
 + { 
 + FMLLog . info ( " Disabling mod % d it is server side only . " , getModId ( ) ) ; 
 + return false ; 
 + } 
 + 
 + return true ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 index f5e6e8d . . af91db1 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 @ @ - 201 , 4 + 201 , 10 @ @ public class InjectedModContainer implements ModContainer 
 { 
 return wrappedContainer . getOwnedPackages ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean shouldLoadInEnvironment ( ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index de29255 . . ac51b40 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 90 , 8 + 90 , 21 @ @ public @ interface Mod 
 boolean useMetadata ( ) default false ; 
 
 / * * 
 + * If true , this mod will not be loaded on the Dedicated Server environment . 
 + * Will crash if both serverSideOnly and clientSideOnly are set to true . 
 + * / 
 + boolean clientSideOnly ( ) default false ; 
 + 
 + / * * 
 + * If true , this mod will not be loaded on the Client environment . 
 + * Will crash if both serverSideOnly and clientSideOnly are set to true . 
 + * / 
 + boolean serverSideOnly ( ) default false ; 
 + 
 + / * * 
 * The acceptable range of minecraft versions that this mod will load and run in 
 - * The default ( " empty string " ) indicates that only the current minecraft version is acceptable . 
 + * The default ( " empty string " ) indicates that the currently RUNNING minecraft version is acceptable . 
 + * This means ANY version that the end user adds the mod to . Modders PLEASS set this . 
 * FML will refuse to run with an error if the minecraft version is not in this range across all mods . 
 * @ return A version range as specified by the maven version range specification or the empty string 
 * / 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 index 984b899 . . dde8dde 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 @ @ - 147 , 4 + 147 , 6 @ @ public interface ModContainer 
 String getGuiClassName ( ) ; 
 
 List < String > getOwnedPackages ( ) ; 
 + 
 + boolean shouldLoadInEnvironment ( ) ; 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java b / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java 
 index db2cd06 . . 6b1a124 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java 
 @ @ - 32 , 7 + 32 , 7 @ @ public class ModContainerFactory 
 public static Map < Type , Constructor < ? extends ModContainer > > modTypes = Maps . newHashMap ( ) ; 
 private static Pattern modClass = Pattern . compile ( " . * ( \ \ . | ) ( mod \ \ _ [ ^ \ \ s $ ] + ) $ " ) ; 
 private static ModContainerFactory INSTANCE = new ModContainerFactory ( ) ; 
 - 
 + 
 private ModContainerFactory ( ) { 
 / / We always know about Mod type 
 registerContainerType ( Type . getType ( Mod . class ) , FMLModContainer . class ) ; 
 @ @ - 40 , 7 + 40 , 7 @ @ public class ModContainerFactory 
 public static ModContainerFactory instance ( ) { 
 return INSTANCE ; 
 } 
 - 
 + 
 public void registerContainerType ( Type type , Class < ? extends ModContainer > container ) 
 { 
 try { 
 @ @ - 76 , 7 + 76 , 13 @ @ public class ModContainerFactory 
 { 
 FMLLog . fine ( " Identified a mod of type % s ( % s ) - loading " , ann . getASMType ( ) , className ) ; 
 try { 
 - return modTypes . get ( ann . getASMType ( ) ) . newInstance ( className , container , ann . getValues ( ) ) ; 
 + ModContainer ret = modTypes . get ( ann . getASMType ( ) ) . newInstance ( className , container , ann . getValues ( ) ) ; 
 + if ( ! ret . shouldLoadInEnvironment ( ) ) 
 + { 
 + FMLLog . fine ( " Skipping mod % s , container opted to not load . " , className ) ; 
 + return null ; 
 + } 
 + return ret ; 
 } catch ( Exception e ) { 
 FMLLog . log ( Level . ERROR , e , " Unable to construct % s container " , ann . getASMType ( ) . getClassName ( ) ) ; 
 return null ;
