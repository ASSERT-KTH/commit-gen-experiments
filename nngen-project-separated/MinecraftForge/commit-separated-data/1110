BLEU SCORE: 0.02462337367222181

TEST MSG: Something I meant to add a long time ago , but it got overlooked . My apologies . Presend the ( int )
GENERATED MSG: Expose the nethandler in a few places , and pull out FMLEmbeddedChannel , exposing a utility method on it .

TEST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java . patch b / fml / patches / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java . patch <nl> new file mode 100644 <nl> index 0000000 . . ac402c1 <nl> - - - / dev / null <nl> + + + b / fml / patches / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java . patch <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java <nl> + @ @ - 2 , 11 + 2 , 14 @ @ <nl> + <nl> + import com . google . common . base . Charsets ; <nl> + import com . mojang . authlib . GameProfile ; <nl> + + <nl> + + import cpw . mods . fml . common . network . handshake . NetworkDispatcher ; <nl> + import cpw . mods . fml . relauncher . Side ; <nl> + import cpw . mods . fml . relauncher . SideOnly ; <nl> + import io . netty . buffer . ByteBuf ; <nl> + import io . netty . buffer . Unpooled ; <nl> + import io . netty . util . concurrent . GenericFutureListener ; <nl> + + <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . io . DataInputStream ; <nl> + import java . io . IOException ; <nl> + @ @ - 17 , 6 + 20 , 7 @ @ <nl> + import java . util . Map ; <nl> + import java . util . Random ; <nl> + import java . util . Map . Entry ; <nl> + + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . client . ClientBrandRetriever ; <nl> + import net . minecraft . client . Minecraft ; <nl> + @ @ - 195 , 6 + 199 , 7 @ @ <nl> + import net . minecraft . world . storage . ISaveHandler ; <nl> + import net . minecraft . world . storage . MapData ; <nl> + import net . minecraft . world . storage . MapStorage ; <nl> + + <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + @ @ - 232 , 7 + 237 , 7 @ @ <nl> + public void func _ 147282 _ a ( S01PacketJoinGame p _ 147282 _ 1 _ ) <nl> + { <nl> + this . field _ 147299 _ f . field _ 71442 _ b = new PlayerControllerMP ( this . field _ 147299 _ f , this ) ; <nl> + - this . field _ 147300 _ g = new WorldClient ( this , new WorldSettings ( 0L , p _ 147282 _ 1 _ . func _ 149198 _ e ( ) , false , p _ 147282 _ 1 _ . func _ 149195 _ d ( ) , p _ 147282 _ 1 _ . func _ 149196 _ i ( ) ) , p _ 147282 _ 1 _ . func _ 149194 _ f ( ) , p _ 147282 _ 1 _ . func _ 149192 _ g ( ) , this . field _ 147299 _ f . field _ 71424 _ I ) ; <nl> + + this . field _ 147300 _ g = new WorldClient ( this , new WorldSettings ( 0L , p _ 147282 _ 1 _ . func _ 149198 _ e ( ) , false , p _ 147282 _ 1 _ . func _ 149195 _ d ( ) , p _ 147282 _ 1 _ . func _ 149196 _ i ( ) ) , NetworkDispatcher . get ( func _ 147298 _ b ( ) ) . getOverrideDimension ( p _ 147282 _ 1 _ ) , p _ 147282 _ 1 _ . func _ 149192 _ g ( ) , this . field _ 147299 _ f . field _ 71424 _ I ) ; <nl> + this . field _ 147300 _ g . field _ 72995 _ K = true ; <nl> + this . field _ 147299 _ f . func _ 71403 _ a ( this . field _ 147300 _ g ) ; <nl> + this . field _ 147299 _ f . field _ 71439 _ g . field _ 71093 _ bK = p _ 147282 _ 1 _ . func _ 149194 _ f ( ) ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java <nl> index 2f8325e . . b0ee85f 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java <nl> @ @ - 63 , 7 + 63 , 9 @ @ public enum NetworkRegistry <nl> public static final AttributeKey < ModContainer > MOD _ CONTAINER = new AttributeKey < ModContainer > ( " fml : modContainer " ) ; <nl> public static final AttributeKey < INetHandler > NET _ HANDLER = new AttributeKey < INetHandler > ( " fml : netHandler " ) ; <nl> <nl> - public static final byte FML _ PROTOCOL = 1 ; <nl> + / / Version 1 : ServerHello only contains this value as a byte <nl> + / / Version 2 : ServerHello additionally contains a 4 byte ( int ) dimension for the logging in client <nl> + public static final byte FML _ PROTOCOL = 2 ; <nl> <nl> private NetworkRegistry ( ) <nl> { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java <nl> index 1f756f3 . . 7a64b7c 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java <nl> @ @ - 1 , 11 + 1 , 13 @ @ <nl> package cpw . mods . fml . common . network . handshake ; <nl> <nl> import java . util . List ; <nl> + <nl> import io . netty . channel . ChannelFutureListener ; <nl> import io . netty . channel . ChannelHandlerContext ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . network . NetworkRegistry ; <nl> + import cpw . mods . fml . common . network . handshake . FMLHandshakeMessage . ServerHello ; <nl> import cpw . mods . fml . common . network . internal . FMLMessage ; <nl> import cpw . mods . fml . common . network . internal . FMLNetworkHandler ; <nl> import cpw . mods . fml . common . registry . GameData ; <nl> @ @ - 49 , 7 + 51 , 14 @ @ enum FMLHandshakeClientState implements IHandshakeState < FMLHandshakeClientState > <nl> return DONE ; <nl> } <nl> <nl> - FMLLog . info ( " Server protocol version % x " , ( ( FMLHandshakeMessage . ServerHello ) msg ) . protocolVersion ( ) ) ; <nl> + ServerHello serverHelloPacket = ( FMLHandshakeMessage . ServerHello ) msg ; <nl> + FMLLog . info ( " Server protocol version % x " , serverHelloPacket . protocolVersion ( ) ) ; <nl> + if ( serverHelloPacket . protocolVersion ( ) > 1 ) <nl> + { <nl> + / / Server sent us an extra dimension for the logging in player - stash it for retrieval later <nl> + NetworkDispatcher dispatcher = ctx . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; <nl> + dispatcher . setOverrideDimension ( serverHelloPacket . overrideDim ( ) ) ; <nl> + } <nl> ctx . writeAndFlush ( new FMLHandshakeMessage . ClientHello ( ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; <nl> ctx . writeAndFlush ( new FMLHandshakeMessage . ModList ( Loader . instance ( ) . getActiveModList ( ) ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; <nl> return WAITINGSERVERDATA ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java <nl> index d11933c . . 89c7f67 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java <nl> @ @ - 15 , 6 + 15 , 7 @ @ import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> <nl> + import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> import cpw . mods . fml . common . network . ByteBufUtils ; <nl> import cpw . mods . fml . common . network . NetworkRegistry ; <nl> @ @ - 30 , 22 + 31 , 42 @ @ public abstract class FMLHandshakeMessage { <nl> } <nl> public static class ServerHello extends FMLHandshakeMessage { <nl> private byte serverProtocolVersion ; <nl> + private int overrideDimension ; <nl> + public ServerHello ( int overrideDim ) { <nl> + this . overrideDimension = overrideDim ; <nl> + } <nl> + <nl> @ Override <nl> public void toBytes ( ByteBuf buffer ) <nl> { <nl> buffer . writeByte ( NetworkRegistry . FML _ PROTOCOL ) ; <nl> + buffer . writeInt ( overrideDimension ) ; <nl> } <nl> <nl> @ Override <nl> public void fromBytes ( ByteBuf buffer ) <nl> { <nl> serverProtocolVersion = buffer . readByte ( ) ; <nl> + / / Extended dimension support during login <nl> + if ( serverProtocolVersion > 1 ) <nl> + { <nl> + overrideDimension = buffer . readInt ( ) ; <nl> + FMLLog . fine ( " Server FML protocol version % d , 4 byte dimension received % d " , serverProtocolVersion , overrideDimension ) ; <nl> + } <nl> + else <nl> + { <nl> + FMLLog . info ( " Server FML protocol version % d , no additional data received " , serverProtocolVersion ) ; <nl> + } <nl> } <nl> <nl> public byte protocolVersion ( ) <nl> { <nl> return serverProtocolVersion ; <nl> } <nl> + <nl> + public int overrideDim ( ) { <nl> + return overrideDimension ; <nl> + } <nl> } <nl> public static class ClientHello extends FMLHandshakeMessage { <nl> private byte serverProtocolVersion ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeServerState . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeServerState . java <nl> index 766e334 . . 8a61100 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeServerState . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeServerState . java <nl> @ @ - 18 , 9 + 18 , 9 @ @ enum FMLHandshakeServerState implements IHandshakeState < FMLHandshakeServerState > <nl> public FMLHandshakeServerState accept ( ChannelHandlerContext ctx , FMLHandshakeMessage msg ) <nl> { <nl> NetworkDispatcher dispatcher = ctx . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; <nl> - dispatcher . serverInitiateHandshake ( ) ; <nl> + int overrideDim = dispatcher . serverInitiateHandshake ( ) ; <nl> ctx . writeAndFlush ( FMLHandshakeMessage . makeCustomChannelRegistration ( NetworkRegistry . INSTANCE . channelNamesFor ( Side . SERVER ) ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; <nl> - ctx . writeAndFlush ( new FMLHandshakeMessage . ServerHello ( ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; <nl> + ctx . writeAndFlush ( new FMLHandshakeMessage . ServerHello ( overrideDim ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; <nl> return HELLO ; <nl> } <nl> } , <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java <nl> index 26ff077 . . 9ea04fa 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java <nl> @ @ - 79 , 6 + 79 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> private final EmbeddedChannel handshakeChannel ; <nl> private NetHandlerPlayServer serverHandler ; <nl> private INetHandler netHandler ; <nl> + private int overrideLoginDim ; <nl> <nl> public NetworkDispatcher ( NetworkManager manager ) <nl> { <nl> @ @ - 133 , 7 + 134 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> this . manager . channel ( ) . config ( ) . setAutoRead ( true ) ; <nl> } <nl> <nl> - void serverInitiateHandshake ( ) <nl> + int serverInitiateHandshake ( ) <nl> { <nl> / / Send mod salutation to the client <nl> / / This will be ignored by vanilla clients <nl> @ @ - 146 , 6 + 147 , 9 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> player . playerNetServerHandler = null ; <nl> / / manually for the manager into the PLAY state , so we can send packets later <nl> this . manager . setConnectionState ( EnumConnectionState . PLAY ) ; <nl> + <nl> + / / Return the dimension the player is in , so it can be pre - sent to the client in the ServerHello v2 packet <nl> + return player . dimension ; <nl> } <nl> <nl> void clientListenForServerHandshake ( ) <nl> @ @ - 480 , 4 + 484 , 14 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> this . handshakeChannel . attr ( FML _ DISPATCHER ) . remove ( ) ; <nl> this . manager . channel ( ) . attr ( FML _ DISPATCHER ) . remove ( ) ; <nl> } <nl> + <nl> + public void setOverrideDimension ( int overrideDim ) { <nl> + this . overrideLoginDim = overrideDim ; <nl> + FMLLog . fine ( " Received override dimension % d " , overrideDim ) ; <nl> + } <nl> + <nl> + public int getOverrideDimension ( S01PacketJoinGame p _ 147282 _ 1 _ ) { <nl> + FMLLog . fine ( " Overriding dimension : using % d " , this . overrideLoginDim ) ; <nl> + return this . overrideLoginDim ! = 0 ? this . overrideLoginDim : p _ 147282 _ 1 _ . func _ 149194 _ f ( ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> index 034809f . . 93629fa 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . launchwrapper . Launch ; <nl> + import net . minecraft . network . INetHandler ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . server . MinecraftServer ; <nl> import org . apache . logging . log4j . Level ; <nl> @ @ - 483 , 6 + 484 , 11 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> <nl> @ Override <nl> + public INetHandler getClientPlayHandler ( ) <nl> + { <nl> + return this . client . func _ 147114 _ u ( ) ; <nl> + } <nl> + @ Override <nl> public NetworkManager getClientToServerNetworkManager ( ) <nl> { <nl> return this . client . func _ 147114 _ u ( ) ! = null ? this . client . func _ 147114 _ u ( ) . func _ 147298 _ b ( ) : null ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> index 0ea0c04 . . 434d066 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import net . minecraft . inventory . IInventory ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . nbt . NBTBase ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . network . INetHandler ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . server . MinecraftServer ; <nl> import net . minecraft . world . World ; <nl> @ @ - 485 , 4 + 486 , 9 @ @ public class FMLCommonHandler <nl> { <nl> bus ( ) . post ( new PlayerEvent . ItemSmeltedEvent ( player , smelted ) ) ; <nl> } <nl> + <nl> + public INetHandler getClientPlayHandler ( ) <nl> + { <nl> + return sidedDelegate . getClientPlayHandler ( ) ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> index 3e06d7f . . 9390142 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ package cpw . mods . fml . common ; <nl> <nl> import java . util . List ; <nl> <nl> + import net . minecraft . network . INetHandler ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . server . MinecraftServer ; <nl> import cpw . mods . fml . relauncher . Side ; <nl> @ @ - 45 , 4 + 46 , 6 @ @ public interface IFMLSidedHandler <nl> void serverStopped ( ) ; <nl> <nl> NetworkManager getClientToServerNetworkManager ( ) ; <nl> + <nl> + INetHandler getClientPlayHandler ( ) ; <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java <nl> new file mode 100644 <nl> index 0000000 . . 6a78904 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + package cpw . mods . fml . common . network ; <nl> + <nl> + import net . minecraft . network . Packet ; <nl> + import io . netty . channel . ChannelHandler ; <nl> + import io . netty . channel . embedded . EmbeddedChannel ; <nl> + import cpw . mods . fml . common . Loader ; <nl> + import cpw . mods . fml . common . ModContainer ; <nl> + import cpw . mods . fml . common . network . FMLOutboundHandler . OutboundTarget ; <nl> + import cpw . mods . fml . common . network . internal . FMLProxyPacket ; <nl> + import cpw . mods . fml . relauncher . Side ; <nl> + <nl> + / * * <nl> + * Utility wrapper around { @ link EmbeddedChannel } . Provides some convenience methods <nl> + * associated with the specific needs of FML network handling . <nl> + * <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public class FMLEmbeddedChannel extends EmbeddedChannel { <nl> + public FMLEmbeddedChannel ( String channelName , Side source , ChannelHandler . . . handlers ) <nl> + { <nl> + this ( Loader . instance ( ) . activeModContainer ( ) , channelName , source , handlers ) ; <nl> + } <nl> + public FMLEmbeddedChannel ( ModContainer container , String channelName , Side source , ChannelHandler . . . handlers ) <nl> + { <nl> + super ( handlers ) ; <nl> + this . attr ( NetworkRegistry . FML _ CHANNEL ) . set ( channelName ) ; <nl> + this . attr ( NetworkRegistry . CHANNEL _ SOURCE ) . set ( source ) ; <nl> + this . attr ( NetworkRegistry . MOD _ CONTAINER ) . setIfAbsent ( container ) ; <nl> + this . pipeline ( ) . addFirst ( " fml : outbound " , new FMLOutboundHandler ( ) ) ; <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Utility method to generate a regular packet from a custom packet . Basically , it writes the packet through the <nl> + * outbound side which should have a message to message codec present ( such as { @ link FMLIndexedMessageToMessageCodec } , <nl> + * transforming from mod packets to standard { @ link FMLProxyPacket } s . <nl> + * <nl> + * This is mostly useful in cases where vanilla expects a packet , such as the TileEntity getDescriptionPacket . <nl> + * <nl> + * @ param object The inbound packet <nl> + * @ return A Packet suitable for passing to vanilla network code . <nl> + * / <nl> + public Packet generatePacketFrom ( Object object ) <nl> + { <nl> + OutboundTarget outboundTarget = attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . getAndSet ( OutboundTarget . NOWHERE ) ; <nl> + writeOutbound ( object ) ; <nl> + Packet pkt = ( Packet ) outboundMessages ( ) . poll ( ) ; <nl> + attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( outboundTarget ) ; <nl> + return pkt ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkHandshakeEstablished . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkHandshakeEstablished . java <nl> index 4d8593a . . 02dc0f7 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / NetworkHandshakeEstablished . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkHandshakeEstablished . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package cpw . mods . fml . common . network ; <nl> <nl> + import net . minecraft . network . INetHandler ; <nl> import cpw . mods . fml . common . network . handshake . NetworkDispatcher ; <nl> import cpw . mods . fml . relauncher . Side ; <nl> <nl> @ @ - 16 , 8 + 17 , 11 @ @ import cpw . mods . fml . relauncher . Side ; <nl> public class NetworkHandshakeEstablished { <nl> public final NetworkDispatcher dispatcher ; <nl> public final Side side ; <nl> - public NetworkHandshakeEstablished ( NetworkDispatcher dispatcher , Side origin ) <nl> + public final INetHandler netHandler ; <nl> + <nl> + public NetworkHandshakeEstablished ( NetworkDispatcher dispatcher , INetHandler netHandler , Side origin ) <nl> { <nl> + this . netHandler = netHandler ; <nl> this . dispatcher = dispatcher ; <nl> this . side = origin ; <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java <nl> index eb7a16a . . 801075b 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java <nl> @ @ - 14 , 7 + 14 , 6 @ @ package cpw . mods . fml . common . network ; <nl> <nl> import io . netty . channel . ChannelHandler ; <nl> import io . netty . channel . ChannelHandlerContext ; <nl> - import io . netty . channel . embedded . EmbeddedChannel ; <nl> import io . netty . handler . codec . MessageToMessageCodec ; <nl> import io . netty . util . AttributeKey ; <nl> <nl> @ @ - 25 , 6 + 24 , 7 @ @ import java . util . Set ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . network . INetHandler ; <nl> import net . minecraft . world . World ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> @ @ - 32 , 7 + 32 , 6 @ @ import com . google . common . collect . Maps ; <nl> <nl> import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> - import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> import cpw . mods . fml . common . discovery . ASMDataTable ; <nl> import cpw . mods . fml . common . network . handshake . NetworkDispatcher ; <nl> @ @ - 58 , 6 + 57 , 7 @ @ public enum NetworkRegistry <nl> public static final AttributeKey < String > FML _ CHANNEL = new AttributeKey < String > ( " fml : channelName " ) ; <nl> public static final AttributeKey < Side > CHANNEL _ SOURCE = new AttributeKey < Side > ( " fml : channelSource " ) ; <nl> public static final AttributeKey < ModContainer > MOD _ CONTAINER = new AttributeKey < ModContainer > ( " fml : modContainer " ) ; <nl> + public static final AttributeKey < INetHandler > NET _ HANDLER = new AttributeKey < INetHandler > ( " fml : netHandler " ) ; <nl> <nl> public static final byte FML _ PROTOCOL = 1 ; <nl> <nl> @ @ - 82 , 21 + 82 , 6 @ @ public enum NetworkRegistry <nl> public final double range ; <nl> public final int dimension ; <nl> } <nl> - static class FMLEmbeddedChannel extends EmbeddedChannel { <nl> - public FMLEmbeddedChannel ( String channelName , Side source , ChannelHandler . . . handlers ) <nl> - { <nl> - this ( Loader . instance ( ) . activeModContainer ( ) , channelName , source , handlers ) ; <nl> - } <nl> - public FMLEmbeddedChannel ( ModContainer container , String channelName , Side source , ChannelHandler . . . handlers ) <nl> - { <nl> - super ( handlers ) ; <nl> - this . attr ( FML _ CHANNEL ) . set ( channelName ) ; <nl> - this . attr ( CHANNEL _ SOURCE ) . set ( source ) ; <nl> - this . attr ( MOD _ CONTAINER ) . setIfAbsent ( container ) ; <nl> - this . pipeline ( ) . addFirst ( " fml : outbound " , new FMLOutboundHandler ( ) ) ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Create a new synchronous message channel pair based on netty . <nl> * There are two channels created : one for each logical side ( considered as the source of an outbound message ) <nl> @ @ - 123 , 13 + 108 , 13 @ @ public enum NetworkRegistry <nl> * @ param handlers <nl> * @ return <nl> * / <nl> - public EnumMap < Side , EmbeddedChannel > newChannel ( String name , ChannelHandler . . . handlers ) <nl> + public EnumMap < Side , FMLEmbeddedChannel > newChannel ( String name , ChannelHandler . . . handlers ) <nl> { <nl> if ( channels . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | name . startsWith ( " FML " ) ) <nl> { <nl> throw new RuntimeException ( " That channel is already registered " ) ; <nl> } <nl> - EnumMap < Side , EmbeddedChannel > result = Maps . newEnumMap ( Side . class ) ; <nl> + EnumMap < Side , FMLEmbeddedChannel > result = Maps . newEnumMap ( Side . class ) ; <nl> <nl> for ( Side side : Side . values ( ) ) <nl> { <nl> @ @ - 140 , 13 + 125 , 13 @ @ public enum NetworkRegistry <nl> return result ; <nl> } <nl> <nl> - public EnumMap < Side , EmbeddedChannel > newChannel ( ModContainer container , String name , ChannelHandler . . . handlers ) <nl> + public EnumMap < Side , FMLEmbeddedChannel > newChannel ( ModContainer container , String name , ChannelHandler . . . handlers ) <nl> { <nl> if ( channels . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | ( name . startsWith ( " FML " ) & & ! ( " FML " . equals ( container . getModId ( ) ) ) ) ) <nl> { <nl> throw new RuntimeException ( " That channel is already registered " ) ; <nl> } <nl> - EnumMap < Side , EmbeddedChannel > result = Maps . newEnumMap ( Side . class ) ; <nl> + EnumMap < Side , FMLEmbeddedChannel > result = Maps . newEnumMap ( Side . class ) ; <nl> <nl> for ( Side side : Side . values ( ) ) <nl> { <nl> @ @ - 157 , 7 + 142 , 7 @ @ public enum NetworkRegistry <nl> return result ; <nl> } <nl> <nl> - public EmbeddedChannel getChannel ( String name , Side source ) <nl> + public FMLEmbeddedChannel getChannel ( String name , Side source ) <nl> { <nl> return channels . get ( source ) . get ( name ) ; <nl> } <nl> @ @ - 428 , 7 + 413 , 7 @ @ public enum NetworkRegistry <nl> <nl> public void fireNetworkHandshake ( NetworkDispatcher networkDispatcher , Side origin ) <nl> { <nl> - NetworkHandshakeEstablished handshake = new NetworkHandshakeEstablished ( networkDispatcher , origin ) ; <nl> + NetworkHandshakeEstablished handshake = new NetworkHandshakeEstablished ( networkDispatcher , networkDispatcher . getNetHandler ( ) , origin ) ; <nl> for ( Entry < String , FMLEmbeddedChannel > channel : channels . get ( origin ) . entrySet ( ) ) <nl> { <nl> channel . getValue ( ) . pipeline ( ) . fireUserEventTriggered ( handshake ) ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java <nl> index b1f880a . . 7e00a9e 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ import java . util . concurrent . Callable ; <nl> import java . util . concurrent . TimeUnit ; <nl> import net . minecraft . entity . player . EntityPlayerMP ; <nl> import net . minecraft . network . EnumConnectionState ; <nl> + import net . minecraft . network . INetHandler ; <nl> import net . minecraft . network . NetHandlerPlayServer ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . Packet ; <nl> @ @ - 68 , 10 + 69 , 12 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> private final ServerConfigurationManager scm ; <nl> private EntityPlayerMP player ; <nl> private ConnectionState state ; <nl> + @ SuppressWarnings ( " unused " ) <nl> private ConnectionType connectionType ; <nl> private final Side side ; <nl> private final EmbeddedChannel handshakeChannel ; <nl> private NetHandlerPlayServer serverHandler ; <nl> + private INetHandler netHandler ; <nl> <nl> public NetworkDispatcher ( NetworkManager manager ) <nl> { <nl> @ @ - 134 , 6 + 137 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> this . manager . channel ( ) . pipeline ( ) . addFirst ( " fml : vanilla _ detector " , new VanillaTimeoutWaiter ( ) ) ; <nl> / / Need to start the handler here , so we can send custompayload packets <nl> serverHandler = new NetHandlerPlayServer ( scm . func _ 72365 _ p ( ) , manager , player ) ; <nl> + this . netHandler = serverHandler ; <nl> / / NULL the play server here - we restore it further on . If not , there are packets sent before the login <nl> player . field _ 71135 _ a = null ; <nl> / / manually for the manager into the PLAY state , so we can send packets later <nl> @ @ - 143 , 6 + 147 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> void clientListenForServerHandshake ( ) <nl> { <nl> manager . func _ 150723 _ a ( EnumConnectionState . PLAY ) ; <nl> + this . netHandler = FMLCommonHandler . instance ( ) . getClientPlayHandler ( ) ; <nl> this . state = ConnectionState . AWAITING _ HANDSHAKE ; <nl> } <nl> <nl> @ @ - 184 , 6 + 189 , 11 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> } <nl> } <nl> <nl> + public INetHandler getNetHandler ( ) <nl> + { <nl> + return netHandler ; <nl> + } <nl> + <nl> @ Override <nl> public void userEventTriggered ( ChannelHandlerContext ctx , Object evt ) throws Exception <nl> { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java <nl> index 4a5fcc6 . . 126cc07 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import com . google . common . collect . Lists ; <nl> import cpw . mods . fml . common . FMLContainer ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> + import cpw . mods . fml . common . network . FMLEmbeddedChannel ; <nl> import cpw . mods . fml . common . network . FMLOutboundHandler ; <nl> import cpw . mods . fml . common . network . FMLOutboundHandler . OutboundTarget ; <nl> import cpw . mods . fml . common . network . NetworkRegistry ; <nl> @ @ - 50 , 7 + 51 , 7 @ @ public class FMLNetworkHandler <nl> { <nl> public static final int READ _ TIMEOUT = Integers . parseInt ( System . getProperty ( " fml . readTimeout " , " 30 " ) , 30 ) ; <nl> public static final int LOGIN _ TIMEOUT = Integers . parseInt ( System . getProperty ( " fml . loginTimeout " , " 600 " ) , 600 ) ; <nl> - private static EnumMap < Side , EmbeddedChannel > channelPair ; <nl> + private static EnumMap < Side , FMLEmbeddedChannel > channelPair ; <nl> <nl> / * private static final int FML _ HASH = Hashing . murmur3 _ 32 ( ) . hashString ( " FML " ) . asInt ( ) ; <nl> private static final int PROTOCOL _ VERSION = 0x2 ; <nl> @ @ - 472 , 11 + 473 , 7 @ @ public class FMLNetworkHandler <nl> return null ; <nl> } <nl> <nl> - EmbeddedChannel embeddedChannel = channelPair . get ( Side . SERVER ) ; <nl> - embeddedChannel . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( OutboundTarget . NOWHERE ) ; <nl> - embeddedChannel . writeOutbound ( new FMLMessage . EntitySpawnMessage ( er , entity , er . getContainer ( ) ) ) ; <nl> - FMLProxyPacket result = ( FMLProxyPacket ) embeddedChannel . outboundMessages ( ) . poll ( ) ; <nl> - return result ; <nl> + return channelPair . get ( Side . SERVER ) . generatePacketFrom ( new FMLMessage . EntitySpawnMessage ( er , entity , er . getContainer ( ) ) ) ; <nl> } <nl> <nl> public static String checkModList ( FMLHandshakeMessage . ModList modListPacket , Side side ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java <nl> index e071443 . . 69d5f58 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ public class FMLProxyPacket extends Packet { <nl> { <nl> this . netHandler = inethandler ; <nl> EmbeddedChannel internalChannel = NetworkRegistry . INSTANCE . getChannel ( this . channel , this . target ) ; <nl> + internalChannel . attr ( NetworkRegistry . NET _ HANDLER ) . set ( this . netHandler ) ; <nl> if ( internalChannel ! = null ) <nl> { <nl> internalChannel . writeInbound ( this ) ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> index 3a01bcd . . 78d5d23 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . util . regex . Pattern ; <nl> import java . util . zip . ZipEntry ; <nl> import java . util . zip . ZipFile ; <nl> <nl> + import net . minecraft . network . INetHandler ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . server . MinecraftServer ; <nl> import net . minecraft . util . StringTranslate ; <nl> @ @ - 215 , 4 + 216 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> throw new RuntimeException ( " Missing " ) ; <nl> } <nl> + @ Override <nl> + public INetHandler getClientPlayHandler ( ) <nl> + { <nl> + return null ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java . patch b / fml / patches / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java . patch 
 new file mode 100644 
 index 0000000 . . ac402c1 
 - - - / dev / null 
 + + + b / fml / patches / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java . patch 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / network / NetHandlerPlayClient . java 
 + @ @ - 2 , 11 + 2 , 14 @ @ 
 + 
 + import com . google . common . base . Charsets ; 
 + import com . mojang . authlib . GameProfile ; 
 + + 
 + + import cpw . mods . fml . common . network . handshake . NetworkDispatcher ; 
 + import cpw . mods . fml . relauncher . Side ; 
 + import cpw . mods . fml . relauncher . SideOnly ; 
 + import io . netty . buffer . ByteBuf ; 
 + import io . netty . buffer . Unpooled ; 
 + import io . netty . util . concurrent . GenericFutureListener ; 
 + + 
 + import java . io . ByteArrayInputStream ; 
 + import java . io . DataInputStream ; 
 + import java . io . IOException ; 
 + @ @ - 17 , 6 + 20 , 7 @ @ 
 + import java . util . Map ; 
 + import java . util . Random ; 
 + import java . util . Map . Entry ; 
 + + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . client . ClientBrandRetriever ; 
 + import net . minecraft . client . Minecraft ; 
 + @ @ - 195 , 6 + 199 , 7 @ @ 
 + import net . minecraft . world . storage . ISaveHandler ; 
 + import net . minecraft . world . storage . MapData ; 
 + import net . minecraft . world . storage . MapStorage ; 
 + + 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + @ @ - 232 , 7 + 237 , 7 @ @ 
 + public void func _ 147282 _ a ( S01PacketJoinGame p _ 147282 _ 1 _ ) 
 + { 
 + this . field _ 147299 _ f . field _ 71442 _ b = new PlayerControllerMP ( this . field _ 147299 _ f , this ) ; 
 + - this . field _ 147300 _ g = new WorldClient ( this , new WorldSettings ( 0L , p _ 147282 _ 1 _ . func _ 149198 _ e ( ) , false , p _ 147282 _ 1 _ . func _ 149195 _ d ( ) , p _ 147282 _ 1 _ . func _ 149196 _ i ( ) ) , p _ 147282 _ 1 _ . func _ 149194 _ f ( ) , p _ 147282 _ 1 _ . func _ 149192 _ g ( ) , this . field _ 147299 _ f . field _ 71424 _ I ) ; 
 + + this . field _ 147300 _ g = new WorldClient ( this , new WorldSettings ( 0L , p _ 147282 _ 1 _ . func _ 149198 _ e ( ) , false , p _ 147282 _ 1 _ . func _ 149195 _ d ( ) , p _ 147282 _ 1 _ . func _ 149196 _ i ( ) ) , NetworkDispatcher . get ( func _ 147298 _ b ( ) ) . getOverrideDimension ( p _ 147282 _ 1 _ ) , p _ 147282 _ 1 _ . func _ 149192 _ g ( ) , this . field _ 147299 _ f . field _ 71424 _ I ) ; 
 + this . field _ 147300 _ g . field _ 72995 _ K = true ; 
 + this . field _ 147299 _ f . func _ 71403 _ a ( this . field _ 147300 _ g ) ; 
 + this . field _ 147299 _ f . field _ 71439 _ g . field _ 71093 _ bK = p _ 147282 _ 1 _ . func _ 149194 _ f ( ) ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java 
 index 2f8325e . . b0ee85f 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java 
 @ @ - 63 , 7 + 63 , 9 @ @ public enum NetworkRegistry 
 public static final AttributeKey < ModContainer > MOD _ CONTAINER = new AttributeKey < ModContainer > ( " fml : modContainer " ) ; 
 public static final AttributeKey < INetHandler > NET _ HANDLER = new AttributeKey < INetHandler > ( " fml : netHandler " ) ; 
 
 - public static final byte FML _ PROTOCOL = 1 ; 
 + / / Version 1 : ServerHello only contains this value as a byte 
 + / / Version 2 : ServerHello additionally contains a 4 byte ( int ) dimension for the logging in client 
 + public static final byte FML _ PROTOCOL = 2 ; 
 
 private NetworkRegistry ( ) 
 { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java 
 index 1f756f3 . . 7a64b7c 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java 
 @ @ - 1 , 11 + 1 , 13 @ @ 
 package cpw . mods . fml . common . network . handshake ; 
 
 import java . util . List ; 
 + 
 import io . netty . channel . ChannelFutureListener ; 
 import io . netty . channel . ChannelHandlerContext ; 
 import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . network . NetworkRegistry ; 
 + import cpw . mods . fml . common . network . handshake . FMLHandshakeMessage . ServerHello ; 
 import cpw . mods . fml . common . network . internal . FMLMessage ; 
 import cpw . mods . fml . common . network . internal . FMLNetworkHandler ; 
 import cpw . mods . fml . common . registry . GameData ; 
 @ @ - 49 , 7 + 51 , 14 @ @ enum FMLHandshakeClientState implements IHandshakeState < FMLHandshakeClientState > 
 return DONE ; 
 } 
 
 - FMLLog . info ( " Server protocol version % x " , ( ( FMLHandshakeMessage . ServerHello ) msg ) . protocolVersion ( ) ) ; 
 + ServerHello serverHelloPacket = ( FMLHandshakeMessage . ServerHello ) msg ; 
 + FMLLog . info ( " Server protocol version % x " , serverHelloPacket . protocolVersion ( ) ) ; 
 + if ( serverHelloPacket . protocolVersion ( ) > 1 ) 
 + { 
 + / / Server sent us an extra dimension for the logging in player - stash it for retrieval later 
 + NetworkDispatcher dispatcher = ctx . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; 
 + dispatcher . setOverrideDimension ( serverHelloPacket . overrideDim ( ) ) ; 
 + } 
 ctx . writeAndFlush ( new FMLHandshakeMessage . ClientHello ( ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; 
 ctx . writeAndFlush ( new FMLHandshakeMessage . ModList ( Loader . instance ( ) . getActiveModList ( ) ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; 
 return WAITINGSERVERDATA ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java 
 index d11933c . . 89c7f67 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java 
 @ @ - 15 , 6 + 15 , 7 @ @ import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 
 + import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . ModContainer ; 
 import cpw . mods . fml . common . network . ByteBufUtils ; 
 import cpw . mods . fml . common . network . NetworkRegistry ; 
 @ @ - 30 , 22 + 31 , 42 @ @ public abstract class FMLHandshakeMessage { 
 } 
 public static class ServerHello extends FMLHandshakeMessage { 
 private byte serverProtocolVersion ; 
 + private int overrideDimension ; 
 + public ServerHello ( int overrideDim ) { 
 + this . overrideDimension = overrideDim ; 
 + } 
 + 
 @ Override 
 public void toBytes ( ByteBuf buffer ) 
 { 
 buffer . writeByte ( NetworkRegistry . FML _ PROTOCOL ) ; 
 + buffer . writeInt ( overrideDimension ) ; 
 } 
 
 @ Override 
 public void fromBytes ( ByteBuf buffer ) 
 { 
 serverProtocolVersion = buffer . readByte ( ) ; 
 + / / Extended dimension support during login 
 + if ( serverProtocolVersion > 1 ) 
 + { 
 + overrideDimension = buffer . readInt ( ) ; 
 + FMLLog . fine ( " Server FML protocol version % d , 4 byte dimension received % d " , serverProtocolVersion , overrideDimension ) ; 
 + } 
 + else 
 + { 
 + FMLLog . info ( " Server FML protocol version % d , no additional data received " , serverProtocolVersion ) ; 
 + } 
 } 
 
 public byte protocolVersion ( ) 
 { 
 return serverProtocolVersion ; 
 } 
 + 
 + public int overrideDim ( ) { 
 + return overrideDimension ; 
 + } 
 } 
 public static class ClientHello extends FMLHandshakeMessage { 
 private byte serverProtocolVersion ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeServerState . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeServerState . java 
 index 766e334 . . 8a61100 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeServerState . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeServerState . java 
 @ @ - 18 , 9 + 18 , 9 @ @ enum FMLHandshakeServerState implements IHandshakeState < FMLHandshakeServerState > 
 public FMLHandshakeServerState accept ( ChannelHandlerContext ctx , FMLHandshakeMessage msg ) 
 { 
 NetworkDispatcher dispatcher = ctx . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; 
 - dispatcher . serverInitiateHandshake ( ) ; 
 + int overrideDim = dispatcher . serverInitiateHandshake ( ) ; 
 ctx . writeAndFlush ( FMLHandshakeMessage . makeCustomChannelRegistration ( NetworkRegistry . INSTANCE . channelNamesFor ( Side . SERVER ) ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; 
 - ctx . writeAndFlush ( new FMLHandshakeMessage . ServerHello ( ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; 
 + ctx . writeAndFlush ( new FMLHandshakeMessage . ServerHello ( overrideDim ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; 
 return HELLO ; 
 } 
 } , 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java 
 index 26ff077 . . 9ea04fa 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java 
 @ @ - 79 , 6 + 79 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 private final EmbeddedChannel handshakeChannel ; 
 private NetHandlerPlayServer serverHandler ; 
 private INetHandler netHandler ; 
 + private int overrideLoginDim ; 
 
 public NetworkDispatcher ( NetworkManager manager ) 
 { 
 @ @ - 133 , 7 + 134 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 this . manager . channel ( ) . config ( ) . setAutoRead ( true ) ; 
 } 
 
 - void serverInitiateHandshake ( ) 
 + int serverInitiateHandshake ( ) 
 { 
 / / Send mod salutation to the client 
 / / This will be ignored by vanilla clients 
 @ @ - 146 , 6 + 147 , 9 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 player . playerNetServerHandler = null ; 
 / / manually for the manager into the PLAY state , so we can send packets later 
 this . manager . setConnectionState ( EnumConnectionState . PLAY ) ; 
 + 
 + / / Return the dimension the player is in , so it can be pre - sent to the client in the ServerHello v2 packet 
 + return player . dimension ; 
 } 
 
 void clientListenForServerHandshake ( ) 
 @ @ - 480 , 4 + 484 , 14 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 this . handshakeChannel . attr ( FML _ DISPATCHER ) . remove ( ) ; 
 this . manager . channel ( ) . attr ( FML _ DISPATCHER ) . remove ( ) ; 
 } 
 + 
 + public void setOverrideDimension ( int overrideDim ) { 
 + this . overrideLoginDim = overrideDim ; 
 + FMLLog . fine ( " Received override dimension % d " , overrideDim ) ; 
 + } 
 + 
 + public int getOverrideDimension ( S01PacketJoinGame p _ 147282 _ 1 _ ) { 
 + FMLLog . fine ( " Overriding dimension : using % d " , this . overrideLoginDim ) ; 
 + return this . overrideLoginDim ! = 0 ? this . overrideLoginDim : p _ 147282 _ 1 _ . func _ 149194 _ f ( ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 index 034809f . . 93629fa 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraft . crash . CrashReport ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . launchwrapper . Launch ; 
 + import net . minecraft . network . INetHandler ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . server . MinecraftServer ; 
 import org . apache . logging . log4j . Level ; 
 @ @ - 483 , 6 + 484 , 11 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 
 @ Override 
 + public INetHandler getClientPlayHandler ( ) 
 + { 
 + return this . client . func _ 147114 _ u ( ) ; 
 + } 
 + @ Override 
 public NetworkManager getClientToServerNetworkManager ( ) 
 { 
 return this . client . func _ 147114 _ u ( ) ! = null ? this . client . func _ 147114 _ u ( ) . func _ 147298 _ b ( ) : null ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 index 0ea0c04 . . 434d066 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import net . minecraft . inventory . IInventory ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . nbt . NBTBase ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . network . INetHandler ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . server . MinecraftServer ; 
 import net . minecraft . world . World ; 
 @ @ - 485 , 4 + 486 , 9 @ @ public class FMLCommonHandler 
 { 
 bus ( ) . post ( new PlayerEvent . ItemSmeltedEvent ( player , smelted ) ) ; 
 } 
 + 
 + public INetHandler getClientPlayHandler ( ) 
 + { 
 + return sidedDelegate . getClientPlayHandler ( ) ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 index 3e06d7f . . 9390142 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 @ @ - 14 , 6 + 14 , 7 @ @ package cpw . mods . fml . common ; 
 
 import java . util . List ; 
 
 + import net . minecraft . network . INetHandler ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . server . MinecraftServer ; 
 import cpw . mods . fml . relauncher . Side ; 
 @ @ - 45 , 4 + 46 , 6 @ @ public interface IFMLSidedHandler 
 void serverStopped ( ) ; 
 
 NetworkManager getClientToServerNetworkManager ( ) ; 
 + 
 + INetHandler getClientPlayHandler ( ) ; 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java 
 new file mode 100644 
 index 0000000 . . 6a78904 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + package cpw . mods . fml . common . network ; 
 + 
 + import net . minecraft . network . Packet ; 
 + import io . netty . channel . ChannelHandler ; 
 + import io . netty . channel . embedded . EmbeddedChannel ; 
 + import cpw . mods . fml . common . Loader ; 
 + import cpw . mods . fml . common . ModContainer ; 
 + import cpw . mods . fml . common . network . FMLOutboundHandler . OutboundTarget ; 
 + import cpw . mods . fml . common . network . internal . FMLProxyPacket ; 
 + import cpw . mods . fml . relauncher . Side ; 
 + 
 + / * * 
 + * Utility wrapper around { @ link EmbeddedChannel } . Provides some convenience methods 
 + * associated with the specific needs of FML network handling . 
 + * 
 + * @ author cpw 
 + * 
 + * / 
 + public class FMLEmbeddedChannel extends EmbeddedChannel { 
 + public FMLEmbeddedChannel ( String channelName , Side source , ChannelHandler . . . handlers ) 
 + { 
 + this ( Loader . instance ( ) . activeModContainer ( ) , channelName , source , handlers ) ; 
 + } 
 + public FMLEmbeddedChannel ( ModContainer container , String channelName , Side source , ChannelHandler . . . handlers ) 
 + { 
 + super ( handlers ) ; 
 + this . attr ( NetworkRegistry . FML _ CHANNEL ) . set ( channelName ) ; 
 + this . attr ( NetworkRegistry . CHANNEL _ SOURCE ) . set ( source ) ; 
 + this . attr ( NetworkRegistry . MOD _ CONTAINER ) . setIfAbsent ( container ) ; 
 + this . pipeline ( ) . addFirst ( " fml : outbound " , new FMLOutboundHandler ( ) ) ; 
 + } 
 + 
 + 
 + / * * 
 + * Utility method to generate a regular packet from a custom packet . Basically , it writes the packet through the 
 + * outbound side which should have a message to message codec present ( such as { @ link FMLIndexedMessageToMessageCodec } , 
 + * transforming from mod packets to standard { @ link FMLProxyPacket } s . 
 + * 
 + * This is mostly useful in cases where vanilla expects a packet , such as the TileEntity getDescriptionPacket . 
 + * 
 + * @ param object The inbound packet 
 + * @ return A Packet suitable for passing to vanilla network code . 
 + * / 
 + public Packet generatePacketFrom ( Object object ) 
 + { 
 + OutboundTarget outboundTarget = attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . getAndSet ( OutboundTarget . NOWHERE ) ; 
 + writeOutbound ( object ) ; 
 + Packet pkt = ( Packet ) outboundMessages ( ) . poll ( ) ; 
 + attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( outboundTarget ) ; 
 + return pkt ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkHandshakeEstablished . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkHandshakeEstablished . java 
 index 4d8593a . . 02dc0f7 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / NetworkHandshakeEstablished . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkHandshakeEstablished . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package cpw . mods . fml . common . network ; 
 
 + import net . minecraft . network . INetHandler ; 
 import cpw . mods . fml . common . network . handshake . NetworkDispatcher ; 
 import cpw . mods . fml . relauncher . Side ; 
 
 @ @ - 16 , 8 + 17 , 11 @ @ import cpw . mods . fml . relauncher . Side ; 
 public class NetworkHandshakeEstablished { 
 public final NetworkDispatcher dispatcher ; 
 public final Side side ; 
 - public NetworkHandshakeEstablished ( NetworkDispatcher dispatcher , Side origin ) 
 + public final INetHandler netHandler ; 
 + 
 + public NetworkHandshakeEstablished ( NetworkDispatcher dispatcher , INetHandler netHandler , Side origin ) 
 { 
 + this . netHandler = netHandler ; 
 this . dispatcher = dispatcher ; 
 this . side = origin ; 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java 
 index eb7a16a . . 801075b 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java 
 @ @ - 14 , 7 + 14 , 6 @ @ package cpw . mods . fml . common . network ; 
 
 import io . netty . channel . ChannelHandler ; 
 import io . netty . channel . ChannelHandlerContext ; 
 - import io . netty . channel . embedded . EmbeddedChannel ; 
 import io . netty . handler . codec . MessageToMessageCodec ; 
 import io . netty . util . AttributeKey ; 
 
 @ @ - 25 , 6 + 24 , 7 @ @ import java . util . Set ; 
 import org . apache . logging . log4j . Level ; 
 
 import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . network . INetHandler ; 
 import net . minecraft . world . World ; 
 
 import com . google . common . collect . ImmutableMap ; 
 @ @ - 32 , 7 + 32 , 6 @ @ import com . google . common . collect . Maps ; 
 
 import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 - import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 import cpw . mods . fml . common . discovery . ASMDataTable ; 
 import cpw . mods . fml . common . network . handshake . NetworkDispatcher ; 
 @ @ - 58 , 6 + 57 , 7 @ @ public enum NetworkRegistry 
 public static final AttributeKey < String > FML _ CHANNEL = new AttributeKey < String > ( " fml : channelName " ) ; 
 public static final AttributeKey < Side > CHANNEL _ SOURCE = new AttributeKey < Side > ( " fml : channelSource " ) ; 
 public static final AttributeKey < ModContainer > MOD _ CONTAINER = new AttributeKey < ModContainer > ( " fml : modContainer " ) ; 
 + public static final AttributeKey < INetHandler > NET _ HANDLER = new AttributeKey < INetHandler > ( " fml : netHandler " ) ; 
 
 public static final byte FML _ PROTOCOL = 1 ; 
 
 @ @ - 82 , 21 + 82 , 6 @ @ public enum NetworkRegistry 
 public final double range ; 
 public final int dimension ; 
 } 
 - static class FMLEmbeddedChannel extends EmbeddedChannel { 
 - public FMLEmbeddedChannel ( String channelName , Side source , ChannelHandler . . . handlers ) 
 - { 
 - this ( Loader . instance ( ) . activeModContainer ( ) , channelName , source , handlers ) ; 
 - } 
 - public FMLEmbeddedChannel ( ModContainer container , String channelName , Side source , ChannelHandler . . . handlers ) 
 - { 
 - super ( handlers ) ; 
 - this . attr ( FML _ CHANNEL ) . set ( channelName ) ; 
 - this . attr ( CHANNEL _ SOURCE ) . set ( source ) ; 
 - this . attr ( MOD _ CONTAINER ) . setIfAbsent ( container ) ; 
 - this . pipeline ( ) . addFirst ( " fml : outbound " , new FMLOutboundHandler ( ) ) ; 
 - } 
 - } 
 - 
 / * * 
 * Create a new synchronous message channel pair based on netty . 
 * There are two channels created : one for each logical side ( considered as the source of an outbound message ) 
 @ @ - 123 , 13 + 108 , 13 @ @ public enum NetworkRegistry 
 * @ param handlers 
 * @ return 
 * / 
 - public EnumMap < Side , EmbeddedChannel > newChannel ( String name , ChannelHandler . . . handlers ) 
 + public EnumMap < Side , FMLEmbeddedChannel > newChannel ( String name , ChannelHandler . . . handlers ) 
 { 
 if ( channels . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | name . startsWith ( " FML " ) ) 
 { 
 throw new RuntimeException ( " That channel is already registered " ) ; 
 } 
 - EnumMap < Side , EmbeddedChannel > result = Maps . newEnumMap ( Side . class ) ; 
 + EnumMap < Side , FMLEmbeddedChannel > result = Maps . newEnumMap ( Side . class ) ; 
 
 for ( Side side : Side . values ( ) ) 
 { 
 @ @ - 140 , 13 + 125 , 13 @ @ public enum NetworkRegistry 
 return result ; 
 } 
 
 - public EnumMap < Side , EmbeddedChannel > newChannel ( ModContainer container , String name , ChannelHandler . . . handlers ) 
 + public EnumMap < Side , FMLEmbeddedChannel > newChannel ( ModContainer container , String name , ChannelHandler . . . handlers ) 
 { 
 if ( channels . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | ( name . startsWith ( " FML " ) & & ! ( " FML " . equals ( container . getModId ( ) ) ) ) ) 
 { 
 throw new RuntimeException ( " That channel is already registered " ) ; 
 } 
 - EnumMap < Side , EmbeddedChannel > result = Maps . newEnumMap ( Side . class ) ; 
 + EnumMap < Side , FMLEmbeddedChannel > result = Maps . newEnumMap ( Side . class ) ; 
 
 for ( Side side : Side . values ( ) ) 
 { 
 @ @ - 157 , 7 + 142 , 7 @ @ public enum NetworkRegistry 
 return result ; 
 } 
 
 - public EmbeddedChannel getChannel ( String name , Side source ) 
 + public FMLEmbeddedChannel getChannel ( String name , Side source ) 
 { 
 return channels . get ( source ) . get ( name ) ; 
 } 
 @ @ - 428 , 7 + 413 , 7 @ @ public enum NetworkRegistry 
 
 public void fireNetworkHandshake ( NetworkDispatcher networkDispatcher , Side origin ) 
 { 
 - NetworkHandshakeEstablished handshake = new NetworkHandshakeEstablished ( networkDispatcher , origin ) ; 
 + NetworkHandshakeEstablished handshake = new NetworkHandshakeEstablished ( networkDispatcher , networkDispatcher . getNetHandler ( ) , origin ) ; 
 for ( Entry < String , FMLEmbeddedChannel > channel : channels . get ( origin ) . entrySet ( ) ) 
 { 
 channel . getValue ( ) . pipeline ( ) . fireUserEventTriggered ( handshake ) ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java 
 index b1f880a . . 7e00a9e 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java 
 @ @ - 16 , 6 + 16 , 7 @ @ import java . util . concurrent . Callable ; 
 import java . util . concurrent . TimeUnit ; 
 import net . minecraft . entity . player . EntityPlayerMP ; 
 import net . minecraft . network . EnumConnectionState ; 
 + import net . minecraft . network . INetHandler ; 
 import net . minecraft . network . NetHandlerPlayServer ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . Packet ; 
 @ @ - 68 , 10 + 69 , 12 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 private final ServerConfigurationManager scm ; 
 private EntityPlayerMP player ; 
 private ConnectionState state ; 
 + @ SuppressWarnings ( " unused " ) 
 private ConnectionType connectionType ; 
 private final Side side ; 
 private final EmbeddedChannel handshakeChannel ; 
 private NetHandlerPlayServer serverHandler ; 
 + private INetHandler netHandler ; 
 
 public NetworkDispatcher ( NetworkManager manager ) 
 { 
 @ @ - 134 , 6 + 137 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 this . manager . channel ( ) . pipeline ( ) . addFirst ( " fml : vanilla _ detector " , new VanillaTimeoutWaiter ( ) ) ; 
 / / Need to start the handler here , so we can send custompayload packets 
 serverHandler = new NetHandlerPlayServer ( scm . func _ 72365 _ p ( ) , manager , player ) ; 
 + this . netHandler = serverHandler ; 
 / / NULL the play server here - we restore it further on . If not , there are packets sent before the login 
 player . field _ 71135 _ a = null ; 
 / / manually for the manager into the PLAY state , so we can send packets later 
 @ @ - 143 , 6 + 147 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 void clientListenForServerHandshake ( ) 
 { 
 manager . func _ 150723 _ a ( EnumConnectionState . PLAY ) ; 
 + this . netHandler = FMLCommonHandler . instance ( ) . getClientPlayHandler ( ) ; 
 this . state = ConnectionState . AWAITING _ HANDSHAKE ; 
 } 
 
 @ @ - 184 , 6 + 189 , 11 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 } 
 } 
 
 + public INetHandler getNetHandler ( ) 
 + { 
 + return netHandler ; 
 + } 
 + 
 @ Override 
 public void userEventTriggered ( ChannelHandlerContext ctx , Object evt ) throws Exception 
 { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java 
 index 4a5fcc6 . . 126cc07 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import com . google . common . collect . Lists ; 
 import cpw . mods . fml . common . FMLContainer ; 
 import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . ModContainer ; 
 + import cpw . mods . fml . common . network . FMLEmbeddedChannel ; 
 import cpw . mods . fml . common . network . FMLOutboundHandler ; 
 import cpw . mods . fml . common . network . FMLOutboundHandler . OutboundTarget ; 
 import cpw . mods . fml . common . network . NetworkRegistry ; 
 @ @ - 50 , 7 + 51 , 7 @ @ public class FMLNetworkHandler 
 { 
 public static final int READ _ TIMEOUT = Integers . parseInt ( System . getProperty ( " fml . readTimeout " , " 30 " ) , 30 ) ; 
 public static final int LOGIN _ TIMEOUT = Integers . parseInt ( System . getProperty ( " fml . loginTimeout " , " 600 " ) , 600 ) ; 
 - private static EnumMap < Side , EmbeddedChannel > channelPair ; 
 + private static EnumMap < Side , FMLEmbeddedChannel > channelPair ; 
 
 / * private static final int FML _ HASH = Hashing . murmur3 _ 32 ( ) . hashString ( " FML " ) . asInt ( ) ; 
 private static final int PROTOCOL _ VERSION = 0x2 ; 
 @ @ - 472 , 11 + 473 , 7 @ @ public class FMLNetworkHandler 
 return null ; 
 } 
 
 - EmbeddedChannel embeddedChannel = channelPair . get ( Side . SERVER ) ; 
 - embeddedChannel . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( OutboundTarget . NOWHERE ) ; 
 - embeddedChannel . writeOutbound ( new FMLMessage . EntitySpawnMessage ( er , entity , er . getContainer ( ) ) ) ; 
 - FMLProxyPacket result = ( FMLProxyPacket ) embeddedChannel . outboundMessages ( ) . poll ( ) ; 
 - return result ; 
 + return channelPair . get ( Side . SERVER ) . generatePacketFrom ( new FMLMessage . EntitySpawnMessage ( er , entity , er . getContainer ( ) ) ) ; 
 } 
 
 public static String checkModList ( FMLHandshakeMessage . ModList modListPacket , Side side ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java 
 index e071443 . . 69d5f58 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java 
 @ @ - 59 , 6 + 59 , 7 @ @ public class FMLProxyPacket extends Packet { 
 { 
 this . netHandler = inethandler ; 
 EmbeddedChannel internalChannel = NetworkRegistry . INSTANCE . getChannel ( this . channel , this . target ) ; 
 + internalChannel . attr ( NetworkRegistry . NET _ HANDLER ) . set ( this . netHandler ) ; 
 if ( internalChannel ! = null ) 
 { 
 internalChannel . writeInbound ( this ) ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 index 3a01bcd . . 78d5d23 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . util . regex . Pattern ; 
 import java . util . zip . ZipEntry ; 
 import java . util . zip . ZipFile ; 
 
 + import net . minecraft . network . INetHandler ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . server . MinecraftServer ; 
 import net . minecraft . util . StringTranslate ; 
 @ @ - 215 , 4 + 216 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 throw new RuntimeException ( " Missing " ) ; 
 } 
 + @ Override 
 + public INetHandler getClientPlayHandler ( ) 
 + { 
 + return null ; 
 + } 
 }
