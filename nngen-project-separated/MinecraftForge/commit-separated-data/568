BLEU SCORE: 0.05522397783539471

TEST MSG: Restore the ability to register modded TileEntities .
GENERATED MSG: Add support for generic filtering of events .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch b / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch <nl> index fb74b31 . . 550d4f0 100644 <nl> - - - a / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch <nl> + + + b / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / tileentity / TileEntity . java <nl> + + + . . / src - work / minecraft / net / minecraft / tileentity / TileEntity . java <nl> - @ @ - 21 , 7 + 21 , 7 @ @ <nl> + @ @ - 21 , 10 + 21 , 10 @ @ <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> @ @ - 8 , 7 + 8 , 11 @ @ <nl> + public abstract class TileEntity implements net . minecraftforge . common . capabilities . ICapabilitySerializable < NBTTagCompound > <nl> { <nl> private static final Logger field _ 145852 _ a = LogManager . getLogger ( ) ; <nl> - private static final RegistryNamespaced < ResourceLocation , Class < ? extends TileEntity > > field _ 190562 _ f = new RegistryNamespaced ( ) ; <nl> + - private static final RegistryNamespaced < ResourceLocation , Class < ? extends TileEntity > > field _ 190562 _ f = new RegistryNamespaced ( ) ; <nl> + + private static final RegistryNamespaced < ResourceLocation , Class < ? extends TileEntity > > field _ 190562 _ f = net . minecraftforge . fml . common . registry . GameData . getTileEntityRegistry ( ) ; <nl> + protected World field _ 145850 _ b ; <nl> + protected BlockPos field _ 174879 _ c = BlockPos . field _ 177992 _ a ; <nl> + protected boolean field _ 145846 _ f ; <nl> @ @ - 60 , 6 + 60 , 8 @ @ <nl> public void func _ 145839 _ a ( NBTTagCompound p _ 145839 _ 1 _ ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 438da4b . . a657d56 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . potion . Potion ; <nl> import net . minecraft . potion . PotionType ; <nl> + import net . minecraft . tileentity . TileEntity ; <nl> import net . minecraft . util . ObjectIntIdentityMap ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . SoundEvent ; <nl> @ @ - 87 , 6 + 88 , 8 @ @ public class GameData <nl> FMLLog . log ( Level . FATAL , e , " Cannot access the ' block ' field from ItemBlock , this is fatal ! " ) ; <nl> throw Throwables . propagate ( e ) ; <nl> } <nl> + <nl> + iTileEntityRegistry = new LegacyNamespacedRegistry < Class < ? extends TileEntity > > ( ) ; <nl> } <nl> / / internal registry objects <nl> private final FMLControlledNamespacedRegistry < Block > iBlockRegistry ; <nl> @ @ - 97 , 6 + 100 , 11 @ @ public class GameData <nl> private final FMLControlledNamespacedRegistry < PotionType > iPotionTypeRegistry ; <nl> private final FMLControlledNamespacedRegistry < Enchantment > iEnchantmentRegistry ; <nl> <nl> + / / TODO : ? These are never used by ID , so they don ' t need to be full registries / persisted . <nl> + / / Need cpw to decide how we want to go about this as they are generic registries that <nl> + / / don ' t follow the same patterns as the other ones . <nl> + private final LegacyNamespacedRegistry < Class < ? extends TileEntity > > iTileEntityRegistry ; <nl> + <nl> / * * INTERNAL ONLY * / <nl> @ Deprecated <nl> public static FMLControlledNamespacedRegistry < Block > getBlockRegistry ( ) <nl> @ @ - 133 , 6 + 141 , 10 @ @ public class GameData <nl> @ Deprecated <nl> public static FMLControlledNamespacedRegistry < Enchantment > getEnchantmentRegistry ( ) { return getMain ( ) . iEnchantmentRegistry ; } <nl> <nl> + / * * INTERNAL ONLY * / <nl> + @ Deprecated <nl> + public static LegacyNamespacedRegistry < Class < ? extends TileEntity > > getTileEntityRegistry ( ) { return getMain ( ) . iTileEntityRegistry ; } <nl> + <nl> @ Deprecated <nl> static Item findItem ( String modId , String name ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> index 864fa6b . . 606c7b6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> @ @ - 257 , 7 + 257 , 7 @ @ public class GameRegistry <nl> <nl> public static void registerTileEntity ( Class < ? extends TileEntity > tileEntityClass , String id ) <nl> { <nl> - / / TileEntity . addMapping ( tileEntityClass , id ) ; <nl> + GameData . getTileEntityRegistry ( ) . putObject ( new ResourceLocation ( id ) , tileEntityClass ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 270 , 14 + 270 , 10 @ @ public class GameRegistry <nl> * / <nl> public static void registerTileEntityWithAlternatives ( Class < ? extends TileEntity > tileEntityClass , String id , String . . . alternatives ) <nl> { <nl> - / / TileEntity . addMapping ( tileEntityClass , id ) ; <nl> - Map < String , Class < ? > > teMappings = ObfuscationReflectionHelper . getPrivateValue ( TileEntity . class , null , " field _ " + " 145855 _ i " , " nameToClassMap " ) ; <nl> + GameRegistry . registerTileEntity ( tileEntityClass , id ) ; <nl> for ( String s : alternatives ) <nl> { <nl> - if ( ! teMappings . containsKey ( s ) ) <nl> - { <nl> - teMappings . put ( s , tileEntityClass ) ; <nl> - } <nl> + GameData . getTileEntityRegistry ( ) . addLegacyName ( new ResourceLocation ( s ) , new ResourceLocation ( id ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / LegacyNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / LegacyNamespacedRegistry . java <nl> new file mode 100644 <nl> index 0000000 . . 403baee <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / LegacyNamespacedRegistry . java <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . common . registry ; <nl> + <nl> + import java . util . Map ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . registry . RegistryNamespaced ; <nl> + <nl> + public class LegacyNamespacedRegistry < V > extends RegistryNamespaced < ResourceLocation , V > <nl> + { <nl> + private Map < ResourceLocation , ResourceLocation > legacy _ names = Maps . newHashMap ( ) ; <nl> + <nl> + @ Nullable <nl> + public V getObject ( @ Nullable ResourceLocation name ) <nl> + { <nl> + V ret = super . getObject ( name ) ; <nl> + <nl> + if ( ret = = null ) <nl> + { <nl> + ResourceLocation new _ name = legacy _ names . get ( name ) ; <nl> + if ( new _ name ! = null ) <nl> + ret = super . getObject ( new _ name ) ; <nl> + } <nl> + <nl> + return ret ; <nl> + } <nl> + <nl> + public void addLegacyName ( ResourceLocation old _ name , ResourceLocation new _ name ) <nl> + { <nl> + legacy _ names . put ( old _ name , new _ name ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / event / AttachCapabilitiesEvent . java b / src / main / java / net / minecraftforge / event / AttachCapabilitiesEvent . java <nl> index fd8bfa0 . . eb0dcc4 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / AttachCapabilitiesEvent . java <nl> + + + b / src / main / java / net / minecraftforge / event / AttachCapabilitiesEvent . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import com . google . common . collect . Maps ; <nl> <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . common . capabilities . ICapabilityProvider ; <nl> - import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + import net . minecraftforge . fml . common . eventhandler . GenericEvent ; <nl> <nl> / * * <nl> * Fired whenever an object with Capabilities support { currently TileEntity / Item / Entity ) <nl> @ @ - 35 , 20 + 35 , 28 @ @ import net . minecraftforge . fml . common . eventhandler . Event ; <nl> * Please note that as this is fired for ALL object creations efficient code is recommended . <nl> * And if possible use one of the sub - classes to filter your intended objects . <nl> * / <nl> - public class AttachCapabilitiesEvent extends Event <nl> + public class AttachCapabilitiesEvent < T > extends GenericEvent < T > <nl> { <nl> - private final Object obj ; <nl> + private final T obj ; <nl> private final Map < ResourceLocation , ICapabilityProvider > caps = Maps . newLinkedHashMap ( ) ; <nl> private final Map < ResourceLocation , ICapabilityProvider > view = Collections . unmodifiableMap ( caps ) ; <nl> - public AttachCapabilitiesEvent ( Object obj ) <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + @ Deprecated <nl> + public AttachCapabilitiesEvent ( T obj ) <nl> + { <nl> + this ( ( Class < T > ) Object . class , obj ) ; <nl> + } <nl> + public AttachCapabilitiesEvent ( Class < T > type , T obj ) <nl> { <nl> + super ( type ) ; <nl> this . obj = obj ; <nl> } <nl> <nl> / * * <nl> * Retrieves the object that is being created , Not much state is set . <nl> * / <nl> - public Object getObject ( ) <nl> + public T getObject ( ) <nl> { <nl> return this . obj ; <nl> } <nl> @ @ - 80 , 12 + 88 , 13 @ @ public class AttachCapabilitiesEvent extends Event <nl> / * * <nl> * A version of the parent event which is only fired for Tile Entities . <nl> * / <nl> - public static class TileEntity extends AttachCapabilitiesEvent <nl> + @ Deprecated <nl> + public static class TileEntity extends AttachCapabilitiesEvent < net . minecraft . tileentity . TileEntity > <nl> { <nl> private final net . minecraft . tileentity . TileEntity te ; <nl> public TileEntity ( net . minecraft . tileentity . TileEntity te ) <nl> { <nl> - super ( te ) ; <nl> + super ( net . minecraft . tileentity . TileEntity . class , te ) ; <nl> this . te = te ; <nl> } <nl> public net . minecraft . tileentity . TileEntity getTileEntity ( ) <nl> @ @ - 97 , 12 + 106 , 13 @ @ public class AttachCapabilitiesEvent extends Event <nl> / * * <nl> * A version of the parent event which is only fired for Entities . <nl> * / <nl> - public static class Entity extends AttachCapabilitiesEvent <nl> + @ Deprecated <nl> + public static class Entity extends AttachCapabilitiesEvent < net . minecraft . entity . Entity > <nl> { <nl> private final net . minecraft . entity . Entity entity ; <nl> public Entity ( net . minecraft . entity . Entity entity ) <nl> { <nl> - super ( entity ) ; <nl> + super ( net . minecraft . entity . Entity . class , entity ) ; <nl> this . entity = entity ; <nl> } <nl> public net . minecraft . entity . Entity getEntity ( ) <nl> @ @ - 114 , 16 + 124 , 18 @ @ public class AttachCapabilitiesEvent extends Event <nl> / * * <nl> * A version of the parent event which is only fired for ItemStacks . <nl> * / <nl> - public static class Item extends AttachCapabilitiesEvent <nl> + public static class Item extends AttachCapabilitiesEvent < net . minecraft . item . Item > <nl> { <nl> + @ Deprecated <nl> private final net . minecraft . item . ItemStack stack ; <nl> private final net . minecraft . item . Item item ; <nl> public Item ( net . minecraft . item . Item item , net . minecraft . item . ItemStack stack ) <nl> { <nl> - super ( item ) ; <nl> + super ( net . minecraft . item . Item . class , item ) ; <nl> this . item = item ; <nl> this . stack = stack ; <nl> } <nl> + @ Deprecated <nl> public net . minecraft . item . Item getItem ( ) <nl> { <nl> return this . item ; <nl> @ @ - 137 , 12 + 149 , 13 @ @ public class AttachCapabilitiesEvent extends Event <nl> / * * <nl> * A version of the parent event which is only fired for Worlds . <nl> * / <nl> - public static class World extends AttachCapabilitiesEvent <nl> + @ Deprecated <nl> + public static class World extends AttachCapabilitiesEvent < net . minecraft . world . World > <nl> { <nl> private final net . minecraft . world . World world ; <nl> public World ( net . minecraft . world . World world ) <nl> { <nl> - super ( world ) ; <nl> + super ( net . minecraft . world . World . class , world ) ; <nl> this . world = world ; <nl> } <nl> public net . minecraft . world . World getWorld ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java <nl> index 41edc0a . . 9394b41 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import static org . objectweb . asm . Opcodes . * ; <nl> <nl> import java . lang . reflect . Method ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . lang . reflect . ParameterizedType ; <nl> import java . util . HashMap ; <nl> <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> @ @ - 34 , 7 + 35 , 6 @ @ import org . objectweb . asm . Type ; <nl> <nl> import com . google . common . collect . Maps ; <nl> <nl> - <nl> public class ASMEventHandler implements IEventListener <nl> { <nl> private static int IDs = 0 ; <nl> @ @ - 48 , 9 + 48 , 16 @ @ public class ASMEventHandler implements IEventListener <nl> private final SubscribeEvent subInfo ; <nl> private ModContainer owner ; <nl> private String readable ; <nl> + private java . lang . reflect . Type filter = null ; <nl> <nl> + @ Deprecated <nl> public ASMEventHandler ( Object target , Method method , ModContainer owner ) throws Exception <nl> { <nl> + this ( target , method , owner , false ) ; <nl> + } <nl> + <nl> + public ASMEventHandler ( Object target , Method method , ModContainer owner , boolean isGeneric ) throws Exception <nl> + { <nl> this . owner = owner ; <nl> if ( Modifier . isStatic ( method . getModifiers ( ) ) ) <nl> handler = ( IEventListener ) createWrapper ( method ) . newInstance ( ) ; <nl> @ @ - 58 , 8 + 65 , 19 @ @ public class ASMEventHandler implements IEventListener <nl> handler = ( IEventListener ) createWrapper ( method ) . getConstructor ( Object . class ) . newInstance ( target ) ; <nl> subInfo = method . getAnnotation ( SubscribeEvent . class ) ; <nl> readable = " ASM : " + target + " " + method . getName ( ) + Type . getMethodDescriptor ( method ) ; <nl> + if ( isGeneric ) <nl> + { <nl> + java . lang . reflect . Type type = method . getGenericParameterTypes ( ) [ 0 ] ; <nl> + System . currentTimeMillis ( ) ; <nl> + if ( type instanceof ParameterizedType ) <nl> + { <nl> + filter = ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ 0 ] ; <nl> + System . currentTimeMillis ( ) ; <nl> + } <nl> + } <nl> } <nl> <nl> + @ SuppressWarnings ( " rawtypes " ) <nl> @ Override <nl> public void invoke ( Event event ) <nl> { <nl> @ @ - 69 , 7 + 87 , 10 @ @ public class ASMEventHandler implements IEventListener <nl> { <nl> if ( ! event . isCancelable ( ) | | ! event . isCanceled ( ) | | subInfo . receiveCanceled ( ) ) <nl> { <nl> - handler . invoke ( event ) ; <nl> + if ( filter = = null | | filter = = ( ( IGenericEvent ) event ) . getGenericType ( ) ) <nl> + { <nl> + handler . invoke ( event ) ; <nl> + } <nl> } <nl> } <nl> if ( GETCONTEXT ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> index 7a83be4 . . 651e3d4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> @ @ - 129 , 7 + 129 , 7 @ @ public class EventBus implements IEventExceptionHandler <nl> Constructor < ? > ctr = eventType . getConstructor ( ) ; <nl> ctr . setAccessible ( true ) ; <nl> Event event = ( Event ) ctr . newInstance ( ) ; <nl> - ASMEventHandler listener = new ASMEventHandler ( target , method , owner ) ; <nl> + ASMEventHandler listener = new ASMEventHandler ( target , method , owner , IGenericEvent . class . isAssignableFrom ( eventType ) ) ; <nl> event . getListenerList ( ) . register ( busID , listener . getPriority ( ) , listener ) ; <nl> <nl> ArrayList < IEventListener > others = listeners . get ( target ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / GenericEvent . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / GenericEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 8e6f07b <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / GenericEvent . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . fml . common . eventhandler ; <nl> + <nl> + import java . lang . reflect . Type ; <nl> + <nl> + public class GenericEvent < T > extends Event implements IGenericEvent < T > <nl> + { <nl> + private Class < T > type ; <nl> + protected GenericEvent ( Class < T > type ) <nl> + { <nl> + this . type = type ; <nl> + } <nl> + <nl> + @ Override <nl> + public Type getGenericType ( ) <nl> + { <nl> + return type ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / IGenericEvent . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / IGenericEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 9b0e557 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / IGenericEvent . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . fml . common . eventhandler ; <nl> + <nl> + import java . lang . reflect . Type ; <nl> + <nl> + public interface IGenericEvent < T > <nl> + { <nl> + Type getGenericType ( ) ; <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / test / TestCapabilityMod . java b / src / test / java / net / minecraftforge / test / TestCapabilityMod . java <nl> index 1c14bd0 . . 3ecc79d 100644 <nl> - - - a / src / test / java / net / minecraftforge / test / TestCapabilityMod . java <nl> + + + b / src / test / java / net / minecraftforge / test / TestCapabilityMod . java <nl> @ @ - 112 , 6 + 112 , 20 @ @ public class TestCapabilityMod <nl> event . addCapability ( new ResourceLocation ( " TestCapabilityMod : DummyCap " ) , new Provider ( event . getTileEntity ( ) ) ) ; <nl> } <nl> <nl> + @ SuppressWarnings ( " rawtypes " ) <nl> + @ SubscribeEvent <nl> + public void attachEvent ( AttachCapabilitiesEvent event ) / / Test Raw type gets everything still . <nl> + { <nl> + System . currentTimeMillis ( ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void attachTileEntity ( AttachCapabilitiesEvent < TileEntity > event ) <nl> + { <nl> + if ( ! ( event . getObject ( ) instanceof TileEntity ) ) <nl> + throw new IllegalArgumentException ( " Generic event handler failed ! Exprected Tile Entity got " + event . getObject ( ) ) ; <nl> + } <nl> + <nl> / / Capabilities SHOULD be interfaces , NOT concrete classes , this allows for <nl> / / the most flexibility for the implementors . <nl> public static interface IExampleCapability

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch b / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch 
 index fb74b31 . . 550d4f0 100644 
 - - - a / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch 
 + + + b / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / tileentity / TileEntity . java 
 + + + . . / src - work / minecraft / net / minecraft / tileentity / TileEntity . java 
 - @ @ - 21 , 7 + 21 , 7 @ @ 
 + @ @ - 21 , 10 + 21 , 10 @ @ 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 @ @ - 8 , 7 + 8 , 11 @ @ 
 + public abstract class TileEntity implements net . minecraftforge . common . capabilities . ICapabilitySerializable < NBTTagCompound > 
 { 
 private static final Logger field _ 145852 _ a = LogManager . getLogger ( ) ; 
 - private static final RegistryNamespaced < ResourceLocation , Class < ? extends TileEntity > > field _ 190562 _ f = new RegistryNamespaced ( ) ; 
 + - private static final RegistryNamespaced < ResourceLocation , Class < ? extends TileEntity > > field _ 190562 _ f = new RegistryNamespaced ( ) ; 
 + + private static final RegistryNamespaced < ResourceLocation , Class < ? extends TileEntity > > field _ 190562 _ f = net . minecraftforge . fml . common . registry . GameData . getTileEntityRegistry ( ) ; 
 + protected World field _ 145850 _ b ; 
 + protected BlockPos field _ 174879 _ c = BlockPos . field _ 177992 _ a ; 
 + protected boolean field _ 145846 _ f ; 
 @ @ - 60 , 6 + 60 , 8 @ @ 
 public void func _ 145839 _ a ( NBTTagCompound p _ 145839 _ 1 _ ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 438da4b . . a657d56 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . potion . Potion ; 
 import net . minecraft . potion . PotionType ; 
 + import net . minecraft . tileentity . TileEntity ; 
 import net . minecraft . util . ObjectIntIdentityMap ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . SoundEvent ; 
 @ @ - 87 , 6 + 88 , 8 @ @ public class GameData 
 FMLLog . log ( Level . FATAL , e , " Cannot access the ' block ' field from ItemBlock , this is fatal ! " ) ; 
 throw Throwables . propagate ( e ) ; 
 } 
 + 
 + iTileEntityRegistry = new LegacyNamespacedRegistry < Class < ? extends TileEntity > > ( ) ; 
 } 
 / / internal registry objects 
 private final FMLControlledNamespacedRegistry < Block > iBlockRegistry ; 
 @ @ - 97 , 6 + 100 , 11 @ @ public class GameData 
 private final FMLControlledNamespacedRegistry < PotionType > iPotionTypeRegistry ; 
 private final FMLControlledNamespacedRegistry < Enchantment > iEnchantmentRegistry ; 
 
 + / / TODO : ? These are never used by ID , so they don ' t need to be full registries / persisted . 
 + / / Need cpw to decide how we want to go about this as they are generic registries that 
 + / / don ' t follow the same patterns as the other ones . 
 + private final LegacyNamespacedRegistry < Class < ? extends TileEntity > > iTileEntityRegistry ; 
 + 
 / * * INTERNAL ONLY * / 
 @ Deprecated 
 public static FMLControlledNamespacedRegistry < Block > getBlockRegistry ( ) 
 @ @ - 133 , 6 + 141 , 10 @ @ public class GameData 
 @ Deprecated 
 public static FMLControlledNamespacedRegistry < Enchantment > getEnchantmentRegistry ( ) { return getMain ( ) . iEnchantmentRegistry ; } 
 
 + / * * INTERNAL ONLY * / 
 + @ Deprecated 
 + public static LegacyNamespacedRegistry < Class < ? extends TileEntity > > getTileEntityRegistry ( ) { return getMain ( ) . iTileEntityRegistry ; } 
 + 
 @ Deprecated 
 static Item findItem ( String modId , String name ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 index 864fa6b . . 606c7b6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 @ @ - 257 , 7 + 257 , 7 @ @ public class GameRegistry 
 
 public static void registerTileEntity ( Class < ? extends TileEntity > tileEntityClass , String id ) 
 { 
 - / / TileEntity . addMapping ( tileEntityClass , id ) ; 
 + GameData . getTileEntityRegistry ( ) . putObject ( new ResourceLocation ( id ) , tileEntityClass ) ; 
 } 
 
 / * * 
 @ @ - 270 , 14 + 270 , 10 @ @ public class GameRegistry 
 * / 
 public static void registerTileEntityWithAlternatives ( Class < ? extends TileEntity > tileEntityClass , String id , String . . . alternatives ) 
 { 
 - / / TileEntity . addMapping ( tileEntityClass , id ) ; 
 - Map < String , Class < ? > > teMappings = ObfuscationReflectionHelper . getPrivateValue ( TileEntity . class , null , " field _ " + " 145855 _ i " , " nameToClassMap " ) ; 
 + GameRegistry . registerTileEntity ( tileEntityClass , id ) ; 
 for ( String s : alternatives ) 
 { 
 - if ( ! teMappings . containsKey ( s ) ) 
 - { 
 - teMappings . put ( s , tileEntityClass ) ; 
 - } 
 + GameData . getTileEntityRegistry ( ) . addLegacyName ( new ResourceLocation ( s ) , new ResourceLocation ( id ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / LegacyNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / LegacyNamespacedRegistry . java 
 new file mode 100644 
 index 0000000 . . 403baee 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / LegacyNamespacedRegistry . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . common . registry ; 
 + 
 + import java . util . Map ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + import com . google . common . collect . Maps ; 
 + 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . registry . RegistryNamespaced ; 
 + 
 + public class LegacyNamespacedRegistry < V > extends RegistryNamespaced < ResourceLocation , V > 
 + { 
 + private Map < ResourceLocation , ResourceLocation > legacy _ names = Maps . newHashMap ( ) ; 
 + 
 + @ Nullable 
 + public V getObject ( @ Nullable ResourceLocation name ) 
 + { 
 + V ret = super . getObject ( name ) ; 
 + 
 + if ( ret = = null ) 
 + { 
 + ResourceLocation new _ name = legacy _ names . get ( name ) ; 
 + if ( new _ name ! = null ) 
 + ret = super . getObject ( new _ name ) ; 
 + } 
 + 
 + return ret ; 
 + } 
 + 
 + public void addLegacyName ( ResourceLocation old _ name , ResourceLocation new _ name ) 
 + { 
 + legacy _ names . put ( old _ name , new _ name ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / event / AttachCapabilitiesEvent . java b / src / main / java / net / minecraftforge / event / AttachCapabilitiesEvent . java 
 index fd8bfa0 . . eb0dcc4 100644 
 - - - a / src / main / java / net / minecraftforge / event / AttachCapabilitiesEvent . java 
 + + + b / src / main / java / net / minecraftforge / event / AttachCapabilitiesEvent . java 
 @ @ - 26 , 7 + 26 , 7 @ @ import com . google . common . collect . Maps ; 
 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . common . capabilities . ICapabilityProvider ; 
 - import net . minecraftforge . fml . common . eventhandler . Event ; 
 + import net . minecraftforge . fml . common . eventhandler . GenericEvent ; 
 
 / * * 
 * Fired whenever an object with Capabilities support { currently TileEntity / Item / Entity ) 
 @ @ - 35 , 20 + 35 , 28 @ @ import net . minecraftforge . fml . common . eventhandler . Event ; 
 * Please note that as this is fired for ALL object creations efficient code is recommended . 
 * And if possible use one of the sub - classes to filter your intended objects . 
 * / 
 - public class AttachCapabilitiesEvent extends Event 
 + public class AttachCapabilitiesEvent < T > extends GenericEvent < T > 
 { 
 - private final Object obj ; 
 + private final T obj ; 
 private final Map < ResourceLocation , ICapabilityProvider > caps = Maps . newLinkedHashMap ( ) ; 
 private final Map < ResourceLocation , ICapabilityProvider > view = Collections . unmodifiableMap ( caps ) ; 
 - public AttachCapabilitiesEvent ( Object obj ) 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + @ Deprecated 
 + public AttachCapabilitiesEvent ( T obj ) 
 + { 
 + this ( ( Class < T > ) Object . class , obj ) ; 
 + } 
 + public AttachCapabilitiesEvent ( Class < T > type , T obj ) 
 { 
 + super ( type ) ; 
 this . obj = obj ; 
 } 
 
 / * * 
 * Retrieves the object that is being created , Not much state is set . 
 * / 
 - public Object getObject ( ) 
 + public T getObject ( ) 
 { 
 return this . obj ; 
 } 
 @ @ - 80 , 12 + 88 , 13 @ @ public class AttachCapabilitiesEvent extends Event 
 / * * 
 * A version of the parent event which is only fired for Tile Entities . 
 * / 
 - public static class TileEntity extends AttachCapabilitiesEvent 
 + @ Deprecated 
 + public static class TileEntity extends AttachCapabilitiesEvent < net . minecraft . tileentity . TileEntity > 
 { 
 private final net . minecraft . tileentity . TileEntity te ; 
 public TileEntity ( net . minecraft . tileentity . TileEntity te ) 
 { 
 - super ( te ) ; 
 + super ( net . minecraft . tileentity . TileEntity . class , te ) ; 
 this . te = te ; 
 } 
 public net . minecraft . tileentity . TileEntity getTileEntity ( ) 
 @ @ - 97 , 12 + 106 , 13 @ @ public class AttachCapabilitiesEvent extends Event 
 / * * 
 * A version of the parent event which is only fired for Entities . 
 * / 
 - public static class Entity extends AttachCapabilitiesEvent 
 + @ Deprecated 
 + public static class Entity extends AttachCapabilitiesEvent < net . minecraft . entity . Entity > 
 { 
 private final net . minecraft . entity . Entity entity ; 
 public Entity ( net . minecraft . entity . Entity entity ) 
 { 
 - super ( entity ) ; 
 + super ( net . minecraft . entity . Entity . class , entity ) ; 
 this . entity = entity ; 
 } 
 public net . minecraft . entity . Entity getEntity ( ) 
 @ @ - 114 , 16 + 124 , 18 @ @ public class AttachCapabilitiesEvent extends Event 
 / * * 
 * A version of the parent event which is only fired for ItemStacks . 
 * / 
 - public static class Item extends AttachCapabilitiesEvent 
 + public static class Item extends AttachCapabilitiesEvent < net . minecraft . item . Item > 
 { 
 + @ Deprecated 
 private final net . minecraft . item . ItemStack stack ; 
 private final net . minecraft . item . Item item ; 
 public Item ( net . minecraft . item . Item item , net . minecraft . item . ItemStack stack ) 
 { 
 - super ( item ) ; 
 + super ( net . minecraft . item . Item . class , item ) ; 
 this . item = item ; 
 this . stack = stack ; 
 } 
 + @ Deprecated 
 public net . minecraft . item . Item getItem ( ) 
 { 
 return this . item ; 
 @ @ - 137 , 12 + 149 , 13 @ @ public class AttachCapabilitiesEvent extends Event 
 / * * 
 * A version of the parent event which is only fired for Worlds . 
 * / 
 - public static class World extends AttachCapabilitiesEvent 
 + @ Deprecated 
 + public static class World extends AttachCapabilitiesEvent < net . minecraft . world . World > 
 { 
 private final net . minecraft . world . World world ; 
 public World ( net . minecraft . world . World world ) 
 { 
 - super ( world ) ; 
 + super ( net . minecraft . world . World . class , world ) ; 
 this . world = world ; 
 } 
 public net . minecraft . world . World getWorld ( ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java 
 index 41edc0a . . 9394b41 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import static org . objectweb . asm . Opcodes . * ; 
 
 import java . lang . reflect . Method ; 
 import java . lang . reflect . Modifier ; 
 + import java . lang . reflect . ParameterizedType ; 
 import java . util . HashMap ; 
 
 import net . minecraftforge . fml . common . ModContainer ; 
 @ @ - 34 , 7 + 35 , 6 @ @ import org . objectweb . asm . Type ; 
 
 import com . google . common . collect . Maps ; 
 
 - 
 public class ASMEventHandler implements IEventListener 
 { 
 private static int IDs = 0 ; 
 @ @ - 48 , 9 + 48 , 16 @ @ public class ASMEventHandler implements IEventListener 
 private final SubscribeEvent subInfo ; 
 private ModContainer owner ; 
 private String readable ; 
 + private java . lang . reflect . Type filter = null ; 
 
 + @ Deprecated 
 public ASMEventHandler ( Object target , Method method , ModContainer owner ) throws Exception 
 { 
 + this ( target , method , owner , false ) ; 
 + } 
 + 
 + public ASMEventHandler ( Object target , Method method , ModContainer owner , boolean isGeneric ) throws Exception 
 + { 
 this . owner = owner ; 
 if ( Modifier . isStatic ( method . getModifiers ( ) ) ) 
 handler = ( IEventListener ) createWrapper ( method ) . newInstance ( ) ; 
 @ @ - 58 , 8 + 65 , 19 @ @ public class ASMEventHandler implements IEventListener 
 handler = ( IEventListener ) createWrapper ( method ) . getConstructor ( Object . class ) . newInstance ( target ) ; 
 subInfo = method . getAnnotation ( SubscribeEvent . class ) ; 
 readable = " ASM : " + target + " " + method . getName ( ) + Type . getMethodDescriptor ( method ) ; 
 + if ( isGeneric ) 
 + { 
 + java . lang . reflect . Type type = method . getGenericParameterTypes ( ) [ 0 ] ; 
 + System . currentTimeMillis ( ) ; 
 + if ( type instanceof ParameterizedType ) 
 + { 
 + filter = ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ 0 ] ; 
 + System . currentTimeMillis ( ) ; 
 + } 
 + } 
 } 
 
 + @ SuppressWarnings ( " rawtypes " ) 
 @ Override 
 public void invoke ( Event event ) 
 { 
 @ @ - 69 , 7 + 87 , 10 @ @ public class ASMEventHandler implements IEventListener 
 { 
 if ( ! event . isCancelable ( ) | | ! event . isCanceled ( ) | | subInfo . receiveCanceled ( ) ) 
 { 
 - handler . invoke ( event ) ; 
 + if ( filter = = null | | filter = = ( ( IGenericEvent ) event ) . getGenericType ( ) ) 
 + { 
 + handler . invoke ( event ) ; 
 + } 
 } 
 } 
 if ( GETCONTEXT ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 index 7a83be4 . . 651e3d4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 @ @ - 129 , 7 + 129 , 7 @ @ public class EventBus implements IEventExceptionHandler 
 Constructor < ? > ctr = eventType . getConstructor ( ) ; 
 ctr . setAccessible ( true ) ; 
 Event event = ( Event ) ctr . newInstance ( ) ; 
 - ASMEventHandler listener = new ASMEventHandler ( target , method , owner ) ; 
 + ASMEventHandler listener = new ASMEventHandler ( target , method , owner , IGenericEvent . class . isAssignableFrom ( eventType ) ) ; 
 event . getListenerList ( ) . register ( busID , listener . getPriority ( ) , listener ) ; 
 
 ArrayList < IEventListener > others = listeners . get ( target ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / GenericEvent . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / GenericEvent . java 
 new file mode 100644 
 index 0000000 . . 8e6f07b 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / GenericEvent . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . fml . common . eventhandler ; 
 + 
 + import java . lang . reflect . Type ; 
 + 
 + public class GenericEvent < T > extends Event implements IGenericEvent < T > 
 + { 
 + private Class < T > type ; 
 + protected GenericEvent ( Class < T > type ) 
 + { 
 + this . type = type ; 
 + } 
 + 
 + @ Override 
 + public Type getGenericType ( ) 
 + { 
 + return type ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / IGenericEvent . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / IGenericEvent . java 
 new file mode 100644 
 index 0000000 . . 9b0e557 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / IGenericEvent . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . fml . common . eventhandler ; 
 + 
 + import java . lang . reflect . Type ; 
 + 
 + public interface IGenericEvent < T > 
 + { 
 + Type getGenericType ( ) ; 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / test / TestCapabilityMod . java b / src / test / java / net / minecraftforge / test / TestCapabilityMod . java 
 index 1c14bd0 . . 3ecc79d 100644 
 - - - a / src / test / java / net / minecraftforge / test / TestCapabilityMod . java 
 + + + b / src / test / java / net / minecraftforge / test / TestCapabilityMod . java 
 @ @ - 112 , 6 + 112 , 20 @ @ public class TestCapabilityMod 
 event . addCapability ( new ResourceLocation ( " TestCapabilityMod : DummyCap " ) , new Provider ( event . getTileEntity ( ) ) ) ; 
 } 
 
 + @ SuppressWarnings ( " rawtypes " ) 
 + @ SubscribeEvent 
 + public void attachEvent ( AttachCapabilitiesEvent event ) / / Test Raw type gets everything still . 
 + { 
 + System . currentTimeMillis ( ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void attachTileEntity ( AttachCapabilitiesEvent < TileEntity > event ) 
 + { 
 + if ( ! ( event . getObject ( ) instanceof TileEntity ) ) 
 + throw new IllegalArgumentException ( " Generic event handler failed ! Exprected Tile Entity got " + event . getObject ( ) ) ; 
 + } 
 + 
 / / Capabilities SHOULD be interfaces , NOT concrete classes , this allows for 
 / / the most flexibility for the implementors . 
 public static interface IExampleCapability
