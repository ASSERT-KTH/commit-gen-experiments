BLEU SCORE: 0.009596488401476517

TEST MSG: TextureMap , TextureManager and Stitcher rejects fixed .
GENERATED MSG: Some more tweaks to the chunkloading code . The world . load event fires slightly later - once the entity watcher is

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch <nl> index 931df54 . . 6d226df 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch <nl> @ @ - 1 , 6 + 1 , 24 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / texture / Stitcher . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / texture / Stitcher . java <nl> - @ @ - 74 , 6 + 74 , 7 @ @ <nl> + @ @ - 59 , 12 + 59 , 17 @ @ <nl> + { <nl> + Stitcher . Holder [ ] astitcher $ holder = ( Stitcher . Holder [ ] ) this . setStitchHolders . toArray ( new Stitcher . Holder [ this . setStitchHolders . size ( ) ] ) ; <nl> + Arrays . sort ( ( Object [ ] ) astitcher $ holder ) ; <nl> + + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Texture stitching " , astitcher $ holder . length ) ; <nl> + <nl> + for ( Stitcher . Holder stitcher $ holder : astitcher $ holder ) <nl> + { <nl> + + bar . step ( stitcher $ holder . getAtlasSprite ( ) . getIconName ( ) ) ; <nl> + if ( ! this . allocateSlot ( stitcher $ holder ) ) <nl> + { <nl> + String s = String . format ( " Unable to fit : % s - size : % dx % d - Maybe try a lowerresolution resourcepack ? " , new Object [ ] { stitcher $ holder . getAtlasSprite ( ) . getIconName ( ) , Integer . valueOf ( stitcher $ holder . getAtlasSprite ( ) . getIconWidth ( ) ) , Integer . valueOf ( stitcher $ holder . getAtlasSprite ( ) . getIconHeight ( ) ) } ) ; <nl> + + net . minecraftforge . fml . common . FMLLog . info ( s ) ; <nl> + + for ( Stitcher . Holder h : astitcher $ holder ) <nl> + + net . minecraftforge . fml . common . FMLLog . info ( " % s " , h ) ; <nl> + throw new StitcherException ( stitcher $ holder , s ) ; <nl> + } <nl> + } <nl> + @ @ - 74 , 6 + 79 , 7 @ @ <nl> this . currentWidth = MathHelper . roundUpToPowerOfTwo ( this . currentWidth ) ; <nl> this . currentHeight = MathHelper . roundUpToPowerOfTwo ( this . currentHeight ) ; <nl> } <nl> @ @ - 8 , 7 + 26 , 7 @ @ <nl> } <nl> <nl> public List < TextureAtlasSprite > getStichSlots ( ) <nl> - @ @ - 262 , 7 + 263 , 7 @ @ <nl> + @ @ - 262 , 7 + 268 , 7 @ @ <nl> <nl> public String toString ( ) <nl> { <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch b / patches / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 94c0bb3 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / texture / TextureManager . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / texture / TextureManager . java <nl> + @ @ - 139 , 9 + 139 , 12 @ @ <nl> + <nl> + public void onResourceManagerReload ( IResourceManager resourceManager ) <nl> + { <nl> + + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Reloading Texture Manager " , this . mapTextureObjects . keySet ( ) . size ( ) , true ) ; <nl> + for ( Entry < ResourceLocation , ITextureObject > entry : this . mapTextureObjects . entrySet ( ) ) <nl> + { <nl> + + bar . step ( entry . getKey ( ) . toString ( ) ) ; <nl> + this . loadTexture ( ( ResourceLocation ) entry . getKey ( ) , ( ITextureObject ) entry . getValue ( ) ) ; <nl> + } <nl> + + net . minecraftforge . fml . common . ProgressManager . pop ( bar ) ; <nl> + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch b / patches / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch <nl> index 9cbc2e7 . . 1c6f3e180 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch <nl> @ @ - 16 , 7 + 16 , 77 @ @ <nl> <nl> public TextureMap ( String p _ i46099 _ 1 _ ) <nl> { <nl> - @ @ - 167 , 6 + 169 , 7 @ @ <nl> + @ @ - 47 , 12 + 49 , 23 @ @ <nl> + <nl> + public TextureMap ( String p _ i46100 _ 1 _ , IIconCreator iconCreatorIn ) <nl> + { <nl> + + this ( p _ i46100 _ 1 _ , iconCreatorIn , false ) ; <nl> + + } <nl> + + <nl> + + public TextureMap ( String p _ i46100 _ 1 _ , boolean skipFirst ) <nl> + + { <nl> + + this ( p _ i46100 _ 1 _ , null , skipFirst ) ; <nl> + + } <nl> + + <nl> + + public TextureMap ( String p _ i46100 _ 1 _ , IIconCreator iconCreatorIn , boolean skipFirst ) <nl> + + { <nl> + this . listAnimatedSprites = Lists . < TextureAtlasSprite > newArrayList ( ) ; <nl> + this . mapRegisteredSprites = Maps . < String , TextureAtlasSprite > newHashMap ( ) ; <nl> + this . mapUploadedSprites = Maps . < String , TextureAtlasSprite > newHashMap ( ) ; <nl> + this . missingImage = new TextureAtlasSprite ( " missingno " ) ; <nl> + this . basePath = p _ i46100 _ 1 _ ; <nl> + this . iconCreator = iconCreatorIn ; <nl> + + this . skipFirst = skipFirst & & ENABLE _ SKIP ; <nl> + } <nl> + <nl> + private void initMissingImage ( ) <nl> + @ @ - 91 , 12 + 104 , 28 @ @ <nl> + int j = Integer . MAX _ VALUE ; <nl> + int k = 1 < < this . mipmapLevels ; <nl> + <nl> + + net . minecraftforge . client . ForgeHooksClient . onTextureStitchedPre ( this ) ; <nl> + + net . minecraftforge . fml . common . FMLLog . info ( " Max texture size : % d " , i ) ; <nl> + + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Texture stitching " , skipFirst ? 0 : this . mapRegisteredSprites . size ( ) ) ; <nl> + + <nl> + + if ( ! skipFirst ) <nl> + for ( Entry < String , TextureAtlasSprite > entry : this . mapRegisteredSprites . entrySet ( ) ) <nl> + { <nl> + TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) entry . getValue ( ) ; <nl> + ResourceLocation resourcelocation = new ResourceLocation ( textureatlassprite . getIconName ( ) ) ; <nl> + ResourceLocation resourcelocation1 = this . completeResourceLocation ( resourcelocation , 0 ) ; <nl> + + bar . step ( resourcelocation1 . getResourcePath ( ) ) ; <nl> + <nl> + + if ( textureatlassprite . hasCustomLoader ( resourceManager , resourcelocation ) ) <nl> + + { <nl> + + if ( ! textureatlassprite . load ( resourceManager , resourcelocation ) ) <nl> + + { <nl> + + j = Math . min ( j , Math . min ( textureatlassprite . getIconWidth ( ) , textureatlassprite . getIconHeight ( ) ) ) ; <nl> + + stitcher . addSprite ( textureatlassprite ) ; <nl> + + } <nl> + + continue ; <nl> + + } <nl> + + <nl> + try <nl> + { <nl> + IResource iresource = resourceManager . getResource ( resourcelocation1 ) ; <nl> + @ @ - 146 , 12 + 175 , 14 @ @ <nl> + } <nl> + catch ( RuntimeException runtimeexception ) <nl> + { <nl> + - logger . error ( ( String ) ( " Unable to parse metadata from " + resourcelocation1 ) , ( Throwable ) runtimeexception ) ; <nl> + + / / logger . error ( ( String ) ( " Unable to parse metadata from " + resourcelocation1 ) , ( Throwable ) runtimeexception ) ; <nl> + + net . minecraftforge . fml . client . FMLClientHandler . instance ( ) . trackBrokenTexture ( resourcelocation1 , runtimeexception . getMessage ( ) ) ; <nl> + continue ; <nl> + } <nl> + catch ( IOException ioexception1 ) <nl> + { <nl> + - logger . error ( ( String ) ( " Using missing texture , unable to load " + resourcelocation1 ) , ( Throwable ) ioexception1 ) ; <nl> + + / / logger . error ( ( String ) ( " Using missing texture , unable to load " + resourcelocation1 ) , ( Throwable ) ioexception1 ) ; <nl> + + net . minecraftforge . fml . client . FMLClientHandler . instance ( ) . trackMissingTexture ( resourcelocation1 ) ; <nl> + continue ; <nl> + } <nl> + <nl> + @ @ - 167 , 6 + 198 , 7 @ @ <nl> stitcher . addSprite ( textureatlassprite ) ; <nl> } <nl> <nl> @ @ - 24 , 7 + 94 , 18 @ @ <nl> int j1 = Math . min ( j , k ) ; <nl> int k1 = MathHelper . calculateLogBaseTwo ( j1 ) ; <nl> <nl> - @ @ - 217 , 9 + 220 , 13 @ @ <nl> + @ @ - 176 , 8 + 208 , 10 @ @ <nl> + this . mipmapLevels = k1 ; <nl> + } <nl> + <nl> + + bar = net . minecraftforge . fml . common . ProgressManager . push ( " Mipmap generation " , skipFirst ? 0 : this . mapRegisteredSprites . size ( ) ) ; <nl> + for ( final TextureAtlasSprite textureatlassprite1 : this . mapRegisteredSprites . values ( ) ) <nl> + { <nl> + + bar . step ( textureatlassprite1 . getIconName ( ) ) ; <nl> + try <nl> + { <nl> + textureatlassprite1 . generateMipmaps ( this . mipmapLevels ) ; <nl> + @ @ - 217 , 9 + 251 , 13 @ @ <nl> <nl> this . missingImage . generateMipmaps ( this . mipmapLevels ) ; <nl> stitcher . addSprite ( this . missingImage ) ; <nl> @ @ - 38 , 7 + 119 , 33 @ @ <nl> stitcher . doStitch ( ) ; <nl> } <nl> catch ( StitcherException stitcherexception ) <nl> - @ @ - 323 , 4 + 330 , 37 @ @ <nl> + @ @ - 228 , 9 + 266 , 11 @ @ <nl> + } <nl> + <nl> + logger . info ( " Created : { } x { } { } - atlas " , new Object [ ] { Integer . valueOf ( stitcher . getCurrentWidth ( ) ) , Integer . valueOf ( stitcher . getCurrentHeight ( ) ) , this . basePath } ) ; <nl> + + bar . step ( " Allocating GL texture " ) ; <nl> + TextureUtil . allocateTextureImpl ( this . getGlTextureId ( ) , this . mipmapLevels , stitcher . getCurrentWidth ( ) , stitcher . getCurrentHeight ( ) ) ; <nl> + Map < String , TextureAtlasSprite > map = Maps . < String , TextureAtlasSprite > newHashMap ( this . mapRegisteredSprites ) ; <nl> + <nl> + + bar . step ( " Uploading GL texture " ) ; <nl> + for ( TextureAtlasSprite textureatlassprite2 : stitcher . getStichSlots ( ) ) <nl> + { <nl> + String s = textureatlassprite2 . getIconName ( ) ; <nl> + @ @ - 260 , 6 + 300 , 13 @ @ <nl> + { <nl> + textureatlassprite3 . copyFrom ( this . missingImage ) ; <nl> + } <nl> + + <nl> + + net . minecraftforge . client . ForgeHooksClient . onTextureStitchedPost ( this ) ; <nl> + + <nl> + + / / TextureUtil . saveGlTexture is gone , FIXME <nl> + + / / if ( ! net . minecraftforge . common . ForgeModContainer . disableStitchedFileSaving ) <nl> + + / / TextureUtil . saveGlTexture ( this . basePath . replaceAll ( " / " , " _ " ) , this . getGlTextureId ( ) , this . mipmapLevels , stitcher . getCurrentWidth ( ) , stitcher . getCurrentHeight ( ) ) ; <nl> + + net . minecraftforge . fml . common . ProgressManager . pop ( bar ) ; <nl> + } <nl> + <nl> + private ResourceLocation completeResourceLocation ( ResourceLocation location , int p _ 147634 _ 2 _ ) <nl> + @ @ - 323 , 4 + 370 , 37 @ @ <nl> { <nl> return this . missingImage ; <nl> } <nl> diff - - git a / rejects / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch . rej b / rejects / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch . rej <nl> deleted file mode 100644 <nl> index 6f2b2d7 . . 0000000 <nl> - - - a / rejects / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch . rej <nl> + + + / dev / null <nl> @ @ - 1 , 25 + 0 , 0 @ @ <nl> - + + + + REJECTED PATCH 1 <nl> - public void doStitch ( ) <nl> - { <nl> - Stitcher . Holder [ ] aholder = ( Stitcher . Holder [ ] ) this . setStitchHolders . toArray ( new Stitcher . Holder [ this . setStitchHolders . size ( ) ] ) ; <nl> - + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Texture stitching " , aholder . length ) ; <nl> - Arrays . sort ( aholder ) ; <nl> - Stitcher . Holder [ ] aholder1 = aholder ; <nl> - int i = aholder . length ; <nl> - + + + + END PATCH <nl> - + + + + REJECTED PATCH 2 <nl> - for ( int j = 0 ; j < i ; + + j ) <nl> - { <nl> - Stitcher . Holder holder = aholder1 [ j ] ; <nl> - + bar . step ( holder . getAtlasSprite ( ) . getIconName ( ) ) ; <nl> - <nl> - if ( ! this . allocateSlot ( holder ) ) <nl> - { <nl> - String s = String . format ( " Unable to fit : % s - size : % dx % d - Maybe try a lowerresolution resourcepack ? " , new Object [ ] { holder . getAtlasSprite ( ) . getIconName ( ) , Integer . valueOf ( holder . getAtlasSprite ( ) . getIconWidth ( ) ) , Integer . valueOf ( holder . getAtlasSprite ( ) . getIconHeight ( ) ) } ) ; <nl> - + net . minecraftforge . fml . common . FMLLog . info ( s ) ; <nl> - + for ( Stitcher . Holder h : aholder ) <nl> - + net . minecraftforge . fml . common . FMLLog . info ( " % s " , h ) ; <nl> - throw new StitcherException ( holder , s ) ; <nl> - } <nl> - } <nl> - + + + + END PATCH <nl> diff - - git a / rejects / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch . rej b / rejects / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch . rej <nl> deleted file mode 100644 <nl> index 9d314e0 . . 0000000 <nl> - - - a / rejects / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch . rej <nl> + + + / dev / null <nl> @ @ - 1 , 17 + 0 , 0 @ @ <nl> - + + + + REJECTED PATCH 1 <nl> - <nl> - public void onResourceManagerReload ( IResourceManager resourceManager ) <nl> - { <nl> - + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Reloading Texture Manager " , this . mapTextureObjects . keySet ( ) . size ( ) , true ) ; <nl> - Iterator iterator = this . mapTextureObjects . entrySet ( ) . iterator ( ) ; <nl> - <nl> - while ( iterator . hasNext ( ) ) <nl> - { <nl> - Entry entry = ( Entry ) iterator . next ( ) ; <nl> - + bar . step ( entry . getKey ( ) . toString ( ) ) ; <nl> - this . loadTexture ( ( ResourceLocation ) entry . getKey ( ) , ( ITextureObject ) entry . getValue ( ) ) ; <nl> - } <nl> - + net . minecraftforge . fml . common . ProgressManager . pop ( bar ) ; <nl> - } <nl> - } <nl> - + + + + END PATCH <nl> diff - - git a / rejects / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch . rej b / rejects / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch . rej <nl> deleted file mode 100644 <nl> index 05280aa . . 0000000 <nl> - - - a / rejects / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch . rej <nl> + + + / dev / null <nl> @ @ - 1 , 118 + 0 , 0 @ @ <nl> - + + + + REJECTED PATCH 3 <nl> - <nl> - public TextureMap ( String p _ i46100 _ 1 _ , IIconCreator iconCreatorIn ) <nl> - { <nl> - + this ( p _ i46100 _ 1 _ , iconCreatorIn , false ) ; <nl> - + } <nl> - + <nl> - + public TextureMap ( String p _ i46100 _ 1 _ , boolean skipFirst ) <nl> - + { <nl> - + this ( p _ i46100 _ 1 _ , null , skipFirst ) ; <nl> - + } <nl> - + <nl> - + public TextureMap ( String p _ i46100 _ 1 _ , IIconCreator iconCreatorIn , boolean skipFirst ) <nl> - + { <nl> - this . listAnimatedSprites = Lists . newArrayList ( ) ; <nl> - this . mapRegisteredSprites = Maps . newHashMap ( ) ; <nl> - this . mapUploadedSprites = Maps . newHashMap ( ) ; <nl> - this . missingImage = new TextureAtlasSprite ( " missingno " ) ; <nl> - this . basePath = p _ i46100 _ 1 _ ; <nl> - this . iconCreator = iconCreatorIn ; <nl> - + this . skipFirst = skipFirst & & ENABLE _ SKIP ; <nl> - } <nl> - <nl> - private void initMissingImage ( ) <nl> - + + + + END PATCH <nl> - + + + + REJECTED PATCH 4 <nl> - this . listAnimatedSprites . clear ( ) ; <nl> - int j = Integer . MAX _ VALUE ; <nl> - int k = 1 < < this . mipmapLevels ; <nl> - + net . minecraftforge . client . ForgeHooksClient . onTextureStitchedPre ( this ) ; <nl> - + net . minecraftforge . fml . common . FMLLog . info ( " Max texture size : % d " , i ) ; <nl> - + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Texture stitching " , skipFirst ? 0 : this . mapRegisteredSprites . size ( ) ) ; <nl> - Iterator iterator = this . mapRegisteredSprites . entrySet ( ) . iterator ( ) ; <nl> - <nl> - - while ( iterator . hasNext ( ) ) <nl> - + while ( ! skipFirst & & iterator . hasNext ( ) ) <nl> - { <nl> - Entry entry = ( Entry ) iterator . next ( ) ; <nl> - TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) entry . getValue ( ) ; <nl> - ResourceLocation resourcelocation = new ResourceLocation ( textureatlassprite . getIconName ( ) ) ; <nl> - ResourceLocation resourcelocation1 = this . completeResourceLocation ( resourcelocation , 0 ) ; <nl> - + bar . step ( resourcelocation1 . getResourcePath ( ) ) ; <nl> - <nl> - + if ( textureatlassprite . hasCustomLoader ( resourceManager , resourcelocation ) ) <nl> - + { <nl> - + if ( ! textureatlassprite . load ( resourceManager , resourcelocation ) ) <nl> - + { <nl> - + j = Math . min ( j , Math . min ( textureatlassprite . getIconWidth ( ) , textureatlassprite . getIconHeight ( ) ) ) ; <nl> - + stitcher . addSprite ( textureatlassprite ) ; <nl> - + } <nl> - + continue ; <nl> - + } <nl> - + <nl> - try <nl> - { <nl> - IResource iresource = resourceManager . getResource ( resourcelocation1 ) ; <nl> - + + + + END PATCH <nl> - + + + + REJECTED PATCH 5 <nl> - } <nl> - catch ( RuntimeException runtimeexception ) <nl> - { <nl> - - logger . error ( " Unable to parse metadata from " + resourcelocation1 , runtimeexception ) ; <nl> - + / / logger . error ( " Unable to parse metadata from " + resourcelocation1 , runtimeexception ) ; <nl> - + net . minecraftforge . fml . client . FMLClientHandler . instance ( ) . trackBrokenTexture ( resourcelocation1 , runtimeexception . getMessage ( ) ) ; <nl> - continue ; <nl> - } <nl> - catch ( IOException ioexception1 ) <nl> - { <nl> - - logger . error ( " Using missing texture , unable to load " + resourcelocation1 , ioexception1 ) ; <nl> - + / / logger . error ( " Using missing texture , unable to load " + resourcelocation1 , ioexception1 ) ; <nl> - + net . minecraftforge . fml . client . FMLClientHandler . instance ( ) . trackMissingTexture ( resourcelocation1 ) ; <nl> - continue ; <nl> - } <nl> - <nl> - + + + + END PATCH <nl> - + + + + REJECTED PATCH 7 <nl> - } <nl> - <nl> - Iterator iterator1 = this . mapRegisteredSprites . values ( ) . iterator ( ) ; <nl> - + bar = net . minecraftforge . fml . common . ProgressManager . push ( " Mipmap generation " , skipFirst ? 0 : this . mapRegisteredSprites . size ( ) ) ; <nl> - <nl> - - while ( iterator1 . hasNext ( ) ) <nl> - + while ( ! skipFirst & & iterator1 . hasNext ( ) ) <nl> - { <nl> - final TextureAtlasSprite textureatlassprite1 = ( TextureAtlasSprite ) iterator1 . next ( ) ; <nl> - + bar . step ( textureatlassprite1 . getIconName ( ) ) ; <nl> - <nl> - try <nl> - { <nl> - + + + + END PATCH <nl> - + + + + REJECTED PATCH 9 <nl> - } <nl> - <nl> - logger . info ( " Created : { } x { } { } - atlas " , new Object [ ] { Integer . valueOf ( stitcher . getCurrentWidth ( ) ) , Integer . valueOf ( stitcher . getCurrentHeight ( ) ) , this . basePath } ) ; <nl> - + bar . step ( " Allocating GL texture " ) ; <nl> - TextureUtil . allocateTextureImpl ( this . getGlTextureId ( ) , this . mipmapLevels , stitcher . getCurrentWidth ( ) , stitcher . getCurrentHeight ( ) ) ; <nl> - HashMap hashmap = Maps . newHashMap ( this . mapRegisteredSprites ) ; <nl> - Iterator iterator2 = stitcher . getStichSlots ( ) . iterator ( ) ; <nl> - TextureAtlasSprite textureatlassprite2 ; <nl> - <nl> - + bar . step ( " Uploading GL texture " ) ; <nl> - while ( iterator2 . hasNext ( ) ) <nl> - { <nl> - textureatlassprite2 = ( TextureAtlasSprite ) iterator2 . next ( ) ; <nl> - + + + + END PATCH <nl> - + + + + REJECTED PATCH 10 <nl> - textureatlassprite2 . copyFrom ( this . missingImage ) ; <nl> - } <nl> - <nl> - + net . minecraftforge . client . ForgeHooksClient . onTextureStitchedPost ( this ) ; <nl> - + <nl> - + if ( ! net . minecraftforge . common . ForgeModContainer . disableStitchedFileSaving ) <nl> - TextureUtil . saveGlTexture ( this . basePath . replaceAll ( " / " , " _ " ) , this . getGlTextureId ( ) , this . mipmapLevels , stitcher . getCurrentWidth ( ) , stitcher . getCurrentHeight ( ) ) ; <nl> - + net . minecraftforge . fml . common . ProgressManager . pop ( bar ) ; <nl> - } <nl> - <nl> - private ResourceLocation completeResourceLocation ( ResourceLocation location , int p _ 147634 _ 2 _ ) <nl> - + + + + END PATCH
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / common / ForgeChunkManager . java b / common / net / minecraftforge / common / ForgeChunkManager . java <nl> index 47ede20 . . dd81e6e 100644 <nl> - - - a / common / net / minecraftforge / common / ForgeChunkManager . java <nl> + + + b / common / net / minecraftforge / common / ForgeChunkManager . java <nl> @ @ - 236 , 8 + 236 , 8 @ @ public class ForgeChunkManager <nl> <nl> static void loadWorld ( World world ) <nl> { <nl> - ArrayListMultimap < String , Ticket > loadedTickets = ArrayListMultimap . < String , Ticket > create ( ) ; <nl> - tickets . put ( world , loadedTickets ) ; <nl> + ArrayListMultimap < String , Ticket > newTickets = ArrayListMultimap . < String , Ticket > create ( ) ; <nl> + tickets . put ( world , newTickets ) ; <nl> <nl> SetMultimap < ChunkCoordIntPair , Ticket > forcedChunkMap = LinkedHashMultimap . create ( ) ; <nl> forcedChunks . put ( world , forcedChunkMap ) ; <nl> @ @ - 253 , 6 + 253 , 7 @ @ public class ForgeChunkManager <nl> <nl> if ( chunkLoaderData . exists ( ) & & chunkLoaderData . isFile ( ) ) <nl> { <nl> + ArrayListMultimap < String , Ticket > loadedTickets = ArrayListMultimap . < String , Ticket > create ( ) ; <nl> NBTTagCompound forcedChunkData ; <nl> try <nl> { <nl> @ @ - 638 , 19 + 639 , 23 @ @ public class ForgeChunkManager <nl> for ( Ticket tick : ticketSet . get ( modId ) ) <nl> { <nl> NBTTagCompound ticket = new NBTTagCompound ( ) ; <nl> - tickets . appendTag ( ticket ) ; <nl> ticket . setByte ( " Type " , ( byte ) tick . ticketType . ordinal ( ) ) ; <nl> ticket . setByte ( " ChunkListDepth " , ( byte ) tick . maxDepth ) ; <nl> if ( tick . modData ! = null ) <nl> { <nl> ticket . setCompoundTag ( " ModData " , tick . modData ) ; <nl> } <nl> - if ( tick . ticketType = = Type . ENTITY ) <nl> + if ( tick . ticketType = = Type . ENTITY & & tick . entity ! = null ) <nl> { <nl> ticket . setInteger ( " chunkX " , MathHelper . floor _ double ( tick . entity . chunkCoordX ) ) ; <nl> ticket . setInteger ( " chunkZ " , MathHelper . floor _ double ( tick . entity . chunkCoordZ ) ) ; <nl> ticket . setLong ( " PersistentIDMSB " , tick . entity . getPersistentID ( ) . getMostSignificantBits ( ) ) ; <nl> ticket . setLong ( " PersistentIDLSB " , tick . entity . getPersistentID ( ) . getLeastSignificantBits ( ) ) ; <nl> + tickets . appendTag ( ticket ) ; <nl> + } <nl> + else if ( tick . ticketType ! = Type . ENTITY ) <nl> + { <nl> + tickets . appendTag ( ticket ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / patches / common / net / minecraft / server / MinecraftServer . java . patch b / patches / common / net / minecraft / server / MinecraftServer . java . patch <nl> index 0f5f1ae . . c566ecb 100644 <nl> - - - a / patches / common / net / minecraft / server / MinecraftServer . java . patch <nl> + + + b / patches / common / net / minecraft / server / MinecraftServer . java . patch <nl> @ @ - 8 , 15 + 8 , 17 @ @ <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . logging . Level ; <nl> - @ @ - 58 , 6 + 59 , 7 @ @ <nl> + @ @ - 58 , 6 + 59 , 9 @ @ <nl> import net . minecraft . src . WorldServerMulti ; <nl> import net . minecraft . src . WorldSettings ; <nl> import net . minecraft . src . WorldType ; <nl> + import net . minecraftforge . common . DimensionManager ; <nl> + + import net . minecraftforge . common . MinecraftForge ; <nl> + + import net . minecraftforge . event . world . WorldEvent ; <nl> <nl> public abstract class MinecraftServer implements Runnable , IPlayerUsage , ICommandSender <nl> { <nl> - @ @ - 137 , 7 + 139 , 9 @ @ <nl> + @ @ - 137 , 7 + 141 , 9 @ @ <nl> public final long [ ] tickTimeArray = new long [ 100 ] ; <nl> <nl> / * * Stats are [ dimension ] [ tick % 100 ] system . nanoTime is stored . * / <nl> @ @ - 27 , 7 + 29 , 7 @ @ <nl> private KeyPair serverKeyPair ; <nl> <nl> / * * Username of the server owner ( for integrated servers ) * / <nl> - @ @ - 204 , 8 + 208 , 6 @ @ <nl> + @ @ - 204 , 8 + 210 , 6 @ @ <nl> { <nl> this . convertMapIfNeeded ( par1Str ) ; <nl> this . setUserMessage ( " menu . loadingLevel " ) ; <nl> @ @ - 36 , 7 + 38 , 7 @ @ <nl> ISaveHandler var6 = this . anvilConverterForAnvilFile . getSaveLoader ( par1Str , true ) ; <nl> WorldInfo var8 = var6 . loadWorldInfo ( ) ; <nl> WorldSettings var7 ; <nl> - @ @ - 224 , 46 + 226 , 21 @ @ <nl> + @ @ - 224 , 46 + 228 , 22 @ @ <nl> var7 . enableBonusChest ( ) ; <nl> } <nl> <nl> @ @ - 84 , 13 + 86 , 16 @ @ <nl> } <nl> <nl> this . serverConfigManager . setPlayerManager ( this . worldServers ) ; <nl> - } <nl> - <nl> + - } <nl> + - <nl> + + MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Load ( world ) ) ; <nl> + + } <nl> + + <nl> + this . serverConfigManager . setPlayerManager ( new WorldServer [ ] { overWorld } ) ; <nl> this . setDifficultyForAllWorlds ( this . getDifficulty ( ) ) ; <nl> this . initialWorldChunkLoad ( ) ; <nl> } <nl> - @ @ - 622 , 13 + 599 , 13 @ @ <nl> + @ @ - 622 , 13 + 602 , 13 @ @ <nl> { <nl> this . theProfiler . startSection ( " levels " ) ; <nl> <nl> @ @ - 108 , 7 + 113 , 7 @ @ <nl> this . theProfiler . startSection ( var4 . getWorldInfo ( ) . getWorldName ( ) ) ; <nl> <nl> if ( this . tickCounter % 20 = = 0 ) <nl> - @ @ - 659 , 7 + 636 , 7 @ @ <nl> + @ @ - 659 , 7 + 639 , 7 @ @ <nl> } <nl> } <nl> <nl> @ @ - 117 , 7 + 122 , 7 @ @ <nl> } <nl> <nl> this . theProfiler . endStartSection ( " connection " ) ; <nl> - @ @ - 717 , 7 + 694 , 8 @ @ <nl> + @ @ - 717 , 7 + 697 , 8 @ @ <nl> * / <nl> public WorldServer worldServerForDimension ( int par1 ) <nl> { <nl> @ @ - 127 , 7 + 132 , 7 @ @ <nl> } <nl> <nl> @ SideOnly ( Side . SERVER ) <nl> - @ @ - 830 , 7 + 808 , 7 @ @ <nl> + @ @ - 830 , 7 + 811 , 7 @ @ <nl> <nl> public String getServerModName ( ) <nl> { <nl> diff - - git a / patches / common / net / minecraft / src / WorldServer . java . patch b / patches / common / net / minecraft / src / WorldServer . java . patch <nl> index a877941 . . 63f63bf 100644 <nl> - - - a / patches / common / net / minecraft / src / WorldServer . java . patch <nl> + + + b / patches / common / net / minecraft / src / WorldServer . java . patch <nl> @ @ - 21 , 16 + 21 , 15 @ @ <nl> <nl> public class WorldServer extends World <nl> { <nl> - @ @ - 71 , 6 + 78 , 8 @ @ <nl> + @ @ - 71 , 6 + 78 , 7 @ @ <nl> { <nl> this . pendingTickListEntries = new TreeSet ( ) ; <nl> } <nl> - + MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Load ( this ) ) ; <nl> + DimensionManager . setWorld ( par4 , this ) ; <nl> } <nl> <nl> / * * <nl> - @ @ - 179 , 10 + 188 , 7 @ @ <nl> + @ @ - 179 , 10 + 187 , 7 @ @ <nl> <nl> private void resetRainAndThunder ( ) <nl> { <nl> @ @ - 42 , 7 + 41 , 7 @ @ <nl> } <nl> <nl> public boolean areAllPlayersAsleep ( ) <nl> - @ @ - 270 , 7 + 276 , 7 @ @ <nl> + @ @ - 270 , 7 + 275 , 7 @ @ <nl> int var10 ; <nl> int var11 ; <nl> <nl> @ @ - 51 , 7 + 50 , 7 @ @ <nl> { <nl> this . updateLCG = this . updateLCG * 3 + 1013904223 ; <nl> var8 = this . updateLCG > > 2 ; <nl> - @ @ - 288 , 7 + 294 , 7 @ @ <nl> + @ @ - 288 , 7 + 293 , 7 @ @ <nl> this . theProfiler . endStartSection ( " iceandsnow " ) ; <nl> int var13 ; <nl> <nl> @ @ - 60 , 7 + 59 , 7 @ @ <nl> { <nl> this . updateLCG = this . updateLCG * 3 + 1013904223 ; <nl> var8 = this . updateLCG > > 2 ; <nl> - @ @ - 362 , 7 + 368 , 8 @ @ <nl> + @ @ - 362 , 7 + 367 , 8 @ @ <nl> public void scheduleBlockUpdate ( int par1 , int par2 , int par3 , int par4 , int par5 ) <nl> { <nl> NextTickListEntry var6 = new NextTickListEntry ( par1 , par2 , par3 , par4 ) ; <nl> @ @ - 70 , 7 + 69 , 7 @ @ <nl> <nl> if ( this . scheduledUpdatesAreImmediate ) <nl> { <nl> - @ @ - 418 , 7 + 425 , 7 @ @ <nl> + @ @ - 418 , 7 + 424 , 7 @ @ <nl> * / <nl> public void updateEntities ( ) <nl> { <nl> @ @ - 79 , 7 + 78 , 7 @ @ <nl> { <nl> if ( this . updateEntityTick + + > = 60 ) <nl> { <nl> - @ @ - 462 , 7 + 469 , 8 @ @ <nl> + @ @ - 462 , 7 + 468 , 8 @ @ <nl> <nl> this . pendingTickListEntries . remove ( var4 ) ; <nl> this . field _ 73064 _ N . remove ( var4 ) ; <nl> @ @ - 89 , 7 + 88 , 7 @ @ <nl> <nl> if ( this . checkChunksExist ( var4 . xCoord - var5 , var4 . yCoord - var5 , var4 . zCoord - var5 , var4 . xCoord + var5 , var4 . yCoord + var5 , var4 . zCoord + var5 ) ) <nl> { <nl> - @ @ - 559 , 15 + 567 , 27 @ @ <nl> + @ @ - 559 , 15 + 566 , 27 @ @ <nl> public List getAllTileEntityInBox ( int par1 , int par2 , int par3 , int par4 , int par5 , int par6 ) <nl> { <nl> ArrayList var7 = new ArrayList ( ) ; <nl> @ @ - 126 , 7 + 125 , 7 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 578 , 6 + 598 , 11 @ @ <nl> + @ @ - 578 , 6 + 597 , 11 @ @ <nl> * Called when checking if a certain block can be mined or not . The ' spawn safe zone ' check is located here . <nl> * / <nl> public boolean canMineBlock ( EntityPlayer par1EntityPlayer , int par2 , int par3 , int par4 ) <nl> @ @ - 138 , 7 + 137 , 7 @ @ <nl> { <nl> int var5 = MathHelper . abs _ int ( par2 - this . worldInfo . getSpawnX ( ) ) ; <nl> int var6 = MathHelper . abs _ int ( par4 - this . worldInfo . getSpawnZ ( ) ) ; <nl> - @ @ - 587 , 7 + 612 , 7 @ @ <nl> + @ @ - 587 , 7 + 611 , 7 @ @ <nl> var6 = var5 ; <nl> } <nl> <nl> @ @ - 147 , 7 + 146 , 7 @ @ <nl> } <nl> <nl> protected void initialize ( WorldSettings par1WorldSettings ) <nl> - @ @ - 670 , 7 + 695 , 7 @ @ <nl> + @ @ - 670 , 7 + 694 , 7 @ @ <nl> * / <nl> protected void createBonusChest ( ) <nl> { <nl> @ @ - 156 , 7 + 155 , 7 @ @ <nl> <nl> for ( int var2 = 0 ; var2 < 10 ; + + var2 ) <nl> { <nl> - @ @ - 713 , 6 + 738 , 7 @ @ <nl> + @ @ - 713 , 6 + 737 , 7 @ @ <nl> } <nl> <nl> this . chunkProvider . saveChunks ( par1 , par2IProgressUpdate ) ; <nl> @ @ - 164 , 7 + 163 , 7 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 971 , 4 + 997 , 9 @ @ <nl> + @ @ - 971 , 4 + 996 , 9 @ @ <nl> { <nl> return this . thePlayerManager ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / src / IntegratedServer . java . patch b / patches / minecraft / net / minecraft / src / IntegratedServer . java . patch <nl> index 871a57f . . b42a7bd 100644 <nl> - - - a / patches / minecraft / net / minecraft / src / IntegratedServer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / src / IntegratedServer . java . patch <nl> @ @ - 1 , 14 + 1 , 16 @ @ <nl> - - - . . / src _ base / minecraft / net / minecraft / src / IntegratedServer . java <nl> + + + . . / src _ work / minecraft / net / minecraft / src / IntegratedServer . java <nl> - @ @ - 8 , 6 + 8 , 7 @ @ <nl> + @ @ - 8 , 6 + 8 , 9 @ @ <nl> import cpw . mods . fml . common . FMLCommonHandler ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . server . MinecraftServer ; <nl> + import net . minecraftforge . common . DimensionManager ; <nl> + + import net . minecraftforge . common . MinecraftForge ; <nl> + + import net . minecraftforge . event . world . WorldEvent ; <nl> <nl> @ SideOnly ( Side . CLIENT ) <nl> public class IntegratedServer extends MinecraftServer <nl> - @ @ - 48 , 44 + 49 , 20 @ @ <nl> + @ @ - 48 , 44 + 51 , 21 @ @ <nl> protected void loadAllWorlds ( String par1Str , String par2Str , long par3 , WorldType par5WorldType ) <nl> { <nl> this . convertMapIfNeeded ( par1Str ) ; <nl> @ @ - 57 , 13 + 59 , 14 @ @ <nl> - this . getConfigurationManager ( ) . setPlayerManager ( this . worldServers ) ; <nl> - } <nl> - <nl> + + MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Load ( world ) ) ; <nl> + } <nl> + <nl> + this . getConfigurationManager ( ) . setPlayerManager ( new WorldServer [ ] { overWorld } ) ; <nl> this . setDifficultyForAllWorlds ( this . getDifficulty ( ) ) ; <nl> this . initialWorldChunkLoad ( ) ; <nl> } <nl> - @ @ - 106 , 6 + 83 , 7 @ @ <nl> + @ @ - 106 , 6 + 86 , 7 @ @ <nl> this . loadAllWorlds ( this . getFolderName ( ) , this . getWorldName ( ) , this . theWorldSettings . getSeed ( ) , this . theWorldSettings . getTerrainType ( ) ) ; <nl> this . setMOTD ( this . getServerOwner ( ) + " - " + this . worldServers [ 0 ] . getWorldInfo ( ) . getWorldName ( ) ) ; <nl> FMLCommonHandler . instance ( ) . handleServerStarting ( this ) ;

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch 
 index 931df54 . . 6d226df 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch 
 @ @ - 1 , 6 + 1 , 24 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / texture / Stitcher . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / texture / Stitcher . java 
 - @ @ - 74 , 6 + 74 , 7 @ @ 
 + @ @ - 59 , 12 + 59 , 17 @ @ 
 + { 
 + Stitcher . Holder [ ] astitcher $ holder = ( Stitcher . Holder [ ] ) this . setStitchHolders . toArray ( new Stitcher . Holder [ this . setStitchHolders . size ( ) ] ) ; 
 + Arrays . sort ( ( Object [ ] ) astitcher $ holder ) ; 
 + + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Texture stitching " , astitcher $ holder . length ) ; 
 + 
 + for ( Stitcher . Holder stitcher $ holder : astitcher $ holder ) 
 + { 
 + + bar . step ( stitcher $ holder . getAtlasSprite ( ) . getIconName ( ) ) ; 
 + if ( ! this . allocateSlot ( stitcher $ holder ) ) 
 + { 
 + String s = String . format ( " Unable to fit : % s - size : % dx % d - Maybe try a lowerresolution resourcepack ? " , new Object [ ] { stitcher $ holder . getAtlasSprite ( ) . getIconName ( ) , Integer . valueOf ( stitcher $ holder . getAtlasSprite ( ) . getIconWidth ( ) ) , Integer . valueOf ( stitcher $ holder . getAtlasSprite ( ) . getIconHeight ( ) ) } ) ; 
 + + net . minecraftforge . fml . common . FMLLog . info ( s ) ; 
 + + for ( Stitcher . Holder h : astitcher $ holder ) 
 + + net . minecraftforge . fml . common . FMLLog . info ( " % s " , h ) ; 
 + throw new StitcherException ( stitcher $ holder , s ) ; 
 + } 
 + } 
 + @ @ - 74 , 6 + 79 , 7 @ @ 
 this . currentWidth = MathHelper . roundUpToPowerOfTwo ( this . currentWidth ) ; 
 this . currentHeight = MathHelper . roundUpToPowerOfTwo ( this . currentHeight ) ; 
 } 
 @ @ - 8 , 7 + 26 , 7 @ @ 
 } 
 
 public List < TextureAtlasSprite > getStichSlots ( ) 
 - @ @ - 262 , 7 + 263 , 7 @ @ 
 + @ @ - 262 , 7 + 268 , 7 @ @ 
 
 public String toString ( ) 
 { 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch b / patches / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch 
 new file mode 100644 
 index 0000000 . . 94c0bb3 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / texture / TextureManager . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / texture / TextureManager . java 
 + @ @ - 139 , 9 + 139 , 12 @ @ 
 + 
 + public void onResourceManagerReload ( IResourceManager resourceManager ) 
 + { 
 + + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Reloading Texture Manager " , this . mapTextureObjects . keySet ( ) . size ( ) , true ) ; 
 + for ( Entry < ResourceLocation , ITextureObject > entry : this . mapTextureObjects . entrySet ( ) ) 
 + { 
 + + bar . step ( entry . getKey ( ) . toString ( ) ) ; 
 + this . loadTexture ( ( ResourceLocation ) entry . getKey ( ) , ( ITextureObject ) entry . getValue ( ) ) ; 
 + } 
 + + net . minecraftforge . fml . common . ProgressManager . pop ( bar ) ; 
 + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch b / patches / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch 
 index 9cbc2e7 . . 1c6f3e180 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch 
 @ @ - 16 , 7 + 16 , 77 @ @ 
 
 public TextureMap ( String p _ i46099 _ 1 _ ) 
 { 
 - @ @ - 167 , 6 + 169 , 7 @ @ 
 + @ @ - 47 , 12 + 49 , 23 @ @ 
 + 
 + public TextureMap ( String p _ i46100 _ 1 _ , IIconCreator iconCreatorIn ) 
 + { 
 + + this ( p _ i46100 _ 1 _ , iconCreatorIn , false ) ; 
 + + } 
 + + 
 + + public TextureMap ( String p _ i46100 _ 1 _ , boolean skipFirst ) 
 + + { 
 + + this ( p _ i46100 _ 1 _ , null , skipFirst ) ; 
 + + } 
 + + 
 + + public TextureMap ( String p _ i46100 _ 1 _ , IIconCreator iconCreatorIn , boolean skipFirst ) 
 + + { 
 + this . listAnimatedSprites = Lists . < TextureAtlasSprite > newArrayList ( ) ; 
 + this . mapRegisteredSprites = Maps . < String , TextureAtlasSprite > newHashMap ( ) ; 
 + this . mapUploadedSprites = Maps . < String , TextureAtlasSprite > newHashMap ( ) ; 
 + this . missingImage = new TextureAtlasSprite ( " missingno " ) ; 
 + this . basePath = p _ i46100 _ 1 _ ; 
 + this . iconCreator = iconCreatorIn ; 
 + + this . skipFirst = skipFirst & & ENABLE _ SKIP ; 
 + } 
 + 
 + private void initMissingImage ( ) 
 + @ @ - 91 , 12 + 104 , 28 @ @ 
 + int j = Integer . MAX _ VALUE ; 
 + int k = 1 < < this . mipmapLevels ; 
 + 
 + + net . minecraftforge . client . ForgeHooksClient . onTextureStitchedPre ( this ) ; 
 + + net . minecraftforge . fml . common . FMLLog . info ( " Max texture size : % d " , i ) ; 
 + + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Texture stitching " , skipFirst ? 0 : this . mapRegisteredSprites . size ( ) ) ; 
 + + 
 + + if ( ! skipFirst ) 
 + for ( Entry < String , TextureAtlasSprite > entry : this . mapRegisteredSprites . entrySet ( ) ) 
 + { 
 + TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) entry . getValue ( ) ; 
 + ResourceLocation resourcelocation = new ResourceLocation ( textureatlassprite . getIconName ( ) ) ; 
 + ResourceLocation resourcelocation1 = this . completeResourceLocation ( resourcelocation , 0 ) ; 
 + + bar . step ( resourcelocation1 . getResourcePath ( ) ) ; 
 + 
 + + if ( textureatlassprite . hasCustomLoader ( resourceManager , resourcelocation ) ) 
 + + { 
 + + if ( ! textureatlassprite . load ( resourceManager , resourcelocation ) ) 
 + + { 
 + + j = Math . min ( j , Math . min ( textureatlassprite . getIconWidth ( ) , textureatlassprite . getIconHeight ( ) ) ) ; 
 + + stitcher . addSprite ( textureatlassprite ) ; 
 + + } 
 + + continue ; 
 + + } 
 + + 
 + try 
 + { 
 + IResource iresource = resourceManager . getResource ( resourcelocation1 ) ; 
 + @ @ - 146 , 12 + 175 , 14 @ @ 
 + } 
 + catch ( RuntimeException runtimeexception ) 
 + { 
 + - logger . error ( ( String ) ( " Unable to parse metadata from " + resourcelocation1 ) , ( Throwable ) runtimeexception ) ; 
 + + / / logger . error ( ( String ) ( " Unable to parse metadata from " + resourcelocation1 ) , ( Throwable ) runtimeexception ) ; 
 + + net . minecraftforge . fml . client . FMLClientHandler . instance ( ) . trackBrokenTexture ( resourcelocation1 , runtimeexception . getMessage ( ) ) ; 
 + continue ; 
 + } 
 + catch ( IOException ioexception1 ) 
 + { 
 + - logger . error ( ( String ) ( " Using missing texture , unable to load " + resourcelocation1 ) , ( Throwable ) ioexception1 ) ; 
 + + / / logger . error ( ( String ) ( " Using missing texture , unable to load " + resourcelocation1 ) , ( Throwable ) ioexception1 ) ; 
 + + net . minecraftforge . fml . client . FMLClientHandler . instance ( ) . trackMissingTexture ( resourcelocation1 ) ; 
 + continue ; 
 + } 
 + 
 + @ @ - 167 , 6 + 198 , 7 @ @ 
 stitcher . addSprite ( textureatlassprite ) ; 
 } 
 
 @ @ - 24 , 7 + 94 , 18 @ @ 
 int j1 = Math . min ( j , k ) ; 
 int k1 = MathHelper . calculateLogBaseTwo ( j1 ) ; 
 
 - @ @ - 217 , 9 + 220 , 13 @ @ 
 + @ @ - 176 , 8 + 208 , 10 @ @ 
 + this . mipmapLevels = k1 ; 
 + } 
 + 
 + + bar = net . minecraftforge . fml . common . ProgressManager . push ( " Mipmap generation " , skipFirst ? 0 : this . mapRegisteredSprites . size ( ) ) ; 
 + for ( final TextureAtlasSprite textureatlassprite1 : this . mapRegisteredSprites . values ( ) ) 
 + { 
 + + bar . step ( textureatlassprite1 . getIconName ( ) ) ; 
 + try 
 + { 
 + textureatlassprite1 . generateMipmaps ( this . mipmapLevels ) ; 
 + @ @ - 217 , 9 + 251 , 13 @ @ 
 
 this . missingImage . generateMipmaps ( this . mipmapLevels ) ; 
 stitcher . addSprite ( this . missingImage ) ; 
 @ @ - 38 , 7 + 119 , 33 @ @ 
 stitcher . doStitch ( ) ; 
 } 
 catch ( StitcherException stitcherexception ) 
 - @ @ - 323 , 4 + 330 , 37 @ @ 
 + @ @ - 228 , 9 + 266 , 11 @ @ 
 + } 
 + 
 + logger . info ( " Created : { } x { } { } - atlas " , new Object [ ] { Integer . valueOf ( stitcher . getCurrentWidth ( ) ) , Integer . valueOf ( stitcher . getCurrentHeight ( ) ) , this . basePath } ) ; 
 + + bar . step ( " Allocating GL texture " ) ; 
 + TextureUtil . allocateTextureImpl ( this . getGlTextureId ( ) , this . mipmapLevels , stitcher . getCurrentWidth ( ) , stitcher . getCurrentHeight ( ) ) ; 
 + Map < String , TextureAtlasSprite > map = Maps . < String , TextureAtlasSprite > newHashMap ( this . mapRegisteredSprites ) ; 
 + 
 + + bar . step ( " Uploading GL texture " ) ; 
 + for ( TextureAtlasSprite textureatlassprite2 : stitcher . getStichSlots ( ) ) 
 + { 
 + String s = textureatlassprite2 . getIconName ( ) ; 
 + @ @ - 260 , 6 + 300 , 13 @ @ 
 + { 
 + textureatlassprite3 . copyFrom ( this . missingImage ) ; 
 + } 
 + + 
 + + net . minecraftforge . client . ForgeHooksClient . onTextureStitchedPost ( this ) ; 
 + + 
 + + / / TextureUtil . saveGlTexture is gone , FIXME 
 + + / / if ( ! net . minecraftforge . common . ForgeModContainer . disableStitchedFileSaving ) 
 + + / / TextureUtil . saveGlTexture ( this . basePath . replaceAll ( " / " , " _ " ) , this . getGlTextureId ( ) , this . mipmapLevels , stitcher . getCurrentWidth ( ) , stitcher . getCurrentHeight ( ) ) ; 
 + + net . minecraftforge . fml . common . ProgressManager . pop ( bar ) ; 
 + } 
 + 
 + private ResourceLocation completeResourceLocation ( ResourceLocation location , int p _ 147634 _ 2 _ ) 
 + @ @ - 323 , 4 + 370 , 37 @ @ 
 { 
 return this . missingImage ; 
 } 
 diff - - git a / rejects / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch . rej b / rejects / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch . rej 
 deleted file mode 100644 
 index 6f2b2d7 . . 0000000 
 - - - a / rejects / minecraft / net / minecraft / client / renderer / texture / Stitcher . java . patch . rej 
 + + + / dev / null 
 @ @ - 1 , 25 + 0 , 0 @ @ 
 - + + + + REJECTED PATCH 1 
 - public void doStitch ( ) 
 - { 
 - Stitcher . Holder [ ] aholder = ( Stitcher . Holder [ ] ) this . setStitchHolders . toArray ( new Stitcher . Holder [ this . setStitchHolders . size ( ) ] ) ; 
 - + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Texture stitching " , aholder . length ) ; 
 - Arrays . sort ( aholder ) ; 
 - Stitcher . Holder [ ] aholder1 = aholder ; 
 - int i = aholder . length ; 
 - + + + + END PATCH 
 - + + + + REJECTED PATCH 2 
 - for ( int j = 0 ; j < i ; + + j ) 
 - { 
 - Stitcher . Holder holder = aholder1 [ j ] ; 
 - + bar . step ( holder . getAtlasSprite ( ) . getIconName ( ) ) ; 
 - 
 - if ( ! this . allocateSlot ( holder ) ) 
 - { 
 - String s = String . format ( " Unable to fit : % s - size : % dx % d - Maybe try a lowerresolution resourcepack ? " , new Object [ ] { holder . getAtlasSprite ( ) . getIconName ( ) , Integer . valueOf ( holder . getAtlasSprite ( ) . getIconWidth ( ) ) , Integer . valueOf ( holder . getAtlasSprite ( ) . getIconHeight ( ) ) } ) ; 
 - + net . minecraftforge . fml . common . FMLLog . info ( s ) ; 
 - + for ( Stitcher . Holder h : aholder ) 
 - + net . minecraftforge . fml . common . FMLLog . info ( " % s " , h ) ; 
 - throw new StitcherException ( holder , s ) ; 
 - } 
 - } 
 - + + + + END PATCH 
 diff - - git a / rejects / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch . rej b / rejects / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch . rej 
 deleted file mode 100644 
 index 9d314e0 . . 0000000 
 - - - a / rejects / minecraft / net / minecraft / client / renderer / texture / TextureManager . java . patch . rej 
 + + + / dev / null 
 @ @ - 1 , 17 + 0 , 0 @ @ 
 - + + + + REJECTED PATCH 1 
 - 
 - public void onResourceManagerReload ( IResourceManager resourceManager ) 
 - { 
 - + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Reloading Texture Manager " , this . mapTextureObjects . keySet ( ) . size ( ) , true ) ; 
 - Iterator iterator = this . mapTextureObjects . entrySet ( ) . iterator ( ) ; 
 - 
 - while ( iterator . hasNext ( ) ) 
 - { 
 - Entry entry = ( Entry ) iterator . next ( ) ; 
 - + bar . step ( entry . getKey ( ) . toString ( ) ) ; 
 - this . loadTexture ( ( ResourceLocation ) entry . getKey ( ) , ( ITextureObject ) entry . getValue ( ) ) ; 
 - } 
 - + net . minecraftforge . fml . common . ProgressManager . pop ( bar ) ; 
 - } 
 - } 
 - + + + + END PATCH 
 diff - - git a / rejects / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch . rej b / rejects / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch . rej 
 deleted file mode 100644 
 index 05280aa . . 0000000 
 - - - a / rejects / minecraft / net / minecraft / client / renderer / texture / TextureMap . java . patch . rej 
 + + + / dev / null 
 @ @ - 1 , 118 + 0 , 0 @ @ 
 - + + + + REJECTED PATCH 3 
 - 
 - public TextureMap ( String p _ i46100 _ 1 _ , IIconCreator iconCreatorIn ) 
 - { 
 - + this ( p _ i46100 _ 1 _ , iconCreatorIn , false ) ; 
 - + } 
 - + 
 - + public TextureMap ( String p _ i46100 _ 1 _ , boolean skipFirst ) 
 - + { 
 - + this ( p _ i46100 _ 1 _ , null , skipFirst ) ; 
 - + } 
 - + 
 - + public TextureMap ( String p _ i46100 _ 1 _ , IIconCreator iconCreatorIn , boolean skipFirst ) 
 - + { 
 - this . listAnimatedSprites = Lists . newArrayList ( ) ; 
 - this . mapRegisteredSprites = Maps . newHashMap ( ) ; 
 - this . mapUploadedSprites = Maps . newHashMap ( ) ; 
 - this . missingImage = new TextureAtlasSprite ( " missingno " ) ; 
 - this . basePath = p _ i46100 _ 1 _ ; 
 - this . iconCreator = iconCreatorIn ; 
 - + this . skipFirst = skipFirst & & ENABLE _ SKIP ; 
 - } 
 - 
 - private void initMissingImage ( ) 
 - + + + + END PATCH 
 - + + + + REJECTED PATCH 4 
 - this . listAnimatedSprites . clear ( ) ; 
 - int j = Integer . MAX _ VALUE ; 
 - int k = 1 < < this . mipmapLevels ; 
 - + net . minecraftforge . client . ForgeHooksClient . onTextureStitchedPre ( this ) ; 
 - + net . minecraftforge . fml . common . FMLLog . info ( " Max texture size : % d " , i ) ; 
 - + net . minecraftforge . fml . common . ProgressManager . ProgressBar bar = net . minecraftforge . fml . common . ProgressManager . push ( " Texture stitching " , skipFirst ? 0 : this . mapRegisteredSprites . size ( ) ) ; 
 - Iterator iterator = this . mapRegisteredSprites . entrySet ( ) . iterator ( ) ; 
 - 
 - - while ( iterator . hasNext ( ) ) 
 - + while ( ! skipFirst & & iterator . hasNext ( ) ) 
 - { 
 - Entry entry = ( Entry ) iterator . next ( ) ; 
 - TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) entry . getValue ( ) ; 
 - ResourceLocation resourcelocation = new ResourceLocation ( textureatlassprite . getIconName ( ) ) ; 
 - ResourceLocation resourcelocation1 = this . completeResourceLocation ( resourcelocation , 0 ) ; 
 - + bar . step ( resourcelocation1 . getResourcePath ( ) ) ; 
 - 
 - + if ( textureatlassprite . hasCustomLoader ( resourceManager , resourcelocation ) ) 
 - + { 
 - + if ( ! textureatlassprite . load ( resourceManager , resourcelocation ) ) 
 - + { 
 - + j = Math . min ( j , Math . min ( textureatlassprite . getIconWidth ( ) , textureatlassprite . getIconHeight ( ) ) ) ; 
 - + stitcher . addSprite ( textureatlassprite ) ; 
 - + } 
 - + continue ; 
 - + } 
 - + 
 - try 
 - { 
 - IResource iresource = resourceManager . getResource ( resourcelocation1 ) ; 
 - + + + + END PATCH 
 - + + + + REJECTED PATCH 5 
 - } 
 - catch ( RuntimeException runtimeexception ) 
 - { 
 - - logger . error ( " Unable to parse metadata from " + resourcelocation1 , runtimeexception ) ; 
 - + / / logger . error ( " Unable to parse metadata from " + resourcelocation1 , runtimeexception ) ; 
 - + net . minecraftforge . fml . client . FMLClientHandler . instance ( ) . trackBrokenTexture ( resourcelocation1 , runtimeexception . getMessage ( ) ) ; 
 - continue ; 
 - } 
 - catch ( IOException ioexception1 ) 
 - { 
 - - logger . error ( " Using missing texture , unable to load " + resourcelocation1 , ioexception1 ) ; 
 - + / / logger . error ( " Using missing texture , unable to load " + resourcelocation1 , ioexception1 ) ; 
 - + net . minecraftforge . fml . client . FMLClientHandler . instance ( ) . trackMissingTexture ( resourcelocation1 ) ; 
 - continue ; 
 - } 
 - 
 - + + + + END PATCH 
 - + + + + REJECTED PATCH 7 
 - } 
 - 
 - Iterator iterator1 = this . mapRegisteredSprites . values ( ) . iterator ( ) ; 
 - + bar = net . minecraftforge . fml . common . ProgressManager . push ( " Mipmap generation " , skipFirst ? 0 : this . mapRegisteredSprites . size ( ) ) ; 
 - 
 - - while ( iterator1 . hasNext ( ) ) 
 - + while ( ! skipFirst & & iterator1 . hasNext ( ) ) 
 - { 
 - final TextureAtlasSprite textureatlassprite1 = ( TextureAtlasSprite ) iterator1 . next ( ) ; 
 - + bar . step ( textureatlassprite1 . getIconName ( ) ) ; 
 - 
 - try 
 - { 
 - + + + + END PATCH 
 - + + + + REJECTED PATCH 9 
 - } 
 - 
 - logger . info ( " Created : { } x { } { } - atlas " , new Object [ ] { Integer . valueOf ( stitcher . getCurrentWidth ( ) ) , Integer . valueOf ( stitcher . getCurrentHeight ( ) ) , this . basePath } ) ; 
 - + bar . step ( " Allocating GL texture " ) ; 
 - TextureUtil . allocateTextureImpl ( this . getGlTextureId ( ) , this . mipmapLevels , stitcher . getCurrentWidth ( ) , stitcher . getCurrentHeight ( ) ) ; 
 - HashMap hashmap = Maps . newHashMap ( this . mapRegisteredSprites ) ; 
 - Iterator iterator2 = stitcher . getStichSlots ( ) . iterator ( ) ; 
 - TextureAtlasSprite textureatlassprite2 ; 
 - 
 - + bar . step ( " Uploading GL texture " ) ; 
 - while ( iterator2 . hasNext ( ) ) 
 - { 
 - textureatlassprite2 = ( TextureAtlasSprite ) iterator2 . next ( ) ; 
 - + + + + END PATCH 
 - + + + + REJECTED PATCH 10 
 - textureatlassprite2 . copyFrom ( this . missingImage ) ; 
 - } 
 - 
 - + net . minecraftforge . client . ForgeHooksClient . onTextureStitchedPost ( this ) ; 
 - + 
 - + if ( ! net . minecraftforge . common . ForgeModContainer . disableStitchedFileSaving ) 
 - TextureUtil . saveGlTexture ( this . basePath . replaceAll ( " / " , " _ " ) , this . getGlTextureId ( ) , this . mipmapLevels , stitcher . getCurrentWidth ( ) , stitcher . getCurrentHeight ( ) ) ; 
 - + net . minecraftforge . fml . common . ProgressManager . pop ( bar ) ; 
 - } 
 - 
 - private ResourceLocation completeResourceLocation ( ResourceLocation location , int p _ 147634 _ 2 _ ) 
 - + + + + END PATCH

NEAREST DIFF:
diff - - git a / common / net / minecraftforge / common / ForgeChunkManager . java b / common / net / minecraftforge / common / ForgeChunkManager . java 
 index 47ede20 . . dd81e6e 100644 
 - - - a / common / net / minecraftforge / common / ForgeChunkManager . java 
 + + + b / common / net / minecraftforge / common / ForgeChunkManager . java 
 @ @ - 236 , 8 + 236 , 8 @ @ public class ForgeChunkManager 
 
 static void loadWorld ( World world ) 
 { 
 - ArrayListMultimap < String , Ticket > loadedTickets = ArrayListMultimap . < String , Ticket > create ( ) ; 
 - tickets . put ( world , loadedTickets ) ; 
 + ArrayListMultimap < String , Ticket > newTickets = ArrayListMultimap . < String , Ticket > create ( ) ; 
 + tickets . put ( world , newTickets ) ; 
 
 SetMultimap < ChunkCoordIntPair , Ticket > forcedChunkMap = LinkedHashMultimap . create ( ) ; 
 forcedChunks . put ( world , forcedChunkMap ) ; 
 @ @ - 253 , 6 + 253 , 7 @ @ public class ForgeChunkManager 
 
 if ( chunkLoaderData . exists ( ) & & chunkLoaderData . isFile ( ) ) 
 { 
 + ArrayListMultimap < String , Ticket > loadedTickets = ArrayListMultimap . < String , Ticket > create ( ) ; 
 NBTTagCompound forcedChunkData ; 
 try 
 { 
 @ @ - 638 , 19 + 639 , 23 @ @ public class ForgeChunkManager 
 for ( Ticket tick : ticketSet . get ( modId ) ) 
 { 
 NBTTagCompound ticket = new NBTTagCompound ( ) ; 
 - tickets . appendTag ( ticket ) ; 
 ticket . setByte ( " Type " , ( byte ) tick . ticketType . ordinal ( ) ) ; 
 ticket . setByte ( " ChunkListDepth " , ( byte ) tick . maxDepth ) ; 
 if ( tick . modData ! = null ) 
 { 
 ticket . setCompoundTag ( " ModData " , tick . modData ) ; 
 } 
 - if ( tick . ticketType = = Type . ENTITY ) 
 + if ( tick . ticketType = = Type . ENTITY & & tick . entity ! = null ) 
 { 
 ticket . setInteger ( " chunkX " , MathHelper . floor _ double ( tick . entity . chunkCoordX ) ) ; 
 ticket . setInteger ( " chunkZ " , MathHelper . floor _ double ( tick . entity . chunkCoordZ ) ) ; 
 ticket . setLong ( " PersistentIDMSB " , tick . entity . getPersistentID ( ) . getMostSignificantBits ( ) ) ; 
 ticket . setLong ( " PersistentIDLSB " , tick . entity . getPersistentID ( ) . getLeastSignificantBits ( ) ) ; 
 + tickets . appendTag ( ticket ) ; 
 + } 
 + else if ( tick . ticketType ! = Type . ENTITY ) 
 + { 
 + tickets . appendTag ( ticket ) ; 
 } 
 } 
 } 
 diff - - git a / patches / common / net / minecraft / server / MinecraftServer . java . patch b / patches / common / net / minecraft / server / MinecraftServer . java . patch 
 index 0f5f1ae . . c566ecb 100644 
 - - - a / patches / common / net / minecraft / server / MinecraftServer . java . patch 
 + + + b / patches / common / net / minecraft / server / MinecraftServer . java . patch 
 @ @ - 8 , 15 + 8 , 17 @ @ 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . logging . Level ; 
 - @ @ - 58 , 6 + 59 , 7 @ @ 
 + @ @ - 58 , 6 + 59 , 9 @ @ 
 import net . minecraft . src . WorldServerMulti ; 
 import net . minecraft . src . WorldSettings ; 
 import net . minecraft . src . WorldType ; 
 + import net . minecraftforge . common . DimensionManager ; 
 + + import net . minecraftforge . common . MinecraftForge ; 
 + + import net . minecraftforge . event . world . WorldEvent ; 
 
 public abstract class MinecraftServer implements Runnable , IPlayerUsage , ICommandSender 
 { 
 - @ @ - 137 , 7 + 139 , 9 @ @ 
 + @ @ - 137 , 7 + 141 , 9 @ @ 
 public final long [ ] tickTimeArray = new long [ 100 ] ; 
 
 / * * Stats are [ dimension ] [ tick % 100 ] system . nanoTime is stored . * / 
 @ @ - 27 , 7 + 29 , 7 @ @ 
 private KeyPair serverKeyPair ; 
 
 / * * Username of the server owner ( for integrated servers ) * / 
 - @ @ - 204 , 8 + 208 , 6 @ @ 
 + @ @ - 204 , 8 + 210 , 6 @ @ 
 { 
 this . convertMapIfNeeded ( par1Str ) ; 
 this . setUserMessage ( " menu . loadingLevel " ) ; 
 @ @ - 36 , 7 + 38 , 7 @ @ 
 ISaveHandler var6 = this . anvilConverterForAnvilFile . getSaveLoader ( par1Str , true ) ; 
 WorldInfo var8 = var6 . loadWorldInfo ( ) ; 
 WorldSettings var7 ; 
 - @ @ - 224 , 46 + 226 , 21 @ @ 
 + @ @ - 224 , 46 + 228 , 22 @ @ 
 var7 . enableBonusChest ( ) ; 
 } 
 
 @ @ - 84 , 13 + 86 , 16 @ @ 
 } 
 
 this . serverConfigManager . setPlayerManager ( this . worldServers ) ; 
 - } 
 - 
 + - } 
 + - 
 + + MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Load ( world ) ) ; 
 + + } 
 + + 
 + this . serverConfigManager . setPlayerManager ( new WorldServer [ ] { overWorld } ) ; 
 this . setDifficultyForAllWorlds ( this . getDifficulty ( ) ) ; 
 this . initialWorldChunkLoad ( ) ; 
 } 
 - @ @ - 622 , 13 + 599 , 13 @ @ 
 + @ @ - 622 , 13 + 602 , 13 @ @ 
 { 
 this . theProfiler . startSection ( " levels " ) ; 
 
 @ @ - 108 , 7 + 113 , 7 @ @ 
 this . theProfiler . startSection ( var4 . getWorldInfo ( ) . getWorldName ( ) ) ; 
 
 if ( this . tickCounter % 20 = = 0 ) 
 - @ @ - 659 , 7 + 636 , 7 @ @ 
 + @ @ - 659 , 7 + 639 , 7 @ @ 
 } 
 } 
 
 @ @ - 117 , 7 + 122 , 7 @ @ 
 } 
 
 this . theProfiler . endStartSection ( " connection " ) ; 
 - @ @ - 717 , 7 + 694 , 8 @ @ 
 + @ @ - 717 , 7 + 697 , 8 @ @ 
 * / 
 public WorldServer worldServerForDimension ( int par1 ) 
 { 
 @ @ - 127 , 7 + 132 , 7 @ @ 
 } 
 
 @ SideOnly ( Side . SERVER ) 
 - @ @ - 830 , 7 + 808 , 7 @ @ 
 + @ @ - 830 , 7 + 811 , 7 @ @ 
 
 public String getServerModName ( ) 
 { 
 diff - - git a / patches / common / net / minecraft / src / WorldServer . java . patch b / patches / common / net / minecraft / src / WorldServer . java . patch 
 index a877941 . . 63f63bf 100644 
 - - - a / patches / common / net / minecraft / src / WorldServer . java . patch 
 + + + b / patches / common / net / minecraft / src / WorldServer . java . patch 
 @ @ - 21 , 16 + 21 , 15 @ @ 
 
 public class WorldServer extends World 
 { 
 - @ @ - 71 , 6 + 78 , 8 @ @ 
 + @ @ - 71 , 6 + 78 , 7 @ @ 
 { 
 this . pendingTickListEntries = new TreeSet ( ) ; 
 } 
 - + MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Load ( this ) ) ; 
 + DimensionManager . setWorld ( par4 , this ) ; 
 } 
 
 / * * 
 - @ @ - 179 , 10 + 188 , 7 @ @ 
 + @ @ - 179 , 10 + 187 , 7 @ @ 
 
 private void resetRainAndThunder ( ) 
 { 
 @ @ - 42 , 7 + 41 , 7 @ @ 
 } 
 
 public boolean areAllPlayersAsleep ( ) 
 - @ @ - 270 , 7 + 276 , 7 @ @ 
 + @ @ - 270 , 7 + 275 , 7 @ @ 
 int var10 ; 
 int var11 ; 
 
 @ @ - 51 , 7 + 50 , 7 @ @ 
 { 
 this . updateLCG = this . updateLCG * 3 + 1013904223 ; 
 var8 = this . updateLCG > > 2 ; 
 - @ @ - 288 , 7 + 294 , 7 @ @ 
 + @ @ - 288 , 7 + 293 , 7 @ @ 
 this . theProfiler . endStartSection ( " iceandsnow " ) ; 
 int var13 ; 
 
 @ @ - 60 , 7 + 59 , 7 @ @ 
 { 
 this . updateLCG = this . updateLCG * 3 + 1013904223 ; 
 var8 = this . updateLCG > > 2 ; 
 - @ @ - 362 , 7 + 368 , 8 @ @ 
 + @ @ - 362 , 7 + 367 , 8 @ @ 
 public void scheduleBlockUpdate ( int par1 , int par2 , int par3 , int par4 , int par5 ) 
 { 
 NextTickListEntry var6 = new NextTickListEntry ( par1 , par2 , par3 , par4 ) ; 
 @ @ - 70 , 7 + 69 , 7 @ @ 
 
 if ( this . scheduledUpdatesAreImmediate ) 
 { 
 - @ @ - 418 , 7 + 425 , 7 @ @ 
 + @ @ - 418 , 7 + 424 , 7 @ @ 
 * / 
 public void updateEntities ( ) 
 { 
 @ @ - 79 , 7 + 78 , 7 @ @ 
 { 
 if ( this . updateEntityTick + + > = 60 ) 
 { 
 - @ @ - 462 , 7 + 469 , 8 @ @ 
 + @ @ - 462 , 7 + 468 , 8 @ @ 
 
 this . pendingTickListEntries . remove ( var4 ) ; 
 this . field _ 73064 _ N . remove ( var4 ) ; 
 @ @ - 89 , 7 + 88 , 7 @ @ 
 
 if ( this . checkChunksExist ( var4 . xCoord - var5 , var4 . yCoord - var5 , var4 . zCoord - var5 , var4 . xCoord + var5 , var4 . yCoord + var5 , var4 . zCoord + var5 ) ) 
 { 
 - @ @ - 559 , 15 + 567 , 27 @ @ 
 + @ @ - 559 , 15 + 566 , 27 @ @ 
 public List getAllTileEntityInBox ( int par1 , int par2 , int par3 , int par4 , int par5 , int par6 ) 
 { 
 ArrayList var7 = new ArrayList ( ) ; 
 @ @ - 126 , 7 + 125 , 7 @ @ 
 } 
 } 
 
 - @ @ - 578 , 6 + 598 , 11 @ @ 
 + @ @ - 578 , 6 + 597 , 11 @ @ 
 * Called when checking if a certain block can be mined or not . The ' spawn safe zone ' check is located here . 
 * / 
 public boolean canMineBlock ( EntityPlayer par1EntityPlayer , int par2 , int par3 , int par4 ) 
 @ @ - 138 , 7 + 137 , 7 @ @ 
 { 
 int var5 = MathHelper . abs _ int ( par2 - this . worldInfo . getSpawnX ( ) ) ; 
 int var6 = MathHelper . abs _ int ( par4 - this . worldInfo . getSpawnZ ( ) ) ; 
 - @ @ - 587 , 7 + 612 , 7 @ @ 
 + @ @ - 587 , 7 + 611 , 7 @ @ 
 var6 = var5 ; 
 } 
 
 @ @ - 147 , 7 + 146 , 7 @ @ 
 } 
 
 protected void initialize ( WorldSettings par1WorldSettings ) 
 - @ @ - 670 , 7 + 695 , 7 @ @ 
 + @ @ - 670 , 7 + 694 , 7 @ @ 
 * / 
 protected void createBonusChest ( ) 
 { 
 @ @ - 156 , 7 + 155 , 7 @ @ 
 
 for ( int var2 = 0 ; var2 < 10 ; + + var2 ) 
 { 
 - @ @ - 713 , 6 + 738 , 7 @ @ 
 + @ @ - 713 , 6 + 737 , 7 @ @ 
 } 
 
 this . chunkProvider . saveChunks ( par1 , par2IProgressUpdate ) ; 
 @ @ - 164 , 7 + 163 , 7 @ @ 
 } 
 } 
 
 - @ @ - 971 , 4 + 997 , 9 @ @ 
 + @ @ - 971 , 4 + 996 , 9 @ @ 
 { 
 return this . thePlayerManager ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / src / IntegratedServer . java . patch b / patches / minecraft / net / minecraft / src / IntegratedServer . java . patch 
 index 871a57f . . b42a7bd 100644 
 - - - a / patches / minecraft / net / minecraft / src / IntegratedServer . java . patch 
 + + + b / patches / minecraft / net / minecraft / src / IntegratedServer . java . patch 
 @ @ - 1 , 14 + 1 , 16 @ @ 
 - - - . . / src _ base / minecraft / net / minecraft / src / IntegratedServer . java 
 + + + . . / src _ work / minecraft / net / minecraft / src / IntegratedServer . java 
 - @ @ - 8 , 6 + 8 , 7 @ @ 
 + @ @ - 8 , 6 + 8 , 9 @ @ 
 import cpw . mods . fml . common . FMLCommonHandler ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . server . MinecraftServer ; 
 + import net . minecraftforge . common . DimensionManager ; 
 + + import net . minecraftforge . common . MinecraftForge ; 
 + + import net . minecraftforge . event . world . WorldEvent ; 
 
 @ SideOnly ( Side . CLIENT ) 
 public class IntegratedServer extends MinecraftServer 
 - @ @ - 48 , 44 + 49 , 20 @ @ 
 + @ @ - 48 , 44 + 51 , 21 @ @ 
 protected void loadAllWorlds ( String par1Str , String par2Str , long par3 , WorldType par5WorldType ) 
 { 
 this . convertMapIfNeeded ( par1Str ) ; 
 @ @ - 57 , 13 + 59 , 14 @ @ 
 - this . getConfigurationManager ( ) . setPlayerManager ( this . worldServers ) ; 
 - } 
 - 
 + + MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Load ( world ) ) ; 
 + } 
 + 
 + this . getConfigurationManager ( ) . setPlayerManager ( new WorldServer [ ] { overWorld } ) ; 
 this . setDifficultyForAllWorlds ( this . getDifficulty ( ) ) ; 
 this . initialWorldChunkLoad ( ) ; 
 } 
 - @ @ - 106 , 6 + 83 , 7 @ @ 
 + @ @ - 106 , 6 + 86 , 7 @ @ 
 this . loadAllWorlds ( this . getFolderName ( ) , this . getWorldName ( ) , this . theWorldSettings . getSeed ( ) , this . theWorldSettings . getTerrainType ( ) ) ; 
 this . setMOTD ( this . getServerOwner ( ) + " - " + this . worldServers [ 0 ] . getWorldInfo ( ) . getWorldName ( ) ) ; 
 FMLCommonHandler . instance ( ) . handleServerStarting ( this ) ;
