BLEU SCORE: 0.033864985683445356

TEST MSG: Specify version information using Java 8 ' s Package Version system .
GENERATED MSG: Work on installer json generation .

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index c30ff8a . . d80e6e8 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 13 , 6 + 13 , 7 @ @ import groovy . json . JsonSlurper <nl> import groovy . json . JsonBuilder <nl> import java . text . SimpleDateFormat <nl> import java . util . Date <nl> + import java . util . LinkedHashMap <nl> import java . security . MessageDigest <nl> import java . net . URL <nl> import net . minecraftforge . gradle . common . task . ArchiveChecksum <nl> @ @ - 90 , 6 + 91 , 8 @ @ project ( ' : forge ' ) { <nl> mavenCentral ( ) <nl> } <nl> ext { <nl> + MC _ VERSION = ' 1 . 13 ' <nl> + SPEC _ VERSION = ' 15 . 24 . 0 ' <nl> MCP _ ARTIFACT = project ( ' : mcp ' ) . mcp . config <nl> MCP _ VERSION = project ( ' : mcp ' ) . mcp . config . version . split ( ' - ' ) [ 1 ] / / The timestamp only . <nl> } <nl> @ @ - 117 , 10 + 120 , 21 @ @ project ( ' : forge ' ) { <nl> target : ' fmldevserver ' <nl> ] <nl> } <nl> - mcVersion = ' 1 . 13 ' <nl> } <nl> + <nl> + def getVersion = { <nl> + def out = MC _ VERSION . replace ( ' - ' , ' _ ' ) + ' - ' + SPEC _ VERSION + ' . ' + ( System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 ) <nl> + def branch = grgit . branch . current ( ) . name <nl> + if ( branch ! = null & & branch ! = ' master ' & & branch ! = ' HEAD ' & & branch ! = MC _ VERSION & & branch ! = MC _ VERSION + ' . 0 ' ) { <nl> + if ( ! ( branch . endsWith ( ' . x ' ) & & MC _ VERSION . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) ) <nl> + out + = " - $ { branch } " <nl> + } <nl> + println ( ' Version : ' + out ) <nl> + return out <nl> + } <nl> + <nl> group = ' net . minecraftforge ' <nl> - version = getVersion ( patcher . mcVersion , ' 15 . 24 . 0 ' ) <nl> + version = getVersion ( ) <nl> applyPatches { <nl> canonicalizeAccess true <nl> canonicalizeWhitespace true <nl> @ @ - 186 , 24 + 200 , 6 @ @ project ( ' : forge ' ) { <nl> workingDir ' runserver ' <nl> } <nl> <nl> - task ciWriteBuildNumber { <nl> - doLast { <nl> - def file = file ( " $ rootDir / src / main / java / net / minecraftforge / common / ForgeVersion . java " ) <nl> - def bn = System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 <nl> - def outfile = ' ' <nl> - <nl> - file . eachLine { String s - > <nl> - if ( s . matches ( ' ^ public static final int buildVersion = [ \ \ d ] + ; \ $ ' ) ) <nl> - s = " public static final int buildVersion = $ { bn } ; " <nl> - if ( s . matches ( ' ^ public static final String mcVersion = " [ ^ \ \ " ] + " ; ' ) ) <nl> - s = " public static final String mcVersion = \ " $ { patcher . mcVersion } \ " ; " <nl> - outfile + = ( s + ' \ n ' ) <nl> - } <nl> - file . write ( outfile ) <nl> - } <nl> - } <nl> - <nl> - <nl> def extraTxts = [ <nl> rootProject . file ( ' CREDITS . txt ' ) , <nl> rootProject . file ( ' LICENSE . txt ' ) <nl> @ @ - 341 , 7 + 337 , 7 @ @ project ( ' : forge ' ) { <nl> releaseTime : timestamp , <nl> type : ' release ' , <nl> mainClass : ' cpw . mods . modlauncher . Launcher ' , <nl> - inheritsFrom : patcher . mcVersion , <nl> + inheritsFrom : MC _ VERSION , <nl> logging : [ : ] , <nl> arguments : [ <nl> game : json _ vanilla . arguments . game + [ ' - - launchTarget ' , ' fmlclient ' ] <nl> @ @ - 391 , 7 + 387 , 7 @ @ project ( ' : forge ' ) { <nl> json : ' / version . json ' , <nl> path : " $ { project . group } : $ { project . name } : $ { project . version } " , <nl> logo : ' / big _ logo . png ' , <nl> - minecraft : patcher . mcVersion , <nl> + minecraft : MC _ VERSION , <nl> welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , <nl> data : [ <nl> MAPPINGS : [ <nl> @ @ - 403 , 20 + 399 , 20 @ @ project ( ' : forge ' ) { <nl> server : ' / data / server . lzma ' <nl> ] , <nl> MC _ SLIM : [ <nl> - client : " [ net . minecraft : client : $ { patcher . mcVersion } : slim ] " , <nl> - server : " [ net . minecraft : server : $ { patcher . mcVersion } : slim ] " <nl> + client : " [ net . minecraft : client : $ { MC _ VERSION } : slim ] " , <nl> + server : " [ net . minecraft : server : $ { MC _ VERSION } : slim ] " <nl> ] , <nl> MC _ DATA : [ <nl> - client : " [ net . minecraft : client : $ { patcher . mcVersion } : data ] " , <nl> - server : " [ net . minecraft : server : $ { patcher . mcVersion } : data ] " <nl> + client : " [ net . minecraft : client : $ { MC _ VERSION } : data ] " , <nl> + server : " [ net . minecraft : server : $ { MC _ VERSION } : data ] " <nl> ] , <nl> MC _ EXTRA : [ <nl> - client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , <nl> - server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " <nl> + client : " [ net . minecraft : client : $ { MC _ VERSION } : extra ] " , <nl> + server : " [ net . minecraft : server : $ { MC _ VERSION } : extra ] " <nl> ] , <nl> MC _ SRG : [ <nl> - client : " [ net . minecraft : client : $ { patcher . mcVersion } - $ { MCP _ VERSION } : srg ] " , <nl> - server : " [ net . minecraft : server : $ { patcher . mcVersion } - $ { MCP _ VERSION } : srg ] " <nl> + client : " [ net . minecraft : client : $ { MC _ VERSION } - $ { MCP _ VERSION } : srg ] " , <nl> + server : " [ net . minecraft : server : $ { MC _ VERSION } - $ { MCP _ VERSION } : srg ] " <nl> ] , <nl> PATCHED : [ <nl> client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client ] " , <nl> @ @ - 479 , 7 + 475 , 7 @ @ project ( ' : forge ' ) { <nl> universalJar { <nl> from extraTxts <nl> <nl> - / * TODO : Annotation Cache ? need to talk to cpw about his new design . <nl> + / * TODO : Annotation Cache ? need to talk to cpw about his new design . <nl> from ( fixAnnotationsJson ) { <nl> into ' META - INF ' <nl> } <nl> @ @ - 506 , 16 + 502 , 31 @ @ project ( ' : forge ' ) { <nl> artifacts . each { key , lib - > <nl> classpath + = " libraries / $ { lib . downloads . artifact . path } " <nl> } <nl> - classpath + = " minecraft _ server . $ { patcher . mcVersion } . jar " <nl> + classpath + = " minecraft _ server . $ { MC _ VERSION } . jar " <nl> <nl> manifest . attributes ( [ <nl> - " Main - Class " : " net . minecraftforge . fml . relauncher . ServerLaunchWrapper " , <nl> - " TweakClass " : " net . minecraftforge . fml . common . launcher . FMLTweaker " , <nl> - " Class - Path " : classpath . toString ( ) , <nl> - " Minecraft - Version " : patcher . mcVersion , <nl> - " Forge - Version " : project . version . substring ( patcher . mcVersion . length ( ) + 1 ) , <nl> - " MCP - Version " : MCP _ VERSION <nl> - ] ) <nl> + ' Main - Class ' : ' net . minecraftforge . server . ServerMain ' , <nl> + ' Class - Path ' : classpath . toString ( ) , <nl> + ' Timestamp ' : new Date ( ) . format ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) , <nl> + ' GitCommit ' : grgit . head ( ) . getAbbreviatedId ( 8 ) , <nl> + ' Git - Branch ' : grgit . branch . current ( ) . getName ( ) <nl> + ] as LinkedHashMap ) <nl> + manifest . attributes ( [ <nl> + ' Specification - Title ' : ' Forge ' , <nl> + ' Specification - Vendor ' : ' Forge Development LLC ' , <nl> + ' Specification - Version ' : SPEC _ VERSION , <nl> + ' Implementation - Title ' : ' Forge ' , <nl> + ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , <nl> + ' Implementation - Vendor ' : ' Forge Development LLC ' <nl> + ] as LinkedHashMap , ' net / minecraftforge / common / ' ) <nl> + manifest . attributes ( [ <nl> + ' Specification - Title ' : ' Minecraft ' , <nl> + ' Specification - Vendor ' : ' Mojang ' , <nl> + ' Specification - Version ' : MC _ VERSION , <nl> + ' Implementation - Title ' : ' MCP ' , <nl> + ' Implementation - Version ' : MCP _ VERSION , <nl> + ' Implementation - Vendor ' : ' Forge ' <nl> + ] as LinkedHashMap , ' net / minecraftforge / mcp / ' ) <nl> } <nl> } <nl> <nl> @ @ - 682 , 17 + 693 , 6 @ @ project ( ' : forge ' ) { <nl> } <nl> } <nl> <nl> - def getVersion ( mcver , ver ) { <nl> - def out = mcver . replace ( ' - ' , ' _ ' ) + ' - ' + ver + ' . ' + ( System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 ) <nl> - def branch = grgit . branch . current ( ) . name <nl> - if ( branch ! = null & & branch ! = ' master ' & & branch ! = ' HEAD ' & & branch ! = mcver & & branch ! = mcver + ' . 0 ' ) { <nl> - if ( ! ( branch . endsWith ( ' . x ' ) & & mcver . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) ) <nl> - out + = " - $ branch " <nl> - } <nl> - println ( ' Version : ' + out ) <nl> - return out <nl> - } <nl> - <nl> def dateToIso8601 ( date ) { <nl> def format = new SimpleDateFormat ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) <nl> def result = format . format ( date )
NEAREST DIFF (one line): diff - - git a / LICENSE . txt b / LICENSE . txt <nl> index 97b081b . . 7788a39 100644 <nl> - - - a / LICENSE . txt <nl> + + + b / LICENSE . txt <nl> @ @ - 57 , 12 + 57 , 6 @ @ This software contains a partial repackaging of javaxdelta , a BSD licensed progr <nl> binary differences and applying them , sourced from the subversion at http : / / sourceforge . net / projects / javaxdelta / <nl> authored by genman , heikok , pivot . <nl> The only changes are to replace some Trove collection types with standard Java collections , and repackaged . <nl> - <nl> - This software contains potions of Paulscodee IBXM library , a BSD liceensed library for <nl> - loading and playing IBXM formated auto . No modifications havee beeen made . The associated <nl> - licenses can be found along side this one , or at <nl> - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20IBXM % 20Library . txt <nl> - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20SoundSystem % 20CodecIBXM . txt <nl> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> <nl> <nl> diff - - git a / build . gradle b / build . gradle <nl> index b126b9e . . ab9bfad 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 14 , 6 + 14 , 7 @ @ import groovy . json . JsonBuilder <nl> import java . text . SimpleDateFormat <nl> import java . util . Date <nl> import java . security . MessageDigest <nl> + import java . net . URL <nl> import net . minecraftforge . gradle . common . task . SignJar <nl> import org . apache . tools . ant . filters . ReplaceTokens <nl> import de . undercouch . gradle . tasks . download . Download <nl> @ @ - 289 , 32 + 290 , 9 @ @ project ( ' : forge ' ) { <nl> ' java3d : vecmath ' <nl> ] <nl> def mojang = [ ] <nl> - <nl> - project . configurations . compileClasspath . resolvedConfiguration . resolvedArtifacts . each { <nl> - def art = [ <nl> - group : it . moduleVersion . id . group , <nl> - name : it . moduleVersion . id . name , <nl> - version : it . moduleVersion . id . version , <nl> - classifier : it . classifier , <nl> - extension : it . extension , <nl> - file : it . file <nl> - ] <nl> - def key = art . group + ' : ' + art . name <nl> + def artifacts = getArtifacts ( project , project . configurations . compileClasspath ) <nl> + artifacts . each { key , lib - > <nl> if ( forge . contains ( key ) | | mojang . contains ( key ) ) { <nl> - def url = forge . contains ( key ) ? " https : / / files . minecraftforge . net / maven / " : " https : / / libraries . minecraft . net / " <nl> - def path = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / $ { art . name } - $ { art . version } " <nl> - if ( art . classifier ! = null ) <nl> - path + = " - $ { art . classifier } " <nl> - path + = " . $ { art . extension } " <nl> - def lib = [ <nl> - name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , <nl> - downloads : [ <nl> - path : path , <nl> - url : url + path , <nl> - sha1 : sha1 ( art . file ) , <nl> - size : art . file . length ( ) <nl> - ] <nl> - ] <nl> json . libraries . add ( lib ) <nl> } <nl> } <nl> @ @ - 325 , 21 + 303 , 87 @ @ project ( ' : forge ' ) { <nl> <nl> task installerJson ( ) { <nl> ext { <nl> - output = file ( ' build / libs / installer . json ' ) <nl> + output = file ( ' build / libs / install _ profile . json ' ) <nl> } <nl> dependsOn launcherJson <nl> inputs . file launcherJson . output <nl> outputs . file output <nl> doLast { <nl> + def idx = project . version . indexOf ( ' - ' ) <nl> def json = [ <nl> - install : [ <nl> - _ comment _ : launcherJson . comment , <nl> - profileName : project . name , <nl> - version : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , <nl> - json : ' / version . json ' , <nl> - logo : ' / big _ logo . png ' <nl> + _ comment _ : launcherJson . comment , <nl> + profile : project . name , <nl> + version : project . version . substring ( 0 , idx ) + " - $ { project . name } " + project . version . substring ( idx ) , <nl> + json : ' / version . json ' , <nl> + path : " $ { project . group } : $ { project . name } : $ { project . version } " , <nl> + logo : ' / big _ logo . png ' , <nl> + minecraft : patcher . mcVersion , <nl> + welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , <nl> + processors : [ ] , <nl> + data : [ <nl> + MAPPINGS : [ <nl> + client : ' / data / joined . tsrg ' , <nl> + server : ' / data / joined . tsrg ' <nl> + ] , <nl> + BINPATCH : [ <nl> + client : ' / data / client . lzma ' , <nl> + server : ' / data / server . lzma ' <nl> + ] , <nl> + MC _ SLIM : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } : slim ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } : slim ] " <nl> + ] , <nl> + MC _ DATA : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } : data ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } : data ] " <nl> + ] , <nl> + MC _ EXTRA : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " <nl> + ] , <nl> + PATCHED : [ <nl> + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - patched ] " , <nl> + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - patched ] " <nl> + ] , <nl> + REMAPPED : [ <nl> + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - srg ] " , <nl> + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - srg ] " <nl> + ] <nl> ] <nl> ] <nl> + def libs = [ : ] <nl> + json . processors . add ( [ <nl> + jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , <nl> + args : [ <nl> + ' - - input ' , ' { MINECRAFT _ JAR } ' , <nl> + ' - - slim ' , " { MC _ SLIM } " , <nl> + ' - - data ' , " { MC _ DATA } " , <nl> + ' - - extra ' , " { MC _ EXTRA } " , <nl> + ' - - srg ' , ' { MAPPINGS } ' <nl> + ] <nl> + ] ) <nl> + json . processors . add ( [ <nl> + jar : ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' ) , <nl> + args : [ <nl> + ' - - clean ' , ' { MC _ SLIM } ' , <nl> + ' - - output ' , ' { PATCHED } ' , <nl> + ' - - apply ' , ' { BINPATCH } ' <nl> + ] <nl> + ] ) <nl> + json . processors . add ( [ <nl> + jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , <nl> + args : [ <nl> + ' - - in - jar ' , ' { PATCHED } ' , <nl> + ' - - out - jar ' , ' { REMAPPED } ' , <nl> + ' - - srg - in ' , ' { MAPPINGS } ' <nl> + ] <nl> + ] ) <nl> + <nl> + json . libraries = libs . values ( ) <nl> + <nl> output . text = new JsonBuilder ( json ) . toPrettyString ( ) <nl> } <nl> } <nl> @ @ - 556 , 12 + 600 , 90 @ @ def dateToIso8601 ( date ) { <nl> def result = format . format ( date ) <nl> return result [ 0 . . 21 ] + ' : ' + result [ 22 . . - 1 ] <nl> } <nl> + <nl> def sha1 ( file ) { <nl> - MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; <nl> + MessageDigest md = MessageDigest . getInstance ( ' SHA - 1 ' ) <nl> file . eachByte 4096 , { bytes , size - > <nl> - md . update ( bytes , 0 , size ) ; <nl> + md . update ( bytes , 0 , size ) <nl> + } <nl> + return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) <nl> + } <nl> + <nl> + def artifactTree ( project , artifact ) { <nl> + if ( ! project . ext . has ( ' tree _ resolver ' ) ) <nl> + project . ext . tree _ resolver = 1 <nl> + def cfg = project . configurations . create ( ' tree _ resolver _ ' + project . ext . tree _ resolver + + ) <nl> + def dep = project . dependencies . create ( artifact ) <nl> + cfg . dependencies . add ( dep ) <nl> + def files = cfg . resolve ( ) <nl> + return getArtifacts ( project , cfg ) <nl> + } <nl> + <nl> + def getArtifacts ( project , config ) { <nl> + def ret = [ : ] <nl> + config . resolvedConfiguration . resolvedArtifacts . each { <nl> + def art = [ <nl> + group : it . moduleVersion . id . group , <nl> + name : it . moduleVersion . id . name , <nl> + version : it . moduleVersion . id . version , <nl> + classifier : it . classifier , <nl> + extension : it . extension , <nl> + file : it . file <nl> + ] <nl> + def key = art . group + ' : ' + art . name <nl> + def folder = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / " <nl> + def filename = " $ { art . name } - $ { art . version } " <nl> + if ( art . classifier ! = null ) <nl> + filename + = " - $ { art . classifier } " <nl> + filename + = " . $ { art . extension } " <nl> + def path = " $ { folder } $ { filename } " <nl> + def url = " https : / / libraries . minecraft . net / $ { path } " <nl> + if ( ! checkExists ( url ) ) { <nl> + url = " https : / / files . minecraftforge . net / maven / $ { path } " <nl> + / * <nl> + project . logger . lifecycle ( " Artifact : $ { path } " ) <nl> + def repo = project . file ( " build / dep _ repo / $ { folder } " ) <nl> + repo . mkdirs ( ) <nl> + copy { <nl> + from art . file <nl> + into folder <nl> + rename { filename } <nl> + } <nl> + project . file ( " build / dep _ repo / $ { path } . sha1 " ) . text = sha1 ( it . file ) <nl> + * / <nl> + } <nl> + ret [ key ] = [ <nl> + name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , <nl> + downloads : [ <nl> + artifact : [ <nl> + path : path , <nl> + url : url , <nl> + sha1 : sha1 ( art . file ) , <nl> + size : art . file . length ( ) <nl> + ] <nl> + ] <nl> + ] <nl> + } <nl> + return ret <nl> + } <nl> + <nl> + def checkExists ( url ) { <nl> + def code = new URL ( url ) . openConnection ( ) . with { <nl> + requestMethod = ' HEAD ' <nl> + connect ( ) <nl> + responseCode <nl> + } <nl> + return code = = 200 <nl> + } <nl> + <nl> + def getClasspath ( project , libs , artifact ) { <nl> + def ret = [ ] <nl> + artifactTree ( project , artifact ) . each { key , lib - > <nl> + libs [ lib . name ] = lib <nl> + if ( lib . name ! = artifact ) <nl> + ret . add ( lib . name ) <nl> } <nl> - return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) ; <nl> + return ret <nl> } <nl> <nl> / / evaluationDependsOnChildren ( )

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index c30ff8a . . d80e6e8 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 13 , 6 + 13 , 7 @ @ import groovy . json . JsonSlurper 
 import groovy . json . JsonBuilder 
 import java . text . SimpleDateFormat 
 import java . util . Date 
 + import java . util . LinkedHashMap 
 import java . security . MessageDigest 
 import java . net . URL 
 import net . minecraftforge . gradle . common . task . ArchiveChecksum 
 @ @ - 90 , 6 + 91 , 8 @ @ project ( ' : forge ' ) { 
 mavenCentral ( ) 
 } 
 ext { 
 + MC _ VERSION = ' 1 . 13 ' 
 + SPEC _ VERSION = ' 15 . 24 . 0 ' 
 MCP _ ARTIFACT = project ( ' : mcp ' ) . mcp . config 
 MCP _ VERSION = project ( ' : mcp ' ) . mcp . config . version . split ( ' - ' ) [ 1 ] / / The timestamp only . 
 } 
 @ @ - 117 , 10 + 120 , 21 @ @ project ( ' : forge ' ) { 
 target : ' fmldevserver ' 
 ] 
 } 
 - mcVersion = ' 1 . 13 ' 
 } 
 + 
 + def getVersion = { 
 + def out = MC _ VERSION . replace ( ' - ' , ' _ ' ) + ' - ' + SPEC _ VERSION + ' . ' + ( System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 ) 
 + def branch = grgit . branch . current ( ) . name 
 + if ( branch ! = null & & branch ! = ' master ' & & branch ! = ' HEAD ' & & branch ! = MC _ VERSION & & branch ! = MC _ VERSION + ' . 0 ' ) { 
 + if ( ! ( branch . endsWith ( ' . x ' ) & & MC _ VERSION . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) ) 
 + out + = " - $ { branch } " 
 + } 
 + println ( ' Version : ' + out ) 
 + return out 
 + } 
 + 
 group = ' net . minecraftforge ' 
 - version = getVersion ( patcher . mcVersion , ' 15 . 24 . 0 ' ) 
 + version = getVersion ( ) 
 applyPatches { 
 canonicalizeAccess true 
 canonicalizeWhitespace true 
 @ @ - 186 , 24 + 200 , 6 @ @ project ( ' : forge ' ) { 
 workingDir ' runserver ' 
 } 
 
 - task ciWriteBuildNumber { 
 - doLast { 
 - def file = file ( " $ rootDir / src / main / java / net / minecraftforge / common / ForgeVersion . java " ) 
 - def bn = System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 
 - def outfile = ' ' 
 - 
 - file . eachLine { String s - > 
 - if ( s . matches ( ' ^ public static final int buildVersion = [ \ \ d ] + ; \ $ ' ) ) 
 - s = " public static final int buildVersion = $ { bn } ; " 
 - if ( s . matches ( ' ^ public static final String mcVersion = " [ ^ \ \ " ] + " ; ' ) ) 
 - s = " public static final String mcVersion = \ " $ { patcher . mcVersion } \ " ; " 
 - outfile + = ( s + ' \ n ' ) 
 - } 
 - file . write ( outfile ) 
 - } 
 - } 
 - 
 - 
 def extraTxts = [ 
 rootProject . file ( ' CREDITS . txt ' ) , 
 rootProject . file ( ' LICENSE . txt ' ) 
 @ @ - 341 , 7 + 337 , 7 @ @ project ( ' : forge ' ) { 
 releaseTime : timestamp , 
 type : ' release ' , 
 mainClass : ' cpw . mods . modlauncher . Launcher ' , 
 - inheritsFrom : patcher . mcVersion , 
 + inheritsFrom : MC _ VERSION , 
 logging : [ : ] , 
 arguments : [ 
 game : json _ vanilla . arguments . game + [ ' - - launchTarget ' , ' fmlclient ' ] 
 @ @ - 391 , 7 + 387 , 7 @ @ project ( ' : forge ' ) { 
 json : ' / version . json ' , 
 path : " $ { project . group } : $ { project . name } : $ { project . version } " , 
 logo : ' / big _ logo . png ' , 
 - minecraft : patcher . mcVersion , 
 + minecraft : MC _ VERSION , 
 welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , 
 data : [ 
 MAPPINGS : [ 
 @ @ - 403 , 20 + 399 , 20 @ @ project ( ' : forge ' ) { 
 server : ' / data / server . lzma ' 
 ] , 
 MC _ SLIM : [ 
 - client : " [ net . minecraft : client : $ { patcher . mcVersion } : slim ] " , 
 - server : " [ net . minecraft : server : $ { patcher . mcVersion } : slim ] " 
 + client : " [ net . minecraft : client : $ { MC _ VERSION } : slim ] " , 
 + server : " [ net . minecraft : server : $ { MC _ VERSION } : slim ] " 
 ] , 
 MC _ DATA : [ 
 - client : " [ net . minecraft : client : $ { patcher . mcVersion } : data ] " , 
 - server : " [ net . minecraft : server : $ { patcher . mcVersion } : data ] " 
 + client : " [ net . minecraft : client : $ { MC _ VERSION } : data ] " , 
 + server : " [ net . minecraft : server : $ { MC _ VERSION } : data ] " 
 ] , 
 MC _ EXTRA : [ 
 - client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , 
 - server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " 
 + client : " [ net . minecraft : client : $ { MC _ VERSION } : extra ] " , 
 + server : " [ net . minecraft : server : $ { MC _ VERSION } : extra ] " 
 ] , 
 MC _ SRG : [ 
 - client : " [ net . minecraft : client : $ { patcher . mcVersion } - $ { MCP _ VERSION } : srg ] " , 
 - server : " [ net . minecraft : server : $ { patcher . mcVersion } - $ { MCP _ VERSION } : srg ] " 
 + client : " [ net . minecraft : client : $ { MC _ VERSION } - $ { MCP _ VERSION } : srg ] " , 
 + server : " [ net . minecraft : server : $ { MC _ VERSION } - $ { MCP _ VERSION } : srg ] " 
 ] , 
 PATCHED : [ 
 client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client ] " , 
 @ @ - 479 , 7 + 475 , 7 @ @ project ( ' : forge ' ) { 
 universalJar { 
 from extraTxts 
 
 - / * TODO : Annotation Cache ? need to talk to cpw about his new design . 
 + / * TODO : Annotation Cache ? need to talk to cpw about his new design . 
 from ( fixAnnotationsJson ) { 
 into ' META - INF ' 
 } 
 @ @ - 506 , 16 + 502 , 31 @ @ project ( ' : forge ' ) { 
 artifacts . each { key , lib - > 
 classpath + = " libraries / $ { lib . downloads . artifact . path } " 
 } 
 - classpath + = " minecraft _ server . $ { patcher . mcVersion } . jar " 
 + classpath + = " minecraft _ server . $ { MC _ VERSION } . jar " 
 
 manifest . attributes ( [ 
 - " Main - Class " : " net . minecraftforge . fml . relauncher . ServerLaunchWrapper " , 
 - " TweakClass " : " net . minecraftforge . fml . common . launcher . FMLTweaker " , 
 - " Class - Path " : classpath . toString ( ) , 
 - " Minecraft - Version " : patcher . mcVersion , 
 - " Forge - Version " : project . version . substring ( patcher . mcVersion . length ( ) + 1 ) , 
 - " MCP - Version " : MCP _ VERSION 
 - ] ) 
 + ' Main - Class ' : ' net . minecraftforge . server . ServerMain ' , 
 + ' Class - Path ' : classpath . toString ( ) , 
 + ' Timestamp ' : new Date ( ) . format ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) , 
 + ' GitCommit ' : grgit . head ( ) . getAbbreviatedId ( 8 ) , 
 + ' Git - Branch ' : grgit . branch . current ( ) . getName ( ) 
 + ] as LinkedHashMap ) 
 + manifest . attributes ( [ 
 + ' Specification - Title ' : ' Forge ' , 
 + ' Specification - Vendor ' : ' Forge Development LLC ' , 
 + ' Specification - Version ' : SPEC _ VERSION , 
 + ' Implementation - Title ' : ' Forge ' , 
 + ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , 
 + ' Implementation - Vendor ' : ' Forge Development LLC ' 
 + ] as LinkedHashMap , ' net / minecraftforge / common / ' ) 
 + manifest . attributes ( [ 
 + ' Specification - Title ' : ' Minecraft ' , 
 + ' Specification - Vendor ' : ' Mojang ' , 
 + ' Specification - Version ' : MC _ VERSION , 
 + ' Implementation - Title ' : ' MCP ' , 
 + ' Implementation - Version ' : MCP _ VERSION , 
 + ' Implementation - Vendor ' : ' Forge ' 
 + ] as LinkedHashMap , ' net / minecraftforge / mcp / ' ) 
 } 
 } 
 
 @ @ - 682 , 17 + 693 , 6 @ @ project ( ' : forge ' ) { 
 } 
 } 
 
 - def getVersion ( mcver , ver ) { 
 - def out = mcver . replace ( ' - ' , ' _ ' ) + ' - ' + ver + ' . ' + ( System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 ) 
 - def branch = grgit . branch . current ( ) . name 
 - if ( branch ! = null & & branch ! = ' master ' & & branch ! = ' HEAD ' & & branch ! = mcver & & branch ! = mcver + ' . 0 ' ) { 
 - if ( ! ( branch . endsWith ( ' . x ' ) & & mcver . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) ) 
 - out + = " - $ branch " 
 - } 
 - println ( ' Version : ' + out ) 
 - return out 
 - } 
 - 
 def dateToIso8601 ( date ) { 
 def format = new SimpleDateFormat ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) 
 def result = format . format ( date )

NEAREST DIFF:
diff - - git a / LICENSE . txt b / LICENSE . txt 
 index 97b081b . . 7788a39 100644 
 - - - a / LICENSE . txt 
 + + + b / LICENSE . txt 
 @ @ - 57 , 12 + 57 , 6 @ @ This software contains a partial repackaging of javaxdelta , a BSD licensed progr 
 binary differences and applying them , sourced from the subversion at http : / / sourceforge . net / projects / javaxdelta / 
 authored by genman , heikok , pivot . 
 The only changes are to replace some Trove collection types with standard Java collections , and repackaged . 
 - 
 - This software contains potions of Paulscodee IBXM library , a BSD liceensed library for 
 - loading and playing IBXM formated auto . No modifications havee beeen made . The associated 
 - licenses can be found along side this one , or at 
 - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20IBXM % 20Library . txt 
 - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20SoundSystem % 20CodecIBXM . txt 
 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 
 
 diff - - git a / build . gradle b / build . gradle 
 index b126b9e . . ab9bfad 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 14 , 6 + 14 , 7 @ @ import groovy . json . JsonBuilder 
 import java . text . SimpleDateFormat 
 import java . util . Date 
 import java . security . MessageDigest 
 + import java . net . URL 
 import net . minecraftforge . gradle . common . task . SignJar 
 import org . apache . tools . ant . filters . ReplaceTokens 
 import de . undercouch . gradle . tasks . download . Download 
 @ @ - 289 , 32 + 290 , 9 @ @ project ( ' : forge ' ) { 
 ' java3d : vecmath ' 
 ] 
 def mojang = [ ] 
 - 
 - project . configurations . compileClasspath . resolvedConfiguration . resolvedArtifacts . each { 
 - def art = [ 
 - group : it . moduleVersion . id . group , 
 - name : it . moduleVersion . id . name , 
 - version : it . moduleVersion . id . version , 
 - classifier : it . classifier , 
 - extension : it . extension , 
 - file : it . file 
 - ] 
 - def key = art . group + ' : ' + art . name 
 + def artifacts = getArtifacts ( project , project . configurations . compileClasspath ) 
 + artifacts . each { key , lib - > 
 if ( forge . contains ( key ) | | mojang . contains ( key ) ) { 
 - def url = forge . contains ( key ) ? " https : / / files . minecraftforge . net / maven / " : " https : / / libraries . minecraft . net / " 
 - def path = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / $ { art . name } - $ { art . version } " 
 - if ( art . classifier ! = null ) 
 - path + = " - $ { art . classifier } " 
 - path + = " . $ { art . extension } " 
 - def lib = [ 
 - name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , 
 - downloads : [ 
 - path : path , 
 - url : url + path , 
 - sha1 : sha1 ( art . file ) , 
 - size : art . file . length ( ) 
 - ] 
 - ] 
 json . libraries . add ( lib ) 
 } 
 } 
 @ @ - 325 , 21 + 303 , 87 @ @ project ( ' : forge ' ) { 
 
 task installerJson ( ) { 
 ext { 
 - output = file ( ' build / libs / installer . json ' ) 
 + output = file ( ' build / libs / install _ profile . json ' ) 
 } 
 dependsOn launcherJson 
 inputs . file launcherJson . output 
 outputs . file output 
 doLast { 
 + def idx = project . version . indexOf ( ' - ' ) 
 def json = [ 
 - install : [ 
 - _ comment _ : launcherJson . comment , 
 - profileName : project . name , 
 - version : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , 
 - json : ' / version . json ' , 
 - logo : ' / big _ logo . png ' 
 + _ comment _ : launcherJson . comment , 
 + profile : project . name , 
 + version : project . version . substring ( 0 , idx ) + " - $ { project . name } " + project . version . substring ( idx ) , 
 + json : ' / version . json ' , 
 + path : " $ { project . group } : $ { project . name } : $ { project . version } " , 
 + logo : ' / big _ logo . png ' , 
 + minecraft : patcher . mcVersion , 
 + welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , 
 + processors : [ ] , 
 + data : [ 
 + MAPPINGS : [ 
 + client : ' / data / joined . tsrg ' , 
 + server : ' / data / joined . tsrg ' 
 + ] , 
 + BINPATCH : [ 
 + client : ' / data / client . lzma ' , 
 + server : ' / data / server . lzma ' 
 + ] , 
 + MC _ SLIM : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } : slim ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } : slim ] " 
 + ] , 
 + MC _ DATA : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } : data ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } : data ] " 
 + ] , 
 + MC _ EXTRA : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " 
 + ] , 
 + PATCHED : [ 
 + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - patched ] " , 
 + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - patched ] " 
 + ] , 
 + REMAPPED : [ 
 + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - srg ] " , 
 + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - srg ] " 
 + ] 
 ] 
 ] 
 + def libs = [ : ] 
 + json . processors . add ( [ 
 + jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , 
 + args : [ 
 + ' - - input ' , ' { MINECRAFT _ JAR } ' , 
 + ' - - slim ' , " { MC _ SLIM } " , 
 + ' - - data ' , " { MC _ DATA } " , 
 + ' - - extra ' , " { MC _ EXTRA } " , 
 + ' - - srg ' , ' { MAPPINGS } ' 
 + ] 
 + ] ) 
 + json . processors . add ( [ 
 + jar : ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' ) , 
 + args : [ 
 + ' - - clean ' , ' { MC _ SLIM } ' , 
 + ' - - output ' , ' { PATCHED } ' , 
 + ' - - apply ' , ' { BINPATCH } ' 
 + ] 
 + ] ) 
 + json . processors . add ( [ 
 + jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , 
 + args : [ 
 + ' - - in - jar ' , ' { PATCHED } ' , 
 + ' - - out - jar ' , ' { REMAPPED } ' , 
 + ' - - srg - in ' , ' { MAPPINGS } ' 
 + ] 
 + ] ) 
 + 
 + json . libraries = libs . values ( ) 
 + 
 output . text = new JsonBuilder ( json ) . toPrettyString ( ) 
 } 
 } 
 @ @ - 556 , 12 + 600 , 90 @ @ def dateToIso8601 ( date ) { 
 def result = format . format ( date ) 
 return result [ 0 . . 21 ] + ' : ' + result [ 22 . . - 1 ] 
 } 
 + 
 def sha1 ( file ) { 
 - MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; 
 + MessageDigest md = MessageDigest . getInstance ( ' SHA - 1 ' ) 
 file . eachByte 4096 , { bytes , size - > 
 - md . update ( bytes , 0 , size ) ; 
 + md . update ( bytes , 0 , size ) 
 + } 
 + return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) 
 + } 
 + 
 + def artifactTree ( project , artifact ) { 
 + if ( ! project . ext . has ( ' tree _ resolver ' ) ) 
 + project . ext . tree _ resolver = 1 
 + def cfg = project . configurations . create ( ' tree _ resolver _ ' + project . ext . tree _ resolver + + ) 
 + def dep = project . dependencies . create ( artifact ) 
 + cfg . dependencies . add ( dep ) 
 + def files = cfg . resolve ( ) 
 + return getArtifacts ( project , cfg ) 
 + } 
 + 
 + def getArtifacts ( project , config ) { 
 + def ret = [ : ] 
 + config . resolvedConfiguration . resolvedArtifacts . each { 
 + def art = [ 
 + group : it . moduleVersion . id . group , 
 + name : it . moduleVersion . id . name , 
 + version : it . moduleVersion . id . version , 
 + classifier : it . classifier , 
 + extension : it . extension , 
 + file : it . file 
 + ] 
 + def key = art . group + ' : ' + art . name 
 + def folder = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / " 
 + def filename = " $ { art . name } - $ { art . version } " 
 + if ( art . classifier ! = null ) 
 + filename + = " - $ { art . classifier } " 
 + filename + = " . $ { art . extension } " 
 + def path = " $ { folder } $ { filename } " 
 + def url = " https : / / libraries . minecraft . net / $ { path } " 
 + if ( ! checkExists ( url ) ) { 
 + url = " https : / / files . minecraftforge . net / maven / $ { path } " 
 + / * 
 + project . logger . lifecycle ( " Artifact : $ { path } " ) 
 + def repo = project . file ( " build / dep _ repo / $ { folder } " ) 
 + repo . mkdirs ( ) 
 + copy { 
 + from art . file 
 + into folder 
 + rename { filename } 
 + } 
 + project . file ( " build / dep _ repo / $ { path } . sha1 " ) . text = sha1 ( it . file ) 
 + * / 
 + } 
 + ret [ key ] = [ 
 + name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , 
 + downloads : [ 
 + artifact : [ 
 + path : path , 
 + url : url , 
 + sha1 : sha1 ( art . file ) , 
 + size : art . file . length ( ) 
 + ] 
 + ] 
 + ] 
 + } 
 + return ret 
 + } 
 + 
 + def checkExists ( url ) { 
 + def code = new URL ( url ) . openConnection ( ) . with { 
 + requestMethod = ' HEAD ' 
 + connect ( ) 
 + responseCode 
 + } 
 + return code = = 200 
 + } 
 + 
 + def getClasspath ( project , libs , artifact ) { 
 + def ret = [ ] 
 + artifactTree ( project , artifact ) . each { key , lib - > 
 + libs [ lib . name ] = lib 
 + if ( lib . name ! = artifact ) 
 + ret . add ( lib . name ) 
 } 
 - return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) ; 
 + return ret 
 } 
 
 / / evaluationDependsOnChildren ( )
