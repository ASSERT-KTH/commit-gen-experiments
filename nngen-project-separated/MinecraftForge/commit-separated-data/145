BLEU SCORE: 0.014199193612838947

TEST MSG: Reimplement @ ObjectHolder scanning , and expose system for others to add handlers .
GENERATED MSG: Remove Java 8 warnings now that Minecraft requires it

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 1f725cd . . 1cca2fd 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 161 , 7 + 161 , 7 @ @ project ( ' : forge ' ) { <nl> exc = file ( " $ rootDir / src / main / resources / forge . exc " ) <nl> srgPatches = true <nl> runs { <nl> - client = { <nl> + forge _ client = { <nl> main ' net . minecraftforge . fml . LaunchTesting ' <nl> environment = [ <nl> target : ' fmldevclient ' , <nl> @ @ - 180 , 7 + 180 , 7 @ @ project ( ' : forge ' ) { <nl> ' fmllauncher . version ' : SPEC _ VERSION <nl> ] <nl> } <nl> - server = { <nl> + forge _ server = { <nl> main ' net . minecraftforge . fml . LaunchTesting ' <nl> environment = [ <nl> target : ' fmldevserver ' <nl> @ @ - 190 , 7 + 190 , 8 @ @ project ( ' : forge ' ) { <nl> ' mcp . version ' : MCP _ VERSION , <nl> ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , <nl> ' forge . spec ' : SPEC _ VERSION , <nl> - ' forge . group ' : project . group <nl> + ' forge . group ' : project . group , <nl> + ' fmllauncher . version ' : SPEC _ VERSION <nl> ] <nl> } <nl> } <nl> @ @ - 285 , 9 + 286 , 9 @ @ project ( ' : forge ' ) { <nl> } <nl> / / jvmArgs = [ ' - verbose : class ' ] <nl> classpath sourceSets . main . runtimeClasspath <nl> - main patcher . runs . client . main <nl> - systemProperties = patcher . runs . client . properties <nl> - environment + = patcher . runs . client . environment <nl> + main patcher . runs . forge _ client . main <nl> + systemProperties = patcher . runs . forge _ client . properties <nl> + environment + = patcher . runs . forge _ client . environment <nl> workingDir ' runclient ' <nl> } <nl> <nl> @ @ - 302 , 10 + 303 , 10 @ @ project ( ' : forge ' ) { <nl> } <nl> } <nl> classpath sourceSets . main . runtimeClasspath <nl> - main patcher . runs . server . main <nl> + main patcher . runs . forge _ server . main <nl> args ' nogui ' <nl> - systemProperties = patcher . runs . server . properties <nl> - environment + = patcher . runs . server . environment <nl> + systemProperties = patcher . runs . forge _ server . properties <nl> + environment + = patcher . runs . forge _ server . environment <nl> workingDir ' runserver ' <nl> standardInput = System . in <nl> } <nl> @ @ - 808 , 7 + 809 , 7 @ @ project ( ' : forge ' ) { <nl> } <nl> server = { <nl> main ' net . minecraftforge . userdev . UserdevLauncher ' <nl> - environment ' target ' , ' fmldevserver ' <nl> + environment ' target ' , ' fmluserdevserver ' <nl> environment ' FORGE _ VERSION ' , project . version . substring ( MC _ VERSION . length ( ) + 1 ) <nl> environment ' FORGE _ GROUP ' , project . group <nl> environment ' MCP _ VERSION ' , MCP _ VERSION <nl> diff - - git a / patches / minecraft / net / minecraft / init / Fluids . java . patch b / patches / minecraft / net / minecraft / init / Fluids . java . patch <nl> deleted file mode 100644 <nl> index 12f17ba . . 0000000 <nl> - - - a / patches / minecraft / net / minecraft / init / Fluids . java . patch <nl> + + + / dev / null <nl> @ @ - 1 , 10 + 0 , 0 @ @ <nl> - - - - a / net / minecraft / init / Fluids . java <nl> - + + + b / net / minecraft / init / Fluids . java <nl> - @ @ - 6 , 6 + 6 , 7 @ @ <nl> - import net . minecraft . fluid . Fluid ; <nl> - import net . minecraft . util . ResourceLocation ; <nl> - <nl> - + @ net . minecraftforge . registries . ObjectHolder ( " minecraft " ) <nl> - public class Fluids { <nl> - private static final Set < Fluid > field _ 207214 _ f ; <nl> - public static final Fluid field _ 204541 _ a ; <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / language / ModFileScanData . java b / src / fmllauncher / java / net / minecraftforge / fml / language / ModFileScanData . java <nl> index fbe77d5 . . 3a2accc 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / language / ModFileScanData . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / language / ModFileScanData . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml . language ; <nl> <nl> import org . objectweb . asm . Type ; <nl> <nl> + import java . lang . annotation . ElementType ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 71 , 13 + 72 , 15 @ @ public class ModFileScanData <nl> } <nl> public static class AnnotationData { <nl> private final Type annotationType ; <nl> + private final ElementType targetType ; <nl> private final Type clazz ; <nl> private final String memberName ; <nl> private final Map < String , Object > annotationData ; <nl> <nl> <nl> - public AnnotationData ( final Type annotationType , final Type clazz , final String memberName , final Map < String , Object > annotationData ) { <nl> + public AnnotationData ( final Type annotationType , final ElementType targetType , final Type clazz , final String memberName , final Map < String , Object > annotationData ) { <nl> this . annotationType = annotationType ; <nl> + this . targetType = targetType ; <nl> this . clazz = clazz ; <nl> this . memberName = memberName ; <nl> this . annotationData = annotationData ; <nl> @ @ - 87 , 6 + 90 , 10 @ @ public class ModFileScanData <nl> return annotationType ; <nl> } <nl> <nl> + public ElementType getTargetType ( ) { <nl> + return targetType ; <nl> + } <nl> + <nl> public Type getClassType ( ) { <nl> return clazz ; <nl> } <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / StringUtils . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / StringUtils . java <nl> index 3f6a78a . . bd5be44 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / StringUtils . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / StringUtils . java <nl> @ @ - 26 , 9 + 26 , 6 @ @ import java . net . URL ; <nl> import java . util . Locale ; <nl> import java . util . Map ; <nl> <nl> - / * * <nl> - * Created by cpw on 05 / 06 / 17 . <nl> - * / <nl> public class StringUtils <nl> { <nl> public static String toLowerCase ( final String str ) { <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModAnnotation . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModAnnotation . java <nl> index bdd54ef . . e0781b2 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModAnnotation . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModAnnotation . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ import com . google . common . collect . Maps ; <nl> public class ModAnnotation <nl> { <nl> public static ModFileScanData . AnnotationData fromModAnnotation ( final Type clazz , final ModAnnotation annotation ) { <nl> - return new ModFileScanData . AnnotationData ( annotation . asmType , clazz , annotation . member , annotation . values ) ; <nl> + return new ModFileScanData . AnnotationData ( annotation . asmType , annotation . type , clazz , annotation . member , annotation . values ) ; <nl> } <nl> <nl> public static class EnumHolder <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> index f2a35c4 . . 30729a4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> @ @ - 44 , 9 + 44 , 9 @ @ public class ForgeI18n { <nl> / / { 0 , modinfo , id } - > modid from ModInfo object ; { 0 , modinfo , name } - > displayname from ModInfo object <nl> customFactories . put ( " modinfo " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > parseModInfo ( formatString , stringBuffer , objectToParse ) ) ) ; <nl> / / { 0 , lower } - > lowercase supplied string <nl> - customFactories . put ( " lower " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toLowerCase ( ( String ) objectToParse ) ) ) ) ; <nl> + customFactories . put ( " lower " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toLowerCase ( String . valueOf ( objectToParse ) ) ) ) ) ; <nl> / / { 0 , upper > - > uppercase supplied string <nl> - customFactories . put ( " upper " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toUpperCase ( ( String ) objectToParse ) ) ) ) ; <nl> + customFactories . put ( " upper " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toUpperCase ( String . valueOf ( objectToParse ) ) ) ) ) ; <nl> / / { 0 , exc , class } - > class of exception ; { 0 , exc , msg } - > message from exception <nl> customFactories . put ( " exc " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > parseException ( formatString , stringBuffer , objectToParse ) ) ) ; <nl> / / { 0 , vr } - > transform VersionRange into cleartext string using fml . messages . version . restriction . * strings <nl> @ @ - 112 , 4 + 112 , 4 @ @ public class ForgeI18n { <nl> throw new UnsupportedOperationException ( " Parsing is not supported " ) ; <nl> } <nl> } <nl> - } <nl> \ No newline at end of file <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> index c4f6f62 . . 12c8f90 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> @ @ - 30 , 6 + 30 , 8 @ @ import net . minecraftforge . fml . loading . LoadingModList ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModFileInfo ; <nl> import net . minecraftforge . registries . GameData ; <nl> + import net . minecraftforge . registries . ObjectHolderRegistry ; <nl> + <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> @ @ - 86 , 6 + 88 , 7 @ @ public class ModLoader <nl> modList . setLoadedMods ( modContainerStream . collect ( Collectors . toList ( ) ) ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . CONSTRUCT ) ; <nl> GameData . fireCreateRegistryEvents ( ) ; <nl> + ObjectHolderRegistry . findObjectHolders ( ) ; <nl> CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; <nl> GameData . fireRegistryEvents ( ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . PREINIT ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 6864f88 . . 4907918 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 695 , 7 + 695 , 7 @ @ public class GameData <nl> / / Loader . instance ( ) . fireRemapEvent ( remaps , false ) ; <nl> <nl> / / The id map changed , ensure we apply object holders <nl> - ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> + ObjectHolderRegistry . applyObjectHolders ( ) ; <nl> <nl> / / Return an empty list , because we ' re good <nl> return ArrayListMultimap . create ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / registries / ObjectHolderRef . java b / src / main / java / net / minecraftforge / registries / ObjectHolderRef . java <nl> index 328bcae . . 5ded8f2 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ObjectHolderRef . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ObjectHolderRef . java <nl> @ @ - 26 , 17 + 26 , 15 @ @ import java . util . LinkedList ; <nl> import java . util . Queue ; <nl> <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . ResourceLocationException ; <nl> <nl> import javax . annotation . Nullable ; <nl> <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> - / * * <nl> - * Internal class used in tracking { @ link ObjectHolder } references <nl> - * / <nl> @ SuppressWarnings ( " rawtypes " ) <nl> - class ObjectHolderRef <nl> + public class ObjectHolderRef implements Runnable <nl> { <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> private Field field ; <nl> @ @ - 44 , 19 + 42 , 24 @ @ class ObjectHolderRef <nl> private boolean isValid ; <nl> private ForgeRegistry < ? > registry ; <nl> <nl> - ObjectHolderRef ( Field field , ResourceLocation injectedObject , boolean extractFromExistingValues ) <nl> + public ObjectHolderRef ( Field field , ResourceLocation injectedObject ) <nl> { <nl> - registry = getRegistryForType ( field ) ; <nl> + this ( field , injectedObject . toString ( ) , false ) ; <nl> + } <nl> <nl> + ObjectHolderRef ( Field field , String injectedObject , boolean extractFromExistingValues ) <nl> + { <nl> + this . registry = getRegistryForType ( field ) ; <nl> this . field = field ; <nl> this . isValid = registry ! = null ; <nl> + <nl> if ( extractFromExistingValues ) <nl> { <nl> try <nl> { <nl> Object existing = field . get ( null ) ; <nl> / / nothing is ever allowed to replace AIR <nl> - if ( existing = = null | | existing = = registry . getDefault ( ) ) <nl> + if ( ! isValid | | ( existing = = null | | existing = = registry . getDefault ( ) ) ) <nl> { <nl> this . injectedObject = null ; <nl> this . field = null ; <nl> @ @ - 75 , 7 + 78 , 14 @ @ class ObjectHolderRef <nl> } <nl> else <nl> { <nl> - this . injectedObject = injectedObject ; <nl> + try <nl> + { <nl> + this . injectedObject = new ResourceLocation ( injectedObject ) ; <nl> + } <nl> + catch ( ResourceLocationException e ) <nl> + { <nl> + throw new IllegalArgumentException ( " Invalid @ ObjectHolder annotation on \ " " + field . toString ( ) + " \ " " , e ) ; <nl> + } <nl> } <nl> <nl> if ( this . injectedObject = = null | | ! isValid ( ) ) <nl> @ @ - 103 , 9 + 113 , 9 @ @ class ObjectHolderRef <nl> { <nl> Class < ? > type = typesToExamine . remove ( ) ; <nl> Collections . addAll ( typesToExamine , type . getInterfaces ( ) ) ; <nl> - if ( ForgeRegistryEntry . class . isAssignableFrom ( type ) ) <nl> + if ( IForgeRegistryEntry . class . isAssignableFrom ( type ) ) <nl> { <nl> - registry = ( ForgeRegistry < ? > ) RegistryManager . ACTIVE . getRegistry ( ( Class < ForgeRegistryEntry > ) type ) ; <nl> + registry = ( ForgeRegistry < ? > ) RegistryManager . ACTIVE . getRegistry ( ( Class < IForgeRegistryEntry > ) type ) ; <nl> final Class < ? > parentType = type . getSuperclass ( ) ; <nl> if ( parentType ! = null ) <nl> { <nl> @ @ - 121 , 7 + 131 , 8 @ @ class ObjectHolderRef <nl> return isValid ; <nl> } <nl> <nl> - public void apply ( ) <nl> + @ Override <nl> + public void run ( ) <nl> { <nl> Object thing ; <nl> if ( isValid & & registry . containsKey ( injectedObject ) & & ! registry . isDummied ( injectedObject ) ) <nl> @ @ - 147 , 4 + 158 , 19 @ @ class ObjectHolderRef <nl> LOGGER . warn ( " Unable to set { } with value { } ( { } ) " , this . field , thing , this . injectedObject , e ) ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return field . hashCode ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object other ) <nl> + { <nl> + if ( ! ( other instanceof ObjectHolderRef ) ) <nl> + return false ; <nl> + ObjectHolderRef o = ( ObjectHolderRef ) other ; <nl> + return this . field . equals ( o . field ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java b / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java <nl> index 21115f8 . . 66ec9f9 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java <nl> @ @ - 19 , 17 + 19 , 20 @ @ <nl> <nl> package net . minecraftforge . registries ; <nl> <nl> + import java . lang . annotation . ElementType ; <nl> import java . lang . reflect . Field ; <nl> - import java . lang . reflect . Modifier ; <nl> + import java . util . Collection ; <nl> + import java . util . HashSet ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . stream . Collectors ; <nl> <nl> - import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . ModList ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> - import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . language . ModFileScanData ; <nl> <nl> - import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> <nl> import javax . annotation . Nullable ; <nl> @ @ - 37 , 52 + 40 , 85 @ @ import javax . annotation . Nullable ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . objectweb . asm . Opcodes ; <nl> + import org . objectweb . asm . Type ; <nl> <nl> / * * <nl> * Internal registry for tracking { @ link ObjectHolder } references <nl> * / <nl> - public enum ObjectHolderRegistry <nl> + public class ObjectHolderRegistry <nl> { <nl> - INSTANCE ; <nl> + / * * <nl> + * Exposed to allow modders to register their own notification handlers . <nl> + * This runnable will be called after a registry snapshot has been injected and finalized . <nl> + * The internal list is backed by a HashSet so it is HIGHLY recommended you implement a proper equals <nl> + * and hashCode function to de - duplicate callers here . <nl> + * The default @ ObjectHolder implementation uses the hashCode / equals for the field the annotation is on . <nl> + * / <nl> + public static void addHandler ( Runnable ref ) <nl> + { <nl> + objectHolders . add ( ref ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Removed the specified handler from the notification list . <nl> + * <nl> + * The internal list is backed by a hash set , and so proper hashCode and equals operations are required for success . <nl> + * <nl> + * The default @ ObjectHolder implementation uses the hashCode / equals for the field the annotation is on . <nl> + * <nl> + * @ return true if handler was matched and removed . <nl> + * / <nl> + public static boolean removeHandler ( Runnable ref ) <nl> + { <nl> + return objectHolders . remove ( ref ) ; <nl> + } <nl> + <nl> + / / = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + / / Everything below is internal , do not use . <nl> + / / = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> + <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> - private List < ObjectHolderRef > objectHolders = Lists . newArrayList ( ) ; <nl> - / * TODO annotation data <nl> - public void findObjectHolders ( ASMDataTable table ) <nl> + private static final Set < Runnable > objectHolders = new HashSet < > ( ) ; <nl> + private static final Type OBJECT _ HOLDER = Type . getType ( ObjectHolder . class ) ; <nl> + private static final Type MOD = Type . getType ( Mod . class ) ; <nl> + <nl> + public static void findObjectHolders ( ) <nl> { <nl> LOGGER . info ( " Processing ObjectHolder annotations " ) ; <nl> - Set < ASMData > allObjectHolders = table . getAll ( ObjectHolder . class . getName ( ) ) ; <nl> - Map < String , String > classModIds = Maps . newHashMap ( ) ; <nl> - Map < String , Class < ? > > classCache = Maps . newHashMap ( ) ; <nl> + final List < ModFileScanData . AnnotationData > annotations = ModList . get ( ) . getAllScanData ( ) . stream ( ) <nl> + . map ( ModFileScanData : : getAnnotations ) <nl> + . flatMap ( Collection : : stream ) <nl> + . filter ( a - > OBJECT _ HOLDER . equals ( a . getAnnotationType ( ) ) | | MOD . equals ( a . getAnnotationType ( ) ) ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> <nl> - table . getAll ( Mod . class . getName ( ) ) . forEach ( data - > classModIds . put ( data . getClassName ( ) , ( String ) data . getAnnotationInfo ( ) . get ( " value " ) ) ) ; <nl> + Map < Type , String > classModIds = Maps . newHashMap ( ) ; <nl> + Map < Type , Class < ? > > classCache = Maps . newHashMap ( ) ; <nl> + <nl> + / / Gather all @ Mod classes , so that @ ObjectHolder ' s in those classes don ' t need to specify the mod id , Modder convince <nl> + annotations . stream ( ) . filter ( a - > MOD . equals ( a . getAnnotationType ( ) ) ) . forEach ( data - > classModIds . put ( data . getClassType ( ) , ( String ) data . getAnnotationData ( ) . get ( " value " ) ) ) ; <nl> <nl> / / double pass - get all the class level annotations first , then the field level annotations <nl> - allObjectHolders . stream ( ) . filter ( data - > data . getObjectName ( ) . equals ( data . getClassName ( ) ) ) . forEach ( data - > <nl> - { <nl> - String value = ( String ) data . getAnnotationInfo ( ) . get ( " value " ) ; <nl> - scanTarget ( classModIds , classCache , data . getClassName ( ) , data . getObjectName ( ) , value , true , data . getClassName ( ) . startsWith ( " net . minecraft . init " ) ) ; <nl> - } ) ; <nl> - allObjectHolders . stream ( ) . filter ( data - > ! data . getObjectName ( ) . equals ( data . getClassName ( ) ) ) . forEach ( data - > <nl> - { <nl> - String value = ( String ) data . getAnnotationInfo ( ) . get ( " value " ) ; <nl> - scanTarget ( classModIds , classCache , data . getClassName ( ) , data . getObjectName ( ) , value , false , false ) ; <nl> - } ) ; <nl> + annotations . stream ( ) . filter ( a - > OBJECT _ HOLDER . equals ( a . getAnnotationType ( ) ) ) . filter ( a - > a . getTargetType ( ) = = ElementType . TYPE ) <nl> + . forEach ( data - > scanTarget ( classModIds , classCache , data . getClassType ( ) , null , ( String ) data . getAnnotationData ( ) . get ( " value " ) , true , data . getClassType ( ) . getClassName ( ) . startsWith ( " net . minecraft . init " ) ) ) ; <nl> + <nl> + annotations . stream ( ) . filter ( a - > OBJECT _ HOLDER . equals ( a . getAnnotationType ( ) ) ) . filter ( a - > a . getTargetType ( ) = = ElementType . FIELD ) <nl> + . forEach ( data - > scanTarget ( classModIds , classCache , data . getClassType ( ) , data . getMemberName ( ) , ( String ) data . getAnnotationData ( ) . get ( " value " ) , false , false ) ) ; <nl> LOGGER . info ( " Found { } ObjectHolder annotations " , objectHolders . size ( ) ) ; <nl> } <nl> - * / <nl> - private void scanTarget ( Map < String , String > classModIds , Map < String , Class < ? > > classCache , String className , @ Nullable String annotationTarget , String value , boolean isClass , boolean extractFromValue ) <nl> + <nl> + private static void scanTarget ( Map < Type , String > classModIds , Map < Type , Class < ? > > classCache , Type type , @ Nullable String annotationTarget , String value , boolean isClass , boolean extractFromValue ) <nl> { <nl> Class < ? > clazz ; <nl> - if ( classCache . containsKey ( className ) ) <nl> + if ( classCache . containsKey ( type ) ) <nl> { <nl> - clazz = classCache . get ( className ) ; <nl> + clazz = classCache . get ( type ) ; <nl> } <nl> else <nl> { <nl> try <nl> { <nl> - clazz = Class . forName ( className , extractFromValue , getClass ( ) . getClassLoader ( ) ) ; <nl> - classCache . put ( className , clazz ) ; <nl> + clazz = Class . forName ( type . getClassName ( ) , extractFromValue , ObjectHolderRegistry . class . getClassLoader ( ) ) ; <nl> + classCache . put ( type , clazz ) ; <nl> } <nl> catch ( ClassNotFoundException ex ) <nl> { <nl> @ @ - 92 , 24 + 128 , 26 @ @ public enum ObjectHolderRegistry <nl> } <nl> if ( isClass ) <nl> { <nl> - scanClassForFields ( classModIds , className , value , clazz , extractFromValue ) ; <nl> + scanClassForFields ( classModIds , type , value , clazz , extractFromValue ) ; <nl> } <nl> else <nl> { <nl> if ( value . indexOf ( ' : ' ) = = - 1 ) <nl> { <nl> - String prefix = classModIds . get ( className ) ; <nl> + String prefix = classModIds . get ( type ) ; <nl> if ( prefix = = null ) <nl> { <nl> - LOGGER . warn ( " Found an unqualified ObjectHolder annotation ( { } ) without a modid context at { } . { } , ignoring " , value , className , annotationTarget ) ; <nl> + LOGGER . warn ( " Found an unqualified ObjectHolder annotation ( { } ) without a modid context at { } . { } , ignoring " , value , type , annotationTarget ) ; <nl> throw new IllegalStateException ( " Unqualified reference to ObjectHolder " ) ; <nl> } <nl> - value = prefix + " : " + value ; <nl> + value = prefix + ' : ' + value ; <nl> } <nl> try <nl> { <nl> Field f = clazz . getDeclaredField ( annotationTarget ) ; <nl> - addHolderReference ( new ObjectHolderRef ( f , new ResourceLocation ( value ) , extractFromValue ) ) ; <nl> + ObjectHolderRef ref = new ObjectHolderRef ( f , value , extractFromValue ) ; <nl> + if ( ref . isValid ( ) ) <nl> + addHandler ( ref ) ; <nl> } <nl> catch ( NoSuchFieldException ex ) <nl> { <nl> @ @ - 119 , 32 + 157 , 24 @ @ public enum ObjectHolderRegistry <nl> } <nl> } <nl> <nl> - private void scanClassForFields ( Map < String , String > classModIds , String className , String value , Class < ? > clazz , boolean extractFromExistingValues ) <nl> + private static void scanClassForFields ( Map < Type , String > classModIds , Type targetClass , String value , Class < ? > clazz , boolean extractFromExistingValues ) <nl> { <nl> - classModIds . put ( className , value ) ; <nl> + classModIds . put ( targetClass , value ) ; <nl> final int flags = Opcodes . ACC _ PUBLIC | Opcodes . ACC _ STATIC | Opcodes . ACC _ SYNTHETIC ; <nl> for ( Field f : clazz . getFields ( ) ) <nl> { <nl> if ( ( ( f . getModifiers ( ) & flags ) ! = flags ) | | f . isAnnotationPresent ( ObjectHolder . class ) ) <nl> - { <nl> continue ; <nl> - } <nl> - addHolderReference ( new ObjectHolderRef ( f , new ResourceLocation ( value , f . getName ( ) ) , extractFromExistingValues ) ) ; <nl> - } <nl> - } <nl> - <nl> - private void addHolderReference ( ObjectHolderRef ref ) <nl> - { <nl> - if ( ref . isValid ( ) ) <nl> - { <nl> - objectHolders . add ( ref ) ; <nl> + ObjectHolderRef ref = new ObjectHolderRef ( f , value + ' : ' + f . getName ( ) . toLowerCase ( Locale . ENGLISH ) , extractFromExistingValues ) ; <nl> + if ( ref . isValid ( ) ) <nl> + addHandler ( ref ) ; <nl> } <nl> } <nl> <nl> - public void applyObjectHolders ( ) <nl> + public static void applyObjectHolders ( ) <nl> { <nl> LOGGER . info ( " Applying holder lookups " ) ; <nl> - objectHolders . forEach ( ObjectHolderRef : : apply ) ; <nl> + objectHolders . forEach ( Runnable : : run ) ; <nl> LOGGER . info ( " Holder lookups applied " ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> index 70670bf . . f12c53c 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 73 , 12 + 73 , 3 @ @ <nl> } <nl> <nl> protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException <nl> - @ @ - 562 , 6 + 583 , 8 @ @ <nl> - { <nl> - this . field _ 146297 _ k . func _ 147108 _ a ( new GuiWinGame ( false , Runnables . doNothing ( ) ) ) ; <nl> - } <nl> - + <nl> - + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; <nl> - } <nl> - <nl> - public void func _ 146281 _ b ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 57ce4b1 . . bc2e442 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 29 , 7 + 29 , 6 @ @ import java . awt . image . BufferedImage ; <nl> import java . io . File ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . FloatBuffer ; <nl> - import java . util . Collections ; <nl> import java . util . Map ; <nl> <nl> import javax . annotation . Nonnull ; <nl> @ @ - 115 , 12 + 114 , 8 @ @ import net . minecraftforge . common . model . IModelPart ; <nl> import net . minecraftforge . common . model . ITransformation ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> - import net . minecraftforge . fml . client . GuiJava8Error ; <nl> import net . minecraftforge . fml . client . registry . ClientRegistry ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> - import net . minecraftforge . fml . common . Java8VersionException ; <nl> - import net . minecraftforge . fml . common . Loader ; <nl> - import net . minecraftforge . fml . common . ModContainer ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . lwjgl . BufferUtils ; <nl> @ @ - 314 , 17 + 309 , 6 @ @ public class ForgeHooksClient <nl> gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> } <nl> <nl> - if ( ! Loader . instance ( ) . java8 ) <nl> - { <nl> - String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; <nl> - gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> - line = I18n . format ( " fml . messages . java8warning . 2 " ) ; <nl> - gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> - splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; <nl> - updatescrollcounter + = 1 ; <nl> - updatescrollcounter % = 100 ; <nl> - } <nl> - <nl> String line = null ; <nl> switch ( status ) <nl> { <nl> @ @ - 345 , 22 + 329 , 6 @ @ public class ForgeHooksClient <nl> return splashText ; <nl> } <nl> <nl> - public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) <nl> - { <nl> - if ( ! Loader . instance ( ) . java8 ) <nl> - { <nl> - if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) <nl> - { <nl> - int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; <nl> - w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; <nl> - if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) <nl> - { <nl> - FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> public static ISound playSound ( SoundManager manager , ISound sound ) <nl> { <nl> PlaySoundEvent e = new PlaySoundEvent ( manager , sound ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 42f14ee . . b27400c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> - import java . util . Date ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 121 , 7 + 120 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> public static boolean replaceVanillaBucketModel = true ; <nl> public static boolean zoomInMissingModelTextInGui = false ; <nl> - public static long java8Reminder = 0 ; <nl> public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag <nl> public static boolean alwaysSetupTerrainOffThread = false ; / / In RenderGlobal . setupTerrain , always force the chunk render updates to be queued to the thread <nl> public static int dimensionUnloadQueueDelay = 0 ; <nl> @ @ - 322 , 12 + 320 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . setLanguageKey ( " forge . configgui . zoomInMissingModelTextInGui " ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> - prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , 0 , <nl> - " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; <nl> - java8Reminder = prop . getLong ( 0 ) ; <nl> - prop . setLanguageKey ( " forge . configgui . java8Reminder " ) ; <nl> - propOrder . add ( prop . getName ( ) ) ; <nl> - <nl> prop = config . get ( Configuration . CATEGORY _ CLIENT , " disableStairSlabCulling " , false , <nl> " Disable culling of hidden faces next to stairs and slabs . Causes extra rendering , but may fix some resource packs that exploit this vanilla mechanic . " ) ; <nl> disableStairSlabCulling = prop . getBoolean ( false ) ; <nl> @ @ - 349 , 13 + 341 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> } <nl> } <nl> <nl> - public static void updateNag ( ) <nl> - { <nl> - Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; <nl> - prop . set ( ( new Date ( ) ) . getTime ( ) ) ; <nl> - config . save ( ) ; <nl> - } <nl> - <nl> / * * <nl> * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . <nl> * This implementation uses the optional configID string to handle multiple Configurations using one event handler . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 2d8725d . . 2a2e2e1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import java . lang . ref . WeakReference ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> - import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> @ @ - 81 , 7 + 80 , 6 @ @ import net . minecraft . world . WorldSettings ; <nl> import net . minecraft . world . storage . WorldSummary ; <nl> import net . minecraft . world . storage . SaveFormatOld ; <nl> import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> - import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . common . config . ConfigManager ; <nl> import net . minecraftforge . common . util . CompoundDataFixer ; <nl> @ @ - 92 , 7 + 90 , 6 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLContainerHolder ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . IFMLSidedHandler ; <nl> - import net . minecraftforge . fml . common . Java8VersionException ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderException ; <nl> import net . minecraftforge . fml . common . MetadataCollection ; <nl> @ @ - 179 , 8 + 176 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private boolean loading = true ; <nl> <nl> - private Java8VersionException j8onlymods ; <nl> - <nl> private WrongMinecraftVersionException wrongMC ; <nl> <nl> private CustomModLoadingErrorDisplayException customError ; <nl> @ @ - 240 , 10 + 235 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> dupesFound = dupes ; <nl> } <nl> - catch ( Java8VersionException j8mods ) <nl> - { <nl> - j8onlymods = j8mods ; <nl> - } <nl> catch ( MissingModsException missing ) <nl> { <nl> modsMissing = missing ; <nl> @ @ - 338 , 7 + 329 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> public boolean hasError ( ) <nl> { <nl> - return modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null | | multipleModsErrored ! = null ; <nl> + return modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | multipleModsErrored ! = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 440 , 10 + 431 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; <nl> } <nl> - else if ( j8onlymods ! = null ) <nl> - { <nl> - showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; <nl> - } <nl> else if ( modsMissing ! = null ) <nl> { <nl> showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; <nl> @ @ - 467 , 14 + 454 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> else <nl> { <nl> logMissingTextureErrors ( ) ; <nl> - if ( ! Loader . instance ( ) . java8 ) <nl> - { <nl> - if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) <nl> - { <nl> - showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> - ForgeModContainer . updateNag ( ) ; <nl> - } <nl> - } <nl> } <nl> } <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> deleted file mode 100644 <nl> index d986948 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> + + + / dev / null <nl> @ @ - 1 , 136 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . fml . client ; <nl> - <nl> - import net . minecraft . client . gui . GuiButton ; <nl> - import net . minecraft . client . resources . I18n ; <nl> - import net . minecraft . util . text . TextFormatting ; <nl> - import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> - import net . minecraftforge . fml . common . Java8VersionException ; <nl> - import net . minecraftforge . fml . common . Loader ; <nl> - import net . minecraftforge . fml . common . ModContainer ; <nl> - import org . apache . logging . log4j . Level ; <nl> - <nl> - import com . google . common . collect . Lists ; <nl> - <nl> - import java . awt . Desktop ; <nl> - import java . net . URI ; <nl> - import java . util . List ; <nl> - <nl> - public class GuiJava8Error extends GuiErrorBase <nl> - { <nl> - private Java8VersionException java8VersionException ; <nl> - public GuiJava8Error ( Java8VersionException java8VersionException ) <nl> - { <nl> - this . java8VersionException = java8VersionException ; <nl> - } <nl> - <nl> - @ Override <nl> - public void initGui ( ) <nl> - { <nl> - super . initGui ( ) ; <nl> - this . buttonList . remove ( 1 ) ; <nl> - if ( java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> - { <nl> - this . buttonList . remove ( 0 ) ; <nl> - this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; <nl> - } <nl> - this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void actionPerformed ( GuiButton button ) <nl> - { <nl> - if ( button . id = = 1 ) <nl> - { <nl> - FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; <nl> - } <nl> - else if ( button . id = = 2 ) <nl> - { <nl> - try <nl> - { <nl> - Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - FMLLog . log . error ( " Problem launching browser " , e ) ; <nl> - } <nl> - } <nl> - else <nl> - { <nl> - super . actionPerformed ( button ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> - { <nl> - this . drawDefaultBackground ( ) ; <nl> - int offset = 25 ; <nl> - if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> - { <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - } <nl> - else <nl> - { <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - } <nl> - offset + = 15 ; <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 10 ; <nl> - if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> - { <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 15 ; <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 10 ; <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 5 ; <nl> - for ( ModContainer mc : java8VersionException . getMods ( ) ) <nl> - { <nl> - offset + = 10 ; <nl> - this . drawCenteredString ( this . fontRenderer , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> - } <nl> - } <nl> - else <nl> - { <nl> - String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; <nl> - List < String > lines = Lists . newArrayList ( ) ; <nl> - for ( String line : text . split ( " \ n " ) ) <nl> - { <nl> - lines . addAll ( this . fontRenderer . listFormattedStringToWidth ( line , this . width - this . fontRenderer . FONT _ HEIGHT * 4 ) ) ; <nl> - } <nl> - <nl> - int maxWidth = 0 ; <nl> - for ( String line : lines ) <nl> - { <nl> - maxWidth = Math . max ( maxWidth , this . fontRenderer . getStringWidth ( line ) ) ; <nl> - } <nl> - <nl> - for ( String line : lines ) <nl> - { <nl> - this . drawString ( this . fontRenderer , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = this . fontRenderer . FONT _ HEIGHT + 2 ; <nl> - } <nl> - } <nl> - super . drawScreen ( mouseX , mouseY , partialTicks ) ; <nl> - } <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> deleted file mode 100644 <nl> index 56dad33 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> + + + / dev / null <nl> @ @ - 1 , 50 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . fml . common ; <nl> - <nl> - import java . util . List ; <nl> - <nl> - public class Java8VersionException extends EnhancedRuntimeException <nl> - { <nl> - private static final long serialVersionUID = 1L ; <nl> - private final List < ModContainer > mods ; <nl> - <nl> - public Java8VersionException ( List < ModContainer > mods ) <nl> - { <nl> - super ( " Mods require Java 8 " ) ; <nl> - this . mods = mods ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void printStackTrace ( WrappedPrintStream stream ) <nl> - { <nl> - stream . println ( " Mods requiring Java 8 : " ) ; <nl> - for ( ModContainer mc : mods ) <nl> - { <nl> - stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; <nl> - } <nl> - stream . println ( " " ) ; <nl> - } <nl> - <nl> - public List < ModContainer > getMods ( ) <nl> - { <nl> - return mods ; <nl> - } <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 6ffb788 . . 5a5f628 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 174 , 7 + 174 , 6 @ @ public class Loader <nl> private File forcedModFile ; <nl> private ModDiscoverer discoverer ; <nl> private ProgressBar progressBar ; <nl> - public final boolean java8 ; <nl> <nl> public static Loader instance ( ) <nl> { <nl> @ @ - 201 , 14 + 200 , 6 @ @ public class Loader <nl> <nl> private Loader ( ) <nl> { <nl> - String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; <nl> - int major = Integer . parseInt ( ver [ 1 ] ) ; <nl> - java8 = major > 7 ; <nl> - if ( ! java8 ) <nl> - { <nl> - FMLLog . log . fatal ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; <nl> - } <nl> - <nl> modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; <nl> if ( mccversion ! = null & & ! mccversion . equals ( MC _ VERSION ) ) <nl> { <nl> @ @ - 555 , 7 + 546 , 6 @ @ public class Loader <nl> ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; <nl> disableRequestedMods ( ) ; <nl> modController . distributeStateMessage ( FMLLoadEvent . class ) ; <nl> - checkJavaCompatibility ( ) ; <nl> sortModList ( ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; <nl> @ @ - 613 , 24 + 603 , 6 @ @ public class Loader <nl> modController . transition ( LoaderState . PREINITIALIZATION , false ) ; <nl> } <nl> <nl> - <nl> - private void checkJavaCompatibility ( ) <nl> - { <nl> - if ( java8 ) return ; <nl> - List < ModContainer > j8mods = Lists . newArrayList ( ) ; <nl> - for ( ModContainer mc : getActiveModList ( ) ) <nl> - { <nl> - if ( mc . getClassVersion ( ) > = 52 ) <nl> - { <nl> - j8mods . add ( mc ) ; <nl> - } <nl> - } <nl> - if ( ! j8mods . isEmpty ( ) ) <nl> - { <nl> - throw new Java8VersionException ( j8mods ) ; <nl> - } <nl> - } <nl> - <nl> public void preinitializeMods ( ) <nl> { <nl> if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> index dde3ca0 . . 8385a50 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> @ @ - 131 , 11 + 131 , 7 @ @ public class ASMModParser <nl> <nl> public void validate ( ) <nl> { <nl> - / / if ( classVersion > 50 . 0 ) <nl> - / / { <nl> - / / <nl> - / / throw new LoaderException ( new RuntimeException ( " Mod compiled for Java 7 detected " ) ) ; <nl> - / / } <nl> + <nl> } <nl> <nl> public boolean isBaseMod ( List < String > rememberedTypes ) <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 16c4ed4 . . ad8e613 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 49 , 7 + 49 , 6 @ @ forge . configgui . zombieBaseSummonChance = Zombie Summon Chance <nl> forge . configgui . stencilbits = Enable GL Stencil Bits <nl> forge . configgui . replaceBuckets = Use Forge ' s bucket model <nl> forge . configgui . forgeLightPipelineEnabled = Forge Light Pipeline Enabled <nl> - forge . configgui . java8Reminder = Java 8 Reminder timestamp <nl> forge . configgui . disableStairSlabCulling = Disable Stair / Slab culling . <nl> forge . configgui . zoomInMissingModelTextInGui = Zoom in Missing model text in the GUI <nl> forge . configgui . disableStairSlabCulling . tooltip = Enable this if you see through blocks touching stairs / slabs with your resource pack . <nl> @ @ - 167 , 16 + 166 , 6 @ @ fml . menu . modoptions = Mod Options . . . <nl> <nl> item . forge . bucketFilled . name = % s Bucket <nl> <nl> - fml . messages . java8problem = % s % sJava Update Required % s <nl> - fml . messages . java8recommended = % s % sJava Update Recommended % s <nl> - fml . messages . modslistedbelow = The mods listed below % s <nl> - fml . messages . requirejava8 = require Java 8 <nl> - fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! <nl> - fml . messages . java8warning . 2 = You need to update Java <nl> - fml . messages . javaversion = Your Java version is Java % s ( version string % s ) <nl> - fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play <nl> - fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods <nl> - fml . messages . countbadandgood = % s of % s mods have this problem <nl> fml . messages . mod . missing . dependencies = % s is missing mods it depends on . <nl> fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . <nl> fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . <nl> @ @ - 193 , 7 + 182 , 6 @ @ fml . messages . version . restriction . upper . inclusive = % s or below <nl> fml . messages . version . restriction . upper . exclusive = below % s <nl> fml . messages . version . restriction . bounded = between % s and % s <nl> <nl> - fml . button . visitjavadownloads = Oracle Java SE Downloads <nl> fml . button . continue = Continue <nl> fml . button . open . mods . folder = Open Mods Folder <nl> fml . button . open . file = Open % s

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 1f725cd . . 1cca2fd 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 161 , 7 + 161 , 7 @ @ project ( ' : forge ' ) { 
 exc = file ( " $ rootDir / src / main / resources / forge . exc " ) 
 srgPatches = true 
 runs { 
 - client = { 
 + forge _ client = { 
 main ' net . minecraftforge . fml . LaunchTesting ' 
 environment = [ 
 target : ' fmldevclient ' , 
 @ @ - 180 , 7 + 180 , 7 @ @ project ( ' : forge ' ) { 
 ' fmllauncher . version ' : SPEC _ VERSION 
 ] 
 } 
 - server = { 
 + forge _ server = { 
 main ' net . minecraftforge . fml . LaunchTesting ' 
 environment = [ 
 target : ' fmldevserver ' 
 @ @ - 190 , 7 + 190 , 8 @ @ project ( ' : forge ' ) { 
 ' mcp . version ' : MCP _ VERSION , 
 ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , 
 ' forge . spec ' : SPEC _ VERSION , 
 - ' forge . group ' : project . group 
 + ' forge . group ' : project . group , 
 + ' fmllauncher . version ' : SPEC _ VERSION 
 ] 
 } 
 } 
 @ @ - 285 , 9 + 286 , 9 @ @ project ( ' : forge ' ) { 
 } 
 / / jvmArgs = [ ' - verbose : class ' ] 
 classpath sourceSets . main . runtimeClasspath 
 - main patcher . runs . client . main 
 - systemProperties = patcher . runs . client . properties 
 - environment + = patcher . runs . client . environment 
 + main patcher . runs . forge _ client . main 
 + systemProperties = patcher . runs . forge _ client . properties 
 + environment + = patcher . runs . forge _ client . environment 
 workingDir ' runclient ' 
 } 
 
 @ @ - 302 , 10 + 303 , 10 @ @ project ( ' : forge ' ) { 
 } 
 } 
 classpath sourceSets . main . runtimeClasspath 
 - main patcher . runs . server . main 
 + main patcher . runs . forge _ server . main 
 args ' nogui ' 
 - systemProperties = patcher . runs . server . properties 
 - environment + = patcher . runs . server . environment 
 + systemProperties = patcher . runs . forge _ server . properties 
 + environment + = patcher . runs . forge _ server . environment 
 workingDir ' runserver ' 
 standardInput = System . in 
 } 
 @ @ - 808 , 7 + 809 , 7 @ @ project ( ' : forge ' ) { 
 } 
 server = { 
 main ' net . minecraftforge . userdev . UserdevLauncher ' 
 - environment ' target ' , ' fmldevserver ' 
 + environment ' target ' , ' fmluserdevserver ' 
 environment ' FORGE _ VERSION ' , project . version . substring ( MC _ VERSION . length ( ) + 1 ) 
 environment ' FORGE _ GROUP ' , project . group 
 environment ' MCP _ VERSION ' , MCP _ VERSION 
 diff - - git a / patches / minecraft / net / minecraft / init / Fluids . java . patch b / patches / minecraft / net / minecraft / init / Fluids . java . patch 
 deleted file mode 100644 
 index 12f17ba . . 0000000 
 - - - a / patches / minecraft / net / minecraft / init / Fluids . java . patch 
 + + + / dev / null 
 @ @ - 1 , 10 + 0 , 0 @ @ 
 - - - - a / net / minecraft / init / Fluids . java 
 - + + + b / net / minecraft / init / Fluids . java 
 - @ @ - 6 , 6 + 6 , 7 @ @ 
 - import net . minecraft . fluid . Fluid ; 
 - import net . minecraft . util . ResourceLocation ; 
 - 
 - + @ net . minecraftforge . registries . ObjectHolder ( " minecraft " ) 
 - public class Fluids { 
 - private static final Set < Fluid > field _ 207214 _ f ; 
 - public static final Fluid field _ 204541 _ a ; 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / language / ModFileScanData . java b / src / fmllauncher / java / net / minecraftforge / fml / language / ModFileScanData . java 
 index fbe77d5 . . 3a2accc 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / language / ModFileScanData . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / language / ModFileScanData . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml . language ; 
 
 import org . objectweb . asm . Type ; 
 
 + import java . lang . annotation . ElementType ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 71 , 13 + 72 , 15 @ @ public class ModFileScanData 
 } 
 public static class AnnotationData { 
 private final Type annotationType ; 
 + private final ElementType targetType ; 
 private final Type clazz ; 
 private final String memberName ; 
 private final Map < String , Object > annotationData ; 
 
 
 - public AnnotationData ( final Type annotationType , final Type clazz , final String memberName , final Map < String , Object > annotationData ) { 
 + public AnnotationData ( final Type annotationType , final ElementType targetType , final Type clazz , final String memberName , final Map < String , Object > annotationData ) { 
 this . annotationType = annotationType ; 
 + this . targetType = targetType ; 
 this . clazz = clazz ; 
 this . memberName = memberName ; 
 this . annotationData = annotationData ; 
 @ @ - 87 , 6 + 90 , 10 @ @ public class ModFileScanData 
 return annotationType ; 
 } 
 
 + public ElementType getTargetType ( ) { 
 + return targetType ; 
 + } 
 + 
 public Type getClassType ( ) { 
 return clazz ; 
 } 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / StringUtils . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / StringUtils . java 
 index 3f6a78a . . bd5be44 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / StringUtils . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / StringUtils . java 
 @ @ - 26 , 9 + 26 , 6 @ @ import java . net . URL ; 
 import java . util . Locale ; 
 import java . util . Map ; 
 
 - / * * 
 - * Created by cpw on 05 / 06 / 17 . 
 - * / 
 public class StringUtils 
 { 
 public static String toLowerCase ( final String str ) { 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModAnnotation . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModAnnotation . java 
 index bdd54ef . . e0781b2 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModAnnotation . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModAnnotation . java 
 @ @ - 33 , 7 + 33 , 7 @ @ import com . google . common . collect . Maps ; 
 public class ModAnnotation 
 { 
 public static ModFileScanData . AnnotationData fromModAnnotation ( final Type clazz , final ModAnnotation annotation ) { 
 - return new ModFileScanData . AnnotationData ( annotation . asmType , clazz , annotation . member , annotation . values ) ; 
 + return new ModFileScanData . AnnotationData ( annotation . asmType , annotation . type , clazz , annotation . member , annotation . values ) ; 
 } 
 
 public static class EnumHolder 
 diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 index f2a35c4 . . 30729a4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 @ @ - 44 , 9 + 44 , 9 @ @ public class ForgeI18n { 
 / / { 0 , modinfo , id } - > modid from ModInfo object ; { 0 , modinfo , name } - > displayname from ModInfo object 
 customFactories . put ( " modinfo " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > parseModInfo ( formatString , stringBuffer , objectToParse ) ) ) ; 
 / / { 0 , lower } - > lowercase supplied string 
 - customFactories . put ( " lower " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toLowerCase ( ( String ) objectToParse ) ) ) ) ; 
 + customFactories . put ( " lower " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toLowerCase ( String . valueOf ( objectToParse ) ) ) ) ) ; 
 / / { 0 , upper > - > uppercase supplied string 
 - customFactories . put ( " upper " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toUpperCase ( ( String ) objectToParse ) ) ) ) ; 
 + customFactories . put ( " upper " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toUpperCase ( String . valueOf ( objectToParse ) ) ) ) ) ; 
 / / { 0 , exc , class } - > class of exception ; { 0 , exc , msg } - > message from exception 
 customFactories . put ( " exc " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > parseException ( formatString , stringBuffer , objectToParse ) ) ) ; 
 / / { 0 , vr } - > transform VersionRange into cleartext string using fml . messages . version . restriction . * strings 
 @ @ - 112 , 4 + 112 , 4 @ @ public class ForgeI18n { 
 throw new UnsupportedOperationException ( " Parsing is not supported " ) ; 
 } 
 } 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 index c4f6f62 . . 12c8f90 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 @ @ - 30 , 6 + 30 , 8 @ @ import net . minecraftforge . fml . loading . LoadingModList ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModFileInfo ; 
 import net . minecraftforge . registries . GameData ; 
 + import net . minecraftforge . registries . ObjectHolderRegistry ; 
 + 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 @ @ - 86 , 6 + 88 , 7 @ @ public class ModLoader 
 modList . setLoadedMods ( modContainerStream . collect ( Collectors . toList ( ) ) ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . CONSTRUCT ) ; 
 GameData . fireCreateRegistryEvents ( ) ; 
 + ObjectHolderRegistry . findObjectHolders ( ) ; 
 CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; 
 GameData . fireRegistryEvents ( ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . PREINIT ) ; 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 6864f88 . . 4907918 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 695 , 7 + 695 , 7 @ @ public class GameData 
 / / Loader . instance ( ) . fireRemapEvent ( remaps , false ) ; 
 
 / / The id map changed , ensure we apply object holders 
 - ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 + ObjectHolderRegistry . applyObjectHolders ( ) ; 
 
 / / Return an empty list , because we ' re good 
 return ArrayListMultimap . create ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / registries / ObjectHolderRef . java b / src / main / java / net / minecraftforge / registries / ObjectHolderRef . java 
 index 328bcae . . 5ded8f2 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ObjectHolderRef . java 
 + + + b / src / main / java / net / minecraftforge / registries / ObjectHolderRef . java 
 @ @ - 26 , 17 + 26 , 15 @ @ import java . util . LinkedList ; 
 import java . util . Queue ; 
 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . ResourceLocationException ; 
 
 import javax . annotation . Nullable ; 
 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 - / * * 
 - * Internal class used in tracking { @ link ObjectHolder } references 
 - * / 
 @ SuppressWarnings ( " rawtypes " ) 
 - class ObjectHolderRef 
 + public class ObjectHolderRef implements Runnable 
 { 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 private Field field ; 
 @ @ - 44 , 19 + 42 , 24 @ @ class ObjectHolderRef 
 private boolean isValid ; 
 private ForgeRegistry < ? > registry ; 
 
 - ObjectHolderRef ( Field field , ResourceLocation injectedObject , boolean extractFromExistingValues ) 
 + public ObjectHolderRef ( Field field , ResourceLocation injectedObject ) 
 { 
 - registry = getRegistryForType ( field ) ; 
 + this ( field , injectedObject . toString ( ) , false ) ; 
 + } 
 
 + ObjectHolderRef ( Field field , String injectedObject , boolean extractFromExistingValues ) 
 + { 
 + this . registry = getRegistryForType ( field ) ; 
 this . field = field ; 
 this . isValid = registry ! = null ; 
 + 
 if ( extractFromExistingValues ) 
 { 
 try 
 { 
 Object existing = field . get ( null ) ; 
 / / nothing is ever allowed to replace AIR 
 - if ( existing = = null | | existing = = registry . getDefault ( ) ) 
 + if ( ! isValid | | ( existing = = null | | existing = = registry . getDefault ( ) ) ) 
 { 
 this . injectedObject = null ; 
 this . field = null ; 
 @ @ - 75 , 7 + 78 , 14 @ @ class ObjectHolderRef 
 } 
 else 
 { 
 - this . injectedObject = injectedObject ; 
 + try 
 + { 
 + this . injectedObject = new ResourceLocation ( injectedObject ) ; 
 + } 
 + catch ( ResourceLocationException e ) 
 + { 
 + throw new IllegalArgumentException ( " Invalid @ ObjectHolder annotation on \ " " + field . toString ( ) + " \ " " , e ) ; 
 + } 
 } 
 
 if ( this . injectedObject = = null | | ! isValid ( ) ) 
 @ @ - 103 , 9 + 113 , 9 @ @ class ObjectHolderRef 
 { 
 Class < ? > type = typesToExamine . remove ( ) ; 
 Collections . addAll ( typesToExamine , type . getInterfaces ( ) ) ; 
 - if ( ForgeRegistryEntry . class . isAssignableFrom ( type ) ) 
 + if ( IForgeRegistryEntry . class . isAssignableFrom ( type ) ) 
 { 
 - registry = ( ForgeRegistry < ? > ) RegistryManager . ACTIVE . getRegistry ( ( Class < ForgeRegistryEntry > ) type ) ; 
 + registry = ( ForgeRegistry < ? > ) RegistryManager . ACTIVE . getRegistry ( ( Class < IForgeRegistryEntry > ) type ) ; 
 final Class < ? > parentType = type . getSuperclass ( ) ; 
 if ( parentType ! = null ) 
 { 
 @ @ - 121 , 7 + 131 , 8 @ @ class ObjectHolderRef 
 return isValid ; 
 } 
 
 - public void apply ( ) 
 + @ Override 
 + public void run ( ) 
 { 
 Object thing ; 
 if ( isValid & & registry . containsKey ( injectedObject ) & & ! registry . isDummied ( injectedObject ) ) 
 @ @ - 147 , 4 + 158 , 19 @ @ class ObjectHolderRef 
 LOGGER . warn ( " Unable to set { } with value { } ( { } ) " , this . field , thing , this . injectedObject , e ) ; 
 } 
 } 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return field . hashCode ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object other ) 
 + { 
 + if ( ! ( other instanceof ObjectHolderRef ) ) 
 + return false ; 
 + ObjectHolderRef o = ( ObjectHolderRef ) other ; 
 + return this . field . equals ( o . field ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java b / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java 
 index 21115f8 . . 66ec9f9 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java 
 @ @ - 19 , 17 + 19 , 20 @ @ 
 
 package net . minecraftforge . registries ; 
 
 + import java . lang . annotation . ElementType ; 
 import java . lang . reflect . Field ; 
 - import java . lang . reflect . Modifier ; 
 + import java . util . Collection ; 
 + import java . util . HashSet ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . stream . Collectors ; 
 
 - import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . ModList ; 
 import net . minecraftforge . fml . common . Mod ; 
 - import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . language . ModFileScanData ; 
 
 - import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 
 import javax . annotation . Nullable ; 
 @ @ - 37 , 52 + 40 , 85 @ @ import javax . annotation . Nullable ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . objectweb . asm . Opcodes ; 
 + import org . objectweb . asm . Type ; 
 
 / * * 
 * Internal registry for tracking { @ link ObjectHolder } references 
 * / 
 - public enum ObjectHolderRegistry 
 + public class ObjectHolderRegistry 
 { 
 - INSTANCE ; 
 + / * * 
 + * Exposed to allow modders to register their own notification handlers . 
 + * This runnable will be called after a registry snapshot has been injected and finalized . 
 + * The internal list is backed by a HashSet so it is HIGHLY recommended you implement a proper equals 
 + * and hashCode function to de - duplicate callers here . 
 + * The default @ ObjectHolder implementation uses the hashCode / equals for the field the annotation is on . 
 + * / 
 + public static void addHandler ( Runnable ref ) 
 + { 
 + objectHolders . add ( ref ) ; 
 + } 
 + 
 + / * * 
 + * Removed the specified handler from the notification list . 
 + * 
 + * The internal list is backed by a hash set , and so proper hashCode and equals operations are required for success . 
 + * 
 + * The default @ ObjectHolder implementation uses the hashCode / equals for the field the annotation is on . 
 + * 
 + * @ return true if handler was matched and removed . 
 + * / 
 + public static boolean removeHandler ( Runnable ref ) 
 + { 
 + return objectHolders . remove ( ref ) ; 
 + } 
 + 
 + / / = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + / / Everything below is internal , do not use . 
 + / / = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 + 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 - private List < ObjectHolderRef > objectHolders = Lists . newArrayList ( ) ; 
 - / * TODO annotation data 
 - public void findObjectHolders ( ASMDataTable table ) 
 + private static final Set < Runnable > objectHolders = new HashSet < > ( ) ; 
 + private static final Type OBJECT _ HOLDER = Type . getType ( ObjectHolder . class ) ; 
 + private static final Type MOD = Type . getType ( Mod . class ) ; 
 + 
 + public static void findObjectHolders ( ) 
 { 
 LOGGER . info ( " Processing ObjectHolder annotations " ) ; 
 - Set < ASMData > allObjectHolders = table . getAll ( ObjectHolder . class . getName ( ) ) ; 
 - Map < String , String > classModIds = Maps . newHashMap ( ) ; 
 - Map < String , Class < ? > > classCache = Maps . newHashMap ( ) ; 
 + final List < ModFileScanData . AnnotationData > annotations = ModList . get ( ) . getAllScanData ( ) . stream ( ) 
 + . map ( ModFileScanData : : getAnnotations ) 
 + . flatMap ( Collection : : stream ) 
 + . filter ( a - > OBJECT _ HOLDER . equals ( a . getAnnotationType ( ) ) | | MOD . equals ( a . getAnnotationType ( ) ) ) 
 + . collect ( Collectors . toList ( ) ) ; 
 
 - table . getAll ( Mod . class . getName ( ) ) . forEach ( data - > classModIds . put ( data . getClassName ( ) , ( String ) data . getAnnotationInfo ( ) . get ( " value " ) ) ) ; 
 + Map < Type , String > classModIds = Maps . newHashMap ( ) ; 
 + Map < Type , Class < ? > > classCache = Maps . newHashMap ( ) ; 
 + 
 + / / Gather all @ Mod classes , so that @ ObjectHolder ' s in those classes don ' t need to specify the mod id , Modder convince 
 + annotations . stream ( ) . filter ( a - > MOD . equals ( a . getAnnotationType ( ) ) ) . forEach ( data - > classModIds . put ( data . getClassType ( ) , ( String ) data . getAnnotationData ( ) . get ( " value " ) ) ) ; 
 
 / / double pass - get all the class level annotations first , then the field level annotations 
 - allObjectHolders . stream ( ) . filter ( data - > data . getObjectName ( ) . equals ( data . getClassName ( ) ) ) . forEach ( data - > 
 - { 
 - String value = ( String ) data . getAnnotationInfo ( ) . get ( " value " ) ; 
 - scanTarget ( classModIds , classCache , data . getClassName ( ) , data . getObjectName ( ) , value , true , data . getClassName ( ) . startsWith ( " net . minecraft . init " ) ) ; 
 - } ) ; 
 - allObjectHolders . stream ( ) . filter ( data - > ! data . getObjectName ( ) . equals ( data . getClassName ( ) ) ) . forEach ( data - > 
 - { 
 - String value = ( String ) data . getAnnotationInfo ( ) . get ( " value " ) ; 
 - scanTarget ( classModIds , classCache , data . getClassName ( ) , data . getObjectName ( ) , value , false , false ) ; 
 - } ) ; 
 + annotations . stream ( ) . filter ( a - > OBJECT _ HOLDER . equals ( a . getAnnotationType ( ) ) ) . filter ( a - > a . getTargetType ( ) = = ElementType . TYPE ) 
 + . forEach ( data - > scanTarget ( classModIds , classCache , data . getClassType ( ) , null , ( String ) data . getAnnotationData ( ) . get ( " value " ) , true , data . getClassType ( ) . getClassName ( ) . startsWith ( " net . minecraft . init " ) ) ) ; 
 + 
 + annotations . stream ( ) . filter ( a - > OBJECT _ HOLDER . equals ( a . getAnnotationType ( ) ) ) . filter ( a - > a . getTargetType ( ) = = ElementType . FIELD ) 
 + . forEach ( data - > scanTarget ( classModIds , classCache , data . getClassType ( ) , data . getMemberName ( ) , ( String ) data . getAnnotationData ( ) . get ( " value " ) , false , false ) ) ; 
 LOGGER . info ( " Found { } ObjectHolder annotations " , objectHolders . size ( ) ) ; 
 } 
 - * / 
 - private void scanTarget ( Map < String , String > classModIds , Map < String , Class < ? > > classCache , String className , @ Nullable String annotationTarget , String value , boolean isClass , boolean extractFromValue ) 
 + 
 + private static void scanTarget ( Map < Type , String > classModIds , Map < Type , Class < ? > > classCache , Type type , @ Nullable String annotationTarget , String value , boolean isClass , boolean extractFromValue ) 
 { 
 Class < ? > clazz ; 
 - if ( classCache . containsKey ( className ) ) 
 + if ( classCache . containsKey ( type ) ) 
 { 
 - clazz = classCache . get ( className ) ; 
 + clazz = classCache . get ( type ) ; 
 } 
 else 
 { 
 try 
 { 
 - clazz = Class . forName ( className , extractFromValue , getClass ( ) . getClassLoader ( ) ) ; 
 - classCache . put ( className , clazz ) ; 
 + clazz = Class . forName ( type . getClassName ( ) , extractFromValue , ObjectHolderRegistry . class . getClassLoader ( ) ) ; 
 + classCache . put ( type , clazz ) ; 
 } 
 catch ( ClassNotFoundException ex ) 
 { 
 @ @ - 92 , 24 + 128 , 26 @ @ public enum ObjectHolderRegistry 
 } 
 if ( isClass ) 
 { 
 - scanClassForFields ( classModIds , className , value , clazz , extractFromValue ) ; 
 + scanClassForFields ( classModIds , type , value , clazz , extractFromValue ) ; 
 } 
 else 
 { 
 if ( value . indexOf ( ' : ' ) = = - 1 ) 
 { 
 - String prefix = classModIds . get ( className ) ; 
 + String prefix = classModIds . get ( type ) ; 
 if ( prefix = = null ) 
 { 
 - LOGGER . warn ( " Found an unqualified ObjectHolder annotation ( { } ) without a modid context at { } . { } , ignoring " , value , className , annotationTarget ) ; 
 + LOGGER . warn ( " Found an unqualified ObjectHolder annotation ( { } ) without a modid context at { } . { } , ignoring " , value , type , annotationTarget ) ; 
 throw new IllegalStateException ( " Unqualified reference to ObjectHolder " ) ; 
 } 
 - value = prefix + " : " + value ; 
 + value = prefix + ' : ' + value ; 
 } 
 try 
 { 
 Field f = clazz . getDeclaredField ( annotationTarget ) ; 
 - addHolderReference ( new ObjectHolderRef ( f , new ResourceLocation ( value ) , extractFromValue ) ) ; 
 + ObjectHolderRef ref = new ObjectHolderRef ( f , value , extractFromValue ) ; 
 + if ( ref . isValid ( ) ) 
 + addHandler ( ref ) ; 
 } 
 catch ( NoSuchFieldException ex ) 
 { 
 @ @ - 119 , 32 + 157 , 24 @ @ public enum ObjectHolderRegistry 
 } 
 } 
 
 - private void scanClassForFields ( Map < String , String > classModIds , String className , String value , Class < ? > clazz , boolean extractFromExistingValues ) 
 + private static void scanClassForFields ( Map < Type , String > classModIds , Type targetClass , String value , Class < ? > clazz , boolean extractFromExistingValues ) 
 { 
 - classModIds . put ( className , value ) ; 
 + classModIds . put ( targetClass , value ) ; 
 final int flags = Opcodes . ACC _ PUBLIC | Opcodes . ACC _ STATIC | Opcodes . ACC _ SYNTHETIC ; 
 for ( Field f : clazz . getFields ( ) ) 
 { 
 if ( ( ( f . getModifiers ( ) & flags ) ! = flags ) | | f . isAnnotationPresent ( ObjectHolder . class ) ) 
 - { 
 continue ; 
 - } 
 - addHolderReference ( new ObjectHolderRef ( f , new ResourceLocation ( value , f . getName ( ) ) , extractFromExistingValues ) ) ; 
 - } 
 - } 
 - 
 - private void addHolderReference ( ObjectHolderRef ref ) 
 - { 
 - if ( ref . isValid ( ) ) 
 - { 
 - objectHolders . add ( ref ) ; 
 + ObjectHolderRef ref = new ObjectHolderRef ( f , value + ' : ' + f . getName ( ) . toLowerCase ( Locale . ENGLISH ) , extractFromExistingValues ) ; 
 + if ( ref . isValid ( ) ) 
 + addHandler ( ref ) ; 
 } 
 } 
 
 - public void applyObjectHolders ( ) 
 + public static void applyObjectHolders ( ) 
 { 
 LOGGER . info ( " Applying holder lookups " ) ; 
 - objectHolders . forEach ( ObjectHolderRef : : apply ) ; 
 + objectHolders . forEach ( Runnable : : run ) ; 
 LOGGER . info ( " Holder lookups applied " ) ; 
 } 


NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 index 70670bf . . f12c53c 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 73 , 12 + 73 , 3 @ @ 
 } 
 
 protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException 
 - @ @ - 562 , 6 + 583 , 8 @ @ 
 - { 
 - this . field _ 146297 _ k . func _ 147108 _ a ( new GuiWinGame ( false , Runnables . doNothing ( ) ) ) ; 
 - } 
 - + 
 - + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; 
 - } 
 - 
 - public void func _ 146281 _ b ( ) 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 57ce4b1 . . bc2e442 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 29 , 7 + 29 , 6 @ @ import java . awt . image . BufferedImage ; 
 import java . io . File ; 
 import java . nio . ByteBuffer ; 
 import java . nio . FloatBuffer ; 
 - import java . util . Collections ; 
 import java . util . Map ; 
 
 import javax . annotation . Nonnull ; 
 @ @ - 115 , 12 + 114 , 8 @ @ import net . minecraftforge . common . model . IModelPart ; 
 import net . minecraftforge . common . model . ITransformation ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 - import net . minecraftforge . fml . client . GuiJava8Error ; 
 import net . minecraftforge . fml . client . registry . ClientRegistry ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 - import net . minecraftforge . fml . common . Java8VersionException ; 
 - import net . minecraftforge . fml . common . Loader ; 
 - import net . minecraftforge . fml . common . ModContainer ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 import org . lwjgl . BufferUtils ; 
 @ @ - 314 , 17 + 309 , 6 @ @ public class ForgeHooksClient 
 gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 } 
 
 - if ( ! Loader . instance ( ) . java8 ) 
 - { 
 - String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; 
 - gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 - line = I18n . format ( " fml . messages . java8warning . 2 " ) ; 
 - gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 - splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; 
 - updatescrollcounter + = 1 ; 
 - updatescrollcounter % = 100 ; 
 - } 
 - 
 String line = null ; 
 switch ( status ) 
 { 
 @ @ - 345 , 22 + 329 , 6 @ @ public class ForgeHooksClient 
 return splashText ; 
 } 
 
 - public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) 
 - { 
 - if ( ! Loader . instance ( ) . java8 ) 
 - { 
 - if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) 
 - { 
 - int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; 
 - w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; 
 - if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) 
 - { 
 - FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 - } 
 - } 
 - } 
 - } 
 - 
 public static ISound playSound ( SoundManager manager , ISound sound ) 
 { 
 PlaySoundEvent e = new PlaySoundEvent ( manager , sound ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 42f14ee . . b27400c 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 36 , 7 + 36 , 6 @ @ import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 - import java . util . Date ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 121 , 7 + 120 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean forgeLightPipelineEnabled = true ; 
 public static boolean replaceVanillaBucketModel = true ; 
 public static boolean zoomInMissingModelTextInGui = false ; 
 - public static long java8Reminder = 0 ; 
 public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag 
 public static boolean alwaysSetupTerrainOffThread = false ; / / In RenderGlobal . setupTerrain , always force the chunk render updates to be queued to the thread 
 public static int dimensionUnloadQueueDelay = 0 ; 
 @ @ - 322 , 12 + 320 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . setLanguageKey ( " forge . configgui . zoomInMissingModelTextInGui " ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 - prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , 0 , 
 - " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; 
 - java8Reminder = prop . getLong ( 0 ) ; 
 - prop . setLanguageKey ( " forge . configgui . java8Reminder " ) ; 
 - propOrder . add ( prop . getName ( ) ) ; 
 - 
 prop = config . get ( Configuration . CATEGORY _ CLIENT , " disableStairSlabCulling " , false , 
 " Disable culling of hidden faces next to stairs and slabs . Causes extra rendering , but may fix some resource packs that exploit this vanilla mechanic . " ) ; 
 disableStairSlabCulling = prop . getBoolean ( false ) ; 
 @ @ - 349 , 13 + 341 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 } 
 } 
 
 - public static void updateNag ( ) 
 - { 
 - Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; 
 - prop . set ( ( new Date ( ) ) . getTime ( ) ) ; 
 - config . save ( ) ; 
 - } 
 - 
 / * * 
 * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . 
 * This implementation uses the optional configID string to handle multiple Configurations using one event handler . 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 2d8725d . . 2a2e2e1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 - import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 @ @ - 81 , 7 + 80 , 6 @ @ import net . minecraft . world . WorldSettings ; 
 import net . minecraft . world . storage . WorldSummary ; 
 import net . minecraft . world . storage . SaveFormatOld ; 
 import net . minecraftforge . client . event . ModelRegistryEvent ; 
 - import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . common . config . ConfigManager ; 
 import net . minecraftforge . common . util . CompoundDataFixer ; 
 @ @ - 92 , 7 + 90 , 6 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLContainerHolder ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . IFMLSidedHandler ; 
 - import net . minecraftforge . fml . common . Java8VersionException ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderException ; 
 import net . minecraftforge . fml . common . MetadataCollection ; 
 @ @ - 179 , 8 + 176 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private boolean loading = true ; 
 
 - private Java8VersionException j8onlymods ; 
 - 
 private WrongMinecraftVersionException wrongMC ; 
 
 private CustomModLoadingErrorDisplayException customError ; 
 @ @ - 240 , 10 + 235 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 dupesFound = dupes ; 
 } 
 - catch ( Java8VersionException j8mods ) 
 - { 
 - j8onlymods = j8mods ; 
 - } 
 catch ( MissingModsException missing ) 
 { 
 modsMissing = missing ; 
 @ @ - 338 , 7 + 329 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 public boolean hasError ( ) 
 { 
 - return modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null | | multipleModsErrored ! = null ; 
 + return modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | multipleModsErrored ! = null ; 
 } 
 
 / * * 
 @ @ - 440 , 10 + 431 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; 
 } 
 - else if ( j8onlymods ! = null ) 
 - { 
 - showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; 
 - } 
 else if ( modsMissing ! = null ) 
 { 
 showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; 
 @ @ - 467 , 14 + 454 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 else 
 { 
 logMissingTextureErrors ( ) ; 
 - if ( ! Loader . instance ( ) . java8 ) 
 - { 
 - if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) 
 - { 
 - showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 - ForgeModContainer . updateNag ( ) ; 
 - } 
 - } 
 } 
 } 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 deleted file mode 100644 
 index d986948 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 + + + / dev / null 
 @ @ - 1 , 136 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . fml . client ; 
 - 
 - import net . minecraft . client . gui . GuiButton ; 
 - import net . minecraft . client . resources . I18n ; 
 - import net . minecraft . util . text . TextFormatting ; 
 - import net . minecraftforge . fml . common . FMLCommonHandler ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 - import net . minecraftforge . fml . common . Java8VersionException ; 
 - import net . minecraftforge . fml . common . Loader ; 
 - import net . minecraftforge . fml . common . ModContainer ; 
 - import org . apache . logging . log4j . Level ; 
 - 
 - import com . google . common . collect . Lists ; 
 - 
 - import java . awt . Desktop ; 
 - import java . net . URI ; 
 - import java . util . List ; 
 - 
 - public class GuiJava8Error extends GuiErrorBase 
 - { 
 - private Java8VersionException java8VersionException ; 
 - public GuiJava8Error ( Java8VersionException java8VersionException ) 
 - { 
 - this . java8VersionException = java8VersionException ; 
 - } 
 - 
 - @ Override 
 - public void initGui ( ) 
 - { 
 - super . initGui ( ) ; 
 - this . buttonList . remove ( 1 ) ; 
 - if ( java8VersionException . getMods ( ) . isEmpty ( ) ) 
 - { 
 - this . buttonList . remove ( 0 ) ; 
 - this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; 
 - } 
 - this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; 
 - } 
 - 
 - @ Override 
 - protected void actionPerformed ( GuiButton button ) 
 - { 
 - if ( button . id = = 1 ) 
 - { 
 - FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; 
 - } 
 - else if ( button . id = = 2 ) 
 - { 
 - try 
 - { 
 - Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - FMLLog . log . error ( " Problem launching browser " , e ) ; 
 - } 
 - } 
 - else 
 - { 
 - super . actionPerformed ( button ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 - { 
 - this . drawDefaultBackground ( ) ; 
 - int offset = 25 ; 
 - if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 - { 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - } 
 - else 
 - { 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - } 
 - offset + = 15 ; 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 10 ; 
 - if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 - { 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 15 ; 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 10 ; 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 5 ; 
 - for ( ModContainer mc : java8VersionException . getMods ( ) ) 
 - { 
 - offset + = 10 ; 
 - this . drawCenteredString ( this . fontRenderer , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 - } 
 - } 
 - else 
 - { 
 - String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; 
 - List < String > lines = Lists . newArrayList ( ) ; 
 - for ( String line : text . split ( " \ n " ) ) 
 - { 
 - lines . addAll ( this . fontRenderer . listFormattedStringToWidth ( line , this . width - this . fontRenderer . FONT _ HEIGHT * 4 ) ) ; 
 - } 
 - 
 - int maxWidth = 0 ; 
 - for ( String line : lines ) 
 - { 
 - maxWidth = Math . max ( maxWidth , this . fontRenderer . getStringWidth ( line ) ) ; 
 - } 
 - 
 - for ( String line : lines ) 
 - { 
 - this . drawString ( this . fontRenderer , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; 
 - offset + = this . fontRenderer . FONT _ HEIGHT + 2 ; 
 - } 
 - } 
 - super . drawScreen ( mouseX , mouseY , partialTicks ) ; 
 - } 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 deleted file mode 100644 
 index 56dad33 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 + + + / dev / null 
 @ @ - 1 , 50 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . fml . common ; 
 - 
 - import java . util . List ; 
 - 
 - public class Java8VersionException extends EnhancedRuntimeException 
 - { 
 - private static final long serialVersionUID = 1L ; 
 - private final List < ModContainer > mods ; 
 - 
 - public Java8VersionException ( List < ModContainer > mods ) 
 - { 
 - super ( " Mods require Java 8 " ) ; 
 - this . mods = mods ; 
 - } 
 - 
 - @ Override 
 - protected void printStackTrace ( WrappedPrintStream stream ) 
 - { 
 - stream . println ( " Mods requiring Java 8 : " ) ; 
 - for ( ModContainer mc : mods ) 
 - { 
 - stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; 
 - } 
 - stream . println ( " " ) ; 
 - } 
 - 
 - public List < ModContainer > getMods ( ) 
 - { 
 - return mods ; 
 - } 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 6ffb788 . . 5a5f628 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 174 , 7 + 174 , 6 @ @ public class Loader 
 private File forcedModFile ; 
 private ModDiscoverer discoverer ; 
 private ProgressBar progressBar ; 
 - public final boolean java8 ; 
 
 public static Loader instance ( ) 
 { 
 @ @ - 201 , 14 + 200 , 6 @ @ public class Loader 
 
 private Loader ( ) 
 { 
 - String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; 
 - int major = Integer . parseInt ( ver [ 1 ] ) ; 
 - java8 = major > 7 ; 
 - if ( ! java8 ) 
 - { 
 - FMLLog . log . fatal ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; 
 - } 
 - 
 modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; 
 if ( mccversion ! = null & & ! mccversion . equals ( MC _ VERSION ) ) 
 { 
 @ @ - 555 , 7 + 546 , 6 @ @ public class Loader 
 ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; 
 disableRequestedMods ( ) ; 
 modController . distributeStateMessage ( FMLLoadEvent . class ) ; 
 - checkJavaCompatibility ( ) ; 
 sortModList ( ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; 
 @ @ - 613 , 24 + 603 , 6 @ @ public class Loader 
 modController . transition ( LoaderState . PREINITIALIZATION , false ) ; 
 } 
 
 - 
 - private void checkJavaCompatibility ( ) 
 - { 
 - if ( java8 ) return ; 
 - List < ModContainer > j8mods = Lists . newArrayList ( ) ; 
 - for ( ModContainer mc : getActiveModList ( ) ) 
 - { 
 - if ( mc . getClassVersion ( ) > = 52 ) 
 - { 
 - j8mods . add ( mc ) ; 
 - } 
 - } 
 - if ( ! j8mods . isEmpty ( ) ) 
 - { 
 - throw new Java8VersionException ( j8mods ) ; 
 - } 
 - } 
 - 
 public void preinitializeMods ( ) 
 { 
 if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 index dde3ca0 . . 8385a50 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 @ @ - 131 , 11 + 131 , 7 @ @ public class ASMModParser 
 
 public void validate ( ) 
 { 
 - / / if ( classVersion > 50 . 0 ) 
 - / / { 
 - / / 
 - / / throw new LoaderException ( new RuntimeException ( " Mod compiled for Java 7 detected " ) ) ; 
 - / / } 
 + 
 } 
 
 public boolean isBaseMod ( List < String > rememberedTypes ) 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 16c4ed4 . . ad8e613 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 49 , 7 + 49 , 6 @ @ forge . configgui . zombieBaseSummonChance = Zombie Summon Chance 
 forge . configgui . stencilbits = Enable GL Stencil Bits 
 forge . configgui . replaceBuckets = Use Forge ' s bucket model 
 forge . configgui . forgeLightPipelineEnabled = Forge Light Pipeline Enabled 
 - forge . configgui . java8Reminder = Java 8 Reminder timestamp 
 forge . configgui . disableStairSlabCulling = Disable Stair / Slab culling . 
 forge . configgui . zoomInMissingModelTextInGui = Zoom in Missing model text in the GUI 
 forge . configgui . disableStairSlabCulling . tooltip = Enable this if you see through blocks touching stairs / slabs with your resource pack . 
 @ @ - 167 , 16 + 166 , 6 @ @ fml . menu . modoptions = Mod Options . . . 
 
 item . forge . bucketFilled . name = % s Bucket 
 
 - fml . messages . java8problem = % s % sJava Update Required % s 
 - fml . messages . java8recommended = % s % sJava Update Recommended % s 
 - fml . messages . modslistedbelow = The mods listed below % s 
 - fml . messages . requirejava8 = require Java 8 
 - fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! 
 - fml . messages . java8warning . 2 = You need to update Java 
 - fml . messages . javaversion = Your Java version is Java % s ( version string % s ) 
 - fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play 
 - fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods 
 - fml . messages . countbadandgood = % s of % s mods have this problem 
 fml . messages . mod . missing . dependencies = % s is missing mods it depends on . 
 fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . 
 fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . 
 @ @ - 193 , 7 + 182 , 6 @ @ fml . messages . version . restriction . upper . inclusive = % s or below 
 fml . messages . version . restriction . upper . exclusive = below % s 
 fml . messages . version . restriction . bounded = between % s and % s 
 
 - fml . button . visitjavadownloads = Oracle Java SE Downloads 
 fml . button . continue = Continue 
 fml . button . open . mods . folder = Open Mods Folder 
 fml . button . open . file = Open % s
