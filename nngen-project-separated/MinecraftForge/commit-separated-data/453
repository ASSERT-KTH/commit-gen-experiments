BLEU SCORE: 0.01047173488538854

TEST MSG: Fix getShareTag replacing data on the server
GENERATED MSG: Add Item . canDestroyBlocksInCreative ( ) allowing more items to not break blocks in creative

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> index b664132 . . 1d93e0b 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / Item . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> @ @ - 60 , 7 + 60 , 7 @ @ <nl> return p _ 77621 _ 1 _ . func _ 147447 _ a ( vec3d , vec3d1 , p _ 77621 _ 3 _ , ! p _ 77621 _ 3 _ , false ) ; <nl> } <nl> <nl> - @ @ - 433 , 11 + 440 , 625 @ @ <nl> + @ @ - 433 , 11 + 440 , 632 @ @ <nl> return false ; <nl> } <nl> <nl> @ @ - 145 , 6 + 145 , 13 @ @ <nl> + * Override this method to change the NBT data being sent to the client . <nl> + * You should ONLY override this when you have no other choice , as this might change behavior client side ! <nl> + * <nl> + + * Note that this will sometimes be applied multiple times , the following MUST be supported : <nl> + + * Item item = stack . getItem ( ) ; <nl> + + * NBTTagCompound nbtShare1 = item . getNBTShareTag ( stack ) ; <nl> + + * stack . setTagCompound ( nbtShare1 ) ; <nl> + + * NBTTagCompound nbtShare2 = item . getNBTShareTag ( stack ) ; <nl> + + * assert nbtShare1 . equals ( nbtShare2 ) ; <nl> + + * <nl> + * @ param stack The stack to send the NBT tag for <nl> + * @ return The NBT tag <nl> + * / <nl> @ @ - 686 , 7 + 693 , 7 @ @ <nl> public static void func _ 150900 _ l ( ) <nl> { <nl> func _ 179214 _ a ( Blocks . field _ 150350 _ a , new ItemAir ( Blocks . field _ 150350 _ a ) ) ; <nl> - @ @ - 972 , 6 + 1593 , 8 @ @ <nl> + @ @ - 972 , 6 + 1600 , 8 @ @ <nl> private final float field _ 78010 _ h ; <nl> private final float field _ 78011 _ i ; <nl> private final int field _ 78008 _ j ; <nl> @ @ - 695 , 7 + 702 , 7 @ @ <nl> <nl> private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) <nl> { <nl> - @ @ - 1007 , 9 + 1630 , 26 @ @ <nl> + @ @ - 1007 , 9 + 1637 , 26 @ @ <nl> return this . field _ 78008 _ j ; <nl> } <nl> <nl> diff - - git a / patches / minecraft / net / minecraft / item / ItemStack . java . patch b / patches / minecraft / net / minecraft / item / ItemStack . java . patch <nl> index a85ee53 . . 02576c3 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / ItemStack . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / ItemStack . java . patch <nl> @ @ - 283 , 7 + 283 , 7 @ @ <nl> @ SideOnly ( Side . CLIENT ) <nl> public int func _ 190921 _ D ( ) <nl> { <nl> - @ @ - 1013 , 4 + 1085 , 28 @ @ <nl> + @ @ - 1013 , 4 + 1085 , 66 @ @ <nl> { <nl> this . func _ 190917 _ f ( - p _ 190918 _ 1 _ ) ; <nl> } <nl> @ @ - 311 , 4 + 311 , 42 @ @ <nl> + { <nl> + return this . field _ 151002 _ e ; <nl> + } <nl> + + <nl> + + / * * <nl> + + * Modeled after ItemStack . areItemStacksEqual <nl> + + * Uses Item . getNBTShareTag for comparison instead of NBT and capabilities . <nl> + + * Only used for comparing itemStacks that were transferred from server to client using Item . getNBTShareTag . <nl> + + * / <nl> + + public static boolean areItemStacksEqualUsingNBTShareTag ( ItemStack stackA , ItemStack stackB ) <nl> + + { <nl> + + if ( stackA . func _ 190926 _ b ( ) ) <nl> + + return stackB . func _ 190926 _ b ( ) ; <nl> + + else <nl> + + return ! stackB . func _ 190926 _ b ( ) & & stackA . isItemStackEqualUsingNBTShareTag ( stackB ) ; <nl> + + } <nl> + + <nl> + + / * * <nl> + + * Modeled after ItemStack . isItemStackEqual <nl> + + * Uses Item . getNBTShareTag for comparison instead of NBT and capabilities . <nl> + + * Only used for comparing itemStacks that were transferred from server to client using Item . getNBTShareTag . <nl> + + * / <nl> + + private boolean isItemStackEqualUsingNBTShareTag ( ItemStack other ) <nl> + + { <nl> + + return this . field _ 77994 _ a = = other . field _ 77994 _ a & & this . func _ 77973 _ b ( ) = = other . func _ 77973 _ b ( ) & & this . field _ 77991 _ e = = other . field _ 77991 _ e & & areItemStackShareTagsEqual ( this , other ) ; <nl> + + } <nl> + + <nl> + + / * * <nl> + + * Modeled after ItemStack . areItemStackTagsEqual <nl> + + * Uses Item . getNBTShareTag for comparison instead of NBT and capabilities . <nl> + + * Only used for comparing itemStacks that were transferred from server to client using Item . getNBTShareTag . <nl> + + * / <nl> + + public static boolean areItemStackShareTagsEqual ( ItemStack stackA , ItemStack stackB ) <nl> + + { <nl> + + NBTTagCompound shareTagA = stackA . func _ 77973 _ b ( ) . getNBTShareTag ( stackA ) ; <nl> + + NBTTagCompound shareTagB = stackB . func _ 77973 _ b ( ) . getNBTShareTag ( stackB ) ; <nl> + + if ( shareTagA = = null ) <nl> + + return shareTagB = = null ; <nl> + + else <nl> + + return shareTagB ! = null & & shareTagA . equals ( shareTagB ) ; <nl> + + } <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / network / NetHandlerPlayServer . java . patch b / patches / minecraft / net / minecraft / network / NetHandlerPlayServer . java . patch <nl> index 77d87e9 . . a26c099 100644 <nl> - - - a / patches / minecraft / net / minecraft / network / NetHandlerPlayServer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / network / NetHandlerPlayServer . java . patch <nl> @ @ - 51 , 3 + 51 , 12 @ @ <nl> <nl> if ( this . field _ 147367 _ d . func _ 71199 _ h ( ) ) <nl> { <nl> + @ @ - 1097 , 7 + 1105 , 7 @ @ <nl> + { <nl> + ItemStack itemstack2 = this . field _ 147369 _ b . field _ 71070 _ bA . func _ 184996 _ a ( p _ 147351 _ 1 _ . func _ 149544 _ d ( ) , p _ 147351 _ 1 _ . func _ 149543 _ e ( ) , p _ 147351 _ 1 _ . func _ 186993 _ f ( ) , this . field _ 147369 _ b ) ; <nl> + <nl> + - if ( ItemStack . func _ 77989 _ b ( p _ 147351 _ 1 _ . func _ 149546 _ g ( ) , itemstack2 ) ) <nl> + + if ( ItemStack . areItemStacksEqualUsingNBTShareTag ( p _ 147351 _ 1 _ . func _ 149546 _ g ( ) , itemstack2 ) ) <nl> + { <nl> + this . field _ 147369 _ b . field _ 71135 _ a . func _ 147359 _ a ( new SPacketConfirmTransaction ( p _ 147351 _ 1 _ . func _ 149548 _ c ( ) , p _ 147351 _ 1 _ . func _ 149547 _ f ( ) , true ) ) ; <nl> + this . field _ 147369 _ b . field _ 71137 _ h = true ; <nl> diff - - git a / patches / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java . patch b / patches / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java . patch <nl> new file mode 100644 <nl> index 0000000 . . b6843bb <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java . patch <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java <nl> + + + + . . / src - work / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java <nl> + @ @ - 55 , 7 + 55 , 7 @ @ <nl> + p _ 148840 _ 1 _ . writeByte ( this . field _ 149553 _ c ) ; <nl> + p _ 148840 _ 1 _ . writeShort ( this . field _ 149550 _ d ) ; <nl> + p _ 148840 _ 1 _ . func _ 179249 _ a ( this . field _ 149549 _ f ) ; <nl> + - p _ 148840 _ 1 _ . func _ 150788 _ a ( this . field _ 149551 _ e ) ; <nl> + + net . minecraftforge . common . util . PacketUtil . writeItemStackFromClientToServer ( p _ 148840 _ 1 _ , this . field _ 149551 _ e ) ; <nl> + } <nl> + <nl> + public int func _ 149548 _ c ( ) <nl> diff - - git a / patches / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java . patch b / patches / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 390c682 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java . patch <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java <nl> + + + + . . / src - work / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java <nl> + @ @ - 38 , 7 + 38 , 7 @ @ <nl> + public void func _ 148840 _ b ( PacketBuffer p _ 148840 _ 1 _ ) throws IOException <nl> + { <nl> + p _ 148840 _ 1 _ . writeShort ( this . field _ 149629 _ a ) ; <nl> + - p _ 148840 _ 1 _ . func _ 150788 _ a ( this . field _ 149628 _ b ) ; <nl> + + net . minecraftforge . common . util . PacketUtil . writeItemStackFromClientToServer ( p _ 148840 _ 1 _ , this . field _ 149628 _ b ) ; <nl> + } <nl> + <nl> + public int func _ 149627 _ c ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / PacketUtil . java b / src / main / java / net / minecraftforge / common / util / PacketUtil . java <nl> new file mode 100644 <nl> index 0000000 . . f40edd4 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / util / PacketUtil . java <nl> @ @ - 0 , 0 + 1 , 58 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . common . util ; <nl> + <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . network . PacketBuffer ; <nl> + <nl> + public class PacketUtil <nl> + { <nl> + private PacketUtil ( ) { } <nl> + <nl> + / * * <nl> + * Most ItemStack serialization is Server to Client , and must go through PacketBuffer . writeItemStack which uses Item . getNBTShareTag . <nl> + * One exception is items from the creative menu , which must be sent from Client to Server with their full NBT . <nl> + * < br / > <nl> + * This method matches PacketBuffer . writeItemStack but without the Item . getNBTShareTag patch . <nl> + * It is compatible with PacketBuffer . readItemStack . <nl> + * / <nl> + public static void writeItemStackFromClientToServer ( PacketBuffer buffer , ItemStack stack ) <nl> + { <nl> + if ( stack . isEmpty ( ) ) <nl> + { <nl> + buffer . writeShort ( - 1 ) ; <nl> + } <nl> + else <nl> + { <nl> + buffer . writeShort ( Item . getIdFromItem ( stack . getItem ( ) ) ) ; <nl> + buffer . writeByte ( stack . getCount ( ) ) ; <nl> + buffer . writeShort ( stack . getMetadata ( ) ) ; <nl> + NBTTagCompound nbttagcompound = null ; <nl> + <nl> + if ( stack . getItem ( ) . isDamageable ( ) | | stack . getItem ( ) . getShareTag ( ) ) <nl> + { <nl> + nbttagcompound = stack . getTagCompound ( ) ; <nl> + } <nl> + <nl> + buffer . writeCompoundTag ( nbttagcompound ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / NBTShareTagItemTest . java b / src / test / java / net / minecraftforge / debug / NBTShareTagItemTest . java <nl> new file mode 100644 <nl> index 0000000 . . 2926f1b <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / NBTShareTagItemTest . java <nl> @ @ - 0 , 0 + 1 , 96 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . init . Items ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . item . crafting . CraftingManager ; <nl> + import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . util . NonNullList ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + @ Mod ( modid = NBTShareTagItemTest . MOD _ ID , name = " NBTShareTag Item Test " , version = " 1 . 0 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class NBTShareTagItemTest <nl> + { <nl> + public static final String MOD _ ID = " nbtsharetagitemtest " ; <nl> + private static final ResourceLocation itemName = new ResourceLocation ( MOD _ ID , " nbt _ share _ tag _ item " ) ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + ShareTagItem item = new ShareTagItem ( ) ; <nl> + item . setRegistryName ( itemName ) ; <nl> + GameRegistry . register ( item ) ; <nl> + <nl> + if ( event . getSide ( ) = = Side . CLIENT ) <nl> + { <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( itemName , " inventory " ) ) ; <nl> + } <nl> + <nl> + ItemStack crafted = new ItemStack ( item ) ; <nl> + NBTTagCompound craftedNBT = new NBTTagCompound ( ) ; <nl> + craftedNBT . setBoolean ( " crafted " , true ) ; <nl> + crafted . setTagCompound ( craftedNBT ) ; <nl> + CraftingManager . getInstance ( ) . addShapelessRecipe ( crafted , new ItemStack ( Items . STICK ) ) ; <nl> + } <nl> + <nl> + public static class ShareTagItem extends Item <nl> + { <nl> + public ShareTagItem ( ) <nl> + { <nl> + setCreativeTab ( CreativeTabs . MISC ) ; <nl> + } <nl> + <nl> + @ Nullable <nl> + @ Override <nl> + public NBTTagCompound getNBTShareTag ( ItemStack stack ) <nl> + { <nl> + NBTTagCompound networkNBT = stack . getTagCompound ( ) ; <nl> + if ( networkNBT = = null ) <nl> + networkNBT = new NBTTagCompound ( ) ; <nl> + networkNBT . setBoolean ( " nbtShareTag " , true ) ; <nl> + return networkNBT ; <nl> + } <nl> + <nl> + @ Override <nl> + public void getSubItems ( Item itemIn , CreativeTabs tab , NonNullList < ItemStack > subItems ) <nl> + { <nl> + ItemStack creativeMenuItem = new ItemStack ( itemIn ) ; <nl> + NBTTagCompound creativeMenuNBT = new NBTTagCompound ( ) ; <nl> + creativeMenuNBT . setBoolean ( " creativeMenu " , true ) ; <nl> + creativeMenuItem . setTagCompound ( creativeMenuNBT ) ; <nl> + subItems . add ( creativeMenuItem ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getItemStackDisplayName ( ItemStack stack ) <nl> + { <nl> + NBTTagCompound tagCompound = stack . getTagCompound ( ) ; <nl> + String name = " NBTShareTagItem : " ; <nl> + if ( tagCompound = = null ) <nl> + { <nl> + name + = " From / give . " ; <nl> + } <nl> + else <nl> + { <nl> + if ( tagCompound . getBoolean ( " nbtShareTag " ) ) <nl> + name + = " Sent from server . " ; <nl> + <nl> + if ( tagCompound . getBoolean ( " creativeMenu " ) ) <nl> + name + = " From creative menu . " ; <nl> + <nl> + if ( tagCompound . getBoolean ( " crafted " ) ) <nl> + name + = " From crafting . " ; <nl> + } <nl> + return name ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / nbtsharetagitemtest / models / item / nbt _ share _ tag _ item . json b / src / test / resources / assets / nbtsharetagitemtest / models / item / nbt _ share _ tag _ item . json <nl> new file mode 100644 <nl> index 0000000 . . 927eae6 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / nbtsharetagitemtest / models / item / nbt _ share _ tag _ item . json <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + { <nl> + " parent " : " item / generated " , <nl> + " textures " : { <nl> + " layer0 " : " items / stick " <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java . patch b / patches / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java . patch <nl> index fdaf7f6 . . b3c2fcc 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java . patch <nl> @ @ - 1 , 18 + 1 , 23 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java <nl> - @ @ - 122 , 6 + 122 , 12 @ @ <nl> + @ @ - 122 , 10 + 122 , 16 @ @ <nl> } <nl> } <nl> <nl> + - if ( this . field _ 78779 _ k . func _ 77145 _ d ( ) & & ! this . field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) . func _ 190926 _ b ( ) & & this . field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) . func _ 77973 _ b ( ) instanceof ItemSword ) <nl> + ItemStack stack = field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) ; <nl> + if ( ! stack . func _ 190926 _ b ( ) & & stack . func _ 77973 _ b ( ) . onBlockStartBreak ( stack , p _ 187103 _ 1 _ , field _ 78776 _ a . field _ 71439 _ g ) ) <nl> + { <nl> + return false ; <nl> + } <nl> + + <nl> + + if ( this . field _ 78779 _ k . func _ 77145 _ d ( ) & & ! stack . func _ 190926 _ b ( ) & & ! stack . func _ 77973 _ b ( ) . canDestroyBlockInCreative ( field _ 78776 _ a . field _ 71441 _ e , p _ 187103 _ 1 _ , stack , field _ 78776 _ a . field _ 71439 _ g ) ) <nl> + { <nl> + return false ; <nl> + } <nl> - + <nl> - if ( this . field _ 78779 _ k . func _ 77145 _ d ( ) & & ! this . field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) . func _ 190926 _ b ( ) & & this . field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) . func _ 77973 _ b ( ) instanceof ItemSword ) <nl> + else <nl> { <nl> - return false ; <nl> + World world = this . field _ 78776 _ a . field _ 71441 _ e ; <nl> @ @ - 143 , 19 + 149 , 13 @ @ <nl> else <nl> { <nl> diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> index 8825417 . . b664132 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / Item . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> @ @ - 60 , 7 + 60 , 7 @ @ <nl> return p _ 77621 _ 1 _ . func _ 147447 _ a ( vec3d , vec3d1 , p _ 77621 _ 3 _ , ! p _ 77621 _ 3 _ , false ) ; <nl> } <nl> <nl> - @ @ - 433 , 11 + 440 , 613 @ @ <nl> + @ @ - 433 , 11 + 440 , 625 @ @ <nl> return false ; <nl> } <nl> <nl> @ @ - 510 , 6 + 510 , 18 @ @ <nl> + } <nl> + <nl> + / * * <nl> + + * Checked from { @ link net . minecraft . client . multiplayer . PlayerControllerMP # onPlayerDestroyBlock ( BlockPos pos ) PlayerControllerMP . onPlayerDestroyBlock ( ) } <nl> + + * when a creative player left - clicks a block with this item . <nl> + + * Also checked from { @ link net . minecraftforge . common . ForgeHooks # onBlockBreakEvent ( World , GameType , EntityPlayerMP , BlockPos ) ForgeHooks . onBlockBreakEvent ( ) } <nl> + + * to prevent sending an event . <nl> + + * @ return true if the given player can destroy specified block in creative mode with this item <nl> + + * / <nl> + + public boolean canDestroyBlockInCreative ( World world , BlockPos pos , ItemStack stack , EntityPlayer player ) <nl> + + { <nl> + + return ! ( this instanceof ItemSword ) ; <nl> + + } <nl> + + <nl> + + / * * <nl> + * ItemStack sensitive version of { @ link # canHarvestBlock ( IBlockState ) } <nl> + * @ param state The block trying to harvest <nl> + * @ param stack The itemstack used to harvest the block <nl> @ @ - 674 , 7 + 686 , 7 @ @ <nl> public static void func _ 150900 _ l ( ) <nl> { <nl> func _ 179214 _ a ( Blocks . field _ 150350 _ a , new ItemAir ( Blocks . field _ 150350 _ a ) ) ; <nl> - @ @ - 972 , 6 + 1581 , 8 @ @ <nl> + @ @ - 972 , 6 + 1593 , 8 @ @ <nl> private final float field _ 78010 _ h ; <nl> private final float field _ 78011 _ i ; <nl> private final int field _ 78008 _ j ; <nl> @ @ - 683 , 7 + 695 , 7 @ @ <nl> <nl> private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) <nl> { <nl> - @ @ - 1007 , 9 + 1618 , 26 @ @ <nl> + @ @ - 1007 , 9 + 1630 , 26 @ @ <nl> return this . field _ 78008 _ j ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 809aa56 . . 6cf756a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 63 , 7 + 63 , 6 @ @ import net . minecraft . item . ItemBucket ; <nl> import net . minecraft . item . ItemPickaxe ; <nl> import net . minecraft . item . ItemSpade ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraft . item . ItemSword ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . network . NetHandlerPlayServer ; <nl> import net . minecraft . network . Packet ; <nl> @ @ - 754 , 7 + 753 , 9 @ @ public class ForgeHooks <nl> { <nl> / / Logic from tryHarvestBlock for pre - canceling the event <nl> boolean preCancelEvent = false ; <nl> - if ( gameType . isCreative ( ) & & ! entityPlayer . getHeldItemMainhand ( ) . isEmpty ( ) & & entityPlayer . getHeldItemMainhand ( ) . getItem ( ) instanceof ItemSword ) <nl> + ItemStack itemstack = entityPlayer . getHeldItemMainhand ( ) ; <nl> + if ( gameType . isCreative ( ) & & ! itemstack . isEmpty ( ) <nl> + & & ! itemstack . getItem ( ) . canDestroyBlockInCreative ( world , pos , itemstack , entityPlayer ) ) <nl> preCancelEvent = true ; <nl> <nl> if ( gameType . isAdventure ( ) ) <nl> @ @ - 764 , 7 + 765 , 6 @ @ public class ForgeHooks <nl> <nl> if ( ! entityPlayer . isAllowEdit ( ) ) <nl> { <nl> - ItemStack itemstack = entityPlayer . getHeldItemMainhand ( ) ; <nl> if ( itemstack . isEmpty ( ) | | ! itemstack . canDestroy ( world . getBlockState ( pos ) . getBlock ( ) ) ) <nl> preCancelEvent = true ; <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / test / ItemCanDestroyBlocksInCreativeTest . java b / src / test / java / net / minecraftforge / test / ItemCanDestroyBlocksInCreativeTest . java <nl> new file mode 100644 <nl> index 0000000 . . 31ea992 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / ItemCanDestroyBlocksInCreativeTest . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + @ Mod ( modid = ItemCanDestroyBlocksInCreativeTest . MODID , name = " Item . canDestroyBlockInCreative ( ) Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class ItemCanDestroyBlocksInCreativeTest <nl> + { <nl> + public static final boolean ENABLE = true ; <nl> + public static final String MODID = " item _ can _ destroy _ blocks _ in _ creative _ test " ; <nl> + <nl> + public static Item testItem = new Item ( ) <nl> + { <nl> + @ Override <nl> + public boolean canDestroyBlockInCreative ( World world , BlockPos pos , ItemStack stack , EntityPlayer player ) <nl> + { <nl> + return false ; <nl> + } <nl> + } . setRegistryName ( MODID , " item _ test " ) <nl> + . setUnlocalizedName ( MODID + " . item _ test " ) <nl> + . setCreativeTab ( CreativeTabs . TOOLS ) ; <nl> + <nl> + @ Mod . EventHandler <nl> + public static void init ( FMLInitializationEvent event ) <nl> + { <nl> + if ( ENABLE ) <nl> + GameRegistry . register ( testItem ) ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch 
 index b664132 . . 1d93e0b 100644 
 - - - a / patches / minecraft / net / minecraft / item / Item . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / Item . java . patch 
 @ @ - 60 , 7 + 60 , 7 @ @ 
 return p _ 77621 _ 1 _ . func _ 147447 _ a ( vec3d , vec3d1 , p _ 77621 _ 3 _ , ! p _ 77621 _ 3 _ , false ) ; 
 } 
 
 - @ @ - 433 , 11 + 440 , 625 @ @ 
 + @ @ - 433 , 11 + 440 , 632 @ @ 
 return false ; 
 } 
 
 @ @ - 145 , 6 + 145 , 13 @ @ 
 + * Override this method to change the NBT data being sent to the client . 
 + * You should ONLY override this when you have no other choice , as this might change behavior client side ! 
 + * 
 + + * Note that this will sometimes be applied multiple times , the following MUST be supported : 
 + + * Item item = stack . getItem ( ) ; 
 + + * NBTTagCompound nbtShare1 = item . getNBTShareTag ( stack ) ; 
 + + * stack . setTagCompound ( nbtShare1 ) ; 
 + + * NBTTagCompound nbtShare2 = item . getNBTShareTag ( stack ) ; 
 + + * assert nbtShare1 . equals ( nbtShare2 ) ; 
 + + * 
 + * @ param stack The stack to send the NBT tag for 
 + * @ return The NBT tag 
 + * / 
 @ @ - 686 , 7 + 693 , 7 @ @ 
 public static void func _ 150900 _ l ( ) 
 { 
 func _ 179214 _ a ( Blocks . field _ 150350 _ a , new ItemAir ( Blocks . field _ 150350 _ a ) ) ; 
 - @ @ - 972 , 6 + 1593 , 8 @ @ 
 + @ @ - 972 , 6 + 1600 , 8 @ @ 
 private final float field _ 78010 _ h ; 
 private final float field _ 78011 _ i ; 
 private final int field _ 78008 _ j ; 
 @ @ - 695 , 7 + 702 , 7 @ @ 
 
 private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) 
 { 
 - @ @ - 1007 , 9 + 1630 , 26 @ @ 
 + @ @ - 1007 , 9 + 1637 , 26 @ @ 
 return this . field _ 78008 _ j ; 
 } 
 
 diff - - git a / patches / minecraft / net / minecraft / item / ItemStack . java . patch b / patches / minecraft / net / minecraft / item / ItemStack . java . patch 
 index a85ee53 . . 02576c3 100644 
 - - - a / patches / minecraft / net / minecraft / item / ItemStack . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / ItemStack . java . patch 
 @ @ - 283 , 7 + 283 , 7 @ @ 
 @ SideOnly ( Side . CLIENT ) 
 public int func _ 190921 _ D ( ) 
 { 
 - @ @ - 1013 , 4 + 1085 , 28 @ @ 
 + @ @ - 1013 , 4 + 1085 , 66 @ @ 
 { 
 this . func _ 190917 _ f ( - p _ 190918 _ 1 _ ) ; 
 } 
 @ @ - 311 , 4 + 311 , 42 @ @ 
 + { 
 + return this . field _ 151002 _ e ; 
 + } 
 + + 
 + + / * * 
 + + * Modeled after ItemStack . areItemStacksEqual 
 + + * Uses Item . getNBTShareTag for comparison instead of NBT and capabilities . 
 + + * Only used for comparing itemStacks that were transferred from server to client using Item . getNBTShareTag . 
 + + * / 
 + + public static boolean areItemStacksEqualUsingNBTShareTag ( ItemStack stackA , ItemStack stackB ) 
 + + { 
 + + if ( stackA . func _ 190926 _ b ( ) ) 
 + + return stackB . func _ 190926 _ b ( ) ; 
 + + else 
 + + return ! stackB . func _ 190926 _ b ( ) & & stackA . isItemStackEqualUsingNBTShareTag ( stackB ) ; 
 + + } 
 + + 
 + + / * * 
 + + * Modeled after ItemStack . isItemStackEqual 
 + + * Uses Item . getNBTShareTag for comparison instead of NBT and capabilities . 
 + + * Only used for comparing itemStacks that were transferred from server to client using Item . getNBTShareTag . 
 + + * / 
 + + private boolean isItemStackEqualUsingNBTShareTag ( ItemStack other ) 
 + + { 
 + + return this . field _ 77994 _ a = = other . field _ 77994 _ a & & this . func _ 77973 _ b ( ) = = other . func _ 77973 _ b ( ) & & this . field _ 77991 _ e = = other . field _ 77991 _ e & & areItemStackShareTagsEqual ( this , other ) ; 
 + + } 
 + + 
 + + / * * 
 + + * Modeled after ItemStack . areItemStackTagsEqual 
 + + * Uses Item . getNBTShareTag for comparison instead of NBT and capabilities . 
 + + * Only used for comparing itemStacks that were transferred from server to client using Item . getNBTShareTag . 
 + + * / 
 + + public static boolean areItemStackShareTagsEqual ( ItemStack stackA , ItemStack stackB ) 
 + + { 
 + + NBTTagCompound shareTagA = stackA . func _ 77973 _ b ( ) . getNBTShareTag ( stackA ) ; 
 + + NBTTagCompound shareTagB = stackB . func _ 77973 _ b ( ) . getNBTShareTag ( stackB ) ; 
 + + if ( shareTagA = = null ) 
 + + return shareTagB = = null ; 
 + + else 
 + + return shareTagB ! = null & & shareTagA . equals ( shareTagB ) ; 
 + + } 
 } 
 diff - - git a / patches / minecraft / net / minecraft / network / NetHandlerPlayServer . java . patch b / patches / minecraft / net / minecraft / network / NetHandlerPlayServer . java . patch 
 index 77d87e9 . . a26c099 100644 
 - - - a / patches / minecraft / net / minecraft / network / NetHandlerPlayServer . java . patch 
 + + + b / patches / minecraft / net / minecraft / network / NetHandlerPlayServer . java . patch 
 @ @ - 51 , 3 + 51 , 12 @ @ 
 
 if ( this . field _ 147367 _ d . func _ 71199 _ h ( ) ) 
 { 
 + @ @ - 1097 , 7 + 1105 , 7 @ @ 
 + { 
 + ItemStack itemstack2 = this . field _ 147369 _ b . field _ 71070 _ bA . func _ 184996 _ a ( p _ 147351 _ 1 _ . func _ 149544 _ d ( ) , p _ 147351 _ 1 _ . func _ 149543 _ e ( ) , p _ 147351 _ 1 _ . func _ 186993 _ f ( ) , this . field _ 147369 _ b ) ; 
 + 
 + - if ( ItemStack . func _ 77989 _ b ( p _ 147351 _ 1 _ . func _ 149546 _ g ( ) , itemstack2 ) ) 
 + + if ( ItemStack . areItemStacksEqualUsingNBTShareTag ( p _ 147351 _ 1 _ . func _ 149546 _ g ( ) , itemstack2 ) ) 
 + { 
 + this . field _ 147369 _ b . field _ 71135 _ a . func _ 147359 _ a ( new SPacketConfirmTransaction ( p _ 147351 _ 1 _ . func _ 149548 _ c ( ) , p _ 147351 _ 1 _ . func _ 149547 _ f ( ) , true ) ) ; 
 + this . field _ 147369 _ b . field _ 71137 _ h = true ; 
 diff - - git a / patches / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java . patch b / patches / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java . patch 
 new file mode 100644 
 index 0000000 . . b6843bb 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java . patch 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java 
 + + + + . . / src - work / minecraft / net / minecraft / network / play / client / CPacketClickWindow . java 
 + @ @ - 55 , 7 + 55 , 7 @ @ 
 + p _ 148840 _ 1 _ . writeByte ( this . field _ 149553 _ c ) ; 
 + p _ 148840 _ 1 _ . writeShort ( this . field _ 149550 _ d ) ; 
 + p _ 148840 _ 1 _ . func _ 179249 _ a ( this . field _ 149549 _ f ) ; 
 + - p _ 148840 _ 1 _ . func _ 150788 _ a ( this . field _ 149551 _ e ) ; 
 + + net . minecraftforge . common . util . PacketUtil . writeItemStackFromClientToServer ( p _ 148840 _ 1 _ , this . field _ 149551 _ e ) ; 
 + } 
 + 
 + public int func _ 149548 _ c ( ) 
 diff - - git a / patches / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java . patch b / patches / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java . patch 
 new file mode 100644 
 index 0000000 . . 390c682 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java . patch 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java 
 + + + + . . / src - work / minecraft / net / minecraft / network / play / client / CPacketCreativeInventoryAction . java 
 + @ @ - 38 , 7 + 38 , 7 @ @ 
 + public void func _ 148840 _ b ( PacketBuffer p _ 148840 _ 1 _ ) throws IOException 
 + { 
 + p _ 148840 _ 1 _ . writeShort ( this . field _ 149629 _ a ) ; 
 + - p _ 148840 _ 1 _ . func _ 150788 _ a ( this . field _ 149628 _ b ) ; 
 + + net . minecraftforge . common . util . PacketUtil . writeItemStackFromClientToServer ( p _ 148840 _ 1 _ , this . field _ 149628 _ b ) ; 
 + } 
 + 
 + public int func _ 149627 _ c ( ) 
 diff - - git a / src / main / java / net / minecraftforge / common / util / PacketUtil . java b / src / main / java / net / minecraftforge / common / util / PacketUtil . java 
 new file mode 100644 
 index 0000000 . . f40edd4 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / util / PacketUtil . java 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . common . util ; 
 + 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . network . PacketBuffer ; 
 + 
 + public class PacketUtil 
 + { 
 + private PacketUtil ( ) { } 
 + 
 + / * * 
 + * Most ItemStack serialization is Server to Client , and must go through PacketBuffer . writeItemStack which uses Item . getNBTShareTag . 
 + * One exception is items from the creative menu , which must be sent from Client to Server with their full NBT . 
 + * < br / > 
 + * This method matches PacketBuffer . writeItemStack but without the Item . getNBTShareTag patch . 
 + * It is compatible with PacketBuffer . readItemStack . 
 + * / 
 + public static void writeItemStackFromClientToServer ( PacketBuffer buffer , ItemStack stack ) 
 + { 
 + if ( stack . isEmpty ( ) ) 
 + { 
 + buffer . writeShort ( - 1 ) ; 
 + } 
 + else 
 + { 
 + buffer . writeShort ( Item . getIdFromItem ( stack . getItem ( ) ) ) ; 
 + buffer . writeByte ( stack . getCount ( ) ) ; 
 + buffer . writeShort ( stack . getMetadata ( ) ) ; 
 + NBTTagCompound nbttagcompound = null ; 
 + 
 + if ( stack . getItem ( ) . isDamageable ( ) | | stack . getItem ( ) . getShareTag ( ) ) 
 + { 
 + nbttagcompound = stack . getTagCompound ( ) ; 
 + } 
 + 
 + buffer . writeCompoundTag ( nbttagcompound ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / NBTShareTagItemTest . java b / src / test / java / net / minecraftforge / debug / NBTShareTagItemTest . java 
 new file mode 100644 
 index 0000000 . . 2926f1b 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / NBTShareTagItemTest . java 
 @ @ - 0 , 0 + 1 , 96 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . init . Items ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . item . crafting . CraftingManager ; 
 + import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . util . NonNullList ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + @ Mod ( modid = NBTShareTagItemTest . MOD _ ID , name = " NBTShareTag Item Test " , version = " 1 . 0 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class NBTShareTagItemTest 
 + { 
 + public static final String MOD _ ID = " nbtsharetagitemtest " ; 
 + private static final ResourceLocation itemName = new ResourceLocation ( MOD _ ID , " nbt _ share _ tag _ item " ) ; 
 + 
 + @ Mod . EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + ShareTagItem item = new ShareTagItem ( ) ; 
 + item . setRegistryName ( itemName ) ; 
 + GameRegistry . register ( item ) ; 
 + 
 + if ( event . getSide ( ) = = Side . CLIENT ) 
 + { 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( itemName , " inventory " ) ) ; 
 + } 
 + 
 + ItemStack crafted = new ItemStack ( item ) ; 
 + NBTTagCompound craftedNBT = new NBTTagCompound ( ) ; 
 + craftedNBT . setBoolean ( " crafted " , true ) ; 
 + crafted . setTagCompound ( craftedNBT ) ; 
 + CraftingManager . getInstance ( ) . addShapelessRecipe ( crafted , new ItemStack ( Items . STICK ) ) ; 
 + } 
 + 
 + public static class ShareTagItem extends Item 
 + { 
 + public ShareTagItem ( ) 
 + { 
 + setCreativeTab ( CreativeTabs . MISC ) ; 
 + } 
 + 
 + @ Nullable 
 + @ Override 
 + public NBTTagCompound getNBTShareTag ( ItemStack stack ) 
 + { 
 + NBTTagCompound networkNBT = stack . getTagCompound ( ) ; 
 + if ( networkNBT = = null ) 
 + networkNBT = new NBTTagCompound ( ) ; 
 + networkNBT . setBoolean ( " nbtShareTag " , true ) ; 
 + return networkNBT ; 
 + } 
 + 
 + @ Override 
 + public void getSubItems ( Item itemIn , CreativeTabs tab , NonNullList < ItemStack > subItems ) 
 + { 
 + ItemStack creativeMenuItem = new ItemStack ( itemIn ) ; 
 + NBTTagCompound creativeMenuNBT = new NBTTagCompound ( ) ; 
 + creativeMenuNBT . setBoolean ( " creativeMenu " , true ) ; 
 + creativeMenuItem . setTagCompound ( creativeMenuNBT ) ; 
 + subItems . add ( creativeMenuItem ) ; 
 + } 
 + 
 + @ Override 
 + public String getItemStackDisplayName ( ItemStack stack ) 
 + { 
 + NBTTagCompound tagCompound = stack . getTagCompound ( ) ; 
 + String name = " NBTShareTagItem : " ; 
 + if ( tagCompound = = null ) 
 + { 
 + name + = " From / give . " ; 
 + } 
 + else 
 + { 
 + if ( tagCompound . getBoolean ( " nbtShareTag " ) ) 
 + name + = " Sent from server . " ; 
 + 
 + if ( tagCompound . getBoolean ( " creativeMenu " ) ) 
 + name + = " From creative menu . " ; 
 + 
 + if ( tagCompound . getBoolean ( " crafted " ) ) 
 + name + = " From crafting . " ; 
 + } 
 + return name ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / nbtsharetagitemtest / models / item / nbt _ share _ tag _ item . json b / src / test / resources / assets / nbtsharetagitemtest / models / item / nbt _ share _ tag _ item . json 
 new file mode 100644 
 index 0000000 . . 927eae6 
 - - - / dev / null 
 + + + b / src / test / resources / assets / nbtsharetagitemtest / models / item / nbt _ share _ tag _ item . json 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + { 
 + " parent " : " item / generated " , 
 + " textures " : { 
 + " layer0 " : " items / stick " 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java . patch b / patches / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java . patch 
 index fdaf7f6 . . b3c2fcc 100644 
 - - - a / patches / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java . patch 
 @ @ - 1 , 18 + 1 , 23 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java 
 + + + . . / src - work / minecraft / net / minecraft / client / multiplayer / PlayerControllerMP . java 
 - @ @ - 122 , 6 + 122 , 12 @ @ 
 + @ @ - 122 , 10 + 122 , 16 @ @ 
 } 
 } 
 
 + - if ( this . field _ 78779 _ k . func _ 77145 _ d ( ) & & ! this . field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) . func _ 190926 _ b ( ) & & this . field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) . func _ 77973 _ b ( ) instanceof ItemSword ) 
 + ItemStack stack = field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) ; 
 + if ( ! stack . func _ 190926 _ b ( ) & & stack . func _ 77973 _ b ( ) . onBlockStartBreak ( stack , p _ 187103 _ 1 _ , field _ 78776 _ a . field _ 71439 _ g ) ) 
 + { 
 + return false ; 
 + } 
 + + 
 + + if ( this . field _ 78779 _ k . func _ 77145 _ d ( ) & & ! stack . func _ 190926 _ b ( ) & & ! stack . func _ 77973 _ b ( ) . canDestroyBlockInCreative ( field _ 78776 _ a . field _ 71441 _ e , p _ 187103 _ 1 _ , stack , field _ 78776 _ a . field _ 71439 _ g ) ) 
 + { 
 + return false ; 
 + } 
 - + 
 - if ( this . field _ 78779 _ k . func _ 77145 _ d ( ) & & ! this . field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) . func _ 190926 _ b ( ) & & this . field _ 78776 _ a . field _ 71439 _ g . func _ 184614 _ ca ( ) . func _ 77973 _ b ( ) instanceof ItemSword ) 
 + else 
 { 
 - return false ; 
 + World world = this . field _ 78776 _ a . field _ 71441 _ e ; 
 @ @ - 143 , 19 + 149 , 13 @ @ 
 else 
 { 
 diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch 
 index 8825417 . . b664132 100644 
 - - - a / patches / minecraft / net / minecraft / item / Item . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / Item . java . patch 
 @ @ - 60 , 7 + 60 , 7 @ @ 
 return p _ 77621 _ 1 _ . func _ 147447 _ a ( vec3d , vec3d1 , p _ 77621 _ 3 _ , ! p _ 77621 _ 3 _ , false ) ; 
 } 
 
 - @ @ - 433 , 11 + 440 , 613 @ @ 
 + @ @ - 433 , 11 + 440 , 625 @ @ 
 return false ; 
 } 
 
 @ @ - 510 , 6 + 510 , 18 @ @ 
 + } 
 + 
 + / * * 
 + + * Checked from { @ link net . minecraft . client . multiplayer . PlayerControllerMP # onPlayerDestroyBlock ( BlockPos pos ) PlayerControllerMP . onPlayerDestroyBlock ( ) } 
 + + * when a creative player left - clicks a block with this item . 
 + + * Also checked from { @ link net . minecraftforge . common . ForgeHooks # onBlockBreakEvent ( World , GameType , EntityPlayerMP , BlockPos ) ForgeHooks . onBlockBreakEvent ( ) } 
 + + * to prevent sending an event . 
 + + * @ return true if the given player can destroy specified block in creative mode with this item 
 + + * / 
 + + public boolean canDestroyBlockInCreative ( World world , BlockPos pos , ItemStack stack , EntityPlayer player ) 
 + + { 
 + + return ! ( this instanceof ItemSword ) ; 
 + + } 
 + + 
 + + / * * 
 + * ItemStack sensitive version of { @ link # canHarvestBlock ( IBlockState ) } 
 + * @ param state The block trying to harvest 
 + * @ param stack The itemstack used to harvest the block 
 @ @ - 674 , 7 + 686 , 7 @ @ 
 public static void func _ 150900 _ l ( ) 
 { 
 func _ 179214 _ a ( Blocks . field _ 150350 _ a , new ItemAir ( Blocks . field _ 150350 _ a ) ) ; 
 - @ @ - 972 , 6 + 1581 , 8 @ @ 
 + @ @ - 972 , 6 + 1593 , 8 @ @ 
 private final float field _ 78010 _ h ; 
 private final float field _ 78011 _ i ; 
 private final int field _ 78008 _ j ; 
 @ @ - 683 , 7 + 695 , 7 @ @ 
 
 private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) 
 { 
 - @ @ - 1007 , 9 + 1618 , 26 @ @ 
 + @ @ - 1007 , 9 + 1630 , 26 @ @ 
 return this . field _ 78008 _ j ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 809aa56 . . 6cf756a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 63 , 7 + 63 , 6 @ @ import net . minecraft . item . ItemBucket ; 
 import net . minecraft . item . ItemPickaxe ; 
 import net . minecraft . item . ItemSpade ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraft . item . ItemSword ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . network . NetHandlerPlayServer ; 
 import net . minecraft . network . Packet ; 
 @ @ - 754 , 7 + 753 , 9 @ @ public class ForgeHooks 
 { 
 / / Logic from tryHarvestBlock for pre - canceling the event 
 boolean preCancelEvent = false ; 
 - if ( gameType . isCreative ( ) & & ! entityPlayer . getHeldItemMainhand ( ) . isEmpty ( ) & & entityPlayer . getHeldItemMainhand ( ) . getItem ( ) instanceof ItemSword ) 
 + ItemStack itemstack = entityPlayer . getHeldItemMainhand ( ) ; 
 + if ( gameType . isCreative ( ) & & ! itemstack . isEmpty ( ) 
 + & & ! itemstack . getItem ( ) . canDestroyBlockInCreative ( world , pos , itemstack , entityPlayer ) ) 
 preCancelEvent = true ; 
 
 if ( gameType . isAdventure ( ) ) 
 @ @ - 764 , 7 + 765 , 6 @ @ public class ForgeHooks 
 
 if ( ! entityPlayer . isAllowEdit ( ) ) 
 { 
 - ItemStack itemstack = entityPlayer . getHeldItemMainhand ( ) ; 
 if ( itemstack . isEmpty ( ) | | ! itemstack . canDestroy ( world . getBlockState ( pos ) . getBlock ( ) ) ) 
 preCancelEvent = true ; 
 } 
 diff - - git a / src / test / java / net / minecraftforge / test / ItemCanDestroyBlocksInCreativeTest . java b / src / test / java / net / minecraftforge / test / ItemCanDestroyBlocksInCreativeTest . java 
 new file mode 100644 
 index 0000000 . . 31ea992 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / ItemCanDestroyBlocksInCreativeTest . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + @ Mod ( modid = ItemCanDestroyBlocksInCreativeTest . MODID , name = " Item . canDestroyBlockInCreative ( ) Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class ItemCanDestroyBlocksInCreativeTest 
 + { 
 + public static final boolean ENABLE = true ; 
 + public static final String MODID = " item _ can _ destroy _ blocks _ in _ creative _ test " ; 
 + 
 + public static Item testItem = new Item ( ) 
 + { 
 + @ Override 
 + public boolean canDestroyBlockInCreative ( World world , BlockPos pos , ItemStack stack , EntityPlayer player ) 
 + { 
 + return false ; 
 + } 
 + } . setRegistryName ( MODID , " item _ test " ) 
 + . setUnlocalizedName ( MODID + " . item _ test " ) 
 + . setCreativeTab ( CreativeTabs . TOOLS ) ; 
 + 
 + @ Mod . EventHandler 
 + public static void init ( FMLInitializationEvent event ) 
 + { 
 + if ( ENABLE ) 
 + GameRegistry . register ( testItem ) ; 
 + } 
 + } 
 \ No newline at end of file
