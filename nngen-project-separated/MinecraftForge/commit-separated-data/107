BLEU SCORE: 0.02809981770251131

TEST MSG: Put the FMLModContainer back in it ' s cage . Delete the ClasspathLocator .
GENERATED MSG: Create a userdev - specific main , and include it as an injected file in the userdev jar .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java b / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java <nl> index fdedfc6 . . 5806e85 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java <nl> @ @ - 105 , 11 + 105 , 11 @ @ public enum LifecycleEventProvider <nl> this . progression = p ; <nl> } <nl> <nl> - public Event getOrBuildEvent ( FMLModContainer fmlModContainer ) <nl> + public Event getOrBuildEvent ( ModContainer modContainer ) <nl> { <nl> if ( customEventSupplier ! = null ) return customEventSupplier . get ( ) ; <nl> <nl> - return stage . getModEvent ( fmlModContainer ) ; <nl> + return stage . getModEvent ( modContainer ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingStage . java b / src / main / java / net / minecraftforge / fml / ModLoadingStage . java <nl> index f055752 . . d25d26b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoadingStage . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoadingStage . java <nl> @ @ - 44 , 8 + 44 , 8 @ @ public enum ModLoadingStage <nl> this . modLifecycleEventFunction = modLifecycleEventFunction ; <nl> } <nl> <nl> - public ModLifecycleEvent getModEvent ( ModContainer fmlModContainer ) <nl> + public ModLifecycleEvent getModEvent ( ModContainer modContainer ) <nl> { <nl> - return modLifecycleEventFunction . get ( ) . apply ( fmlModContainer ) ; <nl> + return modLifecycleEventFunction . get ( ) . apply ( modContainer ) ; <nl> } <nl> } <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> deleted file mode 100644 <nl> index 011ac0a . . 0000000 <nl> - - - a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> + + + / dev / null <nl> @ @ - 1 , 162 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2018 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . userdev ; <nl> - <nl> - import com . google . common . collect . Maps ; <nl> - import com . google . common . collect . Sets ; <nl> - import net . minecraftforge . fml . loading . moddiscovery . IModLocator ; <nl> - import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> - import org . apache . logging . log4j . LogManager ; <nl> - import org . apache . logging . log4j . Logger ; <nl> - <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - import java . net . URISyntaxException ; <nl> - import java . net . URL ; <nl> - import java . nio . file . * ; <nl> - import java . util . * ; <nl> - import java . util . function . Consumer ; <nl> - import java . util . jar . Manifest ; <nl> - import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> - <nl> - import static net . minecraftforge . fml . Logging . SCAN ; <nl> - <nl> - public class ClasspathLocator implements IModLocator <nl> - { <nl> - private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> - private static final String COREMODS = " META - INF / coremods . json " ; <nl> - private static final String MODS = " META - INF / mods . toml " ; <nl> - <nl> - public ClasspathLocator ( ) { } <nl> - <nl> - @ Override <nl> - public List < ModFile > scanMods ( ) { <nl> - Set < URL > modUrls = Sets . newHashSet ( ) ; <nl> - ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> - try <nl> - { <nl> - modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( COREMODS ) ) ) ; <nl> - modUrls . addAll ( Collections . list ( loader . getResources ( COREMODS ) ) ) ; <nl> - modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( MODS ) ) ) ; <nl> - modUrls . addAll ( Collections . list ( loader . getResources ( MODS ) ) ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - <nl> - return modUrls . stream ( ) . map ( ( url ) - > { <nl> - try <nl> - { <nl> - / / We got URLs including " META - INF / < something " , so get two components up . <nl> - return new File ( url . toURI ( ) ) . toPath ( ) . getParent ( ) . getParent ( ) ; <nl> - } <nl> - catch ( URISyntaxException e ) <nl> - { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - return null ; <nl> - } ) <nl> - . filter ( Objects : : nonNull ) <nl> - . distinct ( ) <nl> - . filter ( Files : : isRegularFile ) / / We ' re only looking for remapped jars , exploded directories are handled by FMLUserdevLaunchProvider <nl> - . map ( path - > new ModFile ( path , this ) ) <nl> - . collect ( Collectors . toList ( ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public String name ( ) { <nl> - return " classpath mods " ; <nl> - } <nl> - <nl> - @ Override <nl> - public Path findPath ( final ModFile modFile , final String . . . path ) { <nl> - if ( path . length < 1 ) { <nl> - throw new IllegalArgumentException ( " Missing path " ) ; <nl> - } <nl> - <nl> - Path filePath = modFile . getFilePath ( ) ; <nl> - Path classesRoot = getClassesPath ( filePath ) ; <nl> - String [ ] tail = Arrays . copyOfRange ( path , 1 , path . length ) ; <nl> - Path classPath = classesRoot . resolve ( classesRoot . getFileSystem ( ) . getPath ( path [ 0 ] , tail ) ) ; <nl> - if ( Files . exists ( classPath ) ) <nl> - { <nl> - return classPath ; <nl> - } <nl> - return filePath . resolve ( filePath . getFileSystem ( ) . getPath ( path [ 0 ] , tail ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void scanFile ( final ModFile modFile , final Consumer < Path > pathConsumer ) { <nl> - LOGGER . debug ( SCAN , " Scanning classpath " ) ; <nl> - <nl> - Path filePath = modFile . getFilePath ( ) ; <nl> - Path scanPath = getClassesPath ( filePath ) ; <nl> - <nl> - try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { <nl> - files . forEach ( pathConsumer ) ; <nl> - } catch ( IOException e ) { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - LOGGER . debug ( SCAN , " Classpath scan complete " ) ; <nl> - } <nl> - <nl> - private Path getClassesPath ( Path filePath ) <nl> - { <nl> - Path classesPath = filePath ; <nl> - <nl> - / * <nl> - / / Hack 1 : When running from within intellij , we get <nl> - / / " out / production / resources " + " out / production / classes " <nl> - if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) <nl> - { <nl> - classesPath = filePath . getParent ( ) . resolve ( " classes " ) ; <nl> - } <nl> - / / Hack 2 : When running from gradle , we get <nl> - / / " build / resources / < sourceset > " + " build / classes / < language > / < sourceset > " <nl> - else if ( filePath . getNameCount ( ) > = 2 & & filePath . getName ( filePath . getNameCount ( ) - 2 ) . toString ( ) . equals ( " resources " ) ) <nl> - { <nl> - / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . <nl> - classesPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; <nl> - } <nl> - * / <nl> - return classesPath ; <nl> - } <nl> - <nl> - @ Override <nl> - public String toString ( ) <nl> - { <nl> - return " { Classpath locator } " ; <nl> - } <nl> - <nl> - @ Override <nl> - public Optional < Manifest > findManifest ( Path file ) <nl> - { <nl> - return Optional . empty ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void initArguments ( final Map < String , ? > arguments ) { <nl> - <nl> - } <nl> - <nl> - <nl> - }
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 7f1acda . . fd685e1 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 22 , 6 + 22 , 9 @ @ import net . minecraftforge . gradle . common . task . SignJar <nl> import net . minecraftforge . gradle . patcher . task . ApplyBinPatches <nl> import org . apache . tools . ant . filters . ReplaceTokens <nl> import de . undercouch . gradle . tasks . download . Download <nl> + import net . minecraftforge . gradle . patcher . task . TaskReobfuscateJar <nl> + <nl> + import java . util . stream . Collectors <nl> <nl> plugins { <nl> id ' net . minecrell . licenser ' version ' 0 . 4 ' <nl> @ @ - 98 , 6 + 101 , 16 @ @ project ( ' : forge ' ) { <nl> srcDir " $ rootDir / src / main / resources " <nl> } <nl> } <nl> + userdev { <nl> + compileClasspath + = sourceSets . main . runtimeClasspath <nl> + runtimeClasspath + = sourceSets . main . runtimeClasspath <nl> + java { <nl> + srcDir " $ rootDir / src / userdev / java " <nl> + } <nl> + resources { <nl> + srcDir " $ rootDir / src / userdev / resources " <nl> + } <nl> + } <nl> } <nl> repositories { <nl> mavenLocal ( ) <nl> @ @ - 755 , 6 + 768 , 33 @ @ project ( ' : forge ' ) { <nl> } <nl> } <nl> <nl> + task userdevExtras ( type : Jar ) { <nl> + dependsOn classes <nl> + from sourceSets . userdev . output <nl> + classifier ' userdev - temp ' <nl> + } <nl> + <nl> + task userdevExtrasReobf ( type : TaskReobfuscateJar ) { <nl> + dependsOn userdevExtras , createMcp2Srg <nl> + input = tasks . userdevExtras . archivePath <nl> + classpath = project . configurations . getByName ( " compile " ) <nl> + srg = tasks . createMcp2Srg . output <nl> + } <nl> + <nl> + userdevJar { <nl> + dependsOn userdevExtrasReobf <nl> + from ( zipTree ( tasks . userdevExtrasReobf . output ) ) { <nl> + into ' / inject / ' <nl> + } <nl> + from ( sourceSets . userdev . output . resourcesDir ) { <nl> + into ' / inject / ' <nl> + } <nl> + } <nl> + <nl> + applyRangeMap { <nl> + setSources sourceSets . userdev . java . srcDirs . findAll ( { f - > ( f ! = patcher . patchedSrc ) } ) <nl> + } <nl> + <nl> publishing { <nl> publications { <nl> mavenJava ( MavenPublication ) { <nl> diff - - git a / mdk / build . gradle b / mdk / build . gradle <nl> index ee711d2 . . ce344c1 100644 <nl> - - - a / mdk / build . gradle <nl> + + + b / mdk / build . gradle <nl> @ @ - 39 , 6 + 39 , 26 @ @ minecraft { <nl> / / makeObfSourceJar = false / / an Srg named sources jar is made by default . uncomment this to disable . <nl> <nl> / / accessTransformer = file ( ' my _ at . cfg ' ) <nl> + <nl> + / / default run configurations . <nl> + / / these can be tweaked , removed , or duplicated as needed . <nl> + runConfig { <nl> + name = " Minecraft Client " <nl> + main = " net . minecraftforge . userdev . UserdevLauncher " <nl> + ideaModuleName = " $ { project . name } _ main " <nl> + workingDirectory = project . file ( " run " ) . canonicalPath <nl> + environment " target " , " fmldevclient " <nl> + environment " assetDirectory " , downloadAssets . output . absolutePath <nl> + } <nl> + <nl> + runConfig { <nl> + name = " Minecraft Server " <nl> + main = " net . minecraftforge . userdev . UserdevLauncher " <nl> + ideaModuleName = " $ { project . name } _ main " <nl> + workingDirectory = project . file ( " run " ) . canonicalPath <nl> + environment " target " , " fmldevserver " <nl> + environment " assetDirectory " , downloadAssets . output . absolutePath <nl> + } <nl> } <nl> <nl> dependencies { <nl> @ @ - 76 , 7 + 96 , 7 @ @ processResources { <nl> <nl> / / replace stuff in mcmod . info , nothing else <nl> from ( sourceSets . main . resources . srcDirs ) { <nl> - include ' mcmod . info ' <nl> + include ' META _ INF / mods . toml ' <nl> <nl> / / replace version and mcversion <nl> expand ' version ' : project . version , ' mcversion ' : ' @ MC _ VERSION @ ' <nl> @ @ - 84 , 6 + 104 , 6 @ @ processResources { <nl> <nl> / / copy everything else except the mcmod . info <nl> from ( sourceSets . main . resources . srcDirs ) { <nl> - exclude ' mcmod . info ' <nl> + exclude ' META _ INF / mods . toml ' <nl> } <nl> } <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> new file mode 100644 <nl> index 0000000 . . 7f16338 <nl> - - - / dev / null <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> @ @ - 0 , 0 + 1 , 135 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . userdev ; <nl> + <nl> + import com . google . common . collect . Sets ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . IModLocator ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . net . URISyntaxException ; <nl> + import java . net . URL ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Path ; <nl> + import java . util . * ; <nl> + import java . util . function . Consumer ; <nl> + import java . util . jar . Manifest ; <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> + <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> + <nl> + public class ClasspathLocator implements IModLocator <nl> + { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + <nl> + public ClasspathLocator ( ) { <nl> + } <nl> + <nl> + @ Override <nl> + public List < ModFile > scanMods ( ) { <nl> + Set < URL > modUrls = Sets . newHashSet ( ) ; <nl> + ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> + try <nl> + { <nl> + modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( " META - INF / coremods . json " ) ) ) ; <nl> + modUrls . addAll ( Collections . list ( loader . getResources ( " META - INF / coremods . json " ) ) ) ; <nl> + modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( " META - INF / mods . toml " ) ) ) ; <nl> + modUrls . addAll ( Collections . list ( loader . getResources ( " META - INF / mods . toml " ) ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + <nl> + return modUrls . stream ( ) . map ( ( url ) - > { <nl> + try <nl> + { <nl> + / / We got URLs including " META - INF / < something " , so get two components up . <nl> + return new File ( url . toURI ( ) ) . toPath ( ) . getParent ( ) . getParent ( ) ; <nl> + } <nl> + catch ( URISyntaxException e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + return null ; <nl> + } ) . filter ( Objects : : nonNull ) . distinct ( ) <nl> + . map ( path - > new ModFile ( path , this ) ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String name ( ) { <nl> + return " classpath mods " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Path findPath ( final ModFile modFile , final String . . . path ) { <nl> + if ( path . length < 1 ) { <nl> + throw new IllegalArgumentException ( " Missing path " ) ; <nl> + } <nl> + return modFile . getFilePath ( ) . resolve ( modFile . getFilePath ( ) . getFileSystem ( ) . getPath ( path [ 0 ] , Arrays . copyOfRange ( path , 1 , path . length ) ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void scanFile ( final ModFile modFile , final Consumer < Path > pathConsumer ) { <nl> + LOGGER . debug ( SCAN , " Scanning classpath " ) ; <nl> + <nl> + Path filePath = modFile . getFilePath ( ) ; <nl> + <nl> + Path scanPath = filePath ; <nl> + <nl> + / / Hack 1 : When running from within intellij , we get <nl> + / / " out / production / resources " + " out / production / classes " <nl> + if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) <nl> + { <nl> + scanPath = filePath . getParent ( ) . resolve ( " classes " ) ; <nl> + } <nl> + / / Hack 2 : When running from gradle , we get <nl> + / / " build / resources / < sourceset > " + " build / classes / < language > / < sourceset > " <nl> + else if ( filePath . getNameCount ( ) > = 2 & & filePath . getName ( filePath . getNameCount ( ) - 2 ) . toString ( ) . equals ( " resources " ) ) <nl> + { <nl> + / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . <nl> + scanPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; <nl> + } <nl> + <nl> + try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { <nl> + files . forEach ( pathConsumer ) ; <nl> + } catch ( IOException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + LOGGER . debug ( SCAN , " Classpath scan complete " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " { Classpath locator } " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Optional < Manifest > findManifest ( Path file ) <nl> + { <nl> + return Optional . empty ( ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java <nl> new file mode 100644 <nl> index 0000000 . . 53061fa <nl> - - - / dev / null <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java <nl> @ @ - 0 , 0 + 1 , 106 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . userdev ; <nl> + <nl> + import com . google . common . base . Strings ; <nl> + import com . google . common . collect . ObjectArrays ; <nl> + import cpw . mods . modlauncher . Launcher ; <nl> + import org . apache . logging . log4j . Level ; <nl> + import org . apache . logging . log4j . core . Filter ; <nl> + import org . apache . logging . log4j . core . LoggerContext ; <nl> + import org . apache . logging . log4j . core . config . Configurator ; <nl> + import org . apache . logging . log4j . core . filter . MarkerFilter ; <nl> + <nl> + import java . io . File ; <nl> + import java . lang . reflect . Field ; <nl> + import java . util . * ; <nl> + <nl> + public class UserdevLauncher <nl> + { <nl> + public static void main ( String . . . args ) throws InterruptedException <nl> + { <nl> + Configurator . setRootLevel ( Level . DEBUG ) ; <nl> + final MarkerFilter classloadingFilter = MarkerFilter . createFilter ( " CLASSLOADING " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final MarkerFilter launchpluginFilter = MarkerFilter . createFilter ( " LAUNCHPLUGIN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final MarkerFilter axformFilter = MarkerFilter . createFilter ( " AXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final MarkerFilter eventbusFilter = MarkerFilter . createFilter ( " EVENTBUS " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final MarkerFilter distxformFilter = MarkerFilter . createFilter ( " DISTXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final LoggerContext logcontext = LoggerContext . getContext ( false ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( classloadingFilter ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( launchpluginFilter ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( axformFilter ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( eventbusFilter ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( distxformFilter ) ; <nl> + logcontext . updateLoggers ( ) ; <nl> + <nl> + String assets = System . getenv ( ) . getOrDefault ( " assetDirectory " , " assets " ) ; <nl> + String target = System . getenv ( ) . get ( " target " ) ; <nl> + <nl> + if ( assets = = null | | ! new File ( assets ) . exists ( ) ) { <nl> + throw new IllegalArgumentException ( " Environment variable ' assets ' must be set to a valid path . " ) ; <nl> + } <nl> + if ( target = = null ) { <nl> + throw new IllegalArgumentException ( " Environment variable ' target ' must be set to ' fmldevclient ' or ' fmldevserver ' . " ) ; <nl> + } <nl> + <nl> + if ( Objects . equals ( target , " fmldevclient " ) ) { <nl> + hackNatives ( ) ; <nl> + Launcher . main ( " - - launchTarget " , target , <nl> + " - - gameDir " , " . " , <nl> + " - - accessToken " , " blah " , <nl> + " - - version " , " FMLDev " , <nl> + " - - assetIndex " , " 1 . 13 " , <nl> + " - - assetsDir " , assets , <nl> + " - - userProperties " , " { } " ) ; <nl> + } else if ( Objects . equals ( target , " fmldevserver " ) ) { <nl> + String [ ] launchargs = ObjectArrays . concat ( new String [ ] { " - - launchTarget " , target , <nl> + " - - gameDir " , " . " } , args , String . class ) ; <nl> + Launcher . main ( launchargs ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( " Unknown value for ' target ' property : " + target ) ; <nl> + } <nl> + Thread . sleep ( 10000 ) ; <nl> + } <nl> + <nl> + private static void hackNatives ( ) <nl> + { <nl> + String paths = System . getProperty ( " java . library . path " ) ; <nl> + String nativesDir = System . getenv ( ) . get ( " nativesDirectory " ) ; <nl> + <nl> + if ( Strings . isNullOrEmpty ( paths ) ) <nl> + paths = nativesDir ; <nl> + else <nl> + paths + = File . pathSeparator + nativesDir ; <nl> + <nl> + System . setProperty ( " java . library . path " , paths ) ; <nl> + <nl> + / / hack the classloader now . <nl> + try <nl> + { <nl> + final Field sysPathsField = ClassLoader . class . getDeclaredField ( " sys _ paths " ) ; <nl> + sysPathsField . setAccessible ( true ) ; <nl> + sysPathsField . set ( null , null ) ; <nl> + } <nl> + catch ( Throwable t ) { } <nl> + } <nl> + <nl> + <nl> + <nl> + } <nl> diff - - git a / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator b / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator <nl> new file mode 100644 <nl> index 0000000 . . fc6e5d3 <nl> - - - / dev / null <nl> + + + b / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator <nl> @ @ - 0 , 0 + 1 @ @ <nl> + net . minecraftforge . userdev . ClasspathLocator <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java b / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java 
 index fdedfc6 . . 5806e85 100644 
 - - - a / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java 
 @ @ - 105 , 11 + 105 , 11 @ @ public enum LifecycleEventProvider 
 this . progression = p ; 
 } 
 
 - public Event getOrBuildEvent ( FMLModContainer fmlModContainer ) 
 + public Event getOrBuildEvent ( ModContainer modContainer ) 
 { 
 if ( customEventSupplier ! = null ) return customEventSupplier . get ( ) ; 
 
 - return stage . getModEvent ( fmlModContainer ) ; 
 + return stage . getModEvent ( modContainer ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingStage . java b / src / main / java / net / minecraftforge / fml / ModLoadingStage . java 
 index f055752 . . d25d26b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoadingStage . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoadingStage . java 
 @ @ - 44 , 8 + 44 , 8 @ @ public enum ModLoadingStage 
 this . modLifecycleEventFunction = modLifecycleEventFunction ; 
 } 
 
 - public ModLifecycleEvent getModEvent ( ModContainer fmlModContainer ) 
 + public ModLifecycleEvent getModEvent ( ModContainer modContainer ) 
 { 
 - return modLifecycleEventFunction . get ( ) . apply ( fmlModContainer ) ; 
 + return modLifecycleEventFunction . get ( ) . apply ( modContainer ) ; 
 } 
 } 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 deleted file mode 100644 
 index 011ac0a . . 0000000 
 - - - a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 + + + / dev / null 
 @ @ - 1 , 162 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2018 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . userdev ; 
 - 
 - import com . google . common . collect . Maps ; 
 - import com . google . common . collect . Sets ; 
 - import net . minecraftforge . fml . loading . moddiscovery . IModLocator ; 
 - import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 - import org . apache . logging . log4j . LogManager ; 
 - import org . apache . logging . log4j . Logger ; 
 - 
 - import java . io . File ; 
 - import java . io . IOException ; 
 - import java . net . URISyntaxException ; 
 - import java . net . URL ; 
 - import java . nio . file . * ; 
 - import java . util . * ; 
 - import java . util . function . Consumer ; 
 - import java . util . jar . Manifest ; 
 - import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 - 
 - import static net . minecraftforge . fml . Logging . SCAN ; 
 - 
 - public class ClasspathLocator implements IModLocator 
 - { 
 - private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 - private static final String COREMODS = " META - INF / coremods . json " ; 
 - private static final String MODS = " META - INF / mods . toml " ; 
 - 
 - public ClasspathLocator ( ) { } 
 - 
 - @ Override 
 - public List < ModFile > scanMods ( ) { 
 - Set < URL > modUrls = Sets . newHashSet ( ) ; 
 - ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 - try 
 - { 
 - modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( COREMODS ) ) ) ; 
 - modUrls . addAll ( Collections . list ( loader . getResources ( COREMODS ) ) ) ; 
 - modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( MODS ) ) ) ; 
 - modUrls . addAll ( Collections . list ( loader . getResources ( MODS ) ) ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - e . printStackTrace ( ) ; 
 - } 
 - 
 - return modUrls . stream ( ) . map ( ( url ) - > { 
 - try 
 - { 
 - / / We got URLs including " META - INF / < something " , so get two components up . 
 - return new File ( url . toURI ( ) ) . toPath ( ) . getParent ( ) . getParent ( ) ; 
 - } 
 - catch ( URISyntaxException e ) 
 - { 
 - e . printStackTrace ( ) ; 
 - } 
 - return null ; 
 - } ) 
 - . filter ( Objects : : nonNull ) 
 - . distinct ( ) 
 - . filter ( Files : : isRegularFile ) / / We ' re only looking for remapped jars , exploded directories are handled by FMLUserdevLaunchProvider 
 - . map ( path - > new ModFile ( path , this ) ) 
 - . collect ( Collectors . toList ( ) ) ; 
 - } 
 - 
 - @ Override 
 - public String name ( ) { 
 - return " classpath mods " ; 
 - } 
 - 
 - @ Override 
 - public Path findPath ( final ModFile modFile , final String . . . path ) { 
 - if ( path . length < 1 ) { 
 - throw new IllegalArgumentException ( " Missing path " ) ; 
 - } 
 - 
 - Path filePath = modFile . getFilePath ( ) ; 
 - Path classesRoot = getClassesPath ( filePath ) ; 
 - String [ ] tail = Arrays . copyOfRange ( path , 1 , path . length ) ; 
 - Path classPath = classesRoot . resolve ( classesRoot . getFileSystem ( ) . getPath ( path [ 0 ] , tail ) ) ; 
 - if ( Files . exists ( classPath ) ) 
 - { 
 - return classPath ; 
 - } 
 - return filePath . resolve ( filePath . getFileSystem ( ) . getPath ( path [ 0 ] , tail ) ) ; 
 - } 
 - 
 - @ Override 
 - public void scanFile ( final ModFile modFile , final Consumer < Path > pathConsumer ) { 
 - LOGGER . debug ( SCAN , " Scanning classpath " ) ; 
 - 
 - Path filePath = modFile . getFilePath ( ) ; 
 - Path scanPath = getClassesPath ( filePath ) ; 
 - 
 - try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { 
 - files . forEach ( pathConsumer ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 - } 
 - LOGGER . debug ( SCAN , " Classpath scan complete " ) ; 
 - } 
 - 
 - private Path getClassesPath ( Path filePath ) 
 - { 
 - Path classesPath = filePath ; 
 - 
 - / * 
 - / / Hack 1 : When running from within intellij , we get 
 - / / " out / production / resources " + " out / production / classes " 
 - if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) 
 - { 
 - classesPath = filePath . getParent ( ) . resolve ( " classes " ) ; 
 - } 
 - / / Hack 2 : When running from gradle , we get 
 - / / " build / resources / < sourceset > " + " build / classes / < language > / < sourceset > " 
 - else if ( filePath . getNameCount ( ) > = 2 & & filePath . getName ( filePath . getNameCount ( ) - 2 ) . toString ( ) . equals ( " resources " ) ) 
 - { 
 - / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . 
 - classesPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; 
 - } 
 - * / 
 - return classesPath ; 
 - } 
 - 
 - @ Override 
 - public String toString ( ) 
 - { 
 - return " { Classpath locator } " ; 
 - } 
 - 
 - @ Override 
 - public Optional < Manifest > findManifest ( Path file ) 
 - { 
 - return Optional . empty ( ) ; 
 - } 
 - 
 - @ Override 
 - public void initArguments ( final Map < String , ? > arguments ) { 
 - 
 - } 
 - 
 - 
 - }

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 7f1acda . . fd685e1 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 22 , 6 + 22 , 9 @ @ import net . minecraftforge . gradle . common . task . SignJar 
 import net . minecraftforge . gradle . patcher . task . ApplyBinPatches 
 import org . apache . tools . ant . filters . ReplaceTokens 
 import de . undercouch . gradle . tasks . download . Download 
 + import net . minecraftforge . gradle . patcher . task . TaskReobfuscateJar 
 + 
 + import java . util . stream . Collectors 
 
 plugins { 
 id ' net . minecrell . licenser ' version ' 0 . 4 ' 
 @ @ - 98 , 6 + 101 , 16 @ @ project ( ' : forge ' ) { 
 srcDir " $ rootDir / src / main / resources " 
 } 
 } 
 + userdev { 
 + compileClasspath + = sourceSets . main . runtimeClasspath 
 + runtimeClasspath + = sourceSets . main . runtimeClasspath 
 + java { 
 + srcDir " $ rootDir / src / userdev / java " 
 + } 
 + resources { 
 + srcDir " $ rootDir / src / userdev / resources " 
 + } 
 + } 
 } 
 repositories { 
 mavenLocal ( ) 
 @ @ - 755 , 6 + 768 , 33 @ @ project ( ' : forge ' ) { 
 } 
 } 
 
 + task userdevExtras ( type : Jar ) { 
 + dependsOn classes 
 + from sourceSets . userdev . output 
 + classifier ' userdev - temp ' 
 + } 
 + 
 + task userdevExtrasReobf ( type : TaskReobfuscateJar ) { 
 + dependsOn userdevExtras , createMcp2Srg 
 + input = tasks . userdevExtras . archivePath 
 + classpath = project . configurations . getByName ( " compile " ) 
 + srg = tasks . createMcp2Srg . output 
 + } 
 + 
 + userdevJar { 
 + dependsOn userdevExtrasReobf 
 + from ( zipTree ( tasks . userdevExtrasReobf . output ) ) { 
 + into ' / inject / ' 
 + } 
 + from ( sourceSets . userdev . output . resourcesDir ) { 
 + into ' / inject / ' 
 + } 
 + } 
 + 
 + applyRangeMap { 
 + setSources sourceSets . userdev . java . srcDirs . findAll ( { f - > ( f ! = patcher . patchedSrc ) } ) 
 + } 
 + 
 publishing { 
 publications { 
 mavenJava ( MavenPublication ) { 
 diff - - git a / mdk / build . gradle b / mdk / build . gradle 
 index ee711d2 . . ce344c1 100644 
 - - - a / mdk / build . gradle 
 + + + b / mdk / build . gradle 
 @ @ - 39 , 6 + 39 , 26 @ @ minecraft { 
 / / makeObfSourceJar = false / / an Srg named sources jar is made by default . uncomment this to disable . 
 
 / / accessTransformer = file ( ' my _ at . cfg ' ) 
 + 
 + / / default run configurations . 
 + / / these can be tweaked , removed , or duplicated as needed . 
 + runConfig { 
 + name = " Minecraft Client " 
 + main = " net . minecraftforge . userdev . UserdevLauncher " 
 + ideaModuleName = " $ { project . name } _ main " 
 + workingDirectory = project . file ( " run " ) . canonicalPath 
 + environment " target " , " fmldevclient " 
 + environment " assetDirectory " , downloadAssets . output . absolutePath 
 + } 
 + 
 + runConfig { 
 + name = " Minecraft Server " 
 + main = " net . minecraftforge . userdev . UserdevLauncher " 
 + ideaModuleName = " $ { project . name } _ main " 
 + workingDirectory = project . file ( " run " ) . canonicalPath 
 + environment " target " , " fmldevserver " 
 + environment " assetDirectory " , downloadAssets . output . absolutePath 
 + } 
 } 
 
 dependencies { 
 @ @ - 76 , 7 + 96 , 7 @ @ processResources { 
 
 / / replace stuff in mcmod . info , nothing else 
 from ( sourceSets . main . resources . srcDirs ) { 
 - include ' mcmod . info ' 
 + include ' META _ INF / mods . toml ' 
 
 / / replace version and mcversion 
 expand ' version ' : project . version , ' mcversion ' : ' @ MC _ VERSION @ ' 
 @ @ - 84 , 6 + 104 , 6 @ @ processResources { 
 
 / / copy everything else except the mcmod . info 
 from ( sourceSets . main . resources . srcDirs ) { 
 - exclude ' mcmod . info ' 
 + exclude ' META _ INF / mods . toml ' 
 } 
 } 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 new file mode 100644 
 index 0000000 . . 7f16338 
 - - - / dev / null 
 + + + b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 @ @ - 0 , 0 + 1 , 135 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . userdev ; 
 + 
 + import com . google . common . collect . Sets ; 
 + import net . minecraftforge . fml . loading . moddiscovery . IModLocator ; 
 + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . net . URISyntaxException ; 
 + import java . net . URL ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Path ; 
 + import java . util . * ; 
 + import java . util . function . Consumer ; 
 + import java . util . jar . Manifest ; 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 + 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 + 
 + public class ClasspathLocator implements IModLocator 
 + { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 + 
 + public ClasspathLocator ( ) { 
 + } 
 + 
 + @ Override 
 + public List < ModFile > scanMods ( ) { 
 + Set < URL > modUrls = Sets . newHashSet ( ) ; 
 + ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 + try 
 + { 
 + modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( " META - INF / coremods . json " ) ) ) ; 
 + modUrls . addAll ( Collections . list ( loader . getResources ( " META - INF / coremods . json " ) ) ) ; 
 + modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( " META - INF / mods . toml " ) ) ) ; 
 + modUrls . addAll ( Collections . list ( loader . getResources ( " META - INF / mods . toml " ) ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + return modUrls . stream ( ) . map ( ( url ) - > { 
 + try 
 + { 
 + / / We got URLs including " META - INF / < something " , so get two components up . 
 + return new File ( url . toURI ( ) ) . toPath ( ) . getParent ( ) . getParent ( ) ; 
 + } 
 + catch ( URISyntaxException e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + } 
 + return null ; 
 + } ) . filter ( Objects : : nonNull ) . distinct ( ) 
 + . map ( path - > new ModFile ( path , this ) ) 
 + . collect ( Collectors . toList ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public String name ( ) { 
 + return " classpath mods " ; 
 + } 
 + 
 + @ Override 
 + public Path findPath ( final ModFile modFile , final String . . . path ) { 
 + if ( path . length < 1 ) { 
 + throw new IllegalArgumentException ( " Missing path " ) ; 
 + } 
 + return modFile . getFilePath ( ) . resolve ( modFile . getFilePath ( ) . getFileSystem ( ) . getPath ( path [ 0 ] , Arrays . copyOfRange ( path , 1 , path . length ) ) ) ; 
 + } 
 + 
 + @ Override 
 + public void scanFile ( final ModFile modFile , final Consumer < Path > pathConsumer ) { 
 + LOGGER . debug ( SCAN , " Scanning classpath " ) ; 
 + 
 + Path filePath = modFile . getFilePath ( ) ; 
 + 
 + Path scanPath = filePath ; 
 + 
 + / / Hack 1 : When running from within intellij , we get 
 + / / " out / production / resources " + " out / production / classes " 
 + if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) 
 + { 
 + scanPath = filePath . getParent ( ) . resolve ( " classes " ) ; 
 + } 
 + / / Hack 2 : When running from gradle , we get 
 + / / " build / resources / < sourceset > " + " build / classes / < language > / < sourceset > " 
 + else if ( filePath . getNameCount ( ) > = 2 & & filePath . getName ( filePath . getNameCount ( ) - 2 ) . toString ( ) . equals ( " resources " ) ) 
 + { 
 + / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . 
 + scanPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; 
 + } 
 + 
 + try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { 
 + files . forEach ( pathConsumer ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + LOGGER . debug ( SCAN , " Classpath scan complete " ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " { Classpath locator } " ; 
 + } 
 + 
 + @ Override 
 + public Optional < Manifest > findManifest ( Path file ) 
 + { 
 + return Optional . empty ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java 
 new file mode 100644 
 index 0000000 . . 53061fa 
 - - - / dev / null 
 + + + b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java 
 @ @ - 0 , 0 + 1 , 106 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . userdev ; 
 + 
 + import com . google . common . base . Strings ; 
 + import com . google . common . collect . ObjectArrays ; 
 + import cpw . mods . modlauncher . Launcher ; 
 + import org . apache . logging . log4j . Level ; 
 + import org . apache . logging . log4j . core . Filter ; 
 + import org . apache . logging . log4j . core . LoggerContext ; 
 + import org . apache . logging . log4j . core . config . Configurator ; 
 + import org . apache . logging . log4j . core . filter . MarkerFilter ; 
 + 
 + import java . io . File ; 
 + import java . lang . reflect . Field ; 
 + import java . util . * ; 
 + 
 + public class UserdevLauncher 
 + { 
 + public static void main ( String . . . args ) throws InterruptedException 
 + { 
 + Configurator . setRootLevel ( Level . DEBUG ) ; 
 + final MarkerFilter classloadingFilter = MarkerFilter . createFilter ( " CLASSLOADING " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final MarkerFilter launchpluginFilter = MarkerFilter . createFilter ( " LAUNCHPLUGIN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final MarkerFilter axformFilter = MarkerFilter . createFilter ( " AXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final MarkerFilter eventbusFilter = MarkerFilter . createFilter ( " EVENTBUS " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final MarkerFilter distxformFilter = MarkerFilter . createFilter ( " DISTXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final LoggerContext logcontext = LoggerContext . getContext ( false ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( classloadingFilter ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( launchpluginFilter ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( axformFilter ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( eventbusFilter ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( distxformFilter ) ; 
 + logcontext . updateLoggers ( ) ; 
 + 
 + String assets = System . getenv ( ) . getOrDefault ( " assetDirectory " , " assets " ) ; 
 + String target = System . getenv ( ) . get ( " target " ) ; 
 + 
 + if ( assets = = null | | ! new File ( assets ) . exists ( ) ) { 
 + throw new IllegalArgumentException ( " Environment variable ' assets ' must be set to a valid path . " ) ; 
 + } 
 + if ( target = = null ) { 
 + throw new IllegalArgumentException ( " Environment variable ' target ' must be set to ' fmldevclient ' or ' fmldevserver ' . " ) ; 
 + } 
 + 
 + if ( Objects . equals ( target , " fmldevclient " ) ) { 
 + hackNatives ( ) ; 
 + Launcher . main ( " - - launchTarget " , target , 
 + " - - gameDir " , " . " , 
 + " - - accessToken " , " blah " , 
 + " - - version " , " FMLDev " , 
 + " - - assetIndex " , " 1 . 13 " , 
 + " - - assetsDir " , assets , 
 + " - - userProperties " , " { } " ) ; 
 + } else if ( Objects . equals ( target , " fmldevserver " ) ) { 
 + String [ ] launchargs = ObjectArrays . concat ( new String [ ] { " - - launchTarget " , target , 
 + " - - gameDir " , " . " } , args , String . class ) ; 
 + Launcher . main ( launchargs ) ; 
 + } else { 
 + throw new IllegalArgumentException ( " Unknown value for ' target ' property : " + target ) ; 
 + } 
 + Thread . sleep ( 10000 ) ; 
 + } 
 + 
 + private static void hackNatives ( ) 
 + { 
 + String paths = System . getProperty ( " java . library . path " ) ; 
 + String nativesDir = System . getenv ( ) . get ( " nativesDirectory " ) ; 
 + 
 + if ( Strings . isNullOrEmpty ( paths ) ) 
 + paths = nativesDir ; 
 + else 
 + paths + = File . pathSeparator + nativesDir ; 
 + 
 + System . setProperty ( " java . library . path " , paths ) ; 
 + 
 + / / hack the classloader now . 
 + try 
 + { 
 + final Field sysPathsField = ClassLoader . class . getDeclaredField ( " sys _ paths " ) ; 
 + sysPathsField . setAccessible ( true ) ; 
 + sysPathsField . set ( null , null ) ; 
 + } 
 + catch ( Throwable t ) { } 
 + } 
 + 
 + 
 + 
 + } 
 diff - - git a / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator b / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator 
 new file mode 100644 
 index 0000000 . . fc6e5d3 
 - - - / dev / null 
 + + + b / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator 
 @ @ - 0 , 0 + 1 @ @ 
 + net . minecraftforge . userdev . ClasspathLocator 
 \ No newline at end of file
