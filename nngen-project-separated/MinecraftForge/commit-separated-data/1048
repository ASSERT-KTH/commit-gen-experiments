BLEU SCORE: 0.013139808552042212

TEST MSG: Optifine can tell us when they ' re ready for the new splash screen .
GENERATED MSG: Fix keybindings not loading properly from gamesettings file after restart

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> index 2e6dd0e . . 72e6fc4 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import net . minecraft . client . resources . FileResourcePack ; <nl> import net . minecraft . client . resources . FolderResourcePack ; <nl> import net . minecraft . client . resources . IResourcePack ; <nl> import net . minecraft . crash . CrashReport ; <nl> + import net . minecraft . launchwrapper . Launch ; <nl> import net . minecraft . util . ResourceLocation ; <nl> <nl> import org . apache . commons . io . IOUtils ; <nl> @ @ - 105 , 7 + 106 , 7 @ @ public class SplashProgress <nl> <nl> public static void start ( ) <nl> { <nl> - File configFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , " config / splash . properties " ) ; <nl> + File configFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " splash . properties " ) ; <nl> FileReader r = null ; <nl> config = new Properties ( ) ; <nl> try <nl> @ @ - 122 , 7 + 123 , 9 @ @ public class SplashProgress <nl> IOUtils . closeQuietly ( r ) ; <nl> } <nl> <nl> - enabled = getBool ( " enabled " , true ) & & ! FMLClientHandler . instance ( ) . hasOptifine ( ) ; <nl> + / / Enable if we have the flag , and there ' s either no optifine , or optifine has added a key to the blackboard ( " optifine . ForgeSplashCompatible " ) <nl> + / / Optifine authors - add this key to the blackboard if you feel your modifications are now compatible with this code . <nl> + enabled = getBool ( " enabled " , true ) & & ( ( ! FMLClientHandler . instance ( ) . hasOptifine ( ) ) | | Launch . blackboard . containsKey ( " optifine . ForgeSplashCompatible " ) ) ; <nl> rotate = getBool ( " rotate " , true ) ; <nl> logoOffset = getInt ( " logoOffset " , 10 ) ; <nl> backgroundColor = getHex ( " background " , 0xFFFFFF ) ;
NEAREST DIFF (one line): diff - - git a / fml / client / cpw / mods / fml / client / FMLClientHandler . java b / fml / client / cpw / mods / fml / client / FMLClientHandler . java <nl> index a612ffa . . c3e3181 100644 <nl> - - - a / fml / client / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / client / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 106 , 6 + 106 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private MissingModsException modsMissing ; <nl> <nl> + private boolean loading ; <nl> + <nl> public void beginMinecraftLoading ( Minecraft minecraft ) <nl> { <nl> if ( minecraft . func _ 71355 _ q ( ) ) <nl> @ @ - 115 , 6 + 117 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> return ; <nl> } <nl> <nl> + loading = true ; <nl> client = minecraft ; <nl> ObfuscationReflectionHelper . detectObfuscation ( World . class ) ; <nl> TextureFXManager . instance ( ) . setClient ( client ) ; <nl> @ @ - 178 , 6 + 181 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> LanguageRegistry . reloadLanguageTable ( ) ; <nl> RenderingRegistry . instance ( ) . loadEntityRenderers ( ( Map < Class < ? extends Entity > , Render > ) RenderManager . field _ 78727 _ a . field _ 78729 _ o ) ; <nl> <nl> + loading = false ; <nl> KeyBindingRegistry . instance ( ) . uploadKeyBindingsToGame ( client . field _ 71474 _ y ) ; <nl> } <nl> <nl> @ @ - 380 , 4 + 384 , 13 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> client . func _ 71373 _ a ( new GuiModsMissingForServer ( modMissingPacket ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * If the client is in the midst of loading , we disable saving so that custom settings aren ' t wiped out <nl> + * @ return <nl> + * / <nl> + public boolean isLoading ( ) <nl> + { <nl> + return loading ; <nl> + } <nl> } <nl> diff - - git a / fml / patches / minecraft / net / minecraft / src / GameSettings . java . patch b / fml / patches / minecraft / net / minecraft / src / GameSettings . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 6c63758 <nl> - - - / dev / null <nl> + + + b / fml / patches / minecraft / net / minecraft / src / GameSettings . java . patch <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / src / GameSettings . java <nl> + + + + . . / src - work / minecraft / net / minecraft / src / GameSettings . java <nl> + @ @ - 1 , 5 + 1 , 6 @ @ <nl> + package net . minecraft . src ; <nl> + <nl> + + import cpw . mods . fml . client . FMLClientHandler ; <nl> + import cpw . mods . fml . common . Side ; <nl> + import cpw . mods . fml . common . asm . SideOnly ; <nl> + import java . io . BufferedReader ; <nl> + @ @ - 571 , 6 + 572 , 7 @ @ <nl> + <nl> + public void func _ 74303 _ b ( ) <nl> + { <nl> + + if ( FMLClientHandler . instance ( ) . isLoading ( ) ) return ; <nl> + try <nl> + { <nl> + PrintWriter var1 = new PrintWriter ( new FileWriter ( this . field _ 74354 _ ai ) ) ;

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 index 2e6dd0e . . 72e6fc4 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import net . minecraft . client . resources . FileResourcePack ; 
 import net . minecraft . client . resources . FolderResourcePack ; 
 import net . minecraft . client . resources . IResourcePack ; 
 import net . minecraft . crash . CrashReport ; 
 + import net . minecraft . launchwrapper . Launch ; 
 import net . minecraft . util . ResourceLocation ; 
 
 import org . apache . commons . io . IOUtils ; 
 @ @ - 105 , 7 + 106 , 7 @ @ public class SplashProgress 
 
 public static void start ( ) 
 { 
 - File configFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , " config / splash . properties " ) ; 
 + File configFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " splash . properties " ) ; 
 FileReader r = null ; 
 config = new Properties ( ) ; 
 try 
 @ @ - 122 , 7 + 123 , 9 @ @ public class SplashProgress 
 IOUtils . closeQuietly ( r ) ; 
 } 
 
 - enabled = getBool ( " enabled " , true ) & & ! FMLClientHandler . instance ( ) . hasOptifine ( ) ; 
 + / / Enable if we have the flag , and there ' s either no optifine , or optifine has added a key to the blackboard ( " optifine . ForgeSplashCompatible " ) 
 + / / Optifine authors - add this key to the blackboard if you feel your modifications are now compatible with this code . 
 + enabled = getBool ( " enabled " , true ) & & ( ( ! FMLClientHandler . instance ( ) . hasOptifine ( ) ) | | Launch . blackboard . containsKey ( " optifine . ForgeSplashCompatible " ) ) ; 
 rotate = getBool ( " rotate " , true ) ; 
 logoOffset = getInt ( " logoOffset " , 10 ) ; 
 backgroundColor = getHex ( " background " , 0xFFFFFF ) ;

NEAREST DIFF:
diff - - git a / fml / client / cpw / mods / fml / client / FMLClientHandler . java b / fml / client / cpw / mods / fml / client / FMLClientHandler . java 
 index a612ffa . . c3e3181 100644 
 - - - a / fml / client / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / client / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 106 , 6 + 106 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private MissingModsException modsMissing ; 
 
 + private boolean loading ; 
 + 
 public void beginMinecraftLoading ( Minecraft minecraft ) 
 { 
 if ( minecraft . func _ 71355 _ q ( ) ) 
 @ @ - 115 , 6 + 117 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 return ; 
 } 
 
 + loading = true ; 
 client = minecraft ; 
 ObfuscationReflectionHelper . detectObfuscation ( World . class ) ; 
 TextureFXManager . instance ( ) . setClient ( client ) ; 
 @ @ - 178 , 6 + 181 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 LanguageRegistry . reloadLanguageTable ( ) ; 
 RenderingRegistry . instance ( ) . loadEntityRenderers ( ( Map < Class < ? extends Entity > , Render > ) RenderManager . field _ 78727 _ a . field _ 78729 _ o ) ; 
 
 + loading = false ; 
 KeyBindingRegistry . instance ( ) . uploadKeyBindingsToGame ( client . field _ 71474 _ y ) ; 
 } 
 
 @ @ - 380 , 4 + 384 , 13 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 client . func _ 71373 _ a ( new GuiModsMissingForServer ( modMissingPacket ) ) ; 
 } 
 + 
 + / * * 
 + * If the client is in the midst of loading , we disable saving so that custom settings aren ' t wiped out 
 + * @ return 
 + * / 
 + public boolean isLoading ( ) 
 + { 
 + return loading ; 
 + } 
 } 
 diff - - git a / fml / patches / minecraft / net / minecraft / src / GameSettings . java . patch b / fml / patches / minecraft / net / minecraft / src / GameSettings . java . patch 
 new file mode 100644 
 index 0000000 . . 6c63758 
 - - - / dev / null 
 + + + b / fml / patches / minecraft / net / minecraft / src / GameSettings . java . patch 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / src / GameSettings . java 
 + + + + . . / src - work / minecraft / net / minecraft / src / GameSettings . java 
 + @ @ - 1 , 5 + 1 , 6 @ @ 
 + package net . minecraft . src ; 
 + 
 + + import cpw . mods . fml . client . FMLClientHandler ; 
 + import cpw . mods . fml . common . Side ; 
 + import cpw . mods . fml . common . asm . SideOnly ; 
 + import java . io . BufferedReader ; 
 + @ @ - 571 , 6 + 572 , 7 @ @ 
 + 
 + public void func _ 74303 _ b ( ) 
 + { 
 + + if ( FMLClientHandler . instance ( ) . isLoading ( ) ) return ; 
 + try 
 + { 
 + PrintWriter var1 = new PrintWriter ( new FileWriter ( this . field _ 74354 _ ai ) ) ;
