BLEU SCORE: 0.02955926526467443

TEST MSG: Handle differing network versions for FML gracefully ?
GENERATED MSG: Fix network syncing of SERVER config . Enable COMMON Config . Fix network

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / network / ConnectionType . java b / src / main / java / net / minecraftforge / fml / network / ConnectionType . java <nl> index ee209e6 . . c437908 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / ConnectionType . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / ConnectionType . java <nl> @ @ - 19 , 23 + 19 , 23 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> - import java . util . Arrays ; <nl> - import java . util . Objects ; <nl> + import java . util . function . Function ; <nl> <nl> public enum ConnectionType <nl> { <nl> - MODDED ( NetworkHooks . NETVERSION ) , VANILLA ( NetworkHooks . NOVERSION ) ; <nl> + MODDED ( s - > Integer . valueOf ( s . substring ( FMLNetworkConstants . FMLNETMARKER . length ( ) ) ) ) , VANILLA ( s - > 0 ) ; <nl> <nl> - private final String versionString ; <nl> + private final Function < String , Integer > versionExtractor ; <nl> <nl> - ConnectionType ( String versionString ) <nl> - { <nl> - this . versionString = versionString ; <nl> + ConnectionType ( Function < String , Integer > versionExtractor ) { <nl> + this . versionExtractor = versionExtractor ; <nl> } <nl> - <nl> public static ConnectionType forVersionFlag ( String vers ) <nl> { <nl> - return Arrays . stream ( values ( ) ) . filter ( ct - > Objects . equals ( ct . versionString , vers ) ) . <nl> - findFirst ( ) . orElse ( ConnectionType . VANILLA ) ; <nl> + return vers . startsWith ( FMLNetworkConstants . FMLNETMARKER ) ? MODDED : VANILLA ; <nl> + } <nl> + <nl> + public int getFMLVersionNumber ( final String fmlVersion ) { <nl> + return versionExtractor . apply ( fmlVersion ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> index 249cc0b . . a5456fe 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ import static net . minecraftforge . registries . ForgeRegistry . REGISTRIES ; <nl> * final login phase will commence . <nl> * / <nl> public class FMLHandshakeHandler { <nl> - static final Marker FMLHSMARKER = MarkerManager . getMarker ( " FMLHANDSHAKE " ) . setParents ( FMLNetworking . NETWORK ) ; <nl> + static final Marker FMLHSMARKER = MarkerManager . getMarker ( " FMLHANDSHAKE " ) . setParents ( FMLNetworkConstants . NETWORK ) ; <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> static final ResourceLocation FML _ HANDSHAKE _ RESOURCE = new ResourceLocation ( " fml : handshake " ) ; <nl> private static final AttributeKey < FMLHandshakeHandler > FML _ HANDSHAKE _ HANDLER _ ATTRIBUTE _ KEY = AttributeKey . newInstance ( " fml : handshake " ) ; <nl> @ @ - 83 , 7 + 83 , 7 @ @ public class FMLHandshakeHandler { <nl> channel = NetworkRegistry . ChannelBuilder . named ( FML _ HANDSHAKE _ RESOURCE ) . <nl> clientAcceptedVersions ( a - > true ) . <nl> serverAcceptedVersions ( a - > true ) . <nl> - networkProtocolVersion ( ( ) - > NetworkHooks . NETVERSION ) . <nl> + networkProtocolVersion ( ( ) - > FMLNetworkConstants . NETVERSION ) . <nl> simpleChannel ( ) ; <nl> channel . messageBuilder ( FMLHandshakeMessages . C2SAcknowledge . class , 99 ) . <nl> loginIndex ( FMLHandshakeMessages . LoginIndexedMessage : : getLoginIndex , FMLHandshakeMessages . LoginIndexedMessage : : setLoginIndex ) . <nl> @ @ - 208 , 7 + 208 , 7 @ @ public class FMLHandshakeHandler { <nl> channel . reply ( reply , c . get ( ) ) ; <nl> LOGGER . debug ( FMLHSMARKER , " Accepted server connection " ) ; <nl> / / Set the modded marker on the channel so we know we got packets <nl> - c . get ( ) . getNetworkManager ( ) . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( NetworkHooks . NETVERSION ) ; <nl> + c . get ( ) . getNetworkManager ( ) . channel ( ) . attr ( FMLNetworkConstants . FML _ MARKER ) . set ( FMLNetworkConstants . NETVERSION ) ; <nl> this . registriesToReceive = new HashSet < > ( serverModList . getRegistries ( ) ) ; <nl> LOGGER . debug ( REGISTRIES , " Expecting { } registries : { } " , ( ) - > this . registriesToReceive . size ( ) , ( ) - > this . registriesToReceive ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLLoginWrapper . java b / src / main / java / net / minecraftforge / fml / network / FMLLoginWrapper . java <nl> index 4f868b3 . . d282839 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLLoginWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLLoginWrapper . java <nl> @ @ - 41 , 7 + 41 , 7 @ @ public class FMLLoginWrapper { <nl> wrapperChannel = NetworkRegistry . ChannelBuilder . named ( FMLLoginWrapper . WRAPPER ) . <nl> clientAcceptedVersions ( a - > true ) . <nl> serverAcceptedVersions ( a - > true ) . <nl> - networkProtocolVersion ( ( ) - > NetworkHooks . NETVERSION ) <nl> + networkProtocolVersion ( ( ) - > FMLNetworkConstants . NETVERSION ) <nl> . eventNetworkChannel ( ) ; <nl> wrapperChannel . addListener ( this : : wrapperReceived ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java <nl> new file mode 100644 <nl> index 0000000 . . e1ccc1c <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2019 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . network ; <nl> + <nl> + import io . netty . util . AttributeKey ; <nl> + import org . apache . logging . log4j . Marker ; <nl> + import org . apache . logging . log4j . MarkerManager ; <nl> + <nl> + / * * <nl> + * Constants related to networking <nl> + * / <nl> + public class FMLNetworkConstants <nl> + { <nl> + public static final String FMLNETMARKER = " FML " ; <nl> + public static final int FMLNETVERSION = 1 ; <nl> + public static final String NETVERSION = FMLNETMARKER + FMLNETVERSION ; <nl> + public static final String NOVERSION = " NONE " ; <nl> + static final Marker NETWORK = MarkerManager . getMarker ( " FMLNETWORK " ) ; <nl> + static final AttributeKey < String > FML _ MARKER = AttributeKey . valueOf ( " fml : marker " ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java <nl> deleted file mode 100644 <nl> index 539cb43 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java <nl> + + + / dev / null <nl> @ @ - 1 , 30 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2019 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . fml . network ; <nl> - <nl> - import io . netty . util . AttributeKey ; <nl> - import org . apache . logging . log4j . Marker ; <nl> - import org . apache . logging . log4j . MarkerManager ; <nl> - <nl> - public class FMLNetworking <nl> - { <nl> - static final Marker NETWORK = MarkerManager . getMarker ( " FMLNETWORK " ) ; <nl> - static final AttributeKey < String > FML _ MARKER = AttributeKey . valueOf ( " fml : marker " ) ; <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java <nl> index 5125c76 . . 052f03e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ public class FMLPlayHandler <nl> . named ( new ResourceLocation ( " fml " , " play " ) ) <nl> . clientAcceptedVersions ( a - > true ) <nl> . serverAcceptedVersions ( a - > true ) <nl> - . networkProtocolVersion ( ( ) - > NetworkHooks . NETVERSION ) <nl> + . networkProtocolVersion ( ( ) - > FMLNetworkConstants . NETVERSION ) <nl> . simpleChannel ( ) ; <nl> static <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> index 630add7 . . f76e9e8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> @ @ - 44 , 22 + 44 , 15 @ @ import java . util . function . Supplier ; <nl> public class NetworkHooks <nl> { <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> - public static final String NETVERSION = " FML1 " ; <nl> - public static final String NOVERSION = " NONE " ; <nl> <nl> public static String getFMLVersion ( final String ip ) <nl> { <nl> - return ip . contains ( " \ 0 " ) ? Objects . equals ( ip . split ( " \ 0 " ) [ 1 ] , NETVERSION ) ? NETVERSION : ip . split ( " \ 0 " ) [ 1 ] : NOVERSION ; <nl> - } <nl> - <nl> - public static boolean accepts ( final CPacketHandshake packet ) <nl> - { <nl> - return Objects . equals ( packet . getFMLVersion ( ) , NETVERSION ) | | NetworkRegistry . acceptsVanillaClientConnections ( ) ; <nl> + return ip . contains ( " \ 0 " ) ? Objects . equals ( ip . split ( " \ 0 " ) [ 1 ] , FMLNetworkConstants . NETVERSION ) ? FMLNetworkConstants . NETVERSION : ip . split ( " \ 0 " ) [ 1 ] : FMLNetworkConstants . NOVERSION ; <nl> } <nl> <nl> public static ConnectionType getConnectionType ( final Supplier < NetworkManager > connection ) <nl> { <nl> - return ConnectionType . forVersionFlag ( connection . get ( ) . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . get ( ) ) ; <nl> + return ConnectionType . forVersionFlag ( connection . get ( ) . channel ( ) . attr ( FMLNetworkConstants . FML _ MARKER ) . get ( ) ) ; <nl> } <nl> <nl> public static Packet < ? > getEntitySpawningPacket ( Entity entity ) <nl> @ @ - 78 , 14 + 71 , 14 @ @ public class NetworkHooks <nl> <nl> public static void registerServerLoginChannel ( NetworkManager manager , CPacketHandshake packet ) <nl> { <nl> - manager . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( packet . getFMLVersion ( ) ) ; <nl> + manager . channel ( ) . attr ( FMLNetworkConstants . FML _ MARKER ) . set ( packet . getFMLVersion ( ) ) ; <nl> FMLHandshakeHandler . registerHandshake ( manager , NetworkDirection . LOGIN _ TO _ CLIENT ) ; <nl> } <nl> <nl> public static void registerClientLoginChannel ( NetworkManager manager ) <nl> { <nl> if ( manager = = null | | manager . channel ( ) = = null ) return ; <nl> - manager . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( NOVERSION ) ; <nl> + manager . channel ( ) . attr ( FMLNetworkConstants . FML _ MARKER ) . set ( FMLNetworkConstants . NOVERSION ) ; <nl> FMLHandshakeHandler . registerHandshake ( manager , NetworkDirection . LOGIN _ TO _ SERVER ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> index e06a6a9 . . 1ec2699 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> @ @ - 68 , 7 + 68 , 7 @ @ public class NetworkRegistry <nl> return listRejectedVanillaMods ( NetworkInstance : : tryClientVersionOnServer ) ; <nl> } <nl> <nl> - static boolean acceptsVanillaClientConnections ( ) { <nl> + public static boolean acceptsVanillaClientConnections ( ) { <nl> return instances . isEmpty ( ) | | getNonVanillaNetworkMods ( ) . isEmpty ( ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> index 0a0bbd3 . . b621efa 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> @ @ - 37 , 7 + 37 , 10 @ @ import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; <nl> import net . minecraftforge . fml . loading . FileUtils ; <nl> + import net . minecraftforge . fml . network . ConnectionType ; <nl> + import net . minecraftforge . fml . network . FMLNetworkConstants ; <nl> import net . minecraftforge . fml . network . NetworkHooks ; <nl> + import net . minecraftforge . fml . network . NetworkRegistry ; <nl> import net . minecraftforge . fml . packs . ResourcePackLoader ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> @ @ - 120 , 15 + 123 , 19 @ @ public class ServerLifecycleHooks <nl> return false ; <nl> } <nl> <nl> - if ( packet . getRequestedState ( ) = = EnumConnectionState . LOGIN & & ! NetworkHooks . accepts ( packet ) ) <nl> - { <nl> - manager . setConnectionState ( EnumConnectionState . LOGIN ) ; <nl> - TextComponentString text = new TextComponentString ( " This server has mods that require Forge to be installed on the client . Contact your server admin for more details . " ) ; <nl> - List < String > modNames = net . minecraftforge . fml . network . NetworkRegistry . getNonVanillaNetworkMods ( ) ; <nl> - LOGGER . info ( SERVERHOOKS , " Disconnecting vanilla connection attempt . Required mods { } " , modNames ) ; <nl> - manager . sendPacket ( new SPacketDisconnectLogin ( text ) ) ; <nl> - manager . closeChannel ( text ) ; <nl> - return false ; <nl> + if ( packet . getRequestedState ( ) = = EnumConnectionState . LOGIN ) { <nl> + final ConnectionType connectionType = ConnectionType . forVersionFlag ( packet . getFMLVersion ( ) ) ; <nl> + final int versionNumber = connectionType . getFMLVersionNumber ( packet . getFMLVersion ( ) ) ; <nl> + <nl> + if ( connectionType = = ConnectionType . MODDED & & versionNumber ! = FMLNetworkConstants . FMLNETVERSION ) { <nl> + rejectConnection ( manager , connectionType , " This modded server is not network compatible with your modded client . Please verify your Forge version closely matches the server . Got net version " + versionNumber + " this server is net version " + FMLNetworkConstants . FMLNETVERSION ) ; <nl> + return false ; <nl> + } <nl> + <nl> + if ( connectionType = = ConnectionType . VANILLA & & ! NetworkRegistry . acceptsVanillaClientConnections ( ) ) { <nl> + rejectConnection ( manager , connectionType , " This server has mods that require Forge to be installed on the client . Contact your server admin for more details . " ) ; <nl> + return false ; <nl> + } <nl> } <nl> <nl> if ( packet . getRequestedState ( ) = = EnumConnectionState . STATUS ) return true ; <nl> @ @ - 138 , 6 + 145 , 14 @ @ public class ServerLifecycleHooks <nl> <nl> } <nl> <nl> + private static void rejectConnection ( final NetworkManager manager , ConnectionType type , String message ) { <nl> + manager . setConnectionState ( EnumConnectionState . LOGIN ) ; <nl> + LOGGER . info ( SERVERHOOKS , " Disconnecting { } connection attempt : " , type , message ) ; <nl> + TextComponentString text = new TextComponentString ( message ) ; <nl> + manager . sendPacket ( new SPacketDisconnectLogin ( text ) ) ; <nl> + manager . closeChannel ( text ) ; <nl> + } <nl> + <nl> public static void handleExit ( int retVal ) <nl> { <nl> / *
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfig . java b / src / main / java / net / minecraftforge / common / ForgeConfig . java <nl> index 5e58eab . . 6f632ee 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeConfig . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeConfig . java <nl> @ @ - 22 , 8 + 22 , 6 @ @ package net . minecraftforge . common ; <nl> import static net . minecraftforge . fml . Logging . CORE ; <nl> import static net . minecraftforge . fml . loading . LogMarkers . FORGEMOD ; <nl> <nl> - import com . electronwill . nightconfig . core . CommentedConfig ; <nl> - import com . google . common . collect . Lists ; <nl> import net . minecraftforge . eventbus . api . SubscribeEvent ; <nl> import net . minecraftforge . fml . config . ModConfig ; <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> @ @ - 33 , 9 + 31 , 6 @ @ import net . minecraftforge . common . ForgeConfigSpec . BooleanValue ; <nl> import net . minecraftforge . common . ForgeConfigSpec . DoubleValue ; <nl> import net . minecraftforge . common . ForgeConfigSpec . IntValue ; <nl> <nl> - import javax . annotation . Nullable ; <nl> - import java . util . List ; <nl> - <nl> public class ForgeConfig <nl> { <nl> public static class Server { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> index ab6cc4c . . cadfc27 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> @ @ - 32 , 13 + 32 , 10 @ @ import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; <nl> import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; <nl> - import net . minecraftforge . fml . loading . FMLPaths ; <nl> import net . minecraftforge . server . command . ForgeCommand ; <nl> import net . minecraftforge . versions . forge . ForgeVersion ; <nl> import net . minecraftforge . versions . mcp . MCPVersion ; <nl> <nl> - import java . nio . file . Path ; <nl> - <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> @ @ - 55 , 9 + 52 , 6 @ @ import net . minecraftforge . fml . common . gameevent . PlayerEvent ; <nl> import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> - import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> - import com . electronwill . nightconfig . core . io . WritingMode ; <nl> - <nl> @ Mod ( " forge " ) <nl> public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> index 1b9d087 . . 22dd276 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> @ @ - 133 , 6 + 133 , 7 @ @ public class ModLoader <nl> CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; <nl> GameData . fireRegistryEvents ( rl - > true , LifecycleEventProvider . LOAD _ REGISTRIES , this : : dispatchAndHandleError ) ; <nl> DistExecutor . runWhenOn ( Dist . CLIENT , ( ) - > ( ) - > ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . CLIENT , FMLPaths . CONFIGDIR . get ( ) ) ) ; <nl> + ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . COMMON , FMLPaths . CONFIGDIR . get ( ) ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . SETUP ) ; <nl> DistExecutor . runWhenOn ( Dist . CLIENT , ModLoader : : fireClientEvents ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . SIDED _ SETUP ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> index bbe2688 . . 47d0186 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> + + + b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> @ @ - 20 , 18 + 20 , 31 @ @ <nl> package net . minecraftforge . fml . config ; <nl> <nl> import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> + import com . electronwill . nightconfig . toml . TomlFormat ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraftforge . fml . network . FMLHandshakeMessages ; <nl> + import net . minecraftforge . fml . network . NetworkEvent ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . util . Collections ; <nl> import java . util . EnumMap ; <nl> import java . util . LinkedHashSet ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Optional ; <nl> import java . util . Set ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> - import java . util . concurrent . ConcurrentSkipListSet ; <nl> + import java . util . function . Supplier ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . rethrowFunction ; <nl> <nl> public class ConfigTracker { <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> @ @ - 44 , 6 + 57 , 7 @ @ public class ConfigTracker { <nl> this . fileMap = new ConcurrentHashMap < > ( ) ; <nl> this . configSets = new EnumMap < > ( ModConfig . Type . class ) ; <nl> this . configSets . put ( ModConfig . Type . CLIENT , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; <nl> + this . configSets . put ( ModConfig . Type . COMMON , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; <nl> / / this . configSets . put ( ModConfig . Type . PLAYER , new ConcurrentSkipListSet < > ( ) ) ; <nl> this . configSets . put ( ModConfig . Type . SERVER , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; <nl> } <nl> @ @ - 63 , 11 + 77 , 25 @ @ public class ConfigTracker { <nl> this . configSets . get ( type ) . forEach ( config - > openConfig ( config , configBasePath ) ) ; <nl> } <nl> <nl> + public List < Pair < String , FMLHandshakeMessages . S2CConfigData > > syncConfigs ( ) { <nl> + final Map < String , byte [ ] > configData = configSets . get ( ModConfig . Type . SERVER ) . stream ( ) . collect ( Collectors . toMap ( ModConfig : : getFileName , rethrowFunction ( mc - > Files . readAllBytes ( mc . getFullPath ( ) ) ) ) ) ; <nl> + return configData . entrySet ( ) . stream ( ) . map ( e - > Pair . of ( " Config " + e . getKey ( ) , new FMLHandshakeMessages . S2CConfigData ( e . getKey ( ) , e . getValue ( ) ) ) ) . collect ( Collectors . toList ( ) ) ; <nl> + } <nl> + <nl> private void openConfig ( final ModConfig config , final Path configBasePath ) { <nl> LOGGER . debug ( CONFIG , " Loading config file type { } at { } for { } " , config . getType ( ) , config . getFileName ( ) , config . getModId ( ) ) ; <nl> final CommentedFileConfig configData = config . getHandler ( ) . reader ( configBasePath ) . apply ( config ) ; <nl> config . setConfigData ( configData ) ; <nl> config . fireEvent ( new ModConfig . Loading ( config ) ) ; <nl> - config . getConfigData ( ) . save ( ) ; <nl> + config . save ( ) ; <nl> + } <nl> + <nl> + public void receiveSyncedConfig ( final FMLHandshakeMessages . S2CConfigData s2CConfigData , final Supplier < NetworkEvent . Context > contextSupplier ) { <nl> + if ( ! Minecraft . getInstance ( ) . isIntegratedServerRunning ( ) ) { <nl> + Optional . ofNullable ( fileMap . get ( s2CConfigData . getFileName ( ) ) ) . ifPresent ( mc - > { <nl> + mc . setConfigData ( TomlFormat . instance ( ) . createParser ( ) . parse ( new ByteArrayInputStream ( s2CConfigData . getBytes ( ) ) ) ) ; <nl> + mc . fireEvent ( new ModConfig . ConfigReloading ( mc ) ) ; <nl> + } ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / config / ModConfig . java b / src / main / java / net / minecraftforge / fml / config / ModConfig . java <nl> index 3c4ef9e . . 2e90cdd 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / config / ModConfig . java <nl> + + + b / src / main / java / net / minecraftforge / fml / config / ModConfig . java <nl> @ @ - 19 , 12 + 19 , 19 @ @ <nl> <nl> package net . minecraftforge . fml . config ; <nl> <nl> + import com . electronwill . nightconfig . core . CommentedConfig ; <nl> import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> import net . minecraftforge . common . ForgeConfigSpec ; <nl> import net . minecraftforge . eventbus . api . Event ; <nl> import net . minecraftforge . fml . ModContainer ; <nl> import net . minecraftforge . fml . loading . StringUtils ; <nl> <nl> + import java . nio . file . Path ; <nl> + import java . util . concurrent . Callable ; <nl> + import java . util . function . Consumer ; <nl> + <nl> + import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . uncheck ; <nl> + <nl> public class ModConfig <nl> { <nl> private final Type type ; <nl> @ @ - 32 , 7 + 39 , 8 @ @ public class ModConfig <nl> private final String fileName ; <nl> private final ModContainer container ; <nl> private final ConfigFileTypeHandler configHandler ; <nl> - private CommentedFileConfig configData ; <nl> + private CommentedConfig configData ; <nl> + private Callable < Void > saveHandler ; <nl> <nl> public ModConfig ( final Type type , final ForgeConfigSpec spec , final ModContainer container , final String fileName ) { <nl> this . type = type ; <nl> @ @ - 71 , 11 + 79 , 11 @ @ public class ModConfig <nl> return container . getModId ( ) ; <nl> } <nl> <nl> - public CommentedFileConfig getConfigData ( ) { <nl> + public CommentedConfig getConfigData ( ) { <nl> return this . configData ; <nl> } <nl> <nl> - void setConfigData ( final CommentedFileConfig configData ) { <nl> + void setConfigData ( final CommentedConfig configData ) { <nl> this . configData = configData ; <nl> this . spec . setConfig ( this . configData ) ; <nl> } <nl> @ @ - 84 , 6 + 92 , 14 @ @ public class ModConfig <nl> this . container . dispatchConfigEvent ( configEvent ) ; <nl> } <nl> <nl> + public void save ( ) { <nl> + ( ( CommentedFileConfig ) this . configData ) . save ( ) ; <nl> + } <nl> + <nl> + public Path getFullPath ( ) { <nl> + return ( ( CommentedFileConfig ) this . configData ) . getNioPath ( ) ; <nl> + } <nl> + <nl> public enum Type { <nl> / * * <nl> * Common mod config for configuration that needs to be loaded on both environments . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> index 1e13149 . . 0c39926 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . network . NetHandlerLoginServer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . text . TextComponentString ; <nl> + import net . minecraftforge . fml . config . ConfigTracker ; <nl> import net . minecraftforge . fml . network . simple . SimpleChannel ; <nl> import net . minecraftforge . fml . util . ThreeConsumer ; <nl> import net . minecraftforge . registries . RegistryManager ; <nl> @ @ - 108 , 6 + 109 , 13 @ @ public class FMLHandshakeHandler { <nl> buildLoginPacketList ( RegistryManager : : generateRegistryPackets ) . <nl> consumer ( biConsumerFor ( FMLHandshakeHandler : : handleRegistryMessage ) ) . <nl> add ( ) ; <nl> + channel . messageBuilder ( FMLHandshakeMessages . S2CConfigData . class , 4 ) . <nl> + loginIndex ( FMLHandshakeMessages . LoginIndexedMessage : : getLoginIndex , FMLHandshakeMessages . LoginIndexedMessage : : setLoginIndex ) . <nl> + decoder ( FMLHandshakeMessages . S2CConfigData : : decode ) . <nl> + encoder ( FMLHandshakeMessages . S2CConfigData : : encode ) . <nl> + buildLoginPacketList ( ConfigTracker . INSTANCE : : syncConfigs ) . <nl> + consumer ( biConsumerFor ( FMLHandshakeHandler : : handleConfigSync ) ) . <nl> + add ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 172 , 7 + 180 , 7 @ @ public class FMLHandshakeHandler { <nl> { <nl> this . direction = side ; <nl> this . manager = networkManager ; <nl> - this . messageList = NetworkRegistry . gatherLoginPayloads ( ) ; <nl> + this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction ) ; <nl> LOGGER . debug ( FMLHSMARKER , " Starting new modded network connection . Found { } messages to dispatch . " , this . messageList . size ( ) ) ; <nl> } <nl> <nl> @ @ - 224 , 6 + 232 , 13 @ @ public class FMLHandshakeHandler { <nl> contextSupplier . get ( ) . setPacketHandled ( true ) ; <nl> } <nl> <nl> + private void handleConfigSync ( final FMLHandshakeMessages . S2CConfigData msg , final Supplier < NetworkEvent . Context > contextSupplier ) { <nl> + LOGGER . debug ( FMLHSMARKER , " Received config sync from server " ) ; <nl> + ConfigTracker . INSTANCE . receiveSyncedConfig ( msg , contextSupplier ) ; <nl> + contextSupplier . get ( ) . setPacketHandled ( true ) ; <nl> + final FMLHandshakeMessages . C2SAcknowledge reply = new FMLHandshakeMessages . C2SAcknowledge ( ) ; <nl> + channel . reply ( reply , contextSupplier . get ( ) ) ; <nl> + } <nl> / * * <nl> * FML will send packets , from Server to Client , from the messages queue until the queue is drained . Each message <nl> * will be indexed , and placed into the " pending acknowledgement " queue . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java <nl> index af851aa . . 1c944b5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java <nl> @ @ - 119 , 7 + 119 , 6 @ @ public class FMLHandshakeMessages <nl> } <nl> <nl> public static class S2CRegistry extends LoginIndexedMessage { <nl> - <nl> public S2CRegistry ( final ResourceLocation key , final ForgeRegistry < ? extends IForgeRegistryEntry < ? > > registry ) { <nl> } <nl> <nl> @ @ - 133 , 4 + 132 , 32 @ @ public class FMLHandshakeMessages <nl> return new S2CRegistry ( ) ; <nl> } <nl> } <nl> + <nl> + <nl> + public static class S2CConfigData extends LoginIndexedMessage { <nl> + private final String fileName ; <nl> + private final byte [ ] fileData ; <nl> + <nl> + public S2CConfigData ( final String configFileName , final byte [ ] configFileData ) { <nl> + this . fileName = configFileName ; <nl> + this . fileData = configFileData ; <nl> + } <nl> + <nl> + void encode ( final PacketBuffer buffer ) { <nl> + buffer . writeString ( this . fileName ) ; <nl> + buffer . writeByteArray ( this . fileData ) ; <nl> + } <nl> + <nl> + public static S2CConfigData decode ( final PacketBuffer buffer ) { <nl> + return new S2CConfigData ( buffer . readString ( 128 ) , buffer . readByteArray ( ) ) ; <nl> + } <nl> + <nl> + public String getFileName ( ) { <nl> + return fileName ; <nl> + } <nl> + <nl> + public byte [ ] getBytes ( ) { <nl> + return fileData ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java <nl> index 9d8769d . . 539cb43 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java <nl> @ @ - 20 , 15 + 20 , 11 @ @ <nl> package net . minecraftforge . fml . network ; <nl> <nl> import io . netty . util . AttributeKey ; <nl> - import net . minecraft . network . NetworkManager ; <nl> - import org . apache . logging . log4j . LogManager ; <nl> - import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> public class FMLNetworking <nl> { <nl> - private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> static final Marker NETWORK = MarkerManager . getMarker ( " FMLNETWORK " ) ; <nl> static final AttributeKey < String > FML _ MARKER = AttributeKey . valueOf ( " fml : marker " ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> index bc6685e . . b854727 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> @ @ - 79 , 6 + 79 , 7 @ @ public class NetworkHooks <nl> <nl> public static void registerClientLoginChannel ( NetworkManager manager ) <nl> { <nl> + if ( manager = = null ) return ; <nl> manager . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( NETVERSION ) ; <nl> FMLHandshakeHandler . registerHandshake ( manager , NetworkDirection . LOGIN _ TO _ SERVER ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> index 41a60c4 . . 3210503 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 204 , 8 + 205 , 10 @ @ public class NetworkRegistry <nl> * Dispatches { @ link net . minecraftforge . fml . network . NetworkEvent . GatherLoginPayloadsEvent } to each { @ link NetworkInstance } . <nl> * <nl> * @ return The { @ link LoginPayload } list <nl> + * @ param direction the network direction for the request - only gathers for LOGIN _ TO _ CLIENT <nl> * / <nl> - static List < LoginPayload > gatherLoginPayloads ( ) { <nl> + static List < LoginPayload > gatherLoginPayloads ( final NetworkDirection direction ) { <nl> + if ( direction ! = NetworkDirection . LOGIN _ TO _ CLIENT ) return Collections . emptyList ( ) ; <nl> List < LoginPayload > gatheredPayloads = new ArrayList < > ( ) ; <nl> instances . values ( ) . forEach ( ni - > ni . dispatchGatherLogin ( gatheredPayloads ) ) ; <nl> return gatheredPayloads ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> index 021c001 . . 0a0bbd3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; <nl> - import net . minecraftforge . fml . loading . FMLPaths ; <nl> import net . minecraftforge . fml . loading . FileUtils ; <nl> import net . minecraftforge . fml . network . NetworkHooks ; <nl> import net . minecraftforge . fml . packs . ResourcePackLoader ; <nl> @ @ - 46 , 7 + 45 , 6 @ @ import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> import java . nio . file . Path ; <nl> - import java . nio . file . Paths ; <nl> import java . util . List ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> @ @ - 133 , 6 + 131 , 8 @ @ public class ServerLifecycleHooks <nl> return false ; <nl> } <nl> <nl> + if ( packet . getRequestedState ( ) = = EnumConnectionState . STATUS ) return true ; <nl> + <nl> NetworkHooks . registerServerLoginChannel ( manager , packet ) ; <nl> return true ; <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / network / ConnectionType . java b / src / main / java / net / minecraftforge / fml / network / ConnectionType . java 
 index ee209e6 . . c437908 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / ConnectionType . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / ConnectionType . java 
 @ @ - 19 , 23 + 19 , 23 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 - import java . util . Arrays ; 
 - import java . util . Objects ; 
 + import java . util . function . Function ; 
 
 public enum ConnectionType 
 { 
 - MODDED ( NetworkHooks . NETVERSION ) , VANILLA ( NetworkHooks . NOVERSION ) ; 
 + MODDED ( s - > Integer . valueOf ( s . substring ( FMLNetworkConstants . FMLNETMARKER . length ( ) ) ) ) , VANILLA ( s - > 0 ) ; 
 
 - private final String versionString ; 
 + private final Function < String , Integer > versionExtractor ; 
 
 - ConnectionType ( String versionString ) 
 - { 
 - this . versionString = versionString ; 
 + ConnectionType ( Function < String , Integer > versionExtractor ) { 
 + this . versionExtractor = versionExtractor ; 
 } 
 - 
 public static ConnectionType forVersionFlag ( String vers ) 
 { 
 - return Arrays . stream ( values ( ) ) . filter ( ct - > Objects . equals ( ct . versionString , vers ) ) . 
 - findFirst ( ) . orElse ( ConnectionType . VANILLA ) ; 
 + return vers . startsWith ( FMLNetworkConstants . FMLNETMARKER ) ? MODDED : VANILLA ; 
 + } 
 + 
 + public int getFMLVersionNumber ( final String fmlVersion ) { 
 + return versionExtractor . apply ( fmlVersion ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 index 249cc0b . . a5456fe 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 @ @ - 72 , 7 + 72 , 7 @ @ import static net . minecraftforge . registries . ForgeRegistry . REGISTRIES ; 
 * final login phase will commence . 
 * / 
 public class FMLHandshakeHandler { 
 - static final Marker FMLHSMARKER = MarkerManager . getMarker ( " FMLHANDSHAKE " ) . setParents ( FMLNetworking . NETWORK ) ; 
 + static final Marker FMLHSMARKER = MarkerManager . getMarker ( " FMLHANDSHAKE " ) . setParents ( FMLNetworkConstants . NETWORK ) ; 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 static final ResourceLocation FML _ HANDSHAKE _ RESOURCE = new ResourceLocation ( " fml : handshake " ) ; 
 private static final AttributeKey < FMLHandshakeHandler > FML _ HANDSHAKE _ HANDLER _ ATTRIBUTE _ KEY = AttributeKey . newInstance ( " fml : handshake " ) ; 
 @ @ - 83 , 7 + 83 , 7 @ @ public class FMLHandshakeHandler { 
 channel = NetworkRegistry . ChannelBuilder . named ( FML _ HANDSHAKE _ RESOURCE ) . 
 clientAcceptedVersions ( a - > true ) . 
 serverAcceptedVersions ( a - > true ) . 
 - networkProtocolVersion ( ( ) - > NetworkHooks . NETVERSION ) . 
 + networkProtocolVersion ( ( ) - > FMLNetworkConstants . NETVERSION ) . 
 simpleChannel ( ) ; 
 channel . messageBuilder ( FMLHandshakeMessages . C2SAcknowledge . class , 99 ) . 
 loginIndex ( FMLHandshakeMessages . LoginIndexedMessage : : getLoginIndex , FMLHandshakeMessages . LoginIndexedMessage : : setLoginIndex ) . 
 @ @ - 208 , 7 + 208 , 7 @ @ public class FMLHandshakeHandler { 
 channel . reply ( reply , c . get ( ) ) ; 
 LOGGER . debug ( FMLHSMARKER , " Accepted server connection " ) ; 
 / / Set the modded marker on the channel so we know we got packets 
 - c . get ( ) . getNetworkManager ( ) . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( NetworkHooks . NETVERSION ) ; 
 + c . get ( ) . getNetworkManager ( ) . channel ( ) . attr ( FMLNetworkConstants . FML _ MARKER ) . set ( FMLNetworkConstants . NETVERSION ) ; 
 this . registriesToReceive = new HashSet < > ( serverModList . getRegistries ( ) ) ; 
 LOGGER . debug ( REGISTRIES , " Expecting { } registries : { } " , ( ) - > this . registriesToReceive . size ( ) , ( ) - > this . registriesToReceive ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLLoginWrapper . java b / src / main / java / net / minecraftforge / fml / network / FMLLoginWrapper . java 
 index 4f868b3 . . d282839 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLLoginWrapper . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLLoginWrapper . java 
 @ @ - 41 , 7 + 41 , 7 @ @ public class FMLLoginWrapper { 
 wrapperChannel = NetworkRegistry . ChannelBuilder . named ( FMLLoginWrapper . WRAPPER ) . 
 clientAcceptedVersions ( a - > true ) . 
 serverAcceptedVersions ( a - > true ) . 
 - networkProtocolVersion ( ( ) - > NetworkHooks . NETVERSION ) 
 + networkProtocolVersion ( ( ) - > FMLNetworkConstants . NETVERSION ) 
 . eventNetworkChannel ( ) ; 
 wrapperChannel . addListener ( this : : wrapperReceived ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java 
 new file mode 100644 
 index 0000000 . . e1ccc1c 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2019 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . network ; 
 + 
 + import io . netty . util . AttributeKey ; 
 + import org . apache . logging . log4j . Marker ; 
 + import org . apache . logging . log4j . MarkerManager ; 
 + 
 + / * * 
 + * Constants related to networking 
 + * / 
 + public class FMLNetworkConstants 
 + { 
 + public static final String FMLNETMARKER = " FML " ; 
 + public static final int FMLNETVERSION = 1 ; 
 + public static final String NETVERSION = FMLNETMARKER + FMLNETVERSION ; 
 + public static final String NOVERSION = " NONE " ; 
 + static final Marker NETWORK = MarkerManager . getMarker ( " FMLNETWORK " ) ; 
 + static final AttributeKey < String > FML _ MARKER = AttributeKey . valueOf ( " fml : marker " ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java 
 deleted file mode 100644 
 index 539cb43 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java 
 + + + / dev / null 
 @ @ - 1 , 30 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2019 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . fml . network ; 
 - 
 - import io . netty . util . AttributeKey ; 
 - import org . apache . logging . log4j . Marker ; 
 - import org . apache . logging . log4j . MarkerManager ; 
 - 
 - public class FMLNetworking 
 - { 
 - static final Marker NETWORK = MarkerManager . getMarker ( " FMLNETWORK " ) ; 
 - static final AttributeKey < String > FML _ MARKER = AttributeKey . valueOf ( " fml : marker " ) ; 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java 
 index 5125c76 . . 052f03e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java 
 @ @ - 28 , 7 + 28 , 7 @ @ public class FMLPlayHandler 
 . named ( new ResourceLocation ( " fml " , " play " ) ) 
 . clientAcceptedVersions ( a - > true ) 
 . serverAcceptedVersions ( a - > true ) 
 - . networkProtocolVersion ( ( ) - > NetworkHooks . NETVERSION ) 
 + . networkProtocolVersion ( ( ) - > FMLNetworkConstants . NETVERSION ) 
 . simpleChannel ( ) ; 
 static 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 index 630add7 . . f76e9e8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 @ @ - 44 , 22 + 44 , 15 @ @ import java . util . function . Supplier ; 
 public class NetworkHooks 
 { 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 - public static final String NETVERSION = " FML1 " ; 
 - public static final String NOVERSION = " NONE " ; 
 
 public static String getFMLVersion ( final String ip ) 
 { 
 - return ip . contains ( " \ 0 " ) ? Objects . equals ( ip . split ( " \ 0 " ) [ 1 ] , NETVERSION ) ? NETVERSION : ip . split ( " \ 0 " ) [ 1 ] : NOVERSION ; 
 - } 
 - 
 - public static boolean accepts ( final CPacketHandshake packet ) 
 - { 
 - return Objects . equals ( packet . getFMLVersion ( ) , NETVERSION ) | | NetworkRegistry . acceptsVanillaClientConnections ( ) ; 
 + return ip . contains ( " \ 0 " ) ? Objects . equals ( ip . split ( " \ 0 " ) [ 1 ] , FMLNetworkConstants . NETVERSION ) ? FMLNetworkConstants . NETVERSION : ip . split ( " \ 0 " ) [ 1 ] : FMLNetworkConstants . NOVERSION ; 
 } 
 
 public static ConnectionType getConnectionType ( final Supplier < NetworkManager > connection ) 
 { 
 - return ConnectionType . forVersionFlag ( connection . get ( ) . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . get ( ) ) ; 
 + return ConnectionType . forVersionFlag ( connection . get ( ) . channel ( ) . attr ( FMLNetworkConstants . FML _ MARKER ) . get ( ) ) ; 
 } 
 
 public static Packet < ? > getEntitySpawningPacket ( Entity entity ) 
 @ @ - 78 , 14 + 71 , 14 @ @ public class NetworkHooks 
 
 public static void registerServerLoginChannel ( NetworkManager manager , CPacketHandshake packet ) 
 { 
 - manager . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( packet . getFMLVersion ( ) ) ; 
 + manager . channel ( ) . attr ( FMLNetworkConstants . FML _ MARKER ) . set ( packet . getFMLVersion ( ) ) ; 
 FMLHandshakeHandler . registerHandshake ( manager , NetworkDirection . LOGIN _ TO _ CLIENT ) ; 
 } 
 
 public static void registerClientLoginChannel ( NetworkManager manager ) 
 { 
 if ( manager = = null | | manager . channel ( ) = = null ) return ; 
 - manager . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( NOVERSION ) ; 
 + manager . channel ( ) . attr ( FMLNetworkConstants . FML _ MARKER ) . set ( FMLNetworkConstants . NOVERSION ) ; 
 FMLHandshakeHandler . registerHandshake ( manager , NetworkDirection . LOGIN _ TO _ SERVER ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 index e06a6a9 . . 1ec2699 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 @ @ - 68 , 7 + 68 , 7 @ @ public class NetworkRegistry 
 return listRejectedVanillaMods ( NetworkInstance : : tryClientVersionOnServer ) ; 
 } 
 
 - static boolean acceptsVanillaClientConnections ( ) { 
 + public static boolean acceptsVanillaClientConnections ( ) { 
 return instances . isEmpty ( ) | | getNonVanillaNetworkMods ( ) . isEmpty ( ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 index 0a0bbd3 . . b621efa 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 @ @ - 37 , 7 + 37 , 10 @ @ import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; 
 import net . minecraftforge . fml . loading . FileUtils ; 
 + import net . minecraftforge . fml . network . ConnectionType ; 
 + import net . minecraftforge . fml . network . FMLNetworkConstants ; 
 import net . minecraftforge . fml . network . NetworkHooks ; 
 + import net . minecraftforge . fml . network . NetworkRegistry ; 
 import net . minecraftforge . fml . packs . ResourcePackLoader ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 @ @ - 120 , 15 + 123 , 19 @ @ public class ServerLifecycleHooks 
 return false ; 
 } 
 
 - if ( packet . getRequestedState ( ) = = EnumConnectionState . LOGIN & & ! NetworkHooks . accepts ( packet ) ) 
 - { 
 - manager . setConnectionState ( EnumConnectionState . LOGIN ) ; 
 - TextComponentString text = new TextComponentString ( " This server has mods that require Forge to be installed on the client . Contact your server admin for more details . " ) ; 
 - List < String > modNames = net . minecraftforge . fml . network . NetworkRegistry . getNonVanillaNetworkMods ( ) ; 
 - LOGGER . info ( SERVERHOOKS , " Disconnecting vanilla connection attempt . Required mods { } " , modNames ) ; 
 - manager . sendPacket ( new SPacketDisconnectLogin ( text ) ) ; 
 - manager . closeChannel ( text ) ; 
 - return false ; 
 + if ( packet . getRequestedState ( ) = = EnumConnectionState . LOGIN ) { 
 + final ConnectionType connectionType = ConnectionType . forVersionFlag ( packet . getFMLVersion ( ) ) ; 
 + final int versionNumber = connectionType . getFMLVersionNumber ( packet . getFMLVersion ( ) ) ; 
 + 
 + if ( connectionType = = ConnectionType . MODDED & & versionNumber ! = FMLNetworkConstants . FMLNETVERSION ) { 
 + rejectConnection ( manager , connectionType , " This modded server is not network compatible with your modded client . Please verify your Forge version closely matches the server . Got net version " + versionNumber + " this server is net version " + FMLNetworkConstants . FMLNETVERSION ) ; 
 + return false ; 
 + } 
 + 
 + if ( connectionType = = ConnectionType . VANILLA & & ! NetworkRegistry . acceptsVanillaClientConnections ( ) ) { 
 + rejectConnection ( manager , connectionType , " This server has mods that require Forge to be installed on the client . Contact your server admin for more details . " ) ; 
 + return false ; 
 + } 
 } 
 
 if ( packet . getRequestedState ( ) = = EnumConnectionState . STATUS ) return true ; 
 @ @ - 138 , 6 + 145 , 14 @ @ public class ServerLifecycleHooks 
 
 } 
 
 + private static void rejectConnection ( final NetworkManager manager , ConnectionType type , String message ) { 
 + manager . setConnectionState ( EnumConnectionState . LOGIN ) ; 
 + LOGGER . info ( SERVERHOOKS , " Disconnecting { } connection attempt : " , type , message ) ; 
 + TextComponentString text = new TextComponentString ( message ) ; 
 + manager . sendPacket ( new SPacketDisconnectLogin ( text ) ) ; 
 + manager . closeChannel ( text ) ; 
 + } 
 + 
 public static void handleExit ( int retVal ) 
 { 
 / *

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfig . java b / src / main / java / net / minecraftforge / common / ForgeConfig . java 
 index 5e58eab . . 6f632ee 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeConfig . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeConfig . java 
 @ @ - 22 , 8 + 22 , 6 @ @ package net . minecraftforge . common ; 
 import static net . minecraftforge . fml . Logging . CORE ; 
 import static net . minecraftforge . fml . loading . LogMarkers . FORGEMOD ; 
 
 - import com . electronwill . nightconfig . core . CommentedConfig ; 
 - import com . google . common . collect . Lists ; 
 import net . minecraftforge . eventbus . api . SubscribeEvent ; 
 import net . minecraftforge . fml . config . ModConfig ; 
 import org . apache . commons . lang3 . tuple . Pair ; 
 @ @ - 33 , 9 + 31 , 6 @ @ import net . minecraftforge . common . ForgeConfigSpec . BooleanValue ; 
 import net . minecraftforge . common . ForgeConfigSpec . DoubleValue ; 
 import net . minecraftforge . common . ForgeConfigSpec . IntValue ; 
 
 - import javax . annotation . Nullable ; 
 - import java . util . List ; 
 - 
 public class ForgeConfig 
 { 
 public static class Server { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 index ab6cc4c . . cadfc27 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 @ @ - 32 , 13 + 32 , 10 @ @ import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; 
 import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; 
 - import net . minecraftforge . fml . loading . FMLPaths ; 
 import net . minecraftforge . server . command . ForgeCommand ; 
 import net . minecraftforge . versions . forge . ForgeVersion ; 
 import net . minecraftforge . versions . mcp . MCPVersion ; 
 
 - import java . nio . file . Path ; 
 - 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 @ @ - 55 , 9 + 52 , 6 @ @ import net . minecraftforge . fml . common . gameevent . PlayerEvent ; 
 import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 - import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 - import com . electronwill . nightconfig . core . io . WritingMode ; 
 - 
 @ Mod ( " forge " ) 
 public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 index 1b9d087 . . 22dd276 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 @ @ - 133 , 6 + 133 , 7 @ @ public class ModLoader 
 CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; 
 GameData . fireRegistryEvents ( rl - > true , LifecycleEventProvider . LOAD _ REGISTRIES , this : : dispatchAndHandleError ) ; 
 DistExecutor . runWhenOn ( Dist . CLIENT , ( ) - > ( ) - > ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . CLIENT , FMLPaths . CONFIGDIR . get ( ) ) ) ; 
 + ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . COMMON , FMLPaths . CONFIGDIR . get ( ) ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . SETUP ) ; 
 DistExecutor . runWhenOn ( Dist . CLIENT , ModLoader : : fireClientEvents ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . SIDED _ SETUP ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 index bbe2688 . . 47d0186 100644 
 - - - a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 + + + b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 @ @ - 20 , 18 + 20 , 31 @ @ 
 package net . minecraftforge . fml . config ; 
 
 import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 + import com . electronwill . nightconfig . toml . TomlFormat ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraftforge . fml . network . FMLHandshakeMessages ; 
 + import net . minecraftforge . fml . network . NetworkEvent ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 + import java . io . ByteArrayInputStream ; 
 + import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . util . Collections ; 
 import java . util . EnumMap ; 
 import java . util . LinkedHashSet ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Optional ; 
 import java . util . Set ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 - import java . util . concurrent . ConcurrentSkipListSet ; 
 + import java . util . function . Supplier ; 
 + import java . util . stream . Collectors ; 
 + 
 + import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . rethrowFunction ; 
 
 public class ConfigTracker { 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 @ @ - 44 , 6 + 57 , 7 @ @ public class ConfigTracker { 
 this . fileMap = new ConcurrentHashMap < > ( ) ; 
 this . configSets = new EnumMap < > ( ModConfig . Type . class ) ; 
 this . configSets . put ( ModConfig . Type . CLIENT , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; 
 + this . configSets . put ( ModConfig . Type . COMMON , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; 
 / / this . configSets . put ( ModConfig . Type . PLAYER , new ConcurrentSkipListSet < > ( ) ) ; 
 this . configSets . put ( ModConfig . Type . SERVER , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; 
 } 
 @ @ - 63 , 11 + 77 , 25 @ @ public class ConfigTracker { 
 this . configSets . get ( type ) . forEach ( config - > openConfig ( config , configBasePath ) ) ; 
 } 
 
 + public List < Pair < String , FMLHandshakeMessages . S2CConfigData > > syncConfigs ( ) { 
 + final Map < String , byte [ ] > configData = configSets . get ( ModConfig . Type . SERVER ) . stream ( ) . collect ( Collectors . toMap ( ModConfig : : getFileName , rethrowFunction ( mc - > Files . readAllBytes ( mc . getFullPath ( ) ) ) ) ) ; 
 + return configData . entrySet ( ) . stream ( ) . map ( e - > Pair . of ( " Config " + e . getKey ( ) , new FMLHandshakeMessages . S2CConfigData ( e . getKey ( ) , e . getValue ( ) ) ) ) . collect ( Collectors . toList ( ) ) ; 
 + } 
 + 
 private void openConfig ( final ModConfig config , final Path configBasePath ) { 
 LOGGER . debug ( CONFIG , " Loading config file type { } at { } for { } " , config . getType ( ) , config . getFileName ( ) , config . getModId ( ) ) ; 
 final CommentedFileConfig configData = config . getHandler ( ) . reader ( configBasePath ) . apply ( config ) ; 
 config . setConfigData ( configData ) ; 
 config . fireEvent ( new ModConfig . Loading ( config ) ) ; 
 - config . getConfigData ( ) . save ( ) ; 
 + config . save ( ) ; 
 + } 
 + 
 + public void receiveSyncedConfig ( final FMLHandshakeMessages . S2CConfigData s2CConfigData , final Supplier < NetworkEvent . Context > contextSupplier ) { 
 + if ( ! Minecraft . getInstance ( ) . isIntegratedServerRunning ( ) ) { 
 + Optional . ofNullable ( fileMap . get ( s2CConfigData . getFileName ( ) ) ) . ifPresent ( mc - > { 
 + mc . setConfigData ( TomlFormat . instance ( ) . createParser ( ) . parse ( new ByteArrayInputStream ( s2CConfigData . getBytes ( ) ) ) ) ; 
 + mc . fireEvent ( new ModConfig . ConfigReloading ( mc ) ) ; 
 + } ) ; 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / config / ModConfig . java b / src / main / java / net / minecraftforge / fml / config / ModConfig . java 
 index 3c4ef9e . . 2e90cdd 100644 
 - - - a / src / main / java / net / minecraftforge / fml / config / ModConfig . java 
 + + + b / src / main / java / net / minecraftforge / fml / config / ModConfig . java 
 @ @ - 19 , 12 + 19 , 19 @ @ 
 
 package net . minecraftforge . fml . config ; 
 
 + import com . electronwill . nightconfig . core . CommentedConfig ; 
 import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 import net . minecraftforge . common . ForgeConfigSpec ; 
 import net . minecraftforge . eventbus . api . Event ; 
 import net . minecraftforge . fml . ModContainer ; 
 import net . minecraftforge . fml . loading . StringUtils ; 
 
 + import java . nio . file . Path ; 
 + import java . util . concurrent . Callable ; 
 + import java . util . function . Consumer ; 
 + 
 + import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . uncheck ; 
 + 
 public class ModConfig 
 { 
 private final Type type ; 
 @ @ - 32 , 7 + 39 , 8 @ @ public class ModConfig 
 private final String fileName ; 
 private final ModContainer container ; 
 private final ConfigFileTypeHandler configHandler ; 
 - private CommentedFileConfig configData ; 
 + private CommentedConfig configData ; 
 + private Callable < Void > saveHandler ; 
 
 public ModConfig ( final Type type , final ForgeConfigSpec spec , final ModContainer container , final String fileName ) { 
 this . type = type ; 
 @ @ - 71 , 11 + 79 , 11 @ @ public class ModConfig 
 return container . getModId ( ) ; 
 } 
 
 - public CommentedFileConfig getConfigData ( ) { 
 + public CommentedConfig getConfigData ( ) { 
 return this . configData ; 
 } 
 
 - void setConfigData ( final CommentedFileConfig configData ) { 
 + void setConfigData ( final CommentedConfig configData ) { 
 this . configData = configData ; 
 this . spec . setConfig ( this . configData ) ; 
 } 
 @ @ - 84 , 6 + 92 , 14 @ @ public class ModConfig 
 this . container . dispatchConfigEvent ( configEvent ) ; 
 } 
 
 + public void save ( ) { 
 + ( ( CommentedFileConfig ) this . configData ) . save ( ) ; 
 + } 
 + 
 + public Path getFullPath ( ) { 
 + return ( ( CommentedFileConfig ) this . configData ) . getNioPath ( ) ; 
 + } 
 + 
 public enum Type { 
 / * * 
 * Common mod config for configuration that needs to be loaded on both environments . 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 index 1e13149 . . 0c39926 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . network . NetHandlerLoginServer ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . text . TextComponentString ; 
 + import net . minecraftforge . fml . config . ConfigTracker ; 
 import net . minecraftforge . fml . network . simple . SimpleChannel ; 
 import net . minecraftforge . fml . util . ThreeConsumer ; 
 import net . minecraftforge . registries . RegistryManager ; 
 @ @ - 108 , 6 + 109 , 13 @ @ public class FMLHandshakeHandler { 
 buildLoginPacketList ( RegistryManager : : generateRegistryPackets ) . 
 consumer ( biConsumerFor ( FMLHandshakeHandler : : handleRegistryMessage ) ) . 
 add ( ) ; 
 + channel . messageBuilder ( FMLHandshakeMessages . S2CConfigData . class , 4 ) . 
 + loginIndex ( FMLHandshakeMessages . LoginIndexedMessage : : getLoginIndex , FMLHandshakeMessages . LoginIndexedMessage : : setLoginIndex ) . 
 + decoder ( FMLHandshakeMessages . S2CConfigData : : decode ) . 
 + encoder ( FMLHandshakeMessages . S2CConfigData : : encode ) . 
 + buildLoginPacketList ( ConfigTracker . INSTANCE : : syncConfigs ) . 
 + consumer ( biConsumerFor ( FMLHandshakeHandler : : handleConfigSync ) ) . 
 + add ( ) ; 
 } 
 
 / * * 
 @ @ - 172 , 7 + 180 , 7 @ @ public class FMLHandshakeHandler { 
 { 
 this . direction = side ; 
 this . manager = networkManager ; 
 - this . messageList = NetworkRegistry . gatherLoginPayloads ( ) ; 
 + this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction ) ; 
 LOGGER . debug ( FMLHSMARKER , " Starting new modded network connection . Found { } messages to dispatch . " , this . messageList . size ( ) ) ; 
 } 
 
 @ @ - 224 , 6 + 232 , 13 @ @ public class FMLHandshakeHandler { 
 contextSupplier . get ( ) . setPacketHandled ( true ) ; 
 } 
 
 + private void handleConfigSync ( final FMLHandshakeMessages . S2CConfigData msg , final Supplier < NetworkEvent . Context > contextSupplier ) { 
 + LOGGER . debug ( FMLHSMARKER , " Received config sync from server " ) ; 
 + ConfigTracker . INSTANCE . receiveSyncedConfig ( msg , contextSupplier ) ; 
 + contextSupplier . get ( ) . setPacketHandled ( true ) ; 
 + final FMLHandshakeMessages . C2SAcknowledge reply = new FMLHandshakeMessages . C2SAcknowledge ( ) ; 
 + channel . reply ( reply , contextSupplier . get ( ) ) ; 
 + } 
 / * * 
 * FML will send packets , from Server to Client , from the messages queue until the queue is drained . Each message 
 * will be indexed , and placed into the " pending acknowledgement " queue . 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java 
 index af851aa . . 1c944b5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java 
 @ @ - 119 , 7 + 119 , 6 @ @ public class FMLHandshakeMessages 
 } 
 
 public static class S2CRegistry extends LoginIndexedMessage { 
 - 
 public S2CRegistry ( final ResourceLocation key , final ForgeRegistry < ? extends IForgeRegistryEntry < ? > > registry ) { 
 } 
 
 @ @ - 133 , 4 + 132 , 32 @ @ public class FMLHandshakeMessages 
 return new S2CRegistry ( ) ; 
 } 
 } 
 + 
 + 
 + public static class S2CConfigData extends LoginIndexedMessage { 
 + private final String fileName ; 
 + private final byte [ ] fileData ; 
 + 
 + public S2CConfigData ( final String configFileName , final byte [ ] configFileData ) { 
 + this . fileName = configFileName ; 
 + this . fileData = configFileData ; 
 + } 
 + 
 + void encode ( final PacketBuffer buffer ) { 
 + buffer . writeString ( this . fileName ) ; 
 + buffer . writeByteArray ( this . fileData ) ; 
 + } 
 + 
 + public static S2CConfigData decode ( final PacketBuffer buffer ) { 
 + return new S2CConfigData ( buffer . readString ( 128 ) , buffer . readByteArray ( ) ) ; 
 + } 
 + 
 + public String getFileName ( ) { 
 + return fileName ; 
 + } 
 + 
 + public byte [ ] getBytes ( ) { 
 + return fileData ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java 
 index 9d8769d . . 539cb43 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java 
 @ @ - 20 , 15 + 20 , 11 @ @ 
 package net . minecraftforge . fml . network ; 
 
 import io . netty . util . AttributeKey ; 
 - import net . minecraft . network . NetworkManager ; 
 - import org . apache . logging . log4j . LogManager ; 
 - import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 public class FMLNetworking 
 { 
 - private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 static final Marker NETWORK = MarkerManager . getMarker ( " FMLNETWORK " ) ; 
 static final AttributeKey < String > FML _ MARKER = AttributeKey . valueOf ( " fml : marker " ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 index bc6685e . . b854727 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 @ @ - 79 , 6 + 79 , 7 @ @ public class NetworkHooks 
 
 public static void registerClientLoginChannel ( NetworkManager manager ) 
 { 
 + if ( manager = = null ) return ; 
 manager . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( NETVERSION ) ; 
 FMLHandshakeHandler . registerHandshake ( manager , NetworkDirection . LOGIN _ TO _ SERVER ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 index 41a60c4 . . 3210503 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 204 , 8 + 205 , 10 @ @ public class NetworkRegistry 
 * Dispatches { @ link net . minecraftforge . fml . network . NetworkEvent . GatherLoginPayloadsEvent } to each { @ link NetworkInstance } . 
 * 
 * @ return The { @ link LoginPayload } list 
 + * @ param direction the network direction for the request - only gathers for LOGIN _ TO _ CLIENT 
 * / 
 - static List < LoginPayload > gatherLoginPayloads ( ) { 
 + static List < LoginPayload > gatherLoginPayloads ( final NetworkDirection direction ) { 
 + if ( direction ! = NetworkDirection . LOGIN _ TO _ CLIENT ) return Collections . emptyList ( ) ; 
 List < LoginPayload > gatheredPayloads = new ArrayList < > ( ) ; 
 instances . values ( ) . forEach ( ni - > ni . dispatchGatherLogin ( gatheredPayloads ) ) ; 
 return gatheredPayloads ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 index 021c001 . . 0a0bbd3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 @ @ - 36 , 7 + 36 , 6 @ @ import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; 
 - import net . minecraftforge . fml . loading . FMLPaths ; 
 import net . minecraftforge . fml . loading . FileUtils ; 
 import net . minecraftforge . fml . network . NetworkHooks ; 
 import net . minecraftforge . fml . packs . ResourcePackLoader ; 
 @ @ - 46 , 7 + 45 , 6 @ @ import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 import java . nio . file . Path ; 
 - import java . nio . file . Paths ; 
 import java . util . List ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 @ @ - 133 , 6 + 131 , 8 @ @ public class ServerLifecycleHooks 
 return false ; 
 } 
 
 + if ( packet . getRequestedState ( ) = = EnumConnectionState . STATUS ) return true ; 
 + 
 NetworkHooks . registerServerLoginChannel ( manager , packet ) ; 
 return true ; 

