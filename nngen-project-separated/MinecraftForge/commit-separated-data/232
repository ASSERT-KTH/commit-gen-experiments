BLEU SCORE: 0.024367494694068095

TEST MSG: Check name prefix used for tile entity registrations
GENERATED MSG: Slight tweak to early loading , to accommodate FMP

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> index dcf20ee . . 6028091 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> @ @ - 226 , 11 + 226 , 19 @ @ public class GameRegistry <nl> FurnaceRecipes . instance ( ) . addSmeltingRecipe ( input , output , xp ) ; <nl> } <nl> <nl> + @ Deprecated / / TODO : Remove in 1 . 13 , Use ResourceLocation version . <nl> public static void registerTileEntity ( Class < ? extends TileEntity > tileEntityClass , String key ) <nl> { <nl> + / / As return is ignored for compatibility , always check namespace <nl> + GameData . checkPrefix ( new ResourceLocation ( key ) . toString ( ) ) ; <nl> TileEntity . register ( key , tileEntityClass ) ; <nl> } <nl> <nl> + public static void registerTileEntity ( Class < ? extends TileEntity > tileEntityClass , ResourceLocation key ) <nl> + { <nl> + registerTileEntity ( tileEntityClass , key . toString ( ) ) ; <nl> + } <nl> + <nl> / * * <nl> * @ deprecated set your item ' s { @ link Item # getItemBurnTime ( ItemStack ) } or subscribe to { @ link FurnaceFuelBurnTimeEvent } instead . <nl> * / <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 51e8472 . . e9d7de8 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 51 , 8 + 51 , 11 @ @ import net . minecraftforge . event . RegistryEvent ; <nl> import net . minecraftforge . event . RegistryEvent . MissingMappings ; <nl> import net . minecraftforge . fml . common . EnhancedRuntimeException ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . fml . common . FMLContainer ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . InjectedModContainer ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . StartupQuery ; <nl> import net . minecraftforge . fml . common . ZipperUtil ; <nl> import net . minecraftforge . fml . common . registry . EntityEntry ; <nl> @ @ - 69 , 6 + 72 , 7 @ @ import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . LinkedHashMap ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . function . BiConsumer ; <nl> import java . util . function . Predicate ; <nl> @ @ - 756 , 6 + 760 , 21 @ @ public class GameData <nl> * / <nl> } <nl> <nl> + public static ResourceLocation checkPrefix ( String name ) <nl> + { <nl> + int index = name . lastIndexOf ( ' : ' ) ; <nl> + String oldPrefix = index = = - 1 ? " " : name . substring ( 0 , index ) . toLowerCase ( Locale . ROOT ) ; <nl> + name = index = = - 1 ? name : name . substring ( index + 1 ) ; <nl> + ModContainer mc = Loader . instance ( ) . activeModContainer ( ) ; <nl> + String prefix = mc = = null | | ( mc instanceof InjectedModContainer & & ( ( InjectedModContainer ) mc ) . wrappedContainer instanceof FMLContainer ) ? " minecraft " : mc . getModId ( ) . toLowerCase ( Locale . ROOT ) ; <nl> + if ( ! oldPrefix . equals ( prefix ) & & oldPrefix . length ( ) > 0 ) <nl> + { <nl> + FMLLog . log . warn ( " Potentially Dangerous alternative prefix ` { } ` for name ` { } ` , expected ` { } ` . This could be a intended override , but in most cases indicates a broken mod . " , oldPrefix , name , prefix ) ; <nl> + prefix = oldPrefix ; <nl> + } <nl> + return new ResourceLocation ( prefix , name ) ; <nl> + } <nl> + <nl> private static Field regName ; <nl> private static void forceRegistryName ( IForgeRegistryEntry < ? > entry , ResourceLocation name ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / registries / IForgeRegistryEntry . java b / src / main / java / net / minecraftforge / registries / IForgeRegistryEntry . java <nl> index 6e7063d . . 8781747 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / IForgeRegistryEntry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / IForgeRegistryEntry . java <nl> @ @ - 22 , 11 + 22 , 6 @ @ package net . minecraftforge . registries ; <nl> import com . google . common . reflect . TypeToken ; <nl> <nl> import net . minecraft . util . ResourceLocation ; <nl> - import net . minecraftforge . fml . common . FMLContainer ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> - import net . minecraftforge . fml . common . InjectedModContainer ; <nl> - import net . minecraftforge . fml . common . Loader ; <nl> - import net . minecraftforge . fml . common . ModContainer ; <nl> <nl> import javax . annotation . Nullable ; <nl> <nl> @ @ - 75 , 17 + 70 , 7 @ @ public interface IForgeRegistryEntry < V > <nl> if ( getRegistryName ( ) ! = null ) <nl> throw new IllegalStateException ( " Attempted to set registry name with existing registry name ! New : " + name + " Old : " + getRegistryName ( ) ) ; <nl> <nl> - int index = name . lastIndexOf ( ' : ' ) ; <nl> - String oldPrefix = index = = - 1 ? " " : name . substring ( 0 , index ) . toLowerCase ( ) ; <nl> - name = index = = - 1 ? name : name . substring ( index + 1 ) ; <nl> - ModContainer mc = Loader . instance ( ) . activeModContainer ( ) ; <nl> - String prefix = mc = = null | | ( mc instanceof InjectedModContainer & & ( ( InjectedModContainer ) mc ) . wrappedContainer instanceof FMLContainer ) ? " minecraft " : mc . getModId ( ) . toLowerCase ( ) ; <nl> - if ( ! oldPrefix . equals ( prefix ) & & oldPrefix . length ( ) > 0 ) <nl> - { <nl> - FMLLog . log . info ( " Potentially Dangerous alternative prefix ` { } ` for name ` { } ` , expected ` { } ` . This could be a intended override , but in most cases indicates a broken mod . " , oldPrefix , name , prefix ) ; <nl> - prefix = oldPrefix ; <nl> - } <nl> - this . registryName = new ResourceLocation ( prefix , name ) ; <nl> + this . registryName = GameData . checkPrefix ( name ) ; <nl> return ( T ) this ; <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / client / rendering / FastTESRTransparentTest . java b / src / test / java / net / minecraftforge / debug / client / rendering / FastTESRTransparentTest . java <nl> index 1dbd148 . . 1fcaa44 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / client / rendering / FastTESRTransparentTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / client / rendering / FastTESRTransparentTest . java <nl> @ @ - 251 , 7 + 251 , 7 @ @ public class FastTESRTransparentTest <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent evt ) <nl> { <nl> - GameRegistry . registerTileEntity ( TransparentFastTE . class , " fast - tesr - te " ) ; <nl> + GameRegistry . registerTileEntity ( TransparentFastTE . class , MODID + " : fast - tesr - te " ) ; <nl> } <nl> <nl> @ EventBusSubscriber ( value = Side . CLIENT , modid = MODID )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 1afaf1c . . a072127 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 204 , 10 + 204 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> return ; <nl> } <nl> <nl> - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> + List < String > injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> try <nl> { <nl> - Loader . instance ( ) . loadMods ( ) ; <nl> + Loader . instance ( ) . loadMods ( injectedModContainers ) ; <nl> } <nl> catch ( WrongMinecraftVersionException wrong ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index f135488 . . 7e181d8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 140 , 11 + 140 , 12 @ @ public class FMLCommonHandler <nl> return eventBus ; <nl> } <nl> <nl> - public void beginLoading ( IFMLSidedHandler handler ) <nl> + public List < String > beginLoading ( IFMLSidedHandler handler ) <nl> { <nl> sidedDelegate = handler ; <nl> MinecraftForge . initialize ( ) ; <nl> / / MinecraftForge . registerCrashCallable ( ) ; <nl> + return ImmutableList . < String > of ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 0e60836 . . e2771f3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 26 , 14 + 26 , 11 @ @ import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> - import net . minecraft . crash . CrashReport ; <nl> - import net . minecraft . crash . ICrashReportDetail ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> import net . minecraftforge . fml . common . ModContainer . Disableable ; <nl> import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; <nl> - import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; <nl> import net . minecraftforge . fml . common . discovery . ModDiscoverer ; <nl> import net . minecraftforge . fml . common . event . FMLInterModComms ; <nl> import net . minecraftforge . fml . common . event . FMLLoadEvent ; <nl> @ @ - 338 , 8 + 335 , 9 @ @ public class Loader <nl> * Finally , if they are successfully loaded as classes , they are then added <nl> * to the available mod list . <nl> * / <nl> - private ModDiscoverer identifyMods ( ) <nl> + private ModDiscoverer identifyMods ( List < String > additionalContainers ) <nl> { <nl> + injectedContainers . addAll ( additionalContainers ) ; <nl> FMLLog . fine ( " Building injected Mod Containers % s " , injectedContainers ) ; <nl> / / Add in the MCP mod container <nl> mods . add ( new InjectedModContainer ( mcp , new File ( " minecraft . jar " ) ) ) ; <nl> @ @ - 487 , 8 + 485 , 9 @ @ public class Loader <nl> * Called from the hook to start mod loading . We trigger the <nl> * { @ link # identifyMods ( ) } and Constructing , Preinitalization , and Initalization phases here . Finally , <nl> * the mod list is frozen completely and is consider immutable from then on . <nl> + * @ param injectedModContainers <nl> * / <nl> - public void loadMods ( ) <nl> + public void loadMods ( List < String > injectedModContainers ) <nl> { <nl> progressBar = ProgressManager . push ( " Loading " , 7 ) ; <nl> progressBar . step ( " Constructing Mods " ) ; <nl> @ @ - 497 , 7 + 496 , 7 @ @ public class Loader <nl> namedMods = Maps . newHashMap ( ) ; <nl> modController = new LoadController ( this ) ; <nl> modController . transition ( LoaderState . LOADING , false ) ; <nl> - discoverer = identifyMods ( ) ; <nl> + discoverer = identifyMods ( injectedModContainers ) ; <nl> ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; <nl> disableRequestedMods ( ) ; <nl> modController . distributeStateMessage ( FMLLoadEvent . class ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index 7d82c64 . . d292218 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 13 , 7 + 13 , 6 @ @ <nl> package net . minecraftforge . fml . server ; <nl> <nl> import java . io . * ; <nl> - import java . util . Enumeration ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> @ @ - 74 , 22 + 73 , 22 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> * A reference to the server itself <nl> * / <nl> private MinecraftServer server ; <nl> - <nl> + private List < String > injectedModContainers ; <nl> private FMLServerHandler ( ) <nl> { <nl> - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> + injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> } <nl> / * * <nl> * Called to start the whole game off from <nl> * { @ link MinecraftServer # startServer } <nl> * <nl> - * @ param minecraftServer <nl> + * @ param minecraftServer server <nl> * / <nl> @ Override <nl> public void beginServerLoading ( MinecraftServer minecraftServer ) <nl> { <nl> server = minecraftServer ; <nl> - Loader . instance ( ) . loadMods ( ) ; <nl> + Loader . instance ( ) . loadMods ( injectedModContainers ) ; <nl> Loader . instance ( ) . preinitializeMods ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 index dcf20ee . . 6028091 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 @ @ - 226 , 11 + 226 , 19 @ @ public class GameRegistry 
 FurnaceRecipes . instance ( ) . addSmeltingRecipe ( input , output , xp ) ; 
 } 
 
 + @ Deprecated / / TODO : Remove in 1 . 13 , Use ResourceLocation version . 
 public static void registerTileEntity ( Class < ? extends TileEntity > tileEntityClass , String key ) 
 { 
 + / / As return is ignored for compatibility , always check namespace 
 + GameData . checkPrefix ( new ResourceLocation ( key ) . toString ( ) ) ; 
 TileEntity . register ( key , tileEntityClass ) ; 
 } 
 
 + public static void registerTileEntity ( Class < ? extends TileEntity > tileEntityClass , ResourceLocation key ) 
 + { 
 + registerTileEntity ( tileEntityClass , key . toString ( ) ) ; 
 + } 
 + 
 / * * 
 * @ deprecated set your item ' s { @ link Item # getItemBurnTime ( ItemStack ) } or subscribe to { @ link FurnaceFuelBurnTimeEvent } instead . 
 * / 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 51e8472 . . e9d7de8 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 51 , 8 + 51 , 11 @ @ import net . minecraftforge . event . RegistryEvent ; 
 import net . minecraftforge . event . RegistryEvent . MissingMappings ; 
 import net . minecraftforge . fml . common . EnhancedRuntimeException ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . fml . common . FMLContainer ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . InjectedModContainer ; 
 import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . StartupQuery ; 
 import net . minecraftforge . fml . common . ZipperUtil ; 
 import net . minecraftforge . fml . common . registry . EntityEntry ; 
 @ @ - 69 , 6 + 72 , 7 @ @ import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . LinkedHashMap ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . function . BiConsumer ; 
 import java . util . function . Predicate ; 
 @ @ - 756 , 6 + 760 , 21 @ @ public class GameData 
 * / 
 } 
 
 + public static ResourceLocation checkPrefix ( String name ) 
 + { 
 + int index = name . lastIndexOf ( ' : ' ) ; 
 + String oldPrefix = index = = - 1 ? " " : name . substring ( 0 , index ) . toLowerCase ( Locale . ROOT ) ; 
 + name = index = = - 1 ? name : name . substring ( index + 1 ) ; 
 + ModContainer mc = Loader . instance ( ) . activeModContainer ( ) ; 
 + String prefix = mc = = null | | ( mc instanceof InjectedModContainer & & ( ( InjectedModContainer ) mc ) . wrappedContainer instanceof FMLContainer ) ? " minecraft " : mc . getModId ( ) . toLowerCase ( Locale . ROOT ) ; 
 + if ( ! oldPrefix . equals ( prefix ) & & oldPrefix . length ( ) > 0 ) 
 + { 
 + FMLLog . log . warn ( " Potentially Dangerous alternative prefix ` { } ` for name ` { } ` , expected ` { } ` . This could be a intended override , but in most cases indicates a broken mod . " , oldPrefix , name , prefix ) ; 
 + prefix = oldPrefix ; 
 + } 
 + return new ResourceLocation ( prefix , name ) ; 
 + } 
 + 
 private static Field regName ; 
 private static void forceRegistryName ( IForgeRegistryEntry < ? > entry , ResourceLocation name ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / registries / IForgeRegistryEntry . java b / src / main / java / net / minecraftforge / registries / IForgeRegistryEntry . java 
 index 6e7063d . . 8781747 100644 
 - - - a / src / main / java / net / minecraftforge / registries / IForgeRegistryEntry . java 
 + + + b / src / main / java / net / minecraftforge / registries / IForgeRegistryEntry . java 
 @ @ - 22 , 11 + 22 , 6 @ @ package net . minecraftforge . registries ; 
 import com . google . common . reflect . TypeToken ; 
 
 import net . minecraft . util . ResourceLocation ; 
 - import net . minecraftforge . fml . common . FMLContainer ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 - import net . minecraftforge . fml . common . InjectedModContainer ; 
 - import net . minecraftforge . fml . common . Loader ; 
 - import net . minecraftforge . fml . common . ModContainer ; 
 
 import javax . annotation . Nullable ; 
 
 @ @ - 75 , 17 + 70 , 7 @ @ public interface IForgeRegistryEntry < V > 
 if ( getRegistryName ( ) ! = null ) 
 throw new IllegalStateException ( " Attempted to set registry name with existing registry name ! New : " + name + " Old : " + getRegistryName ( ) ) ; 
 
 - int index = name . lastIndexOf ( ' : ' ) ; 
 - String oldPrefix = index = = - 1 ? " " : name . substring ( 0 , index ) . toLowerCase ( ) ; 
 - name = index = = - 1 ? name : name . substring ( index + 1 ) ; 
 - ModContainer mc = Loader . instance ( ) . activeModContainer ( ) ; 
 - String prefix = mc = = null | | ( mc instanceof InjectedModContainer & & ( ( InjectedModContainer ) mc ) . wrappedContainer instanceof FMLContainer ) ? " minecraft " : mc . getModId ( ) . toLowerCase ( ) ; 
 - if ( ! oldPrefix . equals ( prefix ) & & oldPrefix . length ( ) > 0 ) 
 - { 
 - FMLLog . log . info ( " Potentially Dangerous alternative prefix ` { } ` for name ` { } ` , expected ` { } ` . This could be a intended override , but in most cases indicates a broken mod . " , oldPrefix , name , prefix ) ; 
 - prefix = oldPrefix ; 
 - } 
 - this . registryName = new ResourceLocation ( prefix , name ) ; 
 + this . registryName = GameData . checkPrefix ( name ) ; 
 return ( T ) this ; 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / client / rendering / FastTESRTransparentTest . java b / src / test / java / net / minecraftforge / debug / client / rendering / FastTESRTransparentTest . java 
 index 1dbd148 . . 1fcaa44 100644 
 - - - a / src / test / java / net / minecraftforge / debug / client / rendering / FastTESRTransparentTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / client / rendering / FastTESRTransparentTest . java 
 @ @ - 251 , 7 + 251 , 7 @ @ public class FastTESRTransparentTest 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent evt ) 
 { 
 - GameRegistry . registerTileEntity ( TransparentFastTE . class , " fast - tesr - te " ) ; 
 + GameRegistry . registerTileEntity ( TransparentFastTE . class , MODID + " : fast - tesr - te " ) ; 
 } 
 
 @ EventBusSubscriber ( value = Side . CLIENT , modid = MODID )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 1afaf1c . . a072127 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 204 , 10 + 204 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 return ; 
 } 
 
 - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 + List < String > injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 try 
 { 
 - Loader . instance ( ) . loadMods ( ) ; 
 + Loader . instance ( ) . loadMods ( injectedModContainers ) ; 
 } 
 catch ( WrongMinecraftVersionException wrong ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index f135488 . . 7e181d8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 140 , 11 + 140 , 12 @ @ public class FMLCommonHandler 
 return eventBus ; 
 } 
 
 - public void beginLoading ( IFMLSidedHandler handler ) 
 + public List < String > beginLoading ( IFMLSidedHandler handler ) 
 { 
 sidedDelegate = handler ; 
 MinecraftForge . initialize ( ) ; 
 / / MinecraftForge . registerCrashCallable ( ) ; 
 + return ImmutableList . < String > of ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 0e60836 . . e2771f3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 26 , 14 + 26 , 11 @ @ import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 
 - import net . minecraft . crash . CrashReport ; 
 - import net . minecraft . crash . ICrashReportDetail ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . common . capabilities . CapabilityManager ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 import net . minecraftforge . fml . common . ModContainer . Disableable ; 
 import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; 
 - import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; 
 import net . minecraftforge . fml . common . discovery . ModDiscoverer ; 
 import net . minecraftforge . fml . common . event . FMLInterModComms ; 
 import net . minecraftforge . fml . common . event . FMLLoadEvent ; 
 @ @ - 338 , 8 + 335 , 9 @ @ public class Loader 
 * Finally , if they are successfully loaded as classes , they are then added 
 * to the available mod list . 
 * / 
 - private ModDiscoverer identifyMods ( ) 
 + private ModDiscoverer identifyMods ( List < String > additionalContainers ) 
 { 
 + injectedContainers . addAll ( additionalContainers ) ; 
 FMLLog . fine ( " Building injected Mod Containers % s " , injectedContainers ) ; 
 / / Add in the MCP mod container 
 mods . add ( new InjectedModContainer ( mcp , new File ( " minecraft . jar " ) ) ) ; 
 @ @ - 487 , 8 + 485 , 9 @ @ public class Loader 
 * Called from the hook to start mod loading . We trigger the 
 * { @ link # identifyMods ( ) } and Constructing , Preinitalization , and Initalization phases here . Finally , 
 * the mod list is frozen completely and is consider immutable from then on . 
 + * @ param injectedModContainers 
 * / 
 - public void loadMods ( ) 
 + public void loadMods ( List < String > injectedModContainers ) 
 { 
 progressBar = ProgressManager . push ( " Loading " , 7 ) ; 
 progressBar . step ( " Constructing Mods " ) ; 
 @ @ - 497 , 7 + 496 , 7 @ @ public class Loader 
 namedMods = Maps . newHashMap ( ) ; 
 modController = new LoadController ( this ) ; 
 modController . transition ( LoaderState . LOADING , false ) ; 
 - discoverer = identifyMods ( ) ; 
 + discoverer = identifyMods ( injectedModContainers ) ; 
 ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; 
 disableRequestedMods ( ) ; 
 modController . distributeStateMessage ( FMLLoadEvent . class ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index 7d82c64 . . d292218 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 13 , 7 + 13 , 6 @ @ 
 package net . minecraftforge . fml . server ; 
 
 import java . io . * ; 
 - import java . util . Enumeration ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Set ; 
 @ @ - 74 , 22 + 73 , 22 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 * A reference to the server itself 
 * / 
 private MinecraftServer server ; 
 - 
 + private List < String > injectedModContainers ; 
 private FMLServerHandler ( ) 
 { 
 - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 + injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 } 
 / * * 
 * Called to start the whole game off from 
 * { @ link MinecraftServer # startServer } 
 * 
 - * @ param minecraftServer 
 + * @ param minecraftServer server 
 * / 
 @ Override 
 public void beginServerLoading ( MinecraftServer minecraftServer ) 
 { 
 server = minecraftServer ; 
 - Loader . instance ( ) . loadMods ( ) ; 
 + Loader . instance ( ) . loadMods ( injectedModContainers ) ; 
 Loader . instance ( ) . preinitializeMods ( ) ; 
 } 

