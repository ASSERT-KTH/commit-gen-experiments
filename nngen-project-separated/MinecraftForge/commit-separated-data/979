BLEU SCORE: 0.029381754016308166

TEST MSG: Fix faulty Channel name
GENERATED MSG: Propagate Optional method removal to trait implementation classes

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java <nl> index 66ed284 . . 3251d9d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java <nl> @ @ - 141 , 7 + 141 , 7 @ @ public enum NetworkRegistry <nl> * / <nl> public EnumMap < Side , FMLEmbeddedChannel > newChannel ( String name , ChannelHandler . . . handlers ) <nl> { <nl> - if ( channels . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | name . startsWith ( " FML " ) ) <nl> + if ( channels . get ( Side . CLIENT ) . containsKey ( name ) | | channels . get ( Side . SERVER ) . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | name . startsWith ( " FML " ) ) <nl> { <nl> throw new RuntimeException ( " That channel is already registered " ) ; <nl> } <nl> @ @ - 187 , 7 + 187 , 7 @ @ public enum NetworkRegistry <nl> * / <nl> public EnumMap < Side , FMLEmbeddedChannel > newChannel ( ModContainer container , String name , ChannelHandler . . . handlers ) <nl> { <nl> - if ( channels . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | ( name . startsWith ( " FML " ) & & ! ( " FML " . equals ( container . getModId ( ) ) ) ) ) <nl> + if ( channels . get ( Side . CLIENT ) . containsKey ( name ) | | channels . get ( Side . SERVER ) . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | ( name . startsWith ( " FML " ) & & ! ( " FML " . equals ( container . getModId ( ) ) ) ) ) <nl> { <nl> throw new RuntimeException ( " That channel is already registered " ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAPITransformer . java b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAPITransformer . java <nl> index 7fdff20 . . 4f01d0c 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAPITransformer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAPITransformer . java <nl> @ @ - 31 , 7 + 31 , 12 @ @ public class ModAPITransformer implements IClassTransformer { <nl> @ Override <nl> public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) <nl> { <nl> - if ( optionals = = null | | ! optionals . containsKey ( name ) ) <nl> + String lookupName = name ; <nl> + if ( name . endsWith ( " $ class " ) ) <nl> + { <nl> + lookupName = name . substring ( 0 , name . length ( ) - 6 ) ; <nl> + } <nl> + if ( optionals = = null | | ! optionals . containsKey ( lookupName ) ) <nl> { <nl> return basicClass ; <nl> } <nl> @ @ - 40 , 7 + 45 , 7 @ @ public class ModAPITransformer implements IClassTransformer { <nl> classReader . accept ( classNode , 0 ) ; <nl> <nl> if ( logDebugInfo ) FMLRelaunchLog . finer ( " Optional removal - found optionals for class % s - processing " , name ) ; <nl> - for ( ASMData optional : optionals . get ( name ) ) <nl> + for ( ASMData optional : optionals . get ( lookupName ) ) <nl> { <nl> String modId = ( String ) optional . getAnnotationInfo ( ) . get ( " modid " ) ; <nl> <nl> @ @ - 72 , 6 + 77 , 12 @ @ public class ModAPITransformer implements IClassTransformer { <nl> <nl> private void stripMethod ( ClassNode classNode , String methodDescriptor ) <nl> { <nl> + if ( classNode . name . endsWith ( " $ class " ) ) <nl> + { <nl> + String subName = classNode . name . substring ( 0 , classNode . name . length ( ) - 6 ) ; <nl> + int pos = methodDescriptor . indexOf ( ' ( ' ) + 1 ; <nl> + methodDescriptor = methodDescriptor . substring ( 0 , pos ) + ' L ' + subName + ' ; ' + methodDescriptor . substring ( pos ) ; <nl> + } <nl> for ( ListIterator < MethodNode > iterator = classNode . methods . listIterator ( ) ; iterator . hasNext ( ) ; ) <nl> { <nl> MethodNode method = iterator . next ( ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java 
 index 66ed284 . . 3251d9d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java 
 @ @ - 141 , 7 + 141 , 7 @ @ public enum NetworkRegistry 
 * / 
 public EnumMap < Side , FMLEmbeddedChannel > newChannel ( String name , ChannelHandler . . . handlers ) 
 { 
 - if ( channels . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | name . startsWith ( " FML " ) ) 
 + if ( channels . get ( Side . CLIENT ) . containsKey ( name ) | | channels . get ( Side . SERVER ) . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | name . startsWith ( " FML " ) ) 
 { 
 throw new RuntimeException ( " That channel is already registered " ) ; 
 } 
 @ @ - 187 , 7 + 187 , 7 @ @ public enum NetworkRegistry 
 * / 
 public EnumMap < Side , FMLEmbeddedChannel > newChannel ( ModContainer container , String name , ChannelHandler . . . handlers ) 
 { 
 - if ( channels . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | ( name . startsWith ( " FML " ) & & ! ( " FML " . equals ( container . getModId ( ) ) ) ) ) 
 + if ( channels . get ( Side . CLIENT ) . containsKey ( name ) | | channels . get ( Side . SERVER ) . containsKey ( name ) | | name . startsWith ( " MC | " ) | | name . startsWith ( " \ u0001 " ) | | ( name . startsWith ( " FML " ) & & ! ( " FML " . equals ( container . getModId ( ) ) ) ) ) 
 { 
 throw new RuntimeException ( " That channel is already registered " ) ; 
 }

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAPITransformer . java b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAPITransformer . java 
 index 7fdff20 . . 4f01d0c 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAPITransformer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAPITransformer . java 
 @ @ - 31 , 7 + 31 , 12 @ @ public class ModAPITransformer implements IClassTransformer { 
 @ Override 
 public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) 
 { 
 - if ( optionals = = null | | ! optionals . containsKey ( name ) ) 
 + String lookupName = name ; 
 + if ( name . endsWith ( " $ class " ) ) 
 + { 
 + lookupName = name . substring ( 0 , name . length ( ) - 6 ) ; 
 + } 
 + if ( optionals = = null | | ! optionals . containsKey ( lookupName ) ) 
 { 
 return basicClass ; 
 } 
 @ @ - 40 , 7 + 45 , 7 @ @ public class ModAPITransformer implements IClassTransformer { 
 classReader . accept ( classNode , 0 ) ; 
 
 if ( logDebugInfo ) FMLRelaunchLog . finer ( " Optional removal - found optionals for class % s - processing " , name ) ; 
 - for ( ASMData optional : optionals . get ( name ) ) 
 + for ( ASMData optional : optionals . get ( lookupName ) ) 
 { 
 String modId = ( String ) optional . getAnnotationInfo ( ) . get ( " modid " ) ; 
 
 @ @ - 72 , 6 + 77 , 12 @ @ public class ModAPITransformer implements IClassTransformer { 
 
 private void stripMethod ( ClassNode classNode , String methodDescriptor ) 
 { 
 + if ( classNode . name . endsWith ( " $ class " ) ) 
 + { 
 + String subName = classNode . name . substring ( 0 , classNode . name . length ( ) - 6 ) ; 
 + int pos = methodDescriptor . indexOf ( ' ( ' ) + 1 ; 
 + methodDescriptor = methodDescriptor . substring ( 0 , pos ) + ' L ' + subName + ' ; ' + methodDescriptor . substring ( pos ) ; 
 + } 
 for ( ListIterator < MethodNode > iterator = classNode . methods . listIterator ( ) ; iterator . hasNext ( ) ; ) 
 { 
 MethodNode method = iterator . next ( ) ;
