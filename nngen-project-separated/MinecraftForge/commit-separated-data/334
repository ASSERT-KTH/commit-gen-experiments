BLEU SCORE: 0.009077715544186328

TEST MSG: Allow custom selector types to be defined
GENERATED MSG: Add support for oredict item predicates in advancements , and add a registry for item predicates

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / command / EntitySelector . java . patch b / patches / minecraft / net / minecraft / command / EntitySelector . java . patch <nl> index c2dbe41 . . dd80d47 100644 <nl> - - - a / patches / minecraft / net / minecraft / command / EntitySelector . java . patch <nl> + + + b / patches / minecraft / net / minecraft / command / EntitySelector . java . patch <nl> @ @ - 1 , 6 + 1 , 18 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / command / EntitySelector . java <nl> + + + . . / src - work / minecraft / net / minecraft / command / EntitySelector . java <nl> - @ @ - 153 , 6 + 153 , 7 @ @ <nl> + @ @ - 121 , 6 + 121 , 11 @ @ <nl> + <nl> + public static < T extends Entity > List < T > func _ 179656 _ b ( ICommandSender p _ 179656 _ 0 _ , String p _ 179656 _ 1 _ , Class < ? extends T > p _ 179656 _ 2 _ ) throws CommandException <nl> + { <nl> + + return net . minecraftforge . common . command . SelectorHandlerManager . matchEntities ( p _ 179656 _ 0 _ , p _ 179656 _ 1 _ , p _ 179656 _ 2 _ ) ; <nl> + + } <nl> + + <nl> + + public static < T extends Entity > List < T > matchEntitiesDefault ( ICommandSender p _ 179656 _ 0 _ , String p _ 179656 _ 1 _ , Class < ? extends T > p _ 179656 _ 2 _ ) throws CommandException <nl> + + { <nl> + Matcher matcher = field _ 82389 _ a . matcher ( p _ 179656 _ 1 _ ) ; <nl> + <nl> + if ( matcher . matches ( ) & & p _ 179656 _ 0 _ . func _ 70003 _ b ( 1 , " @ " ) ) <nl> + @ @ - 153 , 6 + 158 , 7 @ @ <nl> list2 . addAll ( func _ 184951 _ f ( map ) ) ; <nl> list2 . addAll ( func _ 180698 _ a ( map , vec3d ) ) ; <nl> list2 . addAll ( func _ 179662 _ g ( map ) ) ; <nl> @ @ - 8 , 3 + 20 , 27 @ @ <nl> <nl> if ( " s " . equalsIgnoreCase ( s ) ) <nl> { <nl> + @ @ - 786 , 6 + 792 , 11 @ @ <nl> + <nl> + public static boolean func _ 82377 _ a ( String p _ 82377 _ 0 _ ) throws CommandException <nl> + { <nl> + + return net . minecraftforge . common . command . SelectorHandlerManager . matchesMultiplePlayers ( p _ 82377 _ 0 _ ) ; <nl> + + } <nl> + + <nl> + + public static boolean matchesMultiplePlayersDefault ( String p _ 82377 _ 0 _ ) throws CommandException <nl> + + { <nl> + Matcher matcher = field _ 82389 _ a . matcher ( p _ 82377 _ 0 _ ) ; <nl> + <nl> + if ( ! matcher . matches ( ) ) <nl> + @ @ - 803 , 6 + 814 , 11 @ @ <nl> + <nl> + public static boolean func _ 82378 _ b ( String p _ 82378 _ 0 _ ) <nl> + { <nl> + + return net . minecraftforge . common . command . SelectorHandlerManager . isSelector ( p _ 82378 _ 0 _ ) ; <nl> + + } <nl> + + <nl> + + public static boolean isSelectorDefault ( String p _ 82378 _ 0 _ ) <nl> + + { <nl> + return field _ 82389 _ a . matcher ( p _ 82378 _ 0 _ ) . matches ( ) ; <nl> + } <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / common / command / SelectorHandler . java b / src / main / java / net / minecraftforge / common / command / SelectorHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 9c0eb2f <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / command / SelectorHandler . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . command ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . command . CommandException ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . entity . Entity ; <nl> + <nl> + / * * <nl> + * Handler for custom types of selectors registered with { @ link SelectorHandlerManager } <nl> + * / <nl> + public interface SelectorHandler <nl> + { <nl> + / * * <nl> + * Returns a { @ link List } of { @ link Entity Entities } of class { @ code targetClass } ( { @ code T } ) represented by { @ code token } < br > <nl> + * < b > Note : < / b > If { @ code token } does not match the overall syntax defined by { @ link # isSelector } , this method should return an empty list . <nl> + * For any other error , an exception should be thrown <nl> + * <nl> + * @ param sender The { @ link ICommandSender } that initiated the query <nl> + * / <nl> + public < T extends Entity > List < T > matchEntities ( ICommandSender sender , String token , Class < ? extends T > targetClass ) throws CommandException ; <nl> + <nl> + / * * <nl> + * Returns whether the selector string potentially matches multiple entities <nl> + * / <nl> + public boolean matchesMultiplePlayers ( String selectorStr ) throws CommandException ; <nl> + <nl> + / * * <nl> + * Returns whether the string matches the overall syntax of the selector < br > <nl> + * < b > Note : < / b > If this returns { @ code false } , { @ link # matchEntities } should return an empty list <nl> + * / <nl> + public boolean isSelector ( String selectorStr ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / command / SelectorHandlerManager . java b / src / main / java / net / minecraftforge / common / command / SelectorHandlerManager . java <nl> new file mode 100644 <nl> index 0000000 . . b7db6d0 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / command / SelectorHandlerManager . java <nl> @ @ - 0 , 0 + 1 , 141 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . command ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + import java . util . NavigableMap ; <nl> + import java . util . TreeMap ; <nl> + <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> + <nl> + import net . minecraft . command . CommandException ; <nl> + import net . minecraft . command . EntitySelector ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + <nl> + / * * <nl> + * Allows registration of custom selector types by assigning a { @ link SelectorHandler } to a prefix <nl> + * This class handles calls to the { @ link EntitySelector } methods { @ link EntitySelector # matchEntities matchEntities } , <nl> + * { @ link EntitySelector # matchesMultiplePlayers matchesMultiplePlayers } and { @ link EntitySelector # isSelector isSelector } . < br > <nl> + * The calls are delegated to the handler with the longest matching prefix . < br > <nl> + * < br > <nl> + * < b > Note : < / b > If you register a { @ link SelectorHandler } to a broader domain ( not just a single selector ) , you should take care of possible shadowing conflicts yourself . <nl> + * For this you can use the information provided by { @ link # selectorHandlers } and { @ link # registeringMods } . <nl> + * / <nl> + public class SelectorHandlerManager <nl> + { <nl> + private SelectorHandlerManager ( ) <nl> + { <nl> + } <nl> + <nl> + / / the ordering is reversed such that longer prefixes appear before their shorter substrings <nl> + public static final NavigableMap < String , SelectorHandler > selectorHandlers = new TreeMap < String , SelectorHandler > ( Collections . < String > reverseOrder ( ) ) ; <nl> + public static final NavigableMap < String , String > registeringMods = new TreeMap < String , String > ( Collections . < String > reverseOrder ( ) ) ; <nl> + <nl> + private static final SelectorHandler vanillaHandler = new SelectorHandler ( ) <nl> + { <nl> + @ Override <nl> + public < T extends Entity > List < T > matchEntities ( final ICommandSender sender , final String token , final Class < ? extends T > targetClass ) throws CommandException <nl> + { <nl> + return EntitySelector . matchEntitiesDefault ( sender , token , targetClass ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean matchesMultiplePlayers ( final String selectorStr ) throws CommandException <nl> + { <nl> + return EntitySelector . matchesMultiplePlayersDefault ( selectorStr ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isSelector ( final String selectorStr ) <nl> + { <nl> + return EntitySelector . isSelectorDefault ( selectorStr ) ; <nl> + } <nl> + } ; <nl> + <nl> + static <nl> + { <nl> + for ( final String prefix : ArrayUtils . toArray ( " @ p " , " @ a " , " @ r " , " @ e " , " @ s " ) ) <nl> + { <nl> + selectorHandlers . put ( prefix , vanillaHandler ) ; <nl> + registeringMods . put ( prefix , " minecraft " ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Registers a new { @ link SelectorHandler } for { @ code prefix } . < br > <nl> + * <nl> + * @ param prefix The domain the specified { @ code handler } is registered for . <nl> + * If you want to register just a single selector , { @ code prefix } has the form ' @ { selectorName } ' <nl> + * / <nl> + public static void register ( final String prefix , final SelectorHandler handler ) <nl> + { <nl> + if ( prefix . isEmpty ( ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Prefix must not be empty " ) ; <nl> + } <nl> + <nl> + final String modId = Loader . instance ( ) . activeModContainer ( ) . getModId ( ) ; <nl> + <nl> + selectorHandlers . put ( prefix , handler ) ; <nl> + registeringMods . put ( prefix , modId ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the best matching handler for the given string . Defaults to the vanilla handler if no prefix applies <nl> + * / <nl> + public static SelectorHandler getHandler ( final String selectorStr ) <nl> + { <nl> + if ( ! selectorStr . isEmpty ( ) ) <nl> + { <nl> + for ( final Entry < String , SelectorHandler > handler : selectorHandlers . subMap ( selectorStr , true , selectorStr . substring ( 0 , 1 ) , true ) . entrySet ( ) ) <nl> + { <nl> + if ( selectorStr . startsWith ( handler . getKey ( ) ) ) <nl> + { <nl> + return handler . getValue ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + return vanillaHandler ; <nl> + } <nl> + <nl> + / / These methods are called by the vanilla methods <nl> + <nl> + public static < T extends Entity > List < T > matchEntities ( final ICommandSender sender , final String token , final Class < ? extends T > targetClass ) throws CommandException <nl> + { <nl> + return getHandler ( token ) . matchEntities ( sender , token , targetClass ) ; <nl> + } <nl> + <nl> + public static boolean matchesMultiplePlayers ( final String selectorStr ) throws CommandException <nl> + { <nl> + return getHandler ( selectorStr ) . matchesMultiplePlayers ( selectorStr ) ; <nl> + } <nl> + <nl> + public static boolean isSelector ( final String selectorStr ) <nl> + { <nl> + return getHandler ( selectorStr ) . isSelector ( selectorStr ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc <nl> index 6220bc7 . . 405c818 100644 <nl> - - - a / src / main / resources / forge . exc <nl> + + + b / src / main / resources / forge . exc <nl> @ @ - 61 , 3 + 61 , 7 @ @ net / minecraft / world / storage / loot / LootEntryEmpty . < init > ( II [ Lnet / minecraft / world / s <nl> net / minecraft / world / chunk / BlockStateContainer . setBits ( IZ ) V = | p _ 186012 _ 1 _ , forceBits <nl> net / minecraft / village / Village . getPlayerReputation ( Ljava / util / UUID ; ) I = | p _ 82684 _ 1 _ <nl> net / minecraft / village / Village . modifyPlayerReputation ( Ljava / util / UUID ; I ) I = | p _ 82688 _ 1 _ , p _ 82688 _ 2 _ <nl> + <nl> + net / minecraft / command / EntitySelector . matchEntitiesDefault ( Lnet / minecraft / command / ICommandSender ; Ljava / lang / String ; Ljava / lang / Class ; ) Ljava / util / List ; = | p _ 179656 _ 0 _ , p _ 179656 _ 1 _ , p _ 179656 _ 2 _ <nl> + net / minecraft / command / EntitySelector . matchesMultiplePlayersDefault ( Ljava / lang / String ; ) Z = | p _ 82377 _ 0 _ <nl> + net / minecraft / command / EntitySelector . isSelectorDefault ( Ljava / lang / String ; ) Z = | p _ 82378 _ 0 _ <nl> diff - - git a / src / test / java / net / minecraftforge / test / SelectorHandlerTest . java b / src / test / java / net / minecraftforge / test / SelectorHandlerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 5667450 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / SelectorHandlerTest . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . command . CommandException ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraftforge . common . command . SelectorHandler ; <nl> + import net . minecraftforge . common . command . SelectorHandlerManager ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + <nl> + @ Mod ( modid = " selectorhandlertest " , name = " Selector Handler Test " , version = " 0 . 0 . 0 " ) <nl> + public class SelectorHandlerTest <nl> + { <nl> + @ EventHandler <nl> + public void init ( final FMLInitializationEvent event ) <nl> + { <nl> + SelectorHandlerManager . register ( Handler . name , new Handler ( ) ) ; <nl> + } <nl> + <nl> + private static class Handler implements SelectorHandler <nl> + { <nl> + protected static final String name = " @ self " ; <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + @ Override <nl> + public < T extends Entity > List < T > matchEntities ( final ICommandSender sender , final String token , final Class < ? extends T > targetClass ) throws CommandException <nl> + { <nl> + final Entity senderEntity = sender . getCommandSenderEntity ( ) ; <nl> + return senderEntity ! = null & & targetClass . isAssignableFrom ( senderEntity . getClass ( ) ) & & name . equals ( token ) <nl> + ? Collections . singletonList ( ( T ) sender . getCommandSenderEntity ( ) ) <nl> + : Collections . < T > emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean matchesMultiplePlayers ( final String selectorStr ) throws CommandException <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isSelector ( final String selectorStr ) <nl> + { <nl> + return name . equals ( selectorStr ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch b / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch <nl> new file mode 100644 <nl> index 0000000 . . d16a9b7 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java <nl> + + + + . . / src - work / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java <nl> + @ @ - 104 , 6 + 104 , 7 @ @ <nl> + if ( p _ 192492 _ 0 _ ! = null & & ! p _ 192492 _ 0 _ . isJsonNull ( ) ) <nl> + { <nl> + JsonObject jsonobject = JsonUtils . func _ 151210 _ l ( p _ 192492 _ 0 _ , " item " ) ; <nl> + + if ( jsonobject . has ( " type " ) ) <nl> + + { <nl> + + final ResourceLocation rl = new ResourceLocation ( JsonUtils . func _ 151200 _ h ( jsonobject , " type " ) ) ; <nl> + + final Map < ResourceLocation , java . util . function . Function < JsonObject , ItemPredicate > > map = net . minecraftforge . advancements . critereon . ItemPredicates . getPredicates ( ) ; <nl> + + if ( map . containsKey ( rl ) ) return map . get ( rl ) . apply ( jsonobject ) ; <nl> + + else throw new JsonSyntaxException ( " There is no ItemPredicate of type " + rl ) ; <nl> + + } <nl> + MinMaxBounds minmaxbounds = MinMaxBounds . func _ 192515 _ a ( jsonobject . get ( " count " ) ) ; <nl> + MinMaxBounds minmaxbounds1 = MinMaxBounds . func _ 192515 _ a ( jsonobject . get ( " durability " ) ) ; <nl> + Integer integer = jsonobject . has ( " data " ) ? JsonUtils . func _ 151203 _ m ( jsonobject , " data " ) : null ; <nl> diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java <nl> new file mode 100644 <nl> index 0000000 . . ff551e0 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . advancements . critereon ; <nl> + <nl> + import com . google . gson . JsonObject ; <nl> + import gnu . trove . map . hash . THashMap ; <nl> + import net . minecraft . advancements . critereon . ItemPredicate ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . Map ; <nl> + import java . util . function . Function ; <nl> + <nl> + public class ItemPredicates <nl> + { <nl> + private static final Map < ResourceLocation , Function < JsonObject , ItemPredicate > > predicates = new THashMap < > ( ) ; <nl> + <nl> + static <nl> + { <nl> + register ( new ResourceLocation ( " forge : ore _ dict " ) , OredictItemPredicate : : new ) ; <nl> + } <nl> + <nl> + public static void register ( ResourceLocation rl , Function < JsonObject , ItemPredicate > jsonToPredicate ) <nl> + { <nl> + predicates . put ( rl , jsonToPredicate ) ; <nl> + } <nl> + <nl> + public static Map < ResourceLocation , Function < JsonObject , ItemPredicate > > getPredicates ( ) <nl> + { <nl> + return Collections . unmodifiableMap ( predicates ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java b / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java <nl> new file mode 100644 <nl> index 0000000 . . 9c36975 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . advancements . critereon ; <nl> + <nl> + <nl> + import com . google . gson . JsonObject ; <nl> + import net . minecraft . util . JsonUtils ; <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> + <nl> + import net . minecraft . advancements . critereon . ItemPredicate ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . oredict . OreDictionary ; <nl> + <nl> + / * * <nl> + * An { @ link ItemPredicate } that matches oredicts . <nl> + * / <nl> + public class OredictItemPredicate extends ItemPredicate <nl> + { <nl> + private final String ore ; <nl> + <nl> + public OredictItemPredicate ( String ore ) <nl> + { <nl> + this . ore = ore ; <nl> + } <nl> + <nl> + public OredictItemPredicate ( JsonObject jsonObject ) { this ( JsonUtils . getString ( jsonObject , " ore " ) ) ; } <nl> + <nl> + @ Override <nl> + public boolean test ( ItemStack stack ) <nl> + { <nl> + return ! stack . isEmpty ( ) & & ArrayUtils . contains ( OreDictionary . getOreIDs ( stack ) , OreDictionary . getOreID ( ore ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java b / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java <nl> new file mode 100644 <nl> index 0000000 . . 07c154b <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java <nl> @ @ - 0 , 0 + 1 , 198 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import com . google . gson . JsonDeserializationContext ; <nl> + import com . google . gson . JsonObject ; <nl> + import net . minecraft . advancements . CriteriaTriggers ; <nl> + import net . minecraft . advancements . ICriterionTrigger ; <nl> + import net . minecraft . advancements . PlayerAdvancements ; <nl> + import net . minecraft . advancements . critereon . AbstractCriterionInstance ; <nl> + import net . minecraft . entity . player . EntityPlayerMP ; <nl> + import net . minecraft . entity . player . InventoryPlayer ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . event . entity . EntityJoinWorldEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + import java . lang . invoke . MethodHandle ; <nl> + import java . lang . invoke . MethodHandles ; <nl> + import java . lang . reflect . Method ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + <nl> + / * * <nl> + * Most of the real work is in the advancements directory of this mod . <nl> + * This mod tests ore - dict advancement triggers . <nl> + * / <nl> + @ Mod . EventBusSubscriber <nl> + @ Mod ( modid = OredictItemPredicateTest . MODID , name = " Oredict Item Predicate Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class OredictItemPredicateTest <nl> + { <nl> + public static final String MODID = " oredict _ predicate " ; <nl> + <nl> + static final boolean ENABLED = false ; <nl> + <nl> + private static final MethodHandle ctRegister ; <nl> + static <nl> + { <nl> + try <nl> + { <nl> + final Method tmp = CriteriaTriggers . class . getDeclaredMethod ( " register " / * func _ 192118 _ a * / , ICriterionTrigger . class ) ; <nl> + tmp . setAccessible ( true ) ; <nl> + ctRegister = MethodHandles . lookup ( ) . unreflect ( tmp ) ; <nl> + } <nl> + catch ( Throwable e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public static final EnabledTrigger ENABLED _ TRIGGER ; <nl> + static <nl> + { <nl> + try <nl> + { <nl> + ENABLED _ TRIGGER = ( EnabledTrigger ) ( ICriterionTrigger ) ctRegister . invokeExact ( ( ICriterionTrigger ) new EnabledTrigger ( ) ) ; <nl> + } <nl> + catch ( Throwable e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + / / trigger the enabled advancement on player entry <nl> + @ SubscribeEvent <nl> + public static void triggerAdv ( EntityJoinWorldEvent event ) <nl> + { <nl> + if ( event . getEntity ( ) instanceof EntityPlayerMP ) <nl> + { <nl> + final EntityPlayerMP player = ( EntityPlayerMP ) event . getEntity ( ) ; <nl> + ENABLED _ TRIGGER . trigger ( player , player . inventory ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Far more work than expected … oh well . <nl> + * / <nl> + public static class EnabledTrigger implements ICriterionTrigger < EnabledTrigger . Instance > <nl> + { <nl> + public static final ResourceLocation ID = new ResourceLocation ( MODID , " is _ enabled " ) ; <nl> + private final Map < PlayerAdvancements , Listeners > listeners = new HashMap < > ( ) ; <nl> + <nl> + @ Override <nl> + public ResourceLocation getId ( ) <nl> + { <nl> + return ID ; <nl> + } <nl> + <nl> + @ Override <nl> + public void addListener ( PlayerAdvancements playerAdvancementsIn , Listener < Instance > listener ) <nl> + { <nl> + Listeners listeners = this . listeners . computeIfAbsent ( playerAdvancementsIn , Listeners : : new ) ; <nl> + <nl> + listeners . add ( listener ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void removeListener ( PlayerAdvancements playerAdvancementsIn , Listener < Instance > listener ) <nl> + { <nl> + Listeners listeners = this . listeners . get ( playerAdvancementsIn ) ; <nl> + <nl> + if ( listeners ! = null ) <nl> + { <nl> + listeners . remove ( listener ) ; <nl> + <nl> + if ( listeners . isEmpty ( ) ) <nl> + { <nl> + this . listeners . remove ( playerAdvancementsIn ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void removeAllListeners ( PlayerAdvancements playerAdvancementsIn ) <nl> + { <nl> + this . listeners . remove ( playerAdvancementsIn ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Instance deserializeInstance ( JsonObject json , JsonDeserializationContext context ) <nl> + { <nl> + return new Instance ( ) ; <nl> + } <nl> + <nl> + public void trigger ( EntityPlayerMP player , InventoryPlayer inventory ) <nl> + { <nl> + Listeners listeners = this . listeners . get ( player . getAdvancements ( ) ) ; <nl> + <nl> + if ( listeners ! = null ) <nl> + { <nl> + listeners . trigger ( inventory ) ; <nl> + } <nl> + } <nl> + <nl> + public static class Instance extends AbstractCriterionInstance <nl> + { <nl> + public Instance ( ) <nl> + { <nl> + super ( ID ) ; <nl> + } <nl> + } <nl> + <nl> + static class Listeners <nl> + { <nl> + private final PlayerAdvancements playerAdvancements ; <nl> + private final Set < Listener < Instance > > listeners = new HashSet < > ( ) ; <nl> + <nl> + public Listeners ( PlayerAdvancements playerAdvancementsIn ) <nl> + { <nl> + this . playerAdvancements = playerAdvancementsIn ; <nl> + } <nl> + <nl> + public boolean isEmpty ( ) <nl> + { <nl> + return this . listeners . isEmpty ( ) ; <nl> + } <nl> + <nl> + public void add ( ICriterionTrigger . Listener < Instance > listener ) <nl> + { <nl> + this . listeners . add ( listener ) ; <nl> + } <nl> + <nl> + public void remove ( ICriterionTrigger . Listener < Instance > listener ) <nl> + { <nl> + this . listeners . remove ( listener ) ; <nl> + } <nl> + <nl> + public void trigger ( InventoryPlayer inventory ) <nl> + { <nl> + List < Listener < Instance > > list = null ; <nl> + <nl> + for ( ICriterionTrigger . Listener < Instance > listener : this . listeners ) <nl> + { <nl> + if ( ENABLED ) <nl> + { <nl> + if ( list = = null ) <nl> + { <nl> + list = new ArrayList < > ( ) ; <nl> + } <nl> + <nl> + list . add ( listener ) ; <nl> + } <nl> + } <nl> + <nl> + if ( list ! = null ) <nl> + { <nl> + for ( ICriterionTrigger . Listener < Instance > listener1 : list ) <nl> + { <nl> + listener1 . grantCriterion ( this . playerAdvancements ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json b / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json <nl> new file mode 100644 <nl> index 0000000 . . 396bf2b <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + { <nl> + " parent " : " minecraft : recipes / root " , <nl> + " rewards " : { <nl> + " recipes " : [ " minecraft : tnt " ] <nl> + } , <nl> + " criteria " : { <nl> + " has _ wood " : { <nl> + " trigger " : " minecraft : inventory _ changed " , <nl> + " conditions " : { <nl> + " items " : [ <nl> + { <nl> + " type " : " forge : ore _ dict " , <nl> + " ore " : " plankWood " <nl> + } <nl> + ] <nl> + } <nl> + } , <nl> + " mod _ enabled " : { <nl> + " trigger " : " oredict _ predicate : is _ enabled " , <nl> + " conditions " : { } <nl> + } <nl> + } , <nl> + " requirements " : [ [ " has _ wood " ] , [ " mod _ enabled " ] ] <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / command / EntitySelector . java . patch b / patches / minecraft / net / minecraft / command / EntitySelector . java . patch 
 index c2dbe41 . . dd80d47 100644 
 - - - a / patches / minecraft / net / minecraft / command / EntitySelector . java . patch 
 + + + b / patches / minecraft / net / minecraft / command / EntitySelector . java . patch 
 @ @ - 1 , 6 + 1 , 18 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / command / EntitySelector . java 
 + + + . . / src - work / minecraft / net / minecraft / command / EntitySelector . java 
 - @ @ - 153 , 6 + 153 , 7 @ @ 
 + @ @ - 121 , 6 + 121 , 11 @ @ 
 + 
 + public static < T extends Entity > List < T > func _ 179656 _ b ( ICommandSender p _ 179656 _ 0 _ , String p _ 179656 _ 1 _ , Class < ? extends T > p _ 179656 _ 2 _ ) throws CommandException 
 + { 
 + + return net . minecraftforge . common . command . SelectorHandlerManager . matchEntities ( p _ 179656 _ 0 _ , p _ 179656 _ 1 _ , p _ 179656 _ 2 _ ) ; 
 + + } 
 + + 
 + + public static < T extends Entity > List < T > matchEntitiesDefault ( ICommandSender p _ 179656 _ 0 _ , String p _ 179656 _ 1 _ , Class < ? extends T > p _ 179656 _ 2 _ ) throws CommandException 
 + + { 
 + Matcher matcher = field _ 82389 _ a . matcher ( p _ 179656 _ 1 _ ) ; 
 + 
 + if ( matcher . matches ( ) & & p _ 179656 _ 0 _ . func _ 70003 _ b ( 1 , " @ " ) ) 
 + @ @ - 153 , 6 + 158 , 7 @ @ 
 list2 . addAll ( func _ 184951 _ f ( map ) ) ; 
 list2 . addAll ( func _ 180698 _ a ( map , vec3d ) ) ; 
 list2 . addAll ( func _ 179662 _ g ( map ) ) ; 
 @ @ - 8 , 3 + 20 , 27 @ @ 
 
 if ( " s " . equalsIgnoreCase ( s ) ) 
 { 
 + @ @ - 786 , 6 + 792 , 11 @ @ 
 + 
 + public static boolean func _ 82377 _ a ( String p _ 82377 _ 0 _ ) throws CommandException 
 + { 
 + + return net . minecraftforge . common . command . SelectorHandlerManager . matchesMultiplePlayers ( p _ 82377 _ 0 _ ) ; 
 + + } 
 + + 
 + + public static boolean matchesMultiplePlayersDefault ( String p _ 82377 _ 0 _ ) throws CommandException 
 + + { 
 + Matcher matcher = field _ 82389 _ a . matcher ( p _ 82377 _ 0 _ ) ; 
 + 
 + if ( ! matcher . matches ( ) ) 
 + @ @ - 803 , 6 + 814 , 11 @ @ 
 + 
 + public static boolean func _ 82378 _ b ( String p _ 82378 _ 0 _ ) 
 + { 
 + + return net . minecraftforge . common . command . SelectorHandlerManager . isSelector ( p _ 82378 _ 0 _ ) ; 
 + + } 
 + + 
 + + public static boolean isSelectorDefault ( String p _ 82378 _ 0 _ ) 
 + + { 
 + return field _ 82389 _ a . matcher ( p _ 82378 _ 0 _ ) . matches ( ) ; 
 + } 
 + 
 diff - - git a / src / main / java / net / minecraftforge / common / command / SelectorHandler . java b / src / main / java / net / minecraftforge / common / command / SelectorHandler . java 
 new file mode 100644 
 index 0000000 . . 9c0eb2f 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / command / SelectorHandler . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . command ; 
 + 
 + import java . util . List ; 
 + 
 + import net . minecraft . command . CommandException ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . entity . Entity ; 
 + 
 + / * * 
 + * Handler for custom types of selectors registered with { @ link SelectorHandlerManager } 
 + * / 
 + public interface SelectorHandler 
 + { 
 + / * * 
 + * Returns a { @ link List } of { @ link Entity Entities } of class { @ code targetClass } ( { @ code T } ) represented by { @ code token } < br > 
 + * < b > Note : < / b > If { @ code token } does not match the overall syntax defined by { @ link # isSelector } , this method should return an empty list . 
 + * For any other error , an exception should be thrown 
 + * 
 + * @ param sender The { @ link ICommandSender } that initiated the query 
 + * / 
 + public < T extends Entity > List < T > matchEntities ( ICommandSender sender , String token , Class < ? extends T > targetClass ) throws CommandException ; 
 + 
 + / * * 
 + * Returns whether the selector string potentially matches multiple entities 
 + * / 
 + public boolean matchesMultiplePlayers ( String selectorStr ) throws CommandException ; 
 + 
 + / * * 
 + * Returns whether the string matches the overall syntax of the selector < br > 
 + * < b > Note : < / b > If this returns { @ code false } , { @ link # matchEntities } should return an empty list 
 + * / 
 + public boolean isSelector ( String selectorStr ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / command / SelectorHandlerManager . java b / src / main / java / net / minecraftforge / common / command / SelectorHandlerManager . java 
 new file mode 100644 
 index 0000000 . . b7db6d0 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / command / SelectorHandlerManager . java 
 @ @ - 0 , 0 + 1 , 141 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . command ; 
 + 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + import java . util . NavigableMap ; 
 + import java . util . TreeMap ; 
 + 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 + 
 + import net . minecraft . command . CommandException ; 
 + import net . minecraft . command . EntitySelector ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + 
 + / * * 
 + * Allows registration of custom selector types by assigning a { @ link SelectorHandler } to a prefix 
 + * This class handles calls to the { @ link EntitySelector } methods { @ link EntitySelector # matchEntities matchEntities } , 
 + * { @ link EntitySelector # matchesMultiplePlayers matchesMultiplePlayers } and { @ link EntitySelector # isSelector isSelector } . < br > 
 + * The calls are delegated to the handler with the longest matching prefix . < br > 
 + * < br > 
 + * < b > Note : < / b > If you register a { @ link SelectorHandler } to a broader domain ( not just a single selector ) , you should take care of possible shadowing conflicts yourself . 
 + * For this you can use the information provided by { @ link # selectorHandlers } and { @ link # registeringMods } . 
 + * / 
 + public class SelectorHandlerManager 
 + { 
 + private SelectorHandlerManager ( ) 
 + { 
 + } 
 + 
 + / / the ordering is reversed such that longer prefixes appear before their shorter substrings 
 + public static final NavigableMap < String , SelectorHandler > selectorHandlers = new TreeMap < String , SelectorHandler > ( Collections . < String > reverseOrder ( ) ) ; 
 + public static final NavigableMap < String , String > registeringMods = new TreeMap < String , String > ( Collections . < String > reverseOrder ( ) ) ; 
 + 
 + private static final SelectorHandler vanillaHandler = new SelectorHandler ( ) 
 + { 
 + @ Override 
 + public < T extends Entity > List < T > matchEntities ( final ICommandSender sender , final String token , final Class < ? extends T > targetClass ) throws CommandException 
 + { 
 + return EntitySelector . matchEntitiesDefault ( sender , token , targetClass ) ; 
 + } 
 + 
 + @ Override 
 + public boolean matchesMultiplePlayers ( final String selectorStr ) throws CommandException 
 + { 
 + return EntitySelector . matchesMultiplePlayersDefault ( selectorStr ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isSelector ( final String selectorStr ) 
 + { 
 + return EntitySelector . isSelectorDefault ( selectorStr ) ; 
 + } 
 + } ; 
 + 
 + static 
 + { 
 + for ( final String prefix : ArrayUtils . toArray ( " @ p " , " @ a " , " @ r " , " @ e " , " @ s " ) ) 
 + { 
 + selectorHandlers . put ( prefix , vanillaHandler ) ; 
 + registeringMods . put ( prefix , " minecraft " ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Registers a new { @ link SelectorHandler } for { @ code prefix } . < br > 
 + * 
 + * @ param prefix The domain the specified { @ code handler } is registered for . 
 + * If you want to register just a single selector , { @ code prefix } has the form ' @ { selectorName } ' 
 + * / 
 + public static void register ( final String prefix , final SelectorHandler handler ) 
 + { 
 + if ( prefix . isEmpty ( ) ) 
 + { 
 + throw new IllegalArgumentException ( " Prefix must not be empty " ) ; 
 + } 
 + 
 + final String modId = Loader . instance ( ) . activeModContainer ( ) . getModId ( ) ; 
 + 
 + selectorHandlers . put ( prefix , handler ) ; 
 + registeringMods . put ( prefix , modId ) ; 
 + } 
 + 
 + / * * 
 + * Returns the best matching handler for the given string . Defaults to the vanilla handler if no prefix applies 
 + * / 
 + public static SelectorHandler getHandler ( final String selectorStr ) 
 + { 
 + if ( ! selectorStr . isEmpty ( ) ) 
 + { 
 + for ( final Entry < String , SelectorHandler > handler : selectorHandlers . subMap ( selectorStr , true , selectorStr . substring ( 0 , 1 ) , true ) . entrySet ( ) ) 
 + { 
 + if ( selectorStr . startsWith ( handler . getKey ( ) ) ) 
 + { 
 + return handler . getValue ( ) ; 
 + } 
 + } 
 + } 
 + 
 + return vanillaHandler ; 
 + } 
 + 
 + / / These methods are called by the vanilla methods 
 + 
 + public static < T extends Entity > List < T > matchEntities ( final ICommandSender sender , final String token , final Class < ? extends T > targetClass ) throws CommandException 
 + { 
 + return getHandler ( token ) . matchEntities ( sender , token , targetClass ) ; 
 + } 
 + 
 + public static boolean matchesMultiplePlayers ( final String selectorStr ) throws CommandException 
 + { 
 + return getHandler ( selectorStr ) . matchesMultiplePlayers ( selectorStr ) ; 
 + } 
 + 
 + public static boolean isSelector ( final String selectorStr ) 
 + { 
 + return getHandler ( selectorStr ) . isSelector ( selectorStr ) ; 
 + } 
 + } 
 diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc 
 index 6220bc7 . . 405c818 100644 
 - - - a / src / main / resources / forge . exc 
 + + + b / src / main / resources / forge . exc 
 @ @ - 61 , 3 + 61 , 7 @ @ net / minecraft / world / storage / loot / LootEntryEmpty . < init > ( II [ Lnet / minecraft / world / s 
 net / minecraft / world / chunk / BlockStateContainer . setBits ( IZ ) V = | p _ 186012 _ 1 _ , forceBits 
 net / minecraft / village / Village . getPlayerReputation ( Ljava / util / UUID ; ) I = | p _ 82684 _ 1 _ 
 net / minecraft / village / Village . modifyPlayerReputation ( Ljava / util / UUID ; I ) I = | p _ 82688 _ 1 _ , p _ 82688 _ 2 _ 
 + 
 + net / minecraft / command / EntitySelector . matchEntitiesDefault ( Lnet / minecraft / command / ICommandSender ; Ljava / lang / String ; Ljava / lang / Class ; ) Ljava / util / List ; = | p _ 179656 _ 0 _ , p _ 179656 _ 1 _ , p _ 179656 _ 2 _ 
 + net / minecraft / command / EntitySelector . matchesMultiplePlayersDefault ( Ljava / lang / String ; ) Z = | p _ 82377 _ 0 _ 
 + net / minecraft / command / EntitySelector . isSelectorDefault ( Ljava / lang / String ; ) Z = | p _ 82378 _ 0 _ 
 diff - - git a / src / test / java / net / minecraftforge / test / SelectorHandlerTest . java b / src / test / java / net / minecraftforge / test / SelectorHandlerTest . java 
 new file mode 100644 
 index 0000000 . . 5667450 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / SelectorHandlerTest . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . command . CommandException ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraftforge . common . command . SelectorHandler ; 
 + import net . minecraftforge . common . command . SelectorHandlerManager ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + 
 + @ Mod ( modid = " selectorhandlertest " , name = " Selector Handler Test " , version = " 0 . 0 . 0 " ) 
 + public class SelectorHandlerTest 
 + { 
 + @ EventHandler 
 + public void init ( final FMLInitializationEvent event ) 
 + { 
 + SelectorHandlerManager . register ( Handler . name , new Handler ( ) ) ; 
 + } 
 + 
 + private static class Handler implements SelectorHandler 
 + { 
 + protected static final String name = " @ self " ; 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + @ Override 
 + public < T extends Entity > List < T > matchEntities ( final ICommandSender sender , final String token , final Class < ? extends T > targetClass ) throws CommandException 
 + { 
 + final Entity senderEntity = sender . getCommandSenderEntity ( ) ; 
 + return senderEntity ! = null & & targetClass . isAssignableFrom ( senderEntity . getClass ( ) ) & & name . equals ( token ) 
 + ? Collections . singletonList ( ( T ) sender . getCommandSenderEntity ( ) ) 
 + : Collections . < T > emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean matchesMultiplePlayers ( final String selectorStr ) throws CommandException 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public boolean isSelector ( final String selectorStr ) 
 + { 
 + return name . equals ( selectorStr ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch b / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch 
 new file mode 100644 
 index 0000000 . . d16a9b7 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java 
 + + + + . . / src - work / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java 
 + @ @ - 104 , 6 + 104 , 7 @ @ 
 + if ( p _ 192492 _ 0 _ ! = null & & ! p _ 192492 _ 0 _ . isJsonNull ( ) ) 
 + { 
 + JsonObject jsonobject = JsonUtils . func _ 151210 _ l ( p _ 192492 _ 0 _ , " item " ) ; 
 + + if ( jsonobject . has ( " type " ) ) 
 + + { 
 + + final ResourceLocation rl = new ResourceLocation ( JsonUtils . func _ 151200 _ h ( jsonobject , " type " ) ) ; 
 + + final Map < ResourceLocation , java . util . function . Function < JsonObject , ItemPredicate > > map = net . minecraftforge . advancements . critereon . ItemPredicates . getPredicates ( ) ; 
 + + if ( map . containsKey ( rl ) ) return map . get ( rl ) . apply ( jsonobject ) ; 
 + + else throw new JsonSyntaxException ( " There is no ItemPredicate of type " + rl ) ; 
 + + } 
 + MinMaxBounds minmaxbounds = MinMaxBounds . func _ 192515 _ a ( jsonobject . get ( " count " ) ) ; 
 + MinMaxBounds minmaxbounds1 = MinMaxBounds . func _ 192515 _ a ( jsonobject . get ( " durability " ) ) ; 
 + Integer integer = jsonobject . has ( " data " ) ? JsonUtils . func _ 151203 _ m ( jsonobject , " data " ) : null ; 
 diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java 
 new file mode 100644 
 index 0000000 . . ff551e0 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . advancements . critereon ; 
 + 
 + import com . google . gson . JsonObject ; 
 + import gnu . trove . map . hash . THashMap ; 
 + import net . minecraft . advancements . critereon . ItemPredicate ; 
 + import net . minecraft . util . ResourceLocation ; 
 + 
 + import java . util . Collections ; 
 + import java . util . Map ; 
 + import java . util . function . Function ; 
 + 
 + public class ItemPredicates 
 + { 
 + private static final Map < ResourceLocation , Function < JsonObject , ItemPredicate > > predicates = new THashMap < > ( ) ; 
 + 
 + static 
 + { 
 + register ( new ResourceLocation ( " forge : ore _ dict " ) , OredictItemPredicate : : new ) ; 
 + } 
 + 
 + public static void register ( ResourceLocation rl , Function < JsonObject , ItemPredicate > jsonToPredicate ) 
 + { 
 + predicates . put ( rl , jsonToPredicate ) ; 
 + } 
 + 
 + public static Map < ResourceLocation , Function < JsonObject , ItemPredicate > > getPredicates ( ) 
 + { 
 + return Collections . unmodifiableMap ( predicates ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java b / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java 
 new file mode 100644 
 index 0000000 . . 9c36975 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . advancements . critereon ; 
 + 
 + 
 + import com . google . gson . JsonObject ; 
 + import net . minecraft . util . JsonUtils ; 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 + 
 + import net . minecraft . advancements . critereon . ItemPredicate ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . oredict . OreDictionary ; 
 + 
 + / * * 
 + * An { @ link ItemPredicate } that matches oredicts . 
 + * / 
 + public class OredictItemPredicate extends ItemPredicate 
 + { 
 + private final String ore ; 
 + 
 + public OredictItemPredicate ( String ore ) 
 + { 
 + this . ore = ore ; 
 + } 
 + 
 + public OredictItemPredicate ( JsonObject jsonObject ) { this ( JsonUtils . getString ( jsonObject , " ore " ) ) ; } 
 + 
 + @ Override 
 + public boolean test ( ItemStack stack ) 
 + { 
 + return ! stack . isEmpty ( ) & & ArrayUtils . contains ( OreDictionary . getOreIDs ( stack ) , OreDictionary . getOreID ( ore ) ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java b / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java 
 new file mode 100644 
 index 0000000 . . 07c154b 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java 
 @ @ - 0 , 0 + 1 , 198 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import com . google . gson . JsonDeserializationContext ; 
 + import com . google . gson . JsonObject ; 
 + import net . minecraft . advancements . CriteriaTriggers ; 
 + import net . minecraft . advancements . ICriterionTrigger ; 
 + import net . minecraft . advancements . PlayerAdvancements ; 
 + import net . minecraft . advancements . critereon . AbstractCriterionInstance ; 
 + import net . minecraft . entity . player . EntityPlayerMP ; 
 + import net . minecraft . entity . player . InventoryPlayer ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . event . entity . EntityJoinWorldEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + import java . lang . invoke . MethodHandle ; 
 + import java . lang . invoke . MethodHandles ; 
 + import java . lang . reflect . Method ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + 
 + / * * 
 + * Most of the real work is in the advancements directory of this mod . 
 + * This mod tests ore - dict advancement triggers . 
 + * / 
 + @ Mod . EventBusSubscriber 
 + @ Mod ( modid = OredictItemPredicateTest . MODID , name = " Oredict Item Predicate Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class OredictItemPredicateTest 
 + { 
 + public static final String MODID = " oredict _ predicate " ; 
 + 
 + static final boolean ENABLED = false ; 
 + 
 + private static final MethodHandle ctRegister ; 
 + static 
 + { 
 + try 
 + { 
 + final Method tmp = CriteriaTriggers . class . getDeclaredMethod ( " register " / * func _ 192118 _ a * / , ICriterionTrigger . class ) ; 
 + tmp . setAccessible ( true ) ; 
 + ctRegister = MethodHandles . lookup ( ) . unreflect ( tmp ) ; 
 + } 
 + catch ( Throwable e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + public static final EnabledTrigger ENABLED _ TRIGGER ; 
 + static 
 + { 
 + try 
 + { 
 + ENABLED _ TRIGGER = ( EnabledTrigger ) ( ICriterionTrigger ) ctRegister . invokeExact ( ( ICriterionTrigger ) new EnabledTrigger ( ) ) ; 
 + } 
 + catch ( Throwable e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + / / trigger the enabled advancement on player entry 
 + @ SubscribeEvent 
 + public static void triggerAdv ( EntityJoinWorldEvent event ) 
 + { 
 + if ( event . getEntity ( ) instanceof EntityPlayerMP ) 
 + { 
 + final EntityPlayerMP player = ( EntityPlayerMP ) event . getEntity ( ) ; 
 + ENABLED _ TRIGGER . trigger ( player , player . inventory ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Far more work than expected … oh well . 
 + * / 
 + public static class EnabledTrigger implements ICriterionTrigger < EnabledTrigger . Instance > 
 + { 
 + public static final ResourceLocation ID = new ResourceLocation ( MODID , " is _ enabled " ) ; 
 + private final Map < PlayerAdvancements , Listeners > listeners = new HashMap < > ( ) ; 
 + 
 + @ Override 
 + public ResourceLocation getId ( ) 
 + { 
 + return ID ; 
 + } 
 + 
 + @ Override 
 + public void addListener ( PlayerAdvancements playerAdvancementsIn , Listener < Instance > listener ) 
 + { 
 + Listeners listeners = this . listeners . computeIfAbsent ( playerAdvancementsIn , Listeners : : new ) ; 
 + 
 + listeners . add ( listener ) ; 
 + } 
 + 
 + @ Override 
 + public void removeListener ( PlayerAdvancements playerAdvancementsIn , Listener < Instance > listener ) 
 + { 
 + Listeners listeners = this . listeners . get ( playerAdvancementsIn ) ; 
 + 
 + if ( listeners ! = null ) 
 + { 
 + listeners . remove ( listener ) ; 
 + 
 + if ( listeners . isEmpty ( ) ) 
 + { 
 + this . listeners . remove ( playerAdvancementsIn ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public void removeAllListeners ( PlayerAdvancements playerAdvancementsIn ) 
 + { 
 + this . listeners . remove ( playerAdvancementsIn ) ; 
 + } 
 + 
 + @ Override 
 + public Instance deserializeInstance ( JsonObject json , JsonDeserializationContext context ) 
 + { 
 + return new Instance ( ) ; 
 + } 
 + 
 + public void trigger ( EntityPlayerMP player , InventoryPlayer inventory ) 
 + { 
 + Listeners listeners = this . listeners . get ( player . getAdvancements ( ) ) ; 
 + 
 + if ( listeners ! = null ) 
 + { 
 + listeners . trigger ( inventory ) ; 
 + } 
 + } 
 + 
 + public static class Instance extends AbstractCriterionInstance 
 + { 
 + public Instance ( ) 
 + { 
 + super ( ID ) ; 
 + } 
 + } 
 + 
 + static class Listeners 
 + { 
 + private final PlayerAdvancements playerAdvancements ; 
 + private final Set < Listener < Instance > > listeners = new HashSet < > ( ) ; 
 + 
 + public Listeners ( PlayerAdvancements playerAdvancementsIn ) 
 + { 
 + this . playerAdvancements = playerAdvancementsIn ; 
 + } 
 + 
 + public boolean isEmpty ( ) 
 + { 
 + return this . listeners . isEmpty ( ) ; 
 + } 
 + 
 + public void add ( ICriterionTrigger . Listener < Instance > listener ) 
 + { 
 + this . listeners . add ( listener ) ; 
 + } 
 + 
 + public void remove ( ICriterionTrigger . Listener < Instance > listener ) 
 + { 
 + this . listeners . remove ( listener ) ; 
 + } 
 + 
 + public void trigger ( InventoryPlayer inventory ) 
 + { 
 + List < Listener < Instance > > list = null ; 
 + 
 + for ( ICriterionTrigger . Listener < Instance > listener : this . listeners ) 
 + { 
 + if ( ENABLED ) 
 + { 
 + if ( list = = null ) 
 + { 
 + list = new ArrayList < > ( ) ; 
 + } 
 + 
 + list . add ( listener ) ; 
 + } 
 + } 
 + 
 + if ( list ! = null ) 
 + { 
 + for ( ICriterionTrigger . Listener < Instance > listener1 : list ) 
 + { 
 + listener1 . grantCriterion ( this . playerAdvancements ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json b / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json 
 new file mode 100644 
 index 0000000 . . 396bf2b 
 - - - / dev / null 
 + + + b / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + { 
 + " parent " : " minecraft : recipes / root " , 
 + " rewards " : { 
 + " recipes " : [ " minecraft : tnt " ] 
 + } , 
 + " criteria " : { 
 + " has _ wood " : { 
 + " trigger " : " minecraft : inventory _ changed " , 
 + " conditions " : { 
 + " items " : [ 
 + { 
 + " type " : " forge : ore _ dict " , 
 + " ore " : " plankWood " 
 + } 
 + ] 
 + } 
 + } , 
 + " mod _ enabled " : { 
 + " trigger " : " oredict _ predicate : is _ enabled " , 
 + " conditions " : { } 
 + } 
 + } , 
 + " requirements " : [ [ " has _ wood " ] , [ " mod _ enabled " ] ] 
 + }
