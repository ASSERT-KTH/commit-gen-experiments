BLEU SCORE: 0.013962808234631476

TEST MSG: Actually fix byte array behaviour for openGui .
GENERATED MSG: Fire an event when a player loads or saves from disk . Mods that want to load an additional

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> index 20131bb . . 494ebd4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> @ @ - 94 , 6 + 94 , 7 @ @ public class NetworkHooks <nl> * The { @ link IInteractionObject # getGuiID ( ) } is treated as a { @ link ResourceLocation } . <nl> * It should refer to a valid modId namespace , to trigger opening on the client . <nl> * The namespace is directly used to lookup the modId in the client side . <nl> + * The maximum size for # extraData is 32600 bytes . <nl> * <nl> * @ param player The player to open the GUI for <nl> * @ param containerSupplier The Container Supplier <nl> @ @ - 106 , 18 + 107 , 24 @ @ public class NetworkHooks <nl> Container c = containerSupplier . createContainer ( player . inventory , player ) ; <nl> player . closeScreen ( ) ; <nl> player . getNextWindowId ( ) ; <nl> + int openContainer = player . currentWindowId ; <nl> player . openContainer = c ; <nl> - player . openContainer . windowId = player . currentWindowId ; <nl> + player . openContainer . windowId = openContainer ; <nl> player . openContainer . addListener ( player ) ; <nl> MinecraftForge . EVENT _ BUS . post ( new PlayerContainerEvent . Open ( player , c ) ) ; <nl> <nl> + PacketBuffer output = new PacketBuffer ( Unpooled . buffer ( ) ) ; <nl> if ( extraData = = null ) { <nl> - extraData = new PacketBuffer ( Unpooled . buffer ( ) ) ; <nl> + output . writeVarInt ( 0 ) ; <nl> + } else { <nl> + output . writeVarInt ( extraData . readableBytes ( ) ) ; <nl> + output . writeBytes ( extraData ) ; <nl> } <nl> - if ( extraData . readableBytes ( ) > 32600 ) { <nl> - throw new IllegalArgumentException ( " GUI Open packet too large : " + extraData . readableBytes ( ) ) ; <nl> + <nl> + if ( output . readableBytes ( ) > 32600 | | output . readableBytes ( ) < 1 ) { <nl> + throw new IllegalArgumentException ( " Invalid PacketBuffer for openGui , found " + output . readableBytes ( ) + " bytes " ) ; <nl> } <nl> - FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , extraData ) ; <nl> + FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , openContainer , output ) ; <nl> FMLPlayHandler . channel . sendTo ( msg , player . connection . getNetworkManager ( ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / storage / SaveHandler . java . patch b / patches / minecraft / net / minecraft / world / storage / SaveHandler . java . patch <nl> new file mode 100644 <nl> index 0000000 . . eaef04a <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / storage / SaveHandler . java . patch <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / storage / SaveHandler . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / storage / SaveHandler . java <nl> + @ @ - 254 , 6 + 254 , 7 @ @ <nl> + } <nl> + <nl> + file1 . renameTo ( file2 ) ; <nl> + + net . minecraftforge . event . ForgeEventFactory . firePlayerSavingEvent ( p _ 75753 _ 1 _ , this . field _ 75771 _ c , p _ 75753 _ 1 _ . func _ 110124 _ au ( ) . toString ( ) ) ; <nl> + } <nl> + catch ( Exception exception ) <nl> + { <nl> + @ @ - 270 , 6 + 271 , 7 @ @ <nl> + p _ 75752 _ 1 _ . func _ 70020 _ e ( nbttagcompound ) ; <nl> + } <nl> + <nl> + + net . minecraftforge . event . ForgeEventFactory . firePlayerLoadingEvent ( p _ 75752 _ 1 _ , field _ 75771 _ c , p _ 75752 _ 1 _ . func _ 110124 _ au ( ) . toString ( ) ) ; <nl> + return nbttagcompound ; <nl> + } <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> index c19f4a9 . . 2b88ff0 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package net . minecraftforge . event ; <nl> <nl> + import java . io . File ; <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> import cpw . mods . fml . common . eventhandler . Event . Result ; <nl> @ @ - 170 , 4 + 171 , 14 @ @ public class ForgeEventFactory <nl> { <nl> MinecraftForge . EVENT _ BUS . post ( new PlayerEvent . StopTracking ( player , entity ) ) ; <nl> } <nl> + <nl> + public static void firePlayerLoadingEvent ( EntityPlayer player , File playerDirectory , String uuidString ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new PlayerEvent . SaveToFile ( player , playerDirectory , uuidString ) ) ; <nl> + } <nl> + <nl> + public static void firePlayerSavingEvent ( EntityPlayer player , File playerDirectory , String uuidString ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new PlayerEvent . SaveToFile ( player , playerDirectory , uuidString ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / event / entity / player / PlayerEvent . java b / src / main / java / net / minecraftforge / event / entity / player / PlayerEvent . java <nl> index 68c60a6 . . fbbc855 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / entity / player / PlayerEvent . java <nl> + + + b / src / main / java / net / minecraftforge / event / entity / player / PlayerEvent . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package net . minecraftforge . event . entity . player ; <nl> <nl> + import java . io . File ; <nl> import cpw . mods . fml . common . eventhandler . Cancelable ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . entity . Entity ; <nl> @ @ - 129 , 6 + 130 , 86 @ @ public class PlayerEvent extends LivingEvent <nl> super ( player ) ; <nl> this . target = target ; <nl> } <nl> - <nl> + <nl> + } <nl> + <nl> + / * * <nl> + * The player is being loaded from the world save . Note that the <nl> + * player won ' t have been added to the world yet . Intended to <nl> + * allow mods to load an additional file from the players directory <nl> + * containing additional mod related player data . <nl> + * / <nl> + public static class LoadFromFile extends PlayerEvent { <nl> + / * * <nl> + * The directory where player data is being stored . Use this <nl> + * to locate your mod additional file . <nl> + * / <nl> + public final File playerDirectory ; <nl> + / * * <nl> + * The UUID is the standard for player related file storage . <nl> + * It is broken out here for convenience for quick file generation . <nl> + * / <nl> + public final String playerUUID ; <nl> + <nl> + public LoadFromFile ( EntityPlayer player , File originDirectory , String playerUUID ) <nl> + { <nl> + super ( player ) ; <nl> + this . playerDirectory = originDirectory ; <nl> + this . playerUUID = playerUUID ; <nl> + } <nl> + <nl> + / * * <nl> + * Construct and return a recommended file for the supplied suffix <nl> + * @ param suffix The suffix to use . <nl> + * @ return <nl> + * / <nl> + public File getPlayerFile ( String suffix ) <nl> + { <nl> + if ( " dat " . equals ( suffix ) ) throw new IllegalArgumentException ( " The suffix ' dat ' is reserved " ) ; <nl> + return new File ( this . playerDirectory , this . playerUUID + " . " + suffix ) ; <nl> + } <nl> + } <nl> + / * * <nl> + * The player is being saved to the world store . Note that the <nl> + * player may be in the process of logging out or otherwise departing <nl> + * from the world . Don ' t assume it ' s association with the world . <nl> + * This allows mods to load an additional file from the players directory <nl> + * containing additional mod related player data . <nl> + * < br > <nl> + * Use this event to save the additional mod related player data to the world . <nl> + * <nl> + * < br > <nl> + * < em > WARNING < / em > : Do not overwrite the player ' s . dat file here . You will <nl> + * corrupt the world state . <nl> + * / <nl> + public static class SaveToFile extends PlayerEvent { <nl> + / * * <nl> + * The directory where player data is being stored . Use this <nl> + * to locate your mod additional file . <nl> + * / <nl> + public final File playerDirectory ; <nl> + / * * <nl> + * The UUID is the standard for player related file storage . <nl> + * It is broken out here for convenience for quick file generation . <nl> + * / <nl> + public final String playerUUID ; <nl> + <nl> + public SaveToFile ( EntityPlayer player , File originDirectory , String playerUUID ) <nl> + { <nl> + super ( player ) ; <nl> + this . playerDirectory = originDirectory ; <nl> + this . playerUUID = playerUUID ; <nl> + } <nl> + <nl> + / * * <nl> + * Construct and return a recommended file for the supplied suffix <nl> + * @ param suffix The suffix to use . <nl> + * @ return <nl> + * / <nl> + public File getPlayerFile ( String suffix ) <nl> + { <nl> + if ( " dat " . equals ( suffix ) ) throw new IllegalArgumentException ( " The suffix ' dat ' is reserved " ) ; <nl> + return new File ( this . playerDirectory , this . playerUUID + " . " + suffix ) ; <nl> + } <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 index 20131bb . . 494ebd4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 @ @ - 94 , 6 + 94 , 7 @ @ public class NetworkHooks 
 * The { @ link IInteractionObject # getGuiID ( ) } is treated as a { @ link ResourceLocation } . 
 * It should refer to a valid modId namespace , to trigger opening on the client . 
 * The namespace is directly used to lookup the modId in the client side . 
 + * The maximum size for # extraData is 32600 bytes . 
 * 
 * @ param player The player to open the GUI for 
 * @ param containerSupplier The Container Supplier 
 @ @ - 106 , 18 + 107 , 24 @ @ public class NetworkHooks 
 Container c = containerSupplier . createContainer ( player . inventory , player ) ; 
 player . closeScreen ( ) ; 
 player . getNextWindowId ( ) ; 
 + int openContainer = player . currentWindowId ; 
 player . openContainer = c ; 
 - player . openContainer . windowId = player . currentWindowId ; 
 + player . openContainer . windowId = openContainer ; 
 player . openContainer . addListener ( player ) ; 
 MinecraftForge . EVENT _ BUS . post ( new PlayerContainerEvent . Open ( player , c ) ) ; 
 
 + PacketBuffer output = new PacketBuffer ( Unpooled . buffer ( ) ) ; 
 if ( extraData = = null ) { 
 - extraData = new PacketBuffer ( Unpooled . buffer ( ) ) ; 
 + output . writeVarInt ( 0 ) ; 
 + } else { 
 + output . writeVarInt ( extraData . readableBytes ( ) ) ; 
 + output . writeBytes ( extraData ) ; 
 } 
 - if ( extraData . readableBytes ( ) > 32600 ) { 
 - throw new IllegalArgumentException ( " GUI Open packet too large : " + extraData . readableBytes ( ) ) ; 
 + 
 + if ( output . readableBytes ( ) > 32600 | | output . readableBytes ( ) < 1 ) { 
 + throw new IllegalArgumentException ( " Invalid PacketBuffer for openGui , found " + output . readableBytes ( ) + " bytes " ) ; 
 } 
 - FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , extraData ) ; 
 + FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , openContainer , output ) ; 
 FMLPlayHandler . channel . sendTo ( msg , player . connection . getNetworkManager ( ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / storage / SaveHandler . java . patch b / patches / minecraft / net / minecraft / world / storage / SaveHandler . java . patch 
 new file mode 100644 
 index 0000000 . . eaef04a 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / storage / SaveHandler . java . patch 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / storage / SaveHandler . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / storage / SaveHandler . java 
 + @ @ - 254 , 6 + 254 , 7 @ @ 
 + } 
 + 
 + file1 . renameTo ( file2 ) ; 
 + + net . minecraftforge . event . ForgeEventFactory . firePlayerSavingEvent ( p _ 75753 _ 1 _ , this . field _ 75771 _ c , p _ 75753 _ 1 _ . func _ 110124 _ au ( ) . toString ( ) ) ; 
 + } 
 + catch ( Exception exception ) 
 + { 
 + @ @ - 270 , 6 + 271 , 7 @ @ 
 + p _ 75752 _ 1 _ . func _ 70020 _ e ( nbttagcompound ) ; 
 + } 
 + 
 + + net . minecraftforge . event . ForgeEventFactory . firePlayerLoadingEvent ( p _ 75752 _ 1 _ , field _ 75771 _ c , p _ 75752 _ 1 _ . func _ 110124 _ au ( ) . toString ( ) ) ; 
 + return nbttagcompound ; 
 + } 
 + 
 diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 index c19f4a9 . . 2b88ff0 100644 
 - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package net . minecraftforge . event ; 
 
 + import java . io . File ; 
 import java . util . ArrayList ; 
 import java . util . List ; 
 import cpw . mods . fml . common . eventhandler . Event . Result ; 
 @ @ - 170 , 4 + 171 , 14 @ @ public class ForgeEventFactory 
 { 
 MinecraftForge . EVENT _ BUS . post ( new PlayerEvent . StopTracking ( player , entity ) ) ; 
 } 
 + 
 + public static void firePlayerLoadingEvent ( EntityPlayer player , File playerDirectory , String uuidString ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new PlayerEvent . SaveToFile ( player , playerDirectory , uuidString ) ) ; 
 + } 
 + 
 + public static void firePlayerSavingEvent ( EntityPlayer player , File playerDirectory , String uuidString ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new PlayerEvent . SaveToFile ( player , playerDirectory , uuidString ) ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / event / entity / player / PlayerEvent . java b / src / main / java / net / minecraftforge / event / entity / player / PlayerEvent . java 
 index 68c60a6 . . fbbc855 100644 
 - - - a / src / main / java / net / minecraftforge / event / entity / player / PlayerEvent . java 
 + + + b / src / main / java / net / minecraftforge / event / entity / player / PlayerEvent . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package net . minecraftforge . event . entity . player ; 
 
 + import java . io . File ; 
 import cpw . mods . fml . common . eventhandler . Cancelable ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . entity . Entity ; 
 @ @ - 129 , 6 + 130 , 86 @ @ public class PlayerEvent extends LivingEvent 
 super ( player ) ; 
 this . target = target ; 
 } 
 - 
 + 
 + } 
 + 
 + / * * 
 + * The player is being loaded from the world save . Note that the 
 + * player won ' t have been added to the world yet . Intended to 
 + * allow mods to load an additional file from the players directory 
 + * containing additional mod related player data . 
 + * / 
 + public static class LoadFromFile extends PlayerEvent { 
 + / * * 
 + * The directory where player data is being stored . Use this 
 + * to locate your mod additional file . 
 + * / 
 + public final File playerDirectory ; 
 + / * * 
 + * The UUID is the standard for player related file storage . 
 + * It is broken out here for convenience for quick file generation . 
 + * / 
 + public final String playerUUID ; 
 + 
 + public LoadFromFile ( EntityPlayer player , File originDirectory , String playerUUID ) 
 + { 
 + super ( player ) ; 
 + this . playerDirectory = originDirectory ; 
 + this . playerUUID = playerUUID ; 
 + } 
 + 
 + / * * 
 + * Construct and return a recommended file for the supplied suffix 
 + * @ param suffix The suffix to use . 
 + * @ return 
 + * / 
 + public File getPlayerFile ( String suffix ) 
 + { 
 + if ( " dat " . equals ( suffix ) ) throw new IllegalArgumentException ( " The suffix ' dat ' is reserved " ) ; 
 + return new File ( this . playerDirectory , this . playerUUID + " . " + suffix ) ; 
 + } 
 + } 
 + / * * 
 + * The player is being saved to the world store . Note that the 
 + * player may be in the process of logging out or otherwise departing 
 + * from the world . Don ' t assume it ' s association with the world . 
 + * This allows mods to load an additional file from the players directory 
 + * containing additional mod related player data . 
 + * < br > 
 + * Use this event to save the additional mod related player data to the world . 
 + * 
 + * < br > 
 + * < em > WARNING < / em > : Do not overwrite the player ' s . dat file here . You will 
 + * corrupt the world state . 
 + * / 
 + public static class SaveToFile extends PlayerEvent { 
 + / * * 
 + * The directory where player data is being stored . Use this 
 + * to locate your mod additional file . 
 + * / 
 + public final File playerDirectory ; 
 + / * * 
 + * The UUID is the standard for player related file storage . 
 + * It is broken out here for convenience for quick file generation . 
 + * / 
 + public final String playerUUID ; 
 + 
 + public SaveToFile ( EntityPlayer player , File originDirectory , String playerUUID ) 
 + { 
 + super ( player ) ; 
 + this . playerDirectory = originDirectory ; 
 + this . playerUUID = playerUUID ; 
 + } 
 + 
 + / * * 
 + * Construct and return a recommended file for the supplied suffix 
 + * @ param suffix The suffix to use . 
 + * @ return 
 + * / 
 + public File getPlayerFile ( String suffix ) 
 + { 
 + if ( " dat " . equals ( suffix ) ) throw new IllegalArgumentException ( " The suffix ' dat ' is reserved " ) ; 
 + return new File ( this . playerDirectory , this . playerUUID + " . " + suffix ) ; 
 + } 
 } 
 }
