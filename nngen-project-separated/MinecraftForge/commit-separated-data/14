BLEU SCORE: 0.018738883683389617

TEST MSG: Add a hook to allow continuously using items through stack changes
GENERATED MSG: Added EquipmentChangeEvent

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> index bc8f369 . . 4f156f5 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> @ @ - 349 , 10 + 349 , 14 @ @ <nl> if ( ! itemstack . func _ 190926 _ b ( ) ) { <nl> this . func _ 110140 _ aT ( ) . func _ 111148 _ a ( itemstack . func _ 111283 _ C ( entityequipmentslot ) ) ; <nl> } <nl> - @ @ - 2134 , 11 + 2186 , 18 @ @ <nl> + @ @ - 2133 , 12 + 2185 , 21 @ @ <nl> + <nl> protected void func _ 184608 _ ct ( ) { <nl> if ( this . func _ 184587 _ cr ( ) ) { <nl> - if ( this . func _ 184586 _ b ( this . func _ 184600 _ cs ( ) ) = = this . field _ 184627 _ bm ) { <nl> + - if ( this . func _ 184586 _ b ( this . func _ 184600 _ cs ( ) ) = = this . field _ 184627 _ bm ) { <nl> + + ItemStack itemstack = this . func _ 184586 _ b ( this . func _ 184600 _ cs ( ) ) ; <nl> + + if ( net . minecraftforge . common . ForgeHooks . canContinueUsing ( this . field _ 184627 _ bm , itemstack ) ) this . field _ 184627 _ bm = itemstack ; <nl> + + if ( itemstack = = this . field _ 184627 _ bm ) { <nl> + <nl> + if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) ) { <nl> + field _ 184628 _ bn = net . minecraftforge . event . ForgeEventFactory . onItemUseTick ( this , field _ 184627 _ bm , field _ 184628 _ bn ) ; <nl> @ @ - 369 , 7 + 373 , 7 @ @ <nl> this . func _ 71036 _ o ( ) ; <nl> } <nl> } else { <nl> - @ @ - 2172 , 8 + 2231 , 10 @ @ <nl> + @ @ - 2172 , 8 + 2233 , 10 @ @ <nl> public void func _ 184598 _ c ( EnumHand p _ 184598 _ 1 _ ) { <nl> ItemStack itemstack = this . func _ 184586 _ b ( p _ 184598 _ 1 _ ) ; <nl> if ( ! itemstack . func _ 190926 _ b ( ) & & ! this . func _ 184587 _ cr ( ) ) { <nl> @ @ - 381 , 7 + 385 , 7 @ @ <nl> if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) { <nl> this . func _ 204802 _ c ( 1 , true ) ; <nl> this . func _ 204802 _ c ( 2 , p _ 184598 _ 1 _ = = EnumHand . OFF _ HAND ) ; <nl> - @ @ - 2229 , 6 + 2290 , 9 @ @ <nl> + @ @ - 2229 , 6 + 2292 , 9 @ @ <nl> vec3d1 = vec3d1 . func _ 178789 _ a ( - this . field _ 70125 _ A * ( ( float ) Math . PI / 180F ) ) ; <nl> vec3d1 = vec3d1 . func _ 178785 _ b ( - this . field _ 70177 _ z * ( ( float ) Math . PI / 180F ) ) ; <nl> vec3d1 = vec3d1 . func _ 72441 _ c ( this . field _ 70165 _ t , this . field _ 70163 _ u + ( double ) this . func _ 70047 _ e ( ) , this . field _ 70161 _ v ) ; <nl> @ @ - 391 , 7 + 395 , 7 @ @ <nl> this . field _ 70170 _ p . func _ 195594 _ a ( new ItemParticleData ( Particles . field _ 197591 _ B , p _ 195062 _ 1 _ ) , vec3d1 . field _ 72450 _ a , vec3d1 . field _ 72448 _ b , vec3d1 . field _ 72449 _ c , vec3d . field _ 72450 _ a , vec3d . field _ 72448 _ b + 0 . 05D , vec3d . field _ 72449 _ c ) ; <nl> } <nl> <nl> - @ @ - 2237 , 7 + 2301 , 9 @ @ <nl> + @ @ - 2237 , 7 + 2303 , 9 @ @ <nl> protected void func _ 71036 _ o ( ) { <nl> if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) & & this . func _ 184587 _ cr ( ) ) { <nl> this . func _ 184584 _ a ( this . field _ 184627 _ bm , 16 ) ; <nl> @ @ - 402 , 7 + 406 , 7 @ @ <nl> this . func _ 184602 _ cy ( ) ; <nl> } <nl> <nl> - @ @ - 2257 , 6 + 2323 , 7 @ @ <nl> + @ @ - 2257 , 6 + 2325 , 7 @ @ <nl> <nl> public void func _ 184597 _ cx ( ) { <nl> if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) ) { <nl> @ @ - 410 , 7 + 414 , 7 @ @ <nl> this . field _ 184627 _ bm . func _ 77974 _ b ( this . field _ 70170 _ p , this , this . func _ 184605 _ cv ( ) ) ; <nl> } <nl> <nl> - @ @ - 2363 , 4 + 2430 , 62 @ @ <nl> + @ @ - 2363 , 4 + 2432 , 62 @ @ <nl> @ OnlyIn ( Dist . CLIENT ) <nl> public void func _ 191987 _ a ( BlockPos p _ 191987 _ 1 _ , boolean p _ 191987 _ 2 _ ) { <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index e7621b0 . . 3044c9a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 183 , 6 + 183 , 15 @ @ public class ForgeHooks <nl> return entry . getStack ( rand , fortune ) ; <nl> } <nl> <nl> + public static boolean canContinueUsing ( @ Nonnull ItemStack from , @ Nonnull ItemStack to ) <nl> + { <nl> + if ( ! from . isEmpty ( ) & & ! to . isEmpty ( ) ) <nl> + { <nl> + return from . getItem ( ) . canContinueUsing ( from , to ) ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> public static boolean canHarvestBlock ( @ Nonnull IBlockState state , @ Nonnull EntityPlayer player , @ Nonnull IBlockReader world , @ Nonnull BlockPos pos ) <nl> { <nl> / / state = state . getActualState ( world , pos ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java b / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java <nl> index 1c047df . . e14ee36 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java <nl> + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java <nl> @ @ - 648 , 6 + 648 , 20 @ @ public interface IForgeItem <nl> } <nl> <nl> / * * <nl> + * Called while an item is in ' active ' use to determine if usage should <nl> + * continue . Allows items to continue being used while sustaining damage , for <nl> + * example . <nl> + * <nl> + * @ param oldStack the previous ' active ' stack <nl> + * @ param newStack the stack currently in the active hand <nl> + * @ return true to set the new stack to active and continue using it <nl> + * / <nl> + default boolean canContinueUsing ( ItemStack oldStack , ItemStack newStack ) <nl> + { <nl> + return oldStack . equals ( newStack ) ; <nl> + } <nl> + <nl> + / * * <nl> * Called to get the Mod ID of the mod that * created * the ItemStack , instead of <nl> * the real Mod ID that * registered * it . <nl> * <nl> diff - - git a / src / test / java / net / minecraftforge / debug / item / ContinuousUseItemTest . java b / src / test / java / net / minecraftforge / debug / item / ContinuousUseItemTest . java <nl> new file mode 100644 <nl> index 0000000 . . 02c02db <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / item / ContinuousUseItemTest . java <nl> @ @ - 0 , 0 + 1 , 133 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . debug . item ; <nl> + <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . EntityLivingBase ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . item . EnumAction ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . ActionResult ; <nl> + import net . minecraft . util . EnumActionResult ; <nl> + import net . minecraft . util . EnumHand ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + @ Mod ( modid = ContinuousUseItemTest . MOD _ ID , name = " Test for canContinueUsing " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + @ Mod . EventBusSubscriber <nl> + public class ContinuousUseItemTest <nl> + { <nl> + static final String MOD _ ID = " continuous _ use _ item _ test " ; <nl> + static final boolean ENABLED = false ; <nl> + <nl> + @ GameRegistry . ObjectHolder ( TestItem . NAME ) <nl> + public static final Item TEST _ ITEM = null ; <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerItem ( RegistryEvent . Register < Item > event ) <nl> + { <nl> + if ( ENABLED ) <nl> + { <nl> + event . getRegistry ( ) . register ( <nl> + new TestItem ( ) . setRegistryName ( MOD _ ID , TestItem . NAME ) <nl> + . setUnlocalizedName ( MOD _ ID + " . " + TestItem . NAME ) <nl> + . setCreativeTab ( CreativeTabs . MISC ) <nl> + ) ; <nl> + } <nl> + } <nl> + <nl> + @ Mod . EventBusSubscriber ( value = Side . CLIENT , modid = MOD _ ID ) <nl> + public static class ClientEventHandler <nl> + { <nl> + @ SubscribeEvent <nl> + public static void registerModels ( ModelRegistryEvent event ) <nl> + { <nl> + if ( ENABLED ) <nl> + { <nl> + ModelLoader . setCustomModelResourceLocation ( TEST _ ITEM , 0 , new ModelResourceLocation ( " minecraft : stick " , " inventory " ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + static class TestItem extends Item <nl> + { <nl> + static final String NAME = " test _ item " ; <nl> + <nl> + TestItem ( ) <nl> + { <nl> + maxStackSize = 1 ; <nl> + setMaxDamage ( 60 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasEffect ( ItemStack stack ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public EnumAction getItemUseAction ( ItemStack stack ) <nl> + { <nl> + return EnumAction . BOW ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getMaxItemUseDuration ( ItemStack stack ) <nl> + { <nl> + return 72000 ; <nl> + } <nl> + <nl> + @ Override <nl> + public ActionResult < ItemStack > onItemRightClick ( World worldIn , EntityPlayer playerIn , EnumHand handIn ) <nl> + { <nl> + playerIn . setActiveHand ( handIn ) ; <nl> + return new ActionResult < > ( EnumActionResult . SUCCESS , playerIn . getHeldItem ( handIn ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onUsingTick ( ItemStack stack , EntityLivingBase living , int count ) <nl> + { <nl> + if ( count % 10 = = 0 ) <nl> + { <nl> + stack . damageItem ( 1 , living ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean shouldCauseReequipAnimation ( ItemStack oldStack , ItemStack newStack , boolean slotChanged ) <nl> + { <nl> + return slotChanged | | oldStack . getItem ( ) ! = newStack . getItem ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean canContinueUsing ( ItemStack oldStack , ItemStack newStack ) <nl> + { <nl> + return oldStack . getItem ( ) = = newStack . getItem ( ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> index a6547e9 . . 1a7edb7 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> @ @ - 199 , 7 + 199 , 15 @ @ <nl> super . func _ 70071 _ h _ ( ) ; <nl> this . func _ 184608 _ ct ( ) ; <nl> <nl> - @ @ - 2488 , 6 + 2514 , 40 @ @ <nl> + @ @ - 2015 , 6 + 2041 , 7 @ @ <nl> + if ( ! ItemStack . func _ 77989 _ b ( itemstack1 , itemstack ) ) <nl> + { <nl> + ( ( WorldServer ) this . field _ 70170 _ p ) . func _ 73039 _ n ( ) . func _ 151247 _ a ( this , new SPacketEntityEquipment ( this . func _ 145782 _ y ( ) , entityequipmentslot , itemstack1 ) ) ; <nl> + + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . event . entity . living . LivingEquipmentChangeEvent ( this , entityequipmentslot , itemstack , itemstack1 ) ) ; <nl> + <nl> + if ( ! itemstack . func _ 190926 _ b ( ) ) <nl> + { <nl> + @ @ - 2488 , 6 + 2515 , 40 @ @ <nl> this . field _ 70752 _ e = true ; <nl> } <nl> <nl> @ @ - 240 , 7 + 248 , 7 @ @ <nl> public abstract EnumHandSide func _ 184591 _ cq ( ) ; <nl> <nl> public boolean func _ 184587 _ cr ( ) <nl> - @ @ - 2508 , 12 + 2568 , 19 @ @ <nl> + @ @ - 2508 , 12 + 2569 , 19 @ @ <nl> <nl> if ( itemstack = = this . field _ 184627 _ bm ) <nl> { <nl> @ @ - 261 , 7 + 269 , 7 @ @ <nl> { <nl> this . func _ 71036 _ o ( ) ; <nl> } <nl> - @ @ - 2531 , 8 + 2598 , 10 @ @ <nl> + @ @ - 2531 , 8 + 2599 , 10 @ @ <nl> <nl> if ( ! itemstack . func _ 190926 _ b ( ) & & ! this . func _ 184587 _ cr ( ) ) <nl> { <nl> @ @ - 273 , 7 + 281 , 7 @ @ <nl> <nl> if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) <nl> { <nl> - @ @ - 2613 , 7 + 2682 , 9 @ @ <nl> + @ @ - 2613 , 7 + 2683 , 9 @ @ <nl> if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) & & this . func _ 184587 _ cr ( ) ) <nl> { <nl> this . func _ 184584 _ a ( this . field _ 184627 _ bm , 16 ) ; <nl> @ @ - 284 , 7 + 292 , 7 @ @ <nl> this . func _ 184602 _ cy ( ) ; <nl> } <nl> } <nl> - @ @ - 2637 , 7 + 2708 , 8 @ @ <nl> + @ @ - 2637 , 7 + 2709 , 8 @ @ <nl> { <nl> if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) ) <nl> { <nl> @ @ - 294 , 7 + 302 , 7 @ @ <nl> } <nl> <nl> this . func _ 184602 _ cy ( ) ; <nl> - @ @ - 2761 , 4 + 2833 , 29 @ @ <nl> + @ @ - 2761 , 4 + 2834 , 29 @ @ <nl> { <nl> return true ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / event / entity / living / LivingEquipmentChangeEvent . java b / src / main / java / net / minecraftforge / event / entity / living / LivingEquipmentChangeEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 1495e52 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / entity / living / LivingEquipmentChangeEvent . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . event . entity . living ; <nl> + <nl> + import net . minecraft . entity . EntityLivingBase ; <nl> + import net . minecraft . inventory . EntityEquipmentSlot ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> + <nl> + / * * <nl> + * { @ link LivingEquipmentChangeEvent } is fired when the Equipment of a Entity changes . < br > <nl> + * This event is fired whenever changes in Equipment are detected in { @ link EntityLivingBase # onUpdate ( ) } . < br > <nl> + * This also includes entities joining the World , as well as being cloned . < br > <nl> + * This event is fired on server - side only . < br > <nl> + * < br > <nl> + * { @ link # slot } contains the affected { @ link EntityEquipmentSlot } . < br > <nl> + * { @ link # from } contains the { @ link ItemStack } that was equipped previously . < br > <nl> + * { @ link # to } contains the { @ link ItemStack } that is equipped now . < br > <nl> + * < br > <nl> + * This event is not { @ link Cancelable } . < br > <nl> + * < br > <nl> + * This event does not have a result . { @ link HasResult } < br > <nl> + * < br > <nl> + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . <nl> + * * / <nl> + public class LivingEquipmentChangeEvent extends LivingEvent <nl> + { <nl> + private final EntityEquipmentSlot slot ; <nl> + private final ItemStack from ; <nl> + private final ItemStack to ; <nl> + <nl> + public LivingEquipmentChangeEvent ( EntityLivingBase entity , EntityEquipmentSlot slot , ItemStack from , ItemStack to ) <nl> + { <nl> + super ( entity ) ; <nl> + this . slot = slot ; <nl> + this . from = from ; <nl> + this . to = to ; <nl> + } <nl> + <nl> + public EntityEquipmentSlot getSlot ( ) { return this . slot ; } <nl> + public ItemStack getFrom ( ) { return this . from ; } <nl> + public ItemStack getTo ( ) { return this . to ; } <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / EquipmentChangeTest . java b / src / test / java / net / minecraftforge / debug / EquipmentChangeTest . java <nl> new file mode 100644 <nl> index 0000000 . . 6588e55 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / EquipmentChangeTest . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . entity . living . LivingEquipmentChangeEvent ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + @ Mod ( modid = " equipment _ change _ test " , version = " 1 . 0 . 0 " ) <nl> + public class EquipmentChangeTest <nl> + { <nl> + <nl> + @ Mod . EventHandler <nl> + public void onInit ( FMLInitializationEvent event ) <nl> + { <nl> + / / register the eventhandler <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + } <nl> + <nl> + / * * <nl> + * the Method handling the { @ link LivingEquipmentChangeEvent } <nl> + * Serverside only ! <nl> + * / <nl> + @ SubscribeEvent <nl> + public void onEquipmentChange ( LivingEquipmentChangeEvent event ) <nl> + { <nl> + / / a debug console print <nl> + FMLLog . info ( " [ Equipment - Change ] " + event . getEntity ( ) + " changed his Equipment in " <nl> + + event . getSlot ( ) + " from " + event . getFrom ( ) + " to " + event . getTo ( ) ) ; <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 index bc8f369 . . 4f156f5 100644 
 - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 @ @ - 349 , 10 + 349 , 14 @ @ 
 if ( ! itemstack . func _ 190926 _ b ( ) ) { 
 this . func _ 110140 _ aT ( ) . func _ 111148 _ a ( itemstack . func _ 111283 _ C ( entityequipmentslot ) ) ; 
 } 
 - @ @ - 2134 , 11 + 2186 , 18 @ @ 
 + @ @ - 2133 , 12 + 2185 , 21 @ @ 
 + 
 protected void func _ 184608 _ ct ( ) { 
 if ( this . func _ 184587 _ cr ( ) ) { 
 - if ( this . func _ 184586 _ b ( this . func _ 184600 _ cs ( ) ) = = this . field _ 184627 _ bm ) { 
 + - if ( this . func _ 184586 _ b ( this . func _ 184600 _ cs ( ) ) = = this . field _ 184627 _ bm ) { 
 + + ItemStack itemstack = this . func _ 184586 _ b ( this . func _ 184600 _ cs ( ) ) ; 
 + + if ( net . minecraftforge . common . ForgeHooks . canContinueUsing ( this . field _ 184627 _ bm , itemstack ) ) this . field _ 184627 _ bm = itemstack ; 
 + + if ( itemstack = = this . field _ 184627 _ bm ) { 
 + 
 + if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) ) { 
 + field _ 184628 _ bn = net . minecraftforge . event . ForgeEventFactory . onItemUseTick ( this , field _ 184627 _ bm , field _ 184628 _ bn ) ; 
 @ @ - 369 , 7 + 373 , 7 @ @ 
 this . func _ 71036 _ o ( ) ; 
 } 
 } else { 
 - @ @ - 2172 , 8 + 2231 , 10 @ @ 
 + @ @ - 2172 , 8 + 2233 , 10 @ @ 
 public void func _ 184598 _ c ( EnumHand p _ 184598 _ 1 _ ) { 
 ItemStack itemstack = this . func _ 184586 _ b ( p _ 184598 _ 1 _ ) ; 
 if ( ! itemstack . func _ 190926 _ b ( ) & & ! this . func _ 184587 _ cr ( ) ) { 
 @ @ - 381 , 7 + 385 , 7 @ @ 
 if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) { 
 this . func _ 204802 _ c ( 1 , true ) ; 
 this . func _ 204802 _ c ( 2 , p _ 184598 _ 1 _ = = EnumHand . OFF _ HAND ) ; 
 - @ @ - 2229 , 6 + 2290 , 9 @ @ 
 + @ @ - 2229 , 6 + 2292 , 9 @ @ 
 vec3d1 = vec3d1 . func _ 178789 _ a ( - this . field _ 70125 _ A * ( ( float ) Math . PI / 180F ) ) ; 
 vec3d1 = vec3d1 . func _ 178785 _ b ( - this . field _ 70177 _ z * ( ( float ) Math . PI / 180F ) ) ; 
 vec3d1 = vec3d1 . func _ 72441 _ c ( this . field _ 70165 _ t , this . field _ 70163 _ u + ( double ) this . func _ 70047 _ e ( ) , this . field _ 70161 _ v ) ; 
 @ @ - 391 , 7 + 395 , 7 @ @ 
 this . field _ 70170 _ p . func _ 195594 _ a ( new ItemParticleData ( Particles . field _ 197591 _ B , p _ 195062 _ 1 _ ) , vec3d1 . field _ 72450 _ a , vec3d1 . field _ 72448 _ b , vec3d1 . field _ 72449 _ c , vec3d . field _ 72450 _ a , vec3d . field _ 72448 _ b + 0 . 05D , vec3d . field _ 72449 _ c ) ; 
 } 
 
 - @ @ - 2237 , 7 + 2301 , 9 @ @ 
 + @ @ - 2237 , 7 + 2303 , 9 @ @ 
 protected void func _ 71036 _ o ( ) { 
 if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) & & this . func _ 184587 _ cr ( ) ) { 
 this . func _ 184584 _ a ( this . field _ 184627 _ bm , 16 ) ; 
 @ @ - 402 , 7 + 406 , 7 @ @ 
 this . func _ 184602 _ cy ( ) ; 
 } 
 
 - @ @ - 2257 , 6 + 2323 , 7 @ @ 
 + @ @ - 2257 , 6 + 2325 , 7 @ @ 
 
 public void func _ 184597 _ cx ( ) { 
 if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) ) { 
 @ @ - 410 , 7 + 414 , 7 @ @ 
 this . field _ 184627 _ bm . func _ 77974 _ b ( this . field _ 70170 _ p , this , this . func _ 184605 _ cv ( ) ) ; 
 } 
 
 - @ @ - 2363 , 4 + 2430 , 62 @ @ 
 + @ @ - 2363 , 4 + 2432 , 62 @ @ 
 @ OnlyIn ( Dist . CLIENT ) 
 public void func _ 191987 _ a ( BlockPos p _ 191987 _ 1 _ , boolean p _ 191987 _ 2 _ ) { 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index e7621b0 . . 3044c9a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 183 , 6 + 183 , 15 @ @ public class ForgeHooks 
 return entry . getStack ( rand , fortune ) ; 
 } 
 
 + public static boolean canContinueUsing ( @ Nonnull ItemStack from , @ Nonnull ItemStack to ) 
 + { 
 + if ( ! from . isEmpty ( ) & & ! to . isEmpty ( ) ) 
 + { 
 + return from . getItem ( ) . canContinueUsing ( from , to ) ; 
 + } 
 + return false ; 
 + } 
 + 
 public static boolean canHarvestBlock ( @ Nonnull IBlockState state , @ Nonnull EntityPlayer player , @ Nonnull IBlockReader world , @ Nonnull BlockPos pos ) 
 { 
 / / state = state . getActualState ( world , pos ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java b / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java 
 index 1c047df . . e14ee36 100644 
 - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java 
 + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java 
 @ @ - 648 , 6 + 648 , 20 @ @ public interface IForgeItem 
 } 
 
 / * * 
 + * Called while an item is in ' active ' use to determine if usage should 
 + * continue . Allows items to continue being used while sustaining damage , for 
 + * example . 
 + * 
 + * @ param oldStack the previous ' active ' stack 
 + * @ param newStack the stack currently in the active hand 
 + * @ return true to set the new stack to active and continue using it 
 + * / 
 + default boolean canContinueUsing ( ItemStack oldStack , ItemStack newStack ) 
 + { 
 + return oldStack . equals ( newStack ) ; 
 + } 
 + 
 + / * * 
 * Called to get the Mod ID of the mod that * created * the ItemStack , instead of 
 * the real Mod ID that * registered * it . 
 * 
 diff - - git a / src / test / java / net / minecraftforge / debug / item / ContinuousUseItemTest . java b / src / test / java / net / minecraftforge / debug / item / ContinuousUseItemTest . java 
 new file mode 100644 
 index 0000000 . . 02c02db 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / item / ContinuousUseItemTest . java 
 @ @ - 0 , 0 + 1 , 133 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . debug . item ; 
 + 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . EntityLivingBase ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . item . EnumAction ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . ActionResult ; 
 + import net . minecraft . util . EnumActionResult ; 
 + import net . minecraft . util . EnumHand ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . client . event . ModelRegistryEvent ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + @ Mod ( modid = ContinuousUseItemTest . MOD _ ID , name = " Test for canContinueUsing " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + @ Mod . EventBusSubscriber 
 + public class ContinuousUseItemTest 
 + { 
 + static final String MOD _ ID = " continuous _ use _ item _ test " ; 
 + static final boolean ENABLED = false ; 
 + 
 + @ GameRegistry . ObjectHolder ( TestItem . NAME ) 
 + public static final Item TEST _ ITEM = null ; 
 + 
 + @ SubscribeEvent 
 + public static void registerItem ( RegistryEvent . Register < Item > event ) 
 + { 
 + if ( ENABLED ) 
 + { 
 + event . getRegistry ( ) . register ( 
 + new TestItem ( ) . setRegistryName ( MOD _ ID , TestItem . NAME ) 
 + . setUnlocalizedName ( MOD _ ID + " . " + TestItem . NAME ) 
 + . setCreativeTab ( CreativeTabs . MISC ) 
 + ) ; 
 + } 
 + } 
 + 
 + @ Mod . EventBusSubscriber ( value = Side . CLIENT , modid = MOD _ ID ) 
 + public static class ClientEventHandler 
 + { 
 + @ SubscribeEvent 
 + public static void registerModels ( ModelRegistryEvent event ) 
 + { 
 + if ( ENABLED ) 
 + { 
 + ModelLoader . setCustomModelResourceLocation ( TEST _ ITEM , 0 , new ModelResourceLocation ( " minecraft : stick " , " inventory " ) ) ; 
 + } 
 + } 
 + } 
 + 
 + static class TestItem extends Item 
 + { 
 + static final String NAME = " test _ item " ; 
 + 
 + TestItem ( ) 
 + { 
 + maxStackSize = 1 ; 
 + setMaxDamage ( 60 ) ; 
 + } 
 + 
 + @ Override 
 + public boolean hasEffect ( ItemStack stack ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public EnumAction getItemUseAction ( ItemStack stack ) 
 + { 
 + return EnumAction . BOW ; 
 + } 
 + 
 + @ Override 
 + public int getMaxItemUseDuration ( ItemStack stack ) 
 + { 
 + return 72000 ; 
 + } 
 + 
 + @ Override 
 + public ActionResult < ItemStack > onItemRightClick ( World worldIn , EntityPlayer playerIn , EnumHand handIn ) 
 + { 
 + playerIn . setActiveHand ( handIn ) ; 
 + return new ActionResult < > ( EnumActionResult . SUCCESS , playerIn . getHeldItem ( handIn ) ) ; 
 + } 
 + 
 + @ Override 
 + public void onUsingTick ( ItemStack stack , EntityLivingBase living , int count ) 
 + { 
 + if ( count % 10 = = 0 ) 
 + { 
 + stack . damageItem ( 1 , living ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean shouldCauseReequipAnimation ( ItemStack oldStack , ItemStack newStack , boolean slotChanged ) 
 + { 
 + return slotChanged | | oldStack . getItem ( ) ! = newStack . getItem ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean canContinueUsing ( ItemStack oldStack , ItemStack newStack ) 
 + { 
 + return oldStack . getItem ( ) = = newStack . getItem ( ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 index a6547e9 . . 1a7edb7 100644 
 - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 @ @ - 199 , 7 + 199 , 15 @ @ 
 super . func _ 70071 _ h _ ( ) ; 
 this . func _ 184608 _ ct ( ) ; 
 
 - @ @ - 2488 , 6 + 2514 , 40 @ @ 
 + @ @ - 2015 , 6 + 2041 , 7 @ @ 
 + if ( ! ItemStack . func _ 77989 _ b ( itemstack1 , itemstack ) ) 
 + { 
 + ( ( WorldServer ) this . field _ 70170 _ p ) . func _ 73039 _ n ( ) . func _ 151247 _ a ( this , new SPacketEntityEquipment ( this . func _ 145782 _ y ( ) , entityequipmentslot , itemstack1 ) ) ; 
 + + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . event . entity . living . LivingEquipmentChangeEvent ( this , entityequipmentslot , itemstack , itemstack1 ) ) ; 
 + 
 + if ( ! itemstack . func _ 190926 _ b ( ) ) 
 + { 
 + @ @ - 2488 , 6 + 2515 , 40 @ @ 
 this . field _ 70752 _ e = true ; 
 } 
 
 @ @ - 240 , 7 + 248 , 7 @ @ 
 public abstract EnumHandSide func _ 184591 _ cq ( ) ; 
 
 public boolean func _ 184587 _ cr ( ) 
 - @ @ - 2508 , 12 + 2568 , 19 @ @ 
 + @ @ - 2508 , 12 + 2569 , 19 @ @ 
 
 if ( itemstack = = this . field _ 184627 _ bm ) 
 { 
 @ @ - 261 , 7 + 269 , 7 @ @ 
 { 
 this . func _ 71036 _ o ( ) ; 
 } 
 - @ @ - 2531 , 8 + 2598 , 10 @ @ 
 + @ @ - 2531 , 8 + 2599 , 10 @ @ 
 
 if ( ! itemstack . func _ 190926 _ b ( ) & & ! this . func _ 184587 _ cr ( ) ) 
 { 
 @ @ - 273 , 7 + 281 , 7 @ @ 
 
 if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) 
 { 
 - @ @ - 2613 , 7 + 2682 , 9 @ @ 
 + @ @ - 2613 , 7 + 2683 , 9 @ @ 
 if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) & & this . func _ 184587 _ cr ( ) ) 
 { 
 this . func _ 184584 _ a ( this . field _ 184627 _ bm , 16 ) ; 
 @ @ - 284 , 7 + 292 , 7 @ @ 
 this . func _ 184602 _ cy ( ) ; 
 } 
 } 
 - @ @ - 2637 , 7 + 2708 , 8 @ @ 
 + @ @ - 2637 , 7 + 2709 , 8 @ @ 
 { 
 if ( ! this . field _ 184627 _ bm . func _ 190926 _ b ( ) ) 
 { 
 @ @ - 294 , 7 + 302 , 7 @ @ 
 } 
 
 this . func _ 184602 _ cy ( ) ; 
 - @ @ - 2761 , 4 + 2833 , 29 @ @ 
 + @ @ - 2761 , 4 + 2834 , 29 @ @ 
 { 
 return true ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / event / entity / living / LivingEquipmentChangeEvent . java b / src / main / java / net / minecraftforge / event / entity / living / LivingEquipmentChangeEvent . java 
 new file mode 100644 
 index 0000000 . . 1495e52 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / entity / living / LivingEquipmentChangeEvent . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . event . entity . living ; 
 + 
 + import net . minecraft . entity . EntityLivingBase ; 
 + import net . minecraft . inventory . EntityEquipmentSlot ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 + 
 + / * * 
 + * { @ link LivingEquipmentChangeEvent } is fired when the Equipment of a Entity changes . < br > 
 + * This event is fired whenever changes in Equipment are detected in { @ link EntityLivingBase # onUpdate ( ) } . < br > 
 + * This also includes entities joining the World , as well as being cloned . < br > 
 + * This event is fired on server - side only . < br > 
 + * < br > 
 + * { @ link # slot } contains the affected { @ link EntityEquipmentSlot } . < br > 
 + * { @ link # from } contains the { @ link ItemStack } that was equipped previously . < br > 
 + * { @ link # to } contains the { @ link ItemStack } that is equipped now . < br > 
 + * < br > 
 + * This event is not { @ link Cancelable } . < br > 
 + * < br > 
 + * This event does not have a result . { @ link HasResult } < br > 
 + * < br > 
 + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . 
 + * * / 
 + public class LivingEquipmentChangeEvent extends LivingEvent 
 + { 
 + private final EntityEquipmentSlot slot ; 
 + private final ItemStack from ; 
 + private final ItemStack to ; 
 + 
 + public LivingEquipmentChangeEvent ( EntityLivingBase entity , EntityEquipmentSlot slot , ItemStack from , ItemStack to ) 
 + { 
 + super ( entity ) ; 
 + this . slot = slot ; 
 + this . from = from ; 
 + this . to = to ; 
 + } 
 + 
 + public EntityEquipmentSlot getSlot ( ) { return this . slot ; } 
 + public ItemStack getFrom ( ) { return this . from ; } 
 + public ItemStack getTo ( ) { return this . to ; } 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / EquipmentChangeTest . java b / src / test / java / net / minecraftforge / debug / EquipmentChangeTest . java 
 new file mode 100644 
 index 0000000 . . 6588e55 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / EquipmentChangeTest . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . entity . living . LivingEquipmentChangeEvent ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + @ Mod ( modid = " equipment _ change _ test " , version = " 1 . 0 . 0 " ) 
 + public class EquipmentChangeTest 
 + { 
 + 
 + @ Mod . EventHandler 
 + public void onInit ( FMLInitializationEvent event ) 
 + { 
 + / / register the eventhandler 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + } 
 + 
 + / * * 
 + * the Method handling the { @ link LivingEquipmentChangeEvent } 
 + * Serverside only ! 
 + * / 
 + @ SubscribeEvent 
 + public void onEquipmentChange ( LivingEquipmentChangeEvent event ) 
 + { 
 + / / a debug console print 
 + FMLLog . info ( " [ Equipment - Change ] " + event . getEntity ( ) + " changed his Equipment in " 
 + + event . getSlot ( ) + " from " + event . getFrom ( ) + " to " + event . getTo ( ) ) ; 
 + } 
 + 
 + }
