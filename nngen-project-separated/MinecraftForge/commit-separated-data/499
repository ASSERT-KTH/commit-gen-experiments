BLEU SCORE: 0.011228404634295848

TEST MSG: Add @ Name annotation to config system allowing you to use custom key for value .
GENERATED MSG: Rework configuration , configs should now use Config . hasChanged to deterne if thehould call save ( ) , also re - worked the saving to not use String . format as much .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / config / Config . java b / src / main / java / net / minecraftforge / common / config / Config . java <nl> index 2f2ed85 . . 35ba80c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / config / Config . java <nl> + + + b / src / main / java / net / minecraftforge / common / config / Config . java <nl> @ @ - 28 , 9 + 28 , 9 @ @ import java . lang . annotation . Target ; <nl> @ Target ( ElementType . TYPE ) <nl> public @ interface Config <nl> { <nl> - 	 / * * <nl> - 	 * The mod id that this configuration is associated with . <nl> - 	 * / <nl> + / * * <nl> + * The mod id that this configuration is associated with . <nl> + * / <nl> String modid ( ) ; <nl> / * * <nl> * A user friendly name for the config file , <nl> @ @ - 45 , 47 + 45 , 60 @ @ public @ interface Config <nl> * / <nl> Type type ( ) default Type . INSTANCE ; <nl> <nl> + / * * <nl> + * Root element category , defaults to " general " , if this is an empty string then the root category is disabled . <nl> + * Any primitive fields will cause an error , and you must specify sub - category objects <nl> + * / <nl> + String category ( ) default " general " ; <nl> + <nl> public static enum Type <nl> { <nl> - 	 / * * <nl> - 	 * Loaded once , directly after mod construction . Before pre - init . <nl> - 	 * This class must have static fields . <nl> - 	 * / <nl> - 	 INSTANCE ( true ) ; <nl> + / * * <nl> + * Loaded once , directly after mod construction . Before pre - init . <nl> + * This class must have static fields . <nl> + * / <nl> + INSTANCE ( true ) ; <nl> <nl> <nl> - 	 private boolean isStatic = true ; <nl> - 	 private Type ( boolean isStatic ) { this . isStatic = isStatic ; } <nl> - 	 public boolean isStatic ( ) { return this . isStatic ; } <nl> + private boolean isStatic = true ; <nl> + private Type ( boolean isStatic ) { this . isStatic = isStatic ; } <nl> + public boolean isStatic ( ) { return this . isStatic ; } <nl> } <nl> <nl> - 	 @ Retention ( RetentionPolicy . RUNTIME ) <nl> - 	 @ Target ( ElementType . FIELD ) <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . FIELD ) <nl> public @ interface LangKey <nl> { <nl> - 	 String value ( ) ; <nl> + String value ( ) ; <nl> } <nl> <nl> - 	 @ Retention ( RetentionPolicy . RUNTIME ) <nl> - 	 @ Target ( ElementType . FIELD ) <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . FIELD ) <nl> public @ interface Comment <nl> { <nl> - 	 String [ ] value ( ) ; <nl> + String [ ] value ( ) ; <nl> } <nl> <nl> - 	 @ Retention ( RetentionPolicy . RUNTIME ) <nl> - 	 @ Target ( ElementType . FIELD ) <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . FIELD ) <nl> public @ interface RangeInt <nl> { <nl> - 	 int min ( ) default Integer . MIN _ VALUE ; <nl> - 	 int max ( ) default Integer . MAX _ VALUE ; <nl> + int min ( ) default Integer . MIN _ VALUE ; <nl> + int max ( ) default Integer . MAX _ VALUE ; <nl> } <nl> <nl> - 	 @ Retention ( RetentionPolicy . RUNTIME ) <nl> - 	 @ Target ( ElementType . FIELD ) <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . FIELD ) <nl> public @ interface RangeDouble <nl> { <nl> - 	 double min ( ) default Double . MIN _ VALUE ; <nl> - 	 double max ( ) default Double . MAX _ VALUE ; <nl> + double min ( ) default Double . MIN _ VALUE ; <nl> + double max ( ) default Double . MAX _ VALUE ; <nl> + } <nl> + <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . FIELD ) <nl> + public @ interface Name <nl> + { <nl> + String value ( ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / config / ConfigManager . java b / src / main / java / net / minecraftforge / common / config / ConfigManager . java <nl> index 393ab85 . . 50352df 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / config / ConfigManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / config / ConfigManager . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ import com . google . common . collect . Multimap ; <nl> <nl> import net . minecraftforge . common . config . Config . Comment ; <nl> import net . minecraftforge . common . config . Config . LangKey ; <nl> + import net . minecraftforge . common . config . Config . Name ; <nl> import net . minecraftforge . common . config . Config . RangeDouble ; <nl> import net . minecraftforge . common . config . Config . RangeInt ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> @ @ - 134 , 6 + 135 , 10 @ @ public class ConfigManager <nl> String name = ( String ) targ . getAnnotationInfo ( ) . get ( " name " ) ; <nl> if ( name = = null ) <nl> name = modid ; <nl> + String category = ( String ) targ . getAnnotationInfo ( ) . get ( " category " ) ; <nl> + if ( category = = null ) <nl> + category = " general " ; <nl> + <nl> File file = new File ( configDir , name + " . cfg " ) ; <nl> <nl> Configuration cfg = CONFIGS . get ( file . getAbsolutePath ( ) ) ; <nl> @ @ - 144 , 7 + 149 , 7 @ @ public class ConfigManager <nl> CONFIGS . put ( file . getAbsolutePath ( ) , cfg ) ; <nl> } <nl> <nl> - createConfig ( cfg , cls , modid , type = = Config . Type . INSTANCE ) ; <nl> + createConfig ( cfg , cls , modid , type = = Config . Type . INSTANCE , category ) ; <nl> <nl> cfg . save ( ) ; <nl> <nl> @ @ - 160 , 9 + 165 , 8 @ @ public class ConfigManager <nl> / / = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> / / INTERNAL <nl> / / = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> - private static void createConfig ( Configuration cfg , Class < ? > cls , String modid , boolean isStatic ) <nl> + private static void createConfig ( Configuration cfg , Class < ? > cls , String modid , boolean isStatic , String category ) <nl> { <nl> - String category = " general " ; <nl> for ( Field f : cls . getDeclaredFields ( ) ) <nl> { <nl> if ( ! Modifier . isPublic ( f . getModifiers ( ) ) ) <nl> @ @ - 196 , 19 + 200 , 25 @ @ public class ConfigManager <nl> <nl> if ( adapter ! = null ) <nl> { <nl> + if ( category . isEmpty ( ) ) <nl> + throw new RuntimeException ( " Can not specify a primitive field when the category is empty : " + f . getDeclaringClass ( ) + " / " + f . getName ( ) ) ; <nl> prop = adapter . getProp ( cfg , category , f , instance , comment ) ; <nl> set ( instance , f , adapter . getValue ( prop ) ) ; <nl> } <nl> else if ( ftype . getSuperclass ( ) = = Enum . class ) <nl> { <nl> + if ( category . isEmpty ( ) ) <nl> + throw new RuntimeException ( " Can not specify a primitive field when the category is empty : " + f . getDeclaringClass ( ) + " / " + f . getName ( ) ) ; <nl> Enum enu = ( Enum ) get ( instance , f ) ; <nl> - prop = cfg . get ( category , f . getName ( ) , enu . name ( ) , comment ) ; <nl> + prop = cfg . get ( category , getName ( f ) , enu . name ( ) , comment ) ; <nl> prop . setValidationPattern ( makePattern ( ( Class < ? extends Enum > ) ftype ) ) ; <nl> set ( instance , f , Enum . valueOf ( ( Class < ? extends Enum > ) ftype , prop . getString ( ) ) ) ; <nl> } <nl> else if ( ftype = = Map . class ) <nl> { <nl> - String sub = category + " . " + f . getName ( ) . toLowerCase ( Locale . ENGLISH ) ; <nl> + if ( category . isEmpty ( ) ) <nl> + throw new RuntimeException ( " Can not specify a primitive field when the category is empty : " + f . getDeclaringClass ( ) + " / " + f . getName ( ) ) ; <nl> + String sub = category + " . " + getName ( f ) . toLowerCase ( Locale . ENGLISH ) ; <nl> Map < String , Object > m = ( Map < String , Object > ) get ( instance , f ) ; <nl> ParameterizedType type = ( ParameterizedType ) f . getGenericType ( ) ; <nl> Type mtype = type . getActualTypeArguments ( ) [ 1 ] ; <nl> @ @ - 238 , 7 + 248 , 7 @ @ public class ConfigManager <nl> } <nl> else if ( ftype . getSuperclass ( ) = = Object . class ) / / Only support classes that are one level below Object . <nl> { <nl> - String sub = category + " . " + f . getName ( ) . toLowerCase ( Locale . ENGLISH ) ; <nl> + String sub = ( category . isEmpty ( ) ? " " : category + " . " ) + getName ( f ) . toLowerCase ( Locale . ENGLISH ) ; <nl> Object sinst = get ( instance , f ) ; <nl> for ( Field sf : ftype . getDeclaredFields ( ) ) <nl> { <nl> @ @ - 306 , 4 + 316 , 11 @ @ public class ConfigManager <nl> return Pattern . compile ( PIPE . join ( lst ) ) ; <nl> } <nl> <nl> + private static String getName ( Field f ) <nl> + { <nl> + if ( f . isAnnotationPresent ( Name . class ) ) <nl> + return f . getAnnotation ( Name . class ) . value ( ) ; <nl> + return f . getName ( ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / config / TypeAdapters . java b / src / main / java / net / minecraftforge / common / config / TypeAdapters . java <nl> index 047e722 . . 318183a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / config / TypeAdapters . java <nl> + + + b / src / main / java / net / minecraftforge / common / config / TypeAdapters . java <nl> @ @ - 46 , 7 + 46 , 7 @ @ class TypeAdapters <nl> * / <nl> static ITypeAdapter bool = new TypeAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , getBoolean ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , getBoolean ( instance , field ) , comment ) ; <nl> } <nl> public Object getValue ( Property prop ) { <nl> return prop . getBoolean ( ) ; <nl> @ @ - 54 , 7 + 54 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter boolA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( boolean [ ] ) getObject ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , ( boolean [ ] ) getObject ( instance , field ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( boolean [ ] ) value , null ) ; <nl> @ @ - 65 , 7 + 65 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter Bool = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( Boolean ) getObject ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , ( Boolean ) getObject ( instance , field ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( Boolean ) value , null ) ; <nl> @ @ - 76 , 7 + 76 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter BoolA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , Booleans . toArray ( Arrays . asList ( ( Boolean [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , Booleans . toArray ( Arrays . asList ( ( Boolean [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( Boolean ) value , null ) ; <nl> @ @ - 87 , 7 + 87 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter flt = new TypeAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , getFloat ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , getFloat ( instance , field ) , comment ) ; <nl> } <nl> public Object getValue ( Property prop ) { <nl> return ( float ) prop . getDouble ( ) ; <nl> @ @ - 95 , 7 + 95 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter fltA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , Doubles . toArray ( Floats . asList ( ( float [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , Doubles . toArray ( Floats . asList ( ( float [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , Doubles . toArray ( Floats . asList ( ( float [ ] ) value ) ) , null ) ; <nl> @ @ - 106 , 7 + 106 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter Flt = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( Float ) getObject ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , ( Float ) getObject ( instance , field ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( Float ) value , null ) ; <nl> @ @ - 117 , 7 + 117 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter FltA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , Doubles . toArray ( Arrays . asList ( ( Float [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , Doubles . toArray ( Arrays . asList ( ( Float [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , Doubles . toArray ( Arrays . asList ( ( Float [ ] ) value ) ) , null ) ; <nl> @ @ - 128 , 7 + 128 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter dbl = new TypeAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , getDouble ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , getDouble ( instance , field ) , comment ) ; <nl> } <nl> public Object getValue ( Property prop ) { <nl> return prop . getDouble ( ) ; <nl> @ @ - 136 , 7 + 136 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter dblA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( double [ ] ) getObject ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , ( double [ ] ) getObject ( instance , field ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( double [ ] ) value , null ) ; <nl> @ @ - 147 , 7 + 147 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter Dbl = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( Double ) getObject ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , ( Double ) getObject ( instance , field ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( Double ) value , null ) ; <nl> @ @ - 158 , 7 + 158 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter DblA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , Doubles . toArray ( Arrays . asList ( ( Double [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , Doubles . toArray ( Arrays . asList ( ( Double [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , Doubles . toArray ( Arrays . asList ( ( Double [ ] ) value ) ) , null ) ; <nl> @ @ - 169 , 7 + 169 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter byt = new TypeAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , getByte ( instance , field ) , comment , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; <nl> + return cfg . get ( category , getName ( field ) , getByte ( instance , field ) , comment , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; <nl> } <nl> public Object getValue ( Property prop ) { <nl> return ( byte ) prop . getInt ( ) ; <nl> @ @ - 177 , 7 + 177 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter bytA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Bytes . asList ( ( byte [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , Ints . toArray ( Bytes . asList ( ( byte [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , Ints . toArray ( Bytes . asList ( ( byte [ ] ) value ) ) , null ) ; <nl> @ @ - 188 , 7 + 188 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter Byt = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( Byte ) getObject ( instance , field ) , comment , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; <nl> + return cfg . get ( category , getName ( field ) , ( Byte ) getObject ( instance , field ) , comment , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( Byte ) value , null , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; <nl> @ @ - 199 , 7 + 199 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter BytA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Arrays . asList ( ( Byte [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , Ints . toArray ( Arrays . asList ( ( Byte [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , Ints . toArray ( Arrays . asList ( ( Byte [ ] ) value ) ) , null ) ; <nl> @ @ - 210 , 7 + 210 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter chr = new TypeAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , getChar ( instance , field ) , comment , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; <nl> + return cfg . get ( category , getName ( field ) , getChar ( instance , field ) , comment , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; <nl> } <nl> public Object getValue ( Property prop ) { <nl> return ( char ) prop . getInt ( ) ; <nl> @ @ - 225 , 7 + 225 , 7 @ @ class TypeAdapters <nl> return ret ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , toPrim ( ( char [ ] ) getObject ( instance , field ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , toPrim ( ( char [ ] ) getObject ( instance , field ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , toPrim ( ( char [ ] ) value ) , null ) ; <nl> @ @ - 240 , 7 + 240 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter Chr = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( Character ) getObject ( instance , field ) , comment , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; <nl> + return cfg . get ( category , getName ( field ) , ( Character ) getObject ( instance , field ) , comment , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( Character ) value , null , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; <nl> @ @ - 258 , 7 + 258 , 7 @ @ class TypeAdapters <nl> return ret ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , toPrim ( ( Character [ ] ) getObject ( instance , field ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , toPrim ( ( Character [ ] ) getObject ( instance , field ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , toPrim ( ( Character [ ] ) value ) , null ) ; <nl> @ @ - 273 , 7 + 273 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter shrt = new TypeAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , getShort ( instance , field ) , comment , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; <nl> + return cfg . get ( category , getName ( field ) , getShort ( instance , field ) , comment , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; <nl> } <nl> public Object getValue ( Property prop ) { <nl> return ( short ) prop . getInt ( ) ; <nl> @ @ - 281 , 7 + 281 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter shrtA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Shorts . asList ( ( short [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , Ints . toArray ( Shorts . asList ( ( short [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , Ints . toArray ( Shorts . asList ( ( short [ ] ) value ) ) , null ) ; <nl> @ @ - 292 , 7 + 292 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter Shrt = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( Short ) getObject ( instance , field ) , comment , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; <nl> + return cfg . get ( category , getName ( field ) , ( Short ) getObject ( instance , field ) , comment , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( Short ) value , null , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; <nl> @ @ - 303 , 7 + 303 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter ShrtA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Arrays . asList ( ( Short [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , Ints . toArray ( Arrays . asList ( ( Short [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , Ints . toArray ( Arrays . asList ( ( Short [ ] ) value ) ) , null ) ; <nl> @ @ - 318 , 7 + 318 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter int _ = new TypeAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , getInt ( instance , field ) , comment , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; <nl> + return cfg . get ( category , getName ( field ) , getInt ( instance , field ) , comment , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; <nl> } <nl> public Object getValue ( Property prop ) { <nl> return prop . getInt ( ) ; <nl> @ @ - 326 , 7 + 326 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter intA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( int [ ] ) getObject ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , ( int [ ] ) getObject ( instance , field ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( int [ ] ) value , null ) ; <nl> @ @ - 337 , 7 + 337 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter Int = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( Integer ) getObject ( instance , field ) , comment , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; <nl> + return cfg . get ( category , getName ( field ) , ( Integer ) getObject ( instance , field ) , comment , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( Integer ) value , null , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; <nl> @ @ - 348 , 7 + 348 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter IntA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Arrays . asList ( ( Integer [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , Ints . toArray ( Arrays . asList ( ( Integer [ ] ) getObject ( instance , field ) ) ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , Ints . toArray ( Arrays . asList ( ( Integer [ ] ) value ) ) , null ) ; <nl> @ @ - 359 , 7 + 359 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter . Map Str = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( String ) getObject ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , ( String ) getObject ( instance , field ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( String ) value , null ) ; <nl> @ @ - 370 , 7 + 370 , 7 @ @ class TypeAdapters <nl> } ; <nl> static ITypeAdapter StrA = new MapAdapter ( ) { <nl> public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { <nl> - return cfg . get ( category , field . getName ( ) , ( String [ ] ) getObject ( instance , field ) , comment ) ; <nl> + return cfg . get ( category , getName ( field ) , ( String [ ] ) getObject ( instance , field ) , comment ) ; <nl> } <nl> public Property getProp ( Configuration cfg , String category , String name , Object value ) { <nl> return cfg . get ( category , name , ( String [ ] ) value , null ) ; <nl> @ @ - 455 , 6 + 455 , 13 @ @ class TypeAdapters <nl> } <nl> return 0 ; <nl> } <nl> + <nl> + public String getName ( Field f ) <nl> + { <nl> + if ( f . isAnnotationPresent ( Config . Name . class ) ) <nl> + return f . getAnnotation ( Config . Name . class ) . value ( ) ; <nl> + return f . getName ( ) ; <nl> + } <nl> } <nl> private static abstract class MapAdapter extends TypeAdapter implements ITypeAdapter . Map { } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ConfigTest . java b / src / test / java / net / minecraftforge / debug / ConfigTest . java <nl> index 3978d5b . . 5d73c11 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ConfigTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ConfigTest . java <nl> @ @ - 71 , 4 + 71 , 24 @ @ public class ConfigTest <nl> @ Comment ( { " This is a really long " , " Multi - line comment " } ) <nl> public static String Comments = " Hi Tv ! " ; <nl> } <nl> + @ Config ( modid = MODID , name = MODID + " _ subcats " , category = " " ) <nl> + public static class CONFIG _ SUBCATS <nl> + { <nl> + / / public static String THIS _ WILL _ ERROR = " DUH " ; <nl> + <nl> + @ Name ( " test _ a " ) <nl> + public static SubCat sub1 = new SubCat ( " Hello " ) ; <nl> + @ Name ( " test _ b " ) <nl> + public static SubCat sub2 = new SubCat ( " Goodbye " ) ; <nl> + <nl> + public static class SubCat <nl> + { <nl> + @ Name ( " i _ say " ) <nl> + public static String value ; <nl> + public SubCat ( String value ) <nl> + { <nl> + this . value = value ; <nl> + } <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / common / ConfigCategory . java b / common / net / minecraftforge / common / ConfigCategory . java <nl> index 38d1af9 . . 5af16b2 100644 <nl> - - - a / common / net / minecraftforge / common / ConfigCategory . java <nl> + + + b / common / net / minecraftforge / common / ConfigCategory . java <nl> @ @ - 1 , 5 + 1 , 8 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> + import static net . minecraftforge . common . Configuration . NEW _ LINE ; <nl> + import static net . minecraftforge . common . Configuration . allowedProperties ; <nl> + <nl> import java . io . BufferedWriter ; <nl> import java . io . IOException ; <nl> import java . util . ArrayList ; <nl> @ @ - 7 , 11 + 10 , 10 @ @ import java . util . Collection ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . TreeMap ; <nl> - <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . base . Splitter ; <nl> <nl> - import static net . minecraftforge . common . Configuration . * ; <nl> - <nl> public class ConfigCategory implements Map < String , Property > <nl> { <nl> private String name ; <nl> @ @ - 19 , 6 + 21 , 7 @ @ public class ConfigCategory implements Map < String , Property > <nl> private ArrayList < ConfigCategory > children = new ArrayList < ConfigCategory > ( ) ; <nl> private Map < String , Property > properties = new TreeMap < String , Property > ( ) ; <nl> public final ConfigCategory parent ; <nl> + private boolean changed = false ; <nl> <nl> public ConfigCategory ( String name ) <nl> { <nl> @ @ - 68 , 7 + 71 , 7 @ @ public class ConfigCategory implements Map < String , Property > <nl> <nl> public Map < String , Property > getValues ( ) <nl> { <nl> - return properties ; <nl> + return ImmutableMap . copyOf ( properties ) ; <nl> } <nl> <nl> public void setComment ( String comment ) <nl> @ @ - 86 , 39 + 89 , 48 @ @ public class ConfigCategory implements Map < String , Property > <nl> return properties . get ( key ) ; <nl> } <nl> <nl> - public void set ( String key , Property value ) <nl> + private void write ( BufferedWriter out , String . . . data ) throws IOException <nl> + { <nl> + write ( out , true , data ) ; <nl> + } <nl> + <nl> + private void write ( BufferedWriter out , boolean new _ line , String . . . data ) throws IOException <nl> { <nl> - properties . put ( key , value ) ; <nl> + for ( int x = 0 ; x < data . length ; x + + ) <nl> + { <nl> + out . write ( data [ x ] ) ; <nl> + } <nl> + if ( new _ line ) out . write ( NEW _ LINE ) ; <nl> } <nl> <nl> public void write ( BufferedWriter out , int indent ) throws IOException <nl> { <nl> - String pad = getIndent ( indent ) ; <nl> + String pad0 = getIndent ( indent ) ; <nl> + String pad1 = getIndent ( indent + 1 ) ; <nl> + String pad2 = getIndent ( indent + 2 ) ; <nl> <nl> - out . write ( pad + " # # # # # # # # # # # # # # # # # # # # " + NEW _ LINE ) ; <nl> - out . write ( pad + " # " + name + NEW _ LINE ) ; <nl> + write ( out , pad0 , " # # # # # # # # # # # # # # # # # # # # " ) ; <nl> + write ( out , pad0 , " # " , name ) ; <nl> <nl> if ( comment ! = null ) <nl> { <nl> - out . write ( pad + " # = = = = = = = = = = = = = = = = = = = " + NEW _ LINE ) ; <nl> + write ( out , pad0 , " # = = = = = = = = = = = = = = = = = = = " ) ; <nl> Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; <nl> <nl> for ( String line : splitter . split ( comment ) ) <nl> { <nl> - out . write ( pad + " # " + line + NEW _ LINE ) ; <nl> + write ( out , pad0 , " # " , line ) ; <nl> } <nl> } <nl> <nl> - out . write ( pad + " # # # # # # # # # # # # # # # # # # # # " + NEW _ LINE + NEW _ LINE ) ; <nl> + write ( out , pad0 , " # # # # # # # # # # # # # # # # # # # # " , NEW _ LINE ) ; <nl> <nl> if ( ! allowedProperties . matchesAllOf ( name ) ) <nl> { <nl> name = ' " ' + name + ' " ' ; <nl> } <nl> <nl> - out . write ( pad + name + " { " + NEW _ LINE ) ; <nl> - <nl> - pad = getIndent ( indent + 1 ) ; <nl> + write ( out , pad0 , name , " { " ) ; <nl> <nl> Property [ ] props = properties . values ( ) . toArray ( new Property [ properties . size ( ) ] ) ; <nl> <nl> @ @ - 136 , 7 + 148 , 7 @ @ public class ConfigCategory implements Map < String , Property > <nl> Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; <nl> for ( String commentLine : splitter . split ( prop . comment ) ) <nl> { <nl> - out . write ( pad + " # " + commentLine + NEW _ LINE ) ; <nl> + write ( out , pad1 , " # " , commentLine ) ; <nl> } <nl> } <nl> <nl> @ @ - 149 , 23 + 161 , 25 @ @ public class ConfigCategory implements Map < String , Property > <nl> <nl> if ( prop . isList ( ) ) <nl> { <nl> - out . write ( String . format ( pad + " % s : % s < " + NEW _ LINE , prop . getType ( ) . getID ( ) , propName ) ) ; <nl> - pad = getIndent ( indent + 2 ) ; <nl> + char type = prop . getType ( ) . getID ( ) ; <nl> + <nl> + write ( out , pad1 , String . valueOf ( type ) , " : " , propName , " < " ) ; <nl> <nl> - for ( String line : prop . valueList ) <nl> + for ( String line : prop . getStringList ( ) ) <nl> { <nl> - out . write ( pad + line + NEW _ LINE ) ; <nl> + write ( out , pad2 , line ) ; <nl> } <nl> <nl> - out . write ( getIndent ( indent + 1 ) + " > " + NEW _ LINE ) ; <nl> + write ( out , pad1 , " > " ) ; <nl> } <nl> else if ( prop . getType ( ) = = null ) <nl> { <nl> - out . write ( String . format ( pad + " % s = % s " + NEW _ LINE , propName , prop . value ) ) ; <nl> + write ( out , pad1 , propName , " = " , prop . getString ( ) ) ; <nl> } <nl> else <nl> { <nl> - out . write ( String . format ( pad + " % s : % s = % s " + NEW _ LINE , prop . getType ( ) . getID ( ) , propName , prop . value ) ) ; <nl> + char type = prop . getType ( ) . getID ( ) ; <nl> + write ( out , pad1 , String . valueOf ( type ) , " : " , propName , " = " , prop . getString ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 174 , 7 + 188 , 7 @ @ public class ConfigCategory implements Map < String , Property > <nl> child . write ( out , indent + 1 ) ; <nl> } <nl> <nl> - out . write ( getIndent ( indent ) + " } " + NEW _ LINE + NEW _ LINE ) ; <nl> + write ( out , pad0 , " } " , NEW _ LINE ) ; <nl> } <nl> <nl> private String getIndent ( int indent ) <nl> @ @ - 187 , 6 + 201 , 25 @ @ public class ConfigCategory implements Map < String , Property > <nl> return buf . toString ( ) ; <nl> } <nl> <nl> + public boolean hasChanged ( ) <nl> + { <nl> + if ( changed ) return true ; <nl> + for ( Property prop : properties . values ( ) ) <nl> + { <nl> + if ( prop . hasChanged ( ) ) return true ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + void resetChangedState ( ) <nl> + { <nl> + changed = false ; <nl> + for ( Property prop : properties . values ( ) ) <nl> + { <nl> + prop . resetChangedState ( ) ; <nl> + } <nl> + } <nl> + <nl> <nl> / / Map bouncer functions for compatibility with older mods , to be removed once all mods stop using it . <nl> @ Override public int size ( ) { return properties . size ( ) ; } <nl> @ @ - 194 , 12 + 227 , 33 @ @ public class ConfigCategory implements Map < String , Property > <nl> @ Override public boolean containsKey ( Object key ) { return properties . containsKey ( key ) ; } <nl> @ Override public boolean containsValue ( Object value ) { return properties . containsValue ( value ) ; } <nl> @ Override public Property get ( Object key ) { return properties . get ( key ) ; } <nl> - @ Override public Property put ( String key , Property value ) { return properties . put ( key , value ) ; } <nl> - @ Override public Property remove ( Object key ) { return properties . remove ( key ) ; } <nl> - @ Override public void putAll ( Map < ? extends String , ? extends Property > m ) { properties . putAll ( m ) ; } <nl> - @ Override public void clear ( ) { properties . clear ( ) ; } <nl> + @ Override public Property put ( String key , Property value ) <nl> + { <nl> + changed = true ; <nl> + return properties . put ( key , value ) ; <nl> + } <nl> + @ Override public Property remove ( Object key ) <nl> + { <nl> + changed = true ; <nl> + return properties . remove ( key ) ; <nl> + } <nl> + @ Override public void putAll ( Map < ? extends String , ? extends Property > m ) <nl> + { <nl> + changed = true ; <nl> + properties . putAll ( m ) ; <nl> + } <nl> + @ Override public void clear ( ) <nl> + { <nl> + changed = true ; <nl> + properties . clear ( ) ; <nl> + } <nl> @ Override public Set < String > keySet ( ) { return properties . keySet ( ) ; } <nl> @ Override public Collection < Property > values ( ) { return properties . values ( ) ; } <nl> - @ Override public Set < java . util . Map . Entry < String , Property > > entrySet ( ) { return properties . entrySet ( ) ; } <nl> + <nl> + @ Override / / Immutable copy , changes will NOT be reflected in this category <nl> + public Set < java . util . Map . Entry < String , Property > > entrySet ( ) <nl> + { <nl> + return ImmutableSet . copyOf ( properties . entrySet ( ) ) ; <nl> + } <nl> <nl> } <nl> \ No newline at end of file <nl> diff - - git a / common / net / minecraftforge / common / Configuration . java b / common / net / minecraftforge / common / Configuration . java <nl> index b3911a8 . . fc6237c 100644 <nl> - - - a / common / net / minecraftforge / common / Configuration . java <nl> + + + b / common / net / minecraftforge / common / Configuration . java <nl> @ @ - 5 , 31 + 5 , 41 @ @ <nl> <nl> package net . minecraftforge . common ; <nl> <nl> - import java . io . * ; <nl> - import java . text . DateFormat ; <nl> + import static net . minecraftforge . common . Property . Type . BOOLEAN ; <nl> + import static net . minecraftforge . common . Property . Type . DOUBLE ; <nl> + import static net . minecraftforge . common . Property . Type . INTEGER ; <nl> + import static net . minecraftforge . common . Property . Type . STRING ; <nl> + <nl> + import java . io . BufferedReader ; <nl> + import java . io . BufferedWriter ; <nl> + import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> + import java . io . FileOutputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . io . InputStreamReader ; <nl> + import java . io . OutputStreamWriter ; <nl> + import java . io . PushbackInputStream ; <nl> + import java . io . Reader ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> - import java . util . Collection ; <nl> - import java . util . Date ; <nl> import java . util . Locale ; <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . TreeMap ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . item . Item ; <nl> + <nl> import com . google . common . base . CharMatcher ; <nl> - import com . google . common . base . Splitter ; <nl> - import com . google . common . collect . Maps ; <nl> + import com . google . common . collect . ImmutableSet ; <nl> <nl> - import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . relauncher . FMLInjectionData ; <nl> <nl> - import net . minecraft . block . Block ; <nl> - import net . minecraft . item . Item ; <nl> - import static net . minecraftforge . common . Property . Type . * ; <nl> - <nl> / * * <nl> * This class offers advanced configurations capabilities , allowing to provide <nl> * various categories for configuration variables . <nl> @ @ - 54 , 13 + 64 , 14 @ @ public class Configuration <nl> <nl> File file ; <nl> <nl> - public Map < String , ConfigCategory > categories = new TreeMap < String , ConfigCategory > ( ) ; <nl> + private Map < String , ConfigCategory > categories = new TreeMap < String , ConfigCategory > ( ) ; <nl> private Map < String , Configuration > children = new TreeMap < String , Configuration > ( ) ; <nl> <nl> private boolean caseSensitiveCustomCategories ; <nl> public String defaultEncoding = DEFAULT _ ENCODING ; <nl> private String fileName = null ; <nl> public boolean isChild = false ; <nl> + private boolean changed = false ; <nl> <nl> static <nl> { <nl> @ @ - 148 , 7 + 159 , 7 @ @ public class Configuration <nl> <nl> if ( Block . blocksList [ defaultID ] = = null & & ! configMarkers [ defaultID ] ) <nl> { <nl> - prop . value = Integer . toString ( defaultID ) ; <nl> + prop . set ( defaultID ) ; <nl> configMarkers [ defaultID ] = true ; <nl> return prop ; <nl> } <nl> @ @ - 158 , 7 + 169 , 7 @ @ public class Configuration <nl> { <nl> if ( Block . blocksList [ j ] = = null & & ! configMarkers [ j ] ) <nl> { <nl> - prop . value = Integer . toString ( j ) ; <nl> + prop . set ( j ) ; <nl> configMarkers [ j ] = true ; <nl> return prop ; <nl> } <nl> @ @ - 196 , 7 + 207 , 7 @ @ public class Configuration <nl> <nl> if ( Item . itemsList [ defaultShift ] = = null & & ! configMarkers [ defaultShift ] & & defaultShift > = Block . blocksList . length ) <nl> { <nl> - prop . value = Integer . toString ( defaultID ) ; <nl> + prop . set ( defaultID ) ; <nl> configMarkers [ defaultShift ] = true ; <nl> return prop ; <nl> } <nl> @ @ - 206 , 7 + 217 , 7 @ @ public class Configuration <nl> { <nl> if ( Item . itemsList [ x ] = = null & & ! configMarkers [ x ] ) <nl> { <nl> - prop . value = Integer . toString ( x - ITEM _ SHIFT ) ; <nl> + prop . set ( x - ITEM _ SHIFT ) ; <nl> configMarkers [ x ] = true ; <nl> return prop ; <nl> } <nl> @ @ - 227 , 7 + 238 , 7 @ @ public class Configuration <nl> Property prop = get ( category , key , Integer . toString ( defaultValue ) , comment , INTEGER ) ; <nl> if ( ! prop . isIntValue ( ) ) <nl> { <nl> - prop . value = Integer . toString ( defaultValue ) ; <nl> + prop . set ( defaultValue ) ; <nl> } <nl> return prop ; <nl> } <nl> @ @ - 242 , 7 + 253 , 7 @ @ public class Configuration <nl> Property prop = get ( category , key , Boolean . toString ( defaultValue ) , comment , BOOLEAN ) ; <nl> if ( ! prop . isBooleanValue ( ) ) <nl> { <nl> - prop . value = Boolean . toString ( defaultValue ) ; <nl> + prop . set ( defaultValue ) ; <nl> } <nl> return prop ; <nl> } <nl> @ @ - 257 , 7 + 268 , 7 @ @ public class Configuration <nl> Property prop = get ( category , key , Double . toString ( defaultValue ) , comment , DOUBLE ) ; <nl> if ( ! prop . isDoubleValue ( ) ) <nl> { <nl> - prop . value = Double . toString ( defaultValue ) ; <nl> + prop . set ( defaultValue ) ; <nl> } <nl> return prop ; <nl> } <nl> @ @ - 298 , 7 + 309 , 7 @ @ public class Configuration <nl> Property prop = get ( category , key , values , comment , INTEGER ) ; <nl> if ( ! prop . isIntList ( ) ) <nl> { <nl> - prop . valueList = values ; <nl> + prop . set ( values ) ; <nl> } <nl> <nl> return prop ; <nl> @ @ - 321 , 7 + 332 , 7 @ @ public class Configuration <nl> <nl> if ( ! prop . isDoubleList ( ) ) <nl> { <nl> - prop . valueList = values ; <nl> + prop . set ( values ) ; <nl> } <nl> <nl> return prop ; <nl> @ @ - 344 , 7 + 355 , 7 @ @ public class Configuration <nl> <nl> if ( ! prop . isBooleanList ( ) ) <nl> { <nl> - prop . valueList = values ; <nl> + prop . set ( values ) ; <nl> } <nl> <nl> return prop ; <nl> @ @ - 365 , 8 + 376 , 8 @ @ public class Configuration <nl> <nl> if ( prop . getType ( ) = = null ) <nl> { <nl> - prop = new Property ( prop . getName ( ) , prop . value , type ) ; <nl> - cat . set ( key , prop ) ; <nl> + prop = new Property ( prop . getName ( ) , prop . getString ( ) , type ) ; <nl> + cat . put ( key , prop ) ; <nl> } <nl> <nl> prop . comment = comment ; <nl> @ @ - 375 , 7 + 386 , 8 @ @ public class Configuration <nl> else if ( defaultValue ! = null ) <nl> { <nl> Property prop = new Property ( key , defaultValue , type ) ; <nl> - cat . set ( key , prop ) ; <nl> + prop . set ( defaultValue ) ; / / Set and mark as dirty to signify it should save <nl> + cat . put ( key , prop ) ; <nl> prop . comment = comment ; <nl> return prop ; <nl> } <nl> @ @ - 400 , 8 + 412 , 8 @ @ public class Configuration <nl> <nl> if ( prop . getType ( ) = = null ) <nl> { <nl> - prop = new Property ( prop . getName ( ) , prop . value , type ) ; <nl> - cat . set ( key , prop ) ; <nl> + prop = new Property ( prop . getName ( ) , prop . getString ( ) , type ) ; <nl> + cat . put ( key , prop ) ; <nl> } <nl> <nl> prop . comment = comment ; <nl> @ @ - 412 , 7 + 424 , 7 @ @ public class Configuration <nl> { <nl> Property prop = new Property ( key , defaultValue , type ) ; <nl> prop . comment = comment ; <nl> - cat . set ( key , prop ) ; <nl> + cat . put ( key , prop ) ; <nl> return prop ; <nl> } <nl> else <nl> @ @ - 569 , 7 + 581 , 7 @ @ public class Configuration <nl> Property prop = new Property ( name , line . substring ( i + 1 ) , type , true ) ; <nl> i = line . length ( ) ; <nl> <nl> - currentCat . set ( name , prop ) ; <nl> + currentCat . put ( name , prop ) ; <nl> <nl> break ; <nl> <nl> @ @ - 603 , 7 + 615 , 7 @ @ public class Configuration <nl> throw new RuntimeException ( String . format ( " Malformed list property \ " % s : % d \ " " , fileName , lineNum ) ) ; <nl> } <nl> <nl> - currentCat . set ( name , new Property ( name , tmpList . toArray ( new String [ tmpList . size ( ) ] ) , type ) ) ; <nl> + currentCat . put ( name , new Property ( name , tmpList . toArray ( new String [ tmpList . size ( ) ] ) , type ) ) ; <nl> name = null ; <nl> tmpList = null ; <nl> type = null ; <nl> @ @ - 647 , 6 + 659 , 8 @ @ public class Configuration <nl> } catch ( IOException e ) { } <nl> } <nl> } <nl> + <nl> + resetChangedState ( ) ; <nl> } <nl> <nl> public void save ( ) <nl> @ @ - 701 , 29 + 715 , 7 @ @ public class Configuration <nl> } <nl> <nl> private void save ( BufferedWriter out ) throws IOException <nl> - { <nl> - / / For compatiblitties sake just in case , Thanks Atomic , to be removed next MC version <nl> - / / TO - DO : Remove next MC version <nl> - Object [ ] categoryArray = categories . values ( ) . toArray ( ) ; <nl> - for ( Object o : categoryArray ) <nl> - { <nl> - if ( o instanceof TreeMap ) <nl> - { <nl> - TreeMap treeMap = ( TreeMap ) o ; <nl> - ConfigCategory converted = new ConfigCategory ( file . getName ( ) ) ; <nl> - FMLLog . warning ( " Forge found a Treemap saved for Configuration file " + file . getName ( ) + " , this is deprecated behaviour ! " ) ; <nl> - <nl> - for ( Object key : treeMap . keySet ( ) ) <nl> - { <nl> - FMLLog . warning ( " Converting Treemap to ConfigCategory , key : " + key + " , property value : " + ( ( Property ) treeMap . get ( key ) ) . value ) ; <nl> - converted . set ( ( String ) key , ( Property ) treeMap . get ( key ) ) ; <nl> - } <nl> - <nl> - categories . values ( ) . remove ( o ) ; <nl> - categories . put ( file . getName ( ) , converted ) ; <nl> - } <nl> - } <nl> - <nl> + { <nl> for ( ConfigCategory cat : categories . values ( ) ) <nl> { <nl> if ( ! cat . isChild ( ) ) <nl> @ @ - 749 , 6 + 741 , 7 @ @ public class Configuration <nl> { <nl> parent = new ConfigCategory ( hierarchy [ 0 ] ) ; <nl> categories . put ( parent . getQualifiedName ( ) , parent ) ; <nl> + changed = true ; <nl> } <nl> <nl> for ( int i = 1 ; i < hierarchy . length ; i + + ) <nl> @ @ - 760 , 6 + 753 , 7 @ @ public class Configuration <nl> { <nl> child = new ConfigCategory ( hierarchy [ i ] , parent ) ; <nl> categories . put ( name , child ) ; <nl> + changed = true ; <nl> } <nl> <nl> ret = child ; <nl> @ @ - 770 , 6 + 764 , 7 @ @ public class Configuration <nl> { <nl> ret = new ConfigCategory ( category ) ; <nl> categories . put ( category , ret ) ; <nl> + changed = true ; <nl> } <nl> } <nl> <nl> @ @ - 788 , 12 + 783 , 14 @ @ public class Configuration <nl> if ( ! children . containsKey ( name ) ) <nl> { <nl> children . put ( name , child ) ; <nl> + changed = true ; <nl> } <nl> else <nl> { <nl> Configuration old = children . get ( name ) ; <nl> child . categories = old . categories ; <nl> child . fileName = old . fileName ; <nl> + old . changed = true ; <nl> } <nl> } <nl> <nl> @ @ - 873 , 4 + 870 , 40 @ @ public class Configuration <nl> input . close ( ) ; <nl> } <nl> } <nl> + <nl> + public boolean hasChanged ( ) <nl> + { <nl> + if ( changed ) return true ; <nl> + <nl> + for ( ConfigCategory cat : categories . values ( ) ) <nl> + { <nl> + if ( cat . hasChanged ( ) ) return true ; <nl> + } <nl> + <nl> + for ( Configuration child : children . values ( ) ) <nl> + { <nl> + if ( child . hasChanged ( ) ) return true ; <nl> + } <nl> + <nl> + return false ; <nl> + } <nl> + <nl> + private void resetChangedState ( ) <nl> + { <nl> + changed = false ; <nl> + for ( ConfigCategory cat : categories . values ( ) ) <nl> + { <nl> + cat . resetChangedState ( ) ; <nl> + } <nl> + <nl> + for ( Configuration child : children . values ( ) ) <nl> + { <nl> + child . resetChangedState ( ) ; <nl> + } <nl> + } <nl> + <nl> + public Set < String > getCategoryNames ( ) <nl> + { <nl> + return ImmutableSet . copyOf ( categories . keySet ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / common / net / minecraftforge / common / ForgeChunkManager . java b / common / net / minecraftforge / common / ForgeChunkManager . java <nl> index ae45c5a . . b12ba05 100644 <nl> - - - a / common / net / minecraftforge / common / ForgeChunkManager . java <nl> + + + b / common / net / minecraftforge / common / ForgeChunkManager . java <nl> @ @ - 775 , 7 + 775 , 7 @ @ public class ForgeChunkManager <nl> <nl> static void loadConfiguration ( ) <nl> { <nl> - for ( String mod : config . categories . keySet ( ) ) <nl> + for ( String mod : config . getCategoryNames ( ) ) <nl> { <nl> if ( mod . equals ( " Forge " ) | | mod . equals ( " defaults " ) ) <nl> { <nl> @ @ - 786 , 7 + 786 , 10 @ @ public class ForgeChunkManager <nl> ticketConstraints . put ( mod , modTC . getInt ( 200 ) ) ; <nl> chunkConstraints . put ( mod , modCPT . getInt ( 25 ) ) ; <nl> } <nl> - config . save ( ) ; <nl> + if ( config . hasChanged ( ) ) <nl> + { <nl> + config . save ( ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 953 , 7 + 956 , 7 @ @ public class ForgeChunkManager <nl> sampleTC . comment = " Maximum ticket count for the mod . Zero disables chunkloading capabilities . " ; <nl> sampleTC = config . get ( " Forge " , " maximumChunksPerTicket " , 25 ) ; <nl> sampleTC . comment = " Maximum chunks per ticket for the mod . " ; <nl> - for ( String mod : config . categories . keySet ( ) ) <nl> + for ( String mod : config . getCategoryNames ( ) ) <nl> { <nl> if ( mod . equals ( " Forge " ) | | mod . equals ( " defaults " ) ) <nl> { <nl> @ @ - 965 , 12 + 968 , 12 @ @ public class ForgeChunkManager <nl> } <nl> <nl> <nl> - public static Map < String , Property > getConfigMapFor ( Object mod ) <nl> + public static ConfigCategory getConfigFor ( Object mod ) <nl> { <nl> ModContainer container = getContainer ( mod ) ; <nl> if ( container ! = null ) <nl> { <nl> - return config . getCategory ( container . getModId ( ) ) . getValues ( ) ; <nl> + return config . getCategory ( container . getModId ( ) ) ; <nl> } <nl> <nl> return null ; <nl> @ @ - 981 , 8 + 984 , 8 @ @ public class ForgeChunkManager <nl> ModContainer container = getContainer ( mod ) ; <nl> if ( container ! = null ) <nl> { <nl> - Map < String , Property > props = config . getCategory ( container . getModId ( ) ) . getValues ( ) ; <nl> - props . put ( propertyName , new Property ( propertyName , value , type ) ) ; <nl> + ConfigCategory cat = config . getCategory ( container . getModId ( ) ) ; <nl> + cat . put ( propertyName , new Property ( propertyName , value , type ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / common / net / minecraftforge / common / ForgeDummyContainer . java b / common / net / minecraftforge / common / ForgeDummyContainer . java <nl> index 8a3dffe . . a49713c 100644 <nl> - - - a / common / net / minecraftforge / common / ForgeDummyContainer . java <nl> + + + b / common / net / minecraftforge / common / ForgeDummyContainer . java <nl> @ @ - 44 , 7 + 44 , 22 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces <nl> meta . screenshots = new String [ 0 ] ; <nl> meta . logoFile = " / forge _ logo . png " ; <nl> <nl> - Configuration config = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ) ; <nl> + Configuration config = null ; <nl> + File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; <nl> + try <nl> + { <nl> + config = new Configuration ( cfgFile ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + System . out . println ( " Error loading forge . cfg , deleting file and resetting : " ) ; <nl> + e . printStackTrace ( ) ; <nl> + <nl> + if ( cfgFile . exists ( ) ) <nl> + cfgFile . delete ( ) ; <nl> + <nl> + config = new Configuration ( cfgFile ) ; <nl> + } <nl> if ( ! config . isChild ) <nl> { <nl> config . load ( ) ; <nl> @ @ - 60 , 9 + 75 , 13 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces <nl> if ( clumpingThreshold > 1024 | | clumpingThreshold < 64 ) <nl> { <nl> clumpingThreshold = 64 ; <nl> - clumpingThresholdProperty . value = " 64 " ; <nl> + clumpingThresholdProperty . set ( 64 ) ; <nl> + } <nl> + <nl> + if ( config . hasChanged ( ) ) <nl> + { <nl> + config . save ( ) ; <nl> } <nl> - config . save ( ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / common / net / minecraftforge / common / Property . java b / common / net / minecraftforge / common / Property . java <nl> index 1220fe9 . . 00b1175 100644 <nl> - - - a / common / net / minecraftforge / common / Property . java <nl> + + + b / common / net / minecraftforge / common / Property . java <nl> @ @ - 40 , 13 + 40 , 14 @ @ public class Property <nl> } <nl> <nl> private String name ; <nl> - public String value ; <nl> + private String value ; <nl> public String comment ; <nl> - public String [ ] valueList ; <nl> + private String [ ] values ; <nl> <nl> private final boolean wasRead ; <nl> private final boolean isList ; <nl> private final Type type ; <nl> + private boolean changed = false ; <nl> <nl> public Property ( ) <nl> { <nl> @ @ - 77 , 10 + 78 , 20 @ @ public class Property <nl> Property ( String name , String [ ] values , Type type , boolean read ) <nl> { <nl> setName ( name ) ; <nl> - this . type = type ; <nl> - valueList = values ; <nl> - wasRead = read ; <nl> - isList = true ; <nl> + this . type = type ; <nl> + this . values = values ; <nl> + wasRead = read ; <nl> + isList = true ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the value in this property as it ' s raw string . <nl> + * <nl> + * @ return current value <nl> + * / <nl> + public String getString ( ) <nl> + { <nl> + return value ; <nl> } <nl> <nl> / * * <nl> @ @ - 197 , 6 + 208 , 11 @ @ public class Property <nl> } <nl> } <nl> <nl> + public String [ ] getStringList ( ) <nl> + { <nl> + return values ; <nl> + } <nl> + <nl> / * * <nl> * Returns the integer value of all values that can <nl> * be parsed in the list . <nl> @ @ - 207 , 7 + 223 , 7 @ @ public class Property <nl> { <nl> ArrayList < Integer > nums = new ArrayList < Integer > ( ) ; <nl> <nl> - for ( String value : valueList ) <nl> + for ( String value : values ) <nl> { <nl> try <nl> { <nl> @ @ - 232 , 7 + 248 , 7 @ @ public class Property <nl> * / <nl> public boolean isIntList ( ) <nl> { <nl> - for ( String value : valueList ) <nl> + for ( String value : values ) <nl> { <nl> try <nl> { <nl> @ @ - 254 , 21 + 270 , 21 @ @ public class Property <nl> * / <nl> public boolean [ ] getBooleanList ( ) <nl> { <nl> - ArrayList < Boolean > values = new ArrayList < Boolean > ( ) ; <nl> - for ( String value : valueList ) <nl> + ArrayList < Boolean > tmp = new ArrayList < Boolean > ( ) ; <nl> + for ( String value : values ) <nl> { <nl> try <nl> { <nl> - values . add ( Boolean . parseBoolean ( value ) ) ; <nl> + tmp . add ( Boolean . parseBoolean ( value ) ) ; <nl> } <nl> catch ( NumberFormatException e ) { } <nl> } <nl> <nl> - boolean [ ] primitives = new boolean [ values . size ( ) ] ; <nl> + boolean [ ] primitives = new boolean [ tmp . size ( ) ] ; <nl> <nl> - for ( int i = 0 ; i < values . size ( ) ; i + + ) <nl> + for ( int i = 0 ; i < tmp . size ( ) ; i + + ) <nl> { <nl> - primitives [ i ] = values . get ( i ) ; <nl> + primitives [ i ] = tmp . get ( i ) ; <nl> } <nl> <nl> return primitives ; <nl> @ @ - 280 , 7 + 296 , 7 @ @ public class Property <nl> * / <nl> public boolean isBooleanList ( ) <nl> { <nl> - for ( String value : valueList ) <nl> + for ( String value : values ) <nl> { <nl> if ( ! " true " . equalsIgnoreCase ( value ) & & ! " false " . equalsIgnoreCase ( value ) ) <nl> { <nl> @ @ - 299 , 21 + 315 , 21 @ @ public class Property <nl> * / <nl> public double [ ] getDoubleList ( ) <nl> { <nl> - ArrayList < Double > values = new ArrayList < Double > ( ) ; <nl> - for ( String value : valueList ) <nl> + ArrayList < Double > tmp = new ArrayList < Double > ( ) ; <nl> + for ( String value : values ) <nl> { <nl> try <nl> { <nl> - values . add ( Double . parseDouble ( value ) ) ; <nl> + tmp . add ( Double . parseDouble ( value ) ) ; <nl> } <nl> catch ( NumberFormatException e ) { } <nl> } <nl> <nl> - double [ ] primitives = new double [ values . size ( ) ] ; <nl> + double [ ] primitives = new double [ tmp . size ( ) ] ; <nl> <nl> - for ( int i = 0 ; i < values . size ( ) ; i + + ) <nl> + for ( int i = 0 ; i < tmp . size ( ) ; i + + ) <nl> { <nl> - primitives [ i ] = values . get ( i ) ; <nl> + primitives [ i ] = tmp . get ( i ) ; <nl> } <nl> <nl> return primitives ; <nl> @ @ - 325 , 7 + 341 , 7 @ @ public class Property <nl> * / <nl> public boolean isDoubleList ( ) <nl> { <nl> - for ( String value : valueList ) <nl> + for ( String value : values ) <nl> { <nl> try <nl> { <nl> @ @ - 371 , 4 + 387 , 23 @ @ public class Property <nl> { <nl> return isList ; <nl> } <nl> + <nl> + public boolean hasChanged ( ) { return changed ; } <nl> + void resetChangedState ( ) { changed = false ; } <nl> + <nl> + public void set ( String value ) <nl> + { <nl> + this . value = value ; <nl> + changed = true ; <nl> + } <nl> + <nl> + public void set ( String [ ] values ) <nl> + { <nl> + this . values = values ; <nl> + changed = true ; <nl> + } <nl> + <nl> + public void set ( int value ) { set ( Integer . toString ( value ) ) ; } <nl> + public void set ( boolean value ) { set ( Boolean . toString ( value ) ) ; } <nl> + public void set ( double value ) { set ( Double . toString ( value ) ) ; } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / config / Config . java b / src / main / java / net / minecraftforge / common / config / Config . java 
 index 2f2ed85 . . 35ba80c 100644 
 - - - a / src / main / java / net / minecraftforge / common / config / Config . java 
 + + + b / src / main / java / net / minecraftforge / common / config / Config . java 
 @ @ - 28 , 9 + 28 , 9 @ @ import java . lang . annotation . Target ; 
 @ Target ( ElementType . TYPE ) 
 public @ interface Config 
 { 
 - 	 / * * 
 - 	 * The mod id that this configuration is associated with . 
 - 	 * / 
 + / * * 
 + * The mod id that this configuration is associated with . 
 + * / 
 String modid ( ) ; 
 / * * 
 * A user friendly name for the config file , 
 @ @ - 45 , 47 + 45 , 60 @ @ public @ interface Config 
 * / 
 Type type ( ) default Type . INSTANCE ; 
 
 + / * * 
 + * Root element category , defaults to " general " , if this is an empty string then the root category is disabled . 
 + * Any primitive fields will cause an error , and you must specify sub - category objects 
 + * / 
 + String category ( ) default " general " ; 
 + 
 public static enum Type 
 { 
 - 	 / * * 
 - 	 * Loaded once , directly after mod construction . Before pre - init . 
 - 	 * This class must have static fields . 
 - 	 * / 
 - 	 INSTANCE ( true ) ; 
 + / * * 
 + * Loaded once , directly after mod construction . Before pre - init . 
 + * This class must have static fields . 
 + * / 
 + INSTANCE ( true ) ; 
 
 
 - 	 private boolean isStatic = true ; 
 - 	 private Type ( boolean isStatic ) { this . isStatic = isStatic ; } 
 - 	 public boolean isStatic ( ) { return this . isStatic ; } 
 + private boolean isStatic = true ; 
 + private Type ( boolean isStatic ) { this . isStatic = isStatic ; } 
 + public boolean isStatic ( ) { return this . isStatic ; } 
 } 
 
 - 	 @ Retention ( RetentionPolicy . RUNTIME ) 
 - 	 @ Target ( ElementType . FIELD ) 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . FIELD ) 
 public @ interface LangKey 
 { 
 - 	 String value ( ) ; 
 + String value ( ) ; 
 } 
 
 - 	 @ Retention ( RetentionPolicy . RUNTIME ) 
 - 	 @ Target ( ElementType . FIELD ) 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . FIELD ) 
 public @ interface Comment 
 { 
 - 	 String [ ] value ( ) ; 
 + String [ ] value ( ) ; 
 } 
 
 - 	 @ Retention ( RetentionPolicy . RUNTIME ) 
 - 	 @ Target ( ElementType . FIELD ) 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . FIELD ) 
 public @ interface RangeInt 
 { 
 - 	 int min ( ) default Integer . MIN _ VALUE ; 
 - 	 int max ( ) default Integer . MAX _ VALUE ; 
 + int min ( ) default Integer . MIN _ VALUE ; 
 + int max ( ) default Integer . MAX _ VALUE ; 
 } 
 
 - 	 @ Retention ( RetentionPolicy . RUNTIME ) 
 - 	 @ Target ( ElementType . FIELD ) 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . FIELD ) 
 public @ interface RangeDouble 
 { 
 - 	 double min ( ) default Double . MIN _ VALUE ; 
 - 	 double max ( ) default Double . MAX _ VALUE ; 
 + double min ( ) default Double . MIN _ VALUE ; 
 + double max ( ) default Double . MAX _ VALUE ; 
 + } 
 + 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . FIELD ) 
 + public @ interface Name 
 + { 
 + String value ( ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / config / ConfigManager . java b / src / main / java / net / minecraftforge / common / config / ConfigManager . java 
 index 393ab85 . . 50352df 100644 
 - - - a / src / main / java / net / minecraftforge / common / config / ConfigManager . java 
 + + + b / src / main / java / net / minecraftforge / common / config / ConfigManager . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import com . google . common . collect . Multimap ; 
 
 import net . minecraftforge . common . config . Config . Comment ; 
 import net . minecraftforge . common . config . Config . LangKey ; 
 + import net . minecraftforge . common . config . Config . Name ; 
 import net . minecraftforge . common . config . Config . RangeDouble ; 
 import net . minecraftforge . common . config . Config . RangeInt ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 @ @ - 134 , 6 + 135 , 10 @ @ public class ConfigManager 
 String name = ( String ) targ . getAnnotationInfo ( ) . get ( " name " ) ; 
 if ( name = = null ) 
 name = modid ; 
 + String category = ( String ) targ . getAnnotationInfo ( ) . get ( " category " ) ; 
 + if ( category = = null ) 
 + category = " general " ; 
 + 
 File file = new File ( configDir , name + " . cfg " ) ; 
 
 Configuration cfg = CONFIGS . get ( file . getAbsolutePath ( ) ) ; 
 @ @ - 144 , 7 + 149 , 7 @ @ public class ConfigManager 
 CONFIGS . put ( file . getAbsolutePath ( ) , cfg ) ; 
 } 
 
 - createConfig ( cfg , cls , modid , type = = Config . Type . INSTANCE ) ; 
 + createConfig ( cfg , cls , modid , type = = Config . Type . INSTANCE , category ) ; 
 
 cfg . save ( ) ; 
 
 @ @ - 160 , 9 + 165 , 8 @ @ public class ConfigManager 
 / / = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 / / INTERNAL 
 / / = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 - private static void createConfig ( Configuration cfg , Class < ? > cls , String modid , boolean isStatic ) 
 + private static void createConfig ( Configuration cfg , Class < ? > cls , String modid , boolean isStatic , String category ) 
 { 
 - String category = " general " ; 
 for ( Field f : cls . getDeclaredFields ( ) ) 
 { 
 if ( ! Modifier . isPublic ( f . getModifiers ( ) ) ) 
 @ @ - 196 , 19 + 200 , 25 @ @ public class ConfigManager 
 
 if ( adapter ! = null ) 
 { 
 + if ( category . isEmpty ( ) ) 
 + throw new RuntimeException ( " Can not specify a primitive field when the category is empty : " + f . getDeclaringClass ( ) + " / " + f . getName ( ) ) ; 
 prop = adapter . getProp ( cfg , category , f , instance , comment ) ; 
 set ( instance , f , adapter . getValue ( prop ) ) ; 
 } 
 else if ( ftype . getSuperclass ( ) = = Enum . class ) 
 { 
 + if ( category . isEmpty ( ) ) 
 + throw new RuntimeException ( " Can not specify a primitive field when the category is empty : " + f . getDeclaringClass ( ) + " / " + f . getName ( ) ) ; 
 Enum enu = ( Enum ) get ( instance , f ) ; 
 - prop = cfg . get ( category , f . getName ( ) , enu . name ( ) , comment ) ; 
 + prop = cfg . get ( category , getName ( f ) , enu . name ( ) , comment ) ; 
 prop . setValidationPattern ( makePattern ( ( Class < ? extends Enum > ) ftype ) ) ; 
 set ( instance , f , Enum . valueOf ( ( Class < ? extends Enum > ) ftype , prop . getString ( ) ) ) ; 
 } 
 else if ( ftype = = Map . class ) 
 { 
 - String sub = category + " . " + f . getName ( ) . toLowerCase ( Locale . ENGLISH ) ; 
 + if ( category . isEmpty ( ) ) 
 + throw new RuntimeException ( " Can not specify a primitive field when the category is empty : " + f . getDeclaringClass ( ) + " / " + f . getName ( ) ) ; 
 + String sub = category + " . " + getName ( f ) . toLowerCase ( Locale . ENGLISH ) ; 
 Map < String , Object > m = ( Map < String , Object > ) get ( instance , f ) ; 
 ParameterizedType type = ( ParameterizedType ) f . getGenericType ( ) ; 
 Type mtype = type . getActualTypeArguments ( ) [ 1 ] ; 
 @ @ - 238 , 7 + 248 , 7 @ @ public class ConfigManager 
 } 
 else if ( ftype . getSuperclass ( ) = = Object . class ) / / Only support classes that are one level below Object . 
 { 
 - String sub = category + " . " + f . getName ( ) . toLowerCase ( Locale . ENGLISH ) ; 
 + String sub = ( category . isEmpty ( ) ? " " : category + " . " ) + getName ( f ) . toLowerCase ( Locale . ENGLISH ) ; 
 Object sinst = get ( instance , f ) ; 
 for ( Field sf : ftype . getDeclaredFields ( ) ) 
 { 
 @ @ - 306 , 4 + 316 , 11 @ @ public class ConfigManager 
 return Pattern . compile ( PIPE . join ( lst ) ) ; 
 } 
 
 + private static String getName ( Field f ) 
 + { 
 + if ( f . isAnnotationPresent ( Name . class ) ) 
 + return f . getAnnotation ( Name . class ) . value ( ) ; 
 + return f . getName ( ) ; 
 + } 
 + 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / config / TypeAdapters . java b / src / main / java / net / minecraftforge / common / config / TypeAdapters . java 
 index 047e722 . . 318183a 100644 
 - - - a / src / main / java / net / minecraftforge / common / config / TypeAdapters . java 
 + + + b / src / main / java / net / minecraftforge / common / config / TypeAdapters . java 
 @ @ - 46 , 7 + 46 , 7 @ @ class TypeAdapters 
 * / 
 static ITypeAdapter bool = new TypeAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , getBoolean ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , getBoolean ( instance , field ) , comment ) ; 
 } 
 public Object getValue ( Property prop ) { 
 return prop . getBoolean ( ) ; 
 @ @ - 54 , 7 + 54 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter boolA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( boolean [ ] ) getObject ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , ( boolean [ ] ) getObject ( instance , field ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( boolean [ ] ) value , null ) ; 
 @ @ - 65 , 7 + 65 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter Bool = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( Boolean ) getObject ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , ( Boolean ) getObject ( instance , field ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( Boolean ) value , null ) ; 
 @ @ - 76 , 7 + 76 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter BoolA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , Booleans . toArray ( Arrays . asList ( ( Boolean [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , Booleans . toArray ( Arrays . asList ( ( Boolean [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( Boolean ) value , null ) ; 
 @ @ - 87 , 7 + 87 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter flt = new TypeAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , getFloat ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , getFloat ( instance , field ) , comment ) ; 
 } 
 public Object getValue ( Property prop ) { 
 return ( float ) prop . getDouble ( ) ; 
 @ @ - 95 , 7 + 95 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter fltA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , Doubles . toArray ( Floats . asList ( ( float [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , Doubles . toArray ( Floats . asList ( ( float [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , Doubles . toArray ( Floats . asList ( ( float [ ] ) value ) ) , null ) ; 
 @ @ - 106 , 7 + 106 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter Flt = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( Float ) getObject ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , ( Float ) getObject ( instance , field ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( Float ) value , null ) ; 
 @ @ - 117 , 7 + 117 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter FltA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , Doubles . toArray ( Arrays . asList ( ( Float [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , Doubles . toArray ( Arrays . asList ( ( Float [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , Doubles . toArray ( Arrays . asList ( ( Float [ ] ) value ) ) , null ) ; 
 @ @ - 128 , 7 + 128 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter dbl = new TypeAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , getDouble ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , getDouble ( instance , field ) , comment ) ; 
 } 
 public Object getValue ( Property prop ) { 
 return prop . getDouble ( ) ; 
 @ @ - 136 , 7 + 136 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter dblA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( double [ ] ) getObject ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , ( double [ ] ) getObject ( instance , field ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( double [ ] ) value , null ) ; 
 @ @ - 147 , 7 + 147 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter Dbl = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( Double ) getObject ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , ( Double ) getObject ( instance , field ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( Double ) value , null ) ; 
 @ @ - 158 , 7 + 158 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter DblA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , Doubles . toArray ( Arrays . asList ( ( Double [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , Doubles . toArray ( Arrays . asList ( ( Double [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , Doubles . toArray ( Arrays . asList ( ( Double [ ] ) value ) ) , null ) ; 
 @ @ - 169 , 7 + 169 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter byt = new TypeAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , getByte ( instance , field ) , comment , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; 
 + return cfg . get ( category , getName ( field ) , getByte ( instance , field ) , comment , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; 
 } 
 public Object getValue ( Property prop ) { 
 return ( byte ) prop . getInt ( ) ; 
 @ @ - 177 , 7 + 177 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter bytA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Bytes . asList ( ( byte [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , Ints . toArray ( Bytes . asList ( ( byte [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , Ints . toArray ( Bytes . asList ( ( byte [ ] ) value ) ) , null ) ; 
 @ @ - 188 , 7 + 188 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter Byt = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( Byte ) getObject ( instance , field ) , comment , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; 
 + return cfg . get ( category , getName ( field ) , ( Byte ) getObject ( instance , field ) , comment , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( Byte ) value , null , Byte . MIN _ VALUE , Byte . MAX _ VALUE ) ; 
 @ @ - 199 , 7 + 199 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter BytA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Arrays . asList ( ( Byte [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , Ints . toArray ( Arrays . asList ( ( Byte [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , Ints . toArray ( Arrays . asList ( ( Byte [ ] ) value ) ) , null ) ; 
 @ @ - 210 , 7 + 210 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter chr = new TypeAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , getChar ( instance , field ) , comment , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; 
 + return cfg . get ( category , getName ( field ) , getChar ( instance , field ) , comment , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; 
 } 
 public Object getValue ( Property prop ) { 
 return ( char ) prop . getInt ( ) ; 
 @ @ - 225 , 7 + 225 , 7 @ @ class TypeAdapters 
 return ret ; 
 } 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , toPrim ( ( char [ ] ) getObject ( instance , field ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , toPrim ( ( char [ ] ) getObject ( instance , field ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , toPrim ( ( char [ ] ) value ) , null ) ; 
 @ @ - 240 , 7 + 240 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter Chr = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( Character ) getObject ( instance , field ) , comment , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; 
 + return cfg . get ( category , getName ( field ) , ( Character ) getObject ( instance , field ) , comment , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( Character ) value , null , Character . MIN _ VALUE , Character . MAX _ VALUE ) ; 
 @ @ - 258 , 7 + 258 , 7 @ @ class TypeAdapters 
 return ret ; 
 } 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , toPrim ( ( Character [ ] ) getObject ( instance , field ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , toPrim ( ( Character [ ] ) getObject ( instance , field ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , toPrim ( ( Character [ ] ) value ) , null ) ; 
 @ @ - 273 , 7 + 273 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter shrt = new TypeAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , getShort ( instance , field ) , comment , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; 
 + return cfg . get ( category , getName ( field ) , getShort ( instance , field ) , comment , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; 
 } 
 public Object getValue ( Property prop ) { 
 return ( short ) prop . getInt ( ) ; 
 @ @ - 281 , 7 + 281 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter shrtA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Shorts . asList ( ( short [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , Ints . toArray ( Shorts . asList ( ( short [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , Ints . toArray ( Shorts . asList ( ( short [ ] ) value ) ) , null ) ; 
 @ @ - 292 , 7 + 292 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter Shrt = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( Short ) getObject ( instance , field ) , comment , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; 
 + return cfg . get ( category , getName ( field ) , ( Short ) getObject ( instance , field ) , comment , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( Short ) value , null , Short . MIN _ VALUE , Short . MAX _ VALUE ) ; 
 @ @ - 303 , 7 + 303 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter ShrtA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Arrays . asList ( ( Short [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , Ints . toArray ( Arrays . asList ( ( Short [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , Ints . toArray ( Arrays . asList ( ( Short [ ] ) value ) ) , null ) ; 
 @ @ - 318 , 7 + 318 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter int _ = new TypeAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , getInt ( instance , field ) , comment , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; 
 + return cfg . get ( category , getName ( field ) , getInt ( instance , field ) , comment , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; 
 } 
 public Object getValue ( Property prop ) { 
 return prop . getInt ( ) ; 
 @ @ - 326 , 7 + 326 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter intA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( int [ ] ) getObject ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , ( int [ ] ) getObject ( instance , field ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( int [ ] ) value , null ) ; 
 @ @ - 337 , 7 + 337 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter Int = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( Integer ) getObject ( instance , field ) , comment , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; 
 + return cfg . get ( category , getName ( field ) , ( Integer ) getObject ( instance , field ) , comment , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( Integer ) value , null , Integer . MIN _ VALUE , Integer . MAX _ VALUE ) ; 
 @ @ - 348 , 7 + 348 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter IntA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , Ints . toArray ( Arrays . asList ( ( Integer [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , Ints . toArray ( Arrays . asList ( ( Integer [ ] ) getObject ( instance , field ) ) ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , Ints . toArray ( Arrays . asList ( ( Integer [ ] ) value ) ) , null ) ; 
 @ @ - 359 , 7 + 359 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter . Map Str = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( String ) getObject ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , ( String ) getObject ( instance , field ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( String ) value , null ) ; 
 @ @ - 370 , 7 + 370 , 7 @ @ class TypeAdapters 
 } ; 
 static ITypeAdapter StrA = new MapAdapter ( ) { 
 public Property getProp ( Configuration cfg , String category , Field field , Object instance , String comment ) { 
 - return cfg . get ( category , field . getName ( ) , ( String [ ] ) getObject ( instance , field ) , comment ) ; 
 + return cfg . get ( category , getName ( field ) , ( String [ ] ) getObject ( instance , field ) , comment ) ; 
 } 
 public Property getProp ( Configuration cfg , String category , String name , Object value ) { 
 return cfg . get ( category , name , ( String [ ] ) value , null ) ; 
 @ @ - 455 , 6 + 455 , 13 @ @ class TypeAdapters 
 } 
 return 0 ; 
 } 
 + 
 + public String getName ( Field f ) 
 + { 
 + if ( f . isAnnotationPresent ( Config . Name . class ) ) 
 + return f . getAnnotation ( Config . Name . class ) . value ( ) ; 
 + return f . getName ( ) ; 
 + } 
 } 
 private static abstract class MapAdapter extends TypeAdapter implements ITypeAdapter . Map { } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / ConfigTest . java b / src / test / java / net / minecraftforge / debug / ConfigTest . java 
 index 3978d5b . . 5d73c11 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ConfigTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / ConfigTest . java 
 @ @ - 71 , 4 + 71 , 24 @ @ public class ConfigTest 
 @ Comment ( { " This is a really long " , " Multi - line comment " } ) 
 public static String Comments = " Hi Tv ! " ; 
 } 
 + @ Config ( modid = MODID , name = MODID + " _ subcats " , category = " " ) 
 + public static class CONFIG _ SUBCATS 
 + { 
 + / / public static String THIS _ WILL _ ERROR = " DUH " ; 
 + 
 + @ Name ( " test _ a " ) 
 + public static SubCat sub1 = new SubCat ( " Hello " ) ; 
 + @ Name ( " test _ b " ) 
 + public static SubCat sub2 = new SubCat ( " Goodbye " ) ; 
 + 
 + public static class SubCat 
 + { 
 + @ Name ( " i _ say " ) 
 + public static String value ; 
 + public SubCat ( String value ) 
 + { 
 + this . value = value ; 
 + } 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / common / net / minecraftforge / common / ConfigCategory . java b / common / net / minecraftforge / common / ConfigCategory . java 
 index 38d1af9 . . 5af16b2 100644 
 - - - a / common / net / minecraftforge / common / ConfigCategory . java 
 + + + b / common / net / minecraftforge / common / ConfigCategory . java 
 @ @ - 1 , 5 + 1 , 8 @ @ 
 package net . minecraftforge . common ; 
 
 + import static net . minecraftforge . common . Configuration . NEW _ LINE ; 
 + import static net . minecraftforge . common . Configuration . allowedProperties ; 
 + 
 import java . io . BufferedWriter ; 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 @ @ - 7 , 11 + 10 , 10 @ @ import java . util . Collection ; 
 import java . util . Map ; 
 import java . util . Set ; 
 import java . util . TreeMap ; 
 - 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . ImmutableSet ; 
 import com . google . common . base . Splitter ; 
 
 - import static net . minecraftforge . common . Configuration . * ; 
 - 
 public class ConfigCategory implements Map < String , Property > 
 { 
 private String name ; 
 @ @ - 19 , 6 + 21 , 7 @ @ public class ConfigCategory implements Map < String , Property > 
 private ArrayList < ConfigCategory > children = new ArrayList < ConfigCategory > ( ) ; 
 private Map < String , Property > properties = new TreeMap < String , Property > ( ) ; 
 public final ConfigCategory parent ; 
 + private boolean changed = false ; 
 
 public ConfigCategory ( String name ) 
 { 
 @ @ - 68 , 7 + 71 , 7 @ @ public class ConfigCategory implements Map < String , Property > 
 
 public Map < String , Property > getValues ( ) 
 { 
 - return properties ; 
 + return ImmutableMap . copyOf ( properties ) ; 
 } 
 
 public void setComment ( String comment ) 
 @ @ - 86 , 39 + 89 , 48 @ @ public class ConfigCategory implements Map < String , Property > 
 return properties . get ( key ) ; 
 } 
 
 - public void set ( String key , Property value ) 
 + private void write ( BufferedWriter out , String . . . data ) throws IOException 
 + { 
 + write ( out , true , data ) ; 
 + } 
 + 
 + private void write ( BufferedWriter out , boolean new _ line , String . . . data ) throws IOException 
 { 
 - properties . put ( key , value ) ; 
 + for ( int x = 0 ; x < data . length ; x + + ) 
 + { 
 + out . write ( data [ x ] ) ; 
 + } 
 + if ( new _ line ) out . write ( NEW _ LINE ) ; 
 } 
 
 public void write ( BufferedWriter out , int indent ) throws IOException 
 { 
 - String pad = getIndent ( indent ) ; 
 + String pad0 = getIndent ( indent ) ; 
 + String pad1 = getIndent ( indent + 1 ) ; 
 + String pad2 = getIndent ( indent + 2 ) ; 
 
 - out . write ( pad + " # # # # # # # # # # # # # # # # # # # # " + NEW _ LINE ) ; 
 - out . write ( pad + " # " + name + NEW _ LINE ) ; 
 + write ( out , pad0 , " # # # # # # # # # # # # # # # # # # # # " ) ; 
 + write ( out , pad0 , " # " , name ) ; 
 
 if ( comment ! = null ) 
 { 
 - out . write ( pad + " # = = = = = = = = = = = = = = = = = = = " + NEW _ LINE ) ; 
 + write ( out , pad0 , " # = = = = = = = = = = = = = = = = = = = " ) ; 
 Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; 
 
 for ( String line : splitter . split ( comment ) ) 
 { 
 - out . write ( pad + " # " + line + NEW _ LINE ) ; 
 + write ( out , pad0 , " # " , line ) ; 
 } 
 } 
 
 - out . write ( pad + " # # # # # # # # # # # # # # # # # # # # " + NEW _ LINE + NEW _ LINE ) ; 
 + write ( out , pad0 , " # # # # # # # # # # # # # # # # # # # # " , NEW _ LINE ) ; 
 
 if ( ! allowedProperties . matchesAllOf ( name ) ) 
 { 
 name = ' " ' + name + ' " ' ; 
 } 
 
 - out . write ( pad + name + " { " + NEW _ LINE ) ; 
 - 
 - pad = getIndent ( indent + 1 ) ; 
 + write ( out , pad0 , name , " { " ) ; 
 
 Property [ ] props = properties . values ( ) . toArray ( new Property [ properties . size ( ) ] ) ; 
 
 @ @ - 136 , 7 + 148 , 7 @ @ public class ConfigCategory implements Map < String , Property > 
 Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; 
 for ( String commentLine : splitter . split ( prop . comment ) ) 
 { 
 - out . write ( pad + " # " + commentLine + NEW _ LINE ) ; 
 + write ( out , pad1 , " # " , commentLine ) ; 
 } 
 } 
 
 @ @ - 149 , 23 + 161 , 25 @ @ public class ConfigCategory implements Map < String , Property > 
 
 if ( prop . isList ( ) ) 
 { 
 - out . write ( String . format ( pad + " % s : % s < " + NEW _ LINE , prop . getType ( ) . getID ( ) , propName ) ) ; 
 - pad = getIndent ( indent + 2 ) ; 
 + char type = prop . getType ( ) . getID ( ) ; 
 + 
 + write ( out , pad1 , String . valueOf ( type ) , " : " , propName , " < " ) ; 
 
 - for ( String line : prop . valueList ) 
 + for ( String line : prop . getStringList ( ) ) 
 { 
 - out . write ( pad + line + NEW _ LINE ) ; 
 + write ( out , pad2 , line ) ; 
 } 
 
 - out . write ( getIndent ( indent + 1 ) + " > " + NEW _ LINE ) ; 
 + write ( out , pad1 , " > " ) ; 
 } 
 else if ( prop . getType ( ) = = null ) 
 { 
 - out . write ( String . format ( pad + " % s = % s " + NEW _ LINE , propName , prop . value ) ) ; 
 + write ( out , pad1 , propName , " = " , prop . getString ( ) ) ; 
 } 
 else 
 { 
 - out . write ( String . format ( pad + " % s : % s = % s " + NEW _ LINE , prop . getType ( ) . getID ( ) , propName , prop . value ) ) ; 
 + char type = prop . getType ( ) . getID ( ) ; 
 + write ( out , pad1 , String . valueOf ( type ) , " : " , propName , " = " , prop . getString ( ) ) ; 
 } 
 } 
 
 @ @ - 174 , 7 + 188 , 7 @ @ public class ConfigCategory implements Map < String , Property > 
 child . write ( out , indent + 1 ) ; 
 } 
 
 - out . write ( getIndent ( indent ) + " } " + NEW _ LINE + NEW _ LINE ) ; 
 + write ( out , pad0 , " } " , NEW _ LINE ) ; 
 } 
 
 private String getIndent ( int indent ) 
 @ @ - 187 , 6 + 201 , 25 @ @ public class ConfigCategory implements Map < String , Property > 
 return buf . toString ( ) ; 
 } 
 
 + public boolean hasChanged ( ) 
 + { 
 + if ( changed ) return true ; 
 + for ( Property prop : properties . values ( ) ) 
 + { 
 + if ( prop . hasChanged ( ) ) return true ; 
 + } 
 + return false ; 
 + } 
 + 
 + void resetChangedState ( ) 
 + { 
 + changed = false ; 
 + for ( Property prop : properties . values ( ) ) 
 + { 
 + prop . resetChangedState ( ) ; 
 + } 
 + } 
 + 
 
 / / Map bouncer functions for compatibility with older mods , to be removed once all mods stop using it . 
 @ Override public int size ( ) { return properties . size ( ) ; } 
 @ @ - 194 , 12 + 227 , 33 @ @ public class ConfigCategory implements Map < String , Property > 
 @ Override public boolean containsKey ( Object key ) { return properties . containsKey ( key ) ; } 
 @ Override public boolean containsValue ( Object value ) { return properties . containsValue ( value ) ; } 
 @ Override public Property get ( Object key ) { return properties . get ( key ) ; } 
 - @ Override public Property put ( String key , Property value ) { return properties . put ( key , value ) ; } 
 - @ Override public Property remove ( Object key ) { return properties . remove ( key ) ; } 
 - @ Override public void putAll ( Map < ? extends String , ? extends Property > m ) { properties . putAll ( m ) ; } 
 - @ Override public void clear ( ) { properties . clear ( ) ; } 
 + @ Override public Property put ( String key , Property value ) 
 + { 
 + changed = true ; 
 + return properties . put ( key , value ) ; 
 + } 
 + @ Override public Property remove ( Object key ) 
 + { 
 + changed = true ; 
 + return properties . remove ( key ) ; 
 + } 
 + @ Override public void putAll ( Map < ? extends String , ? extends Property > m ) 
 + { 
 + changed = true ; 
 + properties . putAll ( m ) ; 
 + } 
 + @ Override public void clear ( ) 
 + { 
 + changed = true ; 
 + properties . clear ( ) ; 
 + } 
 @ Override public Set < String > keySet ( ) { return properties . keySet ( ) ; } 
 @ Override public Collection < Property > values ( ) { return properties . values ( ) ; } 
 - @ Override public Set < java . util . Map . Entry < String , Property > > entrySet ( ) { return properties . entrySet ( ) ; } 
 + 
 + @ Override / / Immutable copy , changes will NOT be reflected in this category 
 + public Set < java . util . Map . Entry < String , Property > > entrySet ( ) 
 + { 
 + return ImmutableSet . copyOf ( properties . entrySet ( ) ) ; 
 + } 
 
 } 
 \ No newline at end of file 
 diff - - git a / common / net / minecraftforge / common / Configuration . java b / common / net / minecraftforge / common / Configuration . java 
 index b3911a8 . . fc6237c 100644 
 - - - a / common / net / minecraftforge / common / Configuration . java 
 + + + b / common / net / minecraftforge / common / Configuration . java 
 @ @ - 5 , 31 + 5 , 41 @ @ 
 
 package net . minecraftforge . common ; 
 
 - import java . io . * ; 
 - import java . text . DateFormat ; 
 + import static net . minecraftforge . common . Property . Type . BOOLEAN ; 
 + import static net . minecraftforge . common . Property . Type . DOUBLE ; 
 + import static net . minecraftforge . common . Property . Type . INTEGER ; 
 + import static net . minecraftforge . common . Property . Type . STRING ; 
 + 
 + import java . io . BufferedReader ; 
 + import java . io . BufferedWriter ; 
 + import java . io . File ; 
 + import java . io . FileInputStream ; 
 + import java . io . FileOutputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . io . InputStreamReader ; 
 + import java . io . OutputStreamWriter ; 
 + import java . io . PushbackInputStream ; 
 + import java . io . Reader ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 - import java . util . Collection ; 
 - import java . util . Date ; 
 import java . util . Locale ; 
 import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . TreeMap ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . item . Item ; 
 + 
 import com . google . common . base . CharMatcher ; 
 - import com . google . common . base . Splitter ; 
 - import com . google . common . collect . Maps ; 
 + import com . google . common . collect . ImmutableSet ; 
 
 - import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . relauncher . FMLInjectionData ; 
 
 - import net . minecraft . block . Block ; 
 - import net . minecraft . item . Item ; 
 - import static net . minecraftforge . common . Property . Type . * ; 
 - 
 / * * 
 * This class offers advanced configurations capabilities , allowing to provide 
 * various categories for configuration variables . 
 @ @ - 54 , 13 + 64 , 14 @ @ public class Configuration 
 
 File file ; 
 
 - public Map < String , ConfigCategory > categories = new TreeMap < String , ConfigCategory > ( ) ; 
 + private Map < String , ConfigCategory > categories = new TreeMap < String , ConfigCategory > ( ) ; 
 private Map < String , Configuration > children = new TreeMap < String , Configuration > ( ) ; 
 
 private boolean caseSensitiveCustomCategories ; 
 public String defaultEncoding = DEFAULT _ ENCODING ; 
 private String fileName = null ; 
 public boolean isChild = false ; 
 + private boolean changed = false ; 
 
 static 
 { 
 @ @ - 148 , 7 + 159 , 7 @ @ public class Configuration 
 
 if ( Block . blocksList [ defaultID ] = = null & & ! configMarkers [ defaultID ] ) 
 { 
 - prop . value = Integer . toString ( defaultID ) ; 
 + prop . set ( defaultID ) ; 
 configMarkers [ defaultID ] = true ; 
 return prop ; 
 } 
 @ @ - 158 , 7 + 169 , 7 @ @ public class Configuration 
 { 
 if ( Block . blocksList [ j ] = = null & & ! configMarkers [ j ] ) 
 { 
 - prop . value = Integer . toString ( j ) ; 
 + prop . set ( j ) ; 
 configMarkers [ j ] = true ; 
 return prop ; 
 } 
 @ @ - 196 , 7 + 207 , 7 @ @ public class Configuration 
 
 if ( Item . itemsList [ defaultShift ] = = null & & ! configMarkers [ defaultShift ] & & defaultShift > = Block . blocksList . length ) 
 { 
 - prop . value = Integer . toString ( defaultID ) ; 
 + prop . set ( defaultID ) ; 
 configMarkers [ defaultShift ] = true ; 
 return prop ; 
 } 
 @ @ - 206 , 7 + 217 , 7 @ @ public class Configuration 
 { 
 if ( Item . itemsList [ x ] = = null & & ! configMarkers [ x ] ) 
 { 
 - prop . value = Integer . toString ( x - ITEM _ SHIFT ) ; 
 + prop . set ( x - ITEM _ SHIFT ) ; 
 configMarkers [ x ] = true ; 
 return prop ; 
 } 
 @ @ - 227 , 7 + 238 , 7 @ @ public class Configuration 
 Property prop = get ( category , key , Integer . toString ( defaultValue ) , comment , INTEGER ) ; 
 if ( ! prop . isIntValue ( ) ) 
 { 
 - prop . value = Integer . toString ( defaultValue ) ; 
 + prop . set ( defaultValue ) ; 
 } 
 return prop ; 
 } 
 @ @ - 242 , 7 + 253 , 7 @ @ public class Configuration 
 Property prop = get ( category , key , Boolean . toString ( defaultValue ) , comment , BOOLEAN ) ; 
 if ( ! prop . isBooleanValue ( ) ) 
 { 
 - prop . value = Boolean . toString ( defaultValue ) ; 
 + prop . set ( defaultValue ) ; 
 } 
 return prop ; 
 } 
 @ @ - 257 , 7 + 268 , 7 @ @ public class Configuration 
 Property prop = get ( category , key , Double . toString ( defaultValue ) , comment , DOUBLE ) ; 
 if ( ! prop . isDoubleValue ( ) ) 
 { 
 - prop . value = Double . toString ( defaultValue ) ; 
 + prop . set ( defaultValue ) ; 
 } 
 return prop ; 
 } 
 @ @ - 298 , 7 + 309 , 7 @ @ public class Configuration 
 Property prop = get ( category , key , values , comment , INTEGER ) ; 
 if ( ! prop . isIntList ( ) ) 
 { 
 - prop . valueList = values ; 
 + prop . set ( values ) ; 
 } 
 
 return prop ; 
 @ @ - 321 , 7 + 332 , 7 @ @ public class Configuration 
 
 if ( ! prop . isDoubleList ( ) ) 
 { 
 - prop . valueList = values ; 
 + prop . set ( values ) ; 
 } 
 
 return prop ; 
 @ @ - 344 , 7 + 355 , 7 @ @ public class Configuration 
 
 if ( ! prop . isBooleanList ( ) ) 
 { 
 - prop . valueList = values ; 
 + prop . set ( values ) ; 
 } 
 
 return prop ; 
 @ @ - 365 , 8 + 376 , 8 @ @ public class Configuration 
 
 if ( prop . getType ( ) = = null ) 
 { 
 - prop = new Property ( prop . getName ( ) , prop . value , type ) ; 
 - cat . set ( key , prop ) ; 
 + prop = new Property ( prop . getName ( ) , prop . getString ( ) , type ) ; 
 + cat . put ( key , prop ) ; 
 } 
 
 prop . comment = comment ; 
 @ @ - 375 , 7 + 386 , 8 @ @ public class Configuration 
 else if ( defaultValue ! = null ) 
 { 
 Property prop = new Property ( key , defaultValue , type ) ; 
 - cat . set ( key , prop ) ; 
 + prop . set ( defaultValue ) ; / / Set and mark as dirty to signify it should save 
 + cat . put ( key , prop ) ; 
 prop . comment = comment ; 
 return prop ; 
 } 
 @ @ - 400 , 8 + 412 , 8 @ @ public class Configuration 
 
 if ( prop . getType ( ) = = null ) 
 { 
 - prop = new Property ( prop . getName ( ) , prop . value , type ) ; 
 - cat . set ( key , prop ) ; 
 + prop = new Property ( prop . getName ( ) , prop . getString ( ) , type ) ; 
 + cat . put ( key , prop ) ; 
 } 
 
 prop . comment = comment ; 
 @ @ - 412 , 7 + 424 , 7 @ @ public class Configuration 
 { 
 Property prop = new Property ( key , defaultValue , type ) ; 
 prop . comment = comment ; 
 - cat . set ( key , prop ) ; 
 + cat . put ( key , prop ) ; 
 return prop ; 
 } 
 else 
 @ @ - 569 , 7 + 581 , 7 @ @ public class Configuration 
 Property prop = new Property ( name , line . substring ( i + 1 ) , type , true ) ; 
 i = line . length ( ) ; 
 
 - currentCat . set ( name , prop ) ; 
 + currentCat . put ( name , prop ) ; 
 
 break ; 
 
 @ @ - 603 , 7 + 615 , 7 @ @ public class Configuration 
 throw new RuntimeException ( String . format ( " Malformed list property \ " % s : % d \ " " , fileName , lineNum ) ) ; 
 } 
 
 - currentCat . set ( name , new Property ( name , tmpList . toArray ( new String [ tmpList . size ( ) ] ) , type ) ) ; 
 + currentCat . put ( name , new Property ( name , tmpList . toArray ( new String [ tmpList . size ( ) ] ) , type ) ) ; 
 name = null ; 
 tmpList = null ; 
 type = null ; 
 @ @ - 647 , 6 + 659 , 8 @ @ public class Configuration 
 } catch ( IOException e ) { } 
 } 
 } 
 + 
 + resetChangedState ( ) ; 
 } 
 
 public void save ( ) 
 @ @ - 701 , 29 + 715 , 7 @ @ public class Configuration 
 } 
 
 private void save ( BufferedWriter out ) throws IOException 
 - { 
 - / / For compatiblitties sake just in case , Thanks Atomic , to be removed next MC version 
 - / / TO - DO : Remove next MC version 
 - Object [ ] categoryArray = categories . values ( ) . toArray ( ) ; 
 - for ( Object o : categoryArray ) 
 - { 
 - if ( o instanceof TreeMap ) 
 - { 
 - TreeMap treeMap = ( TreeMap ) o ; 
 - ConfigCategory converted = new ConfigCategory ( file . getName ( ) ) ; 
 - FMLLog . warning ( " Forge found a Treemap saved for Configuration file " + file . getName ( ) + " , this is deprecated behaviour ! " ) ; 
 - 
 - for ( Object key : treeMap . keySet ( ) ) 
 - { 
 - FMLLog . warning ( " Converting Treemap to ConfigCategory , key : " + key + " , property value : " + ( ( Property ) treeMap . get ( key ) ) . value ) ; 
 - converted . set ( ( String ) key , ( Property ) treeMap . get ( key ) ) ; 
 - } 
 - 
 - categories . values ( ) . remove ( o ) ; 
 - categories . put ( file . getName ( ) , converted ) ; 
 - } 
 - } 
 - 
 + { 
 for ( ConfigCategory cat : categories . values ( ) ) 
 { 
 if ( ! cat . isChild ( ) ) 
 @ @ - 749 , 6 + 741 , 7 @ @ public class Configuration 
 { 
 parent = new ConfigCategory ( hierarchy [ 0 ] ) ; 
 categories . put ( parent . getQualifiedName ( ) , parent ) ; 
 + changed = true ; 
 } 
 
 for ( int i = 1 ; i < hierarchy . length ; i + + ) 
 @ @ - 760 , 6 + 753 , 7 @ @ public class Configuration 
 { 
 child = new ConfigCategory ( hierarchy [ i ] , parent ) ; 
 categories . put ( name , child ) ; 
 + changed = true ; 
 } 
 
 ret = child ; 
 @ @ - 770 , 6 + 764 , 7 @ @ public class Configuration 
 { 
 ret = new ConfigCategory ( category ) ; 
 categories . put ( category , ret ) ; 
 + changed = true ; 
 } 
 } 
 
 @ @ - 788 , 12 + 783 , 14 @ @ public class Configuration 
 if ( ! children . containsKey ( name ) ) 
 { 
 children . put ( name , child ) ; 
 + changed = true ; 
 } 
 else 
 { 
 Configuration old = children . get ( name ) ; 
 child . categories = old . categories ; 
 child . fileName = old . fileName ; 
 + old . changed = true ; 
 } 
 } 
 
 @ @ - 873 , 4 + 870 , 40 @ @ public class Configuration 
 input . close ( ) ; 
 } 
 } 
 + 
 + public boolean hasChanged ( ) 
 + { 
 + if ( changed ) return true ; 
 + 
 + for ( ConfigCategory cat : categories . values ( ) ) 
 + { 
 + if ( cat . hasChanged ( ) ) return true ; 
 + } 
 + 
 + for ( Configuration child : children . values ( ) ) 
 + { 
 + if ( child . hasChanged ( ) ) return true ; 
 + } 
 + 
 + return false ; 
 + } 
 + 
 + private void resetChangedState ( ) 
 + { 
 + changed = false ; 
 + for ( ConfigCategory cat : categories . values ( ) ) 
 + { 
 + cat . resetChangedState ( ) ; 
 + } 
 + 
 + for ( Configuration child : children . values ( ) ) 
 + { 
 + child . resetChangedState ( ) ; 
 + } 
 + } 
 + 
 + public Set < String > getCategoryNames ( ) 
 + { 
 + return ImmutableSet . copyOf ( categories . keySet ( ) ) ; 
 + } 
 } 
 diff - - git a / common / net / minecraftforge / common / ForgeChunkManager . java b / common / net / minecraftforge / common / ForgeChunkManager . java 
 index ae45c5a . . b12ba05 100644 
 - - - a / common / net / minecraftforge / common / ForgeChunkManager . java 
 + + + b / common / net / minecraftforge / common / ForgeChunkManager . java 
 @ @ - 775 , 7 + 775 , 7 @ @ public class ForgeChunkManager 
 
 static void loadConfiguration ( ) 
 { 
 - for ( String mod : config . categories . keySet ( ) ) 
 + for ( String mod : config . getCategoryNames ( ) ) 
 { 
 if ( mod . equals ( " Forge " ) | | mod . equals ( " defaults " ) ) 
 { 
 @ @ - 786 , 7 + 786 , 10 @ @ public class ForgeChunkManager 
 ticketConstraints . put ( mod , modTC . getInt ( 200 ) ) ; 
 chunkConstraints . put ( mod , modCPT . getInt ( 25 ) ) ; 
 } 
 - config . save ( ) ; 
 + if ( config . hasChanged ( ) ) 
 + { 
 + config . save ( ) ; 
 + } 
 } 
 
 / * * 
 @ @ - 953 , 7 + 956 , 7 @ @ public class ForgeChunkManager 
 sampleTC . comment = " Maximum ticket count for the mod . Zero disables chunkloading capabilities . " ; 
 sampleTC = config . get ( " Forge " , " maximumChunksPerTicket " , 25 ) ; 
 sampleTC . comment = " Maximum chunks per ticket for the mod . " ; 
 - for ( String mod : config . categories . keySet ( ) ) 
 + for ( String mod : config . getCategoryNames ( ) ) 
 { 
 if ( mod . equals ( " Forge " ) | | mod . equals ( " defaults " ) ) 
 { 
 @ @ - 965 , 12 + 968 , 12 @ @ public class ForgeChunkManager 
 } 
 
 
 - public static Map < String , Property > getConfigMapFor ( Object mod ) 
 + public static ConfigCategory getConfigFor ( Object mod ) 
 { 
 ModContainer container = getContainer ( mod ) ; 
 if ( container ! = null ) 
 { 
 - return config . getCategory ( container . getModId ( ) ) . getValues ( ) ; 
 + return config . getCategory ( container . getModId ( ) ) ; 
 } 
 
 return null ; 
 @ @ - 981 , 8 + 984 , 8 @ @ public class ForgeChunkManager 
 ModContainer container = getContainer ( mod ) ; 
 if ( container ! = null ) 
 { 
 - Map < String , Property > props = config . getCategory ( container . getModId ( ) ) . getValues ( ) ; 
 - props . put ( propertyName , new Property ( propertyName , value , type ) ) ; 
 + ConfigCategory cat = config . getCategory ( container . getModId ( ) ) ; 
 + cat . put ( propertyName , new Property ( propertyName , value , type ) ) ; 
 } 
 } 
 } 
 diff - - git a / common / net / minecraftforge / common / ForgeDummyContainer . java b / common / net / minecraftforge / common / ForgeDummyContainer . java 
 index 8a3dffe . . a49713c 100644 
 - - - a / common / net / minecraftforge / common / ForgeDummyContainer . java 
 + + + b / common / net / minecraftforge / common / ForgeDummyContainer . java 
 @ @ - 44 , 7 + 44 , 22 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces 
 meta . screenshots = new String [ 0 ] ; 
 meta . logoFile = " / forge _ logo . png " ; 
 
 - Configuration config = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ) ; 
 + Configuration config = null ; 
 + File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; 
 + try 
 + { 
 + config = new Configuration ( cfgFile ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + System . out . println ( " Error loading forge . cfg , deleting file and resetting : " ) ; 
 + e . printStackTrace ( ) ; 
 + 
 + if ( cfgFile . exists ( ) ) 
 + cfgFile . delete ( ) ; 
 + 
 + config = new Configuration ( cfgFile ) ; 
 + } 
 if ( ! config . isChild ) 
 { 
 config . load ( ) ; 
 @ @ - 60 , 9 + 75 , 13 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces 
 if ( clumpingThreshold > 1024 | | clumpingThreshold < 64 ) 
 { 
 clumpingThreshold = 64 ; 
 - clumpingThresholdProperty . value = " 64 " ; 
 + clumpingThresholdProperty . set ( 64 ) ; 
 + } 
 + 
 + if ( config . hasChanged ( ) ) 
 + { 
 + config . save ( ) ; 
 } 
 - config . save ( ) ; 
 } 
 
 @ Override 
 diff - - git a / common / net / minecraftforge / common / Property . java b / common / net / minecraftforge / common / Property . java 
 index 1220fe9 . . 00b1175 100644 
 - - - a / common / net / minecraftforge / common / Property . java 
 + + + b / common / net / minecraftforge / common / Property . java 
 @ @ - 40 , 13 + 40 , 14 @ @ public class Property 
 } 
 
 private String name ; 
 - public String value ; 
 + private String value ; 
 public String comment ; 
 - public String [ ] valueList ; 
 + private String [ ] values ; 
 
 private final boolean wasRead ; 
 private final boolean isList ; 
 private final Type type ; 
 + private boolean changed = false ; 
 
 public Property ( ) 
 { 
 @ @ - 77 , 10 + 78 , 20 @ @ public class Property 
 Property ( String name , String [ ] values , Type type , boolean read ) 
 { 
 setName ( name ) ; 
 - this . type = type ; 
 - valueList = values ; 
 - wasRead = read ; 
 - isList = true ; 
 + this . type = type ; 
 + this . values = values ; 
 + wasRead = read ; 
 + isList = true ; 
 + } 
 + 
 + / * * 
 + * Returns the value in this property as it ' s raw string . 
 + * 
 + * @ return current value 
 + * / 
 + public String getString ( ) 
 + { 
 + return value ; 
 } 
 
 / * * 
 @ @ - 197 , 6 + 208 , 11 @ @ public class Property 
 } 
 } 
 
 + public String [ ] getStringList ( ) 
 + { 
 + return values ; 
 + } 
 + 
 / * * 
 * Returns the integer value of all values that can 
 * be parsed in the list . 
 @ @ - 207 , 7 + 223 , 7 @ @ public class Property 
 { 
 ArrayList < Integer > nums = new ArrayList < Integer > ( ) ; 
 
 - for ( String value : valueList ) 
 + for ( String value : values ) 
 { 
 try 
 { 
 @ @ - 232 , 7 + 248 , 7 @ @ public class Property 
 * / 
 public boolean isIntList ( ) 
 { 
 - for ( String value : valueList ) 
 + for ( String value : values ) 
 { 
 try 
 { 
 @ @ - 254 , 21 + 270 , 21 @ @ public class Property 
 * / 
 public boolean [ ] getBooleanList ( ) 
 { 
 - ArrayList < Boolean > values = new ArrayList < Boolean > ( ) ; 
 - for ( String value : valueList ) 
 + ArrayList < Boolean > tmp = new ArrayList < Boolean > ( ) ; 
 + for ( String value : values ) 
 { 
 try 
 { 
 - values . add ( Boolean . parseBoolean ( value ) ) ; 
 + tmp . add ( Boolean . parseBoolean ( value ) ) ; 
 } 
 catch ( NumberFormatException e ) { } 
 } 
 
 - boolean [ ] primitives = new boolean [ values . size ( ) ] ; 
 + boolean [ ] primitives = new boolean [ tmp . size ( ) ] ; 
 
 - for ( int i = 0 ; i < values . size ( ) ; i + + ) 
 + for ( int i = 0 ; i < tmp . size ( ) ; i + + ) 
 { 
 - primitives [ i ] = values . get ( i ) ; 
 + primitives [ i ] = tmp . get ( i ) ; 
 } 
 
 return primitives ; 
 @ @ - 280 , 7 + 296 , 7 @ @ public class Property 
 * / 
 public boolean isBooleanList ( ) 
 { 
 - for ( String value : valueList ) 
 + for ( String value : values ) 
 { 
 if ( ! " true " . equalsIgnoreCase ( value ) & & ! " false " . equalsIgnoreCase ( value ) ) 
 { 
 @ @ - 299 , 21 + 315 , 21 @ @ public class Property 
 * / 
 public double [ ] getDoubleList ( ) 
 { 
 - ArrayList < Double > values = new ArrayList < Double > ( ) ; 
 - for ( String value : valueList ) 
 + ArrayList < Double > tmp = new ArrayList < Double > ( ) ; 
 + for ( String value : values ) 
 { 
 try 
 { 
 - values . add ( Double . parseDouble ( value ) ) ; 
 + tmp . add ( Double . parseDouble ( value ) ) ; 
 } 
 catch ( NumberFormatException e ) { } 
 } 
 
 - double [ ] primitives = new double [ values . size ( ) ] ; 
 + double [ ] primitives = new double [ tmp . size ( ) ] ; 
 
 - for ( int i = 0 ; i < values . size ( ) ; i + + ) 
 + for ( int i = 0 ; i < tmp . size ( ) ; i + + ) 
 { 
 - primitives [ i ] = values . get ( i ) ; 
 + primitives [ i ] = tmp . get ( i ) ; 
 } 
 
 return primitives ; 
 @ @ - 325 , 7 + 341 , 7 @ @ public class Property 
 * / 
 public boolean isDoubleList ( ) 
 { 
 - for ( String value : valueList ) 
 + for ( String value : values ) 
 { 
 try 
 { 
 @ @ - 371 , 4 + 387 , 23 @ @ public class Property 
 { 
 return isList ; 
 } 
 + 
 + public boolean hasChanged ( ) { return changed ; } 
 + void resetChangedState ( ) { changed = false ; } 
 + 
 + public void set ( String value ) 
 + { 
 + this . value = value ; 
 + changed = true ; 
 + } 
 + 
 + public void set ( String [ ] values ) 
 + { 
 + this . values = values ; 
 + changed = true ; 
 + } 
 + 
 + public void set ( int value ) { set ( Integer . toString ( value ) ) ; } 
 + public void set ( boolean value ) { set ( Boolean . toString ( value ) ) ; } 
 + public void set ( double value ) { set ( Double . toString ( value ) ) ; } 
 }
