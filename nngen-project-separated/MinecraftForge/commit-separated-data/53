BLEU SCORE: 0.04932351569489709

TEST MSG: Add in the ability to load modlists from a file .
GENERATED MSG: Some tweaks to get the launcher working .

TEST DIFF (one line): diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FileUtils . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FileUtils . java <nl> index 4273163 . . 9353bce 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FileUtils . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FileUtils . java <nl> @ @ - 56 , 4 + 56 , 15 @ @ public class FileUtils <nl> } <nl> return dirPath ; <nl> } <nl> + <nl> + <nl> + public static String fileExtension ( final Path path ) { <nl> + String fileName = path . getFileName ( ) . toString ( ) ; <nl> + int idx = fileName . lastIndexOf ( ' . ' ) ; <nl> + if ( idx > - 1 ) { <nl> + return fileName . substring ( idx + 1 ) ; <nl> + } else { <nl> + return " " ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java <nl> index f405f5a . . 5d7b3b9 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . nio . file . Path ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> <nl> public class MavenDirectoryLocator extends AbstractJarFileLocator { <nl> private List < Path > modCoords ; <nl> @ @ - 54 , 7 + 55 , 9 @ @ public class MavenDirectoryLocator extends AbstractJarFileLocator { <nl> final List < String > mavenRoots = ( List < String > ) arguments . get ( " mavenRoots " ) ; <nl> final List < Path > mavenRootPaths = mavenRoots . stream ( ) . map ( n - > FMLPaths . GAMEDIR . get ( ) . resolve ( n ) ) . collect ( Collectors . toList ( ) ) ; <nl> final List < String > mods = ( List < String > ) arguments . get ( " mods " ) ; <nl> - List < Path > localModCoords = mods . stream ( ) . map ( MavenCoordinateResolver : : get ) . collect ( Collectors . toList ( ) ) ; <nl> + final List < String > listedMods = ModListHandler . processModLists ( ( List < String > ) arguments . get ( " modLists " ) , mavenRootPaths ) ; <nl> + <nl> + List < Path > localModCoords = Stream . concat ( mods . stream ( ) , listedMods . stream ( ) ) . map ( MavenCoordinateResolver : : get ) . collect ( Collectors . toList ( ) ) ; <nl> / / find the modCoords path in each supplied maven path , and turn it into a mod file . ( skips not found files ) <nl> <nl> this . modCoords = localModCoords . stream ( ) . map ( mc - > mavenRootPaths . stream ( ) . map ( root - > root . resolve ( mc ) ) . filter ( path - > Files . exists ( path ) ) . findFirst ( ) . orElseThrow ( ( ) - > new IllegalArgumentException ( " Failed to locate requested mod coordinate " + mc ) ) ) . collect ( Collectors . toList ( ) ) ; <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModListHandler . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModListHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 5717c82 <nl> - - - / dev / null <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModListHandler . java <nl> @ @ - 0 , 0 + 1 , 103 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2019 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . loading . moddiscovery ; <nl> + <nl> + import net . minecraftforge . fml . loading . FMLPaths ; <nl> + import net . minecraftforge . fml . loading . FileUtils ; <nl> + import net . minecraftforge . fml . loading . MavenCoordinateResolver ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Path ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + import java . util . Objects ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + import static net . minecraftforge . fml . loading . LogMarkers . CORE ; <nl> + <nl> + public class ModListHandler { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + / * * <nl> + * Reads the modList paths specified , and searches each maven root for mods matching . Returns a list of mods <nl> + * found . <nl> + * <nl> + * @ param modListPaths Paths to search for mod file lists <nl> + * @ param mavenRootPaths Roots to look for mods listed <nl> + * @ return list of found mod coordinates <nl> + * / <nl> + public static List < String > processModLists ( final List < String > modListPaths , final List < Path > mavenRootPaths ) { <nl> + final List < String > modCoordinates = modListPaths . stream ( ) . map ( ModListHandler : : transformPathToList ) . <nl> + flatMap ( Collection : : stream ) . <nl> + collect ( Collectors . toList ( ) ) ; <nl> + <nl> + List < Pair < Path , String > > localModCoords = modCoordinates . stream ( ) . map ( mc - > Pair . of ( MavenCoordinateResolver . get ( mc ) , mc ) ) . collect ( Collectors . toList ( ) ) ; <nl> + final List < Pair < Path , String > > foundCoordinates = localModCoords . stream ( ) . <nl> + map ( mc - > mavenRootPaths . stream ( ) . <nl> + map ( root - > Pair . of ( root . resolve ( mc . getLeft ( ) ) , mc . getRight ( ) ) ) . <nl> + filter ( path - > Files . exists ( path . getLeft ( ) ) ) . <nl> + findFirst ( ) . <nl> + orElseGet ( ( ) - > { <nl> + LOGGER . warn ( CORE , " Failed to find coordinate { } " , mc ) ; <nl> + return null ; <nl> + } ) ) . <nl> + filter ( Objects : : nonNull ) . <nl> + collect ( Collectors . toList ( ) ) ; <nl> + <nl> + final List < String > found = foundCoordinates . stream ( ) . map ( Pair : : getRight ) . collect ( Collectors . toList ( ) ) ; <nl> + LOGGER . debug ( CORE , " Found mod coordinates from lists : { } " , found ) ; <nl> + return found ; <nl> + } <nl> + <nl> + private static List < String > transformPathToList ( final String path ) { <nl> + LOGGER . debug ( CORE , " Reading mod list { } " , path ) ; <nl> + Path filePath = FMLPaths . GAMEDIR . get ( ) . resolve ( path ) ; <nl> + if ( ! Files . exists ( filePath ) ) { <nl> + LOGGER . warn ( CORE , " Failed to find modlist file at { } " , filePath ) ; <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + String extension = FileUtils . fileExtension ( filePath ) ; <nl> + if ( Objects . equals ( " list " , extension ) ) { <nl> + return readListFile ( filePath ) . stream ( ) . filter ( s - > ! s . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ; <nl> + } else { <nl> + LOGGER . warn ( CORE , " Failed to read unknown file list type { } for file { } " , extension , filePath ) ; <nl> + } <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Simple list file , ending in " . list " with one mod coordinate per line <nl> + * @ param filePath path <nl> + * @ return list <nl> + * / <nl> + private static List < String > readListFile ( final Path filePath ) { <nl> + try { <nl> + return Files . readAllLines ( filePath ) ; <nl> + } catch ( IOException e ) { <nl> + LOGGER . warn ( CORE , " Failed to read file list { } " , filePath , e ) ; <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index e5fbd8c . . cacd8c9 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 105 , 7 + 105 , 7 @ @ project ( ' : forge ' ) { <nl> } <nl> dependencies { <nl> api ' net . minecraft : client : 1 . 13 : extra ' <nl> - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 3 ' / / Pinned until cpw fixes getCommonSupertype <nl> + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype <nl> api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' <nl> api ' net . minecraftforge : eventbus : 0 . 1 + : service ' <nl> api ' net . minecraftforge : forgespi : 0 . 1 + ' <nl> @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { <nl> api ' java3d : vecmath : 1 . 5 . 2 ' <nl> } <nl> <nl> + / * <nl> configurations { <nl> ecj <nl> } <nl> @ @ - 124 , 6 + 125 , 7 @ @ project ( ' : forge ' ) { <nl> dependencies { <nl> ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' <nl> } <nl> + * / <nl> <nl> / * Forge compiles , no longer need eclipse compiler <nl> compileJava { <nl> @ @ - 177 , 6 + 179 , 7 @ @ project ( ' : forge ' ) { <nl> <nl> include ' net / minecraftforge / ' <nl> exclude ' net / minecraftforge / server / terminalconsole / ' <nl> + exclude ' net / minecraftforge / api / ' / / exclude API here because it ' s validated in the SPI build <nl> exclude ' net / minecraftforge / fml / common / versioning / ComparableVersion . java ' <nl> exclude ' net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java ' <nl> exclude ' net / minecraftforge / fml / common / versioning / Restriction . java ' <nl> diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> index 0167b79 . . 458d4ab 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . client . extensions ; <nl> <nl> import javax . annotation . Nonnull ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> index 72827d3 . . b24858d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> @ @ - 23 , 10 + 23 , 15 @ @ import com . electronwill . nightconfig . core . file . FileConfig ; <nl> import net . minecraftforge . fml . language . IModInfo ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> <nl> + import java . io . IOException ; <nl> + import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> + import java . nio . file . FileSystems ; <nl> import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> + import java . util . Objects ; <nl> <nl> public class DefaultModInfos <nl> { <nl> @ @ - 35 , 12 + 40 , 17 @ @ public class DefaultModInfos <nl> FileConfig forgemod ; <nl> try <nl> { <nl> - minecraftmod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ) ) ; <nl> + final URI jarFileURI = DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ; <nl> + if ( Objects . equals ( jarFileURI . getScheme ( ) , " jar " ) ) { <nl> + / / Initialize the filesystem for the forge jar , because otherwise this barfs ? <nl> + FileSystems . newFileSystem ( jarFileURI , new HashMap < > ( ) ) ; <nl> + } <nl> + minecraftmod = FileConfig . of ( Paths . get ( jarFileURI ) ) ; <nl> forgemod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " forgemod . toml " ) . toURI ( ) ) ) ; <nl> minecraftmod . load ( ) ; <nl> forgemod . load ( ) ; <nl> } <nl> - catch ( URISyntaxException | NullPointerException e ) <nl> + catch ( IOException | URISyntaxException | NullPointerException e ) <nl> { <nl> throw new RuntimeException ( " Missing toml configs for minecraft and forge ! " , e ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index 6b029cc . . 503a0d0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 23 , 11 + 23 , 32 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> <nl> + import java . net . URISyntaxException ; <nl> import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> import java . util . concurrent . Callable ; <nl> <nl> public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> + private static final Path forgePath ; <nl> + private static final Path mcPath ; <nl> + private static final List < String > SKIPPACKAGES = Arrays . asList ( <nl> + " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , <nl> + " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , <nl> + " net . minecraftforge . eventbus . " , " it . unimi . dsi . fastutil . " , " net . minecraftforge . api . " , <nl> + " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , <nl> + " net . minecraftforge . fml . common . versioning . " <nl> + ) ; <nl> + static { <nl> + try { <nl> + forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> + mcPath = forgePath . resolveSibling ( " minecraft . jar " ) ; <nl> + } catch ( URISyntaxException e ) { <nl> + throw new RuntimeException ( " Unable to locate myself ! " ) ; <nl> + } <nl> + } <nl> @ Override <nl> public String name ( ) <nl> { <nl> @ @ - 37 , 13 + 58 , 16 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ 0 ] ; <nl> + return new Path [ ] { mcPath , forgePath } ; <nl> } <nl> <nl> @ Override <nl> public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) <nl> { <nl> return ( ) - > { <nl> + super . beforeStart ( launchClassLoader , forgePath ) ; <nl> + launchClassLoader . addTargetPackageFilter ( cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ) ; <nl> + Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> } ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> index 5ad1927 . . 2a337bc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> import java . util . Collection ; <nl> + import java . util . Collections ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 62 , 7 + 63 , 7 @ @ public class ModDiscoverer { <nl> <nl> FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; <nl> BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; <nl> - final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; <nl> + final List < ModFile > mods = modFiles . getOrDefault ( ModFile . Type . MOD , Collections . emptyList ( ) ) ; <nl> for ( Iterator < ModFile > iterator = mods . iterator ( ) ; iterator . hasNext ( ) ; ) <nl> { <nl> ModFile mod = iterator . next ( ) ;

TEST DIFF:
diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FileUtils . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FileUtils . java 
 index 4273163 . . 9353bce 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FileUtils . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FileUtils . java 
 @ @ - 56 , 4 + 56 , 15 @ @ public class FileUtils 
 } 
 return dirPath ; 
 } 
 + 
 + 
 + public static String fileExtension ( final Path path ) { 
 + String fileName = path . getFileName ( ) . toString ( ) ; 
 + int idx = fileName . lastIndexOf ( ' . ' ) ; 
 + if ( idx > - 1 ) { 
 + return fileName . substring ( idx + 1 ) ; 
 + } else { 
 + return " " ; 
 + } 
 + } 
 } 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java 
 index f405f5a . . 5d7b3b9 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . nio . file . Path ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 
 public class MavenDirectoryLocator extends AbstractJarFileLocator { 
 private List < Path > modCoords ; 
 @ @ - 54 , 7 + 55 , 9 @ @ public class MavenDirectoryLocator extends AbstractJarFileLocator { 
 final List < String > mavenRoots = ( List < String > ) arguments . get ( " mavenRoots " ) ; 
 final List < Path > mavenRootPaths = mavenRoots . stream ( ) . map ( n - > FMLPaths . GAMEDIR . get ( ) . resolve ( n ) ) . collect ( Collectors . toList ( ) ) ; 
 final List < String > mods = ( List < String > ) arguments . get ( " mods " ) ; 
 - List < Path > localModCoords = mods . stream ( ) . map ( MavenCoordinateResolver : : get ) . collect ( Collectors . toList ( ) ) ; 
 + final List < String > listedMods = ModListHandler . processModLists ( ( List < String > ) arguments . get ( " modLists " ) , mavenRootPaths ) ; 
 + 
 + List < Path > localModCoords = Stream . concat ( mods . stream ( ) , listedMods . stream ( ) ) . map ( MavenCoordinateResolver : : get ) . collect ( Collectors . toList ( ) ) ; 
 / / find the modCoords path in each supplied maven path , and turn it into a mod file . ( skips not found files ) 
 
 this . modCoords = localModCoords . stream ( ) . map ( mc - > mavenRootPaths . stream ( ) . map ( root - > root . resolve ( mc ) ) . filter ( path - > Files . exists ( path ) ) . findFirst ( ) . orElseThrow ( ( ) - > new IllegalArgumentException ( " Failed to locate requested mod coordinate " + mc ) ) ) . collect ( Collectors . toList ( ) ) ; 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModListHandler . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModListHandler . java 
 new file mode 100644 
 index 0000000 . . 5717c82 
 - - - / dev / null 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModListHandler . java 
 @ @ - 0 , 0 + 1 , 103 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2019 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . loading . moddiscovery ; 
 + 
 + import net . minecraftforge . fml . loading . FMLPaths ; 
 + import net . minecraftforge . fml . loading . FileUtils ; 
 + import net . minecraftforge . fml . loading . MavenCoordinateResolver ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Path ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + import java . util . Objects ; 
 + import java . util . stream . Collectors ; 
 + 
 + import static net . minecraftforge . fml . loading . LogMarkers . CORE ; 
 + 
 + public class ModListHandler { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 + / * * 
 + * Reads the modList paths specified , and searches each maven root for mods matching . Returns a list of mods 
 + * found . 
 + * 
 + * @ param modListPaths Paths to search for mod file lists 
 + * @ param mavenRootPaths Roots to look for mods listed 
 + * @ return list of found mod coordinates 
 + * / 
 + public static List < String > processModLists ( final List < String > modListPaths , final List < Path > mavenRootPaths ) { 
 + final List < String > modCoordinates = modListPaths . stream ( ) . map ( ModListHandler : : transformPathToList ) . 
 + flatMap ( Collection : : stream ) . 
 + collect ( Collectors . toList ( ) ) ; 
 + 
 + List < Pair < Path , String > > localModCoords = modCoordinates . stream ( ) . map ( mc - > Pair . of ( MavenCoordinateResolver . get ( mc ) , mc ) ) . collect ( Collectors . toList ( ) ) ; 
 + final List < Pair < Path , String > > foundCoordinates = localModCoords . stream ( ) . 
 + map ( mc - > mavenRootPaths . stream ( ) . 
 + map ( root - > Pair . of ( root . resolve ( mc . getLeft ( ) ) , mc . getRight ( ) ) ) . 
 + filter ( path - > Files . exists ( path . getLeft ( ) ) ) . 
 + findFirst ( ) . 
 + orElseGet ( ( ) - > { 
 + LOGGER . warn ( CORE , " Failed to find coordinate { } " , mc ) ; 
 + return null ; 
 + } ) ) . 
 + filter ( Objects : : nonNull ) . 
 + collect ( Collectors . toList ( ) ) ; 
 + 
 + final List < String > found = foundCoordinates . stream ( ) . map ( Pair : : getRight ) . collect ( Collectors . toList ( ) ) ; 
 + LOGGER . debug ( CORE , " Found mod coordinates from lists : { } " , found ) ; 
 + return found ; 
 + } 
 + 
 + private static List < String > transformPathToList ( final String path ) { 
 + LOGGER . debug ( CORE , " Reading mod list { } " , path ) ; 
 + Path filePath = FMLPaths . GAMEDIR . get ( ) . resolve ( path ) ; 
 + if ( ! Files . exists ( filePath ) ) { 
 + LOGGER . warn ( CORE , " Failed to find modlist file at { } " , filePath ) ; 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + String extension = FileUtils . fileExtension ( filePath ) ; 
 + if ( Objects . equals ( " list " , extension ) ) { 
 + return readListFile ( filePath ) . stream ( ) . filter ( s - > ! s . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ; 
 + } else { 
 + LOGGER . warn ( CORE , " Failed to read unknown file list type { } for file { } " , extension , filePath ) ; 
 + } 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + / * * 
 + * Simple list file , ending in " . list " with one mod coordinate per line 
 + * @ param filePath path 
 + * @ return list 
 + * / 
 + private static List < String > readListFile ( final Path filePath ) { 
 + try { 
 + return Files . readAllLines ( filePath ) ; 
 + } catch ( IOException e ) { 
 + LOGGER . warn ( CORE , " Failed to read file list { } " , filePath , e ) ; 
 + return Collections . emptyList ( ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index e5fbd8c . . cacd8c9 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 105 , 7 + 105 , 7 @ @ project ( ' : forge ' ) { 
 } 
 dependencies { 
 api ' net . minecraft : client : 1 . 13 : extra ' 
 - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 3 ' / / Pinned until cpw fixes getCommonSupertype 
 + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype 
 api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' 
 api ' net . minecraftforge : eventbus : 0 . 1 + : service ' 
 api ' net . minecraftforge : forgespi : 0 . 1 + ' 
 @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { 
 api ' java3d : vecmath : 1 . 5 . 2 ' 
 } 
 
 + / * 
 configurations { 
 ecj 
 } 
 @ @ - 124 , 6 + 125 , 7 @ @ project ( ' : forge ' ) { 
 dependencies { 
 ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' 
 } 
 + * / 
 
 / * Forge compiles , no longer need eclipse compiler 
 compileJava { 
 @ @ - 177 , 6 + 179 , 7 @ @ project ( ' : forge ' ) { 
 
 include ' net / minecraftforge / ' 
 exclude ' net / minecraftforge / server / terminalconsole / ' 
 + exclude ' net / minecraftforge / api / ' / / exclude API here because it ' s validated in the SPI build 
 exclude ' net / minecraftforge / fml / common / versioning / ComparableVersion . java ' 
 exclude ' net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java ' 
 exclude ' net / minecraftforge / fml / common / versioning / Restriction . java ' 
 diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 index 0167b79 . . 458d4ab 100644 
 - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . client . extensions ; 
 
 import javax . annotation . Nonnull ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 index 72827d3 . . b24858d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 @ @ - 23 , 10 + 23 , 15 @ @ import com . electronwill . nightconfig . core . file . FileConfig ; 
 import net . minecraftforge . fml . language . IModInfo ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 
 + import java . io . IOException ; 
 + import java . net . URI ; 
 import java . net . URISyntaxException ; 
 + import java . nio . file . FileSystems ; 
 import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 + import java . util . Objects ; 
 
 public class DefaultModInfos 
 { 
 @ @ - 35 , 12 + 40 , 17 @ @ public class DefaultModInfos 
 FileConfig forgemod ; 
 try 
 { 
 - minecraftmod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ) ) ; 
 + final URI jarFileURI = DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ; 
 + if ( Objects . equals ( jarFileURI . getScheme ( ) , " jar " ) ) { 
 + / / Initialize the filesystem for the forge jar , because otherwise this barfs ? 
 + FileSystems . newFileSystem ( jarFileURI , new HashMap < > ( ) ) ; 
 + } 
 + minecraftmod = FileConfig . of ( Paths . get ( jarFileURI ) ) ; 
 forgemod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " forgemod . toml " ) . toURI ( ) ) ) ; 
 minecraftmod . load ( ) ; 
 forgemod . load ( ) ; 
 } 
 - catch ( URISyntaxException | NullPointerException e ) 
 + catch ( IOException | URISyntaxException | NullPointerException e ) 
 { 
 throw new RuntimeException ( " Missing toml configs for minecraft and forge ! " , e ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index 6b029cc . . 503a0d0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 23 , 11 + 23 , 32 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 
 + import java . net . URISyntaxException ; 
 import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 import java . util . concurrent . Callable ; 
 
 public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 + private static final Path forgePath ; 
 + private static final Path mcPath ; 
 + private static final List < String > SKIPPACKAGES = Arrays . asList ( 
 + " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , 
 + " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , 
 + " net . minecraftforge . eventbus . " , " it . unimi . dsi . fastutil . " , " net . minecraftforge . api . " , 
 + " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , 
 + " net . minecraftforge . fml . common . versioning . " 
 + ) ; 
 + static { 
 + try { 
 + forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 + mcPath = forgePath . resolveSibling ( " minecraft . jar " ) ; 
 + } catch ( URISyntaxException e ) { 
 + throw new RuntimeException ( " Unable to locate myself ! " ) ; 
 + } 
 + } 
 @ Override 
 public String name ( ) 
 { 
 @ @ - 37 , 13 + 58 , 16 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ 0 ] ; 
 + return new Path [ ] { mcPath , forgePath } ; 
 } 
 
 @ Override 
 public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) 
 { 
 return ( ) - > { 
 + super . beforeStart ( launchClassLoader , forgePath ) ; 
 + launchClassLoader . addTargetPackageFilter ( cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ) ; 
 + Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 } ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 index 5ad1927 . . 2a337bc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 import java . util . Collection ; 
 + import java . util . Collections ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 62 , 7 + 63 , 7 @ @ public class ModDiscoverer { 
 
 FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; 
 BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; 
 - final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; 
 + final List < ModFile > mods = modFiles . getOrDefault ( ModFile . Type . MOD , Collections . emptyList ( ) ) ; 
 for ( Iterator < ModFile > iterator = mods . iterator ( ) ; iterator . hasNext ( ) ; ) 
 { 
 ModFile mod = iterator . next ( ) ;
