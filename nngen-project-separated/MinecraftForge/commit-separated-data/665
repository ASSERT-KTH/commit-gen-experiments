BLEU SCORE: 0.037477767366779206

TEST MSG: Improve the " missing mods " on - screen error message
GENERATED MSG: Config GUIs in the modlist now work .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java <nl> index 14c5328 . . 6417a25 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java <nl> @ @ - 12 , 14 + 12 , 25 @ @ <nl> <nl> package net . minecraftforge . fml . client ; <nl> <nl> + import java . awt . * ; <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + <nl> + import net . minecraft . client . gui . GuiButton ; <nl> import net . minecraft . client . gui . GuiErrorScreen ; <nl> + import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . util . text . TextFormatting ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . MissingModsException ; <nl> import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> + import org . apache . logging . log4j . Level ; <nl> <nl> public class GuiModsMissing extends GuiErrorScreen <nl> { <nl> - <nl> + private File minecraftDir = new File ( Loader . instance ( ) . getConfigDir ( ) . getParent ( ) ) ; <nl> + private File clientLog = new File ( minecraftDir , " logs / fml - client - latest . log " ) ; <nl> private MissingModsException modsMissing ; <nl> <nl> public GuiModsMissing ( MissingModsException modsMissing ) <nl> @ @ - 33 , 15 + 44 , 49 @ @ public class GuiModsMissing extends GuiErrorScreen <nl> { <nl> super . initGui ( ) ; <nl> this . buttonList . clear ( ) ; <nl> + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . open . mods . folder " ) ) ) ; <nl> + String openFileText = I18n . format ( " fml . button . open . file " , clientLog . getName ( ) ) ; <nl> + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , openFileText ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void actionPerformed ( GuiButton button ) throws IOException <nl> + { <nl> + if ( button . id = = 1 ) <nl> + { <nl> + try <nl> + { <nl> + File modsDir = new File ( minecraftDir , " mods " ) ; <nl> + Desktop . getDesktop ( ) . open ( modsDir ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Problem opening mods folder " ) ; <nl> + } <nl> + } <nl> + else if ( button . id = = 2 ) <nl> + { <nl> + try <nl> + { <nl> + Desktop . getDesktop ( ) . open ( clientLog ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Problem opening log file " + clientLog ) ; <nl> + } <nl> + } <nl> } <nl> + <nl> @ Override <nl> public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> { <nl> this . drawDefaultBackground ( ) ; <nl> int offset = Math . max ( 85 - modsMissing . missingMods . size ( ) * 10 , 10 ) ; <nl> - this . drawCenteredString ( this . fontRendererObj , " Forge Mod Loader has found a problem with your minecraft installation " , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + String modMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies " , TextFormatting . BOLD + modsMissing . getModName ( ) + TextFormatting . RESET ) ; <nl> + this . drawCenteredString ( this . fontRendererObj , modMissingDependenciesText , this . width / 2 , offset , 0xFFFFFF ) ; <nl> offset + = 10 ; <nl> - this . drawCenteredString ( this . fontRendererObj , " The mods and versions listed below could not be found " , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + String fixMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies . fix " , modsMissing . getModName ( ) ) ; <nl> + this . drawCenteredString ( this . fontRendererObj , fixMissingDependenciesText , this . width / 2 , offset , 0xFFFFFF ) ; <nl> offset + = 5 ; <nl> for ( ArtifactVersion v : modsMissing . missingMods ) <nl> { <nl> @ @ - 49 , 15 + 94 , 22 @ @ public class GuiModsMissing extends GuiErrorScreen <nl> if ( v instanceof DefaultArtifactVersion ) <nl> { <nl> DefaultArtifactVersion dav = ( DefaultArtifactVersion ) v ; <nl> - if ( dav . getRange ( ) ! = null & & dav . getRange ( ) . isUnboundedAbove ( ) ) <nl> + if ( dav . getRange ( ) ! = null ) <nl> { <nl> - this . drawCenteredString ( this . fontRendererObj , String . format ( " % s : minimum version required is % s " , v . getLabel ( ) , dav . getRange ( ) . getLowerBoundString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> + String message = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s " , v . getLabel ( ) , dav . getRange ( ) . toStringFriendly ( ) ) ; <nl> + this . drawCenteredString ( this . fontRendererObj , message , this . width / 2 , offset , 0xEEEEEE ) ; <nl> continue ; <nl> } <nl> } <nl> this . drawCenteredString ( this . fontRendererObj , String . format ( " % s : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> } <nl> offset + = 20 ; <nl> - this . drawCenteredString ( this . fontRendererObj , " The file ' logs / fml - client - latest . log ' contains more information " , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + String seeLogText = I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , clientLog . getName ( ) ) ; <nl> + this . drawCenteredString ( this . fontRendererObj , seeLogText , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + <nl> + for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) <nl> + { <nl> + this . buttonList . get ( i ) . drawButton ( this . mc , mouseX , mouseY ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / MissingModsException . java b / src / main / java / net / minecraftforge / fml / common / MissingModsException . java <nl> index d98d651 . . 7e593d4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / MissingModsException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / MissingModsException . java <nl> @ @ - 20 , 11 + 20 , 18 @ @ public class MissingModsException extends EnhancedRuntimeException <nl> { <nl> private static final long serialVersionUID = 1L ; <nl> public final Set < ArtifactVersion > missingMods ; <nl> + private final String modName ; <nl> <nl> public MissingModsException ( Set < ArtifactVersion > missingMods , String id , String name ) <nl> { <nl> super ( String . format ( " Mod % s ( % s ) requires % s " , id , name , missingMods ) ) ; <nl> this . missingMods = missingMods ; <nl> + this . modName = name ; <nl> + } <nl> + <nl> + public String getModName ( ) <nl> + { <nl> + return modName ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> index e3a8511 . . b77c312 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> @ @ - 31 , 6 + 31 , 8 @ @ package net . minecraftforge . fml . common . versioning ; <nl> * under the License . <nl> * / <nl> <nl> + import net . minecraft . client . resources . I18n ; <nl> + <nl> / * * <nl> * Describes a restriction in versioning . <nl> * <nl> @ @ - 209 , 4 + 211 , 45 @ @ public class Restriction <nl> <nl> return buf . toString ( ) ; <nl> } <nl> + <nl> + public String toStringFriendly ( ) <nl> + { <nl> + if ( getLowerBound ( ) = = null & & getUpperBound ( ) = = null ) <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . any " ) ; <nl> + } <nl> + else if ( getLowerBound ( ) ! = null & & getUpperBound ( ) ! = null ) <nl> + { <nl> + if ( getLowerBound ( ) . equals ( getUpperBound ( ) ) ) <nl> + { <nl> + return getLowerBound ( ) . toString ( ) ; <nl> + } <nl> + else <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . bounded " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + } <nl> + } <nl> + else if ( getLowerBound ( ) ! = null ) <nl> + { <nl> + if ( isLowerBoundInclusive ( ) ) <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . lower . inclusive " , getLowerBound ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . lower . exclusive " , getLowerBound ( ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + if ( isUpperBoundInclusive ( ) ) <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . upper . inclusive " , getUpperBound ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . upper . exclusive " , getUpperBound ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java <nl> index a249d74 . . d95d53f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java <nl> @ @ - 496 , 6 + 496 , 23 @ @ public class VersionRange <nl> } <nl> } <nl> <nl> + public String toStringFriendly ( ) <nl> + { <nl> + if ( recommendedVersion ! = null ) <nl> + { <nl> + return recommendedVersion . getVersionString ( ) ; <nl> + } <nl> + else <nl> + { <nl> + List < String > friendlyRestrictions = new ArrayList < String > ( restrictions . size ( ) ) ; <nl> + for ( Restriction restriction : restrictions ) <nl> + { <nl> + friendlyRestrictions . add ( restriction . toStringFriendly ( ) ) ; <nl> + } <nl> + return Joiner . on ( " , " ) . join ( friendlyRestrictions ) ; <nl> + } <nl> + } <nl> + <nl> public ArtifactVersion matchVersion ( List < ArtifactVersion > versions ) <nl> { <nl> / / TODO : could be more efficient by sorting the list and then moving along the restrictions in order ? <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index cbdf668 . . 93bc982 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 165 , 6 + 165 , 17 @ @ fml . messages . javaversion = Your Java version is Java % s ( version string % s ) <nl> fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play <nl> fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods <nl> fml . messages . countbadandgood = % s of % s mods have this problem <nl> + fml . messages . mod . missing . dependencies = % s is missing mods it depends on . <nl> + fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . <nl> + fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . <nl> + fml . messages . version . restriction . any = any <nl> + fml . messages . version . restriction . lower . inclusive = % s or above <nl> + fml . messages . version . restriction . lower . exclusive = above % s <nl> + fml . messages . version . restriction . upper . inclusive = % s or below <nl> + fml . messages . version . restriction . upper . exclusive = below % s <nl> + fml . messages . version . restriction . bounded = between % s and % s <nl> <nl> fml . button . visitjavadownloads = Oracle Java SE Downloads <nl> - fml . button . continue = Continue <nl> \ No newline at end of file <nl> + fml . button . continue = Continue <nl> + fml . button . open . mods . folder = Open Mods Folder <nl> + fml . button . open . file = Open % s <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> index 92b5838 . . 40366bc 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 36 , 7 + 36 , 10 @ @ import net . minecraft . network . INetHandler ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . server . MinecraftServer ; <nl> import org . apache . logging . log4j . Level ; <nl> + import com . google . common . base . Strings ; <nl> import com . google . common . base . Throwables ; <nl> + import com . google . common . collect . BiMap ; <nl> + import com . google . common . collect . HashBiMap ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Maps ; <nl> @ @ - 119 , 6 + 122 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private Map < String , IResourcePack > resourcePackMap ; <nl> <nl> + private BiMap < ModContainer , IModGuiFactory > guiFactories ; <nl> + <nl> / * * <nl> * Called to start the whole game off <nl> * <nl> @ @ - 239 , 6 + 244 , 26 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> / / Reload resources <nl> / / client . func _ 110436 _ a ( ) ; <nl> RenderingRegistry . instance ( ) . loadEntityRenderers ( ( Map < Class < ? extends Entity > , Render > ) RenderManager . field _ 78727 _ a . field _ 78729 _ o ) ; <nl> + guiFactories = HashBiMap . create ( ) ; <nl> + for ( ModContainer mc : Loader . instance ( ) . getActiveModList ( ) ) <nl> + { <nl> + String className = mc . getGuiClassName ( ) ; <nl> + if ( Strings . isNullOrEmpty ( className ) ) <nl> + { <nl> + continue ; <nl> + } <nl> + try <nl> + { <nl> + Class < ? > clazz = Class . forName ( className , true , Loader . instance ( ) . getModClassLoader ( ) ) ; <nl> + Class < ? extends IModGuiFactory > guiClassFactory = clazz . asSubclass ( IModGuiFactory . class ) ; <nl> + IModGuiFactory guiFactory = guiClassFactory . newInstance ( ) ; <nl> + guiFactory . initialize ( client ) ; <nl> + guiFactories . put ( mc , guiFactory ) ; <nl> + } catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " A critical error occurred instantiating the gui factory for mod % s " , mc . getModId ( ) ) ; <nl> + } <nl> + } <nl> loading = false ; <nl> } <nl> <nl> @ @ - 514 , 4 + 539 , 9 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> showGuiScreen ( new GuiIngameModOptions ( guiIngameMenu ) ) ; <nl> } <nl> + <nl> + public IModGuiFactory getGuiFactoryFor ( ModContainer selectedMod ) <nl> + { <nl> + return guiFactories . get ( selectedMod ) ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLConfigGuiFactory . java b / fml / src / main / java / cpw / mods / fml / client / FMLConfigGuiFactory . java <nl> new file mode 100644 <nl> index 0000000 . . aff7969 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / FMLConfigGuiFactory . java <nl> @ @ - 0 , 0 + 1 , 70 @ @ <nl> + package cpw . mods . fml . client ; <nl> + <nl> + import java . util . Set ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . gui . GuiButton ; <nl> + import net . minecraft . client . gui . GuiScreen ; <nl> + import net . minecraft . client . resources . I18n ; <nl> + <nl> + public class FMLConfigGuiFactory implements IModGuiFactory { <nl> + public static class FMLConfigGuiScreen extends GuiScreen { <nl> + private GuiScreen parent ; <nl> + <nl> + public FMLConfigGuiScreen ( GuiScreen parent ) <nl> + { <nl> + this . parent = parent ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + @ Override <nl> + public void func _ 73866 _ w _ ( ) <nl> + { <nl> + this . field _ 146292 _ n . add ( new GuiButton ( 1 , this . field _ 146294 _ l / 2 - 75 , this . field _ 146295 _ m - 38 , I18n . func _ 135052 _ a ( " gui . done " ) ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void func _ 146284 _ a ( GuiButton p _ 73875 _ 1 _ ) <nl> + { <nl> + if ( p _ 73875 _ 1 _ . field _ 146124 _ l & & p _ 73875 _ 1 _ . field _ 146127 _ k = = 1 ) <nl> + { <nl> + FMLClientHandler . instance ( ) . showGuiScreen ( parent ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void func _ 73863 _ a ( int p _ 73863 _ 1 _ , int p _ 73863 _ 2 _ , float p _ 73863 _ 3 _ ) <nl> + { <nl> + this . func _ 146276 _ q _ ( ) ; <nl> + this . func _ 73732 _ a ( this . field _ 146289 _ q , " Forge Mod Loader test config screen " , this . field _ 146294 _ l / 2 , 40 , 0xFFFFFF ) ; <nl> + super . func _ 73863 _ a ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ , p _ 73863 _ 3 _ ) ; <nl> + } <nl> + <nl> + } <nl> + private Minecraft minecraft ; <nl> + @ Override <nl> + public void initialize ( Minecraft minecraftInstance ) <nl> + { <nl> + this . minecraft = minecraftInstance ; <nl> + } <nl> + <nl> + @ Override <nl> + public Class < ? extends GuiScreen > mainConfigGuiClass ( ) <nl> + { <nl> + return FMLConfigGuiScreen . class ; <nl> + } <nl> + <nl> + @ Override <nl> + public Set < RuntimeOptionCategoryElement > runtimeGuiCategories ( ) <nl> + { <nl> + / / TODO Auto - generated method stub <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public RuntimeOptionGuiHandler getHandlerFor ( RuntimeOptionCategoryElement element ) <nl> + { <nl> + / / TODO Auto - generated method stub <nl> + return null ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / client / GuiModList . java b / fml / src / main / java / cpw / mods / fml / client / GuiModList . java <nl> index 9a7958f . . b83ca71 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / GuiModList . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / GuiModList . java <nl> @ @ - 33 , 10 + 33 , 12 @ @ import net . minecraft . client . resources . I18n ; <nl> import net . minecraft . client . resources . IResourcePack ; <nl> import net . minecraft . util . ResourceLocation ; <nl> <nl> + import org . apache . logging . log4j . Level ; <nl> import org . lwjgl . opengl . GL11 ; <nl> <nl> import com . google . common . base . Strings ; <nl> <nl> + import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> import cpw . mods . fml . common . ModContainer . Disableable ; <nl> @ @ - 93 , 8 + 95 , 8 @ @ public class GuiModList extends GuiScreen <nl> } <nl> listWidth = Math . min ( listWidth , 150 ) ; <nl> this . field _ 146292 _ n . add ( new GuiButton ( 6 , this . field _ 146294 _ l / 2 - 75 , this . field _ 146295 _ m - 38 , I18n . func _ 135052 _ a ( " gui . done " ) ) ) ; <nl> - configModButton = new GuiButton ( 7 , 10 , this . field _ 146295 _ m - 60 , this . listWidth , 20 , " Config " ) ; <nl> - disableModButton = new GuiButton ( 8 , 10 , this . field _ 146295 _ m - 38 , this . listWidth , 20 , " Disable " ) ; <nl> + configModButton = new GuiButton ( 20 , 10 , this . field _ 146295 _ m - 60 , this . listWidth , 20 , " Config " ) ; <nl> + disableModButton = new GuiButton ( 21 , 10 , this . field _ 146295 _ m - 38 , this . listWidth , 20 , " Disable " ) ; <nl> this . field _ 146292 _ n . add ( configModButton ) ; <nl> this . field _ 146292 _ n . add ( disableModButton ) ; <nl> this . modList = new GuiSlotModList ( this , mods , listWidth ) ; <nl> @ @ - 110 , 6 + 112 , 18 @ @ public class GuiModList extends GuiScreen <nl> case 6 : <nl> this . field _ 146297 _ k . func _ 147108 _ a ( this . mainMenu ) ; <nl> return ; <nl> + case 20 : <nl> + try <nl> + { <nl> + IModGuiFactory guiFactory = FMLClientHandler . instance ( ) . getGuiFactoryFor ( selectedMod ) ; <nl> + GuiScreen newScreen = guiFactory . mainConfigGuiClass ( ) . getConstructor ( GuiScreen . class ) . newInstance ( this ) ; <nl> + this . field _ 146297 _ k . func _ 147108 _ a ( newScreen ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " There was a critical issue trying to build the config GUI for % s " , selectedMod . getModId ( ) ) ; <nl> + } <nl> + return ; <nl> } <nl> } <nl> super . func _ 146284 _ a ( button ) ; <nl> @ @ - 222 , 6 + 236 , 17 @ @ public class GuiModList extends GuiScreen <nl> disableModButton . field _ 146125 _ m = true ; <nl> disableModButton . field _ 146124 _ l = false ; <nl> } <nl> + IModGuiFactory guiFactory = FMLClientHandler . instance ( ) . getGuiFactoryFor ( selectedMod ) ; <nl> + if ( guiFactory = = null | | guiFactory . mainConfigGuiClass ( ) = = null ) <nl> + { <nl> + configModButton . field _ 146125 _ m = true ; <nl> + configModButton . field _ 146124 _ l = false ; <nl> + } <nl> + else <nl> + { <nl> + configModButton . field _ 146125 _ m = true ; <nl> + configModButton . field _ 146124 _ l = true ; <nl> + } <nl> } else { <nl> offset = ( this . listWidth + this . field _ 146294 _ l ) / 2 ; <nl> this . func _ 73732 _ a ( this . field _ 146289 _ q , selectedMod . getName ( ) , offset , 35 , 0xFFFFFF ) ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / client / IModGuiFactory . java b / fml / src / main / java / cpw / mods / fml / client / IModGuiFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 0e7fa18 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / IModGuiFactory . java <nl> @ @ - 0 , 0 + 1 , 127 @ @ <nl> + package cpw . mods . fml . client ; <nl> + <nl> + import java . util . Set ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . gui . GuiScreen ; <nl> + <nl> + public interface IModGuiFactory { <nl> + / * * <nl> + * Called when instantiated to initialize with the active minecraft instance . <nl> + * <nl> + * @ param minecraftInstance the instance <nl> + * / <nl> + public void initialize ( Minecraft minecraftInstance ) ; <nl> + / * * <nl> + * Return the name of a class extending { @ link GuiScreen } . This class will <nl> + * be instantiated when the " config " button is pressed in the mod list . It will <nl> + * have a single argument constructor - the " parent " screen , the same as all <nl> + * Minecraft GUIs . The expected behaviour is that this screen will replace the <nl> + * " mod list " screen completely , and will return to the mod list screen through <nl> + * the parent link , once the appropriate action is taken from the config screen . <nl> + * <nl> + * A null from this method indicates that the mod does not provide a " config " <nl> + * button GUI screen , and the config button will be hidden / disabled . <nl> + * <nl> + * This config GUI is anticipated to provide configuration to the mod in a friendly <nl> + * visual way . It should not be abused to set internals such as IDs ( they ' re gonna <nl> + * keep disappearing anyway ) , but rather , interesting behaviours . This config GUI <nl> + * is never run when a server game is running , and should be used to configure <nl> + * desired behaviours that affect server state . Costs , mod game modes , stuff like that <nl> + * can be changed here . <nl> + * <nl> + * @ return A class that will be instantiated on clicks on the config button <nl> + * or null if no GUI is desired . <nl> + * / <nl> + public Class < ? extends GuiScreen > mainConfigGuiClass ( ) ; <nl> + <nl> + <nl> + / * * <nl> + * Return a list of the " runtime " categories this mod wishes to populate with <nl> + * GUI elements . <nl> + * <nl> + * Runtime categories are created on demand and organized in a ' lite ' tree format . <nl> + * The parent represents the parent node in the tree . There is one special parent <nl> + * ' Help ' that will always list first , and is generally meant to provide Help type <nl> + * content for mods . The remaining parents will sort alphabetically , though <nl> + * this may change if there is a lot of alphabetic abuse . " AAA " is probably never a valid <nl> + * category parent . <nl> + * <nl> + * Runtime configuration itself falls into two flavours : in - game help , which is <nl> + * generally non interactive except for the text it wishes to show , and client - only <nl> + * affecting behaviours . This would include things like toggling minimaps , or cheat modes <nl> + * or anything NOT affecting the behaviour of the server . Please don ' t abuse this to <nl> + * change the state of the server in any way , this is intended to behave identically <nl> + * when the server is local or remote . <nl> + * <nl> + * @ return the set of options this mod wishes to have available , or empty if none <nl> + * / <nl> + public Set < RuntimeOptionCategoryElement > runtimeGuiCategories ( ) ; <nl> + <nl> + / * * <nl> + * Return an instance of a { @ link RuntimeOptionGuiHandler } that handles painting the <nl> + * right hand side option screen for the specified { @ link RuntimeOptionCategoryElement } . <nl> + * <nl> + * @ param element The element we wish to paint for <nl> + * @ return The Handler for painting it <nl> + * / <nl> + public RuntimeOptionGuiHandler getHandlerFor ( RuntimeOptionCategoryElement element ) ; <nl> + <nl> + / * * <nl> + * Represents an option category and entry in the runtime gui options list . <nl> + * <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public static class RuntimeOptionCategoryElement { <nl> + public final String parent ; <nl> + public final String child ; <nl> + <nl> + public RuntimeOptionCategoryElement ( String parent , String child ) <nl> + { <nl> + this . parent = parent ; <nl> + this . child = child ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Responsible for painting the mod specific section of runtime options GUI for a particular category <nl> + * <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public interface RuntimeOptionGuiHandler { <nl> + / * * <nl> + * Called to add widgets to the screen , such as buttons . <nl> + * GUI identifier numbers should start at 100 and increase . <nl> + * The callback will be through { @ link # actionCallback ( int ) } <nl> + * <nl> + * @ param x X <nl> + * @ param y Y <nl> + * @ param w width <nl> + * @ param h height <nl> + * / <nl> + public void addWidgets ( int x , int y , int w , int h ) ; <nl> + <nl> + / * * <nl> + * Called to paint the rectangle specified . <nl> + * @ param x X <nl> + * @ param y Y <nl> + * @ param w width <nl> + * @ param h height <nl> + * / <nl> + public void paint ( int x , int y , int w , int h ) ; <nl> + <nl> + / * * <nl> + * Called if a widget with id > = 100 is fired . <nl> + * <nl> + * @ param actionId the actionId of the firing widget <nl> + * / <nl> + public void actionCallback ( int actionId ) ; <nl> + <nl> + / * * <nl> + * Called when this handler is about to go away ( probably replaced by another one , or closing the <nl> + * option screen ) <nl> + * / <nl> + public void close ( ) ; <nl> + } <nl> + } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / DummyModContainer . java b / fml / src / main / java / cpw / mods / fml / common / DummyModContainer . java <nl> index f31a7a1 . . e603187 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / DummyModContainer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / DummyModContainer . java <nl> @ @ - 186 , 4 + 186 , 10 @ @ public class DummyModContainer implements ModContainer <nl> { <nl> return Disableable . NEVER ; <nl> } <nl> + <nl> + @ Override <nl> + public String getGuiClassName ( ) <nl> + { <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLContainer . java b / fml / src / main / java / cpw / mods / fml / common / FMLContainer . java <nl> index a55cbe8 . . f406442 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLContainer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLContainer . java <nl> @ @ - 215 , 4 + 215 , 10 @ @ public class FMLContainer extends DummyModContainer implements WorldAccessContai <nl> { <nl> return getSource ( ) . isDirectory ( ) ? FMLFolderResourcePack . class : FMLFileResourcePack . class ; <nl> } <nl> + <nl> + @ Override <nl> + public String getGuiClassName ( ) <nl> + { <nl> + return " cpw . mods . fml . client . FMLConfigGuiFactory " ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java <nl> index 3729f43 . . 50b24ae 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java <nl> @ @ - 616 , 4 + 616 , 10 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> return disableability ; <nl> } <nl> + <nl> + @ Override <nl> + public String getGuiClassName ( ) <nl> + { <nl> + return ( String ) descriptor . get ( " guiFactory " ) ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / InjectedModContainer . java b / fml / src / main / java / cpw / mods / fml / common / InjectedModContainer . java <nl> index b02e254 . . f4acf41 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / InjectedModContainer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / InjectedModContainer . java <nl> @ @ - 174 , 4 + 174 , 10 @ @ public class InjectedModContainer implements ModContainer <nl> { <nl> return wrappedContainer . canBeDisabled ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String getGuiClassName ( ) <nl> + { <nl> + return wrappedContainer . getGuiClassName ( ) ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / Mod . java b / fml / src / main / java / cpw / mods / fml / common / Mod . java <nl> index 9d9ebf1 . . cab2511 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / Mod . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / Mod . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ import java . lang . annotation . Retention ; <nl> import java . lang . annotation . RetentionPolicy ; <nl> import java . lang . annotation . Target ; <nl> <nl> + import cpw . mods . fml . client . IModGuiFactory ; <nl> import cpw . mods . fml . common . event . FMLEvent ; <nl> import cpw . mods . fml . common . event . FMLFingerprintViolationEvent ; <nl> import cpw . mods . fml . common . event . FMLInitializationEvent ; <nl> @ @ - 149 , 10 + 150 , 20 @ @ public @ interface Mod <nl> * ( minimap mods , graphical tweak mods ) then you can set true here and receive the FMLDeactivationEvent to perform deactivation <nl> * tasks . <nl> * This does not affect administrative disabling through the system property fml . modStates or the config file fmlModState . properties . <nl> + * The mod will only be deactivated outside of a running game world - FML will never allow mod deactivation whilst a game server <nl> + * is running . <nl> * <nl> - * @ return if I can be deactivated whilst the game is running . <nl> + * @ return if this mod can be deactivated whilst the game is open . <nl> * / <nl> boolean canBeDeactivated ( ) default false ; <nl> + <nl> + / * * <nl> + * An optional GUI factory for this mod . This is the name of a class implementing { @ link IModGuiFactory } that will be instantiated <nl> + * on the client side , and will have certain configuration / options guis requested from it . <nl> + * <nl> + * @ return The name of a class implementing { @ link IModGuiFactory } <nl> + * / <nl> + String guiFactory ( ) default " " ; <nl> / * * <nl> * A list of custom properties for this mod . Completely up to the mod author if / when they <nl> * want to put anything in here . <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / ModContainer . java b / fml / src / main / java / cpw / mods / fml / common / ModContainer . java <nl> index 47cc223 . . 1641788 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / ModContainer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / ModContainer . java <nl> @ @ - 143 , 4 + 143 , 6 @ @ public interface ModContainer <nl> Map < String , String > getSharedModDescriptor ( ) ; <nl> <nl> Disableable canBeDisabled ( ) ; <nl> + <nl> + String getGuiClassName ( ) ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java 
 index 14c5328 . . 6417a25 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java 
 @ @ - 12 , 14 + 12 , 25 @ @ 
 
 package net . minecraftforge . fml . client ; 
 
 + import java . awt . * ; 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + 
 + import net . minecraft . client . gui . GuiButton ; 
 import net . minecraft . client . gui . GuiErrorScreen ; 
 + import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . util . text . TextFormatting ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . MissingModsException ; 
 import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 + import org . apache . logging . log4j . Level ; 
 
 public class GuiModsMissing extends GuiErrorScreen 
 { 
 - 
 + private File minecraftDir = new File ( Loader . instance ( ) . getConfigDir ( ) . getParent ( ) ) ; 
 + private File clientLog = new File ( minecraftDir , " logs / fml - client - latest . log " ) ; 
 private MissingModsException modsMissing ; 
 
 public GuiModsMissing ( MissingModsException modsMissing ) 
 @ @ - 33 , 15 + 44 , 49 @ @ public class GuiModsMissing extends GuiErrorScreen 
 { 
 super . initGui ( ) ; 
 this . buttonList . clear ( ) ; 
 + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . open . mods . folder " ) ) ) ; 
 + String openFileText = I18n . format ( " fml . button . open . file " , clientLog . getName ( ) ) ; 
 + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , openFileText ) ) ; 
 + } 
 + 
 + @ Override 
 + protected void actionPerformed ( GuiButton button ) throws IOException 
 + { 
 + if ( button . id = = 1 ) 
 + { 
 + try 
 + { 
 + File modsDir = new File ( minecraftDir , " mods " ) ; 
 + Desktop . getDesktop ( ) . open ( modsDir ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Problem opening mods folder " ) ; 
 + } 
 + } 
 + else if ( button . id = = 2 ) 
 + { 
 + try 
 + { 
 + Desktop . getDesktop ( ) . open ( clientLog ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Problem opening log file " + clientLog ) ; 
 + } 
 + } 
 } 
 + 
 @ Override 
 public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 { 
 this . drawDefaultBackground ( ) ; 
 int offset = Math . max ( 85 - modsMissing . missingMods . size ( ) * 10 , 10 ) ; 
 - this . drawCenteredString ( this . fontRendererObj , " Forge Mod Loader has found a problem with your minecraft installation " , this . width / 2 , offset , 0xFFFFFF ) ; 
 + String modMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies " , TextFormatting . BOLD + modsMissing . getModName ( ) + TextFormatting . RESET ) ; 
 + this . drawCenteredString ( this . fontRendererObj , modMissingDependenciesText , this . width / 2 , offset , 0xFFFFFF ) ; 
 offset + = 10 ; 
 - this . drawCenteredString ( this . fontRendererObj , " The mods and versions listed below could not be found " , this . width / 2 , offset , 0xFFFFFF ) ; 
 + String fixMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies . fix " , modsMissing . getModName ( ) ) ; 
 + this . drawCenteredString ( this . fontRendererObj , fixMissingDependenciesText , this . width / 2 , offset , 0xFFFFFF ) ; 
 offset + = 5 ; 
 for ( ArtifactVersion v : modsMissing . missingMods ) 
 { 
 @ @ - 49 , 15 + 94 , 22 @ @ public class GuiModsMissing extends GuiErrorScreen 
 if ( v instanceof DefaultArtifactVersion ) 
 { 
 DefaultArtifactVersion dav = ( DefaultArtifactVersion ) v ; 
 - if ( dav . getRange ( ) ! = null & & dav . getRange ( ) . isUnboundedAbove ( ) ) 
 + if ( dav . getRange ( ) ! = null ) 
 { 
 - this . drawCenteredString ( this . fontRendererObj , String . format ( " % s : minimum version required is % s " , v . getLabel ( ) , dav . getRange ( ) . getLowerBoundString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 + String message = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s " , v . getLabel ( ) , dav . getRange ( ) . toStringFriendly ( ) ) ; 
 + this . drawCenteredString ( this . fontRendererObj , message , this . width / 2 , offset , 0xEEEEEE ) ; 
 continue ; 
 } 
 } 
 this . drawCenteredString ( this . fontRendererObj , String . format ( " % s : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 } 
 offset + = 20 ; 
 - this . drawCenteredString ( this . fontRendererObj , " The file ' logs / fml - client - latest . log ' contains more information " , this . width / 2 , offset , 0xFFFFFF ) ; 
 + String seeLogText = I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , clientLog . getName ( ) ) ; 
 + this . drawCenteredString ( this . fontRendererObj , seeLogText , this . width / 2 , offset , 0xFFFFFF ) ; 
 + 
 + for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) 
 + { 
 + this . buttonList . get ( i ) . drawButton ( this . mc , mouseX , mouseY ) ; 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / MissingModsException . java b / src / main / java / net / minecraftforge / fml / common / MissingModsException . java 
 index d98d651 . . 7e593d4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / MissingModsException . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / MissingModsException . java 
 @ @ - 20 , 11 + 20 , 18 @ @ public class MissingModsException extends EnhancedRuntimeException 
 { 
 private static final long serialVersionUID = 1L ; 
 public final Set < ArtifactVersion > missingMods ; 
 + private final String modName ; 
 
 public MissingModsException ( Set < ArtifactVersion > missingMods , String id , String name ) 
 { 
 super ( String . format ( " Mod % s ( % s ) requires % s " , id , name , missingMods ) ) ; 
 this . missingMods = missingMods ; 
 + this . modName = name ; 
 + } 
 + 
 + public String getModName ( ) 
 + { 
 + return modName ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 index e3a8511 . . b77c312 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 @ @ - 31 , 6 + 31 , 8 @ @ package net . minecraftforge . fml . common . versioning ; 
 * under the License . 
 * / 
 
 + import net . minecraft . client . resources . I18n ; 
 + 
 / * * 
 * Describes a restriction in versioning . 
 * 
 @ @ - 209 , 4 + 211 , 45 @ @ public class Restriction 
 
 return buf . toString ( ) ; 
 } 
 + 
 + public String toStringFriendly ( ) 
 + { 
 + if ( getLowerBound ( ) = = null & & getUpperBound ( ) = = null ) 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . any " ) ; 
 + } 
 + else if ( getLowerBound ( ) ! = null & & getUpperBound ( ) ! = null ) 
 + { 
 + if ( getLowerBound ( ) . equals ( getUpperBound ( ) ) ) 
 + { 
 + return getLowerBound ( ) . toString ( ) ; 
 + } 
 + else 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . bounded " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + } 
 + } 
 + else if ( getLowerBound ( ) ! = null ) 
 + { 
 + if ( isLowerBoundInclusive ( ) ) 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . lower . inclusive " , getLowerBound ( ) ) ; 
 + } 
 + else 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . lower . exclusive " , getLowerBound ( ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + if ( isUpperBoundInclusive ( ) ) 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . upper . inclusive " , getUpperBound ( ) ) ; 
 + } 
 + else 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . upper . exclusive " , getUpperBound ( ) ) ; 
 + } 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java 
 index a249d74 . . d95d53f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java 
 @ @ - 496 , 6 + 496 , 23 @ @ public class VersionRange 
 } 
 } 
 
 + public String toStringFriendly ( ) 
 + { 
 + if ( recommendedVersion ! = null ) 
 + { 
 + return recommendedVersion . getVersionString ( ) ; 
 + } 
 + else 
 + { 
 + List < String > friendlyRestrictions = new ArrayList < String > ( restrictions . size ( ) ) ; 
 + for ( Restriction restriction : restrictions ) 
 + { 
 + friendlyRestrictions . add ( restriction . toStringFriendly ( ) ) ; 
 + } 
 + return Joiner . on ( " , " ) . join ( friendlyRestrictions ) ; 
 + } 
 + } 
 + 
 public ArtifactVersion matchVersion ( List < ArtifactVersion > versions ) 
 { 
 / / TODO : could be more efficient by sorting the list and then moving along the restrictions in order ? 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index cbdf668 . . 93bc982 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 165 , 6 + 165 , 17 @ @ fml . messages . javaversion = Your Java version is Java % s ( version string % s ) 
 fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play 
 fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods 
 fml . messages . countbadandgood = % s of % s mods have this problem 
 + fml . messages . mod . missing . dependencies = % s is missing mods it depends on . 
 + fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . 
 + fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . 
 + fml . messages . version . restriction . any = any 
 + fml . messages . version . restriction . lower . inclusive = % s or above 
 + fml . messages . version . restriction . lower . exclusive = above % s 
 + fml . messages . version . restriction . upper . inclusive = % s or below 
 + fml . messages . version . restriction . upper . exclusive = below % s 
 + fml . messages . version . restriction . bounded = between % s and % s 
 
 fml . button . visitjavadownloads = Oracle Java SE Downloads 
 - fml . button . continue = Continue 
 \ No newline at end of file 
 + fml . button . continue = Continue 
 + fml . button . open . mods . folder = Open Mods Folder 
 + fml . button . open . file = Open % s 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 index 92b5838 . . 40366bc 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 36 , 7 + 36 , 10 @ @ import net . minecraft . network . INetHandler ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . server . MinecraftServer ; 
 import org . apache . logging . log4j . Level ; 
 + import com . google . common . base . Strings ; 
 import com . google . common . base . Throwables ; 
 + import com . google . common . collect . BiMap ; 
 + import com . google . common . collect . HashBiMap ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Maps ; 
 @ @ - 119 , 6 + 122 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private Map < String , IResourcePack > resourcePackMap ; 
 
 + private BiMap < ModContainer , IModGuiFactory > guiFactories ; 
 + 
 / * * 
 * Called to start the whole game off 
 * 
 @ @ - 239 , 6 + 244 , 26 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 / / Reload resources 
 / / client . func _ 110436 _ a ( ) ; 
 RenderingRegistry . instance ( ) . loadEntityRenderers ( ( Map < Class < ? extends Entity > , Render > ) RenderManager . field _ 78727 _ a . field _ 78729 _ o ) ; 
 + guiFactories = HashBiMap . create ( ) ; 
 + for ( ModContainer mc : Loader . instance ( ) . getActiveModList ( ) ) 
 + { 
 + String className = mc . getGuiClassName ( ) ; 
 + if ( Strings . isNullOrEmpty ( className ) ) 
 + { 
 + continue ; 
 + } 
 + try 
 + { 
 + Class < ? > clazz = Class . forName ( className , true , Loader . instance ( ) . getModClassLoader ( ) ) ; 
 + Class < ? extends IModGuiFactory > guiClassFactory = clazz . asSubclass ( IModGuiFactory . class ) ; 
 + IModGuiFactory guiFactory = guiClassFactory . newInstance ( ) ; 
 + guiFactory . initialize ( client ) ; 
 + guiFactories . put ( mc , guiFactory ) ; 
 + } catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " A critical error occurred instantiating the gui factory for mod % s " , mc . getModId ( ) ) ; 
 + } 
 + } 
 loading = false ; 
 } 
 
 @ @ - 514 , 4 + 539 , 9 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 showGuiScreen ( new GuiIngameModOptions ( guiIngameMenu ) ) ; 
 } 
 + 
 + public IModGuiFactory getGuiFactoryFor ( ModContainer selectedMod ) 
 + { 
 + return guiFactories . get ( selectedMod ) ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLConfigGuiFactory . java b / fml / src / main / java / cpw / mods / fml / client / FMLConfigGuiFactory . java 
 new file mode 100644 
 index 0000000 . . aff7969 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / client / FMLConfigGuiFactory . java 
 @ @ - 0 , 0 + 1 , 70 @ @ 
 + package cpw . mods . fml . client ; 
 + 
 + import java . util . Set ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . gui . GuiButton ; 
 + import net . minecraft . client . gui . GuiScreen ; 
 + import net . minecraft . client . resources . I18n ; 
 + 
 + public class FMLConfigGuiFactory implements IModGuiFactory { 
 + public static class FMLConfigGuiScreen extends GuiScreen { 
 + private GuiScreen parent ; 
 + 
 + public FMLConfigGuiScreen ( GuiScreen parent ) 
 + { 
 + this . parent = parent ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + @ Override 
 + public void func _ 73866 _ w _ ( ) 
 + { 
 + this . field _ 146292 _ n . add ( new GuiButton ( 1 , this . field _ 146294 _ l / 2 - 75 , this . field _ 146295 _ m - 38 , I18n . func _ 135052 _ a ( " gui . done " ) ) ) ; 
 + } 
 + 
 + @ Override 
 + protected void func _ 146284 _ a ( GuiButton p _ 73875 _ 1 _ ) 
 + { 
 + if ( p _ 73875 _ 1 _ . field _ 146124 _ l & & p _ 73875 _ 1 _ . field _ 146127 _ k = = 1 ) 
 + { 
 + FMLClientHandler . instance ( ) . showGuiScreen ( parent ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void func _ 73863 _ a ( int p _ 73863 _ 1 _ , int p _ 73863 _ 2 _ , float p _ 73863 _ 3 _ ) 
 + { 
 + this . func _ 146276 _ q _ ( ) ; 
 + this . func _ 73732 _ a ( this . field _ 146289 _ q , " Forge Mod Loader test config screen " , this . field _ 146294 _ l / 2 , 40 , 0xFFFFFF ) ; 
 + super . func _ 73863 _ a ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ , p _ 73863 _ 3 _ ) ; 
 + } 
 + 
 + } 
 + private Minecraft minecraft ; 
 + @ Override 
 + public void initialize ( Minecraft minecraftInstance ) 
 + { 
 + this . minecraft = minecraftInstance ; 
 + } 
 + 
 + @ Override 
 + public Class < ? extends GuiScreen > mainConfigGuiClass ( ) 
 + { 
 + return FMLConfigGuiScreen . class ; 
 + } 
 + 
 + @ Override 
 + public Set < RuntimeOptionCategoryElement > runtimeGuiCategories ( ) 
 + { 
 + / / TODO Auto - generated method stub 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public RuntimeOptionGuiHandler getHandlerFor ( RuntimeOptionCategoryElement element ) 
 + { 
 + / / TODO Auto - generated method stub 
 + return null ; 
 + } 
 + 
 + } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / client / GuiModList . java b / fml / src / main / java / cpw / mods / fml / client / GuiModList . java 
 index 9a7958f . . b83ca71 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / GuiModList . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / GuiModList . java 
 @ @ - 33 , 10 + 33 , 12 @ @ import net . minecraft . client . resources . I18n ; 
 import net . minecraft . client . resources . IResourcePack ; 
 import net . minecraft . util . ResourceLocation ; 
 
 + import org . apache . logging . log4j . Level ; 
 import org . lwjgl . opengl . GL11 ; 
 
 import com . google . common . base . Strings ; 
 
 + import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 import cpw . mods . fml . common . ModContainer . Disableable ; 
 @ @ - 93 , 8 + 95 , 8 @ @ public class GuiModList extends GuiScreen 
 } 
 listWidth = Math . min ( listWidth , 150 ) ; 
 this . field _ 146292 _ n . add ( new GuiButton ( 6 , this . field _ 146294 _ l / 2 - 75 , this . field _ 146295 _ m - 38 , I18n . func _ 135052 _ a ( " gui . done " ) ) ) ; 
 - configModButton = new GuiButton ( 7 , 10 , this . field _ 146295 _ m - 60 , this . listWidth , 20 , " Config " ) ; 
 - disableModButton = new GuiButton ( 8 , 10 , this . field _ 146295 _ m - 38 , this . listWidth , 20 , " Disable " ) ; 
 + configModButton = new GuiButton ( 20 , 10 , this . field _ 146295 _ m - 60 , this . listWidth , 20 , " Config " ) ; 
 + disableModButton = new GuiButton ( 21 , 10 , this . field _ 146295 _ m - 38 , this . listWidth , 20 , " Disable " ) ; 
 this . field _ 146292 _ n . add ( configModButton ) ; 
 this . field _ 146292 _ n . add ( disableModButton ) ; 
 this . modList = new GuiSlotModList ( this , mods , listWidth ) ; 
 @ @ - 110 , 6 + 112 , 18 @ @ public class GuiModList extends GuiScreen 
 case 6 : 
 this . field _ 146297 _ k . func _ 147108 _ a ( this . mainMenu ) ; 
 return ; 
 + case 20 : 
 + try 
 + { 
 + IModGuiFactory guiFactory = FMLClientHandler . instance ( ) . getGuiFactoryFor ( selectedMod ) ; 
 + GuiScreen newScreen = guiFactory . mainConfigGuiClass ( ) . getConstructor ( GuiScreen . class ) . newInstance ( this ) ; 
 + this . field _ 146297 _ k . func _ 147108 _ a ( newScreen ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " There was a critical issue trying to build the config GUI for % s " , selectedMod . getModId ( ) ) ; 
 + } 
 + return ; 
 } 
 } 
 super . func _ 146284 _ a ( button ) ; 
 @ @ - 222 , 6 + 236 , 17 @ @ public class GuiModList extends GuiScreen 
 disableModButton . field _ 146125 _ m = true ; 
 disableModButton . field _ 146124 _ l = false ; 
 } 
 + IModGuiFactory guiFactory = FMLClientHandler . instance ( ) . getGuiFactoryFor ( selectedMod ) ; 
 + if ( guiFactory = = null | | guiFactory . mainConfigGuiClass ( ) = = null ) 
 + { 
 + configModButton . field _ 146125 _ m = true ; 
 + configModButton . field _ 146124 _ l = false ; 
 + } 
 + else 
 + { 
 + configModButton . field _ 146125 _ m = true ; 
 + configModButton . field _ 146124 _ l = true ; 
 + } 
 } else { 
 offset = ( this . listWidth + this . field _ 146294 _ l ) / 2 ; 
 this . func _ 73732 _ a ( this . field _ 146289 _ q , selectedMod . getName ( ) , offset , 35 , 0xFFFFFF ) ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / client / IModGuiFactory . java b / fml / src / main / java / cpw / mods / fml / client / IModGuiFactory . java 
 new file mode 100644 
 index 0000000 . . 0e7fa18 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / client / IModGuiFactory . java 
 @ @ - 0 , 0 + 1 , 127 @ @ 
 + package cpw . mods . fml . client ; 
 + 
 + import java . util . Set ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . gui . GuiScreen ; 
 + 
 + public interface IModGuiFactory { 
 + / * * 
 + * Called when instantiated to initialize with the active minecraft instance . 
 + * 
 + * @ param minecraftInstance the instance 
 + * / 
 + public void initialize ( Minecraft minecraftInstance ) ; 
 + / * * 
 + * Return the name of a class extending { @ link GuiScreen } . This class will 
 + * be instantiated when the " config " button is pressed in the mod list . It will 
 + * have a single argument constructor - the " parent " screen , the same as all 
 + * Minecraft GUIs . The expected behaviour is that this screen will replace the 
 + * " mod list " screen completely , and will return to the mod list screen through 
 + * the parent link , once the appropriate action is taken from the config screen . 
 + * 
 + * A null from this method indicates that the mod does not provide a " config " 
 + * button GUI screen , and the config button will be hidden / disabled . 
 + * 
 + * This config GUI is anticipated to provide configuration to the mod in a friendly 
 + * visual way . It should not be abused to set internals such as IDs ( they ' re gonna 
 + * keep disappearing anyway ) , but rather , interesting behaviours . This config GUI 
 + * is never run when a server game is running , and should be used to configure 
 + * desired behaviours that affect server state . Costs , mod game modes , stuff like that 
 + * can be changed here . 
 + * 
 + * @ return A class that will be instantiated on clicks on the config button 
 + * or null if no GUI is desired . 
 + * / 
 + public Class < ? extends GuiScreen > mainConfigGuiClass ( ) ; 
 + 
 + 
 + / * * 
 + * Return a list of the " runtime " categories this mod wishes to populate with 
 + * GUI elements . 
 + * 
 + * Runtime categories are created on demand and organized in a ' lite ' tree format . 
 + * The parent represents the parent node in the tree . There is one special parent 
 + * ' Help ' that will always list first , and is generally meant to provide Help type 
 + * content for mods . The remaining parents will sort alphabetically , though 
 + * this may change if there is a lot of alphabetic abuse . " AAA " is probably never a valid 
 + * category parent . 
 + * 
 + * Runtime configuration itself falls into two flavours : in - game help , which is 
 + * generally non interactive except for the text it wishes to show , and client - only 
 + * affecting behaviours . This would include things like toggling minimaps , or cheat modes 
 + * or anything NOT affecting the behaviour of the server . Please don ' t abuse this to 
 + * change the state of the server in any way , this is intended to behave identically 
 + * when the server is local or remote . 
 + * 
 + * @ return the set of options this mod wishes to have available , or empty if none 
 + * / 
 + public Set < RuntimeOptionCategoryElement > runtimeGuiCategories ( ) ; 
 + 
 + / * * 
 + * Return an instance of a { @ link RuntimeOptionGuiHandler } that handles painting the 
 + * right hand side option screen for the specified { @ link RuntimeOptionCategoryElement } . 
 + * 
 + * @ param element The element we wish to paint for 
 + * @ return The Handler for painting it 
 + * / 
 + public RuntimeOptionGuiHandler getHandlerFor ( RuntimeOptionCategoryElement element ) ; 
 + 
 + / * * 
 + * Represents an option category and entry in the runtime gui options list . 
 + * 
 + * @ author cpw 
 + * 
 + * / 
 + public static class RuntimeOptionCategoryElement { 
 + public final String parent ; 
 + public final String child ; 
 + 
 + public RuntimeOptionCategoryElement ( String parent , String child ) 
 + { 
 + this . parent = parent ; 
 + this . child = child ; 
 + } 
 + } 
 + 
 + / * * 
 + * Responsible for painting the mod specific section of runtime options GUI for a particular category 
 + * 
 + * @ author cpw 
 + * 
 + * / 
 + public interface RuntimeOptionGuiHandler { 
 + / * * 
 + * Called to add widgets to the screen , such as buttons . 
 + * GUI identifier numbers should start at 100 and increase . 
 + * The callback will be through { @ link # actionCallback ( int ) } 
 + * 
 + * @ param x X 
 + * @ param y Y 
 + * @ param w width 
 + * @ param h height 
 + * / 
 + public void addWidgets ( int x , int y , int w , int h ) ; 
 + 
 + / * * 
 + * Called to paint the rectangle specified . 
 + * @ param x X 
 + * @ param y Y 
 + * @ param w width 
 + * @ param h height 
 + * / 
 + public void paint ( int x , int y , int w , int h ) ; 
 + 
 + / * * 
 + * Called if a widget with id > = 100 is fired . 
 + * 
 + * @ param actionId the actionId of the firing widget 
 + * / 
 + public void actionCallback ( int actionId ) ; 
 + 
 + / * * 
 + * Called when this handler is about to go away ( probably replaced by another one , or closing the 
 + * option screen ) 
 + * / 
 + public void close ( ) ; 
 + } 
 + } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / DummyModContainer . java b / fml / src / main / java / cpw / mods / fml / common / DummyModContainer . java 
 index f31a7a1 . . e603187 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / DummyModContainer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / DummyModContainer . java 
 @ @ - 186 , 4 + 186 , 10 @ @ public class DummyModContainer implements ModContainer 
 { 
 return Disableable . NEVER ; 
 } 
 + 
 + @ Override 
 + public String getGuiClassName ( ) 
 + { 
 + return null ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLContainer . java b / fml / src / main / java / cpw / mods / fml / common / FMLContainer . java 
 index a55cbe8 . . f406442 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLContainer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLContainer . java 
 @ @ - 215 , 4 + 215 , 10 @ @ public class FMLContainer extends DummyModContainer implements WorldAccessContai 
 { 
 return getSource ( ) . isDirectory ( ) ? FMLFolderResourcePack . class : FMLFileResourcePack . class ; 
 } 
 + 
 + @ Override 
 + public String getGuiClassName ( ) 
 + { 
 + return " cpw . mods . fml . client . FMLConfigGuiFactory " ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java 
 index 3729f43 . . 50b24ae 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java 
 @ @ - 616 , 4 + 616 , 10 @ @ public class FMLModContainer implements ModContainer 
 { 
 return disableability ; 
 } 
 + 
 + @ Override 
 + public String getGuiClassName ( ) 
 + { 
 + return ( String ) descriptor . get ( " guiFactory " ) ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / InjectedModContainer . java b / fml / src / main / java / cpw / mods / fml / common / InjectedModContainer . java 
 index b02e254 . . f4acf41 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / InjectedModContainer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / InjectedModContainer . java 
 @ @ - 174 , 4 + 174 , 10 @ @ public class InjectedModContainer implements ModContainer 
 { 
 return wrappedContainer . canBeDisabled ( ) ; 
 } 
 + 
 + @ Override 
 + public String getGuiClassName ( ) 
 + { 
 + return wrappedContainer . getGuiClassName ( ) ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / Mod . java b / fml / src / main / java / cpw / mods / fml / common / Mod . java 
 index 9d9ebf1 . . cab2511 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / Mod . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / Mod . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import java . lang . annotation . Retention ; 
 import java . lang . annotation . RetentionPolicy ; 
 import java . lang . annotation . Target ; 
 
 + import cpw . mods . fml . client . IModGuiFactory ; 
 import cpw . mods . fml . common . event . FMLEvent ; 
 import cpw . mods . fml . common . event . FMLFingerprintViolationEvent ; 
 import cpw . mods . fml . common . event . FMLInitializationEvent ; 
 @ @ - 149 , 10 + 150 , 20 @ @ public @ interface Mod 
 * ( minimap mods , graphical tweak mods ) then you can set true here and receive the FMLDeactivationEvent to perform deactivation 
 * tasks . 
 * This does not affect administrative disabling through the system property fml . modStates or the config file fmlModState . properties . 
 + * The mod will only be deactivated outside of a running game world - FML will never allow mod deactivation whilst a game server 
 + * is running . 
 * 
 - * @ return if I can be deactivated whilst the game is running . 
 + * @ return if this mod can be deactivated whilst the game is open . 
 * / 
 boolean canBeDeactivated ( ) default false ; 
 + 
 + / * * 
 + * An optional GUI factory for this mod . This is the name of a class implementing { @ link IModGuiFactory } that will be instantiated 
 + * on the client side , and will have certain configuration / options guis requested from it . 
 + * 
 + * @ return The name of a class implementing { @ link IModGuiFactory } 
 + * / 
 + String guiFactory ( ) default " " ; 
 / * * 
 * A list of custom properties for this mod . Completely up to the mod author if / when they 
 * want to put anything in here . 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / ModContainer . java b / fml / src / main / java / cpw / mods / fml / common / ModContainer . java 
 index 47cc223 . . 1641788 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / ModContainer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / ModContainer . java 
 @ @ - 143 , 4 + 143 , 6 @ @ public interface ModContainer 
 Map < String , String > getSharedModDescriptor ( ) ; 
 
 Disableable canBeDisabled ( ) ; 
 + 
 + String getGuiClassName ( ) ; 
 }
