BLEU SCORE: 0.028265205879007455

TEST MSG: Use multiple catch , try - with - resources , replace system . out and e . printStackTrace
GENERATED MSG: Add a java version detection and nag system for users on Java 7 or below .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / ClientCommandHandler . java b / src / main / java / net / minecraftforge / client / ClientCommandHandler . java <nl> index ff11443 . . d239ec1 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ClientCommandHandler . java <nl> + + + b / src / main / java / net / minecraftforge / client / ClientCommandHandler . java <nl> @ @ - 34 , 6 + 34 , 8 @ @ import net . minecraftforge . event . CommandEvent ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> import net . minecraft . util . text . TextComponentTranslation ; <nl> import net . minecraft . util . text . TextFormatting ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + <nl> import static net . minecraft . util . text . TextFormatting . * ; <nl> <nl> / * * <nl> @ @ - 109 , 7 + 111 , 7 @ @ public class ClientCommandHandler extends CommandHandler <nl> catch ( Throwable t ) <nl> { <nl> sender . sendMessage ( format ( RED , " commands . generic . exception " ) ) ; <nl> - t . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Command ' { } ' threw an exception : " , message , t ) ; <nl> } <nl> <nl> return - 1 ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java <nl> index 036fdca . . f9f5ead 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java <nl> @ @ - 575 , 12 + 575 , 7 @ @ public class ModelBlockAnimation <nl> / / String json = mbaGson . toJson ( mba ) ; <nl> return mba ; <nl> } <nl> - catch ( IOException e ) <nl> - { <nl> - FMLLog . log . error ( " Exception loading vanilla model animation { } , skipping " , armatureLocation , e ) ; <nl> - return defaultModelBlockAnimation ; <nl> - } <nl> - catch ( JsonParseException e ) <nl> + catch ( IOException | JsonParseException e ) <nl> { <nl> FMLLog . log . error ( " Exception loading vanilla model animation { } , skipping " , armatureLocation , e ) ; <nl> return defaultModelBlockAnimation ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java <nl> index 98724ac . . 635c365 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java <nl> + + + b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java <nl> @ @ - 182 , 11 + 182 , 7 @ @ public enum KeyModifier { <nl> { <nl> return valueOf ( stringValue ) ; <nl> } <nl> - catch ( NullPointerException ignored ) <nl> - { <nl> - return NONE ; <nl> - } <nl> - catch ( IllegalArgumentException ignored ) <nl> + catch ( NullPointerException | IllegalArgumentException ignored ) <nl> { <nl> return NONE ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> index 488f631 . . a6727e8 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> @ @ - 234 , 7 + 234 , 7 @ @ public class DimensionManager <nl> } <nl> catch ( Exception e ) <nl> { <nl> - System . err . println ( " Cannot Hotload Dim : " + e . getMessage ( ) ) ; <nl> + FMLLog . log . error ( " Cannot Hotload Dim : { } " , dim , e ) ; <nl> return ; / / If a provider hasn ' t been registered then we can ' t hotload the dim <nl> } <nl> MinecraftServer mcServer = overworld . getMinecraftServer ( ) ; <nl> @ @ - 348 , 7 + 348 , 7 @ @ public class DimensionManager <nl> } <nl> catch ( MinecraftException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Caught an exception while saving all chunks : " , e ) ; <nl> } <nl> finally <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index fbd5ab0 . . c09ca0b 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 421 , 7 + 421 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + log . error ( " Could not find class for name ' { } ' . " , name , e ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> index 67bcec6 . . c797758 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> @ @ - 124 , 7 + 124 , 7 @ @ public class MinecraftForge <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Could not find class for name ' { } ' . " , name , e ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java b / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java <nl> index b1a9b2e . . d77028a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java <nl> @ @ - 64 , 9 + 64 , 7 @ @ public enum CapabilityManager <nl> { <nl> try { <nl> return implementation . newInstance ( ) ; <nl> - } catch ( InstantiationException e ) { <nl> - throw Throwables . propagate ( e ) ; <nl> - } catch ( IllegalAccessException e ) { <nl> + } catch ( InstantiationException | IllegalAccessException e ) { <nl> throw Throwables . propagate ( e ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / chunkio / ChunkIOProvider . java b / src / main / java / net / minecraftforge / common / chunkio / ChunkIOProvider . java <nl> index e9aa2c1 . . d1f2d8e 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / chunkio / ChunkIOProvider . java <nl> + + + b / src / main / java / net / minecraftforge / common / chunkio / ChunkIOProvider . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . util . math . ChunkPos ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . event . world . ChunkDataEvent ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> import java . io . IOException ; <nl> import java . util . concurrent . ConcurrentLinkedQueue ; <nl> @ @ - 69 , 7 + 70 , 7 @ @ class ChunkIOProvider implements Runnable <nl> } <nl> catch ( IOException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Failed to load chunk async . " , e ) ; <nl> } <nl> <nl> if ( data ! = null ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / config / Configuration . java b / src / main / java / net / minecraftforge / common / config / Configuration . java <nl> index 39f799c . . b6331a7 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / config / Configuration . java <nl> + + + b / src / main / java / net / minecraftforge / common / config / Configuration . java <nl> @ @ - 50 , 6 + 50 , 7 @ @ import java . util . regex . Pattern ; <nl> import com . google . common . base . CharMatcher ; <nl> import com . google . common . collect . ImmutableSet ; <nl> <nl> + import com . google . common . primitives . Floats ; <nl> import net . minecraftforge . fml . client . config . GuiConfig ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; <nl> @ @ - 132 , 8 + 133 , 7 @ @ public class Configuration <nl> File fileBak = new File ( file . getAbsolutePath ( ) + " _ " + <nl> new SimpleDateFormat ( " yyyyMMdd _ HHmmss " ) . format ( new Date ( ) ) + " . errored " ) ; <nl> FMLLog . log . fatal ( " An exception occurred while loading config file { } . This file will be renamed to { } " + <nl> - " and a new config file will be generated . " , file . getName ( ) , fileBak . getName ( ) ) ; <nl> - e . printStackTrace ( ) ; <nl> + " and a new config file will be generated . " , file . getName ( ) , fileBak . getName ( ) , e ) ; <nl> <nl> file . renameTo ( fileBak ) ; <nl> load ( ) ; <nl> @ @ - 1047 , 7 + 1047 , 7 @ @ public class Configuration <nl> } <nl> catch ( IOException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error while loading config . " , e ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 1108 , 7 + 1108 , 7 @ @ public class Configuration <nl> } <nl> catch ( IOException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error while saving config . " , e ) ; <nl> } <nl> } <nl> <nl> @ @ - 1712 , 11 + 1712 , 12 @ @ public class Configuration <nl> prop . setMaxValue ( maxValue ) ; <nl> try <nl> { <nl> - return Float . parseFloat ( prop . getString ( ) ) < minValue ? minValue : ( Float . parseFloat ( prop . getString ( ) ) > maxValue ? maxValue : Float . parseFloat ( prop . getString ( ) ) ) ; <nl> + float parseFloat = Float . parseFloat ( prop . getString ( ) ) ; <nl> + return Floats . constrainToRange ( parseFloat , minValue , maxValue ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Failed to get float for { } / { } " , name , category , e ) ; <nl> } <nl> return defaultValue ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java <nl> index ddcc7ee . . 03137a7 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java <nl> + + + b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java <nl> @ @ - 162 , 7 + 162 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine <nl> } <nl> else <nl> { <nl> - System . out . println ( " Unknown special event \ " " + event . event ( ) + " \ " , ignoring " ) ; <nl> + FMLLog . log . error ( " Unknown special event \ " { } \ " , ignoring . " , event . event ( ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 230 , 12 + 230 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine <nl> / / System . out . println ( location + " : " + json ) ; <nl> return asm ; <nl> } <nl> - catch ( IOException e ) <nl> - { <nl> - FMLLog . log . error ( " Exception loading Animation State Machine { } , skipping " , location , e ) ; <nl> - return missing ; <nl> - } <nl> - catch ( JsonParseException e ) <nl> + catch ( IOException | JsonParseException e ) <nl> { <nl> FMLLog . log . error ( " Exception loading Animation State Machine { } , skipping " , location , e ) ; <nl> return missing ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / EnumHelper . java b / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> index 8bdbcb5 . . 7d2e30c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> @ @ - 159 , 7 + 159 , 7 @ @ public class EnumHelper <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error setting up EnumHelper . " , e ) ; <nl> } <nl> <nl> isSetup = true ; <nl> @ @ - 385 , 8 + 385 , 8 @ @ public class EnumHelper <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> - throw new RuntimeException ( e . getMessage ( ) , e ) ; <nl> + FMLLog . log . error ( " Error adding enum with EnumHelper . " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 15d6465 . . 407ed25 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 108 , 7 + 108 , 6 @ @ import net . minecraftforge . fml . common . toposort . ModSortingException ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> import net . minecraftforge . registries . GameData ; <nl> <nl> - import org . apache . commons . io . IOUtils ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . lwjgl . LWJGLUtil ; <nl> @ @ - 300 , 17 + 299 , 12 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> Class < ? > optifineConfig = Class . forName ( " Config " , false , Loader . instance ( ) . getModClassLoader ( ) ) ; <nl> String optifineVersion = ( String ) optifineConfig . getField ( " VERSION " ) . get ( null ) ; <nl> Map < String , Object > dummyOptifineMeta = ImmutableMap . < String , Object > builder ( ) . put ( " name " , " Optifine " ) . put ( " version " , optifineVersion ) . build ( ) ; <nl> - InputStream optifineModInfoInputStream = getClass ( ) . getResourceAsStream ( " optifinemod . info " ) ; <nl> - try <nl> + try ( InputStream optifineModInfoInputStream = getClass ( ) . getResourceAsStream ( " optifinemod . info " ) ) <nl> { <nl> ModMetadata optifineMetadata = MetadataCollection . from ( optifineModInfoInputStream , " optifine " ) . getMetadataForId ( " optifine " , dummyOptifineMeta ) ; <nl> optifineContainer = new DummyModContainer ( optifineMetadata ) ; <nl> FMLLog . log . info ( " Forge Mod Loader has detected optifine { } , enabling compatibility features " , optifineContainer . getVersion ( ) ) ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( optifineModInfoInputStream ) ; <nl> - } <nl> } <nl> catch ( Exception e ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> index ca69fa7 . . 278e53c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> @ @ - 148 , 21 + 148 , 15 @ @ public class SplashProgress <nl> if ( ! parent . exists ( ) ) <nl> parent . mkdirs ( ) ; <nl> <nl> - FileReader r = null ; <nl> config = new Properties ( ) ; <nl> - try <nl> + try ( FileReader r = new FileReader ( configFile ) ) <nl> { <nl> - r = new FileReader ( configFile ) ; <nl> config . load ( r ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> FMLLog . log . info ( " Could not load splash . properties , will create a default one " ) ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( r ) ; <nl> - } <nl> <nl> / / Some system do not support this and have weird effects so we need to detect and disable by default . <nl> / / The user can always force enable it if they want to take the responsibility for bugs . <nl> @ @ - 191 , 20 + 185 , 14 @ @ public class SplashProgress <nl> <nl> File miscPackFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , getString ( " resourcePackPath " , " resources " ) ) ; <nl> <nl> - FileWriter w = null ; <nl> - try <nl> + try ( FileWriter w = new FileWriter ( configFile ) ) <nl> { <nl> - w = new FileWriter ( configFile ) ; <nl> config . store ( w , " Splash screen properties " ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> FMLLog . log . error ( " Could not save the splash . properties file " , e ) ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( w ) ; <nl> - } <nl> <nl> miscPack = createResourcePack ( miscPackFile ) ; <nl> <nl> @ @ - 240 , 7 + 228 , 7 @ @ public class SplashProgress <nl> } <nl> catch ( LWJGLException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error starting SplashProgress : " , e ) ; <nl> disableSplash ( e ) ; <nl> } <nl> <nl> @ @ - 537 , 7 + 525 , 7 @ @ public class SplashProgress <nl> } <nl> catch ( LWJGLException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error setting GL context : " , e ) ; <nl> throw new RuntimeException ( e ) ; <nl> } <nl> glClearColor ( ( float ) ( ( backgroundColor > > 16 ) & 0xFF ) / 0xFF , ( float ) ( ( backgroundColor > > 8 ) & 0xFF ) / 0xFF , ( float ) ( backgroundColor & 0xFF ) / 0xFF , 1 ) ; <nl> @ @ - 564 , 7 + 552 , 7 @ @ public class SplashProgress <nl> } <nl> catch ( LWJGLException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error releasing GL context : " , e ) ; <nl> throw new RuntimeException ( e ) ; <nl> } <nl> finally <nl> @ @ - 629 , 7 + 617 , 7 @ @ public class SplashProgress <nl> } <nl> catch ( LWJGLException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error setting GL context : " , e ) ; <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> @ @ - 650 , 7 + 638 , 7 @ @ public class SplashProgress <nl> } <nl> catch ( LWJGLException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error releasing GL context : " , e ) ; <nl> throw new RuntimeException ( e ) ; <nl> } <nl> lock . unlock ( ) ; <nl> @ @ - 672 , 7 + 660 , 7 @ @ public class SplashProgress <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error finishing SplashProgress : " , e ) ; <nl> disableSplash ( e ) ; <nl> } <nl> } <nl> @ @ - 719 , 10 + 707 , 8 @ @ public class SplashProgress <nl> enabled = false ; <nl> config . setProperty ( " enabled " , " false " ) ; <nl> <nl> - FileWriter w = null ; <nl> - try <nl> + try ( FileWriter w = new FileWriter ( configFile ) ) <nl> { <nl> - w = new FileWriter ( configFile ) ; <nl> config . store ( w , " Splash screen properties " ) ; <nl> } <nl> catch ( IOException e ) <nl> @ @ - 730 , 10 + 716 , 6 @ @ public class SplashProgress <nl> FMLLog . log . error ( " Could not save the splash . properties file " , e ) ; <nl> return false ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( w ) ; <nl> - } <nl> return true ; <nl> } <nl> <nl> @ @ - 837 , 7 + 819 , 7 @ @ public class SplashProgress <nl> } <nl> catch ( IOException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error reading texture from file : { } " , location , e ) ; <nl> throw new RuntimeException ( e ) ; <nl> } <nl> finally <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java <nl> index f7f21ec . . d9855f2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; <nl> import net . minecraftforge . fml . client . event . ConfigChangedEvent ; <nl> import net . minecraftforge . fml . client . event . ConfigChangedEvent . OnConfigChangedEvent ; <nl> import net . minecraftforge . fml . client . event . ConfigChangedEvent . PostConfigChangedEvent ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . eventhandler . Event . Result ; <nl> <nl> @ @ - 344 , 7 + 345 , 7 @ @ public class GuiConfig extends GuiScreen <nl> } <nl> catch ( Throwable e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error performing GuiConfig action : " , e ) ; <nl> } <nl> <nl> if ( flag ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java <nl> index 493f65f . . 00edd26 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java <nl> @ @ - 128 , 8 + 128 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> } <nl> catch ( Throwable e ) <nl> { <nl> - FMLLog . log . fatal ( " There was a critical error instantiating the custom IConfigEntry for config element { } . " , configElement . getName ( ) ) ; <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " There was a critical error instantiating the custom IConfigEntry for config element { } . " , configElement . getName ( ) , e ) ; <nl> } <nl> else if ( configElement . isProperty ( ) ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiEditArray . java b / src / main / java / net / minecraftforge / fml / client / config / GuiEditArray . java <nl> index 76b9b5b . . 201bdd4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiEditArray . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiEditArray . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraft . util . text . TextFormatting ; <nl> import static net . minecraftforge . fml . client . config . GuiUtils . RESET _ CHAR ; <nl> import static net . minecraftforge . fml . client . config . GuiUtils . UNDO _ CHAR ; <nl> <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> import org . lwjgl . input . Keyboard ; <nl> <nl> / * * <nl> @ @ - 128 , 7 + 129 , 7 @ @ public class GuiEditArray extends GuiScreen <nl> } <nl> catch ( Throwable e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error performing GuiEditArray action : " , e ) ; <nl> } <nl> this . mc . displayGuiScreen ( this . parentScreen ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiSelectString . java b / src / main / java / net / minecraftforge / fml / client / config / GuiSelectString . java <nl> index 154fe04 . . b8cc51c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiSelectString . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiSelectString . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import net . minecraft . client . gui . GuiButton ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . client . resources . I18n ; <nl> import net . minecraft . util . text . TextFormatting ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> import static net . minecraftforge . fml . client . config . GuiUtils . RESET _ CHAR ; <nl> import static net . minecraftforge . fml . client . config . GuiUtils . UNDO _ CHAR ; <nl> @ @ - 128 , 7 + 129 , 7 @ @ public class GuiSelectString extends GuiScreen <nl> } <nl> catch ( Throwable e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error performing GuiSelectString action : " , e ) ; <nl> } <nl> this . mc . displayGuiScreen ( this . parentScreen ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index 8d1d839 . . a8f7408 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 700 , 11 + 700 , 7 @ @ public class FMLCommonHandler <nl> task . run ( ) ; <nl> task . get ( ) ; / / Forces the exception to be thrown if any <nl> } <nl> - catch ( InterruptedException e ) <nl> - { <nl> - FMLLog . log . fatal ( " Exception caught executing FutureTask : { } " , e . toString ( ) , e ) ; <nl> - } <nl> - catch ( ExecutionException e ) <nl> + catch ( InterruptedException | ExecutionException e ) <nl> { <nl> FMLLog . log . fatal ( " Exception caught executing FutureTask : { } " , e . toString ( ) , e ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 07e490e . . 8a4cef5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 320 , 15 + 320 , 10 @ @ public class FMLModContainer implements ModContainer <nl> if ( propsFile . exists ( ) & & propsFile . isFile ( ) ) <nl> { <nl> version = new Properties ( ) ; <nl> - FileInputStream fis = new FileInputStream ( propsFile ) ; <nl> - try <nl> + try ( FileInputStream fis = new FileInputStream ( propsFile ) ) <nl> { <nl> version . load ( fis ) ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( fis ) ; <nl> - } <nl> } <nl> } <nl> return version ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriptionTransformer . java b / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriptionTransformer . java <nl> index 235efe4 . . ab3c8d4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriptionTransformer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriptionTransformer . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import static org . objectweb . asm . Type . BOOLEAN _ TYPE ; <nl> import static org . objectweb . asm . Type . getMethodDescriptor ; <nl> <nl> import net . minecraft . launchwrapper . IClassTransformer ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . eventhandler . Event ; <nl> <nl> import org . objectweb . asm . ClassReader ; <nl> @ @ - 92 , 7 + 93 , 7 @ @ public class EventSubscriptionTransformer implements IClassTransformer <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error building events . " , e ) ; <nl> } <nl> <nl> return bytes ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / transformers / deobf / FMLDeobfuscatingRemapper . java b / src / main / java / net / minecraftforge / fml / common / asm / transformers / deobf / FMLDeobfuscatingRemapper . java <nl> index 188a21a . . e4c775e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / asm / transformers / deobf / FMLDeobfuscatingRemapper . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / asm / transformers / deobf / FMLDeobfuscatingRemapper . java <nl> @ @ - 430 , 7 + 430 , 7 @ @ public class FMLDeobfuscatingRemapper extends Remapper { <nl> } <nl> catch ( IOException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error getting patched resource : " , e ) ; <nl> } <nl> } <nl> public void mergeSuperMaps ( String name , @ Nullable String superName , String [ ] interfaces ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> index 4f67497 . . 4fd756e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> @ @ - 46 , 25 + 46 , 17 @ @ public class JarDiscoverer implements ITypeDiscoverer <nl> { <nl> List < ModContainer > foundMods = Lists . newArrayList ( ) ; <nl> FMLLog . log . debug ( " Examining file { } for potential mods " , candidate . getModContainer ( ) . getName ( ) ) ; <nl> - JarFile jar = null ; <nl> - try <nl> + try ( JarFile jar = new JarFile ( candidate . getModContainer ( ) ) ) <nl> { <nl> - jar = new JarFile ( candidate . getModContainer ( ) ) ; <nl> - <nl> ZipEntry modInfo = jar . getEntry ( " mcmod . info " ) ; <nl> MetadataCollection mc = null ; <nl> if ( modInfo ! = null ) <nl> { <nl> FMLLog . log . trace ( " Located mcmod . info file in file { } " , candidate . getModContainer ( ) . getName ( ) ) ; <nl> - InputStream inputStream = jar . getInputStream ( modInfo ) ; <nl> - try <nl> + try ( InputStream inputStream = jar . getInputStream ( modInfo ) ) <nl> { <nl> mc = MetadataCollection . from ( inputStream , candidate . getModContainer ( ) . getName ( ) ) ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( inputStream ) ; <nl> - } <nl> } <nl> else <nl> { <nl> @ @ - 83 , 15 + 75 , 10 @ @ public class JarDiscoverer implements ITypeDiscoverer <nl> ASMModParser modParser ; <nl> try <nl> { <nl> - InputStream inputStream = jar . getInputStream ( ze ) ; <nl> - try <nl> + try ( InputStream inputStream = jar . getInputStream ( ze ) ) <nl> { <nl> modParser = new ASMModParser ( inputStream ) ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( inputStream ) ; <nl> - } <nl> candidate . addClassEntry ( ze . getName ( ) ) ; <nl> } <nl> catch ( LoaderException e ) <nl> @ @ - 117 , 10 + 104 , 6 @ @ public class JarDiscoverer implements ITypeDiscoverer <nl> { <nl> FMLLog . log . warn ( " Zip file { } failed to read properly , it will be ignored " , candidate . getModContainer ( ) . getName ( ) , e ) ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( jar ) ; <nl> - } <nl> return foundMods ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> index d47f684 . . 5305f5f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> @ @ - 116 , 7 + 116 , 7 @ @ public class EventBus implements IEventExceptionHandler <nl> } <nl> catch ( NoSuchMethodException e ) <nl> { <nl> - ; <nl> + FMLLog . log . error ( " Could not find method ' { } ' on class ' { } ' " , method . getName ( ) , cls ) ; <nl> } <nl> } <nl> } <nl> @ @ - 160 , 7 + 160 , 7 @ @ public class EventBus implements IEventExceptionHandler <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error registering event handler : { } { } { } " , owner , eventType , method , e ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / launcher / FMLDeobfTweaker . java b / src / main / java / net / minecraftforge / fml / common / launcher / FMLDeobfTweaker . java <nl> index f81802f . . 076979f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / launcher / FMLDeobfTweaker . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / launcher / FMLDeobfTweaker . java <nl> @ @ - 62 , 7 + 62 , 7 @ @ public class FMLDeobfTweaker implements ITweaker { <nl> catch ( Exception e ) <nl> { <nl> / / Load in the Loader , make sure he ' s ready to roll - this will initialize most of the rest of minecraft here <nl> - System . out . println ( " A CRITICAL PROBLEM OCCURRED INITIALIZING MINECRAFT - LIKELY YOU HAVE AN INCORRECT VERSION FOR THIS FML " ) ; <nl> + FMLLog . log . fatal ( " A CRITICAL PROBLEM OCCURRED INITIALIZING MINECRAFT - LIKELY YOU HAVE AN INCORRECT VERSION FOR THIS FML " ) ; <nl> throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java b / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java <nl> index b104a5a . . aa569dc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java <nl> @ @ - 127 , 14 + 127 , 9 @ @ public class GenDiffSet { <nl> return new byte [ 0 ] ; <nl> } <nl> <nl> - InputStream sourceZipInputStream = sourceZip . getInputStream ( entry ) ; <nl> - try <nl> + try ( InputStream sourceZipInputStream = sourceZip . getInputStream ( entry ) ) <nl> { <nl> return ByteStreams . toByteArray ( sourceZipInputStream ) ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( sourceZipInputStream ) ; <nl> - } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java <nl> index 6eab2f6 . . 86cb625 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityList ; <nl> import net . minecraft . entity . EntityList . EntityEggInfo ; <nl> import net . minecraft . world . World ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . registries . IForgeRegistryEntry . Impl ; <nl> <nl> public class EntityEntry extends Impl < EntityEntry > <nl> @ @ - 79 , 7 + 80 , 7 @ @ public class EntityEntry extends Impl < EntityEntry > <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . error ( " Error creating entity . " , e ) ; <nl> return null ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> index 9d717ee . . a78b9ac 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> @ @ - 312 , 10 + 312 , 10 @ @ public class CoreModManager { <nl> Object crashreport = crashreportclass . getMethod ( " a " , Throwable . class , String . class ) . invoke ( null , re , " FML has discovered extracted jar files in the mods directory . \ nThis breaks mod loading functionality completely . \ nRemove the directories and replace with the jar files originally provided . " ) ; <nl> File crashreportfile = new File ( new File ( coreMods . getParentFile ( ) , " crash - reports " ) , String . format ( " fml - crash - % 1 $ tY - % 1 $ tm - % 1 $ td _ % 1 $ tH . % 1 $ tM . % 1 $ tS . txt " , Calendar . getInstance ( ) ) ) ; <nl> crashreportclass . getMethod ( " a " , File . class ) . invoke ( crashreport , crashreportfile ) ; <nl> - System . out . println ( " # @ ! @ # FML has crashed the game deliberately . Crash report saved to : # @ ! @ # " + crashreportfile . getAbsolutePath ( ) ) ; <nl> + FMLLog . log . fatal ( " # @ ! @ # FML has crashed the game deliberately . Crash report saved to : # @ ! @ # { } " , crashreportfile . getAbsolutePath ( ) ) ; <nl> } catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log . fatal ( " # @ ! @ # FML has crashed while generating a crash report , please report this . # @ ! @ # " , e ) ; <nl> / / NOOP - hopefully <nl> } <nl> throw re ; <nl> @ @ - 466 , 19 + 466 , 12 @ @ public class CoreModManager { <nl> try <nl> { <nl> Files . createParentDirs ( target ) ; <nl> - FileOutputStream targetOutputStream = null ; <nl> - InputStream jarInputStream = null ; <nl> - try <nl> - { <nl> - targetOutputStream = new FileOutputStream ( target ) ; <nl> - jarInputStream = jar . getInputStream ( jarEntry ) ; <nl> + try ( <nl> + FileOutputStream targetOutputStream = new FileOutputStream ( target ) ; <nl> + InputStream jarInputStream = jar . getInputStream ( jarEntry ) ; <nl> + ) { <nl> ByteStreams . copy ( jarInputStream , targetOutputStream ) ; <nl> } <nl> - finally <nl> - { <nl> - IOUtils . closeQuietly ( targetOutputStream ) ; <nl> - IOUtils . closeQuietly ( jarInputStream ) ; <nl> - } <nl> FMLLog . log . debug ( " Extracted ContainedDep { } from { } to { } " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; <nl> result . put ( dep , target ) ; <nl> } catch ( IOException e )
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> index 4ffa6d8 . . 22dec2e 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 38 , 7 + 38 , 16 @ @ <nl> if ( p _ 146284 _ 1 _ . field _ 146127 _ k = = 11 ) <nl> { <nl> this . field _ 146297 _ k . func _ 71371 _ a ( " Demo _ World " , " Demo _ World " , DemoWorldServer . field _ 73071 _ a ) ; <nl> - @ @ - 512 , 7 + 521 , 16 @ @ <nl> + @ @ - 493 , 6 + 502 , 8 @ @ <nl> + this . func _ 73729 _ b ( j + 155 , k + 0 , 0 , 45 , 155 , 44 ) ; <nl> + } <nl> + <nl> + + this . field _ 73975 _ c = net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m , this . field _ 73975 _ c ) ; <nl> + + <nl> + GlStateManager . func _ 179094 _ E ( ) ; <nl> + GlStateManager . func _ 179109 _ b ( ( float ) ( this . field _ 146294 _ l / 2 + 90 ) , 70 . 0F , 0 . 0F ) ; <nl> + GlStateManager . func _ 179114 _ b ( - 20 . 0F , 0 . 0F , 0 . 0F , 1 . 0F ) ; <nl> + @ @ - 512 , 7 + 523 , 15 @ @ <nl> s = s + ( " release " . equalsIgnoreCase ( this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ? " " : " / " + this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ; <nl> } <nl> <nl> @ @ - 52 , 11 + 61 , 10 @ @ <nl> + this . func _ 73731 _ b ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + brdline * ( this . field _ 146289 _ q . field _ 78288 _ b + 1 ) ) , 16777215 ) ; <nl> + } <nl> + } <nl> - + net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m ) ; <nl> String s1 = " Copyright Mojang AB . Do not distribute ! " ; <nl> this . func _ 73731 _ b ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . func _ 78256 _ a ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; <nl> <nl> - @ @ - 529 , 6 + 547 , 7 @ @ <nl> + @ @ - 529 , 6 + 548 , 7 @ @ <nl> { <nl> this . field _ 183503 _ M . func _ 73863 _ a ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ , p _ 73863 _ 3 _ ) ; <nl> } <nl> @ @ - 64 , 3 + 72 , 12 @ @ <nl> } <nl> <nl> protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException <nl> + @ @ - 549 , 6 + 569 , 8 @ @ <nl> + { <nl> + this . field _ 183503 _ M . func _ 73864 _ a ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ ) ; <nl> + } <nl> + + <nl> + + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; <nl> + } <nl> + <nl> + public void func _ 146281 _ b ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 9f628dd . . a0b6050 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import static org . lwjgl . opengl . GL20 . * ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . nio . FloatBuffer ; <nl> + import java . util . Collections ; <nl> import java . util . Map ; <nl> <nl> import javax . vecmath . Matrix3f ; <nl> @ @ - 89 , 8 + 90 , 12 @ @ import net . minecraftforge . common . model . IModelPart ; <nl> import net . minecraftforge . common . model . ITransformation ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> + import net . minecraftforge . fml . client . GuiJava8Error ; <nl> import net . minecraftforge . fml . client . registry . ClientRegistry ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Java8VersionException ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . lwjgl . BufferUtils ; <nl> @ @ - 266 , 7 + 271 , 8 @ @ public class ForgeHooksClient <nl> / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; <nl> } <nl> <nl> - public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) <nl> + private static int updatescrollcounter = 0 ; <nl> + public static String renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height , String splashText ) <nl> { <nl> Status status = ForgeVersion . getStatus ( ) ; <nl> if ( status = = BETA | | status = = BETA _ OUTDATED ) <nl> @ @ - 278 , 6 + 284 , 17 @ @ public class ForgeHooksClient <nl> gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> } <nl> <nl> + if ( ! Loader . instance ( ) . java8 ) <nl> + { <nl> + String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + line = I18n . format ( " fml . messages . java8warning . 2 " ) ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; <nl> + updatescrollcounter + = 1 ; <nl> + updatescrollcounter % = 100 ; <nl> + } <nl> + <nl> String line = null ; <nl> switch ( status ) <nl> { <nl> @ @ - 294 , 6 + 311 , 24 @ @ public class ForgeHooksClient <nl> / / if we have a line , render it in the bottom right , above Mojang ' s copyright line <nl> gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> } <nl> + <nl> + return splashText ; <nl> + } <nl> + <nl> + public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) <nl> + { <nl> + if ( ! Loader . instance ( ) . java8 ) <nl> + { <nl> + if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) <nl> + { <nl> + int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; <nl> + w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; <nl> + if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) <nl> + { <nl> + FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> } <nl> <nl> public static ISound playSound ( SoundManager manager , ISound sound ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index d4a61a4 . . b18562c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> + import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 74 , 6 + 75 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean defaultHasSpawnFuzz = true ; <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> public static boolean replaceVanillaBucketModel = true ; <nl> + public static long java8Reminder = 0 ; <nl> <nl> private static Configuration config ; <nl> private static ForgeModContainer INSTANCE ; <nl> @ @ - 259 , 6 + 261 , 11 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> replaceVanillaBucketModel = prop . getBoolean ( Boolean . FALSE ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> + prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder , <nl> + " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; <nl> + java8Reminder = prop . getLong ( java8Reminder ) ; <nl> + propOrder . add ( prop . getName ( ) ) ; <nl> + <nl> config . setCategoryPropertyOrder ( CATEGORY _ CLIENT , propOrder ) ; <nl> <nl> if ( config . hasChanged ( ) ) <nl> @ @ - 267 , 6 + 274 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> } <nl> } <nl> <nl> + public static void updateNag ( ) <nl> + { <nl> + Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; <nl> + prop . set ( ( new Date ( ) ) . getTime ( ) ) ; <nl> + config . save ( ) ; <nl> + } <nl> + <nl> / * * <nl> * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . <nl> * This implementation uses the optional configID string to handle multiple Configurations using one event handler . <nl> diff - - git a / src / main / java / net / minecraftforge / common / config / Property . java b / src / main / java / net / minecraftforge / common / config / Property . java <nl> index db85afe . . d42bbad 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / config / Property . java <nl> + + + b / src / main / java / net / minecraftforge / common / config / Property . java <nl> @ @ - 680 , 14 + 680 , 7 @ @ public class Property <nl> * / <nl> public int getInt ( ) <nl> { <nl> - try <nl> - { <nl> - return Integer . parseInt ( value ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - return Integer . parseInt ( defaultValue ) ; <nl> - } <nl> + return getInt ( Integer . parseInt ( defaultValue ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 728 , 6 + 721 , 54 @ @ public class Property <nl> } <nl> <nl> / * * <nl> + * Returns the value in this property as a long , <nl> + * if the value is not a valid long , it will return the initially provided default . <nl> + * <nl> + * @ return The value <nl> + * / <nl> + public long getLong ( ) <nl> + { <nl> + return getLong ( Long . parseLong ( defaultValue ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the value in this property as a long , <nl> + * if the value is not a valid long , it will return the <nl> + * provided default . <nl> + * <nl> + * @ param _ default The default to provide if the current value is not a validlong <nl> + * @ return The value <nl> + * / <nl> + public long getLong ( long _ default ) <nl> + { <nl> + try <nl> + { <nl> + return Long . parseLong ( value ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + return _ default ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the current value stored in this property can be converted to a long . <nl> + * @ return True if the type of the Property is an Long <nl> + * / <nl> + public boolean isLongValue ( ) <nl> + { <nl> + try <nl> + { <nl> + Long . parseLong ( value ) ; <nl> + return true ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the value in this property as a boolean , <nl> * if the value is not a valid boolean , it will return the <nl> * provided default . <nl> @ @ - 1148 , 6 + 1189 , 7 @ @ public class Property <nl> this . setValues ( values ) ; <nl> } <nl> public void set ( int value ) { set ( Integer . toString ( value ) ) ; } <nl> + public void set ( long value ) { set ( Long . toString ( value ) ) ; } <nl> public void set ( boolean value ) { set ( Boolean . toString ( value ) ) ; } <nl> public void set ( double value ) { set ( Double . toString ( value ) ) ; } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 19e8d0b . . 87019d1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import java . lang . ref . WeakReference ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> + import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> @ @ - 69 , 6 + 70 , 7 @ @ import net . minecraft . util . StringUtils ; <nl> import net . minecraft . world . WorldSettings ; <nl> import net . minecraft . world . storage . SaveFormatComparator ; <nl> import net . minecraft . world . storage . SaveFormatOld ; <nl> + import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . fml . client . registry . RenderingRegistry ; <nl> import net . minecraftforge . fml . common . DummyModContainer ; <nl> import net . minecraftforge . fml . common . DuplicateModsFoundException ; <nl> @ @ - 76 , 6 + 78 , 7 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLContainerHolder ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . IFMLSidedHandler ; <nl> + import net . minecraftforge . fml . common . Java8VersionException ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderException ; <nl> import net . minecraftforge . fml . common . MetadataCollection ; <nl> @ @ - 158 , 6 + 161 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private boolean loading = true ; <nl> <nl> + private Java8VersionException j8onlymods ; <nl> + <nl> private WrongMinecraftVersionException wrongMC ; <nl> <nl> private CustomModLoadingErrorDisplayException customError ; <nl> @ @ - 212 , 6 + 217 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> dupesFound = dupes ; <nl> } <nl> + catch ( Java8VersionException j8mods ) <nl> + { <nl> + j8onlymods = j8mods ; <nl> + } <nl> catch ( MissingModsException missing ) <nl> { <nl> modsMissing = missing ; <nl> @ @ - 297 , 7 + 306 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> * / <nl> public void finishMinecraftLoading ( ) <nl> { <nl> - if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null ) <nl> + if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null ) <nl> { <nl> SplashProgress . finish ( ) ; <nl> return ; <nl> @ @ - 344 , 6 + 353 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> loading = false ; <nl> client . gameSettings . loadOptions ( ) ; / / Reload options to load any mod added keybindings . <nl> + Loader . instance ( ) . loadingComplete ( ) ; <nl> + SplashProgress . finish ( ) ; <nl> } <nl> <nl> public void extendModList ( ) <nl> @ @ - 383 , 6 + 394 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; <nl> } <nl> + else if ( j8onlymods ! = null ) <nl> + { <nl> + showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; <nl> + } <nl> else if ( modsMissing ! = null ) <nl> { <nl> showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; <nl> @ @ - 401 , 10 + 416 , 16 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> else <nl> { <nl> - Loader . instance ( ) . loadingComplete ( ) ; <nl> - SplashProgress . finish ( ) ; <nl> + logMissingTextureErrors ( ) ; <nl> + if ( ! Loader . instance ( ) . java8 ) <nl> + { <nl> + if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) <nl> + { <nl> + showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> + ForgeModContainer . updateNag ( ) ; <nl> + } <nl> + } <nl> } <nl> - logMissingTextureErrors ( ) ; <nl> } <nl> / * * <nl> * Get the server instance <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> new file mode 100644 <nl> index 0000000 . . af3071d <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> @ @ - 0 , 0 + 1 , 140 @ @ <nl> + / * <nl> + * Forge Mod Loader <nl> + * Copyright ( c ) 2012 - 2013 cpw . <nl> + * All rights reserved . This program and the accompanying materials <nl> + * are made available under the terms of the GNU Lesser Public License v2 . 1 <nl> + * which accompanies this distribution , and is available at <nl> + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html <nl> + * <nl> + * Contributors : <nl> + * cpw - implementation <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . client ; <nl> + <nl> + import net . minecraft . client . gui . GuiButton ; <nl> + import net . minecraft . client . gui . GuiErrorScreen ; <nl> + import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . util . text . TextFormatting ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Java8VersionException ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + <nl> + import java . awt . * ; <nl> + import java . io . IOException ; <nl> + import java . net . URI ; <nl> + import java . util . List ; <nl> + <nl> + public class GuiJava8Error extends GuiErrorScreen <nl> + { <nl> + private Java8VersionException java8VersionException ; <nl> + public GuiJava8Error ( Java8VersionException java8VersionException ) <nl> + { <nl> + super ( null , null ) ; <nl> + this . java8VersionException = java8VersionException ; <nl> + } <nl> + <nl> + @ Override <nl> + public void initGui ( ) <nl> + { <nl> + this . buttonList . clear ( ) ; <nl> + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; <nl> + if ( java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> + { <nl> + this . buttonList . add ( new GuiButton ( 3 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; <nl> + } <nl> + else <nl> + { <nl> + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " menu . quit " ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + protected void actionPerformed ( GuiButton button ) throws IOException <nl> + { <nl> + if ( button . id = = 1 ) <nl> + { <nl> + try <nl> + { <nl> + Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Problem launching browser " ) ; <nl> + } <nl> + } <nl> + else if ( button . id = = 2 ) <nl> + { <nl> + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; <nl> + } <nl> + else if ( button . id = = 3 ) <nl> + { <nl> + FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> + { <nl> + this . drawDefaultBackground ( ) ; <nl> + int offset = 25 ; <nl> + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> + { <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + } <nl> + else <nl> + { <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + } <nl> + offset + = 15 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 10 ; <nl> + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> + { <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 15 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 10 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 5 ; <nl> + for ( ModContainer mc : java8VersionException . getMods ( ) ) <nl> + { <nl> + offset + = 10 ; <nl> + this . drawCenteredString ( this . fontRendererObj , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; <nl> + List < String > lines = Lists . newArrayList ( ) ; <nl> + for ( String line : text . split ( " \ n " ) ) <nl> + { <nl> + lines . addAll ( this . fontRendererObj . listFormattedStringToWidth ( line , this . width - this . fontRendererObj . FONT _ HEIGHT * 4 ) ) ; <nl> + } <nl> + <nl> + int maxWidth = 0 ; <nl> + for ( String line : lines ) <nl> + { <nl> + maxWidth = Math . max ( maxWidth , this . fontRendererObj . getStringWidth ( line ) ) ; <nl> + } <nl> + <nl> + for ( String line : lines ) <nl> + { <nl> + this . drawString ( this . fontRendererObj , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = this . fontRendererObj . FONT _ HEIGHT + 2 ; <nl> + } <nl> + <nl> + offset + = 15 ; <nl> + } <nl> + / / super . super <nl> + for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) <nl> + { <nl> + ( ( GuiButton ) this . buttonList . get ( i ) ) . drawButton ( this . mc , mouseX , mouseY ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> index d9e11b3 . . d73d347 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ public class DummyModContainer implements ModContainer <nl> private ModMetadata md ; <nl> private ArtifactVersion processedVersion ; <nl> private String label ; <nl> + private int classVersion ; <nl> <nl> public DummyModContainer ( ModMetadata md ) <nl> { <nl> @ @ - 213 , 4 + 214 , 16 @ @ public class DummyModContainer implements ModContainer <nl> { <nl> return null ; <nl> } <nl> + <nl> + @ Override <nl> + public void setClassVersion ( int classVersion ) <nl> + { <nl> + this . classVersion = classVersion ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getClassVersion ( ) <nl> + { <nl> + return this . classVersion ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 8452fdc . . 8cc40bf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 90 , 6 + 90 , 7 @ @ public class FMLModContainer implements ModContainer <nl> private Map < String , String > customModProperties ; <nl> private ModCandidate candidate ; <nl> private URL updateJSONUrl ; <nl> + private int classVersion ; <nl> <nl> public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) <nl> { <nl> @ @ - 699 , 4 + 700 , 16 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> return updateJSONUrl ; <nl> } <nl> + <nl> + @ Override <nl> + public void setClassVersion ( int classVersion ) <nl> + { <nl> + this . classVersion = classVersion ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getClassVersion ( ) <nl> + { <nl> + return this . classVersion ; <nl> + } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> index 783c28b . . 94c67cf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> @ @ - 214 , 4 + 214 , 16 @ @ public class InjectedModContainer implements ModContainer <nl> { <nl> return wrappedContainer . getUpdateUrl ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void setClassVersion ( int classVersion ) <nl> + { <nl> + wrappedContainer . setClassVersion ( classVersion ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getClassVersion ( ) <nl> + { <nl> + return wrappedContainer . getClassVersion ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> new file mode 100644 <nl> index 0000000 . . c9200f6 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + / * <nl> + * Forge Mod Loader <nl> + * Copyright ( c ) 2012 - 2013 cpw . <nl> + * All rights reserved . This program and the accompanying materials <nl> + * are made available under the terms of the GNU Lesser Public License v2 . 1 <nl> + * which accompanies this distribution , and is available at <nl> + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html <nl> + * <nl> + * Contributors : <nl> + * cpw - implementation <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . common ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + public class Java8VersionException extends EnhancedRuntimeException <nl> + { <nl> + private static final long serialVersionUID = 1L ; <nl> + private final List < ModContainer > mods ; <nl> + <nl> + public Java8VersionException ( List < ModContainer > mods ) <nl> + { <nl> + super ( " Mods require Java 8 " ) ; <nl> + this . mods = mods ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void printStackTrace ( WrappedPrintStream stream ) <nl> + { <nl> + stream . println ( " Mods requiring Java 8 : " ) ; <nl> + for ( ModContainer mc : mods ) <nl> + { <nl> + stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; <nl> + } <nl> + stream . println ( " " ) ; <nl> + } <nl> + <nl> + public List < ModContainer > getMods ( ) <nl> + { <nl> + return mods ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 4bca3c0 . . f4b5142 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 161 , 6 + 161 , 7 @ @ public class Loader <nl> private File forcedModFile ; <nl> private ModDiscoverer discoverer ; <nl> private ProgressBar progressBar ; <nl> + public final boolean java8 ; <nl> <nl> public static Loader instance ( ) <nl> { <nl> @ @ - 187 , 6 + 188 , 14 @ @ public class Loader <nl> <nl> private Loader ( ) <nl> { <nl> + String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; <nl> + int major = Integer . parseInt ( ver [ 1 ] ) ; <nl> + java8 = major > 7 ; <nl> + if ( ! java8 ) <nl> + { <nl> + FMLLog . severe ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; <nl> + } <nl> + <nl> modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; <nl> if ( ! mccversion . equals ( MC _ VERSION ) ) <nl> { <nl> @ @ - 489 , 6 + 498 , 7 @ @ public class Loader <nl> ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; <nl> disableRequestedMods ( ) ; <nl> modController . distributeStateMessage ( FMLLoadEvent . class ) ; <nl> + checkJavaCompatibility ( ) ; <nl> sortModList ( ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; <nl> @ @ - 543 , 6 + 553 , 24 @ @ public class Loader <nl> modController . transition ( LoaderState . PREINITIALIZATION , false ) ; <nl> } <nl> <nl> + <nl> + private void checkJavaCompatibility ( ) <nl> + { <nl> + if ( java8 ) return ; <nl> + List < ModContainer > j8mods = Lists . newArrayList ( ) ; <nl> + for ( ModContainer mc : getActiveModList ( ) ) <nl> + { <nl> + if ( mc . getClassVersion ( ) > = 52 ) <nl> + { <nl> + j8mods . add ( mc ) ; <nl> + } <nl> + } <nl> + if ( ! j8mods . isEmpty ( ) ) <nl> + { <nl> + throw new Java8VersionException ( j8mods ) ; <nl> + } <nl> + } <nl> + <nl> public void preinitializeMods ( ) <nl> { <nl> if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> index 883f8b9 . . cd82ff0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> @ @ - 152 , 4 + 152 , 8 @ @ public interface ModContainer <nl> boolean shouldLoadInEnvironment ( ) ; <nl> <nl> URL getUpdateUrl ( ) ; <nl> + <nl> + void setClassVersion ( int classVersion ) ; <nl> + <nl> + int getClassVersion ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> index 6eb8dec . . 0fd5d7d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ public class ASMDataTable <nl> private String annotationName ; <nl> private String className ; <nl> private String objectName ; <nl> + private int classVersion ; <nl> private Map < String , Object > annotationInfo ; <nl> public ASMData ( ModCandidate candidate , String annotationName , String className , String objectName , Map < String , Object > info ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> index 226ddd6 . . 77346da 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> @ @ - 83 , 6 + 83 , 7 @ @ public class JarDiscoverer implements ITypeDiscoverer <nl> table . addContainer ( container ) ; <nl> foundMods . add ( container ) ; <nl> container . bindMetadata ( mc ) ; <nl> + container . setClassVersion ( modParser . getClassVersion ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 7c35d8e . . cbdf668 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> commands . forge . usage = Use / forge < subcommand > . Subcommands are tps , track <nl> - commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . <nl> + commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . <nl> commands . forge . tps . summary = % s : Mean tick time : % d ms . Mean TPS : % d <nl> <nl> commands . forge . tracking . te . enabled = Tile Entity tracking enabled for % d seconds . <nl> @ @ - 153 , 4 + 153 , 18 @ @ fml . menu . mods . normal = Normal <nl> fml . menu . mods . search = Search : <nl> fml . menu . modoptions = Mod Options . . . <nl> <nl> - item . forge . bucketFilled . name = % s Bucket <nl> \ No newline at end of file <nl> + item . forge . bucketFilled . name = % s Bucket <nl> + <nl> + fml . messages . java8problem = % s % sJava Update Required % s <nl> + fml . messages . java8recommended = % s % sJava Update Recommended % s <nl> + fml . messages . modslistedbelow = The mods listed below % s <nl> + fml . messages . requirejava8 = require Java 8 <nl> + fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! <nl> + fml . messages . java8warning . 2 = You need to update Java <nl> + fml . messages . javaversion = Your Java version is Java % s ( version string % s ) <nl> + fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play <nl> + fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods <nl> + fml . messages . countbadandgood = % s of % s mods have this problem <nl> + <nl> + fml . button . visitjavadownloads = Oracle Java SE Downloads <nl> + fml . button . continue = Continue <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / ClientCommandHandler . java b / src / main / java / net / minecraftforge / client / ClientCommandHandler . java 
 index ff11443 . . d239ec1 100644 
 - - - a / src / main / java / net / minecraftforge / client / ClientCommandHandler . java 
 + + + b / src / main / java / net / minecraftforge / client / ClientCommandHandler . java 
 @ @ - 34 , 6 + 34 , 8 @ @ import net . minecraftforge . event . CommandEvent ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 import net . minecraft . util . text . TextComponentTranslation ; 
 import net . minecraft . util . text . TextFormatting ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + 
 import static net . minecraft . util . text . TextFormatting . * ; 
 
 / * * 
 @ @ - 109 , 7 + 111 , 7 @ @ public class ClientCommandHandler extends CommandHandler 
 catch ( Throwable t ) 
 { 
 sender . sendMessage ( format ( RED , " commands . generic . exception " ) ) ; 
 - t . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Command ' { } ' threw an exception : " , message , t ) ; 
 } 
 
 return - 1 ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java 
 index 036fdca . . f9f5ead 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java 
 @ @ - 575 , 12 + 575 , 7 @ @ public class ModelBlockAnimation 
 / / String json = mbaGson . toJson ( mba ) ; 
 return mba ; 
 } 
 - catch ( IOException e ) 
 - { 
 - FMLLog . log . error ( " Exception loading vanilla model animation { } , skipping " , armatureLocation , e ) ; 
 - return defaultModelBlockAnimation ; 
 - } 
 - catch ( JsonParseException e ) 
 + catch ( IOException | JsonParseException e ) 
 { 
 FMLLog . log . error ( " Exception loading vanilla model animation { } , skipping " , armatureLocation , e ) ; 
 return defaultModelBlockAnimation ; 
 diff - - git a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java 
 index 98724ac . . 635c365 100644 
 - - - a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java 
 + + + b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java 
 @ @ - 182 , 11 + 182 , 7 @ @ public enum KeyModifier { 
 { 
 return valueOf ( stringValue ) ; 
 } 
 - catch ( NullPointerException ignored ) 
 - { 
 - return NONE ; 
 - } 
 - catch ( IllegalArgumentException ignored ) 
 + catch ( NullPointerException | IllegalArgumentException ignored ) 
 { 
 return NONE ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 index 488f631 . . a6727e8 100644 
 - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java 
 + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 @ @ - 234 , 7 + 234 , 7 @ @ public class DimensionManager 
 } 
 catch ( Exception e ) 
 { 
 - System . err . println ( " Cannot Hotload Dim : " + e . getMessage ( ) ) ; 
 + FMLLog . log . error ( " Cannot Hotload Dim : { } " , dim , e ) ; 
 return ; / / If a provider hasn ' t been registered then we can ' t hotload the dim 
 } 
 MinecraftServer mcServer = overworld . getMinecraftServer ( ) ; 
 @ @ - 348 , 7 + 348 , 7 @ @ public class DimensionManager 
 } 
 catch ( MinecraftException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Caught an exception while saving all chunks : " , e ) ; 
 } 
 finally 
 { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index fbd5ab0 . . c09ca0b 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 421 , 7 + 421 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + log . error ( " Could not find class for name ' { } ' . " , name , e ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 index 67bcec6 . . c797758 100644 
 - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 @ @ - 124 , 7 + 124 , 7 @ @ public class MinecraftForge 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Could not find class for name ' { } ' . " , name , e ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java b / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java 
 index b1a9b2e . . d77028a 100644 
 - - - a / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java 
 + + + b / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java 
 @ @ - 64 , 9 + 64 , 7 @ @ public enum CapabilityManager 
 { 
 try { 
 return implementation . newInstance ( ) ; 
 - } catch ( InstantiationException e ) { 
 - throw Throwables . propagate ( e ) ; 
 - } catch ( IllegalAccessException e ) { 
 + } catch ( InstantiationException | IllegalAccessException e ) { 
 throw Throwables . propagate ( e ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / chunkio / ChunkIOProvider . java b / src / main / java / net / minecraftforge / common / chunkio / ChunkIOProvider . java 
 index e9aa2c1 . . d1f2d8e 100644 
 - - - a / src / main / java / net / minecraftforge / common / chunkio / ChunkIOProvider . java 
 + + + b / src / main / java / net / minecraftforge / common / chunkio / ChunkIOProvider . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . util . math . ChunkPos ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . event . world . ChunkDataEvent ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 
 import java . io . IOException ; 
 import java . util . concurrent . ConcurrentLinkedQueue ; 
 @ @ - 69 , 7 + 70 , 7 @ @ class ChunkIOProvider implements Runnable 
 } 
 catch ( IOException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Failed to load chunk async . " , e ) ; 
 } 
 
 if ( data ! = null ) 
 diff - - git a / src / main / java / net / minecraftforge / common / config / Configuration . java b / src / main / java / net / minecraftforge / common / config / Configuration . java 
 index 39f799c . . b6331a7 100644 
 - - - a / src / main / java / net / minecraftforge / common / config / Configuration . java 
 + + + b / src / main / java / net / minecraftforge / common / config / Configuration . java 
 @ @ - 50 , 6 + 50 , 7 @ @ import java . util . regex . Pattern ; 
 import com . google . common . base . CharMatcher ; 
 import com . google . common . collect . ImmutableSet ; 
 
 + import com . google . common . primitives . Floats ; 
 import net . minecraftforge . fml . client . config . GuiConfig ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; 
 @ @ - 132 , 8 + 133 , 7 @ @ public class Configuration 
 File fileBak = new File ( file . getAbsolutePath ( ) + " _ " + 
 new SimpleDateFormat ( " yyyyMMdd _ HHmmss " ) . format ( new Date ( ) ) + " . errored " ) ; 
 FMLLog . log . fatal ( " An exception occurred while loading config file { } . This file will be renamed to { } " + 
 - " and a new config file will be generated . " , file . getName ( ) , fileBak . getName ( ) ) ; 
 - e . printStackTrace ( ) ; 
 + " and a new config file will be generated . " , file . getName ( ) , fileBak . getName ( ) , e ) ; 
 
 file . renameTo ( fileBak ) ; 
 load ( ) ; 
 @ @ - 1047 , 7 + 1047 , 7 @ @ public class Configuration 
 } 
 catch ( IOException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error while loading config . " , e ) ; 
 } 
 finally 
 { 
 @ @ - 1108 , 7 + 1108 , 7 @ @ public class Configuration 
 } 
 catch ( IOException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error while saving config . " , e ) ; 
 } 
 } 
 
 @ @ - 1712 , 11 + 1712 , 12 @ @ public class Configuration 
 prop . setMaxValue ( maxValue ) ; 
 try 
 { 
 - return Float . parseFloat ( prop . getString ( ) ) < minValue ? minValue : ( Float . parseFloat ( prop . getString ( ) ) > maxValue ? maxValue : Float . parseFloat ( prop . getString ( ) ) ) ; 
 + float parseFloat = Float . parseFloat ( prop . getString ( ) ) ; 
 + return Floats . constrainToRange ( parseFloat , minValue , maxValue ) ; 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Failed to get float for { } / { } " , name , category , e ) ; 
 } 
 return defaultValue ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java 
 index ddcc7ee . . 03137a7 100644 
 - - - a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java 
 + + + b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java 
 @ @ - 162 , 7 + 162 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine 
 } 
 else 
 { 
 - System . out . println ( " Unknown special event \ " " + event . event ( ) + " \ " , ignoring " ) ; 
 + FMLLog . log . error ( " Unknown special event \ " { } \ " , ignoring . " , event . event ( ) ) ; 
 } 
 } 
 } 
 @ @ - 230 , 12 + 230 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine 
 / / System . out . println ( location + " : " + json ) ; 
 return asm ; 
 } 
 - catch ( IOException e ) 
 - { 
 - FMLLog . log . error ( " Exception loading Animation State Machine { } , skipping " , location , e ) ; 
 - return missing ; 
 - } 
 - catch ( JsonParseException e ) 
 + catch ( IOException | JsonParseException e ) 
 { 
 FMLLog . log . error ( " Exception loading Animation State Machine { } , skipping " , location , e ) ; 
 return missing ; 
 diff - - git a / src / main / java / net / minecraftforge / common / util / EnumHelper . java b / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 index 8bdbcb5 . . 7d2e30c 100644 
 - - - a / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 @ @ - 159 , 7 + 159 , 7 @ @ public class EnumHelper 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error setting up EnumHelper . " , e ) ; 
 } 
 
 isSetup = true ; 
 @ @ - 385 , 8 + 385 , 8 @ @ public class EnumHelper 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 - throw new RuntimeException ( e . getMessage ( ) , e ) ; 
 + FMLLog . log . error ( " Error adding enum with EnumHelper . " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 15d6465 . . 407ed25 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 108 , 7 + 108 , 6 @ @ import net . minecraftforge . fml . common . toposort . ModSortingException ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 import net . minecraftforge . registries . GameData ; 
 
 - import org . apache . commons . io . IOUtils ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . lwjgl . LWJGLUtil ; 
 @ @ - 300 , 17 + 299 , 12 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 Class < ? > optifineConfig = Class . forName ( " Config " , false , Loader . instance ( ) . getModClassLoader ( ) ) ; 
 String optifineVersion = ( String ) optifineConfig . getField ( " VERSION " ) . get ( null ) ; 
 Map < String , Object > dummyOptifineMeta = ImmutableMap . < String , Object > builder ( ) . put ( " name " , " Optifine " ) . put ( " version " , optifineVersion ) . build ( ) ; 
 - InputStream optifineModInfoInputStream = getClass ( ) . getResourceAsStream ( " optifinemod . info " ) ; 
 - try 
 + try ( InputStream optifineModInfoInputStream = getClass ( ) . getResourceAsStream ( " optifinemod . info " ) ) 
 { 
 ModMetadata optifineMetadata = MetadataCollection . from ( optifineModInfoInputStream , " optifine " ) . getMetadataForId ( " optifine " , dummyOptifineMeta ) ; 
 optifineContainer = new DummyModContainer ( optifineMetadata ) ; 
 FMLLog . log . info ( " Forge Mod Loader has detected optifine { } , enabling compatibility features " , optifineContainer . getVersion ( ) ) ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( optifineModInfoInputStream ) ; 
 - } 
 } 
 catch ( Exception e ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 index ca69fa7 . . 278e53c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 @ @ - 148 , 21 + 148 , 15 @ @ public class SplashProgress 
 if ( ! parent . exists ( ) ) 
 parent . mkdirs ( ) ; 
 
 - FileReader r = null ; 
 config = new Properties ( ) ; 
 - try 
 + try ( FileReader r = new FileReader ( configFile ) ) 
 { 
 - r = new FileReader ( configFile ) ; 
 config . load ( r ) ; 
 } 
 catch ( IOException e ) 
 { 
 FMLLog . log . info ( " Could not load splash . properties , will create a default one " ) ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( r ) ; 
 - } 
 
 / / Some system do not support this and have weird effects so we need to detect and disable by default . 
 / / The user can always force enable it if they want to take the responsibility for bugs . 
 @ @ - 191 , 20 + 185 , 14 @ @ public class SplashProgress 
 
 File miscPackFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , getString ( " resourcePackPath " , " resources " ) ) ; 
 
 - FileWriter w = null ; 
 - try 
 + try ( FileWriter w = new FileWriter ( configFile ) ) 
 { 
 - w = new FileWriter ( configFile ) ; 
 config . store ( w , " Splash screen properties " ) ; 
 } 
 catch ( IOException e ) 
 { 
 FMLLog . log . error ( " Could not save the splash . properties file " , e ) ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( w ) ; 
 - } 
 
 miscPack = createResourcePack ( miscPackFile ) ; 
 
 @ @ - 240 , 7 + 228 , 7 @ @ public class SplashProgress 
 } 
 catch ( LWJGLException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error starting SplashProgress : " , e ) ; 
 disableSplash ( e ) ; 
 } 
 
 @ @ - 537 , 7 + 525 , 7 @ @ public class SplashProgress 
 } 
 catch ( LWJGLException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error setting GL context : " , e ) ; 
 throw new RuntimeException ( e ) ; 
 } 
 glClearColor ( ( float ) ( ( backgroundColor > > 16 ) & 0xFF ) / 0xFF , ( float ) ( ( backgroundColor > > 8 ) & 0xFF ) / 0xFF , ( float ) ( backgroundColor & 0xFF ) / 0xFF , 1 ) ; 
 @ @ - 564 , 7 + 552 , 7 @ @ public class SplashProgress 
 } 
 catch ( LWJGLException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error releasing GL context : " , e ) ; 
 throw new RuntimeException ( e ) ; 
 } 
 finally 
 @ @ - 629 , 7 + 617 , 7 @ @ public class SplashProgress 
 } 
 catch ( LWJGLException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error setting GL context : " , e ) ; 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 @ @ - 650 , 7 + 638 , 7 @ @ public class SplashProgress 
 } 
 catch ( LWJGLException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error releasing GL context : " , e ) ; 
 throw new RuntimeException ( e ) ; 
 } 
 lock . unlock ( ) ; 
 @ @ - 672 , 7 + 660 , 7 @ @ public class SplashProgress 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error finishing SplashProgress : " , e ) ; 
 disableSplash ( e ) ; 
 } 
 } 
 @ @ - 719 , 10 + 707 , 8 @ @ public class SplashProgress 
 enabled = false ; 
 config . setProperty ( " enabled " , " false " ) ; 
 
 - FileWriter w = null ; 
 - try 
 + try ( FileWriter w = new FileWriter ( configFile ) ) 
 { 
 - w = new FileWriter ( configFile ) ; 
 config . store ( w , " Splash screen properties " ) ; 
 } 
 catch ( IOException e ) 
 @ @ - 730 , 10 + 716 , 6 @ @ public class SplashProgress 
 FMLLog . log . error ( " Could not save the splash . properties file " , e ) ; 
 return false ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( w ) ; 
 - } 
 return true ; 
 } 
 
 @ @ - 837 , 7 + 819 , 7 @ @ public class SplashProgress 
 } 
 catch ( IOException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error reading texture from file : { } " , location , e ) ; 
 throw new RuntimeException ( e ) ; 
 } 
 finally 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java 
 index f7f21ec . . d9855f2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; 
 import net . minecraftforge . fml . client . event . ConfigChangedEvent ; 
 import net . minecraftforge . fml . client . event . ConfigChangedEvent . OnConfigChangedEvent ; 
 import net . minecraftforge . fml . client . event . ConfigChangedEvent . PostConfigChangedEvent ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . eventhandler . Event . Result ; 
 
 @ @ - 344 , 7 + 345 , 7 @ @ public class GuiConfig extends GuiScreen 
 } 
 catch ( Throwable e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error performing GuiConfig action : " , e ) ; 
 } 
 
 if ( flag ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java 
 index 493f65f . . 00edd26 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java 
 @ @ - 128 , 8 + 128 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 } 
 catch ( Throwable e ) 
 { 
 - FMLLog . log . fatal ( " There was a critical error instantiating the custom IConfigEntry for config element { } . " , configElement . getName ( ) ) ; 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " There was a critical error instantiating the custom IConfigEntry for config element { } . " , configElement . getName ( ) , e ) ; 
 } 
 else if ( configElement . isProperty ( ) ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiEditArray . java b / src / main / java / net / minecraftforge / fml / client / config / GuiEditArray . java 
 index 76b9b5b . . 201bdd4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiEditArray . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiEditArray . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraft . util . text . TextFormatting ; 
 import static net . minecraftforge . fml . client . config . GuiUtils . RESET _ CHAR ; 
 import static net . minecraftforge . fml . client . config . GuiUtils . UNDO _ CHAR ; 
 
 + import net . minecraftforge . fml . common . FMLLog ; 
 import org . lwjgl . input . Keyboard ; 
 
 / * * 
 @ @ - 128 , 7 + 129 , 7 @ @ public class GuiEditArray extends GuiScreen 
 } 
 catch ( Throwable e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error performing GuiEditArray action : " , e ) ; 
 } 
 this . mc . displayGuiScreen ( this . parentScreen ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiSelectString . java b / src / main / java / net / minecraftforge / fml / client / config / GuiSelectString . java 
 index 154fe04 . . b8cc51c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiSelectString . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiSelectString . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import net . minecraft . client . gui . GuiButton ; 
 import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . client . resources . I18n ; 
 import net . minecraft . util . text . TextFormatting ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 
 import static net . minecraftforge . fml . client . config . GuiUtils . RESET _ CHAR ; 
 import static net . minecraftforge . fml . client . config . GuiUtils . UNDO _ CHAR ; 
 @ @ - 128 , 7 + 129 , 7 @ @ public class GuiSelectString extends GuiScreen 
 } 
 catch ( Throwable e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error performing GuiSelectString action : " , e ) ; 
 } 
 this . mc . displayGuiScreen ( this . parentScreen ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index 8d1d839 . . a8f7408 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 700 , 11 + 700 , 7 @ @ public class FMLCommonHandler 
 task . run ( ) ; 
 task . get ( ) ; / / Forces the exception to be thrown if any 
 } 
 - catch ( InterruptedException e ) 
 - { 
 - FMLLog . log . fatal ( " Exception caught executing FutureTask : { } " , e . toString ( ) , e ) ; 
 - } 
 - catch ( ExecutionException e ) 
 + catch ( InterruptedException | ExecutionException e ) 
 { 
 FMLLog . log . fatal ( " Exception caught executing FutureTask : { } " , e . toString ( ) , e ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 07e490e . . 8a4cef5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 320 , 15 + 320 , 10 @ @ public class FMLModContainer implements ModContainer 
 if ( propsFile . exists ( ) & & propsFile . isFile ( ) ) 
 { 
 version = new Properties ( ) ; 
 - FileInputStream fis = new FileInputStream ( propsFile ) ; 
 - try 
 + try ( FileInputStream fis = new FileInputStream ( propsFile ) ) 
 { 
 version . load ( fis ) ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( fis ) ; 
 - } 
 } 
 } 
 return version ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriptionTransformer . java b / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriptionTransformer . java 
 index 235efe4 . . ab3c8d4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriptionTransformer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriptionTransformer . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import static org . objectweb . asm . Type . BOOLEAN _ TYPE ; 
 import static org . objectweb . asm . Type . getMethodDescriptor ; 
 
 import net . minecraft . launchwrapper . IClassTransformer ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . eventhandler . Event ; 
 
 import org . objectweb . asm . ClassReader ; 
 @ @ - 92 , 7 + 93 , 7 @ @ public class EventSubscriptionTransformer implements IClassTransformer 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error building events . " , e ) ; 
 } 
 
 return bytes ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / transformers / deobf / FMLDeobfuscatingRemapper . java b / src / main / java / net / minecraftforge / fml / common / asm / transformers / deobf / FMLDeobfuscatingRemapper . java 
 index 188a21a . . e4c775e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / asm / transformers / deobf / FMLDeobfuscatingRemapper . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / asm / transformers / deobf / FMLDeobfuscatingRemapper . java 
 @ @ - 430 , 7 + 430 , 7 @ @ public class FMLDeobfuscatingRemapper extends Remapper { 
 } 
 catch ( IOException e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error getting patched resource : " , e ) ; 
 } 
 } 
 public void mergeSuperMaps ( String name , @ Nullable String superName , String [ ] interfaces ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 index 4f67497 . . 4fd756e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 @ @ - 46 , 25 + 46 , 17 @ @ public class JarDiscoverer implements ITypeDiscoverer 
 { 
 List < ModContainer > foundMods = Lists . newArrayList ( ) ; 
 FMLLog . log . debug ( " Examining file { } for potential mods " , candidate . getModContainer ( ) . getName ( ) ) ; 
 - JarFile jar = null ; 
 - try 
 + try ( JarFile jar = new JarFile ( candidate . getModContainer ( ) ) ) 
 { 
 - jar = new JarFile ( candidate . getModContainer ( ) ) ; 
 - 
 ZipEntry modInfo = jar . getEntry ( " mcmod . info " ) ; 
 MetadataCollection mc = null ; 
 if ( modInfo ! = null ) 
 { 
 FMLLog . log . trace ( " Located mcmod . info file in file { } " , candidate . getModContainer ( ) . getName ( ) ) ; 
 - InputStream inputStream = jar . getInputStream ( modInfo ) ; 
 - try 
 + try ( InputStream inputStream = jar . getInputStream ( modInfo ) ) 
 { 
 mc = MetadataCollection . from ( inputStream , candidate . getModContainer ( ) . getName ( ) ) ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( inputStream ) ; 
 - } 
 } 
 else 
 { 
 @ @ - 83 , 15 + 75 , 10 @ @ public class JarDiscoverer implements ITypeDiscoverer 
 ASMModParser modParser ; 
 try 
 { 
 - InputStream inputStream = jar . getInputStream ( ze ) ; 
 - try 
 + try ( InputStream inputStream = jar . getInputStream ( ze ) ) 
 { 
 modParser = new ASMModParser ( inputStream ) ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( inputStream ) ; 
 - } 
 candidate . addClassEntry ( ze . getName ( ) ) ; 
 } 
 catch ( LoaderException e ) 
 @ @ - 117 , 10 + 104 , 6 @ @ public class JarDiscoverer implements ITypeDiscoverer 
 { 
 FMLLog . log . warn ( " Zip file { } failed to read properly , it will be ignored " , candidate . getModContainer ( ) . getName ( ) , e ) ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( jar ) ; 
 - } 
 return foundMods ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 index d47f684 . . 5305f5f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 @ @ - 116 , 7 + 116 , 7 @ @ public class EventBus implements IEventExceptionHandler 
 } 
 catch ( NoSuchMethodException e ) 
 { 
 - ; 
 + FMLLog . log . error ( " Could not find method ' { } ' on class ' { } ' " , method . getName ( ) , cls ) ; 
 } 
 } 
 } 
 @ @ - 160 , 7 + 160 , 7 @ @ public class EventBus implements IEventExceptionHandler 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error registering event handler : { } { } { } " , owner , eventType , method , e ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / launcher / FMLDeobfTweaker . java b / src / main / java / net / minecraftforge / fml / common / launcher / FMLDeobfTweaker . java 
 index f81802f . . 076979f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / launcher / FMLDeobfTweaker . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / launcher / FMLDeobfTweaker . java 
 @ @ - 62 , 7 + 62 , 7 @ @ public class FMLDeobfTweaker implements ITweaker { 
 catch ( Exception e ) 
 { 
 / / Load in the Loader , make sure he ' s ready to roll - this will initialize most of the rest of minecraft here 
 - System . out . println ( " A CRITICAL PROBLEM OCCURRED INITIALIZING MINECRAFT - LIKELY YOU HAVE AN INCORRECT VERSION FOR THIS FML " ) ; 
 + FMLLog . log . fatal ( " A CRITICAL PROBLEM OCCURRED INITIALIZING MINECRAFT - LIKELY YOU HAVE AN INCORRECT VERSION FOR THIS FML " ) ; 
 throw new RuntimeException ( e ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java b / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java 
 index b104a5a . . aa569dc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java 
 @ @ - 127 , 14 + 127 , 9 @ @ public class GenDiffSet { 
 return new byte [ 0 ] ; 
 } 
 
 - InputStream sourceZipInputStream = sourceZip . getInputStream ( entry ) ; 
 - try 
 + try ( InputStream sourceZipInputStream = sourceZip . getInputStream ( entry ) ) 
 { 
 return ByteStreams . toByteArray ( sourceZipInputStream ) ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( sourceZipInputStream ) ; 
 - } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java 
 index 6eab2f6 . . 86cb625 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / EntityEntry . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityList ; 
 import net . minecraft . entity . EntityList . EntityEggInfo ; 
 import net . minecraft . world . World ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . registries . IForgeRegistryEntry . Impl ; 
 
 public class EntityEntry extends Impl < EntityEntry > 
 @ @ - 79 , 7 + 80 , 7 @ @ public class EntityEntry extends Impl < EntityEntry > 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . error ( " Error creating entity . " , e ) ; 
 return null ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 index 9d717ee . . a78b9ac 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 @ @ - 312 , 10 + 312 , 10 @ @ public class CoreModManager { 
 Object crashreport = crashreportclass . getMethod ( " a " , Throwable . class , String . class ) . invoke ( null , re , " FML has discovered extracted jar files in the mods directory . \ nThis breaks mod loading functionality completely . \ nRemove the directories and replace with the jar files originally provided . " ) ; 
 File crashreportfile = new File ( new File ( coreMods . getParentFile ( ) , " crash - reports " ) , String . format ( " fml - crash - % 1 $ tY - % 1 $ tm - % 1 $ td _ % 1 $ tH . % 1 $ tM . % 1 $ tS . txt " , Calendar . getInstance ( ) ) ) ; 
 crashreportclass . getMethod ( " a " , File . class ) . invoke ( crashreport , crashreportfile ) ; 
 - System . out . println ( " # @ ! @ # FML has crashed the game deliberately . Crash report saved to : # @ ! @ # " + crashreportfile . getAbsolutePath ( ) ) ; 
 + FMLLog . log . fatal ( " # @ ! @ # FML has crashed the game deliberately . Crash report saved to : # @ ! @ # { } " , crashreportfile . getAbsolutePath ( ) ) ; 
 } catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log . fatal ( " # @ ! @ # FML has crashed while generating a crash report , please report this . # @ ! @ # " , e ) ; 
 / / NOOP - hopefully 
 } 
 throw re ; 
 @ @ - 466 , 19 + 466 , 12 @ @ public class CoreModManager { 
 try 
 { 
 Files . createParentDirs ( target ) ; 
 - FileOutputStream targetOutputStream = null ; 
 - InputStream jarInputStream = null ; 
 - try 
 - { 
 - targetOutputStream = new FileOutputStream ( target ) ; 
 - jarInputStream = jar . getInputStream ( jarEntry ) ; 
 + try ( 
 + FileOutputStream targetOutputStream = new FileOutputStream ( target ) ; 
 + InputStream jarInputStream = jar . getInputStream ( jarEntry ) ; 
 + ) { 
 ByteStreams . copy ( jarInputStream , targetOutputStream ) ; 
 } 
 - finally 
 - { 
 - IOUtils . closeQuietly ( targetOutputStream ) ; 
 - IOUtils . closeQuietly ( jarInputStream ) ; 
 - } 
 FMLLog . log . debug ( " Extracted ContainedDep { } from { } to { } " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; 
 result . put ( dep , target ) ; 
 } catch ( IOException e )

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 index 4ffa6d8 . . 22dec2e 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 38 , 7 + 38 , 16 @ @ 
 if ( p _ 146284 _ 1 _ . field _ 146127 _ k = = 11 ) 
 { 
 this . field _ 146297 _ k . func _ 71371 _ a ( " Demo _ World " , " Demo _ World " , DemoWorldServer . field _ 73071 _ a ) ; 
 - @ @ - 512 , 7 + 521 , 16 @ @ 
 + @ @ - 493 , 6 + 502 , 8 @ @ 
 + this . func _ 73729 _ b ( j + 155 , k + 0 , 0 , 45 , 155 , 44 ) ; 
 + } 
 + 
 + + this . field _ 73975 _ c = net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m , this . field _ 73975 _ c ) ; 
 + + 
 + GlStateManager . func _ 179094 _ E ( ) ; 
 + GlStateManager . func _ 179109 _ b ( ( float ) ( this . field _ 146294 _ l / 2 + 90 ) , 70 . 0F , 0 . 0F ) ; 
 + GlStateManager . func _ 179114 _ b ( - 20 . 0F , 0 . 0F , 0 . 0F , 1 . 0F ) ; 
 + @ @ - 512 , 7 + 523 , 15 @ @ 
 s = s + ( " release " . equalsIgnoreCase ( this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ? " " : " / " + this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ; 
 } 
 
 @ @ - 52 , 11 + 61 , 10 @ @ 
 + this . func _ 73731 _ b ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + brdline * ( this . field _ 146289 _ q . field _ 78288 _ b + 1 ) ) , 16777215 ) ; 
 + } 
 + } 
 - + net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m ) ; 
 String s1 = " Copyright Mojang AB . Do not distribute ! " ; 
 this . func _ 73731 _ b ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . func _ 78256 _ a ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; 
 
 - @ @ - 529 , 6 + 547 , 7 @ @ 
 + @ @ - 529 , 6 + 548 , 7 @ @ 
 { 
 this . field _ 183503 _ M . func _ 73863 _ a ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ , p _ 73863 _ 3 _ ) ; 
 } 
 @ @ - 64 , 3 + 72 , 12 @ @ 
 } 
 
 protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException 
 + @ @ - 549 , 6 + 569 , 8 @ @ 
 + { 
 + this . field _ 183503 _ M . func _ 73864 _ a ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ ) ; 
 + } 
 + + 
 + + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; 
 + } 
 + 
 + public void func _ 146281 _ b ( ) 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 9f628dd . . a0b6050 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import static org . lwjgl . opengl . GL20 . * ; 
 
 import java . nio . ByteBuffer ; 
 import java . nio . FloatBuffer ; 
 + import java . util . Collections ; 
 import java . util . Map ; 
 
 import javax . vecmath . Matrix3f ; 
 @ @ - 89 , 8 + 90 , 12 @ @ import net . minecraftforge . common . model . IModelPart ; 
 import net . minecraftforge . common . model . ITransformation ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 + import net . minecraftforge . fml . client . GuiJava8Error ; 
 import net . minecraftforge . fml . client . registry . ClientRegistry ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Java8VersionException ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 import org . lwjgl . BufferUtils ; 
 @ @ - 266 , 7 + 271 , 8 @ @ public class ForgeHooksClient 
 / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; 
 } 
 
 - public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) 
 + private static int updatescrollcounter = 0 ; 
 + public static String renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height , String splashText ) 
 { 
 Status status = ForgeVersion . getStatus ( ) ; 
 if ( status = = BETA | | status = = BETA _ OUTDATED ) 
 @ @ - 278 , 6 + 284 , 17 @ @ public class ForgeHooksClient 
 gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 } 
 
 + if ( ! Loader . instance ( ) . java8 ) 
 + { 
 + String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + line = I18n . format ( " fml . messages . java8warning . 2 " ) ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; 
 + updatescrollcounter + = 1 ; 
 + updatescrollcounter % = 100 ; 
 + } 
 + 
 String line = null ; 
 switch ( status ) 
 { 
 @ @ - 294 , 6 + 311 , 24 @ @ public class ForgeHooksClient 
 / / if we have a line , render it in the bottom right , above Mojang ' s copyright line 
 gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 } 
 + 
 + return splashText ; 
 + } 
 + 
 + public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) 
 + { 
 + if ( ! Loader . instance ( ) . java8 ) 
 + { 
 + if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) 
 + { 
 + int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; 
 + w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; 
 + if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) 
 + { 
 + FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 + } 
 + } 
 + } 
 } 
 
 public static ISound playSound ( SoundManager manager , ISound sound ) 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index d4a61a4 . . b18562c 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 + import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 74 , 6 + 75 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean defaultHasSpawnFuzz = true ; 
 public static boolean forgeLightPipelineEnabled = true ; 
 public static boolean replaceVanillaBucketModel = true ; 
 + public static long java8Reminder = 0 ; 
 
 private static Configuration config ; 
 private static ForgeModContainer INSTANCE ; 
 @ @ - 259 , 6 + 261 , 11 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 replaceVanillaBucketModel = prop . getBoolean ( Boolean . FALSE ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 + prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder , 
 + " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; 
 + java8Reminder = prop . getLong ( java8Reminder ) ; 
 + propOrder . add ( prop . getName ( ) ) ; 
 + 
 config . setCategoryPropertyOrder ( CATEGORY _ CLIENT , propOrder ) ; 
 
 if ( config . hasChanged ( ) ) 
 @ @ - 267 , 6 + 274 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 } 
 } 
 
 + public static void updateNag ( ) 
 + { 
 + Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; 
 + prop . set ( ( new Date ( ) ) . getTime ( ) ) ; 
 + config . save ( ) ; 
 + } 
 + 
 / * * 
 * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . 
 * This implementation uses the optional configID string to handle multiple Configurations using one event handler . 
 diff - - git a / src / main / java / net / minecraftforge / common / config / Property . java b / src / main / java / net / minecraftforge / common / config / Property . java 
 index db85afe . . d42bbad 100644 
 - - - a / src / main / java / net / minecraftforge / common / config / Property . java 
 + + + b / src / main / java / net / minecraftforge / common / config / Property . java 
 @ @ - 680 , 14 + 680 , 7 @ @ public class Property 
 * / 
 public int getInt ( ) 
 { 
 - try 
 - { 
 - return Integer . parseInt ( value ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - return Integer . parseInt ( defaultValue ) ; 
 - } 
 + return getInt ( Integer . parseInt ( defaultValue ) ) ; 
 } 
 
 / * * 
 @ @ - 728 , 6 + 721 , 54 @ @ public class Property 
 } 
 
 / * * 
 + * Returns the value in this property as a long , 
 + * if the value is not a valid long , it will return the initially provided default . 
 + * 
 + * @ return The value 
 + * / 
 + public long getLong ( ) 
 + { 
 + return getLong ( Long . parseLong ( defaultValue ) ) ; 
 + } 
 + 
 + / * * 
 + * Returns the value in this property as a long , 
 + * if the value is not a valid long , it will return the 
 + * provided default . 
 + * 
 + * @ param _ default The default to provide if the current value is not a validlong 
 + * @ return The value 
 + * / 
 + public long getLong ( long _ default ) 
 + { 
 + try 
 + { 
 + return Long . parseLong ( value ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + return _ default ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks if the current value stored in this property can be converted to a long . 
 + * @ return True if the type of the Property is an Long 
 + * / 
 + public boolean isLongValue ( ) 
 + { 
 + try 
 + { 
 + Long . parseLong ( value ) ; 
 + return true ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the value in this property as a boolean , 
 * if the value is not a valid boolean , it will return the 
 * provided default . 
 @ @ - 1148 , 6 + 1189 , 7 @ @ public class Property 
 this . setValues ( values ) ; 
 } 
 public void set ( int value ) { set ( Integer . toString ( value ) ) ; } 
 + public void set ( long value ) { set ( Long . toString ( value ) ) ; } 
 public void set ( boolean value ) { set ( Boolean . toString ( value ) ) ; } 
 public void set ( double value ) { set ( Double . toString ( value ) ) ; } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 19e8d0b . . 87019d1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 + import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 @ @ - 69 , 6 + 70 , 7 @ @ import net . minecraft . util . StringUtils ; 
 import net . minecraft . world . WorldSettings ; 
 import net . minecraft . world . storage . SaveFormatComparator ; 
 import net . minecraft . world . storage . SaveFormatOld ; 
 + import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . fml . client . registry . RenderingRegistry ; 
 import net . minecraftforge . fml . common . DummyModContainer ; 
 import net . minecraftforge . fml . common . DuplicateModsFoundException ; 
 @ @ - 76 , 6 + 78 , 7 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLContainerHolder ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . IFMLSidedHandler ; 
 + import net . minecraftforge . fml . common . Java8VersionException ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderException ; 
 import net . minecraftforge . fml . common . MetadataCollection ; 
 @ @ - 158 , 6 + 161 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private boolean loading = true ; 
 
 + private Java8VersionException j8onlymods ; 
 + 
 private WrongMinecraftVersionException wrongMC ; 
 
 private CustomModLoadingErrorDisplayException customError ; 
 @ @ - 212 , 6 + 217 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 dupesFound = dupes ; 
 } 
 + catch ( Java8VersionException j8mods ) 
 + { 
 + j8onlymods = j8mods ; 
 + } 
 catch ( MissingModsException missing ) 
 { 
 modsMissing = missing ; 
 @ @ - 297 , 7 + 306 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 * / 
 public void finishMinecraftLoading ( ) 
 { 
 - if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null ) 
 + if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null ) 
 { 
 SplashProgress . finish ( ) ; 
 return ; 
 @ @ - 344 , 6 + 353 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 loading = false ; 
 client . gameSettings . loadOptions ( ) ; / / Reload options to load any mod added keybindings . 
 + Loader . instance ( ) . loadingComplete ( ) ; 
 + SplashProgress . finish ( ) ; 
 } 
 
 public void extendModList ( ) 
 @ @ - 383 , 6 + 394 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; 
 } 
 + else if ( j8onlymods ! = null ) 
 + { 
 + showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; 
 + } 
 else if ( modsMissing ! = null ) 
 { 
 showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; 
 @ @ - 401 , 10 + 416 , 16 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 else 
 { 
 - Loader . instance ( ) . loadingComplete ( ) ; 
 - SplashProgress . finish ( ) ; 
 + logMissingTextureErrors ( ) ; 
 + if ( ! Loader . instance ( ) . java8 ) 
 + { 
 + if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) 
 + { 
 + showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 + ForgeModContainer . updateNag ( ) ; 
 + } 
 + } 
 } 
 - logMissingTextureErrors ( ) ; 
 } 
 / * * 
 * Get the server instance 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 new file mode 100644 
 index 0000000 . . af3071d 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 @ @ - 0 , 0 + 1 , 140 @ @ 
 + / * 
 + * Forge Mod Loader 
 + * Copyright ( c ) 2012 - 2013 cpw . 
 + * All rights reserved . This program and the accompanying materials 
 + * are made available under the terms of the GNU Lesser Public License v2 . 1 
 + * which accompanies this distribution , and is available at 
 + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html 
 + * 
 + * Contributors : 
 + * cpw - implementation 
 + * / 
 + 
 + package net . minecraftforge . fml . client ; 
 + 
 + import net . minecraft . client . gui . GuiButton ; 
 + import net . minecraft . client . gui . GuiErrorScreen ; 
 + import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . util . text . TextFormatting ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Java8VersionException ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import org . apache . logging . log4j . Level ; 
 + 
 + import com . google . common . collect . Lists ; 
 + 
 + import java . awt . * ; 
 + import java . io . IOException ; 
 + import java . net . URI ; 
 + import java . util . List ; 
 + 
 + public class GuiJava8Error extends GuiErrorScreen 
 + { 
 + private Java8VersionException java8VersionException ; 
 + public GuiJava8Error ( Java8VersionException java8VersionException ) 
 + { 
 + super ( null , null ) ; 
 + this . java8VersionException = java8VersionException ; 
 + } 
 + 
 + @ Override 
 + public void initGui ( ) 
 + { 
 + this . buttonList . clear ( ) ; 
 + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; 
 + if ( java8VersionException . getMods ( ) . isEmpty ( ) ) 
 + { 
 + this . buttonList . add ( new GuiButton ( 3 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; 
 + } 
 + else 
 + { 
 + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " menu . quit " ) ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + protected void actionPerformed ( GuiButton button ) throws IOException 
 + { 
 + if ( button . id = = 1 ) 
 + { 
 + try 
 + { 
 + Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Problem launching browser " ) ; 
 + } 
 + } 
 + else if ( button . id = = 2 ) 
 + { 
 + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; 
 + } 
 + else if ( button . id = = 3 ) 
 + { 
 + FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 + { 
 + this . drawDefaultBackground ( ) ; 
 + int offset = 25 ; 
 + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 + { 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + } 
 + else 
 + { 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + } 
 + offset + = 15 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 10 ; 
 + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 + { 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 15 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 10 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 5 ; 
 + for ( ModContainer mc : java8VersionException . getMods ( ) ) 
 + { 
 + offset + = 10 ; 
 + this . drawCenteredString ( this . fontRendererObj , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 + } 
 + } 
 + else 
 + { 
 + String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; 
 + List < String > lines = Lists . newArrayList ( ) ; 
 + for ( String line : text . split ( " \ n " ) ) 
 + { 
 + lines . addAll ( this . fontRendererObj . listFormattedStringToWidth ( line , this . width - this . fontRendererObj . FONT _ HEIGHT * 4 ) ) ; 
 + } 
 + 
 + int maxWidth = 0 ; 
 + for ( String line : lines ) 
 + { 
 + maxWidth = Math . max ( maxWidth , this . fontRendererObj . getStringWidth ( line ) ) ; 
 + } 
 + 
 + for ( String line : lines ) 
 + { 
 + this . drawString ( this . fontRendererObj , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; 
 + offset + = this . fontRendererObj . FONT _ HEIGHT + 2 ; 
 + } 
 + 
 + offset + = 15 ; 
 + } 
 + / / super . super 
 + for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) 
 + { 
 + ( ( GuiButton ) this . buttonList . get ( i ) ) . drawButton ( this . mc , mouseX , mouseY ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 index d9e11b3 . . d73d347 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 @ @ - 32 , 6 + 32 , 7 @ @ public class DummyModContainer implements ModContainer 
 private ModMetadata md ; 
 private ArtifactVersion processedVersion ; 
 private String label ; 
 + private int classVersion ; 
 
 public DummyModContainer ( ModMetadata md ) 
 { 
 @ @ - 213 , 4 + 214 , 16 @ @ public class DummyModContainer implements ModContainer 
 { 
 return null ; 
 } 
 + 
 + @ Override 
 + public void setClassVersion ( int classVersion ) 
 + { 
 + this . classVersion = classVersion ; 
 + } 
 + 
 + @ Override 
 + public int getClassVersion ( ) 
 + { 
 + return this . classVersion ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 8452fdc . . 8cc40bf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 90 , 6 + 90 , 7 @ @ public class FMLModContainer implements ModContainer 
 private Map < String , String > customModProperties ; 
 private ModCandidate candidate ; 
 private URL updateJSONUrl ; 
 + private int classVersion ; 
 
 public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) 
 { 
 @ @ - 699 , 4 + 700 , 16 @ @ public class FMLModContainer implements ModContainer 
 { 
 return updateJSONUrl ; 
 } 
 + 
 + @ Override 
 + public void setClassVersion ( int classVersion ) 
 + { 
 + this . classVersion = classVersion ; 
 + } 
 + 
 + @ Override 
 + public int getClassVersion ( ) 
 + { 
 + return this . classVersion ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 index 783c28b . . 94c67cf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 @ @ - 214 , 4 + 214 , 16 @ @ public class InjectedModContainer implements ModContainer 
 { 
 return wrappedContainer . getUpdateUrl ( ) ; 
 } 
 + 
 + @ Override 
 + public void setClassVersion ( int classVersion ) 
 + { 
 + wrappedContainer . setClassVersion ( classVersion ) ; 
 + } 
 + 
 + @ Override 
 + public int getClassVersion ( ) 
 + { 
 + return wrappedContainer . getClassVersion ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 new file mode 100644 
 index 0000000 . . c9200f6 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + / * 
 + * Forge Mod Loader 
 + * Copyright ( c ) 2012 - 2013 cpw . 
 + * All rights reserved . This program and the accompanying materials 
 + * are made available under the terms of the GNU Lesser Public License v2 . 1 
 + * which accompanies this distribution , and is available at 
 + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html 
 + * 
 + * Contributors : 
 + * cpw - implementation 
 + * / 
 + 
 + package net . minecraftforge . fml . common ; 
 + 
 + import java . util . List ; 
 + 
 + public class Java8VersionException extends EnhancedRuntimeException 
 + { 
 + private static final long serialVersionUID = 1L ; 
 + private final List < ModContainer > mods ; 
 + 
 + public Java8VersionException ( List < ModContainer > mods ) 
 + { 
 + super ( " Mods require Java 8 " ) ; 
 + this . mods = mods ; 
 + } 
 + 
 + @ Override 
 + protected void printStackTrace ( WrappedPrintStream stream ) 
 + { 
 + stream . println ( " Mods requiring Java 8 : " ) ; 
 + for ( ModContainer mc : mods ) 
 + { 
 + stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; 
 + } 
 + stream . println ( " " ) ; 
 + } 
 + 
 + public List < ModContainer > getMods ( ) 
 + { 
 + return mods ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 4bca3c0 . . f4b5142 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 161 , 6 + 161 , 7 @ @ public class Loader 
 private File forcedModFile ; 
 private ModDiscoverer discoverer ; 
 private ProgressBar progressBar ; 
 + public final boolean java8 ; 
 
 public static Loader instance ( ) 
 { 
 @ @ - 187 , 6 + 188 , 14 @ @ public class Loader 
 
 private Loader ( ) 
 { 
 + String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; 
 + int major = Integer . parseInt ( ver [ 1 ] ) ; 
 + java8 = major > 7 ; 
 + if ( ! java8 ) 
 + { 
 + FMLLog . severe ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; 
 + } 
 + 
 modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; 
 if ( ! mccversion . equals ( MC _ VERSION ) ) 
 { 
 @ @ - 489 , 6 + 498 , 7 @ @ public class Loader 
 ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; 
 disableRequestedMods ( ) ; 
 modController . distributeStateMessage ( FMLLoadEvent . class ) ; 
 + checkJavaCompatibility ( ) ; 
 sortModList ( ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; 
 @ @ - 543 , 6 + 553 , 24 @ @ public class Loader 
 modController . transition ( LoaderState . PREINITIALIZATION , false ) ; 
 } 
 
 + 
 + private void checkJavaCompatibility ( ) 
 + { 
 + if ( java8 ) return ; 
 + List < ModContainer > j8mods = Lists . newArrayList ( ) ; 
 + for ( ModContainer mc : getActiveModList ( ) ) 
 + { 
 + if ( mc . getClassVersion ( ) > = 52 ) 
 + { 
 + j8mods . add ( mc ) ; 
 + } 
 + } 
 + if ( ! j8mods . isEmpty ( ) ) 
 + { 
 + throw new Java8VersionException ( j8mods ) ; 
 + } 
 + } 
 + 
 public void preinitializeMods ( ) 
 { 
 if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 index 883f8b9 . . cd82ff0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 @ @ - 152 , 4 + 152 , 8 @ @ public interface ModContainer 
 boolean shouldLoadInEnvironment ( ) ; 
 
 URL getUpdateUrl ( ) ; 
 + 
 + void setClassVersion ( int classVersion ) ; 
 + 
 + int getClassVersion ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 index 6eb8dec . . 0fd5d7d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 @ @ - 35 , 6 + 35 , 7 @ @ public class ASMDataTable 
 private String annotationName ; 
 private String className ; 
 private String objectName ; 
 + private int classVersion ; 
 private Map < String , Object > annotationInfo ; 
 public ASMData ( ModCandidate candidate , String annotationName , String className , String objectName , Map < String , Object > info ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 index 226ddd6 . . 77346da 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 @ @ - 83 , 6 + 83 , 7 @ @ public class JarDiscoverer implements ITypeDiscoverer 
 table . addContainer ( container ) ; 
 foundMods . add ( container ) ; 
 container . bindMetadata ( mc ) ; 
 + container . setClassVersion ( modParser . getClassVersion ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 7c35d8e . . cbdf668 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 commands . forge . usage = Use / forge < subcommand > . Subcommands are tps , track 
 - commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . 
 + commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . 
 commands . forge . tps . summary = % s : Mean tick time : % d ms . Mean TPS : % d 
 
 commands . forge . tracking . te . enabled = Tile Entity tracking enabled for % d seconds . 
 @ @ - 153 , 4 + 153 , 18 @ @ fml . menu . mods . normal = Normal 
 fml . menu . mods . search = Search : 
 fml . menu . modoptions = Mod Options . . . 
 
 - item . forge . bucketFilled . name = % s Bucket 
 \ No newline at end of file 
 + item . forge . bucketFilled . name = % s Bucket 
 + 
 + fml . messages . java8problem = % s % sJava Update Required % s 
 + fml . messages . java8recommended = % s % sJava Update Recommended % s 
 + fml . messages . modslistedbelow = The mods listed below % s 
 + fml . messages . requirejava8 = require Java 8 
 + fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! 
 + fml . messages . java8warning . 2 = You need to update Java 
 + fml . messages . javaversion = Your Java version is Java % s ( version string % s ) 
 + fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play 
 + fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods 
 + fml . messages . countbadandgood = % s of % s mods have this problem 
 + 
 + fml . button . visitjavadownloads = Oracle Java SE Downloads 
 + fml . button . continue = Continue 
 \ No newline at end of file
