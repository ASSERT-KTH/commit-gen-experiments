BLEU SCORE: 0.029083177105737566

TEST MSG: Small tweak to the OUT / ERR logger - should skip the Throwable stuffs now .
GENERATED MSG: Patch TracingPrintStream to handle Kotlin IO .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java b / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> index 2187c9d . . 80aef6c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> @ @ - 15 , 34 + 15 , 36 @ @ import org . apache . logging . log4j . Logger ; <nl> <nl> / * * <nl> * PrintStream which redirects it ' s output to a given logger . <nl> - * <nl> + * <nl> * @ author Arkan <nl> * / <nl> public class TracingPrintStream extends PrintStream { <nl> - <nl> + <nl> private Logger logger ; <nl> private int BASE _ DEPTH = 3 ; <nl> - <nl> + <nl> public TracingPrintStream ( Logger logger , PrintStream original ) { <nl> super ( original ) ; <nl> this . logger = logger ; <nl> } <nl> - <nl> + <nl> @ Override <nl> public void println ( Object o ) { <nl> logger . info ( getPrefix ( ) + o ) ; <nl> } <nl> - <nl> + <nl> @ Override <nl> public void println ( String s ) { <nl> logger . info ( getPrefix ( ) + s ) ; <nl> } <nl> - <nl> + <nl> private String getPrefix ( ) { <nl> StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; <nl> StackTraceElement elem = elems [ BASE _ DEPTH ] ; / / The caller is always at BASE _ DEPTH , including this call . <nl> if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { <nl> elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . <nl> + } else if ( elem . getClassName ( ) . startsWith ( " java . lang . Throwable " ) ) { <nl> + elem = elems [ BASE _ DEPTH + 1 ] ; <nl> } <nl> return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; <nl> }
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java b / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> index 90e4b13 . . 2187c9d 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import org . apache . logging . log4j . Logger ; <nl> public class TracingPrintStream extends PrintStream { <nl> <nl> private Logger logger ; <nl> + private int BASE _ DEPTH = 3 ; <nl> <nl> public TracingPrintStream ( Logger logger , PrintStream original ) { <nl> super ( original ) ; <nl> @ @ - 39 , 7 + 40 , 10 @ @ public class TracingPrintStream extends PrintStream { <nl> <nl> private String getPrefix ( ) { <nl> StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; <nl> - StackTraceElement elem = elems [ 3 ] ; / / The caller is always at depth 2 , plus this call . <nl> + StackTraceElement elem = elems [ BASE _ DEPTH ] ; / / The caller is always at BASE _ DEPTH , including this call . <nl> + if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { <nl> + elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . <nl> + } <nl> return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java b / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 index 2187c9d . . 80aef6c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 @ @ - 15 , 34 + 15 , 36 @ @ import org . apache . logging . log4j . Logger ; 
 
 / * * 
 * PrintStream which redirects it ' s output to a given logger . 
 - * 
 + * 
 * @ author Arkan 
 * / 
 public class TracingPrintStream extends PrintStream { 
 - 
 + 
 private Logger logger ; 
 private int BASE _ DEPTH = 3 ; 
 - 
 + 
 public TracingPrintStream ( Logger logger , PrintStream original ) { 
 super ( original ) ; 
 this . logger = logger ; 
 } 
 - 
 + 
 @ Override 
 public void println ( Object o ) { 
 logger . info ( getPrefix ( ) + o ) ; 
 } 
 - 
 + 
 @ Override 
 public void println ( String s ) { 
 logger . info ( getPrefix ( ) + s ) ; 
 } 
 - 
 + 
 private String getPrefix ( ) { 
 StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; 
 StackTraceElement elem = elems [ BASE _ DEPTH ] ; / / The caller is always at BASE _ DEPTH , including this call . 
 if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { 
 elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . 
 + } else if ( elem . getClassName ( ) . startsWith ( " java . lang . Throwable " ) ) { 
 + elem = elems [ BASE _ DEPTH + 1 ] ; 
 } 
 return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; 
 }

NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java b / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 index 90e4b13 . . 2187c9d 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import org . apache . logging . log4j . Logger ; 
 public class TracingPrintStream extends PrintStream { 
 
 private Logger logger ; 
 + private int BASE _ DEPTH = 3 ; 
 
 public TracingPrintStream ( Logger logger , PrintStream original ) { 
 super ( original ) ; 
 @ @ - 39 , 7 + 40 , 10 @ @ public class TracingPrintStream extends PrintStream { 
 
 private String getPrefix ( ) { 
 StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; 
 - StackTraceElement elem = elems [ 3 ] ; / / The caller is always at depth 2 , plus this call . 
 + StackTraceElement elem = elems [ BASE _ DEPTH ] ; / / The caller is always at BASE _ DEPTH , including this call . 
 + if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { 
 + elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . 
 + } 
 return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; 
 } 

