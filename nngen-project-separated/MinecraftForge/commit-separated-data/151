BLEU SCORE: 0.10175282441454785

TEST MSG: Implement GuiScreen events for mouse and keyboard
GENERATED MSG: New GuiScreen events and a new ElementType DEBUG for RenderGameOverlayEvent

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / KeyboardListener . java . patch b / patches / minecraft / net / minecraft / client / KeyboardListener . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 6ab1390 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / KeyboardListener . java . patch <nl> @ @ - 0 , 0 + 1 , 38 @ @ <nl> + - - - a / net / minecraft / client / KeyboardListener . java <nl> + + + + b / net / minecraft / client / KeyboardListener . java <nl> + @ @ - 266 , 10 + 266 , 14 @ @ <nl> + GuiScreen . func _ 195121 _ a ( ( ) - > { <nl> + if ( p _ 197961 _ 5 _ ! = 1 & & ( p _ 197961 _ 5 _ ! = 2 | | ! this . field _ 197973 _ b ) ) { <nl> + if ( p _ 197961 _ 5 _ = = 0 ) { <nl> + - aboolean [ 0 ] = iguieventlistener . keyReleased ( p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; <nl> + + aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiKeyReleasedPre ( this . field _ 197972 _ a . field _ 71462 _ r , p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; <nl> + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = iguieventlistener . keyReleased ( p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; <nl> + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiKeyReleasedPost ( this . field _ 197972 _ a . field _ 71462 _ r , p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; <nl> + } <nl> + } else { <nl> + - aboolean [ 0 ] = iguieventlistener . keyPressed ( p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; <nl> + + aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiKeyPressedPre ( this . field _ 197972 _ a . field _ 71462 _ r , p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; <nl> + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = iguieventlistener . keyPressed ( p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; <nl> + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiKeyPressedPost ( this . field _ 197972 _ a . field _ 71462 _ r , p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; <nl> + } <nl> + <nl> + } , " keyPressed event handler " , iguieventlistener . getClass ( ) . getCanonicalName ( ) ) ; <nl> + @ @ - 346 , 12 + 350 , 16 @ @ <nl> + if ( iguieventlistener ! = null ) { <nl> + if ( Character . charCount ( p _ 197963 _ 3 _ ) = = 1 ) { <nl> + GuiScreen . func _ 195121 _ a ( ( ) - > { <nl> + - iguieventlistener . charTyped ( ( char ) p _ 197963 _ 3 _ , p _ 197963 _ 4 _ ) ; <nl> + + if ( net . minecraftforge . client . ForgeHooksClient . onGuiCharTypedPre ( this . field _ 197972 _ a . field _ 71462 _ r , ( char ) p _ 197963 _ 3 _ , p _ 197963 _ 4 _ ) ) return ; <nl> + + if ( iguieventlistener . charTyped ( ( char ) p _ 197963 _ 3 _ , p _ 197963 _ 4 _ ) ) return ; <nl> + + net . minecraftforge . client . ForgeHooksClient . onGuiCharTypedPost ( this . field _ 197972 _ a . field _ 71462 _ r , ( char ) p _ 197963 _ 3 _ , p _ 197963 _ 4 _ ) ; <nl> + } , " charTyped event handler " , iguieventlistener . getClass ( ) . getCanonicalName ( ) ) ; <nl> + } else { <nl> + for ( char c0 : Character . toChars ( p _ 197963 _ 3 _ ) ) { <nl> + GuiScreen . func _ 195121 _ a ( ( ) - > { <nl> + - iguieventlistener . charTyped ( c0 , p _ 197963 _ 4 _ ) ; <nl> + + if ( net . minecraftforge . client . ForgeHooksClient . onGuiCharTypedPre ( this . field _ 197972 _ a . field _ 71462 _ r , c0 , p _ 197963 _ 4 _ ) ) return ; <nl> + + if ( iguieventlistener . charTyped ( c0 , p _ 197963 _ 4 _ ) ) return ; <nl> + + net . minecraftforge . client . ForgeHooksClient . onGuiCharTypedPost ( this . field _ 197972 _ a . field _ 71462 _ r , c0 , p _ 197963 _ 4 _ ) ; <nl> + } , " charTyped event handler " , iguieventlistener . getClass ( ) . getCanonicalName ( ) ) ; <nl> + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / client / MouseHelper . java . patch b / patches / minecraft / net / minecraft / client / MouseHelper . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 83522d3 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / MouseHelper . java . patch <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + - - - a / net / minecraft / client / MouseHelper . java <nl> + + + + b / net / minecraft / client / MouseHelper . java <nl> + @ @ - 76 , 11 + 76 , 15 @ @ <nl> + final int pFinal = p _ 198023 _ 3 _ ; <nl> + if ( flag ) { <nl> + GuiScreen . func _ 195121 _ a ( ( ) - > { <nl> + - aboolean [ 0 ] = this . field _ 198036 _ a . field _ 71462 _ r . mouseClicked ( d0 , d1 , pFinal ) ; <nl> + + aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiMouseClickedPre ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , pFinal ) ; <nl> + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = this . field _ 198036 _ a . field _ 71462 _ r . mouseClicked ( d0 , d1 , pFinal ) ; <nl> + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiMouseClickedPost ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , pFinal ) ; <nl> + } , " mouseClicked event handler " , this . field _ 198036 _ a . field _ 71462 _ r . getClass ( ) . getCanonicalName ( ) ) ; <nl> + } else { <nl> + GuiScreen . func _ 195121 _ a ( ( ) - > { <nl> + - aboolean [ 0 ] = this . field _ 198036 _ a . field _ 71462 _ r . mouseReleased ( d0 , d1 , pFinal ) ; <nl> + + aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiMouseReleasedPre ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , pFinal ) ; <nl> + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = this . field _ 198036 _ a . field _ 71462 _ r . mouseReleased ( d0 , d1 , pFinal ) ; <nl> + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiMouseReleasedPost ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , pFinal ) ; <nl> + } , " mouseReleased event handler " , this . field _ 198036 _ a . field _ 71462 _ r . getClass ( ) . getCanonicalName ( ) ) ; <nl> + } <nl> + } <nl> + @ @ - 111 , 7 + 115 , 9 @ @ <nl> + if ( p _ 198020 _ 1 _ = = Minecraft . func _ 71410 _ x ( ) . field _ 195558 _ d . func _ 198092 _ i ( ) ) { <nl> + double d0 = p _ 198020 _ 5 _ * this . field _ 198036 _ a . field _ 71474 _ y . field _ 208033 _ V ; <nl> + if ( this . field _ 198036 _ a . field _ 71462 _ r ! = null ) { <nl> + - this . field _ 198036 _ a . field _ 71462 _ r . mouseScrolled ( d0 ) ; <nl> + + if ( net . minecraftforge . client . ForgeHooksClient . onGuiMouseScrollPre ( this , this . field _ 198036 _ a . field _ 71462 _ r , d0 ) ) return ; <nl> + + if ( this . field _ 198036 _ a . field _ 71462 _ r . mouseScrolled ( d0 ) ) return ; <nl> + + net . minecraftforge . client . ForgeHooksClient . onGuiMouseScrollPost ( this , this . field _ 198036 _ a . field _ 71462 _ r , d0 ) ; <nl> + } else if ( this . field _ 198036 _ a . field _ 71439 _ g ! = null ) { <nl> + if ( this . field _ 200542 _ o ! = 0 . 0D & & Math . signum ( d0 ) ! = Math . signum ( this . field _ 200542 _ o ) ) { <nl> + this . field _ 200542 _ o = 0 . 0D ; <nl> + @ @ - 160 , 7 + 166 , 9 @ @ <nl> + double d2 = ( p _ 198022 _ 3 _ - this . field _ 198040 _ e ) * ( double ) this . field _ 198036 _ a . field _ 195558 _ d . func _ 198107 _ o ( ) / ( double ) this . field _ 198036 _ a . field _ 195558 _ d . func _ 198105 _ m ( ) ; <nl> + double d3 = ( p _ 198022 _ 5 _ - this . field _ 198041 _ f ) * ( double ) this . field _ 198036 _ a . field _ 195558 _ d . func _ 198087 _ p ( ) / ( double ) this . field _ 198036 _ a . field _ 195558 _ d . func _ 198083 _ n ( ) ; <nl> + GuiScreen . func _ 195121 _ a ( ( ) - > { <nl> + - iguieventlistener . mouseDragged ( d0 , d1 , this . field _ 198042 _ g , d2 , d3 ) ; <nl> + + if ( net . minecraftforge . client . ForgeHooksClient . onGuiMouseDragPre ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , this . field _ 198042 _ g , d2 , d3 ) ) return ; <nl> + + if ( iguieventlistener . mouseDragged ( d0 , d1 , this . field _ 198042 _ g , d2 , d3 ) ) return ; <nl> + + net . minecraftforge . client . ForgeHooksClient . onGuiMouseDragPost ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , this . field _ 198042 _ g , d2 , d3 ) ; <nl> + } , " mouseDragged event handler " , iguieventlistener . getClass ( ) . getCanonicalName ( ) ) ; <nl> + } <nl> + <nl> diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch <nl> index f5b5f8e . . 20e545c 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch <nl> @ @ - 1 , 14 + 1 , 6 @ @ <nl> - - - a / net / minecraft / client / gui / GuiScreen . java <nl> + + + b / net / minecraft / client / gui / GuiScreen . java <nl> - @ @ - 51 , 6 + 51 , 7 @ @ <nl> - public boolean field _ 146291 _ p ; <nl> - protected FontRenderer field _ 146289 _ q ; <nl> - private URI field _ 175286 _ t ; <nl> - + protected boolean keyHandled , mouseHandled ; / / Forge : allow canceling key and mouse Post events from handleMouseInput and handleKeyboardInput <nl> - <nl> - public void func _ 73863 _ a ( int p _ 73863 _ 1 _ , int p _ 73863 _ 2 _ , float p _ 73863 _ 3 _ ) { <nl> - for ( int i = 0 ; i < this . field _ 146292 _ n . size ( ) ; + + i ) { <nl> - @ @ - 87 , 7 + 88 , 10 @ @ <nl> + @ @ - 87 , 7 + 87 , 10 @ @ <nl> } <nl> <nl> protected void func _ 146285 _ a ( ItemStack p _ 146285 _ 1 _ , int p _ 146285 _ 2 _ , int p _ 146285 _ 3 _ ) { <nl> @ @ - 20 , 7 + 12 , 7 @ @ <nl> } <nl> <nl> public List < String > func _ 191927 _ a ( ItemStack p _ 191927 _ 1 _ ) { <nl> - @ @ - 106 , 25 + 110 , 30 @ @ <nl> + @ @ - 106 , 25 + 109 , 30 @ @ <nl> } <nl> <nl> public void func _ 146283 _ a ( List < String > p _ 146283 _ 1 _ , int p _ 146283 _ 2 _ , int p _ 146283 _ 3 _ ) { <nl> @ @ - 57 , 7 + 49 , 7 @ @ <nl> } <nl> <nl> if ( l1 + i > this . field _ 146294 _ l ) { <nl> - @ @ - 150 , 8 + 159 , 8 @ @ <nl> + @ @ - 150 , 8 + 158 , 8 @ @ <nl> this . func _ 73733 _ a ( l1 - 3 , i2 - 3 , l1 + i + 3 , i2 - 3 + 1 , 1347420415 , 1347420415 ) ; <nl> this . func _ 73733 _ a ( l1 - 3 , i2 + k + 2 , l1 + i + 3 , i2 + k + 3 , 1344798847 , 1344798847 ) ; <nl> <nl> @ @ - 68 , 7 + 60 , 7 @ @ <nl> this . field _ 146289 _ q . func _ 175063 _ a ( s1 , ( float ) l1 , ( float ) i2 , - 1 ) ; <nl> if ( k1 = = 0 ) { <nl> i2 + = 2 ; <nl> - @ @ - 279 , 9 + 288 , 12 @ @ <nl> + @ @ - 279 , 9 + 287 , 12 @ @ <nl> } <nl> <nl> public void func _ 175281 _ b ( String p _ 175281 _ 1 _ , boolean p _ 175281 _ 2 _ ) { <nl> @ @ - 81 , 7 + 73 , 7 @ @ <nl> <nl> this . field _ 146297 _ k . field _ 71439 _ g . func _ 71165 _ d ( p _ 175281 _ 1 _ ) ; <nl> } <nl> - @ @ - 292 , 9 + 304 , 13 @ @ <nl> + @ @ - 292 , 9 + 303 , 13 @ @ <nl> this . field _ 146289 _ q = p _ 146280 _ 1 _ . field _ 71466 _ p ; <nl> this . field _ 146294 _ l = p _ 146280 _ 2 _ ; <nl> this . field _ 146295 _ m = p _ 146280 _ 3 _ ; <nl> @ @ - 95 , 11 + 87 , 19 @ @ <nl> } <nl> <nl> public List < ? extends IGuiEventListener > func _ 195074 _ b ( ) { <nl> - @ @ - 313 , 6 + 329 , 7 @ @ <nl> - <nl> - public void func _ 146276 _ q _ ( ) { <nl> - this . func _ 146270 _ b ( 0 ) ; <nl> + @ @ - 318 , 6 + 333 , 7 @ @ <nl> + public void func _ 146270 _ b ( int p _ 146270 _ 1 _ ) { <nl> + if ( this . field _ 146297 _ k . field _ 71441 _ e ! = null ) { <nl> + this . func _ 73733 _ a ( 0 , 0 , this . field _ 146294 _ l , this . field _ 146295 _ m , - 1072689136 , - 804253680 ) ; <nl> + + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . client . event . GuiScreenEvent . BackgroundDrawnEvent ( this ) ) ; <nl> + } else { <nl> + this . func _ 146278 _ c ( p _ 146270 _ 1 _ ) ; <nl> + } <nl> + @ @ - 338 , 6 + 354 , 7 @ @ <nl> + bufferbuilder . func _ 181662 _ b ( ( double ) this . field _ 146294 _ l , 0 . 0D , 0 . 0D ) . func _ 187315 _ a ( ( double ) ( ( float ) this . field _ 146294 _ l / 32 . 0F ) , ( double ) p _ 146278 _ 1 _ ) . func _ 181669 _ b ( 64 , 64 , 64 , 255 ) . func _ 181675 _ d ( ) ; <nl> + bufferbuilder . func _ 181662 _ b ( 0 . 0D , 0 . 0D , 0 . 0D ) . func _ 187315 _ a ( 0 . 0D , ( double ) p _ 146278 _ 1 _ ) . func _ 181669 _ b ( 64 , 64 , 64 , 255 ) . func _ 181675 _ d ( ) ; <nl> + tessellator . func _ 78381 _ a ( ) ; <nl> + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . client . event . GuiScreenEvent . BackgroundDrawnEvent ( this ) ) ; <nl> } <nl> <nl> - public void func _ 146270 _ b ( int p _ 146270 _ 1 _ ) { <nl> + public boolean func _ 73868 _ f ( ) { <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index b9e024b . . 939b3f1 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import javax . vecmath . Matrix4f ; <nl> import javax . vecmath . Vector3f ; <nl> import javax . vecmath . Vector4f ; <nl> <nl> + import net . minecraft . client . MouseHelper ; <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> @ @ - 120 , 6 + 121 , 7 @ @ import net . minecraftforge . common . model . ITransformation ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> import net . minecraftforge . fml . VersionChecker ; <nl> import net . minecraftforge . fml . client . registry . ClientRegistry ; <nl> + import net . minecraftforge . eventbus . api . Event ; <nl> import net . minecraftforge . resource . ReloadRequirements ; <nl> import net . minecraftforge . resource . SelectiveReloadStateHandler ; <nl> import net . minecraftforge . resource . VanillaResourceType ; <nl> @ @ - 717 , 6 + 719 , 95 @ @ public class ForgeHooksClient <nl> SelectiveReloadStateHandler . INSTANCE . beginReload ( ReloadRequirements . include ( types ) ) ; <nl> mc . refreshResources ( ) ; <nl> SelectiveReloadStateHandler . INSTANCE . endReload ( ) ; <nl> + } <nl> + <nl> + public static boolean onGuiMouseClickedPre ( GuiScreen guiScreen , double mouseX , double mouseY , int button ) <nl> + { <nl> + Event event = new GuiScreenEvent . MouseClickedEvent . Pre ( guiScreen , mouseX , mouseY , button ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> <nl> + public static boolean onGuiMouseClickedPost ( GuiScreen guiScreen , double mouseX , double mouseY , int button ) <nl> + { <nl> + Event event = new GuiScreenEvent . MouseClickedEvent . Post ( guiScreen , mouseX , mouseY , button ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiMouseReleasedPre ( GuiScreen guiScreen , double mouseX , double mouseY , int button ) <nl> + { <nl> + Event event = new GuiScreenEvent . MouseReleasedEvent . Pre ( guiScreen , mouseX , mouseY , button ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiMouseReleasedPost ( GuiScreen guiScreen , double mouseX , double mouseY , int button ) <nl> + { <nl> + Event event = new GuiScreenEvent . MouseReleasedEvent . Post ( guiScreen , mouseX , mouseY , button ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiMouseDragPre ( GuiScreen guiScreen , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) <nl> + { <nl> + Event event = new GuiScreenEvent . MouseDragEvent . Pre ( guiScreen , mouseX , mouseY , mouseButton , dragX , dragY ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiMouseDragPost ( GuiScreen guiScreen , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) <nl> + { <nl> + Event event = new GuiScreenEvent . MouseDragEvent . Post ( guiScreen , mouseX , mouseY , mouseButton , dragX , dragY ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiMouseScrollPre ( MouseHelper mouseHelper , GuiScreen guiScreen , double scrollDelta ) <nl> + { <nl> + MainWindow mainWindow = guiScreen . mc . mainWindow ; <nl> + double mouseX = mouseHelper . getMouseX ( ) * ( double ) mainWindow . getScaledWidth ( ) / ( double ) mainWindow . getWidth ( ) ; <nl> + double mouseY = mouseHelper . getMouseY ( ) * ( double ) mainWindow . getScaledHeight ( ) / ( double ) mainWindow . getHeight ( ) ; <nl> + Event event = new GuiScreenEvent . MouseScrollEvent . Pre ( guiScreen , mouseX , mouseY , scrollDelta ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiMouseScrollPost ( MouseHelper mouseHelper , GuiScreen guiScreen , double scrollDelta ) <nl> + { <nl> + MainWindow mainWindow = guiScreen . mc . mainWindow ; <nl> + double mouseX = mouseHelper . getMouseX ( ) * ( double ) mainWindow . getScaledWidth ( ) / ( double ) mainWindow . getWidth ( ) ; <nl> + double mouseY = mouseHelper . getMouseY ( ) * ( double ) mainWindow . getScaledHeight ( ) / ( double ) mainWindow . getHeight ( ) ; <nl> + Event event = new GuiScreenEvent . MouseScrollEvent . Post ( guiScreen , mouseX , mouseY , scrollDelta ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiKeyPressedPre ( GuiScreen guiScreen , int keyCode , int scanCode , int modifiers ) <nl> + { <nl> + Event event = new GuiScreenEvent . KeyboardKeyPressedEvent . Pre ( guiScreen , keyCode , scanCode , modifiers ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiKeyPressedPost ( GuiScreen guiScreen , int keyCode , int scanCode , int modifiers ) <nl> + { <nl> + Event event = new GuiScreenEvent . KeyboardKeyPressedEvent . Post ( guiScreen , keyCode , scanCode , modifiers ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiKeyReleasedPre ( GuiScreen guiScreen , int keyCode , int scanCode , int modifiers ) <nl> + { <nl> + Event event = new GuiScreenEvent . KeyboardKeyReleasedEvent . Pre ( guiScreen , keyCode , scanCode , modifiers ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiKeyReleasedPost ( GuiScreen guiScreen , int keyCode , int scanCode , int modifiers ) <nl> + { <nl> + Event event = new GuiScreenEvent . KeyboardKeyReleasedEvent . Post ( guiScreen , keyCode , scanCode , modifiers ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiCharTypedPre ( GuiScreen guiScreen , char codePoint , int modifiers ) <nl> + { <nl> + Event event = new GuiScreenEvent . KeyboardCharTypedEvent . Pre ( guiScreen , codePoint , modifiers ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> + public static boolean onGuiCharTypedPost ( GuiScreen guiScreen , char codePoint , int modifiers ) <nl> + { <nl> + Event event = new GuiScreenEvent . KeyboardCharTypedEvent . Post ( guiScreen , codePoint , modifiers ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java b / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java <nl> index 85ad64c . . 6a287b9 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java <nl> + + + b / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java <nl> @ @ - 22 , 21 + 22 , 23 @ @ package net . minecraftforge . client . event ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> - import java . util . concurrent . Callable ; <nl> import java . util . function . Consumer ; <nl> - import java . util . function . Function ; <nl> <nl> import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . gui . IGuiEventListener ; <nl> import net . minecraft . client . renderer . InventoryEffectRenderer ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> import net . minecraftforge . api . distmarker . OnlyIn ; <nl> <nl> import net . minecraft . client . gui . GuiButton ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> + import net . minecraft . client . util . InputMappings ; <nl> <nl> import net . minecraftforge . eventbus . api . Cancelable ; <nl> import net . minecraftforge . eventbus . api . Event ; <nl> <nl> + import org . lwjgl . glfw . GLFW ; <nl> + <nl> / * * <nl> * Event classes for GuiScreen events . <nl> * <nl> @ @ - 163 , 8 + 165 , 8 @ @ public class GuiScreenEvent extends Event <nl> } <nl> <nl> / * * <nl> - * This event fires just before { @ link GuiScreen # drawScreen ( int , int , float ) } is called . <nl> - * Cancel this event to skip { @ link GuiScreen # drawScreen ( int , int , float ) } . <nl> + * This event fires just before { @ link GuiScreen # render ( int , int , float ) } is called . <nl> + * Cancel this event to skip { @ link GuiScreen # render ( int , int , float ) } . <nl> * / <nl> @ Cancelable <nl> public static class Pre extends DrawScreenEvent <nl> @ @ - 176 , 7 + 178 , 7 @ @ public class GuiScreenEvent extends Event <nl> } <nl> <nl> / * * <nl> - * This event fires just after { @ link GuiScreen # drawScreen ( int , int , float ) } is called . <nl> + * This event fires just after { @ link GuiScreen # render ( int , int , float ) } is called . <nl> * / <nl> public static class Post extends DrawScreenEvent <nl> { <nl> @ @ - 188 , 42 + 190 , 15 @ @ public class GuiScreenEvent extends Event <nl> } <nl> <nl> / * * <nl> - * This event fires at the end of { @ link GuiScreen # drawDefaultBackground ( ) } and before the rest of the Gui draws . <nl> + * This event fires at the end of { @ link GuiScreen # drawBackground ( int ) } and before the rest of the Gui draws . <nl> * This allows drawing next to Guis , above the background but below any tooltips . <nl> * / <nl> public static class BackgroundDrawnEvent extends GuiScreenEvent <nl> { <nl> - / / private final int mouseX ; <nl> - / / private final int mouseY ; <nl> - <nl> public BackgroundDrawnEvent ( GuiScreen gui ) <nl> { <nl> super ( gui ) ; <nl> - / * <nl> - final ScaledResolution scaledresolution = new ScaledResolution ( gui . mc ) ; <nl> - final int scaledWidth = scaledresolution . getScaledWidth ( ) ; <nl> - final int scaledHeight = scaledresolution . getScaledHeight ( ) ; <nl> - this . mouseX = Mouse . getX ( ) * scaledWidth / gui . mc . displayWidth ; <nl> - this . mouseY = scaledHeight - Mouse . getY ( ) * scaledHeight / gui . mc . displayHeight - 1 ; <nl> - * / <nl> - } <nl> - <nl> - / * * <nl> - * The x coordinate of the mouse pointer on the screen . <nl> - * / <nl> - public int getMouseX ( ) <nl> - { <nl> - return mouseX ; <nl> - } <nl> - <nl> - / * * <nl> - * The y coordinate of the mouse pointer on the screen . <nl> - * / <nl> - public int getMouseY ( ) <nl> - { <nl> - return mouseY ; <nl> } <nl> - * / <nl> } <nl> <nl> / * * <nl> @ @ - 305 , 74 + 280 , 388 @ @ public class GuiScreenEvent extends Event <nl> } <nl> } <nl> <nl> - public static class MouseInputEvent extends GuiScreenEvent <nl> + public static abstract class MouseInputEvent extends GuiScreenEvent <nl> + { <nl> + private final double mouseX ; <nl> + private final double mouseY ; <nl> + <nl> + public MouseInputEvent ( GuiScreen gui , double mouseX , double mouseY ) <nl> + { <nl> + super ( gui ) ; <nl> + this . mouseX = mouseX ; <nl> + this . mouseY = mouseY ; <nl> + } <nl> + <nl> + public double getMouseX ( ) <nl> + { <nl> + return mouseX ; <nl> + } <nl> + <nl> + public double getMouseY ( ) <nl> + { <nl> + return mouseY ; <nl> + } <nl> + } <nl> + <nl> + public static abstract class MouseClickedEvent extends MouseInputEvent <nl> + { <nl> + private final int button ; <nl> + <nl> + public MouseClickedEvent ( GuiScreen gui , double mouseX , double mouseY , int button ) <nl> + { <nl> + super ( gui , mouseX , mouseY ) ; <nl> + this . button = button ; <nl> + } <nl> + <nl> + public int getButton ( ) <nl> + { <nl> + return button ; <nl> + } <nl> + <nl> + / * * <nl> + * This event fires when a mouse click is detected for a GuiScreen , before it is handled . <nl> + * Cancel this event to bypass { @ link IGuiEventListener # mouseClicked ( double , double , int ) } . <nl> + * / <nl> + @ Cancelable <nl> + public static class Pre extends MouseClickedEvent <nl> + { <nl> + public Pre ( GuiScreen gui , double mouseX , double mouseY , int button ) <nl> + { <nl> + super ( gui , mouseX , mouseY , button ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This event fires after { @ link IGuiEventListener # mouseClicked ( double , double , int ) } if the click was not already handled . <nl> + * Cancel this event when you successfully use the mouse click , to prevent other handlers from using the same input . <nl> + * / <nl> + @ Cancelable <nl> + public static class Post extends MouseClickedEvent <nl> + { <nl> + public Post ( GuiScreen gui , double mouseX , double mouseY , int button ) <nl> + { <nl> + super ( gui , mouseX , mouseY , button ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static abstract class MouseReleasedEvent extends MouseInputEvent <nl> + { <nl> + private final int button ; <nl> + <nl> + public MouseReleasedEvent ( GuiScreen gui , double mouseX , double mouseY , int button ) <nl> + { <nl> + super ( gui , mouseX , mouseY ) ; <nl> + this . button = button ; <nl> + } <nl> + <nl> + public int getButton ( ) <nl> + { <nl> + return button ; <nl> + } <nl> + <nl> + / * * <nl> + * This event fires when a mouse release is detected for a GuiScreen , before it is handled . <nl> + * Cancel this event to bypass { @ link IGuiEventListener # mouseReleased ( double , double , int ) } . <nl> + * / <nl> + @ Cancelable <nl> + public static class Pre extends MouseReleasedEvent <nl> + { <nl> + public Pre ( GuiScreen gui , double mouseX , double mouseY , int button ) <nl> + { <nl> + super ( gui , mouseX , mouseY , button ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This event fires after { @ link IGuiEventListener # mouseReleased ( double , double , int ) } if the release was not already handled . <nl> + * Cancel this event when you successfully use the mouse release , to prevent other handlers from using the same input . <nl> + * / <nl> + @ Cancelable <nl> + public static class Post extends MouseReleasedEvent <nl> + { <nl> + public Post ( GuiScreen gui , double mouseX , double mouseY , int button ) <nl> + { <nl> + super ( gui , mouseX , mouseY , button ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static abstract class MouseDragEvent extends MouseInputEvent <nl> + { <nl> + private final int mouseButton ; <nl> + private final double dragX ; <nl> + private final double dragY ; <nl> + <nl> + public MouseDragEvent ( GuiScreen gui , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) <nl> + { <nl> + super ( gui , mouseX , mouseY ) ; <nl> + this . mouseButton = mouseButton ; <nl> + this . dragX = dragX ; <nl> + this . dragY = dragY ; <nl> + } <nl> + <nl> + public int getMouseButton ( ) <nl> + { <nl> + return mouseButton ; <nl> + } <nl> + <nl> + public double getDragX ( ) <nl> + { <nl> + return dragX ; <nl> + } <nl> + <nl> + public double getDragY ( ) <nl> + { <nl> + return dragY ; <nl> + } <nl> + <nl> + / * * <nl> + * This event fires when a mouse drag is detected for a GuiScreen , before it is handled . <nl> + * Cancel this event to bypass { @ link IGuiEventListener # mouseDragged ( double , double , int , double , double ) } . <nl> + * / <nl> + @ Cancelable <nl> + public static class Pre extends MouseDragEvent <nl> + { <nl> + public Pre ( GuiScreen gui , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) <nl> + { <nl> + super ( gui , mouseX , mouseY , mouseButton , dragX , dragY ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This event fires after { @ link IGuiEventListener # mouseDragged ( double , double , int , double , double ) } if the drag was not already handled . <nl> + * Cancel this event when you successfully use the mouse drag , to prevent other handlers from using the same input . <nl> + * / <nl> + @ Cancelable <nl> + public static class Post extends MouseDragEvent <nl> + { <nl> + public Post ( GuiScreen gui , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) <nl> + { <nl> + super ( gui , mouseX , mouseY , mouseButton , dragX , dragY ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static abstract class MouseScrollEvent extends MouseInputEvent <nl> { <nl> - public MouseInputEvent ( GuiScreen gui ) <nl> + private final double scrollDelta ; <nl> + <nl> + public MouseScrollEvent ( GuiScreen gui , double mouseX , double mouseY , double scrollDelta ) <nl> + { <nl> + super ( gui , mouseX , mouseY ) ; <nl> + this . scrollDelta = scrollDelta ; <nl> + } <nl> + <nl> + public double getScrollDelta ( ) <nl> + { <nl> + return scrollDelta ; <nl> + } <nl> + <nl> + / * * <nl> + * This event fires when a mouse scroll is detected for a GuiScreen , before it is handled . <nl> + * Cancel this event to bypass { @ link IGuiEventListener # mouseScrolled ( double ) } . <nl> + * / <nl> + @ Cancelable <nl> + public static class Pre extends MouseScrollEvent <nl> + { <nl> + public Pre ( GuiScreen gui , double mouseX , double mouseY , double scrollDelta ) <nl> + { <nl> + super ( gui , mouseX , mouseY , scrollDelta ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This event fires after { @ link IGuiEventListener # mouseScrolled ( double ) } if the scroll was not already handled . <nl> + * Cancel this event when you successfully use the mouse scroll , to prevent other handlers from using the same input . <nl> + * / <nl> + @ Cancelable <nl> + public static class Post extends MouseScrollEvent <nl> + { <nl> + public Post ( GuiScreen gui , double mouseX , double mouseY , double scrollDelta ) <nl> + { <nl> + super ( gui , mouseX , mouseY , scrollDelta ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static abstract class KeyboardKeyEvent extends GuiScreenEvent <nl> + { <nl> + private final int keyCode ; <nl> + private final int scanCode ; <nl> + private final int modifiers ; <nl> + <nl> + public KeyboardKeyEvent ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) <nl> { <nl> super ( gui ) ; <nl> + this . keyCode = keyCode ; <nl> + this . scanCode = scanCode ; <nl> + this . modifiers = modifiers ; <nl> + } <nl> + <nl> + / * * <nl> + * The keyboard key that was pressed or released <nl> + * https : / / www . glfw . org / docs / latest / group _ _ keys . html <nl> + * <nl> + * @ see GLFW key constants starting with " GLFW _ KEY _ " <nl> + * / <nl> + public int getKeyCode ( ) <nl> + { <nl> + return keyCode ; <nl> } <nl> <nl> / * * <nl> - * This event fires when mouse input is detected by a GuiScreen . <nl> - * Cancel this event to bypass { @ link GuiScreen # handleMouseInput ( ) } . <nl> + * Platform - specific scan code . <nl> + * Used for { @ link InputMappings # getInputByCode ( int , int ) } <nl> + * <nl> + * The scan code is unique for every key , regardless of whether it has a key code . <nl> + * Scan codes are platform - specific but consistent over time , so keys will have different scan codes depending <nl> + * on the platform but they are safe to save to disk as custom key bindings . <nl> + * / <nl> + public int getScanCode ( ) <nl> + { <nl> + return scanCode ; <nl> + } <nl> + <nl> + / * * <nl> + * Bit field representing the modifier keys pressed . <nl> + * https : / / www . glfw . org / docs / latest / group _ _ mods . html <nl> + * <nl> + * @ see GLFW # GLFW _ MOD _ SHIFT <nl> + * @ see GLFW # GLFW _ MOD _ CONTROL <nl> + * @ see GLFW # GLFW _ MOD _ ALT <nl> + * @ see GLFW # GLFW _ MOD _ SUPER <nl> + * / <nl> + public int getModifiers ( ) <nl> + { <nl> + return modifiers ; <nl> + } <nl> + } <nl> + <nl> + public static abstract class KeyboardKeyPressedEvent extends KeyboardKeyEvent <nl> + { <nl> + public KeyboardKeyPressedEvent ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) <nl> + { <nl> + super ( gui , keyCode , scanCode , modifiers ) ; <nl> + } <nl> + <nl> + / * * <nl> + * This event fires when keyboard input is detected for a GuiScreen , before it is handled . <nl> + * Cancel this event to bypass { @ link IGuiEventListener # keyPressed ( int , int , int ) } . <nl> + * / <nl> + @ Cancelable <nl> + public static class Pre extends KeyboardKeyPressedEvent <nl> + { <nl> + public Pre ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) <nl> + { <nl> + super ( gui , keyCode , scanCode , modifiers ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This event fires after { @ link IGuiEventListener # keyPressed ( int , int , int ) } if the key was not already handled . <nl> + * Cancel this event when you successfully use the keyboard input to prevent other handlers from using the same input . <nl> + * / <nl> + @ Cancelable <nl> + public static class Post extends KeyboardKeyPressedEvent <nl> + { <nl> + public Post ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) <nl> + { <nl> + super ( gui , keyCode , scanCode , modifiers ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static abstract class KeyboardKeyReleasedEvent extends KeyboardKeyEvent <nl> + { <nl> + public KeyboardKeyReleasedEvent ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) <nl> + { <nl> + super ( gui , keyCode , scanCode , modifiers ) ; <nl> + } <nl> + <nl> + / * * <nl> + * This event fires when keyboard input is detected for a GuiScreen , before it is handled . <nl> + * Cancel this event to bypass { @ link IGuiEventListener # keyReleased ( int , int , int ) } . <nl> * / <nl> @ Cancelable <nl> - public static class Pre extends MouseInputEvent <nl> + public static class Pre extends KeyboardKeyReleasedEvent <nl> { <nl> - public Pre ( GuiScreen gui ) <nl> + public Pre ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) <nl> { <nl> - super ( gui ) ; <nl> + super ( gui , keyCode , scanCode , modifiers ) ; <nl> } <nl> } <nl> <nl> / * * <nl> - * This event fires after { @ link GuiScreen # handleMouseInput ( ) } provided that the active <nl> - * screen has not been changed as a result of { @ link GuiScreen # handleMouseInput ( ) } and <nl> - * the { @ link GuiScreen # mouseHandled } flag has not been set . <nl> - * Cancel this event when you successfully use the mouse input to prevent other handlers from using the same input . <nl> + * This event fires after { @ link IGuiEventListener # keyReleased ( int , int , int ) } if the key was not already handled . <nl> + * Cancel this event when you successfully use the keyboard input to prevent other handlers from using the same input . <nl> * / <nl> @ Cancelable <nl> - public static class Post extends MouseInputEvent <nl> + public static class Post extends KeyboardKeyReleasedEvent <nl> { <nl> - public Post ( GuiScreen gui ) <nl> + public Post ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) <nl> { <nl> - super ( gui ) ; <nl> + super ( gui , keyCode , scanCode , modifiers ) ; <nl> } <nl> } <nl> } <nl> <nl> - public static class KeyboardInputEvent extends GuiScreenEvent <nl> + public static class KeyboardCharTypedEvent extends GuiScreenEvent <nl> { <nl> - public KeyboardInputEvent ( GuiScreen gui ) <nl> + private final char codePoint ; <nl> + private final int modifiers ; <nl> + <nl> + public KeyboardCharTypedEvent ( GuiScreen gui , char codePoint , int modifiers ) <nl> { <nl> super ( gui ) ; <nl> + this . codePoint = codePoint ; <nl> + this . modifiers = modifiers ; <nl> + } <nl> + <nl> + / * * <nl> + * The code point typed , used for text entry . <nl> + * / <nl> + public char getCodePoint ( ) <nl> + { <nl> + return codePoint ; <nl> + } <nl> + <nl> + / * * <nl> + * Bit field representing the modifier keys pressed . <nl> + * <nl> + * @ see GLFW # GLFW _ MOD _ SHIFT <nl> + * @ see GLFW # GLFW _ MOD _ CONTROL <nl> + * @ see GLFW # GLFW _ MOD _ ALT <nl> + * @ see GLFW # GLFW _ MOD _ SUPER <nl> + * / <nl> + public int getModifiers ( ) <nl> + { <nl> + return modifiers ; <nl> } <nl> <nl> / * * <nl> - * This event fires when keyboard input is detected by a GuiScreen . <nl> - * Cancel this event to bypass { @ link GuiScreen # handleKeyboardInput ( ) } . <nl> + * This event fires when keyboard character input is detected for a GuiScreen , before it is handled . <nl> + * Cancel this event to bypass { @ link IGuiEventListener # charTyped ( char , int ) } . <nl> * / <nl> @ Cancelable <nl> - public static class Pre extends KeyboardInputEvent <nl> + public static class Pre extends KeyboardCharTypedEvent <nl> { <nl> - public Pre ( GuiScreen gui ) <nl> + public Pre ( GuiScreen gui , char codePoint , int modifiers ) <nl> { <nl> - super ( gui ) ; <nl> + super ( gui , codePoint , modifiers ) ; <nl> } <nl> } <nl> <nl> / * * <nl> - * This event fires after { @ link GuiScreen # handleKeyboardInput ( ) } provided that the active <nl> - * screen has not been changed as a result of { @ link GuiScreen # handleKeyboardInput ( ) } and <nl> - * the { @ link GuiScreen # keyHandled } flag has not been set . <nl> + * This event fires after { @ link IGuiEventListener # charTyped ( char , int ) } if the character was not already handled . <nl> * Cancel this event when you successfully use the keyboard input to prevent other handlers from using the same input . <nl> * / <nl> @ Cancelable <nl> - public static class Post extends KeyboardInputEvent <nl> + public static class Post extends KeyboardCharTypedEvent <nl> { <nl> - public Post ( GuiScreen gui ) <nl> + public Post ( GuiScreen gui , char codePoint , int modifiers ) <nl> { <nl> - super ( gui ) ; <nl> + super ( gui , codePoint , modifiers ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch <nl> index d6775a2 . . 1740dc7 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch <nl> @ @ - 1 , 6 + 1 , 17 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiScreen . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiScreen . java <nl> - @ @ - 111 , 7 + 111 , 9 @ @ <nl> + @ @ - 17 , 6 + 17 , 10 @ @ <nl> + import net . minecraft . client . renderer . entity . RenderItem ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . EnumChatFormatting ; <nl> + + import net . minecraftforge . client . event . GuiScreenEvent . ActionPerformedEvent ; <nl> + + import net . minecraftforge . client . event . GuiScreenEvent . InitGuiEvent ; <nl> + + import net . minecraftforge . common . MinecraftForge ; <nl> + + <nl> + import org . lwjgl . input . Keyboard ; <nl> + import org . lwjgl . input . Mouse ; <nl> + import org . lwjgl . opengl . GL11 ; <nl> + @ @ - 111 , 7 + 115 , 9 @ @ <nl> } <nl> } <nl> <nl> @ @ - 10 , 7 + 21 , 7 @ @ <nl> } <nl> <nl> protected void func _ 146279 _ a ( String p _ 146279 _ 1 _ , int p _ 146279 _ 2 _ , int p _ 146279 _ 3 _ ) <nl> - @ @ - 121 , 6 + 123 , 11 @ @ <nl> + @ @ - 121 , 6 + 127 , 11 @ @ <nl> <nl> protected void func _ 146283 _ a ( List p _ 146283 _ 1 _ , int p _ 146283 _ 2 _ , int p _ 146283 _ 3 _ ) <nl> { <nl> @ @ - 22 , 7 + 33 , 7 @ @ <nl> if ( ! p _ 146283 _ 1 _ . isEmpty ( ) ) <nl> { <nl> GL11 . glDisable ( GL12 . GL _ RESCALE _ NORMAL ) ; <nl> - @ @ - 133 , 7 + 140 , 7 @ @ <nl> + @ @ - 133 , 7 + 144 , 7 @ @ <nl> while ( iterator . hasNext ( ) ) <nl> { <nl> String s = ( String ) iterator . next ( ) ; <nl> @ @ - 31 , 7 + 42 , 7 @ @ <nl> <nl> if ( l > k ) <nl> { <nl> - @ @ - 178 , 7 + 185 , 7 @ @ <nl> + @ @ - 178 , 7 + 189 , 7 @ @ <nl> for ( int i2 = 0 ; i2 < p _ 146283 _ 1 _ . size ( ) ; + + i2 ) <nl> { <nl> String s1 = ( String ) p _ 146283 _ 1 _ . get ( i2 ) ; <nl> @ @ - 40 , 3 + 51 , 36 @ @ <nl> <nl> if ( i2 = = 0 ) <nl> { <nl> + @ @ - 207 , 9 + 218 , 14 @ @ <nl> + <nl> + if ( guibutton . func _ 146116 _ c ( this . field _ 146297 _ k , p _ 73864 _ 1 _ , p _ 73864 _ 2 _ ) ) <nl> + { <nl> + - this . field _ 146290 _ a = guibutton ; <nl> + - guibutton . func _ 146113 _ a ( this . field _ 146297 _ k . func _ 147118 _ V ( ) ) ; <nl> + - this . func _ 146284 _ a ( guibutton ) ; <nl> + + ActionPerformedEvent . Pre event = new ActionPerformedEvent . Pre ( this , guibutton , this . field _ 146292 _ n ) ; <nl> + + if ( MinecraftForge . EVENT _ BUS . post ( event ) ) <nl> + + break ; <nl> + + this . field _ 146290 _ a = event . button ; <nl> + + event . button . func _ 146113 _ a ( this . field _ 146297 _ k . func _ 147118 _ V ( ) ) ; <nl> + + this . func _ 146284 _ a ( event . button ) ; <nl> + + if ( this . field _ 146297 _ k . field _ 71462 _ r . equals ( this ) ) <nl> + + MinecraftForge . EVENT _ BUS . post ( new ActionPerformedEvent . Post ( this , event . button , this . field _ 146292 _ n ) ) ; <nl> + } <nl> + } <nl> + } <nl> + @ @ - 234 , 8 + 250 , 12 @ @ <nl> + this . field _ 146289 _ q = p _ 146280 _ 1 _ . field _ 71466 _ p ; <nl> + this . field _ 146294 _ l = p _ 146280 _ 2 _ ; <nl> + this . field _ 146295 _ m = p _ 146280 _ 3 _ ; <nl> + - this . field _ 146292 _ n . clear ( ) ; <nl> + - this . func _ 73866 _ w _ ( ) ; <nl> + + if ( ! MinecraftForge . EVENT _ BUS . post ( new InitGuiEvent . Pre ( this , this . field _ 146292 _ n ) ) ) <nl> + + { <nl> + + this . field _ 146292 _ n . clear ( ) ; <nl> + + this . func _ 73866 _ w _ ( ) ; <nl> + + } <nl> + + MinecraftForge . EVENT _ BUS . post ( new InitGuiEvent . Post ( this , this . field _ 146292 _ n ) ) ; <nl> + } <nl> + <nl> + public void func _ 73866 _ w _ ( ) { } <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch <nl> index 09a97b8 . . 8559ac7 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch <nl> @ @ - 1 , 18 + 1 , 19 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / EntityRenderer . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / EntityRenderer . java <nl> - @ @ - 51 , 6 + 51 , 11 @ @ <nl> + @ @ - 51 , 6 + 51 , 12 @ @ <nl> import org . lwjgl . opengl . GL11 ; <nl> import org . lwjgl . opengl . GLContext ; <nl> import org . lwjgl . util . glu . Project ; <nl> + import net . minecraftforge . client . ForgeHooksClient ; <nl> + import net . minecraftforge . client . IRenderHandler ; <nl> + import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> + + import net . minecraftforge . client . event . GuiScreenEvent . DrawScreenEvent ; <nl> + import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> <nl> @ SideOnly ( Side . CLIENT ) <nl> public class EntityRenderer implements IResourceManagerReloadListener <nl> - @ @ - 358 , 7 + 363 , 7 @ @ <nl> + @ @ - 358 , 7 + 364 , 7 @ @ <nl> <nl> if ( d3 < d2 | | d2 = = 0 . 0D ) <nl> { <nl> @ @ - 21 , 7 + 22 , 7 @ @ <nl> { <nl> if ( d2 = = 0 . 0D ) <nl> { <nl> - @ @ - 392 , 8 + 397 , 15 @ @ <nl> + @ @ - 392 , 8 + 398 , 15 @ @ <nl> <nl> private void func _ 78477 _ e ( ) <nl> { <nl> @ @ - 39 , 7 + 40 , 7 @ @ <nl> this . field _ 78506 _ S = this . field _ 78507 _ R ; <nl> this . field _ 78507 _ R + = ( this . field _ 78501 _ T - this . field _ 78507 _ R ) * 0 . 5F ; <nl> <nl> - @ @ - 416 , 7 + 428 , 7 @ @ <nl> + @ @ - 416 , 7 + 429 , 7 @ @ <nl> } <nl> else <nl> { <nl> @ @ - 48 , 7 + 49 , 7 @ @ <nl> float f1 = 70 . 0F ; <nl> <nl> if ( p _ 78481 _ 2 _ ) <nl> - @ @ - 497 , 15 + 509 , 7 @ @ <nl> + @ @ - 497 , 15 + 510 , 7 @ @ <nl> <nl> if ( ! this . field _ 78531 _ r . field _ 71474 _ y . field _ 74325 _ U ) <nl> { <nl> @ @ - 65 , 7 + 66 , 18 @ @ <nl> GL11 . glRotatef ( entitylivingbase . field _ 70126 _ B + ( entitylivingbase . field _ 70177 _ z - entitylivingbase . field _ 70126 _ B ) * p _ 78467 _ 1 _ + 180 . 0F , 0 . 0F , - 1 . 0F , 0 . 0F ) ; <nl> GL11 . glRotatef ( entitylivingbase . field _ 70127 _ C + ( entitylivingbase . field _ 70125 _ A - entitylivingbase . field _ 70127 _ C ) * p _ 78467 _ 1 _ , - 1 . 0F , 0 . 0F , 0 . 0F ) ; <nl> } <nl> - @ @ - 1203 , 7 + 1207 , 10 @ @ <nl> + @ @ - 1052 , 7 + 1057 , 9 @ @ <nl> + <nl> + try <nl> + { <nl> + - this . field _ 78531 _ r . field _ 71462 _ r . func _ 73863 _ a ( k , l , p _ 78480 _ 1 _ ) ; <nl> + + if ( ! MinecraftForge . EVENT _ BUS . post ( new DrawScreenEvent . Pre ( this . field _ 78531 _ r . field _ 71462 _ r , k , l , p _ 78480 _ 1 _ ) ) ) <nl> + + this . field _ 78531 _ r . field _ 71462 _ r . func _ 73863 _ a ( k , l , p _ 78480 _ 1 _ ) ; <nl> + + MinecraftForge . EVENT _ BUS . post ( new DrawScreenEvent . Post ( this . field _ 78531 _ r . field _ 71462 _ r , k , l , p _ 78480 _ 1 _ ) ) ; <nl> + } <nl> + catch ( Throwable throwable ) <nl> + { <nl> + @ @ - 1203 , 7 + 1210 , 10 @ @ <nl> GL11 . glPushMatrix ( ) ; <nl> RenderHelper . func _ 74519 _ b ( ) ; <nl> this . field _ 78531 _ r . field _ 71424 _ I . func _ 76318 _ c ( " entities " ) ; <nl> @ @ - 76 , 7 + 88 , 7 @ @ <nl> this . func _ 78463 _ b ( ( double ) p _ 78471 _ 1 _ ) ; <nl> this . field _ 78531 _ r . field _ 71424 _ I . func _ 76318 _ c ( " litParticles " ) ; <nl> effectrenderer . func _ 78872 _ b ( entitylivingbase , p _ 78471 _ 1 _ ) ; <nl> - @ @ - 1221 , 7 + 1228 , 10 @ @ <nl> + @ @ - 1221 , 7 + 1231 , 10 @ @ <nl> entityplayer = ( EntityPlayer ) entitylivingbase ; <nl> GL11 . glDisable ( GL11 . GL _ ALPHA _ TEST ) ; <nl> this . field _ 78531 _ r . field _ 71424 _ I . func _ 76318 _ c ( " outline " ) ; <nl> @ @ - 88 , 7 + 100 , 7 @ @ <nl> GL11 . glEnable ( GL11 . GL _ ALPHA _ TEST ) ; <nl> } <nl> } <nl> - @ @ - 1234 , 14 + 1244 , 17 @ @ <nl> + @ @ - 1234 , 14 + 1247 , 17 @ @ <nl> entityplayer = ( EntityPlayer ) entitylivingbase ; <nl> GL11 . glDisable ( GL11 . GL _ ALPHA _ TEST ) ; <nl> this . field _ 78531 _ r . field _ 71424 _ I . func _ 76318 _ c ( " outline " ) ; <nl> @ @ - 108 , 7 + 120 , 7 @ @ <nl> GL11 . glDisable ( GL11 . GL _ BLEND ) ; <nl> GL11 . glDepthMask ( false ) ; <nl> GL11 . glEnable ( GL11 . GL _ CULL _ FACE ) ; <nl> - @ @ - 1296 , 6 + 1309 , 16 @ @ <nl> + @ @ - 1296 , 6 + 1312 , 16 @ @ <nl> renderglobal . func _ 72719 _ a ( entitylivingbase , 1 , ( double ) p _ 78471 _ 1 _ ) ; <nl> } <nl> <nl> @ @ - 125 , 7 + 137 , 7 @ @ <nl> GL11 . glDepthMask ( true ) ; <nl> GL11 . glEnable ( GL11 . GL _ CULL _ FACE ) ; <nl> GL11 . glDisable ( GL11 . GL _ BLEND ) ; <nl> - @ @ - 1307 , 9 + 1330 , 12 @ @ <nl> + @ @ - 1307 , 9 + 1333 , 12 @ @ <nl> this . func _ 82829 _ a ( renderglobal , p _ 78471 _ 1 _ ) ; <nl> } <nl> <nl> @ @ - 139 , 7 + 151 , 7 @ @ <nl> { <nl> GL11 . glClear ( GL11 . GL _ DEPTH _ BUFFER _ BIT ) ; <nl> this . func _ 78476 _ b ( p _ 78471 _ 1 _ , j ) ; <nl> - @ @ - 1425 , 6 + 1451 , 13 @ @ <nl> + @ @ - 1425 , 6 + 1454 , 13 @ @ <nl> <nl> protected void func _ 78474 _ d ( float p _ 78474 _ 1 _ ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> index df997ab . . 75f9cb1 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> @ @ - 630 , 7 + 630 , 7 @ @ public class GuiIngameForge extends GuiIngame <nl> } <nl> <nl> <nl> - if ( this . mc . gameSettings . showDebugInfo ) <nl> + if ( this . mc . gameSettings . showDebugInfo & & ! pre ( DEBUG ) ) <nl> { <nl> mc . mcProfiler . startSection ( " debug " ) ; <nl> GL11 . glPushMatrix ( ) ; <nl> @ @ - 688 , 6 + 688 , 7 @ @ public class GuiIngameForge extends GuiIngame <nl> } <nl> GL11 . glPopMatrix ( ) ; <nl> mc . mcProfiler . endSection ( ) ; <nl> + post ( DEBUG ) ; <nl> } <nl> <nl> RenderGameOverlayEvent . Text event = new RenderGameOverlayEvent . Text ( eventParent , left , right ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java b / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java <nl> new file mode 100644 <nl> index 0000000 . . fc7a78f <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java <nl> @ @ - 0 , 0 + 1 , 179 @ @ <nl> + package net . minecraftforge . client . event ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . client . gui . GuiButton ; <nl> + import net . minecraft . client . gui . GuiScreen ; <nl> + import cpw . mods . fml . common . eventhandler . Cancelable ; <nl> + import cpw . mods . fml . common . eventhandler . Event ; <nl> + import cpw . mods . fml . relauncher . Side ; <nl> + import cpw . mods . fml . relauncher . SideOnly ; <nl> + <nl> + / * * <nl> + * Event classes for GuiScreen events . <nl> + * <nl> + * @ author bspkrs <nl> + * / <nl> + @ SideOnly ( Side . CLIENT ) <nl> + public class GuiScreenEvent extends Event <nl> + { <nl> + / * * <nl> + * The GuiScreen object generating this event . <nl> + * / <nl> + public final GuiScreen gui ; <nl> + <nl> + public GuiScreenEvent ( GuiScreen gui ) <nl> + { <nl> + this . gui = gui ; <nl> + } <nl> + <nl> + public static class InitGuiEvent extends GuiScreenEvent <nl> + { <nl> + / * * <nl> + * The { @ code buttonList } field from the GuiScreen object referenced by { @ code gui } . <nl> + * / <nl> + public List buttonList ; <nl> + <nl> + public InitGuiEvent ( GuiScreen gui , List buttonList ) <nl> + { <nl> + super ( gui ) ; <nl> + this . buttonList = buttonList ; <nl> + } <nl> + <nl> + / * * <nl> + * This event fires just after initializing { @ code GuiScreen . mc } , { @ code GuiScreen . fontRendererObj } , <nl> + * { @ code GuiScreen . width } , and { @ code GuiScreen . height } , and just before calling { @ code GuiScreen . buttonList . clear ( ) } <nl> + * and { @ code GuiScreen . initGui ( ) } . To skip or override a screen ' s initGui ( ) method cancel the event . < br / > < br / > <nl> + * <nl> + * If canceled the following lines are skipped in { @ code GuiScreen . setWorldAndResolution ( ) } : < br / > <nl> + * { @ code this . buttonList . clear ( ) ; } < br / > <nl> + * { @ code this . initGui ( ) ; } < br / > <nl> + * <nl> + * @ author bspkrs <nl> + * / <nl> + @ Cancelable <nl> + public static class Pre extends InitGuiEvent <nl> + { <nl> + public Pre ( GuiScreen gui , List buttonList ) <nl> + { <nl> + super ( gui , buttonList ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This event fires right after { @ code GuiScreen . initGui ( ) } . <nl> + * This is a good place to alter a GuiScreen ' s component layout if desired . <nl> + * <nl> + * @ author bspkrs <nl> + * / <nl> + public static class Post extends InitGuiEvent <nl> + { <nl> + public Post ( GuiScreen gui , List buttonList ) <nl> + { <nl> + super ( gui , buttonList ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static class DrawScreenEvent extends GuiScreenEvent <nl> + { <nl> + / * * <nl> + * The x coordinate of the mouse pointer on the screen . <nl> + * / <nl> + public final int mouseX ; <nl> + / * * <nl> + * The y coordinate of the mouse pointer on the screen . <nl> + * / <nl> + public final int mouseY ; <nl> + / * * <nl> + * Partial render ticks elapsed . <nl> + * / <nl> + public final float renderPartialTicks ; <nl> + <nl> + public DrawScreenEvent ( GuiScreen gui , int mouseX , int mouseY , float renderPartialTicks ) <nl> + { <nl> + super ( gui ) ; <nl> + this . mouseX = mouseX ; <nl> + this . mouseY = mouseY ; <nl> + this . renderPartialTicks = renderPartialTicks ; <nl> + } <nl> + <nl> + / * * <nl> + * This event fires just before { @ code GuiScreen . drawScreen ( ) } is called . <nl> + * Cancel this event to skip { @ code GuiScreen . drawScreen ( ) } . <nl> + * <nl> + * @ author bspkrs <nl> + * / <nl> + @ Cancelable <nl> + public static class Pre extends DrawScreenEvent <nl> + { <nl> + public Pre ( GuiScreen gui , int mouseX , int mouseY , float renderPartialTicks ) <nl> + { <nl> + super ( gui , mouseX , mouseY , renderPartialTicks ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This event fires just after { @ code GuiScreen . drawScreen ( ) } is called . <nl> + * <nl> + * @ author bspkrs <nl> + * / <nl> + public static class Post extends DrawScreenEvent <nl> + { <nl> + public Post ( GuiScreen gui , int mouseX , int mouseY , float renderPartialTicks ) <nl> + { <nl> + super ( gui , mouseX , mouseY , renderPartialTicks ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static class ActionPerformedEvent extends GuiScreenEvent <nl> + { <nl> + / * * <nl> + * The button that was clicked . <nl> + * / <nl> + public GuiButton button ; <nl> + / * * <nl> + * A COPY of the { @ code buttonList } field from the GuiScreen referenced by { @ code gui } . <nl> + * / <nl> + public List buttonList ; <nl> + <nl> + public ActionPerformedEvent ( GuiScreen gui , GuiButton button , List buttonList ) <nl> + { <nl> + super ( gui ) ; <nl> + this . button = button ; <nl> + this . buttonList = new ArrayList ( buttonList ) ; <nl> + } <nl> + <nl> + / * * <nl> + * This event fires once it has been determined that a GuiButton object has been clicked . <nl> + * Cancel this event to bypass { @ code GuiScreen . actionPerformed ( ) } . <nl> + * Replace button with a different button from buttonList to have that button ' s action executed . <nl> + * <nl> + * @ author bspkrs <nl> + * / <nl> + @ Cancelable <nl> + public static class Pre extends ActionPerformedEvent <nl> + { <nl> + public Pre ( GuiScreen gui , GuiButton button , List buttonList ) <nl> + { <nl> + super ( gui , button , buttonList ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This event fires after { @ code GuiScreen . actionPerformed ( ) } provided that the active <nl> + * screen has not been changed as a result of { @ code GuiScreen . actionPerformed ( ) } . <nl> + * <nl> + * @ author bspkrs <nl> + * / <nl> + public static class Post extends ActionPerformedEvent <nl> + { <nl> + public Post ( GuiScreen gui , GuiButton button , List buttonList ) <nl> + { <nl> + super ( gui , button , buttonList ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / RenderGameOverlayEvent . java b / src / main / java / net / minecraftforge / client / event / RenderGameOverlayEvent . java <nl> index a6dd865 . . a452ccd 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / event / RenderGameOverlayEvent . java <nl> + + + b / src / main / java / net / minecraftforge / client / event / RenderGameOverlayEvent . java <nl> @ @ - 27 , 7 + 27 , 8 @ @ public class RenderGameOverlayEvent extends Event <nl> HEALTHMOUNT , <nl> JUMPBAR , <nl> CHAT , <nl> - PLAYER _ LIST <nl> + PLAYER _ LIST , <nl> + DEBUG <nl> } <nl> <nl> public final float partialTicks ;

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / KeyboardListener . java . patch b / patches / minecraft / net / minecraft / client / KeyboardListener . java . patch 
 new file mode 100644 
 index 0000000 . . 6ab1390 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / KeyboardListener . java . patch 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + - - - a / net / minecraft / client / KeyboardListener . java 
 + + + + b / net / minecraft / client / KeyboardListener . java 
 + @ @ - 266 , 10 + 266 , 14 @ @ 
 + GuiScreen . func _ 195121 _ a ( ( ) - > { 
 + if ( p _ 197961 _ 5 _ ! = 1 & & ( p _ 197961 _ 5 _ ! = 2 | | ! this . field _ 197973 _ b ) ) { 
 + if ( p _ 197961 _ 5 _ = = 0 ) { 
 + - aboolean [ 0 ] = iguieventlistener . keyReleased ( p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; 
 + + aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiKeyReleasedPre ( this . field _ 197972 _ a . field _ 71462 _ r , p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; 
 + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = iguieventlistener . keyReleased ( p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; 
 + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiKeyReleasedPost ( this . field _ 197972 _ a . field _ 71462 _ r , p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; 
 + } 
 + } else { 
 + - aboolean [ 0 ] = iguieventlistener . keyPressed ( p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; 
 + + aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiKeyPressedPre ( this . field _ 197972 _ a . field _ 71462 _ r , p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; 
 + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = iguieventlistener . keyPressed ( p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; 
 + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiKeyPressedPost ( this . field _ 197972 _ a . field _ 71462 _ r , p _ 197961 _ 3 _ , p _ 197961 _ 4 _ , p _ 197961 _ 6 _ ) ; 
 + } 
 + 
 + } , " keyPressed event handler " , iguieventlistener . getClass ( ) . getCanonicalName ( ) ) ; 
 + @ @ - 346 , 12 + 350 , 16 @ @ 
 + if ( iguieventlistener ! = null ) { 
 + if ( Character . charCount ( p _ 197963 _ 3 _ ) = = 1 ) { 
 + GuiScreen . func _ 195121 _ a ( ( ) - > { 
 + - iguieventlistener . charTyped ( ( char ) p _ 197963 _ 3 _ , p _ 197963 _ 4 _ ) ; 
 + + if ( net . minecraftforge . client . ForgeHooksClient . onGuiCharTypedPre ( this . field _ 197972 _ a . field _ 71462 _ r , ( char ) p _ 197963 _ 3 _ , p _ 197963 _ 4 _ ) ) return ; 
 + + if ( iguieventlistener . charTyped ( ( char ) p _ 197963 _ 3 _ , p _ 197963 _ 4 _ ) ) return ; 
 + + net . minecraftforge . client . ForgeHooksClient . onGuiCharTypedPost ( this . field _ 197972 _ a . field _ 71462 _ r , ( char ) p _ 197963 _ 3 _ , p _ 197963 _ 4 _ ) ; 
 + } , " charTyped event handler " , iguieventlistener . getClass ( ) . getCanonicalName ( ) ) ; 
 + } else { 
 + for ( char c0 : Character . toChars ( p _ 197963 _ 3 _ ) ) { 
 + GuiScreen . func _ 195121 _ a ( ( ) - > { 
 + - iguieventlistener . charTyped ( c0 , p _ 197963 _ 4 _ ) ; 
 + + if ( net . minecraftforge . client . ForgeHooksClient . onGuiCharTypedPre ( this . field _ 197972 _ a . field _ 71462 _ r , c0 , p _ 197963 _ 4 _ ) ) return ; 
 + + if ( iguieventlistener . charTyped ( c0 , p _ 197963 _ 4 _ ) ) return ; 
 + + net . minecraftforge . client . ForgeHooksClient . onGuiCharTypedPost ( this . field _ 197972 _ a . field _ 71462 _ r , c0 , p _ 197963 _ 4 _ ) ; 
 + } , " charTyped event handler " , iguieventlistener . getClass ( ) . getCanonicalName ( ) ) ; 
 + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / client / MouseHelper . java . patch b / patches / minecraft / net / minecraft / client / MouseHelper . java . patch 
 new file mode 100644 
 index 0000000 . . 83522d3 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / MouseHelper . java . patch 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + - - - a / net / minecraft / client / MouseHelper . java 
 + + + + b / net / minecraft / client / MouseHelper . java 
 + @ @ - 76 , 11 + 76 , 15 @ @ 
 + final int pFinal = p _ 198023 _ 3 _ ; 
 + if ( flag ) { 
 + GuiScreen . func _ 195121 _ a ( ( ) - > { 
 + - aboolean [ 0 ] = this . field _ 198036 _ a . field _ 71462 _ r . mouseClicked ( d0 , d1 , pFinal ) ; 
 + + aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiMouseClickedPre ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , pFinal ) ; 
 + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = this . field _ 198036 _ a . field _ 71462 _ r . mouseClicked ( d0 , d1 , pFinal ) ; 
 + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiMouseClickedPost ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , pFinal ) ; 
 + } , " mouseClicked event handler " , this . field _ 198036 _ a . field _ 71462 _ r . getClass ( ) . getCanonicalName ( ) ) ; 
 + } else { 
 + GuiScreen . func _ 195121 _ a ( ( ) - > { 
 + - aboolean [ 0 ] = this . field _ 198036 _ a . field _ 71462 _ r . mouseReleased ( d0 , d1 , pFinal ) ; 
 + + aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiMouseReleasedPre ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , pFinal ) ; 
 + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = this . field _ 198036 _ a . field _ 71462 _ r . mouseReleased ( d0 , d1 , pFinal ) ; 
 + + if ( ! aboolean [ 0 ] ) aboolean [ 0 ] = net . minecraftforge . client . ForgeHooksClient . onGuiMouseReleasedPost ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , pFinal ) ; 
 + } , " mouseReleased event handler " , this . field _ 198036 _ a . field _ 71462 _ r . getClass ( ) . getCanonicalName ( ) ) ; 
 + } 
 + } 
 + @ @ - 111 , 7 + 115 , 9 @ @ 
 + if ( p _ 198020 _ 1 _ = = Minecraft . func _ 71410 _ x ( ) . field _ 195558 _ d . func _ 198092 _ i ( ) ) { 
 + double d0 = p _ 198020 _ 5 _ * this . field _ 198036 _ a . field _ 71474 _ y . field _ 208033 _ V ; 
 + if ( this . field _ 198036 _ a . field _ 71462 _ r ! = null ) { 
 + - this . field _ 198036 _ a . field _ 71462 _ r . mouseScrolled ( d0 ) ; 
 + + if ( net . minecraftforge . client . ForgeHooksClient . onGuiMouseScrollPre ( this , this . field _ 198036 _ a . field _ 71462 _ r , d0 ) ) return ; 
 + + if ( this . field _ 198036 _ a . field _ 71462 _ r . mouseScrolled ( d0 ) ) return ; 
 + + net . minecraftforge . client . ForgeHooksClient . onGuiMouseScrollPost ( this , this . field _ 198036 _ a . field _ 71462 _ r , d0 ) ; 
 + } else if ( this . field _ 198036 _ a . field _ 71439 _ g ! = null ) { 
 + if ( this . field _ 200542 _ o ! = 0 . 0D & & Math . signum ( d0 ) ! = Math . signum ( this . field _ 200542 _ o ) ) { 
 + this . field _ 200542 _ o = 0 . 0D ; 
 + @ @ - 160 , 7 + 166 , 9 @ @ 
 + double d2 = ( p _ 198022 _ 3 _ - this . field _ 198040 _ e ) * ( double ) this . field _ 198036 _ a . field _ 195558 _ d . func _ 198107 _ o ( ) / ( double ) this . field _ 198036 _ a . field _ 195558 _ d . func _ 198105 _ m ( ) ; 
 + double d3 = ( p _ 198022 _ 5 _ - this . field _ 198041 _ f ) * ( double ) this . field _ 198036 _ a . field _ 195558 _ d . func _ 198087 _ p ( ) / ( double ) this . field _ 198036 _ a . field _ 195558 _ d . func _ 198083 _ n ( ) ; 
 + GuiScreen . func _ 195121 _ a ( ( ) - > { 
 + - iguieventlistener . mouseDragged ( d0 , d1 , this . field _ 198042 _ g , d2 , d3 ) ; 
 + + if ( net . minecraftforge . client . ForgeHooksClient . onGuiMouseDragPre ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , this . field _ 198042 _ g , d2 , d3 ) ) return ; 
 + + if ( iguieventlistener . mouseDragged ( d0 , d1 , this . field _ 198042 _ g , d2 , d3 ) ) return ; 
 + + net . minecraftforge . client . ForgeHooksClient . onGuiMouseDragPost ( this . field _ 198036 _ a . field _ 71462 _ r , d0 , d1 , this . field _ 198042 _ g , d2 , d3 ) ; 
 + } , " mouseDragged event handler " , iguieventlistener . getClass ( ) . getCanonicalName ( ) ) ; 
 + } 
 + 
 diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch 
 index f5b5f8e . . 20e545c 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch 
 @ @ - 1 , 14 + 1 , 6 @ @ 
 - - - a / net / minecraft / client / gui / GuiScreen . java 
 + + + b / net / minecraft / client / gui / GuiScreen . java 
 - @ @ - 51 , 6 + 51 , 7 @ @ 
 - public boolean field _ 146291 _ p ; 
 - protected FontRenderer field _ 146289 _ q ; 
 - private URI field _ 175286 _ t ; 
 - + protected boolean keyHandled , mouseHandled ; / / Forge : allow canceling key and mouse Post events from handleMouseInput and handleKeyboardInput 
 - 
 - public void func _ 73863 _ a ( int p _ 73863 _ 1 _ , int p _ 73863 _ 2 _ , float p _ 73863 _ 3 _ ) { 
 - for ( int i = 0 ; i < this . field _ 146292 _ n . size ( ) ; + + i ) { 
 - @ @ - 87 , 7 + 88 , 10 @ @ 
 + @ @ - 87 , 7 + 87 , 10 @ @ 
 } 
 
 protected void func _ 146285 _ a ( ItemStack p _ 146285 _ 1 _ , int p _ 146285 _ 2 _ , int p _ 146285 _ 3 _ ) { 
 @ @ - 20 , 7 + 12 , 7 @ @ 
 } 
 
 public List < String > func _ 191927 _ a ( ItemStack p _ 191927 _ 1 _ ) { 
 - @ @ - 106 , 25 + 110 , 30 @ @ 
 + @ @ - 106 , 25 + 109 , 30 @ @ 
 } 
 
 public void func _ 146283 _ a ( List < String > p _ 146283 _ 1 _ , int p _ 146283 _ 2 _ , int p _ 146283 _ 3 _ ) { 
 @ @ - 57 , 7 + 49 , 7 @ @ 
 } 
 
 if ( l1 + i > this . field _ 146294 _ l ) { 
 - @ @ - 150 , 8 + 159 , 8 @ @ 
 + @ @ - 150 , 8 + 158 , 8 @ @ 
 this . func _ 73733 _ a ( l1 - 3 , i2 - 3 , l1 + i + 3 , i2 - 3 + 1 , 1347420415 , 1347420415 ) ; 
 this . func _ 73733 _ a ( l1 - 3 , i2 + k + 2 , l1 + i + 3 , i2 + k + 3 , 1344798847 , 1344798847 ) ; 
 
 @ @ - 68 , 7 + 60 , 7 @ @ 
 this . field _ 146289 _ q . func _ 175063 _ a ( s1 , ( float ) l1 , ( float ) i2 , - 1 ) ; 
 if ( k1 = = 0 ) { 
 i2 + = 2 ; 
 - @ @ - 279 , 9 + 288 , 12 @ @ 
 + @ @ - 279 , 9 + 287 , 12 @ @ 
 } 
 
 public void func _ 175281 _ b ( String p _ 175281 _ 1 _ , boolean p _ 175281 _ 2 _ ) { 
 @ @ - 81 , 7 + 73 , 7 @ @ 
 
 this . field _ 146297 _ k . field _ 71439 _ g . func _ 71165 _ d ( p _ 175281 _ 1 _ ) ; 
 } 
 - @ @ - 292 , 9 + 304 , 13 @ @ 
 + @ @ - 292 , 9 + 303 , 13 @ @ 
 this . field _ 146289 _ q = p _ 146280 _ 1 _ . field _ 71466 _ p ; 
 this . field _ 146294 _ l = p _ 146280 _ 2 _ ; 
 this . field _ 146295 _ m = p _ 146280 _ 3 _ ; 
 @ @ - 95 , 11 + 87 , 19 @ @ 
 } 
 
 public List < ? extends IGuiEventListener > func _ 195074 _ b ( ) { 
 - @ @ - 313 , 6 + 329 , 7 @ @ 
 - 
 - public void func _ 146276 _ q _ ( ) { 
 - this . func _ 146270 _ b ( 0 ) ; 
 + @ @ - 318 , 6 + 333 , 7 @ @ 
 + public void func _ 146270 _ b ( int p _ 146270 _ 1 _ ) { 
 + if ( this . field _ 146297 _ k . field _ 71441 _ e ! = null ) { 
 + this . func _ 73733 _ a ( 0 , 0 , this . field _ 146294 _ l , this . field _ 146295 _ m , - 1072689136 , - 804253680 ) ; 
 + + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . client . event . GuiScreenEvent . BackgroundDrawnEvent ( this ) ) ; 
 + } else { 
 + this . func _ 146278 _ c ( p _ 146270 _ 1 _ ) ; 
 + } 
 + @ @ - 338 , 6 + 354 , 7 @ @ 
 + bufferbuilder . func _ 181662 _ b ( ( double ) this . field _ 146294 _ l , 0 . 0D , 0 . 0D ) . func _ 187315 _ a ( ( double ) ( ( float ) this . field _ 146294 _ l / 32 . 0F ) , ( double ) p _ 146278 _ 1 _ ) . func _ 181669 _ b ( 64 , 64 , 64 , 255 ) . func _ 181675 _ d ( ) ; 
 + bufferbuilder . func _ 181662 _ b ( 0 . 0D , 0 . 0D , 0 . 0D ) . func _ 187315 _ a ( 0 . 0D , ( double ) p _ 146278 _ 1 _ ) . func _ 181669 _ b ( 64 , 64 , 64 , 255 ) . func _ 181675 _ d ( ) ; 
 + tessellator . func _ 78381 _ a ( ) ; 
 + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . client . event . GuiScreenEvent . BackgroundDrawnEvent ( this ) ) ; 
 } 
 
 - public void func _ 146270 _ b ( int p _ 146270 _ 1 _ ) { 
 + public boolean func _ 73868 _ f ( ) { 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index b9e024b . . 939b3f1 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import javax . vecmath . Matrix4f ; 
 import javax . vecmath . Vector3f ; 
 import javax . vecmath . Vector4f ; 
 
 + import net . minecraft . client . MouseHelper ; 
 import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 @ @ - 120 , 6 + 121 , 7 @ @ import net . minecraftforge . common . model . ITransformation ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 import net . minecraftforge . fml . VersionChecker ; 
 import net . minecraftforge . fml . client . registry . ClientRegistry ; 
 + import net . minecraftforge . eventbus . api . Event ; 
 import net . minecraftforge . resource . ReloadRequirements ; 
 import net . minecraftforge . resource . SelectiveReloadStateHandler ; 
 import net . minecraftforge . resource . VanillaResourceType ; 
 @ @ - 717 , 6 + 719 , 95 @ @ public class ForgeHooksClient 
 SelectiveReloadStateHandler . INSTANCE . beginReload ( ReloadRequirements . include ( types ) ) ; 
 mc . refreshResources ( ) ; 
 SelectiveReloadStateHandler . INSTANCE . endReload ( ) ; 
 + } 
 + 
 + public static boolean onGuiMouseClickedPre ( GuiScreen guiScreen , double mouseX , double mouseY , int button ) 
 + { 
 + Event event = new GuiScreenEvent . MouseClickedEvent . Pre ( guiScreen , mouseX , mouseY , button ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 
 + public static boolean onGuiMouseClickedPost ( GuiScreen guiScreen , double mouseX , double mouseY , int button ) 
 + { 
 + Event event = new GuiScreenEvent . MouseClickedEvent . Post ( guiScreen , mouseX , mouseY , button ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiMouseReleasedPre ( GuiScreen guiScreen , double mouseX , double mouseY , int button ) 
 + { 
 + Event event = new GuiScreenEvent . MouseReleasedEvent . Pre ( guiScreen , mouseX , mouseY , button ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiMouseReleasedPost ( GuiScreen guiScreen , double mouseX , double mouseY , int button ) 
 + { 
 + Event event = new GuiScreenEvent . MouseReleasedEvent . Post ( guiScreen , mouseX , mouseY , button ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiMouseDragPre ( GuiScreen guiScreen , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) 
 + { 
 + Event event = new GuiScreenEvent . MouseDragEvent . Pre ( guiScreen , mouseX , mouseY , mouseButton , dragX , dragY ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiMouseDragPost ( GuiScreen guiScreen , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) 
 + { 
 + Event event = new GuiScreenEvent . MouseDragEvent . Post ( guiScreen , mouseX , mouseY , mouseButton , dragX , dragY ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiMouseScrollPre ( MouseHelper mouseHelper , GuiScreen guiScreen , double scrollDelta ) 
 + { 
 + MainWindow mainWindow = guiScreen . mc . mainWindow ; 
 + double mouseX = mouseHelper . getMouseX ( ) * ( double ) mainWindow . getScaledWidth ( ) / ( double ) mainWindow . getWidth ( ) ; 
 + double mouseY = mouseHelper . getMouseY ( ) * ( double ) mainWindow . getScaledHeight ( ) / ( double ) mainWindow . getHeight ( ) ; 
 + Event event = new GuiScreenEvent . MouseScrollEvent . Pre ( guiScreen , mouseX , mouseY , scrollDelta ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiMouseScrollPost ( MouseHelper mouseHelper , GuiScreen guiScreen , double scrollDelta ) 
 + { 
 + MainWindow mainWindow = guiScreen . mc . mainWindow ; 
 + double mouseX = mouseHelper . getMouseX ( ) * ( double ) mainWindow . getScaledWidth ( ) / ( double ) mainWindow . getWidth ( ) ; 
 + double mouseY = mouseHelper . getMouseY ( ) * ( double ) mainWindow . getScaledHeight ( ) / ( double ) mainWindow . getHeight ( ) ; 
 + Event event = new GuiScreenEvent . MouseScrollEvent . Post ( guiScreen , mouseX , mouseY , scrollDelta ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiKeyPressedPre ( GuiScreen guiScreen , int keyCode , int scanCode , int modifiers ) 
 + { 
 + Event event = new GuiScreenEvent . KeyboardKeyPressedEvent . Pre ( guiScreen , keyCode , scanCode , modifiers ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiKeyPressedPost ( GuiScreen guiScreen , int keyCode , int scanCode , int modifiers ) 
 + { 
 + Event event = new GuiScreenEvent . KeyboardKeyPressedEvent . Post ( guiScreen , keyCode , scanCode , modifiers ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiKeyReleasedPre ( GuiScreen guiScreen , int keyCode , int scanCode , int modifiers ) 
 + { 
 + Event event = new GuiScreenEvent . KeyboardKeyReleasedEvent . Pre ( guiScreen , keyCode , scanCode , modifiers ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiKeyReleasedPost ( GuiScreen guiScreen , int keyCode , int scanCode , int modifiers ) 
 + { 
 + Event event = new GuiScreenEvent . KeyboardKeyReleasedEvent . Post ( guiScreen , keyCode , scanCode , modifiers ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiCharTypedPre ( GuiScreen guiScreen , char codePoint , int modifiers ) 
 + { 
 + Event event = new GuiScreenEvent . KeyboardCharTypedEvent . Pre ( guiScreen , codePoint , modifiers ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 + public static boolean onGuiCharTypedPost ( GuiScreen guiScreen , char codePoint , int modifiers ) 
 + { 
 + Event event = new GuiScreenEvent . KeyboardCharTypedEvent . Post ( guiScreen , codePoint , modifiers ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java b / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java 
 index 85ad64c . . 6a287b9 100644 
 - - - a / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java 
 + + + b / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java 
 @ @ - 22 , 21 + 22 , 23 @ @ package net . minecraftforge . client . event ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . List ; 
 - import java . util . concurrent . Callable ; 
 import java . util . function . Consumer ; 
 - import java . util . function . Function ; 
 
 import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . gui . IGuiEventListener ; 
 import net . minecraft . client . renderer . InventoryEffectRenderer ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 import net . minecraftforge . api . distmarker . OnlyIn ; 
 
 import net . minecraft . client . gui . GuiButton ; 
 import net . minecraft . client . gui . GuiScreen ; 
 + import net . minecraft . client . util . InputMappings ; 
 
 import net . minecraftforge . eventbus . api . Cancelable ; 
 import net . minecraftforge . eventbus . api . Event ; 
 
 + import org . lwjgl . glfw . GLFW ; 
 + 
 / * * 
 * Event classes for GuiScreen events . 
 * 
 @ @ - 163 , 8 + 165 , 8 @ @ public class GuiScreenEvent extends Event 
 } 
 
 / * * 
 - * This event fires just before { @ link GuiScreen # drawScreen ( int , int , float ) } is called . 
 - * Cancel this event to skip { @ link GuiScreen # drawScreen ( int , int , float ) } . 
 + * This event fires just before { @ link GuiScreen # render ( int , int , float ) } is called . 
 + * Cancel this event to skip { @ link GuiScreen # render ( int , int , float ) } . 
 * / 
 @ Cancelable 
 public static class Pre extends DrawScreenEvent 
 @ @ - 176 , 7 + 178 , 7 @ @ public class GuiScreenEvent extends Event 
 } 
 
 / * * 
 - * This event fires just after { @ link GuiScreen # drawScreen ( int , int , float ) } is called . 
 + * This event fires just after { @ link GuiScreen # render ( int , int , float ) } is called . 
 * / 
 public static class Post extends DrawScreenEvent 
 { 
 @ @ - 188 , 42 + 190 , 15 @ @ public class GuiScreenEvent extends Event 
 } 
 
 / * * 
 - * This event fires at the end of { @ link GuiScreen # drawDefaultBackground ( ) } and before the rest of the Gui draws . 
 + * This event fires at the end of { @ link GuiScreen # drawBackground ( int ) } and before the rest of the Gui draws . 
 * This allows drawing next to Guis , above the background but below any tooltips . 
 * / 
 public static class BackgroundDrawnEvent extends GuiScreenEvent 
 { 
 - / / private final int mouseX ; 
 - / / private final int mouseY ; 
 - 
 public BackgroundDrawnEvent ( GuiScreen gui ) 
 { 
 super ( gui ) ; 
 - / * 
 - final ScaledResolution scaledresolution = new ScaledResolution ( gui . mc ) ; 
 - final int scaledWidth = scaledresolution . getScaledWidth ( ) ; 
 - final int scaledHeight = scaledresolution . getScaledHeight ( ) ; 
 - this . mouseX = Mouse . getX ( ) * scaledWidth / gui . mc . displayWidth ; 
 - this . mouseY = scaledHeight - Mouse . getY ( ) * scaledHeight / gui . mc . displayHeight - 1 ; 
 - * / 
 - } 
 - 
 - / * * 
 - * The x coordinate of the mouse pointer on the screen . 
 - * / 
 - public int getMouseX ( ) 
 - { 
 - return mouseX ; 
 - } 
 - 
 - / * * 
 - * The y coordinate of the mouse pointer on the screen . 
 - * / 
 - public int getMouseY ( ) 
 - { 
 - return mouseY ; 
 } 
 - * / 
 } 
 
 / * * 
 @ @ - 305 , 74 + 280 , 388 @ @ public class GuiScreenEvent extends Event 
 } 
 } 
 
 - public static class MouseInputEvent extends GuiScreenEvent 
 + public static abstract class MouseInputEvent extends GuiScreenEvent 
 + { 
 + private final double mouseX ; 
 + private final double mouseY ; 
 + 
 + public MouseInputEvent ( GuiScreen gui , double mouseX , double mouseY ) 
 + { 
 + super ( gui ) ; 
 + this . mouseX = mouseX ; 
 + this . mouseY = mouseY ; 
 + } 
 + 
 + public double getMouseX ( ) 
 + { 
 + return mouseX ; 
 + } 
 + 
 + public double getMouseY ( ) 
 + { 
 + return mouseY ; 
 + } 
 + } 
 + 
 + public static abstract class MouseClickedEvent extends MouseInputEvent 
 + { 
 + private final int button ; 
 + 
 + public MouseClickedEvent ( GuiScreen gui , double mouseX , double mouseY , int button ) 
 + { 
 + super ( gui , mouseX , mouseY ) ; 
 + this . button = button ; 
 + } 
 + 
 + public int getButton ( ) 
 + { 
 + return button ; 
 + } 
 + 
 + / * * 
 + * This event fires when a mouse click is detected for a GuiScreen , before it is handled . 
 + * Cancel this event to bypass { @ link IGuiEventListener # mouseClicked ( double , double , int ) } . 
 + * / 
 + @ Cancelable 
 + public static class Pre extends MouseClickedEvent 
 + { 
 + public Pre ( GuiScreen gui , double mouseX , double mouseY , int button ) 
 + { 
 + super ( gui , mouseX , mouseY , button ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * This event fires after { @ link IGuiEventListener # mouseClicked ( double , double , int ) } if the click was not already handled . 
 + * Cancel this event when you successfully use the mouse click , to prevent other handlers from using the same input . 
 + * / 
 + @ Cancelable 
 + public static class Post extends MouseClickedEvent 
 + { 
 + public Post ( GuiScreen gui , double mouseX , double mouseY , int button ) 
 + { 
 + super ( gui , mouseX , mouseY , button ) ; 
 + } 
 + } 
 + } 
 + 
 + public static abstract class MouseReleasedEvent extends MouseInputEvent 
 + { 
 + private final int button ; 
 + 
 + public MouseReleasedEvent ( GuiScreen gui , double mouseX , double mouseY , int button ) 
 + { 
 + super ( gui , mouseX , mouseY ) ; 
 + this . button = button ; 
 + } 
 + 
 + public int getButton ( ) 
 + { 
 + return button ; 
 + } 
 + 
 + / * * 
 + * This event fires when a mouse release is detected for a GuiScreen , before it is handled . 
 + * Cancel this event to bypass { @ link IGuiEventListener # mouseReleased ( double , double , int ) } . 
 + * / 
 + @ Cancelable 
 + public static class Pre extends MouseReleasedEvent 
 + { 
 + public Pre ( GuiScreen gui , double mouseX , double mouseY , int button ) 
 + { 
 + super ( gui , mouseX , mouseY , button ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * This event fires after { @ link IGuiEventListener # mouseReleased ( double , double , int ) } if the release was not already handled . 
 + * Cancel this event when you successfully use the mouse release , to prevent other handlers from using the same input . 
 + * / 
 + @ Cancelable 
 + public static class Post extends MouseReleasedEvent 
 + { 
 + public Post ( GuiScreen gui , double mouseX , double mouseY , int button ) 
 + { 
 + super ( gui , mouseX , mouseY , button ) ; 
 + } 
 + } 
 + } 
 + 
 + public static abstract class MouseDragEvent extends MouseInputEvent 
 + { 
 + private final int mouseButton ; 
 + private final double dragX ; 
 + private final double dragY ; 
 + 
 + public MouseDragEvent ( GuiScreen gui , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) 
 + { 
 + super ( gui , mouseX , mouseY ) ; 
 + this . mouseButton = mouseButton ; 
 + this . dragX = dragX ; 
 + this . dragY = dragY ; 
 + } 
 + 
 + public int getMouseButton ( ) 
 + { 
 + return mouseButton ; 
 + } 
 + 
 + public double getDragX ( ) 
 + { 
 + return dragX ; 
 + } 
 + 
 + public double getDragY ( ) 
 + { 
 + return dragY ; 
 + } 
 + 
 + / * * 
 + * This event fires when a mouse drag is detected for a GuiScreen , before it is handled . 
 + * Cancel this event to bypass { @ link IGuiEventListener # mouseDragged ( double , double , int , double , double ) } . 
 + * / 
 + @ Cancelable 
 + public static class Pre extends MouseDragEvent 
 + { 
 + public Pre ( GuiScreen gui , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) 
 + { 
 + super ( gui , mouseX , mouseY , mouseButton , dragX , dragY ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * This event fires after { @ link IGuiEventListener # mouseDragged ( double , double , int , double , double ) } if the drag was not already handled . 
 + * Cancel this event when you successfully use the mouse drag , to prevent other handlers from using the same input . 
 + * / 
 + @ Cancelable 
 + public static class Post extends MouseDragEvent 
 + { 
 + public Post ( GuiScreen gui , double mouseX , double mouseY , int mouseButton , double dragX , double dragY ) 
 + { 
 + super ( gui , mouseX , mouseY , mouseButton , dragX , dragY ) ; 
 + } 
 + } 
 + } 
 + 
 + public static abstract class MouseScrollEvent extends MouseInputEvent 
 { 
 - public MouseInputEvent ( GuiScreen gui ) 
 + private final double scrollDelta ; 
 + 
 + public MouseScrollEvent ( GuiScreen gui , double mouseX , double mouseY , double scrollDelta ) 
 + { 
 + super ( gui , mouseX , mouseY ) ; 
 + this . scrollDelta = scrollDelta ; 
 + } 
 + 
 + public double getScrollDelta ( ) 
 + { 
 + return scrollDelta ; 
 + } 
 + 
 + / * * 
 + * This event fires when a mouse scroll is detected for a GuiScreen , before it is handled . 
 + * Cancel this event to bypass { @ link IGuiEventListener # mouseScrolled ( double ) } . 
 + * / 
 + @ Cancelable 
 + public static class Pre extends MouseScrollEvent 
 + { 
 + public Pre ( GuiScreen gui , double mouseX , double mouseY , double scrollDelta ) 
 + { 
 + super ( gui , mouseX , mouseY , scrollDelta ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * This event fires after { @ link IGuiEventListener # mouseScrolled ( double ) } if the scroll was not already handled . 
 + * Cancel this event when you successfully use the mouse scroll , to prevent other handlers from using the same input . 
 + * / 
 + @ Cancelable 
 + public static class Post extends MouseScrollEvent 
 + { 
 + public Post ( GuiScreen gui , double mouseX , double mouseY , double scrollDelta ) 
 + { 
 + super ( gui , mouseX , mouseY , scrollDelta ) ; 
 + } 
 + } 
 + } 
 + 
 + public static abstract class KeyboardKeyEvent extends GuiScreenEvent 
 + { 
 + private final int keyCode ; 
 + private final int scanCode ; 
 + private final int modifiers ; 
 + 
 + public KeyboardKeyEvent ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) 
 { 
 super ( gui ) ; 
 + this . keyCode = keyCode ; 
 + this . scanCode = scanCode ; 
 + this . modifiers = modifiers ; 
 + } 
 + 
 + / * * 
 + * The keyboard key that was pressed or released 
 + * https : / / www . glfw . org / docs / latest / group _ _ keys . html 
 + * 
 + * @ see GLFW key constants starting with " GLFW _ KEY _ " 
 + * / 
 + public int getKeyCode ( ) 
 + { 
 + return keyCode ; 
 } 
 
 / * * 
 - * This event fires when mouse input is detected by a GuiScreen . 
 - * Cancel this event to bypass { @ link GuiScreen # handleMouseInput ( ) } . 
 + * Platform - specific scan code . 
 + * Used for { @ link InputMappings # getInputByCode ( int , int ) } 
 + * 
 + * The scan code is unique for every key , regardless of whether it has a key code . 
 + * Scan codes are platform - specific but consistent over time , so keys will have different scan codes depending 
 + * on the platform but they are safe to save to disk as custom key bindings . 
 + * / 
 + public int getScanCode ( ) 
 + { 
 + return scanCode ; 
 + } 
 + 
 + / * * 
 + * Bit field representing the modifier keys pressed . 
 + * https : / / www . glfw . org / docs / latest / group _ _ mods . html 
 + * 
 + * @ see GLFW # GLFW _ MOD _ SHIFT 
 + * @ see GLFW # GLFW _ MOD _ CONTROL 
 + * @ see GLFW # GLFW _ MOD _ ALT 
 + * @ see GLFW # GLFW _ MOD _ SUPER 
 + * / 
 + public int getModifiers ( ) 
 + { 
 + return modifiers ; 
 + } 
 + } 
 + 
 + public static abstract class KeyboardKeyPressedEvent extends KeyboardKeyEvent 
 + { 
 + public KeyboardKeyPressedEvent ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) 
 + { 
 + super ( gui , keyCode , scanCode , modifiers ) ; 
 + } 
 + 
 + / * * 
 + * This event fires when keyboard input is detected for a GuiScreen , before it is handled . 
 + * Cancel this event to bypass { @ link IGuiEventListener # keyPressed ( int , int , int ) } . 
 + * / 
 + @ Cancelable 
 + public static class Pre extends KeyboardKeyPressedEvent 
 + { 
 + public Pre ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) 
 + { 
 + super ( gui , keyCode , scanCode , modifiers ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * This event fires after { @ link IGuiEventListener # keyPressed ( int , int , int ) } if the key was not already handled . 
 + * Cancel this event when you successfully use the keyboard input to prevent other handlers from using the same input . 
 + * / 
 + @ Cancelable 
 + public static class Post extends KeyboardKeyPressedEvent 
 + { 
 + public Post ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) 
 + { 
 + super ( gui , keyCode , scanCode , modifiers ) ; 
 + } 
 + } 
 + } 
 + 
 + public static abstract class KeyboardKeyReleasedEvent extends KeyboardKeyEvent 
 + { 
 + public KeyboardKeyReleasedEvent ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) 
 + { 
 + super ( gui , keyCode , scanCode , modifiers ) ; 
 + } 
 + 
 + / * * 
 + * This event fires when keyboard input is detected for a GuiScreen , before it is handled . 
 + * Cancel this event to bypass { @ link IGuiEventListener # keyReleased ( int , int , int ) } . 
 * / 
 @ Cancelable 
 - public static class Pre extends MouseInputEvent 
 + public static class Pre extends KeyboardKeyReleasedEvent 
 { 
 - public Pre ( GuiScreen gui ) 
 + public Pre ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) 
 { 
 - super ( gui ) ; 
 + super ( gui , keyCode , scanCode , modifiers ) ; 
 } 
 } 
 
 / * * 
 - * This event fires after { @ link GuiScreen # handleMouseInput ( ) } provided that the active 
 - * screen has not been changed as a result of { @ link GuiScreen # handleMouseInput ( ) } and 
 - * the { @ link GuiScreen # mouseHandled } flag has not been set . 
 - * Cancel this event when you successfully use the mouse input to prevent other handlers from using the same input . 
 + * This event fires after { @ link IGuiEventListener # keyReleased ( int , int , int ) } if the key was not already handled . 
 + * Cancel this event when you successfully use the keyboard input to prevent other handlers from using the same input . 
 * / 
 @ Cancelable 
 - public static class Post extends MouseInputEvent 
 + public static class Post extends KeyboardKeyReleasedEvent 
 { 
 - public Post ( GuiScreen gui ) 
 + public Post ( GuiScreen gui , int keyCode , int scanCode , int modifiers ) 
 { 
 - super ( gui ) ; 
 + super ( gui , keyCode , scanCode , modifiers ) ; 
 } 
 } 
 } 
 
 - public static class KeyboardInputEvent extends GuiScreenEvent 
 + public static class KeyboardCharTypedEvent extends GuiScreenEvent 
 { 
 - public KeyboardInputEvent ( GuiScreen gui ) 
 + private final char codePoint ; 
 + private final int modifiers ; 
 + 
 + public KeyboardCharTypedEvent ( GuiScreen gui , char codePoint , int modifiers ) 
 { 
 super ( gui ) ; 
 + this . codePoint = codePoint ; 
 + this . modifiers = modifiers ; 
 + } 
 + 
 + / * * 
 + * The code point typed , used for text entry . 
 + * / 
 + public char getCodePoint ( ) 
 + { 
 + return codePoint ; 
 + } 
 + 
 + / * * 
 + * Bit field representing the modifier keys pressed . 
 + * 
 + * @ see GLFW # GLFW _ MOD _ SHIFT 
 + * @ see GLFW # GLFW _ MOD _ CONTROL 
 + * @ see GLFW # GLFW _ MOD _ ALT 
 + * @ see GLFW # GLFW _ MOD _ SUPER 
 + * / 
 + public int getModifiers ( ) 
 + { 
 + return modifiers ; 
 } 
 
 / * * 
 - * This event fires when keyboard input is detected by a GuiScreen . 
 - * Cancel this event to bypass { @ link GuiScreen # handleKeyboardInput ( ) } . 
 + * This event fires when keyboard character input is detected for a GuiScreen , before it is handled . 
 + * Cancel this event to bypass { @ link IGuiEventListener # charTyped ( char , int ) } . 
 * / 
 @ Cancelable 
 - public static class Pre extends KeyboardInputEvent 
 + public static class Pre extends KeyboardCharTypedEvent 
 { 
 - public Pre ( GuiScreen gui ) 
 + public Pre ( GuiScreen gui , char codePoint , int modifiers ) 
 { 
 - super ( gui ) ; 
 + super ( gui , codePoint , modifiers ) ; 
 } 
 } 
 
 / * * 
 - * This event fires after { @ link GuiScreen # handleKeyboardInput ( ) } provided that the active 
 - * screen has not been changed as a result of { @ link GuiScreen # handleKeyboardInput ( ) } and 
 - * the { @ link GuiScreen # keyHandled } flag has not been set . 
 + * This event fires after { @ link IGuiEventListener # charTyped ( char , int ) } if the character was not already handled . 
 * Cancel this event when you successfully use the keyboard input to prevent other handlers from using the same input . 
 * / 
 @ Cancelable 
 - public static class Post extends KeyboardInputEvent 
 + public static class Post extends KeyboardCharTypedEvent 
 { 
 - public Post ( GuiScreen gui ) 
 + public Post ( GuiScreen gui , char codePoint , int modifiers ) 
 { 
 - super ( gui ) ; 
 + super ( gui , codePoint , modifiers ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch 
 index d6775a2 . . 1740dc7 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch 
 @ @ - 1 , 6 + 1 , 17 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiScreen . java 
 + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiScreen . java 
 - @ @ - 111 , 7 + 111 , 9 @ @ 
 + @ @ - 17 , 6 + 17 , 10 @ @ 
 + import net . minecraft . client . renderer . entity . RenderItem ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . EnumChatFormatting ; 
 + + import net . minecraftforge . client . event . GuiScreenEvent . ActionPerformedEvent ; 
 + + import net . minecraftforge . client . event . GuiScreenEvent . InitGuiEvent ; 
 + + import net . minecraftforge . common . MinecraftForge ; 
 + + 
 + import org . lwjgl . input . Keyboard ; 
 + import org . lwjgl . input . Mouse ; 
 + import org . lwjgl . opengl . GL11 ; 
 + @ @ - 111 , 7 + 115 , 9 @ @ 
 } 
 } 
 
 @ @ - 10 , 7 + 21 , 7 @ @ 
 } 
 
 protected void func _ 146279 _ a ( String p _ 146279 _ 1 _ , int p _ 146279 _ 2 _ , int p _ 146279 _ 3 _ ) 
 - @ @ - 121 , 6 + 123 , 11 @ @ 
 + @ @ - 121 , 6 + 127 , 11 @ @ 
 
 protected void func _ 146283 _ a ( List p _ 146283 _ 1 _ , int p _ 146283 _ 2 _ , int p _ 146283 _ 3 _ ) 
 { 
 @ @ - 22 , 7 + 33 , 7 @ @ 
 if ( ! p _ 146283 _ 1 _ . isEmpty ( ) ) 
 { 
 GL11 . glDisable ( GL12 . GL _ RESCALE _ NORMAL ) ; 
 - @ @ - 133 , 7 + 140 , 7 @ @ 
 + @ @ - 133 , 7 + 144 , 7 @ @ 
 while ( iterator . hasNext ( ) ) 
 { 
 String s = ( String ) iterator . next ( ) ; 
 @ @ - 31 , 7 + 42 , 7 @ @ 
 
 if ( l > k ) 
 { 
 - @ @ - 178 , 7 + 185 , 7 @ @ 
 + @ @ - 178 , 7 + 189 , 7 @ @ 
 for ( int i2 = 0 ; i2 < p _ 146283 _ 1 _ . size ( ) ; + + i2 ) 
 { 
 String s1 = ( String ) p _ 146283 _ 1 _ . get ( i2 ) ; 
 @ @ - 40 , 3 + 51 , 36 @ @ 
 
 if ( i2 = = 0 ) 
 { 
 + @ @ - 207 , 9 + 218 , 14 @ @ 
 + 
 + if ( guibutton . func _ 146116 _ c ( this . field _ 146297 _ k , p _ 73864 _ 1 _ , p _ 73864 _ 2 _ ) ) 
 + { 
 + - this . field _ 146290 _ a = guibutton ; 
 + - guibutton . func _ 146113 _ a ( this . field _ 146297 _ k . func _ 147118 _ V ( ) ) ; 
 + - this . func _ 146284 _ a ( guibutton ) ; 
 + + ActionPerformedEvent . Pre event = new ActionPerformedEvent . Pre ( this , guibutton , this . field _ 146292 _ n ) ; 
 + + if ( MinecraftForge . EVENT _ BUS . post ( event ) ) 
 + + break ; 
 + + this . field _ 146290 _ a = event . button ; 
 + + event . button . func _ 146113 _ a ( this . field _ 146297 _ k . func _ 147118 _ V ( ) ) ; 
 + + this . func _ 146284 _ a ( event . button ) ; 
 + + if ( this . field _ 146297 _ k . field _ 71462 _ r . equals ( this ) ) 
 + + MinecraftForge . EVENT _ BUS . post ( new ActionPerformedEvent . Post ( this , event . button , this . field _ 146292 _ n ) ) ; 
 + } 
 + } 
 + } 
 + @ @ - 234 , 8 + 250 , 12 @ @ 
 + this . field _ 146289 _ q = p _ 146280 _ 1 _ . field _ 71466 _ p ; 
 + this . field _ 146294 _ l = p _ 146280 _ 2 _ ; 
 + this . field _ 146295 _ m = p _ 146280 _ 3 _ ; 
 + - this . field _ 146292 _ n . clear ( ) ; 
 + - this . func _ 73866 _ w _ ( ) ; 
 + + if ( ! MinecraftForge . EVENT _ BUS . post ( new InitGuiEvent . Pre ( this , this . field _ 146292 _ n ) ) ) 
 + + { 
 + + this . field _ 146292 _ n . clear ( ) ; 
 + + this . func _ 73866 _ w _ ( ) ; 
 + + } 
 + + MinecraftForge . EVENT _ BUS . post ( new InitGuiEvent . Post ( this , this . field _ 146292 _ n ) ) ; 
 + } 
 + 
 + public void func _ 73866 _ w _ ( ) { } 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch 
 index 09a97b8 . . 8559ac7 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch 
 @ @ - 1 , 18 + 1 , 19 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / EntityRenderer . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / EntityRenderer . java 
 - @ @ - 51 , 6 + 51 , 11 @ @ 
 + @ @ - 51 , 6 + 51 , 12 @ @ 
 import org . lwjgl . opengl . GL11 ; 
 import org . lwjgl . opengl . GLContext ; 
 import org . lwjgl . util . glu . Project ; 
 + import net . minecraftforge . client . ForgeHooksClient ; 
 + import net . minecraftforge . client . IRenderHandler ; 
 + import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 + + import net . minecraftforge . client . event . GuiScreenEvent . DrawScreenEvent ; 
 + import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 
 @ SideOnly ( Side . CLIENT ) 
 public class EntityRenderer implements IResourceManagerReloadListener 
 - @ @ - 358 , 7 + 363 , 7 @ @ 
 + @ @ - 358 , 7 + 364 , 7 @ @ 
 
 if ( d3 < d2 | | d2 = = 0 . 0D ) 
 { 
 @ @ - 21 , 7 + 22 , 7 @ @ 
 { 
 if ( d2 = = 0 . 0D ) 
 { 
 - @ @ - 392 , 8 + 397 , 15 @ @ 
 + @ @ - 392 , 8 + 398 , 15 @ @ 
 
 private void func _ 78477 _ e ( ) 
 { 
 @ @ - 39 , 7 + 40 , 7 @ @ 
 this . field _ 78506 _ S = this . field _ 78507 _ R ; 
 this . field _ 78507 _ R + = ( this . field _ 78501 _ T - this . field _ 78507 _ R ) * 0 . 5F ; 
 
 - @ @ - 416 , 7 + 428 , 7 @ @ 
 + @ @ - 416 , 7 + 429 , 7 @ @ 
 } 
 else 
 { 
 @ @ - 48 , 7 + 49 , 7 @ @ 
 float f1 = 70 . 0F ; 
 
 if ( p _ 78481 _ 2 _ ) 
 - @ @ - 497 , 15 + 509 , 7 @ @ 
 + @ @ - 497 , 15 + 510 , 7 @ @ 
 
 if ( ! this . field _ 78531 _ r . field _ 71474 _ y . field _ 74325 _ U ) 
 { 
 @ @ - 65 , 7 + 66 , 18 @ @ 
 GL11 . glRotatef ( entitylivingbase . field _ 70126 _ B + ( entitylivingbase . field _ 70177 _ z - entitylivingbase . field _ 70126 _ B ) * p _ 78467 _ 1 _ + 180 . 0F , 0 . 0F , - 1 . 0F , 0 . 0F ) ; 
 GL11 . glRotatef ( entitylivingbase . field _ 70127 _ C + ( entitylivingbase . field _ 70125 _ A - entitylivingbase . field _ 70127 _ C ) * p _ 78467 _ 1 _ , - 1 . 0F , 0 . 0F , 0 . 0F ) ; 
 } 
 - @ @ - 1203 , 7 + 1207 , 10 @ @ 
 + @ @ - 1052 , 7 + 1057 , 9 @ @ 
 + 
 + try 
 + { 
 + - this . field _ 78531 _ r . field _ 71462 _ r . func _ 73863 _ a ( k , l , p _ 78480 _ 1 _ ) ; 
 + + if ( ! MinecraftForge . EVENT _ BUS . post ( new DrawScreenEvent . Pre ( this . field _ 78531 _ r . field _ 71462 _ r , k , l , p _ 78480 _ 1 _ ) ) ) 
 + + this . field _ 78531 _ r . field _ 71462 _ r . func _ 73863 _ a ( k , l , p _ 78480 _ 1 _ ) ; 
 + + MinecraftForge . EVENT _ BUS . post ( new DrawScreenEvent . Post ( this . field _ 78531 _ r . field _ 71462 _ r , k , l , p _ 78480 _ 1 _ ) ) ; 
 + } 
 + catch ( Throwable throwable ) 
 + { 
 + @ @ - 1203 , 7 + 1210 , 10 @ @ 
 GL11 . glPushMatrix ( ) ; 
 RenderHelper . func _ 74519 _ b ( ) ; 
 this . field _ 78531 _ r . field _ 71424 _ I . func _ 76318 _ c ( " entities " ) ; 
 @ @ - 76 , 7 + 88 , 7 @ @ 
 this . func _ 78463 _ b ( ( double ) p _ 78471 _ 1 _ ) ; 
 this . field _ 78531 _ r . field _ 71424 _ I . func _ 76318 _ c ( " litParticles " ) ; 
 effectrenderer . func _ 78872 _ b ( entitylivingbase , p _ 78471 _ 1 _ ) ; 
 - @ @ - 1221 , 7 + 1228 , 10 @ @ 
 + @ @ - 1221 , 7 + 1231 , 10 @ @ 
 entityplayer = ( EntityPlayer ) entitylivingbase ; 
 GL11 . glDisable ( GL11 . GL _ ALPHA _ TEST ) ; 
 this . field _ 78531 _ r . field _ 71424 _ I . func _ 76318 _ c ( " outline " ) ; 
 @ @ - 88 , 7 + 100 , 7 @ @ 
 GL11 . glEnable ( GL11 . GL _ ALPHA _ TEST ) ; 
 } 
 } 
 - @ @ - 1234 , 14 + 1244 , 17 @ @ 
 + @ @ - 1234 , 14 + 1247 , 17 @ @ 
 entityplayer = ( EntityPlayer ) entitylivingbase ; 
 GL11 . glDisable ( GL11 . GL _ ALPHA _ TEST ) ; 
 this . field _ 78531 _ r . field _ 71424 _ I . func _ 76318 _ c ( " outline " ) ; 
 @ @ - 108 , 7 + 120 , 7 @ @ 
 GL11 . glDisable ( GL11 . GL _ BLEND ) ; 
 GL11 . glDepthMask ( false ) ; 
 GL11 . glEnable ( GL11 . GL _ CULL _ FACE ) ; 
 - @ @ - 1296 , 6 + 1309 , 16 @ @ 
 + @ @ - 1296 , 6 + 1312 , 16 @ @ 
 renderglobal . func _ 72719 _ a ( entitylivingbase , 1 , ( double ) p _ 78471 _ 1 _ ) ; 
 } 
 
 @ @ - 125 , 7 + 137 , 7 @ @ 
 GL11 . glDepthMask ( true ) ; 
 GL11 . glEnable ( GL11 . GL _ CULL _ FACE ) ; 
 GL11 . glDisable ( GL11 . GL _ BLEND ) ; 
 - @ @ - 1307 , 9 + 1330 , 12 @ @ 
 + @ @ - 1307 , 9 + 1333 , 12 @ @ 
 this . func _ 82829 _ a ( renderglobal , p _ 78471 _ 1 _ ) ; 
 } 
 
 @ @ - 139 , 7 + 151 , 7 @ @ 
 { 
 GL11 . glClear ( GL11 . GL _ DEPTH _ BUFFER _ BIT ) ; 
 this . func _ 78476 _ b ( p _ 78471 _ 1 _ , j ) ; 
 - @ @ - 1425 , 6 + 1451 , 13 @ @ 
 + @ @ - 1425 , 6 + 1454 , 13 @ @ 
 
 protected void func _ 78474 _ d ( float p _ 78474 _ 1 _ ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 index df997ab . . 75f9cb1 100644 
 - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 @ @ - 630 , 7 + 630 , 7 @ @ public class GuiIngameForge extends GuiIngame 
 } 
 
 
 - if ( this . mc . gameSettings . showDebugInfo ) 
 + if ( this . mc . gameSettings . showDebugInfo & & ! pre ( DEBUG ) ) 
 { 
 mc . mcProfiler . startSection ( " debug " ) ; 
 GL11 . glPushMatrix ( ) ; 
 @ @ - 688 , 6 + 688 , 7 @ @ public class GuiIngameForge extends GuiIngame 
 } 
 GL11 . glPopMatrix ( ) ; 
 mc . mcProfiler . endSection ( ) ; 
 + post ( DEBUG ) ; 
 } 
 
 RenderGameOverlayEvent . Text event = new RenderGameOverlayEvent . Text ( eventParent , left , right ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java b / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java 
 new file mode 100644 
 index 0000000 . . fc7a78f 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / event / GuiScreenEvent . java 
 @ @ - 0 , 0 + 1 , 179 @ @ 
 + package net . minecraftforge . client . event ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . client . gui . GuiButton ; 
 + import net . minecraft . client . gui . GuiScreen ; 
 + import cpw . mods . fml . common . eventhandler . Cancelable ; 
 + import cpw . mods . fml . common . eventhandler . Event ; 
 + import cpw . mods . fml . relauncher . Side ; 
 + import cpw . mods . fml . relauncher . SideOnly ; 
 + 
 + / * * 
 + * Event classes for GuiScreen events . 
 + * 
 + * @ author bspkrs 
 + * / 
 + @ SideOnly ( Side . CLIENT ) 
 + public class GuiScreenEvent extends Event 
 + { 
 + / * * 
 + * The GuiScreen object generating this event . 
 + * / 
 + public final GuiScreen gui ; 
 + 
 + public GuiScreenEvent ( GuiScreen gui ) 
 + { 
 + this . gui = gui ; 
 + } 
 + 
 + public static class InitGuiEvent extends GuiScreenEvent 
 + { 
 + / * * 
 + * The { @ code buttonList } field from the GuiScreen object referenced by { @ code gui } . 
 + * / 
 + public List buttonList ; 
 + 
 + public InitGuiEvent ( GuiScreen gui , List buttonList ) 
 + { 
 + super ( gui ) ; 
 + this . buttonList = buttonList ; 
 + } 
 + 
 + / * * 
 + * This event fires just after initializing { @ code GuiScreen . mc } , { @ code GuiScreen . fontRendererObj } , 
 + * { @ code GuiScreen . width } , and { @ code GuiScreen . height } , and just before calling { @ code GuiScreen . buttonList . clear ( ) } 
 + * and { @ code GuiScreen . initGui ( ) } . To skip or override a screen ' s initGui ( ) method cancel the event . < br / > < br / > 
 + * 
 + * If canceled the following lines are skipped in { @ code GuiScreen . setWorldAndResolution ( ) } : < br / > 
 + * { @ code this . buttonList . clear ( ) ; } < br / > 
 + * { @ code this . initGui ( ) ; } < br / > 
 + * 
 + * @ author bspkrs 
 + * / 
 + @ Cancelable 
 + public static class Pre extends InitGuiEvent 
 + { 
 + public Pre ( GuiScreen gui , List buttonList ) 
 + { 
 + super ( gui , buttonList ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * This event fires right after { @ code GuiScreen . initGui ( ) } . 
 + * This is a good place to alter a GuiScreen ' s component layout if desired . 
 + * 
 + * @ author bspkrs 
 + * / 
 + public static class Post extends InitGuiEvent 
 + { 
 + public Post ( GuiScreen gui , List buttonList ) 
 + { 
 + super ( gui , buttonList ) ; 
 + } 
 + } 
 + } 
 + 
 + public static class DrawScreenEvent extends GuiScreenEvent 
 + { 
 + / * * 
 + * The x coordinate of the mouse pointer on the screen . 
 + * / 
 + public final int mouseX ; 
 + / * * 
 + * The y coordinate of the mouse pointer on the screen . 
 + * / 
 + public final int mouseY ; 
 + / * * 
 + * Partial render ticks elapsed . 
 + * / 
 + public final float renderPartialTicks ; 
 + 
 + public DrawScreenEvent ( GuiScreen gui , int mouseX , int mouseY , float renderPartialTicks ) 
 + { 
 + super ( gui ) ; 
 + this . mouseX = mouseX ; 
 + this . mouseY = mouseY ; 
 + this . renderPartialTicks = renderPartialTicks ; 
 + } 
 + 
 + / * * 
 + * This event fires just before { @ code GuiScreen . drawScreen ( ) } is called . 
 + * Cancel this event to skip { @ code GuiScreen . drawScreen ( ) } . 
 + * 
 + * @ author bspkrs 
 + * / 
 + @ Cancelable 
 + public static class Pre extends DrawScreenEvent 
 + { 
 + public Pre ( GuiScreen gui , int mouseX , int mouseY , float renderPartialTicks ) 
 + { 
 + super ( gui , mouseX , mouseY , renderPartialTicks ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * This event fires just after { @ code GuiScreen . drawScreen ( ) } is called . 
 + * 
 + * @ author bspkrs 
 + * / 
 + public static class Post extends DrawScreenEvent 
 + { 
 + public Post ( GuiScreen gui , int mouseX , int mouseY , float renderPartialTicks ) 
 + { 
 + super ( gui , mouseX , mouseY , renderPartialTicks ) ; 
 + } 
 + } 
 + } 
 + 
 + public static class ActionPerformedEvent extends GuiScreenEvent 
 + { 
 + / * * 
 + * The button that was clicked . 
 + * / 
 + public GuiButton button ; 
 + / * * 
 + * A COPY of the { @ code buttonList } field from the GuiScreen referenced by { @ code gui } . 
 + * / 
 + public List buttonList ; 
 + 
 + public ActionPerformedEvent ( GuiScreen gui , GuiButton button , List buttonList ) 
 + { 
 + super ( gui ) ; 
 + this . button = button ; 
 + this . buttonList = new ArrayList ( buttonList ) ; 
 + } 
 + 
 + / * * 
 + * This event fires once it has been determined that a GuiButton object has been clicked . 
 + * Cancel this event to bypass { @ code GuiScreen . actionPerformed ( ) } . 
 + * Replace button with a different button from buttonList to have that button ' s action executed . 
 + * 
 + * @ author bspkrs 
 + * / 
 + @ Cancelable 
 + public static class Pre extends ActionPerformedEvent 
 + { 
 + public Pre ( GuiScreen gui , GuiButton button , List buttonList ) 
 + { 
 + super ( gui , button , buttonList ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * This event fires after { @ code GuiScreen . actionPerformed ( ) } provided that the active 
 + * screen has not been changed as a result of { @ code GuiScreen . actionPerformed ( ) } . 
 + * 
 + * @ author bspkrs 
 + * / 
 + public static class Post extends ActionPerformedEvent 
 + { 
 + public Post ( GuiScreen gui , GuiButton button , List buttonList ) 
 + { 
 + super ( gui , button , buttonList ) ; 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / event / RenderGameOverlayEvent . java b / src / main / java / net / minecraftforge / client / event / RenderGameOverlayEvent . java 
 index a6dd865 . . a452ccd 100644 
 - - - a / src / main / java / net / minecraftforge / client / event / RenderGameOverlayEvent . java 
 + + + b / src / main / java / net / minecraftforge / client / event / RenderGameOverlayEvent . java 
 @ @ - 27 , 7 + 27 , 8 @ @ public class RenderGameOverlayEvent extends Event 
 HEALTHMOUNT , 
 JUMPBAR , 
 CHAT , 
 - PLAYER _ LIST 
 + PLAYER _ LIST , 
 + DEBUG 
 } 
 
 public final float partialTicks ;
