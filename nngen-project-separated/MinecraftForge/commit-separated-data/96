BLEU SCORE: 0.049900497019368314

TEST MSG: Port CommandEvent and custom entity selectors to 1 . 13
GENERATED MSG: First pass at exposing data fixers to modders .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / command / Commands . java . patch b / patches / minecraft / net / minecraft / command / Commands . java . patch <nl> new file mode 100644 <nl> index 0000000 . . e4f3fd2 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / command / Commands . java . patch <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + - - - a / net / minecraft / command / Commands . java <nl> + + + + b / net / minecraft / command / Commands . java <nl> + @ @ - 189 , 7 + 189 , 15 @ @ <nl> + <nl> + try { <nl> + try { <nl> + - int lvt _ 4 _ 3 _ = this . field _ 197062 _ b . execute ( p _ 197059 _ 2 _ , p _ 197059 _ 1 _ ) ; <nl> + + com . mojang . brigadier . ParseResults < CommandSource > parse = this . field _ 197062 _ b . parse ( p _ 197059 _ 2 _ , p _ 197059 _ 1 _ ) ; <nl> + + net . minecraftforge . event . CommandEvent event = new net . minecraftforge . event . CommandEvent ( parse ) ; <nl> + + if ( net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( event ) ) { <nl> + + if ( event . getException ( ) ! = null ) { <nl> + + com . google . common . base . Throwables . throwIfUnchecked ( event . getException ( ) ) ; <nl> + + } <nl> + + return 1 ; <nl> + + } <nl> + + int lvt _ 4 _ 3 _ = this . field _ 197062 _ b . execute ( event . getParseResults ( ) ) ; <nl> + return lvt _ 4 _ 3 _ ; <nl> + } catch ( CommandException commandexception ) { <nl> + p _ 197059 _ 1 _ . func _ 197021 _ a ( commandexception . func _ 197003 _ a ( ) ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / command / arguments / EntitySelectorParser . java . patch b / patches / minecraft / net / minecraft / command / arguments / EntitySelectorParser . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 2c761fd <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / command / arguments / EntitySelectorParser . java . patch <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + - - - a / net / minecraft / command / arguments / EntitySelectorParser . java <nl> + + + + b / net / minecraft / command / arguments / EntitySelectorParser . java <nl> + @ @ - 441 , 6 + 441 , 10 @ @ <nl> + } <nl> + <nl> + this . field _ 197417 _ j . skip ( ) ; <nl> + + EntitySelector forgeSelector = net . minecraftforge . common . command . EntitySelectorManager . parseSelector ( this ) ; <nl> + + if ( forgeSelector ! = null ) { <nl> + + return forgeSelector ; <nl> + + } <nl> + this . func _ 197403 _ b ( ) ; <nl> + } else { <nl> + this . func _ 197382 _ c ( ) ; <nl> + @ @ - 456 , 6 + 460 , 7 @ @ <nl> + p _ 210326 _ 0 _ . suggest ( " @ r " , new TextComponentTranslation ( " argument . entity . selector . randomPlayer " , new Object [ 0 ] ) ) ; <nl> + p _ 210326 _ 0 _ . suggest ( " @ s " , new TextComponentTranslation ( " argument . entity . selector . self " , new Object [ 0 ] ) ) ; <nl> + p _ 210326 _ 0 _ . suggest ( " @ e " , new TextComponentTranslation ( " argument . entity . selector . allEntities " , new Object [ 0 ] ) ) ; <nl> + + net . minecraftforge . common . command . EntitySelectorManager . fillSelectorSuggestions ( p _ 210326 _ 0 _ ) ; <nl> + } <nl> + <nl> + private CompletableFuture < Suggestions > func _ 201981 _ b ( SuggestionsBuilder p _ 201981 _ 1 _ , Consumer < SuggestionsBuilder > p _ 201981 _ 2 _ ) { <nl> diff - - git a / patches _ old / minecraft / net / minecraft / command / CommandHandler . java . patch b / patches _ old / minecraft / net / minecraft / command / CommandHandler . java . patch <nl> deleted file mode 100644 <nl> index de6db71 . . 0000000 <nl> - - - a / patches _ old / minecraft / net / minecraft / command / CommandHandler . java . patch <nl> + + + / dev / null <nl> @ @ - 1 , 20 + 0 , 0 @ @ <nl> - - - - . . / src - base / minecraft / net / minecraft / command / CommandHandler . java <nl> - + + + . . / src - work / minecraft / net / minecraft / command / CommandHandler . java <nl> - @ @ - 50 , 6 + 50 , 17 @ @ <nl> - } <nl> - else if ( icommand . func _ 184882 _ a ( this . func _ 184879 _ a ( ) , p _ 71556 _ 1 _ ) ) <nl> - { <nl> - + net . minecraftforge . event . CommandEvent event = new net . minecraftforge . event . CommandEvent ( icommand , p _ 71556 _ 1 _ , astring ) ; <nl> - + if ( net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( event ) ) <nl> - + { <nl> - + if ( event . getException ( ) ! = null ) <nl> - + { <nl> - + com . google . common . base . Throwables . throwIfUnchecked ( event . getException ( ) ) ; <nl> - + } <nl> - + return 1 ; <nl> - + } <nl> - + if ( event . getParameters ( ) ! = null ) astring = event . getParameters ( ) ; <nl> - + <nl> - if ( j > - 1 ) <nl> - { <nl> - List < Entity > list = EntitySelector . < Entity > func _ 179656 _ b ( p _ 71556 _ 1 _ , astring [ j ] , Entity . class ) ; <nl> diff - - git a / patches _ old / minecraft / net / minecraft / command / EntitySelector . java . patch b / patches _ old / minecraft / net / minecraft / command / EntitySelector . java . patch <nl> deleted file mode 100644 <nl> index dd80d47 . . 0000000 <nl> - - - a / patches _ old / minecraft / net / minecraft / command / EntitySelector . java . patch <nl> + + + / dev / null <nl> @ @ - 1 , 46 + 0 , 0 @ @ <nl> - - - - . . / src - base / minecraft / net / minecraft / command / EntitySelector . java <nl> - + + + . . / src - work / minecraft / net / minecraft / command / EntitySelector . java <nl> - @ @ - 121 , 6 + 121 , 11 @ @ <nl> - <nl> - public static < T extends Entity > List < T > func _ 179656 _ b ( ICommandSender p _ 179656 _ 0 _ , String p _ 179656 _ 1 _ , Class < ? extends T > p _ 179656 _ 2 _ ) throws CommandException <nl> - { <nl> - + return net . minecraftforge . common . command . SelectorHandlerManager . matchEntities ( p _ 179656 _ 0 _ , p _ 179656 _ 1 _ , p _ 179656 _ 2 _ ) ; <nl> - + } <nl> - + <nl> - + public static < T extends Entity > List < T > matchEntitiesDefault ( ICommandSender p _ 179656 _ 0 _ , String p _ 179656 _ 1 _ , Class < ? extends T > p _ 179656 _ 2 _ ) throws CommandException <nl> - + { <nl> - Matcher matcher = field _ 82389 _ a . matcher ( p _ 179656 _ 1 _ ) ; <nl> - <nl> - if ( matcher . matches ( ) & & p _ 179656 _ 0 _ . func _ 70003 _ b ( 1 , " @ " ) ) <nl> - @ @ - 153 , 6 + 158 , 7 @ @ <nl> - list2 . addAll ( func _ 184951 _ f ( map ) ) ; <nl> - list2 . addAll ( func _ 180698 _ a ( map , vec3d ) ) ; <nl> - list2 . addAll ( func _ 179662 _ g ( map ) ) ; <nl> - + list2 . addAll ( net . minecraftforge . fml . common . registry . GameRegistry . createEntitySelectors ( map , s , p _ 179656 _ 0 _ , vec3d ) ) ; <nl> - <nl> - if ( " s " . equalsIgnoreCase ( s ) ) <nl> - { <nl> - @ @ - 786 , 6 + 792 , 11 @ @ <nl> - <nl> - public static boolean func _ 82377 _ a ( String p _ 82377 _ 0 _ ) throws CommandException <nl> - { <nl> - + return net . minecraftforge . common . command . SelectorHandlerManager . matchesMultiplePlayers ( p _ 82377 _ 0 _ ) ; <nl> - + } <nl> - + <nl> - + public static boolean matchesMultiplePlayersDefault ( String p _ 82377 _ 0 _ ) throws CommandException <nl> - + { <nl> - Matcher matcher = field _ 82389 _ a . matcher ( p _ 82377 _ 0 _ ) ; <nl> - <nl> - if ( ! matcher . matches ( ) ) <nl> - @ @ - 803 , 6 + 814 , 11 @ @ <nl> - <nl> - public static boolean func _ 82378 _ b ( String p _ 82378 _ 0 _ ) <nl> - { <nl> - + return net . minecraftforge . common . command . SelectorHandlerManager . isSelector ( p _ 82378 _ 0 _ ) ; <nl> - + } <nl> - + <nl> - + public static boolean isSelectorDefault ( String p _ 82378 _ 0 _ ) <nl> - + { <nl> - return field _ 82389 _ a . matcher ( p _ 82378 _ 0 _ ) . matches ( ) ; <nl> - } <nl> - <nl> diff - - git a / src / main / java / net / minecraftforge / common / command / EntitySelectorManager . java b / src / main / java / net / minecraftforge / common / command / EntitySelectorManager . java <nl> new file mode 100644 <nl> index 0000000 . . e9c0890 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / command / EntitySelectorManager . java <nl> @ @ - 0 , 0 + 1 , 97 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . command ; <nl> + <nl> + import com . mojang . brigadier . StringReader ; <nl> + import com . mojang . brigadier . exceptions . CommandSyntaxException ; <nl> + import com . mojang . brigadier . suggestion . SuggestionsBuilder ; <nl> + import net . minecraft . command . arguments . EntitySelector ; <nl> + import net . minecraft . command . arguments . EntitySelectorParser ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> + <nl> + / * * <nl> + * Allows modders to register custom entity selectors by assigning an { @ link IEntitySelectorType } to a String token . < br > <nl> + * The token " test " , for example , corresponds to @ test [ . . . ] in a command . <nl> + * / <nl> + public class EntitySelectorManager <nl> + { <nl> + private static final HashMap < String , IEntitySelectorType > REGISTRY = new HashMap < > ( ) ; <nl> + <nl> + / * * <nl> + * Registers a new { @ link IEntitySelectorType } for the given { @ code token } . < br > <nl> + * <nl> + * @ param token Defines the name of the selector <nl> + * / <nl> + public static void register ( String token , IEntitySelectorType type ) <nl> + { <nl> + if ( token . isEmpty ( ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Token must not be empty " ) ; <nl> + } <nl> + <nl> + if ( Arrays . asList ( " p " , " a " , " r " , " s " , " e " ) . contains ( token ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Token clashes with vanilla @ " + token ) ; <nl> + } <nl> + <nl> + for ( char c : token . toCharArray ( ) ) <nl> + { <nl> + if ( ! StringReader . isAllowedInUnquotedString ( c ) ) { <nl> + throw new IllegalArgumentException ( " Token must only contain allowed characters " ) ; <nl> + } <nl> + } <nl> + <nl> + REGISTRY . put ( token , type ) ; <nl> + } <nl> + <nl> + / * * <nl> + * This method is called in { @ link EntitySelectorParser # parse } < br > <nl> + * <nl> + * If the REGISTRY does not contain a custom selector for the command being parsed , <nl> + * this method returns { @ code null } and the vanilla logic in { @ link EntitySelectorParser # parseSelector } is used . <nl> + * / <nl> + public static EntitySelector parseSelector ( EntitySelectorParser parser ) throws CommandSyntaxException <nl> + { <nl> + if ( parser . getReader ( ) . canRead ( ) ) <nl> + { <nl> + int i = parser . getReader ( ) . getCursor ( ) ; <nl> + String token = parser . getReader ( ) . readUnquotedString ( ) ; <nl> + IEntitySelectorType type = REGISTRY . get ( token ) ; <nl> + if ( type ! = null ) <nl> + { <nl> + return type . build ( parser ) ; <nl> + } <nl> + <nl> + parser . getReader ( ) . setCursor ( i ) ; <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> + <nl> + / * * <nl> + * This method is called in { @ link EntitySelectorParser # fillSelectorSuggestions } <nl> + * / <nl> + public static void fillSelectorSuggestions ( SuggestionsBuilder suggestionBuilder ) <nl> + { <nl> + REGISTRY . forEach ( ( token , type ) - > suggestionBuilder . suggest ( " @ " + token , type . getSuggestionTooltip ( ) ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / command / IEntitySelectorType . java b / src / main / java / net / minecraftforge / common / command / IEntitySelectorType . java <nl> new file mode 100644 <nl> index 0000000 . . 18c61ea <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / command / IEntitySelectorType . java <nl> @ @ - 0 , 0 + 1 , 44 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . command ; <nl> + <nl> + import com . mojang . brigadier . exceptions . CommandSyntaxException ; <nl> + import net . minecraft . command . arguments . EntitySelector ; <nl> + import net . minecraft . command . arguments . EntitySelectorParser ; <nl> + import net . minecraft . util . text . ITextComponent ; <nl> + <nl> + / * * <nl> + * Implementations of this interface can be registered using { @ link EntitySelectorManager # register } <nl> + * / <nl> + public interface IEntitySelectorType <nl> + { <nl> + / * * <nl> + * Returns an { @ link EntitySelector } based on the given { @ link EntitySelectorParser } . < br > <nl> + * <nl> + * Use { @ link EntitySelectorParser # getReader } to read extra arguments and { @ link EntitySelectorParser # addFilter } to add the corresponding filters . < br > <nl> + * If the token being parsed does not match the syntax of this selector , this method should throw an appropriate { @ link CommandSyntaxException } . <nl> + * / <nl> + EntitySelector build ( EntitySelectorParser parser ) throws CommandSyntaxException ; <nl> + <nl> + / * * <nl> + * Returns an { @ link ITextComponent } containing a short description for this selector type . <nl> + * / <nl> + ITextComponent getSuggestionTooltip ( ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / event / CommandEvent . java b / src / main / java / net / minecraftforge / event / CommandEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 4a1ff61 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / CommandEvent . java <nl> @ @ - 0 , 0 + 1 , 58 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . event ; <nl> + <nl> + import com . mojang . brigadier . ParseResults ; <nl> + import net . minecraft . command . CommandSource ; <nl> + import net . minecraft . command . Commands ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . eventbus . api . Cancelable ; <nl> + import net . minecraftforge . eventbus . api . Event ; <nl> + <nl> + / * * <nl> + * CommandEvent is fired after a command is parsed , but before it is executed . <nl> + * This event is fired during the invocation of { @ link Commands # handleCommand ( CommandSource , String ) } . < br > <nl> + * < br > <nl> + * { @ link # parse } contains the instance of { @ link ParseResults } for the parsed command . < br > <nl> + * { @ link # exception } begins null , but can be populated with an exception to be thrown within the command . < br > <nl> + * < br > <nl> + * This event is { @ link Cancelable } . < br > <nl> + * If the event is canceled , the execution of the command does not occur . < br > <nl> + * < br > <nl> + * This event does not have a result . { @ link HasResult } < br > <nl> + * < br > <nl> + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . < br > <nl> + * * / <nl> + @ Cancelable <nl> + public class CommandEvent extends Event <nl> + { <nl> + private ParseResults < CommandSource > parse ; <nl> + private Throwable exception ; <nl> + <nl> + public CommandEvent ( ParseResults < CommandSource > parse ) <nl> + { <nl> + this . parse = parse ; <nl> + } <nl> + <nl> + public ParseResults < CommandSource > getParseResults ( ) { return parse ; } <nl> + public void setParseResults ( ParseResults < CommandSource > parse ) { this . parse = parse ; } <nl> + public Throwable getException ( ) { return exception ; } <nl> + public void setException ( Throwable exception ) { this . exception = exception ; } <nl> + } <nl> diff - - git a / src / main / resources / META - INF / accesstransformer . cfg b / src / main / resources / META - INF / accesstransformer . cfg <nl> index ac1e57d . . 5032355 100644 <nl> - - - a / src / main / resources / META - INF / accesstransformer . cfg <nl> + + + b / src / main / resources / META - INF / accesstransformer . cfg <nl> @ @ - 344 , 8 + 344 , 12 @ @ protected net . minecraft . entity . monster . EntityStray func _ 190727 _ o ( ) Lnet / minecraft <nl> # EntitySkeleton <nl> protected net . minecraft . entity . monster . EntitySkeleton func _ 190727 _ o ( ) Lnet / minecraft / util / SoundEvent ; # getStepSound - make AbstractSkeleton implementable <nl> <nl> - # EntitySelector <nl> - public net . minecraft . command . EntitySelector func _ 190826 _ c ( Ljava / lang / String ; ) Ljava / lang / String ; # addArgument <nl> + # EntitySelectorParser <nl> + public net . minecraft . command . arguments . EntitySelectorParser func _ 197396 _ n ( ) V # updateFilter <nl> + public net . minecraft . command . arguments . EntitySelectorParser func _ 197404 _ d ( ) V # parseArguments <nl> + <nl> + # EntityOptions <nl> + public net . minecraft . command . arguments . EntityOptions func _ 202024 _ a ( Ljava / lang / String ; Lnet / minecraft / command / arguments / EntityOptions $ Filter ; Ljava / util / function / Predicate ; Lnet / minecraft / util / text / ITextComponent ; ) V # register <nl> <nl> # Teleporter <nl> protected net . minecraft . world . Teleporter field _ 85192 _ a # world <nl> diff - - git a / src / test / java / net / minecraftforge / debug / chat / CommandEventTest . java b / src / test / java / net / minecraftforge / debug / chat / CommandEventTest . java <nl> new file mode 100644 <nl> index 0000000 . . 42eedec <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / chat / CommandEventTest . java <nl> @ @ - 0 , 0 + 1 , 78 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . debug . chat ; <nl> + <nl> + import com . mojang . brigadier . CommandDispatcher ; <nl> + import com . mojang . brigadier . tree . CommandNode ; <nl> + import net . minecraft . command . CommandException ; <nl> + import net . minecraft . command . CommandSource ; <nl> + import net . minecraft . util . text . TextComponentString ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . CommandEvent ; <nl> + import net . minecraftforge . eventbus . api . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + @ Mod ( " command _ event _ test " ) <nl> + public class CommandEventTest <nl> + { <nl> + public final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + <nl> + public CommandEventTest ( ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void onCommand ( CommandEvent event ) <nl> + { <nl> + CommandDispatcher < CommandSource > dispatcher = event . getParseResults ( ) . getContext ( ) . getDispatcher ( ) ; <nl> + List < CommandNode < CommandSource > > nodes = new ArrayList < > ( event . getParseResults ( ) . getContext ( ) . getNodes ( ) . keySet ( ) ) ; <nl> + CommandSource source = event . getParseResults ( ) . getContext ( ) . getSource ( ) ; <nl> + <nl> + / / test : when the / time command is used with no arguments , automatically add default arguments ( / time set day ) <nl> + if ( nodes . size ( ) = = 1 & & nodes . get ( 0 ) = = dispatcher . getRoot ( ) . getChild ( " time " ) ) <nl> + { <nl> + event . setParseResults ( dispatcher . parse ( " time set day " , source ) ) ; <nl> + return ; <nl> + } <nl> + <nl> + / / test : whenever a player uses the / give command , let everyone on the server know <nl> + if ( nodes . size ( ) > 0 & & nodes . get ( 0 ) = = dispatcher . getRoot ( ) . getChild ( " give " ) ) <nl> + { <nl> + String msg = source . getName ( ) + " used the give command : " + event . getParseResults ( ) . getReader ( ) . getString ( ) ; <nl> + source . getServer ( ) . getPlayerList ( ) . getPlayers ( ) . forEach ( entityPlayerMP - > entityPlayerMP . sendMessage ( new TextComponentString ( msg ) ) ) ; <nl> + return ; <nl> + } <nl> + <nl> + / / test : when the / kill command is used with no arguments , throw a custom exception <nl> + if ( nodes . size ( ) = = 1 & & nodes . get ( 0 ) = = dispatcher . getRoot ( ) . getChild ( " kill " ) ) <nl> + { <nl> + event . setException ( new CommandException ( new TextComponentString ( " You tried to use the / kill command with no arguments " ) ) ) ; <nl> + event . setCanceled ( true ) ; <nl> + return ; <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / chat / EntitySelectorFactoryTest . java b / src / test / java / net / minecraftforge / debug / chat / EntitySelectorFactoryTest . java <nl> deleted file mode 100644 <nl> index 7b556bd . . 0000000 <nl> - - - a / src / test / java / net / minecraftforge / debug / chat / EntitySelectorFactoryTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 99 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2018 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . debug . chat ; <nl> - <nl> - import com . google . common . base . Predicate ; <nl> - import net . minecraft . command . ICommandSender ; <nl> - import net . minecraft . entity . Entity ; <nl> - import net . minecraft . entity . EntityLivingBase ; <nl> - import net . minecraft . util . math . Vec3d ; <nl> - import net . minecraft . util . text . TextComponentString ; <nl> - import net . minecraftforge . fml . common . IEntitySelectorFactory ; <nl> - import net . minecraftforge . fml . common . Mod ; <nl> - import net . minecraftforge . fml . event . FMLInitializationEvent ; <nl> - import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> - <nl> - import javax . annotation . Nonnull ; <nl> - import javax . annotation . Nullable ; <nl> - import java . util . Collections ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - <nl> - / * * <nl> - * You can verify that this test is working fine by following these steps . <nl> - * Spawn a few cows and a few sheep and then use " / kill @ e [ forge : min _ health = ! 10 ] " <nl> - * All entities with less than 10 health points ( current , not max ) should die . <nl> - * This should include the sheep , but not the ( healthy ) cows . <nl> - * / <nl> - @ Mod ( modid = " customentityselectortest " , name = " Custom Entity Selector Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> - public class EntitySelectorFactoryTest <nl> - { <nl> - <nl> - @ Mod . EventHandler <nl> - public void init ( FMLInitializationEvent event ) <nl> - { <nl> - GameRegistry . registerEntitySelector ( new EntitySelectorFactory ( ) , " forge : min _ health " ) ; <nl> - } <nl> - <nl> - private class EntitySelectorFactory implements IEntitySelectorFactory <nl> - { <nl> - <nl> - @ Nonnull <nl> - @ Override <nl> - public List < Predicate < Entity > > createPredicates ( Map < String , String > arguments , String mainSelector , ICommandSender sender , Vec3d position ) <nl> - { <nl> - String health = arguments . get ( " forge : min _ health " ) ; <nl> - <nl> - / / If our selector is used in this command create a Predicate otherwise return an empty list . <nl> - if ( health ! = null ) <nl> - { <nl> - final boolean invert = health . startsWith ( " ! " ) ; <nl> - <nl> - if ( invert ) <nl> - { <nl> - health = health . substring ( 1 ) ; <nl> - } <nl> - try <nl> - { <nl> - final int value = Integer . parseInt ( health ) ; <nl> - <nl> - / / Return a list of predicates . All these predicates have to apply for any entity to be selected . <nl> - return Collections . < Predicate < Entity > > singletonList ( new Predicate < Entity > ( ) <nl> - { <nl> - @ Override <nl> - public boolean apply ( @ Nullable Entity input ) <nl> - { <nl> - if ( ! ( input instanceof EntityLivingBase ) ) <nl> - { <nl> - return false ; <nl> - } <nl> - return ( ( ( EntityLivingBase ) input ) . getHealth ( ) > = value ) ! = invert ; <nl> - } <nl> - } ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - sender . sendMessage ( new TextComponentString ( " Entity selector ' forge : min _ health ' has to be an integer " ) ) ; <nl> - } <nl> - } <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / chat / EntitySelectorTest . java b / src / test / java / net / minecraftforge / debug / chat / EntitySelectorTest . java <nl> new file mode 100644 <nl> index 0000000 . . 5ca40d4 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / chat / EntitySelectorTest . java <nl> @ @ - 0 , 0 + 1 , 97 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . debug . chat ; <nl> + <nl> + import com . mojang . brigadier . exceptions . CommandSyntaxException ; <nl> + import net . minecraft . advancements . criterion . MinMaxBounds ; <nl> + import net . minecraft . command . arguments . EntityOptions ; <nl> + import net . minecraft . command . arguments . EntitySelector ; <nl> + import net . minecraft . command . arguments . EntitySelectorParser ; <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraft . entity . EntityLivingBase ; <nl> + import net . minecraft . util . text . ITextComponent ; <nl> + import net . minecraft . util . text . TextComponentString ; <nl> + import net . minecraftforge . common . command . EntitySelectorManager ; <nl> + import net . minecraftforge . common . command . IEntitySelectorType ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; <nl> + import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; <nl> + <nl> + @ Mod ( " entity _ selector _ test " ) <nl> + public class EntitySelectorTest <nl> + { <nl> + public EntitySelectorTest ( ) <nl> + { <nl> + FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : setup ) ; <nl> + } <nl> + <nl> + public void setup ( FMLCommonSetupEvent event ) <nl> + { <nl> + EntityOptions . register ( " health " , this : : healthArgument , parser - > true , <nl> + new TextComponentString ( " Selects entities based on their current health . " ) ) ; <nl> + EntitySelectorManager . register ( " er " , new ExampleCustomSelector ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example for a custom selector argument , checks for the health of the entity <nl> + * / <nl> + private void healthArgument ( EntitySelectorParser parser ) throws CommandSyntaxException <nl> + { <nl> + MinMaxBounds . FloatBound bound = MinMaxBounds . FloatBound . fromReader ( parser . getReader ( ) ) ; <nl> + parser . addFilter ( entity - > entity instanceof EntityLivingBase & & bound . test ( ( ( EntityLivingBase ) entity ) . getHealth ( ) ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Example for a custom selector type , works like @ r but for entities . <nl> + * Basically does exactly what @ e [ sorter = random , limit = 1 , . . . ] does . <nl> + * / <nl> + private class ExampleCustomSelector implements IEntitySelectorType <nl> + { <nl> + @ Override <nl> + public EntitySelector build ( EntitySelectorParser parser ) throws CommandSyntaxException <nl> + { <nl> + parser . setSorter ( EntitySelectorParser . RANDOM ) ; <nl> + parser . setLimit ( 1 ) ; <nl> + parser . setIncludeNonPlayers ( true ) ; <nl> + parser . addFilter ( Entity : : isAlive ) ; <nl> + parser . setSuggestionHandler ( ( builder , consumer ) - > builder . suggest ( String . valueOf ( ' [ ' ) ) . buildFuture ( ) ) ; <nl> + if ( parser . getReader ( ) . canRead ( ) & & parser . getReader ( ) . peek ( ) = = ' [ ' ) <nl> + { <nl> + parser . getReader ( ) . skip ( ) ; <nl> + parser . setSuggestionHandler ( ( builder , consumer ) - > { <nl> + builder . suggest ( String . valueOf ( ' ] ' ) ) ; <nl> + EntityOptions . suggestOptions ( parser , builder ) ; <nl> + return builder . buildFuture ( ) ; <nl> + } ) ; <nl> + <nl> + parser . parseArguments ( ) ; <nl> + } <nl> + <nl> + parser . updateFilter ( ) ; <nl> + return parser . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ITextComponent getSuggestionTooltip ( ) <nl> + { <nl> + return new TextComponentString ( " Example : Selects a random entity " ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / META - INF / mods . toml b / src / test / resources / META - INF / mods . toml <nl> index 8c48762 . . 843de44 100644 <nl> - - - a / src / test / resources / META - INF / mods . toml <nl> + + + b / src / test / resources / META - INF / mods . toml <nl> @ @ - 74 , 3 + 74 , 12 @ @ key = " value " <nl> modId = " enumplanttypetest " <nl> version = " 1 . 0 " <nl> displayName = " EnumPlantTypeTest " <nl> + # debug / chat <nl> + [ [ mods ] ] <nl> + modId = " command _ event _ test " <nl> + version = " 1 . 0 " <nl> + displayName = " CommandEventTest " <nl> + [ [ mods ] ] <nl> + modId = " entity _ selector _ test " <nl> + version = " 1 . 0 " <nl> + displayName = " EntitySelectorTest "
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> index 5637ab8 . . eaf179b 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> @ @ - 152 , 7 + 152 , 15 @ @ <nl> this . field _ 71100 _ bB . func _ 75112 _ a ( p _ 70037 _ 1 _ ) ; <nl> this . field _ 71075 _ bZ . func _ 75095 _ b ( p _ 70037 _ 1 _ ) ; <nl> <nl> - @ @ - 921 , 6 + 965 , 23 @ @ <nl> + @ @ - 903 , 6 + 947 , 7 @ @ <nl> + { <nl> + super . func _ 70014 _ b ( p _ 70014 _ 1 _ ) ; <nl> + p _ 70014 _ 1 _ . func _ 74768 _ a ( " DataVersion " , 819 ) ; <nl> + + net . minecraftforge . fml . common . FMLCommonHandler . instance ( ) . getDataFixer ( ) . writeVersionData ( p _ 70014 _ 1 _ ) ; <nl> + p _ 70014 _ 1 _ . func _ 74782 _ a ( " Inventory " , this . field _ 71071 _ by . func _ 70442 _ a ( new NBTTagList ( ) ) ) ; <nl> + p _ 70014 _ 1 _ . func _ 74768 _ a ( " SelectedItemSlot " , this . field _ 71071 _ by . field _ 70461 _ c ) ; <nl> + p _ 70014 _ 1 _ . func _ 74757 _ a ( " Sleeping " , this . field _ 71083 _ bS ) ; <nl> + @ @ - 921 , 6 + 966 , 23 @ @ <nl> p _ 70014 _ 1 _ . func _ 74757 _ a ( " SpawnForced " , this . field _ 82248 _ d ) ; <nl> } <nl> <nl> @ @ - 176 , 7 + 184 , 7 @ @ <nl> this . field _ 71100 _ bB . func _ 75117 _ b ( p _ 70014 _ 1 _ ) ; <nl> this . field _ 71075 _ bZ . func _ 75091 _ a ( p _ 70014 _ 1 _ ) ; <nl> p _ 70014 _ 1 _ . func _ 74782 _ a ( " EnderItems " , this . field _ 71078 _ a . func _ 70487 _ g ( ) ) ; <nl> - @ @ - 928 , 6 + 989 , 7 @ @ <nl> + @ @ - 928 , 6 + 990 , 7 @ @ <nl> <nl> public boolean func _ 70097 _ a ( DamageSource p _ 70097 _ 1 _ , float p _ 70097 _ 2 _ ) <nl> { <nl> @ @ - 184 , 7 + 192 , 7 @ @ <nl> if ( this . func _ 180431 _ b ( p _ 70097 _ 1 _ ) ) <nl> { <nl> return false ; <nl> - @ @ - 1006 , 6 + 1068 , 7 @ @ <nl> + @ @ - 1006 , 6 + 1069 , 7 @ @ <nl> if ( this . field _ 184627 _ bm . func _ 190926 _ b ( ) ) <nl> { <nl> EnumHand enumhand = this . func _ 184600 _ cs ( ) ; <nl> @ @ - 192 , 7 + 200 , 7 @ @ <nl> <nl> if ( enumhand = = EnumHand . MAIN _ HAND ) <nl> { <nl> - @ @ - 1041 , 7 + 1104 , 10 @ @ <nl> + @ @ - 1041 , 7 + 1105 , 10 @ @ <nl> { <nl> if ( ! this . func _ 180431 _ b ( p _ 70665 _ 1 _ ) ) <nl> { <nl> @ @ - 204 , 7 + 212 , 7 @ @ <nl> p _ 70665 _ 2 _ = this . func _ 70672 _ c ( p _ 70665 _ 1 _ , p _ 70665 _ 2 _ ) ; <nl> float f = p _ 70665 _ 2 _ ; <nl> p _ 70665 _ 2 _ = Math . max ( p _ 70665 _ 2 _ - this . func _ 110139 _ bj ( ) , 0 . 0F ) ; <nl> - @ @ - 1111 , 6 + 1177 , 7 @ @ <nl> + @ @ - 1111 , 6 + 1178 , 7 @ @ <nl> } <nl> else <nl> { <nl> @ @ - 212 , 7 + 220 , 7 @ @ <nl> ItemStack itemstack = this . func _ 184586 _ b ( p _ 190775 _ 2 _ ) ; <nl> ItemStack itemstack1 = itemstack . func _ 190926 _ b ( ) ? ItemStack . field _ 190927 _ a : itemstack . func _ 77946 _ l ( ) ; <nl> <nl> - @ @ - 1120 , 7 + 1187 , 10 @ @ <nl> + @ @ - 1120 , 7 + 1188 , 10 @ @ <nl> { <nl> itemstack . func _ 190920 _ e ( itemstack1 . func _ 190916 _ E ( ) ) ; <nl> } <nl> @ @ - 224 , 7 + 232 , 7 @ @ <nl> return EnumActionResult . SUCCESS ; <nl> } <nl> else <nl> - @ @ - 1136 , 6 + 1206 , 7 @ @ <nl> + @ @ - 1136 , 6 + 1207 , 7 @ @ <nl> { <nl> if ( itemstack . func _ 190926 _ b ( ) & & ! this . field _ 71075 _ bZ . field _ 75098 _ d ) <nl> { <nl> @ @ - 232 , 7 + 240 , 7 @ @ <nl> this . func _ 184611 _ a ( p _ 190775 _ 2 _ , ItemStack . field _ 190927 _ a ) ; <nl> } <nl> <nl> - @ @ - 1161 , 6 + 1232 , 7 @ @ <nl> + @ @ - 1161 , 6 + 1233 , 7 @ @ <nl> <nl> public void func _ 71059 _ n ( Entity p _ 71059 _ 1 _ ) <nl> { <nl> @ @ - 240 , 7 + 248 , 7 @ @ <nl> if ( p _ 71059 _ 1 _ . func _ 70075 _ an ( ) ) <nl> { <nl> if ( ! p _ 71059 _ 1 _ . func _ 85031 _ j ( this ) ) <nl> - @ @ - 1331 , 11 + 1403 , 13 @ @ <nl> + @ @ - 1331 , 11 + 1404 , 13 @ @ <nl> <nl> if ( ! itemstack1 . func _ 190926 _ b ( ) & & entity instanceof EntityLivingBase ) <nl> { <nl> @ @ - 254 , 7 + 262 , 7 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 1441 , 6 + 1515 , 8 @ @ <nl> + @ @ - 1441 , 6 + 1516 , 8 @ @ <nl> <nl> public EntityPlayer . SleepResult func _ 180469 _ a ( BlockPos p _ 180469 _ 1 _ ) <nl> { <nl> @ @ - 263 , 7 + 271 , 7 @ @ <nl> EnumFacing enumfacing = ( EnumFacing ) this . field _ 70170 _ p . func _ 180495 _ p ( p _ 180469 _ 1 _ ) . func _ 177229 _ b ( BlockHorizontal . field _ 185512 _ D ) ; <nl> <nl> if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) <nl> - @ @ - 1482 , 8 + 1558 , 9 @ @ <nl> + @ @ - 1482 , 8 + 1559 , 9 @ @ <nl> <nl> this . func _ 70105 _ a ( 0 . 2F , 0 . 2F ) ; <nl> <nl> @ @ - 275 , 7 + 283 , 7 @ @ <nl> float f1 = 0 . 5F + ( float ) enumfacing . func _ 82601 _ c ( ) * 0 . 4F ; <nl> float f = 0 . 5F + ( float ) enumfacing . func _ 82599 _ e ( ) * 0 . 4F ; <nl> this . func _ 175139 _ a ( enumfacing ) ; <nl> - @ @ - 1530 , 13 + 1607 , 14 @ @ <nl> + @ @ - 1530 , 13 + 1608 , 14 @ @ <nl> <nl> public void func _ 70999 _ a ( boolean p _ 70999 _ 1 _ , boolean p _ 70999 _ 2 _ , boolean p _ 70999 _ 3 _ ) <nl> { <nl> @ @ - 293 , 7 + 301 , 7 @ @ <nl> <nl> if ( blockpos = = null ) <nl> { <nl> - @ @ - 1545 , 6 + 1623 , 10 @ @ <nl> + @ @ - 1545 , 6 + 1624 , 10 @ @ <nl> <nl> this . func _ 70107 _ b ( ( double ) ( ( float ) blockpos . func _ 177958 _ n ( ) + 0 . 5F ) , ( double ) ( ( float ) blockpos . func _ 177956 _ o ( ) + 0 . 1F ) , ( double ) ( ( float ) blockpos . func _ 177952 _ p ( ) + 0 . 5F ) ) ; <nl> } <nl> @ @ - 304 , 7 + 312 , 7 @ @ <nl> <nl> this . field _ 71083 _ bS = false ; <nl> <nl> - @ @ - 1563 , 15 + 1645 , 16 @ @ <nl> + @ @ - 1563 , 15 + 1646 , 16 @ @ <nl> <nl> private boolean func _ 175143 _ p ( ) <nl> { <nl> @ @ - 324 , 7 + 332 , 7 @ @ <nl> { <nl> if ( ! p _ 180467 _ 2 _ ) <nl> { <nl> - @ @ - 1586 , 16 + 1669 , 17 @ @ <nl> + @ @ - 1586 , 16 + 1670 , 17 @ @ <nl> } <nl> else <nl> { <nl> @ @ - 345 , 7 + 353 , 7 @ @ <nl> <nl> switch ( enumfacing ) <nl> { <nl> - @ @ - 1635 , 16 + 1719 , 24 @ @ <nl> + @ @ - 1635 , 16 + 1720 , 24 @ @ <nl> <nl> public BlockPos func _ 180470 _ cg ( ) <nl> { <nl> @ @ - 372 , 7 + 380 , 7 @ @ <nl> if ( p _ 180473 _ 1 _ ! = null ) <nl> { <nl> this . field _ 71077 _ c = p _ 180473 _ 1 _ ; <nl> - @ @ - 1839 , 6 + 1931 , 10 @ @ <nl> + @ @ - 1839 , 6 + 1932 , 10 @ @ <nl> <nl> super . func _ 180430 _ e ( p _ 180430 _ 1 _ , p _ 180430 _ 2 _ ) ; <nl> } <nl> @ @ - 383 , 7 + 391 , 7 @ @ <nl> } <nl> <nl> protected void func _ 71061 _ d _ ( ) <nl> - @ @ - 2039 , 6 + 2135 , 18 @ @ <nl> + @ @ - 2039 , 6 + 2136 , 18 @ @ <nl> this . field _ 175152 _ f = p _ 71049 _ 1 _ . field _ 175152 _ f ; <nl> this . field _ 71078 _ a = p _ 71049 _ 1 _ . field _ 71078 _ a ; <nl> this . func _ 184212 _ Q ( ) . func _ 187227 _ b ( field _ 184827 _ bp , p _ 71049 _ 1 _ . func _ 184212 _ Q ( ) . func _ 187225 _ a ( field _ 184827 _ bp ) ) ; <nl> @ @ - 402 , 7 + 410 , 7 @ @ <nl> } <nl> <nl> protected boolean func _ 70041 _ e _ ( ) <nl> - @ @ - 2137 , 7 + 2245 , 10 @ @ <nl> + @ @ - 2137 , 7 + 2246 , 10 @ @ <nl> <nl> public ITextComponent func _ 145748 _ c _ ( ) <nl> { <nl> @ @ - 414 , 7 + 422 , 7 @ @ <nl> itextcomponent . func _ 150256 _ b ( ) . func _ 150241 _ a ( new ClickEvent ( ClickEvent . Action . SUGGEST _ COMMAND , " / msg " + this . func _ 70005 _ c _ ( ) + " " ) ) ; <nl> itextcomponent . func _ 150256 _ b ( ) . func _ 150209 _ a ( this . func _ 174823 _ aP ( ) ) ; <nl> itextcomponent . func _ 150256 _ b ( ) . func _ 179989 _ a ( this . func _ 70005 _ c _ ( ) ) ; <nl> - @ @ - 2146 , 7 + 2257 , 7 @ @ <nl> + @ @ - 2146 , 7 + 2258 , 7 @ @ <nl> <nl> public float func _ 70047 _ e ( ) <nl> { <nl> @ @ - 423 , 7 + 431 , 7 @ @ <nl> <nl> if ( this . func _ 70608 _ bn ( ) ) <nl> { <nl> - @ @ - 2362 , 6 + 2473 , 162 @ @ <nl> + @ @ - 2362 , 6 + 2474 , 162 @ @ <nl> return this . field _ 71075 _ bZ . field _ 75098 _ d & & this . func _ 70003 _ b ( 2 , " " ) ; <nl> } <nl> <nl> diff - - git a / patches / minecraft / net / minecraft / util / datafix / DataFixesManager . java . patch b / patches / minecraft / net / minecraft / util / datafix / DataFixesManager . java . patch <nl> new file mode 100644 <nl> index 0000000 . . ad8f719 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / util / datafix / DataFixesManager . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / util / datafix / DataFixesManager . java <nl> + + + + . . / src - work / minecraft / net / minecraft / util / datafix / DataFixesManager . java <nl> + @ @ - 158 , 6 + 158 , 7 @ @ <nl> + public static DataFixer func _ 188279 _ a ( ) <nl> + { <nl> + DataFixer datafixer = new DataFixer ( 819 ) ; <nl> + + datafixer = new net . minecraftforge . common . util . CompoundDataFixer ( datafixer ) ; <nl> + WorldInfo . func _ 189967 _ a ( datafixer ) ; <nl> + EntityPlayer . func _ 189806 _ a ( datafixer ) ; <nl> + AnvilChunkLoader . func _ 189889 _ a ( datafixer ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / world / chunk / storage / AnvilChunkLoader . java . patch b / patches / minecraft / net / minecraft / world / chunk / storage / AnvilChunkLoader . java . patch <nl> index 5ac3cdd . . 22b5152 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / chunk / storage / AnvilChunkLoader . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / chunk / storage / AnvilChunkLoader . java . patch <nl> @ @ - 97 , 15 + 97 , 17 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 122 , 6 + 181 , 7 @ @ <nl> + @ @ - 121 , 7 + 180 , 9 @ @ <nl> + NBTTagCompound nbttagcompound1 = new NBTTagCompound ( ) ; <nl> nbttagcompound . func _ 74782 _ a ( " Level " , nbttagcompound1 ) ; <nl> nbttagcompound . func _ 74768 _ a ( " DataVersion " , 819 ) ; <nl> + + net . minecraftforge . fml . common . FMLCommonHandler . instance ( ) . getDataFixer ( ) . writeVersionData ( nbttagcompound ) ; <nl> this . func _ 75820 _ a ( p _ 75816 _ 2 _ , p _ 75816 _ 1 _ , nbttagcompound1 ) ; <nl> + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . event . world . ChunkDataEvent . Save ( p _ 75816 _ 2 _ , nbttagcompound ) ) ; <nl> this . func _ 75824 _ a ( p _ 75816 _ 2 _ . func _ 76632 _ l ( ) , nbttagcompound ) ; <nl> } <nl> catch ( Exception exception ) <nl> - @ @ - 307 , 8 + 367 , 17 @ @ <nl> + @ @ - 307 , 8 + 368 , 17 @ @ <nl> <nl> if ( entity . func _ 70039 _ c ( nbttagcompound2 ) ) <nl> { <nl> @ @ - 123 , 7 + 125 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 318 , 8 + 387 , 17 @ @ <nl> + @ @ - 318 , 8 + 388 , 17 @ @ <nl> <nl> for ( TileEntity tileentity : p _ 75820 _ 1 _ . func _ 177434 _ r ( ) . values ( ) ) <nl> { <nl> @ @ - 141 , 7 + 143 , 7 @ @ <nl> } <nl> <nl> p _ 75820 _ 3 _ . func _ 74782 _ a ( " TileEntities " , nbttaglist2 ) ; <nl> - @ @ - 388 , 6 + 466 , 12 @ @ <nl> + @ @ - 388 , 6 + 467 , 12 @ @ <nl> chunk . func _ 76616 _ a ( p _ 75823 _ 2 _ . func _ 74770 _ j ( " Biomes " ) ) ; <nl> } <nl> <nl> @ @ - 154 , 7 + 156 , 7 @ @ <nl> NBTTagList nbttaglist1 = p _ 75823 _ 2 _ . func _ 150295 _ c ( " Entities " , 10 ) ; <nl> <nl> for ( int j1 = 0 ; j1 < nbttaglist1 . func _ 74745 _ c ( ) ; + + j1 ) <nl> - @ @ - 431 , 8 + 515 , 6 @ @ <nl> + @ @ - 431 , 8 + 516 , 6 @ @ <nl> p _ 75823 _ 1 _ . func _ 180497 _ b ( new BlockPos ( nbttagcompound3 . func _ 74762 _ e ( " x " ) , nbttagcompound3 . func _ 74762 _ e ( " y " ) , nbttagcompound3 . func _ 74762 _ e ( " z " ) ) , block , nbttagcompound3 . func _ 74762 _ e ( " t " ) , nbttagcompound3 . func _ 74762 _ e ( " p " ) ) ; <nl> } <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / world / gen / structure / template / Template . java . patch b / patches / minecraft / net / minecraft / world / gen / structure / template / Template . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 4e7e0db <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / world / gen / structure / template / Template . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / world / gen / structure / template / Template . java <nl> + + + + . . / src - work / minecraft / net / minecraft / world / gen / structure / template / Template . java <nl> + @ @ - 520 , 6 + 520 , 7 @ @ <nl> + p _ 189552 _ 1 _ . func _ 74782 _ a ( " size " , this . func _ 186267 _ a ( new int [ ] { this . field _ 186272 _ c . func _ 177958 _ n ( ) , this . field _ 186272 _ c . func _ 177956 _ o ( ) , this . field _ 186272 _ c . func _ 177952 _ p ( ) } ) ) ; <nl> + p _ 189552 _ 1 _ . func _ 74778 _ a ( " author " , this . field _ 186273 _ d ) ; <nl> + p _ 189552 _ 1 _ . func _ 74768 _ a ( " DataVersion " , 819 ) ; <nl> + + net . minecraftforge . fml . common . FMLCommonHandler . instance ( ) . getDataFixer ( ) . writeVersionData ( p _ 189552 _ 1 _ ) ; <nl> + return p _ 189552 _ 1 _ ; <nl> + } <nl> + <nl> diff - - git a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch <nl> index d3dbb53 . . e4a0e53 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch <nl> @ @ - 8 , 7 + 8 , 15 @ @ <nl> <nl> protected WorldInfo ( ) <nl> { <nl> - @ @ - 807 , 6 + 808 , 26 @ @ <nl> + @ @ - 335 , 6 + 336 , 7 @ @ <nl> + nbttagcompound . func _ 74757 _ a ( " Snapshot " , false ) ; <nl> + p _ 76064 _ 1 _ . func _ 74782 _ a ( " Version " , nbttagcompound ) ; <nl> + p _ 76064 _ 1 _ . func _ 74768 _ a ( " DataVersion " , 819 ) ; <nl> + + net . minecraftforge . fml . common . FMLCommonHandler . instance ( ) . getDataFixer ( ) . writeVersionData ( p _ 76064 _ 1 _ ) ; <nl> + p _ 76064 _ 1 _ . func _ 74772 _ a ( " RandomSeed " , this . field _ 76100 _ a ) ; <nl> + p _ 76064 _ 1 _ . func _ 74778 _ a ( " generatorName " , this . field _ 76098 _ b . func _ 77127 _ a ( ) ) ; <nl> + p _ 76064 _ 1 _ . func _ 74768 _ a ( " generatorVersion " , this . field _ 76098 _ b . func _ 77131 _ c ( ) ) ; <nl> + @ @ - 807 , 6 + 809 , 26 @ @ <nl> } ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / CompoundDataFixer . java b / src / main / java / net / minecraftforge / common / util / CompoundDataFixer . java <nl> new file mode 100644 <nl> index 0000000 . . da32e17 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / util / CompoundDataFixer . java <nl> @ @ - 0 , 0 + 1 , 190 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . common . util ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . Locale ; <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . util . datafix . DataFixer ; <nl> + import net . minecraft . util . datafix . FixTypes ; <nl> + import net . minecraft . util . datafix . IDataWalker ; <nl> + import net . minecraft . util . datafix . IFixType ; <nl> + import net . minecraft . util . datafix . IFixableData ; <nl> + <nl> + public class CompoundDataFixer extends DataFixer <nl> + { <nl> + private final ModFixs vanilla ; <nl> + private final Map < String , ModFixs > modFixers = Maps . newHashMap ( ) ; <nl> + private final Map < IFixType , List < IDataWalker > > walkers = Maps . newHashMap ( ) ; <nl> + <nl> + public CompoundDataFixer ( DataFixer vanilla ) <nl> + { <nl> + super ( 0 ) ; <nl> + this . vanilla = init ( " minecraft " , vanilla . version ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public NBTTagCompound process ( IFixType type , NBTTagCompound nbt ) <nl> + { <nl> + final Map < String , Integer > versions = getVersions ( nbt ) ; <nl> + final int mcversion = versions . get ( " minecraft " ) = = null ? - 1 : versions . get ( " minecraft " ) ; <nl> + final IDataFixerData holder = new IDataFixerData ( ) <nl> + { <nl> + @ Override <nl> + public NBTTagCompound process ( IFixType type , NBTTagCompound nbt , int version ) <nl> + { <nl> + for ( Entry < String , ModFixs > e : modFixers . entrySet ( ) ) <nl> + { <nl> + / / This is a potential performance hot spot . As it walks all the data for all <nl> + / / of the fixers . . . But with the vanilla api there isn ' t a way to pass down <nl> + / / the mod specific version numbers , so redundant . . but not hacky . . . <nl> + / / Actually , this wont work as the data walkers take versions into account . . . <nl> + ModFixs fixer = e . getValue ( ) ; <nl> + int ver = getVersion ( e . getKey ( ) ) ; <nl> + if ( ver < fixer . version ) <nl> + { <nl> + for ( IFixableData fix : fixer . getFixes ( type ) ) <nl> + { <nl> + if ( fix . getFixVersion ( ) > ver ) <nl> + nbt = fix . fixTagCompound ( nbt ) ; <nl> + } <nl> + <nl> + for ( IDataWalker walker : getWalkers ( type ) ) <nl> + nbt = walker . process ( this , nbt , version ) ; / / We pass in the holder , in case a walker wants to know a mod version <nl> + } <nl> + } <nl> + return nbt ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getVersion ( String mod ) <nl> + { <nl> + Integer ret = versions . get ( mod ) ; <nl> + return ret = = null ? - 1 : ret ; <nl> + } <nl> + } ; <nl> + return holder . process ( type , nbt , mcversion ) ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Deprecated / / MODDERS DO NOT CALL DIRECTLY ! Only use from DataWalker ! <nl> + public NBTTagCompound process ( IFixType type , NBTTagCompound nbt , int mcversion ) <nl> + { <nl> + if ( type ! = FixTypes . OPTIONS ) / / Options are vanilla only <nl> + throw new IllegalStateException ( " Do not call recursive process directly on DataFixer ! " ) ; <nl> + <nl> + for ( IFixableData fix : vanilla . getFixes ( type ) ) <nl> + { <nl> + if ( fix . getFixVersion ( ) > mcversion ) <nl> + nbt = fix . fixTagCompound ( nbt ) ; <nl> + } <nl> + / / Options is a hack , and doesn ' t have any nested components <nl> + / / for ( IDataWalker walker : getWalkers ( type ) ) <nl> + / / nbt = walker . process ( this , nbt , version ) ; <nl> + return nbt ; <nl> + } <nl> + <nl> + private List < IDataWalker > getWalkers ( IFixType type ) <nl> + { <nl> + List < IDataWalker > ret = walkers . get ( type ) ; <nl> + if ( ret = = null ) <nl> + { <nl> + ret = Lists . newArrayList ( ) ; <nl> + walkers . put ( type , ret ) ; <nl> + } <nl> + return ret ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Deprecated / / Modders do not use this , this will register you as vanilla . Use the ModID version below . <nl> + public void registerFix ( IFixType type , IFixableData fixable ) <nl> + { <nl> + vanilla . registerFix ( type , fixable ) ; <nl> + } <nl> + <nl> + <nl> + @ Override <nl> + @ Deprecated / / Modders do not use this , use add below , To better allow custom fix types . <nl> + public void registerWalker ( FixTypes type , IDataWalker walker ) <nl> + { <nl> + registerWalkerAdd ( type , walker ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void registerWalkerAdd ( IFixType type , IDataWalker walker ) <nl> + { <nl> + getWalkers ( type ) . add ( walker ) ; <nl> + } <nl> + <nl> + private void validateModId ( String mod ) <nl> + { <nl> + / / String current = Loader . instance ( ) . activeModContainer ( ) = = null ? " minecraft " : Loader . instance ( ) . activeModContainer ( ) . getModId ( ) ; <nl> + / / Test active modid ? <nl> + if ( ! mod . equals ( mod . toLowerCase ( Locale . ENGLISH ) ) ) <nl> + throw new IllegalArgumentException ( " Mod ID is not lower case : " + mod ) ; <nl> + if ( mod . length ( ) > 64 ) <nl> + throw new IllegalArgumentException ( " Mod ID is to long : " + mod ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Initialize your mod specific data fixer . <nl> + * <nl> + * @ param modid You mod id , must be lower case . <nl> + * @ param version The current data version of your mod <nl> + * / <nl> + public ModFixs init ( String modid , int version ) <nl> + { <nl> + validateModId ( modid ) ; <nl> + if ( modFixers . containsKey ( modid ) ) <nl> + throw new IllegalStateException ( " Attempted to initalize DataFixer for " + modid + " twice " ) ; <nl> + ModFixs ret = new ModFixs ( modid , version ) ; <nl> + modFixers . put ( modid , ret ) ; <nl> + return ret ; <nl> + } <nl> + <nl> + private Map < String , Integer > getVersions ( NBTTagCompound nbt ) <nl> + { <nl> + Map < String , Integer > ret = Maps . newHashMap ( ) ; <nl> + ret . put ( " minecraft " , nbt . hasKey ( " DataVersion " , 99 ) ? nbt . getInteger ( " DataVersion " ) : - 1 ) ; <nl> + if ( nbt . hasKey ( " ForgeDataVersion " , 10 ) ) <nl> + { <nl> + NBTTagCompound sub = nbt . getCompoundTag ( " ForgeDataVersion " ) ; <nl> + for ( String key : sub . getKeySet ( ) ) <nl> + { <nl> + ret . put ( key , sub . hasKey ( key , 99 ) ? sub . getInteger ( key ) : - 1 ) ; <nl> + } <nl> + } <nl> + return ret ; <nl> + } <nl> + <nl> + public void writeVersionData ( NBTTagCompound nbt ) <nl> + { <nl> + / / nbt . setInteger ( " DataVersion " , vanilla . version ) ; <nl> + NBTTagCompound sub = new NBTTagCompound ( ) ; <nl> + nbt . setTag ( " ForgeDataVersion " , sub ) ; <nl> + for ( ModFixs mod : modFixers . values ( ) ) <nl> + sub . setInteger ( mod . mod , mod . version ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / IDataFixerData . java b / src / main / java / net / minecraftforge / common / util / IDataFixerData . java <nl> new file mode 100644 <nl> index 0000000 . . da6b05c <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / util / IDataFixerData . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . common . util ; <nl> + <nl> + import net . minecraft . util . datafix . IDataFixer ; <nl> + <nl> + public interface IDataFixerData extends IDataFixer <nl> + { <nl> + public int getVersion ( String mod ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / ModFixs . java b / src / main / java / net / minecraftforge / common / util / ModFixs . java <nl> new file mode 100644 <nl> index 0000000 . . 2dc01f2 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / util / ModFixs . java <nl> @ @ - 0 , 0 + 1 , 83 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . common . util ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + import net . minecraft . util . datafix . IFixType ; <nl> + import net . minecraft . util . datafix . IFixableData ; <nl> + <nl> + public class ModFixs <nl> + { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + final String mod ; <nl> + final int version ; <nl> + private final Map < IFixType , List < IFixableData > > fixes = Maps . newHashMap ( ) ; <nl> + <nl> + ModFixs ( String mod , int version ) <nl> + { <nl> + this . mod = mod ; <nl> + this . version = version ; <nl> + } <nl> + <nl> + public List < IFixableData > getFixes ( IFixType type ) <nl> + { <nl> + List < IFixableData > ret = this . fixes . get ( type ) ; <nl> + if ( ret = = null ) <nl> + { <nl> + ret = Lists . newArrayList ( ) ; <nl> + this . fixes . put ( type , ret ) ; <nl> + } <nl> + return ret ; <nl> + } <nl> + <nl> + public void registerFix ( IFixType type , IFixableData fixer ) <nl> + { <nl> + List < IFixableData > list = getFixes ( type ) ; <nl> + int ver = fixer . getFixVersion ( ) ; <nl> + <nl> + if ( ver > this . version ) <nl> + { <nl> + LOGGER . warn ( " [ { } ] Ignored fix registered for version : { } as the DataVersion of the game is : { } " , mod , ver , this . version ) ; <nl> + return ; <nl> + } <nl> + <nl> + if ( ! list . isEmpty ( ) & & list . get ( list . size ( ) - 1 ) . getFixVersion ( ) > ver ) <nl> + { <nl> + for ( int x = 0 ; x < list . size ( ) ; + + x ) <nl> + { <nl> + if ( list . get ( x ) . getFixVersion ( ) > ver ) <nl> + { <nl> + list . add ( x , fixer ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + else <nl> + list . add ( fixer ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index c796af8 . . a78247c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 82 , 6 + 82 , 7 @ @ import net . minecraft . world . storage . SaveFormatOld ; <nl> import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . common . util . CompoundDataFixer ; <nl> import net . minecraftforge . fml . client . registry . RenderingRegistry ; <nl> import net . minecraftforge . fml . common . DummyModContainer ; <nl> import net . minecraftforge . fml . common . DuplicateModsFoundException ; <nl> @ @ - 1060 , 4 + 1061 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> MinecraftForge . EVENT _ BUS . post ( new ModelRegistryEvent ( ) ) ; <nl> } <nl> + <nl> + @ Override <nl> + public CompoundDataFixer getDataFixer ( ) <nl> + { <nl> + return ( CompoundDataFixer ) this . client . getDataFixer ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index d4863c7 . . 1411eda 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 57 , 6 + 57 , 7 @ @ import net . minecraft . world . storage . WorldInfo ; <nl> import net . minecraftforge . client . model . animation . Animation ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . common . util . CompoundDataFixer ; <nl> import net . minecraftforge . fml . common . eventhandler . EventBus ; <nl> import net . minecraftforge . fml . common . gameevent . InputEvent ; <nl> import net . minecraftforge . fml . common . gameevent . PlayerEvent ; <nl> @ @ - 751 , 4 + 752 , 9 @ @ public class FMLCommonHandler <nl> { <nl> sidedDelegate . fireSidedRegistryEvents ( ) ; <nl> } <nl> + <nl> + public CompoundDataFixer getDataFixer ( ) <nl> + { <nl> + return ( CompoundDataFixer ) sidedDelegate . getDataFixer ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> index aea07ff . . 4cff064 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import net . minecraft . network . INetHandler ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . server . MinecraftServer ; <nl> import net . minecraft . util . IThreadListener ; <nl> + import net . minecraftforge . common . util . CompoundDataFixer ; <nl> import net . minecraftforge . fml . common . eventhandler . EventBus ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> @ @ - 77 , 4 + 78 , 6 @ @ public interface IFMLSidedHandler <nl> void reloadRenderers ( ) ; <nl> <nl> void fireSidedRegistryEvents ( ) ; <nl> + <nl> + CompoundDataFixer getDataFixer ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index 54c25b1 . . fa4f6a5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import net . minecraft . server . dedicated . PendingCommand ; <nl> import net . minecraft . util . IThreadListener ; <nl> import net . minecraft . util . text . translation . LanguageMap ; <nl> import net . minecraft . world . storage . SaveFormatOld ; <nl> + import net . minecraftforge . common . util . CompoundDataFixer ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . IFMLSidedHandler ; <nl> @ @ - 339 , 4 + 340 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> / / NOOP <nl> } <nl> + @ Override <nl> + public CompoundDataFixer getDataFixer ( ) <nl> + { <nl> + return ( CompoundDataFixer ) this . server . getDataFixer ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg <nl> index 14df9d2 . . 586b68e 100644 <nl> - - - a / src / main / resources / forge _ at . cfg <nl> + + + b / src / main / resources / forge _ at . cfg <nl> @ @ - 287 , 4 + 287 , 7 @ @ public net . minecraft . potion . PotionHelper func _ 185204 _ a ( Lnet / minecraft / potion / Pot <nl> <nl> # TileEntityHopper <nl> public net . minecraft . tileentity . TileEntityHopper func _ 174914 _ o ( ) Z # mayTransfer <nl> - public net . minecraft . tileentity . TileEntityHopper func _ 145896 _ c ( I ) V # setTransferCooldown <nl> \ No newline at end of file <nl> + public net . minecraft . tileentity . TileEntityHopper func _ 145896 _ c ( I ) V # setTransferCooldown <nl> + <nl> + # DataFixer <nl> + public net . minecraft . util . datafix . DataFixer field _ 188262 _ d # version <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / command / Commands . java . patch b / patches / minecraft / net / minecraft / command / Commands . java . patch 
 new file mode 100644 
 index 0000000 . . e4f3fd2 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / command / Commands . java . patch 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + - - - a / net / minecraft / command / Commands . java 
 + + + + b / net / minecraft / command / Commands . java 
 + @ @ - 189 , 7 + 189 , 15 @ @ 
 + 
 + try { 
 + try { 
 + - int lvt _ 4 _ 3 _ = this . field _ 197062 _ b . execute ( p _ 197059 _ 2 _ , p _ 197059 _ 1 _ ) ; 
 + + com . mojang . brigadier . ParseResults < CommandSource > parse = this . field _ 197062 _ b . parse ( p _ 197059 _ 2 _ , p _ 197059 _ 1 _ ) ; 
 + + net . minecraftforge . event . CommandEvent event = new net . minecraftforge . event . CommandEvent ( parse ) ; 
 + + if ( net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( event ) ) { 
 + + if ( event . getException ( ) ! = null ) { 
 + + com . google . common . base . Throwables . throwIfUnchecked ( event . getException ( ) ) ; 
 + + } 
 + + return 1 ; 
 + + } 
 + + int lvt _ 4 _ 3 _ = this . field _ 197062 _ b . execute ( event . getParseResults ( ) ) ; 
 + return lvt _ 4 _ 3 _ ; 
 + } catch ( CommandException commandexception ) { 
 + p _ 197059 _ 1 _ . func _ 197021 _ a ( commandexception . func _ 197003 _ a ( ) ) ; 
 diff - - git a / patches / minecraft / net / minecraft / command / arguments / EntitySelectorParser . java . patch b / patches / minecraft / net / minecraft / command / arguments / EntitySelectorParser . java . patch 
 new file mode 100644 
 index 0000000 . . 2c761fd 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / command / arguments / EntitySelectorParser . java . patch 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + - - - a / net / minecraft / command / arguments / EntitySelectorParser . java 
 + + + + b / net / minecraft / command / arguments / EntitySelectorParser . java 
 + @ @ - 441 , 6 + 441 , 10 @ @ 
 + } 
 + 
 + this . field _ 197417 _ j . skip ( ) ; 
 + + EntitySelector forgeSelector = net . minecraftforge . common . command . EntitySelectorManager . parseSelector ( this ) ; 
 + + if ( forgeSelector ! = null ) { 
 + + return forgeSelector ; 
 + + } 
 + this . func _ 197403 _ b ( ) ; 
 + } else { 
 + this . func _ 197382 _ c ( ) ; 
 + @ @ - 456 , 6 + 460 , 7 @ @ 
 + p _ 210326 _ 0 _ . suggest ( " @ r " , new TextComponentTranslation ( " argument . entity . selector . randomPlayer " , new Object [ 0 ] ) ) ; 
 + p _ 210326 _ 0 _ . suggest ( " @ s " , new TextComponentTranslation ( " argument . entity . selector . self " , new Object [ 0 ] ) ) ; 
 + p _ 210326 _ 0 _ . suggest ( " @ e " , new TextComponentTranslation ( " argument . entity . selector . allEntities " , new Object [ 0 ] ) ) ; 
 + + net . minecraftforge . common . command . EntitySelectorManager . fillSelectorSuggestions ( p _ 210326 _ 0 _ ) ; 
 + } 
 + 
 + private CompletableFuture < Suggestions > func _ 201981 _ b ( SuggestionsBuilder p _ 201981 _ 1 _ , Consumer < SuggestionsBuilder > p _ 201981 _ 2 _ ) { 
 diff - - git a / patches _ old / minecraft / net / minecraft / command / CommandHandler . java . patch b / patches _ old / minecraft / net / minecraft / command / CommandHandler . java . patch 
 deleted file mode 100644 
 index de6db71 . . 0000000 
 - - - a / patches _ old / minecraft / net / minecraft / command / CommandHandler . java . patch 
 + + + / dev / null 
 @ @ - 1 , 20 + 0 , 0 @ @ 
 - - - - . . / src - base / minecraft / net / minecraft / command / CommandHandler . java 
 - + + + . . / src - work / minecraft / net / minecraft / command / CommandHandler . java 
 - @ @ - 50 , 6 + 50 , 17 @ @ 
 - } 
 - else if ( icommand . func _ 184882 _ a ( this . func _ 184879 _ a ( ) , p _ 71556 _ 1 _ ) ) 
 - { 
 - + net . minecraftforge . event . CommandEvent event = new net . minecraftforge . event . CommandEvent ( icommand , p _ 71556 _ 1 _ , astring ) ; 
 - + if ( net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( event ) ) 
 - + { 
 - + if ( event . getException ( ) ! = null ) 
 - + { 
 - + com . google . common . base . Throwables . throwIfUnchecked ( event . getException ( ) ) ; 
 - + } 
 - + return 1 ; 
 - + } 
 - + if ( event . getParameters ( ) ! = null ) astring = event . getParameters ( ) ; 
 - + 
 - if ( j > - 1 ) 
 - { 
 - List < Entity > list = EntitySelector . < Entity > func _ 179656 _ b ( p _ 71556 _ 1 _ , astring [ j ] , Entity . class ) ; 
 diff - - git a / patches _ old / minecraft / net / minecraft / command / EntitySelector . java . patch b / patches _ old / minecraft / net / minecraft / command / EntitySelector . java . patch 
 deleted file mode 100644 
 index dd80d47 . . 0000000 
 - - - a / patches _ old / minecraft / net / minecraft / command / EntitySelector . java . patch 
 + + + / dev / null 
 @ @ - 1 , 46 + 0 , 0 @ @ 
 - - - - . . / src - base / minecraft / net / minecraft / command / EntitySelector . java 
 - + + + . . / src - work / minecraft / net / minecraft / command / EntitySelector . java 
 - @ @ - 121 , 6 + 121 , 11 @ @ 
 - 
 - public static < T extends Entity > List < T > func _ 179656 _ b ( ICommandSender p _ 179656 _ 0 _ , String p _ 179656 _ 1 _ , Class < ? extends T > p _ 179656 _ 2 _ ) throws CommandException 
 - { 
 - + return net . minecraftforge . common . command . SelectorHandlerManager . matchEntities ( p _ 179656 _ 0 _ , p _ 179656 _ 1 _ , p _ 179656 _ 2 _ ) ; 
 - + } 
 - + 
 - + public static < T extends Entity > List < T > matchEntitiesDefault ( ICommandSender p _ 179656 _ 0 _ , String p _ 179656 _ 1 _ , Class < ? extends T > p _ 179656 _ 2 _ ) throws CommandException 
 - + { 
 - Matcher matcher = field _ 82389 _ a . matcher ( p _ 179656 _ 1 _ ) ; 
 - 
 - if ( matcher . matches ( ) & & p _ 179656 _ 0 _ . func _ 70003 _ b ( 1 , " @ " ) ) 
 - @ @ - 153 , 6 + 158 , 7 @ @ 
 - list2 . addAll ( func _ 184951 _ f ( map ) ) ; 
 - list2 . addAll ( func _ 180698 _ a ( map , vec3d ) ) ; 
 - list2 . addAll ( func _ 179662 _ g ( map ) ) ; 
 - + list2 . addAll ( net . minecraftforge . fml . common . registry . GameRegistry . createEntitySelectors ( map , s , p _ 179656 _ 0 _ , vec3d ) ) ; 
 - 
 - if ( " s " . equalsIgnoreCase ( s ) ) 
 - { 
 - @ @ - 786 , 6 + 792 , 11 @ @ 
 - 
 - public static boolean func _ 82377 _ a ( String p _ 82377 _ 0 _ ) throws CommandException 
 - { 
 - + return net . minecraftforge . common . command . SelectorHandlerManager . matchesMultiplePlayers ( p _ 82377 _ 0 _ ) ; 
 - + } 
 - + 
 - + public static boolean matchesMultiplePlayersDefault ( String p _ 82377 _ 0 _ ) throws CommandException 
 - + { 
 - Matcher matcher = field _ 82389 _ a . matcher ( p _ 82377 _ 0 _ ) ; 
 - 
 - if ( ! matcher . matches ( ) ) 
 - @ @ - 803 , 6 + 814 , 11 @ @ 
 - 
 - public static boolean func _ 82378 _ b ( String p _ 82378 _ 0 _ ) 
 - { 
 - + return net . minecraftforge . common . command . SelectorHandlerManager . isSelector ( p _ 82378 _ 0 _ ) ; 
 - + } 
 - + 
 - + public static boolean isSelectorDefault ( String p _ 82378 _ 0 _ ) 
 - + { 
 - return field _ 82389 _ a . matcher ( p _ 82378 _ 0 _ ) . matches ( ) ; 
 - } 
 - 
 diff - - git a / src / main / java / net / minecraftforge / common / command / EntitySelectorManager . java b / src / main / java / net / minecraftforge / common / command / EntitySelectorManager . java 
 new file mode 100644 
 index 0000000 . . e9c0890 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / command / EntitySelectorManager . java 
 @ @ - 0 , 0 + 1 , 97 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . command ; 
 + 
 + import com . mojang . brigadier . StringReader ; 
 + import com . mojang . brigadier . exceptions . CommandSyntaxException ; 
 + import com . mojang . brigadier . suggestion . SuggestionsBuilder ; 
 + import net . minecraft . command . arguments . EntitySelector ; 
 + import net . minecraft . command . arguments . EntitySelectorParser ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . HashMap ; 
 + 
 + / * * 
 + * Allows modders to register custom entity selectors by assigning an { @ link IEntitySelectorType } to a String token . < br > 
 + * The token " test " , for example , corresponds to @ test [ . . . ] in a command . 
 + * / 
 + public class EntitySelectorManager 
 + { 
 + private static final HashMap < String , IEntitySelectorType > REGISTRY = new HashMap < > ( ) ; 
 + 
 + / * * 
 + * Registers a new { @ link IEntitySelectorType } for the given { @ code token } . < br > 
 + * 
 + * @ param token Defines the name of the selector 
 + * / 
 + public static void register ( String token , IEntitySelectorType type ) 
 + { 
 + if ( token . isEmpty ( ) ) 
 + { 
 + throw new IllegalArgumentException ( " Token must not be empty " ) ; 
 + } 
 + 
 + if ( Arrays . asList ( " p " , " a " , " r " , " s " , " e " ) . contains ( token ) ) 
 + { 
 + throw new IllegalArgumentException ( " Token clashes with vanilla @ " + token ) ; 
 + } 
 + 
 + for ( char c : token . toCharArray ( ) ) 
 + { 
 + if ( ! StringReader . isAllowedInUnquotedString ( c ) ) { 
 + throw new IllegalArgumentException ( " Token must only contain allowed characters " ) ; 
 + } 
 + } 
 + 
 + REGISTRY . put ( token , type ) ; 
 + } 
 + 
 + / * * 
 + * This method is called in { @ link EntitySelectorParser # parse } < br > 
 + * 
 + * If the REGISTRY does not contain a custom selector for the command being parsed , 
 + * this method returns { @ code null } and the vanilla logic in { @ link EntitySelectorParser # parseSelector } is used . 
 + * / 
 + public static EntitySelector parseSelector ( EntitySelectorParser parser ) throws CommandSyntaxException 
 + { 
 + if ( parser . getReader ( ) . canRead ( ) ) 
 + { 
 + int i = parser . getReader ( ) . getCursor ( ) ; 
 + String token = parser . getReader ( ) . readUnquotedString ( ) ; 
 + IEntitySelectorType type = REGISTRY . get ( token ) ; 
 + if ( type ! = null ) 
 + { 
 + return type . build ( parser ) ; 
 + } 
 + 
 + parser . getReader ( ) . setCursor ( i ) ; 
 + } 
 + 
 + return null ; 
 + } 
 + 
 + / * * 
 + * This method is called in { @ link EntitySelectorParser # fillSelectorSuggestions } 
 + * / 
 + public static void fillSelectorSuggestions ( SuggestionsBuilder suggestionBuilder ) 
 + { 
 + REGISTRY . forEach ( ( token , type ) - > suggestionBuilder . suggest ( " @ " + token , type . getSuggestionTooltip ( ) ) ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / command / IEntitySelectorType . java b / src / main / java / net / minecraftforge / common / command / IEntitySelectorType . java 
 new file mode 100644 
 index 0000000 . . 18c61ea 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / command / IEntitySelectorType . java 
 @ @ - 0 , 0 + 1 , 44 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . command ; 
 + 
 + import com . mojang . brigadier . exceptions . CommandSyntaxException ; 
 + import net . minecraft . command . arguments . EntitySelector ; 
 + import net . minecraft . command . arguments . EntitySelectorParser ; 
 + import net . minecraft . util . text . ITextComponent ; 
 + 
 + / * * 
 + * Implementations of this interface can be registered using { @ link EntitySelectorManager # register } 
 + * / 
 + public interface IEntitySelectorType 
 + { 
 + / * * 
 + * Returns an { @ link EntitySelector } based on the given { @ link EntitySelectorParser } . < br > 
 + * 
 + * Use { @ link EntitySelectorParser # getReader } to read extra arguments and { @ link EntitySelectorParser # addFilter } to add the corresponding filters . < br > 
 + * If the token being parsed does not match the syntax of this selector , this method should throw an appropriate { @ link CommandSyntaxException } . 
 + * / 
 + EntitySelector build ( EntitySelectorParser parser ) throws CommandSyntaxException ; 
 + 
 + / * * 
 + * Returns an { @ link ITextComponent } containing a short description for this selector type . 
 + * / 
 + ITextComponent getSuggestionTooltip ( ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / event / CommandEvent . java b / src / main / java / net / minecraftforge / event / CommandEvent . java 
 new file mode 100644 
 index 0000000 . . 4a1ff61 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / CommandEvent . java 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . event ; 
 + 
 + import com . mojang . brigadier . ParseResults ; 
 + import net . minecraft . command . CommandSource ; 
 + import net . minecraft . command . Commands ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . eventbus . api . Cancelable ; 
 + import net . minecraftforge . eventbus . api . Event ; 
 + 
 + / * * 
 + * CommandEvent is fired after a command is parsed , but before it is executed . 
 + * This event is fired during the invocation of { @ link Commands # handleCommand ( CommandSource , String ) } . < br > 
 + * < br > 
 + * { @ link # parse } contains the instance of { @ link ParseResults } for the parsed command . < br > 
 + * { @ link # exception } begins null , but can be populated with an exception to be thrown within the command . < br > 
 + * < br > 
 + * This event is { @ link Cancelable } . < br > 
 + * If the event is canceled , the execution of the command does not occur . < br > 
 + * < br > 
 + * This event does not have a result . { @ link HasResult } < br > 
 + * < br > 
 + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . < br > 
 + * * / 
 + @ Cancelable 
 + public class CommandEvent extends Event 
 + { 
 + private ParseResults < CommandSource > parse ; 
 + private Throwable exception ; 
 + 
 + public CommandEvent ( ParseResults < CommandSource > parse ) 
 + { 
 + this . parse = parse ; 
 + } 
 + 
 + public ParseResults < CommandSource > getParseResults ( ) { return parse ; } 
 + public void setParseResults ( ParseResults < CommandSource > parse ) { this . parse = parse ; } 
 + public Throwable getException ( ) { return exception ; } 
 + public void setException ( Throwable exception ) { this . exception = exception ; } 
 + } 
 diff - - git a / src / main / resources / META - INF / accesstransformer . cfg b / src / main / resources / META - INF / accesstransformer . cfg 
 index ac1e57d . . 5032355 100644 
 - - - a / src / main / resources / META - INF / accesstransformer . cfg 
 + + + b / src / main / resources / META - INF / accesstransformer . cfg 
 @ @ - 344 , 8 + 344 , 12 @ @ protected net . minecraft . entity . monster . EntityStray func _ 190727 _ o ( ) Lnet / minecraft 
 # EntitySkeleton 
 protected net . minecraft . entity . monster . EntitySkeleton func _ 190727 _ o ( ) Lnet / minecraft / util / SoundEvent ; # getStepSound - make AbstractSkeleton implementable 
 
 - # EntitySelector 
 - public net . minecraft . command . EntitySelector func _ 190826 _ c ( Ljava / lang / String ; ) Ljava / lang / String ; # addArgument 
 + # EntitySelectorParser 
 + public net . minecraft . command . arguments . EntitySelectorParser func _ 197396 _ n ( ) V # updateFilter 
 + public net . minecraft . command . arguments . EntitySelectorParser func _ 197404 _ d ( ) V # parseArguments 
 + 
 + # EntityOptions 
 + public net . minecraft . command . arguments . EntityOptions func _ 202024 _ a ( Ljava / lang / String ; Lnet / minecraft / command / arguments / EntityOptions $ Filter ; Ljava / util / function / Predicate ; Lnet / minecraft / util / text / ITextComponent ; ) V # register 
 
 # Teleporter 
 protected net . minecraft . world . Teleporter field _ 85192 _ a # world 
 diff - - git a / src / test / java / net / minecraftforge / debug / chat / CommandEventTest . java b / src / test / java / net / minecraftforge / debug / chat / CommandEventTest . java 
 new file mode 100644 
 index 0000000 . . 42eedec 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / chat / CommandEventTest . java 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . debug . chat ; 
 + 
 + import com . mojang . brigadier . CommandDispatcher ; 
 + import com . mojang . brigadier . tree . CommandNode ; 
 + import net . minecraft . command . CommandException ; 
 + import net . minecraft . command . CommandSource ; 
 + import net . minecraft . util . text . TextComponentString ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . CommandEvent ; 
 + import net . minecraftforge . eventbus . api . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + @ Mod ( " command _ event _ test " ) 
 + public class CommandEventTest 
 + { 
 + public final Logger LOGGER = LogManager . getLogger ( ) ; 
 + 
 + public CommandEventTest ( ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void onCommand ( CommandEvent event ) 
 + { 
 + CommandDispatcher < CommandSource > dispatcher = event . getParseResults ( ) . getContext ( ) . getDispatcher ( ) ; 
 + List < CommandNode < CommandSource > > nodes = new ArrayList < > ( event . getParseResults ( ) . getContext ( ) . getNodes ( ) . keySet ( ) ) ; 
 + CommandSource source = event . getParseResults ( ) . getContext ( ) . getSource ( ) ; 
 + 
 + / / test : when the / time command is used with no arguments , automatically add default arguments ( / time set day ) 
 + if ( nodes . size ( ) = = 1 & & nodes . get ( 0 ) = = dispatcher . getRoot ( ) . getChild ( " time " ) ) 
 + { 
 + event . setParseResults ( dispatcher . parse ( " time set day " , source ) ) ; 
 + return ; 
 + } 
 + 
 + / / test : whenever a player uses the / give command , let everyone on the server know 
 + if ( nodes . size ( ) > 0 & & nodes . get ( 0 ) = = dispatcher . getRoot ( ) . getChild ( " give " ) ) 
 + { 
 + String msg = source . getName ( ) + " used the give command : " + event . getParseResults ( ) . getReader ( ) . getString ( ) ; 
 + source . getServer ( ) . getPlayerList ( ) . getPlayers ( ) . forEach ( entityPlayerMP - > entityPlayerMP . sendMessage ( new TextComponentString ( msg ) ) ) ; 
 + return ; 
 + } 
 + 
 + / / test : when the / kill command is used with no arguments , throw a custom exception 
 + if ( nodes . size ( ) = = 1 & & nodes . get ( 0 ) = = dispatcher . getRoot ( ) . getChild ( " kill " ) ) 
 + { 
 + event . setException ( new CommandException ( new TextComponentString ( " You tried to use the / kill command with no arguments " ) ) ) ; 
 + event . setCanceled ( true ) ; 
 + return ; 
 + } 
 + } 
 + 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / chat / EntitySelectorFactoryTest . java b / src / test / java / net / minecraftforge / debug / chat / EntitySelectorFactoryTest . java 
 deleted file mode 100644 
 index 7b556bd . . 0000000 
 - - - a / src / test / java / net / minecraftforge / debug / chat / EntitySelectorFactoryTest . java 
 + + + / dev / null 
 @ @ - 1 , 99 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2018 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . debug . chat ; 
 - 
 - import com . google . common . base . Predicate ; 
 - import net . minecraft . command . ICommandSender ; 
 - import net . minecraft . entity . Entity ; 
 - import net . minecraft . entity . EntityLivingBase ; 
 - import net . minecraft . util . math . Vec3d ; 
 - import net . minecraft . util . text . TextComponentString ; 
 - import net . minecraftforge . fml . common . IEntitySelectorFactory ; 
 - import net . minecraftforge . fml . common . Mod ; 
 - import net . minecraftforge . fml . event . FMLInitializationEvent ; 
 - import net . minecraftforge . fml . common . registry . GameRegistry ; 
 - 
 - import javax . annotation . Nonnull ; 
 - import javax . annotation . Nullable ; 
 - import java . util . Collections ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - 
 - / * * 
 - * You can verify that this test is working fine by following these steps . 
 - * Spawn a few cows and a few sheep and then use " / kill @ e [ forge : min _ health = ! 10 ] " 
 - * All entities with less than 10 health points ( current , not max ) should die . 
 - * This should include the sheep , but not the ( healthy ) cows . 
 - * / 
 - @ Mod ( modid = " customentityselectortest " , name = " Custom Entity Selector Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 - public class EntitySelectorFactoryTest 
 - { 
 - 
 - @ Mod . EventHandler 
 - public void init ( FMLInitializationEvent event ) 
 - { 
 - GameRegistry . registerEntitySelector ( new EntitySelectorFactory ( ) , " forge : min _ health " ) ; 
 - } 
 - 
 - private class EntitySelectorFactory implements IEntitySelectorFactory 
 - { 
 - 
 - @ Nonnull 
 - @ Override 
 - public List < Predicate < Entity > > createPredicates ( Map < String , String > arguments , String mainSelector , ICommandSender sender , Vec3d position ) 
 - { 
 - String health = arguments . get ( " forge : min _ health " ) ; 
 - 
 - / / If our selector is used in this command create a Predicate otherwise return an empty list . 
 - if ( health ! = null ) 
 - { 
 - final boolean invert = health . startsWith ( " ! " ) ; 
 - 
 - if ( invert ) 
 - { 
 - health = health . substring ( 1 ) ; 
 - } 
 - try 
 - { 
 - final int value = Integer . parseInt ( health ) ; 
 - 
 - / / Return a list of predicates . All these predicates have to apply for any entity to be selected . 
 - return Collections . < Predicate < Entity > > singletonList ( new Predicate < Entity > ( ) 
 - { 
 - @ Override 
 - public boolean apply ( @ Nullable Entity input ) 
 - { 
 - if ( ! ( input instanceof EntityLivingBase ) ) 
 - { 
 - return false ; 
 - } 
 - return ( ( ( EntityLivingBase ) input ) . getHealth ( ) > = value ) ! = invert ; 
 - } 
 - } ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - sender . sendMessage ( new TextComponentString ( " Entity selector ' forge : min _ health ' has to be an integer " ) ) ; 
 - } 
 - } 
 - return Collections . emptyList ( ) ; 
 - } 
 - } 
 - } 
 diff - - git a / src / test / java / net / minecraftforge / debug / chat / EntitySelectorTest . java b / src / test / java / net / minecraftforge / debug / chat / EntitySelectorTest . java 
 new file mode 100644 
 index 0000000 . . 5ca40d4 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / chat / EntitySelectorTest . java 
 @ @ - 0 , 0 + 1 , 97 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . debug . chat ; 
 + 
 + import com . mojang . brigadier . exceptions . CommandSyntaxException ; 
 + import net . minecraft . advancements . criterion . MinMaxBounds ; 
 + import net . minecraft . command . arguments . EntityOptions ; 
 + import net . minecraft . command . arguments . EntitySelector ; 
 + import net . minecraft . command . arguments . EntitySelectorParser ; 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraft . entity . EntityLivingBase ; 
 + import net . minecraft . util . text . ITextComponent ; 
 + import net . minecraft . util . text . TextComponentString ; 
 + import net . minecraftforge . common . command . EntitySelectorManager ; 
 + import net . minecraftforge . common . command . IEntitySelectorType ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; 
 + import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; 
 + 
 + @ Mod ( " entity _ selector _ test " ) 
 + public class EntitySelectorTest 
 + { 
 + public EntitySelectorTest ( ) 
 + { 
 + FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : setup ) ; 
 + } 
 + 
 + public void setup ( FMLCommonSetupEvent event ) 
 + { 
 + EntityOptions . register ( " health " , this : : healthArgument , parser - > true , 
 + new TextComponentString ( " Selects entities based on their current health . " ) ) ; 
 + EntitySelectorManager . register ( " er " , new ExampleCustomSelector ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Example for a custom selector argument , checks for the health of the entity 
 + * / 
 + private void healthArgument ( EntitySelectorParser parser ) throws CommandSyntaxException 
 + { 
 + MinMaxBounds . FloatBound bound = MinMaxBounds . FloatBound . fromReader ( parser . getReader ( ) ) ; 
 + parser . addFilter ( entity - > entity instanceof EntityLivingBase & & bound . test ( ( ( EntityLivingBase ) entity ) . getHealth ( ) ) ) ; 
 + } 
 + 
 + / * * 
 + * Example for a custom selector type , works like @ r but for entities . 
 + * Basically does exactly what @ e [ sorter = random , limit = 1 , . . . ] does . 
 + * / 
 + private class ExampleCustomSelector implements IEntitySelectorType 
 + { 
 + @ Override 
 + public EntitySelector build ( EntitySelectorParser parser ) throws CommandSyntaxException 
 + { 
 + parser . setSorter ( EntitySelectorParser . RANDOM ) ; 
 + parser . setLimit ( 1 ) ; 
 + parser . setIncludeNonPlayers ( true ) ; 
 + parser . addFilter ( Entity : : isAlive ) ; 
 + parser . setSuggestionHandler ( ( builder , consumer ) - > builder . suggest ( String . valueOf ( ' [ ' ) ) . buildFuture ( ) ) ; 
 + if ( parser . getReader ( ) . canRead ( ) & & parser . getReader ( ) . peek ( ) = = ' [ ' ) 
 + { 
 + parser . getReader ( ) . skip ( ) ; 
 + parser . setSuggestionHandler ( ( builder , consumer ) - > { 
 + builder . suggest ( String . valueOf ( ' ] ' ) ) ; 
 + EntityOptions . suggestOptions ( parser , builder ) ; 
 + return builder . buildFuture ( ) ; 
 + } ) ; 
 + 
 + parser . parseArguments ( ) ; 
 + } 
 + 
 + parser . updateFilter ( ) ; 
 + return parser . build ( ) ; 
 + } 
 + 
 + @ Override 
 + public ITextComponent getSuggestionTooltip ( ) 
 + { 
 + return new TextComponentString ( " Example : Selects a random entity " ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / META - INF / mods . toml b / src / test / resources / META - INF / mods . toml 
 index 8c48762 . . 843de44 100644 
 - - - a / src / test / resources / META - INF / mods . toml 
 + + + b / src / test / resources / META - INF / mods . toml 
 @ @ - 74 , 3 + 74 , 12 @ @ key = " value " 
 modId = " enumplanttypetest " 
 version = " 1 . 0 " 
 displayName = " EnumPlantTypeTest " 
 + # debug / chat 
 + [ [ mods ] ] 
 + modId = " command _ event _ test " 
 + version = " 1 . 0 " 
 + displayName = " CommandEventTest " 
 + [ [ mods ] ] 
 + modId = " entity _ selector _ test " 
 + version = " 1 . 0 " 
 + displayName = " EntitySelectorTest "

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 index 5637ab8 . . eaf179b 100644 
 - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 @ @ - 152 , 7 + 152 , 15 @ @ 
 this . field _ 71100 _ bB . func _ 75112 _ a ( p _ 70037 _ 1 _ ) ; 
 this . field _ 71075 _ bZ . func _ 75095 _ b ( p _ 70037 _ 1 _ ) ; 
 
 - @ @ - 921 , 6 + 965 , 23 @ @ 
 + @ @ - 903 , 6 + 947 , 7 @ @ 
 + { 
 + super . func _ 70014 _ b ( p _ 70014 _ 1 _ ) ; 
 + p _ 70014 _ 1 _ . func _ 74768 _ a ( " DataVersion " , 819 ) ; 
 + + net . minecraftforge . fml . common . FMLCommonHandler . instance ( ) . getDataFixer ( ) . writeVersionData ( p _ 70014 _ 1 _ ) ; 
 + p _ 70014 _ 1 _ . func _ 74782 _ a ( " Inventory " , this . field _ 71071 _ by . func _ 70442 _ a ( new NBTTagList ( ) ) ) ; 
 + p _ 70014 _ 1 _ . func _ 74768 _ a ( " SelectedItemSlot " , this . field _ 71071 _ by . field _ 70461 _ c ) ; 
 + p _ 70014 _ 1 _ . func _ 74757 _ a ( " Sleeping " , this . field _ 71083 _ bS ) ; 
 + @ @ - 921 , 6 + 966 , 23 @ @ 
 p _ 70014 _ 1 _ . func _ 74757 _ a ( " SpawnForced " , this . field _ 82248 _ d ) ; 
 } 
 
 @ @ - 176 , 7 + 184 , 7 @ @ 
 this . field _ 71100 _ bB . func _ 75117 _ b ( p _ 70014 _ 1 _ ) ; 
 this . field _ 71075 _ bZ . func _ 75091 _ a ( p _ 70014 _ 1 _ ) ; 
 p _ 70014 _ 1 _ . func _ 74782 _ a ( " EnderItems " , this . field _ 71078 _ a . func _ 70487 _ g ( ) ) ; 
 - @ @ - 928 , 6 + 989 , 7 @ @ 
 + @ @ - 928 , 6 + 990 , 7 @ @ 
 
 public boolean func _ 70097 _ a ( DamageSource p _ 70097 _ 1 _ , float p _ 70097 _ 2 _ ) 
 { 
 @ @ - 184 , 7 + 192 , 7 @ @ 
 if ( this . func _ 180431 _ b ( p _ 70097 _ 1 _ ) ) 
 { 
 return false ; 
 - @ @ - 1006 , 6 + 1068 , 7 @ @ 
 + @ @ - 1006 , 6 + 1069 , 7 @ @ 
 if ( this . field _ 184627 _ bm . func _ 190926 _ b ( ) ) 
 { 
 EnumHand enumhand = this . func _ 184600 _ cs ( ) ; 
 @ @ - 192 , 7 + 200 , 7 @ @ 
 
 if ( enumhand = = EnumHand . MAIN _ HAND ) 
 { 
 - @ @ - 1041 , 7 + 1104 , 10 @ @ 
 + @ @ - 1041 , 7 + 1105 , 10 @ @ 
 { 
 if ( ! this . func _ 180431 _ b ( p _ 70665 _ 1 _ ) ) 
 { 
 @ @ - 204 , 7 + 212 , 7 @ @ 
 p _ 70665 _ 2 _ = this . func _ 70672 _ c ( p _ 70665 _ 1 _ , p _ 70665 _ 2 _ ) ; 
 float f = p _ 70665 _ 2 _ ; 
 p _ 70665 _ 2 _ = Math . max ( p _ 70665 _ 2 _ - this . func _ 110139 _ bj ( ) , 0 . 0F ) ; 
 - @ @ - 1111 , 6 + 1177 , 7 @ @ 
 + @ @ - 1111 , 6 + 1178 , 7 @ @ 
 } 
 else 
 { 
 @ @ - 212 , 7 + 220 , 7 @ @ 
 ItemStack itemstack = this . func _ 184586 _ b ( p _ 190775 _ 2 _ ) ; 
 ItemStack itemstack1 = itemstack . func _ 190926 _ b ( ) ? ItemStack . field _ 190927 _ a : itemstack . func _ 77946 _ l ( ) ; 
 
 - @ @ - 1120 , 7 + 1187 , 10 @ @ 
 + @ @ - 1120 , 7 + 1188 , 10 @ @ 
 { 
 itemstack . func _ 190920 _ e ( itemstack1 . func _ 190916 _ E ( ) ) ; 
 } 
 @ @ - 224 , 7 + 232 , 7 @ @ 
 return EnumActionResult . SUCCESS ; 
 } 
 else 
 - @ @ - 1136 , 6 + 1206 , 7 @ @ 
 + @ @ - 1136 , 6 + 1207 , 7 @ @ 
 { 
 if ( itemstack . func _ 190926 _ b ( ) & & ! this . field _ 71075 _ bZ . field _ 75098 _ d ) 
 { 
 @ @ - 232 , 7 + 240 , 7 @ @ 
 this . func _ 184611 _ a ( p _ 190775 _ 2 _ , ItemStack . field _ 190927 _ a ) ; 
 } 
 
 - @ @ - 1161 , 6 + 1232 , 7 @ @ 
 + @ @ - 1161 , 6 + 1233 , 7 @ @ 
 
 public void func _ 71059 _ n ( Entity p _ 71059 _ 1 _ ) 
 { 
 @ @ - 240 , 7 + 248 , 7 @ @ 
 if ( p _ 71059 _ 1 _ . func _ 70075 _ an ( ) ) 
 { 
 if ( ! p _ 71059 _ 1 _ . func _ 85031 _ j ( this ) ) 
 - @ @ - 1331 , 11 + 1403 , 13 @ @ 
 + @ @ - 1331 , 11 + 1404 , 13 @ @ 
 
 if ( ! itemstack1 . func _ 190926 _ b ( ) & & entity instanceof EntityLivingBase ) 
 { 
 @ @ - 254 , 7 + 262 , 7 @ @ 
 } 
 } 
 
 - @ @ - 1441 , 6 + 1515 , 8 @ @ 
 + @ @ - 1441 , 6 + 1516 , 8 @ @ 
 
 public EntityPlayer . SleepResult func _ 180469 _ a ( BlockPos p _ 180469 _ 1 _ ) 
 { 
 @ @ - 263 , 7 + 271 , 7 @ @ 
 EnumFacing enumfacing = ( EnumFacing ) this . field _ 70170 _ p . func _ 180495 _ p ( p _ 180469 _ 1 _ ) . func _ 177229 _ b ( BlockHorizontal . field _ 185512 _ D ) ; 
 
 if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) 
 - @ @ - 1482 , 8 + 1558 , 9 @ @ 
 + @ @ - 1482 , 8 + 1559 , 9 @ @ 
 
 this . func _ 70105 _ a ( 0 . 2F , 0 . 2F ) ; 
 
 @ @ - 275 , 7 + 283 , 7 @ @ 
 float f1 = 0 . 5F + ( float ) enumfacing . func _ 82601 _ c ( ) * 0 . 4F ; 
 float f = 0 . 5F + ( float ) enumfacing . func _ 82599 _ e ( ) * 0 . 4F ; 
 this . func _ 175139 _ a ( enumfacing ) ; 
 - @ @ - 1530 , 13 + 1607 , 14 @ @ 
 + @ @ - 1530 , 13 + 1608 , 14 @ @ 
 
 public void func _ 70999 _ a ( boolean p _ 70999 _ 1 _ , boolean p _ 70999 _ 2 _ , boolean p _ 70999 _ 3 _ ) 
 { 
 @ @ - 293 , 7 + 301 , 7 @ @ 
 
 if ( blockpos = = null ) 
 { 
 - @ @ - 1545 , 6 + 1623 , 10 @ @ 
 + @ @ - 1545 , 6 + 1624 , 10 @ @ 
 
 this . func _ 70107 _ b ( ( double ) ( ( float ) blockpos . func _ 177958 _ n ( ) + 0 . 5F ) , ( double ) ( ( float ) blockpos . func _ 177956 _ o ( ) + 0 . 1F ) , ( double ) ( ( float ) blockpos . func _ 177952 _ p ( ) + 0 . 5F ) ) ; 
 } 
 @ @ - 304 , 7 + 312 , 7 @ @ 
 
 this . field _ 71083 _ bS = false ; 
 
 - @ @ - 1563 , 15 + 1645 , 16 @ @ 
 + @ @ - 1563 , 15 + 1646 , 16 @ @ 
 
 private boolean func _ 175143 _ p ( ) 
 { 
 @ @ - 324 , 7 + 332 , 7 @ @ 
 { 
 if ( ! p _ 180467 _ 2 _ ) 
 { 
 - @ @ - 1586 , 16 + 1669 , 17 @ @ 
 + @ @ - 1586 , 16 + 1670 , 17 @ @ 
 } 
 else 
 { 
 @ @ - 345 , 7 + 353 , 7 @ @ 
 
 switch ( enumfacing ) 
 { 
 - @ @ - 1635 , 16 + 1719 , 24 @ @ 
 + @ @ - 1635 , 16 + 1720 , 24 @ @ 
 
 public BlockPos func _ 180470 _ cg ( ) 
 { 
 @ @ - 372 , 7 + 380 , 7 @ @ 
 if ( p _ 180473 _ 1 _ ! = null ) 
 { 
 this . field _ 71077 _ c = p _ 180473 _ 1 _ ; 
 - @ @ - 1839 , 6 + 1931 , 10 @ @ 
 + @ @ - 1839 , 6 + 1932 , 10 @ @ 
 
 super . func _ 180430 _ e ( p _ 180430 _ 1 _ , p _ 180430 _ 2 _ ) ; 
 } 
 @ @ - 383 , 7 + 391 , 7 @ @ 
 } 
 
 protected void func _ 71061 _ d _ ( ) 
 - @ @ - 2039 , 6 + 2135 , 18 @ @ 
 + @ @ - 2039 , 6 + 2136 , 18 @ @ 
 this . field _ 175152 _ f = p _ 71049 _ 1 _ . field _ 175152 _ f ; 
 this . field _ 71078 _ a = p _ 71049 _ 1 _ . field _ 71078 _ a ; 
 this . func _ 184212 _ Q ( ) . func _ 187227 _ b ( field _ 184827 _ bp , p _ 71049 _ 1 _ . func _ 184212 _ Q ( ) . func _ 187225 _ a ( field _ 184827 _ bp ) ) ; 
 @ @ - 402 , 7 + 410 , 7 @ @ 
 } 
 
 protected boolean func _ 70041 _ e _ ( ) 
 - @ @ - 2137 , 7 + 2245 , 10 @ @ 
 + @ @ - 2137 , 7 + 2246 , 10 @ @ 
 
 public ITextComponent func _ 145748 _ c _ ( ) 
 { 
 @ @ - 414 , 7 + 422 , 7 @ @ 
 itextcomponent . func _ 150256 _ b ( ) . func _ 150241 _ a ( new ClickEvent ( ClickEvent . Action . SUGGEST _ COMMAND , " / msg " + this . func _ 70005 _ c _ ( ) + " " ) ) ; 
 itextcomponent . func _ 150256 _ b ( ) . func _ 150209 _ a ( this . func _ 174823 _ aP ( ) ) ; 
 itextcomponent . func _ 150256 _ b ( ) . func _ 179989 _ a ( this . func _ 70005 _ c _ ( ) ) ; 
 - @ @ - 2146 , 7 + 2257 , 7 @ @ 
 + @ @ - 2146 , 7 + 2258 , 7 @ @ 
 
 public float func _ 70047 _ e ( ) 
 { 
 @ @ - 423 , 7 + 431 , 7 @ @ 
 
 if ( this . func _ 70608 _ bn ( ) ) 
 { 
 - @ @ - 2362 , 6 + 2473 , 162 @ @ 
 + @ @ - 2362 , 6 + 2474 , 162 @ @ 
 return this . field _ 71075 _ bZ . field _ 75098 _ d & & this . func _ 70003 _ b ( 2 , " " ) ; 
 } 
 
 diff - - git a / patches / minecraft / net / minecraft / util / datafix / DataFixesManager . java . patch b / patches / minecraft / net / minecraft / util / datafix / DataFixesManager . java . patch 
 new file mode 100644 
 index 0000000 . . ad8f719 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / util / datafix / DataFixesManager . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / util / datafix / DataFixesManager . java 
 + + + + . . / src - work / minecraft / net / minecraft / util / datafix / DataFixesManager . java 
 + @ @ - 158 , 6 + 158 , 7 @ @ 
 + public static DataFixer func _ 188279 _ a ( ) 
 + { 
 + DataFixer datafixer = new DataFixer ( 819 ) ; 
 + + datafixer = new net . minecraftforge . common . util . CompoundDataFixer ( datafixer ) ; 
 + WorldInfo . func _ 189967 _ a ( datafixer ) ; 
 + EntityPlayer . func _ 189806 _ a ( datafixer ) ; 
 + AnvilChunkLoader . func _ 189889 _ a ( datafixer ) ; 
 diff - - git a / patches / minecraft / net / minecraft / world / chunk / storage / AnvilChunkLoader . java . patch b / patches / minecraft / net / minecraft / world / chunk / storage / AnvilChunkLoader . java . patch 
 index 5ac3cdd . . 22b5152 100644 
 - - - a / patches / minecraft / net / minecraft / world / chunk / storage / AnvilChunkLoader . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / chunk / storage / AnvilChunkLoader . java . patch 
 @ @ - 97 , 15 + 97 , 17 @ @ 
 } 
 } 
 } 
 - @ @ - 122 , 6 + 181 , 7 @ @ 
 + @ @ - 121 , 7 + 180 , 9 @ @ 
 + NBTTagCompound nbttagcompound1 = new NBTTagCompound ( ) ; 
 nbttagcompound . func _ 74782 _ a ( " Level " , nbttagcompound1 ) ; 
 nbttagcompound . func _ 74768 _ a ( " DataVersion " , 819 ) ; 
 + + net . minecraftforge . fml . common . FMLCommonHandler . instance ( ) . getDataFixer ( ) . writeVersionData ( nbttagcompound ) ; 
 this . func _ 75820 _ a ( p _ 75816 _ 2 _ , p _ 75816 _ 1 _ , nbttagcompound1 ) ; 
 + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . event . world . ChunkDataEvent . Save ( p _ 75816 _ 2 _ , nbttagcompound ) ) ; 
 this . func _ 75824 _ a ( p _ 75816 _ 2 _ . func _ 76632 _ l ( ) , nbttagcompound ) ; 
 } 
 catch ( Exception exception ) 
 - @ @ - 307 , 8 + 367 , 17 @ @ 
 + @ @ - 307 , 8 + 368 , 17 @ @ 
 
 if ( entity . func _ 70039 _ c ( nbttagcompound2 ) ) 
 { 
 @ @ - 123 , 7 + 125 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 318 , 8 + 387 , 17 @ @ 
 + @ @ - 318 , 8 + 388 , 17 @ @ 
 
 for ( TileEntity tileentity : p _ 75820 _ 1 _ . func _ 177434 _ r ( ) . values ( ) ) 
 { 
 @ @ - 141 , 7 + 143 , 7 @ @ 
 } 
 
 p _ 75820 _ 3 _ . func _ 74782 _ a ( " TileEntities " , nbttaglist2 ) ; 
 - @ @ - 388 , 6 + 466 , 12 @ @ 
 + @ @ - 388 , 6 + 467 , 12 @ @ 
 chunk . func _ 76616 _ a ( p _ 75823 _ 2 _ . func _ 74770 _ j ( " Biomes " ) ) ; 
 } 
 
 @ @ - 154 , 7 + 156 , 7 @ @ 
 NBTTagList nbttaglist1 = p _ 75823 _ 2 _ . func _ 150295 _ c ( " Entities " , 10 ) ; 
 
 for ( int j1 = 0 ; j1 < nbttaglist1 . func _ 74745 _ c ( ) ; + + j1 ) 
 - @ @ - 431 , 8 + 515 , 6 @ @ 
 + @ @ - 431 , 8 + 516 , 6 @ @ 
 p _ 75823 _ 1 _ . func _ 180497 _ b ( new BlockPos ( nbttagcompound3 . func _ 74762 _ e ( " x " ) , nbttagcompound3 . func _ 74762 _ e ( " y " ) , nbttagcompound3 . func _ 74762 _ e ( " z " ) ) , block , nbttagcompound3 . func _ 74762 _ e ( " t " ) , nbttagcompound3 . func _ 74762 _ e ( " p " ) ) ; 
 } 
 } 
 diff - - git a / patches / minecraft / net / minecraft / world / gen / structure / template / Template . java . patch b / patches / minecraft / net / minecraft / world / gen / structure / template / Template . java . patch 
 new file mode 100644 
 index 0000000 . . 4e7e0db 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / world / gen / structure / template / Template . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / world / gen / structure / template / Template . java 
 + + + + . . / src - work / minecraft / net / minecraft / world / gen / structure / template / Template . java 
 + @ @ - 520 , 6 + 520 , 7 @ @ 
 + p _ 189552 _ 1 _ . func _ 74782 _ a ( " size " , this . func _ 186267 _ a ( new int [ ] { this . field _ 186272 _ c . func _ 177958 _ n ( ) , this . field _ 186272 _ c . func _ 177956 _ o ( ) , this . field _ 186272 _ c . func _ 177952 _ p ( ) } ) ) ; 
 + p _ 189552 _ 1 _ . func _ 74778 _ a ( " author " , this . field _ 186273 _ d ) ; 
 + p _ 189552 _ 1 _ . func _ 74768 _ a ( " DataVersion " , 819 ) ; 
 + + net . minecraftforge . fml . common . FMLCommonHandler . instance ( ) . getDataFixer ( ) . writeVersionData ( p _ 189552 _ 1 _ ) ; 
 + return p _ 189552 _ 1 _ ; 
 + } 
 + 
 diff - - git a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch 
 index d3dbb53 . . e4a0e53 100644 
 - - - a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch 
 @ @ - 8 , 7 + 8 , 15 @ @ 
 
 protected WorldInfo ( ) 
 { 
 - @ @ - 807 , 6 + 808 , 26 @ @ 
 + @ @ - 335 , 6 + 336 , 7 @ @ 
 + nbttagcompound . func _ 74757 _ a ( " Snapshot " , false ) ; 
 + p _ 76064 _ 1 _ . func _ 74782 _ a ( " Version " , nbttagcompound ) ; 
 + p _ 76064 _ 1 _ . func _ 74768 _ a ( " DataVersion " , 819 ) ; 
 + + net . minecraftforge . fml . common . FMLCommonHandler . instance ( ) . getDataFixer ( ) . writeVersionData ( p _ 76064 _ 1 _ ) ; 
 + p _ 76064 _ 1 _ . func _ 74772 _ a ( " RandomSeed " , this . field _ 76100 _ a ) ; 
 + p _ 76064 _ 1 _ . func _ 74778 _ a ( " generatorName " , this . field _ 76098 _ b . func _ 77127 _ a ( ) ) ; 
 + p _ 76064 _ 1 _ . func _ 74768 _ a ( " generatorVersion " , this . field _ 76098 _ b . func _ 77131 _ c ( ) ) ; 
 + @ @ - 807 , 6 + 809 , 26 @ @ 
 } ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / util / CompoundDataFixer . java b / src / main / java / net / minecraftforge / common / util / CompoundDataFixer . java 
 new file mode 100644 
 index 0000000 . . da32e17 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / util / CompoundDataFixer . java 
 @ @ - 0 , 0 + 1 , 190 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . common . util ; 
 + 
 + import java . util . List ; 
 + import java . util . Locale ; 
 + import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + 
 + import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Maps ; 
 + 
 + import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . util . datafix . DataFixer ; 
 + import net . minecraft . util . datafix . FixTypes ; 
 + import net . minecraft . util . datafix . IDataWalker ; 
 + import net . minecraft . util . datafix . IFixType ; 
 + import net . minecraft . util . datafix . IFixableData ; 
 + 
 + public class CompoundDataFixer extends DataFixer 
 + { 
 + private final ModFixs vanilla ; 
 + private final Map < String , ModFixs > modFixers = Maps . newHashMap ( ) ; 
 + private final Map < IFixType , List < IDataWalker > > walkers = Maps . newHashMap ( ) ; 
 + 
 + public CompoundDataFixer ( DataFixer vanilla ) 
 + { 
 + super ( 0 ) ; 
 + this . vanilla = init ( " minecraft " , vanilla . version ) ; 
 + } 
 + 
 + @ Override 
 + public NBTTagCompound process ( IFixType type , NBTTagCompound nbt ) 
 + { 
 + final Map < String , Integer > versions = getVersions ( nbt ) ; 
 + final int mcversion = versions . get ( " minecraft " ) = = null ? - 1 : versions . get ( " minecraft " ) ; 
 + final IDataFixerData holder = new IDataFixerData ( ) 
 + { 
 + @ Override 
 + public NBTTagCompound process ( IFixType type , NBTTagCompound nbt , int version ) 
 + { 
 + for ( Entry < String , ModFixs > e : modFixers . entrySet ( ) ) 
 + { 
 + / / This is a potential performance hot spot . As it walks all the data for all 
 + / / of the fixers . . . But with the vanilla api there isn ' t a way to pass down 
 + / / the mod specific version numbers , so redundant . . but not hacky . . . 
 + / / Actually , this wont work as the data walkers take versions into account . . . 
 + ModFixs fixer = e . getValue ( ) ; 
 + int ver = getVersion ( e . getKey ( ) ) ; 
 + if ( ver < fixer . version ) 
 + { 
 + for ( IFixableData fix : fixer . getFixes ( type ) ) 
 + { 
 + if ( fix . getFixVersion ( ) > ver ) 
 + nbt = fix . fixTagCompound ( nbt ) ; 
 + } 
 + 
 + for ( IDataWalker walker : getWalkers ( type ) ) 
 + nbt = walker . process ( this , nbt , version ) ; / / We pass in the holder , in case a walker wants to know a mod version 
 + } 
 + } 
 + return nbt ; 
 + } 
 + 
 + @ Override 
 + public int getVersion ( String mod ) 
 + { 
 + Integer ret = versions . get ( mod ) ; 
 + return ret = = null ? - 1 : ret ; 
 + } 
 + } ; 
 + return holder . process ( type , nbt , mcversion ) ; 
 + } 
 + 
 + @ Override 
 + @ Deprecated / / MODDERS DO NOT CALL DIRECTLY ! Only use from DataWalker ! 
 + public NBTTagCompound process ( IFixType type , NBTTagCompound nbt , int mcversion ) 
 + { 
 + if ( type ! = FixTypes . OPTIONS ) / / Options are vanilla only 
 + throw new IllegalStateException ( " Do not call recursive process directly on DataFixer ! " ) ; 
 + 
 + for ( IFixableData fix : vanilla . getFixes ( type ) ) 
 + { 
 + if ( fix . getFixVersion ( ) > mcversion ) 
 + nbt = fix . fixTagCompound ( nbt ) ; 
 + } 
 + / / Options is a hack , and doesn ' t have any nested components 
 + / / for ( IDataWalker walker : getWalkers ( type ) ) 
 + / / nbt = walker . process ( this , nbt , version ) ; 
 + return nbt ; 
 + } 
 + 
 + private List < IDataWalker > getWalkers ( IFixType type ) 
 + { 
 + List < IDataWalker > ret = walkers . get ( type ) ; 
 + if ( ret = = null ) 
 + { 
 + ret = Lists . newArrayList ( ) ; 
 + walkers . put ( type , ret ) ; 
 + } 
 + return ret ; 
 + } 
 + 
 + @ Override 
 + @ Deprecated / / Modders do not use this , this will register you as vanilla . Use the ModID version below . 
 + public void registerFix ( IFixType type , IFixableData fixable ) 
 + { 
 + vanilla . registerFix ( type , fixable ) ; 
 + } 
 + 
 + 
 + @ Override 
 + @ Deprecated / / Modders do not use this , use add below , To better allow custom fix types . 
 + public void registerWalker ( FixTypes type , IDataWalker walker ) 
 + { 
 + registerWalkerAdd ( type , walker ) ; 
 + } 
 + 
 + @ Override 
 + public void registerWalkerAdd ( IFixType type , IDataWalker walker ) 
 + { 
 + getWalkers ( type ) . add ( walker ) ; 
 + } 
 + 
 + private void validateModId ( String mod ) 
 + { 
 + / / String current = Loader . instance ( ) . activeModContainer ( ) = = null ? " minecraft " : Loader . instance ( ) . activeModContainer ( ) . getModId ( ) ; 
 + / / Test active modid ? 
 + if ( ! mod . equals ( mod . toLowerCase ( Locale . ENGLISH ) ) ) 
 + throw new IllegalArgumentException ( " Mod ID is not lower case : " + mod ) ; 
 + if ( mod . length ( ) > 64 ) 
 + throw new IllegalArgumentException ( " Mod ID is to long : " + mod ) ; 
 + } 
 + 
 + / * * 
 + * Initialize your mod specific data fixer . 
 + * 
 + * @ param modid You mod id , must be lower case . 
 + * @ param version The current data version of your mod 
 + * / 
 + public ModFixs init ( String modid , int version ) 
 + { 
 + validateModId ( modid ) ; 
 + if ( modFixers . containsKey ( modid ) ) 
 + throw new IllegalStateException ( " Attempted to initalize DataFixer for " + modid + " twice " ) ; 
 + ModFixs ret = new ModFixs ( modid , version ) ; 
 + modFixers . put ( modid , ret ) ; 
 + return ret ; 
 + } 
 + 
 + private Map < String , Integer > getVersions ( NBTTagCompound nbt ) 
 + { 
 + Map < String , Integer > ret = Maps . newHashMap ( ) ; 
 + ret . put ( " minecraft " , nbt . hasKey ( " DataVersion " , 99 ) ? nbt . getInteger ( " DataVersion " ) : - 1 ) ; 
 + if ( nbt . hasKey ( " ForgeDataVersion " , 10 ) ) 
 + { 
 + NBTTagCompound sub = nbt . getCompoundTag ( " ForgeDataVersion " ) ; 
 + for ( String key : sub . getKeySet ( ) ) 
 + { 
 + ret . put ( key , sub . hasKey ( key , 99 ) ? sub . getInteger ( key ) : - 1 ) ; 
 + } 
 + } 
 + return ret ; 
 + } 
 + 
 + public void writeVersionData ( NBTTagCompound nbt ) 
 + { 
 + / / nbt . setInteger ( " DataVersion " , vanilla . version ) ; 
 + NBTTagCompound sub = new NBTTagCompound ( ) ; 
 + nbt . setTag ( " ForgeDataVersion " , sub ) ; 
 + for ( ModFixs mod : modFixers . values ( ) ) 
 + sub . setInteger ( mod . mod , mod . version ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / util / IDataFixerData . java b / src / main / java / net / minecraftforge / common / util / IDataFixerData . java 
 new file mode 100644 
 index 0000000 . . da6b05c 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / util / IDataFixerData . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . common . util ; 
 + 
 + import net . minecraft . util . datafix . IDataFixer ; 
 + 
 + public interface IDataFixerData extends IDataFixer 
 + { 
 + public int getVersion ( String mod ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / util / ModFixs . java b / src / main / java / net / minecraftforge / common / util / ModFixs . java 
 new file mode 100644 
 index 0000000 . . 2dc01f2 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / util / ModFixs . java 
 @ @ - 0 , 0 + 1 , 83 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . common . util ; 
 + 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Maps ; 
 + 
 + import net . minecraft . util . datafix . IFixType ; 
 + import net . minecraft . util . datafix . IFixableData ; 
 + 
 + public class ModFixs 
 + { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 + final String mod ; 
 + final int version ; 
 + private final Map < IFixType , List < IFixableData > > fixes = Maps . newHashMap ( ) ; 
 + 
 + ModFixs ( String mod , int version ) 
 + { 
 + this . mod = mod ; 
 + this . version = version ; 
 + } 
 + 
 + public List < IFixableData > getFixes ( IFixType type ) 
 + { 
 + List < IFixableData > ret = this . fixes . get ( type ) ; 
 + if ( ret = = null ) 
 + { 
 + ret = Lists . newArrayList ( ) ; 
 + this . fixes . put ( type , ret ) ; 
 + } 
 + return ret ; 
 + } 
 + 
 + public void registerFix ( IFixType type , IFixableData fixer ) 
 + { 
 + List < IFixableData > list = getFixes ( type ) ; 
 + int ver = fixer . getFixVersion ( ) ; 
 + 
 + if ( ver > this . version ) 
 + { 
 + LOGGER . warn ( " [ { } ] Ignored fix registered for version : { } as the DataVersion of the game is : { } " , mod , ver , this . version ) ; 
 + return ; 
 + } 
 + 
 + if ( ! list . isEmpty ( ) & & list . get ( list . size ( ) - 1 ) . getFixVersion ( ) > ver ) 
 + { 
 + for ( int x = 0 ; x < list . size ( ) ; + + x ) 
 + { 
 + if ( list . get ( x ) . getFixVersion ( ) > ver ) 
 + { 
 + list . add ( x , fixer ) ; 
 + break ; 
 + } 
 + } 
 + } 
 + else 
 + list . add ( fixer ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index c796af8 . . a78247c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 82 , 6 + 82 , 7 @ @ import net . minecraft . world . storage . SaveFormatOld ; 
 import net . minecraftforge . client . event . ModelRegistryEvent ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . common . util . CompoundDataFixer ; 
 import net . minecraftforge . fml . client . registry . RenderingRegistry ; 
 import net . minecraftforge . fml . common . DummyModContainer ; 
 import net . minecraftforge . fml . common . DuplicateModsFoundException ; 
 @ @ - 1060 , 4 + 1061 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 MinecraftForge . EVENT _ BUS . post ( new ModelRegistryEvent ( ) ) ; 
 } 
 + 
 + @ Override 
 + public CompoundDataFixer getDataFixer ( ) 
 + { 
 + return ( CompoundDataFixer ) this . client . getDataFixer ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index d4863c7 . . 1411eda 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 57 , 6 + 57 , 7 @ @ import net . minecraft . world . storage . WorldInfo ; 
 import net . minecraftforge . client . model . animation . Animation ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . common . util . CompoundDataFixer ; 
 import net . minecraftforge . fml . common . eventhandler . EventBus ; 
 import net . minecraftforge . fml . common . gameevent . InputEvent ; 
 import net . minecraftforge . fml . common . gameevent . PlayerEvent ; 
 @ @ - 751 , 4 + 752 , 9 @ @ public class FMLCommonHandler 
 { 
 sidedDelegate . fireSidedRegistryEvents ( ) ; 
 } 
 + 
 + public CompoundDataFixer getDataFixer ( ) 
 + { 
 + return ( CompoundDataFixer ) sidedDelegate . getDataFixer ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 index aea07ff . . 4cff064 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import net . minecraft . network . INetHandler ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . server . MinecraftServer ; 
 import net . minecraft . util . IThreadListener ; 
 + import net . minecraftforge . common . util . CompoundDataFixer ; 
 import net . minecraftforge . fml . common . eventhandler . EventBus ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 @ @ - 77 , 4 + 78 , 6 @ @ public interface IFMLSidedHandler 
 void reloadRenderers ( ) ; 
 
 void fireSidedRegistryEvents ( ) ; 
 + 
 + CompoundDataFixer getDataFixer ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index 54c25b1 . . fa4f6a5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import net . minecraft . server . dedicated . PendingCommand ; 
 import net . minecraft . util . IThreadListener ; 
 import net . minecraft . util . text . translation . LanguageMap ; 
 import net . minecraft . world . storage . SaveFormatOld ; 
 + import net . minecraftforge . common . util . CompoundDataFixer ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . IFMLSidedHandler ; 
 @ @ - 339 , 4 + 340 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 / / NOOP 
 } 
 + @ Override 
 + public CompoundDataFixer getDataFixer ( ) 
 + { 
 + return ( CompoundDataFixer ) this . server . getDataFixer ( ) ; 
 + } 
 } 
 diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg 
 index 14df9d2 . . 586b68e 100644 
 - - - a / src / main / resources / forge _ at . cfg 
 + + + b / src / main / resources / forge _ at . cfg 
 @ @ - 287 , 4 + 287 , 7 @ @ public net . minecraft . potion . PotionHelper func _ 185204 _ a ( Lnet / minecraft / potion / Pot 
 
 # TileEntityHopper 
 public net . minecraft . tileentity . TileEntityHopper func _ 174914 _ o ( ) Z # mayTransfer 
 - public net . minecraft . tileentity . TileEntityHopper func _ 145896 _ c ( I ) V # setTransferCooldown 
 \ No newline at end of file 
 + public net . minecraft . tileentity . TileEntityHopper func _ 145896 _ c ( I ) V # setTransferCooldown 
 + 
 + # DataFixer 
 + public net . minecraft . util . datafix . DataFixer field _ 188262 _ d # version 
 \ No newline at end of file
