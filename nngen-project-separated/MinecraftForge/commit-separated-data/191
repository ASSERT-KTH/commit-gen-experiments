BLEU SCORE: 0.020998444584734318

TEST MSG: Add documentation explaining changes .
GENERATED MSG: Add in detection for MLMP and try to fail with a graceful message .

TEST DIFF (one line): diff - - git a / NewFML . md b / NewFML . md <nl> new file mode 100644 <nl> index 0000000 . . b126434 <nl> - - - / dev / null <nl> + + + b / NewFML . md <nl> @ @ - 0 , 0 + 1 , 127 @ @ <nl> + # FML <nl> + <nl> + Entrypoint : ` ` ` FMLServiceProvider . onLoad ` ` ` <nl> + <nl> + - Verify environment <nl> + - - Check all libraries are present : ` ` ` accesstransformer ` ` ` , ` ` ` coremod ` ` ` , ` ` ` deobfuscator ` ` ` <nl> + - - Check versions are suitable : ` ` ` modlauncher ` ` ` , ` ` ` accesstransformer ` ` ` , ` ` ` coremod ` ` ` , ` ` ` deobfuscator ` ` ` <nl> + - Find deobfuscated and patched MC <nl> + - - If not found , trigger job to generate that ( loaded later at FMLLaunchProvider . launch ) <nl> + <nl> + Injected arguments : <nl> + <nl> + - ` ` ` mods ` ` ` : CSV list of mod files to load <nl> + - ` ` ` modlist ` ` ` : JSON formatted list of mod files in a maven - like repository format <nl> + <nl> + Entrypoint : ` ` ` FMLServiceProvider . initializer ` ` ` <nl> + - Setup paths <nl> + - - ` ` ` mods ` ` ` folder <nl> + - - ` ` ` config ` ` ` folder <nl> + - FML config file read ( JSON ? ) <nl> + - Trigger initial loading <nl> + <nl> + Entrypoint : ` ` ` FMLLaunchProvider . launch ` ` ` <nl> + - Launches the patched and deobfuscated game <nl> + - - If that wasn ' t found it ' ll be generated from the vanilla jar and patch / deobf files ( see above ) <nl> + - Possible we ' ll use an alternative launch for the development environment <nl> + <nl> + ( A goal is that we pre - generate this JAR during forge installation or modpack installation ) <nl> + <nl> + # # Loading <nl> + <nl> + - First we discover all mods <nl> + - - IModLocator instances present in system are found and queried to compile a master list of all mod artifacts of the three types <nl> + - LANGPROVIDERs are added to the supported language system : IModLanguageProvider <nl> + - The MODS from the list have their META - INF / mods . json file queried for mod instances to load <nl> + - - MODS are cross - referenced for their language being available <nl> + - - MODS are cross - referenced for their libraries being available <nl> + - - MODS are cross - referenced for their MOD dependencies being available <nl> + - - MODS with META - INF / coremods . json specification are loaded into the COREMOD system <nl> + - - MODS with META - INF / accesstransformer . json are loaded into the ACCESSTRANSFORMER system <nl> + - - MODS are enqueued to the background loading system <nl> + - FMLLaunchProvider will be triggered from the ModLauncher to start the game <nl> + <nl> + # # Game loading <nl> + <nl> + - Events triggered from loadGame will launch various phases of modloading as before <nl> + - - Deprecation of old " FML " events in favour of Forge events <nl> + - - If a mod hasn ' t completed scanning there might be a pause waiting for it to complete before loading ( testing indicates this should be a very rare occurrence and isn ' t worse than existing status quo where all scanning and loading is on - thread ) <nl> + <nl> + # # # ` ` ` IModLocator ` ` ` <nl> + <nl> + Finds mods from various sources of various types <nl> + manifest is queried for type : FMLModType <nl> + <nl> + - MOD : this file will be scanned as a mod . This is default if nothing is present <nl> + - LIBRARY : this file will be added to the classpath and no further processing is done <nl> + - LANGPROVIDER : this file will be loaded as a language provider <nl> + <nl> + # # # # ` ` ` ModsFolderLocator ` ` ` <nl> + <nl> + - scans for jar files from mods folder <nl> + - - able to load all types <nl> + - - loads in all environments <nl> + - - maybe able to do runtime name transformation for dev time ? <nl> + <nl> + Standard mechanism to find and load mods <nl> + <nl> + # # # # ` ` ` ExplodedDirectoryLocator ` ` ` <nl> + <nl> + - loads a directory as a mod <nl> + - - only able to load mods <nl> + - - should only load in dev env <nl> + <nl> + Intended as a mechanism to allow development of mods easily by pointing at a compiled output directory <nl> + <nl> + # # # # ` ` ` ArgumentModsLocator ` ` ` : NYI <nl> + <nl> + - loads mods from the arguments on the command line <nl> + - - able to load all types <nl> + - - loads in all environments <nl> + <nl> + # # # ` ` ` IModLanguageProvider ` ` ` <nl> + <nl> + Provides mod and language provider services <nl> + <nl> + - Provides a means to transform a Mod File ( from the IModLocator ) into a list of modcontainer objects based on mods . json <nl> + - Scanning work will be done in background threads <nl> + - Language providers can be provided as JARs via the modlocator for ease of distribution <nl> + <nl> + # # # # ` ` ` FMLModLanguageProvider ` ` ` <nl> + <nl> + This is the standard Java @ Mod implementation provider <nl> + <nl> + - provided by default ( always supported ) <nl> + - All scanning for @ Mod will be done in the background thread <nl> + <nl> + # # # # ` ` ` ScalaModLanguageProvider ` ` ` <nl> + <nl> + This is the scala language provider . It ' ll be provided separately as a JAR mod download . <nl> + <nl> + - API contract will need definition <nl> + <nl> + Other languages ? Kotlin ? Alternative Scala versions ? Javascript ? <nl> + <nl> + # # Coremods <nl> + <nl> + Coremods are now forcefully separated into _ injection _ and _ runtime _ phases . <nl> + <nl> + # # # Injection <nl> + <nl> + Injection is the act of intercepting the loading of a class and modifying the inbound class with alterations such as additions , replacements and deletions <nl> + <nl> + Injections will be written using Javascript . Two functions are required : a function providing the list of injection sites , and the function to transform the injection site . <nl> + <nl> + All injection sites will need to be pre - specified by the coremod in their metadata . Lookup services should be provided in the Javascript API . <nl> + <nl> + Javascript API for common coremod injection tasks needs to be developed , to allow common best - practice tooling for these complex tasks . <nl> + <nl> + Runtime coremod code ( code that has been injected ) is Java as usual . <nl> + <nl> + # # Background loading thread <nl> + <nl> + Early in loading , a background thread is triggered which will perform scanning tasks for common resources , such as @ Mod instances and other annotations . This thread will also be responsible for loading any cached resources , either those defined at build time or pre - computed from previous runs . It may also be tasked with writing those precomputed resources . <nl> + <nl> + There will be a IPreLoaderJobProvider that will allow extension of the scope of these tasks <nl> + <nl> +
NEAREST DIFF (one line): diff - - git a / fml / server / cpw / mods / fml / server / FMLServerHandler . java b / fml / server / cpw / mods / fml / server / FMLServerHandler . java <nl> index 0aa90e7 . . 50a81f0 100644 <nl> - - - a / fml / server / cpw / mods / fml / server / FMLServerHandler . java <nl> + + + b / fml / server / cpw / mods / fml / server / FMLServerHandler . java <nl> @ @ - 44 , 18 + 44 , 21 @ @ import cpw . mods . fml . common . ModContainer ; <nl> / * * <nl> * Handles primary communication from hooked code into the system <nl> * <nl> - * The FML entry point is { @ link # onPreLoad ( MinecraftServer ) } called from { @ link MinecraftServer } <nl> + * The FML entry point is { @ link # onPreLoad ( MinecraftServer ) } called from <nl> + * { @ link MinecraftServer } <nl> * <nl> - * Obfuscated code should focus on this class and other members of the " server " ( or " client " ) code <nl> + * Obfuscated code should focus on this class and other members of the " server " <nl> + * ( or " client " ) code <nl> * <nl> * The actual mod loading is handled at arms length by { @ link Loader } <nl> * <nl> - * It is expected that a similar class will exist for each target environment : Bukkit and Client side . <nl> + * It is expected that a similar class will exist for each target environment : <nl> + * Bukkit and Client side . <nl> * <nl> * It should not be directly modified . <nl> * <nl> * @ author cpw <nl> - * <nl> + * <nl> * / <nl> public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> @ @ - 75 , 11 + 78 , 41 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> private BiomeGenBase [ ] defaultOverworldBiomes ; <nl> <nl> / * * <nl> - * Called to start the whole game off from { @ link MinecraftServer # startServer } <nl> + * Called to start the whole game off from <nl> + * { @ link MinecraftServer # startServer } <nl> + * <nl> * @ param minecraftServer <nl> * / <nl> public void onPreLoad ( MinecraftServer minecraftServer ) <nl> { <nl> + try <nl> + { <nl> + Class . forName ( " BaseModMp " , false , getClass ( ) . getClassLoader ( ) ) ; <nl> + MinecraftServer . field _ 6038 _ a . severe ( " " <nl> + + " Forge Mod Loader has detected that this server has an ModLoaderMP installed alongside Forge Mod Loader . \ n " <nl> + + " This will cause a serious problem with compatibility . To protect your worlds , this minecraft server will now shutdown . \ n " <nl> + + " You should follow the installation instructions of either Minecraft Forge of Forge Mod Loader and NOT install ModLoaderMP " <nl> + + " into the minecraft _ server . jar file " <nl> + + " before this server will be allowed to start up . Failure to do so will simply result in more startup failures . \ n " <nl> + + " The authors of Minecraft Forge and Forge Mod Loader strongly suggest you talk to your mod ' s authors and get them to update their " <nl> + + " requirements . ModLoaderMP is not compatible with Minecraft Forge on the server and they will need to update their mod " <nl> + + " for Minecraft Forge and other server compatibility , unless they are Minecraft Forge mods , in which case they already " <nl> + + " don ' t need ModLoaderMP and the mod author simply has failed to update his requirements and should be informed appropriately . \ n " <nl> + + " The authors of Forge Mod Loader would like to be compatible with ModLoaderMP but it is closed source and owned by SDK . " <nl> + + " SDK , the author of ModLoaderMP , has a standing invitation to submit compatibility patches " <nl> + + " to the open source community project that is Forge Mod Loader so that this incompatibility doesn ' t last . " <nl> + + " Users who wish to enjoy mods of both types are " <nl> + + " encouraged to request of SDK that he submit a compatibility patch to the Forge Mod Loader project at " <nl> + + " http : / / github . com / cpw / FML . Posting on the minecraft forums at http : / / www . minecraftforum . net / topic / 86765 - ( the MLMP thread ) " <nl> + + " may encourage him in this effort . However , I ask that your requests be polite . " <nl> + + " Now , the server has to shutdown so you can reinstall your minecraft _ server . jar properly , until such time as we can work together . " ) ; <nl> + throw new RuntimeException ( <nl> + " This FML based server has detected an installation of ModLoaderMP alongside . This will cause serious compatibility issues , so the server will now shut down . " ) ; <nl> + } <nl> + catch ( ClassNotFoundException e ) <nl> + { <nl> + / / We ' re safe . continue <nl> + } <nl> server = minecraftServer ; <nl> FMLCommonHandler . instance ( ) . registerSidedDelegate ( this ) ; <nl> CommonRegistry . registerRegistry ( new ServerRegistry ( ) ) ; <nl> @ @ - 112 , 6 + 145 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> <nl> / * * <nl> * Get the server instance <nl> + * <nl> * @ return <nl> * / <nl> public MinecraftServer getServer ( ) <nl> @ @ - 130 , 8 + 164 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> / * * <nl> * Called from ChunkProviderServer when a chunk needs to be populated <nl> * <nl> - * To avoid polluting the worldgen seed , we generate a new random from the world seed and <nl> - * generate a seed from that <nl> + * To avoid polluting the worldgen seed , we generate a new random from the <nl> + * world seed and generate a seed from that <nl> * <nl> * @ param chunkProvider <nl> * @ param chunkX <nl> @ @ - 175 , 7 + 209 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> } <nl> <nl> / * * <nl> - * Is the offered class and instance of BaseMod and therefore a ModLoader mod ? <nl> + * Is the offered class and instance of BaseMod and therefore a ModLoader <nl> + * mod ? <nl> * / <nl> public boolean isModLoaderMod ( Class < ? > clazz ) <nl> { <nl> @ @ - 188 , 12 + 223 , 13 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> public ModContainer loadBaseModMod ( Class < ? > clazz , File canonicalFile ) <nl> { <nl> @ SuppressWarnings ( " unchecked " ) <nl> - Class < ? extends BaseMod > bmClazz = ( Class < ? extends BaseMod > ) clazz ; <nl> + Class < ? extends BaseMod > bmClazz = ( Class < ? extends BaseMod > ) clazz ; <nl> return new ModLoaderModContainer ( bmClazz , canonicalFile ) ; <nl> } <nl> <nl> / * * <nl> * Called to notify that an item was picked up from the world <nl> + * <nl> * @ param entityItem <nl> * @ param entityPlayer <nl> * / <nl> @ @ - 210 , 6 + 246 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> <nl> / * * <nl> * Raise an exception <nl> + * <nl> * @ param exception <nl> * @ param message <nl> * @ param stopGame <nl> @ @ - 221 , 7 + 258 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> } <nl> <nl> / * * <nl> - * Attempt to dispense the item as an entity other than just as a the item itself <nl> + * Attempt to dispense the item as an entity other than just as a the item <nl> + * itself <nl> * <nl> * @ param world <nl> * @ param x <nl> @ @ - 255 , 6 + 293 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> <nl> / * * <nl> * Build a list of default overworld biomes <nl> + * <nl> * @ return <nl> * / <nl> public BiomeGenBase [ ] getDefaultOverworldBiomes ( ) <nl> @ @ - 282 , 6 + 321 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> <nl> / * * <nl> * Called when an item is crafted <nl> + * <nl> * @ param player <nl> * @ param craftedItem <nl> * @ param craftingGrid <nl> @ @ - 319 , 7 + 359 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> * <nl> * @ param chat <nl> * @ param player <nl> - * @ return true if you want the packet to stop processing and not echo to the rest of the world <nl> + * @ return true if you want the packet to stop processing and not echo to <nl> + * the rest of the world <nl> * / <nl> public boolean handleChatPacket ( Packet3Chat chat , EntityPlayer player ) <nl> { <nl> @ @ - 336 , 6 + 377 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> <nl> / * * <nl> * Called when a packet 250 packet is received from the player <nl> + * <nl> * @ param packet <nl> * @ param player <nl> * / <nl> @ @ - 357 , 11 + 399 , 13 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> <nl> / * * <nl> * Handle register requests for packet 250 channels <nl> + * <nl> * @ param packet <nl> * / <nl> private void handleClientRegistration ( Packet250CustomPayload packet , EntityPlayer player ) <nl> { <nl> - if ( packet . field _ 44004 _ c = = null ) { <nl> + if ( packet . field _ 44004 _ c = = null ) <nl> + { <nl> return ; <nl> } <nl> try <nl> @ @ - 392 , 6 + 436 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> <nl> / * * <nl> * Handle a login <nl> + * <nl> * @ param loginPacket <nl> * @ param networkManager <nl> * / <nl> @ @ - 401 , 12 + 446 , 14 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> packet . field _ 44005 _ a = " REGISTER " ; <nl> packet . field _ 44004 _ c = FMLCommonHandler . instance ( ) . getPacketRegistry ( ) ; <nl> packet . field _ 44003 _ b = packet . field _ 44004 _ c . length ; <nl> - if ( packet . field _ 44003 _ b > 0 ) { <nl> + if ( packet . field _ 44003 _ b > 0 ) <nl> + { <nl> networkManager . func _ 745 _ a ( packet ) ; <nl> } <nl> } <nl> <nl> - public void announceLogin ( EntityPlayer player ) { <nl> + public void announceLogin ( EntityPlayer player ) <nl> + { <nl> for ( ModContainer mod : Loader . getModList ( ) ) <nl> { <nl> if ( mod . wantsPlayerTracking ( ) ) <nl> @ @ - 415 , 6 + 462 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> } <nl> } <nl> } <nl> + <nl> / * * <nl> * Are we a server ? <nl> * / <nl> @ @ - 436 , 9 + 484 , 12 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> @ Override <nl> public File getMinecraftRootDirectory ( ) <nl> { <nl> - try { <nl> + try <nl> + { <nl> return server . func _ 6009 _ a ( " . " ) . getCanonicalFile ( ) ; <nl> - } catch ( IOException ioe ) { <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> return new File ( " . " ) ; <nl> } <nl> } <nl> @ @ - 449 , 8 + 500 , 10 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> * / <nl> public boolean handleServerCommand ( String command , String player , ICommandListener listener ) <nl> { <nl> - for ( ModContainer mod : Loader . getModList ( ) ) { <nl> - if ( mod . wantsConsoleCommands ( ) & & mod . getConsoleHandler ( ) . handleCommand ( command , player , listener ) ) { <nl> + for ( ModContainer mod : Loader . getModList ( ) ) <nl> + { <nl> + if ( mod . wantsConsoleCommands ( ) & & mod . getConsoleHandler ( ) . handleCommand ( command , player , listener ) ) <nl> + { <nl> return true ; <nl> } <nl> }

TEST DIFF:
diff - - git a / NewFML . md b / NewFML . md 
 new file mode 100644 
 index 0000000 . . b126434 
 - - - / dev / null 
 + + + b / NewFML . md 
 @ @ - 0 , 0 + 1 , 127 @ @ 
 + # FML 
 + 
 + Entrypoint : ` ` ` FMLServiceProvider . onLoad ` ` ` 
 + 
 + - Verify environment 
 + - - Check all libraries are present : ` ` ` accesstransformer ` ` ` , ` ` ` coremod ` ` ` , ` ` ` deobfuscator ` ` ` 
 + - - Check versions are suitable : ` ` ` modlauncher ` ` ` , ` ` ` accesstransformer ` ` ` , ` ` ` coremod ` ` ` , ` ` ` deobfuscator ` ` ` 
 + - Find deobfuscated and patched MC 
 + - - If not found , trigger job to generate that ( loaded later at FMLLaunchProvider . launch ) 
 + 
 + Injected arguments : 
 + 
 + - ` ` ` mods ` ` ` : CSV list of mod files to load 
 + - ` ` ` modlist ` ` ` : JSON formatted list of mod files in a maven - like repository format 
 + 
 + Entrypoint : ` ` ` FMLServiceProvider . initializer ` ` ` 
 + - Setup paths 
 + - - ` ` ` mods ` ` ` folder 
 + - - ` ` ` config ` ` ` folder 
 + - FML config file read ( JSON ? ) 
 + - Trigger initial loading 
 + 
 + Entrypoint : ` ` ` FMLLaunchProvider . launch ` ` ` 
 + - Launches the patched and deobfuscated game 
 + - - If that wasn ' t found it ' ll be generated from the vanilla jar and patch / deobf files ( see above ) 
 + - Possible we ' ll use an alternative launch for the development environment 
 + 
 + ( A goal is that we pre - generate this JAR during forge installation or modpack installation ) 
 + 
 + # # Loading 
 + 
 + - First we discover all mods 
 + - - IModLocator instances present in system are found and queried to compile a master list of all mod artifacts of the three types 
 + - LANGPROVIDERs are added to the supported language system : IModLanguageProvider 
 + - The MODS from the list have their META - INF / mods . json file queried for mod instances to load 
 + - - MODS are cross - referenced for their language being available 
 + - - MODS are cross - referenced for their libraries being available 
 + - - MODS are cross - referenced for their MOD dependencies being available 
 + - - MODS with META - INF / coremods . json specification are loaded into the COREMOD system 
 + - - MODS with META - INF / accesstransformer . json are loaded into the ACCESSTRANSFORMER system 
 + - - MODS are enqueued to the background loading system 
 + - FMLLaunchProvider will be triggered from the ModLauncher to start the game 
 + 
 + # # Game loading 
 + 
 + - Events triggered from loadGame will launch various phases of modloading as before 
 + - - Deprecation of old " FML " events in favour of Forge events 
 + - - If a mod hasn ' t completed scanning there might be a pause waiting for it to complete before loading ( testing indicates this should be a very rare occurrence and isn ' t worse than existing status quo where all scanning and loading is on - thread ) 
 + 
 + # # # ` ` ` IModLocator ` ` ` 
 + 
 + Finds mods from various sources of various types 
 + manifest is queried for type : FMLModType 
 + 
 + - MOD : this file will be scanned as a mod . This is default if nothing is present 
 + - LIBRARY : this file will be added to the classpath and no further processing is done 
 + - LANGPROVIDER : this file will be loaded as a language provider 
 + 
 + # # # # ` ` ` ModsFolderLocator ` ` ` 
 + 
 + - scans for jar files from mods folder 
 + - - able to load all types 
 + - - loads in all environments 
 + - - maybe able to do runtime name transformation for dev time ? 
 + 
 + Standard mechanism to find and load mods 
 + 
 + # # # # ` ` ` ExplodedDirectoryLocator ` ` ` 
 + 
 + - loads a directory as a mod 
 + - - only able to load mods 
 + - - should only load in dev env 
 + 
 + Intended as a mechanism to allow development of mods easily by pointing at a compiled output directory 
 + 
 + # # # # ` ` ` ArgumentModsLocator ` ` ` : NYI 
 + 
 + - loads mods from the arguments on the command line 
 + - - able to load all types 
 + - - loads in all environments 
 + 
 + # # # ` ` ` IModLanguageProvider ` ` ` 
 + 
 + Provides mod and language provider services 
 + 
 + - Provides a means to transform a Mod File ( from the IModLocator ) into a list of modcontainer objects based on mods . json 
 + - Scanning work will be done in background threads 
 + - Language providers can be provided as JARs via the modlocator for ease of distribution 
 + 
 + # # # # ` ` ` FMLModLanguageProvider ` ` ` 
 + 
 + This is the standard Java @ Mod implementation provider 
 + 
 + - provided by default ( always supported ) 
 + - All scanning for @ Mod will be done in the background thread 
 + 
 + # # # # ` ` ` ScalaModLanguageProvider ` ` ` 
 + 
 + This is the scala language provider . It ' ll be provided separately as a JAR mod download . 
 + 
 + - API contract will need definition 
 + 
 + Other languages ? Kotlin ? Alternative Scala versions ? Javascript ? 
 + 
 + # # Coremods 
 + 
 + Coremods are now forcefully separated into _ injection _ and _ runtime _ phases . 
 + 
 + # # # Injection 
 + 
 + Injection is the act of intercepting the loading of a class and modifying the inbound class with alterations such as additions , replacements and deletions 
 + 
 + Injections will be written using Javascript . Two functions are required : a function providing the list of injection sites , and the function to transform the injection site . 
 + 
 + All injection sites will need to be pre - specified by the coremod in their metadata . Lookup services should be provided in the Javascript API . 
 + 
 + Javascript API for common coremod injection tasks needs to be developed , to allow common best - practice tooling for these complex tasks . 
 + 
 + Runtime coremod code ( code that has been injected ) is Java as usual . 
 + 
 + # # Background loading thread 
 + 
 + Early in loading , a background thread is triggered which will perform scanning tasks for common resources , such as @ Mod instances and other annotations . This thread will also be responsible for loading any cached resources , either those defined at build time or pre - computed from previous runs . It may also be tasked with writing those precomputed resources . 
 + 
 + There will be a IPreLoaderJobProvider that will allow extension of the scope of these tasks 
 + 
 +

NEAREST DIFF:
diff - - git a / fml / server / cpw / mods / fml / server / FMLServerHandler . java b / fml / server / cpw / mods / fml / server / FMLServerHandler . java 
 index 0aa90e7 . . 50a81f0 100644 
 - - - a / fml / server / cpw / mods / fml / server / FMLServerHandler . java 
 + + + b / fml / server / cpw / mods / fml / server / FMLServerHandler . java 
 @ @ - 44 , 18 + 44 , 21 @ @ import cpw . mods . fml . common . ModContainer ; 
 / * * 
 * Handles primary communication from hooked code into the system 
 * 
 - * The FML entry point is { @ link # onPreLoad ( MinecraftServer ) } called from { @ link MinecraftServer } 
 + * The FML entry point is { @ link # onPreLoad ( MinecraftServer ) } called from 
 + * { @ link MinecraftServer } 
 * 
 - * Obfuscated code should focus on this class and other members of the " server " ( or " client " ) code 
 + * Obfuscated code should focus on this class and other members of the " server " 
 + * ( or " client " ) code 
 * 
 * The actual mod loading is handled at arms length by { @ link Loader } 
 * 
 - * It is expected that a similar class will exist for each target environment : Bukkit and Client side . 
 + * It is expected that a similar class will exist for each target environment : 
 + * Bukkit and Client side . 
 * 
 * It should not be directly modified . 
 * 
 * @ author cpw 
 - * 
 + * 
 * / 
 public class FMLServerHandler implements IFMLSidedHandler 
 { 
 @ @ - 75 , 11 + 78 , 41 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 private BiomeGenBase [ ] defaultOverworldBiomes ; 
 
 / * * 
 - * Called to start the whole game off from { @ link MinecraftServer # startServer } 
 + * Called to start the whole game off from 
 + * { @ link MinecraftServer # startServer } 
 + * 
 * @ param minecraftServer 
 * / 
 public void onPreLoad ( MinecraftServer minecraftServer ) 
 { 
 + try 
 + { 
 + Class . forName ( " BaseModMp " , false , getClass ( ) . getClassLoader ( ) ) ; 
 + MinecraftServer . field _ 6038 _ a . severe ( " " 
 + + " Forge Mod Loader has detected that this server has an ModLoaderMP installed alongside Forge Mod Loader . \ n " 
 + + " This will cause a serious problem with compatibility . To protect your worlds , this minecraft server will now shutdown . \ n " 
 + + " You should follow the installation instructions of either Minecraft Forge of Forge Mod Loader and NOT install ModLoaderMP " 
 + + " into the minecraft _ server . jar file " 
 + + " before this server will be allowed to start up . Failure to do so will simply result in more startup failures . \ n " 
 + + " The authors of Minecraft Forge and Forge Mod Loader strongly suggest you talk to your mod ' s authors and get them to update their " 
 + + " requirements . ModLoaderMP is not compatible with Minecraft Forge on the server and they will need to update their mod " 
 + + " for Minecraft Forge and other server compatibility , unless they are Minecraft Forge mods , in which case they already " 
 + + " don ' t need ModLoaderMP and the mod author simply has failed to update his requirements and should be informed appropriately . \ n " 
 + + " The authors of Forge Mod Loader would like to be compatible with ModLoaderMP but it is closed source and owned by SDK . " 
 + + " SDK , the author of ModLoaderMP , has a standing invitation to submit compatibility patches " 
 + + " to the open source community project that is Forge Mod Loader so that this incompatibility doesn ' t last . " 
 + + " Users who wish to enjoy mods of both types are " 
 + + " encouraged to request of SDK that he submit a compatibility patch to the Forge Mod Loader project at " 
 + + " http : / / github . com / cpw / FML . Posting on the minecraft forums at http : / / www . minecraftforum . net / topic / 86765 - ( the MLMP thread ) " 
 + + " may encourage him in this effort . However , I ask that your requests be polite . " 
 + + " Now , the server has to shutdown so you can reinstall your minecraft _ server . jar properly , until such time as we can work together . " ) ; 
 + throw new RuntimeException ( 
 + " This FML based server has detected an installation of ModLoaderMP alongside . This will cause serious compatibility issues , so the server will now shut down . " ) ; 
 + } 
 + catch ( ClassNotFoundException e ) 
 + { 
 + / / We ' re safe . continue 
 + } 
 server = minecraftServer ; 
 FMLCommonHandler . instance ( ) . registerSidedDelegate ( this ) ; 
 CommonRegistry . registerRegistry ( new ServerRegistry ( ) ) ; 
 @ @ - 112 , 6 + 145 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 
 / * * 
 * Get the server instance 
 + * 
 * @ return 
 * / 
 public MinecraftServer getServer ( ) 
 @ @ - 130 , 8 + 164 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 / * * 
 * Called from ChunkProviderServer when a chunk needs to be populated 
 * 
 - * To avoid polluting the worldgen seed , we generate a new random from the world seed and 
 - * generate a seed from that 
 + * To avoid polluting the worldgen seed , we generate a new random from the 
 + * world seed and generate a seed from that 
 * 
 * @ param chunkProvider 
 * @ param chunkX 
 @ @ - 175 , 7 + 209 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 } 
 
 / * * 
 - * Is the offered class and instance of BaseMod and therefore a ModLoader mod ? 
 + * Is the offered class and instance of BaseMod and therefore a ModLoader 
 + * mod ? 
 * / 
 public boolean isModLoaderMod ( Class < ? > clazz ) 
 { 
 @ @ - 188 , 12 + 223 , 13 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 public ModContainer loadBaseModMod ( Class < ? > clazz , File canonicalFile ) 
 { 
 @ SuppressWarnings ( " unchecked " ) 
 - Class < ? extends BaseMod > bmClazz = ( Class < ? extends BaseMod > ) clazz ; 
 + Class < ? extends BaseMod > bmClazz = ( Class < ? extends BaseMod > ) clazz ; 
 return new ModLoaderModContainer ( bmClazz , canonicalFile ) ; 
 } 
 
 / * * 
 * Called to notify that an item was picked up from the world 
 + * 
 * @ param entityItem 
 * @ param entityPlayer 
 * / 
 @ @ - 210 , 6 + 246 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 
 / * * 
 * Raise an exception 
 + * 
 * @ param exception 
 * @ param message 
 * @ param stopGame 
 @ @ - 221 , 7 + 258 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 } 
 
 / * * 
 - * Attempt to dispense the item as an entity other than just as a the item itself 
 + * Attempt to dispense the item as an entity other than just as a the item 
 + * itself 
 * 
 * @ param world 
 * @ param x 
 @ @ - 255 , 6 + 293 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 
 / * * 
 * Build a list of default overworld biomes 
 + * 
 * @ return 
 * / 
 public BiomeGenBase [ ] getDefaultOverworldBiomes ( ) 
 @ @ - 282 , 6 + 321 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 
 / * * 
 * Called when an item is crafted 
 + * 
 * @ param player 
 * @ param craftedItem 
 * @ param craftingGrid 
 @ @ - 319 , 7 + 359 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 * 
 * @ param chat 
 * @ param player 
 - * @ return true if you want the packet to stop processing and not echo to the rest of the world 
 + * @ return true if you want the packet to stop processing and not echo to 
 + * the rest of the world 
 * / 
 public boolean handleChatPacket ( Packet3Chat chat , EntityPlayer player ) 
 { 
 @ @ - 336 , 6 + 377 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 
 / * * 
 * Called when a packet 250 packet is received from the player 
 + * 
 * @ param packet 
 * @ param player 
 * / 
 @ @ - 357 , 11 + 399 , 13 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 
 / * * 
 * Handle register requests for packet 250 channels 
 + * 
 * @ param packet 
 * / 
 private void handleClientRegistration ( Packet250CustomPayload packet , EntityPlayer player ) 
 { 
 - if ( packet . field _ 44004 _ c = = null ) { 
 + if ( packet . field _ 44004 _ c = = null ) 
 + { 
 return ; 
 } 
 try 
 @ @ - 392 , 6 + 436 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 
 / * * 
 * Handle a login 
 + * 
 * @ param loginPacket 
 * @ param networkManager 
 * / 
 @ @ - 401 , 12 + 446 , 14 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 packet . field _ 44005 _ a = " REGISTER " ; 
 packet . field _ 44004 _ c = FMLCommonHandler . instance ( ) . getPacketRegistry ( ) ; 
 packet . field _ 44003 _ b = packet . field _ 44004 _ c . length ; 
 - if ( packet . field _ 44003 _ b > 0 ) { 
 + if ( packet . field _ 44003 _ b > 0 ) 
 + { 
 networkManager . func _ 745 _ a ( packet ) ; 
 } 
 } 
 
 - public void announceLogin ( EntityPlayer player ) { 
 + public void announceLogin ( EntityPlayer player ) 
 + { 
 for ( ModContainer mod : Loader . getModList ( ) ) 
 { 
 if ( mod . wantsPlayerTracking ( ) ) 
 @ @ - 415 , 6 + 462 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 } 
 } 
 } 
 + 
 / * * 
 * Are we a server ? 
 * / 
 @ @ - 436 , 9 + 484 , 12 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 @ Override 
 public File getMinecraftRootDirectory ( ) 
 { 
 - try { 
 + try 
 + { 
 return server . func _ 6009 _ a ( " . " ) . getCanonicalFile ( ) ; 
 - } catch ( IOException ioe ) { 
 + } 
 + catch ( IOException ioe ) 
 + { 
 return new File ( " . " ) ; 
 } 
 } 
 @ @ - 449 , 8 + 500 , 10 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 * / 
 public boolean handleServerCommand ( String command , String player , ICommandListener listener ) 
 { 
 - for ( ModContainer mod : Loader . getModList ( ) ) { 
 - if ( mod . wantsConsoleCommands ( ) & & mod . getConsoleHandler ( ) . handleCommand ( command , player , listener ) ) { 
 + for ( ModContainer mod : Loader . getModList ( ) ) 
 + { 
 + if ( mod . wantsConsoleCommands ( ) & & mod . getConsoleHandler ( ) . handleCommand ( command , player , listener ) ) 
 + { 
 return true ; 
 } 
 }
