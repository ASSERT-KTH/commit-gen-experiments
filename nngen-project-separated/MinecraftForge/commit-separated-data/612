BLEU SCORE: 0.017726282342575568

TEST MSG: Skip searching for mods in the JAVA _ HOME directory . Closes # 2249 and # 2250
GENERATED MSG: Moved transformer wrappers to a separate package ( should fix signing errors ) , fixed debug mods not loading in forgedev ( string comparison ) .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java b / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> index ea23483 . . 8565a64 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> @ @ - 103 , 6 + 103 , 8 @ @ public class ModClassLoader extends URLClassLoader <nl> <nl> public boolean isDefaultLibrary ( File file ) <nl> { <nl> + String home = System . getProperty ( " java . home " ) ; / / Nullcheck just in case some JVM decides to be stupid <nl> + if ( home ! = null & & file . getAbsolutePath ( ) . startsWith ( home ) ) return true ; <nl> / / Should really pull this from the json somehow , but we dont have that at runtime . <nl> String name = file . getName ( ) ; <nl> if ( ! name . endsWith ( " . jar " ) ) return false ;
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java b / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> index c0f6091 . . a389421 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class ModClassLoader extends URLClassLoader <nl> for ( URL url : mainClassLoader . getSources ( ) ) <nl> { <nl> URI uri = url . toURI ( ) ; <nl> - if ( uri . getScheme ( ) = = " file " ) <nl> + if ( uri . getScheme ( ) . equals ( " file " ) ) <nl> { <nl> files . add ( new File ( uri ) ) ; <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java <nl> index 4e14e6e . . dd9d76c 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java <nl> @ @ - 103 , 14 + 103 , 7 @ @ public class ASMTransformerWrapper <nl> @ Override <nl> public InputStream getInputStream ( ) <nl> { <nl> - try <nl> - { <nl> - return new ByteArrayInputStream ( wrapperCache . get ( file ) ) ; <nl> - } <nl> - catch ( ExecutionException e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + return new ByteArrayInputStream ( wrapperCache . getUnchecked ( file ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 182 , 7 + 175 , 7 @ @ public class ASMTransformerWrapper <nl> <nl> private static String getWrapperName ( String parentClass ) <nl> { <nl> - return parentClass + " _ $ Wrapper " ; <nl> + return " $ wrapper . " + parentClass ; <nl> } <nl> <nl> private static class WrapperVisitor extends ClassVisitor

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java b / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 index ea23483 . . 8565a64 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 @ @ - 103 , 6 + 103 , 8 @ @ public class ModClassLoader extends URLClassLoader 
 
 public boolean isDefaultLibrary ( File file ) 
 { 
 + String home = System . getProperty ( " java . home " ) ; / / Nullcheck just in case some JVM decides to be stupid 
 + if ( home ! = null & & file . getAbsolutePath ( ) . startsWith ( home ) ) return true ; 
 / / Should really pull this from the json somehow , but we dont have that at runtime . 
 String name = file . getName ( ) ; 
 if ( ! name . endsWith ( " . jar " ) ) return false ;

NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java b / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 index c0f6091 . . a389421 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class ModClassLoader extends URLClassLoader 
 for ( URL url : mainClassLoader . getSources ( ) ) 
 { 
 URI uri = url . toURI ( ) ; 
 - if ( uri . getScheme ( ) = = " file " ) 
 + if ( uri . getScheme ( ) . equals ( " file " ) ) 
 { 
 files . add ( new File ( uri ) ) ; 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java 
 index 4e14e6e . . dd9d76c 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java 
 @ @ - 103 , 14 + 103 , 7 @ @ public class ASMTransformerWrapper 
 @ Override 
 public InputStream getInputStream ( ) 
 { 
 - try 
 - { 
 - return new ByteArrayInputStream ( wrapperCache . get ( file ) ) ; 
 - } 
 - catch ( ExecutionException e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + return new ByteArrayInputStream ( wrapperCache . getUnchecked ( file ) ) ; 
 } 
 
 @ Override 
 @ @ - 182 , 7 + 175 , 7 @ @ public class ASMTransformerWrapper 
 
 private static String getWrapperName ( String parentClass ) 
 { 
 - return parentClass + " _ $ Wrapper " ; 
 + return " $ wrapper . " + parentClass ; 
 } 
 
 private static class WrapperVisitor extends ClassVisitor
