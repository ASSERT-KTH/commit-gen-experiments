BLEU SCORE: 0.007869270985473822

TEST MSG: Readd modded entity spawning / tracking support
GENERATED MSG: Create custom shapeless recipe matching system . Should solve # 4516 damageable items in shapeless recipes .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / EntityTracker . java . patch b / patches / minecraft / net / minecraft / entity / EntityTracker . java . patch <nl> index c43b21a . . 863316a 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / EntityTracker . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / EntityTracker . java . patch <nl> @ @ - 1 , 6 + 1 , 17 @ @ <nl> - - - a / net / minecraft / entity / EntityTracker . java <nl> + + + b / net / minecraft / entity / EntityTracker . java <nl> - @ @ - 296 , 4 + 296 , 18 @ @ <nl> + @ @ - 71 , 6 + 71 , 10 @ @ <nl> + } <nl> + <nl> + public void func _ 72786 _ a ( Entity p _ 72786 _ 1 _ ) { <nl> + + if ( p _ 72786 _ 1 _ . func _ 200600 _ R ( ) . hasCustomTracking ( ) ) { <nl> + + this . func _ 72785 _ a ( p _ 72786 _ 1 _ , p _ 72786 _ 1 _ . func _ 200600 _ R ( ) . getTrackingRange ( ) , p _ 72786 _ 1 _ . func _ 200600 _ R ( ) . getUpdateFrequency ( ) , p _ 72786 _ 1 _ . func _ 200600 _ R ( ) . shouldSendVelocityUpdates ( ) ) ; <nl> + + return ; <nl> + + } <nl> + if ( p _ 72786 _ 1 _ instanceof EntityPlayerMP ) { <nl> + this . func _ 72791 _ a ( p _ 72786 _ 1 _ , 512 , 2 ) ; <nl> + EntityPlayerMP entityplayermp = ( EntityPlayerMP ) p _ 72786 _ 1 _ ; <nl> + @ @ - 296 , 4 + 300 , 18 @ @ <nl> } <nl> <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / EntityType . java . patch b / patches / minecraft / net / minecraft / entity / EntityType . java . patch <nl> index 2f519d4 . . ccb0158 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / EntityType . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / EntityType . java . patch <nl> @ @ - 20 , 7 + 20 , 90 @ @ <nl> public static final EntityType < EntityAreaEffectCloud > field _ 200788 _ b = func _ 200712 _ a ( " area _ effect _ cloud " , EntityType . Builder . func _ 201757 _ a ( EntityAreaEffectCloud . class , EntityAreaEffectCloud : : new ) ) ; <nl> public static final EntityType < EntityArmorStand > field _ 200789 _ c = func _ 200712 _ a ( " armor _ stand " , EntityType . Builder . func _ 201757 _ a ( EntityArmorStand . class , EntityArmorStand : : new ) ) ; <nl> public static final EntityType < EntityTippedArrow > field _ 200790 _ d = func _ 200712 _ a ( " arrow " , EntityType . Builder . func _ 201757 _ a ( EntityTippedArrow . class , EntityTippedArrow : : new ) ) ; <nl> - @ @ - 411 , 7 + 412 , 7 @ @ <nl> + @ @ - 227 , 6 + 228 , 11 @ @ <nl> + private String field _ 210762 _ aX ; <nl> + @ Nullable <nl> + private final Type < ? > field _ 206832 _ aX ; <nl> + + private boolean useVanillaSpawning ; <nl> + + private Function < net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity , Entity > customSpawnCallback ; <nl> + + private boolean hasCustomTracking ; <nl> + + private int customTrackingRange , customUpdateFrequency ; <nl> + + private boolean customSendVelocityUpdates ; <nl> + <nl> + public static < T extends Entity > EntityType < T > func _ 200712 _ a ( String p _ 200712 _ 0 _ , EntityType . Builder < T > p _ 200712 _ 1 _ ) { <nl> + EntityType < T > entitytype = p _ 200712 _ 1 _ . func _ 206830 _ a ( p _ 200712 _ 0 _ ) ; <nl> + @ @ - 244 , 6 + 250 , 18 @ @ <nl> + return field _ 200787 _ a . func _ 82594 _ a ( ResourceLocation . func _ 208304 _ a ( p _ 200713 _ 0 _ ) ) ; <nl> + } <nl> + <nl> + + public EntityType ( Class < ? extends T > clazz , Function < ? super World , ? extends T > factory , boolean serializable , boolean summonable , @ Nullable Type < ? > dataFixerType , <nl> + + boolean useVanillaSpawning , Function < net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity , Entity > customSpawnCallback , <nl> + + boolean hasCustomTracking , int range , int updateFreq , boolean sendVelocityUpdates ) { <nl> + + this ( clazz , factory , serializable , summonable , dataFixerType ) ; <nl> + + this . useVanillaSpawning = useVanillaSpawning ; <nl> + + this . customSpawnCallback = customSpawnCallback ; <nl> + + this . hasCustomTracking = hasCustomTracking ; <nl> + + this . customTrackingRange = range ; <nl> + + this . customUpdateFrequency = updateFreq ; <nl> + + this . customSendVelocityUpdates = sendVelocityUpdates ; <nl> + + } <nl> + + <nl> + public EntityType ( Class < ? extends T > p _ i49579 _ 1 _ , Function < ? super World , ? extends T > p _ i49579 _ 2 _ , boolean p _ i49579 _ 3 _ , boolean p _ i49579 _ 4 _ , @ Nullable Type < ? > p _ i49579 _ 5 _ ) { <nl> + this . field _ 201761 _ aK = p _ i49579 _ 1 _ ; <nl> + this . field _ 200732 _ aK = p _ i49579 _ 2 _ ; <nl> + @ @ - 375 , 15 + 393 , 32 @ @ <nl> + return p _ 200719 _ 1 _ = = null ? null : p _ 200719 _ 1 _ . func _ 200721 _ a ( p _ 200719 _ 0 _ ) ; <nl> + } <nl> + <nl> + + public boolean hasCustomTracking ( ) { return hasCustomTracking ; } <nl> + + public int getTrackingRange ( ) { return customTrackingRange ; } <nl> + + public int getUpdateFrequency ( ) { return customUpdateFrequency ; } <nl> + + public boolean shouldSendVelocityUpdates ( ) { return customSendVelocityUpdates ; } <nl> + + public boolean usesVanillaSpawning ( ) { return useVanillaSpawning ; } <nl> + + @ Nullable public Entity handleSpawnMessage ( World world , net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity msg ) <nl> + + { <nl> + + return customSpawnCallback = = null ? func _ 200721 _ a ( world ) : customSpawnCallback . apply ( msg ) ; <nl> + + } <nl> + + <nl> + public static class Builder < T extends Entity > { <nl> + private final Class < ? extends T > field _ 201759 _ a ; <nl> + private final Function < ? super World , ? extends T > field _ 200709 _ a ; <nl> + private boolean field _ 200710 _ b = true ; <nl> + private boolean field _ 200711 _ c = true ; <nl> + + private boolean useVanillaSpawning ; <nl> + + private Function < net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity , Entity > customSpawnCallback = null ; <nl> + + private boolean hasCustomTracking = false ; <nl> + + private int trackingRange ; <nl> + + private int updateFrequency ; <nl> + + private boolean sendVelocityUpdates ; <nl> + <nl> + private Builder ( Class < ? extends T > p _ i48756 _ 1 _ , Function < ? super World , ? extends T > p _ i48756 _ 2 _ ) { <nl> + this . field _ 201759 _ a = p _ i48756 _ 1 _ ; <nl> + this . field _ 200709 _ a = p _ i48756 _ 2 _ ; <nl> + + this . useVanillaSpawning = field _ 201759 _ a . getName ( ) . startsWith ( " net . minecraft " ) ; <nl> + } <nl> + <nl> + public static < T extends Entity > EntityType . Builder < T > func _ 201757 _ a ( Class < ? extends T > p _ 201757 _ 0 _ , Function < ? super World , ? extends T > p _ 201757 _ 1 _ ) { <nl> + @ @ - 406 , 12 + 441 , 26 @ @ <nl> + return this ; <nl> + } <nl> + <nl> + + public EntityType . Builder < T > customSpawning ( Function < net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity , Entity > cb , boolean useVanillaSpawning ) { <nl> + + this . customSpawnCallback = cb ; <nl> + + this . useVanillaSpawning = useVanillaSpawning ; <nl> + + return this ; <nl> + + } <nl> + + <nl> + + public final EntityType . Builder < T > tracker ( int range , int updateFrequency , boolean sendVelocityUpdates ) { <nl> + + this . hasCustomTracking = true ; <nl> + + this . trackingRange = range ; <nl> + + this . updateFrequency = updateFrequency ; <nl> + + this . sendVelocityUpdates = sendVelocityUpdates ; <nl> + + return this ; <nl> + + } <nl> + + <nl> + public EntityType < T > func _ 206830 _ a ( String p _ 206830 _ 1 _ ) { <nl> + Type < ? > type = null ; <nl> if ( this . field _ 200710 _ b ) { <nl> try { <nl> type = DataFixesManager . func _ 210901 _ a ( ) . getSchema ( DataFixUtils . makeKey ( 1519 ) ) . getChoiceType ( TypeReferences . field _ 211298 _ n , p _ 206830 _ 1 _ ) ; <nl> @ @ - 29 , 3 + 112 , 12 @ @ <nl> if ( SharedConstants . field _ 206244 _ b ) { <nl> throw illegalstateexception ; <nl> } <nl> + @ @ - 420 , 7 + 469 , 7 @ @ <nl> + } <nl> + } <nl> + <nl> + - return new EntityType < T > ( this . field _ 201759 _ a , this . field _ 200709 _ a , this . field _ 200710 _ b , this . field _ 200711 _ c , type ) ; <nl> + + return new EntityType < T > ( this . field _ 201759 _ a , this . field _ 200709 _ a , this . field _ 200710 _ b , this . field _ 200711 _ c , type , useVanillaSpawning , customSpawnCallback , hasCustomTracking , trackingRange , updateFrequency , sendVelocityUpdates ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IEntityAdditionalSpawnData . java b / src / main / java / net / minecraftforge / fml / common / registry / IEntityAdditionalSpawnData . java <nl> index 7524fbd . . dbbc8c6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / IEntityAdditionalSpawnData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / IEntityAdditionalSpawnData . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ <nl> <nl> package net . minecraftforge . fml . common . registry ; <nl> <nl> - import io . netty . buffer . ByteBuf ; <nl> + import net . minecraft . network . PacketBuffer ; <nl> <nl> / * * <nl> * A interface for Entities that need extra information to be communicated <nl> @ @ - 33 , 7 + 33 , 7 @ @ public interface IEntityAdditionalSpawnData <nl> * <nl> * @ param buffer The packet data stream <nl> * / <nl> - void writeSpawnData ( ByteBuf buffer ) ; <nl> + void writeSpawnData ( PacketBuffer buffer ) ; <nl> <nl> / * * <nl> * Called by the client when it receives a Entity spawn packet . <nl> @ @ - 41 , 5 + 41 , 5 @ @ public interface IEntityAdditionalSpawnData <nl> * <nl> * @ param additionalData The packet data stream <nl> * / <nl> - void readSpawnData ( ByteBuf additionalData ) ; <nl> + void readSpawnData ( PacketBuffer additionalData ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IThrowableEntity . java b / src / main / java / net / minecraftforge / fml / common / registry / IThrowableEntity . java <nl> deleted file mode 100644 <nl> index b3f2857 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / IThrowableEntity . java <nl> + + + / dev / null <nl> @ @ - 1 , 41 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2018 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . fml . common . registry ; <nl> - <nl> - import net . minecraft . entity . Entity ; <nl> - <nl> - / * * <nl> - * This interface should be implemented by an Entity that can be ' thrown ' , like snowballs . <nl> - * This was created to mimic ModLoaderMP ' s ' owner ' functionality . <nl> - * / <nl> - public interface IThrowableEntity <nl> - { <nl> - / * * <nl> - * Gets the entity that threw / created this entity . <nl> - * @ return The owner instance , Null if none . <nl> - * / <nl> - Entity getThrower ( ) ; <nl> - <nl> - / * * <nl> - * Sets the entity that threw / created this entity . <nl> - * @ param entity The new thrower / creator . <nl> - * / <nl> - void setThrower ( Entity entity ) ; <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 02b04e5 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package net . minecraftforge . fml . network ; <nl> + <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . network . simple . SimpleChannel ; <nl> + <nl> + public class FMLPlayHandler <nl> + { <nl> + public static final SimpleChannel channel = NetworkRegistry . ChannelBuilder <nl> + . named ( new ResourceLocation ( " fml " , " play " ) ) <nl> + . clientAcceptedVersions ( a - > true ) <nl> + . serverAcceptedVersions ( a - > true ) <nl> + . networkProtocolVersion ( ( ) - > NetworkHooks . NETVERSION ) <nl> + . simpleChannel ( ) ; <nl> + static <nl> + { <nl> + channel . registerMessage ( 0 , FMLPlayMessages . SpawnEntity . class , FMLPlayMessages . SpawnEntity : : encode , FMLPlayMessages . SpawnEntity : : decode , FMLPlayMessages . SpawnEntity : : handle ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> new file mode 100644 <nl> index 0000000 . . 7d4fd26 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> @ @ - 0 , 0 + 1 , 136 @ @ <nl> + package net . minecraftforge . fml . network ; <nl> + <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraft . entity . EntityTracker ; <nl> + import net . minecraft . entity . EntityType ; <nl> + import net . minecraft . network . PacketBuffer ; <nl> + import net . minecraft . util . math . MathHelper ; <nl> + import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; <nl> + <nl> + import java . util . UUID ; <nl> + import java . util . function . Supplier ; <nl> + <nl> + public class FMLPlayMessages <nl> + { <nl> + public static class SpawnEntity <nl> + { <nl> + private final Entity entity ; <nl> + private final int typeId ; <nl> + private final int entityId ; <nl> + private final UUID uuid ; <nl> + private final double posX , posY , posZ ; <nl> + private final byte pitch , yaw ; <nl> + private final short velX , velY , velZ ; <nl> + private final PacketBuffer buf ; <nl> + <nl> + SpawnEntity ( Entity e ) <nl> + { <nl> + this . entity = e ; <nl> + this . typeId = EntityType . REGISTRY . getId ( e . getType ( ) ) ; <nl> + this . entityId = e . getEntityId ( ) ; <nl> + this . uuid = e . getUniqueID ( ) ; <nl> + this . posX = e . posX ; <nl> + this . posY = e . posY ; <nl> + this . posZ = e . posZ ; <nl> + this . pitch = ( byte ) MathHelper . floor ( e . rotationPitch * 256 . 0F / 360 . 0F ) ; <nl> + this . yaw = ( byte ) MathHelper . floor ( e . rotationYaw * 256 . 0F / 360 . 0F ) ; <nl> + this . velX = ( short ) ( MathHelper . clamp ( e . motionX , - 3 . 9D , 3 . 9D ) * 8000 . 0D ) ; <nl> + this . velY = ( short ) ( MathHelper . clamp ( e . motionY , - 3 . 9D , 3 . 9D ) * 8000 . 0D ) ; <nl> + this . velZ = ( short ) ( MathHelper . clamp ( e . motionZ , - 3 . 9D , 3 . 9D ) * 8000 . 0D ) ; <nl> + this . buf = null ; <nl> + } <nl> + <nl> + private SpawnEntity ( int typeId , int entityId , UUID uuid , double posX , double posY , double posZ , <nl> + byte pitch , byte yaw , short velX , short velY , short velZ , PacketBuffer buf ) <nl> + { <nl> + this . entity = null ; <nl> + this . typeId = typeId ; <nl> + this . entityId = entityId ; <nl> + this . uuid = uuid ; <nl> + this . posX = posX ; <nl> + this . posY = posY ; <nl> + this . posZ = posZ ; <nl> + this . pitch = pitch ; <nl> + this . yaw = yaw ; <nl> + this . velX = velX ; <nl> + this . velY = velY ; <nl> + this . velZ = velZ ; <nl> + this . buf = buf ; <nl> + } <nl> + <nl> + public static void encode ( SpawnEntity msg , PacketBuffer buf ) <nl> + { <nl> + buf . writeVarInt ( msg . typeId ) ; <nl> + buf . writeInt ( msg . entityId ) ; <nl> + buf . writeLong ( msg . uuid . getMostSignificantBits ( ) ) ; <nl> + buf . writeLong ( msg . uuid . getLeastSignificantBits ( ) ) ; <nl> + buf . writeDouble ( msg . posX ) ; <nl> + buf . writeDouble ( msg . posY ) ; <nl> + buf . writeDouble ( msg . posZ ) ; <nl> + buf . writeByte ( msg . pitch ) ; <nl> + buf . writeByte ( msg . yaw ) ; <nl> + buf . writeShort ( msg . velX ) ; <nl> + buf . writeShort ( msg . velY ) ; <nl> + buf . writeShort ( msg . velZ ) ; <nl> + if ( msg . entity instanceof IEntityAdditionalSpawnData ) <nl> + { <nl> + ( ( IEntityAdditionalSpawnData ) msg . entity ) . writeSpawnData ( buf ) ; <nl> + } <nl> + } <nl> + <nl> + public static SpawnEntity decode ( PacketBuffer buf ) <nl> + { <nl> + return new SpawnEntity ( <nl> + buf . readVarInt ( ) , <nl> + buf . readInt ( ) , <nl> + new UUID ( buf . readLong ( ) , buf . readLong ( ) ) , <nl> + buf . readDouble ( ) , buf . readDouble ( ) , buf . readDouble ( ) , <nl> + buf . readByte ( ) , buf . readByte ( ) , <nl> + buf . readShort ( ) , buf . readShort ( ) , buf . readShort ( ) , <nl> + buf <nl> + ) ; <nl> + } <nl> + <nl> + public static void handle ( SpawnEntity msg , Supplier < NetworkEvent . Context > ctx ) <nl> + { <nl> + ctx . get ( ) . enqueueWork ( ( ) - > { <nl> + EntityType < ? > type = EntityType . REGISTRY . get ( msg . typeId ) ; <nl> + if ( type = = null ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Could not spawn entity ( id % d ) with unknown type at ( % f , % f , % f ) " , msg . entityId , msg . posX , msg . posY , msg . posZ ) ) ; <nl> + } <nl> + <nl> + Entity e = type . handleSpawnMessage ( Minecraft . getInstance ( ) . world , msg ) ; <nl> + if ( e = = null ) <nl> + { <nl> + return ; <nl> + } <nl> + <nl> + EntityTracker . updateServerPosition ( e , msg . posX , msg . posY , msg . posZ ) ; <nl> + e . rotationPitch = ( float ) ( msg . pitch * 360 ) / 256 . 0F ; <nl> + e . rotationYaw = ( float ) ( msg . yaw * 360 ) / 256 . 0F ; <nl> + <nl> + Entity [ ] parts = e . getParts ( ) ; <nl> + if ( parts ! = null ) <nl> + { <nl> + int offset = msg . entityId - e . getEntityId ( ) ; <nl> + for ( Entity part : parts ) <nl> + { <nl> + part . setEntityId ( part . getEntityId ( ) + offset ) ; <nl> + } <nl> + } <nl> + <nl> + e . setEntityId ( msg . entityId ) ; <nl> + e . setUniqueId ( msg . uuid ) ; <nl> + Minecraft . getInstance ( ) . world . addEntityToWorld ( msg . entityId , e ) ; <nl> + e . setVelocity ( msg . velX / 8000 . 0 , msg . velY / 8000 . 0 , msg . velZ / 8000 . 0 ) ; <nl> + if ( e instanceof IEntityAdditionalSpawnData ) <nl> + { <nl> + ( ( IEntityAdditionalSpawnData ) e ) . readSpawnData ( msg . buf ) ; <nl> + } <nl> + } ) ; <nl> + ctx . get ( ) . setPacketHandled ( true ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> index ea4e03d . . 76948c2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> @ @ - 52 , 6 + 52 , 10 @ @ public class NetworkHooks <nl> <nl> public static Packet < ? > getEntitySpawningPacket ( Entity entity ) <nl> { <nl> + if ( ! entity . getType ( ) . usesVanillaSpawning ( ) ) <nl> + { <nl> + return FMLPlayHandler . channel . toVanillaPacket ( new FMLPlayMessages . SpawnEntity ( entity ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; <nl> + } <nl> return null ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java b / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java <nl> index ab0dfa1 . . 01697b5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java <nl> @ @ - 83 , 8 + 83 , 12 @ @ public class SimpleChannel <nl> <nl> public < MSG > void sendTo ( MSG message , NetworkManager manager , NetworkDirection direction ) <nl> { <nl> - ICustomPacket < Packet < ? > > payload = direction . buildPacket ( toBuffer ( message ) , instance . getChannelName ( ) ) ; <nl> - manager . sendPacket ( payload . getThis ( ) ) ; <nl> + manager . sendPacket ( toVanillaPacket ( message , direction ) ) ; <nl> + } <nl> + <nl> + public < MSG > Packet < ? > toVanillaPacket ( MSG message , NetworkDirection direction ) <nl> + { <nl> + return direction . buildPacket ( toBuffer ( message ) , instance . getChannelName ( ) ) . getThis ( ) ; <nl> } <nl> <nl> public < MSG > void reply ( MSG msgToReply , NetworkEvent . Context context )
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch <nl> index 697a870 . . f9d344f 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch <nl> @ @ - 1 , 6 + 1 , 11 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / item / crafting / Ingredient . java <nl> + + + . . / src - work / minecraft / net / minecraft / item / crafting / Ingredient . java <nl> - @ @ - 13 , 6 + 13 , 8 @ @ <nl> + @ @ - 8 , 11 + 8 , 11 @ @ <nl> + import net . minecraft . client . util . RecipeItemHelper ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + - import net . minecraftforge . fml . relauncher . Side ; <nl> + - import net . minecraftforge . fml . relauncher . SideOnly ; <nl> <nl> public class Ingredient implements Predicate < ItemStack > <nl> { <nl> @ @ - 9 , 12 + 14 , 13 @ @ <nl> public static final Ingredient field _ 193370 _ a = new Ingredient ( new ItemStack [ 0 ] ) <nl> { <nl> public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) <nl> - @ @ - 21 , 17 + 23 , 34 @ @ <nl> + @ @ - 21 , 17 + 21 , 41 @ @ <nl> } <nl> } ; <nl> private final ItemStack [ ] field _ 193371 _ b ; <nl> + private final ItemStack [ ] matchingStacksExploded ; <nl> private IntList field _ 194140 _ c ; <nl> + + private final boolean isSimple ; <nl> <nl> + protected Ingredient ( int size ) <nl> + { <nl> @ @ - 23 , 6 + 29 , 7 @ @ <nl> + <nl> protected Ingredient ( ItemStack . . . p _ i47503 _ 1 _ ) <nl> { <nl> + + boolean simple = true ; <nl> this . field _ 193371 _ b = p _ i47503 _ 1 _ ; <nl> + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; <nl> + for ( ItemStack s : p _ i47503 _ 1 _ ) <nl> @ @ - 30 , 11 + 37 , 16 @ @ <nl> + if ( s . func _ 190926 _ b ( ) ) <nl> + continue ; <nl> + if ( s . func _ 77960 _ j ( ) = = net . minecraftforge . oredict . OreDictionary . WILDCARD _ VALUE ) <nl> + + { <nl> + + if ( s . func _ 77973 _ b ( ) . func _ 77645 _ m ( ) ) <nl> + + simple = false ; <nl> + s . func _ 77973 _ b ( ) . func _ 150895 _ a ( net . minecraft . creativetab . CreativeTabs . field _ 78027 _ g , lst ) ; <nl> + + } <nl> + else <nl> + lst . add ( s ) ; <nl> + } <nl> + this . matchingStacksExploded = lst . toArray ( new ItemStack [ lst . size ( ) ] ) ; <nl> + + this . isSimple = simple & & this . matchingStacksExploded . length > 0 ; <nl> + Ingredient . INSTANCES . add ( this ) ; <nl> } <nl> <nl> @ @ - 46 , 7 + 58 , 7 @ @ <nl> } <nl> <nl> public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) <nl> - @ @ - 63 , 9 + 82 , 9 @ @ <nl> + @ @ - 63 , 9 + 87 , 9 @ @ <nl> { <nl> if ( this . field _ 194140 _ c = = null ) <nl> { <nl> @ @ - 58 , 7 + 70 , 7 @ @ <nl> { <nl> this . field _ 194140 _ c . add ( RecipeItemHelper . func _ 194113 _ b ( itemstack ) ) ; <nl> } <nl> - @ @ - 76 , 6 + 95 , 18 @ @ <nl> + @ @ - 76 , 6 + 100 , 18 @ @ <nl> return this . field _ 194140 _ c ; <nl> } <nl> <nl> @ @ - 77 , 7 + 89 , 7 @ @ <nl> public static Ingredient func _ 193367 _ a ( Item p _ 193367 _ 0 _ ) <nl> { <nl> return func _ 193369 _ a ( new ItemStack ( p _ 193367 _ 0 _ , 1 , 32767 ) ) ; <nl> - @ @ - 108 , 4 + 139 , 17 @ @ <nl> + @ @ - 108 , 4 + 144 , 22 @ @ <nl> <nl> return field _ 193370 _ a ; <nl> } <nl> @ @ - 94 , 4 + 106 , 9 @ @ <nl> + } <nl> + return new Ingredient ( lst . toArray ( new ItemStack [ lst . size ( ) ] ) ) ; <nl> + } <nl> + + <nl> + + public boolean isSimple ( ) <nl> + + { <nl> + + return isSimple | | this = = field _ 193370 _ a ; <nl> + + } <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch b / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch <nl> index df082d0 . . 34e6831 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java <nl> + + + . . / src - work / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java <nl> - @ @ - 10 , 10 + 10 , 8 @ @ <nl> + @ @ - 10 , 23 + 10 , 25 @ @ <nl> import net . minecraft . util . JsonUtils ; <nl> import net . minecraft . util . NonNullList ; <nl> import net . minecraft . world . World ; <nl> @ @ - 12 , 15 + 12 , 25 @ @ <nl> { <nl> private final ItemStack field _ 77580 _ a ; <nl> public final NonNullList < Ingredient > field _ 77579 _ b ; <nl> - @ @ - 26 , 7 + 24 , 6 @ @ <nl> + private final String field _ 194138 _ c ; <nl> + + private final boolean isSimple ; <nl> + <nl> + public ShapelessRecipes ( String p _ i47500 _ 1 _ , ItemStack p _ i47500 _ 2 _ , NonNullList < Ingredient > p _ i47500 _ 3 _ ) <nl> + { <nl> + this . field _ 194138 _ c = p _ i47500 _ 1 _ ; <nl> + this . field _ 77580 _ a = p _ i47500 _ 2 _ ; <nl> this . field _ 77579 _ b = p _ i47500 _ 3 _ ; <nl> + + boolean simple = true ; <nl> + + for ( Ingredient i : p _ i47500 _ 3 _ ) <nl> + + simple & = i . isSimple ( ) ; <nl> + + this . isSimple = simple ; <nl> } <nl> <nl> - @ SideOnly ( Side . CLIENT ) <nl> public String func _ 193358 _ e ( ) <nl> { <nl> return this . field _ 194138 _ c ; <nl> - @ @ - 50 , 10 + 47 , 7 @ @ <nl> + @ @ - 50 , 10 + 52 , 7 @ @ <nl> { <nl> ItemStack itemstack = p _ 179532 _ 1 _ . func _ 70301 _ a ( i ) ; <nl> <nl> @ @ - 32 , 17 + 42 , 18 @ @ <nl> } <nl> <nl> return nonnulllist ; <nl> - @ @ - 61 , 7 + 55 , 8 @ @ <nl> + @ @ - 61 , 7 + 60 , 9 @ @ <nl> <nl> public boolean func _ 77569 _ a ( InventoryCrafting p _ 77569 _ 1 _ , World p _ 77569 _ 2 _ ) <nl> { <nl> - List < Ingredient > list = Lists . newArrayList ( this . field _ 77579 _ b ) ; <nl> + int ingredientCount = 0 ; <nl> + net . minecraft . client . util . RecipeItemHelper recipeItemHelper = new net . minecraft . client . util . RecipeItemHelper ( ) ; <nl> + + List < ItemStack > inputs = Lists . newArrayList ( ) ; <nl> <nl> for ( int i = 0 ; i < p _ 77569 _ 1 _ . func _ 174923 _ h ( ) ; + + i ) <nl> { <nl> - @ @ - 71 , 27 + 66 , 13 @ @ <nl> + @ @ - 71 , 27 + 72 , 22 @ @ <nl> <nl> if ( ! itemstack . func _ 190926 _ b ( ) ) <nl> { <nl> @ @ - 63 , 17 + 74 , 26 @ @ <nl> - return false ; <nl> - } <nl> + + + ingredientCount ; <nl> - + recipeItemHelper . func _ 194112 _ a ( itemstack ) ; <nl> + + if ( this . isSimple ) <nl> + + recipeItemHelper . func _ 194112 _ a ( itemstack ) ; <nl> + + else <nl> + + inputs . add ( itemstack ) ; <nl> } <nl> } <nl> } <nl> <nl> - return list . isEmpty ( ) ; <nl> - + return ingredientCount = = this . field _ 77579 _ b . size ( ) & & recipeItemHelper . func _ 194116 _ a ( this , null ) ; <nl> + + if ( ingredientCount ! = this . field _ 77579 _ b . size ( ) ) <nl> + + return false ; <nl> + + <nl> + + if ( this . isSimple ) <nl> + + return recipeItemHelper . func _ 194116 _ a ( this , null ) ; <nl> + + <nl> + + return net . minecraftforge . common . util . RecipeMatcher . findMatches ( inputs , this . field _ 77579 _ b ) ! = null ; <nl> } <nl> <nl> public ItemStack func _ 77572 _ b ( InventoryCrafting p _ 77572 _ 1 _ ) <nl> - @ @ - 136 , 7 + 117 , 6 @ @ <nl> + @ @ - 136 , 7 + 132 , 6 @ @ <nl> return nonnulllist ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / crafting / CompoundIngredient . java b / src / main / java / net / minecraftforge / common / crafting / CompoundIngredient . java <nl> index 32a2c02 . . 60909dd 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CompoundIngredient . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CompoundIngredient . java <nl> @ @ - 20 , 11 + 20 , 17 @ @ public class CompoundIngredient extends Ingredient <nl> private Collection < Ingredient > children ; <nl> private ItemStack [ ] stacks ; <nl> private IntList itemIds ; <nl> + private final boolean isSimple ; <nl> <nl> protected CompoundIngredient ( Collection < Ingredient > children ) <nl> { <nl> super ( 0 ) ; <nl> this . children = children ; <nl> + <nl> + boolean simple = true ; <nl> + for ( Ingredient child : children ) <nl> + simple & = child . isSimple ( ) ; <nl> + this . isSimple = simple ; <nl> } <nl> <nl> @ Override <nl> @ @ - 78 , 4 + 84 , 10 @ @ public class CompoundIngredient extends Ingredient <nl> this . stacks = null ; <nl> / / Shouldn ' t need to invalidate children as this is only called form invalidateAll . . <nl> } <nl> + <nl> + @ Override <nl> + public boolean isSimple ( ) <nl> + { <nl> + return isSimple ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / crafting / IngredientNBT . java b / src / main / java / net / minecraftforge / common / crafting / IngredientNBT . java <nl> index 3f7c31e . . 9a85682 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / IngredientNBT . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / IngredientNBT . java <nl> @ @ - 40 , 4 + 40 , 10 @ @ public class IngredientNBT extends Ingredient <nl> / / Can ' t use areItemStacksEqualUsingNBTShareTag because it compares stack size as well <nl> return this . stack . getItem ( ) = = input . getItem ( ) & & this . stack . getItemDamage ( ) = = input . getItemDamage ( ) & & ItemStack . areItemStackShareTagsEqual ( this . stack , input ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean isSimple ( ) <nl> + { <nl> + return false ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / RecipeMatcher . java b / src / main / java / net / minecraftforge / common / util / RecipeMatcher . java <nl> new file mode 100644 <nl> index 0000000 . . c8549ff <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / util / RecipeMatcher . java <nl> @ @ - 0 , 0 + 1 , 162 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . common . util ; <nl> + <nl> + import java . util . BitSet ; <nl> + import java . util . LinkedList ; <nl> + import java . util . List ; <nl> + import java . util . Queue ; <nl> + <nl> + import com . google . common . base . Predicate ; <nl> + <nl> + public class RecipeMatcher <nl> + { <nl> + / * * <nl> + * Attempts to match inputs to the specified tests . In the best way that all inputs are used by one test . <nl> + * Will return null in any of these cases : <nl> + * input / test lengths don ' t match . This is only for matching paired outputs . <nl> + * any input doesn ' t match a test <nl> + * any test doesn ' t match a input <nl> + * If we are unable to determine a proper pair <nl> + * <nl> + * @ return An array mapping inputs to tests . ret [ x ] = y means input [ x ] = test [ y ] <nl> + * / <nl> + public static < T > int [ ] findMatches ( List < T > inputs , List < ? extends Predicate < T > > tests ) <nl> + { <nl> + int elements = inputs . size ( ) ; <nl> + if ( elements ! = tests . size ( ) ) <nl> + return null ; / / There will not be a 1 : 1 mapping of inputs - > tests <nl> + <nl> + int [ ] ret = new int [ elements ] ; <nl> + for ( int x = 0 ; x < elements ; x + + ) <nl> + ret [ x ] = - 1 ; <nl> + <nl> + / / [ UnusedInputs ] [ UnusedIngredients ] [ IngredientMatchMask ] . . . <nl> + BitSet data = new BitSet ( ( elements + 2 ) * elements ) ; <nl> + for ( int x = 0 ; x < elements ; x + + ) <nl> + { <nl> + int matched = 0 ; <nl> + int offset = ( x + 2 ) * elements ; <nl> + Predicate < T > test = tests . get ( x ) ; <nl> + <nl> + for ( int y = 0 ; y < elements ; y + + ) <nl> + { <nl> + if ( data . get ( y ) ) <nl> + continue ; <nl> + <nl> + if ( test . apply ( inputs . get ( y ) ) ) <nl> + { <nl> + data . set ( offset + y ) ; <nl> + matched + + ; <nl> + } <nl> + } <nl> + <nl> + if ( matched = = 0 ) <nl> + return null ; / / We have an test that matched non of the inputs <nl> + <nl> + if ( matched = = 1 ) <nl> + { <nl> + if ( ! claim ( ret , data , x , elements ) ) <nl> + return null ; / / We failed to claim this index , which means it caused something else to go to 0 matches , which makes the whole thing fail <nl> + } <nl> + } <nl> + <nl> + if ( data . nextClearBit ( 0 ) > = elements ) / / All items have been used , which means all tests have a match ! <nl> + return ret ; <nl> + <nl> + / / We should be in a state where multiple tests are satified by multiple inputs . So we need to try a branching recursive test . <nl> + / / However for performance reasons , we should probably make that check a sub - set of the entire graph . <nl> + if ( backtrack ( data , ret , 0 , elements ) ) <nl> + return ret ; <nl> + <nl> + return null ; / / Backtrack failed , no matches , we cry and go home now : ( <nl> + } <nl> + <nl> + / / This is bad . . . need to think of a better cascade , recursion instead of stack ? <nl> + private static boolean claim ( int [ ] ret , BitSet data , int claimed , int elements ) <nl> + { <nl> + Queue < Integer > pending = new LinkedList < Integer > ( ) ; <nl> + pending . add ( claimed ) ; <nl> + <nl> + while ( pending . peek ( ) ! = null ) <nl> + { <nl> + int test = pending . poll ( ) ; <nl> + int offset = ( test + 2 ) * elements ; <nl> + int used = data . nextSetBit ( offset ) - offset ; <nl> + <nl> + if ( used > = elements | | used < 0 ) <nl> + throw new IllegalStateException ( " What ? We matched something , but it wasn ' t set in the range of this test ! Test : " + test + " Used : " + used ) ; <nl> + <nl> + data . set ( used ) ; <nl> + data . set ( elements + test ) ; <nl> + ret [ used ] = test ; <nl> + <nl> + for ( int x = 0 ; x < elements ; x + + ) <nl> + { <nl> + offset = ( x + 2 ) * elements ; <nl> + if ( data . get ( offset + used ) & & ! data . get ( elements + x ) ) <nl> + { <nl> + data . clear ( offset + used ) ; <nl> + int count = 0 ; <nl> + for ( int y = offset ; y < offset + elements ; y + + ) <nl> + if ( data . get ( y ) ) <nl> + count + + ; <nl> + <nl> + if ( count = = 0 ) <nl> + return false ; / / Claiming this caused another test to lose its last match . . <nl> + <nl> + if ( count = = 1 ) <nl> + pending . add ( x ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + return true ; <nl> + } <nl> + <nl> + / / We use recursion here , why ? Because I feel like it . Also because we should only ever be working in data sets < 9 <nl> + private static boolean backtrack ( BitSet data , int [ ] ret , int start , int elements ) <nl> + { <nl> + int test = data . nextClearBit ( elements + start ) - elements ; <nl> + if ( test > = elements ) <nl> + return true ; / / Could not find the next unused test . <nl> + <nl> + if ( test < 0 ) <nl> + throw new IllegalStateException ( " This should never happen , negative test in backtrack ! " ) ; <nl> + <nl> + int offset = ( test + 2 ) * elements ; <nl> + for ( int x = 0 ; x < elements ; x + + ) <nl> + { <nl> + if ( ! data . get ( offset + x ) | | data . get ( x ) ) <nl> + continue ; <nl> + <nl> + data . set ( x ) ; <nl> + <nl> + if ( backtrack ( data , ret , test + 1 , elements ) ) <nl> + { <nl> + ret [ x ] = test ; <nl> + return true ; <nl> + } <nl> + <nl> + data . clear ( x ) ; <nl> + } <nl> + <nl> + return false ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / OreIngredient . java b / src / main / java / net / minecraftforge / oredict / OreIngredient . java <nl> index 11ae517 . . 9a017b9 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / OreIngredient . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / OreIngredient . java <nl> @ @ - 114 , 4 + 114 , 10 @ @ public class OreIngredient extends Ingredient <nl> this . itemIds = null ; <nl> this . array = null ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean isSimple ( ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> index 56d9485 . . db07357 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . common . crafting . CraftingHelper ; <nl> import net . minecraftforge . common . crafting . JsonContext ; <nl> + import net . minecraftforge . common . util . RecipeMatcher ; <nl> import net . minecraftforge . registries . IForgeRegistryEntry ; <nl> <nl> import javax . annotation . Nonnull ; <nl> @ @ - 48 , 6 + 49 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem <nl> protected ItemStack output = ItemStack . EMPTY ; <nl> protected NonNullList < Ingredient > input = NonNullList . create ( ) ; <nl> protected ResourceLocation group ; <nl> + protected boolean isSimple = true ; <nl> <nl> public ShapelessOreRecipe ( ResourceLocation group , Block result , Object . . . recipe ) { this ( group , new ItemStack ( result ) , recipe ) ; } <nl> public ShapelessOreRecipe ( ResourceLocation group , Item result , Object . . . recipe ) { this ( group , new ItemStack ( result ) , recipe ) ; } <nl> @ @ - 56 , 6 + 58 , 8 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem <nl> this . group = group ; <nl> output = result . copy ( ) ; <nl> this . input = input ; <nl> + for ( Ingredient i : input ) <nl> + this . isSimple & = i . isSimple ( ) ; <nl> } <nl> public ShapelessOreRecipe ( ResourceLocation group , @ Nonnull ItemStack result , Object . . . recipe ) <nl> { <nl> @ @ - 67 , 6 + 71 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem <nl> if ( ing ! = null ) <nl> { <nl> input . add ( ing ) ; <nl> + this . isSimple & = ing . isSimple ( ) ; <nl> } <nl> else <nl> { <nl> @ @ - 94 , 6 + 99 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem <nl> { <nl> int ingredientCount = 0 ; <nl> RecipeItemHelper recipeItemHelper = new RecipeItemHelper ( ) ; <nl> + List < ItemStack > items = Lists . newArrayList ( ) ; <nl> <nl> for ( int i = 0 ; i < inv . getSizeInventory ( ) ; + + i ) <nl> { <nl> @ @ - 101 , 11 + 107 , 20 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem <nl> if ( ! itemstack . isEmpty ( ) ) <nl> { <nl> + + ingredientCount ; <nl> - recipeItemHelper . accountStack ( itemstack ) ; <nl> + if ( this . isSimple ) <nl> + recipeItemHelper . accountStack ( itemstack ) ; <nl> + else <nl> + items . add ( itemstack ) ; <nl> } <nl> } <nl> <nl> - return ingredientCount = = this . input . size ( ) & & recipeItemHelper . canCraft ( this , null ) ; <nl> + if ( ingredientCount ! = this . input . size ( ) ) <nl> + return false ; <nl> + <nl> + if ( this . isSimple ) <nl> + return recipeItemHelper . canCraft ( this , null ) ; <nl> + <nl> + return RecipeMatcher . findMatches ( items , this . input ) ! = null ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / java / net / minecraftforge / debug / RecipeTestMod . java b / src / test / java / net / minecraftforge / debug / RecipeTestMod . java <nl> index cc9c48c . . df3e1b8 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / RecipeTestMod . java <nl> + + + b / src / test / java / net / minecraftforge / debug / RecipeTestMod . java <nl> @ @ - 1 , 44 + 1 , 108 @ @ <nl> package net . minecraftforge . debug ; <nl> <nl> + import java . util . Random ; <nl> + <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> import net . minecraft . init . Blocks ; <nl> + import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . item . crafting . IRecipe ; <nl> import net . minecraft . item . crafting . ShapedRecipes ; <nl> + import net . minecraft . util . EnumActionResult ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . common . crafting . CraftingHelper ; <nl> + import net . minecraftforge . debug . OnItemUseFirstTest . CommonProxy ; <nl> + import net . minecraftforge . debug . OnItemUseFirstTest . ItemTest ; <nl> import net . minecraftforge . event . RegistryEvent ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . SidedProxy ; <nl> import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; <nl> import net . minecraftforge . fml . relauncher . FMLLaunchHandler ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> import net . minecraftforge . oredict . ShapedOreRecipe ; <nl> <nl> - @ Mod ( modid = " recipetest " , name = " Recipe test mod " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + @ Mod ( modid = RecipeTestMod . MODID , name = " Recipe test mod " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> public class RecipeTestMod <nl> { <nl> + public static final String MODID = " recipetest " ; <nl> + private static final boolean ENABLED = true ; <nl> + @ SidedProxy <nl> + public static CommonProxy proxy = null ; <nl> + <nl> + <nl> @ Mod . EventHandler <nl> public void preinit ( FMLPreInitializationEvent event ) <nl> { <nl> - MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + if ( ENABLED ) <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> } <nl> <nl> @ SubscribeEvent <nl> public void registerRecipes ( RegistryEvent . Register < IRecipe > event ) <nl> { <nl> - ResourceLocation location1 = new ResourceLocation ( " recipetest " , " dirt " ) ; <nl> + ResourceLocation location1 = new ResourceLocation ( MODID , " dirt " ) ; <nl> ShapedOreRecipe recipe1 = new ShapedOreRecipe ( location1 , new ItemStack ( Blocks . DIAMOND _ BLOCK ) , " DDD " , ' D ' , new ItemStack ( Blocks . DIRT ) ) ; <nl> recipe1 . setRegistryName ( location1 ) ; <nl> event . getRegistry ( ) . register ( recipe1 ) ; <nl> <nl> if ( FMLLaunchHandler . side ( ) = = Side . SERVER ) <nl> { <nl> - ResourceLocation location2 = new ResourceLocation ( " recipetest " , " stone " ) ; <nl> + ResourceLocation location2 = new ResourceLocation ( MODID , " stone " ) ; <nl> CraftingHelper . ShapedPrimer primer1 = CraftingHelper . parseShaped ( " SSS " , ' S ' , new ItemStack ( Blocks . IRON _ BLOCK ) ) ; <nl> ShapedRecipes recipe2 = new ShapedRecipes ( location2 . getResourcePath ( ) , primer1 . width , primer1 . height , primer1 . input , new ItemStack ( Blocks . GOLD _ BLOCK ) ) ; <nl> recipe2 . setRegistryName ( location2 ) ; <nl> event . getRegistry ( ) . register ( recipe2 ) ; <nl> } <nl> } <nl> + <nl> + @ SubscribeEvent <nl> + public void registerItems ( RegistryEvent . Register < Item > event ) <nl> + { <nl> + proxy . registerItem ( event ) ; <nl> + } <nl> + <nl> + public static abstract class CommonProxy <nl> + { <nl> + protected Item TOOL ; <nl> + public void registerItem ( RegistryEvent . Register < Item > event ) <nl> + { <nl> + TOOL = new Item ( ) <nl> + { <nl> + Random RAND = new Random ( ) ; <nl> + @ Override <nl> + public ItemStack getContainerItem ( ItemStack in ) <nl> + { <nl> + ItemStack ret = in . copy ( ) ; <nl> + ret . attemptDamageItem ( 1 , RAND , null ) ; <nl> + return ret ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasContainerItem ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + } . setRegistryName ( MODID , " tool " ) . setMaxDamage ( 10 ) . setCreativeTab ( CreativeTabs . MISC ) . setUnlocalizedName ( " recipetest . tool " ) . setMaxStackSize ( 1 ) ; <nl> + event . getRegistry ( ) . register ( TOOL ) ; <nl> + } <nl> + } <nl> + <nl> + public static final class ServerProxy extends CommonProxy <nl> + { <nl> + } <nl> + <nl> + public static final class ClientProxy extends CommonProxy <nl> + { <nl> + @ Override <nl> + public void registerItem ( RegistryEvent . Register < Item > event ) <nl> + { <nl> + super . registerItem ( event ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( TOOL , 0 , new ModelResourceLocation ( " minecraft : stick # inventory " ) ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ damageable . json b / src / test / resources / assets / forge / recipes / shapeless _ damageable . json <nl> new file mode 100644 <nl> index 0000000 . . b345903 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forge / recipes / shapeless _ damageable . json <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + { <nl> + " type " : " minecraft : crafting _ shapeless " , <nl> + " ingredients " : [ <nl> + { <nl> + " item " : " minecraft : bow " , <nl> + " data " : 32767 <nl> + } <nl> + ] , <nl> + " result " : { <nl> + " item " : " minecraft : wool " , <nl> + " data " : 9 <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / assets / recipetest / recipes / tool _ complex . json b / src / test / resources / assets / recipetest / recipes / tool _ complex . json <nl> new file mode 100644 <nl> index 0000000 . . f2d6c81 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / recipetest / recipes / tool _ complex . json <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + { <nl> + " type " : " minecraft : crafting _ shapeless " , <nl> + " ingredients " : [ <nl> + { <nl> + " item " : " tool " , <nl> + " data " : 32767 <nl> + } , <nl> + { <nl> + " item " : " minecraft : stone " , <nl> + " data " : 32767 <nl> + } , <nl> + { <nl> + " item " : " minecraft : stone " , <nl> + " data " : 0 <nl> + } <nl> + ] , <nl> + " result " : { <nl> + " item " : " minecraft : wool " , <nl> + " data " : 0 <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / recipetest / recipes / tool _ simple . json b / src / test / resources / assets / recipetest / recipes / tool _ simple . json <nl> new file mode 100644 <nl> index 0000000 . . 192c2fa <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / recipetest / recipes / tool _ simple . json <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + { <nl> + " type " : " minecraft : crafting _ shapeless " , <nl> + " ingredients " : [ <nl> + { <nl> + " item " : " tool " , <nl> + " data " : 32767 <nl> + } <nl> + ] , <nl> + " result " : { <nl> + " item " : " minecraft : wool " , <nl> + " data " : 9 <nl> + } <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / EntityTracker . java . patch b / patches / minecraft / net / minecraft / entity / EntityTracker . java . patch 
 index c43b21a . . 863316a 100644 
 - - - a / patches / minecraft / net / minecraft / entity / EntityTracker . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / EntityTracker . java . patch 
 @ @ - 1 , 6 + 1 , 17 @ @ 
 - - - a / net / minecraft / entity / EntityTracker . java 
 + + + b / net / minecraft / entity / EntityTracker . java 
 - @ @ - 296 , 4 + 296 , 18 @ @ 
 + @ @ - 71 , 6 + 71 , 10 @ @ 
 + } 
 + 
 + public void func _ 72786 _ a ( Entity p _ 72786 _ 1 _ ) { 
 + + if ( p _ 72786 _ 1 _ . func _ 200600 _ R ( ) . hasCustomTracking ( ) ) { 
 + + this . func _ 72785 _ a ( p _ 72786 _ 1 _ , p _ 72786 _ 1 _ . func _ 200600 _ R ( ) . getTrackingRange ( ) , p _ 72786 _ 1 _ . func _ 200600 _ R ( ) . getUpdateFrequency ( ) , p _ 72786 _ 1 _ . func _ 200600 _ R ( ) . shouldSendVelocityUpdates ( ) ) ; 
 + + return ; 
 + + } 
 + if ( p _ 72786 _ 1 _ instanceof EntityPlayerMP ) { 
 + this . func _ 72791 _ a ( p _ 72786 _ 1 _ , 512 , 2 ) ; 
 + EntityPlayerMP entityplayermp = ( EntityPlayerMP ) p _ 72786 _ 1 _ ; 
 + @ @ - 296 , 4 + 300 , 18 @ @ 
 } 
 
 } 
 diff - - git a / patches / minecraft / net / minecraft / entity / EntityType . java . patch b / patches / minecraft / net / minecraft / entity / EntityType . java . patch 
 index 2f519d4 . . ccb0158 100644 
 - - - a / patches / minecraft / net / minecraft / entity / EntityType . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / EntityType . java . patch 
 @ @ - 20 , 7 + 20 , 90 @ @ 
 public static final EntityType < EntityAreaEffectCloud > field _ 200788 _ b = func _ 200712 _ a ( " area _ effect _ cloud " , EntityType . Builder . func _ 201757 _ a ( EntityAreaEffectCloud . class , EntityAreaEffectCloud : : new ) ) ; 
 public static final EntityType < EntityArmorStand > field _ 200789 _ c = func _ 200712 _ a ( " armor _ stand " , EntityType . Builder . func _ 201757 _ a ( EntityArmorStand . class , EntityArmorStand : : new ) ) ; 
 public static final EntityType < EntityTippedArrow > field _ 200790 _ d = func _ 200712 _ a ( " arrow " , EntityType . Builder . func _ 201757 _ a ( EntityTippedArrow . class , EntityTippedArrow : : new ) ) ; 
 - @ @ - 411 , 7 + 412 , 7 @ @ 
 + @ @ - 227 , 6 + 228 , 11 @ @ 
 + private String field _ 210762 _ aX ; 
 + @ Nullable 
 + private final Type < ? > field _ 206832 _ aX ; 
 + + private boolean useVanillaSpawning ; 
 + + private Function < net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity , Entity > customSpawnCallback ; 
 + + private boolean hasCustomTracking ; 
 + + private int customTrackingRange , customUpdateFrequency ; 
 + + private boolean customSendVelocityUpdates ; 
 + 
 + public static < T extends Entity > EntityType < T > func _ 200712 _ a ( String p _ 200712 _ 0 _ , EntityType . Builder < T > p _ 200712 _ 1 _ ) { 
 + EntityType < T > entitytype = p _ 200712 _ 1 _ . func _ 206830 _ a ( p _ 200712 _ 0 _ ) ; 
 + @ @ - 244 , 6 + 250 , 18 @ @ 
 + return field _ 200787 _ a . func _ 82594 _ a ( ResourceLocation . func _ 208304 _ a ( p _ 200713 _ 0 _ ) ) ; 
 + } 
 + 
 + + public EntityType ( Class < ? extends T > clazz , Function < ? super World , ? extends T > factory , boolean serializable , boolean summonable , @ Nullable Type < ? > dataFixerType , 
 + + boolean useVanillaSpawning , Function < net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity , Entity > customSpawnCallback , 
 + + boolean hasCustomTracking , int range , int updateFreq , boolean sendVelocityUpdates ) { 
 + + this ( clazz , factory , serializable , summonable , dataFixerType ) ; 
 + + this . useVanillaSpawning = useVanillaSpawning ; 
 + + this . customSpawnCallback = customSpawnCallback ; 
 + + this . hasCustomTracking = hasCustomTracking ; 
 + + this . customTrackingRange = range ; 
 + + this . customUpdateFrequency = updateFreq ; 
 + + this . customSendVelocityUpdates = sendVelocityUpdates ; 
 + + } 
 + + 
 + public EntityType ( Class < ? extends T > p _ i49579 _ 1 _ , Function < ? super World , ? extends T > p _ i49579 _ 2 _ , boolean p _ i49579 _ 3 _ , boolean p _ i49579 _ 4 _ , @ Nullable Type < ? > p _ i49579 _ 5 _ ) { 
 + this . field _ 201761 _ aK = p _ i49579 _ 1 _ ; 
 + this . field _ 200732 _ aK = p _ i49579 _ 2 _ ; 
 + @ @ - 375 , 15 + 393 , 32 @ @ 
 + return p _ 200719 _ 1 _ = = null ? null : p _ 200719 _ 1 _ . func _ 200721 _ a ( p _ 200719 _ 0 _ ) ; 
 + } 
 + 
 + + public boolean hasCustomTracking ( ) { return hasCustomTracking ; } 
 + + public int getTrackingRange ( ) { return customTrackingRange ; } 
 + + public int getUpdateFrequency ( ) { return customUpdateFrequency ; } 
 + + public boolean shouldSendVelocityUpdates ( ) { return customSendVelocityUpdates ; } 
 + + public boolean usesVanillaSpawning ( ) { return useVanillaSpawning ; } 
 + + @ Nullable public Entity handleSpawnMessage ( World world , net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity msg ) 
 + + { 
 + + return customSpawnCallback = = null ? func _ 200721 _ a ( world ) : customSpawnCallback . apply ( msg ) ; 
 + + } 
 + + 
 + public static class Builder < T extends Entity > { 
 + private final Class < ? extends T > field _ 201759 _ a ; 
 + private final Function < ? super World , ? extends T > field _ 200709 _ a ; 
 + private boolean field _ 200710 _ b = true ; 
 + private boolean field _ 200711 _ c = true ; 
 + + private boolean useVanillaSpawning ; 
 + + private Function < net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity , Entity > customSpawnCallback = null ; 
 + + private boolean hasCustomTracking = false ; 
 + + private int trackingRange ; 
 + + private int updateFrequency ; 
 + + private boolean sendVelocityUpdates ; 
 + 
 + private Builder ( Class < ? extends T > p _ i48756 _ 1 _ , Function < ? super World , ? extends T > p _ i48756 _ 2 _ ) { 
 + this . field _ 201759 _ a = p _ i48756 _ 1 _ ; 
 + this . field _ 200709 _ a = p _ i48756 _ 2 _ ; 
 + + this . useVanillaSpawning = field _ 201759 _ a . getName ( ) . startsWith ( " net . minecraft " ) ; 
 + } 
 + 
 + public static < T extends Entity > EntityType . Builder < T > func _ 201757 _ a ( Class < ? extends T > p _ 201757 _ 0 _ , Function < ? super World , ? extends T > p _ 201757 _ 1 _ ) { 
 + @ @ - 406 , 12 + 441 , 26 @ @ 
 + return this ; 
 + } 
 + 
 + + public EntityType . Builder < T > customSpawning ( Function < net . minecraftforge . fml . network . FMLPlayMessages . SpawnEntity , Entity > cb , boolean useVanillaSpawning ) { 
 + + this . customSpawnCallback = cb ; 
 + + this . useVanillaSpawning = useVanillaSpawning ; 
 + + return this ; 
 + + } 
 + + 
 + + public final EntityType . Builder < T > tracker ( int range , int updateFrequency , boolean sendVelocityUpdates ) { 
 + + this . hasCustomTracking = true ; 
 + + this . trackingRange = range ; 
 + + this . updateFrequency = updateFrequency ; 
 + + this . sendVelocityUpdates = sendVelocityUpdates ; 
 + + return this ; 
 + + } 
 + + 
 + public EntityType < T > func _ 206830 _ a ( String p _ 206830 _ 1 _ ) { 
 + Type < ? > type = null ; 
 if ( this . field _ 200710 _ b ) { 
 try { 
 type = DataFixesManager . func _ 210901 _ a ( ) . getSchema ( DataFixUtils . makeKey ( 1519 ) ) . getChoiceType ( TypeReferences . field _ 211298 _ n , p _ 206830 _ 1 _ ) ; 
 @ @ - 29 , 3 + 112 , 12 @ @ 
 if ( SharedConstants . field _ 206244 _ b ) { 
 throw illegalstateexception ; 
 } 
 + @ @ - 420 , 7 + 469 , 7 @ @ 
 + } 
 + } 
 + 
 + - return new EntityType < T > ( this . field _ 201759 _ a , this . field _ 200709 _ a , this . field _ 200710 _ b , this . field _ 200711 _ c , type ) ; 
 + + return new EntityType < T > ( this . field _ 201759 _ a , this . field _ 200709 _ a , this . field _ 200710 _ b , this . field _ 200711 _ c , type , useVanillaSpawning , customSpawnCallback , hasCustomTracking , trackingRange , updateFrequency , sendVelocityUpdates ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IEntityAdditionalSpawnData . java b / src / main / java / net / minecraftforge / fml / common / registry / IEntityAdditionalSpawnData . java 
 index 7524fbd . . dbbc8c6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / IEntityAdditionalSpawnData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / IEntityAdditionalSpawnData . java 
 @ @ - 19 , 7 + 19 , 7 @ @ 
 
 package net . minecraftforge . fml . common . registry ; 
 
 - import io . netty . buffer . ByteBuf ; 
 + import net . minecraft . network . PacketBuffer ; 
 
 / * * 
 * A interface for Entities that need extra information to be communicated 
 @ @ - 33 , 7 + 33 , 7 @ @ public interface IEntityAdditionalSpawnData 
 * 
 * @ param buffer The packet data stream 
 * / 
 - void writeSpawnData ( ByteBuf buffer ) ; 
 + void writeSpawnData ( PacketBuffer buffer ) ; 
 
 / * * 
 * Called by the client when it receives a Entity spawn packet . 
 @ @ - 41 , 5 + 41 , 5 @ @ public interface IEntityAdditionalSpawnData 
 * 
 * @ param additionalData The packet data stream 
 * / 
 - void readSpawnData ( ByteBuf additionalData ) ; 
 + void readSpawnData ( PacketBuffer additionalData ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IThrowableEntity . java b / src / main / java / net / minecraftforge / fml / common / registry / IThrowableEntity . java 
 deleted file mode 100644 
 index b3f2857 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / IThrowableEntity . java 
 + + + / dev / null 
 @ @ - 1 , 41 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2018 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . fml . common . registry ; 
 - 
 - import net . minecraft . entity . Entity ; 
 - 
 - / * * 
 - * This interface should be implemented by an Entity that can be ' thrown ' , like snowballs . 
 - * This was created to mimic ModLoaderMP ' s ' owner ' functionality . 
 - * / 
 - public interface IThrowableEntity 
 - { 
 - / * * 
 - * Gets the entity that threw / created this entity . 
 - * @ return The owner instance , Null if none . 
 - * / 
 - Entity getThrower ( ) ; 
 - 
 - / * * 
 - * Sets the entity that threw / created this entity . 
 - * @ param entity The new thrower / creator . 
 - * / 
 - void setThrower ( Entity entity ) ; 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java 
 new file mode 100644 
 index 0000000 . . 02b04e5 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package net . minecraftforge . fml . network ; 
 + 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . network . simple . SimpleChannel ; 
 + 
 + public class FMLPlayHandler 
 + { 
 + public static final SimpleChannel channel = NetworkRegistry . ChannelBuilder 
 + . named ( new ResourceLocation ( " fml " , " play " ) ) 
 + . clientAcceptedVersions ( a - > true ) 
 + . serverAcceptedVersions ( a - > true ) 
 + . networkProtocolVersion ( ( ) - > NetworkHooks . NETVERSION ) 
 + . simpleChannel ( ) ; 
 + static 
 + { 
 + channel . registerMessage ( 0 , FMLPlayMessages . SpawnEntity . class , FMLPlayMessages . SpawnEntity : : encode , FMLPlayMessages . SpawnEntity : : decode , FMLPlayMessages . SpawnEntity : : handle ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 new file mode 100644 
 index 0000000 . . 7d4fd26 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 @ @ - 0 , 0 + 1 , 136 @ @ 
 + package net . minecraftforge . fml . network ; 
 + 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraft . entity . EntityTracker ; 
 + import net . minecraft . entity . EntityType ; 
 + import net . minecraft . network . PacketBuffer ; 
 + import net . minecraft . util . math . MathHelper ; 
 + import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; 
 + 
 + import java . util . UUID ; 
 + import java . util . function . Supplier ; 
 + 
 + public class FMLPlayMessages 
 + { 
 + public static class SpawnEntity 
 + { 
 + private final Entity entity ; 
 + private final int typeId ; 
 + private final int entityId ; 
 + private final UUID uuid ; 
 + private final double posX , posY , posZ ; 
 + private final byte pitch , yaw ; 
 + private final short velX , velY , velZ ; 
 + private final PacketBuffer buf ; 
 + 
 + SpawnEntity ( Entity e ) 
 + { 
 + this . entity = e ; 
 + this . typeId = EntityType . REGISTRY . getId ( e . getType ( ) ) ; 
 + this . entityId = e . getEntityId ( ) ; 
 + this . uuid = e . getUniqueID ( ) ; 
 + this . posX = e . posX ; 
 + this . posY = e . posY ; 
 + this . posZ = e . posZ ; 
 + this . pitch = ( byte ) MathHelper . floor ( e . rotationPitch * 256 . 0F / 360 . 0F ) ; 
 + this . yaw = ( byte ) MathHelper . floor ( e . rotationYaw * 256 . 0F / 360 . 0F ) ; 
 + this . velX = ( short ) ( MathHelper . clamp ( e . motionX , - 3 . 9D , 3 . 9D ) * 8000 . 0D ) ; 
 + this . velY = ( short ) ( MathHelper . clamp ( e . motionY , - 3 . 9D , 3 . 9D ) * 8000 . 0D ) ; 
 + this . velZ = ( short ) ( MathHelper . clamp ( e . motionZ , - 3 . 9D , 3 . 9D ) * 8000 . 0D ) ; 
 + this . buf = null ; 
 + } 
 + 
 + private SpawnEntity ( int typeId , int entityId , UUID uuid , double posX , double posY , double posZ , 
 + byte pitch , byte yaw , short velX , short velY , short velZ , PacketBuffer buf ) 
 + { 
 + this . entity = null ; 
 + this . typeId = typeId ; 
 + this . entityId = entityId ; 
 + this . uuid = uuid ; 
 + this . posX = posX ; 
 + this . posY = posY ; 
 + this . posZ = posZ ; 
 + this . pitch = pitch ; 
 + this . yaw = yaw ; 
 + this . velX = velX ; 
 + this . velY = velY ; 
 + this . velZ = velZ ; 
 + this . buf = buf ; 
 + } 
 + 
 + public static void encode ( SpawnEntity msg , PacketBuffer buf ) 
 + { 
 + buf . writeVarInt ( msg . typeId ) ; 
 + buf . writeInt ( msg . entityId ) ; 
 + buf . writeLong ( msg . uuid . getMostSignificantBits ( ) ) ; 
 + buf . writeLong ( msg . uuid . getLeastSignificantBits ( ) ) ; 
 + buf . writeDouble ( msg . posX ) ; 
 + buf . writeDouble ( msg . posY ) ; 
 + buf . writeDouble ( msg . posZ ) ; 
 + buf . writeByte ( msg . pitch ) ; 
 + buf . writeByte ( msg . yaw ) ; 
 + buf . writeShort ( msg . velX ) ; 
 + buf . writeShort ( msg . velY ) ; 
 + buf . writeShort ( msg . velZ ) ; 
 + if ( msg . entity instanceof IEntityAdditionalSpawnData ) 
 + { 
 + ( ( IEntityAdditionalSpawnData ) msg . entity ) . writeSpawnData ( buf ) ; 
 + } 
 + } 
 + 
 + public static SpawnEntity decode ( PacketBuffer buf ) 
 + { 
 + return new SpawnEntity ( 
 + buf . readVarInt ( ) , 
 + buf . readInt ( ) , 
 + new UUID ( buf . readLong ( ) , buf . readLong ( ) ) , 
 + buf . readDouble ( ) , buf . readDouble ( ) , buf . readDouble ( ) , 
 + buf . readByte ( ) , buf . readByte ( ) , 
 + buf . readShort ( ) , buf . readShort ( ) , buf . readShort ( ) , 
 + buf 
 + ) ; 
 + } 
 + 
 + public static void handle ( SpawnEntity msg , Supplier < NetworkEvent . Context > ctx ) 
 + { 
 + ctx . get ( ) . enqueueWork ( ( ) - > { 
 + EntityType < ? > type = EntityType . REGISTRY . get ( msg . typeId ) ; 
 + if ( type = = null ) 
 + { 
 + throw new RuntimeException ( String . format ( " Could not spawn entity ( id % d ) with unknown type at ( % f , % f , % f ) " , msg . entityId , msg . posX , msg . posY , msg . posZ ) ) ; 
 + } 
 + 
 + Entity e = type . handleSpawnMessage ( Minecraft . getInstance ( ) . world , msg ) ; 
 + if ( e = = null ) 
 + { 
 + return ; 
 + } 
 + 
 + EntityTracker . updateServerPosition ( e , msg . posX , msg . posY , msg . posZ ) ; 
 + e . rotationPitch = ( float ) ( msg . pitch * 360 ) / 256 . 0F ; 
 + e . rotationYaw = ( float ) ( msg . yaw * 360 ) / 256 . 0F ; 
 + 
 + Entity [ ] parts = e . getParts ( ) ; 
 + if ( parts ! = null ) 
 + { 
 + int offset = msg . entityId - e . getEntityId ( ) ; 
 + for ( Entity part : parts ) 
 + { 
 + part . setEntityId ( part . getEntityId ( ) + offset ) ; 
 + } 
 + } 
 + 
 + e . setEntityId ( msg . entityId ) ; 
 + e . setUniqueId ( msg . uuid ) ; 
 + Minecraft . getInstance ( ) . world . addEntityToWorld ( msg . entityId , e ) ; 
 + e . setVelocity ( msg . velX / 8000 . 0 , msg . velY / 8000 . 0 , msg . velZ / 8000 . 0 ) ; 
 + if ( e instanceof IEntityAdditionalSpawnData ) 
 + { 
 + ( ( IEntityAdditionalSpawnData ) e ) . readSpawnData ( msg . buf ) ; 
 + } 
 + } ) ; 
 + ctx . get ( ) . setPacketHandled ( true ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 index ea4e03d . . 76948c2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 @ @ - 52 , 6 + 52 , 10 @ @ public class NetworkHooks 
 
 public static Packet < ? > getEntitySpawningPacket ( Entity entity ) 
 { 
 + if ( ! entity . getType ( ) . usesVanillaSpawning ( ) ) 
 + { 
 + return FMLPlayHandler . channel . toVanillaPacket ( new FMLPlayMessages . SpawnEntity ( entity ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; 
 + } 
 return null ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java b / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java 
 index ab0dfa1 . . 01697b5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java 
 @ @ - 83 , 8 + 83 , 12 @ @ public class SimpleChannel 
 
 public < MSG > void sendTo ( MSG message , NetworkManager manager , NetworkDirection direction ) 
 { 
 - ICustomPacket < Packet < ? > > payload = direction . buildPacket ( toBuffer ( message ) , instance . getChannelName ( ) ) ; 
 - manager . sendPacket ( payload . getThis ( ) ) ; 
 + manager . sendPacket ( toVanillaPacket ( message , direction ) ) ; 
 + } 
 + 
 + public < MSG > Packet < ? > toVanillaPacket ( MSG message , NetworkDirection direction ) 
 + { 
 + return direction . buildPacket ( toBuffer ( message ) , instance . getChannelName ( ) ) . getThis ( ) ; 
 } 
 
 public < MSG > void reply ( MSG msgToReply , NetworkEvent . Context context )

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch 
 index 697a870 . . f9d344f 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch 
 @ @ - 1 , 6 + 1 , 11 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / item / crafting / Ingredient . java 
 + + + . . / src - work / minecraft / net / minecraft / item / crafting / Ingredient . java 
 - @ @ - 13 , 6 + 13 , 8 @ @ 
 + @ @ - 8 , 11 + 8 , 11 @ @ 
 + import net . minecraft . client . util . RecipeItemHelper ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + - import net . minecraftforge . fml . relauncher . Side ; 
 + - import net . minecraftforge . fml . relauncher . SideOnly ; 
 
 public class Ingredient implements Predicate < ItemStack > 
 { 
 @ @ - 9 , 12 + 14 , 13 @ @ 
 public static final Ingredient field _ 193370 _ a = new Ingredient ( new ItemStack [ 0 ] ) 
 { 
 public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) 
 - @ @ - 21 , 17 + 23 , 34 @ @ 
 + @ @ - 21 , 17 + 21 , 41 @ @ 
 } 
 } ; 
 private final ItemStack [ ] field _ 193371 _ b ; 
 + private final ItemStack [ ] matchingStacksExploded ; 
 private IntList field _ 194140 _ c ; 
 + + private final boolean isSimple ; 
 
 + protected Ingredient ( int size ) 
 + { 
 @ @ - 23 , 6 + 29 , 7 @ @ 
 + 
 protected Ingredient ( ItemStack . . . p _ i47503 _ 1 _ ) 
 { 
 + + boolean simple = true ; 
 this . field _ 193371 _ b = p _ i47503 _ 1 _ ; 
 + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; 
 + for ( ItemStack s : p _ i47503 _ 1 _ ) 
 @ @ - 30 , 11 + 37 , 16 @ @ 
 + if ( s . func _ 190926 _ b ( ) ) 
 + continue ; 
 + if ( s . func _ 77960 _ j ( ) = = net . minecraftforge . oredict . OreDictionary . WILDCARD _ VALUE ) 
 + + { 
 + + if ( s . func _ 77973 _ b ( ) . func _ 77645 _ m ( ) ) 
 + + simple = false ; 
 + s . func _ 77973 _ b ( ) . func _ 150895 _ a ( net . minecraft . creativetab . CreativeTabs . field _ 78027 _ g , lst ) ; 
 + + } 
 + else 
 + lst . add ( s ) ; 
 + } 
 + this . matchingStacksExploded = lst . toArray ( new ItemStack [ lst . size ( ) ] ) ; 
 + + this . isSimple = simple & & this . matchingStacksExploded . length > 0 ; 
 + Ingredient . INSTANCES . add ( this ) ; 
 } 
 
 @ @ - 46 , 7 + 58 , 7 @ @ 
 } 
 
 public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) 
 - @ @ - 63 , 9 + 82 , 9 @ @ 
 + @ @ - 63 , 9 + 87 , 9 @ @ 
 { 
 if ( this . field _ 194140 _ c = = null ) 
 { 
 @ @ - 58 , 7 + 70 , 7 @ @ 
 { 
 this . field _ 194140 _ c . add ( RecipeItemHelper . func _ 194113 _ b ( itemstack ) ) ; 
 } 
 - @ @ - 76 , 6 + 95 , 18 @ @ 
 + @ @ - 76 , 6 + 100 , 18 @ @ 
 return this . field _ 194140 _ c ; 
 } 
 
 @ @ - 77 , 7 + 89 , 7 @ @ 
 public static Ingredient func _ 193367 _ a ( Item p _ 193367 _ 0 _ ) 
 { 
 return func _ 193369 _ a ( new ItemStack ( p _ 193367 _ 0 _ , 1 , 32767 ) ) ; 
 - @ @ - 108 , 4 + 139 , 17 @ @ 
 + @ @ - 108 , 4 + 144 , 22 @ @ 
 
 return field _ 193370 _ a ; 
 } 
 @ @ - 94 , 4 + 106 , 9 @ @ 
 + } 
 + return new Ingredient ( lst . toArray ( new ItemStack [ lst . size ( ) ] ) ) ; 
 + } 
 + + 
 + + public boolean isSimple ( ) 
 + + { 
 + + return isSimple | | this = = field _ 193370 _ a ; 
 + + } 
 } 
 diff - - git a / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch b / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch 
 index df082d0 . . 34e6831 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java 
 + + + . . / src - work / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java 
 - @ @ - 10 , 10 + 10 , 8 @ @ 
 + @ @ - 10 , 23 + 10 , 25 @ @ 
 import net . minecraft . util . JsonUtils ; 
 import net . minecraft . util . NonNullList ; 
 import net . minecraft . world . World ; 
 @ @ - 12 , 15 + 12 , 25 @ @ 
 { 
 private final ItemStack field _ 77580 _ a ; 
 public final NonNullList < Ingredient > field _ 77579 _ b ; 
 - @ @ - 26 , 7 + 24 , 6 @ @ 
 + private final String field _ 194138 _ c ; 
 + + private final boolean isSimple ; 
 + 
 + public ShapelessRecipes ( String p _ i47500 _ 1 _ , ItemStack p _ i47500 _ 2 _ , NonNullList < Ingredient > p _ i47500 _ 3 _ ) 
 + { 
 + this . field _ 194138 _ c = p _ i47500 _ 1 _ ; 
 + this . field _ 77580 _ a = p _ i47500 _ 2 _ ; 
 this . field _ 77579 _ b = p _ i47500 _ 3 _ ; 
 + + boolean simple = true ; 
 + + for ( Ingredient i : p _ i47500 _ 3 _ ) 
 + + simple & = i . isSimple ( ) ; 
 + + this . isSimple = simple ; 
 } 
 
 - @ SideOnly ( Side . CLIENT ) 
 public String func _ 193358 _ e ( ) 
 { 
 return this . field _ 194138 _ c ; 
 - @ @ - 50 , 10 + 47 , 7 @ @ 
 + @ @ - 50 , 10 + 52 , 7 @ @ 
 { 
 ItemStack itemstack = p _ 179532 _ 1 _ . func _ 70301 _ a ( i ) ; 
 
 @ @ - 32 , 17 + 42 , 18 @ @ 
 } 
 
 return nonnulllist ; 
 - @ @ - 61 , 7 + 55 , 8 @ @ 
 + @ @ - 61 , 7 + 60 , 9 @ @ 
 
 public boolean func _ 77569 _ a ( InventoryCrafting p _ 77569 _ 1 _ , World p _ 77569 _ 2 _ ) 
 { 
 - List < Ingredient > list = Lists . newArrayList ( this . field _ 77579 _ b ) ; 
 + int ingredientCount = 0 ; 
 + net . minecraft . client . util . RecipeItemHelper recipeItemHelper = new net . minecraft . client . util . RecipeItemHelper ( ) ; 
 + + List < ItemStack > inputs = Lists . newArrayList ( ) ; 
 
 for ( int i = 0 ; i < p _ 77569 _ 1 _ . func _ 174923 _ h ( ) ; + + i ) 
 { 
 - @ @ - 71 , 27 + 66 , 13 @ @ 
 + @ @ - 71 , 27 + 72 , 22 @ @ 
 
 if ( ! itemstack . func _ 190926 _ b ( ) ) 
 { 
 @ @ - 63 , 17 + 74 , 26 @ @ 
 - return false ; 
 - } 
 + + + ingredientCount ; 
 - + recipeItemHelper . func _ 194112 _ a ( itemstack ) ; 
 + + if ( this . isSimple ) 
 + + recipeItemHelper . func _ 194112 _ a ( itemstack ) ; 
 + + else 
 + + inputs . add ( itemstack ) ; 
 } 
 } 
 } 
 
 - return list . isEmpty ( ) ; 
 - + return ingredientCount = = this . field _ 77579 _ b . size ( ) & & recipeItemHelper . func _ 194116 _ a ( this , null ) ; 
 + + if ( ingredientCount ! = this . field _ 77579 _ b . size ( ) ) 
 + + return false ; 
 + + 
 + + if ( this . isSimple ) 
 + + return recipeItemHelper . func _ 194116 _ a ( this , null ) ; 
 + + 
 + + return net . minecraftforge . common . util . RecipeMatcher . findMatches ( inputs , this . field _ 77579 _ b ) ! = null ; 
 } 
 
 public ItemStack func _ 77572 _ b ( InventoryCrafting p _ 77572 _ 1 _ ) 
 - @ @ - 136 , 7 + 117 , 6 @ @ 
 + @ @ - 136 , 7 + 132 , 6 @ @ 
 return nonnulllist ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / crafting / CompoundIngredient . java b / src / main / java / net / minecraftforge / common / crafting / CompoundIngredient . java 
 index 32a2c02 . . 60909dd 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CompoundIngredient . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CompoundIngredient . java 
 @ @ - 20 , 11 + 20 , 17 @ @ public class CompoundIngredient extends Ingredient 
 private Collection < Ingredient > children ; 
 private ItemStack [ ] stacks ; 
 private IntList itemIds ; 
 + private final boolean isSimple ; 
 
 protected CompoundIngredient ( Collection < Ingredient > children ) 
 { 
 super ( 0 ) ; 
 this . children = children ; 
 + 
 + boolean simple = true ; 
 + for ( Ingredient child : children ) 
 + simple & = child . isSimple ( ) ; 
 + this . isSimple = simple ; 
 } 
 
 @ Override 
 @ @ - 78 , 4 + 84 , 10 @ @ public class CompoundIngredient extends Ingredient 
 this . stacks = null ; 
 / / Shouldn ' t need to invalidate children as this is only called form invalidateAll . . 
 } 
 + 
 + @ Override 
 + public boolean isSimple ( ) 
 + { 
 + return isSimple ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / crafting / IngredientNBT . java b / src / main / java / net / minecraftforge / common / crafting / IngredientNBT . java 
 index 3f7c31e . . 9a85682 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / IngredientNBT . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / IngredientNBT . java 
 @ @ - 40 , 4 + 40 , 10 @ @ public class IngredientNBT extends Ingredient 
 / / Can ' t use areItemStacksEqualUsingNBTShareTag because it compares stack size as well 
 return this . stack . getItem ( ) = = input . getItem ( ) & & this . stack . getItemDamage ( ) = = input . getItemDamage ( ) & & ItemStack . areItemStackShareTagsEqual ( this . stack , input ) ; 
 } 
 + 
 + @ Override 
 + public boolean isSimple ( ) 
 + { 
 + return false ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / util / RecipeMatcher . java b / src / main / java / net / minecraftforge / common / util / RecipeMatcher . java 
 new file mode 100644 
 index 0000000 . . c8549ff 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / util / RecipeMatcher . java 
 @ @ - 0 , 0 + 1 , 162 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . common . util ; 
 + 
 + import java . util . BitSet ; 
 + import java . util . LinkedList ; 
 + import java . util . List ; 
 + import java . util . Queue ; 
 + 
 + import com . google . common . base . Predicate ; 
 + 
 + public class RecipeMatcher 
 + { 
 + / * * 
 + * Attempts to match inputs to the specified tests . In the best way that all inputs are used by one test . 
 + * Will return null in any of these cases : 
 + * input / test lengths don ' t match . This is only for matching paired outputs . 
 + * any input doesn ' t match a test 
 + * any test doesn ' t match a input 
 + * If we are unable to determine a proper pair 
 + * 
 + * @ return An array mapping inputs to tests . ret [ x ] = y means input [ x ] = test [ y ] 
 + * / 
 + public static < T > int [ ] findMatches ( List < T > inputs , List < ? extends Predicate < T > > tests ) 
 + { 
 + int elements = inputs . size ( ) ; 
 + if ( elements ! = tests . size ( ) ) 
 + return null ; / / There will not be a 1 : 1 mapping of inputs - > tests 
 + 
 + int [ ] ret = new int [ elements ] ; 
 + for ( int x = 0 ; x < elements ; x + + ) 
 + ret [ x ] = - 1 ; 
 + 
 + / / [ UnusedInputs ] [ UnusedIngredients ] [ IngredientMatchMask ] . . . 
 + BitSet data = new BitSet ( ( elements + 2 ) * elements ) ; 
 + for ( int x = 0 ; x < elements ; x + + ) 
 + { 
 + int matched = 0 ; 
 + int offset = ( x + 2 ) * elements ; 
 + Predicate < T > test = tests . get ( x ) ; 
 + 
 + for ( int y = 0 ; y < elements ; y + + ) 
 + { 
 + if ( data . get ( y ) ) 
 + continue ; 
 + 
 + if ( test . apply ( inputs . get ( y ) ) ) 
 + { 
 + data . set ( offset + y ) ; 
 + matched + + ; 
 + } 
 + } 
 + 
 + if ( matched = = 0 ) 
 + return null ; / / We have an test that matched non of the inputs 
 + 
 + if ( matched = = 1 ) 
 + { 
 + if ( ! claim ( ret , data , x , elements ) ) 
 + return null ; / / We failed to claim this index , which means it caused something else to go to 0 matches , which makes the whole thing fail 
 + } 
 + } 
 + 
 + if ( data . nextClearBit ( 0 ) > = elements ) / / All items have been used , which means all tests have a match ! 
 + return ret ; 
 + 
 + / / We should be in a state where multiple tests are satified by multiple inputs . So we need to try a branching recursive test . 
 + / / However for performance reasons , we should probably make that check a sub - set of the entire graph . 
 + if ( backtrack ( data , ret , 0 , elements ) ) 
 + return ret ; 
 + 
 + return null ; / / Backtrack failed , no matches , we cry and go home now : ( 
 + } 
 + 
 + / / This is bad . . . need to think of a better cascade , recursion instead of stack ? 
 + private static boolean claim ( int [ ] ret , BitSet data , int claimed , int elements ) 
 + { 
 + Queue < Integer > pending = new LinkedList < Integer > ( ) ; 
 + pending . add ( claimed ) ; 
 + 
 + while ( pending . peek ( ) ! = null ) 
 + { 
 + int test = pending . poll ( ) ; 
 + int offset = ( test + 2 ) * elements ; 
 + int used = data . nextSetBit ( offset ) - offset ; 
 + 
 + if ( used > = elements | | used < 0 ) 
 + throw new IllegalStateException ( " What ? We matched something , but it wasn ' t set in the range of this test ! Test : " + test + " Used : " + used ) ; 
 + 
 + data . set ( used ) ; 
 + data . set ( elements + test ) ; 
 + ret [ used ] = test ; 
 + 
 + for ( int x = 0 ; x < elements ; x + + ) 
 + { 
 + offset = ( x + 2 ) * elements ; 
 + if ( data . get ( offset + used ) & & ! data . get ( elements + x ) ) 
 + { 
 + data . clear ( offset + used ) ; 
 + int count = 0 ; 
 + for ( int y = offset ; y < offset + elements ; y + + ) 
 + if ( data . get ( y ) ) 
 + count + + ; 
 + 
 + if ( count = = 0 ) 
 + return false ; / / Claiming this caused another test to lose its last match . . 
 + 
 + if ( count = = 1 ) 
 + pending . add ( x ) ; 
 + } 
 + } 
 + } 
 + 
 + return true ; 
 + } 
 + 
 + / / We use recursion here , why ? Because I feel like it . Also because we should only ever be working in data sets < 9 
 + private static boolean backtrack ( BitSet data , int [ ] ret , int start , int elements ) 
 + { 
 + int test = data . nextClearBit ( elements + start ) - elements ; 
 + if ( test > = elements ) 
 + return true ; / / Could not find the next unused test . 
 + 
 + if ( test < 0 ) 
 + throw new IllegalStateException ( " This should never happen , negative test in backtrack ! " ) ; 
 + 
 + int offset = ( test + 2 ) * elements ; 
 + for ( int x = 0 ; x < elements ; x + + ) 
 + { 
 + if ( ! data . get ( offset + x ) | | data . get ( x ) ) 
 + continue ; 
 + 
 + data . set ( x ) ; 
 + 
 + if ( backtrack ( data , ret , test + 1 , elements ) ) 
 + { 
 + ret [ x ] = test ; 
 + return true ; 
 + } 
 + 
 + data . clear ( x ) ; 
 + } 
 + 
 + return false ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / oredict / OreIngredient . java b / src / main / java / net / minecraftforge / oredict / OreIngredient . java 
 index 11ae517 . . 9a017b9 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / OreIngredient . java 
 + + + b / src / main / java / net / minecraftforge / oredict / OreIngredient . java 
 @ @ - 114 , 4 + 114 , 10 @ @ public class OreIngredient extends Ingredient 
 this . itemIds = null ; 
 this . array = null ; 
 } 
 + 
 + @ Override 
 + public boolean isSimple ( ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 index 56d9485 . . db07357 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . common . crafting . CraftingHelper ; 
 import net . minecraftforge . common . crafting . JsonContext ; 
 + import net . minecraftforge . common . util . RecipeMatcher ; 
 import net . minecraftforge . registries . IForgeRegistryEntry ; 
 
 import javax . annotation . Nonnull ; 
 @ @ - 48 , 6 + 49 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem 
 protected ItemStack output = ItemStack . EMPTY ; 
 protected NonNullList < Ingredient > input = NonNullList . create ( ) ; 
 protected ResourceLocation group ; 
 + protected boolean isSimple = true ; 
 
 public ShapelessOreRecipe ( ResourceLocation group , Block result , Object . . . recipe ) { this ( group , new ItemStack ( result ) , recipe ) ; } 
 public ShapelessOreRecipe ( ResourceLocation group , Item result , Object . . . recipe ) { this ( group , new ItemStack ( result ) , recipe ) ; } 
 @ @ - 56 , 6 + 58 , 8 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem 
 this . group = group ; 
 output = result . copy ( ) ; 
 this . input = input ; 
 + for ( Ingredient i : input ) 
 + this . isSimple & = i . isSimple ( ) ; 
 } 
 public ShapelessOreRecipe ( ResourceLocation group , @ Nonnull ItemStack result , Object . . . recipe ) 
 { 
 @ @ - 67 , 6 + 71 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem 
 if ( ing ! = null ) 
 { 
 input . add ( ing ) ; 
 + this . isSimple & = ing . isSimple ( ) ; 
 } 
 else 
 { 
 @ @ - 94 , 6 + 99 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem 
 { 
 int ingredientCount = 0 ; 
 RecipeItemHelper recipeItemHelper = new RecipeItemHelper ( ) ; 
 + List < ItemStack > items = Lists . newArrayList ( ) ; 
 
 for ( int i = 0 ; i < inv . getSizeInventory ( ) ; + + i ) 
 { 
 @ @ - 101 , 11 + 107 , 20 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem 
 if ( ! itemstack . isEmpty ( ) ) 
 { 
 + + ingredientCount ; 
 - recipeItemHelper . accountStack ( itemstack ) ; 
 + if ( this . isSimple ) 
 + recipeItemHelper . accountStack ( itemstack ) ; 
 + else 
 + items . add ( itemstack ) ; 
 } 
 } 
 
 - return ingredientCount = = this . input . size ( ) & & recipeItemHelper . canCraft ( this , null ) ; 
 + if ( ingredientCount ! = this . input . size ( ) ) 
 + return false ; 
 + 
 + if ( this . isSimple ) 
 + return recipeItemHelper . canCraft ( this , null ) ; 
 + 
 + return RecipeMatcher . findMatches ( items , this . input ) ! = null ; 
 } 
 
 @ Override 
 diff - - git a / src / test / java / net / minecraftforge / debug / RecipeTestMod . java b / src / test / java / net / minecraftforge / debug / RecipeTestMod . java 
 index cc9c48c . . df3e1b8 100644 
 - - - a / src / test / java / net / minecraftforge / debug / RecipeTestMod . java 
 + + + b / src / test / java / net / minecraftforge / debug / RecipeTestMod . java 
 @ @ - 1 , 44 + 1 , 108 @ @ 
 package net . minecraftforge . debug ; 
 
 + import java . util . Random ; 
 + 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 import net . minecraft . init . Blocks ; 
 + import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . item . crafting . IRecipe ; 
 import net . minecraft . item . crafting . ShapedRecipes ; 
 + import net . minecraft . util . EnumActionResult ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . common . crafting . CraftingHelper ; 
 + import net . minecraftforge . debug . OnItemUseFirstTest . CommonProxy ; 
 + import net . minecraftforge . debug . OnItemUseFirstTest . ItemTest ; 
 import net . minecraftforge . event . RegistryEvent ; 
 import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . SidedProxy ; 
 import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; 
 import net . minecraftforge . fml . relauncher . FMLLaunchHandler ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 import net . minecraftforge . oredict . ShapedOreRecipe ; 
 
 - @ Mod ( modid = " recipetest " , name = " Recipe test mod " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + @ Mod ( modid = RecipeTestMod . MODID , name = " Recipe test mod " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 public class RecipeTestMod 
 { 
 + public static final String MODID = " recipetest " ; 
 + private static final boolean ENABLED = true ; 
 + @ SidedProxy 
 + public static CommonProxy proxy = null ; 
 + 
 + 
 @ Mod . EventHandler 
 public void preinit ( FMLPreInitializationEvent event ) 
 { 
 - MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + if ( ENABLED ) 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 } 
 
 @ SubscribeEvent 
 public void registerRecipes ( RegistryEvent . Register < IRecipe > event ) 
 { 
 - ResourceLocation location1 = new ResourceLocation ( " recipetest " , " dirt " ) ; 
 + ResourceLocation location1 = new ResourceLocation ( MODID , " dirt " ) ; 
 ShapedOreRecipe recipe1 = new ShapedOreRecipe ( location1 , new ItemStack ( Blocks . DIAMOND _ BLOCK ) , " DDD " , ' D ' , new ItemStack ( Blocks . DIRT ) ) ; 
 recipe1 . setRegistryName ( location1 ) ; 
 event . getRegistry ( ) . register ( recipe1 ) ; 
 
 if ( FMLLaunchHandler . side ( ) = = Side . SERVER ) 
 { 
 - ResourceLocation location2 = new ResourceLocation ( " recipetest " , " stone " ) ; 
 + ResourceLocation location2 = new ResourceLocation ( MODID , " stone " ) ; 
 CraftingHelper . ShapedPrimer primer1 = CraftingHelper . parseShaped ( " SSS " , ' S ' , new ItemStack ( Blocks . IRON _ BLOCK ) ) ; 
 ShapedRecipes recipe2 = new ShapedRecipes ( location2 . getResourcePath ( ) , primer1 . width , primer1 . height , primer1 . input , new ItemStack ( Blocks . GOLD _ BLOCK ) ) ; 
 recipe2 . setRegistryName ( location2 ) ; 
 event . getRegistry ( ) . register ( recipe2 ) ; 
 } 
 } 
 + 
 + @ SubscribeEvent 
 + public void registerItems ( RegistryEvent . Register < Item > event ) 
 + { 
 + proxy . registerItem ( event ) ; 
 + } 
 + 
 + public static abstract class CommonProxy 
 + { 
 + protected Item TOOL ; 
 + public void registerItem ( RegistryEvent . Register < Item > event ) 
 + { 
 + TOOL = new Item ( ) 
 + { 
 + Random RAND = new Random ( ) ; 
 + @ Override 
 + public ItemStack getContainerItem ( ItemStack in ) 
 + { 
 + ItemStack ret = in . copy ( ) ; 
 + ret . attemptDamageItem ( 1 , RAND , null ) ; 
 + return ret ; 
 + } 
 + 
 + @ Override 
 + public boolean hasContainerItem ( ) 
 + { 
 + return true ; 
 + } 
 + } . setRegistryName ( MODID , " tool " ) . setMaxDamage ( 10 ) . setCreativeTab ( CreativeTabs . MISC ) . setUnlocalizedName ( " recipetest . tool " ) . setMaxStackSize ( 1 ) ; 
 + event . getRegistry ( ) . register ( TOOL ) ; 
 + } 
 + } 
 + 
 + public static final class ServerProxy extends CommonProxy 
 + { 
 + } 
 + 
 + public static final class ClientProxy extends CommonProxy 
 + { 
 + @ Override 
 + public void registerItem ( RegistryEvent . Register < Item > event ) 
 + { 
 + super . registerItem ( event ) ; 
 + ModelLoader . setCustomModelResourceLocation ( TOOL , 0 , new ModelResourceLocation ( " minecraft : stick # inventory " ) ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ damageable . json b / src / test / resources / assets / forge / recipes / shapeless _ damageable . json 
 new file mode 100644 
 index 0000000 . . b345903 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forge / recipes / shapeless _ damageable . json 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + { 
 + " type " : " minecraft : crafting _ shapeless " , 
 + " ingredients " : [ 
 + { 
 + " item " : " minecraft : bow " , 
 + " data " : 32767 
 + } 
 + ] , 
 + " result " : { 
 + " item " : " minecraft : wool " , 
 + " data " : 9 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / assets / recipetest / recipes / tool _ complex . json b / src / test / resources / assets / recipetest / recipes / tool _ complex . json 
 new file mode 100644 
 index 0000000 . . f2d6c81 
 - - - / dev / null 
 + + + b / src / test / resources / assets / recipetest / recipes / tool _ complex . json 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + { 
 + " type " : " minecraft : crafting _ shapeless " , 
 + " ingredients " : [ 
 + { 
 + " item " : " tool " , 
 + " data " : 32767 
 + } , 
 + { 
 + " item " : " minecraft : stone " , 
 + " data " : 32767 
 + } , 
 + { 
 + " item " : " minecraft : stone " , 
 + " data " : 0 
 + } 
 + ] , 
 + " result " : { 
 + " item " : " minecraft : wool " , 
 + " data " : 0 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / recipetest / recipes / tool _ simple . json b / src / test / resources / assets / recipetest / recipes / tool _ simple . json 
 new file mode 100644 
 index 0000000 . . 192c2fa 
 - - - / dev / null 
 + + + b / src / test / resources / assets / recipetest / recipes / tool _ simple . json 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + { 
 + " type " : " minecraft : crafting _ shapeless " , 
 + " ingredients " : [ 
 + { 
 + " item " : " tool " , 
 + " data " : 32767 
 + } 
 + ] , 
 + " result " : { 
 + " item " : " minecraft : wool " , 
 + " data " : 9 
 + } 
 + }
