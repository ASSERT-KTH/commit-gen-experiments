BLEU SCORE: 0.030098043843528283

TEST MSG: Attempt to fix the slow loading problem . Instead of forcing the main thread to wait around
GENERATED MSG: AllowPlayerLogins only after the server has completed the core init tasks . Closes # 372

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> index 5a41a72 . . 53b7f3c 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 1003 , 9 + 1003 , 11 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> public void processWindowMessages ( ) <nl> { <nl> / / workaround for windows requiring messages being processed on the main thread <nl> - if ( LWJGLUtil . getPlatform ( ) = = LWJGLUtil . PLATFORM _ WINDOWS ) <nl> - { <nl> - Display . processMessages ( ) ; <nl> - } <nl> + if ( LWJGLUtil . getPlatform ( ) ! = LWJGLUtil . PLATFORM _ WINDOWS ) return ; <nl> + / / If we can ' t grab the mutex , the update call is blocked , probably in native code , just skip it and carry on <nl> + / / We ' ll get another go next time <nl> + if ( ! SplashProgress . mutex . tryAcquire ( ) ) return ; <nl> + Display . processMessages ( ) ; <nl> + SplashProgress . mutex . release ( ) ; <nl> } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> index 62e672a . . d52154d 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ import java . lang . Thread . UncaughtExceptionHandler ; <nl> import java . nio . IntBuffer ; <nl> import java . util . Iterator ; <nl> import java . util . Properties ; <nl> + import java . util . concurrent . Semaphore ; <nl> import java . util . concurrent . locks . Lock ; <nl> import java . util . concurrent . locks . ReentrantLock ; <nl> <nl> @ @ - 81 , 6 + 82 , 7 @ @ public class SplashProgress <nl> private static int barBorderColor ; <nl> private static int barColor ; <nl> private static int barBackgroundColor ; <nl> + static final Semaphore mutex = new Semaphore ( 1 ) ; <nl> <nl> private static String getString ( String name , String def ) <nl> { <nl> @ @ - 297 , 7 + 299 , 16 @ @ public class SplashProgress <nl> glEnd ( ) ; <nl> glDisable ( GL _ TEXTURE _ 2D ) ; <nl> <nl> + / / We use mutex to indicate safely to the main thread that we ' re taking the display global lock <nl> + / / So the main thread can skip processing messages while we ' re updating . <nl> + / / There are system setups where this call can pause for a while , because the GL implementation <nl> + / / is trying to impose a framerate or other thing is occurring . Without the mutex , the main <nl> + / / thread would delay waiting for the same global display lock <nl> + mutex . acquireUninterruptibly ( ) ; <nl> Display . update ( ) ; <nl> + / / As soon as we ' re done , we release the mutex . The other thread can now ping the processmessages <nl> + / / call as often as it wants until we get get back here again <nl> + mutex . release ( ) ; <nl> if ( pause ) <nl> { <nl> clearGL ( ) ;
NEAREST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / server / dedicated / DedicatedServer . java . patch b / fml / patches / minecraft / net / minecraft / server / dedicated / DedicatedServer . java . patch <nl> index a89788b . . 10c0aef 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / server / dedicated / DedicatedServer . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / server / dedicated / DedicatedServer . java . patch <nl> @ @ - 40 , 12 + 40 , 11 @ @ <nl> field _ 155771 _ h . info ( " Preparing level \ " " + this . func _ 71270 _ I ( ) + " \ " " ) ; <nl> this . func _ 71247 _ a ( this . func _ 71270 _ I ( ) , this . func _ 71270 _ I ( ) , k , worldtype , s2 ) ; <nl> long i1 = System . nanoTime ( ) - j ; <nl> - @ @ - 268 , 7 + 274 , 8 @ @ <nl> + @ @ - 268 , 7 + 274 , 7 @ @ <nl> this . field _ 71339 _ n . func _ 72602 _ a ( ) ; <nl> } <nl> <nl> - return true ; <nl> - + allowPlayerLogins = true ; <nl> + return FMLCommonHandler . instance ( ) . handleServerStarting ( this ) ; <nl> } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> index 889b6d3 . . 217ca15 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 146 , 7 + 146 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private CustomModLoadingErrorDisplayException customError ; <nl> <nl> - 	 private DuplicateModsFoundException dupesFound ; <nl> + private DuplicateModsFoundException dupesFound ; <nl> <nl> private boolean serverShouldBeKilledQuietly ; <nl> <nl> @ @ - 209 , 7 + 209 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> catch ( DuplicateModsFoundException dupes ) <nl> { <nl> - 	 dupesFound = dupes ; <nl> + dupesFound = dupes ; <nl> } <nl> catch ( MissingModsException missing ) <nl> { <nl> @ @ - 371 , 9 + 371 , 9 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> showGuiScreen ( new GuiSortingProblem ( modSorting ) ) ; <nl> } <nl> - 	 	 else if ( customError ! = null ) <nl> + else if ( customError ! = null ) <nl> { <nl> - 	 	 showGuiScreen ( new GuiCustomModLoadingErrorScreen ( customError ) ) ; <nl> + showGuiScreen ( new GuiCustomModLoadingErrorScreen ( customError ) ) ; <nl> } <nl> else <nl> { <nl> @ @ - 870 , 4 + 870 , 9 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> return true ; / / Always true as the server has to be started before clicking ' Open to lan ' <nl> } <nl> + <nl> + @ Override <nl> + public void allowLogins ( ) { <nl> + / / NOOP for integrated server <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> index 906e8d4 . . 4c74039 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> @ @ - 215 , 7 + 215 , 7 @ @ public class FMLCommonHandler <nl> } <nl> if ( sidedDelegate ! = null ) <nl> { <nl> - 	 brd . addAll ( sidedDelegate . getAdditionalBrandingInformation ( ) ) ; <nl> + brd . addAll ( sidedDelegate . getAdditionalBrandingInformation ( ) ) ; <nl> } <nl> if ( Loader . instance ( ) . getFMLBrandingProperties ( ) . containsKey ( " fmlbranding " ) ) <nl> { <nl> @ @ - 281 , 6 + 281 , 7 @ @ public class FMLCommonHandler <nl> public void handleServerStarted ( ) <nl> { <nl> Loader . instance ( ) . serverStarted ( ) ; <nl> + sidedDelegate . allowLogins ( ) ; <nl> } <nl> <nl> public void handleServerStopping ( ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> index 3ab8795 . . ec230f3 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> @ @ - 59 , 4 + 59 , 6 @ @ public interface IFMLSidedHandler <nl> void fireNetRegistrationEvent ( EventBus bus , NetworkManager manager , Set < String > channelSet , String channel , Side side ) ; <nl> <nl> boolean shouldAllowPlayerLogins ( ) ; <nl> + <nl> + void allowLogins ( ) ; <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> index 3692c66 . . 91eb2c7 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> @ @ - 259 , 4 + 259 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> return DedicatedServer . allowPlayerLogins ; <nl> } <nl> + <nl> + @ Override <nl> + public void allowLogins ( ) { <nl> + DedicatedServer . allowPlayerLogins = true ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 index 5a41a72 . . 53b7f3c 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 1003 , 9 + 1003 , 11 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 public void processWindowMessages ( ) 
 { 
 / / workaround for windows requiring messages being processed on the main thread 
 - if ( LWJGLUtil . getPlatform ( ) = = LWJGLUtil . PLATFORM _ WINDOWS ) 
 - { 
 - Display . processMessages ( ) ; 
 - } 
 + if ( LWJGLUtil . getPlatform ( ) ! = LWJGLUtil . PLATFORM _ WINDOWS ) return ; 
 + / / If we can ' t grab the mutex , the update call is blocked , probably in native code , just skip it and carry on 
 + / / We ' ll get another go next time 
 + if ( ! SplashProgress . mutex . tryAcquire ( ) ) return ; 
 + Display . processMessages ( ) ; 
 + SplashProgress . mutex . release ( ) ; 
 } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 index 62e672a . . d52154d 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 @ @ - 13 , 6 + 13 , 7 @ @ import java . lang . Thread . UncaughtExceptionHandler ; 
 import java . nio . IntBuffer ; 
 import java . util . Iterator ; 
 import java . util . Properties ; 
 + import java . util . concurrent . Semaphore ; 
 import java . util . concurrent . locks . Lock ; 
 import java . util . concurrent . locks . ReentrantLock ; 
 
 @ @ - 81 , 6 + 82 , 7 @ @ public class SplashProgress 
 private static int barBorderColor ; 
 private static int barColor ; 
 private static int barBackgroundColor ; 
 + static final Semaphore mutex = new Semaphore ( 1 ) ; 
 
 private static String getString ( String name , String def ) 
 { 
 @ @ - 297 , 7 + 299 , 16 @ @ public class SplashProgress 
 glEnd ( ) ; 
 glDisable ( GL _ TEXTURE _ 2D ) ; 
 
 + / / We use mutex to indicate safely to the main thread that we ' re taking the display global lock 
 + / / So the main thread can skip processing messages while we ' re updating . 
 + / / There are system setups where this call can pause for a while , because the GL implementation 
 + / / is trying to impose a framerate or other thing is occurring . Without the mutex , the main 
 + / / thread would delay waiting for the same global display lock 
 + mutex . acquireUninterruptibly ( ) ; 
 Display . update ( ) ; 
 + / / As soon as we ' re done , we release the mutex . The other thread can now ping the processmessages 
 + / / call as often as it wants until we get get back here again 
 + mutex . release ( ) ; 
 if ( pause ) 
 { 
 clearGL ( ) ;

NEAREST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / server / dedicated / DedicatedServer . java . patch b / fml / patches / minecraft / net / minecraft / server / dedicated / DedicatedServer . java . patch 
 index a89788b . . 10c0aef 100644 
 - - - a / fml / patches / minecraft / net / minecraft / server / dedicated / DedicatedServer . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / server / dedicated / DedicatedServer . java . patch 
 @ @ - 40 , 12 + 40 , 11 @ @ 
 field _ 155771 _ h . info ( " Preparing level \ " " + this . func _ 71270 _ I ( ) + " \ " " ) ; 
 this . func _ 71247 _ a ( this . func _ 71270 _ I ( ) , this . func _ 71270 _ I ( ) , k , worldtype , s2 ) ; 
 long i1 = System . nanoTime ( ) - j ; 
 - @ @ - 268 , 7 + 274 , 8 @ @ 
 + @ @ - 268 , 7 + 274 , 7 @ @ 
 this . field _ 71339 _ n . func _ 72602 _ a ( ) ; 
 } 
 
 - return true ; 
 - + allowPlayerLogins = true ; 
 + return FMLCommonHandler . instance ( ) . handleServerStarting ( this ) ; 
 } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 index 889b6d3 . . 217ca15 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 146 , 7 + 146 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private CustomModLoadingErrorDisplayException customError ; 
 
 - 	 private DuplicateModsFoundException dupesFound ; 
 + private DuplicateModsFoundException dupesFound ; 
 
 private boolean serverShouldBeKilledQuietly ; 
 
 @ @ - 209 , 7 + 209 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 catch ( DuplicateModsFoundException dupes ) 
 { 
 - 	 dupesFound = dupes ; 
 + dupesFound = dupes ; 
 } 
 catch ( MissingModsException missing ) 
 { 
 @ @ - 371 , 9 + 371 , 9 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 showGuiScreen ( new GuiSortingProblem ( modSorting ) ) ; 
 } 
 - 	 	 else if ( customError ! = null ) 
 + else if ( customError ! = null ) 
 { 
 - 	 	 showGuiScreen ( new GuiCustomModLoadingErrorScreen ( customError ) ) ; 
 + showGuiScreen ( new GuiCustomModLoadingErrorScreen ( customError ) ) ; 
 } 
 else 
 { 
 @ @ - 870 , 4 + 870 , 9 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 return true ; / / Always true as the server has to be started before clicking ' Open to lan ' 
 } 
 + 
 + @ Override 
 + public void allowLogins ( ) { 
 + / / NOOP for integrated server 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 index 906e8d4 . . 4c74039 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 @ @ - 215 , 7 + 215 , 7 @ @ public class FMLCommonHandler 
 } 
 if ( sidedDelegate ! = null ) 
 { 
 - 	 brd . addAll ( sidedDelegate . getAdditionalBrandingInformation ( ) ) ; 
 + brd . addAll ( sidedDelegate . getAdditionalBrandingInformation ( ) ) ; 
 } 
 if ( Loader . instance ( ) . getFMLBrandingProperties ( ) . containsKey ( " fmlbranding " ) ) 
 { 
 @ @ - 281 , 6 + 281 , 7 @ @ public class FMLCommonHandler 
 public void handleServerStarted ( ) 
 { 
 Loader . instance ( ) . serverStarted ( ) ; 
 + sidedDelegate . allowLogins ( ) ; 
 } 
 
 public void handleServerStopping ( ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 index 3ab8795 . . ec230f3 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 @ @ - 59 , 4 + 59 , 6 @ @ public interface IFMLSidedHandler 
 void fireNetRegistrationEvent ( EventBus bus , NetworkManager manager , Set < String > channelSet , String channel , Side side ) ; 
 
 boolean shouldAllowPlayerLogins ( ) ; 
 + 
 + void allowLogins ( ) ; 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 index 3692c66 . . 91eb2c7 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 @ @ - 259 , 4 + 259 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 return DedicatedServer . allowPlayerLogins ; 
 } 
 + 
 + @ Override 
 + public void allowLogins ( ) { 
 + DedicatedServer . allowPlayerLogins = true ; 
 + } 
 }
