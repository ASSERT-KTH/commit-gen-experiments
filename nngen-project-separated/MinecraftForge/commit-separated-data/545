BLEU SCORE: 0.015445276590783498

TEST MSG: Fix for showing config default values twice in tooltip ( # 2257 )
GENERATED MSG: Cleanup override warnings

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java <nl> index 3a0efd8 . . a1afee2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java <nl> @ @ - 1507 , 9 + 1507 , 9 @ @ public class GuiConfigEntries extends GuiListExtended <nl> comment = I18n . format ( configElement . getLanguageKey ( ) + " . tooltip " ) . replace ( " \ \ n " , " \ n " ) ; <nl> <nl> if ( ! comment . equals ( configElement . getLanguageKey ( ) + " . tooltip " ) ) <nl> - Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . YELLOW + comment ) . split ( " \ n " ) ) ; <nl> + Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . YELLOW + removeTag ( comment , " [ default : " , " ] " ) ) . split ( " \ n " ) ) ; <nl> else if ( configElement . getComment ( ) ! = null & & ! configElement . getComment ( ) . trim ( ) . isEmpty ( ) ) <nl> - Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . YELLOW + configElement . getComment ( ) ) . split ( " \ n " ) ) ; <nl> + Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . YELLOW + removeTag ( configElement . getComment ( ) , " [ default : " , " ] " ) ) . split ( " \ n " ) ) ; <nl> else <nl> Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . RED + " No tooltip defined . " ) . split ( " \ n " ) ) ; <nl> <nl> @ @ - 1665 , 6 + 1665 , 23 @ @ public class GuiConfigEntries extends GuiListExtended <nl> @ Override <nl> public void onGuiClosed ( ) <nl> { } <nl> + <nl> + / * * <nl> + * Get string surrounding tagged area . <nl> + * / <nl> + private String removeTag ( String target , String tagStart , String tagEnd ) <nl> + { <nl> + int tagStartPosition = tagStartPosition = target . indexOf ( tagStart ) ; <nl> + int tagEndPosition = tagEndPosition = target . indexOf ( tagEnd , tagStartPosition + tagStart . length ( ) ) ; <nl> + <nl> + if ( - 1 = = tagStartPosition | | - 1 = = tagEndPosition ) <nl> + return target ; <nl> + <nl> + String taglessResult = target . substring ( 0 , tagStartPosition ) ; <nl> + taglessResult + = target . substring ( tagEndPosition + 1 , target . length ( ) ) ; <nl> + <nl> + return taglessResult ; <nl> + } <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / client / config / GuiConfigEntries . java b / fml / src / main / java / cpw / mods / fml / client / config / GuiConfigEntries . java <nl> index a4e8158 . . 6d33b87 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / config / GuiConfigEntries . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / config / GuiConfigEntries . java <nl> @ @ - 36 , 8 + 36 , 8 @ @ import cpw . mods . fml . common . ModContainer ; <nl> <nl> / * * <nl> * This class implements the scrolling list functionality of the config GUI screens . It also provides all the default control handlers <nl> - * for the various property types . <nl> - * <nl> + * for the various property types . <nl> + * <nl> * @ author bspkrs <nl> * / <nl> public class GuiConfigEntries extends GuiListExtended <nl> @ @ - 93 , 7 + 93 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> if ( configElement . isProperty ( ) & & configElement . showInGui ( ) ) / / as opposed to being a child category entry <nl> { <nl> int length ; <nl> - <nl> + <nl> / / protects against language keys that are not defined in the . lang file <nl> if ( ! I18n . format ( configElement . getLanguageKey ( ) ) . equals ( configElement . getLanguageKey ( ) ) ) <nl> length = mc . fontRenderer . getStringWidth ( I18n . format ( configElement . getLanguageKey ( ) ) ) ; <nl> @ @ - 259 , 7 + 259 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> for ( IConfigEntry entry : this . listEntries ) <nl> entry . mouseClicked ( mouseX , mouseY , mouseEvent ) ; <nl> } <nl> - <nl> + <nl> / * * <nl> * This method is a pass - through for IConfigListEntry objects that need to perform actions when the containing GUI is closed . <nl> * / <nl> @ @ - 281 , 7 + 281 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> for ( IConfigEntry entry : this . listEntries ) <nl> if ( entry . saveConfigElement ( ) ) <nl> requiresRestart = true ; <nl> - <nl> + <nl> return requiresRestart ; <nl> } <nl> <nl> @ @ - 798 , 7 + 798 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> <nl> / * * <nl> * NumberSliderEntry <nl> - * <nl> + * <nl> * Provides a slider for numeric properties . <nl> * / <nl> public static class NumberSliderEntry extends ButtonEntry <nl> @ @ - 807 , 8 + 807 , 8 @ @ public class GuiConfigEntries extends GuiListExtended <nl> <nl> public NumberSliderEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement < ? > configElement ) <nl> { <nl> - super ( owningScreen , owningEntryList , configElement , new GuiSlider ( 0 , owningEntryList . controlX , 0 , owningEntryList . controlWidth , 18 , <nl> - " " , " " , Double . valueOf ( configElement . getMinValue ( ) . toString ( ) ) , Double . valueOf ( configElement . getMaxValue ( ) . toString ( ) ) , <nl> + super ( owningScreen , owningEntryList , configElement , new GuiSlider ( 0 , owningEntryList . controlX , 0 , owningEntryList . controlWidth , 18 , <nl> + " " , " " , Double . valueOf ( configElement . getMinValue ( ) . toString ( ) ) , Double . valueOf ( configElement . getMaxValue ( ) . toString ( ) ) , <nl> Double . valueOf ( configElement . get ( ) . toString ( ) ) , configElement . getType ( ) = = ConfigGuiType . DOUBLE , true ) ) ; <nl> <nl> if ( configElement . getType ( ) = = ConfigGuiType . INTEGER ) <nl> @ @ - 818 , 7 + 818 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> } <nl> <nl> @ Override <nl> - public void updateValueButtonText ( ) <nl> + public void updateValueButtonText ( ) <nl> { <nl> ( ( GuiSlider ) this . btnValue ) . updateSlider ( ) ; <nl> } <nl> @ @ - 906 , 7 + 906 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> <nl> public ButtonEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement < ? > configElement ) <nl> { <nl> - this ( owningScreen , owningEntryList , configElement , new GuiButtonExt ( 0 , owningEntryList . controlX , 0 , owningEntryList . controlWidth , 18 , <nl> + this ( owningScreen , owningEntryList , configElement , new GuiButtonExt ( 0 , owningEntryList . controlX , 0 , owningEntryList . controlWidth , 18 , <nl> configElement . get ( ) ! = null ? I18n . format ( String . valueOf ( configElement . get ( ) ) ) : " " ) ) ; <nl> } <nl> <nl> @ @ - 1077 , 7 + 1077 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> { <nl> this . configElement . setToDefault ( ) ; <nl> } <nl> - <nl> + <nl> return configElement . requiresMcRestart ( ) & & beforeValue ! = Integer . parseInt ( configElement . get ( ) . toString ( ) ) ; <nl> } <nl> return false ; <nl> @ @ - 1184 , 7 + 1184 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> { <nl> this . configElement . setToDefault ( ) ; <nl> } <nl> - <nl> + <nl> return configElement . requiresMcRestart ( ) & & beforeValue ! = Double . parseDouble ( configElement . get ( ) . toString ( ) ) ; <nl> } <nl> return false ; <nl> @ @ - 1294 , 7 + 1294 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> else if ( isChanged ( ) & & ! this . isValidValue ) <nl> { <nl> this . configElement . setToDefault ( ) ; <nl> - return configElement . requiresMcRestart ( ) <nl> + return configElement . requiresMcRestart ( ) <nl> & & beforeValue ! = null ? beforeValue . equals ( configElement . getDefault ( ) ) : configElement . getDefault ( ) = = null ; <nl> } <nl> } <nl> @ @ - 1336 , 16 + 1336 , 16 @ @ public class GuiConfigEntries extends GuiListExtended <nl> <nl> this . drawLabel = false ; <nl> } <nl> - <nl> + <nl> / * * <nl> * This method is called in the constructor and is used to set the childScreen field . <nl> * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> protected GuiScreen buildChildScreen ( ) <nl> { <nl> - return new GuiConfig ( this . owningScreen , this . configElement . getChildElements ( ) , this . owningScreen . modID , <nl> - owningScreen . allRequireWorldRestart | | this . configElement . requiresWorldRestart ( ) , <nl> - owningScreen . allRequireMcRestart | | this . configElement . requiresMcRestart ( ) , this . owningScreen . title , <nl> + return new GuiConfig ( this . owningScreen , this . configElement . getChildElements ( ) , this . owningScreen . modID , <nl> + owningScreen . allRequireWorldRestart | | this . configElement . requiresWorldRestart ( ) , <nl> + owningScreen . allRequireMcRestart | | this . configElement . requiresMcRestart ( ) , this . owningScreen . title , <nl> ( ( this . owningScreen . titleLine2 = = null ? " " : this . owningScreen . titleLine2 ) + " > " + this . name ) ) ; <nl> } <nl> <nl> @ @ - 1395 , 7 + 1395 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> { <nl> if ( childScreen instanceof GuiConfig & & ( ( GuiConfig ) childScreen ) . entryList ! = null ) <nl> return ( ( GuiConfig ) childScreen ) . entryList . areAllEntriesDefault ( true ) ; <nl> - <nl> + <nl> return true ; <nl> } <nl> <nl> @ @ - 1422 , 11 + 1422 , 11 @ @ public class GuiConfigEntries extends GuiListExtended <nl> public boolean saveConfigElement ( ) <nl> { <nl> boolean requiresRestart = false ; <nl> - <nl> + <nl> if ( childScreen instanceof GuiConfig & & ( ( GuiConfig ) childScreen ) . entryList ! = null ) <nl> { <nl> requiresRestart = configElement . requiresMcRestart ( ) & & ( ( GuiConfig ) childScreen ) . entryList . hasChangedEntry ( true ) ; <nl> - <nl> + <nl> if ( ( ( GuiConfig ) childScreen ) . entryList . saveConfigElements ( ) ) <nl> requiresRestart = true ; <nl> } <nl> @ @ - 1540 , 16 + 1540 , 16 @ @ public class GuiConfigEntries extends GuiListExtended <nl> else <nl> toolTip = new ArrayList < String > ( this . mc . fontRenderer . listFormattedStringToWidth ( <nl> EnumChatFormatting . GREEN + name + " \ n " + EnumChatFormatting . RED + " No tooltip defined . " , 300 ) ) ; <nl> - <nl> - if ( ( configElement . getType ( ) = = ConfigGuiType . INTEGER <nl> + <nl> + if ( ( configElement . getType ( ) = = ConfigGuiType . INTEGER <nl> & & ( Integer . valueOf ( configElement . getMinValue ( ) . toString ( ) ) ! = Integer . MIN _ VALUE | | Integer . valueOf ( configElement . getMaxValue ( ) . toString ( ) ) ! = Integer . MAX _ VALUE ) ) <nl> - | | ( configElement . getType ( ) = = ConfigGuiType . DOUBLE <nl> + | | ( configElement . getType ( ) = = ConfigGuiType . DOUBLE <nl> & & ( Double . valueOf ( configElement . getMinValue ( ) . toString ( ) ) ! = - Double . MAX _ VALUE | | Double . valueOf ( configElement . getMaxValue ( ) . toString ( ) ) ! = Double . MAX _ VALUE ) ) ) <nl> toolTip . addAll ( this . mc . fontRenderer . listFormattedStringToWidth ( <nl> EnumChatFormatting . AQUA + I18n . format ( " fml . configgui . tooltip . defaultNumeric " , configElement . getMinValue ( ) , configElement . getMaxValue ( ) , configElement . getDefault ( ) ) , 300 ) ) ; <nl> else if ( configElement . getType ( ) ! = ConfigGuiType . CONFIG _ CATEGORY ) <nl> toolTip . addAll ( this . mc . fontRenderer . listFormattedStringToWidth ( EnumChatFormatting . AQUA + I18n . format ( " fml . configgui . tooltip . default " , configElement . getDefault ( ) ) , 300 ) ) ; <nl> - <nl> + <nl> if ( configElement . requiresMcRestart ( ) | | owningScreen . allRequireMcRestart ) <nl> toolTip . add ( EnumChatFormatting . RED + " [ " + I18n . format ( " fml . configgui . gameRestartTitle " ) + " ] " ) ; <nl> } <nl> @ @ - 1669 , 13 + 1669 , 13 @ @ public class GuiConfigEntries extends GuiListExtended <nl> { <nl> return this . owningEntryList . resetX + 40 ; <nl> } <nl> - <nl> + <nl> @ Override <nl> public IConfigElement getConfigElement ( ) <nl> { <nl> return configElement ; <nl> } <nl> - <nl> + <nl> @ Override <nl> public String getName ( ) <nl> { <nl> @ @ - 1688 , 6 + 1688 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> @ Override <nl> public abstract Object [ ] getCurrentValues ( ) ; <nl> <nl> + @ Override <nl> public void onGuiClosed ( ) <nl> { } <nl> } <nl> @ @ - 1703 , 22 + 1704 , 22 @ @ public class GuiConfigEntries extends GuiListExtended <nl> * / <nl> @ SuppressWarnings ( " rawtypes " ) <nl> public IConfigElement getConfigElement ( ) ; <nl> - <nl> + <nl> / * * <nl> * Gets the name of the ConfigElement owned by this entry . <nl> * / <nl> public String getName ( ) ; <nl> - <nl> + <nl> / * * <nl> * Gets the current value of this entry as a String . <nl> * / <nl> public T getCurrentValue ( ) ; <nl> - <nl> + <nl> / * * <nl> * Gets the current values of this list entry as a String [ ] . <nl> * / <nl> public T [ ] getCurrentValues ( ) ; <nl> - <nl> + <nl> / * * <nl> * Is this list entry enabled ? <nl> * <nl> @ @ - 1788 , 7 + 1789 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> * Gets this entry ' s right - hand x boundary . This value is used to control where the scroll bar is placed . <nl> * / <nl> public int getEntryRightBound ( ) ; <nl> - <nl> + <nl> / * * <nl> * This method is called when the parent GUI is closed . Most handlers won ' t need this ; it is provided for special cases . <nl> * / <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / client / config / GuiMessageDialog . java b / fml / src / main / java / cpw / mods / fml / client / config / GuiMessageDialog . java <nl> index 3ef0479 . . 6c0b17e 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / config / GuiMessageDialog . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / config / GuiMessageDialog . java <nl> @ @ - 6 , 16 + 6 , 17 @ @ import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . client . resources . I18n ; <nl> import net . minecraft . util . IChatComponent ; <nl> <nl> - public class GuiMessageDialog extends GuiDisconnected <nl> + public class GuiMessageDialog extends GuiDisconnected <nl> { <nl> private String buttonText ; <nl> - <nl> + <nl> public GuiMessageDialog ( GuiScreen nextScreen , String title , IChatComponent message , String buttonText ) <nl> { <nl> super ( nextScreen , title , message ) ; <nl> this . buttonText = buttonText ; <nl> } <nl> <nl> + @ Override <nl> public void initGui ( ) <nl> { <nl> super . initGui ( ) ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / client / config / GuiSlider . java b / fml / src / main / java / cpw / mods / fml / client / config / GuiSlider . java <nl> index 467a793 . . 4eeaab9 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / config / GuiSlider . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / config / GuiSlider . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import org . lwjgl . opengl . GL11 ; <nl> <nl> / * * <nl> * This class is blatantly stolen from iChunUtils with permission . <nl> - * <nl> + * <nl> * @ author iChun <nl> * / <nl> public class GuiSlider extends GuiButtonExt <nl> @ @ - 76 , 6 + 76 , 7 @ @ public class GuiSlider extends GuiButtonExt <nl> * Returns 0 if the button is disabled , 1 if the mouse is NOT hovering over this button and 2 if it IS hovering over <nl> * this button . <nl> * / <nl> + @ Override <nl> public int getHoverState ( boolean par1 ) <nl> { <nl> return 0 ; <nl> @ @ - 84 , 6 + 85 , 7 @ @ public class GuiSlider extends GuiButtonExt <nl> / * * <nl> * Fired when the mouse button is dragged . Equivalent of MouseListener . mouseDragged ( MouseEvent e ) . <nl> * / <nl> + @ Override <nl> protected void mouseDragged ( Minecraft par1Minecraft , int par2 , int par3 ) <nl> { <nl> if ( this . visible ) <nl> @ @ - 104 , 6 + 106 , 7 @ @ public class GuiSlider extends GuiButtonExt <nl> * Returns true if the mouse has been pressed on this control . Equivalent of MouseListener . mousePressed ( MouseEvent <nl> * e ) . <nl> * / <nl> + @ Override <nl> public boolean mousePressed ( Minecraft par1Minecraft , int par2 , int par3 ) <nl> { <nl> if ( super . mousePressed ( par1Minecraft , par2 , par3 ) ) <nl> @ @ - 173 , 6 + 176 , 7 @ @ public class GuiSlider extends GuiButtonExt <nl> / * * <nl> * Fired when the mouse button is released . Equivalent of MouseListener . mouseReleased ( MouseEvent e ) . <nl> * / <nl> + @ Override <nl> public void mouseReleased ( int par1 , int par2 ) <nl> { <nl> this . dragging = false ; <nl> @ @ - 187 , 12 + 191 , 12 @ @ public class GuiSlider extends GuiButtonExt <nl> { <nl> return sliderValue * ( maxValue - minValue ) + minValue ; <nl> } <nl> - <nl> + <nl> public void setValue ( double d ) <nl> { <nl> this . sliderValue = ( d - minValue ) / ( maxValue - minValue ) ; <nl> } <nl> - <nl> + <nl> public static interface ISlider <nl> { <nl> void onChangeSliderValue ( GuiSlider slider ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java 
 index 3a0efd8 . . a1afee2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java 
 @ @ - 1507 , 9 + 1507 , 9 @ @ public class GuiConfigEntries extends GuiListExtended 
 comment = I18n . format ( configElement . getLanguageKey ( ) + " . tooltip " ) . replace ( " \ \ n " , " \ n " ) ; 
 
 if ( ! comment . equals ( configElement . getLanguageKey ( ) + " . tooltip " ) ) 
 - Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . YELLOW + comment ) . split ( " \ n " ) ) ; 
 + Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . YELLOW + removeTag ( comment , " [ default : " , " ] " ) ) . split ( " \ n " ) ) ; 
 else if ( configElement . getComment ( ) ! = null & & ! configElement . getComment ( ) . trim ( ) . isEmpty ( ) ) 
 - Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . YELLOW + configElement . getComment ( ) ) . split ( " \ n " ) ) ; 
 + Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . YELLOW + removeTag ( configElement . getComment ( ) , " [ default : " , " ] " ) ) . split ( " \ n " ) ) ; 
 else 
 Collections . addAll ( toolTip , ( TextFormatting . GREEN + name + " \ n " + TextFormatting . RED + " No tooltip defined . " ) . split ( " \ n " ) ) ; 
 
 @ @ - 1665 , 6 + 1665 , 23 @ @ public class GuiConfigEntries extends GuiListExtended 
 @ Override 
 public void onGuiClosed ( ) 
 { } 
 + 
 + / * * 
 + * Get string surrounding tagged area . 
 + * / 
 + private String removeTag ( String target , String tagStart , String tagEnd ) 
 + { 
 + int tagStartPosition = tagStartPosition = target . indexOf ( tagStart ) ; 
 + int tagEndPosition = tagEndPosition = target . indexOf ( tagEnd , tagStartPosition + tagStart . length ( ) ) ; 
 + 
 + if ( - 1 = = tagStartPosition | | - 1 = = tagEndPosition ) 
 + return target ; 
 + 
 + String taglessResult = target . substring ( 0 , tagStartPosition ) ; 
 + taglessResult + = target . substring ( tagEndPosition + 1 , target . length ( ) ) ; 
 + 
 + return taglessResult ; 
 + } 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / client / config / GuiConfigEntries . java b / fml / src / main / java / cpw / mods / fml / client / config / GuiConfigEntries . java 
 index a4e8158 . . 6d33b87 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / config / GuiConfigEntries . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / config / GuiConfigEntries . java 
 @ @ - 36 , 8 + 36 , 8 @ @ import cpw . mods . fml . common . ModContainer ; 
 
 / * * 
 * This class implements the scrolling list functionality of the config GUI screens . It also provides all the default control handlers 
 - * for the various property types . 
 - * 
 + * for the various property types . 
 + * 
 * @ author bspkrs 
 * / 
 public class GuiConfigEntries extends GuiListExtended 
 @ @ - 93 , 7 + 93 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 if ( configElement . isProperty ( ) & & configElement . showInGui ( ) ) / / as opposed to being a child category entry 
 { 
 int length ; 
 - 
 + 
 / / protects against language keys that are not defined in the . lang file 
 if ( ! I18n . format ( configElement . getLanguageKey ( ) ) . equals ( configElement . getLanguageKey ( ) ) ) 
 length = mc . fontRenderer . getStringWidth ( I18n . format ( configElement . getLanguageKey ( ) ) ) ; 
 @ @ - 259 , 7 + 259 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 for ( IConfigEntry entry : this . listEntries ) 
 entry . mouseClicked ( mouseX , mouseY , mouseEvent ) ; 
 } 
 - 
 + 
 / * * 
 * This method is a pass - through for IConfigListEntry objects that need to perform actions when the containing GUI is closed . 
 * / 
 @ @ - 281 , 7 + 281 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 for ( IConfigEntry entry : this . listEntries ) 
 if ( entry . saveConfigElement ( ) ) 
 requiresRestart = true ; 
 - 
 + 
 return requiresRestart ; 
 } 
 
 @ @ - 798 , 7 + 798 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 
 / * * 
 * NumberSliderEntry 
 - * 
 + * 
 * Provides a slider for numeric properties . 
 * / 
 public static class NumberSliderEntry extends ButtonEntry 
 @ @ - 807 , 8 + 807 , 8 @ @ public class GuiConfigEntries extends GuiListExtended 
 
 public NumberSliderEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement < ? > configElement ) 
 { 
 - super ( owningScreen , owningEntryList , configElement , new GuiSlider ( 0 , owningEntryList . controlX , 0 , owningEntryList . controlWidth , 18 , 
 - " " , " " , Double . valueOf ( configElement . getMinValue ( ) . toString ( ) ) , Double . valueOf ( configElement . getMaxValue ( ) . toString ( ) ) , 
 + super ( owningScreen , owningEntryList , configElement , new GuiSlider ( 0 , owningEntryList . controlX , 0 , owningEntryList . controlWidth , 18 , 
 + " " , " " , Double . valueOf ( configElement . getMinValue ( ) . toString ( ) ) , Double . valueOf ( configElement . getMaxValue ( ) . toString ( ) ) , 
 Double . valueOf ( configElement . get ( ) . toString ( ) ) , configElement . getType ( ) = = ConfigGuiType . DOUBLE , true ) ) ; 
 
 if ( configElement . getType ( ) = = ConfigGuiType . INTEGER ) 
 @ @ - 818 , 7 + 818 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 } 
 
 @ Override 
 - public void updateValueButtonText ( ) 
 + public void updateValueButtonText ( ) 
 { 
 ( ( GuiSlider ) this . btnValue ) . updateSlider ( ) ; 
 } 
 @ @ - 906 , 7 + 906 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 
 public ButtonEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement < ? > configElement ) 
 { 
 - this ( owningScreen , owningEntryList , configElement , new GuiButtonExt ( 0 , owningEntryList . controlX , 0 , owningEntryList . controlWidth , 18 , 
 + this ( owningScreen , owningEntryList , configElement , new GuiButtonExt ( 0 , owningEntryList . controlX , 0 , owningEntryList . controlWidth , 18 , 
 configElement . get ( ) ! = null ? I18n . format ( String . valueOf ( configElement . get ( ) ) ) : " " ) ) ; 
 } 
 
 @ @ - 1077 , 7 + 1077 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 { 
 this . configElement . setToDefault ( ) ; 
 } 
 - 
 + 
 return configElement . requiresMcRestart ( ) & & beforeValue ! = Integer . parseInt ( configElement . get ( ) . toString ( ) ) ; 
 } 
 return false ; 
 @ @ - 1184 , 7 + 1184 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 { 
 this . configElement . setToDefault ( ) ; 
 } 
 - 
 + 
 return configElement . requiresMcRestart ( ) & & beforeValue ! = Double . parseDouble ( configElement . get ( ) . toString ( ) ) ; 
 } 
 return false ; 
 @ @ - 1294 , 7 + 1294 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 else if ( isChanged ( ) & & ! this . isValidValue ) 
 { 
 this . configElement . setToDefault ( ) ; 
 - return configElement . requiresMcRestart ( ) 
 + return configElement . requiresMcRestart ( ) 
 & & beforeValue ! = null ? beforeValue . equals ( configElement . getDefault ( ) ) : configElement . getDefault ( ) = = null ; 
 } 
 } 
 @ @ - 1336 , 16 + 1336 , 16 @ @ public class GuiConfigEntries extends GuiListExtended 
 
 this . drawLabel = false ; 
 } 
 - 
 + 
 / * * 
 * This method is called in the constructor and is used to set the childScreen field . 
 * / 
 @ SuppressWarnings ( " unchecked " ) 
 protected GuiScreen buildChildScreen ( ) 
 { 
 - return new GuiConfig ( this . owningScreen , this . configElement . getChildElements ( ) , this . owningScreen . modID , 
 - owningScreen . allRequireWorldRestart | | this . configElement . requiresWorldRestart ( ) , 
 - owningScreen . allRequireMcRestart | | this . configElement . requiresMcRestart ( ) , this . owningScreen . title , 
 + return new GuiConfig ( this . owningScreen , this . configElement . getChildElements ( ) , this . owningScreen . modID , 
 + owningScreen . allRequireWorldRestart | | this . configElement . requiresWorldRestart ( ) , 
 + owningScreen . allRequireMcRestart | | this . configElement . requiresMcRestart ( ) , this . owningScreen . title , 
 ( ( this . owningScreen . titleLine2 = = null ? " " : this . owningScreen . titleLine2 ) + " > " + this . name ) ) ; 
 } 
 
 @ @ - 1395 , 7 + 1395 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 { 
 if ( childScreen instanceof GuiConfig & & ( ( GuiConfig ) childScreen ) . entryList ! = null ) 
 return ( ( GuiConfig ) childScreen ) . entryList . areAllEntriesDefault ( true ) ; 
 - 
 + 
 return true ; 
 } 
 
 @ @ - 1422 , 11 + 1422 , 11 @ @ public class GuiConfigEntries extends GuiListExtended 
 public boolean saveConfigElement ( ) 
 { 
 boolean requiresRestart = false ; 
 - 
 + 
 if ( childScreen instanceof GuiConfig & & ( ( GuiConfig ) childScreen ) . entryList ! = null ) 
 { 
 requiresRestart = configElement . requiresMcRestart ( ) & & ( ( GuiConfig ) childScreen ) . entryList . hasChangedEntry ( true ) ; 
 - 
 + 
 if ( ( ( GuiConfig ) childScreen ) . entryList . saveConfigElements ( ) ) 
 requiresRestart = true ; 
 } 
 @ @ - 1540 , 16 + 1540 , 16 @ @ public class GuiConfigEntries extends GuiListExtended 
 else 
 toolTip = new ArrayList < String > ( this . mc . fontRenderer . listFormattedStringToWidth ( 
 EnumChatFormatting . GREEN + name + " \ n " + EnumChatFormatting . RED + " No tooltip defined . " , 300 ) ) ; 
 - 
 - if ( ( configElement . getType ( ) = = ConfigGuiType . INTEGER 
 + 
 + if ( ( configElement . getType ( ) = = ConfigGuiType . INTEGER 
 & & ( Integer . valueOf ( configElement . getMinValue ( ) . toString ( ) ) ! = Integer . MIN _ VALUE | | Integer . valueOf ( configElement . getMaxValue ( ) . toString ( ) ) ! = Integer . MAX _ VALUE ) ) 
 - | | ( configElement . getType ( ) = = ConfigGuiType . DOUBLE 
 + | | ( configElement . getType ( ) = = ConfigGuiType . DOUBLE 
 & & ( Double . valueOf ( configElement . getMinValue ( ) . toString ( ) ) ! = - Double . MAX _ VALUE | | Double . valueOf ( configElement . getMaxValue ( ) . toString ( ) ) ! = Double . MAX _ VALUE ) ) ) 
 toolTip . addAll ( this . mc . fontRenderer . listFormattedStringToWidth ( 
 EnumChatFormatting . AQUA + I18n . format ( " fml . configgui . tooltip . defaultNumeric " , configElement . getMinValue ( ) , configElement . getMaxValue ( ) , configElement . getDefault ( ) ) , 300 ) ) ; 
 else if ( configElement . getType ( ) ! = ConfigGuiType . CONFIG _ CATEGORY ) 
 toolTip . addAll ( this . mc . fontRenderer . listFormattedStringToWidth ( EnumChatFormatting . AQUA + I18n . format ( " fml . configgui . tooltip . default " , configElement . getDefault ( ) ) , 300 ) ) ; 
 - 
 + 
 if ( configElement . requiresMcRestart ( ) | | owningScreen . allRequireMcRestart ) 
 toolTip . add ( EnumChatFormatting . RED + " [ " + I18n . format ( " fml . configgui . gameRestartTitle " ) + " ] " ) ; 
 } 
 @ @ - 1669 , 13 + 1669 , 13 @ @ public class GuiConfigEntries extends GuiListExtended 
 { 
 return this . owningEntryList . resetX + 40 ; 
 } 
 - 
 + 
 @ Override 
 public IConfigElement getConfigElement ( ) 
 { 
 return configElement ; 
 } 
 - 
 + 
 @ Override 
 public String getName ( ) 
 { 
 @ @ - 1688 , 6 + 1688 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 @ Override 
 public abstract Object [ ] getCurrentValues ( ) ; 
 
 + @ Override 
 public void onGuiClosed ( ) 
 { } 
 } 
 @ @ - 1703 , 22 + 1704 , 22 @ @ public class GuiConfigEntries extends GuiListExtended 
 * / 
 @ SuppressWarnings ( " rawtypes " ) 
 public IConfigElement getConfigElement ( ) ; 
 - 
 + 
 / * * 
 * Gets the name of the ConfigElement owned by this entry . 
 * / 
 public String getName ( ) ; 
 - 
 + 
 / * * 
 * Gets the current value of this entry as a String . 
 * / 
 public T getCurrentValue ( ) ; 
 - 
 + 
 / * * 
 * Gets the current values of this list entry as a String [ ] . 
 * / 
 public T [ ] getCurrentValues ( ) ; 
 - 
 + 
 / * * 
 * Is this list entry enabled ? 
 * 
 @ @ - 1788 , 7 + 1789 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 * Gets this entry ' s right - hand x boundary . This value is used to control where the scroll bar is placed . 
 * / 
 public int getEntryRightBound ( ) ; 
 - 
 + 
 / * * 
 * This method is called when the parent GUI is closed . Most handlers won ' t need this ; it is provided for special cases . 
 * / 
 diff - - git a / fml / src / main / java / cpw / mods / fml / client / config / GuiMessageDialog . java b / fml / src / main / java / cpw / mods / fml / client / config / GuiMessageDialog . java 
 index 3ef0479 . . 6c0b17e 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / config / GuiMessageDialog . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / config / GuiMessageDialog . java 
 @ @ - 6 , 16 + 6 , 17 @ @ import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . client . resources . I18n ; 
 import net . minecraft . util . IChatComponent ; 
 
 - public class GuiMessageDialog extends GuiDisconnected 
 + public class GuiMessageDialog extends GuiDisconnected 
 { 
 private String buttonText ; 
 - 
 + 
 public GuiMessageDialog ( GuiScreen nextScreen , String title , IChatComponent message , String buttonText ) 
 { 
 super ( nextScreen , title , message ) ; 
 this . buttonText = buttonText ; 
 } 
 
 + @ Override 
 public void initGui ( ) 
 { 
 super . initGui ( ) ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / client / config / GuiSlider . java b / fml / src / main / java / cpw / mods / fml / client / config / GuiSlider . java 
 index 467a793 . . 4eeaab9 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / config / GuiSlider . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / config / GuiSlider . java 
 @ @ - 6 , 7 + 6 , 7 @ @ import org . lwjgl . opengl . GL11 ; 
 
 / * * 
 * This class is blatantly stolen from iChunUtils with permission . 
 - * 
 + * 
 * @ author iChun 
 * / 
 public class GuiSlider extends GuiButtonExt 
 @ @ - 76 , 6 + 76 , 7 @ @ public class GuiSlider extends GuiButtonExt 
 * Returns 0 if the button is disabled , 1 if the mouse is NOT hovering over this button and 2 if it IS hovering over 
 * this button . 
 * / 
 + @ Override 
 public int getHoverState ( boolean par1 ) 
 { 
 return 0 ; 
 @ @ - 84 , 6 + 85 , 7 @ @ public class GuiSlider extends GuiButtonExt 
 / * * 
 * Fired when the mouse button is dragged . Equivalent of MouseListener . mouseDragged ( MouseEvent e ) . 
 * / 
 + @ Override 
 protected void mouseDragged ( Minecraft par1Minecraft , int par2 , int par3 ) 
 { 
 if ( this . visible ) 
 @ @ - 104 , 6 + 106 , 7 @ @ public class GuiSlider extends GuiButtonExt 
 * Returns true if the mouse has been pressed on this control . Equivalent of MouseListener . mousePressed ( MouseEvent 
 * e ) . 
 * / 
 + @ Override 
 public boolean mousePressed ( Minecraft par1Minecraft , int par2 , int par3 ) 
 { 
 if ( super . mousePressed ( par1Minecraft , par2 , par3 ) ) 
 @ @ - 173 , 6 + 176 , 7 @ @ public class GuiSlider extends GuiButtonExt 
 / * * 
 * Fired when the mouse button is released . Equivalent of MouseListener . mouseReleased ( MouseEvent e ) . 
 * / 
 + @ Override 
 public void mouseReleased ( int par1 , int par2 ) 
 { 
 this . dragging = false ; 
 @ @ - 187 , 12 + 191 , 12 @ @ public class GuiSlider extends GuiButtonExt 
 { 
 return sliderValue * ( maxValue - minValue ) + minValue ; 
 } 
 - 
 + 
 public void setValue ( double d ) 
 { 
 this . sliderValue = ( d - minValue ) / ( maxValue - minValue ) ; 
 } 
 - 
 + 
 public static interface ISlider 
 { 
 void onChangeSliderValue ( GuiSlider slider ) ;
