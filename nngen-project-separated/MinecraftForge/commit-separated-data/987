BLEU SCORE: 0.018543295278285157

TEST MSG: Make EnumFacing events available server - side
GENERATED MSG: Added Breaking Animation for Smart Models , Checking each layer .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / util / EnumFacing . java . patch b / patches / minecraft / net / minecraft / util / EnumFacing . java . patch <nl> index f553f10 . . f2a758f 100644 <nl> - - - a / patches / minecraft / net / minecraft / util / EnumFacing . java . patch <nl> + + + b / patches / minecraft / net / minecraft / util / EnumFacing . java . patch <nl> @ @ - 1 , 6 + 1 , 71 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / util / EnumFacing . java <nl> + + + . . / src - work / minecraft / net / minecraft / util / EnumFacing . java <nl> - @ @ - 376 , 7 + 376 , 7 @ @ <nl> + @ @ - 6 , 8 + 6 , 6 @ @ <nl> + import java . util . Iterator ; <nl> + import java . util . Map ; <nl> + import java . util . Random ; <nl> + - import net . minecraftforge . fml . relauncher . Side ; <nl> + - import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + <nl> + public enum EnumFacing implements IStringSerializable <nl> + { <nl> + @ @ - 61 , 7 + 59 , 6 @ @ <nl> + return func _ 82600 _ a ( this . field _ 176759 _ h ) ; <nl> + } <nl> + <nl> + - @ SideOnly ( Side . CLIENT ) <nl> + public EnumFacing func _ 176732 _ a ( EnumFacing . Axis p _ 176732 _ 1 _ ) <nl> + { <nl> + switch ( EnumFacing . SwitchPlane . field _ 179515 _ a [ p _ 176732 _ 1 _ . ordinal ( ) ] ) <nl> + @ @ - 109 , 7 + 106 , 6 @ @ <nl> + } <nl> + } <nl> + <nl> + - @ SideOnly ( Side . CLIENT ) <nl> + private EnumFacing func _ 176744 _ n ( ) <nl> + { <nl> + switch ( EnumFacing . SwitchPlane . field _ 179513 _ b [ this . ordinal ( ) ] ) <nl> + @ @ - 129 , 7 + 125 , 6 @ @ <nl> + } <nl> + } <nl> + <nl> + - @ SideOnly ( Side . CLIENT ) <nl> + private EnumFacing func _ 176738 _ p ( ) <nl> + { <nl> + switch ( EnumFacing . SwitchPlane . field _ 179513 _ b [ this . ordinal ( ) ] ) <nl> + @ @ - 190 , 7 + 185 , 6 @ @ <nl> + return this . field _ 176758 _ k ; <nl> + } <nl> + <nl> + - @ SideOnly ( Side . CLIENT ) <nl> + public static EnumFacing func _ 176739 _ a ( String p _ 176739 _ 0 _ ) <nl> + { <nl> + return p _ 176739 _ 0 _ = = null ? null : ( EnumFacing ) field _ 176761 _ p . get ( p _ 176739 _ 0 _ . toLowerCase ( ) ) ; <nl> + @ @ - 216 , 7 + 210 , 6 @ @ <nl> + return values ( ) [ p _ 176741 _ 0 _ . nextInt ( values ( ) . length ) ] ; <nl> + } <nl> + <nl> + - @ SideOnly ( Side . CLIENT ) <nl> + public static EnumFacing func _ 176737 _ a ( float p _ 176737 _ 0 _ , float p _ 176737 _ 1 _ , float p _ 176737 _ 2 _ ) <nl> + { <nl> + EnumFacing enumfacing = NORTH ; <nl> + @ @ - 249 , 7 + 242 , 6 @ @ <nl> + return this . field _ 176757 _ j ; <nl> + } <nl> + <nl> + - @ SideOnly ( Side . CLIENT ) <nl> + public Vec3i func _ 176730 _ m ( ) <nl> + { <nl> + return this . field _ 176756 _ m ; <nl> + @ @ - 291 , 7 + 283 , 6 @ @ <nl> + this . field _ 176723 _ f = p _ i46015 _ 4 _ ; <nl> + } <nl> + <nl> + - @ SideOnly ( Side . CLIENT ) <nl> + public static EnumFacing . Axis func _ 176717 _ a ( String p _ 176717 _ 0 _ ) <nl> + { <nl> + return p _ 176717 _ 0 _ = = null ? null : ( EnumFacing . Axis ) field _ 176725 _ d . get ( p _ 176717 _ 0 _ . toLowerCase ( ) ) ; <nl> + @ @ - 376 , 7 + 367 , 7 @ @ <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> index a24be3d . . 2eef166 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> @ @ - 1 , 6 + 1 , 31 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> - @ @ - 129 , 6 + 129 , 12 @ @ <nl> + @ @ - 49 , 6 + 49 , 24 @ @ <nl> + { <nl> + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; <nl> + + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) <nl> + + { <nl> + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) <nl> + + { <nl> + + if ( block . canRenderInLayer ( layer ) ) <nl> + + { <nl> + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; <nl> + + <nl> + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; <nl> + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + + } <nl> + + } <nl> + + return ; <nl> + + } <nl> + + <nl> + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + } <nl> + @ @ - 129 , 6 + 147 , 12 @ @ <nl> ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> new file mode 100644 <nl> index 0000000 . . 593101c <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> @ @ - 0 , 0 + 1 , 265 @ @ <nl> + <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . init . Blocks ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumWorldBlockLayer ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> + import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> + import net . minecraftforge . client . model . IModelPart ; <nl> + import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . ISmartBlockModel ; <nl> + import net . minecraftforge . client . model . TRSRTransformation ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) <nl> + public class LayerBreakingTest <nl> + { <nl> + <nl> + public static final boolean ENABLE = true ; <nl> + public static TestBlock testBlock ; <nl> + <nl> + class TestBakedModel implements IFlexibleBakedModel <nl> + { <nl> + <nl> + TextureAtlasSprite texture ; <nl> + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; <nl> + <nl> + private int [ ] vertexToInts ( <nl> + float x , <nl> + float y , <nl> + float z , <nl> + int color , <nl> + TextureAtlasSprite texture , <nl> + int u , <nl> + int v ) <nl> + { <nl> + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; <nl> + } <nl> + <nl> + public TestBakedModel ( <nl> + TextureAtlasSprite sprite , <nl> + boolean top ) <nl> + { <nl> + texture = sprite ; <nl> + if ( top ) <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; <nl> + } <nl> + else <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return texture ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getFaceQuads ( <nl> + EnumFacing side ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getGeneralQuads ( ) <nl> + { <nl> + return list ; <nl> + } <nl> + <nl> + @ Override <nl> + public VertexFormat getFormat ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class TestBlock extends Block <nl> + { <nl> + <nl> + protected TestBlock ( ) <nl> + { <nl> + super ( Material . glass ) ; <nl> + setHardness ( 7 ) ; <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean isFullCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean canRenderInLayer ( <nl> + EnumWorldBlockLayer layer ) <nl> + { <nl> + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class SmartModel implements IBakedModel , ISmartBlockModel <nl> + { <nl> + <nl> + IFlexibleBakedModel solid ; <nl> + IFlexibleBakedModel translucent ; <nl> + <nl> + private class DefState implements IModelState <nl> + { <nl> + <nl> + @ Override <nl> + public TRSRTransformation apply ( <nl> + IModelPart part ) <nl> + { <nl> + return TRSRTransformation . identity ( ) ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ Override <nl> + public List getFaceQuads ( <nl> + EnumFacing p _ 177551 _ 1 _ ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List getGeneralQuads ( ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleBlockState ( <nl> + IBlockState state ) <nl> + { <nl> + if ( solid = = null ) <nl> + { <nl> + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; <nl> + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; <nl> + <nl> + translucent = new TestBakedModel ( a , true ) ; <nl> + solid = new TestBakedModel ( b , false ) ; <nl> + } <nl> + <nl> + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) <nl> + { <nl> + return solid ; <nl> + } <nl> + else <nl> + { <nl> + return translucent ; <nl> + } <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ SubscribeEvent <nl> + public void onModelBakeEvent ( <nl> + ModelBakeEvent event ) <nl> + { <nl> + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; <nl> + } <nl> + <nl> + @ EventHandler <nl> + public void init ( <nl> + FMLInitializationEvent event ) <nl> + { <nl> + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; <nl> + } <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / util / EnumFacing . java . patch b / patches / minecraft / net / minecraft / util / EnumFacing . java . patch 
 index f553f10 . . f2a758f 100644 
 - - - a / patches / minecraft / net / minecraft / util / EnumFacing . java . patch 
 + + + b / patches / minecraft / net / minecraft / util / EnumFacing . java . patch 
 @ @ - 1 , 6 + 1 , 71 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / util / EnumFacing . java 
 + + + . . / src - work / minecraft / net / minecraft / util / EnumFacing . java 
 - @ @ - 376 , 7 + 376 , 7 @ @ 
 + @ @ - 6 , 8 + 6 , 6 @ @ 
 + import java . util . Iterator ; 
 + import java . util . Map ; 
 + import java . util . Random ; 
 + - import net . minecraftforge . fml . relauncher . Side ; 
 + - import net . minecraftforge . fml . relauncher . SideOnly ; 
 + 
 + public enum EnumFacing implements IStringSerializable 
 + { 
 + @ @ - 61 , 7 + 59 , 6 @ @ 
 + return func _ 82600 _ a ( this . field _ 176759 _ h ) ; 
 + } 
 + 
 + - @ SideOnly ( Side . CLIENT ) 
 + public EnumFacing func _ 176732 _ a ( EnumFacing . Axis p _ 176732 _ 1 _ ) 
 + { 
 + switch ( EnumFacing . SwitchPlane . field _ 179515 _ a [ p _ 176732 _ 1 _ . ordinal ( ) ] ) 
 + @ @ - 109 , 7 + 106 , 6 @ @ 
 + } 
 + } 
 + 
 + - @ SideOnly ( Side . CLIENT ) 
 + private EnumFacing func _ 176744 _ n ( ) 
 + { 
 + switch ( EnumFacing . SwitchPlane . field _ 179513 _ b [ this . ordinal ( ) ] ) 
 + @ @ - 129 , 7 + 125 , 6 @ @ 
 + } 
 + } 
 + 
 + - @ SideOnly ( Side . CLIENT ) 
 + private EnumFacing func _ 176738 _ p ( ) 
 + { 
 + switch ( EnumFacing . SwitchPlane . field _ 179513 _ b [ this . ordinal ( ) ] ) 
 + @ @ - 190 , 7 + 185 , 6 @ @ 
 + return this . field _ 176758 _ k ; 
 + } 
 + 
 + - @ SideOnly ( Side . CLIENT ) 
 + public static EnumFacing func _ 176739 _ a ( String p _ 176739 _ 0 _ ) 
 + { 
 + return p _ 176739 _ 0 _ = = null ? null : ( EnumFacing ) field _ 176761 _ p . get ( p _ 176739 _ 0 _ . toLowerCase ( ) ) ; 
 + @ @ - 216 , 7 + 210 , 6 @ @ 
 + return values ( ) [ p _ 176741 _ 0 _ . nextInt ( values ( ) . length ) ] ; 
 + } 
 + 
 + - @ SideOnly ( Side . CLIENT ) 
 + public static EnumFacing func _ 176737 _ a ( float p _ 176737 _ 0 _ , float p _ 176737 _ 1 _ , float p _ 176737 _ 2 _ ) 
 + { 
 + EnumFacing enumfacing = NORTH ; 
 + @ @ - 249 , 7 + 242 , 6 @ @ 
 + return this . field _ 176757 _ j ; 
 + } 
 + 
 + - @ SideOnly ( Side . CLIENT ) 
 + public Vec3i func _ 176730 _ m ( ) 
 + { 
 + return this . field _ 176756 _ m ; 
 + @ @ - 291 , 7 + 283 , 6 @ @ 
 + this . field _ 176723 _ f = p _ i46015 _ 4 _ ; 
 + } 
 + 
 + - @ SideOnly ( Side . CLIENT ) 
 + public static EnumFacing . Axis func _ 176717 _ a ( String p _ 176717 _ 0 _ ) 
 + { 
 + return p _ 176717 _ 0 _ = = null ? null : ( EnumFacing . Axis ) field _ 176725 _ d . get ( p _ 176717 _ 0 _ . toLowerCase ( ) ) ; 
 + @ @ - 376 , 7 + 367 , 7 @ @ 
 } 
 } 


NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 index a24be3d . . 2eef166 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 @ @ - 1 , 6 + 1 , 31 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 - @ @ - 129 , 6 + 129 , 12 @ @ 
 + @ @ - 49 , 6 + 49 , 24 @ @ 
 + { 
 + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; 
 + + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) 
 + + { 
 + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) 
 + + { 
 + + if ( block . canRenderInLayer ( layer ) ) 
 + + { 
 + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; 
 + + 
 + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; 
 + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + + } 
 + + } 
 + + return ; 
 + + } 
 + + 
 + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + } 
 + @ @ - 129 , 6 + 147 , 12 @ @ 
 ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 new file mode 100644 
 index 0000000 . . 593101c 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 @ @ - 0 , 0 + 1 , 265 @ @ 
 + 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import com . google . common . primitives . Ints ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . init . Blocks ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumWorldBlockLayer ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 + import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 + import net . minecraftforge . client . model . IModelPart ; 
 + import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . ISmartBlockModel ; 
 + import net . minecraftforge . client . model . TRSRTransformation ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + 
 + @ SuppressWarnings ( " deprecation " ) 
 + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) 
 + public class LayerBreakingTest 
 + { 
 + 
 + public static final boolean ENABLE = true ; 
 + public static TestBlock testBlock ; 
 + 
 + class TestBakedModel implements IFlexibleBakedModel 
 + { 
 + 
 + TextureAtlasSprite texture ; 
 + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; 
 + 
 + private int [ ] vertexToInts ( 
 + float x , 
 + float y , 
 + float z , 
 + int color , 
 + TextureAtlasSprite texture , 
 + int u , 
 + int v ) 
 + { 
 + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; 
 + } 
 + 
 + public TestBakedModel ( 
 + TextureAtlasSprite sprite , 
 + boolean top ) 
 + { 
 + texture = sprite ; 
 + if ( top ) 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; 
 + } 
 + else 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return texture ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getFaceQuads ( 
 + EnumFacing side ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getGeneralQuads ( ) 
 + { 
 + return list ; 
 + } 
 + 
 + @ Override 
 + public VertexFormat getFormat ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + } ; 
 + 
 + class TestBlock extends Block 
 + { 
 + 
 + protected TestBlock ( ) 
 + { 
 + super ( Material . glass ) ; 
 + setHardness ( 7 ) ; 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean isFullCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public boolean canRenderInLayer ( 
 + EnumWorldBlockLayer layer ) 
 + { 
 + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; 
 + } 
 + 
 + } ; 
 + 
 + class SmartModel implements IBakedModel , ISmartBlockModel 
 + { 
 + 
 + IFlexibleBakedModel solid ; 
 + IFlexibleBakedModel translucent ; 
 + 
 + private class DefState implements IModelState 
 + { 
 + 
 + @ Override 
 + public TRSRTransformation apply ( 
 + IModelPart part ) 
 + { 
 + return TRSRTransformation . identity ( ) ; 
 + } 
 + 
 + } ; 
 + 
 + @ Override 
 + public List getFaceQuads ( 
 + EnumFacing p _ 177551 _ 1 _ ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List getGeneralQuads ( ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleBlockState ( 
 + IBlockState state ) 
 + { 
 + if ( solid = = null ) 
 + { 
 + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; 
 + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; 
 + 
 + translucent = new TestBakedModel ( a , true ) ; 
 + solid = new TestBakedModel ( b , false ) ; 
 + } 
 + 
 + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) 
 + { 
 + return solid ; 
 + } 
 + else 
 + { 
 + return translucent ; 
 + } 
 + } 
 + 
 + } ; 
 + 
 + @ SubscribeEvent 
 + public void onModelBakeEvent ( 
 + ModelBakeEvent event ) 
 + { 
 + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; 
 + } 
 + 
 + @ EventHandler 
 + public void init ( 
 + FMLInitializationEvent event ) 
 + { 
 + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; 
 + } 
 + } 
 + 
 + }
