BLEU SCORE: 0.041961149062965476

TEST MSG: Fix more bad shapeless recipe matching . Closes # 4557
GENERATED MSG: Make Ingredient explode wildcard values like OreIngredient .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch b / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch <nl> index 34e6831 . . 9ab3f21 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch <nl> @ @ - 23 , 7 + 23 , 7 @ @ <nl> + boolean simple = true ; <nl> + for ( Ingredient i : p _ i47500 _ 3 _ ) <nl> + simple & = i . isSimple ( ) ; <nl> - + this . isSimple = simple ; <nl> + + this . isSimple = false ; / / simple ; Always use Forge logic until Grum finds a fix for https : / / github . com / MinecraftForge / MinecraftForge / issues / 4557 <nl> } <nl> <nl> - @ SideOnly ( Side . CLIENT ) <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> index db07357 . . 58b2f9f 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem <nl> protected ItemStack output = ItemStack . EMPTY ; <nl> protected NonNullList < Ingredient > input = NonNullList . create ( ) ; <nl> protected ResourceLocation group ; <nl> - protected boolean isSimple = true ; <nl> + protected boolean isSimple = false ; / / true ; Always use Forge logic until Grum finds a fix for https : / / github . com / MinecraftForge / MinecraftForge / issues / 4557 <nl> <nl> public ShapelessOreRecipe ( ResourceLocation group , Block result , Object . . . recipe ) { this ( group , new ItemStack ( result ) , recipe ) ; } <nl> public ShapelessOreRecipe ( ResourceLocation group , Item result , Object . . . recipe ) { this ( group , new ItemStack ( result ) , recipe ) ; } <nl> diff - - git a / src / test / resources / assets / forge / recipes / shapeless . json b / src / test / resources / assets / forge / recipes / shapeless . json <nl> new file mode 100644 <nl> index 0000000 . . 854444a <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forge / recipes / shapeless . json <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + { <nl> + " type " : " minecraft : crafting _ shapeless " , <nl> + " ingredients " : [ <nl> + { <nl> + " item " : " minecraft : stone " , <nl> + " data " : 0 <nl> + } , <nl> + { <nl> + " item " : " minecraft : stone " , <nl> + " data " : 0 <nl> + } <nl> + ] , <nl> + " result " : { <nl> + " item " : " minecraft : stone " , <nl> + " data " : 1 <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ ore . json b / src / test / resources / assets / forge / recipes / shapeless _ ore . json <nl> new file mode 100644 <nl> index 0000000 . . 06e1ded <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forge / recipes / shapeless _ ore . json <nl> @ @ - 0 , 0 + 1 , 20 @ @ <nl> + { <nl> + " type " : " forge : ore _ shapeless " , <nl> + " ingredients " : [ <nl> + { <nl> + " type " : " forge : ore _ dict " , <nl> + " ore " : " gravel " <nl> + } , <nl> + { <nl> + " type " : " forge : ore _ dict " , <nl> + " ore " : " gravel " <nl> + } , <nl> + { <nl> + " type " : " forge : ore _ dict " , <nl> + " ore " : " gravel " <nl> + } <nl> + ] , <nl> + " result " : { <nl> + " item " : " minecraft : flint " <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch <nl> index 4027bd8 . . 697a870 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch <nl> @ @ - 9 , 8 + 9 , 11 @ @ <nl> public static final Ingredient field _ 193370 _ a = new Ingredient ( new ItemStack [ 0 ] ) <nl> { <nl> public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) <nl> - @ @ - 23 , 12 + 25 , 17 @ @ <nl> + @ @ - 21 , 17 + 23 , 34 @ @ <nl> + } <nl> + } ; <nl> private final ItemStack [ ] field _ 193371 _ b ; <nl> + + private final ItemStack [ ] matchingStacksExploded ; <nl> private IntList field _ 194140 _ c ; <nl> <nl> + protected Ingredient ( int size ) <nl> @ @ - 21 , 14 + 24 , 41 @ @ <nl> protected Ingredient ( ItemStack . . . p _ i47503 _ 1 _ ) <nl> { <nl> this . field _ 193371 _ b = p _ i47503 _ 1 _ ; <nl> + + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; <nl> + + for ( ItemStack s : p _ i47503 _ 1 _ ) <nl> + + { <nl> + + if ( s . func _ 190926 _ b ( ) ) <nl> + + continue ; <nl> + + if ( s . func _ 77960 _ j ( ) = = net . minecraftforge . oredict . OreDictionary . WILDCARD _ VALUE ) <nl> + + s . func _ 77973 _ b ( ) . func _ 150895 _ a ( net . minecraft . creativetab . CreativeTabs . field _ 78027 _ g , lst ) ; <nl> + + else <nl> + + lst . add ( s ) ; <nl> + + } <nl> + + this . matchingStacksExploded = lst . toArray ( new ItemStack [ lst . size ( ) ] ) ; <nl> + Ingredient . INSTANCES . add ( this ) ; <nl> } <nl> <nl> - @ SideOnly ( Side . CLIENT ) <nl> public ItemStack [ ] func _ 193365 _ a ( ) <nl> { <nl> - return this . field _ 193371 _ b ; <nl> - @ @ - 76 , 6 + 83 , 18 @ @ <nl> + - return this . field _ 193371 _ b ; <nl> + + return this . matchingStacksExploded ; <nl> + } <nl> + <nl> + public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) <nl> + @ @ - 63 , 9 + 82 , 9 @ @ <nl> + { <nl> + if ( this . field _ 194140 _ c = = null ) <nl> + { <nl> + - this . field _ 194140 _ c = new IntArrayList ( this . field _ 193371 _ b . length ) ; <nl> + + this . field _ 194140 _ c = new IntArrayList ( this . matchingStacksExploded . length ) ; <nl> + <nl> + - for ( ItemStack itemstack : this . field _ 193371 _ b ) <nl> + + for ( ItemStack itemstack : this . matchingStacksExploded ) <nl> + { <nl> + this . field _ 194140 _ c . add ( RecipeItemHelper . func _ 194113 _ b ( itemstack ) ) ; <nl> + } <nl> + @ @ - 76 , 6 + 95 , 18 @ @ <nl> return this . field _ 194140 _ c ; <nl> } <nl> <nl> @ @ - 47 , 3 + 77 , 21 @ @ <nl> public static Ingredient func _ 193367 _ a ( Item p _ 193367 _ 0 _ ) <nl> { <nl> return func _ 193369 _ a ( new ItemStack ( p _ 193367 _ 0 _ , 1 , 32767 ) ) ; <nl> + @ @ - 108 , 4 + 139 , 17 @ @ <nl> + <nl> + return field _ 193370 _ a ; <nl> + } <nl> + + <nl> + + / / Merges several vanilla Ingredients together . As a qwerk of how the json is structured , we can ' t tell if its a single Ingredient type or multiple so we split per item and remerge here . <nl> + + / / Only public for internal use , so we can access a private field in here . <nl> + + public static Ingredient merge ( java . util . Collection < Ingredient > parts ) <nl> + + { <nl> + + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; <nl> + + for ( Ingredient part : parts ) <nl> + + { <nl> + + for ( ItemStack stack : part . field _ 193371 _ b ) <nl> + + lst . add ( stack ) ; <nl> + + } <nl> + + return new Ingredient ( lst . toArray ( new ItemStack [ lst . size ( ) ] ) ) ; <nl> + + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index f4479c2 . . ec1923a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 143 , 14 + 143 , 15 @ @ public class CraftingHelper { <nl> if ( json . isJsonArray ( ) ) <nl> { <nl> List < Ingredient > ingredients = Lists . newArrayList ( ) ; <nl> - List < ItemStack > vanilla = Lists . newArrayList ( ) ; <nl> - json . getAsJsonArray ( ) . forEach ( ( ele ) - > { <nl> + List < Ingredient > vanilla = Lists . newArrayList ( ) ; <nl> + json . getAsJsonArray ( ) . forEach ( ( ele ) - > <nl> + { <nl> Ingredient ing = CraftingHelper . getIngredient ( ele , context ) ; <nl> <nl> - if ( ing . getClass ( ) = = Ingredient . class ) { <nl> + if ( ing . getClass ( ) = = Ingredient . class ) <nl> + { <nl> / / Vanilla , Due to how we read it splits each itemstack , so we pull out to re - merge later <nl> - for ( ItemStack stack : ing . getMatchingStacks ( ) ) <nl> - vanilla . add ( stack ) ; <nl> + vanilla . add ( ing ) ; <nl> } <nl> else <nl> { <nl> @ @ - 160 , 8 + 161 , 7 @ @ public class CraftingHelper { <nl> <nl> if ( ! vanilla . isEmpty ( ) ) <nl> { <nl> - ItemStack [ ] items = vanilla . toArray ( new ItemStack [ vanilla . size ( ) ] ) ; <nl> - ingredients . add ( Ingredient . fromStacks ( items ) ) ; <nl> + ingredients . add ( Ingredient . merge ( vanilla ) ) ; <nl> } <nl> <nl> if ( ingredients . size ( ) = = 0 ) <nl> diff - - git a / src / test / resources / assets / forge / recipes / _ constants . json b / src / test / resources / assets / forge / recipes / _ constants . json <nl> new file mode 100644 <nl> index 0000000 . . a0e2377 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forge / recipes / _ constants . json <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + [ <nl> + { <nl> + 	 " name " : " forge : some _ wool " , <nl> + 	 " ingredient " : [ <nl> + 	 	 { <nl> + 	 	 	 " item " : " minecraft : wool " , <nl> + 	 	 	 " data " : 1 <nl> + 	 	 } , <nl> + 	 	 { <nl> + 	 	 	 " item " : " minecraft : wool " , <nl> + 	 	 	 " data " : 2 <nl> + 	 	 } 	 	 <nl> + 	 ] <nl> + } <nl> + ] <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ constant . json b / src / test / resources / assets / forge / recipes / shapeless _ constant . json <nl> new file mode 100644 <nl> index 0000000 . . f072c7d <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forge / recipes / shapeless _ constant . json <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + { <nl> + " type " : " minecraft : crafting _ shapeless " , <nl> + " result " : { <nl> + " item " : " minecraft : stone " , <nl> + " data " : 0 <nl> + } , <nl> + " ingredients " : [ <nl> + { <nl> + " item " : " # forge : some _ wool " <nl> + } , <nl> + { <nl> + " item " : " # forge : some _ wool " <nl> + } <nl> + ] <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json b / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json <nl> new file mode 100644 <nl> index 0000000 . . 9795984 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + { <nl> + " result " : { <nl> + " item " : " minecraft : dirt " , <nl> + " data " : 1 <nl> + } , <nl> + " ingredients " : [ <nl> + { <nl> + " item " : " minecraft : stone " , <nl> + " data " : 32767 <nl> + } <nl> + ] , <nl> + " type " : " minecraft : crafting _ shapeless " <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch b / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch 
 index 34e6831 . . 9ab3f21 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / ShapelessRecipes . java . patch 
 @ @ - 23 , 7 + 23 , 7 @ @ 
 + boolean simple = true ; 
 + for ( Ingredient i : p _ i47500 _ 3 _ ) 
 + simple & = i . isSimple ( ) ; 
 - + this . isSimple = simple ; 
 + + this . isSimple = false ; / / simple ; Always use Forge logic until Grum finds a fix for https : / / github . com / MinecraftForge / MinecraftForge / issues / 4557 
 } 
 
 - @ SideOnly ( Side . CLIENT ) 
 diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 index db07357 . . 58b2f9f 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 @ @ - 49 , 7 + 49 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem 
 protected ItemStack output = ItemStack . EMPTY ; 
 protected NonNullList < Ingredient > input = NonNullList . create ( ) ; 
 protected ResourceLocation group ; 
 - protected boolean isSimple = true ; 
 + protected boolean isSimple = false ; / / true ; Always use Forge logic until Grum finds a fix for https : / / github . com / MinecraftForge / MinecraftForge / issues / 4557 
 
 public ShapelessOreRecipe ( ResourceLocation group , Block result , Object . . . recipe ) { this ( group , new ItemStack ( result ) , recipe ) ; } 
 public ShapelessOreRecipe ( ResourceLocation group , Item result , Object . . . recipe ) { this ( group , new ItemStack ( result ) , recipe ) ; } 
 diff - - git a / src / test / resources / assets / forge / recipes / shapeless . json b / src / test / resources / assets / forge / recipes / shapeless . json 
 new file mode 100644 
 index 0000000 . . 854444a 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forge / recipes / shapeless . json 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + { 
 + " type " : " minecraft : crafting _ shapeless " , 
 + " ingredients " : [ 
 + { 
 + " item " : " minecraft : stone " , 
 + " data " : 0 
 + } , 
 + { 
 + " item " : " minecraft : stone " , 
 + " data " : 0 
 + } 
 + ] , 
 + " result " : { 
 + " item " : " minecraft : stone " , 
 + " data " : 1 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ ore . json b / src / test / resources / assets / forge / recipes / shapeless _ ore . json 
 new file mode 100644 
 index 0000000 . . 06e1ded 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forge / recipes / shapeless _ ore . json 
 @ @ - 0 , 0 + 1 , 20 @ @ 
 + { 
 + " type " : " forge : ore _ shapeless " , 
 + " ingredients " : [ 
 + { 
 + " type " : " forge : ore _ dict " , 
 + " ore " : " gravel " 
 + } , 
 + { 
 + " type " : " forge : ore _ dict " , 
 + " ore " : " gravel " 
 + } , 
 + { 
 + " type " : " forge : ore _ dict " , 
 + " ore " : " gravel " 
 + } 
 + ] , 
 + " result " : { 
 + " item " : " minecraft : flint " 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch 
 index 4027bd8 . . 697a870 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch 
 @ @ - 9 , 8 + 9 , 11 @ @ 
 public static final Ingredient field _ 193370 _ a = new Ingredient ( new ItemStack [ 0 ] ) 
 { 
 public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) 
 - @ @ - 23 , 12 + 25 , 17 @ @ 
 + @ @ - 21 , 17 + 23 , 34 @ @ 
 + } 
 + } ; 
 private final ItemStack [ ] field _ 193371 _ b ; 
 + + private final ItemStack [ ] matchingStacksExploded ; 
 private IntList field _ 194140 _ c ; 
 
 + protected Ingredient ( int size ) 
 @ @ - 21 , 14 + 24 , 41 @ @ 
 protected Ingredient ( ItemStack . . . p _ i47503 _ 1 _ ) 
 { 
 this . field _ 193371 _ b = p _ i47503 _ 1 _ ; 
 + + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; 
 + + for ( ItemStack s : p _ i47503 _ 1 _ ) 
 + + { 
 + + if ( s . func _ 190926 _ b ( ) ) 
 + + continue ; 
 + + if ( s . func _ 77960 _ j ( ) = = net . minecraftforge . oredict . OreDictionary . WILDCARD _ VALUE ) 
 + + s . func _ 77973 _ b ( ) . func _ 150895 _ a ( net . minecraft . creativetab . CreativeTabs . field _ 78027 _ g , lst ) ; 
 + + else 
 + + lst . add ( s ) ; 
 + + } 
 + + this . matchingStacksExploded = lst . toArray ( new ItemStack [ lst . size ( ) ] ) ; 
 + Ingredient . INSTANCES . add ( this ) ; 
 } 
 
 - @ SideOnly ( Side . CLIENT ) 
 public ItemStack [ ] func _ 193365 _ a ( ) 
 { 
 - return this . field _ 193371 _ b ; 
 - @ @ - 76 , 6 + 83 , 18 @ @ 
 + - return this . field _ 193371 _ b ; 
 + + return this . matchingStacksExploded ; 
 + } 
 + 
 + public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) 
 + @ @ - 63 , 9 + 82 , 9 @ @ 
 + { 
 + if ( this . field _ 194140 _ c = = null ) 
 + { 
 + - this . field _ 194140 _ c = new IntArrayList ( this . field _ 193371 _ b . length ) ; 
 + + this . field _ 194140 _ c = new IntArrayList ( this . matchingStacksExploded . length ) ; 
 + 
 + - for ( ItemStack itemstack : this . field _ 193371 _ b ) 
 + + for ( ItemStack itemstack : this . matchingStacksExploded ) 
 + { 
 + this . field _ 194140 _ c . add ( RecipeItemHelper . func _ 194113 _ b ( itemstack ) ) ; 
 + } 
 + @ @ - 76 , 6 + 95 , 18 @ @ 
 return this . field _ 194140 _ c ; 
 } 
 
 @ @ - 47 , 3 + 77 , 21 @ @ 
 public static Ingredient func _ 193367 _ a ( Item p _ 193367 _ 0 _ ) 
 { 
 return func _ 193369 _ a ( new ItemStack ( p _ 193367 _ 0 _ , 1 , 32767 ) ) ; 
 + @ @ - 108 , 4 + 139 , 17 @ @ 
 + 
 + return field _ 193370 _ a ; 
 + } 
 + + 
 + + / / Merges several vanilla Ingredients together . As a qwerk of how the json is structured , we can ' t tell if its a single Ingredient type or multiple so we split per item and remerge here . 
 + + / / Only public for internal use , so we can access a private field in here . 
 + + public static Ingredient merge ( java . util . Collection < Ingredient > parts ) 
 + + { 
 + + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; 
 + + for ( Ingredient part : parts ) 
 + + { 
 + + for ( ItemStack stack : part . field _ 193371 _ b ) 
 + + lst . add ( stack ) ; 
 + + } 
 + + return new Ingredient ( lst . toArray ( new ItemStack [ lst . size ( ) ] ) ) ; 
 + + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index f4479c2 . . ec1923a 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 143 , 14 + 143 , 15 @ @ public class CraftingHelper { 
 if ( json . isJsonArray ( ) ) 
 { 
 List < Ingredient > ingredients = Lists . newArrayList ( ) ; 
 - List < ItemStack > vanilla = Lists . newArrayList ( ) ; 
 - json . getAsJsonArray ( ) . forEach ( ( ele ) - > { 
 + List < Ingredient > vanilla = Lists . newArrayList ( ) ; 
 + json . getAsJsonArray ( ) . forEach ( ( ele ) - > 
 + { 
 Ingredient ing = CraftingHelper . getIngredient ( ele , context ) ; 
 
 - if ( ing . getClass ( ) = = Ingredient . class ) { 
 + if ( ing . getClass ( ) = = Ingredient . class ) 
 + { 
 / / Vanilla , Due to how we read it splits each itemstack , so we pull out to re - merge later 
 - for ( ItemStack stack : ing . getMatchingStacks ( ) ) 
 - vanilla . add ( stack ) ; 
 + vanilla . add ( ing ) ; 
 } 
 else 
 { 
 @ @ - 160 , 8 + 161 , 7 @ @ public class CraftingHelper { 
 
 if ( ! vanilla . isEmpty ( ) ) 
 { 
 - ItemStack [ ] items = vanilla . toArray ( new ItemStack [ vanilla . size ( ) ] ) ; 
 - ingredients . add ( Ingredient . fromStacks ( items ) ) ; 
 + ingredients . add ( Ingredient . merge ( vanilla ) ) ; 
 } 
 
 if ( ingredients . size ( ) = = 0 ) 
 diff - - git a / src / test / resources / assets / forge / recipes / _ constants . json b / src / test / resources / assets / forge / recipes / _ constants . json 
 new file mode 100644 
 index 0000000 . . a0e2377 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forge / recipes / _ constants . json 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + [ 
 + { 
 + 	 " name " : " forge : some _ wool " , 
 + 	 " ingredient " : [ 
 + 	 	 { 
 + 	 	 	 " item " : " minecraft : wool " , 
 + 	 	 	 " data " : 1 
 + 	 	 } , 
 + 	 	 { 
 + 	 	 	 " item " : " minecraft : wool " , 
 + 	 	 	 " data " : 2 
 + 	 	 } 	 	 
 + 	 ] 
 + } 
 + ] 
 \ No newline at end of file 
 diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ constant . json b / src / test / resources / assets / forge / recipes / shapeless _ constant . json 
 new file mode 100644 
 index 0000000 . . f072c7d 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forge / recipes / shapeless _ constant . json 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + { 
 + " type " : " minecraft : crafting _ shapeless " , 
 + " result " : { 
 + " item " : " minecraft : stone " , 
 + " data " : 0 
 + } , 
 + " ingredients " : [ 
 + { 
 + " item " : " # forge : some _ wool " 
 + } , 
 + { 
 + " item " : " # forge : some _ wool " 
 + } 
 + ] 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json b / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json 
 new file mode 100644 
 index 0000000 . . 9795984 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + { 
 + " result " : { 
 + " item " : " minecraft : dirt " , 
 + " data " : 1 
 + } , 
 + " ingredients " : [ 
 + { 
 + " item " : " minecraft : stone " , 
 + " data " : 32767 
 + } 
 + ] , 
 + " type " : " minecraft : crafting _ shapeless " 
 + } 
 \ No newline at end of file
