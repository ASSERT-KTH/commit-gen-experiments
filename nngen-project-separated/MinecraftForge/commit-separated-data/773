BLEU SCORE: 0.1135935489027116

TEST MSG: Added default left hand transforms for forge transform strings . Closes # 2615 .
GENERATED MSG: Implemented face culling for item models , improves performance slightly . Closes # 2326

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> index 028e941 . . 2d6095e 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> @ @ - 437 , 7 + 437 , 7 @ @ public class ForgeBlockStateV1 extends Marker <nl> throw new UnsupportedOperationException ( " Forge BlockStateLoader V1 does not support nested submodels . " ) ; <nl> } <nl> <nl> - private TRSRTransformation get ( float tx , float ty , float tz , float ax , float ay , float az , float s ) <nl> + private static TRSRTransformation get ( float tx , float ty , float tz , float ax , float ay , float az , float s ) <nl> { <nl> return TRSRTransformation . blockCenterToCorner ( new TRSRTransformation ( <nl> new Vector3f ( tx / 16 , ty / 16 , tz / 16 ) , <nl> @ @ - 446 , 6 + 446 , 13 @ @ public class ForgeBlockStateV1 extends Marker <nl> null ) ) ; <nl> } <nl> <nl> + private static final TRSRTransformation flipX = new TRSRTransformation ( null , null , new Vector3f ( - 1 , 1 , 1 ) , null ) ; <nl> + <nl> + private static TRSRTransformation leftify ( TRSRTransformation transform ) <nl> + { <nl> + return TRSRTransformation . blockCenterToCorner ( flipX . compose ( TRSRTransformation . blockCornerToCenter ( transform ) ) . compose ( flipX ) ) ; <nl> + } <nl> + <nl> @ Override <nl> public ForgeBlockStateV1 . Variant deserialize ( JsonElement element , Type typeOfT , JsonDeserializationContext context ) throws JsonParseException <nl> { <nl> @ @ - 495 , 23 + 502 , 30 @ @ public class ForgeBlockStateV1 extends Marker <nl> / / block / block <nl> else if ( transform . equals ( " forge : default - block " ) ) <nl> { <nl> + TRSRTransformation thirdperson = get ( 0 , 2 . 5f , 0 , 75 , 45 , 0 , 0 . 375f ) ; <nl> ImmutableMap . Builder < TransformType , TRSRTransformation > builder = ImmutableMap . builder ( ) ; <nl> builder . put ( TransformType . GUI , get ( 0 , 0 , 0 , 30 , 225 , 0 , 0 . 625f ) ) ; <nl> - builder . put ( TransformType . GROUND , get ( 0 , 3 , 0 , 0 , 0 , 0 , 0 . 25f ) ) ; <nl> + builder . put ( TransformType . GROUND , get ( 0 , 3 , 0 , 0 , 0 , 0 , 0 . 25f ) ) ; <nl> builder . put ( TransformType . FIXED , get ( 0 , 0 , 0 , 0 , 0 , 0 , 0 . 5f ) ) ; <nl> - builder . put ( TransformType . THIRD _ PERSON _ RIGHT _ HAND , get ( 0 , 2 . 5f , 0 , 75 , 45 , 0 , 0 . 375f ) ) ; <nl> - builder . put ( TransformType . FIRST _ PERSON _ RIGHT _ HAND , get ( 0 , 0 , 0 , 0 , 45 , 0 , 0 . 4f ) ) ; <nl> + builder . put ( TransformType . THIRD _ PERSON _ RIGHT _ HAND , thirdperson ) ; <nl> + builder . put ( TransformType . THIRD _ PERSON _ LEFT _ HAND , leftify ( thirdperson ) ) ; <nl> + builder . put ( TransformType . FIRST _ PERSON _ RIGHT _ HAND , get ( 0 , 0 , 0 , 0 , 45 , 0 , 0 . 4f ) ) ; <nl> builder . put ( TransformType . FIRST _ PERSON _ LEFT _ HAND , get ( 0 , 0 , 0 , 0 , 255 , 0 , 0 . 4f ) ) ; <nl> ret . state = Optional . < IModelState > of ( new SimpleModelState ( builder . build ( ) ) ) ; <nl> } <nl> / / item / generated <nl> else if ( transform . equals ( " forge : default - item " ) ) <nl> { <nl> - ret . state = Optional . < IModelState > of ( new SimpleModelState ( ImmutableMap . of ( <nl> - TransformType . GROUND , get ( 0 , 2 , 0 , 0 , 0 , 0 , 0 . 5f ) , <nl> - TransformType . HEAD , get ( 0 , 13 , 7 , 0 , 180 , 0 , 1 ) , <nl> - TransformType . THIRD _ PERSON _ RIGHT _ HAND , get ( 0 , 3 , 1 , 0 , 0 , 0 , 0 . 55f ) , <nl> - TransformType . FIRST _ PERSON _ RIGHT _ HAND , get ( 1 . 13f , 3 . 2f , 1 . 13f , 0 , - 90 , 25 , 0 . 68f ) ) ) ) ; <nl> + TRSRTransformation thirdperson = get ( 0 , 3 , 1 , 0 , 0 , 0 , 0 . 55f ) ; <nl> + TRSRTransformation firstperson = get ( 1 . 13f , 3 . 2f , 1 . 13f , 0 , - 90 , 25 , 0 . 68f ) ; <nl> + ImmutableMap . Builder < TransformType , TRSRTransformation > builder = ImmutableMap . builder ( ) ; <nl> + builder . put ( TransformType . GROUND , get ( 0 , 2 , 0 , 0 , 0 , 0 , 0 . 5f ) ) ; <nl> + builder . put ( TransformType . HEAD , get ( 0 , 13 , 7 , 0 , 180 , 0 , 1 ) ) ; <nl> + builder . put ( TransformType . THIRD _ PERSON _ RIGHT _ HAND , thirdperson ) ; <nl> + builder . put ( TransformType . THIRD _ PERSON _ LEFT _ HAND , leftify ( thirdperson ) ) ; <nl> + builder . put ( TransformType . FIRST _ PERSON _ RIGHT _ HAND , firstperson ) ; <nl> + builder . put ( TransformType . FIRST _ PERSON _ LEFT _ HAND , leftify ( firstperson ) ) ; <nl> + ret . state = Optional . < IModelState > of ( new SimpleModelState ( builder . build ( ) ) ) ; <nl> } <nl> / / item / handheld <nl> else if ( transform . equals ( " forge : default - tool " ) )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> index 71309f7 . . 16fd01d 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> @ @ - 72 , 7 + 72 , 7 @ @ public interface IPerspectiveAwareModel extends IFlexibleBakedModel <nl> { <nl> TRSRTransformation tr = transforms . get ( cameraTransformType ) ; <nl> Matrix4f mat = null ; <nl> - if ( tr ! = null & & tr ! = TRSRTransformation . identity ( ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; <nl> + if ( tr ! = null & & ! tr . equals ( TRSRTransformation . identity ( ) ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; <nl> return Pair . of ( model , mat ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> index 87100ee . . 119092e 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> @ @ - 5 , 8 + 5 , 11 @ @ import java . util . BitSet ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> <nl> + import javax . vecmath . Matrix4f ; <nl> import javax . vecmath . Vector4f ; <nl> <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> + <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; <nl> @ @ - 93 , 14 + 96 , 10 @ @ public class ItemLayerModel implements IRetexturableModel <nl> } <nl> TextureAtlasSprite particle = bakedTextureGetter . apply ( textures . isEmpty ( ) ? new ResourceLocation ( " missingno " ) : textures . get ( 0 ) ) ; <nl> ImmutableMap < TransformType , TRSRTransformation > map = IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) ; <nl> - IFlexibleBakedModel ret = new BakedModel ( builder . build ( ) , particle , format ) ; <nl> - if ( map . isEmpty ( ) ) <nl> - { <nl> - return ret ; <nl> - } <nl> - return new IPerspectiveAwareModel . MapWrapper ( ret , map ) ; <nl> + return new BakedItemModel ( builder . build ( ) , particle , format , map , null ) ; <nl> } <nl> <nl> + @ Deprecated / / remove 1 . 9 <nl> public static class BakedModel implements IFlexibleBakedModel <nl> { <nl> private final ImmutableList < BakedQuad > quads ; <nl> @ @ - 124 , 6 + 123 , 65 @ @ public class ItemLayerModel implements IRetexturableModel <nl> public VertexFormat getFormat ( ) { return format ; } <nl> } <nl> <nl> + private static class BakedItemModel implements IFlexibleBakedModel , IPerspectiveAwareModel <nl> + { <nl> + private final ImmutableList < BakedQuad > quads ; <nl> + private final TextureAtlasSprite particle ; <nl> + private final VertexFormat format ; <nl> + private final ImmutableMap < TransformType , TRSRTransformation > transforms ; <nl> + private final IFlexibleBakedModel otherModel ; <nl> + private final boolean isCulled ; <nl> + <nl> + public BakedItemModel ( ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , VertexFormat format , ImmutableMap < TransformType , TRSRTransformation > transforms , IFlexibleBakedModel otherModel ) <nl> + { <nl> + this . quads = quads ; <nl> + this . particle = particle ; <nl> + this . format = format ; <nl> + this . transforms = transforms ; <nl> + if ( otherModel ! = null ) <nl> + { <nl> + this . otherModel = otherModel ; <nl> + this . isCulled = true ; <nl> + } <nl> + else <nl> + { <nl> + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> + for ( BakedQuad quad : quads ) <nl> + { <nl> + if ( quad . getFace ( ) = = EnumFacing . SOUTH ) <nl> + { <nl> + builder . add ( quad ) ; <nl> + } <nl> + } <nl> + this . otherModel = new BakedItemModel ( builder . build ( ) , particle , format , transforms , this ) ; <nl> + isCulled = false ; <nl> + } <nl> + } <nl> + <nl> + public boolean isAmbientOcclusion ( ) { return true ; } <nl> + public boolean isGui3d ( ) { return false ; } <nl> + public boolean isBuiltInRenderer ( ) { return false ; } <nl> + public TextureAtlasSprite getParticleTexture ( ) { return particle ; } <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } <nl> + public List < BakedQuad > getFaceQuads ( EnumFacing side ) { return ImmutableList . of ( ) ; } <nl> + public List < BakedQuad > getGeneralQuads ( ) { return quads ; } <nl> + public VertexFormat getFormat ( ) { return format ; } <nl> + <nl> + public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType type ) <nl> + { <nl> + Pair < ? extends IFlexibleBakedModel , Matrix4f > pair = IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , transforms , type ) ; <nl> + if ( type = = TransformType . GUI & & ! isCulled & & pair . getRight ( ) = = null ) <nl> + { <nl> + return Pair . of ( otherModel , null ) ; <nl> + } <nl> + else if ( type ! = TransformType . GUI & & isCulled ) <nl> + { <nl> + return Pair . of ( otherModel , pair . getRight ( ) ) ; <nl> + } <nl> + return pair ; <nl> + } <nl> + } <nl> + <nl> public ImmutableList < BakedQuad > getQuadsForSprite ( int tint , TextureAtlasSprite sprite , VertexFormat format , Optional < TRSRTransformation > transform ) <nl> { <nl> ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 index 028e941 . . 2d6095e 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 @ @ - 437 , 7 + 437 , 7 @ @ public class ForgeBlockStateV1 extends Marker 
 throw new UnsupportedOperationException ( " Forge BlockStateLoader V1 does not support nested submodels . " ) ; 
 } 
 
 - private TRSRTransformation get ( float tx , float ty , float tz , float ax , float ay , float az , float s ) 
 + private static TRSRTransformation get ( float tx , float ty , float tz , float ax , float ay , float az , float s ) 
 { 
 return TRSRTransformation . blockCenterToCorner ( new TRSRTransformation ( 
 new Vector3f ( tx / 16 , ty / 16 , tz / 16 ) , 
 @ @ - 446 , 6 + 446 , 13 @ @ public class ForgeBlockStateV1 extends Marker 
 null ) ) ; 
 } 
 
 + private static final TRSRTransformation flipX = new TRSRTransformation ( null , null , new Vector3f ( - 1 , 1 , 1 ) , null ) ; 
 + 
 + private static TRSRTransformation leftify ( TRSRTransformation transform ) 
 + { 
 + return TRSRTransformation . blockCenterToCorner ( flipX . compose ( TRSRTransformation . blockCornerToCenter ( transform ) ) . compose ( flipX ) ) ; 
 + } 
 + 
 @ Override 
 public ForgeBlockStateV1 . Variant deserialize ( JsonElement element , Type typeOfT , JsonDeserializationContext context ) throws JsonParseException 
 { 
 @ @ - 495 , 23 + 502 , 30 @ @ public class ForgeBlockStateV1 extends Marker 
 / / block / block 
 else if ( transform . equals ( " forge : default - block " ) ) 
 { 
 + TRSRTransformation thirdperson = get ( 0 , 2 . 5f , 0 , 75 , 45 , 0 , 0 . 375f ) ; 
 ImmutableMap . Builder < TransformType , TRSRTransformation > builder = ImmutableMap . builder ( ) ; 
 builder . put ( TransformType . GUI , get ( 0 , 0 , 0 , 30 , 225 , 0 , 0 . 625f ) ) ; 
 - builder . put ( TransformType . GROUND , get ( 0 , 3 , 0 , 0 , 0 , 0 , 0 . 25f ) ) ; 
 + builder . put ( TransformType . GROUND , get ( 0 , 3 , 0 , 0 , 0 , 0 , 0 . 25f ) ) ; 
 builder . put ( TransformType . FIXED , get ( 0 , 0 , 0 , 0 , 0 , 0 , 0 . 5f ) ) ; 
 - builder . put ( TransformType . THIRD _ PERSON _ RIGHT _ HAND , get ( 0 , 2 . 5f , 0 , 75 , 45 , 0 , 0 . 375f ) ) ; 
 - builder . put ( TransformType . FIRST _ PERSON _ RIGHT _ HAND , get ( 0 , 0 , 0 , 0 , 45 , 0 , 0 . 4f ) ) ; 
 + builder . put ( TransformType . THIRD _ PERSON _ RIGHT _ HAND , thirdperson ) ; 
 + builder . put ( TransformType . THIRD _ PERSON _ LEFT _ HAND , leftify ( thirdperson ) ) ; 
 + builder . put ( TransformType . FIRST _ PERSON _ RIGHT _ HAND , get ( 0 , 0 , 0 , 0 , 45 , 0 , 0 . 4f ) ) ; 
 builder . put ( TransformType . FIRST _ PERSON _ LEFT _ HAND , get ( 0 , 0 , 0 , 0 , 255 , 0 , 0 . 4f ) ) ; 
 ret . state = Optional . < IModelState > of ( new SimpleModelState ( builder . build ( ) ) ) ; 
 } 
 / / item / generated 
 else if ( transform . equals ( " forge : default - item " ) ) 
 { 
 - ret . state = Optional . < IModelState > of ( new SimpleModelState ( ImmutableMap . of ( 
 - TransformType . GROUND , get ( 0 , 2 , 0 , 0 , 0 , 0 , 0 . 5f ) , 
 - TransformType . HEAD , get ( 0 , 13 , 7 , 0 , 180 , 0 , 1 ) , 
 - TransformType . THIRD _ PERSON _ RIGHT _ HAND , get ( 0 , 3 , 1 , 0 , 0 , 0 , 0 . 55f ) , 
 - TransformType . FIRST _ PERSON _ RIGHT _ HAND , get ( 1 . 13f , 3 . 2f , 1 . 13f , 0 , - 90 , 25 , 0 . 68f ) ) ) ) ; 
 + TRSRTransformation thirdperson = get ( 0 , 3 , 1 , 0 , 0 , 0 , 0 . 55f ) ; 
 + TRSRTransformation firstperson = get ( 1 . 13f , 3 . 2f , 1 . 13f , 0 , - 90 , 25 , 0 . 68f ) ; 
 + ImmutableMap . Builder < TransformType , TRSRTransformation > builder = ImmutableMap . builder ( ) ; 
 + builder . put ( TransformType . GROUND , get ( 0 , 2 , 0 , 0 , 0 , 0 , 0 . 5f ) ) ; 
 + builder . put ( TransformType . HEAD , get ( 0 , 13 , 7 , 0 , 180 , 0 , 1 ) ) ; 
 + builder . put ( TransformType . THIRD _ PERSON _ RIGHT _ HAND , thirdperson ) ; 
 + builder . put ( TransformType . THIRD _ PERSON _ LEFT _ HAND , leftify ( thirdperson ) ) ; 
 + builder . put ( TransformType . FIRST _ PERSON _ RIGHT _ HAND , firstperson ) ; 
 + builder . put ( TransformType . FIRST _ PERSON _ LEFT _ HAND , leftify ( firstperson ) ) ; 
 + ret . state = Optional . < IModelState > of ( new SimpleModelState ( builder . build ( ) ) ) ; 
 } 
 / / item / handheld 
 else if ( transform . equals ( " forge : default - tool " ) )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 index 71309f7 . . 16fd01d 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 @ @ - 72 , 7 + 72 , 7 @ @ public interface IPerspectiveAwareModel extends IFlexibleBakedModel 
 { 
 TRSRTransformation tr = transforms . get ( cameraTransformType ) ; 
 Matrix4f mat = null ; 
 - if ( tr ! = null & & tr ! = TRSRTransformation . identity ( ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; 
 + if ( tr ! = null & & ! tr . equals ( TRSRTransformation . identity ( ) ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; 
 return Pair . of ( model , mat ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 index 87100ee . . 119092e 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 @ @ - 5 , 8 + 5 , 11 @ @ import java . util . BitSet ; 
 import java . util . Collection ; 
 import java . util . List ; 
 
 + import javax . vecmath . Matrix4f ; 
 import javax . vecmath . Vector4f ; 
 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 + 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; 
 @ @ - 93 , 14 + 96 , 10 @ @ public class ItemLayerModel implements IRetexturableModel 
 } 
 TextureAtlasSprite particle = bakedTextureGetter . apply ( textures . isEmpty ( ) ? new ResourceLocation ( " missingno " ) : textures . get ( 0 ) ) ; 
 ImmutableMap < TransformType , TRSRTransformation > map = IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) ; 
 - IFlexibleBakedModel ret = new BakedModel ( builder . build ( ) , particle , format ) ; 
 - if ( map . isEmpty ( ) ) 
 - { 
 - return ret ; 
 - } 
 - return new IPerspectiveAwareModel . MapWrapper ( ret , map ) ; 
 + return new BakedItemModel ( builder . build ( ) , particle , format , map , null ) ; 
 } 
 
 + @ Deprecated / / remove 1 . 9 
 public static class BakedModel implements IFlexibleBakedModel 
 { 
 private final ImmutableList < BakedQuad > quads ; 
 @ @ - 124 , 6 + 123 , 65 @ @ public class ItemLayerModel implements IRetexturableModel 
 public VertexFormat getFormat ( ) { return format ; } 
 } 
 
 + private static class BakedItemModel implements IFlexibleBakedModel , IPerspectiveAwareModel 
 + { 
 + private final ImmutableList < BakedQuad > quads ; 
 + private final TextureAtlasSprite particle ; 
 + private final VertexFormat format ; 
 + private final ImmutableMap < TransformType , TRSRTransformation > transforms ; 
 + private final IFlexibleBakedModel otherModel ; 
 + private final boolean isCulled ; 
 + 
 + public BakedItemModel ( ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , VertexFormat format , ImmutableMap < TransformType , TRSRTransformation > transforms , IFlexibleBakedModel otherModel ) 
 + { 
 + this . quads = quads ; 
 + this . particle = particle ; 
 + this . format = format ; 
 + this . transforms = transforms ; 
 + if ( otherModel ! = null ) 
 + { 
 + this . otherModel = otherModel ; 
 + this . isCulled = true ; 
 + } 
 + else 
 + { 
 + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 + for ( BakedQuad quad : quads ) 
 + { 
 + if ( quad . getFace ( ) = = EnumFacing . SOUTH ) 
 + { 
 + builder . add ( quad ) ; 
 + } 
 + } 
 + this . otherModel = new BakedItemModel ( builder . build ( ) , particle , format , transforms , this ) ; 
 + isCulled = false ; 
 + } 
 + } 
 + 
 + public boolean isAmbientOcclusion ( ) { return true ; } 
 + public boolean isGui3d ( ) { return false ; } 
 + public boolean isBuiltInRenderer ( ) { return false ; } 
 + public TextureAtlasSprite getParticleTexture ( ) { return particle ; } 
 + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } 
 + public List < BakedQuad > getFaceQuads ( EnumFacing side ) { return ImmutableList . of ( ) ; } 
 + public List < BakedQuad > getGeneralQuads ( ) { return quads ; } 
 + public VertexFormat getFormat ( ) { return format ; } 
 + 
 + public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType type ) 
 + { 
 + Pair < ? extends IFlexibleBakedModel , Matrix4f > pair = IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , transforms , type ) ; 
 + if ( type = = TransformType . GUI & & ! isCulled & & pair . getRight ( ) = = null ) 
 + { 
 + return Pair . of ( otherModel , null ) ; 
 + } 
 + else if ( type ! = TransformType . GUI & & isCulled ) 
 + { 
 + return Pair . of ( otherModel , pair . getRight ( ) ) ; 
 + } 
 + return pair ; 
 + } 
 + } 
 + 
 public ImmutableList < BakedQuad > getQuadsForSprite ( int tint , TextureAtlasSprite sprite , VertexFormat format , Optional < TRSRTransformation > transform ) 
 { 
 ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ;
