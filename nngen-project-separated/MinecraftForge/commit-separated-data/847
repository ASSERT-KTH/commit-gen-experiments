BLEU SCORE: 0.027611988917697356

TEST MSG: Revert binary - incompatible changes in models .
GENERATED MSG: Models now load from resource packs

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / IModelWithSubmodels . java b / src / main / java / net / minecraftforge / client / model / IModelWithSubmodels . java <nl> new file mode 100644 <nl> index 0000000 . . f259f9e <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / IModelWithSubmodels . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import com . google . common . collect . ImmutableSet ; <nl> + <nl> + / * * <nl> + * Created by rainwarrior on 2 / 2 / 16 . <nl> + * / <nl> + public interface IModelWithSubmodels < M extends IModelWithSubmodels < M > > extends IModel <nl> + { <nl> + M setDefaultSubmodelEnabled ( boolean value ) ; <nl> + M setSubmodelsEnabled ( ImmutableSet < String > submodelNames , boolean show ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> index eb5a015 . . 873bcea 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> @ @ - 68 , 7 + 68 , 7 @ @ public class ItemLayerModel implements IRetexturableModel < ItemLayerModel > <nl> return TRSRTransformation . identity ( ) ; <nl> } <nl> <nl> - public ItemLayerModel retexture ( ImmutableMap < String , String > textures ) <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> { <nl> ImmutableList . Builder < ResourceLocation > builder = ImmutableList . builder ( ) ; <nl> for ( int i = 0 ; i < textures . size ( ) + this . textures . size ( ) ; i + + ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> index 5855334 . . 983b285 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> @ @ - 140 , 7 + 140 , 7 @ @ public class ModelDynBucket implements IModel , IModelCustomData < ModelDynBucket > , <nl> * If the fluid can ' t be found , water is used <nl> * / <nl> @ Override <nl> - public ModelDynBucket process ( ImmutableMap < String , String > customData ) <nl> + public IModel process ( ImmutableMap < String , String > customData ) <nl> { <nl> String fluidName = customData . get ( " fluid " ) ; <nl> Fluid fluid = FluidRegistry . getFluid ( fluidName ) ; <nl> @ @ - 171 , 7 + 171 , 7 @ @ public class ModelDynBucket implements IModel , IModelCustomData < ModelDynBucket > , <nl> * If no liquid is given a hardcoded variant for the bucket is used . <nl> * / <nl> @ Override <nl> - public ModelDynBucket retexture ( ImmutableMap < String , String > textures ) <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> { <nl> <nl> ResourceLocation base = baseLocation ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelFluid . java b / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> index eaa286f . . 3337dab 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> @ @ - 397 , 7 + 397 , 7 @ @ public class ModelFluid implements IModelCustomData < ModelFluid > <nl> } <nl> <nl> @ Override <nl> - public ModelFluid process ( ImmutableMap < String , String > customData ) <nl> + public IModel process ( ImmutableMap < String , String > customData ) <nl> { <nl> if ( ! customData . containsKey ( " fluid " ) ) return this ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 9f4c37b . . b565ce7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 591 , 7 + 591 , 7 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> <nl> @ Override <nl> - public VanillaModelWrapper retexture ( ImmutableMap < String , String > textures ) <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> { <nl> if ( textures . isEmpty ( ) ) <nl> return this ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> index e7e584b . . 8a67e2a 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> @ @ - 94 , 7 + 94 , 7 @ @ public class MultiLayerModel implements IModelCustomData < MultiLayerModel > <nl> } <nl> <nl> @ Override <nl> - public MultiLayerModel process ( ImmutableMap < String , String > customData ) <nl> + public IModel process ( ImmutableMap < String , String > customData ) <nl> { <nl> ImmutableMap . Builder < Optional < EnumWorldBlockLayer > , ModelResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> for ( String key : customData . keySet ( ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index e01554c . . 3dfbcc0 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 580 , 7 + 580 , 7 @ @ public class B3DLoader implements ICustomModelLoader <nl> } <nl> <nl> @ Override <nl> - public Wrapper retexture ( ImmutableMap < String , String > textures ) <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> { <nl> ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) <nl> @ @ - 602 , 7 + 602 , 7 @ @ public class B3DLoader implements ICustomModelLoader <nl> } <nl> <nl> @ Override <nl> - public Wrapper process ( ImmutableMap < String , String > customData ) <nl> + public IModel process ( ImmutableMap < String , String > customData ) <nl> { <nl> return this ; <nl> } <nl> @ @ - 712 , 7 + 712 , 7 @ @ public class B3DLoader implements ICustomModelLoader <nl> } <nl> <nl> @ Override <nl> - public ModelWrapper retexture ( ImmutableMap < String , String > textures ) <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> { <nl> ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) <nl> @ @ - 734 , 7 + 734 , 7 @ @ public class B3DLoader implements ICustomModelLoader <nl> } <nl> <nl> @ Override <nl> - public ModelWrapper process ( ImmutableMap < String , String > data ) <nl> + public IModel process ( ImmutableMap < String , String > data ) <nl> { <nl> if ( data . containsKey ( " mesh " ) ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java <nl> index 7c1d03f . . b988721 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java <nl> @ @ - 32 , 16 + 32 , 7 @ @ import net . minecraft . client . resources . model . IBakedModel ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . ResourceLocation ; <nl> - import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> - import net . minecraftforge . client . model . IModelCustomData ; <nl> - import net . minecraftforge . client . model . IModelPart ; <nl> - import net . minecraftforge . client . model . IModelState ; <nl> - import net . minecraftforge . client . model . IPerspectiveAwareModel ; <nl> - import net . minecraftforge . client . model . IRetexturableModel ; <nl> - import net . minecraftforge . client . model . ISmartBlockModel ; <nl> - import net . minecraftforge . client . model . ISmartItemModel ; <nl> - import net . minecraftforge . client . model . ModelLoader ; <nl> - import net . minecraftforge . client . model . TRSRTransformation ; <nl> + import net . minecraftforge . client . model . * ; <nl> import net . minecraftforge . client . model . pipeline . LightUtil ; <nl> import net . minecraftforge . client . model . pipeline . UnpackedBakedQuad ; <nl> import net . minecraftforge . common . property . IExtendedBlockState ; <nl> @ @ - 131 , 14 + 122 , 14 @ @ public class OBJModel implements IRetexturableModel < OBJModel > , IModelCustomData < <nl> } <nl> <nl> @ Override <nl> - public OBJModel process ( ImmutableMap < String , String > customData ) <nl> + public IModel process ( ImmutableMap < String , String > customData ) <nl> { <nl> OBJModel ret = new OBJModel ( this . matLib , this . modelLocation , new CustomData ( this . customData , customData ) ) ; <nl> return ret ; <nl> } <nl> <nl> @ Override <nl> - public OBJModel retexture ( ImmutableMap < String , String > textures ) <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> { <nl> OBJModel ret = new OBJModel ( this . matLib . makeLibWithReplacements ( textures ) , this . modelLocation , this . customData ) ; <nl> return ret ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / AdvancedModelLoader . java b / src / main / java / net / minecraftforge / client / model / AdvancedModelLoader . java <nl> index 5d2afb4 . . c6c9347 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / AdvancedModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / AdvancedModelLoader . java <nl> @ @ - 1 , 10 + 1 , 10 @ @ <nl> package net . minecraftforge . client . model ; <nl> <nl> - import java . io . InputStream ; <nl> import java . net . URL ; <nl> import java . util . Collection ; <nl> import java . util . Map ; <nl> <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . client . model . obj . ObjModelLoader ; <nl> import net . minecraftforge . client . model . techne . TechneModelLoader ; <nl> <nl> @ @ - 40 , 34 + 40 , 29 @ @ public class AdvancedModelLoader { <nl> <nl> / * * <nl> * Load the model from the supplied classpath resolvable resource name <nl> - * @ param resourceName The resource name <nl> + * @ param resource The resource name <nl> * @ return A model <nl> * @ throws IllegalArgumentException if the resource name cannot be understood <nl> * @ throws ModelFormatException if the underlying model handler cannot parse the model format <nl> * / <nl> - public static IModelCustom loadModel ( String resourceName ) throws IllegalArgumentException , ModelFormatException <nl> + public static IModelCustom loadModel ( ResourceLocation resource ) throws IllegalArgumentException , ModelFormatException <nl> { <nl> - int i = resourceName . lastIndexOf ( ' . ' ) ; <nl> + String name = resource . getResourcePath ( ) ; <nl> + int i = name . lastIndexOf ( ' . ' ) ; <nl> if ( i = = - 1 ) <nl> { <nl> - FMLLog . severe ( " The resource name % s is not valid " , resourceName ) ; <nl> + FMLLog . severe ( " The resource name % s is not valid " , resource ) ; <nl> throw new IllegalArgumentException ( " The resource name is not valid " ) ; <nl> } <nl> - String suffix = resourceName . substring ( i + 1 ) ; <nl> + String suffix = name . substring ( i + 1 ) ; <nl> IModelCustomLoader loader = instances . get ( suffix ) ; <nl> if ( loader = = null ) <nl> { <nl> - FMLLog . severe ( " The resource name % s is not supported " , resourceName ) ; <nl> + FMLLog . severe ( " The resource name % s is not supported " , resource ) ; <nl> throw new IllegalArgumentException ( " The resource name is not supported " ) ; <nl> } <nl> <nl> - URL resource = AdvancedModelLoader . class . getResource ( resourceName ) ; <nl> - if ( resource = = null ) <nl> - { <nl> - FMLLog . severe ( " The resource name % s could not be found " , resourceName ) ; <nl> - throw new IllegalArgumentException ( " The resource name could not be found " ) ; <nl> - } <nl> - return loader . loadInstance ( resourceName , resource ) ; <nl> + return loader . loadInstance ( resource ) ; <nl> } <nl> <nl> public static Collection < String > getSupportedSuffixes ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / IModelCustomLoader . java b / src / main / java / net / minecraftforge / client / model / IModelCustomLoader . java <nl> index 8c3e962 . . 6254ce2 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IModelCustomLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IModelCustomLoader . java <nl> @ @ - 3 , 6 + 3 , 8 @ @ package net . minecraftforge . client . model ; <nl> import java . io . InputStream ; <nl> import java . net . URL ; <nl> <nl> + import net . minecraft . util . ResourceLocation ; <nl> + <nl> / * * <nl> * Instances of this class act as factories for their model type <nl> * <nl> @ @ - 22 , 10 + 24 , 9 @ @ public interface IModelCustomLoader { <nl> String [ ] getSuffixes ( ) ; <nl> / * * <nl> * Load a model instance from the supplied path <nl> - * @ param resourceName The resource name to load <nl> - * @ param resource The URL associated with the classloader resource <nl> + * @ param resource The ResourceLocation of the model <nl> * @ return A model instance <nl> * @ throws ModelFormatException if the model format is not correct <nl> * / <nl> - IModelCustom loadInstance ( String resourceName , URL resource ) throws ModelFormatException ; <nl> + IModelCustom loadInstance ( ResourceLocation resource ) throws ModelFormatException ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / obj / ObjModelLoader . java b / src / main / java / net / minecraftforge / client / model / obj / ObjModelLoader . java <nl> index f1ea05e . . 2112c60 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / obj / ObjModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / obj / ObjModelLoader . java <nl> @ @ - 3 , 11 + 3 , 13 @ @ package net . minecraftforge . client . model . obj ; <nl> import java . io . InputStream ; <nl> import java . net . URL ; <nl> <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . client . model . IModelCustom ; <nl> import net . minecraftforge . client . model . IModelCustomLoader ; <nl> import net . minecraftforge . client . model . ModelFormatException ; <nl> <nl> - public class ObjModelLoader implements IModelCustomLoader { <nl> + public class ObjModelLoader implements IModelCustomLoader <nl> + { <nl> <nl> @ Override <nl> public String getType ( ) <nl> @ @ - 23 , 9 + 25 , 8 @ @ public class ObjModelLoader implements IModelCustomLoader { <nl> } <nl> <nl> @ Override <nl> - public IModelCustom loadInstance ( String resourceName , URL resource ) throws ModelFormatException <nl> + public IModelCustom loadInstance ( ResourceLocation resource ) throws ModelFormatException <nl> { <nl> - return new WavefrontObject ( resourceName , resource ) ; <nl> + return new WavefrontObject ( resource ) ; <nl> } <nl> - <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / obj / WavefrontObject . java b / src / main / java / net / minecraftforge / client / model / obj / WavefrontObject . java <nl> index 20f9045 . . 1fb0566 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / obj / WavefrontObject . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / obj / WavefrontObject . java <nl> @ @ - 9 , 7 + 9 , 10 @ @ import java . util . ArrayList ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> <nl> + import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . renderer . Tessellator ; <nl> + import net . minecraft . client . resources . IResource ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . client . model . IModelCustom ; <nl> import net . minecraftforge . client . model . ModelFormatException ; <nl> <nl> @ @ - 46 , 13 + 49 , 14 @ @ public class WavefrontObject implements IModelCustom <nl> private GroupObject currentGroupObject ; <nl> private String fileName ; <nl> <nl> - public WavefrontObject ( String fileName , URL resource ) throws ModelFormatException <nl> + public WavefrontObject ( ResourceLocation resource ) throws ModelFormatException <nl> { <nl> - this . fileName = fileName ; <nl> + this . fileName = resource . toString ( ) ; <nl> <nl> try <nl> { <nl> - loadObjModel ( resource . openStream ( ) ) ; <nl> + IResource res = Minecraft . getMinecraft ( ) . getResourceManager ( ) . getResource ( resource ) ; <nl> + loadObjModel ( res . getInputStream ( ) ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / techne / TechneModel . java b / src / main / java / net / minecraftforge / client / model / techne / TechneModel . java <nl> index d826ac6 . . b84b282 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / techne / TechneModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / techne / TechneModel . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import java . io . ByteArrayInputStream ; <nl> import java . io . File ; <nl> import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . net . URL ; <nl> import java . util . Arrays ; <nl> import java . util . HashMap ; <nl> @ @ - 31 , 10 + 32 , 11 @ @ import org . xml . sax . SAXException ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . relauncher . Side ; <nl> import cpw . mods . fml . relauncher . SideOnly ; <nl> - <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . model . ModelBase ; <nl> import net . minecraft . client . model . ModelRenderer ; <nl> + import net . minecraft . client . resources . IResource ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . client . model . IModelCustom ; <nl> import net . minecraftforge . client . model . ModelFormatException ; <nl> import net . minecraftforge . client . model . obj . GroupObject ; <nl> @ @ - 57 , 17 + 59 , 26 @ @ public class TechneModel extends ModelBase implements IModelCustom { <nl> private int textureName ; <nl> private boolean textureNameSet = false ; <nl> <nl> - public TechneModel ( String fileName , URL resource ) throws ModelFormatException <nl> + public TechneModel ( ResourceLocation resource ) throws ModelFormatException <nl> { <nl> - this . fileName = fileName ; <nl> - loadTechneModel ( resource ) ; <nl> + this . fileName = resource . toString ( ) ; <nl> + <nl> + try <nl> + { <nl> + IResource res = Minecraft . getMinecraft ( ) . getResourceManager ( ) . getResource ( resource ) ; <nl> + loadTechneModel ( res . getInputStream ( ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new ModelFormatException ( " IO Exception reading model format " , e ) ; <nl> + } <nl> } <nl> <nl> - private void loadTechneModel ( URL fileURL ) throws ModelFormatException <nl> + private void loadTechneModel ( InputStream stream ) throws ModelFormatException <nl> { <nl> try <nl> { <nl> - ZipInputStream zipInput = new ZipInputStream ( fileURL . openStream ( ) ) ; <nl> + ZipInputStream zipInput = new ZipInputStream ( stream ) ; <nl> <nl> ZipEntry entry ; <nl> while ( ( entry = zipInput . getNextEntry ( ) ) ! = null ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / techne / TechneModelLoader . java b / src / main / java / net / minecraftforge / client / model / techne / TechneModelLoader . java <nl> index c9dd469 . . 134183a 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / techne / TechneModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / techne / TechneModelLoader . java <nl> @ @ - 4 , 7 + 4 , 7 @ @ import java . net . URL ; <nl> <nl> import cpw . mods . fml . relauncher . Side ; <nl> import cpw . mods . fml . relauncher . SideOnly ; <nl> - <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . client . model . IModelCustom ; <nl> import net . minecraftforge . client . model . IModelCustomLoader ; <nl> import net . minecraftforge . client . model . ModelFormatException ; <nl> @ @ - 25 , 9 + 25 , 9 @ @ public class TechneModelLoader implements IModelCustomLoader { <nl> } <nl> <nl> @ Override <nl> - public IModelCustom loadInstance ( String resourceName , URL resource ) throws ModelFormatException <nl> + public IModelCustom loadInstance ( ResourceLocation resource ) throws ModelFormatException <nl> { <nl> - return new TechneModel ( resourceName , resource ) ; <nl> + return new TechneModel ( resource ) ; <nl> } <nl> <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / IModelWithSubmodels . java b / src / main / java / net / minecraftforge / client / model / IModelWithSubmodels . java 
 new file mode 100644 
 index 0000000 . . f259f9e 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / IModelWithSubmodels . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import com . google . common . collect . ImmutableSet ; 
 + 
 + / * * 
 + * Created by rainwarrior on 2 / 2 / 16 . 
 + * / 
 + public interface IModelWithSubmodels < M extends IModelWithSubmodels < M > > extends IModel 
 + { 
 + M setDefaultSubmodelEnabled ( boolean value ) ; 
 + M setSubmodelsEnabled ( ImmutableSet < String > submodelNames , boolean show ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 index eb5a015 . . 873bcea 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 @ @ - 68 , 7 + 68 , 7 @ @ public class ItemLayerModel implements IRetexturableModel < ItemLayerModel > 
 return TRSRTransformation . identity ( ) ; 
 } 
 
 - public ItemLayerModel retexture ( ImmutableMap < String , String > textures ) 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 { 
 ImmutableList . Builder < ResourceLocation > builder = ImmutableList . builder ( ) ; 
 for ( int i = 0 ; i < textures . size ( ) + this . textures . size ( ) ; i + + ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 index 5855334 . . 983b285 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 @ @ - 140 , 7 + 140 , 7 @ @ public class ModelDynBucket implements IModel , IModelCustomData < ModelDynBucket > , 
 * If the fluid can ' t be found , water is used 
 * / 
 @ Override 
 - public ModelDynBucket process ( ImmutableMap < String , String > customData ) 
 + public IModel process ( ImmutableMap < String , String > customData ) 
 { 
 String fluidName = customData . get ( " fluid " ) ; 
 Fluid fluid = FluidRegistry . getFluid ( fluidName ) ; 
 @ @ - 171 , 7 + 171 , 7 @ @ public class ModelDynBucket implements IModel , IModelCustomData < ModelDynBucket > , 
 * If no liquid is given a hardcoded variant for the bucket is used . 
 * / 
 @ Override 
 - public ModelDynBucket retexture ( ImmutableMap < String , String > textures ) 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 { 
 
 ResourceLocation base = baseLocation ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelFluid . java b / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 index eaa286f . . 3337dab 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 @ @ - 397 , 7 + 397 , 7 @ @ public class ModelFluid implements IModelCustomData < ModelFluid > 
 } 
 
 @ Override 
 - public ModelFluid process ( ImmutableMap < String , String > customData ) 
 + public IModel process ( ImmutableMap < String , String > customData ) 
 { 
 if ( ! customData . containsKey ( " fluid " ) ) return this ; 
 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 9f4c37b . . b565ce7 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 591 , 7 + 591 , 7 @ @ public class ModelLoader extends ModelBakery 
 } 
 
 @ Override 
 - public VanillaModelWrapper retexture ( ImmutableMap < String , String > textures ) 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 { 
 if ( textures . isEmpty ( ) ) 
 return this ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 index e7e584b . . 8a67e2a 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 @ @ - 94 , 7 + 94 , 7 @ @ public class MultiLayerModel implements IModelCustomData < MultiLayerModel > 
 } 
 
 @ Override 
 - public MultiLayerModel process ( ImmutableMap < String , String > customData ) 
 + public IModel process ( ImmutableMap < String , String > customData ) 
 { 
 ImmutableMap . Builder < Optional < EnumWorldBlockLayer > , ModelResourceLocation > builder = ImmutableMap . builder ( ) ; 
 for ( String key : customData . keySet ( ) ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index e01554c . . 3dfbcc0 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 580 , 7 + 580 , 7 @ @ public class B3DLoader implements ICustomModelLoader 
 } 
 
 @ Override 
 - public Wrapper retexture ( ImmutableMap < String , String > textures ) 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 { 
 ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; 
 for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) 
 @ @ - 602 , 7 + 602 , 7 @ @ public class B3DLoader implements ICustomModelLoader 
 } 
 
 @ Override 
 - public Wrapper process ( ImmutableMap < String , String > customData ) 
 + public IModel process ( ImmutableMap < String , String > customData ) 
 { 
 return this ; 
 } 
 @ @ - 712 , 7 + 712 , 7 @ @ public class B3DLoader implements ICustomModelLoader 
 } 
 
 @ Override 
 - public ModelWrapper retexture ( ImmutableMap < String , String > textures ) 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 { 
 ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; 
 for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) 
 @ @ - 734 , 7 + 734 , 7 @ @ public class B3DLoader implements ICustomModelLoader 
 } 
 
 @ Override 
 - public ModelWrapper process ( ImmutableMap < String , String > data ) 
 + public IModel process ( ImmutableMap < String , String > data ) 
 { 
 if ( data . containsKey ( " mesh " ) ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java 
 index 7c1d03f . . b988721 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java 
 @ @ - 32 , 16 + 32 , 7 @ @ import net . minecraft . client . resources . model . IBakedModel ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . ResourceLocation ; 
 - import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 - import net . minecraftforge . client . model . IModelCustomData ; 
 - import net . minecraftforge . client . model . IModelPart ; 
 - import net . minecraftforge . client . model . IModelState ; 
 - import net . minecraftforge . client . model . IPerspectiveAwareModel ; 
 - import net . minecraftforge . client . model . IRetexturableModel ; 
 - import net . minecraftforge . client . model . ISmartBlockModel ; 
 - import net . minecraftforge . client . model . ISmartItemModel ; 
 - import net . minecraftforge . client . model . ModelLoader ; 
 - import net . minecraftforge . client . model . TRSRTransformation ; 
 + import net . minecraftforge . client . model . * ; 
 import net . minecraftforge . client . model . pipeline . LightUtil ; 
 import net . minecraftforge . client . model . pipeline . UnpackedBakedQuad ; 
 import net . minecraftforge . common . property . IExtendedBlockState ; 
 @ @ - 131 , 14 + 122 , 14 @ @ public class OBJModel implements IRetexturableModel < OBJModel > , IModelCustomData < 
 } 
 
 @ Override 
 - public OBJModel process ( ImmutableMap < String , String > customData ) 
 + public IModel process ( ImmutableMap < String , String > customData ) 
 { 
 OBJModel ret = new OBJModel ( this . matLib , this . modelLocation , new CustomData ( this . customData , customData ) ) ; 
 return ret ; 
 } 
 
 @ Override 
 - public OBJModel retexture ( ImmutableMap < String , String > textures ) 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 { 
 OBJModel ret = new OBJModel ( this . matLib . makeLibWithReplacements ( textures ) , this . modelLocation , this . customData ) ; 
 return ret ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / AdvancedModelLoader . java b / src / main / java / net / minecraftforge / client / model / AdvancedModelLoader . java 
 index 5d2afb4 . . c6c9347 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / AdvancedModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / AdvancedModelLoader . java 
 @ @ - 1 , 10 + 1 , 10 @ @ 
 package net . minecraftforge . client . model ; 
 
 - import java . io . InputStream ; 
 import java . net . URL ; 
 import java . util . Collection ; 
 import java . util . Map ; 
 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . client . model . obj . ObjModelLoader ; 
 import net . minecraftforge . client . model . techne . TechneModelLoader ; 
 
 @ @ - 40 , 34 + 40 , 29 @ @ public class AdvancedModelLoader { 
 
 / * * 
 * Load the model from the supplied classpath resolvable resource name 
 - * @ param resourceName The resource name 
 + * @ param resource The resource name 
 * @ return A model 
 * @ throws IllegalArgumentException if the resource name cannot be understood 
 * @ throws ModelFormatException if the underlying model handler cannot parse the model format 
 * / 
 - public static IModelCustom loadModel ( String resourceName ) throws IllegalArgumentException , ModelFormatException 
 + public static IModelCustom loadModel ( ResourceLocation resource ) throws IllegalArgumentException , ModelFormatException 
 { 
 - int i = resourceName . lastIndexOf ( ' . ' ) ; 
 + String name = resource . getResourcePath ( ) ; 
 + int i = name . lastIndexOf ( ' . ' ) ; 
 if ( i = = - 1 ) 
 { 
 - FMLLog . severe ( " The resource name % s is not valid " , resourceName ) ; 
 + FMLLog . severe ( " The resource name % s is not valid " , resource ) ; 
 throw new IllegalArgumentException ( " The resource name is not valid " ) ; 
 } 
 - String suffix = resourceName . substring ( i + 1 ) ; 
 + String suffix = name . substring ( i + 1 ) ; 
 IModelCustomLoader loader = instances . get ( suffix ) ; 
 if ( loader = = null ) 
 { 
 - FMLLog . severe ( " The resource name % s is not supported " , resourceName ) ; 
 + FMLLog . severe ( " The resource name % s is not supported " , resource ) ; 
 throw new IllegalArgumentException ( " The resource name is not supported " ) ; 
 } 
 
 - URL resource = AdvancedModelLoader . class . getResource ( resourceName ) ; 
 - if ( resource = = null ) 
 - { 
 - FMLLog . severe ( " The resource name % s could not be found " , resourceName ) ; 
 - throw new IllegalArgumentException ( " The resource name could not be found " ) ; 
 - } 
 - return loader . loadInstance ( resourceName , resource ) ; 
 + return loader . loadInstance ( resource ) ; 
 } 
 
 public static Collection < String > getSupportedSuffixes ( ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / IModelCustomLoader . java b / src / main / java / net / minecraftforge / client / model / IModelCustomLoader . java 
 index 8c3e962 . . 6254ce2 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IModelCustomLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IModelCustomLoader . java 
 @ @ - 3 , 6 + 3 , 8 @ @ package net . minecraftforge . client . model ; 
 import java . io . InputStream ; 
 import java . net . URL ; 
 
 + import net . minecraft . util . ResourceLocation ; 
 + 
 / * * 
 * Instances of this class act as factories for their model type 
 * 
 @ @ - 22 , 10 + 24 , 9 @ @ public interface IModelCustomLoader { 
 String [ ] getSuffixes ( ) ; 
 / * * 
 * Load a model instance from the supplied path 
 - * @ param resourceName The resource name to load 
 - * @ param resource The URL associated with the classloader resource 
 + * @ param resource The ResourceLocation of the model 
 * @ return A model instance 
 * @ throws ModelFormatException if the model format is not correct 
 * / 
 - IModelCustom loadInstance ( String resourceName , URL resource ) throws ModelFormatException ; 
 + IModelCustom loadInstance ( ResourceLocation resource ) throws ModelFormatException ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / obj / ObjModelLoader . java b / src / main / java / net / minecraftforge / client / model / obj / ObjModelLoader . java 
 index f1ea05e . . 2112c60 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / obj / ObjModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / obj / ObjModelLoader . java 
 @ @ - 3 , 11 + 3 , 13 @ @ package net . minecraftforge . client . model . obj ; 
 import java . io . InputStream ; 
 import java . net . URL ; 
 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . client . model . IModelCustom ; 
 import net . minecraftforge . client . model . IModelCustomLoader ; 
 import net . minecraftforge . client . model . ModelFormatException ; 
 
 - public class ObjModelLoader implements IModelCustomLoader { 
 + public class ObjModelLoader implements IModelCustomLoader 
 + { 
 
 @ Override 
 public String getType ( ) 
 @ @ - 23 , 9 + 25 , 8 @ @ public class ObjModelLoader implements IModelCustomLoader { 
 } 
 
 @ Override 
 - public IModelCustom loadInstance ( String resourceName , URL resource ) throws ModelFormatException 
 + public IModelCustom loadInstance ( ResourceLocation resource ) throws ModelFormatException 
 { 
 - return new WavefrontObject ( resourceName , resource ) ; 
 + return new WavefrontObject ( resource ) ; 
 } 
 - 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / obj / WavefrontObject . java b / src / main / java / net / minecraftforge / client / model / obj / WavefrontObject . java 
 index 20f9045 . . 1fb0566 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / obj / WavefrontObject . java 
 + + + b / src / main / java / net / minecraftforge / client / model / obj / WavefrontObject . java 
 @ @ - 9 , 7 + 9 , 10 @ @ import java . util . ArrayList ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 
 + import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . renderer . Tessellator ; 
 + import net . minecraft . client . resources . IResource ; 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . client . model . IModelCustom ; 
 import net . minecraftforge . client . model . ModelFormatException ; 
 
 @ @ - 46 , 13 + 49 , 14 @ @ public class WavefrontObject implements IModelCustom 
 private GroupObject currentGroupObject ; 
 private String fileName ; 
 
 - public WavefrontObject ( String fileName , URL resource ) throws ModelFormatException 
 + public WavefrontObject ( ResourceLocation resource ) throws ModelFormatException 
 { 
 - this . fileName = fileName ; 
 + this . fileName = resource . toString ( ) ; 
 
 try 
 { 
 - loadObjModel ( resource . openStream ( ) ) ; 
 + IResource res = Minecraft . getMinecraft ( ) . getResourceManager ( ) . getResource ( resource ) ; 
 + loadObjModel ( res . getInputStream ( ) ) ; 
 } 
 catch ( IOException e ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / model / techne / TechneModel . java b / src / main / java / net / minecraftforge / client / model / techne / TechneModel . java 
 index d826ac6 . . b84b282 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / techne / TechneModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / techne / TechneModel . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . io . ByteArrayInputStream ; 
 import java . io . File ; 
 import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . net . URL ; 
 import java . util . Arrays ; 
 import java . util . HashMap ; 
 @ @ - 31 , 10 + 32 , 11 @ @ import org . xml . sax . SAXException ; 
 import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . relauncher . Side ; 
 import cpw . mods . fml . relauncher . SideOnly ; 
 - 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . model . ModelBase ; 
 import net . minecraft . client . model . ModelRenderer ; 
 + import net . minecraft . client . resources . IResource ; 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . client . model . IModelCustom ; 
 import net . minecraftforge . client . model . ModelFormatException ; 
 import net . minecraftforge . client . model . obj . GroupObject ; 
 @ @ - 57 , 17 + 59 , 26 @ @ public class TechneModel extends ModelBase implements IModelCustom { 
 private int textureName ; 
 private boolean textureNameSet = false ; 
 
 - public TechneModel ( String fileName , URL resource ) throws ModelFormatException 
 + public TechneModel ( ResourceLocation resource ) throws ModelFormatException 
 { 
 - this . fileName = fileName ; 
 - loadTechneModel ( resource ) ; 
 + this . fileName = resource . toString ( ) ; 
 + 
 + try 
 + { 
 + IResource res = Minecraft . getMinecraft ( ) . getResourceManager ( ) . getResource ( resource ) ; 
 + loadTechneModel ( res . getInputStream ( ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new ModelFormatException ( " IO Exception reading model format " , e ) ; 
 + } 
 } 
 
 - private void loadTechneModel ( URL fileURL ) throws ModelFormatException 
 + private void loadTechneModel ( InputStream stream ) throws ModelFormatException 
 { 
 try 
 { 
 - ZipInputStream zipInput = new ZipInputStream ( fileURL . openStream ( ) ) ; 
 + ZipInputStream zipInput = new ZipInputStream ( stream ) ; 
 
 ZipEntry entry ; 
 while ( ( entry = zipInput . getNextEntry ( ) ) ! = null ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / techne / TechneModelLoader . java b / src / main / java / net / minecraftforge / client / model / techne / TechneModelLoader . java 
 index c9dd469 . . 134183a 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / techne / TechneModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / techne / TechneModelLoader . java 
 @ @ - 4 , 7 + 4 , 7 @ @ import java . net . URL ; 
 
 import cpw . mods . fml . relauncher . Side ; 
 import cpw . mods . fml . relauncher . SideOnly ; 
 - 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . client . model . IModelCustom ; 
 import net . minecraftforge . client . model . IModelCustomLoader ; 
 import net . minecraftforge . client . model . ModelFormatException ; 
 @ @ - 25 , 9 + 25 , 9 @ @ public class TechneModelLoader implements IModelCustomLoader { 
 } 
 
 @ Override 
 - public IModelCustom loadInstance ( String resourceName , URL resource ) throws ModelFormatException 
 + public IModelCustom loadInstance ( ResourceLocation resource ) throws ModelFormatException 
 { 
 - return new TechneModel ( resourceName , resource ) ; 
 + return new TechneModel ( resource ) ; 
 } 
 
 }
