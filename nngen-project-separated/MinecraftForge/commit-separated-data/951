BLEU SCORE: 0.013139808552042212

TEST MSG: Two more corner cases in the oredictionary . Should work for all cases now .
GENERATED MSG: Add an ItemStack sensitive version of getIconForRenderPass , defers to

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> index 2293518 . . 50dd6fc 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package net . minecraftforge . oredict ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> @ @ - 301 , 7 + 302 , 20 @ @ public class OreDictionary <nl> { <nl> if ( stack = = null | | stack . getItem ( ) = = null ) return - 1 ; <nl> <nl> - int id = Item . getIdFromItem ( stack . getItem ( ) ) ; <nl> + / / HACK : use the registry name ' s ID . It is unique and it knows about substitutions . Fallback to a - 1 value ( what Item . getIDForItem would have returned ) in the case where the registry is not aware of the item yet <nl> + / / IT should be noted that - 1 will fail the gate further down , if an entry already exists with value - 1 for this name . This is what is broken and being warned about . <nl> + / / APPARENTLY it ' s quite common to do this . OreDictionary should be considered alongside Recipes - you can ' t make them properly until you ' ve registered with the game . <nl> + String registryName = stack . getItem ( ) . delegate . name ( ) ; <nl> + int id ; <nl> + if ( registryName = = null ) <nl> + { <nl> + FMLLog . log ( Level . DEBUG , " Attempted to find the oreIDs for an unregistered object ( % s ) . This won ' t work very well . " , stack ) ; <nl> + return - 1 ; <nl> + } <nl> + else <nl> + { <nl> + id = GameData . getItemRegistry ( ) . getId ( registryName ) ; <nl> + } <nl> List < Integer > ids = stackToId . get ( id ) ; / / Try the wildcard first <nl> if ( ids = = null | | ids . size ( ) = = 0 ) <nl> { <nl> @ @ - 323 , 7 + 337 , 20 @ @ public class OreDictionary <nl> <nl> Set < Integer > set = new HashSet < Integer > ( ) ; <nl> <nl> - int id = Item . getIdFromItem ( stack . getItem ( ) ) ; <nl> + / / HACK : use the registry name ' s ID . It is unique and it knows about substitutions . Fallback to a - 1 value ( what Item . getIDForItem would have returned ) in the case where the registry is not aware of the item yet <nl> + / / IT should be noted that - 1 will fail the gate further down , if an entry already exists with value - 1 for this name . This is what is broken and being warned about . <nl> + / / APPARENTLY it ' s quite common to do this . OreDictionary should be considered alongside Recipes - you can ' t make them properly until you ' ve registered with the game . <nl> + String registryName = stack . getItem ( ) . delegate . name ( ) ; <nl> + int id ; <nl> + if ( registryName = = null ) <nl> + { <nl> + FMLLog . log ( Level . DEBUG , " Attempted to find the oreIDs for an unregistered object ( % s ) . This won ' t work very well . " , stack ) ; <nl> + return new int [ 0 ] ; <nl> + } <nl> + else <nl> + { <nl> + id = GameData . getItemRegistry ( ) . getId ( registryName ) ; <nl> + } <nl> List < Integer > ids = stackToId . get ( id ) ; <nl> if ( ids ! = null ) set . addAll ( ids ) ; <nl> ids = stackToId . get ( id | ( ( stack . getItemDamage ( ) + 1 ) < < 16 ) ) ; <nl> @ @ - 354 , 39 + 381 , 39 @ @ public class OreDictionary <nl> / * * <nl> * Retrieves the List of items that are registered to this ore type at this instant . <nl> * If the flag is TRUE , then it will create the list as empty if it did not exist . <nl> - * <nl> + * <nl> * This option should be used by modders who are doing blanket scans in postInit . <nl> * It greatly reduces clutter in the OreDictionary is the responsible and proper <nl> * way to use the dictionary in a large number of cases . <nl> - * <nl> + * <nl> * The other function above is utilized in OreRecipe and is required for the <nl> * operation of that code . <nl> - * <nl> + * <nl> * @ param name The ore name , directly calls getOreID if the flag is TRUE <nl> * @ param alwaysCreateEntry Flag - should a new entry be created if empty <nl> * @ return An arraylist containing ItemStacks registered for this ore <nl> * / <nl> public static List < ItemStack > getOres ( String name , boolean alwaysCreateEntry ) <nl> { <nl> - 	 if ( alwaysCreateEntry ) { <nl> - 	 	 return getOres ( getOreID ( name ) ) ; <nl> - 	 } <nl> - 	 return nameToId . get ( name ) ! = null ? getOres ( getOreID ( name ) ) : EMPTY _ LIST ; <nl> + if ( alwaysCreateEntry ) { <nl> + return getOres ( getOreID ( name ) ) ; <nl> + } <nl> + return nameToId . get ( name ) ! = null ? getOres ( getOreID ( name ) ) : EMPTY _ LIST ; <nl> } <nl> <nl> / * * <nl> * Returns whether or not an oreName exists in the dictionary . <nl> * This function can be used to safely query the Ore Dictionary without <nl> * adding needless clutter to the underlying map structure . <nl> - * <nl> + * <nl> * Please use this when possible and appropriate . <nl> - * <nl> + * <nl> * @ param name The ore name <nl> * @ return Whether or not that name is in the Ore Dictionary . <nl> * / <nl> public static boolean doesOreNameExist ( String name ) <nl> { <nl> - 	 return nameToId . get ( name ) ! = null ; <nl> + return nameToId . get ( name ) ! = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 492 , 8 + 519 , 8 @ @ public class OreDictionary <nl> if ( name = = null | | name . isEmpty ( ) | | " Unknown " . equals ( name ) ) return ; / / prevent bad IDs . <nl> if ( ore = = null | | ore . getItem ( ) = = null ) <nl> { <nl> - 	 FMLLog . bigWarning ( " Invalid registration attempt for an Ore Dictionary item with name % s has occurred . The registration has been denied to prevent crashes . The mod responsible for the registration needs to correct this . " , name ) ; <nl> - 	 return ; / / prevent bad ItemStacks . <nl> + FMLLog . bigWarning ( " Invalid registration attempt for an Ore Dictionary item with name % s has occurred . The registration has been denied to prevent crashes . The mod responsible for the registration needs to correct this . " , name ) ; <nl> + return ; / / prevent bad ItemStacks . <nl> } <nl> <nl> int oreID = getOreID ( name ) ;
NEAREST DIFF (one line): diff - - git a / patches / common / net / minecraft / src / EntityPlayer . java . patch b / patches / common / net / minecraft / src / EntityPlayer . java . patch <nl> index e687f13 . . d5b7d3d 100644 <nl> - - - a / patches / common / net / minecraft / src / EntityPlayer . java . patch <nl> + + + b / patches / common / net / minecraft / src / EntityPlayer . java . patch <nl> @ @ - 299 , 6 + 299 , 15 @ @ <nl> <nl> switch ( var2 ) <nl> { <nl> + @ @ - 1774 , 7 + 1874 , 7 @ @ <nl> + { <nl> + if ( par1ItemStack . getItem ( ) . requiresMultipleRenderPasses ( ) ) <nl> + { <nl> + - return par1ItemStack . getItem ( ) . getIconFromDamageForRenderPass ( par1ItemStack . getItemDamage ( ) , par2 ) ; <nl> + + return par1ItemStack . getItem ( ) . getIconFromItemStackForMultiplePasses ( par1ItemStack , par2 ) ; <nl> + } <nl> + <nl> + if ( this . itemInUse ! = null & & par1ItemStack . itemID = = Item . bow . shiftedIndex ) <nl> @ @ - 1796 , 6 + 1896 , 7 @ @ <nl> return 101 ; <nl> } <nl> diff - - git a / patches / common / net / minecraft / src / Item . java . patch b / patches / common / net / minecraft / src / Item . java . patch <nl> index f61ef43 . . 5de76bd 100644 <nl> - - - a / patches / common / net / minecraft / src / Item . java . patch <nl> + + + b / patches / common / net / minecraft / src / Item . java . patch <nl> @ @ - 37 , 7 + 37 , 7 @ @ <nl> Vec3 var23 = var13 . addVector ( ( double ) var18 * var21 , ( double ) var17 * var21 , ( double ) var20 * var21 ) ; <nl> return par1World . rayTraceBlocks _ do _ do ( var13 , var23 , par3 , ! par3 ) ; <nl> } <nl> - @ @ - 678 , 4 + 690 , 266 @ @ <nl> + @ @ - 678 , 4 + 690 , 279 @ @ <nl> { <nl> StatList . initStats ( ) ; <nl> } <nl> @ @ - 51 , 7 + 51 , 7 @ @ <nl> + * returning false from this will prevent the item from <nl> + * being removed from the players inventory and spawning <nl> + * in the world <nl> - + * <nl> + + * <nl> + * @ param player The player that dropped the item <nl> + * @ param item The item stack , before the item is removed . <nl> + * / <nl> @ @ - 71 , 17 + 71 , 17 @ @ <nl> + * @ param side The side of the target hit <nl> + * @ return Return true to prevent any further processing . <nl> + * / <nl> - + public boolean onItemUseFirst ( ItemStack stack , EntityPlayer player , World world , int x , int y , int z , int side , float hitX , float hitY , float hitZ ) <nl> + + public boolean onItemUseFirst ( ItemStack stack , EntityPlayer player , World world , int x , int y , int z , int side , float hitX , float hitY , float hitZ ) <nl> + { <nl> + return onItemUseFirst ( stack , player , world , x , y , z , side ) ; <nl> + } <nl> - + <nl> + + <nl> + / * * <nl> + * See onItemUseFirst above , this is deprecated in favor of the more aware version . <nl> + * Only here for compaibility . <nl> + * / <nl> + @ Deprecated <nl> - + public boolean onItemUseFirst ( ItemStack stack , EntityPlayer player , World world , int x , int y , int z , int side ) <nl> + + public boolean onItemUseFirst ( ItemStack stack , EntityPlayer player , World world , int x , int y , int z , int side ) <nl> + { <nl> + return false ; <nl> + } <nl> @ @ - 102 , 7 + 102 , 7 @ @ <nl> + * Called by CraftingManager to determine if an item is reparable . <nl> + * @ return True if reparable <nl> + * / <nl> - + public boolean isRepairable ( ) <nl> + + public boolean isRepairable ( ) <nl> + { <nl> + return canRepair & & isDamageable ( ) ; <nl> + } <nl> @ @ - 111 , 7 + 111 , 7 @ @ <nl> + * Call to disable repair recipes . <nl> + * @ return The current Item instance <nl> + * / <nl> - + public Item setNoRepair ( ) <nl> + + public Item setNoRepair ( ) <nl> + { <nl> + canRepair = false ; <nl> + return this ; <nl> @ @ - 121 , 7 + 121 , 7 @ @ <nl> + * Called before a block is broken . Return true to prevent default block harvesting . <nl> + * <nl> + * Note : In SMP , this is called on both client and server sides ! <nl> - + * <nl> + + * <nl> + * @ param itemstack The current ItemStack <nl> + * @ param X The X Position <nl> + * @ param Y The X Position <nl> @ @ - 129 , 7 + 129 , 7 @ @ <nl> + * @ param player The Player that is wielding the item <nl> + * @ return True to prevent harvesting , false to continue as normal <nl> + * / <nl> - + public boolean onBlockStartBreak ( ItemStack itemstack , int X , int Y , int Z , EntityPlayer player ) <nl> + + public boolean onBlockStartBreak ( ItemStack itemstack , int X , int Y , int Z , EntityPlayer player ) <nl> + { <nl> + return false ; <nl> + } <nl> @ @ - 140 , 7 + 140 , 7 @ @ <nl> + * @ param player The Player using the item <nl> + * @ param count The amount of time in tick the item has been used for continuously <nl> + * / <nl> - + public void onUsingItemTick ( ItemStack stack , EntityPlayer player , int count ) <nl> + + public void onUsingItemTick ( ItemStack stack , EntityPlayer player , int count ) <nl> + { <nl> + } <nl> + <nl> @ @ - 148 , 20 + 148 , 20 @ @ <nl> + * Called when the player Left Clicks ( attacks ) an entity . <nl> + * Processed before damage is done , if return value is true further processing is canceled <nl> + * and the entity is not attacked . <nl> - + * <nl> + + * <nl> + * @ param stack The Item being used <nl> + * @ param player The player that is attacking <nl> + * @ param entity The entity being attacked <nl> + * @ return True to cancel the rest of the interaction . <nl> + * / <nl> - + public boolean onLeftClickEntity ( ItemStack stack , EntityPlayer player , Entity entity ) <nl> + + public boolean onLeftClickEntity ( ItemStack stack , EntityPlayer player , Entity entity ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + / * * <nl> + * Player , Render pass , and item usage sensitive version of getIconIndex . <nl> - + * <nl> + + * <nl> + * @ param stack The item stack to get the icon for . ( Usually this , and usingItem will be the same if usingItem is not null ) <nl> + * @ param renderPass The pass to get the icon for , 0 is default . <nl> + * @ param player The player holding the item <nl> @ @ - 188 , 7 + 188 , 7 @ @ <nl> + * Returns the number of render passes / layers this item has . <nl> + * Usually equates to ItemRenderer . renderItem being called for this many passes . <nl> + * Does not get called unless requiresMultipleRenderPasses ( ) is true ; <nl> - + * <nl> + + * <nl> + * @ param metadata The item ' s metadata <nl> + * @ return The number of passes to run . <nl> + * / <nl> @ @ - 212 , 7 + 212 , 7 @ @ <nl> + / * * <nl> + * Sets the current texture file for this item , used when rendering . <nl> + * Default is " / gui / items . png " <nl> - + * <nl> + + * <nl> + * @ param texture The texture file <nl> + * / <nl> + public Item setTextureFile ( String texture ) <nl> @ @ - 225 , 7 + 225 , 7 @ @ <nl> + / * * <nl> + * ItemStack sensitive version of getContainerItem . <nl> + * Returns a full ItemStack instance of the result . <nl> - + * <nl> + + * <nl> + * @ param itemStack The current ItemStack <nl> + * @ return The resulting ItemStack <nl> + * / <nl> @ @ - 241 , 7 + 241 , 7 @ @ <nl> + / * * <nl> + * Retrieves the normal ' lifespan ' of this item when it is dropped on the ground as a EntityItem . <nl> + * This is in ticks , standard result is 6000 , or 5 mins . <nl> - + * <nl> + + * <nl> + * @ param itemStack The current ItemStack <nl> + * @ param world The world the entity is in <nl> + * @ return The normal lifespan in ticks . <nl> @ @ - 253 , 9 + 253 , 9 @ @ <nl> + <nl> + / * * <nl> + * Determines if this Item has a special entity for when they are in the world . <nl> - + * Is called when a EntityItem is spawned in the world , if true and Item # createCustomEntity <nl> + + * Is called when a EntityItem is spawned in the world , if true and Item # createCustomEntity <nl> + * returns non null , the EntityItem will be destroyed and the new Entity will be added to the world . <nl> - + * <nl> + + * <nl> + * @ param stack The current item stack <nl> + * @ return True of the item has a custom entity , If true , Item # createCustomEntity will be called <nl> + * / <nl> @ @ - 268 , 7 + 268 , 7 @ @ <nl> + * This function should return a new entity to replace the dropped item . <nl> + * Returning null here will not kill the EntityItem and will leave it to function normally . <nl> + * Called when the item it placed in a world . <nl> - + * <nl> + + * <nl> + * @ param world The world object <nl> + * @ param location The EntityItem object , useful for getting the position of the entity <nl> + * @ param itemstack The current item stack <nl> @ @ - 280 , 10 + 280 , 10 @ @ <nl> + } <nl> + <nl> + / * * <nl> - + * Gets a list of tabs that items belonging to this class can display on , <nl> - + * combined properly with getSubItems allows for a single item to span <nl> + + * Gets a list of tabs that items belonging to this class can display on , <nl> + + * combined properly with getSubItems allows for a single item to span <nl> + * many sub - items across many tabs . <nl> - + * <nl> + + * <nl> + * @ return A list of all tabs that this item could possibly be one . <nl> + * / <nl> + public CreativeTabs [ ] getCreativeTabs ( ) <nl> @ @ - 293 , 9 + 293 , 9 @ @ <nl> + <nl> + / * * <nl> + * Determines the base experience for a player when they remove this item from a furnace slot . <nl> - + * This number must be between 0 and 1 for it to be valid . <nl> - + * This number will be multiplied by the stack size to get the total experience . <nl> - + * <nl> + + * This number must be between 0 and 1 for it to be valid . <nl> + + * This number will be multiplied by the stack size to get the total experience . <nl> + + * <nl> + * @ param item The item stack the player is picking up . <nl> + * @ return The amount to award for each item . <nl> + * / <nl> @ @ - 303 , 4 + 303 , 17 @ @ <nl> + { <nl> + return - 1 ; / / - 1 will default to the old lookups . <nl> + } <nl> + + <nl> + + / * * <nl> + + * Return the correct icon for rendering based on the supplied ItemStack and render pass . <nl> + + * <nl> + + * Defers to { @ link # getIconFromDamageForRenderPass ( int , int ) } <nl> + + * @ param stack to render for <nl> + + * @ param pass the multi - render pass <nl> + + * @ return the icon index <nl> + + * / <nl> + + public int getIconFromItemStackForMultiplePasses ( ItemStack stack , int pass ) <nl> + + { <nl> + + 	 return getIconFromDamageForRenderPass ( stack . getItemDamage ( ) , pass ) ; <nl> + + } <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / src / RenderItem . java . patch b / patches / minecraft / net / minecraft / src / RenderItem . java . patch <nl> index 6aef843 . . 6827aa1 100644 <nl> - - - a / patches / minecraft / net / minecraft / src / RenderItem . java . patch <nl> + + + b / patches / minecraft / net / minecraft / src / RenderItem . java . patch <nl> @ @ - 49 , 7 + 49 , 7 @ @ <nl> GL11 . glPopMatrix ( ) ; <nl> } <nl> } <nl> - @ @ - 121 , 10 + 126 , 11 @ @ <nl> + @ @ - 121 , 11 + 126 , 12 @ @ <nl> GL11 . glScalef ( 0 . 5F , 0 . 5F , 0 . 5F ) ; <nl> } <nl> <nl> @ @ - 57 , 14 + 57 , 16 @ @ <nl> - <nl> - for ( var15 = 0 ; var15 < = 1 ; + + var15 ) <nl> - { <nl> + - var16 = var10 . getItem ( ) . getIconFromDamageForRenderPass ( var10 . getItemDamage ( ) , var15 ) ; <nl> + this . loadTexture ( Item . itemsList [ var10 . itemID ] . getTextureFile ( ) ) ; <nl> + <nl> + for ( var15 = 0 ; var15 < var10 . getItem ( ) . getRenderPasses ( var10 . getItemDamage ( ) ) ; + + var15 ) <nl> + { <nl> + this . random . setSeed ( 187L ) ; / / Fixes Vanilla bug where layers would not render aligns properly . <nl> - var16 = var10 . getItem ( ) . getIconFromDamageForRenderPass ( var10 . getItemDamage ( ) , var15 ) ; <nl> + + var16 = var10 . getItem ( ) . getIconFromItemStackForMultiplePasses ( var10 , var15 ) ; <nl> var17 = 1 . 0F ; <nl> <nl> + if ( this . field _ 77024 _ a ) <nl> @ @ - 155 , 14 + 161 , 7 @ @ <nl> <nl> var15 = var10 . getIconIndex ( ) ; <nl> @ @ - 95 , 19 + 97 , 23 @ @ <nl> GL11 . glPushMatrix ( ) ; <nl> GL11 . glTranslatef ( ( float ) ( par4 - 2 ) , ( float ) ( par5 + 3 ) , - 3 . 0F + this . zLevel ) ; <nl> GL11 . glScalef ( 10 . 0F , 10 . 0F , 10 . 0F ) ; <nl> - @ @ - 265 , 9 + 264 , 9 @ @ <nl> + @ @ - 265 , 11 + 264 , 11 @ @ <nl> if ( Item . itemsList [ var6 ] . requiresMultipleRenderPasses ( ) ) <nl> { <nl> GL11 . glDisable ( GL11 . GL _ LIGHTING ) ; <nl> - par2RenderEngine . bindTexture ( par2RenderEngine . getTexture ( " / gui / items . png " ) ) ; <nl> - <nl> - for ( var9 = 0 ; var9 < = 1 ; + + var9 ) <nl> + - { <nl> + - var10 = Item . itemsList [ var6 ] . getIconFromDamageForRenderPass ( var7 , var9 ) ; <nl> + par2RenderEngine . bindTexture ( par2RenderEngine . getTexture ( Item . itemsList [ var6 ] . getTextureFile ( ) ) ) ; <nl> + <nl> + for ( var9 = 0 ; var9 < Item . itemsList [ var6 ] . getRenderPasses ( var7 ) ; + + var9 ) <nl> - { <nl> - var10 = Item . itemsList [ var6 ] . getIconFromDamageForRenderPass ( var7 , var9 ) ; <nl> + + { <nl> + + var10 = Item . itemsList [ var6 ] . getIconFromItemStackForMultiplePasses ( par3ItemStack , var9 ) ; <nl> int var11 = Item . itemsList [ var6 ] . getColorFromItemStack ( par3ItemStack , var9 ) ; <nl> + var12 = ( float ) ( var11 > > 16 & 255 ) / 255 . 0F ; <nl> + var13 = ( float ) ( var11 > > 8 & 255 ) / 255 . 0F ; <nl> @ @ - 289 , 14 + 288 , 7 @ @ <nl> { <nl> GL11 . glDisable ( GL11 . GL _ LIGHTING ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 index 2293518 . . 50dd6fc 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 + + + b / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package net . minecraftforge . oredict ; 
 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 @ @ - 301 , 7 + 302 , 20 @ @ public class OreDictionary 
 { 
 if ( stack = = null | | stack . getItem ( ) = = null ) return - 1 ; 
 
 - int id = Item . getIdFromItem ( stack . getItem ( ) ) ; 
 + / / HACK : use the registry name ' s ID . It is unique and it knows about substitutions . Fallback to a - 1 value ( what Item . getIDForItem would have returned ) in the case where the registry is not aware of the item yet 
 + / / IT should be noted that - 1 will fail the gate further down , if an entry already exists with value - 1 for this name . This is what is broken and being warned about . 
 + / / APPARENTLY it ' s quite common to do this . OreDictionary should be considered alongside Recipes - you can ' t make them properly until you ' ve registered with the game . 
 + String registryName = stack . getItem ( ) . delegate . name ( ) ; 
 + int id ; 
 + if ( registryName = = null ) 
 + { 
 + FMLLog . log ( Level . DEBUG , " Attempted to find the oreIDs for an unregistered object ( % s ) . This won ' t work very well . " , stack ) ; 
 + return - 1 ; 
 + } 
 + else 
 + { 
 + id = GameData . getItemRegistry ( ) . getId ( registryName ) ; 
 + } 
 List < Integer > ids = stackToId . get ( id ) ; / / Try the wildcard first 
 if ( ids = = null | | ids . size ( ) = = 0 ) 
 { 
 @ @ - 323 , 7 + 337 , 20 @ @ public class OreDictionary 
 
 Set < Integer > set = new HashSet < Integer > ( ) ; 
 
 - int id = Item . getIdFromItem ( stack . getItem ( ) ) ; 
 + / / HACK : use the registry name ' s ID . It is unique and it knows about substitutions . Fallback to a - 1 value ( what Item . getIDForItem would have returned ) in the case where the registry is not aware of the item yet 
 + / / IT should be noted that - 1 will fail the gate further down , if an entry already exists with value - 1 for this name . This is what is broken and being warned about . 
 + / / APPARENTLY it ' s quite common to do this . OreDictionary should be considered alongside Recipes - you can ' t make them properly until you ' ve registered with the game . 
 + String registryName = stack . getItem ( ) . delegate . name ( ) ; 
 + int id ; 
 + if ( registryName = = null ) 
 + { 
 + FMLLog . log ( Level . DEBUG , " Attempted to find the oreIDs for an unregistered object ( % s ) . This won ' t work very well . " , stack ) ; 
 + return new int [ 0 ] ; 
 + } 
 + else 
 + { 
 + id = GameData . getItemRegistry ( ) . getId ( registryName ) ; 
 + } 
 List < Integer > ids = stackToId . get ( id ) ; 
 if ( ids ! = null ) set . addAll ( ids ) ; 
 ids = stackToId . get ( id | ( ( stack . getItemDamage ( ) + 1 ) < < 16 ) ) ; 
 @ @ - 354 , 39 + 381 , 39 @ @ public class OreDictionary 
 / * * 
 * Retrieves the List of items that are registered to this ore type at this instant . 
 * If the flag is TRUE , then it will create the list as empty if it did not exist . 
 - * 
 + * 
 * This option should be used by modders who are doing blanket scans in postInit . 
 * It greatly reduces clutter in the OreDictionary is the responsible and proper 
 * way to use the dictionary in a large number of cases . 
 - * 
 + * 
 * The other function above is utilized in OreRecipe and is required for the 
 * operation of that code . 
 - * 
 + * 
 * @ param name The ore name , directly calls getOreID if the flag is TRUE 
 * @ param alwaysCreateEntry Flag - should a new entry be created if empty 
 * @ return An arraylist containing ItemStacks registered for this ore 
 * / 
 public static List < ItemStack > getOres ( String name , boolean alwaysCreateEntry ) 
 { 
 - 	 if ( alwaysCreateEntry ) { 
 - 	 	 return getOres ( getOreID ( name ) ) ; 
 - 	 } 
 - 	 return nameToId . get ( name ) ! = null ? getOres ( getOreID ( name ) ) : EMPTY _ LIST ; 
 + if ( alwaysCreateEntry ) { 
 + return getOres ( getOreID ( name ) ) ; 
 + } 
 + return nameToId . get ( name ) ! = null ? getOres ( getOreID ( name ) ) : EMPTY _ LIST ; 
 } 
 
 / * * 
 * Returns whether or not an oreName exists in the dictionary . 
 * This function can be used to safely query the Ore Dictionary without 
 * adding needless clutter to the underlying map structure . 
 - * 
 + * 
 * Please use this when possible and appropriate . 
 - * 
 + * 
 * @ param name The ore name 
 * @ return Whether or not that name is in the Ore Dictionary . 
 * / 
 public static boolean doesOreNameExist ( String name ) 
 { 
 - 	 return nameToId . get ( name ) ! = null ; 
 + return nameToId . get ( name ) ! = null ; 
 } 
 
 / * * 
 @ @ - 492 , 8 + 519 , 8 @ @ public class OreDictionary 
 if ( name = = null | | name . isEmpty ( ) | | " Unknown " . equals ( name ) ) return ; / / prevent bad IDs . 
 if ( ore = = null | | ore . getItem ( ) = = null ) 
 { 
 - 	 FMLLog . bigWarning ( " Invalid registration attempt for an Ore Dictionary item with name % s has occurred . The registration has been denied to prevent crashes . The mod responsible for the registration needs to correct this . " , name ) ; 
 - 	 return ; / / prevent bad ItemStacks . 
 + FMLLog . bigWarning ( " Invalid registration attempt for an Ore Dictionary item with name % s has occurred . The registration has been denied to prevent crashes . The mod responsible for the registration needs to correct this . " , name ) ; 
 + return ; / / prevent bad ItemStacks . 
 } 
 
 int oreID = getOreID ( name ) ;

NEAREST DIFF:
diff - - git a / patches / common / net / minecraft / src / EntityPlayer . java . patch b / patches / common / net / minecraft / src / EntityPlayer . java . patch 
 index e687f13 . . d5b7d3d 100644 
 - - - a / patches / common / net / minecraft / src / EntityPlayer . java . patch 
 + + + b / patches / common / net / minecraft / src / EntityPlayer . java . patch 
 @ @ - 299 , 6 + 299 , 15 @ @ 
 
 switch ( var2 ) 
 { 
 + @ @ - 1774 , 7 + 1874 , 7 @ @ 
 + { 
 + if ( par1ItemStack . getItem ( ) . requiresMultipleRenderPasses ( ) ) 
 + { 
 + - return par1ItemStack . getItem ( ) . getIconFromDamageForRenderPass ( par1ItemStack . getItemDamage ( ) , par2 ) ; 
 + + return par1ItemStack . getItem ( ) . getIconFromItemStackForMultiplePasses ( par1ItemStack , par2 ) ; 
 + } 
 + 
 + if ( this . itemInUse ! = null & & par1ItemStack . itemID = = Item . bow . shiftedIndex ) 
 @ @ - 1796 , 6 + 1896 , 7 @ @ 
 return 101 ; 
 } 
 diff - - git a / patches / common / net / minecraft / src / Item . java . patch b / patches / common / net / minecraft / src / Item . java . patch 
 index f61ef43 . . 5de76bd 100644 
 - - - a / patches / common / net / minecraft / src / Item . java . patch 
 + + + b / patches / common / net / minecraft / src / Item . java . patch 
 @ @ - 37 , 7 + 37 , 7 @ @ 
 Vec3 var23 = var13 . addVector ( ( double ) var18 * var21 , ( double ) var17 * var21 , ( double ) var20 * var21 ) ; 
 return par1World . rayTraceBlocks _ do _ do ( var13 , var23 , par3 , ! par3 ) ; 
 } 
 - @ @ - 678 , 4 + 690 , 266 @ @ 
 + @ @ - 678 , 4 + 690 , 279 @ @ 
 { 
 StatList . initStats ( ) ; 
 } 
 @ @ - 51 , 7 + 51 , 7 @ @ 
 + * returning false from this will prevent the item from 
 + * being removed from the players inventory and spawning 
 + * in the world 
 - + * 
 + + * 
 + * @ param player The player that dropped the item 
 + * @ param item The item stack , before the item is removed . 
 + * / 
 @ @ - 71 , 17 + 71 , 17 @ @ 
 + * @ param side The side of the target hit 
 + * @ return Return true to prevent any further processing . 
 + * / 
 - + public boolean onItemUseFirst ( ItemStack stack , EntityPlayer player , World world , int x , int y , int z , int side , float hitX , float hitY , float hitZ ) 
 + + public boolean onItemUseFirst ( ItemStack stack , EntityPlayer player , World world , int x , int y , int z , int side , float hitX , float hitY , float hitZ ) 
 + { 
 + return onItemUseFirst ( stack , player , world , x , y , z , side ) ; 
 + } 
 - + 
 + + 
 + / * * 
 + * See onItemUseFirst above , this is deprecated in favor of the more aware version . 
 + * Only here for compaibility . 
 + * / 
 + @ Deprecated 
 - + public boolean onItemUseFirst ( ItemStack stack , EntityPlayer player , World world , int x , int y , int z , int side ) 
 + + public boolean onItemUseFirst ( ItemStack stack , EntityPlayer player , World world , int x , int y , int z , int side ) 
 + { 
 + return false ; 
 + } 
 @ @ - 102 , 7 + 102 , 7 @ @ 
 + * Called by CraftingManager to determine if an item is reparable . 
 + * @ return True if reparable 
 + * / 
 - + public boolean isRepairable ( ) 
 + + public boolean isRepairable ( ) 
 + { 
 + return canRepair & & isDamageable ( ) ; 
 + } 
 @ @ - 111 , 7 + 111 , 7 @ @ 
 + * Call to disable repair recipes . 
 + * @ return The current Item instance 
 + * / 
 - + public Item setNoRepair ( ) 
 + + public Item setNoRepair ( ) 
 + { 
 + canRepair = false ; 
 + return this ; 
 @ @ - 121 , 7 + 121 , 7 @ @ 
 + * Called before a block is broken . Return true to prevent default block harvesting . 
 + * 
 + * Note : In SMP , this is called on both client and server sides ! 
 - + * 
 + + * 
 + * @ param itemstack The current ItemStack 
 + * @ param X The X Position 
 + * @ param Y The X Position 
 @ @ - 129 , 7 + 129 , 7 @ @ 
 + * @ param player The Player that is wielding the item 
 + * @ return True to prevent harvesting , false to continue as normal 
 + * / 
 - + public boolean onBlockStartBreak ( ItemStack itemstack , int X , int Y , int Z , EntityPlayer player ) 
 + + public boolean onBlockStartBreak ( ItemStack itemstack , int X , int Y , int Z , EntityPlayer player ) 
 + { 
 + return false ; 
 + } 
 @ @ - 140 , 7 + 140 , 7 @ @ 
 + * @ param player The Player using the item 
 + * @ param count The amount of time in tick the item has been used for continuously 
 + * / 
 - + public void onUsingItemTick ( ItemStack stack , EntityPlayer player , int count ) 
 + + public void onUsingItemTick ( ItemStack stack , EntityPlayer player , int count ) 
 + { 
 + } 
 + 
 @ @ - 148 , 20 + 148 , 20 @ @ 
 + * Called when the player Left Clicks ( attacks ) an entity . 
 + * Processed before damage is done , if return value is true further processing is canceled 
 + * and the entity is not attacked . 
 - + * 
 + + * 
 + * @ param stack The Item being used 
 + * @ param player The player that is attacking 
 + * @ param entity The entity being attacked 
 + * @ return True to cancel the rest of the interaction . 
 + * / 
 - + public boolean onLeftClickEntity ( ItemStack stack , EntityPlayer player , Entity entity ) 
 + + public boolean onLeftClickEntity ( ItemStack stack , EntityPlayer player , Entity entity ) 
 + { 
 + return false ; 
 + } 
 + 
 + / * * 
 + * Player , Render pass , and item usage sensitive version of getIconIndex . 
 - + * 
 + + * 
 + * @ param stack The item stack to get the icon for . ( Usually this , and usingItem will be the same if usingItem is not null ) 
 + * @ param renderPass The pass to get the icon for , 0 is default . 
 + * @ param player The player holding the item 
 @ @ - 188 , 7 + 188 , 7 @ @ 
 + * Returns the number of render passes / layers this item has . 
 + * Usually equates to ItemRenderer . renderItem being called for this many passes . 
 + * Does not get called unless requiresMultipleRenderPasses ( ) is true ; 
 - + * 
 + + * 
 + * @ param metadata The item ' s metadata 
 + * @ return The number of passes to run . 
 + * / 
 @ @ - 212 , 7 + 212 , 7 @ @ 
 + / * * 
 + * Sets the current texture file for this item , used when rendering . 
 + * Default is " / gui / items . png " 
 - + * 
 + + * 
 + * @ param texture The texture file 
 + * / 
 + public Item setTextureFile ( String texture ) 
 @ @ - 225 , 7 + 225 , 7 @ @ 
 + / * * 
 + * ItemStack sensitive version of getContainerItem . 
 + * Returns a full ItemStack instance of the result . 
 - + * 
 + + * 
 + * @ param itemStack The current ItemStack 
 + * @ return The resulting ItemStack 
 + * / 
 @ @ - 241 , 7 + 241 , 7 @ @ 
 + / * * 
 + * Retrieves the normal ' lifespan ' of this item when it is dropped on the ground as a EntityItem . 
 + * This is in ticks , standard result is 6000 , or 5 mins . 
 - + * 
 + + * 
 + * @ param itemStack The current ItemStack 
 + * @ param world The world the entity is in 
 + * @ return The normal lifespan in ticks . 
 @ @ - 253 , 9 + 253 , 9 @ @ 
 + 
 + / * * 
 + * Determines if this Item has a special entity for when they are in the world . 
 - + * Is called when a EntityItem is spawned in the world , if true and Item # createCustomEntity 
 + + * Is called when a EntityItem is spawned in the world , if true and Item # createCustomEntity 
 + * returns non null , the EntityItem will be destroyed and the new Entity will be added to the world . 
 - + * 
 + + * 
 + * @ param stack The current item stack 
 + * @ return True of the item has a custom entity , If true , Item # createCustomEntity will be called 
 + * / 
 @ @ - 268 , 7 + 268 , 7 @ @ 
 + * This function should return a new entity to replace the dropped item . 
 + * Returning null here will not kill the EntityItem and will leave it to function normally . 
 + * Called when the item it placed in a world . 
 - + * 
 + + * 
 + * @ param world The world object 
 + * @ param location The EntityItem object , useful for getting the position of the entity 
 + * @ param itemstack The current item stack 
 @ @ - 280 , 10 + 280 , 10 @ @ 
 + } 
 + 
 + / * * 
 - + * Gets a list of tabs that items belonging to this class can display on , 
 - + * combined properly with getSubItems allows for a single item to span 
 + + * Gets a list of tabs that items belonging to this class can display on , 
 + + * combined properly with getSubItems allows for a single item to span 
 + * many sub - items across many tabs . 
 - + * 
 + + * 
 + * @ return A list of all tabs that this item could possibly be one . 
 + * / 
 + public CreativeTabs [ ] getCreativeTabs ( ) 
 @ @ - 293 , 9 + 293 , 9 @ @ 
 + 
 + / * * 
 + * Determines the base experience for a player when they remove this item from a furnace slot . 
 - + * This number must be between 0 and 1 for it to be valid . 
 - + * This number will be multiplied by the stack size to get the total experience . 
 - + * 
 + + * This number must be between 0 and 1 for it to be valid . 
 + + * This number will be multiplied by the stack size to get the total experience . 
 + + * 
 + * @ param item The item stack the player is picking up . 
 + * @ return The amount to award for each item . 
 + * / 
 @ @ - 303 , 4 + 303 , 17 @ @ 
 + { 
 + return - 1 ; / / - 1 will default to the old lookups . 
 + } 
 + + 
 + + / * * 
 + + * Return the correct icon for rendering based on the supplied ItemStack and render pass . 
 + + * 
 + + * Defers to { @ link # getIconFromDamageForRenderPass ( int , int ) } 
 + + * @ param stack to render for 
 + + * @ param pass the multi - render pass 
 + + * @ return the icon index 
 + + * / 
 + + public int getIconFromItemStackForMultiplePasses ( ItemStack stack , int pass ) 
 + + { 
 + + 	 return getIconFromDamageForRenderPass ( stack . getItemDamage ( ) , pass ) ; 
 + + } 
 } 
 diff - - git a / patches / minecraft / net / minecraft / src / RenderItem . java . patch b / patches / minecraft / net / minecraft / src / RenderItem . java . patch 
 index 6aef843 . . 6827aa1 100644 
 - - - a / patches / minecraft / net / minecraft / src / RenderItem . java . patch 
 + + + b / patches / minecraft / net / minecraft / src / RenderItem . java . patch 
 @ @ - 49 , 7 + 49 , 7 @ @ 
 GL11 . glPopMatrix ( ) ; 
 } 
 } 
 - @ @ - 121 , 10 + 126 , 11 @ @ 
 + @ @ - 121 , 11 + 126 , 12 @ @ 
 GL11 . glScalef ( 0 . 5F , 0 . 5F , 0 . 5F ) ; 
 } 
 
 @ @ - 57 , 14 + 57 , 16 @ @ 
 - 
 - for ( var15 = 0 ; var15 < = 1 ; + + var15 ) 
 - { 
 + - var16 = var10 . getItem ( ) . getIconFromDamageForRenderPass ( var10 . getItemDamage ( ) , var15 ) ; 
 + this . loadTexture ( Item . itemsList [ var10 . itemID ] . getTextureFile ( ) ) ; 
 + 
 + for ( var15 = 0 ; var15 < var10 . getItem ( ) . getRenderPasses ( var10 . getItemDamage ( ) ) ; + + var15 ) 
 + { 
 + this . random . setSeed ( 187L ) ; / / Fixes Vanilla bug where layers would not render aligns properly . 
 - var16 = var10 . getItem ( ) . getIconFromDamageForRenderPass ( var10 . getItemDamage ( ) , var15 ) ; 
 + + var16 = var10 . getItem ( ) . getIconFromItemStackForMultiplePasses ( var10 , var15 ) ; 
 var17 = 1 . 0F ; 
 
 + if ( this . field _ 77024 _ a ) 
 @ @ - 155 , 14 + 161 , 7 @ @ 
 
 var15 = var10 . getIconIndex ( ) ; 
 @ @ - 95 , 19 + 97 , 23 @ @ 
 GL11 . glPushMatrix ( ) ; 
 GL11 . glTranslatef ( ( float ) ( par4 - 2 ) , ( float ) ( par5 + 3 ) , - 3 . 0F + this . zLevel ) ; 
 GL11 . glScalef ( 10 . 0F , 10 . 0F , 10 . 0F ) ; 
 - @ @ - 265 , 9 + 264 , 9 @ @ 
 + @ @ - 265 , 11 + 264 , 11 @ @ 
 if ( Item . itemsList [ var6 ] . requiresMultipleRenderPasses ( ) ) 
 { 
 GL11 . glDisable ( GL11 . GL _ LIGHTING ) ; 
 - par2RenderEngine . bindTexture ( par2RenderEngine . getTexture ( " / gui / items . png " ) ) ; 
 - 
 - for ( var9 = 0 ; var9 < = 1 ; + + var9 ) 
 + - { 
 + - var10 = Item . itemsList [ var6 ] . getIconFromDamageForRenderPass ( var7 , var9 ) ; 
 + par2RenderEngine . bindTexture ( par2RenderEngine . getTexture ( Item . itemsList [ var6 ] . getTextureFile ( ) ) ) ; 
 + 
 + for ( var9 = 0 ; var9 < Item . itemsList [ var6 ] . getRenderPasses ( var7 ) ; + + var9 ) 
 - { 
 - var10 = Item . itemsList [ var6 ] . getIconFromDamageForRenderPass ( var7 , var9 ) ; 
 + + { 
 + + var10 = Item . itemsList [ var6 ] . getIconFromItemStackForMultiplePasses ( par3ItemStack , var9 ) ; 
 int var11 = Item . itemsList [ var6 ] . getColorFromItemStack ( par3ItemStack , var9 ) ; 
 + var12 = ( float ) ( var11 > > 16 & 255 ) / 255 . 0F ; 
 + var13 = ( float ) ( var11 > > 8 & 255 ) / 255 . 0F ; 
 @ @ - 289 , 14 + 288 , 7 @ @ 
 { 
 GL11 . glDisable ( GL11 . GL _ LIGHTING ) ;
