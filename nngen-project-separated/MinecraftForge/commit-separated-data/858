BLEU SCORE: 0.019146030690102508

TEST MSG: Fixed error detection login in ModelLoader , reduced the maximum number of printed stack traces to 5 per domain .
GENERATED MSG: Fix dependency resolution for models with custom data / textures .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index c130a0e . . bc88f7b 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class ModelLoader extends ModelBakery <nl> private final Set < ResourceLocation > textures = Sets . newHashSet ( ) ; <nl> private final Set < ResourceLocation > loadingModels = Sets . newHashSet ( ) ; <nl> private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; <nl> - private final Map < ModelResourceLocation , Exception > loadingExceptions = Maps . newHashMap ( ) ; <nl> + private final Map < ResourceLocation , Exception > loadingExceptions = Maps . newHashMap ( ) ; <nl> private IModel missingModel = null ; <nl> private IModel itemModel = new ItemLayerModel ( MODEL _ GENERATED ) ; <nl> <nl> @ @ - 198 , 11 + 198 , 25 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> - private void storeException ( ModelResourceLocation location , Exception exception ) <nl> + private void storeException ( ResourceLocation location , Exception exception ) <nl> { <nl> loadingExceptions . put ( location , exception ) ; <nl> } <nl> <nl> + @ Override <nl> + protected ModelBlockDefinition getModelBlockDefinition ( ResourceLocation location ) <nl> + { <nl> + try <nl> + { <nl> + return super . getModelBlockDefinition ( location ) ; <nl> + } <nl> + catch ( Exception exception ) <nl> + { <nl> + storeException ( location , new Exception ( " Could not load model definition for variant " + location , exception ) ) ; <nl> + } <nl> + return new ModelBlockDefinition ( new ArrayList < ModelBlockDefinition > ( ) ) ; <nl> + } <nl> + <nl> private void loadItems ( ) <nl> { <nl> registerVariantNames ( ) ; <nl> @ @ - 864 , 16 + 878 , 30 @ @ public class ModelLoader extends ModelBakery <nl> public void onPostBakeEvent ( IRegistry < ModelResourceLocation , IBakedModel > modelRegistry ) <nl> { <nl> IBakedModel missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; <nl> - for ( Map . Entry < ModelResourceLocation , Exception > entry : loadingExceptions . entrySet ( ) ) <nl> + Map < String , Integer > modelErrors = Maps . newHashMap ( ) ; <nl> + for ( Map . Entry < ResourceLocation , Exception > entry : loadingExceptions . entrySet ( ) ) <nl> { <nl> - IBakedModel model = modelRegistry . getObject ( entry . getKey ( ) ) ; <nl> - if ( model = = null | | model = = missingModel ) <nl> - { <nl> - FMLLog . getLogger ( ) . error ( " Exception loading model for variant " + entry . getKey ( ) , entry . getValue ( ) ) ; <nl> - } <nl> - if ( model = = null ) <nl> + / / ignoring pure ResourceLocation arguments , all things we care about pass ModelResourceLocation <nl> + if ( entry . getKey ( ) instanceof ModelResourceLocation ) <nl> { <nl> - modelRegistry . putObject ( entry . getKey ( ) , missingModel ) ; <nl> + ModelResourceLocation location = ( ModelResourceLocation ) entry . getKey ( ) ; <nl> + IBakedModel model = modelRegistry . getObject ( location ) ; <nl> + if ( model = = null | | model = = missingModel ) <nl> + { <nl> + String domain = entry . getKey ( ) . getResourceDomain ( ) ; <nl> + Integer errorCountBox = modelErrors . get ( domain ) ; <nl> + int errorCount = errorCountBox = = null ? 0 : errorCountBox ; <nl> + errorCount + + ; <nl> + if ( errorCount < 5 ) <nl> + { <nl> + FMLLog . getLogger ( ) . error ( " Exception loading model for variant " + entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + } <nl> + modelErrors . put ( domain , errorCount ) ; <nl> + } <nl> + if ( model = = null ) <nl> + { <nl> + modelRegistry . putObject ( location , missingModel ) ; <nl> + } <nl> } <nl> } <nl> for ( ModelResourceLocation missing : missingVariants ) <nl> @ @ - 881 , 13 + 909 , 28 @ @ public class ModelLoader extends ModelBakery <nl> IBakedModel model = modelRegistry . getObject ( missing ) ; <nl> if ( model = = null | | model = = missingModel ) <nl> { <nl> - FMLLog . severe ( " Model definition for location % s not found " , missing ) ; <nl> + String domain = missing . getResourceDomain ( ) ; <nl> + Integer errorCountBox = modelErrors . get ( domain ) ; <nl> + int errorCount = errorCountBox = = null ? 0 : errorCountBox ; <nl> + errorCount + + ; <nl> + if ( errorCount < 5 ) <nl> + { <nl> + FMLLog . severe ( " Model definition for location % s not found " , missing ) ; <nl> + } <nl> + modelErrors . put ( domain , errorCount ) ; <nl> } <nl> if ( model = = null ) <nl> { <nl> modelRegistry . putObject ( missing , missingModel ) ; <nl> } <nl> } <nl> + for ( Map . Entry < String , Integer > e : modelErrors . entrySet ( ) ) <nl> + { <nl> + if ( e . getValue ( ) > = 5 ) <nl> + { <nl> + FMLLog . severe ( " Supressed additional % s model loading errors for domain % s " , e . getValue ( ) , e . getKey ( ) ) ; <nl> + } <nl> + } <nl> isLoading = false ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index f0b4850 . . b4c8dc5 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery <nl> try <nl> { <nl> IModel model = ModelLoaderRegistry . getModel ( location ) ; <nl> - for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> - { <nl> - if ( dep instanceof ModelResourceLocation ) <nl> - { <nl> - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> - } <nl> - else <nl> - { <nl> - getModel ( dep ) ; <nl> - } <nl> - } <nl> - textures . addAll ( model . getTextures ( ) ) ; <nl> + resolveDependencies ( model ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + private void resolveDependencies ( IModel model ) throws IOException <nl> + { <nl> + for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> + { <nl> + if ( dep instanceof ModelResourceLocation ) <nl> + { <nl> + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> + } <nl> + else <nl> + { <nl> + getModel ( dep ) ; <nl> + } <nl> + } <nl> + textures . addAll ( model . getTextures ( ) ) ; <nl> + } <nl> + <nl> private class VanillaModelWrapper implements IRetexturableModel <nl> { <nl> private final ResourceLocation location ; <nl> @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery <nl> if ( v instanceof ISmartVariant ) <nl> { <nl> model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; <nl> + try <nl> + { <nl> + resolveDependencies ( model ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; <nl> + } <nl> textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index c130a0e . . bc88f7b 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 81 , 7 + 81 , 7 @ @ public class ModelLoader extends ModelBakery 
 private final Set < ResourceLocation > textures = Sets . newHashSet ( ) ; 
 private final Set < ResourceLocation > loadingModels = Sets . newHashSet ( ) ; 
 private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; 
 - private final Map < ModelResourceLocation , Exception > loadingExceptions = Maps . newHashMap ( ) ; 
 + private final Map < ResourceLocation , Exception > loadingExceptions = Maps . newHashMap ( ) ; 
 private IModel missingModel = null ; 
 private IModel itemModel = new ItemLayerModel ( MODEL _ GENERATED ) ; 
 
 @ @ - 198 , 11 + 198 , 25 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 - private void storeException ( ModelResourceLocation location , Exception exception ) 
 + private void storeException ( ResourceLocation location , Exception exception ) 
 { 
 loadingExceptions . put ( location , exception ) ; 
 } 
 
 + @ Override 
 + protected ModelBlockDefinition getModelBlockDefinition ( ResourceLocation location ) 
 + { 
 + try 
 + { 
 + return super . getModelBlockDefinition ( location ) ; 
 + } 
 + catch ( Exception exception ) 
 + { 
 + storeException ( location , new Exception ( " Could not load model definition for variant " + location , exception ) ) ; 
 + } 
 + return new ModelBlockDefinition ( new ArrayList < ModelBlockDefinition > ( ) ) ; 
 + } 
 + 
 private void loadItems ( ) 
 { 
 registerVariantNames ( ) ; 
 @ @ - 864 , 16 + 878 , 30 @ @ public class ModelLoader extends ModelBakery 
 public void onPostBakeEvent ( IRegistry < ModelResourceLocation , IBakedModel > modelRegistry ) 
 { 
 IBakedModel missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; 
 - for ( Map . Entry < ModelResourceLocation , Exception > entry : loadingExceptions . entrySet ( ) ) 
 + Map < String , Integer > modelErrors = Maps . newHashMap ( ) ; 
 + for ( Map . Entry < ResourceLocation , Exception > entry : loadingExceptions . entrySet ( ) ) 
 { 
 - IBakedModel model = modelRegistry . getObject ( entry . getKey ( ) ) ; 
 - if ( model = = null | | model = = missingModel ) 
 - { 
 - FMLLog . getLogger ( ) . error ( " Exception loading model for variant " + entry . getKey ( ) , entry . getValue ( ) ) ; 
 - } 
 - if ( model = = null ) 
 + / / ignoring pure ResourceLocation arguments , all things we care about pass ModelResourceLocation 
 + if ( entry . getKey ( ) instanceof ModelResourceLocation ) 
 { 
 - modelRegistry . putObject ( entry . getKey ( ) , missingModel ) ; 
 + ModelResourceLocation location = ( ModelResourceLocation ) entry . getKey ( ) ; 
 + IBakedModel model = modelRegistry . getObject ( location ) ; 
 + if ( model = = null | | model = = missingModel ) 
 + { 
 + String domain = entry . getKey ( ) . getResourceDomain ( ) ; 
 + Integer errorCountBox = modelErrors . get ( domain ) ; 
 + int errorCount = errorCountBox = = null ? 0 : errorCountBox ; 
 + errorCount + + ; 
 + if ( errorCount < 5 ) 
 + { 
 + FMLLog . getLogger ( ) . error ( " Exception loading model for variant " + entry . getKey ( ) , entry . getValue ( ) ) ; 
 + } 
 + modelErrors . put ( domain , errorCount ) ; 
 + } 
 + if ( model = = null ) 
 + { 
 + modelRegistry . putObject ( location , missingModel ) ; 
 + } 
 } 
 } 
 for ( ModelResourceLocation missing : missingVariants ) 
 @ @ - 881 , 13 + 909 , 28 @ @ public class ModelLoader extends ModelBakery 
 IBakedModel model = modelRegistry . getObject ( missing ) ; 
 if ( model = = null | | model = = missingModel ) 
 { 
 - FMLLog . severe ( " Model definition for location % s not found " , missing ) ; 
 + String domain = missing . getResourceDomain ( ) ; 
 + Integer errorCountBox = modelErrors . get ( domain ) ; 
 + int errorCount = errorCountBox = = null ? 0 : errorCountBox ; 
 + errorCount + + ; 
 + if ( errorCount < 5 ) 
 + { 
 + FMLLog . severe ( " Model definition for location % s not found " , missing ) ; 
 + } 
 + modelErrors . put ( domain , errorCount ) ; 
 } 
 if ( model = = null ) 
 { 
 modelRegistry . putObject ( missing , missingModel ) ; 
 } 
 } 
 + for ( Map . Entry < String , Integer > e : modelErrors . entrySet ( ) ) 
 + { 
 + if ( e . getValue ( ) > = 5 ) 
 + { 
 + FMLLog . severe ( " Supressed additional % s model loading errors for domain % s " , e . getValue ( ) , e . getKey ( ) ) ; 
 + } 
 + } 
 isLoading = false ; 
 } 


NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index f0b4850 . . b4c8dc5 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery 
 try 
 { 
 IModel model = ModelLoaderRegistry . getModel ( location ) ; 
 - for ( ResourceLocation dep : model . getDependencies ( ) ) 
 - { 
 - if ( dep instanceof ModelResourceLocation ) 
 - { 
 - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 - } 
 - else 
 - { 
 - getModel ( dep ) ; 
 - } 
 - } 
 - textures . addAll ( model . getTextures ( ) ) ; 
 + resolveDependencies ( model ) ; 
 } 
 finally 
 { 
 @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + private void resolveDependencies ( IModel model ) throws IOException 
 + { 
 + for ( ResourceLocation dep : model . getDependencies ( ) ) 
 + { 
 + if ( dep instanceof ModelResourceLocation ) 
 + { 
 + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 + } 
 + else 
 + { 
 + getModel ( dep ) ; 
 + } 
 + } 
 + textures . addAll ( model . getTextures ( ) ) ; 
 + } 
 + 
 private class VanillaModelWrapper implements IRetexturableModel 
 { 
 private final ResourceLocation location ; 
 @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery 
 if ( v instanceof ISmartVariant ) 
 { 
 model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; 
 + try 
 + { 
 + resolveDependencies ( model ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; 
 + } 
 textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . 
 } 

