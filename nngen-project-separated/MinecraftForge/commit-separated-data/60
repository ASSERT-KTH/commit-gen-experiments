BLEU SCORE: 0.026279617104084448

TEST MSG: Try to fix # 5573 by peeling the worldclient fetch into a separate handler .
GENERATED MSG: Reload client recipe book after loading modded recipes .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / LogicalSidedProvider . java b / src / main / java / net / minecraftforge / fml / LogicalSidedProvider . java <nl> index 03eafed . . c44acb6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / LogicalSidedProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / LogicalSidedProvider . java <nl> @ @ - 21 , 14 + 21 , 17 @ @ package net . minecraftforge . fml ; <nl> <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . server . MinecraftServer ; <nl> + import net . minecraft . world . World ; <nl> <nl> + import java . util . Optional ; <nl> import java . util . function . Function ; <nl> import java . util . function . Supplier ; <nl> <nl> public enum LogicalSidedProvider <nl> { <nl> WORKQUEUE ( ( c ) - > c . get ( ) , ( s ) - > s . get ( ) ) , <nl> - INSTANCE ( ( c ) - > c . get ( ) , ( s ) - > s . get ( ) ) <nl> + INSTANCE ( ( c ) - > c . get ( ) , ( s ) - > s . get ( ) ) , <nl> + CLIENTWORLD ( ( c ) - > Optional . < World > of ( c . get ( ) . world ) , ( s ) - > Optional . < World > empty ( ) ) <nl> ; <nl> private static Supplier < Minecraft > client ; <nl> private static Supplier < MinecraftServer > server ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> index 636b374 . . eaef0a2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> @ @ - 27 , 11 + 27 , 14 @ @ import net . minecraft . entity . EntityType ; <nl> import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . math . MathHelper ; <nl> + import net . minecraft . world . World ; <nl> import net . minecraftforge . fml . ExtensionPoint ; <nl> + import net . minecraftforge . fml . LogicalSidedProvider ; <nl> import net . minecraftforge . fml . ModList ; <nl> import net . minecraft . util . registry . IRegistry ; <nl> import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; <nl> <nl> + import java . util . Optional ; <nl> import java . util . UUID ; <nl> import java . util . function . Supplier ; <nl> <nl> @ @ - 128 , 7 + 131 , 8 @ @ public class FMLPlayMessages <nl> throw new RuntimeException ( String . format ( " Could not spawn entity ( id % d ) with unknown type at ( % f , % f , % f ) " , msg . entityId , msg . posX , msg . posY , msg . posZ ) ) ; <nl> } <nl> <nl> - Entity e = type . handleSpawnMessage ( Minecraft . getInstance ( ) . world , msg ) ; <nl> + Optional < World > world = LogicalSidedProvider . CLIENTWORLD . get ( ctx . get ( ) . getDirection ( ) . getLogicalSide ( ) ) ; <nl> + Entity e = world . map ( w - > type . handleSpawnMessage ( w , msg ) ) . orElse ( null ) ; <nl> if ( e = = null ) <nl> { <nl> return ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java <nl> index 42f3d69 . . ce8e8dc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java <nl> @ @ - 34 , 9 + 34 , 7 @ @ import net . minecraft . util . IThreadListener ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . eventbus . api . Event ; <nl> import net . minecraftforge . fml . LogicalSidedProvider ; <nl> - import org . apache . commons . lang3 . tuple . Pair ; <nl> <nl> - import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . function . Supplier ; <nl>
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / util / RecipeBookClient . java . patch b / patches / minecraft / net / minecraft / client / util / RecipeBookClient . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 883654d <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / util / RecipeBookClient . java . patch <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / util / RecipeBookClient . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / util / RecipeBookClient . java <nl> + @ @ - 54 , 6 + 54 , 14 @ @ <nl> + <nl> + static <nl> + { <nl> + + rebuildTable ( ) ; <nl> + + } <nl> + + <nl> + + public static void rebuildTable ( ) <nl> + + { <nl> + + field _ 194086 _ e . clear ( ) ; <nl> + + field _ 194087 _ f . clear ( ) ; <nl> + + <nl> + Table < CreativeTabs , String , RecipeList > table = HashBasedTable . < CreativeTabs , String , RecipeList > create ( ) ; <nl> + <nl> + for ( IRecipe irecipe : CraftingManager . field _ 193380 _ a ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index 5205eea . . ec00158 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . util . JsonUtils ; <nl> import net . minecraft . util . NonNullList ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> @ @ - 611 , 6 + 612 , 7 @ @ public class CraftingHelper { <nl> Loader . instance ( ) . getActiveModList ( ) . forEach ( ( mod ) - > loadRecipes ( mod ) ) ; <nl> Loader . instance ( ) . setActiveModContainer ( null ) ; <nl> / / reg . freeze ( ) ; <nl> + FMLCommonHandler . instance ( ) . resetClientRecipeBook ( ) ; <nl> } <nl> <nl> private static void loadFactories ( ModContainer mod ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 2a2e2e1 . . 632c1ad 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 56 , 6 + 56 , 7 @ @ import net . minecraft . client . resources . LegacyV2Adapter ; <nl> import net . minecraft . client . resources . SimpleReloadableResourceManager ; <nl> import net . minecraft . client . resources . data . MetadataSerializer ; <nl> import net . minecraft . client . resources . data . PackMetadataSection ; <nl> + import net . minecraft . client . util . RecipeBookClient ; <nl> import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . launchwrapper . Launch ; <nl> @ @ - 1096 , 4 + 1097 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> return SplashProgress . isDisplayVSyncForced ; <nl> } <nl> + <nl> + @ Override <nl> + public void resetClientRecipeBook ( ) <nl> + { <nl> + RecipeBookClient . rebuildTable ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index db614fd . . a331901 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 771 , 4 + 771 , 7 @ @ public class FMLCommonHandler <nl> } <nl> <nl> public boolean isDisplayVSyncForced ( ) { return sidedDelegate . isDisplayVSyncForced ( ) ; } <nl> + public void resetClientRecipeBook ( ) { <nl> + this . sidedDelegate . resetClientRecipeBook ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> index 28126cf . . fa31c65 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> @ @ - 84 , 4 + 84 , 6 @ @ public interface IFMLSidedHandler <nl> CompoundDataFixer getDataFixer ( ) ; <nl> <nl> boolean isDisplayVSyncForced ( ) ; <nl> + <nl> + default void resetClientRecipeBook ( ) { } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / LogicalSidedProvider . java b / src / main / java / net / minecraftforge / fml / LogicalSidedProvider . java 
 index 03eafed . . c44acb6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / LogicalSidedProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / LogicalSidedProvider . java 
 @ @ - 21 , 14 + 21 , 17 @ @ package net . minecraftforge . fml ; 
 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . server . MinecraftServer ; 
 + import net . minecraft . world . World ; 
 
 + import java . util . Optional ; 
 import java . util . function . Function ; 
 import java . util . function . Supplier ; 
 
 public enum LogicalSidedProvider 
 { 
 WORKQUEUE ( ( c ) - > c . get ( ) , ( s ) - > s . get ( ) ) , 
 - INSTANCE ( ( c ) - > c . get ( ) , ( s ) - > s . get ( ) ) 
 + INSTANCE ( ( c ) - > c . get ( ) , ( s ) - > s . get ( ) ) , 
 + CLIENTWORLD ( ( c ) - > Optional . < World > of ( c . get ( ) . world ) , ( s ) - > Optional . < World > empty ( ) ) 
 ; 
 private static Supplier < Minecraft > client ; 
 private static Supplier < MinecraftServer > server ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 index 636b374 . . eaef0a2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 @ @ - 27 , 11 + 27 , 14 @ @ import net . minecraft . entity . EntityType ; 
 import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . math . MathHelper ; 
 + import net . minecraft . world . World ; 
 import net . minecraftforge . fml . ExtensionPoint ; 
 + import net . minecraftforge . fml . LogicalSidedProvider ; 
 import net . minecraftforge . fml . ModList ; 
 import net . minecraft . util . registry . IRegistry ; 
 import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; 
 
 + import java . util . Optional ; 
 import java . util . UUID ; 
 import java . util . function . Supplier ; 
 
 @ @ - 128 , 7 + 131 , 8 @ @ public class FMLPlayMessages 
 throw new RuntimeException ( String . format ( " Could not spawn entity ( id % d ) with unknown type at ( % f , % f , % f ) " , msg . entityId , msg . posX , msg . posY , msg . posZ ) ) ; 
 } 
 
 - Entity e = type . handleSpawnMessage ( Minecraft . getInstance ( ) . world , msg ) ; 
 + Optional < World > world = LogicalSidedProvider . CLIENTWORLD . get ( ctx . get ( ) . getDirection ( ) . getLogicalSide ( ) ) ; 
 + Entity e = world . map ( w - > type . handleSpawnMessage ( w , msg ) ) . orElse ( null ) ; 
 if ( e = = null ) 
 { 
 return ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java 
 index 42f3d69 . . ce8e8dc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java 
 @ @ - 34 , 9 + 34 , 7 @ @ import net . minecraft . util . IThreadListener ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . eventbus . api . Event ; 
 import net . minecraftforge . fml . LogicalSidedProvider ; 
 - import org . apache . commons . lang3 . tuple . Pair ; 
 
 - import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . function . Supplier ; 


NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / util / RecipeBookClient . java . patch b / patches / minecraft / net / minecraft / client / util / RecipeBookClient . java . patch 
 new file mode 100644 
 index 0000000 . . 883654d 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / util / RecipeBookClient . java . patch 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / util / RecipeBookClient . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / util / RecipeBookClient . java 
 + @ @ - 54 , 6 + 54 , 14 @ @ 
 + 
 + static 
 + { 
 + + rebuildTable ( ) ; 
 + + } 
 + + 
 + + public static void rebuildTable ( ) 
 + + { 
 + + field _ 194086 _ e . clear ( ) ; 
 + + field _ 194087 _ f . clear ( ) ; 
 + + 
 + Table < CreativeTabs , String , RecipeList > table = HashBasedTable . < CreativeTabs , String , RecipeList > create ( ) ; 
 + 
 + for ( IRecipe irecipe : CraftingManager . field _ 193380 _ a ) 
 diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index 5205eea . . ec00158 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 67 , 6 + 67 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . util . JsonUtils ; 
 import net . minecraft . util . NonNullList ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 @ @ - 611 , 6 + 612 , 7 @ @ public class CraftingHelper { 
 Loader . instance ( ) . getActiveModList ( ) . forEach ( ( mod ) - > loadRecipes ( mod ) ) ; 
 Loader . instance ( ) . setActiveModContainer ( null ) ; 
 / / reg . freeze ( ) ; 
 + FMLCommonHandler . instance ( ) . resetClientRecipeBook ( ) ; 
 } 
 
 private static void loadFactories ( ModContainer mod ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 2a2e2e1 . . 632c1ad 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 56 , 6 + 56 , 7 @ @ import net . minecraft . client . resources . LegacyV2Adapter ; 
 import net . minecraft . client . resources . SimpleReloadableResourceManager ; 
 import net . minecraft . client . resources . data . MetadataSerializer ; 
 import net . minecraft . client . resources . data . PackMetadataSection ; 
 + import net . minecraft . client . util . RecipeBookClient ; 
 import net . minecraft . crash . CrashReport ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . launchwrapper . Launch ; 
 @ @ - 1096 , 4 + 1097 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 return SplashProgress . isDisplayVSyncForced ; 
 } 
 + 
 + @ Override 
 + public void resetClientRecipeBook ( ) 
 + { 
 + RecipeBookClient . rebuildTable ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index db614fd . . a331901 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 771 , 4 + 771 , 7 @ @ public class FMLCommonHandler 
 } 
 
 public boolean isDisplayVSyncForced ( ) { return sidedDelegate . isDisplayVSyncForced ( ) ; } 
 + public void resetClientRecipeBook ( ) { 
 + this . sidedDelegate . resetClientRecipeBook ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 index 28126cf . . fa31c65 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 @ @ - 84 , 4 + 84 , 6 @ @ public interface IFMLSidedHandler 
 CompoundDataFixer getDataFixer ( ) ; 
 
 boolean isDisplayVSyncForced ( ) ; 
 + 
 + default void resetClientRecipeBook ( ) { } 
 }
