BLEU SCORE: 0.026279617104084448

TEST MSG: Fix vanilla trying to load the constants json as an recipe . Closes # 5388
GENERATED MSG: Make Ingredient explode wildcard values like OreIngredient .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / crafting / RecipeManager . java . patch b / patches / minecraft / net / minecraft / item / crafting / RecipeManager . java . patch <nl> index 9e5a897 . . 1cb83d9 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / RecipeManager . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / RecipeManager . java . patch <nl> @ @ - 9 , 14 + 9 , 18 @ @ <nl> private static final Logger field _ 199521 _ c = LogManager . getLogger ( ) ; <nl> public static final int field _ 199519 _ a = " recipes / " . length ( ) ; <nl> public static final int field _ 199520 _ b = " . json " . length ( ) ; <nl> - @ @ - 36 , 6 + 36 , 7 @ @ <nl> + @ @ - 36 , 9 + 36 , 10 @ @ <nl> Gson gson = ( new GsonBuilder ( ) ) . setPrettyPrinting ( ) . disableHtmlEscaping ( ) . create ( ) ; <nl> this . field _ 199523 _ e = false ; <nl> this . field _ 199522 _ d . clear ( ) ; <nl> + super . func _ 195410 _ a ( p _ 195410 _ 1 _ ) ; <nl> <nl> for ( ResourceLocation resourcelocation : p _ 195410 _ 1 _ . func _ 199003 _ a ( " recipes " , ( p _ 199516 _ 0 _ ) - > { <nl> - return p _ 199516 _ 0 _ . endsWith ( " . json " ) ; <nl> + - return p _ 199516 _ 0 _ . endsWith ( " . json " ) ; <nl> + + return p _ 199516 _ 0 _ . endsWith ( " . json " ) & & ! p _ 199516 _ 0 _ . startsWith ( " _ " ) ; / / Forge filter anything beginning with " _ " as it ' s used for metadata . <nl> + } ) ) { <nl> + String s = resourcelocation . func _ 110623 _ a ( ) ; <nl> + ResourceLocation resourcelocation1 = new ResourceLocation ( resourcelocation . func _ 110624 _ b ( ) , s . substring ( field _ 199519 _ a , s . length ( ) - field _ 199520 _ b ) ) ; <nl> @ @ - 47 , 6 + 48 , 8 @ @ <nl> JsonObject jsonobject = ( JsonObject ) JsonUtils . func _ 188178 _ a ( gson , IOUtils . toString ( iresource . func _ 199027 _ b ( ) , StandardCharsets . UTF _ 8 ) , JsonObject . class ) ; <nl> if ( jsonobject = = null ) { <nl> diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index 31d4220 . . e5d1610 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 291 , 7 + 291 , 7 @ @ public class CraftingHelper <nl> } <nl> <nl> public static void reloadConstants ( IResourceManager manager ) { <nl> - Map < ResourceLocation , IItemList > ret = new HashMap < > ( ) ; <nl> + Map < ResourceLocation , IItemList > tmp = new HashMap < > ( ) ; <nl> for ( ResourceLocation key : manager . getAllResourceLocations ( " recipes " , filename - > filename . equals ( " _ constants . json " ) ) ) <nl> { <nl> String path = key . getPath ( ) ; <nl> @ @ - 304 , 11 + 304 , 17 @ @ public class CraftingHelper <nl> for ( int x = 0 ; x < elements . length ; x + + ) <nl> { <nl> JsonObject json = elements [ x ] ; <nl> + / / Force namespace to the directory that this constants file is in , to prevent modders from overriding other ' s sneakily <nl> + / / TODO : Move back to a resource pack / mod specific constant list ? <nl> + ResourceLocation name = json . has ( " name " ) ? new ResourceLocation ( JsonUtils . getString ( json , " name " ) ) : null ; <nl> + if ( name ! = null ) <nl> + name = new ResourceLocation ( key . getNamespace ( ) , name . getPath ( ) ) ; <nl> + <nl> if ( json = = null | | json . size ( ) = = 0 ) <nl> LOGGER . error ( CRAFTHELPER , " Couldn ' t load constant # { } from { } as it ' s null or empty " , x , key ) ; <nl> else if ( json . has ( " conditions " ) & & ! processConditions ( JsonUtils . getJsonArray ( json , " conditions " ) ) ) <nl> LOGGER . info ( CRAFTHELPER , " Skipping loading constant # { } from { } as it ' s conditions were not met " , x , key ) ; <nl> - else if ( ! json . has ( " name " ) ) <nl> + else if ( name = = null ) <nl> LOGGER . error ( CRAFTHELPER , " Couldn ' t load constant # { } from { } as it ' s missing ` name ` " , x , key ) ; <nl> else if ( json . has ( " items " ) ) <nl> { <nl> @ @ - 325 , 12 + 331 , 12 @ @ public class CraftingHelper <nl> } <nl> } <nl> if ( ! items . isEmpty ( ) ) <nl> - ret . put ( new ResourceLocation ( JsonUtils . getString ( json , " name " ) ) , new StackList ( items ) ) ; <nl> + tmp . put ( name , new StackList ( items ) ) ; <nl> } <nl> else if ( json . has ( " tag " ) ) <nl> - ret . put ( new ResourceLocation ( JsonUtils . getString ( json , " name " ) ) , Ingredient . deserializeItemList ( json ) ) ; <nl> + tmp . put ( name , Ingredient . deserializeItemList ( json ) ) ; <nl> else if ( json . has ( " item " ) ) <nl> - ret . put ( new ResourceLocation ( JsonUtils . getString ( json , " name " ) ) , new StackList ( Lists . newArrayList ( getItemStack ( JsonUtils . getJsonObject ( json , " item " ) , true ) ) ) ) ; <nl> + tmp . put ( name , new StackList ( Lists . newArrayList ( getItemStack ( JsonUtils . getJsonObject ( json , " item " ) , true ) ) ) ) ; <nl> else <nl> LOGGER . error ( CRAFTHELPER , " Couldn ' t load constant # { } from { } as it ' s missing ` item ` or ` items ` element " , x , key ) ; <nl> } <nl> @ @ - 345 , 6 + 351 , 6 @ @ public class CraftingHelper <nl> LOGGER . error ( CRAFTHELPER , " Couldn ' t read constants from { } " , key , e ) ; <nl> } <nl> } <nl> - constants = ret ; <nl> + constants = tmp ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch <nl> index 4027bd8 . . 697a870 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch <nl> @ @ - 9 , 8 + 9 , 11 @ @ <nl> public static final Ingredient field _ 193370 _ a = new Ingredient ( new ItemStack [ 0 ] ) <nl> { <nl> public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) <nl> - @ @ - 23 , 12 + 25 , 17 @ @ <nl> + @ @ - 21 , 17 + 23 , 34 @ @ <nl> + } <nl> + } ; <nl> private final ItemStack [ ] field _ 193371 _ b ; <nl> + + private final ItemStack [ ] matchingStacksExploded ; <nl> private IntList field _ 194140 _ c ; <nl> <nl> + protected Ingredient ( int size ) <nl> @ @ - 21 , 14 + 24 , 41 @ @ <nl> protected Ingredient ( ItemStack . . . p _ i47503 _ 1 _ ) <nl> { <nl> this . field _ 193371 _ b = p _ i47503 _ 1 _ ; <nl> + + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; <nl> + + for ( ItemStack s : p _ i47503 _ 1 _ ) <nl> + + { <nl> + + if ( s . func _ 190926 _ b ( ) ) <nl> + + continue ; <nl> + + if ( s . func _ 77960 _ j ( ) = = net . minecraftforge . oredict . OreDictionary . WILDCARD _ VALUE ) <nl> + + s . func _ 77973 _ b ( ) . func _ 150895 _ a ( net . minecraft . creativetab . CreativeTabs . field _ 78027 _ g , lst ) ; <nl> + + else <nl> + + lst . add ( s ) ; <nl> + + } <nl> + + this . matchingStacksExploded = lst . toArray ( new ItemStack [ lst . size ( ) ] ) ; <nl> + Ingredient . INSTANCES . add ( this ) ; <nl> } <nl> <nl> - @ SideOnly ( Side . CLIENT ) <nl> public ItemStack [ ] func _ 193365 _ a ( ) <nl> { <nl> - return this . field _ 193371 _ b ; <nl> - @ @ - 76 , 6 + 83 , 18 @ @ <nl> + - return this . field _ 193371 _ b ; <nl> + + return this . matchingStacksExploded ; <nl> + } <nl> + <nl> + public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) <nl> + @ @ - 63 , 9 + 82 , 9 @ @ <nl> + { <nl> + if ( this . field _ 194140 _ c = = null ) <nl> + { <nl> + - this . field _ 194140 _ c = new IntArrayList ( this . field _ 193371 _ b . length ) ; <nl> + + this . field _ 194140 _ c = new IntArrayList ( this . matchingStacksExploded . length ) ; <nl> + <nl> + - for ( ItemStack itemstack : this . field _ 193371 _ b ) <nl> + + for ( ItemStack itemstack : this . matchingStacksExploded ) <nl> + { <nl> + this . field _ 194140 _ c . add ( RecipeItemHelper . func _ 194113 _ b ( itemstack ) ) ; <nl> + } <nl> + @ @ - 76 , 6 + 95 , 18 @ @ <nl> return this . field _ 194140 _ c ; <nl> } <nl> <nl> @ @ - 47 , 3 + 77 , 21 @ @ <nl> public static Ingredient func _ 193367 _ a ( Item p _ 193367 _ 0 _ ) <nl> { <nl> return func _ 193369 _ a ( new ItemStack ( p _ 193367 _ 0 _ , 1 , 32767 ) ) ; <nl> + @ @ - 108 , 4 + 139 , 17 @ @ <nl> + <nl> + return field _ 193370 _ a ; <nl> + } <nl> + + <nl> + + / / Merges several vanilla Ingredients together . As a qwerk of how the json is structured , we can ' t tell if its a single Ingredient type or multiple so we split per item and remerge here . <nl> + + / / Only public for internal use , so we can access a private field in here . <nl> + + public static Ingredient merge ( java . util . Collection < Ingredient > parts ) <nl> + + { <nl> + + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; <nl> + + for ( Ingredient part : parts ) <nl> + + { <nl> + + for ( ItemStack stack : part . field _ 193371 _ b ) <nl> + + lst . add ( stack ) ; <nl> + + } <nl> + + return new Ingredient ( lst . toArray ( new ItemStack [ lst . size ( ) ] ) ) ; <nl> + + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index f4479c2 . . ec1923a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 143 , 14 + 143 , 15 @ @ public class CraftingHelper { <nl> if ( json . isJsonArray ( ) ) <nl> { <nl> List < Ingredient > ingredients = Lists . newArrayList ( ) ; <nl> - List < ItemStack > vanilla = Lists . newArrayList ( ) ; <nl> - json . getAsJsonArray ( ) . forEach ( ( ele ) - > { <nl> + List < Ingredient > vanilla = Lists . newArrayList ( ) ; <nl> + json . getAsJsonArray ( ) . forEach ( ( ele ) - > <nl> + { <nl> Ingredient ing = CraftingHelper . getIngredient ( ele , context ) ; <nl> <nl> - if ( ing . getClass ( ) = = Ingredient . class ) { <nl> + if ( ing . getClass ( ) = = Ingredient . class ) <nl> + { <nl> / / Vanilla , Due to how we read it splits each itemstack , so we pull out to re - merge later <nl> - for ( ItemStack stack : ing . getMatchingStacks ( ) ) <nl> - vanilla . add ( stack ) ; <nl> + vanilla . add ( ing ) ; <nl> } <nl> else <nl> { <nl> @ @ - 160 , 8 + 161 , 7 @ @ public class CraftingHelper { <nl> <nl> if ( ! vanilla . isEmpty ( ) ) <nl> { <nl> - ItemStack [ ] items = vanilla . toArray ( new ItemStack [ vanilla . size ( ) ] ) ; <nl> - ingredients . add ( Ingredient . fromStacks ( items ) ) ; <nl> + ingredients . add ( Ingredient . merge ( vanilla ) ) ; <nl> } <nl> <nl> if ( ingredients . size ( ) = = 0 ) <nl> diff - - git a / src / test / resources / assets / forge / recipes / _ constants . json b / src / test / resources / assets / forge / recipes / _ constants . json <nl> new file mode 100644 <nl> index 0000000 . . a0e2377 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forge / recipes / _ constants . json <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + [ <nl> + { <nl> + 	 " name " : " forge : some _ wool " , <nl> + 	 " ingredient " : [ <nl> + 	 	 { <nl> + 	 	 	 " item " : " minecraft : wool " , <nl> + 	 	 	 " data " : 1 <nl> + 	 	 } , <nl> + 	 	 { <nl> + 	 	 	 " item " : " minecraft : wool " , <nl> + 	 	 	 " data " : 2 <nl> + 	 	 } 	 	 <nl> + 	 ] <nl> + } <nl> + ] <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ constant . json b / src / test / resources / assets / forge / recipes / shapeless _ constant . json <nl> new file mode 100644 <nl> index 0000000 . . f072c7d <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forge / recipes / shapeless _ constant . json <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + { <nl> + " type " : " minecraft : crafting _ shapeless " , <nl> + " result " : { <nl> + " item " : " minecraft : stone " , <nl> + " data " : 0 <nl> + } , <nl> + " ingredients " : [ <nl> + { <nl> + " item " : " # forge : some _ wool " <nl> + } , <nl> + { <nl> + " item " : " # forge : some _ wool " <nl> + } <nl> + ] <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json b / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json <nl> new file mode 100644 <nl> index 0000000 . . 9795984 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + { <nl> + " result " : { <nl> + " item " : " minecraft : dirt " , <nl> + " data " : 1 <nl> + } , <nl> + " ingredients " : [ <nl> + { <nl> + " item " : " minecraft : stone " , <nl> + " data " : 32767 <nl> + } <nl> + ] , <nl> + " type " : " minecraft : crafting _ shapeless " <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / crafting / RecipeManager . java . patch b / patches / minecraft / net / minecraft / item / crafting / RecipeManager . java . patch 
 index 9e5a897 . . 1cb83d9 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / RecipeManager . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / RecipeManager . java . patch 
 @ @ - 9 , 14 + 9 , 18 @ @ 
 private static final Logger field _ 199521 _ c = LogManager . getLogger ( ) ; 
 public static final int field _ 199519 _ a = " recipes / " . length ( ) ; 
 public static final int field _ 199520 _ b = " . json " . length ( ) ; 
 - @ @ - 36 , 6 + 36 , 7 @ @ 
 + @ @ - 36 , 9 + 36 , 10 @ @ 
 Gson gson = ( new GsonBuilder ( ) ) . setPrettyPrinting ( ) . disableHtmlEscaping ( ) . create ( ) ; 
 this . field _ 199523 _ e = false ; 
 this . field _ 199522 _ d . clear ( ) ; 
 + super . func _ 195410 _ a ( p _ 195410 _ 1 _ ) ; 
 
 for ( ResourceLocation resourcelocation : p _ 195410 _ 1 _ . func _ 199003 _ a ( " recipes " , ( p _ 199516 _ 0 _ ) - > { 
 - return p _ 199516 _ 0 _ . endsWith ( " . json " ) ; 
 + - return p _ 199516 _ 0 _ . endsWith ( " . json " ) ; 
 + + return p _ 199516 _ 0 _ . endsWith ( " . json " ) & & ! p _ 199516 _ 0 _ . startsWith ( " _ " ) ; / / Forge filter anything beginning with " _ " as it ' s used for metadata . 
 + } ) ) { 
 + String s = resourcelocation . func _ 110623 _ a ( ) ; 
 + ResourceLocation resourcelocation1 = new ResourceLocation ( resourcelocation . func _ 110624 _ b ( ) , s . substring ( field _ 199519 _ a , s . length ( ) - field _ 199520 _ b ) ) ; 
 @ @ - 47 , 6 + 48 , 8 @ @ 
 JsonObject jsonobject = ( JsonObject ) JsonUtils . func _ 188178 _ a ( gson , IOUtils . toString ( iresource . func _ 199027 _ b ( ) , StandardCharsets . UTF _ 8 ) , JsonObject . class ) ; 
 if ( jsonobject = = null ) { 
 diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index 31d4220 . . e5d1610 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 291 , 7 + 291 , 7 @ @ public class CraftingHelper 
 } 
 
 public static void reloadConstants ( IResourceManager manager ) { 
 - Map < ResourceLocation , IItemList > ret = new HashMap < > ( ) ; 
 + Map < ResourceLocation , IItemList > tmp = new HashMap < > ( ) ; 
 for ( ResourceLocation key : manager . getAllResourceLocations ( " recipes " , filename - > filename . equals ( " _ constants . json " ) ) ) 
 { 
 String path = key . getPath ( ) ; 
 @ @ - 304 , 11 + 304 , 17 @ @ public class CraftingHelper 
 for ( int x = 0 ; x < elements . length ; x + + ) 
 { 
 JsonObject json = elements [ x ] ; 
 + / / Force namespace to the directory that this constants file is in , to prevent modders from overriding other ' s sneakily 
 + / / TODO : Move back to a resource pack / mod specific constant list ? 
 + ResourceLocation name = json . has ( " name " ) ? new ResourceLocation ( JsonUtils . getString ( json , " name " ) ) : null ; 
 + if ( name ! = null ) 
 + name = new ResourceLocation ( key . getNamespace ( ) , name . getPath ( ) ) ; 
 + 
 if ( json = = null | | json . size ( ) = = 0 ) 
 LOGGER . error ( CRAFTHELPER , " Couldn ' t load constant # { } from { } as it ' s null or empty " , x , key ) ; 
 else if ( json . has ( " conditions " ) & & ! processConditions ( JsonUtils . getJsonArray ( json , " conditions " ) ) ) 
 LOGGER . info ( CRAFTHELPER , " Skipping loading constant # { } from { } as it ' s conditions were not met " , x , key ) ; 
 - else if ( ! json . has ( " name " ) ) 
 + else if ( name = = null ) 
 LOGGER . error ( CRAFTHELPER , " Couldn ' t load constant # { } from { } as it ' s missing ` name ` " , x , key ) ; 
 else if ( json . has ( " items " ) ) 
 { 
 @ @ - 325 , 12 + 331 , 12 @ @ public class CraftingHelper 
 } 
 } 
 if ( ! items . isEmpty ( ) ) 
 - ret . put ( new ResourceLocation ( JsonUtils . getString ( json , " name " ) ) , new StackList ( items ) ) ; 
 + tmp . put ( name , new StackList ( items ) ) ; 
 } 
 else if ( json . has ( " tag " ) ) 
 - ret . put ( new ResourceLocation ( JsonUtils . getString ( json , " name " ) ) , Ingredient . deserializeItemList ( json ) ) ; 
 + tmp . put ( name , Ingredient . deserializeItemList ( json ) ) ; 
 else if ( json . has ( " item " ) ) 
 - ret . put ( new ResourceLocation ( JsonUtils . getString ( json , " name " ) ) , new StackList ( Lists . newArrayList ( getItemStack ( JsonUtils . getJsonObject ( json , " item " ) , true ) ) ) ) ; 
 + tmp . put ( name , new StackList ( Lists . newArrayList ( getItemStack ( JsonUtils . getJsonObject ( json , " item " ) , true ) ) ) ) ; 
 else 
 LOGGER . error ( CRAFTHELPER , " Couldn ' t load constant # { } from { } as it ' s missing ` item ` or ` items ` element " , x , key ) ; 
 } 
 @ @ - 345 , 6 + 351 , 6 @ @ public class CraftingHelper 
 LOGGER . error ( CRAFTHELPER , " Couldn ' t read constants from { } " , key , e ) ; 
 } 
 } 
 - constants = ret ; 
 + constants = tmp ; 
 } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch 
 index 4027bd8 . . 697a870 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / Ingredient . java . patch 
 @ @ - 9 , 8 + 9 , 11 @ @ 
 public static final Ingredient field _ 193370 _ a = new Ingredient ( new ItemStack [ 0 ] ) 
 { 
 public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) 
 - @ @ - 23 , 12 + 25 , 17 @ @ 
 + @ @ - 21 , 17 + 23 , 34 @ @ 
 + } 
 + } ; 
 private final ItemStack [ ] field _ 193371 _ b ; 
 + + private final ItemStack [ ] matchingStacksExploded ; 
 private IntList field _ 194140 _ c ; 
 
 + protected Ingredient ( int size ) 
 @ @ - 21 , 14 + 24 , 41 @ @ 
 protected Ingredient ( ItemStack . . . p _ i47503 _ 1 _ ) 
 { 
 this . field _ 193371 _ b = p _ i47503 _ 1 _ ; 
 + + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; 
 + + for ( ItemStack s : p _ i47503 _ 1 _ ) 
 + + { 
 + + if ( s . func _ 190926 _ b ( ) ) 
 + + continue ; 
 + + if ( s . func _ 77960 _ j ( ) = = net . minecraftforge . oredict . OreDictionary . WILDCARD _ VALUE ) 
 + + s . func _ 77973 _ b ( ) . func _ 150895 _ a ( net . minecraft . creativetab . CreativeTabs . field _ 78027 _ g , lst ) ; 
 + + else 
 + + lst . add ( s ) ; 
 + + } 
 + + this . matchingStacksExploded = lst . toArray ( new ItemStack [ lst . size ( ) ] ) ; 
 + Ingredient . INSTANCES . add ( this ) ; 
 } 
 
 - @ SideOnly ( Side . CLIENT ) 
 public ItemStack [ ] func _ 193365 _ a ( ) 
 { 
 - return this . field _ 193371 _ b ; 
 - @ @ - 76 , 6 + 83 , 18 @ @ 
 + - return this . field _ 193371 _ b ; 
 + + return this . matchingStacksExploded ; 
 + } 
 + 
 + public boolean apply ( @ Nullable ItemStack p _ apply _ 1 _ ) 
 + @ @ - 63 , 9 + 82 , 9 @ @ 
 + { 
 + if ( this . field _ 194140 _ c = = null ) 
 + { 
 + - this . field _ 194140 _ c = new IntArrayList ( this . field _ 193371 _ b . length ) ; 
 + + this . field _ 194140 _ c = new IntArrayList ( this . matchingStacksExploded . length ) ; 
 + 
 + - for ( ItemStack itemstack : this . field _ 193371 _ b ) 
 + + for ( ItemStack itemstack : this . matchingStacksExploded ) 
 + { 
 + this . field _ 194140 _ c . add ( RecipeItemHelper . func _ 194113 _ b ( itemstack ) ) ; 
 + } 
 + @ @ - 76 , 6 + 95 , 18 @ @ 
 return this . field _ 194140 _ c ; 
 } 
 
 @ @ - 47 , 3 + 77 , 21 @ @ 
 public static Ingredient func _ 193367 _ a ( Item p _ 193367 _ 0 _ ) 
 { 
 return func _ 193369 _ a ( new ItemStack ( p _ 193367 _ 0 _ , 1 , 32767 ) ) ; 
 + @ @ - 108 , 4 + 139 , 17 @ @ 
 + 
 + return field _ 193370 _ a ; 
 + } 
 + + 
 + + / / Merges several vanilla Ingredients together . As a qwerk of how the json is structured , we can ' t tell if its a single Ingredient type or multiple so we split per item and remerge here . 
 + + / / Only public for internal use , so we can access a private field in here . 
 + + public static Ingredient merge ( java . util . Collection < Ingredient > parts ) 
 + + { 
 + + net . minecraft . util . NonNullList < ItemStack > lst = net . minecraft . util . NonNullList . func _ 191196 _ a ( ) ; 
 + + for ( Ingredient part : parts ) 
 + + { 
 + + for ( ItemStack stack : part . field _ 193371 _ b ) 
 + + lst . add ( stack ) ; 
 + + } 
 + + return new Ingredient ( lst . toArray ( new ItemStack [ lst . size ( ) ] ) ) ; 
 + + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index f4479c2 . . ec1923a 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 143 , 14 + 143 , 15 @ @ public class CraftingHelper { 
 if ( json . isJsonArray ( ) ) 
 { 
 List < Ingredient > ingredients = Lists . newArrayList ( ) ; 
 - List < ItemStack > vanilla = Lists . newArrayList ( ) ; 
 - json . getAsJsonArray ( ) . forEach ( ( ele ) - > { 
 + List < Ingredient > vanilla = Lists . newArrayList ( ) ; 
 + json . getAsJsonArray ( ) . forEach ( ( ele ) - > 
 + { 
 Ingredient ing = CraftingHelper . getIngredient ( ele , context ) ; 
 
 - if ( ing . getClass ( ) = = Ingredient . class ) { 
 + if ( ing . getClass ( ) = = Ingredient . class ) 
 + { 
 / / Vanilla , Due to how we read it splits each itemstack , so we pull out to re - merge later 
 - for ( ItemStack stack : ing . getMatchingStacks ( ) ) 
 - vanilla . add ( stack ) ; 
 + vanilla . add ( ing ) ; 
 } 
 else 
 { 
 @ @ - 160 , 8 + 161 , 7 @ @ public class CraftingHelper { 
 
 if ( ! vanilla . isEmpty ( ) ) 
 { 
 - ItemStack [ ] items = vanilla . toArray ( new ItemStack [ vanilla . size ( ) ] ) ; 
 - ingredients . add ( Ingredient . fromStacks ( items ) ) ; 
 + ingredients . add ( Ingredient . merge ( vanilla ) ) ; 
 } 
 
 if ( ingredients . size ( ) = = 0 ) 
 diff - - git a / src / test / resources / assets / forge / recipes / _ constants . json b / src / test / resources / assets / forge / recipes / _ constants . json 
 new file mode 100644 
 index 0000000 . . a0e2377 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forge / recipes / _ constants . json 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + [ 
 + { 
 + 	 " name " : " forge : some _ wool " , 
 + 	 " ingredient " : [ 
 + 	 	 { 
 + 	 	 	 " item " : " minecraft : wool " , 
 + 	 	 	 " data " : 1 
 + 	 	 } , 
 + 	 	 { 
 + 	 	 	 " item " : " minecraft : wool " , 
 + 	 	 	 " data " : 2 
 + 	 	 } 	 	 
 + 	 ] 
 + } 
 + ] 
 \ No newline at end of file 
 diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ constant . json b / src / test / resources / assets / forge / recipes / shapeless _ constant . json 
 new file mode 100644 
 index 0000000 . . f072c7d 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forge / recipes / shapeless _ constant . json 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + { 
 + " type " : " minecraft : crafting _ shapeless " , 
 + " result " : { 
 + " item " : " minecraft : stone " , 
 + " data " : 0 
 + } , 
 + " ingredients " : [ 
 + { 
 + " item " : " # forge : some _ wool " 
 + } , 
 + { 
 + " item " : " # forge : some _ wool " 
 + } 
 + ] 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json b / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json 
 new file mode 100644 
 index 0000000 . . 9795984 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forge / recipes / shapeless _ wildcard . json 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + { 
 + " result " : { 
 + " item " : " minecraft : dirt " , 
 + " data " : 1 
 + } , 
 + " ingredients " : [ 
 + { 
 + " item " : " minecraft : stone " , 
 + " data " : 32767 
 + } 
 + ] , 
 + " type " : " minecraft : crafting _ shapeless " 
 + } 
 \ No newline at end of file
