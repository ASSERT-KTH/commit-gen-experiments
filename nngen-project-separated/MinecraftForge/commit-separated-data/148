BLEU SCORE: 0.06191082705295717

TEST MSG: Fix up some stuff with resource packs , so the guilist works properly .
GENERATED MSG: Add I18n accessor , fix up some mod log messages , make the EnumExtender work .

TEST DIFF (one line): diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / StringSubstitutor . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / StringSubstitutor . java <nl> index 400221a . . ae49998 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / StringSubstitutor . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / StringSubstitutor . java <nl> @ @ - 31 , 8 + 31 , 8 @ @ import java . util . Map ; <nl> public class StringSubstitutor <nl> { <nl> private static final Map < String , String > globals = ImmutableMap . of ( <nl> - " mcVersion " , FMLLoader . forgeVersion , <nl> - " forgeVersion " , FMLLoader . mcVersion <nl> + " mcVersion " , FMLLoader . mcVersion , <nl> + " forgeVersion " , FMLLoader . forgeVersion <nl> ) ; <nl> <nl> public static String replace ( final String in , final ModFile file ) { <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class StringSubstitutor <nl> { <nl> return globals . get ( parts [ 1 ] ) ; <nl> } <nl> - else if ( " file " . equals ( pfx ) ) <nl> + else if ( " file " . equals ( pfx ) & & file ! = null ) <nl> { <nl> return String . valueOf ( file . getSubstitutionMap ( ) . get ( ) . get ( parts [ 1 ] ) ) ; <nl> } <nl> @ @ - 60 , 7 + 60 , 4 @ @ public class StringSubstitutor <nl> } <nl> } ; <nl> } <nl> - private static List < String > split ( final String in ) { <nl> - return Arrays . asList ( in . split ( " . " ) ) ; <nl> - } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java <nl> index a4413b5 . . 48357e3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java <nl> @ @ - 433 , 8 + 433 , 8 @ @ public class GuiModList extends GuiScreen <nl> Pair < ResourceLocation , Dimension > logoData = selectedMod . getLogoFile ( ) . map ( logoFile - > <nl> { <nl> TextureManager tm = mc . getTextureManager ( ) ; <nl> - ResourcePackInfoClient pack = ResourcePackLoader . getResourcePackInfo ( selectedMod . getModId ( ) ) ; <nl> - if ( pack = = null ) pack = ResourcePackLoader . getResourcePackInfo ( " forge " ) ; <nl> + ResourcePackInfoClient pack = ResourcePackLoader . getResourcePackInfoForModId ( selectedMod . getModId ( ) ) ; <nl> + if ( pack = = null ) pack = ResourcePackLoader . getResourcePackInfoForModId ( " forge " ) ; <nl> try <nl> { <nl> NativeImage logo = null ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java b / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java <nl> index 264867b . . 8894e6c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java <nl> + + + b / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package net . minecraftforge . fml . packs ; <nl> <nl> import net . minecraft . resources . AbstractResourcePack ; <nl> + import net . minecraft . resources . ResourcePackInfo ; <nl> import net . minecraft . resources . ResourcePackType ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> @ @ - 42 , 6 + 43 , 7 @ @ import com . google . common . base . Joiner ; <nl> public class ModFileResourcePack extends AbstractResourcePack <nl> { <nl> private final ModFile modFile ; <nl> + private ResourcePackInfo packInfo ; <nl> <nl> public ModFileResourcePack ( final ModFile modFile ) <nl> { <nl> @ @ - 135 , 4 + 137 , 12 @ @ public class ModFileResourcePack extends AbstractResourcePack <nl> { <nl> <nl> } <nl> + <nl> + < T extends ResourcePackInfo > void setPackInfo ( final T packInfo ) { <nl> + this . packInfo = packInfo ; <nl> + } <nl> + <nl> + < T extends ResourcePackInfo > T getPackInfo ( ) { <nl> + return ( T ) this . packInfo ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / packs / ResourcePackLoader . java b / src / main / java / net / minecraftforge / fml / packs / ResourcePackLoader . java <nl> index 5933973 . . 8f5d4ab 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / packs / ResourcePackLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / packs / ResourcePackLoader . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . io . InputStream ; <nl> import java . nio . file . Files ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> + import java . util . Objects ; <nl> import java . util . function . Function ; <nl> import java . util . stream . Collectors ; <nl> <nl> @ @ - 39 , 14 + 40 , 18 @ @ public class ResourcePackLoader <nl> private static Map < ModFile , ModFileResourcePack > modResourcePacks ; <nl> private static ResourcePackList < ? > resourcePackList ; <nl> <nl> - public static IResourcePack getResourcePackFor ( String modId ) <nl> + public static ModFileResourcePack getResourcePackFor ( String modId ) <nl> { <nl> return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public static < T extends ResourcePackInfo > T getResourcePackInfo ( String modId ) { <nl> - return ( T ) resourcePackList . getPackInfo ( modId ) ; <nl> + public static < T extends ResourcePackInfo > T getResourcePackInfoForModId ( String modId ) { <nl> + if ( Objects . equals ( modId , " minecraft " ) ) { <nl> + / / Additional resources for MC are associated with forge <nl> + return getResourcePackFor ( " forge " ) . getPackInfo ( ) ; <nl> + } <nl> + return getResourcePackFor ( modId ) . getPackInfo ( ) ; <nl> } <nl> <nl> public static < T extends ResourcePackInfo > void loadResourcePacks ( ResourcePackList < T > resourcePacks ) { <nl> @ @ - 57 , 50 + 62 , 6 @ @ public class ResourcePackLoader <nl> resourcePacks . addPackFinder ( new ModPackFinder ( ) ) ; <nl> } <nl> <nl> - private static class ForgeFolderPack extends FolderPack { <nl> - public ForgeFolderPack ( final File folder ) { <nl> - super ( folder ) ; <nl> - } <nl> - <nl> - public InputStream getResourceStream ( ResourcePackType type , ResourceLocation location ) throws IOException { <nl> - if ( location . getPath ( ) . startsWith ( " lang / " ) ) { <nl> - return super . getResourceStream ( ResourcePackType . CLIENT _ RESOURCES , location ) ; <nl> - } else { <nl> - return super . getResourceStream ( type , location ) ; <nl> - } <nl> - } <nl> - <nl> - public boolean resourceExists ( ResourcePackType type , ResourceLocation location ) { <nl> - if ( location . getPath ( ) . startsWith ( " lang / " ) ) { <nl> - return super . resourceExists ( ResourcePackType . CLIENT _ RESOURCES , location ) ; <nl> - } else { <nl> - return super . resourceExists ( type , location ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - private static class ForgeFilePack extends FilePack { <nl> - public ForgeFilePack ( final File folder ) { <nl> - super ( folder ) ; <nl> - } <nl> - <nl> - public InputStream getResourceStream ( ResourcePackType type , ResourceLocation location ) throws IOException { <nl> - if ( location . getPath ( ) . startsWith ( " lang / " ) ) { <nl> - return super . getResourceStream ( ResourcePackType . CLIENT _ RESOURCES , location ) ; <nl> - } else { <nl> - return super . getResourceStream ( type , location ) ; <nl> - } <nl> - } <nl> - <nl> - public boolean resourceExists ( ResourcePackType type , ResourceLocation location ) { <nl> - if ( location . getPath ( ) . startsWith ( " lang / " ) ) { <nl> - return super . resourceExists ( ResourcePackType . CLIENT _ RESOURCES , location ) ; <nl> - } else { <nl> - return super . resourceExists ( type , location ) ; <nl> - } <nl> - } <nl> - <nl> - } <nl> private static class ModPackFinder implements IPackFinder <nl> { <nl> @ Override <nl> @ @ - 109 , 7 + 70 , 9 @ @ public class ResourcePackLoader <nl> for ( Entry < ModFile , ModFileResourcePack > e : modResourcePacks . entrySet ( ) ) <nl> { <nl> String name = " modfile / " + e . getKey ( ) . getFileName ( ) ; <nl> - packList . put ( name , ResourcePackInfo . func _ 195793 _ a ( name , true , ( ) - > e . getValue ( ) , factory , ResourcePackInfo . Priority . BOTTOM ) ) ; <nl> + final T packInfo = ResourcePackInfo . func _ 195793 _ a ( name , true , ( ) - > e . getValue ( ) , factory , ResourcePackInfo . Priority . BOTTOM ) ; <nl> + e . getValue ( ) . setPackInfo ( packInfo ) ; <nl> + packList . put ( name , packInfo ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / resources / META - INF / mods . toml b / src / main / resources / META - INF / mods . toml <nl> index 2ae7447 . . cb65a6d 100644 <nl> - - - a / src / main / resources / META - INF / mods . toml <nl> + + + b / src / main / resources / META - INF / mods . toml <nl> @ @ - 1 , 11 + 1 , 17 @ @ <nl> modLoader = " javafml " <nl> - loaderVersion = " [ 2 . 0 , ] " <nl> + loaderVersion = " [ 24 , ] " <nl> updateJSONURL = " https : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " <nl> issueTrackerURL = " http : / / www . minecraftforge . net / " <nl> + logoFile = " forge _ logo . png " <nl> <nl> [ [ mods ] ] <nl> modId = " forge " <nl> - version = " $ { jarVersion } " <nl> + # We use the global forge version <nl> + version = " $ { global . forgeVersion } " <nl> displayName = " Forge " <nl> - description = " Mod loading a compatibility API " <nl> + credits = " LexManos , cpw , Mezz , fry , tterrag , gigaherz , illy " <nl> + authors = " LexManos , cpw , Mezz , fry , Spacetoad , Eloraam " <nl> + description = ' ' ' <nl> + Forge , a broad compatibility API . <nl> + ' ' ' <nl> <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 94ab2e7 . . ef1db7c 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { <nl> into " $ buildDir / classes / java / main " <nl> } <nl> } <nl> + / / jvmArgs = [ ' - verbose : class ' ] <nl> classpath sourceSets . main . runtimeClasspath <nl> main ' net . minecraftforge . fml . LaunchTesting ' <nl> systemProperties target : ' fmldevclient ' <nl> diff - - git a / patches / minecraft / net / minecraft / client / resources / I18n . java . patch b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 981b15c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - a / net / minecraft / client / resources / I18n . java <nl> + + + + b / net / minecraft / client / resources / I18n . java <nl> + @ @ - 9 , 6 + 9 , 7 @ @ <nl> + <nl> + static void setLocale ( Locale i18nLocaleIn ) { <nl> + i18nLocale = i18nLocaleIn ; <nl> + + net . minecraftforge . fml . ForgeI18n . loadLanguageData ( i18nLocale . properties ) ; <nl> + } <nl> + <nl> + public static String format ( String translateKey , Object . . . parameters ) { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> index 2f24f33 . . 81f5044 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> @ @ - 88 , 8 + 88 , 6 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook <nl> public static boolean fixVanillaCascading = false ; / / There are various places in vanilla that cause cascading worldgen . Enabling this WILL change where blocks are placed to prevent this . <nl> / / DO NOT contact Forge about worldgen not ' matching ' vanilla if this flag is set . <nl> <nl> - static final Logger log = LogManager . getLogger ( ForgeVersion . MOD _ ID ) ; <nl> - <nl> private static Configuration config ; <nl> private static ForgeMod INSTANCE ; <nl> public static ForgeMod getInstance ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> index f6d4a74 . . df442bb 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> + + + b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package net . minecraftforge . common . asm ; <nl> <nl> import java . nio . file . Path ; <nl> <nl> + import net . minecraftforge . fml . AdvancedLogMessageAdapter ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . objectweb . asm . Opcodes ; <nl> @ @ - 65 , 7 + 66 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> if ( ( classNode . access & Opcodes . ACC _ ENUM ) = = 0 ) <nl> return classNode ; <nl> <nl> - Type array = Type . getType ( " [ " + classType . getInternalName ( ) ) ; <nl> + Type array = Type . getType ( " [ " + classType . getDescriptor ( ) ) ; <nl> final int flags = Opcodes . ACC _ PRIVATE | Opcodes . ACC _ STATIC | Opcodes . ACC _ FINAL | Opcodes . ACC _ SYNTHETIC ; <nl> <nl> FieldNode values = classNode . fields . stream ( ) . filter ( f - > f . desc . contentEquals ( array . getDescriptor ( ) ) & & ( ( f . access & flags ) = = flags ) ) . findFirst ( ) . orElse ( null ) ; <nl> @ @ - 87 , 16 + 88 , 21 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> MethodNode ctr = classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) & & m . desc . equals ( desc ) ) . findFirst ( ) . orElse ( null ) ; <nl> if ( ctr = = null ) <nl> { <nl> - LOGGER . error ( " Enum has create method with no matching constructor : " ) ; <nl> - LOGGER . error ( " Target : " + desc ) ; <nl> - classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > LOGGER . error ( " : " + m . desc ) ) ; <nl> + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { <nl> + sb . append ( " Enum has create method with no matching constructor : \ n " ) ; <nl> + sb . append ( " Target : " ) . append ( desc ) . append ( " \ n " ) ; <nl> + classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > sb . append ( " : " ) . append ( m . desc ) . append ( " \ n " ) ) ; <nl> + } ) ) ; <nl> throw new IllegalStateException ( " Enum has create method with no matching constructor : " + desc ) ; <nl> } <nl> <nl> if ( values = = null ) <nl> { <nl> - LOGGER . error ( " Enum has create method but we could not find $ VALUES : " ) ; <nl> - classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . forEach ( m - > LOGGER . error ( " " + m . name + " " + m . desc ) ) ; <nl> + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { <nl> + sb . append ( " Enum has create method but we could not find $ VALUES . Found : \ n " ) ; <nl> + classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . <nl> + forEach ( m - > sb . append ( " " ) . append ( m . name ) . append ( " " ) . append ( m . desc ) . append ( " \ n " ) ) ; <nl> + } ) ) ; <nl> throw new IllegalStateException ( " Enum has create method but we could not find $ VALUES " ) ; <nl> } <nl> <nl> @ @ - 109 , 17 + 115 , 18 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> ins . dup ( ) ; <nl> ins . load ( 0 , STRING ) ; <nl> ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> + ins . arraylength ( ) ; <nl> ins . iconst ( 1 ) ; <nl> ins . add ( Type . INT _ TYPE ) ; <nl> for ( int x = 1 ; x < args . length ; x + + ) <nl> ins . load ( x , args [ x ] ) ; <nl> - ins . invokespecial ( classType . getDescriptor ( ) , " < init > " , desc , false ) ; <nl> + ins . invokespecial ( classType . getInternalName ( ) , " < init > " , desc , false ) ; <nl> ins . store ( 1 , classType ) ; <nl> / / VALUES = ArrayUtils . add ( VALUES , ret ) <nl> ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> ins . load ( 1 , classType ) ; <nl> - ins . invokestatic ( ARRAY _ UTILS . getDescriptor ( ) , " add " , ADD _ DESC , false ) ; <nl> - ins . checkcast ( array ) ; <nl> + ins . invokestatic ( ARRAY _ UTILS . getInternalName ( ) , " add " , ADD _ DESC , false ) ; <nl> + ins . checkcast ( Type . getType ( values . desc ) ) ; <nl> ins . putstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> / / EnumHelper . cleanEnumCache ( ThisType . class ) <nl> ins . visitLdcInsn ( classType ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java <nl> new file mode 100644 <nl> index 0000000 . . 369b4dc <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import org . apache . logging . log4j . message . Message ; <nl> + import org . apache . logging . log4j . util . StringBuilderFormattable ; <nl> + <nl> + import java . util . function . Consumer ; <nl> + <nl> + public class AdvancedLogMessageAdapter implements Message , StringBuilderFormattable { <nl> + private static final Object [ ] EMPTY = new Object [ 0 ] ; <nl> + <nl> + private final Consumer < StringBuilder > logMessageBuilder ; <nl> + <nl> + public AdvancedLogMessageAdapter ( final Consumer < StringBuilder > logMessageBuilder ) { <nl> + this . logMessageBuilder = logMessageBuilder ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getFormattedMessage ( ) { <nl> + return " " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getFormat ( ) { <nl> + return " " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Object [ ] getParameters ( ) { <nl> + return EMPTY ; <nl> + } <nl> + <nl> + @ Override <nl> + public Throwable getThrowable ( ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void formatTo ( final StringBuilder buffer ) { <nl> + logMessageBuilder . accept ( buffer ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / BrandingControl . java b / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> index 80b6c90 . . a101900 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> + + + b / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ package net . minecraftforge . fml ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Lists ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> - import net . minecraftforge . fml . ModList ; <nl> <nl> import java . text . MessageFormat ; <nl> import java . util . Arrays ; <nl> @ @ - 47 , 7 + 46 , 7 @ @ public class BrandingControl <nl> brd . add ( " Forge " + ForgeVersion . getVersion ( ) ) ; <nl> int tModCount = ModList . get ( ) . size ( ) ; <nl> <nl> - brd . add ( MessageFormat . format ( " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " , tModCount ) ) ; <nl> + brd . add ( MessageFormat . format ( ForgeI18n . getPattern ( " fml . menu . loadingmods " ) , tModCount ) ) ; <nl> brandings = brd . build ( ) ; <nl> brandingsNoMC = brandings . subList ( 1 , brandings . size ( ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> new file mode 100644 <nl> index 0000000 . . 1faf950 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import java . util . Map ; <nl> + <nl> + public class ForgeI18n { <nl> + private static Map < String , String > i18n ; <nl> + <nl> + static String getPattern ( final String patternName ) { <nl> + return i18n . get ( patternName ) ; <nl> + } <nl> + <nl> + public static void loadLanguageData ( final Map < String , String > properties ) { <nl> + i18n = properties ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java <nl> index 1be4373 . . d66d107 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java <nl> @ @ - 46 , 7 + 46 , 8 @ @ public class ResourcePackLoader <nl> <nl> public static IResourcePack getResourcePackFor ( String modId ) <nl> { <nl> - return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; <nl> + if ( modId = = " forge " ) return forgePack ; <nl> + else return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java <nl> index c708ae1 . . 23a6726 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import net . minecraftforge . fml . ModContainer ; <nl> import net . minecraftforge . fml . client . IDisplayableError ; <nl> import net . minecraftforge . fml . client . gui . GuiDupesFound ; <nl> <nl> - public class DuplicateModsFoundException extends LoaderException implements IDisplayableError <nl> + public class DuplicateModsFoundException extends LoaderException <nl> { <nl> private static final long serialVersionUID = 1L ; <nl> public SetMultimap < ModContainer , File > dupes ; <nl> @ @ - 38 , 22 + 38 , 4 @ @ public class DuplicateModsFoundException extends LoaderException implements IDis <nl> public DuplicateModsFoundException ( SetMultimap < ModContainer , File > dupes ) { <nl> this . dupes = dupes ; <nl> } <nl> - <nl> - @ Override <nl> - protected void printStackTrace ( WrappedPrintStream stream ) <nl> - { <nl> - stream . println ( " Duplicate Mods : " ) ; <nl> - for ( Entry < ModContainer , File > e : dupes . entries ( ) ) <nl> - { <nl> - stream . println ( String . format ( " \ t % s : % s " , e . getKey ( ) . getModId ( ) , e . getValue ( ) . getAbsolutePath ( ) ) ) ; <nl> - } <nl> - stream . println ( " " ) ; <nl> - } <nl> - <nl> - @ Override <nl> - @ OnlyIn ( Dist . CLIENT ) <nl> - public GuiScreen createGui ( ) <nl> - { <nl> - return new GuiDupesFound ( this ) ; <nl> - } <nl> } <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json <nl> new file mode 100644 <nl> index 0000000 . . 74fd746 <nl> - - - / dev / null <nl> + + + b / src / main / resources / assets / forge / lang / en _ us . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + { <nl> + " fml . menu . mods " : " Mods " , <nl> + " fml . menu . mods . normal " : " Off " , <nl> + " fml . menu . mods . search " : " Search " , <nl> + " fml . menu . mods . a _ to _ z " : " A - Z " , <nl> + " fml . menu . mods . z _ to _ a " : " Z - A " , <nl> + " fml . menu . mods . config " : " Config " , <nl> + " fml . menu . modoptions " : " Mod Options . . . " , <nl> + " fml . menu . loadingmods " : " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " <nl> + }

TEST DIFF:
diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / StringSubstitutor . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / StringSubstitutor . java 
 index 400221a . . ae49998 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / StringSubstitutor . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / StringSubstitutor . java 
 @ @ - 31 , 8 + 31 , 8 @ @ import java . util . Map ; 
 public class StringSubstitutor 
 { 
 private static final Map < String , String > globals = ImmutableMap . of ( 
 - " mcVersion " , FMLLoader . forgeVersion , 
 - " forgeVersion " , FMLLoader . mcVersion 
 + " mcVersion " , FMLLoader . mcVersion , 
 + " forgeVersion " , FMLLoader . forgeVersion 
 ) ; 
 
 public static String replace ( final String in , final ModFile file ) { 
 @ @ - 52 , 7 + 52 , 7 @ @ public class StringSubstitutor 
 { 
 return globals . get ( parts [ 1 ] ) ; 
 } 
 - else if ( " file " . equals ( pfx ) ) 
 + else if ( " file " . equals ( pfx ) & & file ! = null ) 
 { 
 return String . valueOf ( file . getSubstitutionMap ( ) . get ( ) . get ( parts [ 1 ] ) ) ; 
 } 
 @ @ - 60 , 7 + 60 , 4 @ @ public class StringSubstitutor 
 } 
 } ; 
 } 
 - private static List < String > split ( final String in ) { 
 - return Arrays . asList ( in . split ( " . " ) ) ; 
 - } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java 
 index a4413b5 . . 48357e3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java 
 @ @ - 433 , 8 + 433 , 8 @ @ public class GuiModList extends GuiScreen 
 Pair < ResourceLocation , Dimension > logoData = selectedMod . getLogoFile ( ) . map ( logoFile - > 
 { 
 TextureManager tm = mc . getTextureManager ( ) ; 
 - ResourcePackInfoClient pack = ResourcePackLoader . getResourcePackInfo ( selectedMod . getModId ( ) ) ; 
 - if ( pack = = null ) pack = ResourcePackLoader . getResourcePackInfo ( " forge " ) ; 
 + ResourcePackInfoClient pack = ResourcePackLoader . getResourcePackInfoForModId ( selectedMod . getModId ( ) ) ; 
 + if ( pack = = null ) pack = ResourcePackLoader . getResourcePackInfoForModId ( " forge " ) ; 
 try 
 { 
 NativeImage logo = null ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java b / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java 
 index 264867b . . 8894e6c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java 
 + + + b / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package net . minecraftforge . fml . packs ; 
 
 import net . minecraft . resources . AbstractResourcePack ; 
 + import net . minecraft . resources . ResourcePackInfo ; 
 import net . minecraft . resources . ResourcePackType ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 @ @ - 42 , 6 + 43 , 7 @ @ import com . google . common . base . Joiner ; 
 public class ModFileResourcePack extends AbstractResourcePack 
 { 
 private final ModFile modFile ; 
 + private ResourcePackInfo packInfo ; 
 
 public ModFileResourcePack ( final ModFile modFile ) 
 { 
 @ @ - 135 , 4 + 137 , 12 @ @ public class ModFileResourcePack extends AbstractResourcePack 
 { 
 
 } 
 + 
 + < T extends ResourcePackInfo > void setPackInfo ( final T packInfo ) { 
 + this . packInfo = packInfo ; 
 + } 
 + 
 + < T extends ResourcePackInfo > T getPackInfo ( ) { 
 + return ( T ) this . packInfo ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / packs / ResourcePackLoader . java b / src / main / java / net / minecraftforge / fml / packs / ResourcePackLoader . java 
 index 5933973 . . 8f5d4ab 100644 
 - - - a / src / main / java / net / minecraftforge / fml / packs / ResourcePackLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / packs / ResourcePackLoader . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . io . InputStream ; 
 import java . nio . file . Files ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 + import java . util . Objects ; 
 import java . util . function . Function ; 
 import java . util . stream . Collectors ; 
 
 @ @ - 39 , 14 + 40 , 18 @ @ public class ResourcePackLoader 
 private static Map < ModFile , ModFileResourcePack > modResourcePacks ; 
 private static ResourcePackList < ? > resourcePackList ; 
 
 - public static IResourcePack getResourcePackFor ( String modId ) 
 + public static ModFileResourcePack getResourcePackFor ( String modId ) 
 { 
 return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - public static < T extends ResourcePackInfo > T getResourcePackInfo ( String modId ) { 
 - return ( T ) resourcePackList . getPackInfo ( modId ) ; 
 + public static < T extends ResourcePackInfo > T getResourcePackInfoForModId ( String modId ) { 
 + if ( Objects . equals ( modId , " minecraft " ) ) { 
 + / / Additional resources for MC are associated with forge 
 + return getResourcePackFor ( " forge " ) . getPackInfo ( ) ; 
 + } 
 + return getResourcePackFor ( modId ) . getPackInfo ( ) ; 
 } 
 
 public static < T extends ResourcePackInfo > void loadResourcePacks ( ResourcePackList < T > resourcePacks ) { 
 @ @ - 57 , 50 + 62 , 6 @ @ public class ResourcePackLoader 
 resourcePacks . addPackFinder ( new ModPackFinder ( ) ) ; 
 } 
 
 - private static class ForgeFolderPack extends FolderPack { 
 - public ForgeFolderPack ( final File folder ) { 
 - super ( folder ) ; 
 - } 
 - 
 - public InputStream getResourceStream ( ResourcePackType type , ResourceLocation location ) throws IOException { 
 - if ( location . getPath ( ) . startsWith ( " lang / " ) ) { 
 - return super . getResourceStream ( ResourcePackType . CLIENT _ RESOURCES , location ) ; 
 - } else { 
 - return super . getResourceStream ( type , location ) ; 
 - } 
 - } 
 - 
 - public boolean resourceExists ( ResourcePackType type , ResourceLocation location ) { 
 - if ( location . getPath ( ) . startsWith ( " lang / " ) ) { 
 - return super . resourceExists ( ResourcePackType . CLIENT _ RESOURCES , location ) ; 
 - } else { 
 - return super . resourceExists ( type , location ) ; 
 - } 
 - } 
 - } 
 - 
 - private static class ForgeFilePack extends FilePack { 
 - public ForgeFilePack ( final File folder ) { 
 - super ( folder ) ; 
 - } 
 - 
 - public InputStream getResourceStream ( ResourcePackType type , ResourceLocation location ) throws IOException { 
 - if ( location . getPath ( ) . startsWith ( " lang / " ) ) { 
 - return super . getResourceStream ( ResourcePackType . CLIENT _ RESOURCES , location ) ; 
 - } else { 
 - return super . getResourceStream ( type , location ) ; 
 - } 
 - } 
 - 
 - public boolean resourceExists ( ResourcePackType type , ResourceLocation location ) { 
 - if ( location . getPath ( ) . startsWith ( " lang / " ) ) { 
 - return super . resourceExists ( ResourcePackType . CLIENT _ RESOURCES , location ) ; 
 - } else { 
 - return super . resourceExists ( type , location ) ; 
 - } 
 - } 
 - 
 - } 
 private static class ModPackFinder implements IPackFinder 
 { 
 @ Override 
 @ @ - 109 , 7 + 70 , 9 @ @ public class ResourcePackLoader 
 for ( Entry < ModFile , ModFileResourcePack > e : modResourcePacks . entrySet ( ) ) 
 { 
 String name = " modfile / " + e . getKey ( ) . getFileName ( ) ; 
 - packList . put ( name , ResourcePackInfo . func _ 195793 _ a ( name , true , ( ) - > e . getValue ( ) , factory , ResourcePackInfo . Priority . BOTTOM ) ) ; 
 + final T packInfo = ResourcePackInfo . func _ 195793 _ a ( name , true , ( ) - > e . getValue ( ) , factory , ResourcePackInfo . Priority . BOTTOM ) ; 
 + e . getValue ( ) . setPackInfo ( packInfo ) ; 
 + packList . put ( name , packInfo ) ; 
 } 
 } 
 
 diff - - git a / src / main / resources / META - INF / mods . toml b / src / main / resources / META - INF / mods . toml 
 index 2ae7447 . . cb65a6d 100644 
 - - - a / src / main / resources / META - INF / mods . toml 
 + + + b / src / main / resources / META - INF / mods . toml 
 @ @ - 1 , 11 + 1 , 17 @ @ 
 modLoader = " javafml " 
 - loaderVersion = " [ 2 . 0 , ] " 
 + loaderVersion = " [ 24 , ] " 
 updateJSONURL = " https : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " 
 issueTrackerURL = " http : / / www . minecraftforge . net / " 
 + logoFile = " forge _ logo . png " 
 
 [ [ mods ] ] 
 modId = " forge " 
 - version = " $ { jarVersion } " 
 + # We use the global forge version 
 + version = " $ { global . forgeVersion } " 
 displayName = " Forge " 
 - description = " Mod loading a compatibility API " 
 + credits = " LexManos , cpw , Mezz , fry , tterrag , gigaherz , illy " 
 + authors = " LexManos , cpw , Mezz , fry , Spacetoad , Eloraam " 
 + description = ' ' ' 
 + Forge , a broad compatibility API . 
 + ' ' ' 
 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 94ab2e7 . . ef1db7c 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { 
 into " $ buildDir / classes / java / main " 
 } 
 } 
 + / / jvmArgs = [ ' - verbose : class ' ] 
 classpath sourceSets . main . runtimeClasspath 
 main ' net . minecraftforge . fml . LaunchTesting ' 
 systemProperties target : ' fmldevclient ' 
 diff - - git a / patches / minecraft / net / minecraft / client / resources / I18n . java . patch b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch 
 new file mode 100644 
 index 0000000 . . 981b15c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - a / net / minecraft / client / resources / I18n . java 
 + + + + b / net / minecraft / client / resources / I18n . java 
 + @ @ - 9 , 6 + 9 , 7 @ @ 
 + 
 + static void setLocale ( Locale i18nLocaleIn ) { 
 + i18nLocale = i18nLocaleIn ; 
 + + net . minecraftforge . fml . ForgeI18n . loadLanguageData ( i18nLocale . properties ) ; 
 + } 
 + 
 + public static String format ( String translateKey , Object . . . parameters ) { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 index 2f24f33 . . 81f5044 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 @ @ - 88 , 8 + 88 , 6 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook 
 public static boolean fixVanillaCascading = false ; / / There are various places in vanilla that cause cascading worldgen . Enabling this WILL change where blocks are placed to prevent this . 
 / / DO NOT contact Forge about worldgen not ' matching ' vanilla if this flag is set . 
 
 - static final Logger log = LogManager . getLogger ( ForgeVersion . MOD _ ID ) ; 
 - 
 private static Configuration config ; 
 private static ForgeMod INSTANCE ; 
 public static ForgeMod getInstance ( ) 
 diff - - git a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 index f6d4a74 . . df442bb 100644 
 - - - a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 + + + b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package net . minecraftforge . common . asm ; 
 
 import java . nio . file . Path ; 
 
 + import net . minecraftforge . fml . AdvancedLogMessageAdapter ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . objectweb . asm . Opcodes ; 
 @ @ - 65 , 7 + 66 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 if ( ( classNode . access & Opcodes . ACC _ ENUM ) = = 0 ) 
 return classNode ; 
 
 - Type array = Type . getType ( " [ " + classType . getInternalName ( ) ) ; 
 + Type array = Type . getType ( " [ " + classType . getDescriptor ( ) ) ; 
 final int flags = Opcodes . ACC _ PRIVATE | Opcodes . ACC _ STATIC | Opcodes . ACC _ FINAL | Opcodes . ACC _ SYNTHETIC ; 
 
 FieldNode values = classNode . fields . stream ( ) . filter ( f - > f . desc . contentEquals ( array . getDescriptor ( ) ) & & ( ( f . access & flags ) = = flags ) ) . findFirst ( ) . orElse ( null ) ; 
 @ @ - 87 , 16 + 88 , 21 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 MethodNode ctr = classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) & & m . desc . equals ( desc ) ) . findFirst ( ) . orElse ( null ) ; 
 if ( ctr = = null ) 
 { 
 - LOGGER . error ( " Enum has create method with no matching constructor : " ) ; 
 - LOGGER . error ( " Target : " + desc ) ; 
 - classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > LOGGER . error ( " : " + m . desc ) ) ; 
 + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { 
 + sb . append ( " Enum has create method with no matching constructor : \ n " ) ; 
 + sb . append ( " Target : " ) . append ( desc ) . append ( " \ n " ) ; 
 + classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > sb . append ( " : " ) . append ( m . desc ) . append ( " \ n " ) ) ; 
 + } ) ) ; 
 throw new IllegalStateException ( " Enum has create method with no matching constructor : " + desc ) ; 
 } 
 
 if ( values = = null ) 
 { 
 - LOGGER . error ( " Enum has create method but we could not find $ VALUES : " ) ; 
 - classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . forEach ( m - > LOGGER . error ( " " + m . name + " " + m . desc ) ) ; 
 + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { 
 + sb . append ( " Enum has create method but we could not find $ VALUES . Found : \ n " ) ; 
 + classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . 
 + forEach ( m - > sb . append ( " " ) . append ( m . name ) . append ( " " ) . append ( m . desc ) . append ( " \ n " ) ) ; 
 + } ) ) ; 
 throw new IllegalStateException ( " Enum has create method but we could not find $ VALUES " ) ; 
 } 
 
 @ @ - 109 , 17 + 115 , 18 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 ins . dup ( ) ; 
 ins . load ( 0 , STRING ) ; 
 ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 + ins . arraylength ( ) ; 
 ins . iconst ( 1 ) ; 
 ins . add ( Type . INT _ TYPE ) ; 
 for ( int x = 1 ; x < args . length ; x + + ) 
 ins . load ( x , args [ x ] ) ; 
 - ins . invokespecial ( classType . getDescriptor ( ) , " < init > " , desc , false ) ; 
 + ins . invokespecial ( classType . getInternalName ( ) , " < init > " , desc , false ) ; 
 ins . store ( 1 , classType ) ; 
 / / VALUES = ArrayUtils . add ( VALUES , ret ) 
 ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 ins . load ( 1 , classType ) ; 
 - ins . invokestatic ( ARRAY _ UTILS . getDescriptor ( ) , " add " , ADD _ DESC , false ) ; 
 - ins . checkcast ( array ) ; 
 + ins . invokestatic ( ARRAY _ UTILS . getInternalName ( ) , " add " , ADD _ DESC , false ) ; 
 + ins . checkcast ( Type . getType ( values . desc ) ) ; 
 ins . putstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 / / EnumHelper . cleanEnumCache ( ThisType . class ) 
 ins . visitLdcInsn ( classType ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java 
 new file mode 100644 
 index 0000000 . . 369b4dc 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package net . minecraftforge . fml ; 
 + 
 + import org . apache . logging . log4j . message . Message ; 
 + import org . apache . logging . log4j . util . StringBuilderFormattable ; 
 + 
 + import java . util . function . Consumer ; 
 + 
 + public class AdvancedLogMessageAdapter implements Message , StringBuilderFormattable { 
 + private static final Object [ ] EMPTY = new Object [ 0 ] ; 
 + 
 + private final Consumer < StringBuilder > logMessageBuilder ; 
 + 
 + public AdvancedLogMessageAdapter ( final Consumer < StringBuilder > logMessageBuilder ) { 
 + this . logMessageBuilder = logMessageBuilder ; 
 + } 
 + 
 + @ Override 
 + public String getFormattedMessage ( ) { 
 + return " " ; 
 + } 
 + 
 + @ Override 
 + public String getFormat ( ) { 
 + return " " ; 
 + } 
 + 
 + @ Override 
 + public Object [ ] getParameters ( ) { 
 + return EMPTY ; 
 + } 
 + 
 + @ Override 
 + public Throwable getThrowable ( ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void formatTo ( final StringBuilder buffer ) { 
 + logMessageBuilder . accept ( buffer ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / BrandingControl . java b / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 index 80b6c90 . . a101900 100644 
 - - - a / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 + + + b / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 @ @ - 22 , 7 + 22 , 6 @ @ package net . minecraftforge . fml ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Lists ; 
 import net . minecraftforge . common . ForgeVersion ; 
 - import net . minecraftforge . fml . ModList ; 
 
 import java . text . MessageFormat ; 
 import java . util . Arrays ; 
 @ @ - 47 , 7 + 46 , 7 @ @ public class BrandingControl 
 brd . add ( " Forge " + ForgeVersion . getVersion ( ) ) ; 
 int tModCount = ModList . get ( ) . size ( ) ; 
 
 - brd . add ( MessageFormat . format ( " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " , tModCount ) ) ; 
 + brd . add ( MessageFormat . format ( ForgeI18n . getPattern ( " fml . menu . loadingmods " ) , tModCount ) ) ; 
 brandings = brd . build ( ) ; 
 brandingsNoMC = brandings . subList ( 1 , brandings . size ( ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 new file mode 100644 
 index 0000000 . . 1faf950 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package net . minecraftforge . fml ; 
 + 
 + import java . util . Map ; 
 + 
 + public class ForgeI18n { 
 + private static Map < String , String > i18n ; 
 + 
 + static String getPattern ( final String patternName ) { 
 + return i18n . get ( patternName ) ; 
 + } 
 + 
 + public static void loadLanguageData ( final Map < String , String > properties ) { 
 + i18n = properties ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java 
 index 1be4373 . . d66d107 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java 
 @ @ - 46 , 7 + 46 , 8 @ @ public class ResourcePackLoader 
 
 public static IResourcePack getResourcePackFor ( String modId ) 
 { 
 - return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; 
 + if ( modId = = " forge " ) return forgePack ; 
 + else return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java 
 index c708ae1 . . 23a6726 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java 
 @ @ - 30 , 7 + 30 , 7 @ @ import net . minecraftforge . fml . ModContainer ; 
 import net . minecraftforge . fml . client . IDisplayableError ; 
 import net . minecraftforge . fml . client . gui . GuiDupesFound ; 
 
 - public class DuplicateModsFoundException extends LoaderException implements IDisplayableError 
 + public class DuplicateModsFoundException extends LoaderException 
 { 
 private static final long serialVersionUID = 1L ; 
 public SetMultimap < ModContainer , File > dupes ; 
 @ @ - 38 , 22 + 38 , 4 @ @ public class DuplicateModsFoundException extends LoaderException implements IDis 
 public DuplicateModsFoundException ( SetMultimap < ModContainer , File > dupes ) { 
 this . dupes = dupes ; 
 } 
 - 
 - @ Override 
 - protected void printStackTrace ( WrappedPrintStream stream ) 
 - { 
 - stream . println ( " Duplicate Mods : " ) ; 
 - for ( Entry < ModContainer , File > e : dupes . entries ( ) ) 
 - { 
 - stream . println ( String . format ( " \ t % s : % s " , e . getKey ( ) . getModId ( ) , e . getValue ( ) . getAbsolutePath ( ) ) ) ; 
 - } 
 - stream . println ( " " ) ; 
 - } 
 - 
 - @ Override 
 - @ OnlyIn ( Dist . CLIENT ) 
 - public GuiScreen createGui ( ) 
 - { 
 - return new GuiDupesFound ( this ) ; 
 - } 
 } 
 diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json 
 new file mode 100644 
 index 0000000 . . 74fd746 
 - - - / dev / null 
 + + + b / src / main / resources / assets / forge / lang / en _ us . json 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + { 
 + " fml . menu . mods " : " Mods " , 
 + " fml . menu . mods . normal " : " Off " , 
 + " fml . menu . mods . search " : " Search " , 
 + " fml . menu . mods . a _ to _ z " : " A - Z " , 
 + " fml . menu . mods . z _ to _ a " : " Z - A " , 
 + " fml . menu . mods . config " : " Config " , 
 + " fml . menu . modoptions " : " Mod Options . . . " , 
 + " fml . menu . loadingmods " : " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " 
 + }
