BLEU SCORE: 0.008657899011081204

TEST MSG: Fixed progress reporting for model loading .
GENERATED MSG: Fixed missing model error reporting , made block and item variants sort before loading , to make the splash screen info more useful .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch <nl> index f3b09c4 . . 4f6cd2e 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch <nl> @ @ - 1 , 6 + 1 , 28 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java <nl> - @ @ - 109 , 7 + 109 , 7 @ @ <nl> + @ @ - 102 , 6 + 102 , 21 @ @ <nl> + { <nl> + try <nl> + { <nl> + + loadBlock ( blockstatemapper , block , resourcelocation ) ; <nl> + + } <nl> + + catch ( Exception exception ) <nl> + + { <nl> + + field _ 177603 _ c . warn ( ( String ) ( " Unable to load definition " + resourcelocation ) , ( Throwable ) exception ) ; <nl> + + } <nl> + + } <nl> + + } <nl> + + } <nl> + + <nl> + + protected void loadBlock ( BlockStateMapper blockstatemapper , Block block , final ResourceLocation resourcelocation ) <nl> + + { <nl> + + { <nl> + + { <nl> + + { <nl> + ModelBlockDefinition modelblockdefinition = this . func _ 177586 _ a ( resourcelocation ) ; <nl> + Map < IBlockState , ModelResourceLocation > map = blockstatemapper . func _ 188181 _ b ( block ) ; <nl> + <nl> + @ @ - 109 , 7 + 124 , 7 @ @ <nl> { <nl> Collection < ModelResourceLocation > collection = Sets . newHashSet ( map . values ( ) ) ; <nl> modelblockdefinition . func _ 188001 _ c ( ) . func _ 188138 _ a ( block . func _ 176194 _ O ( ) ) ; <nl> @ @ - 9 , 7 + 31 , 7 @ @ <nl> { <nl> public boolean apply ( ModelResourceLocation p _ apply _ 1 _ ) <nl> { <nl> - @ @ - 126 , 13 + 126 , 13 @ @ <nl> + @ @ - 126 , 22 + 141 , 18 @ @ <nl> { <nl> try <nl> { <nl> @ @ - 25 , 7 + 47 , 16 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 370 , 6 + 370 , 7 @ @ <nl> + } <nl> + } <nl> + - catch ( Exception exception ) <nl> + - { <nl> + - field _ 177603 _ c . warn ( ( String ) ( " Unable to load definition " + resourcelocation ) , ( Throwable ) exception ) ; <nl> + - } <nl> + } <nl> + } <nl> + } <nl> + @ @ - 370 , 6 + 381 , 7 @ @ <nl> <nl> protected void func _ 177592 _ e ( ) <nl> { <nl> @ @ - 33 , 7 + 64 , 7 @ @ <nl> this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150348 _ b ) , Lists . newArrayList ( new String [ ] { " stone " , " granite " , " granite _ smooth " , " diorite " , " diorite _ smooth " , " andesite " , " andesite _ smooth " } ) ) ; <nl> this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150346 _ d ) , Lists . newArrayList ( new String [ ] { " dirt " , " coarse _ dirt " , " podzol " } ) ) ; <nl> this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150344 _ f ) , Lists . newArrayList ( new String [ ] { " oak _ planks " , " spruce _ planks " , " birch _ planks " , " jungle _ planks " , " acacia _ planks " , " dark _ oak _ planks " } ) ) ; <nl> - @ @ - 413 , 6 + 414 , 10 @ @ <nl> + @ @ - 413 , 6 + 425 , 10 @ @ <nl> this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 180407 _ aO ) , Lists . newArrayList ( new String [ ] { " oak _ fence " } ) ) ; <nl> this . field _ 177613 _ u . put ( Items . field _ 179570 _ aq , Lists . newArrayList ( new String [ ] { " oak _ door " } ) ) ; <nl> this . field _ 177613 _ u . put ( Items . field _ 151124 _ az , Lists . newArrayList ( new String [ ] { " oak _ boat " } ) ) ; <nl> @ @ - 44 , 7 + 75 , 7 @ @ <nl> } <nl> <nl> protected List < String > func _ 177596 _ a ( Item p _ 177596 _ 1 _ ) <nl> - @ @ - 429 , 7 + 434 , 7 @ @ <nl> + @ @ - 429 , 7 + 445 , 7 @ @ <nl> <nl> protected ResourceLocation func _ 177583 _ a ( String p _ 177583 _ 1 _ ) <nl> { <nl> @ @ - 53 , 7 + 84 , 7 @ @ <nl> return new ResourceLocation ( resourcelocation . func _ 110624 _ b ( ) , " item / " + resourcelocation . func _ 110623 _ a ( ) ) ; <nl> } <nl> <nl> - @ @ - 536 , 7 + 541 , 7 @ @ <nl> + @ @ - 536 , 7 + 552 , 7 @ @ <nl> for ( Entry < String , ResourceLocation > entry : this . field _ 177615 _ s . entrySet ( ) ) <nl> { <nl> ResourceLocation resourcelocation = ( ResourceLocation ) entry . getValue ( ) ; <nl> @ @ - 62 , 7 + 93 , 7 @ @ <nl> ModelBlock modelblock = ( ModelBlock ) this . field _ 177611 _ h . get ( resourcelocation ) ; <nl> <nl> if ( modelblock ! = null & & modelblock . func _ 178303 _ d ( ) ) <nl> - @ @ - 623 , 6 + 628 , 11 @ @ <nl> + @ @ - 623 , 6 + 639 , 11 @ @ <nl> <nl> private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) <nl> { <nl> @ @ - 74 , 7 + 105 , 7 @ @ <nl> TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; <nl> SimpleBakedModel . Builder simplebakedmodel $ builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ , p _ 177578 _ 1 _ . func _ 187967 _ g ( ) ) ) . func _ 177646 _ a ( textureatlassprite ) ; <nl> <nl> - @ @ - 639 , 13 + 649 , 13 @ @ <nl> + @ @ - 639 , 13 + 660 , 13 @ @ <nl> BlockPartFace blockpartface = ( BlockPartFace ) blockpart . field _ 178240 _ c . get ( enumfacing ) ; <nl> TextureAtlasSprite textureatlassprite1 = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( blockpartface . field _ 178242 _ d ) ) ) ; <nl> <nl> @ @ - 91 , 7 + 122 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 656 , 9 + 666 , 14 @ @ <nl> + @ @ - 656 , 9 + 677 , 14 @ @ <nl> <nl> private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) <nl> { <nl> @ @ - 107 , 7 + 138 , 7 @ @ <nl> private void func _ 177597 _ h ( ) <nl> { <nl> this . func _ 177574 _ i ( ) ; <nl> - @ @ - 878 , 4 + 893 , 23 @ @ <nl> + @ @ - 878 , 4 + 904 , 23 @ @ <nl> field _ 177606 _ o . field _ 178317 _ b = " generation marker " ; <nl> field _ 177616 _ r . field _ 178317 _ b = " block entity marker " ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index b3c8280 . . 73f40e7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 6 , 6 + 6 , 7 @ @ import java . awt . image . BufferedImage ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 40 , 6 + 41 , 7 @ @ import net . minecraft . client . renderer . block . model . VariantList ; <nl> import net . minecraft . client . renderer . block . model . WeightedBakedModel ; <nl> import net . minecraft . client . renderer . block . model . multipart . Multipart ; <nl> import net . minecraft . client . renderer . block . model . multipart . Selector ; <nl> + import net . minecraft . client . renderer . block . statemap . BlockStateMapper ; <nl> import net . minecraft . client . renderer . block . statemap . IStateMapper ; <nl> import net . minecraft . client . renderer . texture . IIconCreator ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> @ @ - 83 , 6 + 85 , 7 @ @ import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> + import com . google . common . collect . Multimaps ; <nl> import com . google . common . collect . Sets ; <nl> <nl> public final class ModelLoader extends ModelBakery <nl> @ @ - 135 , 8 + 138 , 14 @ @ public final class ModelLoader extends ModelBakery <nl> <nl> IBakedModel missingBaked = missingModel . bake ( missingModel . getDefaultState ( ) , DefaultVertexFormats . ITEM , DefaultTextureGetter . instance ) ; <nl> Map < IModel , IBakedModel > bakedModels = Maps . newHashMap ( ) ; <nl> - for ( IModel model : stateModels . values ( ) ) <nl> + HashMultimap < IModel , ModelResourceLocation > models = HashMultimap . create ( ) ; <nl> + Multimaps . invertFrom ( Multimaps . forMap ( stateModels ) , models ) ; <nl> + <nl> + ProgressBar bakeBar = ProgressManager . push ( " ModelLoader : baking " , models . keySet ( ) . size ( ) ) ; <nl> + <nl> + for ( IModel model : models . keySet ( ) ) <nl> { <nl> + bakeBar . step ( " [ " + Joiner . on ( " , " ) . join ( models . get ( model ) ) + " ] " ) ; <nl> if ( model = = getMissingModel ( ) ) <nl> { <nl> bakedModels . put ( model , missingBaked ) ; <nl> @ @ - 146 , 6 + 155 , 9 @ @ public final class ModelLoader extends ModelBakery <nl> bakedModels . put ( model , model . bake ( model . getDefaultState ( ) , DefaultVertexFormats . ITEM , DefaultTextureGetter . instance ) ) ; <nl> } <nl> } <nl> + <nl> + ProgressManager . pop ( bakeBar ) ; <nl> + <nl> for ( Entry < ModelResourceLocation , IModel > e : stateModels . entrySet ( ) ) <nl> { <nl> bakedRegistry . putObject ( e . getKey ( ) , bakedModels . get ( e . getValue ( ) ) ) ; <nl> @ @ - 161 , 27 + 173 , 31 @ @ public final class ModelLoader extends ModelBakery <nl> @ Override <nl> protected void loadMultipartVariantModels ( ) { } <nl> <nl> - / * private void loadBlocks ( ) <nl> + @ Override <nl> + protected void loadBlocks ( ) <nl> { <nl> - Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; <nl> - List < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; <nl> - variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we <nl> - variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; <nl> - Collections . sort ( variants , new Comparator < ModelResourceLocation > ( ) <nl> + List < Block > blocks = Lists . newArrayList ( Block . blockRegistry ) ; <nl> + Collections . sort ( blocks , new Comparator < Block > ( ) <nl> { <nl> - public int compare ( ModelResourceLocation v1 , ModelResourceLocation v2 ) <nl> + public int compare ( Block b1 , Block b2 ) <nl> { <nl> - return v1 . toString ( ) . compareTo ( v2 . toString ( ) ) ; <nl> + return b1 . getRegistryName ( ) . compareTo ( b2 . getRegistryName ( ) ) ; <nl> } <nl> } ) ; <nl> - ProgressBar blockBar = ProgressManager . push ( " ModelLoader : blocks " , variants . size ( ) ) ; <nl> - for ( ModelResourceLocation variant : variants ) <nl> + ProgressBar blockBar = ProgressManager . push ( " ModelLoader : blocks " , blocks . size ( ) ) ; <nl> + <nl> + BlockStateMapper mapper = this . blockModelShapes . getBlockStateMapper ( ) ; <nl> + <nl> + for ( Block block : blocks ) <nl> { <nl> - loadVariant ( variant ) ; <nl> - blockBar . step ( variant . toString ( ) ) ; <nl> + blockBar . step ( block . getRegistryName ( ) ) ; <nl> + for ( ResourceLocation location : mapper . getBlockstateLocations ( block ) ) <nl> + { <nl> + loadBlock ( mapper , block , location ) ; <nl> + } <nl> } <nl> ProgressManager . pop ( blockBar ) ; <nl> - } * / <nl> + } <nl> <nl> @ Override <nl> protected void registerVariant ( ModelBlockDefinition definition , ModelResourceLocation location ) <nl> @ @ - 238 , 42 + 254 , 48 @ @ public final class ModelLoader extends ModelBakery <nl> <nl> registerVariantNames ( ) ; <nl> <nl> - List < String > itemVariants = Lists . newArrayList ( ) ; <nl> - for ( Item item : GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) <nl> + List < Item > items = Lists . newArrayList ( GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) ; <nl> + Collections . sort ( items , new Comparator < Item > ( ) <nl> { <nl> - itemVariants . addAll ( getVariantNames ( item ) ) ; <nl> - } <nl> - Collections . sort ( itemVariants ) ; <nl> - ProgressBar itemBar = ProgressManager . push ( " ModelLoader : items " , itemVariants . size ( ) ) ; <nl> - for ( String s : itemVariants ) <nl> - { <nl> - ResourceLocation file = getItemLocation ( s ) ; <nl> - ModelResourceLocation memory = getInventoryVariant ( s ) ; <nl> - itemBar . step ( memory . toString ( ) ) ; <nl> - IModel model = ModelLoaderRegistry . getMissingModel ( ) ; <nl> - Exception exception = null ; <nl> - try <nl> + public int compare ( Item i1 , Item i2 ) <nl> { <nl> - model = ModelLoaderRegistry . getModel ( file ) ; <nl> + return i1 . getRegistryName ( ) . compareTo ( i2 . getRegistryName ( ) ) ; <nl> } <nl> - catch ( Exception e ) <nl> + } ) ; <nl> + <nl> + ProgressBar itemBar = ProgressManager . push ( " ModelLoader : items " , items . size ( ) ) ; <nl> + for ( Item item : items ) <nl> + { <nl> + itemBar . step ( item . getRegistryName ( ) ) ; <nl> + for ( String s : getVariantNames ( item ) ) <nl> { <nl> - / / try blockstate json if the item model is missing <nl> - FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; <nl> + ResourceLocation file = getItemLocation ( s ) ; <nl> + ModelResourceLocation memory = getInventoryVariant ( s ) ; <nl> + IModel model = ModelLoaderRegistry . getMissingModel ( ) ; <nl> + Exception exception = null ; <nl> try <nl> { <nl> - model = ModelLoaderRegistry . getModel ( memory ) ; <nl> + model = ModelLoaderRegistry . getModel ( file ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + / / try blockstate json if the item model is missing <nl> + FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; <nl> + try <nl> + { <nl> + model = ModelLoaderRegistry . getModel ( memory ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + exception = new Exception ( " Could not load item model either from the normal location " + file + " or from the blockstate " , ex ) ; <nl> + } <nl> } <nl> - catch ( Exception ex ) <nl> + stateModels . put ( memory , model ) ; <nl> + if ( exception ! = null ) <nl> { <nl> - exception = new Exception ( " Could not load item model either from the normal location " + file + " or from the blockstate " , ex ) ; <nl> + storeException ( memory , exception ) ; <nl> } <nl> } <nl> - stateModels . put ( memory , model ) ; <nl> - if ( exception ! = null ) <nl> - { <nl> - storeException ( memory , exception ) ; <nl> - } <nl> } <nl> ProgressManager . pop ( itemBar ) ; <nl>
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> index f9f5a2c . . 3382ee5 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> @ @ - 9 , 15 + 9 , 7 @ @ <nl> } <nl> } <nl> catch ( Exception exception ) <nl> - @ @ - 160 , 6 + 160 , 7 @ @ <nl> - } <nl> - } <nl> - } <nl> - + catch ( FileNotFoundException e ) { } <nl> - catch ( IOException ioexception ) <nl> - { <nl> - throw new RuntimeException ( " Encountered an exception when loading model definition of model " + resourcelocation . toString ( ) , ioexception ) ; <nl> - @ @ - 294 , 6 + 295 , 7 @ @ <nl> + @ @ - 294 , 6 + 294 , 7 @ @ <nl> <nl> protected void func _ 177592 _ e ( ) <nl> { <nl> @ @ - 25 , 7 + 17 , 7 @ @ <nl> this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150348 _ b ) , Lists . newArrayList ( new String [ ] { " stone " , " granite " , " granite _ smooth " , " diorite " , " diorite _ smooth " , " andesite " , " andesite _ smooth " } ) ) ; <nl> this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150346 _ d ) , Lists . newArrayList ( new String [ ] { " dirt " , " coarse _ dirt " , " podzol " } ) ) ; <nl> this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150344 _ f ) , Lists . newArrayList ( new String [ ] { " oak _ planks " , " spruce _ planks " , " birch _ planks " , " jungle _ planks " , " acacia _ planks " , " dark _ oak _ planks " } ) ) ; <nl> - @ @ - 336 , 6 + 338 , 10 @ @ <nl> + @ @ - 336 , 6 + 337 , 10 @ @ <nl> this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 180390 _ bo ) , Lists . newArrayList ( new String [ ] { " oak _ fence _ gate " } ) ) ; <nl> this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 180407 _ aO ) , Lists . newArrayList ( new String [ ] { " oak _ fence " } ) ) ; <nl> this . field _ 177613 _ u . put ( Items . field _ 179570 _ aq , Lists . newArrayList ( new String [ ] { " oak _ door " } ) ) ; <nl> @ @ - 36 , 7 + 28 , 7 @ @ <nl> } <nl> <nl> protected List < String > func _ 177596 _ a ( Item p _ 177596 _ 1 _ ) <nl> - @ @ - 352 , 7 + 358 , 7 @ @ <nl> + @ @ - 352 , 7 + 357 , 7 @ @ <nl> <nl> protected ResourceLocation func _ 177583 _ a ( String p _ 177583 _ 1 _ ) <nl> { <nl> @ @ - 45 , 7 + 37 , 7 @ @ <nl> return new ResourceLocation ( resourcelocation . func _ 110624 _ b ( ) , " item / " + resourcelocation . func _ 110623 _ a ( ) ) ; <nl> } <nl> <nl> - @ @ - 395 , 7 + 401 , 7 @ @ <nl> + @ @ - 395 , 7 + 400 , 7 @ @ <nl> for ( Entry < String , ResourceLocation > entry : this . field _ 177615 _ s . entrySet ( ) ) <nl> { <nl> ResourceLocation resourcelocation = ( ResourceLocation ) entry . getValue ( ) ; <nl> @ @ - 54 , 7 + 46 , 7 @ @ <nl> ModelBlock modelblock1 = ( ModelBlock ) this . field _ 177611 _ h . get ( resourcelocation ) ; <nl> <nl> if ( modelblock1 ! = null & & modelblock1 . func _ 178303 _ d ( ) ) <nl> - @ @ - 453 , 6 + 459 , 11 @ @ <nl> + @ @ - 453 , 6 + 458 , 11 @ @ <nl> <nl> private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) <nl> { <nl> @ @ - 66 , 7 + 58 , 7 @ @ <nl> TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; <nl> SimpleBakedModel . Builder simplebakedmodel $ builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ ) ) . func _ 177646 _ a ( textureatlassprite ) ; <nl> <nl> - @ @ - 463 , 13 + 474 , 13 @ @ <nl> + @ @ - 463 , 13 + 473 , 13 @ @ <nl> BlockPartFace blockpartface = ( BlockPartFace ) blockpart . field _ 178240 _ c . get ( enumfacing ) ; <nl> TextureAtlasSprite textureatlassprite1 = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( blockpartface . field _ 178242 _ d ) ) ) ; <nl> <nl> @ @ - 83 , 7 + 75 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 479 , 9 + 490 , 14 @ @ <nl> + @ @ - 479 , 9 + 489 , 14 @ @ <nl> <nl> private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) <nl> { <nl> @ @ - 99 , 7 + 91 , 7 @ @ <nl> private void func _ 177597 _ h ( ) <nl> { <nl> this . func _ 177574 _ i ( ) ; <nl> - @ @ - 722 , 4 + 738 , 35 @ @ <nl> + @ @ - 722 , 4 + 737 , 35 @ @ <nl> field _ 177617 _ q . field _ 178317 _ b = " class generation marker " ; <nl> field _ 177616 _ r . field _ 178317 _ b = " block entity marker " ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index a9a8158 . . d3a25ae 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 3 , 13 + 3 , 12 @ @ package net . minecraftforge . client . model ; <nl> import java . awt . Color ; <nl> import java . awt . Graphics2D ; <nl> import java . awt . image . BufferedImage ; <nl> + import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> - import java . util . ArrayDeque ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> - import java . util . HashMap ; <nl> - import java . util . HashSet ; <nl> + import java . util . Comparator ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 78 , 10 + 77 , 11 @ @ import com . google . common . collect . Sets ; <nl> @ SuppressWarnings ( " deprecation " ) <nl> public class ModelLoader extends ModelBakery <nl> { <nl> - private final Map < ModelResourceLocation , IModel > stateModels = new HashMap < ModelResourceLocation , IModel > ( ) ; <nl> - private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; <nl> - private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; <nl> + private final Map < ModelResourceLocation , IModel > stateModels = Maps . newHashMap ( ) ; <nl> + private final Set < ResourceLocation > textures = Sets . newHashSet ( ) ; <nl> + private final Set < ResourceLocation > loadingModels = Sets . newHashSet ( ) ; <nl> private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; <nl> + private final Map < ModelResourceLocation , Exception > loadingExceptions = Maps . newHashMap ( ) ; <nl> private IModel missingModel = null ; <nl> private IModel itemModel = new ItemLayerModel ( MODEL _ GENERATED ) ; <nl> <nl> @ @ - 151 , 28 + 151 , 31 @ @ public class ModelLoader extends ModelBakery <nl> return bakedRegistry ; <nl> } <nl> <nl> - private ArrayDeque < ModelResourceLocation > loadingBlockModels = new ArrayDeque < ModelResourceLocation > ( ) ; <nl> - <nl> private void loadBlocks ( ) <nl> { <nl> Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; <nl> - Collection < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; <nl> + List < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; <nl> variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we <nl> variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; <nl> + Collections . sort ( variants , new Comparator < ModelResourceLocation > ( ) <nl> + { <nl> + public int compare ( ModelResourceLocation v1 , ModelResourceLocation v2 ) <nl> + { <nl> + return v1 . toString ( ) . compareTo ( v2 . toString ( ) ) ; <nl> + } <nl> + } ) ; <nl> blockBar = ProgressManager . push ( " ModelLoader : blocks " , variants . size ( ) ) ; <nl> - loadingBlockModels . addAll ( variants ) ; <nl> - loadVariants ( variants ) ; <nl> + for ( ModelResourceLocation variant : variants ) <nl> + { <nl> + loadVariants ( ImmutableList . of ( variant ) ) ; <nl> + blockBar . step ( variant . toString ( ) ) ; <nl> + } <nl> ProgressManager . pop ( blockBar ) ; <nl> } <nl> <nl> @ Override <nl> protected void registerVariant ( ModelBlockDefinition definition , ModelResourceLocation location ) <nl> { <nl> - if ( ! loadingBlockModels . isEmpty ( ) & & loadingBlockModels . peekFirst ( ) = = location ) <nl> - { <nl> - blockBar . step ( location . toString ( ) ) ; <nl> - loadingBlockModels . removeFirst ( ) ; <nl> - } <nl> Variants variants = null ; <nl> try <nl> { <nl> @ @ - 195 , 50 + 198 , 54 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + private void storeException ( ModelResourceLocation location , Exception exception ) <nl> + { <nl> + loadingExceptions . put ( location , exception ) ; <nl> + } <nl> + <nl> private void loadItems ( ) <nl> { <nl> registerVariantNames ( ) ; <nl> - int size = 0 ; <nl> - ImmutableList < Item > items = ImmutableList . copyOf ( GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) ; <nl> - for ( Item item : items ) <nl> + List < String > itemVariants = Lists . newArrayList ( ) ; <nl> + for ( Item item : GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) <nl> { <nl> - size + = getVariantNames ( item ) . size ( ) ; <nl> + itemVariants . addAll ( getVariantNames ( item ) ) ; <nl> } <nl> - itemBar = ProgressManager . push ( " ModelLoader : items " , size ) ; <nl> - for ( Item item : items ) <nl> + Collections . sort ( itemVariants ) ; <nl> + itemBar = ProgressManager . push ( " ModelLoader : items " , itemVariants . size ( ) ) ; <nl> + for ( String s : itemVariants ) <nl> { <nl> - / / default loading <nl> - for ( String s : ( List < String > ) getVariantNames ( item ) ) <nl> + ResourceLocation file = getItemLocation ( s ) ; <nl> + ModelResourceLocation memory = getInventoryVariant ( s ) ; <nl> + itemBar . step ( memory . toString ( ) ) ; <nl> + IModel model = null ; <nl> + try <nl> { <nl> - ResourceLocation file = getItemLocation ( s ) ; <nl> - ModelResourceLocation memory = getInventoryVariant ( s ) ; <nl> - itemBar . step ( memory . toString ( ) ) ; <nl> - IModel model = null ; <nl> - try <nl> + / / default loading <nl> + model = getModel ( file ) ; <nl> + if ( model = = null ) <nl> { <nl> - model = getModel ( file ) ; <nl> + model = getMissingModel ( ) ; <nl> } <nl> - catch ( IOException e ) <nl> + stateModels . put ( memory , model ) ; <nl> + } <nl> + catch ( FileNotFoundException e ) <nl> + { <nl> + / / try blockstate json if the item model is missing <nl> + FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; <nl> + try <nl> { <nl> - / / Handled by our finally block . <nl> + registerVariant ( getModelBlockDefinition ( memory ) , memory ) ; <nl> } <nl> - finally <nl> + catch ( Exception exception ) <nl> { <nl> - if ( model = = null | | model = = getMissingModel ( ) ) <nl> - { <nl> - FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; <nl> - try <nl> - { <nl> - registerVariant ( getModelBlockDefinition ( memory ) , memory ) ; <nl> - } <nl> - catch ( Exception exception ) <nl> - { <nl> - FMLLog . getLogger ( ) . warn ( " Unable to load definition " + memory , exception ) ; <nl> - } <nl> - } <nl> - else stateModels . put ( memory , model ) ; <nl> + storeException ( memory , new Exception ( " Could not load item model either from the normal location " + file + " or from the blockstate " , exception ) ) ; <nl> } <nl> } <nl> + catch ( Exception exception ) <nl> + { <nl> + storeException ( memory , exception ) ; <nl> + } <nl> } <nl> ProgressManager . pop ( itemBar ) ; <nl> <nl> @ @ - 850 , 6 + 857 , 18 @ @ public class ModelLoader extends ModelBakery <nl> public void onPostBakeEvent ( IRegistry < ModelResourceLocation , IBakedModel > modelRegistry ) <nl> { <nl> IBakedModel missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; <nl> + for ( Map . Entry < ModelResourceLocation , Exception > entry : loadingExceptions . entrySet ( ) ) <nl> + { <nl> + IBakedModel model = modelRegistry . getObject ( entry . getKey ( ) ) ; <nl> + if ( model = = null | | model = = missingModel ) <nl> + { <nl> + FMLLog . getLogger ( ) . error ( " Exception loading model for variant " + entry . getKey ( ) , entry . getValue ( ) ) ; <nl> + } <nl> + if ( model = = null ) <nl> + { <nl> + modelRegistry . putObject ( entry . getKey ( ) , missingModel ) ; <nl> + } <nl> + } <nl> for ( ModelResourceLocation missing : missingVariants ) <nl> { <nl> IBakedModel model = modelRegistry . getObject ( missing ) ; <nl> @ @ - 857 , 6 + 876 , 10 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> FMLLog . severe ( " Model definition for location % s not found " , missing ) ; <nl> } <nl> + if ( model = = null ) <nl> + { <nl> + modelRegistry . putObject ( missing , missingModel ) ; <nl> + } <nl> } <nl> isLoading = false ; <nl> }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch 
 index f3b09c4 . . 4f6cd2e 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch 
 @ @ - 1 , 6 + 1 , 28 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java 
 - @ @ - 109 , 7 + 109 , 7 @ @ 
 + @ @ - 102 , 6 + 102 , 21 @ @ 
 + { 
 + try 
 + { 
 + + loadBlock ( blockstatemapper , block , resourcelocation ) ; 
 + + } 
 + + catch ( Exception exception ) 
 + + { 
 + + field _ 177603 _ c . warn ( ( String ) ( " Unable to load definition " + resourcelocation ) , ( Throwable ) exception ) ; 
 + + } 
 + + } 
 + + } 
 + + } 
 + + 
 + + protected void loadBlock ( BlockStateMapper blockstatemapper , Block block , final ResourceLocation resourcelocation ) 
 + + { 
 + + { 
 + + { 
 + + { 
 + ModelBlockDefinition modelblockdefinition = this . func _ 177586 _ a ( resourcelocation ) ; 
 + Map < IBlockState , ModelResourceLocation > map = blockstatemapper . func _ 188181 _ b ( block ) ; 
 + 
 + @ @ - 109 , 7 + 124 , 7 @ @ 
 { 
 Collection < ModelResourceLocation > collection = Sets . newHashSet ( map . values ( ) ) ; 
 modelblockdefinition . func _ 188001 _ c ( ) . func _ 188138 _ a ( block . func _ 176194 _ O ( ) ) ; 
 @ @ - 9 , 7 + 31 , 7 @ @ 
 { 
 public boolean apply ( ModelResourceLocation p _ apply _ 1 _ ) 
 { 
 - @ @ - 126 , 13 + 126 , 13 @ @ 
 + @ @ - 126 , 22 + 141 , 18 @ @ 
 { 
 try 
 { 
 @ @ - 25 , 7 + 47 , 16 @ @ 
 } 
 } 
 } 
 - @ @ - 370 , 6 + 370 , 7 @ @ 
 + } 
 + } 
 + - catch ( Exception exception ) 
 + - { 
 + - field _ 177603 _ c . warn ( ( String ) ( " Unable to load definition " + resourcelocation ) , ( Throwable ) exception ) ; 
 + - } 
 + } 
 + } 
 + } 
 + @ @ - 370 , 6 + 381 , 7 @ @ 
 
 protected void func _ 177592 _ e ( ) 
 { 
 @ @ - 33 , 7 + 64 , 7 @ @ 
 this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150348 _ b ) , Lists . newArrayList ( new String [ ] { " stone " , " granite " , " granite _ smooth " , " diorite " , " diorite _ smooth " , " andesite " , " andesite _ smooth " } ) ) ; 
 this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150346 _ d ) , Lists . newArrayList ( new String [ ] { " dirt " , " coarse _ dirt " , " podzol " } ) ) ; 
 this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150344 _ f ) , Lists . newArrayList ( new String [ ] { " oak _ planks " , " spruce _ planks " , " birch _ planks " , " jungle _ planks " , " acacia _ planks " , " dark _ oak _ planks " } ) ) ; 
 - @ @ - 413 , 6 + 414 , 10 @ @ 
 + @ @ - 413 , 6 + 425 , 10 @ @ 
 this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 180407 _ aO ) , Lists . newArrayList ( new String [ ] { " oak _ fence " } ) ) ; 
 this . field _ 177613 _ u . put ( Items . field _ 179570 _ aq , Lists . newArrayList ( new String [ ] { " oak _ door " } ) ) ; 
 this . field _ 177613 _ u . put ( Items . field _ 151124 _ az , Lists . newArrayList ( new String [ ] { " oak _ boat " } ) ) ; 
 @ @ - 44 , 7 + 75 , 7 @ @ 
 } 
 
 protected List < String > func _ 177596 _ a ( Item p _ 177596 _ 1 _ ) 
 - @ @ - 429 , 7 + 434 , 7 @ @ 
 + @ @ - 429 , 7 + 445 , 7 @ @ 
 
 protected ResourceLocation func _ 177583 _ a ( String p _ 177583 _ 1 _ ) 
 { 
 @ @ - 53 , 7 + 84 , 7 @ @ 
 return new ResourceLocation ( resourcelocation . func _ 110624 _ b ( ) , " item / " + resourcelocation . func _ 110623 _ a ( ) ) ; 
 } 
 
 - @ @ - 536 , 7 + 541 , 7 @ @ 
 + @ @ - 536 , 7 + 552 , 7 @ @ 
 for ( Entry < String , ResourceLocation > entry : this . field _ 177615 _ s . entrySet ( ) ) 
 { 
 ResourceLocation resourcelocation = ( ResourceLocation ) entry . getValue ( ) ; 
 @ @ - 62 , 7 + 93 , 7 @ @ 
 ModelBlock modelblock = ( ModelBlock ) this . field _ 177611 _ h . get ( resourcelocation ) ; 
 
 if ( modelblock ! = null & & modelblock . func _ 178303 _ d ( ) ) 
 - @ @ - 623 , 6 + 628 , 11 @ @ 
 + @ @ - 623 , 6 + 639 , 11 @ @ 
 
 private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) 
 { 
 @ @ - 74 , 7 + 105 , 7 @ @ 
 TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; 
 SimpleBakedModel . Builder simplebakedmodel $ builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ , p _ 177578 _ 1 _ . func _ 187967 _ g ( ) ) ) . func _ 177646 _ a ( textureatlassprite ) ; 
 
 - @ @ - 639 , 13 + 649 , 13 @ @ 
 + @ @ - 639 , 13 + 660 , 13 @ @ 
 BlockPartFace blockpartface = ( BlockPartFace ) blockpart . field _ 178240 _ c . get ( enumfacing ) ; 
 TextureAtlasSprite textureatlassprite1 = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( blockpartface . field _ 178242 _ d ) ) ) ; 
 
 @ @ - 91 , 7 + 122 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 656 , 9 + 666 , 14 @ @ 
 + @ @ - 656 , 9 + 677 , 14 @ @ 
 
 private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) 
 { 
 @ @ - 107 , 7 + 138 , 7 @ @ 
 private void func _ 177597 _ h ( ) 
 { 
 this . func _ 177574 _ i ( ) ; 
 - @ @ - 878 , 4 + 893 , 23 @ @ 
 + @ @ - 878 , 4 + 904 , 23 @ @ 
 field _ 177606 _ o . field _ 178317 _ b = " generation marker " ; 
 field _ 177616 _ r . field _ 178317 _ b = " block entity marker " ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index b3c8280 . . 73f40e7 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 6 , 6 + 6 , 7 @ @ import java . awt . image . BufferedImage ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 + import java . util . Comparator ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 40 , 6 + 41 , 7 @ @ import net . minecraft . client . renderer . block . model . VariantList ; 
 import net . minecraft . client . renderer . block . model . WeightedBakedModel ; 
 import net . minecraft . client . renderer . block . model . multipart . Multipart ; 
 import net . minecraft . client . renderer . block . model . multipart . Selector ; 
 + import net . minecraft . client . renderer . block . statemap . BlockStateMapper ; 
 import net . minecraft . client . renderer . block . statemap . IStateMapper ; 
 import net . minecraft . client . renderer . texture . IIconCreator ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 @ @ - 83 , 6 + 85 , 7 @ @ import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 + import com . google . common . collect . Multimaps ; 
 import com . google . common . collect . Sets ; 
 
 public final class ModelLoader extends ModelBakery 
 @ @ - 135 , 8 + 138 , 14 @ @ public final class ModelLoader extends ModelBakery 
 
 IBakedModel missingBaked = missingModel . bake ( missingModel . getDefaultState ( ) , DefaultVertexFormats . ITEM , DefaultTextureGetter . instance ) ; 
 Map < IModel , IBakedModel > bakedModels = Maps . newHashMap ( ) ; 
 - for ( IModel model : stateModels . values ( ) ) 
 + HashMultimap < IModel , ModelResourceLocation > models = HashMultimap . create ( ) ; 
 + Multimaps . invertFrom ( Multimaps . forMap ( stateModels ) , models ) ; 
 + 
 + ProgressBar bakeBar = ProgressManager . push ( " ModelLoader : baking " , models . keySet ( ) . size ( ) ) ; 
 + 
 + for ( IModel model : models . keySet ( ) ) 
 { 
 + bakeBar . step ( " [ " + Joiner . on ( " , " ) . join ( models . get ( model ) ) + " ] " ) ; 
 if ( model = = getMissingModel ( ) ) 
 { 
 bakedModels . put ( model , missingBaked ) ; 
 @ @ - 146 , 6 + 155 , 9 @ @ public final class ModelLoader extends ModelBakery 
 bakedModels . put ( model , model . bake ( model . getDefaultState ( ) , DefaultVertexFormats . ITEM , DefaultTextureGetter . instance ) ) ; 
 } 
 } 
 + 
 + ProgressManager . pop ( bakeBar ) ; 
 + 
 for ( Entry < ModelResourceLocation , IModel > e : stateModels . entrySet ( ) ) 
 { 
 bakedRegistry . putObject ( e . getKey ( ) , bakedModels . get ( e . getValue ( ) ) ) ; 
 @ @ - 161 , 27 + 173 , 31 @ @ public final class ModelLoader extends ModelBakery 
 @ Override 
 protected void loadMultipartVariantModels ( ) { } 
 
 - / * private void loadBlocks ( ) 
 + @ Override 
 + protected void loadBlocks ( ) 
 { 
 - Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; 
 - List < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; 
 - variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we 
 - variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; 
 - Collections . sort ( variants , new Comparator < ModelResourceLocation > ( ) 
 + List < Block > blocks = Lists . newArrayList ( Block . blockRegistry ) ; 
 + Collections . sort ( blocks , new Comparator < Block > ( ) 
 { 
 - public int compare ( ModelResourceLocation v1 , ModelResourceLocation v2 ) 
 + public int compare ( Block b1 , Block b2 ) 
 { 
 - return v1 . toString ( ) . compareTo ( v2 . toString ( ) ) ; 
 + return b1 . getRegistryName ( ) . compareTo ( b2 . getRegistryName ( ) ) ; 
 } 
 } ) ; 
 - ProgressBar blockBar = ProgressManager . push ( " ModelLoader : blocks " , variants . size ( ) ) ; 
 - for ( ModelResourceLocation variant : variants ) 
 + ProgressBar blockBar = ProgressManager . push ( " ModelLoader : blocks " , blocks . size ( ) ) ; 
 + 
 + BlockStateMapper mapper = this . blockModelShapes . getBlockStateMapper ( ) ; 
 + 
 + for ( Block block : blocks ) 
 { 
 - loadVariant ( variant ) ; 
 - blockBar . step ( variant . toString ( ) ) ; 
 + blockBar . step ( block . getRegistryName ( ) ) ; 
 + for ( ResourceLocation location : mapper . getBlockstateLocations ( block ) ) 
 + { 
 + loadBlock ( mapper , block , location ) ; 
 + } 
 } 
 ProgressManager . pop ( blockBar ) ; 
 - } * / 
 + } 
 
 @ Override 
 protected void registerVariant ( ModelBlockDefinition definition , ModelResourceLocation location ) 
 @ @ - 238 , 42 + 254 , 48 @ @ public final class ModelLoader extends ModelBakery 
 
 registerVariantNames ( ) ; 
 
 - List < String > itemVariants = Lists . newArrayList ( ) ; 
 - for ( Item item : GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) 
 + List < Item > items = Lists . newArrayList ( GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) ; 
 + Collections . sort ( items , new Comparator < Item > ( ) 
 { 
 - itemVariants . addAll ( getVariantNames ( item ) ) ; 
 - } 
 - Collections . sort ( itemVariants ) ; 
 - ProgressBar itemBar = ProgressManager . push ( " ModelLoader : items " , itemVariants . size ( ) ) ; 
 - for ( String s : itemVariants ) 
 - { 
 - ResourceLocation file = getItemLocation ( s ) ; 
 - ModelResourceLocation memory = getInventoryVariant ( s ) ; 
 - itemBar . step ( memory . toString ( ) ) ; 
 - IModel model = ModelLoaderRegistry . getMissingModel ( ) ; 
 - Exception exception = null ; 
 - try 
 + public int compare ( Item i1 , Item i2 ) 
 { 
 - model = ModelLoaderRegistry . getModel ( file ) ; 
 + return i1 . getRegistryName ( ) . compareTo ( i2 . getRegistryName ( ) ) ; 
 } 
 - catch ( Exception e ) 
 + } ) ; 
 + 
 + ProgressBar itemBar = ProgressManager . push ( " ModelLoader : items " , items . size ( ) ) ; 
 + for ( Item item : items ) 
 + { 
 + itemBar . step ( item . getRegistryName ( ) ) ; 
 + for ( String s : getVariantNames ( item ) ) 
 { 
 - / / try blockstate json if the item model is missing 
 - FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; 
 + ResourceLocation file = getItemLocation ( s ) ; 
 + ModelResourceLocation memory = getInventoryVariant ( s ) ; 
 + IModel model = ModelLoaderRegistry . getMissingModel ( ) ; 
 + Exception exception = null ; 
 try 
 { 
 - model = ModelLoaderRegistry . getModel ( memory ) ; 
 + model = ModelLoaderRegistry . getModel ( file ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + / / try blockstate json if the item model is missing 
 + FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; 
 + try 
 + { 
 + model = ModelLoaderRegistry . getModel ( memory ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + exception = new Exception ( " Could not load item model either from the normal location " + file + " or from the blockstate " , ex ) ; 
 + } 
 } 
 - catch ( Exception ex ) 
 + stateModels . put ( memory , model ) ; 
 + if ( exception ! = null ) 
 { 
 - exception = new Exception ( " Could not load item model either from the normal location " + file + " or from the blockstate " , ex ) ; 
 + storeException ( memory , exception ) ; 
 } 
 } 
 - stateModels . put ( memory , model ) ; 
 - if ( exception ! = null ) 
 - { 
 - storeException ( memory , exception ) ; 
 - } 
 } 
 ProgressManager . pop ( itemBar ) ; 


NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 index f9f5a2c . . 3382ee5 100644 
 - - - a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 @ @ - 9 , 15 + 9 , 7 @ @ 
 } 
 } 
 catch ( Exception exception ) 
 - @ @ - 160 , 6 + 160 , 7 @ @ 
 - } 
 - } 
 - } 
 - + catch ( FileNotFoundException e ) { } 
 - catch ( IOException ioexception ) 
 - { 
 - throw new RuntimeException ( " Encountered an exception when loading model definition of model " + resourcelocation . toString ( ) , ioexception ) ; 
 - @ @ - 294 , 6 + 295 , 7 @ @ 
 + @ @ - 294 , 6 + 294 , 7 @ @ 
 
 protected void func _ 177592 _ e ( ) 
 { 
 @ @ - 25 , 7 + 17 , 7 @ @ 
 this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150348 _ b ) , Lists . newArrayList ( new String [ ] { " stone " , " granite " , " granite _ smooth " , " diorite " , " diorite _ smooth " , " andesite " , " andesite _ smooth " } ) ) ; 
 this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150346 _ d ) , Lists . newArrayList ( new String [ ] { " dirt " , " coarse _ dirt " , " podzol " } ) ) ; 
 this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 150344 _ f ) , Lists . newArrayList ( new String [ ] { " oak _ planks " , " spruce _ planks " , " birch _ planks " , " jungle _ planks " , " acacia _ planks " , " dark _ oak _ planks " } ) ) ; 
 - @ @ - 336 , 6 + 338 , 10 @ @ 
 + @ @ - 336 , 6 + 337 , 10 @ @ 
 this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 180390 _ bo ) , Lists . newArrayList ( new String [ ] { " oak _ fence _ gate " } ) ) ; 
 this . field _ 177613 _ u . put ( Item . func _ 150898 _ a ( Blocks . field _ 180407 _ aO ) , Lists . newArrayList ( new String [ ] { " oak _ fence " } ) ) ; 
 this . field _ 177613 _ u . put ( Items . field _ 179570 _ aq , Lists . newArrayList ( new String [ ] { " oak _ door " } ) ) ; 
 @ @ - 36 , 7 + 28 , 7 @ @ 
 } 
 
 protected List < String > func _ 177596 _ a ( Item p _ 177596 _ 1 _ ) 
 - @ @ - 352 , 7 + 358 , 7 @ @ 
 + @ @ - 352 , 7 + 357 , 7 @ @ 
 
 protected ResourceLocation func _ 177583 _ a ( String p _ 177583 _ 1 _ ) 
 { 
 @ @ - 45 , 7 + 37 , 7 @ @ 
 return new ResourceLocation ( resourcelocation . func _ 110624 _ b ( ) , " item / " + resourcelocation . func _ 110623 _ a ( ) ) ; 
 } 
 
 - @ @ - 395 , 7 + 401 , 7 @ @ 
 + @ @ - 395 , 7 + 400 , 7 @ @ 
 for ( Entry < String , ResourceLocation > entry : this . field _ 177615 _ s . entrySet ( ) ) 
 { 
 ResourceLocation resourcelocation = ( ResourceLocation ) entry . getValue ( ) ; 
 @ @ - 54 , 7 + 46 , 7 @ @ 
 ModelBlock modelblock1 = ( ModelBlock ) this . field _ 177611 _ h . get ( resourcelocation ) ; 
 
 if ( modelblock1 ! = null & & modelblock1 . func _ 178303 _ d ( ) ) 
 - @ @ - 453 , 6 + 459 , 11 @ @ 
 + @ @ - 453 , 6 + 458 , 11 @ @ 
 
 private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) 
 { 
 @ @ - 66 , 7 + 58 , 7 @ @ 
 TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; 
 SimpleBakedModel . Builder simplebakedmodel $ builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ ) ) . func _ 177646 _ a ( textureatlassprite ) ; 
 
 - @ @ - 463 , 13 + 474 , 13 @ @ 
 + @ @ - 463 , 13 + 473 , 13 @ @ 
 BlockPartFace blockpartface = ( BlockPartFace ) blockpart . field _ 178240 _ c . get ( enumfacing ) ; 
 TextureAtlasSprite textureatlassprite1 = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( blockpartface . field _ 178242 _ d ) ) ) ; 
 
 @ @ - 83 , 7 + 75 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 479 , 9 + 490 , 14 @ @ 
 + @ @ - 479 , 9 + 489 , 14 @ @ 
 
 private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) 
 { 
 @ @ - 99 , 7 + 91 , 7 @ @ 
 private void func _ 177597 _ h ( ) 
 { 
 this . func _ 177574 _ i ( ) ; 
 - @ @ - 722 , 4 + 738 , 35 @ @ 
 + @ @ - 722 , 4 + 737 , 35 @ @ 
 field _ 177617 _ q . field _ 178317 _ b = " class generation marker " ; 
 field _ 177616 _ r . field _ 178317 _ b = " block entity marker " ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index a9a8158 . . d3a25ae 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 3 , 13 + 3 , 12 @ @ package net . minecraftforge . client . model ; 
 import java . awt . Color ; 
 import java . awt . Graphics2D ; 
 import java . awt . image . BufferedImage ; 
 + import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 - import java . util . ArrayDeque ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 - import java . util . HashMap ; 
 - import java . util . HashSet ; 
 + import java . util . Comparator ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 78 , 10 + 77 , 11 @ @ import com . google . common . collect . Sets ; 
 @ SuppressWarnings ( " deprecation " ) 
 public class ModelLoader extends ModelBakery 
 { 
 - private final Map < ModelResourceLocation , IModel > stateModels = new HashMap < ModelResourceLocation , IModel > ( ) ; 
 - private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; 
 - private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; 
 + private final Map < ModelResourceLocation , IModel > stateModels = Maps . newHashMap ( ) ; 
 + private final Set < ResourceLocation > textures = Sets . newHashSet ( ) ; 
 + private final Set < ResourceLocation > loadingModels = Sets . newHashSet ( ) ; 
 private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; 
 + private final Map < ModelResourceLocation , Exception > loadingExceptions = Maps . newHashMap ( ) ; 
 private IModel missingModel = null ; 
 private IModel itemModel = new ItemLayerModel ( MODEL _ GENERATED ) ; 
 
 @ @ - 151 , 28 + 151 , 31 @ @ public class ModelLoader extends ModelBakery 
 return bakedRegistry ; 
 } 
 
 - private ArrayDeque < ModelResourceLocation > loadingBlockModels = new ArrayDeque < ModelResourceLocation > ( ) ; 
 - 
 private void loadBlocks ( ) 
 { 
 Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; 
 - Collection < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; 
 + List < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; 
 variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we 
 variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; 
 + Collections . sort ( variants , new Comparator < ModelResourceLocation > ( ) 
 + { 
 + public int compare ( ModelResourceLocation v1 , ModelResourceLocation v2 ) 
 + { 
 + return v1 . toString ( ) . compareTo ( v2 . toString ( ) ) ; 
 + } 
 + } ) ; 
 blockBar = ProgressManager . push ( " ModelLoader : blocks " , variants . size ( ) ) ; 
 - loadingBlockModels . addAll ( variants ) ; 
 - loadVariants ( variants ) ; 
 + for ( ModelResourceLocation variant : variants ) 
 + { 
 + loadVariants ( ImmutableList . of ( variant ) ) ; 
 + blockBar . step ( variant . toString ( ) ) ; 
 + } 
 ProgressManager . pop ( blockBar ) ; 
 } 
 
 @ Override 
 protected void registerVariant ( ModelBlockDefinition definition , ModelResourceLocation location ) 
 { 
 - if ( ! loadingBlockModels . isEmpty ( ) & & loadingBlockModels . peekFirst ( ) = = location ) 
 - { 
 - blockBar . step ( location . toString ( ) ) ; 
 - loadingBlockModels . removeFirst ( ) ; 
 - } 
 Variants variants = null ; 
 try 
 { 
 @ @ - 195 , 50 + 198 , 54 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + private void storeException ( ModelResourceLocation location , Exception exception ) 
 + { 
 + loadingExceptions . put ( location , exception ) ; 
 + } 
 + 
 private void loadItems ( ) 
 { 
 registerVariantNames ( ) ; 
 - int size = 0 ; 
 - ImmutableList < Item > items = ImmutableList . copyOf ( GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) ; 
 - for ( Item item : items ) 
 + List < String > itemVariants = Lists . newArrayList ( ) ; 
 + for ( Item item : GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) 
 { 
 - size + = getVariantNames ( item ) . size ( ) ; 
 + itemVariants . addAll ( getVariantNames ( item ) ) ; 
 } 
 - itemBar = ProgressManager . push ( " ModelLoader : items " , size ) ; 
 - for ( Item item : items ) 
 + Collections . sort ( itemVariants ) ; 
 + itemBar = ProgressManager . push ( " ModelLoader : items " , itemVariants . size ( ) ) ; 
 + for ( String s : itemVariants ) 
 { 
 - / / default loading 
 - for ( String s : ( List < String > ) getVariantNames ( item ) ) 
 + ResourceLocation file = getItemLocation ( s ) ; 
 + ModelResourceLocation memory = getInventoryVariant ( s ) ; 
 + itemBar . step ( memory . toString ( ) ) ; 
 + IModel model = null ; 
 + try 
 { 
 - ResourceLocation file = getItemLocation ( s ) ; 
 - ModelResourceLocation memory = getInventoryVariant ( s ) ; 
 - itemBar . step ( memory . toString ( ) ) ; 
 - IModel model = null ; 
 - try 
 + / / default loading 
 + model = getModel ( file ) ; 
 + if ( model = = null ) 
 { 
 - model = getModel ( file ) ; 
 + model = getMissingModel ( ) ; 
 } 
 - catch ( IOException e ) 
 + stateModels . put ( memory , model ) ; 
 + } 
 + catch ( FileNotFoundException e ) 
 + { 
 + / / try blockstate json if the item model is missing 
 + FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; 
 + try 
 { 
 - / / Handled by our finally block . 
 + registerVariant ( getModelBlockDefinition ( memory ) , memory ) ; 
 } 
 - finally 
 + catch ( Exception exception ) 
 { 
 - if ( model = = null | | model = = getMissingModel ( ) ) 
 - { 
 - FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; 
 - try 
 - { 
 - registerVariant ( getModelBlockDefinition ( memory ) , memory ) ; 
 - } 
 - catch ( Exception exception ) 
 - { 
 - FMLLog . getLogger ( ) . warn ( " Unable to load definition " + memory , exception ) ; 
 - } 
 - } 
 - else stateModels . put ( memory , model ) ; 
 + storeException ( memory , new Exception ( " Could not load item model either from the normal location " + file + " or from the blockstate " , exception ) ) ; 
 } 
 } 
 + catch ( Exception exception ) 
 + { 
 + storeException ( memory , exception ) ; 
 + } 
 } 
 ProgressManager . pop ( itemBar ) ; 
 
 @ @ - 850 , 6 + 857 , 18 @ @ public class ModelLoader extends ModelBakery 
 public void onPostBakeEvent ( IRegistry < ModelResourceLocation , IBakedModel > modelRegistry ) 
 { 
 IBakedModel missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; 
 + for ( Map . Entry < ModelResourceLocation , Exception > entry : loadingExceptions . entrySet ( ) ) 
 + { 
 + IBakedModel model = modelRegistry . getObject ( entry . getKey ( ) ) ; 
 + if ( model = = null | | model = = missingModel ) 
 + { 
 + FMLLog . getLogger ( ) . error ( " Exception loading model for variant " + entry . getKey ( ) , entry . getValue ( ) ) ; 
 + } 
 + if ( model = = null ) 
 + { 
 + modelRegistry . putObject ( entry . getKey ( ) , missingModel ) ; 
 + } 
 + } 
 for ( ModelResourceLocation missing : missingVariants ) 
 { 
 IBakedModel model = modelRegistry . getObject ( missing ) ; 
 @ @ - 857 , 6 + 876 , 10 @ @ public class ModelLoader extends ModelBakery 
 { 
 FMLLog . severe ( " Model definition for location % s not found " , missing ) ; 
 } 
 + if ( model = = null ) 
 + { 
 + modelRegistry . putObject ( missing , missingModel ) ; 
 + } 
 } 
 isLoading = false ; 
 }
