BLEU SCORE: 0.005187675405524317

TEST MSG: Fluids are now tracked internally by mod . This allows for the server and the world to specify a " default "
GENERATED MSG: Add a version check mechanic to startup , it is done in a seperate thread and has a config option to compleetly disable it . This allows us to notify users of new recomended builds . Hopefully stemming the flow of outdated help request . Also adds a warning to the main screen if you are running a ' Beta ' Forge . Which means a Forge for a new version of Minecraft that we have not promoted a recomended build for yet .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index fe9459c . . 366ad2b 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import net . minecraftforge . classloading . FMLForgePlugin ; <nl> import net . minecraftforge . common . config . Configuration ; <nl> import net . minecraftforge . common . config . Property ; <nl> import net . minecraftforge . common . network . ForgeNetworkHandler ; <nl> + import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . oredict . OreDictionary ; <nl> import net . minecraftforge . oredict . RecipeSorter ; <nl> import net . minecraftforge . server . command . ForgeCommand ; <nl> @ @ - 309 , 6 + 310 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> NBTTagCompound forgeData = new NBTTagCompound ( ) ; <nl> NBTTagCompound dimData = DimensionManager . saveDimensionDataMap ( ) ; <nl> forgeData . setTag ( " DimensionData " , dimData ) ; <nl> + FluidRegistry . writeDefaultFluidList ( forgeData ) ; <nl> return forgeData ; <nl> } <nl> <nl> @ @ - 316 , 6 + 318 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public void readData ( SaveHandler handler , WorldInfo info , Map < String , NBTBase > propertyMap , NBTTagCompound tag ) <nl> { <nl> DimensionManager . loadDimensionDataMap ( tag . hasKey ( " DimensionData " ) ? tag . getCompoundTag ( " DimensionData " ) : null ) ; <nl> + FluidRegistry . loadFluidDefaults ( tag ) ; <nl> } <nl> <nl> @ Subscribe <nl> diff - - git a / src / main / java / net / minecraftforge / common / network / FluidIdRegistryMessageHandler . java b / src / main / java / net / minecraftforge / common / network / FluidIdRegistryMessageHandler . java <nl> index 032ff75 . . dbb3924 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / network / FluidIdRegistryMessageHandler . java <nl> + + + b / src / main / java / net / minecraftforge / common / network / FluidIdRegistryMessageHandler . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ public class FluidIdRegistryMessageHandler extends SimpleChannelInboundHandler < F <nl> @ Override <nl> protected void channelRead0 ( ChannelHandlerContext ctx , ForgeMessage . FluidIdMapMessage msg ) throws Exception <nl> { <nl> - FluidRegistry . initFluidIDs ( msg . fluidIds ) ; <nl> + FluidRegistry . initFluidIDs ( msg . fluidIds , msg . defaultFluids ) ; <nl> } <nl> @ Override <nl> public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception <nl> diff - - git a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> index 17f6ff0 . . 4448739 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> + + + b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> @ @ - 1 , 10 + 1 , 18 @ @ <nl> package net . minecraftforge . common . network ; <nl> <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> + <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> import net . minecraftforge . fluids . Fluid ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> + <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBiMap ; <nl> + import com . google . common . collect . Sets ; <nl> + <nl> + import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . network . ByteBufUtils ; <nl> import io . netty . buffer . ByteBuf ; <nl> <nl> @ @ - 39 , 6 + 47 , 7 @ @ public abstract class ForgeMessage { <nl> <nl> public static class FluidIdMapMessage extends ForgeMessage { <nl> BiMap < Fluid , Integer > fluidIds = HashBiMap . create ( ) ; <nl> + Set < String > defaultFluids = Sets . newHashSet ( ) ; <nl> @ Override <nl> void toBytes ( ByteBuf bytes ) <nl> { <nl> @ @ - 49 , 6 + 58 , 11 @ @ public abstract class ForgeMessage { <nl> ByteBufUtils . writeUTF8String ( bytes , entry . getKey ( ) . getName ( ) ) ; <nl> bytes . writeInt ( entry . getValue ( ) ) ; <nl> } <nl> + for ( Map . Entry < Fluid , Integer > entry : ids . entrySet ( ) ) <nl> + { <nl> + String defaultName = FluidRegistry . getDefaultFluidName ( entry . getKey ( ) ) ; <nl> + ByteBufUtils . writeUTF8String ( bytes , defaultName ) ; <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 60 , 6 + 74 , 20 @ @ public abstract class ForgeMessage { <nl> int fluidId = bytes . readInt ( ) ; <nl> fluidIds . put ( FluidRegistry . getFluid ( fluidName ) , fluidId ) ; <nl> } <nl> + / / do we have a defaults list ? <nl> + <nl> + if ( bytes . isReadable ( ) ) <nl> + { <nl> + for ( int i = 0 ; i < listSize ; i + + ) <nl> + { <nl> + defaultFluids . add ( ByteBufUtils . readUTF8String ( bytes ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + FMLLog . getLogger ( ) . log ( Level . INFO , " Legacy server message contains no default fluid list - there may be problems with fluids " ) ; <nl> + defaultFluids . clear ( ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> index 83f8565 . . cb25e47 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> @ @ - 1 , 21 + 1 , 29 @ @ <nl> package net . minecraftforge . fluids ; <nl> <nl> - import java . util . HashMap ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> + import java . util . Set ; <nl> + <nl> + import org . apache . logging . log4j . Level ; <nl> <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . init . Blocks ; <nl> + import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . nbt . NBTTagList ; <nl> + import net . minecraft . nbt . NBTTagString ; <nl> import net . minecraft . util . StatCollector ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBiMap ; <nl> import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Maps ; <nl> + import com . google . common . collect . Sets ; <nl> <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . Loader ; <nl> + import cpw . mods . fml . common . ModContainer ; <nl> import cpw . mods . fml . common . eventhandler . Event ; <nl> + import cpw . mods . fml . common . network . ByteBufUtils ; <nl> <nl> / * * <nl> * Handles Fluid registrations . Fluids MUST be registered in order to function . <nl> @ @ - 32 , 6 + 40 , 10 @ @ public abstract class FluidRegistry <nl> static BiMap < Integer , String > fluidNames = HashBiMap . create ( ) ; / / Caching this just makes some other calls faster <nl> static BiMap < Block , Fluid > fluidBlocks ; <nl> <nl> + / / the globally unique fluid map - only used to associate non - defaults during world / server loading <nl> + static BiMap < String , Fluid > masterFluidReference = HashBiMap . create ( ) ; <nl> + static BiMap < String , String > defaultFluidName = HashBiMap . create ( ) ; <nl> + <nl> public static final Fluid WATER = new Fluid ( " water " ) { <nl> @ Override <nl> public String getLocalizedName ( ) { <nl> @ @ - 60 , 39 + 72 , 97 @ @ public abstract class FluidRegistry <nl> * Called by Forge to prepare the ID map for server - > client sync . <nl> * Modders , DO NOT call this . <nl> * / <nl> - public static void initFluidIDs ( BiMap < Fluid , Integer > newfluidIDs ) <nl> + public static void initFluidIDs ( BiMap < Fluid , Integer > newfluidIDs , Set < String > defaultNames ) <nl> { <nl> maxID = newfluidIDs . size ( ) ; <nl> fluidIDs . clear ( ) ; <nl> fluidIDs . putAll ( newfluidIDs ) ; <nl> fluidNames . clear ( ) ; <nl> - for ( Entry < Fluid , Integer > e : fluidIDs . entrySet ( ) ) <nl> + for ( Entry < Fluid , Integer > e : fluidIDs . entrySet ( ) ) { <nl> fluidNames . put ( e . getValue ( ) , e . getKey ( ) . getName ( ) ) ; <nl> + } <nl> + loadFluidDefaults ( defaultNames ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Called by forge to load default fluid IDs from the world or from server - > client for syncing <nl> + * DO NOT call this and expect useful behaviour . <nl> + * / <nl> + private static void loadFluidDefaults ( Set < String > defaultNames ) <nl> + { <nl> + / / If there ' s an empty set of default names , use the defaults as defined locally <nl> + if ( defaultNames . isEmpty ( ) ) { <nl> + defaultNames . addAll ( defaultFluidName . values ( ) ) ; <nl> + } <nl> + for ( String defaultName : defaultNames ) <nl> + { <nl> + Fluid fluid = masterFluidReference . get ( defaultName ) ; <nl> + if ( fluid = = null ) { <nl> + String derivedName = defaultName . split ( " : " , 2 ) [ 1 ] ; <nl> + String localDefault = defaultFluidName . get ( derivedName ) ; <nl> + if ( localDefault = = null ) { <nl> + FMLLog . getLogger ( ) . log ( Level . ERROR , " The fluid { } ( specified as { } ) is missing from this instance - it will be removed " , derivedName , defaultName ) ; <nl> + continue ; <nl> + } <nl> + fluid = masterFluidReference . get ( localDefault ) ; <nl> + FMLLog . getLogger ( ) . log ( Level . ERROR , " The fluid { } specified as default is not present - it will be reverted to default { } " , defaultName , localDefault ) ; <nl> + } <nl> + FMLLog . getLogger ( ) . log ( Level . DEBUG , " The fluid { } has been selected as the default fluid for { } " , defaultName , fluid . getName ( ) ) ; <nl> + fluids . put ( fluid . getName ( ) , fluid ) ; <nl> + Integer id = fluidIDs . remove ( fluid ) ; <nl> + fluidIDs . put ( fluid , id ) ; <nl> + } <nl> + fluidBlocks = null ; <nl> } <nl> <nl> / * * <nl> - * Register a new Fluid . If a fluid with the same name already exists , registration is denied . <nl> + * Register a new Fluid . If a fluid with the same name already exists , registration the alternative fluid is tracked <nl> + * in case it is the default in another place <nl> * <nl> * @ param fluid <nl> * The fluid to register . <nl> - * @ return True if the fluid was successfully registered ; false if there is a name clash . <nl> + * @ return True if the fluid was registered as the current default fluid , false if it was only registered as an alternative <nl> * / <nl> public static boolean registerFluid ( Fluid fluid ) <nl> { <nl> + masterFluidReference . put ( uniqueName ( fluid ) , fluid ) ; <nl> + <nl> if ( fluids . containsKey ( fluid . getName ( ) ) ) <nl> { <nl> - FMLLog . bigWarning ( " Duplicate registration attempt for fluid % s ( type % s ) has occurred . This is not a problem itself , but subsequent failed FluidStacks result if this is not handled properly " , fluid . getName ( ) , fluid . getClass ( ) . getName ( ) ) ; <nl> return false ; <nl> } <nl> fluids . put ( fluid . getName ( ) , fluid ) ; <nl> maxID + + ; <nl> fluidIDs . put ( fluid , maxID ) ; <nl> fluidNames . put ( maxID , fluid . getName ( ) ) ; <nl> + defaultFluidName . put ( fluid . getName ( ) , uniqueName ( fluid ) ) ; <nl> <nl> MinecraftForge . EVENT _ BUS . post ( new FluidRegisterEvent ( fluid . getName ( ) , maxID ) ) ; <nl> return true ; <nl> } <nl> <nl> + private static String uniqueName ( Fluid fluid ) <nl> + { <nl> + ModContainer activeModContainer = Loader . instance ( ) . activeModContainer ( ) ; <nl> + String activeModContainerName = activeModContainer = = null ? " minecraft " : activeModContainer . getModId ( ) ; <nl> + return activeModContainerName + " : " + fluid . getName ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Is the supplied fluid the current default fluid for it ' s name <nl> + * @ param fluid the fluid we ' re testing <nl> + * @ return if the fluid is default <nl> + * / <nl> + public static boolean isFluidDefault ( Fluid fluid ) <nl> + { <nl> + return fluids . containsValue ( fluid ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Does the supplied fluid have an entry for it ' s name ( whether or not the fluid itself is default ) <nl> + * @ param fluid the fluid we ' re testing <nl> + * @ return if the fluid ' s name has a registration entry <nl> + * / <nl> public static boolean isFluidRegistered ( Fluid fluid ) <nl> { <nl> return fluids . containsKey ( fluid . getName ( ) ) ; <nl> @ @ - 207 , 4 + 277 , 40 @ @ public abstract class FluidRegistry <nl> { <nl> return maxID ; <nl> } <nl> + <nl> + public static String getDefaultFluidName ( Fluid key ) <nl> + { <nl> + return masterFluidReference . inverse ( ) . get ( key ) ; <nl> + } <nl> + <nl> + public static void loadFluidDefaults ( NBTTagCompound tag ) <nl> + { <nl> + Set < String > defaults = Sets . newHashSet ( ) ; <nl> + if ( tag . hasKey ( " DefaultFluidList " , 9 ) ) <nl> + { <nl> + FMLLog . getLogger ( ) . log ( Level . DEBUG , " Loading persistent fluid defaults from world " ) ; <nl> + NBTTagList tl = tag . getTagList ( " DefaultFluidList " , 8 ) ; <nl> + for ( int i = 0 ; i < tl . tagCount ( ) ; i + + ) <nl> + { <nl> + defaults . add ( tl . getStringTagAt ( i ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + FMLLog . getLogger ( ) . log ( Level . DEBUG , " World is missing persistent fluid defaults - using local defaults " ) ; <nl> + } <nl> + loadFluidDefaults ( defaults ) ; <nl> + } <nl> + <nl> + public static void writeDefaultFluidList ( NBTTagCompound forgeData ) <nl> + { <nl> + NBTTagList tagList = new NBTTagList ( ) ; <nl> + <nl> + for ( Entry < String , Fluid > def : fluids . entrySet ( ) ) <nl> + { <nl> + tagList . appendTag ( new NBTTagString ( getDefaultFluidName ( def . getValue ( ) ) ) ) ; <nl> + } <nl> + <nl> + forgeData . setTag ( " DefaultFluidList " , tagList ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidStack . java b / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> index b485170 . . 9626331 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> @ @ - 1 , 10 + 1 , 6 @ @ <nl> <nl> package net . minecraftforge . fluids ; <nl> <nl> - import java . util . Locale ; <nl> - <nl> - import com . google . common . base . Strings ; <nl> - <nl> import cpw . mods . fml . common . FMLLog ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . nbt . NBTTagCompound ;
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 5cd478c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + @ @ - 30 , 6 + 30 , 7 @ @ <nl> + import net . minecraft . world . demo . DemoWorldServer ; <nl> + import net . minecraft . world . storage . ISaveFormat ; <nl> + import net . minecraft . world . storage . WorldInfo ; <nl> + + import net . minecraftforge . client . ForgeHooksClient ; <nl> + import org . apache . commons . io . Charsets ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + @ @ - 630 , 6 + 631 , 7 @ @ <nl> + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; <nl> + } <nl> + } <nl> + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; <nl> + String s1 = " Copyright Mojang AB . Do not distribute ! " ; <nl> + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 10266a2 . . 4ec67c7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 1 , 6 + 1 , 12 @ @ <nl> package net . minecraftforge . client ; <nl> <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> + import java . net . URLConnection ; <nl> import java . util . HashMap ; <nl> + import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . TreeSet ; <nl> <nl> @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; <nl> <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> import net . minecraft . client . entity . EntityPlayerSP ; <nl> + import net . minecraft . client . gui . FontRenderer ; <nl> + import net . minecraft . client . gui . GuiMainMenu ; <nl> import net . minecraftforge . client . event . FOVUpdateEvent ; <nl> <nl> import org . lwjgl . LWJGLException ; <nl> @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; <nl> import org . lwjgl . opengl . GL12 ; <nl> import org . lwjgl . opengl . PixelFormat ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + import com . google . gson . JsonParseException ; <nl> + <nl> import cpw . mods . fml . client . FMLClientHandler ; <nl> import cpw . mods . fml . client . registry . RenderingRegistry ; <nl> + import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockLiquid ; <nl> @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . ChatComponentTranslation ; <nl> + import net . minecraft . util . EnumChatFormatting ; <nl> import net . minecraft . util . MathHelper ; <nl> import net . minecraft . util . MovingObjectPosition ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fluids . RenderBlockFluid ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> public class ForgeHooksClient <nl> { <nl> @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient <nl> / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; <nl> / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; <nl> } <nl> + <nl> + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) <nl> + { <nl> + Status status = ForgeVersion . getStatus ( ) ; <nl> + if ( status = = BETA | | status = = BETA _ OUTDATED ) <nl> + { <nl> + / / render a warning at the top of the screen , <nl> + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + line = " Major issues may arise , verify before reporting . " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + <nl> + String line = null ; <nl> + switch ( status ) <nl> + { <nl> + / / case FAILED : line = " Version check failed " ; break ; <nl> + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; <nl> + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; <nl> + case OUTDATED : <nl> + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; <nl> + default : break ; <nl> + } <nl> + <nl> + if ( line ! = null ) <nl> + { <nl> + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line <nl> + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> index d18f81a . . 86de438 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame <nl> private ScaledResolution res = null ; <nl> private FontRenderer fontrenderer = null ; <nl> private RenderGameOverlayEvent eventParent ; <nl> - private static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; <nl> <nl> public GuiIngameForge ( Minecraft mc ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 145a3c5 . . 9ca5fab 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; <nl> <nl> public class ForgeHooks <nl> { <nl> - static class GrassEntry extends WeightedRandom . Item <nl> - { <nl> - public final Block block ; <nl> - public final int metadata ; <nl> - public GrassEntry ( Block block , int meta , int weight ) <nl> - { <nl> - super ( weight ) ; <nl> - this . block = block ; <nl> - this . metadata = meta ; <nl> - } <nl> - } <nl> - <nl> static class SeedEntry extends WeightedRandom . Item <nl> { <nl> public final ItemStack seed ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 4072090 . . d54730a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static double zombieSummonBaseChance = 0 . 1 ; <nl> public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; <nl> public static float zombieBabyChance = 0 . 05f ; <nl> - public static boolean shouldSortRecipies = false ; <nl> + public static boolean shouldSortRecipies = true ; <nl> + public static boolean disableVersionCheck = false ; <nl> <nl> public ForgeModContainer ( ) <nl> { <nl> @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; <nl> shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; <nl> <nl> + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; <nl> + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; <nl> + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; <nl> + <nl> if ( config . hasChanged ( ) ) <nl> { <nl> config . save ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 3dfe78e . . 0d4d751 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 4 , 6 + 4 , 17 @ @ <nl> * / <nl> <nl> package net . minecraftforge . common ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> + <nl> + import java . io . InputStream ; <nl> + import java . net . URL ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> <nl> public class ForgeVersion <nl> { <nl> @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion <nl> / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> public static final int buildVersion = 0 ; <nl> <nl> + private static Status status = PENDING ; <nl> + private static String target = null ; <nl> + <nl> public static int getMajorVersion ( ) <nl> { <nl> return majorVersion ; <nl> @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion <nl> return buildVersion ; <nl> } <nl> <nl> + public static Status getStatus ( ) <nl> + { <nl> + return status ; <nl> + } <nl> + <nl> + public static String getTarget ( ) <nl> + { <nl> + return target ; <nl> + } <nl> + <nl> public static String getVersion ( ) <nl> { <nl> return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> } <nl> + <nl> + public static enum Status <nl> + { <nl> + PENDING , <nl> + FAILED , <nl> + UP _ TO _ DATE , <nl> + OUTDATED , <nl> + AHEAD , <nl> + BETA , <nl> + BETA _ OUTDATED <nl> + } <nl> + <nl> + public static void startVersionCheck ( ) <nl> + { <nl> + new Thread ( " Forge Version Check " ) <nl> + { <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + try <nl> + { <nl> + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + InputStream con = url . openStream ( ) ; <nl> + String data = new String ( ByteStreams . toByteArray ( con ) ) ; <nl> + con . close ( ) ; <nl> + <nl> + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; <nl> + String homepage = ( String ) json . get ( " homepage " ) ; <nl> + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; <nl> + <nl> + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; <nl> + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; <nl> + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; <nl> + <nl> + if ( rec ! = null ) <nl> + { <nl> + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; <nl> + int diff = recommended . compareTo ( current ) ; <nl> + <nl> + if ( diff = = 0 ) <nl> + status = UP _ TO _ DATE ; <nl> + else if ( diff < 0 ) <nl> + { <nl> + status = AHEAD ; <nl> + if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + } <nl> + } <nl> + else <nl> + { <nl> + status = OUTDATED ; <nl> + target = rec ; <nl> + } <nl> + } <nl> + else if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = BETA _ OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + status = FAILED ; <nl> + } <nl> + } <nl> + } . start ( ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> index bb4a94e . . 3a98b16 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . entity . monster . EntityEnderman ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraftforge . common . ForgeHooks . GrassEntry ; <nl> import net . minecraftforge . common . ForgeHooks . SeedEntry ; <nl> import net . minecraftforge . event . entity . EntityEvent ; <nl> import net . minecraftforge . oredict . OreDictionary ; <nl> @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge <nl> public static final EventBus EVENT _ BUS = new EventBus ( ) ; <nl> public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; <nl> public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; <nl> + public static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> <nl> private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; <nl> <nl> @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge <nl> EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; <nl> OreDictionary . getOreName ( 0 ) ; <nl> <nl> + if ( ! ForgeModContainer . disableVersionCheck ) <nl> + { <nl> + ForgeVersion . startVersionCheck ( ) ; <nl> + } <nl> + <nl> / / Force these classes to be defined , Should prevent derp error hiding . <nl> new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index fe9459c . . 366ad2b 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import net . minecraftforge . classloading . FMLForgePlugin ; 
 import net . minecraftforge . common . config . Configuration ; 
 import net . minecraftforge . common . config . Property ; 
 import net . minecraftforge . common . network . ForgeNetworkHandler ; 
 + import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . oredict . OreDictionary ; 
 import net . minecraftforge . oredict . RecipeSorter ; 
 import net . minecraftforge . server . command . ForgeCommand ; 
 @ @ - 309 , 6 + 310 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 NBTTagCompound forgeData = new NBTTagCompound ( ) ; 
 NBTTagCompound dimData = DimensionManager . saveDimensionDataMap ( ) ; 
 forgeData . setTag ( " DimensionData " , dimData ) ; 
 + FluidRegistry . writeDefaultFluidList ( forgeData ) ; 
 return forgeData ; 
 } 
 
 @ @ - 316 , 6 + 318 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public void readData ( SaveHandler handler , WorldInfo info , Map < String , NBTBase > propertyMap , NBTTagCompound tag ) 
 { 
 DimensionManager . loadDimensionDataMap ( tag . hasKey ( " DimensionData " ) ? tag . getCompoundTag ( " DimensionData " ) : null ) ; 
 + FluidRegistry . loadFluidDefaults ( tag ) ; 
 } 
 
 @ Subscribe 
 diff - - git a / src / main / java / net / minecraftforge / common / network / FluidIdRegistryMessageHandler . java b / src / main / java / net / minecraftforge / common / network / FluidIdRegistryMessageHandler . java 
 index 032ff75 . . dbb3924 100644 
 - - - a / src / main / java / net / minecraftforge / common / network / FluidIdRegistryMessageHandler . java 
 + + + b / src / main / java / net / minecraftforge / common / network / FluidIdRegistryMessageHandler . java 
 @ @ - 12 , 7 + 12 , 7 @ @ public class FluidIdRegistryMessageHandler extends SimpleChannelInboundHandler < F 
 @ Override 
 protected void channelRead0 ( ChannelHandlerContext ctx , ForgeMessage . FluidIdMapMessage msg ) throws Exception 
 { 
 - FluidRegistry . initFluidIDs ( msg . fluidIds ) ; 
 + FluidRegistry . initFluidIDs ( msg . fluidIds , msg . defaultFluids ) ; 
 } 
 @ Override 
 public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception 
 diff - - git a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 index 17f6ff0 . . 4448739 100644 
 - - - a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 + + + b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 @ @ - 1 , 10 + 1 , 18 @ @ 
 package net . minecraftforge . common . network ; 
 
 import java . util . Map ; 
 + import java . util . Set ; 
 + 
 + import org . apache . logging . log4j . Level ; 
 + 
 import net . minecraftforge . fluids . Fluid ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 + 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBiMap ; 
 + import com . google . common . collect . Sets ; 
 + 
 + import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . network . ByteBufUtils ; 
 import io . netty . buffer . ByteBuf ; 
 
 @ @ - 39 , 6 + 47 , 7 @ @ public abstract class ForgeMessage { 
 
 public static class FluidIdMapMessage extends ForgeMessage { 
 BiMap < Fluid , Integer > fluidIds = HashBiMap . create ( ) ; 
 + Set < String > defaultFluids = Sets . newHashSet ( ) ; 
 @ Override 
 void toBytes ( ByteBuf bytes ) 
 { 
 @ @ - 49 , 6 + 58 , 11 @ @ public abstract class ForgeMessage { 
 ByteBufUtils . writeUTF8String ( bytes , entry . getKey ( ) . getName ( ) ) ; 
 bytes . writeInt ( entry . getValue ( ) ) ; 
 } 
 + for ( Map . Entry < Fluid , Integer > entry : ids . entrySet ( ) ) 
 + { 
 + String defaultName = FluidRegistry . getDefaultFluidName ( entry . getKey ( ) ) ; 
 + ByteBufUtils . writeUTF8String ( bytes , defaultName ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 60 , 6 + 74 , 20 @ @ public abstract class ForgeMessage { 
 int fluidId = bytes . readInt ( ) ; 
 fluidIds . put ( FluidRegistry . getFluid ( fluidName ) , fluidId ) ; 
 } 
 + / / do we have a defaults list ? 
 + 
 + if ( bytes . isReadable ( ) ) 
 + { 
 + for ( int i = 0 ; i < listSize ; i + + ) 
 + { 
 + defaultFluids . add ( ByteBufUtils . readUTF8String ( bytes ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + FMLLog . getLogger ( ) . log ( Level . INFO , " Legacy server message contains no default fluid list - there may be problems with fluids " ) ; 
 + defaultFluids . clear ( ) ; 
 + } 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 index 83f8565 . . cb25e47 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 @ @ - 1 , 21 + 1 , 29 @ @ 
 package net . minecraftforge . fluids ; 
 
 - import java . util . HashMap ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 + import java . util . Set ; 
 + 
 + import org . apache . logging . log4j . Level ; 
 
 import net . minecraft . block . Block ; 
 import net . minecraft . init . Blocks ; 
 + import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . nbt . NBTTagList ; 
 + import net . minecraft . nbt . NBTTagString ; 
 import net . minecraft . util . StatCollector ; 
 import net . minecraftforge . common . MinecraftForge ; 
 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBiMap ; 
 import com . google . common . collect . ImmutableMap ; 
 - import com . google . common . collect . Maps ; 
 + import com . google . common . collect . Sets ; 
 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . Loader ; 
 + import cpw . mods . fml . common . ModContainer ; 
 import cpw . mods . fml . common . eventhandler . Event ; 
 + import cpw . mods . fml . common . network . ByteBufUtils ; 
 
 / * * 
 * Handles Fluid registrations . Fluids MUST be registered in order to function . 
 @ @ - 32 , 6 + 40 , 10 @ @ public abstract class FluidRegistry 
 static BiMap < Integer , String > fluidNames = HashBiMap . create ( ) ; / / Caching this just makes some other calls faster 
 static BiMap < Block , Fluid > fluidBlocks ; 
 
 + / / the globally unique fluid map - only used to associate non - defaults during world / server loading 
 + static BiMap < String , Fluid > masterFluidReference = HashBiMap . create ( ) ; 
 + static BiMap < String , String > defaultFluidName = HashBiMap . create ( ) ; 
 + 
 public static final Fluid WATER = new Fluid ( " water " ) { 
 @ Override 
 public String getLocalizedName ( ) { 
 @ @ - 60 , 39 + 72 , 97 @ @ public abstract class FluidRegistry 
 * Called by Forge to prepare the ID map for server - > client sync . 
 * Modders , DO NOT call this . 
 * / 
 - public static void initFluidIDs ( BiMap < Fluid , Integer > newfluidIDs ) 
 + public static void initFluidIDs ( BiMap < Fluid , Integer > newfluidIDs , Set < String > defaultNames ) 
 { 
 maxID = newfluidIDs . size ( ) ; 
 fluidIDs . clear ( ) ; 
 fluidIDs . putAll ( newfluidIDs ) ; 
 fluidNames . clear ( ) ; 
 - for ( Entry < Fluid , Integer > e : fluidIDs . entrySet ( ) ) 
 + for ( Entry < Fluid , Integer > e : fluidIDs . entrySet ( ) ) { 
 fluidNames . put ( e . getValue ( ) , e . getKey ( ) . getName ( ) ) ; 
 + } 
 + loadFluidDefaults ( defaultNames ) ; 
 + } 
 + 
 + / * * 
 + * Called by forge to load default fluid IDs from the world or from server - > client for syncing 
 + * DO NOT call this and expect useful behaviour . 
 + * / 
 + private static void loadFluidDefaults ( Set < String > defaultNames ) 
 + { 
 + / / If there ' s an empty set of default names , use the defaults as defined locally 
 + if ( defaultNames . isEmpty ( ) ) { 
 + defaultNames . addAll ( defaultFluidName . values ( ) ) ; 
 + } 
 + for ( String defaultName : defaultNames ) 
 + { 
 + Fluid fluid = masterFluidReference . get ( defaultName ) ; 
 + if ( fluid = = null ) { 
 + String derivedName = defaultName . split ( " : " , 2 ) [ 1 ] ; 
 + String localDefault = defaultFluidName . get ( derivedName ) ; 
 + if ( localDefault = = null ) { 
 + FMLLog . getLogger ( ) . log ( Level . ERROR , " The fluid { } ( specified as { } ) is missing from this instance - it will be removed " , derivedName , defaultName ) ; 
 + continue ; 
 + } 
 + fluid = masterFluidReference . get ( localDefault ) ; 
 + FMLLog . getLogger ( ) . log ( Level . ERROR , " The fluid { } specified as default is not present - it will be reverted to default { } " , defaultName , localDefault ) ; 
 + } 
 + FMLLog . getLogger ( ) . log ( Level . DEBUG , " The fluid { } has been selected as the default fluid for { } " , defaultName , fluid . getName ( ) ) ; 
 + fluids . put ( fluid . getName ( ) , fluid ) ; 
 + Integer id = fluidIDs . remove ( fluid ) ; 
 + fluidIDs . put ( fluid , id ) ; 
 + } 
 + fluidBlocks = null ; 
 } 
 
 / * * 
 - * Register a new Fluid . If a fluid with the same name already exists , registration is denied . 
 + * Register a new Fluid . If a fluid with the same name already exists , registration the alternative fluid is tracked 
 + * in case it is the default in another place 
 * 
 * @ param fluid 
 * The fluid to register . 
 - * @ return True if the fluid was successfully registered ; false if there is a name clash . 
 + * @ return True if the fluid was registered as the current default fluid , false if it was only registered as an alternative 
 * / 
 public static boolean registerFluid ( Fluid fluid ) 
 { 
 + masterFluidReference . put ( uniqueName ( fluid ) , fluid ) ; 
 + 
 if ( fluids . containsKey ( fluid . getName ( ) ) ) 
 { 
 - FMLLog . bigWarning ( " Duplicate registration attempt for fluid % s ( type % s ) has occurred . This is not a problem itself , but subsequent failed FluidStacks result if this is not handled properly " , fluid . getName ( ) , fluid . getClass ( ) . getName ( ) ) ; 
 return false ; 
 } 
 fluids . put ( fluid . getName ( ) , fluid ) ; 
 maxID + + ; 
 fluidIDs . put ( fluid , maxID ) ; 
 fluidNames . put ( maxID , fluid . getName ( ) ) ; 
 + defaultFluidName . put ( fluid . getName ( ) , uniqueName ( fluid ) ) ; 
 
 MinecraftForge . EVENT _ BUS . post ( new FluidRegisterEvent ( fluid . getName ( ) , maxID ) ) ; 
 return true ; 
 } 
 
 + private static String uniqueName ( Fluid fluid ) 
 + { 
 + ModContainer activeModContainer = Loader . instance ( ) . activeModContainer ( ) ; 
 + String activeModContainerName = activeModContainer = = null ? " minecraft " : activeModContainer . getModId ( ) ; 
 + return activeModContainerName + " : " + fluid . getName ( ) ; 
 + } 
 + 
 + / * * 
 + * Is the supplied fluid the current default fluid for it ' s name 
 + * @ param fluid the fluid we ' re testing 
 + * @ return if the fluid is default 
 + * / 
 + public static boolean isFluidDefault ( Fluid fluid ) 
 + { 
 + return fluids . containsValue ( fluid ) ; 
 + } 
 + 
 + / * * 
 + * Does the supplied fluid have an entry for it ' s name ( whether or not the fluid itself is default ) 
 + * @ param fluid the fluid we ' re testing 
 + * @ return if the fluid ' s name has a registration entry 
 + * / 
 public static boolean isFluidRegistered ( Fluid fluid ) 
 { 
 return fluids . containsKey ( fluid . getName ( ) ) ; 
 @ @ - 207 , 4 + 277 , 40 @ @ public abstract class FluidRegistry 
 { 
 return maxID ; 
 } 
 + 
 + public static String getDefaultFluidName ( Fluid key ) 
 + { 
 + return masterFluidReference . inverse ( ) . get ( key ) ; 
 + } 
 + 
 + public static void loadFluidDefaults ( NBTTagCompound tag ) 
 + { 
 + Set < String > defaults = Sets . newHashSet ( ) ; 
 + if ( tag . hasKey ( " DefaultFluidList " , 9 ) ) 
 + { 
 + FMLLog . getLogger ( ) . log ( Level . DEBUG , " Loading persistent fluid defaults from world " ) ; 
 + NBTTagList tl = tag . getTagList ( " DefaultFluidList " , 8 ) ; 
 + for ( int i = 0 ; i < tl . tagCount ( ) ; i + + ) 
 + { 
 + defaults . add ( tl . getStringTagAt ( i ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + FMLLog . getLogger ( ) . log ( Level . DEBUG , " World is missing persistent fluid defaults - using local defaults " ) ; 
 + } 
 + loadFluidDefaults ( defaults ) ; 
 + } 
 + 
 + public static void writeDefaultFluidList ( NBTTagCompound forgeData ) 
 + { 
 + NBTTagList tagList = new NBTTagList ( ) ; 
 + 
 + for ( Entry < String , Fluid > def : fluids . entrySet ( ) ) 
 + { 
 + tagList . appendTag ( new NBTTagString ( getDefaultFluidName ( def . getValue ( ) ) ) ) ; 
 + } 
 + 
 + forgeData . setTag ( " DefaultFluidList " , tagList ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidStack . java b / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 index b485170 . . 9626331 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 @ @ - 1 , 10 + 1 , 6 @ @ 
 
 package net . minecraftforge . fluids ; 
 
 - import java . util . Locale ; 
 - 
 - import com . google . common . base . Strings ; 
 - 
 import cpw . mods . fml . common . FMLLog ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . nbt . NBTTagCompound ;

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 new file mode 100644 
 index 0000000 . . 5cd478c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + @ @ - 30 , 6 + 30 , 7 @ @ 
 + import net . minecraft . world . demo . DemoWorldServer ; 
 + import net . minecraft . world . storage . ISaveFormat ; 
 + import net . minecraft . world . storage . WorldInfo ; 
 + + import net . minecraftforge . client . ForgeHooksClient ; 
 + import org . apache . commons . io . Charsets ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + @ @ - 630 , 6 + 631 , 7 @ @ 
 + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; 
 + } 
 + } 
 + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; 
 + String s1 = " Copyright Mojang AB . Do not distribute ! " ; 
 + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; 
 + 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 10266a2 . . 4ec67c7 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 1 , 6 + 1 , 12 @ @ 
 package net . minecraftforge . client ; 
 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 + import java . net . URLConnection ; 
 import java . util . HashMap ; 
 + import java . util . Map ; 
 import java . util . Random ; 
 import java . util . TreeSet ; 
 
 @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; 
 
 import net . minecraftforge . client . event . MouseEvent ; 
 import net . minecraft . client . entity . EntityPlayerSP ; 
 + import net . minecraft . client . gui . FontRenderer ; 
 + import net . minecraft . client . gui . GuiMainMenu ; 
 import net . minecraftforge . client . event . FOVUpdateEvent ; 
 
 import org . lwjgl . LWJGLException ; 
 @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; 
 import org . lwjgl . opengl . GL12 ; 
 import org . lwjgl . opengl . PixelFormat ; 
 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + import com . google . gson . JsonParseException ; 
 + 
 import cpw . mods . fml . client . FMLClientHandler ; 
 import cpw . mods . fml . client . registry . RenderingRegistry ; 
 + import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockLiquid ; 
 @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . ChatComponentTranslation ; 
 + import net . minecraft . util . EnumChatFormatting ; 
 import net . minecraft . util . MathHelper ; 
 import net . minecraft . util . MovingObjectPosition ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fluids . RenderBlockFluid ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 public class ForgeHooksClient 
 { 
 @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient 
 / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; 
 / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; 
 } 
 + 
 + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) 
 + { 
 + Status status = ForgeVersion . getStatus ( ) ; 
 + if ( status = = BETA | | status = = BETA _ OUTDATED ) 
 + { 
 + / / render a warning at the top of the screen , 
 + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + line = " Major issues may arise , verify before reporting . " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + 
 + String line = null ; 
 + switch ( status ) 
 + { 
 + / / case FAILED : line = " Version check failed " ; break ; 
 + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; 
 + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; 
 + case OUTDATED : 
 + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; 
 + default : break ; 
 + } 
 + 
 + if ( line ! = null ) 
 + { 
 + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line 
 + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 index d18f81a . . 86de438 100644 
 - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame 
 private ScaledResolution res = null ; 
 private FontRenderer fontrenderer = null ; 
 private RenderGameOverlayEvent eventParent ; 
 - private static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; 
 
 public GuiIngameForge ( Minecraft mc ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 145a3c5 . . 9ca5fab 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; 
 
 public class ForgeHooks 
 { 
 - static class GrassEntry extends WeightedRandom . Item 
 - { 
 - public final Block block ; 
 - public final int metadata ; 
 - public GrassEntry ( Block block , int meta , int weight ) 
 - { 
 - super ( weight ) ; 
 - this . block = block ; 
 - this . metadata = meta ; 
 - } 
 - } 
 - 
 static class SeedEntry extends WeightedRandom . Item 
 { 
 public final ItemStack seed ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 4072090 . . d54730a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static double zombieSummonBaseChance = 0 . 1 ; 
 public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; 
 public static float zombieBabyChance = 0 . 05f ; 
 - public static boolean shouldSortRecipies = false ; 
 + public static boolean shouldSortRecipies = true ; 
 + public static boolean disableVersionCheck = false ; 
 
 public ForgeModContainer ( ) 
 { 
 @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; 
 shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; 
 
 + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; 
 + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; 
 + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; 
 + 
 if ( config . hasChanged ( ) ) 
 { 
 config . save ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 3dfe78e . . 0d4d751 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 4 , 6 + 4 , 17 @ @ 
 * / 
 
 package net . minecraftforge . common ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 + 
 + import java . io . InputStream ; 
 + import java . net . URL ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 
 public class ForgeVersion 
 { 
 @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion 
 / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 public static final int buildVersion = 0 ; 
 
 + private static Status status = PENDING ; 
 + private static String target = null ; 
 + 
 public static int getMajorVersion ( ) 
 { 
 return majorVersion ; 
 @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion 
 return buildVersion ; 
 } 
 
 + public static Status getStatus ( ) 
 + { 
 + return status ; 
 + } 
 + 
 + public static String getTarget ( ) 
 + { 
 + return target ; 
 + } 
 + 
 public static String getVersion ( ) 
 { 
 return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 } 
 + 
 + public static enum Status 
 + { 
 + PENDING , 
 + FAILED , 
 + UP _ TO _ DATE , 
 + OUTDATED , 
 + AHEAD , 
 + BETA , 
 + BETA _ OUTDATED 
 + } 
 + 
 + public static void startVersionCheck ( ) 
 + { 
 + new Thread ( " Forge Version Check " ) 
 + { 
 + @ Override 
 + public void run ( ) 
 + { 
 + try 
 + { 
 + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + InputStream con = url . openStream ( ) ; 
 + String data = new String ( ByteStreams . toByteArray ( con ) ) ; 
 + con . close ( ) ; 
 + 
 + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; 
 + String homepage = ( String ) json . get ( " homepage " ) ; 
 + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; 
 + 
 + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; 
 + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; 
 + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; 
 + 
 + if ( rec ! = null ) 
 + { 
 + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; 
 + int diff = recommended . compareTo ( current ) ; 
 + 
 + if ( diff = = 0 ) 
 + status = UP _ TO _ DATE ; 
 + else if ( diff < 0 ) 
 + { 
 + status = AHEAD ; 
 + if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = OUTDATED ; 
 + target = lat ; 
 + } 
 + } 
 + } 
 + else 
 + { 
 + status = OUTDATED ; 
 + target = rec ; 
 + } 
 + } 
 + else if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = BETA _ OUTDATED ; 
 + target = lat ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + status = FAILED ; 
 + } 
 + } 
 + } . start ( ) ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 index bb4a94e . . 3a98b16 100644 
 - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; 
 import net . minecraft . entity . monster . EntityEnderman ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraftforge . common . ForgeHooks . GrassEntry ; 
 import net . minecraftforge . common . ForgeHooks . SeedEntry ; 
 import net . minecraftforge . event . entity . EntityEvent ; 
 import net . minecraftforge . oredict . OreDictionary ; 
 @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge 
 public static final EventBus EVENT _ BUS = new EventBus ( ) ; 
 public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; 
 public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; 
 + public static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 
 private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; 
 
 @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge 
 EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; 
 OreDictionary . getOreName ( 0 ) ; 
 
 + if ( ! ForgeModContainer . disableVersionCheck ) 
 + { 
 + ForgeVersion . startVersionCheck ( ) ; 
 + } 
 + 
 / / Force these classes to be defined , Should prevent derp error hiding . 
 new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; 
 }
