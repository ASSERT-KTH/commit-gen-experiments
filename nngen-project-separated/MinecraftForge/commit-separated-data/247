BLEU SCORE: 0.08116697886877475

TEST MSG: Improve missing mod dependency error screen
GENERATED MSG: Improve exception messages during initialization .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java <nl> index bad93f6 . . 1676c39 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java <nl> @ @ - 19 , 9 + 19 , 13 @ @ <nl> <nl> package net . minecraftforge . fml . client ; <nl> <nl> + import java . util . List ; <nl> + <nl> import net . minecraft . client . resources . I18n ; <nl> import net . minecraft . util . text . TextFormatting ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . MissingModsException ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> <nl> @ @ - 38 , 31 + 42 , 49 @ @ public class GuiModsMissing extends GuiErrorBase <nl> public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> { <nl> this . drawDefaultBackground ( ) ; <nl> - int offset = Math . max ( 85 - modsMissing . missingMods . size ( ) * 10 , 10 ) ; <nl> - String modMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies " , TextFormatting . BOLD + modsMissing . getModName ( ) + TextFormatting . RESET ) ; <nl> + List < MissingModsException . MissingModInfo > missingModsVersions = modsMissing . getMissingModInfos ( ) ; <nl> + int offset = Math . max ( 85 - missingModsVersions . size ( ) * 10 , 10 ) ; <nl> + String modMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies . compatibility " , TextFormatting . BOLD + modsMissing . getModName ( ) + TextFormatting . RESET ) ; <nl> this . drawCenteredString ( this . fontRenderer , modMissingDependenciesText , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 10 ; <nl> - String fixMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies . fix " , modsMissing . getModName ( ) ) ; <nl> - this . drawCenteredString ( this . fontRenderer , fixMissingDependenciesText , this . width / 2 , offset , 0xFFFFFF ) ; <nl> offset + = 5 ; <nl> - for ( ArtifactVersion v : modsMissing . missingMods ) <nl> + for ( MissingModsException . MissingModInfo versionInfo : missingModsVersions ) <nl> { <nl> - offset + = 10 ; <nl> - if ( v instanceof DefaultArtifactVersion ) <nl> + ArtifactVersion acceptedVersion = versionInfo . getAcceptedVersion ( ) ; <nl> + String acceptedModId = acceptedVersion . getLabel ( ) ; <nl> + ArtifactVersion currentVersion = versionInfo . getCurrentVersion ( ) ; <nl> + String missingReason ; <nl> + if ( currentVersion = = null ) <nl> + { <nl> + missingReason = I18n . format ( " fml . messages . mod . missing . dependencies . missing " ) ; <nl> + } <nl> + else <nl> + { <nl> + missingReason = I18n . format ( " fml . messages . mod . missing . dependencies . you . have " , currentVersion . getVersionString ( ) ) ; <nl> + } <nl> + String acceptedModVersionString = acceptedVersion . getRangeString ( ) ; <nl> + if ( acceptedVersion instanceof DefaultArtifactVersion ) <nl> { <nl> - DefaultArtifactVersion dav = ( DefaultArtifactVersion ) v ; <nl> + DefaultArtifactVersion dav = ( DefaultArtifactVersion ) acceptedVersion ; <nl> if ( dav . getRange ( ) ! = null ) <nl> { <nl> - String message = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s " , v . getLabel ( ) , dav . getRange ( ) . toStringFriendly ( ) ) ; <nl> - this . drawCenteredString ( this . fontRenderer , message , this . width / 2 , offset , 0xEEEEEE ) ; <nl> - continue ; <nl> + acceptedModVersionString = dav . getRange ( ) . toStringFriendly ( ) ; <nl> } <nl> } <nl> - this . drawCenteredString ( this . fontRenderer , String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> + ModContainer acceptedMod = Loader . instance ( ) . getIndexedModList ( ) . get ( acceptedModId ) ; <nl> + String acceptedModName = acceptedMod ! = null ? acceptedMod . getName ( ) : acceptedModId ; <nl> + String versionInfoText = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s ( % s ) " , acceptedModName , acceptedModVersionString , missingReason ) ; <nl> + String message ; <nl> + if ( versionInfo . isRequired ( ) ) <nl> + { <nl> + message = I18n . format ( " fml . messages . mod . missing . dependencies . requires " , versionInfoText ) ; <nl> + } <nl> + else <nl> + { <nl> + message = I18n . format ( " fml . messages . mod . missing . dependencies . compatible . with " , versionInfoText ) ; <nl> + } <nl> + offset + = 10 ; <nl> + this . drawCenteredString ( this . fontRenderer , message , this . width / 2 , offset , 0xEEEEEE ) ; <nl> } <nl> - offset + = 20 ; <nl> - String seeLogText = I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , GuiErrorBase . logFile . getName ( ) ) ; <nl> - this . drawCenteredString ( this . fontRenderer , seeLogText , this . width / 2 , offset , 0xFFFFFF ) ; <nl> super . drawScreen ( mouseX , mouseY , partialTicks ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModsMissingForServer . java b / src / main / java / net / minecraftforge / fml / client / GuiModsMissingForServer . java <nl> index c65cb8f . . a8a6e24 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiModsMissingForServer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiModsMissingForServer . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package net . minecraftforge . fml . client ; <nl> <nl> + import java . util . List ; <nl> + <nl> import net . minecraft . client . gui . GuiButton ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . client . resources . I18n ; <nl> @ @ - 52 , 15 + 54 , 17 @ @ public class GuiModsMissingForServer extends GuiScreen <nl> public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> { <nl> this . drawDefaultBackground ( ) ; <nl> - int offset = Math . max ( 85 - modsMissing . missingMods . size ( ) * 10 , 10 ) ; <nl> + List < MissingModsException . MissingModInfo > missingModsVersions = modsMissing . getMissingModInfos ( ) ; <nl> + int offset = Math . max ( 85 - missingModsVersions . size ( ) * 10 , 10 ) ; <nl> this . drawCenteredString ( this . fontRenderer , " Forge Mod Loader could not connect to this server " , this . width / 2 , offset , 0xFFFFFF ) ; <nl> offset + = 10 ; <nl> this . drawCenteredString ( this . fontRenderer , " The mods and versions listed below could not be found " , this . width / 2 , offset , 0xFFFFFF ) ; <nl> offset + = 10 ; <nl> this . drawCenteredString ( this . fontRenderer , " They are required to play on this server " , this . width / 2 , offset , 0xFFFFFF ) ; <nl> offset + = 5 ; <nl> - for ( ArtifactVersion v : modsMissing . missingMods ) <nl> + for ( MissingModsException . MissingModInfo info : missingModsVersions ) <nl> { <nl> + ArtifactVersion v = info . getAcceptedVersion ( ) ; <nl> offset + = 10 ; <nl> this . drawCenteredString ( this . fontRenderer , String . format ( " % s : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java b / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java <nl> index 82a1190 . . 51d7a24 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import net . minecraft . client . resources . I18n ; <nl> import net . minecraft . util . text . TextFormatting ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . MissingModsException ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . MultipleModsErrored ; <nl> import net . minecraftforge . fml . common . WrongMinecraftVersionException ; <nl> import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> @ @ - 51 , 12 + 52 , 12 @ @ public class GuiMultipleModsErrored extends GuiErrorBase <nl> public void initGui ( ) <nl> { <nl> super . initGui ( ) ; <nl> - int additionalSize = missingModsExceptions . isEmpty ( ) | | wrongMinecraftExceptions . isEmpty ( ) ? 20 : 55 ; <nl> - for ( MissingModsException exception : missingModsExceptions ) <nl> + int additionalSize = missingModsExceptions . isEmpty ( ) | | wrongMinecraftExceptions . isEmpty ( ) ? 20 : 55 ; <nl> + for ( MissingModsException exception : missingModsExceptions ) <nl> { <nl> - additionalSize + = exception . missingMods . size ( ) * 10 ; <nl> + additionalSize + = exception . getMissingModInfos ( ) . size ( ) * 10 ; <nl> } <nl> - list = new GuiList ( wrongMinecraftExceptions . size ( ) * 10 + missingModsExceptions . size ( ) * 15 + additionalSize ) ; <nl> + list = new GuiList ( wrongMinecraftExceptions . size ( ) * 10 + missingModsExceptions . size ( ) * 15 + additionalSize ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 139 , 26 + 140 , 50 @ @ public class GuiMultipleModsErrored extends GuiErrorBase <nl> } <nl> if ( ! missingModsExceptions . isEmpty ( ) ) <nl> { <nl> - renderer . drawString ( TextFormatting . UNDERLINE + I18n . format ( " fml . messages . mod . missing . dependencies . multiple " ) , this . left , offset , 0xFFFFFF ) ; <nl> + renderer . drawString ( I18n . format ( " fml . messages . mod . missing . dependencies . multiple . issues " ) , this . left , offset , 0xFFFFFF ) ; <nl> offset + = 15 ; <nl> for ( MissingModsException exception : missingModsExceptions ) <nl> { <nl> - renderer . drawString ( I18n . format ( " fml . messages . mod . missing . dependencies . fix " , TextFormatting . BOLD + exception . getModName ( ) + TextFormatting . RESET ) , this . left , offset , 0xFFFFFF ) ; <nl> - for ( ArtifactVersion v : exception . missingMods ) <nl> + renderer . drawString ( exception . getModName ( ) + " : " , this . left , offset , 0xFFFFFF ) ; <nl> + for ( MissingModsException . MissingModInfo versionInfo : exception . getMissingModInfos ( ) ) <nl> { <nl> - offset + = 10 ; <nl> - if ( v instanceof DefaultArtifactVersion ) <nl> + ArtifactVersion acceptedVersion = versionInfo . getAcceptedVersion ( ) ; <nl> + String acceptedModId = acceptedVersion . getLabel ( ) ; <nl> + ArtifactVersion currentVersion = versionInfo . getCurrentVersion ( ) ; <nl> + String missingReason ; <nl> + if ( currentVersion = = null ) <nl> { <nl> - DefaultArtifactVersion dav = ( DefaultArtifactVersion ) v ; <nl> + missingReason = I18n . format ( " fml . messages . mod . missing . dependencies . missing " ) ; <nl> + } <nl> + else <nl> + { <nl> + missingReason = I18n . format ( " fml . messages . mod . missing . dependencies . you . have " , currentVersion . getVersionString ( ) ) ; <nl> + } <nl> + String acceptedModVersionString = acceptedVersion . getRangeString ( ) ; <nl> + if ( acceptedVersion instanceof DefaultArtifactVersion ) <nl> + { <nl> + DefaultArtifactVersion dav = ( DefaultArtifactVersion ) acceptedVersion ; <nl> if ( dav . getRange ( ) ! = null ) <nl> { <nl> - String message = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s " , v . getLabel ( ) , dav . getRange ( ) . toStringFriendly ( ) ) ; <nl> - renderer . drawString ( message , this . left , offset , 0xEEEEEE ) ; <nl> - continue ; <nl> + acceptedModVersionString = dav . getRange ( ) . toStringFriendly ( ) ; <nl> } <nl> } <nl> - renderer . drawString ( String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . left , offset , 0xEEEEEE ) ; <nl> + ModContainer acceptedMod = Loader . instance ( ) . getIndexedModList ( ) . get ( acceptedModId ) ; <nl> + String acceptedModName = acceptedMod ! = null ? acceptedMod . getName ( ) : acceptedModId ; <nl> + String versionInfoText = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s ( % s ) " , acceptedModName , acceptedModVersionString , missingReason ) ; <nl> + String message ; <nl> + if ( versionInfo . isRequired ( ) ) <nl> + { <nl> + message = I18n . format ( " fml . messages . mod . missing . dependencies . requires " , versionInfoText ) ; <nl> + } <nl> + else <nl> + { <nl> + message = I18n . format ( " fml . messages . mod . missing . dependencies . compatible . with " , versionInfoText ) ; <nl> + } <nl> + offset + = 10 ; <nl> + renderer . drawString ( message , this . left , offset , 0xEEEEEE ) ; <nl> } <nl> + <nl> offset + = 15 ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 0d6cb7d . . 4617283 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 231 , 8 + 231 , 8 @ @ public class Loader <nl> private void sortModList ( ) <nl> { <nl> FMLLog . log . trace ( " Verifying mod requirements are satisfied " ) ; <nl> - List < WrongMinecraftVersionException > wrongMinecraftExceptions = new ArrayList < WrongMinecraftVersionException > ( ) ; <nl> - List < MissingModsException > missingModsExceptions = new ArrayList < MissingModsException > ( ) ; <nl> + List < WrongMinecraftVersionException > wrongMinecraftExceptions = new ArrayList < > ( ) ; <nl> + List < MissingModsException > missingModsExceptions = new ArrayList < > ( ) ; <nl> try <nl> { <nl> BiMap < String , ArtifactVersion > modVersions = HashBiMap . create ( ) ; <nl> @ @ - 253 , 39 + 253 , 42 @ @ public class Loader <nl> continue ; <nl> } <nl> Map < String , ArtifactVersion > names = Maps . uniqueIndex ( mod . getRequirements ( ) , ArtifactVersion : : getLabel ) ; <nl> - Set < ArtifactVersion > versionMissingMods = Sets . newHashSet ( ) ; <nl> <nl> Set < String > missingMods = Sets . difference ( names . keySet ( ) , modVersions . keySet ( ) ) ; <nl> if ( ! missingMods . isEmpty ( ) ) <nl> { <nl> + MissingModsException missingModsException = new MissingModsException ( mod . getModId ( ) , mod . getName ( ) ) ; <nl> FMLLog . log . fatal ( " The mod { } ( { } ) requires mods { } to be available " , mod . getModId ( ) , mod . getName ( ) , missingMods ) ; <nl> for ( String modid : missingMods ) <nl> { <nl> - versionMissingMods . add ( names . get ( modid ) ) ; <nl> + ArtifactVersion acceptedVersion = names . get ( modid ) ; <nl> + ArtifactVersion currentVersion = modVersions . get ( modid ) ; <nl> + boolean required = mod . getRequirements ( ) . contains ( acceptedVersion ) ; <nl> + missingModsException . addMissingMod ( acceptedVersion , currentVersion , required ) ; <nl> } <nl> - MissingModsException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> - FMLLog . log . fatal ( ret . getMessage ( ) ) ; <nl> - missingModsExceptions . add ( ret ) ; <nl> + FMLLog . log . fatal ( missingModsException . getMessage ( ) ) ; <nl> + missingModsExceptions . add ( missingModsException ) ; <nl> continue ; <nl> } <nl> reqList . putAll ( mod . getModId ( ) , names . keySet ( ) ) ; <nl> ImmutableList < ArtifactVersion > allDeps = ImmutableList . < ArtifactVersion > builder ( ) . addAll ( mod . getDependants ( ) ) . addAll ( mod . getDependencies ( ) ) . build ( ) ; <nl> - for ( ArtifactVersion v : allDeps ) <nl> + MissingModsException missingModsException = new MissingModsException ( mod . getModId ( ) , mod . getName ( ) ) ; <nl> + for ( ArtifactVersion acceptedVersion : allDeps ) <nl> { <nl> - if ( modVersions . containsKey ( v . getLabel ( ) ) ) <nl> + if ( modVersions . containsKey ( acceptedVersion . getLabel ( ) ) ) <nl> { <nl> - if ( ! v . containsVersion ( modVersions . get ( v . getLabel ( ) ) ) ) <nl> + ArtifactVersion currentVersion = modVersions . get ( acceptedVersion . getLabel ( ) ) ; <nl> + if ( ! acceptedVersion . containsVersion ( currentVersion ) ) <nl> { <nl> - versionMissingMods . add ( v ) ; <nl> + boolean required = mod . getRequirements ( ) . contains ( acceptedVersion ) ; <nl> + missingModsException . addMissingMod ( acceptedVersion , currentVersion , required ) ; <nl> } <nl> } <nl> } <nl> - if ( ! versionMissingMods . isEmpty ( ) ) <nl> + if ( ! missingModsException . getMissingModInfos ( ) . isEmpty ( ) ) <nl> { <nl> - FMLLog . log . fatal ( " The mod { } ( { } ) requires mod versions { } to be available " , mod . getModId ( ) , mod . getName ( ) , versionMissingMods ) ; <nl> - MissingModsException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> - FMLLog . log . fatal ( ret . toString ( ) ) ; <nl> - missingModsExceptions . add ( ret ) ; <nl> + FMLLog . log . fatal ( missingModsException . toString ( ) ) ; <nl> + missingModsExceptions . add ( missingModsException ) ; <nl> } <nl> } <nl> <nl> @ @ - 306 , 7 + 309 , 7 @ @ public class Loader <nl> throw new MultipleModsErrored ( wrongMinecraftExceptions , missingModsExceptions ) ; <nl> } <nl> <nl> - reverseDependencies = Multimaps . invertFrom ( reqList , ArrayListMultimap . < String , String > create ( ) ) ; <nl> + reverseDependencies = Multimaps . invertFrom ( reqList , ArrayListMultimap . create ( ) ) ; <nl> ModSorter sorter = new ModSorter ( getActiveModList ( ) , namedMods ) ; <nl> <nl> try <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / MissingModsException . java b / src / main / java / net / minecraftforge / fml / common / MissingModsException . java <nl> index 4a555ea . . c70ee69 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / MissingModsException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / MissingModsException . java <nl> @ @ - 19 , 36 + 19 , 117 @ @ <nl> <nl> package net . minecraftforge . fml . common ; <nl> <nl> + import javax . annotation . Nullable ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . HashSet ; <nl> + import java . util . List ; <nl> import java . util . Set ; <nl> + import java . util . stream . Collectors ; <nl> <nl> + import com . google . common . base . Preconditions ; <nl> import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> <nl> public class MissingModsException extends EnhancedRuntimeException <nl> { <nl> private static final long serialVersionUID = 1L ; <nl> + private final String id ; <nl> + private final String name ; <nl> + / * * @ deprecated use { @ link # getMissingModInfos ( ) } * / <nl> + @ Deprecated / / TODO remove in 1 . 13 <nl> public final Set < ArtifactVersion > missingMods ; <nl> + private final List < MissingModInfo > missingModsInfos ; <nl> private final String modName ; <nl> <nl> + public MissingModsException ( String id , String name ) <nl> + { <nl> + this ( new HashSet < > ( ) , id , name ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ deprecated use { @ link # MissingModsException ( String , String ) } <nl> + * / <nl> + @ Deprecated / / TODO remove in 1 . 13 <nl> public MissingModsException ( Set < ArtifactVersion > missingMods , String id , String name ) <nl> { <nl> - super ( String . format ( " Mod % s ( % s ) requires % s " , id , name , missingMods ) ) ; <nl> + this . id = id ; <nl> + this . name = name ; <nl> this . missingMods = missingMods ; <nl> + this . missingModsInfos = new ArrayList < > ( ) ; <nl> + for ( ArtifactVersion artifactVersion : missingMods ) <nl> + { <nl> + missingModsInfos . add ( new MissingModInfo ( artifactVersion , null , true ) ) ; <nl> + } <nl> this . modName = name ; <nl> } <nl> <nl> + @ Override <nl> + public String getMessage ( ) <nl> + { <nl> + Set < ArtifactVersion > missingMods = missingModsInfos . stream ( ) . map ( MissingModInfo : : getAcceptedVersion ) . collect ( Collectors . toSet ( ) ) ; <nl> + return String . format ( " Mod % s ( % s ) requires % s " , id , name , missingMods ) ; <nl> + } <nl> + <nl> + public void addMissingMod ( ArtifactVersion acceptedVersion , @ Nullable ArtifactVersion currentVersion , boolean required ) <nl> + { <nl> + MissingModInfo missingModInfo = new MissingModInfo ( acceptedVersion , currentVersion , required ) ; <nl> + this . missingModsInfos . add ( missingModInfo ) ; <nl> + this . missingMods . add ( acceptedVersion ) ; <nl> + } <nl> + <nl> public String getModName ( ) <nl> { <nl> return modName ; <nl> } <nl> <nl> + public List < MissingModInfo > getMissingModInfos ( ) <nl> + { <nl> + return Collections . unmodifiableList ( this . missingModsInfos ) ; <nl> + } <nl> + <nl> @ Override <nl> protected void printStackTrace ( WrappedPrintStream stream ) <nl> { <nl> stream . println ( " Missing Mods : " ) ; <nl> - for ( ArtifactVersion v : missingMods ) <nl> + for ( MissingModInfo info : this . missingModsInfos ) <nl> { <nl> - stream . println ( String . format ( " \ t % s : % s " , v . getLabel ( ) , v . getRangeString ( ) ) ) ; <nl> + ArtifactVersion acceptedVersion = info . getAcceptedVersion ( ) ; <nl> + ArtifactVersion currentVersion = info . getCurrentVersion ( ) ; <nl> + String currentString = currentVersion ! = null ? currentVersion . getVersionString ( ) : " missing " ; <nl> + stream . println ( String . format ( " \ t % s : need % s : have % s " , acceptedVersion . getVersionString ( ) , acceptedVersion . getRangeString ( ) , currentString ) ) ; <nl> } <nl> stream . println ( " " ) ; <nl> } <nl> + <nl> + public static class MissingModInfo <nl> + { <nl> + private final ArtifactVersion acceptedVersion ; <nl> + @ Nullable <nl> + private final ArtifactVersion currentVersion ; <nl> + private final boolean required ; <nl> + <nl> + private MissingModInfo ( ArtifactVersion acceptedVersion , @ Nullable ArtifactVersion currentVersion , boolean required ) <nl> + { <nl> + Preconditions . checkNotNull ( acceptedVersion , " acceptedVersion " ) ; <nl> + this . acceptedVersion = acceptedVersion ; <nl> + this . currentVersion = currentVersion ; <nl> + this . required = required ; <nl> + } <nl> + <nl> + @ Nullable <nl> + public ArtifactVersion getCurrentVersion ( ) <nl> + { <nl> + return currentVersion ; <nl> + } <nl> + <nl> + public ArtifactVersion getAcceptedVersion ( ) <nl> + { <nl> + return acceptedVersion ; <nl> + } <nl> + <nl> + public boolean isRequired ( ) <nl> + { <nl> + return required ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java b / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java <nl> index aee354f . . 470a9d2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java <nl> @ @ - 21 , 13 + 21 , 26 @ @ package net . minecraftforge . fml . common ; <nl> <nl> import java . util . List ; <nl> <nl> - public class MultipleModsErrored extends RuntimeException <nl> + public class MultipleModsErrored extends EnhancedRuntimeException <nl> { <nl> public final List < WrongMinecraftVersionException > wrongMinecraftExceptions ; <nl> - public final List < MissingModsException > missingModsExceptions ; <nl> + public final List < MissingModsException > missingModsExceptions ; <nl> public MultipleModsErrored ( List < WrongMinecraftVersionException > wrongMinecraftExceptions , List < MissingModsException > missingModsExceptions ) <nl> { <nl> this . wrongMinecraftExceptions = wrongMinecraftExceptions ; <nl> this . missingModsExceptions = missingModsExceptions ; <nl> } <nl> + <nl> + @ Override <nl> + protected void printStackTrace ( WrappedPrintStream stream ) <nl> + { <nl> + for ( WrongMinecraftVersionException wrongMinecraftVersionException : this . wrongMinecraftExceptions ) <nl> + { <nl> + wrongMinecraftVersionException . printStackTrace ( stream ) ; <nl> + } <nl> + for ( MissingModsException missingModsException : this . missingModsExceptions ) <nl> + { <nl> + missingModsException . printStackTrace ( stream ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java b / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java <nl> index 1cfe6ff . . ec0d0e3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java <nl> @ @ - 102 , 7 + 102 , 11 @ @ public class DefaultArtifactVersion implements ArtifactVersion <nl> @ Override <nl> public String toString ( ) <nl> { <nl> - return label = = null ? comparableVersion . toString ( ) : label + ( unbounded ? " " : " @ " + range ) ; <nl> + if ( label = = null ) <nl> + { <nl> + return getVersionString ( ) ; <nl> + } <nl> + return label + ( unbounded ? " " : " @ " + range ) ; <nl> } <nl> <nl> public VersionRange getRange ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java <nl> index 65c6150 . . 4f1ea56 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java <nl> @ @ - 478 , 7 + 478 , 7 @ @ public class VersionRange <nl> { <nl> if ( recommendedVersion ! = null ) <nl> { <nl> - return recommendedVersion . toString ( ) ; <nl> + return recommendedVersion . getVersionString ( ) ; <nl> } <nl> else <nl> { <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 58efbf3 . . e55a016 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 203 , 8 + 203 , 14 @ @ item . forge . bucketFilled . name = % s Bucket <nl> <nl> fml . messages . mod . missing . dependencies = % s is missing mods it depends on . <nl> fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . <nl> + fml . messages . mod . missing . dependencies . compatibility = You must include the right dependencies for % s : <nl> + fml . messages . mod . missing . dependencies . missing = missing <nl> + fml . messages . mod . missing . dependencies . compatible . with = Only compatible with % s <nl> + fml . messages . mod . missing . dependencies . requires = Requires % s <nl> + fml . messages . mod . missing . dependencies . you . have = you have % s <nl> fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . <nl> fml . messages . mod . missing . dependencies . multiple = Some mods are missing mods they depends on . <nl> + fml . messages . mod . missing . dependencies . multiple . issues = You must include the right dependencies for the following mods : <nl> fml . messages . mod . missing . multiple = There were % s errors loading Minecraft <nl> fml . messages . mod . wrongminecraft = The mods listed below can ' t run in Minecraft version % s <nl> fml . messages . mod . wrongminecraft . requirement = % s ( % s ) requires Minecraft % s
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 0c217da . . 11821d7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 96 , 6 + 96 , 7 @ @ import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderException ; <nl> import net . minecraftforge . fml . common . MetadataCollection ; <nl> import net . minecraftforge . fml . common . MissingModsException ; <nl> + import net . minecraftforge . fml . common . MultipleModsErrored ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . ModMetadata ; <nl> import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; <nl> @ @ - 185 , 6 + 186 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private DuplicateModsFoundException dupesFound ; <nl> <nl> + private MultipleModsErrored multipleModsErrored ; <nl> + <nl> private boolean serverShouldBeKilledQuietly ; <nl> <nl> private List < IResourcePack > resourcePackList ; <nl> @ @ - 253 , 6 + 256 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> FMLLog . log ( Level . ERROR , custom , " A custom exception was thrown by a mod , the game will now halt " ) ; <nl> customError = custom ; <nl> } <nl> + catch ( MultipleModsErrored multiple ) <nl> + { <nl> + multipleModsErrored = multiple ; <nl> + } <nl> catch ( LoaderException le ) <nl> { <nl> haltGame ( " There was a severe problem during mod loading that has caused the game to fail " , le ) ; <nl> @ @ - 333 , 7 + 340 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> * / <nl> public void finishMinecraftLoading ( ) <nl> { <nl> - if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null ) <nl> + if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null | | multipleModsErrored ! = null ) <nl> { <nl> SplashProgress . finish ( ) ; <nl> return ; <nl> @ @ - 441 , 6 + 448 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> showGuiScreen ( new GuiCustomModLoadingErrorScreen ( customError ) ) ; <nl> } <nl> + else if ( multipleModsErrored ! = null ) <nl> + { <nl> + showGuiScreen ( new GuiMultipleModsErrored ( multipleModsErrored ) ) ; <nl> + } <nl> else <nl> { <nl> logMissingTextureErrors ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiDupesFound . java b / src / main / java / net / minecraftforge / fml / client / GuiDupesFound . java <nl> index f6620fc . . 9448ded 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiDupesFound . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiDupesFound . java <nl> @ @ - 19 , 31 + 19 , 23 @ @ <nl> <nl> package net . minecraftforge . fml . client ; <nl> <nl> - import java . io . File ; <nl> - import java . util . Map . Entry ; <nl> - <nl> - import net . minecraft . client . gui . GuiErrorScreen ; <nl> import net . minecraftforge . fml . common . DuplicateModsFoundException ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> <nl> - public class GuiDupesFound extends GuiErrorScreen <nl> + import java . io . File ; <nl> + import java . util . Map . Entry ; <nl> + <nl> + public class GuiDupesFound extends GuiErrorBase <nl> { <nl> <nl> private DuplicateModsFoundException dupes ; <nl> <nl> public GuiDupesFound ( DuplicateModsFoundException dupes ) <nl> { <nl> - super ( null , null ) ; <nl> this . dupes = dupes ; <nl> } <nl> <nl> @ Override <nl> - public void initGui ( ) <nl> - { <nl> - super . initGui ( ) ; <nl> - this . buttonList . clear ( ) ; <nl> - } <nl> - @ Override <nl> public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> { <nl> this . drawDefaultBackground ( ) ; <nl> @ @ - 59 , 5 + 51 , 6 @ @ public class GuiDupesFound extends GuiErrorScreen <nl> offset + = 10 ; <nl> this . drawCenteredString ( this . fontRendererObj , String . format ( " % s : % s " , mc . getKey ( ) . getModId ( ) , mc . getValue ( ) . getName ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> } <nl> + super . drawScreen ( mouseX , mouseY , partialTicks ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiErrorBase . java b / src / main / java / net / minecraftforge / fml / client / GuiErrorBase . java <nl> new file mode 100644 <nl> index 0000000 . . fe62fd2 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiErrorBase . java <nl> @ @ - 0 , 0 + 1 , 92 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . client ; <nl> + <nl> + import net . minecraft . client . gui . GuiButton ; <nl> + import net . minecraft . client . gui . GuiErrorScreen ; <nl> + import net . minecraft . client . resources . I18n ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> + import java . awt . * ; <nl> + import java . io . File ; <nl> + <nl> + public class GuiErrorBase extends GuiErrorScreen <nl> + { <nl> + static final File minecraftDir = new File ( Loader . instance ( ) . getConfigDir ( ) . getParent ( ) ) ; <nl> + static final File clientLog = new File ( minecraftDir , " logs / fml - client - latest . log " ) ; <nl> + public GuiErrorBase ( ) <nl> + { <nl> + super ( null , null ) ; <nl> + } <nl> + <nl> + private String translateOrDefault ( String translateKey , String alternative , Object . . . format ) <nl> + { <nl> + return I18n . hasKey ( translateKey ) ? I18n . format ( translateKey , format ) : String . format ( alternative , format ) ; / / When throwing a DuplicateModsException , the translation system does not work . . . <nl> + } <nl> + <nl> + @ Override <nl> + public void initGui ( ) <nl> + { <nl> + super . initGui ( ) ; <nl> + this . buttonList . clear ( ) ; <nl> + this . buttonList . add ( new GuiButton ( 10 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , translateOrDefault ( " fml . button . open . mods . folder " , " Open Mods Folder " ) ) ) ; <nl> + String openFileText = translateOrDefault ( " fml . button . open . file " , " Open % s " , clientLog . getName ( ) ) ; <nl> + this . buttonList . add ( new GuiButton ( 11 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , openFileText ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void actionPerformed ( GuiButton button ) <nl> + { <nl> + if ( button . id = = 10 ) <nl> + { <nl> + try <nl> + { <nl> + File modsDir = new File ( minecraftDir , " mods " ) ; <nl> + Desktop . getDesktop ( ) . open ( modsDir ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Problem opening mods folder " ) ; <nl> + } <nl> + } <nl> + else if ( button . id = = 11 ) <nl> + { <nl> + try <nl> + { <nl> + Desktop . getDesktop ( ) . open ( clientLog ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Problem opening log file " + clientLog ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> + { <nl> + for ( GuiButton button : buttonList ) <nl> + { <nl> + button . drawButton ( this . mc , mouseX , mouseY ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> index d21dfce . . b917f66 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> @ @ - 20 , 7 + 20 , 6 @ @ <nl> package net . minecraftforge . fml . client ; <nl> <nl> import net . minecraft . client . gui . GuiButton ; <nl> - import net . minecraft . client . gui . GuiErrorScreen ; <nl> import net . minecraft . client . resources . I18n ; <nl> import net . minecraft . util . text . TextFormatting ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> @ @ - 32 , 40 + 31 , 40 @ @ import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . collect . Lists ; <nl> <nl> - import java . awt . * ; <nl> - import java . io . IOException ; <nl> + import java . awt . Desktop ; <nl> import java . net . URI ; <nl> import java . util . List ; <nl> <nl> - public class GuiJava8Error extends GuiErrorScreen <nl> + public class GuiJava8Error extends GuiErrorBase <nl> { <nl> private Java8VersionException java8VersionException ; <nl> public GuiJava8Error ( Java8VersionException java8VersionException ) <nl> { <nl> - super ( null , null ) ; <nl> this . java8VersionException = java8VersionException ; <nl> } <nl> <nl> @ Override <nl> public void initGui ( ) <nl> { <nl> - this . buttonList . clear ( ) ; <nl> - this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; <nl> + super . initGui ( ) ; <nl> + this . buttonList . remove ( 1 ) ; <nl> if ( java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> { <nl> - this . buttonList . add ( new GuiButton ( 3 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; <nl> - } <nl> - else <nl> - { <nl> - this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " menu . quit " ) ) ) ; <nl> + this . buttonList . remove ( 0 ) ; <nl> + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; <nl> } <nl> + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; <nl> } <nl> <nl> @ Override <nl> - protected void actionPerformed ( GuiButton button ) throws IOException <nl> + protected void actionPerformed ( GuiButton button ) <nl> { <nl> if ( button . id = = 1 ) <nl> { <nl> + FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; <nl> + } <nl> + else if ( button . id = = 2 ) <nl> + { <nl> try <nl> { <nl> Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; <nl> @ @ - 75 , 13 + 74 , 9 @ @ public class GuiJava8Error extends GuiErrorScreen <nl> FMLLog . log ( Level . ERROR , e , " Problem launching browser " ) ; <nl> } <nl> } <nl> - else if ( button . id = = 2 ) <nl> - { <nl> - FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; <nl> - } <nl> - else if ( button . id = = 3 ) <nl> + else <nl> { <nl> - FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; <nl> + super . actionPerformed ( button ) ; <nl> } <nl> } <nl> <nl> @ @ - 135 , 13 + 130 , 7 @ @ public class GuiJava8Error extends GuiErrorScreen <nl> this . drawString ( this . fontRendererObj , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; <nl> offset + = this . fontRendererObj . FONT _ HEIGHT + 2 ; <nl> } <nl> - <nl> - offset + = 15 ; <nl> - } <nl> - / / super . super <nl> - for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) <nl> - { <nl> - ( ( GuiButton ) this . buttonList . get ( i ) ) . drawButton ( this . mc , mouseX , mouseY ) ; <nl> } <nl> + super . drawScreen ( mouseX , mouseY , partialTicks ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java <nl> index 99e3337 . . d69264a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java <nl> @ @ - 19 , 72 + 19 , 22 @ @ <nl> <nl> package net . minecraftforge . fml . client ; <nl> <nl> - import java . awt . * ; <nl> - import java . io . File ; <nl> - import java . io . IOException ; <nl> - <nl> - import net . minecraft . client . gui . GuiButton ; <nl> - import net . minecraft . client . gui . GuiErrorScreen ; <nl> import net . minecraft . client . resources . I18n ; <nl> import net . minecraft . util . text . TextFormatting ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> - import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . MissingModsException ; <nl> import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> - import org . apache . logging . log4j . Level ; <nl> <nl> - public class GuiModsMissing extends GuiErrorScreen <nl> + public class GuiModsMissing extends GuiErrorBase <nl> { <nl> - private File minecraftDir = new File ( Loader . instance ( ) . getConfigDir ( ) . getParent ( ) ) ; <nl> - private File clientLog = new File ( minecraftDir , " logs / fml - client - latest . log " ) ; <nl> private MissingModsException modsMissing ; <nl> <nl> public GuiModsMissing ( MissingModsException modsMissing ) <nl> { <nl> - super ( null , null ) ; <nl> this . modsMissing = modsMissing ; <nl> } <nl> <nl> @ Override <nl> - public void initGui ( ) <nl> - { <nl> - super . initGui ( ) ; <nl> - this . buttonList . clear ( ) ; <nl> - this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . open . mods . folder " ) ) ) ; <nl> - String openFileText = I18n . format ( " fml . button . open . file " , clientLog . getName ( ) ) ; <nl> - this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , openFileText ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void actionPerformed ( GuiButton button ) throws IOException <nl> - { <nl> - if ( button . id = = 1 ) <nl> - { <nl> - try <nl> - { <nl> - File modsDir = new File ( minecraftDir , " mods " ) ; <nl> - Desktop . getDesktop ( ) . open ( modsDir ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - FMLLog . log ( Level . ERROR , e , " Problem opening mods folder " ) ; <nl> - } <nl> - } <nl> - else if ( button . id = = 2 ) <nl> - { <nl> - try <nl> - { <nl> - Desktop . getDesktop ( ) . open ( clientLog ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - FMLLog . log ( Level . ERROR , e , " Problem opening log file " + clientLog ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> { <nl> this . drawDefaultBackground ( ) ; <nl> @ @ - 108 , 15 + 58 , 11 @ @ public class GuiModsMissing extends GuiErrorScreen <nl> continue ; <nl> } <nl> } <nl> - this . drawCenteredString ( this . fontRendererObj , String . format ( " % s : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> + this . drawCenteredString ( this . fontRendererObj , String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> } <nl> offset + = 20 ; <nl> - String seeLogText = I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , clientLog . getName ( ) ) ; <nl> + String seeLogText = I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , GuiErrorBase . clientLog . getName ( ) ) ; <nl> this . drawCenteredString ( this . fontRendererObj , seeLogText , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - <nl> - for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) <nl> - { <nl> - this . buttonList . get ( i ) . drawButton ( this . mc , mouseX , mouseY ) ; <nl> - } <nl> + super . drawScreen ( mouseX , mouseY , partialTicks ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java b / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java <nl> new file mode 100644 <nl> index 0000000 . . dba9197 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java <nl> @ @ - 0 , 0 + 1 , 156 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . client ; <nl> + <nl> + import net . minecraft . client . gui . FontRenderer ; <nl> + import net . minecraft . client . gui . GuiButton ; <nl> + import net . minecraft . client . renderer . Tessellator ; <nl> + import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . util . text . TextFormatting ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . MissingModsException ; <nl> + import net . minecraftforge . fml . common . MultipleModsErrored ; <nl> + import net . minecraftforge . fml . common . WrongMinecraftVersionException ; <nl> + import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> + import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + public class GuiMultipleModsErrored extends GuiErrorBase <nl> + { <nl> + private final List < WrongMinecraftVersionException > wrongMinecraftExceptions ; <nl> + private final List < MissingModsException > missingModsExceptions ; <nl> + private GuiList list ; <nl> + <nl> + public GuiMultipleModsErrored ( MultipleModsErrored exception ) <nl> + { <nl> + wrongMinecraftExceptions = exception . wrongMinecraftExceptions ; <nl> + missingModsExceptions = exception . missingModsExceptions ; <nl> + } <nl> + <nl> + @ Override <nl> + public void initGui ( ) <nl> + { <nl> + super . initGui ( ) ; <nl> + int additionalSize = missingModsExceptions . isEmpty ( ) | | wrongMinecraftExceptions . isEmpty ( ) ? 20 : 55 ; <nl> + for ( MissingModsException exception : missingModsExceptions ) <nl> + { <nl> + additionalSize + = exception . missingMods . size ( ) * 10 ; <nl> + } <nl> + list = new GuiList ( wrongMinecraftExceptions . size ( ) * 10 + missingModsExceptions . size ( ) * 15 + additionalSize ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> + { <nl> + this . drawDefaultBackground ( ) ; <nl> + this . list . drawScreen ( mouseX , mouseY , partialTicks ) ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . missing . multiple " , missingModsExceptions . size ( ) + wrongMinecraftExceptions . size ( ) ) , this . width / 2 , 10 , 0xFFFFFF ) ; <nl> + super . drawScreen ( mouseX , mouseY , partialTicks ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void actionPerformed ( GuiButton button ) <nl> + { <nl> + this . list . actionPerformed ( button ) ; <nl> + super . actionPerformed ( button ) ; <nl> + } <nl> + <nl> + private class GuiList extends GuiScrollingList <nl> + { <nl> + public GuiList ( int entryHeight ) <nl> + { <nl> + super ( GuiMultipleModsErrored . this . mc , <nl> + GuiMultipleModsErrored . this . width - 20 , <nl> + GuiMultipleModsErrored . this . height - 30 , <nl> + 30 , GuiMultipleModsErrored . this . height - 50 , <nl> + 10 , <nl> + entryHeight , <nl> + GuiMultipleModsErrored . this . width , <nl> + GuiMultipleModsErrored . this . height ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected int getSize ( ) <nl> + { <nl> + return 1 ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void elementClicked ( int index , boolean doubleClick ) { } <nl> + <nl> + @ Override <nl> + protected boolean isSelected ( int index ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void drawBackground ( ) <nl> + { <nl> + drawDefaultBackground ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void drawSlot ( int slotIdx , int entryRight , int slotTop , int slotBuffer , Tessellator tess ) <nl> + { <nl> + int offset = slotTop ; <nl> + FontRenderer renderer = GuiMultipleModsErrored . this . fontRendererObj ; <nl> + if ( ! wrongMinecraftExceptions . isEmpty ( ) ) <nl> + { <nl> + renderer . drawString ( TextFormatting . UNDERLINE + I18n . format ( " fml . messages . mod . wrongminecraft " , Loader . instance ( ) . getMinecraftModContainer ( ) . getVersion ( ) ) , this . left , offset , 0xFFFFFF ) ; <nl> + offset + = 15 ; <nl> + for ( WrongMinecraftVersionException exception : wrongMinecraftExceptions ) <nl> + { <nl> + renderer . drawString ( I18n . format ( " fml . messages . mod . wrongminecraft . requirement " , TextFormatting . BOLD + exception . mod . getName ( ) + TextFormatting . RESET , exception . mod . getModId ( ) , exception . mod . acceptableMinecraftVersionRange ( ) . toStringFriendly ( ) ) , this . left , offset , 0xFFFFFF ) ; <nl> + offset + = 10 ; <nl> + } <nl> + offset + = 5 ; <nl> + renderer . drawString ( I18n . format ( " fml . messages . mod . wrongminecraft . fix . multiple " ) , this . left , offset , 0xFFFFFF ) ; <nl> + offset + = 20 ; <nl> + } <nl> + if ( ! missingModsExceptions . isEmpty ( ) ) <nl> + { <nl> + renderer . drawString ( TextFormatting . UNDERLINE + I18n . format ( " fml . messages . mod . missing . dependencies . multiple " ) , this . left , offset , 0xFFFFFF ) ; <nl> + offset + = 15 ; <nl> + for ( MissingModsException exception : missingModsExceptions ) <nl> + { <nl> + renderer . drawString ( I18n . format ( " fml . messages . mod . missing . dependencies . fix " , TextFormatting . BOLD + exception . getModName ( ) + TextFormatting . RESET ) , this . left , offset , 0xFFFFFF ) ; <nl> + for ( ArtifactVersion v : exception . missingMods ) <nl> + { <nl> + offset + = 10 ; <nl> + if ( v instanceof DefaultArtifactVersion ) <nl> + { <nl> + DefaultArtifactVersion dav = ( DefaultArtifactVersion ) v ; <nl> + if ( dav . getRange ( ) ! = null ) <nl> + { <nl> + String message = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s " , v . getLabel ( ) , dav . getRange ( ) . toStringFriendly ( ) ) ; <nl> + renderer . drawString ( message , this . left , offset , 0xEEEEEE ) ; <nl> + continue ; <nl> + } <nl> + } <nl> + renderer . drawString ( String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . left , offset , 0xEEEEEE ) ; <nl> + } <nl> + offset + = 15 ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiScrollingList . java b / src / main / java / net / minecraftforge / fml / client / GuiScrollingList . java <nl> index 64b1537 . . e1dc953 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiScrollingList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiScrollingList . java <nl> @ @ - 19 , 9 + 19 , 6 @ @ <nl> <nl> package net . minecraftforge . fml . client ; <nl> <nl> - import java . io . IOException ; <nl> - import java . util . List ; <nl> - <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . gui . Gui ; <nl> import net . minecraft . client . gui . GuiButton ; <nl> @ @ - 30 , 10 + 27 , 12 @ @ import net . minecraft . client . renderer . GlStateManager ; <nl> import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . client . renderer . VertexBuffer ; <nl> import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> - <nl> import org . lwjgl . input . Mouse ; <nl> import org . lwjgl . opengl . GL11 ; <nl> <nl> + import java . io . IOException ; <nl> + import java . util . List ; <nl> + <nl> public abstract class GuiScrollingList <nl> { <nl> private final Minecraft client ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiWrongMinecraft . java b / src / main / java / net / minecraftforge / fml / client / GuiWrongMinecraft . java <nl> index dae6547 . . d3d878c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiWrongMinecraft . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiWrongMinecraft . java <nl> @ @ - 20 , 35 + 20 , 32 @ @ <nl> package net . minecraftforge . fml . client ; <nl> <nl> import net . minecraft . client . gui . GuiErrorScreen ; <nl> + import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . util . text . TextFormatting ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . WrongMinecraftVersionException ; <nl> <nl> - public class GuiWrongMinecraft extends GuiErrorScreen <nl> + public class GuiWrongMinecraft extends GuiErrorBase <nl> { <nl> private WrongMinecraftVersionException wrongMC ; <nl> + <nl> public GuiWrongMinecraft ( WrongMinecraftVersionException wrongMC ) <nl> { <nl> - super ( null , null ) ; <nl> this . wrongMC = wrongMC ; <nl> } <nl> - @ Override <nl> - public void initGui ( ) <nl> - { <nl> - super . initGui ( ) ; <nl> - this . buttonList . clear ( ) ; <nl> - } <nl> + <nl> @ Override <nl> public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> { <nl> this . drawDefaultBackground ( ) ; <nl> int offset = 75 ; <nl> - this . drawCenteredString ( this . fontRendererObj , " Forge Mod Loader has found a problem with your minecraft installation " , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 10 ; <nl> - this . drawCenteredString ( this . fontRendererObj , String . format ( " The mod listed below does not want to run in Minecraft version % s " , Loader . instance ( ) . getMinecraftModContainer ( ) . getVersion ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 5 ; <nl> - offset + = 10 ; <nl> - this . drawCenteredString ( this . fontRendererObj , String . format ( " % s ( % s ) wants Minecraft % s " , wrongMC . mod . getName ( ) , wrongMC . mod . getModId ( ) , wrongMC . mod . acceptableMinecraftVersionRange ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . wrongminecraft " , Loader . instance ( ) . getMinecraftModContainer ( ) . getVersion ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 15 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . wrongminecraft . requirement " , TextFormatting . BOLD + wrongMC . mod . getName ( ) + TextFormatting . RESET , wrongMC . mod . getModId ( ) , wrongMC . mod . acceptableMinecraftVersionRange ( ) . toStringFriendly ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> + offset + = 15 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . wrongminecraft . fix " , wrongMC . mod . getName ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> offset + = 20 ; <nl> - this . drawCenteredString ( this . fontRendererObj , " The file ' fml - client - latest . log ' contains more information " , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , GuiErrorBase . clientLog . getName ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + super . drawScreen ( mouseX , mouseY , partialTicks ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index aa52670 . . 9905a6a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 236 , 6 + 236 , 8 @ @ public class Loader <nl> private void sortModList ( ) <nl> { <nl> FMLLog . finer ( " Verifying mod requirements are satisfied " ) ; <nl> + List < WrongMinecraftVersionException > wrongMinecraftExceptions = new ArrayList < WrongMinecraftVersionException > ( ) ; <nl> + List < MissingModsException > missingModsExceptions = new ArrayList < MissingModsException > ( ) ; <nl> try <nl> { <nl> BiMap < String , ArtifactVersion > modVersions = HashBiMap . create ( ) ; <nl> @ @ - 250 , 9 + 252 , 10 @ @ public class Loader <nl> if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) <nl> { <nl> FMLLog . severe ( " The mod % s does not wish to run in Minecraft version % s . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; <nl> - RuntimeException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; <nl> + WrongMinecraftVersionException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; <nl> FMLLog . severe ( ret . getMessage ( ) ) ; <nl> - throw ret ; <nl> + wrongMinecraftExceptions . add ( ret ) ; <nl> + continue ; <nl> } <nl> Map < String , ArtifactVersion > names = Maps . uniqueIndex ( mod . getRequirements ( ) , new ArtifactVersionNameFunction ( ) ) ; <nl> Set < ArtifactVersion > versionMissingMods = Sets . newHashSet ( ) ; <nl> @ @ - 265 , 9 + 268 , 10 @ @ public class Loader <nl> { <nl> versionMissingMods . add ( names . get ( modid ) ) ; <nl> } <nl> - RuntimeException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> + MissingModsException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> FMLLog . severe ( ret . getMessage ( ) ) ; <nl> - throw ret ; <nl> + missingModsExceptions . add ( ret ) ; <nl> + continue ; <nl> } <nl> reqList . putAll ( mod . getModId ( ) , names . keySet ( ) ) ; <nl> ImmutableList < ArtifactVersion > allDeps = ImmutableList . < ArtifactVersion > builder ( ) . addAll ( mod . getDependants ( ) ) . addAll ( mod . getDependencies ( ) ) . build ( ) ; <nl> @ @ - 284 , 13 + 288 , 28 @ @ public class Loader <nl> if ( ! versionMissingMods . isEmpty ( ) ) <nl> { <nl> FMLLog . severe ( " The mod % s ( % s ) requires mod versions % s to be available " , mod . getModId ( ) , mod . getName ( ) , versionMissingMods ) ; <nl> - RuntimeException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> + MissingModsException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> FMLLog . severe ( ret . toString ( ) ) ; <nl> - throw ret ; <nl> + missingModsExceptions . add ( ret ) ; <nl> } <nl> } <nl> <nl> - FMLLog . finer ( " All mod requirements are satisfied " ) ; <nl> + if ( wrongMinecraftExceptions . isEmpty ( ) & & missingModsExceptions . isEmpty ( ) ) <nl> + { <nl> + FMLLog . finer ( " All mod requirements are satisfied " ) ; <nl> + } <nl> + else if ( missingModsExceptions . size ( ) = = 1 & & wrongMinecraftExceptions . isEmpty ( ) ) <nl> + { <nl> + throw missingModsExceptions . get ( 0 ) ; <nl> + } <nl> + else if ( wrongMinecraftExceptions . size ( ) = = 1 & & missingModsExceptions . isEmpty ( ) ) <nl> + { <nl> + throw wrongMinecraftExceptions . get ( 0 ) ; <nl> + } <nl> + else <nl> + { <nl> + throw new MultipleModsErrored ( wrongMinecraftExceptions , missingModsExceptions ) ; <nl> + } <nl> <nl> reverseDependencies = Multimaps . invertFrom ( reqList , ArrayListMultimap . < String , String > create ( ) ) ; <nl> ModSorter sorter = new ModSorter ( getActiveModList ( ) , namedMods ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java b / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java <nl> new file mode 100644 <nl> index 0000000 . . aee354f <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java <nl> @ @ - 0 , 0 + 1 , 33 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . common ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + public class MultipleModsErrored extends RuntimeException <nl> + { <nl> + public final List < WrongMinecraftVersionException > wrongMinecraftExceptions ; <nl> + public final List < MissingModsException > missingModsExceptions ; <nl> + public MultipleModsErrored ( List < WrongMinecraftVersionException > wrongMinecraftExceptions , List < MissingModsException > missingModsExceptions ) <nl> + { <nl> + this . wrongMinecraftExceptions = wrongMinecraftExceptions ; <nl> + this . missingModsExceptions = missingModsExceptions ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> index 81fc3a2 . . aa0575c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> @ @ - 212 , 9 + 212 , 9 @ @ public class Restriction <nl> } <nl> else if ( getLowerBound ( ) ! = null & & getUpperBound ( ) ! = null ) <nl> { <nl> - if ( getLowerBound ( ) . equals ( getUpperBound ( ) ) ) <nl> + if ( getLowerBound ( ) . getVersionString ( ) . equals ( getUpperBound ( ) . getVersionString ( ) ) ) <nl> { <nl> - return getLowerBound ( ) . toString ( ) ; <nl> + return getLowerBound ( ) . getVersionString ( ) ; <nl> } <nl> else <nl> { <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 3b40d1c . . 6447bd7 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 175 , 6 + 175 , 12 @ @ fml . messages . countbadandgood = % s of % s mods have this problem <nl> fml . messages . mod . missing . dependencies = % s is missing mods it depends on . <nl> fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . <nl> fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . <nl> + fml . messages . mod . missing . dependencies . multiple = Some mods are missing mods they depends on . <nl> + fml . messages . mod . missing . multiple = There were % s errors loading Minecraft <nl> + fml . messages . mod . wrongminecraft = The mods listed below can ' t run in Minecraft version % s <nl> + fml . messages . mod . wrongminecraft . requirement = % s ( % s ) requires Minecraft % s <nl> + fml . messages . mod . wrongminecraft . fix = Try to find an update or remove % s <nl> + fml . messages . mod . wrongminecraft . fix . multiple = Try to find an update or remove these mods <nl> fml . messages . version . restriction . any = any <nl> fml . messages . version . restriction . lower . inclusive = % s or above <nl> fml . messages . version . restriction . lower . exclusive = above % s

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java 
 index bad93f6 . . 1676c39 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java 
 @ @ - 19 , 9 + 19 , 13 @ @ 
 
 package net . minecraftforge . fml . client ; 
 
 + import java . util . List ; 
 + 
 import net . minecraft . client . resources . I18n ; 
 import net . minecraft . util . text . TextFormatting ; 
 + import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . MissingModsException ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 
 @ @ - 38 , 31 + 42 , 49 @ @ public class GuiModsMissing extends GuiErrorBase 
 public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 { 
 this . drawDefaultBackground ( ) ; 
 - int offset = Math . max ( 85 - modsMissing . missingMods . size ( ) * 10 , 10 ) ; 
 - String modMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies " , TextFormatting . BOLD + modsMissing . getModName ( ) + TextFormatting . RESET ) ; 
 + List < MissingModsException . MissingModInfo > missingModsVersions = modsMissing . getMissingModInfos ( ) ; 
 + int offset = Math . max ( 85 - missingModsVersions . size ( ) * 10 , 10 ) ; 
 + String modMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies . compatibility " , TextFormatting . BOLD + modsMissing . getModName ( ) + TextFormatting . RESET ) ; 
 this . drawCenteredString ( this . fontRenderer , modMissingDependenciesText , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 10 ; 
 - String fixMissingDependenciesText = I18n . format ( " fml . messages . mod . missing . dependencies . fix " , modsMissing . getModName ( ) ) ; 
 - this . drawCenteredString ( this . fontRenderer , fixMissingDependenciesText , this . width / 2 , offset , 0xFFFFFF ) ; 
 offset + = 5 ; 
 - for ( ArtifactVersion v : modsMissing . missingMods ) 
 + for ( MissingModsException . MissingModInfo versionInfo : missingModsVersions ) 
 { 
 - offset + = 10 ; 
 - if ( v instanceof DefaultArtifactVersion ) 
 + ArtifactVersion acceptedVersion = versionInfo . getAcceptedVersion ( ) ; 
 + String acceptedModId = acceptedVersion . getLabel ( ) ; 
 + ArtifactVersion currentVersion = versionInfo . getCurrentVersion ( ) ; 
 + String missingReason ; 
 + if ( currentVersion = = null ) 
 + { 
 + missingReason = I18n . format ( " fml . messages . mod . missing . dependencies . missing " ) ; 
 + } 
 + else 
 + { 
 + missingReason = I18n . format ( " fml . messages . mod . missing . dependencies . you . have " , currentVersion . getVersionString ( ) ) ; 
 + } 
 + String acceptedModVersionString = acceptedVersion . getRangeString ( ) ; 
 + if ( acceptedVersion instanceof DefaultArtifactVersion ) 
 { 
 - DefaultArtifactVersion dav = ( DefaultArtifactVersion ) v ; 
 + DefaultArtifactVersion dav = ( DefaultArtifactVersion ) acceptedVersion ; 
 if ( dav . getRange ( ) ! = null ) 
 { 
 - String message = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s " , v . getLabel ( ) , dav . getRange ( ) . toStringFriendly ( ) ) ; 
 - this . drawCenteredString ( this . fontRenderer , message , this . width / 2 , offset , 0xEEEEEE ) ; 
 - continue ; 
 + acceptedModVersionString = dav . getRange ( ) . toStringFriendly ( ) ; 
 } 
 } 
 - this . drawCenteredString ( this . fontRenderer , String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 + ModContainer acceptedMod = Loader . instance ( ) . getIndexedModList ( ) . get ( acceptedModId ) ; 
 + String acceptedModName = acceptedMod ! = null ? acceptedMod . getName ( ) : acceptedModId ; 
 + String versionInfoText = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s ( % s ) " , acceptedModName , acceptedModVersionString , missingReason ) ; 
 + String message ; 
 + if ( versionInfo . isRequired ( ) ) 
 + { 
 + message = I18n . format ( " fml . messages . mod . missing . dependencies . requires " , versionInfoText ) ; 
 + } 
 + else 
 + { 
 + message = I18n . format ( " fml . messages . mod . missing . dependencies . compatible . with " , versionInfoText ) ; 
 + } 
 + offset + = 10 ; 
 + this . drawCenteredString ( this . fontRenderer , message , this . width / 2 , offset , 0xEEEEEE ) ; 
 } 
 - offset + = 20 ; 
 - String seeLogText = I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , GuiErrorBase . logFile . getName ( ) ) ; 
 - this . drawCenteredString ( this . fontRenderer , seeLogText , this . width / 2 , offset , 0xFFFFFF ) ; 
 super . drawScreen ( mouseX , mouseY , partialTicks ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModsMissingForServer . java b / src / main / java / net / minecraftforge / fml / client / GuiModsMissingForServer . java 
 index c65cb8f . . a8a6e24 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiModsMissingForServer . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiModsMissingForServer . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package net . minecraftforge . fml . client ; 
 
 + import java . util . List ; 
 + 
 import net . minecraft . client . gui . GuiButton ; 
 import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . client . resources . I18n ; 
 @ @ - 52 , 15 + 54 , 17 @ @ public class GuiModsMissingForServer extends GuiScreen 
 public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 { 
 this . drawDefaultBackground ( ) ; 
 - int offset = Math . max ( 85 - modsMissing . missingMods . size ( ) * 10 , 10 ) ; 
 + List < MissingModsException . MissingModInfo > missingModsVersions = modsMissing . getMissingModInfos ( ) ; 
 + int offset = Math . max ( 85 - missingModsVersions . size ( ) * 10 , 10 ) ; 
 this . drawCenteredString ( this . fontRenderer , " Forge Mod Loader could not connect to this server " , this . width / 2 , offset , 0xFFFFFF ) ; 
 offset + = 10 ; 
 this . drawCenteredString ( this . fontRenderer , " The mods and versions listed below could not be found " , this . width / 2 , offset , 0xFFFFFF ) ; 
 offset + = 10 ; 
 this . drawCenteredString ( this . fontRenderer , " They are required to play on this server " , this . width / 2 , offset , 0xFFFFFF ) ; 
 offset + = 5 ; 
 - for ( ArtifactVersion v : modsMissing . missingMods ) 
 + for ( MissingModsException . MissingModInfo info : missingModsVersions ) 
 { 
 + ArtifactVersion v = info . getAcceptedVersion ( ) ; 
 offset + = 10 ; 
 this . drawCenteredString ( this . fontRenderer , String . format ( " % s : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java b / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java 
 index 82a1190 . . 51d7a24 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import net . minecraft . client . resources . I18n ; 
 import net . minecraft . util . text . TextFormatting ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . MissingModsException ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . MultipleModsErrored ; 
 import net . minecraftforge . fml . common . WrongMinecraftVersionException ; 
 import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 @ @ - 51 , 12 + 52 , 12 @ @ public class GuiMultipleModsErrored extends GuiErrorBase 
 public void initGui ( ) 
 { 
 super . initGui ( ) ; 
 - int additionalSize = missingModsExceptions . isEmpty ( ) | | wrongMinecraftExceptions . isEmpty ( ) ? 20 : 55 ; 
 - for ( MissingModsException exception : missingModsExceptions ) 
 + int additionalSize = missingModsExceptions . isEmpty ( ) | | wrongMinecraftExceptions . isEmpty ( ) ? 20 : 55 ; 
 + for ( MissingModsException exception : missingModsExceptions ) 
 { 
 - additionalSize + = exception . missingMods . size ( ) * 10 ; 
 + additionalSize + = exception . getMissingModInfos ( ) . size ( ) * 10 ; 
 } 
 - list = new GuiList ( wrongMinecraftExceptions . size ( ) * 10 + missingModsExceptions . size ( ) * 15 + additionalSize ) ; 
 + list = new GuiList ( wrongMinecraftExceptions . size ( ) * 10 + missingModsExceptions . size ( ) * 15 + additionalSize ) ; 
 } 
 
 @ Override 
 @ @ - 139 , 26 + 140 , 50 @ @ public class GuiMultipleModsErrored extends GuiErrorBase 
 } 
 if ( ! missingModsExceptions . isEmpty ( ) ) 
 { 
 - renderer . drawString ( TextFormatting . UNDERLINE + I18n . format ( " fml . messages . mod . missing . dependencies . multiple " ) , this . left , offset , 0xFFFFFF ) ; 
 + renderer . drawString ( I18n . format ( " fml . messages . mod . missing . dependencies . multiple . issues " ) , this . left , offset , 0xFFFFFF ) ; 
 offset + = 15 ; 
 for ( MissingModsException exception : missingModsExceptions ) 
 { 
 - renderer . drawString ( I18n . format ( " fml . messages . mod . missing . dependencies . fix " , TextFormatting . BOLD + exception . getModName ( ) + TextFormatting . RESET ) , this . left , offset , 0xFFFFFF ) ; 
 - for ( ArtifactVersion v : exception . missingMods ) 
 + renderer . drawString ( exception . getModName ( ) + " : " , this . left , offset , 0xFFFFFF ) ; 
 + for ( MissingModsException . MissingModInfo versionInfo : exception . getMissingModInfos ( ) ) 
 { 
 - offset + = 10 ; 
 - if ( v instanceof DefaultArtifactVersion ) 
 + ArtifactVersion acceptedVersion = versionInfo . getAcceptedVersion ( ) ; 
 + String acceptedModId = acceptedVersion . getLabel ( ) ; 
 + ArtifactVersion currentVersion = versionInfo . getCurrentVersion ( ) ; 
 + String missingReason ; 
 + if ( currentVersion = = null ) 
 { 
 - DefaultArtifactVersion dav = ( DefaultArtifactVersion ) v ; 
 + missingReason = I18n . format ( " fml . messages . mod . missing . dependencies . missing " ) ; 
 + } 
 + else 
 + { 
 + missingReason = I18n . format ( " fml . messages . mod . missing . dependencies . you . have " , currentVersion . getVersionString ( ) ) ; 
 + } 
 + String acceptedModVersionString = acceptedVersion . getRangeString ( ) ; 
 + if ( acceptedVersion instanceof DefaultArtifactVersion ) 
 + { 
 + DefaultArtifactVersion dav = ( DefaultArtifactVersion ) acceptedVersion ; 
 if ( dav . getRange ( ) ! = null ) 
 { 
 - String message = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s " , v . getLabel ( ) , dav . getRange ( ) . toStringFriendly ( ) ) ; 
 - renderer . drawString ( message , this . left , offset , 0xEEEEEE ) ; 
 - continue ; 
 + acceptedModVersionString = dav . getRange ( ) . toStringFriendly ( ) ; 
 } 
 } 
 - renderer . drawString ( String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . left , offset , 0xEEEEEE ) ; 
 + ModContainer acceptedMod = Loader . instance ( ) . getIndexedModList ( ) . get ( acceptedModId ) ; 
 + String acceptedModName = acceptedMod ! = null ? acceptedMod . getName ( ) : acceptedModId ; 
 + String versionInfoText = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s ( % s ) " , acceptedModName , acceptedModVersionString , missingReason ) ; 
 + String message ; 
 + if ( versionInfo . isRequired ( ) ) 
 + { 
 + message = I18n . format ( " fml . messages . mod . missing . dependencies . requires " , versionInfoText ) ; 
 + } 
 + else 
 + { 
 + message = I18n . format ( " fml . messages . mod . missing . dependencies . compatible . with " , versionInfoText ) ; 
 + } 
 + offset + = 10 ; 
 + renderer . drawString ( message , this . left , offset , 0xEEEEEE ) ; 
 } 
 + 
 offset + = 15 ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 0d6cb7d . . 4617283 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 231 , 8 + 231 , 8 @ @ public class Loader 
 private void sortModList ( ) 
 { 
 FMLLog . log . trace ( " Verifying mod requirements are satisfied " ) ; 
 - List < WrongMinecraftVersionException > wrongMinecraftExceptions = new ArrayList < WrongMinecraftVersionException > ( ) ; 
 - List < MissingModsException > missingModsExceptions = new ArrayList < MissingModsException > ( ) ; 
 + List < WrongMinecraftVersionException > wrongMinecraftExceptions = new ArrayList < > ( ) ; 
 + List < MissingModsException > missingModsExceptions = new ArrayList < > ( ) ; 
 try 
 { 
 BiMap < String , ArtifactVersion > modVersions = HashBiMap . create ( ) ; 
 @ @ - 253 , 39 + 253 , 42 @ @ public class Loader 
 continue ; 
 } 
 Map < String , ArtifactVersion > names = Maps . uniqueIndex ( mod . getRequirements ( ) , ArtifactVersion : : getLabel ) ; 
 - Set < ArtifactVersion > versionMissingMods = Sets . newHashSet ( ) ; 
 
 Set < String > missingMods = Sets . difference ( names . keySet ( ) , modVersions . keySet ( ) ) ; 
 if ( ! missingMods . isEmpty ( ) ) 
 { 
 + MissingModsException missingModsException = new MissingModsException ( mod . getModId ( ) , mod . getName ( ) ) ; 
 FMLLog . log . fatal ( " The mod { } ( { } ) requires mods { } to be available " , mod . getModId ( ) , mod . getName ( ) , missingMods ) ; 
 for ( String modid : missingMods ) 
 { 
 - versionMissingMods . add ( names . get ( modid ) ) ; 
 + ArtifactVersion acceptedVersion = names . get ( modid ) ; 
 + ArtifactVersion currentVersion = modVersions . get ( modid ) ; 
 + boolean required = mod . getRequirements ( ) . contains ( acceptedVersion ) ; 
 + missingModsException . addMissingMod ( acceptedVersion , currentVersion , required ) ; 
 } 
 - MissingModsException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 - FMLLog . log . fatal ( ret . getMessage ( ) ) ; 
 - missingModsExceptions . add ( ret ) ; 
 + FMLLog . log . fatal ( missingModsException . getMessage ( ) ) ; 
 + missingModsExceptions . add ( missingModsException ) ; 
 continue ; 
 } 
 reqList . putAll ( mod . getModId ( ) , names . keySet ( ) ) ; 
 ImmutableList < ArtifactVersion > allDeps = ImmutableList . < ArtifactVersion > builder ( ) . addAll ( mod . getDependants ( ) ) . addAll ( mod . getDependencies ( ) ) . build ( ) ; 
 - for ( ArtifactVersion v : allDeps ) 
 + MissingModsException missingModsException = new MissingModsException ( mod . getModId ( ) , mod . getName ( ) ) ; 
 + for ( ArtifactVersion acceptedVersion : allDeps ) 
 { 
 - if ( modVersions . containsKey ( v . getLabel ( ) ) ) 
 + if ( modVersions . containsKey ( acceptedVersion . getLabel ( ) ) ) 
 { 
 - if ( ! v . containsVersion ( modVersions . get ( v . getLabel ( ) ) ) ) 
 + ArtifactVersion currentVersion = modVersions . get ( acceptedVersion . getLabel ( ) ) ; 
 + if ( ! acceptedVersion . containsVersion ( currentVersion ) ) 
 { 
 - versionMissingMods . add ( v ) ; 
 + boolean required = mod . getRequirements ( ) . contains ( acceptedVersion ) ; 
 + missingModsException . addMissingMod ( acceptedVersion , currentVersion , required ) ; 
 } 
 } 
 } 
 - if ( ! versionMissingMods . isEmpty ( ) ) 
 + if ( ! missingModsException . getMissingModInfos ( ) . isEmpty ( ) ) 
 { 
 - FMLLog . log . fatal ( " The mod { } ( { } ) requires mod versions { } to be available " , mod . getModId ( ) , mod . getName ( ) , versionMissingMods ) ; 
 - MissingModsException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 - FMLLog . log . fatal ( ret . toString ( ) ) ; 
 - missingModsExceptions . add ( ret ) ; 
 + FMLLog . log . fatal ( missingModsException . toString ( ) ) ; 
 + missingModsExceptions . add ( missingModsException ) ; 
 } 
 } 
 
 @ @ - 306 , 7 + 309 , 7 @ @ public class Loader 
 throw new MultipleModsErrored ( wrongMinecraftExceptions , missingModsExceptions ) ; 
 } 
 
 - reverseDependencies = Multimaps . invertFrom ( reqList , ArrayListMultimap . < String , String > create ( ) ) ; 
 + reverseDependencies = Multimaps . invertFrom ( reqList , ArrayListMultimap . create ( ) ) ; 
 ModSorter sorter = new ModSorter ( getActiveModList ( ) , namedMods ) ; 
 
 try 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / MissingModsException . java b / src / main / java / net / minecraftforge / fml / common / MissingModsException . java 
 index 4a555ea . . c70ee69 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / MissingModsException . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / MissingModsException . java 
 @ @ - 19 , 36 + 19 , 117 @ @ 
 
 package net . minecraftforge . fml . common ; 
 
 + import javax . annotation . Nullable ; 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . HashSet ; 
 + import java . util . List ; 
 import java . util . Set ; 
 + import java . util . stream . Collectors ; 
 
 + import com . google . common . base . Preconditions ; 
 import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 
 public class MissingModsException extends EnhancedRuntimeException 
 { 
 private static final long serialVersionUID = 1L ; 
 + private final String id ; 
 + private final String name ; 
 + / * * @ deprecated use { @ link # getMissingModInfos ( ) } * / 
 + @ Deprecated / / TODO remove in 1 . 13 
 public final Set < ArtifactVersion > missingMods ; 
 + private final List < MissingModInfo > missingModsInfos ; 
 private final String modName ; 
 
 + public MissingModsException ( String id , String name ) 
 + { 
 + this ( new HashSet < > ( ) , id , name ) ; 
 + } 
 + 
 + / * * 
 + * @ deprecated use { @ link # MissingModsException ( String , String ) } 
 + * / 
 + @ Deprecated / / TODO remove in 1 . 13 
 public MissingModsException ( Set < ArtifactVersion > missingMods , String id , String name ) 
 { 
 - super ( String . format ( " Mod % s ( % s ) requires % s " , id , name , missingMods ) ) ; 
 + this . id = id ; 
 + this . name = name ; 
 this . missingMods = missingMods ; 
 + this . missingModsInfos = new ArrayList < > ( ) ; 
 + for ( ArtifactVersion artifactVersion : missingMods ) 
 + { 
 + missingModsInfos . add ( new MissingModInfo ( artifactVersion , null , true ) ) ; 
 + } 
 this . modName = name ; 
 } 
 
 + @ Override 
 + public String getMessage ( ) 
 + { 
 + Set < ArtifactVersion > missingMods = missingModsInfos . stream ( ) . map ( MissingModInfo : : getAcceptedVersion ) . collect ( Collectors . toSet ( ) ) ; 
 + return String . format ( " Mod % s ( % s ) requires % s " , id , name , missingMods ) ; 
 + } 
 + 
 + public void addMissingMod ( ArtifactVersion acceptedVersion , @ Nullable ArtifactVersion currentVersion , boolean required ) 
 + { 
 + MissingModInfo missingModInfo = new MissingModInfo ( acceptedVersion , currentVersion , required ) ; 
 + this . missingModsInfos . add ( missingModInfo ) ; 
 + this . missingMods . add ( acceptedVersion ) ; 
 + } 
 + 
 public String getModName ( ) 
 { 
 return modName ; 
 } 
 
 + public List < MissingModInfo > getMissingModInfos ( ) 
 + { 
 + return Collections . unmodifiableList ( this . missingModsInfos ) ; 
 + } 
 + 
 @ Override 
 protected void printStackTrace ( WrappedPrintStream stream ) 
 { 
 stream . println ( " Missing Mods : " ) ; 
 - for ( ArtifactVersion v : missingMods ) 
 + for ( MissingModInfo info : this . missingModsInfos ) 
 { 
 - stream . println ( String . format ( " \ t % s : % s " , v . getLabel ( ) , v . getRangeString ( ) ) ) ; 
 + ArtifactVersion acceptedVersion = info . getAcceptedVersion ( ) ; 
 + ArtifactVersion currentVersion = info . getCurrentVersion ( ) ; 
 + String currentString = currentVersion ! = null ? currentVersion . getVersionString ( ) : " missing " ; 
 + stream . println ( String . format ( " \ t % s : need % s : have % s " , acceptedVersion . getVersionString ( ) , acceptedVersion . getRangeString ( ) , currentString ) ) ; 
 } 
 stream . println ( " " ) ; 
 } 
 + 
 + public static class MissingModInfo 
 + { 
 + private final ArtifactVersion acceptedVersion ; 
 + @ Nullable 
 + private final ArtifactVersion currentVersion ; 
 + private final boolean required ; 
 + 
 + private MissingModInfo ( ArtifactVersion acceptedVersion , @ Nullable ArtifactVersion currentVersion , boolean required ) 
 + { 
 + Preconditions . checkNotNull ( acceptedVersion , " acceptedVersion " ) ; 
 + this . acceptedVersion = acceptedVersion ; 
 + this . currentVersion = currentVersion ; 
 + this . required = required ; 
 + } 
 + 
 + @ Nullable 
 + public ArtifactVersion getCurrentVersion ( ) 
 + { 
 + return currentVersion ; 
 + } 
 + 
 + public ArtifactVersion getAcceptedVersion ( ) 
 + { 
 + return acceptedVersion ; 
 + } 
 + 
 + public boolean isRequired ( ) 
 + { 
 + return required ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java b / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java 
 index aee354f . . 470a9d2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java 
 @ @ - 21 , 13 + 21 , 26 @ @ package net . minecraftforge . fml . common ; 
 
 import java . util . List ; 
 
 - public class MultipleModsErrored extends RuntimeException 
 + public class MultipleModsErrored extends EnhancedRuntimeException 
 { 
 public final List < WrongMinecraftVersionException > wrongMinecraftExceptions ; 
 - public final List < MissingModsException > missingModsExceptions ; 
 + public final List < MissingModsException > missingModsExceptions ; 
 public MultipleModsErrored ( List < WrongMinecraftVersionException > wrongMinecraftExceptions , List < MissingModsException > missingModsExceptions ) 
 { 
 this . wrongMinecraftExceptions = wrongMinecraftExceptions ; 
 this . missingModsExceptions = missingModsExceptions ; 
 } 
 + 
 + @ Override 
 + protected void printStackTrace ( WrappedPrintStream stream ) 
 + { 
 + for ( WrongMinecraftVersionException wrongMinecraftVersionException : this . wrongMinecraftExceptions ) 
 + { 
 + wrongMinecraftVersionException . printStackTrace ( stream ) ; 
 + } 
 + for ( MissingModsException missingModsException : this . missingModsExceptions ) 
 + { 
 + missingModsException . printStackTrace ( stream ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java b / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java 
 index 1cfe6ff . . ec0d0e3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java 
 @ @ - 102 , 7 + 102 , 11 @ @ public class DefaultArtifactVersion implements ArtifactVersion 
 @ Override 
 public String toString ( ) 
 { 
 - return label = = null ? comparableVersion . toString ( ) : label + ( unbounded ? " " : " @ " + range ) ; 
 + if ( label = = null ) 
 + { 
 + return getVersionString ( ) ; 
 + } 
 + return label + ( unbounded ? " " : " @ " + range ) ; 
 } 
 
 public VersionRange getRange ( ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java 
 index 65c6150 . . 4f1ea56 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java 
 @ @ - 478 , 7 + 478 , 7 @ @ public class VersionRange 
 { 
 if ( recommendedVersion ! = null ) 
 { 
 - return recommendedVersion . toString ( ) ; 
 + return recommendedVersion . getVersionString ( ) ; 
 } 
 else 
 { 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 58efbf3 . . e55a016 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 203 , 8 + 203 , 14 @ @ item . forge . bucketFilled . name = % s Bucket 
 
 fml . messages . mod . missing . dependencies = % s is missing mods it depends on . 
 fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . 
 + fml . messages . mod . missing . dependencies . compatibility = You must include the right dependencies for % s : 
 + fml . messages . mod . missing . dependencies . missing = missing 
 + fml . messages . mod . missing . dependencies . compatible . with = Only compatible with % s 
 + fml . messages . mod . missing . dependencies . requires = Requires % s 
 + fml . messages . mod . missing . dependencies . you . have = you have % s 
 fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . 
 fml . messages . mod . missing . dependencies . multiple = Some mods are missing mods they depends on . 
 + fml . messages . mod . missing . dependencies . multiple . issues = You must include the right dependencies for the following mods : 
 fml . messages . mod . missing . multiple = There were % s errors loading Minecraft 
 fml . messages . mod . wrongminecraft = The mods listed below can ' t run in Minecraft version % s 
 fml . messages . mod . wrongminecraft . requirement = % s ( % s ) requires Minecraft % s

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 0c217da . . 11821d7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 96 , 6 + 96 , 7 @ @ import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderException ; 
 import net . minecraftforge . fml . common . MetadataCollection ; 
 import net . minecraftforge . fml . common . MissingModsException ; 
 + import net . minecraftforge . fml . common . MultipleModsErrored ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . ModMetadata ; 
 import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; 
 @ @ - 185 , 6 + 186 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private DuplicateModsFoundException dupesFound ; 
 
 + private MultipleModsErrored multipleModsErrored ; 
 + 
 private boolean serverShouldBeKilledQuietly ; 
 
 private List < IResourcePack > resourcePackList ; 
 @ @ - 253 , 6 + 256 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 FMLLog . log ( Level . ERROR , custom , " A custom exception was thrown by a mod , the game will now halt " ) ; 
 customError = custom ; 
 } 
 + catch ( MultipleModsErrored multiple ) 
 + { 
 + multipleModsErrored = multiple ; 
 + } 
 catch ( LoaderException le ) 
 { 
 haltGame ( " There was a severe problem during mod loading that has caused the game to fail " , le ) ; 
 @ @ - 333 , 7 + 340 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 * / 
 public void finishMinecraftLoading ( ) 
 { 
 - if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null ) 
 + if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null | | multipleModsErrored ! = null ) 
 { 
 SplashProgress . finish ( ) ; 
 return ; 
 @ @ - 441 , 6 + 448 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 showGuiScreen ( new GuiCustomModLoadingErrorScreen ( customError ) ) ; 
 } 
 + else if ( multipleModsErrored ! = null ) 
 + { 
 + showGuiScreen ( new GuiMultipleModsErrored ( multipleModsErrored ) ) ; 
 + } 
 else 
 { 
 logMissingTextureErrors ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiDupesFound . java b / src / main / java / net / minecraftforge / fml / client / GuiDupesFound . java 
 index f6620fc . . 9448ded 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiDupesFound . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiDupesFound . java 
 @ @ - 19 , 31 + 19 , 23 @ @ 
 
 package net . minecraftforge . fml . client ; 
 
 - import java . io . File ; 
 - import java . util . Map . Entry ; 
 - 
 - import net . minecraft . client . gui . GuiErrorScreen ; 
 import net . minecraftforge . fml . common . DuplicateModsFoundException ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 
 - public class GuiDupesFound extends GuiErrorScreen 
 + import java . io . File ; 
 + import java . util . Map . Entry ; 
 + 
 + public class GuiDupesFound extends GuiErrorBase 
 { 
 
 private DuplicateModsFoundException dupes ; 
 
 public GuiDupesFound ( DuplicateModsFoundException dupes ) 
 { 
 - super ( null , null ) ; 
 this . dupes = dupes ; 
 } 
 
 @ Override 
 - public void initGui ( ) 
 - { 
 - super . initGui ( ) ; 
 - this . buttonList . clear ( ) ; 
 - } 
 - @ Override 
 public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 { 
 this . drawDefaultBackground ( ) ; 
 @ @ - 59 , 5 + 51 , 6 @ @ public class GuiDupesFound extends GuiErrorScreen 
 offset + = 10 ; 
 this . drawCenteredString ( this . fontRendererObj , String . format ( " % s : % s " , mc . getKey ( ) . getModId ( ) , mc . getValue ( ) . getName ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 } 
 + super . drawScreen ( mouseX , mouseY , partialTicks ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiErrorBase . java b / src / main / java / net / minecraftforge / fml / client / GuiErrorBase . java 
 new file mode 100644 
 index 0000000 . . fe62fd2 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiErrorBase . java 
 @ @ - 0 , 0 + 1 , 92 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . client ; 
 + 
 + import net . minecraft . client . gui . GuiButton ; 
 + import net . minecraft . client . gui . GuiErrorScreen ; 
 + import net . minecraft . client . resources . I18n ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import org . apache . logging . log4j . Level ; 
 + 
 + import java . awt . * ; 
 + import java . io . File ; 
 + 
 + public class GuiErrorBase extends GuiErrorScreen 
 + { 
 + static final File minecraftDir = new File ( Loader . instance ( ) . getConfigDir ( ) . getParent ( ) ) ; 
 + static final File clientLog = new File ( minecraftDir , " logs / fml - client - latest . log " ) ; 
 + public GuiErrorBase ( ) 
 + { 
 + super ( null , null ) ; 
 + } 
 + 
 + private String translateOrDefault ( String translateKey , String alternative , Object . . . format ) 
 + { 
 + return I18n . hasKey ( translateKey ) ? I18n . format ( translateKey , format ) : String . format ( alternative , format ) ; / / When throwing a DuplicateModsException , the translation system does not work . . . 
 + } 
 + 
 + @ Override 
 + public void initGui ( ) 
 + { 
 + super . initGui ( ) ; 
 + this . buttonList . clear ( ) ; 
 + this . buttonList . add ( new GuiButton ( 10 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , translateOrDefault ( " fml . button . open . mods . folder " , " Open Mods Folder " ) ) ) ; 
 + String openFileText = translateOrDefault ( " fml . button . open . file " , " Open % s " , clientLog . getName ( ) ) ; 
 + this . buttonList . add ( new GuiButton ( 11 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , openFileText ) ) ; 
 + } 
 + 
 + @ Override 
 + protected void actionPerformed ( GuiButton button ) 
 + { 
 + if ( button . id = = 10 ) 
 + { 
 + try 
 + { 
 + File modsDir = new File ( minecraftDir , " mods " ) ; 
 + Desktop . getDesktop ( ) . open ( modsDir ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Problem opening mods folder " ) ; 
 + } 
 + } 
 + else if ( button . id = = 11 ) 
 + { 
 + try 
 + { 
 + Desktop . getDesktop ( ) . open ( clientLog ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Problem opening log file " + clientLog ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 + { 
 + for ( GuiButton button : buttonList ) 
 + { 
 + button . drawButton ( this . mc , mouseX , mouseY ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 index d21dfce . . b917f66 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 @ @ - 20 , 7 + 20 , 6 @ @ 
 package net . minecraftforge . fml . client ; 
 
 import net . minecraft . client . gui . GuiButton ; 
 - import net . minecraft . client . gui . GuiErrorScreen ; 
 import net . minecraft . client . resources . I18n ; 
 import net . minecraft . util . text . TextFormatting ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 @ @ - 32 , 40 + 31 , 40 @ @ import org . apache . logging . log4j . Level ; 
 
 import com . google . common . collect . Lists ; 
 
 - import java . awt . * ; 
 - import java . io . IOException ; 
 + import java . awt . Desktop ; 
 import java . net . URI ; 
 import java . util . List ; 
 
 - public class GuiJava8Error extends GuiErrorScreen 
 + public class GuiJava8Error extends GuiErrorBase 
 { 
 private Java8VersionException java8VersionException ; 
 public GuiJava8Error ( Java8VersionException java8VersionException ) 
 { 
 - super ( null , null ) ; 
 this . java8VersionException = java8VersionException ; 
 } 
 
 @ Override 
 public void initGui ( ) 
 { 
 - this . buttonList . clear ( ) ; 
 - this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; 
 + super . initGui ( ) ; 
 + this . buttonList . remove ( 1 ) ; 
 if ( java8VersionException . getMods ( ) . isEmpty ( ) ) 
 { 
 - this . buttonList . add ( new GuiButton ( 3 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; 
 - } 
 - else 
 - { 
 - this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " menu . quit " ) ) ) ; 
 + this . buttonList . remove ( 0 ) ; 
 + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; 
 } 
 + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; 
 } 
 
 @ Override 
 - protected void actionPerformed ( GuiButton button ) throws IOException 
 + protected void actionPerformed ( GuiButton button ) 
 { 
 if ( button . id = = 1 ) 
 { 
 + FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; 
 + } 
 + else if ( button . id = = 2 ) 
 + { 
 try 
 { 
 Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; 
 @ @ - 75 , 13 + 74 , 9 @ @ public class GuiJava8Error extends GuiErrorScreen 
 FMLLog . log ( Level . ERROR , e , " Problem launching browser " ) ; 
 } 
 } 
 - else if ( button . id = = 2 ) 
 - { 
 - FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; 
 - } 
 - else if ( button . id = = 3 ) 
 + else 
 { 
 - FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; 
 + super . actionPerformed ( button ) ; 
 } 
 } 
 
 @ @ - 135 , 13 + 130 , 7 @ @ public class GuiJava8Error extends GuiErrorScreen 
 this . drawString ( this . fontRendererObj , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; 
 offset + = this . fontRendererObj . FONT _ HEIGHT + 2 ; 
 } 
 - 
 - offset + = 15 ; 
 - } 
 - / / super . super 
 - for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) 
 - { 
 - ( ( GuiButton ) this . buttonList . get ( i ) ) . drawButton ( this . mc , mouseX , mouseY ) ; 
 } 
 + super . drawScreen ( mouseX , mouseY , partialTicks ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java 
 index 99e3337 . . d69264a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiModsMissing . java 
 @ @ - 19 , 72 + 19 , 22 @ @ 
 
 package net . minecraftforge . fml . client ; 
 
 - import java . awt . * ; 
 - import java . io . File ; 
 - import java . io . IOException ; 
 - 
 - import net . minecraft . client . gui . GuiButton ; 
 - import net . minecraft . client . gui . GuiErrorScreen ; 
 import net . minecraft . client . resources . I18n ; 
 import net . minecraft . util . text . TextFormatting ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 - import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . MissingModsException ; 
 import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 - import org . apache . logging . log4j . Level ; 
 
 - public class GuiModsMissing extends GuiErrorScreen 
 + public class GuiModsMissing extends GuiErrorBase 
 { 
 - private File minecraftDir = new File ( Loader . instance ( ) . getConfigDir ( ) . getParent ( ) ) ; 
 - private File clientLog = new File ( minecraftDir , " logs / fml - client - latest . log " ) ; 
 private MissingModsException modsMissing ; 
 
 public GuiModsMissing ( MissingModsException modsMissing ) 
 { 
 - super ( null , null ) ; 
 this . modsMissing = modsMissing ; 
 } 
 
 @ Override 
 - public void initGui ( ) 
 - { 
 - super . initGui ( ) ; 
 - this . buttonList . clear ( ) ; 
 - this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . open . mods . folder " ) ) ) ; 
 - String openFileText = I18n . format ( " fml . button . open . file " , clientLog . getName ( ) ) ; 
 - this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , openFileText ) ) ; 
 - } 
 - 
 - @ Override 
 - protected void actionPerformed ( GuiButton button ) throws IOException 
 - { 
 - if ( button . id = = 1 ) 
 - { 
 - try 
 - { 
 - File modsDir = new File ( minecraftDir , " mods " ) ; 
 - Desktop . getDesktop ( ) . open ( modsDir ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - FMLLog . log ( Level . ERROR , e , " Problem opening mods folder " ) ; 
 - } 
 - } 
 - else if ( button . id = = 2 ) 
 - { 
 - try 
 - { 
 - Desktop . getDesktop ( ) . open ( clientLog ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - FMLLog . log ( Level . ERROR , e , " Problem opening log file " + clientLog ) ; 
 - } 
 - } 
 - } 
 - 
 - @ Override 
 public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 { 
 this . drawDefaultBackground ( ) ; 
 @ @ - 108 , 15 + 58 , 11 @ @ public class GuiModsMissing extends GuiErrorScreen 
 continue ; 
 } 
 } 
 - this . drawCenteredString ( this . fontRendererObj , String . format ( " % s : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 + this . drawCenteredString ( this . fontRendererObj , String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 } 
 offset + = 20 ; 
 - String seeLogText = I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , clientLog . getName ( ) ) ; 
 + String seeLogText = I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , GuiErrorBase . clientLog . getName ( ) ) ; 
 this . drawCenteredString ( this . fontRendererObj , seeLogText , this . width / 2 , offset , 0xFFFFFF ) ; 
 - 
 - for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) 
 - { 
 - this . buttonList . get ( i ) . drawButton ( this . mc , mouseX , mouseY ) ; 
 - } 
 + super . drawScreen ( mouseX , mouseY , partialTicks ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java b / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java 
 new file mode 100644 
 index 0000000 . . dba9197 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiMultipleModsErrored . java 
 @ @ - 0 , 0 + 1 , 156 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . client ; 
 + 
 + import net . minecraft . client . gui . FontRenderer ; 
 + import net . minecraft . client . gui . GuiButton ; 
 + import net . minecraft . client . renderer . Tessellator ; 
 + import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . util . text . TextFormatting ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . MissingModsException ; 
 + import net . minecraftforge . fml . common . MultipleModsErrored ; 
 + import net . minecraftforge . fml . common . WrongMinecraftVersionException ; 
 + import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 + import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 + 
 + import java . util . List ; 
 + 
 + public class GuiMultipleModsErrored extends GuiErrorBase 
 + { 
 + private final List < WrongMinecraftVersionException > wrongMinecraftExceptions ; 
 + private final List < MissingModsException > missingModsExceptions ; 
 + private GuiList list ; 
 + 
 + public GuiMultipleModsErrored ( MultipleModsErrored exception ) 
 + { 
 + wrongMinecraftExceptions = exception . wrongMinecraftExceptions ; 
 + missingModsExceptions = exception . missingModsExceptions ; 
 + } 
 + 
 + @ Override 
 + public void initGui ( ) 
 + { 
 + super . initGui ( ) ; 
 + int additionalSize = missingModsExceptions . isEmpty ( ) | | wrongMinecraftExceptions . isEmpty ( ) ? 20 : 55 ; 
 + for ( MissingModsException exception : missingModsExceptions ) 
 + { 
 + additionalSize + = exception . missingMods . size ( ) * 10 ; 
 + } 
 + list = new GuiList ( wrongMinecraftExceptions . size ( ) * 10 + missingModsExceptions . size ( ) * 15 + additionalSize ) ; 
 + } 
 + 
 + @ Override 
 + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 + { 
 + this . drawDefaultBackground ( ) ; 
 + this . list . drawScreen ( mouseX , mouseY , partialTicks ) ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . missing . multiple " , missingModsExceptions . size ( ) + wrongMinecraftExceptions . size ( ) ) , this . width / 2 , 10 , 0xFFFFFF ) ; 
 + super . drawScreen ( mouseX , mouseY , partialTicks ) ; 
 + } 
 + 
 + @ Override 
 + public void actionPerformed ( GuiButton button ) 
 + { 
 + this . list . actionPerformed ( button ) ; 
 + super . actionPerformed ( button ) ; 
 + } 
 + 
 + private class GuiList extends GuiScrollingList 
 + { 
 + public GuiList ( int entryHeight ) 
 + { 
 + super ( GuiMultipleModsErrored . this . mc , 
 + GuiMultipleModsErrored . this . width - 20 , 
 + GuiMultipleModsErrored . this . height - 30 , 
 + 30 , GuiMultipleModsErrored . this . height - 50 , 
 + 10 , 
 + entryHeight , 
 + GuiMultipleModsErrored . this . width , 
 + GuiMultipleModsErrored . this . height ) ; 
 + } 
 + 
 + @ Override 
 + protected int getSize ( ) 
 + { 
 + return 1 ; 
 + } 
 + 
 + @ Override 
 + protected void elementClicked ( int index , boolean doubleClick ) { } 
 + 
 + @ Override 
 + protected boolean isSelected ( int index ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + protected void drawBackground ( ) 
 + { 
 + drawDefaultBackground ( ) ; 
 + } 
 + 
 + @ Override 
 + protected void drawSlot ( int slotIdx , int entryRight , int slotTop , int slotBuffer , Tessellator tess ) 
 + { 
 + int offset = slotTop ; 
 + FontRenderer renderer = GuiMultipleModsErrored . this . fontRendererObj ; 
 + if ( ! wrongMinecraftExceptions . isEmpty ( ) ) 
 + { 
 + renderer . drawString ( TextFormatting . UNDERLINE + I18n . format ( " fml . messages . mod . wrongminecraft " , Loader . instance ( ) . getMinecraftModContainer ( ) . getVersion ( ) ) , this . left , offset , 0xFFFFFF ) ; 
 + offset + = 15 ; 
 + for ( WrongMinecraftVersionException exception : wrongMinecraftExceptions ) 
 + { 
 + renderer . drawString ( I18n . format ( " fml . messages . mod . wrongminecraft . requirement " , TextFormatting . BOLD + exception . mod . getName ( ) + TextFormatting . RESET , exception . mod . getModId ( ) , exception . mod . acceptableMinecraftVersionRange ( ) . toStringFriendly ( ) ) , this . left , offset , 0xFFFFFF ) ; 
 + offset + = 10 ; 
 + } 
 + offset + = 5 ; 
 + renderer . drawString ( I18n . format ( " fml . messages . mod . wrongminecraft . fix . multiple " ) , this . left , offset , 0xFFFFFF ) ; 
 + offset + = 20 ; 
 + } 
 + if ( ! missingModsExceptions . isEmpty ( ) ) 
 + { 
 + renderer . drawString ( TextFormatting . UNDERLINE + I18n . format ( " fml . messages . mod . missing . dependencies . multiple " ) , this . left , offset , 0xFFFFFF ) ; 
 + offset + = 15 ; 
 + for ( MissingModsException exception : missingModsExceptions ) 
 + { 
 + renderer . drawString ( I18n . format ( " fml . messages . mod . missing . dependencies . fix " , TextFormatting . BOLD + exception . getModName ( ) + TextFormatting . RESET ) , this . left , offset , 0xFFFFFF ) ; 
 + for ( ArtifactVersion v : exception . missingMods ) 
 + { 
 + offset + = 10 ; 
 + if ( v instanceof DefaultArtifactVersion ) 
 + { 
 + DefaultArtifactVersion dav = ( DefaultArtifactVersion ) v ; 
 + if ( dav . getRange ( ) ! = null ) 
 + { 
 + String message = String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " % s " , v . getLabel ( ) , dav . getRange ( ) . toStringFriendly ( ) ) ; 
 + renderer . drawString ( message , this . left , offset , 0xEEEEEE ) ; 
 + continue ; 
 + } 
 + } 
 + renderer . drawString ( String . format ( TextFormatting . BOLD + " % s " + TextFormatting . RESET + " : % s " , v . getLabel ( ) , v . getRangeString ( ) ) , this . left , offset , 0xEEEEEE ) ; 
 + } 
 + offset + = 15 ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiScrollingList . java b / src / main / java / net / minecraftforge / fml / client / GuiScrollingList . java 
 index 64b1537 . . e1dc953 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiScrollingList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiScrollingList . java 
 @ @ - 19 , 9 + 19 , 6 @ @ 
 
 package net . minecraftforge . fml . client ; 
 
 - import java . io . IOException ; 
 - import java . util . List ; 
 - 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . gui . Gui ; 
 import net . minecraft . client . gui . GuiButton ; 
 @ @ - 30 , 10 + 27 , 12 @ @ import net . minecraft . client . renderer . GlStateManager ; 
 import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . client . renderer . VertexBuffer ; 
 import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 - 
 import org . lwjgl . input . Mouse ; 
 import org . lwjgl . opengl . GL11 ; 
 
 + import java . io . IOException ; 
 + import java . util . List ; 
 + 
 public abstract class GuiScrollingList 
 { 
 private final Minecraft client ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiWrongMinecraft . java b / src / main / java / net / minecraftforge / fml / client / GuiWrongMinecraft . java 
 index dae6547 . . d3d878c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiWrongMinecraft . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiWrongMinecraft . java 
 @ @ - 20 , 35 + 20 , 32 @ @ 
 package net . minecraftforge . fml . client ; 
 
 import net . minecraft . client . gui . GuiErrorScreen ; 
 + import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . util . text . TextFormatting ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . WrongMinecraftVersionException ; 
 
 - public class GuiWrongMinecraft extends GuiErrorScreen 
 + public class GuiWrongMinecraft extends GuiErrorBase 
 { 
 private WrongMinecraftVersionException wrongMC ; 
 + 
 public GuiWrongMinecraft ( WrongMinecraftVersionException wrongMC ) 
 { 
 - super ( null , null ) ; 
 this . wrongMC = wrongMC ; 
 } 
 - @ Override 
 - public void initGui ( ) 
 - { 
 - super . initGui ( ) ; 
 - this . buttonList . clear ( ) ; 
 - } 
 + 
 @ Override 
 public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 { 
 this . drawDefaultBackground ( ) ; 
 int offset = 75 ; 
 - this . drawCenteredString ( this . fontRendererObj , " Forge Mod Loader has found a problem with your minecraft installation " , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 10 ; 
 - this . drawCenteredString ( this . fontRendererObj , String . format ( " The mod listed below does not want to run in Minecraft version % s " , Loader . instance ( ) . getMinecraftModContainer ( ) . getVersion ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 5 ; 
 - offset + = 10 ; 
 - this . drawCenteredString ( this . fontRendererObj , String . format ( " % s ( % s ) wants Minecraft % s " , wrongMC . mod . getName ( ) , wrongMC . mod . getModId ( ) , wrongMC . mod . acceptableMinecraftVersionRange ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . wrongminecraft " , Loader . instance ( ) . getMinecraftModContainer ( ) . getVersion ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 15 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . wrongminecraft . requirement " , TextFormatting . BOLD + wrongMC . mod . getName ( ) + TextFormatting . RESET , wrongMC . mod . getModId ( ) , wrongMC . mod . acceptableMinecraftVersionRange ( ) . toStringFriendly ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 + offset + = 15 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . wrongminecraft . fix " , wrongMC . mod . getName ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 offset + = 20 ; 
 - this . drawCenteredString ( this . fontRendererObj , " The file ' fml - client - latest . log ' contains more information " , this . width / 2 , offset , 0xFFFFFF ) ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . mod . missing . dependencies . see . log " , GuiErrorBase . clientLog . getName ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + super . drawScreen ( mouseX , mouseY , partialTicks ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index aa52670 . . 9905a6a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 236 , 6 + 236 , 8 @ @ public class Loader 
 private void sortModList ( ) 
 { 
 FMLLog . finer ( " Verifying mod requirements are satisfied " ) ; 
 + List < WrongMinecraftVersionException > wrongMinecraftExceptions = new ArrayList < WrongMinecraftVersionException > ( ) ; 
 + List < MissingModsException > missingModsExceptions = new ArrayList < MissingModsException > ( ) ; 
 try 
 { 
 BiMap < String , ArtifactVersion > modVersions = HashBiMap . create ( ) ; 
 @ @ - 250 , 9 + 252 , 10 @ @ public class Loader 
 if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) 
 { 
 FMLLog . severe ( " The mod % s does not wish to run in Minecraft version % s . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; 
 - RuntimeException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; 
 + WrongMinecraftVersionException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; 
 FMLLog . severe ( ret . getMessage ( ) ) ; 
 - throw ret ; 
 + wrongMinecraftExceptions . add ( ret ) ; 
 + continue ; 
 } 
 Map < String , ArtifactVersion > names = Maps . uniqueIndex ( mod . getRequirements ( ) , new ArtifactVersionNameFunction ( ) ) ; 
 Set < ArtifactVersion > versionMissingMods = Sets . newHashSet ( ) ; 
 @ @ - 265 , 9 + 268 , 10 @ @ public class Loader 
 { 
 versionMissingMods . add ( names . get ( modid ) ) ; 
 } 
 - RuntimeException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 + MissingModsException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 FMLLog . severe ( ret . getMessage ( ) ) ; 
 - throw ret ; 
 + missingModsExceptions . add ( ret ) ; 
 + continue ; 
 } 
 reqList . putAll ( mod . getModId ( ) , names . keySet ( ) ) ; 
 ImmutableList < ArtifactVersion > allDeps = ImmutableList . < ArtifactVersion > builder ( ) . addAll ( mod . getDependants ( ) ) . addAll ( mod . getDependencies ( ) ) . build ( ) ; 
 @ @ - 284 , 13 + 288 , 28 @ @ public class Loader 
 if ( ! versionMissingMods . isEmpty ( ) ) 
 { 
 FMLLog . severe ( " The mod % s ( % s ) requires mod versions % s to be available " , mod . getModId ( ) , mod . getName ( ) , versionMissingMods ) ; 
 - RuntimeException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 + MissingModsException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 FMLLog . severe ( ret . toString ( ) ) ; 
 - throw ret ; 
 + missingModsExceptions . add ( ret ) ; 
 } 
 } 
 
 - FMLLog . finer ( " All mod requirements are satisfied " ) ; 
 + if ( wrongMinecraftExceptions . isEmpty ( ) & & missingModsExceptions . isEmpty ( ) ) 
 + { 
 + FMLLog . finer ( " All mod requirements are satisfied " ) ; 
 + } 
 + else if ( missingModsExceptions . size ( ) = = 1 & & wrongMinecraftExceptions . isEmpty ( ) ) 
 + { 
 + throw missingModsExceptions . get ( 0 ) ; 
 + } 
 + else if ( wrongMinecraftExceptions . size ( ) = = 1 & & missingModsExceptions . isEmpty ( ) ) 
 + { 
 + throw wrongMinecraftExceptions . get ( 0 ) ; 
 + } 
 + else 
 + { 
 + throw new MultipleModsErrored ( wrongMinecraftExceptions , missingModsExceptions ) ; 
 + } 
 
 reverseDependencies = Multimaps . invertFrom ( reqList , ArrayListMultimap . < String , String > create ( ) ) ; 
 ModSorter sorter = new ModSorter ( getActiveModList ( ) , namedMods ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java b / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java 
 new file mode 100644 
 index 0000000 . . aee354f 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / MultipleModsErrored . java 
 @ @ - 0 , 0 + 1 , 33 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . common ; 
 + 
 + import java . util . List ; 
 + 
 + public class MultipleModsErrored extends RuntimeException 
 + { 
 + public final List < WrongMinecraftVersionException > wrongMinecraftExceptions ; 
 + public final List < MissingModsException > missingModsExceptions ; 
 + public MultipleModsErrored ( List < WrongMinecraftVersionException > wrongMinecraftExceptions , List < MissingModsException > missingModsExceptions ) 
 + { 
 + this . wrongMinecraftExceptions = wrongMinecraftExceptions ; 
 + this . missingModsExceptions = missingModsExceptions ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 index 81fc3a2 . . aa0575c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 @ @ - 212 , 9 + 212 , 9 @ @ public class Restriction 
 } 
 else if ( getLowerBound ( ) ! = null & & getUpperBound ( ) ! = null ) 
 { 
 - if ( getLowerBound ( ) . equals ( getUpperBound ( ) ) ) 
 + if ( getLowerBound ( ) . getVersionString ( ) . equals ( getUpperBound ( ) . getVersionString ( ) ) ) 
 { 
 - return getLowerBound ( ) . toString ( ) ; 
 + return getLowerBound ( ) . getVersionString ( ) ; 
 } 
 else 
 { 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 3b40d1c . . 6447bd7 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 175 , 6 + 175 , 12 @ @ fml . messages . countbadandgood = % s of % s mods have this problem 
 fml . messages . mod . missing . dependencies = % s is missing mods it depends on . 
 fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . 
 fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . 
 + fml . messages . mod . missing . dependencies . multiple = Some mods are missing mods they depends on . 
 + fml . messages . mod . missing . multiple = There were % s errors loading Minecraft 
 + fml . messages . mod . wrongminecraft = The mods listed below can ' t run in Minecraft version % s 
 + fml . messages . mod . wrongminecraft . requirement = % s ( % s ) requires Minecraft % s 
 + fml . messages . mod . wrongminecraft . fix = Try to find an update or remove % s 
 + fml . messages . mod . wrongminecraft . fix . multiple = Try to find an update or remove these mods 
 fml . messages . version . restriction . any = any 
 fml . messages . version . restriction . lower . inclusive = % s or above 
 fml . messages . version . restriction . lower . exclusive = above % s
