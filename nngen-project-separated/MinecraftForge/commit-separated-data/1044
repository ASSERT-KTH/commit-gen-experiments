BLEU SCORE: 0.033582360261774316

TEST MSG: Updated default forge logo to animated gif ; reverted config folder resolution to Minecraft class due to Loader not being initialized at the point it ' s needed
GENERATED MSG: FML now sets a security manager ( FINALLY ! ) . It ' s primary purpose at this point is to catch

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> index 3a9eb86 . . 62e672a 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class SplashProgress <nl> <nl> public static void start ( ) <nl> { <nl> - File configFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " splash . properties " ) ; <nl> + File configFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , " config / splash . properties " ) ; <nl> FileReader r = null ; <nl> config = new Properties ( ) ; <nl> try <nl> @ @ - 126 , 8 + 126 , 8 @ @ public class SplashProgress <nl> / / Enable if we have the flag , and there ' s either no optifine , or optifine has added a key to the blackboard ( " optifine . ForgeSplashCompatible " ) <nl> / / Optifine authors - add this key to the blackboard if you feel your modifications are now compatible with this code . <nl> enabled = getBool ( " enabled " , true ) & & ( ( ! FMLClientHandler . instance ( ) . hasOptifine ( ) ) | | Launch . blackboard . containsKey ( " optifine . ForgeSplashCompatible " ) ) ; <nl> - rotate = getBool ( " rotate " , true ) ; <nl> - logoOffset = getInt ( " logoOffset " , 10 ) ; <nl> + rotate = getBool ( " rotate " , false ) ; <nl> + logoOffset = getInt ( " logoOffset " , 0 ) ; <nl> backgroundColor = getHex ( " background " , 0xFFFFFF ) ; <nl> fontColor = getHex ( " font " , 0x000000 ) ; <nl> barBorderColor = getHex ( " barBorder " , 0xC0C0C0 ) ; <nl> @ @ - 136 , 7 + 136 , 7 @ @ public class SplashProgress <nl> <nl> final ResourceLocation fontLoc = new ResourceLocation ( getString ( " fontTexture " , " textures / font / ascii . png " ) ) ; <nl> final ResourceLocation logoLoc = new ResourceLocation ( getString ( " logoTexture " , " textures / gui / title / mojang . png " ) ) ; <nl> - final ResourceLocation forgeLoc = new ResourceLocation ( getString ( " forgeTexture " , " fml : textures / gui / forge . png " ) ) ; <nl> + final ResourceLocation forgeLoc = new ResourceLocation ( getString ( " forgeTexture " , " fml : textures / gui / forge . gif " ) ) ; <nl> <nl> File miscPackFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , getString ( " resourcePackPath " , " resources " ) ) ; <nl> <nl> diff - - git a / fml / src / main / resources / assets / fml / textures / gui / forge . gif b / fml / src / main / resources / assets / fml / textures / gui / forge . gif <nl> new file mode 100644 <nl> index 0000000 . . b316837 <nl> Binary files / dev / null and b / fml / src / main / resources / assets / fml / textures / gui / forge . gif differ
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLTweaker . java b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLTweaker . java <nl> index 3131c91 . . ed0a5c1 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLTweaker . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLTweaker . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> <nl> import cpw . mods . fml . relauncher . FMLLaunchHandler ; <nl> + import cpw . mods . fml . relauncher . FMLSecurityManager ; <nl> <nl> public class FMLTweaker implements ITweaker { <nl> private File gameDir ; <nl> @ @ - 26 , 6 + 27 , 17 @ @ public class FMLTweaker implements ITweaker { <nl> private List < String > standaloneArgs ; <nl> private static URI jarLocation ; <nl> <nl> + public FMLTweaker ( ) <nl> + { <nl> + try <nl> + { <nl> + System . setSecurityManager ( new FMLSecurityManager ( ) ) ; <nl> + } <nl> + catch ( SecurityException se ) <nl> + { <nl> + throw new RuntimeException ( " FML was unable to install the security manager . The game will not start " , se ) ; <nl> + } <nl> + } <nl> @ SuppressWarnings ( " unchecked " ) <nl> @ Override <nl> public void acceptOptions ( List < String > args , File gameDir , File assetsDir , String profile ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / FMLSecurityManager . java b / fml / src / main / java / cpw / mods / fml / relauncher / FMLSecurityManager . java <nl> new file mode 100644 <nl> index 0000000 . . 4c7fba0 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / relauncher / FMLSecurityManager . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + package cpw . mods . fml . relauncher ; <nl> + <nl> + import java . security . Permission ; <nl> + <nl> + / * * <nl> + * A custom security manager stopping certain events from happening <nl> + * unexpectedly . <nl> + * <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public class FMLSecurityManager extends SecurityManager { <nl> + @ Override <nl> + public void checkPermission ( Permission perm ) <nl> + { <nl> + String permName = perm . getName ( ) ! = null ? perm . getName ( ) : " missing " ; <nl> + if ( permName . startsWith ( " exitVM " ) ) <nl> + { <nl> + String callingClass = getClassContext ( ) [ 4 ] . getName ( ) ; <nl> + / / FML is allowed to call system exit <nl> + if ( ! callingClass . startsWith ( " cpw . mods . fml . " ) ) <nl> + { <nl> + throw new ExitTrappedException ( ) ; <nl> + } <nl> + } <nl> + else if ( " setSecurityManager " . equals ( permName ) ) <nl> + { <nl> + throw new SecurityException ( " Cannot replace the FML security manager " ) ; <nl> + } <nl> + return ; <nl> + } <nl> + <nl> + public static class ExitTrappedException extends SecurityException { <nl> + private static final long serialVersionUID = 1L ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 index 3a9eb86 . . 62e672a 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 @ @ - 106 , 7 + 106 , 7 @ @ public class SplashProgress 
 
 public static void start ( ) 
 { 
 - File configFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " splash . properties " ) ; 
 + File configFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , " config / splash . properties " ) ; 
 FileReader r = null ; 
 config = new Properties ( ) ; 
 try 
 @ @ - 126 , 8 + 126 , 8 @ @ public class SplashProgress 
 / / Enable if we have the flag , and there ' s either no optifine , or optifine has added a key to the blackboard ( " optifine . ForgeSplashCompatible " ) 
 / / Optifine authors - add this key to the blackboard if you feel your modifications are now compatible with this code . 
 enabled = getBool ( " enabled " , true ) & & ( ( ! FMLClientHandler . instance ( ) . hasOptifine ( ) ) | | Launch . blackboard . containsKey ( " optifine . ForgeSplashCompatible " ) ) ; 
 - rotate = getBool ( " rotate " , true ) ; 
 - logoOffset = getInt ( " logoOffset " , 10 ) ; 
 + rotate = getBool ( " rotate " , false ) ; 
 + logoOffset = getInt ( " logoOffset " , 0 ) ; 
 backgroundColor = getHex ( " background " , 0xFFFFFF ) ; 
 fontColor = getHex ( " font " , 0x000000 ) ; 
 barBorderColor = getHex ( " barBorder " , 0xC0C0C0 ) ; 
 @ @ - 136 , 7 + 136 , 7 @ @ public class SplashProgress 
 
 final ResourceLocation fontLoc = new ResourceLocation ( getString ( " fontTexture " , " textures / font / ascii . png " ) ) ; 
 final ResourceLocation logoLoc = new ResourceLocation ( getString ( " logoTexture " , " textures / gui / title / mojang . png " ) ) ; 
 - final ResourceLocation forgeLoc = new ResourceLocation ( getString ( " forgeTexture " , " fml : textures / gui / forge . png " ) ) ; 
 + final ResourceLocation forgeLoc = new ResourceLocation ( getString ( " forgeTexture " , " fml : textures / gui / forge . gif " ) ) ; 
 
 File miscPackFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , getString ( " resourcePackPath " , " resources " ) ) ; 
 
 diff - - git a / fml / src / main / resources / assets / fml / textures / gui / forge . gif b / fml / src / main / resources / assets / fml / textures / gui / forge . gif 
 new file mode 100644 
 index 0000000 . . b316837 
 Binary files / dev / null and b / fml / src / main / resources / assets / fml / textures / gui / forge . gif differ

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLTweaker . java b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLTweaker . java 
 index 3131c91 . . ed0a5c1 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLTweaker . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLTweaker . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 
 import cpw . mods . fml . relauncher . FMLLaunchHandler ; 
 + import cpw . mods . fml . relauncher . FMLSecurityManager ; 
 
 public class FMLTweaker implements ITweaker { 
 private File gameDir ; 
 @ @ - 26 , 6 + 27 , 17 @ @ public class FMLTweaker implements ITweaker { 
 private List < String > standaloneArgs ; 
 private static URI jarLocation ; 
 
 + public FMLTweaker ( ) 
 + { 
 + try 
 + { 
 + System . setSecurityManager ( new FMLSecurityManager ( ) ) ; 
 + } 
 + catch ( SecurityException se ) 
 + { 
 + throw new RuntimeException ( " FML was unable to install the security manager . The game will not start " , se ) ; 
 + } 
 + } 
 @ SuppressWarnings ( " unchecked " ) 
 @ Override 
 public void acceptOptions ( List < String > args , File gameDir , File assetsDir , String profile ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / FMLSecurityManager . java b / fml / src / main / java / cpw / mods / fml / relauncher / FMLSecurityManager . java 
 new file mode 100644 
 index 0000000 . . 4c7fba0 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / relauncher / FMLSecurityManager . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package cpw . mods . fml . relauncher ; 
 + 
 + import java . security . Permission ; 
 + 
 + / * * 
 + * A custom security manager stopping certain events from happening 
 + * unexpectedly . 
 + * 
 + * @ author cpw 
 + * 
 + * / 
 + public class FMLSecurityManager extends SecurityManager { 
 + @ Override 
 + public void checkPermission ( Permission perm ) 
 + { 
 + String permName = perm . getName ( ) ! = null ? perm . getName ( ) : " missing " ; 
 + if ( permName . startsWith ( " exitVM " ) ) 
 + { 
 + String callingClass = getClassContext ( ) [ 4 ] . getName ( ) ; 
 + / / FML is allowed to call system exit 
 + if ( ! callingClass . startsWith ( " cpw . mods . fml . " ) ) 
 + { 
 + throw new ExitTrappedException ( ) ; 
 + } 
 + } 
 + else if ( " setSecurityManager " . equals ( permName ) ) 
 + { 
 + throw new SecurityException ( " Cannot replace the FML security manager " ) ; 
 + } 
 + return ; 
 + } 
 + 
 + public static class ExitTrappedException extends SecurityException { 
 + private static final long serialVersionUID = 1L ; 
 + } 
 + }
