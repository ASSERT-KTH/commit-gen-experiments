BLEU SCORE: 0.0167475178542289

TEST MSG: Fixed broken leaky caching of OBJ models .
GENERATED MSG: Add username cache for determining a player ' s last known username

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java <nl> index e32bff8 . . c11676b 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java <nl> @ @ - 11 , 6 + 11 , 7 @ @ import java . util . Iterator ; <nl> import java . util . LinkedHashSet ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Objects ; <nl> import java . util . Set ; <nl> import java . util . regex . Pattern ; <nl> <nl> @ @ - 54 , 9 + 55 , 13 @ @ import org . apache . commons . lang3 . tuple . Pair ; <nl> import com . google . common . base . Charsets ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . cache . CacheBuilder ; <nl> + import com . google . common . cache . CacheLoader ; <nl> + import com . google . common . cache . LoadingCache ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Maps ; <nl> <nl> @ SuppressWarnings ( " deprecation " ) <nl> public class OBJModel implements IRetexturableModel , IModelCustomData <nl> @ @ - 1142 , 7 + 1147 , 7 @ @ public class OBJModel implements IRetexturableModel , IModelCustomData <nl> <nl> public static class OBJState implements IModelState <nl> { <nl> - protected Map < String , Boolean > visibilityMap = new HashMap < String , Boolean > ( ) ; <nl> + protected Map < String , Boolean > visibilityMap = Maps . newHashMap ( ) ; <nl> public IModelState parent ; <nl> protected Operation operation = Operation . SET _ TRUE ; <nl> <nl> @ @ - 1236 , 6 + 1241 , 27 @ @ public class OBJModel implements IRetexturableModel , IModelCustomData <nl> return builder . toString ( ) ; <nl> } <nl> <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hash ( visibilityMap , parent , operation ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean equals ( Object obj ) <nl> + { <nl> + if ( this = = obj ) <nl> + return true ; <nl> + if ( obj = = null ) <nl> + return false ; <nl> + if ( getClass ( ) ! = obj . getClass ( ) ) <nl> + return false ; <nl> + OBJState other = ( OBJState ) obj ; <nl> + return Objects . equals ( visibilityMap , other . visibilityMap ) & & <nl> + Objects . equals ( parent , other . parent ) & & <nl> + operation = = other . operation ; <nl> + } <nl> + <nl> public enum Operation <nl> { <nl> SET _ TRUE , <nl> @ @ - 1546 , 15 + 1572 , 17 @ @ public class OBJModel implements IRetexturableModel , IModelCustomData <nl> } <nl> } <nl> <nl> - private final Map < IModelState , OBJBakedModel > cache = new HashMap < IModelState , OBJBakedModel > ( ) ; <nl> - <nl> - public OBJBakedModel getCachedModel ( IModelState state ) <nl> + private final LoadingCache < IModelState , OBJBakedModel > cache = CacheBuilder . newBuilder ( ) . maximumSize ( 20 ) . build ( new CacheLoader < IModelState , OBJBakedModel > ( ) <nl> { <nl> - if ( ! cache . containsKey ( state ) ) <nl> + public OBJBakedModel load ( IModelState state ) throws Exception <nl> { <nl> - cache . put ( state , new OBJBakedModel ( this . model , state , this . format , this . textures ) ) ; <nl> + return new OBJBakedModel ( model , state , format , textures ) ; <nl> } <nl> - return cache . get ( state ) ; <nl> + } ) ; <nl> + <nl> + public OBJBakedModel getCachedModel ( IModelState state ) <nl> + { <nl> + return cache . getUnchecked ( state ) ; <nl> } <nl> <nl> public OBJModel getModel ( )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 587e3f5 . . 526aae2 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 51 , 6 + 51 , 7 @ @ import cpw . mods . fml . common . event . FMLPostInitializationEvent ; <nl> import cpw . mods . fml . common . event . FMLPreInitializationEvent ; <nl> import cpw . mods . fml . common . event . FMLServerStartingEvent ; <nl> import cpw . mods . fml . common . eventhandler . SubscribeEvent ; <nl> + import cpw . mods . fml . common . gameevent . PlayerEvent ; <nl> import cpw . mods . fml . common . network . NetworkRegistry ; <nl> <nl> public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer <nl> @ @ - 252 , 6 + 253 , 12 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> } <nl> } <nl> } <nl> + <nl> + @ SubscribeEvent <nl> + public void playerLogin ( PlayerEvent . PlayerLoggedInEvent event ) <nl> + { <nl> + UsernameCache . setUsername ( event . player . getGameProfile ( ) . getId ( ) , event . player . getGameProfile ( ) . getName ( ) ) ; <nl> + } <nl> <nl> @ Override <nl> public boolean registerBus ( EventBus bus , LoadController controller ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> index 6d5ccc9 . . 1e2f015 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> @ @ - 53 , 6 + 53 , 8 @ @ public class MinecraftForge <nl> <nl> / / Force these classes to be defined , Should prevent derp error hiding . <nl> new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; <nl> + <nl> + UsernameCache . load ( ) ; <nl> } <nl> <nl> public static String getBrandingVersion ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / UsernameCache . java b / src / main / java / net / minecraftforge / common / UsernameCache . java <nl> new file mode 100644 <nl> index 0000000 . . aac029b <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / UsernameCache . java <nl> @ @ - 0 , 0 + 1 , 202 @ @ <nl> + package net . minecraftforge . common ; <nl> + <nl> + import static com . google . common . base . Preconditions . checkNotNull ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . lang . reflect . Type ; <nl> + import java . nio . charset . Charset ; <nl> + import java . util . Map ; <nl> + import java . util . UUID ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import com . google . common . base . Charsets ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Maps ; <nl> + import com . google . common . io . Files ; <nl> + import com . google . common . reflect . TypeToken ; <nl> + import com . google . gson . Gson ; <nl> + import com . google . gson . GsonBuilder ; <nl> + import com . google . gson . JsonSyntaxException ; <nl> + <nl> + import cpw . mods . fml . relauncher . FMLInjectionData ; <nl> + <nl> + / * * <nl> + * Caches player ' s last known usernames <nl> + * < p > <nl> + * Modders should use { @ link # getLastKnownUsername ( UUID ) } to determine a players <nl> + * last known username . < br > <nl> + * For convenience , { @ link # getMap ( ) } is provided to get an immutable copy of <nl> + * the caches underlying map . <nl> + * / <nl> + public final class UsernameCache { <nl> + <nl> + private static Map < UUID , String > map = Maps . newHashMap ( ) ; <nl> + <nl> + private static final Charset charset = Charsets . UTF _ 8 ; <nl> + <nl> + private static final File saveFile = new File ( / * The minecraft dir * / ( File ) FMLInjectionData . data ( ) [ 6 ] , " usernamecache . json " ) ; <nl> + private static final Gson gson = new GsonBuilder ( ) . setPrettyPrinting ( ) . create ( ) ; <nl> + <nl> + private static final Logger log = LogManager . getLogger ( UsernameCache . class ) ; <nl> + <nl> + private UsernameCache ( ) { } <nl> + <nl> + / * * <nl> + * Set a player ' s current username <nl> + * <nl> + * @ param uuid <nl> + * the player ' s { @ link java . util . UUID UUID } <nl> + * @ param username <nl> + * the player ' s username <nl> + * / <nl> + protected static void setUsername ( UUID uuid , String username ) <nl> + { <nl> + checkNotNull ( uuid ) ; <nl> + checkNotNull ( username ) ; <nl> + <nl> + if ( username . equals ( map . get ( uuid ) ) ) return ; <nl> + <nl> + map . put ( uuid , username ) ; <nl> + save ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Remove a player ' s username from the cache <nl> + * <nl> + * @ param uuid <nl> + * the player ' s { @ link java . util . UUID UUID } <nl> + * @ return if the cache contained the user <nl> + * / <nl> + protected static boolean removeUsername ( UUID uuid ) <nl> + { <nl> + checkNotNull ( uuid ) ; <nl> + <nl> + if ( map . remove ( uuid ) ! = null ) <nl> + { <nl> + save ( ) ; <nl> + return true ; <nl> + } <nl> + <nl> + return false ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the player ' s last known username <nl> + * < p > <nl> + * < b > May be < code > null < / code > < / b > <nl> + * <nl> + * @ param uuid <nl> + * the player ' s { @ link java . util . UUID UUID } <nl> + * @ return the player ' s last known username , or < code > null < / code > if the <nl> + * cache doesn ' t have a record of the last username <nl> + * / <nl> + @ Nullable <nl> + public static String getLastKnownUsername ( UUID uuid ) <nl> + { <nl> + checkNotNull ( uuid ) ; <nl> + return map . get ( uuid ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Check if the cache contains the given player ' s username <nl> + * <nl> + * @ param uuid <nl> + * the player ' s { @ link java . util . UUID UUID } <nl> + * @ return if the cache contains a username for the given player <nl> + * / <nl> + public static boolean containsUUID ( UUID uuid ) <nl> + { <nl> + checkNotNull ( uuid ) ; <nl> + return map . containsKey ( uuid ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get an immutable copy of the cache ' s underlying map <nl> + * <nl> + * @ return the map <nl> + * / <nl> + public static Map < UUID , String > getMap ( ) <nl> + { <nl> + return ImmutableMap . copyOf ( map ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Save the cache to file <nl> + * / <nl> + protected static void save ( ) <nl> + { <nl> + new SaveThread ( gson . toJson ( map ) ) . start ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Load the cache from file <nl> + * / <nl> + protected static void load ( ) <nl> + { <nl> + if ( ! saveFile . exists ( ) ) return ; <nl> + <nl> + try <nl> + { <nl> + <nl> + String json = Files . toString ( saveFile , charset ) ; <nl> + Type type = new TypeToken < Map < UUID , String > > ( ) { } . getType ( ) ; <nl> + <nl> + map = gson . fromJson ( json , type ) ; <nl> + } <nl> + catch ( JsonSyntaxException e ) <nl> + { <nl> + log . error ( " Could not parse username cache file as valid json , deleting file " , e ) ; <nl> + saveFile . delete ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + log . error ( " Failed to read username cache file from disk , deleting file " , e ) ; <nl> + saveFile . delete ( ) ; <nl> + } <nl> + finally <nl> + { <nl> + / / Can sometimes occur when the json file is malformed <nl> + if ( map = = null ) <nl> + { <nl> + map = Maps . newHashMap ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Used for saving the { @ link com . google . gson . Gson # toJson ( Object ) Gson } <nl> + * representation of the cache to disk <nl> + * / <nl> + private static class SaveThread extends Thread { <nl> + <nl> + / * * The data that will be saved to disk * / <nl> + private final String data ; <nl> + <nl> + public SaveThread ( String data ) <nl> + { <nl> + this . data = data ; <nl> + } <nl> + <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + try <nl> + { <nl> + / / Make sure we don ' t save when another thread is still saving <nl> + synchronized ( saveFile ) <nl> + { <nl> + Files . write ( data , saveFile , charset ) ; <nl> + } <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + log . error ( " Failed to save username cache to file ! " , e ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java 
 index e32bff8 . . c11676b 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java 
 @ @ - 11 , 6 + 11 , 7 @ @ import java . util . Iterator ; 
 import java . util . LinkedHashSet ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Objects ; 
 import java . util . Set ; 
 import java . util . regex . Pattern ; 
 
 @ @ - 54 , 9 + 55 , 13 @ @ import org . apache . commons . lang3 . tuple . Pair ; 
 import com . google . common . base . Charsets ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 + import com . google . common . cache . CacheBuilder ; 
 + import com . google . common . cache . CacheLoader ; 
 + import com . google . common . cache . LoadingCache ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Maps ; 
 
 @ SuppressWarnings ( " deprecation " ) 
 public class OBJModel implements IRetexturableModel , IModelCustomData 
 @ @ - 1142 , 7 + 1147 , 7 @ @ public class OBJModel implements IRetexturableModel , IModelCustomData 
 
 public static class OBJState implements IModelState 
 { 
 - protected Map < String , Boolean > visibilityMap = new HashMap < String , Boolean > ( ) ; 
 + protected Map < String , Boolean > visibilityMap = Maps . newHashMap ( ) ; 
 public IModelState parent ; 
 protected Operation operation = Operation . SET _ TRUE ; 
 
 @ @ - 1236 , 6 + 1241 , 27 @ @ public class OBJModel implements IRetexturableModel , IModelCustomData 
 return builder . toString ( ) ; 
 } 
 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hash ( visibilityMap , parent , operation ) ; 
 + } 
 + 
 + @ Override 
 + public boolean equals ( Object obj ) 
 + { 
 + if ( this = = obj ) 
 + return true ; 
 + if ( obj = = null ) 
 + return false ; 
 + if ( getClass ( ) ! = obj . getClass ( ) ) 
 + return false ; 
 + OBJState other = ( OBJState ) obj ; 
 + return Objects . equals ( visibilityMap , other . visibilityMap ) & & 
 + Objects . equals ( parent , other . parent ) & & 
 + operation = = other . operation ; 
 + } 
 + 
 public enum Operation 
 { 
 SET _ TRUE , 
 @ @ - 1546 , 15 + 1572 , 17 @ @ public class OBJModel implements IRetexturableModel , IModelCustomData 
 } 
 } 
 
 - private final Map < IModelState , OBJBakedModel > cache = new HashMap < IModelState , OBJBakedModel > ( ) ; 
 - 
 - public OBJBakedModel getCachedModel ( IModelState state ) 
 + private final LoadingCache < IModelState , OBJBakedModel > cache = CacheBuilder . newBuilder ( ) . maximumSize ( 20 ) . build ( new CacheLoader < IModelState , OBJBakedModel > ( ) 
 { 
 - if ( ! cache . containsKey ( state ) ) 
 + public OBJBakedModel load ( IModelState state ) throws Exception 
 { 
 - cache . put ( state , new OBJBakedModel ( this . model , state , this . format , this . textures ) ) ; 
 + return new OBJBakedModel ( model , state , format , textures ) ; 
 } 
 - return cache . get ( state ) ; 
 + } ) ; 
 + 
 + public OBJBakedModel getCachedModel ( IModelState state ) 
 + { 
 + return cache . getUnchecked ( state ) ; 
 } 
 
 public OBJModel getModel ( )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 587e3f5 . . 526aae2 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 51 , 6 + 51 , 7 @ @ import cpw . mods . fml . common . event . FMLPostInitializationEvent ; 
 import cpw . mods . fml . common . event . FMLPreInitializationEvent ; 
 import cpw . mods . fml . common . event . FMLServerStartingEvent ; 
 import cpw . mods . fml . common . eventhandler . SubscribeEvent ; 
 + import cpw . mods . fml . common . gameevent . PlayerEvent ; 
 import cpw . mods . fml . common . network . NetworkRegistry ; 
 
 public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer 
 @ @ - 252 , 6 + 253 , 12 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 } 
 } 
 } 
 + 
 + @ SubscribeEvent 
 + public void playerLogin ( PlayerEvent . PlayerLoggedInEvent event ) 
 + { 
 + UsernameCache . setUsername ( event . player . getGameProfile ( ) . getId ( ) , event . player . getGameProfile ( ) . getName ( ) ) ; 
 + } 
 
 @ Override 
 public boolean registerBus ( EventBus bus , LoadController controller ) 
 diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 index 6d5ccc9 . . 1e2f015 100644 
 - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 @ @ - 53 , 6 + 53 , 8 @ @ public class MinecraftForge 
 
 / / Force these classes to be defined , Should prevent derp error hiding . 
 new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; 
 + 
 + UsernameCache . load ( ) ; 
 } 
 
 public static String getBrandingVersion ( ) 
 diff - - git a / src / main / java / net / minecraftforge / common / UsernameCache . java b / src / main / java / net / minecraftforge / common / UsernameCache . java 
 new file mode 100644 
 index 0000000 . . aac029b 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / UsernameCache . java 
 @ @ - 0 , 0 + 1 , 202 @ @ 
 + package net . minecraftforge . common ; 
 + 
 + import static com . google . common . base . Preconditions . checkNotNull ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . lang . reflect . Type ; 
 + import java . nio . charset . Charset ; 
 + import java . util . Map ; 
 + import java . util . UUID ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import com . google . common . base . Charsets ; 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Maps ; 
 + import com . google . common . io . Files ; 
 + import com . google . common . reflect . TypeToken ; 
 + import com . google . gson . Gson ; 
 + import com . google . gson . GsonBuilder ; 
 + import com . google . gson . JsonSyntaxException ; 
 + 
 + import cpw . mods . fml . relauncher . FMLInjectionData ; 
 + 
 + / * * 
 + * Caches player ' s last known usernames 
 + * < p > 
 + * Modders should use { @ link # getLastKnownUsername ( UUID ) } to determine a players 
 + * last known username . < br > 
 + * For convenience , { @ link # getMap ( ) } is provided to get an immutable copy of 
 + * the caches underlying map . 
 + * / 
 + public final class UsernameCache { 
 + 
 + private static Map < UUID , String > map = Maps . newHashMap ( ) ; 
 + 
 + private static final Charset charset = Charsets . UTF _ 8 ; 
 + 
 + private static final File saveFile = new File ( / * The minecraft dir * / ( File ) FMLInjectionData . data ( ) [ 6 ] , " usernamecache . json " ) ; 
 + private static final Gson gson = new GsonBuilder ( ) . setPrettyPrinting ( ) . create ( ) ; 
 + 
 + private static final Logger log = LogManager . getLogger ( UsernameCache . class ) ; 
 + 
 + private UsernameCache ( ) { } 
 + 
 + / * * 
 + * Set a player ' s current username 
 + * 
 + * @ param uuid 
 + * the player ' s { @ link java . util . UUID UUID } 
 + * @ param username 
 + * the player ' s username 
 + * / 
 + protected static void setUsername ( UUID uuid , String username ) 
 + { 
 + checkNotNull ( uuid ) ; 
 + checkNotNull ( username ) ; 
 + 
 + if ( username . equals ( map . get ( uuid ) ) ) return ; 
 + 
 + map . put ( uuid , username ) ; 
 + save ( ) ; 
 + } 
 + 
 + / * * 
 + * Remove a player ' s username from the cache 
 + * 
 + * @ param uuid 
 + * the player ' s { @ link java . util . UUID UUID } 
 + * @ return if the cache contained the user 
 + * / 
 + protected static boolean removeUsername ( UUID uuid ) 
 + { 
 + checkNotNull ( uuid ) ; 
 + 
 + if ( map . remove ( uuid ) ! = null ) 
 + { 
 + save ( ) ; 
 + return true ; 
 + } 
 + 
 + return false ; 
 + } 
 + 
 + / * * 
 + * Get the player ' s last known username 
 + * < p > 
 + * < b > May be < code > null < / code > < / b > 
 + * 
 + * @ param uuid 
 + * the player ' s { @ link java . util . UUID UUID } 
 + * @ return the player ' s last known username , or < code > null < / code > if the 
 + * cache doesn ' t have a record of the last username 
 + * / 
 + @ Nullable 
 + public static String getLastKnownUsername ( UUID uuid ) 
 + { 
 + checkNotNull ( uuid ) ; 
 + return map . get ( uuid ) ; 
 + } 
 + 
 + / * * 
 + * Check if the cache contains the given player ' s username 
 + * 
 + * @ param uuid 
 + * the player ' s { @ link java . util . UUID UUID } 
 + * @ return if the cache contains a username for the given player 
 + * / 
 + public static boolean containsUUID ( UUID uuid ) 
 + { 
 + checkNotNull ( uuid ) ; 
 + return map . containsKey ( uuid ) ; 
 + } 
 + 
 + / * * 
 + * Get an immutable copy of the cache ' s underlying map 
 + * 
 + * @ return the map 
 + * / 
 + public static Map < UUID , String > getMap ( ) 
 + { 
 + return ImmutableMap . copyOf ( map ) ; 
 + } 
 + 
 + / * * 
 + * Save the cache to file 
 + * / 
 + protected static void save ( ) 
 + { 
 + new SaveThread ( gson . toJson ( map ) ) . start ( ) ; 
 + } 
 + 
 + / * * 
 + * Load the cache from file 
 + * / 
 + protected static void load ( ) 
 + { 
 + if ( ! saveFile . exists ( ) ) return ; 
 + 
 + try 
 + { 
 + 
 + String json = Files . toString ( saveFile , charset ) ; 
 + Type type = new TypeToken < Map < UUID , String > > ( ) { } . getType ( ) ; 
 + 
 + map = gson . fromJson ( json , type ) ; 
 + } 
 + catch ( JsonSyntaxException e ) 
 + { 
 + log . error ( " Could not parse username cache file as valid json , deleting file " , e ) ; 
 + saveFile . delete ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + log . error ( " Failed to read username cache file from disk , deleting file " , e ) ; 
 + saveFile . delete ( ) ; 
 + } 
 + finally 
 + { 
 + / / Can sometimes occur when the json file is malformed 
 + if ( map = = null ) 
 + { 
 + map = Maps . newHashMap ( ) ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Used for saving the { @ link com . google . gson . Gson # toJson ( Object ) Gson } 
 + * representation of the cache to disk 
 + * / 
 + private static class SaveThread extends Thread { 
 + 
 + / * * The data that will be saved to disk * / 
 + private final String data ; 
 + 
 + public SaveThread ( String data ) 
 + { 
 + this . data = data ; 
 + } 
 + 
 + @ Override 
 + public void run ( ) 
 + { 
 + try 
 + { 
 + / / Make sure we don ' t save when another thread is still saving 
 + synchronized ( saveFile ) 
 + { 
 + Files . write ( data , saveFile , charset ) ; 
 + } 
 + } 
 + catch ( IOException e ) 
 + { 
 + log . error ( " Failed to save username cache to file ! " , e ) ; 
 + } 
 + } 
 + } 
 + } 
 \ No newline at end of file
