BLEU SCORE: 0.020315766105349124

TEST MSG: NetworkDispatcher / FMLProxyPacket 41 more errors cleaned .
GENERATED MSG: Add in a simple ( ish ) event driven network handling system . Register using newEventDrivenChannel

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> index a88abe4 . . e99d597 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> @ @ - 27 , 12 + 27 , 12 @ @ import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . Packet ; <nl> import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . network . play . INetHandlerPlayClient ; <nl> - import net . minecraft . network . play . client . C17PacketCustomPayload ; <nl> - import net . minecraft . network . play . server . S01PacketJoinGame ; <nl> - import net . minecraft . network . play . server . S3FPacketCustomPayload ; <nl> - import net . minecraft . network . play . server . S40PacketDisconnect ; <nl> - import net . minecraft . server . management . ServerConfigurationManager ; <nl> - import net . minecraft . util . TextComponentString ; <nl> + import net . minecraft . network . play . client . CPacketCustomPayload ; <nl> + import net . minecraft . network . play . server . SPacketJoinGame ; <nl> + import net . minecraft . network . play . server . SPacketCustomPayload ; <nl> + import net . minecraft . network . play . server . SPacketDisconnect ; <nl> + import net . minecraft . server . management . PlayerList ; <nl> + import net . minecraft . util . text . TextComponentString ; <nl> import net . minecraftforge . common . DimensionManager ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> @ @ - 73 , 7 + 73 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> return net ; <nl> } <nl> <nl> - public static NetworkDispatcher allocAndSet ( NetworkManager manager , ServerConfigurationManager scm ) <nl> + public static NetworkDispatcher allocAndSet ( NetworkManager manager , PlayerList scm ) <nl> { <nl> NetworkDispatcher net = new NetworkDispatcher ( manager , scm ) ; <nl> manager . channel ( ) . attr ( FML _ DISPATCHER ) . getAndSet ( net ) ; <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> public static final AttributeKey < Boolean > IS _ LOCAL = AttributeKey . valueOf ( " fml : isLocal " ) ; <nl> public static final AttributeKey < PersistentRegistryManager . GameDataSnapshot > FML _ GAMEDATA _ SNAPSHOT = AttributeKey . valueOf ( " fml : gameDataSnapshot " ) ; <nl> public final NetworkManager manager ; <nl> - private final ServerConfigurationManager scm ; <nl> + private final PlayerList scm ; <nl> private EntityPlayerMP player ; <nl> private ConnectionState state ; <nl> private ConnectionType connectionType ; <nl> @ @ - 110 , 7 + 110 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> PacketLoggingHandler . register ( manager ) ; <nl> } <nl> <nl> - public NetworkDispatcher ( NetworkManager manager , ServerConfigurationManager scm ) <nl> + public NetworkDispatcher ( NetworkManager manager , PlayerList scm ) <nl> { <nl> super ( Packet . class , false ) ; <nl> this . manager = manager ; <nl> @ @ - 206 , 7 + 206 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> int dimension = playerNBT . getInteger ( " Dimension " ) ; <nl> if ( DimensionManager . isDimensionRegistered ( dimension ) ) <nl> { <nl> - 	 return dimension ; <nl> + return dimension ; <nl> } <nl> } <nl> return 0 ; <nl> @ @ - 243 , 13 + 243 , 13 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> protected void channelRead0 ( ChannelHandlerContext ctx , Packet msg ) throws Exception <nl> { <nl> boolean handled = false ; <nl> - if ( msg instanceof C17PacketCustomPayload ) <nl> + if ( msg instanceof CPacketCustomPayload ) <nl> { <nl> - handled = handleServerSideCustomPacket ( ( C17PacketCustomPayload ) msg , ctx ) ; <nl> + handled = handleServerSideCustomPacket ( ( CPacketCustomPayload ) msg , ctx ) ; <nl> } <nl> - else if ( msg instanceof S3FPacketCustomPayload ) <nl> + else if ( msg instanceof SPacketCustomPayload ) <nl> { <nl> - handled = handleClientSideCustomPacket ( ( S3FPacketCustomPayload ) msg , ctx ) ; <nl> + handled = handleClientSideCustomPacket ( ( SPacketCustomPayload ) msg , ctx ) ; <nl> } <nl> else if ( state ! = ConnectionState . CONNECTED & & state ! = ConnectionState . HANDSHAKECOMPLETE ) <nl> { <nl> @ @ - 263 , 7 + 263 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> <nl> private boolean handleVanilla ( Packet < ? > msg ) <nl> { <nl> - if ( state = = ConnectionState . AWAITING _ HANDSHAKE & & msg instanceof S01PacketJoinGame ) <nl> + if ( state = = ConnectionState . AWAITING _ HANDSHAKE & & msg instanceof SPacketJoinGame ) <nl> { <nl> handshakeChannel . pipeline ( ) . fireUserEventTriggered ( msg ) ; <nl> } <nl> @ @ - 304 , 7 + 304 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> kickWithMessage ( " This is modded . No modded response received . Bye ! " ) ; <nl> } <nl> @ SuppressWarnings ( " unchecked " ) <nl> - 	 private void kickWithMessage ( String message ) <nl> + private void kickWithMessage ( String message ) <nl> { <nl> final TextComponentString TextComponentString = new TextComponentString ( message ) ; <nl> if ( side = = Side . CLIENT ) <nl> @ @ - 313 , 7 + 313 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> } <nl> else <nl> { <nl> - manager . sendPacket ( new S40PacketDisconnect ( TextComponentString ) , new GenericFutureListener < Future < ? super Void > > ( ) <nl> + manager . sendPacket ( new SPacketDisconnect ( TextComponentString ) , new GenericFutureListener < Future < ? super Void > > ( ) <nl> { <nl> @ Override <nl> public void operationComplete ( Future < ? super Void > result ) <nl> @ @ - 326 , 7 + 326 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> } <nl> <nl> private MultiPartCustomPayload multipart = null ; <nl> - private boolean handleClientSideCustomPacket ( S3FPacketCustomPayload msg , ChannelHandlerContext context ) <nl> + private boolean handleClientSideCustomPacket ( SPacketCustomPayload msg , ChannelHandlerContext context ) <nl> { <nl> String channelName = msg . getChannelName ( ) ; <nl> if ( " FML | MP " . equals ( channelName ) ) <nl> @ @ - 389 , 7 + 389 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> return false ; <nl> } <nl> <nl> - private boolean handleServerSideCustomPacket ( C17PacketCustomPayload msg , ChannelHandlerContext context ) <nl> + private boolean handleServerSideCustomPacket ( CPacketCustomPayload msg , ChannelHandlerContext context ) <nl> { <nl> if ( state = = ConnectionState . AWAITING _ HANDSHAKE ) <nl> { <nl> @ @ - 457 , 11 + 457 , 11 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> { <nl> if ( side = = Side . CLIENT ) <nl> { <nl> - 	 MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ClientDisconnectionFromServerEvent ( manager ) ) ; <nl> + MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ClientDisconnectionFromServerEvent ( manager ) ) ; <nl> } <nl> else <nl> { <nl> - 	 MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ServerDisconnectionFromClientEvent ( manager ) ) ; <nl> + MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ServerDisconnectionFromClientEvent ( manager ) ) ; <nl> } <nl> cleanAttributes ( ctx ) ; <nl> ctx . disconnect ( promise ) ; <nl> @ @ - 476 , 7 + 476 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> } <nl> else <nl> { <nl> - 	 MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ServerDisconnectionFromClientEvent ( manager ) ) ; <nl> + MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ServerDisconnectionFromClientEvent ( manager ) ) ; <nl> } <nl> cleanAttributes ( ctx ) ; <nl> ctx . close ( promise ) ; <nl> @ @ - 582 , 12 + 582 , 12 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> FMLLog . fine ( " Received override dimension % d " , overrideDim ) ; <nl> } <nl> <nl> - public int getOverrideDimension ( S01PacketJoinGame packetIn ) { <nl> + public int getOverrideDimension ( SPacketJoinGame packetIn ) { <nl> FMLLog . fine ( " Overriding dimension : using % d " , this . overrideLoginDim ) ; <nl> return this . overrideLoginDim ! = 0 ? this . overrideLoginDim : packetIn . getDimension ( ) ; <nl> } <nl> <nl> - private class MultiPartCustomPayload extends S3FPacketCustomPayload <nl> + private class MultiPartCustomPayload extends SPacketCustomPayload <nl> { <nl> private String channel ; <nl> private byte [ ] data ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java <nl> index 66a9cd3 . . b05b8b1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java <nl> @ @ - 13 , 8 + 13 , 8 @ @ import net . minecraft . network . Packet ; <nl> import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . network . play . INetHandlerPlayClient ; <nl> import net . minecraft . network . play . INetHandlerPlayServer ; <nl> - import net . minecraft . network . play . client . C17PacketCustomPayload ; <nl> - import net . minecraft . network . play . server . S3FPacketCustomPayload ; <nl> + import net . minecraft . network . play . client . CPacketCustomPayload ; <nl> + import net . minecraft . network . play . server . SPacketCustomPayload ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . network . FMLNetworkException ; <nl> import net . minecraftforge . fml . common . network . NetworkRegistry ; <nl> @ @ - 39 , 13 + 39 , 13 @ @ public class FMLProxyPacket implements Packet < INetHandler > { <nl> private static Multiset < String > badPackets = ConcurrentHashMultiset . create ( ) ; <nl> private static int packetCountWarning = Integers . parseInt ( System . getProperty ( " fml . badPacketCounter " , " 100 " ) , 100 ) ; <nl> <nl> - public FMLProxyPacket ( S3FPacketCustomPayload original ) <nl> + public FMLProxyPacket ( SPacketCustomPayload original ) <nl> { <nl> this ( original . getBufferData ( ) , original . getChannelName ( ) ) ; <nl> this . target = Side . CLIENT ; <nl> } <nl> <nl> - public FMLProxyPacket ( C17PacketCustomPayload original ) <nl> + public FMLProxyPacket ( CPacketCustomPayload original ) <nl> { <nl> this ( original . getBufferData ( ) , original . getChannelName ( ) ) ; <nl> this . target = Side . SERVER ; <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class FMLProxyPacket implements Packet < INetHandler > { <nl> } <nl> public Packet < INetHandlerPlayServer > toC17Packet ( ) <nl> { <nl> - return new C17PacketCustomPayload ( channel , payload ) ; <nl> + return new CPacketCustomPayload ( channel , payload ) ; <nl> } <nl> <nl> static final int PART _ SIZE = 0x1000000 - 0x50 ; / / Make it a constant so that it gets inlined below . <nl> @ @ - 133 , 7 + 133 , 7 @ @ public class FMLProxyPacket implements Packet < INetHandler > { <nl> <nl> if ( data . length < PART _ SIZE ) <nl> { <nl> - ret . add ( new S3FPacketCustomPayload ( channel , new PacketBuffer ( payload . duplicate ( ) ) ) ) ; <nl> + ret . add ( new SPacketCustomPayload ( channel , new PacketBuffer ( payload . duplicate ( ) ) ) ) ; <nl> } <nl> else <nl> { <nl> @ @ - 146 , 7 + 146 , 7 @ @ public class FMLProxyPacket implements Packet < INetHandler > { <nl> preamble . writeString ( channel ) ; <nl> preamble . writeByte ( parts ) ; <nl> preamble . writeInt ( data . length ) ; <nl> - ret . add ( new S3FPacketCustomPayload ( " FML | MP " , preamble ) ) ; <nl> + ret . add ( new SPacketCustomPayload ( " FML | MP " , preamble ) ) ; <nl> <nl> int offset = 0 ; <nl> for ( int x = 0 ; x < parts ; x + + ) <nl> @ @ - 156 , 7 + 156 , 7 @ @ public class FMLProxyPacket implements Packet < INetHandler > { <nl> tmp [ 0 ] = ( byte ) ( x & 0xFF ) ; <nl> System . arraycopy ( data , offset , tmp , 1 , tmp . length - 1 ) ; <nl> offset + = tmp . length - 1 ; <nl> - ret . add ( new S3FPacketCustomPayload ( " FML | MP " , new PacketBuffer ( Unpooled . wrappedBuffer ( tmp ) ) ) ) ; <nl> + ret . add ( new SPacketCustomPayload ( " FML | MP " , new PacketBuffer ( Unpooled . wrappedBuffer ( tmp ) ) ) ) ; <nl> } <nl> } <nl> return ret ;
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLEventChannel . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLEventChannel . java <nl> new file mode 100644 <nl> index 0000000 . . 7e52678 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLEventChannel . java <nl> @ @ - 0 , 0 + 1 , 88 @ @ <nl> + package cpw . mods . fml . common . network ; <nl> + <nl> + import io . netty . channel . ChannelHandlerContext ; <nl> + import java . util . EnumMap ; <nl> + import net . minecraft . client . network . NetHandlerPlayClient ; <nl> + import net . minecraft . entity . player . EntityPlayerMP ; <nl> + import net . minecraft . network . NetHandlerPlayServer ; <nl> + import cpw . mods . fml . common . eventhandler . EventBus ; <nl> + import cpw . mods . fml . common . network . internal . FMLProxyPacket ; <nl> + import cpw . mods . fml . relauncher . Side ; <nl> + <nl> + public class FMLEventChannel { <nl> + private EnumMap < Side , FMLEmbeddedChannel > channels ; <nl> + private EventBus eventBus ; <nl> + <nl> + FMLEventChannel ( String name ) <nl> + { <nl> + this . channels = NetworkRegistry . INSTANCE . newChannel ( name , new NetworkEventFiringHandler ( this ) ) ; <nl> + this . eventBus = new EventBus ( ) ; <nl> + } <nl> + <nl> + public void register ( Object object ) <nl> + { <nl> + this . eventBus . register ( object ) ; <nl> + } <nl> + <nl> + public void unregister ( Object object ) <nl> + { <nl> + this . eventBus . unregister ( object ) ; <nl> + } <nl> + <nl> + void fireRead ( FMLProxyPacket msg , ChannelHandlerContext ctx ) <nl> + { <nl> + FMLNetworkEvent . CustomPacketEvent < ? > event = null ; <nl> + if ( msg . handler ( ) instanceof NetHandlerPlayClient ) <nl> + { <nl> + NetHandlerPlayClient client = ( NetHandlerPlayClient ) msg . handler ( ) ; <nl> + event = new FMLNetworkEvent . ClientCustomPacketEvent ( client . func _ 147298 _ b ( ) , msg ) ; <nl> + } <nl> + else if ( msg . handler ( ) instanceof NetHandlerPlayServer ) <nl> + { <nl> + NetHandlerPlayServer server = ( NetHandlerPlayServer ) msg . handler ( ) ; <nl> + event = new FMLNetworkEvent . ServerCustomPacketEvent ( server . func _ 147362 _ b ( ) , msg ) ; <nl> + } <nl> + if ( event ! = null ) <nl> + { <nl> + this . eventBus . post ( event ) ; <nl> + if ( event . reply ! = null ) <nl> + { <nl> + ctx . channel ( ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . REPLY ) ; <nl> + ctx . writeAndFlush ( event . reply ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public void sendToAll ( FMLProxyPacket pkt ) <nl> + { <nl> + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . ALL ) ; <nl> + channels . get ( Side . SERVER ) . writeAndFlush ( pkt ) ; <nl> + } <nl> + <nl> + public void sendTo ( FMLProxyPacket pkt , EntityPlayerMP player ) <nl> + { <nl> + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . PLAYER ) ; <nl> + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGETARGS ) . set ( player ) ; <nl> + channels . get ( Side . SERVER ) . writeAndFlush ( pkt ) ; <nl> + } <nl> + <nl> + public void sendToAllAround ( FMLProxyPacket pkt , NetworkRegistry . TargetPoint point ) <nl> + { <nl> + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . ALLAROUNDPOINT ) ; <nl> + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGETARGS ) . set ( point ) ; <nl> + channels . get ( Side . SERVER ) . writeAndFlush ( pkt ) ; <nl> + } <nl> + <nl> + public void sendToDimension ( FMLProxyPacket pkt , int dimensionId ) <nl> + { <nl> + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . DIMENSION ) ; <nl> + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGETARGS ) . set ( dimensionId ) ; <nl> + channels . get ( Side . SERVER ) . writeAndFlush ( pkt ) ; <nl> + } <nl> + <nl> + public void sendToServer ( FMLProxyPacket pkt ) <nl> + { <nl> + channels . get ( Side . CLIENT ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . TOSERVER ) ; <nl> + channels . get ( Side . CLIENT ) . writeAndFlush ( pkt ) ; <nl> + } <nl> + } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLNetworkEvent . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLNetworkEvent . java <nl> index 652396f . . e2f26f9 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / FMLNetworkEvent . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLNetworkEvent . java <nl> @ @ - 5 , 6 + 5 , 8 @ @ import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . play . INetHandlerPlayClient ; <nl> import net . minecraft . network . play . INetHandlerPlayServer ; <nl> import cpw . mods . fml . common . eventhandler . Event ; <nl> + import cpw . mods . fml . common . network . internal . FMLProxyPacket ; <nl> + import cpw . mods . fml . relauncher . Side ; <nl> <nl> public class FMLNetworkEvent < T extends INetHandler > extends Event { <nl> public final T handler ; <nl> @ @ - 49 , 4 + 51 , 49 @ @ public class FMLNetworkEvent < T extends INetHandler > extends Event { <nl> super ( ( INetHandlerPlayClient ) manager . func _ 150729 _ e ( ) , INetHandlerPlayClient . class , manager ) ; <nl> } <nl> } <nl> + <nl> + public static abstract class CustomPacketEvent < S extends INetHandler > extends FMLNetworkEvent < S > { <nl> + / * * <nl> + * The packet that generated the event <nl> + * / <nl> + public final FMLProxyPacket packet ; <nl> + <nl> + / * * <nl> + * Set this packet to reply to the originator <nl> + * / <nl> + public FMLProxyPacket reply ; <nl> + CustomPacketEvent ( S thing , Class < S > type , NetworkManager manager , FMLProxyPacket packet ) <nl> + { <nl> + super ( thing , type , manager ) ; <nl> + this . packet = packet ; <nl> + } <nl> + <nl> + public abstract Side side ( ) ; <nl> + } <nl> + <nl> + public static class ClientCustomPacketEvent extends CustomPacketEvent < INetHandlerPlayClient > { <nl> + public ClientCustomPacketEvent ( NetworkManager manager , FMLProxyPacket packet ) <nl> + { <nl> + super ( ( INetHandlerPlayClient ) manager . func _ 150729 _ e ( ) , INetHandlerPlayClient . class , manager , packet ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Side side ( ) <nl> + { <nl> + return Side . CLIENT ; <nl> + } <nl> + } <nl> + <nl> + public static class ServerCustomPacketEvent extends CustomPacketEvent < INetHandlerPlayServer > { <nl> + public ServerCustomPacketEvent ( NetworkManager manager , FMLProxyPacket packet ) <nl> + { <nl> + super ( ( INetHandlerPlayServer ) manager . func _ 150729 _ e ( ) , INetHandlerPlayServer . class , manager , packet ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Side side ( ) <nl> + { <nl> + return Side . SERVER ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLOutboundHandler . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLOutboundHandler . java <nl> index cb570ec . . d2a168e 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / FMLOutboundHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLOutboundHandler . java <nl> @ @ - 31 , 12 + 31 , 26 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> } <nl> <nl> @ Override <nl> - public List < NetworkDispatcher > selectNetworks ( Object args ) <nl> + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) <nl> { <nl> return null ; <nl> } <nl> <nl> } , <nl> + REPLY <nl> + { <nl> + @ Override <nl> + public void validateArgs ( Object args ) <nl> + { <nl> + / / NOOP <nl> + } <nl> + <nl> + @ Override <nl> + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) <nl> + { <nl> + return ImmutableList . of ( packet . getDispatcher ( ) ) ; <nl> + } <nl> + } , <nl> PLAYER <nl> { <nl> @ Override <nl> @ @ - 48 , 7 + 62 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> } <nl> } <nl> @ Override <nl> - public List < NetworkDispatcher > selectNetworks ( Object args ) <nl> + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) <nl> { <nl> EntityPlayerMP player = ( EntityPlayerMP ) args ; <nl> NetworkDispatcher dispatcher = player . field _ 71135 _ a . field _ 147371 _ a . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; <nl> @ @ - 63 , 7 + 77 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> } <nl> @ SuppressWarnings ( " unchecked " ) <nl> @ Override <nl> - public List < NetworkDispatcher > selectNetworks ( Object args ) <nl> + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) <nl> { <nl> ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; <nl> for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . func _ 71203 _ ab ( ) . field _ 72404 _ b ) <nl> @ @ - 86 , 7 + 100 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> } <nl> @ SuppressWarnings ( " unchecked " ) <nl> @ Override <nl> - public List < NetworkDispatcher > selectNetworks ( Object args ) <nl> + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) <nl> { <nl> int dimension = ( Integer ) args ; <nl> ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; <nl> @ @ - 114 , 7 + 128 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> @ Override <nl> - public List < NetworkDispatcher > selectNetworks ( Object args ) <nl> + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) <nl> { <nl> TargetPoint tp = ( TargetPoint ) args ; <nl> ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; <nl> @ @ - 144 , 7 + 158 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> throw new RuntimeException ( " Cannot set TOSERVER as a target on the server " ) ; <nl> } <nl> @ Override <nl> - public List < NetworkDispatcher > selectNetworks ( Object args ) <nl> + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) <nl> { <nl> NetworkManager clientConnection = FMLCommonHandler . instance ( ) . getClientToServerNetworkManager ( ) ; <nl> return clientConnection = = null ? ImmutableList . < NetworkDispatcher > of ( ) : ImmutableList . of ( clientConnection . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ) ; <nl> @ @ - 152 , 7 + 166 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> } ; <nl> <nl> public abstract void validateArgs ( Object args ) ; <nl> - public abstract List < NetworkDispatcher > selectNetworks ( Object args ) ; <nl> + public abstract List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 162 , 6 + 176 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> { <nl> return ; <nl> } <nl> + FMLProxyPacket pkt = ( FMLProxyPacket ) msg ; <nl> OutboundTarget outboundTarget ; <nl> Object args = null ; <nl> NetworkDispatcher dispatcher = ctx . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; <nl> @ @ - 182 , 7 + 197 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> <nl> outboundTarget . validateArgs ( args ) ; <nl> } <nl> - List < NetworkDispatcher > dispatchers = outboundTarget . selectNetworks ( args ) ; <nl> + List < NetworkDispatcher > dispatchers = outboundTarget . selectNetworks ( args , ctx , pkt ) ; <nl> <nl> / / This will drop the messages into the output queue at the embedded channel <nl> if ( dispatchers = = null ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkEventFiringHandler . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkEventFiringHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 25a1189 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkEventFiringHandler . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + package cpw . mods . fml . common . network ; <nl> + <nl> + import cpw . mods . fml . common . network . internal . FMLProxyPacket ; <nl> + import io . netty . channel . ChannelHandlerContext ; <nl> + import io . netty . channel . SimpleChannelInboundHandler ; <nl> + <nl> + / * * <nl> + * Use this handler as the only thing in your channel , to receive network events <nl> + * whenever your channel receives a message . <nl> + * Note : it will not forward on to other handlers . <nl> + * <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public class NetworkEventFiringHandler extends SimpleChannelInboundHandler < FMLProxyPacket > { <nl> + private FMLEventChannel eventChannel ; <nl> + <nl> + NetworkEventFiringHandler ( FMLEventChannel fmlEventChannel ) <nl> + { <nl> + this . eventChannel = fmlEventChannel ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void channelRead0 ( ChannelHandlerContext ctx , FMLProxyPacket msg ) throws Exception <nl> + { <nl> + eventChannel . fireRead ( msg , ctx ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java <nl> index b37a7ff . . 8facac2 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java <nl> @ @ - 127 , 6 + 127 , 10 @ @ public enum NetworkRegistry <nl> return result ; <nl> } <nl> <nl> + public FMLEventChannel newEventDrivenChannel ( String name ) <nl> + { <nl> + return new FMLEventChannel ( name ) ; <nl> + } <nl> / * * <nl> * INTERNAL Create a new channel pair with the specified name and channel handlers . <nl> * This is used internally in forge and FML <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java <nl> index 07c2cd8 . . ba43bec 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> <nl> public static final AttributeKey < NetworkDispatcher > FML _ DISPATCHER = new AttributeKey < NetworkDispatcher > ( " fml : dispatcher " ) ; <nl> public static final AttributeKey < Boolean > IS _ LOCAL = new AttributeKey < Boolean > ( " fml : isLocal " ) ; <nl> - private final NetworkManager manager ; <nl> + public final NetworkManager manager ; <nl> private final ServerConfigurationManager scm ; <nl> private EntityPlayerMP player ; <nl> private ConnectionState state ; <nl> @ @ - 259 , 6 + 259 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> else if ( NetworkRegistry . INSTANCE . hasChannel ( channelName , Side . CLIENT ) ) <nl> { <nl> FMLProxyPacket proxy = new FMLProxyPacket ( msg ) ; <nl> + proxy . setDispatcher ( this ) ; <nl> context . fireChannelRead ( proxy ) ; <nl> return true ; <nl> } <nl> @ @ - 293 , 6 + 294 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> else if ( NetworkRegistry . INSTANCE . hasChannel ( channelName , Side . SERVER ) ) <nl> { <nl> FMLProxyPacket proxy = new FMLProxyPacket ( msg ) ; <nl> + proxy . setDispatcher ( this ) ; <nl> context . fireChannelRead ( proxy ) ; <nl> return true ; <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java <nl> index 69d5f58 . . f3cd82d 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java <nl> @ @ - 3 , 15 + 3 , 15 @ @ package cpw . mods . fml . common . network . internal ; <nl> import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . Unpooled ; <nl> import io . netty . channel . embedded . EmbeddedChannel ; <nl> - <nl> import java . io . IOException ; <nl> - <nl> import net . minecraft . network . INetHandler ; <nl> + import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . Packet ; <nl> import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . network . play . client . C17PacketCustomPayload ; <nl> import net . minecraft . network . play . server . S3FPacketCustomPayload ; <nl> import cpw . mods . fml . common . network . NetworkRegistry ; <nl> + import cpw . mods . fml . common . network . handshake . NetworkDispatcher ; <nl> import cpw . mods . fml . relauncher . Side ; <nl> <nl> public class FMLProxyPacket extends Packet { <nl> @ @ - 19 , 6 + 19 , 7 @ @ public class FMLProxyPacket extends Packet { <nl> private Side target ; <nl> private final ByteBuf payload ; <nl> private INetHandler netHandler ; <nl> + private NetworkDispatcher dispatcher ; <nl> <nl> private FMLProxyPacket ( byte [ ] payload , String channel ) <nl> { <nl> @ @ - 92 , 4 + 93 , 19 @ @ public class FMLProxyPacket extends Packet { <nl> { <nl> this . target = target ; <nl> } <nl> + <nl> + public void setDispatcher ( NetworkDispatcher networkDispatcher ) <nl> + { <nl> + this . dispatcher = networkDispatcher ; <nl> + } <nl> + <nl> + public NetworkManager getOrigin ( ) <nl> + { <nl> + return this . dispatcher ! = null ? this . dispatcher . manager : null ; <nl> + } <nl> + <nl> + public NetworkDispatcher getDispatcher ( ) <nl> + { <nl> + return this . dispatcher ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 index a88abe4 . . e99d597 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 @ @ - 27 , 12 + 27 , 12 @ @ import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . Packet ; 
 import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . network . play . INetHandlerPlayClient ; 
 - import net . minecraft . network . play . client . C17PacketCustomPayload ; 
 - import net . minecraft . network . play . server . S01PacketJoinGame ; 
 - import net . minecraft . network . play . server . S3FPacketCustomPayload ; 
 - import net . minecraft . network . play . server . S40PacketDisconnect ; 
 - import net . minecraft . server . management . ServerConfigurationManager ; 
 - import net . minecraft . util . TextComponentString ; 
 + import net . minecraft . network . play . client . CPacketCustomPayload ; 
 + import net . minecraft . network . play . server . SPacketJoinGame ; 
 + import net . minecraft . network . play . server . SPacketCustomPayload ; 
 + import net . minecraft . network . play . server . SPacketDisconnect ; 
 + import net . minecraft . server . management . PlayerList ; 
 + import net . minecraft . util . text . TextComponentString ; 
 import net . minecraftforge . common . DimensionManager ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 @ @ - 73 , 7 + 73 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 return net ; 
 } 
 
 - public static NetworkDispatcher allocAndSet ( NetworkManager manager , ServerConfigurationManager scm ) 
 + public static NetworkDispatcher allocAndSet ( NetworkManager manager , PlayerList scm ) 
 { 
 NetworkDispatcher net = new NetworkDispatcher ( manager , scm ) ; 
 manager . channel ( ) . attr ( FML _ DISPATCHER ) . getAndSet ( net ) ; 
 @ @ - 84 , 7 + 84 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 public static final AttributeKey < Boolean > IS _ LOCAL = AttributeKey . valueOf ( " fml : isLocal " ) ; 
 public static final AttributeKey < PersistentRegistryManager . GameDataSnapshot > FML _ GAMEDATA _ SNAPSHOT = AttributeKey . valueOf ( " fml : gameDataSnapshot " ) ; 
 public final NetworkManager manager ; 
 - private final ServerConfigurationManager scm ; 
 + private final PlayerList scm ; 
 private EntityPlayerMP player ; 
 private ConnectionState state ; 
 private ConnectionType connectionType ; 
 @ @ - 110 , 7 + 110 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 PacketLoggingHandler . register ( manager ) ; 
 } 
 
 - public NetworkDispatcher ( NetworkManager manager , ServerConfigurationManager scm ) 
 + public NetworkDispatcher ( NetworkManager manager , PlayerList scm ) 
 { 
 super ( Packet . class , false ) ; 
 this . manager = manager ; 
 @ @ - 206 , 7 + 206 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 int dimension = playerNBT . getInteger ( " Dimension " ) ; 
 if ( DimensionManager . isDimensionRegistered ( dimension ) ) 
 { 
 - 	 return dimension ; 
 + return dimension ; 
 } 
 } 
 return 0 ; 
 @ @ - 243 , 13 + 243 , 13 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 protected void channelRead0 ( ChannelHandlerContext ctx , Packet msg ) throws Exception 
 { 
 boolean handled = false ; 
 - if ( msg instanceof C17PacketCustomPayload ) 
 + if ( msg instanceof CPacketCustomPayload ) 
 { 
 - handled = handleServerSideCustomPacket ( ( C17PacketCustomPayload ) msg , ctx ) ; 
 + handled = handleServerSideCustomPacket ( ( CPacketCustomPayload ) msg , ctx ) ; 
 } 
 - else if ( msg instanceof S3FPacketCustomPayload ) 
 + else if ( msg instanceof SPacketCustomPayload ) 
 { 
 - handled = handleClientSideCustomPacket ( ( S3FPacketCustomPayload ) msg , ctx ) ; 
 + handled = handleClientSideCustomPacket ( ( SPacketCustomPayload ) msg , ctx ) ; 
 } 
 else if ( state ! = ConnectionState . CONNECTED & & state ! = ConnectionState . HANDSHAKECOMPLETE ) 
 { 
 @ @ - 263 , 7 + 263 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 
 private boolean handleVanilla ( Packet < ? > msg ) 
 { 
 - if ( state = = ConnectionState . AWAITING _ HANDSHAKE & & msg instanceof S01PacketJoinGame ) 
 + if ( state = = ConnectionState . AWAITING _ HANDSHAKE & & msg instanceof SPacketJoinGame ) 
 { 
 handshakeChannel . pipeline ( ) . fireUserEventTriggered ( msg ) ; 
 } 
 @ @ - 304 , 7 + 304 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 kickWithMessage ( " This is modded . No modded response received . Bye ! " ) ; 
 } 
 @ SuppressWarnings ( " unchecked " ) 
 - 	 private void kickWithMessage ( String message ) 
 + private void kickWithMessage ( String message ) 
 { 
 final TextComponentString TextComponentString = new TextComponentString ( message ) ; 
 if ( side = = Side . CLIENT ) 
 @ @ - 313 , 7 + 313 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 } 
 else 
 { 
 - manager . sendPacket ( new S40PacketDisconnect ( TextComponentString ) , new GenericFutureListener < Future < ? super Void > > ( ) 
 + manager . sendPacket ( new SPacketDisconnect ( TextComponentString ) , new GenericFutureListener < Future < ? super Void > > ( ) 
 { 
 @ Override 
 public void operationComplete ( Future < ? super Void > result ) 
 @ @ - 326 , 7 + 326 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 } 
 
 private MultiPartCustomPayload multipart = null ; 
 - private boolean handleClientSideCustomPacket ( S3FPacketCustomPayload msg , ChannelHandlerContext context ) 
 + private boolean handleClientSideCustomPacket ( SPacketCustomPayload msg , ChannelHandlerContext context ) 
 { 
 String channelName = msg . getChannelName ( ) ; 
 if ( " FML | MP " . equals ( channelName ) ) 
 @ @ - 389 , 7 + 389 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 return false ; 
 } 
 
 - private boolean handleServerSideCustomPacket ( C17PacketCustomPayload msg , ChannelHandlerContext context ) 
 + private boolean handleServerSideCustomPacket ( CPacketCustomPayload msg , ChannelHandlerContext context ) 
 { 
 if ( state = = ConnectionState . AWAITING _ HANDSHAKE ) 
 { 
 @ @ - 457 , 11 + 457 , 11 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 { 
 if ( side = = Side . CLIENT ) 
 { 
 - 	 MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ClientDisconnectionFromServerEvent ( manager ) ) ; 
 + MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ClientDisconnectionFromServerEvent ( manager ) ) ; 
 } 
 else 
 { 
 - 	 MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ServerDisconnectionFromClientEvent ( manager ) ) ; 
 + MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ServerDisconnectionFromClientEvent ( manager ) ) ; 
 } 
 cleanAttributes ( ctx ) ; 
 ctx . disconnect ( promise ) ; 
 @ @ - 476 , 7 + 476 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 } 
 else 
 { 
 - 	 MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ServerDisconnectionFromClientEvent ( manager ) ) ; 
 + MinecraftForge . EVENT _ BUS . post ( new FMLNetworkEvent . ServerDisconnectionFromClientEvent ( manager ) ) ; 
 } 
 cleanAttributes ( ctx ) ; 
 ctx . close ( promise ) ; 
 @ @ - 582 , 12 + 582 , 12 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 FMLLog . fine ( " Received override dimension % d " , overrideDim ) ; 
 } 
 
 - public int getOverrideDimension ( S01PacketJoinGame packetIn ) { 
 + public int getOverrideDimension ( SPacketJoinGame packetIn ) { 
 FMLLog . fine ( " Overriding dimension : using % d " , this . overrideLoginDim ) ; 
 return this . overrideLoginDim ! = 0 ? this . overrideLoginDim : packetIn . getDimension ( ) ; 
 } 
 
 - private class MultiPartCustomPayload extends S3FPacketCustomPayload 
 + private class MultiPartCustomPayload extends SPacketCustomPayload 
 { 
 private String channel ; 
 private byte [ ] data ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java 
 index 66a9cd3 . . b05b8b1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java 
 @ @ - 13 , 8 + 13 , 8 @ @ import net . minecraft . network . Packet ; 
 import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . network . play . INetHandlerPlayClient ; 
 import net . minecraft . network . play . INetHandlerPlayServer ; 
 - import net . minecraft . network . play . client . C17PacketCustomPayload ; 
 - import net . minecraft . network . play . server . S3FPacketCustomPayload ; 
 + import net . minecraft . network . play . client . CPacketCustomPayload ; 
 + import net . minecraft . network . play . server . SPacketCustomPayload ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . network . FMLNetworkException ; 
 import net . minecraftforge . fml . common . network . NetworkRegistry ; 
 @ @ - 39 , 13 + 39 , 13 @ @ public class FMLProxyPacket implements Packet < INetHandler > { 
 private static Multiset < String > badPackets = ConcurrentHashMultiset . create ( ) ; 
 private static int packetCountWarning = Integers . parseInt ( System . getProperty ( " fml . badPacketCounter " , " 100 " ) , 100 ) ; 
 
 - public FMLProxyPacket ( S3FPacketCustomPayload original ) 
 + public FMLProxyPacket ( SPacketCustomPayload original ) 
 { 
 this ( original . getBufferData ( ) , original . getChannelName ( ) ) ; 
 this . target = Side . CLIENT ; 
 } 
 
 - public FMLProxyPacket ( C17PacketCustomPayload original ) 
 + public FMLProxyPacket ( CPacketCustomPayload original ) 
 { 
 this ( original . getBufferData ( ) , original . getChannelName ( ) ) ; 
 this . target = Side . SERVER ; 
 @ @ - 121 , 7 + 121 , 7 @ @ public class FMLProxyPacket implements Packet < INetHandler > { 
 } 
 public Packet < INetHandlerPlayServer > toC17Packet ( ) 
 { 
 - return new C17PacketCustomPayload ( channel , payload ) ; 
 + return new CPacketCustomPayload ( channel , payload ) ; 
 } 
 
 static final int PART _ SIZE = 0x1000000 - 0x50 ; / / Make it a constant so that it gets inlined below . 
 @ @ - 133 , 7 + 133 , 7 @ @ public class FMLProxyPacket implements Packet < INetHandler > { 
 
 if ( data . length < PART _ SIZE ) 
 { 
 - ret . add ( new S3FPacketCustomPayload ( channel , new PacketBuffer ( payload . duplicate ( ) ) ) ) ; 
 + ret . add ( new SPacketCustomPayload ( channel , new PacketBuffer ( payload . duplicate ( ) ) ) ) ; 
 } 
 else 
 { 
 @ @ - 146 , 7 + 146 , 7 @ @ public class FMLProxyPacket implements Packet < INetHandler > { 
 preamble . writeString ( channel ) ; 
 preamble . writeByte ( parts ) ; 
 preamble . writeInt ( data . length ) ; 
 - ret . add ( new S3FPacketCustomPayload ( " FML | MP " , preamble ) ) ; 
 + ret . add ( new SPacketCustomPayload ( " FML | MP " , preamble ) ) ; 
 
 int offset = 0 ; 
 for ( int x = 0 ; x < parts ; x + + ) 
 @ @ - 156 , 7 + 156 , 7 @ @ public class FMLProxyPacket implements Packet < INetHandler > { 
 tmp [ 0 ] = ( byte ) ( x & 0xFF ) ; 
 System . arraycopy ( data , offset , tmp , 1 , tmp . length - 1 ) ; 
 offset + = tmp . length - 1 ; 
 - ret . add ( new S3FPacketCustomPayload ( " FML | MP " , new PacketBuffer ( Unpooled . wrappedBuffer ( tmp ) ) ) ) ; 
 + ret . add ( new SPacketCustomPayload ( " FML | MP " , new PacketBuffer ( Unpooled . wrappedBuffer ( tmp ) ) ) ) ; 
 } 
 } 
 return ret ;

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLEventChannel . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLEventChannel . java 
 new file mode 100644 
 index 0000000 . . 7e52678 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLEventChannel . java 
 @ @ - 0 , 0 + 1 , 88 @ @ 
 + package cpw . mods . fml . common . network ; 
 + 
 + import io . netty . channel . ChannelHandlerContext ; 
 + import java . util . EnumMap ; 
 + import net . minecraft . client . network . NetHandlerPlayClient ; 
 + import net . minecraft . entity . player . EntityPlayerMP ; 
 + import net . minecraft . network . NetHandlerPlayServer ; 
 + import cpw . mods . fml . common . eventhandler . EventBus ; 
 + import cpw . mods . fml . common . network . internal . FMLProxyPacket ; 
 + import cpw . mods . fml . relauncher . Side ; 
 + 
 + public class FMLEventChannel { 
 + private EnumMap < Side , FMLEmbeddedChannel > channels ; 
 + private EventBus eventBus ; 
 + 
 + FMLEventChannel ( String name ) 
 + { 
 + this . channels = NetworkRegistry . INSTANCE . newChannel ( name , new NetworkEventFiringHandler ( this ) ) ; 
 + this . eventBus = new EventBus ( ) ; 
 + } 
 + 
 + public void register ( Object object ) 
 + { 
 + this . eventBus . register ( object ) ; 
 + } 
 + 
 + public void unregister ( Object object ) 
 + { 
 + this . eventBus . unregister ( object ) ; 
 + } 
 + 
 + void fireRead ( FMLProxyPacket msg , ChannelHandlerContext ctx ) 
 + { 
 + FMLNetworkEvent . CustomPacketEvent < ? > event = null ; 
 + if ( msg . handler ( ) instanceof NetHandlerPlayClient ) 
 + { 
 + NetHandlerPlayClient client = ( NetHandlerPlayClient ) msg . handler ( ) ; 
 + event = new FMLNetworkEvent . ClientCustomPacketEvent ( client . func _ 147298 _ b ( ) , msg ) ; 
 + } 
 + else if ( msg . handler ( ) instanceof NetHandlerPlayServer ) 
 + { 
 + NetHandlerPlayServer server = ( NetHandlerPlayServer ) msg . handler ( ) ; 
 + event = new FMLNetworkEvent . ServerCustomPacketEvent ( server . func _ 147362 _ b ( ) , msg ) ; 
 + } 
 + if ( event ! = null ) 
 + { 
 + this . eventBus . post ( event ) ; 
 + if ( event . reply ! = null ) 
 + { 
 + ctx . channel ( ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . REPLY ) ; 
 + ctx . writeAndFlush ( event . reply ) ; 
 + } 
 + } 
 + } 
 + 
 + public void sendToAll ( FMLProxyPacket pkt ) 
 + { 
 + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . ALL ) ; 
 + channels . get ( Side . SERVER ) . writeAndFlush ( pkt ) ; 
 + } 
 + 
 + public void sendTo ( FMLProxyPacket pkt , EntityPlayerMP player ) 
 + { 
 + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . PLAYER ) ; 
 + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGETARGS ) . set ( player ) ; 
 + channels . get ( Side . SERVER ) . writeAndFlush ( pkt ) ; 
 + } 
 + 
 + public void sendToAllAround ( FMLProxyPacket pkt , NetworkRegistry . TargetPoint point ) 
 + { 
 + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . ALLAROUNDPOINT ) ; 
 + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGETARGS ) . set ( point ) ; 
 + channels . get ( Side . SERVER ) . writeAndFlush ( pkt ) ; 
 + } 
 + 
 + public void sendToDimension ( FMLProxyPacket pkt , int dimensionId ) 
 + { 
 + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . DIMENSION ) ; 
 + channels . get ( Side . SERVER ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGETARGS ) . set ( dimensionId ) ; 
 + channels . get ( Side . SERVER ) . writeAndFlush ( pkt ) ; 
 + } 
 + 
 + public void sendToServer ( FMLProxyPacket pkt ) 
 + { 
 + channels . get ( Side . CLIENT ) . attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( FMLOutboundHandler . OutboundTarget . TOSERVER ) ; 
 + channels . get ( Side . CLIENT ) . writeAndFlush ( pkt ) ; 
 + } 
 + } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLNetworkEvent . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLNetworkEvent . java 
 index 652396f . . e2f26f9 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / FMLNetworkEvent . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLNetworkEvent . java 
 @ @ - 5 , 6 + 5 , 8 @ @ import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . play . INetHandlerPlayClient ; 
 import net . minecraft . network . play . INetHandlerPlayServer ; 
 import cpw . mods . fml . common . eventhandler . Event ; 
 + import cpw . mods . fml . common . network . internal . FMLProxyPacket ; 
 + import cpw . mods . fml . relauncher . Side ; 
 
 public class FMLNetworkEvent < T extends INetHandler > extends Event { 
 public final T handler ; 
 @ @ - 49 , 4 + 51 , 49 @ @ public class FMLNetworkEvent < T extends INetHandler > extends Event { 
 super ( ( INetHandlerPlayClient ) manager . func _ 150729 _ e ( ) , INetHandlerPlayClient . class , manager ) ; 
 } 
 } 
 + 
 + public static abstract class CustomPacketEvent < S extends INetHandler > extends FMLNetworkEvent < S > { 
 + / * * 
 + * The packet that generated the event 
 + * / 
 + public final FMLProxyPacket packet ; 
 + 
 + / * * 
 + * Set this packet to reply to the originator 
 + * / 
 + public FMLProxyPacket reply ; 
 + CustomPacketEvent ( S thing , Class < S > type , NetworkManager manager , FMLProxyPacket packet ) 
 + { 
 + super ( thing , type , manager ) ; 
 + this . packet = packet ; 
 + } 
 + 
 + public abstract Side side ( ) ; 
 + } 
 + 
 + public static class ClientCustomPacketEvent extends CustomPacketEvent < INetHandlerPlayClient > { 
 + public ClientCustomPacketEvent ( NetworkManager manager , FMLProxyPacket packet ) 
 + { 
 + super ( ( INetHandlerPlayClient ) manager . func _ 150729 _ e ( ) , INetHandlerPlayClient . class , manager , packet ) ; 
 + } 
 + 
 + @ Override 
 + public Side side ( ) 
 + { 
 + return Side . CLIENT ; 
 + } 
 + } 
 + 
 + public static class ServerCustomPacketEvent extends CustomPacketEvent < INetHandlerPlayServer > { 
 + public ServerCustomPacketEvent ( NetworkManager manager , FMLProxyPacket packet ) 
 + { 
 + super ( ( INetHandlerPlayServer ) manager . func _ 150729 _ e ( ) , INetHandlerPlayServer . class , manager , packet ) ; 
 + } 
 + 
 + @ Override 
 + public Side side ( ) 
 + { 
 + return Side . SERVER ; 
 + } 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLOutboundHandler . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLOutboundHandler . java 
 index cb570ec . . d2a168e 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / FMLOutboundHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLOutboundHandler . java 
 @ @ - 31 , 12 + 31 , 26 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 } 
 
 @ Override 
 - public List < NetworkDispatcher > selectNetworks ( Object args ) 
 + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) 
 { 
 return null ; 
 } 
 
 } , 
 + REPLY 
 + { 
 + @ Override 
 + public void validateArgs ( Object args ) 
 + { 
 + / / NOOP 
 + } 
 + 
 + @ Override 
 + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) 
 + { 
 + return ImmutableList . of ( packet . getDispatcher ( ) ) ; 
 + } 
 + } , 
 PLAYER 
 { 
 @ Override 
 @ @ - 48 , 7 + 62 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 } 
 } 
 @ Override 
 - public List < NetworkDispatcher > selectNetworks ( Object args ) 
 + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) 
 { 
 EntityPlayerMP player = ( EntityPlayerMP ) args ; 
 NetworkDispatcher dispatcher = player . field _ 71135 _ a . field _ 147371 _ a . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; 
 @ @ - 63 , 7 + 77 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 } 
 @ SuppressWarnings ( " unchecked " ) 
 @ Override 
 - public List < NetworkDispatcher > selectNetworks ( Object args ) 
 + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) 
 { 
 ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; 
 for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . func _ 71203 _ ab ( ) . field _ 72404 _ b ) 
 @ @ - 86 , 7 + 100 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 } 
 @ SuppressWarnings ( " unchecked " ) 
 @ Override 
 - public List < NetworkDispatcher > selectNetworks ( Object args ) 
 + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) 
 { 
 int dimension = ( Integer ) args ; 
 ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; 
 @ @ - 114 , 7 + 128 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 
 @ SuppressWarnings ( " unchecked " ) 
 @ Override 
 - public List < NetworkDispatcher > selectNetworks ( Object args ) 
 + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) 
 { 
 TargetPoint tp = ( TargetPoint ) args ; 
 ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; 
 @ @ - 144 , 7 + 158 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 throw new RuntimeException ( " Cannot set TOSERVER as a target on the server " ) ; 
 } 
 @ Override 
 - public List < NetworkDispatcher > selectNetworks ( Object args ) 
 + public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) 
 { 
 NetworkManager clientConnection = FMLCommonHandler . instance ( ) . getClientToServerNetworkManager ( ) ; 
 return clientConnection = = null ? ImmutableList . < NetworkDispatcher > of ( ) : ImmutableList . of ( clientConnection . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ) ; 
 @ @ - 152 , 7 + 166 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 } ; 
 
 public abstract void validateArgs ( Object args ) ; 
 - public abstract List < NetworkDispatcher > selectNetworks ( Object args ) ; 
 + public abstract List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) ; 
 } 
 
 @ Override 
 @ @ - 162 , 6 + 176 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 { 
 return ; 
 } 
 + FMLProxyPacket pkt = ( FMLProxyPacket ) msg ; 
 OutboundTarget outboundTarget ; 
 Object args = null ; 
 NetworkDispatcher dispatcher = ctx . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; 
 @ @ - 182 , 7 + 197 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 
 outboundTarget . validateArgs ( args ) ; 
 } 
 - List < NetworkDispatcher > dispatchers = outboundTarget . selectNetworks ( args ) ; 
 + List < NetworkDispatcher > dispatchers = outboundTarget . selectNetworks ( args , ctx , pkt ) ; 
 
 / / This will drop the messages into the output queue at the embedded channel 
 if ( dispatchers = = null ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkEventFiringHandler . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkEventFiringHandler . java 
 new file mode 100644 
 index 0000000 . . 25a1189 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkEventFiringHandler . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + package cpw . mods . fml . common . network ; 
 + 
 + import cpw . mods . fml . common . network . internal . FMLProxyPacket ; 
 + import io . netty . channel . ChannelHandlerContext ; 
 + import io . netty . channel . SimpleChannelInboundHandler ; 
 + 
 + / * * 
 + * Use this handler as the only thing in your channel , to receive network events 
 + * whenever your channel receives a message . 
 + * Note : it will not forward on to other handlers . 
 + * 
 + * @ author cpw 
 + * 
 + * / 
 + public class NetworkEventFiringHandler extends SimpleChannelInboundHandler < FMLProxyPacket > { 
 + private FMLEventChannel eventChannel ; 
 + 
 + NetworkEventFiringHandler ( FMLEventChannel fmlEventChannel ) 
 + { 
 + this . eventChannel = fmlEventChannel ; 
 + } 
 + 
 + @ Override 
 + protected void channelRead0 ( ChannelHandlerContext ctx , FMLProxyPacket msg ) throws Exception 
 + { 
 + eventChannel . fireRead ( msg , ctx ) ; 
 + } 
 + 
 + } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java 
 index b37a7ff . . 8facac2 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / NetworkRegistry . java 
 @ @ - 127 , 6 + 127 , 10 @ @ public enum NetworkRegistry 
 return result ; 
 } 
 
 + public FMLEventChannel newEventDrivenChannel ( String name ) 
 + { 
 + return new FMLEventChannel ( name ) ; 
 + } 
 / * * 
 * INTERNAL Create a new channel pair with the specified name and channel handlers . 
 * This is used internally in forge and FML 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java 
 index 07c2cd8 . . ba43bec 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / NetworkDispatcher . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 
 public static final AttributeKey < NetworkDispatcher > FML _ DISPATCHER = new AttributeKey < NetworkDispatcher > ( " fml : dispatcher " ) ; 
 public static final AttributeKey < Boolean > IS _ LOCAL = new AttributeKey < Boolean > ( " fml : isLocal " ) ; 
 - private final NetworkManager manager ; 
 + public final NetworkManager manager ; 
 private final ServerConfigurationManager scm ; 
 private EntityPlayerMP player ; 
 private ConnectionState state ; 
 @ @ - 259 , 6 + 259 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 else if ( NetworkRegistry . INSTANCE . hasChannel ( channelName , Side . CLIENT ) ) 
 { 
 FMLProxyPacket proxy = new FMLProxyPacket ( msg ) ; 
 + proxy . setDispatcher ( this ) ; 
 context . fireChannelRead ( proxy ) ; 
 return true ; 
 } 
 @ @ - 293 , 6 + 294 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 else if ( NetworkRegistry . INSTANCE . hasChannel ( channelName , Side . SERVER ) ) 
 { 
 FMLProxyPacket proxy = new FMLProxyPacket ( msg ) ; 
 + proxy . setDispatcher ( this ) ; 
 context . fireChannelRead ( proxy ) ; 
 return true ; 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java 
 index 69d5f58 . . f3cd82d 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLProxyPacket . java 
 @ @ - 3 , 15 + 3 , 15 @ @ package cpw . mods . fml . common . network . internal ; 
 import io . netty . buffer . ByteBuf ; 
 import io . netty . buffer . Unpooled ; 
 import io . netty . channel . embedded . EmbeddedChannel ; 
 - 
 import java . io . IOException ; 
 - 
 import net . minecraft . network . INetHandler ; 
 + import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . Packet ; 
 import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . network . play . client . C17PacketCustomPayload ; 
 import net . minecraft . network . play . server . S3FPacketCustomPayload ; 
 import cpw . mods . fml . common . network . NetworkRegistry ; 
 + import cpw . mods . fml . common . network . handshake . NetworkDispatcher ; 
 import cpw . mods . fml . relauncher . Side ; 
 
 public class FMLProxyPacket extends Packet { 
 @ @ - 19 , 6 + 19 , 7 @ @ public class FMLProxyPacket extends Packet { 
 private Side target ; 
 private final ByteBuf payload ; 
 private INetHandler netHandler ; 
 + private NetworkDispatcher dispatcher ; 
 
 private FMLProxyPacket ( byte [ ] payload , String channel ) 
 { 
 @ @ - 92 , 4 + 93 , 19 @ @ public class FMLProxyPacket extends Packet { 
 { 
 this . target = target ; 
 } 
 + 
 + public void setDispatcher ( NetworkDispatcher networkDispatcher ) 
 + { 
 + this . dispatcher = networkDispatcher ; 
 + } 
 + 
 + public NetworkManager getOrigin ( ) 
 + { 
 + return this . dispatcher ! = null ? this . dispatcher . manager : null ; 
 + } 
 + 
 + public NetworkDispatcher getDispatcher ( ) 
 + { 
 + return this . dispatcher ; 
 + } 
 }
