BLEU SCORE: 0.028398387225677897

TEST MSG: Make FluidUtil sounds server - side , add simulate option for tryFill / EmptyContainerAndStow
GENERATED MSG: Fix incorrect FluidUtil doc

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> index 5d4368d . . f98d0c7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> @ @ - 101 , 10 + 101 , 10 @ @ public class FluidUtil <nl> IItemHandler playerInventory = player . getCapability ( CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY , null ) ; <nl> if ( playerInventory ! = null ) <nl> { <nl> - FluidActionResult fluidActionResult = tryFillContainerAndStow ( heldItem , handler , playerInventory , Integer . MAX _ VALUE , player ) ; <nl> + FluidActionResult fluidActionResult = tryFillContainerAndStow ( heldItem , handler , playerInventory , Integer . MAX _ VALUE , player , true ) ; <nl> if ( ! fluidActionResult . isSuccess ( ) ) <nl> { <nl> - fluidActionResult = tryEmptyContainerAndStow ( heldItem , handler , playerInventory , Integer . MAX _ VALUE , player ) ; <nl> + fluidActionResult = tryEmptyContainerAndStow ( heldItem , handler , playerInventory , Integer . MAX _ VALUE , player , true ) ; <nl> } <nl> <nl> if ( fluidActionResult . isSuccess ( ) ) <nl> @ @ - 122 , 7 + 122 , 7 @ @ public class FluidUtil <nl> * <nl> * @ param container The container to be filled . Will not be modified . <nl> * Separate handling must be done to reduce the stack size , stow containers , etc , on success . <nl> - * See { @ link # tryFillContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer ) } . <nl> + * See { @ link # tryFillContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer , boolean ) } . <nl> * @ param fluidSource The fluid handler to be drained . <nl> * @ param maxAmount The largest amount of fluid that should be transferred . <nl> * @ param player The player to make the filling noise . Pass null for no noise . <nl> @ @ - 145 , 7 + 145 , 7 @ @ public class FluidUtil <nl> if ( player ! = null ) <nl> { <nl> SoundEvent soundevent = simulatedTransfer . getFluid ( ) . getFillSound ( simulatedTransfer ) ; <nl> - player . playSound ( soundevent , 1f , 1f ) ; <nl> + player . world . playSound ( null , player . posX , player . posY + 0 . 5 , player . posZ , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; <nl> } <nl> } <nl> else <nl> @ @ - 165 , 7 + 165 , 7 @ @ public class FluidUtil <nl> * <nl> * @ param container The filled container . Will not be modified . <nl> * Separate handling must be done to reduce the stack size , stow containers , etc , on success . <nl> - * See { @ link # tryEmptyContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer ) } . <nl> + * See { @ link # tryEmptyContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer , boolean ) } . <nl> * @ param fluidDestination The fluid handler to be filled by the container . <nl> * @ param maxAmount The largest amount of fluid that should be transferred . <nl> * @ param player Player for making the bucket drained sound . Pass null for no noise . <nl> @ @ - 188 , 7 + 188 , 7 @ @ public class FluidUtil <nl> if ( player ! = null ) <nl> { <nl> SoundEvent soundevent = transfer . getFluid ( ) . getEmptySound ( transfer ) ; <nl> - player . playSound ( soundevent , 1f , 1f ) ; <nl> + player . world . playSound ( null , player . posX , player . posY + 0 . 5 , player . posZ , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; <nl> } <nl> ItemStack resultContainer = containerFluidHandler . getContainer ( ) ; <nl> return new FluidActionResult ( resultContainer ) ; <nl> @ @ - 223 , 10 + 223 , 35 @ @ public class FluidUtil <nl> * @ param player The player that gets the items the inventory can ' t take . <nl> * Can be null , only used if the inventory cannot take the filled stack . <nl> * @ return a { @ link FluidActionResult } holding the result and the resulting container . The resulting container is empty on failure . <nl> + * @ deprecated use { @ link # tryFillContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer , boolean ) } <nl> * / <nl> + @ Deprecated / / TODO remove in 1 . 13 <nl> @ Nonnull <nl> public static FluidActionResult tryFillContainerAndStow ( @ Nonnull ItemStack container , IFluidHandler fluidSource , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player ) <nl> { <nl> + return tryFillContainerAndStow ( container , fluidSource , inventory , maxAmount , player , true ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Takes an Fluid Container Item and tries to fill it from the given tank . <nl> + * If the player is in creative mode , the container will not be modified on success , and no additional items created . <nl> + * If the input itemstack has a stacksize > 1 it will stow the filled container in the given inventory . <nl> + * If the inventory does not accept it , it will be given to the player or dropped at the players feet . <nl> + * If player is null in this case , the action will be aborted . <nl> + * <nl> + * @ param container The Fluid Container ItemStack to fill . <nl> + * Will not be modified directly , if modifications are necessary a modified copy is returned in the result . <nl> + * @ param fluidSource The fluid source to fill from <nl> + * @ param inventory An inventory where any additionally created item ( filled container if multiple empty are present ) are put <nl> + * @ param maxAmount Maximum amount of fluid to take from the tank . <nl> + * @ param player The player that gets the items the inventory can ' t take . <nl> + * Can be null , only used if the inventory cannot take the filled stack . <nl> + * @ param doFill true if the container should actually be filled , false if it should be simulated . <nl> + * @ return a { @ link FluidActionResult } holding the result and the resulting container . The resulting container is empty on failure . <nl> + * / <nl> + @ Nonnull <nl> + public static FluidActionResult tryFillContainerAndStow ( @ Nonnull ItemStack container , IFluidHandler fluidSource , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player , boolean doFill ) <nl> + { <nl> if ( container . isEmpty ( ) ) <nl> { <nl> return FluidActionResult . FAILURE ; <nl> @ @ - 234 , 7 + 259 , 7 @ @ public class FluidUtil <nl> <nl> if ( player ! = null & & player . capabilities . isCreativeMode ) <nl> { <nl> - FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , true ) ; <nl> + FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , doFill ) ; <nl> if ( filledReal . isSuccess ( ) ) <nl> { <nl> return new FluidActionResult ( container ) ; / / creative mode : item does not change <nl> @ @ - 242 , 7 + 267 , 7 @ @ public class FluidUtil <nl> } <nl> else if ( container . getCount ( ) = = 1 ) / / don ' t need to stow anything , just fill the container stack <nl> { <nl> - FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , true ) ; <nl> + FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , doFill ) ; <nl> if ( filledReal . isSuccess ( ) ) <nl> { <nl> return filledReal ; <nl> @ @ - 257 , 11 + 282 , 11 @ @ public class FluidUtil <nl> ItemStack remainder = ItemHandlerHelper . insertItemStacked ( inventory , filledSimulated . getResult ( ) , true ) ; <nl> if ( remainder . isEmpty ( ) | | player ! = null ) <nl> { <nl> - FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , true ) ; <nl> - remainder = ItemHandlerHelper . insertItemStacked ( inventory , filledReal . getResult ( ) , false ) ; <nl> + FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , doFill ) ; <nl> + remainder = ItemHandlerHelper . insertItemStacked ( inventory , filledReal . getResult ( ) , ! doFill ) ; <nl> <nl> / / give it to the player or drop it at their feet <nl> - if ( ! remainder . isEmpty ( ) & & player ! = null ) <nl> + if ( ! remainder . isEmpty ( ) & & player ! = null & & doFill ) <nl> { <nl> ItemHandlerHelper . giveItemToPlayer ( player , remainder ) ; <nl> } <nl> @ @ - 290 , 10 + 315 , 34 @ @ public class FluidUtil <nl> * @ param maxAmount Maximum amount of fluid to take from the tank . <nl> * @ param player The player that gets the items the inventory can ' t take . Can be null , only used if the inventory cannot take the filled stack . <nl> * @ return a { @ link FluidActionResult } holding the result and the resulting container . The resulting container is empty on failure . <nl> + * @ deprecated use { @ link # tryEmptyContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer , boolean ) } <nl> * / <nl> + @ Deprecated / / TODO : remove in 1 . 13 <nl> @ Nonnull <nl> public static FluidActionResult tryEmptyContainerAndStow ( @ Nonnull ItemStack container , IFluidHandler fluidDestination , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player ) <nl> { <nl> + return tryEmptyContainerAndStow ( container , fluidDestination , inventory , maxAmount , player , true ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Takes an Fluid Container Item , tries to empty it into the fluid handler , and stows it in the given inventory . <nl> + * If the player is in creative mode , the container will not be modified on success , and no additional items created . <nl> + * If the input itemstack has a stacksize > 1 it will stow the emptied container in the given inventory . <nl> + * If the inventory does not accept the emptied container , it will be given to the player or dropped at the players feet . <nl> + * If player is null in this case , the action will be aborted . <nl> + * <nl> + * @ param container The filled Fluid Container Itemstack to empty . <nl> + * Will not be modified directly , if modifications are necessary a modified copy is returned in the result . <nl> + * @ param fluidDestination The fluid destination to fill from the fluid container . <nl> + * @ param inventory An inventory where any additionally created item ( filled container if multiple empty are present ) are put <nl> + * @ param maxAmount Maximum amount of fluid to take from the tank . <nl> + * @ param player The player that gets the items the inventory can ' t take . Can be null , only used if the inventory cannot take the filled stack . <nl> + * @ param doDrain true if the container should actually be drained , false if it should be simulated . <nl> + * @ return a { @ link FluidActionResult } holding the result and the resulting container . The resulting container is empty on failure . <nl> + * / <nl> + @ Nonnull <nl> + public static FluidActionResult tryEmptyContainerAndStow ( @ Nonnull ItemStack container , IFluidHandler fluidDestination , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player , boolean doDrain ) <nl> + { <nl> if ( container . isEmpty ( ) ) <nl> { <nl> return FluidActionResult . FAILURE ; <nl> @ @ - 301 , 7 + 350 , 7 @ @ public class FluidUtil <nl> <nl> if ( player ! = null & & player . capabilities . isCreativeMode ) <nl> { <nl> - FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; <nl> + FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , doDrain ) ; <nl> if ( emptiedReal . isSuccess ( ) ) <nl> { <nl> return new FluidActionResult ( container ) ; / / creative mode : item does not change <nl> @ @ - 309 , 7 + 358 , 7 @ @ public class FluidUtil <nl> } <nl> else if ( container . getCount ( ) = = 1 ) / / don ' t need to stow anything , just fill and edit the container stack <nl> { <nl> - FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; <nl> + FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , doDrain ) ; <nl> if ( emptiedReal . isSuccess ( ) ) <nl> { <nl> return emptiedReal ; <nl> @ @ - 324 , 11 + 373 , 11 @ @ public class FluidUtil <nl> ItemStack remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedSimulated . getResult ( ) , true ) ; <nl> if ( remainder . isEmpty ( ) | | player ! = null ) <nl> { <nl> - FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; <nl> - remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedReal . getResult ( ) , false ) ; <nl> + FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , doDrain ) ; <nl> + remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedReal . getResult ( ) , ! doDrain ) ; <nl> <nl> / / give it to the player or drop it at their feet <nl> - if ( ! remainder . isEmpty ( ) & & player ! = null ) <nl> + if ( ! remainder . isEmpty ( ) & & player ! = null & & doDrain ) <nl> { <nl> ItemHandlerHelper . giveItemToPlayer ( player , remainder ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> index a5c02a6 . . 3fe9cf2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> @ @ - 208 , 14 + 208 , 14 @ @ public class FluidUtil <nl> * If the inventory does not accept the emptied container , it will be given to the player or dropped at the players feet . <nl> * If player is null in this case , the action will be aborted . <nl> * <nl> - * @ param container The Fluid Container Itemstack to fill . This stack WILL be modified on success . <nl> - * @ param fluidSource The fluid source to fill from <nl> - * @ param inventory An inventory where any additionally created item ( filled container if multiple empty are present ) are put <nl> - * @ param maxAmount Maximum amount of fluid to take from the tank . <nl> - * @ param player The player that gets the items the inventory can ' t take . Can be null , only used if the inventory cannot take the filled stack . <nl> + * @ param container The filled Fluid Container Itemstack to empty . This stack WILL be modified on success . <nl> + * @ param fluidDestination The fluid destination to fill from the fluid container . <nl> + * @ param inventory An inventory where any additionally created item ( filled container if multiple empty are present ) are put <nl> + * @ param maxAmount Maximum amount of fluid to take from the tank . <nl> + * @ param player The player that gets the items the inventory can ' t take . Can be null , only used if the inventory cannot take the filled stack . <nl> * @ return True if the container was filled successfully and stowed , false otherwise . <nl> * / <nl> - public static boolean tryEmptyContainerAndStow ( ItemStack container , IFluidHandler fluidSource , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player ) <nl> + public static boolean tryEmptyContainerAndStow ( ItemStack container , IFluidHandler fluidDestination , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player ) <nl> { <nl> if ( container = = null | | container . stackSize < 1 ) <nl> { <nl> @ @ - 224 , 7 + 224 , 7 @ @ public class FluidUtil <nl> <nl> if ( player ! = null & & player . capabilities . isCreativeMode ) <nl> { <nl> - ItemStack emptiedReal = tryEmptyContainer ( container , fluidSource , maxAmount , player , true ) ; <nl> + ItemStack emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; <nl> if ( emptiedReal ! = null ) <nl> { <nl> return true ; <nl> @ @ - 232 , 7 + 232 , 7 @ @ public class FluidUtil <nl> } <nl> else if ( container . stackSize = = 1 ) / / don ' t need to stow anything , just fill and edit the container stack <nl> { <nl> - ItemStack emptiedReal = tryEmptyContainer ( container , fluidSource , maxAmount , player , true ) ; <nl> + ItemStack emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; <nl> if ( emptiedReal ! = null ) <nl> { <nl> if ( emptiedReal . stackSize < = 0 ) <nl> @ @ - 248 , 12 + 248 , 12 @ @ public class FluidUtil <nl> } <nl> else <nl> { <nl> - ItemStack emptiedSimulated = tryEmptyContainer ( container , fluidSource , maxAmount , player , false ) ; <nl> + ItemStack emptiedSimulated = tryEmptyContainer ( container , fluidDestination , maxAmount , player , false ) ; <nl> if ( emptiedSimulated ! = null ) <nl> { <nl> if ( emptiedSimulated . stackSize < = 0 ) <nl> { <nl> - tryEmptyContainer ( container , fluidSource , maxAmount , player , true ) ; <nl> + tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; <nl> container . stackSize - - ; <nl> return true ; <nl> } <nl> @ @ - 263 , 7 + 263 , 7 @ @ public class FluidUtil <nl> ItemStack remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedSimulated , true ) ; <nl> if ( remainder = = null | | player ! = null ) <nl> { <nl> - ItemStack emptiedReal = tryEmptyContainer ( container , fluidSource , maxAmount , player , true ) ; <nl> + ItemStack emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; <nl> remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedReal , false ) ; <nl> <nl> / / give it to the player or drop it at their feet

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 index 5d4368d . . f98d0c7 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 @ @ - 101 , 10 + 101 , 10 @ @ public class FluidUtil 
 IItemHandler playerInventory = player . getCapability ( CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY , null ) ; 
 if ( playerInventory ! = null ) 
 { 
 - FluidActionResult fluidActionResult = tryFillContainerAndStow ( heldItem , handler , playerInventory , Integer . MAX _ VALUE , player ) ; 
 + FluidActionResult fluidActionResult = tryFillContainerAndStow ( heldItem , handler , playerInventory , Integer . MAX _ VALUE , player , true ) ; 
 if ( ! fluidActionResult . isSuccess ( ) ) 
 { 
 - fluidActionResult = tryEmptyContainerAndStow ( heldItem , handler , playerInventory , Integer . MAX _ VALUE , player ) ; 
 + fluidActionResult = tryEmptyContainerAndStow ( heldItem , handler , playerInventory , Integer . MAX _ VALUE , player , true ) ; 
 } 
 
 if ( fluidActionResult . isSuccess ( ) ) 
 @ @ - 122 , 7 + 122 , 7 @ @ public class FluidUtil 
 * 
 * @ param container The container to be filled . Will not be modified . 
 * Separate handling must be done to reduce the stack size , stow containers , etc , on success . 
 - * See { @ link # tryFillContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer ) } . 
 + * See { @ link # tryFillContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer , boolean ) } . 
 * @ param fluidSource The fluid handler to be drained . 
 * @ param maxAmount The largest amount of fluid that should be transferred . 
 * @ param player The player to make the filling noise . Pass null for no noise . 
 @ @ - 145 , 7 + 145 , 7 @ @ public class FluidUtil 
 if ( player ! = null ) 
 { 
 SoundEvent soundevent = simulatedTransfer . getFluid ( ) . getFillSound ( simulatedTransfer ) ; 
 - player . playSound ( soundevent , 1f , 1f ) ; 
 + player . world . playSound ( null , player . posX , player . posY + 0 . 5 , player . posZ , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; 
 } 
 } 
 else 
 @ @ - 165 , 7 + 165 , 7 @ @ public class FluidUtil 
 * 
 * @ param container The filled container . Will not be modified . 
 * Separate handling must be done to reduce the stack size , stow containers , etc , on success . 
 - * See { @ link # tryEmptyContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer ) } . 
 + * See { @ link # tryEmptyContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer , boolean ) } . 
 * @ param fluidDestination The fluid handler to be filled by the container . 
 * @ param maxAmount The largest amount of fluid that should be transferred . 
 * @ param player Player for making the bucket drained sound . Pass null for no noise . 
 @ @ - 188 , 7 + 188 , 7 @ @ public class FluidUtil 
 if ( player ! = null ) 
 { 
 SoundEvent soundevent = transfer . getFluid ( ) . getEmptySound ( transfer ) ; 
 - player . playSound ( soundevent , 1f , 1f ) ; 
 + player . world . playSound ( null , player . posX , player . posY + 0 . 5 , player . posZ , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; 
 } 
 ItemStack resultContainer = containerFluidHandler . getContainer ( ) ; 
 return new FluidActionResult ( resultContainer ) ; 
 @ @ - 223 , 10 + 223 , 35 @ @ public class FluidUtil 
 * @ param player The player that gets the items the inventory can ' t take . 
 * Can be null , only used if the inventory cannot take the filled stack . 
 * @ return a { @ link FluidActionResult } holding the result and the resulting container . The resulting container is empty on failure . 
 + * @ deprecated use { @ link # tryFillContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer , boolean ) } 
 * / 
 + @ Deprecated / / TODO remove in 1 . 13 
 @ Nonnull 
 public static FluidActionResult tryFillContainerAndStow ( @ Nonnull ItemStack container , IFluidHandler fluidSource , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player ) 
 { 
 + return tryFillContainerAndStow ( container , fluidSource , inventory , maxAmount , player , true ) ; 
 + } 
 + 
 + / * * 
 + * Takes an Fluid Container Item and tries to fill it from the given tank . 
 + * If the player is in creative mode , the container will not be modified on success , and no additional items created . 
 + * If the input itemstack has a stacksize > 1 it will stow the filled container in the given inventory . 
 + * If the inventory does not accept it , it will be given to the player or dropped at the players feet . 
 + * If player is null in this case , the action will be aborted . 
 + * 
 + * @ param container The Fluid Container ItemStack to fill . 
 + * Will not be modified directly , if modifications are necessary a modified copy is returned in the result . 
 + * @ param fluidSource The fluid source to fill from 
 + * @ param inventory An inventory where any additionally created item ( filled container if multiple empty are present ) are put 
 + * @ param maxAmount Maximum amount of fluid to take from the tank . 
 + * @ param player The player that gets the items the inventory can ' t take . 
 + * Can be null , only used if the inventory cannot take the filled stack . 
 + * @ param doFill true if the container should actually be filled , false if it should be simulated . 
 + * @ return a { @ link FluidActionResult } holding the result and the resulting container . The resulting container is empty on failure . 
 + * / 
 + @ Nonnull 
 + public static FluidActionResult tryFillContainerAndStow ( @ Nonnull ItemStack container , IFluidHandler fluidSource , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player , boolean doFill ) 
 + { 
 if ( container . isEmpty ( ) ) 
 { 
 return FluidActionResult . FAILURE ; 
 @ @ - 234 , 7 + 259 , 7 @ @ public class FluidUtil 
 
 if ( player ! = null & & player . capabilities . isCreativeMode ) 
 { 
 - FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , true ) ; 
 + FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , doFill ) ; 
 if ( filledReal . isSuccess ( ) ) 
 { 
 return new FluidActionResult ( container ) ; / / creative mode : item does not change 
 @ @ - 242 , 7 + 267 , 7 @ @ public class FluidUtil 
 } 
 else if ( container . getCount ( ) = = 1 ) / / don ' t need to stow anything , just fill the container stack 
 { 
 - FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , true ) ; 
 + FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , doFill ) ; 
 if ( filledReal . isSuccess ( ) ) 
 { 
 return filledReal ; 
 @ @ - 257 , 11 + 282 , 11 @ @ public class FluidUtil 
 ItemStack remainder = ItemHandlerHelper . insertItemStacked ( inventory , filledSimulated . getResult ( ) , true ) ; 
 if ( remainder . isEmpty ( ) | | player ! = null ) 
 { 
 - FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , true ) ; 
 - remainder = ItemHandlerHelper . insertItemStacked ( inventory , filledReal . getResult ( ) , false ) ; 
 + FluidActionResult filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , doFill ) ; 
 + remainder = ItemHandlerHelper . insertItemStacked ( inventory , filledReal . getResult ( ) , ! doFill ) ; 
 
 / / give it to the player or drop it at their feet 
 - if ( ! remainder . isEmpty ( ) & & player ! = null ) 
 + if ( ! remainder . isEmpty ( ) & & player ! = null & & doFill ) 
 { 
 ItemHandlerHelper . giveItemToPlayer ( player , remainder ) ; 
 } 
 @ @ - 290 , 10 + 315 , 34 @ @ public class FluidUtil 
 * @ param maxAmount Maximum amount of fluid to take from the tank . 
 * @ param player The player that gets the items the inventory can ' t take . Can be null , only used if the inventory cannot take the filled stack . 
 * @ return a { @ link FluidActionResult } holding the result and the resulting container . The resulting container is empty on failure . 
 + * @ deprecated use { @ link # tryEmptyContainerAndStow ( ItemStack , IFluidHandler , IItemHandler , int , EntityPlayer , boolean ) } 
 * / 
 + @ Deprecated / / TODO : remove in 1 . 13 
 @ Nonnull 
 public static FluidActionResult tryEmptyContainerAndStow ( @ Nonnull ItemStack container , IFluidHandler fluidDestination , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player ) 
 { 
 + return tryEmptyContainerAndStow ( container , fluidDestination , inventory , maxAmount , player , true ) ; 
 + } 
 + 
 + / * * 
 + * Takes an Fluid Container Item , tries to empty it into the fluid handler , and stows it in the given inventory . 
 + * If the player is in creative mode , the container will not be modified on success , and no additional items created . 
 + * If the input itemstack has a stacksize > 1 it will stow the emptied container in the given inventory . 
 + * If the inventory does not accept the emptied container , it will be given to the player or dropped at the players feet . 
 + * If player is null in this case , the action will be aborted . 
 + * 
 + * @ param container The filled Fluid Container Itemstack to empty . 
 + * Will not be modified directly , if modifications are necessary a modified copy is returned in the result . 
 + * @ param fluidDestination The fluid destination to fill from the fluid container . 
 + * @ param inventory An inventory where any additionally created item ( filled container if multiple empty are present ) are put 
 + * @ param maxAmount Maximum amount of fluid to take from the tank . 
 + * @ param player The player that gets the items the inventory can ' t take . Can be null , only used if the inventory cannot take the filled stack . 
 + * @ param doDrain true if the container should actually be drained , false if it should be simulated . 
 + * @ return a { @ link FluidActionResult } holding the result and the resulting container . The resulting container is empty on failure . 
 + * / 
 + @ Nonnull 
 + public static FluidActionResult tryEmptyContainerAndStow ( @ Nonnull ItemStack container , IFluidHandler fluidDestination , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player , boolean doDrain ) 
 + { 
 if ( container . isEmpty ( ) ) 
 { 
 return FluidActionResult . FAILURE ; 
 @ @ - 301 , 7 + 350 , 7 @ @ public class FluidUtil 
 
 if ( player ! = null & & player . capabilities . isCreativeMode ) 
 { 
 - FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; 
 + FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , doDrain ) ; 
 if ( emptiedReal . isSuccess ( ) ) 
 { 
 return new FluidActionResult ( container ) ; / / creative mode : item does not change 
 @ @ - 309 , 7 + 358 , 7 @ @ public class FluidUtil 
 } 
 else if ( container . getCount ( ) = = 1 ) / / don ' t need to stow anything , just fill and edit the container stack 
 { 
 - FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; 
 + FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , doDrain ) ; 
 if ( emptiedReal . isSuccess ( ) ) 
 { 
 return emptiedReal ; 
 @ @ - 324 , 11 + 373 , 11 @ @ public class FluidUtil 
 ItemStack remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedSimulated . getResult ( ) , true ) ; 
 if ( remainder . isEmpty ( ) | | player ! = null ) 
 { 
 - FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; 
 - remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedReal . getResult ( ) , false ) ; 
 + FluidActionResult emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , doDrain ) ; 
 + remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedReal . getResult ( ) , ! doDrain ) ; 
 
 / / give it to the player or drop it at their feet 
 - if ( ! remainder . isEmpty ( ) & & player ! = null ) 
 + if ( ! remainder . isEmpty ( ) & & player ! = null & & doDrain ) 
 { 
 ItemHandlerHelper . giveItemToPlayer ( player , remainder ) ; 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 index a5c02a6 . . 3fe9cf2 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 @ @ - 208 , 14 + 208 , 14 @ @ public class FluidUtil 
 * If the inventory does not accept the emptied container , it will be given to the player or dropped at the players feet . 
 * If player is null in this case , the action will be aborted . 
 * 
 - * @ param container The Fluid Container Itemstack to fill . This stack WILL be modified on success . 
 - * @ param fluidSource The fluid source to fill from 
 - * @ param inventory An inventory where any additionally created item ( filled container if multiple empty are present ) are put 
 - * @ param maxAmount Maximum amount of fluid to take from the tank . 
 - * @ param player The player that gets the items the inventory can ' t take . Can be null , only used if the inventory cannot take the filled stack . 
 + * @ param container The filled Fluid Container Itemstack to empty . This stack WILL be modified on success . 
 + * @ param fluidDestination The fluid destination to fill from the fluid container . 
 + * @ param inventory An inventory where any additionally created item ( filled container if multiple empty are present ) are put 
 + * @ param maxAmount Maximum amount of fluid to take from the tank . 
 + * @ param player The player that gets the items the inventory can ' t take . Can be null , only used if the inventory cannot take the filled stack . 
 * @ return True if the container was filled successfully and stowed , false otherwise . 
 * / 
 - public static boolean tryEmptyContainerAndStow ( ItemStack container , IFluidHandler fluidSource , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player ) 
 + public static boolean tryEmptyContainerAndStow ( ItemStack container , IFluidHandler fluidDestination , IItemHandler inventory , int maxAmount , @ Nullable EntityPlayer player ) 
 { 
 if ( container = = null | | container . stackSize < 1 ) 
 { 
 @ @ - 224 , 7 + 224 , 7 @ @ public class FluidUtil 
 
 if ( player ! = null & & player . capabilities . isCreativeMode ) 
 { 
 - ItemStack emptiedReal = tryEmptyContainer ( container , fluidSource , maxAmount , player , true ) ; 
 + ItemStack emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; 
 if ( emptiedReal ! = null ) 
 { 
 return true ; 
 @ @ - 232 , 7 + 232 , 7 @ @ public class FluidUtil 
 } 
 else if ( container . stackSize = = 1 ) / / don ' t need to stow anything , just fill and edit the container stack 
 { 
 - ItemStack emptiedReal = tryEmptyContainer ( container , fluidSource , maxAmount , player , true ) ; 
 + ItemStack emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; 
 if ( emptiedReal ! = null ) 
 { 
 if ( emptiedReal . stackSize < = 0 ) 
 @ @ - 248 , 12 + 248 , 12 @ @ public class FluidUtil 
 } 
 else 
 { 
 - ItemStack emptiedSimulated = tryEmptyContainer ( container , fluidSource , maxAmount , player , false ) ; 
 + ItemStack emptiedSimulated = tryEmptyContainer ( container , fluidDestination , maxAmount , player , false ) ; 
 if ( emptiedSimulated ! = null ) 
 { 
 if ( emptiedSimulated . stackSize < = 0 ) 
 { 
 - tryEmptyContainer ( container , fluidSource , maxAmount , player , true ) ; 
 + tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; 
 container . stackSize - - ; 
 return true ; 
 } 
 @ @ - 263 , 7 + 263 , 7 @ @ public class FluidUtil 
 ItemStack remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedSimulated , true ) ; 
 if ( remainder = = null | | player ! = null ) 
 { 
 - ItemStack emptiedReal = tryEmptyContainer ( container , fluidSource , maxAmount , player , true ) ; 
 + ItemStack emptiedReal = tryEmptyContainer ( container , fluidDestination , maxAmount , player , true ) ; 
 remainder = ItemHandlerHelper . insertItemStacked ( inventory , emptiedReal , false ) ; 
 
 / / give it to the player or drop it at their feet
