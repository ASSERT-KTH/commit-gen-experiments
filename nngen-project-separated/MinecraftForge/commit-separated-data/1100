BLEU SCORE: 0.03152341315267391

TEST MSG: And fix itemblocks being removed , leaving behind a residual block . This
GENERATED MSG: Split loadmods into loadmods and preinitmods , to allow resource loading to occur * always * between the two phases . This should fix

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / event / FMLMissingMappingsEvent . java b / fml / src / main / java / cpw / mods / fml / common / event / FMLMissingMappingsEvent . java <nl> index 94ea8e3 . . 8b9dc04 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / event / FMLMissingMappingsEvent . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / event / FMLMissingMappingsEvent . java <nl> @ @ - 52 , 7 + 52 , 11 @ @ public class FMLMissingMappingsEvent extends FMLEvent { <nl> / * * <nl> * Remap this name to a new name ( add a migration mapping ) <nl> * / <nl> - REMAP <nl> + REMAP , <nl> + / * * <nl> + * Allow a block to exist without itemblock anymore <nl> + * / <nl> + BLOCKONLY <nl> } <nl> public static class MissingMapping { <nl> public final GameRegistry . Type type ; <nl> @ @ - 138 , 6 + 142 , 12 @ @ public class FMLMissingMappingsEvent extends FMLEvent { <nl> this . target = target ; <nl> } <nl> <nl> + public void skipItemBlock ( ) <nl> + { <nl> + if ( type ! = GameRegistry . Type . ITEM ) throw new IllegalArgumentException ( " Cannot skip an item that is a block " ) ; <nl> + if ( GameData . getBlockRegistry ( ) . getRaw ( id ) = = null ) throw new IllegalArgumentException ( " Cannot skip an ItemBlock that doesn ' t have a Block " ) ; <nl> + action = Action . BLOCKONLY ; <nl> + } <nl> / / internal <nl> <nl> public Action getAction ( ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java b / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java <nl> index b4c59f1 . . ec1f308 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java <nl> @ @ - 632 , 6 + 632 , 12 @ @ public class GameData { <nl> remaps . put ( newName , new Integer [ ] { currId , newId } ) ; <nl> } <nl> } <nl> + else if ( action = = FMLMissingMappingsEvent . Action . BLOCKONLY ) <nl> + { <nl> + / / Pulled out specifically so the block doesn ' t get reassigned a new ID just because it ' s <nl> + / / Item block has gone away <nl> + FMLLog . fine ( " The ItemBlock % s is no longer present in the game . The residual block will remain " , remap . name ) ; <nl> + } <nl> else <nl> { <nl> / / block item missing , warn as requested and block the id
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> index fdf9697 . . 46475e8 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 229 , 7 + 229 , 25 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> haltGame ( " There was a severe problem during mod loading that has caused the game to fail " , le ) ; <nl> return ; <nl> } <nl> + finally <nl> + { <nl> + client . refreshResources ( ) ; <nl> + } <nl> <nl> + try <nl> + { <nl> + Loader . instance ( ) . preinitializeMods ( ) ; <nl> + } <nl> + catch ( CustomModLoadingErrorDisplayException custom ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , custom , " A custom exception was thrown by a mod , the game will now halt " ) ; <nl> + customError = custom ; <nl> + } <nl> + catch ( LoaderException le ) <nl> + { <nl> + haltGame ( " There was a severe problem during mod loading that has caused the game to fail " , le ) ; <nl> + return ; <nl> + } <nl> Map < String , Map < String , String > > sharedModList = ( Map < String , Map < String , String > > ) Launch . blackboard . get ( " modList " ) ; <nl> if ( sharedModList = = null ) <nl> { <nl> @ @ - 566 , 12 + 584 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> } <nl> <nl> - @ Override <nl> - public void updateResourcePackList ( ) <nl> - { <nl> - client . refreshResources ( ) ; <nl> - } <nl> - <nl> public IResourcePack getResourcePackFor ( String modId ) <nl> { <nl> return resourcePackMap . get ( modId ) ; <nl> @ @ - 813 , 7 + 825 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> public void setPlayClient ( NetHandlerPlayClient netHandlerPlayClient ) <nl> { <nl> playClientBlock . countDown ( ) ; <nl> - this . currentPlayClient = new WeakReference ( netHandlerPlayClient ) ; <nl> + this . currentPlayClient = new WeakReference < NetHandlerPlayClient > ( netHandlerPlayClient ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> index 44d563e . . 906e8d4 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> @ @ - 514 , 11 + 514 , 6 @ @ public class FMLCommonHandler <nl> sidedDelegate . addModAsResource ( container ) ; <nl> } <nl> <nl> - public void updateResourcePackList ( ) <nl> - { <nl> - sidedDelegate . updateResourcePackList ( ) ; <nl> - } <nl> - <nl> public String getCurrentLanguage ( ) <nl> { <nl> <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> index 0d4cf8b . . 3ab8795 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java <nl> @ @ - 46 , 8 + 46 , 6 @ @ public interface IFMLSidedHandler <nl> <nl> void addModAsResource ( ModContainer container ) ; <nl> <nl> - void updateResourcePackList ( ) ; <nl> - <nl> String getCurrentLanguage ( ) ; <nl> <nl> void serverStopped ( ) ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / LoadController . java b / fml / src / main / java / cpw / mods / fml / common / LoadController . java <nl> index bbee723 . . 6c8b915 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / LoadController . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / LoadController . java <nl> @ @ - 109 , 7 + 109 , 6 @ @ public class LoadController <nl> } <nl> <nl> eventChannels = eventBus . build ( ) ; <nl> - FMLCommonHandler . instance ( ) . updateResourcePackList ( ) ; <nl> } <nl> <nl> public void distributeStateMessage ( LoaderState state , Object . . . eventData ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / Loader . java b / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> index 8320dbf . . 1a14f91 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> @ @ - 148 , 6 + 148 , 7 @ @ public class Loader <nl> private static List < String > injectedContainers ; <nl> private ImmutableMap < String , String > fmlBrandingProperties ; <nl> private File forcedModFile ; <nl> + private ModDiscoverer discoverer ; <nl> <nl> public static Loader instance ( ) <nl> { <nl> @ @ - 462 , 15 + 463 , 15 @ @ public class Loader <nl> namedMods = Maps . newHashMap ( ) ; <nl> modController = new LoadController ( this ) ; <nl> modController . transition ( LoaderState . LOADING , false ) ; <nl> - ModDiscoverer disc = identifyMods ( ) ; <nl> - ModAPIManager . INSTANCE . manageAPI ( modClassLoader , disc ) ; <nl> + discoverer = identifyMods ( ) ; <nl> + ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; <nl> disableRequestedMods ( ) ; <nl> modController . distributeStateMessage ( FMLLoadEvent . class ) ; <nl> sortModList ( ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; <nl> mods = ImmutableList . copyOf ( mods ) ; <nl> - for ( File nonMod : disc . getNonModLibs ( ) ) <nl> + for ( File nonMod : discoverer . getNonModLibs ( ) ) <nl> { <nl> if ( nonMod . isFile ( ) ) <nl> { <nl> @ @ - 486 , 7 + 487 , 7 @ @ public class Loader <nl> } <nl> } <nl> modController . transition ( LoaderState . CONSTRUCTING , false ) ; <nl> - modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , disc . getASMTable ( ) , reverseDependencies ) ; <nl> + modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , discoverer . getASMTable ( ) , reverseDependencies ) ; <nl> FMLLog . fine ( " Mod signature data " ) ; <nl> for ( ModContainer mod : getActiveModList ( ) ) <nl> { <nl> @ @ - 497 , 7 + 498 , 11 @ @ public class Loader <nl> FMLLog . fine ( " No user mod signature data found " ) ; <nl> } <nl> modController . transition ( LoaderState . PREINITIALIZATION , false ) ; <nl> - modController . distributeStateMessage ( LoaderState . PREINITIALIZATION , disc . getASMTable ( ) , canonicalConfigDir ) ; <nl> + } <nl> + <nl> + public void preinitializeMods ( ) <nl> + { <nl> + modController . distributeStateMessage ( LoaderState . PREINITIALIZATION , discoverer . getASMTable ( ) , canonicalConfigDir ) ; <nl> modController . transition ( LoaderState . INITIALIZATION , false ) ; <nl> } <nl> <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> index 5dfcc3a . . 3692c66 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> @ @ - 85 , 6 + 85 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> server = minecraftServer ; <nl> Loader . instance ( ) . loadMods ( ) ; <nl> + Loader . instance ( ) . preinitializeMods ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 221 , 11 + 222 , 6 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> } <nl> <nl> @ Override <nl> - public void updateResourcePackList ( ) <nl> - { <nl> - <nl> - } <nl> - @ Override <nl> public String getCurrentLanguage ( ) <nl> { <nl> return " en _ US " ;

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / event / FMLMissingMappingsEvent . java b / fml / src / main / java / cpw / mods / fml / common / event / FMLMissingMappingsEvent . java 
 index 94ea8e3 . . 8b9dc04 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / event / FMLMissingMappingsEvent . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / event / FMLMissingMappingsEvent . java 
 @ @ - 52 , 7 + 52 , 11 @ @ public class FMLMissingMappingsEvent extends FMLEvent { 
 / * * 
 * Remap this name to a new name ( add a migration mapping ) 
 * / 
 - REMAP 
 + REMAP , 
 + / * * 
 + * Allow a block to exist without itemblock anymore 
 + * / 
 + BLOCKONLY 
 } 
 public static class MissingMapping { 
 public final GameRegistry . Type type ; 
 @ @ - 138 , 6 + 142 , 12 @ @ public class FMLMissingMappingsEvent extends FMLEvent { 
 this . target = target ; 
 } 
 
 + public void skipItemBlock ( ) 
 + { 
 + if ( type ! = GameRegistry . Type . ITEM ) throw new IllegalArgumentException ( " Cannot skip an item that is a block " ) ; 
 + if ( GameData . getBlockRegistry ( ) . getRaw ( id ) = = null ) throw new IllegalArgumentException ( " Cannot skip an ItemBlock that doesn ' t have a Block " ) ; 
 + action = Action . BLOCKONLY ; 
 + } 
 / / internal 
 
 public Action getAction ( ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java b / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java 
 index b4c59f1 . . ec1f308 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / registry / GameData . java 
 @ @ - 632 , 6 + 632 , 12 @ @ public class GameData { 
 remaps . put ( newName , new Integer [ ] { currId , newId } ) ; 
 } 
 } 
 + else if ( action = = FMLMissingMappingsEvent . Action . BLOCKONLY ) 
 + { 
 + / / Pulled out specifically so the block doesn ' t get reassigned a new ID just because it ' s 
 + / / Item block has gone away 
 + FMLLog . fine ( " The ItemBlock % s is no longer present in the game . The residual block will remain " , remap . name ) ; 
 + } 
 else 
 { 
 / / block item missing , warn as requested and block the id

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 index fdf9697 . . 46475e8 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 229 , 7 + 229 , 25 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 haltGame ( " There was a severe problem during mod loading that has caused the game to fail " , le ) ; 
 return ; 
 } 
 + finally 
 + { 
 + client . refreshResources ( ) ; 
 + } 
 
 + try 
 + { 
 + Loader . instance ( ) . preinitializeMods ( ) ; 
 + } 
 + catch ( CustomModLoadingErrorDisplayException custom ) 
 + { 
 + FMLLog . log ( Level . ERROR , custom , " A custom exception was thrown by a mod , the game will now halt " ) ; 
 + customError = custom ; 
 + } 
 + catch ( LoaderException le ) 
 + { 
 + haltGame ( " There was a severe problem during mod loading that has caused the game to fail " , le ) ; 
 + return ; 
 + } 
 Map < String , Map < String , String > > sharedModList = ( Map < String , Map < String , String > > ) Launch . blackboard . get ( " modList " ) ; 
 if ( sharedModList = = null ) 
 { 
 @ @ - 566 , 12 + 584 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 } 
 
 - @ Override 
 - public void updateResourcePackList ( ) 
 - { 
 - client . refreshResources ( ) ; 
 - } 
 - 
 public IResourcePack getResourcePackFor ( String modId ) 
 { 
 return resourcePackMap . get ( modId ) ; 
 @ @ - 813 , 7 + 825 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 public void setPlayClient ( NetHandlerPlayClient netHandlerPlayClient ) 
 { 
 playClientBlock . countDown ( ) ; 
 - this . currentPlayClient = new WeakReference ( netHandlerPlayClient ) ; 
 + this . currentPlayClient = new WeakReference < NetHandlerPlayClient > ( netHandlerPlayClient ) ; 
 } 
 
 @ Override 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 index 44d563e . . 906e8d4 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 @ @ - 514 , 11 + 514 , 6 @ @ public class FMLCommonHandler 
 sidedDelegate . addModAsResource ( container ) ; 
 } 
 
 - public void updateResourcePackList ( ) 
 - { 
 - sidedDelegate . updateResourcePackList ( ) ; 
 - } 
 - 
 public String getCurrentLanguage ( ) 
 { 
 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 index 0d4cf8b . . 3ab8795 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / IFMLSidedHandler . java 
 @ @ - 46 , 8 + 46 , 6 @ @ public interface IFMLSidedHandler 
 
 void addModAsResource ( ModContainer container ) ; 
 
 - void updateResourcePackList ( ) ; 
 - 
 String getCurrentLanguage ( ) ; 
 
 void serverStopped ( ) ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / LoadController . java b / fml / src / main / java / cpw / mods / fml / common / LoadController . java 
 index bbee723 . . 6c8b915 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / LoadController . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / LoadController . java 
 @ @ - 109 , 7 + 109 , 6 @ @ public class LoadController 
 } 
 
 eventChannels = eventBus . build ( ) ; 
 - FMLCommonHandler . instance ( ) . updateResourcePackList ( ) ; 
 } 
 
 public void distributeStateMessage ( LoaderState state , Object . . . eventData ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / Loader . java b / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 index 8320dbf . . 1a14f91 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 @ @ - 148 , 6 + 148 , 7 @ @ public class Loader 
 private static List < String > injectedContainers ; 
 private ImmutableMap < String , String > fmlBrandingProperties ; 
 private File forcedModFile ; 
 + private ModDiscoverer discoverer ; 
 
 public static Loader instance ( ) 
 { 
 @ @ - 462 , 15 + 463 , 15 @ @ public class Loader 
 namedMods = Maps . newHashMap ( ) ; 
 modController = new LoadController ( this ) ; 
 modController . transition ( LoaderState . LOADING , false ) ; 
 - ModDiscoverer disc = identifyMods ( ) ; 
 - ModAPIManager . INSTANCE . manageAPI ( modClassLoader , disc ) ; 
 + discoverer = identifyMods ( ) ; 
 + ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; 
 disableRequestedMods ( ) ; 
 modController . distributeStateMessage ( FMLLoadEvent . class ) ; 
 sortModList ( ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; 
 mods = ImmutableList . copyOf ( mods ) ; 
 - for ( File nonMod : disc . getNonModLibs ( ) ) 
 + for ( File nonMod : discoverer . getNonModLibs ( ) ) 
 { 
 if ( nonMod . isFile ( ) ) 
 { 
 @ @ - 486 , 7 + 487 , 7 @ @ public class Loader 
 } 
 } 
 modController . transition ( LoaderState . CONSTRUCTING , false ) ; 
 - modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , disc . getASMTable ( ) , reverseDependencies ) ; 
 + modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , discoverer . getASMTable ( ) , reverseDependencies ) ; 
 FMLLog . fine ( " Mod signature data " ) ; 
 for ( ModContainer mod : getActiveModList ( ) ) 
 { 
 @ @ - 497 , 7 + 498 , 11 @ @ public class Loader 
 FMLLog . fine ( " No user mod signature data found " ) ; 
 } 
 modController . transition ( LoaderState . PREINITIALIZATION , false ) ; 
 - modController . distributeStateMessage ( LoaderState . PREINITIALIZATION , disc . getASMTable ( ) , canonicalConfigDir ) ; 
 + } 
 + 
 + public void preinitializeMods ( ) 
 + { 
 + modController . distributeStateMessage ( LoaderState . PREINITIALIZATION , discoverer . getASMTable ( ) , canonicalConfigDir ) ; 
 modController . transition ( LoaderState . INITIALIZATION , false ) ; 
 } 
 
 diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 index 5dfcc3a . . 3692c66 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 @ @ - 85 , 6 + 85 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 server = minecraftServer ; 
 Loader . instance ( ) . loadMods ( ) ; 
 + Loader . instance ( ) . preinitializeMods ( ) ; 
 } 
 
 / * * 
 @ @ - 221 , 11 + 222 , 6 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 } 
 
 @ Override 
 - public void updateResourcePackList ( ) 
 - { 
 - 
 - } 
 - @ Override 
 public String getCurrentLanguage ( ) 
 { 
 return " en _ US " ;
