BLEU SCORE: 0.10594272545163826

TEST MSG: Make MOD _ CLASSES available to the forge development environment as well .
GENERATED MSG: Change MOD _ CLASSES to support % % separated paths , that are grouped into

TEST DIFF (one line): diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> index 5ccd474 . . 0525a20 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> @ @ - 24 , 20 + 24 , 21 @ @ import cpw . mods . modlauncher . api . IEnvironment ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoaderBuilder ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> + import java . io . File ; <nl> import java . net . URL ; <nl> import java . net . URLConnection ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> - import java . util . Arrays ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - import java . util . Optional ; <nl> + import java . nio . file . Paths ; <nl> + import java . util . * ; <nl> import java . util . function . Function ; <nl> import java . util . function . Predicate ; <nl> import java . util . jar . Manifest ; <nl> + import java . util . stream . Collectors ; <nl> import java . util . stream . Stream ; <nl> <nl> import static net . minecraftforge . fml . loading . LogMarkers . CORE ; <nl> @ @ - 85 , 6 + 86 , 26 @ @ public abstract class FMLCommonLaunchHandler <nl> FMLLoader . beforeStart ( launchClassLoader ) ; <nl> } <nl> <nl> + protected void processModClassesEnvironmentVariable ( final Map < String , List < Pair < Path , List < Path > > > > arguments ) { <nl> + LOGGER . info ( CORE , " Got mod coordinates { } from env " , System . getenv ( " MOD _ CLASSES " ) ) ; <nl> + <nl> + / / " a / b / ; c / d / ; " - > " modid % % c : \ fish \ pepper ; modid % % c : \ fish2 \ pepper2 \ ; modid2 % % c : \ fishy \ bums ; modid2 % % c : \ hmm " <nl> + final Map < String , List < Path > > modClassPaths = Arrays . stream ( System . getenv ( " MOD _ CLASSES " ) . split ( File . pathSeparator ) ) . <nl> + map ( inp - > inp . split ( " % % " , 2 ) ) . map ( this : : buildModPair ) . <nl> + collect ( Collectors . groupingBy ( Pair : : getLeft , Collectors . mapping ( Pair : : getRight , Collectors . toList ( ) ) ) ) ; <nl> + <nl> + LOGGER . info ( CORE , " Found supplied mod coordinates [ { } ] " , modClassPaths ) ; <nl> + <nl> + final List < Pair < Path , List < Path > > > explodedTargets = arguments . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) ; <nl> + modClassPaths . forEach ( ( modlabel , paths ) - > explodedTargets . add ( Pair . of ( paths . get ( 0 ) , paths . subList ( 1 , paths . size ( ) ) ) ) ) ; <nl> + } <nl> + <nl> + private Pair < String , Path > buildModPair ( String [ ] splitString ) { <nl> + String modid = splitString . length = = 1 ? " defaultmodid " : splitString [ 0 ] ; <nl> + Path path = Paths . get ( splitString [ splitString . length - 1 ] ) ; <nl> + return Pair . of ( modid , path ) ; <nl> + } <nl> + <nl> protected void validatePaths ( final Path forgePath , final Path [ ] mcPaths , String forgeVersion , String mcVersion , String mcpVersion ) { <nl> if ( ! Files . exists ( forgePath ) ) { <nl> LOGGER . fatal ( CORE , " Failed to find forge version { } for MC { } at { } " , forgeVersion , mcVersion , forgePath ) ; <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> index 5c68ba6 . . 263851b 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> @ @ - 84 , 6 + 84 , 8 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement <nl> final Path forgemodstoml = LibraryFinder . findJarPathFor ( " META - INF / mods . toml " , " forgemodstoml " ) ; <nl> ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) . <nl> add ( Pair . of ( forgemodstoml , Collections . singletonList ( compiledClasses ) ) ) ; <nl> + <nl> + processModClassesEnvironmentVariable ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java <nl> index 78d3ed9 . . eb79482 100644 <nl> - - - a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java <nl> @ @ - 83 , 29 + 83 , 13 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { <nl> throw new RuntimeException ( " wha ? " , e ) ; <nl> } <nl> <nl> - LOGGER . fatal ( CORE , " Got mod coordinates { } from env " , System . getenv ( " MOD _ CLASSES " ) ) ; <nl> - <nl> - / / " a / b / ; c / d / ; " - > " modid % % c : \ fish \ pepper ; modid % % c : \ fish2 \ pepper2 \ ; modid2 % % c : \ fishy \ bums ; modid2 % % c : \ hmm " <nl> - final Map < String , List < Path > > modClassPaths = Arrays . stream ( System . getenv ( " MOD _ CLASSES " ) . split ( File . pathSeparator ) ) . <nl> - map ( inp - > inp . split ( " % % " , 2 ) ) . map ( this : : buildModPair ) . <nl> - collect ( Collectors . groupingBy ( Pair : : getLeft , Collectors . mapping ( Pair : : getRight , Collectors . toList ( ) ) ) ) ; <nl> - <nl> - LOGGER . info ( CORE , " Found supplied mod coordinates [ { } ] " , modClassPaths ) ; <nl> - <nl> - final List < Pair < Path , List < Path > > > explodedTargets = ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) ; <nl> - modClassPaths . forEach ( ( modlabel , paths ) - > explodedTargets . add ( Pair . of ( paths . get ( 0 ) , paths . subList ( 1 , paths . size ( ) ) ) ) ) ; <nl> + processModClassesEnvironmentVariable ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) ; <nl> <nl> / / generics are gross yea ? <nl> ( ( Map ) arguments ) . put ( " mavenRoots " , mavenRoots ) ; <nl> ( ( Map ) arguments ) . put ( " mods " , mods ) ; <nl> } <nl> <nl> - private Pair < String , Path > buildModPair ( String [ ] splitString ) { <nl> - String modid = splitString . length = = 1 ? " defaultmodid " : splitString [ 0 ] ; <nl> - Path path = Paths . get ( splitString [ splitString . length - 1 ] ) ; <nl> - return Pair . of ( modid , path ) ; <nl> - } <nl> - <nl> @ Override <nl> protected void validatePaths ( final Path forgePath , final Path [ ] mcPaths , final String forgeVersion , final String mcVersion , final String mcpVersion ) { <nl>
NEAREST DIFF (one line): diff - - git a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java <nl> index 7e09fa7 . . 78d3ed9 100644 <nl> - - - a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java <nl> @ @ - 85 , 20 + 85 , 27 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { <nl> <nl> LOGGER . fatal ( CORE , " Got mod coordinates { } from env " , System . getenv ( " MOD _ CLASSES " ) ) ; <nl> <nl> - final List < Path > modClasses = Arrays . stream ( System . getenv ( " MOD _ CLASSES " ) . split ( File . pathSeparator ) ) . <nl> - map ( Paths : : get ) . collect ( Collectors . toList ( ) ) ; <nl> + / / " a / b / ; c / d / ; " - > " modid % % c : \ fish \ pepper ; modid % % c : \ fish2 \ pepper2 \ ; modid2 % % c : \ fishy \ bums ; modid2 % % c : \ hmm " <nl> + final Map < String , List < Path > > modClassPaths = Arrays . stream ( System . getenv ( " MOD _ CLASSES " ) . split ( File . pathSeparator ) ) . <nl> + map ( inp - > inp . split ( " % % " , 2 ) ) . map ( this : : buildModPair ) . <nl> + collect ( Collectors . groupingBy ( Pair : : getLeft , Collectors . mapping ( Pair : : getRight , Collectors . toList ( ) ) ) ) ; <nl> <nl> - LOGGER . fatal ( CORE , " Processed mod coordinates [ { } ] " , modClasses . stream ( ) . map ( Object : : toString ) . collect ( Collectors . joining ( " , " ) ) ) ; <nl> - <nl> - ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) . <nl> - add ( Pair . of ( modClasses . get ( 0 ) , modClasses . subList ( 1 , modClasses . size ( ) ) ) ) ; <nl> + LOGGER . info ( CORE , " Found supplied mod coordinates [ { } ] " , modClassPaths ) ; <nl> <nl> + final List < Pair < Path , List < Path > > > explodedTargets = ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) ; <nl> + modClassPaths . forEach ( ( modlabel , paths ) - > explodedTargets . add ( Pair . of ( paths . get ( 0 ) , paths . subList ( 1 , paths . size ( ) ) ) ) ) ; <nl> <nl> / / generics are gross yea ? <nl> ( ( Map ) arguments ) . put ( " mavenRoots " , mavenRoots ) ; <nl> ( ( Map ) arguments ) . put ( " mods " , mods ) ; <nl> } <nl> <nl> + private Pair < String , Path > buildModPair ( String [ ] splitString ) { <nl> + String modid = splitString . length = = 1 ? " defaultmodid " : splitString [ 0 ] ; <nl> + Path path = Paths . get ( splitString [ splitString . length - 1 ] ) ; <nl> + return Pair . of ( modid , path ) ; <nl> + } <nl> + <nl> @ Override <nl> protected void validatePaths ( final Path forgePath , final Path [ ] mcPaths , final String forgeVersion , final String mcVersion , final String mcpVersion ) { <nl>

TEST DIFF:
diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 index 5ccd474 . . 0525a20 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 @ @ - 24 , 20 + 24 , 21 @ @ import cpw . mods . modlauncher . api . IEnvironment ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoaderBuilder ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 + import java . io . File ; 
 import java . net . URL ; 
 import java . net . URLConnection ; 
 import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 - import java . util . Arrays ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - import java . util . Optional ; 
 + import java . nio . file . Paths ; 
 + import java . util . * ; 
 import java . util . function . Function ; 
 import java . util . function . Predicate ; 
 import java . util . jar . Manifest ; 
 + import java . util . stream . Collectors ; 
 import java . util . stream . Stream ; 
 
 import static net . minecraftforge . fml . loading . LogMarkers . CORE ; 
 @ @ - 85 , 6 + 86 , 26 @ @ public abstract class FMLCommonLaunchHandler 
 FMLLoader . beforeStart ( launchClassLoader ) ; 
 } 
 
 + protected void processModClassesEnvironmentVariable ( final Map < String , List < Pair < Path , List < Path > > > > arguments ) { 
 + LOGGER . info ( CORE , " Got mod coordinates { } from env " , System . getenv ( " MOD _ CLASSES " ) ) ; 
 + 
 + / / " a / b / ; c / d / ; " - > " modid % % c : \ fish \ pepper ; modid % % c : \ fish2 \ pepper2 \ ; modid2 % % c : \ fishy \ bums ; modid2 % % c : \ hmm " 
 + final Map < String , List < Path > > modClassPaths = Arrays . stream ( System . getenv ( " MOD _ CLASSES " ) . split ( File . pathSeparator ) ) . 
 + map ( inp - > inp . split ( " % % " , 2 ) ) . map ( this : : buildModPair ) . 
 + collect ( Collectors . groupingBy ( Pair : : getLeft , Collectors . mapping ( Pair : : getRight , Collectors . toList ( ) ) ) ) ; 
 + 
 + LOGGER . info ( CORE , " Found supplied mod coordinates [ { } ] " , modClassPaths ) ; 
 + 
 + final List < Pair < Path , List < Path > > > explodedTargets = arguments . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) ; 
 + modClassPaths . forEach ( ( modlabel , paths ) - > explodedTargets . add ( Pair . of ( paths . get ( 0 ) , paths . subList ( 1 , paths . size ( ) ) ) ) ) ; 
 + } 
 + 
 + private Pair < String , Path > buildModPair ( String [ ] splitString ) { 
 + String modid = splitString . length = = 1 ? " defaultmodid " : splitString [ 0 ] ; 
 + Path path = Paths . get ( splitString [ splitString . length - 1 ] ) ; 
 + return Pair . of ( modid , path ) ; 
 + } 
 + 
 protected void validatePaths ( final Path forgePath , final Path [ ] mcPaths , String forgeVersion , String mcVersion , String mcpVersion ) { 
 if ( ! Files . exists ( forgePath ) ) { 
 LOGGER . fatal ( CORE , " Failed to find forge version { } for MC { } at { } " , forgeVersion , mcVersion , forgePath ) ; 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 index 5c68ba6 . . 263851b 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 @ @ - 84 , 6 + 84 , 8 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement 
 final Path forgemodstoml = LibraryFinder . findJarPathFor ( " META - INF / mods . toml " , " forgemodstoml " ) ; 
 ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) . 
 add ( Pair . of ( forgemodstoml , Collections . singletonList ( compiledClasses ) ) ) ; 
 + 
 + processModClassesEnvironmentVariable ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) ; 
 } 
 
 @ Override 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java 
 index 78d3ed9 . . eb79482 100644 
 - - - a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java 
 + + + b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java 
 @ @ - 83 , 29 + 83 , 13 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { 
 throw new RuntimeException ( " wha ? " , e ) ; 
 } 
 
 - LOGGER . fatal ( CORE , " Got mod coordinates { } from env " , System . getenv ( " MOD _ CLASSES " ) ) ; 
 - 
 - / / " a / b / ; c / d / ; " - > " modid % % c : \ fish \ pepper ; modid % % c : \ fish2 \ pepper2 \ ; modid2 % % c : \ fishy \ bums ; modid2 % % c : \ hmm " 
 - final Map < String , List < Path > > modClassPaths = Arrays . stream ( System . getenv ( " MOD _ CLASSES " ) . split ( File . pathSeparator ) ) . 
 - map ( inp - > inp . split ( " % % " , 2 ) ) . map ( this : : buildModPair ) . 
 - collect ( Collectors . groupingBy ( Pair : : getLeft , Collectors . mapping ( Pair : : getRight , Collectors . toList ( ) ) ) ) ; 
 - 
 - LOGGER . info ( CORE , " Found supplied mod coordinates [ { } ] " , modClassPaths ) ; 
 - 
 - final List < Pair < Path , List < Path > > > explodedTargets = ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) ; 
 - modClassPaths . forEach ( ( modlabel , paths ) - > explodedTargets . add ( Pair . of ( paths . get ( 0 ) , paths . subList ( 1 , paths . size ( ) ) ) ) ) ; 
 + processModClassesEnvironmentVariable ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) ; 
 
 / / generics are gross yea ? 
 ( ( Map ) arguments ) . put ( " mavenRoots " , mavenRoots ) ; 
 ( ( Map ) arguments ) . put ( " mods " , mods ) ; 
 } 
 
 - private Pair < String , Path > buildModPair ( String [ ] splitString ) { 
 - String modid = splitString . length = = 1 ? " defaultmodid " : splitString [ 0 ] ; 
 - Path path = Paths . get ( splitString [ splitString . length - 1 ] ) ; 
 - return Pair . of ( modid , path ) ; 
 - } 
 - 
 @ Override 
 protected void validatePaths ( final Path forgePath , final Path [ ] mcPaths , final String forgeVersion , final String mcVersion , final String mcpVersion ) { 


NEAREST DIFF:
diff - - git a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java 
 index 7e09fa7 . . 78d3ed9 100644 
 - - - a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java 
 + + + b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java 
 @ @ - 85 , 20 + 85 , 27 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { 
 
 LOGGER . fatal ( CORE , " Got mod coordinates { } from env " , System . getenv ( " MOD _ CLASSES " ) ) ; 
 
 - final List < Path > modClasses = Arrays . stream ( System . getenv ( " MOD _ CLASSES " ) . split ( File . pathSeparator ) ) . 
 - map ( Paths : : get ) . collect ( Collectors . toList ( ) ) ; 
 + / / " a / b / ; c / d / ; " - > " modid % % c : \ fish \ pepper ; modid % % c : \ fish2 \ pepper2 \ ; modid2 % % c : \ fishy \ bums ; modid2 % % c : \ hmm " 
 + final Map < String , List < Path > > modClassPaths = Arrays . stream ( System . getenv ( " MOD _ CLASSES " ) . split ( File . pathSeparator ) ) . 
 + map ( inp - > inp . split ( " % % " , 2 ) ) . map ( this : : buildModPair ) . 
 + collect ( Collectors . groupingBy ( Pair : : getLeft , Collectors . mapping ( Pair : : getRight , Collectors . toList ( ) ) ) ) ; 
 
 - LOGGER . fatal ( CORE , " Processed mod coordinates [ { } ] " , modClasses . stream ( ) . map ( Object : : toString ) . collect ( Collectors . joining ( " , " ) ) ) ; 
 - 
 - ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) . 
 - add ( Pair . of ( modClasses . get ( 0 ) , modClasses . subList ( 1 , modClasses . size ( ) ) ) ) ; 
 + LOGGER . info ( CORE , " Found supplied mod coordinates [ { } ] " , modClassPaths ) ; 
 
 + final List < Pair < Path , List < Path > > > explodedTargets = ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) ; 
 + modClassPaths . forEach ( ( modlabel , paths ) - > explodedTargets . add ( Pair . of ( paths . get ( 0 ) , paths . subList ( 1 , paths . size ( ) ) ) ) ) ; 
 
 / / generics are gross yea ? 
 ( ( Map ) arguments ) . put ( " mavenRoots " , mavenRoots ) ; 
 ( ( Map ) arguments ) . put ( " mods " , mods ) ; 
 } 
 
 + private Pair < String , Path > buildModPair ( String [ ] splitString ) { 
 + String modid = splitString . length = = 1 ? " defaultmodid " : splitString [ 0 ] ; 
 + Path path = Paths . get ( splitString [ splitString . length - 1 ] ) ; 
 + return Pair . of ( modid , path ) ; 
 + } 
 + 
 @ Override 
 protected void validatePaths ( final Path forgePath , final Path [ ] mcPaths , final String forgeVersion , final String mcVersion , final String mcpVersion ) { 

