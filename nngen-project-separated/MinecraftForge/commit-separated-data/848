BLEU SCORE: 0.017035018586323523

TEST MSG: One day I will learn to include all required classes in the commit .
GENERATED MSG: Redefine removal value in IRetextureableModel from null to empty string { " " } due to ImmutibleMap not allowing null Values . Closes # 1927

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / IModelSimpleProperties . java b / src / main / java / net / minecraftforge / client / model / IModelSimpleProperties . java <nl> new file mode 100644 <nl> index 0000000 . . 0e963ef <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / IModelSimpleProperties . java <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + / * * <nl> + * Implement this if the model can process " smooth _ lighting " or " gui3d " attributes from the json . <nl> + * / <nl> + public interface IModelSimpleProperties < M extends IModelSimpleProperties < M > > extends IModel <nl> + { <nl> + M smoothLighting ( boolean value ) ; <nl> + M gui3d ( boolean value ) ; <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> index b1cb905 . . 8522849 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> @ @ - 416 , 7 + 416 , 7 @ @ public class ForgeBlockStateV1 extends Marker <nl> for ( Entry < String , JsonElement > e : json . get ( " textures " ) . getAsJsonObject ( ) . entrySet ( ) ) <nl> { <nl> if ( e . getValue ( ) . isJsonNull ( ) ) <nl> - ret . textures . put ( e . getKey ( ) , null ) ; <nl> + ret . textures . put ( e . getKey ( ) , " " ) ; / / We have to use " " because ImmutibleMaps don ' t allow nulls - . - <nl> else <nl> ret . textures . put ( e . getKey ( ) , e . getValue ( ) . getAsString ( ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java b / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java <nl> index 0e6139d . . eb62487 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java <nl> @ @ - 10 , 9 + 10 , 10 @ @ public interface IRetexturableModel extends IModel <nl> * as a model should be able to be retextured multiple times producing <nl> * a separate model each time . <nl> * <nl> - * The input map MAY map to NULL which should be used to indicate the <nl> - * texture was removed . Handling of that is up to the model itself . <nl> - * Such as using default , missing texture , or removing vertices . <nl> + * The input map MAY map to an empty string " " which should be used <nl> + * to indicate the texture was removed . Handling of that is up to <nl> + * the model itself . Such as using default , missing texture , or <nl> + * removing vertices . <nl> * <nl> * The input should be considered a DIFF of the old textures , not a <nl> * replacement as it may not contain everything . <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 57d0cc3 . . 47ab1a7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 293 , 7 + 293 , 7 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> if ( textures . isEmpty ( ) ) <nl> return this ; <nl> - <nl> + <nl> List < BlockPart > elements = Lists . newArrayList ( ) ; / / We have to duplicate this so we can edit it below . <nl> for ( BlockPart part : ( List < BlockPart > ) this . model . getElements ( ) ) <nl> { <nl> @ @ - 307 , 10 + 307 , 10 @ @ public class ModelLoader extends ModelBakery <nl> neweModel . parent = this . model . parent ; <nl> <nl> Set < String > removed = Sets . newHashSet ( ) ; <nl> - <nl> + <nl> for ( Entry < String , String > e : textures . entrySet ( ) ) <nl> { <nl> - if ( e . getValue ( ) = = null ) <nl> + if ( " " . equals ( e . getValue ( ) ) ) <nl> { <nl> removed . add ( e . getKey ( ) ) ; <nl> neweModel . textures . remove ( e . getKey ( ) ) ; <nl> @ @ - 321 , 7 + 321 , 7 @ @ public class ModelLoader extends ModelBakery <nl> <nl> / / Map the model ' s texture references as if it was the parent of a model with the retexture map as its textures . <nl> Map < String , String > remapped = Maps . newHashMap ( ) ; <nl> - <nl> + <nl> for ( Entry < String , String > e : ( Set < Entry < String , String > > ) neweModel . textures . entrySet ( ) ) <nl> { <nl> if ( e . getValue ( ) . startsWith ( " # " ) ) <nl> @ @ - 331 , 9 + 331 , 9 @ @ public class ModelLoader extends ModelBakery <nl> remapped . put ( e . getKey ( ) , ( String ) neweModel . textures . get ( key ) ) ; <nl> } <nl> } <nl> - <nl> + <nl> neweModel . textures . putAll ( remapped ) ; <nl> - <nl> + <nl> / / Remove any faces that use a null texture , this is for performance reasons , also allows some cool layering stuff . <nl> for ( BlockPart part : ( List < BlockPart > ) neweModel . getElements ( ) ) <nl> {

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / IModelSimpleProperties . java b / src / main / java / net / minecraftforge / client / model / IModelSimpleProperties . java 
 new file mode 100644 
 index 0000000 . . 0e963ef 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / IModelSimpleProperties . java 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + / * * 
 + * Implement this if the model can process " smooth _ lighting " or " gui3d " attributes from the json . 
 + * / 
 + public interface IModelSimpleProperties < M extends IModelSimpleProperties < M > > extends IModel 
 + { 
 + M smoothLighting ( boolean value ) ; 
 + M gui3d ( boolean value ) ; 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 index b1cb905 . . 8522849 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 @ @ - 416 , 7 + 416 , 7 @ @ public class ForgeBlockStateV1 extends Marker 
 for ( Entry < String , JsonElement > e : json . get ( " textures " ) . getAsJsonObject ( ) . entrySet ( ) ) 
 { 
 if ( e . getValue ( ) . isJsonNull ( ) ) 
 - ret . textures . put ( e . getKey ( ) , null ) ; 
 + ret . textures . put ( e . getKey ( ) , " " ) ; / / We have to use " " because ImmutibleMaps don ' t allow nulls - . - 
 else 
 ret . textures . put ( e . getKey ( ) , e . getValue ( ) . getAsString ( ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java b / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java 
 index 0e6139d . . eb62487 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java 
 @ @ - 10 , 9 + 10 , 10 @ @ public interface IRetexturableModel extends IModel 
 * as a model should be able to be retextured multiple times producing 
 * a separate model each time . 
 * 
 - * The input map MAY map to NULL which should be used to indicate the 
 - * texture was removed . Handling of that is up to the model itself . 
 - * Such as using default , missing texture , or removing vertices . 
 + * The input map MAY map to an empty string " " which should be used 
 + * to indicate the texture was removed . Handling of that is up to 
 + * the model itself . Such as using default , missing texture , or 
 + * removing vertices . 
 * 
 * The input should be considered a DIFF of the old textures , not a 
 * replacement as it may not contain everything . 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 57d0cc3 . . 47ab1a7 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 293 , 7 + 293 , 7 @ @ public class ModelLoader extends ModelBakery 
 { 
 if ( textures . isEmpty ( ) ) 
 return this ; 
 - 
 + 
 List < BlockPart > elements = Lists . newArrayList ( ) ; / / We have to duplicate this so we can edit it below . 
 for ( BlockPart part : ( List < BlockPart > ) this . model . getElements ( ) ) 
 { 
 @ @ - 307 , 10 + 307 , 10 @ @ public class ModelLoader extends ModelBakery 
 neweModel . parent = this . model . parent ; 
 
 Set < String > removed = Sets . newHashSet ( ) ; 
 - 
 + 
 for ( Entry < String , String > e : textures . entrySet ( ) ) 
 { 
 - if ( e . getValue ( ) = = null ) 
 + if ( " " . equals ( e . getValue ( ) ) ) 
 { 
 removed . add ( e . getKey ( ) ) ; 
 neweModel . textures . remove ( e . getKey ( ) ) ; 
 @ @ - 321 , 7 + 321 , 7 @ @ public class ModelLoader extends ModelBakery 
 
 / / Map the model ' s texture references as if it was the parent of a model with the retexture map as its textures . 
 Map < String , String > remapped = Maps . newHashMap ( ) ; 
 - 
 + 
 for ( Entry < String , String > e : ( Set < Entry < String , String > > ) neweModel . textures . entrySet ( ) ) 
 { 
 if ( e . getValue ( ) . startsWith ( " # " ) ) 
 @ @ - 331 , 9 + 331 , 9 @ @ public class ModelLoader extends ModelBakery 
 remapped . put ( e . getKey ( ) , ( String ) neweModel . textures . get ( key ) ) ; 
 } 
 } 
 - 
 + 
 neweModel . textures . putAll ( remapped ) ; 
 - 
 + 
 / / Remove any faces that use a null texture , this is for performance reasons , also allows some cool layering stuff . 
 for ( BlockPart part : ( List < BlockPart > ) neweModel . getElements ( ) ) 
 {
