BLEU SCORE: 0.01837608906543755

TEST MSG: Update userdev and runconfigs for ForgeGradle changes .
GENERATED MSG: Create a userdev - specific main , and include it as an injected file in the userdev jar .

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 8dfa80e . . 1f725cd 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 160 , 37 + 160 , 39 @ @ project ( ' : forge ' ) { <nl> accessTransformer = file ( " $ rootDir / src / main / resources / META - INF / accesstransformer . cfg " ) <nl> exc = file ( " $ rootDir / src / main / resources / forge . exc " ) <nl> srgPatches = true <nl> - clientRun { <nl> - main = ' net . minecraftforge . fml . LaunchTesting ' <nl> - environment = [ <nl> - target : ' fmldevclient ' , <nl> - assetDirectory : downloadAssets . output , <nl> - nativesDirectory : extractNatives . output <nl> - ] <nl> - properties = [ <nl> - ' org . lwjgl . util . Debug ' : ' true ' , <nl> - ' org . lwjgl . util . DebugLoader ' : ' true ' , <nl> - ' org . lwjgl . system . SharedLibraryExtractDirectory ' : ' lwjgl _ dll ' , <nl> - ' mc . version ' : MC _ VERSION , <nl> - ' mcp . version ' : MCP _ VERSION , <nl> - ' forge . version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , <nl> - ' forge . spec ' : SPEC _ VERSION , <nl> - ' forge . group ' : project . group , <nl> - ' fmllauncher . version ' : SPEC _ VERSION <nl> - ] <nl> - } <nl> - serverRun { <nl> - main = ' net . minecraftforge . fml . LaunchTesting ' <nl> - environment = [ <nl> - target : ' fmldevserver ' <nl> - ] <nl> - properties = [ <nl> - ' mc . version ' : MC _ VERSION , <nl> - ' mcp . version ' : MCP _ VERSION , <nl> - ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , <nl> - ' forge . spec ' : SPEC _ VERSION , <nl> - ' forge . group ' : project . group <nl> - ] <nl> + runs { <nl> + client = { <nl> + main ' net . minecraftforge . fml . LaunchTesting ' <nl> + environment = [ <nl> + target : ' fmldevclient ' , <nl> + assetDirectory : downloadAssets . output , <nl> + nativesDirectory : extractNatives . output <nl> + ] <nl> + properties = [ <nl> + ' org . lwjgl . util . Debug ' : ' true ' , <nl> + ' org . lwjgl . util . DebugLoader ' : ' true ' , <nl> + ' org . lwjgl . system . SharedLibraryExtractDirectory ' : ' lwjgl _ dll ' , <nl> + ' mc . version ' : MC _ VERSION , <nl> + ' mcp . version ' : MCP _ VERSION , <nl> + ' forge . version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , <nl> + ' forge . spec ' : SPEC _ VERSION , <nl> + ' forge . group ' : project . group , <nl> + ' fmllauncher . version ' : SPEC _ VERSION <nl> + ] <nl> + } <nl> + server = { <nl> + main ' net . minecraftforge . fml . LaunchTesting ' <nl> + environment = [ <nl> + target : ' fmldevserver ' <nl> + ] <nl> + properties = [ <nl> + ' mc . version ' : MC _ VERSION , <nl> + ' mcp . version ' : MCP _ VERSION , <nl> + ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , <nl> + ' forge . spec ' : SPEC _ VERSION , <nl> + ' forge . group ' : project . group <nl> + ] <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 283 , 9 + 285 , 9 @ @ project ( ' : forge ' ) { <nl> } <nl> / / jvmArgs = [ ' - verbose : class ' ] <nl> classpath sourceSets . main . runtimeClasspath <nl> - main patcher . clientRun . main <nl> - systemProperties = patcher . clientRun . properties <nl> - environment + = patcher . clientRun . environment <nl> + main patcher . runs . client . main <nl> + systemProperties = patcher . runs . client . properties <nl> + environment + = patcher . runs . client . environment <nl> workingDir ' runclient ' <nl> } <nl> <nl> @ @ - 300 , 10 + 302 , 10 @ @ project ( ' : forge ' ) { <nl> } <nl> } <nl> classpath sourceSets . main . runtimeClasspath <nl> - main patcher . serverRun . main <nl> + main patcher . runs . server . main <nl> args ' nogui ' <nl> - systemProperties = patcher . serverRun . properties <nl> - environment + = patcher . serverRun . environment <nl> + systemProperties = patcher . runs . server . properties <nl> + environment + = patcher . runs . server . environment <nl> workingDir ' runserver ' <nl> standardInput = System . in <nl> } <nl> @ @ - 790 , 6 + 792 , 31 @ @ project ( ' : forge ' ) { <nl> artifacts . each { key , lib - > <nl> addLibrary ( lib . name ) <nl> } <nl> + addLibrary ( " $ { project . group } : $ { project . name } : $ { project . version } : launcher " ) <nl> + runs { <nl> + client = { <nl> + main ' net . minecraftforge . userdev . UserdevLauncher ' <nl> + environment ' target ' , ' fmluserdevclient ' <nl> + environment ' assetDirectory ' , ' { assets _ root } ' <nl> + environment ' nativesDirectory ' , ' { natives } ' <nl> + environment ' FORGE _ VERSION ' , project . version . substring ( MC _ VERSION . length ( ) + 1 ) <nl> + environment ' FORGE _ GROUP ' , project . group <nl> + environment ' MCP _ VERSION ' , MCP _ VERSION <nl> + environment ' MC _ VERSION ' , MC _ VERSION <nl> + environment ' MOD _ CLASSES ' , ' { source _ roots } ' <nl> + environment ' MCP _ MAPPINGS ' , ' { mcp _ mappings } ' <nl> + } <nl> + server = { <nl> + main ' net . minecraftforge . userdev . UserdevLauncher ' <nl> + environment ' target ' , ' fmldevserver ' <nl> + environment ' FORGE _ VERSION ' , project . version . substring ( MC _ VERSION . length ( ) + 1 ) <nl> + environment ' FORGE _ GROUP ' , project . group <nl> + environment ' MCP _ VERSION ' , MCP _ VERSION <nl> + environment ' MC _ VERSION ' , MC _ VERSION <nl> + environment ' MOD _ CLASSES ' , ' { source _ roots } ' <nl> + environment ' MCP _ MAPPINGS ' , ' { mcp _ mappings } ' <nl> + } <nl> + } <nl> } <nl> <nl> license { <nl> diff - - git a / mdk / build . gradle b / mdk / build . gradle <nl> index a6e9b95 . . ee4428e 100644 <nl> - - - a / mdk / build . gradle <nl> + + + b / mdk / build . gradle <nl> @ @ - 1 , 17 + 1 , 9 @ @ <nl> buildscript { <nl> repositories { <nl> - mavenLocal ( ) <nl> maven { url = ' https : / / files . minecraftforge . net / maven ' } <nl> jcenter ( ) <nl> mavenCentral ( ) <nl> } <nl> - / / This is only here while i ' m activly developing FG , Remind me to remove when we publically release <nl> - configurations { <nl> - classpath . resolutionStrategy { <nl> - cacheDynamicVersionsFor 10 , ' seconds ' <nl> - cacheChangingModulesFor 0 , ' seconds ' <nl> - } <nl> - } <nl> dependencies { <nl> classpath group : ' net . minecraftforge . gradle ' , name : ' ForgeGradle ' , version : ' 3 . + ' , changing : true <nl> } <nl> @ @ - 24 , 10 + 16 , 7 @ @ version = ' 1 . 0 ' <nl> group = ' com . yourname . modid ' / / http : / / maven . apache . org / guides / mini / guide - naming - conventions . html <nl> archivesBaseName = ' modid ' <nl> <nl> - sourceCompatibility = targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . <nl> - compileJava { <nl> - sourceCompatibility = targetCompatibility = ' 1 . 8 ' <nl> - } <nl> + sourceCompatibility = targetCompatibility = compileJava . sourceCompatibility = compileJava . targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . <nl> <nl> minecraft { <nl> / / the mappings can be changed at any time , and must be in the following format . <nl> @ @ - 42 , 22 + 31 , 14 @ @ minecraft { <nl> <nl> / / default run configurations . <nl> / / these can be tweaked , removed , or duplicated as needed . <nl> - runConfig { <nl> - name = " Minecraft Client " <nl> - main = " net . minecraftforge . userdev . UserdevLauncher " <nl> - ideaModuleName = " $ { project . name } _ main " <nl> - workingDirectory = project . file ( " run " ) . canonicalPath <nl> - environment " target " , " fmldevclient " <nl> - environment " assetDirectory " , downloadAssets . output . absolutePath <nl> - } <nl> - <nl> - runConfig { <nl> - name = " Minecraft Server " <nl> - main = " net . minecraftforge . userdev . UserdevLauncher " <nl> - ideaModuleName = " $ { project . name } _ main " <nl> - workingDirectory = project . file ( " run " ) . canonicalPath <nl> - environment " target " , " fmldevserver " <nl> - environment " assetDirectory " , downloadAssets . output . absolutePath <nl> + runs { <nl> + client = { <nl> + workingDirectory project . file ( ' run ' ) . canonicalPath <nl> + source sourceSets . main <nl> + } <nl> + server = { <nl> + workingDirectory project . file ( ' run ' ) . canonicalPath <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 65 , 7 + 46 , 7 @ @ dependencies { <nl> / / Specify the version of Minecraft to use , If this is any group other then ' net . minecraft ' it is assumed <nl> / / that the dep is a ForgeGradle ' patcher ' dependency . And it ' s patches will be applied . <nl> / / The userdev artifact is a special name and will get all sorts of transformations applied to it . <nl> - minecraft ' @ FORGE _ GROUP @ : userdev : @ FORGE _ VERSION @ ' <nl> + minecraft ' @ FORGE _ GROUP @ : @ FORGE _ NAME @ : @ FORGE _ VERSION @ ' <nl> <nl> / / you may put jars on which you depend on in . / libs <nl> / / or you may define them like so . . <nl> @ @ - 79 , 10 + 60 , 8 @ @ dependencies { <nl> / / the ' provided ' configuration is for optional dependencies that exist at compile - time but might not at runtime . <nl> / / provided ' com . mod - buildcraft : buildcraft : 6 . 0 . 8 : dev ' <nl> <nl> - / / the deobf configurations : ' deobfCompile ' and ' deobfProvided ' are the same as the normal compile and provided , <nl> - / / except that these dependencies get remapped to your current MCP mappings <nl> - / / deobfCompile ' com . mod - buildcraft : buildcraft : 6 . 0 . 8 : dev ' <nl> - / / deobfProvided ' com . mod - buildcraft : buildcraft : 6 . 0 . 8 : dev ' <nl> + / / These dependencies get remapped to your current MCP mappings <nl> + / / deobf ' com . mod - buildcraft : buildcraft : 6 . 0 . 8 : dev ' <nl> <nl> / / for more info . . . <nl> / / http : / / www . gradle . org / docs / current / userguide / artifact _ dependencies _ tutorial . html <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLServiceProvider . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLServiceProvider . java <nl> index 32bef29 . . 7ffe7eb 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLServiceProvider . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLServiceProvider . java <nl> @ @ - 45 , 12 + 45 , 14 @ @ public class FMLServiceProvider implements ITransformationService <nl> private ArgumentAcceptingOptionSpec < String > mcOption ; <nl> private ArgumentAcceptingOptionSpec < String > forgeGroupOption ; <nl> private ArgumentAcceptingOptionSpec < String > mcpOption ; <nl> + private ArgumentAcceptingOptionSpec < String > mappingsOption ; <nl> private List < String > modsArgumentList ; <nl> private List < String > modListsArgumentList ; <nl> private List < String > mavenRootsArgumentList ; <nl> private String targetForgeVersion ; <nl> private String targetMcVersion ; <nl> private String targetMcpVersion ; <nl> + private String targetMcpMappings ; <nl> private String targetForgeGroup ; <nl> <nl> @ Override <nl> @ @ - 74 , 6 + 76 , 7 @ @ public class FMLServiceProvider implements ITransformationService <nl> arguments . put ( " forgeGroup " , targetForgeGroup ) ; <nl> arguments . put ( " mcVersion " , targetMcVersion ) ; <nl> arguments . put ( " mcpVersion " , targetMcpVersion ) ; <nl> + arguments . put ( " mcpMappings " , targetMcpMappings ) ; <nl> LOGGER . debug ( CORE , " Preparing launch handler " ) ; <nl> FMLLoader . setupLaunchHandler ( environment , arguments ) ; <nl> LOGGER . debug ( CORE , " Initiating mod scan " ) ; <nl> @ @ - 95 , 6 + 98 , 7 @ @ public class FMLServiceProvider implements ITransformationService <nl> forgeGroupOption = argumentBuilder . apply ( " forgeGroup " , " Forge Group ( for testing ) " ) . withRequiredArg ( ) . ofType ( String . class ) . defaultsTo ( " net . minecraftforge " ) ; <nl> mcOption = argumentBuilder . apply ( " mcVersion " , " Minecraft Version number " ) . withRequiredArg ( ) . ofType ( String . class ) . required ( ) ; <nl> mcpOption = argumentBuilder . apply ( " mcpVersion " , " MCP Version number " ) . withRequiredArg ( ) . ofType ( String . class ) . required ( ) ; <nl> + mappingsOption = argumentBuilder . apply ( " mcpMappings " , " MCP Mappings Channel and Version " ) . withRequiredArg ( ) . ofType ( String . class ) ; <nl> modsOption = argumentBuilder . apply ( " mods " , " List of mods to add " ) . withRequiredArg ( ) . ofType ( String . class ) . withValuesSeparatedBy ( " , " ) ; <nl> modListsOption = argumentBuilder . apply ( " modLists " , " JSON modlists " ) . withRequiredArg ( ) . ofType ( String . class ) . withValuesSeparatedBy ( " , " ) ; <nl> mavenRootsOption = argumentBuilder . apply ( " mavenRoots " , " Maven root directories " ) . withRequiredArg ( ) . ofType ( String . class ) . withValuesSeparatedBy ( " , " ) ; <nl> @ @ - 110 , 6 + 114 , 7 @ @ public class FMLServiceProvider implements ITransformationService <nl> targetForgeGroup = option . value ( forgeGroupOption ) ; <nl> targetMcVersion = option . value ( mcOption ) ; <nl> targetMcpVersion = option . value ( mcpOption ) ; <nl> + targetMcpMappings = option . value ( mappingsOption ) ; <nl> } <nl> <nl> @ Nonnull <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 2007403 . . 6864f88 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 695 , 7 + 695 , 7 @ @ public class GameData <nl> / / Loader . instance ( ) . fireRemapEvent ( remaps , false ) ; <nl> <nl> / / The id map changed , ensure we apply object holders <nl> - / / ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> <nl> / / Return an empty list , because we ' re good <nl> return ArrayListMultimap . create ( ) ; <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> index 7a8412e . . 011ac0a 100644 <nl> - - - a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> @ @ - 44 , 7 + 44 , 6 @ @ public class ClasspathLocator implements IModLocator <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> private static final String COREMODS = " META - INF / coremods . json " ; <nl> private static final String MODS = " META - INF / mods . toml " ; <nl> - private Map < Path , List < Path > > paths = Maps . newHashMap ( ) ; <nl> <nl> public ClasspathLocator ( ) { } <nl> <nl> @ @ - 75 , 9 + 74 , 12 @ @ public class ClasspathLocator implements IModLocator <nl> e . printStackTrace ( ) ; <nl> } <nl> return null ; <nl> - } ) . filter ( Objects : : nonNull ) . distinct ( ) <nl> - . map ( path - > new ModFile ( path , this ) ) <nl> - . collect ( Collectors . toList ( ) ) ; <nl> + } ) <nl> + . filter ( Objects : : nonNull ) <nl> + . distinct ( ) <nl> + . filter ( Files : : isRegularFile ) / / We ' re only looking for remapped jars , exploded directories are handled by FMLUserdevLaunchProvider <nl> + . map ( path - > new ModFile ( path , this ) ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 121 , 6 + 123 , 7 @ @ public class ClasspathLocator implements IModLocator <nl> { <nl> Path classesPath = filePath ; <nl> <nl> + / * <nl> / / Hack 1 : When running from within intellij , we get <nl> / / " out / production / resources " + " out / production / classes " <nl> if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) <nl> @ @ - 134 , 6 + 137 , 7 @ @ public class ClasspathLocator implements IModLocator <nl> / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . <nl> classesPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; <nl> } <nl> + * / <nl> return classesPath ; <nl> } <nl> <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java <nl> index 7c2dfa3 . . dd594e0 100644 <nl> - - - a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { <nl> LOGGER . fatal ( CORE , " Unable to locate forge on the classpath " ) ; <nl> throw new RuntimeException ( " Unable to locate forge on the classpath " ) ; <nl> } <nl> - forgeJar = LibraryFinder . findJarPathFor ( " ForgeVersion . class " , " forge " , forgePath ) ; <nl> + forgeJar = LibraryFinder . findJarPathFor ( " ForgeVersion . class " , " forge " , forgePath ) ; <nl> return forgeJar ; <nl> } <nl> <nl> @ @ - 41 , 8 + 41 , 9 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { <nl> final String forgeVersion = ( String ) arguments . get ( " forgeVersion " ) ; <nl> final String mcVersion = ( String ) arguments . get ( " mcVersion " ) ; <nl> final String mcpVersion = ( String ) arguments . get ( " mcpVersion " ) ; <nl> + final String mcpMappings = ( String ) arguments . get ( " mcpMappings " ) ; <nl> final String forgeGroup = ( String ) arguments . get ( " forgeGroup " ) ; <nl> - final String userdevVersion = mcVersion + " - " + forgeVersion + " _ mapped _ snapshot _ " + mcpVersion ; <nl> + final String userdevVersion = mcVersion + " - " + forgeVersion + " _ mapped _ " + mcpMappings ; <nl> int dirs = forgeGroup . split ( " \ \ . " ) . length + 2 ; <nl> Path fjroot = forgeJar ; <nl> do { <nl> @ @ - 51 , 7 + 52 , 7 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { <nl> final String fjpath = fjroot . toString ( ) ; <nl> LOGGER . debug ( CORE , " Injecting forge as mod { } from maven path { } " , userdevVersion , fjpath ) ; <nl> mavenRoots . add ( fjpath ) ; <nl> - mods . add ( forgeGroup + " : userdev : " + userdevVersion ) ; <nl> + mods . add ( forgeGroup + " : forge : " + userdevVersion ) ; <nl> <nl> try { <nl> final Enumeration < URL > resources = ClassLoader . getSystemClassLoader ( ) . getResources ( " META - INF / mods . toml " ) ; <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java <nl> index fe4b357 . . 6868de3 100644 <nl> - - - a / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java <nl> @ @ - 53 , 9 + 53 , 6 @ @ public class UserdevLauncher <nl> String assets = System . getenv ( ) . getOrDefault ( " assetDirectory " , " assets " ) ; <nl> String target = System . getenv ( ) . get ( " target " ) ; <nl> <nl> - if ( assets = = null | | ! new File ( assets ) . exists ( ) ) { <nl> - throw new IllegalArgumentException ( " Environment variable ' assets ' must be set to a valid path . " ) ; <nl> - } <nl> if ( target = = null ) { <nl> throw new IllegalArgumentException ( " Environment variable ' target ' must be set to ' fmluserdevclient ' or ' fmluserdevserver ' . " ) ; <nl> } <nl> @ @ - 65 , 11 + 62 , 16 @ @ public class UserdevLauncher <nl> " - - launchTarget " , target , <nl> " - - fml . forgeVersion " , System . getenv ( " FORGE _ VERSION " ) , <nl> " - - fml . mcpVersion " , System . getenv ( " MCP _ VERSION " ) , <nl> + " - - fml . mcpMappings " , System . getenv ( " MCP _ MAPPINGS " ) , <nl> " - - fml . mcVersion " , System . getenv ( " MC _ VERSION " ) , <nl> " - - fml . forgeGroup " , System . getenv ( " FORGE _ GROUP " ) <nl> } ; <nl> <nl> if ( Objects . equals ( target , " fmluserdevclient " ) ) { <nl> + if ( assets = = null | | ! new File ( assets ) . exists ( ) ) { <nl> + throw new IllegalArgumentException ( " Environment variable ' assetDirectory ' must be set to a valid path . " ) ; <nl> + } <nl> + <nl> hackNatives ( ) ; <nl> launchArgs = ObjectArrays . concat ( launchArgs , new String [ ] { <nl> " - - accessToken " , " blah " ,
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 7f1acda . . fd685e1 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 22 , 6 + 22 , 9 @ @ import net . minecraftforge . gradle . common . task . SignJar <nl> import net . minecraftforge . gradle . patcher . task . ApplyBinPatches <nl> import org . apache . tools . ant . filters . ReplaceTokens <nl> import de . undercouch . gradle . tasks . download . Download <nl> + import net . minecraftforge . gradle . patcher . task . TaskReobfuscateJar <nl> + <nl> + import java . util . stream . Collectors <nl> <nl> plugins { <nl> id ' net . minecrell . licenser ' version ' 0 . 4 ' <nl> @ @ - 98 , 6 + 101 , 16 @ @ project ( ' : forge ' ) { <nl> srcDir " $ rootDir / src / main / resources " <nl> } <nl> } <nl> + userdev { <nl> + compileClasspath + = sourceSets . main . runtimeClasspath <nl> + runtimeClasspath + = sourceSets . main . runtimeClasspath <nl> + java { <nl> + srcDir " $ rootDir / src / userdev / java " <nl> + } <nl> + resources { <nl> + srcDir " $ rootDir / src / userdev / resources " <nl> + } <nl> + } <nl> } <nl> repositories { <nl> mavenLocal ( ) <nl> @ @ - 755 , 6 + 768 , 33 @ @ project ( ' : forge ' ) { <nl> } <nl> } <nl> <nl> + task userdevExtras ( type : Jar ) { <nl> + dependsOn classes <nl> + from sourceSets . userdev . output <nl> + classifier ' userdev - temp ' <nl> + } <nl> + <nl> + task userdevExtrasReobf ( type : TaskReobfuscateJar ) { <nl> + dependsOn userdevExtras , createMcp2Srg <nl> + input = tasks . userdevExtras . archivePath <nl> + classpath = project . configurations . getByName ( " compile " ) <nl> + srg = tasks . createMcp2Srg . output <nl> + } <nl> + <nl> + userdevJar { <nl> + dependsOn userdevExtrasReobf <nl> + from ( zipTree ( tasks . userdevExtrasReobf . output ) ) { <nl> + into ' / inject / ' <nl> + } <nl> + from ( sourceSets . userdev . output . resourcesDir ) { <nl> + into ' / inject / ' <nl> + } <nl> + } <nl> + <nl> + applyRangeMap { <nl> + setSources sourceSets . userdev . java . srcDirs . findAll ( { f - > ( f ! = patcher . patchedSrc ) } ) <nl> + } <nl> + <nl> publishing { <nl> publications { <nl> mavenJava ( MavenPublication ) { <nl> diff - - git a / mdk / build . gradle b / mdk / build . gradle <nl> index ee711d2 . . ce344c1 100644 <nl> - - - a / mdk / build . gradle <nl> + + + b / mdk / build . gradle <nl> @ @ - 39 , 6 + 39 , 26 @ @ minecraft { <nl> / / makeObfSourceJar = false / / an Srg named sources jar is made by default . uncomment this to disable . <nl> <nl> / / accessTransformer = file ( ' my _ at . cfg ' ) <nl> + <nl> + / / default run configurations . <nl> + / / these can be tweaked , removed , or duplicated as needed . <nl> + runConfig { <nl> + name = " Minecraft Client " <nl> + main = " net . minecraftforge . userdev . UserdevLauncher " <nl> + ideaModuleName = " $ { project . name } _ main " <nl> + workingDirectory = project . file ( " run " ) . canonicalPath <nl> + environment " target " , " fmldevclient " <nl> + environment " assetDirectory " , downloadAssets . output . absolutePath <nl> + } <nl> + <nl> + runConfig { <nl> + name = " Minecraft Server " <nl> + main = " net . minecraftforge . userdev . UserdevLauncher " <nl> + ideaModuleName = " $ { project . name } _ main " <nl> + workingDirectory = project . file ( " run " ) . canonicalPath <nl> + environment " target " , " fmldevserver " <nl> + environment " assetDirectory " , downloadAssets . output . absolutePath <nl> + } <nl> } <nl> <nl> dependencies { <nl> @ @ - 76 , 7 + 96 , 7 @ @ processResources { <nl> <nl> / / replace stuff in mcmod . info , nothing else <nl> from ( sourceSets . main . resources . srcDirs ) { <nl> - include ' mcmod . info ' <nl> + include ' META _ INF / mods . toml ' <nl> <nl> / / replace version and mcversion <nl> expand ' version ' : project . version , ' mcversion ' : ' @ MC _ VERSION @ ' <nl> @ @ - 84 , 6 + 104 , 6 @ @ processResources { <nl> <nl> / / copy everything else except the mcmod . info <nl> from ( sourceSets . main . resources . srcDirs ) { <nl> - exclude ' mcmod . info ' <nl> + exclude ' META _ INF / mods . toml ' <nl> } <nl> } <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> new file mode 100644 <nl> index 0000000 . . 7f16338 <nl> - - - / dev / null <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> @ @ - 0 , 0 + 1 , 135 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . userdev ; <nl> + <nl> + import com . google . common . collect . Sets ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . IModLocator ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . net . URISyntaxException ; <nl> + import java . net . URL ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Path ; <nl> + import java . util . * ; <nl> + import java . util . function . Consumer ; <nl> + import java . util . jar . Manifest ; <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> + <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> + <nl> + public class ClasspathLocator implements IModLocator <nl> + { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + <nl> + public ClasspathLocator ( ) { <nl> + } <nl> + <nl> + @ Override <nl> + public List < ModFile > scanMods ( ) { <nl> + Set < URL > modUrls = Sets . newHashSet ( ) ; <nl> + ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; <nl> + try <nl> + { <nl> + modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( " META - INF / coremods . json " ) ) ) ; <nl> + modUrls . addAll ( Collections . list ( loader . getResources ( " META - INF / coremods . json " ) ) ) ; <nl> + modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( " META - INF / mods . toml " ) ) ) ; <nl> + modUrls . addAll ( Collections . list ( loader . getResources ( " META - INF / mods . toml " ) ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + <nl> + return modUrls . stream ( ) . map ( ( url ) - > { <nl> + try <nl> + { <nl> + / / We got URLs including " META - INF / < something " , so get two components up . <nl> + return new File ( url . toURI ( ) ) . toPath ( ) . getParent ( ) . getParent ( ) ; <nl> + } <nl> + catch ( URISyntaxException e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + return null ; <nl> + } ) . filter ( Objects : : nonNull ) . distinct ( ) <nl> + . map ( path - > new ModFile ( path , this ) ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String name ( ) { <nl> + return " classpath mods " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Path findPath ( final ModFile modFile , final String . . . path ) { <nl> + if ( path . length < 1 ) { <nl> + throw new IllegalArgumentException ( " Missing path " ) ; <nl> + } <nl> + return modFile . getFilePath ( ) . resolve ( modFile . getFilePath ( ) . getFileSystem ( ) . getPath ( path [ 0 ] , Arrays . copyOfRange ( path , 1 , path . length ) ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void scanFile ( final ModFile modFile , final Consumer < Path > pathConsumer ) { <nl> + LOGGER . debug ( SCAN , " Scanning classpath " ) ; <nl> + <nl> + Path filePath = modFile . getFilePath ( ) ; <nl> + <nl> + Path scanPath = filePath ; <nl> + <nl> + / / Hack 1 : When running from within intellij , we get <nl> + / / " out / production / resources " + " out / production / classes " <nl> + if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) <nl> + { <nl> + scanPath = filePath . getParent ( ) . resolve ( " classes " ) ; <nl> + } <nl> + / / Hack 2 : When running from gradle , we get <nl> + / / " build / resources / < sourceset > " + " build / classes / < language > / < sourceset > " <nl> + else if ( filePath . getNameCount ( ) > = 2 & & filePath . getName ( filePath . getNameCount ( ) - 2 ) . toString ( ) . equals ( " resources " ) ) <nl> + { <nl> + / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . <nl> + scanPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; <nl> + } <nl> + <nl> + try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { <nl> + files . forEach ( pathConsumer ) ; <nl> + } catch ( IOException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + LOGGER . debug ( SCAN , " Classpath scan complete " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " { Classpath locator } " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Optional < Manifest > findManifest ( Path file ) <nl> + { <nl> + return Optional . empty ( ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java <nl> new file mode 100644 <nl> index 0000000 . . 53061fa <nl> - - - / dev / null <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java <nl> @ @ - 0 , 0 + 1 , 106 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . userdev ; <nl> + <nl> + import com . google . common . base . Strings ; <nl> + import com . google . common . collect . ObjectArrays ; <nl> + import cpw . mods . modlauncher . Launcher ; <nl> + import org . apache . logging . log4j . Level ; <nl> + import org . apache . logging . log4j . core . Filter ; <nl> + import org . apache . logging . log4j . core . LoggerContext ; <nl> + import org . apache . logging . log4j . core . config . Configurator ; <nl> + import org . apache . logging . log4j . core . filter . MarkerFilter ; <nl> + <nl> + import java . io . File ; <nl> + import java . lang . reflect . Field ; <nl> + import java . util . * ; <nl> + <nl> + public class UserdevLauncher <nl> + { <nl> + public static void main ( String . . . args ) throws InterruptedException <nl> + { <nl> + Configurator . setRootLevel ( Level . DEBUG ) ; <nl> + final MarkerFilter classloadingFilter = MarkerFilter . createFilter ( " CLASSLOADING " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final MarkerFilter launchpluginFilter = MarkerFilter . createFilter ( " LAUNCHPLUGIN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final MarkerFilter axformFilter = MarkerFilter . createFilter ( " AXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final MarkerFilter eventbusFilter = MarkerFilter . createFilter ( " EVENTBUS " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final MarkerFilter distxformFilter = MarkerFilter . createFilter ( " DISTXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + final LoggerContext logcontext = LoggerContext . getContext ( false ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( classloadingFilter ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( launchpluginFilter ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( axformFilter ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( eventbusFilter ) ; <nl> + logcontext . getConfiguration ( ) . addFilter ( distxformFilter ) ; <nl> + logcontext . updateLoggers ( ) ; <nl> + <nl> + String assets = System . getenv ( ) . getOrDefault ( " assetDirectory " , " assets " ) ; <nl> + String target = System . getenv ( ) . get ( " target " ) ; <nl> + <nl> + if ( assets = = null | | ! new File ( assets ) . exists ( ) ) { <nl> + throw new IllegalArgumentException ( " Environment variable ' assets ' must be set to a valid path . " ) ; <nl> + } <nl> + if ( target = = null ) { <nl> + throw new IllegalArgumentException ( " Environment variable ' target ' must be set to ' fmldevclient ' or ' fmldevserver ' . " ) ; <nl> + } <nl> + <nl> + if ( Objects . equals ( target , " fmldevclient " ) ) { <nl> + hackNatives ( ) ; <nl> + Launcher . main ( " - - launchTarget " , target , <nl> + " - - gameDir " , " . " , <nl> + " - - accessToken " , " blah " , <nl> + " - - version " , " FMLDev " , <nl> + " - - assetIndex " , " 1 . 13 " , <nl> + " - - assetsDir " , assets , <nl> + " - - userProperties " , " { } " ) ; <nl> + } else if ( Objects . equals ( target , " fmldevserver " ) ) { <nl> + String [ ] launchargs = ObjectArrays . concat ( new String [ ] { " - - launchTarget " , target , <nl> + " - - gameDir " , " . " } , args , String . class ) ; <nl> + Launcher . main ( launchargs ) ; <nl> + } else { <nl> + throw new IllegalArgumentException ( " Unknown value for ' target ' property : " + target ) ; <nl> + } <nl> + Thread . sleep ( 10000 ) ; <nl> + } <nl> + <nl> + private static void hackNatives ( ) <nl> + { <nl> + String paths = System . getProperty ( " java . library . path " ) ; <nl> + String nativesDir = System . getenv ( ) . get ( " nativesDirectory " ) ; <nl> + <nl> + if ( Strings . isNullOrEmpty ( paths ) ) <nl> + paths = nativesDir ; <nl> + else <nl> + paths + = File . pathSeparator + nativesDir ; <nl> + <nl> + System . setProperty ( " java . library . path " , paths ) ; <nl> + <nl> + / / hack the classloader now . <nl> + try <nl> + { <nl> + final Field sysPathsField = ClassLoader . class . getDeclaredField ( " sys _ paths " ) ; <nl> + sysPathsField . setAccessible ( true ) ; <nl> + sysPathsField . set ( null , null ) ; <nl> + } <nl> + catch ( Throwable t ) { } <nl> + } <nl> + <nl> + <nl> + <nl> + } <nl> diff - - git a / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator b / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator <nl> new file mode 100644 <nl> index 0000000 . . fc6e5d3 <nl> - - - / dev / null <nl> + + + b / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator <nl> @ @ - 0 , 0 + 1 @ @ <nl> + net . minecraftforge . userdev . ClasspathLocator <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 8dfa80e . . 1f725cd 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 160 , 37 + 160 , 39 @ @ project ( ' : forge ' ) { 
 accessTransformer = file ( " $ rootDir / src / main / resources / META - INF / accesstransformer . cfg " ) 
 exc = file ( " $ rootDir / src / main / resources / forge . exc " ) 
 srgPatches = true 
 - clientRun { 
 - main = ' net . minecraftforge . fml . LaunchTesting ' 
 - environment = [ 
 - target : ' fmldevclient ' , 
 - assetDirectory : downloadAssets . output , 
 - nativesDirectory : extractNatives . output 
 - ] 
 - properties = [ 
 - ' org . lwjgl . util . Debug ' : ' true ' , 
 - ' org . lwjgl . util . DebugLoader ' : ' true ' , 
 - ' org . lwjgl . system . SharedLibraryExtractDirectory ' : ' lwjgl _ dll ' , 
 - ' mc . version ' : MC _ VERSION , 
 - ' mcp . version ' : MCP _ VERSION , 
 - ' forge . version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , 
 - ' forge . spec ' : SPEC _ VERSION , 
 - ' forge . group ' : project . group , 
 - ' fmllauncher . version ' : SPEC _ VERSION 
 - ] 
 - } 
 - serverRun { 
 - main = ' net . minecraftforge . fml . LaunchTesting ' 
 - environment = [ 
 - target : ' fmldevserver ' 
 - ] 
 - properties = [ 
 - ' mc . version ' : MC _ VERSION , 
 - ' mcp . version ' : MCP _ VERSION , 
 - ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , 
 - ' forge . spec ' : SPEC _ VERSION , 
 - ' forge . group ' : project . group 
 - ] 
 + runs { 
 + client = { 
 + main ' net . minecraftforge . fml . LaunchTesting ' 
 + environment = [ 
 + target : ' fmldevclient ' , 
 + assetDirectory : downloadAssets . output , 
 + nativesDirectory : extractNatives . output 
 + ] 
 + properties = [ 
 + ' org . lwjgl . util . Debug ' : ' true ' , 
 + ' org . lwjgl . util . DebugLoader ' : ' true ' , 
 + ' org . lwjgl . system . SharedLibraryExtractDirectory ' : ' lwjgl _ dll ' , 
 + ' mc . version ' : MC _ VERSION , 
 + ' mcp . version ' : MCP _ VERSION , 
 + ' forge . version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , 
 + ' forge . spec ' : SPEC _ VERSION , 
 + ' forge . group ' : project . group , 
 + ' fmllauncher . version ' : SPEC _ VERSION 
 + ] 
 + } 
 + server = { 
 + main ' net . minecraftforge . fml . LaunchTesting ' 
 + environment = [ 
 + target : ' fmldevserver ' 
 + ] 
 + properties = [ 
 + ' mc . version ' : MC _ VERSION , 
 + ' mcp . version ' : MCP _ VERSION , 
 + ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , 
 + ' forge . spec ' : SPEC _ VERSION , 
 + ' forge . group ' : project . group 
 + ] 
 + } 
 } 
 } 
 
 @ @ - 283 , 9 + 285 , 9 @ @ project ( ' : forge ' ) { 
 } 
 / / jvmArgs = [ ' - verbose : class ' ] 
 classpath sourceSets . main . runtimeClasspath 
 - main patcher . clientRun . main 
 - systemProperties = patcher . clientRun . properties 
 - environment + = patcher . clientRun . environment 
 + main patcher . runs . client . main 
 + systemProperties = patcher . runs . client . properties 
 + environment + = patcher . runs . client . environment 
 workingDir ' runclient ' 
 } 
 
 @ @ - 300 , 10 + 302 , 10 @ @ project ( ' : forge ' ) { 
 } 
 } 
 classpath sourceSets . main . runtimeClasspath 
 - main patcher . serverRun . main 
 + main patcher . runs . server . main 
 args ' nogui ' 
 - systemProperties = patcher . serverRun . properties 
 - environment + = patcher . serverRun . environment 
 + systemProperties = patcher . runs . server . properties 
 + environment + = patcher . runs . server . environment 
 workingDir ' runserver ' 
 standardInput = System . in 
 } 
 @ @ - 790 , 6 + 792 , 31 @ @ project ( ' : forge ' ) { 
 artifacts . each { key , lib - > 
 addLibrary ( lib . name ) 
 } 
 + addLibrary ( " $ { project . group } : $ { project . name } : $ { project . version } : launcher " ) 
 + runs { 
 + client = { 
 + main ' net . minecraftforge . userdev . UserdevLauncher ' 
 + environment ' target ' , ' fmluserdevclient ' 
 + environment ' assetDirectory ' , ' { assets _ root } ' 
 + environment ' nativesDirectory ' , ' { natives } ' 
 + environment ' FORGE _ VERSION ' , project . version . substring ( MC _ VERSION . length ( ) + 1 ) 
 + environment ' FORGE _ GROUP ' , project . group 
 + environment ' MCP _ VERSION ' , MCP _ VERSION 
 + environment ' MC _ VERSION ' , MC _ VERSION 
 + environment ' MOD _ CLASSES ' , ' { source _ roots } ' 
 + environment ' MCP _ MAPPINGS ' , ' { mcp _ mappings } ' 
 + } 
 + server = { 
 + main ' net . minecraftforge . userdev . UserdevLauncher ' 
 + environment ' target ' , ' fmldevserver ' 
 + environment ' FORGE _ VERSION ' , project . version . substring ( MC _ VERSION . length ( ) + 1 ) 
 + environment ' FORGE _ GROUP ' , project . group 
 + environment ' MCP _ VERSION ' , MCP _ VERSION 
 + environment ' MC _ VERSION ' , MC _ VERSION 
 + environment ' MOD _ CLASSES ' , ' { source _ roots } ' 
 + environment ' MCP _ MAPPINGS ' , ' { mcp _ mappings } ' 
 + } 
 + } 
 } 
 
 license { 
 diff - - git a / mdk / build . gradle b / mdk / build . gradle 
 index a6e9b95 . . ee4428e 100644 
 - - - a / mdk / build . gradle 
 + + + b / mdk / build . gradle 
 @ @ - 1 , 17 + 1 , 9 @ @ 
 buildscript { 
 repositories { 
 - mavenLocal ( ) 
 maven { url = ' https : / / files . minecraftforge . net / maven ' } 
 jcenter ( ) 
 mavenCentral ( ) 
 } 
 - / / This is only here while i ' m activly developing FG , Remind me to remove when we publically release 
 - configurations { 
 - classpath . resolutionStrategy { 
 - cacheDynamicVersionsFor 10 , ' seconds ' 
 - cacheChangingModulesFor 0 , ' seconds ' 
 - } 
 - } 
 dependencies { 
 classpath group : ' net . minecraftforge . gradle ' , name : ' ForgeGradle ' , version : ' 3 . + ' , changing : true 
 } 
 @ @ - 24 , 10 + 16 , 7 @ @ version = ' 1 . 0 ' 
 group = ' com . yourname . modid ' / / http : / / maven . apache . org / guides / mini / guide - naming - conventions . html 
 archivesBaseName = ' modid ' 
 
 - sourceCompatibility = targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . 
 - compileJava { 
 - sourceCompatibility = targetCompatibility = ' 1 . 8 ' 
 - } 
 + sourceCompatibility = targetCompatibility = compileJava . sourceCompatibility = compileJava . targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . 
 
 minecraft { 
 / / the mappings can be changed at any time , and must be in the following format . 
 @ @ - 42 , 22 + 31 , 14 @ @ minecraft { 
 
 / / default run configurations . 
 / / these can be tweaked , removed , or duplicated as needed . 
 - runConfig { 
 - name = " Minecraft Client " 
 - main = " net . minecraftforge . userdev . UserdevLauncher " 
 - ideaModuleName = " $ { project . name } _ main " 
 - workingDirectory = project . file ( " run " ) . canonicalPath 
 - environment " target " , " fmldevclient " 
 - environment " assetDirectory " , downloadAssets . output . absolutePath 
 - } 
 - 
 - runConfig { 
 - name = " Minecraft Server " 
 - main = " net . minecraftforge . userdev . UserdevLauncher " 
 - ideaModuleName = " $ { project . name } _ main " 
 - workingDirectory = project . file ( " run " ) . canonicalPath 
 - environment " target " , " fmldevserver " 
 - environment " assetDirectory " , downloadAssets . output . absolutePath 
 + runs { 
 + client = { 
 + workingDirectory project . file ( ' run ' ) . canonicalPath 
 + source sourceSets . main 
 + } 
 + server = { 
 + workingDirectory project . file ( ' run ' ) . canonicalPath 
 + } 
 } 
 } 
 
 @ @ - 65 , 7 + 46 , 7 @ @ dependencies { 
 / / Specify the version of Minecraft to use , If this is any group other then ' net . minecraft ' it is assumed 
 / / that the dep is a ForgeGradle ' patcher ' dependency . And it ' s patches will be applied . 
 / / The userdev artifact is a special name and will get all sorts of transformations applied to it . 
 - minecraft ' @ FORGE _ GROUP @ : userdev : @ FORGE _ VERSION @ ' 
 + minecraft ' @ FORGE _ GROUP @ : @ FORGE _ NAME @ : @ FORGE _ VERSION @ ' 
 
 / / you may put jars on which you depend on in . / libs 
 / / or you may define them like so . . 
 @ @ - 79 , 10 + 60 , 8 @ @ dependencies { 
 / / the ' provided ' configuration is for optional dependencies that exist at compile - time but might not at runtime . 
 / / provided ' com . mod - buildcraft : buildcraft : 6 . 0 . 8 : dev ' 
 
 - / / the deobf configurations : ' deobfCompile ' and ' deobfProvided ' are the same as the normal compile and provided , 
 - / / except that these dependencies get remapped to your current MCP mappings 
 - / / deobfCompile ' com . mod - buildcraft : buildcraft : 6 . 0 . 8 : dev ' 
 - / / deobfProvided ' com . mod - buildcraft : buildcraft : 6 . 0 . 8 : dev ' 
 + / / These dependencies get remapped to your current MCP mappings 
 + / / deobf ' com . mod - buildcraft : buildcraft : 6 . 0 . 8 : dev ' 
 
 / / for more info . . . 
 / / http : / / www . gradle . org / docs / current / userguide / artifact _ dependencies _ tutorial . html 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLServiceProvider . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLServiceProvider . java 
 index 32bef29 . . 7ffe7eb 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLServiceProvider . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLServiceProvider . java 
 @ @ - 45 , 12 + 45 , 14 @ @ public class FMLServiceProvider implements ITransformationService 
 private ArgumentAcceptingOptionSpec < String > mcOption ; 
 private ArgumentAcceptingOptionSpec < String > forgeGroupOption ; 
 private ArgumentAcceptingOptionSpec < String > mcpOption ; 
 + private ArgumentAcceptingOptionSpec < String > mappingsOption ; 
 private List < String > modsArgumentList ; 
 private List < String > modListsArgumentList ; 
 private List < String > mavenRootsArgumentList ; 
 private String targetForgeVersion ; 
 private String targetMcVersion ; 
 private String targetMcpVersion ; 
 + private String targetMcpMappings ; 
 private String targetForgeGroup ; 
 
 @ Override 
 @ @ - 74 , 6 + 76 , 7 @ @ public class FMLServiceProvider implements ITransformationService 
 arguments . put ( " forgeGroup " , targetForgeGroup ) ; 
 arguments . put ( " mcVersion " , targetMcVersion ) ; 
 arguments . put ( " mcpVersion " , targetMcpVersion ) ; 
 + arguments . put ( " mcpMappings " , targetMcpMappings ) ; 
 LOGGER . debug ( CORE , " Preparing launch handler " ) ; 
 FMLLoader . setupLaunchHandler ( environment , arguments ) ; 
 LOGGER . debug ( CORE , " Initiating mod scan " ) ; 
 @ @ - 95 , 6 + 98 , 7 @ @ public class FMLServiceProvider implements ITransformationService 
 forgeGroupOption = argumentBuilder . apply ( " forgeGroup " , " Forge Group ( for testing ) " ) . withRequiredArg ( ) . ofType ( String . class ) . defaultsTo ( " net . minecraftforge " ) ; 
 mcOption = argumentBuilder . apply ( " mcVersion " , " Minecraft Version number " ) . withRequiredArg ( ) . ofType ( String . class ) . required ( ) ; 
 mcpOption = argumentBuilder . apply ( " mcpVersion " , " MCP Version number " ) . withRequiredArg ( ) . ofType ( String . class ) . required ( ) ; 
 + mappingsOption = argumentBuilder . apply ( " mcpMappings " , " MCP Mappings Channel and Version " ) . withRequiredArg ( ) . ofType ( String . class ) ; 
 modsOption = argumentBuilder . apply ( " mods " , " List of mods to add " ) . withRequiredArg ( ) . ofType ( String . class ) . withValuesSeparatedBy ( " , " ) ; 
 modListsOption = argumentBuilder . apply ( " modLists " , " JSON modlists " ) . withRequiredArg ( ) . ofType ( String . class ) . withValuesSeparatedBy ( " , " ) ; 
 mavenRootsOption = argumentBuilder . apply ( " mavenRoots " , " Maven root directories " ) . withRequiredArg ( ) . ofType ( String . class ) . withValuesSeparatedBy ( " , " ) ; 
 @ @ - 110 , 6 + 114 , 7 @ @ public class FMLServiceProvider implements ITransformationService 
 targetForgeGroup = option . value ( forgeGroupOption ) ; 
 targetMcVersion = option . value ( mcOption ) ; 
 targetMcpVersion = option . value ( mcpOption ) ; 
 + targetMcpMappings = option . value ( mappingsOption ) ; 
 } 
 
 @ Nonnull 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 2007403 . . 6864f88 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 695 , 7 + 695 , 7 @ @ public class GameData 
 / / Loader . instance ( ) . fireRemapEvent ( remaps , false ) ; 
 
 / / The id map changed , ensure we apply object holders 
 - / / ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 
 / / Return an empty list , because we ' re good 
 return ArrayListMultimap . create ( ) ; 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 index 7a8412e . . 011ac0a 100644 
 - - - a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 + + + b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 @ @ - 44 , 7 + 44 , 6 @ @ public class ClasspathLocator implements IModLocator 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 private static final String COREMODS = " META - INF / coremods . json " ; 
 private static final String MODS = " META - INF / mods . toml " ; 
 - private Map < Path , List < Path > > paths = Maps . newHashMap ( ) ; 
 
 public ClasspathLocator ( ) { } 
 
 @ @ - 75 , 9 + 74 , 12 @ @ public class ClasspathLocator implements IModLocator 
 e . printStackTrace ( ) ; 
 } 
 return null ; 
 - } ) . filter ( Objects : : nonNull ) . distinct ( ) 
 - . map ( path - > new ModFile ( path , this ) ) 
 - . collect ( Collectors . toList ( ) ) ; 
 + } ) 
 + . filter ( Objects : : nonNull ) 
 + . distinct ( ) 
 + . filter ( Files : : isRegularFile ) / / We ' re only looking for remapped jars , exploded directories are handled by FMLUserdevLaunchProvider 
 + . map ( path - > new ModFile ( path , this ) ) 
 + . collect ( Collectors . toList ( ) ) ; 
 } 
 
 @ Override 
 @ @ - 121 , 6 + 123 , 7 @ @ public class ClasspathLocator implements IModLocator 
 { 
 Path classesPath = filePath ; 
 
 + / * 
 / / Hack 1 : When running from within intellij , we get 
 / / " out / production / resources " + " out / production / classes " 
 if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) 
 @ @ - 134 , 6 + 137 , 7 @ @ public class ClasspathLocator implements IModLocator 
 / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . 
 classesPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; 
 } 
 + * / 
 return classesPath ; 
 } 
 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java 
 index 7c2dfa3 . . dd594e0 100644 
 - - - a / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java 
 + + + b / src / userdev / java / net / minecraftforge / userdev / FMLUserdevLaunchProvider . java 
 @ @ - 29 , 7 + 29 , 7 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { 
 LOGGER . fatal ( CORE , " Unable to locate forge on the classpath " ) ; 
 throw new RuntimeException ( " Unable to locate forge on the classpath " ) ; 
 } 
 - forgeJar = LibraryFinder . findJarPathFor ( " ForgeVersion . class " , " forge " , forgePath ) ; 
 + forgeJar = LibraryFinder . findJarPathFor ( " ForgeVersion . class " , " forge " , forgePath ) ; 
 return forgeJar ; 
 } 
 
 @ @ - 41 , 8 + 41 , 9 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { 
 final String forgeVersion = ( String ) arguments . get ( " forgeVersion " ) ; 
 final String mcVersion = ( String ) arguments . get ( " mcVersion " ) ; 
 final String mcpVersion = ( String ) arguments . get ( " mcpVersion " ) ; 
 + final String mcpMappings = ( String ) arguments . get ( " mcpMappings " ) ; 
 final String forgeGroup = ( String ) arguments . get ( " forgeGroup " ) ; 
 - final String userdevVersion = mcVersion + " - " + forgeVersion + " _ mapped _ snapshot _ " + mcpVersion ; 
 + final String userdevVersion = mcVersion + " - " + forgeVersion + " _ mapped _ " + mcpMappings ; 
 int dirs = forgeGroup . split ( " \ \ . " ) . length + 2 ; 
 Path fjroot = forgeJar ; 
 do { 
 @ @ - 51 , 7 + 52 , 7 @ @ public abstract class FMLUserdevLaunchProvider extends FMLCommonLaunchHandler { 
 final String fjpath = fjroot . toString ( ) ; 
 LOGGER . debug ( CORE , " Injecting forge as mod { } from maven path { } " , userdevVersion , fjpath ) ; 
 mavenRoots . add ( fjpath ) ; 
 - mods . add ( forgeGroup + " : userdev : " + userdevVersion ) ; 
 + mods . add ( forgeGroup + " : forge : " + userdevVersion ) ; 
 
 try { 
 final Enumeration < URL > resources = ClassLoader . getSystemClassLoader ( ) . getResources ( " META - INF / mods . toml " ) ; 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java 
 index fe4b357 . . 6868de3 100644 
 - - - a / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java 
 + + + b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java 
 @ @ - 53 , 9 + 53 , 6 @ @ public class UserdevLauncher 
 String assets = System . getenv ( ) . getOrDefault ( " assetDirectory " , " assets " ) ; 
 String target = System . getenv ( ) . get ( " target " ) ; 
 
 - if ( assets = = null | | ! new File ( assets ) . exists ( ) ) { 
 - throw new IllegalArgumentException ( " Environment variable ' assets ' must be set to a valid path . " ) ; 
 - } 
 if ( target = = null ) { 
 throw new IllegalArgumentException ( " Environment variable ' target ' must be set to ' fmluserdevclient ' or ' fmluserdevserver ' . " ) ; 
 } 
 @ @ - 65 , 11 + 62 , 16 @ @ public class UserdevLauncher 
 " - - launchTarget " , target , 
 " - - fml . forgeVersion " , System . getenv ( " FORGE _ VERSION " ) , 
 " - - fml . mcpVersion " , System . getenv ( " MCP _ VERSION " ) , 
 + " - - fml . mcpMappings " , System . getenv ( " MCP _ MAPPINGS " ) , 
 " - - fml . mcVersion " , System . getenv ( " MC _ VERSION " ) , 
 " - - fml . forgeGroup " , System . getenv ( " FORGE _ GROUP " ) 
 } ; 
 
 if ( Objects . equals ( target , " fmluserdevclient " ) ) { 
 + if ( assets = = null | | ! new File ( assets ) . exists ( ) ) { 
 + throw new IllegalArgumentException ( " Environment variable ' assetDirectory ' must be set to a valid path . " ) ; 
 + } 
 + 
 hackNatives ( ) ; 
 launchArgs = ObjectArrays . concat ( launchArgs , new String [ ] { 
 " - - accessToken " , " blah " ,

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 7f1acda . . fd685e1 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 22 , 6 + 22 , 9 @ @ import net . minecraftforge . gradle . common . task . SignJar 
 import net . minecraftforge . gradle . patcher . task . ApplyBinPatches 
 import org . apache . tools . ant . filters . ReplaceTokens 
 import de . undercouch . gradle . tasks . download . Download 
 + import net . minecraftforge . gradle . patcher . task . TaskReobfuscateJar 
 + 
 + import java . util . stream . Collectors 
 
 plugins { 
 id ' net . minecrell . licenser ' version ' 0 . 4 ' 
 @ @ - 98 , 6 + 101 , 16 @ @ project ( ' : forge ' ) { 
 srcDir " $ rootDir / src / main / resources " 
 } 
 } 
 + userdev { 
 + compileClasspath + = sourceSets . main . runtimeClasspath 
 + runtimeClasspath + = sourceSets . main . runtimeClasspath 
 + java { 
 + srcDir " $ rootDir / src / userdev / java " 
 + } 
 + resources { 
 + srcDir " $ rootDir / src / userdev / resources " 
 + } 
 + } 
 } 
 repositories { 
 mavenLocal ( ) 
 @ @ - 755 , 6 + 768 , 33 @ @ project ( ' : forge ' ) { 
 } 
 } 
 
 + task userdevExtras ( type : Jar ) { 
 + dependsOn classes 
 + from sourceSets . userdev . output 
 + classifier ' userdev - temp ' 
 + } 
 + 
 + task userdevExtrasReobf ( type : TaskReobfuscateJar ) { 
 + dependsOn userdevExtras , createMcp2Srg 
 + input = tasks . userdevExtras . archivePath 
 + classpath = project . configurations . getByName ( " compile " ) 
 + srg = tasks . createMcp2Srg . output 
 + } 
 + 
 + userdevJar { 
 + dependsOn userdevExtrasReobf 
 + from ( zipTree ( tasks . userdevExtrasReobf . output ) ) { 
 + into ' / inject / ' 
 + } 
 + from ( sourceSets . userdev . output . resourcesDir ) { 
 + into ' / inject / ' 
 + } 
 + } 
 + 
 + applyRangeMap { 
 + setSources sourceSets . userdev . java . srcDirs . findAll ( { f - > ( f ! = patcher . patchedSrc ) } ) 
 + } 
 + 
 publishing { 
 publications { 
 mavenJava ( MavenPublication ) { 
 diff - - git a / mdk / build . gradle b / mdk / build . gradle 
 index ee711d2 . . ce344c1 100644 
 - - - a / mdk / build . gradle 
 + + + b / mdk / build . gradle 
 @ @ - 39 , 6 + 39 , 26 @ @ minecraft { 
 / / makeObfSourceJar = false / / an Srg named sources jar is made by default . uncomment this to disable . 
 
 / / accessTransformer = file ( ' my _ at . cfg ' ) 
 + 
 + / / default run configurations . 
 + / / these can be tweaked , removed , or duplicated as needed . 
 + runConfig { 
 + name = " Minecraft Client " 
 + main = " net . minecraftforge . userdev . UserdevLauncher " 
 + ideaModuleName = " $ { project . name } _ main " 
 + workingDirectory = project . file ( " run " ) . canonicalPath 
 + environment " target " , " fmldevclient " 
 + environment " assetDirectory " , downloadAssets . output . absolutePath 
 + } 
 + 
 + runConfig { 
 + name = " Minecraft Server " 
 + main = " net . minecraftforge . userdev . UserdevLauncher " 
 + ideaModuleName = " $ { project . name } _ main " 
 + workingDirectory = project . file ( " run " ) . canonicalPath 
 + environment " target " , " fmldevserver " 
 + environment " assetDirectory " , downloadAssets . output . absolutePath 
 + } 
 } 
 
 dependencies { 
 @ @ - 76 , 7 + 96 , 7 @ @ processResources { 
 
 / / replace stuff in mcmod . info , nothing else 
 from ( sourceSets . main . resources . srcDirs ) { 
 - include ' mcmod . info ' 
 + include ' META _ INF / mods . toml ' 
 
 / / replace version and mcversion 
 expand ' version ' : project . version , ' mcversion ' : ' @ MC _ VERSION @ ' 
 @ @ - 84 , 6 + 104 , 6 @ @ processResources { 
 
 / / copy everything else except the mcmod . info 
 from ( sourceSets . main . resources . srcDirs ) { 
 - exclude ' mcmod . info ' 
 + exclude ' META _ INF / mods . toml ' 
 } 
 } 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 new file mode 100644 
 index 0000000 . . 7f16338 
 - - - / dev / null 
 + + + b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 @ @ - 0 , 0 + 1 , 135 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . userdev ; 
 + 
 + import com . google . common . collect . Sets ; 
 + import net . minecraftforge . fml . loading . moddiscovery . IModLocator ; 
 + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import java . io . File ; 
 + import java . io . IOException ; 
 + import java . net . URISyntaxException ; 
 + import java . net . URL ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Path ; 
 + import java . util . * ; 
 + import java . util . function . Consumer ; 
 + import java . util . jar . Manifest ; 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 + 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 + 
 + public class ClasspathLocator implements IModLocator 
 + { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 + 
 + public ClasspathLocator ( ) { 
 + } 
 + 
 + @ Override 
 + public List < ModFile > scanMods ( ) { 
 + Set < URL > modUrls = Sets . newHashSet ( ) ; 
 + ClassLoader loader = Thread . currentThread ( ) . getContextClassLoader ( ) ; 
 + try 
 + { 
 + modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( " META - INF / coremods . json " ) ) ) ; 
 + modUrls . addAll ( Collections . list ( loader . getResources ( " META - INF / coremods . json " ) ) ) ; 
 + modUrls . addAll ( Collections . list ( ClassLoader . getSystemResources ( " META - INF / mods . toml " ) ) ) ; 
 + modUrls . addAll ( Collections . list ( loader . getResources ( " META - INF / mods . toml " ) ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + } 
 + 
 + return modUrls . stream ( ) . map ( ( url ) - > { 
 + try 
 + { 
 + / / We got URLs including " META - INF / < something " , so get two components up . 
 + return new File ( url . toURI ( ) ) . toPath ( ) . getParent ( ) . getParent ( ) ; 
 + } 
 + catch ( URISyntaxException e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + } 
 + return null ; 
 + } ) . filter ( Objects : : nonNull ) . distinct ( ) 
 + . map ( path - > new ModFile ( path , this ) ) 
 + . collect ( Collectors . toList ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public String name ( ) { 
 + return " classpath mods " ; 
 + } 
 + 
 + @ Override 
 + public Path findPath ( final ModFile modFile , final String . . . path ) { 
 + if ( path . length < 1 ) { 
 + throw new IllegalArgumentException ( " Missing path " ) ; 
 + } 
 + return modFile . getFilePath ( ) . resolve ( modFile . getFilePath ( ) . getFileSystem ( ) . getPath ( path [ 0 ] , Arrays . copyOfRange ( path , 1 , path . length ) ) ) ; 
 + } 
 + 
 + @ Override 
 + public void scanFile ( final ModFile modFile , final Consumer < Path > pathConsumer ) { 
 + LOGGER . debug ( SCAN , " Scanning classpath " ) ; 
 + 
 + Path filePath = modFile . getFilePath ( ) ; 
 + 
 + Path scanPath = filePath ; 
 + 
 + / / Hack 1 : When running from within intellij , we get 
 + / / " out / production / resources " + " out / production / classes " 
 + if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) 
 + { 
 + scanPath = filePath . getParent ( ) . resolve ( " classes " ) ; 
 + } 
 + / / Hack 2 : When running from gradle , we get 
 + / / " build / resources / < sourceset > " + " build / classes / < language > / < sourceset > " 
 + else if ( filePath . getNameCount ( ) > = 2 & & filePath . getName ( filePath . getNameCount ( ) - 2 ) . toString ( ) . equals ( " resources " ) ) 
 + { 
 + / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . 
 + scanPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; 
 + } 
 + 
 + try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { 
 + files . forEach ( pathConsumer ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + LOGGER . debug ( SCAN , " Classpath scan complete " ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " { Classpath locator } " ; 
 + } 
 + 
 + @ Override 
 + public Optional < Manifest > findManifest ( Path file ) 
 + { 
 + return Optional . empty ( ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java 
 new file mode 100644 
 index 0000000 . . 53061fa 
 - - - / dev / null 
 + + + b / src / userdev / java / net / minecraftforge / userdev / UserdevLauncher . java 
 @ @ - 0 , 0 + 1 , 106 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . userdev ; 
 + 
 + import com . google . common . base . Strings ; 
 + import com . google . common . collect . ObjectArrays ; 
 + import cpw . mods . modlauncher . Launcher ; 
 + import org . apache . logging . log4j . Level ; 
 + import org . apache . logging . log4j . core . Filter ; 
 + import org . apache . logging . log4j . core . LoggerContext ; 
 + import org . apache . logging . log4j . core . config . Configurator ; 
 + import org . apache . logging . log4j . core . filter . MarkerFilter ; 
 + 
 + import java . io . File ; 
 + import java . lang . reflect . Field ; 
 + import java . util . * ; 
 + 
 + public class UserdevLauncher 
 + { 
 + public static void main ( String . . . args ) throws InterruptedException 
 + { 
 + Configurator . setRootLevel ( Level . DEBUG ) ; 
 + final MarkerFilter classloadingFilter = MarkerFilter . createFilter ( " CLASSLOADING " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final MarkerFilter launchpluginFilter = MarkerFilter . createFilter ( " LAUNCHPLUGIN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final MarkerFilter axformFilter = MarkerFilter . createFilter ( " AXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final MarkerFilter eventbusFilter = MarkerFilter . createFilter ( " EVENTBUS " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final MarkerFilter distxformFilter = MarkerFilter . createFilter ( " DISTXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + final LoggerContext logcontext = LoggerContext . getContext ( false ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( classloadingFilter ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( launchpluginFilter ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( axformFilter ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( eventbusFilter ) ; 
 + logcontext . getConfiguration ( ) . addFilter ( distxformFilter ) ; 
 + logcontext . updateLoggers ( ) ; 
 + 
 + String assets = System . getenv ( ) . getOrDefault ( " assetDirectory " , " assets " ) ; 
 + String target = System . getenv ( ) . get ( " target " ) ; 
 + 
 + if ( assets = = null | | ! new File ( assets ) . exists ( ) ) { 
 + throw new IllegalArgumentException ( " Environment variable ' assets ' must be set to a valid path . " ) ; 
 + } 
 + if ( target = = null ) { 
 + throw new IllegalArgumentException ( " Environment variable ' target ' must be set to ' fmldevclient ' or ' fmldevserver ' . " ) ; 
 + } 
 + 
 + if ( Objects . equals ( target , " fmldevclient " ) ) { 
 + hackNatives ( ) ; 
 + Launcher . main ( " - - launchTarget " , target , 
 + " - - gameDir " , " . " , 
 + " - - accessToken " , " blah " , 
 + " - - version " , " FMLDev " , 
 + " - - assetIndex " , " 1 . 13 " , 
 + " - - assetsDir " , assets , 
 + " - - userProperties " , " { } " ) ; 
 + } else if ( Objects . equals ( target , " fmldevserver " ) ) { 
 + String [ ] launchargs = ObjectArrays . concat ( new String [ ] { " - - launchTarget " , target , 
 + " - - gameDir " , " . " } , args , String . class ) ; 
 + Launcher . main ( launchargs ) ; 
 + } else { 
 + throw new IllegalArgumentException ( " Unknown value for ' target ' property : " + target ) ; 
 + } 
 + Thread . sleep ( 10000 ) ; 
 + } 
 + 
 + private static void hackNatives ( ) 
 + { 
 + String paths = System . getProperty ( " java . library . path " ) ; 
 + String nativesDir = System . getenv ( ) . get ( " nativesDirectory " ) ; 
 + 
 + if ( Strings . isNullOrEmpty ( paths ) ) 
 + paths = nativesDir ; 
 + else 
 + paths + = File . pathSeparator + nativesDir ; 
 + 
 + System . setProperty ( " java . library . path " , paths ) ; 
 + 
 + / / hack the classloader now . 
 + try 
 + { 
 + final Field sysPathsField = ClassLoader . class . getDeclaredField ( " sys _ paths " ) ; 
 + sysPathsField . setAccessible ( true ) ; 
 + sysPathsField . set ( null , null ) ; 
 + } 
 + catch ( Throwable t ) { } 
 + } 
 + 
 + 
 + 
 + } 
 diff - - git a / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator b / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator 
 new file mode 100644 
 index 0000000 . . fc6e5d3 
 - - - / dev / null 
 + + + b / src / userdev / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator 
 @ @ - 0 , 0 + 1 @ @ 
 + net . minecraftforge . userdev . ClasspathLocator 
 \ No newline at end of file
