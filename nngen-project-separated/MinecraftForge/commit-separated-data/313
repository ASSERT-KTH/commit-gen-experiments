BLEU SCORE: 0.05522397783539471

TEST MSG: [ 1 . 12 ] Add Advancement Event
GENERATED MSG: Add DifficultyChangeEvent

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / advancements / PlayerAdvancements . java . patch b / patches / minecraft / net / minecraft / advancements / PlayerAdvancements . java . patch <nl> index e5b9a64 . . 9d422fd 100644 <nl> - - - a / patches / minecraft / net / minecraft / advancements / PlayerAdvancements . java . patch <nl> + + + b / patches / minecraft / net / minecraft / advancements / PlayerAdvancements . java . patch <nl> @ @ - 10 , 3 + 10 , 12 @ @ <nl> boolean flag = false ; <nl> AdvancementProgress advancementprogress = this . func _ 192747 _ a ( p _ 192750 _ 1 _ ) ; <nl> boolean flag1 = advancementprogress . func _ 192105 _ a ( ) ; <nl> + @ @ - 214 , 6 + 217 , 8 @ @ <nl> + { <nl> + this . field _ 192756 _ d . func _ 184103 _ al ( ) . func _ 148539 _ a ( new TextComponentTranslation ( " chat . type . advancement . " + p _ 192750 _ 1 _ . func _ 192068 _ c ( ) . func _ 192291 _ d ( ) . func _ 192307 _ a ( ) , new Object [ ] { this . field _ 192762 _ j . func _ 145748 _ c _ ( ) , p _ 192750 _ 1 _ . func _ 193123 _ j ( ) } ) ) ; <nl> + } <nl> + + <nl> + + net . minecraftforge . common . ForgeHooks . onAdvancement ( this . field _ 192762 _ j , p _ 192750 _ 1 _ ) ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 3b09e21 . . 355ba51 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 127 , 6 + 127 , 7 @ @ import net . minecraftforge . event . entity . player . AttackEntityEvent ; <nl> import net . minecraftforge . event . entity . player . CriticalHitEvent ; <nl> import net . minecraftforge . event . entity . player . PlayerEvent ; <nl> import net . minecraftforge . event . entity . player . PlayerInteractEvent ; <nl> + import net . minecraftforge . event . entity . player . AdvancementEvent ; <nl> import net . minecraftforge . event . world . BlockEvent ; <nl> import net . minecraftforge . event . world . NoteBlockEvent ; <nl> import net . minecraftforge . fluids . IFluidBlock ; <nl> @ @ - 1372 , 4 + 1373 , 9 @ @ public class ForgeHooks <nl> if ( recipes . size ( ) > 0 | | display . size ( ) > 0 ) <nl> connection . sendPacket ( new SPacketRecipeBook ( state , recipes , display , isGuiOpen , isFilteringCraftable ) ) ; <nl> } <nl> + <nl> + public static void onAdvancement ( EntityPlayerMP player , Advancement advancement ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new AdvancementEvent ( player , advancement ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / event / entity / player / AdvancementEvent . java b / src / main / java / net / minecraftforge / event / entity / player / AdvancementEvent . java <nl> new file mode 100644 <nl> index 0000000 . . c396343 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / entity / player / AdvancementEvent . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . event . entity . player ; <nl> + <nl> + import net . minecraft . advancements . Advancement ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> + <nl> + / * * <nl> + * This event is fired when a player gets an advancement . <nl> + * < br > <nl> + * This event is not { @ link Cancelable } . < br > <nl> + * < br > <nl> + * This event does not have a result . { @ link HasResult } < br > <nl> + * < br > <nl> + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . <nl> + * / <nl> + public class AdvancementEvent extends PlayerEvent <nl> + { <nl> + private final Advancement advancement ; <nl> + <nl> + public AdvancementEvent ( EntityPlayer player , Advancement advancement ) <nl> + { <nl> + super ( player ) ; <nl> + this . advancement = advancement ; <nl> + } <nl> + <nl> + public Advancement getAdvancement ( ) <nl> + { <nl> + return advancement ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / AdvancementEventTest . java b / src / test / java / net / minecraftforge / debug / AdvancementEventTest . java <nl> new file mode 100644 <nl> index 0000000 . . 1eac88b <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / AdvancementEventTest . java <nl> @ @ - 0 , 0 + 1 , 36 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . entity . player . AdvancementEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + @ Mod ( modid = AdvancementEventTest . MOD _ ID , name = " AdvancementEvent test mod " , version = " 1 . 0 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class AdvancementEventTest <nl> + { <nl> + static final String MOD _ ID = " advancement _ event _ test " ; <nl> + private static final boolean ENABLED = false ; <nl> + private static Logger logger ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + logger = event . getModLog ( ) ; <nl> + <nl> + if ( ENABLED ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( AdvancementEventTest . class ) ; <nl> + } <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void onAdvancementEvent ( AdvancementEvent event ) <nl> + { <nl> + if ( event . getAdvancement ( ) . getDisplay ( ) ! = null & & event . getAdvancement ( ) . getDisplay ( ) . shouldAnnounceToChat ( ) ) <nl> + { <nl> + logger . info ( " { } got the { } advancement " , event . getEntityPlayer ( ) . getDisplayNameString ( ) , event . getAdvancement ( ) . getDisplayText ( ) . getUnformattedText ( ) ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch <nl> index 0bb3fe9 . . 1a15939 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch <nl> @ @ - 16 , 7 + 16 , 15 @ @ <nl> p _ 76064 _ 1 _ . func _ 74772 _ a ( " RandomSeed " , this . field _ 76100 _ a ) ; <nl> p _ 76064 _ 1 _ . func _ 74778 _ a ( " generatorName " , this . field _ 76098 _ b . func _ 77127 _ a ( ) ) ; <nl> p _ 76064 _ 1 _ . func _ 74768 _ a ( " generatorVersion " , this . field _ 76098 _ b . func _ 77131 _ c ( ) ) ; <nl> - @ @ - 807 , 6 + 809 , 26 @ @ <nl> + @ @ - 709 , 6 + 711 , 7 @ @ <nl> + <nl> + public void func _ 176144 _ a ( EnumDifficulty p _ 176144 _ 1 _ ) <nl> + { <nl> + + net . minecraftforge . common . ForgeHooks . onDifficultyChange ( p _ 176144 _ 1 _ , this . field _ 176158 _ z ) ; <nl> + this . field _ 176158 _ z = p _ 176144 _ 1 _ ; <nl> + } <nl> + <nl> + @ @ - 807 , 6 + 810 , 26 @ @ <nl> } ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 92c2ee9 . . 4fa6049 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 89 , 12 + 89 , 14 @ @ import net . minecraft . util . text . TextFormatting ; <nl> import net . minecraft . util . text . event . ClickEvent ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> + import net . minecraft . world . EnumDifficulty ; <nl> import net . minecraft . world . GameType ; <nl> import net . minecraft . world . storage . loot . LootEntry ; <nl> import net . minecraft . world . storage . loot . LootTable ; <nl> import net . minecraft . world . storage . loot . conditions . LootCondition ; <nl> import net . minecraftforge . common . util . BlockSnapshot ; <nl> import net . minecraftforge . event . AnvilUpdateEvent ; <nl> + import net . minecraftforge . event . DifficultyChangeEvent ; <nl> import net . minecraftforge . event . ForgeEventFactory ; <nl> import net . minecraftforge . event . ServerChatEvent ; <nl> import net . minecraftforge . event . entity . EntityTravelToDimensionEvent ; <nl> @ @ - 510 , 6 + 512 , 11 @ @ public class ForgeHooks <nl> } <nl> return false ; <nl> } <nl> + <nl> + public static void onDifficultyChange ( EnumDifficulty difficulty , EnumDifficulty oldDifficulty ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new DifficultyChangeEvent ( difficulty , oldDifficulty ) ) ; <nl> + } <nl> <nl> / / Optifine Helper Functions u . u , these are here specifically for Optifine <nl> / / Note : When using Optifine , these methods are invoked using reflection , which <nl> diff - - git a / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java b / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 45e36cf <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . event ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + <nl> + import net . minecraft . world . EnumDifficulty ; <nl> + import net . minecraftforge . common . ForgeHooks ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event . HasResult ; <nl> + <nl> + / * * <nl> + * DifficultyChangeEvent is fired when difficulty is changing . < br > <nl> + * < br > <nl> + * This event is fired via the { @ link ForgeHooks # onDifficultyChange ( EnumDifficulty , EnumDifficulty ) } . < br > <nl> + * < br > <nl> + * This event is not { @ link Cancelable } . < br > <nl> + * < br > <nl> + * This event does not have a result . { @ link HasResult } < br > <nl> + * < br > <nl> + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . <nl> + * * / <nl> + public class DifficultyChangeEvent extends Event <nl> + { <nl> + private final EnumDifficulty difficulty ; <nl> + private final EnumDifficulty oldDifficulty ; <nl> + <nl> + public DifficultyChangeEvent ( EnumDifficulty difficulty , EnumDifficulty oldDifficulty ) <nl> + { <nl> + this . difficulty = difficulty ; <nl> + this . oldDifficulty = oldDifficulty ; <nl> + } <nl> + <nl> + public EnumDifficulty getDifficulty ( ) <nl> + { <nl> + return difficulty ; <nl> + } <nl> + <nl> + public EnumDifficulty getOldDifficulty ( ) <nl> + { <nl> + return oldDifficulty ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java b / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java <nl> new file mode 100644 <nl> index 0000000 . . a19430d <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java <nl> @ @ - 0 , 0 + 1 , 28 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import net . minecraft . world . EnumDifficulty ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . DifficultyChangeEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event . Result ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + @ Mod ( modid = " difficultychangeeventtest " , name = " DifficultyChangeEventTest " , version = " 0 . 0 . 0 " ) <nl> + public class DifficultyChangeEventTest <nl> + { <nl> + private static final boolean ENABLE = false ; <nl> + <nl> + @ EventHandler <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + if ( ENABLE ) MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void onDifficultyChange ( DifficultyChangeEvent event ) <nl> + { <nl> + System . out . println ( " Difficulty changed from " + event . getOldDifficulty ( ) + " to " + event . getDifficulty ( ) ) ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / advancements / PlayerAdvancements . java . patch b / patches / minecraft / net / minecraft / advancements / PlayerAdvancements . java . patch 
 index e5b9a64 . . 9d422fd 100644 
 - - - a / patches / minecraft / net / minecraft / advancements / PlayerAdvancements . java . patch 
 + + + b / patches / minecraft / net / minecraft / advancements / PlayerAdvancements . java . patch 
 @ @ - 10 , 3 + 10 , 12 @ @ 
 boolean flag = false ; 
 AdvancementProgress advancementprogress = this . func _ 192747 _ a ( p _ 192750 _ 1 _ ) ; 
 boolean flag1 = advancementprogress . func _ 192105 _ a ( ) ; 
 + @ @ - 214 , 6 + 217 , 8 @ @ 
 + { 
 + this . field _ 192756 _ d . func _ 184103 _ al ( ) . func _ 148539 _ a ( new TextComponentTranslation ( " chat . type . advancement . " + p _ 192750 _ 1 _ . func _ 192068 _ c ( ) . func _ 192291 _ d ( ) . func _ 192307 _ a ( ) , new Object [ ] { this . field _ 192762 _ j . func _ 145748 _ c _ ( ) , p _ 192750 _ 1 _ . func _ 193123 _ j ( ) } ) ) ; 
 + } 
 + + 
 + + net . minecraftforge . common . ForgeHooks . onAdvancement ( this . field _ 192762 _ j , p _ 192750 _ 1 _ ) ; 
 + } 
 + } 
 + 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 3b09e21 . . 355ba51 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 127 , 6 + 127 , 7 @ @ import net . minecraftforge . event . entity . player . AttackEntityEvent ; 
 import net . minecraftforge . event . entity . player . CriticalHitEvent ; 
 import net . minecraftforge . event . entity . player . PlayerEvent ; 
 import net . minecraftforge . event . entity . player . PlayerInteractEvent ; 
 + import net . minecraftforge . event . entity . player . AdvancementEvent ; 
 import net . minecraftforge . event . world . BlockEvent ; 
 import net . minecraftforge . event . world . NoteBlockEvent ; 
 import net . minecraftforge . fluids . IFluidBlock ; 
 @ @ - 1372 , 4 + 1373 , 9 @ @ public class ForgeHooks 
 if ( recipes . size ( ) > 0 | | display . size ( ) > 0 ) 
 connection . sendPacket ( new SPacketRecipeBook ( state , recipes , display , isGuiOpen , isFilteringCraftable ) ) ; 
 } 
 + 
 + public static void onAdvancement ( EntityPlayerMP player , Advancement advancement ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new AdvancementEvent ( player , advancement ) ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / event / entity / player / AdvancementEvent . java b / src / main / java / net / minecraftforge / event / entity / player / AdvancementEvent . java 
 new file mode 100644 
 index 0000000 . . c396343 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / entity / player / AdvancementEvent . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . event . entity . player ; 
 + 
 + import net . minecraft . advancements . Advancement ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 + 
 + / * * 
 + * This event is fired when a player gets an advancement . 
 + * < br > 
 + * This event is not { @ link Cancelable } . < br > 
 + * < br > 
 + * This event does not have a result . { @ link HasResult } < br > 
 + * < br > 
 + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . 
 + * / 
 + public class AdvancementEvent extends PlayerEvent 
 + { 
 + private final Advancement advancement ; 
 + 
 + public AdvancementEvent ( EntityPlayer player , Advancement advancement ) 
 + { 
 + super ( player ) ; 
 + this . advancement = advancement ; 
 + } 
 + 
 + public Advancement getAdvancement ( ) 
 + { 
 + return advancement ; 
 + } 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / AdvancementEventTest . java b / src / test / java / net / minecraftforge / debug / AdvancementEventTest . java 
 new file mode 100644 
 index 0000000 . . 1eac88b 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / AdvancementEventTest . java 
 @ @ - 0 , 0 + 1 , 36 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . entity . player . AdvancementEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + @ Mod ( modid = AdvancementEventTest . MOD _ ID , name = " AdvancementEvent test mod " , version = " 1 . 0 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class AdvancementEventTest 
 + { 
 + static final String MOD _ ID = " advancement _ event _ test " ; 
 + private static final boolean ENABLED = false ; 
 + private static Logger logger ; 
 + 
 + @ Mod . EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + logger = event . getModLog ( ) ; 
 + 
 + if ( ENABLED ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( AdvancementEventTest . class ) ; 
 + } 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void onAdvancementEvent ( AdvancementEvent event ) 
 + { 
 + if ( event . getAdvancement ( ) . getDisplay ( ) ! = null & & event . getAdvancement ( ) . getDisplay ( ) . shouldAnnounceToChat ( ) ) 
 + { 
 + logger . info ( " { } got the { } advancement " , event . getEntityPlayer ( ) . getDisplayNameString ( ) , event . getAdvancement ( ) . getDisplayText ( ) . getUnformattedText ( ) ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch 
 index 0bb3fe9 . . 1a15939 100644 
 - - - a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch 
 @ @ - 16 , 7 + 16 , 15 @ @ 
 p _ 76064 _ 1 _ . func _ 74772 _ a ( " RandomSeed " , this . field _ 76100 _ a ) ; 
 p _ 76064 _ 1 _ . func _ 74778 _ a ( " generatorName " , this . field _ 76098 _ b . func _ 77127 _ a ( ) ) ; 
 p _ 76064 _ 1 _ . func _ 74768 _ a ( " generatorVersion " , this . field _ 76098 _ b . func _ 77131 _ c ( ) ) ; 
 - @ @ - 807 , 6 + 809 , 26 @ @ 
 + @ @ - 709 , 6 + 711 , 7 @ @ 
 + 
 + public void func _ 176144 _ a ( EnumDifficulty p _ 176144 _ 1 _ ) 
 + { 
 + + net . minecraftforge . common . ForgeHooks . onDifficultyChange ( p _ 176144 _ 1 _ , this . field _ 176158 _ z ) ; 
 + this . field _ 176158 _ z = p _ 176144 _ 1 _ ; 
 + } 
 + 
 + @ @ - 807 , 6 + 810 , 26 @ @ 
 } ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 92c2ee9 . . 4fa6049 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 89 , 12 + 89 , 14 @ @ import net . minecraft . util . text . TextFormatting ; 
 import net . minecraft . util . text . event . ClickEvent ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 + import net . minecraft . world . EnumDifficulty ; 
 import net . minecraft . world . GameType ; 
 import net . minecraft . world . storage . loot . LootEntry ; 
 import net . minecraft . world . storage . loot . LootTable ; 
 import net . minecraft . world . storage . loot . conditions . LootCondition ; 
 import net . minecraftforge . common . util . BlockSnapshot ; 
 import net . minecraftforge . event . AnvilUpdateEvent ; 
 + import net . minecraftforge . event . DifficultyChangeEvent ; 
 import net . minecraftforge . event . ForgeEventFactory ; 
 import net . minecraftforge . event . ServerChatEvent ; 
 import net . minecraftforge . event . entity . EntityTravelToDimensionEvent ; 
 @ @ - 510 , 6 + 512 , 11 @ @ public class ForgeHooks 
 } 
 return false ; 
 } 
 + 
 + public static void onDifficultyChange ( EnumDifficulty difficulty , EnumDifficulty oldDifficulty ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new DifficultyChangeEvent ( difficulty , oldDifficulty ) ) ; 
 + } 
 
 / / Optifine Helper Functions u . u , these are here specifically for Optifine 
 / / Note : When using Optifine , these methods are invoked using reflection , which 
 diff - - git a / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java b / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java 
 new file mode 100644 
 index 0000000 . . 45e36cf 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . event ; 
 + 
 + import javax . annotation . Nonnull ; 
 + 
 + import net . minecraft . world . EnumDifficulty ; 
 + import net . minecraftforge . common . ForgeHooks ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + import net . minecraftforge . fml . common . eventhandler . Event . HasResult ; 
 + 
 + / * * 
 + * DifficultyChangeEvent is fired when difficulty is changing . < br > 
 + * < br > 
 + * This event is fired via the { @ link ForgeHooks # onDifficultyChange ( EnumDifficulty , EnumDifficulty ) } . < br > 
 + * < br > 
 + * This event is not { @ link Cancelable } . < br > 
 + * < br > 
 + * This event does not have a result . { @ link HasResult } < br > 
 + * < br > 
 + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . 
 + * * / 
 + public class DifficultyChangeEvent extends Event 
 + { 
 + private final EnumDifficulty difficulty ; 
 + private final EnumDifficulty oldDifficulty ; 
 + 
 + public DifficultyChangeEvent ( EnumDifficulty difficulty , EnumDifficulty oldDifficulty ) 
 + { 
 + this . difficulty = difficulty ; 
 + this . oldDifficulty = oldDifficulty ; 
 + } 
 + 
 + public EnumDifficulty getDifficulty ( ) 
 + { 
 + return difficulty ; 
 + } 
 + 
 + public EnumDifficulty getOldDifficulty ( ) 
 + { 
 + return oldDifficulty ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java b / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java 
 new file mode 100644 
 index 0000000 . . a19430d 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import net . minecraft . world . EnumDifficulty ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . DifficultyChangeEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . Event . Result ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + @ Mod ( modid = " difficultychangeeventtest " , name = " DifficultyChangeEventTest " , version = " 0 . 0 . 0 " ) 
 + public class DifficultyChangeEventTest 
 + { 
 + private static final boolean ENABLE = false ; 
 + 
 + @ EventHandler 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + if ( ENABLE ) MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void onDifficultyChange ( DifficultyChangeEvent event ) 
 + { 
 + System . out . println ( " Difficulty changed from " + event . getOldDifficulty ( ) + " to " + event . getDifficulty ( ) ) ; 
 + } 
 + } 
 \ No newline at end of file
