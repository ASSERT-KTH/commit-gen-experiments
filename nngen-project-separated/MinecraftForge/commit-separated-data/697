BLEU SCORE: 0.007306774575702796

TEST MSG: Fix paramters for addArmorMaterial , addOption and addGameType .
GENERATED MSG: Fix enum helpers for EnumRarity { moved to Commn and changed paramter } and EnumCreatureType { new parameter } and added junit test for them . Closes # 1009

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / EnumHelperClient . java b / src / main / java / net / minecraftforge / client / EnumHelperClient . java <nl> index 62604d9 . . 0f8a48d 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / EnumHelperClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / EnumHelperClient . java <nl> @ @ - 2 , 35 + 2 , 42 @ @ package net . minecraftforge . client ; <nl> <nl> import net . minecraft . util . Util . EnumOS ; <nl> import net . minecraft . world . WorldSettings . GameType ; <nl> - import net . minecraft . client . settings . GameSettings . Options ; <nl> + import net . minecraft . client . settings . GameSettings . Options ; <nl> import net . minecraftforge . common . util . EnumHelper ; <nl> <nl> public class EnumHelperClient extends EnumHelper <nl> { <nl> private static Class < ? > [ ] [ ] clientTypes = <nl> { <nl> - { GameType . class , int . class , String . class } , <nl> + { GameType . class , int . class , String . class , String . class } , <nl> { Options . class , String . class , boolean . class , boolean . class } , <nl> { EnumOS . class } <nl> } ; <nl> - <nl> - public static GameType addGameType ( String name , int id , String displayName ) <nl> + <nl> + public static GameType addGameType ( String name , int id , String displayName , String shortName ) <nl> { <nl> - return addEnum ( GameType . class , name , id , displayName ) ; <nl> + return addEnum ( GameType . class , name , id , displayName , shortName ) ; <nl> } <nl> - <nl> + <nl> public static Options addOptions ( String name , String langName , boolean isSlider , boolean isToggle ) <nl> { <nl> return addEnum ( Options . class , name , langName , isSlider , isToggle ) ; <nl> } <nl> - <nl> + <nl> + public static Options addOptions ( String name , String langName , boolean isSlider , boolean isToggle , float valMin , float valMax , float valStep ) <nl> + { <nl> + return addEnum ( Options . class , name , <nl> + new Class < ? > [ ] { String . class , boolean . class , boolean . class , float . class , float . class , float . class } , <nl> + langName , isSlider , isToggle , valMin , valMax , valStep ) ; <nl> + } <nl> + <nl> public static EnumOS addOS2 ( String name ) <nl> { <nl> return addEnum ( EnumOS . class , name ) ; <nl> } <nl> <nl> - public static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) <nl> + private static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) <nl> { <nl> return addEnum ( clientTypes , enumType , enumName , paramValues ) ; <nl> } <nl> - } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / EnumHelper . java b / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> index 54c001c . . b939a99 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> @ @ - 38 , 7 + 38 , 7 @ @ public class EnumHelper <nl> private static Class < ? > [ ] [ ] commonTypes = <nl> { <nl> { EnumAction . class } , <nl> - { ArmorMaterial . class , String . class , int . class , int [ ] . class , int . class , SoundEvent . class } , <nl> + { ArmorMaterial . class , String . class , int . class , int [ ] . class , int . class , SoundEvent . class , float . class } , <nl> { EnumArt . class , String . class , int . class , int . class , int . class , int . class } , <nl> { EnumCreatureAttribute . class } , <nl> { EnumCreatureType . class , Class . class , int . class , Material . class , boolean . class , boolean . class } , <nl> @ @ - 56 , 9 + 56 , 9 @ @ public class EnumHelper <nl> { <nl> return addEnum ( EnumAction . class , name ) ; <nl> } <nl> - public static ArmorMaterial addArmorMaterial ( String name , String textureName , int durability , int [ ] reductionAmounts , int enchantability , SoundEvent soundOnEquip ) <nl> + public static ArmorMaterial addArmorMaterial ( String name , String textureName , int durability , int [ ] reductionAmounts , int enchantability , SoundEvent soundOnEquip , float toughness ) <nl> { <nl> - return addEnum ( ArmorMaterial . class , name , textureName , durability , reductionAmounts , enchantability , soundOnEquip ) ; <nl> + return addEnum ( ArmorMaterial . class , name , textureName , durability , reductionAmounts , enchantability , soundOnEquip , toughness ) ; <nl> } <nl> public static EnumArt addArt ( String name , String tile , int sizeX , int sizeY , int offsetX , int offsetY ) <nl> { <nl> @ @ - 181 , 13 + 181 , 13 @ @ public class EnumHelper <nl> blankField ( enumClass , " enumConstants " ) ; <nl> } <nl> <nl> - public static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) <nl> + private static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) <nl> { <nl> setup ( ) ; <nl> return addEnum ( commonTypes , enumType , enumName , paramValues ) ; <nl> } <nl> <nl> - public static < T extends Enum < ? > > T addEnum ( Class < ? > [ ] [ ] map , Class < T > enumType , String enumName , Object . . . paramValues ) <nl> + protected static < T extends Enum < ? > > T addEnum ( Class < ? > [ ] [ ] map , Class < T > enumType , String enumName , Object . . . paramValues ) <nl> { <nl> for ( Class < ? > [ ] lookup : map ) <nl> { <nl> @ @ - 353 , 4 + 353 , 4 @ @ public class EnumHelper <nl> setup ( ) ; <nl> } <nl> } <nl> - } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / EnumHelperClient . java b / src / main / java / net / minecraftforge / client / EnumHelperClient . java <nl> index c3520e0 . . 65149fb 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / EnumHelperClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / EnumHelperClient . java <nl> @ @ - 13 , 8 + 13 , 7 @ @ public class EnumHelperClient extends EnumHelper <nl> { <nl> { GameType . class , int . class , String . class } , <nl> { Options . class , String . class , boolean . class , boolean . class } , <nl> - { EnumOS . class } , <nl> - { EnumRarity . class , int . class , String . class } <nl> + { EnumOS . class } <nl> } ; <nl> <nl> public static GameType addGameType ( String name , int id , String displayName ) <nl> @ @ - 31 , 11 + 30 , 6 @ @ public class EnumHelperClient extends EnumHelper <nl> { <nl> return addEnum ( EnumOS . class , name ) ; <nl> } <nl> - <nl> - public static EnumRarity addRarity ( String name , int color , String displayName ) <nl> - { <nl> - return addEnum ( EnumRarity . class , name , color , displayName ) ; <nl> - } <nl> <nl> public static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / EnumHelper . java b / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> index 5cc5e71 . . f71408a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> @ @ - 13 , 8 + 13 , 10 @ @ import net . minecraft . entity . EnumCreatureType ; <nl> import net . minecraft . entity . item . EntityPainting . EnumArt ; <nl> import net . minecraft . entity . player . EntityPlayer . EnumStatus ; <nl> import net . minecraft . item . EnumAction ; <nl> + import net . minecraft . item . EnumRarity ; <nl> import net . minecraft . item . Item . ToolMaterial ; <nl> import net . minecraft . item . ItemArmor . ArmorMaterial ; <nl> + import net . minecraft . util . EnumChatFormatting ; <nl> import net . minecraft . util . MovingObjectPosition . MovingObjectType ; <nl> import net . minecraft . world . EnumSkyBlock ; <nl> import net . minecraft . world . gen . structure . StructureStrongholdPieces . Stronghold . Door ; <nl> @ @ - 37 , 7 + 39 , 7 @ @ public class EnumHelper <nl> { ArmorMaterial . class , int . class , int [ ] . class , int . class } , <nl> { EnumArt . class , String . class , int . class , int . class , int . class , int . class } , <nl> { EnumCreatureAttribute . class } , <nl> - { EnumCreatureType . class , Class . class , int . class , Material . class , boolean . class } , <nl> + { EnumCreatureType . class , Class . class , int . class , Material . class , boolean . class , boolean . class } , <nl> { Door . class } , <nl> { EnumEnchantmentType . class } , <nl> { EnumEntitySize . class } , <nl> @ @ - 45 , 7 + 47 , 8 @ @ public class EnumHelper <nl> { MovingObjectType . class } , <nl> { EnumSkyBlock . class , int . class } , <nl> { EnumStatus . class } , <nl> - { ToolMaterial . class , int . class , int . class , float . class , float . class , int . class } <nl> + { ToolMaterial . class , int . class , int . class , float . class , float . class , int . class } , <nl> + { EnumRarity . class , EnumChatFormatting . class , String . class } <nl> } ; <nl> <nl> public static EnumAction addAction ( String name ) <nl> @ @ - 65 , 9 + 68 , 9 @ @ public class EnumHelper <nl> return addEnum ( EnumCreatureAttribute . class , name ) ; <nl> } <nl> @ SuppressWarnings ( " rawtypes " ) <nl> - public static EnumCreatureType addCreatureType ( String name , Class typeClass , int maxNumber , Material material , boolean peaceful ) <nl> + public static EnumCreatureType addCreatureType ( String name , Class typeClass , int maxNumber , Material material , boolean peaceful , boolean animal ) <nl> { <nl> - return addEnum ( EnumCreatureType . class , name , typeClass , maxNumber , material , peaceful ) ; <nl> + return addEnum ( EnumCreatureType . class , name , typeClass , maxNumber , material , peaceful , animal ) ; <nl> } <nl> public static Door addDoor ( String name ) <nl> { <nl> @ @ - 101 , 6 + 104 , 10 @ @ public class EnumHelper <nl> { <nl> return addEnum ( ToolMaterial . class , name , harvestLevel , maxUses , efficiency , damage , enchantability ) ; <nl> } <nl> + public static EnumRarity addRarity ( String name , EnumChatFormatting color , String displayName ) <nl> + { <nl> + return addEnum ( EnumRarity . class , name , color , displayName ) ; <nl> + } <nl> <nl> private static void setup ( ) <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / test / EnumHelperTest . java b / src / test / java / net / minecraftforge / test / EnumHelperTest . java <nl> new file mode 100644 <nl> index 0000000 . . a79582e <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / EnumHelperTest . java <nl> @ @ - 0 , 0 + 1 , 58 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import java . lang . reflect . Constructor ; <nl> + import java . lang . reflect . Method ; <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraftforge . client . EnumHelperClient ; <nl> + import net . minecraftforge . common . util . EnumHelper ; <nl> + <nl> + import org . apache . logging . log4j . core . helpers . Assert ; <nl> + import org . junit . Test ; <nl> + <nl> + import cpw . mods . fml . relauncher . ReflectionHelper ; <nl> + <nl> + public class EnumHelperTest <nl> + { <nl> + private boolean failed = false ; <nl> + <nl> + @ Test <nl> + public void test ( ) <nl> + { <nl> + System . out . println ( " Testing EnumHelper : " ) ; <nl> + Object [ ] [ ] types = ( Object [ ] [ ] ) ReflectionHelper . getPrivateValue ( EnumHelper . class , null , " commonTypes " ) ; <nl> + for ( Object [ ] o : types ) <nl> + testType ( o ) ; <nl> + <nl> + System . out . println ( " Testing EnumHelperClient : " ) ; <nl> + types = ( Object [ ] [ ] ) ReflectionHelper . getPrivateValue ( EnumHelperClient . class , null , " clentTypes " ) ; <nl> + for ( Object [ ] o : types ) <nl> + testType ( o ) ; <nl> + <nl> + if ( failed ) <nl> + throw new RuntimeException ( " Enum Helper test failed ! " ) ; <nl> + } <nl> + private void testType ( Object [ ] info ) <nl> + { <nl> + Class < ? > cls = ( Class ) info [ 0 ] ; <nl> + Class < ? > [ ] parameterTypes = new Class [ info . length + 2 - 1 ] ; <nl> + parameterTypes [ 0 ] = String . class ; <nl> + parameterTypes [ 1 ] = int . class ; <nl> + System . arraycopy ( info , 1 , parameterTypes , 2 , info . length - 1 ) ; <nl> + try <nl> + { <nl> + cls . getDeclaredConstructor ( parameterTypes ) ; <nl> + System . out . println ( " " + cls . getName ( ) + " : Success " ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + System . out . println ( " " + cls . getName ( ) + " : Failed " ) ; <nl> + for ( Constructor < ? > c : cls . getDeclaredConstructors ( ) ) <nl> + { <nl> + System . out . println ( " " + c . toString ( ) ) ; <nl> + } <nl> + failed = true ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / EnumHelperClient . java b / src / main / java / net / minecraftforge / client / EnumHelperClient . java 
 index 62604d9 . . 0f8a48d 100644 
 - - - a / src / main / java / net / minecraftforge / client / EnumHelperClient . java 
 + + + b / src / main / java / net / minecraftforge / client / EnumHelperClient . java 
 @ @ - 2 , 35 + 2 , 42 @ @ package net . minecraftforge . client ; 
 
 import net . minecraft . util . Util . EnumOS ; 
 import net . minecraft . world . WorldSettings . GameType ; 
 - import net . minecraft . client . settings . GameSettings . Options ; 
 + import net . minecraft . client . settings . GameSettings . Options ; 
 import net . minecraftforge . common . util . EnumHelper ; 
 
 public class EnumHelperClient extends EnumHelper 
 { 
 private static Class < ? > [ ] [ ] clientTypes = 
 { 
 - { GameType . class , int . class , String . class } , 
 + { GameType . class , int . class , String . class , String . class } , 
 { Options . class , String . class , boolean . class , boolean . class } , 
 { EnumOS . class } 
 } ; 
 - 
 - public static GameType addGameType ( String name , int id , String displayName ) 
 + 
 + public static GameType addGameType ( String name , int id , String displayName , String shortName ) 
 { 
 - return addEnum ( GameType . class , name , id , displayName ) ; 
 + return addEnum ( GameType . class , name , id , displayName , shortName ) ; 
 } 
 - 
 + 
 public static Options addOptions ( String name , String langName , boolean isSlider , boolean isToggle ) 
 { 
 return addEnum ( Options . class , name , langName , isSlider , isToggle ) ; 
 } 
 - 
 + 
 + public static Options addOptions ( String name , String langName , boolean isSlider , boolean isToggle , float valMin , float valMax , float valStep ) 
 + { 
 + return addEnum ( Options . class , name , 
 + new Class < ? > [ ] { String . class , boolean . class , boolean . class , float . class , float . class , float . class } , 
 + langName , isSlider , isToggle , valMin , valMax , valStep ) ; 
 + } 
 + 
 public static EnumOS addOS2 ( String name ) 
 { 
 return addEnum ( EnumOS . class , name ) ; 
 } 
 
 - public static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) 
 + private static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) 
 { 
 return addEnum ( clientTypes , enumType , enumName , paramValues ) ; 
 } 
 - } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / common / util / EnumHelper . java b / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 index 54c001c . . b939a99 100644 
 - - - a / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 @ @ - 38 , 7 + 38 , 7 @ @ public class EnumHelper 
 private static Class < ? > [ ] [ ] commonTypes = 
 { 
 { EnumAction . class } , 
 - { ArmorMaterial . class , String . class , int . class , int [ ] . class , int . class , SoundEvent . class } , 
 + { ArmorMaterial . class , String . class , int . class , int [ ] . class , int . class , SoundEvent . class , float . class } , 
 { EnumArt . class , String . class , int . class , int . class , int . class , int . class } , 
 { EnumCreatureAttribute . class } , 
 { EnumCreatureType . class , Class . class , int . class , Material . class , boolean . class , boolean . class } , 
 @ @ - 56 , 9 + 56 , 9 @ @ public class EnumHelper 
 { 
 return addEnum ( EnumAction . class , name ) ; 
 } 
 - public static ArmorMaterial addArmorMaterial ( String name , String textureName , int durability , int [ ] reductionAmounts , int enchantability , SoundEvent soundOnEquip ) 
 + public static ArmorMaterial addArmorMaterial ( String name , String textureName , int durability , int [ ] reductionAmounts , int enchantability , SoundEvent soundOnEquip , float toughness ) 
 { 
 - return addEnum ( ArmorMaterial . class , name , textureName , durability , reductionAmounts , enchantability , soundOnEquip ) ; 
 + return addEnum ( ArmorMaterial . class , name , textureName , durability , reductionAmounts , enchantability , soundOnEquip , toughness ) ; 
 } 
 public static EnumArt addArt ( String name , String tile , int sizeX , int sizeY , int offsetX , int offsetY ) 
 { 
 @ @ - 181 , 13 + 181 , 13 @ @ public class EnumHelper 
 blankField ( enumClass , " enumConstants " ) ; 
 } 
 
 - public static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) 
 + private static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) 
 { 
 setup ( ) ; 
 return addEnum ( commonTypes , enumType , enumName , paramValues ) ; 
 } 
 
 - public static < T extends Enum < ? > > T addEnum ( Class < ? > [ ] [ ] map , Class < T > enumType , String enumName , Object . . . paramValues ) 
 + protected static < T extends Enum < ? > > T addEnum ( Class < ? > [ ] [ ] map , Class < T > enumType , String enumName , Object . . . paramValues ) 
 { 
 for ( Class < ? > [ ] lookup : map ) 
 { 
 @ @ - 353 , 4 + 353 , 4 @ @ public class EnumHelper 
 setup ( ) ; 
 } 
 } 
 - } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / EnumHelperClient . java b / src / main / java / net / minecraftforge / client / EnumHelperClient . java 
 index c3520e0 . . 65149fb 100644 
 - - - a / src / main / java / net / minecraftforge / client / EnumHelperClient . java 
 + + + b / src / main / java / net / minecraftforge / client / EnumHelperClient . java 
 @ @ - 13 , 8 + 13 , 7 @ @ public class EnumHelperClient extends EnumHelper 
 { 
 { GameType . class , int . class , String . class } , 
 { Options . class , String . class , boolean . class , boolean . class } , 
 - { EnumOS . class } , 
 - { EnumRarity . class , int . class , String . class } 
 + { EnumOS . class } 
 } ; 
 
 public static GameType addGameType ( String name , int id , String displayName ) 
 @ @ - 31 , 11 + 30 , 6 @ @ public class EnumHelperClient extends EnumHelper 
 { 
 return addEnum ( EnumOS . class , name ) ; 
 } 
 - 
 - public static EnumRarity addRarity ( String name , int color , String displayName ) 
 - { 
 - return addEnum ( EnumRarity . class , name , color , displayName ) ; 
 - } 
 
 public static < T extends Enum < ? > > T addEnum ( Class < T > enumType , String enumName , Object . . . paramValues ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / common / util / EnumHelper . java b / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 index 5cc5e71 . . f71408a 100644 
 - - - a / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 @ @ - 13 , 8 + 13 , 10 @ @ import net . minecraft . entity . EnumCreatureType ; 
 import net . minecraft . entity . item . EntityPainting . EnumArt ; 
 import net . minecraft . entity . player . EntityPlayer . EnumStatus ; 
 import net . minecraft . item . EnumAction ; 
 + import net . minecraft . item . EnumRarity ; 
 import net . minecraft . item . Item . ToolMaterial ; 
 import net . minecraft . item . ItemArmor . ArmorMaterial ; 
 + import net . minecraft . util . EnumChatFormatting ; 
 import net . minecraft . util . MovingObjectPosition . MovingObjectType ; 
 import net . minecraft . world . EnumSkyBlock ; 
 import net . minecraft . world . gen . structure . StructureStrongholdPieces . Stronghold . Door ; 
 @ @ - 37 , 7 + 39 , 7 @ @ public class EnumHelper 
 { ArmorMaterial . class , int . class , int [ ] . class , int . class } , 
 { EnumArt . class , String . class , int . class , int . class , int . class , int . class } , 
 { EnumCreatureAttribute . class } , 
 - { EnumCreatureType . class , Class . class , int . class , Material . class , boolean . class } , 
 + { EnumCreatureType . class , Class . class , int . class , Material . class , boolean . class , boolean . class } , 
 { Door . class } , 
 { EnumEnchantmentType . class } , 
 { EnumEntitySize . class } , 
 @ @ - 45 , 7 + 47 , 8 @ @ public class EnumHelper 
 { MovingObjectType . class } , 
 { EnumSkyBlock . class , int . class } , 
 { EnumStatus . class } , 
 - { ToolMaterial . class , int . class , int . class , float . class , float . class , int . class } 
 + { ToolMaterial . class , int . class , int . class , float . class , float . class , int . class } , 
 + { EnumRarity . class , EnumChatFormatting . class , String . class } 
 } ; 
 
 public static EnumAction addAction ( String name ) 
 @ @ - 65 , 9 + 68 , 9 @ @ public class EnumHelper 
 return addEnum ( EnumCreatureAttribute . class , name ) ; 
 } 
 @ SuppressWarnings ( " rawtypes " ) 
 - public static EnumCreatureType addCreatureType ( String name , Class typeClass , int maxNumber , Material material , boolean peaceful ) 
 + public static EnumCreatureType addCreatureType ( String name , Class typeClass , int maxNumber , Material material , boolean peaceful , boolean animal ) 
 { 
 - return addEnum ( EnumCreatureType . class , name , typeClass , maxNumber , material , peaceful ) ; 
 + return addEnum ( EnumCreatureType . class , name , typeClass , maxNumber , material , peaceful , animal ) ; 
 } 
 public static Door addDoor ( String name ) 
 { 
 @ @ - 101 , 6 + 104 , 10 @ @ public class EnumHelper 
 { 
 return addEnum ( ToolMaterial . class , name , harvestLevel , maxUses , efficiency , damage , enchantability ) ; 
 } 
 + public static EnumRarity addRarity ( String name , EnumChatFormatting color , String displayName ) 
 + { 
 + return addEnum ( EnumRarity . class , name , color , displayName ) ; 
 + } 
 
 private static void setup ( ) 
 { 
 diff - - git a / src / test / java / net / minecraftforge / test / EnumHelperTest . java b / src / test / java / net / minecraftforge / test / EnumHelperTest . java 
 new file mode 100644 
 index 0000000 . . a79582e 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / EnumHelperTest . java 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import java . lang . reflect . Constructor ; 
 + import java . lang . reflect . Method ; 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import net . minecraftforge . client . EnumHelperClient ; 
 + import net . minecraftforge . common . util . EnumHelper ; 
 + 
 + import org . apache . logging . log4j . core . helpers . Assert ; 
 + import org . junit . Test ; 
 + 
 + import cpw . mods . fml . relauncher . ReflectionHelper ; 
 + 
 + public class EnumHelperTest 
 + { 
 + private boolean failed = false ; 
 + 
 + @ Test 
 + public void test ( ) 
 + { 
 + System . out . println ( " Testing EnumHelper : " ) ; 
 + Object [ ] [ ] types = ( Object [ ] [ ] ) ReflectionHelper . getPrivateValue ( EnumHelper . class , null , " commonTypes " ) ; 
 + for ( Object [ ] o : types ) 
 + testType ( o ) ; 
 + 
 + System . out . println ( " Testing EnumHelperClient : " ) ; 
 + types = ( Object [ ] [ ] ) ReflectionHelper . getPrivateValue ( EnumHelperClient . class , null , " clentTypes " ) ; 
 + for ( Object [ ] o : types ) 
 + testType ( o ) ; 
 + 
 + if ( failed ) 
 + throw new RuntimeException ( " Enum Helper test failed ! " ) ; 
 + } 
 + private void testType ( Object [ ] info ) 
 + { 
 + Class < ? > cls = ( Class ) info [ 0 ] ; 
 + Class < ? > [ ] parameterTypes = new Class [ info . length + 2 - 1 ] ; 
 + parameterTypes [ 0 ] = String . class ; 
 + parameterTypes [ 1 ] = int . class ; 
 + System . arraycopy ( info , 1 , parameterTypes , 2 , info . length - 1 ) ; 
 + try 
 + { 
 + cls . getDeclaredConstructor ( parameterTypes ) ; 
 + System . out . println ( " " + cls . getName ( ) + " : Success " ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + System . out . println ( " " + cls . getName ( ) + " : Failed " ) ; 
 + for ( Constructor < ? > c : cls . getDeclaredConstructors ( ) ) 
 + { 
 + System . out . println ( " " + c . toString ( ) ) ; 
 + } 
 + failed = true ; 
 + } 
 + } 
 + }
