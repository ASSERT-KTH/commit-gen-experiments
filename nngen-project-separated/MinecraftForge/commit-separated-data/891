BLEU SCORE: 0.023770532797338144

TEST MSG: Try and make sure active substitutions are immediately available in the block to item map .
GENERATED MSG: Take control over Item . BLOCK _ TO _ ITEM map and register Block ' s to this map from GameRegistry .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index 607ac29 . . f096a29 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 565 , 7 + 565 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> } <nl> } <nl> <nl> - void activateSubstitution ( ResourceLocation nameToReplace ) <nl> + I activateSubstitution ( ResourceLocation nameToReplace ) <nl> { <nl> if ( getPersistentSubstitutions ( ) . containsKey ( nameToReplace ) ) <nl> { <nl> @ @ - 573 , 7 + 573 , 9 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> I sub = getPersistentSubstitutions ( ) . get ( nameToReplace ) ; <nl> getExistingDelegate ( original ) . changeReference ( sub ) ; <nl> activeSubstitutions . put ( nameToReplace , sub ) ; <nl> + return original ; <nl> } <nl> + return null ; <nl> } <nl> <nl> void addSubstitutionAlias ( String modId , ResourceLocation nameToReplace , I replacement ) throws ExistingSubstitutionException <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index aa8c082 . . 71e8546 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 14 , 6 + 14 , 8 @ @ package net . minecraftforge . fml . common . registry ; <nl> <nl> import java . util . Map ; <nl> <nl> + import com . google . common . collect . BiMap ; <nl> + import com . google . common . collect . HashBiMap ; <nl> import com . google . common . collect . Maps ; <nl> <nl> import net . minecraft . block . Block ; <nl> @ @ - 190 , 16 + 192 , 26 @ @ public class GameData <nl> if ( type = = GameRegistry . Type . BLOCK ) <nl> { <nl> iBlockRegistry . addSubstitutionAlias ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , nameToSubstitute , ( Block ) toReplace ) ; <nl> - iBlockRegistry . activateSubstitution ( nameToSubstitute ) ; <nl> + Block orig = iBlockRegistry . activateSubstitution ( nameToSubstitute ) ; <nl> + if ( BLOCK _ TO _ ITEM . containsKey ( orig ) ) <nl> + { <nl> + Item i = BLOCK _ TO _ ITEM . get ( orig ) ; <nl> + BLOCK _ TO _ ITEM . forcePut ( ( Block ) toReplace , i ) ; <nl> + } <nl> } <nl> else if ( type = = GameRegistry . Type . ITEM ) <nl> { <nl> iItemRegistry . addSubstitutionAlias ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , nameToSubstitute , ( Item ) toReplace ) ; <nl> - iItemRegistry . activateSubstitution ( nameToSubstitute ) ; <nl> + Item orig = iItemRegistry . activateSubstitution ( nameToSubstitute ) ; <nl> + if ( BLOCK _ TO _ ITEM . containsValue ( orig ) ) <nl> + { <nl> + Block b = BLOCK _ TO _ ITEM . inverse ( ) . get ( orig ) ; <nl> + BLOCK _ TO _ ITEM . forcePut ( b , ( Item ) toReplace ) ; <nl> + } <nl> } <nl> } <nl> <nl> - private static Map < Block , Item > BLOCK _ TO _ ITEM = Maps . newHashMap ( ) ; <nl> + private static BiMap < Block , Item > BLOCK _ TO _ ITEM = HashBiMap . create ( ) ; <nl> <nl> / / Internal : DO NOT USE , will change without warning . <nl> public static Map getBlockItemMap ( ) <nl> @ @ - 254 , 7 + 266 , 7 @ @ public class GameData <nl> if ( item instanceof ItemBlock ) <nl> { <nl> ItemBlock itemBlock = ( ItemBlock ) item ; <nl> - BLOCK _ TO _ ITEM . put ( itemBlock . getBlock ( ) . delegate . get ( ) , item ) ; <nl> + BLOCK _ TO _ ITEM . forcePut ( itemBlock . getBlock ( ) . delegate . get ( ) , item ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / item / Item . java . patch b / fml / patches / minecraft / net / minecraft / item / Item . java . patch <nl> index c1115d8 . . bf45b6c 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / item / Item . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / item / Item . java . patch <nl> @ @ - 1 , 14 + 1 , 16 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / item / Item . java <nl> + + + . . / src - work / minecraft / net / minecraft / item / Item . java <nl> - @ @ - 47 , 7 + 47 , 7 @ @ <nl> + @ @ - 47 , 8 + 47 , 8 @ @ <nl> <nl> public class Item <nl> { <nl> - public static final RegistryNamespaced field _ 150901 _ e = new RegistryNamespaced ( ) ; <nl> + - private static final Map field _ 179220 _ a = Maps . newHashMap ( ) ; <nl> + public static final RegistryNamespaced field _ 150901 _ e = net . minecraftforge . fml . common . registry . GameData . getItemRegistry ( ) ; <nl> - private static final Map field _ 179220 _ a = Maps . newHashMap ( ) ; <nl> + + private static final Map field _ 179220 _ a = net . minecraftforge . fml . common . registry . GameData . getBlockItemMap ( ) ; <nl> protected static final UUID field _ 111210 _ e = UUID . fromString ( " CB3F55D3 - 645C - 4F38 - A497 - 9C13A33DB5CF " ) ; <nl> private CreativeTabs field _ 77701 _ a ; <nl> + protected static Random field _ 77697 _ d = new Random ( ) ; <nl> @ @ - 61 , 6 + 61 , 9 @ @ <nl> private String field _ 77774 _ bZ ; <nl> private static final String _ _ OBFID = " CL _ 00000041 " ; <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 3007fbc . . 02da755 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 142 , 23 + 142 , 9 @ @ public class GameData { <nl> return snap ; <nl> } <nl> <nl> - public static int [ ] getBlockedIds ( ) <nl> - { <nl> - int [ ] ret = new int [ getMain ( ) . blockedIds . size ( ) ] ; <nl> - int index = 0 ; <nl> - <nl> - for ( int id : getMain ( ) . blockedIds ) <nl> - { <nl> - ret [ index ] = id ; <nl> - index + + ; <nl> - } <nl> - <nl> - return ret ; <nl> - } <nl> - <nl> static Item findItem ( String modId , String name ) <nl> { <nl> - return ( Item ) getMain ( ) . iItemRegistry . getObject ( modId + " : " + name ) ; <nl> + return ( Item ) getMain ( ) . iItemRegistry . getObject ( modId + " : " + name ) ; <nl> } <nl> <nl> static Block findBlock ( String modId , String name ) <nl> @ @ - 940 , 4 + 926 , 11 @ @ public class GameData { <nl> throw new RuntimeException ( " WHAT ? " ) ; <nl> } <nl> } <nl> + <nl> + private static Map < Block , Item > BLOCK _ TO _ ITEM = Maps . newHashMap ( ) ; <nl> + / / Internal : DO NOT USE , will change without warning . <nl> + public static Map getBlockItemMap ( ) <nl> + { <nl> + return BLOCK _ TO _ ITEM ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> index 0286fcc . . e962249 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> @ @ - 183 , 15 + 183 , 6 @ @ public class GameRegistry <nl> } <nl> <nl> / * * <nl> - * @ deprecated Use the registerBlock version without the modId parameter instead . <nl> - * / <nl> - @ Deprecated <nl> - public static Block registerBlock ( Block block , Class < ? extends ItemBlock > itemclass , String name , String modId , Object . . . itemCtorArgs ) <nl> - { <nl> - return registerBlock ( block , itemclass , name , itemCtorArgs ) ; <nl> - } <nl> - <nl> - / * * <nl> * Register a block with the world , with the specified item class , block name and owning modId <nl> * @ param block The block to register <nl> * @ param itemclass The item type to register with it : null registers a block without associated item . <nl> @ @ - 224 , 6 + 215 , 7 @ @ public class GameRegistry <nl> if ( i ! = null ) <nl> { <nl> GameData . getMain ( ) . registerItem ( i , name ) ; <nl> + GameData . getBlockItemMap ( ) . put ( block , i ) ; <nl> } <nl> return block ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index 607ac29 . . f096a29 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 565 , 7 + 565 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 } 
 } 
 
 - void activateSubstitution ( ResourceLocation nameToReplace ) 
 + I activateSubstitution ( ResourceLocation nameToReplace ) 
 { 
 if ( getPersistentSubstitutions ( ) . containsKey ( nameToReplace ) ) 
 { 
 @ @ - 573 , 7 + 573 , 9 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 I sub = getPersistentSubstitutions ( ) . get ( nameToReplace ) ; 
 getExistingDelegate ( original ) . changeReference ( sub ) ; 
 activeSubstitutions . put ( nameToReplace , sub ) ; 
 + return original ; 
 } 
 + return null ; 
 } 
 
 void addSubstitutionAlias ( String modId , ResourceLocation nameToReplace , I replacement ) throws ExistingSubstitutionException 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index aa8c082 . . 71e8546 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 14 , 6 + 14 , 8 @ @ package net . minecraftforge . fml . common . registry ; 
 
 import java . util . Map ; 
 
 + import com . google . common . collect . BiMap ; 
 + import com . google . common . collect . HashBiMap ; 
 import com . google . common . collect . Maps ; 
 
 import net . minecraft . block . Block ; 
 @ @ - 190 , 16 + 192 , 26 @ @ public class GameData 
 if ( type = = GameRegistry . Type . BLOCK ) 
 { 
 iBlockRegistry . addSubstitutionAlias ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , nameToSubstitute , ( Block ) toReplace ) ; 
 - iBlockRegistry . activateSubstitution ( nameToSubstitute ) ; 
 + Block orig = iBlockRegistry . activateSubstitution ( nameToSubstitute ) ; 
 + if ( BLOCK _ TO _ ITEM . containsKey ( orig ) ) 
 + { 
 + Item i = BLOCK _ TO _ ITEM . get ( orig ) ; 
 + BLOCK _ TO _ ITEM . forcePut ( ( Block ) toReplace , i ) ; 
 + } 
 } 
 else if ( type = = GameRegistry . Type . ITEM ) 
 { 
 iItemRegistry . addSubstitutionAlias ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , nameToSubstitute , ( Item ) toReplace ) ; 
 - iItemRegistry . activateSubstitution ( nameToSubstitute ) ; 
 + Item orig = iItemRegistry . activateSubstitution ( nameToSubstitute ) ; 
 + if ( BLOCK _ TO _ ITEM . containsValue ( orig ) ) 
 + { 
 + Block b = BLOCK _ TO _ ITEM . inverse ( ) . get ( orig ) ; 
 + BLOCK _ TO _ ITEM . forcePut ( b , ( Item ) toReplace ) ; 
 + } 
 } 
 } 
 
 - private static Map < Block , Item > BLOCK _ TO _ ITEM = Maps . newHashMap ( ) ; 
 + private static BiMap < Block , Item > BLOCK _ TO _ ITEM = HashBiMap . create ( ) ; 
 
 / / Internal : DO NOT USE , will change without warning . 
 public static Map getBlockItemMap ( ) 
 @ @ - 254 , 7 + 266 , 7 @ @ public class GameData 
 if ( item instanceof ItemBlock ) 
 { 
 ItemBlock itemBlock = ( ItemBlock ) item ; 
 - BLOCK _ TO _ ITEM . put ( itemBlock . getBlock ( ) . delegate . get ( ) , item ) ; 
 + BLOCK _ TO _ ITEM . forcePut ( itemBlock . getBlock ( ) . delegate . get ( ) , item ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / item / Item . java . patch b / fml / patches / minecraft / net / minecraft / item / Item . java . patch 
 index c1115d8 . . bf45b6c 100644 
 - - - a / fml / patches / minecraft / net / minecraft / item / Item . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / item / Item . java . patch 
 @ @ - 1 , 14 + 1 , 16 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / item / Item . java 
 + + + . . / src - work / minecraft / net / minecraft / item / Item . java 
 - @ @ - 47 , 7 + 47 , 7 @ @ 
 + @ @ - 47 , 8 + 47 , 8 @ @ 
 
 public class Item 
 { 
 - public static final RegistryNamespaced field _ 150901 _ e = new RegistryNamespaced ( ) ; 
 + - private static final Map field _ 179220 _ a = Maps . newHashMap ( ) ; 
 + public static final RegistryNamespaced field _ 150901 _ e = net . minecraftforge . fml . common . registry . GameData . getItemRegistry ( ) ; 
 - private static final Map field _ 179220 _ a = Maps . newHashMap ( ) ; 
 + + private static final Map field _ 179220 _ a = net . minecraftforge . fml . common . registry . GameData . getBlockItemMap ( ) ; 
 protected static final UUID field _ 111210 _ e = UUID . fromString ( " CB3F55D3 - 645C - 4F38 - A497 - 9C13A33DB5CF " ) ; 
 private CreativeTabs field _ 77701 _ a ; 
 + protected static Random field _ 77697 _ d = new Random ( ) ; 
 @ @ - 61 , 6 + 61 , 9 @ @ 
 private String field _ 77774 _ bZ ; 
 private static final String _ _ OBFID = " CL _ 00000041 " ; 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 3007fbc . . 02da755 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 142 , 23 + 142 , 9 @ @ public class GameData { 
 return snap ; 
 } 
 
 - public static int [ ] getBlockedIds ( ) 
 - { 
 - int [ ] ret = new int [ getMain ( ) . blockedIds . size ( ) ] ; 
 - int index = 0 ; 
 - 
 - for ( int id : getMain ( ) . blockedIds ) 
 - { 
 - ret [ index ] = id ; 
 - index + + ; 
 - } 
 - 
 - return ret ; 
 - } 
 - 
 static Item findItem ( String modId , String name ) 
 { 
 - return ( Item ) getMain ( ) . iItemRegistry . getObject ( modId + " : " + name ) ; 
 + return ( Item ) getMain ( ) . iItemRegistry . getObject ( modId + " : " + name ) ; 
 } 
 
 static Block findBlock ( String modId , String name ) 
 @ @ - 940 , 4 + 926 , 11 @ @ public class GameData { 
 throw new RuntimeException ( " WHAT ? " ) ; 
 } 
 } 
 + 
 + private static Map < Block , Item > BLOCK _ TO _ ITEM = Maps . newHashMap ( ) ; 
 + / / Internal : DO NOT USE , will change without warning . 
 + public static Map getBlockItemMap ( ) 
 + { 
 + return BLOCK _ TO _ ITEM ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 index 0286fcc . . e962249 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 @ @ - 183 , 15 + 183 , 6 @ @ public class GameRegistry 
 } 
 
 / * * 
 - * @ deprecated Use the registerBlock version without the modId parameter instead . 
 - * / 
 - @ Deprecated 
 - public static Block registerBlock ( Block block , Class < ? extends ItemBlock > itemclass , String name , String modId , Object . . . itemCtorArgs ) 
 - { 
 - return registerBlock ( block , itemclass , name , itemCtorArgs ) ; 
 - } 
 - 
 - / * * 
 * Register a block with the world , with the specified item class , block name and owning modId 
 * @ param block The block to register 
 * @ param itemclass The item type to register with it : null registers a block without associated item . 
 @ @ - 224 , 6 + 215 , 7 @ @ public class GameRegistry 
 if ( i ! = null ) 
 { 
 GameData . getMain ( ) . registerItem ( i , name ) ; 
 + GameData . getBlockItemMap ( ) . put ( block , i ) ; 
 } 
 return block ; 
 }
