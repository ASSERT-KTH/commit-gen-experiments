BLEU SCORE: 0.04495986993385849

TEST MSG: Add supports for redirects when doing mod version checks
GENERATED MSG: Add support for loading mod advancements from the mod jar files .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 2ed033c . . db815e0 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 21 , 8 + 21 , 11 @ @ package net . minecraftforge . common ; <nl> <nl> import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> + import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . net . HttpURLConnection ; <nl> import java . net . URL ; <nl> + import java . net . URLConnection ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> @ @ - 68 , 6 + 71 , 8 @ @ public class ForgeVersion <nl> <nl> private static final Logger log = LogManager . getLogger ( MOD _ ID + " . VersionCheck " ) ; <nl> <nl> + private static final int MAX _ HTTP _ REDIRECTS = Integer . getInteger ( " http . maxRedirects " , 20 ) ; <nl> + <nl> public static int getMajorVersion ( ) <nl> { <nl> return majorVersion ; <nl> @ @ - 202 , 6 + 207 , 40 @ @ public class ForgeVersion <nl> } <nl> } <nl> <nl> + / * * <nl> + * Opens stream for given URL while following redirects <nl> + * / <nl> + private InputStream openUrlStream ( URL url ) throws IOException <nl> + { <nl> + URL currentUrl = url ; <nl> + for ( int redirects = 0 ; redirects < MAX _ HTTP _ REDIRECTS ; redirects + + ) <nl> + { <nl> + URLConnection c = currentUrl . openConnection ( ) ; <nl> + if ( c instanceof HttpURLConnection ) <nl> + { <nl> + HttpURLConnection huc = ( HttpURLConnection ) c ; <nl> + huc . setInstanceFollowRedirects ( false ) ; <nl> + int responseCode = huc . getResponseCode ( ) ; <nl> + if ( responseCode > = 300 & & responseCode < = 399 ) <nl> + { <nl> + try <nl> + { <nl> + String loc = huc . getHeaderField ( " Location " ) ; <nl> + currentUrl = new URL ( currentUrl , loc ) ; <nl> + continue ; <nl> + } <nl> + finally <nl> + { <nl> + huc . disconnect ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + return c . getInputStream ( ) ; <nl> + } <nl> + throw new IOException ( " Too many redirects while trying to fetch " + url ) ; <nl> + } <nl> + <nl> private void process ( ModContainer mod , URL url ) <nl> { <nl> try <nl> @ @ - 210 , 7 + 249 , 7 @ @ public class ForgeVersion <nl> Status status = PENDING ; <nl> ComparableVersion target = null ; <nl> <nl> - InputStream con = url . openStream ( ) ; <nl> + InputStream con = openUrlStream ( url ) ; <nl> String data = new String ( ByteStreams . toByteArray ( con ) , " UTF - 8 " ) ; <nl> con . close ( ) ; <nl>
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / advancements / AdvancementManager . java . patch b / patches / minecraft / net / minecraft / advancements / AdvancementManager . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 262c73d <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / advancements / AdvancementManager . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / advancements / AdvancementManager . java <nl> + + + + . . / src - work / minecraft / net / minecraft / advancements / AdvancementManager . java <nl> + @ @ - 66 , 6 + 66 , 7 @ @ <nl> + field _ 192784 _ c . func _ 192087 _ a ( ) ; <nl> + Map < ResourceLocation , Advancement . Builder > map = this . func _ 192781 _ c ( ) ; <nl> + this . func _ 192777 _ a ( map ) ; <nl> + + this . field _ 193768 _ e | = net . minecraftforge . common . ForgeHooks . loadAdvancements ( map ) ; <nl> + field _ 192784 _ c . func _ 192083 _ a ( map ) ; <nl> + <nl> + for ( Advancement advancement : field _ 192784 _ c . func _ 192088 _ b ( ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index d066108 . . 4515467 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 19 , 12 + 19 , 16 @ @ <nl> <nl> package net . minecraftforge . common ; <nl> <nl> + import java . io . BufferedReader ; <nl> + import java . io . IOException ; <nl> import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> + import java . nio . file . Files ; <nl> import java . util . ArrayList ; <nl> import java . util . Deque ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . Set ; <nl> import java . util . regex . Matcher ; <nl> @ @ - 37 , 6 + 41 , 8 @ @ import com . google . gson . Gson ; <nl> import com . google . gson . JsonObject ; <nl> import com . google . gson . JsonParseException ; <nl> <nl> + import net . minecraft . advancements . Advancement ; <nl> + import net . minecraft . advancements . AdvancementManager ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockLiquid ; <nl> import net . minecraft . block . material . Material ; <nl> @ @ - 94 , 6 + 100 , 7 @ @ import net . minecraft . world . storage . loot . LootEntry ; <nl> import net . minecraft . world . storage . loot . LootTable ; <nl> import net . minecraft . world . storage . loot . LootTableManager ; <nl> import net . minecraft . world . storage . loot . conditions . LootCondition ; <nl> + import net . minecraftforge . common . crafting . CraftingHelper ; <nl> import net . minecraftforge . common . util . BlockSnapshot ; <nl> import net . minecraftforge . event . AnvilUpdateEvent ; <nl> import net . minecraftforge . event . DifficultyChangeEvent ; <nl> @ @ - 118 , 12 + 125 , 17 @ @ import net . minecraftforge . event . entity . player . PlayerInteractEvent ; <nl> import net . minecraftforge . event . world . BlockEvent ; <nl> import net . minecraftforge . event . world . NoteBlockEvent ; <nl> import net . minecraftforge . fluids . IFluidBlock ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . eventhandler . Event ; <nl> import net . minecraftforge . fml . relauncher . ReflectionHelper ; <nl> - <nl> import javax . annotation . Nonnull ; <nl> import javax . annotation . Nullable ; <nl> <nl> + import org . apache . commons . io . FilenameUtils ; <nl> + import org . apache . commons . io . IOUtils ; <nl> + <nl> public class ForgeHooks <nl> { <nl> / / TODO : Loot tables ? <nl> @ @ - 1232 , 4 + 1244 , 61 @ @ public class ForgeHooks <nl> { <nl> MinecraftForge . EVENT _ BUS . post ( new BlockEvent . CropGrowEvent . Post ( worldIn , pos , state , worldIn . getBlockState ( pos ) ) ) ; <nl> } <nl> + <nl> + public static boolean loadAdvancements ( Map < ResourceLocation , Advancement . Builder > map ) <nl> + { <nl> + boolean errored = false ; <nl> + Loader . instance ( ) . setActiveModContainer ( null ) ; <nl> + / / Loader . instance ( ) . getActiveModList ( ) . forEach ( ( mod ) - > loadFactories ( mod ) ) ; <nl> + for ( ModContainer mod : Loader . instance ( ) . getActiveModList ( ) ) <nl> + { <nl> + errored | = ! loadAdvancements ( map , mod ) ; <nl> + } <nl> + Loader . instance ( ) . setActiveModContainer ( null ) ; <nl> + return errored ; <nl> + } <nl> + <nl> + private static boolean loadAdvancements ( Map < ResourceLocation , Advancement . Builder > map , ModContainer mod ) <nl> + { <nl> + return CraftingHelper . findFiles ( mod , " assets / " + mod . getModId ( ) + " / advancements " , null , <nl> + ( root , file ) - > <nl> + { <nl> + <nl> + String relative = root . relativize ( file ) . toString ( ) ; <nl> + if ( ! " json " . equals ( FilenameUtils . getExtension ( file . toString ( ) ) ) | | relative . startsWith ( " _ " ) ) <nl> + return true ; <nl> + <nl> + String name = FilenameUtils . removeExtension ( relative ) . replaceAll ( " \ \ \ \ " , " / " ) ; <nl> + ResourceLocation key = new ResourceLocation ( mod . getModId ( ) , name ) ; <nl> + <nl> + if ( ! map . containsKey ( key ) ) <nl> + { <nl> + BufferedReader reader = null ; <nl> + <nl> + try <nl> + { <nl> + reader = Files . newBufferedReader ( file ) ; <nl> + Advancement . Builder builder = JsonUtils . fromJson ( AdvancementManager . GSON , reader , Advancement . Builder . class ) ; <nl> + map . put ( key , builder ) ; <nl> + } <nl> + catch ( JsonParseException jsonparseexception ) <nl> + { <nl> + FMLLog . log . error ( " Parsing error loading built - in advancement " + key , ( Throwable ) jsonparseexception ) ; <nl> + return false ; <nl> + } <nl> + catch ( IOException ioexception ) <nl> + { <nl> + FMLLog . log . error ( " Couldn ' t read advancement " + key + " from " + file , ( Throwable ) ioexception ) ; <nl> + return false ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( reader ) ; <nl> + } <nl> + } <nl> + <nl> + return true ; <nl> + } <nl> + ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index ec00158 . . 4439617 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 34 , 7 + 34 , 9 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> + import java . util . function . BiFunction ; <nl> import java . util . function . BooleanSupplier ; <nl> + import java . util . function . Function ; <nl> <nl> import javax . annotation . Nonnull ; <nl> <nl> @ @ - 652 , 11 + 654 , 79 @ @ public class CraftingHelper { <nl> <nl> private static boolean loadRecipes ( ModContainer mod ) <nl> { <nl> + JsonContext ctx = new JsonContext ( mod . getModId ( ) ) ; <nl> + <nl> + return findFiles ( mod , " assets / " + mod . getModId ( ) + " / recipes " , <nl> + root - > <nl> + { <nl> + Path fPath = root . resolve ( " _ constants . json " ) ; <nl> + if ( fPath ! = null & & Files . exists ( fPath ) ) <nl> + { <nl> + BufferedReader reader = null ; <nl> + try <nl> + { <nl> + reader = Files . newBufferedReader ( fPath ) ; <nl> + JsonObject [ ] json = JsonUtils . fromJson ( GSON , reader , JsonObject [ ] . class ) ; <nl> + ctx . loadConstants ( json ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . log . error ( " Error loading _ constants . json : " , e ) ; <nl> + return false ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( reader ) ; <nl> + } <nl> + } <nl> + return true ; <nl> + } , <nl> + ( root , file ) - > <nl> + { <nl> + Loader . instance ( ) . setActiveModContainer ( mod ) ; <nl> + <nl> + String relative = root . relativize ( file ) . toString ( ) ; <nl> + if ( ! " json " . equals ( FilenameUtils . getExtension ( file . toString ( ) ) ) | | relative . startsWith ( " _ " ) ) <nl> + return true ; <nl> + <nl> + String name = FilenameUtils . removeExtension ( relative ) . replaceAll ( " \ \ \ \ " , " / " ) ; <nl> + ResourceLocation key = new ResourceLocation ( ctx . getModId ( ) , name ) ; <nl> + <nl> + BufferedReader reader = null ; <nl> + try <nl> + { <nl> + reader = Files . newBufferedReader ( file ) ; <nl> + JsonObject json = JsonUtils . fromJson ( GSON , reader , JsonObject . class ) ; <nl> + if ( json . has ( " conditions " ) & & ! CraftingHelper . processConditions ( JsonUtils . getJsonArray ( json , " conditions " ) , ctx ) ) <nl> + return true ; <nl> + IRecipe recipe = CraftingHelper . getRecipe ( json , ctx ) ; <nl> + ForgeRegistries . RECIPES . register ( recipe . setRegistryName ( key ) ) ; <nl> + } <nl> + catch ( JsonParseException e ) <nl> + { <nl> + FMLLog . log . error ( " Parsing error loading recipe { } " , key , e ) ; <nl> + return false ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . log . error ( " Couldn ' t read recipe { } from { } " , key , file , e ) ; <nl> + return false ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( reader ) ; <nl> + } <nl> + return true ; <nl> + } <nl> + ) ; <nl> + } <nl> + <nl> + <nl> + public static boolean findFiles ( ModContainer mod , String base , Function < Path , Boolean > preprocessor , BiFunction < Path , Path , Boolean > processor ) <nl> + { <nl> FileSystem fs = null ; <nl> - BufferedReader reader = null ; <nl> try <nl> { <nl> - JsonContext ctx = new JsonContext ( mod . getModId ( ) ) ; <nl> File source = mod . getSource ( ) ; <nl> <nl> if ( " minecraft " . equals ( mod . getModId ( ) ) & & DEBUG _ LOAD _ MINECRAFT ) <nl> @ @ - 679 , 7 + 749 , 7 @ @ public class CraftingHelper { <nl> try <nl> { <nl> fs = FileSystems . newFileSystem ( source . toPath ( ) , null ) ; <nl> - root = fs . getPath ( " / assets / " + ctx . getModId ( ) + " / recipes " ) ; <nl> + root = fs . getPath ( " / " + base ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> @ @ - 689 , 77 + 759 , 45 @ @ public class CraftingHelper { <nl> } <nl> else if ( source . isDirectory ( ) ) <nl> { <nl> - root = source . toPath ( ) . resolve ( " assets / " + ctx . getModId ( ) + " / recipes " ) ; <nl> + root = source . toPath ( ) . resolve ( base ) ; <nl> } <nl> <nl> if ( root = = null | | ! Files . exists ( root ) ) <nl> return false ; <nl> <nl> - Path fPath = root . resolve ( " _ constants . json " ) ; <nl> - if ( fPath ! = null & & Files . exists ( fPath ) ) <nl> + if ( preprocessor ! = null ) <nl> { <nl> - try <nl> - { <nl> - reader = Files . newBufferedReader ( fPath ) ; <nl> - JsonObject [ ] json = JsonUtils . fromJson ( GSON , reader , JsonObject [ ] . class ) ; <nl> - ctx . loadConstants ( json ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - FMLLog . log . error ( " Error loading _ constants . json : " , e ) ; <nl> + Boolean cont = preprocessor . apply ( root ) ; <nl> + if ( cont = = null | | ! cont . booleanValue ( ) ) <nl> return false ; <nl> - } <nl> - } <nl> - <nl> - Iterator < Path > itr = null ; <nl> - try <nl> - { <nl> - itr = Files . walk ( root ) . iterator ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - FMLLog . log . error ( " Error iterating recipes for : { } " , ctx . getModId ( ) , e ) ; <nl> - return false ; <nl> } <nl> <nl> - Loader . instance ( ) . setActiveModContainer ( mod ) ; <nl> - while ( itr ! = null & & itr . hasNext ( ) ) <nl> + if ( processor ! = null ) <nl> { <nl> - Path f = itr . next ( ) ; <nl> - if ( ! " json " . equals ( FilenameUtils . getExtension ( f . toString ( ) ) ) | | root . relativize ( f ) . toString ( ) . startsWith ( " _ " ) ) <nl> - continue ; <nl> - <nl> - String name = FilenameUtils . removeExtension ( root . relativize ( f ) . toString ( ) ) . replaceAll ( " \ \ \ \ " , " / " ) ; <nl> - ResourceLocation key = new ResourceLocation ( ctx . getModId ( ) , name ) ; <nl> - <nl> - IOUtils . closeQuietly ( reader ) ; <nl> + Iterator < Path > itr = null ; <nl> try <nl> { <nl> - reader = Files . newBufferedReader ( f ) ; <nl> - JsonObject json = JsonUtils . fromJson ( GSON , reader , JsonObject . class ) ; <nl> - if ( json . has ( " conditions " ) & & ! CraftingHelper . processConditions ( JsonUtils . getJsonArray ( json , " conditions " ) , ctx ) ) <nl> - continue ; <nl> - IRecipe recipe = CraftingHelper . getRecipe ( json , ctx ) ; <nl> - ForgeRegistries . RECIPES . register ( recipe . setRegistryName ( key ) ) ; <nl> + itr = Files . walk ( root ) . iterator ( ) ; <nl> } <nl> - catch ( JsonParseException e ) <nl> + catch ( IOException e ) <nl> { <nl> - FMLLog . log . error ( " Parsing error loading recipe { } " , key , e ) ; <nl> + FMLLog . log . error ( " Error iterating filesystem for : { } " , mod . getModId ( ) , e ) ; <nl> return false ; <nl> } <nl> - catch ( IOException e ) <nl> + <nl> + while ( itr ! = null & & itr . hasNext ( ) ) <nl> { <nl> - FMLLog . log . error ( " Couldn ' t read recipe { } from { } " , key , f , e ) ; <nl> - return false ; <nl> + Boolean cont = processor . apply ( root , itr . next ( ) ) ; <nl> + if ( cont = = null | | ! cont . booleanValue ( ) ) <nl> + return false ; <nl> } <nl> - } <nl> + } <nl> <nl> return true ; <nl> } <nl> finally <nl> { <nl> IOUtils . closeQuietly ( fs ) ; <nl> - IOUtils . closeQuietly ( reader ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg <nl> index d42f1bf . . 86b5a4c 100644 <nl> - - - a / src / main / resources / forge _ at . cfg <nl> + + + b / src / main / resources / forge _ at . cfg <nl> @ @ - 318 , 4 + 318 , 7 @ @ protected net . minecraft . world . Teleporter field _ 85191 _ c # destinationCoordinateCa <nl> public net . minecraft . util . ResourceLocation func _ 177516 _ a ( Ljava / lang / String ; ) [ Ljava / lang / String ; # splitObjectName <nl> <nl> # Ingredient <nl> - protected net . minecraft . item . crafting . Ingredient < init > ( [ Lnet / minecraft / item / ItemStack ; ) V # Ingredient <nl> \ No newline at end of file <nl> + protected net . minecraft . item . crafting . Ingredient < init > ( [ Lnet / minecraft / item / ItemStack ; ) V # Ingredient <nl> + <nl> + # Advancements <nl> + public net . minecraft . advancements . AdvancementManager field _ 192783 _ b # GSON <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 2ed033c . . db815e0 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 21 , 8 + 21 , 11 @ @ package net . minecraftforge . common ; 
 
 import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 + import java . io . IOException ; 
 import java . io . InputStream ; 
 + import java . net . HttpURLConnection ; 
 import java . net . URL ; 
 + import java . net . URLConnection ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 @ @ - 68 , 6 + 71 , 8 @ @ public class ForgeVersion 
 
 private static final Logger log = LogManager . getLogger ( MOD _ ID + " . VersionCheck " ) ; 
 
 + private static final int MAX _ HTTP _ REDIRECTS = Integer . getInteger ( " http . maxRedirects " , 20 ) ; 
 + 
 public static int getMajorVersion ( ) 
 { 
 return majorVersion ; 
 @ @ - 202 , 6 + 207 , 40 @ @ public class ForgeVersion 
 } 
 } 
 
 + / * * 
 + * Opens stream for given URL while following redirects 
 + * / 
 + private InputStream openUrlStream ( URL url ) throws IOException 
 + { 
 + URL currentUrl = url ; 
 + for ( int redirects = 0 ; redirects < MAX _ HTTP _ REDIRECTS ; redirects + + ) 
 + { 
 + URLConnection c = currentUrl . openConnection ( ) ; 
 + if ( c instanceof HttpURLConnection ) 
 + { 
 + HttpURLConnection huc = ( HttpURLConnection ) c ; 
 + huc . setInstanceFollowRedirects ( false ) ; 
 + int responseCode = huc . getResponseCode ( ) ; 
 + if ( responseCode > = 300 & & responseCode < = 399 ) 
 + { 
 + try 
 + { 
 + String loc = huc . getHeaderField ( " Location " ) ; 
 + currentUrl = new URL ( currentUrl , loc ) ; 
 + continue ; 
 + } 
 + finally 
 + { 
 + huc . disconnect ( ) ; 
 + } 
 + } 
 + } 
 + 
 + return c . getInputStream ( ) ; 
 + } 
 + throw new IOException ( " Too many redirects while trying to fetch " + url ) ; 
 + } 
 + 
 private void process ( ModContainer mod , URL url ) 
 { 
 try 
 @ @ - 210 , 7 + 249 , 7 @ @ public class ForgeVersion 
 Status status = PENDING ; 
 ComparableVersion target = null ; 
 
 - InputStream con = url . openStream ( ) ; 
 + InputStream con = openUrlStream ( url ) ; 
 String data = new String ( ByteStreams . toByteArray ( con ) , " UTF - 8 " ) ; 
 con . close ( ) ; 


NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / advancements / AdvancementManager . java . patch b / patches / minecraft / net / minecraft / advancements / AdvancementManager . java . patch 
 new file mode 100644 
 index 0000000 . . 262c73d 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / advancements / AdvancementManager . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / advancements / AdvancementManager . java 
 + + + + . . / src - work / minecraft / net / minecraft / advancements / AdvancementManager . java 
 + @ @ - 66 , 6 + 66 , 7 @ @ 
 + field _ 192784 _ c . func _ 192087 _ a ( ) ; 
 + Map < ResourceLocation , Advancement . Builder > map = this . func _ 192781 _ c ( ) ; 
 + this . func _ 192777 _ a ( map ) ; 
 + + this . field _ 193768 _ e | = net . minecraftforge . common . ForgeHooks . loadAdvancements ( map ) ; 
 + field _ 192784 _ c . func _ 192083 _ a ( map ) ; 
 + 
 + for ( Advancement advancement : field _ 192784 _ c . func _ 192088 _ b ( ) ) 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index d066108 . . 4515467 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 19 , 12 + 19 , 16 @ @ 
 
 package net . minecraftforge . common ; 
 
 + import java . io . BufferedReader ; 
 + import java . io . IOException ; 
 import java . net . URI ; 
 import java . net . URISyntaxException ; 
 + import java . nio . file . Files ; 
 import java . util . ArrayList ; 
 import java . util . Deque ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 + import java . util . Map ; 
 import java . util . Random ; 
 import java . util . Set ; 
 import java . util . regex . Matcher ; 
 @ @ - 37 , 6 + 41 , 8 @ @ import com . google . gson . Gson ; 
 import com . google . gson . JsonObject ; 
 import com . google . gson . JsonParseException ; 
 
 + import net . minecraft . advancements . Advancement ; 
 + import net . minecraft . advancements . AdvancementManager ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockLiquid ; 
 import net . minecraft . block . material . Material ; 
 @ @ - 94 , 6 + 100 , 7 @ @ import net . minecraft . world . storage . loot . LootEntry ; 
 import net . minecraft . world . storage . loot . LootTable ; 
 import net . minecraft . world . storage . loot . LootTableManager ; 
 import net . minecraft . world . storage . loot . conditions . LootCondition ; 
 + import net . minecraftforge . common . crafting . CraftingHelper ; 
 import net . minecraftforge . common . util . BlockSnapshot ; 
 import net . minecraftforge . event . AnvilUpdateEvent ; 
 import net . minecraftforge . event . DifficultyChangeEvent ; 
 @ @ - 118 , 12 + 125 , 17 @ @ import net . minecraftforge . event . entity . player . PlayerInteractEvent ; 
 import net . minecraftforge . event . world . BlockEvent ; 
 import net . minecraftforge . event . world . NoteBlockEvent ; 
 import net . minecraftforge . fluids . IFluidBlock ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . eventhandler . Event ; 
 import net . minecraftforge . fml . relauncher . ReflectionHelper ; 
 - 
 import javax . annotation . Nonnull ; 
 import javax . annotation . Nullable ; 
 
 + import org . apache . commons . io . FilenameUtils ; 
 + import org . apache . commons . io . IOUtils ; 
 + 
 public class ForgeHooks 
 { 
 / / TODO : Loot tables ? 
 @ @ - 1232 , 4 + 1244 , 61 @ @ public class ForgeHooks 
 { 
 MinecraftForge . EVENT _ BUS . post ( new BlockEvent . CropGrowEvent . Post ( worldIn , pos , state , worldIn . getBlockState ( pos ) ) ) ; 
 } 
 + 
 + public static boolean loadAdvancements ( Map < ResourceLocation , Advancement . Builder > map ) 
 + { 
 + boolean errored = false ; 
 + Loader . instance ( ) . setActiveModContainer ( null ) ; 
 + / / Loader . instance ( ) . getActiveModList ( ) . forEach ( ( mod ) - > loadFactories ( mod ) ) ; 
 + for ( ModContainer mod : Loader . instance ( ) . getActiveModList ( ) ) 
 + { 
 + errored | = ! loadAdvancements ( map , mod ) ; 
 + } 
 + Loader . instance ( ) . setActiveModContainer ( null ) ; 
 + return errored ; 
 + } 
 + 
 + private static boolean loadAdvancements ( Map < ResourceLocation , Advancement . Builder > map , ModContainer mod ) 
 + { 
 + return CraftingHelper . findFiles ( mod , " assets / " + mod . getModId ( ) + " / advancements " , null , 
 + ( root , file ) - > 
 + { 
 + 
 + String relative = root . relativize ( file ) . toString ( ) ; 
 + if ( ! " json " . equals ( FilenameUtils . getExtension ( file . toString ( ) ) ) | | relative . startsWith ( " _ " ) ) 
 + return true ; 
 + 
 + String name = FilenameUtils . removeExtension ( relative ) . replaceAll ( " \ \ \ \ " , " / " ) ; 
 + ResourceLocation key = new ResourceLocation ( mod . getModId ( ) , name ) ; 
 + 
 + if ( ! map . containsKey ( key ) ) 
 + { 
 + BufferedReader reader = null ; 
 + 
 + try 
 + { 
 + reader = Files . newBufferedReader ( file ) ; 
 + Advancement . Builder builder = JsonUtils . fromJson ( AdvancementManager . GSON , reader , Advancement . Builder . class ) ; 
 + map . put ( key , builder ) ; 
 + } 
 + catch ( JsonParseException jsonparseexception ) 
 + { 
 + FMLLog . log . error ( " Parsing error loading built - in advancement " + key , ( Throwable ) jsonparseexception ) ; 
 + return false ; 
 + } 
 + catch ( IOException ioexception ) 
 + { 
 + FMLLog . log . error ( " Couldn ' t read advancement " + key + " from " + file , ( Throwable ) ioexception ) ; 
 + return false ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( reader ) ; 
 + } 
 + } 
 + 
 + return true ; 
 + } 
 + ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index ec00158 . . 4439617 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 34 , 7 + 34 , 9 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . Set ; 
 + import java . util . function . BiFunction ; 
 import java . util . function . BooleanSupplier ; 
 + import java . util . function . Function ; 
 
 import javax . annotation . Nonnull ; 
 
 @ @ - 652 , 11 + 654 , 79 @ @ public class CraftingHelper { 
 
 private static boolean loadRecipes ( ModContainer mod ) 
 { 
 + JsonContext ctx = new JsonContext ( mod . getModId ( ) ) ; 
 + 
 + return findFiles ( mod , " assets / " + mod . getModId ( ) + " / recipes " , 
 + root - > 
 + { 
 + Path fPath = root . resolve ( " _ constants . json " ) ; 
 + if ( fPath ! = null & & Files . exists ( fPath ) ) 
 + { 
 + BufferedReader reader = null ; 
 + try 
 + { 
 + reader = Files . newBufferedReader ( fPath ) ; 
 + JsonObject [ ] json = JsonUtils . fromJson ( GSON , reader , JsonObject [ ] . class ) ; 
 + ctx . loadConstants ( json ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . log . error ( " Error loading _ constants . json : " , e ) ; 
 + return false ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( reader ) ; 
 + } 
 + } 
 + return true ; 
 + } , 
 + ( root , file ) - > 
 + { 
 + Loader . instance ( ) . setActiveModContainer ( mod ) ; 
 + 
 + String relative = root . relativize ( file ) . toString ( ) ; 
 + if ( ! " json " . equals ( FilenameUtils . getExtension ( file . toString ( ) ) ) | | relative . startsWith ( " _ " ) ) 
 + return true ; 
 + 
 + String name = FilenameUtils . removeExtension ( relative ) . replaceAll ( " \ \ \ \ " , " / " ) ; 
 + ResourceLocation key = new ResourceLocation ( ctx . getModId ( ) , name ) ; 
 + 
 + BufferedReader reader = null ; 
 + try 
 + { 
 + reader = Files . newBufferedReader ( file ) ; 
 + JsonObject json = JsonUtils . fromJson ( GSON , reader , JsonObject . class ) ; 
 + if ( json . has ( " conditions " ) & & ! CraftingHelper . processConditions ( JsonUtils . getJsonArray ( json , " conditions " ) , ctx ) ) 
 + return true ; 
 + IRecipe recipe = CraftingHelper . getRecipe ( json , ctx ) ; 
 + ForgeRegistries . RECIPES . register ( recipe . setRegistryName ( key ) ) ; 
 + } 
 + catch ( JsonParseException e ) 
 + { 
 + FMLLog . log . error ( " Parsing error loading recipe { } " , key , e ) ; 
 + return false ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . log . error ( " Couldn ' t read recipe { } from { } " , key , file , e ) ; 
 + return false ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( reader ) ; 
 + } 
 + return true ; 
 + } 
 + ) ; 
 + } 
 + 
 + 
 + public static boolean findFiles ( ModContainer mod , String base , Function < Path , Boolean > preprocessor , BiFunction < Path , Path , Boolean > processor ) 
 + { 
 FileSystem fs = null ; 
 - BufferedReader reader = null ; 
 try 
 { 
 - JsonContext ctx = new JsonContext ( mod . getModId ( ) ) ; 
 File source = mod . getSource ( ) ; 
 
 if ( " minecraft " . equals ( mod . getModId ( ) ) & & DEBUG _ LOAD _ MINECRAFT ) 
 @ @ - 679 , 7 + 749 , 7 @ @ public class CraftingHelper { 
 try 
 { 
 fs = FileSystems . newFileSystem ( source . toPath ( ) , null ) ; 
 - root = fs . getPath ( " / assets / " + ctx . getModId ( ) + " / recipes " ) ; 
 + root = fs . getPath ( " / " + base ) ; 
 } 
 catch ( IOException e ) 
 { 
 @ @ - 689 , 77 + 759 , 45 @ @ public class CraftingHelper { 
 } 
 else if ( source . isDirectory ( ) ) 
 { 
 - root = source . toPath ( ) . resolve ( " assets / " + ctx . getModId ( ) + " / recipes " ) ; 
 + root = source . toPath ( ) . resolve ( base ) ; 
 } 
 
 if ( root = = null | | ! Files . exists ( root ) ) 
 return false ; 
 
 - Path fPath = root . resolve ( " _ constants . json " ) ; 
 - if ( fPath ! = null & & Files . exists ( fPath ) ) 
 + if ( preprocessor ! = null ) 
 { 
 - try 
 - { 
 - reader = Files . newBufferedReader ( fPath ) ; 
 - JsonObject [ ] json = JsonUtils . fromJson ( GSON , reader , JsonObject [ ] . class ) ; 
 - ctx . loadConstants ( json ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - FMLLog . log . error ( " Error loading _ constants . json : " , e ) ; 
 + Boolean cont = preprocessor . apply ( root ) ; 
 + if ( cont = = null | | ! cont . booleanValue ( ) ) 
 return false ; 
 - } 
 - } 
 - 
 - Iterator < Path > itr = null ; 
 - try 
 - { 
 - itr = Files . walk ( root ) . iterator ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - FMLLog . log . error ( " Error iterating recipes for : { } " , ctx . getModId ( ) , e ) ; 
 - return false ; 
 } 
 
 - Loader . instance ( ) . setActiveModContainer ( mod ) ; 
 - while ( itr ! = null & & itr . hasNext ( ) ) 
 + if ( processor ! = null ) 
 { 
 - Path f = itr . next ( ) ; 
 - if ( ! " json " . equals ( FilenameUtils . getExtension ( f . toString ( ) ) ) | | root . relativize ( f ) . toString ( ) . startsWith ( " _ " ) ) 
 - continue ; 
 - 
 - String name = FilenameUtils . removeExtension ( root . relativize ( f ) . toString ( ) ) . replaceAll ( " \ \ \ \ " , " / " ) ; 
 - ResourceLocation key = new ResourceLocation ( ctx . getModId ( ) , name ) ; 
 - 
 - IOUtils . closeQuietly ( reader ) ; 
 + Iterator < Path > itr = null ; 
 try 
 { 
 - reader = Files . newBufferedReader ( f ) ; 
 - JsonObject json = JsonUtils . fromJson ( GSON , reader , JsonObject . class ) ; 
 - if ( json . has ( " conditions " ) & & ! CraftingHelper . processConditions ( JsonUtils . getJsonArray ( json , " conditions " ) , ctx ) ) 
 - continue ; 
 - IRecipe recipe = CraftingHelper . getRecipe ( json , ctx ) ; 
 - ForgeRegistries . RECIPES . register ( recipe . setRegistryName ( key ) ) ; 
 + itr = Files . walk ( root ) . iterator ( ) ; 
 } 
 - catch ( JsonParseException e ) 
 + catch ( IOException e ) 
 { 
 - FMLLog . log . error ( " Parsing error loading recipe { } " , key , e ) ; 
 + FMLLog . log . error ( " Error iterating filesystem for : { } " , mod . getModId ( ) , e ) ; 
 return false ; 
 } 
 - catch ( IOException e ) 
 + 
 + while ( itr ! = null & & itr . hasNext ( ) ) 
 { 
 - FMLLog . log . error ( " Couldn ' t read recipe { } from { } " , key , f , e ) ; 
 - return false ; 
 + Boolean cont = processor . apply ( root , itr . next ( ) ) ; 
 + if ( cont = = null | | ! cont . booleanValue ( ) ) 
 + return false ; 
 } 
 - } 
 + } 
 
 return true ; 
 } 
 finally 
 { 
 IOUtils . closeQuietly ( fs ) ; 
 - IOUtils . closeQuietly ( reader ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg 
 index d42f1bf . . 86b5a4c 100644 
 - - - a / src / main / resources / forge _ at . cfg 
 + + + b / src / main / resources / forge _ at . cfg 
 @ @ - 318 , 4 + 318 , 7 @ @ protected net . minecraft . world . Teleporter field _ 85191 _ c # destinationCoordinateCa 
 public net . minecraft . util . ResourceLocation func _ 177516 _ a ( Ljava / lang / String ; ) [ Ljava / lang / String ; # splitObjectName 
 
 # Ingredient 
 - protected net . minecraft . item . crafting . Ingredient < init > ( [ Lnet / minecraft / item / ItemStack ; ) V # Ingredient 
 \ No newline at end of file 
 + protected net . minecraft . item . crafting . Ingredient < init > ( [ Lnet / minecraft / item / ItemStack ; ) V # Ingredient 
 + 
 + # Advancements 
 + public net . minecraft . advancements . AdvancementManager field _ 192783 _ b # GSON 
 \ No newline at end of file
