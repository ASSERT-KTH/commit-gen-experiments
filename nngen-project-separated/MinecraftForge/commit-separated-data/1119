BLEU SCORE: 0.020980574531482755

TEST MSG: Hopefully fix NPE during baking of empty vanilla item models
GENERATED MSG: Fixed ItemFrames not having a model . Closes # 1678

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index d4b896c . . bdcad54 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 262 , 6 + 262 , 7 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> ModelBlock model = this . model ; <nl> if ( hasItemModel ( model ) ) model = makeItemModel ( model ) ; <nl> + if ( model = = null ) return getMissingModel ( ) . bake ( state , format , bakedTextureGetter ) ; <nl> if ( isCustomRenderer ( model ) ) return new IFlexibleBakedModel . Wrapper ( new BuiltInModel ( new ItemCameraTransforms ( model . getThirdPersonTransform ( ) , model . getFirstPersonTransform ( ) , model . getHeadTransform ( ) , model . getInGuiTransform ( ) ) ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; <nl> return new IFlexibleBakedModel . Wrapper ( bakeModel ( model , state . apply ( this ) , state instanceof UVLock ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 72190cb . . f4f7762 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 90 , 7 + 90 , 10 @ @ public class ModelLoader extends ModelBakery <nl> private void loadBlocks ( ) <nl> { <nl> Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; <nl> - loadVariants ( stateMap . values ( ) ) ; <nl> + Collection < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; <nl> + variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we <nl> + variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; <nl> + loadVariants ( variants ) ; <nl> } <nl> <nl> @ Override

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index d4b896c . . bdcad54 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 262 , 6 + 262 , 7 @ @ public class ModelLoader extends ModelBakery 
 } 
 ModelBlock model = this . model ; 
 if ( hasItemModel ( model ) ) model = makeItemModel ( model ) ; 
 + if ( model = = null ) return getMissingModel ( ) . bake ( state , format , bakedTextureGetter ) ; 
 if ( isCustomRenderer ( model ) ) return new IFlexibleBakedModel . Wrapper ( new BuiltInModel ( new ItemCameraTransforms ( model . getThirdPersonTransform ( ) , model . getFirstPersonTransform ( ) , model . getHeadTransform ( ) , model . getInGuiTransform ( ) ) ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; 
 return new IFlexibleBakedModel . Wrapper ( bakeModel ( model , state . apply ( this ) , state instanceof UVLock ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 72190cb . . f4f7762 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 90 , 7 + 90 , 10 @ @ public class ModelLoader extends ModelBakery 
 private void loadBlocks ( ) 
 { 
 Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; 
 - loadVariants ( stateMap . values ( ) ) ; 
 + Collection < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; 
 + variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we 
 + variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; 
 + loadVariants ( variants ) ; 
 } 
 
 @ Override
