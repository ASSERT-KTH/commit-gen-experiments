BLEU SCORE: 0.01826472886268133

TEST MSG: Something that needs to happen : warn people about bad modids - if they ' re not lowercased , or if they ' re too long .
GENERATED MSG: Be noisy when API is in a coremod . It ' ll never work and modders should realize that fact .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 49e2c66 . . 6dac654 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> + import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> @ @ - 50 , 6 + 51 , 7 @ @ import net . minecraftforge . fml . common . versioning . VersionParser ; <nl> import net . minecraftforge . fml . common . versioning . VersionRange ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import java . util . zip . ZipEntry ; <nl> @ @ - 119 , 8 + 121 , 24 @ @ public class FMLModContainer implements ModContainer <nl> this . languageAdapter = null ; <nl> FMLLog . finer ( " Using custom language adapter % s for % s ( modid : % s ) " , languageAdapterType , this . className , getModId ( ) ) ; <nl> } <nl> + sanityCheckModId ( ) ; <nl> } <nl> <nl> + private void sanityCheckModId ( ) <nl> + { <nl> + String modid = ( String ) this . descriptor . get ( " modid " ) ; <nl> + if ( Strings . isNullOrEmpty ( modid ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Modid cannot be null or empty " ) ; <nl> + } <nl> + if ( modid . length ( ) > 64 ) { <nl> + FMLLog . bigWarning ( " The modid % s is longer than the recommended maximum of 64 characters . Truncation will be enforced in 1 . 11 " , modid ) ; <nl> + } <nl> + if ( ! modid . equals ( modid . toLowerCase ( Locale . ENGLISH ) ) ) <nl> + { <nl> + FMLLog . bigWarning ( " The modid % s is not the same as it ' s lowercase version . Lowercasing will be enforced in 1 . 11 " , modid ) ; <nl> + } <nl> + } <nl> private ILanguageAdapter getLanguageAdapter ( ) <nl> { <nl> if ( languageAdapter = = null ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index e341ec0 . . 47ba5e5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 75 , 7 + 75 , 11 @ @ import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> public @ interface Mod <nl> { <nl> / * * <nl> - * The unique mod identifier for this mod <nl> + * The unique mod identifier for this mod . <nl> + * < b > Required to be lowercased in the english locale for compatibility . Will be truncated to 64 characters long . < / b > <nl> + * <nl> + * This will be used to identify your mod for third parties ( other mods ) , it will be used to identify your mod for registries such as block and item registries . <nl> + * By default , you will have a resource domain that matches the modid . All these uses require that constraints are imposed on the format of the modid . <nl> * / <nl> String modid ( ) ; <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 14ee5d1 . . b58949b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 639 , 7 + 639 , 7 @ @ public class Loader <nl> return " 8 . 0 . 99 . 99 " ; <nl> } <nl> <nl> - public ClassLoader getModClassLoader ( ) <nl> + public ModClassLoader getModClassLoader ( ) <nl> { <nl> return modClassLoader ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModAPIManager . java b / src / main / java / net / minecraftforge / fml / common / ModAPIManager . java <nl> index 4f4d8b2 . . 5733190 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModAPIManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModAPIManager . java <nl> @ @ - 90 , 6 + 90 , 9 @ @ public class ModAPIManager { <nl> <nl> public void validate ( String providedAPI , String apiOwner , String apiVersion ) <nl> { <nl> + if ( Loader . instance ( ) . getModClassLoader ( ) . containsSource ( this . getSource ( ) ) ) { <nl> + FMLLog . bigWarning ( " The API % s from source % s is loaded from an incompatible classloader . THIS WILL NOT WORK ! " , providedAPI , this . getSource ( ) . getAbsolutePath ( ) ) ; <nl> + } <nl> / / TODO Compare this annotation data to the one we first found . Maybe barf if there is inconsistency ? <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java b / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> index 161f936 . . 854ff23 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import java . net . URISyntaxException ; <nl> import java . net . URL ; <nl> import java . net . URLClassLoader ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> <nl> @ @ - 30 , 6 + 31 , 7 @ @ import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . Lists ; <nl> <nl> / * * <nl> * A simple delegating class loader used to load mods into the system <nl> @ @ - 42 , 6 + 44 , 7 @ @ public class ModClassLoader extends URLClassLoader <nl> { <nl> private static final List < String > STANDARD _ LIBRARIES = ImmutableList . of ( " jinput . jar " , " lwjgl . jar " , " lwjgl _ util . jar " , " rt . jar " ) ; <nl> private LaunchClassLoader mainClassLoader ; <nl> + private List < File > sources ; <nl> <nl> public ModClassLoader ( ClassLoader parent ) { <nl> super ( new URL [ 0 ] , null ) ; <nl> @ @ - 52 , 6 + 55 , 7 @ @ public class ModClassLoader extends URLClassLoader <nl> { <nl> URL url = modFile . toURI ( ) . toURL ( ) ; <nl> mainClassLoader . addURL ( url ) ; <nl> + this . sources . add ( modFile ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 148 , 4 + 152 , 20 @ @ public class ModClassLoader extends URLClassLoader <nl> modAPI . initTable ( dataTable ) ; <nl> return modAPI ; <nl> } <nl> + <nl> + List < URL > parentURLs = null ; <nl> + public boolean containsSource ( File source ) <nl> + { <nl> + if ( parentURLs = = null ) { <nl> + parentURLs = Arrays . asList ( mainClassLoader . getURLs ( ) ) ; <nl> + } <nl> + try <nl> + { <nl> + return parentURLs . contains ( source . toURI ( ) . toURL ( ) ) ; <nl> + } catch ( MalformedURLException e ) <nl> + { <nl> + / / shouldn ' t happen <nl> + return false ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 49e2c66 . . 6dac654 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 + import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 @ @ - 50 , 6 + 51 , 7 @ @ import net . minecraftforge . fml . common . versioning . VersionParser ; 
 import net . minecraftforge . fml . common . versioning . VersionRange ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 + import org . apache . commons . lang3 . StringUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 import java . util . zip . ZipEntry ; 
 @ @ - 119 , 8 + 121 , 24 @ @ public class FMLModContainer implements ModContainer 
 this . languageAdapter = null ; 
 FMLLog . finer ( " Using custom language adapter % s for % s ( modid : % s ) " , languageAdapterType , this . className , getModId ( ) ) ; 
 } 
 + sanityCheckModId ( ) ; 
 } 
 
 + private void sanityCheckModId ( ) 
 + { 
 + String modid = ( String ) this . descriptor . get ( " modid " ) ; 
 + if ( Strings . isNullOrEmpty ( modid ) ) 
 + { 
 + throw new IllegalArgumentException ( " Modid cannot be null or empty " ) ; 
 + } 
 + if ( modid . length ( ) > 64 ) { 
 + FMLLog . bigWarning ( " The modid % s is longer than the recommended maximum of 64 characters . Truncation will be enforced in 1 . 11 " , modid ) ; 
 + } 
 + if ( ! modid . equals ( modid . toLowerCase ( Locale . ENGLISH ) ) ) 
 + { 
 + FMLLog . bigWarning ( " The modid % s is not the same as it ' s lowercase version . Lowercasing will be enforced in 1 . 11 " , modid ) ; 
 + } 
 + } 
 private ILanguageAdapter getLanguageAdapter ( ) 
 { 
 if ( languageAdapter = = null ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index e341ec0 . . 47ba5e5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 75 , 7 + 75 , 11 @ @ import net . minecraftforge . fml . common . registry . GameRegistry ; 
 public @ interface Mod 
 { 
 / * * 
 - * The unique mod identifier for this mod 
 + * The unique mod identifier for this mod . 
 + * < b > Required to be lowercased in the english locale for compatibility . Will be truncated to 64 characters long . < / b > 
 + * 
 + * This will be used to identify your mod for third parties ( other mods ) , it will be used to identify your mod for registries such as block and item registries . 
 + * By default , you will have a resource domain that matches the modid . All these uses require that constraints are imposed on the format of the modid . 
 * / 
 String modid ( ) ; 
 / * *

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 14ee5d1 . . b58949b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 639 , 7 + 639 , 7 @ @ public class Loader 
 return " 8 . 0 . 99 . 99 " ; 
 } 
 
 - public ClassLoader getModClassLoader ( ) 
 + public ModClassLoader getModClassLoader ( ) 
 { 
 return modClassLoader ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModAPIManager . java b / src / main / java / net / minecraftforge / fml / common / ModAPIManager . java 
 index 4f4d8b2 . . 5733190 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModAPIManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModAPIManager . java 
 @ @ - 90 , 6 + 90 , 9 @ @ public class ModAPIManager { 
 
 public void validate ( String providedAPI , String apiOwner , String apiVersion ) 
 { 
 + if ( Loader . instance ( ) . getModClassLoader ( ) . containsSource ( this . getSource ( ) ) ) { 
 + FMLLog . bigWarning ( " The API % s from source % s is loaded from an incompatible classloader . THIS WILL NOT WORK ! " , providedAPI , this . getSource ( ) . getAbsolutePath ( ) ) ; 
 + } 
 / / TODO Compare this annotation data to the one we first found . Maybe barf if there is inconsistency ? 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java b / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 index 161f936 . . 854ff23 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import java . net . URISyntaxException ; 
 import java . net . URL ; 
 import java . net . URLClassLoader ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . Set ; 
 
 @ @ - 30 , 6 + 31 , 7 @ @ import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . Lists ; 
 
 / * * 
 * A simple delegating class loader used to load mods into the system 
 @ @ - 42 , 6 + 44 , 7 @ @ public class ModClassLoader extends URLClassLoader 
 { 
 private static final List < String > STANDARD _ LIBRARIES = ImmutableList . of ( " jinput . jar " , " lwjgl . jar " , " lwjgl _ util . jar " , " rt . jar " ) ; 
 private LaunchClassLoader mainClassLoader ; 
 + private List < File > sources ; 
 
 public ModClassLoader ( ClassLoader parent ) { 
 super ( new URL [ 0 ] , null ) ; 
 @ @ - 52 , 6 + 55 , 7 @ @ public class ModClassLoader extends URLClassLoader 
 { 
 URL url = modFile . toURI ( ) . toURL ( ) ; 
 mainClassLoader . addURL ( url ) ; 
 + this . sources . add ( modFile ) ; 
 } 
 
 @ Override 
 @ @ - 148 , 4 + 152 , 20 @ @ public class ModClassLoader extends URLClassLoader 
 modAPI . initTable ( dataTable ) ; 
 return modAPI ; 
 } 
 + 
 + List < URL > parentURLs = null ; 
 + public boolean containsSource ( File source ) 
 + { 
 + if ( parentURLs = = null ) { 
 + parentURLs = Arrays . asList ( mainClassLoader . getURLs ( ) ) ; 
 + } 
 + try 
 + { 
 + return parentURLs . contains ( source . toURI ( ) . toURL ( ) ) ; 
 + } catch ( MalformedURLException e ) 
 + { 
 + / / shouldn ' t happen 
 + return false ; 
 + } 
 + } 
 }
