BLEU SCORE: 0.06567274736060397

TEST MSG: Add getSlotLimit ( slot ) to IItemHandler
GENERATED MSG: Expose IItemHandler on vanilla entities

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / items / IItemHandler . java b / src / main / java / net / minecraftforge / items / IItemHandler . java <nl> index c577351 . . 2e2aaf5 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / IItemHandler . java <nl> + + + b / src / main / java / net / minecraftforge / items / IItemHandler . java <nl> @ @ - 80 , 4 + 80 , 12 @ @ public interface IItemHandler <nl> * * / <nl> @ Nonnull <nl> ItemStack extractItem ( int slot , int amount , boolean simulate ) ; <nl> + <nl> + / * * <nl> + * Retrieves the maximum stack size allowed to exist in the given slot . <nl> + * <nl> + * @ param slot Slot to query . <nl> + * @ return The maximum stack size allowed in the slot . <nl> + * / <nl> + int getSlotLimit ( int slot ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / items / ItemHandlerHelper . java b / src / main / java / net / minecraftforge / items / ItemHandlerHelper . java <nl> index 40e92db . . 8bdf297 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / ItemHandlerHelper . java <nl> + + + b / src / main / java / net / minecraftforge / items / ItemHandlerHelper . java <nl> @ @ - 25 , 10 + 25 , 12 @ @ import net . minecraft . init . SoundEvents ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . util . SoundCategory ; <nl> + import net . minecraft . util . math . MathHelper ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . items . wrapper . PlayerMainInvWrapper ; <nl> <nl> import javax . annotation . Nonnull ; <nl> + import javax . annotation . Nullable ; <nl> <nl> public class ItemHandlerHelper <nl> { <nl> @ @ - 195 , 4 + 197 , 37 @ @ public class ItemHandlerHelper <nl> world . spawnEntityInWorld ( entityitem ) ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * This method uses the standard vanilla algorithm to calculate a comparator output for how " full " the inventory is . <nl> + * This method is an adaptation of Container # calcRedstoneFromInventory ( IInventory ) . <nl> + * @ param inv The inventory handler to test . <nl> + * @ return A redstone value in the range [ 0 , 15 ] representing how " full " this inventory is . <nl> + * / <nl> + public static int calcRedstoneFromInventory ( @ Nullable IItemHandler inv ) <nl> + { <nl> + if ( inv = = null ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + else <nl> + { <nl> + int itemsFound = 0 ; <nl> + float proportion = 0 . 0F ; <nl> + <nl> + for ( int j = 0 ; j < inv . getSlots ( ) ; + + j ) <nl> + { <nl> + ItemStack itemstack = inv . getStackInSlot ( j ) ; <nl> + <nl> + if ( ! itemstack . func _ 190926 _ b ( ) ) <nl> + { <nl> + proportion + = ( float ) itemstack . func _ 190916 _ E ( ) / ( float ) Math . min ( inv . getSlotLimit ( j ) , itemstack . getMaxStackSize ( ) ) ; <nl> + + + itemsFound ; <nl> + } <nl> + } <nl> + <nl> + proportion = proportion / ( float ) inv . getSlots ( ) ; <nl> + return MathHelper . floor _ float ( proportion * 14 . 0F ) + ( itemsFound > 0 ? 1 : 0 ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / items / ItemStackHandler . java b / src / main / java / net / minecraftforge / items / ItemStackHandler . java <nl> index 291eb96 . . 7355eb1 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / ItemStackHandler . java <nl> + + + b / src / main / java / net / minecraftforge / items / ItemStackHandler . java <nl> @ @ - 154 , 9 + 154 , 15 @ @ public class ItemStackHandler implements IItemHandler , IItemHandlerModifiable , I <nl> } <nl> } <nl> <nl> + @ Override <nl> + public int getSlotLimit ( int slot ) <nl> + { <nl> + return 64 ; <nl> + } <nl> + <nl> protected int getStackLimit ( int slot , @ Nonnull ItemStack stack ) <nl> { <nl> - return stack . getMaxStackSize ( ) ; <nl> + return Math . min ( getSlotLimit ( slot ) , stack . getMaxStackSize ( ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / net / minecraftforge / items / VanillaDoubleChestItemHandler . java b / src / main / java / net / minecraftforge / items / VanillaDoubleChestItemHandler . java <nl> index ce10fd8 . . fb63495 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / VanillaDoubleChestItemHandler . java <nl> + + + b / src / main / java / net / minecraftforge / items / VanillaDoubleChestItemHandler . java <nl> @ @ - 150 , 6 + 150 , 13 @ @ public class VanillaDoubleChestItemHandler extends WeakReference < TileEntityChest <nl> } <nl> <nl> @ Override <nl> + public int getSlotLimit ( int slot ) <nl> + { <nl> + boolean accessingUpperChest = slot < 27 ; <nl> + return getChest ( accessingUpperChest ) . getInventoryStackLimit ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> public boolean equals ( Object o ) <nl> { <nl> if ( this = = o ) <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java <nl> index 1f18743 . . 4967656 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java <nl> @ @ - 123 , 4 + 123 , 13 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable <nl> slot = getSlotFromIndex ( slot , index ) ; <nl> return handler . extractItem ( slot , amount , simulate ) ; <nl> } <nl> + <nl> + @ Override <nl> + public int getSlotLimit ( int slot ) <nl> + { <nl> + int index = getIndexForSlot ( slot ) ; <nl> + IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; <nl> + int localSlot = getSlotFromIndex ( slot , index ) ; <nl> + return handler . getSlotLimit ( localSlot ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / EmptyHandler . java b / src / main / java / net / minecraftforge / items / wrapper / EmptyHandler . java <nl> index 16172cf . . 56bb97c 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / EmptyHandler . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / EmptyHandler . java <nl> @ @ - 61 , 4 + 61 , 10 @ @ public class EmptyHandler implements IItemHandlerModifiable <nl> { <nl> / / nothing to do here <nl> } <nl> + <nl> + @ Override <nl> + public int getSlotLimit ( int slot ) <nl> + { <nl> + return 0 ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / InvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / InvWrapper . java <nl> index 6606526 . . 7d32ba3 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / InvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / InvWrapper . java <nl> @ @ - 86 , 7 + 86 , 7 @ @ public class InvWrapper implements IItemHandlerModifiable <nl> if ( ! ItemHandlerHelper . canItemStacksStack ( stack , stackInSlot ) ) <nl> return stack ; <nl> <nl> - m = Math . min ( stack . getMaxStackSize ( ) , getInv ( ) . getInventoryStackLimit ( ) ) - stackInSlot . func _ 190916 _ E ( ) ; <nl> + m = Math . min ( stack . getMaxStackSize ( ) , getSlotLimit ( slot ) ) - stackInSlot . func _ 190916 _ E ( ) ; <nl> <nl> if ( stack . func _ 190916 _ E ( ) < = m ) <nl> { <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class InvWrapper implements IItemHandlerModifiable <nl> } <nl> else <nl> { <nl> - m = Math . min ( stack . getMaxStackSize ( ) , getInv ( ) . getInventoryStackLimit ( ) ) ; <nl> + m = Math . min ( stack . getMaxStackSize ( ) , getSlotLimit ( slot ) ) ; <nl> if ( m < stack . func _ 190916 _ E ( ) ) <nl> { <nl> / / copy the stack to not modify the original one <nl> @ @ - 192 , 6 + 192 , 12 @ @ public class InvWrapper implements IItemHandlerModifiable <nl> getInv ( ) . setInventorySlotContents ( slot , stack ) ; <nl> } <nl> <nl> + @ Override <nl> + public int getSlotLimit ( int slot ) <nl> + { <nl> + return getInv ( ) . getInventoryStackLimit ( ) ; <nl> + } <nl> + <nl> public IInventory getInv ( ) <nl> { <nl> return inv ; <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java <nl> index c01f332 . . 43edac8 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java <nl> @ @ - 94 , 6 + 94 , 17 @ @ public class RangedWrapper implements IItemHandlerModifiable { <nl> } <nl> } <nl> <nl> + @ Override <nl> + public int getSlotLimit ( int slot ) <nl> + { <nl> + if ( checkSlot ( slot ) ) <nl> + { <nl> + return compose . getSlotLimit ( slot + minSlot ) ; <nl> + } <nl> + <nl> + return 0 ; <nl> + } <nl> + <nl> private boolean checkSlot ( int localSlot ) <nl> { <nl> return localSlot + minSlot < maxSlot ; <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / SidedInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / SidedInvWrapper . java <nl> index 341c39a . . 3afbe3c 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / SidedInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / SidedInvWrapper . java <nl> @ @ - 104 , 7 + 104 , 7 @ @ public class SidedInvWrapper implements IItemHandlerModifiable <nl> if ( ! ItemHandlerHelper . canItemStacksStack ( stack , stackInSlot ) ) <nl> return stack ; <nl> <nl> - m = Math . min ( stack . getMaxStackSize ( ) , inv . getInventoryStackLimit ( ) ) - stackInSlot . func _ 190916 _ E ( ) ; <nl> + m = Math . min ( stack . getMaxStackSize ( ) , getSlotLimit ( slot ) ) - stackInSlot . func _ 190916 _ E ( ) ; <nl> <nl> if ( stack . func _ 190916 _ E ( ) < = m ) <nl> { <nl> @ @ - 137 , 7 + 137 , 7 @ @ public class SidedInvWrapper implements IItemHandlerModifiable <nl> } <nl> else <nl> { <nl> - m = Math . min ( stack . getMaxStackSize ( ) , inv . getInventoryStackLimit ( ) ) ; <nl> + m = Math . min ( stack . getMaxStackSize ( ) , getSlotLimit ( slot ) ) ; <nl> if ( m < stack . func _ 190916 _ E ( ) ) <nl> { <nl> / / copy the stack to not modify the original one <nl> @ @ - 211 , 4 + 211 , 10 @ @ public class SidedInvWrapper implements IItemHandlerModifiable <nl> return inv . decrStackSize ( slot1 , m ) ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public int getSlotLimit ( int slot ) <nl> + { <nl> + return inv . getInventoryStackLimit ( ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> index 2ddf22c . . 4c463a5 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> @ @ - 285 , 3 + 285 , 38 @ @ <nl> } <nl> <nl> this . func _ 184602 _ cy ( ) ; <nl> + @ @ - 2626 , 4 + 2707 , 34 @ @ <nl> + { <nl> + return true ; <nl> + } <nl> + + <nl> + + / / FORGE <nl> + + private final net . minecraftforge . items . IItemHandlerModifiable handHandler = new net . minecraftforge . items . ItemStackHandler ( field _ 184630 _ bs ) ; <nl> + + private final net . minecraftforge . items . IItemHandlerModifiable armorHandler = new net . minecraftforge . items . ItemStackHandler ( field _ 184631 _ bt ) ; <nl> + + private final net . minecraftforge . items . IItemHandler joinedHandler = new net . minecraftforge . items . wrapper . CombinedInvWrapper ( armorHandler , handHandler ) ; <nl> + + <nl> + + @ Override <nl> + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) <nl> + + { <nl> + + if ( facing = = net . minecraft . util . EnumFacing . UP ) <nl> + + { <nl> + + return ( T ) armorHandler ; <nl> + + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) <nl> + + { <nl> + + return ( T ) handHandler ; <nl> + + } else <nl> + + { <nl> + + return ( T ) joinedHandler ; <nl> + + } <nl> + + } <nl> + + return super . getCapability ( capability , facing ) ; <nl> + + } <nl> + + <nl> + + @ Override <nl> + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; <nl> + + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch <nl> index fabe725 . . 4c14f0c 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch <nl> @ @ - 1 , 6 + 1 , 14 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / entity / passive / EntityHorse . java <nl> + + + . . / src - work / minecraft / net / minecraft / entity / passive / EntityHorse . java <nl> - @ @ - 1200 , 6 + 1200 , 7 @ @ <nl> + @ @ - 433 , 6 + 433 , 7 @ @ <nl> + <nl> + this . field _ 110296 _ bG . func _ 110134 _ a ( this ) ; <nl> + this . func _ 110232 _ cE ( ) ; <nl> + + this . itemHandler = new net . minecraftforge . items . wrapper . InvWrapper ( this . field _ 110296 _ bG ) ; <nl> + } <nl> + <nl> + private void func _ 110232 _ cE ( ) <nl> + @ @ - 1200 , 6 + 1201 , 7 @ @ <nl> } <nl> <nl> this . field _ 110277 _ bt = 0 . 0F ; <nl> @ @ - 8 , 3 + 16 , 29 @ @ <nl> } <nl> <nl> this . field _ 70138 _ W = 1 . 0F ; <nl> + @ @ - 1793 , 4 + 1795 , 25 @ @ <nl> + this . field _ 188477 _ b = p _ i46589 _ 2 _ ; <nl> + } <nl> + } <nl> + + <nl> + + / / FORGE <nl> + + private net . minecraftforge . items . IItemHandler itemHandler = null ; / / Initialized by initHorseChest above . <nl> + + <nl> + + @ Override <nl> + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY <nl> + + & & itemHandler ! = null ) <nl> + + { <nl> + + return ( T ) itemHandler ; <nl> + + } <nl> + + return super . getCapability ( capability , facing ) ; <nl> + + } <nl> + + <nl> + + @ Override <nl> + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY & & itemHandler ! = null <nl> + + | | super . hasCapability ( capability , facing ) ; <nl> + + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> index 946c86c . . ffdccb2 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> @ @ - 401 , 7 + 401 , 7 @ @ <nl> <nl> if ( this . func _ 70608 _ bn ( ) ) <nl> { <nl> - @ @ - 2340 , 6 + 2447 , 136 @ @ <nl> + @ @ - 2340 , 6 + 2447 , 169 @ @ <nl> return ( float ) this . func _ 110148 _ a ( SharedMonsterAttributes . field _ 188792 _ h ) . func _ 111126 _ e ( ) ; <nl> } <nl> <nl> @ @ - 533 , 6 + 533 , 39 @ @ <nl> + public java . util . Collection < ITextComponent > getPrefixes ( ) { return this . prefixes ; } <nl> + public java . util . Collection < ITextComponent > getSuffixes ( ) { return this . suffixes ; } <nl> + <nl> + + private final net . minecraftforge . items . IItemHandler playerMainHandler = new net . minecraftforge . items . wrapper . PlayerMainInvWrapper ( field _ 71071 _ by ) ; <nl> + + private final net . minecraftforge . items . IItemHandler playerArmorHandler = new net . minecraftforge . items . wrapper . PlayerArmorInvWrapper ( field _ 71071 _ by ) ; <nl> + + private final net . minecraftforge . items . IItemHandler playerOffhandHandler = new net . minecraftforge . items . wrapper . PlayerOffhandInvWrapper ( field _ 71071 _ by ) ; <nl> + + private final net . minecraftforge . items . IItemHandler playerJoinedHandler = new net . minecraftforge . items . wrapper . PlayerInvWrapper ( field _ 71071 _ by ) ; <nl> + + <nl> + + @ Override <nl> + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) <nl> + + { <nl> + + if ( facing = = net . minecraft . util . EnumFacing . UP ) <nl> + + { <nl> + + return ( T ) playerArmorHandler ; <nl> + + } else if ( facing = = net . minecraft . util . EnumFacing . DOWN ) <nl> + + { <nl> + + return ( T ) playerMainHandler ; <nl> + + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) <nl> + + { <nl> + + return ( T ) playerOffhandHandler ; <nl> + + } else <nl> + + { <nl> + + return ( T ) playerJoinedHandler ; <nl> + + } <nl> + + } <nl> + + return super . getCapability ( capability , facing ) ; <nl> + + } <nl> + + <nl> + + @ Override <nl> + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; <nl> + + } <nl> + + <nl> + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + <nl> public static enum EnumChatVisibility <nl> diff - - git a / src / main / java / net / minecraftforge / items / ItemStackHandler . java b / src / main / java / net / minecraftforge / items / ItemStackHandler . java <nl> index 5ffc6bc . . fcd0502 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / ItemStackHandler . java <nl> + + + b / src / main / java / net / minecraftforge / items / ItemStackHandler . java <nl> @ @ - 20 , 6 + 20 , 11 @ @ public class ItemStackHandler implements IItemHandler , IItemHandlerModifiable , I <nl> stacks = new ItemStack [ size ] ; <nl> } <nl> <nl> + public ItemStackHandler ( ItemStack [ ] stacks ) <nl> + { <nl> + this . stacks = stacks ; <nl> + } <nl> + <nl> public void setSize ( int size ) <nl> { <nl> stacks = new ItemStack [ size ] ; <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> index 9da8862 . . f8c70dd 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import net . minecraft . item . ItemStack ; <nl> public class PlayerArmorInvWrapper extends InvWrapper <nl> { <nl> public final InventoryPlayer inventoryPlayer ; <nl> - public final int offset ; <nl> + private final int offset ; <nl> <nl> public PlayerArmorInvWrapper ( InventoryPlayer inv ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java <nl> index b565470 . . b0c99d5 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java <nl> @ @ - 6 , 6 + 6 , 6 @ @ public class PlayerInvWrapper extends CombinedInvWrapper <nl> { <nl> public PlayerInvWrapper ( InventoryPlayer inv ) <nl> { <nl> - super ( new PlayerMainInvWrapper ( inv ) , new PlayerArmorInvWrapper ( inv ) ) ; <nl> + super ( new PlayerMainInvWrapper ( inv ) , new PlayerArmorInvWrapper ( inv ) , new PlayerOffhandInvWrapper ( inv ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java <nl> index a2d996d . . 2893486 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java <nl> @ @ - 10 , 7 + 10 , 6 @ @ import net . minecraft . item . ItemStack ; <nl> * / <nl> public class PlayerMainInvWrapper extends InvWrapper <nl> { <nl> - <nl> public final InventoryPlayer inventoryPlayer ; <nl> <nl> public PlayerMainInvWrapper ( InventoryPlayer inv ) <nl> @ @ - 29 , 7 + 28 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper <nl> @ Override <nl> public void setStackInSlot ( int slot , ItemStack stack ) <nl> { <nl> - / / prevent setting of armor inventory <nl> + / / prevent setting of armor and offhand <nl> if ( slot > getSlots ( ) ) <nl> { <nl> return ; <nl> @ @ - 40 , 7 + 39 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper <nl> @ Override <nl> public ItemStack getStackInSlot ( int slot ) <nl> { <nl> - / / prevent getting of armor inventory <nl> + / / prevent getting of armor and offhand <nl> if ( slot > getSlots ( ) ) <nl> { <nl> return null ; <nl> @ @ - 51 , 7 + 50 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper <nl> @ Override <nl> public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) <nl> { <nl> - / / prevent inserting into armor inventory <nl> + / / prevent inserting into armor and offhand <nl> if ( slot > getSlots ( ) ) <nl> { <nl> return stack ; <nl> @ @ - 79 , 7 + 78 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper <nl> @ Override <nl> public ItemStack extractItem ( int slot , int amount , boolean simulate ) <nl> { <nl> - / / prevent extraction from armor inventory <nl> + / / prevent extraction from armor and offhand <nl> if ( slot > getSlots ( ) ) <nl> { <nl> return null ; <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java <nl> new file mode 100644 <nl> index 0000000 . . 5272a3e <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + package net . minecraftforge . items . wrapper ; <nl> + <nl> + import net . minecraft . entity . player . InventoryPlayer ; <nl> + import net . minecraft . item . ItemStack ; <nl> + <nl> + public class PlayerOffhandInvWrapper extends InvWrapper <nl> + { <nl> + public final InventoryPlayer inventoryPlayer ; <nl> + private final int offset ; <nl> + <nl> + public PlayerOffhandInvWrapper ( InventoryPlayer inv ) <nl> + { <nl> + super ( inv ) ; <nl> + <nl> + inventoryPlayer = inv ; <nl> + offset = inventoryPlayer . mainInventory . length + inventoryPlayer . armorInventory . length ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getSlots ( ) <nl> + { <nl> + return inventoryPlayer . offHandInventory . length ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack getStackInSlot ( int slot ) <nl> + { <nl> + return super . getStackInSlot ( slot + offset ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) <nl> + { <nl> + return super . insertItem ( slot + offset , stack , simulate ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void setStackInSlot ( int slot , ItemStack stack ) <nl> + { <nl> + super . setStackInSlot ( slot + offset , stack ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack extractItem ( int slot , int amount , boolean simulate ) <nl> + { <nl> + return super . extractItem ( slot + offset , amount , simulate ) ; <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / items / IItemHandler . java b / src / main / java / net / minecraftforge / items / IItemHandler . java 
 index c577351 . . 2e2aaf5 100644 
 - - - a / src / main / java / net / minecraftforge / items / IItemHandler . java 
 + + + b / src / main / java / net / minecraftforge / items / IItemHandler . java 
 @ @ - 80 , 4 + 80 , 12 @ @ public interface IItemHandler 
 * * / 
 @ Nonnull 
 ItemStack extractItem ( int slot , int amount , boolean simulate ) ; 
 + 
 + / * * 
 + * Retrieves the maximum stack size allowed to exist in the given slot . 
 + * 
 + * @ param slot Slot to query . 
 + * @ return The maximum stack size allowed in the slot . 
 + * / 
 + int getSlotLimit ( int slot ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / items / ItemHandlerHelper . java b / src / main / java / net / minecraftforge / items / ItemHandlerHelper . java 
 index 40e92db . . 8bdf297 100644 
 - - - a / src / main / java / net / minecraftforge / items / ItemHandlerHelper . java 
 + + + b / src / main / java / net / minecraftforge / items / ItemHandlerHelper . java 
 @ @ - 25 , 10 + 25 , 12 @ @ import net . minecraft . init . SoundEvents ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . util . SoundCategory ; 
 + import net . minecraft . util . math . MathHelper ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . items . wrapper . PlayerMainInvWrapper ; 
 
 import javax . annotation . Nonnull ; 
 + import javax . annotation . Nullable ; 
 
 public class ItemHandlerHelper 
 { 
 @ @ - 195 , 4 + 197 , 37 @ @ public class ItemHandlerHelper 
 world . spawnEntityInWorld ( entityitem ) ; 
 } 
 } 
 + 
 + / * * 
 + * This method uses the standard vanilla algorithm to calculate a comparator output for how " full " the inventory is . 
 + * This method is an adaptation of Container # calcRedstoneFromInventory ( IInventory ) . 
 + * @ param inv The inventory handler to test . 
 + * @ return A redstone value in the range [ 0 , 15 ] representing how " full " this inventory is . 
 + * / 
 + public static int calcRedstoneFromInventory ( @ Nullable IItemHandler inv ) 
 + { 
 + if ( inv = = null ) 
 + { 
 + return 0 ; 
 + } 
 + else 
 + { 
 + int itemsFound = 0 ; 
 + float proportion = 0 . 0F ; 
 + 
 + for ( int j = 0 ; j < inv . getSlots ( ) ; + + j ) 
 + { 
 + ItemStack itemstack = inv . getStackInSlot ( j ) ; 
 + 
 + if ( ! itemstack . func _ 190926 _ b ( ) ) 
 + { 
 + proportion + = ( float ) itemstack . func _ 190916 _ E ( ) / ( float ) Math . min ( inv . getSlotLimit ( j ) , itemstack . getMaxStackSize ( ) ) ; 
 + + + itemsFound ; 
 + } 
 + } 
 + 
 + proportion = proportion / ( float ) inv . getSlots ( ) ; 
 + return MathHelper . floor _ float ( proportion * 14 . 0F ) + ( itemsFound > 0 ? 1 : 0 ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / items / ItemStackHandler . java b / src / main / java / net / minecraftforge / items / ItemStackHandler . java 
 index 291eb96 . . 7355eb1 100644 
 - - - a / src / main / java / net / minecraftforge / items / ItemStackHandler . java 
 + + + b / src / main / java / net / minecraftforge / items / ItemStackHandler . java 
 @ @ - 154 , 9 + 154 , 15 @ @ public class ItemStackHandler implements IItemHandler , IItemHandlerModifiable , I 
 } 
 } 
 
 + @ Override 
 + public int getSlotLimit ( int slot ) 
 + { 
 + return 64 ; 
 + } 
 + 
 protected int getStackLimit ( int slot , @ Nonnull ItemStack stack ) 
 { 
 - return stack . getMaxStackSize ( ) ; 
 + return Math . min ( getSlotLimit ( slot ) , stack . getMaxStackSize ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / net / minecraftforge / items / VanillaDoubleChestItemHandler . java b / src / main / java / net / minecraftforge / items / VanillaDoubleChestItemHandler . java 
 index ce10fd8 . . fb63495 100644 
 - - - a / src / main / java / net / minecraftforge / items / VanillaDoubleChestItemHandler . java 
 + + + b / src / main / java / net / minecraftforge / items / VanillaDoubleChestItemHandler . java 
 @ @ - 150 , 6 + 150 , 13 @ @ public class VanillaDoubleChestItemHandler extends WeakReference < TileEntityChest 
 } 
 
 @ Override 
 + public int getSlotLimit ( int slot ) 
 + { 
 + boolean accessingUpperChest = slot < 27 ; 
 + return getChest ( accessingUpperChest ) . getInventoryStackLimit ( ) ; 
 + } 
 + 
 + @ Override 
 public boolean equals ( Object o ) 
 { 
 if ( this = = o ) 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java 
 index 1f18743 . . 4967656 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java 
 @ @ - 123 , 4 + 123 , 13 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable 
 slot = getSlotFromIndex ( slot , index ) ; 
 return handler . extractItem ( slot , amount , simulate ) ; 
 } 
 + 
 + @ Override 
 + public int getSlotLimit ( int slot ) 
 + { 
 + int index = getIndexForSlot ( slot ) ; 
 + IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; 
 + int localSlot = getSlotFromIndex ( slot , index ) ; 
 + return handler . getSlotLimit ( localSlot ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / EmptyHandler . java b / src / main / java / net / minecraftforge / items / wrapper / EmptyHandler . java 
 index 16172cf . . 56bb97c 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / EmptyHandler . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / EmptyHandler . java 
 @ @ - 61 , 4 + 61 , 10 @ @ public class EmptyHandler implements IItemHandlerModifiable 
 { 
 / / nothing to do here 
 } 
 + 
 + @ Override 
 + public int getSlotLimit ( int slot ) 
 + { 
 + return 0 ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / InvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / InvWrapper . java 
 index 6606526 . . 7d32ba3 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / InvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / InvWrapper . java 
 @ @ - 86 , 7 + 86 , 7 @ @ public class InvWrapper implements IItemHandlerModifiable 
 if ( ! ItemHandlerHelper . canItemStacksStack ( stack , stackInSlot ) ) 
 return stack ; 
 
 - m = Math . min ( stack . getMaxStackSize ( ) , getInv ( ) . getInventoryStackLimit ( ) ) - stackInSlot . func _ 190916 _ E ( ) ; 
 + m = Math . min ( stack . getMaxStackSize ( ) , getSlotLimit ( slot ) ) - stackInSlot . func _ 190916 _ E ( ) ; 
 
 if ( stack . func _ 190916 _ E ( ) < = m ) 
 { 
 @ @ - 121 , 7 + 121 , 7 @ @ public class InvWrapper implements IItemHandlerModifiable 
 } 
 else 
 { 
 - m = Math . min ( stack . getMaxStackSize ( ) , getInv ( ) . getInventoryStackLimit ( ) ) ; 
 + m = Math . min ( stack . getMaxStackSize ( ) , getSlotLimit ( slot ) ) ; 
 if ( m < stack . func _ 190916 _ E ( ) ) 
 { 
 / / copy the stack to not modify the original one 
 @ @ - 192 , 6 + 192 , 12 @ @ public class InvWrapper implements IItemHandlerModifiable 
 getInv ( ) . setInventorySlotContents ( slot , stack ) ; 
 } 
 
 + @ Override 
 + public int getSlotLimit ( int slot ) 
 + { 
 + return getInv ( ) . getInventoryStackLimit ( ) ; 
 + } 
 + 
 public IInventory getInv ( ) 
 { 
 return inv ; 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java 
 index c01f332 . . 43edac8 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java 
 @ @ - 94 , 6 + 94 , 17 @ @ public class RangedWrapper implements IItemHandlerModifiable { 
 } 
 } 
 
 + @ Override 
 + public int getSlotLimit ( int slot ) 
 + { 
 + if ( checkSlot ( slot ) ) 
 + { 
 + return compose . getSlotLimit ( slot + minSlot ) ; 
 + } 
 + 
 + return 0 ; 
 + } 
 + 
 private boolean checkSlot ( int localSlot ) 
 { 
 return localSlot + minSlot < maxSlot ; 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / SidedInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / SidedInvWrapper . java 
 index 341c39a . . 3afbe3c 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / SidedInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / SidedInvWrapper . java 
 @ @ - 104 , 7 + 104 , 7 @ @ public class SidedInvWrapper implements IItemHandlerModifiable 
 if ( ! ItemHandlerHelper . canItemStacksStack ( stack , stackInSlot ) ) 
 return stack ; 
 
 - m = Math . min ( stack . getMaxStackSize ( ) , inv . getInventoryStackLimit ( ) ) - stackInSlot . func _ 190916 _ E ( ) ; 
 + m = Math . min ( stack . getMaxStackSize ( ) , getSlotLimit ( slot ) ) - stackInSlot . func _ 190916 _ E ( ) ; 
 
 if ( stack . func _ 190916 _ E ( ) < = m ) 
 { 
 @ @ - 137 , 7 + 137 , 7 @ @ public class SidedInvWrapper implements IItemHandlerModifiable 
 } 
 else 
 { 
 - m = Math . min ( stack . getMaxStackSize ( ) , inv . getInventoryStackLimit ( ) ) ; 
 + m = Math . min ( stack . getMaxStackSize ( ) , getSlotLimit ( slot ) ) ; 
 if ( m < stack . func _ 190916 _ E ( ) ) 
 { 
 / / copy the stack to not modify the original one 
 @ @ - 211 , 4 + 211 , 10 @ @ public class SidedInvWrapper implements IItemHandlerModifiable 
 return inv . decrStackSize ( slot1 , m ) ; 
 } 
 } 
 + 
 + @ Override 
 + public int getSlotLimit ( int slot ) 
 + { 
 + return inv . getInventoryStackLimit ( ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 index 2ddf22c . . 4c463a5 100644 
 - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 @ @ - 285 , 3 + 285 , 38 @ @ 
 } 
 
 this . func _ 184602 _ cy ( ) ; 
 + @ @ - 2626 , 4 + 2707 , 34 @ @ 
 + { 
 + return true ; 
 + } 
 + + 
 + + / / FORGE 
 + + private final net . minecraftforge . items . IItemHandlerModifiable handHandler = new net . minecraftforge . items . ItemStackHandler ( field _ 184630 _ bs ) ; 
 + + private final net . minecraftforge . items . IItemHandlerModifiable armorHandler = new net . minecraftforge . items . ItemStackHandler ( field _ 184631 _ bt ) ; 
 + + private final net . minecraftforge . items . IItemHandler joinedHandler = new net . minecraftforge . items . wrapper . CombinedInvWrapper ( armorHandler , handHandler ) ; 
 + + 
 + + @ Override 
 + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) 
 + + { 
 + + if ( facing = = net . minecraft . util . EnumFacing . UP ) 
 + + { 
 + + return ( T ) armorHandler ; 
 + + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) 
 + + { 
 + + return ( T ) handHandler ; 
 + + } else 
 + + { 
 + + return ( T ) joinedHandler ; 
 + + } 
 + + } 
 + + return super . getCapability ( capability , facing ) ; 
 + + } 
 + + 
 + + @ Override 
 + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; 
 + + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch 
 index fabe725 . . 4c14f0c 100644 
 - - - a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch 
 @ @ - 1 , 6 + 1 , 14 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / entity / passive / EntityHorse . java 
 + + + . . / src - work / minecraft / net / minecraft / entity / passive / EntityHorse . java 
 - @ @ - 1200 , 6 + 1200 , 7 @ @ 
 + @ @ - 433 , 6 + 433 , 7 @ @ 
 + 
 + this . field _ 110296 _ bG . func _ 110134 _ a ( this ) ; 
 + this . func _ 110232 _ cE ( ) ; 
 + + this . itemHandler = new net . minecraftforge . items . wrapper . InvWrapper ( this . field _ 110296 _ bG ) ; 
 + } 
 + 
 + private void func _ 110232 _ cE ( ) 
 + @ @ - 1200 , 6 + 1201 , 7 @ @ 
 } 
 
 this . field _ 110277 _ bt = 0 . 0F ; 
 @ @ - 8 , 3 + 16 , 29 @ @ 
 } 
 
 this . field _ 70138 _ W = 1 . 0F ; 
 + @ @ - 1793 , 4 + 1795 , 25 @ @ 
 + this . field _ 188477 _ b = p _ i46589 _ 2 _ ; 
 + } 
 + } 
 + + 
 + + / / FORGE 
 + + private net . minecraftforge . items . IItemHandler itemHandler = null ; / / Initialized by initHorseChest above . 
 + + 
 + + @ Override 
 + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY 
 + + & & itemHandler ! = null ) 
 + + { 
 + + return ( T ) itemHandler ; 
 + + } 
 + + return super . getCapability ( capability , facing ) ; 
 + + } 
 + + 
 + + @ Override 
 + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY & & itemHandler ! = null 
 + + | | super . hasCapability ( capability , facing ) ; 
 + + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 index 946c86c . . ffdccb2 100644 
 - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 @ @ - 401 , 7 + 401 , 7 @ @ 
 
 if ( this . func _ 70608 _ bn ( ) ) 
 { 
 - @ @ - 2340 , 6 + 2447 , 136 @ @ 
 + @ @ - 2340 , 6 + 2447 , 169 @ @ 
 return ( float ) this . func _ 110148 _ a ( SharedMonsterAttributes . field _ 188792 _ h ) . func _ 111126 _ e ( ) ; 
 } 
 
 @ @ - 533 , 6 + 533 , 39 @ @ 
 + public java . util . Collection < ITextComponent > getPrefixes ( ) { return this . prefixes ; } 
 + public java . util . Collection < ITextComponent > getSuffixes ( ) { return this . suffixes ; } 
 + 
 + + private final net . minecraftforge . items . IItemHandler playerMainHandler = new net . minecraftforge . items . wrapper . PlayerMainInvWrapper ( field _ 71071 _ by ) ; 
 + + private final net . minecraftforge . items . IItemHandler playerArmorHandler = new net . minecraftforge . items . wrapper . PlayerArmorInvWrapper ( field _ 71071 _ by ) ; 
 + + private final net . minecraftforge . items . IItemHandler playerOffhandHandler = new net . minecraftforge . items . wrapper . PlayerOffhandInvWrapper ( field _ 71071 _ by ) ; 
 + + private final net . minecraftforge . items . IItemHandler playerJoinedHandler = new net . minecraftforge . items . wrapper . PlayerInvWrapper ( field _ 71071 _ by ) ; 
 + + 
 + + @ Override 
 + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) 
 + + { 
 + + if ( facing = = net . minecraft . util . EnumFacing . UP ) 
 + + { 
 + + return ( T ) playerArmorHandler ; 
 + + } else if ( facing = = net . minecraft . util . EnumFacing . DOWN ) 
 + + { 
 + + return ( T ) playerMainHandler ; 
 + + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) 
 + + { 
 + + return ( T ) playerOffhandHandler ; 
 + + } else 
 + + { 
 + + return ( T ) playerJoinedHandler ; 
 + + } 
 + + } 
 + + return super . getCapability ( capability , facing ) ; 
 + + } 
 + + 
 + + @ Override 
 + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; 
 + + } 
 + + 
 + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + 
 public static enum EnumChatVisibility 
 diff - - git a / src / main / java / net / minecraftforge / items / ItemStackHandler . java b / src / main / java / net / minecraftforge / items / ItemStackHandler . java 
 index 5ffc6bc . . fcd0502 100644 
 - - - a / src / main / java / net / minecraftforge / items / ItemStackHandler . java 
 + + + b / src / main / java / net / minecraftforge / items / ItemStackHandler . java 
 @ @ - 20 , 6 + 20 , 11 @ @ public class ItemStackHandler implements IItemHandler , IItemHandlerModifiable , I 
 stacks = new ItemStack [ size ] ; 
 } 
 
 + public ItemStackHandler ( ItemStack [ ] stacks ) 
 + { 
 + this . stacks = stacks ; 
 + } 
 + 
 public void setSize ( int size ) 
 { 
 stacks = new ItemStack [ size ] ; 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 index 9da8862 . . f8c70dd 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 @ @ - 7 , 7 + 7 , 7 @ @ import net . minecraft . item . ItemStack ; 
 public class PlayerArmorInvWrapper extends InvWrapper 
 { 
 public final InventoryPlayer inventoryPlayer ; 
 - public final int offset ; 
 + private final int offset ; 
 
 public PlayerArmorInvWrapper ( InventoryPlayer inv ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java 
 index b565470 . . b0c99d5 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java 
 @ @ - 6 , 6 + 6 , 6 @ @ public class PlayerInvWrapper extends CombinedInvWrapper 
 { 
 public PlayerInvWrapper ( InventoryPlayer inv ) 
 { 
 - super ( new PlayerMainInvWrapper ( inv ) , new PlayerArmorInvWrapper ( inv ) ) ; 
 + super ( new PlayerMainInvWrapper ( inv ) , new PlayerArmorInvWrapper ( inv ) , new PlayerOffhandInvWrapper ( inv ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java 
 index a2d996d . . 2893486 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java 
 @ @ - 10 , 7 + 10 , 6 @ @ import net . minecraft . item . ItemStack ; 
 * / 
 public class PlayerMainInvWrapper extends InvWrapper 
 { 
 - 
 public final InventoryPlayer inventoryPlayer ; 
 
 public PlayerMainInvWrapper ( InventoryPlayer inv ) 
 @ @ - 29 , 7 + 28 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper 
 @ Override 
 public void setStackInSlot ( int slot , ItemStack stack ) 
 { 
 - / / prevent setting of armor inventory 
 + / / prevent setting of armor and offhand 
 if ( slot > getSlots ( ) ) 
 { 
 return ; 
 @ @ - 40 , 7 + 39 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper 
 @ Override 
 public ItemStack getStackInSlot ( int slot ) 
 { 
 - / / prevent getting of armor inventory 
 + / / prevent getting of armor and offhand 
 if ( slot > getSlots ( ) ) 
 { 
 return null ; 
 @ @ - 51 , 7 + 50 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper 
 @ Override 
 public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) 
 { 
 - / / prevent inserting into armor inventory 
 + / / prevent inserting into armor and offhand 
 if ( slot > getSlots ( ) ) 
 { 
 return stack ; 
 @ @ - 79 , 7 + 78 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper 
 @ Override 
 public ItemStack extractItem ( int slot , int amount , boolean simulate ) 
 { 
 - / / prevent extraction from armor inventory 
 + / / prevent extraction from armor and offhand 
 if ( slot > getSlots ( ) ) 
 { 
 return null ; 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java 
 new file mode 100644 
 index 0000000 . . 5272a3e 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + package net . minecraftforge . items . wrapper ; 
 + 
 + import net . minecraft . entity . player . InventoryPlayer ; 
 + import net . minecraft . item . ItemStack ; 
 + 
 + public class PlayerOffhandInvWrapper extends InvWrapper 
 + { 
 + public final InventoryPlayer inventoryPlayer ; 
 + private final int offset ; 
 + 
 + public PlayerOffhandInvWrapper ( InventoryPlayer inv ) 
 + { 
 + super ( inv ) ; 
 + 
 + inventoryPlayer = inv ; 
 + offset = inventoryPlayer . mainInventory . length + inventoryPlayer . armorInventory . length ; 
 + } 
 + 
 + @ Override 
 + public int getSlots ( ) 
 + { 
 + return inventoryPlayer . offHandInventory . length ; 
 + } 
 + 
 + @ Override 
 + public ItemStack getStackInSlot ( int slot ) 
 + { 
 + return super . getStackInSlot ( slot + offset ) ; 
 + } 
 + 
 + @ Override 
 + public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) 
 + { 
 + return super . insertItem ( slot + offset , stack , simulate ) ; 
 + } 
 + 
 + @ Override 
 + public void setStackInSlot ( int slot , ItemStack stack ) 
 + { 
 + super . setStackInSlot ( slot + offset , stack ) ; 
 + } 
 + 
 + @ Override 
 + public ItemStack extractItem ( int slot , int amount , boolean simulate ) 
 + { 
 + return super . extractItem ( slot + offset , amount , simulate ) ; 
 + } 
 + 
 + }
