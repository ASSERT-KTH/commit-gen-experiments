BLEU SCORE: 0.041961149062965476

TEST MSG: Fix RegistryManager # getRegistry not working for generic registry entries
GENERATED MSG: Fix javac compile issues .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java <nl> index c0673e1 . . 5d5c8d9 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java <nl> @ @ - 24 , 7 + 24 , 6 @ @ import net . minecraft . enchantment . Enchantment ; <nl> import net . minecraft . entity . EntityType ; <nl> import net . minecraft . init . Bootstrap ; <nl> import net . minecraft . item . Item ; <nl> - import net . minecraft . item . crafting . IRecipe ; <nl> import net . minecraft . potion . Potion ; <nl> import net . minecraft . potion . PotionType ; <nl> import net . minecraft . tileentity . TileEntityType ; <nl> @ @ - 40 , 7 + 39 , 6 @ @ import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfessio <nl> * Created to have a central place to access the registries directly if modders need . <nl> * It is still advised that if you are registering things to go through { @ link GameRegistry } register methods , but queries and iterations can use this . <nl> * / <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public class ForgeRegistries <nl> { <nl> static { init ( ) ; } / / This must be above the fields so we guarantee it ' s run before findRegistry is called . Yay static inializers <nl> @ @ - 53 , 8 + 51 , 8 @ @ public class ForgeRegistries <nl> public static final IForgeRegistry < PotionType > POTION _ TYPES = RegistryManager . ACTIVE . getRegistry ( PotionType . class ) ; <nl> public static final IForgeRegistry < Enchantment > ENCHANTMENTS = RegistryManager . ACTIVE . getRegistry ( Enchantment . class ) ; <nl> public static final IForgeRegistry < VillagerProfession > VILLAGER _ PROFESSIONS = RegistryManager . ACTIVE . getRegistry ( VillagerProfession . class ) ; <nl> - public static final IForgeRegistry < EntityType < ? > > ENTITIES = ( IForgeRegistry ) RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; / / Untyped casys needed to fix javac issues . <nl> - public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = ( IForgeRegistry ) RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; <nl> + public static final IForgeRegistry < EntityType < ? > > ENTITIES = RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; / / Untyped casys needed to fix javac issues . <nl> + public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; <nl> public static final IForgeRegistry < ModDimension > MOD _ DIMENSIONS = RegistryManager . ACTIVE . getRegistry ( ModDimension . class ) ; <nl> / * * <nl> * This function is just to make sure static inializers in other classes have run and setup their registries before we query them . <nl> diff - - git a / src / main / java / net / minecraftforge / registries / RegistryManager . java b / src / main / java / net / minecraftforge / registries / RegistryManager . java <nl> index 1c7a62e . . aec3c11 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / RegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / registries / RegistryManager . java <nl> @ @ - 73 , 7 + 73 , 7 @ @ public class RegistryManager <nl> return ( ForgeRegistry < V > ) this . registries . get ( key ) ; <nl> } <nl> <nl> - public < V extends IForgeRegistryEntry < V > > IForgeRegistry < V > getRegistry ( Class < V > cls ) <nl> + public < V extends IForgeRegistryEntry < V > > IForgeRegistry < V > getRegistry ( Class < ? super V > cls ) <nl> { <nl> return getRegistry ( superTypes . get ( cls ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java <nl> index eedcb7c . . c0673e1 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java <nl> @ @ - 53 , 8 + 53 , 8 @ @ public class ForgeRegistries <nl> public static final IForgeRegistry < PotionType > POTION _ TYPES = RegistryManager . ACTIVE . getRegistry ( PotionType . class ) ; <nl> public static final IForgeRegistry < Enchantment > ENCHANTMENTS = RegistryManager . ACTIVE . getRegistry ( Enchantment . class ) ; <nl> public static final IForgeRegistry < VillagerProfession > VILLAGER _ PROFESSIONS = RegistryManager . ACTIVE . getRegistry ( VillagerProfession . class ) ; <nl> - public static final IForgeRegistry < EntityType < ? > > ENTITIES = RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; <nl> - public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; <nl> + public static final IForgeRegistry < EntityType < ? > > ENTITIES = ( IForgeRegistry ) RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; / / Untyped casys needed to fix javac issues . <nl> + public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = ( IForgeRegistry ) RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; <nl> public static final IForgeRegistry < ModDimension > MOD _ DIMENSIONS = RegistryManager . ACTIVE . getRegistry ( ModDimension . class ) ; <nl> / * * <nl> * This function is just to make sure static inializers in other classes have run and setup their registries before we query them .

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java 
 index c0673e1 . . 5d5c8d9 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java 
 + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java 
 @ @ - 24 , 7 + 24 , 6 @ @ import net . minecraft . enchantment . Enchantment ; 
 import net . minecraft . entity . EntityType ; 
 import net . minecraft . init . Bootstrap ; 
 import net . minecraft . item . Item ; 
 - import net . minecraft . item . crafting . IRecipe ; 
 import net . minecraft . potion . Potion ; 
 import net . minecraft . potion . PotionType ; 
 import net . minecraft . tileentity . TileEntityType ; 
 @ @ - 40 , 7 + 39 , 6 @ @ import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfessio 
 * Created to have a central place to access the registries directly if modders need . 
 * It is still advised that if you are registering things to go through { @ link GameRegistry } register methods , but queries and iterations can use this . 
 * / 
 - @ SuppressWarnings ( " unchecked " ) 
 public class ForgeRegistries 
 { 
 static { init ( ) ; } / / This must be above the fields so we guarantee it ' s run before findRegistry is called . Yay static inializers 
 @ @ - 53 , 8 + 51 , 8 @ @ public class ForgeRegistries 
 public static final IForgeRegistry < PotionType > POTION _ TYPES = RegistryManager . ACTIVE . getRegistry ( PotionType . class ) ; 
 public static final IForgeRegistry < Enchantment > ENCHANTMENTS = RegistryManager . ACTIVE . getRegistry ( Enchantment . class ) ; 
 public static final IForgeRegistry < VillagerProfession > VILLAGER _ PROFESSIONS = RegistryManager . ACTIVE . getRegistry ( VillagerProfession . class ) ; 
 - public static final IForgeRegistry < EntityType < ? > > ENTITIES = ( IForgeRegistry ) RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; / / Untyped casys needed to fix javac issues . 
 - public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = ( IForgeRegistry ) RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; 
 + public static final IForgeRegistry < EntityType < ? > > ENTITIES = RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; / / Untyped casys needed to fix javac issues . 
 + public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; 
 public static final IForgeRegistry < ModDimension > MOD _ DIMENSIONS = RegistryManager . ACTIVE . getRegistry ( ModDimension . class ) ; 
 / * * 
 * This function is just to make sure static inializers in other classes have run and setup their registries before we query them . 
 diff - - git a / src / main / java / net / minecraftforge / registries / RegistryManager . java b / src / main / java / net / minecraftforge / registries / RegistryManager . java 
 index 1c7a62e . . aec3c11 100644 
 - - - a / src / main / java / net / minecraftforge / registries / RegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / registries / RegistryManager . java 
 @ @ - 73 , 7 + 73 , 7 @ @ public class RegistryManager 
 return ( ForgeRegistry < V > ) this . registries . get ( key ) ; 
 } 
 
 - public < V extends IForgeRegistryEntry < V > > IForgeRegistry < V > getRegistry ( Class < V > cls ) 
 + public < V extends IForgeRegistryEntry < V > > IForgeRegistry < V > getRegistry ( Class < ? super V > cls ) 
 { 
 return getRegistry ( superTypes . get ( cls ) ) ; 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java 
 index eedcb7c . . c0673e1 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java 
 + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java 
 @ @ - 53 , 8 + 53 , 8 @ @ public class ForgeRegistries 
 public static final IForgeRegistry < PotionType > POTION _ TYPES = RegistryManager . ACTIVE . getRegistry ( PotionType . class ) ; 
 public static final IForgeRegistry < Enchantment > ENCHANTMENTS = RegistryManager . ACTIVE . getRegistry ( Enchantment . class ) ; 
 public static final IForgeRegistry < VillagerProfession > VILLAGER _ PROFESSIONS = RegistryManager . ACTIVE . getRegistry ( VillagerProfession . class ) ; 
 - public static final IForgeRegistry < EntityType < ? > > ENTITIES = RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; 
 - public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; 
 + public static final IForgeRegistry < EntityType < ? > > ENTITIES = ( IForgeRegistry ) RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; / / Untyped casys needed to fix javac issues . 
 + public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = ( IForgeRegistry ) RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; 
 public static final IForgeRegistry < ModDimension > MOD _ DIMENSIONS = RegistryManager . ACTIVE . getRegistry ( ModDimension . class ) ; 
 / * * 
 * This function is just to make sure static inializers in other classes have run and setup their registries before we query them .
