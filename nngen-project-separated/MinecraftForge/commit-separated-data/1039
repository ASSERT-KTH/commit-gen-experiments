BLEU SCORE: 0.011246923682765546

TEST MSG: Added tab completion
GENERATED MSG: Hook texture pack changes and loads so we can register override textures

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> index 8e8e8d7 . . 9ea2057 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> + + + b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> @ @ - 2 , 12 + 2 , 16 @ @ package net . minecraftforge . server . command ; <nl> <nl> import java . lang . ref . WeakReference ; <nl> import java . text . DecimalFormat ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> <nl> import net . minecraft . command . CommandBase ; <nl> import net . minecraft . command . CommandException ; <nl> import net . minecraft . command . ICommandSender ; <nl> import net . minecraft . command . WrongUsageException ; <nl> import net . minecraft . server . MinecraftServer ; <nl> + import net . minecraft . util . BlockPos ; <nl> import net . minecraft . util . ChatComponentTranslation ; <nl> import net . minecraftforge . common . DimensionManager ; <nl> import net . minecraftforge . server . ForgeTimeTracker ; <nl> @ @ - 68 , 6 + 72 , 31 @ @ public class ForgeCommand extends CommandBase { <nl> } <nl> } <nl> <nl> + @ Override <nl> + public List addTabCompletionOptions ( ICommandSender sender , String [ ] args , BlockPos pos ) <nl> + { <nl> + if ( args . length = = 1 ) <nl> + { <nl> + return Arrays . asList ( " tps " , " track " ) ; <nl> + } <nl> + else if ( args . length = = 2 ) <nl> + { <nl> + if ( " tps " . equals ( args [ 0 ] ) ) { <nl> + ArrayList list = new ArrayList ( ) ; <nl> + for ( Integer l : getServer ( ) . worldTickTimes . keySet ( ) ) <nl> + { <nl> + list . add ( l . toString ( ) ) ; <nl> + } <nl> + return list ; <nl> + } <nl> + else if ( " track " . equals ( args [ 0 ] ) ) <nl> + { <nl> + return Arrays . asList ( " te " ) ; <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> private void handleTracking ( ICommandSender sender , String [ ] args ) throws CommandException <nl> { <nl> if ( args . length ! = 3 )
NEAREST DIFF (one line): diff - - git a / fml / client / cpw / mods / fml / client / FMLClientHandler . java b / fml / client / cpw / mods / fml / client / FMLClientHandler . java <nl> index b79fa7c . . 73380d4 100644 <nl> - - - a / fml / client / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / client / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import java . io . UnsupportedEncodingException ; <nl> import java . util . ArrayList ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . Random ; <nl> import java . util . logging . Logger ; <nl> @ @ - 42 , 6 + 43 , 7 @ @ import net . minecraft . src . IInventory ; <nl> import net . minecraft . src . Item ; <nl> import net . minecraft . src . ItemStack ; <nl> import net . minecraft . src . KeyBinding ; <nl> + import net . minecraft . src . ModTextureStatic ; <nl> import net . minecraft . src . NetClientHandler ; <nl> import net . minecraft . src . NetworkManager ; <nl> import net . minecraft . src . Packet1Login ; <nl> @ @ - 51 , 6 + 53 , 7 @ @ import net . minecraft . src . RenderBlocks ; <nl> import net . minecraft . src . RenderEngine ; <nl> import net . minecraft . src . RenderPlayer ; <nl> import net . minecraft . src . StringTranslate ; <nl> + import net . minecraft . src . TexturePackBase ; <nl> import net . minecraft . src . World ; <nl> import net . minecraft . src . WorldType ; <nl> import argo . jdom . JdomParser ; <nl> @ @ - 104 , 6 + 107 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private int nextRenderId = 30 ; <nl> <nl> + private TexturePackBase fallbackTexturePack ; <nl> + <nl> / / Cached lookups <nl> private static HashMap < String , ArrayList < OverrideInfo > > overrideInfo = new HashMap < String , ArrayList < OverrideInfo > > ( ) ; <nl> private static HashMap < Integer , BlockRenderInfo > blockModelIds = new HashMap < Integer , BlockRenderInfo > ( ) ; <nl> @ @ - 160 , 6 + 165 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> Loader . instance ( ) . initializeMods ( ) ; <nl> client . field _ 6304 _ y . loadModKeySettings ( harvestKeyBindings ( ) ) ; <nl> + onTexturePackChange ( fallbackTexturePack ) ; <nl> } <nl> <nl> public KeyBinding [ ] harvestKeyBindings ( ) { <nl> @ @ - 676 , 6 + 682 , 23 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> return false ; <nl> } <nl> <nl> + public void registerTextureOverrides ( RenderEngine renderer ) { <nl> + for ( String fileToOverride : overrideInfo . keySet ( ) ) { <nl> + for ( OverrideInfo override : overrideInfo . get ( fileToOverride ) ) { <nl> + try <nl> + { <nl> + BufferedImage image = loadImageFromTexturePack ( renderer , override . override ) ; <nl> + ModTextureStatic mts = new ModTextureStatic ( override . index , 1 , override . texture , image ) ; <nl> + renderer . func _ 1066 _ a ( mts ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLCommonHandler . instance ( ) . getFMLLogger ( ) . throwing ( " FMLClientHandler " , " registerTextureOverrides " , e ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> public String getObjectName ( Object instance ) { <nl> String objectName ; <nl> if ( instance instanceof Item ) { <nl> @ @ - 703 , 4 + 726 , 25 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> meta . description = root . func _ 27213 _ a ( " description " ) ; <nl> return meta ; <nl> } <nl> + <nl> + / * * <nl> + * @ param p _ 6531 _ 1 _ <nl> + * / <nl> + public void onTexturePackChange ( TexturePackBase texturePack ) <nl> + { <nl> + FMLClientHandler . instance ( ) . registerTextureOverrides ( client . field _ 6315 _ n ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param field _ 6539 _ c <nl> + * / <nl> + public void onTexturePackFallback ( TexturePackBase fallback ) <nl> + { <nl> + if ( client = = null ) { <nl> + / / We ' re far too early - let ' s wait <nl> + this . fallbackTexturePack = fallback ; <nl> + } else { <nl> + onTexturePackChange ( fallback ) ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 index 8e8e8d7 . . 9ea2057 100644 
 - - - a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 + + + b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 @ @ - 2 , 12 + 2 , 16 @ @ package net . minecraftforge . server . command ; 
 
 import java . lang . ref . WeakReference ; 
 import java . text . DecimalFormat ; 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 
 import net . minecraft . command . CommandBase ; 
 import net . minecraft . command . CommandException ; 
 import net . minecraft . command . ICommandSender ; 
 import net . minecraft . command . WrongUsageException ; 
 import net . minecraft . server . MinecraftServer ; 
 + import net . minecraft . util . BlockPos ; 
 import net . minecraft . util . ChatComponentTranslation ; 
 import net . minecraftforge . common . DimensionManager ; 
 import net . minecraftforge . server . ForgeTimeTracker ; 
 @ @ - 68 , 6 + 72 , 31 @ @ public class ForgeCommand extends CommandBase { 
 } 
 } 
 
 + @ Override 
 + public List addTabCompletionOptions ( ICommandSender sender , String [ ] args , BlockPos pos ) 
 + { 
 + if ( args . length = = 1 ) 
 + { 
 + return Arrays . asList ( " tps " , " track " ) ; 
 + } 
 + else if ( args . length = = 2 ) 
 + { 
 + if ( " tps " . equals ( args [ 0 ] ) ) { 
 + ArrayList list = new ArrayList ( ) ; 
 + for ( Integer l : getServer ( ) . worldTickTimes . keySet ( ) ) 
 + { 
 + list . add ( l . toString ( ) ) ; 
 + } 
 + return list ; 
 + } 
 + else if ( " track " . equals ( args [ 0 ] ) ) 
 + { 
 + return Arrays . asList ( " te " ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 private void handleTracking ( ICommandSender sender , String [ ] args ) throws CommandException 
 { 
 if ( args . length ! = 3 )

NEAREST DIFF:
diff - - git a / fml / client / cpw / mods / fml / client / FMLClientHandler . java b / fml / client / cpw / mods / fml / client / FMLClientHandler . java 
 index b79fa7c . . 73380d4 100644 
 - - - a / fml / client / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / client / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import java . io . UnsupportedEncodingException ; 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 + import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . Random ; 
 import java . util . logging . Logger ; 
 @ @ - 42 , 6 + 43 , 7 @ @ import net . minecraft . src . IInventory ; 
 import net . minecraft . src . Item ; 
 import net . minecraft . src . ItemStack ; 
 import net . minecraft . src . KeyBinding ; 
 + import net . minecraft . src . ModTextureStatic ; 
 import net . minecraft . src . NetClientHandler ; 
 import net . minecraft . src . NetworkManager ; 
 import net . minecraft . src . Packet1Login ; 
 @ @ - 51 , 6 + 53 , 7 @ @ import net . minecraft . src . RenderBlocks ; 
 import net . minecraft . src . RenderEngine ; 
 import net . minecraft . src . RenderPlayer ; 
 import net . minecraft . src . StringTranslate ; 
 + import net . minecraft . src . TexturePackBase ; 
 import net . minecraft . src . World ; 
 import net . minecraft . src . WorldType ; 
 import argo . jdom . JdomParser ; 
 @ @ - 104 , 6 + 107 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private int nextRenderId = 30 ; 
 
 + private TexturePackBase fallbackTexturePack ; 
 + 
 / / Cached lookups 
 private static HashMap < String , ArrayList < OverrideInfo > > overrideInfo = new HashMap < String , ArrayList < OverrideInfo > > ( ) ; 
 private static HashMap < Integer , BlockRenderInfo > blockModelIds = new HashMap < Integer , BlockRenderInfo > ( ) ; 
 @ @ - 160 , 6 + 165 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 Loader . instance ( ) . initializeMods ( ) ; 
 client . field _ 6304 _ y . loadModKeySettings ( harvestKeyBindings ( ) ) ; 
 + onTexturePackChange ( fallbackTexturePack ) ; 
 } 
 
 public KeyBinding [ ] harvestKeyBindings ( ) { 
 @ @ - 676 , 6 + 682 , 23 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 return false ; 
 } 
 
 + public void registerTextureOverrides ( RenderEngine renderer ) { 
 + for ( String fileToOverride : overrideInfo . keySet ( ) ) { 
 + for ( OverrideInfo override : overrideInfo . get ( fileToOverride ) ) { 
 + try 
 + { 
 + BufferedImage image = loadImageFromTexturePack ( renderer , override . override ) ; 
 + ModTextureStatic mts = new ModTextureStatic ( override . index , 1 , override . texture , image ) ; 
 + renderer . func _ 1066 _ a ( mts ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLCommonHandler . instance ( ) . getFMLLogger ( ) . throwing ( " FMLClientHandler " , " registerTextureOverrides " , e ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 public String getObjectName ( Object instance ) { 
 String objectName ; 
 if ( instance instanceof Item ) { 
 @ @ - 703 , 4 + 726 , 25 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 meta . description = root . func _ 27213 _ a ( " description " ) ; 
 return meta ; 
 } 
 + 
 + / * * 
 + * @ param p _ 6531 _ 1 _ 
 + * / 
 + public void onTexturePackChange ( TexturePackBase texturePack ) 
 + { 
 + FMLClientHandler . instance ( ) . registerTextureOverrides ( client . field _ 6315 _ n ) ; 
 + } 
 + 
 + / * * 
 + * @ param field _ 6539 _ c 
 + * / 
 + public void onTexturePackFallback ( TexturePackBase fallback ) 
 + { 
 + if ( client = = null ) { 
 + / / We ' re far too early - let ' s wait 
 + this . fallbackTexturePack = fallback ; 
 + } else { 
 + onTexturePackChange ( fallback ) ; 
 + } 
 + } 
 }
