BLEU SCORE: 0.02286956778061902

TEST MSG: Made both exceptions occuring during item model loading print in the log ; closes # 2696 .
GENERATED MSG: Fix dependency resolution for models with custom data / textures .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 69964a1 . . dc5326b 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 295 , 7 + 295 , 7 @ @ public final class ModelLoader extends ModelBakery <nl> { <nl> model = ModelLoaderRegistry . getModel ( file ) ; <nl> } <nl> - catch ( Exception e ) <nl> + catch ( Exception normalException ) <nl> { <nl> / / try blockstate json if the item model is missing <nl> FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; <nl> @ @ - 303 , 9 + 303 , 9 @ @ public final class ModelLoader extends ModelBakery <nl> { <nl> model = ModelLoaderRegistry . getModel ( memory ) ; <nl> } <nl> - catch ( Exception ex ) <nl> + catch ( Exception blockstateException ) <nl> { <nl> - exception = new Exception ( " Could not load item model either from the normal location " + file + " or from the blockstate " , ex ) ; <nl> + exception = new ItemLoadingException ( " Could not load item model either from the normal location " + file + " or from the blockstate " , normalException , blockstateException ) ; <nl> } <nl> } <nl> stateModels . put ( memory , model ) ; <nl> @ @ - 571 , 7 + 571 , 7 @ @ public final class ModelLoader extends ModelBakery <nl> } <nl> } <nl> return super . getQuads ( state , side , rand ) ; <nl> - } ; <nl> + } <nl> <nl> @ Override <nl> public ItemOverrideList getOverrides ( ) <nl> @ @ - 895 , 6 + 895 , 19 @ @ public final class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + private static class ItemLoadingException extends ModelLoaderRegistry . LoaderException <nl> + { <nl> + private final Exception normalException ; <nl> + private final Exception blockstateException ; <nl> + <nl> + public ItemLoadingException ( String message , Exception normalException , Exception blockstateException ) <nl> + { <nl> + super ( message ) ; <nl> + this . normalException = normalException ; <nl> + this . blockstateException = blockstateException ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Internal , do not use . <nl> * / <nl> @ @ - 967 , 7 + 980 , 16 @ @ public final class ModelLoader extends ModelBakery <nl> } <nl> } <nl> } <nl> - FMLLog . getLogger ( ) . error ( errorMsg , entry . getValue ( ) ) ; <nl> + if ( entry . getValue ( ) instanceof ItemLoadingException ) <nl> + { <nl> + ItemLoadingException ex = ( ItemLoadingException ) entry . getValue ( ) ; <nl> + FMLLog . getLogger ( ) . error ( errorMsg + " , normal location exception : " , ex . normalException ) ; <nl> + FMLLog . getLogger ( ) . error ( errorMsg + " , blockstate location exception : " , ex . blockstateException ) ; <nl> + } <nl> + else <nl> + { <nl> + FMLLog . getLogger ( ) . error ( errorMsg , entry . getValue ( ) ) ; <nl> + } <nl> ResourceLocation blockstateLocation = new ResourceLocation ( location . getResourceDomain ( ) , location . getResourcePath ( ) ) ; <nl> if ( loadingExceptions . containsKey ( blockstateLocation ) & & ! printedBlockStateErrors . contains ( blockstateLocation ) ) <nl> {
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index f0b4850 . . b4c8dc5 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery <nl> try <nl> { <nl> IModel model = ModelLoaderRegistry . getModel ( location ) ; <nl> - for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> - { <nl> - if ( dep instanceof ModelResourceLocation ) <nl> - { <nl> - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> - } <nl> - else <nl> - { <nl> - getModel ( dep ) ; <nl> - } <nl> - } <nl> - textures . addAll ( model . getTextures ( ) ) ; <nl> + resolveDependencies ( model ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + private void resolveDependencies ( IModel model ) throws IOException <nl> + { <nl> + for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> + { <nl> + if ( dep instanceof ModelResourceLocation ) <nl> + { <nl> + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> + } <nl> + else <nl> + { <nl> + getModel ( dep ) ; <nl> + } <nl> + } <nl> + textures . addAll ( model . getTextures ( ) ) ; <nl> + } <nl> + <nl> private class VanillaModelWrapper implements IRetexturableModel <nl> { <nl> private final ResourceLocation location ; <nl> @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery <nl> if ( v instanceof ISmartVariant ) <nl> { <nl> model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; <nl> + try <nl> + { <nl> + resolveDependencies ( model ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; <nl> + } <nl> textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 69964a1 . . dc5326b 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 295 , 7 + 295 , 7 @ @ public final class ModelLoader extends ModelBakery 
 { 
 model = ModelLoaderRegistry . getModel ( file ) ; 
 } 
 - catch ( Exception e ) 
 + catch ( Exception normalException ) 
 { 
 / / try blockstate json if the item model is missing 
 FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; 
 @ @ - 303 , 9 + 303 , 9 @ @ public final class ModelLoader extends ModelBakery 
 { 
 model = ModelLoaderRegistry . getModel ( memory ) ; 
 } 
 - catch ( Exception ex ) 
 + catch ( Exception blockstateException ) 
 { 
 - exception = new Exception ( " Could not load item model either from the normal location " + file + " or from the blockstate " , ex ) ; 
 + exception = new ItemLoadingException ( " Could not load item model either from the normal location " + file + " or from the blockstate " , normalException , blockstateException ) ; 
 } 
 } 
 stateModels . put ( memory , model ) ; 
 @ @ - 571 , 7 + 571 , 7 @ @ public final class ModelLoader extends ModelBakery 
 } 
 } 
 return super . getQuads ( state , side , rand ) ; 
 - } ; 
 + } 
 
 @ Override 
 public ItemOverrideList getOverrides ( ) 
 @ @ - 895 , 6 + 895 , 19 @ @ public final class ModelLoader extends ModelBakery 
 } 
 } 
 
 + private static class ItemLoadingException extends ModelLoaderRegistry . LoaderException 
 + { 
 + private final Exception normalException ; 
 + private final Exception blockstateException ; 
 + 
 + public ItemLoadingException ( String message , Exception normalException , Exception blockstateException ) 
 + { 
 + super ( message ) ; 
 + this . normalException = normalException ; 
 + this . blockstateException = blockstateException ; 
 + } 
 + } 
 + 
 / * * 
 * Internal , do not use . 
 * / 
 @ @ - 967 , 7 + 980 , 16 @ @ public final class ModelLoader extends ModelBakery 
 } 
 } 
 } 
 - FMLLog . getLogger ( ) . error ( errorMsg , entry . getValue ( ) ) ; 
 + if ( entry . getValue ( ) instanceof ItemLoadingException ) 
 + { 
 + ItemLoadingException ex = ( ItemLoadingException ) entry . getValue ( ) ; 
 + FMLLog . getLogger ( ) . error ( errorMsg + " , normal location exception : " , ex . normalException ) ; 
 + FMLLog . getLogger ( ) . error ( errorMsg + " , blockstate location exception : " , ex . blockstateException ) ; 
 + } 
 + else 
 + { 
 + FMLLog . getLogger ( ) . error ( errorMsg , entry . getValue ( ) ) ; 
 + } 
 ResourceLocation blockstateLocation = new ResourceLocation ( location . getResourceDomain ( ) , location . getResourcePath ( ) ) ; 
 if ( loadingExceptions . containsKey ( blockstateLocation ) & & ! printedBlockStateErrors . contains ( blockstateLocation ) ) 
 {

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index f0b4850 . . b4c8dc5 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery 
 try 
 { 
 IModel model = ModelLoaderRegistry . getModel ( location ) ; 
 - for ( ResourceLocation dep : model . getDependencies ( ) ) 
 - { 
 - if ( dep instanceof ModelResourceLocation ) 
 - { 
 - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 - } 
 - else 
 - { 
 - getModel ( dep ) ; 
 - } 
 - } 
 - textures . addAll ( model . getTextures ( ) ) ; 
 + resolveDependencies ( model ) ; 
 } 
 finally 
 { 
 @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + private void resolveDependencies ( IModel model ) throws IOException 
 + { 
 + for ( ResourceLocation dep : model . getDependencies ( ) ) 
 + { 
 + if ( dep instanceof ModelResourceLocation ) 
 + { 
 + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 + } 
 + else 
 + { 
 + getModel ( dep ) ; 
 + } 
 + } 
 + textures . addAll ( model . getTextures ( ) ) ; 
 + } 
 + 
 private class VanillaModelWrapper implements IRetexturableModel 
 { 
 private final ResourceLocation location ; 
 @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery 
 if ( v instanceof ISmartVariant ) 
 { 
 model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; 
 + try 
 + { 
 + resolveDependencies ( model ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; 
 + } 
 textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . 
 } 

