BLEU SCORE: 0.06220117374063391

TEST MSG: Update according to suggestions
GENERATED MSG: Expose IItemHandler on vanilla entities

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> index 4c463a5 . . 5c49734 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> @ @ - 285 , 7 + 285 , 7 @ @ <nl> } <nl> <nl> this . func _ 184602 _ cy ( ) ; <nl> - @ @ - 2626 , 4 + 2707 , 34 @ @ <nl> + @ @ - 2626 , 4 + 2707 , 27 @ @ <nl> { <nl> return true ; <nl> } <nl> @ @ - 300 , 16 + 300 , 9 @ @ <nl> + { <nl> + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) <nl> + { <nl> - + if ( facing = = net . minecraft . util . EnumFacing . UP ) <nl> - + { <nl> - + return ( T ) armorHandler ; <nl> - + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) <nl> - + { <nl> - + return ( T ) handHandler ; <nl> - + } else <nl> - + { <nl> - + return ( T ) joinedHandler ; <nl> - + } <nl> + + if ( facing = = null ) return ( T ) joinedHandler ; <nl> + + else if ( facing . func _ 176740 _ k ( ) . func _ 176720 _ b ( ) ) return ( T ) handHandler ; <nl> + + else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) return ( T ) armorHandler ; <nl> + } <nl> + return super . getCapability ( capability , facing ) ; <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch <nl> index 4c14f0c . . 5f4ea94 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch <nl> @ @ - 16 , 7 + 16 , 7 @ @ <nl> } <nl> <nl> this . field _ 70138 _ W = 1 . 0F ; <nl> - @ @ - 1793 , 4 + 1795 , 25 @ @ <nl> + @ @ - 1793 , 4 + 1795 , 20 @ @ <nl> this . field _ 188477 _ b = p _ i46589 _ 2 _ ; <nl> } <nl> } <nl> @ @ - 27 , 18 + 27 , 13 @ @ <nl> + @ Override <nl> + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) <nl> + { <nl> - + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY <nl> - + & & itemHandler ! = null ) <nl> - + { <nl> - + return ( T ) itemHandler ; <nl> - + } <nl> + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) return ( T ) itemHandler ; <nl> + return super . getCapability ( capability , facing ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) <nl> + { <nl> - + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY & & itemHandler ! = null <nl> - + | | super . hasCapability ( capability , facing ) ; <nl> + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; <nl> + } <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> index ffdccb2 . . f0c090d 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> @ @ - 401 , 7 + 401 , 7 @ @ <nl> <nl> if ( this . func _ 70608 _ bn ( ) ) <nl> { <nl> - @ @ - 2340 , 6 + 2447 , 169 @ @ <nl> + @ @ - 2340 , 6 + 2447 , 160 @ @ <nl> return ( float ) this . func _ 110148 _ a ( SharedMonsterAttributes . field _ 188792 _ h ) . func _ 111126 _ e ( ) ; <nl> } <nl> <nl> @ @ - 534 , 8 + 534 , 9 @ @ <nl> + public java . util . Collection < ITextComponent > getSuffixes ( ) { return this . suffixes ; } <nl> + <nl> + private final net . minecraftforge . items . IItemHandler playerMainHandler = new net . minecraftforge . items . wrapper . PlayerMainInvWrapper ( field _ 71071 _ by ) ; <nl> - + private final net . minecraftforge . items . IItemHandler playerArmorHandler = new net . minecraftforge . items . wrapper . PlayerArmorInvWrapper ( field _ 71071 _ by ) ; <nl> - + private final net . minecraftforge . items . IItemHandler playerOffhandHandler = new net . minecraftforge . items . wrapper . PlayerOffhandInvWrapper ( field _ 71071 _ by ) ; <nl> + + private final net . minecraftforge . items . IItemHandler playerEquipmentHandler = new net . minecraftforge . items . wrapper . CombinedInvWrapper ( <nl> + + new net . minecraftforge . items . wrapper . PlayerArmorInvWrapper ( field _ 71071 _ by ) , <nl> + + new net . minecraftforge . items . wrapper . PlayerOffhandInvWrapper ( field _ 71071 _ by ) ) ; <nl> + private final net . minecraftforge . items . IItemHandler playerJoinedHandler = new net . minecraftforge . items . wrapper . PlayerInvWrapper ( field _ 71071 _ by ) ; <nl> + <nl> + @ Override <nl> @ @ - 543 , 19 + 544 , 9 @ @ <nl> + { <nl> + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) <nl> + { <nl> - + if ( facing = = net . minecraft . util . EnumFacing . UP ) <nl> - + { <nl> - + return ( T ) playerArmorHandler ; <nl> - + } else if ( facing = = net . minecraft . util . EnumFacing . DOWN ) <nl> - + { <nl> - + return ( T ) playerMainHandler ; <nl> - + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) <nl> - + { <nl> - + return ( T ) playerOffhandHandler ; <nl> - + } else <nl> - + { <nl> - + return ( T ) playerJoinedHandler ; <nl> - + } <nl> + + if ( facing = = null ) return ( T ) playerJoinedHandler ; <nl> + + else if ( facing . func _ 176740 _ k ( ) . func _ 176720 _ b ( ) ) return ( T ) playerMainHandler ; <nl> + + else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) return ( T ) playerEquipmentHandler ; <nl> + } <nl> + return super . getCapability ( capability , facing ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> index f8c70dd . . 063bec7 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> @ @ - 4 , 29 + 4 , 14 @ @ import net . minecraft . entity . player . InventoryPlayer ; <nl> import net . minecraft . inventory . EntityEquipmentSlot ; <nl> import net . minecraft . item . ItemStack ; <nl> <nl> - public class PlayerArmorInvWrapper extends InvWrapper <nl> + public class PlayerArmorInvWrapper extends RangedWrapper <nl> { <nl> public final InventoryPlayer inventoryPlayer ; <nl> - private final int offset ; <nl> <nl> public PlayerArmorInvWrapper ( InventoryPlayer inv ) <nl> { <nl> - super ( inv ) ; <nl> - <nl> + super ( new InvWrapper ( inv ) , inv . mainInventory . length , inv . mainInventory . length + inv . armorInventory . length ) ; <nl> inventoryPlayer = inv ; <nl> - offset = inventoryPlayer . mainInventory . length ; <nl> - } <nl> - <nl> - @ Override <nl> - public int getSlots ( ) <nl> - { <nl> - return inventoryPlayer . armorInventory . length ; <nl> - } <nl> - <nl> - @ Override <nl> - public ItemStack getStackInSlot ( int slot ) <nl> - { <nl> - return super . getStackInSlot ( slot + offset ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 44 , 20 + 29 , 8 @ @ public class PlayerArmorInvWrapper extends InvWrapper <nl> / / check if it ' s valid for the armor slot <nl> if ( slot < 4 & & stack ! = null & & stack . getItem ( ) . isValidArmor ( stack , equ , inventoryPlayer . player ) ) <nl> { <nl> - return super . insertItem ( slot + offset , stack , simulate ) ; <nl> + return super . insertItem ( slot , stack , simulate ) ; <nl> } <nl> return stack ; <nl> } <nl> - <nl> - @ Override <nl> - public void setStackInSlot ( int slot , ItemStack stack ) <nl> - { <nl> - super . setStackInSlot ( slot + offset , stack ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public ItemStack extractItem ( int slot , int amount , boolean simulate ) <nl> - { <nl> - return super . extractItem ( slot + offset , amount , simulate ) ; <nl> - } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java <nl> index 2893486 . . 421f654 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java <nl> @ @ - 8 , 54 + 8 , 19 @ @ import net . minecraft . item . ItemStack ; <nl> * Exposes the player inventory WITHOUT the armor inventory as IItemHandler . <nl> * Also takes core of inserting / extracting having the same logic as picking up items . <nl> * / <nl> - public class PlayerMainInvWrapper extends InvWrapper <nl> + public class PlayerMainInvWrapper extends RangedWrapper <nl> { <nl> public final InventoryPlayer inventoryPlayer ; <nl> <nl> public PlayerMainInvWrapper ( InventoryPlayer inv ) <nl> { <nl> - super ( inv ) ; <nl> - <nl> + super ( new InvWrapper ( inv ) , 0 , inv . mainInventory . length ) ; <nl> inventoryPlayer = inv ; <nl> } <nl> <nl> @ Override <nl> - public int getSlots ( ) <nl> - { <nl> - return inventoryPlayer . mainInventory . length ; <nl> - } <nl> - <nl> - @ Override <nl> - public void setStackInSlot ( int slot , ItemStack stack ) <nl> - { <nl> - / / prevent setting of armor and offhand <nl> - if ( slot > getSlots ( ) ) <nl> - { <nl> - return ; <nl> - } <nl> - super . setStackInSlot ( slot , stack ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public ItemStack getStackInSlot ( int slot ) <nl> - { <nl> - / / prevent getting of armor and offhand <nl> - if ( slot > getSlots ( ) ) <nl> - { <nl> - return null ; <nl> - } <nl> - return super . getStackInSlot ( slot ) ; <nl> - } <nl> - <nl> - @ Override <nl> public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) <nl> { <nl> - / / prevent inserting into armor and offhand <nl> - if ( slot > getSlots ( ) ) <nl> - { <nl> - return stack ; <nl> - } <nl> - <nl> ItemStack rest = super . insertItem ( slot , stack , simulate ) ; <nl> if ( rest = = null | | rest . stackSize ! = stack . stackSize ) <nl> { <nl> @ @ - 74 , 15 + 39 , 4 @ @ public class PlayerMainInvWrapper extends InvWrapper <nl> } <nl> return rest ; <nl> } <nl> - <nl> - @ Override <nl> - public ItemStack extractItem ( int slot , int amount , boolean simulate ) <nl> - { <nl> - / / prevent extraction from armor and offhand <nl> - if ( slot > getSlots ( ) ) <nl> - { <nl> - return null ; <nl> - } <nl> - return super . extractItem ( slot , amount , simulate ) ; <nl> - } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java <nl> index 5272a3e . . 0d3af4e 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java <nl> @ @ - 3 , 47 + 3 , 11 @ @ package net . minecraftforge . items . wrapper ; <nl> import net . minecraft . entity . player . InventoryPlayer ; <nl> import net . minecraft . item . ItemStack ; <nl> <nl> - public class PlayerOffhandInvWrapper extends InvWrapper <nl> + public class PlayerOffhandInvWrapper extends RangedWrapper <nl> { <nl> - public final InventoryPlayer inventoryPlayer ; <nl> - private final int offset ; <nl> - <nl> public PlayerOffhandInvWrapper ( InventoryPlayer inv ) <nl> { <nl> - super ( inv ) ; <nl> - <nl> - inventoryPlayer = inv ; <nl> - offset = inventoryPlayer . mainInventory . length + inventoryPlayer . armorInventory . length ; <nl> - } <nl> - <nl> - @ Override <nl> - public int getSlots ( ) <nl> - { <nl> - return inventoryPlayer . offHandInventory . length ; <nl> - } <nl> - <nl> - @ Override <nl> - public ItemStack getStackInSlot ( int slot ) <nl> - { <nl> - return super . getStackInSlot ( slot + offset ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) <nl> - { <nl> - return super . insertItem ( slot + offset , stack , simulate ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void setStackInSlot ( int slot , ItemStack stack ) <nl> - { <nl> - super . setStackInSlot ( slot + offset , stack ) ; <nl> + super ( new InvWrapper ( inv ) , inv . mainInventory . length + inv . armorInventory . length , <nl> + inv . mainInventory . length + inv . armorInventory . length + inv . offHandInventory . length ) ; <nl> } <nl> - <nl> - @ Override <nl> - public ItemStack extractItem ( int slot , int amount , boolean simulate ) <nl> - { <nl> - return super . extractItem ( slot + offset , amount , simulate ) ; <nl> - } <nl> - <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java <nl> new file mode 100644 <nl> index 0000000 . . 00b218e <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java <nl> @ @ - 0 , 0 + 1 , 78 @ @ <nl> + package net . minecraftforge . items . wrapper ; <nl> + <nl> + import com . google . common . base . Preconditions ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . items . IItemHandlerModifiable ; <nl> + <nl> + / * * <nl> + * A wrapper that composes another IItemHandlerModifiable , exposing only a range of the composed slots . <nl> + * Shifting of slot indices is handled automatically for you . <nl> + * / <nl> + public class RangedWrapper implements IItemHandlerModifiable { <nl> + <nl> + private final IItemHandlerModifiable compose ; <nl> + private final int minSlot ; <nl> + private final int maxSlot ; <nl> + <nl> + public RangedWrapper ( IItemHandlerModifiable compose , int minSlot , int maxSlotExclusive ) <nl> + { <nl> + Preconditions . checkArgument ( maxSlotExclusive > minSlot , " Max slot must be greater than min slot " ) ; <nl> + this . compose = compose ; <nl> + this . minSlot = minSlot ; <nl> + this . maxSlot = maxSlotExclusive ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getSlots ( ) <nl> + { <nl> + return maxSlot - minSlot ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack getStackInSlot ( int slot ) <nl> + { <nl> + if ( checkSlot ( slot ) ) <nl> + { <nl> + return compose . getStackInSlot ( slot + minSlot ) ; <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) <nl> + { <nl> + if ( checkSlot ( slot ) ) <nl> + { <nl> + return compose . insertItem ( slot + minSlot , stack , simulate ) ; <nl> + } <nl> + <nl> + return stack ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack extractItem ( int slot , int amount , boolean simulate ) <nl> + { <nl> + if ( checkSlot ( slot ) ) <nl> + { <nl> + return compose . extractItem ( slot + minSlot , amount , simulate ) ; <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void setStackInSlot ( int slot , ItemStack stack ) <nl> + { <nl> + if ( checkSlot ( slot ) ) <nl> + { <nl> + compose . setStackInSlot ( slot + minSlot , stack ) ; <nl> + } <nl> + } <nl> + <nl> + private boolean checkSlot ( int localSlot ) <nl> + { <nl> + return localSlot + minSlot < maxSlot ; <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> index 2ddf22c . . 4c463a5 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch <nl> @ @ - 285 , 3 + 285 , 38 @ @ <nl> } <nl> <nl> this . func _ 184602 _ cy ( ) ; <nl> + @ @ - 2626 , 4 + 2707 , 34 @ @ <nl> + { <nl> + return true ; <nl> + } <nl> + + <nl> + + / / FORGE <nl> + + private final net . minecraftforge . items . IItemHandlerModifiable handHandler = new net . minecraftforge . items . ItemStackHandler ( field _ 184630 _ bs ) ; <nl> + + private final net . minecraftforge . items . IItemHandlerModifiable armorHandler = new net . minecraftforge . items . ItemStackHandler ( field _ 184631 _ bt ) ; <nl> + + private final net . minecraftforge . items . IItemHandler joinedHandler = new net . minecraftforge . items . wrapper . CombinedInvWrapper ( armorHandler , handHandler ) ; <nl> + + <nl> + + @ Override <nl> + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) <nl> + + { <nl> + + if ( facing = = net . minecraft . util . EnumFacing . UP ) <nl> + + { <nl> + + return ( T ) armorHandler ; <nl> + + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) <nl> + + { <nl> + + return ( T ) handHandler ; <nl> + + } else <nl> + + { <nl> + + return ( T ) joinedHandler ; <nl> + + } <nl> + + } <nl> + + return super . getCapability ( capability , facing ) ; <nl> + + } <nl> + + <nl> + + @ Override <nl> + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; <nl> + + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch <nl> index fabe725 . . 4c14f0c 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch <nl> @ @ - 1 , 6 + 1 , 14 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / entity / passive / EntityHorse . java <nl> + + + . . / src - work / minecraft / net / minecraft / entity / passive / EntityHorse . java <nl> - @ @ - 1200 , 6 + 1200 , 7 @ @ <nl> + @ @ - 433 , 6 + 433 , 7 @ @ <nl> + <nl> + this . field _ 110296 _ bG . func _ 110134 _ a ( this ) ; <nl> + this . func _ 110232 _ cE ( ) ; <nl> + + this . itemHandler = new net . minecraftforge . items . wrapper . InvWrapper ( this . field _ 110296 _ bG ) ; <nl> + } <nl> + <nl> + private void func _ 110232 _ cE ( ) <nl> + @ @ - 1200 , 6 + 1201 , 7 @ @ <nl> } <nl> <nl> this . field _ 110277 _ bt = 0 . 0F ; <nl> @ @ - 8 , 3 + 16 , 29 @ @ <nl> } <nl> <nl> this . field _ 70138 _ W = 1 . 0F ; <nl> + @ @ - 1793 , 4 + 1795 , 25 @ @ <nl> + this . field _ 188477 _ b = p _ i46589 _ 2 _ ; <nl> + } <nl> + } <nl> + + <nl> + + / / FORGE <nl> + + private net . minecraftforge . items . IItemHandler itemHandler = null ; / / Initialized by initHorseChest above . <nl> + + <nl> + + @ Override <nl> + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY <nl> + + & & itemHandler ! = null ) <nl> + + { <nl> + + return ( T ) itemHandler ; <nl> + + } <nl> + + return super . getCapability ( capability , facing ) ; <nl> + + } <nl> + + <nl> + + @ Override <nl> + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY & & itemHandler ! = null <nl> + + | | super . hasCapability ( capability , facing ) ; <nl> + + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> index 946c86c . . ffdccb2 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> @ @ - 401 , 7 + 401 , 7 @ @ <nl> <nl> if ( this . func _ 70608 _ bn ( ) ) <nl> { <nl> - @ @ - 2340 , 6 + 2447 , 136 @ @ <nl> + @ @ - 2340 , 6 + 2447 , 169 @ @ <nl> return ( float ) this . func _ 110148 _ a ( SharedMonsterAttributes . field _ 188792 _ h ) . func _ 111126 _ e ( ) ; <nl> } <nl> <nl> @ @ - 533 , 6 + 533 , 39 @ @ <nl> + public java . util . Collection < ITextComponent > getPrefixes ( ) { return this . prefixes ; } <nl> + public java . util . Collection < ITextComponent > getSuffixes ( ) { return this . suffixes ; } <nl> + <nl> + + private final net . minecraftforge . items . IItemHandler playerMainHandler = new net . minecraftforge . items . wrapper . PlayerMainInvWrapper ( field _ 71071 _ by ) ; <nl> + + private final net . minecraftforge . items . IItemHandler playerArmorHandler = new net . minecraftforge . items . wrapper . PlayerArmorInvWrapper ( field _ 71071 _ by ) ; <nl> + + private final net . minecraftforge . items . IItemHandler playerOffhandHandler = new net . minecraftforge . items . wrapper . PlayerOffhandInvWrapper ( field _ 71071 _ by ) ; <nl> + + private final net . minecraftforge . items . IItemHandler playerJoinedHandler = new net . minecraftforge . items . wrapper . PlayerInvWrapper ( field _ 71071 _ by ) ; <nl> + + <nl> + + @ Override <nl> + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) <nl> + + { <nl> + + if ( facing = = net . minecraft . util . EnumFacing . UP ) <nl> + + { <nl> + + return ( T ) playerArmorHandler ; <nl> + + } else if ( facing = = net . minecraft . util . EnumFacing . DOWN ) <nl> + + { <nl> + + return ( T ) playerMainHandler ; <nl> + + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) <nl> + + { <nl> + + return ( T ) playerOffhandHandler ; <nl> + + } else <nl> + + { <nl> + + return ( T ) playerJoinedHandler ; <nl> + + } <nl> + + } <nl> + + return super . getCapability ( capability , facing ) ; <nl> + + } <nl> + + <nl> + + @ Override <nl> + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) <nl> + + { <nl> + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; <nl> + + } <nl> + + <nl> + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + <nl> public static enum EnumChatVisibility <nl> diff - - git a / src / main / java / net / minecraftforge / items / ItemStackHandler . java b / src / main / java / net / minecraftforge / items / ItemStackHandler . java <nl> index 5ffc6bc . . fcd0502 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / ItemStackHandler . java <nl> + + + b / src / main / java / net / minecraftforge / items / ItemStackHandler . java <nl> @ @ - 20 , 6 + 20 , 11 @ @ public class ItemStackHandler implements IItemHandler , IItemHandlerModifiable , I <nl> stacks = new ItemStack [ size ] ; <nl> } <nl> <nl> + public ItemStackHandler ( ItemStack [ ] stacks ) <nl> + { <nl> + this . stacks = stacks ; <nl> + } <nl> + <nl> public void setSize ( int size ) <nl> { <nl> stacks = new ItemStack [ size ] ; <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> index 9da8862 . . f8c70dd 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> @ @ - 7 , 7 + 7 , 7 @ @ import net . minecraft . item . ItemStack ; <nl> public class PlayerArmorInvWrapper extends InvWrapper <nl> { <nl> public final InventoryPlayer inventoryPlayer ; <nl> - public final int offset ; <nl> + private final int offset ; <nl> <nl> public PlayerArmorInvWrapper ( InventoryPlayer inv ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java <nl> index b565470 . . b0c99d5 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java <nl> @ @ - 6 , 6 + 6 , 6 @ @ public class PlayerInvWrapper extends CombinedInvWrapper <nl> { <nl> public PlayerInvWrapper ( InventoryPlayer inv ) <nl> { <nl> - super ( new PlayerMainInvWrapper ( inv ) , new PlayerArmorInvWrapper ( inv ) ) ; <nl> + super ( new PlayerMainInvWrapper ( inv ) , new PlayerArmorInvWrapper ( inv ) , new PlayerOffhandInvWrapper ( inv ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java <nl> index a2d996d . . 2893486 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java <nl> @ @ - 10 , 7 + 10 , 6 @ @ import net . minecraft . item . ItemStack ; <nl> * / <nl> public class PlayerMainInvWrapper extends InvWrapper <nl> { <nl> - <nl> public final InventoryPlayer inventoryPlayer ; <nl> <nl> public PlayerMainInvWrapper ( InventoryPlayer inv ) <nl> @ @ - 29 , 7 + 28 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper <nl> @ Override <nl> public void setStackInSlot ( int slot , ItemStack stack ) <nl> { <nl> - / / prevent setting of armor inventory <nl> + / / prevent setting of armor and offhand <nl> if ( slot > getSlots ( ) ) <nl> { <nl> return ; <nl> @ @ - 40 , 7 + 39 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper <nl> @ Override <nl> public ItemStack getStackInSlot ( int slot ) <nl> { <nl> - / / prevent getting of armor inventory <nl> + / / prevent getting of armor and offhand <nl> if ( slot > getSlots ( ) ) <nl> { <nl> return null ; <nl> @ @ - 51 , 7 + 50 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper <nl> @ Override <nl> public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) <nl> { <nl> - / / prevent inserting into armor inventory <nl> + / / prevent inserting into armor and offhand <nl> if ( slot > getSlots ( ) ) <nl> { <nl> return stack ; <nl> @ @ - 79 , 7 + 78 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper <nl> @ Override <nl> public ItemStack extractItem ( int slot , int amount , boolean simulate ) <nl> { <nl> - / / prevent extraction from armor inventory <nl> + / / prevent extraction from armor and offhand <nl> if ( slot > getSlots ( ) ) <nl> { <nl> return null ; <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java <nl> new file mode 100644 <nl> index 0000000 . . 5272a3e <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + package net . minecraftforge . items . wrapper ; <nl> + <nl> + import net . minecraft . entity . player . InventoryPlayer ; <nl> + import net . minecraft . item . ItemStack ; <nl> + <nl> + public class PlayerOffhandInvWrapper extends InvWrapper <nl> + { <nl> + public final InventoryPlayer inventoryPlayer ; <nl> + private final int offset ; <nl> + <nl> + public PlayerOffhandInvWrapper ( InventoryPlayer inv ) <nl> + { <nl> + super ( inv ) ; <nl> + <nl> + inventoryPlayer = inv ; <nl> + offset = inventoryPlayer . mainInventory . length + inventoryPlayer . armorInventory . length ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getSlots ( ) <nl> + { <nl> + return inventoryPlayer . offHandInventory . length ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack getStackInSlot ( int slot ) <nl> + { <nl> + return super . getStackInSlot ( slot + offset ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) <nl> + { <nl> + return super . insertItem ( slot + offset , stack , simulate ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void setStackInSlot ( int slot , ItemStack stack ) <nl> + { <nl> + super . setStackInSlot ( slot + offset , stack ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack extractItem ( int slot , int amount , boolean simulate ) <nl> + { <nl> + return super . extractItem ( slot + offset , amount , simulate ) ; <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 index 4c463a5 . . 5c49734 100644 
 - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 @ @ - 285 , 7 + 285 , 7 @ @ 
 } 
 
 this . func _ 184602 _ cy ( ) ; 
 - @ @ - 2626 , 4 + 2707 , 34 @ @ 
 + @ @ - 2626 , 4 + 2707 , 27 @ @ 
 { 
 return true ; 
 } 
 @ @ - 300 , 16 + 300 , 9 @ @ 
 + { 
 + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) 
 + { 
 - + if ( facing = = net . minecraft . util . EnumFacing . UP ) 
 - + { 
 - + return ( T ) armorHandler ; 
 - + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) 
 - + { 
 - + return ( T ) handHandler ; 
 - + } else 
 - + { 
 - + return ( T ) joinedHandler ; 
 - + } 
 + + if ( facing = = null ) return ( T ) joinedHandler ; 
 + + else if ( facing . func _ 176740 _ k ( ) . func _ 176720 _ b ( ) ) return ( T ) handHandler ; 
 + + else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) return ( T ) armorHandler ; 
 + } 
 + return super . getCapability ( capability , facing ) ; 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch 
 index 4c14f0c . . 5f4ea94 100644 
 - - - a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch 
 @ @ - 16 , 7 + 16 , 7 @ @ 
 } 
 
 this . field _ 70138 _ W = 1 . 0F ; 
 - @ @ - 1793 , 4 + 1795 , 25 @ @ 
 + @ @ - 1793 , 4 + 1795 , 20 @ @ 
 this . field _ 188477 _ b = p _ i46589 _ 2 _ ; 
 } 
 } 
 @ @ - 27 , 18 + 27 , 13 @ @ 
 + @ Override 
 + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) 
 + { 
 - + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY 
 - + & & itemHandler ! = null ) 
 - + { 
 - + return ( T ) itemHandler ; 
 - + } 
 + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) return ( T ) itemHandler ; 
 + return super . getCapability ( capability , facing ) ; 
 + } 
 + 
 + @ Override 
 + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) 
 + { 
 - + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY & & itemHandler ! = null 
 - + | | super . hasCapability ( capability , facing ) ; 
 + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; 
 + } 
 } 
 diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 index ffdccb2 . . f0c090d 100644 
 - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 @ @ - 401 , 7 + 401 , 7 @ @ 
 
 if ( this . func _ 70608 _ bn ( ) ) 
 { 
 - @ @ - 2340 , 6 + 2447 , 169 @ @ 
 + @ @ - 2340 , 6 + 2447 , 160 @ @ 
 return ( float ) this . func _ 110148 _ a ( SharedMonsterAttributes . field _ 188792 _ h ) . func _ 111126 _ e ( ) ; 
 } 
 
 @ @ - 534 , 8 + 534 , 9 @ @ 
 + public java . util . Collection < ITextComponent > getSuffixes ( ) { return this . suffixes ; } 
 + 
 + private final net . minecraftforge . items . IItemHandler playerMainHandler = new net . minecraftforge . items . wrapper . PlayerMainInvWrapper ( field _ 71071 _ by ) ; 
 - + private final net . minecraftforge . items . IItemHandler playerArmorHandler = new net . minecraftforge . items . wrapper . PlayerArmorInvWrapper ( field _ 71071 _ by ) ; 
 - + private final net . minecraftforge . items . IItemHandler playerOffhandHandler = new net . minecraftforge . items . wrapper . PlayerOffhandInvWrapper ( field _ 71071 _ by ) ; 
 + + private final net . minecraftforge . items . IItemHandler playerEquipmentHandler = new net . minecraftforge . items . wrapper . CombinedInvWrapper ( 
 + + new net . minecraftforge . items . wrapper . PlayerArmorInvWrapper ( field _ 71071 _ by ) , 
 + + new net . minecraftforge . items . wrapper . PlayerOffhandInvWrapper ( field _ 71071 _ by ) ) ; 
 + private final net . minecraftforge . items . IItemHandler playerJoinedHandler = new net . minecraftforge . items . wrapper . PlayerInvWrapper ( field _ 71071 _ by ) ; 
 + 
 + @ Override 
 @ @ - 543 , 19 + 544 , 9 @ @ 
 + { 
 + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) 
 + { 
 - + if ( facing = = net . minecraft . util . EnumFacing . UP ) 
 - + { 
 - + return ( T ) playerArmorHandler ; 
 - + } else if ( facing = = net . minecraft . util . EnumFacing . DOWN ) 
 - + { 
 - + return ( T ) playerMainHandler ; 
 - + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) 
 - + { 
 - + return ( T ) playerOffhandHandler ; 
 - + } else 
 - + { 
 - + return ( T ) playerJoinedHandler ; 
 - + } 
 + + if ( facing = = null ) return ( T ) playerJoinedHandler ; 
 + + else if ( facing . func _ 176740 _ k ( ) . func _ 176720 _ b ( ) ) return ( T ) playerMainHandler ; 
 + + else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) return ( T ) playerEquipmentHandler ; 
 + } 
 + return super . getCapability ( capability , facing ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 index f8c70dd . . 063bec7 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 @ @ - 4 , 29 + 4 , 14 @ @ import net . minecraft . entity . player . InventoryPlayer ; 
 import net . minecraft . inventory . EntityEquipmentSlot ; 
 import net . minecraft . item . ItemStack ; 
 
 - public class PlayerArmorInvWrapper extends InvWrapper 
 + public class PlayerArmorInvWrapper extends RangedWrapper 
 { 
 public final InventoryPlayer inventoryPlayer ; 
 - private final int offset ; 
 
 public PlayerArmorInvWrapper ( InventoryPlayer inv ) 
 { 
 - super ( inv ) ; 
 - 
 + super ( new InvWrapper ( inv ) , inv . mainInventory . length , inv . mainInventory . length + inv . armorInventory . length ) ; 
 inventoryPlayer = inv ; 
 - offset = inventoryPlayer . mainInventory . length ; 
 - } 
 - 
 - @ Override 
 - public int getSlots ( ) 
 - { 
 - return inventoryPlayer . armorInventory . length ; 
 - } 
 - 
 - @ Override 
 - public ItemStack getStackInSlot ( int slot ) 
 - { 
 - return super . getStackInSlot ( slot + offset ) ; 
 } 
 
 @ Override 
 @ @ - 44 , 20 + 29 , 8 @ @ public class PlayerArmorInvWrapper extends InvWrapper 
 / / check if it ' s valid for the armor slot 
 if ( slot < 4 & & stack ! = null & & stack . getItem ( ) . isValidArmor ( stack , equ , inventoryPlayer . player ) ) 
 { 
 - return super . insertItem ( slot + offset , stack , simulate ) ; 
 + return super . insertItem ( slot , stack , simulate ) ; 
 } 
 return stack ; 
 } 
 - 
 - @ Override 
 - public void setStackInSlot ( int slot , ItemStack stack ) 
 - { 
 - super . setStackInSlot ( slot + offset , stack ) ; 
 - } 
 - 
 - @ Override 
 - public ItemStack extractItem ( int slot , int amount , boolean simulate ) 
 - { 
 - return super . extractItem ( slot + offset , amount , simulate ) ; 
 - } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java 
 index 2893486 . . 421f654 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java 
 @ @ - 8 , 54 + 8 , 19 @ @ import net . minecraft . item . ItemStack ; 
 * Exposes the player inventory WITHOUT the armor inventory as IItemHandler . 
 * Also takes core of inserting / extracting having the same logic as picking up items . 
 * / 
 - public class PlayerMainInvWrapper extends InvWrapper 
 + public class PlayerMainInvWrapper extends RangedWrapper 
 { 
 public final InventoryPlayer inventoryPlayer ; 
 
 public PlayerMainInvWrapper ( InventoryPlayer inv ) 
 { 
 - super ( inv ) ; 
 - 
 + super ( new InvWrapper ( inv ) , 0 , inv . mainInventory . length ) ; 
 inventoryPlayer = inv ; 
 } 
 
 @ Override 
 - public int getSlots ( ) 
 - { 
 - return inventoryPlayer . mainInventory . length ; 
 - } 
 - 
 - @ Override 
 - public void setStackInSlot ( int slot , ItemStack stack ) 
 - { 
 - / / prevent setting of armor and offhand 
 - if ( slot > getSlots ( ) ) 
 - { 
 - return ; 
 - } 
 - super . setStackInSlot ( slot , stack ) ; 
 - } 
 - 
 - @ Override 
 - public ItemStack getStackInSlot ( int slot ) 
 - { 
 - / / prevent getting of armor and offhand 
 - if ( slot > getSlots ( ) ) 
 - { 
 - return null ; 
 - } 
 - return super . getStackInSlot ( slot ) ; 
 - } 
 - 
 - @ Override 
 public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) 
 { 
 - / / prevent inserting into armor and offhand 
 - if ( slot > getSlots ( ) ) 
 - { 
 - return stack ; 
 - } 
 - 
 ItemStack rest = super . insertItem ( slot , stack , simulate ) ; 
 if ( rest = = null | | rest . stackSize ! = stack . stackSize ) 
 { 
 @ @ - 74 , 15 + 39 , 4 @ @ public class PlayerMainInvWrapper extends InvWrapper 
 } 
 return rest ; 
 } 
 - 
 - @ Override 
 - public ItemStack extractItem ( int slot , int amount , boolean simulate ) 
 - { 
 - / / prevent extraction from armor and offhand 
 - if ( slot > getSlots ( ) ) 
 - { 
 - return null ; 
 - } 
 - return super . extractItem ( slot , amount , simulate ) ; 
 - } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java 
 index 5272a3e . . 0d3af4e 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java 
 @ @ - 3 , 47 + 3 , 11 @ @ package net . minecraftforge . items . wrapper ; 
 import net . minecraft . entity . player . InventoryPlayer ; 
 import net . minecraft . item . ItemStack ; 
 
 - public class PlayerOffhandInvWrapper extends InvWrapper 
 + public class PlayerOffhandInvWrapper extends RangedWrapper 
 { 
 - public final InventoryPlayer inventoryPlayer ; 
 - private final int offset ; 
 - 
 public PlayerOffhandInvWrapper ( InventoryPlayer inv ) 
 { 
 - super ( inv ) ; 
 - 
 - inventoryPlayer = inv ; 
 - offset = inventoryPlayer . mainInventory . length + inventoryPlayer . armorInventory . length ; 
 - } 
 - 
 - @ Override 
 - public int getSlots ( ) 
 - { 
 - return inventoryPlayer . offHandInventory . length ; 
 - } 
 - 
 - @ Override 
 - public ItemStack getStackInSlot ( int slot ) 
 - { 
 - return super . getStackInSlot ( slot + offset ) ; 
 - } 
 - 
 - @ Override 
 - public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) 
 - { 
 - return super . insertItem ( slot + offset , stack , simulate ) ; 
 - } 
 - 
 - @ Override 
 - public void setStackInSlot ( int slot , ItemStack stack ) 
 - { 
 - super . setStackInSlot ( slot + offset , stack ) ; 
 + super ( new InvWrapper ( inv ) , inv . mainInventory . length + inv . armorInventory . length , 
 + inv . mainInventory . length + inv . armorInventory . length + inv . offHandInventory . length ) ; 
 } 
 - 
 - @ Override 
 - public ItemStack extractItem ( int slot , int amount , boolean simulate ) 
 - { 
 - return super . extractItem ( slot + offset , amount , simulate ) ; 
 - } 
 - 
 } 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java 
 new file mode 100644 
 index 0000000 . . 00b218e 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / RangedWrapper . java 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + package net . minecraftforge . items . wrapper ; 
 + 
 + import com . google . common . base . Preconditions ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . items . IItemHandlerModifiable ; 
 + 
 + / * * 
 + * A wrapper that composes another IItemHandlerModifiable , exposing only a range of the composed slots . 
 + * Shifting of slot indices is handled automatically for you . 
 + * / 
 + public class RangedWrapper implements IItemHandlerModifiable { 
 + 
 + private final IItemHandlerModifiable compose ; 
 + private final int minSlot ; 
 + private final int maxSlot ; 
 + 
 + public RangedWrapper ( IItemHandlerModifiable compose , int minSlot , int maxSlotExclusive ) 
 + { 
 + Preconditions . checkArgument ( maxSlotExclusive > minSlot , " Max slot must be greater than min slot " ) ; 
 + this . compose = compose ; 
 + this . minSlot = minSlot ; 
 + this . maxSlot = maxSlotExclusive ; 
 + } 
 + 
 + @ Override 
 + public int getSlots ( ) 
 + { 
 + return maxSlot - minSlot ; 
 + } 
 + 
 + @ Override 
 + public ItemStack getStackInSlot ( int slot ) 
 + { 
 + if ( checkSlot ( slot ) ) 
 + { 
 + return compose . getStackInSlot ( slot + minSlot ) ; 
 + } 
 + 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) 
 + { 
 + if ( checkSlot ( slot ) ) 
 + { 
 + return compose . insertItem ( slot + minSlot , stack , simulate ) ; 
 + } 
 + 
 + return stack ; 
 + } 
 + 
 + @ Override 
 + public ItemStack extractItem ( int slot , int amount , boolean simulate ) 
 + { 
 + if ( checkSlot ( slot ) ) 
 + { 
 + return compose . extractItem ( slot + minSlot , amount , simulate ) ; 
 + } 
 + 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void setStackInSlot ( int slot , ItemStack stack ) 
 + { 
 + if ( checkSlot ( slot ) ) 
 + { 
 + compose . setStackInSlot ( slot + minSlot , stack ) ; 
 + } 
 + } 
 + 
 + private boolean checkSlot ( int localSlot ) 
 + { 
 + return localSlot + minSlot < maxSlot ; 
 + } 
 + 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 index 2ddf22c . . 4c463a5 100644 
 - - - a / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / EntityLivingBase . java . patch 
 @ @ - 285 , 3 + 285 , 38 @ @ 
 } 
 
 this . func _ 184602 _ cy ( ) ; 
 + @ @ - 2626 , 4 + 2707 , 34 @ @ 
 + { 
 + return true ; 
 + } 
 + + 
 + + / / FORGE 
 + + private final net . minecraftforge . items . IItemHandlerModifiable handHandler = new net . minecraftforge . items . ItemStackHandler ( field _ 184630 _ bs ) ; 
 + + private final net . minecraftforge . items . IItemHandlerModifiable armorHandler = new net . minecraftforge . items . ItemStackHandler ( field _ 184631 _ bt ) ; 
 + + private final net . minecraftforge . items . IItemHandler joinedHandler = new net . minecraftforge . items . wrapper . CombinedInvWrapper ( armorHandler , handHandler ) ; 
 + + 
 + + @ Override 
 + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) 
 + + { 
 + + if ( facing = = net . minecraft . util . EnumFacing . UP ) 
 + + { 
 + + return ( T ) armorHandler ; 
 + + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) 
 + + { 
 + + return ( T ) handHandler ; 
 + + } else 
 + + { 
 + + return ( T ) joinedHandler ; 
 + + } 
 + + } 
 + + return super . getCapability ( capability , facing ) ; 
 + + } 
 + + 
 + + @ Override 
 + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; 
 + + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch 
 index fabe725 . . 4c14f0c 100644 
 - - - a / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / passive / EntityHorse . java . patch 
 @ @ - 1 , 6 + 1 , 14 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / entity / passive / EntityHorse . java 
 + + + . . / src - work / minecraft / net / minecraft / entity / passive / EntityHorse . java 
 - @ @ - 1200 , 6 + 1200 , 7 @ @ 
 + @ @ - 433 , 6 + 433 , 7 @ @ 
 + 
 + this . field _ 110296 _ bG . func _ 110134 _ a ( this ) ; 
 + this . func _ 110232 _ cE ( ) ; 
 + + this . itemHandler = new net . minecraftforge . items . wrapper . InvWrapper ( this . field _ 110296 _ bG ) ; 
 + } 
 + 
 + private void func _ 110232 _ cE ( ) 
 + @ @ - 1200 , 6 + 1201 , 7 @ @ 
 } 
 
 this . field _ 110277 _ bt = 0 . 0F ; 
 @ @ - 8 , 3 + 16 , 29 @ @ 
 } 
 
 this . field _ 70138 _ W = 1 . 0F ; 
 + @ @ - 1793 , 4 + 1795 , 25 @ @ 
 + this . field _ 188477 _ b = p _ i46589 _ 2 _ ; 
 + } 
 + } 
 + + 
 + + / / FORGE 
 + + private net . minecraftforge . items . IItemHandler itemHandler = null ; / / Initialized by initHorseChest above . 
 + + 
 + + @ Override 
 + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY 
 + + & & itemHandler ! = null ) 
 + + { 
 + + return ( T ) itemHandler ; 
 + + } 
 + + return super . getCapability ( capability , facing ) ; 
 + + } 
 + + 
 + + @ Override 
 + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY & & itemHandler ! = null 
 + + | | super . hasCapability ( capability , facing ) ; 
 + + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 index 946c86c . . ffdccb2 100644 
 - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 @ @ - 401 , 7 + 401 , 7 @ @ 
 
 if ( this . func _ 70608 _ bn ( ) ) 
 { 
 - @ @ - 2340 , 6 + 2447 , 136 @ @ 
 + @ @ - 2340 , 6 + 2447 , 169 @ @ 
 return ( float ) this . func _ 110148 _ a ( SharedMonsterAttributes . field _ 188792 _ h ) . func _ 111126 _ e ( ) ; 
 } 
 
 @ @ - 533 , 6 + 533 , 39 @ @ 
 + public java . util . Collection < ITextComponent > getPrefixes ( ) { return this . prefixes ; } 
 + public java . util . Collection < ITextComponent > getSuffixes ( ) { return this . suffixes ; } 
 + 
 + + private final net . minecraftforge . items . IItemHandler playerMainHandler = new net . minecraftforge . items . wrapper . PlayerMainInvWrapper ( field _ 71071 _ by ) ; 
 + + private final net . minecraftforge . items . IItemHandler playerArmorHandler = new net . minecraftforge . items . wrapper . PlayerArmorInvWrapper ( field _ 71071 _ by ) ; 
 + + private final net . minecraftforge . items . IItemHandler playerOffhandHandler = new net . minecraftforge . items . wrapper . PlayerOffhandInvWrapper ( field _ 71071 _ by ) ; 
 + + private final net . minecraftforge . items . IItemHandler playerJoinedHandler = new net . minecraftforge . items . wrapper . PlayerInvWrapper ( field _ 71071 _ by ) ; 
 + + 
 + + @ Override 
 + + public < T > T getCapability ( net . minecraftforge . common . capabilities . Capability < T > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + if ( capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY ) 
 + + { 
 + + if ( facing = = net . minecraft . util . EnumFacing . UP ) 
 + + { 
 + + return ( T ) playerArmorHandler ; 
 + + } else if ( facing = = net . minecraft . util . EnumFacing . DOWN ) 
 + + { 
 + + return ( T ) playerMainHandler ; 
 + + } else if ( facing . func _ 176740 _ k ( ) . func _ 176722 _ c ( ) ) 
 + + { 
 + + return ( T ) playerOffhandHandler ; 
 + + } else 
 + + { 
 + + return ( T ) playerJoinedHandler ; 
 + + } 
 + + } 
 + + return super . getCapability ( capability , facing ) ; 
 + + } 
 + + 
 + + @ Override 
 + + public boolean hasCapability ( net . minecraftforge . common . capabilities . Capability < ? > capability , net . minecraft . util . EnumFacing facing ) 
 + + { 
 + + return capability = = net . minecraftforge . items . CapabilityItemHandler . ITEM _ HANDLER _ CAPABILITY | | super . hasCapability ( capability , facing ) ; 
 + + } 
 + + 
 + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + 
 public static enum EnumChatVisibility 
 diff - - git a / src / main / java / net / minecraftforge / items / ItemStackHandler . java b / src / main / java / net / minecraftforge / items / ItemStackHandler . java 
 index 5ffc6bc . . fcd0502 100644 
 - - - a / src / main / java / net / minecraftforge / items / ItemStackHandler . java 
 + + + b / src / main / java / net / minecraftforge / items / ItemStackHandler . java 
 @ @ - 20 , 6 + 20 , 11 @ @ public class ItemStackHandler implements IItemHandler , IItemHandlerModifiable , I 
 stacks = new ItemStack [ size ] ; 
 } 
 
 + public ItemStackHandler ( ItemStack [ ] stacks ) 
 + { 
 + this . stacks = stacks ; 
 + } 
 + 
 public void setSize ( int size ) 
 { 
 stacks = new ItemStack [ size ] ; 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 index 9da8862 . . f8c70dd 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 @ @ - 7 , 7 + 7 , 7 @ @ import net . minecraft . item . ItemStack ; 
 public class PlayerArmorInvWrapper extends InvWrapper 
 { 
 public final InventoryPlayer inventoryPlayer ; 
 - public final int offset ; 
 + private final int offset ; 
 
 public PlayerArmorInvWrapper ( InventoryPlayer inv ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java 
 index b565470 . . b0c99d5 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerInvWrapper . java 
 @ @ - 6 , 6 + 6 , 6 @ @ public class PlayerInvWrapper extends CombinedInvWrapper 
 { 
 public PlayerInvWrapper ( InventoryPlayer inv ) 
 { 
 - super ( new PlayerMainInvWrapper ( inv ) , new PlayerArmorInvWrapper ( inv ) ) ; 
 + super ( new PlayerMainInvWrapper ( inv ) , new PlayerArmorInvWrapper ( inv ) , new PlayerOffhandInvWrapper ( inv ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java 
 index a2d996d . . 2893486 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerMainInvWrapper . java 
 @ @ - 10 , 7 + 10 , 6 @ @ import net . minecraft . item . ItemStack ; 
 * / 
 public class PlayerMainInvWrapper extends InvWrapper 
 { 
 - 
 public final InventoryPlayer inventoryPlayer ; 
 
 public PlayerMainInvWrapper ( InventoryPlayer inv ) 
 @ @ - 29 , 7 + 28 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper 
 @ Override 
 public void setStackInSlot ( int slot , ItemStack stack ) 
 { 
 - / / prevent setting of armor inventory 
 + / / prevent setting of armor and offhand 
 if ( slot > getSlots ( ) ) 
 { 
 return ; 
 @ @ - 40 , 7 + 39 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper 
 @ Override 
 public ItemStack getStackInSlot ( int slot ) 
 { 
 - / / prevent getting of armor inventory 
 + / / prevent getting of armor and offhand 
 if ( slot > getSlots ( ) ) 
 { 
 return null ; 
 @ @ - 51 , 7 + 50 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper 
 @ Override 
 public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) 
 { 
 - / / prevent inserting into armor inventory 
 + / / prevent inserting into armor and offhand 
 if ( slot > getSlots ( ) ) 
 { 
 return stack ; 
 @ @ - 79 , 7 + 78 , 7 @ @ public class PlayerMainInvWrapper extends InvWrapper 
 @ Override 
 public ItemStack extractItem ( int slot , int amount , boolean simulate ) 
 { 
 - / / prevent extraction from armor inventory 
 + / / prevent extraction from armor and offhand 
 if ( slot > getSlots ( ) ) 
 { 
 return null ; 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java 
 new file mode 100644 
 index 0000000 . . 5272a3e 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerOffhandInvWrapper . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + package net . minecraftforge . items . wrapper ; 
 + 
 + import net . minecraft . entity . player . InventoryPlayer ; 
 + import net . minecraft . item . ItemStack ; 
 + 
 + public class PlayerOffhandInvWrapper extends InvWrapper 
 + { 
 + public final InventoryPlayer inventoryPlayer ; 
 + private final int offset ; 
 + 
 + public PlayerOffhandInvWrapper ( InventoryPlayer inv ) 
 + { 
 + super ( inv ) ; 
 + 
 + inventoryPlayer = inv ; 
 + offset = inventoryPlayer . mainInventory . length + inventoryPlayer . armorInventory . length ; 
 + } 
 + 
 + @ Override 
 + public int getSlots ( ) 
 + { 
 + return inventoryPlayer . offHandInventory . length ; 
 + } 
 + 
 + @ Override 
 + public ItemStack getStackInSlot ( int slot ) 
 + { 
 + return super . getStackInSlot ( slot + offset ) ; 
 + } 
 + 
 + @ Override 
 + public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) 
 + { 
 + return super . insertItem ( slot + offset , stack , simulate ) ; 
 + } 
 + 
 + @ Override 
 + public void setStackInSlot ( int slot , ItemStack stack ) 
 + { 
 + super . setStackInSlot ( slot + offset , stack ) ; 
 + } 
 + 
 + @ Override 
 + public ItemStack extractItem ( int slot , int amount , boolean simulate ) 
 + { 
 + return super . extractItem ( slot + offset , amount , simulate ) ; 
 + } 
 + 
 + }
