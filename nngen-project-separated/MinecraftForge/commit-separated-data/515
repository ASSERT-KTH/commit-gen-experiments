BLEU SCORE: 1.221850657143831E-4

TEST MSG: Added the variant name to the missing model .
GENERATED MSG: Model loader improvements : adding custom data / textures to models that don ' t need them doesn ' t cause a error now , since it ' s common to put those in the defaults section of the blockstate json ; you can get IModel associated with the variant now - using ModelLoaderRegistry . getModel ; MultiLayerModel should now respect transformations applied to it , and respect part transformations .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / FancyMissingModel . java b / src / main / java / net / minecraftforge / client / model / FancyMissingModel . java <nl> new file mode 100644 <nl> index 0000000 . . 435d551 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / FancyMissingModel . java <nl> @ @ - 0 , 0 + 1 , 223 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . cache . CacheBuilder ; <nl> + import com . google . common . cache . CacheLoader ; <nl> + import com . google . common . cache . LoadingCache ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . Lists ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . block . model . ItemOverrideList ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . model . IModelState ; <nl> + import net . minecraftforge . common . model . TRSRTransformation ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + import javax . vecmath . Matrix4f ; <nl> + import javax . vecmath . Quat4f ; <nl> + import javax . vecmath . Vector3f ; <nl> + import java . util . Collection ; <nl> + import java . util . List ; <nl> + <nl> + final class FancyMissingModel implements IModel <nl> + { <nl> + private static final ResourceLocation font = new ResourceLocation ( " minecraft " , " textures / font / ascii . png " ) ; <nl> + private static final ResourceLocation font2 = new ResourceLocation ( " minecraft " , " font / ascii " ) ; <nl> + private static final TRSRTransformation smallTransformation = TRSRTransformation . blockCenterToCorner ( new TRSRTransformation ( null , null , new Vector3f ( . 25f , . 25f , . 25f ) , null ) ) ; <nl> + private static final LoadingCache < VertexFormat , SimpleModelFontRenderer > fontCache = CacheBuilder . newBuilder ( ) . maximumSize ( 3 ) . build ( new CacheLoader < VertexFormat , SimpleModelFontRenderer > ( ) <nl> + { <nl> + public SimpleModelFontRenderer load ( VertexFormat format ) throws Exception <nl> + { <nl> + Matrix4f m = new Matrix4f ( ) ; <nl> + m . m20 = 1f / 128f ; <nl> + m . m01 = m . m12 = - m . m20 ; <nl> + m . m33 = 1 ; <nl> + m . setTranslation ( new Vector3f ( 1 , 1 + 1f / 0x100 , 0 ) ) ; <nl> + return new SimpleModelFontRenderer ( <nl> + Minecraft . getMinecraft ( ) . gameSettings , <nl> + font , <nl> + Minecraft . getMinecraft ( ) . getTextureManager ( ) , <nl> + false , <nl> + m , <nl> + format <nl> + ) { <nl> + @ Override <nl> + protected float renderUnicodeChar ( char c , boolean italic ) <nl> + { <nl> + return super . renderDefaultChar ( 126 , italic ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } ) ; <nl> + <nl> + private final IModel missingModel ; <nl> + private final String message ; <nl> + <nl> + public FancyMissingModel ( IModel missingModel , String message ) <nl> + { <nl> + this . missingModel = missingModel ; <nl> + this . message = message ; <nl> + } <nl> + <nl> + @ Override <nl> + public Collection < ResourceLocation > getDependencies ( ) <nl> + { <nl> + return ImmutableList . of ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Collection < ResourceLocation > getTextures ( ) <nl> + { <nl> + return ImmutableList . of ( font2 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> + { <nl> + IBakedModel bigMissing = missingModel . bake ( state , format , bakedTextureGetter ) ; <nl> + IModelState smallState = new ModelStateComposition ( state , smallTransformation ) ; <nl> + IBakedModel smallMissing = missingModel . bake ( smallState , format , bakedTextureGetter ) ; <nl> + return new BakedModel ( bigMissing , smallMissing , fontCache . getUnchecked ( format ) , message , bakedTextureGetter . apply ( font2 ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IModelState getDefaultState ( ) <nl> + { <nl> + return TRSRTransformation . identity ( ) ; <nl> + } <nl> + <nl> + private static final class BakedModel implements IPerspectiveAwareModel <nl> + { <nl> + private final SimpleModelFontRenderer fontRenderer ; <nl> + private final String message ; <nl> + private final TextureAtlasSprite fontTexture ; <nl> + private final IBakedModel missingModel ; <nl> + private final IBakedModel otherModel ; <nl> + private final boolean big ; <nl> + private ImmutableList < BakedQuad > quads ; <nl> + <nl> + public BakedModel ( IBakedModel bigMissing , IBakedModel smallMissing , SimpleModelFontRenderer fontRenderer , String message , TextureAtlasSprite fontTexture ) <nl> + { <nl> + this . missingModel = bigMissing ; <nl> + otherModel = new BakedModel ( smallMissing , fontRenderer , message , fontTexture , this ) ; <nl> + this . big = true ; <nl> + this . fontRenderer = fontRenderer ; <nl> + this . message = message ; <nl> + this . fontTexture = fontTexture ; <nl> + } <nl> + <nl> + public BakedModel ( IBakedModel smallMissing , SimpleModelFontRenderer fontRenderer , String message , TextureAtlasSprite fontTexture , BakedModel big ) <nl> + { <nl> + this . missingModel = smallMissing ; <nl> + otherModel = big ; <nl> + this . big = false ; <nl> + this . fontRenderer = fontRenderer ; <nl> + this . message = message ; <nl> + this . fontTexture = fontTexture ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) <nl> + { <nl> + if ( side = = null ) <nl> + { <nl> + if ( quads = = null ) <nl> + { <nl> + fontRenderer . setSprite ( fontTexture ) ; <nl> + fontRenderer . setFillBlanks ( true ) ; <nl> + String [ ] lines = message . split ( " \ \ r ? \ \ n " ) ; <nl> + List < String > splitLines = Lists . newArrayList ( ) ; <nl> + for ( int y = 0 ; y < lines . length ; y + + ) <nl> + { <nl> + splitLines . addAll ( fontRenderer . listFormattedStringToWidth ( lines [ y ] , 0x80 ) ) ; <nl> + } <nl> + for ( int y = 0 ; y < splitLines . size ( ) ; y + + ) <nl> + { <nl> + fontRenderer . drawString ( splitLines . get ( y ) , 0 , ( int ) ( ( y - splitLines . size ( ) / 2f ) * fontRenderer . FONT _ HEIGHT ) + 0x40 , 0xFF00FFFF ) ; <nl> + } <nl> + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> + builder . addAll ( missingModel . getQuads ( state , side , rand ) ) ; <nl> + builder . addAll ( fontRenderer . build ( ) ) ; <nl> + quads = builder . build ( ) ; <nl> + } <nl> + return quads ; <nl> + } <nl> + return missingModel . getQuads ( state , side , rand ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) { return true ; } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getParticleTexture ( ) { return fontTexture ; } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } <nl> + <nl> + @ Override <nl> + public ItemOverrideList getOverrides ( ) { return ItemOverrideList . NONE ; } <nl> + <nl> + @ Override <nl> + public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( ItemCameraTransforms . TransformType cameraTransformType ) <nl> + { <nl> + TRSRTransformation transform = TRSRTransformation . identity ( ) ; <nl> + boolean big = true ; <nl> + switch ( cameraTransformType ) <nl> + { <nl> + <nl> + case THIRD _ PERSON _ LEFT _ HAND : <nl> + break ; <nl> + case THIRD _ PERSON _ RIGHT _ HAND : <nl> + break ; <nl> + case FIRST _ PERSON _ LEFT _ HAND : <nl> + transform = new TRSRTransformation ( new Vector3f ( - 0 . 62f , 0 . 5f , - . 5f ) , new Quat4f ( 1 , - 1 , - 1 , 1 ) , null , null ) ; <nl> + big = false ; <nl> + break ; <nl> + case FIRST _ PERSON _ RIGHT _ HAND : <nl> + transform = new TRSRTransformation ( new Vector3f ( - 0 . 5f , 0 . 5f , - . 5f ) , new Quat4f ( 1 , 1 , 1 , 1 ) , null , null ) ; <nl> + big = false ; <nl> + break ; <nl> + case HEAD : <nl> + break ; <nl> + case GUI : <nl> + if ( ForgeModContainer . zoomInMissingModelTextInGui ) <nl> + { <nl> + transform = new TRSRTransformation ( null , new Quat4f ( 1 , 1 , 1 , 1 ) , new Vector3f ( 4 , 4 , 4 ) , null ) ; <nl> + big = false ; <nl> + } <nl> + else <nl> + { <nl> + transform = new TRSRTransformation ( null , new Quat4f ( 1 , 1 , 1 , 1 ) , null , null ) ; <nl> + big = true ; <nl> + } <nl> + break ; <nl> + case FIXED : <nl> + transform = new TRSRTransformation ( null , new Quat4f ( - 1 , - 1 , 1 , 1 ) , null , null ) ; <nl> + break ; <nl> + default : <nl> + break ; <nl> + } <nl> + if ( big ! = this . big ) <nl> + { <nl> + return Pair . of ( otherModel , transform . getMatrix ( ) ) ; <nl> + } <nl> + return Pair . of ( this , transform . getMatrix ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 5a773e3 . . ab33c3d 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 262 , 7 + 262 , 7 @ @ public final class ModelLoader extends ModelBakery <nl> catch ( Exception e ) <nl> { <nl> storeException ( location , e ) ; <nl> - model = getMissingModel ( ) ; <nl> + model = ModelLoaderRegistry . getMissingModel ( location , e ) ; <nl> } <nl> stateModels . put ( location , model ) ; <nl> } <nl> @ @ - 348 , 11 + 348 , 12 @ @ public final class ModelLoader extends ModelBakery <nl> exception = new ItemLoadingException ( " Could not load item model either from the normal location " + file + " or from the blockstate " , normalException , blockstateException ) ; <nl> } <nl> } <nl> - stateModels . put ( memory , model ) ; <nl> if ( exception ! = null ) <nl> { <nl> storeException ( memory , exception ) ; <nl> + model = ModelLoaderRegistry . getMissingModel ( memory , exception ) ; <nl> } <nl> + stateModels . put ( memory , model ) ; <nl> } <nl> } <nl> ProgressManager . pop ( itemBar ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> index 5b147d1 . . 14ceec4 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> @ @ - 189 , 7 + 189 , 7 @ @ public class ModelLoaderRegistry <nl> } <nl> catch ( Exception e ) <nl> { <nl> - return getMissingModel ( ) ; <nl> + return getMissingModel ( location , e ) ; <nl> } <nl> } <nl> <nl> @ @ - 205 , 7 + 205 , 7 @ @ public class ModelLoaderRegistry <nl> catch ( Exception e ) <nl> { <nl> FMLLog . getLogger ( ) . error ( error , e ) ; <nl> - return getMissingModel ( ) ; <nl> + return getMissingModel ( location , e ) ; <nl> } <nl> } <nl> <nl> @ @ - 218 , 6 + 218 , 14 @ @ public class ModelLoaderRegistry <nl> return ModelLoader . VanillaLoader . INSTANCE . getLoader ( ) . getMissingModel ( ) ; <nl> } <nl> <nl> + static IModel getMissingModel ( ResourceLocation location , Throwable cause ) <nl> + { <nl> + / / IModel model = new FancyMissingModel ( ExceptionUtils . getStackTrace ( cause ) . replaceAll ( " \ \ t " , " " ) ) ; <nl> + IModel model = new FancyMissingModel ( getMissingModel ( ) , location . toString ( ) ) ; <nl> + textures . addAll ( model . getTextures ( ) ) ; <nl> + return model ; <nl> + } <nl> + <nl> public static void clearModelCache ( IResourceManager manager ) <nl> { <nl> ModelLoaderRegistry . manager = manager ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java b / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java <nl> new file mode 100644 <nl> index 0000000 . . 31e2c2d <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java <nl> @ @ - 0 , 0 + 1 , 179 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import javax . vecmath . Matrix3f ; <nl> + import javax . vecmath . Matrix4f ; <nl> + import javax . vecmath . Vector3f ; <nl> + import javax . vecmath . Vector4f ; <nl> + <nl> + import net . minecraftforge . client . model . pipeline . UnpackedBakedQuad ; <nl> + <nl> + import com . google . common . collect . ImmutableList ; <nl> + <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . gui . FontRenderer ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . texture . TextureManager ; <nl> + import net . minecraft . client . renderer . texture . TextureMap ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . resources . IResourceManager ; <nl> + import net . minecraft . client . settings . GameSettings ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + <nl> + public abstract class SimpleModelFontRenderer extends FontRenderer { <nl> + <nl> + private float r , g , b , a ; <nl> + private final Matrix4f matrix ; <nl> + private ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> + private final VertexFormat format ; <nl> + private final Vector3f normal = new Vector3f ( 0 , 0 , 1 ) ; <nl> + private final EnumFacing orientation ; <nl> + private boolean fillBlanks = false ; <nl> + <nl> + private TextureAtlasSprite sprite ; <nl> + <nl> + public SimpleModelFontRenderer ( GameSettings settings , ResourceLocation font , TextureManager manager , boolean isUnicode , Matrix4f matrix , VertexFormat format ) <nl> + { <nl> + super ( settings , font , manager , isUnicode ) ; <nl> + manager . bindTexture ( TextureMap . LOCATION _ BLOCKS _ TEXTURE ) ; <nl> + this . matrix = new Matrix4f ( matrix ) ; <nl> + Matrix3f nm = new Matrix3f ( ) ; <nl> + this . matrix . getRotationScale ( nm ) ; <nl> + nm . invert ( ) ; <nl> + nm . transpose ( ) ; <nl> + this . format = format ; <nl> + nm . transform ( normal ) ; <nl> + normal . normalize ( ) ; <nl> + orientation = EnumFacing . getFacingFromVector ( normal . x , normal . y , normal . z ) ; <nl> + } <nl> + <nl> + public void setSprite ( TextureAtlasSprite sprite ) <nl> + { <nl> + this . sprite = sprite ; <nl> + super . onResourceManagerReload ( null ) ; <nl> + } <nl> + <nl> + public void setFillBlanks ( boolean fillBlanks ) <nl> + { <nl> + this . fillBlanks = fillBlanks ; <nl> + } <nl> + <nl> + @ Override <nl> + protected float renderDefaultChar ( int pos , boolean italic ) <nl> + { <nl> + float x = ( pos % 16 ) / 16f ; <nl> + float y = ( pos / 16 ) / 16f ; <nl> + float sh = italic ? 1f : 0f ; <nl> + float w = charWidth [ pos ] - 1 . 01f ; <nl> + float h = FONT _ HEIGHT - 1 . 01f ; <nl> + float wt = w / 128f ; <nl> + float ht = h / 128f ; <nl> + <nl> + UnpackedBakedQuad . Builder quadBuilder = new UnpackedBakedQuad . Builder ( format ) ; <nl> + quadBuilder . setQuadOrientation ( orientation ) ; <nl> + <nl> + addVertex ( quadBuilder , posX + sh , posY , x , y ) ; <nl> + addVertex ( quadBuilder , posX - sh , posY + h , x , y + ht ) ; <nl> + addVertex ( quadBuilder , posX + w + sh , posY + h , x + wt , y + ht ) ; <nl> + addVertex ( quadBuilder , posX + w - sh , posY , x + wt , y ) ; <nl> + builder . add ( quadBuilder . build ( ) ) ; <nl> + <nl> + if ( fillBlanks ) <nl> + { <nl> + float cuv = 15f / 16f ; <nl> + <nl> + quadBuilder = new UnpackedBakedQuad . Builder ( format ) ; <nl> + quadBuilder . setQuadOrientation ( orientation ) ; <nl> + <nl> + addVertex ( quadBuilder , posX + w + sh , posY , cuv , cuv ) ; <nl> + addVertex ( quadBuilder , posX + w - sh , posY + h , cuv , cuv ) ; <nl> + addVertex ( quadBuilder , posX + charWidth [ pos ] + sh , posY + h , cuv , cuv ) ; <nl> + addVertex ( quadBuilder , posX + charWidth [ pos ] - sh , posY , cuv , cuv ) ; <nl> + builder . add ( quadBuilder . build ( ) ) ; <nl> + <nl> + quadBuilder = new UnpackedBakedQuad . Builder ( format ) ; <nl> + quadBuilder . setQuadOrientation ( orientation ) ; <nl> + <nl> + addVertex ( quadBuilder , posX + sh , posY + h , cuv , cuv ) ; <nl> + addVertex ( quadBuilder , posX - sh , posY + FONT _ HEIGHT , cuv , cuv ) ; <nl> + addVertex ( quadBuilder , posX + charWidth [ pos ] + sh , posY + FONT _ HEIGHT , cuv , cuv ) ; <nl> + addVertex ( quadBuilder , posX + charWidth [ pos ] - sh , posY + h , cuv , cuv ) ; <nl> + builder . add ( quadBuilder . build ( ) ) ; <nl> + } <nl> + return charWidth [ pos ] ; <nl> + } <nl> + <nl> + private final Vector4f vec = new Vector4f ( ) ; <nl> + <nl> + private void addVertex ( UnpackedBakedQuad . Builder quadBuilder , float x , float y , float u , float v ) <nl> + { <nl> + vec . x = x ; <nl> + vec . y = y ; <nl> + vec . z = 0 ; <nl> + vec . w = 1 ; <nl> + matrix . transform ( vec ) ; <nl> + for ( int e = 0 ; e < format . getElementCount ( ) ; e + + ) <nl> + { <nl> + switch ( format . getElement ( e ) . getUsage ( ) ) <nl> + { <nl> + case POSITION : <nl> + quadBuilder . put ( e , vec . x , vec . y , vec . z , vec . w ) ; <nl> + break ; <nl> + case UV : <nl> + quadBuilder . put ( e , sprite . getInterpolatedU ( u * 16 ) , sprite . getInterpolatedV ( v * 16 ) , 0 , 1 ) ; <nl> + break ; <nl> + case COLOR : <nl> + quadBuilder . put ( e , r , g , b , a ) ; <nl> + break ; <nl> + case NORMAL : <nl> + / / quadBuilder . put ( e , normal . x , normal . y , normal . z , 1 ) ; <nl> + quadBuilder . put ( e , 0 , 0 , 1 , 1 ) ; <nl> + break ; <nl> + default : <nl> + quadBuilder . put ( e ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void onResourceManagerReload ( IResourceManager resourceManager ) <nl> + { <nl> + super . onResourceManagerReload ( resourceManager ) ; <nl> + String p = locationFontTexture . getResourcePath ( ) ; <nl> + if ( p . startsWith ( " textures / " ) ) p = p . substring ( " textures / " . length ( ) , p . length ( ) ) ; <nl> + if ( p . endsWith ( " . png " ) ) p = p . substring ( 0 , p . length ( ) - " . png " . length ( ) ) ; <nl> + String f = locationFontTexture . getResourceDomain ( ) + " : " + p ; <nl> + sprite = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( f ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected abstract float renderUnicodeChar ( char c , boolean italic ) ; <nl> + <nl> + @ Override <nl> + protected void doDraw ( float shift ) <nl> + { <nl> + posX + = ( int ) shift ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void setColor ( float r , float g , float b , float a ) <nl> + { <nl> + this . r = r ; <nl> + this . g = g ; <nl> + this . b = b ; <nl> + this . a = a ; <nl> + } <nl> + <nl> + @ Override public void enableAlpha ( ) <nl> + { <nl> + } <nl> + <nl> + public ImmutableList < BakedQuad > build ( ) <nl> + { <nl> + ImmutableList < BakedQuad > ret = builder . build ( ) ; <nl> + builder = ImmutableList . builder ( ) ; <nl> + return ret ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 2f3b082 . . 257389d 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 112 , 6 + 112 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean disableVersionCheck = false ; <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> public static boolean replaceVanillaBucketModel = true ; <nl> + public static boolean zoomInMissingModelTextInGui = false ; <nl> public static long java8Reminder = 0 ; <nl> public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag <nl> public static boolean alwaysSetupTerrainOffThread = false ; / / In RenderGlobal . setupTerrain , always force the chunk render updates to be queued to the thread <nl> @ @ - 283 , 12 + 284 , 19 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> <nl> / / Client - Side only properties <nl> propOrder = new ArrayList < String > ( ) ; <nl> + <nl> prop = config . get ( Configuration . CATEGORY _ CLIENT , " replaceVanillaBucketModel " , Boolean . FALSE , <nl> " Replace the vanilla bucket models with Forges own dynamic bucket model . Unifies bucket visuals if a mod uses the Forge bucket model . " ) ; <nl> prop . setLanguageKey ( " forge . configgui . replaceBuckets " ) . setRequiresMcRestart ( true ) ; <nl> replaceVanillaBucketModel = prop . getBoolean ( Boolean . FALSE ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> + prop = config . get ( Configuration . CATEGORY _ CLIENT , " zoomInMissingModelTextInGui " , Boolean . TRUE , <nl> + " Toggle off to make missing model text in the gui fit inside the slot . " ) ; <nl> + zoomInMissingModelTextInGui = prop . getBoolean ( Boolean . FALSE ) ; <nl> + prop . setLanguageKey ( " forge . configgui . zoomInMissingModelTextInGui " ) ; <nl> + propOrder . add ( prop . getName ( ) ) ; <nl> + <nl> prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder , <nl> " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; <nl> java8Reminder = prop . getLong ( java8Reminder ) ; <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 1509ec6 . . 3b40d1c 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 49 , 6 + 49 , 7 @ @ forge . configgui . replaceBuckets = Use Forge ' s bucket model <nl> forge . configgui . forgeLightPipelineEnabled = Forge Light Pipeline Enabled <nl> forge . configgui . java8Reminder = Java 8 Reminder timestamp <nl> forge . configgui . disableStairSlabCulling = Disable Stair / Slab culling . <nl> + forge . configgui . zoomInMissingModelTextInGui = Zoom in Missing model text in the GUI <nl> forge . configgui . disableStairSlabCulling . tooltip = Enable this if you see through blocks touching stairs / slabs with your resource pack . <nl> forge . configgui . alwaysSetupTerrainOffThread = Force threaded chunk rendering <nl> forge . configgui . alwaysSetupTerrainOffThread . tooltip = Enable forge to queue all chunk updates to the Chunk Update thread . May increase FPS significantly , but may also cause weird rendering lag . Not recommended for computers without a significant number of cores available . <nl> @ @ - 186 , 4 + 187 , 4 @ @ fml . button . continue = Continue <nl> fml . button . open . mods . folder = Open Mods Folder <nl> fml . button . open . file = Open % s <nl> <nl> - forge . container . enchant . limitedEnchantability = Limited Enchantability <nl> \ No newline at end of file <nl> + forge . container . enchant . limitedEnchantability = Limited Enchantability
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> index 2559856 . . b6fb4f0 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> @ @ - 134 , 20 + 134 , 14 @ @ public class BlockStateLoader <nl> <nl> protected IModel runModelHooks ( IModel base , ImmutableMap < String , String > textureMap , ImmutableMap < String , String > customData ) <nl> { <nl> - if ( ! customData . isEmpty ( ) ) <nl> + if ( ! customData . isEmpty ( ) & & base instanceof IModelCustomData ) <nl> { <nl> - if ( base instanceof IModelCustomData ) <nl> - base = ( ( IModelCustomData ) base ) . process ( customData ) ; <nl> - else <nl> - throw new RuntimeException ( " Attempted to add custom data to a model that doesn ' t need it : " + base ) ; <nl> + base = ( ( IModelCustomData ) base ) . process ( customData ) ; <nl> } <nl> <nl> - if ( ! textureMap . isEmpty ( ) ) <nl> + if ( ! textureMap . isEmpty ( ) & & base instanceof IRetexturableModel ) <nl> { <nl> - if ( base instanceof IRetexturableModel ) <nl> - base = ( ( IRetexturableModel ) base ) . retexture ( textureMap ) ; <nl> - else <nl> - throw new RuntimeException ( " Attempted to retexture a non - retexturable model : " + base ) ; <nl> + base = ( ( IRetexturableModel ) base ) . retexture ( textureMap ) ; <nl> } <nl> <nl> return base ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / IModel . java b / src / main / java / net / minecraftforge / client / model / IModel . java <nl> index 3ac5470 . . 6a9e1c4 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IModel . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ public interface IModel <nl> / * <nl> * Returns all model locations that this model depends on . <nl> * Assume that returned collection is immutable . <nl> + * See ModelLoaderRegistry . getModel for dependency loading . <nl> * / <nl> Collection < ResourceLocation > getDependencies ( ) ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / MapModelState . java b / src / main / java / net / minecraftforge / client / model / MapModelState . java <nl> index 62d9391 . . 2f1469f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / MapModelState . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / MapModelState . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import com . google . common . collect . ImmutableMap ; <nl> <nl> / * <nl> * Simple implementation of IModelState via a map and a default value . Provides a full state for each part . <nl> + * You probably don ' t want to use this . <nl> * / <nl> public class MapModelState implements IModelState <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 9404ff5 . . 865d402 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 330 , 13 + 330 , 21 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + private IModel getVariantModel ( ModelResourceLocation location ) <nl> + { <nl> + loadVariants ( ImmutableList . of ( location ) ) ; <nl> + IModel model = stateModels . get ( location ) ; <nl> + if ( model = = null ) model = getMissingModel ( ) ; <nl> + return model ; <nl> + } <nl> + <nl> private void resolveDependencies ( IModel model ) throws IOException <nl> { <nl> for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> { <nl> if ( dep instanceof ModelResourceLocation ) <nl> { <nl> - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> + getVariantModel ( ( ModelResourceLocation ) dep ) ; <nl> } <nl> else <nl> { <nl> @ @ - 598 , 37 + 606 , 6 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> - / / Weighted models can contain multiple copies of 1 model with different rotations - this is to make it work with IModelState ( different copies will be different objects ) . <nl> - private static class WeightedPartWrapper implements IModel <nl> - { <nl> - private final IModel model ; <nl> - <nl> - public WeightedPartWrapper ( IModel model ) <nl> - { <nl> - this . model = model ; <nl> - } <nl> - <nl> - public Collection < ResourceLocation > getDependencies ( ) <nl> - { <nl> - return model . getDependencies ( ) ; <nl> - } <nl> - <nl> - public Collection < ResourceLocation > getTextures ( ) <nl> - { <nl> - return model . getTextures ( ) ; <nl> - } <nl> - <nl> - public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> - { <nl> - return model . bake ( state , format , bakedTextureGetter ) ; <nl> - } <nl> - <nl> - public IModelState getDefaultState ( ) <nl> - { <nl> - return model . getDefaultState ( ) ; <nl> - } <nl> - } <nl> - <nl> private class WeightedRandomModel implements IModel <nl> { <nl> private final List < Variant > variants ; <nl> @ @ - 636 , 11 + 613 , 10 @ @ public class ModelLoader extends ModelBakery <nl> private final List < IModel > models = new ArrayList < IModel > ( ) ; <nl> private final IModelState defaultState ; <nl> <nl> - @ Deprecated @ SuppressWarnings ( " unused " ) public WeightedRandomModel ( Variants variants ) { this ( null , variants ) ; } / / Remove 1 . 9 <nl> public WeightedRandomModel ( ModelResourceLocation parent , Variants variants ) <nl> { <nl> this . variants = variants . getVariants ( ) ; <nl> - ImmutableMap . Builder < MapModelState . Wrapper , IModelState > builder = ImmutableMap . builder ( ) ; <nl> + ImmutableList . Builder < Pair < IModel , IModelState > > builder = ImmutableList . builder ( ) ; <nl> for ( Variant v : ( List < Variant > ) variants . getVariants ( ) ) <nl> { <nl> ResourceLocation loc = v . getModelLocation ( ) ; <nl> @ @ - 676 , 20 + 652 , 18 @ @ public class ModelLoader extends ModelBakery <nl> textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . <nl> } <nl> <nl> - model = new WeightedPartWrapper ( model ) ; <nl> models . add ( model ) ; <nl> - builder . put ( MapModelState . wrap ( model ) , v . getState ( ) ) ; <nl> + builder . add ( Pair . of ( model , v . getState ( ) ) ) ; <nl> } <nl> <nl> if ( models . size ( ) = = 0 ) / / If all variants are missing , add one with the missing model and default rotation . <nl> { <nl> IModel missing = getMissingModel ( ) ; <nl> models . add ( missing ) ; <nl> - builder . put ( MapModelState . wrap ( missing ) , TRSRTransformation . identity ( ) ) ; <nl> + builder . add ( Pair . < IModel , IModelState > of ( missing , TRSRTransformation . identity ( ) ) ) ; <nl> } <nl> <nl> - defaultState = new MapModelState ( builder . build ( ) ) ; <nl> - <nl> + defaultState = new MultiModelState ( builder . build ( ) ) ; <nl> } <nl> <nl> public Collection < ResourceLocation > getDependencies ( ) <nl> @ @ - 708 , 15 + 682 , 6 @ @ public class ModelLoader extends ModelBakery <nl> return state ; <nl> } <nl> <nl> - private IModelState getState ( IModelState state , IModel model ) <nl> - { <nl> - if ( state instanceof MapModelState ) <nl> - { <nl> - return ( ( MapModelState ) state ) . getState ( model ) ; <nl> - } <nl> - return state ; <nl> - } <nl> - <nl> public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> { <nl> if ( ! Attributes . moreSpecific ( format , Attributes . DEFAULT _ BAKED _ FORMAT ) ) <nl> @ @ - 727 , 14 + 692 , 14 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> Variant v = variants . get ( 0 ) ; <nl> IModel model = models . get ( 0 ) ; <nl> - return model . bake ( addUV ( v . isUvLocked ( ) , getState ( state , model ) ) , format , bakedTextureGetter ) ; <nl> + return model . bake ( addUV ( v . isUvLocked ( ) , MultiModelState . getPartState ( state , model , 0 ) ) , format , bakedTextureGetter ) ; <nl> } <nl> WeightedBakedModel . Builder builder = new WeightedBakedModel . Builder ( ) ; <nl> for ( int i = 0 ; i < variants . size ( ) ; i + + ) <nl> { <nl> IModel model = models . get ( i ) ; <nl> Variant v = variants . get ( i ) ; <nl> - builder . add ( model . bake ( addUV ( v . isUvLocked ( ) , getState ( state , model ) ) , format , bakedTextureGetter ) , variants . get ( i ) . getWeight ( ) ) ; <nl> + builder . add ( model . bake ( addUV ( v . isUvLocked ( ) , MultiModelState . getPartState ( state , model , i ) ) , format , bakedTextureGetter ) , variants . get ( i ) . getWeight ( ) ) ; <nl> } <nl> return new FlexibleWeightedBakedModel ( builder . build ( ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; <nl> } <nl> @ @ - 747 , 14 + 712 , 11 @ @ public class ModelLoader extends ModelBakery <nl> <nl> private static class FlexibleWeightedBakedModel extends WeightedBakedModel implements IFlexibleBakedModel <nl> { <nl> - @ SuppressWarnings ( " unused " ) <nl> - private final WeightedBakedModel parent ; <nl> private final VertexFormat format ; <nl> <nl> public FlexibleWeightedBakedModel ( WeightedBakedModel parent , VertexFormat format ) <nl> { <nl> super ( parent . models ) ; <nl> - this . parent = parent ; <nl> this . format = format ; <nl> } <nl> <nl> @ @ - 764 , 12 + 726 , 6 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> - @ SuppressWarnings ( " unused " ) <nl> - private boolean isBuiltinModel ( ModelBlock model ) <nl> - { <nl> - return model = = MODEL _ GENERATED | | model = = MODEL _ COMPASS | | model = = MODEL _ CLOCK | | model = = MODEL _ ENTITY ; <nl> - } <nl> - <nl> public IModel getMissingModel ( ) <nl> { <nl> if ( missingModel = = null ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> index c500827 . . 09d43a8 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . resources . IReloadableResourceManager ; <nl> import net . minecraft . client . resources . IResourceManager ; <nl> import net . minecraft . client . resources . IResourceManagerReloadListener ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . client . model . ModelLoader . VanillaLoader ; <nl> import net . minecraftforge . client . model . b3d . B3DLoader ; <nl> @ @ - 64 , 58 + 65 , 79 @ @ public class ModelLoaderRegistry <nl> return new ResourceLocation ( location . getResourceDomain ( ) , " models / " + location . getResourcePath ( ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Primary method to get IModel instances . <nl> + * ResourceLocation argument will be passed directly to the custom model loaders , <nl> + * ModelResourceLocation argument will be loaded through the blockstate system . <nl> + * / <nl> public static IModel getModel ( ResourceLocation location ) throws IOException <nl> { <nl> - if ( cache . containsKey ( location ) ) return cache . get ( location ) ; <nl> - ResourceLocation actual = getActualLocation ( location ) ; <nl> - ICustomModelLoader accepted = null ; <nl> - for ( ICustomModelLoader loader : loaders ) <nl> + IModel model ; <nl> + if ( location instanceof ModelResourceLocation ) <nl> { <nl> - try <nl> + ModelLoader loader = ModelLoader . VanillaLoader . instance . getLoader ( ) ; <nl> + if ( loader ! = null ) <nl> { <nl> - if ( loader . accepts ( actual ) ) <nl> - { <nl> - if ( accepted ! = null ) <nl> - { <nl> - FMLLog . severe ( " 2 loaders ( % s and % s ) want to load the same model % s " , accepted , loader , location ) ; <nl> - throw new IllegalStateException ( " 2 loaders want to load the same model " ) ; <nl> - } <nl> - accepted = loader ; <nl> - } <nl> + model = loader . getVariantModel ( ( ModelResourceLocation ) location ) ; <nl> } <nl> - catch ( Exception e ) <nl> + else <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Exception checking if model % s can be loaded with loader % s , skipping " , location , loader ) ; <nl> + FMLLog . log ( Level . ERROR , " Loading model too early , skipping : % s " , location ) ; <nl> + model = getMissingModel ( ) ; <nl> } <nl> } <nl> - <nl> - / / no custom loaders found , try vanilla one <nl> - if ( accepted = = null ) <nl> - { <nl> - if ( VanillaLoader . instance . accepts ( actual ) ) accepted = VanillaLoader . instance ; <nl> - } <nl> - <nl> - IModel model ; <nl> - if ( accepted = = null ) <nl> - { <nl> - FMLLog . severe ( " no suitable loader found for the model % s , skipping " , location ) ; <nl> - model = getMissingModel ( ) ; <nl> - } <nl> else <nl> { <nl> - try <nl> + if ( cache . containsKey ( location ) ) return cache . get ( location ) ; <nl> + ResourceLocation actual = getActualLocation ( location ) ; <nl> + ICustomModelLoader accepted = null ; <nl> + for ( ICustomModelLoader loader : loaders ) <nl> { <nl> - model = accepted . loadModel ( actual ) ; <nl> + try <nl> + { <nl> + if ( loader . accepts ( actual ) ) <nl> + { <nl> + if ( accepted ! = null ) <nl> + { <nl> + FMLLog . severe ( " 2 loaders ( % s and % s ) want to load the same model % s " , accepted , loader , location ) ; <nl> + throw new IllegalStateException ( " 2 loaders want to load the same model " ) ; <nl> + } <nl> + accepted = loader ; <nl> + } <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Exception checking if model % s can be loaded with loader % s , skipping " , location , loader ) ; <nl> + } <nl> } <nl> - catch ( IOException e ) <nl> + <nl> + / / no custom loaders found , try vanilla one <nl> + if ( accepted = = null ) <nl> { <nl> - throw e ; <nl> + if ( VanillaLoader . instance . accepts ( actual ) ) accepted = VanillaLoader . instance ; <nl> } <nl> - catch ( Exception e ) <nl> + <nl> + if ( accepted = = null ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Exception loading model % s with loader % s , skipping " , location , accepted ) ; <nl> + FMLLog . severe ( " no suitable loader found for the model % s , skipping " , location ) ; <nl> model = getMissingModel ( ) ; <nl> } <nl> + else <nl> + { <nl> + try <nl> + { <nl> + model = accepted . loadModel ( actual ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw e ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Exception loading model % s with loader % s , skipping " , location , accepted ) ; <nl> + model = getMissingModel ( ) ; <nl> + } <nl> + } <nl> } <nl> cache . put ( location , model ) ; <nl> return model ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> index fa8eb1a . . 18a8eed 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package net . minecraftforge . client . model ; <nl> <nl> + import java . io . IOException ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> <nl> @ @ - 14 , 7 + 15 , 6 @ @ import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> import net . minecraft . client . resources . IResourceManager ; <nl> import net . minecraft . client . resources . model . IBakedModel ; <nl> - import net . minecraft . client . resources . model . ModelManager ; <nl> import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . EnumWorldBlockLayer ; <nl> @ @ - 23 , 6 + 23 , 7 @ @ import net . minecraftforge . client . MinecraftForgeClient ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> + import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> @ @ - 54 , 10 + 55 , 36 @ @ public class MultiLayerModel implements IModelCustomData <nl> return ImmutableList . of ( ) ; <nl> } <nl> <nl> + private static ImmutableMap < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > buildModels ( ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models , IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> + { <nl> + ImmutableMap . Builder < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > builder = ImmutableMap . builder ( ) ; <nl> + for ( Optional < EnumWorldBlockLayer > key : models . keySet ( ) ) <nl> + { <nl> + IModel model ; <nl> + try <nl> + { <nl> + model = ModelLoaderRegistry . getModel ( models . get ( key ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Couldn ' t load MultiLayerModel dependency : % s " , models . get ( key ) ) ; <nl> + model = ModelLoaderRegistry . getMissingModel ( ) ; <nl> + } <nl> + builder . put ( key , model . bake ( new ModelStateComposition ( state , model . getDefaultState ( ) ) , format , bakedTextureGetter ) ) ; <nl> + } <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> @ Override <nl> public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> { <nl> - return new MultiLayerBakedModel ( models , format , IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) ) ; <nl> + IModel missing = ModelLoaderRegistry . getMissingModel ( ) ; <nl> + return new MultiLayerBakedModel ( <nl> + buildModels ( models , state , format , bakedTextureGetter ) , <nl> + missing . bake ( missing . getDefaultState ( ) , format , bakedTextureGetter ) , <nl> + format , <nl> + IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) <nl> + ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 102 , 63 + 129 , 59 @ @ public class MultiLayerModel implements IModelCustomData <nl> <nl> public static class MultiLayerBakedModel implements IFlexibleBakedModel , ISmartBlockModel , IPerspectiveAwareModel <nl> { <nl> - private final ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models ; <nl> + private final ImmutableMap < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > models ; <nl> private final VertexFormat format ; <nl> private final ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ; ; <nl> - private IBakedModel missing ; <nl> - private IBakedModel base ; <nl> - private ImmutableMap < EnumWorldBlockLayer , IBakedModel > bakedModels ; <nl> - private ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; <nl> + private final IFlexibleBakedModel base ; <nl> + private final IFlexibleBakedModel missing ; <nl> + private final ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; <nl> <nl> + private static final Function < ResourceLocation , TextureAtlasSprite > defaultTextureGetter = new Function < ResourceLocation , TextureAtlasSprite > ( ) <nl> + { <nl> + public TextureAtlasSprite apply ( ResourceLocation location ) <nl> + { <nl> + return Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( location . toString ( ) ) ; <nl> + } <nl> + } ; <nl> + <nl> + @ Deprecated / / remove 1 . 9 <nl> public MultiLayerBakedModel ( ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models , VertexFormat format , ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ) <nl> { <nl> - this . models = models ; <nl> - this . format = format ; <nl> - this . cameraTransforms = cameraTransforms ; <nl> + this ( <nl> + buildModels ( models , TRSRTransformation . identity ( ) , format , defaultTextureGetter ) , <nl> + ModelLoaderRegistry . getMissingModel ( ) . bake ( ModelLoaderRegistry . getMissingModel ( ) . getDefaultState ( ) , format , defaultTextureGetter ) , <nl> + format , <nl> + cameraTransforms <nl> + ) ; <nl> } <nl> <nl> - private void compute ( ) <nl> + public MultiLayerBakedModel ( ImmutableMap < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > models , IFlexibleBakedModel missing , VertexFormat format , ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ) <nl> { <nl> - if ( base = = null ) <nl> + this . models = models ; <nl> + this . format = format ; <nl> + this . cameraTransforms = cameraTransforms ; <nl> + this . missing = missing ; <nl> + if ( models . containsKey ( Optional . absent ( ) ) ) <nl> { <nl> - ModelManager manager = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelManager ( ) ; <nl> - missing = manager . getMissingModel ( ) ; <nl> - base = getModel ( manager , Optional . < EnumWorldBlockLayer > absent ( ) ) ; <nl> - <nl> - ImmutableMap . Builder < EnumWorldBlockLayer , IBakedModel > builder = ImmutableMap . builder ( ) ; <nl> - for ( EnumWorldBlockLayer layer : EnumWorldBlockLayer . values ( ) ) <nl> - { <nl> - if ( models . containsKey ( Optional . of ( layer ) ) ) <nl> - { <nl> - builder . put ( layer , getModel ( manager , Optional . of ( layer ) ) ) ; <nl> - } <nl> - } <nl> - bakedModels = builder . build ( ) ; <nl> - <nl> - ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > quadBuilder = ImmutableMap . builder ( ) ; <nl> - quadBuilder . put ( Optional . < EnumFacing > absent ( ) , buildQuads ( Optional . < EnumFacing > absent ( ) ) ) ; <nl> - for ( EnumFacing side : EnumFacing . values ( ) ) <nl> - { <nl> - quadBuilder . put ( Optional . of ( side ) , buildQuads ( Optional . of ( side ) ) ) ; <nl> - } <nl> - quads = quadBuilder . build ( ) ; <nl> + base = models . get ( Optional . absent ( ) ) ; <nl> } <nl> - } <nl> - <nl> - private IBakedModel getModel ( ModelManager manager , Optional < EnumWorldBlockLayer > layer ) <nl> - { <nl> - ModelResourceLocation loc = models . get ( layer ) ; <nl> - if ( loc = = null ) <nl> + else <nl> + { <nl> + base = missing ; <nl> + } <nl> + ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > quadBuilder = ImmutableMap . builder ( ) ; <nl> + quadBuilder . put ( Optional . < EnumFacing > absent ( ) , buildQuads ( models , Optional . < EnumFacing > absent ( ) ) ) ; <nl> + for ( EnumFacing side : EnumFacing . values ( ) ) <nl> { <nl> - loc = new ModelResourceLocation ( " builtin / missing " , " missing " ) ; <nl> + quadBuilder . put ( Optional . of ( side ) , buildQuads ( models , Optional . of ( side ) ) ) ; <nl> } <nl> - return manager . getModel ( loc ) ; <nl> + quads = quadBuilder . build ( ) ; <nl> } <nl> <nl> - private ImmutableList < BakedQuad > buildQuads ( Optional < EnumFacing > side ) <nl> + private static ImmutableList < BakedQuad > buildQuads ( ImmutableMap < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > models , Optional < EnumFacing > side ) <nl> { <nl> ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> - for ( IBakedModel model : bakedModels . values ( ) ) <nl> + for ( IBakedModel model : models . values ( ) ) <nl> { <nl> if ( side . isPresent ( ) ) <nl> { <nl> @ @ - 175 , 42 + 198 , 36 @ @ public class MultiLayerModel implements IModelCustomData <nl> @ Override <nl> public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> { <nl> - compute ( ) ; <nl> return quads . get ( Optional . of ( side ) ) ; <nl> } <nl> <nl> @ Override <nl> public List < BakedQuad > getGeneralQuads ( ) <nl> { <nl> - compute ( ) ; <nl> return quads . get ( Optional . absent ( ) ) ; <nl> } <nl> <nl> @ Override <nl> public boolean isAmbientOcclusion ( ) <nl> { <nl> - compute ( ) ; <nl> return base . isAmbientOcclusion ( ) ; <nl> } <nl> <nl> @ Override <nl> public boolean isGui3d ( ) <nl> { <nl> - compute ( ) ; <nl> return base . isGui3d ( ) ; <nl> } <nl> <nl> @ Override <nl> public boolean isBuiltInRenderer ( ) <nl> { <nl> - compute ( ) ; <nl> return base . isBuiltInRenderer ( ) ; <nl> } <nl> <nl> @ Override <nl> public TextureAtlasSprite getParticleTexture ( ) <nl> { <nl> - compute ( ) ; <nl> return base . getParticleTexture ( ) ; <nl> } <nl> <nl> @ @ - 223 , 13 + 240 , 12 @ @ public class MultiLayerModel implements IModelCustomData <nl> @ Override <nl> public IBakedModel handleBlockState ( IBlockState state ) <nl> { <nl> - compute ( ) ; <nl> - EnumWorldBlockLayer layer = MinecraftForgeClient . getRenderLayer ( ) ; <nl> - if ( ! bakedModels . containsKey ( layer ) ) <nl> + Optional < EnumWorldBlockLayer > layer = Optional . of ( MinecraftForgeClient . getRenderLayer ( ) ) ; <nl> + if ( ! models . containsKey ( layer ) ) <nl> { <nl> return missing ; <nl> } <nl> - return bakedModels . get ( layer ) ; <nl> + return models . get ( layer ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json b / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json <nl> index 50a1efe . . 15a23f0 100644 <nl> - - - a / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json <nl> + + + b / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json <nl> @ @ - 4 , 15 + 4 , 20 @ @ <nl> " model " : " forge : multi - layer " , <nl> " custom " : { <nl> / / base is used for model properties - camera transforms , isGui3d , e . t . c . <nl> - " base " : " minecraft : stone _ slab # half = bottom " , <nl> + " base " : " forgedebugmultilayermodel : test _ layer _ block # aux " , <nl> / / per - layer models <nl> - " Solid " : " minecraft : stone _ slab # half = bottom " , <nl> + " Solid " : " forgedebugmultilayermodel : test _ layer _ block # aux " , <nl> " Translucent " : " minecraft : pink _ stained _ glass _ pane # east = true , north = false , south = false , west = true " <nl> } , <nl> " transform " : " forge : default - block " <nl> } , <nl> " variants " : { <nl> " normal " : [ { } ] , <nl> - " inventory " : [ { } ] <nl> + " inventory " : [ { } ] , <nl> + " aux " : [ { <nl> + " model " : " cube _ all " , <nl> + " textures " : { " all " : " blocks / slime " } , <nl> + " transform " : { " scale " : . 5 } <nl> + } ] <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / FancyMissingModel . java b / src / main / java / net / minecraftforge / client / model / FancyMissingModel . java 
 new file mode 100644 
 index 0000000 . . 435d551 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / FancyMissingModel . java 
 @ @ - 0 , 0 + 1 , 223 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import com . google . common . base . Function ; 
 + import com . google . common . base . Optional ; 
 + import com . google . common . cache . CacheBuilder ; 
 + import com . google . common . cache . CacheLoader ; 
 + import com . google . common . cache . LoadingCache ; 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . Lists ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . IBakedModel ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . block . model . ItemOverrideList ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . model . IModelState ; 
 + import net . minecraftforge . common . model . TRSRTransformation ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 + 
 + import javax . annotation . Nullable ; 
 + import javax . vecmath . Matrix4f ; 
 + import javax . vecmath . Quat4f ; 
 + import javax . vecmath . Vector3f ; 
 + import java . util . Collection ; 
 + import java . util . List ; 
 + 
 + final class FancyMissingModel implements IModel 
 + { 
 + private static final ResourceLocation font = new ResourceLocation ( " minecraft " , " textures / font / ascii . png " ) ; 
 + private static final ResourceLocation font2 = new ResourceLocation ( " minecraft " , " font / ascii " ) ; 
 + private static final TRSRTransformation smallTransformation = TRSRTransformation . blockCenterToCorner ( new TRSRTransformation ( null , null , new Vector3f ( . 25f , . 25f , . 25f ) , null ) ) ; 
 + private static final LoadingCache < VertexFormat , SimpleModelFontRenderer > fontCache = CacheBuilder . newBuilder ( ) . maximumSize ( 3 ) . build ( new CacheLoader < VertexFormat , SimpleModelFontRenderer > ( ) 
 + { 
 + public SimpleModelFontRenderer load ( VertexFormat format ) throws Exception 
 + { 
 + Matrix4f m = new Matrix4f ( ) ; 
 + m . m20 = 1f / 128f ; 
 + m . m01 = m . m12 = - m . m20 ; 
 + m . m33 = 1 ; 
 + m . setTranslation ( new Vector3f ( 1 , 1 + 1f / 0x100 , 0 ) ) ; 
 + return new SimpleModelFontRenderer ( 
 + Minecraft . getMinecraft ( ) . gameSettings , 
 + font , 
 + Minecraft . getMinecraft ( ) . getTextureManager ( ) , 
 + false , 
 + m , 
 + format 
 + ) { 
 + @ Override 
 + protected float renderUnicodeChar ( char c , boolean italic ) 
 + { 
 + return super . renderDefaultChar ( 126 , italic ) ; 
 + } 
 + } ; 
 + } 
 + } ) ; 
 + 
 + private final IModel missingModel ; 
 + private final String message ; 
 + 
 + public FancyMissingModel ( IModel missingModel , String message ) 
 + { 
 + this . missingModel = missingModel ; 
 + this . message = message ; 
 + } 
 + 
 + @ Override 
 + public Collection < ResourceLocation > getDependencies ( ) 
 + { 
 + return ImmutableList . of ( ) ; 
 + } 
 + 
 + @ Override 
 + public Collection < ResourceLocation > getTextures ( ) 
 + { 
 + return ImmutableList . of ( font2 ) ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 + { 
 + IBakedModel bigMissing = missingModel . bake ( state , format , bakedTextureGetter ) ; 
 + IModelState smallState = new ModelStateComposition ( state , smallTransformation ) ; 
 + IBakedModel smallMissing = missingModel . bake ( smallState , format , bakedTextureGetter ) ; 
 + return new BakedModel ( bigMissing , smallMissing , fontCache . getUnchecked ( format ) , message , bakedTextureGetter . apply ( font2 ) ) ; 
 + } 
 + 
 + @ Override 
 + public IModelState getDefaultState ( ) 
 + { 
 + return TRSRTransformation . identity ( ) ; 
 + } 
 + 
 + private static final class BakedModel implements IPerspectiveAwareModel 
 + { 
 + private final SimpleModelFontRenderer fontRenderer ; 
 + private final String message ; 
 + private final TextureAtlasSprite fontTexture ; 
 + private final IBakedModel missingModel ; 
 + private final IBakedModel otherModel ; 
 + private final boolean big ; 
 + private ImmutableList < BakedQuad > quads ; 
 + 
 + public BakedModel ( IBakedModel bigMissing , IBakedModel smallMissing , SimpleModelFontRenderer fontRenderer , String message , TextureAtlasSprite fontTexture ) 
 + { 
 + this . missingModel = bigMissing ; 
 + otherModel = new BakedModel ( smallMissing , fontRenderer , message , fontTexture , this ) ; 
 + this . big = true ; 
 + this . fontRenderer = fontRenderer ; 
 + this . message = message ; 
 + this . fontTexture = fontTexture ; 
 + } 
 + 
 + public BakedModel ( IBakedModel smallMissing , SimpleModelFontRenderer fontRenderer , String message , TextureAtlasSprite fontTexture , BakedModel big ) 
 + { 
 + this . missingModel = smallMissing ; 
 + otherModel = big ; 
 + this . big = false ; 
 + this . fontRenderer = fontRenderer ; 
 + this . message = message ; 
 + this . fontTexture = fontTexture ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) 
 + { 
 + if ( side = = null ) 
 + { 
 + if ( quads = = null ) 
 + { 
 + fontRenderer . setSprite ( fontTexture ) ; 
 + fontRenderer . setFillBlanks ( true ) ; 
 + String [ ] lines = message . split ( " \ \ r ? \ \ n " ) ; 
 + List < String > splitLines = Lists . newArrayList ( ) ; 
 + for ( int y = 0 ; y < lines . length ; y + + ) 
 + { 
 + splitLines . addAll ( fontRenderer . listFormattedStringToWidth ( lines [ y ] , 0x80 ) ) ; 
 + } 
 + for ( int y = 0 ; y < splitLines . size ( ) ; y + + ) 
 + { 
 + fontRenderer . drawString ( splitLines . get ( y ) , 0 , ( int ) ( ( y - splitLines . size ( ) / 2f ) * fontRenderer . FONT _ HEIGHT ) + 0x40 , 0xFF00FFFF ) ; 
 + } 
 + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 + builder . addAll ( missingModel . getQuads ( state , side , rand ) ) ; 
 + builder . addAll ( fontRenderer . build ( ) ) ; 
 + quads = builder . build ( ) ; 
 + } 
 + return quads ; 
 + } 
 + return missingModel . getQuads ( state , side , rand ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) { return true ; } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) { return false ; } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) { return false ; } 
 + 
 + @ Override 
 + public TextureAtlasSprite getParticleTexture ( ) { return fontTexture ; } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } 
 + 
 + @ Override 
 + public ItemOverrideList getOverrides ( ) { return ItemOverrideList . NONE ; } 
 + 
 + @ Override 
 + public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( ItemCameraTransforms . TransformType cameraTransformType ) 
 + { 
 + TRSRTransformation transform = TRSRTransformation . identity ( ) ; 
 + boolean big = true ; 
 + switch ( cameraTransformType ) 
 + { 
 + 
 + case THIRD _ PERSON _ LEFT _ HAND : 
 + break ; 
 + case THIRD _ PERSON _ RIGHT _ HAND : 
 + break ; 
 + case FIRST _ PERSON _ LEFT _ HAND : 
 + transform = new TRSRTransformation ( new Vector3f ( - 0 . 62f , 0 . 5f , - . 5f ) , new Quat4f ( 1 , - 1 , - 1 , 1 ) , null , null ) ; 
 + big = false ; 
 + break ; 
 + case FIRST _ PERSON _ RIGHT _ HAND : 
 + transform = new TRSRTransformation ( new Vector3f ( - 0 . 5f , 0 . 5f , - . 5f ) , new Quat4f ( 1 , 1 , 1 , 1 ) , null , null ) ; 
 + big = false ; 
 + break ; 
 + case HEAD : 
 + break ; 
 + case GUI : 
 + if ( ForgeModContainer . zoomInMissingModelTextInGui ) 
 + { 
 + transform = new TRSRTransformation ( null , new Quat4f ( 1 , 1 , 1 , 1 ) , new Vector3f ( 4 , 4 , 4 ) , null ) ; 
 + big = false ; 
 + } 
 + else 
 + { 
 + transform = new TRSRTransformation ( null , new Quat4f ( 1 , 1 , 1 , 1 ) , null , null ) ; 
 + big = true ; 
 + } 
 + break ; 
 + case FIXED : 
 + transform = new TRSRTransformation ( null , new Quat4f ( - 1 , - 1 , 1 , 1 ) , null , null ) ; 
 + break ; 
 + default : 
 + break ; 
 + } 
 + if ( big ! = this . big ) 
 + { 
 + return Pair . of ( otherModel , transform . getMatrix ( ) ) ; 
 + } 
 + return Pair . of ( this , transform . getMatrix ( ) ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 5a773e3 . . ab33c3d 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 262 , 7 + 262 , 7 @ @ public final class ModelLoader extends ModelBakery 
 catch ( Exception e ) 
 { 
 storeException ( location , e ) ; 
 - model = getMissingModel ( ) ; 
 + model = ModelLoaderRegistry . getMissingModel ( location , e ) ; 
 } 
 stateModels . put ( location , model ) ; 
 } 
 @ @ - 348 , 11 + 348 , 12 @ @ public final class ModelLoader extends ModelBakery 
 exception = new ItemLoadingException ( " Could not load item model either from the normal location " + file + " or from the blockstate " , normalException , blockstateException ) ; 
 } 
 } 
 - stateModels . put ( memory , model ) ; 
 if ( exception ! = null ) 
 { 
 storeException ( memory , exception ) ; 
 + model = ModelLoaderRegistry . getMissingModel ( memory , exception ) ; 
 } 
 + stateModels . put ( memory , model ) ; 
 } 
 } 
 ProgressManager . pop ( itemBar ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 index 5b147d1 . . 14ceec4 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 @ @ - 189 , 7 + 189 , 7 @ @ public class ModelLoaderRegistry 
 } 
 catch ( Exception e ) 
 { 
 - return getMissingModel ( ) ; 
 + return getMissingModel ( location , e ) ; 
 } 
 } 
 
 @ @ - 205 , 7 + 205 , 7 @ @ public class ModelLoaderRegistry 
 catch ( Exception e ) 
 { 
 FMLLog . getLogger ( ) . error ( error , e ) ; 
 - return getMissingModel ( ) ; 
 + return getMissingModel ( location , e ) ; 
 } 
 } 
 
 @ @ - 218 , 6 + 218 , 14 @ @ public class ModelLoaderRegistry 
 return ModelLoader . VanillaLoader . INSTANCE . getLoader ( ) . getMissingModel ( ) ; 
 } 
 
 + static IModel getMissingModel ( ResourceLocation location , Throwable cause ) 
 + { 
 + / / IModel model = new FancyMissingModel ( ExceptionUtils . getStackTrace ( cause ) . replaceAll ( " \ \ t " , " " ) ) ; 
 + IModel model = new FancyMissingModel ( getMissingModel ( ) , location . toString ( ) ) ; 
 + textures . addAll ( model . getTextures ( ) ) ; 
 + return model ; 
 + } 
 + 
 public static void clearModelCache ( IResourceManager manager ) 
 { 
 ModelLoaderRegistry . manager = manager ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java b / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java 
 new file mode 100644 
 index 0000000 . . 31e2c2d 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java 
 @ @ - 0 , 0 + 1 , 179 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import javax . vecmath . Matrix3f ; 
 + import javax . vecmath . Matrix4f ; 
 + import javax . vecmath . Vector3f ; 
 + import javax . vecmath . Vector4f ; 
 + 
 + import net . minecraftforge . client . model . pipeline . UnpackedBakedQuad ; 
 + 
 + import com . google . common . collect . ImmutableList ; 
 + 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . gui . FontRenderer ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . texture . TextureManager ; 
 + import net . minecraft . client . renderer . texture . TextureMap ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . resources . IResourceManager ; 
 + import net . minecraft . client . settings . GameSettings ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . ResourceLocation ; 
 + 
 + public abstract class SimpleModelFontRenderer extends FontRenderer { 
 + 
 + private float r , g , b , a ; 
 + private final Matrix4f matrix ; 
 + private ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 + private final VertexFormat format ; 
 + private final Vector3f normal = new Vector3f ( 0 , 0 , 1 ) ; 
 + private final EnumFacing orientation ; 
 + private boolean fillBlanks = false ; 
 + 
 + private TextureAtlasSprite sprite ; 
 + 
 + public SimpleModelFontRenderer ( GameSettings settings , ResourceLocation font , TextureManager manager , boolean isUnicode , Matrix4f matrix , VertexFormat format ) 
 + { 
 + super ( settings , font , manager , isUnicode ) ; 
 + manager . bindTexture ( TextureMap . LOCATION _ BLOCKS _ TEXTURE ) ; 
 + this . matrix = new Matrix4f ( matrix ) ; 
 + Matrix3f nm = new Matrix3f ( ) ; 
 + this . matrix . getRotationScale ( nm ) ; 
 + nm . invert ( ) ; 
 + nm . transpose ( ) ; 
 + this . format = format ; 
 + nm . transform ( normal ) ; 
 + normal . normalize ( ) ; 
 + orientation = EnumFacing . getFacingFromVector ( normal . x , normal . y , normal . z ) ; 
 + } 
 + 
 + public void setSprite ( TextureAtlasSprite sprite ) 
 + { 
 + this . sprite = sprite ; 
 + super . onResourceManagerReload ( null ) ; 
 + } 
 + 
 + public void setFillBlanks ( boolean fillBlanks ) 
 + { 
 + this . fillBlanks = fillBlanks ; 
 + } 
 + 
 + @ Override 
 + protected float renderDefaultChar ( int pos , boolean italic ) 
 + { 
 + float x = ( pos % 16 ) / 16f ; 
 + float y = ( pos / 16 ) / 16f ; 
 + float sh = italic ? 1f : 0f ; 
 + float w = charWidth [ pos ] - 1 . 01f ; 
 + float h = FONT _ HEIGHT - 1 . 01f ; 
 + float wt = w / 128f ; 
 + float ht = h / 128f ; 
 + 
 + UnpackedBakedQuad . Builder quadBuilder = new UnpackedBakedQuad . Builder ( format ) ; 
 + quadBuilder . setQuadOrientation ( orientation ) ; 
 + 
 + addVertex ( quadBuilder , posX + sh , posY , x , y ) ; 
 + addVertex ( quadBuilder , posX - sh , posY + h , x , y + ht ) ; 
 + addVertex ( quadBuilder , posX + w + sh , posY + h , x + wt , y + ht ) ; 
 + addVertex ( quadBuilder , posX + w - sh , posY , x + wt , y ) ; 
 + builder . add ( quadBuilder . build ( ) ) ; 
 + 
 + if ( fillBlanks ) 
 + { 
 + float cuv = 15f / 16f ; 
 + 
 + quadBuilder = new UnpackedBakedQuad . Builder ( format ) ; 
 + quadBuilder . setQuadOrientation ( orientation ) ; 
 + 
 + addVertex ( quadBuilder , posX + w + sh , posY , cuv , cuv ) ; 
 + addVertex ( quadBuilder , posX + w - sh , posY + h , cuv , cuv ) ; 
 + addVertex ( quadBuilder , posX + charWidth [ pos ] + sh , posY + h , cuv , cuv ) ; 
 + addVertex ( quadBuilder , posX + charWidth [ pos ] - sh , posY , cuv , cuv ) ; 
 + builder . add ( quadBuilder . build ( ) ) ; 
 + 
 + quadBuilder = new UnpackedBakedQuad . Builder ( format ) ; 
 + quadBuilder . setQuadOrientation ( orientation ) ; 
 + 
 + addVertex ( quadBuilder , posX + sh , posY + h , cuv , cuv ) ; 
 + addVertex ( quadBuilder , posX - sh , posY + FONT _ HEIGHT , cuv , cuv ) ; 
 + addVertex ( quadBuilder , posX + charWidth [ pos ] + sh , posY + FONT _ HEIGHT , cuv , cuv ) ; 
 + addVertex ( quadBuilder , posX + charWidth [ pos ] - sh , posY + h , cuv , cuv ) ; 
 + builder . add ( quadBuilder . build ( ) ) ; 
 + } 
 + return charWidth [ pos ] ; 
 + } 
 + 
 + private final Vector4f vec = new Vector4f ( ) ; 
 + 
 + private void addVertex ( UnpackedBakedQuad . Builder quadBuilder , float x , float y , float u , float v ) 
 + { 
 + vec . x = x ; 
 + vec . y = y ; 
 + vec . z = 0 ; 
 + vec . w = 1 ; 
 + matrix . transform ( vec ) ; 
 + for ( int e = 0 ; e < format . getElementCount ( ) ; e + + ) 
 + { 
 + switch ( format . getElement ( e ) . getUsage ( ) ) 
 + { 
 + case POSITION : 
 + quadBuilder . put ( e , vec . x , vec . y , vec . z , vec . w ) ; 
 + break ; 
 + case UV : 
 + quadBuilder . put ( e , sprite . getInterpolatedU ( u * 16 ) , sprite . getInterpolatedV ( v * 16 ) , 0 , 1 ) ; 
 + break ; 
 + case COLOR : 
 + quadBuilder . put ( e , r , g , b , a ) ; 
 + break ; 
 + case NORMAL : 
 + / / quadBuilder . put ( e , normal . x , normal . y , normal . z , 1 ) ; 
 + quadBuilder . put ( e , 0 , 0 , 1 , 1 ) ; 
 + break ; 
 + default : 
 + quadBuilder . put ( e ) ; 
 + break ; 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public void onResourceManagerReload ( IResourceManager resourceManager ) 
 + { 
 + super . onResourceManagerReload ( resourceManager ) ; 
 + String p = locationFontTexture . getResourcePath ( ) ; 
 + if ( p . startsWith ( " textures / " ) ) p = p . substring ( " textures / " . length ( ) , p . length ( ) ) ; 
 + if ( p . endsWith ( " . png " ) ) p = p . substring ( 0 , p . length ( ) - " . png " . length ( ) ) ; 
 + String f = locationFontTexture . getResourceDomain ( ) + " : " + p ; 
 + sprite = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( f ) ; 
 + } 
 + 
 + @ Override 
 + protected abstract float renderUnicodeChar ( char c , boolean italic ) ; 
 + 
 + @ Override 
 + protected void doDraw ( float shift ) 
 + { 
 + posX + = ( int ) shift ; 
 + } 
 + 
 + @ Override 
 + protected void setColor ( float r , float g , float b , float a ) 
 + { 
 + this . r = r ; 
 + this . g = g ; 
 + this . b = b ; 
 + this . a = a ; 
 + } 
 + 
 + @ Override public void enableAlpha ( ) 
 + { 
 + } 
 + 
 + public ImmutableList < BakedQuad > build ( ) 
 + { 
 + ImmutableList < BakedQuad > ret = builder . build ( ) ; 
 + builder = ImmutableList . builder ( ) ; 
 + return ret ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 2f3b082 . . 257389d 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 112 , 6 + 112 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean disableVersionCheck = false ; 
 public static boolean forgeLightPipelineEnabled = true ; 
 public static boolean replaceVanillaBucketModel = true ; 
 + public static boolean zoomInMissingModelTextInGui = false ; 
 public static long java8Reminder = 0 ; 
 public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag 
 public static boolean alwaysSetupTerrainOffThread = false ; / / In RenderGlobal . setupTerrain , always force the chunk render updates to be queued to the thread 
 @ @ - 283 , 12 + 284 , 19 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 
 / / Client - Side only properties 
 propOrder = new ArrayList < String > ( ) ; 
 + 
 prop = config . get ( Configuration . CATEGORY _ CLIENT , " replaceVanillaBucketModel " , Boolean . FALSE , 
 " Replace the vanilla bucket models with Forges own dynamic bucket model . Unifies bucket visuals if a mod uses the Forge bucket model . " ) ; 
 prop . setLanguageKey ( " forge . configgui . replaceBuckets " ) . setRequiresMcRestart ( true ) ; 
 replaceVanillaBucketModel = prop . getBoolean ( Boolean . FALSE ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 + prop = config . get ( Configuration . CATEGORY _ CLIENT , " zoomInMissingModelTextInGui " , Boolean . TRUE , 
 + " Toggle off to make missing model text in the gui fit inside the slot . " ) ; 
 + zoomInMissingModelTextInGui = prop . getBoolean ( Boolean . FALSE ) ; 
 + prop . setLanguageKey ( " forge . configgui . zoomInMissingModelTextInGui " ) ; 
 + propOrder . add ( prop . getName ( ) ) ; 
 + 
 prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder , 
 " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; 
 java8Reminder = prop . getLong ( java8Reminder ) ; 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 1509ec6 . . 3b40d1c 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 49 , 6 + 49 , 7 @ @ forge . configgui . replaceBuckets = Use Forge ' s bucket model 
 forge . configgui . forgeLightPipelineEnabled = Forge Light Pipeline Enabled 
 forge . configgui . java8Reminder = Java 8 Reminder timestamp 
 forge . configgui . disableStairSlabCulling = Disable Stair / Slab culling . 
 + forge . configgui . zoomInMissingModelTextInGui = Zoom in Missing model text in the GUI 
 forge . configgui . disableStairSlabCulling . tooltip = Enable this if you see through blocks touching stairs / slabs with your resource pack . 
 forge . configgui . alwaysSetupTerrainOffThread = Force threaded chunk rendering 
 forge . configgui . alwaysSetupTerrainOffThread . tooltip = Enable forge to queue all chunk updates to the Chunk Update thread . May increase FPS significantly , but may also cause weird rendering lag . Not recommended for computers without a significant number of cores available . 
 @ @ - 186 , 4 + 187 , 4 @ @ fml . button . continue = Continue 
 fml . button . open . mods . folder = Open Mods Folder 
 fml . button . open . file = Open % s 
 
 - forge . container . enchant . limitedEnchantability = Limited Enchantability 
 \ No newline at end of file 
 + forge . container . enchant . limitedEnchantability = Limited Enchantability

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 index 2559856 . . b6fb4f0 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 @ @ - 134 , 20 + 134 , 14 @ @ public class BlockStateLoader 
 
 protected IModel runModelHooks ( IModel base , ImmutableMap < String , String > textureMap , ImmutableMap < String , String > customData ) 
 { 
 - if ( ! customData . isEmpty ( ) ) 
 + if ( ! customData . isEmpty ( ) & & base instanceof IModelCustomData ) 
 { 
 - if ( base instanceof IModelCustomData ) 
 - base = ( ( IModelCustomData ) base ) . process ( customData ) ; 
 - else 
 - throw new RuntimeException ( " Attempted to add custom data to a model that doesn ' t need it : " + base ) ; 
 + base = ( ( IModelCustomData ) base ) . process ( customData ) ; 
 } 
 
 - if ( ! textureMap . isEmpty ( ) ) 
 + if ( ! textureMap . isEmpty ( ) & & base instanceof IRetexturableModel ) 
 { 
 - if ( base instanceof IRetexturableModel ) 
 - base = ( ( IRetexturableModel ) base ) . retexture ( textureMap ) ; 
 - else 
 - throw new RuntimeException ( " Attempted to retexture a non - retexturable model : " + base ) ; 
 + base = ( ( IRetexturableModel ) base ) . retexture ( textureMap ) ; 
 } 
 
 return base ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / IModel . java b / src / main / java / net / minecraftforge / client / model / IModel . java 
 index 3ac5470 . . 6a9e1c4 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IModel . java 
 @ @ - 17 , 6 + 17 , 7 @ @ public interface IModel 
 / * 
 * Returns all model locations that this model depends on . 
 * Assume that returned collection is immutable . 
 + * See ModelLoaderRegistry . getModel for dependency loading . 
 * / 
 Collection < ResourceLocation > getDependencies ( ) ; 
 
 diff - - git a / src / main / java / net / minecraftforge / client / model / MapModelState . java b / src / main / java / net / minecraftforge / client / model / MapModelState . java 
 index 62d9391 . . 2f1469f 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / MapModelState . java 
 + + + b / src / main / java / net / minecraftforge / client / model / MapModelState . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import com . google . common . collect . ImmutableMap ; 
 
 / * 
 * Simple implementation of IModelState via a map and a default value . Provides a full state for each part . 
 + * You probably don ' t want to use this . 
 * / 
 public class MapModelState implements IModelState 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 9404ff5 . . 865d402 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 330 , 13 + 330 , 21 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + private IModel getVariantModel ( ModelResourceLocation location ) 
 + { 
 + loadVariants ( ImmutableList . of ( location ) ) ; 
 + IModel model = stateModels . get ( location ) ; 
 + if ( model = = null ) model = getMissingModel ( ) ; 
 + return model ; 
 + } 
 + 
 private void resolveDependencies ( IModel model ) throws IOException 
 { 
 for ( ResourceLocation dep : model . getDependencies ( ) ) 
 { 
 if ( dep instanceof ModelResourceLocation ) 
 { 
 - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 + getVariantModel ( ( ModelResourceLocation ) dep ) ; 
 } 
 else 
 { 
 @ @ - 598 , 37 + 606 , 6 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 - / / Weighted models can contain multiple copies of 1 model with different rotations - this is to make it work with IModelState ( different copies will be different objects ) . 
 - private static class WeightedPartWrapper implements IModel 
 - { 
 - private final IModel model ; 
 - 
 - public WeightedPartWrapper ( IModel model ) 
 - { 
 - this . model = model ; 
 - } 
 - 
 - public Collection < ResourceLocation > getDependencies ( ) 
 - { 
 - return model . getDependencies ( ) ; 
 - } 
 - 
 - public Collection < ResourceLocation > getTextures ( ) 
 - { 
 - return model . getTextures ( ) ; 
 - } 
 - 
 - public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 - { 
 - return model . bake ( state , format , bakedTextureGetter ) ; 
 - } 
 - 
 - public IModelState getDefaultState ( ) 
 - { 
 - return model . getDefaultState ( ) ; 
 - } 
 - } 
 - 
 private class WeightedRandomModel implements IModel 
 { 
 private final List < Variant > variants ; 
 @ @ - 636 , 11 + 613 , 10 @ @ public class ModelLoader extends ModelBakery 
 private final List < IModel > models = new ArrayList < IModel > ( ) ; 
 private final IModelState defaultState ; 
 
 - @ Deprecated @ SuppressWarnings ( " unused " ) public WeightedRandomModel ( Variants variants ) { this ( null , variants ) ; } / / Remove 1 . 9 
 public WeightedRandomModel ( ModelResourceLocation parent , Variants variants ) 
 { 
 this . variants = variants . getVariants ( ) ; 
 - ImmutableMap . Builder < MapModelState . Wrapper , IModelState > builder = ImmutableMap . builder ( ) ; 
 + ImmutableList . Builder < Pair < IModel , IModelState > > builder = ImmutableList . builder ( ) ; 
 for ( Variant v : ( List < Variant > ) variants . getVariants ( ) ) 
 { 
 ResourceLocation loc = v . getModelLocation ( ) ; 
 @ @ - 676 , 20 + 652 , 18 @ @ public class ModelLoader extends ModelBakery 
 textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . 
 } 
 
 - model = new WeightedPartWrapper ( model ) ; 
 models . add ( model ) ; 
 - builder . put ( MapModelState . wrap ( model ) , v . getState ( ) ) ; 
 + builder . add ( Pair . of ( model , v . getState ( ) ) ) ; 
 } 
 
 if ( models . size ( ) = = 0 ) / / If all variants are missing , add one with the missing model and default rotation . 
 { 
 IModel missing = getMissingModel ( ) ; 
 models . add ( missing ) ; 
 - builder . put ( MapModelState . wrap ( missing ) , TRSRTransformation . identity ( ) ) ; 
 + builder . add ( Pair . < IModel , IModelState > of ( missing , TRSRTransformation . identity ( ) ) ) ; 
 } 
 
 - defaultState = new MapModelState ( builder . build ( ) ) ; 
 - 
 + defaultState = new MultiModelState ( builder . build ( ) ) ; 
 } 
 
 public Collection < ResourceLocation > getDependencies ( ) 
 @ @ - 708 , 15 + 682 , 6 @ @ public class ModelLoader extends ModelBakery 
 return state ; 
 } 
 
 - private IModelState getState ( IModelState state , IModel model ) 
 - { 
 - if ( state instanceof MapModelState ) 
 - { 
 - return ( ( MapModelState ) state ) . getState ( model ) ; 
 - } 
 - return state ; 
 - } 
 - 
 public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 { 
 if ( ! Attributes . moreSpecific ( format , Attributes . DEFAULT _ BAKED _ FORMAT ) ) 
 @ @ - 727 , 14 + 692 , 14 @ @ public class ModelLoader extends ModelBakery 
 { 
 Variant v = variants . get ( 0 ) ; 
 IModel model = models . get ( 0 ) ; 
 - return model . bake ( addUV ( v . isUvLocked ( ) , getState ( state , model ) ) , format , bakedTextureGetter ) ; 
 + return model . bake ( addUV ( v . isUvLocked ( ) , MultiModelState . getPartState ( state , model , 0 ) ) , format , bakedTextureGetter ) ; 
 } 
 WeightedBakedModel . Builder builder = new WeightedBakedModel . Builder ( ) ; 
 for ( int i = 0 ; i < variants . size ( ) ; i + + ) 
 { 
 IModel model = models . get ( i ) ; 
 Variant v = variants . get ( i ) ; 
 - builder . add ( model . bake ( addUV ( v . isUvLocked ( ) , getState ( state , model ) ) , format , bakedTextureGetter ) , variants . get ( i ) . getWeight ( ) ) ; 
 + builder . add ( model . bake ( addUV ( v . isUvLocked ( ) , MultiModelState . getPartState ( state , model , i ) ) , format , bakedTextureGetter ) , variants . get ( i ) . getWeight ( ) ) ; 
 } 
 return new FlexibleWeightedBakedModel ( builder . build ( ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; 
 } 
 @ @ - 747 , 14 + 712 , 11 @ @ public class ModelLoader extends ModelBakery 
 
 private static class FlexibleWeightedBakedModel extends WeightedBakedModel implements IFlexibleBakedModel 
 { 
 - @ SuppressWarnings ( " unused " ) 
 - private final WeightedBakedModel parent ; 
 private final VertexFormat format ; 
 
 public FlexibleWeightedBakedModel ( WeightedBakedModel parent , VertexFormat format ) 
 { 
 super ( parent . models ) ; 
 - this . parent = parent ; 
 this . format = format ; 
 } 
 
 @ @ - 764 , 12 + 726 , 6 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 - @ SuppressWarnings ( " unused " ) 
 - private boolean isBuiltinModel ( ModelBlock model ) 
 - { 
 - return model = = MODEL _ GENERATED | | model = = MODEL _ COMPASS | | model = = MODEL _ CLOCK | | model = = MODEL _ ENTITY ; 
 - } 
 - 
 public IModel getMissingModel ( ) 
 { 
 if ( missingModel = = null ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 index c500827 . . 09d43a8 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 @ @ - 10 , 6 + 10 , 7 @ @ import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . resources . IReloadableResourceManager ; 
 import net . minecraft . client . resources . IResourceManager ; 
 import net . minecraft . client . resources . IResourceManagerReloadListener ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . client . model . ModelLoader . VanillaLoader ; 
 import net . minecraftforge . client . model . b3d . B3DLoader ; 
 @ @ - 64 , 58 + 65 , 79 @ @ public class ModelLoaderRegistry 
 return new ResourceLocation ( location . getResourceDomain ( ) , " models / " + location . getResourcePath ( ) ) ; 
 } 
 
 + / * * 
 + * Primary method to get IModel instances . 
 + * ResourceLocation argument will be passed directly to the custom model loaders , 
 + * ModelResourceLocation argument will be loaded through the blockstate system . 
 + * / 
 public static IModel getModel ( ResourceLocation location ) throws IOException 
 { 
 - if ( cache . containsKey ( location ) ) return cache . get ( location ) ; 
 - ResourceLocation actual = getActualLocation ( location ) ; 
 - ICustomModelLoader accepted = null ; 
 - for ( ICustomModelLoader loader : loaders ) 
 + IModel model ; 
 + if ( location instanceof ModelResourceLocation ) 
 { 
 - try 
 + ModelLoader loader = ModelLoader . VanillaLoader . instance . getLoader ( ) ; 
 + if ( loader ! = null ) 
 { 
 - if ( loader . accepts ( actual ) ) 
 - { 
 - if ( accepted ! = null ) 
 - { 
 - FMLLog . severe ( " 2 loaders ( % s and % s ) want to load the same model % s " , accepted , loader , location ) ; 
 - throw new IllegalStateException ( " 2 loaders want to load the same model " ) ; 
 - } 
 - accepted = loader ; 
 - } 
 + model = loader . getVariantModel ( ( ModelResourceLocation ) location ) ; 
 } 
 - catch ( Exception e ) 
 + else 
 { 
 - FMLLog . log ( Level . ERROR , e , " Exception checking if model % s can be loaded with loader % s , skipping " , location , loader ) ; 
 + FMLLog . log ( Level . ERROR , " Loading model too early , skipping : % s " , location ) ; 
 + model = getMissingModel ( ) ; 
 } 
 } 
 - 
 - / / no custom loaders found , try vanilla one 
 - if ( accepted = = null ) 
 - { 
 - if ( VanillaLoader . instance . accepts ( actual ) ) accepted = VanillaLoader . instance ; 
 - } 
 - 
 - IModel model ; 
 - if ( accepted = = null ) 
 - { 
 - FMLLog . severe ( " no suitable loader found for the model % s , skipping " , location ) ; 
 - model = getMissingModel ( ) ; 
 - } 
 else 
 { 
 - try 
 + if ( cache . containsKey ( location ) ) return cache . get ( location ) ; 
 + ResourceLocation actual = getActualLocation ( location ) ; 
 + ICustomModelLoader accepted = null ; 
 + for ( ICustomModelLoader loader : loaders ) 
 { 
 - model = accepted . loadModel ( actual ) ; 
 + try 
 + { 
 + if ( loader . accepts ( actual ) ) 
 + { 
 + if ( accepted ! = null ) 
 + { 
 + FMLLog . severe ( " 2 loaders ( % s and % s ) want to load the same model % s " , accepted , loader , location ) ; 
 + throw new IllegalStateException ( " 2 loaders want to load the same model " ) ; 
 + } 
 + accepted = loader ; 
 + } 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Exception checking if model % s can be loaded with loader % s , skipping " , location , loader ) ; 
 + } 
 } 
 - catch ( IOException e ) 
 + 
 + / / no custom loaders found , try vanilla one 
 + if ( accepted = = null ) 
 { 
 - throw e ; 
 + if ( VanillaLoader . instance . accepts ( actual ) ) accepted = VanillaLoader . instance ; 
 } 
 - catch ( Exception e ) 
 + 
 + if ( accepted = = null ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Exception loading model % s with loader % s , skipping " , location , accepted ) ; 
 + FMLLog . severe ( " no suitable loader found for the model % s , skipping " , location ) ; 
 model = getMissingModel ( ) ; 
 } 
 + else 
 + { 
 + try 
 + { 
 + model = accepted . loadModel ( actual ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw e ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Exception loading model % s with loader % s , skipping " , location , accepted ) ; 
 + model = getMissingModel ( ) ; 
 + } 
 + } 
 } 
 cache . put ( location , model ) ; 
 return model ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 index fa8eb1a . . 18a8eed 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package net . minecraftforge . client . model ; 
 
 + import java . io . IOException ; 
 import java . util . Collection ; 
 import java . util . List ; 
 
 @ @ - 14 , 7 + 15 , 6 @ @ import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . vertex . VertexFormat ; 
 import net . minecraft . client . resources . IResourceManager ; 
 import net . minecraft . client . resources . model . IBakedModel ; 
 - import net . minecraft . client . resources . model . ModelManager ; 
 import net . minecraft . client . resources . model . ModelResourceLocation ; 
 import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . EnumWorldBlockLayer ; 
 @ @ - 23 , 6 + 23 , 7 @ @ import net . minecraftforge . client . MinecraftForgeClient ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 + import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 @ @ - 54 , 10 + 55 , 36 @ @ public class MultiLayerModel implements IModelCustomData 
 return ImmutableList . of ( ) ; 
 } 
 
 + private static ImmutableMap < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > buildModels ( ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models , IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 + { 
 + ImmutableMap . Builder < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > builder = ImmutableMap . builder ( ) ; 
 + for ( Optional < EnumWorldBlockLayer > key : models . keySet ( ) ) 
 + { 
 + IModel model ; 
 + try 
 + { 
 + model = ModelLoaderRegistry . getModel ( models . get ( key ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Couldn ' t load MultiLayerModel dependency : % s " , models . get ( key ) ) ; 
 + model = ModelLoaderRegistry . getMissingModel ( ) ; 
 + } 
 + builder . put ( key , model . bake ( new ModelStateComposition ( state , model . getDefaultState ( ) ) , format , bakedTextureGetter ) ) ; 
 + } 
 + return builder . build ( ) ; 
 + } 
 + 
 @ Override 
 public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 { 
 - return new MultiLayerBakedModel ( models , format , IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) ) ; 
 + IModel missing = ModelLoaderRegistry . getMissingModel ( ) ; 
 + return new MultiLayerBakedModel ( 
 + buildModels ( models , state , format , bakedTextureGetter ) , 
 + missing . bake ( missing . getDefaultState ( ) , format , bakedTextureGetter ) , 
 + format , 
 + IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) 
 + ) ; 
 } 
 
 @ Override 
 @ @ - 102 , 63 + 129 , 59 @ @ public class MultiLayerModel implements IModelCustomData 
 
 public static class MultiLayerBakedModel implements IFlexibleBakedModel , ISmartBlockModel , IPerspectiveAwareModel 
 { 
 - private final ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models ; 
 + private final ImmutableMap < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > models ; 
 private final VertexFormat format ; 
 private final ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ; ; 
 - private IBakedModel missing ; 
 - private IBakedModel base ; 
 - private ImmutableMap < EnumWorldBlockLayer , IBakedModel > bakedModels ; 
 - private ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; 
 + private final IFlexibleBakedModel base ; 
 + private final IFlexibleBakedModel missing ; 
 + private final ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; 
 
 + private static final Function < ResourceLocation , TextureAtlasSprite > defaultTextureGetter = new Function < ResourceLocation , TextureAtlasSprite > ( ) 
 + { 
 + public TextureAtlasSprite apply ( ResourceLocation location ) 
 + { 
 + return Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( location . toString ( ) ) ; 
 + } 
 + } ; 
 + 
 + @ Deprecated / / remove 1 . 9 
 public MultiLayerBakedModel ( ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models , VertexFormat format , ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ) 
 { 
 - this . models = models ; 
 - this . format = format ; 
 - this . cameraTransforms = cameraTransforms ; 
 + this ( 
 + buildModels ( models , TRSRTransformation . identity ( ) , format , defaultTextureGetter ) , 
 + ModelLoaderRegistry . getMissingModel ( ) . bake ( ModelLoaderRegistry . getMissingModel ( ) . getDefaultState ( ) , format , defaultTextureGetter ) , 
 + format , 
 + cameraTransforms 
 + ) ; 
 } 
 
 - private void compute ( ) 
 + public MultiLayerBakedModel ( ImmutableMap < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > models , IFlexibleBakedModel missing , VertexFormat format , ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ) 
 { 
 - if ( base = = null ) 
 + this . models = models ; 
 + this . format = format ; 
 + this . cameraTransforms = cameraTransforms ; 
 + this . missing = missing ; 
 + if ( models . containsKey ( Optional . absent ( ) ) ) 
 { 
 - ModelManager manager = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelManager ( ) ; 
 - missing = manager . getMissingModel ( ) ; 
 - base = getModel ( manager , Optional . < EnumWorldBlockLayer > absent ( ) ) ; 
 - 
 - ImmutableMap . Builder < EnumWorldBlockLayer , IBakedModel > builder = ImmutableMap . builder ( ) ; 
 - for ( EnumWorldBlockLayer layer : EnumWorldBlockLayer . values ( ) ) 
 - { 
 - if ( models . containsKey ( Optional . of ( layer ) ) ) 
 - { 
 - builder . put ( layer , getModel ( manager , Optional . of ( layer ) ) ) ; 
 - } 
 - } 
 - bakedModels = builder . build ( ) ; 
 - 
 - ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > quadBuilder = ImmutableMap . builder ( ) ; 
 - quadBuilder . put ( Optional . < EnumFacing > absent ( ) , buildQuads ( Optional . < EnumFacing > absent ( ) ) ) ; 
 - for ( EnumFacing side : EnumFacing . values ( ) ) 
 - { 
 - quadBuilder . put ( Optional . of ( side ) , buildQuads ( Optional . of ( side ) ) ) ; 
 - } 
 - quads = quadBuilder . build ( ) ; 
 + base = models . get ( Optional . absent ( ) ) ; 
 } 
 - } 
 - 
 - private IBakedModel getModel ( ModelManager manager , Optional < EnumWorldBlockLayer > layer ) 
 - { 
 - ModelResourceLocation loc = models . get ( layer ) ; 
 - if ( loc = = null ) 
 + else 
 + { 
 + base = missing ; 
 + } 
 + ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > quadBuilder = ImmutableMap . builder ( ) ; 
 + quadBuilder . put ( Optional . < EnumFacing > absent ( ) , buildQuads ( models , Optional . < EnumFacing > absent ( ) ) ) ; 
 + for ( EnumFacing side : EnumFacing . values ( ) ) 
 { 
 - loc = new ModelResourceLocation ( " builtin / missing " , " missing " ) ; 
 + quadBuilder . put ( Optional . of ( side ) , buildQuads ( models , Optional . of ( side ) ) ) ; 
 } 
 - return manager . getModel ( loc ) ; 
 + quads = quadBuilder . build ( ) ; 
 } 
 
 - private ImmutableList < BakedQuad > buildQuads ( Optional < EnumFacing > side ) 
 + private static ImmutableList < BakedQuad > buildQuads ( ImmutableMap < Optional < EnumWorldBlockLayer > , IFlexibleBakedModel > models , Optional < EnumFacing > side ) 
 { 
 ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 - for ( IBakedModel model : bakedModels . values ( ) ) 
 + for ( IBakedModel model : models . values ( ) ) 
 { 
 if ( side . isPresent ( ) ) 
 { 
 @ @ - 175 , 42 + 198 , 36 @ @ public class MultiLayerModel implements IModelCustomData 
 @ Override 
 public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 { 
 - compute ( ) ; 
 return quads . get ( Optional . of ( side ) ) ; 
 } 
 
 @ Override 
 public List < BakedQuad > getGeneralQuads ( ) 
 { 
 - compute ( ) ; 
 return quads . get ( Optional . absent ( ) ) ; 
 } 
 
 @ Override 
 public boolean isAmbientOcclusion ( ) 
 { 
 - compute ( ) ; 
 return base . isAmbientOcclusion ( ) ; 
 } 
 
 @ Override 
 public boolean isGui3d ( ) 
 { 
 - compute ( ) ; 
 return base . isGui3d ( ) ; 
 } 
 
 @ Override 
 public boolean isBuiltInRenderer ( ) 
 { 
 - compute ( ) ; 
 return base . isBuiltInRenderer ( ) ; 
 } 
 
 @ Override 
 public TextureAtlasSprite getParticleTexture ( ) 
 { 
 - compute ( ) ; 
 return base . getParticleTexture ( ) ; 
 } 
 
 @ @ - 223 , 13 + 240 , 12 @ @ public class MultiLayerModel implements IModelCustomData 
 @ Override 
 public IBakedModel handleBlockState ( IBlockState state ) 
 { 
 - compute ( ) ; 
 - EnumWorldBlockLayer layer = MinecraftForgeClient . getRenderLayer ( ) ; 
 - if ( ! bakedModels . containsKey ( layer ) ) 
 + Optional < EnumWorldBlockLayer > layer = Optional . of ( MinecraftForgeClient . getRenderLayer ( ) ) ; 
 + if ( ! models . containsKey ( layer ) ) 
 { 
 return missing ; 
 } 
 - return bakedModels . get ( layer ) ; 
 + return models . get ( layer ) ; 
 } 
 
 @ Override 
 diff - - git a / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json b / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json 
 index 50a1efe . . 15a23f0 100644 
 - - - a / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json 
 + + + b / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json 
 @ @ - 4 , 15 + 4 , 20 @ @ 
 " model " : " forge : multi - layer " , 
 " custom " : { 
 / / base is used for model properties - camera transforms , isGui3d , e . t . c . 
 - " base " : " minecraft : stone _ slab # half = bottom " , 
 + " base " : " forgedebugmultilayermodel : test _ layer _ block # aux " , 
 / / per - layer models 
 - " Solid " : " minecraft : stone _ slab # half = bottom " , 
 + " Solid " : " forgedebugmultilayermodel : test _ layer _ block # aux " , 
 " Translucent " : " minecraft : pink _ stained _ glass _ pane # east = true , north = false , south = false , west = true " 
 } , 
 " transform " : " forge : default - block " 
 } , 
 " variants " : { 
 " normal " : [ { } ] , 
 - " inventory " : [ { } ] 
 + " inventory " : [ { } ] , 
 + " aux " : [ { 
 + " model " : " cube _ all " , 
 + " textures " : { " all " : " blocks / slime " } , 
 + " transform " : { " scale " : . 5 } 
 + } ] 
 } 
 }
