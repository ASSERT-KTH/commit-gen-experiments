BLEU SCORE: 0.04515183688171632

TEST MSG: Add variant alias for item models not loaded via blockstate
GENERATED MSG: Fix dependency resolution for models with custom data / textures .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index b1883b1 . . 7995408 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 300 , 6 + 300 , 7 @ @ public final class ModelLoader extends ModelBakery <nl> try <nl> { <nl> model = ModelLoaderRegistry . getModel ( file ) ; <nl> + ModelLoaderRegistry . addAlias ( memory , file ) ; <nl> } <nl> catch ( Exception normalException ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> index 04fd021 . . 1a12652 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> @ @ - 52 , 6 + 52 , 8 @ @ public class ModelLoaderRegistry <nl> private static final Map < ResourceLocation , IModel > cache = Maps . newHashMap ( ) ; <nl> private static final Deque < ResourceLocation > loadingModels = Queues . newArrayDeque ( ) ; <nl> private static final Set < ResourceLocation > textures = Sets . newHashSet ( ) ; <nl> + private static final Map < ResourceLocation , ResourceLocation > aliases = Maps . newHashMap ( ) ; <nl> + <nl> private static IResourceManager manager ; <nl> <nl> / / Forge built - in loaders <nl> @ @ - 95 , 7 + 97 , 10 @ @ public class ModelLoaderRegistry <nl> public static IModel getModel ( ResourceLocation location ) throws Exception <nl> { <nl> IModel model ; <nl> - if ( cache . containsKey ( location ) ) return cache . get ( location ) ; <nl> + <nl> + IModel cached = cache . get ( location ) ; <nl> + if ( cached ! = null ) return cached ; <nl> + <nl> for ( ResourceLocation loading : loadingModels ) <nl> { <nl> if ( location . getClass ( ) = = loading . getClass ( ) & & location . equals ( loading ) ) <nl> @ @ - 106 , 6 + 111 , 9 @ @ public class ModelLoaderRegistry <nl> loadingModels . addLast ( location ) ; <nl> try <nl> { <nl> + ResourceLocation aliased = aliases . get ( location ) ; <nl> + if ( aliased ! = null ) return getModel ( aliased ) ; <nl> + <nl> ResourceLocation actual = getActualLocation ( location ) ; <nl> ICustomModelLoader accepted = null ; <nl> for ( ICustomModelLoader loader : loaders ) <nl> @ @ - 227 , 9 + 235 , 16 @ @ public class ModelLoaderRegistry <nl> return model ; <nl> } <nl> <nl> + static void addAlias ( ResourceLocation from , ResourceLocation to ) <nl> + { <nl> + aliases . put ( from , to ) ; <nl> + } <nl> + <nl> public static void clearModelCache ( IResourceManager manager ) <nl> { <nl> ModelLoaderRegistry . manager = manager ; <nl> + aliases . clear ( ) ; <nl> + textures . clear ( ) ; <nl> cache . clear ( ) ; <nl> / / putting the builtin models in <nl> cache . put ( new ResourceLocation ( " minecraft : builtin / generated " ) , ItemLayerModel . INSTANCE ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index f0b4850 . . b4c8dc5 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery <nl> try <nl> { <nl> IModel model = ModelLoaderRegistry . getModel ( location ) ; <nl> - for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> - { <nl> - if ( dep instanceof ModelResourceLocation ) <nl> - { <nl> - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> - } <nl> - else <nl> - { <nl> - getModel ( dep ) ; <nl> - } <nl> - } <nl> - textures . addAll ( model . getTextures ( ) ) ; <nl> + resolveDependencies ( model ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + private void resolveDependencies ( IModel model ) throws IOException <nl> + { <nl> + for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> + { <nl> + if ( dep instanceof ModelResourceLocation ) <nl> + { <nl> + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> + } <nl> + else <nl> + { <nl> + getModel ( dep ) ; <nl> + } <nl> + } <nl> + textures . addAll ( model . getTextures ( ) ) ; <nl> + } <nl> + <nl> private class VanillaModelWrapper implements IRetexturableModel <nl> { <nl> private final ResourceLocation location ; <nl> @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery <nl> if ( v instanceof ISmartVariant ) <nl> { <nl> model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; <nl> + try <nl> + { <nl> + resolveDependencies ( model ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; <nl> + } <nl> textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index b1883b1 . . 7995408 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 300 , 6 + 300 , 7 @ @ public final class ModelLoader extends ModelBakery 
 try 
 { 
 model = ModelLoaderRegistry . getModel ( file ) ; 
 + ModelLoaderRegistry . addAlias ( memory , file ) ; 
 } 
 catch ( Exception normalException ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 index 04fd021 . . 1a12652 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 @ @ - 52 , 6 + 52 , 8 @ @ public class ModelLoaderRegistry 
 private static final Map < ResourceLocation , IModel > cache = Maps . newHashMap ( ) ; 
 private static final Deque < ResourceLocation > loadingModels = Queues . newArrayDeque ( ) ; 
 private static final Set < ResourceLocation > textures = Sets . newHashSet ( ) ; 
 + private static final Map < ResourceLocation , ResourceLocation > aliases = Maps . newHashMap ( ) ; 
 + 
 private static IResourceManager manager ; 
 
 / / Forge built - in loaders 
 @ @ - 95 , 7 + 97 , 10 @ @ public class ModelLoaderRegistry 
 public static IModel getModel ( ResourceLocation location ) throws Exception 
 { 
 IModel model ; 
 - if ( cache . containsKey ( location ) ) return cache . get ( location ) ; 
 + 
 + IModel cached = cache . get ( location ) ; 
 + if ( cached ! = null ) return cached ; 
 + 
 for ( ResourceLocation loading : loadingModels ) 
 { 
 if ( location . getClass ( ) = = loading . getClass ( ) & & location . equals ( loading ) ) 
 @ @ - 106 , 6 + 111 , 9 @ @ public class ModelLoaderRegistry 
 loadingModels . addLast ( location ) ; 
 try 
 { 
 + ResourceLocation aliased = aliases . get ( location ) ; 
 + if ( aliased ! = null ) return getModel ( aliased ) ; 
 + 
 ResourceLocation actual = getActualLocation ( location ) ; 
 ICustomModelLoader accepted = null ; 
 for ( ICustomModelLoader loader : loaders ) 
 @ @ - 227 , 9 + 235 , 16 @ @ public class ModelLoaderRegistry 
 return model ; 
 } 
 
 + static void addAlias ( ResourceLocation from , ResourceLocation to ) 
 + { 
 + aliases . put ( from , to ) ; 
 + } 
 + 
 public static void clearModelCache ( IResourceManager manager ) 
 { 
 ModelLoaderRegistry . manager = manager ; 
 + aliases . clear ( ) ; 
 + textures . clear ( ) ; 
 cache . clear ( ) ; 
 / / putting the builtin models in 
 cache . put ( new ResourceLocation ( " minecraft : builtin / generated " ) , ItemLayerModel . INSTANCE ) ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index f0b4850 . . b4c8dc5 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery 
 try 
 { 
 IModel model = ModelLoaderRegistry . getModel ( location ) ; 
 - for ( ResourceLocation dep : model . getDependencies ( ) ) 
 - { 
 - if ( dep instanceof ModelResourceLocation ) 
 - { 
 - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 - } 
 - else 
 - { 
 - getModel ( dep ) ; 
 - } 
 - } 
 - textures . addAll ( model . getTextures ( ) ) ; 
 + resolveDependencies ( model ) ; 
 } 
 finally 
 { 
 @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + private void resolveDependencies ( IModel model ) throws IOException 
 + { 
 + for ( ResourceLocation dep : model . getDependencies ( ) ) 
 + { 
 + if ( dep instanceof ModelResourceLocation ) 
 + { 
 + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 + } 
 + else 
 + { 
 + getModel ( dep ) ; 
 + } 
 + } 
 + textures . addAll ( model . getTextures ( ) ) ; 
 + } 
 + 
 private class VanillaModelWrapper implements IRetexturableModel 
 { 
 private final ResourceLocation location ; 
 @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery 
 if ( v instanceof ISmartVariant ) 
 { 
 model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; 
 + try 
 + { 
 + resolveDependencies ( model ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; 
 + } 
 textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . 
 } 

