BLEU SCORE: 0.020980574531482755

TEST MSG: Fix FMLCommonHandler # exitJava printing useless / wrong calling info
GENERATED MSG: Some more tidying up of the exit handling

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index 99f4725 . . 062a803 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 663 , 18 + 663 , 17 @ @ public class FMLCommonHandler <nl> * / <nl> public void exitJava ( int exitCode , boolean hardExit ) <nl> { <nl> - FMLLog . log . info ( " Java has been asked to exit ( code { } ) by { } . " , exitCode , Thread . currentThread ( ) . getStackTrace ( ) [ 1 ] ) ; <nl> + FMLLog . log . warn ( " Java has been asked to exit ( code { } ) " , exitCode ) ; <nl> if ( hardExit ) <nl> { <nl> - FMLLog . log . info ( " This is an abortive exit and could cause world corruption or other things " ) ; <nl> + FMLLog . log . warn ( " This is an abortive exit and could cause world corruption or other things " ) ; <nl> } <nl> - if ( Boolean . parseBoolean ( System . getProperty ( " fml . debugExit " , " false " ) ) ) <nl> + StackTraceElement [ ] stack = Thread . currentThread ( ) . getStackTrace ( ) ; <nl> + FMLLog . log . warn ( " Exit trace : " ) ; <nl> + / / The first 2 elements are Thread # getStackTrace and FMLCommonHandler # exitJava and aren ' t relevant <nl> + for ( int i = 2 ; i < stack . length ; i + + ) <nl> { <nl> - FMLLog . log . info ( " Exit trace " , new Throwable ( ) ) ; <nl> - } <nl> - else <nl> - { <nl> - FMLLog . log . info ( " If this was an unexpected exit , use - Dfml . debugExit = true as a JVM argument to find out where it was called " ) ; <nl> + FMLLog . log . warn ( " \ t { } " , stack [ i ] ) ; <nl> } <nl> if ( hardExit ) <nl> {
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> index 3999a56 . . 9c5e065 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> @ @ - 601 , 14 + 601 , 14 @ @ public class FMLCommonHandler <nl> * unless debugging is enabled <nl> * <nl> * @ param exitCode The exit code <nl> - * @ param hardExit Perform a halt instead of an exit ( only use when the world is unsavable ) <nl> + * @ param hardExit Perform a halt instead of an exit ( only use when the world is unsavable ) - read the warnings at { @ link Runtime # halt ( int ) } <nl> * / <nl> public void exitJava ( int exitCode , boolean hardExit ) <nl> { <nl> FMLLog . log ( Level . INFO , " Java has been asked to exit ( code % d ) by % s . " , exitCode , Thread . currentThread ( ) . getStackTrace ( ) [ 1 ] ) ; <nl> if ( hardExit ) <nl> { <nl> - FMLLog . log ( Level . INFO , " This is a forced exit " ) ; <nl> + FMLLog . log ( Level . INFO , " This is an abortive exit and could cause world corruption or other things " ) ; <nl> } <nl> if ( Boolean . parseBoolean ( System . getProperty ( " fml . debugExit " , " false " ) ) ) <nl> { <nl> @ @ - 616 , 7 + 616 , 7 @ @ public class FMLCommonHandler <nl> } <nl> else <nl> { <nl> - FMLLog . log ( Level . INFO , " If this was an unexpected exit , use - Dfml . debugExit = true to find out where it was called " ) ; <nl> + FMLLog . log ( Level . INFO , " If this was an unexpected exit , use - Dfml . debugExit = true as a JVM argument to find out where it was called " ) ; <nl> } <nl> if ( hardExit ) <nl> { <nl> @ @ - 624 , 7 + 624 , 7 @ @ public class FMLCommonHandler <nl> } <nl> else <nl> { <nl> - System . exit ( exitCode ) ; <nl> + Runtime . getRuntime ( ) . exit ( exitCode ) ; <nl> } <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index 99f4725 . . 062a803 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 663 , 18 + 663 , 17 @ @ public class FMLCommonHandler 
 * / 
 public void exitJava ( int exitCode , boolean hardExit ) 
 { 
 - FMLLog . log . info ( " Java has been asked to exit ( code { } ) by { } . " , exitCode , Thread . currentThread ( ) . getStackTrace ( ) [ 1 ] ) ; 
 + FMLLog . log . warn ( " Java has been asked to exit ( code { } ) " , exitCode ) ; 
 if ( hardExit ) 
 { 
 - FMLLog . log . info ( " This is an abortive exit and could cause world corruption or other things " ) ; 
 + FMLLog . log . warn ( " This is an abortive exit and could cause world corruption or other things " ) ; 
 } 
 - if ( Boolean . parseBoolean ( System . getProperty ( " fml . debugExit " , " false " ) ) ) 
 + StackTraceElement [ ] stack = Thread . currentThread ( ) . getStackTrace ( ) ; 
 + FMLLog . log . warn ( " Exit trace : " ) ; 
 + / / The first 2 elements are Thread # getStackTrace and FMLCommonHandler # exitJava and aren ' t relevant 
 + for ( int i = 2 ; i < stack . length ; i + + ) 
 { 
 - FMLLog . log . info ( " Exit trace " , new Throwable ( ) ) ; 
 - } 
 - else 
 - { 
 - FMLLog . log . info ( " If this was an unexpected exit , use - Dfml . debugExit = true as a JVM argument to find out where it was called " ) ; 
 + FMLLog . log . warn ( " \ t { } " , stack [ i ] ) ; 
 } 
 if ( hardExit ) 
 {

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 index 3999a56 . . 9c5e065 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 @ @ - 601 , 14 + 601 , 14 @ @ public class FMLCommonHandler 
 * unless debugging is enabled 
 * 
 * @ param exitCode The exit code 
 - * @ param hardExit Perform a halt instead of an exit ( only use when the world is unsavable ) 
 + * @ param hardExit Perform a halt instead of an exit ( only use when the world is unsavable ) - read the warnings at { @ link Runtime # halt ( int ) } 
 * / 
 public void exitJava ( int exitCode , boolean hardExit ) 
 { 
 FMLLog . log ( Level . INFO , " Java has been asked to exit ( code % d ) by % s . " , exitCode , Thread . currentThread ( ) . getStackTrace ( ) [ 1 ] ) ; 
 if ( hardExit ) 
 { 
 - FMLLog . log ( Level . INFO , " This is a forced exit " ) ; 
 + FMLLog . log ( Level . INFO , " This is an abortive exit and could cause world corruption or other things " ) ; 
 } 
 if ( Boolean . parseBoolean ( System . getProperty ( " fml . debugExit " , " false " ) ) ) 
 { 
 @ @ - 616 , 7 + 616 , 7 @ @ public class FMLCommonHandler 
 } 
 else 
 { 
 - FMLLog . log ( Level . INFO , " If this was an unexpected exit , use - Dfml . debugExit = true to find out where it was called " ) ; 
 + FMLLog . log ( Level . INFO , " If this was an unexpected exit , use - Dfml . debugExit = true as a JVM argument to find out where it was called " ) ; 
 } 
 if ( hardExit ) 
 { 
 @ @ - 624 , 7 + 624 , 7 @ @ public class FMLCommonHandler 
 } 
 else 
 { 
 - System . exit ( exitCode ) ; 
 + Runtime . getRuntime ( ) . exit ( exitCode ) ; 
 } 
 } 
 }
