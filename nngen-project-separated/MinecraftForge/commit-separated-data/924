BLEU SCORE: 0.033864985683445356

TEST MSG: OMG ! Documentation ? WUT ? I haz lost my mind .
GENERATED MSG: Introduce a new centralized version checking system .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLConstructionEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLConstructionEvent . java <nl> index 9d259bc . . 4c85481 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLConstructionEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLConstructionEvent . java <nl> @ @ - 18 , 6 + 18 , 9 @ @ import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> <nl> import com . google . common . collect . ListMultimap ; <nl> <nl> + / * * <nl> + * An internal FML event used to signal the construction of mods . Should not be used by mods . <nl> + * / <nl> public class FMLConstructionEvent extends FMLStateEvent <nl> { <nl> private ModClassLoader modClassLoader ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLEvent . java <nl> index 943655a . . 77aa097 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLEvent . java <nl> @ @ - 14 , 6 + 14 , 10 @ @ package net . minecraftforge . fml . common . event ; <nl> <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> <nl> + / * * <nl> + * Parent type to all FML events . This is based on Guava EventBus . Event Subscription isn ' t using the Guava annotation <nl> + * however , it ' s using a custom annotation specific to FML { @ link net . minecraftforge . fml . common . Mod . EventHandler } <nl> + * / <nl> public class FMLEvent <nl> { <nl> public final String getEventType ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLFingerprintViolationEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLFingerprintViolationEvent . java <nl> index e13280e . . 3f35156 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLFingerprintViolationEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLFingerprintViolationEvent . java <nl> @ @ - 16 , 8 + 16 , 13 @ @ import java . io . File ; <nl> import java . util . Set ; <nl> <nl> import com . google . common . collect . ImmutableSet ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> <nl> <nl> + / * * <nl> + * A special event used when the { @ link Mod # certificateFingerprint ( ) } doesn ' t match the certificate loaded from the JAR <nl> + * file . You could use this to log a warning that the code that is running might not be yours , for example . <nl> + * / <nl> public class FMLFingerprintViolationEvent extends FMLEvent { <nl> <nl> public final boolean isDirectory ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLInitializationEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLInitializationEvent . java <nl> index 19c6968 . . c3b48d1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLInitializationEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLInitializationEvent . java <nl> @ @ - 14 , 6 + 14 , 19 @ @ package net . minecraftforge . fml . common . event ; <nl> <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> <nl> + / * * <nl> + * Called after { @ link FMLPreInitializationEvent } and before { @ link FMLPostInitializationEvent } during mod <nl> + * startup . <nl> + * <nl> + * This is the second of three commonly called events during mod initialization . <nl> + * <nl> + * Recommended activities : Register your recipes and Ore Dictionary entries in the <nl> + * { @ link net . minecraftforge . fml . common . registry . GameRegistry } and { @ link net . minecraftforge . oredict . OreDictionary } <nl> + * Dispatch requests through { @ link FMLInterModComms } to other mods , to tell them what you wish them to do . <nl> + * <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * / <nl> public class FMLInitializationEvent extends FMLStateEvent <nl> { <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLInterModComms . java b / src / main / java / net / minecraftforge / fml / common / event / FMLInterModComms . java <nl> index dcbc80c . . 5db7be6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLInterModComms . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLInterModComms . java <nl> @ @ - 12 , 6 + 12 , 8 @ @ <nl> <nl> package net . minecraftforge . fml . common . event ; <nl> <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . base . Optional ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> @ @ - 23 , 6 + 25 , 7 @ @ import net . minecraftforge . fml . common . Mod . Instance ; <nl> <nl> import com . google . common . collect . ArrayListMultimap ; <nl> import com . google . common . collect . ImmutableList ; <nl> + import org . apache . logging . log4j . Level ; <nl> <nl> / * * <nl> * Simple intermod communications to receive simple messages directed at you <nl> @ @ - 37 , 10 + 40 , 10 @ @ public class FMLInterModComms { <nl> <nl> / * * <nl> * Subscribe to this event to receive your messages ( they are sent between <nl> - * { @ link Init } and { @ link PostInit } ) <nl> + * { @ link FMLInitializationEvent } and { @ link FMLPostInitializationEvent } ) <nl> * <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> * @ author cpw <nl> - * <nl> * / <nl> public static class IMCEvent extends FMLEvent { <nl> private ModContainer activeContainer ; <nl> @ @ - 72 , 6 + 75 , 7 @ @ public class FMLInterModComms { <nl> * <nl> * / <nl> public static final class IMCMessage { <nl> + private final boolean isFunction ; <nl> / * * <nl> * This is the modid of the mod that sent you the message <nl> * / <nl> @ @ - 83 , 12 + 87 , 19 @ @ public class FMLInterModComms { <nl> / * * <nl> * This field , and { @ link # key } are both at the mod ' s discretion <nl> * / <nl> - private Object value ; <nl> + private final Object value ; <nl> <nl> private IMCMessage ( String key , Object value ) <nl> { <nl> this . key = key ; <nl> this . value = value ; <nl> + this . isFunction = false ; <nl> + } <nl> + <nl> + private IMCMessage ( String key , String value , boolean isFunction ) { <nl> + this . key = key ; <nl> + this . value = value ; <nl> + this . isFunction = isFunction ; <nl> } <nl> <nl> @ Override <nl> @ @ - 97 , 6 + 108 , 10 @ @ public class FMLInterModComms { <nl> return sender ; <nl> } <nl> <nl> + / * * <nl> + * Get the sending modId of this message . <nl> + * @ return The modId of the mod that originated the message <nl> + * / <nl> public String getSender ( ) <nl> { <nl> return this . sender ; <nl> @ @ - 107 , 70 + 122 , 200 @ @ public class FMLInterModComms { <nl> this . sender = activeModContainer . getModId ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Get the string value from this message . <nl> + * @ throws ClassCastException if this message doesn ' t contain a String value <nl> + * @ return The string value <nl> + * / <nl> public String getStringValue ( ) <nl> { <nl> return ( String ) value ; <nl> } <nl> <nl> + / * * <nl> + * Get the { @ link NBTTagCompound } value from this message <nl> + * @ throws ClassCastException if this message doesn ' t contain an NBT value <nl> + * @ return The NBT value <nl> + * / <nl> public NBTTagCompound getNBTValue ( ) <nl> { <nl> return ( NBTTagCompound ) value ; <nl> } <nl> <nl> + / * * <nl> + * Get the { @ link ItemStack } value from this message <nl> + * @ throws ClassCastException if this message doesn ' t contain an Itemstack value <nl> + * @ return The Itemstack value <nl> + * / <nl> public ItemStack getItemStackValue ( ) <nl> { <nl> return ( ItemStack ) value ; <nl> } <nl> <nl> + / * * <nl> + * Get the { @ link Function } value from this message . This will attempt to classload the function <nl> + * supplied by the caller . The parameter classes are strictly to give a concrete generic function return value . <nl> + * @ param functionFrom The type of the argument to the function <nl> + * @ param functionTo The type of the result of the function <nl> + * @ param < T > The argument type <nl> + * @ param < V > The result type <nl> + * @ return The function value or Optional . absent if it wasn ' t readable or isn ' t a function call <nl> + * / <nl> + public < T , V > Optional < Function < T , V > > getFunctionValue ( Class < T > functionFrom , Class < V > functionTo ) { <nl> + if ( ! isFunction ) { <nl> + return Optional . absent ( ) ; <nl> + } <nl> + try { <nl> + Function < T , V > f = Class . forName ( ( String ) value ) . asSubclass ( Function . class ) . newInstance ( ) ; <nl> + return Optional . of ( f ) ; <nl> + } catch ( Exception e ) { <nl> + FMLLog . getLogger ( ) . log ( Level . INFO , " An error occurred instantiating the IMC function . key : { } value : { } , caller : { } " , key , value , sender ) ; <nl> + return Optional . absent ( ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Get the actual message class type <nl> + * @ return The type of the message <nl> + * / <nl> public Class < ? > getMessageType ( ) <nl> { <nl> return value . getClass ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Is this a string type message <nl> + * @ return if this is a string type message <nl> + * / <nl> public boolean isStringMessage ( ) <nl> { <nl> return String . class . isAssignableFrom ( getMessageType ( ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Is this an { @ link ItemStack } type message <nl> + * @ return if this is an itemstack type message <nl> + * / <nl> public boolean isItemStackMessage ( ) <nl> { <nl> return ItemStack . class . isAssignableFrom ( getMessageType ( ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Is this an { @ link NBTTagCompound } type message <nl> + * @ return if this is an NBT type message <nl> + * / <nl> public boolean isNBTMessage ( ) <nl> { <nl> return NBTTagCompound . class . isAssignableFrom ( getMessageType ( ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Is this a { @ link Function } type message <nl> + * @ return if this is a function type message <nl> + * / <nl> + public boolean isFunctionMessage ( ) { return Function . class . isAssignableFrom ( getMessageType ( ) ) ; } <nl> } <nl> <nl> + / * * <nl> + * Send a startup time message <nl> + * @ param modId The modid to send it to <nl> + * @ param key The mod specific key <nl> + * @ param value An NBT type value <nl> + * @ return if the message was enqueued successfully and will be processed during startup <nl> + * / <nl> public static boolean sendMessage ( String modId , String key , NBTTagCompound value ) <nl> { <nl> return enqueueStartupMessage ( modId , new IMCMessage ( key , value ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Send a startup time message <nl> + * @ param modId The modid to send it to <nl> + * @ param key The mod specific key <nl> + * @ param value An Itemstack value <nl> + * @ return if the message was enqueued successfully and will be processed during startup <nl> + * / <nl> public static boolean sendMessage ( String modId , String key , ItemStack value ) <nl> { <nl> return enqueueStartupMessage ( modId , new IMCMessage ( key , value ) ) ; <nl> } <nl> + <nl> + / * * <nl> + * Send a startup time message <nl> + * @ param modId The modid to send it to <nl> + * @ param key The mod specific key <nl> + * @ param value A String value <nl> + * @ return if the message was enqueued successfully and will be processed during startup <nl> + * / <nl> public static boolean sendMessage ( String modId , String key , String value ) <nl> { <nl> return enqueueStartupMessage ( modId , new IMCMessage ( key , value ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Send a startup time function message <nl> + * @ param modId The modid to send it to <nl> + * @ param key The mod specific key <nl> + * @ param functionClassName The class name of a function that will be instantiated when the <nl> + * message is read . It must implement { @ link Function } <nl> + * @ return if the message was enqueued successfully and will be processed during startup <nl> + * / <nl> + public static boolean sendFunctionMessage ( String modId , String key , String functionClassName ) <nl> + { <nl> + return enqueueStartupMessage ( modId , new IMCMessage ( key , functionClassName , true ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Send a post - startup message <nl> + * @ param sourceMod The mod sending the message <nl> + * @ param modId The modid to send it to <nl> + * @ param key The mod specific key <nl> + * @ param value An NBT type value <nl> + * / <nl> public static void sendRuntimeMessage ( Object sourceMod , String modId , String key , NBTTagCompound value ) <nl> { <nl> enqueueMessage ( sourceMod , modId , new IMCMessage ( key , value ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Send a post - startup message <nl> + * @ param sourceMod The mod sending the message <nl> + * @ param modId The modid to send it to <nl> + * @ param key The mod specific key <nl> + * @ param value An Itemstack value <nl> + * / <nl> public static void sendRuntimeMessage ( Object sourceMod , String modId , String key , ItemStack value ) <nl> { <nl> enqueueMessage ( sourceMod , modId , new IMCMessage ( key , value ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Send a post - startup message <nl> + * @ param sourceMod The mod sending the message <nl> + * @ param modId The modid to send it to <nl> + * @ param key The mod specific key <nl> + * @ param value A string value <nl> + * / <nl> public static void sendRuntimeMessage ( Object sourceMod , String modId , String key , String value ) <nl> { <nl> enqueueMessage ( sourceMod , modId , new IMCMessage ( key , value ) ) ; <nl> } <nl> <nl> + / * * <nl> + * Send a post - startup function message . <nl> + * <nl> + * @ param sourceMod The mod originating this message <nl> + * @ param modId The modid to send it to <nl> + * @ param key The mod specific key <nl> + * @ param functionClassName The name of a class to be loaded when the caller processes this message . <nl> + * The named class must extend { @ link Function } <nl> + * / <nl> + public static void sendRuntimeFunctionMessage ( Object sourceMod , String modId , String key , String functionClassName ) <nl> + { <nl> + enqueueMessage ( sourceMod , modId , new IMCMessage ( key , functionClassName , true ) ) ; <nl> + } <nl> + <nl> private static boolean enqueueStartupMessage ( String modTarget , IMCMessage message ) <nl> { <nl> if ( Loader . instance ( ) . activeModContainer ( ) = = null ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLLoadCompleteEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLLoadCompleteEvent . java <nl> index 45cf932 . . 40fbff7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLLoadCompleteEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLLoadCompleteEvent . java <nl> @ @ - 14 , 6 + 14 , 12 @ @ package net . minecraftforge . fml . common . event ; <nl> <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> <nl> + / * * <nl> + * This is a mostly internal event fired to mod containers that indicates that loading is complete . Mods should not <nl> + * in general override or otherwise attempt to implement this event . <nl> + * <nl> + * @ author cpw <nl> + * / <nl> public class FMLLoadCompleteEvent extends FMLStateEvent <nl> { <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLLoadEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLLoadEvent . java <nl> index 33dfca0 . . 3258ffc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLLoadEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLLoadEvent . java <nl> @ @ - 12 , 6 + 12 , 11 @ @ <nl> <nl> package net . minecraftforge . fml . common . event ; <nl> <nl> + / * * <nl> + * Internal only event , used to begin the lifecycle of loading mods . <nl> + * <nl> + * @ author cpw <nl> + * / <nl> public class FMLLoadEvent <nl> { <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLMissingMappingsEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLMissingMappingsEvent . java <nl> index 7515da1 . . 2d5d488 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLMissingMappingsEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLMissingMappingsEvent . java <nl> @ @ - 17 , 7 + 17 , 9 @ @ import com . google . common . collect . ListMultimap ; <nl> * These can be remapped to other existing objects , or simply discarded . <nl> * Use get ( ) and getAll ( ) to process this event . <nl> * <nl> - * @ author cpw , Player <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * @ author Player <nl> * <nl> * / <nl> public class FMLMissingMappingsEvent extends FMLEvent { <nl> @ @ - 31 , 7 + 33 , 7 @ @ public class FMLMissingMappingsEvent extends FMLEvent { <nl> * @ author cpw <nl> * <nl> * / <nl> - public static enum Action { <nl> + public enum Action { <nl> / * * <nl> * Take the default action <nl> * / <nl> @ @ - 70 , 16 + 72 , 6 @ @ public class FMLMissingMappingsEvent extends FMLEvent { <nl> this . name = name ; <nl> this . id = id ; <nl> } <nl> - / * * <nl> - * @ deprecated use ignore ( ) , warn ( ) , fail ( ) or remap ( ) instead <nl> - * / <nl> - @ Deprecated <nl> - public void setAction ( Action target ) <nl> - { <nl> - if ( target = = Action . DEFAULT | | target = = Action . REMAP | | target = = Action . BLOCKONLY ) throw new IllegalArgumentException ( ) ; <nl> - <nl> - this . action = target ; <nl> - } <nl> <nl> / * * <nl> * Ignore the missing item . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLModIdMappingEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLModIdMappingEvent . java <nl> index d371aa0 . . ab761c3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLModIdMappingEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLModIdMappingEvent . java <nl> @ @ - 9 , 8 + 9 , 21 @ @ import java . util . Map . Entry ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Lists ; <nl> <nl> + / * * <nl> + * Called whenever the ID mapping might have changed . If you register for this event , you <nl> + * will be called back whenever the client or server loads an ID set . This includes both <nl> + * when the ID maps are loaded from disk , as well as when the ID maps revert to the initial <nl> + * state . <nl> + * <nl> + * Note : you cannot change the IDs that have been allocated , but you might want to use <nl> + * this event to update caches or other in - mod artifacts that might be impacted by an ID <nl> + * change . <nl> + * <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * / <nl> public class FMLModIdMappingEvent extends FMLEvent { <nl> - public static enum RemapTarget { BLOCK , ITEM } <nl> + public enum RemapTarget { BLOCK , ITEM } <nl> public class ModRemapping <nl> { <nl> public final int oldId ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLPostInitializationEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLPostInitializationEvent . java <nl> index f281b4e . . 1245896 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLPostInitializationEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLPostInitializationEvent . java <nl> @ @ - 12 , 11 + 12 , 29 @ @ <nl> <nl> package net . minecraftforge . fml . common . event ; <nl> <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . collect . Lists ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> <nl> import com . google . common . base . Throwables ; <nl> + import org . apache . logging . log4j . Level ; <nl> <nl> + import javax . annotation . Nonnull ; <nl> + import javax . annotation . Nullable ; <nl> + import java . lang . reflect . Constructor ; <nl> + <nl> + / * * <nl> + * Called after { @ link FMLInitializationEvent } has been dispatched on every mod . This is the third and last <nl> + * commonly called event during mod initialization . <nl> + * <nl> + * Recommended activities : interact with other mods to establish cross - mod behaviours . <nl> + * <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * / <nl> public class FMLPostInitializationEvent extends FMLStateEvent <nl> { <nl> public FMLPostInitializationEvent ( Object . . . data ) <nl> @ @ - 30 , 21 + 48 , 38 @ @ public class FMLPostInitializationEvent extends FMLStateEvent <nl> return ModState . POSTINITIALIZED ; <nl> } <nl> <nl> - public Object buildSoftDependProxy ( String modId , String className ) <nl> + / * * <nl> + * Build an object depending on if a specific target mod is loaded or not . <nl> + * <nl> + * Usually would be used to access an object from the other mod . <nl> + * <nl> + * @ param modId The modId I conditionally want to build an object for <nl> + * @ param className The name of the class I wish to instantiate <nl> + * @ return An optional containing the object if possible , or null if not <nl> + * / <nl> + public Optional < Object > buildSoftDependProxy ( String modId , String className , Object . . . arguments ) <nl> { <nl> if ( Loader . isModLoaded ( modId ) ) <nl> { <nl> + Class < ? > [ ] args = Lists . transform ( Lists . newArrayList ( arguments ) , new Function < Object , Class < ? > > ( ) { <nl> + @ Nullable <nl> + @ Override <nl> + public Class < ? > apply ( @ Nullable Object input ) { <nl> + return input . getClass ( ) ; <nl> + } <nl> + } ) . toArray ( new Class [ 0 ] ) ; <nl> try <nl> { <nl> Class < ? > clz = Class . forName ( className , true , Loader . instance ( ) . getModClassLoader ( ) ) ; <nl> - return clz . newInstance ( ) ; <nl> + Constructor < ? > ct = clz . getConstructor ( args ) ; <nl> + return Optional . fromNullable ( ct . newInstance ( arguments ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> - Throwables . propagateIfPossible ( e ) ; <nl> - return null ; <nl> + FMLLog . getLogger ( ) . log ( Level . INFO , " An error occurred trying to build a soft depend proxy " , e ) ; <nl> + return Optional . absent ( ) ; <nl> } <nl> } <nl> - return null ; <nl> + return Optional . absent ( ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLPreInitializationEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLPreInitializationEvent . java <nl> index b8e803c . . 009b0b5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLPreInitializationEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLPreInitializationEvent . java <nl> @ @ - 26 , 6 + 26 , 22 @ @ import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> + / * * <nl> + * Called before { @ link FMLInitializationEvent } during mod startup . <nl> + * <nl> + * This is the first of three commonly called events during mod initialization . <nl> + * <nl> + * Recommended activities : <nl> + * Setup your logging { @ link # getModLog ( ) } <nl> + * Load any configuration data you might have { @ link # getSuggestedConfigurationFile ( ) } <nl> + * Search for a version . properties file and load it { @ link # getVersionProperties ( ) } <nl> + * Configure your { @ link ModMetadata } programmatically { @ link # getModMetadata ( ) } <nl> + * Register your blocks and items with the { @ link net . minecraftforge . fml . common . registry . GameRegistry } <nl> + * Discover parts of your mod by using annotation search { @ link # getAsmData ( ) } <nl> + * <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * / <nl> public class FMLPreInitializationEvent extends FMLStateEvent <nl> { <nl> private ModMetadata modMetadata ; <nl> @ @ - 57 , 31 + 73 , 58 @ @ public class FMLPreInitializationEvent extends FMLStateEvent <nl> this . suggestedConfigFile = new File ( configurationDir , activeContainer . getModId ( ) + " . cfg " ) ; <nl> } <nl> <nl> + / * * <nl> + * Get the { @ link File } the mod was loaded from <nl> + * @ return The file the mod was loaded from <nl> + * / <nl> public File getSourceFile ( ) <nl> { <nl> return sourceFile ; <nl> } <nl> <nl> + / * * <nl> + * Get the { @ link ModMetadata } for this mod <nl> + * @ return the mod metadata for the mod <nl> + * / <nl> public ModMetadata getModMetadata ( ) <nl> { <nl> return modMetadata ; <nl> } <nl> <nl> + / * * <nl> + * Get the main configuration directory for this minecraft instance <nl> + * @ return the main configuration directory <nl> + * / <nl> public File getModConfigurationDirectory ( ) <nl> { <nl> return configurationDir ; <nl> } <nl> <nl> + / * * <nl> + * Get a suggested configuration file for this mod . It will be of the form & lt ; modid & gt ; . cfg <nl> + * @ return A suggested configuration file name for this mod <nl> + * / <nl> public File getSuggestedConfigurationFile ( ) <nl> { <nl> return suggestedConfigFile ; <nl> } <nl> <nl> + / * * <nl> + * Get the { @ link ASMDataTable } for this instance of Minecraft . This is a special structure containing <nl> + * parsing information from FML . It can be searched for annotations parsed out by FML . <nl> + * @ return <nl> + * / <nl> public ASMDataTable getAsmData ( ) <nl> { <nl> return asmData ; <nl> } <nl> <nl> + / * * <nl> + * Get a version . properties file as a { @ link Properties } object from the mod file . <nl> + * This can be used to load build - type information <nl> + * such as a unique version number from a properties file shipped as part of the distributable . <nl> + * @ return A properties object if one exists , else null <nl> + * / <nl> public Properties getVersionProperties ( ) <nl> { <nl> if ( this . modContainer instanceof FMLModContainer ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerAboutToStartEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerAboutToStartEvent . java <nl> index b58c80b . . 8c129d8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerAboutToStartEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerAboutToStartEvent . java <nl> @ @ - 15 , 6 + 15 , 14 @ @ package net . minecraftforge . fml . common . event ; <nl> import net . minecraft . server . MinecraftServer ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> <nl> + / * * <nl> + * Called before the server begins loading anything . Called after { @ link FMLPostInitializationEvent } on the dedicated <nl> + * server , and after the player has hit " Play Selected World " in the client . Called before { @ link FMLServerStartingEvent } . <nl> + * <nl> + * You can obtain a reference to the server with this event . <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * / <nl> public class FMLServerAboutToStartEvent extends FMLStateEvent { <nl> <nl> private MinecraftServer server ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartedEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartedEvent . java <nl> index c0fddc9 . . b11e6cb 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartedEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartedEvent . java <nl> @ @ - 14 , 6 + 14 , 12 @ @ package net . minecraftforge . fml . common . event ; <nl> <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> <nl> + / * * <nl> + * Called after { @ link FMLServerStartingEvent } when the server is available and ready to play . <nl> + * <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * / <nl> public class FMLServerStartedEvent extends FMLStateEvent <nl> { <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartingEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartingEvent . java <nl> index fd0131c . . ae5d54f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartingEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartingEvent . java <nl> @ @ - 17 , 6 + 17 , 14 @ @ import net . minecraft . command . ICommand ; <nl> import net . minecraft . server . MinecraftServer ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> <nl> + / * * <nl> + * Called after { @ link FMLServerAboutToStartEvent } and before { @ link FMLServerStartedEvent } . <nl> + * This event allows for customizations of the server , such as loading custom commands , perhaps customizing recipes or <nl> + * other activities . <nl> + * <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * / <nl> public class FMLServerStartingEvent extends FMLStateEvent <nl> { <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppedEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppedEvent . java <nl> index 6a5200e . . 52325c8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppedEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppedEvent . java <nl> @ @ - 14 , 6 + 14 , 14 @ @ package net . minecraftforge . fml . common . event ; <nl> <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> <nl> + / * * <nl> + * Called after { @ link FMLServerStoppingEvent } when the server has completely shut down . <nl> + * Called immediately before shutting down , on the dedicated server , and before returning <nl> + * to the main menu on the client . <nl> + * <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * / <nl> public class FMLServerStoppedEvent extends FMLStateEvent { <nl> <nl> public FMLServerStoppedEvent ( Object . . . data ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppingEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppingEvent . java <nl> index ea95654 . . 8556d9b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppingEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppingEvent . java <nl> @ @ - 14 , 6 + 14 , 12 @ @ package net . minecraftforge . fml . common . event ; <nl> <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> <nl> + / * * <nl> + * Called when the server begins an orderly shutdown , before { @ link FMLServerStoppedEvent } . <nl> + * <nl> + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event <nl> + * @ author cpw <nl> + * / <nl> public class FMLServerStoppingEvent extends FMLStateEvent <nl> { <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLStateEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLStateEvent . java <nl> index c2a8cc5 . . e384c90 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLStateEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLStateEvent . java <nl> @ @ - 16 , 6 + 16 , 9 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> + / * * <nl> + * The parent of all mod - state changing events <nl> + * / <nl> public abstract class FMLStateEvent extends FMLEvent <nl> { <nl> public FMLStateEvent ( Object . . . data ) <nl> @ @ - 23 , 8 + 26 , 17 @ @ public abstract class FMLStateEvent extends FMLEvent <nl> <nl> } <nl> <nl> + / * * <nl> + * The current state of the mod <nl> + * @ return The current state of the mod <nl> + * / <nl> public abstract ModState getModState ( ) ; <nl> <nl> + / * * <nl> + * The side we ' re loading on . { @ link Side # CLIENT } means we ' re loading in the client , { @ link Side # SERVER } means <nl> + * we ' re loading in the dedicated server . <nl> + * @ return Return which side we ' re loading on . <nl> + * / <nl> public Side getSide ( ) <nl> { <nl> return FMLCommonHandler . instance ( ) . getSide ( ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> index 1f3e186 . . fcfee4e 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> @ @ - 6 , 42 + 6 , 38 @ @ <nl> package net . minecraftforge . client . gui ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . TreeMap ; <nl> - import java . util . regex . Pattern ; <nl> <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> - import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . client . resources . I18n ; <nl> import net . minecraftforge . common . ForgeChunkManager ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . config . ConfigCategory ; <nl> import net . minecraftforge . common . config . ConfigElement ; <nl> import net . minecraftforge . common . config . Configuration ; <nl> import net . minecraftforge . common . config . Property ; <nl> import net . minecraftforge . fml . client . IModGuiFactory ; <nl> - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionCategoryElement ; <nl> - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionGuiHandler ; <nl> import net . minecraftforge . fml . client . config . ConfigGuiType ; <nl> import net . minecraftforge . fml . client . config . DummyConfigElement ; <nl> import net . minecraftforge . fml . client . config . DummyConfigElement . DummyCategoryElement ; <nl> - import net . minecraftforge . fml . client . config . GuiButtonExt ; <nl> import net . minecraftforge . fml . client . config . GuiConfig ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . CategoryEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . SelectValueEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . BooleanEntry ; <nl> - import net . minecraftforge . fml . client . config . HoverChecker ; <nl> import net . minecraftforge . fml . client . config . IConfigElement ; <nl> - import net . minecraftforge . fml . client . config . GuiConfigEntries . ListEntryBase ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> - import net . minecraftforge . fml . relauncher . Side ; <nl> - import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + import static net . minecraftforge . common . ForgeModContainer . VERSION _ CHECK _ CAT ; <nl> <nl> / * * <nl> * This is the base GuiConfig screen class that all the other Forge - specific config screens will be called from . <nl> @ @ - 109 , 6 + 105 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory <nl> List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; <nl> list . add ( new DummyCategoryElement ( " forgeCfg " , " forge . configgui . ctgy . forgeGeneralConfig " , GeneralEntry . class ) ) ; <nl> list . add ( new DummyCategoryElement ( " forgeChunkLoadingCfg " , " forge . configgui . ctgy . forgeChunkLoadingConfig " , ChunkLoaderEntry . class ) ) ; <nl> + list . add ( new DummyCategoryElement ( " forgeVersionCheckCfg " , " forge . configgui . ctgy . VersionCheckConfig " , VersionCheckEntry . class ) ) ; <nl> return list ; <nl> } <nl> <nl> @ @ - 167 , 6 + 164 , 59 @ @ public class ForgeGuiFactory implements IModGuiFactory <nl> } <nl> <nl> / * * <nl> + * This custom list entry provides the Forge Version Checking Config entry on the Minecraft Forge Configuration screen . <nl> + * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . <nl> + * / <nl> + public static class VersionCheckEntry extends CategoryEntry <nl> + { <nl> + public VersionCheckEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement prop ) <nl> + { <nl> + super ( owningScreen , owningEntryList , prop ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected GuiScreen buildChildScreen ( ) <nl> + { <nl> + ConfigCategory cfg = ForgeModContainer . getConfig ( ) . getCategory ( VERSION _ CHECK _ CAT ) ; <nl> + Map < String , Property > values = new HashMap < String , Property > ( cfg . getValues ( ) ) ; <nl> + values . remove ( " Global " ) ; <nl> + <nl> + Property global = ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , " Global " , true ) ; <nl> + <nl> + List < Property > props = new ArrayList < Property > ( ) ; <nl> + <nl> + for ( ModContainer mod : ForgeVersion . gatherMods ( ) . keySet ( ) ) <nl> + { <nl> + values . remove ( mod . getModId ( ) ) ; <nl> + props . add ( ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) ) ; / / Get or make the value in the config <nl> + } <nl> + props . addAll ( values . values ( ) ) ; / / Add any left overs from the config <nl> + Collections . sort ( props , new Comparator < Property > ( ) <nl> + { <nl> + @ Override <nl> + public int compare ( Property o1 , Property o2 ) <nl> + { <nl> + return o1 . getName ( ) . compareTo ( o2 . getName ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; <nl> + list . add ( new ConfigElement ( global ) ) ; <nl> + for ( Property prop : props ) <nl> + { <nl> + list . add ( new ConfigElement ( prop ) ) ; <nl> + } <nl> + <nl> + / / This GuiConfig object specifies the configID of the object and as such will force - save when it is closed . The parent <nl> + / / GuiConfig object ' s propertyList will also be refreshed to reflect the changes . <nl> + return new GuiConfig ( this . owningScreen , <nl> + list , <nl> + this . owningScreen . modID , VERSION _ CHECK _ CAT , true , true , <nl> + GuiConfig . getAbridgedConfigPath ( ForgeModContainer . getConfig ( ) . toString ( ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * This custom list entry provides the Mod Overrides entry on the Forge Chunk Loading config screen . <nl> * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . <nl> * In this case it adds the custom entry for adding a new mod override and lists the existing mod overrides . <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 7105295 . . 3805d49 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 12 , 13 + 12 , 14 @ @ import static net . minecraftforge . common . ForgeVersion . revisionVersion ; <nl> import static net . minecraftforge . common . config . Configuration . CATEGORY _ GENERAL ; <nl> <nl> import java . io . File ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> - import net . minecraft . init . Blocks ; <nl> import net . minecraft . nbt . NBTBase ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . world . storage . SaveHandler ; <nl> @ @ - 58 , 6 + 59 , 7 @ @ import net . minecraftforge . fml . common . network . NetworkRegistry ; <nl> <nl> public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer <nl> { <nl> + public static final String VERSION _ CHECK _ CAT = " version _ checking " ; <nl> public static int clumpingThreshold = 64 ; <nl> public static boolean removeErroringEntities = false ; <nl> public static boolean removeErroringTileEntities = false ; <nl> @ @ - 73 , 6 + 75 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> <nl> private static Configuration config ; <nl> + private static ForgeModContainer INSTANCE ; <nl> + public static ForgeModContainer getInstance ( ) <nl> + { <nl> + return INSTANCE ; <nl> + } <nl> + <nl> + private URL updateJSONUrl = null ; <nl> <nl> public ForgeModContainer ( ) <nl> { <nl> @ @ - 82 , 7 + 91 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> meta . name = " Minecraft Forge " ; <nl> meta . version = String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> meta . credits = " Made possible with help from many people " ; <nl> - meta . authorList = Arrays . asList ( " LexManos " , " Eloraam " , " Spacetoad " ) ; <nl> + meta . authorList = Arrays . asList ( " LexManos " , " Cpw " ) ; <nl> meta . description = " Minecraft Forge is a common open source API allowing a broad range of mods " + <nl> " to work cooperatively together . It allows many mods to be created without " + <nl> " them editing the main Minecraft code . " ; <nl> @ @ - 90 , 12 + 99 , 17 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; <nl> meta . screenshots = new String [ 0 ] ; <nl> meta . logoFile = " / forge _ logo . png " ; <nl> + try { <nl> + updateJSONUrl = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + } catch ( MalformedURLException e ) { } <nl> <nl> config = null ; <nl> File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; <nl> config = new Configuration ( cfgFile ) ; <nl> <nl> syncConfig ( true ) ; <nl> + <nl> + INSTANCE = this ; <nl> } <nl> <nl> @ Override <nl> @ @ - 230 , 6 + 244 , 12 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> <nl> config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; <nl> <nl> + propOrder = new ArrayList < String > ( ) ; <nl> + prop = config . get ( VERSION _ CHECK _ CAT , " Global " , true , " Enable the entire mod update check system . This only applies to mods using the Forge system . " ) ; <nl> + propOrder . add ( " Global " ) ; <nl> + <nl> + config . setCategoryPropertyOrder ( VERSION _ CHECK _ CAT , propOrder ) ; <nl> + <nl> if ( config . hasChanged ( ) ) <nl> { <nl> config . save ( ) ; <nl> @ @ - 254 , 6 + 274 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> ForgeChunkManager . syncConfigDefaults ( ) ; <nl> ForgeChunkManager . loadConfiguration ( ) ; <nl> } <nl> + else if ( VERSION _ CHECK _ CAT . equals ( event . configID ) ) <nl> + { <nl> + syncConfig ( false ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 396 , 4 + 420 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> Certificate [ ] certificates = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; <nl> return certificates ! = null ? certificates [ 0 ] : null ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return updateJSONUrl ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index bc5db2f . . 71d594c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 8 , 13 + 8 , 25 @ @ import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> import java . io . InputStream ; <nl> import java . net . URL ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . LinkedHashMap ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + <nl> + import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . gson . Gson ; <nl> <nl> - import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . InjectedModContainer ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import net . minecraftforge . fml . common . versioning . ComparableVersion ; <nl> <nl> public class ForgeVersion <nl> { <nl> @ @ - 55 , 12 + 67 , 13 @ @ public class ForgeVersion <nl> <nl> public static Status getStatus ( ) <nl> { <nl> - return status ; <nl> + return getResult ( ForgeModContainer . getInstance ( ) ) . status ; <nl> } <nl> <nl> public static String getTarget ( ) <nl> { <nl> - return target ; <nl> + CheckResult res = getResult ( ForgeModContainer . getInstance ( ) ) ; <nl> + return res . target ! = null ? res . target . toString ( ) : null ; <nl> } <nl> <nl> public static String getVersion ( ) <nl> @ @ - 79 , 32 + 92 , 75 @ @ public class ForgeVersion <nl> BETA _ OUTDATED <nl> } <nl> <nl> + public static class CheckResult <nl> + { <nl> + public final Status status ; <nl> + public final ComparableVersion target ; <nl> + public final Map < ComparableVersion , String > changes ; <nl> + public final String url ; <nl> + <nl> + private CheckResult ( Status status , ComparableVersion target , Map < ComparableVersion , String > changes , String url ) <nl> + { <nl> + this . status = status ; <nl> + this . target = target ; <nl> + this . changes = changes = = null ? null : Collections . unmodifiableMap ( changes ) ; <nl> + this . url = url ; <nl> + } <nl> + } <nl> + <nl> public static void startVersionCheck ( ) <nl> { <nl> new Thread ( " Forge Version Check " ) <nl> { <nl> - @ SuppressWarnings ( " unchecked " ) <nl> @ Override <nl> public void run ( ) <nl> { <nl> + if ( ! ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , " Global " , true ) . getBoolean ( ) ) <nl> + { <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " Global Forge version check system disabeld , no futher processing . " ) ; <nl> + return ; <nl> + } <nl> + <nl> + for ( Entry < ModContainer , URL > entry : gatherMods ( ) . entrySet ( ) ) <nl> + { <nl> + ModContainer mod = entry . getKey ( ) ; <nl> + if ( ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) . getBoolean ( ) ) <nl> + { <nl> + process ( mod , entry . getValue ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Skipped version check " , mod . getModId ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private void process ( ModContainer mod , URL url ) <nl> + { <nl> try <nl> { <nl> - URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Starting version check at % s " , mod . getModId ( ) , url . toString ( ) ) ; <nl> + Status status = PENDING ; <nl> + ComparableVersion target = null ; <nl> + <nl> InputStream con = url . openStream ( ) ; <nl> String data = new String ( ByteStreams . toByteArray ( con ) ) ; <nl> con . close ( ) ; <nl> <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , " [ % s ] Received version check data : \ n % s " , mod . getModId ( ) , data ) ; <nl> + <nl> + <nl> Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; <nl> - / / String homepage = ( String ) json . get ( " homepage " ) ; <nl> Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; <nl> + String display _ url = ( String ) json . get ( " homepage " ) ; <nl> <nl> String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; <nl> String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; <nl> - ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; <nl> + ComparableVersion current = new ComparableVersion ( mod . getVersion ( ) ) ; <nl> <nl> if ( rec ! = null ) <nl> { <nl> - ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; <nl> + ComparableVersion recommended = new ComparableVersion ( rec ) ; <nl> int diff = recommended . compareTo ( current ) ; <nl> <nl> if ( diff = = 0 ) <nl> @ @ - 114 , 39 + 170 , 95 @ @ public class ForgeVersion <nl> status = AHEAD ; <nl> if ( lat ! = null ) <nl> { <nl> - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + ComparableVersion latest = new ComparableVersion ( lat ) ; <nl> + if ( current . compareTo ( latest ) < 0 ) <nl> { <nl> status = OUTDATED ; <nl> - target = lat ; <nl> + target = latest ; <nl> } <nl> } <nl> } <nl> else <nl> { <nl> status = OUTDATED ; <nl> - target = rec ; <nl> + target = recommended ; <nl> } <nl> } <nl> else if ( lat ! = null ) <nl> { <nl> - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + ComparableVersion latest = new ComparableVersion ( lat ) ; <nl> + if ( current . compareTo ( latest ) < 0 ) <nl> { <nl> status = BETA _ OUTDATED ; <nl> - target = lat ; <nl> + target = latest ; <nl> } <nl> else <nl> status = BETA ; <nl> } <nl> else <nl> status = BETA ; <nl> + <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Found status : % s Target : % s " , mod . getModId ( ) , status , target ) ; <nl> + <nl> + Map < ComparableVersion , String > changes = new LinkedHashMap < ComparableVersion , String > ( ) ; <nl> + Map < String , String > tmp = ( Map < String , String > ) json . get ( MinecraftForge . MC _ VERSION ) ; <nl> + if ( tmp ! = null ) <nl> + { <nl> + List < ComparableVersion > ordered = new ArrayList < ComparableVersion > ( ) ; <nl> + for ( String key : tmp . keySet ( ) ) <nl> + { <nl> + ComparableVersion ver = new ComparableVersion ( key ) ; <nl> + if ( ver . compareTo ( current ) > 0 & & ( target = = null | | ver . compareTo ( target ) < 1 ) ) <nl> + { <nl> + ordered . add ( ver ) ; <nl> + } <nl> + } <nl> + Collections . sort ( ordered ) ; <nl> + <nl> + for ( ComparableVersion ver : ordered ) <nl> + { <nl> + changes . put ( ver , tmp . get ( ver . toString ( ) ) ) ; <nl> + } <nl> + } <nl> + if ( mod instanceof InjectedModContainer ) <nl> + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; <nl> + results . put ( mod , new CheckResult ( status , target , changes , display _ url ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , e , " Failed to process update information " ) ; <nl> status = FAILED ; <nl> } <nl> } <nl> } . start ( ) ; <nl> } <nl> + <nl> + / / Gather a list of mods that have opted in to this update system by providing a URL . <nl> + / / Small hack needed to support a interface change until we force a recompile . <nl> + public static Map < ModContainer , URL > gatherMods ( ) <nl> + { <nl> + Map < ModContainer , URL > ret = new HashMap < ModContainer , URL > ( ) ; <nl> + for ( ModContainer mod : Loader . instance ( ) . getActiveModList ( ) ) <nl> + { <nl> + URL url = null ; <nl> + try { <nl> + url = mod . getUpdateUrl ( ) ; <nl> + } catch ( AbstractMethodError abs ) { } / / TODO : Remove this in 1 . 8 . 8 + ? <nl> + if ( url ! = null ) <nl> + ret . put ( mod , url ) ; <nl> + } <nl> + return ret ; <nl> + } <nl> + <nl> + private static Map < ModContainer , CheckResult > results = new ConcurrentHashMap < ModContainer , CheckResult > ( ) ; <nl> + private static final CheckResult PENDING _ CHECK = new CheckResult ( PENDING , null , null , null ) ; <nl> + <nl> + public static CheckResult getResult ( ModContainer mod ) <nl> + { <nl> + if ( mod instanceof InjectedModContainer ) <nl> + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; <nl> + CheckResult ret = results . get ( mod ) ; <nl> + return ret = = null ? PENDING _ CHECK : ret ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / GuiModList . java <nl> index ba0085f . . 720e3e0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiModList . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . Comparator ; <nl> import java . util . List ; <nl> + import java . util . Map . Entry ; <nl> <nl> import javax . imageio . ImageIO ; <nl> <nl> @ @ - 43 , 10 + 44 , 14 @ @ import net . minecraft . util . IChatComponent ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . StringUtils ; <nl> import net . minecraftforge . common . ForgeHooks ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . CheckResult ; <nl> + import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . ModContainer . Disableable ; <nl> + import net . minecraftforge . fml . common . versioning . ComparableVersion ; <nl> import static net . minecraft . util . EnumChatFormatting . * ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> @ @ - 343 , 7 + 348 , 7 @ @ public class GuiModList extends GuiScreen <nl> ResourceLocation logoPath = null ; <nl> Dimension logoDims = new Dimension ( 0 , 0 ) ; <nl> List < String > lines = new ArrayList < String > ( ) ; <nl> - / / CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; <nl> + CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; <nl> <nl> String logoFile = selectedMod . getMetadata ( ) . logoFile ; <nl> if ( ! logoFile . isEmpty ( ) ) <nl> @ @ - 408 , 8 + 413 , 8 @ @ public class GuiModList extends GuiScreen <nl> else <nl> lines . add ( " Child mods : " + selectedMod . getMetadata ( ) . getChildModList ( ) ) ; <nl> <nl> - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> <nl> lines . add ( null ) ; <nl> lines . add ( selectedMod . getMetadata ( ) . description ) ; <nl> @ @ - 419 , 15 + 424 , 15 @ @ public class GuiModList extends GuiScreen <nl> lines . add ( WHITE + selectedMod . getName ( ) ) ; <nl> lines . add ( WHITE + " Version : " + selectedMod . getVersion ( ) ) ; <nl> lines . add ( WHITE + " Mod State : " + Loader . instance ( ) . getModState ( selectedMod ) ) ; <nl> - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> <nl> lines . add ( null ) ; <nl> lines . add ( RED + " No mod information found " ) ; <nl> lines . add ( RED + " Ask your mod author to provide a mod mcmod . info file " ) ; <nl> } <nl> <nl> - / * if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) <nl> + if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) <nl> { <nl> lines . add ( null ) ; <nl> lines . add ( " Changes : " ) ; <nl> @ @ - 437 , 7 + 442 , 7 @ @ public class GuiModList extends GuiScreen <nl> lines . add ( entry . getValue ( ) ) ; <nl> lines . add ( null ) ; <nl> } <nl> - } * / <nl> + } <nl> <nl> modInfo = new Info ( this . width - this . listWidth - 30 , lines , logoPath , logoDims ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java <nl> index 1d47fea . . 90198e1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ import java . util . ArrayList ; <nl> import net . minecraft . client . gui . FontRenderer ; <nl> import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . util . StringUtils ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . CheckResult ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> @ @ - 79 , 7 + 81 , 7 @ @ public class GuiSlotModList extends GuiScrollingList <nl> String name = StringUtils . stripControlCodes ( mc . getName ( ) ) ; <nl> String version = StringUtils . stripControlCodes ( mc . getDisplayVersion ( ) ) ; <nl> FontRenderer font = this . parent . getFontRenderer ( ) ; <nl> - / / CheckResult vercheck = ForgeVersion . getResult ( mc ) ; <nl> + CheckResult vercheck = ForgeVersion . getResult ( mc ) ; <nl> <nl> if ( Loader . instance ( ) . getModState ( mc ) = = ModState . DISABLED ) <nl> { <nl> @ @ - 93 , 7 + 95 , 7 @ @ public class GuiSlotModList extends GuiScrollingList <nl> font . drawString ( font . trimStringToWidth ( version , listWidth - 10 ) , this . left + 3 , top + 12 , 0xCCCCCC ) ; <nl> font . drawString ( font . trimStringToWidth ( mc . getMetadata ( ) ! = null ? mc . getMetadata ( ) . getChildModCountString ( ) : " Metadata not found " , listWidth - 10 ) , this . left + 3 , top + 22 , 0xCCCCCC ) ; <nl> <nl> - / * switch ( vercheck . status ) / / TODO : Change to icons ? <nl> + switch ( vercheck . status ) / / TODO : Change to icons ? <nl> { <nl> case BETA _ OUTDATED : <nl> case OUTDATED : <nl> @ @ - 105 , 8 + 107 , 7 @ @ public class GuiSlotModList extends GuiScrollingList <nl> case PENDING : <nl> case UP _ TO _ DATE : <nl> break ; <nl> - } * / <nl> + } <nl> } <nl> } <nl> - <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> index 88b171c . . d9e11b3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> @ @ - 206 , 4 + 207 , 10 @ @ public class DummyModContainer implements ModContainer <nl> { <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 60ae2c6 . . 05ea505 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ import java . lang . annotation . Annotation ; <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 87 , 6 + 89 , 7 @ @ public class FMLModContainer implements ModContainer <nl> private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; <nl> private Map < String , String > customModProperties ; <nl> private ModCandidate candidate ; <nl> + private URL updateJSONUrl ; <nl> <nl> public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) <nl> { <nl> @ @ - 215 , 6 + 218 , 19 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> minecraftAccepted = Loader . instance ( ) . getMinecraftModContainer ( ) . getStaticVersionRange ( ) ; <nl> } <nl> + <nl> + String jsonURL = ( String ) descriptor . get ( " updateJSON " ) ; <nl> + if ( ! Strings . isNullOrEmpty ( jsonURL ) ) <nl> + { <nl> + try <nl> + { <nl> + this . updateJSONUrl = new URL ( jsonURL ) ; <nl> + } <nl> + catch ( MalformedURLException e ) <nl> + { <nl> + FMLLog . log ( getModId ( ) , Level . DEBUG , " Specified json URL invalid : % s " , jsonURL ) ; <nl> + } <nl> + } <nl> } <nl> <nl> public Properties searchForVersionProperties ( ) <nl> @ @ - 663 , 4 + 679 , 10 @ @ public class FMLModContainer implements ModContainer <nl> <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return updateJSONUrl ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> index af91db1 . . 783c28b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 207 , 4 + 208 , 10 @ @ public class InjectedModContainer implements ModContainer <nl> { <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return wrappedContainer . getUpdateUrl ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index a2ad320 . . 7513fdf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 157 , 18 + 157 , 18 @ @ public @ interface Mod <nl> * @ return The language the mod is authored in <nl> * / <nl> String modLanguage ( ) default " java " ; <nl> - <nl> + <nl> / * * <nl> * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a <nl> * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . <nl> - * <nl> + * <nl> * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and <nl> * halt loading . <nl> - * <nl> + * <nl> * @ return The full class name of the language adapter <nl> * / <nl> String modLanguageAdapter ( ) default " " ; <nl> - <nl> + <nl> / * * <nl> * NOT YET IMPLEMENTED . < / br > <nl> * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given <nl> @ @ - 198 , 6 + 198 , 14 @ @ public @ interface Mod <nl> * @ return The name of a class implementing { @ link IModGuiFactory } <nl> * / <nl> String guiFactory ( ) default " " ; <nl> + <nl> + / * * <nl> + * An optional URL to a JSON file that will be checked once per launch to determine if there is an updated <nl> + * version of this mod and notify the end user . For more information see ForgeVersion . <nl> + * @ return URL to update metadata json <nl> + * / <nl> + String updateJSON ( ) default " " ; <nl> + <nl> / * * <nl> * A list of custom properties for this mod . Completely up to the mod author if / when they <nl> * want to put anything in here . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> index dde8dde . . 883f8b9 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 149 , 4 + 150 , 6 @ @ public interface ModContainer <nl> List < String > getOwnedPackages ( ) ; <nl> <nl> boolean shouldLoadInEnvironment ( ) ; <nl> + <nl> + URL getUpdateUrl ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java <nl> index add4b37 . . f0173ca 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java <nl> @ @ - 35 , 7 + 35 , 12 @ @ public class ModMetadata <nl> public String description = " " ; <nl> <nl> public String url = " " ; <nl> + @ Deprecated / / Never really used for anything and format is undefined . See updateJSON for replacement . <nl> public String updateUrl = " " ; <nl> + / * * <nl> + * URL to update json file . Format is defined here : https : / / gist . github . com / LexManos / 7aacb9aa991330523884 <nl> + * / <nl> + public String updateJSON = " " ; <nl> <nl> public String logoFile = " " ; <nl> public String version = " " ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLConstructionEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLConstructionEvent . java 
 index 9d259bc . . 4c85481 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLConstructionEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLConstructionEvent . java 
 @ @ - 18 , 6 + 18 , 9 @ @ import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 
 import com . google . common . collect . ListMultimap ; 
 
 + / * * 
 + * An internal FML event used to signal the construction of mods . Should not be used by mods . 
 + * / 
 public class FMLConstructionEvent extends FMLStateEvent 
 { 
 private ModClassLoader modClassLoader ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLEvent . java 
 index 943655a . . 77aa097 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLEvent . java 
 @ @ - 14 , 6 + 14 , 10 @ @ package net . minecraftforge . fml . common . event ; 
 
 import net . minecraftforge . fml . common . ModContainer ; 
 
 + / * * 
 + * Parent type to all FML events . This is based on Guava EventBus . Event Subscription isn ' t using the Guava annotation 
 + * however , it ' s using a custom annotation specific to FML { @ link net . minecraftforge . fml . common . Mod . EventHandler } 
 + * / 
 public class FMLEvent 
 { 
 public final String getEventType ( ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLFingerprintViolationEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLFingerprintViolationEvent . java 
 index e13280e . . 3f35156 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLFingerprintViolationEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLFingerprintViolationEvent . java 
 @ @ - 16 , 8 + 16 , 13 @ @ import java . io . File ; 
 import java . util . Set ; 
 
 import com . google . common . collect . ImmutableSet ; 
 + import net . minecraftforge . fml . common . Mod ; 
 
 
 + / * * 
 + * A special event used when the { @ link Mod # certificateFingerprint ( ) } doesn ' t match the certificate loaded from the JAR 
 + * file . You could use this to log a warning that the code that is running might not be yours , for example . 
 + * / 
 public class FMLFingerprintViolationEvent extends FMLEvent { 
 
 public final boolean isDirectory ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLInitializationEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLInitializationEvent . java 
 index 19c6968 . . c3b48d1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLInitializationEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLInitializationEvent . java 
 @ @ - 14 , 6 + 14 , 19 @ @ package net . minecraftforge . fml . common . event ; 
 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 
 + / * * 
 + * Called after { @ link FMLPreInitializationEvent } and before { @ link FMLPostInitializationEvent } during mod 
 + * startup . 
 + * 
 + * This is the second of three commonly called events during mod initialization . 
 + * 
 + * Recommended activities : Register your recipes and Ore Dictionary entries in the 
 + * { @ link net . minecraftforge . fml . common . registry . GameRegistry } and { @ link net . minecraftforge . oredict . OreDictionary } 
 + * Dispatch requests through { @ link FMLInterModComms } to other mods , to tell them what you wish them to do . 
 + * 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * / 
 public class FMLInitializationEvent extends FMLStateEvent 
 { 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLInterModComms . java b / src / main / java / net / minecraftforge / fml / common / event / FMLInterModComms . java 
 index dcbc80c . . 5db7be6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLInterModComms . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLInterModComms . java 
 @ @ - 12 , 6 + 12 , 8 @ @ 
 
 package net . minecraftforge . fml . common . event ; 
 
 + import com . google . common . base . Function ; 
 + import com . google . common . base . Optional ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 @ @ - 23 , 6 + 25 , 7 @ @ import net . minecraftforge . fml . common . Mod . Instance ; 
 
 import com . google . common . collect . ArrayListMultimap ; 
 import com . google . common . collect . ImmutableList ; 
 + import org . apache . logging . log4j . Level ; 
 
 / * * 
 * Simple intermod communications to receive simple messages directed at you 
 @ @ - 37 , 10 + 40 , 10 @ @ public class FMLInterModComms { 
 
 / * * 
 * Subscribe to this event to receive your messages ( they are sent between 
 - * { @ link Init } and { @ link PostInit } ) 
 + * { @ link FMLInitializationEvent } and { @ link FMLPostInitializationEvent } ) 
 * 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 * @ author cpw 
 - * 
 * / 
 public static class IMCEvent extends FMLEvent { 
 private ModContainer activeContainer ; 
 @ @ - 72 , 6 + 75 , 7 @ @ public class FMLInterModComms { 
 * 
 * / 
 public static final class IMCMessage { 
 + private final boolean isFunction ; 
 / * * 
 * This is the modid of the mod that sent you the message 
 * / 
 @ @ - 83 , 12 + 87 , 19 @ @ public class FMLInterModComms { 
 / * * 
 * This field , and { @ link # key } are both at the mod ' s discretion 
 * / 
 - private Object value ; 
 + private final Object value ; 
 
 private IMCMessage ( String key , Object value ) 
 { 
 this . key = key ; 
 this . value = value ; 
 + this . isFunction = false ; 
 + } 
 + 
 + private IMCMessage ( String key , String value , boolean isFunction ) { 
 + this . key = key ; 
 + this . value = value ; 
 + this . isFunction = isFunction ; 
 } 
 
 @ Override 
 @ @ - 97 , 6 + 108 , 10 @ @ public class FMLInterModComms { 
 return sender ; 
 } 
 
 + / * * 
 + * Get the sending modId of this message . 
 + * @ return The modId of the mod that originated the message 
 + * / 
 public String getSender ( ) 
 { 
 return this . sender ; 
 @ @ - 107 , 70 + 122 , 200 @ @ public class FMLInterModComms { 
 this . sender = activeModContainer . getModId ( ) ; 
 } 
 
 + / * * 
 + * Get the string value from this message . 
 + * @ throws ClassCastException if this message doesn ' t contain a String value 
 + * @ return The string value 
 + * / 
 public String getStringValue ( ) 
 { 
 return ( String ) value ; 
 } 
 
 + / * * 
 + * Get the { @ link NBTTagCompound } value from this message 
 + * @ throws ClassCastException if this message doesn ' t contain an NBT value 
 + * @ return The NBT value 
 + * / 
 public NBTTagCompound getNBTValue ( ) 
 { 
 return ( NBTTagCompound ) value ; 
 } 
 
 + / * * 
 + * Get the { @ link ItemStack } value from this message 
 + * @ throws ClassCastException if this message doesn ' t contain an Itemstack value 
 + * @ return The Itemstack value 
 + * / 
 public ItemStack getItemStackValue ( ) 
 { 
 return ( ItemStack ) value ; 
 } 
 
 + / * * 
 + * Get the { @ link Function } value from this message . This will attempt to classload the function 
 + * supplied by the caller . The parameter classes are strictly to give a concrete generic function return value . 
 + * @ param functionFrom The type of the argument to the function 
 + * @ param functionTo The type of the result of the function 
 + * @ param < T > The argument type 
 + * @ param < V > The result type 
 + * @ return The function value or Optional . absent if it wasn ' t readable or isn ' t a function call 
 + * / 
 + public < T , V > Optional < Function < T , V > > getFunctionValue ( Class < T > functionFrom , Class < V > functionTo ) { 
 + if ( ! isFunction ) { 
 + return Optional . absent ( ) ; 
 + } 
 + try { 
 + Function < T , V > f = Class . forName ( ( String ) value ) . asSubclass ( Function . class ) . newInstance ( ) ; 
 + return Optional . of ( f ) ; 
 + } catch ( Exception e ) { 
 + FMLLog . getLogger ( ) . log ( Level . INFO , " An error occurred instantiating the IMC function . key : { } value : { } , caller : { } " , key , value , sender ) ; 
 + return Optional . absent ( ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Get the actual message class type 
 + * @ return The type of the message 
 + * / 
 public Class < ? > getMessageType ( ) 
 { 
 return value . getClass ( ) ; 
 } 
 
 + / * * 
 + * Is this a string type message 
 + * @ return if this is a string type message 
 + * / 
 public boolean isStringMessage ( ) 
 { 
 return String . class . isAssignableFrom ( getMessageType ( ) ) ; 
 } 
 
 + / * * 
 + * Is this an { @ link ItemStack } type message 
 + * @ return if this is an itemstack type message 
 + * / 
 public boolean isItemStackMessage ( ) 
 { 
 return ItemStack . class . isAssignableFrom ( getMessageType ( ) ) ; 
 } 
 
 + / * * 
 + * Is this an { @ link NBTTagCompound } type message 
 + * @ return if this is an NBT type message 
 + * / 
 public boolean isNBTMessage ( ) 
 { 
 return NBTTagCompound . class . isAssignableFrom ( getMessageType ( ) ) ; 
 } 
 + 
 + / * * 
 + * Is this a { @ link Function } type message 
 + * @ return if this is a function type message 
 + * / 
 + public boolean isFunctionMessage ( ) { return Function . class . isAssignableFrom ( getMessageType ( ) ) ; } 
 } 
 
 + / * * 
 + * Send a startup time message 
 + * @ param modId The modid to send it to 
 + * @ param key The mod specific key 
 + * @ param value An NBT type value 
 + * @ return if the message was enqueued successfully and will be processed during startup 
 + * / 
 public static boolean sendMessage ( String modId , String key , NBTTagCompound value ) 
 { 
 return enqueueStartupMessage ( modId , new IMCMessage ( key , value ) ) ; 
 } 
 + 
 + / * * 
 + * Send a startup time message 
 + * @ param modId The modid to send it to 
 + * @ param key The mod specific key 
 + * @ param value An Itemstack value 
 + * @ return if the message was enqueued successfully and will be processed during startup 
 + * / 
 public static boolean sendMessage ( String modId , String key , ItemStack value ) 
 { 
 return enqueueStartupMessage ( modId , new IMCMessage ( key , value ) ) ; 
 } 
 + 
 + / * * 
 + * Send a startup time message 
 + * @ param modId The modid to send it to 
 + * @ param key The mod specific key 
 + * @ param value A String value 
 + * @ return if the message was enqueued successfully and will be processed during startup 
 + * / 
 public static boolean sendMessage ( String modId , String key , String value ) 
 { 
 return enqueueStartupMessage ( modId , new IMCMessage ( key , value ) ) ; 
 } 
 
 + / * * 
 + * Send a startup time function message 
 + * @ param modId The modid to send it to 
 + * @ param key The mod specific key 
 + * @ param functionClassName The class name of a function that will be instantiated when the 
 + * message is read . It must implement { @ link Function } 
 + * @ return if the message was enqueued successfully and will be processed during startup 
 + * / 
 + public static boolean sendFunctionMessage ( String modId , String key , String functionClassName ) 
 + { 
 + return enqueueStartupMessage ( modId , new IMCMessage ( key , functionClassName , true ) ) ; 
 + } 
 + 
 + / * * 
 + * Send a post - startup message 
 + * @ param sourceMod The mod sending the message 
 + * @ param modId The modid to send it to 
 + * @ param key The mod specific key 
 + * @ param value An NBT type value 
 + * / 
 public static void sendRuntimeMessage ( Object sourceMod , String modId , String key , NBTTagCompound value ) 
 { 
 enqueueMessage ( sourceMod , modId , new IMCMessage ( key , value ) ) ; 
 } 
 
 + / * * 
 + * Send a post - startup message 
 + * @ param sourceMod The mod sending the message 
 + * @ param modId The modid to send it to 
 + * @ param key The mod specific key 
 + * @ param value An Itemstack value 
 + * / 
 public static void sendRuntimeMessage ( Object sourceMod , String modId , String key , ItemStack value ) 
 { 
 enqueueMessage ( sourceMod , modId , new IMCMessage ( key , value ) ) ; 
 } 
 
 + / * * 
 + * Send a post - startup message 
 + * @ param sourceMod The mod sending the message 
 + * @ param modId The modid to send it to 
 + * @ param key The mod specific key 
 + * @ param value A string value 
 + * / 
 public static void sendRuntimeMessage ( Object sourceMod , String modId , String key , String value ) 
 { 
 enqueueMessage ( sourceMod , modId , new IMCMessage ( key , value ) ) ; 
 } 
 
 + / * * 
 + * Send a post - startup function message . 
 + * 
 + * @ param sourceMod The mod originating this message 
 + * @ param modId The modid to send it to 
 + * @ param key The mod specific key 
 + * @ param functionClassName The name of a class to be loaded when the caller processes this message . 
 + * The named class must extend { @ link Function } 
 + * / 
 + public static void sendRuntimeFunctionMessage ( Object sourceMod , String modId , String key , String functionClassName ) 
 + { 
 + enqueueMessage ( sourceMod , modId , new IMCMessage ( key , functionClassName , true ) ) ; 
 + } 
 + 
 private static boolean enqueueStartupMessage ( String modTarget , IMCMessage message ) 
 { 
 if ( Loader . instance ( ) . activeModContainer ( ) = = null ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLLoadCompleteEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLLoadCompleteEvent . java 
 index 45cf932 . . 40fbff7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLLoadCompleteEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLLoadCompleteEvent . java 
 @ @ - 14 , 6 + 14 , 12 @ @ package net . minecraftforge . fml . common . event ; 
 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 
 + / * * 
 + * This is a mostly internal event fired to mod containers that indicates that loading is complete . Mods should not 
 + * in general override or otherwise attempt to implement this event . 
 + * 
 + * @ author cpw 
 + * / 
 public class FMLLoadCompleteEvent extends FMLStateEvent 
 { 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLLoadEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLLoadEvent . java 
 index 33dfca0 . . 3258ffc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLLoadEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLLoadEvent . java 
 @ @ - 12 , 6 + 12 , 11 @ @ 
 
 package net . minecraftforge . fml . common . event ; 
 
 + / * * 
 + * Internal only event , used to begin the lifecycle of loading mods . 
 + * 
 + * @ author cpw 
 + * / 
 public class FMLLoadEvent 
 { 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLMissingMappingsEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLMissingMappingsEvent . java 
 index 7515da1 . . 2d5d488 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLMissingMappingsEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLMissingMappingsEvent . java 
 @ @ - 17 , 7 + 17 , 9 @ @ import com . google . common . collect . ListMultimap ; 
 * These can be remapped to other existing objects , or simply discarded . 
 * Use get ( ) and getAll ( ) to process this event . 
 * 
 - * @ author cpw , Player 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * @ author Player 
 * 
 * / 
 public class FMLMissingMappingsEvent extends FMLEvent { 
 @ @ - 31 , 7 + 33 , 7 @ @ public class FMLMissingMappingsEvent extends FMLEvent { 
 * @ author cpw 
 * 
 * / 
 - public static enum Action { 
 + public enum Action { 
 / * * 
 * Take the default action 
 * / 
 @ @ - 70 , 16 + 72 , 6 @ @ public class FMLMissingMappingsEvent extends FMLEvent { 
 this . name = name ; 
 this . id = id ; 
 } 
 - / * * 
 - * @ deprecated use ignore ( ) , warn ( ) , fail ( ) or remap ( ) instead 
 - * / 
 - @ Deprecated 
 - public void setAction ( Action target ) 
 - { 
 - if ( target = = Action . DEFAULT | | target = = Action . REMAP | | target = = Action . BLOCKONLY ) throw new IllegalArgumentException ( ) ; 
 - 
 - this . action = target ; 
 - } 
 
 / * * 
 * Ignore the missing item . 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLModIdMappingEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLModIdMappingEvent . java 
 index d371aa0 . . ab761c3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLModIdMappingEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLModIdMappingEvent . java 
 @ @ - 9 , 8 + 9 , 21 @ @ import java . util . Map . Entry ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Lists ; 
 
 + / * * 
 + * Called whenever the ID mapping might have changed . If you register for this event , you 
 + * will be called back whenever the client or server loads an ID set . This includes both 
 + * when the ID maps are loaded from disk , as well as when the ID maps revert to the initial 
 + * state . 
 + * 
 + * Note : you cannot change the IDs that have been allocated , but you might want to use 
 + * this event to update caches or other in - mod artifacts that might be impacted by an ID 
 + * change . 
 + * 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * / 
 public class FMLModIdMappingEvent extends FMLEvent { 
 - public static enum RemapTarget { BLOCK , ITEM } 
 + public enum RemapTarget { BLOCK , ITEM } 
 public class ModRemapping 
 { 
 public final int oldId ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLPostInitializationEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLPostInitializationEvent . java 
 index f281b4e . . 1245896 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLPostInitializationEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLPostInitializationEvent . java 
 @ @ - 12 , 11 + 12 , 29 @ @ 
 
 package net . minecraftforge . fml . common . event ; 
 
 + import com . google . common . base . Function ; 
 + import com . google . common . base . Optional ; 
 + import com . google . common . collect . Lists ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 
 import com . google . common . base . Throwables ; 
 + import org . apache . logging . log4j . Level ; 
 
 + import javax . annotation . Nonnull ; 
 + import javax . annotation . Nullable ; 
 + import java . lang . reflect . Constructor ; 
 + 
 + / * * 
 + * Called after { @ link FMLInitializationEvent } has been dispatched on every mod . This is the third and last 
 + * commonly called event during mod initialization . 
 + * 
 + * Recommended activities : interact with other mods to establish cross - mod behaviours . 
 + * 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * / 
 public class FMLPostInitializationEvent extends FMLStateEvent 
 { 
 public FMLPostInitializationEvent ( Object . . . data ) 
 @ @ - 30 , 21 + 48 , 38 @ @ public class FMLPostInitializationEvent extends FMLStateEvent 
 return ModState . POSTINITIALIZED ; 
 } 
 
 - public Object buildSoftDependProxy ( String modId , String className ) 
 + / * * 
 + * Build an object depending on if a specific target mod is loaded or not . 
 + * 
 + * Usually would be used to access an object from the other mod . 
 + * 
 + * @ param modId The modId I conditionally want to build an object for 
 + * @ param className The name of the class I wish to instantiate 
 + * @ return An optional containing the object if possible , or null if not 
 + * / 
 + public Optional < Object > buildSoftDependProxy ( String modId , String className , Object . . . arguments ) 
 { 
 if ( Loader . isModLoaded ( modId ) ) 
 { 
 + Class < ? > [ ] args = Lists . transform ( Lists . newArrayList ( arguments ) , new Function < Object , Class < ? > > ( ) { 
 + @ Nullable 
 + @ Override 
 + public Class < ? > apply ( @ Nullable Object input ) { 
 + return input . getClass ( ) ; 
 + } 
 + } ) . toArray ( new Class [ 0 ] ) ; 
 try 
 { 
 Class < ? > clz = Class . forName ( className , true , Loader . instance ( ) . getModClassLoader ( ) ) ; 
 - return clz . newInstance ( ) ; 
 + Constructor < ? > ct = clz . getConstructor ( args ) ; 
 + return Optional . fromNullable ( ct . newInstance ( arguments ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 - Throwables . propagateIfPossible ( e ) ; 
 - return null ; 
 + FMLLog . getLogger ( ) . log ( Level . INFO , " An error occurred trying to build a soft depend proxy " , e ) ; 
 + return Optional . absent ( ) ; 
 } 
 } 
 - return null ; 
 + return Optional . absent ( ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLPreInitializationEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLPreInitializationEvent . java 
 index b8e803c . . 009b0b5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLPreInitializationEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLPreInitializationEvent . java 
 @ @ - 26 , 6 + 26 , 22 @ @ import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 + / * * 
 + * Called before { @ link FMLInitializationEvent } during mod startup . 
 + * 
 + * This is the first of three commonly called events during mod initialization . 
 + * 
 + * Recommended activities : 
 + * Setup your logging { @ link # getModLog ( ) } 
 + * Load any configuration data you might have { @ link # getSuggestedConfigurationFile ( ) } 
 + * Search for a version . properties file and load it { @ link # getVersionProperties ( ) } 
 + * Configure your { @ link ModMetadata } programmatically { @ link # getModMetadata ( ) } 
 + * Register your blocks and items with the { @ link net . minecraftforge . fml . common . registry . GameRegistry } 
 + * Discover parts of your mod by using annotation search { @ link # getAsmData ( ) } 
 + * 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * / 
 public class FMLPreInitializationEvent extends FMLStateEvent 
 { 
 private ModMetadata modMetadata ; 
 @ @ - 57 , 31 + 73 , 58 @ @ public class FMLPreInitializationEvent extends FMLStateEvent 
 this . suggestedConfigFile = new File ( configurationDir , activeContainer . getModId ( ) + " . cfg " ) ; 
 } 
 
 + / * * 
 + * Get the { @ link File } the mod was loaded from 
 + * @ return The file the mod was loaded from 
 + * / 
 public File getSourceFile ( ) 
 { 
 return sourceFile ; 
 } 
 
 + / * * 
 + * Get the { @ link ModMetadata } for this mod 
 + * @ return the mod metadata for the mod 
 + * / 
 public ModMetadata getModMetadata ( ) 
 { 
 return modMetadata ; 
 } 
 
 + / * * 
 + * Get the main configuration directory for this minecraft instance 
 + * @ return the main configuration directory 
 + * / 
 public File getModConfigurationDirectory ( ) 
 { 
 return configurationDir ; 
 } 
 
 + / * * 
 + * Get a suggested configuration file for this mod . It will be of the form & lt ; modid & gt ; . cfg 
 + * @ return A suggested configuration file name for this mod 
 + * / 
 public File getSuggestedConfigurationFile ( ) 
 { 
 return suggestedConfigFile ; 
 } 
 
 + / * * 
 + * Get the { @ link ASMDataTable } for this instance of Minecraft . This is a special structure containing 
 + * parsing information from FML . It can be searched for annotations parsed out by FML . 
 + * @ return 
 + * / 
 public ASMDataTable getAsmData ( ) 
 { 
 return asmData ; 
 } 
 
 + / * * 
 + * Get a version . properties file as a { @ link Properties } object from the mod file . 
 + * This can be used to load build - type information 
 + * such as a unique version number from a properties file shipped as part of the distributable . 
 + * @ return A properties object if one exists , else null 
 + * / 
 public Properties getVersionProperties ( ) 
 { 
 if ( this . modContainer instanceof FMLModContainer ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerAboutToStartEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerAboutToStartEvent . java 
 index b58c80b . . 8c129d8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerAboutToStartEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerAboutToStartEvent . java 
 @ @ - 15 , 6 + 15 , 14 @ @ package net . minecraftforge . fml . common . event ; 
 import net . minecraft . server . MinecraftServer ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 
 + / * * 
 + * Called before the server begins loading anything . Called after { @ link FMLPostInitializationEvent } on the dedicated 
 + * server , and after the player has hit " Play Selected World " in the client . Called before { @ link FMLServerStartingEvent } . 
 + * 
 + * You can obtain a reference to the server with this event . 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * / 
 public class FMLServerAboutToStartEvent extends FMLStateEvent { 
 
 private MinecraftServer server ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartedEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartedEvent . java 
 index c0fddc9 . . b11e6cb 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartedEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartedEvent . java 
 @ @ - 14 , 6 + 14 , 12 @ @ package net . minecraftforge . fml . common . event ; 
 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 
 + / * * 
 + * Called after { @ link FMLServerStartingEvent } when the server is available and ready to play . 
 + * 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * / 
 public class FMLServerStartedEvent extends FMLStateEvent 
 { 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartingEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartingEvent . java 
 index fd0131c . . ae5d54f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartingEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStartingEvent . java 
 @ @ - 17 , 6 + 17 , 14 @ @ import net . minecraft . command . ICommand ; 
 import net . minecraft . server . MinecraftServer ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 
 + / * * 
 + * Called after { @ link FMLServerAboutToStartEvent } and before { @ link FMLServerStartedEvent } . 
 + * This event allows for customizations of the server , such as loading custom commands , perhaps customizing recipes or 
 + * other activities . 
 + * 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * / 
 public class FMLServerStartingEvent extends FMLStateEvent 
 { 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppedEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppedEvent . java 
 index 6a5200e . . 52325c8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppedEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppedEvent . java 
 @ @ - 14 , 6 + 14 , 14 @ @ package net . minecraftforge . fml . common . event ; 
 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 
 + / * * 
 + * Called after { @ link FMLServerStoppingEvent } when the server has completely shut down . 
 + * Called immediately before shutting down , on the dedicated server , and before returning 
 + * to the main menu on the client . 
 + * 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * / 
 public class FMLServerStoppedEvent extends FMLStateEvent { 
 
 public FMLServerStoppedEvent ( Object . . . data ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppingEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppingEvent . java 
 index ea95654 . . 8556d9b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppingEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLServerStoppingEvent . java 
 @ @ - 14 , 6 + 14 , 12 @ @ package net . minecraftforge . fml . common . event ; 
 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 
 + / * * 
 + * Called when the server begins an orderly shutdown , before { @ link FMLServerStoppedEvent } . 
 + * 
 + * @ see net . minecraftforge . fml . common . Mod . EventHandler for how to subscribe to this event 
 + * @ author cpw 
 + * / 
 public class FMLServerStoppingEvent extends FMLStateEvent 
 { 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / event / FMLStateEvent . java b / src / main / java / net / minecraftforge / fml / common / event / FMLStateEvent . java 
 index c2a8cc5 . . e384c90 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / event / FMLStateEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / event / FMLStateEvent . java 
 @ @ - 16 , 6 + 16 , 9 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 + / * * 
 + * The parent of all mod - state changing events 
 + * / 
 public abstract class FMLStateEvent extends FMLEvent 
 { 
 public FMLStateEvent ( Object . . . data ) 
 @ @ - 23 , 8 + 26 , 17 @ @ public abstract class FMLStateEvent extends FMLEvent 
 
 } 
 
 + / * * 
 + * The current state of the mod 
 + * @ return The current state of the mod 
 + * / 
 public abstract ModState getModState ( ) ; 
 
 + / * * 
 + * The side we ' re loading on . { @ link Side # CLIENT } means we ' re loading in the client , { @ link Side # SERVER } means 
 + * we ' re loading in the dedicated server . 
 + * @ return Return which side we ' re loading on . 
 + * / 
 public Side getSide ( ) 
 { 
 return FMLCommonHandler . instance ( ) . getSide ( ) ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 index 1f3e186 . . fcfee4e 100644 
 - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 @ @ - 6 , 42 + 6 , 38 @ @ 
 package net . minecraftforge . client . gui ; 
 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . Comparator ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 import java . util . TreeMap ; 
 - import java . util . regex . Pattern ; 
 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . gui . GuiScreen ; 
 - import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . client . resources . I18n ; 
 import net . minecraftforge . common . ForgeChunkManager ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . config . ConfigCategory ; 
 import net . minecraftforge . common . config . ConfigElement ; 
 import net . minecraftforge . common . config . Configuration ; 
 import net . minecraftforge . common . config . Property ; 
 import net . minecraftforge . fml . client . IModGuiFactory ; 
 - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionCategoryElement ; 
 - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionGuiHandler ; 
 import net . minecraftforge . fml . client . config . ConfigGuiType ; 
 import net . minecraftforge . fml . client . config . DummyConfigElement ; 
 import net . minecraftforge . fml . client . config . DummyConfigElement . DummyCategoryElement ; 
 - import net . minecraftforge . fml . client . config . GuiButtonExt ; 
 import net . minecraftforge . fml . client . config . GuiConfig ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . CategoryEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . SelectValueEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . BooleanEntry ; 
 - import net . minecraftforge . fml . client . config . HoverChecker ; 
 import net . minecraftforge . fml . client . config . IConfigElement ; 
 - import net . minecraftforge . fml . client . config . GuiConfigEntries . ListEntryBase ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 - import net . minecraftforge . fml . relauncher . Side ; 
 - import net . minecraftforge . fml . relauncher . SideOnly ; 
 + import static net . minecraftforge . common . ForgeModContainer . VERSION _ CHECK _ CAT ; 
 
 / * * 
 * This is the base GuiConfig screen class that all the other Forge - specific config screens will be called from . 
 @ @ - 109 , 6 + 105 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory 
 List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; 
 list . add ( new DummyCategoryElement ( " forgeCfg " , " forge . configgui . ctgy . forgeGeneralConfig " , GeneralEntry . class ) ) ; 
 list . add ( new DummyCategoryElement ( " forgeChunkLoadingCfg " , " forge . configgui . ctgy . forgeChunkLoadingConfig " , ChunkLoaderEntry . class ) ) ; 
 + list . add ( new DummyCategoryElement ( " forgeVersionCheckCfg " , " forge . configgui . ctgy . VersionCheckConfig " , VersionCheckEntry . class ) ) ; 
 return list ; 
 } 
 
 @ @ - 167 , 6 + 164 , 59 @ @ public class ForgeGuiFactory implements IModGuiFactory 
 } 
 
 / * * 
 + * This custom list entry provides the Forge Version Checking Config entry on the Minecraft Forge Configuration screen . 
 + * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . 
 + * / 
 + public static class VersionCheckEntry extends CategoryEntry 
 + { 
 + public VersionCheckEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement prop ) 
 + { 
 + super ( owningScreen , owningEntryList , prop ) ; 
 + } 
 + 
 + @ Override 
 + protected GuiScreen buildChildScreen ( ) 
 + { 
 + ConfigCategory cfg = ForgeModContainer . getConfig ( ) . getCategory ( VERSION _ CHECK _ CAT ) ; 
 + Map < String , Property > values = new HashMap < String , Property > ( cfg . getValues ( ) ) ; 
 + values . remove ( " Global " ) ; 
 + 
 + Property global = ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , " Global " , true ) ; 
 + 
 + List < Property > props = new ArrayList < Property > ( ) ; 
 + 
 + for ( ModContainer mod : ForgeVersion . gatherMods ( ) . keySet ( ) ) 
 + { 
 + values . remove ( mod . getModId ( ) ) ; 
 + props . add ( ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) ) ; / / Get or make the value in the config 
 + } 
 + props . addAll ( values . values ( ) ) ; / / Add any left overs from the config 
 + Collections . sort ( props , new Comparator < Property > ( ) 
 + { 
 + @ Override 
 + public int compare ( Property o1 , Property o2 ) 
 + { 
 + return o1 . getName ( ) . compareTo ( o2 . getName ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; 
 + list . add ( new ConfigElement ( global ) ) ; 
 + for ( Property prop : props ) 
 + { 
 + list . add ( new ConfigElement ( prop ) ) ; 
 + } 
 + 
 + / / This GuiConfig object specifies the configID of the object and as such will force - save when it is closed . The parent 
 + / / GuiConfig object ' s propertyList will also be refreshed to reflect the changes . 
 + return new GuiConfig ( this . owningScreen , 
 + list , 
 + this . owningScreen . modID , VERSION _ CHECK _ CAT , true , true , 
 + GuiConfig . getAbridgedConfigPath ( ForgeModContainer . getConfig ( ) . toString ( ) ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 * This custom list entry provides the Mod Overrides entry on the Forge Chunk Loading config screen . 
 * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . 
 * In this case it adds the custom entry for adding a new mod override and lists the existing mod overrides . 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 7105295 . . 3805d49 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 12 , 13 + 12 , 14 @ @ import static net . minecraftforge . common . ForgeVersion . revisionVersion ; 
 import static net . minecraftforge . common . config . Configuration . CATEGORY _ GENERAL ; 
 
 import java . io . File ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 - import net . minecraft . init . Blocks ; 
 import net . minecraft . nbt . NBTBase ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . world . storage . SaveHandler ; 
 @ @ - 58 , 6 + 59 , 7 @ @ import net . minecraftforge . fml . common . network . NetworkRegistry ; 
 
 public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer 
 { 
 + public static final String VERSION _ CHECK _ CAT = " version _ checking " ; 
 public static int clumpingThreshold = 64 ; 
 public static boolean removeErroringEntities = false ; 
 public static boolean removeErroringTileEntities = false ; 
 @ @ - 73 , 6 + 75 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean forgeLightPipelineEnabled = true ; 
 
 private static Configuration config ; 
 + private static ForgeModContainer INSTANCE ; 
 + public static ForgeModContainer getInstance ( ) 
 + { 
 + return INSTANCE ; 
 + } 
 + 
 + private URL updateJSONUrl = null ; 
 
 public ForgeModContainer ( ) 
 { 
 @ @ - 82 , 7 + 91 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 meta . name = " Minecraft Forge " ; 
 meta . version = String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 meta . credits = " Made possible with help from many people " ; 
 - meta . authorList = Arrays . asList ( " LexManos " , " Eloraam " , " Spacetoad " ) ; 
 + meta . authorList = Arrays . asList ( " LexManos " , " Cpw " ) ; 
 meta . description = " Minecraft Forge is a common open source API allowing a broad range of mods " + 
 " to work cooperatively together . It allows many mods to be created without " + 
 " them editing the main Minecraft code . " ; 
 @ @ - 90 , 12 + 99 , 17 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; 
 meta . screenshots = new String [ 0 ] ; 
 meta . logoFile = " / forge _ logo . png " ; 
 + try { 
 + updateJSONUrl = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + } catch ( MalformedURLException e ) { } 
 
 config = null ; 
 File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; 
 config = new Configuration ( cfgFile ) ; 
 
 syncConfig ( true ) ; 
 + 
 + INSTANCE = this ; 
 } 
 
 @ Override 
 @ @ - 230 , 6 + 244 , 12 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 
 config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; 
 
 + propOrder = new ArrayList < String > ( ) ; 
 + prop = config . get ( VERSION _ CHECK _ CAT , " Global " , true , " Enable the entire mod update check system . This only applies to mods using the Forge system . " ) ; 
 + propOrder . add ( " Global " ) ; 
 + 
 + config . setCategoryPropertyOrder ( VERSION _ CHECK _ CAT , propOrder ) ; 
 + 
 if ( config . hasChanged ( ) ) 
 { 
 config . save ( ) ; 
 @ @ - 254 , 6 + 274 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 ForgeChunkManager . syncConfigDefaults ( ) ; 
 ForgeChunkManager . loadConfiguration ( ) ; 
 } 
 + else if ( VERSION _ CHECK _ CAT . equals ( event . configID ) ) 
 + { 
 + syncConfig ( false ) ; 
 + } 
 } 
 } 
 
 @ @ - 396 , 4 + 420 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 Certificate [ ] certificates = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; 
 return certificates ! = null ? certificates [ 0 ] : null ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return updateJSONUrl ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index bc5db2f . . 71d594c 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 8 , 13 + 8 , 25 @ @ import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 import java . io . InputStream ; 
 import java . net . URL ; 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . LinkedHashMap ; 
 + import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 + 
 + import org . apache . logging . log4j . Level ; 
 
 import com . google . common . io . ByteStreams ; 
 import com . google . gson . Gson ; 
 
 - import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . InjectedModContainer ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import net . minecraftforge . fml . common . versioning . ComparableVersion ; 
 
 public class ForgeVersion 
 { 
 @ @ - 55 , 12 + 67 , 13 @ @ public class ForgeVersion 
 
 public static Status getStatus ( ) 
 { 
 - return status ; 
 + return getResult ( ForgeModContainer . getInstance ( ) ) . status ; 
 } 
 
 public static String getTarget ( ) 
 { 
 - return target ; 
 + CheckResult res = getResult ( ForgeModContainer . getInstance ( ) ) ; 
 + return res . target ! = null ? res . target . toString ( ) : null ; 
 } 
 
 public static String getVersion ( ) 
 @ @ - 79 , 32 + 92 , 75 @ @ public class ForgeVersion 
 BETA _ OUTDATED 
 } 
 
 + public static class CheckResult 
 + { 
 + public final Status status ; 
 + public final ComparableVersion target ; 
 + public final Map < ComparableVersion , String > changes ; 
 + public final String url ; 
 + 
 + private CheckResult ( Status status , ComparableVersion target , Map < ComparableVersion , String > changes , String url ) 
 + { 
 + this . status = status ; 
 + this . target = target ; 
 + this . changes = changes = = null ? null : Collections . unmodifiableMap ( changes ) ; 
 + this . url = url ; 
 + } 
 + } 
 + 
 public static void startVersionCheck ( ) 
 { 
 new Thread ( " Forge Version Check " ) 
 { 
 - @ SuppressWarnings ( " unchecked " ) 
 @ Override 
 public void run ( ) 
 { 
 + if ( ! ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , " Global " , true ) . getBoolean ( ) ) 
 + { 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " Global Forge version check system disabeld , no futher processing . " ) ; 
 + return ; 
 + } 
 + 
 + for ( Entry < ModContainer , URL > entry : gatherMods ( ) . entrySet ( ) ) 
 + { 
 + ModContainer mod = entry . getKey ( ) ; 
 + if ( ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) . getBoolean ( ) ) 
 + { 
 + process ( mod , entry . getValue ( ) ) ; 
 + } 
 + else 
 + { 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Skipped version check " , mod . getModId ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + private void process ( ModContainer mod , URL url ) 
 + { 
 try 
 { 
 - URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Starting version check at % s " , mod . getModId ( ) , url . toString ( ) ) ; 
 + Status status = PENDING ; 
 + ComparableVersion target = null ; 
 + 
 InputStream con = url . openStream ( ) ; 
 String data = new String ( ByteStreams . toByteArray ( con ) ) ; 
 con . close ( ) ; 
 
 + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , " [ % s ] Received version check data : \ n % s " , mod . getModId ( ) , data ) ; 
 + 
 + 
 Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; 
 - / / String homepage = ( String ) json . get ( " homepage " ) ; 
 Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; 
 + String display _ url = ( String ) json . get ( " homepage " ) ; 
 
 String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; 
 String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; 
 - ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; 
 + ComparableVersion current = new ComparableVersion ( mod . getVersion ( ) ) ; 
 
 if ( rec ! = null ) 
 { 
 - ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; 
 + ComparableVersion recommended = new ComparableVersion ( rec ) ; 
 int diff = recommended . compareTo ( current ) ; 
 
 if ( diff = = 0 ) 
 @ @ - 114 , 39 + 170 , 95 @ @ public class ForgeVersion 
 status = AHEAD ; 
 if ( lat ! = null ) 
 { 
 - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + ComparableVersion latest = new ComparableVersion ( lat ) ; 
 + if ( current . compareTo ( latest ) < 0 ) 
 { 
 status = OUTDATED ; 
 - target = lat ; 
 + target = latest ; 
 } 
 } 
 } 
 else 
 { 
 status = OUTDATED ; 
 - target = rec ; 
 + target = recommended ; 
 } 
 } 
 else if ( lat ! = null ) 
 { 
 - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + ComparableVersion latest = new ComparableVersion ( lat ) ; 
 + if ( current . compareTo ( latest ) < 0 ) 
 { 
 status = BETA _ OUTDATED ; 
 - target = lat ; 
 + target = latest ; 
 } 
 else 
 status = BETA ; 
 } 
 else 
 status = BETA ; 
 + 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Found status : % s Target : % s " , mod . getModId ( ) , status , target ) ; 
 + 
 + Map < ComparableVersion , String > changes = new LinkedHashMap < ComparableVersion , String > ( ) ; 
 + Map < String , String > tmp = ( Map < String , String > ) json . get ( MinecraftForge . MC _ VERSION ) ; 
 + if ( tmp ! = null ) 
 + { 
 + List < ComparableVersion > ordered = new ArrayList < ComparableVersion > ( ) ; 
 + for ( String key : tmp . keySet ( ) ) 
 + { 
 + ComparableVersion ver = new ComparableVersion ( key ) ; 
 + if ( ver . compareTo ( current ) > 0 & & ( target = = null | | ver . compareTo ( target ) < 1 ) ) 
 + { 
 + ordered . add ( ver ) ; 
 + } 
 + } 
 + Collections . sort ( ordered ) ; 
 + 
 + for ( ComparableVersion ver : ordered ) 
 + { 
 + changes . put ( ver , tmp . get ( ver . toString ( ) ) ) ; 
 + } 
 + } 
 + if ( mod instanceof InjectedModContainer ) 
 + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; 
 + results . put ( mod , new CheckResult ( status , target , changes , display _ url ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , e , " Failed to process update information " ) ; 
 status = FAILED ; 
 } 
 } 
 } . start ( ) ; 
 } 
 + 
 + / / Gather a list of mods that have opted in to this update system by providing a URL . 
 + / / Small hack needed to support a interface change until we force a recompile . 
 + public static Map < ModContainer , URL > gatherMods ( ) 
 + { 
 + Map < ModContainer , URL > ret = new HashMap < ModContainer , URL > ( ) ; 
 + for ( ModContainer mod : Loader . instance ( ) . getActiveModList ( ) ) 
 + { 
 + URL url = null ; 
 + try { 
 + url = mod . getUpdateUrl ( ) ; 
 + } catch ( AbstractMethodError abs ) { } / / TODO : Remove this in 1 . 8 . 8 + ? 
 + if ( url ! = null ) 
 + ret . put ( mod , url ) ; 
 + } 
 + return ret ; 
 + } 
 + 
 + private static Map < ModContainer , CheckResult > results = new ConcurrentHashMap < ModContainer , CheckResult > ( ) ; 
 + private static final CheckResult PENDING _ CHECK = new CheckResult ( PENDING , null , null , null ) ; 
 + 
 + public static CheckResult getResult ( ModContainer mod ) 
 + { 
 + if ( mod instanceof InjectedModContainer ) 
 + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; 
 + CheckResult ret = results . get ( mod ) ; 
 + return ret = = null ? PENDING _ CHECK : ret ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / GuiModList . java 
 index ba0085f . . 720e3e0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiModList . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . Comparator ; 
 import java . util . List ; 
 + import java . util . Map . Entry ; 
 
 import javax . imageio . ImageIO ; 
 
 @ @ - 43 , 10 + 44 , 14 @ @ import net . minecraft . util . IChatComponent ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . StringUtils ; 
 import net . minecraftforge . common . ForgeHooks ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . CheckResult ; 
 + import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . ModContainer . Disableable ; 
 + import net . minecraftforge . fml . common . versioning . ComparableVersion ; 
 import static net . minecraft . util . EnumChatFormatting . * ; 
 
 import org . apache . logging . log4j . Level ; 
 @ @ - 343 , 7 + 348 , 7 @ @ public class GuiModList extends GuiScreen 
 ResourceLocation logoPath = null ; 
 Dimension logoDims = new Dimension ( 0 , 0 ) ; 
 List < String > lines = new ArrayList < String > ( ) ; 
 - / / CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; 
 + CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; 
 
 String logoFile = selectedMod . getMetadata ( ) . logoFile ; 
 if ( ! logoFile . isEmpty ( ) ) 
 @ @ - 408 , 8 + 413 , 8 @ @ public class GuiModList extends GuiScreen 
 else 
 lines . add ( " Child mods : " + selectedMod . getMetadata ( ) . getChildModList ( ) ) ; 
 
 - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 
 lines . add ( null ) ; 
 lines . add ( selectedMod . getMetadata ( ) . description ) ; 
 @ @ - 419 , 15 + 424 , 15 @ @ public class GuiModList extends GuiScreen 
 lines . add ( WHITE + selectedMod . getName ( ) ) ; 
 lines . add ( WHITE + " Version : " + selectedMod . getVersion ( ) ) ; 
 lines . add ( WHITE + " Mod State : " + Loader . instance ( ) . getModState ( selectedMod ) ) ; 
 - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 
 lines . add ( null ) ; 
 lines . add ( RED + " No mod information found " ) ; 
 lines . add ( RED + " Ask your mod author to provide a mod mcmod . info file " ) ; 
 } 
 
 - / * if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) 
 + if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) 
 { 
 lines . add ( null ) ; 
 lines . add ( " Changes : " ) ; 
 @ @ - 437 , 7 + 442 , 7 @ @ public class GuiModList extends GuiScreen 
 lines . add ( entry . getValue ( ) ) ; 
 lines . add ( null ) ; 
 } 
 - } * / 
 + } 
 
 modInfo = new Info ( this . width - this . listWidth - 30 , lines , logoPath , logoDims ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java 
 index 1d47fea . . 90198e1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java 
 @ @ - 17 , 6 + 17 , 8 @ @ import java . util . ArrayList ; 
 import net . minecraft . client . gui . FontRenderer ; 
 import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . util . StringUtils ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . CheckResult ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 @ @ - 79 , 7 + 81 , 7 @ @ public class GuiSlotModList extends GuiScrollingList 
 String name = StringUtils . stripControlCodes ( mc . getName ( ) ) ; 
 String version = StringUtils . stripControlCodes ( mc . getDisplayVersion ( ) ) ; 
 FontRenderer font = this . parent . getFontRenderer ( ) ; 
 - / / CheckResult vercheck = ForgeVersion . getResult ( mc ) ; 
 + CheckResult vercheck = ForgeVersion . getResult ( mc ) ; 
 
 if ( Loader . instance ( ) . getModState ( mc ) = = ModState . DISABLED ) 
 { 
 @ @ - 93 , 7 + 95 , 7 @ @ public class GuiSlotModList extends GuiScrollingList 
 font . drawString ( font . trimStringToWidth ( version , listWidth - 10 ) , this . left + 3 , top + 12 , 0xCCCCCC ) ; 
 font . drawString ( font . trimStringToWidth ( mc . getMetadata ( ) ! = null ? mc . getMetadata ( ) . getChildModCountString ( ) : " Metadata not found " , listWidth - 10 ) , this . left + 3 , top + 22 , 0xCCCCCC ) ; 
 
 - / * switch ( vercheck . status ) / / TODO : Change to icons ? 
 + switch ( vercheck . status ) / / TODO : Change to icons ? 
 { 
 case BETA _ OUTDATED : 
 case OUTDATED : 
 @ @ - 105 , 8 + 107 , 7 @ @ public class GuiSlotModList extends GuiScrollingList 
 case PENDING : 
 case UP _ TO _ DATE : 
 break ; 
 - } * / 
 + } 
 } 
 } 
 - 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 index 88b171c . . d9e11b3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . Collections ; 
 import java . util . List ; 
 @ @ - 206 , 4 + 207 , 10 @ @ public class DummyModContainer implements ModContainer 
 { 
 return true ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return null ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 60ae2c6 . . 05ea505 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 18 , 6 + 18 , 8 @ @ import java . lang . annotation . Annotation ; 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 import java . lang . reflect . Modifier ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 87 , 6 + 89 , 7 @ @ public class FMLModContainer implements ModContainer 
 private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; 
 private Map < String , String > customModProperties ; 
 private ModCandidate candidate ; 
 + private URL updateJSONUrl ; 
 
 public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) 
 { 
 @ @ - 215 , 6 + 218 , 19 @ @ public class FMLModContainer implements ModContainer 
 { 
 minecraftAccepted = Loader . instance ( ) . getMinecraftModContainer ( ) . getStaticVersionRange ( ) ; 
 } 
 + 
 + String jsonURL = ( String ) descriptor . get ( " updateJSON " ) ; 
 + if ( ! Strings . isNullOrEmpty ( jsonURL ) ) 
 + { 
 + try 
 + { 
 + this . updateJSONUrl = new URL ( jsonURL ) ; 
 + } 
 + catch ( MalformedURLException e ) 
 + { 
 + FMLLog . log ( getModId ( ) , Level . DEBUG , " Specified json URL invalid : % s " , jsonURL ) ; 
 + } 
 + } 
 } 
 
 public Properties searchForVersionProperties ( ) 
 @ @ - 663 , 4 + 679 , 10 @ @ public class FMLModContainer implements ModContainer 
 
 return true ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return updateJSONUrl ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 index af91db1 . . 783c28b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 207 , 4 + 208 , 10 @ @ public class InjectedModContainer implements ModContainer 
 { 
 return true ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return wrappedContainer . getUpdateUrl ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index a2ad320 . . 7513fdf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 157 , 18 + 157 , 18 @ @ public @ interface Mod 
 * @ return The language the mod is authored in 
 * / 
 String modLanguage ( ) default " java " ; 
 - 
 + 
 / * * 
 * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a 
 * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . 
 - * 
 + * 
 * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and 
 * halt loading . 
 - * 
 + * 
 * @ return The full class name of the language adapter 
 * / 
 String modLanguageAdapter ( ) default " " ; 
 - 
 + 
 / * * 
 * NOT YET IMPLEMENTED . < / br > 
 * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given 
 @ @ - 198 , 6 + 198 , 14 @ @ public @ interface Mod 
 * @ return The name of a class implementing { @ link IModGuiFactory } 
 * / 
 String guiFactory ( ) default " " ; 
 + 
 + / * * 
 + * An optional URL to a JSON file that will be checked once per launch to determine if there is an updated 
 + * version of this mod and notify the end user . For more information see ForgeVersion . 
 + * @ return URL to update metadata json 
 + * / 
 + String updateJSON ( ) default " " ; 
 + 
 / * * 
 * A list of custom properties for this mod . Completely up to the mod author if / when they 
 * want to put anything in here . 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 index dde8dde . . 883f8b9 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 149 , 4 + 150 , 6 @ @ public interface ModContainer 
 List < String > getOwnedPackages ( ) ; 
 
 boolean shouldLoadInEnvironment ( ) ; 
 + 
 + URL getUpdateUrl ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java 
 index add4b37 . . f0173ca 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java 
 @ @ - 35 , 7 + 35 , 12 @ @ public class ModMetadata 
 public String description = " " ; 
 
 public String url = " " ; 
 + @ Deprecated / / Never really used for anything and format is undefined . See updateJSON for replacement . 
 public String updateUrl = " " ; 
 + / * * 
 + * URL to update json file . Format is defined here : https : / / gist . github . com / LexManos / 7aacb9aa991330523884 
 + * / 
 + public String updateJSON = " " ; 
 
 public String logoFile = " " ; 
 public String version = " " ;
