BLEU SCORE: 0.014445809981770858

TEST MSG: Blocks are no longer erased from the registry if the mod isn ' t present . This means that modded blocks can potentially retain their IDs
GENERATED MSG: OK , this is finally actually working , I think . . .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index 0789301 . . 0cdd305 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 138 , 11 + 138 , 13 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> { <nl> throw new IllegalStateException ( String . format ( " Registry entry for name % s doesn ' t yield the expected id % d . " , name , id ) ) ; <nl> } <nl> + / * <nl> / / entry is blocked , thus should be empty <nl> if ( blockedIds . contains ( id ) ) <nl> { <nl> throw new IllegalStateException ( String . format ( " Registry entry for % s % s , id % d , name % s , marked as dangling . " , registryName , obj , id , name ) ) ; <nl> } <nl> + * / <nl> } <nl> <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 2940832 . . 723bb55 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 19 , 7 + 19 , 11 @ @ import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> import com . google . common . collect . Sets . SetView ; <nl> <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> import net . minecraft . block . Block ; <nl> + import net . minecraft . block . BlockAir ; <nl> + import net . minecraft . init . Blocks ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . potion . Potion ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 167 , 6 + 171 , 18 @ @ public class PersistentRegistryManager <nl> return missedMappings ; <nl> } <nl> <nl> + / / If we ' re loading from disk , we can actually substitute air in the block map for anything that is otherwise " missing " . This keeps the reference in the map , in case <nl> + / / the block comes back later <nl> + if ( injectFrozenData ) <nl> + { <nl> + for ( Map . Entry < ResourceLocation , Integer > missingBlock : missing . get ( BLOCKS ) . entrySet ( ) ) <nl> + { <nl> + ResourceLocation rl = missingBlock . getKey ( ) ; <nl> + Integer id = missingBlock . getValue ( ) ; <nl> + FMLLog . log ( Level . DEBUG , " Replacing id % s named as % s with air block . If the mod becomes available again later , it can reload here " , id , rl ) ; <nl> + PersistentRegistry . STAGING . getRegistry ( BLOCKS , Block . class ) . add ( id , rl , new BlockDummyAir ( ) ) ; <nl> + } <nl> + } <nl> / / If we ' re loading up the world from disk , we want to add in the new data that might have been provisioned by mods <nl> if ( injectFrozenData ) <nl> { <nl> @ @ - 201 , 7 + 217 , 11 @ @ public class PersistentRegistryManager <nl> / / Return an empty list , because we ' re good <nl> return ImmutableList . of ( ) ; <nl> } <nl> - <nl> + private static class BlockDummyAir extends BlockAir { <nl> + private BlockDummyAir ( ) { <nl> + setUnlocalizedName ( " air " ) ; <nl> + } <nl> + } <nl> private static void forAllRegistries ( PersistentRegistry registrySet , Function < Map . Entry < ResourceLocation , FMLControlledNamespacedRegistry < ? > > , Void > operation ) <nl> { <nl> for ( Map . Entry < ResourceLocation , FMLControlledNamespacedRegistry < ? > > r : registrySet . registries . entrySet ( ) )
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java <nl> index 0236046 . . bf2fd34 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java <nl> @ @ - 32 , 10 + 32 , 12 @ @ import net . minecraftforge . fml . client . FMLFileResourcePack ; <nl> import net . minecraftforge . fml . client . FMLFolderResourcePack ; <nl> import net . minecraftforge . fml . common . asm . FMLSanityChecker ; <nl> import net . minecraftforge . fml . common . event . FMLConstructionEvent ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . network . NetworkCheckHandler ; <nl> import net . minecraftforge . fml . common . network . NetworkRegistry ; <nl> import net . minecraftforge . fml . common . network . internal . FMLNetworkHandler ; <nl> import net . minecraftforge . fml . common . registry . GameData ; <nl> + import net . minecraftforge . fml . common . registry . VillagerRegistry ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> @ @ - 84 , 6 + 86 , 13 @ @ public class FMLContainer extends DummyModContainer implements WorldAccessContai <nl> FMLNetworkHandler . registerChannel ( this , evt . getSide ( ) ) ; <nl> } <nl> <nl> + @ Subscribe <nl> + public void modPreinitialization ( FMLPreInitializationEvent evt ) <nl> + { <nl> + / / Initialize the villager registry <nl> + VillagerRegistry . instance ( ) ; <nl> + } <nl> + <nl> @ NetworkCheckHandler <nl> public boolean checkModLists ( Map < String , String > modList , Side side ) <nl> { <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index f1f0ee3 . . 7fd1bca 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ import com . google . common . base . Joiner . MapJoiner ; <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBasedTable ; <nl> import com . google . common . collect . HashBiMap ; <nl> + import com . google . common . collect . ImmutableBiMap ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableListMultimap ; <nl> import com . google . common . collect . ImmutableMap ; <nl> @ @ - 709 , 15 + 710 , 18 @ @ public class GameData { <nl> <nl> int register ( Object obj , String name , int idHint ) / / from FMLControlledNamespacedRegistry . addObject <nl> { <nl> - / / tolerate extra name prefixes here since mc does it as well <nl> - name = addPrefix ( name ) ; <nl> - <nl> if ( obj instanceof Block ) <nl> { <nl> + / / tolerate extra name prefixes here since mc does it as well <nl> + name = addPrefix ( name ) ; <nl> + <nl> return registerBlock ( ( Block ) obj , name , idHint ) ; <nl> } <nl> else if ( obj instanceof Item ) <nl> { <nl> + / / tolerate extra name prefixes here since mc does it as well <nl> + name = addPrefix ( name ) ; <nl> + <nl> return registerItem ( ( Item ) obj , name , idHint ) ; <nl> } <nl> else <nl> @ @ - 963 , 7 + 967 , 7 @ @ public class GameData { <nl> } <nl> else <nl> { <nl> - throw new RuntimeException ( " WHAT ? " ) ; <nl> + return ImmutableBiMap . of ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1058 , 6 + 1062 , 12 @ @ public class GameData { <nl> String regName = e . getKey ( ) ; <nl> FMLControlledNamespacedRegistry < ? > registry = e . getValue ( ) ; <nl> FMLControlledNamespacedRegistry < ? > newRegistry = genericRegistries . get ( regName ) ; <nl> + if ( newRegistry = = null ) <nl> + { <nl> + newRegistry = registry . makeShallowCopy ( ) ; <nl> + genericRegistries . put ( regName , newRegistry ) ; <nl> + } <nl> + <nl> GameDataSnapshot . Entry regSnap = snapshot . entries . get ( " fmlgr : " + regName ) ; <nl> if ( regSnap = = null ) { <nl> FMLLog . info ( " Weird , there was no registry data for registry % s found in the snapshot " , regName ) ; <nl> @ @ - 1081 , 7 + 1091 , 8 @ @ public class GameData { <nl> FMLLog . fine ( " Fixed registry % s id mismatch % s : % d ( init ) - > % d ( map ) . " , regName , entryName , currId , entryId ) ; <nl> } <nl> <nl> - newRegistry . register ( entryId , entryName , registry . getRaw ( entryName ) ) ; <nl> + <nl> + newRegistry . add ( entryId , entryName , registry . getRaw ( entryName ) ) ; <nl> <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index 0789301 . . 0cdd305 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 138 , 11 + 138 , 13 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 { 
 throw new IllegalStateException ( String . format ( " Registry entry for name % s doesn ' t yield the expected id % d . " , name , id ) ) ; 
 } 
 + / * 
 / / entry is blocked , thus should be empty 
 if ( blockedIds . contains ( id ) ) 
 { 
 throw new IllegalStateException ( String . format ( " Registry entry for % s % s , id % d , name % s , marked as dangling . " , registryName , obj , id , name ) ) ; 
 } 
 + * / 
 } 
 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 2940832 . . 723bb55 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 19 , 7 + 19 , 11 @ @ import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 import com . google . common . collect . Sets . SetView ; 
 
 + import org . apache . logging . log4j . Level ; 
 + 
 import net . minecraft . block . Block ; 
 + import net . minecraft . block . BlockAir ; 
 + import net . minecraft . init . Blocks ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . potion . Potion ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 167 , 6 + 171 , 18 @ @ public class PersistentRegistryManager 
 return missedMappings ; 
 } 
 
 + / / If we ' re loading from disk , we can actually substitute air in the block map for anything that is otherwise " missing " . This keeps the reference in the map , in case 
 + / / the block comes back later 
 + if ( injectFrozenData ) 
 + { 
 + for ( Map . Entry < ResourceLocation , Integer > missingBlock : missing . get ( BLOCKS ) . entrySet ( ) ) 
 + { 
 + ResourceLocation rl = missingBlock . getKey ( ) ; 
 + Integer id = missingBlock . getValue ( ) ; 
 + FMLLog . log ( Level . DEBUG , " Replacing id % s named as % s with air block . If the mod becomes available again later , it can reload here " , id , rl ) ; 
 + PersistentRegistry . STAGING . getRegistry ( BLOCKS , Block . class ) . add ( id , rl , new BlockDummyAir ( ) ) ; 
 + } 
 + } 
 / / If we ' re loading up the world from disk , we want to add in the new data that might have been provisioned by mods 
 if ( injectFrozenData ) 
 { 
 @ @ - 201 , 7 + 217 , 11 @ @ public class PersistentRegistryManager 
 / / Return an empty list , because we ' re good 
 return ImmutableList . of ( ) ; 
 } 
 - 
 + private static class BlockDummyAir extends BlockAir { 
 + private BlockDummyAir ( ) { 
 + setUnlocalizedName ( " air " ) ; 
 + } 
 + } 
 private static void forAllRegistries ( PersistentRegistry registrySet , Function < Map . Entry < ResourceLocation , FMLControlledNamespacedRegistry < ? > > , Void > operation ) 
 { 
 for ( Map . Entry < ResourceLocation , FMLControlledNamespacedRegistry < ? > > r : registrySet . registries . entrySet ( ) )

NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java 
 index 0236046 . . bf2fd34 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java 
 @ @ - 32 , 10 + 32 , 12 @ @ import net . minecraftforge . fml . client . FMLFileResourcePack ; 
 import net . minecraftforge . fml . client . FMLFolderResourcePack ; 
 import net . minecraftforge . fml . common . asm . FMLSanityChecker ; 
 import net . minecraftforge . fml . common . event . FMLConstructionEvent ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . network . NetworkCheckHandler ; 
 import net . minecraftforge . fml . common . network . NetworkRegistry ; 
 import net . minecraftforge . fml . common . network . internal . FMLNetworkHandler ; 
 import net . minecraftforge . fml . common . registry . GameData ; 
 + import net . minecraftforge . fml . common . registry . VillagerRegistry ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 import org . apache . logging . log4j . Level ; 
 @ @ - 84 , 6 + 86 , 13 @ @ public class FMLContainer extends DummyModContainer implements WorldAccessContai 
 FMLNetworkHandler . registerChannel ( this , evt . getSide ( ) ) ; 
 } 
 
 + @ Subscribe 
 + public void modPreinitialization ( FMLPreInitializationEvent evt ) 
 + { 
 + / / Initialize the villager registry 
 + VillagerRegistry . instance ( ) ; 
 + } 
 + 
 @ NetworkCheckHandler 
 public boolean checkModLists ( Map < String , String > modList , Side side ) 
 { 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index f1f0ee3 . . 7fd1bca 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 52 , 6 + 52 , 7 @ @ import com . google . common . base . Joiner . MapJoiner ; 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBasedTable ; 
 import com . google . common . collect . HashBiMap ; 
 + import com . google . common . collect . ImmutableBiMap ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableListMultimap ; 
 import com . google . common . collect . ImmutableMap ; 
 @ @ - 709 , 15 + 710 , 18 @ @ public class GameData { 
 
 int register ( Object obj , String name , int idHint ) / / from FMLControlledNamespacedRegistry . addObject 
 { 
 - / / tolerate extra name prefixes here since mc does it as well 
 - name = addPrefix ( name ) ; 
 - 
 if ( obj instanceof Block ) 
 { 
 + / / tolerate extra name prefixes here since mc does it as well 
 + name = addPrefix ( name ) ; 
 + 
 return registerBlock ( ( Block ) obj , name , idHint ) ; 
 } 
 else if ( obj instanceof Item ) 
 { 
 + / / tolerate extra name prefixes here since mc does it as well 
 + name = addPrefix ( name ) ; 
 + 
 return registerItem ( ( Item ) obj , name , idHint ) ; 
 } 
 else 
 @ @ - 963 , 7 + 967 , 7 @ @ public class GameData { 
 } 
 else 
 { 
 - throw new RuntimeException ( " WHAT ? " ) ; 
 + return ImmutableBiMap . of ( ) ; 
 } 
 } 
 
 @ @ - 1058 , 6 + 1062 , 12 @ @ public class GameData { 
 String regName = e . getKey ( ) ; 
 FMLControlledNamespacedRegistry < ? > registry = e . getValue ( ) ; 
 FMLControlledNamespacedRegistry < ? > newRegistry = genericRegistries . get ( regName ) ; 
 + if ( newRegistry = = null ) 
 + { 
 + newRegistry = registry . makeShallowCopy ( ) ; 
 + genericRegistries . put ( regName , newRegistry ) ; 
 + } 
 + 
 GameDataSnapshot . Entry regSnap = snapshot . entries . get ( " fmlgr : " + regName ) ; 
 if ( regSnap = = null ) { 
 FMLLog . info ( " Weird , there was no registry data for registry % s found in the snapshot " , regName ) ; 
 @ @ - 1081 , 7 + 1091 , 8 @ @ public class GameData { 
 FMLLog . fine ( " Fixed registry % s id mismatch % s : % d ( init ) - > % d ( map ) . " , regName , entryName , currId , entryId ) ; 
 } 
 
 - newRegistry . register ( entryId , entryName , registry . getRaw ( entryName ) ) ; 
 + 
 + newRegistry . add ( entryId , entryName , registry . getRaw ( entryName ) ) ; 
 
 } 
 }
