BLEU SCORE: 0.010697691669654345

TEST MSG: Add AnimalTameEvent for handling animal taming
GENERATED MSG: New event to allow mutating a baby entity based on it ' s parents

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java . patch b / patches / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 0392b13 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java . patch <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java <nl> + + + + . . / src - work / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java <nl> + @ @ - 70 , 7 + 70 , 7 @ @ <nl> + int i = this . field _ 111180 _ a . func _ 110252 _ cg ( ) ; <nl> + int j = this . field _ 111180 _ a . func _ 190676 _ dC ( ) ; <nl> + <nl> + - if ( j > 0 & & this . field _ 111180 _ a . func _ 70681 _ au ( ) . nextInt ( j ) < i ) <nl> + + if ( j > 0 & & this . field _ 111180 _ a . func _ 70681 _ au ( ) . nextInt ( j ) < i & & ! net . minecraftforge . event . ForgeEventFactory . onAnimalTame ( field _ 111180 _ a , ( EntityPlayer ) entity ) ) <nl> + { <nl> + this . field _ 111180 _ a . func _ 110263 _ g ( ( EntityPlayer ) entity ) ; <nl> + return ; <nl> diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityOcelot . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityOcelot . java . patch <nl> index a9b6b12 . . 5265639 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / passive / EntityOcelot . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / passive / EntityOcelot . java . patch <nl> @ @ - 1 , 5 + 1 , 14 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / entity / passive / EntityOcelot . java <nl> + + + . . / src - work / minecraft / net / minecraft / entity / passive / EntityOcelot . java <nl> + @ @ - 208 , 7 + 208 , 7 @ @ <nl> + <nl> + if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) <nl> + { <nl> + - if ( this . field _ 70146 _ Z . nextInt ( 3 ) = = 0 ) <nl> + + if ( this . field _ 70146 _ Z . nextInt ( 3 ) = = 0 & & ! net . minecraftforge . event . ForgeEventFactory . onAnimalTame ( this , p _ 184645 _ 1 _ ) ) <nl> + { <nl> + this . func _ 70903 _ f ( true ) ; <nl> + this . func _ 70912 _ b ( 1 + this . field _ 70170 _ p . field _ 73012 _ v . nextInt ( 3 ) ) ; <nl> @ @ - 299 , 7 + 299 , 7 @ @ <nl> IBlockState iblockstate = this . field _ 70170 _ p . func _ 180495 _ p ( blockpos . func _ 177977 _ b ( ) ) ; <nl> Block block = iblockstate . func _ 177230 _ c ( ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityWolf . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityWolf . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 5df834e <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / entity / passive / EntityWolf . java . patch <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / entity / passive / EntityWolf . java <nl> + + + + . . / src - work / minecraft / net / minecraft / entity / passive / EntityWolf . java <nl> + @ @ - 423 , 7 + 423 , 7 @ @ <nl> + <nl> + if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) <nl> + { <nl> + - if ( this . field _ 70146 _ Z . nextInt ( 3 ) = = 0 ) <nl> + + if ( this . field _ 70146 _ Z . nextInt ( 3 ) = = 0 & & ! net . minecraftforge . event . ForgeEventFactory . onAnimalTame ( this , p _ 184645 _ 1 _ ) ) <nl> + { <nl> + this . func _ 70903 _ f ( true ) ; <nl> + this . field _ 70699 _ by . func _ 75499 _ g ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> index a366839 . . 8d84a0c 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import net . minecraft . entity . EnumCreatureType ; <nl> import net . minecraft . entity . effect . EntityLightningBolt ; <nl> import net . minecraft . entity . item . EntityItem ; <nl> import net . minecraft . entity . monster . EntityZombie ; <nl> + import net . minecraft . entity . passive . EntityAnimal ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . entity . player . EntityPlayer . SleepResult ; <nl> import net . minecraft . init . Blocks ; <nl> @ @ - 80 , 6 + 81 , 7 @ @ import net . minecraftforge . event . entity . EntityMountEvent ; <nl> import net . minecraftforge . event . entity . EntityStruckByLightningEvent ; <nl> import net . minecraftforge . event . entity . PlaySoundAtEntityEvent ; <nl> import net . minecraftforge . event . entity . item . ItemExpireEvent ; <nl> + import net . minecraftforge . event . entity . living . AnimalTameEvent ; <nl> import net . minecraftforge . event . entity . living . LivingDestroyBlockEvent ; <nl> import net . minecraftforge . event . entity . living . LivingEntityUseItemEvent ; <nl> import net . minecraftforge . event . entity . living . LivingExperienceDropEvent ; <nl> @ @ - 460 , 6 + 462 , 11 @ @ public class ForgeEventFactory <nl> return true ; <nl> } <nl> <nl> + public static boolean onAnimalTame ( EntityAnimal animal , EntityPlayer tamer ) <nl> + { <nl> + return MinecraftForge . EVENT _ BUS . post ( new AnimalTameEvent ( animal , tamer ) ) ; <nl> + } <nl> + <nl> public static SleepResult onPlayerSleepInBed ( EntityPlayer player , BlockPos pos ) <nl> { <nl> PlayerSleepInBedEvent event = new PlayerSleepInBedEvent ( player , pos ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / event / entity / living / AnimalTameEvent . java b / src / main / java / net / minecraftforge / event / entity / living / AnimalTameEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 9400284 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / entity / living / AnimalTameEvent . java <nl> @ @ - 0 , 0 + 1 , 57 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . event . entity . living ; <nl> + <nl> + import net . minecraft . entity . passive . EntityAnimal ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . ForgeEventFactory ; <nl> + import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> + <nl> + / * * <nl> + * This event is fired when an { @ link EntityAnimal } is tamed . < br > <nl> + * It is fired via { @ link ForgeEventFactory # onAnimalTame ( EntityAnimal , EntityPlayer ) } . <nl> + * Forge fires this event for applicable vanilla animals , mods need to fire it themselves . <nl> + * This event is { @ link Cancelable } . If canceled , taming the animal will fail . <nl> + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . <nl> + * / <nl> + @ Cancelable <nl> + public class AnimalTameEvent extends LivingEvent <nl> + { <nl> + private final EntityAnimal animal ; <nl> + private final EntityPlayer tamer ; <nl> + <nl> + public AnimalTameEvent ( EntityAnimal animal , EntityPlayer tamer ) <nl> + { <nl> + super ( animal ) ; <nl> + this . animal = animal ; <nl> + this . tamer = tamer ; <nl> + } <nl> + <nl> + public EntityAnimal getAnimal ( ) <nl> + { <nl> + return animal ; <nl> + } <nl> + <nl> + public EntityPlayer getTamer ( ) <nl> + { <nl> + return tamer ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / test / AnimalTameEventTest . java b / src / test / java / net / minecraftforge / test / AnimalTameEventTest . java <nl> new file mode 100644 <nl> index 0000000 . . b11ed5c <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / AnimalTameEventTest . java <nl> @ @ - 0 , 0 + 1 , 25 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import net . minecraft . entity . passive . EntityWolf ; <nl> + import net . minecraftforge . event . entity . living . AnimalTameEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + @ Mod ( modid = AnimalTameEventTest . MOD _ ID , name = " AnimalTameEvent test mod " , version = " 1 . 0 " ) <nl> + @ Mod . EventBusSubscriber <nl> + public class AnimalTameEventTest <nl> + { <nl> + static final String MOD _ ID = " animal _ tame _ event _ test " ; <nl> + static final boolean ENABLED = false ; <nl> + <nl> + @ SubscribeEvent <nl> + public static void onAnimalTame ( AnimalTameEvent event ) <nl> + { <nl> + if ( ! ENABLED ) return ; <nl> + <nl> + if ( event . getAnimal ( ) instanceof EntityWolf ) <nl> + { <nl> + event . setCanceled ( true ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / ai / EntityAIMate . java . patch b / patches / minecraft / net / minecraft / entity / ai / EntityAIMate . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 9e57b34 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / entity / ai / EntityAIMate . java . patch <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / entity / ai / EntityAIMate . java <nl> + + + + . . / src - work / minecraft / net / minecraft / entity / ai / EntityAIMate . java <nl> + @ @ - 86 , 6 + 86 , 18 @ @ <nl> + { <nl> + EntityAgeable entityageable = this . field _ 75390 _ d . func _ 90011 _ a ( this . field _ 75391 _ e ) ; <nl> + <nl> + + final net . minecraftforge . event . entity . living . BabyEntitySpawnEvent event = new net . minecraftforge . event . entity . living . BabyEntitySpawnEvent ( field _ 75390 _ d , field _ 75391 _ e , entityageable ) ; <nl> + + final boolean cancelled = net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + + entityageable = event . getChild ( ) ; <nl> + + if ( cancelled ) { <nl> + + / / Reset the " inLove " state for the animals <nl> + + this . field _ 75390 _ d . func _ 70873 _ a ( 6000 ) ; <nl> + + this . field _ 75391 _ e . func _ 70873 _ a ( 6000 ) ; <nl> + + this . field _ 75390 _ d . func _ 70875 _ t ( ) ; <nl> + + this . field _ 75391 _ e . func _ 70875 _ t ( ) ; <nl> + + return ; <nl> + + } <nl> + + <nl> + if ( entityageable ! = null ) <nl> + { <nl> + EntityPlayer entityplayer = this . field _ 75390 _ d . func _ 146083 _ cb ( ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java . patch b / patches / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 9b81a62 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java . patch <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java <nl> + + + + . . / src - work / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java <nl> + @ @ - 113 , 11 + 113 , 15 @ @ <nl> + <nl> + private void func _ 75447 _ i ( ) <nl> + { <nl> + - EntityVillager entityvillager = this . field _ 75450 _ b . func _ 90011 _ a ( this . field _ 75451 _ c ) ; <nl> + + net . minecraft . entity . EntityAgeable entityvillager = this . field _ 75450 _ b . func _ 90011 _ a ( this . field _ 75451 _ c ) ; <nl> + this . field _ 75451 _ c . func _ 70873 _ a ( 6000 ) ; <nl> + this . field _ 75450 _ b . func _ 70873 _ a ( 6000 ) ; <nl> + this . field _ 75451 _ c . func _ 175549 _ o ( false ) ; <nl> + this . field _ 75450 _ b . func _ 175549 _ o ( false ) ; <nl> + + <nl> + + final net . minecraftforge . event . entity . living . BabyEntitySpawnEvent event = new net . minecraftforge . event . entity . living . BabyEntitySpawnEvent ( field _ 75450 _ b , field _ 75451 _ c , entityvillager ) ; <nl> + + if ( net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( event ) | | event . getChild ( ) = = null ) { return ; } <nl> + + entityvillager = event . getChild ( ) ; <nl> + entityvillager . func _ 70873 _ a ( - 24000 ) ; <nl> + entityvillager . func _ 70012 _ b ( this . field _ 75450 _ b . field _ 70165 _ t , this . field _ 75450 _ b . field _ 70163 _ u , this . field _ 75450 _ b . field _ 70161 _ v , 0 . 0F , 0 . 0F ) ; <nl> + this . field _ 75448 _ d . func _ 72838 _ d ( entityvillager ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / event / entity / living / BabyEntitySpawnEvent . java b / src / main / java / net / minecraftforge / event / entity / living / BabyEntitySpawnEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 061fa78 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / entity / living / BabyEntitySpawnEvent . java <nl> @ @ - 0 , 0 + 1 , 105 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . event . entity . living ; <nl> + <nl> + import net . minecraft . entity . EntityAgeable ; <nl> + import net . minecraft . entity . EntityLiving ; <nl> + import net . minecraft . entity . ai . EntityAIMate ; <nl> + import net . minecraft . entity . ai . EntityAIVillagerMate ; <nl> + import net . minecraft . entity . passive . EntityAnimal ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + import javax . annotation . Nullable ; <nl> + <nl> + / * * <nl> + * BabyEntitySpawnEvent is fired just before a baby entity is about to be spawned . < br > <nl> + * Parents will have disengaged their relationship . { @ link @ Cancelable } < br > <nl> + * It is possible to change the child completely by using { @ link # setChild ( EntityAgeable ) } < br > <nl> + * This event is fired from { @ link EntityAIMate # spawnBaby ( ) } and { @ link EntityAIVillagerMate # giveBirth ( ) } < br > <nl> + * < br > <nl> + * { @ link # parentA } contains the initiating parent entity . < br > <nl> + * { @ link # parentB } contains the secondary parent entity . < br > <nl> + * { @ link # causedByPlayer } contains the player responsible for the breading ( if applicable ) . < br > <nl> + * { @ link # child } contains the child that will be spawned . < br > <nl> + * < br > <nl> + * This event is { @ link Cancelable } . < br > <nl> + * If this event is canceled , the child Entity is not added to the world , and the parents < br > <nl> + * will no longer attempt to mate . <nl> + * < br > <nl> + * This event does not have a result . { @ link HasResult } < br > <nl> + * < br > <nl> + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . <nl> + * * / <nl> + @ Cancelable <nl> + public class BabyEntitySpawnEvent extends Event <nl> + { <nl> + private final EntityLiving parentA ; <nl> + private final EntityLiving parentB ; <nl> + private final EntityPlayer causedByPlayer ; <nl> + private EntityAgeable child ; <nl> + <nl> + public BabyEntitySpawnEvent ( EntityLiving parentA , EntityLiving parentB , @ Nullable EntityAgeable proposedChild ) <nl> + { <nl> + / / causedByPlayer calculated here to simplify the patch . <nl> + EntityPlayer causedByPlayer = null ; <nl> + if ( parentA instanceof EntityAnimal ) { <nl> + causedByPlayer = ( ( EntityAnimal ) parentA ) . getPlayerInLove ( ) ; <nl> + } <nl> + <nl> + if ( causedByPlayer = = null & & parentB instanceof EntityAnimal ) <nl> + { <nl> + causedByPlayer = ( ( EntityAnimal ) parentB ) . getPlayerInLove ( ) ; <nl> + } <nl> + <nl> + this . parentA = parentA ; <nl> + this . parentB = parentB ; <nl> + this . causedByPlayer = causedByPlayer ; <nl> + this . child = proposedChild ; <nl> + } <nl> + <nl> + public EntityLiving getParentA ( ) <nl> + { <nl> + return parentA ; <nl> + } <nl> + <nl> + public EntityLiving getParentB ( ) <nl> + { <nl> + return parentB ; <nl> + } <nl> + <nl> + @ Nullable <nl> + public EntityPlayer getCausedByPlayer ( ) <nl> + { <nl> + return causedByPlayer ; <nl> + } <nl> + <nl> + @ Nullable <nl> + public EntityAgeable getChild ( ) <nl> + { <nl> + return child ; <nl> + } <nl> + <nl> + public void setChild ( EntityAgeable proposedChild ) <nl> + { <nl> + child = proposedChild ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / java / net / minecraftforge / debug / BreedingTest . java b / src / test / java / net / minecraftforge / debug / BreedingTest . java <nl> new file mode 100644 <nl> index 0000000 . . ac63cdb <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / BreedingTest . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . entity . passive . EntityCow ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . entity . living . BabyEntitySpawnEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + @ Mod ( modid = BreedingTest . MODID , name = " BreedingTest " , version = " 1 . 0 " ) <nl> + public class BreedingTest <nl> + { <nl> + public static final String MODID = " breedingtest " ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void onBabyBorn ( BabyEntitySpawnEvent event ) { <nl> + event . setChild ( new EntityCow ( event . getChild ( ) . worldObj ) ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java . patch b / patches / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java . patch 
 new file mode 100644 
 index 0000000 . . 0392b13 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java . patch 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java 
 + + + + . . / src - work / minecraft / net / minecraft / entity / ai / EntityAIRunAroundLikeCrazy . java 
 + @ @ - 70 , 7 + 70 , 7 @ @ 
 + int i = this . field _ 111180 _ a . func _ 110252 _ cg ( ) ; 
 + int j = this . field _ 111180 _ a . func _ 190676 _ dC ( ) ; 
 + 
 + - if ( j > 0 & & this . field _ 111180 _ a . func _ 70681 _ au ( ) . nextInt ( j ) < i ) 
 + + if ( j > 0 & & this . field _ 111180 _ a . func _ 70681 _ au ( ) . nextInt ( j ) < i & & ! net . minecraftforge . event . ForgeEventFactory . onAnimalTame ( field _ 111180 _ a , ( EntityPlayer ) entity ) ) 
 + { 
 + this . field _ 111180 _ a . func _ 110263 _ g ( ( EntityPlayer ) entity ) ; 
 + return ; 
 diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityOcelot . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityOcelot . java . patch 
 index a9b6b12 . . 5265639 100644 
 - - - a / patches / minecraft / net / minecraft / entity / passive / EntityOcelot . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / passive / EntityOcelot . java . patch 
 @ @ - 1 , 5 + 1 , 14 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / entity / passive / EntityOcelot . java 
 + + + . . / src - work / minecraft / net / minecraft / entity / passive / EntityOcelot . java 
 + @ @ - 208 , 7 + 208 , 7 @ @ 
 + 
 + if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) 
 + { 
 + - if ( this . field _ 70146 _ Z . nextInt ( 3 ) = = 0 ) 
 + + if ( this . field _ 70146 _ Z . nextInt ( 3 ) = = 0 & & ! net . minecraftforge . event . ForgeEventFactory . onAnimalTame ( this , p _ 184645 _ 1 _ ) ) 
 + { 
 + this . func _ 70903 _ f ( true ) ; 
 + this . func _ 70912 _ b ( 1 + this . field _ 70170 _ p . field _ 73012 _ v . nextInt ( 3 ) ) ; 
 @ @ - 299 , 7 + 299 , 7 @ @ 
 IBlockState iblockstate = this . field _ 70170 _ p . func _ 180495 _ p ( blockpos . func _ 177977 _ b ( ) ) ; 
 Block block = iblockstate . func _ 177230 _ c ( ) ; 
 diff - - git a / patches / minecraft / net / minecraft / entity / passive / EntityWolf . java . patch b / patches / minecraft / net / minecraft / entity / passive / EntityWolf . java . patch 
 new file mode 100644 
 index 0000000 . . 5df834e 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / entity / passive / EntityWolf . java . patch 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / entity / passive / EntityWolf . java 
 + + + + . . / src - work / minecraft / net / minecraft / entity / passive / EntityWolf . java 
 + @ @ - 423 , 7 + 423 , 7 @ @ 
 + 
 + if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) 
 + { 
 + - if ( this . field _ 70146 _ Z . nextInt ( 3 ) = = 0 ) 
 + + if ( this . field _ 70146 _ Z . nextInt ( 3 ) = = 0 & & ! net . minecraftforge . event . ForgeEventFactory . onAnimalTame ( this , p _ 184645 _ 1 _ ) ) 
 + { 
 + this . func _ 70903 _ f ( true ) ; 
 + this . field _ 70699 _ by . func _ 75499 _ g ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 index a366839 . . 8d84a0c 100644 
 - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import net . minecraft . entity . EnumCreatureType ; 
 import net . minecraft . entity . effect . EntityLightningBolt ; 
 import net . minecraft . entity . item . EntityItem ; 
 import net . minecraft . entity . monster . EntityZombie ; 
 + import net . minecraft . entity . passive . EntityAnimal ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . entity . player . EntityPlayer . SleepResult ; 
 import net . minecraft . init . Blocks ; 
 @ @ - 80 , 6 + 81 , 7 @ @ import net . minecraftforge . event . entity . EntityMountEvent ; 
 import net . minecraftforge . event . entity . EntityStruckByLightningEvent ; 
 import net . minecraftforge . event . entity . PlaySoundAtEntityEvent ; 
 import net . minecraftforge . event . entity . item . ItemExpireEvent ; 
 + import net . minecraftforge . event . entity . living . AnimalTameEvent ; 
 import net . minecraftforge . event . entity . living . LivingDestroyBlockEvent ; 
 import net . minecraftforge . event . entity . living . LivingEntityUseItemEvent ; 
 import net . minecraftforge . event . entity . living . LivingExperienceDropEvent ; 
 @ @ - 460 , 6 + 462 , 11 @ @ public class ForgeEventFactory 
 return true ; 
 } 
 
 + public static boolean onAnimalTame ( EntityAnimal animal , EntityPlayer tamer ) 
 + { 
 + return MinecraftForge . EVENT _ BUS . post ( new AnimalTameEvent ( animal , tamer ) ) ; 
 + } 
 + 
 public static SleepResult onPlayerSleepInBed ( EntityPlayer player , BlockPos pos ) 
 { 
 PlayerSleepInBedEvent event = new PlayerSleepInBedEvent ( player , pos ) ; 
 diff - - git a / src / main / java / net / minecraftforge / event / entity / living / AnimalTameEvent . java b / src / main / java / net / minecraftforge / event / entity / living / AnimalTameEvent . java 
 new file mode 100644 
 index 0000000 . . 9400284 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / entity / living / AnimalTameEvent . java 
 @ @ - 0 , 0 + 1 , 57 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . event . entity . living ; 
 + 
 + import net . minecraft . entity . passive . EntityAnimal ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . ForgeEventFactory ; 
 + import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 + 
 + / * * 
 + * This event is fired when an { @ link EntityAnimal } is tamed . < br > 
 + * It is fired via { @ link ForgeEventFactory # onAnimalTame ( EntityAnimal , EntityPlayer ) } . 
 + * Forge fires this event for applicable vanilla animals , mods need to fire it themselves . 
 + * This event is { @ link Cancelable } . If canceled , taming the animal will fail . 
 + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . 
 + * / 
 + @ Cancelable 
 + public class AnimalTameEvent extends LivingEvent 
 + { 
 + private final EntityAnimal animal ; 
 + private final EntityPlayer tamer ; 
 + 
 + public AnimalTameEvent ( EntityAnimal animal , EntityPlayer tamer ) 
 + { 
 + super ( animal ) ; 
 + this . animal = animal ; 
 + this . tamer = tamer ; 
 + } 
 + 
 + public EntityAnimal getAnimal ( ) 
 + { 
 + return animal ; 
 + } 
 + 
 + public EntityPlayer getTamer ( ) 
 + { 
 + return tamer ; 
 + } 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / test / AnimalTameEventTest . java b / src / test / java / net / minecraftforge / test / AnimalTameEventTest . java 
 new file mode 100644 
 index 0000000 . . b11ed5c 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / AnimalTameEventTest . java 
 @ @ - 0 , 0 + 1 , 25 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import net . minecraft . entity . passive . EntityWolf ; 
 + import net . minecraftforge . event . entity . living . AnimalTameEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + @ Mod ( modid = AnimalTameEventTest . MOD _ ID , name = " AnimalTameEvent test mod " , version = " 1 . 0 " ) 
 + @ Mod . EventBusSubscriber 
 + public class AnimalTameEventTest 
 + { 
 + static final String MOD _ ID = " animal _ tame _ event _ test " ; 
 + static final boolean ENABLED = false ; 
 + 
 + @ SubscribeEvent 
 + public static void onAnimalTame ( AnimalTameEvent event ) 
 + { 
 + if ( ! ENABLED ) return ; 
 + 
 + if ( event . getAnimal ( ) instanceof EntityWolf ) 
 + { 
 + event . setCanceled ( true ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / ai / EntityAIMate . java . patch b / patches / minecraft / net / minecraft / entity / ai / EntityAIMate . java . patch 
 new file mode 100644 
 index 0000000 . . 9e57b34 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / entity / ai / EntityAIMate . java . patch 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / entity / ai / EntityAIMate . java 
 + + + + . . / src - work / minecraft / net / minecraft / entity / ai / EntityAIMate . java 
 + @ @ - 86 , 6 + 86 , 18 @ @ 
 + { 
 + EntityAgeable entityageable = this . field _ 75390 _ d . func _ 90011 _ a ( this . field _ 75391 _ e ) ; 
 + 
 + + final net . minecraftforge . event . entity . living . BabyEntitySpawnEvent event = new net . minecraftforge . event . entity . living . BabyEntitySpawnEvent ( field _ 75390 _ d , field _ 75391 _ e , entityageable ) ; 
 + + final boolean cancelled = net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + + entityageable = event . getChild ( ) ; 
 + + if ( cancelled ) { 
 + + / / Reset the " inLove " state for the animals 
 + + this . field _ 75390 _ d . func _ 70873 _ a ( 6000 ) ; 
 + + this . field _ 75391 _ e . func _ 70873 _ a ( 6000 ) ; 
 + + this . field _ 75390 _ d . func _ 70875 _ t ( ) ; 
 + + this . field _ 75391 _ e . func _ 70875 _ t ( ) ; 
 + + return ; 
 + + } 
 + + 
 + if ( entityageable ! = null ) 
 + { 
 + EntityPlayer entityplayer = this . field _ 75390 _ d . func _ 146083 _ cb ( ) ; 
 diff - - git a / patches / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java . patch b / patches / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java . patch 
 new file mode 100644 
 index 0000000 . . 9b81a62 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java . patch 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java 
 + + + + . . / src - work / minecraft / net / minecraft / entity / ai / EntityAIVillagerMate . java 
 + @ @ - 113 , 11 + 113 , 15 @ @ 
 + 
 + private void func _ 75447 _ i ( ) 
 + { 
 + - EntityVillager entityvillager = this . field _ 75450 _ b . func _ 90011 _ a ( this . field _ 75451 _ c ) ; 
 + + net . minecraft . entity . EntityAgeable entityvillager = this . field _ 75450 _ b . func _ 90011 _ a ( this . field _ 75451 _ c ) ; 
 + this . field _ 75451 _ c . func _ 70873 _ a ( 6000 ) ; 
 + this . field _ 75450 _ b . func _ 70873 _ a ( 6000 ) ; 
 + this . field _ 75451 _ c . func _ 175549 _ o ( false ) ; 
 + this . field _ 75450 _ b . func _ 175549 _ o ( false ) ; 
 + + 
 + + final net . minecraftforge . event . entity . living . BabyEntitySpawnEvent event = new net . minecraftforge . event . entity . living . BabyEntitySpawnEvent ( field _ 75450 _ b , field _ 75451 _ c , entityvillager ) ; 
 + + if ( net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( event ) | | event . getChild ( ) = = null ) { return ; } 
 + + entityvillager = event . getChild ( ) ; 
 + entityvillager . func _ 70873 _ a ( - 24000 ) ; 
 + entityvillager . func _ 70012 _ b ( this . field _ 75450 _ b . field _ 70165 _ t , this . field _ 75450 _ b . field _ 70163 _ u , this . field _ 75450 _ b . field _ 70161 _ v , 0 . 0F , 0 . 0F ) ; 
 + this . field _ 75448 _ d . func _ 72838 _ d ( entityvillager ) ; 
 diff - - git a / src / main / java / net / minecraftforge / event / entity / living / BabyEntitySpawnEvent . java b / src / main / java / net / minecraftforge / event / entity / living / BabyEntitySpawnEvent . java 
 new file mode 100644 
 index 0000000 . . 061fa78 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / entity / living / BabyEntitySpawnEvent . java 
 @ @ - 0 , 0 + 1 , 105 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . event . entity . living ; 
 + 
 + import net . minecraft . entity . EntityAgeable ; 
 + import net . minecraft . entity . EntityLiving ; 
 + import net . minecraft . entity . ai . EntityAIMate ; 
 + import net . minecraft . entity . ai . EntityAIVillagerMate ; 
 + import net . minecraft . entity . passive . EntityAnimal ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + import javax . annotation . Nullable ; 
 + 
 + / * * 
 + * BabyEntitySpawnEvent is fired just before a baby entity is about to be spawned . < br > 
 + * Parents will have disengaged their relationship . { @ link @ Cancelable } < br > 
 + * It is possible to change the child completely by using { @ link # setChild ( EntityAgeable ) } < br > 
 + * This event is fired from { @ link EntityAIMate # spawnBaby ( ) } and { @ link EntityAIVillagerMate # giveBirth ( ) } < br > 
 + * < br > 
 + * { @ link # parentA } contains the initiating parent entity . < br > 
 + * { @ link # parentB } contains the secondary parent entity . < br > 
 + * { @ link # causedByPlayer } contains the player responsible for the breading ( if applicable ) . < br > 
 + * { @ link # child } contains the child that will be spawned . < br > 
 + * < br > 
 + * This event is { @ link Cancelable } . < br > 
 + * If this event is canceled , the child Entity is not added to the world , and the parents < br > 
 + * will no longer attempt to mate . 
 + * < br > 
 + * This event does not have a result . { @ link HasResult } < br > 
 + * < br > 
 + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . 
 + * * / 
 + @ Cancelable 
 + public class BabyEntitySpawnEvent extends Event 
 + { 
 + private final EntityLiving parentA ; 
 + private final EntityLiving parentB ; 
 + private final EntityPlayer causedByPlayer ; 
 + private EntityAgeable child ; 
 + 
 + public BabyEntitySpawnEvent ( EntityLiving parentA , EntityLiving parentB , @ Nullable EntityAgeable proposedChild ) 
 + { 
 + / / causedByPlayer calculated here to simplify the patch . 
 + EntityPlayer causedByPlayer = null ; 
 + if ( parentA instanceof EntityAnimal ) { 
 + causedByPlayer = ( ( EntityAnimal ) parentA ) . getPlayerInLove ( ) ; 
 + } 
 + 
 + if ( causedByPlayer = = null & & parentB instanceof EntityAnimal ) 
 + { 
 + causedByPlayer = ( ( EntityAnimal ) parentB ) . getPlayerInLove ( ) ; 
 + } 
 + 
 + this . parentA = parentA ; 
 + this . parentB = parentB ; 
 + this . causedByPlayer = causedByPlayer ; 
 + this . child = proposedChild ; 
 + } 
 + 
 + public EntityLiving getParentA ( ) 
 + { 
 + return parentA ; 
 + } 
 + 
 + public EntityLiving getParentB ( ) 
 + { 
 + return parentB ; 
 + } 
 + 
 + @ Nullable 
 + public EntityPlayer getCausedByPlayer ( ) 
 + { 
 + return causedByPlayer ; 
 + } 
 + 
 + @ Nullable 
 + public EntityAgeable getChild ( ) 
 + { 
 + return child ; 
 + } 
 + 
 + public void setChild ( EntityAgeable proposedChild ) 
 + { 
 + child = proposedChild ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / java / net / minecraftforge / debug / BreedingTest . java b / src / test / java / net / minecraftforge / debug / BreedingTest . java 
 new file mode 100644 
 index 0000000 . . ac63cdb 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / BreedingTest . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . entity . passive . EntityCow ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . entity . living . BabyEntitySpawnEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + @ Mod ( modid = BreedingTest . MODID , name = " BreedingTest " , version = " 1 . 0 " ) 
 + public class BreedingTest 
 + { 
 + public static final String MODID = " breedingtest " ; 
 + 
 + @ Mod . EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void onBabyBorn ( BabyEntitySpawnEvent event ) { 
 + event . setChild ( new EntityCow ( event . getChild ( ) . worldObj ) ) ; 
 + } 
 + }
