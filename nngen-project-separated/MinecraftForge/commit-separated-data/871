BLEU SCORE: 0.04065425428798724

TEST MSG: Made block model loading bar more robust , and fixed the count .
GENERATED MSG: Added progress bar for the ModelLoader .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index d996bff . . a9a8158 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import java . awt . Color ; <nl> import java . awt . Graphics2D ; <nl> import java . awt . image . BufferedImage ; <nl> import java . io . IOException ; <nl> + import java . util . ArrayDeque ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> @ @ - 86 , 7 + 87 , 6 @ @ public class ModelLoader extends ModelBakery <nl> <nl> private ProgressBar blockBar ; <nl> private ProgressBar itemBar ; <nl> - private boolean shouldProgressBar = false ; <nl> <nl> private boolean isLoading = false ; <nl> public boolean isLoading ( ) <nl> @ @ - 151 , 54 + 151 , 48 @ @ public class ModelLoader extends ModelBakery <nl> return bakedRegistry ; <nl> } <nl> <nl> + private ArrayDeque < ModelResourceLocation > loadingBlockModels = new ArrayDeque < ModelResourceLocation > ( ) ; <nl> + <nl> private void loadBlocks ( ) <nl> { <nl> Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; <nl> - blockBar = ProgressManager . push ( " ModelLoader : blocks " , stateMap . size ( ) ) ; <nl> Collection < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; <nl> variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we <nl> variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; <nl> - shouldProgressBar = true ; <nl> + blockBar = ProgressManager . push ( " ModelLoader : blocks " , variants . size ( ) ) ; <nl> + loadingBlockModels . addAll ( variants ) ; <nl> loadVariants ( variants ) ; <nl> - shouldProgressBar = false ; <nl> ProgressManager . pop ( blockBar ) ; <nl> } <nl> <nl> @ Override <nl> protected void registerVariant ( ModelBlockDefinition definition , ModelResourceLocation location ) <nl> { <nl> - if ( shouldProgressBar ) <nl> + if ( ! loadingBlockModels . isEmpty ( ) & & loadingBlockModels . peekFirst ( ) = = location ) <nl> { <nl> blockBar . step ( location . toString ( ) ) ; <nl> + loadingBlockModels . removeFirst ( ) ; <nl> } <nl> - boolean p = shouldProgressBar ; <nl> + Variants variants = null ; <nl> try <nl> { <nl> - Variants variants = null ; <nl> + variants = definition . getVariants ( location . getVariant ( ) ) ; <nl> + } <nl> + catch ( MissingVariantException e ) <nl> + { <nl> + missingVariants . add ( location ) ; <nl> + } <nl> + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) <nl> + { <nl> try <nl> { <nl> - variants = definition . getVariants ( location . getVariant ( ) ) ; <nl> - } <nl> - catch ( MissingVariantException e ) <nl> - { <nl> - missingVariants . add ( location ) ; <nl> + stateModels . put ( location , new WeightedRandomModel ( location , variants ) ) ; <nl> } <nl> - if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) <nl> + catch ( Throwable e ) <nl> { <nl> - try <nl> - { <nl> - stateModels . put ( location , new WeightedRandomModel ( location , variants ) ) ; <nl> - } <nl> - catch ( Throwable e ) <nl> - { <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> + throw new RuntimeException ( e ) ; <nl> } <nl> } <nl> - finally <nl> - { <nl> - shouldProgressBar = p ; <nl> - } <nl> } <nl> <nl> private void loadItems ( )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index ca65794 . . d996bff 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 57 , 6 + 57 , 8 @ @ import net . minecraftforge . fluids . FluidContainerRegistry ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fluids . FluidStack ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . ProgressManager ; <nl> + import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; <nl> import net . minecraftforge . fml . common . registry . GameData ; <nl> import net . minecraftforge . fml . common . registry . RegistryDelegate ; <nl> <nl> @ @ - 82 , 6 + 84 , 10 @ @ public class ModelLoader extends ModelBakery <nl> private IModel missingModel = null ; <nl> private IModel itemModel = new ItemLayerModel ( MODEL _ GENERATED ) ; <nl> <nl> + private ProgressBar blockBar ; <nl> + private ProgressBar itemBar ; <nl> + private boolean shouldProgressBar = false ; <nl> + <nl> private boolean isLoading = false ; <nl> public boolean isLoading ( ) <nl> { <nl> @ @ - 148 , 47 + 154 , 71 @ @ public class ModelLoader extends ModelBakery <nl> private void loadBlocks ( ) <nl> { <nl> Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; <nl> + blockBar = ProgressManager . push ( " ModelLoader : blocks " , stateMap . size ( ) ) ; <nl> Collection < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; <nl> variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we <nl> variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; <nl> + shouldProgressBar = true ; <nl> loadVariants ( variants ) ; <nl> + shouldProgressBar = false ; <nl> + ProgressManager . pop ( blockBar ) ; <nl> } <nl> <nl> @ Override <nl> protected void registerVariant ( ModelBlockDefinition definition , ModelResourceLocation location ) <nl> { <nl> - Variants variants = null ; <nl> - try <nl> + if ( shouldProgressBar ) <nl> { <nl> - variants = definition . getVariants ( location . getVariant ( ) ) ; <nl> + blockBar . step ( location . toString ( ) ) ; <nl> } <nl> - catch ( MissingVariantException e ) <nl> - { <nl> - missingVariants . add ( location ) ; <nl> - } <nl> - if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) <nl> + boolean p = shouldProgressBar ; <nl> + try <nl> { <nl> + Variants variants = null ; <nl> try <nl> { <nl> - stateModels . put ( location , new WeightedRandomModel ( location , variants ) ) ; <nl> + variants = definition . getVariants ( location . getVariant ( ) ) ; <nl> } <nl> - catch ( Throwable e ) <nl> + catch ( MissingVariantException e ) <nl> { <nl> - throw new RuntimeException ( e ) ; <nl> + missingVariants . add ( location ) ; <nl> + } <nl> + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) <nl> + { <nl> + try <nl> + { <nl> + stateModels . put ( location , new WeightedRandomModel ( location , variants ) ) ; <nl> + } <nl> + catch ( Throwable e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } <nl> } <nl> + finally <nl> + { <nl> + shouldProgressBar = p ; <nl> + } <nl> } <nl> <nl> private void loadItems ( ) <nl> { <nl> registerVariantNames ( ) ; <nl> - for ( Item item : GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) <nl> + int size = 0 ; <nl> + ImmutableList < Item > items = ImmutableList . copyOf ( GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) ; <nl> + for ( Item item : items ) <nl> + { <nl> + size + = getVariantNames ( item ) . size ( ) ; <nl> + } <nl> + itemBar = ProgressManager . push ( " ModelLoader : items " , size ) ; <nl> + for ( Item item : items ) <nl> { <nl> / / default loading <nl> for ( String s : ( List < String > ) getVariantNames ( item ) ) <nl> { <nl> ResourceLocation file = getItemLocation ( s ) ; <nl> ModelResourceLocation memory = getInventoryVariant ( s ) ; <nl> + itemBar . step ( memory . toString ( ) ) ; <nl> IModel model = null ; <nl> try <nl> { <nl> @ @ - 216 , 6 + 246 , 7 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> } <nl> + ProgressManager . pop ( itemBar ) ; <nl> <nl> / / replace vanilla bucket models if desired . done afterwards for performance reasons <nl> if ( ForgeModContainer . replaceVanillaBucketModel )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index d996bff . . a9a8158 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import java . awt . Color ; 
 import java . awt . Graphics2D ; 
 import java . awt . image . BufferedImage ; 
 import java . io . IOException ; 
 + import java . util . ArrayDeque ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 @ @ - 86 , 7 + 87 , 6 @ @ public class ModelLoader extends ModelBakery 
 
 private ProgressBar blockBar ; 
 private ProgressBar itemBar ; 
 - private boolean shouldProgressBar = false ; 
 
 private boolean isLoading = false ; 
 public boolean isLoading ( ) 
 @ @ - 151 , 54 + 151 , 48 @ @ public class ModelLoader extends ModelBakery 
 return bakedRegistry ; 
 } 
 
 + private ArrayDeque < ModelResourceLocation > loadingBlockModels = new ArrayDeque < ModelResourceLocation > ( ) ; 
 + 
 private void loadBlocks ( ) 
 { 
 Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; 
 - blockBar = ProgressManager . push ( " ModelLoader : blocks " , stateMap . size ( ) ) ; 
 Collection < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; 
 variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we 
 variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; 
 - shouldProgressBar = true ; 
 + blockBar = ProgressManager . push ( " ModelLoader : blocks " , variants . size ( ) ) ; 
 + loadingBlockModels . addAll ( variants ) ; 
 loadVariants ( variants ) ; 
 - shouldProgressBar = false ; 
 ProgressManager . pop ( blockBar ) ; 
 } 
 
 @ Override 
 protected void registerVariant ( ModelBlockDefinition definition , ModelResourceLocation location ) 
 { 
 - if ( shouldProgressBar ) 
 + if ( ! loadingBlockModels . isEmpty ( ) & & loadingBlockModels . peekFirst ( ) = = location ) 
 { 
 blockBar . step ( location . toString ( ) ) ; 
 + loadingBlockModels . removeFirst ( ) ; 
 } 
 - boolean p = shouldProgressBar ; 
 + Variants variants = null ; 
 try 
 { 
 - Variants variants = null ; 
 + variants = definition . getVariants ( location . getVariant ( ) ) ; 
 + } 
 + catch ( MissingVariantException e ) 
 + { 
 + missingVariants . add ( location ) ; 
 + } 
 + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) 
 + { 
 try 
 { 
 - variants = definition . getVariants ( location . getVariant ( ) ) ; 
 - } 
 - catch ( MissingVariantException e ) 
 - { 
 - missingVariants . add ( location ) ; 
 + stateModels . put ( location , new WeightedRandomModel ( location , variants ) ) ; 
 } 
 - if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) 
 + catch ( Throwable e ) 
 { 
 - try 
 - { 
 - stateModels . put ( location , new WeightedRandomModel ( location , variants ) ) ; 
 - } 
 - catch ( Throwable e ) 
 - { 
 - throw new RuntimeException ( e ) ; 
 - } 
 + throw new RuntimeException ( e ) ; 
 } 
 } 
 - finally 
 - { 
 - shouldProgressBar = p ; 
 - } 
 } 
 
 private void loadItems ( )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index ca65794 . . d996bff 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 57 , 6 + 57 , 8 @ @ import net . minecraftforge . fluids . FluidContainerRegistry ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fluids . FluidStack ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . ProgressManager ; 
 + import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; 
 import net . minecraftforge . fml . common . registry . GameData ; 
 import net . minecraftforge . fml . common . registry . RegistryDelegate ; 
 
 @ @ - 82 , 6 + 84 , 10 @ @ public class ModelLoader extends ModelBakery 
 private IModel missingModel = null ; 
 private IModel itemModel = new ItemLayerModel ( MODEL _ GENERATED ) ; 
 
 + private ProgressBar blockBar ; 
 + private ProgressBar itemBar ; 
 + private boolean shouldProgressBar = false ; 
 + 
 private boolean isLoading = false ; 
 public boolean isLoading ( ) 
 { 
 @ @ - 148 , 47 + 154 , 71 @ @ public class ModelLoader extends ModelBakery 
 private void loadBlocks ( ) 
 { 
 Map < IBlockState , ModelResourceLocation > stateMap = blockModelShapes . getBlockStateMapper ( ) . putAllStateModelLocations ( ) ; 
 + blockBar = ProgressManager . push ( " ModelLoader : blocks " , stateMap . size ( ) ) ; 
 Collection < ModelResourceLocation > variants = Lists . newArrayList ( stateMap . values ( ) ) ; 
 variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " normal " ) ) ; / / Vanilla special cases item _ frames so must we 
 variants . add ( new ModelResourceLocation ( " minecraft : item _ frame " , " map " ) ) ; 
 + shouldProgressBar = true ; 
 loadVariants ( variants ) ; 
 + shouldProgressBar = false ; 
 + ProgressManager . pop ( blockBar ) ; 
 } 
 
 @ Override 
 protected void registerVariant ( ModelBlockDefinition definition , ModelResourceLocation location ) 
 { 
 - Variants variants = null ; 
 - try 
 + if ( shouldProgressBar ) 
 { 
 - variants = definition . getVariants ( location . getVariant ( ) ) ; 
 + blockBar . step ( location . toString ( ) ) ; 
 } 
 - catch ( MissingVariantException e ) 
 - { 
 - missingVariants . add ( location ) ; 
 - } 
 - if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) 
 + boolean p = shouldProgressBar ; 
 + try 
 { 
 + Variants variants = null ; 
 try 
 { 
 - stateModels . put ( location , new WeightedRandomModel ( location , variants ) ) ; 
 + variants = definition . getVariants ( location . getVariant ( ) ) ; 
 } 
 - catch ( Throwable e ) 
 + catch ( MissingVariantException e ) 
 { 
 - throw new RuntimeException ( e ) ; 
 + missingVariants . add ( location ) ; 
 + } 
 + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) 
 + { 
 + try 
 + { 
 + stateModels . put ( location , new WeightedRandomModel ( location , variants ) ) ; 
 + } 
 + catch ( Throwable e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 } 
 } 
 + finally 
 + { 
 + shouldProgressBar = p ; 
 + } 
 } 
 
 private void loadItems ( ) 
 { 
 registerVariantNames ( ) ; 
 - for ( Item item : GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) 
 + int size = 0 ; 
 + ImmutableList < Item > items = ImmutableList . copyOf ( GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) ; 
 + for ( Item item : items ) 
 + { 
 + size + = getVariantNames ( item ) . size ( ) ; 
 + } 
 + itemBar = ProgressManager . push ( " ModelLoader : items " , size ) ; 
 + for ( Item item : items ) 
 { 
 / / default loading 
 for ( String s : ( List < String > ) getVariantNames ( item ) ) 
 { 
 ResourceLocation file = getItemLocation ( s ) ; 
 ModelResourceLocation memory = getInventoryVariant ( s ) ; 
 + itemBar . step ( memory . toString ( ) ) ; 
 IModel model = null ; 
 try 
 { 
 @ @ - 216 , 6 + 246 , 7 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 } 
 + ProgressManager . pop ( itemBar ) ; 
 
 / / replace vanilla bucket models if desired . done afterwards for performance reasons 
 if ( ForgeModContainer . replaceVanillaBucketModel )
