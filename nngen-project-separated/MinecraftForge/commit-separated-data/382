BLEU SCORE: 0.03089055318156698

TEST MSG: Fix up MC version compatibility checking to be a little less verbose .
GENERATED MSG: Slight tweak to early loading , to accommodate FMP

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 484be8b . . feccc96 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 31 , 15 + 31 , 17 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> <nl> - import org . apache . logging . log4j . Level ; <nl> + import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> + import net . minecraftforge . fml . common . versioning . VersionRange ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . gson . Gson ; <nl> <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . InjectedModContainer ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> @ @ - 60 , 6 + 62 , 7 @ @ public class ForgeVersion <nl> / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> public static final int buildVersion = 0 ; <nl> / / This is the minecraft version we ' re building for - used in various places in Forge / FML code <nl> + / / Update version compatibility list below if there is SRG compatibility between this version and some previous versions <nl> public static final String mcVersion = " 1 . 12 . 1 " ; <nl> / / This is the MCP data version we ' re using <nl> public static final String mcpVersion = " 9 . 41 " ; <nl> @ @ - 68 , 6 + 71 , 12 @ @ public class ForgeVersion <nl> @ SuppressWarnings ( " unused " ) <nl> private static String target = null ; <nl> <nl> + / * <nl> + * Version compatibility . Add new version strings for each version we ' re SRG compatible with . <nl> + * Reset the list to empty only when incompatible changes occur . <nl> + * / <nl> + private static String [ ] extraCompatibleVersions = { " 1 . 12 " } ; <nl> + <nl> private static final Logger log = LogManager . getLogger ( " ForgeVersionCheck " ) ; <nl> <nl> public static int getMajorVersion ( ) <nl> @ @ - 107 , 6 + 116 , 15 @ @ public class ForgeVersion <nl> return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> } <nl> <nl> + / / We add in the current version ( we ' re compatible with it ) and test additional versions for compatibility <nl> + private static List < DefaultArtifactVersion > COMPATIBLE _ VERSIONS = Stream . concat ( Stream . of ( mcVersion ) , Stream . of ( extraCompatibleVersions ) ) <nl> + . map ( s - > new DefaultArtifactVersion ( " dummy " , s ) ) . collect ( Collectors . toList ( ) ) ; <nl> + <nl> + / / Tests the mod supplied version range for compatibility with our version compatibility list <nl> + public static boolean testMinecraftVersionCompatibility ( VersionRange modVersion ) { <nl> + return COMPATIBLE _ VERSIONS . stream ( ) . anyMatch ( modVersion : : containsVersion ) ; <nl> + } <nl> + <nl> public static enum Status <nl> { <nl> PENDING ( ) , <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index c7b1577 . . e8a1d15 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 67 , 7 + 67 , 6 @ @ import java . util . function . Function ; <nl> import com . google . common . base . Strings ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> import com . google . common . collect . ImmutableList ; <nl> - import com . google . common . collect . ImmutableList . Builder ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . ListMultimap ; <nl> @ @ - 256 , 16 + 255 , 7 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> <nl> String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; <nl> - if ( " [ 1 . 8 . 8 ] " . equals ( mcVersionString ) ) mcVersionString = " [ 1 . 8 . 8 , 1 . 8 . 9 ] " ; / / MC 1 . 8 . 8 and 1 . 8 . 9 is forward SRG compatible so accept these versions by default . <nl> - if ( " [ 1 . 9 . 4 ] " . equals ( mcVersionString ) | | <nl> - " [ 1 . 9 , 1 . 9 . 4 ] " . equals ( mcVersionString ) | | <nl> - " [ 1 . 9 . 4 , 1 . 10 ) " . equals ( mcVersionString ) | | <nl> - " [ 1 . 10 ] " . equals ( mcVersionString ) ) <nl> - mcVersionString = " [ 1 . 9 . 4 , 1 . 10 . 2 ] " ; <nl> - if ( " [ 1 . 11 ] " . equals ( mcVersionString ) ) <nl> - mcVersionString = " [ 1 . 11 , 1 . 11 . 2 ] " ; <nl> - if ( " [ 1 . 12 ] " . equals ( mcVersionString ) ) <nl> - mcVersionString = " [ 1 . 12 , 1 . 12 . 1 ] " ; <nl> + <nl> if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) <nl> { <nl> minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 5646f8b . . e484d47 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . net . MalformedURLException ; <nl> import java . util . ArrayList ; <nl> - import java . util . Collections ; <nl> import java . util . Comparator ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> @ @ - 35 , 6 + 34 , 7 @ @ import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> import net . minecraftforge . common . config . ConfigManager ; <nl> import net . minecraftforge . common . crafting . CraftingHelper ; <nl> @ @ - 62 , 7 + 62 , 6 @ @ import org . apache . commons . io . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . CharMatcher ; <nl> - import java . util . function . Function ; <nl> import com . google . common . base . Joiner ; <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> @ @ - 238 , 9 + 237 , 9 @ @ public class Loader <nl> ArrayListMultimap < String , String > reqList = ArrayListMultimap . create ( ) ; <nl> for ( ModContainer mod : getActiveModList ( ) ) <nl> { <nl> - if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) <nl> + if ( ! ForgeVersion . testMinecraftVersionCompatibility ( mod . acceptableMinecraftVersionRange ( ) ) ) <nl> { <nl> - FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; <nl> + FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . It is compatible with { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) , mod . acceptableMinecraftVersionRange ( ) ) ; <nl> WrongMinecraftVersionException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; <nl> FMLLog . log . fatal ( ret . getMessage ( ) ) ; <nl> wrongMinecraftExceptions . add ( ret ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 1afaf1c . . a072127 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 204 , 10 + 204 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> return ; <nl> } <nl> <nl> - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> + List < String > injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> try <nl> { <nl> - Loader . instance ( ) . loadMods ( ) ; <nl> + Loader . instance ( ) . loadMods ( injectedModContainers ) ; <nl> } <nl> catch ( WrongMinecraftVersionException wrong ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index f135488 . . 7e181d8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 140 , 11 + 140 , 12 @ @ public class FMLCommonHandler <nl> return eventBus ; <nl> } <nl> <nl> - public void beginLoading ( IFMLSidedHandler handler ) <nl> + public List < String > beginLoading ( IFMLSidedHandler handler ) <nl> { <nl> sidedDelegate = handler ; <nl> MinecraftForge . initialize ( ) ; <nl> / / MinecraftForge . registerCrashCallable ( ) ; <nl> + return ImmutableList . < String > of ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 0e60836 . . e2771f3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 26 , 14 + 26 , 11 @ @ import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> - import net . minecraft . crash . CrashReport ; <nl> - import net . minecraft . crash . ICrashReportDetail ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> import net . minecraftforge . fml . common . ModContainer . Disableable ; <nl> import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; <nl> - import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; <nl> import net . minecraftforge . fml . common . discovery . ModDiscoverer ; <nl> import net . minecraftforge . fml . common . event . FMLInterModComms ; <nl> import net . minecraftforge . fml . common . event . FMLLoadEvent ; <nl> @ @ - 338 , 8 + 335 , 9 @ @ public class Loader <nl> * Finally , if they are successfully loaded as classes , they are then added <nl> * to the available mod list . <nl> * / <nl> - private ModDiscoverer identifyMods ( ) <nl> + private ModDiscoverer identifyMods ( List < String > additionalContainers ) <nl> { <nl> + injectedContainers . addAll ( additionalContainers ) ; <nl> FMLLog . fine ( " Building injected Mod Containers % s " , injectedContainers ) ; <nl> / / Add in the MCP mod container <nl> mods . add ( new InjectedModContainer ( mcp , new File ( " minecraft . jar " ) ) ) ; <nl> @ @ - 487 , 8 + 485 , 9 @ @ public class Loader <nl> * Called from the hook to start mod loading . We trigger the <nl> * { @ link # identifyMods ( ) } and Constructing , Preinitalization , and Initalization phases here . Finally , <nl> * the mod list is frozen completely and is consider immutable from then on . <nl> + * @ param injectedModContainers <nl> * / <nl> - public void loadMods ( ) <nl> + public void loadMods ( List < String > injectedModContainers ) <nl> { <nl> progressBar = ProgressManager . push ( " Loading " , 7 ) ; <nl> progressBar . step ( " Constructing Mods " ) ; <nl> @ @ - 497 , 7 + 496 , 7 @ @ public class Loader <nl> namedMods = Maps . newHashMap ( ) ; <nl> modController = new LoadController ( this ) ; <nl> modController . transition ( LoaderState . LOADING , false ) ; <nl> - discoverer = identifyMods ( ) ; <nl> + discoverer = identifyMods ( injectedModContainers ) ; <nl> ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; <nl> disableRequestedMods ( ) ; <nl> modController . distributeStateMessage ( FMLLoadEvent . class ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index 7d82c64 . . d292218 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 13 , 7 + 13 , 6 @ @ <nl> package net . minecraftforge . fml . server ; <nl> <nl> import java . io . * ; <nl> - import java . util . Enumeration ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> @ @ - 74 , 22 + 73 , 22 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> * A reference to the server itself <nl> * / <nl> private MinecraftServer server ; <nl> - <nl> + private List < String > injectedModContainers ; <nl> private FMLServerHandler ( ) <nl> { <nl> - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> + injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> } <nl> / * * <nl> * Called to start the whole game off from <nl> * { @ link MinecraftServer # startServer } <nl> * <nl> - * @ param minecraftServer <nl> + * @ param minecraftServer server <nl> * / <nl> @ Override <nl> public void beginServerLoading ( MinecraftServer minecraftServer ) <nl> { <nl> server = minecraftServer ; <nl> - Loader . instance ( ) . loadMods ( ) ; <nl> + Loader . instance ( ) . loadMods ( injectedModContainers ) ; <nl> Loader . instance ( ) . preinitializeMods ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 484be8b . . feccc96 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 31 , 15 + 31 , 17 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 
 - import org . apache . logging . log4j . Level ; 
 + import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 + import net . minecraftforge . fml . common . versioning . VersionRange ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 import com . google . common . io . ByteStreams ; 
 import com . google . gson . Gson ; 
 
 - import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . InjectedModContainer ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 @ @ - 60 , 6 + 62 , 7 @ @ public class ForgeVersion 
 / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 public static final int buildVersion = 0 ; 
 / / This is the minecraft version we ' re building for - used in various places in Forge / FML code 
 + / / Update version compatibility list below if there is SRG compatibility between this version and some previous versions 
 public static final String mcVersion = " 1 . 12 . 1 " ; 
 / / This is the MCP data version we ' re using 
 public static final String mcpVersion = " 9 . 41 " ; 
 @ @ - 68 , 6 + 71 , 12 @ @ public class ForgeVersion 
 @ SuppressWarnings ( " unused " ) 
 private static String target = null ; 
 
 + / * 
 + * Version compatibility . Add new version strings for each version we ' re SRG compatible with . 
 + * Reset the list to empty only when incompatible changes occur . 
 + * / 
 + private static String [ ] extraCompatibleVersions = { " 1 . 12 " } ; 
 + 
 private static final Logger log = LogManager . getLogger ( " ForgeVersionCheck " ) ; 
 
 public static int getMajorVersion ( ) 
 @ @ - 107 , 6 + 116 , 15 @ @ public class ForgeVersion 
 return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 } 
 
 + / / We add in the current version ( we ' re compatible with it ) and test additional versions for compatibility 
 + private static List < DefaultArtifactVersion > COMPATIBLE _ VERSIONS = Stream . concat ( Stream . of ( mcVersion ) , Stream . of ( extraCompatibleVersions ) ) 
 + . map ( s - > new DefaultArtifactVersion ( " dummy " , s ) ) . collect ( Collectors . toList ( ) ) ; 
 + 
 + / / Tests the mod supplied version range for compatibility with our version compatibility list 
 + public static boolean testMinecraftVersionCompatibility ( VersionRange modVersion ) { 
 + return COMPATIBLE _ VERSIONS . stream ( ) . anyMatch ( modVersion : : containsVersion ) ; 
 + } 
 + 
 public static enum Status 
 { 
 PENDING ( ) , 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index c7b1577 . . e8a1d15 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 67 , 7 + 67 , 6 @ @ import java . util . function . Function ; 
 import com . google . common . base . Strings ; 
 import com . google . common . collect . ArrayListMultimap ; 
 import com . google . common . collect . ImmutableList ; 
 - import com . google . common . collect . ImmutableList . Builder ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . ListMultimap ; 
 @ @ - 256 , 16 + 255 , 7 @ @ public class FMLModContainer implements ModContainer 
 } 
 
 String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; 
 - if ( " [ 1 . 8 . 8 ] " . equals ( mcVersionString ) ) mcVersionString = " [ 1 . 8 . 8 , 1 . 8 . 9 ] " ; / / MC 1 . 8 . 8 and 1 . 8 . 9 is forward SRG compatible so accept these versions by default . 
 - if ( " [ 1 . 9 . 4 ] " . equals ( mcVersionString ) | | 
 - " [ 1 . 9 , 1 . 9 . 4 ] " . equals ( mcVersionString ) | | 
 - " [ 1 . 9 . 4 , 1 . 10 ) " . equals ( mcVersionString ) | | 
 - " [ 1 . 10 ] " . equals ( mcVersionString ) ) 
 - mcVersionString = " [ 1 . 9 . 4 , 1 . 10 . 2 ] " ; 
 - if ( " [ 1 . 11 ] " . equals ( mcVersionString ) ) 
 - mcVersionString = " [ 1 . 11 , 1 . 11 . 2 ] " ; 
 - if ( " [ 1 . 12 ] " . equals ( mcVersionString ) ) 
 - mcVersionString = " [ 1 . 12 , 1 . 12 . 1 ] " ; 
 + 
 if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) 
 { 
 minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 5646f8b . . e484d47 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . net . MalformedURLException ; 
 import java . util . ArrayList ; 
 - import java . util . Collections ; 
 import java . util . Comparator ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 @ @ - 35 , 6 + 34 , 7 @ @ import java . util . Properties ; 
 import java . util . Set ; 
 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . capabilities . CapabilityManager ; 
 import net . minecraftforge . common . config . ConfigManager ; 
 import net . minecraftforge . common . crafting . CraftingHelper ; 
 @ @ - 62 , 7 + 62 , 6 @ @ import org . apache . commons . io . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . CharMatcher ; 
 - import java . util . function . Function ; 
 import com . google . common . base . Joiner ; 
 import com . google . common . base . Splitter ; 
 import com . google . common . collect . ArrayListMultimap ; 
 @ @ - 238 , 9 + 237 , 9 @ @ public class Loader 
 ArrayListMultimap < String , String > reqList = ArrayListMultimap . create ( ) ; 
 for ( ModContainer mod : getActiveModList ( ) ) 
 { 
 - if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) 
 + if ( ! ForgeVersion . testMinecraftVersionCompatibility ( mod . acceptableMinecraftVersionRange ( ) ) ) 
 { 
 - FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; 
 + FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . It is compatible with { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) , mod . acceptableMinecraftVersionRange ( ) ) ; 
 WrongMinecraftVersionException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; 
 FMLLog . log . fatal ( ret . getMessage ( ) ) ; 
 wrongMinecraftExceptions . add ( ret ) ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 1afaf1c . . a072127 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 204 , 10 + 204 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 return ; 
 } 
 
 - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 + List < String > injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 try 
 { 
 - Loader . instance ( ) . loadMods ( ) ; 
 + Loader . instance ( ) . loadMods ( injectedModContainers ) ; 
 } 
 catch ( WrongMinecraftVersionException wrong ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index f135488 . . 7e181d8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 140 , 11 + 140 , 12 @ @ public class FMLCommonHandler 
 return eventBus ; 
 } 
 
 - public void beginLoading ( IFMLSidedHandler handler ) 
 + public List < String > beginLoading ( IFMLSidedHandler handler ) 
 { 
 sidedDelegate = handler ; 
 MinecraftForge . initialize ( ) ; 
 / / MinecraftForge . registerCrashCallable ( ) ; 
 + return ImmutableList . < String > of ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 0e60836 . . e2771f3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 26 , 14 + 26 , 11 @ @ import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 
 - import net . minecraft . crash . CrashReport ; 
 - import net . minecraft . crash . ICrashReportDetail ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . common . capabilities . CapabilityManager ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 import net . minecraftforge . fml . common . ModContainer . Disableable ; 
 import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; 
 - import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; 
 import net . minecraftforge . fml . common . discovery . ModDiscoverer ; 
 import net . minecraftforge . fml . common . event . FMLInterModComms ; 
 import net . minecraftforge . fml . common . event . FMLLoadEvent ; 
 @ @ - 338 , 8 + 335 , 9 @ @ public class Loader 
 * Finally , if they are successfully loaded as classes , they are then added 
 * to the available mod list . 
 * / 
 - private ModDiscoverer identifyMods ( ) 
 + private ModDiscoverer identifyMods ( List < String > additionalContainers ) 
 { 
 + injectedContainers . addAll ( additionalContainers ) ; 
 FMLLog . fine ( " Building injected Mod Containers % s " , injectedContainers ) ; 
 / / Add in the MCP mod container 
 mods . add ( new InjectedModContainer ( mcp , new File ( " minecraft . jar " ) ) ) ; 
 @ @ - 487 , 8 + 485 , 9 @ @ public class Loader 
 * Called from the hook to start mod loading . We trigger the 
 * { @ link # identifyMods ( ) } and Constructing , Preinitalization , and Initalization phases here . Finally , 
 * the mod list is frozen completely and is consider immutable from then on . 
 + * @ param injectedModContainers 
 * / 
 - public void loadMods ( ) 
 + public void loadMods ( List < String > injectedModContainers ) 
 { 
 progressBar = ProgressManager . push ( " Loading " , 7 ) ; 
 progressBar . step ( " Constructing Mods " ) ; 
 @ @ - 497 , 7 + 496 , 7 @ @ public class Loader 
 namedMods = Maps . newHashMap ( ) ; 
 modController = new LoadController ( this ) ; 
 modController . transition ( LoaderState . LOADING , false ) ; 
 - discoverer = identifyMods ( ) ; 
 + discoverer = identifyMods ( injectedModContainers ) ; 
 ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; 
 disableRequestedMods ( ) ; 
 modController . distributeStateMessage ( FMLLoadEvent . class ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index 7d82c64 . . d292218 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 13 , 7 + 13 , 6 @ @ 
 package net . minecraftforge . fml . server ; 
 
 import java . io . * ; 
 - import java . util . Enumeration ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Set ; 
 @ @ - 74 , 22 + 73 , 22 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 * A reference to the server itself 
 * / 
 private MinecraftServer server ; 
 - 
 + private List < String > injectedModContainers ; 
 private FMLServerHandler ( ) 
 { 
 - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 + injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 } 
 / * * 
 * Called to start the whole game off from 
 * { @ link MinecraftServer # startServer } 
 * 
 - * @ param minecraftServer 
 + * @ param minecraftServer server 
 * / 
 @ Override 
 public void beginServerLoading ( MinecraftServer minecraftServer ) 
 { 
 server = minecraftServer ; 
 - Loader . instance ( ) . loadMods ( ) ; 
 + Loader . instance ( ) . loadMods ( injectedModContainers ) ; 
 Loader . instance ( ) . preinitializeMods ( ) ; 
 } 

