BLEU SCORE: 0.024455939372403628

TEST MSG: Installer work , universal obfed to srg names , and binpatches against SRG named clients .
GENERATED MSG: Work on installer json generation .

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index ad5b9f7 . . 8c9acdd 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 15 , 6 + 15 , 7 @ @ import java . text . SimpleDateFormat <nl> import java . util . Date <nl> import java . security . MessageDigest <nl> import java . net . URL <nl> + import net . minecraftforge . gradle . common . task . DownloadMavenArtifact <nl> import net . minecraftforge . gradle . common . task . SignJar <nl> import org . apache . tools . ant . filters . ReplaceTokens <nl> import de . undercouch . gradle . tasks . download . Download <nl> @ @ - 32 , 7 + 33 , 7 @ @ version = ' 1 . 0 . 0 ' <nl> project ( ' : mcp ' ) { <nl> apply plugin : ' net . minecraftforge . gradle . forgedev . mcp ' <nl> mcp { <nl> - config = ' de . oceanlabs . mcp : mcp _ config : 1 . 13 - 2018 . 09 . 12 . 04 . 11 . 00 @ zip ' <nl> + config = ' 1 . 13 - 2018 . 09 . 12 . 04 . 11 . 00 ' <nl> pipeline = ' joined ' <nl> } <nl> } <nl> @ @ - 86 , 6 + 87 , 10 @ @ project ( ' : forge ' ) { <nl> mavenLocal ( ) <nl> mavenCentral ( ) <nl> } <nl> + ext { <nl> + MCP _ ARTIFACT = project ( ' : mcp ' ) . mcp . config <nl> + MCP _ VERSION = project ( ' : mcp ' ) . mcp . config . version . split ( ' - ' ) [ 1 ] / / The timestamp only . <nl> + } <nl> patcher { <nl> parent = project ( ' : clean ' ) <nl> patches = file ( " $ rootDir / patches / minecraft " ) <nl> @ @ - 93 , 6 + 98 , 7 @ @ project ( ' : forge ' ) { <nl> accessTransformer = file ( " $ rootDir / src / main / resources / forge _ at . cfg " ) <nl> exc = file ( " $ rootDir / src / main / resources / forge . exc " ) <nl> srgPatches = true <nl> + srgUniversal = true <nl> clientRun { <nl> main = ' net . minecraftforge . fml . LaunchTesting ' <nl> environment = [ <nl> @ @ - 303 , 29 + 309 , 32 @ @ project ( ' : forge ' ) { <nl> } <nl> } <nl> <nl> - task installerJson ( ) { <nl> + task installerJson ( dependsOn : [ launcherJson , genClientBinPatches ] ) { <nl> ext { <nl> output = file ( ' build / libs / install _ profile . json ' ) <nl> + INSTALLER _ TOOLS = ' net . minecraftforge : installertools : 1 . 0 . 3 ' <nl> + } <nl> + doFirst { <nl> + ext . BIN _ PATCHER = ' net . minecraftforge : binarypatcher : ' + genClientBinPatches . resolvedVersion <nl> } <nl> - dependsOn launcherJson <nl> inputs . file launcherJson . output <nl> outputs . file output <nl> doLast { <nl> def idx = project . version . indexOf ( ' - ' ) <nl> + def libs = [ : ] <nl> def json = [ <nl> _ comment _ : launcherJson . comment , <nl> profile : project . name , <nl> version : project . version . substring ( 0 , idx ) + " - $ { project . name } " + project . version . substring ( idx ) , <nl> json : ' / version . json ' , <nl> - path : " $ { project . group } : $ { project . name } : $ { project . version } " , <nl> + path : " $ { project . group } : $ { project . name } : $ { project . version } : universal " , <nl> logo : ' / big _ logo . png ' , <nl> minecraft : patcher . mcVersion , <nl> welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , <nl> - processors : [ ] , <nl> data : [ <nl> MAPPINGS : [ <nl> - client : ' / data / joined . tsrg ' , <nl> - server : ' / data / joined . tsrg ' <nl> + client : " [ $ { MCP _ ARTIFACT . group } : $ { MCP _ ARTIFACT . name } : $ { MCP _ ARTIFACT . version } : mappings @ txt ] " , <nl> + server : " [ $ { MCP _ ARTIFACT . group } : $ { MCP _ ARTIFACT . name } : $ { MCP _ ARTIFACT . version } : mappings @ txt ] " <nl> ] , <nl> BINPATCH : [ <nl> client : ' / data / client . lzma ' , <nl> @ @ - 343 , 48 + 352 , 63 @ @ project ( ' : forge ' ) { <nl> client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , <nl> server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " <nl> ] , <nl> - PATCHED : [ <nl> - client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - patched ] " , <nl> - server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - patched ] " <nl> + MC _ SRG : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } - $ { MCP _ VERSION } : srg ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } - $ { MCP _ VERSION } : srg ] " <nl> ] , <nl> - REMAPPED : [ <nl> - client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - srg ] " , <nl> - server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - srg ] " <nl> + PATCHED : [ <nl> + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client ] " , <nl> + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server ] " <nl> + ] <nl> + ] , <nl> + processors : [ <nl> + [ <nl> + jar : INSTALLER _ TOOLS , <nl> + classpath : getClasspath ( project , libs , INSTALLER _ TOOLS ) , <nl> + args : [ <nl> + ' - - task ' , ' MCP _ DATA ' , <nl> + ' - - input ' , " [ $ { MCP _ ARTIFACT . descriptor } ] " , <nl> + ' - - output ' , ' { MAPPINGS } ' , <nl> + ' - - key ' , ' mappings ' <nl> + ] <nl> + ] , [ <nl> + jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , <nl> + args : [ <nl> + ' - - input ' , ' { MINECRAFT _ JAR } ' , <nl> + ' - - slim ' , ' { MC _ SLIM } ' , <nl> + ' - - data ' , ' { MC _ DATA } ' , <nl> + ' - - extra ' , ' { MC _ EXTRA } ' , <nl> + ' - - srg ' , ' { MAPPINGS } ' <nl> + ] <nl> + ] , [ / / SpecialSource has a bug where it won ' t create the nessasary directories , remove when they fix that . <nl> + jar : INSTALLER _ TOOLS , <nl> + classpath : getClasspath ( project , libs , INSTALLER _ TOOLS ) , <nl> + args : [ <nl> + ' - - task ' , ' CREATE _ PARENTS ' , <nl> + ' - - target ' , ' { MC _ SRG } ' <nl> + ] <nl> + ] , [ <nl> + jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , <nl> + args : [ <nl> + ' - - in - jar ' , ' { MC _ SLIM } ' , <nl> + ' - - out - jar ' , ' { MC _ SRG } ' , <nl> + ' - - srg - in ' , ' { MAPPINGS } ' <nl> + ] <nl> + ] , [ <nl> + jar : BIN _ PATCHER , <nl> + classpath : getClasspath ( project , libs , BIN _ PATCHER ) , <nl> + args : [ <nl> + ' - - clean ' , ' { MC _ SRG } ' , <nl> + ' - - output ' , ' { PATCHED } ' , <nl> + ' - - apply ' , ' { BINPATCH } ' <nl> + ] <nl> ] <nl> ] <nl> ] <nl> - def libs = [ : ] <nl> - json . processors . add ( [ <nl> - jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , <nl> - classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , <nl> - args : [ <nl> - ' - - input ' , ' { MINECRAFT _ JAR } ' , <nl> - ' - - slim ' , " { MC _ SLIM } " , <nl> - ' - - data ' , " { MC _ DATA } " , <nl> - ' - - extra ' , " { MC _ EXTRA } " , <nl> - ' - - srg ' , ' { MAPPINGS } ' <nl> - ] <nl> - ] ) <nl> - json . processors . add ( [ <nl> - jar : ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' , <nl> - classpath : getClasspath ( project , libs , ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' ) , <nl> - args : [ <nl> - ' - - clean ' , ' { MC _ SLIM } ' , <nl> - ' - - output ' , ' { PATCHED } ' , <nl> - ' - - apply ' , ' { BINPATCH } ' <nl> - ] <nl> - ] ) <nl> - json . processors . add ( [ <nl> - jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , <nl> - classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , <nl> - args : [ <nl> - ' - - in - jar ' , ' { PATCHED } ' , <nl> - ' - - out - jar ' , ' { REMAPPED } ' , <nl> - ' - - srg - in ' , ' { MAPPINGS } ' <nl> - ] <nl> - ] ) <nl> - <nl> - json . libraries = libs . values ( ) <nl> + getClasspath ( project , libs , MCP _ ARTIFACT . descriptor ) / / Tell it to download mcp _ config <nl> + json . libraries = libs . values ( ) . sort { a , b - > a . name . compareTo ( b . name ) } <nl> <nl> output . text = new JsonBuilder ( json ) . toPrettyString ( ) <nl> } <nl> @ @ - 444 , 11 + 468 , 10 @ @ project ( ' : forge ' ) { <nl> <nl> task signUniversal ( type : SignJar , dependsOn : universalJar ) { <nl> onlyIf { <nl> - project . hasProperty ( ' jarsigner ' ) <nl> + project . hasProperty ( ' jarsigner ' ) & & universalJar . state . failure = = null <nl> } <nl> <nl> def jarsigner = [ : ] ; <nl> - <nl> if ( project . hasProperty ( ' jarsigner ' ) ) <nl> jarsigner = project . jarsigner ; <nl> <nl> @ @ - 458 , 20 + 481 , 59 @ @ project ( ' : forge ' ) { <nl> keyStore = jarsigner . keystore <nl> inputFile = universalJar . archivePath <nl> outputFile = universalJar . archivePath <nl> + doFirst { <nl> + project . logger . lifecycle ( ' Signing : ' + inputFile ) <nl> + } <nl> + } <nl> + universalJar . finalizedBy ( signUniversal ) <nl> + <nl> + task downloadInstaller ( type : DownloadMavenArtifact ) { <nl> + artifact = ' net . minecraftforge : installer : 2 . + : shrunk ' <nl> } <nl> - publish . dependsOn signUniversal <nl> - build . dependsOn signUniversal <nl> <nl> - / * <nl> - installer { <nl> - dependsOn signUniversal <nl> + task installerJar ( type : Zip , dependsOn : [ downloadInstaller , universalJar , installerJson , launcherJson , genClientBinPatches , genServerBinPatches ] ) { <nl> classifier = ' installer ' <nl> - from extraTxts <nl> - from " src / main / resources / forge _ logo . png " <nl> - from " src / main / resources / url . png " <nl> - rename " forge _ logo \ \ . png " , " big _ logo . png " <nl> + extension = ' jar ' / / Needs to be Zip task to not override Manifest , so set extension <nl> + from ( extraTxts ) <nl> + from ( rootProject . file ( ' / src / main / resources / forge _ logo . png ' ) ) { <nl> + rename { ' big _ logo . png ' } <nl> + } <nl> + from ( rootProject . file ( ' / src / main / resources / url . png ' ) ) <nl> + from ( genClientBinPatches . output ) { <nl> + rename { ' data / client . lzma ' } <nl> + } <nl> + from ( genServerBinPatches . output ) { <nl> + rename { ' data / server . lzma ' } <nl> + } <nl> + from ( universalJar ) { <nl> + into " / maven / $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / " <nl> + } <nl> + from ( installerJson . output ) <nl> + from ( launcherJson . output ) <nl> + from ( zipTree ( downloadInstaller . output ) ) { <nl> + duplicatesStrategy = ' exclude ' <nl> + } <nl> } <nl> - * / <nl> + task signInstaller ( type : SignJar , dependsOn : installerJar ) { <nl> + onlyIf { <nl> + project . hasProperty ( ' jarsigner ' ) & & installerJar . state . failure = = null <nl> + } <nl> + <nl> + def jarsigner = [ : ] ; <nl> + if ( project . hasProperty ( ' jarsigner ' ) ) <nl> + jarsigner = project . jarsigner ; <nl> + <nl> + alias = ' forge ' <nl> + storePass = jarsigner . storepass <nl> + keyPass = jarsigner . keypass <nl> + keyStore = jarsigner . keystore <nl> + inputFile = installerJar . archivePath <nl> + outputFile = installerJar . archivePath <nl> + doFirst { <nl> + project . logger . lifecycle ( ' Signing : ' + inputFile ) <nl> + } <nl> + } <nl> + signInstaller . finalizedBy ( signInstaller ) <nl> <nl> task makeMdk ( type : Zip ) { <nl> baseName = project . name
NEAREST DIFF (one line): diff - - git a / LICENSE . txt b / LICENSE . txt <nl> index 97b081b . . 7788a39 100644 <nl> - - - a / LICENSE . txt <nl> + + + b / LICENSE . txt <nl> @ @ - 57 , 12 + 57 , 6 @ @ This software contains a partial repackaging of javaxdelta , a BSD licensed progr <nl> binary differences and applying them , sourced from the subversion at http : / / sourceforge . net / projects / javaxdelta / <nl> authored by genman , heikok , pivot . <nl> The only changes are to replace some Trove collection types with standard Java collections , and repackaged . <nl> - <nl> - This software contains potions of Paulscodee IBXM library , a BSD liceensed library for <nl> - loading and playing IBXM formated auto . No modifications havee beeen made . The associated <nl> - licenses can be found along side this one , or at <nl> - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20IBXM % 20Library . txt <nl> - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20SoundSystem % 20CodecIBXM . txt <nl> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> <nl> <nl> diff - - git a / build . gradle b / build . gradle <nl> index b126b9e . . ab9bfad 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 14 , 6 + 14 , 7 @ @ import groovy . json . JsonBuilder <nl> import java . text . SimpleDateFormat <nl> import java . util . Date <nl> import java . security . MessageDigest <nl> + import java . net . URL <nl> import net . minecraftforge . gradle . common . task . SignJar <nl> import org . apache . tools . ant . filters . ReplaceTokens <nl> import de . undercouch . gradle . tasks . download . Download <nl> @ @ - 289 , 32 + 290 , 9 @ @ project ( ' : forge ' ) { <nl> ' java3d : vecmath ' <nl> ] <nl> def mojang = [ ] <nl> - <nl> - project . configurations . compileClasspath . resolvedConfiguration . resolvedArtifacts . each { <nl> - def art = [ <nl> - group : it . moduleVersion . id . group , <nl> - name : it . moduleVersion . id . name , <nl> - version : it . moduleVersion . id . version , <nl> - classifier : it . classifier , <nl> - extension : it . extension , <nl> - file : it . file <nl> - ] <nl> - def key = art . group + ' : ' + art . name <nl> + def artifacts = getArtifacts ( project , project . configurations . compileClasspath ) <nl> + artifacts . each { key , lib - > <nl> if ( forge . contains ( key ) | | mojang . contains ( key ) ) { <nl> - def url = forge . contains ( key ) ? " https : / / files . minecraftforge . net / maven / " : " https : / / libraries . minecraft . net / " <nl> - def path = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / $ { art . name } - $ { art . version } " <nl> - if ( art . classifier ! = null ) <nl> - path + = " - $ { art . classifier } " <nl> - path + = " . $ { art . extension } " <nl> - def lib = [ <nl> - name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , <nl> - downloads : [ <nl> - path : path , <nl> - url : url + path , <nl> - sha1 : sha1 ( art . file ) , <nl> - size : art . file . length ( ) <nl> - ] <nl> - ] <nl> json . libraries . add ( lib ) <nl> } <nl> } <nl> @ @ - 325 , 21 + 303 , 87 @ @ project ( ' : forge ' ) { <nl> <nl> task installerJson ( ) { <nl> ext { <nl> - output = file ( ' build / libs / installer . json ' ) <nl> + output = file ( ' build / libs / install _ profile . json ' ) <nl> } <nl> dependsOn launcherJson <nl> inputs . file launcherJson . output <nl> outputs . file output <nl> doLast { <nl> + def idx = project . version . indexOf ( ' - ' ) <nl> def json = [ <nl> - install : [ <nl> - _ comment _ : launcherJson . comment , <nl> - profileName : project . name , <nl> - version : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , <nl> - json : ' / version . json ' , <nl> - logo : ' / big _ logo . png ' <nl> + _ comment _ : launcherJson . comment , <nl> + profile : project . name , <nl> + version : project . version . substring ( 0 , idx ) + " - $ { project . name } " + project . version . substring ( idx ) , <nl> + json : ' / version . json ' , <nl> + path : " $ { project . group } : $ { project . name } : $ { project . version } " , <nl> + logo : ' / big _ logo . png ' , <nl> + minecraft : patcher . mcVersion , <nl> + welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , <nl> + processors : [ ] , <nl> + data : [ <nl> + MAPPINGS : [ <nl> + client : ' / data / joined . tsrg ' , <nl> + server : ' / data / joined . tsrg ' <nl> + ] , <nl> + BINPATCH : [ <nl> + client : ' / data / client . lzma ' , <nl> + server : ' / data / server . lzma ' <nl> + ] , <nl> + MC _ SLIM : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } : slim ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } : slim ] " <nl> + ] , <nl> + MC _ DATA : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } : data ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } : data ] " <nl> + ] , <nl> + MC _ EXTRA : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " <nl> + ] , <nl> + PATCHED : [ <nl> + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - patched ] " , <nl> + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - patched ] " <nl> + ] , <nl> + REMAPPED : [ <nl> + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - srg ] " , <nl> + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - srg ] " <nl> + ] <nl> ] <nl> ] <nl> + def libs = [ : ] <nl> + json . processors . add ( [ <nl> + jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , <nl> + args : [ <nl> + ' - - input ' , ' { MINECRAFT _ JAR } ' , <nl> + ' - - slim ' , " { MC _ SLIM } " , <nl> + ' - - data ' , " { MC _ DATA } " , <nl> + ' - - extra ' , " { MC _ EXTRA } " , <nl> + ' - - srg ' , ' { MAPPINGS } ' <nl> + ] <nl> + ] ) <nl> + json . processors . add ( [ <nl> + jar : ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' ) , <nl> + args : [ <nl> + ' - - clean ' , ' { MC _ SLIM } ' , <nl> + ' - - output ' , ' { PATCHED } ' , <nl> + ' - - apply ' , ' { BINPATCH } ' <nl> + ] <nl> + ] ) <nl> + json . processors . add ( [ <nl> + jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , <nl> + args : [ <nl> + ' - - in - jar ' , ' { PATCHED } ' , <nl> + ' - - out - jar ' , ' { REMAPPED } ' , <nl> + ' - - srg - in ' , ' { MAPPINGS } ' <nl> + ] <nl> + ] ) <nl> + <nl> + json . libraries = libs . values ( ) <nl> + <nl> output . text = new JsonBuilder ( json ) . toPrettyString ( ) <nl> } <nl> } <nl> @ @ - 556 , 12 + 600 , 90 @ @ def dateToIso8601 ( date ) { <nl> def result = format . format ( date ) <nl> return result [ 0 . . 21 ] + ' : ' + result [ 22 . . - 1 ] <nl> } <nl> + <nl> def sha1 ( file ) { <nl> - MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; <nl> + MessageDigest md = MessageDigest . getInstance ( ' SHA - 1 ' ) <nl> file . eachByte 4096 , { bytes , size - > <nl> - md . update ( bytes , 0 , size ) ; <nl> + md . update ( bytes , 0 , size ) <nl> + } <nl> + return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) <nl> + } <nl> + <nl> + def artifactTree ( project , artifact ) { <nl> + if ( ! project . ext . has ( ' tree _ resolver ' ) ) <nl> + project . ext . tree _ resolver = 1 <nl> + def cfg = project . configurations . create ( ' tree _ resolver _ ' + project . ext . tree _ resolver + + ) <nl> + def dep = project . dependencies . create ( artifact ) <nl> + cfg . dependencies . add ( dep ) <nl> + def files = cfg . resolve ( ) <nl> + return getArtifacts ( project , cfg ) <nl> + } <nl> + <nl> + def getArtifacts ( project , config ) { <nl> + def ret = [ : ] <nl> + config . resolvedConfiguration . resolvedArtifacts . each { <nl> + def art = [ <nl> + group : it . moduleVersion . id . group , <nl> + name : it . moduleVersion . id . name , <nl> + version : it . moduleVersion . id . version , <nl> + classifier : it . classifier , <nl> + extension : it . extension , <nl> + file : it . file <nl> + ] <nl> + def key = art . group + ' : ' + art . name <nl> + def folder = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / " <nl> + def filename = " $ { art . name } - $ { art . version } " <nl> + if ( art . classifier ! = null ) <nl> + filename + = " - $ { art . classifier } " <nl> + filename + = " . $ { art . extension } " <nl> + def path = " $ { folder } $ { filename } " <nl> + def url = " https : / / libraries . minecraft . net / $ { path } " <nl> + if ( ! checkExists ( url ) ) { <nl> + url = " https : / / files . minecraftforge . net / maven / $ { path } " <nl> + / * <nl> + project . logger . lifecycle ( " Artifact : $ { path } " ) <nl> + def repo = project . file ( " build / dep _ repo / $ { folder } " ) <nl> + repo . mkdirs ( ) <nl> + copy { <nl> + from art . file <nl> + into folder <nl> + rename { filename } <nl> + } <nl> + project . file ( " build / dep _ repo / $ { path } . sha1 " ) . text = sha1 ( it . file ) <nl> + * / <nl> + } <nl> + ret [ key ] = [ <nl> + name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , <nl> + downloads : [ <nl> + artifact : [ <nl> + path : path , <nl> + url : url , <nl> + sha1 : sha1 ( art . file ) , <nl> + size : art . file . length ( ) <nl> + ] <nl> + ] <nl> + ] <nl> + } <nl> + return ret <nl> + } <nl> + <nl> + def checkExists ( url ) { <nl> + def code = new URL ( url ) . openConnection ( ) . with { <nl> + requestMethod = ' HEAD ' <nl> + connect ( ) <nl> + responseCode <nl> + } <nl> + return code = = 200 <nl> + } <nl> + <nl> + def getClasspath ( project , libs , artifact ) { <nl> + def ret = [ ] <nl> + artifactTree ( project , artifact ) . each { key , lib - > <nl> + libs [ lib . name ] = lib <nl> + if ( lib . name ! = artifact ) <nl> + ret . add ( lib . name ) <nl> } <nl> - return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) ; <nl> + return ret <nl> } <nl> <nl> / / evaluationDependsOnChildren ( )

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index ad5b9f7 . . 8c9acdd 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 15 , 6 + 15 , 7 @ @ import java . text . SimpleDateFormat 
 import java . util . Date 
 import java . security . MessageDigest 
 import java . net . URL 
 + import net . minecraftforge . gradle . common . task . DownloadMavenArtifact 
 import net . minecraftforge . gradle . common . task . SignJar 
 import org . apache . tools . ant . filters . ReplaceTokens 
 import de . undercouch . gradle . tasks . download . Download 
 @ @ - 32 , 7 + 33 , 7 @ @ version = ' 1 . 0 . 0 ' 
 project ( ' : mcp ' ) { 
 apply plugin : ' net . minecraftforge . gradle . forgedev . mcp ' 
 mcp { 
 - config = ' de . oceanlabs . mcp : mcp _ config : 1 . 13 - 2018 . 09 . 12 . 04 . 11 . 00 @ zip ' 
 + config = ' 1 . 13 - 2018 . 09 . 12 . 04 . 11 . 00 ' 
 pipeline = ' joined ' 
 } 
 } 
 @ @ - 86 , 6 + 87 , 10 @ @ project ( ' : forge ' ) { 
 mavenLocal ( ) 
 mavenCentral ( ) 
 } 
 + ext { 
 + MCP _ ARTIFACT = project ( ' : mcp ' ) . mcp . config 
 + MCP _ VERSION = project ( ' : mcp ' ) . mcp . config . version . split ( ' - ' ) [ 1 ] / / The timestamp only . 
 + } 
 patcher { 
 parent = project ( ' : clean ' ) 
 patches = file ( " $ rootDir / patches / minecraft " ) 
 @ @ - 93 , 6 + 98 , 7 @ @ project ( ' : forge ' ) { 
 accessTransformer = file ( " $ rootDir / src / main / resources / forge _ at . cfg " ) 
 exc = file ( " $ rootDir / src / main / resources / forge . exc " ) 
 srgPatches = true 
 + srgUniversal = true 
 clientRun { 
 main = ' net . minecraftforge . fml . LaunchTesting ' 
 environment = [ 
 @ @ - 303 , 29 + 309 , 32 @ @ project ( ' : forge ' ) { 
 } 
 } 
 
 - task installerJson ( ) { 
 + task installerJson ( dependsOn : [ launcherJson , genClientBinPatches ] ) { 
 ext { 
 output = file ( ' build / libs / install _ profile . json ' ) 
 + INSTALLER _ TOOLS = ' net . minecraftforge : installertools : 1 . 0 . 3 ' 
 + } 
 + doFirst { 
 + ext . BIN _ PATCHER = ' net . minecraftforge : binarypatcher : ' + genClientBinPatches . resolvedVersion 
 } 
 - dependsOn launcherJson 
 inputs . file launcherJson . output 
 outputs . file output 
 doLast { 
 def idx = project . version . indexOf ( ' - ' ) 
 + def libs = [ : ] 
 def json = [ 
 _ comment _ : launcherJson . comment , 
 profile : project . name , 
 version : project . version . substring ( 0 , idx ) + " - $ { project . name } " + project . version . substring ( idx ) , 
 json : ' / version . json ' , 
 - path : " $ { project . group } : $ { project . name } : $ { project . version } " , 
 + path : " $ { project . group } : $ { project . name } : $ { project . version } : universal " , 
 logo : ' / big _ logo . png ' , 
 minecraft : patcher . mcVersion , 
 welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , 
 - processors : [ ] , 
 data : [ 
 MAPPINGS : [ 
 - client : ' / data / joined . tsrg ' , 
 - server : ' / data / joined . tsrg ' 
 + client : " [ $ { MCP _ ARTIFACT . group } : $ { MCP _ ARTIFACT . name } : $ { MCP _ ARTIFACT . version } : mappings @ txt ] " , 
 + server : " [ $ { MCP _ ARTIFACT . group } : $ { MCP _ ARTIFACT . name } : $ { MCP _ ARTIFACT . version } : mappings @ txt ] " 
 ] , 
 BINPATCH : [ 
 client : ' / data / client . lzma ' , 
 @ @ - 343 , 48 + 352 , 63 @ @ project ( ' : forge ' ) { 
 client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , 
 server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " 
 ] , 
 - PATCHED : [ 
 - client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - patched ] " , 
 - server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - patched ] " 
 + MC _ SRG : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } - $ { MCP _ VERSION } : srg ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } - $ { MCP _ VERSION } : srg ] " 
 ] , 
 - REMAPPED : [ 
 - client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - srg ] " , 
 - server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - srg ] " 
 + PATCHED : [ 
 + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client ] " , 
 + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server ] " 
 + ] 
 + ] , 
 + processors : [ 
 + [ 
 + jar : INSTALLER _ TOOLS , 
 + classpath : getClasspath ( project , libs , INSTALLER _ TOOLS ) , 
 + args : [ 
 + ' - - task ' , ' MCP _ DATA ' , 
 + ' - - input ' , " [ $ { MCP _ ARTIFACT . descriptor } ] " , 
 + ' - - output ' , ' { MAPPINGS } ' , 
 + ' - - key ' , ' mappings ' 
 + ] 
 + ] , [ 
 + jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , 
 + args : [ 
 + ' - - input ' , ' { MINECRAFT _ JAR } ' , 
 + ' - - slim ' , ' { MC _ SLIM } ' , 
 + ' - - data ' , ' { MC _ DATA } ' , 
 + ' - - extra ' , ' { MC _ EXTRA } ' , 
 + ' - - srg ' , ' { MAPPINGS } ' 
 + ] 
 + ] , [ / / SpecialSource has a bug where it won ' t create the nessasary directories , remove when they fix that . 
 + jar : INSTALLER _ TOOLS , 
 + classpath : getClasspath ( project , libs , INSTALLER _ TOOLS ) , 
 + args : [ 
 + ' - - task ' , ' CREATE _ PARENTS ' , 
 + ' - - target ' , ' { MC _ SRG } ' 
 + ] 
 + ] , [ 
 + jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , 
 + args : [ 
 + ' - - in - jar ' , ' { MC _ SLIM } ' , 
 + ' - - out - jar ' , ' { MC _ SRG } ' , 
 + ' - - srg - in ' , ' { MAPPINGS } ' 
 + ] 
 + ] , [ 
 + jar : BIN _ PATCHER , 
 + classpath : getClasspath ( project , libs , BIN _ PATCHER ) , 
 + args : [ 
 + ' - - clean ' , ' { MC _ SRG } ' , 
 + ' - - output ' , ' { PATCHED } ' , 
 + ' - - apply ' , ' { BINPATCH } ' 
 + ] 
 ] 
 ] 
 ] 
 - def libs = [ : ] 
 - json . processors . add ( [ 
 - jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , 
 - classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , 
 - args : [ 
 - ' - - input ' , ' { MINECRAFT _ JAR } ' , 
 - ' - - slim ' , " { MC _ SLIM } " , 
 - ' - - data ' , " { MC _ DATA } " , 
 - ' - - extra ' , " { MC _ EXTRA } " , 
 - ' - - srg ' , ' { MAPPINGS } ' 
 - ] 
 - ] ) 
 - json . processors . add ( [ 
 - jar : ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' , 
 - classpath : getClasspath ( project , libs , ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' ) , 
 - args : [ 
 - ' - - clean ' , ' { MC _ SLIM } ' , 
 - ' - - output ' , ' { PATCHED } ' , 
 - ' - - apply ' , ' { BINPATCH } ' 
 - ] 
 - ] ) 
 - json . processors . add ( [ 
 - jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , 
 - classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , 
 - args : [ 
 - ' - - in - jar ' , ' { PATCHED } ' , 
 - ' - - out - jar ' , ' { REMAPPED } ' , 
 - ' - - srg - in ' , ' { MAPPINGS } ' 
 - ] 
 - ] ) 
 - 
 - json . libraries = libs . values ( ) 
 + getClasspath ( project , libs , MCP _ ARTIFACT . descriptor ) / / Tell it to download mcp _ config 
 + json . libraries = libs . values ( ) . sort { a , b - > a . name . compareTo ( b . name ) } 
 
 output . text = new JsonBuilder ( json ) . toPrettyString ( ) 
 } 
 @ @ - 444 , 11 + 468 , 10 @ @ project ( ' : forge ' ) { 
 
 task signUniversal ( type : SignJar , dependsOn : universalJar ) { 
 onlyIf { 
 - project . hasProperty ( ' jarsigner ' ) 
 + project . hasProperty ( ' jarsigner ' ) & & universalJar . state . failure = = null 
 } 
 
 def jarsigner = [ : ] ; 
 - 
 if ( project . hasProperty ( ' jarsigner ' ) ) 
 jarsigner = project . jarsigner ; 
 
 @ @ - 458 , 20 + 481 , 59 @ @ project ( ' : forge ' ) { 
 keyStore = jarsigner . keystore 
 inputFile = universalJar . archivePath 
 outputFile = universalJar . archivePath 
 + doFirst { 
 + project . logger . lifecycle ( ' Signing : ' + inputFile ) 
 + } 
 + } 
 + universalJar . finalizedBy ( signUniversal ) 
 + 
 + task downloadInstaller ( type : DownloadMavenArtifact ) { 
 + artifact = ' net . minecraftforge : installer : 2 . + : shrunk ' 
 } 
 - publish . dependsOn signUniversal 
 - build . dependsOn signUniversal 
 
 - / * 
 - installer { 
 - dependsOn signUniversal 
 + task installerJar ( type : Zip , dependsOn : [ downloadInstaller , universalJar , installerJson , launcherJson , genClientBinPatches , genServerBinPatches ] ) { 
 classifier = ' installer ' 
 - from extraTxts 
 - from " src / main / resources / forge _ logo . png " 
 - from " src / main / resources / url . png " 
 - rename " forge _ logo \ \ . png " , " big _ logo . png " 
 + extension = ' jar ' / / Needs to be Zip task to not override Manifest , so set extension 
 + from ( extraTxts ) 
 + from ( rootProject . file ( ' / src / main / resources / forge _ logo . png ' ) ) { 
 + rename { ' big _ logo . png ' } 
 + } 
 + from ( rootProject . file ( ' / src / main / resources / url . png ' ) ) 
 + from ( genClientBinPatches . output ) { 
 + rename { ' data / client . lzma ' } 
 + } 
 + from ( genServerBinPatches . output ) { 
 + rename { ' data / server . lzma ' } 
 + } 
 + from ( universalJar ) { 
 + into " / maven / $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / " 
 + } 
 + from ( installerJson . output ) 
 + from ( launcherJson . output ) 
 + from ( zipTree ( downloadInstaller . output ) ) { 
 + duplicatesStrategy = ' exclude ' 
 + } 
 } 
 - * / 
 + task signInstaller ( type : SignJar , dependsOn : installerJar ) { 
 + onlyIf { 
 + project . hasProperty ( ' jarsigner ' ) & & installerJar . state . failure = = null 
 + } 
 + 
 + def jarsigner = [ : ] ; 
 + if ( project . hasProperty ( ' jarsigner ' ) ) 
 + jarsigner = project . jarsigner ; 
 + 
 + alias = ' forge ' 
 + storePass = jarsigner . storepass 
 + keyPass = jarsigner . keypass 
 + keyStore = jarsigner . keystore 
 + inputFile = installerJar . archivePath 
 + outputFile = installerJar . archivePath 
 + doFirst { 
 + project . logger . lifecycle ( ' Signing : ' + inputFile ) 
 + } 
 + } 
 + signInstaller . finalizedBy ( signInstaller ) 
 
 task makeMdk ( type : Zip ) { 
 baseName = project . name

NEAREST DIFF:
diff - - git a / LICENSE . txt b / LICENSE . txt 
 index 97b081b . . 7788a39 100644 
 - - - a / LICENSE . txt 
 + + + b / LICENSE . txt 
 @ @ - 57 , 12 + 57 , 6 @ @ This software contains a partial repackaging of javaxdelta , a BSD licensed progr 
 binary differences and applying them , sourced from the subversion at http : / / sourceforge . net / projects / javaxdelta / 
 authored by genman , heikok , pivot . 
 The only changes are to replace some Trove collection types with standard Java collections , and repackaged . 
 - 
 - This software contains potions of Paulscodee IBXM library , a BSD liceensed library for 
 - loading and playing IBXM formated auto . No modifications havee beeen made . The associated 
 - licenses can be found along side this one , or at 
 - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20IBXM % 20Library . txt 
 - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20SoundSystem % 20CodecIBXM . txt 
 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 
 
 diff - - git a / build . gradle b / build . gradle 
 index b126b9e . . ab9bfad 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 14 , 6 + 14 , 7 @ @ import groovy . json . JsonBuilder 
 import java . text . SimpleDateFormat 
 import java . util . Date 
 import java . security . MessageDigest 
 + import java . net . URL 
 import net . minecraftforge . gradle . common . task . SignJar 
 import org . apache . tools . ant . filters . ReplaceTokens 
 import de . undercouch . gradle . tasks . download . Download 
 @ @ - 289 , 32 + 290 , 9 @ @ project ( ' : forge ' ) { 
 ' java3d : vecmath ' 
 ] 
 def mojang = [ ] 
 - 
 - project . configurations . compileClasspath . resolvedConfiguration . resolvedArtifacts . each { 
 - def art = [ 
 - group : it . moduleVersion . id . group , 
 - name : it . moduleVersion . id . name , 
 - version : it . moduleVersion . id . version , 
 - classifier : it . classifier , 
 - extension : it . extension , 
 - file : it . file 
 - ] 
 - def key = art . group + ' : ' + art . name 
 + def artifacts = getArtifacts ( project , project . configurations . compileClasspath ) 
 + artifacts . each { key , lib - > 
 if ( forge . contains ( key ) | | mojang . contains ( key ) ) { 
 - def url = forge . contains ( key ) ? " https : / / files . minecraftforge . net / maven / " : " https : / / libraries . minecraft . net / " 
 - def path = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / $ { art . name } - $ { art . version } " 
 - if ( art . classifier ! = null ) 
 - path + = " - $ { art . classifier } " 
 - path + = " . $ { art . extension } " 
 - def lib = [ 
 - name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , 
 - downloads : [ 
 - path : path , 
 - url : url + path , 
 - sha1 : sha1 ( art . file ) , 
 - size : art . file . length ( ) 
 - ] 
 - ] 
 json . libraries . add ( lib ) 
 } 
 } 
 @ @ - 325 , 21 + 303 , 87 @ @ project ( ' : forge ' ) { 
 
 task installerJson ( ) { 
 ext { 
 - output = file ( ' build / libs / installer . json ' ) 
 + output = file ( ' build / libs / install _ profile . json ' ) 
 } 
 dependsOn launcherJson 
 inputs . file launcherJson . output 
 outputs . file output 
 doLast { 
 + def idx = project . version . indexOf ( ' - ' ) 
 def json = [ 
 - install : [ 
 - _ comment _ : launcherJson . comment , 
 - profileName : project . name , 
 - version : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , 
 - json : ' / version . json ' , 
 - logo : ' / big _ logo . png ' 
 + _ comment _ : launcherJson . comment , 
 + profile : project . name , 
 + version : project . version . substring ( 0 , idx ) + " - $ { project . name } " + project . version . substring ( idx ) , 
 + json : ' / version . json ' , 
 + path : " $ { project . group } : $ { project . name } : $ { project . version } " , 
 + logo : ' / big _ logo . png ' , 
 + minecraft : patcher . mcVersion , 
 + welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , 
 + processors : [ ] , 
 + data : [ 
 + MAPPINGS : [ 
 + client : ' / data / joined . tsrg ' , 
 + server : ' / data / joined . tsrg ' 
 + ] , 
 + BINPATCH : [ 
 + client : ' / data / client . lzma ' , 
 + server : ' / data / server . lzma ' 
 + ] , 
 + MC _ SLIM : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } : slim ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } : slim ] " 
 + ] , 
 + MC _ DATA : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } : data ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } : data ] " 
 + ] , 
 + MC _ EXTRA : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " 
 + ] , 
 + PATCHED : [ 
 + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - patched ] " , 
 + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - patched ] " 
 + ] , 
 + REMAPPED : [ 
 + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - srg ] " , 
 + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - srg ] " 
 + ] 
 ] 
 ] 
 + def libs = [ : ] 
 + json . processors . add ( [ 
 + jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , 
 + args : [ 
 + ' - - input ' , ' { MINECRAFT _ JAR } ' , 
 + ' - - slim ' , " { MC _ SLIM } " , 
 + ' - - data ' , " { MC _ DATA } " , 
 + ' - - extra ' , " { MC _ EXTRA } " , 
 + ' - - srg ' , ' { MAPPINGS } ' 
 + ] 
 + ] ) 
 + json . processors . add ( [ 
 + jar : ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' ) , 
 + args : [ 
 + ' - - clean ' , ' { MC _ SLIM } ' , 
 + ' - - output ' , ' { PATCHED } ' , 
 + ' - - apply ' , ' { BINPATCH } ' 
 + ] 
 + ] ) 
 + json . processors . add ( [ 
 + jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , 
 + args : [ 
 + ' - - in - jar ' , ' { PATCHED } ' , 
 + ' - - out - jar ' , ' { REMAPPED } ' , 
 + ' - - srg - in ' , ' { MAPPINGS } ' 
 + ] 
 + ] ) 
 + 
 + json . libraries = libs . values ( ) 
 + 
 output . text = new JsonBuilder ( json ) . toPrettyString ( ) 
 } 
 } 
 @ @ - 556 , 12 + 600 , 90 @ @ def dateToIso8601 ( date ) { 
 def result = format . format ( date ) 
 return result [ 0 . . 21 ] + ' : ' + result [ 22 . . - 1 ] 
 } 
 + 
 def sha1 ( file ) { 
 - MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; 
 + MessageDigest md = MessageDigest . getInstance ( ' SHA - 1 ' ) 
 file . eachByte 4096 , { bytes , size - > 
 - md . update ( bytes , 0 , size ) ; 
 + md . update ( bytes , 0 , size ) 
 + } 
 + return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) 
 + } 
 + 
 + def artifactTree ( project , artifact ) { 
 + if ( ! project . ext . has ( ' tree _ resolver ' ) ) 
 + project . ext . tree _ resolver = 1 
 + def cfg = project . configurations . create ( ' tree _ resolver _ ' + project . ext . tree _ resolver + + ) 
 + def dep = project . dependencies . create ( artifact ) 
 + cfg . dependencies . add ( dep ) 
 + def files = cfg . resolve ( ) 
 + return getArtifacts ( project , cfg ) 
 + } 
 + 
 + def getArtifacts ( project , config ) { 
 + def ret = [ : ] 
 + config . resolvedConfiguration . resolvedArtifacts . each { 
 + def art = [ 
 + group : it . moduleVersion . id . group , 
 + name : it . moduleVersion . id . name , 
 + version : it . moduleVersion . id . version , 
 + classifier : it . classifier , 
 + extension : it . extension , 
 + file : it . file 
 + ] 
 + def key = art . group + ' : ' + art . name 
 + def folder = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / " 
 + def filename = " $ { art . name } - $ { art . version } " 
 + if ( art . classifier ! = null ) 
 + filename + = " - $ { art . classifier } " 
 + filename + = " . $ { art . extension } " 
 + def path = " $ { folder } $ { filename } " 
 + def url = " https : / / libraries . minecraft . net / $ { path } " 
 + if ( ! checkExists ( url ) ) { 
 + url = " https : / / files . minecraftforge . net / maven / $ { path } " 
 + / * 
 + project . logger . lifecycle ( " Artifact : $ { path } " ) 
 + def repo = project . file ( " build / dep _ repo / $ { folder } " ) 
 + repo . mkdirs ( ) 
 + copy { 
 + from art . file 
 + into folder 
 + rename { filename } 
 + } 
 + project . file ( " build / dep _ repo / $ { path } . sha1 " ) . text = sha1 ( it . file ) 
 + * / 
 + } 
 + ret [ key ] = [ 
 + name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , 
 + downloads : [ 
 + artifact : [ 
 + path : path , 
 + url : url , 
 + sha1 : sha1 ( art . file ) , 
 + size : art . file . length ( ) 
 + ] 
 + ] 
 + ] 
 + } 
 + return ret 
 + } 
 + 
 + def checkExists ( url ) { 
 + def code = new URL ( url ) . openConnection ( ) . with { 
 + requestMethod = ' HEAD ' 
 + connect ( ) 
 + responseCode 
 + } 
 + return code = = 200 
 + } 
 + 
 + def getClasspath ( project , libs , artifact ) { 
 + def ret = [ ] 
 + artifactTree ( project , artifact ) . each { key , lib - > 
 + libs [ lib . name ] = lib 
 + if ( lib . name ! = artifact ) 
 + ret . add ( lib . name ) 
 } 
 - return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) ; 
 + return ret 
 } 
 
 / / evaluationDependsOnChildren ( )
