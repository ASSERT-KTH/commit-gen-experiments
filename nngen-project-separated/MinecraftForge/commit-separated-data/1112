BLEU SCORE: 0.03089055318156698

TEST MSG: Try and improve performance of the registry by avoiding superType . cast .
GENERATED MSG: Fix ups from feedback .

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index 49c5911 . . 7f013bd 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 128 , 7 + 128 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { <nl> public void putObject ( Object objName , Object obj ) <nl> { <nl> String name = ( String ) objName ; <nl> - I thing = superType . cast ( obj ) ; <nl> + I thing = cast ( obj ) ; <nl> <nl> if ( name = = null ) throw new NullPointerException ( " Can ' t use a null - name for the registry . " ) ; <nl> if ( name . isEmpty ( ) ) throw new IllegalArgumentException ( " Can ' t use an empty name for the registry . " ) ; <nl> @ @ - 224 , 10 + 224 , 20 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { <nl> * / <nl> public I getRaw ( int id ) <nl> { <nl> - return superType . cast ( super . getObjectById ( id ) ) ; <nl> + return cast ( super . getObjectById ( id ) ) ; <nl> } <nl> <nl> / * * <nl> + * superType . cast appears to be expensive . Skip it for speed ? <nl> + * @ param obj <nl> + * @ return <nl> + * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + 	 private I cast ( Object obj ) <nl> + { <nl> + 	 return ( I ) ( obj ) ; <nl> + } <nl> + / * * <nl> * Get the object identified by the specified name . <nl> * <nl> * @ param name Block / Item name . <nl> @ @ - 235 , 7 + 245 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { <nl> * / <nl> public I getRaw ( String name ) <nl> { <nl> - I ret = superType . cast ( super . getObject ( name ) ) ; <nl> + I ret = cast ( super . getObject ( name ) ) ; <nl> <nl> if ( ret = = null ) / / no match , try aliases recursively <nl> { <nl> @ @ - 461 , 7 + 471 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { <nl> FMLLog . severe ( " The substitution of % s has already occured . You cannot duplicate substitutions " , nameToReplace ) ; <nl> throw new ExistingSubstitutionException ( nameToReplace , toReplace ) ; <nl> } <nl> - I replacement = superType . cast ( toReplace ) ; <nl> + I replacement = cast ( toReplace ) ; <nl> I original = getRaw ( nameToReplace ) ; <nl> if ( original = = null ) <nl> {
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index ec4af98 . . 49c5911 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 455 , 7 + 455 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { <nl> } <nl> } <nl> <nl> - public void addSubstitutionAlias ( String modId , String nameToReplace , Object toReplace ) throws ExistingSubstitutionException { <nl> + void addSubstitutionAlias ( String modId , String nameToReplace , Object toReplace ) throws ExistingSubstitutionException { <nl> if ( getPersistentSubstitutions ( ) . containsKey ( nameToReplace ) | | getPersistentSubstitutions ( ) . containsValue ( toReplace ) ) <nl> { <nl> FMLLog . severe ( " The substitution of % s has already occured . You cannot duplicate substitutions " , nameToReplace ) ; <nl> @ @ - 463 , 6 + 463 , 10 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { <nl> } <nl> I replacement = superType . cast ( toReplace ) ; <nl> I original = getRaw ( nameToReplace ) ; <nl> + if ( original = = null ) <nl> + { <nl> + throw new NullPointerException ( " The replacement target is not present . This won ' t work " ) ; <nl> + } <nl> if ( ! original . getClass ( ) . isAssignableFrom ( replacement . getClass ( ) ) ) <nl> { <nl> FMLLog . severe ( " The substitute % s for % s ( type % s ) is type incompatible . This won ' t work " , replacement . getClass ( ) . getName ( ) , nameToReplace , original . getClass ( ) . getName ( ) ) ; <nl> @ @ - 482 , 13 + 486 , 6 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { <nl> blockSubs . addAll ( activeSubstitutions . keySet ( ) ) ; <nl> } <nl> <nl> - @ Override <nl> - public int getIDForObject ( Object p _ 148757 _ 1 _ ) <nl> - { <nl> - <nl> - int id = super . getIDForObject ( p _ 148757 _ 1 _ ) ; <nl> - return id ; <nl> - } <nl> private BiMap < String , I > getPersistentSubstitutions ( ) <nl> { <nl> if ( persistentSubstitutions = = null )

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index 49c5911 . . 7f013bd 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 128 , 7 + 128 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { 
 public void putObject ( Object objName , Object obj ) 
 { 
 String name = ( String ) objName ; 
 - I thing = superType . cast ( obj ) ; 
 + I thing = cast ( obj ) ; 
 
 if ( name = = null ) throw new NullPointerException ( " Can ' t use a null - name for the registry . " ) ; 
 if ( name . isEmpty ( ) ) throw new IllegalArgumentException ( " Can ' t use an empty name for the registry . " ) ; 
 @ @ - 224 , 10 + 224 , 20 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { 
 * / 
 public I getRaw ( int id ) 
 { 
 - return superType . cast ( super . getObjectById ( id ) ) ; 
 + return cast ( super . getObjectById ( id ) ) ; 
 } 
 
 / * * 
 + * superType . cast appears to be expensive . Skip it for speed ? 
 + * @ param obj 
 + * @ return 
 + * / 
 + @ SuppressWarnings ( " unchecked " ) 
 + 	 private I cast ( Object obj ) 
 + { 
 + 	 return ( I ) ( obj ) ; 
 + } 
 + / * * 
 * Get the object identified by the specified name . 
 * 
 * @ param name Block / Item name . 
 @ @ - 235 , 7 + 245 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { 
 * / 
 public I getRaw ( String name ) 
 { 
 - I ret = superType . cast ( super . getObject ( name ) ) ; 
 + I ret = cast ( super . getObject ( name ) ) ; 
 
 if ( ret = = null ) / / no match , try aliases recursively 
 { 
 @ @ - 461 , 7 + 471 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { 
 FMLLog . severe ( " The substitution of % s has already occured . You cannot duplicate substitutions " , nameToReplace ) ; 
 throw new ExistingSubstitutionException ( nameToReplace , toReplace ) ; 
 } 
 - I replacement = superType . cast ( toReplace ) ; 
 + I replacement = cast ( toReplace ) ; 
 I original = getRaw ( nameToReplace ) ; 
 if ( original = = null ) 
 {

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index ec4af98 . . 49c5911 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 455 , 7 + 455 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { 
 } 
 } 
 
 - public void addSubstitutionAlias ( String modId , String nameToReplace , Object toReplace ) throws ExistingSubstitutionException { 
 + void addSubstitutionAlias ( String modId , String nameToReplace , Object toReplace ) throws ExistingSubstitutionException { 
 if ( getPersistentSubstitutions ( ) . containsKey ( nameToReplace ) | | getPersistentSubstitutions ( ) . containsValue ( toReplace ) ) 
 { 
 FMLLog . severe ( " The substitution of % s has already occured . You cannot duplicate substitutions " , nameToReplace ) ; 
 @ @ - 463 , 6 + 463 , 10 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { 
 } 
 I replacement = superType . cast ( toReplace ) ; 
 I original = getRaw ( nameToReplace ) ; 
 + if ( original = = null ) 
 + { 
 + throw new NullPointerException ( " The replacement target is not present . This won ' t work " ) ; 
 + } 
 if ( ! original . getClass ( ) . isAssignableFrom ( replacement . getClass ( ) ) ) 
 { 
 FMLLog . severe ( " The substitute % s for % s ( type % s ) is type incompatible . This won ' t work " , replacement . getClass ( ) . getName ( ) , nameToReplace , original . getClass ( ) . getName ( ) ) ; 
 @ @ - 482 , 13 + 486 , 6 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespaced { 
 blockSubs . addAll ( activeSubstitutions . keySet ( ) ) ; 
 } 
 
 - @ Override 
 - public int getIDForObject ( Object p _ 148757 _ 1 _ ) 
 - { 
 - 
 - int id = super . getIDForObject ( p _ 148757 _ 1 _ ) ; 
 - return id ; 
 - } 
 private BiMap < String , I > getPersistentSubstitutions ( ) 
 { 
 if ( persistentSubstitutions = = null )
