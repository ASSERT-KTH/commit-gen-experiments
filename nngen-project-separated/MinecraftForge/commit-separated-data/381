BLEU SCORE: 0.017272237992167865

TEST MSG: Cleanup some output and move the Jar - In - Jar extractor to before any coremods / mods are loaded so .
GENERATED MSG: Fix up coremods with relaunch , add in a sample " coremod "

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index c7b1577 . . 807165f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 256 , 16 + 256 , 9 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> <nl> String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; <nl> - if ( " [ 1 . 8 . 8 ] " . equals ( mcVersionString ) ) mcVersionString = " [ 1 . 8 . 8 , 1 . 8 . 9 ] " ; / / MC 1 . 8 . 8 and 1 . 8 . 9 is forward SRG compatible so accept these versions by default . <nl> - if ( " [ 1 . 9 . 4 ] " . equals ( mcVersionString ) | | <nl> - " [ 1 . 9 , 1 . 9 . 4 ] " . equals ( mcVersionString ) | | <nl> - " [ 1 . 9 . 4 , 1 . 10 ) " . equals ( mcVersionString ) | | <nl> - " [ 1 . 10 ] " . equals ( mcVersionString ) ) <nl> - mcVersionString = " [ 1 . 9 . 4 , 1 . 10 . 2 ] " ; <nl> - if ( " [ 1 . 11 ] " . equals ( mcVersionString ) ) <nl> - mcVersionString = " [ 1 . 11 , 1 . 11 . 2 ] " ; <nl> if ( " [ 1 . 12 ] " . equals ( mcVersionString ) ) <nl> mcVersionString = " [ 1 . 12 , 1 . 12 . 1 ] " ; <nl> + <nl> if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) <nl> { <nl> minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> index 6308ef4 . . ab03b90 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> @ @ - 42 , 6 + 42 , 8 @ @ import java . util . jar . Attributes ; <nl> import java . util . jar . JarEntry ; <nl> import java . util . jar . JarFile ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> + <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . common . io . Files ; <nl> import net . minecraft . launchwrapper . ITweaker ; <nl> @ @ - 254 , 43 + 256 , 18 @ @ public class CoreModManager { <nl> <nl> } <nl> <nl> - private static void discoverCoreMods ( File mcDir , LaunchClassLoader classLoader ) <nl> + private static void findDerpMods ( LaunchClassLoader classLoader , File modDir , File modDirVer ) <nl> { <nl> - ModListHelper . parseModList ( mcDir ) ; <nl> - FMLLog . log . debug ( " Discovering coremods " ) ; <nl> - File coreMods = setupCoreModDir ( mcDir ) ; <nl> - FilenameFilter ff = new FilenameFilter ( ) { <nl> - @ Override <nl> - public boolean accept ( File dir , String name ) <nl> - { <nl> - return name . endsWith ( " . jar " ) ; <nl> - } <nl> - } ; <nl> - FilenameFilter derpfilter = new FilenameFilter ( ) { <nl> - @ Override <nl> - public boolean accept ( File dir , String name ) <nl> - { <nl> - return name . endsWith ( " . jar . zip " ) ; <nl> - } <nl> - } ; <nl> - File [ ] derplist = coreMods . listFiles ( derpfilter ) ; <nl> + File [ ] derplist = listFiles ( ( dir , name ) - > name . endsWith ( " . jar . zip " ) , modDir , modDirVer ) ; <nl> if ( derplist ! = null & & derplist . length > 0 ) <nl> { <nl> FMLLog . log . fatal ( " FML has detected several badly downloaded jar files , which have been named as zip files . You probably need to download them again , or they may not work properly " ) ; <nl> for ( File f : derplist ) <nl> - { <nl> FMLLog . log . fatal ( " Problem file : { } " , f . getName ( ) ) ; <nl> - } <nl> } <nl> - FileFilter derpdirfilter = new FileFilter ( ) { <nl> - @ Override <nl> - public boolean accept ( File pathname ) <nl> - { <nl> - return pathname . isDirectory ( ) & & new File ( pathname , " META - INF " ) . isDirectory ( ) ; <nl> - } <nl> <nl> - } ; <nl> - File [ ] derpdirlist = coreMods . listFiles ( derpdirfilter ) ; <nl> + FileFilter derpdirfilter = pathname - > pathname . isDirectory ( ) & & new File ( pathname , " META - INF " ) . isDirectory ( ) ; <nl> + File [ ] derpdirlist = listFiles ( derpdirfilter , modDir , modDirVer ) ; <nl> if ( derpdirlist ! = null & & derpdirlist . length > 0 ) <nl> { <nl> FMLLog . log . fatal ( " There appear to be jars extracted into the mods directory . This is VERY BAD and will almost NEVER WORK WELL " ) ; <nl> @ @ - 304 , 11 + 281 , 12 @ @ public class CoreModManager { <nl> <nl> RuntimeException re = new RuntimeException ( " Extracted mod jars found , loading will NOT continue " ) ; <nl> / / We ' re generating a crash report for the launcher to show to the user here <nl> + / / Does this actually work with the obfed names ? <nl> try <nl> { <nl> Class < ? > crashreportclass = classLoader . loadClass ( " b " ) ; <nl> Object crashreport = crashreportclass . getMethod ( " a " , Throwable . class , String . class ) . invoke ( null , re , " FML has discovered extracted jar files in the mods directory . \ nThis breaks mod loading functionality completely . \ nRemove the directories and replace with the jar files originally provided . " ) ; <nl> - File crashreportfile = new File ( new File ( coreMods . getParentFile ( ) , " crash - reports " ) , String . format ( " fml - crash - % 1 $ tY - % 1 $ tm - % 1 $ td _ % 1 $ tH . % 1 $ tM . % 1 $ tS . txt " , Calendar . getInstance ( ) ) ) ; <nl> + File crashreportfile = new File ( new File ( modDir . getParentFile ( ) , " crash - reports " ) , String . format ( " fml - crash - % 1 $ tY - % 1 $ tm - % 1 $ td _ % 1 $ tH . % 1 $ tM . % 1 $ tS . txt " , Calendar . getInstance ( ) ) ) ; <nl> crashreportclass . getMethod ( " a " , File . class ) . invoke ( crashreport , crashreportfile ) ; <nl> FMLLog . log . fatal ( " # @ ! @ # FML has crashed the game deliberately . Crash report saved to : # @ ! @ # { } " , crashreportfile . getAbsolutePath ( ) ) ; <nl> } catch ( Exception e ) <nl> @ @ - 318 , 13 + 296 , 51 @ @ public class CoreModManager { <nl> } <nl> throw re ; <nl> } <nl> - File [ ] coreModList = coreMods . listFiles ( ff ) ; <nl> - File versionedModDir = new File ( coreMods , FMLInjectionData . mccversion ) ; <nl> - if ( versionedModDir . isDirectory ( ) ) <nl> + } <nl> + <nl> + private static File [ ] listFiles ( FilenameFilter filter , File . . . dirs ) <nl> + { <nl> + File [ ] ret = null ; <nl> + for ( File dir : dirs ) <nl> + { <nl> + if ( ! dir . isDirectory ( ) | | ! dir . exists ( ) ) <nl> + continue ; <nl> + if ( ret = = null ) <nl> + ret = dir . listFiles ( filter ) ; <nl> + else <nl> + ret = ObjectArrays . concat ( ret , dir . listFiles ( filter ) , File . class ) ; <nl> + } <nl> + return ret ; <nl> + } <nl> + private static File [ ] listFiles ( FileFilter filter , File . . . dirs ) <nl> + { <nl> + File [ ] ret = null ; <nl> + for ( File dir : dirs ) <nl> { <nl> - File [ ] versionedCoreMods = versionedModDir . listFiles ( ff ) ; <nl> - coreModList = ObjectArrays . concat ( coreModList , versionedCoreMods , File . class ) ; <nl> + if ( ! dir . isDirectory ( ) | | ! dir . exists ( ) ) <nl> + continue ; <nl> + if ( ret = = null ) <nl> + ret = dir . listFiles ( filter ) ; <nl> + else <nl> + ret = ObjectArrays . concat ( ret , dir . listFiles ( filter ) , File . class ) ; <nl> } <nl> + return ret ; <nl> + } <nl> + <nl> + private static void discoverCoreMods ( File mcDir , LaunchClassLoader classLoader ) <nl> + { <nl> + <nl> + File modsDir = setupCoreModDir ( mcDir ) ; <nl> + File modsDirVer = new File ( modsDir , FMLInjectionData . mccversion ) ; <nl> + <nl> + findDerpMods ( classLoader , modsDir , modsDirVer ) ; <nl> + <nl> + extractPackedJars ( modsDir , modsDirVer ) ; <nl> + <nl> + ModListHelper . parseModList ( mcDir ) ; <nl> + <nl> + FMLLog . log . debug ( " Discovering coremods " ) ; <nl> + File [ ] coreModList = listFiles ( ( dir , name ) - > name . endsWith ( " . jar " ) , modsDir , modsDirVer ) ; <nl> <nl> coreModList = ObjectArrays . concat ( coreModList , ModListHelper . additionalMods . values ( ) . toArray ( new File [ 0 ] ) , File . class ) ; <nl> <nl> @ @ - 371 , 7 + 387 , 6 @ @ public class CoreModManager { <nl> ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> continue ; <nl> } <nl> - ModListHelper . additionalMods . putAll ( extractContainedDepJars ( jar , coreMods , versionedModDir ) ) ; <nl> fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; <nl> if ( fmlCorePlugin = = null ) <nl> { <nl> @ @ - 387 , 17 + 402 , 7 @ @ public class CoreModManager { <nl> } <nl> finally <nl> { <nl> - if ( jar ! = null ) <nl> - { <nl> - try <nl> - { <nl> - jar . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - / / Noise <nl> - } <nl> - } <nl> + IOUtils . closeQuietly ( jar ) ; <nl> } <nl> / / Support things that are mod jars , but not FML mod jars <nl> try <nl> @ @ - 424 , 10 + 429 , 43 @ @ public class CoreModManager { <nl> } <nl> } <nl> <nl> - private static Map < String , File > extractContainedDepJars ( JarFile jar , File baseModsDir , File versionedModsDir ) throws IOException <nl> + private static void extractPackedJars ( File modsDir , File modsDirVer ) <nl> { <nl> - Map < String , File > result = Maps . newHashMap ( ) ; <nl> - if ( ! jar . getManifest ( ) . getMainAttributes ( ) . containsKey ( MODCONTAINSDEPS ) ) return result ; <nl> + for ( File dir : new File [ ] { modsDir , modsDirVer } ) <nl> + { <nl> + for ( File file : listFiles ( ( d , name ) - > name . endsWith ( " . jar " ) , dir ) ) <nl> + { <nl> + JarFile jar = null ; <nl> + Attributes mfAttributes ; <nl> + try <nl> + { <nl> + jar = new JarFile ( file ) ; <nl> + if ( jar . getManifest ( ) = = null ) <nl> + continue ; <nl> + <nl> + mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; <nl> + String modSide = mfAttributes . containsKey ( MODSIDE ) ? mfAttributes . getValue ( MODSIDE ) : " BOTH " ; <nl> + if ( ! ( " BOTH " . equals ( modSide ) | | FMLLaunchHandler . side . name ( ) . equals ( modSide ) ) ) <nl> + continue ; <nl> + <nl> + extractContainedDepJars ( jar , dir = = modsDir ? modsDir : modsDirVer , dir = = modsDir ? modsDirVer : modsDir ) ; <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> + FMLLog . log . error ( " Unable to read the jar file { } - ignoring " , file . getName ( ) , ioe ) ; <nl> + continue ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( jar ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void extractContainedDepJars ( JarFile jar , File . . . modsDirs ) throws IOException <nl> + { <nl> + if ( ! jar . getManifest ( ) . getMainAttributes ( ) . containsKey ( MODCONTAINSDEPS ) ) return ; <nl> <nl> String deps = jar . getManifest ( ) . getMainAttributes ( ) . getValue ( MODCONTAINSDEPS ) ; <nl> String [ ] depList = deps . split ( " " ) ; <nl> @ @ - 445 , 21 + 483 , 22 @ @ public class CoreModManager { <nl> FMLLog . log . error ( " Found invalid ContainsDeps declaration { } in { } " , dep , jar . getName ( ) ) ; <nl> continue ; <nl> } <nl> - File target = new File ( versionedModsDir , depEndName ) ; <nl> - File modTarget = new File ( baseModsDir , depEndName ) ; <nl> - if ( target . exists ( ) ) <nl> + <nl> + boolean exit = false ; <nl> + for ( File f : modsDirs ) <nl> { <nl> - FMLLog . log . debug ( " Found existing ContainsDep extracted to { } , skipping extraction " , target . getCanonicalPath ( ) ) ; <nl> - result . put ( dep , target ) ; <nl> - continue ; <nl> + File tmp = new File ( f , depEndName ) ; <nl> + if ( tmp . exists ( ) ) <nl> + { <nl> + FMLLog . log . debug ( " Found existing ContainsDep extracted to { } , skipping extraction " , tmp . getCanonicalPath ( ) ) ; <nl> + exit = true ; <nl> + break ; <nl> + } <nl> } <nl> - else if ( modTarget . exists ( ) ) <nl> - { <nl> - FMLLog . log . debug ( " Found ContainsDep in main mods directory at { } , skipping extraction " , modTarget . getCanonicalPath ( ) ) ; <nl> - result . put ( dep , modTarget ) ; <nl> + if ( exit ) <nl> continue ; <nl> - } <nl> <nl> + File target = new File ( modsDirs [ 0 ] , depEndName ) ; <nl> FMLLog . log . debug ( " Extracting ContainedDep { } from { } to { } " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; <nl> try <nl> { <nl> @ @ - 471 , 13 + 510 , 12 @ @ public class CoreModManager { <nl> ByteStreams . copy ( jarInputStream , targetOutputStream ) ; <nl> } <nl> FMLLog . log . debug ( " Extracted ContainedDep { } from { } to { } " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; <nl> - result . put ( dep , target ) ; <nl> } catch ( IOException e ) <nl> { <nl> FMLLog . log . error ( " An error occurred extracting dependency " , e ) ; <nl> } <nl> } <nl> - return result ; <nl> + return ; <nl> } <nl> <nl> private static Method ADDURL ; <nl> @ @ - 749 , 4 + 787 , 5 @ @ public class CoreModManager { <nl> builder . append ( " Contact their authors BEFORE contacting forge \ n \ n " ) ; <nl> } <nl> } <nl> + <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / FMLLaunchHandler . java b / src / main / java / net / minecraftforge / fml / relauncher / FMLLaunchHandler . java <nl> index c4b3983 . . 7771bc4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / FMLLaunchHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / FMLLaunchHandler . java <nl> @ @ - 88 , 8 + 88 , 11 @ @ public class FMLLaunchHandler <nl> FMLLog . log . info ( " Forge Mod Loader version { } . { } . { } . { } for Minecraft { } loading " , FMLInjectionData . major , FMLInjectionData . minor , <nl> FMLInjectionData . rev , FMLInjectionData . build , FMLInjectionData . mccversion ) ; <nl> FMLLog . log . info ( " Java is { } , version { } , running on { } : { } : { } , installed at { } " , System . getProperty ( " java . vm . name " ) , System . getProperty ( " java . version " ) , System . getProperty ( " os . name " ) , System . getProperty ( " os . arch " ) , System . getProperty ( " os . version " ) , System . getProperty ( " java . home " ) ) ; <nl> - FMLLog . log . debug ( " Java classpath at launch is { } " , System . getProperty ( " java . class . path " ) ) ; <nl> - FMLLog . log . debug ( " Java library path at launch is { } " , System . getProperty ( " java . library . path " ) ) ; <nl> + FMLLog . log . debug ( " Java classpath at launch is : " ) ; <nl> + for ( String path : System . getProperty ( " java . class . path " ) . split ( File . pathSeparator ) ) <nl> + FMLLog . log . debug ( " { } " , path ) ; <nl> + FMLLog . log . debug ( " Java library path at launch is : " ) ; <nl> + for ( String path : System . getProperty ( " java . library . path " ) . split ( File . pathSeparator ) ) <nl> <nl> try <nl> {
NEAREST DIFF (one line): diff - - git a / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java b / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java <nl> index 3ed09f9 . . 9ee3c58 100644 <nl> - - - a / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java <nl> + + + b / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import java . io . File ; <nl> import java . io . FileInputStream ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . FileOutputStream ; <nl> + import java . io . FilenameFilter ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . math . BigInteger ; <nl> @ @ - 20 , 7 + 21 , 11 @ @ import java . nio . channels . FileChannel . MapMode ; <nl> import java . security . MessageDigest ; <nl> import java . security . NoSuchAlgorithmException ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . List ; <nl> + import java . util . jar . Attributes ; <nl> + import java . util . jar . JarEntry ; <nl> + import java . util . jar . JarFile ; <nl> import java . util . logging . Level ; <nl> import java . util . logging . Logger ; <nl> <nl> @ @ - 31 , 14 + 36 , 14 @ @ import cpw . mods . fml . common . discovery . ModCandidate ; <nl> <nl> public class RelaunchLibraryManager <nl> { <nl> - private static String [ ] plugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; <nl> + private static String [ ] rootPlugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; <nl> private static final String HEXES = " 0123456789abcdef " ; <nl> private static List < String > loadedLibraries = new ArrayList < String > ( ) ; <nl> public static void handleLaunch ( File mcDir , RelaunchClassLoader actualClassLoader ) <nl> { <nl> List < IFMLLoadingPlugin > loadPlugins = new ArrayList < IFMLLoadingPlugin > ( ) ; <nl> List < ILibrarySet > libraries = new ArrayList < ILibrarySet > ( ) ; <nl> - for ( String s : plugins ) <nl> + for ( String s : rootPlugins ) <nl> { <nl> try <nl> { <nl> @ @ - 60 , 6 + 65 , 9 @ @ public class RelaunchLibraryManager <nl> throw new RuntimeException ( " A fatal error has occured - no valid fml load plugin was found - this is a completely corrupt FML installation . " ) ; <nl> } <nl> <nl> + / / Now that we have the root plugins loaded - lets see what else might be around <nl> + discoverCoreMods ( mcDir , actualClassLoader , loadPlugins , libraries ) ; <nl> + <nl> List < Throwable > caughtErrors = new ArrayList < Throwable > ( ) ; <nl> try <nl> { <nl> @ @ - 172 , 9 + 180 , 12 @ @ public class RelaunchLibraryManager <nl> <nl> for ( IFMLLoadingPlugin plug : loadPlugins ) <nl> { <nl> - for ( String xformClass : plug . getASMTransformerClass ( ) ) <nl> + if ( plug . getASMTransformerClass ( ) ! = null ) <nl> { <nl> - actualClassLoader . registerTransformer ( xformClass ) ; <nl> + for ( String xformClass : plug . getASMTransformerClass ( ) ) <nl> + { <nl> + actualClassLoader . registerTransformer ( xformClass ) ; <nl> + } <nl> } <nl> } <nl> try <nl> @ @ - 188 , 6 + 199 , 102 @ @ public class RelaunchLibraryManager <nl> } <nl> } <nl> <nl> + private static void discoverCoreMods ( File mcDir , RelaunchClassLoader classLoader , List < IFMLLoadingPlugin > loadPlugins , List < ILibrarySet > libraries ) <nl> + { <nl> + File coreMods = setupCoreModDir ( mcDir ) ; <nl> + FilenameFilter ff = new FilenameFilter ( ) <nl> + { <nl> + @ Override <nl> + public boolean accept ( File dir , String name ) <nl> + { <nl> + return name . endsWith ( " . jar " ) ; <nl> + } <nl> + } ; <nl> + File [ ] coreModList = coreMods . listFiles ( ff ) ; <nl> + Arrays . sort ( coreModList ) ; <nl> + <nl> + for ( File coreMod : coreModList ) <nl> + { <nl> + FMLLog . fine ( " Found a candidate coremod % s " , coreMod . getName ( ) ) ; <nl> + JarFile jar ; <nl> + Attributes mfAttributes ; <nl> + try <nl> + { <nl> + jar = new JarFile ( coreMod ) ; <nl> + mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , ioe , " Unable to read the coremod jar file % s - ignoring " , coreMod . getName ( ) ) ; <nl> + continue ; <nl> + } <nl> + <nl> + String fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; <nl> + if ( fmlCorePlugin = = null ) <nl> + { <nl> + FMLLog . severe ( " The coremod % s does not contain a valid jar manifest - it will be ignored " , coreMod . getName ( ) ) ; <nl> + continue ; <nl> + } <nl> + <nl> + / / String className = fmlCorePlugin . replace ( ' . ' , ' / ' ) . concat ( " . class " ) ; <nl> + / / JarEntry ent = jar . getJarEntry ( className ) ; <nl> + / / if ( ent = = null ) <nl> + / / { <nl> + / / FMLLog . severe ( " The coremod % s specified % s as it ' s loading class but it does not include it - it will be ignored " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + / / continue ; <nl> + / / } <nl> + / / try <nl> + / / { <nl> + / / Class < ? > coreModClass = Class . forName ( fmlCorePlugin , false , classLoader ) ; <nl> + / / FMLLog . severe ( " The coremods % s specified a class % s that is already present in the classpath - it will be ignored " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + / / continue ; <nl> + / / } <nl> + / / catch ( ClassNotFoundException cnfe ) <nl> + / / { <nl> + / / / / didn ' t find it , good <nl> + / / } <nl> + try <nl> + { <nl> + classLoader . addURL ( coreMod . toURI ( ) . toURL ( ) ) ; <nl> + } <nl> + catch ( MalformedURLException e ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , e , " Unable to convert file into a URL . weird " ) ; <nl> + continue ; <nl> + } <nl> + try <nl> + { <nl> + Class < ? > coreModClass = Class . forName ( fmlCorePlugin , true , classLoader ) ; <nl> + IFMLLoadingPlugin plugin = ( IFMLLoadingPlugin ) coreModClass . newInstance ( ) ; <nl> + loadPlugins . add ( plugin ) ; <nl> + if ( plugin . getLibraryRequestClass ( ) ! = null ) <nl> + { <nl> + for ( String libName : plugin . getLibraryRequestClass ( ) ) <nl> + { <nl> + libraries . add ( ( ILibrarySet ) Class . forName ( libName , true , classLoader ) . newInstance ( ) ) ; <nl> + } <nl> + } <nl> + FMLLog . fine ( " Loaded coremod % s " , coreMod . getName ( ) ) ; <nl> + } <nl> + catch ( ClassNotFoundException cnfe ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , cnfe , " Coremod % s : Unable to class load the plugin % s " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + } <nl> + catch ( ClassCastException cce ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , cce , " Coremod % s : The plugin % s is not an implementor of IFMLLoadingPlugin " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + } <nl> + catch ( InstantiationException ie ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , ie , " Coremod % s : The plugin class % s was not instantiable " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + } <nl> + catch ( IllegalAccessException iae ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , iae , " Coremod % s : The plugin class % s was not accessible " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> / * * <nl> * @ param mcDir <nl> * @ return <nl> @ @ - 214 , 6 + 321 , 32 @ @ public class RelaunchLibraryManager <nl> return libDir ; <nl> } <nl> <nl> + / * * <nl> + * @ param mcDir <nl> + * @ return <nl> + * / <nl> + private static File setupCoreModDir ( File mcDir ) <nl> + { <nl> + File coreModDir = new File ( mcDir , " coremods " ) ; <nl> + try <nl> + { <nl> + coreModDir = coreModDir . getCanonicalFile ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Unable to canonicalize the coremod dir at % s " , mcDir . getName ( ) ) , e ) ; <nl> + } <nl> + if ( ! coreModDir . exists ( ) ) <nl> + { <nl> + coreModDir . mkdir ( ) ; <nl> + } <nl> + else if ( coreModDir . exists ( ) & & ! coreModDir . isDirectory ( ) ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Found a coremod file in % s that ' s not a directory " , mcDir . getName ( ) ) ) ; <nl> + } <nl> + return coreModDir ; <nl> + } <nl> + <nl> private static String generateChecksum ( File file ) <nl> { <nl> try <nl> diff - - git a / fml / eclipse / coremodtest / . classpath b / fml / eclipse / coremodtest / . classpath <nl> new file mode 100644 <nl> index 0000000 . . 294bff6 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / . classpath <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < classpath > <nl> + 	 < classpathentry kind = " src " path = " src " / > <nl> + 	 < classpathentry kind = " con " path = " org . eclipse . jdt . launching . JRE _ CONTAINER / org . eclipse . jdt . internal . debug . ui . launcher . StandardVMType / JavaSE - 1 . 6 " / > <nl> + 	 < classpathentry combineaccessrules = " false " kind = " src " path = " / FML - Client " / > <nl> + 	 < classpathentry kind = " output " path = " bin " / > <nl> + < / classpath > <nl> diff - - git a / fml / eclipse / coremodtest / . project b / fml / eclipse / coremodtest / . project <nl> new file mode 100644 <nl> index 0000000 . . bda0433 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / . project <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < projectDescription > <nl> + 	 < name > coremodtest < / name > <nl> + 	 < comment > < / comment > <nl> + 	 < projects > <nl> + 	 < / projects > <nl> + 	 < buildSpec > <nl> + 	 	 < buildCommand > <nl> + 	 	 	 < name > org . eclipse . jdt . core . javabuilder < / name > <nl> + 	 	 	 < arguments > <nl> + 	 	 	 < / arguments > <nl> + 	 	 < / buildCommand > <nl> + 	 < / buildSpec > <nl> + 	 < natures > <nl> + 	 	 < nature > org . eclipse . jdt . core . javanature < / nature > <nl> + 	 < / natures > <nl> + < / projectDescription > <nl> diff - - git a / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs b / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs <nl> new file mode 100644 <nl> index 0000000 . . 8000cd6 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + eclipse . preferences . version = 1 <nl> + org . eclipse . jdt . core . compiler . codegen . inlineJsrBytecode = enabled <nl> + org . eclipse . jdt . core . compiler . codegen . targetPlatform = 1 . 6 <nl> + org . eclipse . jdt . core . compiler . codegen . unusedLocal = preserve <nl> + org . eclipse . jdt . core . compiler . compliance = 1 . 6 <nl> + org . eclipse . jdt . core . compiler . debug . lineNumber = generate <nl> + org . eclipse . jdt . core . compiler . debug . localVariable = generate <nl> + org . eclipse . jdt . core . compiler . debug . sourceFile = generate <nl> + org . eclipse . jdt . core . compiler . problem . assertIdentifier = error <nl> + org . eclipse . jdt . core . compiler . problem . enumIdentifier = error <nl> + org . eclipse . jdt . core . compiler . source = 1 . 6 <nl> diff - - git a / fml / eclipse / coremodtest / manifest . mf b / fml / eclipse / coremodtest / manifest . mf <nl> new file mode 100644 <nl> index 0000000 . . eda1ba3 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / manifest . mf <nl> @ @ - 0 , 0 + 1 , 3 @ @ <nl> + Manifest - Version : 1 . 0 <nl> + FMLCorePlugin : cpw . mods . testcoremod . FMLLoadPlugin <nl> + <nl> diff - - git a / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java b / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java <nl> new file mode 100644 <nl> index 0000000 . . 44094f0 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package cpw . mods . testcoremod ; <nl> + <nl> + import cpw . mods . fml . relauncher . IFMLLoadingPlugin ; <nl> + <nl> + public class FMLLoadPlugin implements IFMLLoadingPlugin <nl> + { <nl> + @ Override <nl> + public String [ ] getLibraryRequestClass ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public String [ ] getASMTransformerClass ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index c7b1577 . . 807165f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 256 , 16 + 256 , 9 @ @ public class FMLModContainer implements ModContainer 
 } 
 
 String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; 
 - if ( " [ 1 . 8 . 8 ] " . equals ( mcVersionString ) ) mcVersionString = " [ 1 . 8 . 8 , 1 . 8 . 9 ] " ; / / MC 1 . 8 . 8 and 1 . 8 . 9 is forward SRG compatible so accept these versions by default . 
 - if ( " [ 1 . 9 . 4 ] " . equals ( mcVersionString ) | | 
 - " [ 1 . 9 , 1 . 9 . 4 ] " . equals ( mcVersionString ) | | 
 - " [ 1 . 9 . 4 , 1 . 10 ) " . equals ( mcVersionString ) | | 
 - " [ 1 . 10 ] " . equals ( mcVersionString ) ) 
 - mcVersionString = " [ 1 . 9 . 4 , 1 . 10 . 2 ] " ; 
 - if ( " [ 1 . 11 ] " . equals ( mcVersionString ) ) 
 - mcVersionString = " [ 1 . 11 , 1 . 11 . 2 ] " ; 
 if ( " [ 1 . 12 ] " . equals ( mcVersionString ) ) 
 mcVersionString = " [ 1 . 12 , 1 . 12 . 1 ] " ; 
 + 
 if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) 
 { 
 minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 index 6308ef4 . . ab03b90 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 @ @ - 42 , 6 + 42 , 8 @ @ import java . util . jar . Attributes ; 
 import java . util . jar . JarEntry ; 
 import java . util . jar . JarFile ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 + 
 import com . google . common . io . ByteStreams ; 
 import com . google . common . io . Files ; 
 import net . minecraft . launchwrapper . ITweaker ; 
 @ @ - 254 , 43 + 256 , 18 @ @ public class CoreModManager { 
 
 } 
 
 - private static void discoverCoreMods ( File mcDir , LaunchClassLoader classLoader ) 
 + private static void findDerpMods ( LaunchClassLoader classLoader , File modDir , File modDirVer ) 
 { 
 - ModListHelper . parseModList ( mcDir ) ; 
 - FMLLog . log . debug ( " Discovering coremods " ) ; 
 - File coreMods = setupCoreModDir ( mcDir ) ; 
 - FilenameFilter ff = new FilenameFilter ( ) { 
 - @ Override 
 - public boolean accept ( File dir , String name ) 
 - { 
 - return name . endsWith ( " . jar " ) ; 
 - } 
 - } ; 
 - FilenameFilter derpfilter = new FilenameFilter ( ) { 
 - @ Override 
 - public boolean accept ( File dir , String name ) 
 - { 
 - return name . endsWith ( " . jar . zip " ) ; 
 - } 
 - } ; 
 - File [ ] derplist = coreMods . listFiles ( derpfilter ) ; 
 + File [ ] derplist = listFiles ( ( dir , name ) - > name . endsWith ( " . jar . zip " ) , modDir , modDirVer ) ; 
 if ( derplist ! = null & & derplist . length > 0 ) 
 { 
 FMLLog . log . fatal ( " FML has detected several badly downloaded jar files , which have been named as zip files . You probably need to download them again , or they may not work properly " ) ; 
 for ( File f : derplist ) 
 - { 
 FMLLog . log . fatal ( " Problem file : { } " , f . getName ( ) ) ; 
 - } 
 } 
 - FileFilter derpdirfilter = new FileFilter ( ) { 
 - @ Override 
 - public boolean accept ( File pathname ) 
 - { 
 - return pathname . isDirectory ( ) & & new File ( pathname , " META - INF " ) . isDirectory ( ) ; 
 - } 
 
 - } ; 
 - File [ ] derpdirlist = coreMods . listFiles ( derpdirfilter ) ; 
 + FileFilter derpdirfilter = pathname - > pathname . isDirectory ( ) & & new File ( pathname , " META - INF " ) . isDirectory ( ) ; 
 + File [ ] derpdirlist = listFiles ( derpdirfilter , modDir , modDirVer ) ; 
 if ( derpdirlist ! = null & & derpdirlist . length > 0 ) 
 { 
 FMLLog . log . fatal ( " There appear to be jars extracted into the mods directory . This is VERY BAD and will almost NEVER WORK WELL " ) ; 
 @ @ - 304 , 11 + 281 , 12 @ @ public class CoreModManager { 
 
 RuntimeException re = new RuntimeException ( " Extracted mod jars found , loading will NOT continue " ) ; 
 / / We ' re generating a crash report for the launcher to show to the user here 
 + / / Does this actually work with the obfed names ? 
 try 
 { 
 Class < ? > crashreportclass = classLoader . loadClass ( " b " ) ; 
 Object crashreport = crashreportclass . getMethod ( " a " , Throwable . class , String . class ) . invoke ( null , re , " FML has discovered extracted jar files in the mods directory . \ nThis breaks mod loading functionality completely . \ nRemove the directories and replace with the jar files originally provided . " ) ; 
 - File crashreportfile = new File ( new File ( coreMods . getParentFile ( ) , " crash - reports " ) , String . format ( " fml - crash - % 1 $ tY - % 1 $ tm - % 1 $ td _ % 1 $ tH . % 1 $ tM . % 1 $ tS . txt " , Calendar . getInstance ( ) ) ) ; 
 + File crashreportfile = new File ( new File ( modDir . getParentFile ( ) , " crash - reports " ) , String . format ( " fml - crash - % 1 $ tY - % 1 $ tm - % 1 $ td _ % 1 $ tH . % 1 $ tM . % 1 $ tS . txt " , Calendar . getInstance ( ) ) ) ; 
 crashreportclass . getMethod ( " a " , File . class ) . invoke ( crashreport , crashreportfile ) ; 
 FMLLog . log . fatal ( " # @ ! @ # FML has crashed the game deliberately . Crash report saved to : # @ ! @ # { } " , crashreportfile . getAbsolutePath ( ) ) ; 
 } catch ( Exception e ) 
 @ @ - 318 , 13 + 296 , 51 @ @ public class CoreModManager { 
 } 
 throw re ; 
 } 
 - File [ ] coreModList = coreMods . listFiles ( ff ) ; 
 - File versionedModDir = new File ( coreMods , FMLInjectionData . mccversion ) ; 
 - if ( versionedModDir . isDirectory ( ) ) 
 + } 
 + 
 + private static File [ ] listFiles ( FilenameFilter filter , File . . . dirs ) 
 + { 
 + File [ ] ret = null ; 
 + for ( File dir : dirs ) 
 + { 
 + if ( ! dir . isDirectory ( ) | | ! dir . exists ( ) ) 
 + continue ; 
 + if ( ret = = null ) 
 + ret = dir . listFiles ( filter ) ; 
 + else 
 + ret = ObjectArrays . concat ( ret , dir . listFiles ( filter ) , File . class ) ; 
 + } 
 + return ret ; 
 + } 
 + private static File [ ] listFiles ( FileFilter filter , File . . . dirs ) 
 + { 
 + File [ ] ret = null ; 
 + for ( File dir : dirs ) 
 { 
 - File [ ] versionedCoreMods = versionedModDir . listFiles ( ff ) ; 
 - coreModList = ObjectArrays . concat ( coreModList , versionedCoreMods , File . class ) ; 
 + if ( ! dir . isDirectory ( ) | | ! dir . exists ( ) ) 
 + continue ; 
 + if ( ret = = null ) 
 + ret = dir . listFiles ( filter ) ; 
 + else 
 + ret = ObjectArrays . concat ( ret , dir . listFiles ( filter ) , File . class ) ; 
 } 
 + return ret ; 
 + } 
 + 
 + private static void discoverCoreMods ( File mcDir , LaunchClassLoader classLoader ) 
 + { 
 + 
 + File modsDir = setupCoreModDir ( mcDir ) ; 
 + File modsDirVer = new File ( modsDir , FMLInjectionData . mccversion ) ; 
 + 
 + findDerpMods ( classLoader , modsDir , modsDirVer ) ; 
 + 
 + extractPackedJars ( modsDir , modsDirVer ) ; 
 + 
 + ModListHelper . parseModList ( mcDir ) ; 
 + 
 + FMLLog . log . debug ( " Discovering coremods " ) ; 
 + File [ ] coreModList = listFiles ( ( dir , name ) - > name . endsWith ( " . jar " ) , modsDir , modsDirVer ) ; 
 
 coreModList = ObjectArrays . concat ( coreModList , ModListHelper . additionalMods . values ( ) . toArray ( new File [ 0 ] ) , File . class ) ; 
 
 @ @ - 371 , 7 + 387 , 6 @ @ public class CoreModManager { 
 ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 continue ; 
 } 
 - ModListHelper . additionalMods . putAll ( extractContainedDepJars ( jar , coreMods , versionedModDir ) ) ; 
 fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; 
 if ( fmlCorePlugin = = null ) 
 { 
 @ @ - 387 , 17 + 402 , 7 @ @ public class CoreModManager { 
 } 
 finally 
 { 
 - if ( jar ! = null ) 
 - { 
 - try 
 - { 
 - jar . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - / / Noise 
 - } 
 - } 
 + IOUtils . closeQuietly ( jar ) ; 
 } 
 / / Support things that are mod jars , but not FML mod jars 
 try 
 @ @ - 424 , 10 + 429 , 43 @ @ public class CoreModManager { 
 } 
 } 
 
 - private static Map < String , File > extractContainedDepJars ( JarFile jar , File baseModsDir , File versionedModsDir ) throws IOException 
 + private static void extractPackedJars ( File modsDir , File modsDirVer ) 
 { 
 - Map < String , File > result = Maps . newHashMap ( ) ; 
 - if ( ! jar . getManifest ( ) . getMainAttributes ( ) . containsKey ( MODCONTAINSDEPS ) ) return result ; 
 + for ( File dir : new File [ ] { modsDir , modsDirVer } ) 
 + { 
 + for ( File file : listFiles ( ( d , name ) - > name . endsWith ( " . jar " ) , dir ) ) 
 + { 
 + JarFile jar = null ; 
 + Attributes mfAttributes ; 
 + try 
 + { 
 + jar = new JarFile ( file ) ; 
 + if ( jar . getManifest ( ) = = null ) 
 + continue ; 
 + 
 + mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; 
 + String modSide = mfAttributes . containsKey ( MODSIDE ) ? mfAttributes . getValue ( MODSIDE ) : " BOTH " ; 
 + if ( ! ( " BOTH " . equals ( modSide ) | | FMLLaunchHandler . side . name ( ) . equals ( modSide ) ) ) 
 + continue ; 
 + 
 + extractContainedDepJars ( jar , dir = = modsDir ? modsDir : modsDirVer , dir = = modsDir ? modsDirVer : modsDir ) ; 
 + } 
 + catch ( IOException ioe ) 
 + { 
 + FMLLog . log . error ( " Unable to read the jar file { } - ignoring " , file . getName ( ) , ioe ) ; 
 + continue ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( jar ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + private static void extractContainedDepJars ( JarFile jar , File . . . modsDirs ) throws IOException 
 + { 
 + if ( ! jar . getManifest ( ) . getMainAttributes ( ) . containsKey ( MODCONTAINSDEPS ) ) return ; 
 
 String deps = jar . getManifest ( ) . getMainAttributes ( ) . getValue ( MODCONTAINSDEPS ) ; 
 String [ ] depList = deps . split ( " " ) ; 
 @ @ - 445 , 21 + 483 , 22 @ @ public class CoreModManager { 
 FMLLog . log . error ( " Found invalid ContainsDeps declaration { } in { } " , dep , jar . getName ( ) ) ; 
 continue ; 
 } 
 - File target = new File ( versionedModsDir , depEndName ) ; 
 - File modTarget = new File ( baseModsDir , depEndName ) ; 
 - if ( target . exists ( ) ) 
 + 
 + boolean exit = false ; 
 + for ( File f : modsDirs ) 
 { 
 - FMLLog . log . debug ( " Found existing ContainsDep extracted to { } , skipping extraction " , target . getCanonicalPath ( ) ) ; 
 - result . put ( dep , target ) ; 
 - continue ; 
 + File tmp = new File ( f , depEndName ) ; 
 + if ( tmp . exists ( ) ) 
 + { 
 + FMLLog . log . debug ( " Found existing ContainsDep extracted to { } , skipping extraction " , tmp . getCanonicalPath ( ) ) ; 
 + exit = true ; 
 + break ; 
 + } 
 } 
 - else if ( modTarget . exists ( ) ) 
 - { 
 - FMLLog . log . debug ( " Found ContainsDep in main mods directory at { } , skipping extraction " , modTarget . getCanonicalPath ( ) ) ; 
 - result . put ( dep , modTarget ) ; 
 + if ( exit ) 
 continue ; 
 - } 
 
 + File target = new File ( modsDirs [ 0 ] , depEndName ) ; 
 FMLLog . log . debug ( " Extracting ContainedDep { } from { } to { } " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; 
 try 
 { 
 @ @ - 471 , 13 + 510 , 12 @ @ public class CoreModManager { 
 ByteStreams . copy ( jarInputStream , targetOutputStream ) ; 
 } 
 FMLLog . log . debug ( " Extracted ContainedDep { } from { } to { } " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; 
 - result . put ( dep , target ) ; 
 } catch ( IOException e ) 
 { 
 FMLLog . log . error ( " An error occurred extracting dependency " , e ) ; 
 } 
 } 
 - return result ; 
 + return ; 
 } 
 
 private static Method ADDURL ; 
 @ @ - 749 , 4 + 787 , 5 @ @ public class CoreModManager { 
 builder . append ( " Contact their authors BEFORE contacting forge \ n \ n " ) ; 
 } 
 } 
 + 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / FMLLaunchHandler . java b / src / main / java / net / minecraftforge / fml / relauncher / FMLLaunchHandler . java 
 index c4b3983 . . 7771bc4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / FMLLaunchHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / FMLLaunchHandler . java 
 @ @ - 88 , 8 + 88 , 11 @ @ public class FMLLaunchHandler 
 FMLLog . log . info ( " Forge Mod Loader version { } . { } . { } . { } for Minecraft { } loading " , FMLInjectionData . major , FMLInjectionData . minor , 
 FMLInjectionData . rev , FMLInjectionData . build , FMLInjectionData . mccversion ) ; 
 FMLLog . log . info ( " Java is { } , version { } , running on { } : { } : { } , installed at { } " , System . getProperty ( " java . vm . name " ) , System . getProperty ( " java . version " ) , System . getProperty ( " os . name " ) , System . getProperty ( " os . arch " ) , System . getProperty ( " os . version " ) , System . getProperty ( " java . home " ) ) ; 
 - FMLLog . log . debug ( " Java classpath at launch is { } " , System . getProperty ( " java . class . path " ) ) ; 
 - FMLLog . log . debug ( " Java library path at launch is { } " , System . getProperty ( " java . library . path " ) ) ; 
 + FMLLog . log . debug ( " Java classpath at launch is : " ) ; 
 + for ( String path : System . getProperty ( " java . class . path " ) . split ( File . pathSeparator ) ) 
 + FMLLog . log . debug ( " { } " , path ) ; 
 + FMLLog . log . debug ( " Java library path at launch is : " ) ; 
 + for ( String path : System . getProperty ( " java . library . path " ) . split ( File . pathSeparator ) ) 
 
 try 
 {

NEAREST DIFF:
diff - - git a / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java b / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java 
 index 3ed09f9 . . 9ee3c58 100644 
 - - - a / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java 
 + + + b / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . io . File ; 
 import java . io . FileInputStream ; 
 import java . io . FileNotFoundException ; 
 import java . io . FileOutputStream ; 
 + import java . io . FilenameFilter ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . math . BigInteger ; 
 @ @ - 20 , 7 + 21 , 11 @ @ import java . nio . channels . FileChannel . MapMode ; 
 import java . security . MessageDigest ; 
 import java . security . NoSuchAlgorithmException ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . List ; 
 + import java . util . jar . Attributes ; 
 + import java . util . jar . JarEntry ; 
 + import java . util . jar . JarFile ; 
 import java . util . logging . Level ; 
 import java . util . logging . Logger ; 
 
 @ @ - 31 , 14 + 36 , 14 @ @ import cpw . mods . fml . common . discovery . ModCandidate ; 
 
 public class RelaunchLibraryManager 
 { 
 - private static String [ ] plugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; 
 + private static String [ ] rootPlugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; 
 private static final String HEXES = " 0123456789abcdef " ; 
 private static List < String > loadedLibraries = new ArrayList < String > ( ) ; 
 public static void handleLaunch ( File mcDir , RelaunchClassLoader actualClassLoader ) 
 { 
 List < IFMLLoadingPlugin > loadPlugins = new ArrayList < IFMLLoadingPlugin > ( ) ; 
 List < ILibrarySet > libraries = new ArrayList < ILibrarySet > ( ) ; 
 - for ( String s : plugins ) 
 + for ( String s : rootPlugins ) 
 { 
 try 
 { 
 @ @ - 60 , 6 + 65 , 9 @ @ public class RelaunchLibraryManager 
 throw new RuntimeException ( " A fatal error has occured - no valid fml load plugin was found - this is a completely corrupt FML installation . " ) ; 
 } 
 
 + / / Now that we have the root plugins loaded - lets see what else might be around 
 + discoverCoreMods ( mcDir , actualClassLoader , loadPlugins , libraries ) ; 
 + 
 List < Throwable > caughtErrors = new ArrayList < Throwable > ( ) ; 
 try 
 { 
 @ @ - 172 , 9 + 180 , 12 @ @ public class RelaunchLibraryManager 
 
 for ( IFMLLoadingPlugin plug : loadPlugins ) 
 { 
 - for ( String xformClass : plug . getASMTransformerClass ( ) ) 
 + if ( plug . getASMTransformerClass ( ) ! = null ) 
 { 
 - actualClassLoader . registerTransformer ( xformClass ) ; 
 + for ( String xformClass : plug . getASMTransformerClass ( ) ) 
 + { 
 + actualClassLoader . registerTransformer ( xformClass ) ; 
 + } 
 } 
 } 
 try 
 @ @ - 188 , 6 + 199 , 102 @ @ public class RelaunchLibraryManager 
 } 
 } 
 
 + private static void discoverCoreMods ( File mcDir , RelaunchClassLoader classLoader , List < IFMLLoadingPlugin > loadPlugins , List < ILibrarySet > libraries ) 
 + { 
 + File coreMods = setupCoreModDir ( mcDir ) ; 
 + FilenameFilter ff = new FilenameFilter ( ) 
 + { 
 + @ Override 
 + public boolean accept ( File dir , String name ) 
 + { 
 + return name . endsWith ( " . jar " ) ; 
 + } 
 + } ; 
 + File [ ] coreModList = coreMods . listFiles ( ff ) ; 
 + Arrays . sort ( coreModList ) ; 
 + 
 + for ( File coreMod : coreModList ) 
 + { 
 + FMLLog . fine ( " Found a candidate coremod % s " , coreMod . getName ( ) ) ; 
 + JarFile jar ; 
 + Attributes mfAttributes ; 
 + try 
 + { 
 + jar = new JarFile ( coreMod ) ; 
 + mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; 
 + } 
 + catch ( IOException ioe ) 
 + { 
 + FMLLog . log ( Level . SEVERE , ioe , " Unable to read the coremod jar file % s - ignoring " , coreMod . getName ( ) ) ; 
 + continue ; 
 + } 
 + 
 + String fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; 
 + if ( fmlCorePlugin = = null ) 
 + { 
 + FMLLog . severe ( " The coremod % s does not contain a valid jar manifest - it will be ignored " , coreMod . getName ( ) ) ; 
 + continue ; 
 + } 
 + 
 + / / String className = fmlCorePlugin . replace ( ' . ' , ' / ' ) . concat ( " . class " ) ; 
 + / / JarEntry ent = jar . getJarEntry ( className ) ; 
 + / / if ( ent = = null ) 
 + / / { 
 + / / FMLLog . severe ( " The coremod % s specified % s as it ' s loading class but it does not include it - it will be ignored " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + / / continue ; 
 + / / } 
 + / / try 
 + / / { 
 + / / Class < ? > coreModClass = Class . forName ( fmlCorePlugin , false , classLoader ) ; 
 + / / FMLLog . severe ( " The coremods % s specified a class % s that is already present in the classpath - it will be ignored " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + / / continue ; 
 + / / } 
 + / / catch ( ClassNotFoundException cnfe ) 
 + / / { 
 + / / / / didn ' t find it , good 
 + / / } 
 + try 
 + { 
 + classLoader . addURL ( coreMod . toURI ( ) . toURL ( ) ) ; 
 + } 
 + catch ( MalformedURLException e ) 
 + { 
 + FMLLog . log ( Level . SEVERE , e , " Unable to convert file into a URL . weird " ) ; 
 + continue ; 
 + } 
 + try 
 + { 
 + Class < ? > coreModClass = Class . forName ( fmlCorePlugin , true , classLoader ) ; 
 + IFMLLoadingPlugin plugin = ( IFMLLoadingPlugin ) coreModClass . newInstance ( ) ; 
 + loadPlugins . add ( plugin ) ; 
 + if ( plugin . getLibraryRequestClass ( ) ! = null ) 
 + { 
 + for ( String libName : plugin . getLibraryRequestClass ( ) ) 
 + { 
 + libraries . add ( ( ILibrarySet ) Class . forName ( libName , true , classLoader ) . newInstance ( ) ) ; 
 + } 
 + } 
 + FMLLog . fine ( " Loaded coremod % s " , coreMod . getName ( ) ) ; 
 + } 
 + catch ( ClassNotFoundException cnfe ) 
 + { 
 + FMLLog . log ( Level . SEVERE , cnfe , " Coremod % s : Unable to class load the plugin % s " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + } 
 + catch ( ClassCastException cce ) 
 + { 
 + FMLLog . log ( Level . SEVERE , cce , " Coremod % s : The plugin % s is not an implementor of IFMLLoadingPlugin " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + } 
 + catch ( InstantiationException ie ) 
 + { 
 + FMLLog . log ( Level . SEVERE , ie , " Coremod % s : The plugin class % s was not instantiable " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + } 
 + catch ( IllegalAccessException iae ) 
 + { 
 + FMLLog . log ( Level . SEVERE , iae , " Coremod % s : The plugin class % s was not accessible " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + } 
 + } 
 + } 
 + 
 / * * 
 * @ param mcDir 
 * @ return 
 @ @ - 214 , 6 + 321 , 32 @ @ public class RelaunchLibraryManager 
 return libDir ; 
 } 
 
 + / * * 
 + * @ param mcDir 
 + * @ return 
 + * / 
 + private static File setupCoreModDir ( File mcDir ) 
 + { 
 + File coreModDir = new File ( mcDir , " coremods " ) ; 
 + try 
 + { 
 + coreModDir = coreModDir . getCanonicalFile ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( String . format ( " Unable to canonicalize the coremod dir at % s " , mcDir . getName ( ) ) , e ) ; 
 + } 
 + if ( ! coreModDir . exists ( ) ) 
 + { 
 + coreModDir . mkdir ( ) ; 
 + } 
 + else if ( coreModDir . exists ( ) & & ! coreModDir . isDirectory ( ) ) 
 + { 
 + throw new RuntimeException ( String . format ( " Found a coremod file in % s that ' s not a directory " , mcDir . getName ( ) ) ) ; 
 + } 
 + return coreModDir ; 
 + } 
 + 
 private static String generateChecksum ( File file ) 
 { 
 try 
 diff - - git a / fml / eclipse / coremodtest / . classpath b / fml / eclipse / coremodtest / . classpath 
 new file mode 100644 
 index 0000000 . . 294bff6 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / . classpath 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < classpath > 
 + 	 < classpathentry kind = " src " path = " src " / > 
 + 	 < classpathentry kind = " con " path = " org . eclipse . jdt . launching . JRE _ CONTAINER / org . eclipse . jdt . internal . debug . ui . launcher . StandardVMType / JavaSE - 1 . 6 " / > 
 + 	 < classpathentry combineaccessrules = " false " kind = " src " path = " / FML - Client " / > 
 + 	 < classpathentry kind = " output " path = " bin " / > 
 + < / classpath > 
 diff - - git a / fml / eclipse / coremodtest / . project b / fml / eclipse / coremodtest / . project 
 new file mode 100644 
 index 0000000 . . bda0433 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / . project 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < projectDescription > 
 + 	 < name > coremodtest < / name > 
 + 	 < comment > < / comment > 
 + 	 < projects > 
 + 	 < / projects > 
 + 	 < buildSpec > 
 + 	 	 < buildCommand > 
 + 	 	 	 < name > org . eclipse . jdt . core . javabuilder < / name > 
 + 	 	 	 < arguments > 
 + 	 	 	 < / arguments > 
 + 	 	 < / buildCommand > 
 + 	 < / buildSpec > 
 + 	 < natures > 
 + 	 	 < nature > org . eclipse . jdt . core . javanature < / nature > 
 + 	 < / natures > 
 + < / projectDescription > 
 diff - - git a / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs b / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs 
 new file mode 100644 
 index 0000000 . . 8000cd6 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + eclipse . preferences . version = 1 
 + org . eclipse . jdt . core . compiler . codegen . inlineJsrBytecode = enabled 
 + org . eclipse . jdt . core . compiler . codegen . targetPlatform = 1 . 6 
 + org . eclipse . jdt . core . compiler . codegen . unusedLocal = preserve 
 + org . eclipse . jdt . core . compiler . compliance = 1 . 6 
 + org . eclipse . jdt . core . compiler . debug . lineNumber = generate 
 + org . eclipse . jdt . core . compiler . debug . localVariable = generate 
 + org . eclipse . jdt . core . compiler . debug . sourceFile = generate 
 + org . eclipse . jdt . core . compiler . problem . assertIdentifier = error 
 + org . eclipse . jdt . core . compiler . problem . enumIdentifier = error 
 + org . eclipse . jdt . core . compiler . source = 1 . 6 
 diff - - git a / fml / eclipse / coremodtest / manifest . mf b / fml / eclipse / coremodtest / manifest . mf 
 new file mode 100644 
 index 0000000 . . eda1ba3 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / manifest . mf 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + Manifest - Version : 1 . 0 
 + FMLCorePlugin : cpw . mods . testcoremod . FMLLoadPlugin 
 + 
 diff - - git a / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java b / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java 
 new file mode 100644 
 index 0000000 . . 44094f0 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package cpw . mods . testcoremod ; 
 + 
 + import cpw . mods . fml . relauncher . IFMLLoadingPlugin ; 
 + 
 + public class FMLLoadPlugin implements IFMLLoadingPlugin 
 + { 
 + @ Override 
 + public String [ ] getLibraryRequestClass ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public String [ ] getASMTransformerClass ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + }
