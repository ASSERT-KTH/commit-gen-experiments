BLEU SCORE: 0.02664321121388894

TEST MSG: Added support for using static methods as event listeners , Register the . class instead of an instance .
GENERATED MSG: Log4j2 logging context for things . This should help add context when things go wrong in mods .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java <nl> index 1523e61 . . 41edc0a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml . common . eventhandler ; <nl> import static org . objectweb . asm . Opcodes . * ; <nl> <nl> import java . lang . reflect . Method ; <nl> + import java . lang . reflect . Modifier ; <nl> import java . util . HashMap ; <nl> <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> @ @ - 51 , 7 + 52 , 10 @ @ public class ASMEventHandler implements IEventListener <nl> public ASMEventHandler ( Object target , Method method , ModContainer owner ) throws Exception <nl> { <nl> this . owner = owner ; <nl> - handler = ( IEventListener ) createWrapper ( method ) . getConstructor ( Object . class ) . newInstance ( target ) ; <nl> + if ( Modifier . isStatic ( method . getModifiers ( ) ) ) <nl> + handler = ( IEventListener ) createWrapper ( method ) . newInstance ( ) ; <nl> + else <nl> + handler = ( IEventListener ) createWrapper ( method ) . getConstructor ( Object . class ) . newInstance ( target ) ; <nl> subInfo = method . getAnnotation ( SubscribeEvent . class ) ; <nl> readable = " ASM : " + target + " " + method . getName ( ) + Type . getMethodDescriptor ( method ) ; <nl> } <nl> @ @ - 87 , 6 + 91 , 7 @ @ public class ASMEventHandler implements IEventListener <nl> ClassWriter cw = new ClassWriter ( 0 ) ; <nl> MethodVisitor mv ; <nl> <nl> + boolean isStatic = Modifier . isStatic ( callback . getModifiers ( ) ) ; <nl> String name = getUniqueName ( callback ) ; <nl> String desc = name . replace ( ' . ' , ' / ' ) ; <nl> String instType = Type . getInternalName ( callback . getDeclaringClass ( ) ) ; <nl> @ @ - 104 , 16 + 109 , 20 @ @ public class ASMEventHandler implements IEventListener <nl> <nl> cw . visitSource ( " . dynamic " , null ) ; <nl> { <nl> - cw . visitField ( ACC _ PUBLIC , " instance " , " Ljava / lang / Object ; " , null , null ) . visitEnd ( ) ; <nl> + if ( ! isStatic ) <nl> + cw . visitField ( ACC _ PUBLIC , " instance " , " Ljava / lang / Object ; " , null , null ) . visitEnd ( ) ; <nl> } <nl> { <nl> - mv = cw . visitMethod ( ACC _ PUBLIC , " < init > " , " ( Ljava / lang / Object ; ) V " , null , null ) ; <nl> + mv = cw . visitMethod ( ACC _ PUBLIC , " < init > " , isStatic ? " ( ) V " : " ( Ljava / lang / Object ; ) V " , null , null ) ; <nl> mv . visitCode ( ) ; <nl> mv . visitVarInsn ( ALOAD , 0 ) ; <nl> mv . visitMethodInsn ( INVOKESPECIAL , " java / lang / Object " , " < init > " , " ( ) V " , false ) ; <nl> - mv . visitVarInsn ( ALOAD , 0 ) ; <nl> - mv . visitVarInsn ( ALOAD , 1 ) ; <nl> - mv . visitFieldInsn ( PUTFIELD , desc , " instance " , " Ljava / lang / Object ; " ) ; <nl> + if ( ! isStatic ) <nl> + { <nl> + mv . visitVarInsn ( ALOAD , 0 ) ; <nl> + mv . visitVarInsn ( ALOAD , 1 ) ; <nl> + mv . visitFieldInsn ( PUTFIELD , desc , " instance " , " Ljava / lang / Object ; " ) ; <nl> + } <nl> mv . visitInsn ( RETURN ) ; <nl> mv . visitMaxs ( 2 , 2 ) ; <nl> mv . visitEnd ( ) ; <nl> @ @ - 122 , 11 + 131 , 14 @ @ public class ASMEventHandler implements IEventListener <nl> mv = cw . visitMethod ( ACC _ PUBLIC , " invoke " , HANDLER _ FUNC _ DESC , null , null ) ; <nl> mv . visitCode ( ) ; <nl> mv . visitVarInsn ( ALOAD , 0 ) ; <nl> - mv . visitFieldInsn ( GETFIELD , desc , " instance " , " Ljava / lang / Object ; " ) ; <nl> - mv . visitTypeInsn ( CHECKCAST , instType ) ; <nl> + if ( ! isStatic ) <nl> + { <nl> + mv . visitFieldInsn ( GETFIELD , desc , " instance " , " Ljava / lang / Object ; " ) ; <nl> + mv . visitTypeInsn ( CHECKCAST , instType ) ; <nl> + } <nl> mv . visitVarInsn ( ALOAD , 1 ) ; <nl> mv . visitTypeInsn ( CHECKCAST , eventType ) ; <nl> - mv . visitMethodInsn ( INVOKEVIRTUAL , instType , callback . getName ( ) , Type . getMethodDescriptor ( callback ) , false ) ; <nl> + mv . visitMethodInsn ( isStatic ? INVOKESTATIC : INVOKEVIRTUAL , instType , callback . getName ( ) , Type . getMethodDescriptor ( callback ) , false ) ; <nl> mv . visitInsn ( RETURN ) ; <nl> mv . visitMaxs ( 2 , 2 ) ; <nl> mv . visitEnd ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> index 17b8137 . . 7a83be4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . eventhandler ; <nl> <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Method ; <nl> + import java . lang . reflect . Modifier ; <nl> import java . util . ArrayList ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> @ @ - 37 , 6 + 38 , 7 @ @ import org . apache . logging . log4j . Level ; <nl> import com . google . common . base . Preconditions ; <nl> import com . google . common . base . Throwables ; <nl> import com . google . common . collect . MapMaker ; <nl> + import com . google . common . collect . Sets ; <nl> import com . google . common . reflect . TypeToken ; <nl> <nl> public class EventBus implements IEventExceptionHandler <nl> @ @ - 75 , 9 + 77 , 16 @ @ public class EventBus implements IEventExceptionHandler <nl> activeModContainer = Loader . instance ( ) . getMinecraftModContainer ( ) ; <nl> } <nl> listenerOwners . put ( target , activeModContainer ) ; <nl> - Set < ? extends Class < ? > > supers = TypeToken . of ( target . getClass ( ) ) . getTypes ( ) . rawTypes ( ) ; <nl> - for ( Method method : target . getClass ( ) . getMethods ( ) ) <nl> + boolean isStatic = target . getClass ( ) = = Class . class ; <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + Set < ? extends Class < ? > > supers = isStatic ? Sets . newHashSet ( ( Class < ? > ) target ) : TypeToken . of ( target . getClass ( ) ) . getTypes ( ) . rawTypes ( ) ; <nl> + for ( Method method : ( isStatic ? ( Class < ? > ) target : target . getClass ( ) ) . getMethods ( ) ) <nl> { <nl> + if ( isStatic & & ! Modifier . isStatic ( method . getModifiers ( ) ) ) <nl> + continue ; <nl> + else if ( ! isStatic & & Modifier . isStatic ( method . getModifiers ( ) ) ) <nl> + continue ; <nl> + <nl> for ( Class < ? > cls : supers ) <nl> { <nl> try <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / ListenerList . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / ListenerList . java <nl> index d13077c . . a257af7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / ListenerList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / ListenerList . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . eventhandler ; <nl> <nl> import java . util . * ; <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . Lists ; <nl> <nl> <nl> public class ListenerList <nl> @ @ - 139 , 6 + 140 , 8 @ @ public class ListenerList <nl> private IEventListener [ ] listeners ; <nl> private ArrayList < ArrayList < IEventListener > > priorities ; <nl> private ListenerListInst parent ; <nl> + private List < ListenerListInst > children ; <nl> + <nl> <nl> private ListenerListInst ( ) <nl> { <nl> @ @ - 160 , 12 + 163 , 15 @ @ public class ListenerList <nl> priorities . clear ( ) ; <nl> parent = null ; <nl> listeners = null ; <nl> + if ( children ! = null ) <nl> + children . clear ( ) ; <nl> } <nl> <nl> private ListenerListInst ( ListenerListInst parent ) <nl> { <nl> this ( ) ; <nl> this . parent = parent ; <nl> + this . parent . addChild ( this ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 205 , 7 + 211 , 24 @ @ public class ListenerList <nl> <nl> protected boolean shouldRebuild ( ) <nl> { <nl> - return rebuild | | ( parent ! = null & & parent . shouldRebuild ( ) ) ; <nl> + return rebuild ; / / | | ( parent ! = null & & parent . shouldRebuild ( ) ) ; <nl> + } <nl> + <nl> + protected void forceRebuild ( ) <nl> + { <nl> + this . rebuild = true ; <nl> + if ( this . children ! = null ) <nl> + { <nl> + for ( ListenerListInst child : this . children ) <nl> + child . forceRebuild ( ) ; <nl> + } <nl> + } <nl> + <nl> + private void addChild ( ListenerListInst child ) <nl> + { <nl> + if ( this . children = = null ) <nl> + this . children = Lists . newArrayList ( ) ; <nl> + this . children . add ( child ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 235 , 7 + 258 , 7 @ @ public class ListenerList <nl> public void register ( EventPriority priority , IEventListener listener ) <nl> { <nl> priorities . get ( priority . ordinal ( ) ) . add ( listener ) ; <nl> - rebuild = true ; <nl> + this . forceRebuild ( ) ; <nl> } <nl> <nl> public void unregister ( IEventListener listener ) <nl> @ @ - 244 , 7 + 267 , 7 @ @ public class ListenerList <nl> { <nl> if ( list . remove ( listener ) ) <nl> { <nl> - rebuild = true ; <nl> + this . forceRebuild ( ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / test / PlayerInteractEventTest . java b / src / test / java / net / minecraftforge / test / PlayerInteractEventTest . java <nl> index 271086f . . c10fcd6 100644 <nl> - - - a / src / test / java / net / minecraftforge / test / PlayerInteractEventTest . java <nl> + + + b / src / test / java / net / minecraftforge / test / PlayerInteractEventTest . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ public class PlayerInteractEventTest <nl> { <nl> logger = event . getModLog ( ) ; <nl> MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( PlayerInteractEventTest . class ) ; / / Test Static event listeners <nl> } <nl> <nl> @ SubscribeEvent ( receiveCanceled = true ) / / this triggers after the subclasses below , and we ' d like to log them all <nl> @ @ - 142 , 7 + 143 , 7 @ @ public class PlayerInteractEventTest <nl> } <nl> <nl> @ SubscribeEvent <nl> - public void interactNormal ( PlayerInteractEvent . EntityInteract evt ) <nl> + public static void interactNormal ( PlayerInteractEvent . EntityInteract evt ) <nl> { <nl> if ( ! ENABLE ) return ; <nl>
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / LoadController . java b / fml / src / main / java / cpw / mods / fml / common / LoadController . java <nl> index 3fdf5d9 . . e780752 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / LoadController . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / LoadController . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import java . util . List ; <nl> import java . util . Map . Entry ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> + import org . apache . logging . log4j . ThreadContext ; <nl> <nl> import com . google . common . base . Joiner ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> @ @ - 201 , 9 + 202 , 11 @ @ public class LoadController <nl> } <nl> activeContainer = mc ; <nl> stateEvent . applyModContainer ( activeContainer ( ) ) ; <nl> + ThreadContext . put ( " mod " , modId ) ; <nl> FMLLog . log ( modId , Level . TRACE , " Sending event % s to mod % s " , stateEvent . getEventType ( ) , modId ) ; <nl> eventChannels . get ( modId ) . post ( stateEvent ) ; <nl> FMLLog . log ( modId , Level . TRACE , " Sent event % s to mod % s " , stateEvent . getEventType ( ) , modId ) ; <nl> + ThreadContext . put ( " mod " , " < NONE > " ) ; <nl> activeContainer = null ; <nl> if ( stateEvent instanceof FMLStateEvent ) <nl> { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / eventhandler / ASMEventHandler . java b / fml / src / main / java / cpw / mods / fml / common / eventhandler / ASMEventHandler . java <nl> index 02bb037 . . 4c59a05 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / eventhandler / ASMEventHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / eventhandler / ASMEventHandler . java <nl> @ @ - 6 , 25 + 6 , 29 @ @ import java . lang . reflect . Method ; <nl> import java . util . HashMap ; <nl> <nl> <nl> + import org . apache . logging . log4j . ThreadContext ; <nl> import org . objectweb . asm . ClassWriter ; <nl> import org . objectweb . asm . MethodVisitor ; <nl> import org . objectweb . asm . Type ; <nl> <nl> import com . google . common . collect . Maps ; <nl> + import cpw . mods . fml . common . ModContainer ; <nl> <nl> <nl> public class ASMEventHandler implements IEventListener <nl> { <nl> private static int IDs = 0 ; <nl> private static final String HANDLER _ DESC = Type . getInternalName ( IEventListener . class ) ; <nl> - private static final String HANDLER _ FUNC _ DESC = Type . getMethodDescriptor ( IEventListener . class . getDeclaredMethods ( ) [ 0 ] ) ; <nl> + private static final String HANDLER _ FUNC _ DESC = Type . getMethodDescriptor ( IEventListener . class . getDeclaredMethods ( ) [ 0 ] ) ; <nl> private static final ASMClassLoader LOADER = new ASMClassLoader ( ) ; <nl> private static final HashMap < Method , Class < ? > > cache = Maps . newHashMap ( ) ; <nl> - <nl> + <nl> private final IEventListener handler ; <nl> private final SubscribeEvent subInfo ; <nl> - public ASMEventHandler ( Object target , Method method ) throws Exception <nl> + private ModContainer owner ; <nl> + public ASMEventHandler ( Object target , Method method , ModContainer owner ) throws Exception <nl> { <nl> + this . owner = owner ; <nl> handler = ( IEventListener ) createWrapper ( method ) . getConstructor ( Object . class ) . newInstance ( target ) ; <nl> subInfo = method . getAnnotation ( SubscribeEvent . class ) ; <nl> } <nl> @ @ - 32 , 6 + 36 , 14 @ @ public class ASMEventHandler implements IEventListener <nl> @ Override <nl> public void invoke ( Event event ) <nl> { <nl> + if ( owner ! = null ) <nl> + { <nl> + ThreadContext . put ( " mod " , owner . getName ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + ThreadContext . put ( " mod " , " < NONE > " ) ; <nl> + } <nl> if ( handler ! = null ) <nl> { <nl> if ( ! event . isCancelable ( ) | | ! event . isCanceled ( ) | | subInfo . receiveCanceled ( ) ) <nl> @ @ - 39 , 13 + 51 , 14 @ @ public class ASMEventHandler implements IEventListener <nl> handler . invoke ( event ) ; <nl> } <nl> } <nl> + ThreadContext . remove ( " mod " ) ; <nl> } <nl> - <nl> + <nl> public EventPriority getPriority ( ) <nl> { <nl> return subInfo . priority ( ) ; <nl> } <nl> - <nl> + <nl> public Class < ? > createWrapper ( Method callback ) <nl> { <nl> if ( cache . containsKey ( callback ) ) <nl> @ @ - 55 , 12 + 68 , 12 @ @ public class ASMEventHandler implements IEventListener <nl> <nl> ClassWriter cw = new ClassWriter ( 0 ) ; <nl> MethodVisitor mv ; <nl> - <nl> + <nl> String name = getUniqueName ( callback ) ; <nl> String desc = name . replace ( ' . ' , ' / ' ) ; <nl> String instType = Type . getInternalName ( callback . getDeclaringClass ( ) ) ; <nl> String eventType = Type . getInternalName ( callback . getParameterTypes ( ) [ 0 ] ) ; <nl> - <nl> + <nl> / * <nl> System . out . println ( " Name : " + name ) ; <nl> System . out . println ( " Desc : " + desc ) ; <nl> @ @ - 68 , 7 + 81 , 7 @ @ public class ASMEventHandler implements IEventListener <nl> System . out . println ( " Callback : " + callback . getName ( ) + Type . getMethodDescriptor ( callback ) ) ; <nl> System . out . println ( " Event : " + eventType ) ; <nl> * / <nl> - <nl> + <nl> cw . visit ( V1 _ 6 , ACC _ PUBLIC | ACC _ SUPER , desc , null , " java / lang / Object " , new String [ ] { HANDLER _ DESC } ) ; <nl> <nl> cw . visitSource ( " . dynamic " , null ) ; <nl> @ @ - 105 , 22 + 118 , 22 @ @ public class ASMEventHandler implements IEventListener <nl> cache . put ( callback , ret ) ; <nl> return ret ; <nl> } <nl> - <nl> + <nl> private String getUniqueName ( Method callback ) <nl> { <nl> - return String . format ( " % s _ % d _ % s _ % s _ % s " , getClass ( ) . getName ( ) , IDs + + , <nl> - callback . getDeclaringClass ( ) . getSimpleName ( ) , <nl> - callback . getName ( ) , <nl> + return String . format ( " % s _ % d _ % s _ % s _ % s " , getClass ( ) . getName ( ) , IDs + + , <nl> + callback . getDeclaringClass ( ) . getSimpleName ( ) , <nl> + callback . getName ( ) , <nl> callback . getParameterTypes ( ) [ 0 ] . getSimpleName ( ) ) ; <nl> } <nl> - <nl> + <nl> private static class ASMClassLoader extends ClassLoader <nl> { <nl> private ASMClassLoader ( ) <nl> { <nl> super ( ASMClassLoader . class . getClassLoader ( ) ) ; <nl> } <nl> - <nl> + <nl> public Class < ? > define ( String name , byte [ ] data ) <nl> { <nl> return defineClass ( name , data , 0 , data . length ) ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / eventhandler / EventBus . java b / fml / src / main / java / cpw / mods / fml / common / eventhandler / EventBus . java <nl> index aa6640d . . 3dfe411 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / eventhandler / EventBus . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / eventhandler / EventBus . java <nl> @ @ - 3 , 18 + 3 , 23 @ @ package cpw . mods . fml . common . eventhandler ; <nl> import java . lang . reflect . Constructor ; <nl> import java . lang . reflect . Method ; <nl> import java . util . ArrayList ; <nl> + import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> <nl> <nl> <nl> + import com . google . common . collect . MapMaker ; <nl> import com . google . common . reflect . TypeToken ; <nl> + import cpw . mods . fml . common . Loader ; <nl> + import cpw . mods . fml . common . ModContainer ; <nl> <nl> public class EventBus <nl> { <nl> private static int maxID = 0 ; <nl> <nl> private ConcurrentHashMap < Object , ArrayList < IEventListener > > listeners = new ConcurrentHashMap < Object , ArrayList < IEventListener > > ( ) ; <nl> + private Map < Object , ModContainer > listenerOwners = new MapMaker ( ) . weakKeys ( ) . weakValues ( ) . makeMap ( ) ; <nl> private final int busID = maxID + + ; <nl> <nl> public EventBus ( ) <nl> @ @ - 29 , 6 + 34 , 7 @ @ public class EventBus <nl> return ; <nl> } <nl> <nl> + listenerOwners . put ( target , Loader . instance ( ) . activeModContainer ( ) ) ; <nl> Set < ? extends Class < ? > > supers = TypeToken . of ( target . getClass ( ) ) . getTypes ( ) . rawTypes ( ) ; <nl> for ( Method method : target . getClass ( ) . getMethods ( ) ) <nl> { <nl> @ @ - 52 , 10 + 58 , 10 @ @ public class EventBus <nl> <nl> if ( ! Event . class . isAssignableFrom ( eventType ) ) <nl> { <nl> - throw new IllegalArgumentException ( " Method " + method + " has @ SubscribeEvent annotation , but takes a argument that is not a Event " + eventType ) ; <nl> + throw new IllegalArgumentException ( " Method " + method + " has @ SubscribeEvent annotation , but takes a argument that is not an Event " + eventType ) ; <nl> } <nl> <nl> - register ( eventType , target , method ) ; <nl> + register ( eventType , target , method , Loader . instance ( ) . activeModContainer ( ) ) ; <nl> break ; <nl> } <nl> } <nl> @ @ - 67 , 14 + 73 , 14 @ @ public class EventBus <nl> } <nl> } <nl> <nl> - private void register ( Class < ? > eventType , Object target , Method method ) <nl> + private void register ( Class < ? > eventType , Object target , Method method , ModContainer owner ) <nl> { <nl> try <nl> { <nl> Constructor < ? > ctr = eventType . getConstructor ( ) ; <nl> ctr . setAccessible ( true ) ; <nl> Event event = ( Event ) ctr . newInstance ( ) ; <nl> - ASMEventHandler listener = new ASMEventHandler ( target , method ) ; <nl> + ASMEventHandler listener = new ASMEventHandler ( target , method , owner ) ; <nl> event . getListenerList ( ) . register ( busID , listener . getPriority ( ) , listener ) ; <nl> <nl> ArrayList < IEventListener > others = listeners . get ( target ) ; <nl> diff - - git a / fml / src / main / resources / log4j2 . xml b / fml / src / main / resources / log4j2 . xml <nl> index 18eab39 . . 3f9cb3b 100644 <nl> - - - a / fml / src / main / resources / log4j2 . xml <nl> + + + b / fml / src / main / resources / log4j2 . xml <nl> @ @ - 21 , 7 + 21 , 7 @ @ <nl> < Routes pattern = " $ $ { ctx : side } " > <nl> < Route > <nl> < RollingRandomAccessFile name = " FmlFile " fileName = " logs / fml - $ { ctx : side } - latest . log " filePattern = " logs / fml - $ { ctx : side } - % i . log " > <nl> - < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " / > <nl> + < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger / % X { mod } ] : % msg % n " / > <nl> < DefaultRolloverStrategy max = " 3 " fileIndex = " max " / > <nl> < Policies > <nl> < OnStartupTriggeringPolicy / >

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java 
 index 1523e61 . . 41edc0a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml . common . eventhandler ; 
 import static org . objectweb . asm . Opcodes . * ; 
 
 import java . lang . reflect . Method ; 
 + import java . lang . reflect . Modifier ; 
 import java . util . HashMap ; 
 
 import net . minecraftforge . fml . common . ModContainer ; 
 @ @ - 51 , 7 + 52 , 10 @ @ public class ASMEventHandler implements IEventListener 
 public ASMEventHandler ( Object target , Method method , ModContainer owner ) throws Exception 
 { 
 this . owner = owner ; 
 - handler = ( IEventListener ) createWrapper ( method ) . getConstructor ( Object . class ) . newInstance ( target ) ; 
 + if ( Modifier . isStatic ( method . getModifiers ( ) ) ) 
 + handler = ( IEventListener ) createWrapper ( method ) . newInstance ( ) ; 
 + else 
 + handler = ( IEventListener ) createWrapper ( method ) . getConstructor ( Object . class ) . newInstance ( target ) ; 
 subInfo = method . getAnnotation ( SubscribeEvent . class ) ; 
 readable = " ASM : " + target + " " + method . getName ( ) + Type . getMethodDescriptor ( method ) ; 
 } 
 @ @ - 87 , 6 + 91 , 7 @ @ public class ASMEventHandler implements IEventListener 
 ClassWriter cw = new ClassWriter ( 0 ) ; 
 MethodVisitor mv ; 
 
 + boolean isStatic = Modifier . isStatic ( callback . getModifiers ( ) ) ; 
 String name = getUniqueName ( callback ) ; 
 String desc = name . replace ( ' . ' , ' / ' ) ; 
 String instType = Type . getInternalName ( callback . getDeclaringClass ( ) ) ; 
 @ @ - 104 , 16 + 109 , 20 @ @ public class ASMEventHandler implements IEventListener 
 
 cw . visitSource ( " . dynamic " , null ) ; 
 { 
 - cw . visitField ( ACC _ PUBLIC , " instance " , " Ljava / lang / Object ; " , null , null ) . visitEnd ( ) ; 
 + if ( ! isStatic ) 
 + cw . visitField ( ACC _ PUBLIC , " instance " , " Ljava / lang / Object ; " , null , null ) . visitEnd ( ) ; 
 } 
 { 
 - mv = cw . visitMethod ( ACC _ PUBLIC , " < init > " , " ( Ljava / lang / Object ; ) V " , null , null ) ; 
 + mv = cw . visitMethod ( ACC _ PUBLIC , " < init > " , isStatic ? " ( ) V " : " ( Ljava / lang / Object ; ) V " , null , null ) ; 
 mv . visitCode ( ) ; 
 mv . visitVarInsn ( ALOAD , 0 ) ; 
 mv . visitMethodInsn ( INVOKESPECIAL , " java / lang / Object " , " < init > " , " ( ) V " , false ) ; 
 - mv . visitVarInsn ( ALOAD , 0 ) ; 
 - mv . visitVarInsn ( ALOAD , 1 ) ; 
 - mv . visitFieldInsn ( PUTFIELD , desc , " instance " , " Ljava / lang / Object ; " ) ; 
 + if ( ! isStatic ) 
 + { 
 + mv . visitVarInsn ( ALOAD , 0 ) ; 
 + mv . visitVarInsn ( ALOAD , 1 ) ; 
 + mv . visitFieldInsn ( PUTFIELD , desc , " instance " , " Ljava / lang / Object ; " ) ; 
 + } 
 mv . visitInsn ( RETURN ) ; 
 mv . visitMaxs ( 2 , 2 ) ; 
 mv . visitEnd ( ) ; 
 @ @ - 122 , 11 + 131 , 14 @ @ public class ASMEventHandler implements IEventListener 
 mv = cw . visitMethod ( ACC _ PUBLIC , " invoke " , HANDLER _ FUNC _ DESC , null , null ) ; 
 mv . visitCode ( ) ; 
 mv . visitVarInsn ( ALOAD , 0 ) ; 
 - mv . visitFieldInsn ( GETFIELD , desc , " instance " , " Ljava / lang / Object ; " ) ; 
 - mv . visitTypeInsn ( CHECKCAST , instType ) ; 
 + if ( ! isStatic ) 
 + { 
 + mv . visitFieldInsn ( GETFIELD , desc , " instance " , " Ljava / lang / Object ; " ) ; 
 + mv . visitTypeInsn ( CHECKCAST , instType ) ; 
 + } 
 mv . visitVarInsn ( ALOAD , 1 ) ; 
 mv . visitTypeInsn ( CHECKCAST , eventType ) ; 
 - mv . visitMethodInsn ( INVOKEVIRTUAL , instType , callback . getName ( ) , Type . getMethodDescriptor ( callback ) , false ) ; 
 + mv . visitMethodInsn ( isStatic ? INVOKESTATIC : INVOKEVIRTUAL , instType , callback . getName ( ) , Type . getMethodDescriptor ( callback ) , false ) ; 
 mv . visitInsn ( RETURN ) ; 
 mv . visitMaxs ( 2 , 2 ) ; 
 mv . visitEnd ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 index 17b8137 . . 7a83be4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . eventhandler ; 
 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Method ; 
 + import java . lang . reflect . Modifier ; 
 import java . util . ArrayList ; 
 import java . util . Map ; 
 import java . util . Set ; 
 @ @ - 37 , 6 + 38 , 7 @ @ import org . apache . logging . log4j . Level ; 
 import com . google . common . base . Preconditions ; 
 import com . google . common . base . Throwables ; 
 import com . google . common . collect . MapMaker ; 
 + import com . google . common . collect . Sets ; 
 import com . google . common . reflect . TypeToken ; 
 
 public class EventBus implements IEventExceptionHandler 
 @ @ - 75 , 9 + 77 , 16 @ @ public class EventBus implements IEventExceptionHandler 
 activeModContainer = Loader . instance ( ) . getMinecraftModContainer ( ) ; 
 } 
 listenerOwners . put ( target , activeModContainer ) ; 
 - Set < ? extends Class < ? > > supers = TypeToken . of ( target . getClass ( ) ) . getTypes ( ) . rawTypes ( ) ; 
 - for ( Method method : target . getClass ( ) . getMethods ( ) ) 
 + boolean isStatic = target . getClass ( ) = = Class . class ; 
 + @ SuppressWarnings ( " unchecked " ) 
 + Set < ? extends Class < ? > > supers = isStatic ? Sets . newHashSet ( ( Class < ? > ) target ) : TypeToken . of ( target . getClass ( ) ) . getTypes ( ) . rawTypes ( ) ; 
 + for ( Method method : ( isStatic ? ( Class < ? > ) target : target . getClass ( ) ) . getMethods ( ) ) 
 { 
 + if ( isStatic & & ! Modifier . isStatic ( method . getModifiers ( ) ) ) 
 + continue ; 
 + else if ( ! isStatic & & Modifier . isStatic ( method . getModifiers ( ) ) ) 
 + continue ; 
 + 
 for ( Class < ? > cls : supers ) 
 { 
 try 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / ListenerList . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / ListenerList . java 
 index d13077c . . a257af7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / ListenerList . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / ListenerList . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . eventhandler ; 
 
 import java . util . * ; 
 import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . Lists ; 
 
 
 public class ListenerList 
 @ @ - 139 , 6 + 140 , 8 @ @ public class ListenerList 
 private IEventListener [ ] listeners ; 
 private ArrayList < ArrayList < IEventListener > > priorities ; 
 private ListenerListInst parent ; 
 + private List < ListenerListInst > children ; 
 + 
 
 private ListenerListInst ( ) 
 { 
 @ @ - 160 , 12 + 163 , 15 @ @ public class ListenerList 
 priorities . clear ( ) ; 
 parent = null ; 
 listeners = null ; 
 + if ( children ! = null ) 
 + children . clear ( ) ; 
 } 
 
 private ListenerListInst ( ListenerListInst parent ) 
 { 
 this ( ) ; 
 this . parent = parent ; 
 + this . parent . addChild ( this ) ; 
 } 
 
 / * * 
 @ @ - 205 , 7 + 211 , 24 @ @ public class ListenerList 
 
 protected boolean shouldRebuild ( ) 
 { 
 - return rebuild | | ( parent ! = null & & parent . shouldRebuild ( ) ) ; 
 + return rebuild ; / / | | ( parent ! = null & & parent . shouldRebuild ( ) ) ; 
 + } 
 + 
 + protected void forceRebuild ( ) 
 + { 
 + this . rebuild = true ; 
 + if ( this . children ! = null ) 
 + { 
 + for ( ListenerListInst child : this . children ) 
 + child . forceRebuild ( ) ; 
 + } 
 + } 
 + 
 + private void addChild ( ListenerListInst child ) 
 + { 
 + if ( this . children = = null ) 
 + this . children = Lists . newArrayList ( ) ; 
 + this . children . add ( child ) ; 
 } 
 
 / * * 
 @ @ - 235 , 7 + 258 , 7 @ @ public class ListenerList 
 public void register ( EventPriority priority , IEventListener listener ) 
 { 
 priorities . get ( priority . ordinal ( ) ) . add ( listener ) ; 
 - rebuild = true ; 
 + this . forceRebuild ( ) ; 
 } 
 
 public void unregister ( IEventListener listener ) 
 @ @ - 244 , 7 + 267 , 7 @ @ public class ListenerList 
 { 
 if ( list . remove ( listener ) ) 
 { 
 - rebuild = true ; 
 + this . forceRebuild ( ) ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / test / PlayerInteractEventTest . java b / src / test / java / net / minecraftforge / test / PlayerInteractEventTest . java 
 index 271086f . . c10fcd6 100644 
 - - - a / src / test / java / net / minecraftforge / test / PlayerInteractEventTest . java 
 + + + b / src / test / java / net / minecraftforge / test / PlayerInteractEventTest . java 
 @ @ - 32 , 6 + 32 , 7 @ @ public class PlayerInteractEventTest 
 { 
 logger = event . getModLog ( ) ; 
 MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + MinecraftForge . EVENT _ BUS . register ( PlayerInteractEventTest . class ) ; / / Test Static event listeners 
 } 
 
 @ SubscribeEvent ( receiveCanceled = true ) / / this triggers after the subclasses below , and we ' d like to log them all 
 @ @ - 142 , 7 + 143 , 7 @ @ public class PlayerInteractEventTest 
 } 
 
 @ SubscribeEvent 
 - public void interactNormal ( PlayerInteractEvent . EntityInteract evt ) 
 + public static void interactNormal ( PlayerInteractEvent . EntityInteract evt ) 
 { 
 if ( ! ENABLE ) return ; 


NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / LoadController . java b / fml / src / main / java / cpw / mods / fml / common / LoadController . java 
 index 3fdf5d9 . . e780752 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / LoadController . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / LoadController . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import java . util . List ; 
 import java . util . Map . Entry ; 
 
 import org . apache . logging . log4j . Level ; 
 + import org . apache . logging . log4j . ThreadContext ; 
 
 import com . google . common . base . Joiner ; 
 import com . google . common . collect . ArrayListMultimap ; 
 @ @ - 201 , 9 + 202 , 11 @ @ public class LoadController 
 } 
 activeContainer = mc ; 
 stateEvent . applyModContainer ( activeContainer ( ) ) ; 
 + ThreadContext . put ( " mod " , modId ) ; 
 FMLLog . log ( modId , Level . TRACE , " Sending event % s to mod % s " , stateEvent . getEventType ( ) , modId ) ; 
 eventChannels . get ( modId ) . post ( stateEvent ) ; 
 FMLLog . log ( modId , Level . TRACE , " Sent event % s to mod % s " , stateEvent . getEventType ( ) , modId ) ; 
 + ThreadContext . put ( " mod " , " < NONE > " ) ; 
 activeContainer = null ; 
 if ( stateEvent instanceof FMLStateEvent ) 
 { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / eventhandler / ASMEventHandler . java b / fml / src / main / java / cpw / mods / fml / common / eventhandler / ASMEventHandler . java 
 index 02bb037 . . 4c59a05 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / eventhandler / ASMEventHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / eventhandler / ASMEventHandler . java 
 @ @ - 6 , 25 + 6 , 29 @ @ import java . lang . reflect . Method ; 
 import java . util . HashMap ; 
 
 
 + import org . apache . logging . log4j . ThreadContext ; 
 import org . objectweb . asm . ClassWriter ; 
 import org . objectweb . asm . MethodVisitor ; 
 import org . objectweb . asm . Type ; 
 
 import com . google . common . collect . Maps ; 
 + import cpw . mods . fml . common . ModContainer ; 
 
 
 public class ASMEventHandler implements IEventListener 
 { 
 private static int IDs = 0 ; 
 private static final String HANDLER _ DESC = Type . getInternalName ( IEventListener . class ) ; 
 - private static final String HANDLER _ FUNC _ DESC = Type . getMethodDescriptor ( IEventListener . class . getDeclaredMethods ( ) [ 0 ] ) ; 
 + private static final String HANDLER _ FUNC _ DESC = Type . getMethodDescriptor ( IEventListener . class . getDeclaredMethods ( ) [ 0 ] ) ; 
 private static final ASMClassLoader LOADER = new ASMClassLoader ( ) ; 
 private static final HashMap < Method , Class < ? > > cache = Maps . newHashMap ( ) ; 
 - 
 + 
 private final IEventListener handler ; 
 private final SubscribeEvent subInfo ; 
 - public ASMEventHandler ( Object target , Method method ) throws Exception 
 + private ModContainer owner ; 
 + public ASMEventHandler ( Object target , Method method , ModContainer owner ) throws Exception 
 { 
 + this . owner = owner ; 
 handler = ( IEventListener ) createWrapper ( method ) . getConstructor ( Object . class ) . newInstance ( target ) ; 
 subInfo = method . getAnnotation ( SubscribeEvent . class ) ; 
 } 
 @ @ - 32 , 6 + 36 , 14 @ @ public class ASMEventHandler implements IEventListener 
 @ Override 
 public void invoke ( Event event ) 
 { 
 + if ( owner ! = null ) 
 + { 
 + ThreadContext . put ( " mod " , owner . getName ( ) ) ; 
 + } 
 + else 
 + { 
 + ThreadContext . put ( " mod " , " < NONE > " ) ; 
 + } 
 if ( handler ! = null ) 
 { 
 if ( ! event . isCancelable ( ) | | ! event . isCanceled ( ) | | subInfo . receiveCanceled ( ) ) 
 @ @ - 39 , 13 + 51 , 14 @ @ public class ASMEventHandler implements IEventListener 
 handler . invoke ( event ) ; 
 } 
 } 
 + ThreadContext . remove ( " mod " ) ; 
 } 
 - 
 + 
 public EventPriority getPriority ( ) 
 { 
 return subInfo . priority ( ) ; 
 } 
 - 
 + 
 public Class < ? > createWrapper ( Method callback ) 
 { 
 if ( cache . containsKey ( callback ) ) 
 @ @ - 55 , 12 + 68 , 12 @ @ public class ASMEventHandler implements IEventListener 
 
 ClassWriter cw = new ClassWriter ( 0 ) ; 
 MethodVisitor mv ; 
 - 
 + 
 String name = getUniqueName ( callback ) ; 
 String desc = name . replace ( ' . ' , ' / ' ) ; 
 String instType = Type . getInternalName ( callback . getDeclaringClass ( ) ) ; 
 String eventType = Type . getInternalName ( callback . getParameterTypes ( ) [ 0 ] ) ; 
 - 
 + 
 / * 
 System . out . println ( " Name : " + name ) ; 
 System . out . println ( " Desc : " + desc ) ; 
 @ @ - 68 , 7 + 81 , 7 @ @ public class ASMEventHandler implements IEventListener 
 System . out . println ( " Callback : " + callback . getName ( ) + Type . getMethodDescriptor ( callback ) ) ; 
 System . out . println ( " Event : " + eventType ) ; 
 * / 
 - 
 + 
 cw . visit ( V1 _ 6 , ACC _ PUBLIC | ACC _ SUPER , desc , null , " java / lang / Object " , new String [ ] { HANDLER _ DESC } ) ; 
 
 cw . visitSource ( " . dynamic " , null ) ; 
 @ @ - 105 , 22 + 118 , 22 @ @ public class ASMEventHandler implements IEventListener 
 cache . put ( callback , ret ) ; 
 return ret ; 
 } 
 - 
 + 
 private String getUniqueName ( Method callback ) 
 { 
 - return String . format ( " % s _ % d _ % s _ % s _ % s " , getClass ( ) . getName ( ) , IDs + + , 
 - callback . getDeclaringClass ( ) . getSimpleName ( ) , 
 - callback . getName ( ) , 
 + return String . format ( " % s _ % d _ % s _ % s _ % s " , getClass ( ) . getName ( ) , IDs + + , 
 + callback . getDeclaringClass ( ) . getSimpleName ( ) , 
 + callback . getName ( ) , 
 callback . getParameterTypes ( ) [ 0 ] . getSimpleName ( ) ) ; 
 } 
 - 
 + 
 private static class ASMClassLoader extends ClassLoader 
 { 
 private ASMClassLoader ( ) 
 { 
 super ( ASMClassLoader . class . getClassLoader ( ) ) ; 
 } 
 - 
 + 
 public Class < ? > define ( String name , byte [ ] data ) 
 { 
 return defineClass ( name , data , 0 , data . length ) ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / eventhandler / EventBus . java b / fml / src / main / java / cpw / mods / fml / common / eventhandler / EventBus . java 
 index aa6640d . . 3dfe411 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / eventhandler / EventBus . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / eventhandler / EventBus . java 
 @ @ - 3 , 18 + 3 , 23 @ @ package cpw . mods . fml . common . eventhandler ; 
 import java . lang . reflect . Constructor ; 
 import java . lang . reflect . Method ; 
 import java . util . ArrayList ; 
 + import java . util . Map ; 
 import java . util . Set ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 
 
 
 + import com . google . common . collect . MapMaker ; 
 import com . google . common . reflect . TypeToken ; 
 + import cpw . mods . fml . common . Loader ; 
 + import cpw . mods . fml . common . ModContainer ; 
 
 public class EventBus 
 { 
 private static int maxID = 0 ; 
 
 private ConcurrentHashMap < Object , ArrayList < IEventListener > > listeners = new ConcurrentHashMap < Object , ArrayList < IEventListener > > ( ) ; 
 + private Map < Object , ModContainer > listenerOwners = new MapMaker ( ) . weakKeys ( ) . weakValues ( ) . makeMap ( ) ; 
 private final int busID = maxID + + ; 
 
 public EventBus ( ) 
 @ @ - 29 , 6 + 34 , 7 @ @ public class EventBus 
 return ; 
 } 
 
 + listenerOwners . put ( target , Loader . instance ( ) . activeModContainer ( ) ) ; 
 Set < ? extends Class < ? > > supers = TypeToken . of ( target . getClass ( ) ) . getTypes ( ) . rawTypes ( ) ; 
 for ( Method method : target . getClass ( ) . getMethods ( ) ) 
 { 
 @ @ - 52 , 10 + 58 , 10 @ @ public class EventBus 
 
 if ( ! Event . class . isAssignableFrom ( eventType ) ) 
 { 
 - throw new IllegalArgumentException ( " Method " + method + " has @ SubscribeEvent annotation , but takes a argument that is not a Event " + eventType ) ; 
 + throw new IllegalArgumentException ( " Method " + method + " has @ SubscribeEvent annotation , but takes a argument that is not an Event " + eventType ) ; 
 } 
 
 - register ( eventType , target , method ) ; 
 + register ( eventType , target , method , Loader . instance ( ) . activeModContainer ( ) ) ; 
 break ; 
 } 
 } 
 @ @ - 67 , 14 + 73 , 14 @ @ public class EventBus 
 } 
 } 
 
 - private void register ( Class < ? > eventType , Object target , Method method ) 
 + private void register ( Class < ? > eventType , Object target , Method method , ModContainer owner ) 
 { 
 try 
 { 
 Constructor < ? > ctr = eventType . getConstructor ( ) ; 
 ctr . setAccessible ( true ) ; 
 Event event = ( Event ) ctr . newInstance ( ) ; 
 - ASMEventHandler listener = new ASMEventHandler ( target , method ) ; 
 + ASMEventHandler listener = new ASMEventHandler ( target , method , owner ) ; 
 event . getListenerList ( ) . register ( busID , listener . getPriority ( ) , listener ) ; 
 
 ArrayList < IEventListener > others = listeners . get ( target ) ; 
 diff - - git a / fml / src / main / resources / log4j2 . xml b / fml / src / main / resources / log4j2 . xml 
 index 18eab39 . . 3f9cb3b 100644 
 - - - a / fml / src / main / resources / log4j2 . xml 
 + + + b / fml / src / main / resources / log4j2 . xml 
 @ @ - 21 , 7 + 21 , 7 @ @ 
 < Routes pattern = " $ $ { ctx : side } " > 
 < Route > 
 < RollingRandomAccessFile name = " FmlFile " fileName = " logs / fml - $ { ctx : side } - latest . log " filePattern = " logs / fml - $ { ctx : side } - % i . log " > 
 - < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " / > 
 + < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger / % X { mod } ] : % msg % n " / > 
 < DefaultRolloverStrategy max = " 3 " fileIndex = " max " / > 
 < Policies > 
 < OnStartupTriggeringPolicy / >
