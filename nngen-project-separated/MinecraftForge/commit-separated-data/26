BLEU SCORE: 0.03715939007251811

TEST MSG: Fix # 5659 setdimension command entity filtering , avoid inverting logic
GENERATED MSG: Fix StartupQuery to run properly on dedicated server . . Closes # 5649

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / server / command / CommandSetDimension . java b / src / main / java / net / minecraftforge / server / command / CommandSetDimension . java <nl> index a599021 . . 2bebe36 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / command / CommandSetDimension . java <nl> + + + b / src / main / java / net / minecraftforge / server / command / CommandSetDimension . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import com . mojang . brigadier . exceptions . DynamicCommandExceptionType ; <nl> import com . mojang . brigadier . exceptions . SimpleCommandExceptionType ; <nl> <nl> import java . util . Collection ; <nl> + import java . util . function . Predicate ; <nl> <nl> public class CommandSetDimension <nl> { <nl> @ @ - 58 , 7 + 59 , 7 @ @ public class CommandSetDimension <nl> <nl> private static int execute ( CommandSource sender , Collection < ? extends Entity > entities , DimensionType dim , BlockPos pos ) throws CommandSyntaxException <nl> { <nl> - entities . removeIf ( CommandSetDimension : : checkEntity ) ; <nl> + entities . removeIf ( e - > ! canEntityTeleport ( e ) ) ; <nl> if ( entities . isEmpty ( ) ) <nl> throw NO _ ENTITIES . create ( ) ; <nl> <nl> @ @ - 72 , 10 + 73 , 10 @ @ public class CommandSetDimension <nl> return 0 ; <nl> } <nl> <nl> - private static boolean checkEntity ( Entity entity ) <nl> + private static boolean canEntityTeleport ( Entity entity ) <nl> { <nl> - / / use vanilla portal logic , try to avoid doing anything too silly <nl> - return entity . isPassenger ( ) | | entity . isBeingRidden ( ) | | entity . isNonBoss ( ) ; <nl> + / / use vanilla portal logic from BlockPortal # onEntityCollision <nl> + return ! entity . isPassenger ( ) & & ! entity . isBeingRidden ( ) & & entity . isNonBoss ( ) ; <nl> } <nl> <nl> private static class CommandTeleporter implements ITeleporter
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> index 19ce39c . . 9917f95 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> @ @ - 53 , 6 + 53 , 7 @ @ import net . minecraft . world . WorldServerMulti ; <nl> import net . minecraft . world . dimension . DimensionType ; <nl> import net . minecraftforge . event . world . RegisterDimensionsEvent ; <nl> import net . minecraftforge . event . world . WorldEvent ; <nl> + import net . minecraftforge . fml . StartupQuery ; <nl> import net . minecraftforge . registries . ClearableRegistry ; <nl> import net . minecraftforge . registries . ForgeRegistries ; <nl> <nl> @ @ - 151 , 6 + 152 , 11 @ @ public class DimensionManager <nl> Validate . notNull ( server , " Must provide server when creating world " ) ; <nl> Validate . notNull ( dim , " Dimension type must not be null " ) ; <nl> <nl> + / / If we ' re in the early stages of loading , we need to return null so CommandSource can work properly for command function <nl> + if ( StartupQuery . pendingQuery ( ) ) { <nl> + return null ; <nl> + } <nl> + <nl> if ( resetUnloadDelay & & unloadQueue . contains ( dim . getId ( ) ) ) <nl> getData ( dim ) . ticksWaited = 0 ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java b / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java <nl> index 1bf6e2e . . 32af99f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java <nl> + + + b / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java <nl> @ @ - 90 , 6 + 90 , 9 @ @ public final class FMLWorldPersistenceHook implements WorldPersistenceHooks . Worl <nl> { <nl> NBTTagCompound mod = modList . getCompound ( i ) ; <nl> String modId = mod . getString ( " ModId " ) ; <nl> + if ( Objects . equals ( " minecraft " , modId ) ) { <nl> + continue ; <nl> + } <nl> String modVersion = mod . getString ( " ModVersion " ) ; <nl> Optional < ? extends ModContainer > container = ModList . get ( ) . getModContainerById ( modId ) ; <nl> if ( ! container . isPresent ( ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / SidedProvider . java b / src / main / java / net / minecraftforge / fml / SidedProvider . java <nl> index 29458d3 . . ae744f3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / SidedProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / SidedProvider . java <nl> @ @ - 48 , 8 + 48 , 8 @ @ public enum SidedProvider <nl> ( ) - > str - > str ) , <nl> @ SuppressWarnings ( " Convert2MethodRef " ) / / need to not be methodrefs to avoid classloading all of StartupQuery ' s data ( supplier is coming from StartupQuery ) <nl> STARTUPQUERY ( <nl> - c - > StartupQuery . QueryWrapper . clientQuery ( c ) , <nl> - s - > StartupQuery . QueryWrapper . dedicatedServerQuery ( s ) , <nl> + c - > StartupQuery . QueryWrapperClient . clientQuery ( c ) , <nl> + s - > StartupQuery . QueryWrapperServer . dedicatedServerQuery ( s ) , <nl> ( ) - > { throw new UnsupportedOperationException ( ) ; } ) ; <nl> <nl> private static Supplier < Minecraft > client ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / StartupQuery . java b / src / main / java / net / minecraftforge / fml / StartupQuery . java <nl> index a57c3ae . . 54c83ba 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / StartupQuery . java <nl> + + + b / src / main / java / net / minecraftforge / fml / StartupQuery . java <nl> @ @ - 70 , 7 + 70 , 9 @ @ public class StartupQuery { <nl> throw new AbortedException ( ) ; / / to halt the server <nl> } <nl> <nl> - <nl> + public static boolean pendingQuery ( ) { <nl> + return pending ! = null ; <nl> + } <nl> public static void reset ( ) <nl> { <nl> pending = null ; <nl> @ @ - 89 , 6 + 91 , 7 @ @ public class StartupQuery { <nl> } <nl> catch ( RuntimeException e ) <nl> { <nl> + LOGGER . error ( SQ , " An exception occurred during startup query handling " , e ) ; <nl> } <nl> pending . throwException ( ) ; <nl> } <nl> @ @ - 212 , 44 + 215 , 35 @ @ public class StartupQuery { <nl> } <nl> <nl> <nl> - public static class QueryWrapper <nl> - { <nl> - public static Consumer < StartupQuery > clientQuery ( Supplier < Minecraft > clientSupplier ) <nl> - { <nl> + public static class QueryWrapperClient { <nl> + public static Consumer < StartupQuery > clientQuery ( Supplier < Minecraft > clientSupplier ) { <nl> return ( query ) - > { <nl> Minecraft client = clientSupplier . get ( ) ; <nl> - if ( query . getResult ( ) = = null ) <nl> - { <nl> + if ( query . getResult ( ) = = null ) { <nl> client . displayGuiScreen ( new GuiNotification ( query ) ) ; <nl> - } <nl> - else <nl> - { <nl> + } else { <nl> client . displayGuiScreen ( new GuiConfirmation ( query ) ) ; <nl> } <nl> <nl> - if ( query . isSynchronous ( ) ) <nl> - { <nl> - while ( client . currentScreen instanceof GuiNotification ) <nl> - { <nl> - if ( Thread . interrupted ( ) ) <nl> - { <nl> + if ( query . isSynchronous ( ) ) { <nl> + while ( client . currentScreen instanceof GuiNotification ) { <nl> + if ( Thread . interrupted ( ) ) { <nl> query . exception = new InterruptedException ( ) ; <nl> throw new RuntimeException ( ) ; <nl> } <nl> <nl> - try <nl> - { <nl> + try { <nl> Thread . sleep ( 50 ) ; <nl> - } <nl> - catch ( InterruptedException ie ) <nl> - { <nl> + } catch ( InterruptedException ie ) { <nl> query . exception = ie ; <nl> } <nl> } <nl> } <nl> } ; <nl> } <nl> + } <nl> <nl> + public static class QueryWrapperServer { <nl> public static Consumer < StartupQuery > dedicatedServerQuery ( Supplier < DedicatedServer > serverSupplier ) <nl> { <nl> return ( query ) - > { <nl> diff - - git a / src / main / java / net / minecraftforge / server / console / TerminalHandler . java b / src / main / java / net / minecraftforge / server / console / TerminalHandler . java <nl> index 68a26e7 . . 1c87ed9 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / console / TerminalHandler . java <nl> + + + b / src / main / java / net / minecraftforge / server / console / TerminalHandler . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package net . minecraftforge . server . console ; <nl> <nl> import net . minecraft . server . dedicated . DedicatedServer ; <nl> + import net . minecraftforge . fml . StartupQuery ; <nl> import net . minecrell . terminalconsole . TerminalConsoleAppender ; <nl> import org . jline . reader . EndOfFileException ; <nl> import org . jline . reader . LineReader ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / server / command / CommandSetDimension . java b / src / main / java / net / minecraftforge / server / command / CommandSetDimension . java 
 index a599021 . . 2bebe36 100644 
 - - - a / src / main / java / net / minecraftforge / server / command / CommandSetDimension . java 
 + + + b / src / main / java / net / minecraftforge / server / command / CommandSetDimension . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import com . mojang . brigadier . exceptions . DynamicCommandExceptionType ; 
 import com . mojang . brigadier . exceptions . SimpleCommandExceptionType ; 
 
 import java . util . Collection ; 
 + import java . util . function . Predicate ; 
 
 public class CommandSetDimension 
 { 
 @ @ - 58 , 7 + 59 , 7 @ @ public class CommandSetDimension 
 
 private static int execute ( CommandSource sender , Collection < ? extends Entity > entities , DimensionType dim , BlockPos pos ) throws CommandSyntaxException 
 { 
 - entities . removeIf ( CommandSetDimension : : checkEntity ) ; 
 + entities . removeIf ( e - > ! canEntityTeleport ( e ) ) ; 
 if ( entities . isEmpty ( ) ) 
 throw NO _ ENTITIES . create ( ) ; 
 
 @ @ - 72 , 10 + 73 , 10 @ @ public class CommandSetDimension 
 return 0 ; 
 } 
 
 - private static boolean checkEntity ( Entity entity ) 
 + private static boolean canEntityTeleport ( Entity entity ) 
 { 
 - / / use vanilla portal logic , try to avoid doing anything too silly 
 - return entity . isPassenger ( ) | | entity . isBeingRidden ( ) | | entity . isNonBoss ( ) ; 
 + / / use vanilla portal logic from BlockPortal # onEntityCollision 
 + return ! entity . isPassenger ( ) & & ! entity . isBeingRidden ( ) & & entity . isNonBoss ( ) ; 
 } 
 
 private static class CommandTeleporter implements ITeleporter

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 index 19ce39c . . 9917f95 100644 
 - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java 
 + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 @ @ - 53 , 6 + 53 , 7 @ @ import net . minecraft . world . WorldServerMulti ; 
 import net . minecraft . world . dimension . DimensionType ; 
 import net . minecraftforge . event . world . RegisterDimensionsEvent ; 
 import net . minecraftforge . event . world . WorldEvent ; 
 + import net . minecraftforge . fml . StartupQuery ; 
 import net . minecraftforge . registries . ClearableRegistry ; 
 import net . minecraftforge . registries . ForgeRegistries ; 
 
 @ @ - 151 , 6 + 152 , 11 @ @ public class DimensionManager 
 Validate . notNull ( server , " Must provide server when creating world " ) ; 
 Validate . notNull ( dim , " Dimension type must not be null " ) ; 
 
 + / / If we ' re in the early stages of loading , we need to return null so CommandSource can work properly for command function 
 + if ( StartupQuery . pendingQuery ( ) ) { 
 + return null ; 
 + } 
 + 
 if ( resetUnloadDelay & & unloadQueue . contains ( dim . getId ( ) ) ) 
 getData ( dim ) . ticksWaited = 0 ; 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java b / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java 
 index 1bf6e2e . . 32af99f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java 
 + + + b / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java 
 @ @ - 90 , 6 + 90 , 9 @ @ public final class FMLWorldPersistenceHook implements WorldPersistenceHooks . Worl 
 { 
 NBTTagCompound mod = modList . getCompound ( i ) ; 
 String modId = mod . getString ( " ModId " ) ; 
 + if ( Objects . equals ( " minecraft " , modId ) ) { 
 + continue ; 
 + } 
 String modVersion = mod . getString ( " ModVersion " ) ; 
 Optional < ? extends ModContainer > container = ModList . get ( ) . getModContainerById ( modId ) ; 
 if ( ! container . isPresent ( ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / SidedProvider . java b / src / main / java / net / minecraftforge / fml / SidedProvider . java 
 index 29458d3 . . ae744f3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / SidedProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / SidedProvider . java 
 @ @ - 48 , 8 + 48 , 8 @ @ public enum SidedProvider 
 ( ) - > str - > str ) , 
 @ SuppressWarnings ( " Convert2MethodRef " ) / / need to not be methodrefs to avoid classloading all of StartupQuery ' s data ( supplier is coming from StartupQuery ) 
 STARTUPQUERY ( 
 - c - > StartupQuery . QueryWrapper . clientQuery ( c ) , 
 - s - > StartupQuery . QueryWrapper . dedicatedServerQuery ( s ) , 
 + c - > StartupQuery . QueryWrapperClient . clientQuery ( c ) , 
 + s - > StartupQuery . QueryWrapperServer . dedicatedServerQuery ( s ) , 
 ( ) - > { throw new UnsupportedOperationException ( ) ; } ) ; 
 
 private static Supplier < Minecraft > client ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / StartupQuery . java b / src / main / java / net / minecraftforge / fml / StartupQuery . java 
 index a57c3ae . . 54c83ba 100644 
 - - - a / src / main / java / net / minecraftforge / fml / StartupQuery . java 
 + + + b / src / main / java / net / minecraftforge / fml / StartupQuery . java 
 @ @ - 70 , 7 + 70 , 9 @ @ public class StartupQuery { 
 throw new AbortedException ( ) ; / / to halt the server 
 } 
 
 - 
 + public static boolean pendingQuery ( ) { 
 + return pending ! = null ; 
 + } 
 public static void reset ( ) 
 { 
 pending = null ; 
 @ @ - 89 , 6 + 91 , 7 @ @ public class StartupQuery { 
 } 
 catch ( RuntimeException e ) 
 { 
 + LOGGER . error ( SQ , " An exception occurred during startup query handling " , e ) ; 
 } 
 pending . throwException ( ) ; 
 } 
 @ @ - 212 , 44 + 215 , 35 @ @ public class StartupQuery { 
 } 
 
 
 - public static class QueryWrapper 
 - { 
 - public static Consumer < StartupQuery > clientQuery ( Supplier < Minecraft > clientSupplier ) 
 - { 
 + public static class QueryWrapperClient { 
 + public static Consumer < StartupQuery > clientQuery ( Supplier < Minecraft > clientSupplier ) { 
 return ( query ) - > { 
 Minecraft client = clientSupplier . get ( ) ; 
 - if ( query . getResult ( ) = = null ) 
 - { 
 + if ( query . getResult ( ) = = null ) { 
 client . displayGuiScreen ( new GuiNotification ( query ) ) ; 
 - } 
 - else 
 - { 
 + } else { 
 client . displayGuiScreen ( new GuiConfirmation ( query ) ) ; 
 } 
 
 - if ( query . isSynchronous ( ) ) 
 - { 
 - while ( client . currentScreen instanceof GuiNotification ) 
 - { 
 - if ( Thread . interrupted ( ) ) 
 - { 
 + if ( query . isSynchronous ( ) ) { 
 + while ( client . currentScreen instanceof GuiNotification ) { 
 + if ( Thread . interrupted ( ) ) { 
 query . exception = new InterruptedException ( ) ; 
 throw new RuntimeException ( ) ; 
 } 
 
 - try 
 - { 
 + try { 
 Thread . sleep ( 50 ) ; 
 - } 
 - catch ( InterruptedException ie ) 
 - { 
 + } catch ( InterruptedException ie ) { 
 query . exception = ie ; 
 } 
 } 
 } 
 } ; 
 } 
 + } 
 
 + public static class QueryWrapperServer { 
 public static Consumer < StartupQuery > dedicatedServerQuery ( Supplier < DedicatedServer > serverSupplier ) 
 { 
 return ( query ) - > { 
 diff - - git a / src / main / java / net / minecraftforge / server / console / TerminalHandler . java b / src / main / java / net / minecraftforge / server / console / TerminalHandler . java 
 index 68a26e7 . . 1c87ed9 100644 
 - - - a / src / main / java / net / minecraftforge / server / console / TerminalHandler . java 
 + + + b / src / main / java / net / minecraftforge / server / console / TerminalHandler . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package net . minecraftforge . server . console ; 
 
 import net . minecraft . server . dedicated . DedicatedServer ; 
 + import net . minecraftforge . fml . StartupQuery ; 
 import net . minecrell . terminalconsole . TerminalConsoleAppender ; 
 import org . jline . reader . EndOfFileException ; 
 import org . jline . reader . LineReader ;
