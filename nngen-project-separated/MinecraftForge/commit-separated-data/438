BLEU SCORE: 0.040583489434387374

TEST MSG: Fix ShapedOreRecipe matching . # 4038
GENERATED MSG: Add Forge fluid handler test

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> index 4c11ead . . 8659d97 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> @ @ - 106 , 6 + 106 , 9 @ @ public class ShapedOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implement <nl> return false ; <nl> } <nl> <nl> + / * * <nl> + * Based on { @ link net . minecraft . item . crafting . ShapedRecipes # checkMatch ( InventoryCrafting , int , int , boolean ) } <nl> + * / <nl> protected boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirror ) <nl> { <nl> for ( int x = 0 ; x < MAX _ CRAFT _ GRID _ WIDTH ; x + + ) <nl> @ @ - 114 , 7 + 117 , 7 @ @ public class ShapedOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implement <nl> { <nl> int subX = x - startX ; <nl> int subY = y - startY ; <nl> - Ingredient target = null ; <nl> + Ingredient target = Ingredient . EMPTY ; <nl> <nl> if ( subX > = 0 & & subY > = 0 & & subX < width & & subY < height ) <nl> { <nl> @ @ - 126 , 11 + 129 , 11 @ @ public class ShapedOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implement <nl> { <nl> target = input . get ( subX + subY * width ) ; <nl> } <nl> - <nl> - if ( ! target . apply ( inv . getStackInRowAndColumn ( x , y ) ) ) <nl> - { <nl> - return false ; <nl> - } <nl> + } <nl> + <nl> + if ( ! target . apply ( inv . getStackInRowAndColumn ( x , y ) ) ) <nl> + { <nl> + return false ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / RecipeTestMod . java b / src / test / java / net / minecraftforge / debug / RecipeTestMod . java <nl> new file mode 100644 <nl> index 0000000 . . ee77914 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / RecipeTestMod . java <nl> @ @ - 0 , 0 + 1 , 30 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . init . Blocks ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . item . crafting . ShapedRecipes ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . common . crafting . CraftingHelper ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . oredict . ShapedOreRecipe ; <nl> + <nl> + @ Mod ( modid = " recipetest " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class RecipeTestMod <nl> + { <nl> + @ Mod . EventHandler <nl> + public void preinit ( FMLPreInitializationEvent event ) <nl> + { <nl> + ResourceLocation location1 = new ResourceLocation ( " recipetest " , " dirt " ) ; <nl> + ShapedOreRecipe recipe1 = new ShapedOreRecipe ( location1 , new ItemStack ( Blocks . DIAMOND _ BLOCK ) , " DDD " , ' D ' , new ItemStack ( Blocks . DIRT ) ) ; <nl> + recipe1 . setRegistryName ( location1 ) ; <nl> + GameRegistry . register ( recipe1 ) ; <nl> + <nl> + ResourceLocation location2 = new ResourceLocation ( " recipetest " , " stone " ) ; <nl> + CraftingHelper . ShapedPrimer primer1 = CraftingHelper . parseShaped ( " SSS " , ' S ' , new ItemStack ( Blocks . IRON _ BLOCK ) ) ; <nl> + ShapedRecipes recipe2 = new ShapedRecipes ( location2 . getResourcePath ( ) , primer1 . width , primer1 . height , primer1 . input , new ItemStack ( Blocks . GOLD _ BLOCK ) ) ; <nl> + recipe2 . setRegistryName ( location2 ) ; <nl> + GameRegistry . register ( recipe2 ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> index e38452f . . ba06fcc 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest <nl> private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; <nl> private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; <nl> <nl> + private static final boolean ENABLE = false ; <nl> + <nl> static <nl> { <nl> - FluidRegistry . enableUniversalBucket ( ) ; <nl> + if ( ENABLE ) <nl> + { <nl> + FluidRegistry . enableUniversalBucket ( ) ; <nl> + } <nl> } <nl> <nl> @ SidedProxy <nl> @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest <nl> @ Override <nl> void setupModels ( ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> ModelLoader . setBucketModelDefinition ( dynBucket ) ; <nl> <nl> final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; <nl> @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> GameRegistry . register ( new TestItem ( ) , testItemName ) ; <nl> Block tank = new BlockSimpleTank ( ) ; <nl> GameRegistry . register ( tank , simpleTankName ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> index 9d92565 . . ccbfb40 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug <nl> public static final String MODID = " ForgeDebugModelFluid " ; <nl> public static final String VERSION = " 1 . 0 " ; <nl> <nl> + public static final boolean ENABLE = false ; <nl> + <nl> @ SidedProxy <nl> public static CommonProxy proxy ; <nl> <nl> public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; <nl> <nl> @ EventHandler <nl> - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + if ( ENABLE ) <nl> + { <nl> + proxy . preInit ( event ) ; <nl> + } <nl> + } <nl> <nl> public static class CommonProxy <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ed4331 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . fluids . Fluid ; <nl> + import net . minecraftforge . fluids . FluidRegistry ; <nl> + import net . minecraftforge . fluids . FluidStack ; <nl> + import net . minecraftforge . fluids . FluidUtil ; <nl> + import net . minecraftforge . fluids . capability . IFluidHandler ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; <nl> + import net . minecraftforge . fml . common . registry . ForgeRegistries ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) <nl> + public class FluidHandlerTest <nl> + { <nl> + 	 public static final boolean ENABLE = false ; <nl> + <nl> + 	 @ Mod . EventHandler <nl> + 	 public void loadComplete ( FMLLoadCompleteEvent event ) <nl> + 	 { <nl> + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) <nl> + 	 	 	 return ; <nl> + <nl> + 	 	 for ( ItemStack stack : getAllItems ( ) ) <nl> + 	 	 { <nl> + 	 	 	 testFluidContainer ( stack ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static void testFluidContainer ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 ItemStack drainedStack = stack . copy ( ) ; <nl> + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; <nl> + 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 { <nl> + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; <nl> + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; <nl> + <nl> + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; <nl> + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; <nl> + 	 	 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 	 	 { <nl> + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; <nl> + 	 	 	 	 	 if ( filled > 0 ) <nl> + 	 	 	 	 	 { <nl> + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; <nl> + 	 	 	 	 	 } <nl> + 	 	 	 	 } <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String fluidString ( FluidStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null ) <nl> + 	 	 { <nl> + 	 	 	 return " no fluid " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String stackString ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) <nl> + 	 	 { <nl> + 	 	 	 return " no item " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 String resourceDomain ; <nl> + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = " unknown " ; <nl> + 	 	 	 } <nl> + 	 	 	 else <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; <nl> + 	 	 	 } <nl> + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static List < ItemStack > getAllItems ( ) <nl> + 	 { <nl> + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; <nl> + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) <nl> + 	 	 { <nl> + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 item . getSubItems ( item , tab , list ) ; <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 	 return list ; <nl> + 	 } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 index 4c11ead . . 8659d97 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 + + + b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 @ @ - 106 , 6 + 106 , 9 @ @ public class ShapedOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implement 
 return false ; 
 } 
 
 + / * * 
 + * Based on { @ link net . minecraft . item . crafting . ShapedRecipes # checkMatch ( InventoryCrafting , int , int , boolean ) } 
 + * / 
 protected boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirror ) 
 { 
 for ( int x = 0 ; x < MAX _ CRAFT _ GRID _ WIDTH ; x + + ) 
 @ @ - 114 , 7 + 117 , 7 @ @ public class ShapedOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implement 
 { 
 int subX = x - startX ; 
 int subY = y - startY ; 
 - Ingredient target = null ; 
 + Ingredient target = Ingredient . EMPTY ; 
 
 if ( subX > = 0 & & subY > = 0 & & subX < width & & subY < height ) 
 { 
 @ @ - 126 , 11 + 129 , 11 @ @ public class ShapedOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implement 
 { 
 target = input . get ( subX + subY * width ) ; 
 } 
 - 
 - if ( ! target . apply ( inv . getStackInRowAndColumn ( x , y ) ) ) 
 - { 
 - return false ; 
 - } 
 + } 
 + 
 + if ( ! target . apply ( inv . getStackInRowAndColumn ( x , y ) ) ) 
 + { 
 + return false ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / RecipeTestMod . java b / src / test / java / net / minecraftforge / debug / RecipeTestMod . java 
 new file mode 100644 
 index 0000000 . . ee77914 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / RecipeTestMod . java 
 @ @ - 0 , 0 + 1 , 30 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . init . Blocks ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . item . crafting . ShapedRecipes ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . common . crafting . CraftingHelper ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . oredict . ShapedOreRecipe ; 
 + 
 + @ Mod ( modid = " recipetest " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class RecipeTestMod 
 + { 
 + @ Mod . EventHandler 
 + public void preinit ( FMLPreInitializationEvent event ) 
 + { 
 + ResourceLocation location1 = new ResourceLocation ( " recipetest " , " dirt " ) ; 
 + ShapedOreRecipe recipe1 = new ShapedOreRecipe ( location1 , new ItemStack ( Blocks . DIAMOND _ BLOCK ) , " DDD " , ' D ' , new ItemStack ( Blocks . DIRT ) ) ; 
 + recipe1 . setRegistryName ( location1 ) ; 
 + GameRegistry . register ( recipe1 ) ; 
 + 
 + ResourceLocation location2 = new ResourceLocation ( " recipetest " , " stone " ) ; 
 + CraftingHelper . ShapedPrimer primer1 = CraftingHelper . parseShaped ( " SSS " , ' S ' , new ItemStack ( Blocks . IRON _ BLOCK ) ) ; 
 + ShapedRecipes recipe2 = new ShapedRecipes ( location2 . getResourcePath ( ) , primer1 . width , primer1 . height , primer1 . input , new ItemStack ( Blocks . GOLD _ BLOCK ) ) ; 
 + recipe2 . setRegistryName ( location2 ) ; 
 + GameRegistry . register ( recipe2 ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 index e38452f . . ba06fcc 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest 
 private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; 
 private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; 
 
 + private static final boolean ENABLE = false ; 
 + 
 static 
 { 
 - FluidRegistry . enableUniversalBucket ( ) ; 
 + if ( ENABLE ) 
 + { 
 + FluidRegistry . enableUniversalBucket ( ) ; 
 + } 
 } 
 
 @ SidedProxy 
 @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest 
 @ Override 
 void setupModels ( ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 ModelLoader . setBucketModelDefinition ( dynBucket ) ; 
 
 final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; 
 @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 GameRegistry . register ( new TestItem ( ) , testItemName ) ; 
 Block tank = new BlockSimpleTank ( ) ; 
 GameRegistry . register ( tank , simpleTankName ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 index 9d92565 . . ccbfb40 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug 
 public static final String MODID = " ForgeDebugModelFluid " ; 
 public static final String VERSION = " 1 . 0 " ; 
 
 + public static final boolean ENABLE = false ; 
 + 
 @ SidedProxy 
 public static CommonProxy proxy ; 
 
 public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; 
 
 @ EventHandler 
 - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + if ( ENABLE ) 
 + { 
 + proxy . preInit ( event ) ; 
 + } 
 + } 
 
 public static class CommonProxy 
 { 
 diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 new file mode 100644 
 index 0000000 . . 0ed4331 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . fluids . Fluid ; 
 + import net . minecraftforge . fluids . FluidRegistry ; 
 + import net . minecraftforge . fluids . FluidStack ; 
 + import net . minecraftforge . fluids . FluidUtil ; 
 + import net . minecraftforge . fluids . capability . IFluidHandler ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; 
 + import net . minecraftforge . fml . common . registry . ForgeRegistries ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) 
 + public class FluidHandlerTest 
 + { 
 + 	 public static final boolean ENABLE = false ; 
 + 
 + 	 @ Mod . EventHandler 
 + 	 public void loadComplete ( FMLLoadCompleteEvent event ) 
 + 	 { 
 + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) 
 + 	 	 	 return ; 
 + 
 + 	 	 for ( ItemStack stack : getAllItems ( ) ) 
 + 	 	 { 
 + 	 	 	 testFluidContainer ( stack ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static void testFluidContainer ( ItemStack stack ) 
 + 	 { 
 + 	 	 ItemStack drainedStack = stack . copy ( ) ; 
 + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; 
 + 	 	 if ( fluidHandler ! = null ) 
 + 	 	 { 
 + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; 
 + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; 
 + 
 + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; 
 + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; 
 + 	 	 	 	 if ( fluidHandler ! = null ) 
 + 	 	 	 	 { 
 + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; 
 + 	 	 	 	 	 if ( filled > 0 ) 
 + 	 	 	 	 	 { 
 + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; 
 + 	 	 	 	 	 } 
 + 	 	 	 	 } 
 + 	 	 	 } 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String fluidString ( FluidStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null ) 
 + 	 	 { 
 + 	 	 	 return " no fluid " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String stackString ( ItemStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) 
 + 	 	 { 
 + 	 	 	 return " no item " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 String resourceDomain ; 
 + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = " unknown " ; 
 + 	 	 	 } 
 + 	 	 	 else 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; 
 + 	 	 	 } 
 + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static List < ItemStack > getAllItems ( ) 
 + 	 { 
 + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; 
 + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) 
 + 	 	 { 
 + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 item . getSubItems ( item , tab , list ) ; 
 + 	 	 	 } 
 + 	 	 } 
 + 	 	 return list ; 
 + 	 } 
 + }
