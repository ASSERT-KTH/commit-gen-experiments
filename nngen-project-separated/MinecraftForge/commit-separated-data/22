BLEU SCORE: 0.03089055318156698

TEST MSG: Fix potential issues with the Minecraft FakePlayer lingering around after world unloads .
GENERATED MSG: Cull FakePlayers when worlds are unloaded .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / util / FakePlayer . java b / src / main / java / net / minecraftforge / common / util / FakePlayer . java <nl> index e46f7d3 . . ad290ea 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / util / FakePlayer . java <nl> + + + b / src / main / java / net / minecraftforge / common / util / FakePlayer . java <nl> @ @ - 19 , 12 + 19 , 15 @ @ <nl> <nl> package net . minecraftforge . common . util ; <nl> <nl> + import javax . annotation . Nullable ; <nl> + <nl> import com . mojang . authlib . GameProfile ; <nl> <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . entity . player . EntityPlayerMP ; <nl> import net . minecraft . network . play . client . CPacketClientSettings ; <nl> + import net . minecraft . server . MinecraftServer ; <nl> import net . minecraft . server . management . PlayerInteractionManager ; <nl> import net . minecraft . stats . Stat ; <nl> import net . minecraft . util . DamageSource ; <nl> @ @ - 52 , 4 + 55 , 5 @ @ public class FakePlayer extends EntityPlayerMP <nl> @ Override public void tick ( ) { return ; } <nl> @ Override public Entity changeDimension ( DimensionType dim , ITeleporter teleporter ) { return this ; } <nl> @ Override public void handleClientSettings ( CPacketClientSettings pkt ) { return ; } <nl> + @ Override @ Nullable public MinecraftServer getServer ( ) { return FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) ; } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java b / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java <nl> index 32c810e . . e1876e2 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java <nl> + + + b / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java <nl> @ @ - 68 , 5 + 68 , 13 @ @ public class FakePlayerFactory <nl> public static void unloadWorld ( WorldServer world ) <nl> { <nl> fakePlayers . entrySet ( ) . removeIf ( entry - > entry . getValue ( ) . world = = world ) ; <nl> + if ( MINECRAFT _ PLAYER ! = null & & MINECRAFT _ PLAYER . get ( ) ! = null & & MINECRAFT _ PLAYER . get ( ) . world = = world ) / / This shouldn ' t be strictly necessary , but lets be aggressive . <nl> + { <nl> + FakePlayer mc = MINECRAFT _ PLAYER . get ( ) ; <nl> + if ( mc ! = null & & mc . world = = world ) <nl> + { <nl> + MINECRAFT _ PLAYER = null ; <nl> + } <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java b / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java <nl> index e84f3bf . . 1847fd9 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java <nl> @ @ - 3 , 11 + 3 , 12 @ @ package net . minecraftforge . common ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . eventhandler . EventPriority ; <nl> import cpw . mods . fml . common . eventhandler . SubscribeEvent ; <nl> - <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . item . EntityItem ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . world . WorldServer ; <nl> + import net . minecraftforge . common . util . FakePlayerFactory ; <nl> import net . minecraftforge . event . entity . * ; <nl> import net . minecraftforge . event . world . WorldEvent ; <nl> <nl> @ @ - 73 , 5 + 74 , 7 @ @ public class ForgeInternalHandler <nl> public void onDimensionUnload ( WorldEvent . Unload event ) <nl> { <nl> ForgeChunkManager . unloadWorld ( event . world ) ; <nl> + if ( event . world instanceof WorldServer ) <nl> + FakePlayerFactory . unloadWorld ( ( WorldServer ) event . world ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java b / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java <nl> index fa78cb5 . . 0ddc300 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java <nl> + + + b / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java <nl> @ @ - 1 , 10 + 1 , 14 @ @ <nl> package net . minecraftforge . common . util ; <nl> <nl> + import java . util . Iterator ; <nl> import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + <nl> import com . google . common . collect . Maps ; <nl> import com . mojang . authlib . GameProfile ; <nl> <nl> import net . minecraft . world . WorldServer ; <nl> + import net . minecraftforge . common . DimensionManager ; <nl> <nl> / / To be expanded for generic Mod fake players ? <nl> public class FakePlayerFactory <nl> @ @ - 24 , 7 + 28 , 9 @ @ public class FakePlayerFactory <nl> } <nl> <nl> / * * <nl> - * Get a fake player with a given username <nl> + * Get a fake player with a given username , <nl> + * Mods should either hold weak references to the return value , or listen for a <nl> + * WorldEvent . Unload and kill all references to prevent worlds staying in memory . <nl> * / <nl> public static FakePlayer get ( WorldServer world , GameProfile username ) <nl> { <nl> @ @ - 36 , 4 + 42 , 17 @ @ public class FakePlayerFactory <nl> <nl> return fakePlayers . get ( username ) ; <nl> } <nl> + <nl> + public static void unloadWorld ( WorldServer world ) <nl> + { <nl> + Iterator < Entry < GameProfile , FakePlayer > > itr = fakePlayers . entrySet ( ) . iterator ( ) ; <nl> + while ( itr . hasNext ( ) ) <nl> + { <nl> + Entry < GameProfile , FakePlayer > entry = itr . next ( ) ; <nl> + if ( entry . getValue ( ) . worldObj = = world ) <nl> + { <nl> + itr . remove ( ) ; <nl> + } <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / util / FakePlayer . java b / src / main / java / net / minecraftforge / common / util / FakePlayer . java 
 index e46f7d3 . . ad290ea 100644 
 - - - a / src / main / java / net / minecraftforge / common / util / FakePlayer . java 
 + + + b / src / main / java / net / minecraftforge / common / util / FakePlayer . java 
 @ @ - 19 , 12 + 19 , 15 @ @ 
 
 package net . minecraftforge . common . util ; 
 
 + import javax . annotation . Nullable ; 
 + 
 import com . mojang . authlib . GameProfile ; 
 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . entity . player . EntityPlayerMP ; 
 import net . minecraft . network . play . client . CPacketClientSettings ; 
 + import net . minecraft . server . MinecraftServer ; 
 import net . minecraft . server . management . PlayerInteractionManager ; 
 import net . minecraft . stats . Stat ; 
 import net . minecraft . util . DamageSource ; 
 @ @ - 52 , 4 + 55 , 5 @ @ public class FakePlayer extends EntityPlayerMP 
 @ Override public void tick ( ) { return ; } 
 @ Override public Entity changeDimension ( DimensionType dim , ITeleporter teleporter ) { return this ; } 
 @ Override public void handleClientSettings ( CPacketClientSettings pkt ) { return ; } 
 + @ Override @ Nullable public MinecraftServer getServer ( ) { return FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) ; } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java b / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java 
 index 32c810e . . e1876e2 100644 
 - - - a / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java 
 + + + b / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java 
 @ @ - 68 , 5 + 68 , 13 @ @ public class FakePlayerFactory 
 public static void unloadWorld ( WorldServer world ) 
 { 
 fakePlayers . entrySet ( ) . removeIf ( entry - > entry . getValue ( ) . world = = world ) ; 
 + if ( MINECRAFT _ PLAYER ! = null & & MINECRAFT _ PLAYER . get ( ) ! = null & & MINECRAFT _ PLAYER . get ( ) . world = = world ) / / This shouldn ' t be strictly necessary , but lets be aggressive . 
 + { 
 + FakePlayer mc = MINECRAFT _ PLAYER . get ( ) ; 
 + if ( mc ! = null & & mc . world = = world ) 
 + { 
 + MINECRAFT _ PLAYER = null ; 
 + } 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java b / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java 
 index e84f3bf . . 1847fd9 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java 
 @ @ - 3 , 11 + 3 , 12 @ @ package net . minecraftforge . common ; 
 import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . eventhandler . EventPriority ; 
 import cpw . mods . fml . common . eventhandler . SubscribeEvent ; 
 - 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . item . EntityItem ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 + import net . minecraft . world . WorldServer ; 
 + import net . minecraftforge . common . util . FakePlayerFactory ; 
 import net . minecraftforge . event . entity . * ; 
 import net . minecraftforge . event . world . WorldEvent ; 
 
 @ @ - 73 , 5 + 74 , 7 @ @ public class ForgeInternalHandler 
 public void onDimensionUnload ( WorldEvent . Unload event ) 
 { 
 ForgeChunkManager . unloadWorld ( event . world ) ; 
 + if ( event . world instanceof WorldServer ) 
 + FakePlayerFactory . unloadWorld ( ( WorldServer ) event . world ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java b / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java 
 index fa78cb5 . . 0ddc300 100644 
 - - - a / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java 
 + + + b / src / main / java / net / minecraftforge / common / util / FakePlayerFactory . java 
 @ @ - 1 , 10 + 1 , 14 @ @ 
 package net . minecraftforge . common . util ; 
 
 + import java . util . Iterator ; 
 import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + 
 import com . google . common . collect . Maps ; 
 import com . mojang . authlib . GameProfile ; 
 
 import net . minecraft . world . WorldServer ; 
 + import net . minecraftforge . common . DimensionManager ; 
 
 / / To be expanded for generic Mod fake players ? 
 public class FakePlayerFactory 
 @ @ - 24 , 7 + 28 , 9 @ @ public class FakePlayerFactory 
 } 
 
 / * * 
 - * Get a fake player with a given username 
 + * Get a fake player with a given username , 
 + * Mods should either hold weak references to the return value , or listen for a 
 + * WorldEvent . Unload and kill all references to prevent worlds staying in memory . 
 * / 
 public static FakePlayer get ( WorldServer world , GameProfile username ) 
 { 
 @ @ - 36 , 4 + 42 , 17 @ @ public class FakePlayerFactory 
 
 return fakePlayers . get ( username ) ; 
 } 
 + 
 + public static void unloadWorld ( WorldServer world ) 
 + { 
 + Iterator < Entry < GameProfile , FakePlayer > > itr = fakePlayers . entrySet ( ) . iterator ( ) ; 
 + while ( itr . hasNext ( ) ) 
 + { 
 + Entry < GameProfile , FakePlayer > entry = itr . next ( ) ; 
 + if ( entry . getValue ( ) . worldObj = = world ) 
 + { 
 + itr . remove ( ) ; 
 + } 
 + } 
 + } 
 }
