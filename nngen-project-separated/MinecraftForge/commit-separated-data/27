BLEU SCORE: 0.031085583786586417

TEST MSG: Allow items to control the rate of repair from mending
GENERATED MSG: Add Item . getModId to show which mod is associated with a subitem

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / item / EntityXPOrb . java . patch b / patches / minecraft / net / minecraft / entity / item / EntityXPOrb . java . patch <nl> index 26e6b8e . . f7ee527 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / item / EntityXPOrb . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / item / EntityXPOrb . java . patch <nl> @ @ - 18 , 7 + 18 , 7 @ @ <nl> if ( this . func _ 180431 _ b ( p _ 70097 _ 1 _ ) ) { <nl> return false ; <nl> } else { <nl> - @ @ - 178 , 6 + 180 , 7 @ @ <nl> + @ @ - 178 , 12 + 180 , 14 @ @ <nl> public void func _ 70100 _ b _ ( EntityPlayer p _ 70100 _ 1 _ ) { <nl> if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) { <nl> if ( this . field _ 70532 _ c = = 0 & & p _ 70100 _ 1 _ . field _ 71090 _ bL = = 0 ) { <nl> @ @ - 26 , 3 + 26 , 22 @ @ <nl> p _ 70100 _ 1 _ . field _ 71090 _ bL = 2 ; <nl> p _ 70100 _ 1 _ . func _ 71001 _ a ( this , 1 ) ; <nl> ItemStack itemstack = EnchantmentHelper . func _ 92099 _ a ( Enchantments . field _ 185296 _ A , p _ 70100 _ 1 _ ) ; <nl> + if ( ! itemstack . func _ 190926 _ b ( ) & & itemstack . func _ 77951 _ h ( ) ) { <nl> + - int i = Math . min ( this . func _ 184514 _ c ( this . field _ 70530 _ e ) , itemstack . func _ 77952 _ i ( ) ) ; <nl> + - this . field _ 70530 _ e - = this . func _ 184515 _ b ( i ) ; <nl> + + float ratio = itemstack . func _ 77973 _ b ( ) . getXpRepairRatio ( itemstack ) ; <nl> + + int i = Math . min ( roundAverage ( this . field _ 70530 _ e * ratio ) , itemstack . func _ 77952 _ i ( ) ) ; <nl> + + this . field _ 70530 _ e - = roundAverage ( i / ratio ) ; <nl> + itemstack . func _ 196085 _ b ( itemstack . func _ 77952 _ i ( ) - i ) ; <nl> + } <nl> + <nl> + @ @ - 261 , 4 + 265 , 9 @ @ <nl> + public boolean func _ 70075 _ an ( ) { <nl> + return false ; <nl> + } <nl> + + <nl> + + private static int roundAverage ( float value ) { <nl> + + double floor = Math . floor ( value ) ; <nl> + + return ( int ) floor + ( Math . random ( ) < value - floor ? 1 : 0 ) ; <nl> + + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java b / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java <nl> index 72ab747 . . 1c047df 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java <nl> + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java <nl> @ @ - 113 , 6 + 113 , 15 @ @ public interface IForgeItem <nl> * @ return True if reparable <nl> * / <nl> boolean isRepairable ( ) ; <nl> + <nl> + / * * <nl> + * Determines the amount of durability the mending enchantment <nl> + * will repair , on average , per point of experience . <nl> + * / <nl> + default float getXpRepairRatio ( ItemStack stack ) <nl> + { <nl> + return 2f ; <nl> + } <nl> <nl> / * * <nl> * Override this method to change the NBT data being sent to the client . You <nl> diff - - git a / src / test / java / net / minecraftforge / debug / item / MendingRepairTest . java b / src / test / java / net / minecraftforge / debug / item / MendingRepairTest . java <nl> new file mode 100644 <nl> index 0000000 . . 3286023 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / item / MendingRepairTest . java <nl> @ @ - 0 , 0 + 1 , 95 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . debug . item ; <nl> + <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . init . Enchantments ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . NonNullList ; <nl> + import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + @ Mod . EventBusSubscriber <nl> + @ Mod ( modid = MendingRepairTest . MOD _ ID , name = " Mending repair amount test mod " , version = " 1 . 0 " ) <nl> + public class MendingRepairTest <nl> + { <nl> + static final boolean ENABLED = true ; <nl> + static final String MOD _ ID = " mending _ repair _ test " ; <nl> + <nl> + @ GameRegistry . ObjectHolder ( MOD _ ID + " : test _ item " ) <nl> + public static final Item TEST _ ITEM = null ; <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerItems ( RegistryEvent . Register < Item > event ) <nl> + { <nl> + if ( ! ENABLED ) return ; <nl> + event . getRegistry ( ) . register ( <nl> + new TestItem ( ) <nl> + . setRegistryName ( MOD _ ID , " test _ item " ) <nl> + . setUnlocalizedName ( MOD _ ID + " . test _ item " ) <nl> + ) ; <nl> + } <nl> + <nl> + @ Mod . EventBusSubscriber ( modid = MOD _ ID , value = Side . CLIENT ) <nl> + public static final class ClientEventHandler <nl> + { <nl> + @ SubscribeEvent <nl> + public static void registerModels ( ModelRegistryEvent event ) <nl> + { <nl> + if ( ! ENABLED ) return ; <nl> + ModelLoader . setCustomModelResourceLocation ( TEST _ ITEM , 0 , new ModelResourceLocation ( " minecraft : blaze _ rod " , " inventory " ) ) ; <nl> + } <nl> + } <nl> + <nl> + private static final class TestItem extends Item <nl> + { <nl> + TestItem ( ) <nl> + { <nl> + maxStackSize = 1 ; <nl> + setMaxDamage ( 10 ) ; <nl> + setCreativeTab ( CreativeTabs . TOOLS ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void getSubItems ( CreativeTabs tab , NonNullList < ItemStack > items ) <nl> + { <nl> + if ( this . isInCreativeTab ( tab ) ) <nl> + { <nl> + ItemStack stack = new ItemStack ( this ) ; <nl> + stack . addEnchantment ( Enchantments . MENDING , 1 ) ; <nl> + stack . setItemDamage ( stack . getMaxDamage ( ) ) ; <nl> + items . add ( stack ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public float getXpRepairRatio ( ItemStack stack ) <nl> + { <nl> + return 0 . 1f ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> index 173edb7 . . e694f02 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / Item . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> @ @ - 70 , 7 + 70 , 7 @ @ <nl> CreativeTabs creativetabs = this . func _ 77640 _ w ( ) ; <nl> return creativetabs ! = null & & ( p _ 194125 _ 1 _ = = CreativeTabs . field _ 78027 _ g | | p _ 194125 _ 1 _ = = creativetabs ) ; <nl> } <nl> - @ @ - 435 , 11 + 445 , 683 @ @ <nl> + @ @ - 435 , 11 + 445 , 704 @ @ <nl> return false ; <nl> } <nl> <nl> @ @ - 680 , 6 + 680 , 27 @ @ <nl> + } <nl> + <nl> + / * * <nl> + + * Called to get the Mod ID of the mod that * created * the ItemStack , <nl> + + * instead of the real Mod ID that * registered * it . <nl> + + * <nl> + + * For example the Forge Universal Bucket creates a subitem for each modded fluid , <nl> + + * and it returns the modded fluid ' s Mod ID here . <nl> + + * <nl> + + * Mods that register subitems for other mods can override this . <nl> + + * Informational mods can call it to show the mod that created the item . <nl> + + * <nl> + + * @ param itemStack the ItemStack to check <nl> + + * @ return the Mod ID for the ItemStack , or <nl> + + * null when there is no specially associated mod and { @ link # getRegistryName ( ) } would return null . <nl> + + * / <nl> + + @ Nullable <nl> + + public String getCreatorModId ( ItemStack itemStack ) <nl> + + { <nl> + + ResourceLocation registryName = getRegistryName ( ) ; <nl> + + return registryName = = null ? null : registryName . func _ 110624 _ b ( ) ; <nl> + + } <nl> + + <nl> + + / * * <nl> + * Called from ItemStack . setItem , will hold extra data for the life of this ItemStack . <nl> + * Can be retrieved from stack . getCapabilities ( ) <nl> + * The NBT can be null if this is not called from readNBT or if the item the stack is <nl> @ @ - 754 , 7 + 775 , 7 @ @ <nl> public static void func _ 150900 _ l ( ) <nl> { <nl> func _ 179214 _ a ( Blocks . field _ 150350 _ a , new ItemAir ( Blocks . field _ 150350 _ a ) ) ; <nl> - @ @ - 999 , 6 + 1681 , 8 @ @ <nl> + @ @ - 999 , 6 + 1702 , 8 @ @ <nl> private final float field _ 78010 _ h ; <nl> private final float field _ 78011 _ i ; <nl> private final int field _ 78008 _ j ; <nl> @ @ - 763 , 7 + 784 , 7 @ @ <nl> <nl> private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) <nl> { <nl> - @ @ - 1034 , 6 + 1718 , 7 @ @ <nl> + @ @ - 1034 , 6 + 1739 , 7 @ @ <nl> return this . field _ 78008 _ j ; <nl> } <nl> <nl> @ @ - 771 , 7 + 792 , 7 @ @ <nl> public Item func _ 150995 _ f ( ) <nl> { <nl> if ( this = = WOOD ) <nl> - @ @ - 1057 , 5 + 1742 , 21 @ @ <nl> + @ @ - 1057 , 5 + 1763 , 21 @ @ <nl> return this = = DIAMOND ? Items . field _ 151045 _ i : null ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> index 82ad976 . . 282be11 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> @ @ - 356 , 6 + 356 , 21 @ @ public abstract class FluidRegistry <nl> return name ; <nl> } <nl> <nl> + @ Nullable <nl> + public static String getModId ( @ Nullable FluidStack fluidStack ) <nl> + { <nl> + if ( fluidStack ! = null ) <nl> + { <nl> + String defaultFluidName = getDefaultFluidName ( fluidStack . getFluid ( ) ) ; <nl> + if ( defaultFluidName ! = null ) <nl> + { <nl> + ResourceLocation fluidResourceName = new ResourceLocation ( defaultFluidName ) ; <nl> + return fluidResourceName . getResourceDomain ( ) ; <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> public static void loadFluidDefaults ( NBTTagCompound tag ) <nl> { <nl> Set < String > defaults = Sets . newHashSet ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> index f4d9963 . . c29ad7c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> @ @ - 42 , 8 + 42 , 6 @ @ import net . minecraftforge . fluids . capability . wrappers . FluidBucketWrapper ; <nl> import net . minecraftforge . fml . common . eventhandler . Event ; <nl> import net . minecraftforge . fml . common . eventhandler . EventPriority ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> - import net . minecraftforge . fml . relauncher . Side ; <nl> - import net . minecraftforge . fml . relauncher . SideOnly ; <nl> import net . minecraftforge . items . ItemHandlerHelper ; <nl> <nl> import javax . annotation . Nonnull ; <nl> @ @ - 284 , 6 + 282 , 15 @ @ public class UniversalBucket extends Item <nl> return nbtSensitive ; <nl> } <nl> <nl> + @ Nullable <nl> + @ Override <nl> + public String getCreatorModId ( @ Nonnull ItemStack itemStack ) <nl> + { <nl> + FluidStack fluidStack = getFluid ( itemStack ) ; <nl> + String modId = FluidRegistry . getModId ( fluidStack ) ; <nl> + return modId ! = null ? modId : super . getCreatorModId ( itemStack ) ; <nl> + } <nl> + <nl> @ Override <nl> public ICapabilityProvider initCapabilities ( @ Nonnull ItemStack stack , NBTTagCompound nbt ) <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModNameTooltip . java b / src / test / java / net / minecraftforge / debug / ModNameTooltip . java <nl> new file mode 100644 <nl> index 0000000 . . 2277a91 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / ModNameTooltip . java <nl> @ @ - 0 , 0 + 1 , 48 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . text . TextFormatting ; <nl> + import net . minecraftforge . event . entity . player . ItemTooltipEvent ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import net . minecraftforge . fml . common . eventhandler . EventPriority ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + @ Mod ( modid = " forgemodnametooltip " , name = " ForgeModNameTooltip " , version = " 1 . 0 " , clientSideOnly = true ) <nl> + @ Mod . EventBusSubscriber ( Side . CLIENT ) <nl> + public class ModNameTooltip <nl> + { <nl> + @ SubscribeEvent ( priority = EventPriority . LOW ) <nl> + public static void onToolTip ( ItemTooltipEvent event ) <nl> + { <nl> + ItemStack itemStack = event . getItemStack ( ) ; <nl> + String modName = getModName ( itemStack ) ; <nl> + if ( modName ! = null ) <nl> + { <nl> + List < String > toolTip = event . getToolTip ( ) ; <nl> + toolTip . add ( TextFormatting . BLUE . toString ( ) + TextFormatting . ITALIC . toString ( ) + modName ) ; <nl> + } <nl> + } <nl> + <nl> + @ Nullable <nl> + private static String getModName ( ItemStack itemStack ) <nl> + { <nl> + if ( ! itemStack . isEmpty ( ) ) <nl> + { <nl> + Item item = itemStack . getItem ( ) ; <nl> + String modId = item . getCreatorModId ( itemStack ) ; <nl> + ModContainer modContainer = Loader . instance ( ) . getIndexedModList ( ) . get ( modId ) ; <nl> + if ( modContainer ! = null ) <nl> + { <nl> + return modContainer . getName ( ) ; <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / item / EntityXPOrb . java . patch b / patches / minecraft / net / minecraft / entity / item / EntityXPOrb . java . patch 
 index 26e6b8e . . f7ee527 100644 
 - - - a / patches / minecraft / net / minecraft / entity / item / EntityXPOrb . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / item / EntityXPOrb . java . patch 
 @ @ - 18 , 7 + 18 , 7 @ @ 
 if ( this . func _ 180431 _ b ( p _ 70097 _ 1 _ ) ) { 
 return false ; 
 } else { 
 - @ @ - 178 , 6 + 180 , 7 @ @ 
 + @ @ - 178 , 12 + 180 , 14 @ @ 
 public void func _ 70100 _ b _ ( EntityPlayer p _ 70100 _ 1 _ ) { 
 if ( ! this . field _ 70170 _ p . field _ 72995 _ K ) { 
 if ( this . field _ 70532 _ c = = 0 & & p _ 70100 _ 1 _ . field _ 71090 _ bL = = 0 ) { 
 @ @ - 26 , 3 + 26 , 22 @ @ 
 p _ 70100 _ 1 _ . field _ 71090 _ bL = 2 ; 
 p _ 70100 _ 1 _ . func _ 71001 _ a ( this , 1 ) ; 
 ItemStack itemstack = EnchantmentHelper . func _ 92099 _ a ( Enchantments . field _ 185296 _ A , p _ 70100 _ 1 _ ) ; 
 + if ( ! itemstack . func _ 190926 _ b ( ) & & itemstack . func _ 77951 _ h ( ) ) { 
 + - int i = Math . min ( this . func _ 184514 _ c ( this . field _ 70530 _ e ) , itemstack . func _ 77952 _ i ( ) ) ; 
 + - this . field _ 70530 _ e - = this . func _ 184515 _ b ( i ) ; 
 + + float ratio = itemstack . func _ 77973 _ b ( ) . getXpRepairRatio ( itemstack ) ; 
 + + int i = Math . min ( roundAverage ( this . field _ 70530 _ e * ratio ) , itemstack . func _ 77952 _ i ( ) ) ; 
 + + this . field _ 70530 _ e - = roundAverage ( i / ratio ) ; 
 + itemstack . func _ 196085 _ b ( itemstack . func _ 77952 _ i ( ) - i ) ; 
 + } 
 + 
 + @ @ - 261 , 4 + 265 , 9 @ @ 
 + public boolean func _ 70075 _ an ( ) { 
 + return false ; 
 + } 
 + + 
 + + private static int roundAverage ( float value ) { 
 + + double floor = Math . floor ( value ) ; 
 + + return ( int ) floor + ( Math . random ( ) < value - floor ? 1 : 0 ) ; 
 + + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java b / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java 
 index 72ab747 . . 1c047df 100644 
 - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java 
 + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeItem . java 
 @ @ - 113 , 6 + 113 , 15 @ @ public interface IForgeItem 
 * @ return True if reparable 
 * / 
 boolean isRepairable ( ) ; 
 + 
 + / * * 
 + * Determines the amount of durability the mending enchantment 
 + * will repair , on average , per point of experience . 
 + * / 
 + default float getXpRepairRatio ( ItemStack stack ) 
 + { 
 + return 2f ; 
 + } 
 
 / * * 
 * Override this method to change the NBT data being sent to the client . You 
 diff - - git a / src / test / java / net / minecraftforge / debug / item / MendingRepairTest . java b / src / test / java / net / minecraftforge / debug / item / MendingRepairTest . java 
 new file mode 100644 
 index 0000000 . . 3286023 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / item / MendingRepairTest . java 
 @ @ - 0 , 0 + 1 , 95 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . debug . item ; 
 + 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . init . Enchantments ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . NonNullList ; 
 + import net . minecraftforge . client . event . ModelRegistryEvent ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + @ Mod . EventBusSubscriber 
 + @ Mod ( modid = MendingRepairTest . MOD _ ID , name = " Mending repair amount test mod " , version = " 1 . 0 " ) 
 + public class MendingRepairTest 
 + { 
 + static final boolean ENABLED = true ; 
 + static final String MOD _ ID = " mending _ repair _ test " ; 
 + 
 + @ GameRegistry . ObjectHolder ( MOD _ ID + " : test _ item " ) 
 + public static final Item TEST _ ITEM = null ; 
 + 
 + @ SubscribeEvent 
 + public static void registerItems ( RegistryEvent . Register < Item > event ) 
 + { 
 + if ( ! ENABLED ) return ; 
 + event . getRegistry ( ) . register ( 
 + new TestItem ( ) 
 + . setRegistryName ( MOD _ ID , " test _ item " ) 
 + . setUnlocalizedName ( MOD _ ID + " . test _ item " ) 
 + ) ; 
 + } 
 + 
 + @ Mod . EventBusSubscriber ( modid = MOD _ ID , value = Side . CLIENT ) 
 + public static final class ClientEventHandler 
 + { 
 + @ SubscribeEvent 
 + public static void registerModels ( ModelRegistryEvent event ) 
 + { 
 + if ( ! ENABLED ) return ; 
 + ModelLoader . setCustomModelResourceLocation ( TEST _ ITEM , 0 , new ModelResourceLocation ( " minecraft : blaze _ rod " , " inventory " ) ) ; 
 + } 
 + } 
 + 
 + private static final class TestItem extends Item 
 + { 
 + TestItem ( ) 
 + { 
 + maxStackSize = 1 ; 
 + setMaxDamage ( 10 ) ; 
 + setCreativeTab ( CreativeTabs . TOOLS ) ; 
 + } 
 + 
 + @ Override 
 + public void getSubItems ( CreativeTabs tab , NonNullList < ItemStack > items ) 
 + { 
 + if ( this . isInCreativeTab ( tab ) ) 
 + { 
 + ItemStack stack = new ItemStack ( this ) ; 
 + stack . addEnchantment ( Enchantments . MENDING , 1 ) ; 
 + stack . setItemDamage ( stack . getMaxDamage ( ) ) ; 
 + items . add ( stack ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public float getXpRepairRatio ( ItemStack stack ) 
 + { 
 + return 0 . 1f ; 
 + } 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch 
 index 173edb7 . . e694f02 100644 
 - - - a / patches / minecraft / net / minecraft / item / Item . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / Item . java . patch 
 @ @ - 70 , 7 + 70 , 7 @ @ 
 CreativeTabs creativetabs = this . func _ 77640 _ w ( ) ; 
 return creativetabs ! = null & & ( p _ 194125 _ 1 _ = = CreativeTabs . field _ 78027 _ g | | p _ 194125 _ 1 _ = = creativetabs ) ; 
 } 
 - @ @ - 435 , 11 + 445 , 683 @ @ 
 + @ @ - 435 , 11 + 445 , 704 @ @ 
 return false ; 
 } 
 
 @ @ - 680 , 6 + 680 , 27 @ @ 
 + } 
 + 
 + / * * 
 + + * Called to get the Mod ID of the mod that * created * the ItemStack , 
 + + * instead of the real Mod ID that * registered * it . 
 + + * 
 + + * For example the Forge Universal Bucket creates a subitem for each modded fluid , 
 + + * and it returns the modded fluid ' s Mod ID here . 
 + + * 
 + + * Mods that register subitems for other mods can override this . 
 + + * Informational mods can call it to show the mod that created the item . 
 + + * 
 + + * @ param itemStack the ItemStack to check 
 + + * @ return the Mod ID for the ItemStack , or 
 + + * null when there is no specially associated mod and { @ link # getRegistryName ( ) } would return null . 
 + + * / 
 + + @ Nullable 
 + + public String getCreatorModId ( ItemStack itemStack ) 
 + + { 
 + + ResourceLocation registryName = getRegistryName ( ) ; 
 + + return registryName = = null ? null : registryName . func _ 110624 _ b ( ) ; 
 + + } 
 + + 
 + + / * * 
 + * Called from ItemStack . setItem , will hold extra data for the life of this ItemStack . 
 + * Can be retrieved from stack . getCapabilities ( ) 
 + * The NBT can be null if this is not called from readNBT or if the item the stack is 
 @ @ - 754 , 7 + 775 , 7 @ @ 
 public static void func _ 150900 _ l ( ) 
 { 
 func _ 179214 _ a ( Blocks . field _ 150350 _ a , new ItemAir ( Blocks . field _ 150350 _ a ) ) ; 
 - @ @ - 999 , 6 + 1681 , 8 @ @ 
 + @ @ - 999 , 6 + 1702 , 8 @ @ 
 private final float field _ 78010 _ h ; 
 private final float field _ 78011 _ i ; 
 private final int field _ 78008 _ j ; 
 @ @ - 763 , 7 + 784 , 7 @ @ 
 
 private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) 
 { 
 - @ @ - 1034 , 6 + 1718 , 7 @ @ 
 + @ @ - 1034 , 6 + 1739 , 7 @ @ 
 return this . field _ 78008 _ j ; 
 } 
 
 @ @ - 771 , 7 + 792 , 7 @ @ 
 public Item func _ 150995 _ f ( ) 
 { 
 if ( this = = WOOD ) 
 - @ @ - 1057 , 5 + 1742 , 21 @ @ 
 + @ @ - 1057 , 5 + 1763 , 21 @ @ 
 return this = = DIAMOND ? Items . field _ 151045 _ i : null ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 index 82ad976 . . 282be11 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 @ @ - 356 , 6 + 356 , 21 @ @ public abstract class FluidRegistry 
 return name ; 
 } 
 
 + @ Nullable 
 + public static String getModId ( @ Nullable FluidStack fluidStack ) 
 + { 
 + if ( fluidStack ! = null ) 
 + { 
 + String defaultFluidName = getDefaultFluidName ( fluidStack . getFluid ( ) ) ; 
 + if ( defaultFluidName ! = null ) 
 + { 
 + ResourceLocation fluidResourceName = new ResourceLocation ( defaultFluidName ) ; 
 + return fluidResourceName . getResourceDomain ( ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 public static void loadFluidDefaults ( NBTTagCompound tag ) 
 { 
 Set < String > defaults = Sets . newHashSet ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 index f4d9963 . . c29ad7c 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 + + + b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 @ @ - 42 , 8 + 42 , 6 @ @ import net . minecraftforge . fluids . capability . wrappers . FluidBucketWrapper ; 
 import net . minecraftforge . fml . common . eventhandler . Event ; 
 import net . minecraftforge . fml . common . eventhandler . EventPriority ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 - import net . minecraftforge . fml . relauncher . Side ; 
 - import net . minecraftforge . fml . relauncher . SideOnly ; 
 import net . minecraftforge . items . ItemHandlerHelper ; 
 
 import javax . annotation . Nonnull ; 
 @ @ - 284 , 6 + 282 , 15 @ @ public class UniversalBucket extends Item 
 return nbtSensitive ; 
 } 
 
 + @ Nullable 
 + @ Override 
 + public String getCreatorModId ( @ Nonnull ItemStack itemStack ) 
 + { 
 + FluidStack fluidStack = getFluid ( itemStack ) ; 
 + String modId = FluidRegistry . getModId ( fluidStack ) ; 
 + return modId ! = null ? modId : super . getCreatorModId ( itemStack ) ; 
 + } 
 + 
 @ Override 
 public ICapabilityProvider initCapabilities ( @ Nonnull ItemStack stack , NBTTagCompound nbt ) 
 { 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModNameTooltip . java b / src / test / java / net / minecraftforge / debug / ModNameTooltip . java 
 new file mode 100644 
 index 0000000 . . 2277a91 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / ModNameTooltip . java 
 @ @ - 0 , 0 + 1 , 48 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import javax . annotation . Nullable ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . text . TextFormatting ; 
 + import net . minecraftforge . event . entity . player . ItemTooltipEvent ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import net . minecraftforge . fml . common . eventhandler . EventPriority ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + @ Mod ( modid = " forgemodnametooltip " , name = " ForgeModNameTooltip " , version = " 1 . 0 " , clientSideOnly = true ) 
 + @ Mod . EventBusSubscriber ( Side . CLIENT ) 
 + public class ModNameTooltip 
 + { 
 + @ SubscribeEvent ( priority = EventPriority . LOW ) 
 + public static void onToolTip ( ItemTooltipEvent event ) 
 + { 
 + ItemStack itemStack = event . getItemStack ( ) ; 
 + String modName = getModName ( itemStack ) ; 
 + if ( modName ! = null ) 
 + { 
 + List < String > toolTip = event . getToolTip ( ) ; 
 + toolTip . add ( TextFormatting . BLUE . toString ( ) + TextFormatting . ITALIC . toString ( ) + modName ) ; 
 + } 
 + } 
 + 
 + @ Nullable 
 + private static String getModName ( ItemStack itemStack ) 
 + { 
 + if ( ! itemStack . isEmpty ( ) ) 
 + { 
 + Item item = itemStack . getItem ( ) ; 
 + String modId = item . getCreatorModId ( itemStack ) ; 
 + ModContainer modContainer = Loader . instance ( ) . getIndexedModList ( ) . get ( modId ) ; 
 + if ( modContainer ! = null ) 
 + { 
 + return modContainer . getName ( ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 + }
