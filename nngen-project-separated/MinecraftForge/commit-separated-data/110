BLEU SCORE: 0.05341087579952926

TEST MSG: ConfigEvents - the beginning .
GENERATED MSG: Early signs of modloading

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfig . java b / src / main / java / net / minecraftforge / common / ForgeConfig . java <nl> index 876d00b . . a8dc7a3 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeConfig . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeConfig . java <nl> @ @ - 28 , 6 + 28 , 8 @ @ import java . util . List ; <nl> <nl> import javax . annotation . Nullable ; <nl> <nl> + import net . minecraftforge . eventbus . api . SubscribeEvent ; <nl> + import net . minecraftforge . fml . config . ModConfig ; <nl> import org . apache . logging . log4j . LogManager ; <nl> <nl> import com . electronwill . nightconfig . core . CommentedConfig ; <nl> @ @ - 130 , 7 + 132 , 6 @ @ public class ForgeConfig <nl> } <nl> <nl> public static class Client { <nl> - <nl> public final BooleanValue zoomInMissingModelTextInGui ; <nl> <nl> public final BooleanValue forgeCloudsEnabled ; <nl> @ @ - 183 , 7 + 184 , 7 @ @ public class ForgeConfig <nl> } <nl> } <nl> <nl> - private static final ForgeConfigSpec spec = BUILDER . build ( ) ; <nl> + static final ForgeConfigSpec spec = BUILDER . build ( ) ; <nl> <nl> private static final ForgeConfigSpec . Builder CHUNK _ BUILDER = new ForgeConfigSpec . Builder ( ) ; <nl> <nl> @ @ - 279 , 18 + 280 , 15 @ @ public class ForgeConfig <nl> <nl> public static final ForgeConfigSpec chunk _ spec = CHUNK _ BUILDER . build ( ) ; <nl> <nl> - private static void loadFrom ( final Path configRoot ) { <nl> - Path configFile = configRoot . resolve ( " forge . toml " ) ; <nl> - spec . setConfigFile ( configFile ) ; <nl> - LogManager . getLogger ( ) . debug ( FORGEMOD , " Loaded Forge config from { } " , configFile ) ; <nl> <nl> - configFile = configRoot . resolve ( " forge _ chunks . toml " ) ; <nl> - chunk _ spec . setConfigFile ( configFile ) ; <nl> - LogManager . getLogger ( ) . debug ( FORGEMOD , " Loaded Forge Chunk config from { } " , configFile ) ; <nl> + @ SubscribeEvent <nl> + public static void onLoad ( final ModConfig . Loading configEvent ) { <nl> + LogManager . getLogger ( ) . debug ( FORGEMOD , " Loaded forge config file { } " , configEvent . getConfig ( ) . getFileName ( ) ) ; <nl> } <nl> <nl> - public static void load ( ) { <nl> - loadFrom ( FMLPaths . CONFIGDIR . get ( ) ) ; <nl> + @ SubscribeEvent <nl> + public static void onFileChange ( final ModConfig . ConfigReloading configEvent ) { <nl> + LogManager . getLogger ( ) . fatal ( CORE , " Forge config just got changed on the file system ! " ) ; <nl> } <nl> <nl> / / General <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java b / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java <nl> index b9b9e75 . . 0a9325d 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java <nl> @ @ - 73 , 19 + 73 , 8 @ @ public class ForgeConfigSpec extends UnmodifiableConfigWrapper < Config > <nl> this . levelComments = levelComments ; <nl> } <nl> <nl> - public void setConfigFile ( Path path ) { <nl> - setConfig ( CommentedFileConfig . builder ( path ) . sync ( ) <nl> - . autosave ( ) <nl> - / / . autoreload ( ) <nl> - . writingMode ( WritingMode . REPLACE ) <nl> - . build ( ) ) ; <nl> - } <nl> - <nl> public void setConfig ( CommentedConfig config ) { <nl> this . childConfig = config ; <nl> - if ( config instanceof FileConfig ) { <nl> - ( ( FileConfig ) config ) . load ( ) ; <nl> - } <nl> if ( ! isCorrect ( config ) ) { <nl> String configName = config instanceof FileConfig ? ( ( FileConfig ) config ) . getNioPath ( ) . toString ( ) : config . toString ( ) ; <nl> LogManager . getLogger ( ) . warn ( CORE , " Configuration file { } is not correct . Correcting " , configName ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> index 4231e48 . . 4bc5a95 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . common ; <nl> import net . minecraftforge . fml . FMLWorldPersistenceHook ; <nl> import net . minecraftforge . fml . VersionChecker ; <nl> import net . minecraftforge . fml . WorldPersistenceHooks ; <nl> + import net . minecraftforge . fml . config . ModConfig ; <nl> import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; <nl> import net . minecraftforge . fml . event . lifecycle . FMLLoadCompleteEvent ; <nl> import net . minecraftforge . fml . event . lifecycle . FMLModIdMappingEvent ; <nl> @ @ - 84 , 7 + 85 , 9 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook <nl> MinecraftForge . EVENT _ BUS . addListener ( this : : serverStarting ) ; <nl> MinecraftForge . EVENT _ BUS . addListener ( this : : playerLogin ) ; <nl> MinecraftForge . EVENT _ BUS . addListener ( this : : serverStopping ) ; <nl> - ForgeConfig . load ( ) ; <nl> + FMLModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . CLIENT , ForgeConfig . spec ) ; <nl> + FMLModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . SERVER , ForgeConfig . chunk _ spec ) ; <nl> + FMLModLoadingContext . get ( ) . getModEventBus ( ) . register ( ForgeConfig . class ) ; <nl> } <nl> <nl> / * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> index 128107c . . 01e6467 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> @ @ - 19 , 14 + 19 , 10 @ @ <nl> <nl> package net . minecraftforge . fml ; <nl> <nl> + import net . minecraftforge . fml . config . ModConfig ; <nl> import net . minecraftforge . forgespi . language . IModInfo ; <nl> <nl> - import java . util . Collections ; <nl> - import java . util . HashMap ; <nl> - import java . util . IdentityHashMap ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - import java . util . Optional ; <nl> + import java . util . * ; <nl> import java . util . function . Consumer ; <nl> import java . util . function . Supplier ; <nl> <nl> @ @ - 51 , 6 + 47 , 9 @ @ public abstract class ModContainer <nl> protected ModLoadingStage modLoadingStage ; <nl> protected final Map < ModLoadingStage , Consumer < LifecycleEventProvider . LifecycleEvent > > triggerMap ; <nl> protected final Map < ExtensionPoint , Supplier < ? > > extensionPoints = new IdentityHashMap < > ( ) ; <nl> + protected final EnumMap < ModConfig . Type , ModConfig > configs = new EnumMap < > ( ModConfig . Type . class ) ; <nl> + @ SuppressWarnings ( " OptionalUsedAsFieldOrParameterType " ) <nl> + protected Optional < Consumer < ModConfig . ModConfigEvent > > configHandler = Optional . empty ( ) ; <nl> <nl> public ModContainer ( IModInfo info ) <nl> { <nl> @ @ - 125 , 6 + 124 , 14 @ @ public abstract class ModContainer <nl> extensionPoints . put ( point , extension ) ; <nl> } <nl> <nl> + public void addConfig ( final ModConfig modConfig ) { <nl> + configs . put ( modConfig . getType ( ) , modConfig ) ; <nl> + } <nl> + <nl> + public void dispatchConfigEvent ( ModConfig . ModConfigEvent event ) { <nl> + configHandler . ifPresent ( configHandler - > configHandler . accept ( event ) ) ; <nl> + } <nl> + <nl> / * * <nl> * Does this mod match the supplied mod ? <nl> * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> index 8818b1a . . 1c32908 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> @ @ - 24 , 6 + 24 , 9 @ @ import net . minecraftforge . api . distmarker . Dist ; <nl> import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> + import net . minecraftforge . fml . config . ConfigTracker ; <nl> + import net . minecraftforge . fml . config . ModConfig ; <nl> + import net . minecraftforge . fml . loading . FMLPaths ; <nl> import net . minecraftforge . forgespi . language . IModInfo ; <nl> import net . minecraftforge . fml . loading . FMLLoader ; <nl> import net . minecraftforge . fml . loading . LoadingModList ; <nl> @ @ - 127 , 6 + 130 , 7 @ @ public class ModLoader <nl> ObjectHolderRegistry . findObjectHolders ( ) ; <nl> CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; <nl> GameData . fireRegistryEvents ( rl - > true , LifecycleEventProvider . LOAD _ REGISTRIES , this : : dispatchAndHandleError ) ; <nl> + DistExecutor . runWhenOn ( Dist . CLIENT , ( ) - > ( ) - > ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . CLIENT , FMLPaths . CONFIGDIR . get ( ) ) ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . SETUP ) ; <nl> DistExecutor . runWhenOn ( Dist . CLIENT , ModLoader : : fireClientEvents ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . SIDED _ SETUP ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigFileTypeHandler . java b / src / main / java / net / minecraftforge / fml / config / ConfigFileTypeHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 39931e9 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / config / ConfigFileTypeHandler . java <nl> @ @ - 0 , 0 + 1 , 55 @ @ <nl> + package net . minecraftforge . fml . config ; <nl> + <nl> + import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> + import com . electronwill . nightconfig . core . file . FileWatcher ; <nl> + import com . electronwill . nightconfig . core . io . WritingMode ; <nl> + import net . minecraftforge . fml . loading . FMLPaths ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . nio . file . Path ; <nl> + import java . util . function . Function ; <nl> + <nl> + import static net . minecraftforge . fml . config . ConfigTracker . CONFIG ; <nl> + <nl> + public class ConfigFileTypeHandler { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + static ConfigFileTypeHandler TOML = new ConfigFileTypeHandler ( ) ; <nl> + <nl> + public Function < ModConfig , CommentedFileConfig > reader ( Path configBasePath ) { <nl> + return ( c ) - > { <nl> + final Path configPath = configBasePath . resolve ( c . getFileName ( ) ) ; <nl> + final CommentedFileConfig configData = CommentedFileConfig . builder ( configPath ) . sync ( ) . <nl> + autosave ( ) . <nl> + writingMode ( WritingMode . REPLACE ) . <nl> + build ( ) ; <nl> + LOGGER . debug ( CONFIG , " Built TOML config for { } " , configPath . toString ( ) ) ; <nl> + try { <nl> + FileWatcher . defaultInstance ( ) . addWatch ( configPath , new ConfigWatcher ( c , configData ) ) ; <nl> + LOGGER . debug ( CONFIG , " Watching TOML config file { } for changes " , configPath . toString ( ) ) ; <nl> + } catch ( IOException e ) { <nl> + throw new RuntimeException ( " Couldn ' t watch config file " , e ) ; <nl> + } <nl> + configData . load ( ) ; <nl> + LOGGER . debug ( CONFIG , " Loaded TOML config file { } " , configPath . toString ( ) ) ; <nl> + return configData ; <nl> + } ; <nl> + } <nl> + <nl> + private static class ConfigWatcher implements Runnable { <nl> + private final ModConfig modConfig ; <nl> + private final CommentedFileConfig commentedFileConfig ; <nl> + <nl> + ConfigWatcher ( final ModConfig modConfig , final CommentedFileConfig commentedFileConfig ) { <nl> + this . modConfig = modConfig ; <nl> + this . commentedFileConfig = commentedFileConfig ; <nl> + } <nl> + <nl> + @ Override <nl> + public void run ( ) { <nl> + LOGGER . debug ( CONFIG , " Config file { } changed , sending notifies " , this . modConfig . getFileName ( ) ) ; <nl> + this . modConfig . fireEvent ( new ModConfig . ConfigReloading ( this . modConfig ) ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> new file mode 100644 <nl> index 0000000 . . 912e22e <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + package net . minecraftforge . fml . config ; <nl> + <nl> + import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + import org . apache . logging . log4j . Marker ; <nl> + import org . apache . logging . log4j . MarkerManager ; <nl> + <nl> + import java . nio . file . Path ; <nl> + import java . util . EnumMap ; <nl> + import java . util . Set ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + import java . util . concurrent . ConcurrentSkipListSet ; <nl> + <nl> + public class ConfigTracker { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + static final Marker CONFIG = MarkerManager . getMarker ( " CONFIG " ) ; <nl> + public static final ConfigTracker INSTANCE = new ConfigTracker ( ) ; <nl> + private final ConcurrentHashMap < String , ModConfig > fileMap ; <nl> + private final EnumMap < ModConfig . Type , Set < ModConfig > > configSets ; <nl> + <nl> + private ConfigTracker ( ) { <nl> + this . fileMap = new ConcurrentHashMap < > ( ) ; <nl> + this . configSets = new EnumMap < > ( ModConfig . Type . class ) ; <nl> + this . configSets . put ( ModConfig . Type . CLIENT , new ConcurrentSkipListSet < > ( ) ) ; <nl> + / / this . configSets . put ( ModConfig . Type . PLAYER , new ConcurrentSkipListSet < > ( ) ) ; <nl> + this . configSets . put ( ModConfig . Type . SERVER , new ConcurrentSkipListSet < > ( ) ) ; <nl> + } <nl> + <nl> + void trackConfig ( final ModConfig config ) { <nl> + if ( this . fileMap . containsKey ( config . getFileName ( ) ) ) { <nl> + LOGGER . error ( CONFIG , " Detected config file conflict { } between { } and { } " , config . getFileName ( ) , this . fileMap . get ( config . getFileName ( ) ) . getModId ( ) , config . getModId ( ) ) ; <nl> + throw new RuntimeException ( " Config conflict detected ! " ) ; <nl> + } <nl> + this . fileMap . put ( config . getFileName ( ) , config ) ; <nl> + this . configSets . get ( config . getType ( ) ) . add ( config ) ; <nl> + LOGGER . debug ( CONFIG , " Config file { } for { } tracking " , config . getFileName ( ) , config . getModId ( ) ) ; <nl> + } <nl> + <nl> + public void loadConfigs ( ModConfig . Type type , Path configBasePath ) { <nl> + LOGGER . debug ( CONFIG , " Loading configs type { } " , type ) ; <nl> + this . configSets . get ( type ) . forEach ( config - > openConfig ( config , configBasePath ) ) ; <nl> + } <nl> + <nl> + private void openConfig ( final ModConfig config , final Path configBasePath ) { <nl> + LOGGER . debug ( CONFIG , " Loading config file type { } at { } for { } " , config . getType ( ) , config . getFileName ( ) , config . getModId ( ) ) ; <nl> + final CommentedFileConfig configData = config . getHandler ( ) . reader ( configBasePath ) . apply ( config ) ; <nl> + config . setConfigData ( configData ) ; <nl> + config . fireEvent ( new ModConfig . Loading ( config ) ) ; <nl> + config . getConfigData ( ) . save ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / config / ModConfig . java b / src / main / java / net / minecraftforge / fml / config / ModConfig . java <nl> new file mode 100644 <nl> index 0000000 . . 617483a <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / config / ModConfig . java <nl> @ @ - 0 , 0 + 1 , 132 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . config ; <nl> + <nl> + import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> + import net . minecraftforge . common . ForgeConfigSpec ; <nl> + import net . minecraftforge . eventbus . api . Event ; <nl> + import net . minecraftforge . fml . ModContainer ; <nl> + import net . minecraftforge . fml . loading . StringUtils ; <nl> + <nl> + public class ModConfig <nl> + { <nl> + private final Type type ; <nl> + private final ForgeConfigSpec spec ; <nl> + private final String fileName ; <nl> + private final ModContainer container ; <nl> + private final ConfigFileTypeHandler configHandler ; <nl> + private CommentedFileConfig configData ; <nl> + <nl> + public ModConfig ( final Type type , final ForgeConfigSpec spec , final ModContainer container , final String fileName ) { <nl> + this . type = type ; <nl> + this . spec = spec ; <nl> + this . fileName = fileName ; <nl> + this . container = container ; <nl> + this . configHandler = ConfigFileTypeHandler . TOML ; <nl> + ConfigTracker . INSTANCE . trackConfig ( this ) ; <nl> + } <nl> + <nl> + public ModConfig ( final Type type , final ForgeConfigSpec spec , final ModContainer activeContainer ) { <nl> + this ( type , spec , activeContainer , defaultConfigName ( type , activeContainer . getModId ( ) ) ) ; <nl> + } <nl> + <nl> + private static String defaultConfigName ( Type type , String modId ) { <nl> + / / config file name would be " forge - client . toml " and " forge - server . toml " <nl> + return String . format ( " % s - % s . toml " , modId , type . extension ( ) ) ; <nl> + } <nl> + public Type getType ( ) { <nl> + return type ; <nl> + } <nl> + <nl> + public String getFileName ( ) { <nl> + return fileName ; <nl> + } <nl> + <nl> + public ConfigFileTypeHandler getHandler ( ) { <nl> + return configHandler ; <nl> + } <nl> + <nl> + public ForgeConfigSpec getSpec ( ) { <nl> + return spec ; <nl> + } <nl> + <nl> + public String getModId ( ) { <nl> + return container . getModId ( ) ; <nl> + } <nl> + <nl> + public CommentedFileConfig getConfigData ( ) { <nl> + return this . configData ; <nl> + } <nl> + <nl> + void setConfigData ( final CommentedFileConfig configData ) { <nl> + this . configData = configData ; <nl> + this . spec . setConfig ( this . configData ) ; <nl> + } <nl> + <nl> + void fireEvent ( final ModConfigEvent configEvent ) { <nl> + this . container . dispatchConfigEvent ( configEvent ) ; <nl> + } <nl> + <nl> + public enum Type { <nl> + / * * <nl> + * Client type config is exclusively for configuration affecting the client state . <nl> + * Graphical options , for example . <nl> + * / <nl> + CLIENT , <nl> + / / / * * <nl> + / / * Player type config is configuration that is associated with a player . <nl> + / / * Preferences around machine states , for example . <nl> + / / * / <nl> + / / PLAYER , <nl> + / * * <nl> + * Server type config is configuration that is associated with a server instance . <nl> + * It will be synced from a server to the client on connection . <nl> + * / <nl> + SERVER ; <nl> + <nl> + public String extension ( ) { <nl> + return StringUtils . toLowerCase ( name ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static class ModConfigEvent extends Event { <nl> + private final ModConfig config ; <nl> + <nl> + ModConfigEvent ( final ModConfig config ) { <nl> + this . config = config ; <nl> + } <nl> + <nl> + public ModConfig getConfig ( ) { <nl> + return config ; <nl> + } <nl> + } <nl> + <nl> + public static class Loading extends ModConfigEvent { <nl> + Loading ( final ModConfig config ) { <nl> + super ( config ) ; <nl> + } <nl> + } <nl> + <nl> + public static class ConfigReloading extends ModConfigEvent { <nl> + ConfigReloading ( final ModConfig config ) { <nl> + super ( config ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> index a43c0df . . 6bf99bc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> @ @ - 19 , 8 + 19 , 10 @ @ <nl> <nl> package net . minecraftforge . fml . javafmlmod ; <nl> <nl> + import net . minecraftforge . common . ForgeConfigSpec ; <nl> import net . minecraftforge . eventbus . api . IEventBus ; <nl> import net . minecraftforge . fml . ExtensionPoint ; <nl> + import net . minecraftforge . fml . config . ModConfig ; <nl> <nl> import java . util . function . Supplier ; <nl> <nl> @ @ - 36 , 6 + 38 , 14 @ @ public class FMLModLoadingContext <nl> getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; <nl> } <nl> <nl> + public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { <nl> + activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer ) ) ; <nl> + } <nl> + <nl> + public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { <nl> + activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer , fileName ) ) ; <nl> + } <nl> + <nl> public IEventBus getModEventBus ( ) <nl> { <nl> return getActiveContainer ( ) . getEventBus ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> index c958265 . . b0155a9 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> @ @ - 29 , 11 + 29 , 15 @ @ import net . minecraftforge . api . distmarker . Dist ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fml . DistExecutor ; <nl> import net . minecraftforge . fml . LogicalSidedProvider ; <nl> + import net . minecraftforge . fml . config . ConfigTracker ; <nl> + import net . minecraftforge . fml . config . ModConfig ; <nl> import net . minecraftforge . fml . event . server . FMLServerAboutToStartEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; <nl> + import net . minecraftforge . fml . loading . FMLPaths ; <nl> + import net . minecraftforge . fml . loading . FileUtils ; <nl> import net . minecraftforge . fml . network . NetworkHooks ; <nl> import net . minecraftforge . fml . packs . ResourcePackLoader ; <nl> import org . apache . logging . log4j . LogManager ; <nl> @ @ - 41 , 6 + 45 , 8 @ @ import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> import java . util . List ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> @ @ - 56 , 6 + 62 , 9 @ @ public class ServerLifecycleHooks <nl> { <nl> currentServer = server ; <nl> LogicalSidedProvider . setServer ( ( ) - > server ) ; <nl> + final Path serverConfig = server . getActiveAnvilConverter ( ) . getFile ( server . getFolderName ( ) , " serverconfig " ) . toPath ( ) ; <nl> + FileUtils . getOrCreateDirectory ( serverConfig , " serverconfig " ) ; <nl> + ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . SERVER , serverConfig ) ; <nl> ResourcePackLoader . loadResourcePacks ( currentServer . getResourcePacks ( ) ) ; <nl> return ! MinecraftForge . EVENT _ BUS . post ( new FMLServerAboutToStartEvent ( server ) ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / LaunchTesting . java b / src / main / java / net / minecraftforge / fml / LaunchTesting . java <nl> index c34b865 . . 020c5e7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / LaunchTesting . java <nl> + + + b / src / main / java / net / minecraftforge / fml / LaunchTesting . java <nl> @ @ - 25 , 9 + 25 , 10 @ @ import org . apache . logging . log4j . core . config . Configurator ; <nl> <nl> public class LaunchTesting <nl> { <nl> - public static void main ( String . . . args ) <nl> + public static void main ( String . . . args ) throws InterruptedException <nl> { <nl> Configurator . setRootLevel ( Level . DEBUG ) ; <nl> Launcher . main ( " - - launchTarget " , " fml " , " - - gameDir " , " projects / run " ) ; <nl> + Thread . sleep ( 10000 ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLJavaModLanguageProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLJavaModLanguageProvider . java <nl> new file mode 100644 <nl> index 0000000 . . fe23461 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLJavaModLanguageProvider . java <nl> @ @ - 0 , 0 + 1 , 86 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . loading ; <nl> + <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . ScanResult ; <nl> + import org . objectweb . asm . Type ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . function . Consumer ; <nl> + import java . util . function . Function ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> + import static net . minecraftforge . fml . Logging . fmlLog ; <nl> + <nl> + public class FMLJavaModLanguageProvider implements IModLanguageProvider <nl> + { <nl> + private static class FMLModTarget implements IModLanguageProvider . IModLanguageLoader { <nl> + private final String className ; <nl> + private final String modId ; <nl> + <nl> + private FMLModTarget ( String className , String modId ) <nl> + { <nl> + this . className = className ; <nl> + this . modId = modId ; <nl> + } <nl> + <nl> + public String getModId ( ) <nl> + { <nl> + return modId ; <nl> + } <nl> + <nl> + @ Override <nl> + public ModContainer loadMod ( ModFile file , ClassLoader modClassLoader ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + public static final Type MODANNOTATION = Type . getType ( " Lnet / minecraftforge / fml / common / Mod ; " ) ; <nl> + <nl> + @ Override <nl> + public String name ( ) <nl> + { <nl> + return " javafml " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Consumer < ScanResult > getFileVisitor ( ) { <nl> + return scanResult - > { <nl> + final Map < String , FMLModTarget > modTargetMap = scanResult . getAnnotations ( ) . stream ( ) <nl> + . filter ( ad - > ad . getAnnotationType ( ) . equals ( MODANNOTATION ) ) <nl> + . peek ( ad - > fmlLog . debug ( SCAN , " Found @ Mod class { } with id { } " , ad . getClassType ( ) . getClassName ( ) , ad . getAnnotationData ( ) . get ( " modid " ) ) ) <nl> + . map ( ad - > new FMLModTarget ( ad . getClassType ( ) . getClassName ( ) , ( String ) ad . getAnnotationData ( ) . get ( " modid " ) ) ) <nl> + . collect ( Collectors . toMap ( FMLModTarget : : getModId , Function . identity ( ) ) ) ; <nl> + modTargetMap . forEach ( ( key , value ) - > scanResult . getFile ( ) . claimLanguage ( key , value ) ) ; <nl> + } ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < ModContainer > buildModContainers ( List < ModInfo > modFiles , ClassLoader modClassLoader ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java b / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java <nl> index 5aecb99 . . 0255021 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java <nl> @ @ - 28 , 25 + 28 , 20 @ @ import net . minecraftforge . fml . loading . moddiscovery . ModDiscoverer ; <nl> import net . minecraftforge . forgespi . ICoreModProvider ; <nl> <nl> import java . util . ArrayList ; <nl> - import java . util . Arrays ; <nl> - import java . util . HashSet ; <nl> - import java . util . Iterator ; <nl> - import java . util . List ; <nl> import java . util . ServiceLoader ; <nl> import java . util . Set ; <nl> import java . util . stream . Collectors ; <nl> <nl> import static net . minecraftforge . fml . Logging . CORE ; <nl> - import static net . minecraftforge . fml . Logging . LOADING ; <nl> import static net . minecraftforge . fml . Logging . SCAN ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class FMLLoader <nl> { <nl> - <nl> private static ILaunchPluginService accessTransformer ; <nl> private static ModDiscoverer modDiscoverer ; <nl> - private static ICoreModProvider coreMod ; <nl> + private static ICoreModProvider coreModProvider ; <nl> + private static LanguageLoadingProvider languageLoadingProvider ; <nl> <nl> static void onInitialLoad ( IEnvironment environment , Set < String > otherServices ) throws IncompatibleEnvironmentException <nl> { <nl> @ @ - 79 , 9 + 74 , 11 @ @ public class FMLLoader <nl> throw new IncompatibleEnvironmentException ( " Multiple coremod libraries found " ) ; <nl> } <nl> <nl> - coreMod = coreModProviders . get ( 0 ) ; <nl> - final Package coremodPackage = coreMod . getClass ( ) . getPackage ( ) ; <nl> + coreModProvider = coreModProviders . get ( 0 ) ; <nl> + final Package coremodPackage = coreModProvider . getClass ( ) . getPackage ( ) ; <nl> fmlLog . debug ( CORE , " FML found CoreMod version : { } " , coremodPackage . getImplementationVersion ( ) ) ; <nl> + <nl> + languageLoadingProvider = new LanguageLoadingProvider ( ) ; <nl> } <nl> <nl> public static void load ( ) <nl> @ @ - 90 , 4 + 87 , 13 @ @ public class FMLLoader <nl> modDiscoverer = new ModDiscoverer ( ) ; <nl> modDiscoverer . discoverMods ( ) ; <nl> } <nl> + <nl> + public static ICoreModProvider getCoreModProvider ( ) { <nl> + return coreModProvider ; <nl> + } <nl> + <nl> + public static LanguageLoadingProvider getLanguageLoadingProvider ( ) <nl> + { <nl> + return languageLoadingProvider ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java <nl> index 3ceec55 . . 0d1c070 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java <nl> @ @ - 25 , 14 + 25 , 17 @ @ import cpw . mods . modlauncher . api . ITransformer ; <nl> import cpw . mods . modlauncher . api . IncompatibleEnvironmentException ; <nl> import joptsimple . ArgumentAcceptingOptionSpec ; <nl> import joptsimple . OptionSpecBuilder ; <nl> + import net . minecraftforge . coremod . CoreModEngine ; <nl> import net . minecraftforge . fml . FMLConfig ; <nl> import net . minecraftforge . fml . common . FMLPaths ; <nl> <nl> import javax . annotation . Nonnull ; <nl> + import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> import java . util . function . BiFunction ; <nl> + import java . util . stream . Collectors ; <nl> <nl> import static net . minecraftforge . fml . Logging . CORE ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> @ @ - 86 , 7 + 89 , 8 @ @ public class FMLServiceProvider implements ITransformationService <nl> @ Override <nl> public List < ITransformer > transformers ( ) <nl> { <nl> - return Collections . emptyList ( ) ; <nl> + fmlLog . debug ( CORE , " Loading coremod transformers " ) ; <nl> + return new ArrayList < > ( FMLLoader . getCoreModProvider ( ) . getCoreModTransformers ( ) ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / IModLanguageProvider . java b / src / main / java / net / minecraftforge / fml / loading / IModLanguageProvider . java <nl> new file mode 100644 <nl> index 0000000 . . cceb903 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / IModLanguageProvider . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . loading ; <nl> + <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . ScanResult ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . function . Consumer ; <nl> + <nl> + / * * <nl> + * Loaded as a ServiceLoader , from the classpath . Extensions are loaded from <nl> + * the mods directory , with the FMLType META - INF of LANGPROVIDER . <nl> + * <nl> + * Version data is read from the manifest ' s implementation version . <nl> + * / <nl> + public interface IModLanguageProvider <nl> + { <nl> + String name ( ) ; <nl> + <nl> + Consumer < ScanResult > getFileVisitor ( ) ; <nl> + <nl> + interface IModLanguageLoader { <nl> + ModContainer loadMod ( ModFile file , ClassLoader modClassLoader ) ; <nl> + } <nl> + <nl> + List < ModContainer > buildModContainers ( List < ModInfo > modFiles , ClassLoader modClassLoader ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java b / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java <nl> new file mode 100644 <nl> index 0000000 . . 5b7c7f9 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java <nl> @ @ - 0 , 0 + 1 , 64 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . loading ; <nl> + <nl> + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> + <nl> + import java . nio . file . Path ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . ServiceLoader ; <nl> + import java . util . stream . Stream ; <nl> + <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> + import static net . minecraftforge . fml . Logging . fmlLog ; <nl> + <nl> + public class LanguageLoadingProvider <nl> + { <nl> + private final List < IModLanguageProvider > languageProviders = new ArrayList < > ( ) ; <nl> + private final ServiceLoader < IModLanguageProvider > serviceLoader ; <nl> + private final Map < String , IModLanguageProvider > languageProviderMap = new HashMap < > ( ) ; <nl> + <nl> + LanguageLoadingProvider ( ) { <nl> + serviceLoader = ServiceLoader . load ( IModLanguageProvider . class ) ; <nl> + serviceLoader . forEach ( languageProviders : : add ) ; <nl> + <nl> + languageProviders . forEach ( lp - > { <nl> + final Package pkg = lp . getClass ( ) . getPackage ( ) ; <nl> + fmlLog . debug ( CORE , " Found system classpath language provider { } , version { } " , lp . name ( ) , pkg . getImplementationVersion ( ) ) ; <nl> + } ) ; <nl> + <nl> + languageProviders . forEach ( lp - > languageProviderMap . put ( lp . name ( ) , lp ) ) ; <nl> + } <nl> + <nl> + public void addAdditionalLanguages ( List < ModFile > modFiles ) <nl> + { <nl> + if ( modFiles = = null ) return ; <nl> + Stream < Path > langPaths = modFiles . stream ( ) . map ( ModFile : : getFilePath ) ; <nl> + serviceLoader . reload ( ) ; <nl> + } <nl> + <nl> + public IModLanguageProvider getLanguage ( String name ) <nl> + { <nl> + return languageProviderMap . get ( name ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java <nl> index 93694a4 . . 42a754f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java <nl> @ @ - 19 , 11 + 19 , 14 @ @ <nl> <nl> package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> + import com . google . common . util . concurrent . MoreExecutors ; <nl> + <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . concurrent . CompletableFuture ; <nl> import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> + import java . util . concurrent . ThreadFactory ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> import static net . minecraftforge . fml . Logging . SCAN ; <nl> @ @ - 37 , 7 + 40 , 11 @ @ public class BackgroundScanHandler <nl> private final List < ModFile > allFiles ; <nl> <nl> public BackgroundScanHandler ( ) { <nl> - modContentScanner = Executors . newCachedThreadPool ( ) ; <nl> + modContentScanner = Executors . newSingleThreadExecutor ( r - > { <nl> + final Thread thread = Executors . defaultThreadFactory ( ) . newThread ( r ) ; <nl> + thread . setDaemon ( true ) ; <nl> + return thread ; <nl> + } ) ; <nl> scannedFiles = new ArrayList < > ( ) ; <nl> pendingFiles = new ArrayList < > ( ) ; <nl> allFiles = new ArrayList < > ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> index 27dc4f0 . . de71a15 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> @ @ - 20 , 6 + 20 , 8 @ @ <nl> package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> import cpw . mods . modlauncher . ServiceLoaderStreamUtils ; <nl> + import net . minecraftforge . fml . loading . FMLLoader ; <nl> + import net . minecraftforge . fml . loading . LanguageLoadingProvider ; <nl> <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> @ @ - 54 , 12 + 56 , 12 @ @ public class ModDiscoverer { <nl> . peek ( mf - > fmlLog . debug ( SCAN , " Found mod file { } of type { } with locator { } " , mf . getFileName ( ) , mf . getType ( ) , mf . getLocator ( ) ) ) <nl> . collect ( Collectors . groupingBy ( ModFile : : getType ) ) ; <nl> <nl> - / / ModLanguageProvider . loadAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; <nl> + FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; <nl> BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; <nl> final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; <nl> mods . forEach ( ModFile : : identifyMods ) ; <nl> fmlLog . debug ( SCAN , " Found { } mod files with { } mods " , mods : : size , ( ) - > mods . stream ( ) . mapToInt ( mf - > mf . getModInfos ( ) . size ( ) ) . sum ( ) ) ; <nl> - / / mods . stream ( ) . map ( ModFile : : getCoreMods ) . flatMap ( List : : stream ) . forEach ( ServiceProviders . getCoreModProvider ( ) : : addCoreMod ) ; <nl> + mods . stream ( ) . map ( ModFile : : getCoreMods ) . flatMap ( List : : stream ) . forEach ( FMLLoader . getCoreModProvider ( ) : : addCoreMod ) ; <nl> mods . forEach ( backgroundScanHandler : : submitForScanning ) ; <nl> return backgroundScanHandler ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java <nl> index 8733035 . . 8f57bae 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java <nl> @ @ - 19 , 14 + 19 , 21 @ @ <nl> <nl> package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> + import net . minecraftforge . fml . loading . IModLanguageProvider ; <nl> + <nl> + import javax . swing . text . html . Option ; <nl> import java . nio . file . Path ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> import java . util . Objects ; <nl> + import java . util . Optional ; <nl> import java . util . concurrent . CompletableFuture ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . function . Consumer ; <nl> + import java . util . function . Function ; <nl> import java . util . jar . Attributes ; <nl> import java . util . jar . Manifest ; <nl> + import java . util . stream . Collectors ; <nl> <nl> import static net . minecraftforge . fml . Logging . LOADING ; <nl> import static net . minecraftforge . fml . Logging . SCAN ; <nl> @ @ - 40 , 6 + 47 , 11 @ @ public class ModFile <nl> DEFAULTMANIFEST . getMainAttributes ( ) . putValue ( " FMLModType " , " MOD " ) ; <nl> } <nl> <nl> + public void claimLanguage ( String modId , IModLanguageProvider . IModLanguageLoader loader ) <nl> + { <nl> + this . modInfoMap . get ( modId ) . setLoader ( loader ) ; <nl> + } <nl> + <nl> public enum Type { <nl> MOD , LIBRARY , LANGPROVIDER <nl> } <nl> @ @ - 47 , 6 + 59 , 7 @ @ public class ModFile <nl> private final Type modFileType ; <nl> private final Manifest manifest ; <nl> private List < ModInfo > modInfos ; <nl> + private Map < String , ModInfo > modInfoMap ; <nl> private final IModLocator locator ; <nl> private ScanResult fileScanResult ; <nl> private CompletableFuture < ScanResult > futureScanResult ; <nl> @ @ - 60 , 7 + 73 , 8 @ @ public class ModFile <nl> manifest = locator . findManifest ( file ) . orElse ( DEFAULTMANIFEST ) ; <nl> if ( manifest ! = DEFAULTMANIFEST ) fmlLog . debug ( SCAN , " Mod file { } has a manifest " , file ) ; <nl> else fmlLog . debug ( SCAN , " Mod file { } is missing a manifest " , file ) ; <nl> - modFileType = Type . valueOf ( manifest . getMainAttributes ( ) . getValue ( TYPE ) ) ; <nl> + final Optional < String > value = Optional . ofNullable ( manifest . getMainAttributes ( ) . getValue ( TYPE ) ) ; <nl> + modFileType = Type . valueOf ( value . orElse ( " MOD " ) ) ; <nl> } <nl> <nl> public Type getType ( ) { <nl> @ @ - 78 , 6 + 92 , 7 @ @ public class ModFile <nl> public void identifyMods ( ) { <nl> this . modInfos = ModFileParser . readModList ( this ) ; <nl> this . modInfos . forEach ( mi - > fmlLog . debug ( LOADING , " Found mod { } for language { } " , mi . getModId ( ) , mi . getModLoader ( ) ) ) ; <nl> + this . modInfoMap = this . modInfos . stream ( ) . collect ( Collectors . toMap ( ModInfo : : getModId , Function . identity ( ) ) ) ; <nl> this . coreMods = ModFileParser . getCoreMods ( this ) ; <nl> this . coreMods . forEach ( mi - > fmlLog . debug ( LOADING , " Found coremod { } " , mi . getPath ( ) ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModInfo . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModInfo . java <nl> index 2a3c1de . . 7910600 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModInfo . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModInfo . java <nl> @ @ - 20 , 6 + 20 , 10 @ @ <nl> package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> + import net . minecraftforge . fml . loading . IModLanguageProvider ; <nl> + <nl> + import java . net . URL ; <nl> + import java . util . List ; <nl> <nl> public class ModInfo { <nl> private final ModFile owningFile ; <nl> @ @ - 27 , 11 + 31 , 12 @ @ public class ModInfo { <nl> private final ArtifactVersion version ; <nl> private final String displayName ; <nl> private final String description ; <nl> - private final java . net . URL updateJSONURL ; <nl> + private final URL updateJSONURL ; <nl> private final String modLoader ; <nl> - private final java . util . List < net . minecraftforge . fml . loading . moddiscovery . ModInfo . ModVersion > dependencies ; <nl> + private final List < ModInfo . ModVersion > dependencies ; <nl> + private IModLanguageProvider . IModLanguageLoader loader ; <nl> <nl> - public ModInfo ( final ModFile owningFile , final String modLoader , final String modId , final String displayName , final ArtifactVersion version , final String description , final java . net . URL updateJSONURL , final java . util . List < net . minecraftforge . fml . loading . moddiscovery . ModInfo . ModVersion > dependencies ) { <nl> + public ModInfo ( final ModFile owningFile , final String modLoader , final String modId , final String displayName , final ArtifactVersion version , final String description , final URL updateJSONURL , final List < ModInfo . ModVersion > dependencies ) { <nl> this . owningFile = owningFile ; <nl> this . modLoader = modLoader ; <nl> this . modId = modId ; <nl> @ @ - 58 , 6 + 63 , 11 @ @ public class ModInfo { <nl> return version ; <nl> } <nl> <nl> + public void setLoader ( IModLanguageProvider . IModLanguageLoader loader ) <nl> + { <nl> + this . loader = loader ; <nl> + } <nl> + <nl> public enum Ordering { <nl> BEFORE , AFTER , NONE ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ScanResult . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ScanResult . java <nl> index f35f626 . . cd75eaa 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ScanResult . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ScanResult . java <nl> @ @ - 22 , 27 + 22 , 33 @ @ package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> import org . objectweb . asm . Type ; <nl> <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> public class ScanResult { <nl> private final ModFile file ; <nl> - private final java . util . List < net . minecraftforge . fml . loading . moddiscovery . ScanResult . AnnotationData > annotations = new java . util . ArrayList < > ( ) ; <nl> - private final java . util . List < net . minecraftforge . fml . loading . moddiscovery . ScanResult . ClassData > classes = new java . util . ArrayList < > ( ) ; <nl> + private final List < ScanResult . AnnotationData > annotations = new ArrayList < > ( ) ; <nl> + private final List < ScanResult . ClassData > classes = new ArrayList < > ( ) ; <nl> <nl> public ScanResult ( final ModFile file ) { <nl> this . file = file ; <nl> } <nl> <nl> + public ModFile getFile ( ) { <nl> + return file ; <nl> + } <nl> + <nl> public static boolean interestingAnnotations ( final ModAnnotation annotation ) { <nl> return true ; <nl> } <nl> <nl> - public java . util . List < net . minecraftforge . fml . loading . moddiscovery . ScanResult . ClassData > getClasses ( ) { <nl> + public List < ScanResult . ClassData > getClasses ( ) { <nl> return classes ; <nl> } <nl> <nl> - public java . util . List < net . minecraftforge . fml . loading . moddiscovery . ScanResult . AnnotationData > getAnnotations ( ) { <nl> + public List < ScanResult . AnnotationData > getAnnotations ( ) { <nl> return annotations ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java <nl> index 0770426 . . 92fdab3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java <nl> @ @ - 19 , 8 + 19 , 19 @ @ <nl> <nl> package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> + import net . minecraftforge . fml . loading . FMLLoader ; <nl> + import net . minecraftforge . fml . loading . IModLanguageProvider ; <nl> + import net . minecraftforge . fml . loading . LanguageLoadingProvider ; <nl> import org . objectweb . asm . ClassReader ; <nl> <nl> + import java . io . IOException ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Path ; <nl> + import java . util . Set ; <nl> + import java . util . function . Consumer ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + import static net . minecraftforge . fml . Logging . LOADING ; <nl> import static net . minecraftforge . fml . Logging . SCAN ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> @ @ - 34 , 17 + 45 , 20 @ @ public class Scanner { <nl> public ScanResult scan ( ) { <nl> ScanResult result = new ScanResult ( fileToScan ) ; <nl> fileToScan . scanFile ( p - > fileVisitor ( p , result ) ) ; <nl> + final Set < IModLanguageProvider > modLoaders = fileToScan . getModInfos ( ) . stream ( ) . map ( ModInfo : : getModLoader ) . map ( FMLLoader . getLanguageLoadingProvider ( ) : : getLanguage ) . collect ( Collectors . toSet ( ) ) ; <nl> + modLoaders . stream ( ) . peek ( ml - > fmlLog . debug ( SCAN , " Scanning { } with language loader { } " , fileToScan . getFilePath ( ) , ml . name ( ) ) ) <nl> + . map ( IModLanguageProvider : : getFileVisitor ) . forEach ( c - > c . accept ( result ) ) ; <nl> return result ; <nl> } <nl> <nl> - private void fileVisitor ( final java . nio . file . Path path , final ScanResult result ) { <nl> + private void fileVisitor ( final Path path , final ScanResult result ) { <nl> try { <nl> fmlLog . debug ( SCAN , " Scanning { } path { } " , fileToScan , path ) ; <nl> ModClassVisitor mcv = new ModClassVisitor ( ) ; <nl> - org . objectweb . asm . ClassReader cr = new ClassReader ( java . nio . file . Files . newInputStream ( path ) ) ; <nl> + ClassReader cr = new ClassReader ( Files . newInputStream ( path ) ) ; <nl> cr . accept ( mcv , 0 ) ; <nl> mcv . buildData ( result . getClasses ( ) , result . getAnnotations ( ) ) ; <nl> - } catch ( java . io . IOException e ) { <nl> + } catch ( IOException e ) { <nl> / / mark path bad <nl> } <nl> } <nl> diff - - git a / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . IModLanguageProvider b / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . IModLanguageProvider <nl> new file mode 100644 <nl> index 0000000 . . dc3f902 <nl> - - - / dev / null <nl> + + + b / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . IModLanguageProvider <nl> @ @ - 0 , 0 + 1 @ @ <nl> + net . minecraftforge . fml . loading . FMLJavaModLanguageProvider <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfig . java b / src / main / java / net / minecraftforge / common / ForgeConfig . java 
 index 876d00b . . a8dc7a3 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeConfig . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeConfig . java 
 @ @ - 28 , 6 + 28 , 8 @ @ import java . util . List ; 
 
 import javax . annotation . Nullable ; 
 
 + import net . minecraftforge . eventbus . api . SubscribeEvent ; 
 + import net . minecraftforge . fml . config . ModConfig ; 
 import org . apache . logging . log4j . LogManager ; 
 
 import com . electronwill . nightconfig . core . CommentedConfig ; 
 @ @ - 130 , 7 + 132 , 6 @ @ public class ForgeConfig 
 } 
 
 public static class Client { 
 - 
 public final BooleanValue zoomInMissingModelTextInGui ; 
 
 public final BooleanValue forgeCloudsEnabled ; 
 @ @ - 183 , 7 + 184 , 7 @ @ public class ForgeConfig 
 } 
 } 
 
 - private static final ForgeConfigSpec spec = BUILDER . build ( ) ; 
 + static final ForgeConfigSpec spec = BUILDER . build ( ) ; 
 
 private static final ForgeConfigSpec . Builder CHUNK _ BUILDER = new ForgeConfigSpec . Builder ( ) ; 
 
 @ @ - 279 , 18 + 280 , 15 @ @ public class ForgeConfig 
 
 public static final ForgeConfigSpec chunk _ spec = CHUNK _ BUILDER . build ( ) ; 
 
 - private static void loadFrom ( final Path configRoot ) { 
 - Path configFile = configRoot . resolve ( " forge . toml " ) ; 
 - spec . setConfigFile ( configFile ) ; 
 - LogManager . getLogger ( ) . debug ( FORGEMOD , " Loaded Forge config from { } " , configFile ) ; 
 
 - configFile = configRoot . resolve ( " forge _ chunks . toml " ) ; 
 - chunk _ spec . setConfigFile ( configFile ) ; 
 - LogManager . getLogger ( ) . debug ( FORGEMOD , " Loaded Forge Chunk config from { } " , configFile ) ; 
 + @ SubscribeEvent 
 + public static void onLoad ( final ModConfig . Loading configEvent ) { 
 + LogManager . getLogger ( ) . debug ( FORGEMOD , " Loaded forge config file { } " , configEvent . getConfig ( ) . getFileName ( ) ) ; 
 } 
 
 - public static void load ( ) { 
 - loadFrom ( FMLPaths . CONFIGDIR . get ( ) ) ; 
 + @ SubscribeEvent 
 + public static void onFileChange ( final ModConfig . ConfigReloading configEvent ) { 
 + LogManager . getLogger ( ) . fatal ( CORE , " Forge config just got changed on the file system ! " ) ; 
 } 
 
 / / General 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java b / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java 
 index b9b9e75 . . 0a9325d 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeConfigSpec . java 
 @ @ - 73 , 19 + 73 , 8 @ @ public class ForgeConfigSpec extends UnmodifiableConfigWrapper < Config > 
 this . levelComments = levelComments ; 
 } 
 
 - public void setConfigFile ( Path path ) { 
 - setConfig ( CommentedFileConfig . builder ( path ) . sync ( ) 
 - . autosave ( ) 
 - / / . autoreload ( ) 
 - . writingMode ( WritingMode . REPLACE ) 
 - . build ( ) ) ; 
 - } 
 - 
 public void setConfig ( CommentedConfig config ) { 
 this . childConfig = config ; 
 - if ( config instanceof FileConfig ) { 
 - ( ( FileConfig ) config ) . load ( ) ; 
 - } 
 if ( ! isCorrect ( config ) ) { 
 String configName = config instanceof FileConfig ? ( ( FileConfig ) config ) . getNioPath ( ) . toString ( ) : config . toString ( ) ; 
 LogManager . getLogger ( ) . warn ( CORE , " Configuration file { } is not correct . Correcting " , configName ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 index 4231e48 . . 4bc5a95 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . common ; 
 import net . minecraftforge . fml . FMLWorldPersistenceHook ; 
 import net . minecraftforge . fml . VersionChecker ; 
 import net . minecraftforge . fml . WorldPersistenceHooks ; 
 + import net . minecraftforge . fml . config . ModConfig ; 
 import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; 
 import net . minecraftforge . fml . event . lifecycle . FMLLoadCompleteEvent ; 
 import net . minecraftforge . fml . event . lifecycle . FMLModIdMappingEvent ; 
 @ @ - 84 , 7 + 85 , 9 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook 
 MinecraftForge . EVENT _ BUS . addListener ( this : : serverStarting ) ; 
 MinecraftForge . EVENT _ BUS . addListener ( this : : playerLogin ) ; 
 MinecraftForge . EVENT _ BUS . addListener ( this : : serverStopping ) ; 
 - ForgeConfig . load ( ) ; 
 + FMLModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . CLIENT , ForgeConfig . spec ) ; 
 + FMLModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . SERVER , ForgeConfig . chunk _ spec ) ; 
 + FMLModLoadingContext . get ( ) . getModEventBus ( ) . register ( ForgeConfig . class ) ; 
 } 
 
 / * 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 index 128107c . . 01e6467 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 @ @ - 19 , 14 + 19 , 10 @ @ 
 
 package net . minecraftforge . fml ; 
 
 + import net . minecraftforge . fml . config . ModConfig ; 
 import net . minecraftforge . forgespi . language . IModInfo ; 
 
 - import java . util . Collections ; 
 - import java . util . HashMap ; 
 - import java . util . IdentityHashMap ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - import java . util . Optional ; 
 + import java . util . * ; 
 import java . util . function . Consumer ; 
 import java . util . function . Supplier ; 
 
 @ @ - 51 , 6 + 47 , 9 @ @ public abstract class ModContainer 
 protected ModLoadingStage modLoadingStage ; 
 protected final Map < ModLoadingStage , Consumer < LifecycleEventProvider . LifecycleEvent > > triggerMap ; 
 protected final Map < ExtensionPoint , Supplier < ? > > extensionPoints = new IdentityHashMap < > ( ) ; 
 + protected final EnumMap < ModConfig . Type , ModConfig > configs = new EnumMap < > ( ModConfig . Type . class ) ; 
 + @ SuppressWarnings ( " OptionalUsedAsFieldOrParameterType " ) 
 + protected Optional < Consumer < ModConfig . ModConfigEvent > > configHandler = Optional . empty ( ) ; 
 
 public ModContainer ( IModInfo info ) 
 { 
 @ @ - 125 , 6 + 124 , 14 @ @ public abstract class ModContainer 
 extensionPoints . put ( point , extension ) ; 
 } 
 
 + public void addConfig ( final ModConfig modConfig ) { 
 + configs . put ( modConfig . getType ( ) , modConfig ) ; 
 + } 
 + 
 + public void dispatchConfigEvent ( ModConfig . ModConfigEvent event ) { 
 + configHandler . ifPresent ( configHandler - > configHandler . accept ( event ) ) ; 
 + } 
 + 
 / * * 
 * Does this mod match the supplied mod ? 
 * 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 index 8818b1a . . 1c32908 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 @ @ - 24 , 6 + 24 , 9 @ @ import net . minecraftforge . api . distmarker . Dist ; 
 import net . minecraftforge . client . event . ModelRegistryEvent ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . common . capabilities . CapabilityManager ; 
 + import net . minecraftforge . fml . config . ConfigTracker ; 
 + import net . minecraftforge . fml . config . ModConfig ; 
 + import net . minecraftforge . fml . loading . FMLPaths ; 
 import net . minecraftforge . forgespi . language . IModInfo ; 
 import net . minecraftforge . fml . loading . FMLLoader ; 
 import net . minecraftforge . fml . loading . LoadingModList ; 
 @ @ - 127 , 6 + 130 , 7 @ @ public class ModLoader 
 ObjectHolderRegistry . findObjectHolders ( ) ; 
 CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; 
 GameData . fireRegistryEvents ( rl - > true , LifecycleEventProvider . LOAD _ REGISTRIES , this : : dispatchAndHandleError ) ; 
 + DistExecutor . runWhenOn ( Dist . CLIENT , ( ) - > ( ) - > ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . CLIENT , FMLPaths . CONFIGDIR . get ( ) ) ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . SETUP ) ; 
 DistExecutor . runWhenOn ( Dist . CLIENT , ModLoader : : fireClientEvents ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . SIDED _ SETUP ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigFileTypeHandler . java b / src / main / java / net / minecraftforge / fml / config / ConfigFileTypeHandler . java 
 new file mode 100644 
 index 0000000 . . 39931e9 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / config / ConfigFileTypeHandler . java 
 @ @ - 0 , 0 + 1 , 55 @ @ 
 + package net . minecraftforge . fml . config ; 
 + 
 + import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 + import com . electronwill . nightconfig . core . file . FileWatcher ; 
 + import com . electronwill . nightconfig . core . io . WritingMode ; 
 + import net . minecraftforge . fml . loading . FMLPaths ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import java . io . IOException ; 
 + import java . nio . file . Path ; 
 + import java . util . function . Function ; 
 + 
 + import static net . minecraftforge . fml . config . ConfigTracker . CONFIG ; 
 + 
 + public class ConfigFileTypeHandler { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 + static ConfigFileTypeHandler TOML = new ConfigFileTypeHandler ( ) ; 
 + 
 + public Function < ModConfig , CommentedFileConfig > reader ( Path configBasePath ) { 
 + return ( c ) - > { 
 + final Path configPath = configBasePath . resolve ( c . getFileName ( ) ) ; 
 + final CommentedFileConfig configData = CommentedFileConfig . builder ( configPath ) . sync ( ) . 
 + autosave ( ) . 
 + writingMode ( WritingMode . REPLACE ) . 
 + build ( ) ; 
 + LOGGER . debug ( CONFIG , " Built TOML config for { } " , configPath . toString ( ) ) ; 
 + try { 
 + FileWatcher . defaultInstance ( ) . addWatch ( configPath , new ConfigWatcher ( c , configData ) ) ; 
 + LOGGER . debug ( CONFIG , " Watching TOML config file { } for changes " , configPath . toString ( ) ) ; 
 + } catch ( IOException e ) { 
 + throw new RuntimeException ( " Couldn ' t watch config file " , e ) ; 
 + } 
 + configData . load ( ) ; 
 + LOGGER . debug ( CONFIG , " Loaded TOML config file { } " , configPath . toString ( ) ) ; 
 + return configData ; 
 + } ; 
 + } 
 + 
 + private static class ConfigWatcher implements Runnable { 
 + private final ModConfig modConfig ; 
 + private final CommentedFileConfig commentedFileConfig ; 
 + 
 + ConfigWatcher ( final ModConfig modConfig , final CommentedFileConfig commentedFileConfig ) { 
 + this . modConfig = modConfig ; 
 + this . commentedFileConfig = commentedFileConfig ; 
 + } 
 + 
 + @ Override 
 + public void run ( ) { 
 + LOGGER . debug ( CONFIG , " Config file { } changed , sending notifies " , this . modConfig . getFileName ( ) ) ; 
 + this . modConfig . fireEvent ( new ModConfig . ConfigReloading ( this . modConfig ) ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 new file mode 100644 
 index 0000000 . . 912e22e 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + package net . minecraftforge . fml . config ; 
 + 
 + import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + import org . apache . logging . log4j . Marker ; 
 + import org . apache . logging . log4j . MarkerManager ; 
 + 
 + import java . nio . file . Path ; 
 + import java . util . EnumMap ; 
 + import java . util . Set ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 + import java . util . concurrent . ConcurrentSkipListSet ; 
 + 
 + public class ConfigTracker { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 + static final Marker CONFIG = MarkerManager . getMarker ( " CONFIG " ) ; 
 + public static final ConfigTracker INSTANCE = new ConfigTracker ( ) ; 
 + private final ConcurrentHashMap < String , ModConfig > fileMap ; 
 + private final EnumMap < ModConfig . Type , Set < ModConfig > > configSets ; 
 + 
 + private ConfigTracker ( ) { 
 + this . fileMap = new ConcurrentHashMap < > ( ) ; 
 + this . configSets = new EnumMap < > ( ModConfig . Type . class ) ; 
 + this . configSets . put ( ModConfig . Type . CLIENT , new ConcurrentSkipListSet < > ( ) ) ; 
 + / / this . configSets . put ( ModConfig . Type . PLAYER , new ConcurrentSkipListSet < > ( ) ) ; 
 + this . configSets . put ( ModConfig . Type . SERVER , new ConcurrentSkipListSet < > ( ) ) ; 
 + } 
 + 
 + void trackConfig ( final ModConfig config ) { 
 + if ( this . fileMap . containsKey ( config . getFileName ( ) ) ) { 
 + LOGGER . error ( CONFIG , " Detected config file conflict { } between { } and { } " , config . getFileName ( ) , this . fileMap . get ( config . getFileName ( ) ) . getModId ( ) , config . getModId ( ) ) ; 
 + throw new RuntimeException ( " Config conflict detected ! " ) ; 
 + } 
 + this . fileMap . put ( config . getFileName ( ) , config ) ; 
 + this . configSets . get ( config . getType ( ) ) . add ( config ) ; 
 + LOGGER . debug ( CONFIG , " Config file { } for { } tracking " , config . getFileName ( ) , config . getModId ( ) ) ; 
 + } 
 + 
 + public void loadConfigs ( ModConfig . Type type , Path configBasePath ) { 
 + LOGGER . debug ( CONFIG , " Loading configs type { } " , type ) ; 
 + this . configSets . get ( type ) . forEach ( config - > openConfig ( config , configBasePath ) ) ; 
 + } 
 + 
 + private void openConfig ( final ModConfig config , final Path configBasePath ) { 
 + LOGGER . debug ( CONFIG , " Loading config file type { } at { } for { } " , config . getType ( ) , config . getFileName ( ) , config . getModId ( ) ) ; 
 + final CommentedFileConfig configData = config . getHandler ( ) . reader ( configBasePath ) . apply ( config ) ; 
 + config . setConfigData ( configData ) ; 
 + config . fireEvent ( new ModConfig . Loading ( config ) ) ; 
 + config . getConfigData ( ) . save ( ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / config / ModConfig . java b / src / main / java / net / minecraftforge / fml / config / ModConfig . java 
 new file mode 100644 
 index 0000000 . . 617483a 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / config / ModConfig . java 
 @ @ - 0 , 0 + 1 , 132 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . config ; 
 + 
 + import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 + import net . minecraftforge . common . ForgeConfigSpec ; 
 + import net . minecraftforge . eventbus . api . Event ; 
 + import net . minecraftforge . fml . ModContainer ; 
 + import net . minecraftforge . fml . loading . StringUtils ; 
 + 
 + public class ModConfig 
 + { 
 + private final Type type ; 
 + private final ForgeConfigSpec spec ; 
 + private final String fileName ; 
 + private final ModContainer container ; 
 + private final ConfigFileTypeHandler configHandler ; 
 + private CommentedFileConfig configData ; 
 + 
 + public ModConfig ( final Type type , final ForgeConfigSpec spec , final ModContainer container , final String fileName ) { 
 + this . type = type ; 
 + this . spec = spec ; 
 + this . fileName = fileName ; 
 + this . container = container ; 
 + this . configHandler = ConfigFileTypeHandler . TOML ; 
 + ConfigTracker . INSTANCE . trackConfig ( this ) ; 
 + } 
 + 
 + public ModConfig ( final Type type , final ForgeConfigSpec spec , final ModContainer activeContainer ) { 
 + this ( type , spec , activeContainer , defaultConfigName ( type , activeContainer . getModId ( ) ) ) ; 
 + } 
 + 
 + private static String defaultConfigName ( Type type , String modId ) { 
 + / / config file name would be " forge - client . toml " and " forge - server . toml " 
 + return String . format ( " % s - % s . toml " , modId , type . extension ( ) ) ; 
 + } 
 + public Type getType ( ) { 
 + return type ; 
 + } 
 + 
 + public String getFileName ( ) { 
 + return fileName ; 
 + } 
 + 
 + public ConfigFileTypeHandler getHandler ( ) { 
 + return configHandler ; 
 + } 
 + 
 + public ForgeConfigSpec getSpec ( ) { 
 + return spec ; 
 + } 
 + 
 + public String getModId ( ) { 
 + return container . getModId ( ) ; 
 + } 
 + 
 + public CommentedFileConfig getConfigData ( ) { 
 + return this . configData ; 
 + } 
 + 
 + void setConfigData ( final CommentedFileConfig configData ) { 
 + this . configData = configData ; 
 + this . spec . setConfig ( this . configData ) ; 
 + } 
 + 
 + void fireEvent ( final ModConfigEvent configEvent ) { 
 + this . container . dispatchConfigEvent ( configEvent ) ; 
 + } 
 + 
 + public enum Type { 
 + / * * 
 + * Client type config is exclusively for configuration affecting the client state . 
 + * Graphical options , for example . 
 + * / 
 + CLIENT , 
 + / / / * * 
 + / / * Player type config is configuration that is associated with a player . 
 + / / * Preferences around machine states , for example . 
 + / / * / 
 + / / PLAYER , 
 + / * * 
 + * Server type config is configuration that is associated with a server instance . 
 + * It will be synced from a server to the client on connection . 
 + * / 
 + SERVER ; 
 + 
 + public String extension ( ) { 
 + return StringUtils . toLowerCase ( name ( ) ) ; 
 + } 
 + } 
 + 
 + public static class ModConfigEvent extends Event { 
 + private final ModConfig config ; 
 + 
 + ModConfigEvent ( final ModConfig config ) { 
 + this . config = config ; 
 + } 
 + 
 + public ModConfig getConfig ( ) { 
 + return config ; 
 + } 
 + } 
 + 
 + public static class Loading extends ModConfigEvent { 
 + Loading ( final ModConfig config ) { 
 + super ( config ) ; 
 + } 
 + } 
 + 
 + public static class ConfigReloading extends ModConfigEvent { 
 + ConfigReloading ( final ModConfig config ) { 
 + super ( config ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 index a43c0df . . 6bf99bc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 @ @ - 19 , 8 + 19 , 10 @ @ 
 
 package net . minecraftforge . fml . javafmlmod ; 
 
 + import net . minecraftforge . common . ForgeConfigSpec ; 
 import net . minecraftforge . eventbus . api . IEventBus ; 
 import net . minecraftforge . fml . ExtensionPoint ; 
 + import net . minecraftforge . fml . config . ModConfig ; 
 
 import java . util . function . Supplier ; 
 
 @ @ - 36 , 6 + 38 , 14 @ @ public class FMLModLoadingContext 
 getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; 
 } 
 
 + public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { 
 + activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer ) ) ; 
 + } 
 + 
 + public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { 
 + activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer , fileName ) ) ; 
 + } 
 + 
 public IEventBus getModEventBus ( ) 
 { 
 return getActiveContainer ( ) . getEventBus ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 index c958265 . . b0155a9 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 @ @ - 29 , 11 + 29 , 15 @ @ import net . minecraftforge . api . distmarker . Dist ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fml . DistExecutor ; 
 import net . minecraftforge . fml . LogicalSidedProvider ; 
 + import net . minecraftforge . fml . config . ConfigTracker ; 
 + import net . minecraftforge . fml . config . ModConfig ; 
 import net . minecraftforge . fml . event . server . FMLServerAboutToStartEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; 
 + import net . minecraftforge . fml . loading . FMLPaths ; 
 + import net . minecraftforge . fml . loading . FileUtils ; 
 import net . minecraftforge . fml . network . NetworkHooks ; 
 import net . minecraftforge . fml . packs . ResourcePackLoader ; 
 import org . apache . logging . log4j . LogManager ; 
 @ @ - 41 , 6 + 45 , 8 @ @ import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 + import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 import java . util . List ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 @ @ - 56 , 6 + 62 , 9 @ @ public class ServerLifecycleHooks 
 { 
 currentServer = server ; 
 LogicalSidedProvider . setServer ( ( ) - > server ) ; 
 + final Path serverConfig = server . getActiveAnvilConverter ( ) . getFile ( server . getFolderName ( ) , " serverconfig " ) . toPath ( ) ; 
 + FileUtils . getOrCreateDirectory ( serverConfig , " serverconfig " ) ; 
 + ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . SERVER , serverConfig ) ; 
 ResourcePackLoader . loadResourcePacks ( currentServer . getResourcePacks ( ) ) ; 
 return ! MinecraftForge . EVENT _ BUS . post ( new FMLServerAboutToStartEvent ( server ) ) ; 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / LaunchTesting . java b / src / main / java / net / minecraftforge / fml / LaunchTesting . java 
 index c34b865 . . 020c5e7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / LaunchTesting . java 
 + + + b / src / main / java / net / minecraftforge / fml / LaunchTesting . java 
 @ @ - 25 , 9 + 25 , 10 @ @ import org . apache . logging . log4j . core . config . Configurator ; 
 
 public class LaunchTesting 
 { 
 - public static void main ( String . . . args ) 
 + public static void main ( String . . . args ) throws InterruptedException 
 { 
 Configurator . setRootLevel ( Level . DEBUG ) ; 
 Launcher . main ( " - - launchTarget " , " fml " , " - - gameDir " , " projects / run " ) ; 
 + Thread . sleep ( 10000 ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLJavaModLanguageProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLJavaModLanguageProvider . java 
 new file mode 100644 
 index 0000000 . . fe23461 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLJavaModLanguageProvider . java 
 @ @ - 0 , 0 + 1 , 86 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . loading ; 
 + 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 + import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 + import net . minecraftforge . fml . loading . moddiscovery . ScanResult ; 
 + import org . objectweb . asm . Type ; 
 + 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . function . Consumer ; 
 + import java . util . function . Function ; 
 + import java . util . stream . Collectors ; 
 + 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 + import static net . minecraftforge . fml . Logging . fmlLog ; 
 + 
 + public class FMLJavaModLanguageProvider implements IModLanguageProvider 
 + { 
 + private static class FMLModTarget implements IModLanguageProvider . IModLanguageLoader { 
 + private final String className ; 
 + private final String modId ; 
 + 
 + private FMLModTarget ( String className , String modId ) 
 + { 
 + this . className = className ; 
 + this . modId = modId ; 
 + } 
 + 
 + public String getModId ( ) 
 + { 
 + return modId ; 
 + } 
 + 
 + @ Override 
 + public ModContainer loadMod ( ModFile file , ClassLoader modClassLoader ) 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + public static final Type MODANNOTATION = Type . getType ( " Lnet / minecraftforge / fml / common / Mod ; " ) ; 
 + 
 + @ Override 
 + public String name ( ) 
 + { 
 + return " javafml " ; 
 + } 
 + 
 + @ Override 
 + public Consumer < ScanResult > getFileVisitor ( ) { 
 + return scanResult - > { 
 + final Map < String , FMLModTarget > modTargetMap = scanResult . getAnnotations ( ) . stream ( ) 
 + . filter ( ad - > ad . getAnnotationType ( ) . equals ( MODANNOTATION ) ) 
 + . peek ( ad - > fmlLog . debug ( SCAN , " Found @ Mod class { } with id { } " , ad . getClassType ( ) . getClassName ( ) , ad . getAnnotationData ( ) . get ( " modid " ) ) ) 
 + . map ( ad - > new FMLModTarget ( ad . getClassType ( ) . getClassName ( ) , ( String ) ad . getAnnotationData ( ) . get ( " modid " ) ) ) 
 + . collect ( Collectors . toMap ( FMLModTarget : : getModId , Function . identity ( ) ) ) ; 
 + modTargetMap . forEach ( ( key , value ) - > scanResult . getFile ( ) . claimLanguage ( key , value ) ) ; 
 + } ; 
 + } 
 + 
 + @ Override 
 + public List < ModContainer > buildModContainers ( List < ModInfo > modFiles , ClassLoader modClassLoader ) 
 + { 
 + return null ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java b / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java 
 index 5aecb99 . . 0255021 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java 
 @ @ - 28 , 25 + 28 , 20 @ @ import net . minecraftforge . fml . loading . moddiscovery . ModDiscoverer ; 
 import net . minecraftforge . forgespi . ICoreModProvider ; 
 
 import java . util . ArrayList ; 
 - import java . util . Arrays ; 
 - import java . util . HashSet ; 
 - import java . util . Iterator ; 
 - import java . util . List ; 
 import java . util . ServiceLoader ; 
 import java . util . Set ; 
 import java . util . stream . Collectors ; 
 
 import static net . minecraftforge . fml . Logging . CORE ; 
 - import static net . minecraftforge . fml . Logging . LOADING ; 
 import static net . minecraftforge . fml . Logging . SCAN ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class FMLLoader 
 { 
 - 
 private static ILaunchPluginService accessTransformer ; 
 private static ModDiscoverer modDiscoverer ; 
 - private static ICoreModProvider coreMod ; 
 + private static ICoreModProvider coreModProvider ; 
 + private static LanguageLoadingProvider languageLoadingProvider ; 
 
 static void onInitialLoad ( IEnvironment environment , Set < String > otherServices ) throws IncompatibleEnvironmentException 
 { 
 @ @ - 79 , 9 + 74 , 11 @ @ public class FMLLoader 
 throw new IncompatibleEnvironmentException ( " Multiple coremod libraries found " ) ; 
 } 
 
 - coreMod = coreModProviders . get ( 0 ) ; 
 - final Package coremodPackage = coreMod . getClass ( ) . getPackage ( ) ; 
 + coreModProvider = coreModProviders . get ( 0 ) ; 
 + final Package coremodPackage = coreModProvider . getClass ( ) . getPackage ( ) ; 
 fmlLog . debug ( CORE , " FML found CoreMod version : { } " , coremodPackage . getImplementationVersion ( ) ) ; 
 + 
 + languageLoadingProvider = new LanguageLoadingProvider ( ) ; 
 } 
 
 public static void load ( ) 
 @ @ - 90 , 4 + 87 , 13 @ @ public class FMLLoader 
 modDiscoverer = new ModDiscoverer ( ) ; 
 modDiscoverer . discoverMods ( ) ; 
 } 
 + 
 + public static ICoreModProvider getCoreModProvider ( ) { 
 + return coreModProvider ; 
 + } 
 + 
 + public static LanguageLoadingProvider getLanguageLoadingProvider ( ) 
 + { 
 + return languageLoadingProvider ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java 
 index 3ceec55 . . 0d1c070 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java 
 @ @ - 25 , 14 + 25 , 17 @ @ import cpw . mods . modlauncher . api . ITransformer ; 
 import cpw . mods . modlauncher . api . IncompatibleEnvironmentException ; 
 import joptsimple . ArgumentAcceptingOptionSpec ; 
 import joptsimple . OptionSpecBuilder ; 
 + import net . minecraftforge . coremod . CoreModEngine ; 
 import net . minecraftforge . fml . FMLConfig ; 
 import net . minecraftforge . fml . common . FMLPaths ; 
 
 import javax . annotation . Nonnull ; 
 + import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Set ; 
 import java . util . function . BiFunction ; 
 + import java . util . stream . Collectors ; 
 
 import static net . minecraftforge . fml . Logging . CORE ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 @ @ - 86 , 7 + 89 , 8 @ @ public class FMLServiceProvider implements ITransformationService 
 @ Override 
 public List < ITransformer > transformers ( ) 
 { 
 - return Collections . emptyList ( ) ; 
 + fmlLog . debug ( CORE , " Loading coremod transformers " ) ; 
 + return new ArrayList < > ( FMLLoader . getCoreModProvider ( ) . getCoreModTransformers ( ) ) ; 
 } 
 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / IModLanguageProvider . java b / src / main / java / net / minecraftforge / fml / loading / IModLanguageProvider . java 
 new file mode 100644 
 index 0000000 . . cceb903 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / loading / IModLanguageProvider . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . loading ; 
 + 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 + import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 + import net . minecraftforge . fml . loading . moddiscovery . ScanResult ; 
 + 
 + import java . util . List ; 
 + import java . util . function . Consumer ; 
 + 
 + / * * 
 + * Loaded as a ServiceLoader , from the classpath . Extensions are loaded from 
 + * the mods directory , with the FMLType META - INF of LANGPROVIDER . 
 + * 
 + * Version data is read from the manifest ' s implementation version . 
 + * / 
 + public interface IModLanguageProvider 
 + { 
 + String name ( ) ; 
 + 
 + Consumer < ScanResult > getFileVisitor ( ) ; 
 + 
 + interface IModLanguageLoader { 
 + ModContainer loadMod ( ModFile file , ClassLoader modClassLoader ) ; 
 + } 
 + 
 + List < ModContainer > buildModContainers ( List < ModInfo > modFiles , ClassLoader modClassLoader ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java b / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java 
 new file mode 100644 
 index 0000000 . . 5b7c7f9 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java 
 @ @ - 0 , 0 + 1 , 64 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . loading ; 
 + 
 + import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 + 
 + import java . nio . file . Path ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . ServiceLoader ; 
 + import java . util . stream . Stream ; 
 + 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 + import static net . minecraftforge . fml . Logging . fmlLog ; 
 + 
 + public class LanguageLoadingProvider 
 + { 
 + private final List < IModLanguageProvider > languageProviders = new ArrayList < > ( ) ; 
 + private final ServiceLoader < IModLanguageProvider > serviceLoader ; 
 + private final Map < String , IModLanguageProvider > languageProviderMap = new HashMap < > ( ) ; 
 + 
 + LanguageLoadingProvider ( ) { 
 + serviceLoader = ServiceLoader . load ( IModLanguageProvider . class ) ; 
 + serviceLoader . forEach ( languageProviders : : add ) ; 
 + 
 + languageProviders . forEach ( lp - > { 
 + final Package pkg = lp . getClass ( ) . getPackage ( ) ; 
 + fmlLog . debug ( CORE , " Found system classpath language provider { } , version { } " , lp . name ( ) , pkg . getImplementationVersion ( ) ) ; 
 + } ) ; 
 + 
 + languageProviders . forEach ( lp - > languageProviderMap . put ( lp . name ( ) , lp ) ) ; 
 + } 
 + 
 + public void addAdditionalLanguages ( List < ModFile > modFiles ) 
 + { 
 + if ( modFiles = = null ) return ; 
 + Stream < Path > langPaths = modFiles . stream ( ) . map ( ModFile : : getFilePath ) ; 
 + serviceLoader . reload ( ) ; 
 + } 
 + 
 + public IModLanguageProvider getLanguage ( String name ) 
 + { 
 + return languageProviderMap . get ( name ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java 
 index 93694a4 . . 42a754f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java 
 @ @ - 19 , 11 + 19 , 14 @ @ 
 
 package net . minecraftforge . fml . loading . moddiscovery ; 
 
 + import com . google . common . util . concurrent . MoreExecutors ; 
 + 
 import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . concurrent . CompletableFuture ; 
 import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 + import java . util . concurrent . ThreadFactory ; 
 import java . util . concurrent . TimeUnit ; 
 
 import static net . minecraftforge . fml . Logging . SCAN ; 
 @ @ - 37 , 7 + 40 , 11 @ @ public class BackgroundScanHandler 
 private final List < ModFile > allFiles ; 
 
 public BackgroundScanHandler ( ) { 
 - modContentScanner = Executors . newCachedThreadPool ( ) ; 
 + modContentScanner = Executors . newSingleThreadExecutor ( r - > { 
 + final Thread thread = Executors . defaultThreadFactory ( ) . newThread ( r ) ; 
 + thread . setDaemon ( true ) ; 
 + return thread ; 
 + } ) ; 
 scannedFiles = new ArrayList < > ( ) ; 
 pendingFiles = new ArrayList < > ( ) ; 
 allFiles = new ArrayList < > ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 index 27dc4f0 . . de71a15 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 @ @ - 20 , 6 + 20 , 8 @ @ 
 package net . minecraftforge . fml . loading . moddiscovery ; 
 
 import cpw . mods . modlauncher . ServiceLoaderStreamUtils ; 
 + import net . minecraftforge . fml . loading . FMLLoader ; 
 + import net . minecraftforge . fml . loading . LanguageLoadingProvider ; 
 
 import java . util . Collection ; 
 import java . util . List ; 
 @ @ - 54 , 12 + 56 , 12 @ @ public class ModDiscoverer { 
 . peek ( mf - > fmlLog . debug ( SCAN , " Found mod file { } of type { } with locator { } " , mf . getFileName ( ) , mf . getType ( ) , mf . getLocator ( ) ) ) 
 . collect ( Collectors . groupingBy ( ModFile : : getType ) ) ; 
 
 - / / ModLanguageProvider . loadAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; 
 + FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; 
 BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; 
 final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; 
 mods . forEach ( ModFile : : identifyMods ) ; 
 fmlLog . debug ( SCAN , " Found { } mod files with { } mods " , mods : : size , ( ) - > mods . stream ( ) . mapToInt ( mf - > mf . getModInfos ( ) . size ( ) ) . sum ( ) ) ; 
 - / / mods . stream ( ) . map ( ModFile : : getCoreMods ) . flatMap ( List : : stream ) . forEach ( ServiceProviders . getCoreModProvider ( ) : : addCoreMod ) ; 
 + mods . stream ( ) . map ( ModFile : : getCoreMods ) . flatMap ( List : : stream ) . forEach ( FMLLoader . getCoreModProvider ( ) : : addCoreMod ) ; 
 mods . forEach ( backgroundScanHandler : : submitForScanning ) ; 
 return backgroundScanHandler ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java 
 index 8733035 . . 8f57bae 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java 
 @ @ - 19 , 14 + 19 , 21 @ @ 
 
 package net . minecraftforge . fml . loading . moddiscovery ; 
 
 + import net . minecraftforge . fml . loading . IModLanguageProvider ; 
 + 
 + import javax . swing . text . html . Option ; 
 import java . nio . file . Path ; 
 import java . util . List ; 
 + import java . util . Map ; 
 import java . util . Objects ; 
 + import java . util . Optional ; 
 import java . util . concurrent . CompletableFuture ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . function . Consumer ; 
 + import java . util . function . Function ; 
 import java . util . jar . Attributes ; 
 import java . util . jar . Manifest ; 
 + import java . util . stream . Collectors ; 
 
 import static net . minecraftforge . fml . Logging . LOADING ; 
 import static net . minecraftforge . fml . Logging . SCAN ; 
 @ @ - 40 , 6 + 47 , 11 @ @ public class ModFile 
 DEFAULTMANIFEST . getMainAttributes ( ) . putValue ( " FMLModType " , " MOD " ) ; 
 } 
 
 + public void claimLanguage ( String modId , IModLanguageProvider . IModLanguageLoader loader ) 
 + { 
 + this . modInfoMap . get ( modId ) . setLoader ( loader ) ; 
 + } 
 + 
 public enum Type { 
 MOD , LIBRARY , LANGPROVIDER 
 } 
 @ @ - 47 , 6 + 59 , 7 @ @ public class ModFile 
 private final Type modFileType ; 
 private final Manifest manifest ; 
 private List < ModInfo > modInfos ; 
 + private Map < String , ModInfo > modInfoMap ; 
 private final IModLocator locator ; 
 private ScanResult fileScanResult ; 
 private CompletableFuture < ScanResult > futureScanResult ; 
 @ @ - 60 , 7 + 73 , 8 @ @ public class ModFile 
 manifest = locator . findManifest ( file ) . orElse ( DEFAULTMANIFEST ) ; 
 if ( manifest ! = DEFAULTMANIFEST ) fmlLog . debug ( SCAN , " Mod file { } has a manifest " , file ) ; 
 else fmlLog . debug ( SCAN , " Mod file { } is missing a manifest " , file ) ; 
 - modFileType = Type . valueOf ( manifest . getMainAttributes ( ) . getValue ( TYPE ) ) ; 
 + final Optional < String > value = Optional . ofNullable ( manifest . getMainAttributes ( ) . getValue ( TYPE ) ) ; 
 + modFileType = Type . valueOf ( value . orElse ( " MOD " ) ) ; 
 } 
 
 public Type getType ( ) { 
 @ @ - 78 , 6 + 92 , 7 @ @ public class ModFile 
 public void identifyMods ( ) { 
 this . modInfos = ModFileParser . readModList ( this ) ; 
 this . modInfos . forEach ( mi - > fmlLog . debug ( LOADING , " Found mod { } for language { } " , mi . getModId ( ) , mi . getModLoader ( ) ) ) ; 
 + this . modInfoMap = this . modInfos . stream ( ) . collect ( Collectors . toMap ( ModInfo : : getModId , Function . identity ( ) ) ) ; 
 this . coreMods = ModFileParser . getCoreMods ( this ) ; 
 this . coreMods . forEach ( mi - > fmlLog . debug ( LOADING , " Found coremod { } " , mi . getPath ( ) ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModInfo . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModInfo . java 
 index 2a3c1de . . 7910600 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModInfo . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModInfo . java 
 @ @ - 20 , 6 + 20 , 10 @ @ 
 package net . minecraftforge . fml . loading . moddiscovery ; 
 
 import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 + import net . minecraftforge . fml . loading . IModLanguageProvider ; 
 + 
 + import java . net . URL ; 
 + import java . util . List ; 
 
 public class ModInfo { 
 private final ModFile owningFile ; 
 @ @ - 27 , 11 + 31 , 12 @ @ public class ModInfo { 
 private final ArtifactVersion version ; 
 private final String displayName ; 
 private final String description ; 
 - private final java . net . URL updateJSONURL ; 
 + private final URL updateJSONURL ; 
 private final String modLoader ; 
 - private final java . util . List < net . minecraftforge . fml . loading . moddiscovery . ModInfo . ModVersion > dependencies ; 
 + private final List < ModInfo . ModVersion > dependencies ; 
 + private IModLanguageProvider . IModLanguageLoader loader ; 
 
 - public ModInfo ( final ModFile owningFile , final String modLoader , final String modId , final String displayName , final ArtifactVersion version , final String description , final java . net . URL updateJSONURL , final java . util . List < net . minecraftforge . fml . loading . moddiscovery . ModInfo . ModVersion > dependencies ) { 
 + public ModInfo ( final ModFile owningFile , final String modLoader , final String modId , final String displayName , final ArtifactVersion version , final String description , final URL updateJSONURL , final List < ModInfo . ModVersion > dependencies ) { 
 this . owningFile = owningFile ; 
 this . modLoader = modLoader ; 
 this . modId = modId ; 
 @ @ - 58 , 6 + 63 , 11 @ @ public class ModInfo { 
 return version ; 
 } 
 
 + public void setLoader ( IModLanguageProvider . IModLanguageLoader loader ) 
 + { 
 + this . loader = loader ; 
 + } 
 + 
 public enum Ordering { 
 BEFORE , AFTER , NONE ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ScanResult . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ScanResult . java 
 index f35f626 . . cd75eaa 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ScanResult . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ScanResult . java 
 @ @ - 22 , 27 + 22 , 33 @ @ package net . minecraftforge . fml . loading . moddiscovery ; 
 
 import org . objectweb . asm . Type ; 
 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 
 public class ScanResult { 
 private final ModFile file ; 
 - private final java . util . List < net . minecraftforge . fml . loading . moddiscovery . ScanResult . AnnotationData > annotations = new java . util . ArrayList < > ( ) ; 
 - private final java . util . List < net . minecraftforge . fml . loading . moddiscovery . ScanResult . ClassData > classes = new java . util . ArrayList < > ( ) ; 
 + private final List < ScanResult . AnnotationData > annotations = new ArrayList < > ( ) ; 
 + private final List < ScanResult . ClassData > classes = new ArrayList < > ( ) ; 
 
 public ScanResult ( final ModFile file ) { 
 this . file = file ; 
 } 
 
 + public ModFile getFile ( ) { 
 + return file ; 
 + } 
 + 
 public static boolean interestingAnnotations ( final ModAnnotation annotation ) { 
 return true ; 
 } 
 
 - public java . util . List < net . minecraftforge . fml . loading . moddiscovery . ScanResult . ClassData > getClasses ( ) { 
 + public List < ScanResult . ClassData > getClasses ( ) { 
 return classes ; 
 } 
 
 - public java . util . List < net . minecraftforge . fml . loading . moddiscovery . ScanResult . AnnotationData > getAnnotations ( ) { 
 + public List < ScanResult . AnnotationData > getAnnotations ( ) { 
 return annotations ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java 
 index 0770426 . . 92fdab3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java 
 @ @ - 19 , 8 + 19 , 19 @ @ 
 
 package net . minecraftforge . fml . loading . moddiscovery ; 
 
 + import net . minecraftforge . fml . loading . FMLLoader ; 
 + import net . minecraftforge . fml . loading . IModLanguageProvider ; 
 + import net . minecraftforge . fml . loading . LanguageLoadingProvider ; 
 import org . objectweb . asm . ClassReader ; 
 
 + import java . io . IOException ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Path ; 
 + import java . util . Set ; 
 + import java . util . function . Consumer ; 
 + import java . util . stream . Collectors ; 
 + 
 + import static net . minecraftforge . fml . Logging . LOADING ; 
 import static net . minecraftforge . fml . Logging . SCAN ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 @ @ - 34 , 17 + 45 , 20 @ @ public class Scanner { 
 public ScanResult scan ( ) { 
 ScanResult result = new ScanResult ( fileToScan ) ; 
 fileToScan . scanFile ( p - > fileVisitor ( p , result ) ) ; 
 + final Set < IModLanguageProvider > modLoaders = fileToScan . getModInfos ( ) . stream ( ) . map ( ModInfo : : getModLoader ) . map ( FMLLoader . getLanguageLoadingProvider ( ) : : getLanguage ) . collect ( Collectors . toSet ( ) ) ; 
 + modLoaders . stream ( ) . peek ( ml - > fmlLog . debug ( SCAN , " Scanning { } with language loader { } " , fileToScan . getFilePath ( ) , ml . name ( ) ) ) 
 + . map ( IModLanguageProvider : : getFileVisitor ) . forEach ( c - > c . accept ( result ) ) ; 
 return result ; 
 } 
 
 - private void fileVisitor ( final java . nio . file . Path path , final ScanResult result ) { 
 + private void fileVisitor ( final Path path , final ScanResult result ) { 
 try { 
 fmlLog . debug ( SCAN , " Scanning { } path { } " , fileToScan , path ) ; 
 ModClassVisitor mcv = new ModClassVisitor ( ) ; 
 - org . objectweb . asm . ClassReader cr = new ClassReader ( java . nio . file . Files . newInputStream ( path ) ) ; 
 + ClassReader cr = new ClassReader ( Files . newInputStream ( path ) ) ; 
 cr . accept ( mcv , 0 ) ; 
 mcv . buildData ( result . getClasses ( ) , result . getAnnotations ( ) ) ; 
 - } catch ( java . io . IOException e ) { 
 + } catch ( IOException e ) { 
 / / mark path bad 
 } 
 } 
 diff - - git a / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . IModLanguageProvider b / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . IModLanguageProvider 
 new file mode 100644 
 index 0000000 . . dc3f902 
 - - - / dev / null 
 + + + b / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . IModLanguageProvider 
 @ @ - 0 , 0 + 1 @ @ 
 + net . minecraftforge . fml . loading . FMLJavaModLanguageProvider 
 \ No newline at end of file
