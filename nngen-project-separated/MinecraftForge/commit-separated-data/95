BLEU SCORE: 0.0367352656298894

TEST MSG: Use a configuration value for the thread count , make it default to
GENERATED MSG: Some tweaks to get the launcher working .

TEST DIFF (one line): diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLConfig . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLConfig . java <nl> index a2b4648 . . 5ec8f95 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLConfig . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLConfig . java <nl> @ @ - 39 , 9 + 39 , 7 @ @ public class FMLConfig <nl> private static ConfigSpec configSpec = new ConfigSpec ( ) ; <nl> static { <nl> configSpec . define ( " splashscreen " , Boolean . TRUE ) ; <nl> - configSpec . defineInList ( " side " , Dist . CLIENT . name ( ) , Arrays . stream ( Dist . values ( ) ) . map ( Enum : : name ) . collect ( Collectors . toList ( ) ) ) ; <nl> - configSpec . defineInRange ( " maxframerate " , 60 , 10 , 120 ) ; <nl> - configSpec . defineInRange ( " minframerate " , 60 , 10 , 120 ) ; <nl> + configSpec . define ( " maxThreads " , - 1 ) ; <nl> } <nl> <nl> private CommentedFileConfig configData ; <nl> @ @ - 70 , 7 + 68 , 13 @ @ public class FMLConfig <nl> LOGGER . debug ( CORE , " Splash screen is { } " , INSTANCE . splashScreenEnabled ( ) ) ; <nl> } <nl> <nl> - public boolean splashScreenEnabled ( ) { <nl> - return configData . < Boolean > getOptional ( " splashscreen " ) . orElse ( Boolean . FALSE ) ; <nl> + public static boolean splashScreenEnabled ( ) { <nl> + return INSTANCE . configData . < Boolean > getOptional ( " splashscreen " ) . orElse ( Boolean . FALSE ) ; <nl> + } <nl> + <nl> + public static int loadingThreadCount ( ) { <nl> + int val = INSTANCE . configData . get ( " maxThreads " ) ; <nl> + if ( val < = 0 ) return Runtime . getRuntime ( ) . availableProcessors ( ) ; <nl> + return val ; <nl> } <nl> } <nl> diff - - git a / src / fmllauncher / resources / META - INF / defaultfmlconfig . toml b / src / fmllauncher / resources / META - INF / defaultfmlconfig . toml <nl> index bddded4 . . dd5a690 100644 <nl> - - - a / src / fmllauncher / resources / META - INF / defaultfmlconfig . toml <nl> + + + b / src / fmllauncher / resources / META - INF / defaultfmlconfig . toml <nl> @ @ - 1 , 2 + 1 , 4 @ @ <nl> # does the splashscreen run <nl> splashscreen = true <nl> + # max threads for parallel loading : - 1 uses Runtime # availableProcessors <nl> + maxThreads = - 1 <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java <nl> index 396e441 . . 5762289 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModList . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package net . minecraftforge . fml ; <nl> <nl> + import net . minecraftforge . fml . loading . FMLConfig ; <nl> import net . minecraftforge . forgespi . language . ModFileScanData ; <nl> import net . minecraftforge . fml . loading . FMLLoader ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> @ @ - 35 , 7 + 36 , 6 @ @ import java . util . Optional ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ForkJoinPool ; <nl> import java . util . concurrent . ForkJoinWorkerThread ; <nl> - import java . util . concurrent . FutureTask ; <nl> import java . util . function . BiConsumer ; <nl> import java . util . function . Consumer ; <nl> import java . util . function . Function ; <nl> @ @ - 56 , 14 + 56 , 7 @ @ public class ModList <nl> private final Map < String , ModFileInfo > fileById ; <nl> private List < ModContainer > mods ; <nl> private Map < String , ModContainer > indexedMods ; <nl> - private ForkJoinPool modLoadingThreadPool = new ForkJoinPool ( Runtime . getRuntime ( ) . availableProcessors ( ) , pool - > <nl> - { <nl> - ForkJoinWorkerThread thread = ForkJoinPool . defaultForkJoinWorkerThreadFactory . newThread ( pool ) ; <nl> - thread . setName ( " modloading - worker - " + thread . getPoolIndex ( ) ) ; <nl> - / / The default sets it to the SystemClassloader , so copy the current one . <nl> - thread . setContextClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> - return thread ; <nl> - } , null , false ) ; <nl> + private ForkJoinPool modLoadingThreadPool ; <nl> private List < ModFileScanData > modFileScanData ; <nl> <nl> private ModList ( final List < ModFile > modFiles , final List < ModInfo > sortedList ) <nl> @ @ - 75 , 6 + 68 , 9 @ @ public class ModList <nl> this . fileById = this . modFiles . stream ( ) . map ( ModFileInfo : : getMods ) . flatMap ( Collection : : stream ) . <nl> map ( ModInfo . class : : cast ) . <nl> collect ( Collectors . toMap ( ModInfo : : getModId , ModInfo : : getOwningFile ) ) ; <nl> + final int loadingThreadCount = FMLConfig . loadingThreadCount ( ) ; <nl> + LOGGER . debug ( LOADING , " Using { } threads for parallel mod - loading " , loadingThreadCount ) ; <nl> + modLoadingThreadPool = new ForkJoinPool ( loadingThreadCount , ModList : : newForkJoinWorkerThread , null , false ) ; <nl> } <nl> <nl> public static ModList of ( List < ModFile > modFiles , List < ModInfo > sortedList ) <nl> @ @ - 91 , 6 + 87 , 14 @ @ public class ModList <nl> return INSTANCE ; <nl> } <nl> <nl> + private static ForkJoinWorkerThread newForkJoinWorkerThread ( ForkJoinPool pool ) { <nl> + ForkJoinWorkerThread thread = ForkJoinPool . defaultForkJoinWorkerThreadFactory . newThread ( pool ) ; <nl> + thread . setName ( " modloading - worker - " + thread . getPoolIndex ( ) ) ; <nl> + / / The default sets it to the SystemClassloader , so copy the current one . <nl> + thread . setContextClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + return thread ; <nl> + } <nl> + <nl> public List < ModFileInfo > getModFiles ( ) <nl> { <nl> return modFiles ;
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index e5fbd8c . . cacd8c9 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 105 , 7 + 105 , 7 @ @ project ( ' : forge ' ) { <nl> } <nl> dependencies { <nl> api ' net . minecraft : client : 1 . 13 : extra ' <nl> - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 3 ' / / Pinned until cpw fixes getCommonSupertype <nl> + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype <nl> api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' <nl> api ' net . minecraftforge : eventbus : 0 . 1 + : service ' <nl> api ' net . minecraftforge : forgespi : 0 . 1 + ' <nl> @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { <nl> api ' java3d : vecmath : 1 . 5 . 2 ' <nl> } <nl> <nl> + / * <nl> configurations { <nl> ecj <nl> } <nl> @ @ - 124 , 6 + 125 , 7 @ @ project ( ' : forge ' ) { <nl> dependencies { <nl> ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' <nl> } <nl> + * / <nl> <nl> / * Forge compiles , no longer need eclipse compiler <nl> compileJava { <nl> @ @ - 177 , 6 + 179 , 7 @ @ project ( ' : forge ' ) { <nl> <nl> include ' net / minecraftforge / ' <nl> exclude ' net / minecraftforge / server / terminalconsole / ' <nl> + exclude ' net / minecraftforge / api / ' / / exclude API here because it ' s validated in the SPI build <nl> exclude ' net / minecraftforge / fml / common / versioning / ComparableVersion . java ' <nl> exclude ' net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java ' <nl> exclude ' net / minecraftforge / fml / common / versioning / Restriction . java ' <nl> diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> index 0167b79 . . 458d4ab 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . client . extensions ; <nl> <nl> import javax . annotation . Nonnull ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> index 72827d3 . . b24858d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> @ @ - 23 , 10 + 23 , 15 @ @ import com . electronwill . nightconfig . core . file . FileConfig ; <nl> import net . minecraftforge . fml . language . IModInfo ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> <nl> + import java . io . IOException ; <nl> + import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> + import java . nio . file . FileSystems ; <nl> import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> + import java . util . Objects ; <nl> <nl> public class DefaultModInfos <nl> { <nl> @ @ - 35 , 12 + 40 , 17 @ @ public class DefaultModInfos <nl> FileConfig forgemod ; <nl> try <nl> { <nl> - minecraftmod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ) ) ; <nl> + final URI jarFileURI = DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ; <nl> + if ( Objects . equals ( jarFileURI . getScheme ( ) , " jar " ) ) { <nl> + / / Initialize the filesystem for the forge jar , because otherwise this barfs ? <nl> + FileSystems . newFileSystem ( jarFileURI , new HashMap < > ( ) ) ; <nl> + } <nl> + minecraftmod = FileConfig . of ( Paths . get ( jarFileURI ) ) ; <nl> forgemod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " forgemod . toml " ) . toURI ( ) ) ) ; <nl> minecraftmod . load ( ) ; <nl> forgemod . load ( ) ; <nl> } <nl> - catch ( URISyntaxException | NullPointerException e ) <nl> + catch ( IOException | URISyntaxException | NullPointerException e ) <nl> { <nl> throw new RuntimeException ( " Missing toml configs for minecraft and forge ! " , e ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index 6b029cc . . 503a0d0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 23 , 11 + 23 , 32 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> <nl> + import java . net . URISyntaxException ; <nl> import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> import java . util . concurrent . Callable ; <nl> <nl> public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> + private static final Path forgePath ; <nl> + private static final Path mcPath ; <nl> + private static final List < String > SKIPPACKAGES = Arrays . asList ( <nl> + " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , <nl> + " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , <nl> + " net . minecraftforge . eventbus . " , " it . unimi . dsi . fastutil . " , " net . minecraftforge . api . " , <nl> + " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , <nl> + " net . minecraftforge . fml . common . versioning . " <nl> + ) ; <nl> + static { <nl> + try { <nl> + forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> + mcPath = forgePath . resolveSibling ( " minecraft . jar " ) ; <nl> + } catch ( URISyntaxException e ) { <nl> + throw new RuntimeException ( " Unable to locate myself ! " ) ; <nl> + } <nl> + } <nl> @ Override <nl> public String name ( ) <nl> { <nl> @ @ - 37 , 13 + 58 , 16 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ 0 ] ; <nl> + return new Path [ ] { mcPath , forgePath } ; <nl> } <nl> <nl> @ Override <nl> public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) <nl> { <nl> return ( ) - > { <nl> + super . beforeStart ( launchClassLoader , forgePath ) ; <nl> + launchClassLoader . addTargetPackageFilter ( cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ) ; <nl> + Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> } ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> index 5ad1927 . . 2a337bc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> import java . util . Collection ; <nl> + import java . util . Collections ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 62 , 7 + 63 , 7 @ @ public class ModDiscoverer { <nl> <nl> FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; <nl> BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; <nl> - final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; <nl> + final List < ModFile > mods = modFiles . getOrDefault ( ModFile . Type . MOD , Collections . emptyList ( ) ) ; <nl> for ( Iterator < ModFile > iterator = mods . iterator ( ) ; iterator . hasNext ( ) ; ) <nl> { <nl> ModFile mod = iterator . next ( ) ;

TEST DIFF:
diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLConfig . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLConfig . java 
 index a2b4648 . . 5ec8f95 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLConfig . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / FMLConfig . java 
 @ @ - 39 , 9 + 39 , 7 @ @ public class FMLConfig 
 private static ConfigSpec configSpec = new ConfigSpec ( ) ; 
 static { 
 configSpec . define ( " splashscreen " , Boolean . TRUE ) ; 
 - configSpec . defineInList ( " side " , Dist . CLIENT . name ( ) , Arrays . stream ( Dist . values ( ) ) . map ( Enum : : name ) . collect ( Collectors . toList ( ) ) ) ; 
 - configSpec . defineInRange ( " maxframerate " , 60 , 10 , 120 ) ; 
 - configSpec . defineInRange ( " minframerate " , 60 , 10 , 120 ) ; 
 + configSpec . define ( " maxThreads " , - 1 ) ; 
 } 
 
 private CommentedFileConfig configData ; 
 @ @ - 70 , 7 + 68 , 13 @ @ public class FMLConfig 
 LOGGER . debug ( CORE , " Splash screen is { } " , INSTANCE . splashScreenEnabled ( ) ) ; 
 } 
 
 - public boolean splashScreenEnabled ( ) { 
 - return configData . < Boolean > getOptional ( " splashscreen " ) . orElse ( Boolean . FALSE ) ; 
 + public static boolean splashScreenEnabled ( ) { 
 + return INSTANCE . configData . < Boolean > getOptional ( " splashscreen " ) . orElse ( Boolean . FALSE ) ; 
 + } 
 + 
 + public static int loadingThreadCount ( ) { 
 + int val = INSTANCE . configData . get ( " maxThreads " ) ; 
 + if ( val < = 0 ) return Runtime . getRuntime ( ) . availableProcessors ( ) ; 
 + return val ; 
 } 
 } 
 diff - - git a / src / fmllauncher / resources / META - INF / defaultfmlconfig . toml b / src / fmllauncher / resources / META - INF / defaultfmlconfig . toml 
 index bddded4 . . dd5a690 100644 
 - - - a / src / fmllauncher / resources / META - INF / defaultfmlconfig . toml 
 + + + b / src / fmllauncher / resources / META - INF / defaultfmlconfig . toml 
 @ @ - 1 , 2 + 1 , 4 @ @ 
 # does the splashscreen run 
 splashscreen = true 
 + # max threads for parallel loading : - 1 uses Runtime # availableProcessors 
 + maxThreads = - 1 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java 
 index 396e441 . . 5762289 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModList . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package net . minecraftforge . fml ; 
 
 + import net . minecraftforge . fml . loading . FMLConfig ; 
 import net . minecraftforge . forgespi . language . ModFileScanData ; 
 import net . minecraftforge . fml . loading . FMLLoader ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 @ @ - 35 , 7 + 36 , 6 @ @ import java . util . Optional ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ForkJoinPool ; 
 import java . util . concurrent . ForkJoinWorkerThread ; 
 - import java . util . concurrent . FutureTask ; 
 import java . util . function . BiConsumer ; 
 import java . util . function . Consumer ; 
 import java . util . function . Function ; 
 @ @ - 56 , 14 + 56 , 7 @ @ public class ModList 
 private final Map < String , ModFileInfo > fileById ; 
 private List < ModContainer > mods ; 
 private Map < String , ModContainer > indexedMods ; 
 - private ForkJoinPool modLoadingThreadPool = new ForkJoinPool ( Runtime . getRuntime ( ) . availableProcessors ( ) , pool - > 
 - { 
 - ForkJoinWorkerThread thread = ForkJoinPool . defaultForkJoinWorkerThreadFactory . newThread ( pool ) ; 
 - thread . setName ( " modloading - worker - " + thread . getPoolIndex ( ) ) ; 
 - / / The default sets it to the SystemClassloader , so copy the current one . 
 - thread . setContextClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 - return thread ; 
 - } , null , false ) ; 
 + private ForkJoinPool modLoadingThreadPool ; 
 private List < ModFileScanData > modFileScanData ; 
 
 private ModList ( final List < ModFile > modFiles , final List < ModInfo > sortedList ) 
 @ @ - 75 , 6 + 68 , 9 @ @ public class ModList 
 this . fileById = this . modFiles . stream ( ) . map ( ModFileInfo : : getMods ) . flatMap ( Collection : : stream ) . 
 map ( ModInfo . class : : cast ) . 
 collect ( Collectors . toMap ( ModInfo : : getModId , ModInfo : : getOwningFile ) ) ; 
 + final int loadingThreadCount = FMLConfig . loadingThreadCount ( ) ; 
 + LOGGER . debug ( LOADING , " Using { } threads for parallel mod - loading " , loadingThreadCount ) ; 
 + modLoadingThreadPool = new ForkJoinPool ( loadingThreadCount , ModList : : newForkJoinWorkerThread , null , false ) ; 
 } 
 
 public static ModList of ( List < ModFile > modFiles , List < ModInfo > sortedList ) 
 @ @ - 91 , 6 + 87 , 14 @ @ public class ModList 
 return INSTANCE ; 
 } 
 
 + private static ForkJoinWorkerThread newForkJoinWorkerThread ( ForkJoinPool pool ) { 
 + ForkJoinWorkerThread thread = ForkJoinPool . defaultForkJoinWorkerThreadFactory . newThread ( pool ) ; 
 + thread . setName ( " modloading - worker - " + thread . getPoolIndex ( ) ) ; 
 + / / The default sets it to the SystemClassloader , so copy the current one . 
 + thread . setContextClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + return thread ; 
 + } 
 + 
 public List < ModFileInfo > getModFiles ( ) 
 { 
 return modFiles ;

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index e5fbd8c . . cacd8c9 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 105 , 7 + 105 , 7 @ @ project ( ' : forge ' ) { 
 } 
 dependencies { 
 api ' net . minecraft : client : 1 . 13 : extra ' 
 - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 3 ' / / Pinned until cpw fixes getCommonSupertype 
 + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype 
 api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' 
 api ' net . minecraftforge : eventbus : 0 . 1 + : service ' 
 api ' net . minecraftforge : forgespi : 0 . 1 + ' 
 @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { 
 api ' java3d : vecmath : 1 . 5 . 2 ' 
 } 
 
 + / * 
 configurations { 
 ecj 
 } 
 @ @ - 124 , 6 + 125 , 7 @ @ project ( ' : forge ' ) { 
 dependencies { 
 ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' 
 } 
 + * / 
 
 / * Forge compiles , no longer need eclipse compiler 
 compileJava { 
 @ @ - 177 , 6 + 179 , 7 @ @ project ( ' : forge ' ) { 
 
 include ' net / minecraftforge / ' 
 exclude ' net / minecraftforge / server / terminalconsole / ' 
 + exclude ' net / minecraftforge / api / ' / / exclude API here because it ' s validated in the SPI build 
 exclude ' net / minecraftforge / fml / common / versioning / ComparableVersion . java ' 
 exclude ' net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java ' 
 exclude ' net / minecraftforge / fml / common / versioning / Restriction . java ' 
 diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 index 0167b79 . . 458d4ab 100644 
 - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . client . extensions ; 
 
 import javax . annotation . Nonnull ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 index 72827d3 . . b24858d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 @ @ - 23 , 10 + 23 , 15 @ @ import com . electronwill . nightconfig . core . file . FileConfig ; 
 import net . minecraftforge . fml . language . IModInfo ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 
 + import java . io . IOException ; 
 + import java . net . URI ; 
 import java . net . URISyntaxException ; 
 + import java . nio . file . FileSystems ; 
 import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 + import java . util . Objects ; 
 
 public class DefaultModInfos 
 { 
 @ @ - 35 , 12 + 40 , 17 @ @ public class DefaultModInfos 
 FileConfig forgemod ; 
 try 
 { 
 - minecraftmod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ) ) ; 
 + final URI jarFileURI = DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ; 
 + if ( Objects . equals ( jarFileURI . getScheme ( ) , " jar " ) ) { 
 + / / Initialize the filesystem for the forge jar , because otherwise this barfs ? 
 + FileSystems . newFileSystem ( jarFileURI , new HashMap < > ( ) ) ; 
 + } 
 + minecraftmod = FileConfig . of ( Paths . get ( jarFileURI ) ) ; 
 forgemod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " forgemod . toml " ) . toURI ( ) ) ) ; 
 minecraftmod . load ( ) ; 
 forgemod . load ( ) ; 
 } 
 - catch ( URISyntaxException | NullPointerException e ) 
 + catch ( IOException | URISyntaxException | NullPointerException e ) 
 { 
 throw new RuntimeException ( " Missing toml configs for minecraft and forge ! " , e ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index 6b029cc . . 503a0d0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 23 , 11 + 23 , 32 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 
 + import java . net . URISyntaxException ; 
 import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 import java . util . concurrent . Callable ; 
 
 public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 + private static final Path forgePath ; 
 + private static final Path mcPath ; 
 + private static final List < String > SKIPPACKAGES = Arrays . asList ( 
 + " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , 
 + " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , 
 + " net . minecraftforge . eventbus . " , " it . unimi . dsi . fastutil . " , " net . minecraftforge . api . " , 
 + " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , 
 + " net . minecraftforge . fml . common . versioning . " 
 + ) ; 
 + static { 
 + try { 
 + forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 + mcPath = forgePath . resolveSibling ( " minecraft . jar " ) ; 
 + } catch ( URISyntaxException e ) { 
 + throw new RuntimeException ( " Unable to locate myself ! " ) ; 
 + } 
 + } 
 @ Override 
 public String name ( ) 
 { 
 @ @ - 37 , 13 + 58 , 16 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ 0 ] ; 
 + return new Path [ ] { mcPath , forgePath } ; 
 } 
 
 @ Override 
 public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) 
 { 
 return ( ) - > { 
 + super . beforeStart ( launchClassLoader , forgePath ) ; 
 + launchClassLoader . addTargetPackageFilter ( cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ) ; 
 + Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 } ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 index 5ad1927 . . 2a337bc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 import java . util . Collection ; 
 + import java . util . Collections ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 62 , 7 + 63 , 7 @ @ public class ModDiscoverer { 
 
 FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; 
 BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; 
 - final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; 
 + final List < ModFile > mods = modFiles . getOrDefault ( ModFile . Type . MOD , Collections . emptyList ( ) ) ; 
 for ( Iterator < ModFile > iterator = mods . iterator ( ) ; iterator . hasNext ( ) ; ) 
 { 
 ModFile mod = iterator . next ( ) ;
