BLEU SCORE: 0.03377156414337854

TEST MSG: Fix bucket replacement not loading the bucket model by itself if replacing buckets .
GENERATED MSG: Fix dependency resolution for models with custom data / textures .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index c8edb57 . . 6dec675 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 213 , 6 + 213 , 14 @ @ public class ModelLoader extends ModelBakery <nl> / / replace vanilla bucket models if desired . done afterwards for performance reasons <nl> if ( ForgeModContainer . replaceVanillaBucketModel ) <nl> { <nl> + / / ensure the bucket model is loaded <nl> + if ( ! stateModels . containsKey ( ModelDynBucket . LOCATION ) ) <nl> + { <nl> + / / load forges blockstate json for it <nl> + ModelResourceLocation memory = getInventoryVariant ( " forge : dynbucket " ) ; <nl> + registerVariant ( getModelBlockDefinition ( memory ) , memory ) ; <nl> + } <nl> + <nl> / / empty bucket <nl> for ( String s : getVariantNames ( Items . bucket ) ) <nl> { <nl> @ @ - 269 , 7 + 277 , 10 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> ModelResourceLocation memory = getInventoryVariant ( s ) ; <nl> IModel model = stateModels . get ( ModelDynBucket . LOCATION ) ; <nl> - stateModels . put ( memory , model ) ; <nl> + if ( model ! = null ) <nl> + { <nl> + stateModels . put ( memory , model ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 902 , 6 + 913 , 18 @ @ public class ModelLoader extends ModelBakery <nl> customMeshDefinitions . put ( item . delegate , meshDefinition ) ; <nl> } <nl> <nl> + public static void setBucketModelDefinition ( Item item ) { <nl> + ModelLoader . setCustomMeshDefinition ( item , new ItemMeshDefinition ( ) <nl> + { <nl> + @ Override <nl> + public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> + { <nl> + return ModelDynBucket . LOCATION ; <nl> + } <nl> + } ) ; <nl> + ModelBakery . registerItemVariants ( item , ModelDynBucket . LOCATION ) ; <nl> + } <nl> + <nl> public static void onRegisterItems ( ItemModelMesher mesher ) <nl> { <nl> for ( Map . Entry < RegistryDelegate < Item > , ItemMeshDefinition > e : customMeshDefinitions . entrySet ( ) ) <nl> diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> index 593cb79 . . 06e88db 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> @ @ - 47 , 15 + 47 , 7 @ @ public class DynBucketTest <nl> @ Override <nl> void setupModels ( ) <nl> { <nl> - ModelLoader . setCustomMeshDefinition ( dynBucket , new ItemMeshDefinition ( ) <nl> - { <nl> - @ Override <nl> - public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> - { <nl> - return ModelDynBucket . LOCATION ; <nl> - } <nl> - } ) ; <nl> - ModelBakery . registerItemVariants ( dynBucket , new ResourceLocation ( " forge " , " dynbucket " ) ) ; <nl> + ModelLoader . setBucketModelDefinition ( dynBucket ) ; <nl> <nl> final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; <nl> ModelLoader . setCustomMeshDefinition ( dynBottle , new ItemMeshDefinition ( )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index f0b4850 . . b4c8dc5 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery <nl> try <nl> { <nl> IModel model = ModelLoaderRegistry . getModel ( location ) ; <nl> - for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> - { <nl> - if ( dep instanceof ModelResourceLocation ) <nl> - { <nl> - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> - } <nl> - else <nl> - { <nl> - getModel ( dep ) ; <nl> - } <nl> - } <nl> - textures . addAll ( model . getTextures ( ) ) ; <nl> + resolveDependencies ( model ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + private void resolveDependencies ( IModel model ) throws IOException <nl> + { <nl> + for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> + { <nl> + if ( dep instanceof ModelResourceLocation ) <nl> + { <nl> + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> + } <nl> + else <nl> + { <nl> + getModel ( dep ) ; <nl> + } <nl> + } <nl> + textures . addAll ( model . getTextures ( ) ) ; <nl> + } <nl> + <nl> private class VanillaModelWrapper implements IRetexturableModel <nl> { <nl> private final ResourceLocation location ; <nl> @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery <nl> if ( v instanceof ISmartVariant ) <nl> { <nl> model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; <nl> + try <nl> + { <nl> + resolveDependencies ( model ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; <nl> + } <nl> textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index c8edb57 . . 6dec675 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 213 , 6 + 213 , 14 @ @ public class ModelLoader extends ModelBakery 
 / / replace vanilla bucket models if desired . done afterwards for performance reasons 
 if ( ForgeModContainer . replaceVanillaBucketModel ) 
 { 
 + / / ensure the bucket model is loaded 
 + if ( ! stateModels . containsKey ( ModelDynBucket . LOCATION ) ) 
 + { 
 + / / load forges blockstate json for it 
 + ModelResourceLocation memory = getInventoryVariant ( " forge : dynbucket " ) ; 
 + registerVariant ( getModelBlockDefinition ( memory ) , memory ) ; 
 + } 
 + 
 / / empty bucket 
 for ( String s : getVariantNames ( Items . bucket ) ) 
 { 
 @ @ - 269 , 7 + 277 , 10 @ @ public class ModelLoader extends ModelBakery 
 { 
 ModelResourceLocation memory = getInventoryVariant ( s ) ; 
 IModel model = stateModels . get ( ModelDynBucket . LOCATION ) ; 
 - stateModels . put ( memory , model ) ; 
 + if ( model ! = null ) 
 + { 
 + stateModels . put ( memory , model ) ; 
 + } 
 } 
 } 
 
 @ @ - 902 , 6 + 913 , 18 @ @ public class ModelLoader extends ModelBakery 
 customMeshDefinitions . put ( item . delegate , meshDefinition ) ; 
 } 
 
 + public static void setBucketModelDefinition ( Item item ) { 
 + ModelLoader . setCustomMeshDefinition ( item , new ItemMeshDefinition ( ) 
 + { 
 + @ Override 
 + public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 + { 
 + return ModelDynBucket . LOCATION ; 
 + } 
 + } ) ; 
 + ModelBakery . registerItemVariants ( item , ModelDynBucket . LOCATION ) ; 
 + } 
 + 
 public static void onRegisterItems ( ItemModelMesher mesher ) 
 { 
 for ( Map . Entry < RegistryDelegate < Item > , ItemMeshDefinition > e : customMeshDefinitions . entrySet ( ) ) 
 diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 index 593cb79 . . 06e88db 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 @ @ - 47 , 15 + 47 , 7 @ @ public class DynBucketTest 
 @ Override 
 void setupModels ( ) 
 { 
 - ModelLoader . setCustomMeshDefinition ( dynBucket , new ItemMeshDefinition ( ) 
 - { 
 - @ Override 
 - public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 - { 
 - return ModelDynBucket . LOCATION ; 
 - } 
 - } ) ; 
 - ModelBakery . registerItemVariants ( dynBucket , new ResourceLocation ( " forge " , " dynbucket " ) ) ; 
 + ModelLoader . setBucketModelDefinition ( dynBucket ) ; 
 
 final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; 
 ModelLoader . setCustomMeshDefinition ( dynBottle , new ItemMeshDefinition ( )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index f0b4850 . . b4c8dc5 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery 
 try 
 { 
 IModel model = ModelLoaderRegistry . getModel ( location ) ; 
 - for ( ResourceLocation dep : model . getDependencies ( ) ) 
 - { 
 - if ( dep instanceof ModelResourceLocation ) 
 - { 
 - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 - } 
 - else 
 - { 
 - getModel ( dep ) ; 
 - } 
 - } 
 - textures . addAll ( model . getTextures ( ) ) ; 
 + resolveDependencies ( model ) ; 
 } 
 finally 
 { 
 @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + private void resolveDependencies ( IModel model ) throws IOException 
 + { 
 + for ( ResourceLocation dep : model . getDependencies ( ) ) 
 + { 
 + if ( dep instanceof ModelResourceLocation ) 
 + { 
 + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 + } 
 + else 
 + { 
 + getModel ( dep ) ; 
 + } 
 + } 
 + textures . addAll ( model . getTextures ( ) ) ; 
 + } 
 + 
 private class VanillaModelWrapper implements IRetexturableModel 
 { 
 private final ResourceLocation location ; 
 @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery 
 if ( v instanceof ISmartVariant ) 
 { 
 model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; 
 + try 
 + { 
 + resolveDependencies ( model ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; 
 + } 
 textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . 
 } 

