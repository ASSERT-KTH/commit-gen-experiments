BLEU SCORE: 0.03283637368030199

TEST MSG: Create jenkins file for new jenkins .
GENERATED MSG: Step 3 : The Rebirth

TEST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> new file mode 100644 <nl> index 0000000 . . 992e673 <nl> - - - / dev / null <nl> + + + b / Jenkinsfile <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + @ Library ( ' forge - shared - library ' ) _ <nl> + <nl> + pipeline { <nl> + agent { <nl> + docker { <nl> + image ' gradlewrapper : latest ' <nl> + args ' - v gradlecache : / gradlecache ' <nl> + } <nl> + } <nl> + environment { <nl> + GRADLE _ ARGS = - - no - daemon ' / / No daemon for now as FG3 kinda derps . / / ' - Dorg . gradle . daemon . idletimeout = 5000 ' <nl> + } <nl> + <nl> + stages { <nl> + stage ( ' fetch ' ) { <nl> + steps { <nl> + git ( url : ' https : / / github . com / MinecraftForge / MinecraftForge . git ' , changelog : true ) <nl> + } <nl> + } <nl> + cache ( maxCacheSize : 250 / * MB * / , caches : [ <nl> + [ $ class : ' ArbitraryFileCache ' , excludes : ' log . txt ' , includes : ' * * / * ' , path : ' $ { WORKSPACE } / projects / forge / build / extractRangeMap ' ] / / Cache the rangemap to help speed up builds <nl> + ] ) { <nl> + stage ( ' buildandtest ' ) { <nl> + steps { <nl> + sh ' . / gradlew $ { GRADLE _ ARGS } - - refresh - dependencies - - continue build test ' <nl> + script { <nl> + env . MYVERSION = sh ( returnStdout : true , script : ' . / gradlew properties - q | grep " version : " | awk \ ' { print $ 2 } \ ' ' ) . trim ( ) <nl> + } <nl> + } <nl> + post { <nl> + success { <nl> + writeChangelog ( currentBuild , ' build / changelog . txt ' ) <nl> + archiveArtifacts artifacts : ' build / changelog . txt ' , fingerprint : false <nl> + } <nl> + } <nl> + } <nl> + stage ( ' publish ' ) { <nl> + when { <nl> + not { <nl> + changeRequest ( ) <nl> + } <nl> + } <nl> + environment { <nl> + FORGE _ MAVEN = credentials ( ' forge - maven - forge - user ' ) <nl> + CROWDIN = credentials ( ' forge - crowdin ' ) <nl> + KEYSTORE = credentials ( ' forge - jenkins - keystore - old ' ) <nl> + KEYSTORE _ KEYPASS = credentials ( ' forge - jenkins - keystore - old - keypass ' ) <nl> + KEYSTORE _ STOREPASS = credentials ( ' forge - jenkins - keystore - old - keypass ' ) <nl> + } <nl> + steps { <nl> + sh ' . / gradlew $ { GRADLE _ ARGS } forge : publish - PforgeMavenUser = $ { FORGE _ MAVEN _ USR } - PforgeMavenPassword = $ { FORGE _ MAVEN _ PSW } - PkeystoreKeyPass = $ { KEYSTORE _ KEYPASS } - PkeystoreStorePass = $ { KEYSTORE _ STOREPASS } - Pkeystore = $ { KEYSTORE } - PcrowdinKey = $ { CROWDIN } ' <nl> + / / We ' re testing so use the test group <nl> + sh ' curl - - user $ { FORGE _ MAVEN } http : / / files . minecraftforge . net / maven / manage / promote / latest / net . minecraftforge . test . forge / $ { MYVERSION } ' <nl> + } <nl> + } <nl> + } <nl> + } <nl> + post { <nl> + always { <nl> + archiveArtifacts artifacts : ' build / libs / * * / * . jar ' , fingerprint : true <nl> + junit ' build / test - results / * / * . xml ' <nl> + jacoco sourcePattern : ' * * / src / * / java ' <nl> + } <nl> + } <nl> + } <nl> diff - - git a / build . gradle b / build . gradle <nl> index f129677 . . 06ce7ef 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 30 , 9 + 30 , 6 @ @ plugins { <nl> } <nl> apply plugin : ' eclipse ' <nl> <nl> - group = ' net . minecraftforge ' <nl> - version = ' 1 . 0 . 0 ' <nl> - <nl> project ( ' : mcp ' ) { <nl> apply plugin : ' net . minecraftforge . gradle . forgedev . mcp ' <nl> mcp { <nl> @ @ - 92 , 9 + 89 , 20 @ @ project ( ' : forge ' ) { <nl> } <nl> ext { <nl> MC _ VERSION = ' 1 . 13 ' <nl> - SPEC _ VERSION = ' 15 . 24 . 0 ' <nl> + SPEC _ VERSION = ' 24 . 0 ' / / This is overwritten by git tag , but here so dev time doesnt explode <nl> + / / The new versioning sceme is < MCVersion > - < ForgeMC > . < RB > . < CommitsSinceRB > <nl> + / / ForgeMC is a unique identifier for every MC version we have supported . <nl> + / / Essentially , the same as the old , except dropping the first number , and the builds are no longer unique . <nl> MCP _ ARTIFACT = project ( ' : mcp ' ) . mcp . config <nl> MCP _ VERSION = project ( ' : mcp ' ) . mcp . config . version . split ( ' - ' ) [ 1 ] / / The timestamp only . <nl> + <nl> + if ( project . hasProperty ( ' keystore ' ) ) { <nl> + jarsigner = [ <nl> + storepass : project . properties . keystoreStorePass , <nl> + keypass : project . properties . keystoreKeyPass , <nl> + keystore : project . properties . keystore <nl> + ] <nl> + } <nl> } <nl> patcher { <nl> parent = project ( ' : clean ' ) <nl> @ @ - 122 , 17 + 130 , 22 @ @ project ( ' : forge ' ) { <nl> } <nl> <nl> def getVersion = { <nl> - def out = MC _ VERSION . replace ( ' - ' , ' _ ' ) + ' - ' + SPEC _ VERSION + ' . ' + ( System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 ) <nl> + / / TAG - offset - hash <nl> + def raw = grgit . describe ( longDescr : true ) <nl> + def desc = ( raw = = null ? ' 0 . 0 - 0 - unknown ' : grgit . describe ( longDescr : true ) ) . split ( ' - ' ) as List <nl> + def hash = desc . remove ( desc . size ( ) - 1 ) <nl> + def offset = desc . remove ( desc . size ( ) - 1 ) <nl> + def tag = desc . join ( ' - ' ) <nl> def branch = grgit . branch . current ( ) . name <nl> - if ( branch ! = null & & branch ! = ' master ' & & branch ! = ' HEAD ' & & branch ! = MC _ VERSION & & branch ! = MC _ VERSION + ' . 0 ' ) { <nl> - if ( ! ( branch . endsWith ( ' . x ' ) & & MC _ VERSION . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) ) <nl> - out + = " - $ { branch } " <nl> - } <nl> - println ( ' Version : ' + out ) <nl> - return out <nl> + if ( branch in [ ' master ' , ' HEAD ' , MC _ VERSION , MC _ VERSION + ' . 0 ' ] ) <nl> + branch = null <nl> + if ( branch ! = null & & branch . endsWith ( ' . x ' ) & & MC _ VERSION . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) / / 1 . 13 . x <nl> + branch = null <nl> + SPEC _ VERSION = tag <nl> + return " $ { tag } . $ { offset } $ { t - > if ( branch ! = null ) t < < ' - ' + branch } " <nl> } <nl> <nl> - group = ' net . minecraftforge ' <nl> + group = ' net . minecraftforge . test ' / / TODO : remove when we jenkins is working <nl> version = getVersion ( ) <nl> applyPatches { <nl> canonicalizeAccess true
NEAREST DIFF (one line): diff - - git a / fml / . gitattributes b / fml / . gitattributes <nl> index 809a906 . . 758843d 100644 <nl> - - - a / fml / . gitattributes <nl> + + + b / fml / . gitattributes <nl> @ @ - 1 , 9 + 1 , 13 @ @ <nl> * text eol = lf <nl> * . bat text eol = crlf <nl> * . patch text eol = lf <nl> + * . java text eol = lf <nl> + * . gradle text eol = crlf <nl> * . png binary <nl> * . exe binary <nl> * . dll binary <nl> + * . jar binary <nl> + * . lzma binary <nl> * . zip binary <nl> * . pyd binary <nl> * . cfg text eol = lf <nl> diff - - git a / fml / . gitignore b / fml / . gitignore <nl> index 27935ea . . a09824b 100644 <nl> - - - a / fml / . gitignore <nl> + + + b / fml / . gitignore <nl> @ @ - 1 , 20 + 1 , 15 @ @ <nl> + # eclipse <nl> / bin <nl> - / minecraft _ server <nl> - / mods <nl> - / fmlbuild . properties <nl> - / fmlversion . properties <nl> - / difflist . txt <nl> - / target <nl> - fmlbranding . properties <nl> - / fernflower . zip <nl> - / commands . py . bck <nl> - / mcp * . zip <nl> - / mcp <nl> + / . settings <nl> + / . classpath <nl> + <nl> + # idea <nl> + / . idea <nl> + * . iml <nl> + <nl> + # gradle <nl> + / build <nl> + / . gradle <nl> + <nl> + # occupational hazards <nl> / eclipse <nl> - / deobfuscation _ data * . zip <nl> - / binpatch <nl> - / mcp _ data / <nl> - / map _ client . txt <nl> - / * . lzma <nl> - * * / * . lzma <nl> - / installer _ base . jar <nl> diff - - git a / fml / build . gradle b / fml / build . gradle <nl> new file mode 100644 <nl> index 0000000 . . e9448bd <nl> - - - / dev / null <nl> + + + b / fml / build . gradle <nl> @ @ - 0 , 0 + 1 , 100 @ @ <nl> + buildscript { <nl> + repositories { <nl> + mavenCentral ( ) <nl> + maven { <nl> + name = " forge " <nl> + url = " http : / / files . minecraftforge . net / maven " <nl> + } <nl> + } <nl> + dependencies { <nl> + classpath ' net . minecraftforge . gradle : ForgeGradle : 1 . 0 - SNAPSHOT ' <nl> + } <nl> + } <nl> + <nl> + import static net . minecraftforge . gradle . dev . FmlDevPlugin . * <nl> + <nl> + apply plugin : ' maven ' <nl> + apply plugin : ' fmldev ' <nl> + <nl> + repositories { <nl> + flatDir { <nl> + name " fileRepo " <nl> + dirs " repo " <nl> + } <nl> + } <nl> + <nl> + minecraft { <nl> + version = ' 1 . 6 . 4 ' <nl> + fmlDir = projectDir . getAbsolutePath ( ) ; <nl> + mainClass = ' cpw . mods . fml . relauncher . ServerLaunchWrapper ' <nl> + installerVersion = " 1 . 4 " <nl> + } <nl> + <nl> + group = ' cpw . mods ' <nl> + version = getVersionFromGit ( project ) <nl> + <nl> + jenkins { <nl> + job = ' fml ' <nl> + } <nl> + <nl> + uploadArchives { <nl> + repositories { <nl> + if ( project . hasProperty ( " filesmaven " ) ) { <nl> + logger . info ( ' Publishing to files server ' ) <nl> + <nl> + mavenDeployer { <nl> + configuration = configurations . deployerJars <nl> + <nl> + repository ( url : project . filesmaven . url ) { <nl> + authentication ( userName : project . filesmaven . username , privateKey : project . filesmaven . key ) <nl> + } <nl> + <nl> + pom { <nl> + groupId = project . group <nl> + version = project . version <nl> + artifactId = project . archivesBaseName <nl> + project { <nl> + name project . archivesBaseName <nl> + packaging ' jar ' <nl> + description ' ForgeModLoader ' <nl> + url ' https : / / github . com / MinecraftForge / FML ' <nl> + <nl> + scm { <nl> + url ' https : / / github . com / MinecraftForge / FML ' <nl> + connection ' scm : git : git : / / github . com / MinecraftForge / FML . git ' <nl> + developerConnection ' scm : git : git @ github . com : MinecraftForge / FML . git ' <nl> + } <nl> + <nl> + issueManagement { <nl> + system ' github ' <nl> + url ' https : / / github . com / MinecraftForge / FML / issues ' <nl> + } <nl> + <nl> + licenses { <nl> + license { <nl> + name ' GNU Lesser Public License ( LGPL ) , Version 3 ' <nl> + url ' http : / / www . gnu . org / licenses / lgpl - 3 . 0 . txt ' <nl> + distribution ' repo ' <nl> + } <nl> + } <nl> + <nl> + developers { <nl> + developer { <nl> + id ' LexManos ' <nl> + name ' Lex Manos ' <nl> + roles { role ' developer ' } <nl> + } <nl> + } <nl> + developers { <nl> + developer { <nl> + id ' cpw ' <nl> + name ' Christian Weeks ' <nl> + roles { role ' developer ' } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / fml / eclipse - workspace - dev . zip b / fml / eclipse - workspace - dev . zip <nl> index 3443e18 . . a3dd79e 100644 <nl> Binary files a / fml / eclipse - workspace - dev . zip and b / fml / eclipse - workspace - dev . zip differ <nl> diff - - git a / fml / settings . gradle b / fml / settings . gradle <nl> new file mode 100644 <nl> index 0000000 . . bcecb1a <nl> - - - / dev / null <nl> + + + b / fml / settings . gradle <nl> @ @ - 0 , 0 + 1 @ @ <nl> + rootProject . name = ' fml ' <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 new file mode 100644 
 index 0000000 . . 992e673 
 - - - / dev / null 
 + + + b / Jenkinsfile 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + @ Library ( ' forge - shared - library ' ) _ 
 + 
 + pipeline { 
 + agent { 
 + docker { 
 + image ' gradlewrapper : latest ' 
 + args ' - v gradlecache : / gradlecache ' 
 + } 
 + } 
 + environment { 
 + GRADLE _ ARGS = - - no - daemon ' / / No daemon for now as FG3 kinda derps . / / ' - Dorg . gradle . daemon . idletimeout = 5000 ' 
 + } 
 + 
 + stages { 
 + stage ( ' fetch ' ) { 
 + steps { 
 + git ( url : ' https : / / github . com / MinecraftForge / MinecraftForge . git ' , changelog : true ) 
 + } 
 + } 
 + cache ( maxCacheSize : 250 / * MB * / , caches : [ 
 + [ $ class : ' ArbitraryFileCache ' , excludes : ' log . txt ' , includes : ' * * / * ' , path : ' $ { WORKSPACE } / projects / forge / build / extractRangeMap ' ] / / Cache the rangemap to help speed up builds 
 + ] ) { 
 + stage ( ' buildandtest ' ) { 
 + steps { 
 + sh ' . / gradlew $ { GRADLE _ ARGS } - - refresh - dependencies - - continue build test ' 
 + script { 
 + env . MYVERSION = sh ( returnStdout : true , script : ' . / gradlew properties - q | grep " version : " | awk \ ' { print $ 2 } \ ' ' ) . trim ( ) 
 + } 
 + } 
 + post { 
 + success { 
 + writeChangelog ( currentBuild , ' build / changelog . txt ' ) 
 + archiveArtifacts artifacts : ' build / changelog . txt ' , fingerprint : false 
 + } 
 + } 
 + } 
 + stage ( ' publish ' ) { 
 + when { 
 + not { 
 + changeRequest ( ) 
 + } 
 + } 
 + environment { 
 + FORGE _ MAVEN = credentials ( ' forge - maven - forge - user ' ) 
 + CROWDIN = credentials ( ' forge - crowdin ' ) 
 + KEYSTORE = credentials ( ' forge - jenkins - keystore - old ' ) 
 + KEYSTORE _ KEYPASS = credentials ( ' forge - jenkins - keystore - old - keypass ' ) 
 + KEYSTORE _ STOREPASS = credentials ( ' forge - jenkins - keystore - old - keypass ' ) 
 + } 
 + steps { 
 + sh ' . / gradlew $ { GRADLE _ ARGS } forge : publish - PforgeMavenUser = $ { FORGE _ MAVEN _ USR } - PforgeMavenPassword = $ { FORGE _ MAVEN _ PSW } - PkeystoreKeyPass = $ { KEYSTORE _ KEYPASS } - PkeystoreStorePass = $ { KEYSTORE _ STOREPASS } - Pkeystore = $ { KEYSTORE } - PcrowdinKey = $ { CROWDIN } ' 
 + / / We ' re testing so use the test group 
 + sh ' curl - - user $ { FORGE _ MAVEN } http : / / files . minecraftforge . net / maven / manage / promote / latest / net . minecraftforge . test . forge / $ { MYVERSION } ' 
 + } 
 + } 
 + } 
 + } 
 + post { 
 + always { 
 + archiveArtifacts artifacts : ' build / libs / * * / * . jar ' , fingerprint : true 
 + junit ' build / test - results / * / * . xml ' 
 + jacoco sourcePattern : ' * * / src / * / java ' 
 + } 
 + } 
 + } 
 diff - - git a / build . gradle b / build . gradle 
 index f129677 . . 06ce7ef 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 30 , 9 + 30 , 6 @ @ plugins { 
 } 
 apply plugin : ' eclipse ' 
 
 - group = ' net . minecraftforge ' 
 - version = ' 1 . 0 . 0 ' 
 - 
 project ( ' : mcp ' ) { 
 apply plugin : ' net . minecraftforge . gradle . forgedev . mcp ' 
 mcp { 
 @ @ - 92 , 9 + 89 , 20 @ @ project ( ' : forge ' ) { 
 } 
 ext { 
 MC _ VERSION = ' 1 . 13 ' 
 - SPEC _ VERSION = ' 15 . 24 . 0 ' 
 + SPEC _ VERSION = ' 24 . 0 ' / / This is overwritten by git tag , but here so dev time doesnt explode 
 + / / The new versioning sceme is < MCVersion > - < ForgeMC > . < RB > . < CommitsSinceRB > 
 + / / ForgeMC is a unique identifier for every MC version we have supported . 
 + / / Essentially , the same as the old , except dropping the first number , and the builds are no longer unique . 
 MCP _ ARTIFACT = project ( ' : mcp ' ) . mcp . config 
 MCP _ VERSION = project ( ' : mcp ' ) . mcp . config . version . split ( ' - ' ) [ 1 ] / / The timestamp only . 
 + 
 + if ( project . hasProperty ( ' keystore ' ) ) { 
 + jarsigner = [ 
 + storepass : project . properties . keystoreStorePass , 
 + keypass : project . properties . keystoreKeyPass , 
 + keystore : project . properties . keystore 
 + ] 
 + } 
 } 
 patcher { 
 parent = project ( ' : clean ' ) 
 @ @ - 122 , 17 + 130 , 22 @ @ project ( ' : forge ' ) { 
 } 
 
 def getVersion = { 
 - def out = MC _ VERSION . replace ( ' - ' , ' _ ' ) + ' - ' + SPEC _ VERSION + ' . ' + ( System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 ) 
 + / / TAG - offset - hash 
 + def raw = grgit . describe ( longDescr : true ) 
 + def desc = ( raw = = null ? ' 0 . 0 - 0 - unknown ' : grgit . describe ( longDescr : true ) ) . split ( ' - ' ) as List 
 + def hash = desc . remove ( desc . size ( ) - 1 ) 
 + def offset = desc . remove ( desc . size ( ) - 1 ) 
 + def tag = desc . join ( ' - ' ) 
 def branch = grgit . branch . current ( ) . name 
 - if ( branch ! = null & & branch ! = ' master ' & & branch ! = ' HEAD ' & & branch ! = MC _ VERSION & & branch ! = MC _ VERSION + ' . 0 ' ) { 
 - if ( ! ( branch . endsWith ( ' . x ' ) & & MC _ VERSION . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) ) 
 - out + = " - $ { branch } " 
 - } 
 - println ( ' Version : ' + out ) 
 - return out 
 + if ( branch in [ ' master ' , ' HEAD ' , MC _ VERSION , MC _ VERSION + ' . 0 ' ] ) 
 + branch = null 
 + if ( branch ! = null & & branch . endsWith ( ' . x ' ) & & MC _ VERSION . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) / / 1 . 13 . x 
 + branch = null 
 + SPEC _ VERSION = tag 
 + return " $ { tag } . $ { offset } $ { t - > if ( branch ! = null ) t < < ' - ' + branch } " 
 } 
 
 - group = ' net . minecraftforge ' 
 + group = ' net . minecraftforge . test ' / / TODO : remove when we jenkins is working 
 version = getVersion ( ) 
 applyPatches { 
 canonicalizeAccess true

NEAREST DIFF:
diff - - git a / fml / . gitattributes b / fml / . gitattributes 
 index 809a906 . . 758843d 100644 
 - - - a / fml / . gitattributes 
 + + + b / fml / . gitattributes 
 @ @ - 1 , 9 + 1 , 13 @ @ 
 * text eol = lf 
 * . bat text eol = crlf 
 * . patch text eol = lf 
 + * . java text eol = lf 
 + * . gradle text eol = crlf 
 * . png binary 
 * . exe binary 
 * . dll binary 
 + * . jar binary 
 + * . lzma binary 
 * . zip binary 
 * . pyd binary 
 * . cfg text eol = lf 
 diff - - git a / fml / . gitignore b / fml / . gitignore 
 index 27935ea . . a09824b 100644 
 - - - a / fml / . gitignore 
 + + + b / fml / . gitignore 
 @ @ - 1 , 20 + 1 , 15 @ @ 
 + # eclipse 
 / bin 
 - / minecraft _ server 
 - / mods 
 - / fmlbuild . properties 
 - / fmlversion . properties 
 - / difflist . txt 
 - / target 
 - fmlbranding . properties 
 - / fernflower . zip 
 - / commands . py . bck 
 - / mcp * . zip 
 - / mcp 
 + / . settings 
 + / . classpath 
 + 
 + # idea 
 + / . idea 
 + * . iml 
 + 
 + # gradle 
 + / build 
 + / . gradle 
 + 
 + # occupational hazards 
 / eclipse 
 - / deobfuscation _ data * . zip 
 - / binpatch 
 - / mcp _ data / 
 - / map _ client . txt 
 - / * . lzma 
 - * * / * . lzma 
 - / installer _ base . jar 
 diff - - git a / fml / build . gradle b / fml / build . gradle 
 new file mode 100644 
 index 0000000 . . e9448bd 
 - - - / dev / null 
 + + + b / fml / build . gradle 
 @ @ - 0 , 0 + 1 , 100 @ @ 
 + buildscript { 
 + repositories { 
 + mavenCentral ( ) 
 + maven { 
 + name = " forge " 
 + url = " http : / / files . minecraftforge . net / maven " 
 + } 
 + } 
 + dependencies { 
 + classpath ' net . minecraftforge . gradle : ForgeGradle : 1 . 0 - SNAPSHOT ' 
 + } 
 + } 
 + 
 + import static net . minecraftforge . gradle . dev . FmlDevPlugin . * 
 + 
 + apply plugin : ' maven ' 
 + apply plugin : ' fmldev ' 
 + 
 + repositories { 
 + flatDir { 
 + name " fileRepo " 
 + dirs " repo " 
 + } 
 + } 
 + 
 + minecraft { 
 + version = ' 1 . 6 . 4 ' 
 + fmlDir = projectDir . getAbsolutePath ( ) ; 
 + mainClass = ' cpw . mods . fml . relauncher . ServerLaunchWrapper ' 
 + installerVersion = " 1 . 4 " 
 + } 
 + 
 + group = ' cpw . mods ' 
 + version = getVersionFromGit ( project ) 
 + 
 + jenkins { 
 + job = ' fml ' 
 + } 
 + 
 + uploadArchives { 
 + repositories { 
 + if ( project . hasProperty ( " filesmaven " ) ) { 
 + logger . info ( ' Publishing to files server ' ) 
 + 
 + mavenDeployer { 
 + configuration = configurations . deployerJars 
 + 
 + repository ( url : project . filesmaven . url ) { 
 + authentication ( userName : project . filesmaven . username , privateKey : project . filesmaven . key ) 
 + } 
 + 
 + pom { 
 + groupId = project . group 
 + version = project . version 
 + artifactId = project . archivesBaseName 
 + project { 
 + name project . archivesBaseName 
 + packaging ' jar ' 
 + description ' ForgeModLoader ' 
 + url ' https : / / github . com / MinecraftForge / FML ' 
 + 
 + scm { 
 + url ' https : / / github . com / MinecraftForge / FML ' 
 + connection ' scm : git : git : / / github . com / MinecraftForge / FML . git ' 
 + developerConnection ' scm : git : git @ github . com : MinecraftForge / FML . git ' 
 + } 
 + 
 + issueManagement { 
 + system ' github ' 
 + url ' https : / / github . com / MinecraftForge / FML / issues ' 
 + } 
 + 
 + licenses { 
 + license { 
 + name ' GNU Lesser Public License ( LGPL ) , Version 3 ' 
 + url ' http : / / www . gnu . org / licenses / lgpl - 3 . 0 . txt ' 
 + distribution ' repo ' 
 + } 
 + } 
 + 
 + developers { 
 + developer { 
 + id ' LexManos ' 
 + name ' Lex Manos ' 
 + roles { role ' developer ' } 
 + } 
 + } 
 + developers { 
 + developer { 
 + id ' cpw ' 
 + name ' Christian Weeks ' 
 + roles { role ' developer ' } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / fml / eclipse - workspace - dev . zip b / fml / eclipse - workspace - dev . zip 
 index 3443e18 . . a3dd79e 100644 
 Binary files a / fml / eclipse - workspace - dev . zip and b / fml / eclipse - workspace - dev . zip differ 
 diff - - git a / fml / settings . gradle b / fml / settings . gradle 
 new file mode 100644 
 index 0000000 . . bcecb1a 
 - - - / dev / null 
 + + + b / fml / settings . gradle 
 @ @ - 0 , 0 + 1 @ @ 
 + rootProject . name = ' fml ' 
 \ No newline at end of file
