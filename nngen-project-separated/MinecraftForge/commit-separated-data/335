BLEU SCORE: 0.040583489434387374

TEST MSG: Improve performance of World . collidesWithAnyBlock
GENERATED MSG: Add DifficultyChangeEvent

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / World . java . patch b / patches / minecraft / net / minecraft / world / World . java . patch <nl> index 550a943 . . 0afb51c 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / World . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / World . java . patch <nl> @ @ - 219 , 14 + 219 , 23 @ @ <nl> this . func _ 72964 _ e ( i , j ) . func _ 76612 _ a ( p _ 72838 _ 1 _ ) ; <nl> this . field _ 72996 _ f . add ( p _ 72838 _ 1 _ ) ; <nl> this . func _ 72923 _ a ( p _ 72838 _ 1 _ ) ; <nl> - @ @ - 1268 , 6 + 1332 , 7 @ @ <nl> - } <nl> + @ @ - 1227 , 6 + 1291 , 7 @ @ <nl> + IBlockState iblockstate = Blocks . field _ 150348 _ b . func _ 176223 _ P ( ) ; <nl> + BlockPos . PooledMutableBlockPos blockpos $ pooledmutableblockpos = BlockPos . PooledMutableBlockPos . func _ 185346 _ s ( ) ; <nl> + <nl> + + if ( p _ 191504 _ 3 _ & & ! net . minecraftforge . event . ForgeEventFactory . gatherCollisionBoxes ( this , p _ 191504 _ 1 _ , p _ 191504 _ 2 _ , p _ 191504 _ 4 _ ) ) return true ; <nl> + try <nl> + { <nl> + for ( int k1 = i ; k1 < j ; + + k1 ) <nl> + @ @ - 1269 , 7 + 1334 , 7 @ @ <nl> <nl> iblockstate1 . func _ 185908 _ a ( this , blockpos $ pooledmutableblockpos , p _ 191504 _ 2 _ , p _ 191504 _ 4 _ , p _ 191504 _ 1 _ , false ) ; <nl> - + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . event . world . GetCollisionBoxesEvent ( this , null , p _ 191504 _ 2 _ , p _ 191504 _ 4 _ ) ) ; <nl> <nl> - if ( p _ 191504 _ 3 _ & & ! p _ 191504 _ 4 _ . isEmpty ( ) ) <nl> + - if ( p _ 191504 _ 3 _ & & ! p _ 191504 _ 4 _ . isEmpty ( ) ) <nl> + + if ( p _ 191504 _ 3 _ & & ! net . minecraftforge . event . ForgeEventFactory . gatherCollisionBoxes ( this , p _ 191504 _ 1 _ , p _ 191504 _ 2 _ , p _ 191504 _ 4 _ ) ) <nl> { <nl> + boolean flag5 = true ; <nl> + return flag5 ; <nl> @ @ - 1319 , 11 + 1384 , 10 @ @ <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> index 89da108 . . ab8dfa6 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> @ @ - 49 , 6 + 49 , 7 @ @ import net . minecraft . util . NonNullList ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . SoundCategory ; <nl> import net . minecraft . util . SoundEvent ; <nl> + import net . minecraft . util . math . AxisAlignedBB ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . util . math . RayTraceResult ; <nl> import net . minecraft . util . text . ChatType ; <nl> @ @ - 114 , 6 + 115 , 7 @ @ import net . minecraftforge . event . world . BlockEvent . MultiPlaceEvent ; <nl> import net . minecraftforge . event . world . BlockEvent . NeighborNotifyEvent ; <nl> import net . minecraftforge . event . world . BlockEvent . PlaceEvent ; <nl> import net . minecraftforge . event . world . ExplosionEvent ; <nl> + import net . minecraftforge . event . world . GetCollisionBoxesEvent ; <nl> import net . minecraftforge . event . world . WorldEvent ; <nl> import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; <nl> import net . minecraftforge . fml . common . eventhandler . Event ; <nl> @ @ - 682 , 4 + 684 , 10 @ @ public class ForgeEventFactory <nl> { <nl> return ! MinecraftForge . EVENT _ BUS . post ( new LivingDestroyBlockEvent ( entity , pos , state ) ) ; <nl> } <nl> + <nl> + public static boolean gatherCollisionBoxes ( World world , Entity entity , AxisAlignedBB aabb , List < AxisAlignedBB > outList ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new GetCollisionBoxesEvent ( world , entity , aabb , outList ) ) ; <nl> + return outList . isEmpty ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / CollisionBoxesEventTest . java b / src / test / java / net / minecraftforge / debug / CollisionBoxesEventTest . java <nl> new file mode 100644 <nl> index 0000000 . . dce610f <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / CollisionBoxesEventTest . java <nl> @ @ - 0 , 0 + 1 , 101 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . ArrayList ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . EntityLivingBase ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemBlock ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . math . AxisAlignedBB ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . util . math . Vec3d ; <nl> + import net . minecraft . world . World ; <nl> + <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> + import net . minecraftforge . event . world . GetCollisionBoxesEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + @ Mod ( modid = CollisionBoxesEventTest . MODID , name = " CollisionBoxesEventTest " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + @ Mod . EventBusSubscriber <nl> + public class CollisionBoxesEventTest <nl> + { <nl> + public static final String MODID = " collisionboxexeventtest " ; <nl> + <nl> + public static final boolean ENABLED = true ; <nl> + @ GameRegistry . ObjectHolder ( " box _ block " ) <nl> + private static final Block BOX _ BLOCK = null ; <nl> + private static final ArrayList < BlockPos > locations = new ArrayList < > ( ) ; <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerBlock ( RegistryEvent . Register < Block > event ) <nl> + { <nl> + if ( ENABLED ) <nl> + { <nl> + event . getRegistry ( ) . register ( new BoxBlock ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerItem ( RegistryEvent . Register < Item > event ) <nl> + { <nl> + if ( ENABLED ) <nl> + { <nl> + event . getRegistry ( ) . register ( new ItemBlock ( BOX _ BLOCK ) . setRegistryName ( new ResourceLocation ( MODID , " box _ block " ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + @ SubscribeEvent <nl> + public static void getBoxes ( GetCollisionBoxesEvent event ) <nl> + { <nl> + AxisAlignedBB box = event . getAabb ( ) ; <nl> + <nl> + for ( BlockPos pos : locations ) <nl> + { <nl> + for ( EnumFacing facing : EnumFacing . HORIZONTALS ) <nl> + { <nl> + AxisAlignedBB temp = new AxisAlignedBB ( pos ) . offset ( new Vec3d ( facing . getDirectionVec ( ) ) ) ; <nl> + if ( box . intersects ( temp ) ) <nl> + event . getCollisionBoxesList ( ) . add ( temp ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static class BoxBlock extends Block <nl> + { <nl> + <nl> + public BoxBlock ( ) <nl> + { <nl> + super ( Material . ROCK ) ; <nl> + setRegistryName ( new ResourceLocation ( MODID , " box _ block " ) ) ; <nl> + setCreativeTab ( CreativeTabs . MISC ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void breakBlock ( World worldIn , BlockPos pos , IBlockState state ) <nl> + { <nl> + locations . remove ( pos ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onBlockPlacedBy ( World worldIn , BlockPos pos , IBlockState state , EntityLivingBase placer , ItemStack stack ) <nl> + { <nl> + locations . add ( pos ) ; <nl> + } <nl> + <nl> + <nl> + @ Override <nl> + public String getUnlocalizedName ( ) { <nl> + return " CollisionBoxes event test block " ; <nl> + } <nl> + <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / assets / collisionboxexeventtest / blockstates / box _ block . json b / src / test / resources / assets / collisionboxexeventtest / blockstates / box _ block . json <nl> new file mode 100644 <nl> index 0000000 . . 0ca7c1a <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / collisionboxexeventtest / blockstates / box _ block . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + { <nl> + 	 " forge _ marker " : 1 , <nl> + 	 " defaults " : { <nl> + 	 " model " : " minecraft : bedrock " <nl> + 	 } , <nl> + " variants " : { <nl> + " normal " : [ { } ] , <nl> + 	 	 " inventory " : [ { } ] <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch <nl> index 0bb3fe9 . . 1a15939 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch <nl> @ @ - 16 , 7 + 16 , 15 @ @ <nl> p _ 76064 _ 1 _ . func _ 74772 _ a ( " RandomSeed " , this . field _ 76100 _ a ) ; <nl> p _ 76064 _ 1 _ . func _ 74778 _ a ( " generatorName " , this . field _ 76098 _ b . func _ 77127 _ a ( ) ) ; <nl> p _ 76064 _ 1 _ . func _ 74768 _ a ( " generatorVersion " , this . field _ 76098 _ b . func _ 77131 _ c ( ) ) ; <nl> - @ @ - 807 , 6 + 809 , 26 @ @ <nl> + @ @ - 709 , 6 + 711 , 7 @ @ <nl> + <nl> + public void func _ 176144 _ a ( EnumDifficulty p _ 176144 _ 1 _ ) <nl> + { <nl> + + net . minecraftforge . common . ForgeHooks . onDifficultyChange ( p _ 176144 _ 1 _ , this . field _ 176158 _ z ) ; <nl> + this . field _ 176158 _ z = p _ 176144 _ 1 _ ; <nl> + } <nl> + <nl> + @ @ - 807 , 6 + 810 , 26 @ @ <nl> } ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 92c2ee9 . . 4fa6049 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 89 , 12 + 89 , 14 @ @ import net . minecraft . util . text . TextFormatting ; <nl> import net . minecraft . util . text . event . ClickEvent ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> + import net . minecraft . world . EnumDifficulty ; <nl> import net . minecraft . world . GameType ; <nl> import net . minecraft . world . storage . loot . LootEntry ; <nl> import net . minecraft . world . storage . loot . LootTable ; <nl> import net . minecraft . world . storage . loot . conditions . LootCondition ; <nl> import net . minecraftforge . common . util . BlockSnapshot ; <nl> import net . minecraftforge . event . AnvilUpdateEvent ; <nl> + import net . minecraftforge . event . DifficultyChangeEvent ; <nl> import net . minecraftforge . event . ForgeEventFactory ; <nl> import net . minecraftforge . event . ServerChatEvent ; <nl> import net . minecraftforge . event . entity . EntityTravelToDimensionEvent ; <nl> @ @ - 510 , 6 + 512 , 11 @ @ public class ForgeHooks <nl> } <nl> return false ; <nl> } <nl> + <nl> + public static void onDifficultyChange ( EnumDifficulty difficulty , EnumDifficulty oldDifficulty ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new DifficultyChangeEvent ( difficulty , oldDifficulty ) ) ; <nl> + } <nl> <nl> / / Optifine Helper Functions u . u , these are here specifically for Optifine <nl> / / Note : When using Optifine , these methods are invoked using reflection , which <nl> diff - - git a / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java b / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 45e36cf <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java <nl> @ @ - 0 , 0 + 1 , 62 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . event ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + <nl> + import net . minecraft . world . EnumDifficulty ; <nl> + import net . minecraftforge . common . ForgeHooks ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event . HasResult ; <nl> + <nl> + / * * <nl> + * DifficultyChangeEvent is fired when difficulty is changing . < br > <nl> + * < br > <nl> + * This event is fired via the { @ link ForgeHooks # onDifficultyChange ( EnumDifficulty , EnumDifficulty ) } . < br > <nl> + * < br > <nl> + * This event is not { @ link Cancelable } . < br > <nl> + * < br > <nl> + * This event does not have a result . { @ link HasResult } < br > <nl> + * < br > <nl> + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . <nl> + * * / <nl> + public class DifficultyChangeEvent extends Event <nl> + { <nl> + private final EnumDifficulty difficulty ; <nl> + private final EnumDifficulty oldDifficulty ; <nl> + <nl> + public DifficultyChangeEvent ( EnumDifficulty difficulty , EnumDifficulty oldDifficulty ) <nl> + { <nl> + this . difficulty = difficulty ; <nl> + this . oldDifficulty = oldDifficulty ; <nl> + } <nl> + <nl> + public EnumDifficulty getDifficulty ( ) <nl> + { <nl> + return difficulty ; <nl> + } <nl> + <nl> + public EnumDifficulty getOldDifficulty ( ) <nl> + { <nl> + return oldDifficulty ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java b / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java <nl> new file mode 100644 <nl> index 0000000 . . a19430d <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java <nl> @ @ - 0 , 0 + 1 , 28 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import net . minecraft . world . EnumDifficulty ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . DifficultyChangeEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event . Result ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + @ Mod ( modid = " difficultychangeeventtest " , name = " DifficultyChangeEventTest " , version = " 0 . 0 . 0 " ) <nl> + public class DifficultyChangeEventTest <nl> + { <nl> + private static final boolean ENABLE = false ; <nl> + <nl> + @ EventHandler <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + if ( ENABLE ) MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void onDifficultyChange ( DifficultyChangeEvent event ) <nl> + { <nl> + System . out . println ( " Difficulty changed from " + event . getOldDifficulty ( ) + " to " + event . getDifficulty ( ) ) ; <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / World . java . patch b / patches / minecraft / net / minecraft / world / World . java . patch 
 index 550a943 . . 0afb51c 100644 
 - - - a / patches / minecraft / net / minecraft / world / World . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / World . java . patch 
 @ @ - 219 , 14 + 219 , 23 @ @ 
 this . func _ 72964 _ e ( i , j ) . func _ 76612 _ a ( p _ 72838 _ 1 _ ) ; 
 this . field _ 72996 _ f . add ( p _ 72838 _ 1 _ ) ; 
 this . func _ 72923 _ a ( p _ 72838 _ 1 _ ) ; 
 - @ @ - 1268 , 6 + 1332 , 7 @ @ 
 - } 
 + @ @ - 1227 , 6 + 1291 , 7 @ @ 
 + IBlockState iblockstate = Blocks . field _ 150348 _ b . func _ 176223 _ P ( ) ; 
 + BlockPos . PooledMutableBlockPos blockpos $ pooledmutableblockpos = BlockPos . PooledMutableBlockPos . func _ 185346 _ s ( ) ; 
 + 
 + + if ( p _ 191504 _ 3 _ & & ! net . minecraftforge . event . ForgeEventFactory . gatherCollisionBoxes ( this , p _ 191504 _ 1 _ , p _ 191504 _ 2 _ , p _ 191504 _ 4 _ ) ) return true ; 
 + try 
 + { 
 + for ( int k1 = i ; k1 < j ; + + k1 ) 
 + @ @ - 1269 , 7 + 1334 , 7 @ @ 
 
 iblockstate1 . func _ 185908 _ a ( this , blockpos $ pooledmutableblockpos , p _ 191504 _ 2 _ , p _ 191504 _ 4 _ , p _ 191504 _ 1 _ , false ) ; 
 - + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . event . world . GetCollisionBoxesEvent ( this , null , p _ 191504 _ 2 _ , p _ 191504 _ 4 _ ) ) ; 
 
 - if ( p _ 191504 _ 3 _ & & ! p _ 191504 _ 4 _ . isEmpty ( ) ) 
 + - if ( p _ 191504 _ 3 _ & & ! p _ 191504 _ 4 _ . isEmpty ( ) ) 
 + + if ( p _ 191504 _ 3 _ & & ! net . minecraftforge . event . ForgeEventFactory . gatherCollisionBoxes ( this , p _ 191504 _ 1 _ , p _ 191504 _ 2 _ , p _ 191504 _ 4 _ ) ) 
 { 
 + boolean flag5 = true ; 
 + return flag5 ; 
 @ @ - 1319 , 11 + 1384 , 10 @ @ 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 index 89da108 . . ab8dfa6 100644 
 - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 @ @ - 49 , 6 + 49 , 7 @ @ import net . minecraft . util . NonNullList ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . SoundCategory ; 
 import net . minecraft . util . SoundEvent ; 
 + import net . minecraft . util . math . AxisAlignedBB ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . util . math . RayTraceResult ; 
 import net . minecraft . util . text . ChatType ; 
 @ @ - 114 , 6 + 115 , 7 @ @ import net . minecraftforge . event . world . BlockEvent . MultiPlaceEvent ; 
 import net . minecraftforge . event . world . BlockEvent . NeighborNotifyEvent ; 
 import net . minecraftforge . event . world . BlockEvent . PlaceEvent ; 
 import net . minecraftforge . event . world . ExplosionEvent ; 
 + import net . minecraftforge . event . world . GetCollisionBoxesEvent ; 
 import net . minecraftforge . event . world . WorldEvent ; 
 import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; 
 import net . minecraftforge . fml . common . eventhandler . Event ; 
 @ @ - 682 , 4 + 684 , 10 @ @ public class ForgeEventFactory 
 { 
 return ! MinecraftForge . EVENT _ BUS . post ( new LivingDestroyBlockEvent ( entity , pos , state ) ) ; 
 } 
 + 
 + public static boolean gatherCollisionBoxes ( World world , Entity entity , AxisAlignedBB aabb , List < AxisAlignedBB > outList ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new GetCollisionBoxesEvent ( world , entity , aabb , outList ) ) ; 
 + return outList . isEmpty ( ) ; 
 + } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / CollisionBoxesEventTest . java b / src / test / java / net / minecraftforge / debug / CollisionBoxesEventTest . java 
 new file mode 100644 
 index 0000000 . . dce610f 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / CollisionBoxesEventTest . java 
 @ @ - 0 , 0 + 1 , 101 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . ArrayList ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . EntityLivingBase ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemBlock ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . math . AxisAlignedBB ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . util . math . Vec3d ; 
 + import net . minecraft . world . World ; 
 + 
 + import net . minecraftforge . event . RegistryEvent ; 
 + import net . minecraftforge . event . world . GetCollisionBoxesEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + @ Mod ( modid = CollisionBoxesEventTest . MODID , name = " CollisionBoxesEventTest " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + @ Mod . EventBusSubscriber 
 + public class CollisionBoxesEventTest 
 + { 
 + public static final String MODID = " collisionboxexeventtest " ; 
 + 
 + public static final boolean ENABLED = true ; 
 + @ GameRegistry . ObjectHolder ( " box _ block " ) 
 + private static final Block BOX _ BLOCK = null ; 
 + private static final ArrayList < BlockPos > locations = new ArrayList < > ( ) ; 
 + 
 + @ SubscribeEvent 
 + public static void registerBlock ( RegistryEvent . Register < Block > event ) 
 + { 
 + if ( ENABLED ) 
 + { 
 + event . getRegistry ( ) . register ( new BoxBlock ( ) ) ; 
 + } 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerItem ( RegistryEvent . Register < Item > event ) 
 + { 
 + if ( ENABLED ) 
 + { 
 + event . getRegistry ( ) . register ( new ItemBlock ( BOX _ BLOCK ) . setRegistryName ( new ResourceLocation ( MODID , " box _ block " ) ) ) ; 
 + } 
 + } 
 + 
 + 
 + @ SubscribeEvent 
 + public static void getBoxes ( GetCollisionBoxesEvent event ) 
 + { 
 + AxisAlignedBB box = event . getAabb ( ) ; 
 + 
 + for ( BlockPos pos : locations ) 
 + { 
 + for ( EnumFacing facing : EnumFacing . HORIZONTALS ) 
 + { 
 + AxisAlignedBB temp = new AxisAlignedBB ( pos ) . offset ( new Vec3d ( facing . getDirectionVec ( ) ) ) ; 
 + if ( box . intersects ( temp ) ) 
 + event . getCollisionBoxesList ( ) . add ( temp ) ; 
 + } 
 + } 
 + } 
 + 
 + private static class BoxBlock extends Block 
 + { 
 + 
 + public BoxBlock ( ) 
 + { 
 + super ( Material . ROCK ) ; 
 + setRegistryName ( new ResourceLocation ( MODID , " box _ block " ) ) ; 
 + setCreativeTab ( CreativeTabs . MISC ) ; 
 + } 
 + 
 + @ Override 
 + public void breakBlock ( World worldIn , BlockPos pos , IBlockState state ) 
 + { 
 + locations . remove ( pos ) ; 
 + } 
 + 
 + @ Override 
 + public void onBlockPlacedBy ( World worldIn , BlockPos pos , IBlockState state , EntityLivingBase placer , ItemStack stack ) 
 + { 
 + locations . add ( pos ) ; 
 + } 
 + 
 + 
 + @ Override 
 + public String getUnlocalizedName ( ) { 
 + return " CollisionBoxes event test block " ; 
 + } 
 + 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / assets / collisionboxexeventtest / blockstates / box _ block . json b / src / test / resources / assets / collisionboxexeventtest / blockstates / box _ block . json 
 new file mode 100644 
 index 0000000 . . 0ca7c1a 
 - - - / dev / null 
 + + + b / src / test / resources / assets / collisionboxexeventtest / blockstates / box _ block . json 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + { 
 + 	 " forge _ marker " : 1 , 
 + 	 " defaults " : { 
 + 	 " model " : " minecraft : bedrock " 
 + 	 } , 
 + " variants " : { 
 + " normal " : [ { } ] , 
 + 	 	 " inventory " : [ { } ] 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch 
 index 0bb3fe9 . . 1a15939 100644 
 - - - a / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / storage / WorldInfo . java . patch 
 @ @ - 16 , 7 + 16 , 15 @ @ 
 p _ 76064 _ 1 _ . func _ 74772 _ a ( " RandomSeed " , this . field _ 76100 _ a ) ; 
 p _ 76064 _ 1 _ . func _ 74778 _ a ( " generatorName " , this . field _ 76098 _ b . func _ 77127 _ a ( ) ) ; 
 p _ 76064 _ 1 _ . func _ 74768 _ a ( " generatorVersion " , this . field _ 76098 _ b . func _ 77131 _ c ( ) ) ; 
 - @ @ - 807 , 6 + 809 , 26 @ @ 
 + @ @ - 709 , 6 + 711 , 7 @ @ 
 + 
 + public void func _ 176144 _ a ( EnumDifficulty p _ 176144 _ 1 _ ) 
 + { 
 + + net . minecraftforge . common . ForgeHooks . onDifficultyChange ( p _ 176144 _ 1 _ , this . field _ 176158 _ z ) ; 
 + this . field _ 176158 _ z = p _ 176144 _ 1 _ ; 
 + } 
 + 
 + @ @ - 807 , 6 + 810 , 26 @ @ 
 } ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 92c2ee9 . . 4fa6049 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 89 , 12 + 89 , 14 @ @ import net . minecraft . util . text . TextFormatting ; 
 import net . minecraft . util . text . event . ClickEvent ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 + import net . minecraft . world . EnumDifficulty ; 
 import net . minecraft . world . GameType ; 
 import net . minecraft . world . storage . loot . LootEntry ; 
 import net . minecraft . world . storage . loot . LootTable ; 
 import net . minecraft . world . storage . loot . conditions . LootCondition ; 
 import net . minecraftforge . common . util . BlockSnapshot ; 
 import net . minecraftforge . event . AnvilUpdateEvent ; 
 + import net . minecraftforge . event . DifficultyChangeEvent ; 
 import net . minecraftforge . event . ForgeEventFactory ; 
 import net . minecraftforge . event . ServerChatEvent ; 
 import net . minecraftforge . event . entity . EntityTravelToDimensionEvent ; 
 @ @ - 510 , 6 + 512 , 11 @ @ public class ForgeHooks 
 } 
 return false ; 
 } 
 + 
 + public static void onDifficultyChange ( EnumDifficulty difficulty , EnumDifficulty oldDifficulty ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new DifficultyChangeEvent ( difficulty , oldDifficulty ) ) ; 
 + } 
 
 / / Optifine Helper Functions u . u , these are here specifically for Optifine 
 / / Note : When using Optifine , these methods are invoked using reflection , which 
 diff - - git a / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java b / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java 
 new file mode 100644 
 index 0000000 . . 45e36cf 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / DifficultyChangeEvent . java 
 @ @ - 0 , 0 + 1 , 62 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . event ; 
 + 
 + import javax . annotation . Nonnull ; 
 + 
 + import net . minecraft . world . EnumDifficulty ; 
 + import net . minecraftforge . common . ForgeHooks ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + import net . minecraftforge . fml . common . eventhandler . Event . HasResult ; 
 + 
 + / * * 
 + * DifficultyChangeEvent is fired when difficulty is changing . < br > 
 + * < br > 
 + * This event is fired via the { @ link ForgeHooks # onDifficultyChange ( EnumDifficulty , EnumDifficulty ) } . < br > 
 + * < br > 
 + * This event is not { @ link Cancelable } . < br > 
 + * < br > 
 + * This event does not have a result . { @ link HasResult } < br > 
 + * < br > 
 + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . 
 + * * / 
 + public class DifficultyChangeEvent extends Event 
 + { 
 + private final EnumDifficulty difficulty ; 
 + private final EnumDifficulty oldDifficulty ; 
 + 
 + public DifficultyChangeEvent ( EnumDifficulty difficulty , EnumDifficulty oldDifficulty ) 
 + { 
 + this . difficulty = difficulty ; 
 + this . oldDifficulty = oldDifficulty ; 
 + } 
 + 
 + public EnumDifficulty getDifficulty ( ) 
 + { 
 + return difficulty ; 
 + } 
 + 
 + public EnumDifficulty getOldDifficulty ( ) 
 + { 
 + return oldDifficulty ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java b / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java 
 new file mode 100644 
 index 0000000 . . a19430d 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / DifficultyChangeEventTest . java 
 @ @ - 0 , 0 + 1 , 28 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import net . minecraft . world . EnumDifficulty ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . DifficultyChangeEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . Event . Result ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + @ Mod ( modid = " difficultychangeeventtest " , name = " DifficultyChangeEventTest " , version = " 0 . 0 . 0 " ) 
 + public class DifficultyChangeEventTest 
 + { 
 + private static final boolean ENABLE = false ; 
 + 
 + @ EventHandler 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + if ( ENABLE ) MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void onDifficultyChange ( DifficultyChangeEvent event ) 
 + { 
 + System . out . println ( " Difficulty changed from " + event . getOldDifficulty ( ) + " to " + event . getDifficulty ( ) ) ; 
 + } 
 + } 
 \ No newline at end of file
