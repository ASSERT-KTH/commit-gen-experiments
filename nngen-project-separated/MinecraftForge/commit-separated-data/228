BLEU SCORE: 0.007665231032171737

TEST MSG: Reuse multipart model instances across variants
GENERATED MSG: Added a default white texture ; Fixed B3DLoader crashing when the brush has empty texture specified

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index d1707aa . . 6272d5b 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 24 , 9 + 24 , 7 @ @ import java . awt . Graphics2D ; <nl> import java . awt . image . BufferedImage ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> - import java . util . Collections ; <nl> import java . util . Comparator ; <nl> - import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> @ @ - 68 , 9 + 66 , 7 @ @ import net . minecraft . client . renderer . texture . TextureMap ; <nl> import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> import net . minecraft . client . resources . IResourceManager ; <nl> - import net . minecraft . init . Items ; <nl> import net . minecraft . item . Item ; <nl> - import net . minecraft . item . ItemStack ; <nl> import net . minecraft . launchwrapper . Launch ; <nl> import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 78 , 25 + 74 , 18 @ @ import net . minecraft . util . registry . IRegistry ; <nl> import net . minecraftforge . client . model . animation . AnimationItemOverrideList ; <nl> import net . minecraftforge . client . model . animation . ModelBlockAnimation ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> - import net . minecraftforge . common . ForgeVersion ; <nl> - import net . minecraftforge . common . model . IModelPart ; <nl> import net . minecraftforge . common . model . IModelState ; <nl> import net . minecraftforge . common . model . Models ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> import net . minecraftforge . common . model . animation . IClip ; <nl> import net . minecraftforge . common . property . IExtendedBlockState ; <nl> import net . minecraftforge . common . property . Properties ; <nl> - import net . minecraftforge . fluids . Fluid ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> - import net . minecraftforge . fluids . FluidStack ; <nl> - import net . minecraftforge . fluids . FluidUtil ; <nl> - import net . minecraftforge . fluids . capability . IFluidHandler ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . ProgressManager ; <nl> import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; <nl> import net . minecraftforge . fml . common . registry . ForgeRegistries ; <nl> - import net . minecraftforge . registries . GameData ; <nl> import net . minecraftforge . registries . IRegistryDelegate ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> @ @ - 109 , 7 + 98 , 6 @ @ import java . util . Optional ; <nl> import java . util . stream . Collectors ; <nl> import java . util . stream . StreamSupport ; <nl> <nl> - import com . google . common . base . Predicate ; <nl> import com . google . common . cache . CacheBuilder ; <nl> import com . google . common . cache . CacheLoader ; <nl> import com . google . common . cache . LoadingCache ; <nl> @ @ - 117 , 7 + 105 , 6 @ @ import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> - import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> @ @ - 130 , 6 + 117 , 8 @ @ import javax . annotation . Nullable ; <nl> public final class ModelLoader extends ModelBakery <nl> { <nl> private final Map < ModelResourceLocation , IModel > stateModels = Maps . newHashMap ( ) ; <nl> + private final Map < ModelResourceLocation , ModelBlockDefinition > multipartDefinitions = Maps . newHashMap ( ) ; <nl> + private final Map < ModelBlockDefinition , IModel > multipartModels = Maps . newHashMap ( ) ; <nl> / / TODO : nothing adds to missingVariants , remove it ? <nl> private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; <nl> private final Map < ResourceLocation , Exception > loadingExceptions = Maps . newHashMap ( ) ; <nl> @ @ - 260 , 6 + 249 , 7 @ @ public final class ModelLoader extends ModelBakery <nl> { <nl> for ( ModelResourceLocation location : locations ) <nl> { <nl> + multipartDefinitions . put ( location , definition ) ; <nl> registerVariant ( null , location ) ; <nl> } <nl> } <nl> @ @ - 1186 , 16 + 1176 , 23 @ @ public final class ModelLoader extends ModelBakery <nl> { <nl> ModelResourceLocation variant = ( ModelResourceLocation ) modelLocation ; <nl> ModelBlockDefinition definition = loader . getModelBlockDefinition ( variant ) ; <nl> + <nl> try <nl> { <nl> VariantList variants = definition . getVariant ( variant . getVariant ( ) ) ; <nl> return new WeightedRandomModel ( variant , variants ) ; <nl> } <nl> - catch ( MissingVariantException e ) <nl> + catch ( MissingVariantException e ) <nl> { <nl> - if ( definition . hasMultipartData ( ) ) <nl> + if ( definition . equals ( loader . multipartDefinitions . get ( variant ) ) ) <nl> { <nl> - return new MultipartModel ( new ResourceLocation ( variant . getResourceDomain ( ) , variant . getResourcePath ( ) ) , definition . getMultipartData ( ) ) ; <nl> + IModel model = loader . multipartModels . get ( definition ) ; <nl> + if ( model = = null ) <nl> + { <nl> + model = new MultipartModel ( new ResourceLocation ( variant . getResourceDomain ( ) , variant . getResourcePath ( ) ) , definition . getMultipartData ( ) ) ; <nl> + loader . multipartModels . put ( definition , model ) ; <nl> + } <nl> + return model ; <nl> } <nl> throw e ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 3f51eae . . 6364608 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 1 , 7 + 1 , 9 @ @ <nl> package net . minecraftforge . client . model ; <nl> <nl> + import java . awt . image . BufferedImage ; <nl> import java . io . IOException ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> @ @ - 13 , 6 + 15 , 7 @ @ import java . util . Set ; <nl> <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . renderer . BlockModelShapes ; <nl> import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> import net . minecraft . client . renderer . ItemModelMesher ; <nl> @ @ - 37 , 7 + 40 , 10 @ @ import net . minecraft . client . resources . model . WeightedBakedModel ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . util . IRegistry ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . event . TextureStitchEvent ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> import net . minecraftforge . fml . common . registry . GameData ; <nl> import net . minecraftforge . fml . common . registry . RegistryDelegate ; <nl> <nl> @ @ - 71 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery <nl> super ( manager , map , shapes ) ; <nl> VanillaLoader . instance . setLoader ( this ) ; <nl> ModelLoaderRegistry . clearModelCache ( ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( White . instance ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 450 , 6 + 457 , 40 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + public static class White extends TextureAtlasSprite <nl> + { <nl> + public static ResourceLocation loc = new ResourceLocation ( " white " ) ; <nl> + public static White instance = new White ( ) ; <nl> + <nl> + protected White ( ) <nl> + { <nl> + super ( loc . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasCustomLoader ( IResourceManager manager , ResourceLocation location ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean load ( IResourceManager manager , ResourceLocation location ) <nl> + { <nl> + BufferedImage image = new BufferedImage ( 1 , 1 , BufferedImage . TYPE _ INT _ ARGB ) ; <nl> + image . setRGB ( 0 , 0 , 0xFFFFFFFF ) ; <nl> + BufferedImage [ ] images = new BufferedImage [ Minecraft . getMinecraft ( ) . gameSettings . mipmapLevels + 1 ] ; <nl> + images [ 0 ] = image ; <nl> + loadSprite ( images , null ) ; <nl> + return false ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void handleStitchPre ( TextureStitchEvent . Pre event ) <nl> + { <nl> + event . map . setTextureEntry ( White . loc . toString ( ) , White . instance ) ; <nl> + } <nl> + } <nl> + <nl> public void onPostBakeEvent ( IRegistry modelRegistry ) <nl> { <nl> for ( ModelResourceLocation missing : missingVariants ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index 0895dd7 . . ca0f3fb 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraftforge . client . model . IModelPart ; <nl> import net . minecraftforge . client . model . IModelState ; <nl> import net . minecraftforge . client . model . ISmartBlockModel ; <nl> import net . minecraftforge . client . model . ISmartItemModel ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . client . model . ModelLoaderRegistry ; <nl> import net . minecraftforge . client . model . TRSRTransformation ; <nl> import net . minecraftforge . client . model . b3d . B3DModel . Animation ; <nl> @ @ - 455 , 6 + 456 , 7 @ @ public class B3DLoader implements ICustomModelLoader <nl> List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; <nl> TextureAtlasSprite sprite ; <nl> if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; <nl> + else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; <nl> else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; <nl> putVertexData ( f . getV1 ( ) , sprite ) ; <nl> putVertexData ( f . getV2 ( ) , sprite ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java <nl> index d020223 . . 070e01f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class B3DModel <nl> logger . error ( String . format ( " texture % s is out of range " , texture ) ) ; <nl> return null ; <nl> } <nl> - else if ( texture = = - 1 ) return null ; <nl> + else if ( texture = = - 1 ) return Texture . White ; <nl> return textures . get ( texture ) ; <nl> } <nl> <nl> @ @ - 482 , 6 + 482 , 7 @ @ public class B3DModel <nl> <nl> public static class Texture <nl> { <nl> + public static Texture White = new Texture ( " builtin / white " , 0 , 0 , new Vector2f ( 0 , 0 ) , new Vector2f ( 1 , 1 ) , 0 ) ; <nl> private final String path ; <nl> private final int flags ; <nl> private final int blend ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index d1707aa . . 6272d5b 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 24 , 9 + 24 , 7 @ @ import java . awt . Graphics2D ; 
 import java . awt . image . BufferedImage ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 - import java . util . Collections ; 
 import java . util . Comparator ; 
 - import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 @ @ - 68 , 9 + 66 , 7 @ @ import net . minecraft . client . renderer . texture . TextureMap ; 
 import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 import net . minecraft . client . renderer . vertex . VertexFormat ; 
 import net . minecraft . client . resources . IResourceManager ; 
 - import net . minecraft . init . Items ; 
 import net . minecraft . item . Item ; 
 - import net . minecraft . item . ItemStack ; 
 import net . minecraft . launchwrapper . Launch ; 
 import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 78 , 25 + 74 , 18 @ @ import net . minecraft . util . registry . IRegistry ; 
 import net . minecraftforge . client . model . animation . AnimationItemOverrideList ; 
 import net . minecraftforge . client . model . animation . ModelBlockAnimation ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 - import net . minecraftforge . common . ForgeVersion ; 
 - import net . minecraftforge . common . model . IModelPart ; 
 import net . minecraftforge . common . model . IModelState ; 
 import net . minecraftforge . common . model . Models ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 import net . minecraftforge . common . model . animation . IClip ; 
 import net . minecraftforge . common . property . IExtendedBlockState ; 
 import net . minecraftforge . common . property . Properties ; 
 - import net . minecraftforge . fluids . Fluid ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 - import net . minecraftforge . fluids . FluidStack ; 
 - import net . minecraftforge . fluids . FluidUtil ; 
 - import net . minecraftforge . fluids . capability . IFluidHandler ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . ProgressManager ; 
 import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; 
 import net . minecraftforge . fml . common . registry . ForgeRegistries ; 
 - import net . minecraftforge . registries . GameData ; 
 import net . minecraftforge . registries . IRegistryDelegate ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 @ @ - 109 , 7 + 98 , 6 @ @ import java . util . Optional ; 
 import java . util . stream . Collectors ; 
 import java . util . stream . StreamSupport ; 
 
 - import com . google . common . base . Predicate ; 
 import com . google . common . cache . CacheBuilder ; 
 import com . google . common . cache . CacheLoader ; 
 import com . google . common . cache . LoadingCache ; 
 @ @ - 117 , 7 + 105 , 6 @ @ import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 - import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 @ @ - 130 , 6 + 117 , 8 @ @ import javax . annotation . Nullable ; 
 public final class ModelLoader extends ModelBakery 
 { 
 private final Map < ModelResourceLocation , IModel > stateModels = Maps . newHashMap ( ) ; 
 + private final Map < ModelResourceLocation , ModelBlockDefinition > multipartDefinitions = Maps . newHashMap ( ) ; 
 + private final Map < ModelBlockDefinition , IModel > multipartModels = Maps . newHashMap ( ) ; 
 / / TODO : nothing adds to missingVariants , remove it ? 
 private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; 
 private final Map < ResourceLocation , Exception > loadingExceptions = Maps . newHashMap ( ) ; 
 @ @ - 260 , 6 + 249 , 7 @ @ public final class ModelLoader extends ModelBakery 
 { 
 for ( ModelResourceLocation location : locations ) 
 { 
 + multipartDefinitions . put ( location , definition ) ; 
 registerVariant ( null , location ) ; 
 } 
 } 
 @ @ - 1186 , 16 + 1176 , 23 @ @ public final class ModelLoader extends ModelBakery 
 { 
 ModelResourceLocation variant = ( ModelResourceLocation ) modelLocation ; 
 ModelBlockDefinition definition = loader . getModelBlockDefinition ( variant ) ; 
 + 
 try 
 { 
 VariantList variants = definition . getVariant ( variant . getVariant ( ) ) ; 
 return new WeightedRandomModel ( variant , variants ) ; 
 } 
 - catch ( MissingVariantException e ) 
 + catch ( MissingVariantException e ) 
 { 
 - if ( definition . hasMultipartData ( ) ) 
 + if ( definition . equals ( loader . multipartDefinitions . get ( variant ) ) ) 
 { 
 - return new MultipartModel ( new ResourceLocation ( variant . getResourceDomain ( ) , variant . getResourcePath ( ) ) , definition . getMultipartData ( ) ) ; 
 + IModel model = loader . multipartModels . get ( definition ) ; 
 + if ( model = = null ) 
 + { 
 + model = new MultipartModel ( new ResourceLocation ( variant . getResourceDomain ( ) , variant . getResourcePath ( ) ) , definition . getMultipartData ( ) ) ; 
 + loader . multipartModels . put ( definition , model ) ; 
 + } 
 + return model ; 
 } 
 throw e ; 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 3f51eae . . 6364608 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 1 , 7 + 1 , 9 @ @ 
 package net . minecraftforge . client . model ; 
 
 + import java . awt . image . BufferedImage ; 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 @ @ - 13 , 6 + 15 , 7 @ @ import java . util . Set ; 
 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . renderer . BlockModelShapes ; 
 import net . minecraft . client . renderer . ItemMeshDefinition ; 
 import net . minecraft . client . renderer . ItemModelMesher ; 
 @ @ - 37 , 7 + 40 , 10 @ @ import net . minecraft . client . resources . model . WeightedBakedModel ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . util . IRegistry ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . event . TextureStitchEvent ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 import net . minecraftforge . fml . common . registry . GameData ; 
 import net . minecraftforge . fml . common . registry . RegistryDelegate ; 
 
 @ @ - 71 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery 
 super ( manager , map , shapes ) ; 
 VanillaLoader . instance . setLoader ( this ) ; 
 ModelLoaderRegistry . clearModelCache ( ) ; 
 + MinecraftForge . EVENT _ BUS . register ( White . instance ) ; 
 } 
 
 @ Override 
 @ @ - 450 , 6 + 457 , 40 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + public static class White extends TextureAtlasSprite 
 + { 
 + public static ResourceLocation loc = new ResourceLocation ( " white " ) ; 
 + public static White instance = new White ( ) ; 
 + 
 + protected White ( ) 
 + { 
 + super ( loc . toString ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public boolean hasCustomLoader ( IResourceManager manager , ResourceLocation location ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean load ( IResourceManager manager , ResourceLocation location ) 
 + { 
 + BufferedImage image = new BufferedImage ( 1 , 1 , BufferedImage . TYPE _ INT _ ARGB ) ; 
 + image . setRGB ( 0 , 0 , 0xFFFFFFFF ) ; 
 + BufferedImage [ ] images = new BufferedImage [ Minecraft . getMinecraft ( ) . gameSettings . mipmapLevels + 1 ] ; 
 + images [ 0 ] = image ; 
 + loadSprite ( images , null ) ; 
 + return false ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void handleStitchPre ( TextureStitchEvent . Pre event ) 
 + { 
 + event . map . setTextureEntry ( White . loc . toString ( ) , White . instance ) ; 
 + } 
 + } 
 + 
 public void onPostBakeEvent ( IRegistry modelRegistry ) 
 { 
 for ( ModelResourceLocation missing : missingVariants ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index 0895dd7 . . ca0f3fb 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraftforge . client . model . IModelPart ; 
 import net . minecraftforge . client . model . IModelState ; 
 import net . minecraftforge . client . model . ISmartBlockModel ; 
 import net . minecraftforge . client . model . ISmartItemModel ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . client . model . ModelLoaderRegistry ; 
 import net . minecraftforge . client . model . TRSRTransformation ; 
 import net . minecraftforge . client . model . b3d . B3DModel . Animation ; 
 @ @ - 455 , 6 + 456 , 7 @ @ public class B3DLoader implements ICustomModelLoader 
 List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; 
 TextureAtlasSprite sprite ; 
 if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; 
 + else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; 
 else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; 
 putVertexData ( f . getV1 ( ) , sprite ) ; 
 putVertexData ( f . getV2 ( ) , sprite ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java 
 index d020223 . . 070e01f 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java 
 @ @ - 106 , 7 + 106 , 7 @ @ public class B3DModel 
 logger . error ( String . format ( " texture % s is out of range " , texture ) ) ; 
 return null ; 
 } 
 - else if ( texture = = - 1 ) return null ; 
 + else if ( texture = = - 1 ) return Texture . White ; 
 return textures . get ( texture ) ; 
 } 
 
 @ @ - 482 , 6 + 482 , 7 @ @ public class B3DModel 
 
 public static class Texture 
 { 
 + public static Texture White = new Texture ( " builtin / white " , 0 , 0 , new Vector2f ( 0 , 0 ) , new Vector2f ( 1 , 1 ) , 0 ) ; 
 private final String path ; 
 private final int flags ; 
 private final int blend ;
