BLEU SCORE: 0.023287349035853486

TEST MSG: Big cleanup of logging . Might do some tweaks of the userdev logging , but this should be good for vanilla . .
GENERATED MSG: Add I18n accessor , fix up some mod log messages , make the EnumExtender work .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / event / RegistryEvent . java b / src / main / java / net / minecraftforge / event / RegistryEvent . java <nl> index bb60fec . . 30ccc55 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / RegistryEvent . java <nl> + + + b / src / main / java / net / minecraftforge / event / RegistryEvent . java <nl> @ @ - 45 , 6 + 45 , 10 @ @ public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEven <nl> * / <nl> public static class NewRegistry extends net . minecraftforge . eventbus . api . Event <nl> { <nl> + @ Override <nl> + public String toString ( ) { <nl> + return " RegistryEvent . NewRegistry " ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 80 , 6 + 84 , 10 @ @ public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEven <nl> return name ; <nl> } <nl> <nl> + @ Override <nl> + public String toString ( ) { <nl> + return " RegistryEvent . Register < " + getName ( ) + " > " ; <nl> + } <nl> } <nl> <nl> public static class MissingMappings < T extends IForgeRegistryEntry < T > > extends RegistryEvent < T > <nl> diff - - git a / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java <nl> index 42823d7 . . e149915 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java <nl> + + + b / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java <nl> @ @ - 66 , 7 + 66 , 7 @ @ public class AutomaticEventSubscriber <nl> if ( Objects . equals ( mod . getModId ( ) , modId ) & & sides . contains ( FMLEnvironment . dist ) ) { <nl> try <nl> { <nl> - LOGGER . info ( LOADING , " Auto - subscribing { } to { } " , ad . getClassType ( ) . getClassName ( ) , busTarget ) ; <nl> + LOGGER . debug ( LOADING , " Auto - subscribing { } to { } " , ad . getClassType ( ) . getClassName ( ) , busTarget ) ; <nl> busTarget . bus ( ) . get ( ) . register ( Class . forName ( ad . getClassType ( ) . getClassName ( ) , true , loader ) ) ; <nl> } <nl> catch ( ClassNotFoundException e ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / LaunchTesting . java b / src / main / java / net / minecraftforge / fml / LaunchTesting . java <nl> index a5f8d79 . . 191f4ca 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / LaunchTesting . java <nl> + + + b / src / main / java / net / minecraftforge / fml / LaunchTesting . java <nl> @ @ - 37 , 15 + 37 , 15 @ @ public class LaunchTesting <nl> public static void main ( String . . . args ) throws InterruptedException <nl> { <nl> Configurator . setRootLevel ( Level . DEBUG ) ; <nl> - final MarkerFilter classloadingFilter = MarkerFilter . createFilter ( " CLASSLOADING " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> - final MarkerFilter launchpluginFilter = MarkerFilter . createFilter ( " LAUNCHPLUGIN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + / / final MarkerFilter classloadingFilter = MarkerFilter . createFilter ( " CLASSLOADING " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> + / / final MarkerFilter launchpluginFilter = MarkerFilter . createFilter ( " LAUNCHPLUGIN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> final MarkerFilter axformFilter = MarkerFilter . createFilter ( " AXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> final MarkerFilter eventbusFilter = MarkerFilter . createFilter ( " EVENTBUS " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> final MarkerFilter distxformFilter = MarkerFilter . createFilter ( " DISTXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> / / final MarkerFilter scannerFilter = MarkerFilter . createFilter ( " SCAN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; <nl> final LoggerContext logcontext = LoggerContext . getContext ( false ) ; <nl> - logcontext . getConfiguration ( ) . addFilter ( classloadingFilter ) ; <nl> - logcontext . getConfiguration ( ) . addFilter ( launchpluginFilter ) ; <nl> + / / logcontext . getConfiguration ( ) . addFilter ( classloadingFilter ) ; <nl> + / / logcontext . getConfiguration ( ) . addFilter ( launchpluginFilter ) ; <nl> / / logcontext . getConfiguration ( ) . addFilter ( axformFilter ) ; <nl> / / logcontext . getConfiguration ( ) . addFilter ( eventbusFilter ) ; <nl> / / logcontext . getConfiguration ( ) . addFilter ( distxformFilter ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java <nl> index ff5f04a . . 8c9af83 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModList . java <nl> @ @ - 94 , 13 + 94 , 13 @ @ public class ModList <nl> } <nl> <nl> private void dispatchSynchronousEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { <nl> - LOGGER . info ( LOADING , " Dispatching synchronous event { } " , lifecycleEvent ) ; <nl> + LOGGER . debug ( LOADING , " Dispatching synchronous event { } " , lifecycleEvent ) ; <nl> FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; <nl> this . mods . forEach ( m - > m . transitionState ( lifecycleEvent , errorHandler ) ) ; <nl> FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; <nl> } <nl> private void dispatchParallelEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { <nl> - LOGGER . info ( LOADING , " Dispatching parallel event { } " , lifecycleEvent ) ; <nl> + LOGGER . debug ( LOADING , " Dispatching parallel event { } " , lifecycleEvent ) ; <nl> FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; <nl> DeferredWorkQueue . clear ( ) ; <nl> try <nl> diff - - git a / src / main / java / net / minecraftforge / fml / event / lifecycle / ModLifecycleEvent . java b / src / main / java / net / minecraftforge / fml / event / lifecycle / ModLifecycleEvent . java <nl> index 0eaa046 . . 22d4517 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / event / lifecycle / ModLifecycleEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / event / lifecycle / ModLifecycleEvent . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import net . minecraftforge . eventbus . api . Event ; <nl> import net . minecraftforge . fml . InterModComms ; <nl> import net . minecraftforge . fml . ModContainer ; <nl> <nl> + import java . util . Arrays ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Stream ; <nl> <nl> @ @ - 42 , 7 + 43 , 7 @ @ public class ModLifecycleEvent extends Event <nl> public final String description ( ) <nl> { <nl> String cn = getClass ( ) . getName ( ) ; <nl> - return cn . substring ( cn . lastIndexOf ( ' . ' ) + 4 , cn . length ( ) - 5 ) ; <nl> + return cn . substring ( cn . lastIndexOf ( ' . ' ) + 1 ) ; <nl> } <nl> <nl> public Stream < InterModComms . IMCMessage > getIMCStream ( ) { <nl> @ @ - 52 , 4 + 53 , 9 @ @ public class ModLifecycleEvent extends Event <nl> public Stream < InterModComms . IMCMessage > getIMCStream ( Predicate < String > methodFilter ) { <nl> return InterModComms . getMessages ( this . container . getModId ( ) , methodFilter ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return description ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> index 2630fb8 . . 5439f10 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> @ @ - 98 , 11 + 98 , 11 @ @ public class FMLModContainer extends ModContainer <nl> <nl> private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> final Event event = lifecycleEvent . getOrBuildEvent ( this ) ; <nl> - LOGGER . info ( LOADING , " Firing event for modid { } : { } " , this . getModId ( ) , event . getClass ( ) . getName ( ) ) ; <nl> + LOGGER . debug ( LOADING , " Firing event for modid { } : { } " , this . getModId ( ) , event ) ; <nl> try <nl> { <nl> eventBus . post ( event ) ; <nl> - LOGGER . debug ( LOADING , " Fired event for modid { } : { } " , this . getModId ( ) , event . getClass ( ) . getName ( ) ) ; <nl> + LOGGER . debug ( LOADING , " Fired event for modid { } : { } " , this . getModId ( ) , event ) ; <nl> } <nl> catch ( Throwable e ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 9519fb3 . . 5e6a00a 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 65 , 6 + 65 , 8 @ @ import java . util . function . Consumer ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Collectors ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> + <nl> / * * <nl> * INTERNAL ONLY <nl> * MODDERS SHOULD HAVE NO REASON TO USE THIS CLASS <nl> @ @ - 809 , 9 + 811 , 9 @ @ public class GameData <nl> if ( i = = keysSize - 1 ) lifecycleEventProvider . changeProgression ( LifecycleEventProvider . LifecycleEvent . Progression . NEXT ) ; <nl> eventDispatcher . accept ( lifecycleEventProvider ) ; <nl> reg . freeze ( ) ; <nl> - LOGGER . info ( " { } Applying holder lookups " , rl . toString ( ) ) ; <nl> + LOGGER . debug ( CORE , " Applying holder lookups : { } " , rl . toString ( ) ) ; <nl> ObjectHolderRegistry . applyObjectHolders ( rl : : equals ) ; <nl> - LOGGER . info ( " { } Holder lookups applied " , rl . toString ( ) ) ; <nl> + LOGGER . debug ( CORE , " Holder lookups applied : { } " , rl . toString ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java b / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java <nl> index 6cd0a74 . . 7d8c66a 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java <nl> @ @ - 45 , 6 + 45 , 8 @ @ import org . apache . logging . log4j . Logger ; <nl> import org . objectweb . asm . Opcodes ; <nl> import org . objectweb . asm . Type ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> + <nl> / * * <nl> * Internal registry for tracking { @ link ObjectHolder } references <nl> * / <nl> @ @ - 87 , 7 + 89 , 7 @ @ public class ObjectHolderRegistry <nl> <nl> public static void findObjectHolders ( ) <nl> { <nl> - LOGGER . info ( " Processing ObjectHolder annotations " ) ; <nl> + LOGGER . debug ( CORE , " Processing ObjectHolder annotations " ) ; <nl> final List < ModFileScanData . AnnotationData > annotations = ModList . get ( ) . getAllScanData ( ) . stream ( ) <nl> . map ( ModFileScanData : : getAnnotations ) <nl> . flatMap ( Collection : : stream ) <nl> diff - - git a / src / main / resources / log4j2 . xml b / src / main / resources / log4j2 . xml <nl> index 1e2fe02 . . 431d9a5 100644 <nl> - - - a / src / main / resources / log4j2 . xml <nl> + + + b / src / main / resources / log4j2 . xml <nl> @ @ - 3 , 31 + 3 , 31 @ @ <nl> < Appenders > <nl> < Console name = " SysOut " target = " SYSTEM _ OUT " > <nl> < PatternLayout > <nl> - < LoggerNamePatternSelector defaultPattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " > <nl> + < LoggerNamePatternSelector defaultPattern = " % highlight { [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ % c { 2 . } / % markerSimpleName ] : % msg % n } " > <nl> < ! - - don ' t include the full logger name for Mojang ' s logs since they use full class names and it ' s very verbose - - > <nl> - < PatternMatch key = " net . minecraft . " pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ minecraft / % logger { 1 } ] : % msg % n " / > <nl> - < PatternMatch key = " com . mojang . " pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ mojang / % logger { 1 } ] : % msg % n " / > <nl> + < PatternMatch key = " net . minecraft . " pattern = " % highlight { [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ minecraft / % logger { 1 } ] : % msg % n } " / > <nl> + < PatternMatch key = " com . mojang . " pattern = " % highlight { [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ mojang / % logger { 1 } ] : % msg % n } " / > <nl> < / LoggerNamePatternSelector > <nl> < / PatternLayout > <nl> < / Console > <nl> < Queue name = " ServerGuiConsole " ignoreExceptions = " true " > <nl> < PatternLayout > <nl> - < LoggerNamePatternSelector defaultPattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " > <nl> + < LoggerNamePatternSelector defaultPattern = " [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ % c { 2 . } / % markerSimpleName ] : % msg % n " > <nl> < ! - - don ' t include the full logger name for Mojang ' s logs since they use full class names and it ' s very verbose - - > <nl> - < PatternMatch key = " net . minecraft . " pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ minecraft / % logger { 1 } ] : % msg % n " / > <nl> - < PatternMatch key = " com . mojang . " pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ mojang / % logger { 1 } ] : % msg % n " / > <nl> + < PatternMatch key = " net . minecraft . " pattern = " [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ minecraft / % logger { 1 } ] : % msg % n " / > <nl> + < PatternMatch key = " com . mojang . " pattern = " [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ mojang / % logger { 1 } ] : % msg % n " / > <nl> < / LoggerNamePatternSelector > <nl> < / PatternLayout > <nl> < / Queue > <nl> < RollingRandomAccessFile name = " File " fileName = " logs / latest . log " filePattern = " logs / % d { yyyy - MM - dd } - % i . log . gz " > <nl> - < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " / > <nl> + < PatternLayout pattern = " [ % d { ddMMMyyyy HH : mm : ss . SSS } ] [ % t / % level ] [ % logger / % markerSimpleName ] : % msg % n " / > <nl> < Policies > <nl> < TimeBasedTriggeringPolicy / > <nl> < OnStartupTriggeringPolicy / > <nl> < / Policies > <nl> < / RollingRandomAccessFile > <nl> < RollingRandomAccessFile name = " DebugFile " fileName = " logs / debug . log " filePattern = " logs / debug - % i . log . gz " > <nl> - < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " / > <nl> + < PatternLayout pattern = " [ % d { ddMMMyyyy HH : mm : ss . SSS } ] [ % t / % level ] [ % logger / % markerSimpleName ] : % msg % n " / > <nl> < Policies > <nl> < OnStartupTriggeringPolicy / > <nl> < SizeBasedTriggeringPolicy size = " 200MB " / > <nl> @ @ - 41 , 7 + 41 , 13 @ @ <nl> < Logger level = " $ { sys : forge . logging . mojang . level : - info } " name = " net . minecraft " / > <nl> < Root level = " all " > <nl> < filters > <nl> - < MarkerFilter marker = " NETWORK _ PACKETS " onMatch = " DENY " onMismatch = " NEUTRAL " / > <nl> + < MarkerFilter marker = " NETWORK _ PACKETS " onMatch = " $ { sys : forge . logging . marker . networking : - DENY } " onMismatch = " NEUTRAL " / > <nl> + < MarkerFilter marker = " CLASSLOADING " onMatch = " $ { sys : forge . logging . marker . classloading : - DENY } " onMismatch = " NEUTRAL " / > <nl> + < MarkerFilter marker = " LAUNCHPLUGIN " onMatch = " $ { sys : forge . logging . marker . launchplugin : - DENY } " onMismatch = " NEUTRAL " / > <nl> + < MarkerFilter marker = " AXFORM " onMatch = " $ { sys : forge . logging . marker . accesstransformer : - DENY } " onMismatch = " NEUTRAL " / > <nl> + < MarkerFilter marker = " EVENTBUS " onMatch = " $ { sys : forge . logging . marker . eventbus : - DENY } " onMismatch = " NEUTRAL " / > <nl> + < MarkerFilter marker = " DISTXFORM " onMatch = " $ { sys : forge . logging . marker . dist : - DENY } " onMismatch = " NEUTRAL " / > <nl> + < MarkerFilter marker = " SCAN " onMatch = " $ { sys : forge . logging . marker . scan : - DENY } " onMismatch = " NEUTRAL " / > <nl> < / filters > <nl> < AppenderRef ref = " SysOut " level = " $ { sys : forge . logging . console . level : - info } " / > <nl> < AppenderRef ref = " ServerGuiConsole " level = " $ { sys : forge . logging . console . level : - info } " / >
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 94ab2e7 . . ef1db7c 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { <nl> into " $ buildDir / classes / java / main " <nl> } <nl> } <nl> + / / jvmArgs = [ ' - verbose : class ' ] <nl> classpath sourceSets . main . runtimeClasspath <nl> main ' net . minecraftforge . fml . LaunchTesting ' <nl> systemProperties target : ' fmldevclient ' <nl> diff - - git a / patches / minecraft / net / minecraft / client / resources / I18n . java . patch b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 981b15c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - a / net / minecraft / client / resources / I18n . java <nl> + + + + b / net / minecraft / client / resources / I18n . java <nl> + @ @ - 9 , 6 + 9 , 7 @ @ <nl> + <nl> + static void setLocale ( Locale i18nLocaleIn ) { <nl> + i18nLocale = i18nLocaleIn ; <nl> + + net . minecraftforge . fml . ForgeI18n . loadLanguageData ( i18nLocale . properties ) ; <nl> + } <nl> + <nl> + public static String format ( String translateKey , Object . . . parameters ) { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> index 2f24f33 . . 81f5044 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> @ @ - 88 , 8 + 88 , 6 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook <nl> public static boolean fixVanillaCascading = false ; / / There are various places in vanilla that cause cascading worldgen . Enabling this WILL change where blocks are placed to prevent this . <nl> / / DO NOT contact Forge about worldgen not ' matching ' vanilla if this flag is set . <nl> <nl> - static final Logger log = LogManager . getLogger ( ForgeVersion . MOD _ ID ) ; <nl> - <nl> private static Configuration config ; <nl> private static ForgeMod INSTANCE ; <nl> public static ForgeMod getInstance ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> index f6d4a74 . . df442bb 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> + + + b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package net . minecraftforge . common . asm ; <nl> <nl> import java . nio . file . Path ; <nl> <nl> + import net . minecraftforge . fml . AdvancedLogMessageAdapter ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . objectweb . asm . Opcodes ; <nl> @ @ - 65 , 7 + 66 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> if ( ( classNode . access & Opcodes . ACC _ ENUM ) = = 0 ) <nl> return classNode ; <nl> <nl> - Type array = Type . getType ( " [ " + classType . getInternalName ( ) ) ; <nl> + Type array = Type . getType ( " [ " + classType . getDescriptor ( ) ) ; <nl> final int flags = Opcodes . ACC _ PRIVATE | Opcodes . ACC _ STATIC | Opcodes . ACC _ FINAL | Opcodes . ACC _ SYNTHETIC ; <nl> <nl> FieldNode values = classNode . fields . stream ( ) . filter ( f - > f . desc . contentEquals ( array . getDescriptor ( ) ) & & ( ( f . access & flags ) = = flags ) ) . findFirst ( ) . orElse ( null ) ; <nl> @ @ - 87 , 16 + 88 , 21 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> MethodNode ctr = classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) & & m . desc . equals ( desc ) ) . findFirst ( ) . orElse ( null ) ; <nl> if ( ctr = = null ) <nl> { <nl> - LOGGER . error ( " Enum has create method with no matching constructor : " ) ; <nl> - LOGGER . error ( " Target : " + desc ) ; <nl> - classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > LOGGER . error ( " : " + m . desc ) ) ; <nl> + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { <nl> + sb . append ( " Enum has create method with no matching constructor : \ n " ) ; <nl> + sb . append ( " Target : " ) . append ( desc ) . append ( " \ n " ) ; <nl> + classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > sb . append ( " : " ) . append ( m . desc ) . append ( " \ n " ) ) ; <nl> + } ) ) ; <nl> throw new IllegalStateException ( " Enum has create method with no matching constructor : " + desc ) ; <nl> } <nl> <nl> if ( values = = null ) <nl> { <nl> - LOGGER . error ( " Enum has create method but we could not find $ VALUES : " ) ; <nl> - classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . forEach ( m - > LOGGER . error ( " " + m . name + " " + m . desc ) ) ; <nl> + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { <nl> + sb . append ( " Enum has create method but we could not find $ VALUES . Found : \ n " ) ; <nl> + classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . <nl> + forEach ( m - > sb . append ( " " ) . append ( m . name ) . append ( " " ) . append ( m . desc ) . append ( " \ n " ) ) ; <nl> + } ) ) ; <nl> throw new IllegalStateException ( " Enum has create method but we could not find $ VALUES " ) ; <nl> } <nl> <nl> @ @ - 109 , 17 + 115 , 18 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> ins . dup ( ) ; <nl> ins . load ( 0 , STRING ) ; <nl> ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> + ins . arraylength ( ) ; <nl> ins . iconst ( 1 ) ; <nl> ins . add ( Type . INT _ TYPE ) ; <nl> for ( int x = 1 ; x < args . length ; x + + ) <nl> ins . load ( x , args [ x ] ) ; <nl> - ins . invokespecial ( classType . getDescriptor ( ) , " < init > " , desc , false ) ; <nl> + ins . invokespecial ( classType . getInternalName ( ) , " < init > " , desc , false ) ; <nl> ins . store ( 1 , classType ) ; <nl> / / VALUES = ArrayUtils . add ( VALUES , ret ) <nl> ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> ins . load ( 1 , classType ) ; <nl> - ins . invokestatic ( ARRAY _ UTILS . getDescriptor ( ) , " add " , ADD _ DESC , false ) ; <nl> - ins . checkcast ( array ) ; <nl> + ins . invokestatic ( ARRAY _ UTILS . getInternalName ( ) , " add " , ADD _ DESC , false ) ; <nl> + ins . checkcast ( Type . getType ( values . desc ) ) ; <nl> ins . putstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> / / EnumHelper . cleanEnumCache ( ThisType . class ) <nl> ins . visitLdcInsn ( classType ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java <nl> new file mode 100644 <nl> index 0000000 . . 369b4dc <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import org . apache . logging . log4j . message . Message ; <nl> + import org . apache . logging . log4j . util . StringBuilderFormattable ; <nl> + <nl> + import java . util . function . Consumer ; <nl> + <nl> + public class AdvancedLogMessageAdapter implements Message , StringBuilderFormattable { <nl> + private static final Object [ ] EMPTY = new Object [ 0 ] ; <nl> + <nl> + private final Consumer < StringBuilder > logMessageBuilder ; <nl> + <nl> + public AdvancedLogMessageAdapter ( final Consumer < StringBuilder > logMessageBuilder ) { <nl> + this . logMessageBuilder = logMessageBuilder ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getFormattedMessage ( ) { <nl> + return " " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getFormat ( ) { <nl> + return " " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Object [ ] getParameters ( ) { <nl> + return EMPTY ; <nl> + } <nl> + <nl> + @ Override <nl> + public Throwable getThrowable ( ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void formatTo ( final StringBuilder buffer ) { <nl> + logMessageBuilder . accept ( buffer ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / BrandingControl . java b / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> index 80b6c90 . . a101900 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> + + + b / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ package net . minecraftforge . fml ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Lists ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> - import net . minecraftforge . fml . ModList ; <nl> <nl> import java . text . MessageFormat ; <nl> import java . util . Arrays ; <nl> @ @ - 47 , 7 + 46 , 7 @ @ public class BrandingControl <nl> brd . add ( " Forge " + ForgeVersion . getVersion ( ) ) ; <nl> int tModCount = ModList . get ( ) . size ( ) ; <nl> <nl> - brd . add ( MessageFormat . format ( " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " , tModCount ) ) ; <nl> + brd . add ( MessageFormat . format ( ForgeI18n . getPattern ( " fml . menu . loadingmods " ) , tModCount ) ) ; <nl> brandings = brd . build ( ) ; <nl> brandingsNoMC = brandings . subList ( 1 , brandings . size ( ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> new file mode 100644 <nl> index 0000000 . . 1faf950 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import java . util . Map ; <nl> + <nl> + public class ForgeI18n { <nl> + private static Map < String , String > i18n ; <nl> + <nl> + static String getPattern ( final String patternName ) { <nl> + return i18n . get ( patternName ) ; <nl> + } <nl> + <nl> + public static void loadLanguageData ( final Map < String , String > properties ) { <nl> + i18n = properties ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java <nl> index 1be4373 . . d66d107 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java <nl> @ @ - 46 , 7 + 46 , 8 @ @ public class ResourcePackLoader <nl> <nl> public static IResourcePack getResourcePackFor ( String modId ) <nl> { <nl> - return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; <nl> + if ( modId = = " forge " ) return forgePack ; <nl> + else return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java <nl> index c708ae1 . . 23a6726 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import net . minecraftforge . fml . ModContainer ; <nl> import net . minecraftforge . fml . client . IDisplayableError ; <nl> import net . minecraftforge . fml . client . gui . GuiDupesFound ; <nl> <nl> - public class DuplicateModsFoundException extends LoaderException implements IDisplayableError <nl> + public class DuplicateModsFoundException extends LoaderException <nl> { <nl> private static final long serialVersionUID = 1L ; <nl> public SetMultimap < ModContainer , File > dupes ; <nl> @ @ - 38 , 22 + 38 , 4 @ @ public class DuplicateModsFoundException extends LoaderException implements IDis <nl> public DuplicateModsFoundException ( SetMultimap < ModContainer , File > dupes ) { <nl> this . dupes = dupes ; <nl> } <nl> - <nl> - @ Override <nl> - protected void printStackTrace ( WrappedPrintStream stream ) <nl> - { <nl> - stream . println ( " Duplicate Mods : " ) ; <nl> - for ( Entry < ModContainer , File > e : dupes . entries ( ) ) <nl> - { <nl> - stream . println ( String . format ( " \ t % s : % s " , e . getKey ( ) . getModId ( ) , e . getValue ( ) . getAbsolutePath ( ) ) ) ; <nl> - } <nl> - stream . println ( " " ) ; <nl> - } <nl> - <nl> - @ Override <nl> - @ OnlyIn ( Dist . CLIENT ) <nl> - public GuiScreen createGui ( ) <nl> - { <nl> - return new GuiDupesFound ( this ) ; <nl> - } <nl> } <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json <nl> new file mode 100644 <nl> index 0000000 . . 74fd746 <nl> - - - / dev / null <nl> + + + b / src / main / resources / assets / forge / lang / en _ us . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + { <nl> + " fml . menu . mods " : " Mods " , <nl> + " fml . menu . mods . normal " : " Off " , <nl> + " fml . menu . mods . search " : " Search " , <nl> + " fml . menu . mods . a _ to _ z " : " A - Z " , <nl> + " fml . menu . mods . z _ to _ a " : " Z - A " , <nl> + " fml . menu . mods . config " : " Config " , <nl> + " fml . menu . modoptions " : " Mod Options . . . " , <nl> + " fml . menu . loadingmods " : " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / event / RegistryEvent . java b / src / main / java / net / minecraftforge / event / RegistryEvent . java 
 index bb60fec . . 30ccc55 100644 
 - - - a / src / main / java / net / minecraftforge / event / RegistryEvent . java 
 + + + b / src / main / java / net / minecraftforge / event / RegistryEvent . java 
 @ @ - 45 , 6 + 45 , 10 @ @ public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEven 
 * / 
 public static class NewRegistry extends net . minecraftforge . eventbus . api . Event 
 { 
 + @ Override 
 + public String toString ( ) { 
 + return " RegistryEvent . NewRegistry " ; 
 + } 
 } 
 
 / * * 
 @ @ - 80 , 6 + 84 , 10 @ @ public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEven 
 return name ; 
 } 
 
 + @ Override 
 + public String toString ( ) { 
 + return " RegistryEvent . Register < " + getName ( ) + " > " ; 
 + } 
 } 
 
 public static class MissingMappings < T extends IForgeRegistryEntry < T > > extends RegistryEvent < T > 
 diff - - git a / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java 
 index 42823d7 . . e149915 100644 
 - - - a / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java 
 + + + b / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java 
 @ @ - 66 , 7 + 66 , 7 @ @ public class AutomaticEventSubscriber 
 if ( Objects . equals ( mod . getModId ( ) , modId ) & & sides . contains ( FMLEnvironment . dist ) ) { 
 try 
 { 
 - LOGGER . info ( LOADING , " Auto - subscribing { } to { } " , ad . getClassType ( ) . getClassName ( ) , busTarget ) ; 
 + LOGGER . debug ( LOADING , " Auto - subscribing { } to { } " , ad . getClassType ( ) . getClassName ( ) , busTarget ) ; 
 busTarget . bus ( ) . get ( ) . register ( Class . forName ( ad . getClassType ( ) . getClassName ( ) , true , loader ) ) ; 
 } 
 catch ( ClassNotFoundException e ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / LaunchTesting . java b / src / main / java / net / minecraftforge / fml / LaunchTesting . java 
 index a5f8d79 . . 191f4ca 100644 
 - - - a / src / main / java / net / minecraftforge / fml / LaunchTesting . java 
 + + + b / src / main / java / net / minecraftforge / fml / LaunchTesting . java 
 @ @ - 37 , 15 + 37 , 15 @ @ public class LaunchTesting 
 public static void main ( String . . . args ) throws InterruptedException 
 { 
 Configurator . setRootLevel ( Level . DEBUG ) ; 
 - final MarkerFilter classloadingFilter = MarkerFilter . createFilter ( " CLASSLOADING " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 - final MarkerFilter launchpluginFilter = MarkerFilter . createFilter ( " LAUNCHPLUGIN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + / / final MarkerFilter classloadingFilter = MarkerFilter . createFilter ( " CLASSLOADING " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 + / / final MarkerFilter launchpluginFilter = MarkerFilter . createFilter ( " LAUNCHPLUGIN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 final MarkerFilter axformFilter = MarkerFilter . createFilter ( " AXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 final MarkerFilter eventbusFilter = MarkerFilter . createFilter ( " EVENTBUS " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 final MarkerFilter distxformFilter = MarkerFilter . createFilter ( " DISTXFORM " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 / / final MarkerFilter scannerFilter = MarkerFilter . createFilter ( " SCAN " , Filter . Result . DENY , Filter . Result . NEUTRAL ) ; 
 final LoggerContext logcontext = LoggerContext . getContext ( false ) ; 
 - logcontext . getConfiguration ( ) . addFilter ( classloadingFilter ) ; 
 - logcontext . getConfiguration ( ) . addFilter ( launchpluginFilter ) ; 
 + / / logcontext . getConfiguration ( ) . addFilter ( classloadingFilter ) ; 
 + / / logcontext . getConfiguration ( ) . addFilter ( launchpluginFilter ) ; 
 / / logcontext . getConfiguration ( ) . addFilter ( axformFilter ) ; 
 / / logcontext . getConfiguration ( ) . addFilter ( eventbusFilter ) ; 
 / / logcontext . getConfiguration ( ) . addFilter ( distxformFilter ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java 
 index ff5f04a . . 8c9af83 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModList . java 
 @ @ - 94 , 13 + 94 , 13 @ @ public class ModList 
 } 
 
 private void dispatchSynchronousEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { 
 - LOGGER . info ( LOADING , " Dispatching synchronous event { } " , lifecycleEvent ) ; 
 + LOGGER . debug ( LOADING , " Dispatching synchronous event { } " , lifecycleEvent ) ; 
 FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; 
 this . mods . forEach ( m - > m . transitionState ( lifecycleEvent , errorHandler ) ) ; 
 FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; 
 } 
 private void dispatchParallelEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { 
 - LOGGER . info ( LOADING , " Dispatching parallel event { } " , lifecycleEvent ) ; 
 + LOGGER . debug ( LOADING , " Dispatching parallel event { } " , lifecycleEvent ) ; 
 FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; 
 DeferredWorkQueue . clear ( ) ; 
 try 
 diff - - git a / src / main / java / net / minecraftforge / fml / event / lifecycle / ModLifecycleEvent . java b / src / main / java / net / minecraftforge / fml / event / lifecycle / ModLifecycleEvent . java 
 index 0eaa046 . . 22d4517 100644 
 - - - a / src / main / java / net / minecraftforge / fml / event / lifecycle / ModLifecycleEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / event / lifecycle / ModLifecycleEvent . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import net . minecraftforge . eventbus . api . Event ; 
 import net . minecraftforge . fml . InterModComms ; 
 import net . minecraftforge . fml . ModContainer ; 
 
 + import java . util . Arrays ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Stream ; 
 
 @ @ - 42 , 7 + 43 , 7 @ @ public class ModLifecycleEvent extends Event 
 public final String description ( ) 
 { 
 String cn = getClass ( ) . getName ( ) ; 
 - return cn . substring ( cn . lastIndexOf ( ' . ' ) + 4 , cn . length ( ) - 5 ) ; 
 + return cn . substring ( cn . lastIndexOf ( ' . ' ) + 1 ) ; 
 } 
 
 public Stream < InterModComms . IMCMessage > getIMCStream ( ) { 
 @ @ - 52 , 4 + 53 , 9 @ @ public class ModLifecycleEvent extends Event 
 public Stream < InterModComms . IMCMessage > getIMCStream ( Predicate < String > methodFilter ) { 
 return InterModComms . getMessages ( this . container . getModId ( ) , methodFilter ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return description ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 index 2630fb8 . . 5439f10 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 @ @ - 98 , 11 + 98 , 11 @ @ public class FMLModContainer extends ModContainer 
 
 private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 final Event event = lifecycleEvent . getOrBuildEvent ( this ) ; 
 - LOGGER . info ( LOADING , " Firing event for modid { } : { } " , this . getModId ( ) , event . getClass ( ) . getName ( ) ) ; 
 + LOGGER . debug ( LOADING , " Firing event for modid { } : { } " , this . getModId ( ) , event ) ; 
 try 
 { 
 eventBus . post ( event ) ; 
 - LOGGER . debug ( LOADING , " Fired event for modid { } : { } " , this . getModId ( ) , event . getClass ( ) . getName ( ) ) ; 
 + LOGGER . debug ( LOADING , " Fired event for modid { } : { } " , this . getModId ( ) , event ) ; 
 } 
 catch ( Throwable e ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 9519fb3 . . 5e6a00a 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 65 , 6 + 65 , 8 @ @ import java . util . function . Consumer ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Collectors ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 + 
 / * * 
 * INTERNAL ONLY 
 * MODDERS SHOULD HAVE NO REASON TO USE THIS CLASS 
 @ @ - 809 , 9 + 811 , 9 @ @ public class GameData 
 if ( i = = keysSize - 1 ) lifecycleEventProvider . changeProgression ( LifecycleEventProvider . LifecycleEvent . Progression . NEXT ) ; 
 eventDispatcher . accept ( lifecycleEventProvider ) ; 
 reg . freeze ( ) ; 
 - LOGGER . info ( " { } Applying holder lookups " , rl . toString ( ) ) ; 
 + LOGGER . debug ( CORE , " Applying holder lookups : { } " , rl . toString ( ) ) ; 
 ObjectHolderRegistry . applyObjectHolders ( rl : : equals ) ; 
 - LOGGER . info ( " { } Holder lookups applied " , rl . toString ( ) ) ; 
 + LOGGER . debug ( CORE , " Holder lookups applied : { } " , rl . toString ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java b / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java 
 index 6cd0a74 . . 7d8c66a 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / ObjectHolderRegistry . java 
 @ @ - 45 , 6 + 45 , 8 @ @ import org . apache . logging . log4j . Logger ; 
 import org . objectweb . asm . Opcodes ; 
 import org . objectweb . asm . Type ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 + 
 / * * 
 * Internal registry for tracking { @ link ObjectHolder } references 
 * / 
 @ @ - 87 , 7 + 89 , 7 @ @ public class ObjectHolderRegistry 
 
 public static void findObjectHolders ( ) 
 { 
 - LOGGER . info ( " Processing ObjectHolder annotations " ) ; 
 + LOGGER . debug ( CORE , " Processing ObjectHolder annotations " ) ; 
 final List < ModFileScanData . AnnotationData > annotations = ModList . get ( ) . getAllScanData ( ) . stream ( ) 
 . map ( ModFileScanData : : getAnnotations ) 
 . flatMap ( Collection : : stream ) 
 diff - - git a / src / main / resources / log4j2 . xml b / src / main / resources / log4j2 . xml 
 index 1e2fe02 . . 431d9a5 100644 
 - - - a / src / main / resources / log4j2 . xml 
 + + + b / src / main / resources / log4j2 . xml 
 @ @ - 3 , 31 + 3 , 31 @ @ 
 < Appenders > 
 < Console name = " SysOut " target = " SYSTEM _ OUT " > 
 < PatternLayout > 
 - < LoggerNamePatternSelector defaultPattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " > 
 + < LoggerNamePatternSelector defaultPattern = " % highlight { [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ % c { 2 . } / % markerSimpleName ] : % msg % n } " > 
 < ! - - don ' t include the full logger name for Mojang ' s logs since they use full class names and it ' s very verbose - - > 
 - < PatternMatch key = " net . minecraft . " pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ minecraft / % logger { 1 } ] : % msg % n " / > 
 - < PatternMatch key = " com . mojang . " pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ mojang / % logger { 1 } ] : % msg % n " / > 
 + < PatternMatch key = " net . minecraft . " pattern = " % highlight { [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ minecraft / % logger { 1 } ] : % msg % n } " / > 
 + < PatternMatch key = " com . mojang . " pattern = " % highlight { [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ mojang / % logger { 1 } ] : % msg % n } " / > 
 < / LoggerNamePatternSelector > 
 < / PatternLayout > 
 < / Console > 
 < Queue name = " ServerGuiConsole " ignoreExceptions = " true " > 
 < PatternLayout > 
 - < LoggerNamePatternSelector defaultPattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " > 
 + < LoggerNamePatternSelector defaultPattern = " [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ % c { 2 . } / % markerSimpleName ] : % msg % n " > 
 < ! - - don ' t include the full logger name for Mojang ' s logs since they use full class names and it ' s very verbose - - > 
 - < PatternMatch key = " net . minecraft . " pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ minecraft / % logger { 1 } ] : % msg % n " / > 
 - < PatternMatch key = " com . mojang . " pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ mojang / % logger { 1 } ] : % msg % n " / > 
 + < PatternMatch key = " net . minecraft . " pattern = " [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ minecraft / % logger { 1 } ] : % msg % n " / > 
 + < PatternMatch key = " com . mojang . " pattern = " [ % d { HH : mm : ss . SSS } ] [ % t / % level ] [ mojang / % logger { 1 } ] : % msg % n " / > 
 < / LoggerNamePatternSelector > 
 < / PatternLayout > 
 < / Queue > 
 < RollingRandomAccessFile name = " File " fileName = " logs / latest . log " filePattern = " logs / % d { yyyy - MM - dd } - % i . log . gz " > 
 - < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " / > 
 + < PatternLayout pattern = " [ % d { ddMMMyyyy HH : mm : ss . SSS } ] [ % t / % level ] [ % logger / % markerSimpleName ] : % msg % n " / > 
 < Policies > 
 < TimeBasedTriggeringPolicy / > 
 < OnStartupTriggeringPolicy / > 
 < / Policies > 
 < / RollingRandomAccessFile > 
 < RollingRandomAccessFile name = " DebugFile " fileName = " logs / debug . log " filePattern = " logs / debug - % i . log . gz " > 
 - < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " / > 
 + < PatternLayout pattern = " [ % d { ddMMMyyyy HH : mm : ss . SSS } ] [ % t / % level ] [ % logger / % markerSimpleName ] : % msg % n " / > 
 < Policies > 
 < OnStartupTriggeringPolicy / > 
 < SizeBasedTriggeringPolicy size = " 200MB " / > 
 @ @ - 41 , 7 + 41 , 13 @ @ 
 < Logger level = " $ { sys : forge . logging . mojang . level : - info } " name = " net . minecraft " / > 
 < Root level = " all " > 
 < filters > 
 - < MarkerFilter marker = " NETWORK _ PACKETS " onMatch = " DENY " onMismatch = " NEUTRAL " / > 
 + < MarkerFilter marker = " NETWORK _ PACKETS " onMatch = " $ { sys : forge . logging . marker . networking : - DENY } " onMismatch = " NEUTRAL " / > 
 + < MarkerFilter marker = " CLASSLOADING " onMatch = " $ { sys : forge . logging . marker . classloading : - DENY } " onMismatch = " NEUTRAL " / > 
 + < MarkerFilter marker = " LAUNCHPLUGIN " onMatch = " $ { sys : forge . logging . marker . launchplugin : - DENY } " onMismatch = " NEUTRAL " / > 
 + < MarkerFilter marker = " AXFORM " onMatch = " $ { sys : forge . logging . marker . accesstransformer : - DENY } " onMismatch = " NEUTRAL " / > 
 + < MarkerFilter marker = " EVENTBUS " onMatch = " $ { sys : forge . logging . marker . eventbus : - DENY } " onMismatch = " NEUTRAL " / > 
 + < MarkerFilter marker = " DISTXFORM " onMatch = " $ { sys : forge . logging . marker . dist : - DENY } " onMismatch = " NEUTRAL " / > 
 + < MarkerFilter marker = " SCAN " onMatch = " $ { sys : forge . logging . marker . scan : - DENY } " onMismatch = " NEUTRAL " / > 
 < / filters > 
 < AppenderRef ref = " SysOut " level = " $ { sys : forge . logging . console . level : - info } " / > 
 < AppenderRef ref = " ServerGuiConsole " level = " $ { sys : forge . logging . console . level : - info } " / >

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 94ab2e7 . . ef1db7c 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { 
 into " $ buildDir / classes / java / main " 
 } 
 } 
 + / / jvmArgs = [ ' - verbose : class ' ] 
 classpath sourceSets . main . runtimeClasspath 
 main ' net . minecraftforge . fml . LaunchTesting ' 
 systemProperties target : ' fmldevclient ' 
 diff - - git a / patches / minecraft / net / minecraft / client / resources / I18n . java . patch b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch 
 new file mode 100644 
 index 0000000 . . 981b15c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - a / net / minecraft / client / resources / I18n . java 
 + + + + b / net / minecraft / client / resources / I18n . java 
 + @ @ - 9 , 6 + 9 , 7 @ @ 
 + 
 + static void setLocale ( Locale i18nLocaleIn ) { 
 + i18nLocale = i18nLocaleIn ; 
 + + net . minecraftforge . fml . ForgeI18n . loadLanguageData ( i18nLocale . properties ) ; 
 + } 
 + 
 + public static String format ( String translateKey , Object . . . parameters ) { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 index 2f24f33 . . 81f5044 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 @ @ - 88 , 8 + 88 , 6 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook 
 public static boolean fixVanillaCascading = false ; / / There are various places in vanilla that cause cascading worldgen . Enabling this WILL change where blocks are placed to prevent this . 
 / / DO NOT contact Forge about worldgen not ' matching ' vanilla if this flag is set . 
 
 - static final Logger log = LogManager . getLogger ( ForgeVersion . MOD _ ID ) ; 
 - 
 private static Configuration config ; 
 private static ForgeMod INSTANCE ; 
 public static ForgeMod getInstance ( ) 
 diff - - git a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 index f6d4a74 . . df442bb 100644 
 - - - a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 + + + b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package net . minecraftforge . common . asm ; 
 
 import java . nio . file . Path ; 
 
 + import net . minecraftforge . fml . AdvancedLogMessageAdapter ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . objectweb . asm . Opcodes ; 
 @ @ - 65 , 7 + 66 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 if ( ( classNode . access & Opcodes . ACC _ ENUM ) = = 0 ) 
 return classNode ; 
 
 - Type array = Type . getType ( " [ " + classType . getInternalName ( ) ) ; 
 + Type array = Type . getType ( " [ " + classType . getDescriptor ( ) ) ; 
 final int flags = Opcodes . ACC _ PRIVATE | Opcodes . ACC _ STATIC | Opcodes . ACC _ FINAL | Opcodes . ACC _ SYNTHETIC ; 
 
 FieldNode values = classNode . fields . stream ( ) . filter ( f - > f . desc . contentEquals ( array . getDescriptor ( ) ) & & ( ( f . access & flags ) = = flags ) ) . findFirst ( ) . orElse ( null ) ; 
 @ @ - 87 , 16 + 88 , 21 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 MethodNode ctr = classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) & & m . desc . equals ( desc ) ) . findFirst ( ) . orElse ( null ) ; 
 if ( ctr = = null ) 
 { 
 - LOGGER . error ( " Enum has create method with no matching constructor : " ) ; 
 - LOGGER . error ( " Target : " + desc ) ; 
 - classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > LOGGER . error ( " : " + m . desc ) ) ; 
 + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { 
 + sb . append ( " Enum has create method with no matching constructor : \ n " ) ; 
 + sb . append ( " Target : " ) . append ( desc ) . append ( " \ n " ) ; 
 + classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > sb . append ( " : " ) . append ( m . desc ) . append ( " \ n " ) ) ; 
 + } ) ) ; 
 throw new IllegalStateException ( " Enum has create method with no matching constructor : " + desc ) ; 
 } 
 
 if ( values = = null ) 
 { 
 - LOGGER . error ( " Enum has create method but we could not find $ VALUES : " ) ; 
 - classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . forEach ( m - > LOGGER . error ( " " + m . name + " " + m . desc ) ) ; 
 + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { 
 + sb . append ( " Enum has create method but we could not find $ VALUES . Found : \ n " ) ; 
 + classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . 
 + forEach ( m - > sb . append ( " " ) . append ( m . name ) . append ( " " ) . append ( m . desc ) . append ( " \ n " ) ) ; 
 + } ) ) ; 
 throw new IllegalStateException ( " Enum has create method but we could not find $ VALUES " ) ; 
 } 
 
 @ @ - 109 , 17 + 115 , 18 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 ins . dup ( ) ; 
 ins . load ( 0 , STRING ) ; 
 ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 + ins . arraylength ( ) ; 
 ins . iconst ( 1 ) ; 
 ins . add ( Type . INT _ TYPE ) ; 
 for ( int x = 1 ; x < args . length ; x + + ) 
 ins . load ( x , args [ x ] ) ; 
 - ins . invokespecial ( classType . getDescriptor ( ) , " < init > " , desc , false ) ; 
 + ins . invokespecial ( classType . getInternalName ( ) , " < init > " , desc , false ) ; 
 ins . store ( 1 , classType ) ; 
 / / VALUES = ArrayUtils . add ( VALUES , ret ) 
 ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 ins . load ( 1 , classType ) ; 
 - ins . invokestatic ( ARRAY _ UTILS . getDescriptor ( ) , " add " , ADD _ DESC , false ) ; 
 - ins . checkcast ( array ) ; 
 + ins . invokestatic ( ARRAY _ UTILS . getInternalName ( ) , " add " , ADD _ DESC , false ) ; 
 + ins . checkcast ( Type . getType ( values . desc ) ) ; 
 ins . putstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 / / EnumHelper . cleanEnumCache ( ThisType . class ) 
 ins . visitLdcInsn ( classType ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java 
 new file mode 100644 
 index 0000000 . . 369b4dc 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package net . minecraftforge . fml ; 
 + 
 + import org . apache . logging . log4j . message . Message ; 
 + import org . apache . logging . log4j . util . StringBuilderFormattable ; 
 + 
 + import java . util . function . Consumer ; 
 + 
 + public class AdvancedLogMessageAdapter implements Message , StringBuilderFormattable { 
 + private static final Object [ ] EMPTY = new Object [ 0 ] ; 
 + 
 + private final Consumer < StringBuilder > logMessageBuilder ; 
 + 
 + public AdvancedLogMessageAdapter ( final Consumer < StringBuilder > logMessageBuilder ) { 
 + this . logMessageBuilder = logMessageBuilder ; 
 + } 
 + 
 + @ Override 
 + public String getFormattedMessage ( ) { 
 + return " " ; 
 + } 
 + 
 + @ Override 
 + public String getFormat ( ) { 
 + return " " ; 
 + } 
 + 
 + @ Override 
 + public Object [ ] getParameters ( ) { 
 + return EMPTY ; 
 + } 
 + 
 + @ Override 
 + public Throwable getThrowable ( ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void formatTo ( final StringBuilder buffer ) { 
 + logMessageBuilder . accept ( buffer ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / BrandingControl . java b / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 index 80b6c90 . . a101900 100644 
 - - - a / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 + + + b / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 @ @ - 22 , 7 + 22 , 6 @ @ package net . minecraftforge . fml ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Lists ; 
 import net . minecraftforge . common . ForgeVersion ; 
 - import net . minecraftforge . fml . ModList ; 
 
 import java . text . MessageFormat ; 
 import java . util . Arrays ; 
 @ @ - 47 , 7 + 46 , 7 @ @ public class BrandingControl 
 brd . add ( " Forge " + ForgeVersion . getVersion ( ) ) ; 
 int tModCount = ModList . get ( ) . size ( ) ; 
 
 - brd . add ( MessageFormat . format ( " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " , tModCount ) ) ; 
 + brd . add ( MessageFormat . format ( ForgeI18n . getPattern ( " fml . menu . loadingmods " ) , tModCount ) ) ; 
 brandings = brd . build ( ) ; 
 brandingsNoMC = brandings . subList ( 1 , brandings . size ( ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 new file mode 100644 
 index 0000000 . . 1faf950 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package net . minecraftforge . fml ; 
 + 
 + import java . util . Map ; 
 + 
 + public class ForgeI18n { 
 + private static Map < String , String > i18n ; 
 + 
 + static String getPattern ( final String patternName ) { 
 + return i18n . get ( patternName ) ; 
 + } 
 + 
 + public static void loadLanguageData ( final Map < String , String > properties ) { 
 + i18n = properties ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java 
 index 1be4373 . . d66d107 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java 
 @ @ - 46 , 7 + 46 , 8 @ @ public class ResourcePackLoader 
 
 public static IResourcePack getResourcePackFor ( String modId ) 
 { 
 - return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; 
 + if ( modId = = " forge " ) return forgePack ; 
 + else return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java 
 index c708ae1 . . 23a6726 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java 
 @ @ - 30 , 7 + 30 , 7 @ @ import net . minecraftforge . fml . ModContainer ; 
 import net . minecraftforge . fml . client . IDisplayableError ; 
 import net . minecraftforge . fml . client . gui . GuiDupesFound ; 
 
 - public class DuplicateModsFoundException extends LoaderException implements IDisplayableError 
 + public class DuplicateModsFoundException extends LoaderException 
 { 
 private static final long serialVersionUID = 1L ; 
 public SetMultimap < ModContainer , File > dupes ; 
 @ @ - 38 , 22 + 38 , 4 @ @ public class DuplicateModsFoundException extends LoaderException implements IDis 
 public DuplicateModsFoundException ( SetMultimap < ModContainer , File > dupes ) { 
 this . dupes = dupes ; 
 } 
 - 
 - @ Override 
 - protected void printStackTrace ( WrappedPrintStream stream ) 
 - { 
 - stream . println ( " Duplicate Mods : " ) ; 
 - for ( Entry < ModContainer , File > e : dupes . entries ( ) ) 
 - { 
 - stream . println ( String . format ( " \ t % s : % s " , e . getKey ( ) . getModId ( ) , e . getValue ( ) . getAbsolutePath ( ) ) ) ; 
 - } 
 - stream . println ( " " ) ; 
 - } 
 - 
 - @ Override 
 - @ OnlyIn ( Dist . CLIENT ) 
 - public GuiScreen createGui ( ) 
 - { 
 - return new GuiDupesFound ( this ) ; 
 - } 
 } 
 diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json 
 new file mode 100644 
 index 0000000 . . 74fd746 
 - - - / dev / null 
 + + + b / src / main / resources / assets / forge / lang / en _ us . json 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + { 
 + " fml . menu . mods " : " Mods " , 
 + " fml . menu . mods . normal " : " Off " , 
 + " fml . menu . mods . search " : " Search " , 
 + " fml . menu . mods . a _ to _ z " : " A - Z " , 
 + " fml . menu . mods . z _ to _ a " : " Z - A " , 
 + " fml . menu . mods . config " : " Config " , 
 + " fml . menu . modoptions " : " Mod Options . . . " , 
 + " fml . menu . loadingmods " : " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " 
 + }
