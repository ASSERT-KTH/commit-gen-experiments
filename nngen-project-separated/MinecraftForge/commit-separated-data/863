BLEU SCORE: 0.009080424707719657

TEST MSG: Fix shouldRefresh not to be so over - eager about modded TEs . Should fix Packet21 causing a TE reset .
GENERATED MSG: Simple block recolouring API : closes # 525

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch b / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch <nl> index 8f49c7b . . 5955478 100644 <nl> - - - a / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch <nl> + + + b / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch <nl> @ @ - 93 , 18 + 93 , 18 @ @ <nl> + <nl> + private boolean isVanilla = getClass ( ) . getName ( ) . startsWith ( " net . minecraft . " ) ; <nl> + / * * <nl> - + * Called from Chunk . setBlockIDWithMetadata , determines if this tile entity should be re - created when the ID , or Metadata changes . <nl> + + * Called from Chunk . setBlockIDWithMetadata and Chunk . fillChunk , determines if this tile entity should be re - created when the ID , or Metadata changes . <nl> + * Use with caution as this will leave straggler TileEntities , or create conflicts with other TileEntities if not used properly . <nl> + * <nl> + * @ param world Current world <nl> + * @ param pos Tile ' s world position <nl> - + * @ param oldID The old ID of the block <nl> - + * @ param newID The new ID of the block ( May be the same ) <nl> - + * @ return True to remove the old tile entity , false to keep it in tact { and create a new one if the new values specify to } <nl> + + * @ param oldState The old ID of the block <nl> + + * @ param newState The new ID of the block ( May be the same ) <nl> + + * @ return true forcing the invalidation of the existing TE , false not to invalidate the existing TE <nl> + * / <nl> + public boolean shouldRefresh ( World world , BlockPos pos , IBlockState oldState , IBlockState newSate ) <nl> + { <nl> - + return ! isVanilla | | ( oldState . func _ 177230 _ c ( ) ! = newSate . func _ 177230 _ c ( ) ) ; <nl> + + return isVanilla ? ( oldState . func _ 177230 _ c ( ) ! = newSate . func _ 177230 _ c ( ) ) : oldState ! = newSate ; <nl> + } <nl> + <nl> + public boolean shouldRenderInPass ( int pass )
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index c040c5f . . 92d5862 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 155 , 7 + 155 , 7 @ @ <nl> } <nl> <nl> / * * <nl> - @ @ - 1439 , 4 + 1459 , 917 @ @ <nl> + @ @ - 1439 , 4 + 1459 , 944 @ @ <nl> canBlockGrass [ 0 ] = true ; <nl> StatList . initBreakableStats ( ) ; <nl> } <nl> @ @ - 1027 , 7 + 1027 , 10 @ @ <nl> + } <nl> + <nl> + / * * <nl> - + * Rotate the block around the specified axis by one rotation <nl> + + * Rotate the block . For vanilla blocks this rotates around the axis passed in ( generally , it should be the " face " that was hit ) . <nl> + + * Note : for mod blocks , this is up to the block and modder to decide . It is not mandated that it be a rotation around the <nl> + + * face , but could be a rotation to orient * to * that face , or a visiting of possible rotations . <nl> + + * The method should return true if the rotation was successful though . <nl> + * <nl> + * @ param worldObj The world <nl> + * @ param x X position <nl> @ @ - 1043 , 6 + 1046 , 7 @ @ <nl> + <nl> + / * * <nl> + * Get the rotations that can apply to the block at the specified coordinates . Null means no rotations are possible . <nl> + + * Note , this is up to the block to decide . It may not be accurate or representative . <nl> + * @ param worldObj The world <nl> + * @ param x X position <nl> + * @ param y Y position <nl> @ @ - 1072 , 4 + 1076 , 27 @ @ <nl> + { <nl> + return blockID = = bookShelf . blockID ? 1 : 0 ; <nl> + } <nl> + + / * * <nl> + + * Common way to recolour a block with an external tool <nl> + + * @ param world The world <nl> + + * @ param x X <nl> + + * @ param y Y <nl> + + * @ param z Z <nl> + + * @ param side The side hit with the colouring tool <nl> + + * @ param colour The colour to change to <nl> + + * @ return If the recolouring was successful <nl> + + * / <nl> + + public boolean recolourBlock ( World world , int x , int y , int z , ForgeDirection side , int colour ) <nl> + + { <nl> + + if ( blockID = = cloth . blockID ) <nl> + + { <nl> + + int meta = world . getBlockMetadata ( x , y , z ) ; <nl> + + if ( meta ! = colour ) <nl> + + { <nl> + + world . setBlockMetadataWithNotify ( x , y , z , colour , 3 ) ; <nl> + + return true ; <nl> + + } <nl> + + } <nl> + + return false ; <nl> + + } <nl> }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch b / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch 
 index 8f49c7b . . 5955478 100644 
 - - - a / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch 
 + + + b / patches / minecraft / net / minecraft / tileentity / TileEntity . java . patch 
 @ @ - 93 , 18 + 93 , 18 @ @ 
 + 
 + private boolean isVanilla = getClass ( ) . getName ( ) . startsWith ( " net . minecraft . " ) ; 
 + / * * 
 - + * Called from Chunk . setBlockIDWithMetadata , determines if this tile entity should be re - created when the ID , or Metadata changes . 
 + + * Called from Chunk . setBlockIDWithMetadata and Chunk . fillChunk , determines if this tile entity should be re - created when the ID , or Metadata changes . 
 + * Use with caution as this will leave straggler TileEntities , or create conflicts with other TileEntities if not used properly . 
 + * 
 + * @ param world Current world 
 + * @ param pos Tile ' s world position 
 - + * @ param oldID The old ID of the block 
 - + * @ param newID The new ID of the block ( May be the same ) 
 - + * @ return True to remove the old tile entity , false to keep it in tact { and create a new one if the new values specify to } 
 + + * @ param oldState The old ID of the block 
 + + * @ param newState The new ID of the block ( May be the same ) 
 + + * @ return true forcing the invalidation of the existing TE , false not to invalidate the existing TE 
 + * / 
 + public boolean shouldRefresh ( World world , BlockPos pos , IBlockState oldState , IBlockState newSate ) 
 + { 
 - + return ! isVanilla | | ( oldState . func _ 177230 _ c ( ) ! = newSate . func _ 177230 _ c ( ) ) ; 
 + + return isVanilla ? ( oldState . func _ 177230 _ c ( ) ! = newSate . func _ 177230 _ c ( ) ) : oldState ! = newSate ; 
 + } 
 + 
 + public boolean shouldRenderInPass ( int pass )

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch 
 index c040c5f . . 92d5862 100644 
 - - - a / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 155 , 7 + 155 , 7 @ @ 
 } 
 
 / * * 
 - @ @ - 1439 , 4 + 1459 , 917 @ @ 
 + @ @ - 1439 , 4 + 1459 , 944 @ @ 
 canBlockGrass [ 0 ] = true ; 
 StatList . initBreakableStats ( ) ; 
 } 
 @ @ - 1027 , 7 + 1027 , 10 @ @ 
 + } 
 + 
 + / * * 
 - + * Rotate the block around the specified axis by one rotation 
 + + * Rotate the block . For vanilla blocks this rotates around the axis passed in ( generally , it should be the " face " that was hit ) . 
 + + * Note : for mod blocks , this is up to the block and modder to decide . It is not mandated that it be a rotation around the 
 + + * face , but could be a rotation to orient * to * that face , or a visiting of possible rotations . 
 + + * The method should return true if the rotation was successful though . 
 + * 
 + * @ param worldObj The world 
 + * @ param x X position 
 @ @ - 1043 , 6 + 1046 , 7 @ @ 
 + 
 + / * * 
 + * Get the rotations that can apply to the block at the specified coordinates . Null means no rotations are possible . 
 + + * Note , this is up to the block to decide . It may not be accurate or representative . 
 + * @ param worldObj The world 
 + * @ param x X position 
 + * @ param y Y position 
 @ @ - 1072 , 4 + 1076 , 27 @ @ 
 + { 
 + return blockID = = bookShelf . blockID ? 1 : 0 ; 
 + } 
 + + / * * 
 + + * Common way to recolour a block with an external tool 
 + + * @ param world The world 
 + + * @ param x X 
 + + * @ param y Y 
 + + * @ param z Z 
 + + * @ param side The side hit with the colouring tool 
 + + * @ param colour The colour to change to 
 + + * @ return If the recolouring was successful 
 + + * / 
 + + public boolean recolourBlock ( World world , int x , int y , int z , ForgeDirection side , int colour ) 
 + + { 
 + + if ( blockID = = cloth . blockID ) 
 + + { 
 + + int meta = world . getBlockMetadata ( x , y , z ) ; 
 + + if ( meta ! = colour ) 
 + + { 
 + + world . setBlockMetadataWithNotify ( x , y , z , colour , 3 ) ; 
 + + return true ; 
 + + } 
 + + } 
 + + return false ; 
 + + } 
 }
