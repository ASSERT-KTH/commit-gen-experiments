BLEU SCORE: 0.0015423051256435356

TEST MSG: Fixed new ICrashReportDetail loader working with packaged mods by delaying it until the ModContainer ' s construct event . Closes # 2924
GENERATED MSG: Add a version check mechanic to startup , it is done in a seperate thread and has a config option to compleetly disable it . This allows us to notify users of new recomended builds . Hopefully stemming the flow of outdated help request . Also adds a warning to the main screen if you are running a ' Beta ' Forge . Which means a Forge for a new version of Minecraft that we have not promoted a recomended build for yet .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 6ec37cd . . 1c3aa8f 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 14 , 10 + 14 , 17 @ @ import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> import java . util . Date ; <nl> + import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> + import net . minecraft . crash . CrashReport ; <nl> + import net . minecraft . crash . ICrashReportDetail ; <nl> import net . minecraft . nbt . NBTBase ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . stats . StatList ; <nl> @ @ - 37 , 6 + 44 , 7 @ @ import net . minecraftforge . oredict . RecipeSorter ; <nl> import net . minecraftforge . server . command . ForgeCommand ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . Lists ; <nl> import com . google . common . eventbus . EventBus ; <nl> import com . google . common . eventbus . Subscribe ; <nl> <nl> @ @ - 45 , 10 + 53 , 13 @ @ import net . minecraftforge . fml . client . FMLFolderResourcePack ; <nl> import net . minecraftforge . fml . client . event . ConfigChangedEvent . OnConfigChangedEvent ; <nl> import net . minecraftforge . fml . common . DummyModContainer ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . ICrashCallable ; <nl> import net . minecraftforge . fml . common . LoadController ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModMetadata ; <nl> import net . minecraftforge . fml . common . WorldAccessContainer ; <nl> + import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> + import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; <nl> import net . minecraftforge . fml . common . event . FMLConstructionEvent ; <nl> import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; <nl> import net . minecraftforge . fml . common . event . FMLModIdMappingEvent ; <nl> @ @ - 323 , 6 + 334 , 36 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> @ Subscribe <nl> public void modConstruction ( FMLConstructionEvent evt ) <nl> { <nl> + List < String > all = Lists . newArrayList ( ) ; <nl> + for ( ASMData asm : evt . getASMHarvestedData ( ) . getAll ( ICrashReportDetail . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) <nl> + all . add ( asm . getClassName ( ) ) ; <nl> + for ( ASMData asm : evt . getASMHarvestedData ( ) . getAll ( ICrashCallable . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) <nl> + all . add ( asm . getClassName ( ) ) ; <nl> + <nl> + Iterator < String > itr = all . iterator ( ) ; <nl> + while ( itr . hasNext ( ) ) <nl> + { <nl> + String cls = itr . next ( ) ; <nl> + if ( ! cls . startsWith ( " net / minecraft / " ) & & <nl> + ! cls . startsWith ( " net / minecraftforge / " ) ) <nl> + itr . remove ( ) ; <nl> + } <nl> + <nl> + FMLLog . log ( " Forge " , Level . DEBUG , " Preloading CrashReport Classes " ) ; <nl> + Collections . sort ( all ) ; / / Sort it because I like pretty output ; ) <nl> + for ( String name : all ) <nl> + { <nl> + FMLLog . log ( " Forge " , Level . DEBUG , " \ t " + name ) ; <nl> + try <nl> + { <nl> + Class . forName ( name . replace ( ' / ' , ' . ' ) , false , MinecraftForge . class . getClassLoader ( ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + <nl> NetworkRegistry . INSTANCE . register ( this , this . getClass ( ) , " * " , evt . getASMHarvestedData ( ) ) ; <nl> ForgeNetworkHandler . registerChannel ( this , evt . getSide ( ) ) ; <nl> } <nl> @ @ - 352 , 12 + 393 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> } <nl> <nl> @ Subscribe <nl> - public void mappingChange ( FMLModIdMappingEvent evt ) <nl> - { <nl> - StatList . reinit ( ) ; <nl> - } <nl> - <nl> - @ Subscribe <nl> public void postInit ( FMLPostInitializationEvent evt ) <nl> { <nl> BiomeDictionary . registerAllBiomesAndGenerateEvents ( ) ; <nl> @ @ - 400 , 6 + 435 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public void mappingChanged ( FMLModIdMappingEvent evt ) <nl> { <nl> OreDictionary . rebakeMap ( ) ; <nl> + StatList . reinit ( ) ; <nl> } <nl> <nl> <nl> @ @ - 469 , 4 + 505 , 5 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> { <nl> return updateJSONUrl ; <nl> } <nl> + <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> index a7cc2cc . . edaa4fb 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> @ @ - 1 , 8 + 1 , 22 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . ICrashCallable ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> + import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; <nl> import net . minecraftforge . fml . common . eventhandler . EventBus ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + import java . util . Set ; <nl> + <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + <nl> + import net . minecraft . crash . CrashReport ; <nl> + import net . minecraft . crash . ICrashReportDetail ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraftforge . common . ForgeHooks . SeedEntry ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> @ @ - 56 , 5 + 70 , 41 @ @ public class MinecraftForge <nl> / / Load before all the mods , so MC owns the MC fluids <nl> FluidRegistry . validateFluidRegistry ( ) ; <nl> ForgeHooks . initTools ( ) ; <nl> + <nl> + / / For all the normal CrashReport classes to be defined . We ' re in MC ' s classloader so this should all be fine <nl> + new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; <nl> + } <nl> + <nl> + <nl> + <nl> + <nl> + public static void preloadCrashClasses ( ASMDataTable table , String modID , Set < String > classes ) <nl> + { <nl> + / / Find all ICrashReportDetail ' s handlers and preload them . <nl> + List < String > all = Lists . newArrayList ( ) ; <nl> + for ( ASMData asm : table . getAll ( ICrashReportDetail . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) <nl> + all . add ( asm . getClassName ( ) ) ; <nl> + for ( ASMData asm : table . getAll ( ICrashCallable . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) <nl> + all . add ( asm . getClassName ( ) ) ; <nl> + <nl> + all . retainAll ( classes ) ; <nl> + <nl> + if ( all . size ( ) = = 0 ) <nl> + return ; <nl> + <nl> + FMLLog . log ( modID , Level . DEBUG , " Preloading CrashReport Classes " ) ; <nl> + Collections . sort ( all ) ; / / Sort it because I like pretty output ; ) <nl> + for ( String name : all ) <nl> + { <nl> + FMLLog . log ( modID , Level . DEBUG , " \ t " + name ) ; <nl> + try <nl> + { <nl> + Class . forName ( name . replace ( ' / ' , ' . ' ) , false , MinecraftForge . class . getClassLoader ( ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 8cc40bf . . 811b82d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fml . common . Mod . Instance ; <nl> import net . minecraftforge . fml . common . Mod . Metadata ; <nl> import net . minecraftforge . fml . common . asm . transformers . BlamingTransformer ; <nl> @ @ - 466 , 6 + 467 , 10 @ @ public class FMLModContainer implements ModContainer <nl> ModClassLoader modClassLoader = event . getModClassLoader ( ) ; <nl> modClassLoader . addFile ( source ) ; <nl> modClassLoader . clearNegativeCacheFor ( candidate . getClassList ( ) ) ; <nl> + <nl> + / / Only place I could think to add this . . . <nl> + MinecraftForge . preloadCrashClasses ( event . getASMHarvestedData ( ) , getModId ( ) , candidate . getClassList ( ) ) ; <nl> + <nl> Class < ? > clazz = Class . forName ( className , true , modClassLoader ) ; <nl> <nl> Certificate [ ] certificates = clazz . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 50f348e . . a7be45d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 521 , 7 + 521 , 6 @ @ public class Loader <nl> } <nl> } <nl> } <nl> - preloadCrashClasses ( ) ; <nl> modController . transition ( LoaderState . CONSTRUCTING , false ) ; <nl> modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , discoverer . getASMTable ( ) , reverseDependencies ) ; <nl> <nl> @ @ - 1118 , 33 + 1117 , 4 @ @ public class Loader <nl> { <nl> return modController ! = null ? modController . getState ( ) : LoaderState . NOINIT ; <nl> } <nl> - <nl> - <nl> - private void preloadCrashClasses ( ) <nl> - { <nl> - / / For all the normal CrashReport classes to be defined . We ' re in MC ' s classloader so this should all be fine <nl> - new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; <nl> - <nl> - FMLLog . log ( Level . DEBUG , " Preloading CrashReport Classes " ) ; <nl> - / / Find all ICrashReportDetail ' s handlers and preload them . <nl> - List < String > classes = Lists . newArrayList ( ) ; <nl> - for ( ASMData asm : discoverer . getASMTable ( ) . getAll ( ICrashReportDetail . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) <nl> - { <nl> - classes . add ( asm . getClassName ( ) ) ; <nl> - } <nl> - for ( ASMData asm : discoverer . getASMTable ( ) . getAll ( ICrashCallable . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) <nl> - { <nl> - classes . add ( asm . getClassName ( ) ) ; <nl> - } <nl> - Collections . sort ( classes ) ; / / Sort it because I like pretty output ; ) <nl> - for ( String name : classes ) <nl> - { <nl> - FMLLog . log ( Level . DEBUG , " \ t " + name ) ; <nl> - try <nl> - { <nl> - Class < ? > cls = Class . forName ( name , false , getClass ( ) . getClassLoader ( ) ) ; <nl> - } <nl> - catch ( Exception e ) { } <nl> - } <nl> - } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java <nl> index 2ed403c . . ef3bbcb 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java <nl> @ @ - 86 , 7 + 86 , 7 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer <nl> if ( file . isDirectory ( ) ) <nl> { <nl> FMLLog . finer ( " Recursing into package % s " , path + file . getName ( ) ) ; <nl> - exploreFileSystem ( path + file . getName ( ) + " . " , file , harvestedMods , candidate , mc ) ; <nl> + exploreFileSystem ( path + file . getName ( ) + " / " , file , harvestedMods , candidate , mc ) ; <nl> continue ; <nl> } <nl> Matcher match = classFile . matcher ( file . getName ( ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> index 00a74f9 . . f0bdd5e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> @ @ - 154 , 7 + 154 , 7 @ @ public class ASMModParser <nl> <nl> for ( String intf : interfaces ) <nl> { <nl> - table . addASMData ( candidate , intf , this . asmType . getClassName ( ) , null , null ) ; <nl> + table . addASMData ( candidate , intf , this . asmType . getInternalName ( ) , null , null ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 5cd478c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + @ @ - 30 , 6 + 30 , 7 @ @ <nl> + import net . minecraft . world . demo . DemoWorldServer ; <nl> + import net . minecraft . world . storage . ISaveFormat ; <nl> + import net . minecraft . world . storage . WorldInfo ; <nl> + + import net . minecraftforge . client . ForgeHooksClient ; <nl> + import org . apache . commons . io . Charsets ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + @ @ - 630 , 6 + 631 , 7 @ @ <nl> + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; <nl> + } <nl> + } <nl> + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; <nl> + String s1 = " Copyright Mojang AB . Do not distribute ! " ; <nl> + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 10266a2 . . 4ec67c7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 1 , 6 + 1 , 12 @ @ <nl> package net . minecraftforge . client ; <nl> <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> + import java . net . URLConnection ; <nl> import java . util . HashMap ; <nl> + import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . TreeSet ; <nl> <nl> @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; <nl> <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> import net . minecraft . client . entity . EntityPlayerSP ; <nl> + import net . minecraft . client . gui . FontRenderer ; <nl> + import net . minecraft . client . gui . GuiMainMenu ; <nl> import net . minecraftforge . client . event . FOVUpdateEvent ; <nl> <nl> import org . lwjgl . LWJGLException ; <nl> @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; <nl> import org . lwjgl . opengl . GL12 ; <nl> import org . lwjgl . opengl . PixelFormat ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + import com . google . gson . JsonParseException ; <nl> + <nl> import cpw . mods . fml . client . FMLClientHandler ; <nl> import cpw . mods . fml . client . registry . RenderingRegistry ; <nl> + import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockLiquid ; <nl> @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . ChatComponentTranslation ; <nl> + import net . minecraft . util . EnumChatFormatting ; <nl> import net . minecraft . util . MathHelper ; <nl> import net . minecraft . util . MovingObjectPosition ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fluids . RenderBlockFluid ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> public class ForgeHooksClient <nl> { <nl> @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient <nl> / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; <nl> / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; <nl> } <nl> + <nl> + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) <nl> + { <nl> + Status status = ForgeVersion . getStatus ( ) ; <nl> + if ( status = = BETA | | status = = BETA _ OUTDATED ) <nl> + { <nl> + / / render a warning at the top of the screen , <nl> + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + line = " Major issues may arise , verify before reporting . " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + <nl> + String line = null ; <nl> + switch ( status ) <nl> + { <nl> + / / case FAILED : line = " Version check failed " ; break ; <nl> + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; <nl> + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; <nl> + case OUTDATED : <nl> + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; <nl> + default : break ; <nl> + } <nl> + <nl> + if ( line ! = null ) <nl> + { <nl> + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line <nl> + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> index d18f81a . . 86de438 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame <nl> private ScaledResolution res = null ; <nl> private FontRenderer fontrenderer = null ; <nl> private RenderGameOverlayEvent eventParent ; <nl> - private static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; <nl> <nl> public GuiIngameForge ( Minecraft mc ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 145a3c5 . . 9ca5fab 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; <nl> <nl> public class ForgeHooks <nl> { <nl> - static class GrassEntry extends WeightedRandom . Item <nl> - { <nl> - public final Block block ; <nl> - public final int metadata ; <nl> - public GrassEntry ( Block block , int meta , int weight ) <nl> - { <nl> - super ( weight ) ; <nl> - this . block = block ; <nl> - this . metadata = meta ; <nl> - } <nl> - } <nl> - <nl> static class SeedEntry extends WeightedRandom . Item <nl> { <nl> public final ItemStack seed ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 4072090 . . d54730a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static double zombieSummonBaseChance = 0 . 1 ; <nl> public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; <nl> public static float zombieBabyChance = 0 . 05f ; <nl> - public static boolean shouldSortRecipies = false ; <nl> + public static boolean shouldSortRecipies = true ; <nl> + public static boolean disableVersionCheck = false ; <nl> <nl> public ForgeModContainer ( ) <nl> { <nl> @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; <nl> shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; <nl> <nl> + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; <nl> + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; <nl> + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; <nl> + <nl> if ( config . hasChanged ( ) ) <nl> { <nl> config . save ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 3dfe78e . . 0d4d751 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 4 , 6 + 4 , 17 @ @ <nl> * / <nl> <nl> package net . minecraftforge . common ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> + <nl> + import java . io . InputStream ; <nl> + import java . net . URL ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> <nl> public class ForgeVersion <nl> { <nl> @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion <nl> / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> public static final int buildVersion = 0 ; <nl> <nl> + private static Status status = PENDING ; <nl> + private static String target = null ; <nl> + <nl> public static int getMajorVersion ( ) <nl> { <nl> return majorVersion ; <nl> @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion <nl> return buildVersion ; <nl> } <nl> <nl> + public static Status getStatus ( ) <nl> + { <nl> + return status ; <nl> + } <nl> + <nl> + public static String getTarget ( ) <nl> + { <nl> + return target ; <nl> + } <nl> + <nl> public static String getVersion ( ) <nl> { <nl> return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> } <nl> + <nl> + public static enum Status <nl> + { <nl> + PENDING , <nl> + FAILED , <nl> + UP _ TO _ DATE , <nl> + OUTDATED , <nl> + AHEAD , <nl> + BETA , <nl> + BETA _ OUTDATED <nl> + } <nl> + <nl> + public static void startVersionCheck ( ) <nl> + { <nl> + new Thread ( " Forge Version Check " ) <nl> + { <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + try <nl> + { <nl> + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + InputStream con = url . openStream ( ) ; <nl> + String data = new String ( ByteStreams . toByteArray ( con ) ) ; <nl> + con . close ( ) ; <nl> + <nl> + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; <nl> + String homepage = ( String ) json . get ( " homepage " ) ; <nl> + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; <nl> + <nl> + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; <nl> + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; <nl> + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; <nl> + <nl> + if ( rec ! = null ) <nl> + { <nl> + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; <nl> + int diff = recommended . compareTo ( current ) ; <nl> + <nl> + if ( diff = = 0 ) <nl> + status = UP _ TO _ DATE ; <nl> + else if ( diff < 0 ) <nl> + { <nl> + status = AHEAD ; <nl> + if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + } <nl> + } <nl> + else <nl> + { <nl> + status = OUTDATED ; <nl> + target = rec ; <nl> + } <nl> + } <nl> + else if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = BETA _ OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + status = FAILED ; <nl> + } <nl> + } <nl> + } . start ( ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> index bb4a94e . . 3a98b16 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . entity . monster . EntityEnderman ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraftforge . common . ForgeHooks . GrassEntry ; <nl> import net . minecraftforge . common . ForgeHooks . SeedEntry ; <nl> import net . minecraftforge . event . entity . EntityEvent ; <nl> import net . minecraftforge . oredict . OreDictionary ; <nl> @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge <nl> public static final EventBus EVENT _ BUS = new EventBus ( ) ; <nl> public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; <nl> public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; <nl> + public static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> <nl> private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; <nl> <nl> @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge <nl> EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; <nl> OreDictionary . getOreName ( 0 ) ; <nl> <nl> + if ( ! ForgeModContainer . disableVersionCheck ) <nl> + { <nl> + ForgeVersion . startVersionCheck ( ) ; <nl> + } <nl> + <nl> / / Force these classes to be defined , Should prevent derp error hiding . <nl> new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 6ec37cd . . 1c3aa8f 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 14 , 10 + 14 , 17 @ @ import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 + import java . util . Collections ; 
 import java . util . Date ; 
 + import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Set ; 
 
 + import org . apache . logging . log4j . Level ; 
 + 
 + import net . minecraft . crash . CrashReport ; 
 + import net . minecraft . crash . ICrashReportDetail ; 
 import net . minecraft . nbt . NBTBase ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . stats . StatList ; 
 @ @ - 37 , 6 + 44 , 7 @ @ import net . minecraftforge . oredict . RecipeSorter ; 
 import net . minecraftforge . server . command . ForgeCommand ; 
 
 import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . Lists ; 
 import com . google . common . eventbus . EventBus ; 
 import com . google . common . eventbus . Subscribe ; 
 
 @ @ - 45 , 10 + 53 , 13 @ @ import net . minecraftforge . fml . client . FMLFolderResourcePack ; 
 import net . minecraftforge . fml . client . event . ConfigChangedEvent . OnConfigChangedEvent ; 
 import net . minecraftforge . fml . common . DummyModContainer ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . ICrashCallable ; 
 import net . minecraftforge . fml . common . LoadController ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModMetadata ; 
 import net . minecraftforge . fml . common . WorldAccessContainer ; 
 + import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 + import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; 
 import net . minecraftforge . fml . common . event . FMLConstructionEvent ; 
 import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; 
 import net . minecraftforge . fml . common . event . FMLModIdMappingEvent ; 
 @ @ - 323 , 6 + 334 , 36 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 @ Subscribe 
 public void modConstruction ( FMLConstructionEvent evt ) 
 { 
 + List < String > all = Lists . newArrayList ( ) ; 
 + for ( ASMData asm : evt . getASMHarvestedData ( ) . getAll ( ICrashReportDetail . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) 
 + all . add ( asm . getClassName ( ) ) ; 
 + for ( ASMData asm : evt . getASMHarvestedData ( ) . getAll ( ICrashCallable . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) 
 + all . add ( asm . getClassName ( ) ) ; 
 + 
 + Iterator < String > itr = all . iterator ( ) ; 
 + while ( itr . hasNext ( ) ) 
 + { 
 + String cls = itr . next ( ) ; 
 + if ( ! cls . startsWith ( " net / minecraft / " ) & & 
 + ! cls . startsWith ( " net / minecraftforge / " ) ) 
 + itr . remove ( ) ; 
 + } 
 + 
 + FMLLog . log ( " Forge " , Level . DEBUG , " Preloading CrashReport Classes " ) ; 
 + Collections . sort ( all ) ; / / Sort it because I like pretty output ; ) 
 + for ( String name : all ) 
 + { 
 + FMLLog . log ( " Forge " , Level . DEBUG , " \ t " + name ) ; 
 + try 
 + { 
 + Class . forName ( name . replace ( ' / ' , ' . ' ) , false , MinecraftForge . class . getClassLoader ( ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 NetworkRegistry . INSTANCE . register ( this , this . getClass ( ) , " * " , evt . getASMHarvestedData ( ) ) ; 
 ForgeNetworkHandler . registerChannel ( this , evt . getSide ( ) ) ; 
 } 
 @ @ - 352 , 12 + 393 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 } 
 
 @ Subscribe 
 - public void mappingChange ( FMLModIdMappingEvent evt ) 
 - { 
 - StatList . reinit ( ) ; 
 - } 
 - 
 - @ Subscribe 
 public void postInit ( FMLPostInitializationEvent evt ) 
 { 
 BiomeDictionary . registerAllBiomesAndGenerateEvents ( ) ; 
 @ @ - 400 , 6 + 435 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public void mappingChanged ( FMLModIdMappingEvent evt ) 
 { 
 OreDictionary . rebakeMap ( ) ; 
 + StatList . reinit ( ) ; 
 } 
 
 
 @ @ - 469 , 4 + 505 , 5 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 { 
 return updateJSONUrl ; 
 } 
 + 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 index a7cc2cc . . edaa4fb 100644 
 - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 @ @ - 1 , 8 + 1 , 22 @ @ 
 package net . minecraftforge . common ; 
 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . ICrashCallable ; 
 import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 + import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; 
 import net . minecraftforge . fml . common . eventhandler . EventBus ; 
 + 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + import java . util . Set ; 
 + 
 + import org . apache . logging . log4j . Level ; 
 + 
 + import com . google . common . collect . Lists ; 
 + 
 + import net . minecraft . crash . CrashReport ; 
 + import net . minecraft . crash . ICrashReportDetail ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraftforge . common . ForgeHooks . SeedEntry ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 @ @ - 56 , 5 + 70 , 41 @ @ public class MinecraftForge 
 / / Load before all the mods , so MC owns the MC fluids 
 FluidRegistry . validateFluidRegistry ( ) ; 
 ForgeHooks . initTools ( ) ; 
 + 
 + / / For all the normal CrashReport classes to be defined . We ' re in MC ' s classloader so this should all be fine 
 + new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; 
 + } 
 + 
 + 
 + 
 + 
 + public static void preloadCrashClasses ( ASMDataTable table , String modID , Set < String > classes ) 
 + { 
 + / / Find all ICrashReportDetail ' s handlers and preload them . 
 + List < String > all = Lists . newArrayList ( ) ; 
 + for ( ASMData asm : table . getAll ( ICrashReportDetail . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) 
 + all . add ( asm . getClassName ( ) ) ; 
 + for ( ASMData asm : table . getAll ( ICrashCallable . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) 
 + all . add ( asm . getClassName ( ) ) ; 
 + 
 + all . retainAll ( classes ) ; 
 + 
 + if ( all . size ( ) = = 0 ) 
 + return ; 
 + 
 + FMLLog . log ( modID , Level . DEBUG , " Preloading CrashReport Classes " ) ; 
 + Collections . sort ( all ) ; / / Sort it because I like pretty output ; ) 
 + for ( String name : all ) 
 + { 
 + FMLLog . log ( modID , Level . DEBUG , " \ t " + name ) ; 
 + try 
 + { 
 + Class . forName ( name . replace ( ' / ' , ' . ' ) , false , MinecraftForge . class . getClassLoader ( ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 8cc40bf . . 811b82d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 
 + import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fml . common . Mod . Instance ; 
 import net . minecraftforge . fml . common . Mod . Metadata ; 
 import net . minecraftforge . fml . common . asm . transformers . BlamingTransformer ; 
 @ @ - 466 , 6 + 467 , 10 @ @ public class FMLModContainer implements ModContainer 
 ModClassLoader modClassLoader = event . getModClassLoader ( ) ; 
 modClassLoader . addFile ( source ) ; 
 modClassLoader . clearNegativeCacheFor ( candidate . getClassList ( ) ) ; 
 + 
 + / / Only place I could think to add this . . . 
 + MinecraftForge . preloadCrashClasses ( event . getASMHarvestedData ( ) , getModId ( ) , candidate . getClassList ( ) ) ; 
 + 
 Class < ? > clazz = Class . forName ( className , true , modClassLoader ) ; 
 
 Certificate [ ] certificates = clazz . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 50f348e . . a7be45d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 521 , 7 + 521 , 6 @ @ public class Loader 
 } 
 } 
 } 
 - preloadCrashClasses ( ) ; 
 modController . transition ( LoaderState . CONSTRUCTING , false ) ; 
 modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , discoverer . getASMTable ( ) , reverseDependencies ) ; 
 
 @ @ - 1118 , 33 + 1117 , 4 @ @ public class Loader 
 { 
 return modController ! = null ? modController . getState ( ) : LoaderState . NOINIT ; 
 } 
 - 
 - 
 - private void preloadCrashClasses ( ) 
 - { 
 - / / For all the normal CrashReport classes to be defined . We ' re in MC ' s classloader so this should all be fine 
 - new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; 
 - 
 - FMLLog . log ( Level . DEBUG , " Preloading CrashReport Classes " ) ; 
 - / / Find all ICrashReportDetail ' s handlers and preload them . 
 - List < String > classes = Lists . newArrayList ( ) ; 
 - for ( ASMData asm : discoverer . getASMTable ( ) . getAll ( ICrashReportDetail . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) 
 - { 
 - classes . add ( asm . getClassName ( ) ) ; 
 - } 
 - for ( ASMData asm : discoverer . getASMTable ( ) . getAll ( ICrashCallable . class . getName ( ) . replace ( ' . ' , ' / ' ) ) ) 
 - { 
 - classes . add ( asm . getClassName ( ) ) ; 
 - } 
 - Collections . sort ( classes ) ; / / Sort it because I like pretty output ; ) 
 - for ( String name : classes ) 
 - { 
 - FMLLog . log ( Level . DEBUG , " \ t " + name ) ; 
 - try 
 - { 
 - Class < ? > cls = Class . forName ( name , false , getClass ( ) . getClassLoader ( ) ) ; 
 - } 
 - catch ( Exception e ) { } 
 - } 
 - } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java 
 index 2ed403c . . ef3bbcb 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java 
 @ @ - 86 , 7 + 86 , 7 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer 
 if ( file . isDirectory ( ) ) 
 { 
 FMLLog . finer ( " Recursing into package % s " , path + file . getName ( ) ) ; 
 - exploreFileSystem ( path + file . getName ( ) + " . " , file , harvestedMods , candidate , mc ) ; 
 + exploreFileSystem ( path + file . getName ( ) + " / " , file , harvestedMods , candidate , mc ) ; 
 continue ; 
 } 
 Matcher match = classFile . matcher ( file . getName ( ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 index 00a74f9 . . f0bdd5e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 @ @ - 154 , 7 + 154 , 7 @ @ public class ASMModParser 
 
 for ( String intf : interfaces ) 
 { 
 - table . addASMData ( candidate , intf , this . asmType . getClassName ( ) , null , null ) ; 
 + table . addASMData ( candidate , intf , this . asmType . getInternalName ( ) , null , null ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 new file mode 100644 
 index 0000000 . . 5cd478c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + @ @ - 30 , 6 + 30 , 7 @ @ 
 + import net . minecraft . world . demo . DemoWorldServer ; 
 + import net . minecraft . world . storage . ISaveFormat ; 
 + import net . minecraft . world . storage . WorldInfo ; 
 + + import net . minecraftforge . client . ForgeHooksClient ; 
 + import org . apache . commons . io . Charsets ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + @ @ - 630 , 6 + 631 , 7 @ @ 
 + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; 
 + } 
 + } 
 + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; 
 + String s1 = " Copyright Mojang AB . Do not distribute ! " ; 
 + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; 
 + 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 10266a2 . . 4ec67c7 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 1 , 6 + 1 , 12 @ @ 
 package net . minecraftforge . client ; 
 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 + import java . net . URLConnection ; 
 import java . util . HashMap ; 
 + import java . util . Map ; 
 import java . util . Random ; 
 import java . util . TreeSet ; 
 
 @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; 
 
 import net . minecraftforge . client . event . MouseEvent ; 
 import net . minecraft . client . entity . EntityPlayerSP ; 
 + import net . minecraft . client . gui . FontRenderer ; 
 + import net . minecraft . client . gui . GuiMainMenu ; 
 import net . minecraftforge . client . event . FOVUpdateEvent ; 
 
 import org . lwjgl . LWJGLException ; 
 @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; 
 import org . lwjgl . opengl . GL12 ; 
 import org . lwjgl . opengl . PixelFormat ; 
 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + import com . google . gson . JsonParseException ; 
 + 
 import cpw . mods . fml . client . FMLClientHandler ; 
 import cpw . mods . fml . client . registry . RenderingRegistry ; 
 + import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockLiquid ; 
 @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . ChatComponentTranslation ; 
 + import net . minecraft . util . EnumChatFormatting ; 
 import net . minecraft . util . MathHelper ; 
 import net . minecraft . util . MovingObjectPosition ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fluids . RenderBlockFluid ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 public class ForgeHooksClient 
 { 
 @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient 
 / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; 
 / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; 
 } 
 + 
 + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) 
 + { 
 + Status status = ForgeVersion . getStatus ( ) ; 
 + if ( status = = BETA | | status = = BETA _ OUTDATED ) 
 + { 
 + / / render a warning at the top of the screen , 
 + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + line = " Major issues may arise , verify before reporting . " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + 
 + String line = null ; 
 + switch ( status ) 
 + { 
 + / / case FAILED : line = " Version check failed " ; break ; 
 + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; 
 + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; 
 + case OUTDATED : 
 + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; 
 + default : break ; 
 + } 
 + 
 + if ( line ! = null ) 
 + { 
 + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line 
 + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 index d18f81a . . 86de438 100644 
 - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame 
 private ScaledResolution res = null ; 
 private FontRenderer fontrenderer = null ; 
 private RenderGameOverlayEvent eventParent ; 
 - private static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; 
 
 public GuiIngameForge ( Minecraft mc ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 145a3c5 . . 9ca5fab 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; 
 
 public class ForgeHooks 
 { 
 - static class GrassEntry extends WeightedRandom . Item 
 - { 
 - public final Block block ; 
 - public final int metadata ; 
 - public GrassEntry ( Block block , int meta , int weight ) 
 - { 
 - super ( weight ) ; 
 - this . block = block ; 
 - this . metadata = meta ; 
 - } 
 - } 
 - 
 static class SeedEntry extends WeightedRandom . Item 
 { 
 public final ItemStack seed ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 4072090 . . d54730a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static double zombieSummonBaseChance = 0 . 1 ; 
 public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; 
 public static float zombieBabyChance = 0 . 05f ; 
 - public static boolean shouldSortRecipies = false ; 
 + public static boolean shouldSortRecipies = true ; 
 + public static boolean disableVersionCheck = false ; 
 
 public ForgeModContainer ( ) 
 { 
 @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; 
 shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; 
 
 + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; 
 + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; 
 + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; 
 + 
 if ( config . hasChanged ( ) ) 
 { 
 config . save ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 3dfe78e . . 0d4d751 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 4 , 6 + 4 , 17 @ @ 
 * / 
 
 package net . minecraftforge . common ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 + 
 + import java . io . InputStream ; 
 + import java . net . URL ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 
 public class ForgeVersion 
 { 
 @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion 
 / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 public static final int buildVersion = 0 ; 
 
 + private static Status status = PENDING ; 
 + private static String target = null ; 
 + 
 public static int getMajorVersion ( ) 
 { 
 return majorVersion ; 
 @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion 
 return buildVersion ; 
 } 
 
 + public static Status getStatus ( ) 
 + { 
 + return status ; 
 + } 
 + 
 + public static String getTarget ( ) 
 + { 
 + return target ; 
 + } 
 + 
 public static String getVersion ( ) 
 { 
 return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 } 
 + 
 + public static enum Status 
 + { 
 + PENDING , 
 + FAILED , 
 + UP _ TO _ DATE , 
 + OUTDATED , 
 + AHEAD , 
 + BETA , 
 + BETA _ OUTDATED 
 + } 
 + 
 + public static void startVersionCheck ( ) 
 + { 
 + new Thread ( " Forge Version Check " ) 
 + { 
 + @ Override 
 + public void run ( ) 
 + { 
 + try 
 + { 
 + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + InputStream con = url . openStream ( ) ; 
 + String data = new String ( ByteStreams . toByteArray ( con ) ) ; 
 + con . close ( ) ; 
 + 
 + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; 
 + String homepage = ( String ) json . get ( " homepage " ) ; 
 + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; 
 + 
 + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; 
 + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; 
 + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; 
 + 
 + if ( rec ! = null ) 
 + { 
 + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; 
 + int diff = recommended . compareTo ( current ) ; 
 + 
 + if ( diff = = 0 ) 
 + status = UP _ TO _ DATE ; 
 + else if ( diff < 0 ) 
 + { 
 + status = AHEAD ; 
 + if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = OUTDATED ; 
 + target = lat ; 
 + } 
 + } 
 + } 
 + else 
 + { 
 + status = OUTDATED ; 
 + target = rec ; 
 + } 
 + } 
 + else if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = BETA _ OUTDATED ; 
 + target = lat ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + status = FAILED ; 
 + } 
 + } 
 + } . start ( ) ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 index bb4a94e . . 3a98b16 100644 
 - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; 
 import net . minecraft . entity . monster . EntityEnderman ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraftforge . common . ForgeHooks . GrassEntry ; 
 import net . minecraftforge . common . ForgeHooks . SeedEntry ; 
 import net . minecraftforge . event . entity . EntityEvent ; 
 import net . minecraftforge . oredict . OreDictionary ; 
 @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge 
 public static final EventBus EVENT _ BUS = new EventBus ( ) ; 
 public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; 
 public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; 
 + public static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 
 private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; 
 
 @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge 
 EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; 
 OreDictionary . getOreName ( 0 ) ; 
 
 + if ( ! ForgeModContainer . disableVersionCheck ) 
 + { 
 + ForgeVersion . startVersionCheck ( ) ; 
 + } 
 + 
 / / Force these classes to be defined , Should prevent derp error hiding . 
 new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; 
 }
