BLEU SCORE: 0.007673227858963663

TEST MSG: Add checks for undefined packet discriminators when sending messages
GENERATED MSG: Log when it ' s likely the indexedcodec is gonna fail , because of LAN server derps likely . Try and give some context for debuggers .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java <nl> index 1244a2a . . 17e9d09 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java <nl> @ @ - 65 , 11 + 65 , 17 @ @ public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessag <nl> @ Override <nl> protected final void encode ( ChannelHandlerContext ctx , A msg , List < Object > out ) throws Exception <nl> { <nl> + String channel = ctx . channel ( ) . attr ( NetworkRegistry . FML _ CHANNEL ) . get ( ) ; <nl> + Class < ? > clazz = msg . getClass ( ) ; <nl> + if ( ! types . containsKey ( clazz ) ) <nl> + { <nl> + throw new RuntimeException ( " Undefined discriminator for message type " + clazz . getSimpleName ( ) + " in channel " + channel ) ; <nl> + } <nl> + byte discriminator = types . get ( clazz ) ; <nl> PacketBuffer buffer = new PacketBuffer ( Unpooled . buffer ( ) ) ; <nl> - byte discriminator = types . get ( msg . getClass ( ) ) ; <nl> buffer . writeByte ( discriminator ) ; <nl> encodeInto ( ctx , msg , buffer ) ; <nl> - FMLProxyPacket proxy = new FMLProxyPacket ( buffer / * . copy ( ) * / , ctx . channel ( ) . attr ( NetworkRegistry . FML _ CHANNEL ) . get ( ) ) ; <nl> + FMLProxyPacket proxy = new FMLProxyPacket ( buffer , channel ) ; <nl> WeakReference < FMLProxyPacket > ref = ctx . channel ( ) . attr ( INBOUNDPACKETTRACKER ) . get ( ) . get ( ) ; <nl> FMLProxyPacket old = ref = = null ? null : ref . get ( ) ; <nl> if ( old ! = null )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java <nl> index 1e4444a . . 62ff2dd 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java <nl> @ @ - 70 , 6 + 70 , 10 @ @ public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessag <nl> { <nl> testMessageValidity ( msg ) ; <nl> ByteBuf payload = msg . payload ( ) . copy ( ) ; <nl> + if ( payload . readableBytes ( ) < 1 ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , " The FMLIndexedCodec has received an empty buffer on channel % s , likely a result of a LAN server issue . Pipeline parts : % s " , ctx . channel ( ) . attr ( NetworkRegistry . FML _ CHANNEL ) , ctx . pipeline ( ) . toString ( ) ) ; <nl> + } <nl> byte discriminator = payload . readByte ( ) ; <nl> Class < ? extends A > clazz = discriminators . get ( discriminator ) ; <nl> if ( clazz = = null )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java 
 index 1244a2a . . 17e9d09 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java 
 @ @ - 65 , 11 + 65 , 17 @ @ public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessag 
 @ Override 
 protected final void encode ( ChannelHandlerContext ctx , A msg , List < Object > out ) throws Exception 
 { 
 + String channel = ctx . channel ( ) . attr ( NetworkRegistry . FML _ CHANNEL ) . get ( ) ; 
 + Class < ? > clazz = msg . getClass ( ) ; 
 + if ( ! types . containsKey ( clazz ) ) 
 + { 
 + throw new RuntimeException ( " Undefined discriminator for message type " + clazz . getSimpleName ( ) + " in channel " + channel ) ; 
 + } 
 + byte discriminator = types . get ( clazz ) ; 
 PacketBuffer buffer = new PacketBuffer ( Unpooled . buffer ( ) ) ; 
 - byte discriminator = types . get ( msg . getClass ( ) ) ; 
 buffer . writeByte ( discriminator ) ; 
 encodeInto ( ctx , msg , buffer ) ; 
 - FMLProxyPacket proxy = new FMLProxyPacket ( buffer / * . copy ( ) * / , ctx . channel ( ) . attr ( NetworkRegistry . FML _ CHANNEL ) . get ( ) ) ; 
 + FMLProxyPacket proxy = new FMLProxyPacket ( buffer , channel ) ; 
 WeakReference < FMLProxyPacket > ref = ctx . channel ( ) . attr ( INBOUNDPACKETTRACKER ) . get ( ) . get ( ) ; 
 FMLProxyPacket old = ref = = null ? null : ref . get ( ) ; 
 if ( old ! = null )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java 
 index 1e4444a . . 62ff2dd 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java 
 @ @ - 70 , 6 + 70 , 10 @ @ public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessag 
 { 
 testMessageValidity ( msg ) ; 
 ByteBuf payload = msg . payload ( ) . copy ( ) ; 
 + if ( payload . readableBytes ( ) < 1 ) 
 + { 
 + FMLLog . log ( Level . ERROR , " The FMLIndexedCodec has received an empty buffer on channel % s , likely a result of a LAN server issue . Pipeline parts : % s " , ctx . channel ( ) . attr ( NetworkRegistry . FML _ CHANNEL ) , ctx . pipeline ( ) . toString ( ) ) ; 
 + } 
 byte discriminator = payload . readByte ( ) ; 
 Class < ? extends A > clazz = discriminators . get ( discriminator ) ; 
 if ( clazz = = null )
