BLEU SCORE: 0.011993481292529617

TEST MSG: IModel can now depend on a variant definition ( ModelResourceLocation ) ; added MultiLayerModel - simple model that ' ll render correctly in multiple layers + example of using it .
GENERATED MSG: Added Breaking Animation for Smart Models , Checking each layer .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> index 7856bb0 . . de7e797 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> @ @ - 68 , 6 + 68 , 24 @ @ public interface IPerspectiveAwareModel extends IFlexibleBakedModel <nl> return builder . build ( ) ; <nl> } <nl> <nl> + public static Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( IFlexibleBakedModel model , ImmutableMap < TransformType , TRSRTransformation > transforms , TransformType cameraTransformType ) <nl> + { <nl> + TRSRTransformation tr = transforms . get ( cameraTransformType ) ; <nl> + Matrix4f mat = null ; <nl> + if ( tr ! = null & & tr ! = TRSRTransformation . identity ( ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; <nl> + return Pair . of ( model , mat ) ; <nl> + } <nl> + <nl> + public static Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( IFlexibleBakedModel model , IModelState state , TransformType cameraTransformType ) <nl> + { <nl> + TRSRTransformation tr = state . apply ( Optional . of ( cameraTransformType ) ) . or ( TRSRTransformation . identity ( ) ) ; <nl> + if ( tr ! = TRSRTransformation . identity ( ) ) <nl> + { <nl> + return Pair . of ( model , TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ) ; <nl> + } <nl> + return Pair . of ( model , null ) ; <nl> + } <nl> + <nl> public boolean isAmbientOcclusion ( ) { return parent . isAmbientOcclusion ( ) ; } <nl> public boolean isGui3d ( ) { return parent . isGui3d ( ) ; } <nl> public boolean isBuiltInRenderer ( ) { return parent . isBuiltInRenderer ( ) ; } <nl> @ @ - 80 , 10 + 98 , 7 @ @ public interface IPerspectiveAwareModel extends IFlexibleBakedModel <nl> @ Override <nl> public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) <nl> { <nl> - TRSRTransformation tr = transforms . get ( cameraTransformType ) ; <nl> - Matrix4f mat = null ; <nl> - if ( tr ! = null & & tr ! = TRSRTransformation . identity ( ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; <nl> - return Pair . of ( this , mat ) ; <nl> + return handlePerspective ( this , transforms , cameraTransformType ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index fd93a3f . . f0b4850 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 227 , 8 + 227 , 14 @ @ public class ModelLoader extends ModelBakery <nl> IModel model = ModelLoaderRegistry . getModel ( location ) ; <nl> for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> { <nl> - getModel ( dep ) ; <nl> - <nl> + if ( dep instanceof ModelResourceLocation ) <nl> + { <nl> + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> + } <nl> + else <nl> + { <nl> + getModel ( dep ) ; <nl> + } <nl> } <nl> textures . addAll ( model . getTextures ( ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> index 6a8f73e . . ed36a77 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ public class ModelLoaderRegistry <nl> registerLoader ( OBJLoader . instance ) ; <nl> registerLoader ( ModelFluid . FluidLoader . instance ) ; <nl> registerLoader ( ItemLayerModel . Loader . instance ) ; <nl> + registerLoader ( MultiLayerModel . Loader . instance ) ; <nl> } <nl> <nl> / * <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> new file mode 100644 <nl> index 0000000 . . ede8421 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> @ @ - 0 , 0 + 1 , 261 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import java . util . Collection ; <nl> + import java . util . List ; <nl> + <nl> + import javax . vecmath . Matrix4f ; <nl> + <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . resources . IResourceManager ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . client . resources . model . ModelManager ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumWorldBlockLayer ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . MinecraftForgeClient ; <nl> + import net . minecraftforge . client . model . ItemLayerModel . BakedModel ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . gson . JsonElement ; <nl> + import com . google . gson . JsonParser ; <nl> + <nl> + public class MultiLayerModel implements IModelCustomData <nl> + { <nl> + public static final MultiLayerModel instance = new MultiLayerModel ( ImmutableMap . of ( ) ) ; <nl> + <nl> + private final ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models ; <nl> + <nl> + public MultiLayerModel ( ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models ) <nl> + { <nl> + this . models = models ; <nl> + } <nl> + <nl> + @ Override <nl> + public Collection < ResourceLocation > getDependencies ( ) <nl> + { <nl> + return ImmutableList . < ResourceLocation > copyOf ( models . values ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Collection < ResourceLocation > getTextures ( ) <nl> + { <nl> + return ImmutableList . of ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> + { <nl> + return new MultiLayerBakedModel ( models , format , IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IModelState getDefaultState ( ) <nl> + { <nl> + return TRSRTransformation . identity ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IModel process ( ImmutableMap < String , String > customData ) <nl> + { <nl> + ImmutableMap . Builder < Optional < EnumWorldBlockLayer > , ModelResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> + for ( String key : customData . keySet ( ) ) <nl> + { <nl> + if ( " base " . equals ( key ) ) <nl> + { <nl> + builder . put ( Optional . absent ( ) , getLocation ( customData . get ( key ) ) ) ; <nl> + } <nl> + for ( EnumWorldBlockLayer layer : EnumWorldBlockLayer . values ( ) ) <nl> + { <nl> + if ( layer . toString ( ) . equals ( key ) ) <nl> + { <nl> + builder . put ( Optional . of ( layer ) , getLocation ( customData . get ( key ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> + ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models = builder . build ( ) ; <nl> + if ( models . isEmpty ( ) ) return instance ; <nl> + return new MultiLayerModel ( models ) ; <nl> + } <nl> + <nl> + private ModelResourceLocation getLocation ( String json ) <nl> + { <nl> + JsonElement e = new JsonParser ( ) . parse ( json ) ; <nl> + if ( e . isJsonPrimitive ( ) & & e . getAsJsonPrimitive ( ) . isString ( ) ) <nl> + { <nl> + return new ModelResourceLocation ( e . getAsString ( ) ) ; <nl> + } <nl> + FMLLog . severe ( " Expect ModelResourceLocation , got : " , json ) ; <nl> + return new ModelResourceLocation ( " builtin / missing " , " missing " ) ; <nl> + } <nl> + <nl> + public static class MultiLayerBakedModel implements IFlexibleBakedModel , ISmartBlockModel , IPerspectiveAwareModel <nl> + { <nl> + private final ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models ; <nl> + private final VertexFormat format ; <nl> + private final ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ; ; <nl> + private IBakedModel base ; <nl> + private ImmutableMap < EnumWorldBlockLayer , IBakedModel > bakedModels ; <nl> + private ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; <nl> + <nl> + public MultiLayerBakedModel ( ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models , VertexFormat format , ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ) <nl> + { <nl> + this . models = models ; <nl> + this . format = format ; <nl> + this . cameraTransforms = cameraTransforms ; <nl> + } <nl> + <nl> + private void compute ( ) <nl> + { <nl> + if ( base = = null ) <nl> + { <nl> + ModelManager manager = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelManager ( ) ; <nl> + base = getModel ( manager , Optional . absent ( ) ) ; <nl> + <nl> + ImmutableMap . Builder < EnumWorldBlockLayer , IBakedModel > builder = ImmutableMap . builder ( ) ; <nl> + for ( EnumWorldBlockLayer layer : EnumWorldBlockLayer . values ( ) ) <nl> + { <nl> + if ( models . containsKey ( Optional . of ( layer ) ) ) <nl> + { <nl> + builder . put ( layer , getModel ( manager , Optional . of ( layer ) ) ) ; <nl> + } <nl> + } <nl> + bakedModels = builder . build ( ) ; <nl> + <nl> + ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > quadBuilder = ImmutableMap . builder ( ) ; <nl> + quadBuilder . put ( Optional . absent ( ) , buildQuads ( Optional . absent ( ) ) ) ; <nl> + for ( EnumFacing side : EnumFacing . values ( ) ) <nl> + { <nl> + quadBuilder . put ( Optional . of ( side ) , buildQuads ( Optional . of ( side ) ) ) ; <nl> + } <nl> + quads = quadBuilder . build ( ) ; <nl> + } <nl> + } <nl> + <nl> + private IBakedModel getModel ( ModelManager manager , Optional < EnumWorldBlockLayer > layer ) <nl> + { <nl> + ModelResourceLocation loc = models . get ( layer ) ; <nl> + if ( loc = = null ) <nl> + { <nl> + loc = new ModelResourceLocation ( " builtin / missing " , " missing " ) ; <nl> + } <nl> + return manager . getModel ( loc ) ; <nl> + } <nl> + <nl> + private ImmutableList < BakedQuad > buildQuads ( Optional < EnumFacing > side ) <nl> + { <nl> + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> + for ( IBakedModel model : bakedModels . values ( ) ) <nl> + { <nl> + if ( side . isPresent ( ) ) <nl> + { <nl> + builder . addAll ( model . getFaceQuads ( side . get ( ) ) ) ; <nl> + } <nl> + else <nl> + { <nl> + builder . addAll ( model . getGeneralQuads ( ) ) ; <nl> + } <nl> + } <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> + { <nl> + compute ( ) ; <nl> + return quads . get ( Optional . of ( side ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getGeneralQuads ( ) <nl> + { <nl> + compute ( ) ; <nl> + return quads . get ( Optional . absent ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + compute ( ) ; <nl> + return base . isAmbientOcclusion ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + compute ( ) ; <nl> + return base . isGui3d ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + compute ( ) ; <nl> + return base . isBuiltInRenderer ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + compute ( ) ; <nl> + return base . getTexture ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleBlockState ( IBlockState state ) <nl> + { <nl> + compute ( ) ; <nl> + return bakedModels . get ( MinecraftForgeClient . getRenderLayer ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public VertexFormat getFormat ( ) <nl> + { <nl> + return format ; <nl> + } <nl> + <nl> + @ Override <nl> + public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) <nl> + { <nl> + return IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , cameraTransforms , cameraTransformType ) ; <nl> + } <nl> + } <nl> + <nl> + public static enum Loader implements ICustomModelLoader <nl> + { <nl> + instance ; <nl> + <nl> + public void onResourceManagerReload ( IResourceManager resourceManager ) { } <nl> + <nl> + public boolean accepts ( ResourceLocation modelLocation ) <nl> + { <nl> + return modelLocation . getResourceDomain ( ) . equals ( " forge " ) & & ( <nl> + modelLocation . getResourcePath ( ) . equals ( " multi - layer " ) | | <nl> + modelLocation . getResourcePath ( ) . equals ( " models / block / multi - layer " ) | | <nl> + modelLocation . getResourcePath ( ) . equals ( " models / item / multi - layer " ) ) ; <nl> + } <nl> + <nl> + public IModel loadModel ( ResourceLocation modelLocation ) <nl> + { <nl> + return MultiLayerModel . instance ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index c06eacb . . 5be50b0 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 995 , 12 + 995 , 7 @ @ public class B3DLoader implements ICustomModelLoader <nl> <nl> public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) <nl> { <nl> - TRSRTransformation tr = state . apply ( Optional . of ( cameraTransformType ) ) . or ( TRSRTransformation . identity ( ) ) ; <nl> - if ( tr ! = TRSRTransformation . identity ( ) ) <nl> - { <nl> - return Pair . of ( this , TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ) ; <nl> - } <nl> - return Pair . of ( this , null ) ; <nl> + return IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , state , cameraTransformType ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java <nl> index f882cb3 . . 2d2ab24 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java <nl> @ @ - 1575 , 12 + 1575 , 7 @ @ public class OBJModel implements IRetexturableModel , IModelCustomData <nl> @ Override <nl> public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) <nl> { <nl> - TRSRTransformation tr = state . apply ( Optional . of ( cameraTransformType ) ) . or ( TRSRTransformation . identity ( ) ) ; <nl> - if ( tr ! = TRSRTransformation . identity ( ) ) <nl> - { <nl> - return Pair . of ( this , TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ) ; <nl> - } <nl> - return Pair . of ( this , null ) ; <nl> + return IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , state , cameraTransformType ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java b / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java <nl> new file mode 100644 <nl> index 0000000 . . 2c4d178 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java <nl> @ @ - 0 , 0 + 1 , 65 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . util . EnumWorldBlockLayer ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . SidedProxy ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + @ Mod ( modid = MultiLayerModelDebug . MODID , version = MultiLayerModelDebug . VERSION ) <nl> + public class MultiLayerModelDebug <nl> + { <nl> + public static final String MODID = " forgedebugmultilayermodel " ; <nl> + public static final String VERSION = " 0 . 0 " ; <nl> + <nl> + public static String blockName = " test _ layer _ block " ; <nl> + <nl> + @ SidedProxy ( serverSide = " net . minecraftforge . debug . MultiLayerModelDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . MultiLayerModelDebug $ ClientProxy " ) <nl> + public static CommonProxy proxy ; <nl> + <nl> + public static class CommonProxy <nl> + { <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + GameRegistry . registerBlock ( new Block ( Material . wood ) <nl> + { <nl> + { <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + setUnlocalizedName ( MODID + " . " + blockName ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean isFullCube ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean canRenderInLayer ( EnumWorldBlockLayer layer ) <nl> + { <nl> + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; <nl> + } <nl> + } , blockName ) ; <nl> + } <nl> + } <nl> + <nl> + public static class ClientProxy extends CommonProxy <nl> + { <nl> + @ Override <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + super . preInit ( event ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( Item . getItemFromBlock ( GameRegistry . findBlock ( MODID , blockName ) ) , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + blockName , " inventory " ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json b / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json <nl> new file mode 100644 <nl> index 0000000 . . 50a1efe <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + { <nl> + " forge _ marker " : 1 , <nl> + " defaults " : { <nl> + " model " : " forge : multi - layer " , <nl> + " custom " : { <nl> + / / base is used for model properties - camera transforms , isGui3d , e . t . c . <nl> + " base " : " minecraft : stone _ slab # half = bottom " , <nl> + / / per - layer models <nl> + " Solid " : " minecraft : stone _ slab # half = bottom " , <nl> + " Translucent " : " minecraft : pink _ stained _ glass _ pane # east = true , north = false , south = false , west = true " <nl> + } , <nl> + " transform " : " forge : default - block " <nl> + } , <nl> + " variants " : { <nl> + " normal " : [ { } ] , <nl> + " inventory " : [ { } ] <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> index a24be3d . . 2eef166 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> @ @ - 1 , 6 + 1 , 31 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> - @ @ - 129 , 6 + 129 , 12 @ @ <nl> + @ @ - 49 , 6 + 49 , 24 @ @ <nl> + { <nl> + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; <nl> + + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) <nl> + + { <nl> + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) <nl> + + { <nl> + + if ( block . canRenderInLayer ( layer ) ) <nl> + + { <nl> + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; <nl> + + <nl> + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; <nl> + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + + } <nl> + + } <nl> + + return ; <nl> + + } <nl> + + <nl> + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + } <nl> + @ @ - 129 , 6 + 147 , 12 @ @ <nl> ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> new file mode 100644 <nl> index 0000000 . . 593101c <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> @ @ - 0 , 0 + 1 , 265 @ @ <nl> + <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . init . Blocks ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumWorldBlockLayer ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> + import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> + import net . minecraftforge . client . model . IModelPart ; <nl> + import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . ISmartBlockModel ; <nl> + import net . minecraftforge . client . model . TRSRTransformation ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) <nl> + public class LayerBreakingTest <nl> + { <nl> + <nl> + public static final boolean ENABLE = true ; <nl> + public static TestBlock testBlock ; <nl> + <nl> + class TestBakedModel implements IFlexibleBakedModel <nl> + { <nl> + <nl> + TextureAtlasSprite texture ; <nl> + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; <nl> + <nl> + private int [ ] vertexToInts ( <nl> + float x , <nl> + float y , <nl> + float z , <nl> + int color , <nl> + TextureAtlasSprite texture , <nl> + int u , <nl> + int v ) <nl> + { <nl> + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; <nl> + } <nl> + <nl> + public TestBakedModel ( <nl> + TextureAtlasSprite sprite , <nl> + boolean top ) <nl> + { <nl> + texture = sprite ; <nl> + if ( top ) <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; <nl> + } <nl> + else <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return texture ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getFaceQuads ( <nl> + EnumFacing side ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getGeneralQuads ( ) <nl> + { <nl> + return list ; <nl> + } <nl> + <nl> + @ Override <nl> + public VertexFormat getFormat ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class TestBlock extends Block <nl> + { <nl> + <nl> + protected TestBlock ( ) <nl> + { <nl> + super ( Material . glass ) ; <nl> + setHardness ( 7 ) ; <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean isFullCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean canRenderInLayer ( <nl> + EnumWorldBlockLayer layer ) <nl> + { <nl> + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class SmartModel implements IBakedModel , ISmartBlockModel <nl> + { <nl> + <nl> + IFlexibleBakedModel solid ; <nl> + IFlexibleBakedModel translucent ; <nl> + <nl> + private class DefState implements IModelState <nl> + { <nl> + <nl> + @ Override <nl> + public TRSRTransformation apply ( <nl> + IModelPart part ) <nl> + { <nl> + return TRSRTransformation . identity ( ) ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ Override <nl> + public List getFaceQuads ( <nl> + EnumFacing p _ 177551 _ 1 _ ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List getGeneralQuads ( ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleBlockState ( <nl> + IBlockState state ) <nl> + { <nl> + if ( solid = = null ) <nl> + { <nl> + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; <nl> + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; <nl> + <nl> + translucent = new TestBakedModel ( a , true ) ; <nl> + solid = new TestBakedModel ( b , false ) ; <nl> + } <nl> + <nl> + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) <nl> + { <nl> + return solid ; <nl> + } <nl> + else <nl> + { <nl> + return translucent ; <nl> + } <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ SubscribeEvent <nl> + public void onModelBakeEvent ( <nl> + ModelBakeEvent event ) <nl> + { <nl> + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; <nl> + } <nl> + <nl> + @ EventHandler <nl> + public void init ( <nl> + FMLInitializationEvent event ) <nl> + { <nl> + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; <nl> + } <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 index 7856bb0 . . de7e797 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 @ @ - 68 , 6 + 68 , 24 @ @ public interface IPerspectiveAwareModel extends IFlexibleBakedModel 
 return builder . build ( ) ; 
 } 
 
 + public static Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( IFlexibleBakedModel model , ImmutableMap < TransformType , TRSRTransformation > transforms , TransformType cameraTransformType ) 
 + { 
 + TRSRTransformation tr = transforms . get ( cameraTransformType ) ; 
 + Matrix4f mat = null ; 
 + if ( tr ! = null & & tr ! = TRSRTransformation . identity ( ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; 
 + return Pair . of ( model , mat ) ; 
 + } 
 + 
 + public static Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( IFlexibleBakedModel model , IModelState state , TransformType cameraTransformType ) 
 + { 
 + TRSRTransformation tr = state . apply ( Optional . of ( cameraTransformType ) ) . or ( TRSRTransformation . identity ( ) ) ; 
 + if ( tr ! = TRSRTransformation . identity ( ) ) 
 + { 
 + return Pair . of ( model , TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ) ; 
 + } 
 + return Pair . of ( model , null ) ; 
 + } 
 + 
 public boolean isAmbientOcclusion ( ) { return parent . isAmbientOcclusion ( ) ; } 
 public boolean isGui3d ( ) { return parent . isGui3d ( ) ; } 
 public boolean isBuiltInRenderer ( ) { return parent . isBuiltInRenderer ( ) ; } 
 @ @ - 80 , 10 + 98 , 7 @ @ public interface IPerspectiveAwareModel extends IFlexibleBakedModel 
 @ Override 
 public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) 
 { 
 - TRSRTransformation tr = transforms . get ( cameraTransformType ) ; 
 - Matrix4f mat = null ; 
 - if ( tr ! = null & & tr ! = TRSRTransformation . identity ( ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; 
 - return Pair . of ( this , mat ) ; 
 + return handlePerspective ( this , transforms , cameraTransformType ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index fd93a3f . . f0b4850 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 227 , 8 + 227 , 14 @ @ public class ModelLoader extends ModelBakery 
 IModel model = ModelLoaderRegistry . getModel ( location ) ; 
 for ( ResourceLocation dep : model . getDependencies ( ) ) 
 { 
 - getModel ( dep ) ; 
 - 
 + if ( dep instanceof ModelResourceLocation ) 
 + { 
 + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 + } 
 + else 
 + { 
 + getModel ( dep ) ; 
 + } 
 } 
 textures . addAll ( model . getTextures ( ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 index 6a8f73e . . ed36a77 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 @ @ - 33 , 6 + 33 , 7 @ @ public class ModelLoaderRegistry 
 registerLoader ( OBJLoader . instance ) ; 
 registerLoader ( ModelFluid . FluidLoader . instance ) ; 
 registerLoader ( ItemLayerModel . Loader . instance ) ; 
 + registerLoader ( MultiLayerModel . Loader . instance ) ; 
 } 
 
 / * 
 diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 new file mode 100644 
 index 0000000 . . ede8421 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 @ @ - 0 , 0 + 1 , 261 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import java . util . Collection ; 
 + import java . util . List ; 
 + 
 + import javax . vecmath . Matrix4f ; 
 + 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . resources . IResourceManager ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . client . resources . model . ModelManager ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumWorldBlockLayer ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . MinecraftForgeClient ; 
 + import net . minecraftforge . client . model . ItemLayerModel . BakedModel ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + 
 + import com . google . common . base . Function ; 
 + import com . google . common . base . Optional ; 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . gson . JsonElement ; 
 + import com . google . gson . JsonParser ; 
 + 
 + public class MultiLayerModel implements IModelCustomData 
 + { 
 + public static final MultiLayerModel instance = new MultiLayerModel ( ImmutableMap . of ( ) ) ; 
 + 
 + private final ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models ; 
 + 
 + public MultiLayerModel ( ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models ) 
 + { 
 + this . models = models ; 
 + } 
 + 
 + @ Override 
 + public Collection < ResourceLocation > getDependencies ( ) 
 + { 
 + return ImmutableList . < ResourceLocation > copyOf ( models . values ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public Collection < ResourceLocation > getTextures ( ) 
 + { 
 + return ImmutableList . of ( ) ; 
 + } 
 + 
 + @ Override 
 + public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 + { 
 + return new MultiLayerBakedModel ( models , format , IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) ) ; 
 + } 
 + 
 + @ Override 
 + public IModelState getDefaultState ( ) 
 + { 
 + return TRSRTransformation . identity ( ) ; 
 + } 
 + 
 + @ Override 
 + public IModel process ( ImmutableMap < String , String > customData ) 
 + { 
 + ImmutableMap . Builder < Optional < EnumWorldBlockLayer > , ModelResourceLocation > builder = ImmutableMap . builder ( ) ; 
 + for ( String key : customData . keySet ( ) ) 
 + { 
 + if ( " base " . equals ( key ) ) 
 + { 
 + builder . put ( Optional . absent ( ) , getLocation ( customData . get ( key ) ) ) ; 
 + } 
 + for ( EnumWorldBlockLayer layer : EnumWorldBlockLayer . values ( ) ) 
 + { 
 + if ( layer . toString ( ) . equals ( key ) ) 
 + { 
 + builder . put ( Optional . of ( layer ) , getLocation ( customData . get ( key ) ) ) ; 
 + } 
 + } 
 + } 
 + ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models = builder . build ( ) ; 
 + if ( models . isEmpty ( ) ) return instance ; 
 + return new MultiLayerModel ( models ) ; 
 + } 
 + 
 + private ModelResourceLocation getLocation ( String json ) 
 + { 
 + JsonElement e = new JsonParser ( ) . parse ( json ) ; 
 + if ( e . isJsonPrimitive ( ) & & e . getAsJsonPrimitive ( ) . isString ( ) ) 
 + { 
 + return new ModelResourceLocation ( e . getAsString ( ) ) ; 
 + } 
 + FMLLog . severe ( " Expect ModelResourceLocation , got : " , json ) ; 
 + return new ModelResourceLocation ( " builtin / missing " , " missing " ) ; 
 + } 
 + 
 + public static class MultiLayerBakedModel implements IFlexibleBakedModel , ISmartBlockModel , IPerspectiveAwareModel 
 + { 
 + private final ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models ; 
 + private final VertexFormat format ; 
 + private final ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ; ; 
 + private IBakedModel base ; 
 + private ImmutableMap < EnumWorldBlockLayer , IBakedModel > bakedModels ; 
 + private ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; 
 + 
 + public MultiLayerBakedModel ( ImmutableMap < Optional < EnumWorldBlockLayer > , ModelResourceLocation > models , VertexFormat format , ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ) 
 + { 
 + this . models = models ; 
 + this . format = format ; 
 + this . cameraTransforms = cameraTransforms ; 
 + } 
 + 
 + private void compute ( ) 
 + { 
 + if ( base = = null ) 
 + { 
 + ModelManager manager = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelManager ( ) ; 
 + base = getModel ( manager , Optional . absent ( ) ) ; 
 + 
 + ImmutableMap . Builder < EnumWorldBlockLayer , IBakedModel > builder = ImmutableMap . builder ( ) ; 
 + for ( EnumWorldBlockLayer layer : EnumWorldBlockLayer . values ( ) ) 
 + { 
 + if ( models . containsKey ( Optional . of ( layer ) ) ) 
 + { 
 + builder . put ( layer , getModel ( manager , Optional . of ( layer ) ) ) ; 
 + } 
 + } 
 + bakedModels = builder . build ( ) ; 
 + 
 + ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > quadBuilder = ImmutableMap . builder ( ) ; 
 + quadBuilder . put ( Optional . absent ( ) , buildQuads ( Optional . absent ( ) ) ) ; 
 + for ( EnumFacing side : EnumFacing . values ( ) ) 
 + { 
 + quadBuilder . put ( Optional . of ( side ) , buildQuads ( Optional . of ( side ) ) ) ; 
 + } 
 + quads = quadBuilder . build ( ) ; 
 + } 
 + } 
 + 
 + private IBakedModel getModel ( ModelManager manager , Optional < EnumWorldBlockLayer > layer ) 
 + { 
 + ModelResourceLocation loc = models . get ( layer ) ; 
 + if ( loc = = null ) 
 + { 
 + loc = new ModelResourceLocation ( " builtin / missing " , " missing " ) ; 
 + } 
 + return manager . getModel ( loc ) ; 
 + } 
 + 
 + private ImmutableList < BakedQuad > buildQuads ( Optional < EnumFacing > side ) 
 + { 
 + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 + for ( IBakedModel model : bakedModels . values ( ) ) 
 + { 
 + if ( side . isPresent ( ) ) 
 + { 
 + builder . addAll ( model . getFaceQuads ( side . get ( ) ) ) ; 
 + } 
 + else 
 + { 
 + builder . addAll ( model . getGeneralQuads ( ) ) ; 
 + } 
 + } 
 + return builder . build ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 + { 
 + compute ( ) ; 
 + return quads . get ( Optional . of ( side ) ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getGeneralQuads ( ) 
 + { 
 + compute ( ) ; 
 + return quads . get ( Optional . absent ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + compute ( ) ; 
 + return base . isAmbientOcclusion ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + compute ( ) ; 
 + return base . isGui3d ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + compute ( ) ; 
 + return base . isBuiltInRenderer ( ) ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + compute ( ) ; 
 + return base . getTexture ( ) ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleBlockState ( IBlockState state ) 
 + { 
 + compute ( ) ; 
 + return bakedModels . get ( MinecraftForgeClient . getRenderLayer ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public VertexFormat getFormat ( ) 
 + { 
 + return format ; 
 + } 
 + 
 + @ Override 
 + public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) 
 + { 
 + return IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , cameraTransforms , cameraTransformType ) ; 
 + } 
 + } 
 + 
 + public static enum Loader implements ICustomModelLoader 
 + { 
 + instance ; 
 + 
 + public void onResourceManagerReload ( IResourceManager resourceManager ) { } 
 + 
 + public boolean accepts ( ResourceLocation modelLocation ) 
 + { 
 + return modelLocation . getResourceDomain ( ) . equals ( " forge " ) & & ( 
 + modelLocation . getResourcePath ( ) . equals ( " multi - layer " ) | | 
 + modelLocation . getResourcePath ( ) . equals ( " models / block / multi - layer " ) | | 
 + modelLocation . getResourcePath ( ) . equals ( " models / item / multi - layer " ) ) ; 
 + } 
 + 
 + public IModel loadModel ( ResourceLocation modelLocation ) 
 + { 
 + return MultiLayerModel . instance ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index c06eacb . . 5be50b0 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 995 , 12 + 995 , 7 @ @ public class B3DLoader implements ICustomModelLoader 
 
 public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) 
 { 
 - TRSRTransformation tr = state . apply ( Optional . of ( cameraTransformType ) ) . or ( TRSRTransformation . identity ( ) ) ; 
 - if ( tr ! = TRSRTransformation . identity ( ) ) 
 - { 
 - return Pair . of ( this , TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ) ; 
 - } 
 - return Pair . of ( this , null ) ; 
 + return IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , state , cameraTransformType ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java 
 index f882cb3 . . 2d2ab24 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / obj / OBJModel . java 
 @ @ - 1575 , 12 + 1575 , 7 @ @ public class OBJModel implements IRetexturableModel , IModelCustomData 
 @ Override 
 public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) 
 { 
 - TRSRTransformation tr = state . apply ( Optional . of ( cameraTransformType ) ) . or ( TRSRTransformation . identity ( ) ) ; 
 - if ( tr ! = TRSRTransformation . identity ( ) ) 
 - { 
 - return Pair . of ( this , TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ) ; 
 - } 
 - return Pair . of ( this , null ) ; 
 + return IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , state , cameraTransformType ) ; 
 } 
 
 @ Override 
 diff - - git a / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java b / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java 
 new file mode 100644 
 index 0000000 . . 2c4d178 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java 
 @ @ - 0 , 0 + 1 , 65 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . util . EnumWorldBlockLayer ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . SidedProxy ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + @ Mod ( modid = MultiLayerModelDebug . MODID , version = MultiLayerModelDebug . VERSION ) 
 + public class MultiLayerModelDebug 
 + { 
 + public static final String MODID = " forgedebugmultilayermodel " ; 
 + public static final String VERSION = " 0 . 0 " ; 
 + 
 + public static String blockName = " test _ layer _ block " ; 
 + 
 + @ SidedProxy ( serverSide = " net . minecraftforge . debug . MultiLayerModelDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . MultiLayerModelDebug $ ClientProxy " ) 
 + public static CommonProxy proxy ; 
 + 
 + public static class CommonProxy 
 + { 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + GameRegistry . registerBlock ( new Block ( Material . wood ) 
 + { 
 + { 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + setUnlocalizedName ( MODID + " . " + blockName ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( ) { return false ; } 
 + 
 + @ Override 
 + public boolean isFullCube ( ) { return false ; } 
 + 
 + @ Override 
 + public boolean canRenderInLayer ( EnumWorldBlockLayer layer ) 
 + { 
 + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; 
 + } 
 + } , blockName ) ; 
 + } 
 + } 
 + 
 + public static class ClientProxy extends CommonProxy 
 + { 
 + @ Override 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + super . preInit ( event ) ; 
 + ModelLoader . setCustomModelResourceLocation ( Item . getItemFromBlock ( GameRegistry . findBlock ( MODID , blockName ) ) , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + blockName , " inventory " ) ) ; 
 + } 
 + } 
 + 
 + @ EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json b / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json 
 new file mode 100644 
 index 0000000 . . 50a1efe 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmultilayermodel / blockstates / test _ layer _ block . json 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + { 
 + " forge _ marker " : 1 , 
 + " defaults " : { 
 + " model " : " forge : multi - layer " , 
 + " custom " : { 
 + / / base is used for model properties - camera transforms , isGui3d , e . t . c . 
 + " base " : " minecraft : stone _ slab # half = bottom " , 
 + / / per - layer models 
 + " Solid " : " minecraft : stone _ slab # half = bottom " , 
 + " Translucent " : " minecraft : pink _ stained _ glass _ pane # east = true , north = false , south = false , west = true " 
 + } , 
 + " transform " : " forge : default - block " 
 + } , 
 + " variants " : { 
 + " normal " : [ { } ] , 
 + " inventory " : [ { } ] 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 index a24be3d . . 2eef166 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 @ @ - 1 , 6 + 1 , 31 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 - @ @ - 129 , 6 + 129 , 12 @ @ 
 + @ @ - 49 , 6 + 49 , 24 @ @ 
 + { 
 + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; 
 + + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) 
 + + { 
 + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) 
 + + { 
 + + if ( block . canRenderInLayer ( layer ) ) 
 + + { 
 + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; 
 + + 
 + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; 
 + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + + } 
 + + } 
 + + return ; 
 + + } 
 + + 
 + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + } 
 + @ @ - 129 , 6 + 147 , 12 @ @ 
 ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 new file mode 100644 
 index 0000000 . . 593101c 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 @ @ - 0 , 0 + 1 , 265 @ @ 
 + 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import com . google . common . primitives . Ints ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . init . Blocks ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumWorldBlockLayer ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 + import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 + import net . minecraftforge . client . model . IModelPart ; 
 + import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . ISmartBlockModel ; 
 + import net . minecraftforge . client . model . TRSRTransformation ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + 
 + @ SuppressWarnings ( " deprecation " ) 
 + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) 
 + public class LayerBreakingTest 
 + { 
 + 
 + public static final boolean ENABLE = true ; 
 + public static TestBlock testBlock ; 
 + 
 + class TestBakedModel implements IFlexibleBakedModel 
 + { 
 + 
 + TextureAtlasSprite texture ; 
 + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; 
 + 
 + private int [ ] vertexToInts ( 
 + float x , 
 + float y , 
 + float z , 
 + int color , 
 + TextureAtlasSprite texture , 
 + int u , 
 + int v ) 
 + { 
 + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; 
 + } 
 + 
 + public TestBakedModel ( 
 + TextureAtlasSprite sprite , 
 + boolean top ) 
 + { 
 + texture = sprite ; 
 + if ( top ) 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; 
 + } 
 + else 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return texture ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getFaceQuads ( 
 + EnumFacing side ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getGeneralQuads ( ) 
 + { 
 + return list ; 
 + } 
 + 
 + @ Override 
 + public VertexFormat getFormat ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + } ; 
 + 
 + class TestBlock extends Block 
 + { 
 + 
 + protected TestBlock ( ) 
 + { 
 + super ( Material . glass ) ; 
 + setHardness ( 7 ) ; 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean isFullCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public boolean canRenderInLayer ( 
 + EnumWorldBlockLayer layer ) 
 + { 
 + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; 
 + } 
 + 
 + } ; 
 + 
 + class SmartModel implements IBakedModel , ISmartBlockModel 
 + { 
 + 
 + IFlexibleBakedModel solid ; 
 + IFlexibleBakedModel translucent ; 
 + 
 + private class DefState implements IModelState 
 + { 
 + 
 + @ Override 
 + public TRSRTransformation apply ( 
 + IModelPart part ) 
 + { 
 + return TRSRTransformation . identity ( ) ; 
 + } 
 + 
 + } ; 
 + 
 + @ Override 
 + public List getFaceQuads ( 
 + EnumFacing p _ 177551 _ 1 _ ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List getGeneralQuads ( ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleBlockState ( 
 + IBlockState state ) 
 + { 
 + if ( solid = = null ) 
 + { 
 + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; 
 + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; 
 + 
 + translucent = new TestBakedModel ( a , true ) ; 
 + solid = new TestBakedModel ( b , false ) ; 
 + } 
 + 
 + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) 
 + { 
 + return solid ; 
 + } 
 + else 
 + { 
 + return translucent ; 
 + } 
 + } 
 + 
 + } ; 
 + 
 + @ SubscribeEvent 
 + public void onModelBakeEvent ( 
 + ModelBakeEvent event ) 
 + { 
 + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; 
 + } 
 + 
 + @ EventHandler 
 + public void init ( 
 + FMLInitializationEvent event ) 
 + { 
 + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; 
 + } 
 + } 
 + 
 + }
