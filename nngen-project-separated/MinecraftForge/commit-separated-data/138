BLEU SCORE: 0.02407485903547034

TEST MSG: [ 1 . 13 ] Expand tag deserializer to add optional values and remove values without overwriting everything .
GENERATED MSG: Add support for oredict item predicates in advancements , and add a registry for item predicates

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / tags / Tag . java . patch b / patches / minecraft / net / minecraft / tags / Tag . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 78758c6 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / tags / Tag . java . patch <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + - - - a / net / minecraft / tags / Tag . java <nl> + + + + b / net / minecraft / tags / Tag . java <nl> + @ @ - 151 , 9 + 151 , 11 @ @ <nl> + this . func _ 200159 _ a ( new ResourceLocation ( s . substring ( 1 ) ) ) ; <nl> + } <nl> + } <nl> + + net . minecraftforge . common . ForgeHooks . deserializeTagAdditions ( this , p _ 200158 _ 1 _ , p _ 200158 _ 2 _ , p _ 200158 _ 3 _ ) ; <nl> + <nl> + return this ; <nl> + } <nl> + + public Tag . Builder < T > remove ( Tag . ITagEntry < T > e ) { this . field _ 200052 _ a . remove ( e ) ; return this ; } <nl> + } <nl> + <nl> + public interface ITagEntry < T > { <nl> + @ @ - 192 , 6 + 194 , 8 @ @ <nl> + public Collection < T > func _ 200578 _ a ( ) { <nl> + return this . field _ 200165 _ a ; <nl> + } <nl> + + @ Override public int hashCode ( ) { return this . field _ 200165 _ a . hashCode ( ) ; } <nl> + + @ Override public boolean equals ( Object o ) { return o = = this | | ( o instanceof Tag . ListEntry & & this . field _ 200165 _ a . equals ( ( ( Tag . ListEntry ) o ) . field _ 200165 _ a ) ) ; } <nl> + } <nl> + <nl> + public static class TagEntry < T > implements Tag . ITagEntry < T > { <nl> + @ @ - 238 , 5 + 242 , 7 @ @ <nl> + public void func _ 200576 _ a ( JsonArray p _ 200576 _ 1 _ , Function < T , ResourceLocation > p _ 200576 _ 2 _ ) { <nl> + p _ 200576 _ 1 _ . add ( " # " + this . func _ 200577 _ a ( ) ) ; <nl> + } <nl> + + @ Override public int hashCode ( ) { return java . util . Objects . hashCode ( this . field _ 200163 _ a ) ; } <nl> + + @ Override public boolean equals ( Object o ) { return o = = this | | ( o instanceof Tag . TagEntry & & java . util . Objects . equals ( this . field _ 200163 _ a , ( ( Tag . TagEntry ) o ) . field _ 200163 _ a ) ) ; } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 6028ee9 . . d0b898e 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> + import java . util . Collections ; <nl> import java . util . Deque ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> @ @ - 37 , 6 + 38 , 8 @ @ import java . util . Objects ; <nl> import java . util . Random ; <nl> import java . util . Set ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> + import java . util . function . Function ; <nl> + import java . util . function . Predicate ; <nl> import java . util . regex . Matcher ; <nl> import java . util . regex . Pattern ; <nl> import java . util . stream . Collectors ; <nl> @ @ - 46 , 6 + 49 , 7 @ @ import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Queues ; <nl> import com . google . common . collect . Sets ; <nl> import com . google . gson . Gson ; <nl> + import com . google . gson . JsonElement ; <nl> import com . google . gson . JsonObject ; <nl> import com . google . gson . JsonParseException ; <nl> <nl> @ @ - 1157 , 4 + 1161 , 76 @ @ public class ForgeHooks <nl> Result res = ForgeEventFactory . canEntitySpawn ( entity , world , x , y , z , null ) ; <nl> return res = = Result . DEFAULT ? 0 : res = = Result . DENY ? - 1 : 1 ; <nl> } <nl> + <nl> + public static < T > void deserializeTagAdditions ( Tag . Builder < T > builder , Predicate < ResourceLocation > isValueKnown , Function < ResourceLocation , T > valueGetter , JsonObject json ) <nl> + { <nl> + if ( json . has ( " optional " ) ) <nl> + { <nl> + for ( JsonElement entry : JsonUtils . getJsonArray ( json , " optional " ) ) <nl> + { <nl> + String s = JsonUtils . getString ( entry , " value " ) ; <nl> + if ( ! s . startsWith ( " # " ) ) <nl> + { <nl> + ResourceLocation rl = new ResourceLocation ( s ) ; <nl> + if ( isValueKnown . test ( rl ) & & valueGetter . apply ( rl ) ! = null ) <nl> + { <nl> + builder . add ( valueGetter . apply ( rl ) ) ; <nl> + } <nl> + } else <nl> + { <nl> + builder . add ( new OptionalTagEntry < > ( new ResourceLocation ( s . substring ( 1 ) ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + if ( json . has ( " remove " ) ) <nl> + { <nl> + for ( JsonElement entry : JsonUtils . getJsonArray ( json , " remove " ) ) <nl> + { <nl> + String s = JsonUtils . getString ( entry , " value " ) ; <nl> + if ( ! s . startsWith ( " # " ) ) <nl> + { <nl> + ResourceLocation rl = new ResourceLocation ( s ) ; <nl> + if ( isValueKnown . test ( rl ) & & valueGetter . apply ( rl ) ! = null ) <nl> + { <nl> + Tag . ITagEntry < T > dummyEntry = new Tag . ListEntry < > ( Collections . singletonList ( valueGetter . apply ( rl ) ) ) ; <nl> + builder . remove ( dummyEntry ) ; <nl> + } <nl> + } else <nl> + { <nl> + Tag . ITagEntry < T > dummyEntry = new Tag . TagEntry < > ( new ResourceLocation ( s . substring ( 1 ) ) ) ; <nl> + builder . remove ( dummyEntry ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static class OptionalTagEntry < T > extends Tag . TagEntry < T > <nl> + { <nl> + private Tag < T > resolvedTag = null ; <nl> + <nl> + OptionalTagEntry ( ResourceLocation referent ) <nl> + { <nl> + super ( referent ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean resolve ( @ Nonnull Function < ResourceLocation , Tag < T > > resolver ) <nl> + { <nl> + if ( this . resolvedTag = = null ) <nl> + { <nl> + this . resolvedTag = resolver . apply ( this . getSerializedId ( ) ) ; <nl> + } <nl> + return true ; / / never fail if resolver returns null <nl> + } <nl> + <nl> + @ Override <nl> + public void populate ( @ Nonnull Collection < T > items ) <nl> + { <nl> + if ( this . resolvedTag ! = null ) <nl> + { <nl> + items . addAll ( this . resolvedTag . getAllElements ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch b / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch <nl> new file mode 100644 <nl> index 0000000 . . d16a9b7 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java <nl> + + + + . . / src - work / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java <nl> + @ @ - 104 , 6 + 104 , 7 @ @ <nl> + if ( p _ 192492 _ 0 _ ! = null & & ! p _ 192492 _ 0 _ . isJsonNull ( ) ) <nl> + { <nl> + JsonObject jsonobject = JsonUtils . func _ 151210 _ l ( p _ 192492 _ 0 _ , " item " ) ; <nl> + + if ( jsonobject . has ( " type " ) ) <nl> + + { <nl> + + final ResourceLocation rl = new ResourceLocation ( JsonUtils . func _ 151200 _ h ( jsonobject , " type " ) ) ; <nl> + + final Map < ResourceLocation , java . util . function . Function < JsonObject , ItemPredicate > > map = net . minecraftforge . advancements . critereon . ItemPredicates . getPredicates ( ) ; <nl> + + if ( map . containsKey ( rl ) ) return map . get ( rl ) . apply ( jsonobject ) ; <nl> + + else throw new JsonSyntaxException ( " There is no ItemPredicate of type " + rl ) ; <nl> + + } <nl> + MinMaxBounds minmaxbounds = MinMaxBounds . func _ 192515 _ a ( jsonobject . get ( " count " ) ) ; <nl> + MinMaxBounds minmaxbounds1 = MinMaxBounds . func _ 192515 _ a ( jsonobject . get ( " durability " ) ) ; <nl> + Integer integer = jsonobject . has ( " data " ) ? JsonUtils . func _ 151203 _ m ( jsonobject , " data " ) : null ; <nl> diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java <nl> new file mode 100644 <nl> index 0000000 . . ff551e0 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . advancements . critereon ; <nl> + <nl> + import com . google . gson . JsonObject ; <nl> + import gnu . trove . map . hash . THashMap ; <nl> + import net . minecraft . advancements . critereon . ItemPredicate ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . Map ; <nl> + import java . util . function . Function ; <nl> + <nl> + public class ItemPredicates <nl> + { <nl> + private static final Map < ResourceLocation , Function < JsonObject , ItemPredicate > > predicates = new THashMap < > ( ) ; <nl> + <nl> + static <nl> + { <nl> + register ( new ResourceLocation ( " forge : ore _ dict " ) , OredictItemPredicate : : new ) ; <nl> + } <nl> + <nl> + public static void register ( ResourceLocation rl , Function < JsonObject , ItemPredicate > jsonToPredicate ) <nl> + { <nl> + predicates . put ( rl , jsonToPredicate ) ; <nl> + } <nl> + <nl> + public static Map < ResourceLocation , Function < JsonObject , ItemPredicate > > getPredicates ( ) <nl> + { <nl> + return Collections . unmodifiableMap ( predicates ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java b / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java <nl> new file mode 100644 <nl> index 0000000 . . 9c36975 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . advancements . critereon ; <nl> + <nl> + <nl> + import com . google . gson . JsonObject ; <nl> + import net . minecraft . util . JsonUtils ; <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> + <nl> + import net . minecraft . advancements . critereon . ItemPredicate ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . oredict . OreDictionary ; <nl> + <nl> + / * * <nl> + * An { @ link ItemPredicate } that matches oredicts . <nl> + * / <nl> + public class OredictItemPredicate extends ItemPredicate <nl> + { <nl> + private final String ore ; <nl> + <nl> + public OredictItemPredicate ( String ore ) <nl> + { <nl> + this . ore = ore ; <nl> + } <nl> + <nl> + public OredictItemPredicate ( JsonObject jsonObject ) { this ( JsonUtils . getString ( jsonObject , " ore " ) ) ; } <nl> + <nl> + @ Override <nl> + public boolean test ( ItemStack stack ) <nl> + { <nl> + return ! stack . isEmpty ( ) & & ArrayUtils . contains ( OreDictionary . getOreIDs ( stack ) , OreDictionary . getOreID ( ore ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java b / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java <nl> new file mode 100644 <nl> index 0000000 . . 07c154b <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java <nl> @ @ - 0 , 0 + 1 , 198 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import com . google . gson . JsonDeserializationContext ; <nl> + import com . google . gson . JsonObject ; <nl> + import net . minecraft . advancements . CriteriaTriggers ; <nl> + import net . minecraft . advancements . ICriterionTrigger ; <nl> + import net . minecraft . advancements . PlayerAdvancements ; <nl> + import net . minecraft . advancements . critereon . AbstractCriterionInstance ; <nl> + import net . minecraft . entity . player . EntityPlayerMP ; <nl> + import net . minecraft . entity . player . InventoryPlayer ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . event . entity . EntityJoinWorldEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + import java . lang . invoke . MethodHandle ; <nl> + import java . lang . invoke . MethodHandles ; <nl> + import java . lang . reflect . Method ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + <nl> + / * * <nl> + * Most of the real work is in the advancements directory of this mod . <nl> + * This mod tests ore - dict advancement triggers . <nl> + * / <nl> + @ Mod . EventBusSubscriber <nl> + @ Mod ( modid = OredictItemPredicateTest . MODID , name = " Oredict Item Predicate Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class OredictItemPredicateTest <nl> + { <nl> + public static final String MODID = " oredict _ predicate " ; <nl> + <nl> + static final boolean ENABLED = false ; <nl> + <nl> + private static final MethodHandle ctRegister ; <nl> + static <nl> + { <nl> + try <nl> + { <nl> + final Method tmp = CriteriaTriggers . class . getDeclaredMethod ( " register " / * func _ 192118 _ a * / , ICriterionTrigger . class ) ; <nl> + tmp . setAccessible ( true ) ; <nl> + ctRegister = MethodHandles . lookup ( ) . unreflect ( tmp ) ; <nl> + } <nl> + catch ( Throwable e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public static final EnabledTrigger ENABLED _ TRIGGER ; <nl> + static <nl> + { <nl> + try <nl> + { <nl> + ENABLED _ TRIGGER = ( EnabledTrigger ) ( ICriterionTrigger ) ctRegister . invokeExact ( ( ICriterionTrigger ) new EnabledTrigger ( ) ) ; <nl> + } <nl> + catch ( Throwable e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + / / trigger the enabled advancement on player entry <nl> + @ SubscribeEvent <nl> + public static void triggerAdv ( EntityJoinWorldEvent event ) <nl> + { <nl> + if ( event . getEntity ( ) instanceof EntityPlayerMP ) <nl> + { <nl> + final EntityPlayerMP player = ( EntityPlayerMP ) event . getEntity ( ) ; <nl> + ENABLED _ TRIGGER . trigger ( player , player . inventory ) ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Far more work than expected … oh well . <nl> + * / <nl> + public static class EnabledTrigger implements ICriterionTrigger < EnabledTrigger . Instance > <nl> + { <nl> + public static final ResourceLocation ID = new ResourceLocation ( MODID , " is _ enabled " ) ; <nl> + private final Map < PlayerAdvancements , Listeners > listeners = new HashMap < > ( ) ; <nl> + <nl> + @ Override <nl> + public ResourceLocation getId ( ) <nl> + { <nl> + return ID ; <nl> + } <nl> + <nl> + @ Override <nl> + public void addListener ( PlayerAdvancements playerAdvancementsIn , Listener < Instance > listener ) <nl> + { <nl> + Listeners listeners = this . listeners . computeIfAbsent ( playerAdvancementsIn , Listeners : : new ) ; <nl> + <nl> + listeners . add ( listener ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void removeListener ( PlayerAdvancements playerAdvancementsIn , Listener < Instance > listener ) <nl> + { <nl> + Listeners listeners = this . listeners . get ( playerAdvancementsIn ) ; <nl> + <nl> + if ( listeners ! = null ) <nl> + { <nl> + listeners . remove ( listener ) ; <nl> + <nl> + if ( listeners . isEmpty ( ) ) <nl> + { <nl> + this . listeners . remove ( playerAdvancementsIn ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void removeAllListeners ( PlayerAdvancements playerAdvancementsIn ) <nl> + { <nl> + this . listeners . remove ( playerAdvancementsIn ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Instance deserializeInstance ( JsonObject json , JsonDeserializationContext context ) <nl> + { <nl> + return new Instance ( ) ; <nl> + } <nl> + <nl> + public void trigger ( EntityPlayerMP player , InventoryPlayer inventory ) <nl> + { <nl> + Listeners listeners = this . listeners . get ( player . getAdvancements ( ) ) ; <nl> + <nl> + if ( listeners ! = null ) <nl> + { <nl> + listeners . trigger ( inventory ) ; <nl> + } <nl> + } <nl> + <nl> + public static class Instance extends AbstractCriterionInstance <nl> + { <nl> + public Instance ( ) <nl> + { <nl> + super ( ID ) ; <nl> + } <nl> + } <nl> + <nl> + static class Listeners <nl> + { <nl> + private final PlayerAdvancements playerAdvancements ; <nl> + private final Set < Listener < Instance > > listeners = new HashSet < > ( ) ; <nl> + <nl> + public Listeners ( PlayerAdvancements playerAdvancementsIn ) <nl> + { <nl> + this . playerAdvancements = playerAdvancementsIn ; <nl> + } <nl> + <nl> + public boolean isEmpty ( ) <nl> + { <nl> + return this . listeners . isEmpty ( ) ; <nl> + } <nl> + <nl> + public void add ( ICriterionTrigger . Listener < Instance > listener ) <nl> + { <nl> + this . listeners . add ( listener ) ; <nl> + } <nl> + <nl> + public void remove ( ICriterionTrigger . Listener < Instance > listener ) <nl> + { <nl> + this . listeners . remove ( listener ) ; <nl> + } <nl> + <nl> + public void trigger ( InventoryPlayer inventory ) <nl> + { <nl> + List < Listener < Instance > > list = null ; <nl> + <nl> + for ( ICriterionTrigger . Listener < Instance > listener : this . listeners ) <nl> + { <nl> + if ( ENABLED ) <nl> + { <nl> + if ( list = = null ) <nl> + { <nl> + list = new ArrayList < > ( ) ; <nl> + } <nl> + <nl> + list . add ( listener ) ; <nl> + } <nl> + } <nl> + <nl> + if ( list ! = null ) <nl> + { <nl> + for ( ICriterionTrigger . Listener < Instance > listener1 : list ) <nl> + { <nl> + listener1 . grantCriterion ( this . playerAdvancements ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json b / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json <nl> new file mode 100644 <nl> index 0000000 . . 396bf2b <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + { <nl> + " parent " : " minecraft : recipes / root " , <nl> + " rewards " : { <nl> + " recipes " : [ " minecraft : tnt " ] <nl> + } , <nl> + " criteria " : { <nl> + " has _ wood " : { <nl> + " trigger " : " minecraft : inventory _ changed " , <nl> + " conditions " : { <nl> + " items " : [ <nl> + { <nl> + " type " : " forge : ore _ dict " , <nl> + " ore " : " plankWood " <nl> + } <nl> + ] <nl> + } <nl> + } , <nl> + " mod _ enabled " : { <nl> + " trigger " : " oredict _ predicate : is _ enabled " , <nl> + " conditions " : { } <nl> + } <nl> + } , <nl> + " requirements " : [ [ " has _ wood " ] , [ " mod _ enabled " ] ] <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / tags / Tag . java . patch b / patches / minecraft / net / minecraft / tags / Tag . java . patch 
 new file mode 100644 
 index 0000000 . . 78758c6 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / tags / Tag . java . patch 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + - - - a / net / minecraft / tags / Tag . java 
 + + + + b / net / minecraft / tags / Tag . java 
 + @ @ - 151 , 9 + 151 , 11 @ @ 
 + this . func _ 200159 _ a ( new ResourceLocation ( s . substring ( 1 ) ) ) ; 
 + } 
 + } 
 + + net . minecraftforge . common . ForgeHooks . deserializeTagAdditions ( this , p _ 200158 _ 1 _ , p _ 200158 _ 2 _ , p _ 200158 _ 3 _ ) ; 
 + 
 + return this ; 
 + } 
 + + public Tag . Builder < T > remove ( Tag . ITagEntry < T > e ) { this . field _ 200052 _ a . remove ( e ) ; return this ; } 
 + } 
 + 
 + public interface ITagEntry < T > { 
 + @ @ - 192 , 6 + 194 , 8 @ @ 
 + public Collection < T > func _ 200578 _ a ( ) { 
 + return this . field _ 200165 _ a ; 
 + } 
 + + @ Override public int hashCode ( ) { return this . field _ 200165 _ a . hashCode ( ) ; } 
 + + @ Override public boolean equals ( Object o ) { return o = = this | | ( o instanceof Tag . ListEntry & & this . field _ 200165 _ a . equals ( ( ( Tag . ListEntry ) o ) . field _ 200165 _ a ) ) ; } 
 + } 
 + 
 + public static class TagEntry < T > implements Tag . ITagEntry < T > { 
 + @ @ - 238 , 5 + 242 , 7 @ @ 
 + public void func _ 200576 _ a ( JsonArray p _ 200576 _ 1 _ , Function < T , ResourceLocation > p _ 200576 _ 2 _ ) { 
 + p _ 200576 _ 1 _ . add ( " # " + this . func _ 200577 _ a ( ) ) ; 
 + } 
 + + @ Override public int hashCode ( ) { return java . util . Objects . hashCode ( this . field _ 200163 _ a ) ; } 
 + + @ Override public boolean equals ( Object o ) { return o = = this | | ( o instanceof Tag . TagEntry & & java . util . Objects . equals ( this . field _ 200163 _ a , ( ( Tag . TagEntry ) o ) . field _ 200163 _ a ) ) ; } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 6028ee9 . . d0b898e 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . util . ArrayList ; 
 import java . util . Collection ; 
 + import java . util . Collections ; 
 import java . util . Deque ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 @ @ - 37 , 6 + 38 , 8 @ @ import java . util . Objects ; 
 import java . util . Random ; 
 import java . util . Set ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 + import java . util . function . Function ; 
 + import java . util . function . Predicate ; 
 import java . util . regex . Matcher ; 
 import java . util . regex . Pattern ; 
 import java . util . stream . Collectors ; 
 @ @ - 46 , 6 + 49 , 7 @ @ import com . google . common . collect . Lists ; 
 import com . google . common . collect . Queues ; 
 import com . google . common . collect . Sets ; 
 import com . google . gson . Gson ; 
 + import com . google . gson . JsonElement ; 
 import com . google . gson . JsonObject ; 
 import com . google . gson . JsonParseException ; 
 
 @ @ - 1157 , 4 + 1161 , 76 @ @ public class ForgeHooks 
 Result res = ForgeEventFactory . canEntitySpawn ( entity , world , x , y , z , null ) ; 
 return res = = Result . DEFAULT ? 0 : res = = Result . DENY ? - 1 : 1 ; 
 } 
 + 
 + public static < T > void deserializeTagAdditions ( Tag . Builder < T > builder , Predicate < ResourceLocation > isValueKnown , Function < ResourceLocation , T > valueGetter , JsonObject json ) 
 + { 
 + if ( json . has ( " optional " ) ) 
 + { 
 + for ( JsonElement entry : JsonUtils . getJsonArray ( json , " optional " ) ) 
 + { 
 + String s = JsonUtils . getString ( entry , " value " ) ; 
 + if ( ! s . startsWith ( " # " ) ) 
 + { 
 + ResourceLocation rl = new ResourceLocation ( s ) ; 
 + if ( isValueKnown . test ( rl ) & & valueGetter . apply ( rl ) ! = null ) 
 + { 
 + builder . add ( valueGetter . apply ( rl ) ) ; 
 + } 
 + } else 
 + { 
 + builder . add ( new OptionalTagEntry < > ( new ResourceLocation ( s . substring ( 1 ) ) ) ) ; 
 + } 
 + } 
 + } 
 + 
 + if ( json . has ( " remove " ) ) 
 + { 
 + for ( JsonElement entry : JsonUtils . getJsonArray ( json , " remove " ) ) 
 + { 
 + String s = JsonUtils . getString ( entry , " value " ) ; 
 + if ( ! s . startsWith ( " # " ) ) 
 + { 
 + ResourceLocation rl = new ResourceLocation ( s ) ; 
 + if ( isValueKnown . test ( rl ) & & valueGetter . apply ( rl ) ! = null ) 
 + { 
 + Tag . ITagEntry < T > dummyEntry = new Tag . ListEntry < > ( Collections . singletonList ( valueGetter . apply ( rl ) ) ) ; 
 + builder . remove ( dummyEntry ) ; 
 + } 
 + } else 
 + { 
 + Tag . ITagEntry < T > dummyEntry = new Tag . TagEntry < > ( new ResourceLocation ( s . substring ( 1 ) ) ) ; 
 + builder . remove ( dummyEntry ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + private static class OptionalTagEntry < T > extends Tag . TagEntry < T > 
 + { 
 + private Tag < T > resolvedTag = null ; 
 + 
 + OptionalTagEntry ( ResourceLocation referent ) 
 + { 
 + super ( referent ) ; 
 + } 
 + 
 + @ Override 
 + public boolean resolve ( @ Nonnull Function < ResourceLocation , Tag < T > > resolver ) 
 + { 
 + if ( this . resolvedTag = = null ) 
 + { 
 + this . resolvedTag = resolver . apply ( this . getSerializedId ( ) ) ; 
 + } 
 + return true ; / / never fail if resolver returns null 
 + } 
 + 
 + @ Override 
 + public void populate ( @ Nonnull Collection < T > items ) 
 + { 
 + if ( this . resolvedTag ! = null ) 
 + { 
 + items . addAll ( this . resolvedTag . getAllElements ( ) ) ; 
 + } 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch b / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch 
 new file mode 100644 
 index 0000000 . . d16a9b7 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java . patch 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java 
 + + + + . . / src - work / minecraft / net / minecraft / advancements / critereon / ItemPredicate . java 
 + @ @ - 104 , 6 + 104 , 7 @ @ 
 + if ( p _ 192492 _ 0 _ ! = null & & ! p _ 192492 _ 0 _ . isJsonNull ( ) ) 
 + { 
 + JsonObject jsonobject = JsonUtils . func _ 151210 _ l ( p _ 192492 _ 0 _ , " item " ) ; 
 + + if ( jsonobject . has ( " type " ) ) 
 + + { 
 + + final ResourceLocation rl = new ResourceLocation ( JsonUtils . func _ 151200 _ h ( jsonobject , " type " ) ) ; 
 + + final Map < ResourceLocation , java . util . function . Function < JsonObject , ItemPredicate > > map = net . minecraftforge . advancements . critereon . ItemPredicates . getPredicates ( ) ; 
 + + if ( map . containsKey ( rl ) ) return map . get ( rl ) . apply ( jsonobject ) ; 
 + + else throw new JsonSyntaxException ( " There is no ItemPredicate of type " + rl ) ; 
 + + } 
 + MinMaxBounds minmaxbounds = MinMaxBounds . func _ 192515 _ a ( jsonobject . get ( " count " ) ) ; 
 + MinMaxBounds minmaxbounds1 = MinMaxBounds . func _ 192515 _ a ( jsonobject . get ( " durability " ) ) ; 
 + Integer integer = jsonobject . has ( " data " ) ? JsonUtils . func _ 151203 _ m ( jsonobject , " data " ) : null ; 
 diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java 
 new file mode 100644 
 index 0000000 . . ff551e0 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . advancements . critereon ; 
 + 
 + import com . google . gson . JsonObject ; 
 + import gnu . trove . map . hash . THashMap ; 
 + import net . minecraft . advancements . critereon . ItemPredicate ; 
 + import net . minecraft . util . ResourceLocation ; 
 + 
 + import java . util . Collections ; 
 + import java . util . Map ; 
 + import java . util . function . Function ; 
 + 
 + public class ItemPredicates 
 + { 
 + private static final Map < ResourceLocation , Function < JsonObject , ItemPredicate > > predicates = new THashMap < > ( ) ; 
 + 
 + static 
 + { 
 + register ( new ResourceLocation ( " forge : ore _ dict " ) , OredictItemPredicate : : new ) ; 
 + } 
 + 
 + public static void register ( ResourceLocation rl , Function < JsonObject , ItemPredicate > jsonToPredicate ) 
 + { 
 + predicates . put ( rl , jsonToPredicate ) ; 
 + } 
 + 
 + public static Map < ResourceLocation , Function < JsonObject , ItemPredicate > > getPredicates ( ) 
 + { 
 + return Collections . unmodifiableMap ( predicates ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java b / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java 
 new file mode 100644 
 index 0000000 . . 9c36975 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / advancements / critereon / OredictItemPredicate . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . advancements . critereon ; 
 + 
 + 
 + import com . google . gson . JsonObject ; 
 + import net . minecraft . util . JsonUtils ; 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 + 
 + import net . minecraft . advancements . critereon . ItemPredicate ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . oredict . OreDictionary ; 
 + 
 + / * * 
 + * An { @ link ItemPredicate } that matches oredicts . 
 + * / 
 + public class OredictItemPredicate extends ItemPredicate 
 + { 
 + private final String ore ; 
 + 
 + public OredictItemPredicate ( String ore ) 
 + { 
 + this . ore = ore ; 
 + } 
 + 
 + public OredictItemPredicate ( JsonObject jsonObject ) { this ( JsonUtils . getString ( jsonObject , " ore " ) ) ; } 
 + 
 + @ Override 
 + public boolean test ( ItemStack stack ) 
 + { 
 + return ! stack . isEmpty ( ) & & ArrayUtils . contains ( OreDictionary . getOreIDs ( stack ) , OreDictionary . getOreID ( ore ) ) ; 
 + } 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java b / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java 
 new file mode 100644 
 index 0000000 . . 07c154b 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / OredictItemPredicateTest . java 
 @ @ - 0 , 0 + 1 , 198 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import com . google . gson . JsonDeserializationContext ; 
 + import com . google . gson . JsonObject ; 
 + import net . minecraft . advancements . CriteriaTriggers ; 
 + import net . minecraft . advancements . ICriterionTrigger ; 
 + import net . minecraft . advancements . PlayerAdvancements ; 
 + import net . minecraft . advancements . critereon . AbstractCriterionInstance ; 
 + import net . minecraft . entity . player . EntityPlayerMP ; 
 + import net . minecraft . entity . player . InventoryPlayer ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . event . entity . EntityJoinWorldEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + import java . lang . invoke . MethodHandle ; 
 + import java . lang . invoke . MethodHandles ; 
 + import java . lang . reflect . Method ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + 
 + / * * 
 + * Most of the real work is in the advancements directory of this mod . 
 + * This mod tests ore - dict advancement triggers . 
 + * / 
 + @ Mod . EventBusSubscriber 
 + @ Mod ( modid = OredictItemPredicateTest . MODID , name = " Oredict Item Predicate Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class OredictItemPredicateTest 
 + { 
 + public static final String MODID = " oredict _ predicate " ; 
 + 
 + static final boolean ENABLED = false ; 
 + 
 + private static final MethodHandle ctRegister ; 
 + static 
 + { 
 + try 
 + { 
 + final Method tmp = CriteriaTriggers . class . getDeclaredMethod ( " register " / * func _ 192118 _ a * / , ICriterionTrigger . class ) ; 
 + tmp . setAccessible ( true ) ; 
 + ctRegister = MethodHandles . lookup ( ) . unreflect ( tmp ) ; 
 + } 
 + catch ( Throwable e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + public static final EnabledTrigger ENABLED _ TRIGGER ; 
 + static 
 + { 
 + try 
 + { 
 + ENABLED _ TRIGGER = ( EnabledTrigger ) ( ICriterionTrigger ) ctRegister . invokeExact ( ( ICriterionTrigger ) new EnabledTrigger ( ) ) ; 
 + } 
 + catch ( Throwable e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + / / trigger the enabled advancement on player entry 
 + @ SubscribeEvent 
 + public static void triggerAdv ( EntityJoinWorldEvent event ) 
 + { 
 + if ( event . getEntity ( ) instanceof EntityPlayerMP ) 
 + { 
 + final EntityPlayerMP player = ( EntityPlayerMP ) event . getEntity ( ) ; 
 + ENABLED _ TRIGGER . trigger ( player , player . inventory ) ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 + * Far more work than expected … oh well . 
 + * / 
 + public static class EnabledTrigger implements ICriterionTrigger < EnabledTrigger . Instance > 
 + { 
 + public static final ResourceLocation ID = new ResourceLocation ( MODID , " is _ enabled " ) ; 
 + private final Map < PlayerAdvancements , Listeners > listeners = new HashMap < > ( ) ; 
 + 
 + @ Override 
 + public ResourceLocation getId ( ) 
 + { 
 + return ID ; 
 + } 
 + 
 + @ Override 
 + public void addListener ( PlayerAdvancements playerAdvancementsIn , Listener < Instance > listener ) 
 + { 
 + Listeners listeners = this . listeners . computeIfAbsent ( playerAdvancementsIn , Listeners : : new ) ; 
 + 
 + listeners . add ( listener ) ; 
 + } 
 + 
 + @ Override 
 + public void removeListener ( PlayerAdvancements playerAdvancementsIn , Listener < Instance > listener ) 
 + { 
 + Listeners listeners = this . listeners . get ( playerAdvancementsIn ) ; 
 + 
 + if ( listeners ! = null ) 
 + { 
 + listeners . remove ( listener ) ; 
 + 
 + if ( listeners . isEmpty ( ) ) 
 + { 
 + this . listeners . remove ( playerAdvancementsIn ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public void removeAllListeners ( PlayerAdvancements playerAdvancementsIn ) 
 + { 
 + this . listeners . remove ( playerAdvancementsIn ) ; 
 + } 
 + 
 + @ Override 
 + public Instance deserializeInstance ( JsonObject json , JsonDeserializationContext context ) 
 + { 
 + return new Instance ( ) ; 
 + } 
 + 
 + public void trigger ( EntityPlayerMP player , InventoryPlayer inventory ) 
 + { 
 + Listeners listeners = this . listeners . get ( player . getAdvancements ( ) ) ; 
 + 
 + if ( listeners ! = null ) 
 + { 
 + listeners . trigger ( inventory ) ; 
 + } 
 + } 
 + 
 + public static class Instance extends AbstractCriterionInstance 
 + { 
 + public Instance ( ) 
 + { 
 + super ( ID ) ; 
 + } 
 + } 
 + 
 + static class Listeners 
 + { 
 + private final PlayerAdvancements playerAdvancements ; 
 + private final Set < Listener < Instance > > listeners = new HashSet < > ( ) ; 
 + 
 + public Listeners ( PlayerAdvancements playerAdvancementsIn ) 
 + { 
 + this . playerAdvancements = playerAdvancementsIn ; 
 + } 
 + 
 + public boolean isEmpty ( ) 
 + { 
 + return this . listeners . isEmpty ( ) ; 
 + } 
 + 
 + public void add ( ICriterionTrigger . Listener < Instance > listener ) 
 + { 
 + this . listeners . add ( listener ) ; 
 + } 
 + 
 + public void remove ( ICriterionTrigger . Listener < Instance > listener ) 
 + { 
 + this . listeners . remove ( listener ) ; 
 + } 
 + 
 + public void trigger ( InventoryPlayer inventory ) 
 + { 
 + List < Listener < Instance > > list = null ; 
 + 
 + for ( ICriterionTrigger . Listener < Instance > listener : this . listeners ) 
 + { 
 + if ( ENABLED ) 
 + { 
 + if ( list = = null ) 
 + { 
 + list = new ArrayList < > ( ) ; 
 + } 
 + 
 + list . add ( listener ) ; 
 + } 
 + } 
 + 
 + if ( list ! = null ) 
 + { 
 + for ( ICriterionTrigger . Listener < Instance > listener1 : list ) 
 + { 
 + listener1 . grantCriterion ( this . playerAdvancements ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json b / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json 
 new file mode 100644 
 index 0000000 . . 396bf2b 
 - - - / dev / null 
 + + + b / src / test / resources / assets / oredict _ predicate / advancements / recipes / wood _ unlock _ tnt . json 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + { 
 + " parent " : " minecraft : recipes / root " , 
 + " rewards " : { 
 + " recipes " : [ " minecraft : tnt " ] 
 + } , 
 + " criteria " : { 
 + " has _ wood " : { 
 + " trigger " : " minecraft : inventory _ changed " , 
 + " conditions " : { 
 + " items " : [ 
 + { 
 + " type " : " forge : ore _ dict " , 
 + " ore " : " plankWood " 
 + } 
 + ] 
 + } 
 + } , 
 + " mod _ enabled " : { 
 + " trigger " : " oredict _ predicate : is _ enabled " , 
 + " conditions " : { } 
 + } 
 + } , 
 + " requirements " : [ [ " has _ wood " ] , [ " mod _ enabled " ] ] 
 + }
