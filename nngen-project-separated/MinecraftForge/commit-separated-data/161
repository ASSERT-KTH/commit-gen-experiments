BLEU SCORE: 0.08116697886877475

TEST MSG: Include changelog in published artifacts .
GENERATED MSG: Work on installer json generation .

TEST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> index bce33ac . . a070d06 100644 <nl> - - - a / Jenkinsfile <nl> + + + b / Jenkinsfile <nl> @ @ - 31 , 7 + 31 , 6 @ @ pipeline { <nl> post { <nl> success { <nl> writeChangelog ( currentBuild , ' build / changelog . txt ' ) <nl> - archiveArtifacts artifacts : ' build / changelog . txt ' , fingerprint : false <nl> } <nl> } <nl> } <nl> @ @ - 61 , 7 + 60 , 7 @ @ pipeline { <nl> } <nl> post { <nl> always { <nl> - archiveArtifacts artifacts : ' projects / forge / build / libs / * * / * . jar ' , fingerprint : true <nl> + archiveArtifacts artifacts : ' projects / forge / build / libs / * * / * . * ' , fingerprint : true <nl> / / junit ' build / test - results / * / * . xml ' <nl> / / jacoco sourcePattern : ' * * / src / * / java ' <nl> } <nl> diff - - git a / build . gradle b / build . gradle <nl> index eb90f13 . . 6ecdfca 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 39 , 12 + 39 , 16 @ @ ext { <nl> keystore : project . properties . keystore <nl> ] <nl> } <nl> + MAPPING _ CHANNEL = ' snapshot ' <nl> + MAPPING _ VERSION = ' 20180921 - 1 . 13 ' <nl> + MC _ VERSION = ' 1 . 13 ' <nl> + MCP _ VERSION = ' 2018 . 09 . 12 . 04 . 11 . 00 ' <nl> } <nl> <nl> project ( ' : mcp ' ) { <nl> apply plugin : ' net . minecraftforge . gradle . forgedev . mcp ' <nl> mcp { <nl> - config = ' 1 . 13 - 2018 . 09 . 12 . 04 . 11 . 00 ' <nl> + config = MC _ VERSION + ' - ' + MCP _ VERSION <nl> pipeline = ' joined ' <nl> } <nl> } <nl> @ @ - 59 , 8 + 63 , 8 @ @ project ( ' : clean ' ) { <nl> patcher { <nl> parent = project ( ' : mcp ' ) <nl> patchedSrc = file ( ' src / main / java ' ) <nl> - mappings channel : ' snapshot ' , version : ' 20180921 - 1 . 13 ' <nl> - mcVersion = ' 1 . 13 ' <nl> + mappings channel : MAPPING _ CHANNEL , version : MAPPING _ VERSION <nl> + mcVersion = MC _ VERSION <nl> } <nl> task runclient ( type : JavaExec ) { <nl> doFirst { <nl> @ @ - 99 , 13 + 103 , 11 @ @ project ( ' : forge ' ) { <nl> mavenCentral ( ) <nl> } <nl> ext { <nl> - MC _ VERSION = ' 1 . 13 ' <nl> SPEC _ VERSION = ' 24 . 0 ' / / This is overwritten by git tag , but here so dev time doesnt explode <nl> / / The new versioning sceme is < MCVersion > - < ForgeMC > . < RB > . < CommitsSinceRB > <nl> / / ForgeMC is a unique identifier for every MC version we have supported . <nl> / / Essentially , the same as the old , except dropping the first number , and the builds are no longer unique . <nl> MCP _ ARTIFACT = project ( ' : mcp ' ) . mcp . config <nl> - MCP _ VERSION = project ( ' : mcp ' ) . mcp . config . version . split ( ' - ' ) [ 1 ] / / The timestamp only . <nl> } <nl> patcher { <nl> parent = project ( ' : clean ' ) <nl> @ @ - 145 , 7 + 147 , 7 @ @ project ( ' : forge ' ) { <nl> if ( branch ! = null & & branch . endsWith ( ' . x ' ) & & MC _ VERSION . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) / / 1 . 13 . x <nl> branch = null <nl> SPEC _ VERSION = tag <nl> - return " $ { MC _ VERSION } - $ { tag } . $ { offset } $ { t - > if ( branch ! = null ) t < < ' - ' + branch } " <nl> + return " $ { MC _ VERSION } - $ { tag } . $ { offset } $ { t - > if ( branch ! = null ) t < < ' - ' + branch } " . toString ( ) / / Bake the response instead of making it dynamic <nl> } <nl> <nl> group = ' net . minecraftforge . test ' / / TODO : remove when we jenkins is working <nl> @ @ - 239 , 10 + 241 , 16 @ @ project ( ' : forge ' ) { <nl> rootProject . file ( ' CREDITS . txt ' ) , <nl> rootProject . file ( ' LICENSE . txt ' ) <nl> ] <nl> - / * TODO : Changelog <nl> - if ( project . hasProperty ( ' forgeJenkinsPass ' ) ) <nl> + <nl> + def jenkinsChangelog = rootProject . file ( ' build / changelog . txt ' ) <nl> + def changelog = file ( " build / libs / $ { project . name } - $ { project . version } - changelog . txt " ) <nl> + if ( jenkinsChangelog . exists ( ) ) { <nl> + if ( ! changelog . parentFile . exists ( ) ) <nl> + changelog . parentFile . mkdirs ( ) <nl> + java . nio . file . Files . copy ( jenkinsChangelog . toPath ( ) , changelog . toPath ( ) , java . nio . file . StandardCopyOption . REPLACE _ EXISTING ) <nl> extraTxts + = changelog <nl> - * / <nl> + println extraTxts <nl> + } <nl> <nl> task downloadCrowdin ( ) { <nl> ext { <nl> @ @ - 351 , 7 + 359 , 7 @ @ project ( ' : forge ' ) { <nl> task launcherJson ( dependsOn : ' signUniversal ' ) { <nl> inputs . file universalJar . archivePath <nl> ext { <nl> - output = file ( ' build / libs / version . json ' ) <nl> + output = file ( ' build / version . json ' ) <nl> vanilla = project ( ' : mcp ' ) . file ( ' build / mcp / downloadJson / version . json ' ) <nl> timestamp = dateToIso8601 ( new Date ( ) ) <nl> comment = [ <nl> @ @ - 413 , 7 + 421 , 7 @ @ project ( ' : forge ' ) { <nl> <nl> task installerJson ( dependsOn : [ launcherJson , genClientBinPatches , applyClientBinPatches , applyServerBinPatches ] ) { <nl> ext { <nl> - output = file ( ' build / libs / install _ profile . json ' ) <nl> + output = file ( ' build / install _ profile . json ' ) <nl> INSTALLER _ TOOLS = ' net . minecraftforge : installertools : 1 . 0 . 3 ' <nl> JAR _ SPLITTER = ' net . minecraftforge : jarsplitter : 1 . 0 . 4 ' <nl> } <nl> @ @ - 640 , 6 + 648 , 7 @ @ project ( ' : forge ' ) { <nl> task installerJar ( type : Zip , dependsOn : [ downloadInstaller , signUniversal , installerJson , launcherJson , genClientBinPatches , genServerBinPatches ] ) { <nl> classifier = ' installer ' <nl> extension = ' jar ' / / Needs to be Zip task to not override Manifest , so set extension <nl> + destinationDir = file ( ' build / libs ' ) <nl> from ( extraTxts ) <nl> from ( rootProject . file ( ' / src / main / resources / forge _ logo . png ' ) ) { <nl> rename { ' big _ logo . png ' } <nl> @ @ - 683 , 7 + 692 , 7 @ @ project ( ' : forge ' ) { <nl> baseName = project . name <nl> classifier = ' mdk ' <nl> version = project . version <nl> - destinationDir = file ( ' build / distributions ' ) <nl> + destinationDir = file ( ' build / libs ' ) <nl> <nl> from rootProject . file ( ' gradlew ' ) <nl> from rootProject . file ( ' gradlew . bat ' ) <nl> @ @ - 692 , 10 + 701 , 16 @ @ project ( ' : forge ' ) { <nl> into ( ' gradle / ' ) <nl> } <nl> from ( rootProject . file ( ' mdk / ' ) ) { <nl> - / * filter ( ReplaceTokens , tokens : [ <nl> - VERSION : project . version <nl> + rootProject . file ( ' mdk / gitignore . txt ' ) . eachLine { <nl> + if ( ! it . trim ( ) . isEmpty ( ) & & ! it . trim ( ) . startsWith ( ' # ' ) ) <nl> + exclude it <nl> + } <nl> + filter ( ReplaceTokens , tokens : [ <nl> + FORGE _ VERSION : project . version , <nl> + MC _ VERSION : MC _ VERSION , <nl> + MAPPING _ CHANNEL : MAPPING _ CHANNEL , <nl> + MAPPING _ VERSION : MAPPING _ VERSION <nl> ] ) <nl> - * / <nl> rename ' gitignore \ \ . txt ' , ' . gitignore ' <nl> } <nl> } <nl> @ @ - 732 , 7 + 747 , 8 @ @ project ( ' : forge ' ) { <nl> publications { <nl> mavenJava ( MavenPublication ) { <nl> artifact universalJar <nl> - / / TODO : changelog <nl> + if ( changelog . exists ( ) ) <nl> + artifact changelog <nl> artifact installerJar <nl> / / TODO : installer - win <nl> artifact makeMdk <nl> diff - - git a / mdk / build . gradle b / mdk / build . gradle <nl> index 8298de6 . . 58be6a5 100644 <nl> - - - a / mdk / build . gradle <nl> + + + b / mdk / build . gradle <nl> @ @ - 20 , 10 + 20 , 6 @ @ apply plugin : ' net . minecraftforge . gradle ' <nl> / / Only edit below this line , the above code adds and enables the necessary things for Forge to be setup . <nl> apply plugin : ' eclipse ' <nl> <nl> - repositories { <nl> - maven { url = ' file : / / ' + file ( ' . . / repo ' ) . absolutePath } / / Used by Forge development testing only , you can delete this . <nl> - } <nl> - <nl> version = ' 1 . 0 ' <nl> group = ' com . yourname . modid ' / / http : / / maven . apache . org / guides / mini / guide - naming - conventions . html <nl> archivesBaseName = ' modid ' <nl> @ @ - 39 , 16 + 35 , 16 @ @ minecraft { <nl> / / stable _ # stables are built at the discretion of the MCP team . <nl> / / Use non - default mappings at your own risk . they may not always work . <nl> / / simply re - run your setup task after changing the mappings to update your workspace . <nl> - mappings channel : ' snapshot ' , version : ' 20180921 - 1 . 13 ' <nl> + mappings channel : ' @ MAPPING _ CHANNEL @ ' , version : ' @ MAPPING _ VERSION @ ' <nl> / / makeObfSourceJar = false / / an Srg named sources jar is made by default . uncomment this to disable . <nl> <nl> - accessTransformer = file ( ' test _ at . cfg ' ) <nl> + / / accessTransformer = file ( ' my _ at . cfg ' ) <nl> } <nl> <nl> dependencies { <nl> / / Specify the version of Minecraft to use , If this is any group other then ' net . minecraft ' it is assumed <nl> / / that the dep is a ForgeGradle ' patcher ' dependency . And it ' s patches will be applied . <nl> - minecraft ' net . minecraftforge : forge : 1 . 13 - 15 . 24 . 0 . 0 - 1 . 13 - pre ' <nl> + minecraft ' net . minecraftforge : forge : @ FORGE _ VERSION @ ' <nl> <nl> / / you may put jars on which you depend on in . / libs <nl> / / or you may define them like so . . <nl> @ @ - 76 , 14 + 72 , 14 @ @ dependencies { <nl> processResources { <nl> / / this will ensure that this task is redone when the versions change . <nl> inputs . property ' version ' , project . version <nl> - inputs . property ' mcversion ' , ' 1 . 13 ' <nl> + inputs . property ' mcversion ' , ' @ MC _ VERSION @ ' <nl> <nl> / / replace stuff in mcmod . info , nothing else <nl> from ( sourceSets . main . resources . srcDirs ) { <nl> include ' mcmod . info ' <nl> <nl> / / replace version and mcversion <nl> - expand ' version ' : project . version , ' mcversion ' : ' 1 . 13 ' <nl> + expand ' version ' : project . version , ' mcversion ' : ' @ MC _ VERSION @ ' <nl> } <nl> <nl> / / copy everything else except the mcmod . info <nl> diff - - git a / mdk / gitignore . txt b / mdk / gitignore . txt <nl> index 2c770e0 . . 12f8644 100644 <nl> - - - a / mdk / gitignore . txt <nl> + + + b / mdk / gitignore . txt <nl> @ @ - 20 , 3 + 20 , 6 @ @ build <nl> # other <nl> eclipse <nl> run <nl> + <nl> + # Files from Forge MDK <nl> + forge * changelog . txt <nl> diff - - git a / mdk / test _ at . cfg b / mdk / test _ at . cfg <nl> deleted file mode 100644 <nl> index fe3639d . . 0000000 <nl> - - - a / mdk / test _ at . cfg <nl> + + + / dev / null <nl> @ @ - 1 + 0 , 0 @ @ <nl> - public net . minecraft . block . Block field _ 196273 _ d # LOGGER <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / LICENSE . txt b / LICENSE . txt <nl> index 97b081b . . 7788a39 100644 <nl> - - - a / LICENSE . txt <nl> + + + b / LICENSE . txt <nl> @ @ - 57 , 12 + 57 , 6 @ @ This software contains a partial repackaging of javaxdelta , a BSD licensed progr <nl> binary differences and applying them , sourced from the subversion at http : / / sourceforge . net / projects / javaxdelta / <nl> authored by genman , heikok , pivot . <nl> The only changes are to replace some Trove collection types with standard Java collections , and repackaged . <nl> - <nl> - This software contains potions of Paulscodee IBXM library , a BSD liceensed library for <nl> - loading and playing IBXM formated auto . No modifications havee beeen made . The associated <nl> - licenses can be found along side this one , or at <nl> - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20IBXM % 20Library . txt <nl> - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20SoundSystem % 20CodecIBXM . txt <nl> = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = <nl> <nl> <nl> diff - - git a / build . gradle b / build . gradle <nl> index b126b9e . . ab9bfad 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 14 , 6 + 14 , 7 @ @ import groovy . json . JsonBuilder <nl> import java . text . SimpleDateFormat <nl> import java . util . Date <nl> import java . security . MessageDigest <nl> + import java . net . URL <nl> import net . minecraftforge . gradle . common . task . SignJar <nl> import org . apache . tools . ant . filters . ReplaceTokens <nl> import de . undercouch . gradle . tasks . download . Download <nl> @ @ - 289 , 32 + 290 , 9 @ @ project ( ' : forge ' ) { <nl> ' java3d : vecmath ' <nl> ] <nl> def mojang = [ ] <nl> - <nl> - project . configurations . compileClasspath . resolvedConfiguration . resolvedArtifacts . each { <nl> - def art = [ <nl> - group : it . moduleVersion . id . group , <nl> - name : it . moduleVersion . id . name , <nl> - version : it . moduleVersion . id . version , <nl> - classifier : it . classifier , <nl> - extension : it . extension , <nl> - file : it . file <nl> - ] <nl> - def key = art . group + ' : ' + art . name <nl> + def artifacts = getArtifacts ( project , project . configurations . compileClasspath ) <nl> + artifacts . each { key , lib - > <nl> if ( forge . contains ( key ) | | mojang . contains ( key ) ) { <nl> - def url = forge . contains ( key ) ? " https : / / files . minecraftforge . net / maven / " : " https : / / libraries . minecraft . net / " <nl> - def path = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / $ { art . name } - $ { art . version } " <nl> - if ( art . classifier ! = null ) <nl> - path + = " - $ { art . classifier } " <nl> - path + = " . $ { art . extension } " <nl> - def lib = [ <nl> - name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , <nl> - downloads : [ <nl> - path : path , <nl> - url : url + path , <nl> - sha1 : sha1 ( art . file ) , <nl> - size : art . file . length ( ) <nl> - ] <nl> - ] <nl> json . libraries . add ( lib ) <nl> } <nl> } <nl> @ @ - 325 , 21 + 303 , 87 @ @ project ( ' : forge ' ) { <nl> <nl> task installerJson ( ) { <nl> ext { <nl> - output = file ( ' build / libs / installer . json ' ) <nl> + output = file ( ' build / libs / install _ profile . json ' ) <nl> } <nl> dependsOn launcherJson <nl> inputs . file launcherJson . output <nl> outputs . file output <nl> doLast { <nl> + def idx = project . version . indexOf ( ' - ' ) <nl> def json = [ <nl> - install : [ <nl> - _ comment _ : launcherJson . comment , <nl> - profileName : project . name , <nl> - version : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , <nl> - json : ' / version . json ' , <nl> - logo : ' / big _ logo . png ' <nl> + _ comment _ : launcherJson . comment , <nl> + profile : project . name , <nl> + version : project . version . substring ( 0 , idx ) + " - $ { project . name } " + project . version . substring ( idx ) , <nl> + json : ' / version . json ' , <nl> + path : " $ { project . group } : $ { project . name } : $ { project . version } " , <nl> + logo : ' / big _ logo . png ' , <nl> + minecraft : patcher . mcVersion , <nl> + welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , <nl> + processors : [ ] , <nl> + data : [ <nl> + MAPPINGS : [ <nl> + client : ' / data / joined . tsrg ' , <nl> + server : ' / data / joined . tsrg ' <nl> + ] , <nl> + BINPATCH : [ <nl> + client : ' / data / client . lzma ' , <nl> + server : ' / data / server . lzma ' <nl> + ] , <nl> + MC _ SLIM : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } : slim ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } : slim ] " <nl> + ] , <nl> + MC _ DATA : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } : data ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } : data ] " <nl> + ] , <nl> + MC _ EXTRA : [ <nl> + client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , <nl> + server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " <nl> + ] , <nl> + PATCHED : [ <nl> + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - patched ] " , <nl> + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - patched ] " <nl> + ] , <nl> + REMAPPED : [ <nl> + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - srg ] " , <nl> + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - srg ] " <nl> + ] <nl> ] <nl> ] <nl> + def libs = [ : ] <nl> + json . processors . add ( [ <nl> + jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , <nl> + args : [ <nl> + ' - - input ' , ' { MINECRAFT _ JAR } ' , <nl> + ' - - slim ' , " { MC _ SLIM } " , <nl> + ' - - data ' , " { MC _ DATA } " , <nl> + ' - - extra ' , " { MC _ EXTRA } " , <nl> + ' - - srg ' , ' { MAPPINGS } ' <nl> + ] <nl> + ] ) <nl> + json . processors . add ( [ <nl> + jar : ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' ) , <nl> + args : [ <nl> + ' - - clean ' , ' { MC _ SLIM } ' , <nl> + ' - - output ' , ' { PATCHED } ' , <nl> + ' - - apply ' , ' { BINPATCH } ' <nl> + ] <nl> + ] ) <nl> + json . processors . add ( [ <nl> + jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , <nl> + classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , <nl> + args : [ <nl> + ' - - in - jar ' , ' { PATCHED } ' , <nl> + ' - - out - jar ' , ' { REMAPPED } ' , <nl> + ' - - srg - in ' , ' { MAPPINGS } ' <nl> + ] <nl> + ] ) <nl> + <nl> + json . libraries = libs . values ( ) <nl> + <nl> output . text = new JsonBuilder ( json ) . toPrettyString ( ) <nl> } <nl> } <nl> @ @ - 556 , 12 + 600 , 90 @ @ def dateToIso8601 ( date ) { <nl> def result = format . format ( date ) <nl> return result [ 0 . . 21 ] + ' : ' + result [ 22 . . - 1 ] <nl> } <nl> + <nl> def sha1 ( file ) { <nl> - MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; <nl> + MessageDigest md = MessageDigest . getInstance ( ' SHA - 1 ' ) <nl> file . eachByte 4096 , { bytes , size - > <nl> - md . update ( bytes , 0 , size ) ; <nl> + md . update ( bytes , 0 , size ) <nl> + } <nl> + return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) <nl> + } <nl> + <nl> + def artifactTree ( project , artifact ) { <nl> + if ( ! project . ext . has ( ' tree _ resolver ' ) ) <nl> + project . ext . tree _ resolver = 1 <nl> + def cfg = project . configurations . create ( ' tree _ resolver _ ' + project . ext . tree _ resolver + + ) <nl> + def dep = project . dependencies . create ( artifact ) <nl> + cfg . dependencies . add ( dep ) <nl> + def files = cfg . resolve ( ) <nl> + return getArtifacts ( project , cfg ) <nl> + } <nl> + <nl> + def getArtifacts ( project , config ) { <nl> + def ret = [ : ] <nl> + config . resolvedConfiguration . resolvedArtifacts . each { <nl> + def art = [ <nl> + group : it . moduleVersion . id . group , <nl> + name : it . moduleVersion . id . name , <nl> + version : it . moduleVersion . id . version , <nl> + classifier : it . classifier , <nl> + extension : it . extension , <nl> + file : it . file <nl> + ] <nl> + def key = art . group + ' : ' + art . name <nl> + def folder = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / " <nl> + def filename = " $ { art . name } - $ { art . version } " <nl> + if ( art . classifier ! = null ) <nl> + filename + = " - $ { art . classifier } " <nl> + filename + = " . $ { art . extension } " <nl> + def path = " $ { folder } $ { filename } " <nl> + def url = " https : / / libraries . minecraft . net / $ { path } " <nl> + if ( ! checkExists ( url ) ) { <nl> + url = " https : / / files . minecraftforge . net / maven / $ { path } " <nl> + / * <nl> + project . logger . lifecycle ( " Artifact : $ { path } " ) <nl> + def repo = project . file ( " build / dep _ repo / $ { folder } " ) <nl> + repo . mkdirs ( ) <nl> + copy { <nl> + from art . file <nl> + into folder <nl> + rename { filename } <nl> + } <nl> + project . file ( " build / dep _ repo / $ { path } . sha1 " ) . text = sha1 ( it . file ) <nl> + * / <nl> + } <nl> + ret [ key ] = [ <nl> + name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , <nl> + downloads : [ <nl> + artifact : [ <nl> + path : path , <nl> + url : url , <nl> + sha1 : sha1 ( art . file ) , <nl> + size : art . file . length ( ) <nl> + ] <nl> + ] <nl> + ] <nl> + } <nl> + return ret <nl> + } <nl> + <nl> + def checkExists ( url ) { <nl> + def code = new URL ( url ) . openConnection ( ) . with { <nl> + requestMethod = ' HEAD ' <nl> + connect ( ) <nl> + responseCode <nl> + } <nl> + return code = = 200 <nl> + } <nl> + <nl> + def getClasspath ( project , libs , artifact ) { <nl> + def ret = [ ] <nl> + artifactTree ( project , artifact ) . each { key , lib - > <nl> + libs [ lib . name ] = lib <nl> + if ( lib . name ! = artifact ) <nl> + ret . add ( lib . name ) <nl> } <nl> - return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) ; <nl> + return ret <nl> } <nl> <nl> / / evaluationDependsOnChildren ( )

TEST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 index bce33ac . . a070d06 100644 
 - - - a / Jenkinsfile 
 + + + b / Jenkinsfile 
 @ @ - 31 , 7 + 31 , 6 @ @ pipeline { 
 post { 
 success { 
 writeChangelog ( currentBuild , ' build / changelog . txt ' ) 
 - archiveArtifacts artifacts : ' build / changelog . txt ' , fingerprint : false 
 } 
 } 
 } 
 @ @ - 61 , 7 + 60 , 7 @ @ pipeline { 
 } 
 post { 
 always { 
 - archiveArtifacts artifacts : ' projects / forge / build / libs / * * / * . jar ' , fingerprint : true 
 + archiveArtifacts artifacts : ' projects / forge / build / libs / * * / * . * ' , fingerprint : true 
 / / junit ' build / test - results / * / * . xml ' 
 / / jacoco sourcePattern : ' * * / src / * / java ' 
 } 
 diff - - git a / build . gradle b / build . gradle 
 index eb90f13 . . 6ecdfca 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 39 , 12 + 39 , 16 @ @ ext { 
 keystore : project . properties . keystore 
 ] 
 } 
 + MAPPING _ CHANNEL = ' snapshot ' 
 + MAPPING _ VERSION = ' 20180921 - 1 . 13 ' 
 + MC _ VERSION = ' 1 . 13 ' 
 + MCP _ VERSION = ' 2018 . 09 . 12 . 04 . 11 . 00 ' 
 } 
 
 project ( ' : mcp ' ) { 
 apply plugin : ' net . minecraftforge . gradle . forgedev . mcp ' 
 mcp { 
 - config = ' 1 . 13 - 2018 . 09 . 12 . 04 . 11 . 00 ' 
 + config = MC _ VERSION + ' - ' + MCP _ VERSION 
 pipeline = ' joined ' 
 } 
 } 
 @ @ - 59 , 8 + 63 , 8 @ @ project ( ' : clean ' ) { 
 patcher { 
 parent = project ( ' : mcp ' ) 
 patchedSrc = file ( ' src / main / java ' ) 
 - mappings channel : ' snapshot ' , version : ' 20180921 - 1 . 13 ' 
 - mcVersion = ' 1 . 13 ' 
 + mappings channel : MAPPING _ CHANNEL , version : MAPPING _ VERSION 
 + mcVersion = MC _ VERSION 
 } 
 task runclient ( type : JavaExec ) { 
 doFirst { 
 @ @ - 99 , 13 + 103 , 11 @ @ project ( ' : forge ' ) { 
 mavenCentral ( ) 
 } 
 ext { 
 - MC _ VERSION = ' 1 . 13 ' 
 SPEC _ VERSION = ' 24 . 0 ' / / This is overwritten by git tag , but here so dev time doesnt explode 
 / / The new versioning sceme is < MCVersion > - < ForgeMC > . < RB > . < CommitsSinceRB > 
 / / ForgeMC is a unique identifier for every MC version we have supported . 
 / / Essentially , the same as the old , except dropping the first number , and the builds are no longer unique . 
 MCP _ ARTIFACT = project ( ' : mcp ' ) . mcp . config 
 - MCP _ VERSION = project ( ' : mcp ' ) . mcp . config . version . split ( ' - ' ) [ 1 ] / / The timestamp only . 
 } 
 patcher { 
 parent = project ( ' : clean ' ) 
 @ @ - 145 , 7 + 147 , 7 @ @ project ( ' : forge ' ) { 
 if ( branch ! = null & & branch . endsWith ( ' . x ' ) & & MC _ VERSION . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) / / 1 . 13 . x 
 branch = null 
 SPEC _ VERSION = tag 
 - return " $ { MC _ VERSION } - $ { tag } . $ { offset } $ { t - > if ( branch ! = null ) t < < ' - ' + branch } " 
 + return " $ { MC _ VERSION } - $ { tag } . $ { offset } $ { t - > if ( branch ! = null ) t < < ' - ' + branch } " . toString ( ) / / Bake the response instead of making it dynamic 
 } 
 
 group = ' net . minecraftforge . test ' / / TODO : remove when we jenkins is working 
 @ @ - 239 , 10 + 241 , 16 @ @ project ( ' : forge ' ) { 
 rootProject . file ( ' CREDITS . txt ' ) , 
 rootProject . file ( ' LICENSE . txt ' ) 
 ] 
 - / * TODO : Changelog 
 - if ( project . hasProperty ( ' forgeJenkinsPass ' ) ) 
 + 
 + def jenkinsChangelog = rootProject . file ( ' build / changelog . txt ' ) 
 + def changelog = file ( " build / libs / $ { project . name } - $ { project . version } - changelog . txt " ) 
 + if ( jenkinsChangelog . exists ( ) ) { 
 + if ( ! changelog . parentFile . exists ( ) ) 
 + changelog . parentFile . mkdirs ( ) 
 + java . nio . file . Files . copy ( jenkinsChangelog . toPath ( ) , changelog . toPath ( ) , java . nio . file . StandardCopyOption . REPLACE _ EXISTING ) 
 extraTxts + = changelog 
 - * / 
 + println extraTxts 
 + } 
 
 task downloadCrowdin ( ) { 
 ext { 
 @ @ - 351 , 7 + 359 , 7 @ @ project ( ' : forge ' ) { 
 task launcherJson ( dependsOn : ' signUniversal ' ) { 
 inputs . file universalJar . archivePath 
 ext { 
 - output = file ( ' build / libs / version . json ' ) 
 + output = file ( ' build / version . json ' ) 
 vanilla = project ( ' : mcp ' ) . file ( ' build / mcp / downloadJson / version . json ' ) 
 timestamp = dateToIso8601 ( new Date ( ) ) 
 comment = [ 
 @ @ - 413 , 7 + 421 , 7 @ @ project ( ' : forge ' ) { 
 
 task installerJson ( dependsOn : [ launcherJson , genClientBinPatches , applyClientBinPatches , applyServerBinPatches ] ) { 
 ext { 
 - output = file ( ' build / libs / install _ profile . json ' ) 
 + output = file ( ' build / install _ profile . json ' ) 
 INSTALLER _ TOOLS = ' net . minecraftforge : installertools : 1 . 0 . 3 ' 
 JAR _ SPLITTER = ' net . minecraftforge : jarsplitter : 1 . 0 . 4 ' 
 } 
 @ @ - 640 , 6 + 648 , 7 @ @ project ( ' : forge ' ) { 
 task installerJar ( type : Zip , dependsOn : [ downloadInstaller , signUniversal , installerJson , launcherJson , genClientBinPatches , genServerBinPatches ] ) { 
 classifier = ' installer ' 
 extension = ' jar ' / / Needs to be Zip task to not override Manifest , so set extension 
 + destinationDir = file ( ' build / libs ' ) 
 from ( extraTxts ) 
 from ( rootProject . file ( ' / src / main / resources / forge _ logo . png ' ) ) { 
 rename { ' big _ logo . png ' } 
 @ @ - 683 , 7 + 692 , 7 @ @ project ( ' : forge ' ) { 
 baseName = project . name 
 classifier = ' mdk ' 
 version = project . version 
 - destinationDir = file ( ' build / distributions ' ) 
 + destinationDir = file ( ' build / libs ' ) 
 
 from rootProject . file ( ' gradlew ' ) 
 from rootProject . file ( ' gradlew . bat ' ) 
 @ @ - 692 , 10 + 701 , 16 @ @ project ( ' : forge ' ) { 
 into ( ' gradle / ' ) 
 } 
 from ( rootProject . file ( ' mdk / ' ) ) { 
 - / * filter ( ReplaceTokens , tokens : [ 
 - VERSION : project . version 
 + rootProject . file ( ' mdk / gitignore . txt ' ) . eachLine { 
 + if ( ! it . trim ( ) . isEmpty ( ) & & ! it . trim ( ) . startsWith ( ' # ' ) ) 
 + exclude it 
 + } 
 + filter ( ReplaceTokens , tokens : [ 
 + FORGE _ VERSION : project . version , 
 + MC _ VERSION : MC _ VERSION , 
 + MAPPING _ CHANNEL : MAPPING _ CHANNEL , 
 + MAPPING _ VERSION : MAPPING _ VERSION 
 ] ) 
 - * / 
 rename ' gitignore \ \ . txt ' , ' . gitignore ' 
 } 
 } 
 @ @ - 732 , 7 + 747 , 8 @ @ project ( ' : forge ' ) { 
 publications { 
 mavenJava ( MavenPublication ) { 
 artifact universalJar 
 - / / TODO : changelog 
 + if ( changelog . exists ( ) ) 
 + artifact changelog 
 artifact installerJar 
 / / TODO : installer - win 
 artifact makeMdk 
 diff - - git a / mdk / build . gradle b / mdk / build . gradle 
 index 8298de6 . . 58be6a5 100644 
 - - - a / mdk / build . gradle 
 + + + b / mdk / build . gradle 
 @ @ - 20 , 10 + 20 , 6 @ @ apply plugin : ' net . minecraftforge . gradle ' 
 / / Only edit below this line , the above code adds and enables the necessary things for Forge to be setup . 
 apply plugin : ' eclipse ' 
 
 - repositories { 
 - maven { url = ' file : / / ' + file ( ' . . / repo ' ) . absolutePath } / / Used by Forge development testing only , you can delete this . 
 - } 
 - 
 version = ' 1 . 0 ' 
 group = ' com . yourname . modid ' / / http : / / maven . apache . org / guides / mini / guide - naming - conventions . html 
 archivesBaseName = ' modid ' 
 @ @ - 39 , 16 + 35 , 16 @ @ minecraft { 
 / / stable _ # stables are built at the discretion of the MCP team . 
 / / Use non - default mappings at your own risk . they may not always work . 
 / / simply re - run your setup task after changing the mappings to update your workspace . 
 - mappings channel : ' snapshot ' , version : ' 20180921 - 1 . 13 ' 
 + mappings channel : ' @ MAPPING _ CHANNEL @ ' , version : ' @ MAPPING _ VERSION @ ' 
 / / makeObfSourceJar = false / / an Srg named sources jar is made by default . uncomment this to disable . 
 
 - accessTransformer = file ( ' test _ at . cfg ' ) 
 + / / accessTransformer = file ( ' my _ at . cfg ' ) 
 } 
 
 dependencies { 
 / / Specify the version of Minecraft to use , If this is any group other then ' net . minecraft ' it is assumed 
 / / that the dep is a ForgeGradle ' patcher ' dependency . And it ' s patches will be applied . 
 - minecraft ' net . minecraftforge : forge : 1 . 13 - 15 . 24 . 0 . 0 - 1 . 13 - pre ' 
 + minecraft ' net . minecraftforge : forge : @ FORGE _ VERSION @ ' 
 
 / / you may put jars on which you depend on in . / libs 
 / / or you may define them like so . . 
 @ @ - 76 , 14 + 72 , 14 @ @ dependencies { 
 processResources { 
 / / this will ensure that this task is redone when the versions change . 
 inputs . property ' version ' , project . version 
 - inputs . property ' mcversion ' , ' 1 . 13 ' 
 + inputs . property ' mcversion ' , ' @ MC _ VERSION @ ' 
 
 / / replace stuff in mcmod . info , nothing else 
 from ( sourceSets . main . resources . srcDirs ) { 
 include ' mcmod . info ' 
 
 / / replace version and mcversion 
 - expand ' version ' : project . version , ' mcversion ' : ' 1 . 13 ' 
 + expand ' version ' : project . version , ' mcversion ' : ' @ MC _ VERSION @ ' 
 } 
 
 / / copy everything else except the mcmod . info 
 diff - - git a / mdk / gitignore . txt b / mdk / gitignore . txt 
 index 2c770e0 . . 12f8644 100644 
 - - - a / mdk / gitignore . txt 
 + + + b / mdk / gitignore . txt 
 @ @ - 20 , 3 + 20 , 6 @ @ build 
 # other 
 eclipse 
 run 
 + 
 + # Files from Forge MDK 
 + forge * changelog . txt 
 diff - - git a / mdk / test _ at . cfg b / mdk / test _ at . cfg 
 deleted file mode 100644 
 index fe3639d . . 0000000 
 - - - a / mdk / test _ at . cfg 
 + + + / dev / null 
 @ @ - 1 + 0 , 0 @ @ 
 - public net . minecraft . block . Block field _ 196273 _ d # LOGGER 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / LICENSE . txt b / LICENSE . txt 
 index 97b081b . . 7788a39 100644 
 - - - a / LICENSE . txt 
 + + + b / LICENSE . txt 
 @ @ - 57 , 12 + 57 , 6 @ @ This software contains a partial repackaging of javaxdelta , a BSD licensed progr 
 binary differences and applying them , sourced from the subversion at http : / / sourceforge . net / projects / javaxdelta / 
 authored by genman , heikok , pivot . 
 The only changes are to replace some Trove collection types with standard Java collections , and repackaged . 
 - 
 - This software contains potions of Paulscodee IBXM library , a BSD liceensed library for 
 - loading and playing IBXM formated auto . No modifications havee beeen made . The associated 
 - licenses can be found along side this one , or at 
 - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20IBXM % 20Library . txt 
 - https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 12 . x / LICENSE - Paulscode % 20SoundSystem % 20CodecIBXM . txt 
 = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
 
 
 diff - - git a / build . gradle b / build . gradle 
 index b126b9e . . ab9bfad 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 14 , 6 + 14 , 7 @ @ import groovy . json . JsonBuilder 
 import java . text . SimpleDateFormat 
 import java . util . Date 
 import java . security . MessageDigest 
 + import java . net . URL 
 import net . minecraftforge . gradle . common . task . SignJar 
 import org . apache . tools . ant . filters . ReplaceTokens 
 import de . undercouch . gradle . tasks . download . Download 
 @ @ - 289 , 32 + 290 , 9 @ @ project ( ' : forge ' ) { 
 ' java3d : vecmath ' 
 ] 
 def mojang = [ ] 
 - 
 - project . configurations . compileClasspath . resolvedConfiguration . resolvedArtifacts . each { 
 - def art = [ 
 - group : it . moduleVersion . id . group , 
 - name : it . moduleVersion . id . name , 
 - version : it . moduleVersion . id . version , 
 - classifier : it . classifier , 
 - extension : it . extension , 
 - file : it . file 
 - ] 
 - def key = art . group + ' : ' + art . name 
 + def artifacts = getArtifacts ( project , project . configurations . compileClasspath ) 
 + artifacts . each { key , lib - > 
 if ( forge . contains ( key ) | | mojang . contains ( key ) ) { 
 - def url = forge . contains ( key ) ? " https : / / files . minecraftforge . net / maven / " : " https : / / libraries . minecraft . net / " 
 - def path = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / $ { art . name } - $ { art . version } " 
 - if ( art . classifier ! = null ) 
 - path + = " - $ { art . classifier } " 
 - path + = " . $ { art . extension } " 
 - def lib = [ 
 - name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , 
 - downloads : [ 
 - path : path , 
 - url : url + path , 
 - sha1 : sha1 ( art . file ) , 
 - size : art . file . length ( ) 
 - ] 
 - ] 
 json . libraries . add ( lib ) 
 } 
 } 
 @ @ - 325 , 21 + 303 , 87 @ @ project ( ' : forge ' ) { 
 
 task installerJson ( ) { 
 ext { 
 - output = file ( ' build / libs / installer . json ' ) 
 + output = file ( ' build / libs / install _ profile . json ' ) 
 } 
 dependsOn launcherJson 
 inputs . file launcherJson . output 
 outputs . file output 
 doLast { 
 + def idx = project . version . indexOf ( ' - ' ) 
 def json = [ 
 - install : [ 
 - _ comment _ : launcherJson . comment , 
 - profileName : project . name , 
 - version : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , 
 - json : ' / version . json ' , 
 - logo : ' / big _ logo . png ' 
 + _ comment _ : launcherJson . comment , 
 + profile : project . name , 
 + version : project . version . substring ( 0 , idx ) + " - $ { project . name } " + project . version . substring ( idx ) , 
 + json : ' / version . json ' , 
 + path : " $ { project . group } : $ { project . name } : $ { project . version } " , 
 + logo : ' / big _ logo . png ' , 
 + minecraft : patcher . mcVersion , 
 + welcome : " Welcome to the simple $ { project . name . capitalize ( ) } installer . " , 
 + processors : [ ] , 
 + data : [ 
 + MAPPINGS : [ 
 + client : ' / data / joined . tsrg ' , 
 + server : ' / data / joined . tsrg ' 
 + ] , 
 + BINPATCH : [ 
 + client : ' / data / client . lzma ' , 
 + server : ' / data / server . lzma ' 
 + ] , 
 + MC _ SLIM : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } : slim ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } : slim ] " 
 + ] , 
 + MC _ DATA : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } : data ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } : data ] " 
 + ] , 
 + MC _ EXTRA : [ 
 + client : " [ net . minecraft : client : $ { patcher . mcVersion } : extra ] " , 
 + server : " [ net . minecraft : server : $ { patcher . mcVersion } : extra ] " 
 + ] , 
 + PATCHED : [ 
 + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - patched ] " , 
 + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - patched ] " 
 + ] , 
 + REMAPPED : [ 
 + client : " [ $ { project . group } : $ { project . name } : $ { project . version } : client - srg ] " , 
 + server : " [ $ { project . group } : $ { project . name } : $ { project . version } : server - srg ] " 
 + ] 
 ] 
 ] 
 + def libs = [ : ] 
 + json . processors . add ( [ 
 + jar : ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . minecraftforge : jarsplitter : 1 . 0 . 3 ' ) , 
 + args : [ 
 + ' - - input ' , ' { MINECRAFT _ JAR } ' , 
 + ' - - slim ' , " { MC _ SLIM } " , 
 + ' - - data ' , " { MC _ DATA } " , 
 + ' - - extra ' , " { MC _ EXTRA } " , 
 + ' - - srg ' , ' { MAPPINGS } ' 
 + ] 
 + ] ) 
 + json . processors . add ( [ 
 + jar : ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . minecraftforge : binarypatcher : 1 . 0 . 3 ' ) , 
 + args : [ 
 + ' - - clean ' , ' { MC _ SLIM } ' , 
 + ' - - output ' , ' { PATCHED } ' , 
 + ' - - apply ' , ' { BINPATCH } ' 
 + ] 
 + ] ) 
 + json . processors . add ( [ 
 + jar : ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' , 
 + classpath : getClasspath ( project , libs , ' net . md - 5 : SpecialSource : 1 . 8 . 3 ' ) , 
 + args : [ 
 + ' - - in - jar ' , ' { PATCHED } ' , 
 + ' - - out - jar ' , ' { REMAPPED } ' , 
 + ' - - srg - in ' , ' { MAPPINGS } ' 
 + ] 
 + ] ) 
 + 
 + json . libraries = libs . values ( ) 
 + 
 output . text = new JsonBuilder ( json ) . toPrettyString ( ) 
 } 
 } 
 @ @ - 556 , 12 + 600 , 90 @ @ def dateToIso8601 ( date ) { 
 def result = format . format ( date ) 
 return result [ 0 . . 21 ] + ' : ' + result [ 22 . . - 1 ] 
 } 
 + 
 def sha1 ( file ) { 
 - MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; 
 + MessageDigest md = MessageDigest . getInstance ( ' SHA - 1 ' ) 
 file . eachByte 4096 , { bytes , size - > 
 - md . update ( bytes , 0 , size ) ; 
 + md . update ( bytes , 0 , size ) 
 + } 
 + return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) 
 + } 
 + 
 + def artifactTree ( project , artifact ) { 
 + if ( ! project . ext . has ( ' tree _ resolver ' ) ) 
 + project . ext . tree _ resolver = 1 
 + def cfg = project . configurations . create ( ' tree _ resolver _ ' + project . ext . tree _ resolver + + ) 
 + def dep = project . dependencies . create ( artifact ) 
 + cfg . dependencies . add ( dep ) 
 + def files = cfg . resolve ( ) 
 + return getArtifacts ( project , cfg ) 
 + } 
 + 
 + def getArtifacts ( project , config ) { 
 + def ret = [ : ] 
 + config . resolvedConfiguration . resolvedArtifacts . each { 
 + def art = [ 
 + group : it . moduleVersion . id . group , 
 + name : it . moduleVersion . id . name , 
 + version : it . moduleVersion . id . version , 
 + classifier : it . classifier , 
 + extension : it . extension , 
 + file : it . file 
 + ] 
 + def key = art . group + ' : ' + art . name 
 + def folder = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / " 
 + def filename = " $ { art . name } - $ { art . version } " 
 + if ( art . classifier ! = null ) 
 + filename + = " - $ { art . classifier } " 
 + filename + = " . $ { art . extension } " 
 + def path = " $ { folder } $ { filename } " 
 + def url = " https : / / libraries . minecraft . net / $ { path } " 
 + if ( ! checkExists ( url ) ) { 
 + url = " https : / / files . minecraftforge . net / maven / $ { path } " 
 + / * 
 + project . logger . lifecycle ( " Artifact : $ { path } " ) 
 + def repo = project . file ( " build / dep _ repo / $ { folder } " ) 
 + repo . mkdirs ( ) 
 + copy { 
 + from art . file 
 + into folder 
 + rename { filename } 
 + } 
 + project . file ( " build / dep _ repo / $ { path } . sha1 " ) . text = sha1 ( it . file ) 
 + * / 
 + } 
 + ret [ key ] = [ 
 + name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , 
 + downloads : [ 
 + artifact : [ 
 + path : path , 
 + url : url , 
 + sha1 : sha1 ( art . file ) , 
 + size : art . file . length ( ) 
 + ] 
 + ] 
 + ] 
 + } 
 + return ret 
 + } 
 + 
 + def checkExists ( url ) { 
 + def code = new URL ( url ) . openConnection ( ) . with { 
 + requestMethod = ' HEAD ' 
 + connect ( ) 
 + responseCode 
 + } 
 + return code = = 200 
 + } 
 + 
 + def getClasspath ( project , libs , artifact ) { 
 + def ret = [ ] 
 + artifactTree ( project , artifact ) . each { key , lib - > 
 + libs [ lib . name ] = lib 
 + if ( lib . name ! = artifact ) 
 + ret . add ( lib . name ) 
 } 
 - return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) ; 
 + return ret 
 } 
 
 / / evaluationDependsOnChildren ( )
