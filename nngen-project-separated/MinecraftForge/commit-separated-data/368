BLEU SCORE: 0.049900497019368314

TEST MSG: Fix issue saving observers using different metadata then vanilla .
GENERATED MSG: Fix log spam when creating dummy blocks .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 7d73c0b . . 21c285e 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockAir ; <nl> + import net . minecraft . block . BlockObserver ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . enchantment . Enchantment ; <nl> import net . minecraft . entity . Entity ; <nl> @ @ - 308 , 6 + 309 , 8 @ @ public class GameData <nl> <nl> for ( int meta = 0 ; meta < 16 ; meta + + ) <nl> { <nl> + if ( block . getClass ( ) = = BlockObserver . class ) <nl> + continue ; / / Observers are bad and have non - cyclical states . So we HAVE to use the vanilla logic above . <nl> if ( usedMeta [ meta ] ) <nl> blockstateMap . put ( block . getStateFromMeta ( meta ) , id < < 4 | meta ) ; / / Put the CORRECT thing ! <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 5b34961 . . 526fed5 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockAir ; <nl> - import net . minecraft . block . material . Material ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . enchantment . Enchantment ; <nl> import net . minecraft . entity . Entity ; <nl> @ @ - 59 , 6 + 58 , 7 @ @ import com . google . common . collect . ArrayListMultimap ; <nl> import com . google . common . collect . BiMap ; <nl> <nl> import java . io . IOException ; <nl> + import java . lang . reflect . Field ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . LinkedHashMap ; <nl> @ @ - 272 , 6 + 272 , 7 @ @ public class GameData <nl> private static class BlockCallbacks implements IForgeRegistry . AddCallback < Block > , IForgeRegistry . ClearCallback < Block > , IForgeRegistry . CreateCallback < Block > , IForgeRegistry . DummyFactory < Block > <nl> { <nl> static final BlockCallbacks INSTANCE = new BlockCallbacks ( ) ; <nl> + Field regName ; <nl> <nl> @ SuppressWarnings ( " deprecation " ) <nl> @ Override <nl> @ @ - 339 , 7 + 340 , 32 @ @ public class GameData <nl> @ Override <nl> public Block createDummy ( ResourceLocation key ) <nl> { <nl> - return new BlockDummyAir ( ) . setUnlocalizedName ( " air " ) . setRegistryName ( key ) ; <nl> + if ( regName = = null ) <nl> + { <nl> + try <nl> + { <nl> + regName = IForgeRegistryEntry . Impl . class . getDeclaredField ( " registryName " ) ; <nl> + regName . setAccessible ( true ) ; <nl> + } <nl> + catch ( NoSuchFieldException | SecurityException e ) <nl> + { <nl> + FMLLog . log . error ( " Could not get ` registryName ` field from IForgeRegistryEntry . Impl " ) ; <nl> + FMLLog . log . throwing ( Level . ERROR , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + Block ret = new BlockDummyAir ( ) . setUnlocalizedName ( " air " ) ; <nl> + try <nl> + { <nl> + regName . set ( ret , key ) ; <nl> + } <nl> + catch ( IllegalArgumentException | IllegalAccessException e ) <nl> + { <nl> + FMLLog . log . error ( " Could not set ` registryName ` field in IForgeRegistryEntry . Impl to ` { } ` " , key . toString ( ) ) ; <nl> + FMLLog . log . throwing ( Level . ERROR , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + return ret ; <nl> } <nl> private static class BlockDummyAir extends BlockAir / / A named class so DummyBlockReplacementTest can detect if its a dummy <nl> {

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 7d73c0b . . 21c285e 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockAir ; 
 + import net . minecraft . block . BlockObserver ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . enchantment . Enchantment ; 
 import net . minecraft . entity . Entity ; 
 @ @ - 308 , 6 + 309 , 8 @ @ public class GameData 
 
 for ( int meta = 0 ; meta < 16 ; meta + + ) 
 { 
 + if ( block . getClass ( ) = = BlockObserver . class ) 
 + continue ; / / Observers are bad and have non - cyclical states . So we HAVE to use the vanilla logic above . 
 if ( usedMeta [ meta ] ) 
 blockstateMap . put ( block . getStateFromMeta ( meta ) , id < < 4 | meta ) ; / / Put the CORRECT thing ! 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 5b34961 . . 526fed5 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockAir ; 
 - import net . minecraft . block . material . Material ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . enchantment . Enchantment ; 
 import net . minecraft . entity . Entity ; 
 @ @ - 59 , 6 + 58 , 7 @ @ import com . google . common . collect . ArrayListMultimap ; 
 import com . google . common . collect . BiMap ; 
 
 import java . io . IOException ; 
 + import java . lang . reflect . Field ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . LinkedHashMap ; 
 @ @ - 272 , 6 + 272 , 7 @ @ public class GameData 
 private static class BlockCallbacks implements IForgeRegistry . AddCallback < Block > , IForgeRegistry . ClearCallback < Block > , IForgeRegistry . CreateCallback < Block > , IForgeRegistry . DummyFactory < Block > 
 { 
 static final BlockCallbacks INSTANCE = new BlockCallbacks ( ) ; 
 + Field regName ; 
 
 @ SuppressWarnings ( " deprecation " ) 
 @ Override 
 @ @ - 339 , 7 + 340 , 32 @ @ public class GameData 
 @ Override 
 public Block createDummy ( ResourceLocation key ) 
 { 
 - return new BlockDummyAir ( ) . setUnlocalizedName ( " air " ) . setRegistryName ( key ) ; 
 + if ( regName = = null ) 
 + { 
 + try 
 + { 
 + regName = IForgeRegistryEntry . Impl . class . getDeclaredField ( " registryName " ) ; 
 + regName . setAccessible ( true ) ; 
 + } 
 + catch ( NoSuchFieldException | SecurityException e ) 
 + { 
 + FMLLog . log . error ( " Could not get ` registryName ` field from IForgeRegistryEntry . Impl " ) ; 
 + FMLLog . log . throwing ( Level . ERROR , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + Block ret = new BlockDummyAir ( ) . setUnlocalizedName ( " air " ) ; 
 + try 
 + { 
 + regName . set ( ret , key ) ; 
 + } 
 + catch ( IllegalArgumentException | IllegalAccessException e ) 
 + { 
 + FMLLog . log . error ( " Could not set ` registryName ` field in IForgeRegistryEntry . Impl to ` { } ` " , key . toString ( ) ) ; 
 + FMLLog . log . throwing ( Level . ERROR , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + return ret ; 
 } 
 private static class BlockDummyAir extends BlockAir / / A named class so DummyBlockReplacementTest can detect if its a dummy 
 {
