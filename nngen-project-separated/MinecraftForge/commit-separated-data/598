BLEU SCORE: 1.6773131395125593E-4

TEST MSG: Added CommandTreeBase
GENERATED MSG: Add the ability to register chat commands that only execute on the client . Works with autocomplete .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java b / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java <nl> new file mode 100644 <nl> index 0000000 . . 3c7911c <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java <nl> @ @ - 0 , 0 + 1 , 138 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . command ; <nl> + <nl> + import net . minecraft . command . CommandBase ; <nl> + import net . minecraft . command . CommandException ; <nl> + import net . minecraft . command . ICommand ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . server . MinecraftServer ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . util . text . TextComponentString ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + <nl> + / * * <nl> + * Base class for commands that has subcommands . <nl> + * < p > <nl> + * E . g . / team settings set [ value ] <nl> + * settings is subcommand of team and set is subcommand of settings <nl> + * / <nl> + public abstract class CommandTreeBase extends CommandBase <nl> + { <nl> + private final HashMap < String , ICommand > commandMap = new HashMap < String , ICommand > ( ) ; <nl> + <nl> + public void addSubcommand ( ICommand c ) <nl> + { <nl> + commandMap . put ( c . getCommandName ( ) , c ) ; <nl> + } <nl> + <nl> + public Collection < ICommand > getSubCommands ( ) <nl> + { <nl> + return Collections . unmodifiableCollection ( commandMap . values ( ) ) ; <nl> + } <nl> + <nl> + private static String [ ] shiftArgs ( String [ ] s ) <nl> + { <nl> + if ( s = = null | | s . length = = 0 ) <nl> + { <nl> + return new String [ 0 ] ; <nl> + } <nl> + <nl> + String [ ] s1 = new String [ s . length - 1 ] ; <nl> + System . arraycopy ( s , 1 , s1 , 0 , s1 . length ) ; <nl> + return s1 ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < String > getTabCompletionOptions ( MinecraftServer server , ICommandSender sender , String [ ] args , @ Nullable BlockPos pos ) <nl> + { <nl> + if ( args . length = = 1 ) <nl> + { <nl> + List < String > keys = new ArrayList < String > ( ) ; <nl> + <nl> + for ( ICommand c : commandMap . values ( ) ) <nl> + { <nl> + if ( c . checkPermission ( server , sender ) ) <nl> + { <nl> + keys . add ( c . getCommandName ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + Collections . sort ( keys , null ) ; <nl> + return getListOfStringsMatchingLastWord ( args , keys ) ; <nl> + } <nl> + <nl> + ICommand cmd = commandMap . get ( args [ 0 ] ) ; <nl> + <nl> + if ( cmd ! = null ) <nl> + { <nl> + return cmd . getTabCompletionOptions ( server , sender , shiftArgs ( args ) , pos ) ; <nl> + } <nl> + <nl> + return super . getTabCompletionOptions ( server , sender , args , pos ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isUsernameIndex ( String [ ] args , int index ) <nl> + { <nl> + if ( index > 0 & & args . length > 1 ) <nl> + { <nl> + ICommand cmd = commandMap . get ( args [ 0 ] ) ; <nl> + if ( cmd ! = null ) <nl> + { <nl> + return cmd . isUsernameIndex ( shiftArgs ( args ) , index - 1 ) ; <nl> + } <nl> + } <nl> + <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException <nl> + { <nl> + if ( args . length < 1 ) <nl> + { <nl> + sender . addChatMessage ( new TextComponentString ( CommandBase . joinNiceStringFromCollection ( commandMap . keySet ( ) ) ) ) ; <nl> + } <nl> + else <nl> + { <nl> + ICommand cmd = commandMap . get ( args [ 0 ] ) ; <nl> + <nl> + if ( cmd = = null ) <nl> + { <nl> + throw new CommandException ( " commands . tree _ base . invalid _ cmd " , args [ 0 ] ) ; <nl> + } <nl> + else if ( ! cmd . checkPermission ( server , sender ) ) <nl> + { <nl> + throw new CommandException ( " commands . generic . permission " ) ; <nl> + } <nl> + else <nl> + { <nl> + cmd . execute ( server , sender , shiftArgs ( args ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 55dd14d . . 02c81a5 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 3 , 6 + 3 , 7 @ @ commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types ar <nl> commands . forge . tps . summary = % s : Mean tick time : % d ms . Mean TPS : % d <nl> <nl> commands . forge . tracking . te . enabled = Tile Entity tracking enabled for % d seconds . <nl> + commands . tree _ base . invalid _ cmd = Invalid subcommand ' % s ' ! <nl> forge . texture . preload . warning = Warning : Texture % s not preloaded , will cause render glitches ! <nl> forge . client . shutdown . internal = Shutting down internal server . . . <nl> forge . update . newversion = New Forge version available : % s <nl> diff - - git a / src / test / java / net / minecraftforge / test / CommandTreeBaseTest . java b / src / test / java / net / minecraftforge / test / CommandTreeBaseTest . java <nl> new file mode 100644 <nl> index 0000000 . . c46c5cc <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / CommandTreeBaseTest . java <nl> @ @ - 0 , 0 + 1 , 133 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import net . minecraft . command . CommandBase ; <nl> + import net . minecraft . command . CommandException ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . server . MinecraftServer ; <nl> + import net . minecraft . util . text . TextComponentString ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLServerStartingEvent ; <nl> + import net . minecraftforge . server . command . CommandTreeBase ; <nl> + <nl> + @ Mod ( modid = CommandTreeBaseTest . MOD _ ID , name = " CommandTreeBaseTest " , version = " 1 . 0 . 0 " ) <nl> + public class CommandTreeBaseTest <nl> + { <nl> + public static final String MOD _ ID = " CommandTreeBaseTest " ; <nl> + <nl> + @ Mod . Instance ( CommandTreeBaseTest . MOD _ ID ) <nl> + public static CommandTreeBaseTest inst ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void onServerStarted ( FMLServerStartingEvent event ) <nl> + { <nl> + event . registerServerCommand ( new CommandTreeTest ( ) ) ; <nl> + } <nl> + <nl> + public static class CommandTreeTest extends CommandTreeBase <nl> + { <nl> + public CommandTreeTest ( ) <nl> + { <nl> + addSubcommand ( new CommandPing ( ) ) ; <nl> + addSubcommand ( new CommandValue ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getCommandName ( ) <nl> + { <nl> + return " treecommand _ test " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getCommandUsage ( ICommandSender sender ) <nl> + { <nl> + return " commands . treecommand _ test . usage " ; <nl> + } <nl> + <nl> + public static class CommandPing extends CommandBase <nl> + { <nl> + @ Override <nl> + public String getCommandName ( ) <nl> + { <nl> + return " ping " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getCommandUsage ( ICommandSender sender ) <nl> + { <nl> + return " commands . treecommand _ test . ping . usage " ; <nl> + } <nl> + <nl> + @ Override <nl> + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException <nl> + { <nl> + sender . addChatMessage ( new TextComponentString ( " Pong ! " ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static class CommandValue extends CommandTreeBase <nl> + { <nl> + private static int value = 0 ; <nl> + <nl> + public CommandValue ( ) <nl> + { <nl> + addSubcommand ( new CommandSet ( ) ) ; <nl> + addSubcommand ( new CommandGet ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getCommandName ( ) <nl> + { <nl> + return " value " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getCommandUsage ( ICommandSender sender ) <nl> + { <nl> + return " commands . treecommand _ test . value . usage " ; <nl> + } <nl> + <nl> + public static class CommandSet extends CommandBase <nl> + { <nl> + @ Override <nl> + public String getCommandName ( ) <nl> + { <nl> + return " set " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getCommandUsage ( ICommandSender sender ) <nl> + { <nl> + return " commands . treecommand _ test . value . set . usage " ; <nl> + } <nl> + <nl> + @ Override <nl> + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException <nl> + { <nl> + value = CommandTreeTest . parseInt ( args [ 0 ] ) ; <nl> + sender . addChatMessage ( new TextComponentString ( " Test value set to : " + value ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static class CommandGet extends CommandBase <nl> + { <nl> + @ Override <nl> + public String getCommandName ( ) <nl> + { <nl> + return " get " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getCommandUsage ( ICommandSender sender ) <nl> + { <nl> + return " commands . treecommand _ test . value . get . usage " ; <nl> + } <nl> + <nl> + @ Override <nl> + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException <nl> + { <nl> + sender . addChatMessage ( new TextComponentString ( " Test value : " + value ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / client / net / minecraftforge / client / ClientCommandHandler . java b / client / net / minecraftforge / client / ClientCommandHandler . java <nl> new file mode 100644 <nl> index 0000000 . . b929e72 <nl> - - - / dev / null <nl> + + + b / client / net / minecraftforge / client / ClientCommandHandler . java <nl> @ @ - 0 , 0 + 1 , 140 @ @ <nl> + package net . minecraftforge . client ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . gui . GuiChat ; <nl> + import net . minecraft . command . CommandException ; <nl> + import net . minecraft . command . CommandHandler ; <nl> + import net . minecraft . command . ICommand ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . command . WrongUsageException ; <nl> + import net . minecraft . util . ChatMessageComponent ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . CommandEvent ; <nl> + import cpw . mods . fml . client . FMLClientHandler ; <nl> + import static net . minecraft . util . EnumChatFormatting . * ; <nl> + <nl> + / * * <nl> + * The class that handles client - side chat commands . You should register any <nl> + * commands that you want handled on the client with this command handler . <nl> + * <nl> + * If there is a command with the same name registered both on the server and <nl> + * client , the client takes precedence ! <nl> + * <nl> + * / <nl> + public class ClientCommandHandler extends CommandHandler <nl> + { <nl> + public static final ClientCommandHandler instance = new ClientCommandHandler ( ) ; <nl> + <nl> + public String [ ] latestAutoComplete = null ; <nl> + <nl> + / * * <nl> + * @ return 1 if successfully executed , 0 if wrong usage , it doesn ' t exist or <nl> + * it was canceled . <nl> + * / <nl> + @ Override <nl> + public int executeCommand ( ICommandSender sender , String message ) <nl> + { <nl> + message = message . trim ( ) ; <nl> + <nl> + if ( message . startsWith ( " / " ) ) <nl> + { <nl> + message = message . substring ( 1 ) ; <nl> + } <nl> + <nl> + String [ ] args = message . split ( " " ) ; <nl> + String commandName = args [ 0 ] ; <nl> + System . arraycopy ( args , 1 , args , 0 , args . length - 1 ) ; <nl> + ICommand icommand = ( ICommand ) getCommands ( ) . get ( commandName ) ; <nl> + <nl> + try <nl> + { <nl> + if ( icommand = = null ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + if ( icommand . canCommandSenderUseCommand ( sender ) ) <nl> + { <nl> + CommandEvent event = new CommandEvent ( icommand , sender , args ) ; <nl> + if ( MinecraftForge . EVENT _ BUS . post ( event ) ) <nl> + { <nl> + if ( event . exception ! = null ) <nl> + { <nl> + throw event . exception ; <nl> + } <nl> + return 0 ; <nl> + } <nl> + <nl> + icommand . processCommand ( sender , args ) ; <nl> + return 1 ; <nl> + } <nl> + else <nl> + { <nl> + sender . sendChatToPlayer ( format ( " commands . generic . permission " ) . setColor ( RED ) ) ; <nl> + } <nl> + } <nl> + catch ( WrongUsageException wue ) <nl> + { <nl> + sender . sendChatToPlayer ( format ( " commands . generic . usage " , format ( wue . getMessage ( ) , wue . getErrorOjbects ( ) ) ) . setColor ( RED ) ) ; <nl> + } <nl> + catch ( CommandException ce ) <nl> + { <nl> + sender . sendChatToPlayer ( format ( ce . getMessage ( ) , ce . getErrorOjbects ( ) ) . setColor ( RED ) ) ; <nl> + } <nl> + catch ( Throwable t ) <nl> + { <nl> + sender . sendChatToPlayer ( format ( " commands . generic . exception " ) . setColor ( RED ) ) ; <nl> + t . printStackTrace ( ) ; <nl> + } <nl> + <nl> + return 0 ; <nl> + } <nl> + <nl> + / / Couple of helpers because the mcp names are stupid and long . . . <nl> + private ChatMessageComponent format ( String str , Object . . . args ) <nl> + { <nl> + return ChatMessageComponent . createFromTranslationWithSubstitutions ( str , args ) ; <nl> + } <nl> + <nl> + private ChatMessageComponent format ( String str ) <nl> + { <nl> + return ChatMessageComponent . createFromTranslationKey ( str ) ; <nl> + } <nl> + <nl> + public void autoComplete ( String leftOfCursor , String full ) <nl> + { <nl> + latestAutoComplete = null ; <nl> + <nl> + if ( leftOfCursor . charAt ( 0 ) = = ' / ' ) <nl> + { <nl> + leftOfCursor = leftOfCursor . substring ( 1 ) ; <nl> + <nl> + Minecraft mc = FMLClientHandler . instance ( ) . getClient ( ) ; <nl> + if ( mc . currentScreen instanceof GuiChat ) <nl> + { <nl> + List < String > commands = getPossibleCommands ( mc . thePlayer , leftOfCursor ) ; <nl> + if ( commands ! = null & & ! commands . isEmpty ( ) ) <nl> + { <nl> + if ( leftOfCursor . indexOf ( ' ' ) = = - 1 ) <nl> + { <nl> + for ( int i = 0 ; i < commands . size ( ) ; i + + ) <nl> + { <nl> + commands . set ( i , GRAY + " / " + commands . get ( i ) + RESET ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + for ( int i = 0 ; i < commands . size ( ) ; i + + ) <nl> + { <nl> + commands . set ( i , GRAY + commands . get ( i ) + RESET ) ; <nl> + } <nl> + } <nl> + <nl> + latestAutoComplete = commands . toArray ( new String [ commands . size ( ) ] ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / patches / minecraft / net / minecraft / client / Minecraft . java . patch b / patches / minecraft / net / minecraft / client / Minecraft . java . patch <nl> index 021d32e . . 5e3cec2 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / Minecraft . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / Minecraft . java . patch <nl> @ @ - 1 , 9 + 1 , 10 @ @ <nl> - - - . . / src _ base / minecraft / net / minecraft / client / Minecraft . java <nl> + + + . . / src _ work / minecraft / net / minecraft / client / Minecraft . java <nl> - @ @ - 137 , 6 + 137 , 15 @ @ <nl> + @ @ - 137 , 6 + 137 , 16 @ @ <nl> <nl> import com . google . common . collect . MapDifference ; <nl> <nl> + + import net . minecraftforge . client . ClientCommandHandler ; <nl> + import net . minecraftforge . client . ForgeHooksClient ; <nl> + import net . minecraftforge . client . GuiIngameForge ; <nl> + import net . minecraftforge . client . event . GuiOpenEvent ; <nl> @ @ - 16 , 7 + 17 , 7 @ @ <nl> @ SideOnly ( Side . CLIENT ) <nl> public class Minecraft implements IPlayerUsage <nl> { <nl> - @ @ - 416 , 7 + 425 , 7 @ @ <nl> + @ @ - 416 , 7 + 426 , 7 @ @ <nl> <nl> try <nl> { <nl> @ @ - 25 , 7 + 26 , 7 @ @ <nl> } <nl> catch ( LWJGLException lwjglexception ) <nl> { <nl> - @ @ - 497 , 7 + 506 , 7 @ @ <nl> + @ @ - 497 , 7 + 507 , 7 @ @ <nl> this . effectRenderer = new EffectRenderer ( this . theWorld , this . renderEngine ) ; <nl> FMLClientHandler . instance ( ) . finishMinecraftLoading ( ) ; <nl> this . checkGLError ( " Post startup " ) ; <nl> @ @ - 34 , 7 + 35 , 7 @ @ <nl> <nl> if ( this . serverName ! = null ) <nl> { <nl> - @ @ - 679 , 11 + 688 , 6 @ @ <nl> + @ @ - 679 , 11 + 689 , 6 @ @ <nl> * / <nl> public void displayGuiScreen ( GuiScreen par1GuiScreen ) <nl> { <nl> @ @ - 46 , 7 + 47 , 7 @ @ <nl> this . statFileWriter . syncStats ( ) ; <nl> <nl> if ( par1GuiScreen = = null & & this . theWorld = = null ) <nl> - @ @ - 693 , 6 + 697 , 20 @ @ <nl> + @ @ - 693 , 6 + 698 , 20 @ @ <nl> else if ( par1GuiScreen = = null & & this . thePlayer . getHealth ( ) < = 0 . 0F ) <nl> { <nl> par1GuiScreen = new GuiGameOver ( ) ; <nl> @ @ - 67 , 7 + 68 , 7 @ @ <nl> } <nl> <nl> if ( par1GuiScreen instanceof GuiMainMenu ) <nl> - @ @ - 1300 , 7 + 1318 , 7 @ @ <nl> + @ @ - 1300 , 7 + 1319 , 7 @ @ <nl> <nl> if ( this . thePlayer . isCurrentToolAdventureModeExempt ( j , k , l ) ) <nl> { <nl> @ @ - 76 , 7 + 77 , 7 @ @ <nl> this . thePlayer . swingItem ( ) ; <nl> } <nl> } <nl> - @ @ - 1366 , 7 + 1384 , 8 @ @ <nl> + @ @ - 1366 , 7 + 1385 , 8 @ @ <nl> { <nl> int j1 = itemstack ! = null ? itemstack . stackSize : 0 ; <nl> <nl> @ @ - 86 , 7 + 87 , 7 @ @ <nl> { <nl> flag = false ; <nl> this . thePlayer . swingItem ( ) ; <nl> - @ @ - 1392 , 7 + 1411 , 8 @ @ <nl> + @ @ - 1392 , 7 + 1412 , 8 @ @ <nl> { <nl> ItemStack itemstack1 = this . thePlayer . inventory . getCurrentItem ( ) ; <nl> <nl> @ @ - 96 , 7 + 97 , 7 @ @ <nl> { <nl> this . entityRenderer . itemRenderer . resetEquippedProgress2 ( ) ; <nl> } <nl> - @ @ - 1574 , 6 + 1594 , 8 @ @ <nl> + @ @ - 1574 , 6 + 1595 , 8 @ @ <nl> <nl> while ( Mouse . next ( ) ) <nl> { <nl> @ @ - 105 , 7 + 106 , 7 @ @ <nl> i = Mouse . getEventButton ( ) ; <nl> <nl> if ( isRunningOnMac & & i = = 0 & & ( Keyboard . isKeyDown ( 29 ) | | Keyboard . isKeyDown ( 157 ) ) ) <nl> - @ @ - 2046 , 6 + 2068 , 11 @ @ <nl> + @ @ - 2046 , 6 + 2069 , 11 @ @ <nl> { <nl> this . statFileWriter . syncStats ( ) ; <nl> <nl> @ @ - 117 , 7 + 118 , 7 @ @ <nl> if ( par1WorldClient = = null ) <nl> { <nl> NetClientHandler netclienthandler = this . getNetHandler ( ) ; <nl> - @ @ - 2063 , 6 + 2090 , 18 @ @ <nl> + @ @ - 2063 , 6 + 2091 , 18 @ @ <nl> if ( this . theIntegratedServer ! = null ) <nl> { <nl> this . theIntegratedServer . initiateShutdown ( ) ; <nl> @ @ - 136 , 7 + 137 , 16 @ @ <nl> } <nl> <nl> this . theIntegratedServer = null ; <nl> - @ @ - 2236 , 107 + 2275 , 12 @ @ <nl> + @ @ - 2225 , 7 + 2265 , 7 @ @ <nl> + * / <nl> + public boolean handleClientCommand ( String par1Str ) <nl> + { <nl> + - return false ; <nl> + + return ClientCommandHandler . instance . executeCommand ( thePlayer , par1Str ) = = 1 ; <nl> + } <nl> + <nl> + / * * <nl> + @ @ - 2236 , 107 + 2276 , 12 @ @ <nl> if ( this . objectMouseOver ! = null ) <nl> { <nl> boolean flag = this . thePlayer . capabilities . isCreativeMode ; <nl> @ @ - 248 , 7 + 258 , 7 @ @ <nl> <nl> if ( flag ) <nl> { <nl> - @ @ - 2419 , 11 + 2363 , 18 @ @ <nl> + @ @ - 2419 , 11 + 2364 , 18 @ @ <nl> par1PlayerUsageSnooper . addData ( " gl _ max _ texture _ size " , Integer . valueOf ( getGLMaximumTextureSize ( ) ) ) ; <nl> } <nl> <nl> @ @ - 267 , 7 + 277 , 7 @ @ <nl> for ( int i = 16384 ; i > 0 ; i > > = 1 ) <nl> { <nl> GL11 . glTexImage2D ( GL11 . GL _ PROXY _ TEXTURE _ 2D , 0 , GL11 . GL _ RGBA , i , i , 0 , GL11 . GL _ RGBA , GL11 . GL _ UNSIGNED _ BYTE , ( ByteBuffer ) null ) ; <nl> - @ @ - 2431 , 6 + 2382 , 7 @ @ <nl> + @ @ - 2431 , 6 + 2383 , 7 @ @ <nl> <nl> if ( j ! = 0 ) <nl> { <nl> diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiChat . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiChat . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 755d5e3 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiChat . java . patch <nl> @ @ - 0 , 0 + 1 , 44 @ @ <nl> + - - - . . / src _ base / minecraft / net / minecraft / client / gui / GuiChat . java <nl> + + + + . . / src _ work / minecraft / net / minecraft / client / gui / GuiChat . java <nl> + @ @ - 7 , 8 + 7 , 11 @ @ <nl> + import java . util . Iterator ; <nl> + import java . util . List ; <nl> + import net . minecraft . network . packet . Packet203AutoComplete ; <nl> + + import net . minecraft . util . EnumChatFormatting ; <nl> + + import net . minecraftforge . client . ClientCommandHandler ; <nl> + import org . lwjgl . input . Keyboard ; <nl> + import org . lwjgl . input . Mouse ; <nl> + + import com . google . common . collect . ObjectArrays ; <nl> + <nl> + @ SideOnly ( Side . CLIENT ) <nl> + public class GuiChat extends GuiScreen <nl> + @ @ - 278 , 13 + 281 , 14 @ @ <nl> + this . mc . ingameGUI . getChatGUI ( ) . printChatMessageWithOptionalDeletion ( stringbuilder . toString ( ) , 1 ) ; <nl> + } <nl> + <nl> + - this . inputField . writeText ( ( String ) this . field _ 73904 _ o . get ( this . field _ 73903 _ n + + ) ) ; <nl> + + this . inputField . writeText ( EnumChatFormatting . func _ 110646 _ a ( ( String ) this . field _ 73904 _ o . get ( this . field _ 73903 _ n + + ) ) ) ; <nl> + } <nl> + <nl> + private void func _ 73893 _ a ( String par1Str , String par2Str ) <nl> + { <nl> + if ( par1Str . length ( ) > = 1 ) <nl> + { <nl> + + ClientCommandHandler . instance . autoComplete ( par1Str , par2Str ) ; <nl> + this . mc . thePlayer . sendQueue . addToSendQueue ( new Packet203AutoComplete ( par1Str ) ) ; <nl> + this . field _ 73905 _ m = true ; <nl> + } <nl> + @ @ - 347 , 6 + 351 , 13 @ @ <nl> + String [ ] astring1 = par1ArrayOfStr ; <nl> + int i = par1ArrayOfStr . length ; <nl> + <nl> + + String [ ] complete = ClientCommandHandler . instance . latestAutoComplete ; <nl> + + if ( complete ! = null ) <nl> + + { <nl> + + astring1 = ObjectArrays . concat ( complete , astring1 , String . class ) ; <nl> + + i = astring1 . length ; <nl> + + } <nl> + + <nl> + for ( int j = 0 ; j < i ; + + j ) <nl> + { <nl> + String s = astring1 [ j ] ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java b / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java 
 new file mode 100644 
 index 0000000 . . 3c7911c 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java 
 @ @ - 0 , 0 + 1 , 138 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . command ; 
 + 
 + import net . minecraft . command . CommandBase ; 
 + import net . minecraft . command . CommandException ; 
 + import net . minecraft . command . ICommand ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . server . MinecraftServer ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . util . text . TextComponentString ; 
 + 
 + import javax . annotation . Nullable ; 
 + import java . util . ArrayList ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + 
 + / * * 
 + * Base class for commands that has subcommands . 
 + * < p > 
 + * E . g . / team settings set [ value ] 
 + * settings is subcommand of team and set is subcommand of settings 
 + * / 
 + public abstract class CommandTreeBase extends CommandBase 
 + { 
 + private final HashMap < String , ICommand > commandMap = new HashMap < String , ICommand > ( ) ; 
 + 
 + public void addSubcommand ( ICommand c ) 
 + { 
 + commandMap . put ( c . getCommandName ( ) , c ) ; 
 + } 
 + 
 + public Collection < ICommand > getSubCommands ( ) 
 + { 
 + return Collections . unmodifiableCollection ( commandMap . values ( ) ) ; 
 + } 
 + 
 + private static String [ ] shiftArgs ( String [ ] s ) 
 + { 
 + if ( s = = null | | s . length = = 0 ) 
 + { 
 + return new String [ 0 ] ; 
 + } 
 + 
 + String [ ] s1 = new String [ s . length - 1 ] ; 
 + System . arraycopy ( s , 1 , s1 , 0 , s1 . length ) ; 
 + return s1 ; 
 + } 
 + 
 + @ Override 
 + public List < String > getTabCompletionOptions ( MinecraftServer server , ICommandSender sender , String [ ] args , @ Nullable BlockPos pos ) 
 + { 
 + if ( args . length = = 1 ) 
 + { 
 + List < String > keys = new ArrayList < String > ( ) ; 
 + 
 + for ( ICommand c : commandMap . values ( ) ) 
 + { 
 + if ( c . checkPermission ( server , sender ) ) 
 + { 
 + keys . add ( c . getCommandName ( ) ) ; 
 + } 
 + } 
 + 
 + Collections . sort ( keys , null ) ; 
 + return getListOfStringsMatchingLastWord ( args , keys ) ; 
 + } 
 + 
 + ICommand cmd = commandMap . get ( args [ 0 ] ) ; 
 + 
 + if ( cmd ! = null ) 
 + { 
 + return cmd . getTabCompletionOptions ( server , sender , shiftArgs ( args ) , pos ) ; 
 + } 
 + 
 + return super . getTabCompletionOptions ( server , sender , args , pos ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isUsernameIndex ( String [ ] args , int index ) 
 + { 
 + if ( index > 0 & & args . length > 1 ) 
 + { 
 + ICommand cmd = commandMap . get ( args [ 0 ] ) ; 
 + if ( cmd ! = null ) 
 + { 
 + return cmd . isUsernameIndex ( shiftArgs ( args ) , index - 1 ) ; 
 + } 
 + } 
 + 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException 
 + { 
 + if ( args . length < 1 ) 
 + { 
 + sender . addChatMessage ( new TextComponentString ( CommandBase . joinNiceStringFromCollection ( commandMap . keySet ( ) ) ) ) ; 
 + } 
 + else 
 + { 
 + ICommand cmd = commandMap . get ( args [ 0 ] ) ; 
 + 
 + if ( cmd = = null ) 
 + { 
 + throw new CommandException ( " commands . tree _ base . invalid _ cmd " , args [ 0 ] ) ; 
 + } 
 + else if ( ! cmd . checkPermission ( server , sender ) ) 
 + { 
 + throw new CommandException ( " commands . generic . permission " ) ; 
 + } 
 + else 
 + { 
 + cmd . execute ( server , sender , shiftArgs ( args ) ) ; 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 55dd14d . . 02c81a5 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 3 , 6 + 3 , 7 @ @ commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types ar 
 commands . forge . tps . summary = % s : Mean tick time : % d ms . Mean TPS : % d 
 
 commands . forge . tracking . te . enabled = Tile Entity tracking enabled for % d seconds . 
 + commands . tree _ base . invalid _ cmd = Invalid subcommand ' % s ' ! 
 forge . texture . preload . warning = Warning : Texture % s not preloaded , will cause render glitches ! 
 forge . client . shutdown . internal = Shutting down internal server . . . 
 forge . update . newversion = New Forge version available : % s 
 diff - - git a / src / test / java / net / minecraftforge / test / CommandTreeBaseTest . java b / src / test / java / net / minecraftforge / test / CommandTreeBaseTest . java 
 new file mode 100644 
 index 0000000 . . c46c5cc 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / CommandTreeBaseTest . java 
 @ @ - 0 , 0 + 1 , 133 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import net . minecraft . command . CommandBase ; 
 + import net . minecraft . command . CommandException ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . server . MinecraftServer ; 
 + import net . minecraft . util . text . TextComponentString ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLServerStartingEvent ; 
 + import net . minecraftforge . server . command . CommandTreeBase ; 
 + 
 + @ Mod ( modid = CommandTreeBaseTest . MOD _ ID , name = " CommandTreeBaseTest " , version = " 1 . 0 . 0 " ) 
 + public class CommandTreeBaseTest 
 + { 
 + public static final String MOD _ ID = " CommandTreeBaseTest " ; 
 + 
 + @ Mod . Instance ( CommandTreeBaseTest . MOD _ ID ) 
 + public static CommandTreeBaseTest inst ; 
 + 
 + @ Mod . EventHandler 
 + public void onServerStarted ( FMLServerStartingEvent event ) 
 + { 
 + event . registerServerCommand ( new CommandTreeTest ( ) ) ; 
 + } 
 + 
 + public static class CommandTreeTest extends CommandTreeBase 
 + { 
 + public CommandTreeTest ( ) 
 + { 
 + addSubcommand ( new CommandPing ( ) ) ; 
 + addSubcommand ( new CommandValue ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public String getCommandName ( ) 
 + { 
 + return " treecommand _ test " ; 
 + } 
 + 
 + @ Override 
 + public String getCommandUsage ( ICommandSender sender ) 
 + { 
 + return " commands . treecommand _ test . usage " ; 
 + } 
 + 
 + public static class CommandPing extends CommandBase 
 + { 
 + @ Override 
 + public String getCommandName ( ) 
 + { 
 + return " ping " ; 
 + } 
 + 
 + @ Override 
 + public String getCommandUsage ( ICommandSender sender ) 
 + { 
 + return " commands . treecommand _ test . ping . usage " ; 
 + } 
 + 
 + @ Override 
 + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException 
 + { 
 + sender . addChatMessage ( new TextComponentString ( " Pong ! " ) ) ; 
 + } 
 + } 
 + 
 + public static class CommandValue extends CommandTreeBase 
 + { 
 + private static int value = 0 ; 
 + 
 + public CommandValue ( ) 
 + { 
 + addSubcommand ( new CommandSet ( ) ) ; 
 + addSubcommand ( new CommandGet ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public String getCommandName ( ) 
 + { 
 + return " value " ; 
 + } 
 + 
 + @ Override 
 + public String getCommandUsage ( ICommandSender sender ) 
 + { 
 + return " commands . treecommand _ test . value . usage " ; 
 + } 
 + 
 + public static class CommandSet extends CommandBase 
 + { 
 + @ Override 
 + public String getCommandName ( ) 
 + { 
 + return " set " ; 
 + } 
 + 
 + @ Override 
 + public String getCommandUsage ( ICommandSender sender ) 
 + { 
 + return " commands . treecommand _ test . value . set . usage " ; 
 + } 
 + 
 + @ Override 
 + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException 
 + { 
 + value = CommandTreeTest . parseInt ( args [ 0 ] ) ; 
 + sender . addChatMessage ( new TextComponentString ( " Test value set to : " + value ) ) ; 
 + } 
 + } 
 + 
 + public static class CommandGet extends CommandBase 
 + { 
 + @ Override 
 + public String getCommandName ( ) 
 + { 
 + return " get " ; 
 + } 
 + 
 + @ Override 
 + public String getCommandUsage ( ICommandSender sender ) 
 + { 
 + return " commands . treecommand _ test . value . get . usage " ; 
 + } 
 + 
 + @ Override 
 + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException 
 + { 
 + sender . addChatMessage ( new TextComponentString ( " Test value : " + value ) ) ; 
 + } 
 + } 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / client / net / minecraftforge / client / ClientCommandHandler . java b / client / net / minecraftforge / client / ClientCommandHandler . java 
 new file mode 100644 
 index 0000000 . . b929e72 
 - - - / dev / null 
 + + + b / client / net / minecraftforge / client / ClientCommandHandler . java 
 @ @ - 0 , 0 + 1 , 140 @ @ 
 + package net . minecraftforge . client ; 
 + 
 + import java . util . List ; 
 + 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . gui . GuiChat ; 
 + import net . minecraft . command . CommandException ; 
 + import net . minecraft . command . CommandHandler ; 
 + import net . minecraft . command . ICommand ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . command . WrongUsageException ; 
 + import net . minecraft . util . ChatMessageComponent ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . CommandEvent ; 
 + import cpw . mods . fml . client . FMLClientHandler ; 
 + import static net . minecraft . util . EnumChatFormatting . * ; 
 + 
 + / * * 
 + * The class that handles client - side chat commands . You should register any 
 + * commands that you want handled on the client with this command handler . 
 + * 
 + * If there is a command with the same name registered both on the server and 
 + * client , the client takes precedence ! 
 + * 
 + * / 
 + public class ClientCommandHandler extends CommandHandler 
 + { 
 + public static final ClientCommandHandler instance = new ClientCommandHandler ( ) ; 
 + 
 + public String [ ] latestAutoComplete = null ; 
 + 
 + / * * 
 + * @ return 1 if successfully executed , 0 if wrong usage , it doesn ' t exist or 
 + * it was canceled . 
 + * / 
 + @ Override 
 + public int executeCommand ( ICommandSender sender , String message ) 
 + { 
 + message = message . trim ( ) ; 
 + 
 + if ( message . startsWith ( " / " ) ) 
 + { 
 + message = message . substring ( 1 ) ; 
 + } 
 + 
 + String [ ] args = message . split ( " " ) ; 
 + String commandName = args [ 0 ] ; 
 + System . arraycopy ( args , 1 , args , 0 , args . length - 1 ) ; 
 + ICommand icommand = ( ICommand ) getCommands ( ) . get ( commandName ) ; 
 + 
 + try 
 + { 
 + if ( icommand = = null ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + if ( icommand . canCommandSenderUseCommand ( sender ) ) 
 + { 
 + CommandEvent event = new CommandEvent ( icommand , sender , args ) ; 
 + if ( MinecraftForge . EVENT _ BUS . post ( event ) ) 
 + { 
 + if ( event . exception ! = null ) 
 + { 
 + throw event . exception ; 
 + } 
 + return 0 ; 
 + } 
 + 
 + icommand . processCommand ( sender , args ) ; 
 + return 1 ; 
 + } 
 + else 
 + { 
 + sender . sendChatToPlayer ( format ( " commands . generic . permission " ) . setColor ( RED ) ) ; 
 + } 
 + } 
 + catch ( WrongUsageException wue ) 
 + { 
 + sender . sendChatToPlayer ( format ( " commands . generic . usage " , format ( wue . getMessage ( ) , wue . getErrorOjbects ( ) ) ) . setColor ( RED ) ) ; 
 + } 
 + catch ( CommandException ce ) 
 + { 
 + sender . sendChatToPlayer ( format ( ce . getMessage ( ) , ce . getErrorOjbects ( ) ) . setColor ( RED ) ) ; 
 + } 
 + catch ( Throwable t ) 
 + { 
 + sender . sendChatToPlayer ( format ( " commands . generic . exception " ) . setColor ( RED ) ) ; 
 + t . printStackTrace ( ) ; 
 + } 
 + 
 + return 0 ; 
 + } 
 + 
 + / / Couple of helpers because the mcp names are stupid and long . . . 
 + private ChatMessageComponent format ( String str , Object . . . args ) 
 + { 
 + return ChatMessageComponent . createFromTranslationWithSubstitutions ( str , args ) ; 
 + } 
 + 
 + private ChatMessageComponent format ( String str ) 
 + { 
 + return ChatMessageComponent . createFromTranslationKey ( str ) ; 
 + } 
 + 
 + public void autoComplete ( String leftOfCursor , String full ) 
 + { 
 + latestAutoComplete = null ; 
 + 
 + if ( leftOfCursor . charAt ( 0 ) = = ' / ' ) 
 + { 
 + leftOfCursor = leftOfCursor . substring ( 1 ) ; 
 + 
 + Minecraft mc = FMLClientHandler . instance ( ) . getClient ( ) ; 
 + if ( mc . currentScreen instanceof GuiChat ) 
 + { 
 + List < String > commands = getPossibleCommands ( mc . thePlayer , leftOfCursor ) ; 
 + if ( commands ! = null & & ! commands . isEmpty ( ) ) 
 + { 
 + if ( leftOfCursor . indexOf ( ' ' ) = = - 1 ) 
 + { 
 + for ( int i = 0 ; i < commands . size ( ) ; i + + ) 
 + { 
 + commands . set ( i , GRAY + " / " + commands . get ( i ) + RESET ) ; 
 + } 
 + } 
 + else 
 + { 
 + for ( int i = 0 ; i < commands . size ( ) ; i + + ) 
 + { 
 + commands . set ( i , GRAY + commands . get ( i ) + RESET ) ; 
 + } 
 + } 
 + 
 + latestAutoComplete = commands . toArray ( new String [ commands . size ( ) ] ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / patches / minecraft / net / minecraft / client / Minecraft . java . patch b / patches / minecraft / net / minecraft / client / Minecraft . java . patch 
 index 021d32e . . 5e3cec2 100644 
 - - - a / patches / minecraft / net / minecraft / client / Minecraft . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / Minecraft . java . patch 
 @ @ - 1 , 9 + 1 , 10 @ @ 
 - - - . . / src _ base / minecraft / net / minecraft / client / Minecraft . java 
 + + + . . / src _ work / minecraft / net / minecraft / client / Minecraft . java 
 - @ @ - 137 , 6 + 137 , 15 @ @ 
 + @ @ - 137 , 6 + 137 , 16 @ @ 
 
 import com . google . common . collect . MapDifference ; 
 
 + + import net . minecraftforge . client . ClientCommandHandler ; 
 + import net . minecraftforge . client . ForgeHooksClient ; 
 + import net . minecraftforge . client . GuiIngameForge ; 
 + import net . minecraftforge . client . event . GuiOpenEvent ; 
 @ @ - 16 , 7 + 17 , 7 @ @ 
 @ SideOnly ( Side . CLIENT ) 
 public class Minecraft implements IPlayerUsage 
 { 
 - @ @ - 416 , 7 + 425 , 7 @ @ 
 + @ @ - 416 , 7 + 426 , 7 @ @ 
 
 try 
 { 
 @ @ - 25 , 7 + 26 , 7 @ @ 
 } 
 catch ( LWJGLException lwjglexception ) 
 { 
 - @ @ - 497 , 7 + 506 , 7 @ @ 
 + @ @ - 497 , 7 + 507 , 7 @ @ 
 this . effectRenderer = new EffectRenderer ( this . theWorld , this . renderEngine ) ; 
 FMLClientHandler . instance ( ) . finishMinecraftLoading ( ) ; 
 this . checkGLError ( " Post startup " ) ; 
 @ @ - 34 , 7 + 35 , 7 @ @ 
 
 if ( this . serverName ! = null ) 
 { 
 - @ @ - 679 , 11 + 688 , 6 @ @ 
 + @ @ - 679 , 11 + 689 , 6 @ @ 
 * / 
 public void displayGuiScreen ( GuiScreen par1GuiScreen ) 
 { 
 @ @ - 46 , 7 + 47 , 7 @ @ 
 this . statFileWriter . syncStats ( ) ; 
 
 if ( par1GuiScreen = = null & & this . theWorld = = null ) 
 - @ @ - 693 , 6 + 697 , 20 @ @ 
 + @ @ - 693 , 6 + 698 , 20 @ @ 
 else if ( par1GuiScreen = = null & & this . thePlayer . getHealth ( ) < = 0 . 0F ) 
 { 
 par1GuiScreen = new GuiGameOver ( ) ; 
 @ @ - 67 , 7 + 68 , 7 @ @ 
 } 
 
 if ( par1GuiScreen instanceof GuiMainMenu ) 
 - @ @ - 1300 , 7 + 1318 , 7 @ @ 
 + @ @ - 1300 , 7 + 1319 , 7 @ @ 
 
 if ( this . thePlayer . isCurrentToolAdventureModeExempt ( j , k , l ) ) 
 { 
 @ @ - 76 , 7 + 77 , 7 @ @ 
 this . thePlayer . swingItem ( ) ; 
 } 
 } 
 - @ @ - 1366 , 7 + 1384 , 8 @ @ 
 + @ @ - 1366 , 7 + 1385 , 8 @ @ 
 { 
 int j1 = itemstack ! = null ? itemstack . stackSize : 0 ; 
 
 @ @ - 86 , 7 + 87 , 7 @ @ 
 { 
 flag = false ; 
 this . thePlayer . swingItem ( ) ; 
 - @ @ - 1392 , 7 + 1411 , 8 @ @ 
 + @ @ - 1392 , 7 + 1412 , 8 @ @ 
 { 
 ItemStack itemstack1 = this . thePlayer . inventory . getCurrentItem ( ) ; 
 
 @ @ - 96 , 7 + 97 , 7 @ @ 
 { 
 this . entityRenderer . itemRenderer . resetEquippedProgress2 ( ) ; 
 } 
 - @ @ - 1574 , 6 + 1594 , 8 @ @ 
 + @ @ - 1574 , 6 + 1595 , 8 @ @ 
 
 while ( Mouse . next ( ) ) 
 { 
 @ @ - 105 , 7 + 106 , 7 @ @ 
 i = Mouse . getEventButton ( ) ; 
 
 if ( isRunningOnMac & & i = = 0 & & ( Keyboard . isKeyDown ( 29 ) | | Keyboard . isKeyDown ( 157 ) ) ) 
 - @ @ - 2046 , 6 + 2068 , 11 @ @ 
 + @ @ - 2046 , 6 + 2069 , 11 @ @ 
 { 
 this . statFileWriter . syncStats ( ) ; 
 
 @ @ - 117 , 7 + 118 , 7 @ @ 
 if ( par1WorldClient = = null ) 
 { 
 NetClientHandler netclienthandler = this . getNetHandler ( ) ; 
 - @ @ - 2063 , 6 + 2090 , 18 @ @ 
 + @ @ - 2063 , 6 + 2091 , 18 @ @ 
 if ( this . theIntegratedServer ! = null ) 
 { 
 this . theIntegratedServer . initiateShutdown ( ) ; 
 @ @ - 136 , 7 + 137 , 16 @ @ 
 } 
 
 this . theIntegratedServer = null ; 
 - @ @ - 2236 , 107 + 2275 , 12 @ @ 
 + @ @ - 2225 , 7 + 2265 , 7 @ @ 
 + * / 
 + public boolean handleClientCommand ( String par1Str ) 
 + { 
 + - return false ; 
 + + return ClientCommandHandler . instance . executeCommand ( thePlayer , par1Str ) = = 1 ; 
 + } 
 + 
 + / * * 
 + @ @ - 2236 , 107 + 2276 , 12 @ @ 
 if ( this . objectMouseOver ! = null ) 
 { 
 boolean flag = this . thePlayer . capabilities . isCreativeMode ; 
 @ @ - 248 , 7 + 258 , 7 @ @ 
 
 if ( flag ) 
 { 
 - @ @ - 2419 , 11 + 2363 , 18 @ @ 
 + @ @ - 2419 , 11 + 2364 , 18 @ @ 
 par1PlayerUsageSnooper . addData ( " gl _ max _ texture _ size " , Integer . valueOf ( getGLMaximumTextureSize ( ) ) ) ; 
 } 
 
 @ @ - 267 , 7 + 277 , 7 @ @ 
 for ( int i = 16384 ; i > 0 ; i > > = 1 ) 
 { 
 GL11 . glTexImage2D ( GL11 . GL _ PROXY _ TEXTURE _ 2D , 0 , GL11 . GL _ RGBA , i , i , 0 , GL11 . GL _ RGBA , GL11 . GL _ UNSIGNED _ BYTE , ( ByteBuffer ) null ) ; 
 - @ @ - 2431 , 6 + 2382 , 7 @ @ 
 + @ @ - 2431 , 6 + 2383 , 7 @ @ 
 
 if ( j ! = 0 ) 
 { 
 diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiChat . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiChat . java . patch 
 new file mode 100644 
 index 0000000 . . 755d5e3 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiChat . java . patch 
 @ @ - 0 , 0 + 1 , 44 @ @ 
 + - - - . . / src _ base / minecraft / net / minecraft / client / gui / GuiChat . java 
 + + + + . . / src _ work / minecraft / net / minecraft / client / gui / GuiChat . java 
 + @ @ - 7 , 8 + 7 , 11 @ @ 
 + import java . util . Iterator ; 
 + import java . util . List ; 
 + import net . minecraft . network . packet . Packet203AutoComplete ; 
 + + import net . minecraft . util . EnumChatFormatting ; 
 + + import net . minecraftforge . client . ClientCommandHandler ; 
 + import org . lwjgl . input . Keyboard ; 
 + import org . lwjgl . input . Mouse ; 
 + + import com . google . common . collect . ObjectArrays ; 
 + 
 + @ SideOnly ( Side . CLIENT ) 
 + public class GuiChat extends GuiScreen 
 + @ @ - 278 , 13 + 281 , 14 @ @ 
 + this . mc . ingameGUI . getChatGUI ( ) . printChatMessageWithOptionalDeletion ( stringbuilder . toString ( ) , 1 ) ; 
 + } 
 + 
 + - this . inputField . writeText ( ( String ) this . field _ 73904 _ o . get ( this . field _ 73903 _ n + + ) ) ; 
 + + this . inputField . writeText ( EnumChatFormatting . func _ 110646 _ a ( ( String ) this . field _ 73904 _ o . get ( this . field _ 73903 _ n + + ) ) ) ; 
 + } 
 + 
 + private void func _ 73893 _ a ( String par1Str , String par2Str ) 
 + { 
 + if ( par1Str . length ( ) > = 1 ) 
 + { 
 + + ClientCommandHandler . instance . autoComplete ( par1Str , par2Str ) ; 
 + this . mc . thePlayer . sendQueue . addToSendQueue ( new Packet203AutoComplete ( par1Str ) ) ; 
 + this . field _ 73905 _ m = true ; 
 + } 
 + @ @ - 347 , 6 + 351 , 13 @ @ 
 + String [ ] astring1 = par1ArrayOfStr ; 
 + int i = par1ArrayOfStr . length ; 
 + 
 + + String [ ] complete = ClientCommandHandler . instance . latestAutoComplete ; 
 + + if ( complete ! = null ) 
 + + { 
 + + astring1 = ObjectArrays . concat ( complete , astring1 , String . class ) ; 
 + + i = astring1 . length ; 
 + + } 
 + + 
 + for ( int j = 0 ; j < i ; + + j ) 
 + { 
 + String s = astring1 [ j ] ;
