BLEU SCORE: 0.02078073130332343

TEST MSG: Capture a vanilla freeze - will be used when FML connects to vanilla servers , soon
GENERATED MSG: Some tweaks - GameRegistry is modder facing API , so avoid having MC methods there . Fix a couple of registry bugs .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / init / Bootstrap . java . patch b / patches / minecraft / net / minecraft / init / Bootstrap . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 21ca820 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / init / Bootstrap . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / init / Bootstrap . java <nl> + + + + . . / src - work / minecraft / net / minecraft / init / Bootstrap . java <nl> + @ @ - 541 , 6 + 541 , 7 @ @ <nl> + StatList . func _ 151178 _ a ( ) ; <nl> + BiomeGenBase . func _ 185358 _ q ( ) ; <nl> + func _ 151353 _ a ( ) ; <nl> + + net . minecraftforge . fml . common . registry . GameData . vanillaSnapshot ( ) ; <nl> + } <nl> + } <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 5aad048 . . a59082f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 244 , 6 + 244 , 11 @ @ public class GameData <nl> return ( ObjectIntIdentityMap < IBlockState > ) getMain ( ) . iBlockRegistry . getSlaveMap ( BLOCKSTATE _ TO _ ID , ObjectIntIdentityMap . class ) ; <nl> } <nl> <nl> + public static void vanillaSnapshot ( ) <nl> + { <nl> + PersistentRegistryManager . freezeVanilla ( ) ; <nl> + } <nl> + <nl> / / Lets us clear the map so we can rebuild it . <nl> static class ClearableObjectIntIdentityMap < I > extends ObjectIntIdentityMap < I > <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java <nl> index 17147cb . . eb00d5b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ import net . minecraft . util . ResourceLocation ; <nl> * <nl> * @ param < V > The top level type for the registry <nl> * / <nl> - @ SuppressWarnings ( " WeakerAccess " ) <nl> + @ SuppressWarnings ( { " WeakerAccess " , " unused " } ) <nl> public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterable < V > <nl> { <nl> public Class < V > getRegistrySuperType ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 04781af . . 4fd8232 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 388 , 6 + 388 , 19 @ @ public class PersistentRegistryManager <nl> forAllRegistries ( PersistentRegistry . FROZEN , ValidateRegistryFunction . OPERATION ) ; <nl> } <nl> <nl> + public static void freezeVanilla ( ) <nl> + { <nl> + FMLLog . fine ( " Creating vanilla freeze snapshot " ) ; <nl> + for ( Map . Entry < ResourceLocation , FMLControlledNamespacedRegistry < ? > > r : PersistentRegistry . ACTIVE . registries . entrySet ( ) ) <nl> + { <nl> + / / This has to be performed prior to invoking the method so the compiler can precompute the type bounds for the method <nl> + final Class < ? extends IForgeRegistryEntry > registrySuperType = PersistentRegistry . ACTIVE . getRegistrySuperType ( r . getKey ( ) ) ; <nl> + loadRegistry ( r . getKey ( ) , PersistentRegistry . ACTIVE , PersistentRegistry . VANILLA , registrySuperType ) ; <nl> + } <nl> + forAllRegistries ( PersistentRegistry . VANILLA , ValidateRegistryFunction . OPERATION ) ; <nl> + FMLLog . fine ( " Vanilla freeze snapshot created " ) ; <nl> + } <nl> + <nl> public static List < String > processIdRematches ( Iterable < FMLMissingMappingsEvent . MissingMapping > missedMappings , boolean isLocalWorld , Map < ResourceLocation , Integer > missingBlocks , Map < ResourceLocation , Integer > missingItems , Map < ResourceLocation , Integer [ ] > remapBlocks , Map < ResourceLocation , Integer [ ] > remapItems ) <nl> { <nl> List < String > failed = Lists . newArrayList ( ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index e358478 . . 9d62051 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ import net . minecraftforge . fml . common . registry . RegistryDelegate . Delegate ; <nl> <nl> public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaultedByKey < ResourceLocation , I > <nl> { <nl> - public static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugRegistryEntries " , " false " ) ) ; <nl> + public static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugRegistryEntries " , " true " ) ) ; <nl> private final Class < I > superType ; <nl> private final boolean isDelegated ; <nl> private final Field delegateAccessor ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index f8e850b . . 8833d69 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ public class GameData <nl> static final int MAX _ BLOCK _ ID = 4095 ; <nl> static final int MIN _ ITEM _ ID = 4096 ; <nl> static final int MAX _ ITEM _ ID = 31999 ; <nl> - public static final int MIN _ POTION _ ID = 32 ; / / 0 - 31 are vanilla , forge start at 32 <nl> + public static final int MIN _ POTION _ ID = 0 ; / / 0 - ~ 31 are vanilla , forge start at 32 <nl> public static final int MAX _ POTION _ ID = 255 ; / / S1DPacketEntityEffect sends bytes , we can only use 255 <nl> <nl> private static final GameData mainData = new GameData ( ) ; <nl> @ @ - 148 , 13 + 148 , 6 @ @ public class GameData <nl> } <nl> <nl> / * * <nl> - * Called from GameRegistry , which is called from Potion - Constructor <nl> - * / <nl> - int registerPotion ( Potion potion , ResourceLocation name , int id ) { <nl> - return iPotionRegistry . add ( id , name , potion ) ; <nl> - } <nl> - <nl> - / * * <nl> * Prefix the supplied name with the current mod id . <nl> * < p / > <nl> * If no mod id can be determined , minecraft will be assumed . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> index 954e2c6 . . 04182af 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> @ @ - 236 , 11 + 236 , 6 @ @ public class GameRegistry <nl> } <nl> } <nl> <nl> - / * * Called from Potion Constructor * / <nl> - public static int registerPotion ( Potion potion , ResourceLocation name , int potionID ) { <nl> - return GameData . getMain ( ) . registerPotion ( potion , name , potionID ) ; <nl> - } <nl> - <nl> public static void addRecipe ( ItemStack output , Object . . . params ) <nl> { <nl> addShapedRecipe ( output , params ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 9683db8 . . a8c4a15 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 217 , 8 + 217 , 8 @ @ public class PersistentRegistryManager <nl> <nl> private static < T > void loadFrozenDataToStagingRegistry ( Map < ResourceLocation , Map < ResourceLocation , Integer [ ] > > remaps , ResourceLocation registryName , Class < T > regType ) <nl> { <nl> - FMLControlledNamespacedRegistry < T > newRegistry = PersistentRegistry . STAGING . getRegistry ( registryName , regType ) ; <nl> FMLControlledNamespacedRegistry < T > frozenRegistry = PersistentRegistry . FROZEN . getRegistry ( registryName , regType ) ; <nl> + FMLControlledNamespacedRegistry < T > newRegistry = PersistentRegistry . STAGING . getOrShallowCopyRegistry ( registryName , regType , frozenRegistry ) ; <nl> newRegistry . loadIds ( frozenRegistry . getEntriesNotIn ( newRegistry ) , Maps . < ResourceLocation , Integer > newLinkedHashMap ( ) , remaps . get ( registryName ) , frozenRegistry , registryName ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / init / Bootstrap . java . patch b / patches / minecraft / net / minecraft / init / Bootstrap . java . patch 
 new file mode 100644 
 index 0000000 . . 21ca820 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / init / Bootstrap . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / init / Bootstrap . java 
 + + + + . . / src - work / minecraft / net / minecraft / init / Bootstrap . java 
 + @ @ - 541 , 6 + 541 , 7 @ @ 
 + StatList . func _ 151178 _ a ( ) ; 
 + BiomeGenBase . func _ 185358 _ q ( ) ; 
 + func _ 151353 _ a ( ) ; 
 + + net . minecraftforge . fml . common . registry . GameData . vanillaSnapshot ( ) ; 
 + } 
 + } 
 + 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 5aad048 . . a59082f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 244 , 6 + 244 , 11 @ @ public class GameData 
 return ( ObjectIntIdentityMap < IBlockState > ) getMain ( ) . iBlockRegistry . getSlaveMap ( BLOCKSTATE _ TO _ ID , ObjectIntIdentityMap . class ) ; 
 } 
 
 + public static void vanillaSnapshot ( ) 
 + { 
 + PersistentRegistryManager . freezeVanilla ( ) ; 
 + } 
 + 
 / / Lets us clear the map so we can rebuild it . 
 static class ClearableObjectIntIdentityMap < I > extends ObjectIntIdentityMap < I > 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java 
 index 17147cb . . eb00d5b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java 
 @ @ - 12 , 7 + 12 , 7 @ @ import net . minecraft . util . ResourceLocation ; 
 * 
 * @ param < V > The top level type for the registry 
 * / 
 - @ SuppressWarnings ( " WeakerAccess " ) 
 + @ SuppressWarnings ( { " WeakerAccess " , " unused " } ) 
 public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterable < V > 
 { 
 public Class < V > getRegistrySuperType ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 04781af . . 4fd8232 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 388 , 6 + 388 , 19 @ @ public class PersistentRegistryManager 
 forAllRegistries ( PersistentRegistry . FROZEN , ValidateRegistryFunction . OPERATION ) ; 
 } 
 
 + public static void freezeVanilla ( ) 
 + { 
 + FMLLog . fine ( " Creating vanilla freeze snapshot " ) ; 
 + for ( Map . Entry < ResourceLocation , FMLControlledNamespacedRegistry < ? > > r : PersistentRegistry . ACTIVE . registries . entrySet ( ) ) 
 + { 
 + / / This has to be performed prior to invoking the method so the compiler can precompute the type bounds for the method 
 + final Class < ? extends IForgeRegistryEntry > registrySuperType = PersistentRegistry . ACTIVE . getRegistrySuperType ( r . getKey ( ) ) ; 
 + loadRegistry ( r . getKey ( ) , PersistentRegistry . ACTIVE , PersistentRegistry . VANILLA , registrySuperType ) ; 
 + } 
 + forAllRegistries ( PersistentRegistry . VANILLA , ValidateRegistryFunction . OPERATION ) ; 
 + FMLLog . fine ( " Vanilla freeze snapshot created " ) ; 
 + } 
 + 
 public static List < String > processIdRematches ( Iterable < FMLMissingMappingsEvent . MissingMapping > missedMappings , boolean isLocalWorld , Map < ResourceLocation , Integer > missingBlocks , Map < ResourceLocation , Integer > missingItems , Map < ResourceLocation , Integer [ ] > remapBlocks , Map < ResourceLocation , Integer [ ] > remapItems ) 
 { 
 List < String > failed = Lists . newArrayList ( ) ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index e358478 . . 9d62051 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 28 , 7 + 28 , 7 @ @ import net . minecraftforge . fml . common . registry . RegistryDelegate . Delegate ; 
 
 public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaultedByKey < ResourceLocation , I > 
 { 
 - public static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugRegistryEntries " , " false " ) ) ; 
 + public static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugRegistryEntries " , " true " ) ) ; 
 private final Class < I > superType ; 
 private final boolean isDelegated ; 
 private final Field delegateAccessor ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index f8e850b . . 8833d69 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 32 , 7 + 32 , 7 @ @ public class GameData 
 static final int MAX _ BLOCK _ ID = 4095 ; 
 static final int MIN _ ITEM _ ID = 4096 ; 
 static final int MAX _ ITEM _ ID = 31999 ; 
 - public static final int MIN _ POTION _ ID = 32 ; / / 0 - 31 are vanilla , forge start at 32 
 + public static final int MIN _ POTION _ ID = 0 ; / / 0 - ~ 31 are vanilla , forge start at 32 
 public static final int MAX _ POTION _ ID = 255 ; / / S1DPacketEntityEffect sends bytes , we can only use 255 
 
 private static final GameData mainData = new GameData ( ) ; 
 @ @ - 148 , 13 + 148 , 6 @ @ public class GameData 
 } 
 
 / * * 
 - * Called from GameRegistry , which is called from Potion - Constructor 
 - * / 
 - int registerPotion ( Potion potion , ResourceLocation name , int id ) { 
 - return iPotionRegistry . add ( id , name , potion ) ; 
 - } 
 - 
 - / * * 
 * Prefix the supplied name with the current mod id . 
 * < p / > 
 * If no mod id can be determined , minecraft will be assumed . 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 index 954e2c6 . . 04182af 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 @ @ - 236 , 11 + 236 , 6 @ @ public class GameRegistry 
 } 
 } 
 
 - / * * Called from Potion Constructor * / 
 - public static int registerPotion ( Potion potion , ResourceLocation name , int potionID ) { 
 - return GameData . getMain ( ) . registerPotion ( potion , name , potionID ) ; 
 - } 
 - 
 public static void addRecipe ( ItemStack output , Object . . . params ) 
 { 
 addShapedRecipe ( output , params ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 9683db8 . . a8c4a15 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 217 , 8 + 217 , 8 @ @ public class PersistentRegistryManager 
 
 private static < T > void loadFrozenDataToStagingRegistry ( Map < ResourceLocation , Map < ResourceLocation , Integer [ ] > > remaps , ResourceLocation registryName , Class < T > regType ) 
 { 
 - FMLControlledNamespacedRegistry < T > newRegistry = PersistentRegistry . STAGING . getRegistry ( registryName , regType ) ; 
 FMLControlledNamespacedRegistry < T > frozenRegistry = PersistentRegistry . FROZEN . getRegistry ( registryName , regType ) ; 
 + FMLControlledNamespacedRegistry < T > newRegistry = PersistentRegistry . STAGING . getOrShallowCopyRegistry ( registryName , regType , frozenRegistry ) ; 
 newRegistry . loadIds ( frozenRegistry . getEntriesNotIn ( newRegistry ) , Maps . < ResourceLocation , Integer > newLinkedHashMap ( ) , remaps . get ( registryName ) , frozenRegistry , registryName ) ; 
 } 

