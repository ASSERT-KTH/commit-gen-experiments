BLEU SCORE: 0.020980574531482755

TEST MSG: Added color as field with setter to Fluid class .
GENERATED MSG: Add Forge fluid handler test

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> index 6ec64ea . . febd50c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> @ @ - 20 , 6 + 20 , 8 @ @ <nl> package net . minecraftforge . fluids ; <nl> <nl> import javax . annotation . Nullable ; <nl> + <nl> + import java . awt . Color ; <nl> import java . util . Locale ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . material . Material ; <nl> @ @ - 125 , 7 + 127 , 29 @ @ public class Fluid <nl> * The default value of null should remain for any Fluid without a Block implementation . <nl> * / <nl> protected Block block = null ; <nl> + <nl> + / * * <nl> + * Color used by universal bucket and the ModelFluid baked model . <nl> + * Note that this int includes the alpha so converting this to RGB with alpha would be <nl> + * float r = ( ( color > > 16 ) & 0xFF ) / 255f ; / / red <nl> + * float g = ( ( color > > 8 ) & 0xFF ) / 255f ; / / green <nl> + * float b = ( ( color > > 0 ) & 0xFF ) / 255f ; / / blue <nl> + * float a = ( ( color > > 24 ) & 0xFF ) / 255f ; / / alpha <nl> + * / <nl> + protected int color = 0xFFFFFFFF ; <nl> <nl> + public Fluid ( String fluidName , ResourceLocation still , ResourceLocation flowing , Color color ) <nl> + { <nl> + this ( fluidName , still , flowing ) ; <nl> + this . setColor ( color ) ; <nl> + } <nl> + <nl> + public Fluid ( String fluidName , ResourceLocation still , ResourceLocation flowing , int color ) <nl> + { <nl> + this ( fluidName , still , flowing ) ; <nl> + this . setColor ( color ) ; <nl> + } <nl> + <nl> public Fluid ( String fluidName , ResourceLocation still , ResourceLocation flowing ) <nl> { <nl> this . fluidName = fluidName . toLowerCase ( Locale . ENGLISH ) ; <nl> @ @ - 201 , 6 + 225 , 18 @ @ public class Fluid <nl> this . emptySound = emptySound ; <nl> return this ; <nl> } <nl> + <nl> + public Fluid setColor ( Color color ) <nl> + { <nl> + this . color = color . getRGB ( ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public Fluid setColor ( int color ) <nl> + { <nl> + this . color = color ; <nl> + return this ; <nl> + } <nl> <nl> public final String getName ( ) <nl> { <nl> @ @ - 311 , 7 + 347 , 7 @ @ public class Fluid <nl> <nl> public int getColor ( ) <nl> { <nl> - return 0xFFFFFFFF ; <nl> + return color ; <nl> } <nl> <nl> public ResourceLocation getStill ( ) <nl> diff - - git a / src / test / java / net / minecraftforge / debug / FluidAdditionalFieldsTest . java b / src / test / java / net / minecraftforge / debug / FluidAdditionalFieldsTest . java <nl> new file mode 100644 <nl> index 0000000 . . e870fe0 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / FluidAdditionalFieldsTest . java <nl> @ @ - 0 , 0 + 1 , 58 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . awt . Color ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> + import net . minecraftforge . fluids . BlockFluidBase ; <nl> + import net . minecraftforge . fluids . BlockFluidClassic ; <nl> + import net . minecraftforge . fluids . Fluid ; <nl> + import net . minecraftforge . fluids . FluidRegistry ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventBusSubscriber ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; <nl> + <nl> + @ Mod ( modid = FluidAdditionalFieldsTest . MODID , name = " Test Mod " , version = " 1 . 0 . 0 " , acceptedMinecraftVersions = " * " ) <nl> + @ EventBusSubscriber <nl> + public class FluidAdditionalFieldsTest <nl> + { <nl> + static final boolean ENABLED = false ; / / < - - enable mod <nl> + static final Color COLOR = Color . PINK ; / / < - - change this to try other colors <nl> + <nl> + static final String MODID = " fluidadditionalfields " ; <nl> + static final ResourceLocation RES _ LOC = new ResourceLocation ( MODID , " slime " ) ; <nl> + static <nl> + { <nl> + if ( ENABLED ) <nl> + { <nl> + FluidRegistry . enableUniversalBucket ( ) ; <nl> + } <nl> + } <nl> + public static final Fluid SLIME = new Fluid ( " slime " , new ResourceLocation ( MODID , " slime _ still " ) , new ResourceLocation ( MODID , " slime _ flow " ) ) . setColor ( COLOR ) ; <nl> + @ ObjectHolder ( " slime " ) <nl> + public static final BlockFluidBase SLIME _ BLOCK = null ; <nl> + <nl> + @ EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + if ( ENABLED ) <nl> + { <nl> + FluidRegistry . registerFluid ( SLIME ) ; <nl> + FluidRegistry . addBucketForFluid ( SLIME ) ; <nl> + } <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void eventBlockRegistry ( final RegistryEvent . Register < Block > event ) <nl> + { <nl> + if ( ENABLED ) <nl> + { <nl> + event . getRegistry ( ) . register ( ( new BlockFluidClassic ( SLIME , Material . WATER ) ) . setRegistryName ( RES _ LOC ) . setUnlocalizedName ( RES _ LOC . toString ( ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / fluidadditionalfields / blockstates / slime . json b / src / test / resources / assets / fluidadditionalfields / blockstates / slime . json <nl> new file mode 100644 <nl> index 0000000 . . edce38c <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / fluidadditionalfields / blockstates / slime . json <nl> @ @ - 0 , 0 + 1 , 38 @ @ <nl> + { <nl> + " forge _ marker " : 1 , <nl> + " defaults " : { <nl> + " textures " : { <nl> + " particle " : " blocks / slime " , <nl> + " all " : " examplemod : blocks / slime _ flow " <nl> + } , <nl> + " model " : " forge : fluid " , <nl> + 	 " custom " : { " fluid " : " slime " } , <nl> + 	 " uvlock " : false <nl> + } , <nl> + " variants " : { <nl> + " normal " : [ { <nl> + <nl> + } ] , <nl> + " inventory " : [ { <nl> + <nl> + } ] , <nl> + " level " : { <nl> + " 0 " : { } , <nl> + " 1 " : { } , <nl> + " 2 " : { } , <nl> + " 3 " : { } , <nl> + " 4 " : { } , <nl> + " 5 " : { } , <nl> + " 6 " : { } , <nl> + " 7 " : { } , <nl> + " 8 " : { } , <nl> + " 9 " : { } , <nl> + " 10 " : { } , <nl> + " 11 " : { } , <nl> + " 12 " : { } , <nl> + " 13 " : { } , <nl> + " 14 " : { } , <nl> + " 15 " : { } <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png b / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png <nl> new file mode 100644 <nl> index 0000000 . . a141405 <nl> Binary files / dev / null and b / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png differ <nl> diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png . mcmeta b / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png . mcmeta <nl> new file mode 100644 <nl> index 0000000 . . 058b84f <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png . mcmeta <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + { <nl> + " animation " : { <nl> + " frametime " : 20 <nl> + } <nl> + } <nl> + <nl> diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ overlay . png b / src / test / resources / assets / fluidadditionalfields / textures / slime _ overlay . png <nl> new file mode 100644 <nl> index 0000000 . . 2c19ed5 <nl> Binary files / dev / null and b / src / test / resources / assets / fluidadditionalfields / textures / slime _ overlay . png differ <nl> diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png b / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png <nl> new file mode 100644 <nl> index 0000000 . . 9538697 <nl> Binary files / dev / null and b / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png differ <nl> diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png . mcmeta b / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png . mcmeta <nl> new file mode 100644 <nl> index 0000000 . . 090b11d <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png . mcmeta <nl> @ @ - 0 , 0 + 1 , 5 @ @ <nl> + { <nl> + " animation " : { <nl> + " frametime " : 20 <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> index e38452f . . ba06fcc 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest <nl> private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; <nl> private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; <nl> <nl> + private static final boolean ENABLE = false ; <nl> + <nl> static <nl> { <nl> - FluidRegistry . enableUniversalBucket ( ) ; <nl> + if ( ENABLE ) <nl> + { <nl> + FluidRegistry . enableUniversalBucket ( ) ; <nl> + } <nl> } <nl> <nl> @ SidedProxy <nl> @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest <nl> @ Override <nl> void setupModels ( ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> ModelLoader . setBucketModelDefinition ( dynBucket ) ; <nl> <nl> final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; <nl> @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> GameRegistry . register ( new TestItem ( ) , testItemName ) ; <nl> Block tank = new BlockSimpleTank ( ) ; <nl> GameRegistry . register ( tank , simpleTankName ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> index 9d92565 . . ccbfb40 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug <nl> public static final String MODID = " ForgeDebugModelFluid " ; <nl> public static final String VERSION = " 1 . 0 " ; <nl> <nl> + public static final boolean ENABLE = false ; <nl> + <nl> @ SidedProxy <nl> public static CommonProxy proxy ; <nl> <nl> public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; <nl> <nl> @ EventHandler <nl> - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + if ( ENABLE ) <nl> + { <nl> + proxy . preInit ( event ) ; <nl> + } <nl> + } <nl> <nl> public static class CommonProxy <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ed4331 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . fluids . Fluid ; <nl> + import net . minecraftforge . fluids . FluidRegistry ; <nl> + import net . minecraftforge . fluids . FluidStack ; <nl> + import net . minecraftforge . fluids . FluidUtil ; <nl> + import net . minecraftforge . fluids . capability . IFluidHandler ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; <nl> + import net . minecraftforge . fml . common . registry . ForgeRegistries ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) <nl> + public class FluidHandlerTest <nl> + { <nl> + 	 public static final boolean ENABLE = false ; <nl> + <nl> + 	 @ Mod . EventHandler <nl> + 	 public void loadComplete ( FMLLoadCompleteEvent event ) <nl> + 	 { <nl> + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) <nl> + 	 	 	 return ; <nl> + <nl> + 	 	 for ( ItemStack stack : getAllItems ( ) ) <nl> + 	 	 { <nl> + 	 	 	 testFluidContainer ( stack ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static void testFluidContainer ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 ItemStack drainedStack = stack . copy ( ) ; <nl> + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; <nl> + 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 { <nl> + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; <nl> + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; <nl> + <nl> + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; <nl> + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; <nl> + 	 	 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 	 	 { <nl> + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; <nl> + 	 	 	 	 	 if ( filled > 0 ) <nl> + 	 	 	 	 	 { <nl> + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; <nl> + 	 	 	 	 	 } <nl> + 	 	 	 	 } <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String fluidString ( FluidStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null ) <nl> + 	 	 { <nl> + 	 	 	 return " no fluid " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String stackString ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) <nl> + 	 	 { <nl> + 	 	 	 return " no item " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 String resourceDomain ; <nl> + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = " unknown " ; <nl> + 	 	 	 } <nl> + 	 	 	 else <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; <nl> + 	 	 	 } <nl> + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static List < ItemStack > getAllItems ( ) <nl> + 	 { <nl> + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; <nl> + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) <nl> + 	 	 { <nl> + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 item . getSubItems ( item , tab , list ) ; <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 	 return list ; <nl> + 	 } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 index 6ec64ea . . febd50c 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java 
 + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 @ @ - 20 , 6 + 20 , 8 @ @ 
 package net . minecraftforge . fluids ; 
 
 import javax . annotation . Nullable ; 
 + 
 + import java . awt . Color ; 
 import java . util . Locale ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . material . Material ; 
 @ @ - 125 , 7 + 127 , 29 @ @ public class Fluid 
 * The default value of null should remain for any Fluid without a Block implementation . 
 * / 
 protected Block block = null ; 
 + 
 + / * * 
 + * Color used by universal bucket and the ModelFluid baked model . 
 + * Note that this int includes the alpha so converting this to RGB with alpha would be 
 + * float r = ( ( color > > 16 ) & 0xFF ) / 255f ; / / red 
 + * float g = ( ( color > > 8 ) & 0xFF ) / 255f ; / / green 
 + * float b = ( ( color > > 0 ) & 0xFF ) / 255f ; / / blue 
 + * float a = ( ( color > > 24 ) & 0xFF ) / 255f ; / / alpha 
 + * / 
 + protected int color = 0xFFFFFFFF ; 
 
 + public Fluid ( String fluidName , ResourceLocation still , ResourceLocation flowing , Color color ) 
 + { 
 + this ( fluidName , still , flowing ) ; 
 + this . setColor ( color ) ; 
 + } 
 + 
 + public Fluid ( String fluidName , ResourceLocation still , ResourceLocation flowing , int color ) 
 + { 
 + this ( fluidName , still , flowing ) ; 
 + this . setColor ( color ) ; 
 + } 
 + 
 public Fluid ( String fluidName , ResourceLocation still , ResourceLocation flowing ) 
 { 
 this . fluidName = fluidName . toLowerCase ( Locale . ENGLISH ) ; 
 @ @ - 201 , 6 + 225 , 18 @ @ public class Fluid 
 this . emptySound = emptySound ; 
 return this ; 
 } 
 + 
 + public Fluid setColor ( Color color ) 
 + { 
 + this . color = color . getRGB ( ) ; 
 + return this ; 
 + } 
 + 
 + public Fluid setColor ( int color ) 
 + { 
 + this . color = color ; 
 + return this ; 
 + } 
 
 public final String getName ( ) 
 { 
 @ @ - 311 , 7 + 347 , 7 @ @ public class Fluid 
 
 public int getColor ( ) 
 { 
 - return 0xFFFFFFFF ; 
 + return color ; 
 } 
 
 public ResourceLocation getStill ( ) 
 diff - - git a / src / test / java / net / minecraftforge / debug / FluidAdditionalFieldsTest . java b / src / test / java / net / minecraftforge / debug / FluidAdditionalFieldsTest . java 
 new file mode 100644 
 index 0000000 . . e870fe0 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / FluidAdditionalFieldsTest . java 
 @ @ - 0 , 0 + 1 , 58 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import java . awt . Color ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 + import net . minecraftforge . fluids . BlockFluidBase ; 
 + import net . minecraftforge . fluids . BlockFluidClassic ; 
 + import net . minecraftforge . fluids . Fluid ; 
 + import net . minecraftforge . fluids . FluidRegistry ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventBusSubscriber ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; 
 + 
 + @ Mod ( modid = FluidAdditionalFieldsTest . MODID , name = " Test Mod " , version = " 1 . 0 . 0 " , acceptedMinecraftVersions = " * " ) 
 + @ EventBusSubscriber 
 + public class FluidAdditionalFieldsTest 
 + { 
 + static final boolean ENABLED = false ; / / < - - enable mod 
 + static final Color COLOR = Color . PINK ; / / < - - change this to try other colors 
 + 
 + static final String MODID = " fluidadditionalfields " ; 
 + static final ResourceLocation RES _ LOC = new ResourceLocation ( MODID , " slime " ) ; 
 + static 
 + { 
 + if ( ENABLED ) 
 + { 
 + FluidRegistry . enableUniversalBucket ( ) ; 
 + } 
 + } 
 + public static final Fluid SLIME = new Fluid ( " slime " , new ResourceLocation ( MODID , " slime _ still " ) , new ResourceLocation ( MODID , " slime _ flow " ) ) . setColor ( COLOR ) ; 
 + @ ObjectHolder ( " slime " ) 
 + public static final BlockFluidBase SLIME _ BLOCK = null ; 
 + 
 + @ EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + if ( ENABLED ) 
 + { 
 + FluidRegistry . registerFluid ( SLIME ) ; 
 + FluidRegistry . addBucketForFluid ( SLIME ) ; 
 + } 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void eventBlockRegistry ( final RegistryEvent . Register < Block > event ) 
 + { 
 + if ( ENABLED ) 
 + { 
 + event . getRegistry ( ) . register ( ( new BlockFluidClassic ( SLIME , Material . WATER ) ) . setRegistryName ( RES _ LOC ) . setUnlocalizedName ( RES _ LOC . toString ( ) ) ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / fluidadditionalfields / blockstates / slime . json b / src / test / resources / assets / fluidadditionalfields / blockstates / slime . json 
 new file mode 100644 
 index 0000000 . . edce38c 
 - - - / dev / null 
 + + + b / src / test / resources / assets / fluidadditionalfields / blockstates / slime . json 
 @ @ - 0 , 0 + 1 , 38 @ @ 
 + { 
 + " forge _ marker " : 1 , 
 + " defaults " : { 
 + " textures " : { 
 + " particle " : " blocks / slime " , 
 + " all " : " examplemod : blocks / slime _ flow " 
 + } , 
 + " model " : " forge : fluid " , 
 + 	 " custom " : { " fluid " : " slime " } , 
 + 	 " uvlock " : false 
 + } , 
 + " variants " : { 
 + " normal " : [ { 
 + 
 + } ] , 
 + " inventory " : [ { 
 + 
 + } ] , 
 + " level " : { 
 + " 0 " : { } , 
 + " 1 " : { } , 
 + " 2 " : { } , 
 + " 3 " : { } , 
 + " 4 " : { } , 
 + " 5 " : { } , 
 + " 6 " : { } , 
 + " 7 " : { } , 
 + " 8 " : { } , 
 + " 9 " : { } , 
 + " 10 " : { } , 
 + " 11 " : { } , 
 + " 12 " : { } , 
 + " 13 " : { } , 
 + " 14 " : { } , 
 + " 15 " : { } 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png b / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png 
 new file mode 100644 
 index 0000000 . . a141405 
 Binary files / dev / null and b / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png differ 
 diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png . mcmeta b / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png . mcmeta 
 new file mode 100644 
 index 0000000 . . 058b84f 
 - - - / dev / null 
 + + + b / src / test / resources / assets / fluidadditionalfields / textures / slime _ flow . png . mcmeta 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + { 
 + " animation " : { 
 + " frametime " : 20 
 + } 
 + } 
 + 
 diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ overlay . png b / src / test / resources / assets / fluidadditionalfields / textures / slime _ overlay . png 
 new file mode 100644 
 index 0000000 . . 2c19ed5 
 Binary files / dev / null and b / src / test / resources / assets / fluidadditionalfields / textures / slime _ overlay . png differ 
 diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png b / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png 
 new file mode 100644 
 index 0000000 . . 9538697 
 Binary files / dev / null and b / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png differ 
 diff - - git a / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png . mcmeta b / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png . mcmeta 
 new file mode 100644 
 index 0000000 . . 090b11d 
 - - - / dev / null 
 + + + b / src / test / resources / assets / fluidadditionalfields / textures / slime _ still . png . mcmeta 
 @ @ - 0 , 0 + 1 , 5 @ @ 
 + { 
 + " animation " : { 
 + " frametime " : 20 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 index e38452f . . ba06fcc 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest 
 private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; 
 private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; 
 
 + private static final boolean ENABLE = false ; 
 + 
 static 
 { 
 - FluidRegistry . enableUniversalBucket ( ) ; 
 + if ( ENABLE ) 
 + { 
 + FluidRegistry . enableUniversalBucket ( ) ; 
 + } 
 } 
 
 @ SidedProxy 
 @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest 
 @ Override 
 void setupModels ( ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 ModelLoader . setBucketModelDefinition ( dynBucket ) ; 
 
 final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; 
 @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 GameRegistry . register ( new TestItem ( ) , testItemName ) ; 
 Block tank = new BlockSimpleTank ( ) ; 
 GameRegistry . register ( tank , simpleTankName ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 index 9d92565 . . ccbfb40 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug 
 public static final String MODID = " ForgeDebugModelFluid " ; 
 public static final String VERSION = " 1 . 0 " ; 
 
 + public static final boolean ENABLE = false ; 
 + 
 @ SidedProxy 
 public static CommonProxy proxy ; 
 
 public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; 
 
 @ EventHandler 
 - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + if ( ENABLE ) 
 + { 
 + proxy . preInit ( event ) ; 
 + } 
 + } 
 
 public static class CommonProxy 
 { 
 diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 new file mode 100644 
 index 0000000 . . 0ed4331 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . fluids . Fluid ; 
 + import net . minecraftforge . fluids . FluidRegistry ; 
 + import net . minecraftforge . fluids . FluidStack ; 
 + import net . minecraftforge . fluids . FluidUtil ; 
 + import net . minecraftforge . fluids . capability . IFluidHandler ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; 
 + import net . minecraftforge . fml . common . registry . ForgeRegistries ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) 
 + public class FluidHandlerTest 
 + { 
 + 	 public static final boolean ENABLE = false ; 
 + 
 + 	 @ Mod . EventHandler 
 + 	 public void loadComplete ( FMLLoadCompleteEvent event ) 
 + 	 { 
 + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) 
 + 	 	 	 return ; 
 + 
 + 	 	 for ( ItemStack stack : getAllItems ( ) ) 
 + 	 	 { 
 + 	 	 	 testFluidContainer ( stack ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static void testFluidContainer ( ItemStack stack ) 
 + 	 { 
 + 	 	 ItemStack drainedStack = stack . copy ( ) ; 
 + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; 
 + 	 	 if ( fluidHandler ! = null ) 
 + 	 	 { 
 + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; 
 + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; 
 + 
 + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; 
 + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; 
 + 	 	 	 	 if ( fluidHandler ! = null ) 
 + 	 	 	 	 { 
 + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; 
 + 	 	 	 	 	 if ( filled > 0 ) 
 + 	 	 	 	 	 { 
 + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; 
 + 	 	 	 	 	 } 
 + 	 	 	 	 } 
 + 	 	 	 } 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String fluidString ( FluidStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null ) 
 + 	 	 { 
 + 	 	 	 return " no fluid " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String stackString ( ItemStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) 
 + 	 	 { 
 + 	 	 	 return " no item " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 String resourceDomain ; 
 + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = " unknown " ; 
 + 	 	 	 } 
 + 	 	 	 else 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; 
 + 	 	 	 } 
 + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static List < ItemStack > getAllItems ( ) 
 + 	 { 
 + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; 
 + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) 
 + 	 	 { 
 + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 item . getSubItems ( item , tab , list ) ; 
 + 	 	 	 } 
 + 	 	 } 
 + 	 	 return list ; 
 + 	 } 
 + }
