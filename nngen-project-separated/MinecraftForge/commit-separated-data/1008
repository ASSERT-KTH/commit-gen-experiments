BLEU SCORE: 0.016074772865287294

TEST MSG: Change permission levels on ore recipes parameters
GENERATED MSG: Cleanup mirrored things in ShapedOreRecipe to address issue 208 and issue 210

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> index 58538c6 . . 2794e8a 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> @ @ - 17 , 14 + 17 , 14 @ @ import net . minecraftforge . common . ForgeHooks ; <nl> public class ShapedOreRecipe implements IRecipe <nl> { <nl> / / Added in for future ease of change , but hard coded for now . <nl> - private static final int MAX _ CRAFT _ GRID _ WIDTH = 3 ; <nl> - private static final int MAX _ CRAFT _ GRID _ HEIGHT = 3 ; <nl> + public static final int MAX _ CRAFT _ GRID _ WIDTH = 3 ; <nl> + public static final int MAX _ CRAFT _ GRID _ HEIGHT = 3 ; <nl> <nl> - private ItemStack output = null ; <nl> - private Object [ ] input = null ; <nl> - private int width = 0 ; <nl> - private int height = 0 ; <nl> - private boolean mirrored = true ; <nl> + protected ItemStack output = null ; <nl> + protected Object [ ] input = null ; <nl> + protected int width = 0 ; <nl> + protected int height = 0 ; <nl> + protected boolean mirrored = true ; <nl> <nl> public ShapedOreRecipe ( Block result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } <nl> public ShapedOreRecipe ( Item result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } <nl> @ @ - 184 , 7 + 184 , 7 @ @ public class ShapedOreRecipe implements IRecipe <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - private boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirror ) <nl> + protected boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirror ) <nl> { <nl> for ( int x = 0 ; x < MAX _ CRAFT _ GRID _ WIDTH ; x + + ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> index b69b121 . . 69c8151 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> @ @ - 16 , 8 + 16 , 8 @ @ import net . minecraftforge . common . ForgeHooks ; <nl> <nl> public class ShapelessOreRecipe implements IRecipe <nl> { <nl> - private ItemStack output = null ; <nl> - private ArrayList < Object > input = new ArrayList < Object > ( ) ; <nl> + protected ItemStack output = null ; <nl> + protected ArrayList < Object > input = new ArrayList < Object > ( ) ; <nl> <nl> public ShapelessOreRecipe ( Block result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } <nl> public ShapelessOreRecipe ( Item result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; }
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / oredict / ShapedOreRecipe . java b / common / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> index e1c0e5a . . a89c95d 100644 <nl> - - - a / common / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> + + + b / common / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> @ @ - 21 , 22 + 21 , 30 @ @ public class ShapedOreRecipe implements IRecipe <nl> private Object [ ] input = null ; <nl> private int width = 0 ; <nl> private int height = 0 ; <nl> - private boolean mirriored = true ; <nl> + private boolean mirrored = true ; <nl> <nl> - public ShapedOreRecipe ( Block result , Object . . . recipe ) { this ( result , true , recipe ) ; } <nl> - public ShapedOreRecipe ( Item result , Object . . . recipe ) { this ( result , true , recipe ) ; } <nl> - public ShapedOreRecipe ( ItemStack result , Object . . . recipe ) { this ( result , true , recipe ) ; } <nl> - public ShapedOreRecipe ( Block result , boolean mirrior , Object . . . recipe ) { this ( new ItemStack ( result ) , mirrior , recipe ) ; } <nl> - public ShapedOreRecipe ( Item result , boolean mirrior , Object . . . recipe ) { this ( new ItemStack ( result ) , mirrior , recipe ) ; } <nl> - <nl> - public ShapedOreRecipe ( ItemStack result , boolean mirrior , Object . . . recipe ) <nl> + public ShapedOreRecipe ( Block result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } <nl> + public ShapedOreRecipe ( Item result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } <nl> + public ShapedOreRecipe ( ItemStack result , Object . . . recipe ) <nl> { <nl> output = result . copy ( ) ; <nl> - mirriored = mirrior ; <nl> - <nl> + <nl> String shape = " " ; <nl> int idx = 0 ; <nl> <nl> + if ( recipe [ idx ] instanceof Boolean ) <nl> + { <nl> + mirrored = ( Boolean ) recipe [ idx ] ; <nl> + if ( recipe [ idx + 1 ] instanceof Object [ ] ) <nl> + { <nl> + recipe = ( Object [ ] ) recipe [ idx + 1 ] ; <nl> + } <nl> + else <nl> + { <nl> + idx = 1 ; <nl> + } <nl> + } <nl> + <nl> if ( recipe [ idx ] instanceof String [ ] ) <nl> { <nl> String [ ] parts = ( ( String [ ] ) recipe [ idx + + ] ) ; <nl> @ @ - 59 , 7 + 67 , 7 @ @ public class ShapedOreRecipe implements IRecipe <nl> height + + ; <nl> } <nl> } <nl> - <nl> + <nl> if ( width * height ! = shape . length ( ) ) <nl> { <nl> String ret = " Invalid shaped ore recipe : " ; <nl> @ @ - 136 , 7 + 144 , 7 @ @ public class ShapedOreRecipe implements IRecipe <nl> return true ; <nl> } <nl> <nl> - if ( mirriored & & checkMatch ( inv , x , y , false ) ) <nl> + if ( mirrored & & checkMatch ( inv , x , y , false ) ) <nl> { <nl> return true ; <nl> } <nl> @ @ - 146 , 7 + 154 , 7 @ @ public class ShapedOreRecipe implements IRecipe <nl> return false ; <nl> } <nl> <nl> - private boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirrior ) <nl> + private boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirror ) <nl> { <nl> for ( int x = 0 ; x < MAX _ CRAFT _ GRID _ WIDTH ; x + + ) <nl> { <nl> @ @ - 158 , 7 + 166 , 7 @ @ public class ShapedOreRecipe implements IRecipe <nl> <nl> if ( subX > = 0 & & subY > = 0 & & subX < width & & subY < height ) <nl> { <nl> - if ( mirrior ) <nl> + if ( mirror ) <nl> { <nl> target = input [ width - subX - 1 + subY * width ] ; <nl> } <nl> @ @ - 210 , 8 + 218 , 9 @ @ public class ShapedOreRecipe implements IRecipe <nl> return ( target . itemID = = input . itemID & & ( target . getItemDamage ( ) = = - 1 | | target . getItemDamage ( ) = = input . getItemDamage ( ) ) ) ; <nl> } <nl> <nl> - public void setMirriored ( boolean mirrior ) <nl> + public ShapedOreRecipe setMirrored ( boolean mirror ) <nl> { <nl> - mirriored = mirrior ; <nl> + mirrored = mirror ; <nl> + return this ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 index 58538c6 . . 2794e8a 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 + + + b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 @ @ - 17 , 14 + 17 , 14 @ @ import net . minecraftforge . common . ForgeHooks ; 
 public class ShapedOreRecipe implements IRecipe 
 { 
 / / Added in for future ease of change , but hard coded for now . 
 - private static final int MAX _ CRAFT _ GRID _ WIDTH = 3 ; 
 - private static final int MAX _ CRAFT _ GRID _ HEIGHT = 3 ; 
 + public static final int MAX _ CRAFT _ GRID _ WIDTH = 3 ; 
 + public static final int MAX _ CRAFT _ GRID _ HEIGHT = 3 ; 
 
 - private ItemStack output = null ; 
 - private Object [ ] input = null ; 
 - private int width = 0 ; 
 - private int height = 0 ; 
 - private boolean mirrored = true ; 
 + protected ItemStack output = null ; 
 + protected Object [ ] input = null ; 
 + protected int width = 0 ; 
 + protected int height = 0 ; 
 + protected boolean mirrored = true ; 
 
 public ShapedOreRecipe ( Block result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } 
 public ShapedOreRecipe ( Item result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } 
 @ @ - 184 , 7 + 184 , 7 @ @ public class ShapedOreRecipe implements IRecipe 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - private boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirror ) 
 + protected boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirror ) 
 { 
 for ( int x = 0 ; x < MAX _ CRAFT _ GRID _ WIDTH ; x + + ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 index b69b121 . . 69c8151 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 @ @ - 16 , 8 + 16 , 8 @ @ import net . minecraftforge . common . ForgeHooks ; 
 
 public class ShapelessOreRecipe implements IRecipe 
 { 
 - private ItemStack output = null ; 
 - private ArrayList < Object > input = new ArrayList < Object > ( ) ; 
 + protected ItemStack output = null ; 
 + protected ArrayList < Object > input = new ArrayList < Object > ( ) ; 
 
 public ShapelessOreRecipe ( Block result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } 
 public ShapelessOreRecipe ( Item result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; }

NEAREST DIFF:
diff - - git a / common / net / minecraftforge / oredict / ShapedOreRecipe . java b / common / net / minecraftforge / oredict / ShapedOreRecipe . java 
 index e1c0e5a . . a89c95d 100644 
 - - - a / common / net / minecraftforge / oredict / ShapedOreRecipe . java 
 + + + b / common / net / minecraftforge / oredict / ShapedOreRecipe . java 
 @ @ - 21 , 22 + 21 , 30 @ @ public class ShapedOreRecipe implements IRecipe 
 private Object [ ] input = null ; 
 private int width = 0 ; 
 private int height = 0 ; 
 - private boolean mirriored = true ; 
 + private boolean mirrored = true ; 
 
 - public ShapedOreRecipe ( Block result , Object . . . recipe ) { this ( result , true , recipe ) ; } 
 - public ShapedOreRecipe ( Item result , Object . . . recipe ) { this ( result , true , recipe ) ; } 
 - public ShapedOreRecipe ( ItemStack result , Object . . . recipe ) { this ( result , true , recipe ) ; } 
 - public ShapedOreRecipe ( Block result , boolean mirrior , Object . . . recipe ) { this ( new ItemStack ( result ) , mirrior , recipe ) ; } 
 - public ShapedOreRecipe ( Item result , boolean mirrior , Object . . . recipe ) { this ( new ItemStack ( result ) , mirrior , recipe ) ; } 
 - 
 - public ShapedOreRecipe ( ItemStack result , boolean mirrior , Object . . . recipe ) 
 + public ShapedOreRecipe ( Block result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } 
 + public ShapedOreRecipe ( Item result , Object . . . recipe ) { this ( new ItemStack ( result ) , recipe ) ; } 
 + public ShapedOreRecipe ( ItemStack result , Object . . . recipe ) 
 { 
 output = result . copy ( ) ; 
 - mirriored = mirrior ; 
 - 
 + 
 String shape = " " ; 
 int idx = 0 ; 
 
 + if ( recipe [ idx ] instanceof Boolean ) 
 + { 
 + mirrored = ( Boolean ) recipe [ idx ] ; 
 + if ( recipe [ idx + 1 ] instanceof Object [ ] ) 
 + { 
 + recipe = ( Object [ ] ) recipe [ idx + 1 ] ; 
 + } 
 + else 
 + { 
 + idx = 1 ; 
 + } 
 + } 
 + 
 if ( recipe [ idx ] instanceof String [ ] ) 
 { 
 String [ ] parts = ( ( String [ ] ) recipe [ idx + + ] ) ; 
 @ @ - 59 , 7 + 67 , 7 @ @ public class ShapedOreRecipe implements IRecipe 
 height + + ; 
 } 
 } 
 - 
 + 
 if ( width * height ! = shape . length ( ) ) 
 { 
 String ret = " Invalid shaped ore recipe : " ; 
 @ @ - 136 , 7 + 144 , 7 @ @ public class ShapedOreRecipe implements IRecipe 
 return true ; 
 } 
 
 - if ( mirriored & & checkMatch ( inv , x , y , false ) ) 
 + if ( mirrored & & checkMatch ( inv , x , y , false ) ) 
 { 
 return true ; 
 } 
 @ @ - 146 , 7 + 154 , 7 @ @ public class ShapedOreRecipe implements IRecipe 
 return false ; 
 } 
 
 - private boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirrior ) 
 + private boolean checkMatch ( InventoryCrafting inv , int startX , int startY , boolean mirror ) 
 { 
 for ( int x = 0 ; x < MAX _ CRAFT _ GRID _ WIDTH ; x + + ) 
 { 
 @ @ - 158 , 7 + 166 , 7 @ @ public class ShapedOreRecipe implements IRecipe 
 
 if ( subX > = 0 & & subY > = 0 & & subX < width & & subY < height ) 
 { 
 - if ( mirrior ) 
 + if ( mirror ) 
 { 
 target = input [ width - subX - 1 + subY * width ] ; 
 } 
 @ @ - 210 , 8 + 218 , 9 @ @ public class ShapedOreRecipe implements IRecipe 
 return ( target . itemID = = input . itemID & & ( target . getItemDamage ( ) = = - 1 | | target . getItemDamage ( ) = = input . getItemDamage ( ) ) ) ; 
 } 
 
 - public void setMirriored ( boolean mirrior ) 
 + public ShapedOreRecipe setMirrored ( boolean mirror ) 
 { 
 - mirriored = mirrior ; 
 + mirrored = mirror ; 
 + return this ; 
 } 
 }
