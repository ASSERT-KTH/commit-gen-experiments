BLEU SCORE: 0.028398387225677897

TEST MSG: Added support for oredict dyes to Fireworks , Armors , and Shulker recipes .
GENERATED MSG: Added a brewing registry system

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / crafting / RecipeFireworks . java . patch b / patches / minecraft / net / minecraft / item / crafting / RecipeFireworks . java . patch <nl> index b48e353 . . 7fedeb0 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / RecipeFireworks . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / RecipeFireworks . java . patch <nl> @ @ - 12 , 6 + 12 , 39 @ @ <nl> { <nl> private ItemStack field _ 92102 _ a = ItemStack . field _ 190927 _ a ; <nl> <nl> + @ @ - 41 , 7 + 39 , 7 @ @ <nl> + { <nl> + + + l ; <nl> + } <nl> + - else if ( itemstack . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) <nl> + + else if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack ) ) <nl> + { <nl> + + + k ; <nl> + } <nl> + @ @ - 127 , 9 + 125 , 9 @ @ <nl> + <nl> + if ( ! itemstack2 . func _ 190926 _ b ( ) ) <nl> + { <nl> + - if ( itemstack2 . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) <nl> + + if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack2 ) ) <nl> + { <nl> + - list . add ( Integer . valueOf ( ItemDye . field _ 150922 _ c [ itemstack2 . func _ 77960 _ j ( ) & 15 ] ) ) ; <nl> + + list . add ( Integer . valueOf ( ItemDye . field _ 150922 _ c [ net . minecraftforge . oredict . DyeUtils . rawDyeDamageFromStack ( itemstack2 ) & 15 ] ) ) ; <nl> + } <nl> + else if ( itemstack2 . func _ 77973 _ b ( ) = = Items . field _ 151114 _ aO ) <nl> + { <nl> + @ @ - 181 , 9 + 179 , 9 @ @ <nl> + <nl> + if ( ! itemstack1 . func _ 190926 _ b ( ) ) <nl> + { <nl> + - if ( itemstack1 . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) <nl> + + if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack1 ) ) <nl> + { <nl> + - list1 . add ( Integer . valueOf ( ItemDye . field _ 150922 _ c [ itemstack1 . func _ 77960 _ j ( ) & 15 ] ) ) ; <nl> + + list1 . add ( Integer . valueOf ( ItemDye . field _ 150922 _ c [ net . minecraftforge . oredict . DyeUtils . rawDyeDamageFromStack ( itemstack1 ) & 15 ] ) ) ; <nl> + } <nl> + else if ( itemstack1 . func _ 77973 _ b ( ) = = Items . field _ 151154 _ bQ ) <nl> + { <nl> @ @ - 248 , 10 + 246 , 7 @ @ <nl> { <nl> ItemStack itemstack = p _ 179532 _ 1 _ . func _ 70301 _ a ( i ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / item / crafting / RecipesArmorDyes . java . patch b / patches / minecraft / net / minecraft / item / crafting / RecipesArmorDyes . java . patch <nl> index 764e30c . . 8e8559f 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / RecipesArmorDyes . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / RecipesArmorDyes . java . patch <nl> @ @ - 12 , 6 + 12 , 30 @ @ <nl> { <nl> public boolean func _ 77569 _ a ( InventoryCrafting p _ 77569 _ 1 _ , World p _ 77569 _ 2 _ ) <nl> { <nl> + @ @ - 38 , 7 + 36 , 7 @ @ <nl> + } <nl> + else <nl> + { <nl> + - if ( itemstack1 . func _ 77973 _ b ( ) ! = Items . field _ 151100 _ aR ) <nl> + + if ( ! net . minecraftforge . oredict . DyeUtils . isDye ( itemstack1 ) ) <nl> + { <nl> + return false ; <nl> + } <nl> + @ @ - 92 , 12 + 90 , 12 @ @ <nl> + } <nl> + else <nl> + { <nl> + - if ( itemstack1 . func _ 77973 _ b ( ) ! = Items . field _ 151100 _ aR ) <nl> + + if ( ! net . minecraftforge . oredict . DyeUtils . isDye ( itemstack1 ) ) <nl> + { <nl> + return ItemStack . field _ 190927 _ a ; <nl> + } <nl> + <nl> + - float [ ] afloat = EnumDyeColor . func _ 176766 _ a ( itemstack1 . func _ 77960 _ j ( ) ) . func _ 193349 _ f ( ) ; <nl> + + float [ ] afloat = net . minecraftforge . oredict . DyeUtils . colorFromStack ( itemstack1 ) . get ( ) . func _ 193349 _ f ( ) ; <nl> + int l1 = ( int ) ( afloat [ 0 ] * 255 . 0F ) ; <nl> + int i2 = ( int ) ( afloat [ 1 ] * 255 . 0F ) ; <nl> + int j2 = ( int ) ( afloat [ 2 ] * 255 . 0F ) ; <nl> @ @ - 143 , 11 + 141 , 7 @ @ <nl> for ( int i = 0 ; i < nonnulllist . size ( ) ; + + i ) <nl> { <nl> diff - - git a / patches / minecraft / net / minecraft / item / crafting / RecipesBanners . java . patch b / patches / minecraft / net / minecraft / item / crafting / RecipesBanners . java . patch <nl> index 211a1bf . . f1c344e 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / RecipesBanners . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / RecipesBanners . java . patch <nl> @ @ - 19 , 7 + 19 , 7 @ @ <nl> ItemStack itemstack2 = p _ 77572 _ 1 _ . func _ 70301 _ a ( j ) ; <nl> <nl> - if ( itemstack2 . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) <nl> - + int color = getColor ( itemstack2 ) ; <nl> + + int color = net . minecraftforge . oredict . DyeUtils . rawDyeDamageFromStack ( itemstack2 ) ; <nl> + if ( color ! = - 1 ) <nl> { <nl> - k = itemstack2 . func _ 77960 _ j ( ) ; <nl> @ @ - 45 , 7 + 45 , 7 @ @ <nl> if ( ! itemstack . func _ 190926 _ b ( ) & & itemstack . func _ 77973 _ b ( ) ! = Items . field _ 179564 _ cE ) <nl> { <nl> - if ( itemstack . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) <nl> - + if ( isDye ( itemstack ) ) <nl> + + if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack ) ) <nl> { <nl> if ( flag2 ) <nl> { <nl> @ @ - 54 , 11 + 54 , 11 @ @ <nl> if ( ! itemstack1 . func _ 190926 _ b ( ) & & itemstack1 . func _ 77973 _ b ( ) ! = Items . field _ 179564 _ cE ) <nl> { <nl> - if ( itemstack1 . func _ 77973 _ b ( ) ! = Items . field _ 151100 _ aR ) <nl> - + if ( ! isDye ( itemstack1 ) ) <nl> + + if ( ! net . minecraftforge . oredict . DyeUtils . isDye ( itemstack1 ) ) <nl> { <nl> flag = false ; <nl> break ; <nl> - @ @ - 237 , 14 + 232 , 45 @ @ <nl> + @ @ - 237 , 14 + 232 , 13 @ @ <nl> return true ; <nl> } <nl> <nl> @ @ - 67 , 38 + 67 , 6 @ @ <nl> { <nl> return p _ 194133 _ 1 _ > = 3 & & p _ 194133 _ 2 _ > = 3 ; <nl> } <nl> - + <nl> - + private static String [ ] colors = { " Black " , " Red " , " Green " , " Brown " , " Blue " , " Purple " , " Cyan " , " LightGray " , " Gray " , " Pink " , " Lime " , " Yellow " , " LightBlue " , " Magenta " , " Orange " , " White " } ; <nl> - + @ SuppressWarnings ( " unchecked " ) / / Why java . . . <nl> - + private static java . util . List < ItemStack > [ ] colored = new java . util . List [ colors . length ] ; <nl> - + private static java . util . List < ItemStack > dyes ; <nl> - + private static boolean hasInit = false ; <nl> - + private static void init ( ) <nl> - + { <nl> - + if ( hasInit ) return ; <nl> - + for ( int x = 0 ; x < colors . length ; x + + ) <nl> - + colored [ x ] = net . minecraftforge . oredict . OreDictionary . getOres ( " dye " + colors [ x ] ) ; <nl> - + dyes = net . minecraftforge . oredict . OreDictionary . getOres ( " dye " ) ; <nl> - + hasInit = true ; <nl> - + } <nl> - + private boolean isDye ( ItemStack stack ) <nl> - + { <nl> - + init ( ) ; <nl> - + for ( ItemStack ore : dyes ) <nl> - + if ( net . minecraftforge . oredict . OreDictionary . itemMatches ( ore , stack , false ) ) <nl> - + return true ; <nl> - + return false ; <nl> - + } <nl> - + private int getColor ( ItemStack stack ) <nl> - + { <nl> - + init ( ) ; <nl> - + if ( stack = = null ) return - 1 ; <nl> - + for ( int x = 0 ; x < colored . length ; x + + ) <nl> - + for ( ItemStack ore : colored [ x ] ) <nl> - + if ( net . minecraftforge . oredict . OreDictionary . itemMatches ( ore , stack , true ) ) <nl> - + return x ; <nl> - + return - 1 ; <nl> - + } <nl> } <nl> <nl> - public static class RecipeDuplicatePattern implements IRecipe <nl> @ @ - 106 , 7 + 74 , 7 @ @ <nl> { <nl> public boolean func _ 77569 _ a ( InventoryCrafting p _ 77569 _ 1 _ , World p _ 77569 _ 2 _ ) <nl> { <nl> - @ @ - 344 , 9 + 370 , 9 @ @ <nl> + @ @ - 344 , 9 + 338 , 9 @ @ <nl> <nl> if ( ! itemstack . func _ 190926 _ b ( ) ) <nl> { <nl> @ @ - 118 , 7 + 86 , 7 @ @ <nl> } <nl> else if ( itemstack . func _ 77942 _ o ( ) & & TileEntityBanner . func _ 175113 _ c ( itemstack ) > 0 ) <nl> { <nl> - @ @ - 365 , 7 + 391 , 6 @ @ <nl> + @ @ - 365 , 7 + 359 , 6 @ @ <nl> return true ; <nl> } <nl> <nl> diff - - git a / patches / minecraft / net / minecraft / item / crafting / ShulkerBoxRecipes . java . patch b / patches / minecraft / net / minecraft / item / crafting / ShulkerBoxRecipes . java . patch <nl> index 4ce265c . . 42ca11d 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / crafting / ShulkerBoxRecipes . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / crafting / ShulkerBoxRecipes . java . patch <nl> @ @ - 14 , 6 + 14 , 32 @ @ <nl> { <nl> public boolean func _ 77569 _ a ( InventoryCrafting p _ 77569 _ 1 _ , World p _ 77569 _ 2 _ ) <nl> { <nl> + @ @ - 32 , 7 + 30 , 7 @ @ <nl> + } <nl> + else <nl> + { <nl> + - if ( itemstack . func _ 77973 _ b ( ) ! = Items . field _ 151100 _ aR ) <nl> + + if ( ! net . minecraftforge . oredict . DyeUtils . isDye ( itemstack ) ) <nl> + { <nl> + return false ; <nl> + } <nl> + @ @ - 65 , 14 + 63 , 14 @ @ <nl> + { <nl> + itemstack = itemstack2 ; <nl> + } <nl> + - else if ( itemstack2 . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) <nl> + + else if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack2 ) ) <nl> + { <nl> + itemstack1 = itemstack2 ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + - ItemStack itemstack3 = BlockShulkerBox . func _ 190953 _ b ( EnumDyeColor . func _ 176766 _ a ( itemstack1 . func _ 77960 _ j ( ) ) ) ; <nl> + + ItemStack itemstack3 = BlockShulkerBox . func _ 190953 _ b ( net . minecraftforge . oredict . DyeUtils . colorFromStack ( itemstack1 ) . get ( ) ) ; <nl> + <nl> + if ( itemstack . func _ 77942 _ o ( ) ) <nl> + { <nl> @ @ - 109 , 7 + 107 , 6 @ @ <nl> return true ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / DyeUtils . java b / src / main / java / net / minecraftforge / oredict / DyeUtils . java <nl> new file mode 100644 <nl> index 0000000 . . efdd116 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / oredict / DyeUtils . java <nl> @ @ - 0 , 0 + 1 , 124 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . oredict ; <nl> + <nl> + import net . minecraft . item . EnumDyeColor ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import org . apache . commons . lang3 . ArrayUtils ; <nl> + <nl> + import java . util . Arrays ; <nl> + import java . util . Optional ; <nl> + import java . util . OptionalInt ; <nl> + <nl> + / * * <nl> + * Utility class for working with ore dictionary dyes . <nl> + * / <nl> + public class DyeUtils <nl> + { <nl> + private static final String [ ] dyeOredicts = new String [ ] <nl> + { <nl> + " dyeWhite " , <nl> + " dyeOrange " , <nl> + " dyeMagenta " , <nl> + " dyeLightBlue " , <nl> + " dyeYellow " , <nl> + " dyeLime " , <nl> + " dyePink " , <nl> + " dyeGray " , <nl> + " dyeLightGray " , <nl> + " dyeCyan " , <nl> + " dyePurple " , <nl> + " dyeBlue " , <nl> + " dyeBrown " , <nl> + " dyeGreen " , <nl> + " dyeRed " , <nl> + " dyeBlack " <nl> + } ; <nl> + <nl> + / * * <nl> + * Check if an item stack is a dye . <nl> + * @ param stack the item stack <nl> + * @ return whether the stack is a dye <nl> + * / <nl> + public static boolean isDye ( ItemStack stack ) <nl> + { <nl> + return metaFromStack ( stack ) . isPresent ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the dye metadata from the stack , which can be passed into { @ link EnumDyeColor # byMetadata ( int ) } . <nl> + * @ param stack the item stack <nl> + * @ return an { @ link OptionalInt } holding the dye metadata for a dye , or an empty { @ link OptionalInt } otherwise <nl> + * / <nl> + public static OptionalInt metaFromStack ( ItemStack stack ) <nl> + { <nl> + if ( stack . isEmpty ( ) ) return OptionalInt . empty ( ) ; <nl> + return Arrays . stream ( OreDictionary . getOreIDs ( stack ) ) <nl> + . mapToObj ( OreDictionary : : getOreName ) <nl> + . mapToInt ( name - > ArrayUtils . indexOf ( dyeOredicts , name ) ) <nl> + . filter ( id - > id > = 0 ) <nl> + . findFirst ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Similar to { @ link # metaFromStack ( ItemStack ) } , except that it returns the raw integer ( with a { @ code - 1 } sentinel ) ; <nl> + * this follows vanilla conventions . <nl> + * @ param stack the item stack <nl> + * @ return the dye metadata for a dye , or { @ code - 1 } otherwise <nl> + * / <nl> + public static int rawMetaFromStack ( ItemStack stack ) <nl> + { <nl> + return metaFromStack ( stack ) . orElse ( - 1 ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the dye damage from the stack , which can be passed into { @ link EnumDyeColor # byDyeDamage ( int ) } . <nl> + * @ param stack the item stack <nl> + * @ return an { @ link OptionalInt } holding the dye damage for a dye , or an empty { @ link OptionalInt } otherwise <nl> + * / <nl> + public static OptionalInt dyeDamageFromStack ( ItemStack stack ) <nl> + { <nl> + final OptionalInt meta = metaFromStack ( stack ) ; <nl> + return meta . isPresent ( ) ? OptionalInt . of ( 0xF - meta . getAsInt ( ) ) : OptionalInt . empty ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Similar to { @ link # dyeDamageFromStack ( ItemStack ) } , except that it returns the raw integer ( with a { @ code - 1 } sentinel ) ; <nl> + * this follows vanilla conventions . <nl> + * @ param stack the item stack <nl> + * @ return the dye damage for a dye , or { @ code - 1 } otherwise <nl> + * / <nl> + public static int rawDyeDamageFromStack ( ItemStack stack ) <nl> + { <nl> + return dyeDamageFromStack ( stack ) . orElse ( - 1 ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Get a dye ' s color . <nl> + * @ param stack the item stack <nl> + * @ return an { @ link Optional } holding the dye color if present , or an empty { @ link Optional } otherwise <nl> + * / <nl> + public static Optional < EnumDyeColor > colorFromStack ( ItemStack stack ) <nl> + { <nl> + final OptionalInt meta = metaFromStack ( stack ) ; <nl> + return meta . isPresent ( ) ? Optional . of ( EnumDyeColor . byMetadata ( meta . getAsInt ( ) ) ) : Optional . empty ( ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / inventory / ContainerBrewingStand . java . patch b / patches / minecraft / net / minecraft / inventory / ContainerBrewingStand . java . patch <nl> index 63936ee . . e281d7c 100644 <nl> - - - a / patches / minecraft / net / minecraft / inventory / ContainerBrewingStand . java . patch <nl> + + + b / patches / minecraft / net / minecraft / inventory / ContainerBrewingStand . java . patch <nl> @ @ - 1 , 5 + 1 , 14 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / inventory / ContainerBrewingStand . java <nl> + + + . . / src - work / minecraft / net / minecraft / inventory / ContainerBrewingStand . java <nl> + @ @ - 158 , 7 + 158 , 7 @ @ <nl> + <nl> + public boolean func _ 75214 _ a ( ItemStack p _ 75214 _ 1 _ ) <nl> + { <nl> + - return p _ 75214 _ 1 _ ! = null ? p _ 75214 _ 1 _ . func _ 77973 _ b ( ) . func _ 150892 _ m ( p _ 75214 _ 1 _ ) : false ; <nl> + + return net . minecraftforge . common . brewing . BrewingRecipeRegistry . isValidIngredient ( p _ 75214 _ 1 _ ) ; <nl> + } <nl> + <nl> + public int func _ 75219 _ a ( ) <nl> @ @ - 190 , 7 + 190 , 7 @ @ <nl> <nl> public void func _ 82870 _ a ( EntityPlayer p _ 82870 _ 1 _ , ItemStack p _ 82870 _ 2 _ ) <nl> @ @ - 14 , 7 + 23 , 7 @ @ <nl> public static boolean func _ 75243 _ a _ ( ItemStack p _ 75243 _ 0 _ ) <nl> { <nl> - return p _ 75243 _ 0 _ ! = null & & ( p _ 75243 _ 0 _ . func _ 77973 _ b ( ) = = Items . field _ 151068 _ bn | | p _ 75243 _ 0 _ . func _ 77973 _ b ( ) = = Items . field _ 151069 _ bo ) ; <nl> - + return p _ 75243 _ 0 _ ! = null & & ( p _ 75243 _ 0 _ . func _ 77973 _ b ( ) instanceof net . minecraft . item . ItemPotion | | p _ 75243 _ 0 _ . func _ 77973 _ b ( ) = = Items . field _ 151069 _ bo ) ; <nl> + + return net . minecraftforge . common . brewing . BrewingRecipeRegistry . isValidInput ( p _ 75243 _ 0 _ ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java . patch b / patches / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java . patch <nl> index df91475 . . 91343f1 100644 <nl> - - - a / patches / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java . patch <nl> + + + b / patches / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java . patch <nl> @ @ - 1 , 5 + 1 , 14 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java <nl> + + + . . / src - work / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java <nl> + @ @ - 104 , 7 + 104 , 7 @ @ <nl> + <nl> + private boolean func _ 145934 _ k ( ) <nl> + { <nl> + - if ( this . field _ 145945 _ j [ 3 ] ! = null & & this . field _ 145945 _ j [ 3 ] . field _ 77994 _ a > 0 ) <nl> + + if ( this . field _ 145945 _ j [ 3 ] ! = null & & this . field _ 145945 _ j [ 3 ] . field _ 77994 _ a > 0 & & false ) / / Code moved to net . minecraftforge . common . brewing . VanillaBrewingRecipe <nl> + { <nl> + ItemStack itemstack = this . field _ 145945 _ j [ 3 ] ; <nl> + <nl> @ @ - 118 , 7 + 118 , 7 @ @ <nl> <nl> for ( int i = 0 ; i < 3 ; + + i ) <nl> @ @ - 9 , 15 + 18 , 24 @ @ <nl> { <nl> int j = this . field _ 145945 _ j [ i ] . func _ 77960 _ j ( ) ; <nl> int k = this . func _ 145936 _ c ( j , itemstack ) ; <nl> - @ @ - 151 , 13 + 151 , 14 @ @ <nl> + @ @ - 145 , 19 + 145 , 22 @ @ <nl> + } <nl> + else <nl> + { <nl> + - return false ; <nl> + + return net . minecraftforge . common . brewing . BrewingRecipeRegistry . canBrew ( field _ 145945 _ j , field _ 145945 _ j [ 3 ] , field _ 145947 _ i ) ; <nl> + } <nl> + } <nl> <nl> private void func _ 145940 _ l ( ) <nl> { <nl> + if ( net . minecraftforge . event . ForgeEventFactory . onPotionAttemptBreaw ( field _ 145945 _ j ) ) return ; <nl> if ( this . func _ 145934 _ k ( ) ) <nl> { <nl> + + net . minecraftforge . common . brewing . BrewingRecipeRegistry . brewPotions ( field _ 145945 _ j , field _ 145945 _ j [ 3 ] , field _ 145947 _ i ) ; <nl> ItemStack itemstack = this . field _ 145945 _ j [ 3 ] ; <nl> <nl> + + if ( false ) { / / Code moved to net . minecraftforge . common . brewing . VanillaBrewingRecipe <nl> for ( int i = 0 ; i < 3 ; + + i ) <nl> { <nl> - if ( this . field _ 145945 _ j [ i ] ! = null & & this . field _ 145945 _ j [ i ] . func _ 77973 _ b ( ) = = Items . field _ 151068 _ bn ) <nl> @ @ - 25 , 9 + 43 , 11 @ @ <nl> { <nl> int j = this . field _ 145945 _ j [ i ] . func _ 77960 _ j ( ) ; <nl> int k = this . func _ 145936 _ c ( j , itemstack ) ; <nl> - @ @ - 178 , 9 + 179 , 9 @ @ <nl> + @ @ - 177 , 10 + 180 , 11 @ @ <nl> + } <nl> } <nl> } <nl> + + } <nl> <nl> - if ( itemstack . func _ 77973 _ b ( ) . func _ 77634 _ r ( ) ) <nl> + if ( itemstack . func _ 77973 _ b ( ) . hasContainerItem ( itemstack ) ) <nl> @ @ - 37 , 7 + 57 , 7 @ @ <nl> } <nl> else <nl> { <nl> - @ @ - 191 , 6 + 192 , 7 @ @ <nl> + @ @ - 191 , 6 + 195 , 7 @ @ <nl> this . field _ 145945 _ j [ 3 ] = null ; <nl> } <nl> } <nl> @ @ - 45 , 12 + 65 , 14 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 306 , 7 + 308 , 7 @ @ <nl> + @ @ - 306 , 7 + 311 , 9 @ @ <nl> <nl> public boolean func _ 94041 _ b ( int p _ 94041 _ 1 _ , ItemStack p _ 94041 _ 2 _ ) <nl> { <nl> - return p _ 94041 _ 1 _ = = 3 ? p _ 94041 _ 2 _ . func _ 77973 _ b ( ) . func _ 150892 _ m ( p _ 94041 _ 2 _ ) : p _ 94041 _ 2 _ . func _ 77973 _ b ( ) = = Items . field _ 151068 _ bn | | p _ 94041 _ 2 _ . func _ 77973 _ b ( ) = = Items . field _ 151069 _ bo ; <nl> - + return p _ 94041 _ 1 _ = = 3 ? p _ 94041 _ 2 _ . func _ 77973 _ b ( ) . func _ 150892 _ m ( p _ 94041 _ 2 _ ) : p _ 94041 _ 2 _ . func _ 77973 _ b ( ) instanceof ItemPotion | | p _ 94041 _ 2 _ . func _ 77973 _ b ( ) = = Items . field _ 151069 _ bo ; <nl> + + if ( p _ 94041 _ 1 _ = = 3 & & net . minecraftforge . common . brewing . BrewingRecipeRegistry . isValidIngredient ( p _ 94041 _ 2 _ ) ) return true ; <nl> + + else if ( p _ 94041 _ 1 _ ! = 3 & & net . minecraftforge . common . brewing . BrewingRecipeRegistry . isValidInput ( p _ 94041 _ 2 _ ) ) return true ; <nl> + + return false ; <nl> } <nl> <nl> public boolean [ ] func _ 174902 _ m ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / brewing / AbstractBrewingRecipe . java b / src / main / java / net / minecraftforge / common / brewing / AbstractBrewingRecipe . java <nl> new file mode 100644 <nl> index 0000000 . . ceb3dd1 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / brewing / AbstractBrewingRecipe . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package net . minecraftforge . common . brewing ; <nl> + <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . oredict . OreDictionary ; <nl> + <nl> + public abstract class AbstractBrewingRecipe < T > implements IBrewingRecipe { <nl> + <nl> + public final ItemStack input ; <nl> + public final T ingredient ; <nl> + public final ItemStack output ; <nl> + <nl> + protected AbstractBrewingRecipe ( ItemStack input , T ingredient , ItemStack output ) <nl> + { <nl> + this . input = input ; <nl> + this . ingredient = ingredient ; <nl> + this . output = output ; <nl> + <nl> + if ( this . input = = null | | this . ingredient = = null | | this . output = = null ) <nl> + { <nl> + throw new IllegalArgumentException ( " A brewing recipe cannot have a null parameter . " ) ; <nl> + } <nl> + <nl> + if ( this . input . getMaxStackSize ( ) ! = 1 ) <nl> + { <nl> + throw new IllegalArgumentException ( " Inputs must have a max size of 1 just like water bottles . Brewing Stands override the input with the output when the brewing is done , items that stack would end up getting lost . " ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isInput ( ItemStack stack ) <nl> + { <nl> + return OreDictionary . itemMatches ( this . input , stack , false ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack getOutput ( ItemStack input , ItemStack ingredient ) <nl> + { <nl> + return isInput ( input ) & & isIngredient ( ingredient ) ? ItemStack . copyItemStack ( output ) : null ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / common / brewing / BrewingOreRecipe . java b / src / main / java / net / minecraftforge / common / brewing / BrewingOreRecipe . java <nl> new file mode 100644 <nl> index 0000000 . . 8ac625c <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / brewing / BrewingOreRecipe . java <nl> @ @ - 0 , 0 + 1 , 32 @ @ <nl> + package net . minecraftforge . common . brewing ; <nl> + <nl> + import java . util . List ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . oredict . OreDictionary ; <nl> + <nl> + public class BrewingOreRecipe extends AbstractBrewingRecipe < List < ItemStack > > { <nl> + <nl> + public BrewingOreRecipe ( ItemStack input , String ingredient , ItemStack output ) <nl> + { <nl> + super ( input , OreDictionary . getOres ( ingredient ) , output ) ; <nl> + } <nl> + <nl> + public BrewingOreRecipe ( ItemStack input , List < ItemStack > ingredient , ItemStack output ) <nl> + { <nl> + super ( input , ingredient , output ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isIngredient ( ItemStack stack ) <nl> + { <nl> + for ( ItemStack target : this . ingredient ) <nl> + { <nl> + if ( OreDictionary . itemMatches ( target , stack , false ) ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + } <nl> + return false ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / common / brewing / BrewingRecipe . java b / src / main / java / net / minecraftforge / common / brewing / BrewingRecipe . java <nl> new file mode 100644 <nl> index 0000000 . . e2b6ce9 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / brewing / BrewingRecipe . java <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + package net . minecraftforge . common . brewing ; <nl> + <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . oredict . OreDictionary ; <nl> + <nl> + public class BrewingRecipe extends AbstractBrewingRecipe < ItemStack > { <nl> + <nl> + public BrewingRecipe ( ItemStack input , ItemStack ingredient , ItemStack output ) <nl> + { <nl> + super ( input , ingredient , output ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isIngredient ( ItemStack stack ) <nl> + { <nl> + return OreDictionary . itemMatches ( this . ingredient , stack , false ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / common / brewing / BrewingRecipeRegistry . java b / src / main / java / net / minecraftforge / common / brewing / BrewingRecipeRegistry . java <nl> new file mode 100644 <nl> index 0000000 . . 07ea61c <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / brewing / BrewingRecipeRegistry . java <nl> @ @ - 0 , 0 + 1 , 171 @ @ <nl> + package net . minecraftforge . common . brewing ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + import net . minecraft . item . ItemStack ; <nl> + <nl> + public class BrewingRecipeRegistry { <nl> + <nl> + private static List < IBrewingRecipe > recipes = new ArrayList < IBrewingRecipe > ( ) ; <nl> + <nl> + static <nl> + { <nl> + addRecipe ( new VanillaBrewingRecipe ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds a recipe to the registry . Due to the nature of the brewing stand <nl> + * inputs that stack ( a . k . a max stack size > 1 ) are not allowed . <nl> + * <nl> + * @ param input <nl> + * The ItemStack that goes in same slots as the water bottles <nl> + * would . <nl> + * @ param ingredient <nl> + * The ItemStack that goes in the same slot as nether wart would . <nl> + * @ param output <nl> + * The ItemStack that will replace the input once the brewing is <nl> + * done . <nl> + * @ return true if the recipe was added . <nl> + * / <nl> + public static boolean addRecipe ( ItemStack input , ItemStack ingredient , ItemStack output ) <nl> + { <nl> + return addRecipe ( new BrewingRecipe ( input , ingredient , output ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds a recipe to the registry . Due to the nature of the brewing stand <nl> + * inputs that stack ( a . k . a max stack size > 1 ) are not allowed . <nl> + * <nl> + * @ param input <nl> + * The ItemStack that goes in same slots as the water bottles <nl> + * would . <nl> + * @ param ingredient <nl> + * The ItemStack that goes in the same slot as nether wart would . <nl> + * @ param output <nl> + * The ItemStack that will replace the input once the brewing is <nl> + * done . <nl> + * @ return true if the recipe was added . <nl> + * / <nl> + public static boolean addRecipe ( ItemStack input , String ingredient , ItemStack output ) <nl> + { <nl> + return addRecipe ( new BrewingOreRecipe ( input , ingredient , output ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Adds a recipe to the registry . Due to the nature of the brewing stand <nl> + * inputs that stack ( a . k . a max stack size > 1 ) are not allowed . <nl> + * / <nl> + public static boolean addRecipe ( IBrewingRecipe recipe ) <nl> + { <nl> + return recipes . add ( recipe ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the output ItemStack obtained by brewing the passed input and <nl> + * ingredient . Null if no matches are found . <nl> + * / <nl> + public static ItemStack getOutput ( ItemStack input , ItemStack ingredient ) <nl> + { <nl> + if ( input = = null | | input . getMaxStackSize ( ) ! = 1 | | input . stackSize ! = 1 ) return null ; <nl> + if ( ingredient = = null | | ingredient . stackSize < = 0 ) return null ; <nl> + <nl> + for ( IBrewingRecipe recipe : recipes ) <nl> + { <nl> + ItemStack output = recipe . getOutput ( input , ingredient ) ; <nl> + if ( output ! = null ) <nl> + { <nl> + return output ; <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns true if the passed input and ingredient have an output <nl> + * / <nl> + public static boolean hasOuput ( ItemStack input , ItemStack ingredient ) <nl> + { <nl> + return getOutput ( input , ingredient ) ! = null ; <nl> + } <nl> + <nl> + / * * <nl> + * Used by the brewing stand to determine if its contents can be brewed . <nl> + * Extra parameters exist to allow modders to create bigger brewing stands <nl> + * without much hassle <nl> + * / <nl> + public static boolean canBrew ( ItemStack [ ] inputs , ItemStack ingredient , int [ ] inputIndexes ) <nl> + { <nl> + if ( ingredient = = null | | ingredient . stackSize < = 0 ) return false ; <nl> + <nl> + for ( int i : inputIndexes ) <nl> + { <nl> + if ( hasOuput ( inputs [ i ] , ingredient ) ) <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> + return false ; <nl> + } <nl> + <nl> + / * * <nl> + * Used by the brewing stand to brew its inventory Extra parameters exist to <nl> + * allow modders to create bigger brewing stands without much hassle <nl> + * / <nl> + public static void brewPotions ( ItemStack [ ] inputs , ItemStack ingredient , int [ ] inputIndexes ) <nl> + { <nl> + for ( int i : inputIndexes ) <nl> + { <nl> + ItemStack output = getOutput ( inputs [ i ] , ingredient ) ; <nl> + if ( output ! = null ) <nl> + { <nl> + inputs [ i ] = output ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Returns true if the passed ItemStack is a valid ingredient for any of the <nl> + * recipes in the registry . <nl> + * / <nl> + public static boolean isValidIngredient ( ItemStack stack ) <nl> + { <nl> + if ( stack = = null | | stack . stackSize < = 0 ) return false ; <nl> + <nl> + for ( IBrewingRecipe recipe : recipes ) <nl> + { <nl> + if ( recipe . isIngredient ( stack ) ) <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns true if the passed ItemStack is a valid input for any of the <nl> + * recipes in the registry . <nl> + * / <nl> + public static boolean isValidInput ( ItemStack stack ) <nl> + { <nl> + if ( stack = = null | | stack . getMaxStackSize ( ) ! = 1 | | stack . stackSize ! = 1 ) return false ; <nl> + <nl> + for ( IBrewingRecipe recipe : recipes ) <nl> + { <nl> + if ( recipe . isInput ( stack ) ) <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns an unmodifiable list containing all the recipes in the registry <nl> + * / <nl> + public static List < IBrewingRecipe > getRecipes ( ) <nl> + { <nl> + return Collections . unmodifiableList ( recipes ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / common / brewing / IBrewingRecipe . java b / src / main / java / net / minecraftforge / common / brewing / IBrewingRecipe . java <nl> new file mode 100644 <nl> index 0000000 . . c31ad92 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / brewing / IBrewingRecipe . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + package net . minecraftforge . common . brewing ; <nl> + <nl> + import net . minecraft . item . ItemStack ; <nl> + <nl> + public interface IBrewingRecipe { <nl> + <nl> + / * * <nl> + * Returns true is the passed ItemStack is an input for this recipe . " Input " <nl> + * being the item that goes in one of the three bottom slots of the brewing <nl> + * stand ( e . g : water bottle ) <nl> + * / <nl> + public boolean isInput ( ItemStack input ) ; <nl> + <nl> + / * * <nl> + * Returns true if the passed ItemStack is an ingredient for this recipe . <nl> + * " Ingredient " being the item that goes in the top slot of the brewing <nl> + * stand ( e . g : nether wart ) <nl> + * / <nl> + public boolean isIngredient ( ItemStack ingredient ) ; <nl> + <nl> + / * * <nl> + * Returns the output when the passed input is brewed with the passed <nl> + * ingredient . Null if invalid input or ingredient . <nl> + * / <nl> + public ItemStack getOutput ( ItemStack input , ItemStack ingredient ) ; <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / common / brewing / VanillaBrewingRecipe . java b / src / main / java / net / minecraftforge / common / brewing / VanillaBrewingRecipe . java <nl> new file mode 100644 <nl> index 0000000 . . cf94bc1 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / brewing / VanillaBrewingRecipe . java <nl> @ @ - 0 , 0 + 1 , 75 @ @ <nl> + package net . minecraftforge . common . brewing ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . init . Items ; <nl> + import net . minecraft . item . ItemPotion ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . potion . PotionHelper ; <nl> + <nl> + / * * <nl> + * Used in BrewingRecipeRegistry to maintain the vanilla behaviour . <nl> + * <nl> + * Most of the code was simply adapted from net . minecraft . tileentity . TileEntityBrewingStand <nl> + * / <nl> + public class VanillaBrewingRecipe implements IBrewingRecipe { <nl> + <nl> + / * * <nl> + * Code adapted from TileEntityBrewingStand . isItemValidForSlot ( int index , ItemStack stack ) <nl> + * / <nl> + @ Override <nl> + public boolean isInput ( ItemStack stack ) <nl> + { <nl> + return stack . getItem ( ) instanceof ItemPotion | | stack . getItem ( ) = = Items . glass _ bottle ; <nl> + } <nl> + <nl> + / * * <nl> + * Code adapted from TileEntityBrewingStand . isItemValidForSlot ( int index , ItemStack stack ) <nl> + * / <nl> + @ Override <nl> + public boolean isIngredient ( ItemStack stack ) <nl> + { <nl> + return stack . getItem ( ) . isPotionIngredient ( stack ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Code copied from TileEntityBrewingStand . brewPotions ( ) <nl> + * It brews the potion by doing the bit - shifting magic and then checking if the new PotionEffect list is different to the old one , <nl> + * or if the new potion is a splash potion when the old one wasn ' t . <nl> + * / <nl> + @ Override <nl> + public ItemStack getOutput ( ItemStack input , ItemStack ingredient ) <nl> + { <nl> + if ( ingredient ! = null & & input ! = null & & input . getItem ( ) instanceof ItemPotion ) <nl> + { <nl> + int inputMeta = input . getMetadata ( ) ; <nl> + int outputMeta = PotionHelper . applyIngredient ( inputMeta , ingredient . getItem ( ) . getPotionEffect ( ingredient ) ) ; <nl> + if ( inputMeta = = outputMeta ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + List oldEffects = Items . potionitem . getEffects ( inputMeta ) ; <nl> + List newEffects = Items . potionitem . getEffects ( outputMeta ) ; <nl> + <nl> + boolean hasResult = false ; <nl> + if ( ( inputMeta < = 0 | | oldEffects ! = newEffects ) & & ( oldEffects = = null | | ! oldEffects . equals ( newEffects ) & & newEffects ! = null ) ) <nl> + { <nl> + hasResult = true ; <nl> + } <nl> + else if ( ! ItemPotion . isSplash ( inputMeta ) & & ItemPotion . isSplash ( outputMeta ) ) <nl> + { <nl> + hasResult = true ; <nl> + } <nl> + <nl> + if ( hasResult ) <nl> + { <nl> + ItemStack output = input . copy ( ) ; <nl> + output . setItemDamage ( outputMeta ) ; <nl> + return output ; <nl> + } <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / java / net / minecraftforge / test / BrewingRecipeRegistryTest . java b / src / test / java / net / minecraftforge / test / BrewingRecipeRegistryTest . java <nl> new file mode 100644 <nl> index 0000000 . . 2d825de <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / BrewingRecipeRegistryTest . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import net . minecraft . init . Items ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . common . brewing . BrewingRecipeRegistry ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + <nl> + @ Mod ( modid = " BrewingRecipeRegistryTest " , name = " BrewingRecipeRegistryTest " , version = " 0 . 0 . 0 " ) <nl> + public class BrewingRecipeRegistryTest <nl> + { <nl> + <nl> + public static final boolean ENABLE = false ; <nl> + <nl> + @ EventHandler <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + if ( ! ENABLE ) return ; <nl> + <nl> + / / The following adds a recipe that brews a piece of rotten flesh " into " a diamond sword resulting in a diamond hoe <nl> + BrewingRecipeRegistry . addRecipe ( new ItemStack ( Items . diamond _ sword ) , new ItemStack ( Items . rotten _ flesh ) , new ItemStack ( Items . diamond _ hoe ) ) ; <nl> + <nl> + ItemStack output0 = BrewingRecipeRegistry . getOutput ( new ItemStack ( Items . diamond _ sword ) , new ItemStack ( Items . rotten _ flesh ) ) ; <nl> + if ( output0 . getItem ( ) = = Items . diamond _ hoe ) <nl> + System . out . println ( " Recipe succefully registered and working . Diamond Hoe obtained . " ) ; <nl> + <nl> + / / Testing if OreDictionary support is working . Register a recipe that brews a gemDiamond into a gold sword resulting in a diamond sword <nl> + BrewingRecipeRegistry . addRecipe ( new ItemStack ( Items . golden _ sword ) , " gemDiamond " , new ItemStack ( Items . diamond _ sword ) ) ; <nl> + <nl> + ItemStack output1 = BrewingRecipeRegistry . getOutput ( new ItemStack ( Items . golden _ sword ) , new ItemStack ( Items . diamond ) ) ; <nl> + if ( output1 . getItem ( ) = = Items . diamond _ sword ) <nl> + System . out . println ( " Recipe succefully registered and working . Diamond Sword obtained . " ) ; <nl> + <nl> + / / In vanilla , brewing netherwart into a water bottle results in an awkward potion ( with metadata 16 ) . The following tests if that still happens <nl> + ItemStack output2 = BrewingRecipeRegistry . getOutput ( new ItemStack ( Items . potionitem , 1 , 0 ) , new ItemStack ( Items . nether _ wart ) ) ; <nl> + if ( output2 ! = null & & output2 . getItem ( ) = = Items . potionitem & & output2 . getItemDamage ( ) = = 16 ) <nl> + System . out . println ( " Vanilla behaviour still in place . Brewed Water Bottle with Nether Wart and got Awkward Potion " ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / crafting / RecipeFireworks . java . patch b / patches / minecraft / net / minecraft / item / crafting / RecipeFireworks . java . patch 
 index b48e353 . . 7fedeb0 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / RecipeFireworks . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / RecipeFireworks . java . patch 
 @ @ - 12 , 6 + 12 , 39 @ @ 
 { 
 private ItemStack field _ 92102 _ a = ItemStack . field _ 190927 _ a ; 
 
 + @ @ - 41 , 7 + 39 , 7 @ @ 
 + { 
 + + + l ; 
 + } 
 + - else if ( itemstack . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) 
 + + else if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack ) ) 
 + { 
 + + + k ; 
 + } 
 + @ @ - 127 , 9 + 125 , 9 @ @ 
 + 
 + if ( ! itemstack2 . func _ 190926 _ b ( ) ) 
 + { 
 + - if ( itemstack2 . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) 
 + + if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack2 ) ) 
 + { 
 + - list . add ( Integer . valueOf ( ItemDye . field _ 150922 _ c [ itemstack2 . func _ 77960 _ j ( ) & 15 ] ) ) ; 
 + + list . add ( Integer . valueOf ( ItemDye . field _ 150922 _ c [ net . minecraftforge . oredict . DyeUtils . rawDyeDamageFromStack ( itemstack2 ) & 15 ] ) ) ; 
 + } 
 + else if ( itemstack2 . func _ 77973 _ b ( ) = = Items . field _ 151114 _ aO ) 
 + { 
 + @ @ - 181 , 9 + 179 , 9 @ @ 
 + 
 + if ( ! itemstack1 . func _ 190926 _ b ( ) ) 
 + { 
 + - if ( itemstack1 . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) 
 + + if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack1 ) ) 
 + { 
 + - list1 . add ( Integer . valueOf ( ItemDye . field _ 150922 _ c [ itemstack1 . func _ 77960 _ j ( ) & 15 ] ) ) ; 
 + + list1 . add ( Integer . valueOf ( ItemDye . field _ 150922 _ c [ net . minecraftforge . oredict . DyeUtils . rawDyeDamageFromStack ( itemstack1 ) & 15 ] ) ) ; 
 + } 
 + else if ( itemstack1 . func _ 77973 _ b ( ) = = Items . field _ 151154 _ bQ ) 
 + { 
 @ @ - 248 , 10 + 246 , 7 @ @ 
 { 
 ItemStack itemstack = p _ 179532 _ 1 _ . func _ 70301 _ a ( i ) ; 
 diff - - git a / patches / minecraft / net / minecraft / item / crafting / RecipesArmorDyes . java . patch b / patches / minecraft / net / minecraft / item / crafting / RecipesArmorDyes . java . patch 
 index 764e30c . . 8e8559f 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / RecipesArmorDyes . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / RecipesArmorDyes . java . patch 
 @ @ - 12 , 6 + 12 , 30 @ @ 
 { 
 public boolean func _ 77569 _ a ( InventoryCrafting p _ 77569 _ 1 _ , World p _ 77569 _ 2 _ ) 
 { 
 + @ @ - 38 , 7 + 36 , 7 @ @ 
 + } 
 + else 
 + { 
 + - if ( itemstack1 . func _ 77973 _ b ( ) ! = Items . field _ 151100 _ aR ) 
 + + if ( ! net . minecraftforge . oredict . DyeUtils . isDye ( itemstack1 ) ) 
 + { 
 + return false ; 
 + } 
 + @ @ - 92 , 12 + 90 , 12 @ @ 
 + } 
 + else 
 + { 
 + - if ( itemstack1 . func _ 77973 _ b ( ) ! = Items . field _ 151100 _ aR ) 
 + + if ( ! net . minecraftforge . oredict . DyeUtils . isDye ( itemstack1 ) ) 
 + { 
 + return ItemStack . field _ 190927 _ a ; 
 + } 
 + 
 + - float [ ] afloat = EnumDyeColor . func _ 176766 _ a ( itemstack1 . func _ 77960 _ j ( ) ) . func _ 193349 _ f ( ) ; 
 + + float [ ] afloat = net . minecraftforge . oredict . DyeUtils . colorFromStack ( itemstack1 ) . get ( ) . func _ 193349 _ f ( ) ; 
 + int l1 = ( int ) ( afloat [ 0 ] * 255 . 0F ) ; 
 + int i2 = ( int ) ( afloat [ 1 ] * 255 . 0F ) ; 
 + int j2 = ( int ) ( afloat [ 2 ] * 255 . 0F ) ; 
 @ @ - 143 , 11 + 141 , 7 @ @ 
 for ( int i = 0 ; i < nonnulllist . size ( ) ; + + i ) 
 { 
 diff - - git a / patches / minecraft / net / minecraft / item / crafting / RecipesBanners . java . patch b / patches / minecraft / net / minecraft / item / crafting / RecipesBanners . java . patch 
 index 211a1bf . . f1c344e 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / RecipesBanners . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / RecipesBanners . java . patch 
 @ @ - 19 , 7 + 19 , 7 @ @ 
 ItemStack itemstack2 = p _ 77572 _ 1 _ . func _ 70301 _ a ( j ) ; 
 
 - if ( itemstack2 . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) 
 - + int color = getColor ( itemstack2 ) ; 
 + + int color = net . minecraftforge . oredict . DyeUtils . rawDyeDamageFromStack ( itemstack2 ) ; 
 + if ( color ! = - 1 ) 
 { 
 - k = itemstack2 . func _ 77960 _ j ( ) ; 
 @ @ - 45 , 7 + 45 , 7 @ @ 
 if ( ! itemstack . func _ 190926 _ b ( ) & & itemstack . func _ 77973 _ b ( ) ! = Items . field _ 179564 _ cE ) 
 { 
 - if ( itemstack . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) 
 - + if ( isDye ( itemstack ) ) 
 + + if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack ) ) 
 { 
 if ( flag2 ) 
 { 
 @ @ - 54 , 11 + 54 , 11 @ @ 
 if ( ! itemstack1 . func _ 190926 _ b ( ) & & itemstack1 . func _ 77973 _ b ( ) ! = Items . field _ 179564 _ cE ) 
 { 
 - if ( itemstack1 . func _ 77973 _ b ( ) ! = Items . field _ 151100 _ aR ) 
 - + if ( ! isDye ( itemstack1 ) ) 
 + + if ( ! net . minecraftforge . oredict . DyeUtils . isDye ( itemstack1 ) ) 
 { 
 flag = false ; 
 break ; 
 - @ @ - 237 , 14 + 232 , 45 @ @ 
 + @ @ - 237 , 14 + 232 , 13 @ @ 
 return true ; 
 } 
 
 @ @ - 67 , 38 + 67 , 6 @ @ 
 { 
 return p _ 194133 _ 1 _ > = 3 & & p _ 194133 _ 2 _ > = 3 ; 
 } 
 - + 
 - + private static String [ ] colors = { " Black " , " Red " , " Green " , " Brown " , " Blue " , " Purple " , " Cyan " , " LightGray " , " Gray " , " Pink " , " Lime " , " Yellow " , " LightBlue " , " Magenta " , " Orange " , " White " } ; 
 - + @ SuppressWarnings ( " unchecked " ) / / Why java . . . 
 - + private static java . util . List < ItemStack > [ ] colored = new java . util . List [ colors . length ] ; 
 - + private static java . util . List < ItemStack > dyes ; 
 - + private static boolean hasInit = false ; 
 - + private static void init ( ) 
 - + { 
 - + if ( hasInit ) return ; 
 - + for ( int x = 0 ; x < colors . length ; x + + ) 
 - + colored [ x ] = net . minecraftforge . oredict . OreDictionary . getOres ( " dye " + colors [ x ] ) ; 
 - + dyes = net . minecraftforge . oredict . OreDictionary . getOres ( " dye " ) ; 
 - + hasInit = true ; 
 - + } 
 - + private boolean isDye ( ItemStack stack ) 
 - + { 
 - + init ( ) ; 
 - + for ( ItemStack ore : dyes ) 
 - + if ( net . minecraftforge . oredict . OreDictionary . itemMatches ( ore , stack , false ) ) 
 - + return true ; 
 - + return false ; 
 - + } 
 - + private int getColor ( ItemStack stack ) 
 - + { 
 - + init ( ) ; 
 - + if ( stack = = null ) return - 1 ; 
 - + for ( int x = 0 ; x < colored . length ; x + + ) 
 - + for ( ItemStack ore : colored [ x ] ) 
 - + if ( net . minecraftforge . oredict . OreDictionary . itemMatches ( ore , stack , true ) ) 
 - + return x ; 
 - + return - 1 ; 
 - + } 
 } 
 
 - public static class RecipeDuplicatePattern implements IRecipe 
 @ @ - 106 , 7 + 74 , 7 @ @ 
 { 
 public boolean func _ 77569 _ a ( InventoryCrafting p _ 77569 _ 1 _ , World p _ 77569 _ 2 _ ) 
 { 
 - @ @ - 344 , 9 + 370 , 9 @ @ 
 + @ @ - 344 , 9 + 338 , 9 @ @ 
 
 if ( ! itemstack . func _ 190926 _ b ( ) ) 
 { 
 @ @ - 118 , 7 + 86 , 7 @ @ 
 } 
 else if ( itemstack . func _ 77942 _ o ( ) & & TileEntityBanner . func _ 175113 _ c ( itemstack ) > 0 ) 
 { 
 - @ @ - 365 , 7 + 391 , 6 @ @ 
 + @ @ - 365 , 7 + 359 , 6 @ @ 
 return true ; 
 } 
 
 diff - - git a / patches / minecraft / net / minecraft / item / crafting / ShulkerBoxRecipes . java . patch b / patches / minecraft / net / minecraft / item / crafting / ShulkerBoxRecipes . java . patch 
 index 4ce265c . . 42ca11d 100644 
 - - - a / patches / minecraft / net / minecraft / item / crafting / ShulkerBoxRecipes . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / crafting / ShulkerBoxRecipes . java . patch 
 @ @ - 14 , 6 + 14 , 32 @ @ 
 { 
 public boolean func _ 77569 _ a ( InventoryCrafting p _ 77569 _ 1 _ , World p _ 77569 _ 2 _ ) 
 { 
 + @ @ - 32 , 7 + 30 , 7 @ @ 
 + } 
 + else 
 + { 
 + - if ( itemstack . func _ 77973 _ b ( ) ! = Items . field _ 151100 _ aR ) 
 + + if ( ! net . minecraftforge . oredict . DyeUtils . isDye ( itemstack ) ) 
 + { 
 + return false ; 
 + } 
 + @ @ - 65 , 14 + 63 , 14 @ @ 
 + { 
 + itemstack = itemstack2 ; 
 + } 
 + - else if ( itemstack2 . func _ 77973 _ b ( ) = = Items . field _ 151100 _ aR ) 
 + + else if ( net . minecraftforge . oredict . DyeUtils . isDye ( itemstack2 ) ) 
 + { 
 + itemstack1 = itemstack2 ; 
 + } 
 + } 
 + } 
 + 
 + - ItemStack itemstack3 = BlockShulkerBox . func _ 190953 _ b ( EnumDyeColor . func _ 176766 _ a ( itemstack1 . func _ 77960 _ j ( ) ) ) ; 
 + + ItemStack itemstack3 = BlockShulkerBox . func _ 190953 _ b ( net . minecraftforge . oredict . DyeUtils . colorFromStack ( itemstack1 ) . get ( ) ) ; 
 + 
 + if ( itemstack . func _ 77942 _ o ( ) ) 
 + { 
 @ @ - 109 , 7 + 107 , 6 @ @ 
 return true ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / oredict / DyeUtils . java b / src / main / java / net / minecraftforge / oredict / DyeUtils . java 
 new file mode 100644 
 index 0000000 . . efdd116 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / oredict / DyeUtils . java 
 @ @ - 0 , 0 + 1 , 124 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . oredict ; 
 + 
 + import net . minecraft . item . EnumDyeColor ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import org . apache . commons . lang3 . ArrayUtils ; 
 + 
 + import java . util . Arrays ; 
 + import java . util . Optional ; 
 + import java . util . OptionalInt ; 
 + 
 + / * * 
 + * Utility class for working with ore dictionary dyes . 
 + * / 
 + public class DyeUtils 
 + { 
 + private static final String [ ] dyeOredicts = new String [ ] 
 + { 
 + " dyeWhite " , 
 + " dyeOrange " , 
 + " dyeMagenta " , 
 + " dyeLightBlue " , 
 + " dyeYellow " , 
 + " dyeLime " , 
 + " dyePink " , 
 + " dyeGray " , 
 + " dyeLightGray " , 
 + " dyeCyan " , 
 + " dyePurple " , 
 + " dyeBlue " , 
 + " dyeBrown " , 
 + " dyeGreen " , 
 + " dyeRed " , 
 + " dyeBlack " 
 + } ; 
 + 
 + / * * 
 + * Check if an item stack is a dye . 
 + * @ param stack the item stack 
 + * @ return whether the stack is a dye 
 + * / 
 + public static boolean isDye ( ItemStack stack ) 
 + { 
 + return metaFromStack ( stack ) . isPresent ( ) ; 
 + } 
 + 
 + / * * 
 + * Get the dye metadata from the stack , which can be passed into { @ link EnumDyeColor # byMetadata ( int ) } . 
 + * @ param stack the item stack 
 + * @ return an { @ link OptionalInt } holding the dye metadata for a dye , or an empty { @ link OptionalInt } otherwise 
 + * / 
 + public static OptionalInt metaFromStack ( ItemStack stack ) 
 + { 
 + if ( stack . isEmpty ( ) ) return OptionalInt . empty ( ) ; 
 + return Arrays . stream ( OreDictionary . getOreIDs ( stack ) ) 
 + . mapToObj ( OreDictionary : : getOreName ) 
 + . mapToInt ( name - > ArrayUtils . indexOf ( dyeOredicts , name ) ) 
 + . filter ( id - > id > = 0 ) 
 + . findFirst ( ) ; 
 + } 
 + 
 + / * * 
 + * Similar to { @ link # metaFromStack ( ItemStack ) } , except that it returns the raw integer ( with a { @ code - 1 } sentinel ) ; 
 + * this follows vanilla conventions . 
 + * @ param stack the item stack 
 + * @ return the dye metadata for a dye , or { @ code - 1 } otherwise 
 + * / 
 + public static int rawMetaFromStack ( ItemStack stack ) 
 + { 
 + return metaFromStack ( stack ) . orElse ( - 1 ) ; 
 + } 
 + 
 + / * * 
 + * Get the dye damage from the stack , which can be passed into { @ link EnumDyeColor # byDyeDamage ( int ) } . 
 + * @ param stack the item stack 
 + * @ return an { @ link OptionalInt } holding the dye damage for a dye , or an empty { @ link OptionalInt } otherwise 
 + * / 
 + public static OptionalInt dyeDamageFromStack ( ItemStack stack ) 
 + { 
 + final OptionalInt meta = metaFromStack ( stack ) ; 
 + return meta . isPresent ( ) ? OptionalInt . of ( 0xF - meta . getAsInt ( ) ) : OptionalInt . empty ( ) ; 
 + } 
 + 
 + / * * 
 + * Similar to { @ link # dyeDamageFromStack ( ItemStack ) } , except that it returns the raw integer ( with a { @ code - 1 } sentinel ) ; 
 + * this follows vanilla conventions . 
 + * @ param stack the item stack 
 + * @ return the dye damage for a dye , or { @ code - 1 } otherwise 
 + * / 
 + public static int rawDyeDamageFromStack ( ItemStack stack ) 
 + { 
 + return dyeDamageFromStack ( stack ) . orElse ( - 1 ) ; 
 + } 
 + 
 + / * * 
 + * Get a dye ' s color . 
 + * @ param stack the item stack 
 + * @ return an { @ link Optional } holding the dye color if present , or an empty { @ link Optional } otherwise 
 + * / 
 + public static Optional < EnumDyeColor > colorFromStack ( ItemStack stack ) 
 + { 
 + final OptionalInt meta = metaFromStack ( stack ) ; 
 + return meta . isPresent ( ) ? Optional . of ( EnumDyeColor . byMetadata ( meta . getAsInt ( ) ) ) : Optional . empty ( ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / inventory / ContainerBrewingStand . java . patch b / patches / minecraft / net / minecraft / inventory / ContainerBrewingStand . java . patch 
 index 63936ee . . e281d7c 100644 
 - - - a / patches / minecraft / net / minecraft / inventory / ContainerBrewingStand . java . patch 
 + + + b / patches / minecraft / net / minecraft / inventory / ContainerBrewingStand . java . patch 
 @ @ - 1 , 5 + 1 , 14 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / inventory / ContainerBrewingStand . java 
 + + + . . / src - work / minecraft / net / minecraft / inventory / ContainerBrewingStand . java 
 + @ @ - 158 , 7 + 158 , 7 @ @ 
 + 
 + public boolean func _ 75214 _ a ( ItemStack p _ 75214 _ 1 _ ) 
 + { 
 + - return p _ 75214 _ 1 _ ! = null ? p _ 75214 _ 1 _ . func _ 77973 _ b ( ) . func _ 150892 _ m ( p _ 75214 _ 1 _ ) : false ; 
 + + return net . minecraftforge . common . brewing . BrewingRecipeRegistry . isValidIngredient ( p _ 75214 _ 1 _ ) ; 
 + } 
 + 
 + public int func _ 75219 _ a ( ) 
 @ @ - 190 , 7 + 190 , 7 @ @ 
 
 public void func _ 82870 _ a ( EntityPlayer p _ 82870 _ 1 _ , ItemStack p _ 82870 _ 2 _ ) 
 @ @ - 14 , 7 + 23 , 7 @ @ 
 public static boolean func _ 75243 _ a _ ( ItemStack p _ 75243 _ 0 _ ) 
 { 
 - return p _ 75243 _ 0 _ ! = null & & ( p _ 75243 _ 0 _ . func _ 77973 _ b ( ) = = Items . field _ 151068 _ bn | | p _ 75243 _ 0 _ . func _ 77973 _ b ( ) = = Items . field _ 151069 _ bo ) ; 
 - + return p _ 75243 _ 0 _ ! = null & & ( p _ 75243 _ 0 _ . func _ 77973 _ b ( ) instanceof net . minecraft . item . ItemPotion | | p _ 75243 _ 0 _ . func _ 77973 _ b ( ) = = Items . field _ 151069 _ bo ) ; 
 + + return net . minecraftforge . common . brewing . BrewingRecipeRegistry . isValidInput ( p _ 75243 _ 0 _ ) ; 
 } 
 } 
 } 
 diff - - git a / patches / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java . patch b / patches / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java . patch 
 index df91475 . . 91343f1 100644 
 - - - a / patches / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java . patch 
 + + + b / patches / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java . patch 
 @ @ - 1 , 5 + 1 , 14 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java 
 + + + . . / src - work / minecraft / net / minecraft / tileentity / TileEntityBrewingStand . java 
 + @ @ - 104 , 7 + 104 , 7 @ @ 
 + 
 + private boolean func _ 145934 _ k ( ) 
 + { 
 + - if ( this . field _ 145945 _ j [ 3 ] ! = null & & this . field _ 145945 _ j [ 3 ] . field _ 77994 _ a > 0 ) 
 + + if ( this . field _ 145945 _ j [ 3 ] ! = null & & this . field _ 145945 _ j [ 3 ] . field _ 77994 _ a > 0 & & false ) / / Code moved to net . minecraftforge . common . brewing . VanillaBrewingRecipe 
 + { 
 + ItemStack itemstack = this . field _ 145945 _ j [ 3 ] ; 
 + 
 @ @ - 118 , 7 + 118 , 7 @ @ 
 
 for ( int i = 0 ; i < 3 ; + + i ) 
 @ @ - 9 , 15 + 18 , 24 @ @ 
 { 
 int j = this . field _ 145945 _ j [ i ] . func _ 77960 _ j ( ) ; 
 int k = this . func _ 145936 _ c ( j , itemstack ) ; 
 - @ @ - 151 , 13 + 151 , 14 @ @ 
 + @ @ - 145 , 19 + 145 , 22 @ @ 
 + } 
 + else 
 + { 
 + - return false ; 
 + + return net . minecraftforge . common . brewing . BrewingRecipeRegistry . canBrew ( field _ 145945 _ j , field _ 145945 _ j [ 3 ] , field _ 145947 _ i ) ; 
 + } 
 + } 
 
 private void func _ 145940 _ l ( ) 
 { 
 + if ( net . minecraftforge . event . ForgeEventFactory . onPotionAttemptBreaw ( field _ 145945 _ j ) ) return ; 
 if ( this . func _ 145934 _ k ( ) ) 
 { 
 + + net . minecraftforge . common . brewing . BrewingRecipeRegistry . brewPotions ( field _ 145945 _ j , field _ 145945 _ j [ 3 ] , field _ 145947 _ i ) ; 
 ItemStack itemstack = this . field _ 145945 _ j [ 3 ] ; 
 
 + + if ( false ) { / / Code moved to net . minecraftforge . common . brewing . VanillaBrewingRecipe 
 for ( int i = 0 ; i < 3 ; + + i ) 
 { 
 - if ( this . field _ 145945 _ j [ i ] ! = null & & this . field _ 145945 _ j [ i ] . func _ 77973 _ b ( ) = = Items . field _ 151068 _ bn ) 
 @ @ - 25 , 9 + 43 , 11 @ @ 
 { 
 int j = this . field _ 145945 _ j [ i ] . func _ 77960 _ j ( ) ; 
 int k = this . func _ 145936 _ c ( j , itemstack ) ; 
 - @ @ - 178 , 9 + 179 , 9 @ @ 
 + @ @ - 177 , 10 + 180 , 11 @ @ 
 + } 
 } 
 } 
 + + } 
 
 - if ( itemstack . func _ 77973 _ b ( ) . func _ 77634 _ r ( ) ) 
 + if ( itemstack . func _ 77973 _ b ( ) . hasContainerItem ( itemstack ) ) 
 @ @ - 37 , 7 + 57 , 7 @ @ 
 } 
 else 
 { 
 - @ @ - 191 , 6 + 192 , 7 @ @ 
 + @ @ - 191 , 6 + 195 , 7 @ @ 
 this . field _ 145945 _ j [ 3 ] = null ; 
 } 
 } 
 @ @ - 45 , 12 + 65 , 14 @ @ 
 } 
 } 
 
 - @ @ - 306 , 7 + 308 , 7 @ @ 
 + @ @ - 306 , 7 + 311 , 9 @ @ 
 
 public boolean func _ 94041 _ b ( int p _ 94041 _ 1 _ , ItemStack p _ 94041 _ 2 _ ) 
 { 
 - return p _ 94041 _ 1 _ = = 3 ? p _ 94041 _ 2 _ . func _ 77973 _ b ( ) . func _ 150892 _ m ( p _ 94041 _ 2 _ ) : p _ 94041 _ 2 _ . func _ 77973 _ b ( ) = = Items . field _ 151068 _ bn | | p _ 94041 _ 2 _ . func _ 77973 _ b ( ) = = Items . field _ 151069 _ bo ; 
 - + return p _ 94041 _ 1 _ = = 3 ? p _ 94041 _ 2 _ . func _ 77973 _ b ( ) . func _ 150892 _ m ( p _ 94041 _ 2 _ ) : p _ 94041 _ 2 _ . func _ 77973 _ b ( ) instanceof ItemPotion | | p _ 94041 _ 2 _ . func _ 77973 _ b ( ) = = Items . field _ 151069 _ bo ; 
 + + if ( p _ 94041 _ 1 _ = = 3 & & net . minecraftforge . common . brewing . BrewingRecipeRegistry . isValidIngredient ( p _ 94041 _ 2 _ ) ) return true ; 
 + + else if ( p _ 94041 _ 1 _ ! = 3 & & net . minecraftforge . common . brewing . BrewingRecipeRegistry . isValidInput ( p _ 94041 _ 2 _ ) ) return true ; 
 + + return false ; 
 } 
 
 public boolean [ ] func _ 174902 _ m ( ) 
 diff - - git a / src / main / java / net / minecraftforge / common / brewing / AbstractBrewingRecipe . java b / src / main / java / net / minecraftforge / common / brewing / AbstractBrewingRecipe . java 
 new file mode 100644 
 index 0000000 . . ceb3dd1 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / brewing / AbstractBrewingRecipe . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package net . minecraftforge . common . brewing ; 
 + 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . oredict . OreDictionary ; 
 + 
 + public abstract class AbstractBrewingRecipe < T > implements IBrewingRecipe { 
 + 
 + public final ItemStack input ; 
 + public final T ingredient ; 
 + public final ItemStack output ; 
 + 
 + protected AbstractBrewingRecipe ( ItemStack input , T ingredient , ItemStack output ) 
 + { 
 + this . input = input ; 
 + this . ingredient = ingredient ; 
 + this . output = output ; 
 + 
 + if ( this . input = = null | | this . ingredient = = null | | this . output = = null ) 
 + { 
 + throw new IllegalArgumentException ( " A brewing recipe cannot have a null parameter . " ) ; 
 + } 
 + 
 + if ( this . input . getMaxStackSize ( ) ! = 1 ) 
 + { 
 + throw new IllegalArgumentException ( " Inputs must have a max size of 1 just like water bottles . Brewing Stands override the input with the output when the brewing is done , items that stack would end up getting lost . " ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean isInput ( ItemStack stack ) 
 + { 
 + return OreDictionary . itemMatches ( this . input , stack , false ) ; 
 + } 
 + 
 + @ Override 
 + public ItemStack getOutput ( ItemStack input , ItemStack ingredient ) 
 + { 
 + return isInput ( input ) & & isIngredient ( ingredient ) ? ItemStack . copyItemStack ( output ) : null ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / common / brewing / BrewingOreRecipe . java b / src / main / java / net / minecraftforge / common / brewing / BrewingOreRecipe . java 
 new file mode 100644 
 index 0000000 . . 8ac625c 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / brewing / BrewingOreRecipe . java 
 @ @ - 0 , 0 + 1 , 32 @ @ 
 + package net . minecraftforge . common . brewing ; 
 + 
 + import java . util . List ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . oredict . OreDictionary ; 
 + 
 + public class BrewingOreRecipe extends AbstractBrewingRecipe < List < ItemStack > > { 
 + 
 + public BrewingOreRecipe ( ItemStack input , String ingredient , ItemStack output ) 
 + { 
 + super ( input , OreDictionary . getOres ( ingredient ) , output ) ; 
 + } 
 + 
 + public BrewingOreRecipe ( ItemStack input , List < ItemStack > ingredient , ItemStack output ) 
 + { 
 + super ( input , ingredient , output ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isIngredient ( ItemStack stack ) 
 + { 
 + for ( ItemStack target : this . ingredient ) 
 + { 
 + if ( OreDictionary . itemMatches ( target , stack , false ) ) 
 + { 
 + return true ; 
 + } 
 + 
 + } 
 + return false ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / common / brewing / BrewingRecipe . java b / src / main / java / net / minecraftforge / common / brewing / BrewingRecipe . java 
 new file mode 100644 
 index 0000000 . . e2b6ce9 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / brewing / BrewingRecipe . java 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + package net . minecraftforge . common . brewing ; 
 + 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . oredict . OreDictionary ; 
 + 
 + public class BrewingRecipe extends AbstractBrewingRecipe < ItemStack > { 
 + 
 + public BrewingRecipe ( ItemStack input , ItemStack ingredient , ItemStack output ) 
 + { 
 + super ( input , ingredient , output ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isIngredient ( ItemStack stack ) 
 + { 
 + return OreDictionary . itemMatches ( this . ingredient , stack , false ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / common / brewing / BrewingRecipeRegistry . java b / src / main / java / net / minecraftforge / common / brewing / BrewingRecipeRegistry . java 
 new file mode 100644 
 index 0000000 . . 07ea61c 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / brewing / BrewingRecipeRegistry . java 
 @ @ - 0 , 0 + 1 , 171 @ @ 
 + package net . minecraftforge . common . brewing ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + import net . minecraft . item . ItemStack ; 
 + 
 + public class BrewingRecipeRegistry { 
 + 
 + private static List < IBrewingRecipe > recipes = new ArrayList < IBrewingRecipe > ( ) ; 
 + 
 + static 
 + { 
 + addRecipe ( new VanillaBrewingRecipe ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Adds a recipe to the registry . Due to the nature of the brewing stand 
 + * inputs that stack ( a . k . a max stack size > 1 ) are not allowed . 
 + * 
 + * @ param input 
 + * The ItemStack that goes in same slots as the water bottles 
 + * would . 
 + * @ param ingredient 
 + * The ItemStack that goes in the same slot as nether wart would . 
 + * @ param output 
 + * The ItemStack that will replace the input once the brewing is 
 + * done . 
 + * @ return true if the recipe was added . 
 + * / 
 + public static boolean addRecipe ( ItemStack input , ItemStack ingredient , ItemStack output ) 
 + { 
 + return addRecipe ( new BrewingRecipe ( input , ingredient , output ) ) ; 
 + } 
 + 
 + / * * 
 + * Adds a recipe to the registry . Due to the nature of the brewing stand 
 + * inputs that stack ( a . k . a max stack size > 1 ) are not allowed . 
 + * 
 + * @ param input 
 + * The ItemStack that goes in same slots as the water bottles 
 + * would . 
 + * @ param ingredient 
 + * The ItemStack that goes in the same slot as nether wart would . 
 + * @ param output 
 + * The ItemStack that will replace the input once the brewing is 
 + * done . 
 + * @ return true if the recipe was added . 
 + * / 
 + public static boolean addRecipe ( ItemStack input , String ingredient , ItemStack output ) 
 + { 
 + return addRecipe ( new BrewingOreRecipe ( input , ingredient , output ) ) ; 
 + } 
 + 
 + / * * 
 + * Adds a recipe to the registry . Due to the nature of the brewing stand 
 + * inputs that stack ( a . k . a max stack size > 1 ) are not allowed . 
 + * / 
 + public static boolean addRecipe ( IBrewingRecipe recipe ) 
 + { 
 + return recipes . add ( recipe ) ; 
 + } 
 + 
 + / * * 
 + * Returns the output ItemStack obtained by brewing the passed input and 
 + * ingredient . Null if no matches are found . 
 + * / 
 + public static ItemStack getOutput ( ItemStack input , ItemStack ingredient ) 
 + { 
 + if ( input = = null | | input . getMaxStackSize ( ) ! = 1 | | input . stackSize ! = 1 ) return null ; 
 + if ( ingredient = = null | | ingredient . stackSize < = 0 ) return null ; 
 + 
 + for ( IBrewingRecipe recipe : recipes ) 
 + { 
 + ItemStack output = recipe . getOutput ( input , ingredient ) ; 
 + if ( output ! = null ) 
 + { 
 + return output ; 
 + } 
 + } 
 + return null ; 
 + } 
 + 
 + / * * 
 + * Returns true if the passed input and ingredient have an output 
 + * / 
 + public static boolean hasOuput ( ItemStack input , ItemStack ingredient ) 
 + { 
 + return getOutput ( input , ingredient ) ! = null ; 
 + } 
 + 
 + / * * 
 + * Used by the brewing stand to determine if its contents can be brewed . 
 + * Extra parameters exist to allow modders to create bigger brewing stands 
 + * without much hassle 
 + * / 
 + public static boolean canBrew ( ItemStack [ ] inputs , ItemStack ingredient , int [ ] inputIndexes ) 
 + { 
 + if ( ingredient = = null | | ingredient . stackSize < = 0 ) return false ; 
 + 
 + for ( int i : inputIndexes ) 
 + { 
 + if ( hasOuput ( inputs [ i ] , ingredient ) ) 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 + return false ; 
 + } 
 + 
 + / * * 
 + * Used by the brewing stand to brew its inventory Extra parameters exist to 
 + * allow modders to create bigger brewing stands without much hassle 
 + * / 
 + public static void brewPotions ( ItemStack [ ] inputs , ItemStack ingredient , int [ ] inputIndexes ) 
 + { 
 + for ( int i : inputIndexes ) 
 + { 
 + ItemStack output = getOutput ( inputs [ i ] , ingredient ) ; 
 + if ( output ! = null ) 
 + { 
 + inputs [ i ] = output ; 
 + } 
 + } 
 + } 
 + 
 + / * * 
 + * Returns true if the passed ItemStack is a valid ingredient for any of the 
 + * recipes in the registry . 
 + * / 
 + public static boolean isValidIngredient ( ItemStack stack ) 
 + { 
 + if ( stack = = null | | stack . stackSize < = 0 ) return false ; 
 + 
 + for ( IBrewingRecipe recipe : recipes ) 
 + { 
 + if ( recipe . isIngredient ( stack ) ) 
 + { 
 + return true ; 
 + } 
 + } 
 + return false ; 
 + } 
 + 
 + / * * 
 + * Returns true if the passed ItemStack is a valid input for any of the 
 + * recipes in the registry . 
 + * / 
 + public static boolean isValidInput ( ItemStack stack ) 
 + { 
 + if ( stack = = null | | stack . getMaxStackSize ( ) ! = 1 | | stack . stackSize ! = 1 ) return false ; 
 + 
 + for ( IBrewingRecipe recipe : recipes ) 
 + { 
 + if ( recipe . isInput ( stack ) ) 
 + { 
 + return true ; 
 + } 
 + } 
 + return false ; 
 + } 
 + 
 + / * * 
 + * Returns an unmodifiable list containing all the recipes in the registry 
 + * / 
 + public static List < IBrewingRecipe > getRecipes ( ) 
 + { 
 + return Collections . unmodifiableList ( recipes ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / common / brewing / IBrewingRecipe . java b / src / main / java / net / minecraftforge / common / brewing / IBrewingRecipe . java 
 new file mode 100644 
 index 0000000 . . c31ad92 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / brewing / IBrewingRecipe . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package net . minecraftforge . common . brewing ; 
 + 
 + import net . minecraft . item . ItemStack ; 
 + 
 + public interface IBrewingRecipe { 
 + 
 + / * * 
 + * Returns true is the passed ItemStack is an input for this recipe . " Input " 
 + * being the item that goes in one of the three bottom slots of the brewing 
 + * stand ( e . g : water bottle ) 
 + * / 
 + public boolean isInput ( ItemStack input ) ; 
 + 
 + / * * 
 + * Returns true if the passed ItemStack is an ingredient for this recipe . 
 + * " Ingredient " being the item that goes in the top slot of the brewing 
 + * stand ( e . g : nether wart ) 
 + * / 
 + public boolean isIngredient ( ItemStack ingredient ) ; 
 + 
 + / * * 
 + * Returns the output when the passed input is brewed with the passed 
 + * ingredient . Null if invalid input or ingredient . 
 + * / 
 + public ItemStack getOutput ( ItemStack input , ItemStack ingredient ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / common / brewing / VanillaBrewingRecipe . java b / src / main / java / net / minecraftforge / common / brewing / VanillaBrewingRecipe . java 
 new file mode 100644 
 index 0000000 . . cf94bc1 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / brewing / VanillaBrewingRecipe . java 
 @ @ - 0 , 0 + 1 , 75 @ @ 
 + package net . minecraftforge . common . brewing ; 
 + 
 + import java . util . List ; 
 + 
 + import net . minecraft . init . Items ; 
 + import net . minecraft . item . ItemPotion ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . potion . PotionHelper ; 
 + 
 + / * * 
 + * Used in BrewingRecipeRegistry to maintain the vanilla behaviour . 
 + * 
 + * Most of the code was simply adapted from net . minecraft . tileentity . TileEntityBrewingStand 
 + * / 
 + public class VanillaBrewingRecipe implements IBrewingRecipe { 
 + 
 + / * * 
 + * Code adapted from TileEntityBrewingStand . isItemValidForSlot ( int index , ItemStack stack ) 
 + * / 
 + @ Override 
 + public boolean isInput ( ItemStack stack ) 
 + { 
 + return stack . getItem ( ) instanceof ItemPotion | | stack . getItem ( ) = = Items . glass _ bottle ; 
 + } 
 + 
 + / * * 
 + * Code adapted from TileEntityBrewingStand . isItemValidForSlot ( int index , ItemStack stack ) 
 + * / 
 + @ Override 
 + public boolean isIngredient ( ItemStack stack ) 
 + { 
 + return stack . getItem ( ) . isPotionIngredient ( stack ) ; 
 + } 
 + 
 + / * * 
 + * Code copied from TileEntityBrewingStand . brewPotions ( ) 
 + * It brews the potion by doing the bit - shifting magic and then checking if the new PotionEffect list is different to the old one , 
 + * or if the new potion is a splash potion when the old one wasn ' t . 
 + * / 
 + @ Override 
 + public ItemStack getOutput ( ItemStack input , ItemStack ingredient ) 
 + { 
 + if ( ingredient ! = null & & input ! = null & & input . getItem ( ) instanceof ItemPotion ) 
 + { 
 + int inputMeta = input . getMetadata ( ) ; 
 + int outputMeta = PotionHelper . applyIngredient ( inputMeta , ingredient . getItem ( ) . getPotionEffect ( ingredient ) ) ; 
 + if ( inputMeta = = outputMeta ) 
 + { 
 + return null ; 
 + } 
 + 
 + List oldEffects = Items . potionitem . getEffects ( inputMeta ) ; 
 + List newEffects = Items . potionitem . getEffects ( outputMeta ) ; 
 + 
 + boolean hasResult = false ; 
 + if ( ( inputMeta < = 0 | | oldEffects ! = newEffects ) & & ( oldEffects = = null | | ! oldEffects . equals ( newEffects ) & & newEffects ! = null ) ) 
 + { 
 + hasResult = true ; 
 + } 
 + else if ( ! ItemPotion . isSplash ( inputMeta ) & & ItemPotion . isSplash ( outputMeta ) ) 
 + { 
 + hasResult = true ; 
 + } 
 + 
 + if ( hasResult ) 
 + { 
 + ItemStack output = input . copy ( ) ; 
 + output . setItemDamage ( outputMeta ) ; 
 + return output ; 
 + } 
 + } 
 + 
 + return null ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / java / net / minecraftforge / test / BrewingRecipeRegistryTest . java b / src / test / java / net / minecraftforge / test / BrewingRecipeRegistryTest . java 
 new file mode 100644 
 index 0000000 . . 2d825de 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / BrewingRecipeRegistryTest . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import net . minecraft . init . Items ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . common . brewing . BrewingRecipeRegistry ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + 
 + @ Mod ( modid = " BrewingRecipeRegistryTest " , name = " BrewingRecipeRegistryTest " , version = " 0 . 0 . 0 " ) 
 + public class BrewingRecipeRegistryTest 
 + { 
 + 
 + public static final boolean ENABLE = false ; 
 + 
 + @ EventHandler 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + if ( ! ENABLE ) return ; 
 + 
 + / / The following adds a recipe that brews a piece of rotten flesh " into " a diamond sword resulting in a diamond hoe 
 + BrewingRecipeRegistry . addRecipe ( new ItemStack ( Items . diamond _ sword ) , new ItemStack ( Items . rotten _ flesh ) , new ItemStack ( Items . diamond _ hoe ) ) ; 
 + 
 + ItemStack output0 = BrewingRecipeRegistry . getOutput ( new ItemStack ( Items . diamond _ sword ) , new ItemStack ( Items . rotten _ flesh ) ) ; 
 + if ( output0 . getItem ( ) = = Items . diamond _ hoe ) 
 + System . out . println ( " Recipe succefully registered and working . Diamond Hoe obtained . " ) ; 
 + 
 + / / Testing if OreDictionary support is working . Register a recipe that brews a gemDiamond into a gold sword resulting in a diamond sword 
 + BrewingRecipeRegistry . addRecipe ( new ItemStack ( Items . golden _ sword ) , " gemDiamond " , new ItemStack ( Items . diamond _ sword ) ) ; 
 + 
 + ItemStack output1 = BrewingRecipeRegistry . getOutput ( new ItemStack ( Items . golden _ sword ) , new ItemStack ( Items . diamond ) ) ; 
 + if ( output1 . getItem ( ) = = Items . diamond _ sword ) 
 + System . out . println ( " Recipe succefully registered and working . Diamond Sword obtained . " ) ; 
 + 
 + / / In vanilla , brewing netherwart into a water bottle results in an awkward potion ( with metadata 16 ) . The following tests if that still happens 
 + ItemStack output2 = BrewingRecipeRegistry . getOutput ( new ItemStack ( Items . potionitem , 1 , 0 ) , new ItemStack ( Items . nether _ wart ) ) ; 
 + if ( output2 ! = null & & output2 . getItem ( ) = = Items . potionitem & & output2 . getItemDamage ( ) = = 16 ) 
 + System . out . println ( " Vanilla behaviour still in place . Brewed Water Bottle with Nether Wart and got Awkward Potion " ) ; 
 + } 
 + }
