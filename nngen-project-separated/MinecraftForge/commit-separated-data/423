BLEU SCORE: 0.020980574531482755

TEST MSG: More work on registry override ability . Closes # 4079
GENERATED MSG: Clean up logging

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> index c52d944 . . aeabee6 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> @ @ - 1 , 3 + 1 , 21 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> package net . minecraftforge . registries ; <nl> <nl> import java . util . BitSet ; <nl> @ @ - 51 , 7 + 69 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> private final Set < ResourceLocation > dummies = Sets . newHashSet ( ) ; <nl> private final Set < Integer > blocked = Sets . newHashSet ( ) ; <nl> private final Multimap < ResourceLocation , V > overrides = ArrayListMultimap . create ( ) ; <nl> - private final BiMap < OverrideOwner , V > override _ owners = HashBiMap . create ( ) ; <nl> + private final BiMap < OverrideOwner , V > owners = HashBiMap . create ( ) ; <nl> private final DummyFactory < V > dummyFactory ; <nl> private final boolean isDelegated ; <nl> private final int min ; <nl> @ @ - 106 , 8 + 124 , 8 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> { <nl> V ret = next ; <nl> do { <nl> - 	 cur = availabilityMap . nextSetBit ( cur + 1 ) ; <nl> - 	 next = ids . get ( cur ) ; <nl> + cur = availabilityMap . nextSetBit ( cur + 1 ) ; <nl> + next = ids . get ( cur ) ; <nl> } while ( next = = null & & cur ! = - 1 ) ; / / nextSetBit returns - 1 when none is found <nl> return ret ; <nl> } <nl> @ @ - 259 , 7 + 277 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> V oldEntry = getRaw ( key ) ; <nl> if ( oldEntry = = value ) / / already registered , return prev registration ' s id <nl> { <nl> - FMLLog . bigWarning ( " The object { } has been registered twice for the same name { } . " , value , key ) ; <nl> + FMLLog . bigWarning ( " Registry { } : The object { } has been registered twice for the same name { } . " , this . superType . getSimpleName ( ) , value , key ) ; <nl> return this . getID ( value ) ; <nl> } <nl> if ( oldEntry ! = null ) / / duplicate name <nl> @ @ - 268 , 10 + 286 , 9 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> throw new IllegalArgumentException ( String . format ( " The name % s has been registered twice , for % s and % s . " , key , getRaw ( key ) , value ) ) ; <nl> if ( owner = = null ) <nl> throw new IllegalStateException ( String . format ( " Could not determine owner for the override on % s . Value : % s " , key , value ) ) ; <nl> - this . override _ owners . put ( new OverrideOwner ( owner , key ) , value ) ; <nl> + if ( DEBUG ) <nl> + FMLLog . log . debug ( " Registry { } Override : { } { } - > { } " , this . superType . getSimpleName ( ) , key , oldEntry , value ) ; <nl> idToUse = this . getID ( oldEntry ) ; <nl> - if ( ! this . override _ owners . containsValue ( oldEntry ) ) <nl> - this . override _ owners . put ( new OverrideOwner ( key . getResourceDomain ( ) , key ) , oldEntry ) ; <nl> } <nl> <nl> Integer foundId = this . ids . inverse ( ) . get ( value ) ; / / Is this ever possible to trigger with otherThing being different ? <nl> @ @ - 294 , 26 + 311 , 29 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> this . names . put ( key , value ) ; <nl> this . ids . put ( idToUse , value ) ; <nl> this . availabilityMap . set ( idToUse ) ; <nl> + this . owners . put ( new OverrideOwner ( owner = = null ? key . getResourceDomain ( ) : owner , key ) , value ) ; <nl> <nl> if ( isDelegated ) <nl> { <nl> getDelegate ( value ) . setName ( key ) ; <nl> if ( oldEntry ! = null ) <nl> { <nl> - this . overrides . put ( key , oldEntry ) ; <nl> + if ( ! this . overrides . get ( key ) . contains ( oldEntry ) ) <nl> + this . overrides . put ( key , oldEntry ) ; <nl> + this . overrides . get ( key ) . remove ( value ) ; <nl> if ( this . stage = = RegistryManager . ACTIVE ) <nl> getDelegate ( oldEntry ) . changeReference ( value ) ; <nl> } <nl> } <nl> <nl> if ( this . add ! = null ) <nl> - this . add . onAdd ( this , this . stage , idToUse , value ) ; <nl> + this . add . onAdd ( this , this . stage , idToUse , value , oldEntry ) ; <nl> <nl> if ( this . dummies . remove ( key ) & & DEBUG ) <nl> - FMLLog . log . debug ( " Registry Dummy Remove : { } " , key ) ; <nl> + FMLLog . log . debug ( " Registry { } Dummy Remove : { } " , this . superType . getSimpleName ( ) , key ) ; <nl> <nl> if ( DEBUG ) <nl> - FMLLog . log . trace ( " Registry add : { } { } { } ( req . id { } ) " , key , idToUse , value , id ) ; <nl> + FMLLog . log . trace ( " Registry { } add : { } { } { } ( req . id { } ) " , this . superType . getSimpleName ( ) , key , idToUse , value , id ) ; <nl> <nl> return idToUse ; <nl> } <nl> @ @ - 342 , 7 + 362 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> throw new IllegalStateException ( String . format ( " Attempted to register the alias % s - > % s to late " , from , to ) ) ; <nl> this . aliases . put ( from , to ) ; <nl> if ( DEBUG ) <nl> - FMLLog . log . trace ( " Registry alias : { } - > { } " , from , to ) ; <nl> + FMLLog . log . trace ( " Registry { } alias : { } - > { } " , this . superType . getSimpleName ( ) , from , to ) ; <nl> } <nl> <nl> void addDummy ( ResourceLocation key ) <nl> @ @ - 351 , 7 + 371 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> throw new IllegalStateException ( String . format ( " Attempted to register the dummy % s to late " , key ) ) ; <nl> this . dummies . add ( key ) ; <nl> if ( DEBUG ) <nl> - FMLLog . log . trace ( " Registry dummy : { } " , key ) ; <nl> + FMLLog . log . trace ( " Registry { } dummy : { } " , this . superType . getSimpleName ( ) , key ) ; <nl> } <nl> <nl> private RegistryDelegate < V > getDelegate ( V thing ) <nl> @ @ - 431 , 6 + 451 , 10 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> void sync ( ResourceLocation name , ForgeRegistry < V > from ) <nl> { <nl> + if ( DEBUG ) <nl> + FMLLog . log . debug ( " Registry { } Sync : { } - > { } " , this . superType . getSimpleName ( ) , this . stage . getName ( ) , from . stage . getName ( ) ) ; <nl> + if ( this = = from ) <nl> + throw new IllegalArgumentException ( " WTF We are the same ! ? ! ? ! " ) ; <nl> if ( from . superType ! = this . superType ) <nl> throw new IllegalArgumentException ( " Attempted to copy to incompatible registry : " + name + " " + from . superType + " - > " + this . superType ) ; <nl> <nl> @ @ - 451 , 8 + 475 , 8 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> this . names . clear ( ) ; <nl> this . availabilityMap . clear ( 0 , this . availabilityMap . length ( ) ) ; <nl> this . defaultValue = null ; <nl> - this . override _ owners . clear ( ) ; <nl> - this . override _ owners . putAll ( from . override _ owners ) ; <nl> + this . overrides . clear ( ) ; <nl> + this . owners . clear ( ) ; <nl> <nl> boolean errored = false ; <nl> <nl> @ @ - 465 , 7 + 489 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> int realId = add ( id , entry . getValue ( ) ) ; <nl> if ( id ! = realId & & id ! = - 1 ) <nl> { <nl> - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; <nl> + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , id , realId ) ; <nl> errored = true ; <nl> } <nl> } <nl> @ @ - 474 , 17 + 498 , 17 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> overrides . add ( entry . getValue ( ) ) ; <nl> for ( V value : overrides ) <nl> { <nl> - OverrideOwner owner = from . override _ owners . inverse ( ) . get ( value ) ; <nl> + OverrideOwner owner = from . owners . inverse ( ) . get ( value ) ; <nl> if ( owner = = null ) <nl> { <nl> - FMLLog . log . warn ( " Registered override did not have an associated owner object . Name : { } Type : { } Value : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; <nl> + FMLLog . log . warn ( " Registry { } : Override did not have an associated owner object . Name : { } Value : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , value ) ; <nl> errored = true ; <nl> continue ; <nl> } <nl> int realId = add ( id , value , owner . owner ) ; <nl> if ( id ! = realId & & id ! = - 1 ) <nl> { <nl> - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; <nl> + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , id , realId ) ; <nl> errored = true ; <nl> } <nl> } <nl> @ @ - 581 , 11 + 605 , 12 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> Collections . sort ( ids ) ; <nl> <nl> FMLLog . log . trace ( " Registry Name : { } " , name ) ; <nl> - ids . forEach ( id - > FMLLog . log . trace ( " Registry : { } { } { } " , id , getKey ( getValue ( id ) ) , getValue ( id ) ) ) ; <nl> + ids . forEach ( id - > FMLLog . log . trace ( " Registry : { } { } { } " , id , getKey ( getValue ( id ) ) , getValue ( id ) ) ) ; <nl> } <nl> <nl> public void loadIds ( Map < ResourceLocation , Integer > ids , Map < ResourceLocation , String > overrides , Map < ResourceLocation , Integer > missing , Map < ResourceLocation , Integer [ ] > remapped , ForgeRegistry < V > old , ResourceLocation name ) <nl> { <nl> + Map < ResourceLocation , String > ovs = Maps . newHashMap ( overrides ) ; <nl> for ( Map . Entry < ResourceLocation , Integer > entry : ids . entrySet ( ) ) <nl> { <nl> ResourceLocation itemName = entry . getKey ( ) ; <nl> @ @ - 594 , 47 + 619 , 77 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> if ( currId = = - 1 ) <nl> { <nl> - FMLLog . log . info ( " Found a missing id from the world { } " , itemName ) ; <nl> + FMLLog . log . info ( " Registry { } : Found a missing id from the world { } " , this . superType . getSimpleName ( ) , itemName ) ; <nl> missing . put ( itemName , newId ) ; <nl> continue ; / / no block / item - > nothing to add <nl> } <nl> else if ( currId ! = newId ) <nl> { <nl> - FMLLog . log . debug ( " Fixed { } id mismatch { } : { } ( init ) - > { } ( map ) . " , name , itemName , currId , newId ) ; <nl> + FMLLog . log . debug ( " Registry { } : Fixed { } id mismatch { } : { } ( init ) - > { } ( map ) . " , this . superType . getSimpleName ( ) , name , itemName , currId , newId ) ; <nl> remapped . put ( itemName , new Integer [ ] { currId , newId } ) ; <nl> } <nl> + <nl> V obj = old . getRaw ( itemName ) ; <nl> Preconditions . checkState ( obj ! = null , " objectKey has an ID but no object . Reflection / ASM hackery ? Registry bug ? " ) ; <nl> <nl> + List < V > lst = Lists . newArrayList ( old . overrides . get ( itemName ) ) ; <nl> String primaryName = null ; <nl> - if ( ! overrides . containsKey ( itemName ) & & old . overrides . containsKey ( itemName ) ) <nl> + if ( old . overrides . containsKey ( itemName ) ) <nl> { <nl> - obj = old . overrides . get ( itemName ) . iterator ( ) . next ( ) ; / / Get the first one in the list , Which should be the first one registered <nl> - primaryName = old . override _ owners . inverse ( ) . get ( obj ) . owner ; <nl> + if ( ! overrides . containsKey ( itemName ) ) <nl> + { <nl> + lst . add ( obj ) ; <nl> + obj = old . overrides . get ( itemName ) . iterator ( ) . next ( ) ; / / Get the first one in the list , Which should be the first one registered <nl> + primaryName = old . owners . inverse ( ) . get ( obj ) . owner ; <nl> + } <nl> + else <nl> + primaryName = overrides . get ( itemName ) ; <nl> } <nl> - else <nl> - primaryName = overrides . get ( itemName ) ; <nl> <nl> - for ( V value : old . overrides . get ( itemName ) ) <nl> + for ( V value : lst ) <nl> { <nl> - OverrideOwner owner = old . override _ owners . inverse ( ) . get ( value ) ; <nl> + OverrideOwner owner = old . owners . inverse ( ) . get ( value ) ; <nl> if ( owner = = null ) <nl> { <nl> - FMLLog . log . warn ( " Registered override did not have an associated owner object . Name : { } Type : { } Value : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; <nl> + FMLLog . log . warn ( " Registry { } : Override did not have an associated owner object . Name : { } Value : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , value ) ; <nl> continue ; <nl> } <nl> <nl> - if ( primaryName . equals ( owner . owner ) ) <nl> + if ( primaryName . equals ( owner ) ) <nl> continue ; <nl> <nl> int realId = add ( newId , value , owner . owner ) ; <nl> if ( newId ! = realId ) <nl> - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; <nl> + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , newId , realId ) ; <nl> } <nl> <nl> int realId = add ( newId , obj , primaryName = = null ? itemName . getResourceDomain ( ) : primaryName ) ; <nl> if ( realId ! = newId ) <nl> - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; <nl> + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , newId , realId ) ; <nl> + ovs . remove ( itemName ) ; <nl> + } <nl> + <nl> + for ( Map . Entry < ResourceLocation , String > entry : ovs . entrySet ( ) ) <nl> + { <nl> + ResourceLocation itemName = entry . getKey ( ) ; <nl> + String owner = entry . getValue ( ) ; <nl> + String current = this . owners . inverse ( ) . get ( this . getRaw ( itemName ) ) . owner ; <nl> + if ( ! owner . equals ( current ) ) <nl> + { <nl> + V _ new = this . owners . get ( new OverrideOwner ( owner , itemName ) ) ; <nl> + if ( _ new = = null ) <nl> + { <nl> + FMLLog . log . warn ( " Registry { } : Skipping override for { } , Unknown owner { } " , this . superType . getSimpleName ( ) , itemName , owner ) ; <nl> + continue ; <nl> + } <nl> + <nl> + FMLLog . log . info ( " Registry { } : Activating override { } for { } " , this . superType . getSimpleName ( ) , owner , itemName ) ; <nl> + <nl> + int newId = this . getID ( itemName ) ; <nl> + int realId = this . add ( newId , _ new , owner ) ; <nl> + if ( newId ! = realId ) <nl> + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , newId , realId ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 652 , 7 + 707 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> int realId = this . add ( id , dummy ) ; <nl> if ( realId ! = id ) <nl> - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , dummy . getRegistryType ( ) . getName ( ) , id , realId ) ; <nl> + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , key , id , realId ) ; <nl> this . dummies . add ( key ) ; <nl> <nl> return true ; <nl> @ @ - 676 , 7 + 731 , 10 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> for ( ResourceLocation key : this . overrides . keySet ( ) ) <nl> { <nl> V obj = this . names . get ( key ) ; <nl> - ret . put ( key , this . override _ owners . inverse ( ) . get ( obj ) . owner ) ; <nl> + OverrideOwner owner = this . owners . inverse ( ) . get ( obj ) ; <nl> + if ( owner = = null & & DEBUG ) <nl> + FMLLog . log . debug ( " Registry { } { } : Invalid override { } { } " , this . superType . getSimpleName ( ) , this . stage . getName ( ) , key , obj ) ; <nl> + ret . put ( key , owner . owner ) ; <nl> } <nl> return ret ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index d3102f6 . . f4f557c 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 68 , 6 + 68 , 8 @ @ import java . util . function . BiConsumer ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Collectors ; <nl> <nl> + import javax . annotation . Nullable ; <nl> + <nl> import org . apache . commons . lang3 . Validate ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> @ @ - 273 , 7 + 275 , 7 @ @ public class GameData <nl> <nl> @ SuppressWarnings ( " deprecation " ) <nl> @ Override <nl> - public void onAdd ( IForgeRegistryInternal < Block > owner , RegistryManager stage , int id , Block block ) <nl> + public void onAdd ( IForgeRegistryInternal < Block > owner , RegistryManager stage , int id , Block block , @ Nullable Block oldBlock ) <nl> { <nl> @ SuppressWarnings ( " unchecked " ) <nl> ClearableObjectIntIdentityMap < IBlockState > blockstateMap = owner . getSlaveMap ( BLOCKSTATE _ TO _ ID , ClearableObjectIntIdentityMap . class ) ; <nl> @ @ - 295 , 6 + 297 , 16 @ @ public class GameData <nl> if ( usedMeta [ meta ] ) <nl> blockstateMap . put ( block . getStateFromMeta ( meta ) , id < < 4 | meta ) ; / / Put the CORRECT thing ! <nl> } <nl> + <nl> + <nl> + if ( oldBlock ! = null ) <nl> + { <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + BiMap < Block , Item > blockToItem = owner . getSlaveMap ( BLOCK _ TO _ ITEM , BiMap . class ) ; <nl> + Item item = blockToItem . get ( oldBlock ) ; <nl> + if ( item ! = null ) <nl> + blockToItem . forcePut ( block , item ) ; <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 342 , 7 + 354 , 7 @ @ public class GameData <nl> static final ItemCallbacks INSTANCE = new ItemCallbacks ( ) ; <nl> <nl> @ Override <nl> - public void onAdd ( IForgeRegistryInternal < Item > owner , RegistryManager stage , int id , Item item ) <nl> + public void onAdd ( IForgeRegistryInternal < Item > owner , RegistryManager stage , int id , Item item , @ Nullable Item oldItem ) <nl> { <nl> if ( item instanceof ItemBlock ) <nl> { <nl> @ @ - 381 , 7 + 393 , 7 @ @ public class GameData <nl> static final EntityCallbacks INSTANCE = new EntityCallbacks ( ) ; <nl> <nl> @ Override <nl> - public void onAdd ( IForgeRegistryInternal < EntityEntry > owner , RegistryManager stage , int id , EntityEntry entry ) <nl> + public void onAdd ( IForgeRegistryInternal < EntityEntry > owner , RegistryManager stage , int id , EntityEntry entry , @ Nullable EntityEntry oldEntry ) <nl> { <nl> if ( entry . getEgg ( ) ! = null ) <nl> EntityList . ENTITY _ EGGS . put ( entry . getRegistryName ( ) , entry . getEgg ( ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java <nl> index 16f1644 . . 313fbd4 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java <nl> @ @ - 67 , 7 + 67 , 7 @ @ public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterab <nl> * / <nl> interface AddCallback < V extends IForgeRegistryEntry < V > > <nl> { <nl> - void onAdd ( IForgeRegistryInternal < V > owner , RegistryManager stage , int id , V obj ) ; <nl> + void onAdd ( IForgeRegistryInternal < V > owner , RegistryManager stage , int id , V obj , @ Nullable V oldObj ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / registries / RegistryBuilder . java b / src / main / java / net / minecraftforge / registries / RegistryBuilder . java <nl> index 70671ae . . 8bdfe7a 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / RegistryBuilder . java <nl> + + + b / src / main / java / net / minecraftforge / registries / RegistryBuilder . java <nl> @ @ - 143 , 10 + 143 , 10 @ @ public class RegistryBuilder < T extends IForgeRegistryEntry < T > > <nl> if ( addCallback . size ( ) = = 1 ) <nl> return addCallback . get ( 0 ) ; <nl> <nl> - return ( owner , stage , id , obj ) - > <nl> + return ( owner , stage , id , obj , old ) - > <nl> { <nl> for ( AddCallback < T > cb : this . addCallback ) <nl> - cb . onAdd ( owner , stage , id , obj ) ; <nl> + cb . onAdd ( owner , stage , id , obj , old ) ; <nl> } ; <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / RegistryOverrideTest . java b / src / test / java / net / minecraftforge / debug / RegistryOverrideTest . java <nl> new file mode 100644 <nl> index 0000000 . . 98d449b <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / RegistryOverrideTest . java <nl> @ @ - 0 , 0 + 1 , 70 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . SoundType ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . util . math . AxisAlignedBB ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . util . text . TextComponentString ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + @ Mod ( modid = RegistryOverrideTest . MODID , version = " 1 . 0 " ) <nl> + @ Mod . EventBusSubscriber <nl> + public class RegistryOverrideTest <nl> + { <nl> + public static final String MODID = " registry _ override _ test " ; <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerBlocks ( RegistryEvent . Register < Block > event ) <nl> + { <nl> + event . getRegistry ( ) . register ( new BlockReplacement ( ) ) ; <nl> + } <nl> + <nl> + private static class BlockReplacement extends Block <nl> + { <nl> + AxisAlignedBB BB = FULL _ BLOCK _ AABB . contract ( 0 . 1 , 0 , 0 . 1 ) ; <nl> + private BlockReplacement ( ) <nl> + { <nl> + super ( Material . ROCK ) ; <nl> + setRegistryName ( " minecraft " , " bookshelf " ) ; <nl> + this . setHardness ( 1 . 5F ) ; <nl> + this . setSoundType ( SoundType . STONE ) . setUnlocalizedName ( " bookshelf " ) ; <nl> + this . setCreativeTab ( CreativeTabs . BUILDING _ BLOCKS ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " BlockReplacement { " + this . getRegistryName ( ) + " } " ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onBlockClicked ( World worldIn , BlockPos pos , EntityPlayer playerIn ) <nl> + { <nl> + playerIn . sendMessage ( new TextComponentString ( " Debug Override Click ! " ) ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index 58575ce . . b1c3c0f 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 666 , 7 + 666 , 7 @ @ public class CraftingHelper { <nl> } <nl> catch ( URISyntaxException e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Error finding Minecraft jar : " + e . toString ( ) ) ; <nl> + FMLLog . log . error ( " Error finding Minecraft jar : " , e ) ; <nl> return false ; <nl> } <nl> } <nl> @ @ - 681 , 7 + 681 , 7 @ @ public class CraftingHelper { <nl> } <nl> catch ( IOException e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Error loading FileSystem from jar : " + e . toString ( ) ) ; <nl> + FMLLog . log . error ( " Error loading FileSystem from jar : " , e ) ; <nl> return false ; <nl> } <nl> } <nl> @ @ - 704 , 7 + 704 , 7 @ @ public class CraftingHelper { <nl> } <nl> catch ( IOException e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Error loading _ constants . json : " + e . toString ( ) ) ; <nl> + FMLLog . log . error ( " Error loading _ constants . json : " , e ) ; <nl> return false ; <nl> } <nl> } <nl> @ @ - 716 , 7 + 716 , 7 @ @ public class CraftingHelper { <nl> } <nl> catch ( IOException e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Error iterating recipes for : " + ctx . getModId ( ) ) ; <nl> + FMLLog . log . error ( " Error iterating recipes for : { } " , ctx . getModId ( ) , e ) ; <nl> return false ; <nl> } <nl> <nl> @ @ - 742 , 12 + 742 , 12 @ @ public class CraftingHelper { <nl> } <nl> catch ( JsonParseException e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Parsing error loading recipe " + key ) ; <nl> + FMLLog . log . error ( " Parsing error loading recipe { } " , key , e ) ; <nl> return false ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Couldn ' t read recipe " + key + " from " + f ) ; <nl> + FMLLog . log . error ( " Couldn ' t read recipe { } from { } " , key , f , e ) ; <nl> return false ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / handshake / FMLHandshakeClientState . java b / src / main / java / net / minecraftforge / fml / common / network / handshake / FMLHandshakeClientState . java <nl> index 312943d . . c653bbf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / handshake / FMLHandshakeClientState . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / handshake / FMLHandshakeClientState . java <nl> @ @ - 146 , 7 + 146 , 7 @ @ enum FMLHandshakeClientState implements IHandshakeState < FMLHandshakeClientState > <nl> NetworkDispatcher dispatcher = ctx . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; <nl> dispatcher . rejectHandshake ( " Fatally missing blocks and items " ) ; <nl> FMLLog . log . fatal ( " Failed to connect to server : there are { } missing blocks and items " , locallyMissing . size ( ) ) ; <nl> - locallyMissing . asMap ( ) . forEach ( ( key , value ) - > FMLLog . log . debug ( " Missing % s Entries : { } " , key , value ) ) ; <nl> + locallyMissing . asMap ( ) . forEach ( ( key , value ) - > FMLLog . log . debug ( " Missing { } Entries : { } " , key , value ) ) ; <nl> return ERROR ; <nl> } <nl> ctx . writeAndFlush ( new FMLHandshakeMessage . HandshakeAck ( ordinal ( ) ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> index 5dd95ec . . cadff98 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> @ @ - 380 , 7 + 380 , 7 @ @ public class OreDictionary <nl> matches = true ; <nl> if ( oreName ! = null & & ! oreName . equals ( ent . getValue ( ) ) ) <nl> { <nl> - FMLLog . info ( " Invalid recipe found with multiple oredict ingredients in the same ingredient . . . " ) ; / / TODO : Write a dumper ? <nl> + FMLLog . log . info ( " Invalid recipe found with multiple oredict ingredients in the same ingredient . . . " ) ; / / TODO : Write a dumper ? <nl> skip = true ; <nl> break ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> index 8f64241 . . c52d944 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> @ @ - 259 , 7 + 259 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> V oldEntry = getRaw ( key ) ; <nl> if ( oldEntry = = value ) / / already registered , return prev registration ' s id <nl> { <nl> - FMLLog . bigWarning ( " The object % s has been registered twice for the same name % s . " , value , key ) ; <nl> + FMLLog . bigWarning ( " The object { } has been registered twice for the same name { } . " , value , key ) ; <nl> return this . getID ( value ) ; <nl> } <nl> if ( oldEntry ! = null ) / / duplicate name <nl> @ @ - 310 , 10 + 310 , 10 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> this . add . onAdd ( this , this . stage , idToUse , value ) ; <nl> <nl> if ( this . dummies . remove ( key ) & & DEBUG ) <nl> - FMLLog . fine ( " Registry Dummy Remove : % s " , key ) ; <nl> + FMLLog . log . debug ( " Registry Dummy Remove : { } " , key ) ; <nl> <nl> if ( DEBUG ) <nl> - FMLLog . finer ( " Registry add : % s % d % s ( req . id % d ) " , key , idToUse , value , id ) ; <nl> + FMLLog . log . trace ( " Registry add : { } { } { } ( req . id { } ) " , key , idToUse , value , id ) ; <nl> <nl> return idToUse ; <nl> } <nl> @ @ - 342 , 7 + 342 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> throw new IllegalStateException ( String . format ( " Attempted to register the alias % s - > % s to late " , from , to ) ) ; <nl> this . aliases . put ( from , to ) ; <nl> if ( DEBUG ) <nl> - FMLLog . finer ( " Registry alias : % s - > % s " , from , to ) ; <nl> + FMLLog . log . trace ( " Registry alias : { } - > { } " , from , to ) ; <nl> } <nl> <nl> void addDummy ( ResourceLocation key ) <nl> @ @ - 351 , 7 + 351 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> throw new IllegalStateException ( String . format ( " Attempted to register the dummy % s to late " , key ) ) ; <nl> this . dummies . add ( key ) ; <nl> if ( DEBUG ) <nl> - FMLLog . finer ( " Registry dummy : % s - > % s " , key ) ; <nl> + FMLLog . log . trace ( " Registry dummy : { } " , key ) ; <nl> } <nl> <nl> private RegistryDelegate < V > getDelegate ( V thing ) <nl> @ @ - 465 , 7 + 465 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> int realId = add ( id , entry . getValue ( ) ) ; <nl> if ( id ! = realId & & id ! = - 1 ) <nl> { <nl> - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; <nl> + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; <nl> errored = true ; <nl> } <nl> } <nl> @ @ - 477 , 14 + 477 , 14 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> OverrideOwner owner = from . override _ owners . inverse ( ) . get ( value ) ; <nl> if ( owner = = null ) <nl> { <nl> - FMLLog . warning ( " Registered override did not have an associated owner object . Name : % s Type : % s Value : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; <nl> + FMLLog . log . warn ( " Registered override did not have an associated owner object . Name : { } Type : { } Value : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; <nl> errored = true ; <nl> continue ; <nl> } <nl> int realId = add ( id , value , owner . owner ) ; <nl> if ( id ! = realId & & id ! = - 1 ) <nl> { <nl> - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; <nl> + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; <nl> errored = true ; <nl> } <nl> } <nl> @ @ - 580 , 8 + 580 , 8 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> Collections . sort ( ids ) ; <nl> <nl> - FMLLog . finer ( " Registry Name : % s " , name ) ; <nl> - ids . forEach ( id - > FMLLog . finer ( " Registry : % d % s % s " , id , getKey ( getValue ( id ) ) , getValue ( id ) ) ) ; <nl> + FMLLog . log . trace ( " Registry Name : { } " , name ) ; <nl> + ids . forEach ( id - > FMLLog . log . trace ( " Registry : { } { } { } " , id , getKey ( getValue ( id ) ) , getValue ( id ) ) ) ; <nl> } <nl> <nl> public void loadIds ( Map < ResourceLocation , Integer > ids , Map < ResourceLocation , String > overrides , Map < ResourceLocation , Integer > missing , Map < ResourceLocation , Integer [ ] > remapped , ForgeRegistry < V > old , ResourceLocation name ) <nl> @ @ - 594 , 13 + 594 , 13 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> if ( currId = = - 1 ) <nl> { <nl> - FMLLog . info ( " Found a missing id from the world % s " , itemName ) ; <nl> + FMLLog . log . info ( " Found a missing id from the world { } " , itemName ) ; <nl> missing . put ( itemName , newId ) ; <nl> continue ; / / no block / item - > nothing to add <nl> } <nl> else if ( currId ! = newId ) <nl> { <nl> - FMLLog . fine ( " Fixed % s id mismatch % s : % d ( init ) - > % d ( map ) . " , name , itemName , currId , newId ) ; <nl> + FMLLog . log . debug ( " Fixed { } id mismatch { } : { } ( init ) - > { } ( map ) . " , name , itemName , currId , newId ) ; <nl> remapped . put ( itemName , new Integer [ ] { currId , newId } ) ; <nl> } <nl> V obj = old . getRaw ( itemName ) ; <nl> @ @ - 620 , 7 + 620 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> OverrideOwner owner = old . override _ owners . inverse ( ) . get ( value ) ; <nl> if ( owner = = null ) <nl> { <nl> - FMLLog . warning ( " Registered override did not have an associated owner object . Name : % s Type : % s Value : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; <nl> + FMLLog . log . warn ( " Registered override did not have an associated owner object . Name : { } Type : { } Value : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; <nl> continue ; <nl> } <nl> <nl> @ @ - 629 , 12 + 629 , 12 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> int realId = add ( newId , value , owner . owner ) ; <nl> if ( newId ! = realId ) <nl> - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; <nl> + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; <nl> } <nl> <nl> int realId = add ( newId , obj , primaryName = = null ? itemName . getResourceDomain ( ) : primaryName ) ; <nl> if ( realId ! = newId ) <nl> - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; <nl> + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; <nl> } <nl> } <nl> <nl> @ @ - 645 , 14 + 645 , 14 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> V dummy = this . dummyFactory . createDummy ( key ) ; <nl> if ( DEBUG ) <nl> - FMLLog . finer ( " Registry Dummy Add : % s % d - > % s " , key , id , dummy ) ; <nl> + FMLLog . log . trace ( " Registry Dummy Add : { } { } - > { } " , key , id , dummy ) ; <nl> <nl> / / It was blocked before so we need to unset the blocking map <nl> this . availabilityMap . clear ( id ) ; <nl> <nl> int realId = this . add ( id , dummy ) ; <nl> if ( realId ! = id ) <nl> - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , key , dummy . getRegistryType ( ) . getName ( ) , id , realId ) ; <nl> + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , dummy . getRegistryType ( ) . getName ( ) , id , realId ) ; <nl> this . dummies . add ( key ) ; <nl> <nl> return true ; <nl> @ @ - 699 , 7 + 699 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> void processMissingEvent ( ResourceLocation name , ForgeRegistry < V > pool , List < MissingMappings . Mapping < V > > mappings , Map < ResourceLocation , Integer > missing , Map < ResourceLocation , Integer [ ] > remaps , Collection < ResourceLocation > defaulted , Collection < ResourceLocation > failed ) <nl> { <nl> - FMLLog . fine ( " Processing missing event for % s : " , name ) ; <nl> + FMLLog . log . debug ( " Processing missing event for { } : " , name ) ; <nl> int ignored = 0 ; <nl> <nl> for ( MissingMappings . Mapping < V > remap : mappings ) <nl> @ @ - 711 , 19 + 711 , 19 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> / / entry re - mapped , finish the registration with the new name / object , but the old id <nl> int currId = getID ( remap . getTarget ( ) ) ; <nl> ResourceLocation newName = pool . getKey ( remap . getTarget ( ) ) ; <nl> - FMLLog . fine ( " Remapping % s - > % s . " , remap . key , newName ) ; <nl> + FMLLog . log . debug ( " Remapping { } - > { } . " , remap . key , newName ) ; <nl> <nl> missing . remove ( remap . key ) ; <nl> / / I don ' t think this will work , but I dont think it ever worked . . the item is already in the map with a different id . . . we want to fix that . . <nl> int realId = this . add ( remap . id , remap . getTarget ( ) ) ; <nl> if ( realId ! = remap . id ) <nl> - FMLLog . warning ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , newName , this . getRegistrySuperType ( ) , remap . id , realId ) ; <nl> + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , newName , this . getRegistrySuperType ( ) , remap . id , realId ) ; <nl> this . addAlias ( remap . key , newName ) ; <nl> <nl> <nl> if ( currId ! = realId ) <nl> { <nl> - FMLLog . info ( " Fixed id mismatch % s : % d ( init ) - > % d ( map ) . " , newName , currId , realId ) ; <nl> + FMLLog . log . info ( " Fixed id mismatch { } : { } ( init ) - > { } ( map ) . " , newName , currId , realId ) ; <nl> remaps . put ( newName , new Integer [ ] { currId , realId } ) ; <nl> } <nl> } <nl> @ @ - 736 , 24 + 736 , 24 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> } <nl> else if ( action = = MissingMappings . Action . IGNORE ) <nl> { <nl> - FMLLog . fine ( " Ignoring % s " , remap . key ) ; <nl> + FMLLog . log . debug ( " Ignoring { } " , remap . key ) ; <nl> ignored + + ; <nl> } <nl> else if ( action = = MissingMappings . Action . FAIL ) <nl> { <nl> - FMLLog . fine ( " Failing % s ! " , remap . key ) ; <nl> + FMLLog . log . debug ( " Failing { } ! " , remap . key ) ; <nl> failed . add ( remap . key ) ; <nl> } <nl> else if ( action = = MissingMappings . Action . WARN ) <nl> { <nl> - FMLLog . warning ( " % s may cause world breakage ! " , remap . key ) ; <nl> + FMLLog . log . warn ( " { } may cause world breakage ! " , remap . key ) ; <nl> } <nl> this . block ( remap . id ) ; <nl> } <nl> } <nl> <nl> if ( failed . isEmpty ( ) & & ignored > 0 ) <nl> - FMLLog . fine ( " There were % d missing mappings that have been ignored " , ignored ) ; <nl> + FMLLog . log . debug ( " There were { } missing mappings that have been ignored " , ignored ) ; <nl> } <nl> <nl> private static class OverrideOwner <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index eb6acd0 . . 4530100 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 112 , 7 + 112 , 7 @ @ public class GameData <nl> { <nl> if ( DISABLE _ VANILLA _ REGISTRIES ) <nl> { <nl> - FMLLog . bigWarning ( " DISABELING VANILLA REGISTRY CREATION AS PER SYSTEM VARIABLE SETTING ! forge . disableVanillaGameData " ) ; <nl> + FMLLog . bigWarning ( " DISABLING VANILLA REGISTRY CREATION AS PER SYSTEM VARIABLE SETTING ! forge . disableVanillaGameData " ) ; <nl> return ; <nl> } <nl> if ( hasInit ) <nl> @ @ - 188 , 7 + 188 , 7 @ @ public class GameData <nl> @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) <nl> public static void vanillaSnapshot ( ) <nl> { <nl> - FMLLog . fine ( " Creating vanilla freeze snapshot " ) ; <nl> + FMLLog . log . debug ( " Creating vanilla freeze snapshot " ) ; <nl> for ( Map . Entry < ResourceLocation , ForgeRegistry < ? extends IForgeRegistryEntry < ? > > > r : RegistryManager . ACTIVE . registries . entrySet ( ) ) <nl> { <nl> final Class < ? extends IForgeRegistryEntry > clazz = RegistryManager . ACTIVE . getSuperType ( r . getKey ( ) ) ; <nl> @ @ - 201 , 13 + 201 , 13 @ @ public class GameData <nl> } ) ; <nl> RegistryManager . VANILLA . registries . forEach ( LOCK _ VANILLA ) ; <nl> RegistryManager . ACTIVE . registries . forEach ( LOCK _ VANILLA ) ; <nl> - FMLLog . fine ( " Vanilla freeze snapshot created " ) ; <nl> + FMLLog . log . debug ( " Vanilla freeze snapshot created " ) ; <nl> } <nl> <nl> @ SuppressWarnings ( { " rawtypes " , " unchecked " } ) <nl> public static void freezeData ( ) <nl> { <nl> - FMLLog . fine ( " Freezing registries " ) ; <nl> + FMLLog . log . debug ( " Freezing registries " ) ; <nl> for ( Map . Entry < ResourceLocation , ForgeRegistry < ? extends IForgeRegistryEntry < ? > > > r : RegistryManager . ACTIVE . registries . entrySet ( ) ) <nl> { <nl> final Class < ? extends IForgeRegistryEntry > clazz = RegistryManager . ACTIVE . getSuperType ( r . getKey ( ) ) ; <nl> @ @ - 219 , 7 + 219 , 7 @ @ public class GameData <nl> reg . freeze ( ) ; <nl> } ) ; <nl> RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . freeze ( ) ) ; <nl> - FMLLog . fine ( " All registries frozen " ) ; <nl> + FMLLog . log . debug ( " All registries frozen " ) ; <nl> } <nl> <nl> @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) <nl> @ @ - 227 , 12 + 227 , 12 @ @ public class GameData <nl> { <nl> if ( RegistryManager . FROZEN . registries . isEmpty ( ) ) <nl> { <nl> - FMLLog . warning ( " Can ' t revert to frozen GameData state without freezing first . " ) ; <nl> + FMLLog . log . warn ( " Can ' t revert to frozen GameData state without freezing first . " ) ; <nl> return ; <nl> } <nl> RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . resetDelegates ( ) ) ; <nl> <nl> - FMLLog . fine ( " Reverting to frozen data state . " ) ; <nl> + FMLLog . log . debug ( " Reverting to frozen data state . " ) ; <nl> for ( Map . Entry < ResourceLocation , ForgeRegistry < ? extends IForgeRegistryEntry < ? > > > r : RegistryManager . ACTIVE . registries . entrySet ( ) ) <nl> { <nl> final Class < ? extends IForgeRegistryEntry > clazz = RegistryManager . ACTIVE . getSuperType ( r . getKey ( ) ) ; <nl> @ @ - 243 , 16 + 243 , 16 @ @ public class GameData <nl> <nl> / / the id mapping has reverted , ensure we sync up the object holders <nl> ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> - FMLLog . fine ( " Frozen state restored . " ) ; <nl> + FMLLog . log . debug ( " Frozen state restored . " ) ; <nl> } <nl> <nl> @ SuppressWarnings ( { " rawtypes " , " unchecked " } ) <nl> public static void revert ( RegistryManager state , ResourceLocation registry , boolean lock ) <nl> { <nl> - FMLLog . fine ( " Reverting { } to { } " , registry , state . getName ( ) ) ; <nl> + FMLLog . log . debug ( " Reverting { } to { } " , registry , state . getName ( ) ) ; <nl> final Class < ? extends IForgeRegistryEntry > clazz = RegistryManager . ACTIVE . getSuperType ( registry ) ; <nl> loadRegistry ( registry , RegistryManager . FROZEN , RegistryManager . ACTIVE , clazz , lock ) ; <nl> - FMLLog . fine ( " Reverting complete " ) ; <nl> + FMLLog . log . debug ( " Reverting complete " ) ; <nl> } <nl> <nl> / / Lets us clear the map so we can rebuild it . <nl> @ @ - 431 , 7 + 431 , 7 @ @ public class GameData <nl> @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) <nl> public static Multimap < ResourceLocation , ResourceLocation > injectSnapshot ( Map < ResourceLocation , ForgeRegistry . Snapshot > snapshot , boolean injectFrozenData , boolean isLocalWorld ) <nl> { <nl> - FMLLog . info ( " Injecting existing registry data into this % s instance " , FMLCommonHandler . instance ( ) . getEffectiveSide ( ) . isServer ( ) ? " server " : " client " ) ; <nl> + FMLLog . log . info ( " Injecting existing registry data into this { } instance " , FMLCommonHandler . instance ( ) . getEffectiveSide ( ) . isServer ( ) ? " server " : " client " ) ; <nl> RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . validateContent ( name ) ) ; <nl> RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . dump ( name ) ) ; <nl> RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . resetDelegates ( ) ) ; <nl> @ @ - 481 , 14 + 481 , 14 @ @ public class GameData <nl> else if ( isLocalWorld ) <nl> { <nl> if ( ForgeRegistry . DEBUG ) <nl> - FMLLog . log ( Level . DEBUG , " Registry % s : Resuscitating dummy entry % s " , e . getKey ( ) , dummy ) ; <nl> + FMLLog . log . debug ( " Registry { } : Resuscitating dummy entry { } " , e . getKey ( ) , dummy ) ; <nl> } <nl> else <nl> { <nl> / / The server believes this is a dummy block identity , but we seem to have one locally . This is likely a conflict <nl> / / in mod setup - Mark this entry as a dummy <nl> int id = reg . getID ( dummy ) ; <nl> - FMLLog . log ( Level . WARN , " Registry $ s : The ID % d is currently locally mapped - it will be replaced with a dummy for this session " , e . getKey ( ) , id ) ; <nl> + FMLLog . log . warn ( " Registry { } : The ID { } is currently locally mapped - it will be replaced with a dummy for this session " , e . getKey ( ) , id ) ; <nl> reg . markDummy ( dummy , id ) ; <nl> } <nl> } ) ; <nl> @ @ - 497 , 7 + 497 , 7 @ @ public class GameData <nl> int count = missing . values ( ) . stream ( ) . mapToInt ( e - > e . size ( ) ) . sum ( ) ; <nl> if ( count > 0 ) <nl> { <nl> - FMLLog . fine ( " There are % d mappings missing - attempting a mod remap " , count ) ; <nl> + FMLLog . log . debug ( " There are { } mappings missing - attempting a mod remap " , count ) ; <nl> Multimap < ResourceLocation , ResourceLocation > defaulted = ArrayListMultimap . create ( ) ; <nl> Multimap < ResourceLocation , ResourceLocation > failed = ArrayListMultimap . create ( ) ; <nl> <nl> @ @ - 511 , 9 + 511 , 9 @ @ public class GameData <nl> List < MissingMappings . Mapping < ? > > lst = event . getAllMappings ( ) . stream ( ) . filter ( e - > e . getAction ( ) = = MissingMappings . Action . DEFAULT ) . collect ( Collectors . toList ( ) ) ; <nl> if ( ! lst . isEmpty ( ) ) <nl> { <nl> - FMLLog . severe ( " Unidentified mapping from registry % s " , name ) ; <nl> + FMLLog . log . error ( " Unidentified mapping from registry { } " , name ) ; <nl> lst . forEach ( map - > { <nl> - FMLLog . severe ( " % s : % d " , map . key , map . id ) ; <nl> + FMLLog . log . error ( " { } : { } " , map . key , map . id ) ; <nl> if ( ! isLocalWorld ) <nl> defaulted . put ( name , map . key ) ; <nl> } ) ; <nl> @ @ - 555 , 7 + 555 , 7 @ @ public class GameData <nl> else <nl> { <nl> for ( int x = 0 ; x < 10 ; x + + ) <nl> - FMLLog . severe ( " ! ! ! ! ! ! ! ! ! ! UPDATING WORLD WITHOUT DOING BACKUP ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! " ) ; <nl> + FMLLog . log . error ( " ! ! ! ! ! ! ! ! ! ! UPDATING WORLD WITHOUT DOING BACKUP ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! " ) ; <nl> } <nl> } <nl> catch ( IOException e ) <nl> @ @ - 568 , 7 + 568 , 7 @ @ public class GameData <nl> if ( ! defaulted . isEmpty ( ) ) <nl> { <nl> if ( isLocalWorld ) <nl> - FMLLog . severe ( " There are unidentified mappings in this world - we are going to attempt to process anyway " ) ; <nl> + FMLLog . log . error ( " There are unidentified mappings in this world - we are going to attempt to process anyway " ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java <nl> index 855eff1 . . de4e5fb 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ class NamespacedDefaultedWrapper < V extends IForgeRegistryEntry < V > > extends Regis <nl> <nl> int realId = this . delegate . add ( id , value ) ; <nl> if ( realId ! = id & & id ! = - 1 ) <nl> - FMLLog . warning ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , value . getRegistryType ( ) . getName ( ) , id , realId ) ; <nl> + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , value . getRegistryType ( ) . getName ( ) , id , realId ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 48 , 6 + 48 , 7 @ @ class NamespacedDefaultedWrapper < V extends IForgeRegistryEntry < V > > extends Regis <nl> register ( - 1 , key , value ) ; <nl> } <nl> <nl> + @ Override <nl> public void validateKey ( ) <nl> { <nl> this . delegate . validateKey ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java <nl> index 2d42fce . . b501509 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java <nl> @ @ - 37 , 7 + 37 , 7 @ @ class NamespacedWrapper < V extends IForgeRegistryEntry < V > > extends RegistryNamesp <nl> <nl> int realId = this . delegate . add ( id , value ) ; <nl> if ( realId ! = id & & id ! = - 1 ) <nl> - FMLLog . warning ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , value . getRegistryType ( ) . getName ( ) , id , realId ) ; <nl> + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , value . getRegistryType ( ) . getName ( ) , id , realId ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / net / minecraftforge / registries / RegistryManager . java b / src / main / java / net / minecraftforge / registries / RegistryManager . java <nl> index bf1cbe1 . . 0fc891e 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / RegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / registries / RegistryManager . java <nl> @ @ - 84 , 7 + 84 , 7 @ @ public class RegistryManager <nl> if ( ! overlappedTypes . isEmpty ( ) ) <nl> { <nl> Class < ? > foundType = overlappedTypes . iterator ( ) . next ( ) ; <nl> - FMLLog . severe ( " Found existing registry of type % s named % s , you cannot create a new registry ( % s ) with type % s , as % s has a parent of that type " , foundType , superTypes . get ( foundType ) , name , type , type ) ; <nl> + FMLLog . log . error ( " Found existing registry of type { } named { } , you cannot create a new registry ( { } ) with type { } , as { } has a parent of that type " , foundType , superTypes . get ( foundType ) , name , type , type ) ; <nl> throw new IllegalArgumentException ( " Duplicate registry parent type found - you can only have one registry for a particular super type " ) ; <nl> } <nl> ForgeRegistry < V > reg = new ForgeRegistry < V > ( type , defaultKey , min , max , create , add , clear , this , allowOverrides , isModifiable , dummyFactory ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java b / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java <nl> index 3e0ffa5 . . 4d3342e 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java <nl> @ @ - 25 , 7 + 25 , 7 @ @ public class CraftingSystemTest <nl> @ SubscribeEvent <nl> public static void registerRecipes ( RegistryEvent . Register < IRecipe > event ) <nl> { <nl> - FMLLog . info ( " Registering Test Recipes : " ) ; <nl> + FMLLog . log . info ( " Registering Test Recipes : " ) ; <nl> } <nl> <nl> public static class IngredientFactory implements IIngredientFactory

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 index c52d944 . . aeabee6 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 @ @ - 1 , 3 + 1 , 21 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 package net . minecraftforge . registries ; 
 
 import java . util . BitSet ; 
 @ @ - 51 , 7 + 69 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 private final Set < ResourceLocation > dummies = Sets . newHashSet ( ) ; 
 private final Set < Integer > blocked = Sets . newHashSet ( ) ; 
 private final Multimap < ResourceLocation , V > overrides = ArrayListMultimap . create ( ) ; 
 - private final BiMap < OverrideOwner , V > override _ owners = HashBiMap . create ( ) ; 
 + private final BiMap < OverrideOwner , V > owners = HashBiMap . create ( ) ; 
 private final DummyFactory < V > dummyFactory ; 
 private final boolean isDelegated ; 
 private final int min ; 
 @ @ - 106 , 8 + 124 , 8 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 { 
 V ret = next ; 
 do { 
 - 	 cur = availabilityMap . nextSetBit ( cur + 1 ) ; 
 - 	 next = ids . get ( cur ) ; 
 + cur = availabilityMap . nextSetBit ( cur + 1 ) ; 
 + next = ids . get ( cur ) ; 
 } while ( next = = null & & cur ! = - 1 ) ; / / nextSetBit returns - 1 when none is found 
 return ret ; 
 } 
 @ @ - 259 , 7 + 277 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 V oldEntry = getRaw ( key ) ; 
 if ( oldEntry = = value ) / / already registered , return prev registration ' s id 
 { 
 - FMLLog . bigWarning ( " The object { } has been registered twice for the same name { } . " , value , key ) ; 
 + FMLLog . bigWarning ( " Registry { } : The object { } has been registered twice for the same name { } . " , this . superType . getSimpleName ( ) , value , key ) ; 
 return this . getID ( value ) ; 
 } 
 if ( oldEntry ! = null ) / / duplicate name 
 @ @ - 268 , 10 + 286 , 9 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 throw new IllegalArgumentException ( String . format ( " The name % s has been registered twice , for % s and % s . " , key , getRaw ( key ) , value ) ) ; 
 if ( owner = = null ) 
 throw new IllegalStateException ( String . format ( " Could not determine owner for the override on % s . Value : % s " , key , value ) ) ; 
 - this . override _ owners . put ( new OverrideOwner ( owner , key ) , value ) ; 
 + if ( DEBUG ) 
 + FMLLog . log . debug ( " Registry { } Override : { } { } - > { } " , this . superType . getSimpleName ( ) , key , oldEntry , value ) ; 
 idToUse = this . getID ( oldEntry ) ; 
 - if ( ! this . override _ owners . containsValue ( oldEntry ) ) 
 - this . override _ owners . put ( new OverrideOwner ( key . getResourceDomain ( ) , key ) , oldEntry ) ; 
 } 
 
 Integer foundId = this . ids . inverse ( ) . get ( value ) ; / / Is this ever possible to trigger with otherThing being different ? 
 @ @ - 294 , 26 + 311 , 29 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 this . names . put ( key , value ) ; 
 this . ids . put ( idToUse , value ) ; 
 this . availabilityMap . set ( idToUse ) ; 
 + this . owners . put ( new OverrideOwner ( owner = = null ? key . getResourceDomain ( ) : owner , key ) , value ) ; 
 
 if ( isDelegated ) 
 { 
 getDelegate ( value ) . setName ( key ) ; 
 if ( oldEntry ! = null ) 
 { 
 - this . overrides . put ( key , oldEntry ) ; 
 + if ( ! this . overrides . get ( key ) . contains ( oldEntry ) ) 
 + this . overrides . put ( key , oldEntry ) ; 
 + this . overrides . get ( key ) . remove ( value ) ; 
 if ( this . stage = = RegistryManager . ACTIVE ) 
 getDelegate ( oldEntry ) . changeReference ( value ) ; 
 } 
 } 
 
 if ( this . add ! = null ) 
 - this . add . onAdd ( this , this . stage , idToUse , value ) ; 
 + this . add . onAdd ( this , this . stage , idToUse , value , oldEntry ) ; 
 
 if ( this . dummies . remove ( key ) & & DEBUG ) 
 - FMLLog . log . debug ( " Registry Dummy Remove : { } " , key ) ; 
 + FMLLog . log . debug ( " Registry { } Dummy Remove : { } " , this . superType . getSimpleName ( ) , key ) ; 
 
 if ( DEBUG ) 
 - FMLLog . log . trace ( " Registry add : { } { } { } ( req . id { } ) " , key , idToUse , value , id ) ; 
 + FMLLog . log . trace ( " Registry { } add : { } { } { } ( req . id { } ) " , this . superType . getSimpleName ( ) , key , idToUse , value , id ) ; 
 
 return idToUse ; 
 } 
 @ @ - 342 , 7 + 362 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 throw new IllegalStateException ( String . format ( " Attempted to register the alias % s - > % s to late " , from , to ) ) ; 
 this . aliases . put ( from , to ) ; 
 if ( DEBUG ) 
 - FMLLog . log . trace ( " Registry alias : { } - > { } " , from , to ) ; 
 + FMLLog . log . trace ( " Registry { } alias : { } - > { } " , this . superType . getSimpleName ( ) , from , to ) ; 
 } 
 
 void addDummy ( ResourceLocation key ) 
 @ @ - 351 , 7 + 371 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 throw new IllegalStateException ( String . format ( " Attempted to register the dummy % s to late " , key ) ) ; 
 this . dummies . add ( key ) ; 
 if ( DEBUG ) 
 - FMLLog . log . trace ( " Registry dummy : { } " , key ) ; 
 + FMLLog . log . trace ( " Registry { } dummy : { } " , this . superType . getSimpleName ( ) , key ) ; 
 } 
 
 private RegistryDelegate < V > getDelegate ( V thing ) 
 @ @ - 431 , 6 + 451 , 10 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 void sync ( ResourceLocation name , ForgeRegistry < V > from ) 
 { 
 + if ( DEBUG ) 
 + FMLLog . log . debug ( " Registry { } Sync : { } - > { } " , this . superType . getSimpleName ( ) , this . stage . getName ( ) , from . stage . getName ( ) ) ; 
 + if ( this = = from ) 
 + throw new IllegalArgumentException ( " WTF We are the same ! ? ! ? ! " ) ; 
 if ( from . superType ! = this . superType ) 
 throw new IllegalArgumentException ( " Attempted to copy to incompatible registry : " + name + " " + from . superType + " - > " + this . superType ) ; 
 
 @ @ - 451 , 8 + 475 , 8 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 this . names . clear ( ) ; 
 this . availabilityMap . clear ( 0 , this . availabilityMap . length ( ) ) ; 
 this . defaultValue = null ; 
 - this . override _ owners . clear ( ) ; 
 - this . override _ owners . putAll ( from . override _ owners ) ; 
 + this . overrides . clear ( ) ; 
 + this . owners . clear ( ) ; 
 
 boolean errored = false ; 
 
 @ @ - 465 , 7 + 489 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 int realId = add ( id , entry . getValue ( ) ) ; 
 if ( id ! = realId & & id ! = - 1 ) 
 { 
 - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; 
 + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , id , realId ) ; 
 errored = true ; 
 } 
 } 
 @ @ - 474 , 17 + 498 , 17 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 overrides . add ( entry . getValue ( ) ) ; 
 for ( V value : overrides ) 
 { 
 - OverrideOwner owner = from . override _ owners . inverse ( ) . get ( value ) ; 
 + OverrideOwner owner = from . owners . inverse ( ) . get ( value ) ; 
 if ( owner = = null ) 
 { 
 - FMLLog . log . warn ( " Registered override did not have an associated owner object . Name : { } Type : { } Value : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; 
 + FMLLog . log . warn ( " Registry { } : Override did not have an associated owner object . Name : { } Value : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , value ) ; 
 errored = true ; 
 continue ; 
 } 
 int realId = add ( id , value , owner . owner ) ; 
 if ( id ! = realId & & id ! = - 1 ) 
 { 
 - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; 
 + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , id , realId ) ; 
 errored = true ; 
 } 
 } 
 @ @ - 581 , 11 + 605 , 12 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 Collections . sort ( ids ) ; 
 
 FMLLog . log . trace ( " Registry Name : { } " , name ) ; 
 - ids . forEach ( id - > FMLLog . log . trace ( " Registry : { } { } { } " , id , getKey ( getValue ( id ) ) , getValue ( id ) ) ) ; 
 + ids . forEach ( id - > FMLLog . log . trace ( " Registry : { } { } { } " , id , getKey ( getValue ( id ) ) , getValue ( id ) ) ) ; 
 } 
 
 public void loadIds ( Map < ResourceLocation , Integer > ids , Map < ResourceLocation , String > overrides , Map < ResourceLocation , Integer > missing , Map < ResourceLocation , Integer [ ] > remapped , ForgeRegistry < V > old , ResourceLocation name ) 
 { 
 + Map < ResourceLocation , String > ovs = Maps . newHashMap ( overrides ) ; 
 for ( Map . Entry < ResourceLocation , Integer > entry : ids . entrySet ( ) ) 
 { 
 ResourceLocation itemName = entry . getKey ( ) ; 
 @ @ - 594 , 47 + 619 , 77 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 if ( currId = = - 1 ) 
 { 
 - FMLLog . log . info ( " Found a missing id from the world { } " , itemName ) ; 
 + FMLLog . log . info ( " Registry { } : Found a missing id from the world { } " , this . superType . getSimpleName ( ) , itemName ) ; 
 missing . put ( itemName , newId ) ; 
 continue ; / / no block / item - > nothing to add 
 } 
 else if ( currId ! = newId ) 
 { 
 - FMLLog . log . debug ( " Fixed { } id mismatch { } : { } ( init ) - > { } ( map ) . " , name , itemName , currId , newId ) ; 
 + FMLLog . log . debug ( " Registry { } : Fixed { } id mismatch { } : { } ( init ) - > { } ( map ) . " , this . superType . getSimpleName ( ) , name , itemName , currId , newId ) ; 
 remapped . put ( itemName , new Integer [ ] { currId , newId } ) ; 
 } 
 + 
 V obj = old . getRaw ( itemName ) ; 
 Preconditions . checkState ( obj ! = null , " objectKey has an ID but no object . Reflection / ASM hackery ? Registry bug ? " ) ; 
 
 + List < V > lst = Lists . newArrayList ( old . overrides . get ( itemName ) ) ; 
 String primaryName = null ; 
 - if ( ! overrides . containsKey ( itemName ) & & old . overrides . containsKey ( itemName ) ) 
 + if ( old . overrides . containsKey ( itemName ) ) 
 { 
 - obj = old . overrides . get ( itemName ) . iterator ( ) . next ( ) ; / / Get the first one in the list , Which should be the first one registered 
 - primaryName = old . override _ owners . inverse ( ) . get ( obj ) . owner ; 
 + if ( ! overrides . containsKey ( itemName ) ) 
 + { 
 + lst . add ( obj ) ; 
 + obj = old . overrides . get ( itemName ) . iterator ( ) . next ( ) ; / / Get the first one in the list , Which should be the first one registered 
 + primaryName = old . owners . inverse ( ) . get ( obj ) . owner ; 
 + } 
 + else 
 + primaryName = overrides . get ( itemName ) ; 
 } 
 - else 
 - primaryName = overrides . get ( itemName ) ; 
 
 - for ( V value : old . overrides . get ( itemName ) ) 
 + for ( V value : lst ) 
 { 
 - OverrideOwner owner = old . override _ owners . inverse ( ) . get ( value ) ; 
 + OverrideOwner owner = old . owners . inverse ( ) . get ( value ) ; 
 if ( owner = = null ) 
 { 
 - FMLLog . log . warn ( " Registered override did not have an associated owner object . Name : { } Type : { } Value : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; 
 + FMLLog . log . warn ( " Registry { } : Override did not have an associated owner object . Name : { } Value : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , value ) ; 
 continue ; 
 } 
 
 - if ( primaryName . equals ( owner . owner ) ) 
 + if ( primaryName . equals ( owner ) ) 
 continue ; 
 
 int realId = add ( newId , value , owner . owner ) ; 
 if ( newId ! = realId ) 
 - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; 
 + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , newId , realId ) ; 
 } 
 
 int realId = add ( newId , obj , primaryName = = null ? itemName . getResourceDomain ( ) : primaryName ) ; 
 if ( realId ! = newId ) 
 - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; 
 + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , newId , realId ) ; 
 + ovs . remove ( itemName ) ; 
 + } 
 + 
 + for ( Map . Entry < ResourceLocation , String > entry : ovs . entrySet ( ) ) 
 + { 
 + ResourceLocation itemName = entry . getKey ( ) ; 
 + String owner = entry . getValue ( ) ; 
 + String current = this . owners . inverse ( ) . get ( this . getRaw ( itemName ) ) . owner ; 
 + if ( ! owner . equals ( current ) ) 
 + { 
 + V _ new = this . owners . get ( new OverrideOwner ( owner , itemName ) ) ; 
 + if ( _ new = = null ) 
 + { 
 + FMLLog . log . warn ( " Registry { } : Skipping override for { } , Unknown owner { } " , this . superType . getSimpleName ( ) , itemName , owner ) ; 
 + continue ; 
 + } 
 + 
 + FMLLog . log . info ( " Registry { } : Activating override { } for { } " , this . superType . getSimpleName ( ) , owner , itemName ) ; 
 + 
 + int newId = this . getID ( itemName ) ; 
 + int realId = this . add ( newId , _ new , owner ) ; 
 + if ( newId ! = realId ) 
 + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , entry . getKey ( ) , newId , realId ) ; 
 + } 
 } 
 } 
 
 @ @ - 652 , 7 + 707 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 int realId = this . add ( id , dummy ) ; 
 if ( realId ! = id ) 
 - FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , dummy . getRegistryType ( ) . getName ( ) , id , realId ) ; 
 + FMLLog . log . warn ( " Registry { } : Object did not get ID it asked for . Name : { } Expected : { } Got : { } " , this . superType . getSimpleName ( ) , key , id , realId ) ; 
 this . dummies . add ( key ) ; 
 
 return true ; 
 @ @ - 676 , 7 + 731 , 10 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 for ( ResourceLocation key : this . overrides . keySet ( ) ) 
 { 
 V obj = this . names . get ( key ) ; 
 - ret . put ( key , this . override _ owners . inverse ( ) . get ( obj ) . owner ) ; 
 + OverrideOwner owner = this . owners . inverse ( ) . get ( obj ) ; 
 + if ( owner = = null & & DEBUG ) 
 + FMLLog . log . debug ( " Registry { } { } : Invalid override { } { } " , this . superType . getSimpleName ( ) , this . stage . getName ( ) , key , obj ) ; 
 + ret . put ( key , owner . owner ) ; 
 } 
 return ret ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index d3102f6 . . f4f557c 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 68 , 6 + 68 , 8 @ @ import java . util . function . BiConsumer ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Collectors ; 
 
 + import javax . annotation . Nullable ; 
 + 
 import org . apache . commons . lang3 . Validate ; 
 import org . apache . logging . log4j . Level ; 
 
 @ @ - 273 , 7 + 275 , 7 @ @ public class GameData 
 
 @ SuppressWarnings ( " deprecation " ) 
 @ Override 
 - public void onAdd ( IForgeRegistryInternal < Block > owner , RegistryManager stage , int id , Block block ) 
 + public void onAdd ( IForgeRegistryInternal < Block > owner , RegistryManager stage , int id , Block block , @ Nullable Block oldBlock ) 
 { 
 @ SuppressWarnings ( " unchecked " ) 
 ClearableObjectIntIdentityMap < IBlockState > blockstateMap = owner . getSlaveMap ( BLOCKSTATE _ TO _ ID , ClearableObjectIntIdentityMap . class ) ; 
 @ @ - 295 , 6 + 297 , 16 @ @ public class GameData 
 if ( usedMeta [ meta ] ) 
 blockstateMap . put ( block . getStateFromMeta ( meta ) , id < < 4 | meta ) ; / / Put the CORRECT thing ! 
 } 
 + 
 + 
 + if ( oldBlock ! = null ) 
 + { 
 + @ SuppressWarnings ( " unchecked " ) 
 + BiMap < Block , Item > blockToItem = owner . getSlaveMap ( BLOCK _ TO _ ITEM , BiMap . class ) ; 
 + Item item = blockToItem . get ( oldBlock ) ; 
 + if ( item ! = null ) 
 + blockToItem . forcePut ( block , item ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 342 , 7 + 354 , 7 @ @ public class GameData 
 static final ItemCallbacks INSTANCE = new ItemCallbacks ( ) ; 
 
 @ Override 
 - public void onAdd ( IForgeRegistryInternal < Item > owner , RegistryManager stage , int id , Item item ) 
 + public void onAdd ( IForgeRegistryInternal < Item > owner , RegistryManager stage , int id , Item item , @ Nullable Item oldItem ) 
 { 
 if ( item instanceof ItemBlock ) 
 { 
 @ @ - 381 , 7 + 393 , 7 @ @ public class GameData 
 static final EntityCallbacks INSTANCE = new EntityCallbacks ( ) ; 
 
 @ Override 
 - public void onAdd ( IForgeRegistryInternal < EntityEntry > owner , RegistryManager stage , int id , EntityEntry entry ) 
 + public void onAdd ( IForgeRegistryInternal < EntityEntry > owner , RegistryManager stage , int id , EntityEntry entry , @ Nullable EntityEntry oldEntry ) 
 { 
 if ( entry . getEgg ( ) ! = null ) 
 EntityList . ENTITY _ EGGS . put ( entry . getRegistryName ( ) , entry . getEgg ( ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java 
 index 16f1644 . . 313fbd4 100644 
 - - - a / src / main / java / net / minecraftforge / registries / IForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / IForgeRegistry . java 
 @ @ - 67 , 7 + 67 , 7 @ @ public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterab 
 * / 
 interface AddCallback < V extends IForgeRegistryEntry < V > > 
 { 
 - void onAdd ( IForgeRegistryInternal < V > owner , RegistryManager stage , int id , V obj ) ; 
 + void onAdd ( IForgeRegistryInternal < V > owner , RegistryManager stage , int id , V obj , @ Nullable V oldObj ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / registries / RegistryBuilder . java b / src / main / java / net / minecraftforge / registries / RegistryBuilder . java 
 index 70671ae . . 8bdfe7a 100644 
 - - - a / src / main / java / net / minecraftforge / registries / RegistryBuilder . java 
 + + + b / src / main / java / net / minecraftforge / registries / RegistryBuilder . java 
 @ @ - 143 , 10 + 143 , 10 @ @ public class RegistryBuilder < T extends IForgeRegistryEntry < T > > 
 if ( addCallback . size ( ) = = 1 ) 
 return addCallback . get ( 0 ) ; 
 
 - return ( owner , stage , id , obj ) - > 
 + return ( owner , stage , id , obj , old ) - > 
 { 
 for ( AddCallback < T > cb : this . addCallback ) 
 - cb . onAdd ( owner , stage , id , obj ) ; 
 + cb . onAdd ( owner , stage , id , obj , old ) ; 
 } ; 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / RegistryOverrideTest . java b / src / test / java / net / minecraftforge / debug / RegistryOverrideTest . java 
 new file mode 100644 
 index 0000000 . . 98d449b 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / RegistryOverrideTest . java 
 @ @ - 0 , 0 + 1 , 70 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . SoundType ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . util . math . AxisAlignedBB ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . util . text . TextComponentString ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + @ Mod ( modid = RegistryOverrideTest . MODID , version = " 1 . 0 " ) 
 + @ Mod . EventBusSubscriber 
 + public class RegistryOverrideTest 
 + { 
 + public static final String MODID = " registry _ override _ test " ; 
 + 
 + @ SubscribeEvent 
 + public static void registerBlocks ( RegistryEvent . Register < Block > event ) 
 + { 
 + event . getRegistry ( ) . register ( new BlockReplacement ( ) ) ; 
 + } 
 + 
 + private static class BlockReplacement extends Block 
 + { 
 + AxisAlignedBB BB = FULL _ BLOCK _ AABB . contract ( 0 . 1 , 0 , 0 . 1 ) ; 
 + private BlockReplacement ( ) 
 + { 
 + super ( Material . ROCK ) ; 
 + setRegistryName ( " minecraft " , " bookshelf " ) ; 
 + this . setHardness ( 1 . 5F ) ; 
 + this . setSoundType ( SoundType . STONE ) . setUnlocalizedName ( " bookshelf " ) ; 
 + this . setCreativeTab ( CreativeTabs . BUILDING _ BLOCKS ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " BlockReplacement { " + this . getRegistryName ( ) + " } " ; 
 + } 
 + 
 + @ Override 
 + public void onBlockClicked ( World worldIn , BlockPos pos , EntityPlayer playerIn ) 
 + { 
 + playerIn . sendMessage ( new TextComponentString ( " Debug Override Click ! " ) ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index 58575ce . . b1c3c0f 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 666 , 7 + 666 , 7 @ @ public class CraftingHelper { 
 } 
 catch ( URISyntaxException e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Error finding Minecraft jar : " + e . toString ( ) ) ; 
 + FMLLog . log . error ( " Error finding Minecraft jar : " , e ) ; 
 return false ; 
 } 
 } 
 @ @ - 681 , 7 + 681 , 7 @ @ public class CraftingHelper { 
 } 
 catch ( IOException e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Error loading FileSystem from jar : " + e . toString ( ) ) ; 
 + FMLLog . log . error ( " Error loading FileSystem from jar : " , e ) ; 
 return false ; 
 } 
 } 
 @ @ - 704 , 7 + 704 , 7 @ @ public class CraftingHelper { 
 } 
 catch ( IOException e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Error loading _ constants . json : " + e . toString ( ) ) ; 
 + FMLLog . log . error ( " Error loading _ constants . json : " , e ) ; 
 return false ; 
 } 
 } 
 @ @ - 716 , 7 + 716 , 7 @ @ public class CraftingHelper { 
 } 
 catch ( IOException e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Error iterating recipes for : " + ctx . getModId ( ) ) ; 
 + FMLLog . log . error ( " Error iterating recipes for : { } " , ctx . getModId ( ) , e ) ; 
 return false ; 
 } 
 
 @ @ - 742 , 12 + 742 , 12 @ @ public class CraftingHelper { 
 } 
 catch ( JsonParseException e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Parsing error loading recipe " + key ) ; 
 + FMLLog . log . error ( " Parsing error loading recipe { } " , key , e ) ; 
 return false ; 
 } 
 catch ( IOException e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Couldn ' t read recipe " + key + " from " + f ) ; 
 + FMLLog . log . error ( " Couldn ' t read recipe { } from { } " , key , f , e ) ; 
 return false ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / handshake / FMLHandshakeClientState . java b / src / main / java / net / minecraftforge / fml / common / network / handshake / FMLHandshakeClientState . java 
 index 312943d . . c653bbf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / handshake / FMLHandshakeClientState . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / handshake / FMLHandshakeClientState . java 
 @ @ - 146 , 7 + 146 , 7 @ @ enum FMLHandshakeClientState implements IHandshakeState < FMLHandshakeClientState > 
 NetworkDispatcher dispatcher = ctx . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; 
 dispatcher . rejectHandshake ( " Fatally missing blocks and items " ) ; 
 FMLLog . log . fatal ( " Failed to connect to server : there are { } missing blocks and items " , locallyMissing . size ( ) ) ; 
 - locallyMissing . asMap ( ) . forEach ( ( key , value ) - > FMLLog . log . debug ( " Missing % s Entries : { } " , key , value ) ) ; 
 + locallyMissing . asMap ( ) . forEach ( ( key , value ) - > FMLLog . log . debug ( " Missing { } Entries : { } " , key , value ) ) ; 
 return ERROR ; 
 } 
 ctx . writeAndFlush ( new FMLHandshakeMessage . HandshakeAck ( ordinal ( ) ) ) . addListener ( ChannelFutureListener . FIRE _ EXCEPTION _ ON _ FAILURE ) ; 
 diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 index 5dd95ec . . cadff98 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 + + + b / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 @ @ - 380 , 7 + 380 , 7 @ @ public class OreDictionary 
 matches = true ; 
 if ( oreName ! = null & & ! oreName . equals ( ent . getValue ( ) ) ) 
 { 
 - FMLLog . info ( " Invalid recipe found with multiple oredict ingredients in the same ingredient . . . " ) ; / / TODO : Write a dumper ? 
 + FMLLog . log . info ( " Invalid recipe found with multiple oredict ingredients in the same ingredient . . . " ) ; / / TODO : Write a dumper ? 
 skip = true ; 
 break ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 index 8f64241 . . c52d944 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 @ @ - 259 , 7 + 259 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 V oldEntry = getRaw ( key ) ; 
 if ( oldEntry = = value ) / / already registered , return prev registration ' s id 
 { 
 - FMLLog . bigWarning ( " The object % s has been registered twice for the same name % s . " , value , key ) ; 
 + FMLLog . bigWarning ( " The object { } has been registered twice for the same name { } . " , value , key ) ; 
 return this . getID ( value ) ; 
 } 
 if ( oldEntry ! = null ) / / duplicate name 
 @ @ - 310 , 10 + 310 , 10 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 this . add . onAdd ( this , this . stage , idToUse , value ) ; 
 
 if ( this . dummies . remove ( key ) & & DEBUG ) 
 - FMLLog . fine ( " Registry Dummy Remove : % s " , key ) ; 
 + FMLLog . log . debug ( " Registry Dummy Remove : { } " , key ) ; 
 
 if ( DEBUG ) 
 - FMLLog . finer ( " Registry add : % s % d % s ( req . id % d ) " , key , idToUse , value , id ) ; 
 + FMLLog . log . trace ( " Registry add : { } { } { } ( req . id { } ) " , key , idToUse , value , id ) ; 
 
 return idToUse ; 
 } 
 @ @ - 342 , 7 + 342 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 throw new IllegalStateException ( String . format ( " Attempted to register the alias % s - > % s to late " , from , to ) ) ; 
 this . aliases . put ( from , to ) ; 
 if ( DEBUG ) 
 - FMLLog . finer ( " Registry alias : % s - > % s " , from , to ) ; 
 + FMLLog . log . trace ( " Registry alias : { } - > { } " , from , to ) ; 
 } 
 
 void addDummy ( ResourceLocation key ) 
 @ @ - 351 , 7 + 351 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 throw new IllegalStateException ( String . format ( " Attempted to register the dummy % s to late " , key ) ) ; 
 this . dummies . add ( key ) ; 
 if ( DEBUG ) 
 - FMLLog . finer ( " Registry dummy : % s - > % s " , key ) ; 
 + FMLLog . log . trace ( " Registry dummy : { } " , key ) ; 
 } 
 
 private RegistryDelegate < V > getDelegate ( V thing ) 
 @ @ - 465 , 7 + 465 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 int realId = add ( id , entry . getValue ( ) ) ; 
 if ( id ! = realId & & id ! = - 1 ) 
 { 
 - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; 
 + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; 
 errored = true ; 
 } 
 } 
 @ @ - 477 , 14 + 477 , 14 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 OverrideOwner owner = from . override _ owners . inverse ( ) . get ( value ) ; 
 if ( owner = = null ) 
 { 
 - FMLLog . warning ( " Registered override did not have an associated owner object . Name : % s Type : % s Value : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; 
 + FMLLog . log . warn ( " Registered override did not have an associated owner object . Name : { } Type : { } Value : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; 
 errored = true ; 
 continue ; 
 } 
 int realId = add ( id , value , owner . owner ) ; 
 if ( id ! = realId & & id ! = - 1 ) 
 { 
 - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; 
 + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , id , realId ) ; 
 errored = true ; 
 } 
 } 
 @ @ - 580 , 8 + 580 , 8 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 Collections . sort ( ids ) ; 
 
 - FMLLog . finer ( " Registry Name : % s " , name ) ; 
 - ids . forEach ( id - > FMLLog . finer ( " Registry : % d % s % s " , id , getKey ( getValue ( id ) ) , getValue ( id ) ) ) ; 
 + FMLLog . log . trace ( " Registry Name : { } " , name ) ; 
 + ids . forEach ( id - > FMLLog . log . trace ( " Registry : { } { } { } " , id , getKey ( getValue ( id ) ) , getValue ( id ) ) ) ; 
 } 
 
 public void loadIds ( Map < ResourceLocation , Integer > ids , Map < ResourceLocation , String > overrides , Map < ResourceLocation , Integer > missing , Map < ResourceLocation , Integer [ ] > remapped , ForgeRegistry < V > old , ResourceLocation name ) 
 @ @ - 594 , 13 + 594 , 13 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 if ( currId = = - 1 ) 
 { 
 - FMLLog . info ( " Found a missing id from the world % s " , itemName ) ; 
 + FMLLog . log . info ( " Found a missing id from the world { } " , itemName ) ; 
 missing . put ( itemName , newId ) ; 
 continue ; / / no block / item - > nothing to add 
 } 
 else if ( currId ! = newId ) 
 { 
 - FMLLog . fine ( " Fixed % s id mismatch % s : % d ( init ) - > % d ( map ) . " , name , itemName , currId , newId ) ; 
 + FMLLog . log . debug ( " Fixed { } id mismatch { } : { } ( init ) - > { } ( map ) . " , name , itemName , currId , newId ) ; 
 remapped . put ( itemName , new Integer [ ] { currId , newId } ) ; 
 } 
 V obj = old . getRaw ( itemName ) ; 
 @ @ - 620 , 7 + 620 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 OverrideOwner owner = old . override _ owners . inverse ( ) . get ( value ) ; 
 if ( owner = = null ) 
 { 
 - FMLLog . warning ( " Registered override did not have an associated owner object . Name : % s Type : % s Value : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; 
 + FMLLog . log . warn ( " Registered override did not have an associated owner object . Name : { } Type : { } Value : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , value ) ; 
 continue ; 
 } 
 
 @ @ - 629 , 12 + 629 , 12 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 int realId = add ( newId , value , owner . owner ) ; 
 if ( newId ! = realId ) 
 - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; 
 + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; 
 } 
 
 int realId = add ( newId , obj , primaryName = = null ? itemName . getResourceDomain ( ) : primaryName ) ; 
 if ( realId ! = newId ) 
 - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; 
 + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , entry . getKey ( ) , this . getRegistrySuperType ( ) . getName ( ) , newId , realId ) ; 
 } 
 } 
 
 @ @ - 645 , 14 + 645 , 14 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 V dummy = this . dummyFactory . createDummy ( key ) ; 
 if ( DEBUG ) 
 - FMLLog . finer ( " Registry Dummy Add : % s % d - > % s " , key , id , dummy ) ; 
 + FMLLog . log . trace ( " Registry Dummy Add : { } { } - > { } " , key , id , dummy ) ; 
 
 / / It was blocked before so we need to unset the blocking map 
 this . availabilityMap . clear ( id ) ; 
 
 int realId = this . add ( id , dummy ) ; 
 if ( realId ! = id ) 
 - FMLLog . warning ( " Registered object did not get ID it asked for . Name : % s Type : % s Expected : % s Got : % s " , key , dummy . getRegistryType ( ) . getName ( ) , id , realId ) ; 
 + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , dummy . getRegistryType ( ) . getName ( ) , id , realId ) ; 
 this . dummies . add ( key ) ; 
 
 return true ; 
 @ @ - 699 , 7 + 699 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 void processMissingEvent ( ResourceLocation name , ForgeRegistry < V > pool , List < MissingMappings . Mapping < V > > mappings , Map < ResourceLocation , Integer > missing , Map < ResourceLocation , Integer [ ] > remaps , Collection < ResourceLocation > defaulted , Collection < ResourceLocation > failed ) 
 { 
 - FMLLog . fine ( " Processing missing event for % s : " , name ) ; 
 + FMLLog . log . debug ( " Processing missing event for { } : " , name ) ; 
 int ignored = 0 ; 
 
 for ( MissingMappings . Mapping < V > remap : mappings ) 
 @ @ - 711 , 19 + 711 , 19 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 / / entry re - mapped , finish the registration with the new name / object , but the old id 
 int currId = getID ( remap . getTarget ( ) ) ; 
 ResourceLocation newName = pool . getKey ( remap . getTarget ( ) ) ; 
 - FMLLog . fine ( " Remapping % s - > % s . " , remap . key , newName ) ; 
 + FMLLog . log . debug ( " Remapping { } - > { } . " , remap . key , newName ) ; 
 
 missing . remove ( remap . key ) ; 
 / / I don ' t think this will work , but I dont think it ever worked . . the item is already in the map with a different id . . . we want to fix that . . 
 int realId = this . add ( remap . id , remap . getTarget ( ) ) ; 
 if ( realId ! = remap . id ) 
 - FMLLog . warning ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , newName , this . getRegistrySuperType ( ) , remap . id , realId ) ; 
 + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , newName , this . getRegistrySuperType ( ) , remap . id , realId ) ; 
 this . addAlias ( remap . key , newName ) ; 
 
 
 if ( currId ! = realId ) 
 { 
 - FMLLog . info ( " Fixed id mismatch % s : % d ( init ) - > % d ( map ) . " , newName , currId , realId ) ; 
 + FMLLog . log . info ( " Fixed id mismatch { } : { } ( init ) - > { } ( map ) . " , newName , currId , realId ) ; 
 remaps . put ( newName , new Integer [ ] { currId , realId } ) ; 
 } 
 } 
 @ @ - 736 , 24 + 736 , 24 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 } 
 else if ( action = = MissingMappings . Action . IGNORE ) 
 { 
 - FMLLog . fine ( " Ignoring % s " , remap . key ) ; 
 + FMLLog . log . debug ( " Ignoring { } " , remap . key ) ; 
 ignored + + ; 
 } 
 else if ( action = = MissingMappings . Action . FAIL ) 
 { 
 - FMLLog . fine ( " Failing % s ! " , remap . key ) ; 
 + FMLLog . log . debug ( " Failing { } ! " , remap . key ) ; 
 failed . add ( remap . key ) ; 
 } 
 else if ( action = = MissingMappings . Action . WARN ) 
 { 
 - FMLLog . warning ( " % s may cause world breakage ! " , remap . key ) ; 
 + FMLLog . log . warn ( " { } may cause world breakage ! " , remap . key ) ; 
 } 
 this . block ( remap . id ) ; 
 } 
 } 
 
 if ( failed . isEmpty ( ) & & ignored > 0 ) 
 - FMLLog . fine ( " There were % d missing mappings that have been ignored " , ignored ) ; 
 + FMLLog . log . debug ( " There were { } missing mappings that have been ignored " , ignored ) ; 
 } 
 
 private static class OverrideOwner 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index eb6acd0 . . 4530100 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 112 , 7 + 112 , 7 @ @ public class GameData 
 { 
 if ( DISABLE _ VANILLA _ REGISTRIES ) 
 { 
 - FMLLog . bigWarning ( " DISABELING VANILLA REGISTRY CREATION AS PER SYSTEM VARIABLE SETTING ! forge . disableVanillaGameData " ) ; 
 + FMLLog . bigWarning ( " DISABLING VANILLA REGISTRY CREATION AS PER SYSTEM VARIABLE SETTING ! forge . disableVanillaGameData " ) ; 
 return ; 
 } 
 if ( hasInit ) 
 @ @ - 188 , 7 + 188 , 7 @ @ public class GameData 
 @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) 
 public static void vanillaSnapshot ( ) 
 { 
 - FMLLog . fine ( " Creating vanilla freeze snapshot " ) ; 
 + FMLLog . log . debug ( " Creating vanilla freeze snapshot " ) ; 
 for ( Map . Entry < ResourceLocation , ForgeRegistry < ? extends IForgeRegistryEntry < ? > > > r : RegistryManager . ACTIVE . registries . entrySet ( ) ) 
 { 
 final Class < ? extends IForgeRegistryEntry > clazz = RegistryManager . ACTIVE . getSuperType ( r . getKey ( ) ) ; 
 @ @ - 201 , 13 + 201 , 13 @ @ public class GameData 
 } ) ; 
 RegistryManager . VANILLA . registries . forEach ( LOCK _ VANILLA ) ; 
 RegistryManager . ACTIVE . registries . forEach ( LOCK _ VANILLA ) ; 
 - FMLLog . fine ( " Vanilla freeze snapshot created " ) ; 
 + FMLLog . log . debug ( " Vanilla freeze snapshot created " ) ; 
 } 
 
 @ SuppressWarnings ( { " rawtypes " , " unchecked " } ) 
 public static void freezeData ( ) 
 { 
 - FMLLog . fine ( " Freezing registries " ) ; 
 + FMLLog . log . debug ( " Freezing registries " ) ; 
 for ( Map . Entry < ResourceLocation , ForgeRegistry < ? extends IForgeRegistryEntry < ? > > > r : RegistryManager . ACTIVE . registries . entrySet ( ) ) 
 { 
 final Class < ? extends IForgeRegistryEntry > clazz = RegistryManager . ACTIVE . getSuperType ( r . getKey ( ) ) ; 
 @ @ - 219 , 7 + 219 , 7 @ @ public class GameData 
 reg . freeze ( ) ; 
 } ) ; 
 RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . freeze ( ) ) ; 
 - FMLLog . fine ( " All registries frozen " ) ; 
 + FMLLog . log . debug ( " All registries frozen " ) ; 
 } 
 
 @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) 
 @ @ - 227 , 12 + 227 , 12 @ @ public class GameData 
 { 
 if ( RegistryManager . FROZEN . registries . isEmpty ( ) ) 
 { 
 - FMLLog . warning ( " Can ' t revert to frozen GameData state without freezing first . " ) ; 
 + FMLLog . log . warn ( " Can ' t revert to frozen GameData state without freezing first . " ) ; 
 return ; 
 } 
 RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . resetDelegates ( ) ) ; 
 
 - FMLLog . fine ( " Reverting to frozen data state . " ) ; 
 + FMLLog . log . debug ( " Reverting to frozen data state . " ) ; 
 for ( Map . Entry < ResourceLocation , ForgeRegistry < ? extends IForgeRegistryEntry < ? > > > r : RegistryManager . ACTIVE . registries . entrySet ( ) ) 
 { 
 final Class < ? extends IForgeRegistryEntry > clazz = RegistryManager . ACTIVE . getSuperType ( r . getKey ( ) ) ; 
 @ @ - 243 , 16 + 243 , 16 @ @ public class GameData 
 
 / / the id mapping has reverted , ensure we sync up the object holders 
 ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 - FMLLog . fine ( " Frozen state restored . " ) ; 
 + FMLLog . log . debug ( " Frozen state restored . " ) ; 
 } 
 
 @ SuppressWarnings ( { " rawtypes " , " unchecked " } ) 
 public static void revert ( RegistryManager state , ResourceLocation registry , boolean lock ) 
 { 
 - FMLLog . fine ( " Reverting { } to { } " , registry , state . getName ( ) ) ; 
 + FMLLog . log . debug ( " Reverting { } to { } " , registry , state . getName ( ) ) ; 
 final Class < ? extends IForgeRegistryEntry > clazz = RegistryManager . ACTIVE . getSuperType ( registry ) ; 
 loadRegistry ( registry , RegistryManager . FROZEN , RegistryManager . ACTIVE , clazz , lock ) ; 
 - FMLLog . fine ( " Reverting complete " ) ; 
 + FMLLog . log . debug ( " Reverting complete " ) ; 
 } 
 
 / / Lets us clear the map so we can rebuild it . 
 @ @ - 431 , 7 + 431 , 7 @ @ public class GameData 
 @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) 
 public static Multimap < ResourceLocation , ResourceLocation > injectSnapshot ( Map < ResourceLocation , ForgeRegistry . Snapshot > snapshot , boolean injectFrozenData , boolean isLocalWorld ) 
 { 
 - FMLLog . info ( " Injecting existing registry data into this % s instance " , FMLCommonHandler . instance ( ) . getEffectiveSide ( ) . isServer ( ) ? " server " : " client " ) ; 
 + FMLLog . log . info ( " Injecting existing registry data into this { } instance " , FMLCommonHandler . instance ( ) . getEffectiveSide ( ) . isServer ( ) ? " server " : " client " ) ; 
 RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . validateContent ( name ) ) ; 
 RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . dump ( name ) ) ; 
 RegistryManager . ACTIVE . registries . forEach ( ( name , reg ) - > reg . resetDelegates ( ) ) ; 
 @ @ - 481 , 14 + 481 , 14 @ @ public class GameData 
 else if ( isLocalWorld ) 
 { 
 if ( ForgeRegistry . DEBUG ) 
 - FMLLog . log ( Level . DEBUG , " Registry % s : Resuscitating dummy entry % s " , e . getKey ( ) , dummy ) ; 
 + FMLLog . log . debug ( " Registry { } : Resuscitating dummy entry { } " , e . getKey ( ) , dummy ) ; 
 } 
 else 
 { 
 / / The server believes this is a dummy block identity , but we seem to have one locally . This is likely a conflict 
 / / in mod setup - Mark this entry as a dummy 
 int id = reg . getID ( dummy ) ; 
 - FMLLog . log ( Level . WARN , " Registry $ s : The ID % d is currently locally mapped - it will be replaced with a dummy for this session " , e . getKey ( ) , id ) ; 
 + FMLLog . log . warn ( " Registry { } : The ID { } is currently locally mapped - it will be replaced with a dummy for this session " , e . getKey ( ) , id ) ; 
 reg . markDummy ( dummy , id ) ; 
 } 
 } ) ; 
 @ @ - 497 , 7 + 497 , 7 @ @ public class GameData 
 int count = missing . values ( ) . stream ( ) . mapToInt ( e - > e . size ( ) ) . sum ( ) ; 
 if ( count > 0 ) 
 { 
 - FMLLog . fine ( " There are % d mappings missing - attempting a mod remap " , count ) ; 
 + FMLLog . log . debug ( " There are { } mappings missing - attempting a mod remap " , count ) ; 
 Multimap < ResourceLocation , ResourceLocation > defaulted = ArrayListMultimap . create ( ) ; 
 Multimap < ResourceLocation , ResourceLocation > failed = ArrayListMultimap . create ( ) ; 
 
 @ @ - 511 , 9 + 511 , 9 @ @ public class GameData 
 List < MissingMappings . Mapping < ? > > lst = event . getAllMappings ( ) . stream ( ) . filter ( e - > e . getAction ( ) = = MissingMappings . Action . DEFAULT ) . collect ( Collectors . toList ( ) ) ; 
 if ( ! lst . isEmpty ( ) ) 
 { 
 - FMLLog . severe ( " Unidentified mapping from registry % s " , name ) ; 
 + FMLLog . log . error ( " Unidentified mapping from registry { } " , name ) ; 
 lst . forEach ( map - > { 
 - FMLLog . severe ( " % s : % d " , map . key , map . id ) ; 
 + FMLLog . log . error ( " { } : { } " , map . key , map . id ) ; 
 if ( ! isLocalWorld ) 
 defaulted . put ( name , map . key ) ; 
 } ) ; 
 @ @ - 555 , 7 + 555 , 7 @ @ public class GameData 
 else 
 { 
 for ( int x = 0 ; x < 10 ; x + + ) 
 - FMLLog . severe ( " ! ! ! ! ! ! ! ! ! ! UPDATING WORLD WITHOUT DOING BACKUP ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! " ) ; 
 + FMLLog . log . error ( " ! ! ! ! ! ! ! ! ! ! UPDATING WORLD WITHOUT DOING BACKUP ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! " ) ; 
 } 
 } 
 catch ( IOException e ) 
 @ @ - 568 , 7 + 568 , 7 @ @ public class GameData 
 if ( ! defaulted . isEmpty ( ) ) 
 { 
 if ( isLocalWorld ) 
 - FMLLog . severe ( " There are unidentified mappings in this world - we are going to attempt to process anyway " ) ; 
 + FMLLog . log . error ( " There are unidentified mappings in this world - we are going to attempt to process anyway " ) ; 
 } 
 
 } 
 diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java 
 index 855eff1 . . de4e5fb 100644 
 - - - a / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java 
 + + + b / src / main / java / net / minecraftforge / registries / NamespacedDefaultedWrapper . java 
 @ @ - 39 , 7 + 39 , 7 @ @ class NamespacedDefaultedWrapper < V extends IForgeRegistryEntry < V > > extends Regis 
 
 int realId = this . delegate . add ( id , value ) ; 
 if ( realId ! = id & & id ! = - 1 ) 
 - FMLLog . warning ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , value . getRegistryType ( ) . getName ( ) , id , realId ) ; 
 + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , value . getRegistryType ( ) . getName ( ) , id , realId ) ; 
 } 
 
 @ Override 
 @ @ - 48 , 6 + 48 , 7 @ @ class NamespacedDefaultedWrapper < V extends IForgeRegistryEntry < V > > extends Regis 
 register ( - 1 , key , value ) ; 
 } 
 
 + @ Override 
 public void validateKey ( ) 
 { 
 this . delegate . validateKey ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java 
 index 2d42fce . . b501509 100644 
 - - - a / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java 
 + + + b / src / main / java / net / minecraftforge / registries / NamespacedWrapper . java 
 @ @ - 37 , 7 + 37 , 7 @ @ class NamespacedWrapper < V extends IForgeRegistryEntry < V > > extends RegistryNamesp 
 
 int realId = this . delegate . add ( id , value ) ; 
 if ( realId ! = id & & id ! = - 1 ) 
 - FMLLog . warning ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , value . getRegistryType ( ) . getName ( ) , id , realId ) ; 
 + FMLLog . log . warn ( " Registered object did not get ID it asked for . Name : { } Type : { } Expected : { } Got : { } " , key , value . getRegistryType ( ) . getName ( ) , id , realId ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / net / minecraftforge / registries / RegistryManager . java b / src / main / java / net / minecraftforge / registries / RegistryManager . java 
 index bf1cbe1 . . 0fc891e 100644 
 - - - a / src / main / java / net / minecraftforge / registries / RegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / registries / RegistryManager . java 
 @ @ - 84 , 7 + 84 , 7 @ @ public class RegistryManager 
 if ( ! overlappedTypes . isEmpty ( ) ) 
 { 
 Class < ? > foundType = overlappedTypes . iterator ( ) . next ( ) ; 
 - FMLLog . severe ( " Found existing registry of type % s named % s , you cannot create a new registry ( % s ) with type % s , as % s has a parent of that type " , foundType , superTypes . get ( foundType ) , name , type , type ) ; 
 + FMLLog . log . error ( " Found existing registry of type { } named { } , you cannot create a new registry ( { } ) with type { } , as { } has a parent of that type " , foundType , superTypes . get ( foundType ) , name , type , type ) ; 
 throw new IllegalArgumentException ( " Duplicate registry parent type found - you can only have one registry for a particular super type " ) ; 
 } 
 ForgeRegistry < V > reg = new ForgeRegistry < V > ( type , defaultKey , min , max , create , add , clear , this , allowOverrides , isModifiable , dummyFactory ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java b / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java 
 index 3e0ffa5 . . 4d3342e 100644 
 - - - a / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java 
 @ @ - 25 , 7 + 25 , 7 @ @ public class CraftingSystemTest 
 @ SubscribeEvent 
 public static void registerRecipes ( RegistryEvent . Register < IRecipe > event ) 
 { 
 - FMLLog . info ( " Registering Test Recipes : " ) ; 
 + FMLLog . log . info ( " Registering Test Recipes : " ) ; 
 } 
 
 public static class IngredientFactory implements IIngredientFactory
