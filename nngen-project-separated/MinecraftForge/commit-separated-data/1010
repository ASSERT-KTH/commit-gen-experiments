BLEU SCORE: 0.04767707020457096

TEST MSG: Fixed compile issues with irtimaled ' s PR .
GENERATED MSG: Copy fortress . dat from vanilla location

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java <nl> index c4d6efe . . d9f72f8 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java <nl> + + + b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java <nl> @ @ - 4 , 6 + 4 , 8 @ @ import java . io . File ; <nl> import java . io . IOException ; <nl> import java . nio . file . Files ; <nl> <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> import net . minecraft . world . chunk . storage . IChunkLoader ; <nl> import net . minecraft . world . storage . IPlayerFileData ; <nl> import net . minecraft . world . storage . ISaveHandler ; <nl> @ @ - 47 , 7 + 49 , 7 @ @ public class WorldSpecificSaveHandler implements ISaveHandler <nl> dataDir . mkdirs ( ) ; <nl> } <nl> File file = new File ( dataDir , name + " . dat " ) ; <nl> - if ( ! file . exists ( ) & & name . equalsIgnoreCase ( " FORTRESS " ) ) <nl> + if ( ! file . exists ( ) & & name . equalsIgnoreCase ( " FORTRESS " ) & & world . provider . getDimensionId ( ) = = - 1 ) / / Only copy over the fortress . dat for the vanilla nether . <nl> { <nl> File parentFile = parent . getMapFileFromName ( name ) ; <nl> if ( parentFile . exists ( ) )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java <nl> index 0dd9d6c . . c4d6efe 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java <nl> + + + b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java <nl> @ @ - 1 , 6 + 1 , 8 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . nio . file . Files ; <nl> <nl> import net . minecraft . world . chunk . storage . IChunkLoader ; <nl> import net . minecraft . world . storage . IPlayerFileData ; <nl> @ @ - 10 , 6 + 12 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . world . storage . WorldInfo ; <nl> import net . minecraft . world . WorldProvider ; <nl> import net . minecraft . world . WorldServer ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> / / Class used internally to provide the world specific data directories . <nl> <nl> @ @ - 43 , 7 + 46 , 23 @ @ public class WorldSpecificSaveHandler implements ISaveHandler <nl> dataDir = new File ( world . getChunkSaveLocation ( ) , " data " ) ; <nl> dataDir . mkdirs ( ) ; <nl> } <nl> - return new File ( dataDir , name + " . dat " ) ; <nl> + File file = new File ( dataDir , name + " . dat " ) ; <nl> + if ( ! file . exists ( ) & & name . equalsIgnoreCase ( " FORTRESS " ) ) <nl> + { <nl> + File parentFile = parent . getMapFileFromName ( name ) ; <nl> + if ( parentFile . exists ( ) ) <nl> + { <nl> + try <nl> + { <nl> + Files . copy ( parentFile . toPath ( ) , file . toPath ( ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " A critical error occured copying fortress . dat to world specific dat folder - new file will be created . " ) ; <nl> + } <nl> + } <nl> + } <nl> + return file ; <nl> } <nl> <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java 
 index c4d6efe . . d9f72f8 100644 
 - - - a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java 
 + + + b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java 
 @ @ - 4 , 6 + 4 , 8 @ @ import java . io . File ; 
 import java . io . IOException ; 
 import java . nio . file . Files ; 
 
 + import org . apache . logging . log4j . Level ; 
 + 
 import net . minecraft . world . chunk . storage . IChunkLoader ; 
 import net . minecraft . world . storage . IPlayerFileData ; 
 import net . minecraft . world . storage . ISaveHandler ; 
 @ @ - 47 , 7 + 49 , 7 @ @ public class WorldSpecificSaveHandler implements ISaveHandler 
 dataDir . mkdirs ( ) ; 
 } 
 File file = new File ( dataDir , name + " . dat " ) ; 
 - if ( ! file . exists ( ) & & name . equalsIgnoreCase ( " FORTRESS " ) ) 
 + if ( ! file . exists ( ) & & name . equalsIgnoreCase ( " FORTRESS " ) & & world . provider . getDimensionId ( ) = = - 1 ) / / Only copy over the fortress . dat for the vanilla nether . 
 { 
 File parentFile = parent . getMapFileFromName ( name ) ; 
 if ( parentFile . exists ( ) )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java 
 index 0dd9d6c . . c4d6efe 100644 
 - - - a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java 
 + + + b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java 
 @ @ - 1 , 6 + 1 , 8 @ @ 
 package net . minecraftforge . common ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 + import java . nio . file . Files ; 
 
 import net . minecraft . world . chunk . storage . IChunkLoader ; 
 import net . minecraft . world . storage . IPlayerFileData ; 
 @ @ - 10 , 6 + 12 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . world . storage . WorldInfo ; 
 import net . minecraft . world . WorldProvider ; 
 import net . minecraft . world . WorldServer ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 
 / / Class used internally to provide the world specific data directories . 
 
 @ @ - 43 , 7 + 46 , 23 @ @ public class WorldSpecificSaveHandler implements ISaveHandler 
 dataDir = new File ( world . getChunkSaveLocation ( ) , " data " ) ; 
 dataDir . mkdirs ( ) ; 
 } 
 - return new File ( dataDir , name + " . dat " ) ; 
 + File file = new File ( dataDir , name + " . dat " ) ; 
 + if ( ! file . exists ( ) & & name . equalsIgnoreCase ( " FORTRESS " ) ) 
 + { 
 + File parentFile = parent . getMapFileFromName ( name ) ; 
 + if ( parentFile . exists ( ) ) 
 + { 
 + try 
 + { 
 + Files . copy ( parentFile . toPath ( ) , file . toPath ( ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " A critical error occured copying fortress . dat to world specific dat folder - new file will be created . " ) ; 
 + } 
 + } 
 + } 
 + return file ; 
 } 
 
 }
