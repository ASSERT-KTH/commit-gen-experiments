BLEU SCORE: 0.011836187458972374

TEST MSG: Remove texture loads from SimpleModelFontRenderer
GENERATED MSG: Added a default white texture ; Fixed B3DLoader crashing when the brush has empty texture specified

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java b / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java <nl> index ca7a2e2 . . 2bf60fd 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java <nl> @ @ - 14 , 7 + 14 , 6 @ @ import net . minecraft . client . gui . FontRenderer ; <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . texture . TextureManager ; <nl> - import net . minecraft . client . renderer . texture . TextureMap ; <nl> import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> import net . minecraft . client . resources . IResourceManager ; <nl> import net . minecraft . client . settings . GameSettings ; <nl> @ @ - 36 , 7 + 35 , 6 @ @ public abstract class SimpleModelFontRenderer extends FontRenderer { <nl> public SimpleModelFontRenderer ( GameSettings settings , ResourceLocation font , TextureManager manager , boolean isUnicode , Matrix4f matrix , VertexFormat format ) <nl> { <nl> super ( settings , font , manager , isUnicode ) ; <nl> - manager . bindTexture ( TextureMap . LOCATION _ BLOCKS _ TEXTURE ) ; <nl> this . matrix = new Matrix4f ( matrix ) ; <nl> Matrix3f nm = new Matrix3f ( ) ; <nl> this . matrix . getRotationScale ( nm ) ; <nl> @ @ - 173 , 6 + 171 , 11 @ @ public abstract class SimpleModelFontRenderer extends FontRenderer { <nl> { <nl> } <nl> <nl> + @ Override <nl> + protected void bindTexture ( ResourceLocation location ) <nl> + { <nl> + } <nl> + <nl> public ImmutableList < BakedQuad > build ( ) <nl> { <nl> ImmutableList < BakedQuad > ret = builder . build ( ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 3f51eae . . 6364608 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 1 , 7 + 1 , 9 @ @ <nl> package net . minecraftforge . client . model ; <nl> <nl> + import java . awt . image . BufferedImage ; <nl> import java . io . IOException ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> @ @ - 13 , 6 + 15 , 7 @ @ import java . util . Set ; <nl> <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . renderer . BlockModelShapes ; <nl> import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> import net . minecraft . client . renderer . ItemModelMesher ; <nl> @ @ - 37 , 7 + 40 , 10 @ @ import net . minecraft . client . resources . model . WeightedBakedModel ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . util . IRegistry ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . event . TextureStitchEvent ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> import net . minecraftforge . fml . common . registry . GameData ; <nl> import net . minecraftforge . fml . common . registry . RegistryDelegate ; <nl> <nl> @ @ - 71 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery <nl> super ( manager , map , shapes ) ; <nl> VanillaLoader . instance . setLoader ( this ) ; <nl> ModelLoaderRegistry . clearModelCache ( ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( White . instance ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 450 , 6 + 457 , 40 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + public static class White extends TextureAtlasSprite <nl> + { <nl> + public static ResourceLocation loc = new ResourceLocation ( " white " ) ; <nl> + public static White instance = new White ( ) ; <nl> + <nl> + protected White ( ) <nl> + { <nl> + super ( loc . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasCustomLoader ( IResourceManager manager , ResourceLocation location ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean load ( IResourceManager manager , ResourceLocation location ) <nl> + { <nl> + BufferedImage image = new BufferedImage ( 1 , 1 , BufferedImage . TYPE _ INT _ ARGB ) ; <nl> + image . setRGB ( 0 , 0 , 0xFFFFFFFF ) ; <nl> + BufferedImage [ ] images = new BufferedImage [ Minecraft . getMinecraft ( ) . gameSettings . mipmapLevels + 1 ] ; <nl> + images [ 0 ] = image ; <nl> + loadSprite ( images , null ) ; <nl> + return false ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void handleStitchPre ( TextureStitchEvent . Pre event ) <nl> + { <nl> + event . map . setTextureEntry ( White . loc . toString ( ) , White . instance ) ; <nl> + } <nl> + } <nl> + <nl> public void onPostBakeEvent ( IRegistry modelRegistry ) <nl> { <nl> for ( ModelResourceLocation missing : missingVariants ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index 0895dd7 . . ca0f3fb 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraftforge . client . model . IModelPart ; <nl> import net . minecraftforge . client . model . IModelState ; <nl> import net . minecraftforge . client . model . ISmartBlockModel ; <nl> import net . minecraftforge . client . model . ISmartItemModel ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . client . model . ModelLoaderRegistry ; <nl> import net . minecraftforge . client . model . TRSRTransformation ; <nl> import net . minecraftforge . client . model . b3d . B3DModel . Animation ; <nl> @ @ - 455 , 6 + 456 , 7 @ @ public class B3DLoader implements ICustomModelLoader <nl> List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; <nl> TextureAtlasSprite sprite ; <nl> if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; <nl> + else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; <nl> else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; <nl> putVertexData ( f . getV1 ( ) , sprite ) ; <nl> putVertexData ( f . getV2 ( ) , sprite ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java <nl> index d020223 . . 070e01f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java <nl> @ @ - 106 , 7 + 106 , 7 @ @ public class B3DModel <nl> logger . error ( String . format ( " texture % s is out of range " , texture ) ) ; <nl> return null ; <nl> } <nl> - else if ( texture = = - 1 ) return null ; <nl> + else if ( texture = = - 1 ) return Texture . White ; <nl> return textures . get ( texture ) ; <nl> } <nl> <nl> @ @ - 482 , 6 + 482 , 7 @ @ public class B3DModel <nl> <nl> public static class Texture <nl> { <nl> + public static Texture White = new Texture ( " builtin / white " , 0 , 0 , new Vector2f ( 0 , 0 ) , new Vector2f ( 1 , 1 ) , 0 ) ; <nl> private final String path ; <nl> private final int flags ; <nl> private final int blend ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java b / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java 
 index ca7a2e2 . . 2bf60fd 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java 
 + + + b / src / main / java / net / minecraftforge / client / model / SimpleModelFontRenderer . java 
 @ @ - 14 , 7 + 14 , 6 @ @ import net . minecraft . client . gui . FontRenderer ; 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . texture . TextureManager ; 
 - import net . minecraft . client . renderer . texture . TextureMap ; 
 import net . minecraft . client . renderer . vertex . VertexFormat ; 
 import net . minecraft . client . resources . IResourceManager ; 
 import net . minecraft . client . settings . GameSettings ; 
 @ @ - 36 , 7 + 35 , 6 @ @ public abstract class SimpleModelFontRenderer extends FontRenderer { 
 public SimpleModelFontRenderer ( GameSettings settings , ResourceLocation font , TextureManager manager , boolean isUnicode , Matrix4f matrix , VertexFormat format ) 
 { 
 super ( settings , font , manager , isUnicode ) ; 
 - manager . bindTexture ( TextureMap . LOCATION _ BLOCKS _ TEXTURE ) ; 
 this . matrix = new Matrix4f ( matrix ) ; 
 Matrix3f nm = new Matrix3f ( ) ; 
 this . matrix . getRotationScale ( nm ) ; 
 @ @ - 173 , 6 + 171 , 11 @ @ public abstract class SimpleModelFontRenderer extends FontRenderer { 
 { 
 } 
 
 + @ Override 
 + protected void bindTexture ( ResourceLocation location ) 
 + { 
 + } 
 + 
 public ImmutableList < BakedQuad > build ( ) 
 { 
 ImmutableList < BakedQuad > ret = builder . build ( ) ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 3f51eae . . 6364608 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 1 , 7 + 1 , 9 @ @ 
 package net . minecraftforge . client . model ; 
 
 + import java . awt . image . BufferedImage ; 
 import java . io . IOException ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 @ @ - 13 , 6 + 15 , 7 @ @ import java . util . Set ; 
 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . renderer . BlockModelShapes ; 
 import net . minecraft . client . renderer . ItemMeshDefinition ; 
 import net . minecraft . client . renderer . ItemModelMesher ; 
 @ @ - 37 , 7 + 40 , 10 @ @ import net . minecraft . client . resources . model . WeightedBakedModel ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . util . IRegistry ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . event . TextureStitchEvent ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 import net . minecraftforge . fml . common . registry . GameData ; 
 import net . minecraftforge . fml . common . registry . RegistryDelegate ; 
 
 @ @ - 71 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery 
 super ( manager , map , shapes ) ; 
 VanillaLoader . instance . setLoader ( this ) ; 
 ModelLoaderRegistry . clearModelCache ( ) ; 
 + MinecraftForge . EVENT _ BUS . register ( White . instance ) ; 
 } 
 
 @ Override 
 @ @ - 450 , 6 + 457 , 40 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + public static class White extends TextureAtlasSprite 
 + { 
 + public static ResourceLocation loc = new ResourceLocation ( " white " ) ; 
 + public static White instance = new White ( ) ; 
 + 
 + protected White ( ) 
 + { 
 + super ( loc . toString ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public boolean hasCustomLoader ( IResourceManager manager , ResourceLocation location ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean load ( IResourceManager manager , ResourceLocation location ) 
 + { 
 + BufferedImage image = new BufferedImage ( 1 , 1 , BufferedImage . TYPE _ INT _ ARGB ) ; 
 + image . setRGB ( 0 , 0 , 0xFFFFFFFF ) ; 
 + BufferedImage [ ] images = new BufferedImage [ Minecraft . getMinecraft ( ) . gameSettings . mipmapLevels + 1 ] ; 
 + images [ 0 ] = image ; 
 + loadSprite ( images , null ) ; 
 + return false ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void handleStitchPre ( TextureStitchEvent . Pre event ) 
 + { 
 + event . map . setTextureEntry ( White . loc . toString ( ) , White . instance ) ; 
 + } 
 + } 
 + 
 public void onPostBakeEvent ( IRegistry modelRegistry ) 
 { 
 for ( ModelResourceLocation missing : missingVariants ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index 0895dd7 . . ca0f3fb 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraftforge . client . model . IModelPart ; 
 import net . minecraftforge . client . model . IModelState ; 
 import net . minecraftforge . client . model . ISmartBlockModel ; 
 import net . minecraftforge . client . model . ISmartItemModel ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . client . model . ModelLoaderRegistry ; 
 import net . minecraftforge . client . model . TRSRTransformation ; 
 import net . minecraftforge . client . model . b3d . B3DModel . Animation ; 
 @ @ - 455 , 6 + 456 , 7 @ @ public class B3DLoader implements ICustomModelLoader 
 List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; 
 TextureAtlasSprite sprite ; 
 if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; 
 + else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; 
 else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; 
 putVertexData ( f . getV1 ( ) , sprite ) ; 
 putVertexData ( f . getV2 ( ) , sprite ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java 
 index d020223 . . 070e01f 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java 
 @ @ - 106 , 7 + 106 , 7 @ @ public class B3DModel 
 logger . error ( String . format ( " texture % s is out of range " , texture ) ) ; 
 return null ; 
 } 
 - else if ( texture = = - 1 ) return null ; 
 + else if ( texture = = - 1 ) return Texture . White ; 
 return textures . get ( texture ) ; 
 } 
 
 @ @ - 482 , 6 + 482 , 7 @ @ public class B3DModel 
 
 public static class Texture 
 { 
 + public static Texture White = new Texture ( " builtin / white " , 0 , 0 , new Vector2f ( 0 , 0 ) , new Vector2f ( 1 , 1 ) , 0 ) ; 
 private final String path ; 
 private final int flags ; 
 private final int blend ;
