BLEU SCORE: 0.0042069762863331285

TEST MSG: Fixed partial variant detection in the forge blockstate loader .
GENERATED MSG: Added system to place all configs that use Forge ' s Configuration function into a single file on disc . Optional config to enable this . Blame MattaBase for this idea . .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> index c57515b . . b1cb905 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> @ @ - 56 , 32 + 56 , 36 @ @ public class ForgeBlockStateV1 extends Marker <nl> <nl> for ( Entry < String , JsonElement > e : JsonUtils . getJsonObject ( json , " variants " ) . entrySet ( ) ) <nl> { <nl> - if ( e . getKey ( ) . contains ( " = " ) ) / / Normal fully defined variant <nl> + if ( e . getValue ( ) . isJsonArray ( ) ) <nl> { <nl> - if ( e . getValue ( ) . isJsonArray ( ) ) <nl> + / / array of fully - defined variants <nl> + for ( JsonElement a : e . getValue ( ) . getAsJsonArray ( ) ) <nl> { <nl> - for ( JsonElement a : e . getValue ( ) . getAsJsonArray ( ) ) <nl> + Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) ; <nl> + specified . put ( e . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( a , ForgeBlockStateV1 . Variant . class ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + JsonObject obj = e . getValue ( ) . getAsJsonObject ( ) ; <nl> + if ( obj . entrySet ( ) . iterator ( ) . next ( ) . getValue ( ) . isJsonObject ( ) ) <nl> + { <nl> + / / first value is a json object , so we know it ' s not a fully - defined variant <nl> + Map < String , ForgeBlockStateV1 . Variant > subs = Maps . newHashMap ( ) ; <nl> + condensed . put ( e . getKey ( ) , subs ) ; <nl> + for ( Entry < String , JsonElement > se : e . getValue ( ) . getAsJsonObject ( ) . entrySet ( ) ) <nl> { <nl> - Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) ; <nl> - specified . put ( e . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( a , ForgeBlockStateV1 . Variant . class ) ) ; <nl> + Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) + " = " + se . getKey ( ) ; <nl> + subs . put ( se . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( se . getValue ( ) , ForgeBlockStateV1 . Variant . class ) ) ; <nl> } <nl> } <nl> else <nl> { <nl> + / / fully - defined variant <nl> Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) ; <nl> specified . put ( e . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( e . getValue ( ) , ForgeBlockStateV1 . Variant . class ) ) ; <nl> } <nl> } <nl> - else <nl> - { <nl> - Map < String , ForgeBlockStateV1 . Variant > subs = Maps . newHashMap ( ) ; <nl> - condensed . put ( e . getKey ( ) , subs ) ; <nl> - for ( Entry < String , JsonElement > se : e . getValue ( ) . getAsJsonObject ( ) . entrySet ( ) ) <nl> - { <nl> - Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) + " = " + se . getKey ( ) ; <nl> - subs . put ( se . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( se . getValue ( ) , ForgeBlockStateV1 . Variant . class ) ) ; <nl> - } <nl> - } <nl> } <nl> <nl> Multimap < String , ForgeBlockStateV1 . Variant > permutations = getPermutations ( condensed ) ; / / Get permutations of Forge - style states . <nl> @ @ - 178 , 7 + 182 , 8 @ @ public class ForgeBlockStateV1 extends Marker <nl> { <nl> if ( depth = = sorted . size ( ) ) <nl> { <nl> - ret . put ( prefix , parent ) ; <nl> + if ( parent ! = null ) <nl> + ret . put ( prefix , parent ) ; <nl> return ret ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / common / Configuration . java b / common / net / minecraftforge / common / Configuration . java <nl> index 839b032 . . 1bc04ca 100644 <nl> - - - a / common / net / minecraftforge / common / Configuration . java <nl> + + + b / common / net / minecraftforge / common / Configuration . java <nl> @ @ - 13 , 11 + 13 , 17 @ @ import java . util . Date ; <nl> import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . TreeMap ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import com . google . common . base . CharMatcher ; <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . Maps ; <nl> <nl> + import cpw . mods . fml . common . FMLCommonHandler ; <nl> + import cpw . mods . fml . common . Loader ; <nl> + import cpw . mods . fml . relauncher . FMLInjectionData ; <nl> + <nl> import net . minecraft . src . Block ; <nl> import net . minecraft . src . Item ; <nl> import static net . minecraftforge . common . Property . Type . * ; <nl> @ @ - 37 , 28 + 43 , 47 @ @ public class Configuration <nl> public static final String CATEGORY _ ITEM = " item " ; <nl> public static final String ALLOWED _ CHARS = " . _ - " ; <nl> public static final String DEFAULT _ ENCODING = " UTF - 8 " ; <nl> + private static final Pattern CONFIG _ START = Pattern . compile ( " START : \ " ( [ ^ \ \ \ " ] + ) \ " " ) ; <nl> + private static final Pattern CONFIG _ END = Pattern . compile ( " END : \ " ( [ ^ \ \ \ " ] + ) \ " " ) ; <nl> private static final CharMatcher allowedProperties = CharMatcher . JAVA _ LETTER _ OR _ DIGIT . or ( CharMatcher . anyOf ( ALLOWED _ CHARS ) ) ; <nl> + private static Configuration PARENT = null ; <nl> <nl> File file ; <nl> <nl> public Map < String , Map < String , Property > > categories = new TreeMap < String , Map < String , Property > > ( ) ; <nl> + private Map < String , Configuration > children = new TreeMap < String , Configuration > ( ) ; <nl> <nl> private Map < String , String > customCategoryComments = Maps . newHashMap ( ) ; <nl> private boolean caseSensitiveCustomCategories ; <nl> public String defaultEncoding = DEFAULT _ ENCODING ; <nl> - <nl> + private String fileName = null ; <nl> + public boolean isChild = false ; <nl> + <nl> static <nl> { <nl> Arrays . fill ( configBlocks , false ) ; <nl> Arrays . fill ( configItems , false ) ; <nl> } <nl> <nl> + public Configuration ( ) { } <nl> + <nl> / * * <nl> * Create a configuration file for the file given in parameter . <nl> * / <nl> public Configuration ( File file ) <nl> { <nl> this . file = file ; <nl> + String basePath = ( ( File ) ( FMLInjectionData . data ( ) [ 6 ] ) ) . getAbsolutePath ( ) . replace ( File . separatorChar , ' / ' ) . replace ( " / . " , " " ) ; <nl> + String path = file . getAbsolutePath ( ) . replace ( File . separatorChar , ' / ' ) . replace ( " / . / " , " / " ) . replace ( basePath , " " ) ; <nl> + if ( PARENT ! = null ) <nl> + { <nl> + PARENT . setChild ( path , this ) ; <nl> + isChild = true ; <nl> + } <nl> + else <nl> + { <nl> + load ( ) ; <nl> + } <nl> } <nl> <nl> public Configuration ( File file , boolean caseSensitiveCustomCategories ) <nl> @ @ - 221 , 6 + 246 , 10 @ @ public class Configuration <nl> <nl> public void load ( ) <nl> { <nl> + if ( PARENT ! = null & & PARENT ! = this ) <nl> + { <nl> + return ; <nl> + } <nl> BufferedReader buffer = null ; <nl> try <nl> { <nl> @ @ - 252 , 6 + 281 , 26 @ @ public class Configuration <nl> break ; <nl> } <nl> <nl> + Matcher start = CONFIG _ START . matcher ( line ) ; <nl> + Matcher end = CONFIG _ END . matcher ( line ) ; <nl> + <nl> + if ( start . matches ( ) ) <nl> + { <nl> + fileName = start . group ( 1 ) ; <nl> + categories = new TreeMap < String , Map < String , Property > > ( ) ; <nl> + customCategoryComments = Maps . newHashMap ( ) ; <nl> + continue ; <nl> + } <nl> + else if ( end . matches ( ) ) <nl> + { <nl> + fileName = end . group ( 1 ) ; <nl> + Configuration child = new Configuration ( ) ; <nl> + child . categories = categories ; <nl> + child . customCategoryComments = customCategoryComments ; <nl> + this . children . put ( fileName , child ) ; <nl> + continue ; <nl> + } <nl> + <nl> int nameStart = - 1 , nameEnd = - 1 ; <nl> boolean skip = false ; <nl> boolean quoted = false ; <nl> @ @ - 352 , 6 + 401 , 12 @ @ public class Configuration <nl> <nl> public void save ( ) <nl> { <nl> + if ( PARENT ! = null & & PARENT ! = this ) <nl> + { <nl> + PARENT . save ( ) ; <nl> + return ; <nl> + } <nl> + <nl> try <nl> { <nl> if ( file . getParentFile ( ) ! = null ) <nl> @ @ - 373 , 31 + 428 , 18 @ @ public class Configuration <nl> buffer . write ( " # Generated on " + DateFormat . getInstance ( ) . format ( new Date ( ) ) + " \ r \ n " ) ; <nl> buffer . write ( " \ r \ n " ) ; <nl> <nl> - for ( Map . Entry < String , Map < String , Property > > category : categories . entrySet ( ) ) <nl> + if ( children . isEmpty ( ) ) <nl> { <nl> - buffer . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n " ) ; <nl> - buffer . write ( " # " + category . getKey ( ) + " \ r \ n " ) ; <nl> - if ( customCategoryComments . containsKey ( category . getKey ( ) ) ) <nl> - { <nl> - buffer . write ( " # = = = = = = = = = = = = = = = = = = = \ r \ n " ) ; <nl> - String comment = customCategoryComments . get ( category . getKey ( ) ) ; <nl> - Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; <nl> - for ( String commentLine : splitter . split ( comment ) ) <nl> - { <nl> - buffer . write ( " # " ) ; <nl> - buffer . write ( commentLine + " \ r \ n " ) ; <nl> - } <nl> - } <nl> - buffer . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n \ r \ n " ) ; <nl> - <nl> - String catKey = category . getKey ( ) ; <nl> - if ( ! allowedProperties . matchesAllOf ( catKey ) ) <nl> + save ( buffer ) ; <nl> + } <nl> + else <nl> + { <nl> + for ( Map . Entry < String , Configuration > entry : children . entrySet ( ) ) <nl> { <nl> - 	 catKey = ' " ' + catKey + ' " ' ; <nl> + buffer . write ( " START : \ " " + entry . getKey ( ) + " \ " \ r \ n " ) ; <nl> + entry . getValue ( ) . save ( buffer ) ; <nl> + buffer . write ( " END : \ " " + entry . getKey ( ) + " \ " \ r \ n \ r \ n " ) ; <nl> } <nl> - buffer . write ( catKey + " { \ r \ n " ) ; <nl> - writeProperties ( buffer , category . getValue ( ) . values ( ) ) ; <nl> - buffer . write ( " } \ r \ n \ r \ n " ) ; <nl> } <nl> <nl> buffer . close ( ) ; <nl> @ @ - 410 , 6 + 452 , 36 @ @ public class Configuration <nl> } <nl> } <nl> <nl> + private void save ( BufferedWriter out ) throws IOException <nl> + { <nl> + for ( Map . Entry < String , Map < String , Property > > category : categories . entrySet ( ) ) <nl> + { <nl> + out . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n " ) ; <nl> + out . write ( " # " + category . getKey ( ) + " \ r \ n " ) ; <nl> + if ( customCategoryComments . containsKey ( category . getKey ( ) ) ) <nl> + { <nl> + out . write ( " # = = = = = = = = = = = = = = = = = = = \ r \ n " ) ; <nl> + String comment = customCategoryComments . get ( category . getKey ( ) ) ; <nl> + Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; <nl> + for ( String commentLine : splitter . split ( comment ) ) <nl> + { <nl> + out . write ( " # " ) ; <nl> + out . write ( commentLine + " \ r \ n " ) ; <nl> + } <nl> + } <nl> + out . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n \ r \ n " ) ; <nl> + <nl> + String catKey = category . getKey ( ) ; <nl> + if ( ! allowedProperties . matchesAllOf ( catKey ) ) <nl> + { <nl> + catKey = ' " ' + catKey + ' " ' ; <nl> + } <nl> + out . write ( catKey + " { \ r \ n " ) ; <nl> + writeProperties ( out , category . getValue ( ) . values ( ) ) ; <nl> + out . write ( " } \ r \ n \ r \ n " ) ; <nl> + } <nl> + } <nl> + <nl> public void addCustomCategoryComment ( String category , String comment ) <nl> { <nl> if ( ! caseSensitiveCustomCategories ) <nl> @ @ - 439 , 6 + 511 , 27 @ @ public class Configuration <nl> } <nl> } <nl> <nl> + private void setChild ( String name , Configuration child ) <nl> + { <nl> + if ( ! children . containsKey ( name ) ) <nl> + { <nl> + children . put ( name , child ) ; <nl> + } <nl> + else <nl> + { <nl> + Configuration old = children . get ( name ) ; <nl> + child . categories = old . categories ; <nl> + child . customCategoryComments = old . customCategoryComments ; <nl> + child . fileName = old . fileName ; <nl> + } <nl> + } <nl> + <nl> + public static void enableGlobalConfig ( ) <nl> + { <nl> + PARENT = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " global . cfg " ) ) ; <nl> + PARENT . load ( ) ; <nl> + } <nl> + <nl> public static class UnicodeInputStreamReader extends Reader <nl> { <nl> private final InputStreamReader input ; <nl> diff - - git a / common / net / minecraftforge / common / ForgeDummyContainer . java b / common / net / minecraftforge / common / ForgeDummyContainer . java <nl> index bb7caae . . 24000ef 100644 <nl> - - - a / common / net / minecraftforge / common / ForgeDummyContainer . java <nl> + + + b / common / net / minecraftforge / common / ForgeDummyContainer . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> + import java . io . File ; <nl> import java . util . Arrays ; <nl> import java . util . Map ; <nl> <nl> @ @ - 39 , 6 + 40 , 18 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces <nl> meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; <nl> meta . screenshots = new String [ 0 ] ; <nl> meta . logoFile = " / forge _ logo . png " ; <nl> + <nl> + Configuration config = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ) ; <nl> + if ( ! config . isChild ) <nl> + { <nl> + config . load ( ) ; <nl> + Property enableGlobalCfg = config . get ( Configuration . CATEGORY _ GENERAL , " enableGlobalConfig " , false ) ; <nl> + if ( enableGlobalCfg . getBoolean ( false ) ) <nl> + { <nl> + Configuration . enableGlobalConfig ( ) ; <nl> + } <nl> + config . save ( ) ; <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 53 , 6 + 66 , 7 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces <nl> { <nl> ForgeChunkManager . captureConfig ( evt . getModConfigurationDirectory ( ) ) ; <nl> } <nl> + <nl> @ Subscribe <nl> public void postInit ( FMLPostInitializationEvent evt ) <nl> {

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 index c57515b . . b1cb905 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 @ @ - 56 , 32 + 56 , 36 @ @ public class ForgeBlockStateV1 extends Marker 
 
 for ( Entry < String , JsonElement > e : JsonUtils . getJsonObject ( json , " variants " ) . entrySet ( ) ) 
 { 
 - if ( e . getKey ( ) . contains ( " = " ) ) / / Normal fully defined variant 
 + if ( e . getValue ( ) . isJsonArray ( ) ) 
 { 
 - if ( e . getValue ( ) . isJsonArray ( ) ) 
 + / / array of fully - defined variants 
 + for ( JsonElement a : e . getValue ( ) . getAsJsonArray ( ) ) 
 { 
 - for ( JsonElement a : e . getValue ( ) . getAsJsonArray ( ) ) 
 + Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) ; 
 + specified . put ( e . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( a , ForgeBlockStateV1 . Variant . class ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + JsonObject obj = e . getValue ( ) . getAsJsonObject ( ) ; 
 + if ( obj . entrySet ( ) . iterator ( ) . next ( ) . getValue ( ) . isJsonObject ( ) ) 
 + { 
 + / / first value is a json object , so we know it ' s not a fully - defined variant 
 + Map < String , ForgeBlockStateV1 . Variant > subs = Maps . newHashMap ( ) ; 
 + condensed . put ( e . getKey ( ) , subs ) ; 
 + for ( Entry < String , JsonElement > se : e . getValue ( ) . getAsJsonObject ( ) . entrySet ( ) ) 
 { 
 - Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) ; 
 - specified . put ( e . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( a , ForgeBlockStateV1 . Variant . class ) ) ; 
 + Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) + " = " + se . getKey ( ) ; 
 + subs . put ( se . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( se . getValue ( ) , ForgeBlockStateV1 . Variant . class ) ) ; 
 } 
 } 
 else 
 { 
 + / / fully - defined variant 
 Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) ; 
 specified . put ( e . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( e . getValue ( ) , ForgeBlockStateV1 . Variant . class ) ) ; 
 } 
 } 
 - else 
 - { 
 - Map < String , ForgeBlockStateV1 . Variant > subs = Maps . newHashMap ( ) ; 
 - condensed . put ( e . getKey ( ) , subs ) ; 
 - for ( Entry < String , JsonElement > se : e . getValue ( ) . getAsJsonObject ( ) . entrySet ( ) ) 
 - { 
 - Variant . Deserializer . INSTANCE . simpleSubmodelKey = e . getKey ( ) + " = " + se . getKey ( ) ; 
 - subs . put ( se . getKey ( ) , ( ForgeBlockStateV1 . Variant ) context . deserialize ( se . getValue ( ) , ForgeBlockStateV1 . Variant . class ) ) ; 
 - } 
 - } 
 } 
 
 Multimap < String , ForgeBlockStateV1 . Variant > permutations = getPermutations ( condensed ) ; / / Get permutations of Forge - style states . 
 @ @ - 178 , 7 + 182 , 8 @ @ public class ForgeBlockStateV1 extends Marker 
 { 
 if ( depth = = sorted . size ( ) ) 
 { 
 - ret . put ( prefix , parent ) ; 
 + if ( parent ! = null ) 
 + ret . put ( prefix , parent ) ; 
 return ret ; 
 } 


NEAREST DIFF:
diff - - git a / common / net / minecraftforge / common / Configuration . java b / common / net / minecraftforge / common / Configuration . java 
 index 839b032 . . 1bc04ca 100644 
 - - - a / common / net / minecraftforge / common / Configuration . java 
 + + + b / common / net / minecraftforge / common / Configuration . java 
 @ @ - 13 , 11 + 13 , 17 @ @ import java . util . Date ; 
 import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . TreeMap ; 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 
 import com . google . common . base . CharMatcher ; 
 import com . google . common . base . Splitter ; 
 import com . google . common . collect . Maps ; 
 
 + import cpw . mods . fml . common . FMLCommonHandler ; 
 + import cpw . mods . fml . common . Loader ; 
 + import cpw . mods . fml . relauncher . FMLInjectionData ; 
 + 
 import net . minecraft . src . Block ; 
 import net . minecraft . src . Item ; 
 import static net . minecraftforge . common . Property . Type . * ; 
 @ @ - 37 , 28 + 43 , 47 @ @ public class Configuration 
 public static final String CATEGORY _ ITEM = " item " ; 
 public static final String ALLOWED _ CHARS = " . _ - " ; 
 public static final String DEFAULT _ ENCODING = " UTF - 8 " ; 
 + private static final Pattern CONFIG _ START = Pattern . compile ( " START : \ " ( [ ^ \ \ \ " ] + ) \ " " ) ; 
 + private static final Pattern CONFIG _ END = Pattern . compile ( " END : \ " ( [ ^ \ \ \ " ] + ) \ " " ) ; 
 private static final CharMatcher allowedProperties = CharMatcher . JAVA _ LETTER _ OR _ DIGIT . or ( CharMatcher . anyOf ( ALLOWED _ CHARS ) ) ; 
 + private static Configuration PARENT = null ; 
 
 File file ; 
 
 public Map < String , Map < String , Property > > categories = new TreeMap < String , Map < String , Property > > ( ) ; 
 + private Map < String , Configuration > children = new TreeMap < String , Configuration > ( ) ; 
 
 private Map < String , String > customCategoryComments = Maps . newHashMap ( ) ; 
 private boolean caseSensitiveCustomCategories ; 
 public String defaultEncoding = DEFAULT _ ENCODING ; 
 - 
 + private String fileName = null ; 
 + public boolean isChild = false ; 
 + 
 static 
 { 
 Arrays . fill ( configBlocks , false ) ; 
 Arrays . fill ( configItems , false ) ; 
 } 
 
 + public Configuration ( ) { } 
 + 
 / * * 
 * Create a configuration file for the file given in parameter . 
 * / 
 public Configuration ( File file ) 
 { 
 this . file = file ; 
 + String basePath = ( ( File ) ( FMLInjectionData . data ( ) [ 6 ] ) ) . getAbsolutePath ( ) . replace ( File . separatorChar , ' / ' ) . replace ( " / . " , " " ) ; 
 + String path = file . getAbsolutePath ( ) . replace ( File . separatorChar , ' / ' ) . replace ( " / . / " , " / " ) . replace ( basePath , " " ) ; 
 + if ( PARENT ! = null ) 
 + { 
 + PARENT . setChild ( path , this ) ; 
 + isChild = true ; 
 + } 
 + else 
 + { 
 + load ( ) ; 
 + } 
 } 
 
 public Configuration ( File file , boolean caseSensitiveCustomCategories ) 
 @ @ - 221 , 6 + 246 , 10 @ @ public class Configuration 
 
 public void load ( ) 
 { 
 + if ( PARENT ! = null & & PARENT ! = this ) 
 + { 
 + return ; 
 + } 
 BufferedReader buffer = null ; 
 try 
 { 
 @ @ - 252 , 6 + 281 , 26 @ @ public class Configuration 
 break ; 
 } 
 
 + Matcher start = CONFIG _ START . matcher ( line ) ; 
 + Matcher end = CONFIG _ END . matcher ( line ) ; 
 + 
 + if ( start . matches ( ) ) 
 + { 
 + fileName = start . group ( 1 ) ; 
 + categories = new TreeMap < String , Map < String , Property > > ( ) ; 
 + customCategoryComments = Maps . newHashMap ( ) ; 
 + continue ; 
 + } 
 + else if ( end . matches ( ) ) 
 + { 
 + fileName = end . group ( 1 ) ; 
 + Configuration child = new Configuration ( ) ; 
 + child . categories = categories ; 
 + child . customCategoryComments = customCategoryComments ; 
 + this . children . put ( fileName , child ) ; 
 + continue ; 
 + } 
 + 
 int nameStart = - 1 , nameEnd = - 1 ; 
 boolean skip = false ; 
 boolean quoted = false ; 
 @ @ - 352 , 6 + 401 , 12 @ @ public class Configuration 
 
 public void save ( ) 
 { 
 + if ( PARENT ! = null & & PARENT ! = this ) 
 + { 
 + PARENT . save ( ) ; 
 + return ; 
 + } 
 + 
 try 
 { 
 if ( file . getParentFile ( ) ! = null ) 
 @ @ - 373 , 31 + 428 , 18 @ @ public class Configuration 
 buffer . write ( " # Generated on " + DateFormat . getInstance ( ) . format ( new Date ( ) ) + " \ r \ n " ) ; 
 buffer . write ( " \ r \ n " ) ; 
 
 - for ( Map . Entry < String , Map < String , Property > > category : categories . entrySet ( ) ) 
 + if ( children . isEmpty ( ) ) 
 { 
 - buffer . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n " ) ; 
 - buffer . write ( " # " + category . getKey ( ) + " \ r \ n " ) ; 
 - if ( customCategoryComments . containsKey ( category . getKey ( ) ) ) 
 - { 
 - buffer . write ( " # = = = = = = = = = = = = = = = = = = = \ r \ n " ) ; 
 - String comment = customCategoryComments . get ( category . getKey ( ) ) ; 
 - Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; 
 - for ( String commentLine : splitter . split ( comment ) ) 
 - { 
 - buffer . write ( " # " ) ; 
 - buffer . write ( commentLine + " \ r \ n " ) ; 
 - } 
 - } 
 - buffer . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n \ r \ n " ) ; 
 - 
 - String catKey = category . getKey ( ) ; 
 - if ( ! allowedProperties . matchesAllOf ( catKey ) ) 
 + save ( buffer ) ; 
 + } 
 + else 
 + { 
 + for ( Map . Entry < String , Configuration > entry : children . entrySet ( ) ) 
 { 
 - 	 catKey = ' " ' + catKey + ' " ' ; 
 + buffer . write ( " START : \ " " + entry . getKey ( ) + " \ " \ r \ n " ) ; 
 + entry . getValue ( ) . save ( buffer ) ; 
 + buffer . write ( " END : \ " " + entry . getKey ( ) + " \ " \ r \ n \ r \ n " ) ; 
 } 
 - buffer . write ( catKey + " { \ r \ n " ) ; 
 - writeProperties ( buffer , category . getValue ( ) . values ( ) ) ; 
 - buffer . write ( " } \ r \ n \ r \ n " ) ; 
 } 
 
 buffer . close ( ) ; 
 @ @ - 410 , 6 + 452 , 36 @ @ public class Configuration 
 } 
 } 
 
 + private void save ( BufferedWriter out ) throws IOException 
 + { 
 + for ( Map . Entry < String , Map < String , Property > > category : categories . entrySet ( ) ) 
 + { 
 + out . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n " ) ; 
 + out . write ( " # " + category . getKey ( ) + " \ r \ n " ) ; 
 + if ( customCategoryComments . containsKey ( category . getKey ( ) ) ) 
 + { 
 + out . write ( " # = = = = = = = = = = = = = = = = = = = \ r \ n " ) ; 
 + String comment = customCategoryComments . get ( category . getKey ( ) ) ; 
 + Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; 
 + for ( String commentLine : splitter . split ( comment ) ) 
 + { 
 + out . write ( " # " ) ; 
 + out . write ( commentLine + " \ r \ n " ) ; 
 + } 
 + } 
 + out . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n \ r \ n " ) ; 
 + 
 + String catKey = category . getKey ( ) ; 
 + if ( ! allowedProperties . matchesAllOf ( catKey ) ) 
 + { 
 + catKey = ' " ' + catKey + ' " ' ; 
 + } 
 + out . write ( catKey + " { \ r \ n " ) ; 
 + writeProperties ( out , category . getValue ( ) . values ( ) ) ; 
 + out . write ( " } \ r \ n \ r \ n " ) ; 
 + } 
 + } 
 + 
 public void addCustomCategoryComment ( String category , String comment ) 
 { 
 if ( ! caseSensitiveCustomCategories ) 
 @ @ - 439 , 6 + 511 , 27 @ @ public class Configuration 
 } 
 } 
 
 + private void setChild ( String name , Configuration child ) 
 + { 
 + if ( ! children . containsKey ( name ) ) 
 + { 
 + children . put ( name , child ) ; 
 + } 
 + else 
 + { 
 + Configuration old = children . get ( name ) ; 
 + child . categories = old . categories ; 
 + child . customCategoryComments = old . customCategoryComments ; 
 + child . fileName = old . fileName ; 
 + } 
 + } 
 + 
 + public static void enableGlobalConfig ( ) 
 + { 
 + PARENT = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " global . cfg " ) ) ; 
 + PARENT . load ( ) ; 
 + } 
 + 
 public static class UnicodeInputStreamReader extends Reader 
 { 
 private final InputStreamReader input ; 
 diff - - git a / common / net / minecraftforge / common / ForgeDummyContainer . java b / common / net / minecraftforge / common / ForgeDummyContainer . java 
 index bb7caae . . 24000ef 100644 
 - - - a / common / net / minecraftforge / common / ForgeDummyContainer . java 
 + + + b / common / net / minecraftforge / common / ForgeDummyContainer . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package net . minecraftforge . common ; 
 
 + import java . io . File ; 
 import java . util . Arrays ; 
 import java . util . Map ; 
 
 @ @ - 39 , 6 + 40 , 18 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces 
 meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; 
 meta . screenshots = new String [ 0 ] ; 
 meta . logoFile = " / forge _ logo . png " ; 
 + 
 + Configuration config = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ) ; 
 + if ( ! config . isChild ) 
 + { 
 + config . load ( ) ; 
 + Property enableGlobalCfg = config . get ( Configuration . CATEGORY _ GENERAL , " enableGlobalConfig " , false ) ; 
 + if ( enableGlobalCfg . getBoolean ( false ) ) 
 + { 
 + Configuration . enableGlobalConfig ( ) ; 
 + } 
 + config . save ( ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 53 , 6 + 66 , 7 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces 
 { 
 ForgeChunkManager . captureConfig ( evt . getModConfigurationDirectory ( ) ) ; 
 } 
 + 
 @ Subscribe 
 public void postInit ( FMLPostInitializationEvent evt ) 
 {
