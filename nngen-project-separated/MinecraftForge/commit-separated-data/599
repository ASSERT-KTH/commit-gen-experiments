BLEU SCORE: 0.009582701933258969

TEST MSG: Fix universal bucket not being returned in crafting recipes
GENERATED MSG: Fixed piston rendering ( WorldRenderer offset wasn ' t applied ) ; fixed TESR being registered too early in one of the debug mods .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> index 2c75bc6 . . dcf5c9b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> @ @ - 79 , 6 + 79 , 23 @ @ public class UniversalBucket extends Item implements IFluidContainerItem <nl> BlockDispenser . DISPENSE _ BEHAVIOR _ REGISTRY . putObject ( this , DispenseFluidContainer . getInstance ( ) ) ; <nl> } <nl> <nl> + @ Override <nl> + public boolean hasContainerItem ( ItemStack stack ) <nl> + { <nl> + return getEmpty ( ) ! = null ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack getContainerItem ( ItemStack itemStack ) <nl> + { <nl> + if ( getEmpty ( ) ! = null ) <nl> + { <nl> + / / Create a copy such that the game can ' t mess with it <nl> + return getEmpty ( ) . copy ( ) ; <nl> + } <nl> + return super . getContainerItem ( itemStack ) ; <nl> + } <nl> + <nl> @ SideOnly ( Side . CLIENT ) <nl> @ Override <nl> public void getSubItems ( Item itemIn , CreativeTabs tab , List < ItemStack > subItems ) <nl> diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> index 7943612 . . 28192f4 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import net . minecraft . util . EnumHand ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . debug . ModelFluidDebug . TestFluid ; <nl> import net . minecraftforge . debug . ModelFluidDebug . TestGas ; <nl> import net . minecraftforge . event . entity . player . FillBucketEvent ; <nl> @ @ - 121 , 6 + 122 , 8 @ @ public class DynBucketTest <nl> <nl> / / GameRegistry . registerItem ( dynBucket , " dynbucket " ) ; <nl> GameRegistry . register ( dynBottle ) ; <nl> + GameRegistry . addShapelessRecipe ( new ItemStack ( Items . DIAMOND ) , <nl> + UniversalBucket . getFilledBucket ( ForgeModContainer . getInstance ( ) . universalBucket , TestFluid . instance ) ) ; <nl> <nl> / / register fluid containers <nl> int i = 0 ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / pipeline / VertexLighterFlat . java b / src / main / java / net / minecraftforge / client / model / pipeline / VertexLighterFlat . java <nl> index 60d4766 . . 96beb91 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / pipeline / VertexLighterFlat . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / pipeline / VertexLighterFlat . java <nl> @ @ - 141 , 9 + 141 , 9 @ @ public class VertexLighterFlat extends QuadGatheringTransformer <nl> case POSITION : <nl> float [ ] pos = new float [ 4 ] ; <nl> System . arraycopy ( position [ v ] , 0 , pos , 0 , position [ v ] . length ) ; <nl> - pos [ 0 ] + = ( blockInfo . getBlockPos ( ) . getX ( ) & 0xF ) ; <nl> - pos [ 1 ] + = ( blockInfo . getBlockPos ( ) . getY ( ) & 0xF ) ; <nl> - pos [ 2 ] + = ( blockInfo . getBlockPos ( ) . getZ ( ) & 0xF ) ; <nl> + pos [ 0 ] + = blockInfo . getBlockPos ( ) . getX ( ) ; <nl> + pos [ 1 ] + = blockInfo . getBlockPos ( ) . getY ( ) ; <nl> + pos [ 2 ] + = blockInfo . getBlockPos ( ) . getZ ( ) ; <nl> parent . put ( e , pos ) ; <nl> break ; <nl> case NORMAL : if ( normalIndex ! = - 1 ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / pipeline / WorldRendererConsumer . java b / src / main / java / net / minecraftforge / client / model / pipeline / WorldRendererConsumer . java <nl> index fdee4c8 . . 2e9ee09 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / pipeline / WorldRendererConsumer . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / pipeline / WorldRendererConsumer . java <nl> @ @ - 36 , 7 + 36 , 7 @ @ public class WorldRendererConsumer implements IVertexConsumer <nl> if ( v = = 4 ) <nl> { <nl> renderer . addVertexData ( quadData ) ; <nl> - renderer . checkAndGrow ( ) ; <nl> + renderer . putPosition ( 0 , 0 , 0 ) ; <nl> Arrays . fill ( quadData , 0 ) ; <nl> v = 0 ; <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ItemTileDebug . java b / src / test / java / net / minecraftforge / debug / ItemTileDebug . java <nl> index 7c2668c . . cfee726 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ItemTileDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ItemTileDebug . java <nl> @ @ - 2 , 11 + 2 , 8 @ @ package net . minecraftforge . debug ; <nl> <nl> import net . minecraft . block . BlockContainer ; <nl> import net . minecraft . block . material . Material ; <nl> - import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . renderer . GlStateManager ; <nl> - import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . tileentity . TileEntitySpecialRenderer ; <nl> - import net . minecraft . client . resources . model . IBakedModel ; <nl> import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> import net . minecraft . creativetab . CreativeTabs ; <nl> import net . minecraft . item . Item ; <nl> @ @ - 16 , 13 + 13 , 11 @ @ import net . minecraftforge . client . ForgeHooksClient ; <nl> import net . minecraftforge . client . event . ModelBakeEvent ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> - import net . minecraftforge . debug . ModelBakeEventDebug . BakeEventHandler ; <nl> - import net . minecraftforge . debug . ModelBakeEventDebug . ClientProxy ; <nl> - import net . minecraftforge . debug . ModelBakeEventDebug . CustomModel ; <nl> import net . minecraftforge . fml . client . registry . ClientRegistry ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> import net . minecraftforge . fml . common . SidedProxy ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> @ @ - 41 , 6 + 36 , 9 @ @ public class ItemTileDebug <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> <nl> + @ EventHandler <nl> + public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } <nl> + <nl> public static class CommonProxy <nl> { <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> @ @ - 48 , 6 + 46 , 8 @ @ public class ItemTileDebug <nl> GameRegistry . registerBlock ( TestBlock . instance , TestBlock . name ) ; <nl> GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; <nl> } <nl> + <nl> + public void init ( FMLInitializationEvent event ) { } <nl> } <nl> <nl> public static class ClientProxy extends CommonProxy <nl> @ @ - 58 , 12 + 58 , 16 @ @ public class ItemTileDebug <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> super . preInit ( event ) ; <nl> - ClientRegistry . bindTileEntitySpecialRenderer ( CustomTileEntity . class , TestTESR . instance ) ; <nl> Item item = Item . getItemFromBlock ( TestBlock . instance ) ; <nl> ForgeHooksClient . registerTESRItemStack ( item , 0 , CustomTileEntity . class ) ; <nl> ModelLoader . setCustomModelResourceLocation ( item , 0 , itemLocation ) ; <nl> MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void init ( FMLInitializationEvent event ) { <nl> + ClientRegistry . bindTileEntitySpecialRenderer ( CustomTileEntity . class , TestTESR . instance ) ; <nl> + } <nl> } <nl> <nl> public static class BakeEventHandler

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 index 2c75bc6 . . dcf5c9b 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 + + + b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 @ @ - 79 , 6 + 79 , 23 @ @ public class UniversalBucket extends Item implements IFluidContainerItem 
 BlockDispenser . DISPENSE _ BEHAVIOR _ REGISTRY . putObject ( this , DispenseFluidContainer . getInstance ( ) ) ; 
 } 
 
 + @ Override 
 + public boolean hasContainerItem ( ItemStack stack ) 
 + { 
 + return getEmpty ( ) ! = null ; 
 + } 
 + 
 + @ Override 
 + public ItemStack getContainerItem ( ItemStack itemStack ) 
 + { 
 + if ( getEmpty ( ) ! = null ) 
 + { 
 + / / Create a copy such that the game can ' t mess with it 
 + return getEmpty ( ) . copy ( ) ; 
 + } 
 + return super . getContainerItem ( itemStack ) ; 
 + } 
 + 
 @ SideOnly ( Side . CLIENT ) 
 @ Override 
 public void getSubItems ( Item itemIn , CreativeTabs tab , List < ItemStack > subItems ) 
 diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 index 7943612 . . 28192f4 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import net . minecraft . util . EnumHand ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . debug . ModelFluidDebug . TestFluid ; 
 import net . minecraftforge . debug . ModelFluidDebug . TestGas ; 
 import net . minecraftforge . event . entity . player . FillBucketEvent ; 
 @ @ - 121 , 6 + 122 , 8 @ @ public class DynBucketTest 
 
 / / GameRegistry . registerItem ( dynBucket , " dynbucket " ) ; 
 GameRegistry . register ( dynBottle ) ; 
 + GameRegistry . addShapelessRecipe ( new ItemStack ( Items . DIAMOND ) , 
 + UniversalBucket . getFilledBucket ( ForgeModContainer . getInstance ( ) . universalBucket , TestFluid . instance ) ) ; 
 
 / / register fluid containers 
 int i = 0 ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / pipeline / VertexLighterFlat . java b / src / main / java / net / minecraftforge / client / model / pipeline / VertexLighterFlat . java 
 index 60d4766 . . 96beb91 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / pipeline / VertexLighterFlat . java 
 + + + b / src / main / java / net / minecraftforge / client / model / pipeline / VertexLighterFlat . java 
 @ @ - 141 , 9 + 141 , 9 @ @ public class VertexLighterFlat extends QuadGatheringTransformer 
 case POSITION : 
 float [ ] pos = new float [ 4 ] ; 
 System . arraycopy ( position [ v ] , 0 , pos , 0 , position [ v ] . length ) ; 
 - pos [ 0 ] + = ( blockInfo . getBlockPos ( ) . getX ( ) & 0xF ) ; 
 - pos [ 1 ] + = ( blockInfo . getBlockPos ( ) . getY ( ) & 0xF ) ; 
 - pos [ 2 ] + = ( blockInfo . getBlockPos ( ) . getZ ( ) & 0xF ) ; 
 + pos [ 0 ] + = blockInfo . getBlockPos ( ) . getX ( ) ; 
 + pos [ 1 ] + = blockInfo . getBlockPos ( ) . getY ( ) ; 
 + pos [ 2 ] + = blockInfo . getBlockPos ( ) . getZ ( ) ; 
 parent . put ( e , pos ) ; 
 break ; 
 case NORMAL : if ( normalIndex ! = - 1 ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / pipeline / WorldRendererConsumer . java b / src / main / java / net / minecraftforge / client / model / pipeline / WorldRendererConsumer . java 
 index fdee4c8 . . 2e9ee09 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / pipeline / WorldRendererConsumer . java 
 + + + b / src / main / java / net / minecraftforge / client / model / pipeline / WorldRendererConsumer . java 
 @ @ - 36 , 7 + 36 , 7 @ @ public class WorldRendererConsumer implements IVertexConsumer 
 if ( v = = 4 ) 
 { 
 renderer . addVertexData ( quadData ) ; 
 - renderer . checkAndGrow ( ) ; 
 + renderer . putPosition ( 0 , 0 , 0 ) ; 
 Arrays . fill ( quadData , 0 ) ; 
 v = 0 ; 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / ItemTileDebug . java b / src / test / java / net / minecraftforge / debug / ItemTileDebug . java 
 index 7c2668c . . cfee726 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ItemTileDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ItemTileDebug . java 
 @ @ - 2 , 11 + 2 , 8 @ @ package net . minecraftforge . debug ; 
 
 import net . minecraft . block . BlockContainer ; 
 import net . minecraft . block . material . Material ; 
 - import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . renderer . GlStateManager ; 
 - import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . tileentity . TileEntitySpecialRenderer ; 
 - import net . minecraft . client . resources . model . IBakedModel ; 
 import net . minecraft . client . resources . model . ModelResourceLocation ; 
 import net . minecraft . creativetab . CreativeTabs ; 
 import net . minecraft . item . Item ; 
 @ @ - 16 , 13 + 13 , 11 @ @ import net . minecraftforge . client . ForgeHooksClient ; 
 import net . minecraftforge . client . event . ModelBakeEvent ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . MinecraftForge ; 
 - import net . minecraftforge . debug . ModelBakeEventDebug . BakeEventHandler ; 
 - import net . minecraftforge . debug . ModelBakeEventDebug . ClientProxy ; 
 - import net . minecraftforge . debug . ModelBakeEventDebug . CustomModel ; 
 import net . minecraftforge . fml . client . registry . ClientRegistry ; 
 import net . minecraftforge . fml . common . Mod ; 
 import net . minecraftforge . fml . common . Mod . EventHandler ; 
 import net . minecraftforge . fml . common . SidedProxy ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 @ @ - 41 , 6 + 36 , 9 @ @ public class ItemTileDebug 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 
 + @ EventHandler 
 + public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } 
 + 
 public static class CommonProxy 
 { 
 public void preInit ( FMLPreInitializationEvent event ) 
 @ @ - 48 , 6 + 46 , 8 @ @ public class ItemTileDebug 
 GameRegistry . registerBlock ( TestBlock . instance , TestBlock . name ) ; 
 GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; 
 } 
 + 
 + public void init ( FMLInitializationEvent event ) { } 
 } 
 
 public static class ClientProxy extends CommonProxy 
 @ @ - 58 , 12 + 58 , 16 @ @ public class ItemTileDebug 
 public void preInit ( FMLPreInitializationEvent event ) 
 { 
 super . preInit ( event ) ; 
 - ClientRegistry . bindTileEntitySpecialRenderer ( CustomTileEntity . class , TestTESR . instance ) ; 
 Item item = Item . getItemFromBlock ( TestBlock . instance ) ; 
 ForgeHooksClient . registerTESRItemStack ( item , 0 , CustomTileEntity . class ) ; 
 ModelLoader . setCustomModelResourceLocation ( item , 0 , itemLocation ) ; 
 MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 } 
 + 
 + @ Override 
 + public void init ( FMLInitializationEvent event ) { 
 + ClientRegistry . bindTileEntitySpecialRenderer ( CustomTileEntity . class , TestTESR . instance ) ; 
 + } 
 } 
 
 public static class BakeEventHandler
