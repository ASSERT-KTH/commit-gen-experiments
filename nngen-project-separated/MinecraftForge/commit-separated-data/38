BLEU SCORE: 0.04789232204309912

TEST MSG: Implement API for mods to control their server status response . .
GENERATED MSG: Implement a GUI packet and GUIFACTORY for triggering from the server .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / network / ServerStatusResponse . java . patch b / patches / minecraft / net / minecraft / network / ServerStatusResponse . java . patch <nl> index ddc1d9b . . c6f5124 100644 <nl> - - - a / patches / minecraft / net / minecraft / network / ServerStatusResponse . java . patch <nl> + + + b / patches / minecraft / net / minecraft / network / ServerStatusResponse . java . patch <nl> @ @ - 4 , 7 + 4 , 7 @ @ <nl> private ServerStatusResponse . Players field _ 151324 _ b ; <nl> private ServerStatusResponse . Version field _ 151325 _ c ; <nl> private String field _ 151323 _ d ; <nl> - + private net . minecraftforge . fml . network . FMLStatusPing forgeData ; <nl> + + private transient net . minecraftforge . fml . network . FMLStatusPing forgeData ; <nl> <nl> + public net . minecraftforge . fml . network . FMLStatusPing getForgeData ( ) { <nl> + return this . forgeData ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> index e633d3b . . 6972abf 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . common ; <nl> import net . minecraftforge . eventbus . api . IEventBus ; <nl> import net . minecraftforge . fml . BrandingControl ; <nl> import net . minecraftforge . fml . DistExecutor ; <nl> + import net . minecraftforge . fml . ExtensionPoint ; <nl> import net . minecraftforge . fml . FMLWorldPersistenceHook ; <nl> import net . minecraftforge . fml . ModLoadingContext ; <nl> import net . minecraftforge . fml . VersionChecker ; <nl> @ @ - 38 , 6 + 39 , 7 @ @ import net . minecraftforge . server . command . ForgeCommand ; <nl> import net . minecraftforge . versions . forge . ForgeVersion ; <nl> import net . minecraftforge . versions . mcp . MCPVersion ; <nl> <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> @ @ - 99 , 6 + 101 , 8 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook <nl> ModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . CLIENT , ForgeConfig . clientSpec ) ; <nl> ModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . SERVER , ForgeConfig . serverSpec ) ; <nl> modEventBus . register ( ForgeConfig . class ) ; <nl> + / / Forge does not display problems when the remote is not matching . <nl> + ModLoadingContext . get ( ) . registerExtensionPoint ( ExtensionPoint . DISPLAYTEST , ( ) - > Pair . of ( ( ) - > " ANY " , ( remote , isServer ) - > true ) ) ; <nl> } <nl> <nl> / * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java <nl> index 9cce0ba . . b845e15 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java <nl> @ @ - 24 , 17 + 24 , 28 @ @ import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . resources . IResourcePack ; <nl> import net . minecraftforge . fml . network . FMLPlayMessages ; <nl> import net . minecraftforge . fml . packs . ModFileResourcePack ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> <nl> import java . util . function . BiFunction ; <nl> + import java . util . function . BiPredicate ; <nl> import java . util . function . Function ; <nl> + import java . util . function . Supplier ; <nl> <nl> public class ExtensionPoint < T > <nl> { <nl> public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > CONFIGGUIFACTORY = new ExtensionPoint < > ( ) ; <nl> public static final ExtensionPoint < BiFunction < Minecraft , ModFileResourcePack , IResourcePack > > RESOURCEPACK = new ExtensionPoint < > ( ) ; <nl> + / * * <nl> + * Compatibility display test for the mod . <nl> + * Used for displaying compatibility with remote servers with the same mod , and on disk saves . <nl> + * <nl> + * The supplier provides my " local " version for sending across the network or writing to disk <nl> + * The predicate tests the version from a remote instance or save for acceptability ( Boolean is true for network , false for local save ) <nl> + * / <nl> + public static final ExtensionPoint < Pair < Supplier < String > , BiPredicate < String , Boolean > > > DISPLAYTEST = new ExtensionPoint < > ( ) ; <nl> <nl> / * * <nl> - * Register with { @ link ModLoadingContext # } <nl> + * Register with { @ link ModLoadingContext # registerExtensionPoint ( ExtensionPoint , Supplier ) } <nl> * / <nl> public static final ExtensionPoint < Function < FMLPlayMessages . OpenContainer , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> index 684fea1 . . c1856b7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> @ @ - 21 , 8 + 21 , 16 @ @ package net . minecraftforge . fml ; <nl> <nl> import net . minecraftforge . fml . config . ModConfig ; <nl> import net . minecraftforge . forgespi . language . IModInfo ; <nl> - <nl> - import java . util . * ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . EnumMap ; <nl> + import java . util . HashMap ; <nl> + import java . util . IdentityHashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Objects ; <nl> + import java . util . Optional ; <nl> import java . util . function . Consumer ; <nl> import java . util . function . Supplier ; <nl> <nl> @ @ - 60 , 6 + 68 , 9 @ @ public abstract class ModContainer <nl> this . modInfo = info ; <nl> this . triggerMap = new HashMap < > ( ) ; <nl> this . modLoadingStage = ModLoadingStage . CONSTRUCT ; <nl> + / / default displaytest extension checks for version string match <nl> + registerExtensionPoint ( ExtensionPoint . DISPLAYTEST , ( ) - > Pair . of ( ( ) - > this . modInfo . getVersion ( ) . toString ( ) , <nl> + ( incoming , isNetwork ) - > Objects . equals ( incoming , this . modInfo . getVersion ( ) . toString ( ) ) ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java <nl> index 5039a7c . . 7a0a438 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModList . java <nl> @ @ - 183 , 4 + 183 , 8 @ @ public class ModList <nl> { <nl> modFiles . stream ( ) . map ( ModFileInfo : : getFile ) . forEach ( fileConsumer ) ; <nl> } <nl> + <nl> + public void forEachModContainer ( BiConsumer < String , ModContainer > modContainerConsumer ) { <nl> + indexedMods . forEach ( modContainerConsumer ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / ClientHooks . java b / src / main / java / net / minecraftforge / fml / client / ClientHooks . java <nl> index 6abd292 . . 147f7ef 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / ClientHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / ClientHooks . java <nl> @ @ - 22 , 18 + 22 , 28 @ @ package net . minecraftforge . fml . client ; <nl> import java . io . File ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Objects ; <nl> import java . util . Set ; <nl> + import java . util . concurrent . atomic . AtomicBoolean ; <nl> import java . util . stream . Collectors ; <nl> <nl> import javax . annotation . Nullable ; <nl> <nl> - import com . google . common . collect . * ; <nl> - import net . minecraft . client . gui . * ; <nl> + import com . google . common . collect . HashBasedTable ; <nl> + import com . google . common . collect . HashMultimap ; <nl> + import com . google . common . collect . SetMultimap ; <nl> + import com . google . common . collect . Sets ; <nl> + import com . google . common . collect . Table ; <nl> + import net . minecraft . client . gui . Gui ; <nl> + import net . minecraft . client . gui . GuiMultiplayer ; <nl> + import net . minecraft . client . gui . GuiWorldSelection ; <nl> + import net . minecraftforge . fml . ExtensionPoint ; <nl> import net . minecraftforge . fml . ForgeI18n ; <nl> + import net . minecraftforge . fml . ModList ; <nl> import net . minecraftforge . fml . network . FMLNetworkConstants ; <nl> import net . minecraftforge . fml . network . NetworkRegistry ; <nl> - import net . minecraftforge . registries . RegistryManager ; <nl> import net . minecraftforge . versions . forge . ForgeVersion ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . Marker ; <nl> @ @ - 70 , 36 + 80 , 59 @ @ public class ClientHooks <nl> <nl> private static final ResourceLocation iconSheet = new ResourceLocation ( ForgeVersion . MOD _ ID , " textures / gui / icons . png " ) ; <nl> @ Nullable <nl> + <nl> public static void processForgeListPingData ( ServerStatusResponse packet , ServerData target ) <nl> { <nl> - if ( packet . getForgeData ( ) ! = null ) { <nl> - int numberOfMods = packet . getForgeData ( ) . getNumberOfMods ( ) ; <nl> - int fmlver = packet . getForgeData ( ) . getFMLNetworkVersion ( ) ; <nl> + if ( packet . getForgeData ( ) ! = null ) { <nl> + final Map < String , String > mods = packet . getForgeData ( ) . getRemoteModData ( ) ; <nl> + final Map < ResourceLocation , Pair < String , Boolean > > remoteChannels = packet . getForgeData ( ) . getRemoteChannels ( ) ; <nl> + final int fmlver = packet . getForgeData ( ) . getFMLNetworkVersion ( ) ; <nl> + <nl> + boolean fmlNetMatches = fmlver = = FMLNetworkConstants . FMLNETVERSION ; <nl> + boolean channelsMatch = NetworkRegistry . checkListPingCompatibilityForClient ( remoteChannels ) ; <nl> + AtomicBoolean result = new AtomicBoolean ( true ) ; <nl> + ModList . get ( ) . forEachModContainer ( ( modid , mc ) - > mc . getCustomExtension ( ExtensionPoint . DISPLAYTEST ) . ifPresent ( ext - > <nl> + result . compareAndSet ( true , ext . getRight ( ) . test ( mods . get ( modid ) , true ) ) ) ) ; <nl> + boolean modsMatch = result . get ( ) ; <nl> <nl> - boolean b = NetworkRegistry . checkListPingCompatibilityForClient ( packet . getForgeData ( ) . getPresentMods ( ) ) <nl> - & & fmlver = = FMLNetworkConstants . FMLNETVERSION ; <nl> + final Map < String , String > extraServerMods = mods . entrySet ( ) . stream ( ) . <nl> + filter ( e - > ! Objects . equals ( FMLNetworkConstants . IGNORESERVERONLY , e . getValue ( ) ) ) . <nl> + filter ( e - > ! ModList . get ( ) . isLoaded ( e . getKey ( ) ) ) . <nl> + collect ( Collectors . toMap ( Map . Entry : : getKey , Map . Entry : : getValue ) ) ; <nl> <nl> - LOGGER . debug ( CLIENTHOOKS , " Received FML ping data from server at { } : FMLNETVER = { } , { } mods , channels : [ { } ] - compatible : { } " , target . serverIP , fmlver , numberOfMods , packet . getForgeData ( ) . getPresentMods ( ) . entrySet ( ) , b ) ; <nl> + LOGGER . debug ( CLIENTHOOKS , " Received FML ping data from server at { } : FMLNETVER = { } , mod list is compatible : { } , channel list is compatible : { } , extra server mods : { } " , target . serverIP , fmlver , modsMatch , channelsMatch , extraServerMods ) ; <nl> <nl> String extraReason = null ; <nl> - if ( fmlver < FMLNetworkConstants . FMLNETVERSION ) <nl> + <nl> + if ( ! extraServerMods . isEmpty ( ) ) { <nl> + extraReason = " fml . menu . multiplayer . extraservermods " ; <nl> + } <nl> + if ( ! modsMatch ) { <nl> + extraReason = " fml . menu . multiplayer . modsincompatible " ; <nl> + } <nl> + if ( ! channelsMatch ) { <nl> + extraReason = " fml . menu . multiplayer . networkincompatible " ; <nl> + } <nl> + <nl> + if ( fmlver < FMLNetworkConstants . FMLNETVERSION ) { <nl> extraReason = " fml . menu . multiplayer . serveroutdated " ; <nl> - else if ( fmlver > FMLNetworkConstants . FMLNETVERSION ) <nl> + } <nl> + if ( fmlver > FMLNetworkConstants . FMLNETVERSION ) { <nl> extraReason = " fml . menu . multiplayer . clientoutdated " ; <nl> - <nl> - target . forgeData = new ExtendedServerListData ( " FML " , b , packet . getForgeData ( ) . getPresentMods ( ) , numberOfMods , extraReason ) ; <nl> - } else { <nl> - target . forgeData = new ExtendedServerListData ( " VANILLA " , NetworkRegistry . canConnectToVanillaServer ( ) , Maps . newHashMap ( ) , 0 , null ) ; <nl> + } <nl> + target . forgeData = new ExtendedServerListData ( " FML " , extraServerMods . isEmpty ( ) & & fmlNetMatches & & channelsMatch & & modsMatch , mods . size ( ) , extraReason ) ; <nl> + } else { <nl> + target . forgeData = new ExtendedServerListData ( " VANILLA " , NetworkRegistry . canConnectToVanillaServer ( ) , 0 , null ) ; <nl> } <nl> <nl> } <nl> <nl> - public static void drawForgePingInfo ( GuiMultiplayer gui , ServerData target , int x , int y , int width , int relativeMouseX , int relativeMouseY ) { <nl> + public static void drawForgePingInfo ( GuiMultiplayer gui , ServerData target , int x , int y , int width , int relativeMouseX , int relativeMouseY ) { <nl> int idx ; <nl> String tooltip ; <nl> - if ( target . forgeData = = null ) <nl> + if ( target . forgeData = = null ) <nl> return ; <nl> - switch ( target . forgeData . type ) { <nl> + switch ( target . forgeData . type ) { <nl> case " FML " : <nl> if ( target . forgeData . isCompatible ) { <nl> idx = 0 ; <nl> @ @ - 115 , 7 + 148 , 7 @ @ public class ClientHooks <nl> } <nl> break ; <nl> case " VANILLA " : <nl> - if ( target . forgeData . isCompatible ) { <nl> + if ( target . forgeData . isCompatible ) { <nl> idx = 48 ; <nl> tooltip = ForgeI18n . parseMessage ( " fml . menu . multiplayer . vanilla " ) ; <nl> } else { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / ExtendedServerListData . java b / src / main / java / net / minecraftforge / fml / client / ExtendedServerListData . java <nl> index 51c4ce9 . . 746dfc8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / ExtendedServerListData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / ExtendedServerListData . java <nl> @ @ - 19 , 23 + 19 , 16 @ @ <nl> <nl> package net . minecraftforge . fml . client ; <nl> <nl> - import net . minecraft . util . ResourceLocation ; <nl> - import org . apache . commons . lang3 . tuple . Pair ; <nl> - <nl> - import java . util . Map ; <nl> - <nl> public class ExtendedServerListData { <nl> public final String type ; <nl> public final boolean isCompatible ; <nl> - public final Map < ResourceLocation , Pair < String , Boolean > > channelData ; <nl> public int numberOfMods ; <nl> public String extraReason ; <nl> <nl> - public ExtendedServerListData ( String type , boolean isCompatible , Map < ResourceLocation , Pair < String , Boolean > > channelData , int num , String extraReason ) <nl> + public ExtendedServerListData ( String type , boolean isCompatible , int num , String extraReason ) <nl> { <nl> this . type = type ; <nl> this . isCompatible = isCompatible ; <nl> - this . channelData = channelData ; <nl> this . numberOfMods = num ; <nl> this . extraReason = extraReason ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java <nl> index 0c2dbe2 . . 9cc72eb 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java <nl> @ @ - 42 , 4 + 42 , 8 @ @ public class FMLNetworkConstants <nl> static final ResourceLocation FML _ PLAY _ RESOURCE = new ResourceLocation ( " fml : play " ) ; <nl> static final SimpleChannel handshakeChannel = NetworkInitialization . getHandshakeChannel ( ) ; <nl> static final SimpleChannel playChannel = NetworkInitialization . getPlayChannel ( ) ; <nl> + / * * <nl> + * Return this value in your { @ link net . minecraftforge . fml . ExtensionPoint # DISPLAYTEST } function to be ignored . <nl> + * / <nl> + public static final String IGNORESERVERONLY = " OHNOES \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 " ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLStatusPing . java b / src / main / java / net / minecraftforge / fml / network / FMLStatusPing . java <nl> index bd50d47 . . 074c530 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLStatusPing . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLStatusPing . java <nl> @ @ - 20 , 80 + 20 , 124 @ @ <nl> package net . minecraftforge . fml . network ; <nl> <nl> import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Maps ; <nl> - import com . google . gson . * ; <nl> + import com . google . gson . JsonArray ; <nl> + import com . google . gson . JsonDeserializationContext ; <nl> + import com . google . gson . JsonElement ; <nl> + import com . google . gson . JsonObject ; <nl> + import com . google . gson . JsonSerializationContext ; <nl> + import com . google . gson . JsonSyntaxException ; <nl> import net . minecraft . util . JsonUtils ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . ExtensionPoint ; <nl> import net . minecraftforge . fml . ModList ; <nl> - import net . minecraftforge . registries . RegistryManager ; <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> <nl> + import java . util . HashMap ; <nl> import java . util . Map ; <nl> + import java . util . function . Supplier ; <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . StreamSupport ; <nl> <nl> - public class FMLStatusPing { <nl> + import static net . minecraftforge . fml . network . FMLNetworkConstants . NETWORK ; <nl> <nl> - private Map < ResourceLocation , Pair < String , Boolean > > channelVersions ; <nl> - private int numberOfMods ; <nl> - private int fmlNetworkVer ; <nl> + / * * <nl> + * { <nl> + * " fmlNetworkVersion " : FMLNETVERSION , <nl> + * " channels " : [ <nl> + * { <nl> + * " res " : " fml : handshake " , <nl> + * " version " : " 1 . 2 . 3 . 4 " , <nl> + * " required " : true <nl> + * } <nl> + * ] , <nl> + * " mods " : [ <nl> + * { <nl> + * " modid " : " modid " , <nl> + * " modmarker " : " < somestring > " <nl> + * } <nl> + * ] <nl> + * } <nl> + * <nl> + * / <nl> + public class FMLStatusPing { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> <nl> - public FMLStatusPing ( ) { <nl> - this . channelVersions = NetworkRegistry . buildChannelVersionsForListPing ( ) ; <nl> - this . numberOfMods = ModList . get ( ) . size ( ) ; <nl> + private transient Map < ResourceLocation , Pair < String , Boolean > > channels ; <nl> + private transient Map < String , String > mods ; <nl> + private transient int fmlNetworkVer ; <nl> + public FMLStatusPing ( ) { <nl> + this . channels = NetworkRegistry . buildChannelVersionsForListPing ( ) ; <nl> + this . mods = new HashMap < > ( ) ; <nl> + ModList . get ( ) . forEachModContainer ( ( modid , mc ) - > <nl> + mods . put ( modid , mc . getCustomExtension ( ExtensionPoint . DISPLAYTEST ) . <nl> + map ( Pair : : getLeft ) . map ( Supplier : : get ) . orElse ( FMLNetworkConstants . IGNORESERVERONLY ) ) ) ; <nl> this . fmlNetworkVer = FMLNetworkConstants . FMLNETVERSION ; <nl> } <nl> <nl> - private FMLStatusPing ( Map < ResourceLocation , Pair < String , Boolean > > deserialized , int nom , int fmlNetVer ) { <nl> - this . channelVersions = ImmutableMap . copyOf ( deserialized ) ; <nl> - this . numberOfMods = nom ; <nl> + private FMLStatusPing ( Map < ResourceLocation , Pair < String , Boolean > > deserialized , Map < String , String > modMarkers , int fmlNetVer ) { <nl> + this . channels = ImmutableMap . copyOf ( deserialized ) ; <nl> + this . mods = modMarkers ; <nl> this . fmlNetworkVer = fmlNetVer ; <nl> } <nl> <nl> public static class Serializer { <nl> - <nl> public static FMLStatusPing deserialize ( JsonObject forgeData , JsonDeserializationContext ctx ) { <nl> try { <nl> - JsonArray mods = JsonUtils . getJsonArray ( forgeData , " mods " ) ; <nl> - Map < ResourceLocation , Pair < String , Boolean > > versions = Maps . newHashMap ( ) ; <nl> - for ( JsonElement el : mods ) { <nl> - JsonObject jo = el . getAsJsonObject ( ) ; <nl> - ResourceLocation name = new ResourceLocation ( JsonUtils . getString ( jo , " namespace " ) , JsonUtils . getString ( jo , " path " ) ) ; <nl> - String version = JsonUtils . getString ( jo , " version " ) ; <nl> - Boolean canBeAbsent = JsonUtils . getBoolean ( jo , " mayBeAbsent " ) ; <nl> - versions . put ( name , Pair . of ( version , canBeAbsent ) ) ; <nl> - } <nl> - return new FMLStatusPing ( versions , JsonUtils . getInt ( forgeData , " numberOfMods " ) , JsonUtils . getInt ( forgeData , " fmlNetworkVersion " ) ) ; <nl> - } catch ( Exception c ) { <nl> + final Map < ResourceLocation , Pair < String , Boolean > > channels = StreamSupport . stream ( JsonUtils . getJsonArray ( forgeData , " channels " ) . spliterator ( ) , false ) . <nl> + map ( JsonElement : : getAsJsonObject ) . <nl> + collect ( Collectors . toMap ( jo - > new ResourceLocation ( JsonUtils . getString ( jo , " res " ) ) , <nl> + jo - > Pair . of ( JsonUtils . getString ( jo , " version " ) , JsonUtils . getBoolean ( jo , " required " ) ) ) <nl> + ) ; <nl> + <nl> + final Map < String , String > mods = StreamSupport . stream ( JsonUtils . getJsonArray ( forgeData , " mods " ) . spliterator ( ) , false ) . <nl> + map ( JsonElement : : getAsJsonObject ) . <nl> + collect ( Collectors . toMap ( jo - > JsonUtils . getString ( jo , " modId " ) , jo - > JsonUtils . getString ( jo , " modmarker " ) ) ) ; <nl> + <nl> + final int remoteFMLVersion = JsonUtils . getInt ( forgeData , " fmlNetworkVersion " ) ; <nl> + return new FMLStatusPing ( channels , mods , remoteFMLVersion ) ; <nl> + } catch ( JsonSyntaxException e ) { <nl> + LOGGER . debug ( NETWORK , " Encountered an error parsing status ping data " , e ) ; <nl> return null ; <nl> } <nl> } <nl> <nl> - public static JsonObject serialize ( FMLStatusPing forgeData , JsonSerializationContext ctx ) { <nl> + public static JsonObject serialize ( FMLStatusPing forgeData , JsonSerializationContext ctx ) { <nl> JsonObject obj = new JsonObject ( ) ; <nl> - JsonArray mods = new JsonArray ( ) ; <nl> - forgeData . channelVersions . entrySet ( ) . stream ( ) . map ( p - > { <nl> + JsonArray channels = new JsonArray ( ) ; <nl> + forgeData . channels . forEach ( ( namespace , version ) - > { <nl> + JsonObject mi = new JsonObject ( ) ; <nl> + mi . addProperty ( " res " , namespace . toString ( ) ) ; <nl> + mi . addProperty ( " version " , version . getLeft ( ) ) ; <nl> + mi . addProperty ( " required " , version . getRight ( ) ) ; <nl> + channels . add ( mi ) ; <nl> + } ) ; <nl> + <nl> + obj . add ( " channels " , channels ) ; <nl> + <nl> + JsonArray modTestValues = new JsonArray ( ) ; <nl> + forgeData . mods . forEach ( ( modId , value ) - > { <nl> JsonObject mi = new JsonObject ( ) ; <nl> - mi . addProperty ( " namespace " , p . getKey ( ) . getNamespace ( ) ) ; <nl> - mi . addProperty ( " path " , p . getKey ( ) . getPath ( ) ) ; <nl> - mi . addProperty ( " version " , p . getValue ( ) . getKey ( ) ) ; <nl> - mi . addProperty ( " mayBeAbsent " , p . getValue ( ) . getValue ( ) ) ; <nl> - return mi ; <nl> - } ) . forEach ( mods : : add ) ; <nl> - obj . add ( " mods " , mods ) ; <nl> - obj . addProperty ( " numberOfMods " , forgeData . numberOfMods ) ; <nl> + mi . addProperty ( " modId " , modId ) ; <nl> + mi . addProperty ( " modmarker " , value ) ; <nl> + modTestValues . add ( mi ) ; <nl> + } ) ; <nl> + obj . add ( " mods " , modTestValues ) ; <nl> obj . addProperty ( " fmlNetworkVersion " , forgeData . fmlNetworkVer ) ; <nl> return obj ; <nl> } <nl> } <nl> <nl> - public Map < ResourceLocation , Pair < String , Boolean > > getPresentMods ( ) { <nl> - return this . channelVersions ; <nl> + public Map < ResourceLocation , Pair < String , Boolean > > getRemoteChannels ( ) { <nl> + return this . channels ; <nl> } <nl> <nl> - public int getNumberOfMods ( ) { <nl> - return numberOfMods ; <nl> + public Map < String , String > getRemoteModData ( ) { <nl> + return mods ; <nl> } <nl> <nl> - public int getFMLNetworkVersion ( ) { <nl> + public int getFMLNetworkVersion ( ) { <nl> return fmlNetworkVer ; <nl> } <nl> <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json <nl> index 80387ad . . 1851d5d 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ us . json <nl> + + + b / src / main / resources / assets / forge / lang / en _ us . json <nl> @ @ - 15 , 14 + 15 , 17 @ @ <nl> " fml . menu . mods . info . childmods " : " Child mods : { 0 } " , <nl> " fml . menu . mods . info . updateavailable " : " Update available : { 0 } " , <nl> " fml . menu . mods . info . changelogheader " : " Changelog : " , <nl> - " fml . menu . multiplayer . compatible " : " Compatible FML modded server , { 0 , choice , 1 # 1 mod | 1 < { 0 } mods } present " , <nl> + " fml . menu . multiplayer . compatible " : " Compatible FML modded server \ n { 0 , choice , 1 # 1 mod | 1 < { 0 } mods } present " , <nl> " fml . menu . multiplayer . incompatible " : " Incompatible FML modded server " , <nl> - " fml . menu . multiplayer . incompatible . extra " : " Incompatible FML modded server - { } " , <nl> + " fml . menu . multiplayer . incompatible . extra " : " Incompatible FML modded server \ n { 0 } " , <nl> " fml . menu . multiplayer . vanilla " : " Vanilla server " , <nl> " fml . menu . multiplayer . vanilla . incompatible " : " Incompatible Vanilla server " , <nl> " fml . menu . multiplayer . unknown " : " Unknown server { 0 } " , <nl> - " fml . menu . multiplayer . serveroutdated " : " Outdated server " , <nl> - " fml . menu . multiplayer . clientoutdated " : " Outdated client " , <nl> + " fml . menu . multiplayer . serveroutdated " : " The Forge server network version is outdated " , <nl> + " fml . menu . multiplayer . clientoutdated " : " The Forge client network version is outdated " , <nl> + " fml . menu . multiplayer . extraservermods " : " The Server has additional mods that may be needed on the client " , <nl> + " fml . menu . multiplayer . modsincompatible " : " The Server ' s mods are not compatible " , <nl> + " fml . menu . multiplayer . networkincompatible " : " The Server ' s network messages are not compatible " , <nl> " fml . menu . loadingmods " : " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " , <nl> " fml . button . open . file " : " Open { 0 } " , <nl> " fml . button . open . mods . folder " : " Open Mods Folder " ,
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java b / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java <nl> index 3a51300 . . 8227193 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java <nl> + + + b / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java <nl> @ @ - 109 , 7 + 109 , 7 @ @ public class DeferredWorkQueue <nl> * @ return A { @ link CompletableFuture } that completes at said time <nl> * / <nl> public static CompletableFuture < Void > runLater ( Runnable workToEnqueue ) { <nl> - currentOwner . set ( ModThreadContext . get ( ) . getActiveContainer ( ) ) ; <nl> + currentOwner . set ( ModLoadingContext . get ( ) . getActiveContainer ( ) ) ; <nl> return CompletableFuture . runAsync ( workToEnqueue , deferredExecutor ) . exceptionally ( DeferredWorkQueue . handleException ( ) ) ; <nl> } <nl> <nl> @ @ - 154 , 7 + 154 , 7 @ @ public class DeferredWorkQueue <nl> * @ return A { @ link CompletableFuture } that completes at said time <nl> * / <nl> public static < T > CompletableFuture < T > getLater ( Supplier < T > workToEnqueue ) { <nl> - currentOwner . set ( ModThreadContext . get ( ) . getActiveContainer ( ) ) ; <nl> + currentOwner . set ( ModLoadingContext . get ( ) . getActiveContainer ( ) ) ; <nl> return CompletableFuture . supplyAsync ( workToEnqueue , deferredExecutor ) . exceptionally ( DeferredWorkQueue . handleException ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java <nl> index d087bc0 . . 9cce0ba 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java <nl> @ @ - 22 , 14 + 22 , 23 @ @ package net . minecraftforge . fml ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . resources . IResourcePack ; <nl> + import net . minecraftforge . fml . network . FMLPlayMessages ; <nl> import net . minecraftforge . fml . packs . ModFileResourcePack ; <nl> <nl> import java . util . function . BiFunction ; <nl> + import java . util . function . Function ; <nl> <nl> public class ExtensionPoint < T > <nl> { <nl> - public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; <nl> + public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > CONFIGGUIFACTORY = new ExtensionPoint < > ( ) ; <nl> public static final ExtensionPoint < BiFunction < Minecraft , ModFileResourcePack , IResourcePack > > RESOURCEPACK = new ExtensionPoint < > ( ) ; <nl> + <nl> + / * * <nl> + * Register with { @ link ModLoadingContext # } <nl> + * / <nl> + public static final ExtensionPoint < Function < FMLPlayMessages . OpenContainer , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; <nl> + <nl> + <nl> private Class < T > type ; <nl> <nl> private ExtensionPoint ( ) { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> index 4afbf87 . . 92a7c7a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> @ @ - 115 , 11 + 115 , 11 @ @ public abstract class ModContainer <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public < T > Optional < T > getCustomExtension ( ExtensionPoint point ) { <nl> + public < T > Optional < T > getCustomExtension ( ExtensionPoint < T > point ) { <nl> return Optional . ofNullable ( ( T ) extensionPoints . getOrDefault ( point , ( ) - > null ) . get ( ) ) ; <nl> } <nl> <nl> - public < T > void registerExtensionPoint ( ExtensionPoint point , Supplier < T > extension ) <nl> + public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) <nl> { <nl> extensionPoints . put ( point , extension ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingContext . java b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java <nl> new file mode 100644 <nl> index 0000000 . . d654666 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2019 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import java . util . function . Supplier ; <nl> + <nl> + public class ModLoadingContext <nl> + { <nl> + private static ThreadLocal < ModLoadingContext > context = ThreadLocal . withInitial ( ModLoadingContext : : new ) ; <nl> + <nl> + public static ModLoadingContext get ( ) { <nl> + return context . get ( ) ; <nl> + } <nl> + <nl> + private ModContainer activeContainer ; <nl> + <nl> + public void setActiveContainer ( final ModContainer container ) { <nl> + this . activeContainer = container ; <nl> + } <nl> + <nl> + public ModContainer getActiveContainer ( ) { <nl> + return activeContainer = = null ? DefaultModContainers . MINECRAFT : activeContainer ; <nl> + } <nl> + <nl> + / * * <nl> + * Register an { @ link ExtensionPoint } with the mod container . <nl> + * @ param point The extension point to register <nl> + * @ param extension An extension operator <nl> + * @ param < T > The type signature of the extension operator <nl> + * / <nl> + public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) { <nl> + getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModThreadContext . java b / src / main / java / net / minecraftforge / fml / ModThreadContext . java <nl> deleted file mode 100644 <nl> index 9bf7e8f . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModThreadContext . java <nl> + + + / dev / null <nl> @ @ - 1 , 39 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2019 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . fml ; <nl> - <nl> - public class ModThreadContext <nl> - { <nl> - private static ThreadLocal < ModThreadContext > context = ThreadLocal . withInitial ( ModThreadContext : : new ) ; <nl> - <nl> - public static ModThreadContext get ( ) { <nl> - return context . get ( ) ; <nl> - } <nl> - <nl> - private ModContainer activeContainer ; <nl> - <nl> - public void setActiveContainer ( final ModContainer container ) { <nl> - this . activeContainer = container ; <nl> - } <nl> - <nl> - public ModContainer getActiveContainer ( ) { <nl> - return activeContainer = = null ? DefaultModContainers . MINECRAFT : activeContainer ; <nl> - } <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java b / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java <nl> index b258b4c . . c12d63f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java <nl> @ @ - 33 , 6 + 33 , 6 @ @ public class ConfigGuiHandler <nl> public static Optional < BiFunction < Minecraft , GuiScreen , GuiScreen > > getGuiFactoryFor ( ModInfo selectedMod ) <nl> { <nl> return ModList . get ( ) . getModContainerById ( selectedMod . getModId ( ) ) . <nl> - flatMap ( mc - > mc . getCustomExtension ( ExtensionPoint . GUIFACTORY ) ) ; <nl> + flatMap ( mc - > mc . getCustomExtension ( ExtensionPoint . CONFIGGUIFACTORY ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> index af47613 . . e226229 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ import net . minecraftforge . fml . LifecycleEventProvider ; <nl> import net . minecraftforge . fml . ModContainer ; <nl> import net . minecraftforge . fml . ModLoadingException ; <nl> import net . minecraftforge . fml . ModLoadingStage ; <nl> - import net . minecraftforge . fml . ModThreadContext ; <nl> + import net . minecraftforge . fml . ModLoadingContext ; <nl> import net . minecraftforge . forgespi . language . IModInfo ; <nl> import net . minecraftforge . forgespi . language . ModFileScanData ; <nl> <nl> @ @ - 94 , 7 + 94 , 7 @ @ public class FMLModContainer extends ModContainer <nl> <nl> private void beforeEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> FMLModLoadingContext . get ( ) . setActiveContainer ( this ) ; <nl> - ModThreadContext . get ( ) . setActiveContainer ( this ) ; <nl> + ModLoadingContext . get ( ) . setActiveContainer ( this ) ; <nl> } <nl> <nl> private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class FMLModContainer extends ModContainer <nl> } <nl> <nl> private void afterEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> - ModThreadContext . get ( ) . setActiveContainer ( null ) ; <nl> + ModLoadingContext . get ( ) . setActiveContainer ( null ) ; <nl> FMLModLoadingContext . get ( ) . setActiveContainer ( null ) ; <nl> if ( getCurrentState ( ) = = ModLoadingStage . ERROR ) { <nl> LOGGER . error ( LOADING , " An error occurred while dispatching event { } to { } " , lifecycleEvent . fromStage ( ) , getModId ( ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> index 2c4459a . . 3a6cfd7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> @ @ - 34 , 23 + 34 , 26 @ @ public class FMLModLoadingContext <nl> return context . get ( ) ; <nl> } <nl> <nl> - public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) { <nl> - getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; <nl> - } <nl> - <nl> public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { <nl> - activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer ) ) ; <nl> + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) ) ) ; <nl> } <nl> <nl> public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { <nl> - activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer , fileName ) ) ; <nl> + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) , fileName ) ) ; <nl> } <nl> <nl> + / * * <nl> + * @ return The mod ' s event bus , to allow subscription to Mod specific events <nl> + * / <nl> public IEventBus getModEventBus ( ) <nl> { <nl> return getActiveContainer ( ) . getEventBus ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Only valid during { @ link net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent } dispatch and Mod construction <nl> + * @ return the active FML container <nl> + * / <nl> public FMLModContainer getActiveContainer ( ) <nl> { <nl> return activeContainer ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> index ab10cd9 . . 34436ee 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> @ @ - 19 , 20 + 19 , 19 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> - import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . Unpooled ; <nl> import net . minecraft . client . Minecraft ; <nl> - import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityTracker ; <nl> import net . minecraft . entity . EntityType ; <nl> import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . math . MathHelper ; <nl> + import net . minecraftforge . fml . ExtensionPoint ; <nl> + import net . minecraftforge . fml . ModList ; <nl> import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; <nl> <nl> import java . util . UUID ; <nl> - import java . util . function . Function ; <nl> import java . util . function . Supplier ; <nl> <nl> public class FMLPlayMessages <nl> @ @ - 166 , 9 + 165 , 9 @ @ public class FMLPlayMessages <nl> { <nl> private final ResourceLocation id ; <nl> private final int windowId ; <nl> - private final byte [ ] additionalData ; <nl> + private final PacketBuffer additionalData ; <nl> <nl> - public OpenContainer ( ResourceLocation id , int windowId , byte [ ] additionalData ) <nl> + OpenContainer ( ResourceLocation id , int windowId , PacketBuffer additionalData ) <nl> { <nl> this . id = id ; <nl> this . windowId = windowId ; <nl> @ @ - 179 , 27 + 178 , 34 @ @ public class FMLPlayMessages <nl> { <nl> buf . writeResourceLocation ( msg . id ) ; <nl> buf . writeVarInt ( msg . windowId ) ; <nl> - buf . writeByteArray ( msg . additionalData ) ; <nl> + buf . writeBytes ( msg . additionalData ) ; <nl> } <nl> <nl> public static OpenContainer decode ( PacketBuffer buf ) <nl> { <nl> - return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , buf . readByteArray ( ) ) ; <nl> + return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , new PacketBuffer ( Unpooled . wrappedBuffer ( buf . readByteArray ( 32600 ) ) ) ) ; <nl> } <nl> <nl> public static void handle ( OpenContainer msg , Supplier < NetworkEvent . Context > ctx ) <nl> { <nl> - ctx . get ( ) . enqueueWork ( ( ) - > { <nl> - Supplier < Function < ByteBuf , GuiScreen > > sup = NetworkRegistry . guiHandlers . get ( msg . id ) ; <nl> - if ( sup ! = null ) { <nl> - GuiScreen gui = sup . get ( ) . apply ( Unpooled . wrappedBuffer ( msg . additionalData ) ) ; <nl> - if ( gui ! = null ) { <nl> - Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; <nl> - Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; <nl> - } <nl> - } <nl> - } ) ; <nl> + ctx . get ( ) . enqueueWork ( ( ) - > ModList . get ( ) . getModContainerById ( msg . id . getNamespace ( ) ) . ifPresent ( mc - > <nl> + mc . getCustomExtension ( ExtensionPoint . GUIFACTORY ) . map ( f - > f . apply ( msg ) ) . ifPresent ( gui - > { <nl> + Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; <nl> + Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; <nl> + } ) ) ) ; <nl> ctx . get ( ) . setPacketHandled ( true ) ; <nl> } <nl> + <nl> + public final ResourceLocation getId ( ) { <nl> + return this . id ; <nl> + } <nl> + <nl> + public int getWindowId ( ) { <nl> + return windowId ; <nl> + } <nl> + <nl> + public PacketBuffer getAdditionalData ( ) { <nl> + return additionalData ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> index cb16e72 . . 20131bb 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> @ @ - 19 , 13 + 19 , 14 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> - import io . netty . buffer . ByteBuf ; <nl> + import io . netty . buffer . Unpooled ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . player . EntityPlayerMP ; <nl> import net . minecraft . inventory . Container ; <nl> import net . minecraft . network . NetHandlerPlayServer ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . Packet ; <nl> + import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . network . handshake . client . CPacketHandshake ; <nl> import net . minecraft . server . network . NetHandlerLoginServer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 87 , 10 + 88 , 22 @ @ public class NetworkHooks <nl> return FMLHandshakeHandler . tickLogin ( networkManager ) ; <nl> } <nl> <nl> - public static void openGui ( EntityPlayerMP player , IInteractionObject container , @ Nullable ByteBuf extraData ) <nl> + / * * <nl> + * Server method to tell the client to open a GUI on behalf of the server <nl> + * <nl> + * The { @ link IInteractionObject # getGuiID ( ) } is treated as a { @ link ResourceLocation } . <nl> + * It should refer to a valid modId namespace , to trigger opening on the client . <nl> + * The namespace is directly used to lookup the modId in the client side . <nl> + * <nl> + * @ param player The player to open the GUI for <nl> + * @ param containerSupplier The Container Supplier <nl> + * @ param extraData Additional data for the GUI <nl> + * / <nl> + public static void openGui ( EntityPlayerMP player , IInteractionObject containerSupplier , @ Nullable PacketBuffer extraData ) <nl> { <nl> - ResourceLocation id = new ResourceLocation ( container . getGuiID ( ) ) ; <nl> - Container c = container . createContainer ( player . inventory , player ) ; <nl> + if ( player . world . isRemote ) return ; <nl> + ResourceLocation id = new ResourceLocation ( containerSupplier . getGuiID ( ) ) ; <nl> + Container c = containerSupplier . createContainer ( player . inventory , player ) ; <nl> player . closeScreen ( ) ; <nl> player . getNextWindowId ( ) ; <nl> player . openContainer = c ; <nl> @ @ - 98 , 14 + 111 , 13 @ @ public class NetworkHooks <nl> player . openContainer . addListener ( player ) ; <nl> MinecraftForge . EVENT _ BUS . post ( new PlayerContainerEvent . Open ( player , c ) ) ; <nl> <nl> - byte [ ] additional ; <nl> if ( extraData = = null ) { <nl> - additional = new byte [ 0 ] ; <nl> - } else { <nl> - additional = new byte [ extraData . readableBytes ( ) ] ; <nl> - extraData . readBytes ( additional ) ; <nl> + extraData = new PacketBuffer ( Unpooled . buffer ( ) ) ; <nl> } <nl> - FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , additional ) ; <nl> + if ( extraData . readableBytes ( ) > 32600 ) { <nl> + throw new IllegalArgumentException ( " GUI Open packet too large : " + extraData . readableBytes ( ) ) ; <nl> + } <nl> + FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , extraData ) ; <nl> FMLPlayHandler . channel . sendTo ( msg , player . connection . getNetworkManager ( ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> index 36e6717 . . 41a60c4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> @ @ - 19 , 8 + 19 , 6 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> - import io . netty . buffer . ByteBuf ; <nl> - import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . nbt . NBTTagList ; <nl> import net . minecraft . network . NetworkManager ; <nl> @ @ - 34 , 10 + 32 , 12 @ @ import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> - import java . util . * ; <nl> - import java . util . concurrent . ConcurrentHashMap ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Optional ; <nl> import java . util . function . BiFunction ; <nl> - import java . util . function . Function ; <nl> import java . util . function . Predicate ; <nl> import java . util . function . Supplier ; <nl> import java . util . stream . Collectors ; <nl> @ @ - 51 , 21 + 51 , 6 @ @ public class NetworkRegistry <nl> private static final Marker NETREGISTRY = MarkerManager . getMarker ( " NETREGISTRY " ) ; <nl> <nl> private static Map < ResourceLocation , NetworkInstance > instances = new HashMap < > ( ) ; <nl> - static final Map < ResourceLocation , Supplier < Function < ByteBuf , GuiScreen > > > guiHandlers = new ConcurrentHashMap < > ( ) ; <nl> - <nl> - / * * <nl> - * Registers a client - side GUI handler for the given ID . <nl> - * The function takes any extra data provided to { @ link net . minecraft . entity . player . EntityPlayer # openGui } <nl> - * and returns a { @ link GuiScreen } to display . <nl> - * Call this during { @ link net . minecraftforge . fml . event . lifecycle . FMLClientSetupEvent } . <nl> - * This method is safe to call in parallel mod loading <nl> - * @ param id <nl> - * @ param handler <nl> - * / <nl> - public static void registerGui ( ResourceLocation id , Supplier < Function < ByteBuf , GuiScreen > > handler ) <nl> - { <nl> - guiHandlers . put ( id , handler ) ; <nl> - } <nl> <nl> / * * <nl> * Special value for clientAcceptedVersions and serverAcceptedVersions predicates indicating the other side lacks <nl> diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> index a9c3bf9 . . d259c3b 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> @ @ - 28 , 13 + 28 , 12 @ @ import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> <nl> import javax . annotation . Nonnull ; <nl> - import net . minecraftforge . fml . ModThreadContext ; <nl> + import net . minecraftforge . fml . ModLoadingContext ; <nl> import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; <nl> import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; <nl> import org . apache . commons . lang3 . Validate ; <nl> <nl> import java . util . Set ; <nl> - import java . util . stream . Collectors ; <nl> <nl> import com . google . common . base . Preconditions ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> @ @ - 280 , 7 + 279 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> int add ( int id , V value ) <nl> { <nl> - final String owner = ModThreadContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; <nl> + final String owner = ModLoadingContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; <nl> return add ( id , value , owner ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 24203a5 . . 7cdbd6b 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . event . RegistryEvent ; <nl> import net . minecraftforge . event . RegistryEvent . MissingMappings ; <nl> import net . minecraftforge . fml . LifecycleEventProvider ; <nl> - import net . minecraftforge . fml . ModThreadContext ; <nl> + import net . minecraftforge . fml . ModLoadingContext ; <nl> import net . minecraftforge . fml . StartupQuery ; <nl> import net . minecraftforge . fml . common . EnhancedRuntimeException ; <nl> import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfession ; <nl> @ @ - 51 , 8 + 51 , 6 @ @ import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; <nl> import org . apache . commons . lang3 . Validate ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> - import org . apache . logging . log4j . Marker ; <nl> - import org . apache . logging . log4j . MarkerManager ; <nl> <nl> import javax . annotation . Nullable ; <nl> import java . lang . reflect . Field ; <nl> @ @ - 66 , 7 + 64 , 6 @ @ import java . util . function . Consumer ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Collectors ; <nl> <nl> - import static net . minecraftforge . fml . Logging . CORE ; <nl> import static net . minecraftforge . registries . ForgeRegistry . REGISTRIES ; <nl> <nl> / * * <nl> @ @ - 828 , 7 + 825 , 7 @ @ public class GameData <nl> int index = name . lastIndexOf ( ' : ' ) ; <nl> String oldPrefix = index = = - 1 ? " " : name . substring ( 0 , index ) . toLowerCase ( Locale . ROOT ) ; <nl> name = index = = - 1 ? name : name . substring ( index + 1 ) ; <nl> - String prefix = ModThreadContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; <nl> + String prefix = ModLoadingContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; <nl> if ( ! oldPrefix . equals ( prefix ) & & oldPrefix . length ( ) > 0 ) <nl> { <nl> LogManager . getLogger ( ) . info ( " Potentially Dangerous alternative prefix ` { } ` for name ` { } ` , expected ` { } ` . This could be a intended override , but in most cases indicates a broken mod . " , oldPrefix , name , prefix ) ;

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / network / ServerStatusResponse . java . patch b / patches / minecraft / net / minecraft / network / ServerStatusResponse . java . patch 
 index ddc1d9b . . c6f5124 100644 
 - - - a / patches / minecraft / net / minecraft / network / ServerStatusResponse . java . patch 
 + + + b / patches / minecraft / net / minecraft / network / ServerStatusResponse . java . patch 
 @ @ - 4 , 7 + 4 , 7 @ @ 
 private ServerStatusResponse . Players field _ 151324 _ b ; 
 private ServerStatusResponse . Version field _ 151325 _ c ; 
 private String field _ 151323 _ d ; 
 - + private net . minecraftforge . fml . network . FMLStatusPing forgeData ; 
 + + private transient net . minecraftforge . fml . network . FMLStatusPing forgeData ; 
 
 + public net . minecraftforge . fml . network . FMLStatusPing getForgeData ( ) { 
 + return this . forgeData ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 index e633d3b . . 6972abf 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . common ; 
 import net . minecraftforge . eventbus . api . IEventBus ; 
 import net . minecraftforge . fml . BrandingControl ; 
 import net . minecraftforge . fml . DistExecutor ; 
 + import net . minecraftforge . fml . ExtensionPoint ; 
 import net . minecraftforge . fml . FMLWorldPersistenceHook ; 
 import net . minecraftforge . fml . ModLoadingContext ; 
 import net . minecraftforge . fml . VersionChecker ; 
 @ @ - 38 , 6 + 39 , 7 @ @ import net . minecraftforge . server . command . ForgeCommand ; 
 import net . minecraftforge . versions . forge . ForgeVersion ; 
 import net . minecraftforge . versions . mcp . MCPVersion ; 
 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 @ @ - 99 , 6 + 101 , 8 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook 
 ModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . CLIENT , ForgeConfig . clientSpec ) ; 
 ModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . SERVER , ForgeConfig . serverSpec ) ; 
 modEventBus . register ( ForgeConfig . class ) ; 
 + / / Forge does not display problems when the remote is not matching . 
 + ModLoadingContext . get ( ) . registerExtensionPoint ( ExtensionPoint . DISPLAYTEST , ( ) - > Pair . of ( ( ) - > " ANY " , ( remote , isServer ) - > true ) ) ; 
 } 
 
 / * 
 diff - - git a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java 
 index 9cce0ba . . b845e15 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java 
 + + + b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java 
 @ @ - 24 , 17 + 24 , 28 @ @ import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . resources . IResourcePack ; 
 import net . minecraftforge . fml . network . FMLPlayMessages ; 
 import net . minecraftforge . fml . packs . ModFileResourcePack ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 
 import java . util . function . BiFunction ; 
 + import java . util . function . BiPredicate ; 
 import java . util . function . Function ; 
 + import java . util . function . Supplier ; 
 
 public class ExtensionPoint < T > 
 { 
 public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > CONFIGGUIFACTORY = new ExtensionPoint < > ( ) ; 
 public static final ExtensionPoint < BiFunction < Minecraft , ModFileResourcePack , IResourcePack > > RESOURCEPACK = new ExtensionPoint < > ( ) ; 
 + / * * 
 + * Compatibility display test for the mod . 
 + * Used for displaying compatibility with remote servers with the same mod , and on disk saves . 
 + * 
 + * The supplier provides my " local " version for sending across the network or writing to disk 
 + * The predicate tests the version from a remote instance or save for acceptability ( Boolean is true for network , false for local save ) 
 + * / 
 + public static final ExtensionPoint < Pair < Supplier < String > , BiPredicate < String , Boolean > > > DISPLAYTEST = new ExtensionPoint < > ( ) ; 
 
 / * * 
 - * Register with { @ link ModLoadingContext # } 
 + * Register with { @ link ModLoadingContext # registerExtensionPoint ( ExtensionPoint , Supplier ) } 
 * / 
 public static final ExtensionPoint < Function < FMLPlayMessages . OpenContainer , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 index 684fea1 . . c1856b7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 @ @ - 21 , 8 + 21 , 16 @ @ package net . minecraftforge . fml ; 
 
 import net . minecraftforge . fml . config . ModConfig ; 
 import net . minecraftforge . forgespi . language . IModInfo ; 
 - 
 - import java . util . * ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 + 
 + import java . util . Collections ; 
 + import java . util . EnumMap ; 
 + import java . util . HashMap ; 
 + import java . util . IdentityHashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Objects ; 
 + import java . util . Optional ; 
 import java . util . function . Consumer ; 
 import java . util . function . Supplier ; 
 
 @ @ - 60 , 6 + 68 , 9 @ @ public abstract class ModContainer 
 this . modInfo = info ; 
 this . triggerMap = new HashMap < > ( ) ; 
 this . modLoadingStage = ModLoadingStage . CONSTRUCT ; 
 + / / default displaytest extension checks for version string match 
 + registerExtensionPoint ( ExtensionPoint . DISPLAYTEST , ( ) - > Pair . of ( ( ) - > this . modInfo . getVersion ( ) . toString ( ) , 
 + ( incoming , isNetwork ) - > Objects . equals ( incoming , this . modInfo . getVersion ( ) . toString ( ) ) ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java 
 index 5039a7c . . 7a0a438 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModList . java 
 @ @ - 183 , 4 + 183 , 8 @ @ public class ModList 
 { 
 modFiles . stream ( ) . map ( ModFileInfo : : getFile ) . forEach ( fileConsumer ) ; 
 } 
 + 
 + public void forEachModContainer ( BiConsumer < String , ModContainer > modContainerConsumer ) { 
 + indexedMods . forEach ( modContainerConsumer ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / ClientHooks . java b / src / main / java / net / minecraftforge / fml / client / ClientHooks . java 
 index 6abd292 . . 147f7ef 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / ClientHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / ClientHooks . java 
 @ @ - 22 , 18 + 22 , 28 @ @ package net . minecraftforge . fml . client ; 
 import java . io . File ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Objects ; 
 import java . util . Set ; 
 + import java . util . concurrent . atomic . AtomicBoolean ; 
 import java . util . stream . Collectors ; 
 
 import javax . annotation . Nullable ; 
 
 - import com . google . common . collect . * ; 
 - import net . minecraft . client . gui . * ; 
 + import com . google . common . collect . HashBasedTable ; 
 + import com . google . common . collect . HashMultimap ; 
 + import com . google . common . collect . SetMultimap ; 
 + import com . google . common . collect . Sets ; 
 + import com . google . common . collect . Table ; 
 + import net . minecraft . client . gui . Gui ; 
 + import net . minecraft . client . gui . GuiMultiplayer ; 
 + import net . minecraft . client . gui . GuiWorldSelection ; 
 + import net . minecraftforge . fml . ExtensionPoint ; 
 import net . minecraftforge . fml . ForgeI18n ; 
 + import net . minecraftforge . fml . ModList ; 
 import net . minecraftforge . fml . network . FMLNetworkConstants ; 
 import net . minecraftforge . fml . network . NetworkRegistry ; 
 - import net . minecraftforge . registries . RegistryManager ; 
 import net . minecraftforge . versions . forge . ForgeVersion ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . Marker ; 
 @ @ - 70 , 36 + 80 , 59 @ @ public class ClientHooks 
 
 private static final ResourceLocation iconSheet = new ResourceLocation ( ForgeVersion . MOD _ ID , " textures / gui / icons . png " ) ; 
 @ Nullable 
 + 
 public static void processForgeListPingData ( ServerStatusResponse packet , ServerData target ) 
 { 
 - if ( packet . getForgeData ( ) ! = null ) { 
 - int numberOfMods = packet . getForgeData ( ) . getNumberOfMods ( ) ; 
 - int fmlver = packet . getForgeData ( ) . getFMLNetworkVersion ( ) ; 
 + if ( packet . getForgeData ( ) ! = null ) { 
 + final Map < String , String > mods = packet . getForgeData ( ) . getRemoteModData ( ) ; 
 + final Map < ResourceLocation , Pair < String , Boolean > > remoteChannels = packet . getForgeData ( ) . getRemoteChannels ( ) ; 
 + final int fmlver = packet . getForgeData ( ) . getFMLNetworkVersion ( ) ; 
 + 
 + boolean fmlNetMatches = fmlver = = FMLNetworkConstants . FMLNETVERSION ; 
 + boolean channelsMatch = NetworkRegistry . checkListPingCompatibilityForClient ( remoteChannels ) ; 
 + AtomicBoolean result = new AtomicBoolean ( true ) ; 
 + ModList . get ( ) . forEachModContainer ( ( modid , mc ) - > mc . getCustomExtension ( ExtensionPoint . DISPLAYTEST ) . ifPresent ( ext - > 
 + result . compareAndSet ( true , ext . getRight ( ) . test ( mods . get ( modid ) , true ) ) ) ) ; 
 + boolean modsMatch = result . get ( ) ; 
 
 - boolean b = NetworkRegistry . checkListPingCompatibilityForClient ( packet . getForgeData ( ) . getPresentMods ( ) ) 
 - & & fmlver = = FMLNetworkConstants . FMLNETVERSION ; 
 + final Map < String , String > extraServerMods = mods . entrySet ( ) . stream ( ) . 
 + filter ( e - > ! Objects . equals ( FMLNetworkConstants . IGNORESERVERONLY , e . getValue ( ) ) ) . 
 + filter ( e - > ! ModList . get ( ) . isLoaded ( e . getKey ( ) ) ) . 
 + collect ( Collectors . toMap ( Map . Entry : : getKey , Map . Entry : : getValue ) ) ; 
 
 - LOGGER . debug ( CLIENTHOOKS , " Received FML ping data from server at { } : FMLNETVER = { } , { } mods , channels : [ { } ] - compatible : { } " , target . serverIP , fmlver , numberOfMods , packet . getForgeData ( ) . getPresentMods ( ) . entrySet ( ) , b ) ; 
 + LOGGER . debug ( CLIENTHOOKS , " Received FML ping data from server at { } : FMLNETVER = { } , mod list is compatible : { } , channel list is compatible : { } , extra server mods : { } " , target . serverIP , fmlver , modsMatch , channelsMatch , extraServerMods ) ; 
 
 String extraReason = null ; 
 - if ( fmlver < FMLNetworkConstants . FMLNETVERSION ) 
 + 
 + if ( ! extraServerMods . isEmpty ( ) ) { 
 + extraReason = " fml . menu . multiplayer . extraservermods " ; 
 + } 
 + if ( ! modsMatch ) { 
 + extraReason = " fml . menu . multiplayer . modsincompatible " ; 
 + } 
 + if ( ! channelsMatch ) { 
 + extraReason = " fml . menu . multiplayer . networkincompatible " ; 
 + } 
 + 
 + if ( fmlver < FMLNetworkConstants . FMLNETVERSION ) { 
 extraReason = " fml . menu . multiplayer . serveroutdated " ; 
 - else if ( fmlver > FMLNetworkConstants . FMLNETVERSION ) 
 + } 
 + if ( fmlver > FMLNetworkConstants . FMLNETVERSION ) { 
 extraReason = " fml . menu . multiplayer . clientoutdated " ; 
 - 
 - target . forgeData = new ExtendedServerListData ( " FML " , b , packet . getForgeData ( ) . getPresentMods ( ) , numberOfMods , extraReason ) ; 
 - } else { 
 - target . forgeData = new ExtendedServerListData ( " VANILLA " , NetworkRegistry . canConnectToVanillaServer ( ) , Maps . newHashMap ( ) , 0 , null ) ; 
 + } 
 + target . forgeData = new ExtendedServerListData ( " FML " , extraServerMods . isEmpty ( ) & & fmlNetMatches & & channelsMatch & & modsMatch , mods . size ( ) , extraReason ) ; 
 + } else { 
 + target . forgeData = new ExtendedServerListData ( " VANILLA " , NetworkRegistry . canConnectToVanillaServer ( ) , 0 , null ) ; 
 } 
 
 } 
 
 - public static void drawForgePingInfo ( GuiMultiplayer gui , ServerData target , int x , int y , int width , int relativeMouseX , int relativeMouseY ) { 
 + public static void drawForgePingInfo ( GuiMultiplayer gui , ServerData target , int x , int y , int width , int relativeMouseX , int relativeMouseY ) { 
 int idx ; 
 String tooltip ; 
 - if ( target . forgeData = = null ) 
 + if ( target . forgeData = = null ) 
 return ; 
 - switch ( target . forgeData . type ) { 
 + switch ( target . forgeData . type ) { 
 case " FML " : 
 if ( target . forgeData . isCompatible ) { 
 idx = 0 ; 
 @ @ - 115 , 7 + 148 , 7 @ @ public class ClientHooks 
 } 
 break ; 
 case " VANILLA " : 
 - if ( target . forgeData . isCompatible ) { 
 + if ( target . forgeData . isCompatible ) { 
 idx = 48 ; 
 tooltip = ForgeI18n . parseMessage ( " fml . menu . multiplayer . vanilla " ) ; 
 } else { 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / ExtendedServerListData . java b / src / main / java / net / minecraftforge / fml / client / ExtendedServerListData . java 
 index 51c4ce9 . . 746dfc8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / ExtendedServerListData . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / ExtendedServerListData . java 
 @ @ - 19 , 23 + 19 , 16 @ @ 
 
 package net . minecraftforge . fml . client ; 
 
 - import net . minecraft . util . ResourceLocation ; 
 - import org . apache . commons . lang3 . tuple . Pair ; 
 - 
 - import java . util . Map ; 
 - 
 public class ExtendedServerListData { 
 public final String type ; 
 public final boolean isCompatible ; 
 - public final Map < ResourceLocation , Pair < String , Boolean > > channelData ; 
 public int numberOfMods ; 
 public String extraReason ; 
 
 - public ExtendedServerListData ( String type , boolean isCompatible , Map < ResourceLocation , Pair < String , Boolean > > channelData , int num , String extraReason ) 
 + public ExtendedServerListData ( String type , boolean isCompatible , int num , String extraReason ) 
 { 
 this . type = type ; 
 this . isCompatible = isCompatible ; 
 - this . channelData = channelData ; 
 this . numberOfMods = num ; 
 this . extraReason = extraReason ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java 
 index 0c2dbe2 . . 9cc72eb 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLNetworkConstants . java 
 @ @ - 42 , 4 + 42 , 8 @ @ public class FMLNetworkConstants 
 static final ResourceLocation FML _ PLAY _ RESOURCE = new ResourceLocation ( " fml : play " ) ; 
 static final SimpleChannel handshakeChannel = NetworkInitialization . getHandshakeChannel ( ) ; 
 static final SimpleChannel playChannel = NetworkInitialization . getPlayChannel ( ) ; 
 + / * * 
 + * Return this value in your { @ link net . minecraftforge . fml . ExtensionPoint # DISPLAYTEST } function to be ignored . 
 + * / 
 + public static final String IGNORESERVERONLY = " OHNOES \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 \ uD83D \ uDE31 " ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLStatusPing . java b / src / main / java / net / minecraftforge / fml / network / FMLStatusPing . java 
 index bd50d47 . . 074c530 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLStatusPing . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLStatusPing . java 
 @ @ - 20 , 80 + 20 , 124 @ @ 
 package net . minecraftforge . fml . network ; 
 
 import com . google . common . collect . ImmutableMap ; 
 - import com . google . common . collect . Maps ; 
 - import com . google . gson . * ; 
 + import com . google . gson . JsonArray ; 
 + import com . google . gson . JsonDeserializationContext ; 
 + import com . google . gson . JsonElement ; 
 + import com . google . gson . JsonObject ; 
 + import com . google . gson . JsonSerializationContext ; 
 + import com . google . gson . JsonSyntaxException ; 
 import net . minecraft . util . JsonUtils ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . ExtensionPoint ; 
 import net . minecraftforge . fml . ModList ; 
 - import net . minecraftforge . registries . RegistryManager ; 
 import org . apache . commons . lang3 . tuple . Pair ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 
 + import java . util . HashMap ; 
 import java . util . Map ; 
 + import java . util . function . Supplier ; 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . StreamSupport ; 
 
 - public class FMLStatusPing { 
 + import static net . minecraftforge . fml . network . FMLNetworkConstants . NETWORK ; 
 
 - private Map < ResourceLocation , Pair < String , Boolean > > channelVersions ; 
 - private int numberOfMods ; 
 - private int fmlNetworkVer ; 
 + / * * 
 + * { 
 + * " fmlNetworkVersion " : FMLNETVERSION , 
 + * " channels " : [ 
 + * { 
 + * " res " : " fml : handshake " , 
 + * " version " : " 1 . 2 . 3 . 4 " , 
 + * " required " : true 
 + * } 
 + * ] , 
 + * " mods " : [ 
 + * { 
 + * " modid " : " modid " , 
 + * " modmarker " : " < somestring > " 
 + * } 
 + * ] 
 + * } 
 + * 
 + * / 
 + public class FMLStatusPing { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 
 - public FMLStatusPing ( ) { 
 - this . channelVersions = NetworkRegistry . buildChannelVersionsForListPing ( ) ; 
 - this . numberOfMods = ModList . get ( ) . size ( ) ; 
 + private transient Map < ResourceLocation , Pair < String , Boolean > > channels ; 
 + private transient Map < String , String > mods ; 
 + private transient int fmlNetworkVer ; 
 + public FMLStatusPing ( ) { 
 + this . channels = NetworkRegistry . buildChannelVersionsForListPing ( ) ; 
 + this . mods = new HashMap < > ( ) ; 
 + ModList . get ( ) . forEachModContainer ( ( modid , mc ) - > 
 + mods . put ( modid , mc . getCustomExtension ( ExtensionPoint . DISPLAYTEST ) . 
 + map ( Pair : : getLeft ) . map ( Supplier : : get ) . orElse ( FMLNetworkConstants . IGNORESERVERONLY ) ) ) ; 
 this . fmlNetworkVer = FMLNetworkConstants . FMLNETVERSION ; 
 } 
 
 - private FMLStatusPing ( Map < ResourceLocation , Pair < String , Boolean > > deserialized , int nom , int fmlNetVer ) { 
 - this . channelVersions = ImmutableMap . copyOf ( deserialized ) ; 
 - this . numberOfMods = nom ; 
 + private FMLStatusPing ( Map < ResourceLocation , Pair < String , Boolean > > deserialized , Map < String , String > modMarkers , int fmlNetVer ) { 
 + this . channels = ImmutableMap . copyOf ( deserialized ) ; 
 + this . mods = modMarkers ; 
 this . fmlNetworkVer = fmlNetVer ; 
 } 
 
 public static class Serializer { 
 - 
 public static FMLStatusPing deserialize ( JsonObject forgeData , JsonDeserializationContext ctx ) { 
 try { 
 - JsonArray mods = JsonUtils . getJsonArray ( forgeData , " mods " ) ; 
 - Map < ResourceLocation , Pair < String , Boolean > > versions = Maps . newHashMap ( ) ; 
 - for ( JsonElement el : mods ) { 
 - JsonObject jo = el . getAsJsonObject ( ) ; 
 - ResourceLocation name = new ResourceLocation ( JsonUtils . getString ( jo , " namespace " ) , JsonUtils . getString ( jo , " path " ) ) ; 
 - String version = JsonUtils . getString ( jo , " version " ) ; 
 - Boolean canBeAbsent = JsonUtils . getBoolean ( jo , " mayBeAbsent " ) ; 
 - versions . put ( name , Pair . of ( version , canBeAbsent ) ) ; 
 - } 
 - return new FMLStatusPing ( versions , JsonUtils . getInt ( forgeData , " numberOfMods " ) , JsonUtils . getInt ( forgeData , " fmlNetworkVersion " ) ) ; 
 - } catch ( Exception c ) { 
 + final Map < ResourceLocation , Pair < String , Boolean > > channels = StreamSupport . stream ( JsonUtils . getJsonArray ( forgeData , " channels " ) . spliterator ( ) , false ) . 
 + map ( JsonElement : : getAsJsonObject ) . 
 + collect ( Collectors . toMap ( jo - > new ResourceLocation ( JsonUtils . getString ( jo , " res " ) ) , 
 + jo - > Pair . of ( JsonUtils . getString ( jo , " version " ) , JsonUtils . getBoolean ( jo , " required " ) ) ) 
 + ) ; 
 + 
 + final Map < String , String > mods = StreamSupport . stream ( JsonUtils . getJsonArray ( forgeData , " mods " ) . spliterator ( ) , false ) . 
 + map ( JsonElement : : getAsJsonObject ) . 
 + collect ( Collectors . toMap ( jo - > JsonUtils . getString ( jo , " modId " ) , jo - > JsonUtils . getString ( jo , " modmarker " ) ) ) ; 
 + 
 + final int remoteFMLVersion = JsonUtils . getInt ( forgeData , " fmlNetworkVersion " ) ; 
 + return new FMLStatusPing ( channels , mods , remoteFMLVersion ) ; 
 + } catch ( JsonSyntaxException e ) { 
 + LOGGER . debug ( NETWORK , " Encountered an error parsing status ping data " , e ) ; 
 return null ; 
 } 
 } 
 
 - public static JsonObject serialize ( FMLStatusPing forgeData , JsonSerializationContext ctx ) { 
 + public static JsonObject serialize ( FMLStatusPing forgeData , JsonSerializationContext ctx ) { 
 JsonObject obj = new JsonObject ( ) ; 
 - JsonArray mods = new JsonArray ( ) ; 
 - forgeData . channelVersions . entrySet ( ) . stream ( ) . map ( p - > { 
 + JsonArray channels = new JsonArray ( ) ; 
 + forgeData . channels . forEach ( ( namespace , version ) - > { 
 + JsonObject mi = new JsonObject ( ) ; 
 + mi . addProperty ( " res " , namespace . toString ( ) ) ; 
 + mi . addProperty ( " version " , version . getLeft ( ) ) ; 
 + mi . addProperty ( " required " , version . getRight ( ) ) ; 
 + channels . add ( mi ) ; 
 + } ) ; 
 + 
 + obj . add ( " channels " , channels ) ; 
 + 
 + JsonArray modTestValues = new JsonArray ( ) ; 
 + forgeData . mods . forEach ( ( modId , value ) - > { 
 JsonObject mi = new JsonObject ( ) ; 
 - mi . addProperty ( " namespace " , p . getKey ( ) . getNamespace ( ) ) ; 
 - mi . addProperty ( " path " , p . getKey ( ) . getPath ( ) ) ; 
 - mi . addProperty ( " version " , p . getValue ( ) . getKey ( ) ) ; 
 - mi . addProperty ( " mayBeAbsent " , p . getValue ( ) . getValue ( ) ) ; 
 - return mi ; 
 - } ) . forEach ( mods : : add ) ; 
 - obj . add ( " mods " , mods ) ; 
 - obj . addProperty ( " numberOfMods " , forgeData . numberOfMods ) ; 
 + mi . addProperty ( " modId " , modId ) ; 
 + mi . addProperty ( " modmarker " , value ) ; 
 + modTestValues . add ( mi ) ; 
 + } ) ; 
 + obj . add ( " mods " , modTestValues ) ; 
 obj . addProperty ( " fmlNetworkVersion " , forgeData . fmlNetworkVer ) ; 
 return obj ; 
 } 
 } 
 
 - public Map < ResourceLocation , Pair < String , Boolean > > getPresentMods ( ) { 
 - return this . channelVersions ; 
 + public Map < ResourceLocation , Pair < String , Boolean > > getRemoteChannels ( ) { 
 + return this . channels ; 
 } 
 
 - public int getNumberOfMods ( ) { 
 - return numberOfMods ; 
 + public Map < String , String > getRemoteModData ( ) { 
 + return mods ; 
 } 
 
 - public int getFMLNetworkVersion ( ) { 
 + public int getFMLNetworkVersion ( ) { 
 return fmlNetworkVer ; 
 } 
 
 diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json 
 index 80387ad . . 1851d5d 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ us . json 
 + + + b / src / main / resources / assets / forge / lang / en _ us . json 
 @ @ - 15 , 14 + 15 , 17 @ @ 
 " fml . menu . mods . info . childmods " : " Child mods : { 0 } " , 
 " fml . menu . mods . info . updateavailable " : " Update available : { 0 } " , 
 " fml . menu . mods . info . changelogheader " : " Changelog : " , 
 - " fml . menu . multiplayer . compatible " : " Compatible FML modded server , { 0 , choice , 1 # 1 mod | 1 < { 0 } mods } present " , 
 + " fml . menu . multiplayer . compatible " : " Compatible FML modded server \ n { 0 , choice , 1 # 1 mod | 1 < { 0 } mods } present " , 
 " fml . menu . multiplayer . incompatible " : " Incompatible FML modded server " , 
 - " fml . menu . multiplayer . incompatible . extra " : " Incompatible FML modded server - { } " , 
 + " fml . menu . multiplayer . incompatible . extra " : " Incompatible FML modded server \ n { 0 } " , 
 " fml . menu . multiplayer . vanilla " : " Vanilla server " , 
 " fml . menu . multiplayer . vanilla . incompatible " : " Incompatible Vanilla server " , 
 " fml . menu . multiplayer . unknown " : " Unknown server { 0 } " , 
 - " fml . menu . multiplayer . serveroutdated " : " Outdated server " , 
 - " fml . menu . multiplayer . clientoutdated " : " Outdated client " , 
 + " fml . menu . multiplayer . serveroutdated " : " The Forge server network version is outdated " , 
 + " fml . menu . multiplayer . clientoutdated " : " The Forge client network version is outdated " , 
 + " fml . menu . multiplayer . extraservermods " : " The Server has additional mods that may be needed on the client " , 
 + " fml . menu . multiplayer . modsincompatible " : " The Server ' s mods are not compatible " , 
 + " fml . menu . multiplayer . networkincompatible " : " The Server ' s network messages are not compatible " , 
 " fml . menu . loadingmods " : " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " , 
 " fml . button . open . file " : " Open { 0 } " , 
 " fml . button . open . mods . folder " : " Open Mods Folder " ,

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java b / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java 
 index 3a51300 . . 8227193 100644 
 - - - a / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java 
 + + + b / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java 
 @ @ - 109 , 7 + 109 , 7 @ @ public class DeferredWorkQueue 
 * @ return A { @ link CompletableFuture } that completes at said time 
 * / 
 public static CompletableFuture < Void > runLater ( Runnable workToEnqueue ) { 
 - currentOwner . set ( ModThreadContext . get ( ) . getActiveContainer ( ) ) ; 
 + currentOwner . set ( ModLoadingContext . get ( ) . getActiveContainer ( ) ) ; 
 return CompletableFuture . runAsync ( workToEnqueue , deferredExecutor ) . exceptionally ( DeferredWorkQueue . handleException ( ) ) ; 
 } 
 
 @ @ - 154 , 7 + 154 , 7 @ @ public class DeferredWorkQueue 
 * @ return A { @ link CompletableFuture } that completes at said time 
 * / 
 public static < T > CompletableFuture < T > getLater ( Supplier < T > workToEnqueue ) { 
 - currentOwner . set ( ModThreadContext . get ( ) . getActiveContainer ( ) ) ; 
 + currentOwner . set ( ModLoadingContext . get ( ) . getActiveContainer ( ) ) ; 
 return CompletableFuture . supplyAsync ( workToEnqueue , deferredExecutor ) . exceptionally ( DeferredWorkQueue . handleException ( ) ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java 
 index d087bc0 . . 9cce0ba 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java 
 + + + b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java 
 @ @ - 22 , 14 + 22 , 23 @ @ package net . minecraftforge . fml ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . resources . IResourcePack ; 
 + import net . minecraftforge . fml . network . FMLPlayMessages ; 
 import net . minecraftforge . fml . packs . ModFileResourcePack ; 
 
 import java . util . function . BiFunction ; 
 + import java . util . function . Function ; 
 
 public class ExtensionPoint < T > 
 { 
 - public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; 
 + public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > CONFIGGUIFACTORY = new ExtensionPoint < > ( ) ; 
 public static final ExtensionPoint < BiFunction < Minecraft , ModFileResourcePack , IResourcePack > > RESOURCEPACK = new ExtensionPoint < > ( ) ; 
 + 
 + / * * 
 + * Register with { @ link ModLoadingContext # } 
 + * / 
 + public static final ExtensionPoint < Function < FMLPlayMessages . OpenContainer , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; 
 + 
 + 
 private Class < T > type ; 
 
 private ExtensionPoint ( ) { 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 index 4afbf87 . . 92a7c7a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 @ @ - 115 , 11 + 115 , 11 @ @ public abstract class ModContainer 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - public < T > Optional < T > getCustomExtension ( ExtensionPoint point ) { 
 + public < T > Optional < T > getCustomExtension ( ExtensionPoint < T > point ) { 
 return Optional . ofNullable ( ( T ) extensionPoints . getOrDefault ( point , ( ) - > null ) . get ( ) ) ; 
 } 
 
 - public < T > void registerExtensionPoint ( ExtensionPoint point , Supplier < T > extension ) 
 + public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) 
 { 
 extensionPoints . put ( point , extension ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingContext . java b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java 
 new file mode 100644 
 index 0000000 . . d654666 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2019 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml ; 
 + 
 + import java . util . function . Supplier ; 
 + 
 + public class ModLoadingContext 
 + { 
 + private static ThreadLocal < ModLoadingContext > context = ThreadLocal . withInitial ( ModLoadingContext : : new ) ; 
 + 
 + public static ModLoadingContext get ( ) { 
 + return context . get ( ) ; 
 + } 
 + 
 + private ModContainer activeContainer ; 
 + 
 + public void setActiveContainer ( final ModContainer container ) { 
 + this . activeContainer = container ; 
 + } 
 + 
 + public ModContainer getActiveContainer ( ) { 
 + return activeContainer = = null ? DefaultModContainers . MINECRAFT : activeContainer ; 
 + } 
 + 
 + / * * 
 + * Register an { @ link ExtensionPoint } with the mod container . 
 + * @ param point The extension point to register 
 + * @ param extension An extension operator 
 + * @ param < T > The type signature of the extension operator 
 + * / 
 + public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) { 
 + getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModThreadContext . java b / src / main / java / net / minecraftforge / fml / ModThreadContext . java 
 deleted file mode 100644 
 index 9bf7e8f . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / ModThreadContext . java 
 + + + / dev / null 
 @ @ - 1 , 39 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2019 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . fml ; 
 - 
 - public class ModThreadContext 
 - { 
 - private static ThreadLocal < ModThreadContext > context = ThreadLocal . withInitial ( ModThreadContext : : new ) ; 
 - 
 - public static ModThreadContext get ( ) { 
 - return context . get ( ) ; 
 - } 
 - 
 - private ModContainer activeContainer ; 
 - 
 - public void setActiveContainer ( final ModContainer container ) { 
 - this . activeContainer = container ; 
 - } 
 - 
 - public ModContainer getActiveContainer ( ) { 
 - return activeContainer = = null ? DefaultModContainers . MINECRAFT : activeContainer ; 
 - } 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java b / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java 
 index b258b4c . . c12d63f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java 
 @ @ - 33 , 6 + 33 , 6 @ @ public class ConfigGuiHandler 
 public static Optional < BiFunction < Minecraft , GuiScreen , GuiScreen > > getGuiFactoryFor ( ModInfo selectedMod ) 
 { 
 return ModList . get ( ) . getModContainerById ( selectedMod . getModId ( ) ) . 
 - flatMap ( mc - > mc . getCustomExtension ( ExtensionPoint . GUIFACTORY ) ) ; 
 + flatMap ( mc - > mc . getCustomExtension ( ExtensionPoint . CONFIGGUIFACTORY ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 index af47613 . . e226229 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 @ @ - 28 , 7 + 28 , 7 @ @ import net . minecraftforge . fml . LifecycleEventProvider ; 
 import net . minecraftforge . fml . ModContainer ; 
 import net . minecraftforge . fml . ModLoadingException ; 
 import net . minecraftforge . fml . ModLoadingStage ; 
 - import net . minecraftforge . fml . ModThreadContext ; 
 + import net . minecraftforge . fml . ModLoadingContext ; 
 import net . minecraftforge . forgespi . language . IModInfo ; 
 import net . minecraftforge . forgespi . language . ModFileScanData ; 
 
 @ @ - 94 , 7 + 94 , 7 @ @ public class FMLModContainer extends ModContainer 
 
 private void beforeEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 FMLModLoadingContext . get ( ) . setActiveContainer ( this ) ; 
 - ModThreadContext . get ( ) . setActiveContainer ( this ) ; 
 + ModLoadingContext . get ( ) . setActiveContainer ( this ) ; 
 } 
 
 private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 @ @ - 113 , 7 + 113 , 7 @ @ public class FMLModContainer extends ModContainer 
 } 
 
 private void afterEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 - ModThreadContext . get ( ) . setActiveContainer ( null ) ; 
 + ModLoadingContext . get ( ) . setActiveContainer ( null ) ; 
 FMLModLoadingContext . get ( ) . setActiveContainer ( null ) ; 
 if ( getCurrentState ( ) = = ModLoadingStage . ERROR ) { 
 LOGGER . error ( LOADING , " An error occurred while dispatching event { } to { } " , lifecycleEvent . fromStage ( ) , getModId ( ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 index 2c4459a . . 3a6cfd7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 @ @ - 34 , 23 + 34 , 26 @ @ public class FMLModLoadingContext 
 return context . get ( ) ; 
 } 
 
 - public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) { 
 - getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; 
 - } 
 - 
 public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { 
 - activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer ) ) ; 
 + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) ) ) ; 
 } 
 
 public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { 
 - activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer , fileName ) ) ; 
 + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) , fileName ) ) ; 
 } 
 
 + / * * 
 + * @ return The mod ' s event bus , to allow subscription to Mod specific events 
 + * / 
 public IEventBus getModEventBus ( ) 
 { 
 return getActiveContainer ( ) . getEventBus ( ) ; 
 } 
 
 + / * * 
 + * Only valid during { @ link net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent } dispatch and Mod construction 
 + * @ return the active FML container 
 + * / 
 public FMLModContainer getActiveContainer ( ) 
 { 
 return activeContainer ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 index ab10cd9 . . 34436ee 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 @ @ - 19 , 20 + 19 , 19 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 - import io . netty . buffer . ByteBuf ; 
 import io . netty . buffer . Unpooled ; 
 import net . minecraft . client . Minecraft ; 
 - import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityTracker ; 
 import net . minecraft . entity . EntityType ; 
 import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . math . MathHelper ; 
 + import net . minecraftforge . fml . ExtensionPoint ; 
 + import net . minecraftforge . fml . ModList ; 
 import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; 
 
 import java . util . UUID ; 
 - import java . util . function . Function ; 
 import java . util . function . Supplier ; 
 
 public class FMLPlayMessages 
 @ @ - 166 , 9 + 165 , 9 @ @ public class FMLPlayMessages 
 { 
 private final ResourceLocation id ; 
 private final int windowId ; 
 - private final byte [ ] additionalData ; 
 + private final PacketBuffer additionalData ; 
 
 - public OpenContainer ( ResourceLocation id , int windowId , byte [ ] additionalData ) 
 + OpenContainer ( ResourceLocation id , int windowId , PacketBuffer additionalData ) 
 { 
 this . id = id ; 
 this . windowId = windowId ; 
 @ @ - 179 , 27 + 178 , 34 @ @ public class FMLPlayMessages 
 { 
 buf . writeResourceLocation ( msg . id ) ; 
 buf . writeVarInt ( msg . windowId ) ; 
 - buf . writeByteArray ( msg . additionalData ) ; 
 + buf . writeBytes ( msg . additionalData ) ; 
 } 
 
 public static OpenContainer decode ( PacketBuffer buf ) 
 { 
 - return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , buf . readByteArray ( ) ) ; 
 + return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , new PacketBuffer ( Unpooled . wrappedBuffer ( buf . readByteArray ( 32600 ) ) ) ) ; 
 } 
 
 public static void handle ( OpenContainer msg , Supplier < NetworkEvent . Context > ctx ) 
 { 
 - ctx . get ( ) . enqueueWork ( ( ) - > { 
 - Supplier < Function < ByteBuf , GuiScreen > > sup = NetworkRegistry . guiHandlers . get ( msg . id ) ; 
 - if ( sup ! = null ) { 
 - GuiScreen gui = sup . get ( ) . apply ( Unpooled . wrappedBuffer ( msg . additionalData ) ) ; 
 - if ( gui ! = null ) { 
 - Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; 
 - Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; 
 - } 
 - } 
 - } ) ; 
 + ctx . get ( ) . enqueueWork ( ( ) - > ModList . get ( ) . getModContainerById ( msg . id . getNamespace ( ) ) . ifPresent ( mc - > 
 + mc . getCustomExtension ( ExtensionPoint . GUIFACTORY ) . map ( f - > f . apply ( msg ) ) . ifPresent ( gui - > { 
 + Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; 
 + Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; 
 + } ) ) ) ; 
 ctx . get ( ) . setPacketHandled ( true ) ; 
 } 
 + 
 + public final ResourceLocation getId ( ) { 
 + return this . id ; 
 + } 
 + 
 + public int getWindowId ( ) { 
 + return windowId ; 
 + } 
 + 
 + public PacketBuffer getAdditionalData ( ) { 
 + return additionalData ; 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 index cb16e72 . . 20131bb 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 @ @ - 19 , 13 + 19 , 14 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 - import io . netty . buffer . ByteBuf ; 
 + import io . netty . buffer . Unpooled ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . player . EntityPlayerMP ; 
 import net . minecraft . inventory . Container ; 
 import net . minecraft . network . NetHandlerPlayServer ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . Packet ; 
 + import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . network . handshake . client . CPacketHandshake ; 
 import net . minecraft . server . network . NetHandlerLoginServer ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 87 , 10 + 88 , 22 @ @ public class NetworkHooks 
 return FMLHandshakeHandler . tickLogin ( networkManager ) ; 
 } 
 
 - public static void openGui ( EntityPlayerMP player , IInteractionObject container , @ Nullable ByteBuf extraData ) 
 + / * * 
 + * Server method to tell the client to open a GUI on behalf of the server 
 + * 
 + * The { @ link IInteractionObject # getGuiID ( ) } is treated as a { @ link ResourceLocation } . 
 + * It should refer to a valid modId namespace , to trigger opening on the client . 
 + * The namespace is directly used to lookup the modId in the client side . 
 + * 
 + * @ param player The player to open the GUI for 
 + * @ param containerSupplier The Container Supplier 
 + * @ param extraData Additional data for the GUI 
 + * / 
 + public static void openGui ( EntityPlayerMP player , IInteractionObject containerSupplier , @ Nullable PacketBuffer extraData ) 
 { 
 - ResourceLocation id = new ResourceLocation ( container . getGuiID ( ) ) ; 
 - Container c = container . createContainer ( player . inventory , player ) ; 
 + if ( player . world . isRemote ) return ; 
 + ResourceLocation id = new ResourceLocation ( containerSupplier . getGuiID ( ) ) ; 
 + Container c = containerSupplier . createContainer ( player . inventory , player ) ; 
 player . closeScreen ( ) ; 
 player . getNextWindowId ( ) ; 
 player . openContainer = c ; 
 @ @ - 98 , 14 + 111 , 13 @ @ public class NetworkHooks 
 player . openContainer . addListener ( player ) ; 
 MinecraftForge . EVENT _ BUS . post ( new PlayerContainerEvent . Open ( player , c ) ) ; 
 
 - byte [ ] additional ; 
 if ( extraData = = null ) { 
 - additional = new byte [ 0 ] ; 
 - } else { 
 - additional = new byte [ extraData . readableBytes ( ) ] ; 
 - extraData . readBytes ( additional ) ; 
 + extraData = new PacketBuffer ( Unpooled . buffer ( ) ) ; 
 } 
 - FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , additional ) ; 
 + if ( extraData . readableBytes ( ) > 32600 ) { 
 + throw new IllegalArgumentException ( " GUI Open packet too large : " + extraData . readableBytes ( ) ) ; 
 + } 
 + FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , extraData ) ; 
 FMLPlayHandler . channel . sendTo ( msg , player . connection . getNetworkManager ( ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 index 36e6717 . . 41a60c4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 @ @ - 19 , 8 + 19 , 6 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 - import io . netty . buffer . ByteBuf ; 
 - import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . nbt . NBTTagList ; 
 import net . minecraft . network . NetworkManager ; 
 @ @ - 34 , 10 + 32 , 12 @ @ import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 - import java . util . * ; 
 - import java . util . concurrent . ConcurrentHashMap ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Optional ; 
 import java . util . function . BiFunction ; 
 - import java . util . function . Function ; 
 import java . util . function . Predicate ; 
 import java . util . function . Supplier ; 
 import java . util . stream . Collectors ; 
 @ @ - 51 , 21 + 51 , 6 @ @ public class NetworkRegistry 
 private static final Marker NETREGISTRY = MarkerManager . getMarker ( " NETREGISTRY " ) ; 
 
 private static Map < ResourceLocation , NetworkInstance > instances = new HashMap < > ( ) ; 
 - static final Map < ResourceLocation , Supplier < Function < ByteBuf , GuiScreen > > > guiHandlers = new ConcurrentHashMap < > ( ) ; 
 - 
 - / * * 
 - * Registers a client - side GUI handler for the given ID . 
 - * The function takes any extra data provided to { @ link net . minecraft . entity . player . EntityPlayer # openGui } 
 - * and returns a { @ link GuiScreen } to display . 
 - * Call this during { @ link net . minecraftforge . fml . event . lifecycle . FMLClientSetupEvent } . 
 - * This method is safe to call in parallel mod loading 
 - * @ param id 
 - * @ param handler 
 - * / 
 - public static void registerGui ( ResourceLocation id , Supplier < Function < ByteBuf , GuiScreen > > handler ) 
 - { 
 - guiHandlers . put ( id , handler ) ; 
 - } 
 
 / * * 
 * Special value for clientAcceptedVersions and serverAcceptedVersions predicates indicating the other side lacks 
 diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 index a9c3bf9 . . d259c3b 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 @ @ - 28 , 13 + 28 , 12 @ @ import java . util . Map ; 
 import java . util . Map . Entry ; 
 
 import javax . annotation . Nonnull ; 
 - import net . minecraftforge . fml . ModThreadContext ; 
 + import net . minecraftforge . fml . ModLoadingContext ; 
 import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; 
 import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; 
 import org . apache . commons . lang3 . Validate ; 
 
 import java . util . Set ; 
 - import java . util . stream . Collectors ; 
 
 import com . google . common . base . Preconditions ; 
 import com . google . common . collect . ArrayListMultimap ; 
 @ @ - 280 , 7 + 279 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 int add ( int id , V value ) 
 { 
 - final String owner = ModThreadContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; 
 + final String owner = ModLoadingContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; 
 return add ( id , value , owner ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 24203a5 . . 7cdbd6b 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 42 , 7 + 42 , 7 @ @ import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . event . RegistryEvent ; 
 import net . minecraftforge . event . RegistryEvent . MissingMappings ; 
 import net . minecraftforge . fml . LifecycleEventProvider ; 
 - import net . minecraftforge . fml . ModThreadContext ; 
 + import net . minecraftforge . fml . ModLoadingContext ; 
 import net . minecraftforge . fml . StartupQuery ; 
 import net . minecraftforge . fml . common . EnhancedRuntimeException ; 
 import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfession ; 
 @ @ - 51 , 8 + 51 , 6 @ @ import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; 
 import org . apache . commons . lang3 . Validate ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 - import org . apache . logging . log4j . Marker ; 
 - import org . apache . logging . log4j . MarkerManager ; 
 
 import javax . annotation . Nullable ; 
 import java . lang . reflect . Field ; 
 @ @ - 66 , 7 + 64 , 6 @ @ import java . util . function . Consumer ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Collectors ; 
 
 - import static net . minecraftforge . fml . Logging . CORE ; 
 import static net . minecraftforge . registries . ForgeRegistry . REGISTRIES ; 
 
 / * * 
 @ @ - 828 , 7 + 825 , 7 @ @ public class GameData 
 int index = name . lastIndexOf ( ' : ' ) ; 
 String oldPrefix = index = = - 1 ? " " : name . substring ( 0 , index ) . toLowerCase ( Locale . ROOT ) ; 
 name = index = = - 1 ? name : name . substring ( index + 1 ) ; 
 - String prefix = ModThreadContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; 
 + String prefix = ModLoadingContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; 
 if ( ! oldPrefix . equals ( prefix ) & & oldPrefix . length ( ) > 0 ) 
 { 
 LogManager . getLogger ( ) . info ( " Potentially Dangerous alternative prefix ` { } ` for name ` { } ` , expected ` { } ` . This could be a intended override , but in most cases indicates a broken mod . " , oldPrefix , name , prefix ) ;
