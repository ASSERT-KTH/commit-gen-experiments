BLEU SCORE: 0.021590567826234357

TEST MSG: Launch in the vanilla launcher now .
GENERATED MSG: Add I18n accessor , fix up some mod log messages , make the EnumExtender work .

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index d738775 . . c3801e1 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 161 , 6 + 161 , 7 @ @ project ( ' : forge ' ) { <nl> installer ' com . electronwill . night - config : toml : 3 . 4 . 0 ' <nl> installer ' org . jline : jline : 3 . 5 . 1 ' <nl> installer ' org . apache . maven : maven - artifact : 3 . 5 . 3 ' <nl> + installer ' net . jodah : typetools : 0 . 5 . 0 ' <nl> installer ' java3d : vecmath : 1 . 5 . 2 ' <nl> } <nl> <nl> @ @ - 246 , 16 + 247 , 16 @ @ project ( ' : forge ' ) { <nl> destinationDir = file ( ' build / distributions ' ) <nl> from ( zipTree ( downloadCrowdin . output ) ) { <nl> eachFile { / / Tired of waiting for crowdin API , rename things myself . Remove once crowdin stops being dumb <nl> - if ( it . name . equals ( ' en _ us . json ' ) & & ! it . path . startsWith ( ' assets / ' ) ) { <nl> - it . name = it . path . split ( ' / ' ) [ 0 ] + ' . json ' <nl> - it . path = ' assets / forge / lang / ' + it . name <nl> + if ( it . name . equals ( ' en _ us . json ' ) & & ! it . path . startsWith ( ' assets / ' ) ) { <nl> + it . name = it . path . split ( ' / ' ) [ 0 ] + ' . json ' <nl> + it . path = ' assets / forge / lang / ' + it . name <nl> + } <nl> } <nl> + exclude { it . isDirectory ( ) } <nl> + rename { it . toLowerCase ( ) } / / Minecraft needs it lowercase . <nl> + exclude ' * * / * . lang ' / / Pre - 1 . 13 format <nl> } <nl> - exclude { it . isDirectory ( ) } <nl> - rename { it . toLowerCase ( ) } / / Minecraft needs it lowercase . <nl> - exclude ' * * / * . lang ' / / Pre - 1 . 13 format <nl> } <nl> - } <nl> <nl> / / We apply the bin patches we just created to make a jar that is JUST our changes <nl> task applyClientBinPatches ( type : ApplyBinPatches , dependsOn : genClientBinPatches ) { <nl> @ @ - 314 , 6 + 315 , 7 @ @ project ( ' : forge ' ) { <nl> } <nl> <nl> task launcherJson ( dependsOn : universalJar ) { <nl> + inputs . file universalJar . archivePath <nl> ext { <nl> output = file ( ' build / libs / version . json ' ) <nl> vanilla = project ( ' : mcp ' ) . file ( ' build / mcp / downloadJson / version . json ' ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 4020ca7 . . 5d52259 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 25 , 48 + 25 , 33 @ @ import org . apache . logging . log4j . Logger ; <nl> <nl> import javax . annotation . Nullable ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> + <nl> public class ForgeVersion <nl> { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> / / This is Forge ' s Mod Id , used for the ForgeMod and resource locations <nl> public static final String MOD _ ID = " forge " ; <nl> - / / This number is incremented every time we remove deprecated code / major API changes , never reset <nl> - public static final int majorVersion = 14 ; <nl> - / / This number is incremented every minecraft release , never reset <nl> - public static final int minorVersion = 23 ; <nl> - / / This number is incremented every time a interface changes or new major feature is added , and reset every Minecraft version <nl> - public static final int revisionVersion = 2 ; <nl> - / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> - public static final int buildVersion = 0 ; <nl> / / This is the minecraft version we ' re building for - used in various places in Forge / FML code <nl> public static final String mcVersion = " 1 . 13 " ; <nl> / / This is the MCP data version we ' re using <nl> public static final String mcpVersion = " 9 . 42 " ; <nl> <nl> - private static final Logger log = LogManager . getLogger ( ) ; <nl> - <nl> - public static int getMajorVersion ( ) <nl> - { <nl> - return majorVersion ; <nl> - } <nl> + private static final String forgeVersion ; <nl> <nl> - public static int getMinorVersion ( ) <nl> - { <nl> - return minorVersion ; <nl> - } <nl> - <nl> - public static int getRevisionVersion ( ) <nl> - { <nl> - return revisionVersion ; <nl> - } <nl> - <nl> - public static int getBuildVersion ( ) <nl> - { <nl> - return buildVersion ; <nl> + static { <nl> + String vers = ForgeVersion . class . getPackage ( ) . getImplementationVersion ( ) ; <nl> + if ( vers = = null ) { <nl> + vers = System . getProperty ( " forge . version " ) ; <nl> + } <nl> + if ( vers = = null ) throw new RuntimeException ( " Missing forge version , cannot continue " ) ; <nl> + forgeVersion = vers ; <nl> + LOGGER . info ( CORE , " Found Forge version { } " , forgeVersion ) ; <nl> } <nl> <nl> public static String getVersion ( ) <nl> { <nl> - return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> + return forgeVersion ; <nl> } <nl> <nl> public static VersionChecker . Status getStatus ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / BrandingControl . java b / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> index 8d80fe4 . . 4be2101 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> + + + b / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Lists ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . mcp . MCPVersion ; <nl> <nl> import java . text . MessageFormat ; <nl> import java . util . Arrays ; <nl> @ @ - 41 , 8 + 42 , 8 @ @ public class BrandingControl <nl> if ( brandings = = null ) <nl> { <nl> ImmutableList . Builder < String > brd = ImmutableList . builder ( ) ; <nl> - brd . add ( " Minecraft " + ForgeVersion . mcVersion ) ; <nl> - brd . add ( " MCP " + ForgeVersion . mcpVersion ) ; <nl> + brd . add ( " Minecraft " + MCPVersion . getMCVersion ( ) ) ; <nl> + brd . add ( " MCP " + MCPVersion . getMCPVersion ( ) ) ; <nl> brd . add ( " Forge " + ForgeVersion . getVersion ( ) ) ; <nl> int tModCount = ModList . get ( ) . size ( ) ; <nl> brd . add ( ForgeI18n . parseMessage ( " fml . menu . loadingmods " , tModCount ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index 0d1bce6 . . c613889 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 24 , 6 + 24 , 11 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . mcp . MCPVersion ; <nl> + import org . apache . logging . log4j . Level ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + import org . apache . logging . log4j . core . config . Configurator ; <nl> <nl> import java . net . URISyntaxException ; <nl> import java . nio . file . Path ; <nl> @ @ - 34 , 8 + 39 , 10 @ @ import java . util . concurrent . Callable ; <nl> <nl> public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> private static final Path forgePath ; <nl> - private static final Path mcPath ; <nl> + private static final Path patchedBinariesPath ; <nl> + private static final Path srgMcPath ; <nl> private static final List < String > SKIPPACKAGES = Arrays . asList ( <nl> " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , <nl> " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , <nl> @ @ - 46 , 7 + 53 , 9 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> static { <nl> try { <nl> forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - mcPath = forgePath . resolveSibling ( " forge - " + ForgeVersion . getVersion ( ) + " - srg . jar " ) ; <nl> + patchedBinariesPath = forgePath . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; <nl> + Path libs = forgePath . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; <nl> + srgMcPath = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; <nl> } catch ( URISyntaxException e ) { <nl> throw new RuntimeException ( " Unable to locate myself ! " ) ; <nl> } <nl> @ @ - 60 , 7 + 69 , 10 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ ] { mcPath , forgePath } ; <nl> + LOGGER . info ( " Found SRG MC at { } " , srgMcPath . toString ( ) ) ; <nl> + LOGGER . info ( " Found Forge patches at { } " , patchedBinariesPath . toString ( ) ) ; <nl> + LOGGER . info ( " Found Forge at { } " , forgePath . toString ( ) ) ; <nl> + return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLPaths . java b / src / main / java / net / minecraftforge / fml / loading / FMLPaths . java <nl> index e3a0c5e . . f95e945 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLPaths . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLPaths . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> import java . io . IOException ; <nl> + import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> @ @ - 72 , 18 + 73 , 12 @ @ public enum FMLPaths <nl> { <nl> for ( FMLPaths path : FMLPaths . values ( ) ) <nl> { <nl> - path . absolutePath = rootPath . resolve ( path . relativePath ) . toAbsolutePath ( ) ; <nl> - try { <nl> - path . absolutePath = path . absolutePath . toRealPath ( ) ; <nl> - } catch ( IOException e ) { <nl> - LOGGER . error ( " Unable to resolve path { } " , path . absolutePath , e ) ; <nl> - throw new RuntimeException ( e ) ; <nl> - } <nl> - LOGGER . debug ( CORE , " Path { } is { } " , ( ) - > path , ( ) - > path . absolutePath ) ; <nl> + path . absolutePath = rootPath . resolve ( path . relativePath ) . toAbsolutePath ( ) . normalize ( ) ; <nl> if ( path . isDirectory ) <nl> { <nl> FileUtils . getOrCreateDirectory ( path . absolutePath , path . name ( ) ) ; <nl> } <nl> + LOGGER . debug ( CORE , " Path { } is { } " , ( ) - > path , ( ) - > path . absolutePath ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / mcp / MCPVersion . java b / src / main / java / net / minecraftforge / mcp / MCPVersion . java <nl> new file mode 100644 <nl> index 0000000 . . dcc1c14 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / mcp / MCPVersion . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + package net . minecraftforge . mcp ; <nl> + <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> + <nl> + public class MCPVersion { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + private static final String mcVersion ; <nl> + private static final String mcpVersion ; <nl> + static { <nl> + String vers = MCPVersion . class . getPackage ( ) . getSpecificationVersion ( ) ; <nl> + if ( vers = = null ) { <nl> + vers = System . getProperty ( " mc . version " ) ; <nl> + } <nl> + if ( vers = = null ) throw new RuntimeException ( " Missing MC version , cannot continue " ) ; <nl> + mcVersion = vers ; <nl> + <nl> + vers = MCPVersion . class . getPackage ( ) . getImplementationVersion ( ) ; <nl> + if ( vers = = null ) { <nl> + vers = System . getProperty ( " mcp . version " ) ; <nl> + } <nl> + if ( vers = = null ) throw new RuntimeException ( " Missing MCP version , cannot continue " ) ; <nl> + mcpVersion = vers ; <nl> + LOGGER . info ( CORE , " Found MC version information { } " , mcVersion ) ; <nl> + LOGGER . info ( CORE , " Found MCP version information { } " , mcpVersion ) ; <nl> + } <nl> + public static String getMCVersion ( ) { <nl> + return mcVersion ; <nl> + } <nl> + <nl> + public static String getMCPVersion ( ) { <nl> + return mcpVersion ; <nl> + } <nl> + <nl> + public static String getMCPandMCVersion ( ) <nl> + { <nl> + return mcVersion + " - " + mcpVersion ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 94ab2e7 . . ef1db7c 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { <nl> into " $ buildDir / classes / java / main " <nl> } <nl> } <nl> + / / jvmArgs = [ ' - verbose : class ' ] <nl> classpath sourceSets . main . runtimeClasspath <nl> main ' net . minecraftforge . fml . LaunchTesting ' <nl> systemProperties target : ' fmldevclient ' <nl> diff - - git a / patches / minecraft / net / minecraft / client / resources / I18n . java . patch b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 981b15c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - a / net / minecraft / client / resources / I18n . java <nl> + + + + b / net / minecraft / client / resources / I18n . java <nl> + @ @ - 9 , 6 + 9 , 7 @ @ <nl> + <nl> + static void setLocale ( Locale i18nLocaleIn ) { <nl> + i18nLocale = i18nLocaleIn ; <nl> + + net . minecraftforge . fml . ForgeI18n . loadLanguageData ( i18nLocale . properties ) ; <nl> + } <nl> + <nl> + public static String format ( String translateKey , Object . . . parameters ) { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> index 2f24f33 . . 81f5044 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> @ @ - 88 , 8 + 88 , 6 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook <nl> public static boolean fixVanillaCascading = false ; / / There are various places in vanilla that cause cascading worldgen . Enabling this WILL change where blocks are placed to prevent this . <nl> / / DO NOT contact Forge about worldgen not ' matching ' vanilla if this flag is set . <nl> <nl> - static final Logger log = LogManager . getLogger ( ForgeVersion . MOD _ ID ) ; <nl> - <nl> private static Configuration config ; <nl> private static ForgeMod INSTANCE ; <nl> public static ForgeMod getInstance ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> index f6d4a74 . . df442bb 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> + + + b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package net . minecraftforge . common . asm ; <nl> <nl> import java . nio . file . Path ; <nl> <nl> + import net . minecraftforge . fml . AdvancedLogMessageAdapter ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . objectweb . asm . Opcodes ; <nl> @ @ - 65 , 7 + 66 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> if ( ( classNode . access & Opcodes . ACC _ ENUM ) = = 0 ) <nl> return classNode ; <nl> <nl> - Type array = Type . getType ( " [ " + classType . getInternalName ( ) ) ; <nl> + Type array = Type . getType ( " [ " + classType . getDescriptor ( ) ) ; <nl> final int flags = Opcodes . ACC _ PRIVATE | Opcodes . ACC _ STATIC | Opcodes . ACC _ FINAL | Opcodes . ACC _ SYNTHETIC ; <nl> <nl> FieldNode values = classNode . fields . stream ( ) . filter ( f - > f . desc . contentEquals ( array . getDescriptor ( ) ) & & ( ( f . access & flags ) = = flags ) ) . findFirst ( ) . orElse ( null ) ; <nl> @ @ - 87 , 16 + 88 , 21 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> MethodNode ctr = classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) & & m . desc . equals ( desc ) ) . findFirst ( ) . orElse ( null ) ; <nl> if ( ctr = = null ) <nl> { <nl> - LOGGER . error ( " Enum has create method with no matching constructor : " ) ; <nl> - LOGGER . error ( " Target : " + desc ) ; <nl> - classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > LOGGER . error ( " : " + m . desc ) ) ; <nl> + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { <nl> + sb . append ( " Enum has create method with no matching constructor : \ n " ) ; <nl> + sb . append ( " Target : " ) . append ( desc ) . append ( " \ n " ) ; <nl> + classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > sb . append ( " : " ) . append ( m . desc ) . append ( " \ n " ) ) ; <nl> + } ) ) ; <nl> throw new IllegalStateException ( " Enum has create method with no matching constructor : " + desc ) ; <nl> } <nl> <nl> if ( values = = null ) <nl> { <nl> - LOGGER . error ( " Enum has create method but we could not find $ VALUES : " ) ; <nl> - classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . forEach ( m - > LOGGER . error ( " " + m . name + " " + m . desc ) ) ; <nl> + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { <nl> + sb . append ( " Enum has create method but we could not find $ VALUES . Found : \ n " ) ; <nl> + classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . <nl> + forEach ( m - > sb . append ( " " ) . append ( m . name ) . append ( " " ) . append ( m . desc ) . append ( " \ n " ) ) ; <nl> + } ) ) ; <nl> throw new IllegalStateException ( " Enum has create method but we could not find $ VALUES " ) ; <nl> } <nl> <nl> @ @ - 109 , 17 + 115 , 18 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> ins . dup ( ) ; <nl> ins . load ( 0 , STRING ) ; <nl> ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> + ins . arraylength ( ) ; <nl> ins . iconst ( 1 ) ; <nl> ins . add ( Type . INT _ TYPE ) ; <nl> for ( int x = 1 ; x < args . length ; x + + ) <nl> ins . load ( x , args [ x ] ) ; <nl> - ins . invokespecial ( classType . getDescriptor ( ) , " < init > " , desc , false ) ; <nl> + ins . invokespecial ( classType . getInternalName ( ) , " < init > " , desc , false ) ; <nl> ins . store ( 1 , classType ) ; <nl> / / VALUES = ArrayUtils . add ( VALUES , ret ) <nl> ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> ins . load ( 1 , classType ) ; <nl> - ins . invokestatic ( ARRAY _ UTILS . getDescriptor ( ) , " add " , ADD _ DESC , false ) ; <nl> - ins . checkcast ( array ) ; <nl> + ins . invokestatic ( ARRAY _ UTILS . getInternalName ( ) , " add " , ADD _ DESC , false ) ; <nl> + ins . checkcast ( Type . getType ( values . desc ) ) ; <nl> ins . putstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> / / EnumHelper . cleanEnumCache ( ThisType . class ) <nl> ins . visitLdcInsn ( classType ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java <nl> new file mode 100644 <nl> index 0000000 . . 369b4dc <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java <nl> @ @ - 0 , 0 + 1 , 41 @ @ <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import org . apache . logging . log4j . message . Message ; <nl> + import org . apache . logging . log4j . util . StringBuilderFormattable ; <nl> + <nl> + import java . util . function . Consumer ; <nl> + <nl> + public class AdvancedLogMessageAdapter implements Message , StringBuilderFormattable { <nl> + private static final Object [ ] EMPTY = new Object [ 0 ] ; <nl> + <nl> + private final Consumer < StringBuilder > logMessageBuilder ; <nl> + <nl> + public AdvancedLogMessageAdapter ( final Consumer < StringBuilder > logMessageBuilder ) { <nl> + this . logMessageBuilder = logMessageBuilder ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getFormattedMessage ( ) { <nl> + return " " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getFormat ( ) { <nl> + return " " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Object [ ] getParameters ( ) { <nl> + return EMPTY ; <nl> + } <nl> + <nl> + @ Override <nl> + public Throwable getThrowable ( ) { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public void formatTo ( final StringBuilder buffer ) { <nl> + logMessageBuilder . accept ( buffer ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / BrandingControl . java b / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> index 80b6c90 . . a101900 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> + + + b / src / main / java / net / minecraftforge / fml / BrandingControl . java <nl> @ @ - 22 , 7 + 22 , 6 @ @ package net . minecraftforge . fml ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Lists ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> - import net . minecraftforge . fml . ModList ; <nl> <nl> import java . text . MessageFormat ; <nl> import java . util . Arrays ; <nl> @ @ - 47 , 7 + 46 , 7 @ @ public class BrandingControl <nl> brd . add ( " Forge " + ForgeVersion . getVersion ( ) ) ; <nl> int tModCount = ModList . get ( ) . size ( ) ; <nl> <nl> - brd . add ( MessageFormat . format ( " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " , tModCount ) ) ; <nl> + brd . add ( MessageFormat . format ( ForgeI18n . getPattern ( " fml . menu . loadingmods " ) , tModCount ) ) ; <nl> brandings = brd . build ( ) ; <nl> brandingsNoMC = brandings . subList ( 1 , brandings . size ( ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> new file mode 100644 <nl> index 0000000 . . 1faf950 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import java . util . Map ; <nl> + <nl> + public class ForgeI18n { <nl> + private static Map < String , String > i18n ; <nl> + <nl> + static String getPattern ( final String patternName ) { <nl> + return i18n . get ( patternName ) ; <nl> + } <nl> + <nl> + public static void loadLanguageData ( final Map < String , String > properties ) { <nl> + i18n = properties ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java <nl> index 1be4373 . . d66d107 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java <nl> @ @ - 46 , 7 + 46 , 8 @ @ public class ResourcePackLoader <nl> <nl> public static IResourcePack getResourcePackFor ( String modId ) <nl> { <nl> - return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; <nl> + if ( modId = = " forge " ) return forgePack ; <nl> + else return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java <nl> index c708ae1 . . 23a6726 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java <nl> @ @ - 30 , 7 + 30 , 7 @ @ import net . minecraftforge . fml . ModContainer ; <nl> import net . minecraftforge . fml . client . IDisplayableError ; <nl> import net . minecraftforge . fml . client . gui . GuiDupesFound ; <nl> <nl> - public class DuplicateModsFoundException extends LoaderException implements IDisplayableError <nl> + public class DuplicateModsFoundException extends LoaderException <nl> { <nl> private static final long serialVersionUID = 1L ; <nl> public SetMultimap < ModContainer , File > dupes ; <nl> @ @ - 38 , 22 + 38 , 4 @ @ public class DuplicateModsFoundException extends LoaderException implements IDis <nl> public DuplicateModsFoundException ( SetMultimap < ModContainer , File > dupes ) { <nl> this . dupes = dupes ; <nl> } <nl> - <nl> - @ Override <nl> - protected void printStackTrace ( WrappedPrintStream stream ) <nl> - { <nl> - stream . println ( " Duplicate Mods : " ) ; <nl> - for ( Entry < ModContainer , File > e : dupes . entries ( ) ) <nl> - { <nl> - stream . println ( String . format ( " \ t % s : % s " , e . getKey ( ) . getModId ( ) , e . getValue ( ) . getAbsolutePath ( ) ) ) ; <nl> - } <nl> - stream . println ( " " ) ; <nl> - } <nl> - <nl> - @ Override <nl> - @ OnlyIn ( Dist . CLIENT ) <nl> - public GuiScreen createGui ( ) <nl> - { <nl> - return new GuiDupesFound ( this ) ; <nl> - } <nl> } <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json <nl> new file mode 100644 <nl> index 0000000 . . 74fd746 <nl> - - - / dev / null <nl> + + + b / src / main / resources / assets / forge / lang / en _ us . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + { <nl> + " fml . menu . mods " : " Mods " , <nl> + " fml . menu . mods . normal " : " Off " , <nl> + " fml . menu . mods . search " : " Search " , <nl> + " fml . menu . mods . a _ to _ z " : " A - Z " , <nl> + " fml . menu . mods . z _ to _ a " : " Z - A " , <nl> + " fml . menu . mods . config " : " Config " , <nl> + " fml . menu . modoptions " : " Mod Options . . . " , <nl> + " fml . menu . loadingmods " : " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " <nl> + }

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index d738775 . . c3801e1 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 161 , 6 + 161 , 7 @ @ project ( ' : forge ' ) { 
 installer ' com . electronwill . night - config : toml : 3 . 4 . 0 ' 
 installer ' org . jline : jline : 3 . 5 . 1 ' 
 installer ' org . apache . maven : maven - artifact : 3 . 5 . 3 ' 
 + installer ' net . jodah : typetools : 0 . 5 . 0 ' 
 installer ' java3d : vecmath : 1 . 5 . 2 ' 
 } 
 
 @ @ - 246 , 16 + 247 , 16 @ @ project ( ' : forge ' ) { 
 destinationDir = file ( ' build / distributions ' ) 
 from ( zipTree ( downloadCrowdin . output ) ) { 
 eachFile { / / Tired of waiting for crowdin API , rename things myself . Remove once crowdin stops being dumb 
 - if ( it . name . equals ( ' en _ us . json ' ) & & ! it . path . startsWith ( ' assets / ' ) ) { 
 - it . name = it . path . split ( ' / ' ) [ 0 ] + ' . json ' 
 - it . path = ' assets / forge / lang / ' + it . name 
 + if ( it . name . equals ( ' en _ us . json ' ) & & ! it . path . startsWith ( ' assets / ' ) ) { 
 + it . name = it . path . split ( ' / ' ) [ 0 ] + ' . json ' 
 + it . path = ' assets / forge / lang / ' + it . name 
 + } 
 } 
 + exclude { it . isDirectory ( ) } 
 + rename { it . toLowerCase ( ) } / / Minecraft needs it lowercase . 
 + exclude ' * * / * . lang ' / / Pre - 1 . 13 format 
 } 
 - exclude { it . isDirectory ( ) } 
 - rename { it . toLowerCase ( ) } / / Minecraft needs it lowercase . 
 - exclude ' * * / * . lang ' / / Pre - 1 . 13 format 
 } 
 - } 
 
 / / We apply the bin patches we just created to make a jar that is JUST our changes 
 task applyClientBinPatches ( type : ApplyBinPatches , dependsOn : genClientBinPatches ) { 
 @ @ - 314 , 6 + 315 , 7 @ @ project ( ' : forge ' ) { 
 } 
 
 task launcherJson ( dependsOn : universalJar ) { 
 + inputs . file universalJar . archivePath 
 ext { 
 output = file ( ' build / libs / version . json ' ) 
 vanilla = project ( ' : mcp ' ) . file ( ' build / mcp / downloadJson / version . json ' ) 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 4020ca7 . . 5d52259 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 25 , 48 + 25 , 33 @ @ import org . apache . logging . log4j . Logger ; 
 
 import javax . annotation . Nullable ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 + 
 public class ForgeVersion 
 { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 / / This is Forge ' s Mod Id , used for the ForgeMod and resource locations 
 public static final String MOD _ ID = " forge " ; 
 - / / This number is incremented every time we remove deprecated code / major API changes , never reset 
 - public static final int majorVersion = 14 ; 
 - / / This number is incremented every minecraft release , never reset 
 - public static final int minorVersion = 23 ; 
 - / / This number is incremented every time a interface changes or new major feature is added , and reset every Minecraft version 
 - public static final int revisionVersion = 2 ; 
 - / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 - public static final int buildVersion = 0 ; 
 / / This is the minecraft version we ' re building for - used in various places in Forge / FML code 
 public static final String mcVersion = " 1 . 13 " ; 
 / / This is the MCP data version we ' re using 
 public static final String mcpVersion = " 9 . 42 " ; 
 
 - private static final Logger log = LogManager . getLogger ( ) ; 
 - 
 - public static int getMajorVersion ( ) 
 - { 
 - return majorVersion ; 
 - } 
 + private static final String forgeVersion ; 
 
 - public static int getMinorVersion ( ) 
 - { 
 - return minorVersion ; 
 - } 
 - 
 - public static int getRevisionVersion ( ) 
 - { 
 - return revisionVersion ; 
 - } 
 - 
 - public static int getBuildVersion ( ) 
 - { 
 - return buildVersion ; 
 + static { 
 + String vers = ForgeVersion . class . getPackage ( ) . getImplementationVersion ( ) ; 
 + if ( vers = = null ) { 
 + vers = System . getProperty ( " forge . version " ) ; 
 + } 
 + if ( vers = = null ) throw new RuntimeException ( " Missing forge version , cannot continue " ) ; 
 + forgeVersion = vers ; 
 + LOGGER . info ( CORE , " Found Forge version { } " , forgeVersion ) ; 
 } 
 
 public static String getVersion ( ) 
 { 
 - return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 + return forgeVersion ; 
 } 
 
 public static VersionChecker . Status getStatus ( ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / BrandingControl . java b / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 index 8d80fe4 . . 4be2101 100644 
 - - - a / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 + + + b / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Lists ; 
 import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . mcp . MCPVersion ; 
 
 import java . text . MessageFormat ; 
 import java . util . Arrays ; 
 @ @ - 41 , 8 + 42 , 8 @ @ public class BrandingControl 
 if ( brandings = = null ) 
 { 
 ImmutableList . Builder < String > brd = ImmutableList . builder ( ) ; 
 - brd . add ( " Minecraft " + ForgeVersion . mcVersion ) ; 
 - brd . add ( " MCP " + ForgeVersion . mcpVersion ) ; 
 + brd . add ( " Minecraft " + MCPVersion . getMCVersion ( ) ) ; 
 + brd . add ( " MCP " + MCPVersion . getMCPVersion ( ) ) ; 
 brd . add ( " Forge " + ForgeVersion . getVersion ( ) ) ; 
 int tModCount = ModList . get ( ) . size ( ) ; 
 brd . add ( ForgeI18n . parseMessage ( " fml . menu . loadingmods " , tModCount ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index 0d1bce6 . . c613889 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 24 , 6 + 24 , 11 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . mcp . MCPVersion ; 
 + import org . apache . logging . log4j . Level ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + import org . apache . logging . log4j . core . config . Configurator ; 
 
 import java . net . URISyntaxException ; 
 import java . nio . file . Path ; 
 @ @ - 34 , 8 + 39 , 10 @ @ import java . util . concurrent . Callable ; 
 
 public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 private static final Path forgePath ; 
 - private static final Path mcPath ; 
 + private static final Path patchedBinariesPath ; 
 + private static final Path srgMcPath ; 
 private static final List < String > SKIPPACKAGES = Arrays . asList ( 
 " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , 
 " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , 
 @ @ - 46 , 7 + 53 , 9 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 static { 
 try { 
 forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - mcPath = forgePath . resolveSibling ( " forge - " + ForgeVersion . getVersion ( ) + " - srg . jar " ) ; 
 + patchedBinariesPath = forgePath . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; 
 + Path libs = forgePath . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; 
 + srgMcPath = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; 
 } catch ( URISyntaxException e ) { 
 throw new RuntimeException ( " Unable to locate myself ! " ) ; 
 } 
 @ @ - 60 , 7 + 69 , 10 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ ] { mcPath , forgePath } ; 
 + LOGGER . info ( " Found SRG MC at { } " , srgMcPath . toString ( ) ) ; 
 + LOGGER . info ( " Found Forge patches at { } " , patchedBinariesPath . toString ( ) ) ; 
 + LOGGER . info ( " Found Forge at { } " , forgePath . toString ( ) ) ; 
 + return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLPaths . java b / src / main / java / net / minecraftforge / fml / loading / FMLPaths . java 
 index e3a0c5e . . f95e945 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLPaths . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLPaths . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 import java . io . IOException ; 
 + import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 @ @ - 72 , 18 + 73 , 12 @ @ public enum FMLPaths 
 { 
 for ( FMLPaths path : FMLPaths . values ( ) ) 
 { 
 - path . absolutePath = rootPath . resolve ( path . relativePath ) . toAbsolutePath ( ) ; 
 - try { 
 - path . absolutePath = path . absolutePath . toRealPath ( ) ; 
 - } catch ( IOException e ) { 
 - LOGGER . error ( " Unable to resolve path { } " , path . absolutePath , e ) ; 
 - throw new RuntimeException ( e ) ; 
 - } 
 - LOGGER . debug ( CORE , " Path { } is { } " , ( ) - > path , ( ) - > path . absolutePath ) ; 
 + path . absolutePath = rootPath . resolve ( path . relativePath ) . toAbsolutePath ( ) . normalize ( ) ; 
 if ( path . isDirectory ) 
 { 
 FileUtils . getOrCreateDirectory ( path . absolutePath , path . name ( ) ) ; 
 } 
 + LOGGER . debug ( CORE , " Path { } is { } " , ( ) - > path , ( ) - > path . absolutePath ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / mcp / MCPVersion . java b / src / main / java / net / minecraftforge / mcp / MCPVersion . java 
 new file mode 100644 
 index 0000000 . . dcc1c14 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / mcp / MCPVersion . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package net . minecraftforge . mcp ; 
 + 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 + 
 + public class MCPVersion { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 + private static final String mcVersion ; 
 + private static final String mcpVersion ; 
 + static { 
 + String vers = MCPVersion . class . getPackage ( ) . getSpecificationVersion ( ) ; 
 + if ( vers = = null ) { 
 + vers = System . getProperty ( " mc . version " ) ; 
 + } 
 + if ( vers = = null ) throw new RuntimeException ( " Missing MC version , cannot continue " ) ; 
 + mcVersion = vers ; 
 + 
 + vers = MCPVersion . class . getPackage ( ) . getImplementationVersion ( ) ; 
 + if ( vers = = null ) { 
 + vers = System . getProperty ( " mcp . version " ) ; 
 + } 
 + if ( vers = = null ) throw new RuntimeException ( " Missing MCP version , cannot continue " ) ; 
 + mcpVersion = vers ; 
 + LOGGER . info ( CORE , " Found MC version information { } " , mcVersion ) ; 
 + LOGGER . info ( CORE , " Found MCP version information { } " , mcpVersion ) ; 
 + } 
 + public static String getMCVersion ( ) { 
 + return mcVersion ; 
 + } 
 + 
 + public static String getMCPVersion ( ) { 
 + return mcpVersion ; 
 + } 
 + 
 + public static String getMCPandMCVersion ( ) 
 + { 
 + return mcVersion + " - " + mcpVersion ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 94ab2e7 . . ef1db7c 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { 
 into " $ buildDir / classes / java / main " 
 } 
 } 
 + / / jvmArgs = [ ' - verbose : class ' ] 
 classpath sourceSets . main . runtimeClasspath 
 main ' net . minecraftforge . fml . LaunchTesting ' 
 systemProperties target : ' fmldevclient ' 
 diff - - git a / patches / minecraft / net / minecraft / client / resources / I18n . java . patch b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch 
 new file mode 100644 
 index 0000000 . . 981b15c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / resources / I18n . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - a / net / minecraft / client / resources / I18n . java 
 + + + + b / net / minecraft / client / resources / I18n . java 
 + @ @ - 9 , 6 + 9 , 7 @ @ 
 + 
 + static void setLocale ( Locale i18nLocaleIn ) { 
 + i18nLocale = i18nLocaleIn ; 
 + + net . minecraftforge . fml . ForgeI18n . loadLanguageData ( i18nLocale . properties ) ; 
 + } 
 + 
 + public static String format ( String translateKey , Object . . . parameters ) { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 index 2f24f33 . . 81f5044 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 @ @ - 88 , 8 + 88 , 6 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook 
 public static boolean fixVanillaCascading = false ; / / There are various places in vanilla that cause cascading worldgen . Enabling this WILL change where blocks are placed to prevent this . 
 / / DO NOT contact Forge about worldgen not ' matching ' vanilla if this flag is set . 
 
 - static final Logger log = LogManager . getLogger ( ForgeVersion . MOD _ ID ) ; 
 - 
 private static Configuration config ; 
 private static ForgeMod INSTANCE ; 
 public static ForgeMod getInstance ( ) 
 diff - - git a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 index f6d4a74 . . df442bb 100644 
 - - - a / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 + + + b / src / main / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package net . minecraftforge . common . asm ; 
 
 import java . nio . file . Path ; 
 
 + import net . minecraftforge . fml . AdvancedLogMessageAdapter ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . objectweb . asm . Opcodes ; 
 @ @ - 65 , 7 + 66 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 if ( ( classNode . access & Opcodes . ACC _ ENUM ) = = 0 ) 
 return classNode ; 
 
 - Type array = Type . getType ( " [ " + classType . getInternalName ( ) ) ; 
 + Type array = Type . getType ( " [ " + classType . getDescriptor ( ) ) ; 
 final int flags = Opcodes . ACC _ PRIVATE | Opcodes . ACC _ STATIC | Opcodes . ACC _ FINAL | Opcodes . ACC _ SYNTHETIC ; 
 
 FieldNode values = classNode . fields . stream ( ) . filter ( f - > f . desc . contentEquals ( array . getDescriptor ( ) ) & & ( ( f . access & flags ) = = flags ) ) . findFirst ( ) . orElse ( null ) ; 
 @ @ - 87 , 16 + 88 , 21 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 MethodNode ctr = classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) & & m . desc . equals ( desc ) ) . findFirst ( ) . orElse ( null ) ; 
 if ( ctr = = null ) 
 { 
 - LOGGER . error ( " Enum has create method with no matching constructor : " ) ; 
 - LOGGER . error ( " Target : " + desc ) ; 
 - classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > LOGGER . error ( " : " + m . desc ) ) ; 
 + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { 
 + sb . append ( " Enum has create method with no matching constructor : \ n " ) ; 
 + sb . append ( " Target : " ) . append ( desc ) . append ( " \ n " ) ; 
 + classNode . methods . stream ( ) . filter ( m - > m . name . equals ( " < init > " ) ) . forEach ( m - > sb . append ( " : " ) . append ( m . desc ) . append ( " \ n " ) ) ; 
 + } ) ) ; 
 throw new IllegalStateException ( " Enum has create method with no matching constructor : " + desc ) ; 
 } 
 
 if ( values = = null ) 
 { 
 - LOGGER . error ( " Enum has create method but we could not find $ VALUES : " ) ; 
 - classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . forEach ( m - > LOGGER . error ( " " + m . name + " " + m . desc ) ) ; 
 + LOGGER . error ( ( ) - > new AdvancedLogMessageAdapter ( sb - > { 
 + sb . append ( " Enum has create method but we could not find $ VALUES . Found : \ n " ) ; 
 + classNode . fields . stream ( ) . filter ( f - > ( f . access & Opcodes . ACC _ STATIC ) ! = 0 ) . 
 + forEach ( m - > sb . append ( " " ) . append ( m . name ) . append ( " " ) . append ( m . desc ) . append ( " \ n " ) ) ; 
 + } ) ) ; 
 throw new IllegalStateException ( " Enum has create method but we could not find $ VALUES " ) ; 
 } 
 
 @ @ - 109 , 17 + 115 , 18 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 ins . dup ( ) ; 
 ins . load ( 0 , STRING ) ; 
 ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 + ins . arraylength ( ) ; 
 ins . iconst ( 1 ) ; 
 ins . add ( Type . INT _ TYPE ) ; 
 for ( int x = 1 ; x < args . length ; x + + ) 
 ins . load ( x , args [ x ] ) ; 
 - ins . invokespecial ( classType . getDescriptor ( ) , " < init > " , desc , false ) ; 
 + ins . invokespecial ( classType . getInternalName ( ) , " < init > " , desc , false ) ; 
 ins . store ( 1 , classType ) ; 
 / / VALUES = ArrayUtils . add ( VALUES , ret ) 
 ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 ins . load ( 1 , classType ) ; 
 - ins . invokestatic ( ARRAY _ UTILS . getDescriptor ( ) , " add " , ADD _ DESC , false ) ; 
 - ins . checkcast ( array ) ; 
 + ins . invokestatic ( ARRAY _ UTILS . getInternalName ( ) , " add " , ADD _ DESC , false ) ; 
 + ins . checkcast ( Type . getType ( values . desc ) ) ; 
 ins . putstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 / / EnumHelper . cleanEnumCache ( ThisType . class ) 
 ins . visitLdcInsn ( classType ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java 
 new file mode 100644 
 index 0000000 . . 369b4dc 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / AdvancedLogMessageAdapter . java 
 @ @ - 0 , 0 + 1 , 41 @ @ 
 + package net . minecraftforge . fml ; 
 + 
 + import org . apache . logging . log4j . message . Message ; 
 + import org . apache . logging . log4j . util . StringBuilderFormattable ; 
 + 
 + import java . util . function . Consumer ; 
 + 
 + public class AdvancedLogMessageAdapter implements Message , StringBuilderFormattable { 
 + private static final Object [ ] EMPTY = new Object [ 0 ] ; 
 + 
 + private final Consumer < StringBuilder > logMessageBuilder ; 
 + 
 + public AdvancedLogMessageAdapter ( final Consumer < StringBuilder > logMessageBuilder ) { 
 + this . logMessageBuilder = logMessageBuilder ; 
 + } 
 + 
 + @ Override 
 + public String getFormattedMessage ( ) { 
 + return " " ; 
 + } 
 + 
 + @ Override 
 + public String getFormat ( ) { 
 + return " " ; 
 + } 
 + 
 + @ Override 
 + public Object [ ] getParameters ( ) { 
 + return EMPTY ; 
 + } 
 + 
 + @ Override 
 + public Throwable getThrowable ( ) { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public void formatTo ( final StringBuilder buffer ) { 
 + logMessageBuilder . accept ( buffer ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / BrandingControl . java b / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 index 80b6c90 . . a101900 100644 
 - - - a / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 + + + b / src / main / java / net / minecraftforge / fml / BrandingControl . java 
 @ @ - 22 , 7 + 22 , 6 @ @ package net . minecraftforge . fml ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Lists ; 
 import net . minecraftforge . common . ForgeVersion ; 
 - import net . minecraftforge . fml . ModList ; 
 
 import java . text . MessageFormat ; 
 import java . util . Arrays ; 
 @ @ - 47 , 7 + 46 , 7 @ @ public class BrandingControl 
 brd . add ( " Forge " + ForgeVersion . getVersion ( ) ) ; 
 int tModCount = ModList . get ( ) . size ( ) ; 
 
 - brd . add ( MessageFormat . format ( " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " , tModCount ) ) ; 
 + brd . add ( MessageFormat . format ( ForgeI18n . getPattern ( " fml . menu . loadingmods " ) , tModCount ) ) ; 
 brandings = brd . build ( ) ; 
 brandingsNoMC = brandings . subList ( 1 , brandings . size ( ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 new file mode 100644 
 index 0000000 . . 1faf950 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + package net . minecraftforge . fml ; 
 + 
 + import java . util . Map ; 
 + 
 + public class ForgeI18n { 
 + private static Map < String , String > i18n ; 
 + 
 + static String getPattern ( final String patternName ) { 
 + return i18n . get ( patternName ) ; 
 + } 
 + 
 + public static void loadLanguageData ( final Map < String , String > properties ) { 
 + i18n = properties ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java 
 index 1be4373 . . d66d107 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / ResourcePackLoader . java 
 @ @ - 46 , 7 + 46 , 8 @ @ public class ResourcePackLoader 
 
 public static IResourcePack getResourcePackFor ( String modId ) 
 { 
 - return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; 
 + if ( modId = = " forge " ) return forgePack ; 
 + else return modResourcePacks . get ( ModList . get ( ) . getModFileById ( modId ) . getFile ( ) ) ; 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java 
 index c708ae1 . . 23a6726 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / DuplicateModsFoundException . java 
 @ @ - 30 , 7 + 30 , 7 @ @ import net . minecraftforge . fml . ModContainer ; 
 import net . minecraftforge . fml . client . IDisplayableError ; 
 import net . minecraftforge . fml . client . gui . GuiDupesFound ; 
 
 - public class DuplicateModsFoundException extends LoaderException implements IDisplayableError 
 + public class DuplicateModsFoundException extends LoaderException 
 { 
 private static final long serialVersionUID = 1L ; 
 public SetMultimap < ModContainer , File > dupes ; 
 @ @ - 38 , 22 + 38 , 4 @ @ public class DuplicateModsFoundException extends LoaderException implements IDis 
 public DuplicateModsFoundException ( SetMultimap < ModContainer , File > dupes ) { 
 this . dupes = dupes ; 
 } 
 - 
 - @ Override 
 - protected void printStackTrace ( WrappedPrintStream stream ) 
 - { 
 - stream . println ( " Duplicate Mods : " ) ; 
 - for ( Entry < ModContainer , File > e : dupes . entries ( ) ) 
 - { 
 - stream . println ( String . format ( " \ t % s : % s " , e . getKey ( ) . getModId ( ) , e . getValue ( ) . getAbsolutePath ( ) ) ) ; 
 - } 
 - stream . println ( " " ) ; 
 - } 
 - 
 - @ Override 
 - @ OnlyIn ( Dist . CLIENT ) 
 - public GuiScreen createGui ( ) 
 - { 
 - return new GuiDupesFound ( this ) ; 
 - } 
 } 
 diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json 
 new file mode 100644 
 index 0000000 . . 74fd746 
 - - - / dev / null 
 + + + b / src / main / resources / assets / forge / lang / en _ us . json 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + { 
 + " fml . menu . mods " : " Mods " , 
 + " fml . menu . mods . normal " : " Off " , 
 + " fml . menu . mods . search " : " Search " , 
 + " fml . menu . mods . a _ to _ z " : " A - Z " , 
 + " fml . menu . mods . z _ to _ a " : " Z - A " , 
 + " fml . menu . mods . config " : " Config " , 
 + " fml . menu . modoptions " : " Mod Options . . . " , 
 + " fml . menu . loadingmods " : " { 0 , choice , 0 # No mods | 1 # 1 mod | 1 < { 0 } mods } loaded " 
 + }
