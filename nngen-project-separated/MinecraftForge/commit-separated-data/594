BLEU SCORE: 0.01650404559570943

TEST MSG: Add in registry registration events , new subscription events you can use to make sure you ' re registering things at the " best " time .
GENERATED MSG: Add a java version detection and nag system for users on Java 7 or below .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / event / ModelRegistryEvent . java b / src / main / java / net / minecraftforge / client / event / ModelRegistryEvent . java <nl> new file mode 100644 <nl> index 0000000 . . b14025c <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / event / ModelRegistryEvent . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . client . event ; <nl> + <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + <nl> + / * * <nl> + * Fired when the { @ link net . minecraftforge . client . model . ModelLoader } is ready to receive registrations <nl> + * / <nl> + public class ModelRegistryEvent extends Event <nl> + { <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / event / RegistryEvent . java b / src / main / java / net / minecraftforge / event / RegistryEvent . java <nl> new file mode 100644 <nl> index 0000000 . . a1967e5 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / RegistryEvent . java <nl> @ @ - 0 , 0 + 1 , 77 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . event ; <nl> + <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + import net . minecraftforge . fml . common . eventhandler . GenericEvent ; <nl> + import net . minecraftforge . fml . common . registry . IForgeRegistry ; <nl> + import net . minecraftforge . fml . common . registry . IForgeRegistryEntry ; <nl> + import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; <nl> + <nl> + <nl> + / * * <nl> + * RegistryEvent supertype . <nl> + * / <nl> + public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEvent < T > <nl> + { <nl> + RegistryEvent ( Class < T > clazz ) { <nl> + super ( clazz ) ; <nl> + } <nl> + / * * <nl> + * Register new registries when you receive this event , through the { @ link PersistentRegistryManager } <nl> + * / <nl> + public static class NewRegistry extends Event { <nl> + } <nl> + <nl> + / * * <nl> + * Register your objects for the appropriate registry type when you receive this event . <nl> + * <nl> + * < code > event . getRegistry ( ) . register ( . . . ) < / code > <nl> + * <nl> + * The registries will be visited in alphabetic order of their name , except blocks and items , <nl> + * which will be visited FIRST and SECOND respectively . <nl> + * <nl> + * ObjectHolders will reload between Blocks and Items , and after all registries have been visited . <nl> + * @ param < T > The registry top level type <nl> + * / <nl> + public static class Register < T extends IForgeRegistryEntry < T > > extends RegistryEvent < T > { <nl> + private final IForgeRegistry < T > registry ; <nl> + private final ResourceLocation location ; <nl> + <nl> + public Register ( ResourceLocation location , IForgeRegistry < T > registry ) <nl> + { <nl> + super ( registry . getRegistrySuperType ( ) ) ; <nl> + this . location = location ; <nl> + this . registry = registry ; <nl> + } <nl> + <nl> + public IForgeRegistry < T > getRegistry ( ) <nl> + { <nl> + return registry ; <nl> + } <nl> + <nl> + public ResourceLocation getLocation ( ) <nl> + { <nl> + return location ; <nl> + } <nl> + <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index b468546 . . 9bb217c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 76 , 7 + 76 , 9 @ @ import net . minecraft . util . StringUtils ; <nl> import net . minecraft . world . WorldSettings ; <nl> import net . minecraft . world . storage . WorldSummary ; <nl> import net . minecraft . world . storage . SaveFormatOld ; <nl> + import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fml . client . registry . RenderingRegistry ; <nl> import net . minecraftforge . fml . common . DummyModContainer ; <nl> import net . minecraftforge . fml . common . DuplicateModsFoundException ; <nl> @ @ - 1038 , 4 + 1040 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> this . client . renderGlobal . loadRenderers ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void fireSidedRegistryEvents ( ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new ModelRegistryEvent ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> new file mode 100644 <nl> index 0000000 . . 81df043 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> @ @ - 0 , 0 + 1 , 77 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . common ; <nl> + <nl> + import com . google . common . base . Strings ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> + import net . minecraftforge . fml . common . discovery . asm . ModAnnotation ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> + import java . lang . reflect . Field ; <nl> + import java . lang . reflect . Modifier ; <nl> + import java . util . Arrays ; <nl> + import java . util . EnumSet ; <nl> + import java . util . List ; <nl> + import java . util . Set ; <nl> + <nl> + / * * <nl> + * Automatic eventbus subscriber - reads { @ link net . minecraftforge . fml . common . Mod . EventBusSubscriber } <nl> + * annotations and passes the class instances to the { @ link net . minecraftforge . common . MinecraftForge . EVENT _ BUS } <nl> + * / <nl> + public class AutomaticEventSubscriber <nl> + { <nl> + private static final EnumSet < Side > DEFAULT = EnumSet . allOf ( Side . class ) ; <nl> + public static void inject ( ModContainer mod , ASMDataTable data , Side side ) <nl> + { <nl> + FMLLog . fine ( " Attempting to inject @ EventBusSubscriber classes into the eventbus for % s " , mod . getModId ( ) ) ; <nl> + Set < ASMDataTable . ASMData > targets = data . getAnnotationsFor ( mod ) . get ( Mod . EventBusSubscriber . class . getName ( ) ) ; <nl> + ClassLoader mcl = Loader . instance ( ) . getModClassLoader ( ) ; <nl> + <nl> + for ( ASMDataTable . ASMData targ : targets ) <nl> + { <nl> + try <nl> + { <nl> + / / noinspection unchecked <nl> + List < ModAnnotation . EnumHolder > sidesEnum = ( List < ModAnnotation . EnumHolder > ) targ . getAnnotationInfo ( ) . get ( " value " ) ; <nl> + EnumSet < Side > sides = DEFAULT ; <nl> + if ( sidesEnum ! = null ) { <nl> + sides = EnumSet . noneOf ( Side . class ) ; <nl> + for ( ModAnnotation . EnumHolder h : sidesEnum ) { <nl> + sides . add ( Side . valueOf ( h . getValue ( ) ) ) ; <nl> + } <nl> + } <nl> + if ( sides = = DEFAULT | | sides . contains ( side ) ) { <nl> + FMLLog . fine ( " Found @ EventBusSubscriber class % s " , targ . getClassName ( ) ) ; <nl> + Class < ? > subscriptionTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( subscriptionTarget ) ; <nl> + FMLLog . fine ( " Injected @ EventBusSubscriber class % s " , targ . getClassName ( ) ) ; <nl> + } <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " An error occurred trying to load an EventBusSubscriber % s for modid % s " , targ . getClassName ( ) , mod . getModId ( ) ) ; <nl> + throw new LoaderException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index 085a619 . . e16cd37 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 746 , 4 + 746 , 9 @ @ public class FMLCommonHandler <nl> public void reloadRenderers ( ) { <nl> sidedDelegate . reloadRenderers ( ) ; <nl> } <nl> + <nl> + public void fireSidedRegistryEvents ( ) <nl> + { <nl> + sidedDelegate . fireSidedRegistryEvents ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 6dac654 . . ac424bf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 573 , 6 + 573 , 8 @ @ public class FMLModContainer implements ModContainer <nl> eventBus . post ( new FMLFingerprintViolationEvent ( source . isDirectory ( ) , source , ImmutableSet . copyOf ( this . sourceFingerprints ) , expectedFingerprint ) ) ; <nl> } <nl> ProxyInjector . inject ( this , event . getASMHarvestedData ( ) , FMLCommonHandler . instance ( ) . getSide ( ) , getLanguageAdapter ( ) ) ; <nl> + AutomaticEventSubscriber . inject ( this , event . getASMHarvestedData ( ) , FMLCommonHandler . instance ( ) . getSide ( ) ) ; <nl> + <nl> processFieldAnnotations ( event . getASMHarvestedData ( ) ) ; <nl> } <nl> catch ( Throwable e ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> index 4c49ed1 . . aea07ff 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> @ @ - 75 , 4 + 75 , 6 @ @ public interface IFMLSidedHandler <nl> String stripSpecialChars ( String message ) ; <nl> <nl> void reloadRenderers ( ) ; <nl> + <nl> + void fireSidedRegistryEvents ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 82bcd17 . . 3f43f78 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 604 , 6 + 604 , 8 @ @ public class Loader <nl> ObjectHolderRegistry . INSTANCE . findObjectHolders ( discoverer . getASMTable ( ) ) ; <nl> ItemStackHolderInjector . INSTANCE . findHolders ( discoverer . getASMTable ( ) ) ; <nl> CapabilityManager . INSTANCE . injectCapabilities ( discoverer . getASMTable ( ) ) ; <nl> + PersistentRegistryManager . fireRegistryEvents ( ) ; <nl> + FMLCommonHandler . instance ( ) . fireSidedRegistryEvents ( ) ; <nl> modController . distributeStateMessage ( LoaderState . PREINITIALIZATION , discoverer . getASMTable ( ) , canonicalConfigDir ) ; <nl> ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> ItemStackHolderInjector . INSTANCE . inject ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index 47ba5e5 . . 24afe9d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import net . minecraftforge . fml . common . event . FMLServerStoppingEvent ; <nl> import net . minecraftforge . fml . common . event . FMLInterModComms . IMCEvent ; <nl> import net . minecraftforge . fml . common . network . NetworkCheckHandler ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> / * * <nl> * This defines a Mod to FML . <nl> @ @ - 305 , 4 + 306 , 13 @ @ public @ interface Mod <nl> @ Target ( ElementType . METHOD ) <nl> public @ interface InstanceFactory { <nl> } <nl> + <nl> + / * * <nl> + * A class which will be subscribed to { @ link net . minecraftforge . common . MinecraftForge . EVENT _ BUS } at mod construction time . <nl> + * / <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . TYPE ) <nl> + public @ interface EventBusSubscriber { <nl> + Side [ ] value ( ) default { Side . CLIENT , Side . SERVER } ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java <nl> index 9394b41 . . 412aab6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java <nl> @ @ - 68 , 11 + 68 , 9 @ @ public class ASMEventHandler implements IEventListener <nl> if ( isGeneric ) <nl> { <nl> java . lang . reflect . Type type = method . getGenericParameterTypes ( ) [ 0 ] ; <nl> - System . currentTimeMillis ( ) ; <nl> if ( type instanceof ParameterizedType ) <nl> { <nl> filter = ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ 0 ] ; <nl> - System . currentTimeMillis ( ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index e63b5bb . . d9d621b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import com . google . common . collect . Iterators ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> import org . apache . commons . lang3 . Validate ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> @ @ - 830 , 6 + 831 , 13 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e <nl> add ( - 1 , key , value ) ; <nl> } <nl> <nl> + public void registerAll ( I . . . values ) <nl> + { <nl> + for ( I value : values ) <nl> + { <nl> + register ( value ) ; <nl> + } <nl> + } <nl> @ Override <nl> public boolean containsValue ( I value ) <nl> { <nl> @ @ - 908 , 4 + 916 , 10 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e <nl> { <nl> return ( T ) slaves . get ( slaveMapName ) ; <nl> } <nl> + <nl> + RegistryEvent . Register < I > buildRegistryRegisterEvent ( ResourceLocation location ) <nl> + { <nl> + return new RegistryEvent . Register < I > ( location , this ) ; <nl> + } <nl> + <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java <nl> index 5486364 . . 3d52bb2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java <nl> @ @ - 39 , 6 + 39 , 8 @ @ public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterab <nl> <nl> void register ( V value ) ; <nl> <nl> + void registerAll ( V . . . values ) ; <nl> + <nl> boolean containsKey ( ResourceLocation key ) ; <nl> boolean containsValue ( V value ) ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistryEntry . java b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistryEntry . java <nl> index 87f043a . . 919f803 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistryEntry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistryEntry . java <nl> @ @ - 89 , 7 + 89 , 6 @ @ public interface IForgeRegistryEntry < V > <nl> / / Helper functions <nl> public final T setRegistryName ( ResourceLocation name ) { return setRegistryName ( name . toString ( ) ) ; } <nl> public final T setRegistryName ( String modID , String name ) { return setRegistryName ( modID + " : " + name ) ; } <nl> - <nl> public final ResourceLocation getRegistryName ( ) <nl> { <nl> if ( delegate . name ( ) ! = null ) return delegate . name ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 9c7a8aa . . 71010a3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 20 , 8 + 20 , 9 @ @ <nl> package net . minecraftforge . fml . common . registry ; <nl> <nl> import java . io . IOException ; <nl> - import java . lang . reflect . InvocationTargetException ; <nl> import java . lang . reflect . Method ; <nl> + import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> import java . util . LinkedHashMap ; <nl> @ @ - 33 , 6 + 34 , 8 @ @ import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockAir ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> import net . minecraftforge . fml . common . EnhancedRuntimeException ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> @ @ - 64 , 6 + 67 , 35 @ @ import com . google . common . collect . Sets . SetView ; <nl> @ SuppressWarnings ( " WeakerAccess " ) <nl> public class PersistentRegistryManager <nl> { <nl> + public static void fireRegistryEvents ( ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new RegistryEvent . NewRegistry ( ) ) ; <nl> + <nl> + List < ResourceLocation > registryKeys = Lists . newArrayList ( PersistentRegistry . ACTIVE . registries . keySet ( ) ) ; <nl> + Collections . sort ( registryKeys , new Comparator < ResourceLocation > ( ) <nl> + { <nl> + @ Override <nl> + public int compare ( ResourceLocation o1 , ResourceLocation o2 ) <nl> + { <nl> + return o1 . toString ( ) . compareToIgnoreCase ( o2 . toString ( ) ) ; <nl> + } <nl> + } ) ; <nl> + fireRegistryEvent ( PersistentRegistry . ACTIVE . registries , BLOCKS ) ; <nl> + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; / / inject any blocks <nl> + fireRegistryEvent ( PersistentRegistry . ACTIVE . registries , ITEMS ) ; <nl> + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; / / inject any items <nl> + for ( ResourceLocation rl : registryKeys ) { <nl> + if ( rl = = BLOCKS | | rl = = ITEMS ) continue ; <nl> + fireRegistryEvent ( PersistentRegistry . ACTIVE . registries , rl ) ; <nl> + } <nl> + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; / / inject everything else <nl> + } <nl> + private static void fireRegistryEvent ( BiMap < ResourceLocation , FMLControlledNamespacedRegistry < ? > > registries , ResourceLocation name ) <nl> + { <nl> + final RegistryEvent . Register < ? > event = registries . get ( name ) . buildRegistryRegisterEvent ( name ) ; <nl> + MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> enum PersistentRegistry <nl> { <nl> ACTIVE , VANILLA , FROZEN , STAGING ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index cb1b4c6 . . 54c25b1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 332 , 6 + 332 , 11 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> @ Override <nl> public void reloadRenderers ( ) { <nl> / / NOOP <nl> + } <nl> <nl> + @ Override <nl> + public void fireSidedRegistryEvents ( ) <nl> + { <nl> + / / NOOP <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> index 4ffa6d8 . . 22dec2e 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 38 , 7 + 38 , 16 @ @ <nl> if ( p _ 146284 _ 1 _ . field _ 146127 _ k = = 11 ) <nl> { <nl> this . field _ 146297 _ k . func _ 71371 _ a ( " Demo _ World " , " Demo _ World " , DemoWorldServer . field _ 73071 _ a ) ; <nl> - @ @ - 512 , 7 + 521 , 16 @ @ <nl> + @ @ - 493 , 6 + 502 , 8 @ @ <nl> + this . func _ 73729 _ b ( j + 155 , k + 0 , 0 , 45 , 155 , 44 ) ; <nl> + } <nl> + <nl> + + this . field _ 73975 _ c = net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m , this . field _ 73975 _ c ) ; <nl> + + <nl> + GlStateManager . func _ 179094 _ E ( ) ; <nl> + GlStateManager . func _ 179109 _ b ( ( float ) ( this . field _ 146294 _ l / 2 + 90 ) , 70 . 0F , 0 . 0F ) ; <nl> + GlStateManager . func _ 179114 _ b ( - 20 . 0F , 0 . 0F , 0 . 0F , 1 . 0F ) ; <nl> + @ @ - 512 , 7 + 523 , 15 @ @ <nl> s = s + ( " release " . equalsIgnoreCase ( this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ? " " : " / " + this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ; <nl> } <nl> <nl> @ @ - 52 , 11 + 61 , 10 @ @ <nl> + this . func _ 73731 _ b ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + brdline * ( this . field _ 146289 _ q . field _ 78288 _ b + 1 ) ) , 16777215 ) ; <nl> + } <nl> + } <nl> - + net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m ) ; <nl> String s1 = " Copyright Mojang AB . Do not distribute ! " ; <nl> this . func _ 73731 _ b ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . func _ 78256 _ a ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; <nl> <nl> - @ @ - 529 , 6 + 547 , 7 @ @ <nl> + @ @ - 529 , 6 + 548 , 7 @ @ <nl> { <nl> this . field _ 183503 _ M . func _ 73863 _ a ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ , p _ 73863 _ 3 _ ) ; <nl> } <nl> @ @ - 64 , 3 + 72 , 12 @ @ <nl> } <nl> <nl> protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException <nl> + @ @ - 549 , 6 + 569 , 8 @ @ <nl> + { <nl> + this . field _ 183503 _ M . func _ 73864 _ a ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ ) ; <nl> + } <nl> + + <nl> + + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; <nl> + } <nl> + <nl> + public void func _ 146281 _ b ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 9f628dd . . a0b6050 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import static org . lwjgl . opengl . GL20 . * ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . nio . FloatBuffer ; <nl> + import java . util . Collections ; <nl> import java . util . Map ; <nl> <nl> import javax . vecmath . Matrix3f ; <nl> @ @ - 89 , 8 + 90 , 12 @ @ import net . minecraftforge . common . model . IModelPart ; <nl> import net . minecraftforge . common . model . ITransformation ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> + import net . minecraftforge . fml . client . GuiJava8Error ; <nl> import net . minecraftforge . fml . client . registry . ClientRegistry ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Java8VersionException ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . lwjgl . BufferUtils ; <nl> @ @ - 266 , 7 + 271 , 8 @ @ public class ForgeHooksClient <nl> / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; <nl> } <nl> <nl> - public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) <nl> + private static int updatescrollcounter = 0 ; <nl> + public static String renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height , String splashText ) <nl> { <nl> Status status = ForgeVersion . getStatus ( ) ; <nl> if ( status = = BETA | | status = = BETA _ OUTDATED ) <nl> @ @ - 278 , 6 + 284 , 17 @ @ public class ForgeHooksClient <nl> gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> } <nl> <nl> + if ( ! Loader . instance ( ) . java8 ) <nl> + { <nl> + String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + line = I18n . format ( " fml . messages . java8warning . 2 " ) ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; <nl> + updatescrollcounter + = 1 ; <nl> + updatescrollcounter % = 100 ; <nl> + } <nl> + <nl> String line = null ; <nl> switch ( status ) <nl> { <nl> @ @ - 294 , 6 + 311 , 24 @ @ public class ForgeHooksClient <nl> / / if we have a line , render it in the bottom right , above Mojang ' s copyright line <nl> gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> } <nl> + <nl> + return splashText ; <nl> + } <nl> + <nl> + public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) <nl> + { <nl> + if ( ! Loader . instance ( ) . java8 ) <nl> + { <nl> + if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) <nl> + { <nl> + int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; <nl> + w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; <nl> + if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) <nl> + { <nl> + FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> } <nl> <nl> public static ISound playSound ( SoundManager manager , ISound sound ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index d4a61a4 . . b18562c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> + import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 74 , 6 + 75 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean defaultHasSpawnFuzz = true ; <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> public static boolean replaceVanillaBucketModel = true ; <nl> + public static long java8Reminder = 0 ; <nl> <nl> private static Configuration config ; <nl> private static ForgeModContainer INSTANCE ; <nl> @ @ - 259 , 6 + 261 , 11 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> replaceVanillaBucketModel = prop . getBoolean ( Boolean . FALSE ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> + prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder , <nl> + " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; <nl> + java8Reminder = prop . getLong ( java8Reminder ) ; <nl> + propOrder . add ( prop . getName ( ) ) ; <nl> + <nl> config . setCategoryPropertyOrder ( CATEGORY _ CLIENT , propOrder ) ; <nl> <nl> if ( config . hasChanged ( ) ) <nl> @ @ - 267 , 6 + 274 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> } <nl> } <nl> <nl> + public static void updateNag ( ) <nl> + { <nl> + Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; <nl> + prop . set ( ( new Date ( ) ) . getTime ( ) ) ; <nl> + config . save ( ) ; <nl> + } <nl> + <nl> / * * <nl> * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . <nl> * This implementation uses the optional configID string to handle multiple Configurations using one event handler . <nl> diff - - git a / src / main / java / net / minecraftforge / common / config / Property . java b / src / main / java / net / minecraftforge / common / config / Property . java <nl> index db85afe . . d42bbad 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / config / Property . java <nl> + + + b / src / main / java / net / minecraftforge / common / config / Property . java <nl> @ @ - 680 , 14 + 680 , 7 @ @ public class Property <nl> * / <nl> public int getInt ( ) <nl> { <nl> - try <nl> - { <nl> - return Integer . parseInt ( value ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - return Integer . parseInt ( defaultValue ) ; <nl> - } <nl> + return getInt ( Integer . parseInt ( defaultValue ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 728 , 6 + 721 , 54 @ @ public class Property <nl> } <nl> <nl> / * * <nl> + * Returns the value in this property as a long , <nl> + * if the value is not a valid long , it will return the initially provided default . <nl> + * <nl> + * @ return The value <nl> + * / <nl> + public long getLong ( ) <nl> + { <nl> + return getLong ( Long . parseLong ( defaultValue ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the value in this property as a long , <nl> + * if the value is not a valid long , it will return the <nl> + * provided default . <nl> + * <nl> + * @ param _ default The default to provide if the current value is not a validlong <nl> + * @ return The value <nl> + * / <nl> + public long getLong ( long _ default ) <nl> + { <nl> + try <nl> + { <nl> + return Long . parseLong ( value ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + return _ default ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the current value stored in this property can be converted to a long . <nl> + * @ return True if the type of the Property is an Long <nl> + * / <nl> + public boolean isLongValue ( ) <nl> + { <nl> + try <nl> + { <nl> + Long . parseLong ( value ) ; <nl> + return true ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the value in this property as a boolean , <nl> * if the value is not a valid boolean , it will return the <nl> * provided default . <nl> @ @ - 1148 , 6 + 1189 , 7 @ @ public class Property <nl> this . setValues ( values ) ; <nl> } <nl> public void set ( int value ) { set ( Integer . toString ( value ) ) ; } <nl> + public void set ( long value ) { set ( Long . toString ( value ) ) ; } <nl> public void set ( boolean value ) { set ( Boolean . toString ( value ) ) ; } <nl> public void set ( double value ) { set ( Double . toString ( value ) ) ; } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 19e8d0b . . 87019d1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import java . lang . ref . WeakReference ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> + import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> @ @ - 69 , 6 + 70 , 7 @ @ import net . minecraft . util . StringUtils ; <nl> import net . minecraft . world . WorldSettings ; <nl> import net . minecraft . world . storage . SaveFormatComparator ; <nl> import net . minecraft . world . storage . SaveFormatOld ; <nl> + import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . fml . client . registry . RenderingRegistry ; <nl> import net . minecraftforge . fml . common . DummyModContainer ; <nl> import net . minecraftforge . fml . common . DuplicateModsFoundException ; <nl> @ @ - 76 , 6 + 78 , 7 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLContainerHolder ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . IFMLSidedHandler ; <nl> + import net . minecraftforge . fml . common . Java8VersionException ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderException ; <nl> import net . minecraftforge . fml . common . MetadataCollection ; <nl> @ @ - 158 , 6 + 161 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private boolean loading = true ; <nl> <nl> + private Java8VersionException j8onlymods ; <nl> + <nl> private WrongMinecraftVersionException wrongMC ; <nl> <nl> private CustomModLoadingErrorDisplayException customError ; <nl> @ @ - 212 , 6 + 217 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> dupesFound = dupes ; <nl> } <nl> + catch ( Java8VersionException j8mods ) <nl> + { <nl> + j8onlymods = j8mods ; <nl> + } <nl> catch ( MissingModsException missing ) <nl> { <nl> modsMissing = missing ; <nl> @ @ - 297 , 7 + 306 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> * / <nl> public void finishMinecraftLoading ( ) <nl> { <nl> - if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null ) <nl> + if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null ) <nl> { <nl> SplashProgress . finish ( ) ; <nl> return ; <nl> @ @ - 344 , 6 + 353 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> loading = false ; <nl> client . gameSettings . loadOptions ( ) ; / / Reload options to load any mod added keybindings . <nl> + Loader . instance ( ) . loadingComplete ( ) ; <nl> + SplashProgress . finish ( ) ; <nl> } <nl> <nl> public void extendModList ( ) <nl> @ @ - 383 , 6 + 394 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; <nl> } <nl> + else if ( j8onlymods ! = null ) <nl> + { <nl> + showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; <nl> + } <nl> else if ( modsMissing ! = null ) <nl> { <nl> showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; <nl> @ @ - 401 , 10 + 416 , 16 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> else <nl> { <nl> - Loader . instance ( ) . loadingComplete ( ) ; <nl> - SplashProgress . finish ( ) ; <nl> + logMissingTextureErrors ( ) ; <nl> + if ( ! Loader . instance ( ) . java8 ) <nl> + { <nl> + if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) <nl> + { <nl> + showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> + ForgeModContainer . updateNag ( ) ; <nl> + } <nl> + } <nl> } <nl> - logMissingTextureErrors ( ) ; <nl> } <nl> / * * <nl> * Get the server instance <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> new file mode 100644 <nl> index 0000000 . . af3071d <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> @ @ - 0 , 0 + 1 , 140 @ @ <nl> + / * <nl> + * Forge Mod Loader <nl> + * Copyright ( c ) 2012 - 2013 cpw . <nl> + * All rights reserved . This program and the accompanying materials <nl> + * are made available under the terms of the GNU Lesser Public License v2 . 1 <nl> + * which accompanies this distribution , and is available at <nl> + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html <nl> + * <nl> + * Contributors : <nl> + * cpw - implementation <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . client ; <nl> + <nl> + import net . minecraft . client . gui . GuiButton ; <nl> + import net . minecraft . client . gui . GuiErrorScreen ; <nl> + import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . util . text . TextFormatting ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Java8VersionException ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + <nl> + import java . awt . * ; <nl> + import java . io . IOException ; <nl> + import java . net . URI ; <nl> + import java . util . List ; <nl> + <nl> + public class GuiJava8Error extends GuiErrorScreen <nl> + { <nl> + private Java8VersionException java8VersionException ; <nl> + public GuiJava8Error ( Java8VersionException java8VersionException ) <nl> + { <nl> + super ( null , null ) ; <nl> + this . java8VersionException = java8VersionException ; <nl> + } <nl> + <nl> + @ Override <nl> + public void initGui ( ) <nl> + { <nl> + this . buttonList . clear ( ) ; <nl> + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; <nl> + if ( java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> + { <nl> + this . buttonList . add ( new GuiButton ( 3 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; <nl> + } <nl> + else <nl> + { <nl> + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " menu . quit " ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + protected void actionPerformed ( GuiButton button ) throws IOException <nl> + { <nl> + if ( button . id = = 1 ) <nl> + { <nl> + try <nl> + { <nl> + Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Problem launching browser " ) ; <nl> + } <nl> + } <nl> + else if ( button . id = = 2 ) <nl> + { <nl> + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; <nl> + } <nl> + else if ( button . id = = 3 ) <nl> + { <nl> + FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> + { <nl> + this . drawDefaultBackground ( ) ; <nl> + int offset = 25 ; <nl> + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> + { <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + } <nl> + else <nl> + { <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + } <nl> + offset + = 15 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 10 ; <nl> + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> + { <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 15 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 10 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 5 ; <nl> + for ( ModContainer mc : java8VersionException . getMods ( ) ) <nl> + { <nl> + offset + = 10 ; <nl> + this . drawCenteredString ( this . fontRendererObj , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; <nl> + List < String > lines = Lists . newArrayList ( ) ; <nl> + for ( String line : text . split ( " \ n " ) ) <nl> + { <nl> + lines . addAll ( this . fontRendererObj . listFormattedStringToWidth ( line , this . width - this . fontRendererObj . FONT _ HEIGHT * 4 ) ) ; <nl> + } <nl> + <nl> + int maxWidth = 0 ; <nl> + for ( String line : lines ) <nl> + { <nl> + maxWidth = Math . max ( maxWidth , this . fontRendererObj . getStringWidth ( line ) ) ; <nl> + } <nl> + <nl> + for ( String line : lines ) <nl> + { <nl> + this . drawString ( this . fontRendererObj , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = this . fontRendererObj . FONT _ HEIGHT + 2 ; <nl> + } <nl> + <nl> + offset + = 15 ; <nl> + } <nl> + / / super . super <nl> + for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) <nl> + { <nl> + ( ( GuiButton ) this . buttonList . get ( i ) ) . drawButton ( this . mc , mouseX , mouseY ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> index d9e11b3 . . d73d347 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ public class DummyModContainer implements ModContainer <nl> private ModMetadata md ; <nl> private ArtifactVersion processedVersion ; <nl> private String label ; <nl> + private int classVersion ; <nl> <nl> public DummyModContainer ( ModMetadata md ) <nl> { <nl> @ @ - 213 , 4 + 214 , 16 @ @ public class DummyModContainer implements ModContainer <nl> { <nl> return null ; <nl> } <nl> + <nl> + @ Override <nl> + public void setClassVersion ( int classVersion ) <nl> + { <nl> + this . classVersion = classVersion ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getClassVersion ( ) <nl> + { <nl> + return this . classVersion ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 8452fdc . . 8cc40bf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 90 , 6 + 90 , 7 @ @ public class FMLModContainer implements ModContainer <nl> private Map < String , String > customModProperties ; <nl> private ModCandidate candidate ; <nl> private URL updateJSONUrl ; <nl> + private int classVersion ; <nl> <nl> public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) <nl> { <nl> @ @ - 699 , 4 + 700 , 16 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> return updateJSONUrl ; <nl> } <nl> + <nl> + @ Override <nl> + public void setClassVersion ( int classVersion ) <nl> + { <nl> + this . classVersion = classVersion ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getClassVersion ( ) <nl> + { <nl> + return this . classVersion ; <nl> + } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> index 783c28b . . 94c67cf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> @ @ - 214 , 4 + 214 , 16 @ @ public class InjectedModContainer implements ModContainer <nl> { <nl> return wrappedContainer . getUpdateUrl ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void setClassVersion ( int classVersion ) <nl> + { <nl> + wrappedContainer . setClassVersion ( classVersion ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getClassVersion ( ) <nl> + { <nl> + return wrappedContainer . getClassVersion ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> new file mode 100644 <nl> index 0000000 . . c9200f6 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + / * <nl> + * Forge Mod Loader <nl> + * Copyright ( c ) 2012 - 2013 cpw . <nl> + * All rights reserved . This program and the accompanying materials <nl> + * are made available under the terms of the GNU Lesser Public License v2 . 1 <nl> + * which accompanies this distribution , and is available at <nl> + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html <nl> + * <nl> + * Contributors : <nl> + * cpw - implementation <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . common ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + public class Java8VersionException extends EnhancedRuntimeException <nl> + { <nl> + private static final long serialVersionUID = 1L ; <nl> + private final List < ModContainer > mods ; <nl> + <nl> + public Java8VersionException ( List < ModContainer > mods ) <nl> + { <nl> + super ( " Mods require Java 8 " ) ; <nl> + this . mods = mods ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void printStackTrace ( WrappedPrintStream stream ) <nl> + { <nl> + stream . println ( " Mods requiring Java 8 : " ) ; <nl> + for ( ModContainer mc : mods ) <nl> + { <nl> + stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; <nl> + } <nl> + stream . println ( " " ) ; <nl> + } <nl> + <nl> + public List < ModContainer > getMods ( ) <nl> + { <nl> + return mods ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 4bca3c0 . . f4b5142 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 161 , 6 + 161 , 7 @ @ public class Loader <nl> private File forcedModFile ; <nl> private ModDiscoverer discoverer ; <nl> private ProgressBar progressBar ; <nl> + public final boolean java8 ; <nl> <nl> public static Loader instance ( ) <nl> { <nl> @ @ - 187 , 6 + 188 , 14 @ @ public class Loader <nl> <nl> private Loader ( ) <nl> { <nl> + String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; <nl> + int major = Integer . parseInt ( ver [ 1 ] ) ; <nl> + java8 = major > 7 ; <nl> + if ( ! java8 ) <nl> + { <nl> + FMLLog . severe ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; <nl> + } <nl> + <nl> modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; <nl> if ( ! mccversion . equals ( MC _ VERSION ) ) <nl> { <nl> @ @ - 489 , 6 + 498 , 7 @ @ public class Loader <nl> ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; <nl> disableRequestedMods ( ) ; <nl> modController . distributeStateMessage ( FMLLoadEvent . class ) ; <nl> + checkJavaCompatibility ( ) ; <nl> sortModList ( ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; <nl> @ @ - 543 , 6 + 553 , 24 @ @ public class Loader <nl> modController . transition ( LoaderState . PREINITIALIZATION , false ) ; <nl> } <nl> <nl> + <nl> + private void checkJavaCompatibility ( ) <nl> + { <nl> + if ( java8 ) return ; <nl> + List < ModContainer > j8mods = Lists . newArrayList ( ) ; <nl> + for ( ModContainer mc : getActiveModList ( ) ) <nl> + { <nl> + if ( mc . getClassVersion ( ) > = 52 ) <nl> + { <nl> + j8mods . add ( mc ) ; <nl> + } <nl> + } <nl> + if ( ! j8mods . isEmpty ( ) ) <nl> + { <nl> + throw new Java8VersionException ( j8mods ) ; <nl> + } <nl> + } <nl> + <nl> public void preinitializeMods ( ) <nl> { <nl> if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> index 883f8b9 . . cd82ff0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> @ @ - 152 , 4 + 152 , 8 @ @ public interface ModContainer <nl> boolean shouldLoadInEnvironment ( ) ; <nl> <nl> URL getUpdateUrl ( ) ; <nl> + <nl> + void setClassVersion ( int classVersion ) ; <nl> + <nl> + int getClassVersion ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> index 6eb8dec . . 0fd5d7d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ public class ASMDataTable <nl> private String annotationName ; <nl> private String className ; <nl> private String objectName ; <nl> + private int classVersion ; <nl> private Map < String , Object > annotationInfo ; <nl> public ASMData ( ModCandidate candidate , String annotationName , String className , String objectName , Map < String , Object > info ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> index 226ddd6 . . 77346da 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> @ @ - 83 , 6 + 83 , 7 @ @ public class JarDiscoverer implements ITypeDiscoverer <nl> table . addContainer ( container ) ; <nl> foundMods . add ( container ) ; <nl> container . bindMetadata ( mc ) ; <nl> + container . setClassVersion ( modParser . getClassVersion ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 7c35d8e . . cbdf668 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> commands . forge . usage = Use / forge < subcommand > . Subcommands are tps , track <nl> - commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . <nl> + commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . <nl> commands . forge . tps . summary = % s : Mean tick time : % d ms . Mean TPS : % d <nl> <nl> commands . forge . tracking . te . enabled = Tile Entity tracking enabled for % d seconds . <nl> @ @ - 153 , 4 + 153 , 18 @ @ fml . menu . mods . normal = Normal <nl> fml . menu . mods . search = Search : <nl> fml . menu . modoptions = Mod Options . . . <nl> <nl> - item . forge . bucketFilled . name = % s Bucket <nl> \ No newline at end of file <nl> + item . forge . bucketFilled . name = % s Bucket <nl> + <nl> + fml . messages . java8problem = % s % sJava Update Required % s <nl> + fml . messages . java8recommended = % s % sJava Update Recommended % s <nl> + fml . messages . modslistedbelow = The mods listed below % s <nl> + fml . messages . requirejava8 = require Java 8 <nl> + fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! <nl> + fml . messages . java8warning . 2 = You need to update Java <nl> + fml . messages . javaversion = Your Java version is Java % s ( version string % s ) <nl> + fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play <nl> + fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods <nl> + fml . messages . countbadandgood = % s of % s mods have this problem <nl> + <nl> + fml . button . visitjavadownloads = Oracle Java SE Downloads <nl> + fml . button . continue = Continue <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / event / ModelRegistryEvent . java b / src / main / java / net / minecraftforge / client / event / ModelRegistryEvent . java 
 new file mode 100644 
 index 0000000 . . b14025c 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / event / ModelRegistryEvent . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . client . event ; 
 + 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + 
 + / * * 
 + * Fired when the { @ link net . minecraftforge . client . model . ModelLoader } is ready to receive registrations 
 + * / 
 + public class ModelRegistryEvent extends Event 
 + { 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / event / RegistryEvent . java b / src / main / java / net / minecraftforge / event / RegistryEvent . java 
 new file mode 100644 
 index 0000000 . . a1967e5 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / RegistryEvent . java 
 @ @ - 0 , 0 + 1 , 77 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . event ; 
 + 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + import net . minecraftforge . fml . common . eventhandler . GenericEvent ; 
 + import net . minecraftforge . fml . common . registry . IForgeRegistry ; 
 + import net . minecraftforge . fml . common . registry . IForgeRegistryEntry ; 
 + import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; 
 + 
 + 
 + / * * 
 + * RegistryEvent supertype . 
 + * / 
 + public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEvent < T > 
 + { 
 + RegistryEvent ( Class < T > clazz ) { 
 + super ( clazz ) ; 
 + } 
 + / * * 
 + * Register new registries when you receive this event , through the { @ link PersistentRegistryManager } 
 + * / 
 + public static class NewRegistry extends Event { 
 + } 
 + 
 + / * * 
 + * Register your objects for the appropriate registry type when you receive this event . 
 + * 
 + * < code > event . getRegistry ( ) . register ( . . . ) < / code > 
 + * 
 + * The registries will be visited in alphabetic order of their name , except blocks and items , 
 + * which will be visited FIRST and SECOND respectively . 
 + * 
 + * ObjectHolders will reload between Blocks and Items , and after all registries have been visited . 
 + * @ param < T > The registry top level type 
 + * / 
 + public static class Register < T extends IForgeRegistryEntry < T > > extends RegistryEvent < T > { 
 + private final IForgeRegistry < T > registry ; 
 + private final ResourceLocation location ; 
 + 
 + public Register ( ResourceLocation location , IForgeRegistry < T > registry ) 
 + { 
 + super ( registry . getRegistrySuperType ( ) ) ; 
 + this . location = location ; 
 + this . registry = registry ; 
 + } 
 + 
 + public IForgeRegistry < T > getRegistry ( ) 
 + { 
 + return registry ; 
 + } 
 + 
 + public ResourceLocation getLocation ( ) 
 + { 
 + return location ; 
 + } 
 + 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index b468546 . . 9bb217c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 76 , 7 + 76 , 9 @ @ import net . minecraft . util . StringUtils ; 
 import net . minecraft . world . WorldSettings ; 
 import net . minecraft . world . storage . WorldSummary ; 
 import net . minecraft . world . storage . SaveFormatOld ; 
 + import net . minecraftforge . client . event . ModelRegistryEvent ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fml . client . registry . RenderingRegistry ; 
 import net . minecraftforge . fml . common . DummyModContainer ; 
 import net . minecraftforge . fml . common . DuplicateModsFoundException ; 
 @ @ - 1038 , 4 + 1040 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 this . client . renderGlobal . loadRenderers ( ) ; 
 } 
 + 
 + @ Override 
 + public void fireSidedRegistryEvents ( ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new ModelRegistryEvent ( ) ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 new file mode 100644 
 index 0000000 . . 81df043 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 @ @ - 0 , 0 + 1 , 77 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . common ; 
 + 
 + import com . google . common . base . Strings ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 + import net . minecraftforge . fml . common . discovery . asm . ModAnnotation ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + import org . apache . logging . log4j . Level ; 
 + 
 + import java . lang . reflect . Field ; 
 + import java . lang . reflect . Modifier ; 
 + import java . util . Arrays ; 
 + import java . util . EnumSet ; 
 + import java . util . List ; 
 + import java . util . Set ; 
 + 
 + / * * 
 + * Automatic eventbus subscriber - reads { @ link net . minecraftforge . fml . common . Mod . EventBusSubscriber } 
 + * annotations and passes the class instances to the { @ link net . minecraftforge . common . MinecraftForge . EVENT _ BUS } 
 + * / 
 + public class AutomaticEventSubscriber 
 + { 
 + private static final EnumSet < Side > DEFAULT = EnumSet . allOf ( Side . class ) ; 
 + public static void inject ( ModContainer mod , ASMDataTable data , Side side ) 
 + { 
 + FMLLog . fine ( " Attempting to inject @ EventBusSubscriber classes into the eventbus for % s " , mod . getModId ( ) ) ; 
 + Set < ASMDataTable . ASMData > targets = data . getAnnotationsFor ( mod ) . get ( Mod . EventBusSubscriber . class . getName ( ) ) ; 
 + ClassLoader mcl = Loader . instance ( ) . getModClassLoader ( ) ; 
 + 
 + for ( ASMDataTable . ASMData targ : targets ) 
 + { 
 + try 
 + { 
 + / / noinspection unchecked 
 + List < ModAnnotation . EnumHolder > sidesEnum = ( List < ModAnnotation . EnumHolder > ) targ . getAnnotationInfo ( ) . get ( " value " ) ; 
 + EnumSet < Side > sides = DEFAULT ; 
 + if ( sidesEnum ! = null ) { 
 + sides = EnumSet . noneOf ( Side . class ) ; 
 + for ( ModAnnotation . EnumHolder h : sidesEnum ) { 
 + sides . add ( Side . valueOf ( h . getValue ( ) ) ) ; 
 + } 
 + } 
 + if ( sides = = DEFAULT | | sides . contains ( side ) ) { 
 + FMLLog . fine ( " Found @ EventBusSubscriber class % s " , targ . getClassName ( ) ) ; 
 + Class < ? > subscriptionTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; 
 + MinecraftForge . EVENT _ BUS . register ( subscriptionTarget ) ; 
 + FMLLog . fine ( " Injected @ EventBusSubscriber class % s " , targ . getClassName ( ) ) ; 
 + } 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " An error occurred trying to load an EventBusSubscriber % s for modid % s " , targ . getClassName ( ) , mod . getModId ( ) ) ; 
 + throw new LoaderException ( e ) ; 
 + } 
 + } 
 + } 
 + 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index 085a619 . . e16cd37 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 746 , 4 + 746 , 9 @ @ public class FMLCommonHandler 
 public void reloadRenderers ( ) { 
 sidedDelegate . reloadRenderers ( ) ; 
 } 
 + 
 + public void fireSidedRegistryEvents ( ) 
 + { 
 + sidedDelegate . fireSidedRegistryEvents ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 6dac654 . . ac424bf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 573 , 6 + 573 , 8 @ @ public class FMLModContainer implements ModContainer 
 eventBus . post ( new FMLFingerprintViolationEvent ( source . isDirectory ( ) , source , ImmutableSet . copyOf ( this . sourceFingerprints ) , expectedFingerprint ) ) ; 
 } 
 ProxyInjector . inject ( this , event . getASMHarvestedData ( ) , FMLCommonHandler . instance ( ) . getSide ( ) , getLanguageAdapter ( ) ) ; 
 + AutomaticEventSubscriber . inject ( this , event . getASMHarvestedData ( ) , FMLCommonHandler . instance ( ) . getSide ( ) ) ; 
 + 
 processFieldAnnotations ( event . getASMHarvestedData ( ) ) ; 
 } 
 catch ( Throwable e ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 index 4c49ed1 . . aea07ff 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 @ @ - 75 , 4 + 75 , 6 @ @ public interface IFMLSidedHandler 
 String stripSpecialChars ( String message ) ; 
 
 void reloadRenderers ( ) ; 
 + 
 + void fireSidedRegistryEvents ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 82bcd17 . . 3f43f78 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 604 , 6 + 604 , 8 @ @ public class Loader 
 ObjectHolderRegistry . INSTANCE . findObjectHolders ( discoverer . getASMTable ( ) ) ; 
 ItemStackHolderInjector . INSTANCE . findHolders ( discoverer . getASMTable ( ) ) ; 
 CapabilityManager . INSTANCE . injectCapabilities ( discoverer . getASMTable ( ) ) ; 
 + PersistentRegistryManager . fireRegistryEvents ( ) ; 
 + FMLCommonHandler . instance ( ) . fireSidedRegistryEvents ( ) ; 
 modController . distributeStateMessage ( LoaderState . PREINITIALIZATION , discoverer . getASMTable ( ) , canonicalConfigDir ) ; 
 ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 ItemStackHolderInjector . INSTANCE . inject ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index 47ba5e5 . . 24afe9d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import net . minecraftforge . fml . common . event . FMLServerStoppingEvent ; 
 import net . minecraftforge . fml . common . event . FMLInterModComms . IMCEvent ; 
 import net . minecraftforge . fml . common . network . NetworkCheckHandler ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 
 / * * 
 * This defines a Mod to FML . 
 @ @ - 305 , 4 + 306 , 13 @ @ public @ interface Mod 
 @ Target ( ElementType . METHOD ) 
 public @ interface InstanceFactory { 
 } 
 + 
 + / * * 
 + * A class which will be subscribed to { @ link net . minecraftforge . common . MinecraftForge . EVENT _ BUS } at mod construction time . 
 + * / 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . TYPE ) 
 + public @ interface EventBusSubscriber { 
 + Side [ ] value ( ) default { Side . CLIENT , Side . SERVER } ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java 
 index 9394b41 . . 412aab6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / ASMEventHandler . java 
 @ @ - 68 , 11 + 68 , 9 @ @ public class ASMEventHandler implements IEventListener 
 if ( isGeneric ) 
 { 
 java . lang . reflect . Type type = method . getGenericParameterTypes ( ) [ 0 ] ; 
 - System . currentTimeMillis ( ) ; 
 if ( type instanceof ParameterizedType ) 
 { 
 filter = ( ( ParameterizedType ) type ) . getActualTypeArguments ( ) [ 0 ] ; 
 - System . currentTimeMillis ( ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index e63b5bb . . d9d621b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import com . google . common . collect . Iterators ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 import org . apache . commons . lang3 . Validate ; 
 import org . apache . logging . log4j . Level ; 
 
 @ @ - 830 , 6 + 831 , 13 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e 
 add ( - 1 , key , value ) ; 
 } 
 
 + public void registerAll ( I . . . values ) 
 + { 
 + for ( I value : values ) 
 + { 
 + register ( value ) ; 
 + } 
 + } 
 @ Override 
 public boolean containsValue ( I value ) 
 { 
 @ @ - 908 , 4 + 916 , 10 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e 
 { 
 return ( T ) slaves . get ( slaveMapName ) ; 
 } 
 + 
 + RegistryEvent . Register < I > buildRegistryRegisterEvent ( ResourceLocation location ) 
 + { 
 + return new RegistryEvent . Register < I > ( location , this ) ; 
 + } 
 + 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java 
 index 5486364 . . 3d52bb2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistry . java 
 @ @ - 39 , 6 + 39 , 8 @ @ public interface IForgeRegistry < V extends IForgeRegistryEntry < V > > extends Iterab 
 
 void register ( V value ) ; 
 
 + void registerAll ( V . . . values ) ; 
 + 
 boolean containsKey ( ResourceLocation key ) ; 
 boolean containsValue ( V value ) ; 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistryEntry . java b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistryEntry . java 
 index 87f043a . . 919f803 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistryEntry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / IForgeRegistryEntry . java 
 @ @ - 89 , 7 + 89 , 6 @ @ public interface IForgeRegistryEntry < V > 
 / / Helper functions 
 public final T setRegistryName ( ResourceLocation name ) { return setRegistryName ( name . toString ( ) ) ; } 
 public final T setRegistryName ( String modID , String name ) { return setRegistryName ( modID + " : " + name ) ; } 
 - 
 public final ResourceLocation getRegistryName ( ) 
 { 
 if ( delegate . name ( ) ! = null ) return delegate . name ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 9c7a8aa . . 71010a3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 20 , 8 + 20 , 9 @ @ 
 package net . minecraftforge . fml . common . registry ; 
 
 import java . io . IOException ; 
 - import java . lang . reflect . InvocationTargetException ; 
 import java . lang . reflect . Method ; 
 + import java . util . Collections ; 
 + import java . util . Comparator ; 
 import java . util . HashMap ; 
 import java . util . HashSet ; 
 import java . util . LinkedHashMap ; 
 @ @ - 33 , 6 + 34 , 8 @ @ import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockAir ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 import net . minecraftforge . fml . common . EnhancedRuntimeException ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 @ @ - 64 , 6 + 67 , 35 @ @ import com . google . common . collect . Sets . SetView ; 
 @ SuppressWarnings ( " WeakerAccess " ) 
 public class PersistentRegistryManager 
 { 
 + public static void fireRegistryEvents ( ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new RegistryEvent . NewRegistry ( ) ) ; 
 + 
 + List < ResourceLocation > registryKeys = Lists . newArrayList ( PersistentRegistry . ACTIVE . registries . keySet ( ) ) ; 
 + Collections . sort ( registryKeys , new Comparator < ResourceLocation > ( ) 
 + { 
 + @ Override 
 + public int compare ( ResourceLocation o1 , ResourceLocation o2 ) 
 + { 
 + return o1 . toString ( ) . compareToIgnoreCase ( o2 . toString ( ) ) ; 
 + } 
 + } ) ; 
 + fireRegistryEvent ( PersistentRegistry . ACTIVE . registries , BLOCKS ) ; 
 + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; / / inject any blocks 
 + fireRegistryEvent ( PersistentRegistry . ACTIVE . registries , ITEMS ) ; 
 + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; / / inject any items 
 + for ( ResourceLocation rl : registryKeys ) { 
 + if ( rl = = BLOCKS | | rl = = ITEMS ) continue ; 
 + fireRegistryEvent ( PersistentRegistry . ACTIVE . registries , rl ) ; 
 + } 
 + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; / / inject everything else 
 + } 
 + private static void fireRegistryEvent ( BiMap < ResourceLocation , FMLControlledNamespacedRegistry < ? > > registries , ResourceLocation name ) 
 + { 
 + final RegistryEvent . Register < ? > event = registries . get ( name ) . buildRegistryRegisterEvent ( name ) ; 
 + MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 enum PersistentRegistry 
 { 
 ACTIVE , VANILLA , FROZEN , STAGING ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index cb1b4c6 . . 54c25b1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 332 , 6 + 332 , 11 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 @ Override 
 public void reloadRenderers ( ) { 
 / / NOOP 
 + } 
 
 + @ Override 
 + public void fireSidedRegistryEvents ( ) 
 + { 
 + / / NOOP 
 } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 index 4ffa6d8 . . 22dec2e 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 38 , 7 + 38 , 16 @ @ 
 if ( p _ 146284 _ 1 _ . field _ 146127 _ k = = 11 ) 
 { 
 this . field _ 146297 _ k . func _ 71371 _ a ( " Demo _ World " , " Demo _ World " , DemoWorldServer . field _ 73071 _ a ) ; 
 - @ @ - 512 , 7 + 521 , 16 @ @ 
 + @ @ - 493 , 6 + 502 , 8 @ @ 
 + this . func _ 73729 _ b ( j + 155 , k + 0 , 0 , 45 , 155 , 44 ) ; 
 + } 
 + 
 + + this . field _ 73975 _ c = net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m , this . field _ 73975 _ c ) ; 
 + + 
 + GlStateManager . func _ 179094 _ E ( ) ; 
 + GlStateManager . func _ 179109 _ b ( ( float ) ( this . field _ 146294 _ l / 2 + 90 ) , 70 . 0F , 0 . 0F ) ; 
 + GlStateManager . func _ 179114 _ b ( - 20 . 0F , 0 . 0F , 0 . 0F , 1 . 0F ) ; 
 + @ @ - 512 , 7 + 523 , 15 @ @ 
 s = s + ( " release " . equalsIgnoreCase ( this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ? " " : " / " + this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ; 
 } 
 
 @ @ - 52 , 11 + 61 , 10 @ @ 
 + this . func _ 73731 _ b ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + brdline * ( this . field _ 146289 _ q . field _ 78288 _ b + 1 ) ) , 16777215 ) ; 
 + } 
 + } 
 - + net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m ) ; 
 String s1 = " Copyright Mojang AB . Do not distribute ! " ; 
 this . func _ 73731 _ b ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . func _ 78256 _ a ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; 
 
 - @ @ - 529 , 6 + 547 , 7 @ @ 
 + @ @ - 529 , 6 + 548 , 7 @ @ 
 { 
 this . field _ 183503 _ M . func _ 73863 _ a ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ , p _ 73863 _ 3 _ ) ; 
 } 
 @ @ - 64 , 3 + 72 , 12 @ @ 
 } 
 
 protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException 
 + @ @ - 549 , 6 + 569 , 8 @ @ 
 + { 
 + this . field _ 183503 _ M . func _ 73864 _ a ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ ) ; 
 + } 
 + + 
 + + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; 
 + } 
 + 
 + public void func _ 146281 _ b ( ) 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 9f628dd . . a0b6050 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import static org . lwjgl . opengl . GL20 . * ; 
 
 import java . nio . ByteBuffer ; 
 import java . nio . FloatBuffer ; 
 + import java . util . Collections ; 
 import java . util . Map ; 
 
 import javax . vecmath . Matrix3f ; 
 @ @ - 89 , 8 + 90 , 12 @ @ import net . minecraftforge . common . model . IModelPart ; 
 import net . minecraftforge . common . model . ITransformation ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 + import net . minecraftforge . fml . client . GuiJava8Error ; 
 import net . minecraftforge . fml . client . registry . ClientRegistry ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Java8VersionException ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 import org . lwjgl . BufferUtils ; 
 @ @ - 266 , 7 + 271 , 8 @ @ public class ForgeHooksClient 
 / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; 
 } 
 
 - public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) 
 + private static int updatescrollcounter = 0 ; 
 + public static String renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height , String splashText ) 
 { 
 Status status = ForgeVersion . getStatus ( ) ; 
 if ( status = = BETA | | status = = BETA _ OUTDATED ) 
 @ @ - 278 , 6 + 284 , 17 @ @ public class ForgeHooksClient 
 gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 } 
 
 + if ( ! Loader . instance ( ) . java8 ) 
 + { 
 + String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + line = I18n . format ( " fml . messages . java8warning . 2 " ) ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; 
 + updatescrollcounter + = 1 ; 
 + updatescrollcounter % = 100 ; 
 + } 
 + 
 String line = null ; 
 switch ( status ) 
 { 
 @ @ - 294 , 6 + 311 , 24 @ @ public class ForgeHooksClient 
 / / if we have a line , render it in the bottom right , above Mojang ' s copyright line 
 gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 } 
 + 
 + return splashText ; 
 + } 
 + 
 + public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) 
 + { 
 + if ( ! Loader . instance ( ) . java8 ) 
 + { 
 + if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) 
 + { 
 + int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; 
 + w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; 
 + if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) 
 + { 
 + FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 + } 
 + } 
 + } 
 } 
 
 public static ISound playSound ( SoundManager manager , ISound sound ) 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index d4a61a4 . . b18562c 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 + import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 74 , 6 + 75 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean defaultHasSpawnFuzz = true ; 
 public static boolean forgeLightPipelineEnabled = true ; 
 public static boolean replaceVanillaBucketModel = true ; 
 + public static long java8Reminder = 0 ; 
 
 private static Configuration config ; 
 private static ForgeModContainer INSTANCE ; 
 @ @ - 259 , 6 + 261 , 11 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 replaceVanillaBucketModel = prop . getBoolean ( Boolean . FALSE ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 + prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder , 
 + " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; 
 + java8Reminder = prop . getLong ( java8Reminder ) ; 
 + propOrder . add ( prop . getName ( ) ) ; 
 + 
 config . setCategoryPropertyOrder ( CATEGORY _ CLIENT , propOrder ) ; 
 
 if ( config . hasChanged ( ) ) 
 @ @ - 267 , 6 + 274 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 } 
 } 
 
 + public static void updateNag ( ) 
 + { 
 + Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; 
 + prop . set ( ( new Date ( ) ) . getTime ( ) ) ; 
 + config . save ( ) ; 
 + } 
 + 
 / * * 
 * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . 
 * This implementation uses the optional configID string to handle multiple Configurations using one event handler . 
 diff - - git a / src / main / java / net / minecraftforge / common / config / Property . java b / src / main / java / net / minecraftforge / common / config / Property . java 
 index db85afe . . d42bbad 100644 
 - - - a / src / main / java / net / minecraftforge / common / config / Property . java 
 + + + b / src / main / java / net / minecraftforge / common / config / Property . java 
 @ @ - 680 , 14 + 680 , 7 @ @ public class Property 
 * / 
 public int getInt ( ) 
 { 
 - try 
 - { 
 - return Integer . parseInt ( value ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - return Integer . parseInt ( defaultValue ) ; 
 - } 
 + return getInt ( Integer . parseInt ( defaultValue ) ) ; 
 } 
 
 / * * 
 @ @ - 728 , 6 + 721 , 54 @ @ public class Property 
 } 
 
 / * * 
 + * Returns the value in this property as a long , 
 + * if the value is not a valid long , it will return the initially provided default . 
 + * 
 + * @ return The value 
 + * / 
 + public long getLong ( ) 
 + { 
 + return getLong ( Long . parseLong ( defaultValue ) ) ; 
 + } 
 + 
 + / * * 
 + * Returns the value in this property as a long , 
 + * if the value is not a valid long , it will return the 
 + * provided default . 
 + * 
 + * @ param _ default The default to provide if the current value is not a validlong 
 + * @ return The value 
 + * / 
 + public long getLong ( long _ default ) 
 + { 
 + try 
 + { 
 + return Long . parseLong ( value ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + return _ default ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks if the current value stored in this property can be converted to a long . 
 + * @ return True if the type of the Property is an Long 
 + * / 
 + public boolean isLongValue ( ) 
 + { 
 + try 
 + { 
 + Long . parseLong ( value ) ; 
 + return true ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the value in this property as a boolean , 
 * if the value is not a valid boolean , it will return the 
 * provided default . 
 @ @ - 1148 , 6 + 1189 , 7 @ @ public class Property 
 this . setValues ( values ) ; 
 } 
 public void set ( int value ) { set ( Integer . toString ( value ) ) ; } 
 + public void set ( long value ) { set ( Long . toString ( value ) ) ; } 
 public void set ( boolean value ) { set ( Boolean . toString ( value ) ) ; } 
 public void set ( double value ) { set ( Double . toString ( value ) ) ; } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 19e8d0b . . 87019d1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 + import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 @ @ - 69 , 6 + 70 , 7 @ @ import net . minecraft . util . StringUtils ; 
 import net . minecraft . world . WorldSettings ; 
 import net . minecraft . world . storage . SaveFormatComparator ; 
 import net . minecraft . world . storage . SaveFormatOld ; 
 + import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . fml . client . registry . RenderingRegistry ; 
 import net . minecraftforge . fml . common . DummyModContainer ; 
 import net . minecraftforge . fml . common . DuplicateModsFoundException ; 
 @ @ - 76 , 6 + 78 , 7 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLContainerHolder ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . IFMLSidedHandler ; 
 + import net . minecraftforge . fml . common . Java8VersionException ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderException ; 
 import net . minecraftforge . fml . common . MetadataCollection ; 
 @ @ - 158 , 6 + 161 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private boolean loading = true ; 
 
 + private Java8VersionException j8onlymods ; 
 + 
 private WrongMinecraftVersionException wrongMC ; 
 
 private CustomModLoadingErrorDisplayException customError ; 
 @ @ - 212 , 6 + 217 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 dupesFound = dupes ; 
 } 
 + catch ( Java8VersionException j8mods ) 
 + { 
 + j8onlymods = j8mods ; 
 + } 
 catch ( MissingModsException missing ) 
 { 
 modsMissing = missing ; 
 @ @ - 297 , 7 + 306 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 * / 
 public void finishMinecraftLoading ( ) 
 { 
 - if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null ) 
 + if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null ) 
 { 
 SplashProgress . finish ( ) ; 
 return ; 
 @ @ - 344 , 6 + 353 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 loading = false ; 
 client . gameSettings . loadOptions ( ) ; / / Reload options to load any mod added keybindings . 
 + Loader . instance ( ) . loadingComplete ( ) ; 
 + SplashProgress . finish ( ) ; 
 } 
 
 public void extendModList ( ) 
 @ @ - 383 , 6 + 394 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; 
 } 
 + else if ( j8onlymods ! = null ) 
 + { 
 + showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; 
 + } 
 else if ( modsMissing ! = null ) 
 { 
 showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; 
 @ @ - 401 , 10 + 416 , 16 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 else 
 { 
 - Loader . instance ( ) . loadingComplete ( ) ; 
 - SplashProgress . finish ( ) ; 
 + logMissingTextureErrors ( ) ; 
 + if ( ! Loader . instance ( ) . java8 ) 
 + { 
 + if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) 
 + { 
 + showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 + ForgeModContainer . updateNag ( ) ; 
 + } 
 + } 
 } 
 - logMissingTextureErrors ( ) ; 
 } 
 / * * 
 * Get the server instance 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 new file mode 100644 
 index 0000000 . . af3071d 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 @ @ - 0 , 0 + 1 , 140 @ @ 
 + / * 
 + * Forge Mod Loader 
 + * Copyright ( c ) 2012 - 2013 cpw . 
 + * All rights reserved . This program and the accompanying materials 
 + * are made available under the terms of the GNU Lesser Public License v2 . 1 
 + * which accompanies this distribution , and is available at 
 + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html 
 + * 
 + * Contributors : 
 + * cpw - implementation 
 + * / 
 + 
 + package net . minecraftforge . fml . client ; 
 + 
 + import net . minecraft . client . gui . GuiButton ; 
 + import net . minecraft . client . gui . GuiErrorScreen ; 
 + import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . util . text . TextFormatting ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Java8VersionException ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import org . apache . logging . log4j . Level ; 
 + 
 + import com . google . common . collect . Lists ; 
 + 
 + import java . awt . * ; 
 + import java . io . IOException ; 
 + import java . net . URI ; 
 + import java . util . List ; 
 + 
 + public class GuiJava8Error extends GuiErrorScreen 
 + { 
 + private Java8VersionException java8VersionException ; 
 + public GuiJava8Error ( Java8VersionException java8VersionException ) 
 + { 
 + super ( null , null ) ; 
 + this . java8VersionException = java8VersionException ; 
 + } 
 + 
 + @ Override 
 + public void initGui ( ) 
 + { 
 + this . buttonList . clear ( ) ; 
 + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; 
 + if ( java8VersionException . getMods ( ) . isEmpty ( ) ) 
 + { 
 + this . buttonList . add ( new GuiButton ( 3 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; 
 + } 
 + else 
 + { 
 + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " menu . quit " ) ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + protected void actionPerformed ( GuiButton button ) throws IOException 
 + { 
 + if ( button . id = = 1 ) 
 + { 
 + try 
 + { 
 + Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Problem launching browser " ) ; 
 + } 
 + } 
 + else if ( button . id = = 2 ) 
 + { 
 + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; 
 + } 
 + else if ( button . id = = 3 ) 
 + { 
 + FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 + { 
 + this . drawDefaultBackground ( ) ; 
 + int offset = 25 ; 
 + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 + { 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + } 
 + else 
 + { 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + } 
 + offset + = 15 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 10 ; 
 + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 + { 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 15 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 10 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 5 ; 
 + for ( ModContainer mc : java8VersionException . getMods ( ) ) 
 + { 
 + offset + = 10 ; 
 + this . drawCenteredString ( this . fontRendererObj , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 + } 
 + } 
 + else 
 + { 
 + String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; 
 + List < String > lines = Lists . newArrayList ( ) ; 
 + for ( String line : text . split ( " \ n " ) ) 
 + { 
 + lines . addAll ( this . fontRendererObj . listFormattedStringToWidth ( line , this . width - this . fontRendererObj . FONT _ HEIGHT * 4 ) ) ; 
 + } 
 + 
 + int maxWidth = 0 ; 
 + for ( String line : lines ) 
 + { 
 + maxWidth = Math . max ( maxWidth , this . fontRendererObj . getStringWidth ( line ) ) ; 
 + } 
 + 
 + for ( String line : lines ) 
 + { 
 + this . drawString ( this . fontRendererObj , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; 
 + offset + = this . fontRendererObj . FONT _ HEIGHT + 2 ; 
 + } 
 + 
 + offset + = 15 ; 
 + } 
 + / / super . super 
 + for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) 
 + { 
 + ( ( GuiButton ) this . buttonList . get ( i ) ) . drawButton ( this . mc , mouseX , mouseY ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 index d9e11b3 . . d73d347 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 @ @ - 32 , 6 + 32 , 7 @ @ public class DummyModContainer implements ModContainer 
 private ModMetadata md ; 
 private ArtifactVersion processedVersion ; 
 private String label ; 
 + private int classVersion ; 
 
 public DummyModContainer ( ModMetadata md ) 
 { 
 @ @ - 213 , 4 + 214 , 16 @ @ public class DummyModContainer implements ModContainer 
 { 
 return null ; 
 } 
 + 
 + @ Override 
 + public void setClassVersion ( int classVersion ) 
 + { 
 + this . classVersion = classVersion ; 
 + } 
 + 
 + @ Override 
 + public int getClassVersion ( ) 
 + { 
 + return this . classVersion ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 8452fdc . . 8cc40bf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 90 , 6 + 90 , 7 @ @ public class FMLModContainer implements ModContainer 
 private Map < String , String > customModProperties ; 
 private ModCandidate candidate ; 
 private URL updateJSONUrl ; 
 + private int classVersion ; 
 
 public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) 
 { 
 @ @ - 699 , 4 + 700 , 16 @ @ public class FMLModContainer implements ModContainer 
 { 
 return updateJSONUrl ; 
 } 
 + 
 + @ Override 
 + public void setClassVersion ( int classVersion ) 
 + { 
 + this . classVersion = classVersion ; 
 + } 
 + 
 + @ Override 
 + public int getClassVersion ( ) 
 + { 
 + return this . classVersion ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 index 783c28b . . 94c67cf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 @ @ - 214 , 4 + 214 , 16 @ @ public class InjectedModContainer implements ModContainer 
 { 
 return wrappedContainer . getUpdateUrl ( ) ; 
 } 
 + 
 + @ Override 
 + public void setClassVersion ( int classVersion ) 
 + { 
 + wrappedContainer . setClassVersion ( classVersion ) ; 
 + } 
 + 
 + @ Override 
 + public int getClassVersion ( ) 
 + { 
 + return wrappedContainer . getClassVersion ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 new file mode 100644 
 index 0000000 . . c9200f6 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + / * 
 + * Forge Mod Loader 
 + * Copyright ( c ) 2012 - 2013 cpw . 
 + * All rights reserved . This program and the accompanying materials 
 + * are made available under the terms of the GNU Lesser Public License v2 . 1 
 + * which accompanies this distribution , and is available at 
 + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html 
 + * 
 + * Contributors : 
 + * cpw - implementation 
 + * / 
 + 
 + package net . minecraftforge . fml . common ; 
 + 
 + import java . util . List ; 
 + 
 + public class Java8VersionException extends EnhancedRuntimeException 
 + { 
 + private static final long serialVersionUID = 1L ; 
 + private final List < ModContainer > mods ; 
 + 
 + public Java8VersionException ( List < ModContainer > mods ) 
 + { 
 + super ( " Mods require Java 8 " ) ; 
 + this . mods = mods ; 
 + } 
 + 
 + @ Override 
 + protected void printStackTrace ( WrappedPrintStream stream ) 
 + { 
 + stream . println ( " Mods requiring Java 8 : " ) ; 
 + for ( ModContainer mc : mods ) 
 + { 
 + stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; 
 + } 
 + stream . println ( " " ) ; 
 + } 
 + 
 + public List < ModContainer > getMods ( ) 
 + { 
 + return mods ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 4bca3c0 . . f4b5142 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 161 , 6 + 161 , 7 @ @ public class Loader 
 private File forcedModFile ; 
 private ModDiscoverer discoverer ; 
 private ProgressBar progressBar ; 
 + public final boolean java8 ; 
 
 public static Loader instance ( ) 
 { 
 @ @ - 187 , 6 + 188 , 14 @ @ public class Loader 
 
 private Loader ( ) 
 { 
 + String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; 
 + int major = Integer . parseInt ( ver [ 1 ] ) ; 
 + java8 = major > 7 ; 
 + if ( ! java8 ) 
 + { 
 + FMLLog . severe ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; 
 + } 
 + 
 modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; 
 if ( ! mccversion . equals ( MC _ VERSION ) ) 
 { 
 @ @ - 489 , 6 + 498 , 7 @ @ public class Loader 
 ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; 
 disableRequestedMods ( ) ; 
 modController . distributeStateMessage ( FMLLoadEvent . class ) ; 
 + checkJavaCompatibility ( ) ; 
 sortModList ( ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; 
 @ @ - 543 , 6 + 553 , 24 @ @ public class Loader 
 modController . transition ( LoaderState . PREINITIALIZATION , false ) ; 
 } 
 
 + 
 + private void checkJavaCompatibility ( ) 
 + { 
 + if ( java8 ) return ; 
 + List < ModContainer > j8mods = Lists . newArrayList ( ) ; 
 + for ( ModContainer mc : getActiveModList ( ) ) 
 + { 
 + if ( mc . getClassVersion ( ) > = 52 ) 
 + { 
 + j8mods . add ( mc ) ; 
 + } 
 + } 
 + if ( ! j8mods . isEmpty ( ) ) 
 + { 
 + throw new Java8VersionException ( j8mods ) ; 
 + } 
 + } 
 + 
 public void preinitializeMods ( ) 
 { 
 if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 index 883f8b9 . . cd82ff0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 @ @ - 152 , 4 + 152 , 8 @ @ public interface ModContainer 
 boolean shouldLoadInEnvironment ( ) ; 
 
 URL getUpdateUrl ( ) ; 
 + 
 + void setClassVersion ( int classVersion ) ; 
 + 
 + int getClassVersion ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 index 6eb8dec . . 0fd5d7d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 @ @ - 35 , 6 + 35 , 7 @ @ public class ASMDataTable 
 private String annotationName ; 
 private String className ; 
 private String objectName ; 
 + private int classVersion ; 
 private Map < String , Object > annotationInfo ; 
 public ASMData ( ModCandidate candidate , String annotationName , String className , String objectName , Map < String , Object > info ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 index 226ddd6 . . 77346da 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 @ @ - 83 , 6 + 83 , 7 @ @ public class JarDiscoverer implements ITypeDiscoverer 
 table . addContainer ( container ) ; 
 foundMods . add ( container ) ; 
 container . bindMetadata ( mc ) ; 
 + container . setClassVersion ( modParser . getClassVersion ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 7c35d8e . . cbdf668 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 commands . forge . usage = Use / forge < subcommand > . Subcommands are tps , track 
 - commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . 
 + commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . 
 commands . forge . tps . summary = % s : Mean tick time : % d ms . Mean TPS : % d 
 
 commands . forge . tracking . te . enabled = Tile Entity tracking enabled for % d seconds . 
 @ @ - 153 , 4 + 153 , 18 @ @ fml . menu . mods . normal = Normal 
 fml . menu . mods . search = Search : 
 fml . menu . modoptions = Mod Options . . . 
 
 - item . forge . bucketFilled . name = % s Bucket 
 \ No newline at end of file 
 + item . forge . bucketFilled . name = % s Bucket 
 + 
 + fml . messages . java8problem = % s % sJava Update Required % s 
 + fml . messages . java8recommended = % s % sJava Update Recommended % s 
 + fml . messages . modslistedbelow = The mods listed below % s 
 + fml . messages . requirejava8 = require Java 8 
 + fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! 
 + fml . messages . java8warning . 2 = You need to update Java 
 + fml . messages . javaversion = Your Java version is Java % s ( version string % s ) 
 + fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play 
 + fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods 
 + fml . messages . countbadandgood = % s of % s mods have this problem 
 + 
 + fml . button . visitjavadownloads = Oracle Java SE Downloads 
 + fml . button . continue = Continue 
 \ No newline at end of file
