BLEU SCORE: 0.03283637368030199

TEST MSG: Tentatively reintroduce a container - opening system
GENERATED MSG: Update forge

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> index eb5c04b . . f721dce 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> @ @ - 500 , 7 + 500 , 7 @ @ <nl> if ( this . func _ 70608 _ bn ( ) ) { <nl> f = 0 . 2F ; <nl> } else if ( ! this . func _ 203007 _ ba ( ) & & ! this . func _ 184613 _ cA ( ) & & this . field _ 70131 _ O ! = 0 . 6F ) { <nl> - @ @ - 1967 , 6 + 2096 , 30 @ @ <nl> + @ @ - 1967 , 6 + 2096 , 41 @ @ <nl> return this . field _ 71075 _ bZ . field _ 75098 _ d & & this . func _ 184840 _ I ( ) > = 2 ; <nl> } <nl> <nl> @ @ - 528 , 6 + 528 , 17 @ @ <nl> + return this . suffixes ; <nl> + } <nl> + <nl> + + / * * <nl> + + * Opens a modded container , based on { @ code container . getGuiID } <nl> + + * Container . getGuiID must return a valid ResourceLocation in String form . Vanilla follows this , but does not enforce it . <nl> + + * @ param container The container provider . The container will be obtained using { @ link IInteractionObject # createContainer } . <nl> + + * @ param extraData Any extra data to communicate to the client <nl> + + * / <nl> + + public void openGui ( IInteractionObject container , @ Nullable io . netty . buffer . ByteBuf extraData ) <nl> + + { <nl> + + if ( ! field _ 70170 _ p . field _ 72995 _ K ) net . minecraftforge . fml . network . NetworkHooks . openGui ( ( EntityPlayerMP ) this , container , extraData ) ; <nl> + + } <nl> + + <nl> public static enum EnumChatVisibility { <nl> FULL ( 0 , " options . chat . visibility . full " ) , <nl> SYSTEM ( 1 , " options . chat . visibility . system " ) , <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java <nl> index 06f611c . . ccb2cb8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java <nl> @ @ - 33 , 5 + 33 , 6 @ @ public class FMLPlayHandler <nl> static <nl> { <nl> channel . registerMessage ( 0 , FMLPlayMessages . SpawnEntity . class , FMLPlayMessages . SpawnEntity : : encode , FMLPlayMessages . SpawnEntity : : decode , FMLPlayMessages . SpawnEntity : : handle ) ; <nl> + channel . registerMessage ( 1 , FMLPlayMessages . OpenContainer . class , FMLPlayMessages . OpenContainer : : encode , FMLPlayMessages . OpenContainer : : decode , FMLPlayMessages . OpenContainer : : handle ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> index 01d0eb4 . . 67c24ce 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> @ @ - 19 , 15 + 19 , 20 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> + import io . netty . buffer . ByteBuf ; <nl> + import io . netty . buffer . Unpooled ; <nl> import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityTracker ; <nl> import net . minecraft . entity . EntityType ; <nl> import net . minecraft . network . PacketBuffer ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . math . MathHelper ; <nl> import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; <nl> <nl> import java . util . UUID ; <nl> + import java . util . function . Function ; <nl> import java . util . function . Supplier ; <nl> <nl> public class FMLPlayMessages <nl> @ @ - 156 , 4 + 161 , 45 @ @ public class FMLPlayMessages <nl> ctx . get ( ) . setPacketHandled ( true ) ; <nl> } <nl> } <nl> + <nl> + public static class OpenContainer <nl> + { <nl> + private final ResourceLocation id ; <nl> + private final int windowId ; <nl> + private final byte [ ] additionalData ; <nl> + <nl> + public OpenContainer ( ResourceLocation id , int windowId , byte [ ] additionalData ) <nl> + { <nl> + this . id = id ; <nl> + this . windowId = windowId ; <nl> + this . additionalData = additionalData ; <nl> + } <nl> + <nl> + public static void encode ( OpenContainer msg , PacketBuffer buf ) <nl> + { <nl> + buf . writeResourceLocation ( msg . id ) ; <nl> + buf . writeVarInt ( msg . windowId ) ; <nl> + buf . writeByteArray ( msg . additionalData ) ; <nl> + } <nl> + <nl> + public static OpenContainer decode ( PacketBuffer buf ) <nl> + { <nl> + return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , buf . readByteArray ( ) ) ; <nl> + } <nl> + <nl> + public static void handle ( OpenContainer msg , Supplier < NetworkEvent . Context > ctx ) <nl> + { <nl> + ctx . get ( ) . enqueueWork ( ( ) - > { <nl> + Supplier < Function < ByteBuf , GuiScreen > > sup = NetworkRegistry . guiHandlers . get ( msg . id ) ; <nl> + if ( sup ! = null ) { <nl> + GuiScreen gui = sup . get ( ) . apply ( Unpooled . wrappedBuffer ( msg . additionalData ) ) ; <nl> + if ( gui ! = null ) { <nl> + Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; <nl> + Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; <nl> + } <nl> + } <nl> + } ) ; <nl> + ctx . get ( ) . setPacketHandled ( true ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> index 76948c2 . . d497440 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> @ @ - 19 , 15 + 19 , 21 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> + import io . netty . buffer . ByteBuf ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . player . EntityPlayerMP ; <nl> + import net . minecraft . inventory . Container ; <nl> import net . minecraft . network . NetHandlerPlayServer ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . Packet ; <nl> import net . minecraft . network . handshake . client . CPacketHandshake ; <nl> import net . minecraft . server . network . NetHandlerLoginServer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . world . IInteractionObject ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . entity . player . PlayerContainerEvent ; <nl> <nl> + import javax . annotation . Nullable ; <nl> import java . util . Objects ; <nl> <nl> public class NetworkHooks <nl> @ @ - 80 , 4 + 86 , 26 @ @ public class NetworkHooks <nl> { <nl> return FMLHandshakeHandler . tickLogin ( networkManager ) ; <nl> } <nl> + <nl> + public static void openGui ( EntityPlayerMP player , IInteractionObject container , @ Nullable ByteBuf extraData ) <nl> + { <nl> + ResourceLocation id = new ResourceLocation ( container . getGuiID ( ) ) ; <nl> + Container c = container . createContainer ( player . inventory , player ) ; <nl> + player . closeScreen ( ) ; <nl> + player . getNextWindowId ( ) ; <nl> + player . openContainer = c ; <nl> + player . openContainer . windowId = player . currentWindowId ; <nl> + player . openContainer . addListener ( player ) ; <nl> + MinecraftForge . EVENT _ BUS . post ( new PlayerContainerEvent . Open ( player , c ) ) ; <nl> + <nl> + byte [ ] additional ; <nl> + if ( extraData = = null ) { <nl> + additional = new byte [ 0 ] ; <nl> + } else { <nl> + additional = new byte [ extraData . readableBytes ( ) ] ; <nl> + extraData . readBytes ( additional ) ; <nl> + } <nl> + FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , additional ) ; <nl> + FMLPlayHandler . channel . sendTo ( msg , player . connection . getNetworkManager ( ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> index dd27ebb . . c63259b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> + import io . netty . buffer . ByteBuf ; <nl> + import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . nbt . NBTTagList ; <nl> import net . minecraft . network . NetworkManager ; <nl> @ @ - 33 , 7 + 35 , 9 @ @ import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> import java . util . * ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> import java . util . function . BiFunction ; <nl> + import java . util . function . Function ; <nl> import java . util . function . Predicate ; <nl> import java . util . function . Supplier ; <nl> import java . util . stream . Collectors ; <nl> @ @ - 47 , 6 + 51 , 21 @ @ public class NetworkRegistry <nl> private static final Marker NETREGISTRY = MarkerManager . getMarker ( " NETREGISTRY " ) ; <nl> <nl> private static Map < ResourceLocation , NetworkInstance > instances = new HashMap < > ( ) ; <nl> + static final Map < ResourceLocation , Supplier < Function < ByteBuf , GuiScreen > > > guiHandlers = new ConcurrentHashMap < > ( ) ; <nl> + <nl> + / * * <nl> + * Registers a client - side GUI handler for the given ID . <nl> + * The function takes any extra data provided to { @ link net . minecraft . entity . player . EntityPlayer # openGui } <nl> + * and returns a { @ link GuiScreen } to display . <nl> + * Call this during { @ link net . minecraftforge . fml . event . lifecycle . FMLClientSetupEvent } . <nl> + * This method is safe to call in parallel mod loading <nl> + * @ param id <nl> + * @ param handler <nl> + * / <nl> + public static void registerGui ( ResourceLocation id , Supplier < Function < ByteBuf , GuiScreen > > handler ) <nl> + { <nl> + guiHandlers . put ( id , handler ) ; <nl> + } <nl> <nl> / * * <nl> * Special value for clientAcceptedVersions and serverAcceptedVersions predicates indicating the other side lacks
NEAREST DIFF (one line): diff - - git a / fml b / fml <nl> index a6dc03a . . 4d46abf 160000 <nl> - - - a / fml <nl> + + + b / fml <nl> @ @ - 1 + 1 @ @ <nl> - Subproject commit a6dc03aa7e956841ce74feda3b3058934606600c <nl> + Subproject commit 4d46abf761c681010f338a27978e87cd56c5e32e <nl> diff - - git a / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch b / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch <nl> index 0ef9b48 . . 63a9622 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch <nl> @ @ - 21 , 10 + 21 , 10 @ @ <nl> this . disconnected = true ; <nl> this . mc . loadWorld ( ( WorldClient ) null ) ; <nl> <nl> - @ @ - 866 , 7 + 871 , 11 @ @ <nl> - public void handleChat ( Packet3Chat par1Packet3Chat ) <nl> - { <nl> - par1Packet3Chat = FMLNetworkHandler . handleChatMessage ( this , par1Packet3Chat ) ; <nl> + @ @ - 870 , 7 + 875 , 11 @ @ <nl> + { <nl> + return ; <nl> + } <nl> - this . mc . ingameGUI . getChatGUI ( ) . printChatMessage ( ChatMessageComponent . createFromJson ( par1Packet3Chat . message ) . toStringWithFormatting ( true ) ) ; <nl> + ClientChatReceivedEvent event = new ClientChatReceivedEvent ( par1Packet3Chat . message ) ; <nl> + if ( ! MinecraftForge . EVENT _ BUS . post ( event ) & & event . message ! = null ) <nl> @ @ - 34 , 7 + 34 , 7 @ @ <nl> } <nl> <nl> public void handleAnimation ( Packet18Animation par1Packet18Animation ) <nl> - @ @ - 1354 , 6 + 1363 , 10 @ @ <nl> + @ @ - 1358 , 6 + 1367 , 10 @ @ <nl> { <nl> tileentity . readFromNBT ( par1Packet132TileEntityData . data ) ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch <nl> index 6d2c8e1 . . a186e0f 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch <nl> @ @ - 13 , 11 + 13 , 16 @ @ <nl> public class EntityPlayerMP extends EntityPlayer implements ICrafting <nl> { <nl> private String translator = " en _ US " ; <nl> - @ @ - 165 , 18 + 171 , 10 @ @ <nl> + @ @ - 164 , 19 + 170 , 14 @ @ <nl> + super ( par2World , par3Str ) ; <nl> par4ItemInWorldManager . thisPlayerMP = this ; <nl> this . theItemInWorldManager = par4ItemInWorldManager ; <nl> - this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; <nl> + - this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; <nl> - ChunkCoordinates chunkcoordinates = par2World . getSpawnPoint ( ) ; <nl> + + if ( par1MinecraftServer = = null ) / / ToDo : Remove this in 1 . 7 , Fake players shouldn ' t be used purely client side . <nl> + + this . renderDistance = 0 ; <nl> + + else <nl> + + this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; <nl> + ChunkCoordinates chunkcoordinates = par2World . provider . getRandomizedSpawnPoint ( ) ; <nl> int i = chunkcoordinates . posX ; <nl> int j = chunkcoordinates . posZ ; <nl> @ @ - 33 , 7 + 38 , 7 @ @ <nl> <nl> this . mcServer = par1MinecraftServer ; <nl> this . stepHeight = 0 . 0F ; <nl> - @ @ - 240 , 11 + 238 , 6 @ @ <nl> + @ @ - 240 , 11 + 241 , 6 @ @ <nl> this . yOffset = 0 . 0F ; <nl> } <nl> <nl> @ @ - 45 , 7 + 50 , 7 @ @ <nl> / * * <nl> * Called to update the entity ' s position / logic . <nl> * / <nl> - @ @ - 254 , 7 + 247 , 7 @ @ <nl> + @ @ - 254 , 7 + 250 , 7 @ @ <nl> - - this . initialInvulnerability ; <nl> this . openContainer . detectAndSendChanges ( ) ; <nl> <nl> @ @ - 54 , 7 + 59 , 7 @ @ <nl> { <nl> this . closeScreen ( ) ; <nl> this . openContainer = this . inventoryContainer ; <nl> - @ @ - 290 , 7 + 283 , 10 @ @ <nl> + @ @ - 290 , 7 + 286 , 10 @ @ <nl> if ( chunkcoordintpair ! = null & & this . worldObj . blockExists ( chunkcoordintpair . chunkXPos < < 4 , 0 , chunkcoordintpair . chunkZPos < < 4 ) ) <nl> { <nl> arraylist . add ( this . worldObj . getChunkFromChunkCoords ( chunkcoordintpair . chunkXPos , chunkcoordintpair . chunkZPos ) ) ; <nl> @ @ - 66 , 7 + 71 , 7 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 311 , 6 + 307 , 7 @ @ <nl> + @ @ - 311 , 6 + 310 , 7 @ @ <nl> { <nl> Chunk chunk = ( Chunk ) iterator2 . next ( ) ; <nl> this . getServerForPlayer ( ) . getEntityTracker ( ) . func _ 85172 _ a ( this , chunk ) ; <nl> @ @ - 74 , 7 + 79 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 383 , 11 + 380 , 25 @ @ <nl> + @ @ - 383 , 11 + 383 , 25 @ @ <nl> * / <nl> public void onDeath ( DamageSource par1DamageSource ) <nl> { <nl> @ @ - 100 , 7 + 105 , 7 @ @ <nl> } <nl> <nl> Collection collection = this . worldObj . getScoreboard ( ) . func _ 96520 _ a ( ScoreObjectiveCriteria . deathCount ) ; <nl> - @ @ - 1054 , 4 + 1065 , 16 @ @ <nl> + @ @ - 1054 , 4 + 1068 , 16 @ @ <nl> { <nl> this . field _ 143005 _ bX = MinecraftServer . getSystemTimeMillis ( ) ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch b / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch <nl> index d28a430 . . 7e6a155 100644 <nl> - - - a / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch <nl> + + + b / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch <nl> @ @ - 127 , 7 + 127 , 7 @ @ <nl> { <nl> this . playerEntity . theItemInWorldManager . activateBlockOrUseItem ( this . playerEntity , worldserver , itemstack , i , j , k , l , par1Packet15Place . getXOffset ( ) , par1Packet15Place . getYOffset ( ) , par1Packet15Place . getZOffset ( ) ) ; <nl> } <nl> - @ @ - 695 , 6 + 733 , 8 @ @ <nl> + @ @ - 698 , 6 + 736 , 8 @ @ <nl> } <nl> <nl> ChatMessageComponent chatmessagecomponent = ChatMessageComponent . createFromTranslationWithSubstitutions ( " chat . type . text " , new Object [ ] { this . playerEntity . getTranslatedEntityName ( ) , s } ) ; <nl> @ @ - 136 , 7 + 136 , 7 @ @ <nl> this . mcServer . getConfigurationManager ( ) . func _ 110459 _ a ( chatmessagecomponent , false ) ; <nl> } <nl> <nl> - @ @ - 849 , 7 + 889 , 7 @ @ <nl> + @ @ - 852 , 7 + 892 , 7 @ @ <nl> return ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / FakePlayer . java b / src / main / java / net / minecraftforge / common / FakePlayer . java <nl> index 7d63255 . . 7413a7d 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / FakePlayer . java <nl> + + + b / src / main / java / net / minecraftforge / common / FakePlayer . java <nl> @ @ - 1 , 11 + 1 , 15 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> import cpw . mods . fml . common . FMLCommonHandler ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . entity . player . EntityPlayerMP ; <nl> import net . minecraft . item . ItemInWorldManager ; <nl> + import net . minecraft . network . packet . Packet204ClientInfo ; <nl> import net . minecraft . server . MinecraftServer ; <nl> + import net . minecraft . stats . StatBase ; <nl> import net . minecraft . util . ChatMessageComponent ; <nl> import net . minecraft . util . ChunkCoordinates ; <nl> + import net . minecraft . util . DamageSource ; <nl> import net . minecraft . world . World ; <nl> <nl> / / Preliminary , simple Fake Player class <nl> @ @ - 25 , 4 + 29 , 20 @ @ public class FakePlayer extends EntityPlayerMP <nl> <nl> @ Override <nl> public void sendChatToPlayer ( ChatMessageComponent chatmessagecomponent ) { } <nl> + @ Override <nl> + public void addStat ( StatBase par1StatBase , int par2 ) { } <nl> + @ Override <nl> + public void openGui ( Object mod , int modGuiId , World world , int x , int y , int z ) { } <nl> + @ Override <nl> + public boolean isEntityInvulnerable ( ) { return true ; } <nl> + @ Override <nl> + public boolean canAttackPlayer ( EntityPlayer player ) { return false ; } <nl> + @ Override <nl> + public void onDeath ( DamageSource source ) { return ; } <nl> + @ Override <nl> + public void onUpdate ( ) { return ; } <nl> + @ Override <nl> + public void travelToDimension ( int dim ) { return ; } <nl> + @ Override <nl> + public void updateClientInfo ( Packet204ClientInfo pkt ) { return ; } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 43dbe83 . . 8d98241 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import net . minecraft . item . ItemSpade ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . item . ItemSword ; <nl> import net . minecraft . network . NetServerHandler ; <nl> + import net . minecraft . network . packet . Packet ; <nl> import net . minecraft . network . packet . Packet53BlockChange ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> import net . minecraft . util . AxisAlignedBB ; <nl> @ @ - 487 , 7 + 488 , 11 @ @ public class ForgeHooks <nl> TileEntity tileentity = world . getBlockTileEntity ( x , y , z ) ; <nl> if ( tileentity ! = null ) <nl> { <nl> - entityPlayer . playerNetServerHandler . sendPacketToPlayer ( tileentity . getDescriptionPacket ( ) ) ; <nl> + Packet pkt = tileentity . getDescriptionPacket ( ) ; <nl> + if ( pkt ! = null ) <nl> + { <nl> + entityPlayer . playerNetServerHandler . sendPacketToPlayer ( pkt ) ; <nl> + } <nl> } <nl> } <nl> return event ; <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> index 5031fa6 . . 16d011f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> import net . minecraft . block . Block ; <nl> + import net . minecraft . util . StatCollector ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . event . Event ; <nl> <nl> @ @ - 25 , 8 + 26 , 19 @ @ public abstract class FluidRegistry <nl> static BiMap < String , Integer > fluidIDs = HashBiMap . create ( ) ; <nl> static BiMap < Block , Fluid > fluidBlocks ; <nl> <nl> - public static final Fluid WATER = new Fluid ( " water " ) . setBlockID ( Block . waterStill . blockID ) . setUnlocalizedName ( Block . waterStill . getUnlocalizedName ( ) ) ; <nl> - public static final Fluid LAVA = new Fluid ( " lava " ) . setBlockID ( Block . lavaStill . blockID ) . setLuminosity ( 15 ) . setDensity ( 3000 ) . setViscosity ( 6000 ) . setTemperature ( 1300 ) . setUnlocalizedName ( Block . lavaStill . getUnlocalizedName ( ) ) ; <nl> + public static final Fluid WATER = new Fluid ( " water " ) { <nl> + @ Override <nl> + public String getLocalizedName ( ) { <nl> + return StatCollector . translateToLocal ( " tile . water . name " ) ; <nl> + } <nl> + } . setBlockID ( Block . waterStill . blockID ) . setUnlocalizedName ( Block . waterStill . getUnlocalizedName ( ) ) ; <nl> + <nl> + public static final Fluid LAVA = new Fluid ( " lava " ) { <nl> + @ Override <nl> + public String getLocalizedName ( ) { <nl> + return StatCollector . translateToLocal ( " tile . lava . name " ) ; <nl> + } <nl> + } . setBlockID ( Block . lavaStill . blockID ) . setLuminosity ( 15 ) . setDensity ( 3000 ) . setViscosity ( 6000 ) . setTemperature ( 1300 ) . setUnlocalizedName ( Block . lavaStill . getUnlocalizedName ( ) ) ; <nl> <nl> public static int renderIdFluid = - 1 ; <nl>

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 index eb5c04b . . f721dce 100644 
 - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 @ @ - 500 , 7 + 500 , 7 @ @ 
 if ( this . func _ 70608 _ bn ( ) ) { 
 f = 0 . 2F ; 
 } else if ( ! this . func _ 203007 _ ba ( ) & & ! this . func _ 184613 _ cA ( ) & & this . field _ 70131 _ O ! = 0 . 6F ) { 
 - @ @ - 1967 , 6 + 2096 , 30 @ @ 
 + @ @ - 1967 , 6 + 2096 , 41 @ @ 
 return this . field _ 71075 _ bZ . field _ 75098 _ d & & this . func _ 184840 _ I ( ) > = 2 ; 
 } 
 
 @ @ - 528 , 6 + 528 , 17 @ @ 
 + return this . suffixes ; 
 + } 
 + 
 + + / * * 
 + + * Opens a modded container , based on { @ code container . getGuiID } 
 + + * Container . getGuiID must return a valid ResourceLocation in String form . Vanilla follows this , but does not enforce it . 
 + + * @ param container The container provider . The container will be obtained using { @ link IInteractionObject # createContainer } . 
 + + * @ param extraData Any extra data to communicate to the client 
 + + * / 
 + + public void openGui ( IInteractionObject container , @ Nullable io . netty . buffer . ByteBuf extraData ) 
 + + { 
 + + if ( ! field _ 70170 _ p . field _ 72995 _ K ) net . minecraftforge . fml . network . NetworkHooks . openGui ( ( EntityPlayerMP ) this , container , extraData ) ; 
 + + } 
 + + 
 public static enum EnumChatVisibility { 
 FULL ( 0 , " options . chat . visibility . full " ) , 
 SYSTEM ( 1 , " options . chat . visibility . system " ) , 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java 
 index 06f611c . . ccb2cb8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayHandler . java 
 @ @ - 33 , 5 + 33 , 6 @ @ public class FMLPlayHandler 
 static 
 { 
 channel . registerMessage ( 0 , FMLPlayMessages . SpawnEntity . class , FMLPlayMessages . SpawnEntity : : encode , FMLPlayMessages . SpawnEntity : : decode , FMLPlayMessages . SpawnEntity : : handle ) ; 
 + channel . registerMessage ( 1 , FMLPlayMessages . OpenContainer . class , FMLPlayMessages . OpenContainer : : encode , FMLPlayMessages . OpenContainer : : decode , FMLPlayMessages . OpenContainer : : handle ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 index 01d0eb4 . . 67c24ce 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 @ @ - 19 , 15 + 19 , 20 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 + import io . netty . buffer . ByteBuf ; 
 + import io . netty . buffer . Unpooled ; 
 import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityTracker ; 
 import net . minecraft . entity . EntityType ; 
 import net . minecraft . network . PacketBuffer ; 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . math . MathHelper ; 
 import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; 
 
 import java . util . UUID ; 
 + import java . util . function . Function ; 
 import java . util . function . Supplier ; 
 
 public class FMLPlayMessages 
 @ @ - 156 , 4 + 161 , 45 @ @ public class FMLPlayMessages 
 ctx . get ( ) . setPacketHandled ( true ) ; 
 } 
 } 
 + 
 + public static class OpenContainer 
 + { 
 + private final ResourceLocation id ; 
 + private final int windowId ; 
 + private final byte [ ] additionalData ; 
 + 
 + public OpenContainer ( ResourceLocation id , int windowId , byte [ ] additionalData ) 
 + { 
 + this . id = id ; 
 + this . windowId = windowId ; 
 + this . additionalData = additionalData ; 
 + } 
 + 
 + public static void encode ( OpenContainer msg , PacketBuffer buf ) 
 + { 
 + buf . writeResourceLocation ( msg . id ) ; 
 + buf . writeVarInt ( msg . windowId ) ; 
 + buf . writeByteArray ( msg . additionalData ) ; 
 + } 
 + 
 + public static OpenContainer decode ( PacketBuffer buf ) 
 + { 
 + return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , buf . readByteArray ( ) ) ; 
 + } 
 + 
 + public static void handle ( OpenContainer msg , Supplier < NetworkEvent . Context > ctx ) 
 + { 
 + ctx . get ( ) . enqueueWork ( ( ) - > { 
 + Supplier < Function < ByteBuf , GuiScreen > > sup = NetworkRegistry . guiHandlers . get ( msg . id ) ; 
 + if ( sup ! = null ) { 
 + GuiScreen gui = sup . get ( ) . apply ( Unpooled . wrappedBuffer ( msg . additionalData ) ) ; 
 + if ( gui ! = null ) { 
 + Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; 
 + Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; 
 + } 
 + } 
 + } ) ; 
 + ctx . get ( ) . setPacketHandled ( true ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 index 76948c2 . . d497440 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 @ @ - 19 , 15 + 19 , 21 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 + import io . netty . buffer . ByteBuf ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . player . EntityPlayerMP ; 
 + import net . minecraft . inventory . Container ; 
 import net . minecraft . network . NetHandlerPlayServer ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . Packet ; 
 import net . minecraft . network . handshake . client . CPacketHandshake ; 
 import net . minecraft . server . network . NetHandlerLoginServer ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . world . IInteractionObject ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . entity . player . PlayerContainerEvent ; 
 
 + import javax . annotation . Nullable ; 
 import java . util . Objects ; 
 
 public class NetworkHooks 
 @ @ - 80 , 4 + 86 , 26 @ @ public class NetworkHooks 
 { 
 return FMLHandshakeHandler . tickLogin ( networkManager ) ; 
 } 
 + 
 + public static void openGui ( EntityPlayerMP player , IInteractionObject container , @ Nullable ByteBuf extraData ) 
 + { 
 + ResourceLocation id = new ResourceLocation ( container . getGuiID ( ) ) ; 
 + Container c = container . createContainer ( player . inventory , player ) ; 
 + player . closeScreen ( ) ; 
 + player . getNextWindowId ( ) ; 
 + player . openContainer = c ; 
 + player . openContainer . windowId = player . currentWindowId ; 
 + player . openContainer . addListener ( player ) ; 
 + MinecraftForge . EVENT _ BUS . post ( new PlayerContainerEvent . Open ( player , c ) ) ; 
 + 
 + byte [ ] additional ; 
 + if ( extraData = = null ) { 
 + additional = new byte [ 0 ] ; 
 + } else { 
 + additional = new byte [ extraData . readableBytes ( ) ] ; 
 + extraData . readBytes ( additional ) ; 
 + } 
 + FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , additional ) ; 
 + FMLPlayHandler . channel . sendTo ( msg , player . connection . getNetworkManager ( ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 index dd27ebb . . c63259b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 + import io . netty . buffer . ByteBuf ; 
 + import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . nbt . NBTTagList ; 
 import net . minecraft . network . NetworkManager ; 
 @ @ - 33 , 7 + 35 , 9 @ @ import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 import java . util . * ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 import java . util . function . BiFunction ; 
 + import java . util . function . Function ; 
 import java . util . function . Predicate ; 
 import java . util . function . Supplier ; 
 import java . util . stream . Collectors ; 
 @ @ - 47 , 6 + 51 , 21 @ @ public class NetworkRegistry 
 private static final Marker NETREGISTRY = MarkerManager . getMarker ( " NETREGISTRY " ) ; 
 
 private static Map < ResourceLocation , NetworkInstance > instances = new HashMap < > ( ) ; 
 + static final Map < ResourceLocation , Supplier < Function < ByteBuf , GuiScreen > > > guiHandlers = new ConcurrentHashMap < > ( ) ; 
 + 
 + / * * 
 + * Registers a client - side GUI handler for the given ID . 
 + * The function takes any extra data provided to { @ link net . minecraft . entity . player . EntityPlayer # openGui } 
 + * and returns a { @ link GuiScreen } to display . 
 + * Call this during { @ link net . minecraftforge . fml . event . lifecycle . FMLClientSetupEvent } . 
 + * This method is safe to call in parallel mod loading 
 + * @ param id 
 + * @ param handler 
 + * / 
 + public static void registerGui ( ResourceLocation id , Supplier < Function < ByteBuf , GuiScreen > > handler ) 
 + { 
 + guiHandlers . put ( id , handler ) ; 
 + } 
 
 / * * 
 * Special value for clientAcceptedVersions and serverAcceptedVersions predicates indicating the other side lacks

NEAREST DIFF:
diff - - git a / fml b / fml 
 index a6dc03a . . 4d46abf 160000 
 - - - a / fml 
 + + + b / fml 
 @ @ - 1 + 1 @ @ 
 - Subproject commit a6dc03aa7e956841ce74feda3b3058934606600c 
 + Subproject commit 4d46abf761c681010f338a27978e87cd56c5e32e 
 diff - - git a / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch b / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch 
 index 0ef9b48 . . 63a9622 100644 
 - - - a / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / multiplayer / NetClientHandler . java . patch 
 @ @ - 21 , 10 + 21 , 10 @ @ 
 this . disconnected = true ; 
 this . mc . loadWorld ( ( WorldClient ) null ) ; 
 
 - @ @ - 866 , 7 + 871 , 11 @ @ 
 - public void handleChat ( Packet3Chat par1Packet3Chat ) 
 - { 
 - par1Packet3Chat = FMLNetworkHandler . handleChatMessage ( this , par1Packet3Chat ) ; 
 + @ @ - 870 , 7 + 875 , 11 @ @ 
 + { 
 + return ; 
 + } 
 - this . mc . ingameGUI . getChatGUI ( ) . printChatMessage ( ChatMessageComponent . createFromJson ( par1Packet3Chat . message ) . toStringWithFormatting ( true ) ) ; 
 + ClientChatReceivedEvent event = new ClientChatReceivedEvent ( par1Packet3Chat . message ) ; 
 + if ( ! MinecraftForge . EVENT _ BUS . post ( event ) & & event . message ! = null ) 
 @ @ - 34 , 7 + 34 , 7 @ @ 
 } 
 
 public void handleAnimation ( Packet18Animation par1Packet18Animation ) 
 - @ @ - 1354 , 6 + 1363 , 10 @ @ 
 + @ @ - 1358 , 6 + 1367 , 10 @ @ 
 { 
 tileentity . readFromNBT ( par1Packet132TileEntityData . data ) ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch b / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch 
 index 6d2c8e1 . . a186e0f 100644 
 - - - a / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / player / EntityPlayerMP . java . patch 
 @ @ - 13 , 11 + 13 , 16 @ @ 
 public class EntityPlayerMP extends EntityPlayer implements ICrafting 
 { 
 private String translator = " en _ US " ; 
 - @ @ - 165 , 18 + 171 , 10 @ @ 
 + @ @ - 164 , 19 + 170 , 14 @ @ 
 + super ( par2World , par3Str ) ; 
 par4ItemInWorldManager . thisPlayerMP = this ; 
 this . theItemInWorldManager = par4ItemInWorldManager ; 
 - this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; 
 + - this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; 
 - ChunkCoordinates chunkcoordinates = par2World . getSpawnPoint ( ) ; 
 + + if ( par1MinecraftServer = = null ) / / ToDo : Remove this in 1 . 7 , Fake players shouldn ' t be used purely client side . 
 + + this . renderDistance = 0 ; 
 + + else 
 + + this . renderDistance = par1MinecraftServer . getConfigurationManager ( ) . getViewDistance ( ) ; 
 + ChunkCoordinates chunkcoordinates = par2World . provider . getRandomizedSpawnPoint ( ) ; 
 int i = chunkcoordinates . posX ; 
 int j = chunkcoordinates . posZ ; 
 @ @ - 33 , 7 + 38 , 7 @ @ 
 
 this . mcServer = par1MinecraftServer ; 
 this . stepHeight = 0 . 0F ; 
 - @ @ - 240 , 11 + 238 , 6 @ @ 
 + @ @ - 240 , 11 + 241 , 6 @ @ 
 this . yOffset = 0 . 0F ; 
 } 
 
 @ @ - 45 , 7 + 50 , 7 @ @ 
 / * * 
 * Called to update the entity ' s position / logic . 
 * / 
 - @ @ - 254 , 7 + 247 , 7 @ @ 
 + @ @ - 254 , 7 + 250 , 7 @ @ 
 - - this . initialInvulnerability ; 
 this . openContainer . detectAndSendChanges ( ) ; 
 
 @ @ - 54 , 7 + 59 , 7 @ @ 
 { 
 this . closeScreen ( ) ; 
 this . openContainer = this . inventoryContainer ; 
 - @ @ - 290 , 7 + 283 , 10 @ @ 
 + @ @ - 290 , 7 + 286 , 10 @ @ 
 if ( chunkcoordintpair ! = null & & this . worldObj . blockExists ( chunkcoordintpair . chunkXPos < < 4 , 0 , chunkcoordintpair . chunkZPos < < 4 ) ) 
 { 
 arraylist . add ( this . worldObj . getChunkFromChunkCoords ( chunkcoordintpair . chunkXPos , chunkcoordintpair . chunkZPos ) ) ; 
 @ @ - 66 , 7 + 71 , 7 @ @ 
 } 
 } 
 
 - @ @ - 311 , 6 + 307 , 7 @ @ 
 + @ @ - 311 , 6 + 310 , 7 @ @ 
 { 
 Chunk chunk = ( Chunk ) iterator2 . next ( ) ; 
 this . getServerForPlayer ( ) . getEntityTracker ( ) . func _ 85172 _ a ( this , chunk ) ; 
 @ @ - 74 , 7 + 79 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 383 , 11 + 380 , 25 @ @ 
 + @ @ - 383 , 11 + 383 , 25 @ @ 
 * / 
 public void onDeath ( DamageSource par1DamageSource ) 
 { 
 @ @ - 100 , 7 + 105 , 7 @ @ 
 } 
 
 Collection collection = this . worldObj . getScoreboard ( ) . func _ 96520 _ a ( ScoreObjectiveCriteria . deathCount ) ; 
 - @ @ - 1054 , 4 + 1065 , 16 @ @ 
 + @ @ - 1054 , 4 + 1068 , 16 @ @ 
 { 
 this . field _ 143005 _ bX = MinecraftServer . getSystemTimeMillis ( ) ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch b / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch 
 index d28a430 . . 7e6a155 100644 
 - - - a / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch 
 + + + b / patches / minecraft / net / minecraft / network / NetServerHandler . java . patch 
 @ @ - 127 , 7 + 127 , 7 @ @ 
 { 
 this . playerEntity . theItemInWorldManager . activateBlockOrUseItem ( this . playerEntity , worldserver , itemstack , i , j , k , l , par1Packet15Place . getXOffset ( ) , par1Packet15Place . getYOffset ( ) , par1Packet15Place . getZOffset ( ) ) ; 
 } 
 - @ @ - 695 , 6 + 733 , 8 @ @ 
 + @ @ - 698 , 6 + 736 , 8 @ @ 
 } 
 
 ChatMessageComponent chatmessagecomponent = ChatMessageComponent . createFromTranslationWithSubstitutions ( " chat . type . text " , new Object [ ] { this . playerEntity . getTranslatedEntityName ( ) , s } ) ; 
 @ @ - 136 , 7 + 136 , 7 @ @ 
 this . mcServer . getConfigurationManager ( ) . func _ 110459 _ a ( chatmessagecomponent , false ) ; 
 } 
 
 - @ @ - 849 , 7 + 889 , 7 @ @ 
 + @ @ - 852 , 7 + 892 , 7 @ @ 
 return ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / FakePlayer . java b / src / main / java / net / minecraftforge / common / FakePlayer . java 
 index 7d63255 . . 7413a7d 100644 
 - - - a / src / main / java / net / minecraftforge / common / FakePlayer . java 
 + + + b / src / main / java / net / minecraftforge / common / FakePlayer . java 
 @ @ - 1 , 11 + 1 , 15 @ @ 
 package net . minecraftforge . common ; 
 
 import cpw . mods . fml . common . FMLCommonHandler ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . entity . player . EntityPlayerMP ; 
 import net . minecraft . item . ItemInWorldManager ; 
 + import net . minecraft . network . packet . Packet204ClientInfo ; 
 import net . minecraft . server . MinecraftServer ; 
 + import net . minecraft . stats . StatBase ; 
 import net . minecraft . util . ChatMessageComponent ; 
 import net . minecraft . util . ChunkCoordinates ; 
 + import net . minecraft . util . DamageSource ; 
 import net . minecraft . world . World ; 
 
 / / Preliminary , simple Fake Player class 
 @ @ - 25 , 4 + 29 , 20 @ @ public class FakePlayer extends EntityPlayerMP 
 
 @ Override 
 public void sendChatToPlayer ( ChatMessageComponent chatmessagecomponent ) { } 
 + @ Override 
 + public void addStat ( StatBase par1StatBase , int par2 ) { } 
 + @ Override 
 + public void openGui ( Object mod , int modGuiId , World world , int x , int y , int z ) { } 
 + @ Override 
 + public boolean isEntityInvulnerable ( ) { return true ; } 
 + @ Override 
 + public boolean canAttackPlayer ( EntityPlayer player ) { return false ; } 
 + @ Override 
 + public void onDeath ( DamageSource source ) { return ; } 
 + @ Override 
 + public void onUpdate ( ) { return ; } 
 + @ Override 
 + public void travelToDimension ( int dim ) { return ; } 
 + @ Override 
 + public void updateClientInfo ( Packet204ClientInfo pkt ) { return ; } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 43dbe83 . . 8d98241 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import net . minecraft . item . ItemSpade ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . item . ItemSword ; 
 import net . minecraft . network . NetServerHandler ; 
 + import net . minecraft . network . packet . Packet ; 
 import net . minecraft . network . packet . Packet53BlockChange ; 
 import net . minecraft . tileentity . TileEntity ; 
 import net . minecraft . util . AxisAlignedBB ; 
 @ @ - 487 , 7 + 488 , 11 @ @ public class ForgeHooks 
 TileEntity tileentity = world . getBlockTileEntity ( x , y , z ) ; 
 if ( tileentity ! = null ) 
 { 
 - entityPlayer . playerNetServerHandler . sendPacketToPlayer ( tileentity . getDescriptionPacket ( ) ) ; 
 + Packet pkt = tileentity . getDescriptionPacket ( ) ; 
 + if ( pkt ! = null ) 
 + { 
 + entityPlayer . playerNetServerHandler . sendPacketToPlayer ( pkt ) ; 
 + } 
 } 
 } 
 return event ; 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 index 5031fa6 . . 16d011f 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import java . util . HashMap ; 
 import java . util . Map ; 
 
 import net . minecraft . block . Block ; 
 + import net . minecraft . util . StatCollector ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . event . Event ; 
 
 @ @ - 25 , 8 + 26 , 19 @ @ public abstract class FluidRegistry 
 static BiMap < String , Integer > fluidIDs = HashBiMap . create ( ) ; 
 static BiMap < Block , Fluid > fluidBlocks ; 
 
 - public static final Fluid WATER = new Fluid ( " water " ) . setBlockID ( Block . waterStill . blockID ) . setUnlocalizedName ( Block . waterStill . getUnlocalizedName ( ) ) ; 
 - public static final Fluid LAVA = new Fluid ( " lava " ) . setBlockID ( Block . lavaStill . blockID ) . setLuminosity ( 15 ) . setDensity ( 3000 ) . setViscosity ( 6000 ) . setTemperature ( 1300 ) . setUnlocalizedName ( Block . lavaStill . getUnlocalizedName ( ) ) ; 
 + public static final Fluid WATER = new Fluid ( " water " ) { 
 + @ Override 
 + public String getLocalizedName ( ) { 
 + return StatCollector . translateToLocal ( " tile . water . name " ) ; 
 + } 
 + } . setBlockID ( Block . waterStill . blockID ) . setUnlocalizedName ( Block . waterStill . getUnlocalizedName ( ) ) ; 
 + 
 + public static final Fluid LAVA = new Fluid ( " lava " ) { 
 + @ Override 
 + public String getLocalizedName ( ) { 
 + return StatCollector . translateToLocal ( " tile . lava . name " ) ; 
 + } 
 + } . setBlockID ( Block . lavaStill . blockID ) . setLuminosity ( 15 ) . setDensity ( 3000 ) . setViscosity ( 6000 ) . setTemperature ( 1300 ) . setUnlocalizedName ( Block . lavaStill . getUnlocalizedName ( ) ) ; 
 
 public static int renderIdFluid = - 1 ; 

