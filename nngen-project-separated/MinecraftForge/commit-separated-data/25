BLEU SCORE: 0.01763751180315069

TEST MSG: Add a hook for farmland watering
GENERATED MSG: [ 1 . 11 . x ] Refine fluid placement utilities

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / BlockFarmland . java . patch b / patches / minecraft / net / minecraft / block / BlockFarmland . java . patch <nl> index 9342f73 . . dc12cb2 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / BlockFarmland . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / BlockFarmland . java . patch <nl> @ @ - 22 , 3 + 22 , 12 @ @ <nl> } <nl> <nl> private static boolean func _ 176530 _ e ( IWorldReaderBase p _ 176530 _ 0 _ , BlockPos p _ 176530 _ 1 _ ) { <nl> + @ @ - 102 , 7 + 102 , 7 @ @ <nl> + } <nl> + } <nl> + <nl> + - return false ; <nl> + + return net . minecraftforge . common . FarmlandWaterManager . hasBlockWaterTicket ( p _ 176530 _ 0 _ , p _ 176530 _ 1 _ ) ; <nl> + } <nl> + <nl> + public IItemProvider func _ 199769 _ a ( IBlockState p _ 199769 _ 1 _ , World p _ 199769 _ 2 _ , BlockPos p _ 199769 _ 3 _ , int p _ 199769 _ 4 _ ) { <nl> diff - - git a / src / main / java / net / minecraftforge / common / FarmlandWaterManager . java b / src / main / java / net / minecraftforge / common / FarmlandWaterManager . java <nl> new file mode 100644 <nl> index 0000000 . . d7f84bc <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / FarmlandWaterManager . java <nl> @ @ - 0 , 0 + 1 , 145 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common ; <nl> + <nl> + import com . google . common . base . Preconditions ; <nl> + import it . unimi . dsi . fastutil . ints . Int2ObjectMap ; <nl> + import it . unimi . dsi . fastutil . ints . Int2ObjectOpenHashMap ; <nl> + import net . minecraft . util . math . AxisAlignedBB ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . util . math . ChunkPos ; <nl> + import net . minecraft . util . math . Vec3d ; <nl> + import net . minecraft . world . IWorld ; <nl> + import net . minecraft . world . IWorldReaderBase ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraft . world . chunk . IChunk ; <nl> + import net . minecraftforge . common . ticket . AABBTicket ; <nl> + import net . minecraftforge . common . ticket . ChunkTicketManager ; <nl> + import net . minecraftforge . common . ticket . MultiTicketManager ; <nl> + import net . minecraftforge . common . ticket . SimpleTicket ; <nl> + <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + <nl> + public class FarmlandWaterManager <nl> + { <nl> + private static final Int2ObjectMap < Map < ChunkPos , ChunkTicketManager < Vec3d > > > customWaterHandler = new Int2ObjectOpenHashMap < > ( ) ; <nl> + <nl> + / * * <nl> + * Adds a custom ticket . <nl> + * Use { @ link # addAABBTicket ( World , AxisAlignedBB ) } if you just need a ticket that can water a certain area . <nl> + * < br > <nl> + * If you don ' t want to water the region anymore , call { @ link SimpleTicket # invalidate ( ) } . Also call this <nl> + * when the region this is unloaded ( e . g . your TE is unloaded or the block is removed ) , and validate once it is loaded <nl> + * @ param world The world where the region should be marked . Only server - side worlds are allowed <nl> + * @ param ticket Your ticket you want to have registered <nl> + * @ param chunkPoses The chunkPoses where the ticket is located <nl> + * @ return The ticket for your requested region . <nl> + * / <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public static < T extends SimpleTicket < Vec3d > > T addCustomTicket ( World world , T ticket , ChunkPos . . . chunkPoses ) <nl> + { <nl> + Preconditions . checkArgument ( ! world . isRemote , " Water region is only determined server - side " ) ; <nl> + Preconditions . checkArgument ( chunkPoses . length > 0 , " Need at least one chunk pos " ) ; <nl> + Map < ChunkPos , ChunkTicketManager < Vec3d > > ticketMap = customWaterHandler . computeIfAbsent ( world . getDimension ( ) . getType ( ) . getId ( ) , id - > new HashMap < > ( ) ) ; <nl> + if ( chunkPoses . length = = 1 ) <nl> + { <nl> + ticket . setBackend ( ticketMap . computeIfAbsent ( chunkPoses [ 0 ] , ChunkTicketManager : : new ) ) ; <nl> + } <nl> + else <nl> + { <nl> + ChunkTicketManager < Vec3d > [ ] tickets = new ChunkTicketManager [ chunkPoses . length ] ; <nl> + for ( int i = 0 ; i < chunkPoses . length ; i + + ) <nl> + tickets [ i ] = ticketMap . computeIfAbsent ( chunkPoses [ i ] , ChunkTicketManager : : new ) ; <nl> + ticket . setBackend ( new MultiTicketManager < > ( tickets ) ) ; <nl> + } <nl> + ticket . validate ( ) ; <nl> + return ticket ; <nl> + } <nl> + <nl> + / * * <nl> + * Convenience method to add a ticket that is backed by an AABB . <nl> + * < br > <nl> + * If you don ' t want to water the region anymore , call { @ link SimpleTicket # invalidate ( ) } . Also call this <nl> + * when the region this is unloaded ( e . g . your TE is unloaded or the block is removed ) , and validate once it is loaded <nl> + * < br > <nl> + * The AABB in the ticket is immutable <nl> + * @ param world The world where the region should be marked . Only server - side worlds are allowed <nl> + * @ param aabb The region where blocks should be watered <nl> + * @ return The ticket for your requested region . <nl> + * / <nl> + public static AABBTicket addAABBTicket ( World world , AxisAlignedBB aabb ) <nl> + { <nl> + / / First calculate all chunks the aabb is in <nl> + ChunkPos leftUp = new ChunkPos ( ( ( int ) aabb . minX ) > > 4 , ( ( int ) aabb . minZ ) > > 4 ) ; <nl> + ChunkPos rightDown = new ChunkPos ( ( ( int ) aabb . maxX ) > > 4 , ( ( int ) aabb . maxZ ) > > 4 ) ; <nl> + Set < ChunkPos > posSet = new HashSet < > ( ) ; <nl> + for ( int x = leftUp . x ; x < = rightDown . x ; x + + ) <nl> + { <nl> + for ( int z = leftUp . z ; z < = rightDown . z ; z + + ) <nl> + { <nl> + posSet . add ( new ChunkPos ( x , z ) ) ; <nl> + } <nl> + } <nl> + return addCustomTicket ( world , new AABBTicket ( aabb ) , posSet . toArray ( new ChunkPos [ 0 ] ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Tests if a block is in a region that is watered by blocks . This does not check vanilla water , see { @ link net . minecraft . block . BlockFarmland # hasWater ( World , BlockPos ) } <nl> + * @ return true if there is a ticket with an AABB that includes your block <nl> + * / <nl> + public static boolean hasBlockWaterTicket ( IWorldReaderBase world , BlockPos pos ) <nl> + { <nl> + ChunkTicketManager < Vec3d > ticketManager = getTicketManager ( new ChunkPos ( pos . getX ( ) > > 4 , pos . getZ ( ) > > 4 ) , world ) ; <nl> + if ( ticketManager ! = null ) <nl> + { <nl> + Vec3d posAsVec3d = new Vec3d ( pos ) ; <nl> + for ( SimpleTicket < Vec3d > ticket : ticketManager . getTickets ( ) ) { <nl> + if ( ticket . matches ( posAsVec3d ) ) <nl> + return true ; <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + static void removeTickets ( IChunk chunk ) <nl> + { <nl> + ChunkTicketManager < Vec3d > ticketManager = getTicketManager ( chunk . getPos ( ) , chunk . getWorldForge ( ) ) ; <nl> + if ( ticketManager ! = null ) <nl> + { <nl> + for ( SimpleTicket < Vec3d > ticket : ticketManager . getTickets ( ) ) <nl> + { <nl> + ticket . invalidate ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static ChunkTicketManager < Vec3d > getTicketManager ( ChunkPos pos , IWorldReaderBase world ) { <nl> + Preconditions . checkArgument ( ! world . isRemote ( ) , " Water region is only determined server - side " ) ; <nl> + Map < ChunkPos , ChunkTicketManager < Vec3d > > ticketMap = customWaterHandler . get ( world . getDimension ( ) . getType ( ) . getId ( ) ) ; <nl> + if ( ticketMap = = null ) <nl> + { <nl> + return null ; <nl> + } <nl> + return ticketMap . get ( pos ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java b / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java <nl> index c768b68 . . e07ff10 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import net . minecraft . world . WorldServer ; <nl> import net . minecraftforge . client . CloudRenderer ; <nl> import net . minecraftforge . common . util . FakePlayerFactory ; <nl> import net . minecraftforge . event . entity . EntityJoinWorldEvent ; <nl> + import net . minecraftforge . event . world . ChunkEvent ; <nl> import net . minecraftforge . event . world . WorldEvent ; <nl> import net . minecraftforge . eventbus . api . EventPriority ; <nl> import net . minecraftforge . eventbus . api . SubscribeEvent ; <nl> @ @ - 80 , 5 + 81 , 12 @ @ public class ForgeInternalHandler <nl> if ( event . phase = = Phase . END ) <nl> CloudRenderer . updateCloudSettings ( ) ; <nl> } <nl> + <nl> + @ SubscribeEvent <nl> + public void onChunkUnload ( ChunkEvent . Unload event ) <nl> + { <nl> + if ( ! event . getWorld ( ) . isRemote ( ) ) <nl> + FarmlandWaterManager . removeTickets ( event . getChunk ( ) ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / ticket / AABBTicket . java b / src / main / java / net / minecraftforge / common / ticket / AABBTicket . java <nl> new file mode 100644 <nl> index 0000000 . . c98c0bf <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / ticket / AABBTicket . java <nl> @ @ - 0 , 0 + 1 , 42 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . ticket ; <nl> + <nl> + import net . minecraft . util . math . AxisAlignedBB ; <nl> + import net . minecraft . util . math . Vec3d ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + <nl> + public class AABBTicket extends SimpleTicket < Vec3d > <nl> + { <nl> + @ Nonnull <nl> + public final AxisAlignedBB axisAlignedBB ; <nl> + <nl> + public AABBTicket ( @ Nonnull AxisAlignedBB axisAlignedBB ) <nl> + { <nl> + this . axisAlignedBB = axisAlignedBB ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean matches ( Vec3d toMatch ) <nl> + { <nl> + return this . axisAlignedBB . contains ( toMatch ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ticket / ChunkTicketManager . java b / src / main / java / net / minecraftforge / common / ticket / ChunkTicketManager . java <nl> new file mode 100644 <nl> index 0000000 . . 549f866 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / ticket / ChunkTicketManager . java <nl> @ @ - 0 , 0 + 1 , 56 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . ticket ; <nl> + <nl> + import net . minecraft . util . math . ChunkPos ; <nl> + <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . Set ; <nl> + import java . util . WeakHashMap ; <nl> + <nl> + public class ChunkTicketManager < T > implements ITicketGetter < T > <nl> + { <nl> + private final Set < SimpleTicket < T > > tickets = Collections . newSetFromMap ( new WeakHashMap < > ( ) ) ; <nl> + public final ChunkPos pos ; <nl> + <nl> + public ChunkTicketManager ( ChunkPos pos ) <nl> + { <nl> + this . pos = pos ; <nl> + } <nl> + <nl> + @ Override <nl> + public void add ( SimpleTicket < T > ticket ) <nl> + { <nl> + this . tickets . add ( ticket ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void remove ( SimpleTicket < T > ticket ) <nl> + { <nl> + this . tickets . remove ( ticket ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Collection < SimpleTicket < T > > getTickets ( ) <nl> + { <nl> + return tickets ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ticket / ITicketGetter . java b / src / main / java / net / minecraftforge / common / ticket / ITicketGetter . java <nl> new file mode 100644 <nl> index 0000000 . . 8d57469 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / ticket / ITicketGetter . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . ticket ; <nl> + <nl> + import java . util . Collection ; <nl> + <nl> + public interface ITicketGetter < T > extends ITicketManager < T > <nl> + { <nl> + Collection < SimpleTicket < T > > getTickets ( ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ticket / ITicketManager . java b / src / main / java / net / minecraftforge / common / ticket / ITicketManager . java <nl> new file mode 100644 <nl> index 0000000 . . 61ffd32 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / ticket / ITicketManager . java <nl> @ @ - 0 , 0 + 1 , 27 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . ticket ; <nl> + <nl> + public interface ITicketManager < T > <nl> + { <nl> + void add ( SimpleTicket < T > ticket ) ; <nl> + <nl> + void remove ( SimpleTicket < T > ticket ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ticket / MultiTicketManager . java b / src / main / java / net / minecraftforge / common / ticket / MultiTicketManager . java <nl> new file mode 100644 <nl> index 0000000 . . 9fc88e2 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / ticket / MultiTicketManager . java <nl> @ @ - 0 , 0 + 1 , 45 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . ticket ; <nl> + <nl> + public class MultiTicketManager < T > implements ITicketManager < T > <nl> + { <nl> + private final ITicketGetter < T > [ ] ticketManagers ; <nl> + <nl> + @ SafeVarargs <nl> + public MultiTicketManager ( ITicketGetter < T > . . . ticketManagers ) <nl> + { <nl> + this . ticketManagers = ticketManagers ; <nl> + } <nl> + <nl> + @ Override <nl> + public void add ( SimpleTicket < T > ticket ) <nl> + { <nl> + for ( ITicketGetter < T > manager : ticketManagers ) <nl> + manager . add ( ticket ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void remove ( SimpleTicket < T > ticket ) <nl> + { <nl> + for ( ITicketGetter < T > manager : ticketManagers ) <nl> + manager . remove ( ticket ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ticket / SimpleTicket . java b / src / main / java / net / minecraftforge / common / ticket / SimpleTicket . java <nl> new file mode 100644 <nl> index 0000000 . . b8b85c3 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / ticket / SimpleTicket . java <nl> @ @ - 0 , 0 + 1 , 84 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . common . ticket ; <nl> + <nl> + import com . google . common . base . Preconditions ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + import javax . annotation . Nullable ; <nl> + <nl> + / * * <nl> + * Common class for a simple ticket based system . <nl> + * @ param < T > The type that will be used to check if your ticket matches <nl> + * / <nl> + public abstract class SimpleTicket < T > <nl> + { <nl> + @ Nullable <nl> + private ITicketManager < T > manager ; <nl> + protected boolean isValid = false ; <nl> + <nl> + / * * <nl> + * Internal method that sets the collection from the managing system . <nl> + * < br > <nl> + * Should < b > not < / b > be called if you just want to register a ticket to a system like the { @ link net . minecraftforge . common . FarmlandWaterManager } <nl> + * / <nl> + public final void setBackend ( @ Nonnull ITicketManager < T > ticketManager ) <nl> + { <nl> + Preconditions . checkState ( this . manager = = null , " Ticket is already registered to a managing system " ) ; <nl> + this . manager = ticketManager ; <nl> + } <nl> + <nl> + / * * <nl> + * Checks if your ticket is still registered in the system . <nl> + * / <nl> + public boolean isValid ( ) <nl> + { <nl> + return isValid ; <nl> + } <nl> + <nl> + / * * <nl> + * Removes the ticket from the managing system . <nl> + * After this call , any calls to { @ link # isValid ( ) } should return false unless it is registered again using { @ link # validate ( ) } <nl> + * / <nl> + public void invalidate ( ) <nl> + { <nl> + Preconditions . checkState ( this . manager ! = null , " Ticket is not registered to a managing system " ) ; <nl> + if ( this . isValid ( ) ) <nl> + { <nl> + this . manager . remove ( this ) ; <nl> + } <nl> + this . isValid = false ; <nl> + } <nl> + <nl> + / * * <nl> + * Re - adds your ticket to the system . <nl> + * / <nl> + public void validate ( ) <nl> + { <nl> + Preconditions . checkState ( this . manager ! = null , " Ticket is not registered to a managing system " ) ; <nl> + if ( ! this . isValid ( ) ) <nl> + { <nl> + this . manager . add ( this ) ; <nl> + } <nl> + this . isValid = true ; <nl> + } <nl> + <nl> + public abstract boolean matches ( T toMatch ) ; <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / block / FarmlandWaterTest . java b / src / test / java / net / minecraftforge / debug / block / FarmlandWaterTest . java <nl> new file mode 100644 <nl> index 0000000 . . 85dea24 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / block / FarmlandWaterTest . java <nl> @ @ - 0 , 0 + 1 , 182 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . debug . block ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemBlock ; <nl> + import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . tileentity . TileEntity ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumHand ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . math . AxisAlignedBB ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . util . text . TextComponentString ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . common . FarmlandWaterManager ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . common . ticket . AABBTicket ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + @ Mod ( modid = FarmlandWaterTest . ID , name = " Farmland Water Test " , version = " 1 . 0 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class FarmlandWaterTest <nl> + { <nl> + / / This adds a block that creates a 4x4x4 watered region when activated <nl> + private static Logger logger ; <nl> + private static Block testBlock ; <nl> + static final String ID = " farmlandwatertest " ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + logger = event . getModLog ( ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( FarmlandWaterTest . class ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerBlocks ( RegistryEvent . Register < Block > event ) <nl> + { <nl> + testBlock = new TestBlock ( ) ; <nl> + event . getRegistry ( ) . register ( testBlock . setRegistryName ( new ResourceLocation ( ID , " test _ block " ) ) . setCreativeTab ( CreativeTabs . MISC ) . setUnlocalizedName ( " Farmland Water Test Block " ) ) ; <nl> + GameRegistry . registerTileEntity ( TestTileEntity . class , new ResourceLocation ( ID , " test _ te " ) ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerItems ( RegistryEvent . Register < Item > event ) <nl> + { <nl> + event . getRegistry ( ) . register ( new ItemBlock ( testBlock ) . setRegistryName ( new ResourceLocation ( ID , " test _ block " ) ) ) ; <nl> + } <nl> + <nl> + public static class TestBlock extends Block <nl> + { <nl> + <nl> + public TestBlock ( ) <nl> + { <nl> + super ( Material . ROCK ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasTileEntity ( IBlockState state ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Nullable <nl> + @ Override <nl> + public TileEntity createTileEntity ( World world , IBlockState state ) <nl> + { <nl> + return new TestTileEntity ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , EnumFacing facing , float hitX , float hitY , float hitZ ) <nl> + { <nl> + if ( world . isRemote ) <nl> + return true ; <nl> + TestTileEntity tileEntity = ( TestTileEntity ) world . getTileEntity ( pos ) ; <nl> + if ( tileEntity = = null ) <nl> + { <nl> + return false ; <nl> + } <nl> + tileEntity . isActive = ! tileEntity . isActive ; <nl> + tileEntity . updateTicket ( ) ; <nl> + player . sendStatusMessage ( new TextComponentString ( " Changed block powered state to " + tileEntity . isActive ) , true ) ; <nl> + logger . info ( " Changed block powered state at { } to { } " , pos , tileEntity . isActive ) ; <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public void breakBlock ( World world , BlockPos pos , IBlockState state ) <nl> + { <nl> + if ( world . isRemote ) <nl> + return ; <nl> + TestTileEntity tileEntity = ( TestTileEntity ) world . getTileEntity ( pos ) ; <nl> + if ( tileEntity = = null ) <nl> + return ; <nl> + tileEntity . farmlandTicket . invalidate ( ) ; <nl> + } <nl> + } <nl> + <nl> + public static class TestTileEntity extends TileEntity <nl> + { <nl> + private AABBTicket farmlandTicket ; <nl> + private boolean isActive = false ; <nl> + <nl> + @ Override <nl> + public void onLoad ( ) <nl> + { <nl> + if ( ! world . isRemote ) <nl> + { <nl> + farmlandTicket = FarmlandWaterManager . addAABBTicket ( world , new AxisAlignedBB ( pos ) . grow ( 4D ) ) ; <nl> + updateTicket ( ) ; <nl> + } <nl> + } <nl> + <nl> + private void updateTicket ( ) <nl> + { <nl> + if ( world . isRemote ) <nl> + return ; <nl> + if ( isActive ) <nl> + { <nl> + farmlandTicket . validate ( ) ; <nl> + } <nl> + else <nl> + { <nl> + farmlandTicket . invalidate ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public NBTTagCompound writeToNBT ( NBTTagCompound compound ) <nl> + { <nl> + compound = super . writeToNBT ( compound ) ; <nl> + compound . setBoolean ( " active " , isActive ) ; <nl> + return compound ; <nl> + } <nl> + <nl> + @ Override <nl> + public void readFromNBT ( NBTTagCompound compound ) <nl> + { <nl> + super . readFromNBT ( compound ) ; <nl> + isActive = compound . getBoolean ( " active " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onChunkUnload ( ) <nl> + { <nl> + if ( ! world . isRemote ) <nl> + { <nl> + farmlandTicket . invalidate ( ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / farmlandwatertest / blockstates / test _ block . json b / src / test / resources / assets / farmlandwatertest / blockstates / test _ block . json <nl> new file mode 100644 <nl> index 0000000 . . 0ca7c1a <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / farmlandwatertest / blockstates / test _ block . json <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + { <nl> + 	 " forge _ marker " : 1 , <nl> + 	 " defaults " : { <nl> + 	 " model " : " minecraft : bedrock " <nl> + 	 } , <nl> + " variants " : { <nl> + " normal " : [ { } ] , <nl> + 	 	 " inventory " : [ { } ] <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java b / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java <nl> index e0b6bd4 . . de12432 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java <nl> @ @ - 359 , 6 + 359 , 20 @ @ public class BlockFluidClassic extends BlockFluidBase <nl> <nl> / * IFluidBlock * / <nl> @ Override <nl> + public int place ( World world , BlockPos pos , @ Nonnull FluidStack fluidStack , boolean doPlace ) <nl> + { <nl> + if ( fluidStack . amount < Fluid . BUCKET _ VOLUME ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + if ( doPlace ) <nl> + { <nl> + world . setBlockState ( pos , this . getDefaultState ( ) , 11 ) ; <nl> + } <nl> + return Fluid . BUCKET _ VOLUME ; <nl> + } <nl> + <nl> + @ Override <nl> public FluidStack drain ( World world , BlockPos pos , boolean doDrain ) <nl> { <nl> if ( ! isSourceBlock ( world , pos ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java b / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java <nl> index 1c475c3 . . 27329e9 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java <nl> @ @ - 64 , 7 + 64 , 7 @ @ public class BlockFluidFinite extends BlockFluidBase <nl> @ Override <nl> public boolean canCollideCheck ( @ Nonnull IBlockState state , boolean fullHit ) <nl> { <nl> - return fullHit & & state . getValue ( LEVEL ) = = quantaPerBlock - 1 ; <nl> + return fullHit ; <nl> } <nl> <nl> @ Override <nl> @ @ - 245 , 6 + 245 , 41 @ @ public class BlockFluidFinite extends BlockFluidBase <nl> <nl> / * IFluidBlock * / <nl> @ Override <nl> + public int place ( World world , BlockPos pos , @ Nonnull FluidStack fluidStack , boolean doPlace ) <nl> + { <nl> + IBlockState existing = world . getBlockState ( pos ) ; <nl> + float quantaAmount = Fluid . BUCKET _ VOLUME / quantaPerBlockFloat ; <nl> + / / If the stack contains more available fluid than the full source block , <nl> + / / set a source block <nl> + int closest = Fluid . BUCKET _ VOLUME ; <nl> + int quanta = quantaPerBlock ; <nl> + if ( fluidStack . amount < closest ) <nl> + { <nl> + / / Figure out maximum level to match stack amount <nl> + closest = MathHelper . floor _ float ( quantaAmount * MathHelper . floor _ float ( fluidStack . amount / quantaAmount ) ) ; <nl> + quanta = MathHelper . floor _ float ( closest / quantaAmount ) ; <nl> + } <nl> + if ( existing . getBlock ( ) = = this ) <nl> + { <nl> + int existingQuanta = existing . getValue ( LEVEL ) + 1 ; <nl> + int missingQuanta = quantaPerBlock - existingQuanta ; <nl> + closest = Math . min ( closest , MathHelper . floor _ float ( missingQuanta * quantaAmount ) ) ; <nl> + quanta = Math . min ( quanta + existingQuanta , quantaPerBlock ) ; <nl> + } <nl> + <nl> + / / If too little ( or too much , technically impossible ) fluid is to be placed , abort <nl> + if ( quanta < 1 | | quanta > 16 ) <nl> + return 0 ; <nl> + <nl> + if ( doPlace ) <nl> + { <nl> + world . setBlockState ( pos , getDefaultState ( ) . withProperty ( LEVEL , quanta - 1 ) , 11 ) ; <nl> + } <nl> + <nl> + return closest ; <nl> + } <nl> + <nl> + @ Override <nl> public FluidStack drain ( World world , BlockPos pos , boolean doDrain ) <nl> { <nl> final FluidStack fluidStack = new FluidStack ( getFluid ( ) , MathHelper . floor _ float ( getQuantaPercentage ( world , pos ) * Fluid . BUCKET _ VOLUME ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / DispenseFluidContainer . java b / src / main / java / net / minecraftforge / fluids / DispenseFluidContainer . java <nl> index b287601 . . 2fb5f8d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / DispenseFluidContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / DispenseFluidContainer . java <nl> @ @ - 109 , 13 + 109 , 13 @ @ public class DispenseFluidContainer extends BehaviorDefaultDispenseItem <nl> FluidStack fluidStack = fluidHandler . drain ( Fluid . BUCKET _ VOLUME , false ) ; <nl> EnumFacing dispenserFacing = source . getBlockState ( ) . getValue ( BlockDispenser . FACING ) ; <nl> BlockPos blockpos = source . getBlockPos ( ) . offset ( dispenserFacing ) ; <nl> + FluidActionResult result = fluidStack ! = null ? FluidUtil . tryPlaceFluid ( null , source . getWorld ( ) , blockpos , stack , fluidStack ) : FluidActionResult . FAILURE ; <nl> <nl> - if ( fluidStack ! = null & & fluidStack . amount = = Fluid . BUCKET _ VOLUME & & FluidUtil . tryPlaceFluid ( null , source . getWorld ( ) , fluidStack , blockpos ) ) <nl> + if ( result . isSuccess ( ) ) <nl> { <nl> - fluidHandler . drain ( Fluid . BUCKET _ VOLUME , true ) ; <nl> - ItemStack drainedStack = fluidHandler . getContainer ( ) ; <nl> + ItemStack drainedStack = result . getResult ( ) ; <nl> <nl> - if ( stack . func _ 190916 _ E ( ) = = 1 ) <nl> + if ( drainedStack . func _ 190916 _ E ( ) = = 1 ) <nl> { <nl> return drainedStack ; <nl> } <nl> @ @ - 124 , 7 + 124 , 7 @ @ public class DispenseFluidContainer extends BehaviorDefaultDispenseItem <nl> this . dispenseBehavior . dispense ( source , drainedStack ) ; <nl> } <nl> <nl> - ItemStack stackCopy = stack . copy ( ) ; <nl> + ItemStack stackCopy = drainedStack . copy ( ) ; <nl> stackCopy . func _ 190918 _ g ( 1 ) ; <nl> return stackCopy ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> index f2ae674 . . 6a9a7c3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> @ @ - 37 , 7 + 37 , 9 @ @ import net . minecraft . world . World ; <nl> import net . minecraftforge . fluids . capability . CapabilityFluidHandler ; <nl> import net . minecraftforge . fluids . capability . IFluidHandler ; <nl> import net . minecraftforge . fluids . capability . IFluidHandlerItem ; <nl> + import net . minecraftforge . fluids . capability . templates . VoidFluidHandler ; <nl> import net . minecraftforge . fluids . capability . wrappers . BlockLiquidWrapper ; <nl> + import net . minecraftforge . fluids . capability . wrappers . BlockWrapper ; <nl> import net . minecraftforge . fluids . capability . wrappers . FluidBlockWrapper ; <nl> import net . minecraftforge . items . IItemHandler ; <nl> import net . minecraftforge . items . ItemHandlerHelper ; <nl> @ @ - 420 , 62 + 422 , 6 @ @ public class FluidUtil <nl> } <nl> <nl> / * * <nl> - * Tries to place a fluid in the world in block form . <nl> - * Makes a fluid emptying sound when successful . <nl> - * Checks if water - like fluids should vaporize like in the nether . <nl> - * <nl> - * Modeled after { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } <nl> - * <nl> - * @ param player Player who places the fluid . May be null for blocks like dispensers . <nl> - * @ param worldIn World to place the fluid in <nl> - * @ param fluidStack The fluidStack to place . <nl> - * @ param pos The position in the world to place the fluid block <nl> - * @ return true if successful <nl> - * / <nl> - public static boolean tryPlaceFluid ( @ Nullable EntityPlayer player , World worldIn , FluidStack fluidStack , BlockPos pos ) <nl> - { <nl> - if ( worldIn = = null | | fluidStack = = null | | pos = = null ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - Fluid fluid = fluidStack . getFluid ( ) ; <nl> - if ( fluid = = null | | ! fluid . canBePlacedInWorld ( ) ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - / / check that we can place the fluid at the destination <nl> - IBlockState destBlockState = worldIn . getBlockState ( pos ) ; <nl> - Material destMaterial = destBlockState . getMaterial ( ) ; <nl> - boolean isDestNonSolid = ! destMaterial . isSolid ( ) ; <nl> - boolean isDestReplaceable = destBlockState . getBlock ( ) . isReplaceable ( worldIn , pos ) ; <nl> - if ( ! worldIn . isAirBlock ( pos ) & & ! isDestNonSolid & & ! isDestReplaceable ) <nl> - { <nl> - return false ; / / Non - air , solid , unreplacable block . We can ' t put fluid here . <nl> - } <nl> - <nl> - if ( worldIn . provider . doesWaterVaporize ( ) & & fluid . doesVaporize ( fluidStack ) ) <nl> - { <nl> - fluid . vaporize ( player , worldIn , pos , fluidStack ) ; <nl> - } <nl> - else <nl> - { <nl> - if ( ! worldIn . isRemote & & ( isDestNonSolid | | isDestReplaceable ) & & ! destMaterial . isLiquid ( ) ) <nl> - { <nl> - worldIn . destroyBlock ( pos , true ) ; <nl> - } <nl> - <nl> - SoundEvent soundevent = fluid . getEmptySound ( fluidStack ) ; <nl> - worldIn . playSound ( player , pos , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; <nl> - <nl> - IBlockState fluidBlockState = fluid . getBlock ( ) . getDefaultState ( ) ; <nl> - worldIn . setBlockState ( pos , fluidBlockState , 11 ) ; <nl> - } <nl> - return true ; <nl> - } <nl> - <nl> - / * * <nl> * Attempts to pick up a fluid in the world and put it in an empty container item . <nl> * <nl> * @ param emptyContainer The empty container to fill . <nl> @ @ - 511 , 4 + 457 , 82 @ @ public class FluidUtil <nl> } <nl> return FluidActionResult . FAILURE ; <nl> } <nl> + <nl> + / * * <nl> + * Tries to place a fluid in the world in block form and drains the container . <nl> + * Makes a fluid emptying sound when successful . <nl> + * Honors the amount of fluid contained by the used container . <nl> + * Checks if water - like fluids should vaporize like in the nether . <nl> + * <nl> + * Modeled after { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } <nl> + * <nl> + * @ param player Player who places the fluid . May be null for blocks like dispensers . <nl> + * @ param world World to place the fluid in <nl> + * @ param pos The position in the world to place the fluid block <nl> + * @ param container The fluid container holding the fluidStack to place <nl> + * @ param resource The fluidStack to place <nl> + * @ return the container ' s ItemStack with the remaining amount of fluid if the placement was successful , null otherwise <nl> + * / <nl> + @ Nonnull <nl> + public static FluidActionResult tryPlaceFluid ( @ Nullable EntityPlayer player , World world , BlockPos pos , @ Nonnull ItemStack container , FluidStack resource ) <nl> + { <nl> + if ( world = = null | | resource = = null | | pos = = null ) <nl> + { <nl> + return FluidActionResult . FAILURE ; <nl> + } <nl> + <nl> + Fluid fluid = resource . getFluid ( ) ; <nl> + if ( fluid = = null | | ! fluid . canBePlacedInWorld ( ) ) <nl> + { <nl> + return FluidActionResult . FAILURE ; <nl> + } <nl> + <nl> + / / check that we can place the fluid at the destination <nl> + IBlockState destBlockState = world . getBlockState ( pos ) ; <nl> + Material destMaterial = destBlockState . getMaterial ( ) ; <nl> + boolean isDestNonSolid = ! destMaterial . isSolid ( ) ; <nl> + boolean isDestReplaceable = destBlockState . getBlock ( ) . isReplaceable ( world , pos ) ; <nl> + if ( ! world . isAirBlock ( pos ) & & ! isDestNonSolid & & ! isDestReplaceable ) <nl> + { <nl> + return FluidActionResult . FAILURE ; / / Non - air , solid , unreplacable block . We can ' t put fluid here . <nl> + } <nl> + <nl> + if ( world . provider . doesWaterVaporize ( ) & & fluid . doesVaporize ( resource ) ) <nl> + { <nl> + fluid . vaporize ( player , world , pos , resource ) ; <nl> + return tryEmptyContainer ( container , new VoidFluidHandler ( ) , Integer . MAX _ VALUE , player , true ) ; <nl> + } <nl> + else <nl> + { <nl> + if ( ! world . isRemote & & ( isDestNonSolid | | isDestReplaceable ) & & ! destMaterial . isLiquid ( ) ) <nl> + { <nl> + world . destroyBlock ( pos , true ) ; <nl> + } <nl> + <nl> + / / Defer the placement to the fluid block <nl> + / / Instead of actually " filling " , the fluid handler method replaces the block <nl> + Block block = fluid . getBlock ( ) ; <nl> + IFluidHandler handler ; <nl> + if ( block instanceof IFluidBlock ) <nl> + { <nl> + handler = new FluidBlockWrapper ( ( IFluidBlock ) block , world , pos ) ; <nl> + } <nl> + else if ( block instanceof BlockLiquid ) <nl> + { <nl> + handler = new BlockLiquidWrapper ( ( BlockLiquid ) block , world , pos ) ; <nl> + } <nl> + else <nl> + { <nl> + handler = new BlockWrapper ( block , world , pos ) ; <nl> + } <nl> + FluidActionResult result = tryEmptyContainer ( container , handler , Integer . MAX _ VALUE , player , true ) ; <nl> + if ( result . isSuccess ( ) ) <nl> + { <nl> + SoundEvent soundevent = fluid . getEmptySound ( resource ) ; <nl> + world . playSound ( player , pos , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; <nl> + } <nl> + <nl> + return result ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / IFluidBlock . java b / src / main / java / net / minecraftforge / fluids / IFluidBlock . java <nl> index 1f39b24 . . ae200f4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / IFluidBlock . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / IFluidBlock . java <nl> @ @ - 22 , 6 + 22 , 8 @ @ package net . minecraftforge . fluids ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . world . World ; <nl> <nl> + import javax . annotation . Nonnull ; <nl> + <nl> / * * <nl> * Implement this interface on Block classes which represent world - placeable Fluids . <nl> * <nl> @ @ - 36 , 6 + 38 , 20 @ @ public interface IFluidBlock <nl> Fluid getFluid ( ) ; <nl> <nl> / * * <nl> + * Attempts to place the block at a given position . The placed block ' s level will correspond <nl> + * to the provided fluid amount . <nl> + * This method should be called by fluid containers such as buckets , but it is recommended <nl> + * to use { @ link FluidUtil } . <nl> + * <nl> + * @ param world the world to place the block in <nl> + * @ param pos the position to place the block at <nl> + * @ param fluidStack the fluid stack to get the required data from <nl> + * @ param doPlace if false , the placement will only be simulated <nl> + * @ return the amount of fluid extracted from the provided stack to achieve some fluid level <nl> + * / <nl> + int place ( World world , BlockPos pos , @ Nonnull FluidStack fluidStack , boolean doPlace ) ; <nl> + <nl> + / * * <nl> * Attempt to drain the block . This method should be called by devices such as pumps . <nl> * <nl> * NOTE : The block is intended to handle its own state changes . <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> index 9bfba7c . . fb2098d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> @ @ - 177 , 14 + 177 , 15 @ @ public class UniversalBucket extends Item <nl> if ( player . canPlayerEdit ( targetPos , mop . sideHit , itemstack ) ) <nl> { <nl> / / try placing liquid <nl> - if ( FluidUtil . tryPlaceFluid ( player , player . getEntityWorld ( ) , fluidStack , targetPos ) <nl> - & & ! player . capabilities . isCreativeMode ) <nl> + FluidActionResult result = FluidUtil . tryPlaceFluid ( player , world , targetPos , itemstack , fluidStack ) ; <nl> + if ( result . isSuccess ( ) & & ! player . capabilities . isCreativeMode ) <nl> { <nl> / / success ! <nl> player . addStat ( StatList . getObjectUseStats ( this ) ) ; <nl> <nl> itemstack . func _ 190918 _ g ( 1 ) ; <nl> - ItemStack emptyStack = ! getEmpty ( ) . func _ 190926 _ b ( ) ? getEmpty ( ) . copy ( ) : new ItemStack ( this ) ; <nl> + ItemStack drained = result . getResult ( ) ; <nl> + ItemStack emptyStack = ! drained . func _ 190926 _ b ( ) ? drained . copy ( ) : new ItemStack ( this ) ; <nl> <nl> / / check whether we replace the item or add the empty one to the inventory <nl> if ( itemstack . func _ 190926 _ b ( ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / capability / templates / VoidFluidHandler . java b / src / main / java / net / minecraftforge / fluids / capability / templates / VoidFluidHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 3998967 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fluids / capability / templates / VoidFluidHandler . java <nl> @ @ - 0 , 0 + 1 , 91 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fluids . capability . templates ; <nl> + <nl> + import net . minecraftforge . fluids . FluidStack ; <nl> + import net . minecraftforge . fluids . FluidTankInfo ; <nl> + import net . minecraftforge . fluids . IFluidTank ; <nl> + import net . minecraftforge . fluids . capability . IFluidHandler ; <nl> + import net . minecraftforge . fluids . capability . IFluidTankProperties ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + import static net . minecraftforge . fluids . capability . templates . EmptyFluidHandler . EMPTY _ TANK _ INFO ; <nl> + import static net . minecraftforge . fluids . capability . templates . EmptyFluidHandler . EMPTY _ TANK _ PROPERTIES _ ARRAY ; <nl> + <nl> + / * * <nl> + * VoidFluidHandler is a template fluid handler that can be filled indefinitely without ever getting full . <nl> + * It does not store fluid that gets filled into it , but " destroys " it upon receiving it . <nl> + * / <nl> + public class VoidFluidHandler implements IFluidHandler , IFluidTank <nl> + { <nl> + public static final EmptyFluidHandler INSTANCE = new EmptyFluidHandler ( ) ; <nl> + <nl> + public VoidFluidHandler ( ) { } <nl> + <nl> + @ Override <nl> + public IFluidTankProperties [ ] getTankProperties ( ) <nl> + { <nl> + return EMPTY _ TANK _ PROPERTIES _ ARRAY ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Nullable <nl> + public FluidStack getFluid ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getFluidAmount ( ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getCapacity ( ) <nl> + { <nl> + return Integer . MAX _ VALUE ; <nl> + } <nl> + <nl> + @ Override <nl> + public FluidTankInfo getInfo ( ) <nl> + { <nl> + return EMPTY _ TANK _ INFO ; <nl> + } <nl> + <nl> + @ Override <nl> + public int fill ( FluidStack resource , boolean doFill ) <nl> + { <nl> + return resource . amount ; <nl> + } <nl> + <nl> + @ Override <nl> + public FluidStack drain ( FluidStack resource , boolean doDrain ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public FluidStack drain ( int maxDrain , boolean doDrain ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockLiquidWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockLiquidWrapper . java <nl> index 2fcd48e . . 7104c2e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockLiquidWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockLiquidWrapper . java <nl> @ @ - 26 , 7 + 26 , 7 @ @ import net . minecraft . block . material . Material ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . init . Blocks ; <nl> - import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . item . ItemBucket ; <nl> import net . minecraft . util . EnumHand ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . world . World ; <nl> @ @ - 39 , 7 + 39 , 7 @ @ import net . minecraftforge . fluids . capability . IFluidHandler ; <nl> <nl> / * * <nl> * Wrapper to handle vanilla Water or Lava as an IFluidHandler . <nl> - * Methods are modeled after { @ link net . minecraft . item . ItemBucket # onItemRightClick ( ItemStack , World , EntityPlayer , EnumHand ) } <nl> + * Methods are modeled after { @ link ItemBucket # onItemRightClick ( World , EntityPlayer , EnumHand ) } <nl> * / <nl> public class BlockLiquidWrapper implements IFluidHandler <nl> { <nl> @ @ - 69 , 7 + 69 , 20 @ @ public class BlockLiquidWrapper implements IFluidHandler <nl> @ Override <nl> public int fill ( FluidStack resource , boolean doFill ) <nl> { <nl> - return 0 ; <nl> + / / NOTE : " Filling " means placement in this context ! <nl> + if ( resource . amount < Fluid . BUCKET _ VOLUME ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + if ( doFill ) <nl> + { <nl> + Material material = blockLiquid . getDefaultState ( ) . getMaterial ( ) ; <nl> + BlockLiquid block = BlockLiquid . getStaticBlock ( material ) ; <nl> + world . setBlockState ( blockPos , block . getDefaultState ( ) . withProperty ( BlockLiquid . LEVEL , 0 ) , 11 ) ; <nl> + } <nl> + <nl> + return Fluid . BUCKET _ VOLUME ; <nl> } <nl> <nl> @ Nullable <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockWrapper . java <nl> new file mode 100644 <nl> index 0000000 . . f7ce267 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockWrapper . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fluids . capability . wrappers ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . fluids . Fluid ; <nl> + import net . minecraftforge . fluids . FluidStack ; <nl> + import net . minecraftforge . fluids . capability . templates . VoidFluidHandler ; <nl> + <nl> + / * * <nl> + * Wrapper around any block , only accounts for fluid placement , otherwise the block acts a void . <nl> + * If the block in question inherits from the default Vanilla or Forge implementations , <nl> + * consider using { @ link BlockLiquidWrapper } or { @ link FluidBlockWrapper } respectively . <nl> + * / <nl> + public class BlockWrapper extends VoidFluidHandler <nl> + { <nl> + protected final Block block ; <nl> + protected final World world ; <nl> + protected final BlockPos blockPos ; <nl> + <nl> + public BlockWrapper ( Block block , World world , BlockPos blockPos ) <nl> + { <nl> + this . block = block ; <nl> + this . world = world ; <nl> + this . blockPos = blockPos ; <nl> + } <nl> + <nl> + @ Override <nl> + public int fill ( FluidStack resource , boolean doFill ) <nl> + { <nl> + / / NOTE : " Filling " means placement in this context ! <nl> + if ( resource . amount < Fluid . BUCKET _ VOLUME ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + if ( doFill ) <nl> + { <nl> + world . setBlockState ( blockPos , block . getDefaultState ( ) , 11 ) ; <nl> + } <nl> + return Fluid . BUCKET _ VOLUME ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBlockWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBlockWrapper . java <nl> index ef8e403 . . 67a8bdc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBlockWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBlockWrapper . java <nl> @ @ - 62 , 7 + 62 , 12 @ @ public class FluidBlockWrapper implements IFluidHandler <nl> @ Override <nl> public int fill ( FluidStack resource , boolean doFill ) <nl> { <nl> - return 0 ; <nl> + / / NOTE : " Filling " means placement in this context ! <nl> + if ( resource = = null ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + return fluidBlock . place ( world , blockPos , resource , doFill ) ; <nl> } <nl> <nl> @ Nullable <nl> diff - - git a / src / test / java / net / minecraftforge / debug / FluidPlacementTest . java b / src / test / java / net / minecraftforge / debug / FluidPlacementTest . java <nl> new file mode 100644 <nl> index 0000000 . . 3d0b3d2 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / FluidPlacementTest . java <nl> @ @ - 0 , 0 + 1 , 270 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> + import net . minecraft . client . renderer . block . model . ModelBakery ; <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . client . renderer . block . statemap . StateMapperBase ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . init . Blocks ; <nl> + import net . minecraft . item . * ; <nl> + import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . util . NonNullList ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . common . capabilities . ICapabilityProvider ; <nl> + import net . minecraftforge . fluids . * ; <nl> + import net . minecraftforge . fluids . capability . templates . FluidHandlerItemStack ; <nl> + import net . minecraftforge . fluids . capability . wrappers . FluidBucketWrapper ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . SidedProxy ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + import javax . annotation . Nullable ; <nl> + import java . util . List ; <nl> + <nl> + import static net . minecraftforge . fluids . capability . templates . FluidHandlerItemStack . FLUID _ NBT _ KEY ; <nl> + <nl> + @ Mod ( modid = FluidPlacementTest . MODID , name = " ForgeDebugFluidPlacement " , version = FluidPlacementTest . VERSION ) <nl> + public class FluidPlacementTest <nl> + { <nl> + public static final String MODID = " forgedebugfluidplacement " ; <nl> + public static final String VERSION = " 1 . 0 " ; <nl> + <nl> + public static final boolean ENABLE = true ; <nl> + <nl> + @ SidedProxy <nl> + public static CommonProxy proxy ; <nl> + <nl> + @ EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + if ( ENABLE & & ModelFluidDebug . ENABLE ) <nl> + { <nl> + proxy . preInit ( event ) ; <nl> + } <nl> + } <nl> + <nl> + public static class CommonProxy <nl> + { <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + FluidRegistry . registerFluid ( FiniteFluid . instance ) ; <nl> + FluidRegistry . addBucketForFluid ( FiniteFluid . instance ) ; <nl> + GameRegistry . register ( EmptyFluidContainer . instance ) ; <nl> + GameRegistry . register ( FluidContainer . instance ) ; <nl> + GameRegistry . register ( FiniteFluidBlock . instance ) ; <nl> + GameRegistry . register ( new ItemBlock ( FiniteFluidBlock . instance ) . setRegistryName ( FiniteFluidBlock . instance . getRegistryName ( ) ) ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( FluidContainer . instance ) ; <nl> + } <nl> + } <nl> + <nl> + public static class ServerProxy extends CommonProxy <nl> + { <nl> + } <nl> + <nl> + public static class ClientProxy extends CommonProxy <nl> + { <nl> + private static ModelResourceLocation fluidLocation = new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + FiniteFluidBlock . name , " normal " ) ; <nl> + <nl> + @ Override <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + super . preInit ( event ) ; <nl> + Item fluid = Item . getItemFromBlock ( FiniteFluidBlock . instance ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( EmptyFluidContainer . instance , 0 , new ModelResourceLocation ( " forge : bucket " , " inventory " ) ) ; <nl> + ModelLoader . setBucketModelDefinition ( FluidContainer . instance ) ; <nl> + / / no need to pass the locations here , since they ' ll be loaded by the block model logic . <nl> + ModelBakery . registerItemVariants ( fluid ) ; <nl> + ModelLoader . setCustomMeshDefinition ( fluid , new ItemMeshDefinition ( ) <nl> + { <nl> + public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> + { <nl> + return fluidLocation ; <nl> + } <nl> + } ) ; <nl> + ModelLoader . setCustomStateMapper ( FiniteFluidBlock . instance , new StateMapperBase ( ) <nl> + { <nl> + protected ModelResourceLocation getModelResourceLocation ( IBlockState state ) <nl> + { <nl> + return fluidLocation ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + <nl> + public static final class FiniteFluid extends Fluid <nl> + { <nl> + public static final String name = " finitefluid " ; <nl> + public static final FiniteFluid instance = new FiniteFluid ( ) ; <nl> + <nl> + private FiniteFluid ( ) <nl> + { <nl> + super ( name , new ResourceLocation ( " blocks / water _ still " ) , new ResourceLocation ( " blocks / water _ flow " ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getColor ( ) <nl> + { <nl> + return 0xFFFFFF00 ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getLocalizedName ( FluidStack stack ) <nl> + { <nl> + return " Finite Fluid " ; <nl> + } <nl> + } <nl> + <nl> + public static final class FiniteFluidBlock extends BlockFluidFinite <nl> + { <nl> + public static final FiniteFluidBlock instance = new FiniteFluidBlock ( ) ; <nl> + public static final String name = " finite _ fluid _ block " ; <nl> + <nl> + private FiniteFluidBlock ( ) <nl> + { <nl> + super ( FiniteFluid . instance , Material . WATER ) ; <nl> + setCreativeTab ( CreativeTabs . BUILDING _ BLOCKS ) ; <nl> + setUnlocalizedName ( MODID + " : " + name ) ; <nl> + setRegistryName ( MODID , name ) ; <nl> + } <nl> + } <nl> + <nl> + public static final class EmptyFluidContainer extends ItemBucket <nl> + { <nl> + public static final EmptyFluidContainer instance = new EmptyFluidContainer ( ) ; <nl> + public static final String name = " empty _ fluid _ container " ; <nl> + <nl> + private EmptyFluidContainer ( ) <nl> + { <nl> + super ( Blocks . AIR ) ; <nl> + setRegistryName ( MODID , name ) ; <nl> + setUnlocalizedName ( MODID + " : " + name ) ; <nl> + setMaxStackSize ( 16 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ICapabilityProvider initCapabilities ( ItemStack stack , @ Nullable NBTTagCompound nbt ) <nl> + { <nl> + return new EmptyContainerHandler ( stack ) ; <nl> + } <nl> + <nl> + private static final class EmptyContainerHandler extends FluidBucketWrapper <nl> + { <nl> + public EmptyContainerHandler ( @ Nonnull ItemStack container ) <nl> + { <nl> + super ( container ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int fill ( FluidStack resource , boolean doFill ) <nl> + { <nl> + if ( container . func _ 190916 _ E ( ) ! = 1 | | resource = = null | | resource . amount > Fluid . BUCKET _ VOLUME | | container <nl> + . getItem ( ) instanceof ItemBucketMilk | | getFluid ( ) ! = null | | ! canFillFluidType ( resource ) ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + if ( doFill ) <nl> + { <nl> + container = new ItemStack ( FluidContainer . instance ) ; <nl> + NBTTagCompound tag = new NBTTagCompound ( ) ; <nl> + NBTTagCompound fluidTag = new NBTTagCompound ( ) ; <nl> + resource . writeToNBT ( fluidTag ) ; <nl> + tag . setTag ( FLUID _ NBT _ KEY , fluidTag ) ; <nl> + container . setTagCompound ( tag ) ; <nl> + } <nl> + <nl> + return resource . amount ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static final class FluidContainer extends UniversalBucket <nl> + { <nl> + public static final FluidContainer instance = new FluidContainer ( ) ; <nl> + public static final String name = " fluid _ container " ; <nl> + <nl> + private FluidContainer ( ) <nl> + { <nl> + super ( 1000 , new ItemStack ( EmptyFluidContainer . instance ) , false ) ; <nl> + setCreativeTab ( CreativeTabs . MISC ) ; <nl> + setRegistryName ( MODID , name ) ; <nl> + setUnlocalizedName ( MODID + " : " + name ) ; <nl> + } <nl> + <nl> + @ Nonnull <nl> + @ Override <nl> + public String getItemStackDisplayName ( @ Nonnull ItemStack stack ) <nl> + { <nl> + FluidStack fluid = getFluid ( stack ) ; <nl> + if ( fluid = = null | | fluid . getFluid ( ) = = null ) <nl> + { <nl> + return " Empty Variable Container " ; <nl> + } <nl> + return " Variable Container ( " + getFluid ( stack ) . getLocalizedName ( ) + " ) " ; <nl> + } <nl> + <nl> + @ Override <nl> + public FluidStack getFluid ( ItemStack container ) <nl> + { <nl> + container = container . copy ( ) ; <nl> + if ( container . getTagCompound ( ) ! = null ) <nl> + container . setTagCompound ( container . getTagCompound ( ) . getCompoundTag ( FLUID _ NBT _ KEY ) ) ; <nl> + return super . getFluid ( container ) ; <nl> + } <nl> + <nl> + @ Override <nl> + @ SideOnly ( Side . CLIENT ) <nl> + public void addInformation ( ItemStack stack , EntityPlayer playerIn , List < String > tooltip , boolean advanced ) <nl> + { <nl> + FluidStack fluid = getFluid ( stack ) ; <nl> + if ( fluid ! = null ) <nl> + { <nl> + tooltip . add ( fluid . amount + " / 1000 " ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void getSubItems ( @ Nonnull Item itemIn , @ Nonnull CreativeTabs tab , @ Nonnull NonNullList < ItemStack > subItems ) <nl> + { <nl> + Fluid [ ] fluids = new Fluid [ ] { FluidRegistry . WATER , FluidRegistry . LAVA , FiniteFluid . instance , ModelFluidDebug . TestFluid . instance } ; <nl> + / / add 16 variable fillings <nl> + for ( Fluid fluid : fluids ) <nl> + { <nl> + for ( int amount = 125 ; amount < = 1000 ; amount + = 125 ) <nl> + { <nl> + for ( int offset = 63 ; offset > = 0 ; offset - = 63 ) <nl> + { <nl> + FluidStack fs = new FluidStack ( fluid , amount - offset ) ; <nl> + ItemStack stack = new ItemStack ( this ) ; <nl> + NBTTagCompound tag = stack . getTagCompound ( ) ; <nl> + if ( tag = = null ) <nl> + { <nl> + tag = new NBTTagCompound ( ) ; <nl> + } <nl> + NBTTagCompound fluidTag = new NBTTagCompound ( ) ; <nl> + fs . writeToNBT ( fluidTag ) ; <nl> + tag . setTag ( FLUID _ NBT _ KEY , fluidTag ) ; <nl> + stack . setTagCompound ( tag ) ; <nl> + subItems . add ( stack ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public ICapabilityProvider initCapabilities ( ItemStack stack , NBTTagCompound nbt ) <nl> + { <nl> + return new FluidHandlerItemStack . SwapEmpty ( stack , new ItemStack ( EmptyFluidContainer . instance ) , 1000 ) ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / test / resources / assets / forgedebugfluidplacement / blockstates / finite _ fluid _ block . json b / src / test / resources / assets / forgedebugfluidplacement / blockstates / finite _ fluid _ block . json <nl> new file mode 100644 <nl> index 0000000 . . 53cc9dd <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugfluidplacement / blockstates / finite _ fluid _ block . json <nl> @ @ - 0 , 0 + 1 , 16 @ @ <nl> + { <nl> + " forge _ marker " : 1 , <nl> + " defaults " : { <nl> + " model " : " forge : fluid " , <nl> + " transform " : " forge : default - item " <nl> + } , <nl> + " variants " : { <nl> + " normal " : [ <nl> + { <nl> + " custom " : { <nl> + " fluid " : " finitefluid " <nl> + } <nl> + } <nl> + ] <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / BlockFarmland . java . patch b / patches / minecraft / net / minecraft / block / BlockFarmland . java . patch 
 index 9342f73 . . dc12cb2 100644 
 - - - a / patches / minecraft / net / minecraft / block / BlockFarmland . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / BlockFarmland . java . patch 
 @ @ - 22 , 3 + 22 , 12 @ @ 
 } 
 
 private static boolean func _ 176530 _ e ( IWorldReaderBase p _ 176530 _ 0 _ , BlockPos p _ 176530 _ 1 _ ) { 
 + @ @ - 102 , 7 + 102 , 7 @ @ 
 + } 
 + } 
 + 
 + - return false ; 
 + + return net . minecraftforge . common . FarmlandWaterManager . hasBlockWaterTicket ( p _ 176530 _ 0 _ , p _ 176530 _ 1 _ ) ; 
 + } 
 + 
 + public IItemProvider func _ 199769 _ a ( IBlockState p _ 199769 _ 1 _ , World p _ 199769 _ 2 _ , BlockPos p _ 199769 _ 3 _ , int p _ 199769 _ 4 _ ) { 
 diff - - git a / src / main / java / net / minecraftforge / common / FarmlandWaterManager . java b / src / main / java / net / minecraftforge / common / FarmlandWaterManager . java 
 new file mode 100644 
 index 0000000 . . d7f84bc 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / FarmlandWaterManager . java 
 @ @ - 0 , 0 + 1 , 145 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common ; 
 + 
 + import com . google . common . base . Preconditions ; 
 + import it . unimi . dsi . fastutil . ints . Int2ObjectMap ; 
 + import it . unimi . dsi . fastutil . ints . Int2ObjectOpenHashMap ; 
 + import net . minecraft . util . math . AxisAlignedBB ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . util . math . ChunkPos ; 
 + import net . minecraft . util . math . Vec3d ; 
 + import net . minecraft . world . IWorld ; 
 + import net . minecraft . world . IWorldReaderBase ; 
 + import net . minecraft . world . World ; 
 + import net . minecraft . world . chunk . IChunk ; 
 + import net . minecraftforge . common . ticket . AABBTicket ; 
 + import net . minecraftforge . common . ticket . ChunkTicketManager ; 
 + import net . minecraftforge . common . ticket . MultiTicketManager ; 
 + import net . minecraftforge . common . ticket . SimpleTicket ; 
 + 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + 
 + public class FarmlandWaterManager 
 + { 
 + private static final Int2ObjectMap < Map < ChunkPos , ChunkTicketManager < Vec3d > > > customWaterHandler = new Int2ObjectOpenHashMap < > ( ) ; 
 + 
 + / * * 
 + * Adds a custom ticket . 
 + * Use { @ link # addAABBTicket ( World , AxisAlignedBB ) } if you just need a ticket that can water a certain area . 
 + * < br > 
 + * If you don ' t want to water the region anymore , call { @ link SimpleTicket # invalidate ( ) } . Also call this 
 + * when the region this is unloaded ( e . g . your TE is unloaded or the block is removed ) , and validate once it is loaded 
 + * @ param world The world where the region should be marked . Only server - side worlds are allowed 
 + * @ param ticket Your ticket you want to have registered 
 + * @ param chunkPoses The chunkPoses where the ticket is located 
 + * @ return The ticket for your requested region . 
 + * / 
 + @ SuppressWarnings ( " unchecked " ) 
 + public static < T extends SimpleTicket < Vec3d > > T addCustomTicket ( World world , T ticket , ChunkPos . . . chunkPoses ) 
 + { 
 + Preconditions . checkArgument ( ! world . isRemote , " Water region is only determined server - side " ) ; 
 + Preconditions . checkArgument ( chunkPoses . length > 0 , " Need at least one chunk pos " ) ; 
 + Map < ChunkPos , ChunkTicketManager < Vec3d > > ticketMap = customWaterHandler . computeIfAbsent ( world . getDimension ( ) . getType ( ) . getId ( ) , id - > new HashMap < > ( ) ) ; 
 + if ( chunkPoses . length = = 1 ) 
 + { 
 + ticket . setBackend ( ticketMap . computeIfAbsent ( chunkPoses [ 0 ] , ChunkTicketManager : : new ) ) ; 
 + } 
 + else 
 + { 
 + ChunkTicketManager < Vec3d > [ ] tickets = new ChunkTicketManager [ chunkPoses . length ] ; 
 + for ( int i = 0 ; i < chunkPoses . length ; i + + ) 
 + tickets [ i ] = ticketMap . computeIfAbsent ( chunkPoses [ i ] , ChunkTicketManager : : new ) ; 
 + ticket . setBackend ( new MultiTicketManager < > ( tickets ) ) ; 
 + } 
 + ticket . validate ( ) ; 
 + return ticket ; 
 + } 
 + 
 + / * * 
 + * Convenience method to add a ticket that is backed by an AABB . 
 + * < br > 
 + * If you don ' t want to water the region anymore , call { @ link SimpleTicket # invalidate ( ) } . Also call this 
 + * when the region this is unloaded ( e . g . your TE is unloaded or the block is removed ) , and validate once it is loaded 
 + * < br > 
 + * The AABB in the ticket is immutable 
 + * @ param world The world where the region should be marked . Only server - side worlds are allowed 
 + * @ param aabb The region where blocks should be watered 
 + * @ return The ticket for your requested region . 
 + * / 
 + public static AABBTicket addAABBTicket ( World world , AxisAlignedBB aabb ) 
 + { 
 + / / First calculate all chunks the aabb is in 
 + ChunkPos leftUp = new ChunkPos ( ( ( int ) aabb . minX ) > > 4 , ( ( int ) aabb . minZ ) > > 4 ) ; 
 + ChunkPos rightDown = new ChunkPos ( ( ( int ) aabb . maxX ) > > 4 , ( ( int ) aabb . maxZ ) > > 4 ) ; 
 + Set < ChunkPos > posSet = new HashSet < > ( ) ; 
 + for ( int x = leftUp . x ; x < = rightDown . x ; x + + ) 
 + { 
 + for ( int z = leftUp . z ; z < = rightDown . z ; z + + ) 
 + { 
 + posSet . add ( new ChunkPos ( x , z ) ) ; 
 + } 
 + } 
 + return addCustomTicket ( world , new AABBTicket ( aabb ) , posSet . toArray ( new ChunkPos [ 0 ] ) ) ; 
 + } 
 + 
 + / * * 
 + * Tests if a block is in a region that is watered by blocks . This does not check vanilla water , see { @ link net . minecraft . block . BlockFarmland # hasWater ( World , BlockPos ) } 
 + * @ return true if there is a ticket with an AABB that includes your block 
 + * / 
 + public static boolean hasBlockWaterTicket ( IWorldReaderBase world , BlockPos pos ) 
 + { 
 + ChunkTicketManager < Vec3d > ticketManager = getTicketManager ( new ChunkPos ( pos . getX ( ) > > 4 , pos . getZ ( ) > > 4 ) , world ) ; 
 + if ( ticketManager ! = null ) 
 + { 
 + Vec3d posAsVec3d = new Vec3d ( pos ) ; 
 + for ( SimpleTicket < Vec3d > ticket : ticketManager . getTickets ( ) ) { 
 + if ( ticket . matches ( posAsVec3d ) ) 
 + return true ; 
 + } 
 + } 
 + return false ; 
 + } 
 + 
 + static void removeTickets ( IChunk chunk ) 
 + { 
 + ChunkTicketManager < Vec3d > ticketManager = getTicketManager ( chunk . getPos ( ) , chunk . getWorldForge ( ) ) ; 
 + if ( ticketManager ! = null ) 
 + { 
 + for ( SimpleTicket < Vec3d > ticket : ticketManager . getTickets ( ) ) 
 + { 
 + ticket . invalidate ( ) ; 
 + } 
 + } 
 + } 
 + 
 + private static ChunkTicketManager < Vec3d > getTicketManager ( ChunkPos pos , IWorldReaderBase world ) { 
 + Preconditions . checkArgument ( ! world . isRemote ( ) , " Water region is only determined server - side " ) ; 
 + Map < ChunkPos , ChunkTicketManager < Vec3d > > ticketMap = customWaterHandler . get ( world . getDimension ( ) . getType ( ) . getId ( ) ) ; 
 + if ( ticketMap = = null ) 
 + { 
 + return null ; 
 + } 
 + return ticketMap . get ( pos ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java b / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java 
 index c768b68 . . e07ff10 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeInternalHandler . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import net . minecraft . world . WorldServer ; 
 import net . minecraftforge . client . CloudRenderer ; 
 import net . minecraftforge . common . util . FakePlayerFactory ; 
 import net . minecraftforge . event . entity . EntityJoinWorldEvent ; 
 + import net . minecraftforge . event . world . ChunkEvent ; 
 import net . minecraftforge . event . world . WorldEvent ; 
 import net . minecraftforge . eventbus . api . EventPriority ; 
 import net . minecraftforge . eventbus . api . SubscribeEvent ; 
 @ @ - 80 , 5 + 81 , 12 @ @ public class ForgeInternalHandler 
 if ( event . phase = = Phase . END ) 
 CloudRenderer . updateCloudSettings ( ) ; 
 } 
 + 
 + @ SubscribeEvent 
 + public void onChunkUnload ( ChunkEvent . Unload event ) 
 + { 
 + if ( ! event . getWorld ( ) . isRemote ( ) ) 
 + FarmlandWaterManager . removeTickets ( event . getChunk ( ) ) ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / ticket / AABBTicket . java b / src / main / java / net / minecraftforge / common / ticket / AABBTicket . java 
 new file mode 100644 
 index 0000000 . . c98c0bf 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / ticket / AABBTicket . java 
 @ @ - 0 , 0 + 1 , 42 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . ticket ; 
 + 
 + import net . minecraft . util . math . AxisAlignedBB ; 
 + import net . minecraft . util . math . Vec3d ; 
 + 
 + import javax . annotation . Nonnull ; 
 + 
 + public class AABBTicket extends SimpleTicket < Vec3d > 
 + { 
 + @ Nonnull 
 + public final AxisAlignedBB axisAlignedBB ; 
 + 
 + public AABBTicket ( @ Nonnull AxisAlignedBB axisAlignedBB ) 
 + { 
 + this . axisAlignedBB = axisAlignedBB ; 
 + } 
 + 
 + @ Override 
 + public boolean matches ( Vec3d toMatch ) 
 + { 
 + return this . axisAlignedBB . contains ( toMatch ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / ticket / ChunkTicketManager . java b / src / main / java / net / minecraftforge / common / ticket / ChunkTicketManager . java 
 new file mode 100644 
 index 0000000 . . 549f866 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / ticket / ChunkTicketManager . java 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . ticket ; 
 + 
 + import net . minecraft . util . math . ChunkPos ; 
 + 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . Set ; 
 + import java . util . WeakHashMap ; 
 + 
 + public class ChunkTicketManager < T > implements ITicketGetter < T > 
 + { 
 + private final Set < SimpleTicket < T > > tickets = Collections . newSetFromMap ( new WeakHashMap < > ( ) ) ; 
 + public final ChunkPos pos ; 
 + 
 + public ChunkTicketManager ( ChunkPos pos ) 
 + { 
 + this . pos = pos ; 
 + } 
 + 
 + @ Override 
 + public void add ( SimpleTicket < T > ticket ) 
 + { 
 + this . tickets . add ( ticket ) ; 
 + } 
 + 
 + @ Override 
 + public void remove ( SimpleTicket < T > ticket ) 
 + { 
 + this . tickets . remove ( ticket ) ; 
 + } 
 + 
 + @ Override 
 + public Collection < SimpleTicket < T > > getTickets ( ) 
 + { 
 + return tickets ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / ticket / ITicketGetter . java b / src / main / java / net / minecraftforge / common / ticket / ITicketGetter . java 
 new file mode 100644 
 index 0000000 . . 8d57469 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / ticket / ITicketGetter . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . ticket ; 
 + 
 + import java . util . Collection ; 
 + 
 + public interface ITicketGetter < T > extends ITicketManager < T > 
 + { 
 + Collection < SimpleTicket < T > > getTickets ( ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / ticket / ITicketManager . java b / src / main / java / net / minecraftforge / common / ticket / ITicketManager . java 
 new file mode 100644 
 index 0000000 . . 61ffd32 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / ticket / ITicketManager . java 
 @ @ - 0 , 0 + 1 , 27 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . ticket ; 
 + 
 + public interface ITicketManager < T > 
 + { 
 + void add ( SimpleTicket < T > ticket ) ; 
 + 
 + void remove ( SimpleTicket < T > ticket ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / ticket / MultiTicketManager . java b / src / main / java / net / minecraftforge / common / ticket / MultiTicketManager . java 
 new file mode 100644 
 index 0000000 . . 9fc88e2 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / ticket / MultiTicketManager . java 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . ticket ; 
 + 
 + public class MultiTicketManager < T > implements ITicketManager < T > 
 + { 
 + private final ITicketGetter < T > [ ] ticketManagers ; 
 + 
 + @ SafeVarargs 
 + public MultiTicketManager ( ITicketGetter < T > . . . ticketManagers ) 
 + { 
 + this . ticketManagers = ticketManagers ; 
 + } 
 + 
 + @ Override 
 + public void add ( SimpleTicket < T > ticket ) 
 + { 
 + for ( ITicketGetter < T > manager : ticketManagers ) 
 + manager . add ( ticket ) ; 
 + } 
 + 
 + @ Override 
 + public void remove ( SimpleTicket < T > ticket ) 
 + { 
 + for ( ITicketGetter < T > manager : ticketManagers ) 
 + manager . remove ( ticket ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / ticket / SimpleTicket . java b / src / main / java / net / minecraftforge / common / ticket / SimpleTicket . java 
 new file mode 100644 
 index 0000000 . . b8b85c3 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / ticket / SimpleTicket . java 
 @ @ - 0 , 0 + 1 , 84 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . common . ticket ; 
 + 
 + import com . google . common . base . Preconditions ; 
 + 
 + import javax . annotation . Nonnull ; 
 + import javax . annotation . Nullable ; 
 + 
 + / * * 
 + * Common class for a simple ticket based system . 
 + * @ param < T > The type that will be used to check if your ticket matches 
 + * / 
 + public abstract class SimpleTicket < T > 
 + { 
 + @ Nullable 
 + private ITicketManager < T > manager ; 
 + protected boolean isValid = false ; 
 + 
 + / * * 
 + * Internal method that sets the collection from the managing system . 
 + * < br > 
 + * Should < b > not < / b > be called if you just want to register a ticket to a system like the { @ link net . minecraftforge . common . FarmlandWaterManager } 
 + * / 
 + public final void setBackend ( @ Nonnull ITicketManager < T > ticketManager ) 
 + { 
 + Preconditions . checkState ( this . manager = = null , " Ticket is already registered to a managing system " ) ; 
 + this . manager = ticketManager ; 
 + } 
 + 
 + / * * 
 + * Checks if your ticket is still registered in the system . 
 + * / 
 + public boolean isValid ( ) 
 + { 
 + return isValid ; 
 + } 
 + 
 + / * * 
 + * Removes the ticket from the managing system . 
 + * After this call , any calls to { @ link # isValid ( ) } should return false unless it is registered again using { @ link # validate ( ) } 
 + * / 
 + public void invalidate ( ) 
 + { 
 + Preconditions . checkState ( this . manager ! = null , " Ticket is not registered to a managing system " ) ; 
 + if ( this . isValid ( ) ) 
 + { 
 + this . manager . remove ( this ) ; 
 + } 
 + this . isValid = false ; 
 + } 
 + 
 + / * * 
 + * Re - adds your ticket to the system . 
 + * / 
 + public void validate ( ) 
 + { 
 + Preconditions . checkState ( this . manager ! = null , " Ticket is not registered to a managing system " ) ; 
 + if ( ! this . isValid ( ) ) 
 + { 
 + this . manager . add ( this ) ; 
 + } 
 + this . isValid = true ; 
 + } 
 + 
 + public abstract boolean matches ( T toMatch ) ; 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / block / FarmlandWaterTest . java b / src / test / java / net / minecraftforge / debug / block / FarmlandWaterTest . java 
 new file mode 100644 
 index 0000000 . . 85dea24 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / block / FarmlandWaterTest . java 
 @ @ - 0 , 0 + 1 , 182 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . debug . block ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemBlock ; 
 + import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . tileentity . TileEntity ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumHand ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . math . AxisAlignedBB ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . util . text . TextComponentString ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . common . FarmlandWaterManager ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . common . ticket . AABBTicket ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + @ Mod ( modid = FarmlandWaterTest . ID , name = " Farmland Water Test " , version = " 1 . 0 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class FarmlandWaterTest 
 + { 
 + / / This adds a block that creates a 4x4x4 watered region when activated 
 + private static Logger logger ; 
 + private static Block testBlock ; 
 + static final String ID = " farmlandwatertest " ; 
 + 
 + @ Mod . EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + logger = event . getModLog ( ) ; 
 + MinecraftForge . EVENT _ BUS . register ( FarmlandWaterTest . class ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerBlocks ( RegistryEvent . Register < Block > event ) 
 + { 
 + testBlock = new TestBlock ( ) ; 
 + event . getRegistry ( ) . register ( testBlock . setRegistryName ( new ResourceLocation ( ID , " test _ block " ) ) . setCreativeTab ( CreativeTabs . MISC ) . setUnlocalizedName ( " Farmland Water Test Block " ) ) ; 
 + GameRegistry . registerTileEntity ( TestTileEntity . class , new ResourceLocation ( ID , " test _ te " ) ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerItems ( RegistryEvent . Register < Item > event ) 
 + { 
 + event . getRegistry ( ) . register ( new ItemBlock ( testBlock ) . setRegistryName ( new ResourceLocation ( ID , " test _ block " ) ) ) ; 
 + } 
 + 
 + public static class TestBlock extends Block 
 + { 
 + 
 + public TestBlock ( ) 
 + { 
 + super ( Material . ROCK ) ; 
 + } 
 + 
 + @ Override 
 + public boolean hasTileEntity ( IBlockState state ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Nullable 
 + @ Override 
 + public TileEntity createTileEntity ( World world , IBlockState state ) 
 + { 
 + return new TestTileEntity ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , EnumFacing facing , float hitX , float hitY , float hitZ ) 
 + { 
 + if ( world . isRemote ) 
 + return true ; 
 + TestTileEntity tileEntity = ( TestTileEntity ) world . getTileEntity ( pos ) ; 
 + if ( tileEntity = = null ) 
 + { 
 + return false ; 
 + } 
 + tileEntity . isActive = ! tileEntity . isActive ; 
 + tileEntity . updateTicket ( ) ; 
 + player . sendStatusMessage ( new TextComponentString ( " Changed block powered state to " + tileEntity . isActive ) , true ) ; 
 + logger . info ( " Changed block powered state at { } to { } " , pos , tileEntity . isActive ) ; 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public void breakBlock ( World world , BlockPos pos , IBlockState state ) 
 + { 
 + if ( world . isRemote ) 
 + return ; 
 + TestTileEntity tileEntity = ( TestTileEntity ) world . getTileEntity ( pos ) ; 
 + if ( tileEntity = = null ) 
 + return ; 
 + tileEntity . farmlandTicket . invalidate ( ) ; 
 + } 
 + } 
 + 
 + public static class TestTileEntity extends TileEntity 
 + { 
 + private AABBTicket farmlandTicket ; 
 + private boolean isActive = false ; 
 + 
 + @ Override 
 + public void onLoad ( ) 
 + { 
 + if ( ! world . isRemote ) 
 + { 
 + farmlandTicket = FarmlandWaterManager . addAABBTicket ( world , new AxisAlignedBB ( pos ) . grow ( 4D ) ) ; 
 + updateTicket ( ) ; 
 + } 
 + } 
 + 
 + private void updateTicket ( ) 
 + { 
 + if ( world . isRemote ) 
 + return ; 
 + if ( isActive ) 
 + { 
 + farmlandTicket . validate ( ) ; 
 + } 
 + else 
 + { 
 + farmlandTicket . invalidate ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public NBTTagCompound writeToNBT ( NBTTagCompound compound ) 
 + { 
 + compound = super . writeToNBT ( compound ) ; 
 + compound . setBoolean ( " active " , isActive ) ; 
 + return compound ; 
 + } 
 + 
 + @ Override 
 + public void readFromNBT ( NBTTagCompound compound ) 
 + { 
 + super . readFromNBT ( compound ) ; 
 + isActive = compound . getBoolean ( " active " ) ; 
 + } 
 + 
 + @ Override 
 + public void onChunkUnload ( ) 
 + { 
 + if ( ! world . isRemote ) 
 + { 
 + farmlandTicket . invalidate ( ) ; 
 + } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / farmlandwatertest / blockstates / test _ block . json b / src / test / resources / assets / farmlandwatertest / blockstates / test _ block . json 
 new file mode 100644 
 index 0000000 . . 0ca7c1a 
 - - - / dev / null 
 + + + b / src / test / resources / assets / farmlandwatertest / blockstates / test _ block . json 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + { 
 + 	 " forge _ marker " : 1 , 
 + 	 " defaults " : { 
 + 	 " model " : " minecraft : bedrock " 
 + 	 } , 
 + " variants " : { 
 + " normal " : [ { } ] , 
 + 	 	 " inventory " : [ { } ] 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java b / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java 
 index e0b6bd4 . . de12432 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java 
 + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java 
 @ @ - 359 , 6 + 359 , 20 @ @ public class BlockFluidClassic extends BlockFluidBase 
 
 / * IFluidBlock * / 
 @ Override 
 + public int place ( World world , BlockPos pos , @ Nonnull FluidStack fluidStack , boolean doPlace ) 
 + { 
 + if ( fluidStack . amount < Fluid . BUCKET _ VOLUME ) 
 + { 
 + return 0 ; 
 + } 
 + if ( doPlace ) 
 + { 
 + world . setBlockState ( pos , this . getDefaultState ( ) , 11 ) ; 
 + } 
 + return Fluid . BUCKET _ VOLUME ; 
 + } 
 + 
 + @ Override 
 public FluidStack drain ( World world , BlockPos pos , boolean doDrain ) 
 { 
 if ( ! isSourceBlock ( world , pos ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java b / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java 
 index 1c475c3 . . 27329e9 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java 
 + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java 
 @ @ - 64 , 7 + 64 , 7 @ @ public class BlockFluidFinite extends BlockFluidBase 
 @ Override 
 public boolean canCollideCheck ( @ Nonnull IBlockState state , boolean fullHit ) 
 { 
 - return fullHit & & state . getValue ( LEVEL ) = = quantaPerBlock - 1 ; 
 + return fullHit ; 
 } 
 
 @ Override 
 @ @ - 245 , 6 + 245 , 41 @ @ public class BlockFluidFinite extends BlockFluidBase 
 
 / * IFluidBlock * / 
 @ Override 
 + public int place ( World world , BlockPos pos , @ Nonnull FluidStack fluidStack , boolean doPlace ) 
 + { 
 + IBlockState existing = world . getBlockState ( pos ) ; 
 + float quantaAmount = Fluid . BUCKET _ VOLUME / quantaPerBlockFloat ; 
 + / / If the stack contains more available fluid than the full source block , 
 + / / set a source block 
 + int closest = Fluid . BUCKET _ VOLUME ; 
 + int quanta = quantaPerBlock ; 
 + if ( fluidStack . amount < closest ) 
 + { 
 + / / Figure out maximum level to match stack amount 
 + closest = MathHelper . floor _ float ( quantaAmount * MathHelper . floor _ float ( fluidStack . amount / quantaAmount ) ) ; 
 + quanta = MathHelper . floor _ float ( closest / quantaAmount ) ; 
 + } 
 + if ( existing . getBlock ( ) = = this ) 
 + { 
 + int existingQuanta = existing . getValue ( LEVEL ) + 1 ; 
 + int missingQuanta = quantaPerBlock - existingQuanta ; 
 + closest = Math . min ( closest , MathHelper . floor _ float ( missingQuanta * quantaAmount ) ) ; 
 + quanta = Math . min ( quanta + existingQuanta , quantaPerBlock ) ; 
 + } 
 + 
 + / / If too little ( or too much , technically impossible ) fluid is to be placed , abort 
 + if ( quanta < 1 | | quanta > 16 ) 
 + return 0 ; 
 + 
 + if ( doPlace ) 
 + { 
 + world . setBlockState ( pos , getDefaultState ( ) . withProperty ( LEVEL , quanta - 1 ) , 11 ) ; 
 + } 
 + 
 + return closest ; 
 + } 
 + 
 + @ Override 
 public FluidStack drain ( World world , BlockPos pos , boolean doDrain ) 
 { 
 final FluidStack fluidStack = new FluidStack ( getFluid ( ) , MathHelper . floor _ float ( getQuantaPercentage ( world , pos ) * Fluid . BUCKET _ VOLUME ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fluids / DispenseFluidContainer . java b / src / main / java / net / minecraftforge / fluids / DispenseFluidContainer . java 
 index b287601 . . 2fb5f8d 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / DispenseFluidContainer . java 
 + + + b / src / main / java / net / minecraftforge / fluids / DispenseFluidContainer . java 
 @ @ - 109 , 13 + 109 , 13 @ @ public class DispenseFluidContainer extends BehaviorDefaultDispenseItem 
 FluidStack fluidStack = fluidHandler . drain ( Fluid . BUCKET _ VOLUME , false ) ; 
 EnumFacing dispenserFacing = source . getBlockState ( ) . getValue ( BlockDispenser . FACING ) ; 
 BlockPos blockpos = source . getBlockPos ( ) . offset ( dispenserFacing ) ; 
 + FluidActionResult result = fluidStack ! = null ? FluidUtil . tryPlaceFluid ( null , source . getWorld ( ) , blockpos , stack , fluidStack ) : FluidActionResult . FAILURE ; 
 
 - if ( fluidStack ! = null & & fluidStack . amount = = Fluid . BUCKET _ VOLUME & & FluidUtil . tryPlaceFluid ( null , source . getWorld ( ) , fluidStack , blockpos ) ) 
 + if ( result . isSuccess ( ) ) 
 { 
 - fluidHandler . drain ( Fluid . BUCKET _ VOLUME , true ) ; 
 - ItemStack drainedStack = fluidHandler . getContainer ( ) ; 
 + ItemStack drainedStack = result . getResult ( ) ; 
 
 - if ( stack . func _ 190916 _ E ( ) = = 1 ) 
 + if ( drainedStack . func _ 190916 _ E ( ) = = 1 ) 
 { 
 return drainedStack ; 
 } 
 @ @ - 124 , 7 + 124 , 7 @ @ public class DispenseFluidContainer extends BehaviorDefaultDispenseItem 
 this . dispenseBehavior . dispense ( source , drainedStack ) ; 
 } 
 
 - ItemStack stackCopy = stack . copy ( ) ; 
 + ItemStack stackCopy = drainedStack . copy ( ) ; 
 stackCopy . func _ 190918 _ g ( 1 ) ; 
 return stackCopy ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 index f2ae674 . . 6a9a7c3 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 @ @ - 37 , 7 + 37 , 9 @ @ import net . minecraft . world . World ; 
 import net . minecraftforge . fluids . capability . CapabilityFluidHandler ; 
 import net . minecraftforge . fluids . capability . IFluidHandler ; 
 import net . minecraftforge . fluids . capability . IFluidHandlerItem ; 
 + import net . minecraftforge . fluids . capability . templates . VoidFluidHandler ; 
 import net . minecraftforge . fluids . capability . wrappers . BlockLiquidWrapper ; 
 + import net . minecraftforge . fluids . capability . wrappers . BlockWrapper ; 
 import net . minecraftforge . fluids . capability . wrappers . FluidBlockWrapper ; 
 import net . minecraftforge . items . IItemHandler ; 
 import net . minecraftforge . items . ItemHandlerHelper ; 
 @ @ - 420 , 62 + 422 , 6 @ @ public class FluidUtil 
 } 
 
 / * * 
 - * Tries to place a fluid in the world in block form . 
 - * Makes a fluid emptying sound when successful . 
 - * Checks if water - like fluids should vaporize like in the nether . 
 - * 
 - * Modeled after { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } 
 - * 
 - * @ param player Player who places the fluid . May be null for blocks like dispensers . 
 - * @ param worldIn World to place the fluid in 
 - * @ param fluidStack The fluidStack to place . 
 - * @ param pos The position in the world to place the fluid block 
 - * @ return true if successful 
 - * / 
 - public static boolean tryPlaceFluid ( @ Nullable EntityPlayer player , World worldIn , FluidStack fluidStack , BlockPos pos ) 
 - { 
 - if ( worldIn = = null | | fluidStack = = null | | pos = = null ) 
 - { 
 - return false ; 
 - } 
 - 
 - Fluid fluid = fluidStack . getFluid ( ) ; 
 - if ( fluid = = null | | ! fluid . canBePlacedInWorld ( ) ) 
 - { 
 - return false ; 
 - } 
 - 
 - / / check that we can place the fluid at the destination 
 - IBlockState destBlockState = worldIn . getBlockState ( pos ) ; 
 - Material destMaterial = destBlockState . getMaterial ( ) ; 
 - boolean isDestNonSolid = ! destMaterial . isSolid ( ) ; 
 - boolean isDestReplaceable = destBlockState . getBlock ( ) . isReplaceable ( worldIn , pos ) ; 
 - if ( ! worldIn . isAirBlock ( pos ) & & ! isDestNonSolid & & ! isDestReplaceable ) 
 - { 
 - return false ; / / Non - air , solid , unreplacable block . We can ' t put fluid here . 
 - } 
 - 
 - if ( worldIn . provider . doesWaterVaporize ( ) & & fluid . doesVaporize ( fluidStack ) ) 
 - { 
 - fluid . vaporize ( player , worldIn , pos , fluidStack ) ; 
 - } 
 - else 
 - { 
 - if ( ! worldIn . isRemote & & ( isDestNonSolid | | isDestReplaceable ) & & ! destMaterial . isLiquid ( ) ) 
 - { 
 - worldIn . destroyBlock ( pos , true ) ; 
 - } 
 - 
 - SoundEvent soundevent = fluid . getEmptySound ( fluidStack ) ; 
 - worldIn . playSound ( player , pos , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; 
 - 
 - IBlockState fluidBlockState = fluid . getBlock ( ) . getDefaultState ( ) ; 
 - worldIn . setBlockState ( pos , fluidBlockState , 11 ) ; 
 - } 
 - return true ; 
 - } 
 - 
 - / * * 
 * Attempts to pick up a fluid in the world and put it in an empty container item . 
 * 
 * @ param emptyContainer The empty container to fill . 
 @ @ - 511 , 4 + 457 , 82 @ @ public class FluidUtil 
 } 
 return FluidActionResult . FAILURE ; 
 } 
 + 
 + / * * 
 + * Tries to place a fluid in the world in block form and drains the container . 
 + * Makes a fluid emptying sound when successful . 
 + * Honors the amount of fluid contained by the used container . 
 + * Checks if water - like fluids should vaporize like in the nether . 
 + * 
 + * Modeled after { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } 
 + * 
 + * @ param player Player who places the fluid . May be null for blocks like dispensers . 
 + * @ param world World to place the fluid in 
 + * @ param pos The position in the world to place the fluid block 
 + * @ param container The fluid container holding the fluidStack to place 
 + * @ param resource The fluidStack to place 
 + * @ return the container ' s ItemStack with the remaining amount of fluid if the placement was successful , null otherwise 
 + * / 
 + @ Nonnull 
 + public static FluidActionResult tryPlaceFluid ( @ Nullable EntityPlayer player , World world , BlockPos pos , @ Nonnull ItemStack container , FluidStack resource ) 
 + { 
 + if ( world = = null | | resource = = null | | pos = = null ) 
 + { 
 + return FluidActionResult . FAILURE ; 
 + } 
 + 
 + Fluid fluid = resource . getFluid ( ) ; 
 + if ( fluid = = null | | ! fluid . canBePlacedInWorld ( ) ) 
 + { 
 + return FluidActionResult . FAILURE ; 
 + } 
 + 
 + / / check that we can place the fluid at the destination 
 + IBlockState destBlockState = world . getBlockState ( pos ) ; 
 + Material destMaterial = destBlockState . getMaterial ( ) ; 
 + boolean isDestNonSolid = ! destMaterial . isSolid ( ) ; 
 + boolean isDestReplaceable = destBlockState . getBlock ( ) . isReplaceable ( world , pos ) ; 
 + if ( ! world . isAirBlock ( pos ) & & ! isDestNonSolid & & ! isDestReplaceable ) 
 + { 
 + return FluidActionResult . FAILURE ; / / Non - air , solid , unreplacable block . We can ' t put fluid here . 
 + } 
 + 
 + if ( world . provider . doesWaterVaporize ( ) & & fluid . doesVaporize ( resource ) ) 
 + { 
 + fluid . vaporize ( player , world , pos , resource ) ; 
 + return tryEmptyContainer ( container , new VoidFluidHandler ( ) , Integer . MAX _ VALUE , player , true ) ; 
 + } 
 + else 
 + { 
 + if ( ! world . isRemote & & ( isDestNonSolid | | isDestReplaceable ) & & ! destMaterial . isLiquid ( ) ) 
 + { 
 + world . destroyBlock ( pos , true ) ; 
 + } 
 + 
 + / / Defer the placement to the fluid block 
 + / / Instead of actually " filling " , the fluid handler method replaces the block 
 + Block block = fluid . getBlock ( ) ; 
 + IFluidHandler handler ; 
 + if ( block instanceof IFluidBlock ) 
 + { 
 + handler = new FluidBlockWrapper ( ( IFluidBlock ) block , world , pos ) ; 
 + } 
 + else if ( block instanceof BlockLiquid ) 
 + { 
 + handler = new BlockLiquidWrapper ( ( BlockLiquid ) block , world , pos ) ; 
 + } 
 + else 
 + { 
 + handler = new BlockWrapper ( block , world , pos ) ; 
 + } 
 + FluidActionResult result = tryEmptyContainer ( container , handler , Integer . MAX _ VALUE , player , true ) ; 
 + if ( result . isSuccess ( ) ) 
 + { 
 + SoundEvent soundevent = fluid . getEmptySound ( resource ) ; 
 + world . playSound ( player , pos , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; 
 + } 
 + 
 + return result ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / IFluidBlock . java b / src / main / java / net / minecraftforge / fluids / IFluidBlock . java 
 index 1f39b24 . . ae200f4 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / IFluidBlock . java 
 + + + b / src / main / java / net / minecraftforge / fluids / IFluidBlock . java 
 @ @ - 22 , 6 + 22 , 8 @ @ package net . minecraftforge . fluids ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . world . World ; 
 
 + import javax . annotation . Nonnull ; 
 + 
 / * * 
 * Implement this interface on Block classes which represent world - placeable Fluids . 
 * 
 @ @ - 36 , 6 + 38 , 20 @ @ public interface IFluidBlock 
 Fluid getFluid ( ) ; 
 
 / * * 
 + * Attempts to place the block at a given position . The placed block ' s level will correspond 
 + * to the provided fluid amount . 
 + * This method should be called by fluid containers such as buckets , but it is recommended 
 + * to use { @ link FluidUtil } . 
 + * 
 + * @ param world the world to place the block in 
 + * @ param pos the position to place the block at 
 + * @ param fluidStack the fluid stack to get the required data from 
 + * @ param doPlace if false , the placement will only be simulated 
 + * @ return the amount of fluid extracted from the provided stack to achieve some fluid level 
 + * / 
 + int place ( World world , BlockPos pos , @ Nonnull FluidStack fluidStack , boolean doPlace ) ; 
 + 
 + / * * 
 * Attempt to drain the block . This method should be called by devices such as pumps . 
 * 
 * NOTE : The block is intended to handle its own state changes . 
 diff - - git a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 index 9bfba7c . . fb2098d 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 + + + b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 @ @ - 177 , 14 + 177 , 15 @ @ public class UniversalBucket extends Item 
 if ( player . canPlayerEdit ( targetPos , mop . sideHit , itemstack ) ) 
 { 
 / / try placing liquid 
 - if ( FluidUtil . tryPlaceFluid ( player , player . getEntityWorld ( ) , fluidStack , targetPos ) 
 - & & ! player . capabilities . isCreativeMode ) 
 + FluidActionResult result = FluidUtil . tryPlaceFluid ( player , world , targetPos , itemstack , fluidStack ) ; 
 + if ( result . isSuccess ( ) & & ! player . capabilities . isCreativeMode ) 
 { 
 / / success ! 
 player . addStat ( StatList . getObjectUseStats ( this ) ) ; 
 
 itemstack . func _ 190918 _ g ( 1 ) ; 
 - ItemStack emptyStack = ! getEmpty ( ) . func _ 190926 _ b ( ) ? getEmpty ( ) . copy ( ) : new ItemStack ( this ) ; 
 + ItemStack drained = result . getResult ( ) ; 
 + ItemStack emptyStack = ! drained . func _ 190926 _ b ( ) ? drained . copy ( ) : new ItemStack ( this ) ; 
 
 / / check whether we replace the item or add the empty one to the inventory 
 if ( itemstack . func _ 190926 _ b ( ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fluids / capability / templates / VoidFluidHandler . java b / src / main / java / net / minecraftforge / fluids / capability / templates / VoidFluidHandler . java 
 new file mode 100644 
 index 0000000 . . 3998967 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fluids / capability / templates / VoidFluidHandler . java 
 @ @ - 0 , 0 + 1 , 91 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fluids . capability . templates ; 
 + 
 + import net . minecraftforge . fluids . FluidStack ; 
 + import net . minecraftforge . fluids . FluidTankInfo ; 
 + import net . minecraftforge . fluids . IFluidTank ; 
 + import net . minecraftforge . fluids . capability . IFluidHandler ; 
 + import net . minecraftforge . fluids . capability . IFluidTankProperties ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + import static net . minecraftforge . fluids . capability . templates . EmptyFluidHandler . EMPTY _ TANK _ INFO ; 
 + import static net . minecraftforge . fluids . capability . templates . EmptyFluidHandler . EMPTY _ TANK _ PROPERTIES _ ARRAY ; 
 + 
 + / * * 
 + * VoidFluidHandler is a template fluid handler that can be filled indefinitely without ever getting full . 
 + * It does not store fluid that gets filled into it , but " destroys " it upon receiving it . 
 + * / 
 + public class VoidFluidHandler implements IFluidHandler , IFluidTank 
 + { 
 + public static final EmptyFluidHandler INSTANCE = new EmptyFluidHandler ( ) ; 
 + 
 + public VoidFluidHandler ( ) { } 
 + 
 + @ Override 
 + public IFluidTankProperties [ ] getTankProperties ( ) 
 + { 
 + return EMPTY _ TANK _ PROPERTIES _ ARRAY ; 
 + } 
 + 
 + @ Override 
 + @ Nullable 
 + public FluidStack getFluid ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public int getFluidAmount ( ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + @ Override 
 + public int getCapacity ( ) 
 + { 
 + return Integer . MAX _ VALUE ; 
 + } 
 + 
 + @ Override 
 + public FluidTankInfo getInfo ( ) 
 + { 
 + return EMPTY _ TANK _ INFO ; 
 + } 
 + 
 + @ Override 
 + public int fill ( FluidStack resource , boolean doFill ) 
 + { 
 + return resource . amount ; 
 + } 
 + 
 + @ Override 
 + public FluidStack drain ( FluidStack resource , boolean doDrain ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public FluidStack drain ( int maxDrain , boolean doDrain ) 
 + { 
 + return null ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockLiquidWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockLiquidWrapper . java 
 index 2fcd48e . . 7104c2e 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockLiquidWrapper . java 
 + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockLiquidWrapper . java 
 @ @ - 26 , 7 + 26 , 7 @ @ import net . minecraft . block . material . Material ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . init . Blocks ; 
 - import net . minecraft . item . ItemStack ; 
 + import net . minecraft . item . ItemBucket ; 
 import net . minecraft . util . EnumHand ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . world . World ; 
 @ @ - 39 , 7 + 39 , 7 @ @ import net . minecraftforge . fluids . capability . IFluidHandler ; 
 
 / * * 
 * Wrapper to handle vanilla Water or Lava as an IFluidHandler . 
 - * Methods are modeled after { @ link net . minecraft . item . ItemBucket # onItemRightClick ( ItemStack , World , EntityPlayer , EnumHand ) } 
 + * Methods are modeled after { @ link ItemBucket # onItemRightClick ( World , EntityPlayer , EnumHand ) } 
 * / 
 public class BlockLiquidWrapper implements IFluidHandler 
 { 
 @ @ - 69 , 7 + 69 , 20 @ @ public class BlockLiquidWrapper implements IFluidHandler 
 @ Override 
 public int fill ( FluidStack resource , boolean doFill ) 
 { 
 - return 0 ; 
 + / / NOTE : " Filling " means placement in this context ! 
 + if ( resource . amount < Fluid . BUCKET _ VOLUME ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + if ( doFill ) 
 + { 
 + Material material = blockLiquid . getDefaultState ( ) . getMaterial ( ) ; 
 + BlockLiquid block = BlockLiquid . getStaticBlock ( material ) ; 
 + world . setBlockState ( blockPos , block . getDefaultState ( ) . withProperty ( BlockLiquid . LEVEL , 0 ) , 11 ) ; 
 + } 
 + 
 + return Fluid . BUCKET _ VOLUME ; 
 } 
 
 @ Nullable 
 diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockWrapper . java 
 new file mode 100644 
 index 0000000 . . f7ce267 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / BlockWrapper . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fluids . capability . wrappers ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . fluids . Fluid ; 
 + import net . minecraftforge . fluids . FluidStack ; 
 + import net . minecraftforge . fluids . capability . templates . VoidFluidHandler ; 
 + 
 + / * * 
 + * Wrapper around any block , only accounts for fluid placement , otherwise the block acts a void . 
 + * If the block in question inherits from the default Vanilla or Forge implementations , 
 + * consider using { @ link BlockLiquidWrapper } or { @ link FluidBlockWrapper } respectively . 
 + * / 
 + public class BlockWrapper extends VoidFluidHandler 
 + { 
 + protected final Block block ; 
 + protected final World world ; 
 + protected final BlockPos blockPos ; 
 + 
 + public BlockWrapper ( Block block , World world , BlockPos blockPos ) 
 + { 
 + this . block = block ; 
 + this . world = world ; 
 + this . blockPos = blockPos ; 
 + } 
 + 
 + @ Override 
 + public int fill ( FluidStack resource , boolean doFill ) 
 + { 
 + / / NOTE : " Filling " means placement in this context ! 
 + if ( resource . amount < Fluid . BUCKET _ VOLUME ) 
 + { 
 + return 0 ; 
 + } 
 + if ( doFill ) 
 + { 
 + world . setBlockState ( blockPos , block . getDefaultState ( ) , 11 ) ; 
 + } 
 + return Fluid . BUCKET _ VOLUME ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBlockWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBlockWrapper . java 
 index ef8e403 . . 67a8bdc 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBlockWrapper . java 
 + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBlockWrapper . java 
 @ @ - 62 , 7 + 62 , 12 @ @ public class FluidBlockWrapper implements IFluidHandler 
 @ Override 
 public int fill ( FluidStack resource , boolean doFill ) 
 { 
 - return 0 ; 
 + / / NOTE : " Filling " means placement in this context ! 
 + if ( resource = = null ) 
 + { 
 + return 0 ; 
 + } 
 + return fluidBlock . place ( world , blockPos , resource , doFill ) ; 
 } 
 
 @ Nullable 
 diff - - git a / src / test / java / net / minecraftforge / debug / FluidPlacementTest . java b / src / test / java / net / minecraftforge / debug / FluidPlacementTest . java 
 new file mode 100644 
 index 0000000 . . 3d0b3d2 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / FluidPlacementTest . java 
 @ @ - 0 , 0 + 1 , 270 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . renderer . ItemMeshDefinition ; 
 + import net . minecraft . client . renderer . block . model . ModelBakery ; 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . client . renderer . block . statemap . StateMapperBase ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . init . Blocks ; 
 + import net . minecraft . item . * ; 
 + import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . util . NonNullList ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . common . capabilities . ICapabilityProvider ; 
 + import net . minecraftforge . fluids . * ; 
 + import net . minecraftforge . fluids . capability . templates . FluidHandlerItemStack ; 
 + import net . minecraftforge . fluids . capability . wrappers . FluidBucketWrapper ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . SidedProxy ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + import net . minecraftforge . fml . relauncher . SideOnly ; 
 + 
 + import javax . annotation . Nonnull ; 
 + import javax . annotation . Nullable ; 
 + import java . util . List ; 
 + 
 + import static net . minecraftforge . fluids . capability . templates . FluidHandlerItemStack . FLUID _ NBT _ KEY ; 
 + 
 + @ Mod ( modid = FluidPlacementTest . MODID , name = " ForgeDebugFluidPlacement " , version = FluidPlacementTest . VERSION ) 
 + public class FluidPlacementTest 
 + { 
 + public static final String MODID = " forgedebugfluidplacement " ; 
 + public static final String VERSION = " 1 . 0 " ; 
 + 
 + public static final boolean ENABLE = true ; 
 + 
 + @ SidedProxy 
 + public static CommonProxy proxy ; 
 + 
 + @ EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + if ( ENABLE & & ModelFluidDebug . ENABLE ) 
 + { 
 + proxy . preInit ( event ) ; 
 + } 
 + } 
 + 
 + public static class CommonProxy 
 + { 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + FluidRegistry . registerFluid ( FiniteFluid . instance ) ; 
 + FluidRegistry . addBucketForFluid ( FiniteFluid . instance ) ; 
 + GameRegistry . register ( EmptyFluidContainer . instance ) ; 
 + GameRegistry . register ( FluidContainer . instance ) ; 
 + GameRegistry . register ( FiniteFluidBlock . instance ) ; 
 + GameRegistry . register ( new ItemBlock ( FiniteFluidBlock . instance ) . setRegistryName ( FiniteFluidBlock . instance . getRegistryName ( ) ) ) ; 
 + MinecraftForge . EVENT _ BUS . register ( FluidContainer . instance ) ; 
 + } 
 + } 
 + 
 + public static class ServerProxy extends CommonProxy 
 + { 
 + } 
 + 
 + public static class ClientProxy extends CommonProxy 
 + { 
 + private static ModelResourceLocation fluidLocation = new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + FiniteFluidBlock . name , " normal " ) ; 
 + 
 + @ Override 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + super . preInit ( event ) ; 
 + Item fluid = Item . getItemFromBlock ( FiniteFluidBlock . instance ) ; 
 + ModelLoader . setCustomModelResourceLocation ( EmptyFluidContainer . instance , 0 , new ModelResourceLocation ( " forge : bucket " , " inventory " ) ) ; 
 + ModelLoader . setBucketModelDefinition ( FluidContainer . instance ) ; 
 + / / no need to pass the locations here , since they ' ll be loaded by the block model logic . 
 + ModelBakery . registerItemVariants ( fluid ) ; 
 + ModelLoader . setCustomMeshDefinition ( fluid , new ItemMeshDefinition ( ) 
 + { 
 + public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 + { 
 + return fluidLocation ; 
 + } 
 + } ) ; 
 + ModelLoader . setCustomStateMapper ( FiniteFluidBlock . instance , new StateMapperBase ( ) 
 + { 
 + protected ModelResourceLocation getModelResourceLocation ( IBlockState state ) 
 + { 
 + return fluidLocation ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + 
 + public static final class FiniteFluid extends Fluid 
 + { 
 + public static final String name = " finitefluid " ; 
 + public static final FiniteFluid instance = new FiniteFluid ( ) ; 
 + 
 + private FiniteFluid ( ) 
 + { 
 + super ( name , new ResourceLocation ( " blocks / water _ still " ) , new ResourceLocation ( " blocks / water _ flow " ) ) ; 
 + } 
 + 
 + @ Override 
 + public int getColor ( ) 
 + { 
 + return 0xFFFFFF00 ; 
 + } 
 + 
 + @ Override 
 + public String getLocalizedName ( FluidStack stack ) 
 + { 
 + return " Finite Fluid " ; 
 + } 
 + } 
 + 
 + public static final class FiniteFluidBlock extends BlockFluidFinite 
 + { 
 + public static final FiniteFluidBlock instance = new FiniteFluidBlock ( ) ; 
 + public static final String name = " finite _ fluid _ block " ; 
 + 
 + private FiniteFluidBlock ( ) 
 + { 
 + super ( FiniteFluid . instance , Material . WATER ) ; 
 + setCreativeTab ( CreativeTabs . BUILDING _ BLOCKS ) ; 
 + setUnlocalizedName ( MODID + " : " + name ) ; 
 + setRegistryName ( MODID , name ) ; 
 + } 
 + } 
 + 
 + public static final class EmptyFluidContainer extends ItemBucket 
 + { 
 + public static final EmptyFluidContainer instance = new EmptyFluidContainer ( ) ; 
 + public static final String name = " empty _ fluid _ container " ; 
 + 
 + private EmptyFluidContainer ( ) 
 + { 
 + super ( Blocks . AIR ) ; 
 + setRegistryName ( MODID , name ) ; 
 + setUnlocalizedName ( MODID + " : " + name ) ; 
 + setMaxStackSize ( 16 ) ; 
 + } 
 + 
 + @ Override 
 + public ICapabilityProvider initCapabilities ( ItemStack stack , @ Nullable NBTTagCompound nbt ) 
 + { 
 + return new EmptyContainerHandler ( stack ) ; 
 + } 
 + 
 + private static final class EmptyContainerHandler extends FluidBucketWrapper 
 + { 
 + public EmptyContainerHandler ( @ Nonnull ItemStack container ) 
 + { 
 + super ( container ) ; 
 + } 
 + 
 + @ Override 
 + public int fill ( FluidStack resource , boolean doFill ) 
 + { 
 + if ( container . func _ 190916 _ E ( ) ! = 1 | | resource = = null | | resource . amount > Fluid . BUCKET _ VOLUME | | container 
 + . getItem ( ) instanceof ItemBucketMilk | | getFluid ( ) ! = null | | ! canFillFluidType ( resource ) ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + if ( doFill ) 
 + { 
 + container = new ItemStack ( FluidContainer . instance ) ; 
 + NBTTagCompound tag = new NBTTagCompound ( ) ; 
 + NBTTagCompound fluidTag = new NBTTagCompound ( ) ; 
 + resource . writeToNBT ( fluidTag ) ; 
 + tag . setTag ( FLUID _ NBT _ KEY , fluidTag ) ; 
 + container . setTagCompound ( tag ) ; 
 + } 
 + 
 + return resource . amount ; 
 + } 
 + } 
 + } 
 + 
 + public static final class FluidContainer extends UniversalBucket 
 + { 
 + public static final FluidContainer instance = new FluidContainer ( ) ; 
 + public static final String name = " fluid _ container " ; 
 + 
 + private FluidContainer ( ) 
 + { 
 + super ( 1000 , new ItemStack ( EmptyFluidContainer . instance ) , false ) ; 
 + setCreativeTab ( CreativeTabs . MISC ) ; 
 + setRegistryName ( MODID , name ) ; 
 + setUnlocalizedName ( MODID + " : " + name ) ; 
 + } 
 + 
 + @ Nonnull 
 + @ Override 
 + public String getItemStackDisplayName ( @ Nonnull ItemStack stack ) 
 + { 
 + FluidStack fluid = getFluid ( stack ) ; 
 + if ( fluid = = null | | fluid . getFluid ( ) = = null ) 
 + { 
 + return " Empty Variable Container " ; 
 + } 
 + return " Variable Container ( " + getFluid ( stack ) . getLocalizedName ( ) + " ) " ; 
 + } 
 + 
 + @ Override 
 + public FluidStack getFluid ( ItemStack container ) 
 + { 
 + container = container . copy ( ) ; 
 + if ( container . getTagCompound ( ) ! = null ) 
 + container . setTagCompound ( container . getTagCompound ( ) . getCompoundTag ( FLUID _ NBT _ KEY ) ) ; 
 + return super . getFluid ( container ) ; 
 + } 
 + 
 + @ Override 
 + @ SideOnly ( Side . CLIENT ) 
 + public void addInformation ( ItemStack stack , EntityPlayer playerIn , List < String > tooltip , boolean advanced ) 
 + { 
 + FluidStack fluid = getFluid ( stack ) ; 
 + if ( fluid ! = null ) 
 + { 
 + tooltip . add ( fluid . amount + " / 1000 " ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void getSubItems ( @ Nonnull Item itemIn , @ Nonnull CreativeTabs tab , @ Nonnull NonNullList < ItemStack > subItems ) 
 + { 
 + Fluid [ ] fluids = new Fluid [ ] { FluidRegistry . WATER , FluidRegistry . LAVA , FiniteFluid . instance , ModelFluidDebug . TestFluid . instance } ; 
 + / / add 16 variable fillings 
 + for ( Fluid fluid : fluids ) 
 + { 
 + for ( int amount = 125 ; amount < = 1000 ; amount + = 125 ) 
 + { 
 + for ( int offset = 63 ; offset > = 0 ; offset - = 63 ) 
 + { 
 + FluidStack fs = new FluidStack ( fluid , amount - offset ) ; 
 + ItemStack stack = new ItemStack ( this ) ; 
 + NBTTagCompound tag = stack . getTagCompound ( ) ; 
 + if ( tag = = null ) 
 + { 
 + tag = new NBTTagCompound ( ) ; 
 + } 
 + NBTTagCompound fluidTag = new NBTTagCompound ( ) ; 
 + fs . writeToNBT ( fluidTag ) ; 
 + tag . setTag ( FLUID _ NBT _ KEY , fluidTag ) ; 
 + stack . setTagCompound ( tag ) ; 
 + subItems . add ( stack ) ; 
 + } 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public ICapabilityProvider initCapabilities ( ItemStack stack , NBTTagCompound nbt ) 
 + { 
 + return new FluidHandlerItemStack . SwapEmpty ( stack , new ItemStack ( EmptyFluidContainer . instance ) , 1000 ) ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / test / resources / assets / forgedebugfluidplacement / blockstates / finite _ fluid _ block . json b / src / test / resources / assets / forgedebugfluidplacement / blockstates / finite _ fluid _ block . json 
 new file mode 100644 
 index 0000000 . . 53cc9dd 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugfluidplacement / blockstates / finite _ fluid _ block . json 
 @ @ - 0 , 0 + 1 , 16 @ @ 
 + { 
 + " forge _ marker " : 1 , 
 + " defaults " : { 
 + " model " : " forge : fluid " , 
 + " transform " : " forge : default - item " 
 + } , 
 + " variants " : { 
 + " normal " : [ 
 + { 
 + " custom " : { 
 + " fluid " : " finitefluid " 
 + } 
 + } 
 + ] 
 + } 
 + } 
 \ No newline at end of file
