BLEU SCORE: 0.044568827606990644

TEST MSG: Clean up old code for detecting BaseMods . Close # 4530
GENERATED MSG: Add support for mod access transformers without a coremod requirement .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java b / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java <nl> index a0181a2 . . c6a7fa0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import javax . annotation . Nullable ; <nl> public class ModContainerFactory <nl> { <nl> public static Map < Type , Constructor < ? extends ModContainer > > modTypes = Maps . newHashMap ( ) ; <nl> - private static Pattern modClass = Pattern . compile ( " . * ( \ \ . | ) ( mod \ \ _ [ ^ \ \ s $ ] + ) $ " ) ; <nl> private static ModContainerFactory INSTANCE = new ModContainerFactory ( ) ; <nl> <nl> private ModContainerFactory ( ) { <nl> @ @ - 65 , 22 + 64 , 6 @ @ public class ModContainerFactory <nl> public ModContainer build ( ASMModParser modParser , File modSource , ModCandidate container ) <nl> { <nl> String className = modParser . getASMType ( ) . getClassName ( ) ; <nl> - if ( modParser . isBaseMod ( container . getRememberedBaseMods ( ) ) & & modClass . matcher ( className ) . find ( ) ) <nl> - { <nl> - FMLLog . log . fatal ( " Found a BaseMod type mod { } " , className ) ; <nl> - FMLLog . log . fatal ( " This will not be loaded and will be ignored . ModLoader mechanisms are no longer available . " ) ; <nl> - } <nl> - else if ( modClass . matcher ( className ) . find ( ) ) <nl> - { <nl> - FMLLog . log . debug ( " Identified a class { } following modloader naming convention but not directly a BaseMod or currently seen subclass " , className ) ; <nl> - container . rememberModCandidateType ( modParser ) ; <nl> - } <nl> - else if ( modParser . isBaseMod ( container . getRememberedBaseMods ( ) ) ) <nl> - { <nl> - FMLLog . log . debug ( " Found a basemod { } of non - standard naming format " , className ) ; <nl> - container . rememberBaseModType ( className ) ; <nl> - } <nl> - <nl> for ( ModAnnotation ann : modParser . getAnnotations ( ) ) <nl> { <nl> if ( modTypes . containsKey ( ann . getASMType ( ) ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ModCandidate . java b / src / main / java / net / minecraftforge / fml / common / discovery / ModCandidate . java <nl> index 2e89e92 . . 7f31c29 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ModCandidate . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ModCandidate . java <nl> @ @ - 23 , 9 + 23 , 7 @ @ import java . io . File ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> - import net . minecraftforge . fml . common . discovery . asm . ASMModParser ; <nl> <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Sets ; <nl> @ @ - 37 , 9 + 35 , 7 @ @ public class ModCandidate <nl> private File modContainer ; <nl> private ContainerType sourceType ; <nl> private boolean classpath ; <nl> - private List < String > baseModTypes = Lists . newArrayList ( ) ; <nl> private boolean isMinecraft ; <nl> - private List < ASMModParser > baseModCandidateTypes = Lists . newArrayListWithCapacity ( 1 ) ; <nl> private Set < String > foundClasses = Sets . newHashSet ( ) ; <nl> private List < ModContainer > mods ; <nl> private List < String > packages = Lists . newArrayList ( ) ; <nl> @ @ - 76 , 11 + 72 , 6 @ @ public class ModCandidate <nl> { <nl> this . table = table ; <nl> this . mods = sourceType . findMods ( this , table ) ; <nl> - if ( ! baseModCandidateTypes . isEmpty ( ) ) <nl> - { <nl> - FMLLog . log . info ( " Attempting to reparse the mod container { } " , getModContainer ( ) . getName ( ) ) ; <nl> - this . mods = sourceType . findMods ( this , table ) ; <nl> - } <nl> return this . mods ; <nl> } <nl> <nl> @ @ - 102 , 22 + 93 , 10 @ @ public class ModCandidate <nl> { <nl> return classpath ; <nl> } <nl> - public void rememberBaseModType ( String className ) <nl> - { <nl> - baseModTypes . add ( className ) ; <nl> - } <nl> - public List < String > getRememberedBaseMods ( ) <nl> - { <nl> - return baseModTypes ; <nl> - } <nl> public boolean isMinecraftJar ( ) <nl> { <nl> return isMinecraft ; <nl> } <nl> - public void rememberModCandidateType ( ASMModParser modParser ) <nl> - { <nl> - baseModCandidateTypes . add ( modParser ) ; <nl> - } <nl> public Set < String > getClassList ( ) <nl> { <nl> return foundClasses ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> index 8385a50 . . 442d393 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> @ @ - 21 , 9 + 21 , 7 @ @ package net . minecraftforge . fml . common . discovery . asm ; <nl> <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> - import java . util . Collections ; <nl> import java . util . LinkedList ; <nl> - import java . util . List ; <nl> import java . util . Set ; <nl> <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> @ @ - 31 , 25 + 29 , 21 @ @ import net . minecraftforge . fml . common . LoaderException ; <nl> import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> import net . minecraftforge . fml . common . discovery . ModCandidate ; <nl> <nl> - import org . apache . logging . log4j . Level ; <nl> import org . objectweb . asm . ClassReader ; <nl> import org . objectweb . asm . Type ; <nl> <nl> import com . google . common . base . MoreObjects ; <nl> - import com . google . common . base . Objects ; <nl> import com . google . common . base . Strings ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Sets ; <nl> <nl> public class ASMModParser <nl> { <nl> - <nl> private Type asmType ; <nl> private int classVersion ; <nl> private Type asmSuperType ; <nl> private LinkedList < ModAnnotation > annotations = Lists . newLinkedList ( ) ; <nl> private Set < String > interfaces = Sets . newHashSet ( ) ; <nl> - private String baseModProperties ; <nl> <nl> static enum AnnotationType <nl> { <nl> @ @ - 104 , 8 + 98 , 6 @ @ public class ASMModParser <nl> . add ( " classVersion " , classVersion ) <nl> . add ( " superName " , asmSuperType . getClassName ( ) ) <nl> . add ( " annotations " , annotations ) <nl> - . add ( " isBaseMod " , isBaseMod ( Collections . < String > emptyList ( ) ) ) <nl> - . add ( " baseModProperties " , baseModProperties ) <nl> . toString ( ) ; <nl> } <nl> <nl> @ @ - 134 , 21 + 126 , 6 @ @ public class ASMModParser <nl> <nl> } <nl> <nl> - public boolean isBaseMod ( List < String > rememberedTypes ) <nl> - { <nl> - return getASMSuperType ( ) . equals ( Type . getType ( " LBaseMod ; " ) ) | | getASMSuperType ( ) . equals ( Type . getType ( " Lnet / minecraft / src / BaseMod ; " ) ) | | rememberedTypes . contains ( getASMSuperType ( ) . getClassName ( ) ) ; <nl> - } <nl> - <nl> - public void setBaseModProperties ( String foundProperties ) <nl> - { <nl> - this . baseModProperties = foundProperties ; <nl> - } <nl> - <nl> - public String getBaseModProperties ( ) <nl> - { <nl> - return this . baseModProperties ; <nl> - } <nl> - <nl> public void sendToTable ( ASMDataTable table , ModCandidate candidate ) <nl> { <nl> for ( ModAnnotation ma : annotations )
NEAREST DIFF (one line): diff - - git a / fml / jsons / 1 . 7 . 10 - pre4 . json b / fml / jsons / 1 . 7 . 10 - pre4 . json <nl> index e74b924 . . effba14 100644 <nl> - - - a / fml / jsons / 1 . 7 . 10 - pre4 . json <nl> + + + b / fml / jsons / 1 . 7 . 10 - pre4 . json <nl> @ @ - 8 , 7 + 8 , 7 @ @ <nl> " assets " : " 1 . 7 . 10 " , <nl> " libraries " : [ <nl> { <nl> - " name " : " com . mojang : realms : 1 . 2 . 3 " <nl> + " name " : " com . mojang : realms : 1 . 2 . 4 " <nl> } , <nl> { <nl> " name " : " org . apache . commons : commons - compress : 1 . 8 . 1 " <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / AccessTransformer . java b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / AccessTransformer . java <nl> index 76120c1 . . 65319be 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / AccessTransformer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / AccessTransformer . java <nl> @ @ - 27 , 10 + 27 , 14 @ @ import java . io . FileInputStream ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . net . URL ; <nl> import java . util . Collection ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> + import java . util . jar . JarEntry ; <nl> + import java . util . jar . JarFile ; <nl> + import java . util . jar . Manifest ; <nl> import java . util . zip . ZipEntry ; <nl> import java . util . zip . ZipInputStream ; <nl> import java . util . zip . ZipOutputStream ; <nl> @ @ - 51 , 6 + 55 , 8 @ @ import com . google . common . collect . ArrayListMultimap ; <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Multimap ; <nl> + import com . google . common . io . ByteSource ; <nl> + import com . google . common . io . CharSource ; <nl> import com . google . common . io . LineProcessor ; <nl> import com . google . common . io . Resources ; <nl> <nl> @ @ - 59 , 7 + 65 , 7 @ @ import cpw . mods . fml . relauncher . FMLRelaunchLog ; <nl> public class AccessTransformer implements IClassTransformer <nl> { <nl> private static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugAccessTransformer " , " false " ) ) ; <nl> - private class Modifier <nl> + class Modifier <nl> { <nl> public String name = " " ; <nl> public String desc = " " ; <nl> @ @ - 100 , 7 + 106 , 41 @ @ public class AccessTransformer implements IClassTransformer <nl> readMapFile ( rulesFile ) ; <nl> } <nl> <nl> - private void readMapFile ( String rulesFile ) throws IOException <nl> + AccessTransformer ( JarFile jar ) throws IOException <nl> + { <nl> + Manifest manifest = jar . getManifest ( ) ; <nl> + String atList = manifest . getMainAttributes ( ) . getValue ( " FMLAT " ) ; <nl> + for ( String at : atList . split ( " " ) ) <nl> + { <nl> + JarEntry jarEntry = jar . getJarEntry ( " META - INF / " + at ) ; <nl> + if ( jarEntry ! = null ) <nl> + { <nl> + processATFile ( new JarByteSource ( jar , jarEntry ) . asCharSource ( Charsets . UTF _ 8 ) ) ; <nl> + } <nl> + } <nl> + FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer mod jar file % s \ n " , modifiers . size ( ) , jar . getName ( ) ) ; <nl> + } <nl> + <nl> + AccessTransformer ( Class < ? extends AccessTransformer > dummyClazz ) <nl> + { <nl> + / / This is a noop <nl> + } <nl> + private class JarByteSource extends ByteSource { <nl> + private JarFile jar ; <nl> + private JarEntry entry ; <nl> + public JarByteSource ( JarFile jar , JarEntry entry ) <nl> + { <nl> + this . jar = jar ; <nl> + this . entry = entry ; <nl> + } <nl> + @ Override <nl> + public InputStream openStream ( ) throws IOException <nl> + { <nl> + return jar . getInputStream ( entry ) ; <nl> + } <nl> + <nl> + } <nl> + void readMapFile ( String rulesFile ) throws IOException <nl> { <nl> File file = new File ( rulesFile ) ; <nl> URL rulesResource ; <nl> @ @ - 112 , 7 + 152 , 12 @ @ public class AccessTransformer implements IClassTransformer <nl> { <nl> rulesResource = Resources . getResource ( rulesFile ) ; <nl> } <nl> - Resources . readLines ( rulesResource , Charsets . UTF _ 8 , new LineProcessor < Void > ( ) <nl> + processATFile ( Resources . asCharSource ( rulesResource , Charsets . UTF _ 8 ) ) ; <nl> + FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer config file % s \ n " , modifiers . size ( ) , rulesFile ) ; <nl> + } <nl> + private void processATFile ( CharSource rulesResource ) throws IOException <nl> + { <nl> + rulesResource . readLines ( new LineProcessor < Void > ( ) <nl> { <nl> @ Override <nl> public Void getResult ( ) <nl> @ @ - 160 , 7 + 205 , 6 @ @ public class AccessTransformer implements IClassTransformer <nl> return true ; <nl> } <nl> } ) ; <nl> - FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer config file % s \ n " , modifiers . size ( ) , rulesFile ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 217 , 7 + 261 , 7 @ @ public class AccessTransformer implements IClassTransformer <nl> if ( ( n . name . equals ( m . name ) & & n . desc . equals ( m . desc ) ) | | m . name . equals ( " * " ) ) <nl> { <nl> n . access = getFixedAccess ( n . access , m ) ; <nl> - <nl> + <nl> / / constructors always use INVOKESPECIAL <nl> if ( ! n . name . equals ( " < init > " ) ) <nl> { <nl> @ @ - 225 , 14 + 269 , 14 @ @ public class AccessTransformer implements IClassTransformer <nl> / / so that overridden methods will be called . Only need to scan this class , because obviously the method was private . <nl> boolean wasPrivate = ( m . oldAccess & ACC _ PRIVATE ) = = ACC _ PRIVATE ; <nl> boolean isNowPrivate = ( m . newAccess & ACC _ PRIVATE ) = = ACC _ PRIVATE ; <nl> - <nl> + <nl> if ( wasPrivate & & ! isNowPrivate ) <nl> { <nl> nowOverridable . add ( n ) ; <nl> } <nl> - <nl> + <nl> } <nl> - <nl> + <nl> if ( DEBUG ) <nl> { <nl> System . out . println ( String . format ( " Method : % s . % s % s % s - > % s " , name , n . name , n . desc , toBinary ( m . oldAccess ) , toBinary ( m . newAccess ) ) ) ; <nl> @ @ - 244 , 7 + 288 , 7 @ @ public class AccessTransformer implements IClassTransformer <nl> } <nl> } <nl> } <nl> - <nl> + <nl> replaceInvokeSpecial ( classNode , nowOverridable ) ; <nl> } <nl> } <nl> @ @ - 253 , 7 + 297 , 7 @ @ public class AccessTransformer implements IClassTransformer <nl> classNode . accept ( writer ) ; <nl> return writer . toByteArray ( ) ; <nl> } <nl> - <nl> + <nl> private void replaceInvokeSpecial ( ClassNode clazz , List < MethodNode > toReplace ) <nl> { <nl> for ( MethodNode method : clazz . methods ) <nl> @ @ - 477 , 4 + 521 , 12 @ @ public class AccessTransformer implements IClassTransformer <nl> } <nl> } <nl> } <nl> + Multimap < String , Modifier > getModifiers ( ) <nl> + { <nl> + return modifiers ; <nl> + } <nl> + boolean isEmpty ( ) <nl> + { <nl> + return modifiers . isEmpty ( ) ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAccessTransformer . java b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAccessTransformer . java <nl> new file mode 100644 <nl> index 0000000 . . a98d624 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAccessTransformer . java <nl> @ @ - 0 , 0 + 1 , 34 @ @ <nl> + package cpw . mods . fml . common . asm . transformers ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . util . List ; <nl> + import java . util . jar . JarFile ; <nl> + import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Multimap ; <nl> + <nl> + public class ModAccessTransformer extends AccessTransformer { <nl> + private static List < AccessTransformer > embedded = Lists . newArrayList ( ) ; <nl> + public ModAccessTransformer ( ) throws IOException <nl> + { <nl> + super ( ModAccessTransformer . class ) ; <nl> + for ( AccessTransformer at : embedded ) <nl> + { <nl> + mergeModifiers ( at . getModifiers ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + private void mergeModifiers ( Multimap < String , Modifier > modifiers ) <nl> + { <nl> + getModifiers ( ) . putAll ( modifiers ) ; <nl> + } <nl> + <nl> + public static void addJar ( JarFile jar ) throws IOException <nl> + { <nl> + AccessTransformer at = new AccessTransformer ( jar ) ; <nl> + if ( ! at . isEmpty ( ) ) <nl> + { <nl> + embedded . add ( at ) ; <nl> + } <nl> + } <nl> + <nl> + } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java <nl> index c5e6be9 . . 12b18a3 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ public class FMLDeobfTweaker implements ITweaker { <nl> { <nl> classLoader . registerTransformer ( transformer ) ; <nl> } <nl> + classLoader . registerTransformer ( " cpw . mods . fml . common . asm . transformers . ModAccessTransformer " ) ; <nl> try <nl> { <nl> FMLRelaunchLog . fine ( " Validating minecraft " ) ; <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java b / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java <nl> index 42c0b69 . . 2a7d6b6 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java <nl> @ @ - 28 , 21 + 28 , 18 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . jar . Attributes ; <nl> import java . util . jar . JarFile ; <nl> - <nl> - import org . apache . logging . log4j . Level ; <nl> - <nl> import net . minecraft . launchwrapper . ITweaker ; <nl> import net . minecraft . launchwrapper . Launch ; <nl> import net . minecraft . launchwrapper . LaunchClassLoader ; <nl> - <nl> + import org . apache . logging . log4j . Level ; <nl> import com . google . common . base . Strings ; <nl> import com . google . common . base . Throwables ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . ObjectArrays ; <nl> import com . google . common . primitives . Ints ; <nl> - <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . asm . transformers . ModAccessTransformer ; <nl> import cpw . mods . fml . common . launcher . FMLInjectionAndSortingTweaker ; <nl> import cpw . mods . fml . common . launcher . FMLTweaker ; <nl> import cpw . mods . fml . common . toposort . TopologicalSort ; <nl> @ @ - 249 , 6 + 246 , 7 @ @ public class CoreModManager { <nl> / / Not a coremod <nl> continue ; <nl> } <nl> + ModAccessTransformer . addJar ( jar ) ; <nl> mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; <nl> } <nl> catch ( IOException ioe )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java b / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java 
 index a0181a2 . . c6a7fa0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import javax . annotation . Nullable ; 
 public class ModContainerFactory 
 { 
 public static Map < Type , Constructor < ? extends ModContainer > > modTypes = Maps . newHashMap ( ) ; 
 - private static Pattern modClass = Pattern . compile ( " . * ( \ \ . | ) ( mod \ \ _ [ ^ \ \ s $ ] + ) $ " ) ; 
 private static ModContainerFactory INSTANCE = new ModContainerFactory ( ) ; 
 
 private ModContainerFactory ( ) { 
 @ @ - 65 , 22 + 64 , 6 @ @ public class ModContainerFactory 
 public ModContainer build ( ASMModParser modParser , File modSource , ModCandidate container ) 
 { 
 String className = modParser . getASMType ( ) . getClassName ( ) ; 
 - if ( modParser . isBaseMod ( container . getRememberedBaseMods ( ) ) & & modClass . matcher ( className ) . find ( ) ) 
 - { 
 - FMLLog . log . fatal ( " Found a BaseMod type mod { } " , className ) ; 
 - FMLLog . log . fatal ( " This will not be loaded and will be ignored . ModLoader mechanisms are no longer available . " ) ; 
 - } 
 - else if ( modClass . matcher ( className ) . find ( ) ) 
 - { 
 - FMLLog . log . debug ( " Identified a class { } following modloader naming convention but not directly a BaseMod or currently seen subclass " , className ) ; 
 - container . rememberModCandidateType ( modParser ) ; 
 - } 
 - else if ( modParser . isBaseMod ( container . getRememberedBaseMods ( ) ) ) 
 - { 
 - FMLLog . log . debug ( " Found a basemod { } of non - standard naming format " , className ) ; 
 - container . rememberBaseModType ( className ) ; 
 - } 
 - 
 for ( ModAnnotation ann : modParser . getAnnotations ( ) ) 
 { 
 if ( modTypes . containsKey ( ann . getASMType ( ) ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ModCandidate . java b / src / main / java / net / minecraftforge / fml / common / discovery / ModCandidate . java 
 index 2e89e92 . . 7f31c29 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ModCandidate . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ModCandidate . java 
 @ @ - 23 , 9 + 23 , 7 @ @ import java . io . File ; 
 import java . util . List ; 
 import java . util . Set ; 
 
 - import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 - import net . minecraftforge . fml . common . discovery . asm . ASMModParser ; 
 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Sets ; 
 @ @ - 37 , 9 + 35 , 7 @ @ public class ModCandidate 
 private File modContainer ; 
 private ContainerType sourceType ; 
 private boolean classpath ; 
 - private List < String > baseModTypes = Lists . newArrayList ( ) ; 
 private boolean isMinecraft ; 
 - private List < ASMModParser > baseModCandidateTypes = Lists . newArrayListWithCapacity ( 1 ) ; 
 private Set < String > foundClasses = Sets . newHashSet ( ) ; 
 private List < ModContainer > mods ; 
 private List < String > packages = Lists . newArrayList ( ) ; 
 @ @ - 76 , 11 + 72 , 6 @ @ public class ModCandidate 
 { 
 this . table = table ; 
 this . mods = sourceType . findMods ( this , table ) ; 
 - if ( ! baseModCandidateTypes . isEmpty ( ) ) 
 - { 
 - FMLLog . log . info ( " Attempting to reparse the mod container { } " , getModContainer ( ) . getName ( ) ) ; 
 - this . mods = sourceType . findMods ( this , table ) ; 
 - } 
 return this . mods ; 
 } 
 
 @ @ - 102 , 22 + 93 , 10 @ @ public class ModCandidate 
 { 
 return classpath ; 
 } 
 - public void rememberBaseModType ( String className ) 
 - { 
 - baseModTypes . add ( className ) ; 
 - } 
 - public List < String > getRememberedBaseMods ( ) 
 - { 
 - return baseModTypes ; 
 - } 
 public boolean isMinecraftJar ( ) 
 { 
 return isMinecraft ; 
 } 
 - public void rememberModCandidateType ( ASMModParser modParser ) 
 - { 
 - baseModCandidateTypes . add ( modParser ) ; 
 - } 
 public Set < String > getClassList ( ) 
 { 
 return foundClasses ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 index 8385a50 . . 442d393 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 @ @ - 21 , 9 + 21 , 7 @ @ package net . minecraftforge . fml . common . discovery . asm ; 
 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 - import java . util . Collections ; 
 import java . util . LinkedList ; 
 - import java . util . List ; 
 import java . util . Set ; 
 
 import net . minecraftforge . fml . common . FMLLog ; 
 @ @ - 31 , 25 + 29 , 21 @ @ import net . minecraftforge . fml . common . LoaderException ; 
 import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 import net . minecraftforge . fml . common . discovery . ModCandidate ; 
 
 - import org . apache . logging . log4j . Level ; 
 import org . objectweb . asm . ClassReader ; 
 import org . objectweb . asm . Type ; 
 
 import com . google . common . base . MoreObjects ; 
 - import com . google . common . base . Objects ; 
 import com . google . common . base . Strings ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Sets ; 
 
 public class ASMModParser 
 { 
 - 
 private Type asmType ; 
 private int classVersion ; 
 private Type asmSuperType ; 
 private LinkedList < ModAnnotation > annotations = Lists . newLinkedList ( ) ; 
 private Set < String > interfaces = Sets . newHashSet ( ) ; 
 - private String baseModProperties ; 
 
 static enum AnnotationType 
 { 
 @ @ - 104 , 8 + 98 , 6 @ @ public class ASMModParser 
 . add ( " classVersion " , classVersion ) 
 . add ( " superName " , asmSuperType . getClassName ( ) ) 
 . add ( " annotations " , annotations ) 
 - . add ( " isBaseMod " , isBaseMod ( Collections . < String > emptyList ( ) ) ) 
 - . add ( " baseModProperties " , baseModProperties ) 
 . toString ( ) ; 
 } 
 
 @ @ - 134 , 21 + 126 , 6 @ @ public class ASMModParser 
 
 } 
 
 - public boolean isBaseMod ( List < String > rememberedTypes ) 
 - { 
 - return getASMSuperType ( ) . equals ( Type . getType ( " LBaseMod ; " ) ) | | getASMSuperType ( ) . equals ( Type . getType ( " Lnet / minecraft / src / BaseMod ; " ) ) | | rememberedTypes . contains ( getASMSuperType ( ) . getClassName ( ) ) ; 
 - } 
 - 
 - public void setBaseModProperties ( String foundProperties ) 
 - { 
 - this . baseModProperties = foundProperties ; 
 - } 
 - 
 - public String getBaseModProperties ( ) 
 - { 
 - return this . baseModProperties ; 
 - } 
 - 
 public void sendToTable ( ASMDataTable table , ModCandidate candidate ) 
 { 
 for ( ModAnnotation ma : annotations )

NEAREST DIFF:
diff - - git a / fml / jsons / 1 . 7 . 10 - pre4 . json b / fml / jsons / 1 . 7 . 10 - pre4 . json 
 index e74b924 . . effba14 100644 
 - - - a / fml / jsons / 1 . 7 . 10 - pre4 . json 
 + + + b / fml / jsons / 1 . 7 . 10 - pre4 . json 
 @ @ - 8 , 7 + 8 , 7 @ @ 
 " assets " : " 1 . 7 . 10 " , 
 " libraries " : [ 
 { 
 - " name " : " com . mojang : realms : 1 . 2 . 3 " 
 + " name " : " com . mojang : realms : 1 . 2 . 4 " 
 } , 
 { 
 " name " : " org . apache . commons : commons - compress : 1 . 8 . 1 " 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / AccessTransformer . java b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / AccessTransformer . java 
 index 76120c1 . . 65319be 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / AccessTransformer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / AccessTransformer . java 
 @ @ - 27 , 10 + 27 , 14 @ @ import java . io . FileInputStream ; 
 import java . io . FileNotFoundException ; 
 import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . net . URL ; 
 import java . util . Collection ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 + import java . util . jar . JarEntry ; 
 + import java . util . jar . JarFile ; 
 + import java . util . jar . Manifest ; 
 import java . util . zip . ZipEntry ; 
 import java . util . zip . ZipInputStream ; 
 import java . util . zip . ZipOutputStream ; 
 @ @ - 51 , 6 + 55 , 8 @ @ import com . google . common . collect . ArrayListMultimap ; 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Multimap ; 
 + import com . google . common . io . ByteSource ; 
 + import com . google . common . io . CharSource ; 
 import com . google . common . io . LineProcessor ; 
 import com . google . common . io . Resources ; 
 
 @ @ - 59 , 7 + 65 , 7 @ @ import cpw . mods . fml . relauncher . FMLRelaunchLog ; 
 public class AccessTransformer implements IClassTransformer 
 { 
 private static final boolean DEBUG = Boolean . parseBoolean ( System . getProperty ( " fml . debugAccessTransformer " , " false " ) ) ; 
 - private class Modifier 
 + class Modifier 
 { 
 public String name = " " ; 
 public String desc = " " ; 
 @ @ - 100 , 7 + 106 , 41 @ @ public class AccessTransformer implements IClassTransformer 
 readMapFile ( rulesFile ) ; 
 } 
 
 - private void readMapFile ( String rulesFile ) throws IOException 
 + AccessTransformer ( JarFile jar ) throws IOException 
 + { 
 + Manifest manifest = jar . getManifest ( ) ; 
 + String atList = manifest . getMainAttributes ( ) . getValue ( " FMLAT " ) ; 
 + for ( String at : atList . split ( " " ) ) 
 + { 
 + JarEntry jarEntry = jar . getJarEntry ( " META - INF / " + at ) ; 
 + if ( jarEntry ! = null ) 
 + { 
 + processATFile ( new JarByteSource ( jar , jarEntry ) . asCharSource ( Charsets . UTF _ 8 ) ) ; 
 + } 
 + } 
 + FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer mod jar file % s \ n " , modifiers . size ( ) , jar . getName ( ) ) ; 
 + } 
 + 
 + AccessTransformer ( Class < ? extends AccessTransformer > dummyClazz ) 
 + { 
 + / / This is a noop 
 + } 
 + private class JarByteSource extends ByteSource { 
 + private JarFile jar ; 
 + private JarEntry entry ; 
 + public JarByteSource ( JarFile jar , JarEntry entry ) 
 + { 
 + this . jar = jar ; 
 + this . entry = entry ; 
 + } 
 + @ Override 
 + public InputStream openStream ( ) throws IOException 
 + { 
 + return jar . getInputStream ( entry ) ; 
 + } 
 + 
 + } 
 + void readMapFile ( String rulesFile ) throws IOException 
 { 
 File file = new File ( rulesFile ) ; 
 URL rulesResource ; 
 @ @ - 112 , 7 + 152 , 12 @ @ public class AccessTransformer implements IClassTransformer 
 { 
 rulesResource = Resources . getResource ( rulesFile ) ; 
 } 
 - Resources . readLines ( rulesResource , Charsets . UTF _ 8 , new LineProcessor < Void > ( ) 
 + processATFile ( Resources . asCharSource ( rulesResource , Charsets . UTF _ 8 ) ) ; 
 + FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer config file % s \ n " , modifiers . size ( ) , rulesFile ) ; 
 + } 
 + private void processATFile ( CharSource rulesResource ) throws IOException 
 + { 
 + rulesResource . readLines ( new LineProcessor < Void > ( ) 
 { 
 @ Override 
 public Void getResult ( ) 
 @ @ - 160 , 7 + 205 , 6 @ @ public class AccessTransformer implements IClassTransformer 
 return true ; 
 } 
 } ) ; 
 - FMLRelaunchLog . fine ( " Loaded % d rules from AccessTransformer config file % s \ n " , modifiers . size ( ) , rulesFile ) ; 
 } 
 
 @ Override 
 @ @ - 217 , 7 + 261 , 7 @ @ public class AccessTransformer implements IClassTransformer 
 if ( ( n . name . equals ( m . name ) & & n . desc . equals ( m . desc ) ) | | m . name . equals ( " * " ) ) 
 { 
 n . access = getFixedAccess ( n . access , m ) ; 
 - 
 + 
 / / constructors always use INVOKESPECIAL 
 if ( ! n . name . equals ( " < init > " ) ) 
 { 
 @ @ - 225 , 14 + 269 , 14 @ @ public class AccessTransformer implements IClassTransformer 
 / / so that overridden methods will be called . Only need to scan this class , because obviously the method was private . 
 boolean wasPrivate = ( m . oldAccess & ACC _ PRIVATE ) = = ACC _ PRIVATE ; 
 boolean isNowPrivate = ( m . newAccess & ACC _ PRIVATE ) = = ACC _ PRIVATE ; 
 - 
 + 
 if ( wasPrivate & & ! isNowPrivate ) 
 { 
 nowOverridable . add ( n ) ; 
 } 
 - 
 + 
 } 
 - 
 + 
 if ( DEBUG ) 
 { 
 System . out . println ( String . format ( " Method : % s . % s % s % s - > % s " , name , n . name , n . desc , toBinary ( m . oldAccess ) , toBinary ( m . newAccess ) ) ) ; 
 @ @ - 244 , 7 + 288 , 7 @ @ public class AccessTransformer implements IClassTransformer 
 } 
 } 
 } 
 - 
 + 
 replaceInvokeSpecial ( classNode , nowOverridable ) ; 
 } 
 } 
 @ @ - 253 , 7 + 297 , 7 @ @ public class AccessTransformer implements IClassTransformer 
 classNode . accept ( writer ) ; 
 return writer . toByteArray ( ) ; 
 } 
 - 
 + 
 private void replaceInvokeSpecial ( ClassNode clazz , List < MethodNode > toReplace ) 
 { 
 for ( MethodNode method : clazz . methods ) 
 @ @ - 477 , 4 + 521 , 12 @ @ public class AccessTransformer implements IClassTransformer 
 } 
 } 
 } 
 + Multimap < String , Modifier > getModifiers ( ) 
 + { 
 + return modifiers ; 
 + } 
 + boolean isEmpty ( ) 
 + { 
 + return modifiers . isEmpty ( ) ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAccessTransformer . java b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAccessTransformer . java 
 new file mode 100644 
 index 0000000 . . a98d624 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ModAccessTransformer . java 
 @ @ - 0 , 0 + 1 , 34 @ @ 
 + package cpw . mods . fml . common . asm . transformers ; 
 + 
 + import java . io . IOException ; 
 + import java . util . List ; 
 + import java . util . jar . JarFile ; 
 + import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Multimap ; 
 + 
 + public class ModAccessTransformer extends AccessTransformer { 
 + private static List < AccessTransformer > embedded = Lists . newArrayList ( ) ; 
 + public ModAccessTransformer ( ) throws IOException 
 + { 
 + super ( ModAccessTransformer . class ) ; 
 + for ( AccessTransformer at : embedded ) 
 + { 
 + mergeModifiers ( at . getModifiers ( ) ) ; 
 + } 
 + } 
 + 
 + private void mergeModifiers ( Multimap < String , Modifier > modifiers ) 
 + { 
 + getModifiers ( ) . putAll ( modifiers ) ; 
 + } 
 + 
 + public static void addJar ( JarFile jar ) throws IOException 
 + { 
 + AccessTransformer at = new AccessTransformer ( jar ) ; 
 + if ( ! at . isEmpty ( ) ) 
 + { 
 + embedded . add ( at ) ; 
 + } 
 + } 
 + 
 + } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java 
 index c5e6be9 . . 12b18a3 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java 
 @ @ - 31 , 6 + 31 , 7 @ @ public class FMLDeobfTweaker implements ITweaker { 
 { 
 classLoader . registerTransformer ( transformer ) ; 
 } 
 + classLoader . registerTransformer ( " cpw . mods . fml . common . asm . transformers . ModAccessTransformer " ) ; 
 try 
 { 
 FMLRelaunchLog . fine ( " Validating minecraft " ) ; 
 diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java b / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java 
 index 42c0b69 . . 2a7d6b6 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java 
 + + + b / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java 
 @ @ - 28 , 21 + 28 , 18 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . jar . Attributes ; 
 import java . util . jar . JarFile ; 
 - 
 - import org . apache . logging . log4j . Level ; 
 - 
 import net . minecraft . launchwrapper . ITweaker ; 
 import net . minecraft . launchwrapper . Launch ; 
 import net . minecraft . launchwrapper . LaunchClassLoader ; 
 - 
 + import org . apache . logging . log4j . Level ; 
 import com . google . common . base . Strings ; 
 import com . google . common . base . Throwables ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . ObjectArrays ; 
 import com . google . common . primitives . Ints ; 
 - 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . asm . transformers . ModAccessTransformer ; 
 import cpw . mods . fml . common . launcher . FMLInjectionAndSortingTweaker ; 
 import cpw . mods . fml . common . launcher . FMLTweaker ; 
 import cpw . mods . fml . common . toposort . TopologicalSort ; 
 @ @ - 249 , 6 + 246 , 7 @ @ public class CoreModManager { 
 / / Not a coremod 
 continue ; 
 } 
 + ModAccessTransformer . addJar ( jar ) ; 
 mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; 
 } 
 catch ( IOException ioe )
