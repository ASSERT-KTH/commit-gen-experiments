BLEU SCORE: 7.667982759693039E-4

TEST MSG: Coremod
GENERATED MSG: Introduce a new centralized version checking system .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / FMLConfig . java b / src / main / java / net / minecraftforge / fml / FMLConfig . java <nl> index ba9b33d . . 19fc613 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / FMLConfig . java <nl> + + + b / src / main / java / net / minecraftforge / fml / FMLConfig . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . nio . file . Path ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class FMLConfig <nl> @ @ - 78 , 7 + 79 , 7 @ @ public class FMLConfig <nl> } <nl> catch ( IOException ioe ) <nl> { <nl> - fmlLog . error ( " Unable to read FML config at { } " , configFile , ioe ) ; <nl> + fmlLog . error ( CORE , " Unable to read FML config at { } " , configFile , ioe ) ; <nl> throw new RuntimeException ( " Unable to read FML config " , ioe ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / FileUtils . java b / src / main / java / net / minecraftforge / fml / FileUtils . java <nl> index e33ab2d . . b99b40b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / FileUtils . java <nl> + + + b / src / main / java / net / minecraftforge / fml / FileUtils . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . file . FileAlreadyExistsException ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class FileUtils <nl> @ @ - 31 , 20 + 32 , 20 @ @ public class FileUtils <nl> public static Path getOrCreateDirectory ( Path dirPath , String dirLabel ) { <nl> if ( ! Files . isDirectory ( dirPath ) ) <nl> { <nl> - fmlLog . debug ( " Making { } directory : { } " , dirLabel , dirPath ) ; <nl> + fmlLog . debug ( CORE , " Making { } directory : { } " , dirLabel , dirPath ) ; <nl> try { <nl> Files . createDirectory ( dirPath ) ; <nl> } catch ( IOException e ) { <nl> if ( e instanceof FileAlreadyExistsException ) { <nl> - fmlLog . error ( " Failed to create { } directory - there is a file in the way " , dirLabel ) ; <nl> + fmlLog . error ( CORE , " Failed to create { } directory - there is a file in the way " , dirLabel ) ; <nl> } else { <nl> - fmlLog . error ( " Problem with creating { } directory ( Permissions ? ) " , dirLabel , e ) ; <nl> + fmlLog . error ( CORE , " Problem with creating { } directory ( Permissions ? ) " , dirLabel , e ) ; <nl> } <nl> throw new RuntimeException ( " Problem creating directory " , e ) ; <nl> } <nl> - fmlLog . debug ( " Created { } directory : { } " , dirLabel , dirPath ) ; <nl> + fmlLog . debug ( CORE , " Created { } directory : { } " , dirLabel , dirPath ) ; <nl> } else { <nl> - fmlLog . debug ( " Found existing { } directory : { } " , dirLabel , dirPath ) ; <nl> + fmlLog . debug ( CORE , " Found existing { } directory : { } " , dirLabel , dirPath ) ; <nl> } <nl> return dirPath ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / Logging . java b / src / main / java / net / minecraftforge / fml / Logging . java <nl> index e97b6b7 . . de7234c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / Logging . java <nl> + + + b / src / main / java / net / minecraftforge / fml / Logging . java <nl> @ @ - 22 , 9 + 22 , 14 @ @ package net . minecraftforge . fml ; <nl> import org . apache . logging . log4j . Level ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> + import org . apache . logging . log4j . Marker ; <nl> + import org . apache . logging . log4j . MarkerManager ; <nl> import org . apache . logging . log4j . core . config . Configurator ; <nl> <nl> public class Logging <nl> { <nl> public static final Logger fmlLog = LogManager . getLogger ( " FML " ) ; <nl> + public static final Marker CORE = MarkerManager . getMarker ( " CORE " ) ; <nl> + public static final Marker LOADING = MarkerManager . getMarker ( " LOADING " ) ; <nl> + public static final Marker SCAN = MarkerManager . getMarker ( " SCAN " ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / StringUtils . java b / src / main / java / net / minecraftforge / fml / StringUtils . java <nl> new file mode 100644 <nl> index 0000000 . . 5d2b8f3 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / StringUtils . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml ; <nl> + <nl> + / * * <nl> + * Created by cpw on 05 / 06 / 17 . <nl> + * / <nl> + public class StringUtils <nl> + { <nl> + public static String toLowerCase ( final String str ) { <nl> + return str . toLowerCase ( java . util . Locale . ROOT ) ; <nl> + } <nl> + <nl> + public static boolean endsWith ( final String search , final String . . . endings ) { <nl> + String lowerSearch = toLowerCase ( search ) ; <nl> + return java . util . stream . Stream . of ( endings ) . anyMatch ( lowerSearch : : endsWith ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLPaths . java b / src / main / java / net / minecraftforge / fml / common / FMLPaths . java <nl> index f53e9e2 . . 0a570d7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLPaths . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLPaths . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> import java . util . Objects ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public enum FMLPaths <nl> @ @ - 70 , 7 + 71 , 7 @ @ public enum FMLPaths <nl> for ( FMLPaths path : FMLPaths . values ( ) ) <nl> { <nl> path . absolutePath = rootPath . resolve ( path . relativePath ) . toAbsolutePath ( ) ; <nl> - fmlLog . debug ( " Path { } is { } " , ( ) - > path , ( ) - > path . absolutePath ) ; <nl> + fmlLog . debug ( CORE , " Path { } is { } " , ( ) - > path , ( ) - > path . absolutePath ) ; <nl> if ( path . isDirectory ) <nl> { <nl> FileUtils . getOrCreateDirectory ( path . absolutePath , path . name ( ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java b / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java <nl> index 48db48c . . 5aecb99 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java <nl> @ @ - 25 , 9 + 25 , 20 @ @ import cpw . mods . modlauncher . api . IncompatibleEnvironmentException ; <nl> import cpw . mods . modlauncher . serviceapi . ILaunchPluginService ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModDiscoverer ; <nl> + import net . minecraftforge . forgespi . ICoreModProvider ; <nl> <nl> + import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> + import java . util . HashSet ; <nl> + import java . util . Iterator ; <nl> + import java . util . List ; <nl> + import java . util . ServiceLoader ; <nl> import java . util . Set ; <nl> + import java . util . stream . Collectors ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> + import static net . minecraftforge . fml . Logging . LOADING ; <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class FMLLoader <nl> @ @ - 35 , 28 + 46 , 48 @ @ public class FMLLoader <nl> <nl> private static ILaunchPluginService accessTransformer ; <nl> private static ModDiscoverer modDiscoverer ; <nl> + private static ICoreModProvider coreMod ; <nl> <nl> - static void initialize ( IEnvironment environment , Set < String > otherServices ) throws IncompatibleEnvironmentException <nl> + static void onInitialLoad ( IEnvironment environment , Set < String > otherServices ) throws IncompatibleEnvironmentException <nl> { <nl> final String version = ForgeVersion . getVersion ( ) ; <nl> - fmlLog . debug ( " FML { } loading " , version ) ; <nl> + fmlLog . debug ( CORE , " FML { } loading " , version ) ; <nl> final Package modLauncherPackage = ITransformationService . class . getPackage ( ) ; <nl> - fmlLog . debug ( " FML found ModLauncher version : { } " , modLauncherPackage . getImplementationVersion ( ) ) ; <nl> + fmlLog . debug ( CORE , " FML found ModLauncher version : { } " , modLauncherPackage . getImplementationVersion ( ) ) ; <nl> if ( ! modLauncherPackage . isCompatibleWith ( " 1 . 0 " ) ) { <nl> - fmlLog . error ( " Found incompatible ModLauncher specification : { } , version { } from { } " , modLauncherPackage . getSpecificationVersion ( ) , modLauncherPackage . getImplementationVersion ( ) , modLauncherPackage . getImplementationVendor ( ) ) ; <nl> + fmlLog . error ( CORE , " Found incompatible ModLauncher specification : { } , version { } from { } " , modLauncherPackage . getSpecificationVersion ( ) , modLauncherPackage . getImplementationVersion ( ) , modLauncherPackage . getImplementationVendor ( ) ) ; <nl> throw new IncompatibleEnvironmentException ( " Incompatible modlauncher found " + modLauncherPackage . getSpecificationVersion ( ) ) ; <nl> } <nl> <nl> accessTransformer = environment . findLaunchPlugin ( " accesstransformer " ) . orElseThrow ( ( ) - > new IncompatibleEnvironmentException ( " Missing AccessTransformer , cannot run " ) ) ; <nl> <nl> final Package atPackage = accessTransformer . getClass ( ) . getPackage ( ) ; <nl> - fmlLog . debug ( " FML found AccessTransformer version : { } " , atPackage . getImplementationVersion ( ) ) ; <nl> + fmlLog . debug ( CORE , " FML found AccessTransformer version : { } " , atPackage . getImplementationVersion ( ) ) ; <nl> if ( ! atPackage . isCompatibleWith ( " 1 . 0 " ) ) { <nl> - fmlLog . error ( " Found incompatible AccessTransformer specification : { } , version { } from { } " , atPackage . getSpecificationVersion ( ) , atPackage . getImplementationVersion ( ) , atPackage . getImplementationVendor ( ) ) ; <nl> + fmlLog . error ( CORE , " Found incompatible AccessTransformer specification : { } , version { } from { } " , atPackage . getSpecificationVersion ( ) , atPackage . getImplementationVersion ( ) , atPackage . getImplementationVendor ( ) ) ; <nl> + throw new IncompatibleEnvironmentException ( " Incompatible accesstransformer found " + atPackage . getSpecificationVersion ( ) ) ; <nl> } <nl> - / / final ILaunchPluginService coreMod = environment . findLaunchPlugin ( " coremod " ) . orElseThrow ( ( ) - > new IncompatibleEnvironmentException ( " Missing CoreMod , cannot run " ) ) ; <nl> <nl> - fmlLog . debug ( " Scanning for Mod Locators " ) ; <nl> + final ArrayList < ICoreModProvider > coreModProviders = new ArrayList < > ( ) ; <nl> + ServiceLoader . load ( ICoreModProvider . class ) . forEach ( coreModProviders : : add ) ; <nl> + <nl> + if ( coreModProviders . isEmpty ( ) ) { <nl> + fmlLog . error ( CORE , " Found no coremod provider . Cannot run " ) ; <nl> + throw new IncompatibleEnvironmentException ( " No coremod library found " ) ; <nl> + } else if ( coreModProviders . size ( ) > 1 ) { <nl> + fmlLog . error ( CORE , " Found multiple coremod providers : { } . Cannot run " , coreModProviders . stream ( ) . map ( p - > p . getClass ( ) . getName ( ) ) . collect ( Collectors . toList ( ) ) ) ; <nl> + throw new IncompatibleEnvironmentException ( " Multiple coremod libraries found " ) ; <nl> + } <nl> + <nl> + coreMod = coreModProviders . get ( 0 ) ; <nl> + final Package coremodPackage = coreMod . getClass ( ) . getPackage ( ) ; <nl> + fmlLog . debug ( CORE , " FML found CoreMod version : { } " , coremodPackage . getImplementationVersion ( ) ) ; <nl> + } <nl> + <nl> + public static void load ( ) <nl> + { <nl> + fmlLog . debug ( SCAN , " Scanning for Mod Locators " ) ; <nl> modDiscoverer = new ModDiscoverer ( ) ; <nl> + modDiscoverer . discoverMods ( ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java <nl> index 4cda27b . . 3ceec55 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java <nl> @ @ - 29 , 12 + 29 , 12 @ @ import net . minecraftforge . fml . FMLConfig ; <nl> import net . minecraftforge . fml . common . FMLPaths ; <nl> <nl> import javax . annotation . Nonnull ; <nl> - import java . io . IOException ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> import java . util . function . BiFunction ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class FMLServiceProvider implements ITransformationService <nl> @ @ - 54 , 16 + 54 , 18 @ @ public class FMLServiceProvider implements ITransformationService <nl> @ Override <nl> public void initialize ( IEnvironment environment ) <nl> { <nl> - fmlLog . debug ( " Setting up basic FML game directories " ) ; <nl> + fmlLog . debug ( CORE , " Setting up basic FML game directories " ) ; <nl> FMLPaths . setup ( environment ) ; <nl> - fmlLog . debug ( " Loading configuration " ) ; <nl> + fmlLog . debug ( CORE , " Loading configuration " ) ; <nl> FMLConfig . load ( ) ; <nl> + fmlLog . debug ( CORE , " Initiating mod scan " ) ; <nl> + FMLLoader . load ( ) ; <nl> } <nl> <nl> @ Override <nl> public void onLoad ( IEnvironment environment , Set < String > otherServices ) throws IncompatibleEnvironmentException <nl> { <nl> - FMLLoader . initialize ( environment , otherServices ) ; <nl> + FMLLoader . onInitialLoad ( environment , otherServices ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java <nl> index 2e870f2 . . 93694a4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . ExecutorService ; <nl> import java . util . concurrent . Executors ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class BackgroundScanHandler <nl> @ @ - 56 , 7 + 57 , 7 @ @ public class BackgroundScanHandler <nl> <nl> private void addCompletedFile ( final ModFile file , final ScanResult scanResult , final Throwable throwable ) { <nl> if ( throwable ! = null ) { <nl> - fmlLog . error ( " An error occurred scanning file { } " , file , throwable ) ; <nl> + fmlLog . error ( SCAN , " An error occurred scanning file { } " , file , throwable ) ; <nl> } <nl> pendingFiles . remove ( file ) ; <nl> scannedFiles . add ( file ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / CoreModFile . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / CoreModFile . java <nl> index 2410559 . . 6be7dd4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / CoreModFile . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / CoreModFile . java <nl> @ @ - 19 , 24 + 19 , 31 @ @ <nl> <nl> package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> - public class CoreModFile implements net . minecraftforge . forgespi . ICoreModFile { <nl> - private final java . nio . file . Path internalPath ; <nl> + import net . minecraftforge . forgespi . ICoreModFile ; <nl> + <nl> + import java . io . IOException ; <nl> + import java . io . Reader ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Path ; <nl> + <nl> + public class CoreModFile implements ICoreModFile { <nl> + private final Path internalPath ; <nl> private final ModFile file ; <nl> private final String name ; <nl> <nl> - CoreModFile ( final String name , final java . nio . file . Path path , final ModFile file ) { <nl> + CoreModFile ( final String name , final Path path , final ModFile file ) { <nl> this . name = name ; <nl> this . internalPath = path ; <nl> this . file = file ; <nl> } <nl> <nl> @ Override <nl> - public java . io . Reader readCoreMod ( ) throws java . io . IOException { <nl> - return java . nio . file . Files . newBufferedReader ( this . internalPath ) ; <nl> + public Reader readCoreMod ( ) throws IOException { <nl> + return Files . newBufferedReader ( this . internalPath ) ; <nl> } <nl> <nl> @ Override <nl> - public java . nio . file . Path getPath ( ) { <nl> + public Path getPath ( ) { <nl> return this . internalPath ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ExplodedDirectoryLocator . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ExplodedDirectoryLocator . java <nl> index cb5d10b . . 80fc54a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ExplodedDirectoryLocator . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ExplodedDirectoryLocator . java <nl> @ @ - 26 , 17 + 26 , 33 @ @ import java . nio . file . Path ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> + import java . util . Optional ; <nl> import java . util . function . Consumer ; <nl> + import java . util . jar . Manifest ; <nl> import java . util . stream . Stream ; <nl> <nl> + import static net . minecraftforge . fml . Logging . LOADING ; <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class ExplodedDirectoryLocator implements IModLocator { <nl> private static final String DIR = System . getProperty ( " fml . explodedDir " , " modclasses " ) ; <nl> private final Path rootDir ; <nl> <nl> - ExplodedDirectoryLocator ( ) { <nl> + public ExplodedDirectoryLocator ( ) { <nl> this . rootDir = FileSystems . getDefault ( ) . getPath ( DIR ) ; <nl> + if ( ! Files . exists ( this . rootDir ) ) { <nl> + fmlLog . debug ( LOADING , " Creating directory { } " + this . rootDir ) ; <nl> + try <nl> + { <nl> + Files . createDirectory ( this . rootDir ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + fmlLog . error ( LOADING , " Error creating { } " , this . rootDir , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 59 , 12 + 75 , 24 @ @ public class ExplodedDirectoryLocator implements IModLocator { <nl> <nl> @ Override <nl> public void scanFile ( final ModFile modFile , final Consumer < Path > pathConsumer ) { <nl> - fmlLog . debug ( " Scanning directory { } " , rootDir ) ; <nl> + fmlLog . debug ( SCAN , " Scanning directory { } " , rootDir ) ; <nl> try ( Stream < Path > files = Files . find ( rootDir , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { <nl> files . forEach ( pathConsumer ) ; <nl> } catch ( IOException e ) { <nl> e . printStackTrace ( ) ; <nl> } <nl> - fmlLog . debug ( " Directory scan complete { } " , rootDir ) ; <nl> + fmlLog . debug ( SCAN , " Directory scan complete { } " , rootDir ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " { ExplodedDir locator at " + this . rootDir + " } " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Optional < Manifest > findManifest ( Path file ) <nl> + { <nl> + return Optional . empty ( ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> index 5998912 . . 27dc4f0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Map ; <nl> import java . util . ServiceLoader ; <nl> import java . util . stream . Collectors ; <nl> <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class ModDiscoverer { <nl> @ @ - 36 , 7 + 37 , 7 @ @ public class ModDiscoverer { <nl> public ModDiscoverer ( ) { <nl> locators = ServiceLoader . load ( IModLocator . class ) ; <nl> locatorList = ServiceLoaderStreamUtils . toList ( this . locators ) ; <nl> - fmlLog . debug ( " Found Mod Locators : { } " , ( ) - > locatorList . stream ( ) . map ( IModLocator : : name ) . collect ( Collectors . joining ( " , " ) ) ) ; <nl> + fmlLog . debug ( SCAN , " Found Mod Locators : { } " , ( ) - > locatorList . stream ( ) . map ( iModLocator - > " ( " + iModLocator . name ( ) + " : " + iModLocator . getClass ( ) . getPackage ( ) . getImplementationVersion ( ) + " ) " ) . collect ( Collectors . joining ( " , " ) ) ) ; <nl> } <nl> <nl> ModDiscoverer ( List < IModLocator > locatorList ) { <nl> @ @ - 45 , 22 + 46 , 21 @ @ public class ModDiscoverer { <nl> } <nl> <nl> public BackgroundScanHandler discoverMods ( ) { <nl> - fmlLog . debug ( " Scanning for mods and other resources to load . We know { } ways to find mods " , locatorList . size ( ) ) ; <nl> + fmlLog . debug ( SCAN , " Scanning for mods and other resources to load . We know { } ways to find mods " , locatorList . size ( ) ) ; <nl> final Map < ModFile . Type , List < ModFile > > modFiles = locatorList . stream ( ) <nl> - . peek ( loc - > fmlLog . debug ( " Trying locator { } " , loc ) ) <nl> + . peek ( loc - > fmlLog . debug ( SCAN , " Trying locator { } " , loc ) ) <nl> . map ( IModLocator : : scanMods ) <nl> . flatMap ( Collection : : stream ) <nl> - . peek ( mf - > fmlLog . debug ( " Found mod file { } of type { } with locator { } " , mf . getFileName ( ) , mf . getType ( ) , mf . getLocator ( ) ) ) <nl> + . peek ( mf - > fmlLog . debug ( SCAN , " Found mod file { } of type { } with locator { } " , mf . getFileName ( ) , mf . getType ( ) , mf . getLocator ( ) ) ) <nl> . collect ( Collectors . groupingBy ( ModFile : : getType ) ) ; <nl> <nl> - ModLanguageProvider . loadAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; <nl> + / / ModLanguageProvider . loadAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; <nl> BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; <nl> final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; <nl> mods . forEach ( ModFile : : identifyMods ) ; <nl> - fmlLog . debug ( " Found { } mod files with { } mods " , mods : : size , ( ) - > mods . stream ( ) . mapToInt ( mf - > mf . getModInfos ( ) . size ( ) ) . sum ( ) ) ; <nl> - mods . stream ( ) . map ( ModFile : : getCoreMods ) . flatMap ( List : : stream ) . forEach ( ServiceProviders . getCoreModProvider ( ) : : addCoreMod ) ; <nl> + fmlLog . debug ( SCAN , " Found { } mod files with { } mods " , mods : : size , ( ) - > mods . stream ( ) . mapToInt ( mf - > mf . getModInfos ( ) . size ( ) ) . sum ( ) ) ; <nl> + / / mods . stream ( ) . map ( ModFile : : getCoreMods ) . flatMap ( List : : stream ) . forEach ( ServiceProviders . getCoreModProvider ( ) : : addCoreMod ) ; <nl> mods . forEach ( backgroundScanHandler : : submitForScanning ) ; <nl> return backgroundScanHandler ; <nl> } <nl> - <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java <nl> index 8d995f5 . . 8733035 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java <nl> @ @ - 28 , 6 + 28 , 8 @ @ import java . util . function . Consumer ; <nl> import java . util . jar . Attributes ; <nl> import java . util . jar . Manifest ; <nl> <nl> + import static net . minecraftforge . fml . Logging . LOADING ; <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class ModFile <nl> @ @ - 56 , 8 + 58 , 8 @ @ public class ModFile <nl> this . locator = locator ; <nl> this . filePath = file ; <nl> manifest = locator . findManifest ( file ) . orElse ( DEFAULTMANIFEST ) ; <nl> - if ( manifest ! = DEFAULTMANIFEST ) fmlLog . debug ( " Mod file { } has a manifest " , file ) ; <nl> - else fmlLog . debug ( " Mod file { } is missing a manifest " , file ) ; <nl> + if ( manifest ! = DEFAULTMANIFEST ) fmlLog . debug ( SCAN , " Mod file { } has a manifest " , file ) ; <nl> + else fmlLog . debug ( SCAN , " Mod file { } is missing a manifest " , file ) ; <nl> modFileType = Type . valueOf ( manifest . getMainAttributes ( ) . getValue ( TYPE ) ) ; <nl> } <nl> <nl> @ @ - 75 , 9 + 77 , 9 @ @ public class ModFile <nl> <nl> public void identifyMods ( ) { <nl> this . modInfos = ModFileParser . readModList ( this ) ; <nl> - this . modInfos . forEach ( mi - > fmlLog . debug ( " Found mod { } for language { } " , mi . getModId ( ) , mi . getModLoader ( ) ) ) ; <nl> + this . modInfos . forEach ( mi - > fmlLog . debug ( LOADING , " Found mod { } for language { } " , mi . getModId ( ) , mi . getModLoader ( ) ) ) ; <nl> this . coreMods = ModFileParser . getCoreMods ( this ) ; <nl> - this . coreMods . forEach ( mi - > fmlLog . debug ( " Found coremod { } " , mi . getPath ( ) ) ) ; <nl> + this . coreMods . forEach ( mi - > fmlLog . debug ( LOADING , " Found coremod { } " , mi . getPath ( ) ) ) ; <nl> } <nl> <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFileParser . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFileParser . java <nl> index 1ab2163 . . 1bba72e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFileParser . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFileParser . java <nl> @ @ - 27 , 45 + 27 , 54 @ @ import com . google . gson . reflect . TypeToken ; <nl> import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> <nl> + import java . io . IOException ; <nl> + import java . lang . reflect . Type ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Path ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . stream . Collectors ; <nl> + import java . util . stream . Stream ; <nl> <nl> + import static net . minecraftforge . fml . Logging . LOADING ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class ModFileParser { <nl> - protected static java . util . List < net . minecraftforge . fml . loading . moddiscovery . ModInfo > readModList ( final ModFile modFile ) { <nl> - fmlLog . debug ( " Parsing mod file candidate { } " , modFile . getFilePath ( ) ) ; <nl> + protected static List < ModInfo > readModList ( final ModFile modFile ) { <nl> + fmlLog . debug ( LOADING , " Parsing mod file candidate { } " , modFile . getFilePath ( ) ) ; <nl> try { <nl> - final java . nio . file . Path modsjson = modFile . getLocator ( ) . findPath ( modFile , " META - INF " , " mods . json " ) ; <nl> + final Path modsjson = modFile . getLocator ( ) . findPath ( modFile , " META - INF " , " mods . json " ) ; <nl> GsonBuilder gsonBuilder = new GsonBuilder ( ) ; <nl> gsonBuilder . registerTypeAdapter ( ModInfo . class , ( InstanceCreator < ModInfo > ) ic - > new ModInfo ( modFile , null , null , null , null , null , null , null ) ) ; <nl> gsonBuilder . registerTypeAdapter ( ArtifactVersion . class , ( JsonDeserializer < ArtifactVersion > ) ( element , type , context ) - > new DefaultArtifactVersion ( element . getAsString ( ) ) ) ; <nl> Gson gson = gsonBuilder . create ( ) ; <nl> - final ModInfo [ ] modInfos = gson . fromJson ( java . nio . file . Files . newBufferedReader ( modsjson ) , ModInfo [ ] . class ) ; <nl> - return java . util . stream . Stream . of ( modInfos ) . collect ( java . util . stream . Collectors . toList ( ) ) ; <nl> - } catch ( java . io . IOException e ) { <nl> - fmlLog . debug ( " Ignoring invalid JAR file { } " , modFile . getFilePath ( ) ) ; <nl> - return java . util . Collections . emptyList ( ) ; <nl> + final ModInfo [ ] modInfos = gson . fromJson ( Files . newBufferedReader ( modsjson ) , ModInfo [ ] . class ) ; <nl> + return Stream . of ( modInfos ) . collect ( Collectors . toList ( ) ) ; <nl> + } catch ( IOException e ) { <nl> + fmlLog . debug ( LOADING , " Ignoring invalid JAR file { } " , modFile . getFilePath ( ) ) ; <nl> + return Collections . emptyList ( ) ; <nl> } <nl> } <nl> <nl> - protected static java . util . List < CoreModFile > getCoreMods ( final ModFile modFile ) { <nl> - java . util . Map < String , String > coreModPaths ; <nl> + protected static List < CoreModFile > getCoreMods ( final ModFile modFile ) { <nl> + Map < String , String > coreModPaths ; <nl> try { <nl> - final java . nio . file . Path coremodsjson = modFile . getLocator ( ) . findPath ( modFile , " META - INF " , " coremods . json " ) ; <nl> - if ( ! java . nio . file . Files . exists ( coremodsjson ) ) { <nl> - return java . util . Collections . emptyList ( ) ; <nl> + final Path coremodsjson = modFile . getLocator ( ) . findPath ( modFile , " META - INF " , " coremods . json " ) ; <nl> + if ( ! Files . exists ( coremodsjson ) ) { <nl> + return Collections . emptyList ( ) ; <nl> } <nl> - final java . lang . reflect . Type type = new TypeToken < Map < String , String > > ( ) { } . getType ( ) ; <nl> + final Type type = new TypeToken < Map < String , String > > ( ) { } . getType ( ) ; <nl> final Gson gson = new Gson ( ) ; <nl> - coreModPaths = gson . fromJson ( java . nio . file . Files . newBufferedReader ( coremodsjson ) , type ) ; <nl> - } catch ( java . io . IOException e ) { <nl> - fmlLog . debug ( " Failed to read coremod list coremods . json " , e ) ; <nl> - return java . util . Collections . emptyList ( ) ; <nl> + coreModPaths = gson . fromJson ( Files . newBufferedReader ( coremodsjson ) , type ) ; <nl> + } catch ( IOException e ) { <nl> + fmlLog . debug ( LOADING , " Failed to read coremod list coremods . json " , e ) ; <nl> + return Collections . emptyList ( ) ; <nl> } <nl> <nl> return coreModPaths . entrySet ( ) . stream ( ) . <nl> - peek ( e - > fmlLog . debug ( " Found coremod { } with Javascript path { } " , e . getKey ( ) , e . getValue ( ) ) ) . <nl> + peek ( e - > fmlLog . debug ( LOADING , " Found coremod { } with Javascript path { } " , e . getKey ( ) , e . getValue ( ) ) ) . <nl> map ( e - > new CoreModFile ( e . getKey ( ) , modFile . getLocator ( ) . findPath ( modFile , e . getValue ( ) ) , modFile ) ) . <nl> - collect ( java . util . stream . Collectors . toList ( ) ) ; <nl> + collect ( Collectors . toList ( ) ) ; <nl> } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModsFolderLocator . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModsFolderLocator . java <nl> index 8ab977d . . c7adf78 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModsFolderLocator . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModsFolderLocator . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> + import net . minecraftforge . fml . StringUtils ; <nl> import net . minecraftforge . fml . common . FMLPaths ; <nl> <nl> import java . io . IOException ; <nl> @ @ - 31 , 12 + 32 , 16 @ @ import java . util . Comparator ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Optional ; <nl> import java . util . function . Consumer ; <nl> + import java . util . jar . JarFile ; <nl> + import java . util . jar . Manifest ; <nl> import java . util . stream . Collectors ; <nl> import java . util . stream . Stream ; <nl> import java . util . zip . ZipError ; <nl> <nl> import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . uncheck ; <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> / * * <nl> @ @ - 57 , 6 + 62 , 7 @ @ public class ModsFolderLocator implements IModLocator { <nl> <nl> @ Override <nl> public List < ModFile > scanMods ( ) { <nl> + fmlLog . debug ( SCAN , " Scanning mods dir { } for mods " , this . modFolder ) ; <nl> return uncheck ( ( ) - > Files . list ( this . modFolder ) ) . <nl> sorted ( Comparator . comparing ( path - > StringUtils . toLowerCase ( path . getFileName ( ) . toString ( ) ) ) ) . <nl> filter ( p - > StringUtils . toLowerCase ( p . getFileName ( ) . toString ( ) ) . endsWith ( SUFFIX ) ) . <nl> @ @ - 74 , 7 + 80 , 7 @ @ public class ModsFolderLocator implements IModLocator { <nl> try { <nl> return FileSystems . newFileSystem ( modFile . getFilePath ( ) , modFile . getClass ( ) . getClassLoader ( ) ) ; <nl> } catch ( ZipError | IOException e ) { <nl> - fmlLog . debug ( " Ignoring invalid JAR file { } " , modFile . getFilePath ( ) ) ; <nl> + fmlLog . debug ( SCAN , " Ignoring invalid JAR file { } " , modFile . getFilePath ( ) ) ; <nl> return null ; <nl> } <nl> } <nl> @ @ - 89 , 7 + 95 , 7 @ @ public class ModsFolderLocator implements IModLocator { <nl> <nl> @ Override <nl> public void scanFile ( final ModFile file , final Consumer < Path > pathConsumer ) { <nl> - fmlLog . debug ( " Scan started : { } " , file ) ; <nl> + fmlLog . debug ( SCAN , " Scan started : { } " , file ) ; <nl> FileSystem fs = modJars . get ( file ) ; <nl> fs . getRootDirectories ( ) . forEach ( path - > { <nl> try ( Stream < Path > files = Files . find ( path , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { <nl> @ @ - 98 , 11 + 104 , 24 @ @ public class ModsFolderLocator implements IModLocator { <nl> e . printStackTrace ( ) ; <nl> } <nl> } ) ; <nl> - fmlLog . debug ( " Scan finished : { } " , file ) ; <nl> + fmlLog . debug ( SCAN , " Scan finished : { } " , file ) ; <nl> } <nl> <nl> @ Override <nl> public String toString ( ) { <nl> - return " { FolderJar locator at " + this . modFolder + " } " ; <nl> + return " { ModJarsFolder locator at " + this . modFolder + " } " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Optional < Manifest > findManifest ( final Path file ) <nl> + { <nl> + try ( JarFile jf = new JarFile ( file . toFile ( ) ) ) <nl> + { <nl> + return Optional . ofNullable ( jf . getManifest ( ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + return Optional . empty ( ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java <nl> index 58456fa . . 0770426 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> import org . objectweb . asm . ClassReader ; <nl> <nl> + import static net . minecraftforge . fml . Logging . SCAN ; <nl> import static net . minecraftforge . fml . Logging . fmlLog ; <nl> <nl> public class Scanner { <nl> @ @ - 38 , 7 + 39 , 7 @ @ public class Scanner { <nl> <nl> private void fileVisitor ( final java . nio . file . Path path , final ScanResult result ) { <nl> try { <nl> - fmlLog . debug ( " Scanning { } path { } " , fileToScan , path ) ; <nl> + fmlLog . debug ( SCAN , " Scanning { } path { } " , fileToScan , path ) ; <nl> ModClassVisitor mcv = new ModClassVisitor ( ) ; <nl> org . objectweb . asm . ClassReader cr = new ClassReader ( java . nio . file . Files . newInputStream ( path ) ) ; <nl> cr . accept ( mcv , 0 ) ; <nl> diff - - git a / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator b / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator <nl> new file mode 100644 <nl> index 0000000 . . ef7ed2c <nl> - - - / dev / null <nl> + + + b / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator <nl> @ @ - 0 , 0 + 1 , 2 @ @ <nl> + net . minecraftforge . fml . loading . moddiscovery . ModsFolderLocator <nl> + net . minecraftforge . fml . loading . moddiscovery . ExplodedDirectoryLocator <nl> \ No newline at end of file <nl> diff - - git a / src / main / resources / log4j2 . xml b / src / main / resources / log4j2 . xml <nl> index 3254c08 . . 19bb2e2 100644 <nl> - - - a / src / main / resources / log4j2 . xml <nl> + + + b / src / main / resources / log4j2 . xml <nl> @ @ - 2 , 7 + 2 , 7 @ @ <nl> < Configuration status = " WARN " packages = " com . mojang . util " > <nl> < Appenders > <nl> < Console name = " FmlSysOut " target = " SYSTEM _ OUT " > <nl> - < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " / > <nl> + < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger / % marker ] : % msg % n " / > <nl> < / Console > <nl> < Console name = " SysOut " target = " SYSTEM _ OUT " > <nl> < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] : % msg % n " / >
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> index 1f3e186 . . fcfee4e 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> @ @ - 6 , 42 + 6 , 38 @ @ <nl> package net . minecraftforge . client . gui ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . TreeMap ; <nl> - import java . util . regex . Pattern ; <nl> <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> - import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . client . resources . I18n ; <nl> import net . minecraftforge . common . ForgeChunkManager ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . config . ConfigCategory ; <nl> import net . minecraftforge . common . config . ConfigElement ; <nl> import net . minecraftforge . common . config . Configuration ; <nl> import net . minecraftforge . common . config . Property ; <nl> import net . minecraftforge . fml . client . IModGuiFactory ; <nl> - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionCategoryElement ; <nl> - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionGuiHandler ; <nl> import net . minecraftforge . fml . client . config . ConfigGuiType ; <nl> import net . minecraftforge . fml . client . config . DummyConfigElement ; <nl> import net . minecraftforge . fml . client . config . DummyConfigElement . DummyCategoryElement ; <nl> - import net . minecraftforge . fml . client . config . GuiButtonExt ; <nl> import net . minecraftforge . fml . client . config . GuiConfig ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . CategoryEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . SelectValueEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . BooleanEntry ; <nl> - import net . minecraftforge . fml . client . config . HoverChecker ; <nl> import net . minecraftforge . fml . client . config . IConfigElement ; <nl> - import net . minecraftforge . fml . client . config . GuiConfigEntries . ListEntryBase ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> - import net . minecraftforge . fml . relauncher . Side ; <nl> - import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + import static net . minecraftforge . common . ForgeModContainer . VERSION _ CHECK _ CAT ; <nl> <nl> / * * <nl> * This is the base GuiConfig screen class that all the other Forge - specific config screens will be called from . <nl> @ @ - 109 , 6 + 105 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory <nl> List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; <nl> list . add ( new DummyCategoryElement ( " forgeCfg " , " forge . configgui . ctgy . forgeGeneralConfig " , GeneralEntry . class ) ) ; <nl> list . add ( new DummyCategoryElement ( " forgeChunkLoadingCfg " , " forge . configgui . ctgy . forgeChunkLoadingConfig " , ChunkLoaderEntry . class ) ) ; <nl> + list . add ( new DummyCategoryElement ( " forgeVersionCheckCfg " , " forge . configgui . ctgy . VersionCheckConfig " , VersionCheckEntry . class ) ) ; <nl> return list ; <nl> } <nl> <nl> @ @ - 167 , 6 + 164 , 59 @ @ public class ForgeGuiFactory implements IModGuiFactory <nl> } <nl> <nl> / * * <nl> + * This custom list entry provides the Forge Version Checking Config entry on the Minecraft Forge Configuration screen . <nl> + * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . <nl> + * / <nl> + public static class VersionCheckEntry extends CategoryEntry <nl> + { <nl> + public VersionCheckEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement prop ) <nl> + { <nl> + super ( owningScreen , owningEntryList , prop ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected GuiScreen buildChildScreen ( ) <nl> + { <nl> + ConfigCategory cfg = ForgeModContainer . getConfig ( ) . getCategory ( VERSION _ CHECK _ CAT ) ; <nl> + Map < String , Property > values = new HashMap < String , Property > ( cfg . getValues ( ) ) ; <nl> + values . remove ( " Global " ) ; <nl> + <nl> + Property global = ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , " Global " , true ) ; <nl> + <nl> + List < Property > props = new ArrayList < Property > ( ) ; <nl> + <nl> + for ( ModContainer mod : ForgeVersion . gatherMods ( ) . keySet ( ) ) <nl> + { <nl> + values . remove ( mod . getModId ( ) ) ; <nl> + props . add ( ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) ) ; / / Get or make the value in the config <nl> + } <nl> + props . addAll ( values . values ( ) ) ; / / Add any left overs from the config <nl> + Collections . sort ( props , new Comparator < Property > ( ) <nl> + { <nl> + @ Override <nl> + public int compare ( Property o1 , Property o2 ) <nl> + { <nl> + return o1 . getName ( ) . compareTo ( o2 . getName ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; <nl> + list . add ( new ConfigElement ( global ) ) ; <nl> + for ( Property prop : props ) <nl> + { <nl> + list . add ( new ConfigElement ( prop ) ) ; <nl> + } <nl> + <nl> + / / This GuiConfig object specifies the configID of the object and as such will force - save when it is closed . The parent <nl> + / / GuiConfig object ' s propertyList will also be refreshed to reflect the changes . <nl> + return new GuiConfig ( this . owningScreen , <nl> + list , <nl> + this . owningScreen . modID , VERSION _ CHECK _ CAT , true , true , <nl> + GuiConfig . getAbridgedConfigPath ( ForgeModContainer . getConfig ( ) . toString ( ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * This custom list entry provides the Mod Overrides entry on the Forge Chunk Loading config screen . <nl> * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . <nl> * In this case it adds the custom entry for adding a new mod override and lists the existing mod overrides . <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 7105295 . . 3805d49 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 12 , 13 + 12 , 14 @ @ import static net . minecraftforge . common . ForgeVersion . revisionVersion ; <nl> import static net . minecraftforge . common . config . Configuration . CATEGORY _ GENERAL ; <nl> <nl> import java . io . File ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> - import net . minecraft . init . Blocks ; <nl> import net . minecraft . nbt . NBTBase ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . world . storage . SaveHandler ; <nl> @ @ - 58 , 6 + 59 , 7 @ @ import net . minecraftforge . fml . common . network . NetworkRegistry ; <nl> <nl> public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer <nl> { <nl> + public static final String VERSION _ CHECK _ CAT = " version _ checking " ; <nl> public static int clumpingThreshold = 64 ; <nl> public static boolean removeErroringEntities = false ; <nl> public static boolean removeErroringTileEntities = false ; <nl> @ @ - 73 , 6 + 75 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> <nl> private static Configuration config ; <nl> + private static ForgeModContainer INSTANCE ; <nl> + public static ForgeModContainer getInstance ( ) <nl> + { <nl> + return INSTANCE ; <nl> + } <nl> + <nl> + private URL updateJSONUrl = null ; <nl> <nl> public ForgeModContainer ( ) <nl> { <nl> @ @ - 82 , 7 + 91 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> meta . name = " Minecraft Forge " ; <nl> meta . version = String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> meta . credits = " Made possible with help from many people " ; <nl> - meta . authorList = Arrays . asList ( " LexManos " , " Eloraam " , " Spacetoad " ) ; <nl> + meta . authorList = Arrays . asList ( " LexManos " , " Cpw " ) ; <nl> meta . description = " Minecraft Forge is a common open source API allowing a broad range of mods " + <nl> " to work cooperatively together . It allows many mods to be created without " + <nl> " them editing the main Minecraft code . " ; <nl> @ @ - 90 , 12 + 99 , 17 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; <nl> meta . screenshots = new String [ 0 ] ; <nl> meta . logoFile = " / forge _ logo . png " ; <nl> + try { <nl> + updateJSONUrl = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + } catch ( MalformedURLException e ) { } <nl> <nl> config = null ; <nl> File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; <nl> config = new Configuration ( cfgFile ) ; <nl> <nl> syncConfig ( true ) ; <nl> + <nl> + INSTANCE = this ; <nl> } <nl> <nl> @ Override <nl> @ @ - 230 , 6 + 244 , 12 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> <nl> config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; <nl> <nl> + propOrder = new ArrayList < String > ( ) ; <nl> + prop = config . get ( VERSION _ CHECK _ CAT , " Global " , true , " Enable the entire mod update check system . This only applies to mods using the Forge system . " ) ; <nl> + propOrder . add ( " Global " ) ; <nl> + <nl> + config . setCategoryPropertyOrder ( VERSION _ CHECK _ CAT , propOrder ) ; <nl> + <nl> if ( config . hasChanged ( ) ) <nl> { <nl> config . save ( ) ; <nl> @ @ - 254 , 6 + 274 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> ForgeChunkManager . syncConfigDefaults ( ) ; <nl> ForgeChunkManager . loadConfiguration ( ) ; <nl> } <nl> + else if ( VERSION _ CHECK _ CAT . equals ( event . configID ) ) <nl> + { <nl> + syncConfig ( false ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 396 , 4 + 420 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> Certificate [ ] certificates = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; <nl> return certificates ! = null ? certificates [ 0 ] : null ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return updateJSONUrl ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index bc5db2f . . 71d594c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 8 , 13 + 8 , 25 @ @ import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> import java . io . InputStream ; <nl> import java . net . URL ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . LinkedHashMap ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + <nl> + import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . gson . Gson ; <nl> <nl> - import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . InjectedModContainer ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import net . minecraftforge . fml . common . versioning . ComparableVersion ; <nl> <nl> public class ForgeVersion <nl> { <nl> @ @ - 55 , 12 + 67 , 13 @ @ public class ForgeVersion <nl> <nl> public static Status getStatus ( ) <nl> { <nl> - return status ; <nl> + return getResult ( ForgeModContainer . getInstance ( ) ) . status ; <nl> } <nl> <nl> public static String getTarget ( ) <nl> { <nl> - return target ; <nl> + CheckResult res = getResult ( ForgeModContainer . getInstance ( ) ) ; <nl> + return res . target ! = null ? res . target . toString ( ) : null ; <nl> } <nl> <nl> public static String getVersion ( ) <nl> @ @ - 79 , 32 + 92 , 75 @ @ public class ForgeVersion <nl> BETA _ OUTDATED <nl> } <nl> <nl> + public static class CheckResult <nl> + { <nl> + public final Status status ; <nl> + public final ComparableVersion target ; <nl> + public final Map < ComparableVersion , String > changes ; <nl> + public final String url ; <nl> + <nl> + private CheckResult ( Status status , ComparableVersion target , Map < ComparableVersion , String > changes , String url ) <nl> + { <nl> + this . status = status ; <nl> + this . target = target ; <nl> + this . changes = changes = = null ? null : Collections . unmodifiableMap ( changes ) ; <nl> + this . url = url ; <nl> + } <nl> + } <nl> + <nl> public static void startVersionCheck ( ) <nl> { <nl> new Thread ( " Forge Version Check " ) <nl> { <nl> - @ SuppressWarnings ( " unchecked " ) <nl> @ Override <nl> public void run ( ) <nl> { <nl> + if ( ! ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , " Global " , true ) . getBoolean ( ) ) <nl> + { <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " Global Forge version check system disabeld , no futher processing . " ) ; <nl> + return ; <nl> + } <nl> + <nl> + for ( Entry < ModContainer , URL > entry : gatherMods ( ) . entrySet ( ) ) <nl> + { <nl> + ModContainer mod = entry . getKey ( ) ; <nl> + if ( ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) . getBoolean ( ) ) <nl> + { <nl> + process ( mod , entry . getValue ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Skipped version check " , mod . getModId ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private void process ( ModContainer mod , URL url ) <nl> + { <nl> try <nl> { <nl> - URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Starting version check at % s " , mod . getModId ( ) , url . toString ( ) ) ; <nl> + Status status = PENDING ; <nl> + ComparableVersion target = null ; <nl> + <nl> InputStream con = url . openStream ( ) ; <nl> String data = new String ( ByteStreams . toByteArray ( con ) ) ; <nl> con . close ( ) ; <nl> <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , " [ % s ] Received version check data : \ n % s " , mod . getModId ( ) , data ) ; <nl> + <nl> + <nl> Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; <nl> - / / String homepage = ( String ) json . get ( " homepage " ) ; <nl> Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; <nl> + String display _ url = ( String ) json . get ( " homepage " ) ; <nl> <nl> String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; <nl> String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; <nl> - ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; <nl> + ComparableVersion current = new ComparableVersion ( mod . getVersion ( ) ) ; <nl> <nl> if ( rec ! = null ) <nl> { <nl> - ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; <nl> + ComparableVersion recommended = new ComparableVersion ( rec ) ; <nl> int diff = recommended . compareTo ( current ) ; <nl> <nl> if ( diff = = 0 ) <nl> @ @ - 114 , 39 + 170 , 95 @ @ public class ForgeVersion <nl> status = AHEAD ; <nl> if ( lat ! = null ) <nl> { <nl> - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + ComparableVersion latest = new ComparableVersion ( lat ) ; <nl> + if ( current . compareTo ( latest ) < 0 ) <nl> { <nl> status = OUTDATED ; <nl> - target = lat ; <nl> + target = latest ; <nl> } <nl> } <nl> } <nl> else <nl> { <nl> status = OUTDATED ; <nl> - target = rec ; <nl> + target = recommended ; <nl> } <nl> } <nl> else if ( lat ! = null ) <nl> { <nl> - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + ComparableVersion latest = new ComparableVersion ( lat ) ; <nl> + if ( current . compareTo ( latest ) < 0 ) <nl> { <nl> status = BETA _ OUTDATED ; <nl> - target = lat ; <nl> + target = latest ; <nl> } <nl> else <nl> status = BETA ; <nl> } <nl> else <nl> status = BETA ; <nl> + <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Found status : % s Target : % s " , mod . getModId ( ) , status , target ) ; <nl> + <nl> + Map < ComparableVersion , String > changes = new LinkedHashMap < ComparableVersion , String > ( ) ; <nl> + Map < String , String > tmp = ( Map < String , String > ) json . get ( MinecraftForge . MC _ VERSION ) ; <nl> + if ( tmp ! = null ) <nl> + { <nl> + List < ComparableVersion > ordered = new ArrayList < ComparableVersion > ( ) ; <nl> + for ( String key : tmp . keySet ( ) ) <nl> + { <nl> + ComparableVersion ver = new ComparableVersion ( key ) ; <nl> + if ( ver . compareTo ( current ) > 0 & & ( target = = null | | ver . compareTo ( target ) < 1 ) ) <nl> + { <nl> + ordered . add ( ver ) ; <nl> + } <nl> + } <nl> + Collections . sort ( ordered ) ; <nl> + <nl> + for ( ComparableVersion ver : ordered ) <nl> + { <nl> + changes . put ( ver , tmp . get ( ver . toString ( ) ) ) ; <nl> + } <nl> + } <nl> + if ( mod instanceof InjectedModContainer ) <nl> + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; <nl> + results . put ( mod , new CheckResult ( status , target , changes , display _ url ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , e , " Failed to process update information " ) ; <nl> status = FAILED ; <nl> } <nl> } <nl> } . start ( ) ; <nl> } <nl> + <nl> + / / Gather a list of mods that have opted in to this update system by providing a URL . <nl> + / / Small hack needed to support a interface change until we force a recompile . <nl> + public static Map < ModContainer , URL > gatherMods ( ) <nl> + { <nl> + Map < ModContainer , URL > ret = new HashMap < ModContainer , URL > ( ) ; <nl> + for ( ModContainer mod : Loader . instance ( ) . getActiveModList ( ) ) <nl> + { <nl> + URL url = null ; <nl> + try { <nl> + url = mod . getUpdateUrl ( ) ; <nl> + } catch ( AbstractMethodError abs ) { } / / TODO : Remove this in 1 . 8 . 8 + ? <nl> + if ( url ! = null ) <nl> + ret . put ( mod , url ) ; <nl> + } <nl> + return ret ; <nl> + } <nl> + <nl> + private static Map < ModContainer , CheckResult > results = new ConcurrentHashMap < ModContainer , CheckResult > ( ) ; <nl> + private static final CheckResult PENDING _ CHECK = new CheckResult ( PENDING , null , null , null ) ; <nl> + <nl> + public static CheckResult getResult ( ModContainer mod ) <nl> + { <nl> + if ( mod instanceof InjectedModContainer ) <nl> + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; <nl> + CheckResult ret = results . get ( mod ) ; <nl> + return ret = = null ? PENDING _ CHECK : ret ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / GuiModList . java <nl> index ba0085f . . 720e3e0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiModList . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . Comparator ; <nl> import java . util . List ; <nl> + import java . util . Map . Entry ; <nl> <nl> import javax . imageio . ImageIO ; <nl> <nl> @ @ - 43 , 10 + 44 , 14 @ @ import net . minecraft . util . IChatComponent ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . StringUtils ; <nl> import net . minecraftforge . common . ForgeHooks ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . CheckResult ; <nl> + import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . ModContainer . Disableable ; <nl> + import net . minecraftforge . fml . common . versioning . ComparableVersion ; <nl> import static net . minecraft . util . EnumChatFormatting . * ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> @ @ - 343 , 7 + 348 , 7 @ @ public class GuiModList extends GuiScreen <nl> ResourceLocation logoPath = null ; <nl> Dimension logoDims = new Dimension ( 0 , 0 ) ; <nl> List < String > lines = new ArrayList < String > ( ) ; <nl> - / / CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; <nl> + CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; <nl> <nl> String logoFile = selectedMod . getMetadata ( ) . logoFile ; <nl> if ( ! logoFile . isEmpty ( ) ) <nl> @ @ - 408 , 8 + 413 , 8 @ @ public class GuiModList extends GuiScreen <nl> else <nl> lines . add ( " Child mods : " + selectedMod . getMetadata ( ) . getChildModList ( ) ) ; <nl> <nl> - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> <nl> lines . add ( null ) ; <nl> lines . add ( selectedMod . getMetadata ( ) . description ) ; <nl> @ @ - 419 , 15 + 424 , 15 @ @ public class GuiModList extends GuiScreen <nl> lines . add ( WHITE + selectedMod . getName ( ) ) ; <nl> lines . add ( WHITE + " Version : " + selectedMod . getVersion ( ) ) ; <nl> lines . add ( WHITE + " Mod State : " + Loader . instance ( ) . getModState ( selectedMod ) ) ; <nl> - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> <nl> lines . add ( null ) ; <nl> lines . add ( RED + " No mod information found " ) ; <nl> lines . add ( RED + " Ask your mod author to provide a mod mcmod . info file " ) ; <nl> } <nl> <nl> - / * if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) <nl> + if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) <nl> { <nl> lines . add ( null ) ; <nl> lines . add ( " Changes : " ) ; <nl> @ @ - 437 , 7 + 442 , 7 @ @ public class GuiModList extends GuiScreen <nl> lines . add ( entry . getValue ( ) ) ; <nl> lines . add ( null ) ; <nl> } <nl> - } * / <nl> + } <nl> <nl> modInfo = new Info ( this . width - this . listWidth - 30 , lines , logoPath , logoDims ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java <nl> index 1d47fea . . 90198e1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ import java . util . ArrayList ; <nl> import net . minecraft . client . gui . FontRenderer ; <nl> import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . util . StringUtils ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . CheckResult ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> @ @ - 79 , 7 + 81 , 7 @ @ public class GuiSlotModList extends GuiScrollingList <nl> String name = StringUtils . stripControlCodes ( mc . getName ( ) ) ; <nl> String version = StringUtils . stripControlCodes ( mc . getDisplayVersion ( ) ) ; <nl> FontRenderer font = this . parent . getFontRenderer ( ) ; <nl> - / / CheckResult vercheck = ForgeVersion . getResult ( mc ) ; <nl> + CheckResult vercheck = ForgeVersion . getResult ( mc ) ; <nl> <nl> if ( Loader . instance ( ) . getModState ( mc ) = = ModState . DISABLED ) <nl> { <nl> @ @ - 93 , 7 + 95 , 7 @ @ public class GuiSlotModList extends GuiScrollingList <nl> font . drawString ( font . trimStringToWidth ( version , listWidth - 10 ) , this . left + 3 , top + 12 , 0xCCCCCC ) ; <nl> font . drawString ( font . trimStringToWidth ( mc . getMetadata ( ) ! = null ? mc . getMetadata ( ) . getChildModCountString ( ) : " Metadata not found " , listWidth - 10 ) , this . left + 3 , top + 22 , 0xCCCCCC ) ; <nl> <nl> - / * switch ( vercheck . status ) / / TODO : Change to icons ? <nl> + switch ( vercheck . status ) / / TODO : Change to icons ? <nl> { <nl> case BETA _ OUTDATED : <nl> case OUTDATED : <nl> @ @ - 105 , 8 + 107 , 7 @ @ public class GuiSlotModList extends GuiScrollingList <nl> case PENDING : <nl> case UP _ TO _ DATE : <nl> break ; <nl> - } * / <nl> + } <nl> } <nl> } <nl> - <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> index 88b171c . . d9e11b3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> @ @ - 206 , 4 + 207 , 10 @ @ public class DummyModContainer implements ModContainer <nl> { <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 60ae2c6 . . 05ea505 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ import java . lang . annotation . Annotation ; <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 87 , 6 + 89 , 7 @ @ public class FMLModContainer implements ModContainer <nl> private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; <nl> private Map < String , String > customModProperties ; <nl> private ModCandidate candidate ; <nl> + private URL updateJSONUrl ; <nl> <nl> public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) <nl> { <nl> @ @ - 215 , 6 + 218 , 19 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> minecraftAccepted = Loader . instance ( ) . getMinecraftModContainer ( ) . getStaticVersionRange ( ) ; <nl> } <nl> + <nl> + String jsonURL = ( String ) descriptor . get ( " updateJSON " ) ; <nl> + if ( ! Strings . isNullOrEmpty ( jsonURL ) ) <nl> + { <nl> + try <nl> + { <nl> + this . updateJSONUrl = new URL ( jsonURL ) ; <nl> + } <nl> + catch ( MalformedURLException e ) <nl> + { <nl> + FMLLog . log ( getModId ( ) , Level . DEBUG , " Specified json URL invalid : % s " , jsonURL ) ; <nl> + } <nl> + } <nl> } <nl> <nl> public Properties searchForVersionProperties ( ) <nl> @ @ - 663 , 4 + 679 , 10 @ @ public class FMLModContainer implements ModContainer <nl> <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return updateJSONUrl ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> index af91db1 . . 783c28b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 207 , 4 + 208 , 10 @ @ public class InjectedModContainer implements ModContainer <nl> { <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return wrappedContainer . getUpdateUrl ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index a2ad320 . . 7513fdf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 157 , 18 + 157 , 18 @ @ public @ interface Mod <nl> * @ return The language the mod is authored in <nl> * / <nl> String modLanguage ( ) default " java " ; <nl> - <nl> + <nl> / * * <nl> * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a <nl> * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . <nl> - * <nl> + * <nl> * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and <nl> * halt loading . <nl> - * <nl> + * <nl> * @ return The full class name of the language adapter <nl> * / <nl> String modLanguageAdapter ( ) default " " ; <nl> - <nl> + <nl> / * * <nl> * NOT YET IMPLEMENTED . < / br > <nl> * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given <nl> @ @ - 198 , 6 + 198 , 14 @ @ public @ interface Mod <nl> * @ return The name of a class implementing { @ link IModGuiFactory } <nl> * / <nl> String guiFactory ( ) default " " ; <nl> + <nl> + / * * <nl> + * An optional URL to a JSON file that will be checked once per launch to determine if there is an updated <nl> + * version of this mod and notify the end user . For more information see ForgeVersion . <nl> + * @ return URL to update metadata json <nl> + * / <nl> + String updateJSON ( ) default " " ; <nl> + <nl> / * * <nl> * A list of custom properties for this mod . Completely up to the mod author if / when they <nl> * want to put anything in here . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> index dde8dde . . 883f8b9 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 149 , 4 + 150 , 6 @ @ public interface ModContainer <nl> List < String > getOwnedPackages ( ) ; <nl> <nl> boolean shouldLoadInEnvironment ( ) ; <nl> + <nl> + URL getUpdateUrl ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java <nl> index add4b37 . . f0173ca 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java <nl> @ @ - 35 , 7 + 35 , 12 @ @ public class ModMetadata <nl> public String description = " " ; <nl> <nl> public String url = " " ; <nl> + @ Deprecated / / Never really used for anything and format is undefined . See updateJSON for replacement . <nl> public String updateUrl = " " ; <nl> + / * * <nl> + * URL to update json file . Format is defined here : https : / / gist . github . com / LexManos / 7aacb9aa991330523884 <nl> + * / <nl> + public String updateJSON = " " ; <nl> <nl> public String logoFile = " " ; <nl> public String version = " " ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / FMLConfig . java b / src / main / java / net / minecraftforge / fml / FMLConfig . java 
 index ba9b33d . . 19fc613 100644 
 - - - a / src / main / java / net / minecraftforge / fml / FMLConfig . java 
 + + + b / src / main / java / net / minecraftforge / fml / FMLConfig . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . nio . file . Path ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class FMLConfig 
 @ @ - 78 , 7 + 79 , 7 @ @ public class FMLConfig 
 } 
 catch ( IOException ioe ) 
 { 
 - fmlLog . error ( " Unable to read FML config at { } " , configFile , ioe ) ; 
 + fmlLog . error ( CORE , " Unable to read FML config at { } " , configFile , ioe ) ; 
 throw new RuntimeException ( " Unable to read FML config " , ioe ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / FileUtils . java b / src / main / java / net / minecraftforge / fml / FileUtils . java 
 index e33ab2d . . b99b40b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / FileUtils . java 
 + + + b / src / main / java / net / minecraftforge / fml / FileUtils . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . nio . file . FileAlreadyExistsException ; 
 import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class FileUtils 
 @ @ - 31 , 20 + 32 , 20 @ @ public class FileUtils 
 public static Path getOrCreateDirectory ( Path dirPath , String dirLabel ) { 
 if ( ! Files . isDirectory ( dirPath ) ) 
 { 
 - fmlLog . debug ( " Making { } directory : { } " , dirLabel , dirPath ) ; 
 + fmlLog . debug ( CORE , " Making { } directory : { } " , dirLabel , dirPath ) ; 
 try { 
 Files . createDirectory ( dirPath ) ; 
 } catch ( IOException e ) { 
 if ( e instanceof FileAlreadyExistsException ) { 
 - fmlLog . error ( " Failed to create { } directory - there is a file in the way " , dirLabel ) ; 
 + fmlLog . error ( CORE , " Failed to create { } directory - there is a file in the way " , dirLabel ) ; 
 } else { 
 - fmlLog . error ( " Problem with creating { } directory ( Permissions ? ) " , dirLabel , e ) ; 
 + fmlLog . error ( CORE , " Problem with creating { } directory ( Permissions ? ) " , dirLabel , e ) ; 
 } 
 throw new RuntimeException ( " Problem creating directory " , e ) ; 
 } 
 - fmlLog . debug ( " Created { } directory : { } " , dirLabel , dirPath ) ; 
 + fmlLog . debug ( CORE , " Created { } directory : { } " , dirLabel , dirPath ) ; 
 } else { 
 - fmlLog . debug ( " Found existing { } directory : { } " , dirLabel , dirPath ) ; 
 + fmlLog . debug ( CORE , " Found existing { } directory : { } " , dirLabel , dirPath ) ; 
 } 
 return dirPath ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / Logging . java b / src / main / java / net / minecraftforge / fml / Logging . java 
 index e97b6b7 . . de7234c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / Logging . java 
 + + + b / src / main / java / net / minecraftforge / fml / Logging . java 
 @ @ - 22 , 9 + 22 , 14 @ @ package net . minecraftforge . fml ; 
 import org . apache . logging . log4j . Level ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 + import org . apache . logging . log4j . Marker ; 
 + import org . apache . logging . log4j . MarkerManager ; 
 import org . apache . logging . log4j . core . config . Configurator ; 
 
 public class Logging 
 { 
 public static final Logger fmlLog = LogManager . getLogger ( " FML " ) ; 
 + public static final Marker CORE = MarkerManager . getMarker ( " CORE " ) ; 
 + public static final Marker LOADING = MarkerManager . getMarker ( " LOADING " ) ; 
 + public static final Marker SCAN = MarkerManager . getMarker ( " SCAN " ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / StringUtils . java b / src / main / java / net / minecraftforge / fml / StringUtils . java 
 new file mode 100644 
 index 0000000 . . 5d2b8f3 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / StringUtils . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml ; 
 + 
 + / * * 
 + * Created by cpw on 05 / 06 / 17 . 
 + * / 
 + public class StringUtils 
 + { 
 + public static String toLowerCase ( final String str ) { 
 + return str . toLowerCase ( java . util . Locale . ROOT ) ; 
 + } 
 + 
 + public static boolean endsWith ( final String search , final String . . . endings ) { 
 + String lowerSearch = toLowerCase ( search ) ; 
 + return java . util . stream . Stream . of ( endings ) . anyMatch ( lowerSearch : : endsWith ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLPaths . java b / src / main / java / net / minecraftforge / fml / common / FMLPaths . java 
 index f53e9e2 . . 0a570d7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLPaths . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLPaths . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 import java . util . Objects ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public enum FMLPaths 
 @ @ - 70 , 7 + 71 , 7 @ @ public enum FMLPaths 
 for ( FMLPaths path : FMLPaths . values ( ) ) 
 { 
 path . absolutePath = rootPath . resolve ( path . relativePath ) . toAbsolutePath ( ) ; 
 - fmlLog . debug ( " Path { } is { } " , ( ) - > path , ( ) - > path . absolutePath ) ; 
 + fmlLog . debug ( CORE , " Path { } is { } " , ( ) - > path , ( ) - > path . absolutePath ) ; 
 if ( path . isDirectory ) 
 { 
 FileUtils . getOrCreateDirectory ( path . absolutePath , path . name ( ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java b / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java 
 index 48db48c . . 5aecb99 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLLoader . java 
 @ @ - 25 , 9 + 25 , 20 @ @ import cpw . mods . modlauncher . api . IncompatibleEnvironmentException ; 
 import cpw . mods . modlauncher . serviceapi . ILaunchPluginService ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModDiscoverer ; 
 + import net . minecraftforge . forgespi . ICoreModProvider ; 
 
 + import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 + import java . util . HashSet ; 
 + import java . util . Iterator ; 
 + import java . util . List ; 
 + import java . util . ServiceLoader ; 
 import java . util . Set ; 
 + import java . util . stream . Collectors ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 + import static net . minecraftforge . fml . Logging . LOADING ; 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class FMLLoader 
 @ @ - 35 , 28 + 46 , 48 @ @ public class FMLLoader 
 
 private static ILaunchPluginService accessTransformer ; 
 private static ModDiscoverer modDiscoverer ; 
 + private static ICoreModProvider coreMod ; 
 
 - static void initialize ( IEnvironment environment , Set < String > otherServices ) throws IncompatibleEnvironmentException 
 + static void onInitialLoad ( IEnvironment environment , Set < String > otherServices ) throws IncompatibleEnvironmentException 
 { 
 final String version = ForgeVersion . getVersion ( ) ; 
 - fmlLog . debug ( " FML { } loading " , version ) ; 
 + fmlLog . debug ( CORE , " FML { } loading " , version ) ; 
 final Package modLauncherPackage = ITransformationService . class . getPackage ( ) ; 
 - fmlLog . debug ( " FML found ModLauncher version : { } " , modLauncherPackage . getImplementationVersion ( ) ) ; 
 + fmlLog . debug ( CORE , " FML found ModLauncher version : { } " , modLauncherPackage . getImplementationVersion ( ) ) ; 
 if ( ! modLauncherPackage . isCompatibleWith ( " 1 . 0 " ) ) { 
 - fmlLog . error ( " Found incompatible ModLauncher specification : { } , version { } from { } " , modLauncherPackage . getSpecificationVersion ( ) , modLauncherPackage . getImplementationVersion ( ) , modLauncherPackage . getImplementationVendor ( ) ) ; 
 + fmlLog . error ( CORE , " Found incompatible ModLauncher specification : { } , version { } from { } " , modLauncherPackage . getSpecificationVersion ( ) , modLauncherPackage . getImplementationVersion ( ) , modLauncherPackage . getImplementationVendor ( ) ) ; 
 throw new IncompatibleEnvironmentException ( " Incompatible modlauncher found " + modLauncherPackage . getSpecificationVersion ( ) ) ; 
 } 
 
 accessTransformer = environment . findLaunchPlugin ( " accesstransformer " ) . orElseThrow ( ( ) - > new IncompatibleEnvironmentException ( " Missing AccessTransformer , cannot run " ) ) ; 
 
 final Package atPackage = accessTransformer . getClass ( ) . getPackage ( ) ; 
 - fmlLog . debug ( " FML found AccessTransformer version : { } " , atPackage . getImplementationVersion ( ) ) ; 
 + fmlLog . debug ( CORE , " FML found AccessTransformer version : { } " , atPackage . getImplementationVersion ( ) ) ; 
 if ( ! atPackage . isCompatibleWith ( " 1 . 0 " ) ) { 
 - fmlLog . error ( " Found incompatible AccessTransformer specification : { } , version { } from { } " , atPackage . getSpecificationVersion ( ) , atPackage . getImplementationVersion ( ) , atPackage . getImplementationVendor ( ) ) ; 
 + fmlLog . error ( CORE , " Found incompatible AccessTransformer specification : { } , version { } from { } " , atPackage . getSpecificationVersion ( ) , atPackage . getImplementationVersion ( ) , atPackage . getImplementationVendor ( ) ) ; 
 + throw new IncompatibleEnvironmentException ( " Incompatible accesstransformer found " + atPackage . getSpecificationVersion ( ) ) ; 
 } 
 - / / final ILaunchPluginService coreMod = environment . findLaunchPlugin ( " coremod " ) . orElseThrow ( ( ) - > new IncompatibleEnvironmentException ( " Missing CoreMod , cannot run " ) ) ; 
 
 - fmlLog . debug ( " Scanning for Mod Locators " ) ; 
 + final ArrayList < ICoreModProvider > coreModProviders = new ArrayList < > ( ) ; 
 + ServiceLoader . load ( ICoreModProvider . class ) . forEach ( coreModProviders : : add ) ; 
 + 
 + if ( coreModProviders . isEmpty ( ) ) { 
 + fmlLog . error ( CORE , " Found no coremod provider . Cannot run " ) ; 
 + throw new IncompatibleEnvironmentException ( " No coremod library found " ) ; 
 + } else if ( coreModProviders . size ( ) > 1 ) { 
 + fmlLog . error ( CORE , " Found multiple coremod providers : { } . Cannot run " , coreModProviders . stream ( ) . map ( p - > p . getClass ( ) . getName ( ) ) . collect ( Collectors . toList ( ) ) ) ; 
 + throw new IncompatibleEnvironmentException ( " Multiple coremod libraries found " ) ; 
 + } 
 + 
 + coreMod = coreModProviders . get ( 0 ) ; 
 + final Package coremodPackage = coreMod . getClass ( ) . getPackage ( ) ; 
 + fmlLog . debug ( CORE , " FML found CoreMod version : { } " , coremodPackage . getImplementationVersion ( ) ) ; 
 + } 
 + 
 + public static void load ( ) 
 + { 
 + fmlLog . debug ( SCAN , " Scanning for Mod Locators " ) ; 
 modDiscoverer = new ModDiscoverer ( ) ; 
 + modDiscoverer . discoverMods ( ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java 
 index 4cda27b . . 3ceec55 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLServiceProvider . java 
 @ @ - 29 , 12 + 29 , 12 @ @ import net . minecraftforge . fml . FMLConfig ; 
 import net . minecraftforge . fml . common . FMLPaths ; 
 
 import javax . annotation . Nonnull ; 
 - import java . io . IOException ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Set ; 
 import java . util . function . BiFunction ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class FMLServiceProvider implements ITransformationService 
 @ @ - 54 , 16 + 54 , 18 @ @ public class FMLServiceProvider implements ITransformationService 
 @ Override 
 public void initialize ( IEnvironment environment ) 
 { 
 - fmlLog . debug ( " Setting up basic FML game directories " ) ; 
 + fmlLog . debug ( CORE , " Setting up basic FML game directories " ) ; 
 FMLPaths . setup ( environment ) ; 
 - fmlLog . debug ( " Loading configuration " ) ; 
 + fmlLog . debug ( CORE , " Loading configuration " ) ; 
 FMLConfig . load ( ) ; 
 + fmlLog . debug ( CORE , " Initiating mod scan " ) ; 
 + FMLLoader . load ( ) ; 
 } 
 
 @ Override 
 public void onLoad ( IEnvironment environment , Set < String > otherServices ) throws IncompatibleEnvironmentException 
 { 
 - FMLLoader . initialize ( environment , otherServices ) ; 
 + FMLLoader . onInitialLoad ( environment , otherServices ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java 
 index 2e870f2 . . 93694a4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / BackgroundScanHandler . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . util . concurrent . ExecutorService ; 
 import java . util . concurrent . Executors ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class BackgroundScanHandler 
 @ @ - 56 , 7 + 57 , 7 @ @ public class BackgroundScanHandler 
 
 private void addCompletedFile ( final ModFile file , final ScanResult scanResult , final Throwable throwable ) { 
 if ( throwable ! = null ) { 
 - fmlLog . error ( " An error occurred scanning file { } " , file , throwable ) ; 
 + fmlLog . error ( SCAN , " An error occurred scanning file { } " , file , throwable ) ; 
 } 
 pendingFiles . remove ( file ) ; 
 scannedFiles . add ( file ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / CoreModFile . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / CoreModFile . java 
 index 2410559 . . 6be7dd4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / CoreModFile . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / CoreModFile . java 
 @ @ - 19 , 24 + 19 , 31 @ @ 
 
 package net . minecraftforge . fml . loading . moddiscovery ; 
 
 - public class CoreModFile implements net . minecraftforge . forgespi . ICoreModFile { 
 - private final java . nio . file . Path internalPath ; 
 + import net . minecraftforge . forgespi . ICoreModFile ; 
 + 
 + import java . io . IOException ; 
 + import java . io . Reader ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Path ; 
 + 
 + public class CoreModFile implements ICoreModFile { 
 + private final Path internalPath ; 
 private final ModFile file ; 
 private final String name ; 
 
 - CoreModFile ( final String name , final java . nio . file . Path path , final ModFile file ) { 
 + CoreModFile ( final String name , final Path path , final ModFile file ) { 
 this . name = name ; 
 this . internalPath = path ; 
 this . file = file ; 
 } 
 
 @ Override 
 - public java . io . Reader readCoreMod ( ) throws java . io . IOException { 
 - return java . nio . file . Files . newBufferedReader ( this . internalPath ) ; 
 + public Reader readCoreMod ( ) throws IOException { 
 + return Files . newBufferedReader ( this . internalPath ) ; 
 } 
 
 @ Override 
 - public java . nio . file . Path getPath ( ) { 
 + public Path getPath ( ) { 
 return this . internalPath ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ExplodedDirectoryLocator . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ExplodedDirectoryLocator . java 
 index cb5d10b . . 80fc54a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ExplodedDirectoryLocator . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ExplodedDirectoryLocator . java 
 @ @ - 26 , 17 + 26 , 33 @ @ import java . nio . file . Path ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . List ; 
 + import java . util . Optional ; 
 import java . util . function . Consumer ; 
 + import java . util . jar . Manifest ; 
 import java . util . stream . Stream ; 
 
 + import static net . minecraftforge . fml . Logging . LOADING ; 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class ExplodedDirectoryLocator implements IModLocator { 
 private static final String DIR = System . getProperty ( " fml . explodedDir " , " modclasses " ) ; 
 private final Path rootDir ; 
 
 - ExplodedDirectoryLocator ( ) { 
 + public ExplodedDirectoryLocator ( ) { 
 this . rootDir = FileSystems . getDefault ( ) . getPath ( DIR ) ; 
 + if ( ! Files . exists ( this . rootDir ) ) { 
 + fmlLog . debug ( LOADING , " Creating directory { } " + this . rootDir ) ; 
 + try 
 + { 
 + Files . createDirectory ( this . rootDir ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + fmlLog . error ( LOADING , " Error creating { } " , this . rootDir , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 } 
 
 @ Override 
 @ @ - 59 , 12 + 75 , 24 @ @ public class ExplodedDirectoryLocator implements IModLocator { 
 
 @ Override 
 public void scanFile ( final ModFile modFile , final Consumer < Path > pathConsumer ) { 
 - fmlLog . debug ( " Scanning directory { } " , rootDir ) ; 
 + fmlLog . debug ( SCAN , " Scanning directory { } " , rootDir ) ; 
 try ( Stream < Path > files = Files . find ( rootDir , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { 
 files . forEach ( pathConsumer ) ; 
 } catch ( IOException e ) { 
 e . printStackTrace ( ) ; 
 } 
 - fmlLog . debug ( " Directory scan complete { } " , rootDir ) ; 
 + fmlLog . debug ( SCAN , " Directory scan complete { } " , rootDir ) ; 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " { ExplodedDir locator at " + this . rootDir + " } " ; 
 + } 
 + 
 + @ Override 
 + public Optional < Manifest > findManifest ( Path file ) 
 + { 
 + return Optional . empty ( ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 index 5998912 . . 27dc4f0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Map ; 
 import java . util . ServiceLoader ; 
 import java . util . stream . Collectors ; 
 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class ModDiscoverer { 
 @ @ - 36 , 7 + 37 , 7 @ @ public class ModDiscoverer { 
 public ModDiscoverer ( ) { 
 locators = ServiceLoader . load ( IModLocator . class ) ; 
 locatorList = ServiceLoaderStreamUtils . toList ( this . locators ) ; 
 - fmlLog . debug ( " Found Mod Locators : { } " , ( ) - > locatorList . stream ( ) . map ( IModLocator : : name ) . collect ( Collectors . joining ( " , " ) ) ) ; 
 + fmlLog . debug ( SCAN , " Found Mod Locators : { } " , ( ) - > locatorList . stream ( ) . map ( iModLocator - > " ( " + iModLocator . name ( ) + " : " + iModLocator . getClass ( ) . getPackage ( ) . getImplementationVersion ( ) + " ) " ) . collect ( Collectors . joining ( " , " ) ) ) ; 
 } 
 
 ModDiscoverer ( List < IModLocator > locatorList ) { 
 @ @ - 45 , 22 + 46 , 21 @ @ public class ModDiscoverer { 
 } 
 
 public BackgroundScanHandler discoverMods ( ) { 
 - fmlLog . debug ( " Scanning for mods and other resources to load . We know { } ways to find mods " , locatorList . size ( ) ) ; 
 + fmlLog . debug ( SCAN , " Scanning for mods and other resources to load . We know { } ways to find mods " , locatorList . size ( ) ) ; 
 final Map < ModFile . Type , List < ModFile > > modFiles = locatorList . stream ( ) 
 - . peek ( loc - > fmlLog . debug ( " Trying locator { } " , loc ) ) 
 + . peek ( loc - > fmlLog . debug ( SCAN , " Trying locator { } " , loc ) ) 
 . map ( IModLocator : : scanMods ) 
 . flatMap ( Collection : : stream ) 
 - . peek ( mf - > fmlLog . debug ( " Found mod file { } of type { } with locator { } " , mf . getFileName ( ) , mf . getType ( ) , mf . getLocator ( ) ) ) 
 + . peek ( mf - > fmlLog . debug ( SCAN , " Found mod file { } of type { } with locator { } " , mf . getFileName ( ) , mf . getType ( ) , mf . getLocator ( ) ) ) 
 . collect ( Collectors . groupingBy ( ModFile : : getType ) ) ; 
 
 - ModLanguageProvider . loadAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; 
 + / / ModLanguageProvider . loadAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; 
 BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; 
 final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; 
 mods . forEach ( ModFile : : identifyMods ) ; 
 - fmlLog . debug ( " Found { } mod files with { } mods " , mods : : size , ( ) - > mods . stream ( ) . mapToInt ( mf - > mf . getModInfos ( ) . size ( ) ) . sum ( ) ) ; 
 - mods . stream ( ) . map ( ModFile : : getCoreMods ) . flatMap ( List : : stream ) . forEach ( ServiceProviders . getCoreModProvider ( ) : : addCoreMod ) ; 
 + fmlLog . debug ( SCAN , " Found { } mod files with { } mods " , mods : : size , ( ) - > mods . stream ( ) . mapToInt ( mf - > mf . getModInfos ( ) . size ( ) ) . sum ( ) ) ; 
 + / / mods . stream ( ) . map ( ModFile : : getCoreMods ) . flatMap ( List : : stream ) . forEach ( ServiceProviders . getCoreModProvider ( ) : : addCoreMod ) ; 
 mods . forEach ( backgroundScanHandler : : submitForScanning ) ; 
 return backgroundScanHandler ; 
 } 
 - 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java 
 index 8d995f5 . . 8733035 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFile . java 
 @ @ - 28 , 6 + 28 , 8 @ @ import java . util . function . Consumer ; 
 import java . util . jar . Attributes ; 
 import java . util . jar . Manifest ; 
 
 + import static net . minecraftforge . fml . Logging . LOADING ; 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class ModFile 
 @ @ - 56 , 8 + 58 , 8 @ @ public class ModFile 
 this . locator = locator ; 
 this . filePath = file ; 
 manifest = locator . findManifest ( file ) . orElse ( DEFAULTMANIFEST ) ; 
 - if ( manifest ! = DEFAULTMANIFEST ) fmlLog . debug ( " Mod file { } has a manifest " , file ) ; 
 - else fmlLog . debug ( " Mod file { } is missing a manifest " , file ) ; 
 + if ( manifest ! = DEFAULTMANIFEST ) fmlLog . debug ( SCAN , " Mod file { } has a manifest " , file ) ; 
 + else fmlLog . debug ( SCAN , " Mod file { } is missing a manifest " , file ) ; 
 modFileType = Type . valueOf ( manifest . getMainAttributes ( ) . getValue ( TYPE ) ) ; 
 } 
 
 @ @ - 75 , 9 + 77 , 9 @ @ public class ModFile 
 
 public void identifyMods ( ) { 
 this . modInfos = ModFileParser . readModList ( this ) ; 
 - this . modInfos . forEach ( mi - > fmlLog . debug ( " Found mod { } for language { } " , mi . getModId ( ) , mi . getModLoader ( ) ) ) ; 
 + this . modInfos . forEach ( mi - > fmlLog . debug ( LOADING , " Found mod { } for language { } " , mi . getModId ( ) , mi . getModLoader ( ) ) ) ; 
 this . coreMods = ModFileParser . getCoreMods ( this ) ; 
 - this . coreMods . forEach ( mi - > fmlLog . debug ( " Found coremod { } " , mi . getPath ( ) ) ) ; 
 + this . coreMods . forEach ( mi - > fmlLog . debug ( LOADING , " Found coremod { } " , mi . getPath ( ) ) ) ; 
 } 
 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFileParser . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFileParser . java 
 index 1ab2163 . . 1bba72e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFileParser . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModFileParser . java 
 @ @ - 27 , 45 + 27 , 54 @ @ import com . google . gson . reflect . TypeToken ; 
 import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 
 + import java . io . IOException ; 
 + import java . lang . reflect . Type ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Path ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 import java . util . Map ; 
 + import java . util . stream . Collectors ; 
 + import java . util . stream . Stream ; 
 
 + import static net . minecraftforge . fml . Logging . LOADING ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class ModFileParser { 
 - protected static java . util . List < net . minecraftforge . fml . loading . moddiscovery . ModInfo > readModList ( final ModFile modFile ) { 
 - fmlLog . debug ( " Parsing mod file candidate { } " , modFile . getFilePath ( ) ) ; 
 + protected static List < ModInfo > readModList ( final ModFile modFile ) { 
 + fmlLog . debug ( LOADING , " Parsing mod file candidate { } " , modFile . getFilePath ( ) ) ; 
 try { 
 - final java . nio . file . Path modsjson = modFile . getLocator ( ) . findPath ( modFile , " META - INF " , " mods . json " ) ; 
 + final Path modsjson = modFile . getLocator ( ) . findPath ( modFile , " META - INF " , " mods . json " ) ; 
 GsonBuilder gsonBuilder = new GsonBuilder ( ) ; 
 gsonBuilder . registerTypeAdapter ( ModInfo . class , ( InstanceCreator < ModInfo > ) ic - > new ModInfo ( modFile , null , null , null , null , null , null , null ) ) ; 
 gsonBuilder . registerTypeAdapter ( ArtifactVersion . class , ( JsonDeserializer < ArtifactVersion > ) ( element , type , context ) - > new DefaultArtifactVersion ( element . getAsString ( ) ) ) ; 
 Gson gson = gsonBuilder . create ( ) ; 
 - final ModInfo [ ] modInfos = gson . fromJson ( java . nio . file . Files . newBufferedReader ( modsjson ) , ModInfo [ ] . class ) ; 
 - return java . util . stream . Stream . of ( modInfos ) . collect ( java . util . stream . Collectors . toList ( ) ) ; 
 - } catch ( java . io . IOException e ) { 
 - fmlLog . debug ( " Ignoring invalid JAR file { } " , modFile . getFilePath ( ) ) ; 
 - return java . util . Collections . emptyList ( ) ; 
 + final ModInfo [ ] modInfos = gson . fromJson ( Files . newBufferedReader ( modsjson ) , ModInfo [ ] . class ) ; 
 + return Stream . of ( modInfos ) . collect ( Collectors . toList ( ) ) ; 
 + } catch ( IOException e ) { 
 + fmlLog . debug ( LOADING , " Ignoring invalid JAR file { } " , modFile . getFilePath ( ) ) ; 
 + return Collections . emptyList ( ) ; 
 } 
 } 
 
 - protected static java . util . List < CoreModFile > getCoreMods ( final ModFile modFile ) { 
 - java . util . Map < String , String > coreModPaths ; 
 + protected static List < CoreModFile > getCoreMods ( final ModFile modFile ) { 
 + Map < String , String > coreModPaths ; 
 try { 
 - final java . nio . file . Path coremodsjson = modFile . getLocator ( ) . findPath ( modFile , " META - INF " , " coremods . json " ) ; 
 - if ( ! java . nio . file . Files . exists ( coremodsjson ) ) { 
 - return java . util . Collections . emptyList ( ) ; 
 + final Path coremodsjson = modFile . getLocator ( ) . findPath ( modFile , " META - INF " , " coremods . json " ) ; 
 + if ( ! Files . exists ( coremodsjson ) ) { 
 + return Collections . emptyList ( ) ; 
 } 
 - final java . lang . reflect . Type type = new TypeToken < Map < String , String > > ( ) { } . getType ( ) ; 
 + final Type type = new TypeToken < Map < String , String > > ( ) { } . getType ( ) ; 
 final Gson gson = new Gson ( ) ; 
 - coreModPaths = gson . fromJson ( java . nio . file . Files . newBufferedReader ( coremodsjson ) , type ) ; 
 - } catch ( java . io . IOException e ) { 
 - fmlLog . debug ( " Failed to read coremod list coremods . json " , e ) ; 
 - return java . util . Collections . emptyList ( ) ; 
 + coreModPaths = gson . fromJson ( Files . newBufferedReader ( coremodsjson ) , type ) ; 
 + } catch ( IOException e ) { 
 + fmlLog . debug ( LOADING , " Failed to read coremod list coremods . json " , e ) ; 
 + return Collections . emptyList ( ) ; 
 } 
 
 return coreModPaths . entrySet ( ) . stream ( ) . 
 - peek ( e - > fmlLog . debug ( " Found coremod { } with Javascript path { } " , e . getKey ( ) , e . getValue ( ) ) ) . 
 + peek ( e - > fmlLog . debug ( LOADING , " Found coremod { } with Javascript path { } " , e . getKey ( ) , e . getValue ( ) ) ) . 
 map ( e - > new CoreModFile ( e . getKey ( ) , modFile . getLocator ( ) . findPath ( modFile , e . getValue ( ) ) , modFile ) ) . 
 - collect ( java . util . stream . Collectors . toList ( ) ) ; 
 + collect ( Collectors . toList ( ) ) ; 
 } 
 } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModsFolderLocator . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModsFolderLocator . java 
 index 8ab977d . . c7adf78 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModsFolderLocator . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModsFolderLocator . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package net . minecraftforge . fml . loading . moddiscovery ; 
 
 + import net . minecraftforge . fml . StringUtils ; 
 import net . minecraftforge . fml . common . FMLPaths ; 
 
 import java . io . IOException ; 
 @ @ - 31 , 12 + 32 , 16 @ @ import java . util . Comparator ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Optional ; 
 import java . util . function . Consumer ; 
 + import java . util . jar . JarFile ; 
 + import java . util . jar . Manifest ; 
 import java . util . stream . Collectors ; 
 import java . util . stream . Stream ; 
 import java . util . zip . ZipError ; 
 
 import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . uncheck ; 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 / * * 
 @ @ - 57 , 6 + 62 , 7 @ @ public class ModsFolderLocator implements IModLocator { 
 
 @ Override 
 public List < ModFile > scanMods ( ) { 
 + fmlLog . debug ( SCAN , " Scanning mods dir { } for mods " , this . modFolder ) ; 
 return uncheck ( ( ) - > Files . list ( this . modFolder ) ) . 
 sorted ( Comparator . comparing ( path - > StringUtils . toLowerCase ( path . getFileName ( ) . toString ( ) ) ) ) . 
 filter ( p - > StringUtils . toLowerCase ( p . getFileName ( ) . toString ( ) ) . endsWith ( SUFFIX ) ) . 
 @ @ - 74 , 7 + 80 , 7 @ @ public class ModsFolderLocator implements IModLocator { 
 try { 
 return FileSystems . newFileSystem ( modFile . getFilePath ( ) , modFile . getClass ( ) . getClassLoader ( ) ) ; 
 } catch ( ZipError | IOException e ) { 
 - fmlLog . debug ( " Ignoring invalid JAR file { } " , modFile . getFilePath ( ) ) ; 
 + fmlLog . debug ( SCAN , " Ignoring invalid JAR file { } " , modFile . getFilePath ( ) ) ; 
 return null ; 
 } 
 } 
 @ @ - 89 , 7 + 95 , 7 @ @ public class ModsFolderLocator implements IModLocator { 
 
 @ Override 
 public void scanFile ( final ModFile file , final Consumer < Path > pathConsumer ) { 
 - fmlLog . debug ( " Scan started : { } " , file ) ; 
 + fmlLog . debug ( SCAN , " Scan started : { } " , file ) ; 
 FileSystem fs = modJars . get ( file ) ; 
 fs . getRootDirectories ( ) . forEach ( path - > { 
 try ( Stream < Path > files = Files . find ( path , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { 
 @ @ - 98 , 11 + 104 , 24 @ @ public class ModsFolderLocator implements IModLocator { 
 e . printStackTrace ( ) ; 
 } 
 } ) ; 
 - fmlLog . debug ( " Scan finished : { } " , file ) ; 
 + fmlLog . debug ( SCAN , " Scan finished : { } " , file ) ; 
 } 
 
 @ Override 
 public String toString ( ) { 
 - return " { FolderJar locator at " + this . modFolder + " } " ; 
 + return " { ModJarsFolder locator at " + this . modFolder + " } " ; 
 + } 
 + 
 + @ Override 
 + public Optional < Manifest > findManifest ( final Path file ) 
 + { 
 + try ( JarFile jf = new JarFile ( file . toFile ( ) ) ) 
 + { 
 + return Optional . ofNullable ( jf . getManifest ( ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + return Optional . empty ( ) ; 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java 
 index 58456fa . . 0770426 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / Scanner . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . loading . moddiscovery ; 
 
 import org . objectweb . asm . ClassReader ; 
 
 + import static net . minecraftforge . fml . Logging . SCAN ; 
 import static net . minecraftforge . fml . Logging . fmlLog ; 
 
 public class Scanner { 
 @ @ - 38 , 7 + 39 , 7 @ @ public class Scanner { 
 
 private void fileVisitor ( final java . nio . file . Path path , final ScanResult result ) { 
 try { 
 - fmlLog . debug ( " Scanning { } path { } " , fileToScan , path ) ; 
 + fmlLog . debug ( SCAN , " Scanning { } path { } " , fileToScan , path ) ; 
 ModClassVisitor mcv = new ModClassVisitor ( ) ; 
 org . objectweb . asm . ClassReader cr = new ClassReader ( java . nio . file . Files . newInputStream ( path ) ) ; 
 cr . accept ( mcv , 0 ) ; 
 diff - - git a / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator b / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator 
 new file mode 100644 
 index 0000000 . . ef7ed2c 
 - - - / dev / null 
 + + + b / src / main / resources / META - INF / services / net . minecraftforge . fml . loading . moddiscovery . IModLocator 
 @ @ - 0 , 0 + 1 , 2 @ @ 
 + net . minecraftforge . fml . loading . moddiscovery . ModsFolderLocator 
 + net . minecraftforge . fml . loading . moddiscovery . ExplodedDirectoryLocator 
 \ No newline at end of file 
 diff - - git a / src / main / resources / log4j2 . xml b / src / main / resources / log4j2 . xml 
 index 3254c08 . . 19bb2e2 100644 
 - - - a / src / main / resources / log4j2 . xml 
 + + + b / src / main / resources / log4j2 . xml 
 @ @ - 2 , 7 + 2 , 7 @ @ 
 < Configuration status = " WARN " packages = " com . mojang . util " > 
 < Appenders > 
 < Console name = " FmlSysOut " target = " SYSTEM _ OUT " > 
 - < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger ] : % msg % n " / > 
 + < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] [ % logger / % marker ] : % msg % n " / > 
 < / Console > 
 < Console name = " SysOut " target = " SYSTEM _ OUT " > 
 < PatternLayout pattern = " [ % d { HH : mm : ss } ] [ % t / % level ] : % msg % n " / >

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 index 1f3e186 . . fcfee4e 100644 
 - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 @ @ - 6 , 42 + 6 , 38 @ @ 
 package net . minecraftforge . client . gui ; 
 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . Comparator ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 import java . util . TreeMap ; 
 - import java . util . regex . Pattern ; 
 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . gui . GuiScreen ; 
 - import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . client . resources . I18n ; 
 import net . minecraftforge . common . ForgeChunkManager ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . config . ConfigCategory ; 
 import net . minecraftforge . common . config . ConfigElement ; 
 import net . minecraftforge . common . config . Configuration ; 
 import net . minecraftforge . common . config . Property ; 
 import net . minecraftforge . fml . client . IModGuiFactory ; 
 - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionCategoryElement ; 
 - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionGuiHandler ; 
 import net . minecraftforge . fml . client . config . ConfigGuiType ; 
 import net . minecraftforge . fml . client . config . DummyConfigElement ; 
 import net . minecraftforge . fml . client . config . DummyConfigElement . DummyCategoryElement ; 
 - import net . minecraftforge . fml . client . config . GuiButtonExt ; 
 import net . minecraftforge . fml . client . config . GuiConfig ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . CategoryEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . SelectValueEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . BooleanEntry ; 
 - import net . minecraftforge . fml . client . config . HoverChecker ; 
 import net . minecraftforge . fml . client . config . IConfigElement ; 
 - import net . minecraftforge . fml . client . config . GuiConfigEntries . ListEntryBase ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 - import net . minecraftforge . fml . relauncher . Side ; 
 - import net . minecraftforge . fml . relauncher . SideOnly ; 
 + import static net . minecraftforge . common . ForgeModContainer . VERSION _ CHECK _ CAT ; 
 
 / * * 
 * This is the base GuiConfig screen class that all the other Forge - specific config screens will be called from . 
 @ @ - 109 , 6 + 105 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory 
 List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; 
 list . add ( new DummyCategoryElement ( " forgeCfg " , " forge . configgui . ctgy . forgeGeneralConfig " , GeneralEntry . class ) ) ; 
 list . add ( new DummyCategoryElement ( " forgeChunkLoadingCfg " , " forge . configgui . ctgy . forgeChunkLoadingConfig " , ChunkLoaderEntry . class ) ) ; 
 + list . add ( new DummyCategoryElement ( " forgeVersionCheckCfg " , " forge . configgui . ctgy . VersionCheckConfig " , VersionCheckEntry . class ) ) ; 
 return list ; 
 } 
 
 @ @ - 167 , 6 + 164 , 59 @ @ public class ForgeGuiFactory implements IModGuiFactory 
 } 
 
 / * * 
 + * This custom list entry provides the Forge Version Checking Config entry on the Minecraft Forge Configuration screen . 
 + * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . 
 + * / 
 + public static class VersionCheckEntry extends CategoryEntry 
 + { 
 + public VersionCheckEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement prop ) 
 + { 
 + super ( owningScreen , owningEntryList , prop ) ; 
 + } 
 + 
 + @ Override 
 + protected GuiScreen buildChildScreen ( ) 
 + { 
 + ConfigCategory cfg = ForgeModContainer . getConfig ( ) . getCategory ( VERSION _ CHECK _ CAT ) ; 
 + Map < String , Property > values = new HashMap < String , Property > ( cfg . getValues ( ) ) ; 
 + values . remove ( " Global " ) ; 
 + 
 + Property global = ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , " Global " , true ) ; 
 + 
 + List < Property > props = new ArrayList < Property > ( ) ; 
 + 
 + for ( ModContainer mod : ForgeVersion . gatherMods ( ) . keySet ( ) ) 
 + { 
 + values . remove ( mod . getModId ( ) ) ; 
 + props . add ( ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) ) ; / / Get or make the value in the config 
 + } 
 + props . addAll ( values . values ( ) ) ; / / Add any left overs from the config 
 + Collections . sort ( props , new Comparator < Property > ( ) 
 + { 
 + @ Override 
 + public int compare ( Property o1 , Property o2 ) 
 + { 
 + return o1 . getName ( ) . compareTo ( o2 . getName ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; 
 + list . add ( new ConfigElement ( global ) ) ; 
 + for ( Property prop : props ) 
 + { 
 + list . add ( new ConfigElement ( prop ) ) ; 
 + } 
 + 
 + / / This GuiConfig object specifies the configID of the object and as such will force - save when it is closed . The parent 
 + / / GuiConfig object ' s propertyList will also be refreshed to reflect the changes . 
 + return new GuiConfig ( this . owningScreen , 
 + list , 
 + this . owningScreen . modID , VERSION _ CHECK _ CAT , true , true , 
 + GuiConfig . getAbridgedConfigPath ( ForgeModContainer . getConfig ( ) . toString ( ) ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 * This custom list entry provides the Mod Overrides entry on the Forge Chunk Loading config screen . 
 * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . 
 * In this case it adds the custom entry for adding a new mod override and lists the existing mod overrides . 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 7105295 . . 3805d49 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 12 , 13 + 12 , 14 @ @ import static net . minecraftforge . common . ForgeVersion . revisionVersion ; 
 import static net . minecraftforge . common . config . Configuration . CATEGORY _ GENERAL ; 
 
 import java . io . File ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 - import net . minecraft . init . Blocks ; 
 import net . minecraft . nbt . NBTBase ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . world . storage . SaveHandler ; 
 @ @ - 58 , 6 + 59 , 7 @ @ import net . minecraftforge . fml . common . network . NetworkRegistry ; 
 
 public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer 
 { 
 + public static final String VERSION _ CHECK _ CAT = " version _ checking " ; 
 public static int clumpingThreshold = 64 ; 
 public static boolean removeErroringEntities = false ; 
 public static boolean removeErroringTileEntities = false ; 
 @ @ - 73 , 6 + 75 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean forgeLightPipelineEnabled = true ; 
 
 private static Configuration config ; 
 + private static ForgeModContainer INSTANCE ; 
 + public static ForgeModContainer getInstance ( ) 
 + { 
 + return INSTANCE ; 
 + } 
 + 
 + private URL updateJSONUrl = null ; 
 
 public ForgeModContainer ( ) 
 { 
 @ @ - 82 , 7 + 91 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 meta . name = " Minecraft Forge " ; 
 meta . version = String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 meta . credits = " Made possible with help from many people " ; 
 - meta . authorList = Arrays . asList ( " LexManos " , " Eloraam " , " Spacetoad " ) ; 
 + meta . authorList = Arrays . asList ( " LexManos " , " Cpw " ) ; 
 meta . description = " Minecraft Forge is a common open source API allowing a broad range of mods " + 
 " to work cooperatively together . It allows many mods to be created without " + 
 " them editing the main Minecraft code . " ; 
 @ @ - 90 , 12 + 99 , 17 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; 
 meta . screenshots = new String [ 0 ] ; 
 meta . logoFile = " / forge _ logo . png " ; 
 + try { 
 + updateJSONUrl = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + } catch ( MalformedURLException e ) { } 
 
 config = null ; 
 File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; 
 config = new Configuration ( cfgFile ) ; 
 
 syncConfig ( true ) ; 
 + 
 + INSTANCE = this ; 
 } 
 
 @ Override 
 @ @ - 230 , 6 + 244 , 12 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 
 config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; 
 
 + propOrder = new ArrayList < String > ( ) ; 
 + prop = config . get ( VERSION _ CHECK _ CAT , " Global " , true , " Enable the entire mod update check system . This only applies to mods using the Forge system . " ) ; 
 + propOrder . add ( " Global " ) ; 
 + 
 + config . setCategoryPropertyOrder ( VERSION _ CHECK _ CAT , propOrder ) ; 
 + 
 if ( config . hasChanged ( ) ) 
 { 
 config . save ( ) ; 
 @ @ - 254 , 6 + 274 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 ForgeChunkManager . syncConfigDefaults ( ) ; 
 ForgeChunkManager . loadConfiguration ( ) ; 
 } 
 + else if ( VERSION _ CHECK _ CAT . equals ( event . configID ) ) 
 + { 
 + syncConfig ( false ) ; 
 + } 
 } 
 } 
 
 @ @ - 396 , 4 + 420 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 Certificate [ ] certificates = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; 
 return certificates ! = null ? certificates [ 0 ] : null ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return updateJSONUrl ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index bc5db2f . . 71d594c 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 8 , 13 + 8 , 25 @ @ import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 import java . io . InputStream ; 
 import java . net . URL ; 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . LinkedHashMap ; 
 + import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 + 
 + import org . apache . logging . log4j . Level ; 
 
 import com . google . common . io . ByteStreams ; 
 import com . google . gson . Gson ; 
 
 - import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . InjectedModContainer ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import net . minecraftforge . fml . common . versioning . ComparableVersion ; 
 
 public class ForgeVersion 
 { 
 @ @ - 55 , 12 + 67 , 13 @ @ public class ForgeVersion 
 
 public static Status getStatus ( ) 
 { 
 - return status ; 
 + return getResult ( ForgeModContainer . getInstance ( ) ) . status ; 
 } 
 
 public static String getTarget ( ) 
 { 
 - return target ; 
 + CheckResult res = getResult ( ForgeModContainer . getInstance ( ) ) ; 
 + return res . target ! = null ? res . target . toString ( ) : null ; 
 } 
 
 public static String getVersion ( ) 
 @ @ - 79 , 32 + 92 , 75 @ @ public class ForgeVersion 
 BETA _ OUTDATED 
 } 
 
 + public static class CheckResult 
 + { 
 + public final Status status ; 
 + public final ComparableVersion target ; 
 + public final Map < ComparableVersion , String > changes ; 
 + public final String url ; 
 + 
 + private CheckResult ( Status status , ComparableVersion target , Map < ComparableVersion , String > changes , String url ) 
 + { 
 + this . status = status ; 
 + this . target = target ; 
 + this . changes = changes = = null ? null : Collections . unmodifiableMap ( changes ) ; 
 + this . url = url ; 
 + } 
 + } 
 + 
 public static void startVersionCheck ( ) 
 { 
 new Thread ( " Forge Version Check " ) 
 { 
 - @ SuppressWarnings ( " unchecked " ) 
 @ Override 
 public void run ( ) 
 { 
 + if ( ! ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , " Global " , true ) . getBoolean ( ) ) 
 + { 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " Global Forge version check system disabeld , no futher processing . " ) ; 
 + return ; 
 + } 
 + 
 + for ( Entry < ModContainer , URL > entry : gatherMods ( ) . entrySet ( ) ) 
 + { 
 + ModContainer mod = entry . getKey ( ) ; 
 + if ( ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) . getBoolean ( ) ) 
 + { 
 + process ( mod , entry . getValue ( ) ) ; 
 + } 
 + else 
 + { 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Skipped version check " , mod . getModId ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + private void process ( ModContainer mod , URL url ) 
 + { 
 try 
 { 
 - URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Starting version check at % s " , mod . getModId ( ) , url . toString ( ) ) ; 
 + Status status = PENDING ; 
 + ComparableVersion target = null ; 
 + 
 InputStream con = url . openStream ( ) ; 
 String data = new String ( ByteStreams . toByteArray ( con ) ) ; 
 con . close ( ) ; 
 
 + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , " [ % s ] Received version check data : \ n % s " , mod . getModId ( ) , data ) ; 
 + 
 + 
 Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; 
 - / / String homepage = ( String ) json . get ( " homepage " ) ; 
 Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; 
 + String display _ url = ( String ) json . get ( " homepage " ) ; 
 
 String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; 
 String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; 
 - ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; 
 + ComparableVersion current = new ComparableVersion ( mod . getVersion ( ) ) ; 
 
 if ( rec ! = null ) 
 { 
 - ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; 
 + ComparableVersion recommended = new ComparableVersion ( rec ) ; 
 int diff = recommended . compareTo ( current ) ; 
 
 if ( diff = = 0 ) 
 @ @ - 114 , 39 + 170 , 95 @ @ public class ForgeVersion 
 status = AHEAD ; 
 if ( lat ! = null ) 
 { 
 - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + ComparableVersion latest = new ComparableVersion ( lat ) ; 
 + if ( current . compareTo ( latest ) < 0 ) 
 { 
 status = OUTDATED ; 
 - target = lat ; 
 + target = latest ; 
 } 
 } 
 } 
 else 
 { 
 status = OUTDATED ; 
 - target = rec ; 
 + target = recommended ; 
 } 
 } 
 else if ( lat ! = null ) 
 { 
 - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + ComparableVersion latest = new ComparableVersion ( lat ) ; 
 + if ( current . compareTo ( latest ) < 0 ) 
 { 
 status = BETA _ OUTDATED ; 
 - target = lat ; 
 + target = latest ; 
 } 
 else 
 status = BETA ; 
 } 
 else 
 status = BETA ; 
 + 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Found status : % s Target : % s " , mod . getModId ( ) , status , target ) ; 
 + 
 + Map < ComparableVersion , String > changes = new LinkedHashMap < ComparableVersion , String > ( ) ; 
 + Map < String , String > tmp = ( Map < String , String > ) json . get ( MinecraftForge . MC _ VERSION ) ; 
 + if ( tmp ! = null ) 
 + { 
 + List < ComparableVersion > ordered = new ArrayList < ComparableVersion > ( ) ; 
 + for ( String key : tmp . keySet ( ) ) 
 + { 
 + ComparableVersion ver = new ComparableVersion ( key ) ; 
 + if ( ver . compareTo ( current ) > 0 & & ( target = = null | | ver . compareTo ( target ) < 1 ) ) 
 + { 
 + ordered . add ( ver ) ; 
 + } 
 + } 
 + Collections . sort ( ordered ) ; 
 + 
 + for ( ComparableVersion ver : ordered ) 
 + { 
 + changes . put ( ver , tmp . get ( ver . toString ( ) ) ) ; 
 + } 
 + } 
 + if ( mod instanceof InjectedModContainer ) 
 + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; 
 + results . put ( mod , new CheckResult ( status , target , changes , display _ url ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , e , " Failed to process update information " ) ; 
 status = FAILED ; 
 } 
 } 
 } . start ( ) ; 
 } 
 + 
 + / / Gather a list of mods that have opted in to this update system by providing a URL . 
 + / / Small hack needed to support a interface change until we force a recompile . 
 + public static Map < ModContainer , URL > gatherMods ( ) 
 + { 
 + Map < ModContainer , URL > ret = new HashMap < ModContainer , URL > ( ) ; 
 + for ( ModContainer mod : Loader . instance ( ) . getActiveModList ( ) ) 
 + { 
 + URL url = null ; 
 + try { 
 + url = mod . getUpdateUrl ( ) ; 
 + } catch ( AbstractMethodError abs ) { } / / TODO : Remove this in 1 . 8 . 8 + ? 
 + if ( url ! = null ) 
 + ret . put ( mod , url ) ; 
 + } 
 + return ret ; 
 + } 
 + 
 + private static Map < ModContainer , CheckResult > results = new ConcurrentHashMap < ModContainer , CheckResult > ( ) ; 
 + private static final CheckResult PENDING _ CHECK = new CheckResult ( PENDING , null , null , null ) ; 
 + 
 + public static CheckResult getResult ( ModContainer mod ) 
 + { 
 + if ( mod instanceof InjectedModContainer ) 
 + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; 
 + CheckResult ret = results . get ( mod ) ; 
 + return ret = = null ? PENDING _ CHECK : ret ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / GuiModList . java 
 index ba0085f . . 720e3e0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiModList . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . Comparator ; 
 import java . util . List ; 
 + import java . util . Map . Entry ; 
 
 import javax . imageio . ImageIO ; 
 
 @ @ - 43 , 10 + 44 , 14 @ @ import net . minecraft . util . IChatComponent ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . StringUtils ; 
 import net . minecraftforge . common . ForgeHooks ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . CheckResult ; 
 + import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . ModContainer . Disableable ; 
 + import net . minecraftforge . fml . common . versioning . ComparableVersion ; 
 import static net . minecraft . util . EnumChatFormatting . * ; 
 
 import org . apache . logging . log4j . Level ; 
 @ @ - 343 , 7 + 348 , 7 @ @ public class GuiModList extends GuiScreen 
 ResourceLocation logoPath = null ; 
 Dimension logoDims = new Dimension ( 0 , 0 ) ; 
 List < String > lines = new ArrayList < String > ( ) ; 
 - / / CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; 
 + CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; 
 
 String logoFile = selectedMod . getMetadata ( ) . logoFile ; 
 if ( ! logoFile . isEmpty ( ) ) 
 @ @ - 408 , 8 + 413 , 8 @ @ public class GuiModList extends GuiScreen 
 else 
 lines . add ( " Child mods : " + selectedMod . getMetadata ( ) . getChildModList ( ) ) ; 
 
 - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 
 lines . add ( null ) ; 
 lines . add ( selectedMod . getMetadata ( ) . description ) ; 
 @ @ - 419 , 15 + 424 , 15 @ @ public class GuiModList extends GuiScreen 
 lines . add ( WHITE + selectedMod . getName ( ) ) ; 
 lines . add ( WHITE + " Version : " + selectedMod . getVersion ( ) ) ; 
 lines . add ( WHITE + " Mod State : " + Loader . instance ( ) . getModState ( selectedMod ) ) ; 
 - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 
 lines . add ( null ) ; 
 lines . add ( RED + " No mod information found " ) ; 
 lines . add ( RED + " Ask your mod author to provide a mod mcmod . info file " ) ; 
 } 
 
 - / * if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) 
 + if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) 
 { 
 lines . add ( null ) ; 
 lines . add ( " Changes : " ) ; 
 @ @ - 437 , 7 + 442 , 7 @ @ public class GuiModList extends GuiScreen 
 lines . add ( entry . getValue ( ) ) ; 
 lines . add ( null ) ; 
 } 
 - } * / 
 + } 
 
 modInfo = new Info ( this . width - this . listWidth - 30 , lines , logoPath , logoDims ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java 
 index 1d47fea . . 90198e1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java 
 @ @ - 17 , 6 + 17 , 8 @ @ import java . util . ArrayList ; 
 import net . minecraft . client . gui . FontRenderer ; 
 import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . util . StringUtils ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . CheckResult ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 @ @ - 79 , 7 + 81 , 7 @ @ public class GuiSlotModList extends GuiScrollingList 
 String name = StringUtils . stripControlCodes ( mc . getName ( ) ) ; 
 String version = StringUtils . stripControlCodes ( mc . getDisplayVersion ( ) ) ; 
 FontRenderer font = this . parent . getFontRenderer ( ) ; 
 - / / CheckResult vercheck = ForgeVersion . getResult ( mc ) ; 
 + CheckResult vercheck = ForgeVersion . getResult ( mc ) ; 
 
 if ( Loader . instance ( ) . getModState ( mc ) = = ModState . DISABLED ) 
 { 
 @ @ - 93 , 7 + 95 , 7 @ @ public class GuiSlotModList extends GuiScrollingList 
 font . drawString ( font . trimStringToWidth ( version , listWidth - 10 ) , this . left + 3 , top + 12 , 0xCCCCCC ) ; 
 font . drawString ( font . trimStringToWidth ( mc . getMetadata ( ) ! = null ? mc . getMetadata ( ) . getChildModCountString ( ) : " Metadata not found " , listWidth - 10 ) , this . left + 3 , top + 22 , 0xCCCCCC ) ; 
 
 - / * switch ( vercheck . status ) / / TODO : Change to icons ? 
 + switch ( vercheck . status ) / / TODO : Change to icons ? 
 { 
 case BETA _ OUTDATED : 
 case OUTDATED : 
 @ @ - 105 , 8 + 107 , 7 @ @ public class GuiSlotModList extends GuiScrollingList 
 case PENDING : 
 case UP _ TO _ DATE : 
 break ; 
 - } * / 
 + } 
 } 
 } 
 - 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 index 88b171c . . d9e11b3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . Collections ; 
 import java . util . List ; 
 @ @ - 206 , 4 + 207 , 10 @ @ public class DummyModContainer implements ModContainer 
 { 
 return true ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return null ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 60ae2c6 . . 05ea505 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 18 , 6 + 18 , 8 @ @ import java . lang . annotation . Annotation ; 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 import java . lang . reflect . Modifier ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 87 , 6 + 89 , 7 @ @ public class FMLModContainer implements ModContainer 
 private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; 
 private Map < String , String > customModProperties ; 
 private ModCandidate candidate ; 
 + private URL updateJSONUrl ; 
 
 public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) 
 { 
 @ @ - 215 , 6 + 218 , 19 @ @ public class FMLModContainer implements ModContainer 
 { 
 minecraftAccepted = Loader . instance ( ) . getMinecraftModContainer ( ) . getStaticVersionRange ( ) ; 
 } 
 + 
 + String jsonURL = ( String ) descriptor . get ( " updateJSON " ) ; 
 + if ( ! Strings . isNullOrEmpty ( jsonURL ) ) 
 + { 
 + try 
 + { 
 + this . updateJSONUrl = new URL ( jsonURL ) ; 
 + } 
 + catch ( MalformedURLException e ) 
 + { 
 + FMLLog . log ( getModId ( ) , Level . DEBUG , " Specified json URL invalid : % s " , jsonURL ) ; 
 + } 
 + } 
 } 
 
 public Properties searchForVersionProperties ( ) 
 @ @ - 663 , 4 + 679 , 10 @ @ public class FMLModContainer implements ModContainer 
 
 return true ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return updateJSONUrl ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 index af91db1 . . 783c28b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 207 , 4 + 208 , 10 @ @ public class InjectedModContainer implements ModContainer 
 { 
 return true ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return wrappedContainer . getUpdateUrl ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index a2ad320 . . 7513fdf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 157 , 18 + 157 , 18 @ @ public @ interface Mod 
 * @ return The language the mod is authored in 
 * / 
 String modLanguage ( ) default " java " ; 
 - 
 + 
 / * * 
 * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a 
 * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . 
 - * 
 + * 
 * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and 
 * halt loading . 
 - * 
 + * 
 * @ return The full class name of the language adapter 
 * / 
 String modLanguageAdapter ( ) default " " ; 
 - 
 + 
 / * * 
 * NOT YET IMPLEMENTED . < / br > 
 * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given 
 @ @ - 198 , 6 + 198 , 14 @ @ public @ interface Mod 
 * @ return The name of a class implementing { @ link IModGuiFactory } 
 * / 
 String guiFactory ( ) default " " ; 
 + 
 + / * * 
 + * An optional URL to a JSON file that will be checked once per launch to determine if there is an updated 
 + * version of this mod and notify the end user . For more information see ForgeVersion . 
 + * @ return URL to update metadata json 
 + * / 
 + String updateJSON ( ) default " " ; 
 + 
 / * * 
 * A list of custom properties for this mod . Completely up to the mod author if / when they 
 * want to put anything in here . 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 index dde8dde . . 883f8b9 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 149 , 4 + 150 , 6 @ @ public interface ModContainer 
 List < String > getOwnedPackages ( ) ; 
 
 boolean shouldLoadInEnvironment ( ) ; 
 + 
 + URL getUpdateUrl ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java 
 index add4b37 . . f0173ca 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java 
 @ @ - 35 , 7 + 35 , 12 @ @ public class ModMetadata 
 public String description = " " ; 
 
 public String url = " " ; 
 + @ Deprecated / / Never really used for anything and format is undefined . See updateJSON for replacement . 
 public String updateUrl = " " ; 
 + / * * 
 + * URL to update json file . Format is defined here : https : / / gist . github . com / LexManos / 7aacb9aa991330523884 
 + * / 
 + public String updateJSON = " " ; 
 
 public String logoFile = " " ; 
 public String version = " " ;
