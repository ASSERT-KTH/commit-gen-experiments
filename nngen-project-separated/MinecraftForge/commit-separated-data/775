BLEU SCORE: 0.0018302542608963728

TEST MSG: Implemented slightly more generic version of UVLock , re - enabled it for json models . Closes # 2607 .
GENERATED MSG: ModelBakeEvent now has ModelLoader as an argument instead of ModelBakery ; Added various static hooks to ModelLoader to allow registering model - related information before it ' s needed ( prevents file - not - found errors on first baking pass ) ; ModelLoader waits until ModelBakeEvent is done before showing any missing model exceptions ; It ' s now possible to define models completely in - code ( as illustrated by ModelBakeEventDebug ) .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java . patch b / patches / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java . patch <nl> index 3d8f0f3 . . 8e298ad 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java . patch <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java <nl> - @ @ - 48 , 14 + 48 , 20 @ @ <nl> + @ @ - 48 , 14 + 48 , 19 @ @ <nl> <nl> public BakedQuad func _ 178414 _ a ( Vector3f p _ 178414 _ 1 _ , Vector3f p _ 178414 _ 2 _ , BlockPartFace p _ 178414 _ 3 _ , TextureAtlasSprite p _ 178414 _ 4 _ , EnumFacing p _ 178414 _ 5 _ , ModelRotation p _ 178414 _ 6 _ , BlockPartRotation p _ 178414 _ 7 _ , boolean p _ 178414 _ 8 _ , boolean p _ 178414 _ 9 _ ) <nl> { <nl> @ @ - 14 , 8 + 14 , 7 @ @ <nl> if ( p _ 178414 _ 8 _ ) <nl> { <nl> - blockfaceuv = this . func _ 188010 _ a ( p _ 178414 _ 3 _ . field _ 178243 _ e , p _ 178414 _ 5 _ , p _ 178414 _ 6 _ ) ; <nl> - + / / TODO fix uvlock for custom rotations <nl> - + / / blockfaceuv = this . applyUVLock ( face . blockFaceUV , facing , modelRotationIn ) ; <nl> + + blockfaceuv = net . minecraftforge . client . ForgeHooksClient . applyUVLock ( p _ 178414 _ 3 _ . field _ 178243 _ e , p _ 178414 _ 5 _ , p _ 178414 _ 6 _ ) ; <nl> } <nl> <nl> - int [ ] aint = this . func _ 188012 _ a ( blockfaceuv , p _ 178414 _ 4 _ , p _ 178414 _ 5 _ , this . func _ 178403 _ a ( p _ 178414 _ 1 _ , p _ 178414 _ 2 _ ) , p _ 178414 _ 6 _ , p _ 178414 _ 7 _ , p _ 178414 _ 9 _ ) ; <nl> @ @ - 23 , 7 + 22 , 7 @ @ <nl> EnumFacing enumfacing = func _ 178410 _ a ( aint ) ; <nl> <nl> if ( p _ 178414 _ 7 _ = = null ) <nl> - @ @ - 63 , 7 + 69 , 8 @ @ <nl> + @ @ - 63 , 7 + 68 , 8 @ @ <nl> this . func _ 178408 _ a ( aint , enumfacing ) ; <nl> } <nl> <nl> @ @ - 33 , 7 + 32 , 7 @ @ <nl> } <nl> <nl> private BlockFaceUV func _ 188010 _ a ( BlockFaceUV p _ 188010 _ 1 _ , EnumFacing p _ 188010 _ 2 _ , ModelRotation p _ 188010 _ 3 _ ) <nl> - @ @ - 73 , 11 + 80 , 16 @ @ <nl> + @ @ - 73 , 11 + 79 , 16 @ @ <nl> <nl> private int [ ] func _ 188012 _ a ( BlockFaceUV p _ 188012 _ 1 _ , TextureAtlasSprite p _ 188012 _ 2 _ , EnumFacing p _ 188012 _ 3 _ , float [ ] p _ 188012 _ 4 _ , ModelRotation p _ 188012 _ 5 _ , BlockPartRotation p _ 188012 _ 6 _ , boolean p _ 188012 _ 7 _ ) <nl> { <nl> @ @ - 51 , 7 + 50 , 7 @ @ <nl> } <nl> <nl> return aint ; <nl> - @ @ - 123 , 12 + 135 , 17 @ @ <nl> + @ @ - 123 , 12 + 134 , 17 @ @ <nl> <nl> private void func _ 188015 _ a ( int [ ] p _ 188015 _ 1 _ , int p _ 188015 _ 2 _ , EnumFacing p _ 188015 _ 3 _ , BlockFaceUV p _ 188015 _ 4 _ , float [ ] p _ 188015 _ 5 _ , TextureAtlasSprite p _ 188015 _ 6 _ , ModelRotation p _ 188015 _ 7 _ , BlockPartRotation p _ 188015 _ 8 _ , boolean p _ 188015 _ 9 _ ) <nl> { <nl> @ @ - 71 , 7 + 70 , 7 @ @ <nl> this . func _ 178404 _ a ( p _ 188015 _ 1 _ , j , p _ 188015 _ 2 _ , vector3f , i , p _ 188015 _ 6 _ , p _ 188015 _ 4 _ ) ; <nl> } <nl> <nl> - @ @ - 189 , 14 + 206 , 19 @ @ <nl> + @ @ - 189 , 14 + 205 , 19 @ @ <nl> <nl> public int func _ 188011 _ a ( Vector3f p _ 188011 _ 1 _ , EnumFacing p _ 188011 _ 2 _ , int p _ 188011 _ 3 _ , ModelRotation p _ 188011 _ 4 _ ) <nl> { <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / block / model / Variant . java . patch b / patches / minecraft / net / minecraft / client / renderer / block / model / Variant . java . patch <nl> index 2a57fbe . . d176aa5 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / block / model / Variant . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / block / model / Variant . java . patch <nl> @ @ - 1 , 5 + 1 , 14 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / block / model / Variant . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / block / model / Variant . java <nl> + @ @ - 12 , 7 + 12 , 7 @ @ <nl> + import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + <nl> + @ SideOnly ( Side . CLIENT ) <nl> + - public class Variant <nl> + + public class Variant implements net . minecraftforge . client . model . ISmartVariant <nl> + { <nl> + private final ResourceLocation field _ 188050 _ a ; <nl> + private final ModelRotation field _ 188051 _ b ; <nl> @ @ - 32 , 11 + 32 , 17 @ @ <nl> return this . field _ 188050 _ a ; <nl> } <nl> @ @ - 18 , 3 + 27 , 13 @ @ <nl> public boolean func _ 188049 _ c ( ) <nl> { <nl> return this . field _ 188052 _ c ; <nl> + @ @ - 138 , 4 + 144 , 9 @ @ <nl> + } <nl> + } <nl> + } <nl> + + <nl> + + public net . minecraftforge . client . model . IModel process ( net . minecraftforge . client . model . IModel base ) <nl> + + { <nl> + + return net . minecraftforge . client . model . ModelProcessingHelper . uvlock ( base , func _ 188049 _ c ( ) ) ; <nl> + + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index de9c86d . . 6e6f59c 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . nio . FloatBuffer ; <nl> import java . util . Map ; <nl> <nl> + import javax . vecmath . Matrix3f ; <nl> import javax . vecmath . Matrix4f ; <nl> import javax . vecmath . Vector3f ; <nl> import javax . vecmath . Vector4f ; <nl> @ @ - 28 , 9 + 29 , 9 @ @ import net . minecraft . client . renderer . OpenGlHelper ; <nl> import net . minecraft . client . renderer . RenderGlobal ; <nl> import net . minecraft . client . renderer . VertexBuffer ; <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . BlockFaceUV ; <nl> import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> - import net . minecraft . client . renderer . block . model . ItemTransformVec3f ; <nl> import net . minecraft . client . renderer . block . model . ModelManager ; <nl> import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> import net . minecraft . client . renderer . block . model . ModelRotation ; <nl> @ @ - 52 , 8 + 53 , 11 @ @ import net . minecraft . inventory . EntityEquipmentSlot ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> - import net . minecraft . util . * ; <nl> + import net . minecraft . util . BlockRenderLayer ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . util . math . MathHelper ; <nl> import net . minecraft . util . math . RayTraceResult ; <nl> import net . minecraft . util . registry . IRegistry ; <nl> import net . minecraft . util . text . TextFormatting ; <nl> @ @ - 75 , 9 + 79 , 10 @ @ import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . ForgeVersion . Status ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . common . model . IModelPart ; <nl> + import net . minecraftforge . common . model . ITransformation ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> - import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> import net . minecraftforge . fml . client . registry . ClientRegistry ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> @ @ - 353 , 7 + 358 , 7 @ @ public class ForgeHooksClient <nl> } <nl> <nl> @ SuppressWarnings ( " deprecation " ) <nl> - public static Matrix4f getMatrix ( ItemTransformVec3f transform ) <nl> + public static Matrix4f getMatrix ( net . minecraft . client . renderer . block . model . ItemTransformVec3f transform ) <nl> { <nl> javax . vecmath . Matrix4f m = new javax . vecmath . Matrix4f ( ) , t = new javax . vecmath . Matrix4f ( ) ; <nl> m . setIdentity ( ) ; <nl> @ @ - 589 , 7 + 594 , 7 @ @ public class ForgeHooksClient <nl> } <nl> <nl> @ SuppressWarnings ( " deprecation " ) <nl> - public static Optional < TRSRTransformation > applyTransform ( ItemTransformVec3f transform , Optional < ? extends IModelPart > part ) <nl> + public static Optional < TRSRTransformation > applyTransform ( net . minecraft . client . renderer . block . model . ItemTransformVec3f transform , Optional < ? extends IModelPart > part ) <nl> { <nl> if ( part . isPresent ( ) ) return Optional . absent ( ) ; <nl> return Optional . of ( new TRSRTransformation ( transform ) ) ; <nl> @ @ - 636 , 4 + 641 , 42 @ @ public class ForgeHooksClient <nl> } <nl> return ! from . getItem ( ) . shouldCauseReequipAnimation ( from , to , changed ) ; <nl> } <nl> + <nl> + public static BlockFaceUV applyUVLock ( BlockFaceUV blockFaceUV , EnumFacing originalSide , ITransformation rotation ) <nl> + { <nl> + TRSRTransformation global = new TRSRTransformation ( rotation . getMatrix ( ) ) ; <nl> + Matrix4f uv = global . getUVLockTransform ( originalSide ) . getMatrix ( ) ; <nl> + Vector4f vec = new Vector4f ( 0 , 0 , 0 , 1 ) ; <nl> + vec . x = blockFaceUV . getVertexU ( blockFaceUV . getVertexRotatedRev ( 0 ) ) / 16 ; <nl> + vec . y = blockFaceUV . getVertexV ( blockFaceUV . getVertexRotatedRev ( 0 ) ) / 16 ; <nl> + uv . transform ( vec ) ; <nl> + float uMin = 16 * vec . x ; / / / vec . w ; <nl> + float vMin = 16 * vec . y ; / / / vec . w ; <nl> + vec . x = blockFaceUV . getVertexU ( blockFaceUV . getVertexRotatedRev ( 2 ) ) / 16 ; <nl> + vec . y = blockFaceUV . getVertexV ( blockFaceUV . getVertexRotatedRev ( 2 ) ) / 16 ; <nl> + vec . z = 0 ; <nl> + vec . w = 1 ; <nl> + uv . transform ( vec ) ; <nl> + float uMax = 16 * vec . x ; / / / vec . w ; <nl> + float vMax = 16 * vec . y ; / / / vec . w ; <nl> + if ( uMin > uMax ) <nl> + { <nl> + float t = uMin ; <nl> + uMin = uMax ; <nl> + uMax = t ; <nl> + } <nl> + if ( vMin > vMax ) <nl> + { <nl> + float t = vMin ; <nl> + vMin = vMax ; <nl> + vMax = t ; <nl> + } <nl> + float a = ( float ) Math . toRadians ( blockFaceUV . rotation ) ; <nl> + Vector3f rv = new Vector3f ( MathHelper . cos ( a ) , MathHelper . sin ( a ) , 0 ) ; <nl> + Matrix3f rot = new Matrix3f ( ) ; <nl> + uv . getRotationScale ( rot ) ; <nl> + rot . transform ( rv ) ; <nl> + int angle = MathHelper . normalizeAngle ( - ( int ) Math . round ( Math . toDegrees ( Math . atan2 ( rv . y , rv . x ) ) / 90 ) * 90 , 360 ) ; <nl> + return new BlockFaceUV ( new float [ ] { uMin , vMin , uMax , vMax } , angle ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> index 93433bb . . 028e941 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> @ @ - 373 , 7 + 373 , 7 @ @ public class ForgeBlockStateV1 extends Marker <nl> <nl> protected SubModel asGenericSubModel ( ) <nl> { <nl> - return new SubModel ( state . or ( TRSRTransformation . identity ( ) ) , smooth . or ( true ) , gui3d . or ( true ) , uvLock . or ( false ) , getTextures ( ) , model , getCustomData ( ) ) ; <nl> + return new SubModel ( state . or ( TRSRTransformation . identity ( ) ) , uvLock . or ( false ) , smooth . or ( true ) , gui3d . or ( true ) , getTextures ( ) , model , getCustomData ( ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / common / model / TRSRTransformation . java b / src / main / java / net / minecraftforge / common / model / TRSRTransformation . java <nl> index 3c84d27 . . 91ddf6c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / model / TRSRTransformation . java <nl> + + + b / src / main / java / net / minecraftforge / common / model / TRSRTransformation . java <nl> @ @ - 1 , 8 + 1 , 12 @ @ <nl> package net . minecraftforge . common . model ; <nl> <nl> + import java . util . EnumMap ; <nl> + <nl> + import javax . vecmath . AxisAngle4f ; <nl> import javax . vecmath . Matrix3f ; <nl> import javax . vecmath . Matrix4f ; <nl> import javax . vecmath . Quat4f ; <nl> + import javax . vecmath . SingularMatrixException ; <nl> import javax . vecmath . Tuple3f ; <nl> import javax . vecmath . Tuple4f ; <nl> import javax . vecmath . Vector3f ; <nl> @ @ - 19 , 6 + 23 , 7 @ @ import org . apache . commons . lang3 . tuple . Triple ; <nl> <nl> import com . google . common . base . Objects ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . collect . Maps ; <nl> <nl> / * <nl> * Interpolation - friendly affine transformation . <nl> @ @ - 128 , 6 + 133 , 14 @ @ public final class TRSRTransformation implements IModelState , ITransformation <nl> return new TRSRTransformation ( m ) ; <nl> } <nl> <nl> + public TRSRTransformation inverse ( ) <nl> + { <nl> + if ( this = = identity ) return this ; <nl> + Matrix4f m = getMatrix ( ) ; <nl> + m . invert ( ) ; <nl> + return new TRSRTransformation ( m ) ; <nl> + } <nl> + <nl> private void genCheck ( ) <nl> { <nl> if ( ! full ) <nl> @ @ - 212 , 7 + 225 , 6 @ @ public final class TRSRTransformation implements IModelState , ITransformation <nl> return new Vector3f ( ( float ) Math . toDegrees ( xyz . x ) , ( float ) Math . toDegrees ( xyz . y ) , ( float ) Math . toDegrees ( xyz . z ) ) ; <nl> } <nl> <nl> - / / TODO check if correct <nl> public static Vector3f toXYZ ( Quat4f q ) <nl> { <nl> float w2 = q . w * q . w ; <nl> @ @ - 731 , 4 + 743 , 51 @ @ public final class TRSRTransformation implements IModelState , ITransformation <nl> slerp ( this . getRightRot ( ) , that . getRightRot ( ) , progress ) <nl> ) ; <nl> } <nl> + <nl> + private static final EnumMap < EnumFacing , TRSRTransformation > vanillaUvTransformLocalToGlobal = Maps . newEnumMap ( EnumFacing . class ) ; <nl> + private static final EnumMap < EnumFacing , TRSRTransformation > vanillaUvTransformGlobalToLocal = Maps . newEnumMap ( EnumFacing . class ) ; <nl> + <nl> + static <nl> + { <nl> + vanillaUvTransformLocalToGlobal . put ( EnumFacing . SOUTH , identity ) ; <nl> + Quat4f tmp = new Quat4f ( ) ; <nl> + tmp . set ( new AxisAngle4f ( 0 , 1 , 0 , ( float ) Math . toRadians ( 90 ) ) ) ; <nl> + vanillaUvTransformLocalToGlobal . put ( EnumFacing . EAST , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; <nl> + tmp . set ( new AxisAngle4f ( 0 , 1 , 0 , ( float ) Math . toRadians ( - 90 ) ) ) ; <nl> + vanillaUvTransformLocalToGlobal . put ( EnumFacing . WEST , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; <nl> + tmp . set ( new AxisAngle4f ( 0 , 1 , 0 , ( float ) Math . toRadians ( 180 ) ) ) ; <nl> + vanillaUvTransformLocalToGlobal . put ( EnumFacing . NORTH , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; <nl> + tmp . set ( new AxisAngle4f ( 1 , 0 , 0 , ( float ) Math . toRadians ( - 90 ) ) ) ; <nl> + vanillaUvTransformLocalToGlobal . put ( EnumFacing . UP , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; <nl> + tmp . set ( new AxisAngle4f ( 1 , 0 , 0 , ( float ) Math . toRadians ( 90 ) ) ) ; <nl> + vanillaUvTransformLocalToGlobal . put ( EnumFacing . DOWN , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; <nl> + <nl> + for ( EnumFacing side : EnumFacing . values ( ) ) <nl> + { <nl> + vanillaUvTransformGlobalToLocal . put ( side , vanillaUvTransformLocalToGlobal . get ( side ) . inverse ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static TRSRTransformation getVanillaUvTransformLocalToGlobal ( EnumFacing side ) <nl> + { <nl> + return vanillaUvTransformLocalToGlobal . get ( side ) ; <nl> + } <nl> + <nl> + public static TRSRTransformation getVanillaUvTransformGlobalToLocal ( EnumFacing side ) <nl> + { <nl> + return vanillaUvTransformGlobalToLocal . get ( side ) ; <nl> + } <nl> + <nl> + public TRSRTransformation getUVLockTransform ( EnumFacing originalSide ) <nl> + { <nl> + EnumFacing newSide = rotate ( originalSide ) ; <nl> + try <nl> + { <nl> + return blockCenterToCorner ( vanillaUvTransformGlobalToLocal . get ( originalSide ) . compose ( blockCornerToCenter ( this . inverse ( ) ) ) . compose ( vanillaUvTransformLocalToGlobal . get ( newSide ) ) ) ; <nl> + } <nl> + catch ( SingularMatrixException e ) <nl> + { <nl> + return new TRSRTransformation ( null , null , new Vector3f ( 0 , 0 , 0 ) , null ) ; <nl> + } <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch <nl> new file mode 100644 <nl> index 0000000 . . ae731a3 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockModelShapes . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockModelShapes . java <nl> + @ @ - 321 , 6 + 321 , 7 @ @ <nl> + return new ModelResourceLocation ( s + " _ double _ slab " , s1 ) ; <nl> + } <nl> + } ) ; <nl> + + net . minecraftforge . client . model . ModelLoader . onRegisterAllBlocks ( this ) ; <nl> + } <nl> + <nl> + @ SideOnly ( Side . CLIENT ) <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch <nl> index 48162e1 . . 498fc5d 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch <nl> @ @ - 81 , 7 + 81 , 14 @ @ <nl> GlStateManager . func _ 179141 _ d ( ) ; <nl> GlStateManager . func _ 179098 _ w ( ) ; <nl> GlStateManager . func _ 179145 _ e ( ) ; <nl> - @ @ - 1078 , 6 + 1072 , 19 @ @ <nl> + @ @ - 1072 , 12 + 1066 , 26 @ @ <nl> + this . func _ 175029 _ a ( Blocks . field _ 150420 _ aW , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " brown _ mushroom _ block " ) ; <nl> + this . func _ 175029 _ a ( Blocks . field _ 150419 _ aX , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " red _ mushroom _ block " ) ; <nl> + this . func _ 175031 _ a ( Blocks . field _ 150380 _ bt , " dragon _ egg " ) ; <nl> + + net . minecraftforge . client . model . ModelLoader . onRegisterItems ( this . field _ 175059 _ m ) ; <nl> + } <nl> + <nl> + public void func _ 110549 _ a ( IResourceManager p _ 110549 _ 1 _ ) <nl> { <nl> this . field _ 175059 _ m . func _ 178085 _ b ( ) ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> index 0c6385f . . 8364265 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> @ @ - 9 , 7 + 9 , 15 @ @ <nl> } <nl> } <nl> catch ( Exception exception1 ) <nl> - @ @ - 499 , 6 + 499 , 11 @ @ <nl> + @ @ - 172 , 6 + 172 , 7 @ @ <nl> + } <nl> + } <nl> + } <nl> + + catch ( FileNotFoundException e ) { } <nl> + catch ( IOException ioexception ) <nl> + { <nl> + throw new RuntimeException ( " Encountered an exception when loading model definition of model " + resourcelocation1 . toString ( ) , ioexception ) ; <nl> + @ @ - 499 , 6 + 500 , 11 @ @ <nl> <nl> private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) <nl> { <nl> @ @ - 21 , 7 + 29 , 7 @ @ <nl> TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; <nl> SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ ) ) . func _ 177646 _ a ( textureatlassprite ) ; <nl> Iterator iterator = p _ 177578 _ 1 _ . func _ 178298 _ a ( ) . iterator ( ) ; <nl> - @ @ - 516 , 11 + 521 , 11 @ @ <nl> + @ @ - 516 , 11 + 522 , 11 @ @ <nl> <nl> if ( blockpartface . field _ 178244 _ b = = null ) <nl> { <nl> @ @ - 35 , 7 + 43 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 530 , 9 + 535 , 14 @ @ <nl> + @ @ - 530 , 9 + 536 , 14 @ @ <nl> <nl> private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index f93959c . . 2407f52 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . client . event . sound . PlaySoundEvent ; <nl> import net . minecraftforge . client . model . IPerspectiveAwareModel ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . ForgeVersion . Status ; <nl> @ @ - 487 , 7 + 488 , 9 @ @ public class ForgeHooksClient <nl> <nl> public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> { <nl> - MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; <nl> + ModelLoader loader = ( ModelLoader ) modelBakery ; <nl> + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , loader ) ) ; <nl> + loader . onPostBakeEvent ( modelRegistry ) ; <nl> } <nl> <nl> public static Matrix4f getMatrix ( ItemTransformVec3f transform ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> index 502454f . . 3c124d8 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> @ @ - 1 , 9 + 1 , 9 @ @ <nl> package net . minecraftforge . client . event ; <nl> <nl> - import net . minecraftforge . fml . common . eventhandler . Event ; <nl> - import net . minecraft . client . resources . model . ModelBakery ; <nl> import net . minecraft . client . resources . model . ModelManager ; <nl> import net . minecraft . util . IRegistry ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> <nl> / * * <nl> * Fired when the ModelManager is notified of the resource manager reloading . <nl> @ @ - 13 , 12 + 13 , 12 @ @ public class ModelBakeEvent extends Event <nl> { <nl> public final ModelManager modelManager ; <nl> public final IRegistry modelRegistry ; <nl> - public final ModelBakery modelBakery ; <nl> + public final ModelLoader modelLoader ; <nl> <nl> - public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelLoader modelLoader ) <nl> { <nl> this . modelManager = modelManager ; <nl> this . modelRegistry = modelRegistry ; <nl> - this . modelBakery = modelBakery ; <nl> + this . modelLoader = modelLoader ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 8942995 . . 91ea08d 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 11 , 8 + 11 , 11 @ @ import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> <nl> + import net . minecraft . block . Block ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . renderer . BlockModelShapes ; <nl> + import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> + import net . minecraft . client . renderer . ItemModelMesher ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> import net . minecraft . client . renderer . block . model . ItemModelGenerator ; <nl> import net . minecraft . client . renderer . block . model . ModelBlock ; <nl> @ @ - 20 , 6 + 23 , 7 @ @ import net . minecraft . client . renderer . block . model . ModelBlockDefinition ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition . MissingVariantException ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variant ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variants ; <nl> + import net . minecraft . client . renderer . block . statemap . IStateMapper ; <nl> import net . minecraft . client . renderer . texture . IIconCreator ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> @ @ - 35 , 7 + 39 , 9 @ @ import net . minecraft . util . IRegistry ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . registry . GameData ; <nl> + import net . minecraftforge . fml . common . registry . RegistryDelegate ; <nl> <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Function ; <nl> @ @ - 44 , 6 + 50 , 8 @ @ import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Maps ; <nl> + import com . google . common . collect . Sets ; <nl> <nl> public class ModelLoader extends ModelBakery <nl> { <nl> @ @ - 51 , 6 + 59 , 13 @ @ public class ModelLoader extends ModelBakery <nl> private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; <nl> + private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; <nl> + <nl> + private boolean isLoading = false ; <nl> + public boolean isLoading ( ) <nl> + { <nl> + return isLoading ; <nl> + } <nl> <nl> public ModelLoader ( IResourceManager manager , TextureMap map , BlockModelShapes shapes ) <nl> { <nl> @ @ - 62 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery <nl> @ Override <nl> public IRegistry setupModelRegistry ( ) <nl> { <nl> + isLoading = true ; <nl> loadBlocks ( ) ; <nl> loadItems ( ) ; <nl> stateModels . put ( MODEL _ MISSING , getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ) ; <nl> @ @ - 103 , 19 + 119 , 15 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> variants = definition . getVariants ( location . getVariant ( ) ) ; <nl> } <nl> - catch ( MissingVariantException e ) { } <nl> - if ( variants = = null ) <nl> + catch ( MissingVariantException e ) <nl> { <nl> - / / adding default variant for simple blocks <nl> - ResourceLocation loc = new ResourceLocation ( location . getResourceDomain ( ) , " block / " + location . getResourcePath ( ) ) ; <nl> - variants = new Variants ( " normal " , Lists . newArrayList ( new Variant ( loc , ModelRotation . X0 _ Y0 , false , 1 ) ) ) ; <nl> + missingVariants . add ( location ) ; <nl> } <nl> - if ( ! variants . getVariants ( ) . isEmpty ( ) ) <nl> + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) <nl> { <nl> try <nl> { <nl> stateModels . put ( location , new WeightedRandomModel ( variants ) ) ; <nl> - <nl> } <nl> catch ( Throwable e ) <nl> { <nl> @ @ - 135 , 7 + 147 , 11 @ @ public class ModelLoader extends ModelBakery <nl> ModelResourceLocation memory = new ModelResourceLocation ( s , " inventory " ) ; <nl> resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( file ) ) ; <nl> IModel model = getModel ( file ) ; <nl> - if ( model ! = null ) stateModels . put ( memory , model ) ; <nl> + if ( model = = null | | model = = getMissingModel ( ) ) <nl> + { <nl> + missingVariants . add ( memory ) ; <nl> + } <nl> + else stateModels . put ( memory , model ) ; <nl> } <nl> } <nl> } <nl> @ @ - 415 , 9 + 431 , 65 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> catch ( IOException e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; <nl> + if ( loader . isLoading ) <nl> + { <nl> + / / holding error until onPostBakeEvent <nl> + } <nl> + else FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; <nl> return loader . getMissingModel ( ) ; <nl> } <nl> } <nl> } <nl> + <nl> + public void onPostBakeEvent ( IRegistry modelRegistry ) <nl> + { <nl> + for ( ModelResourceLocation missing : missingVariants ) <nl> + { <nl> + if ( modelRegistry . getObject ( missing ) = = null ) <nl> + { <nl> + FMLLog . severe ( " Model definition for location % s not found " , missing ) ; <nl> + } <nl> + } <nl> + isLoading = false ; <nl> + } <nl> + <nl> + private static final Map < RegistryDelegate < Block > , IStateMapper > customStateMappers = Maps . newHashMap ( ) ; <nl> + <nl> + public static void setCustomStateMapper ( Block block , IStateMapper mapper ) <nl> + { <nl> + customStateMappers . put ( block . delegate , mapper ) ; <nl> + } <nl> + <nl> + public static void onRegisterAllBlocks ( BlockModelShapes shapes ) <nl> + { <nl> + for ( Entry < RegistryDelegate < Block > , IStateMapper > e : customStateMappers . entrySet ( ) ) <nl> + { <nl> + shapes . registerBlockWithStateMapper ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + private static final Map < RegistryDelegate < Item > , ItemMeshDefinition > customMeshDefinitions = com . google . common . collect . Maps . newHashMap ( ) ; <nl> + private static final Map < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > customModels = com . google . common . collect . Maps . newHashMap ( ) ; <nl> + <nl> + public static void setCustomModelResourceLocation ( Item item , int metadata , ModelResourceLocation model ) <nl> + { <nl> + customModels . put ( item . delegate , Pair . of ( metadata , model ) ) ; <nl> + } <nl> + <nl> + public static void setCustomMeshDefinition ( Item item , ItemMeshDefinition meshDefinition ) <nl> + { <nl> + customMeshDefinitions . put ( item . delegate , meshDefinition ) ; <nl> + } <nl> + <nl> + public static void onRegisterItems ( ItemModelMesher mesher ) <nl> + { <nl> + for ( Map . Entry < RegistryDelegate < Item > , ItemMeshDefinition > e : customMeshDefinitions . entrySet ( ) ) <nl> + { <nl> + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; <nl> + } <nl> + for ( Entry < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > e : customModels . entrySet ( ) ) <nl> + { <nl> + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) . getLeft ( ) , e . getValue ( ) . getRight ( ) ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> index c8de9a4 . . 96f9aa5 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> @ @ - 11 , 10 + 11 , 9 @ @ import net . minecraft . block . properties . PropertyInteger ; <nl> import net . minecraft . block . state . BlockState ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . Minecraft ; <nl> - import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> - import net . minecraft . client . renderer . entity . RenderItem ; <nl> + import net . minecraft . client . renderer . block . statemap . StateMapperBase ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . resources . model . IBakedModel ; <nl> import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> @ @ - 31 , 6 + 30 , 7 @ @ import net . minecraft . world . World ; <nl> import net . minecraftforge . client . event . ModelBakeEvent ; <nl> import net . minecraftforge . client . model . ISmartBlockModel ; <nl> import net . minecraftforge . client . model . ISmartItemModel ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . common . property . ExtendedBlockState ; <nl> import net . minecraftforge . common . property . IExtendedBlockState ; <nl> @ @ - 39 , 8 + 39 , 7 @ @ import net . minecraftforge . common . property . Properties ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> import net . minecraftforge . fml . common . SidedProxy ; <nl> - import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> - import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> <nl> @ @ - 69 , 47 + 68 , 35 @ @ public class ModelBakeEventDebug <nl> public static CommonProxy proxy ; <nl> <nl> @ EventHandler <nl> - public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } <nl> - <nl> - @ EventHandler <nl> - public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } <nl> + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> <nl> public static class CommonProxy <nl> { <nl> - public void init ( FMLInitializationEvent event ) <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; <nl> GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; <nl> } <nl> - <nl> - public void postInit ( FMLPostInitializationEvent event ) { } <nl> } <nl> <nl> public static class ClientProxy extends CommonProxy <nl> { <nl> - private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; <nl> + private static ModelResourceLocation blockLocation = new ModelResourceLocation ( blockName , " normal " ) ; <nl> + private static ModelResourceLocation itemLocation = new ModelResourceLocation ( blockName , " inventory " ) ; <nl> <nl> @ Override <nl> - public void init ( FMLInitializationEvent event ) <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> - super . init ( event ) ; <nl> - MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void postInit ( FMLPostInitializationEvent event ) { <nl> - super . postInit ( event ) ; <nl> + super . preInit ( event ) ; <nl> Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> - RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; <nl> - if ( renderItem ! = null ) <nl> - { <nl> - renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { <nl> - public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> - { <nl> - return modelLocation ; <nl> - } <nl> - } ) ; <nl> - } <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , itemLocation ) ; <nl> + ModelLoader . setCustomStateMapper ( CustomModelBlock . instance , new StateMapperBase ( ) { <nl> + protected ModelResourceLocation getModelResourceLocation ( IBlockState p _ 178132 _ 1 _ ) <nl> + { <nl> + return blockLocation ; <nl> + } <nl> + } ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> } <nl> } <nl> <nl> @ @ - 124 , 7 + 111 , 9 @ @ public class ModelBakeEventDebug <nl> { <nl> TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; <nl> TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; <nl> - event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; <nl> + IBakedModel customModel = new CustomModel ( base , overlay ) ; <nl> + event . modelRegistry . putObject ( ClientProxy . blockLocation , customModel ) ; <nl> + event . modelRegistry . putObject ( ClientProxy . itemLocation , customModel ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> index 8a8ecd6 . . b0d0878 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraftforge . client . model . ICustomModelLoader ; <nl> import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> import net . minecraftforge . client . model . IModel ; <nl> import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . client . model . ModelLoaderRegistry ; <nl> import net . minecraftforge . client . model . b3d . B3DLoader ; <nl> import net . minecraftforge . common . property . ExtendedBlockState ; <nl> @ @ - 58 , 15 + 59 , 11 @ @ public class ModelLoaderRegistryDebug <nl> B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; <nl> GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; <nl> / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; <nl> - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , MODID . toLowerCase ( ) + " : untitled2 . b3d " ) ; <nl> - } <nl> - <nl> - @ EventHandler <nl> - public void init ( FMLInitializationEvent event ) <nl> - { <nl> + String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; <nl> + ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; <nl> Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> - / / Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; <nl> - Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : untitled2 . b3d " , " inventory " ) ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; <nl> + / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; <nl> } <nl> <nl> public static class CustomModelBlock extends Block <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> deleted file mode 100644 <nl> index c2352ff . . 0000000 <nl> - - - a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> + + + / dev / null <nl> @ @ - 1 , 4 + 0 , 0 @ @ <nl> - { <nl> - " variants " : { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> deleted file mode 100644 <nl> index 43a272a . . 0000000 <nl> - - - a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> + + + / dev / null <nl> @ @ - 1 , 3 + 0 , 0 @ @ <nl> - { <nl> - " parent " : " builtin / entity " <nl> - }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java . patch b / patches / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java . patch 
 index 3d8f0f3 . . 8e298ad 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java . patch 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / block / model / FaceBakery . java 
 - @ @ - 48 , 14 + 48 , 20 @ @ 
 + @ @ - 48 , 14 + 48 , 19 @ @ 
 
 public BakedQuad func _ 178414 _ a ( Vector3f p _ 178414 _ 1 _ , Vector3f p _ 178414 _ 2 _ , BlockPartFace p _ 178414 _ 3 _ , TextureAtlasSprite p _ 178414 _ 4 _ , EnumFacing p _ 178414 _ 5 _ , ModelRotation p _ 178414 _ 6 _ , BlockPartRotation p _ 178414 _ 7 _ , boolean p _ 178414 _ 8 _ , boolean p _ 178414 _ 9 _ ) 
 { 
 @ @ - 14 , 8 + 14 , 7 @ @ 
 if ( p _ 178414 _ 8 _ ) 
 { 
 - blockfaceuv = this . func _ 188010 _ a ( p _ 178414 _ 3 _ . field _ 178243 _ e , p _ 178414 _ 5 _ , p _ 178414 _ 6 _ ) ; 
 - + / / TODO fix uvlock for custom rotations 
 - + / / blockfaceuv = this . applyUVLock ( face . blockFaceUV , facing , modelRotationIn ) ; 
 + + blockfaceuv = net . minecraftforge . client . ForgeHooksClient . applyUVLock ( p _ 178414 _ 3 _ . field _ 178243 _ e , p _ 178414 _ 5 _ , p _ 178414 _ 6 _ ) ; 
 } 
 
 - int [ ] aint = this . func _ 188012 _ a ( blockfaceuv , p _ 178414 _ 4 _ , p _ 178414 _ 5 _ , this . func _ 178403 _ a ( p _ 178414 _ 1 _ , p _ 178414 _ 2 _ ) , p _ 178414 _ 6 _ , p _ 178414 _ 7 _ , p _ 178414 _ 9 _ ) ; 
 @ @ - 23 , 7 + 22 , 7 @ @ 
 EnumFacing enumfacing = func _ 178410 _ a ( aint ) ; 
 
 if ( p _ 178414 _ 7 _ = = null ) 
 - @ @ - 63 , 7 + 69 , 8 @ @ 
 + @ @ - 63 , 7 + 68 , 8 @ @ 
 this . func _ 178408 _ a ( aint , enumfacing ) ; 
 } 
 
 @ @ - 33 , 7 + 32 , 7 @ @ 
 } 
 
 private BlockFaceUV func _ 188010 _ a ( BlockFaceUV p _ 188010 _ 1 _ , EnumFacing p _ 188010 _ 2 _ , ModelRotation p _ 188010 _ 3 _ ) 
 - @ @ - 73 , 11 + 80 , 16 @ @ 
 + @ @ - 73 , 11 + 79 , 16 @ @ 
 
 private int [ ] func _ 188012 _ a ( BlockFaceUV p _ 188012 _ 1 _ , TextureAtlasSprite p _ 188012 _ 2 _ , EnumFacing p _ 188012 _ 3 _ , float [ ] p _ 188012 _ 4 _ , ModelRotation p _ 188012 _ 5 _ , BlockPartRotation p _ 188012 _ 6 _ , boolean p _ 188012 _ 7 _ ) 
 { 
 @ @ - 51 , 7 + 50 , 7 @ @ 
 } 
 
 return aint ; 
 - @ @ - 123 , 12 + 135 , 17 @ @ 
 + @ @ - 123 , 12 + 134 , 17 @ @ 
 
 private void func _ 188015 _ a ( int [ ] p _ 188015 _ 1 _ , int p _ 188015 _ 2 _ , EnumFacing p _ 188015 _ 3 _ , BlockFaceUV p _ 188015 _ 4 _ , float [ ] p _ 188015 _ 5 _ , TextureAtlasSprite p _ 188015 _ 6 _ , ModelRotation p _ 188015 _ 7 _ , BlockPartRotation p _ 188015 _ 8 _ , boolean p _ 188015 _ 9 _ ) 
 { 
 @ @ - 71 , 7 + 70 , 7 @ @ 
 this . func _ 178404 _ a ( p _ 188015 _ 1 _ , j , p _ 188015 _ 2 _ , vector3f , i , p _ 188015 _ 6 _ , p _ 188015 _ 4 _ ) ; 
 } 
 
 - @ @ - 189 , 14 + 206 , 19 @ @ 
 + @ @ - 189 , 14 + 205 , 19 @ @ 
 
 public int func _ 188011 _ a ( Vector3f p _ 188011 _ 1 _ , EnumFacing p _ 188011 _ 2 _ , int p _ 188011 _ 3 _ , ModelRotation p _ 188011 _ 4 _ ) 
 { 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / block / model / Variant . java . patch b / patches / minecraft / net / minecraft / client / renderer / block / model / Variant . java . patch 
 index 2a57fbe . . d176aa5 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / block / model / Variant . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / block / model / Variant . java . patch 
 @ @ - 1 , 5 + 1 , 14 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / block / model / Variant . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / block / model / Variant . java 
 + @ @ - 12 , 7 + 12 , 7 @ @ 
 + import net . minecraftforge . fml . relauncher . SideOnly ; 
 + 
 + @ SideOnly ( Side . CLIENT ) 
 + - public class Variant 
 + + public class Variant implements net . minecraftforge . client . model . ISmartVariant 
 + { 
 + private final ResourceLocation field _ 188050 _ a ; 
 + private final ModelRotation field _ 188051 _ b ; 
 @ @ - 32 , 11 + 32 , 17 @ @ 
 return this . field _ 188050 _ a ; 
 } 
 @ @ - 18 , 3 + 27 , 13 @ @ 
 public boolean func _ 188049 _ c ( ) 
 { 
 return this . field _ 188052 _ c ; 
 + @ @ - 138 , 4 + 144 , 9 @ @ 
 + } 
 + } 
 + } 
 + + 
 + + public net . minecraftforge . client . model . IModel process ( net . minecraftforge . client . model . IModel base ) 
 + + { 
 + + return net . minecraftforge . client . model . ModelProcessingHelper . uvlock ( base , func _ 188049 _ c ( ) ) ; 
 + + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index de9c86d . . 6e6f59c 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . nio . FloatBuffer ; 
 import java . util . Map ; 
 
 + import javax . vecmath . Matrix3f ; 
 import javax . vecmath . Matrix4f ; 
 import javax . vecmath . Vector3f ; 
 import javax . vecmath . Vector4f ; 
 @ @ - 28 , 9 + 29 , 9 @ @ import net . minecraft . client . renderer . OpenGlHelper ; 
 import net . minecraft . client . renderer . RenderGlobal ; 
 import net . minecraft . client . renderer . VertexBuffer ; 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . BlockFaceUV ; 
 import net . minecraft . client . renderer . block . model . IBakedModel ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 - import net . minecraft . client . renderer . block . model . ItemTransformVec3f ; 
 import net . minecraft . client . renderer . block . model . ModelManager ; 
 import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 import net . minecraft . client . renderer . block . model . ModelRotation ; 
 @ @ - 52 , 8 + 53 , 11 @ @ import net . minecraft . inventory . EntityEquipmentSlot ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . tileentity . TileEntity ; 
 - import net . minecraft . util . * ; 
 + import net . minecraft . util . BlockRenderLayer ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . util . math . MathHelper ; 
 import net . minecraft . util . math . RayTraceResult ; 
 import net . minecraft . util . registry . IRegistry ; 
 import net . minecraft . util . text . TextFormatting ; 
 @ @ - 75 , 9 + 79 , 10 @ @ import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . ForgeVersion . Status ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . common . model . IModelPart ; 
 + import net . minecraftforge . common . model . ITransformation ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 - import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 import net . minecraftforge . fml . client . registry . ClientRegistry ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 @ @ - 353 , 7 + 358 , 7 @ @ public class ForgeHooksClient 
 } 
 
 @ SuppressWarnings ( " deprecation " ) 
 - public static Matrix4f getMatrix ( ItemTransformVec3f transform ) 
 + public static Matrix4f getMatrix ( net . minecraft . client . renderer . block . model . ItemTransformVec3f transform ) 
 { 
 javax . vecmath . Matrix4f m = new javax . vecmath . Matrix4f ( ) , t = new javax . vecmath . Matrix4f ( ) ; 
 m . setIdentity ( ) ; 
 @ @ - 589 , 7 + 594 , 7 @ @ public class ForgeHooksClient 
 } 
 
 @ SuppressWarnings ( " deprecation " ) 
 - public static Optional < TRSRTransformation > applyTransform ( ItemTransformVec3f transform , Optional < ? extends IModelPart > part ) 
 + public static Optional < TRSRTransformation > applyTransform ( net . minecraft . client . renderer . block . model . ItemTransformVec3f transform , Optional < ? extends IModelPart > part ) 
 { 
 if ( part . isPresent ( ) ) return Optional . absent ( ) ; 
 return Optional . of ( new TRSRTransformation ( transform ) ) ; 
 @ @ - 636 , 4 + 641 , 42 @ @ public class ForgeHooksClient 
 } 
 return ! from . getItem ( ) . shouldCauseReequipAnimation ( from , to , changed ) ; 
 } 
 + 
 + public static BlockFaceUV applyUVLock ( BlockFaceUV blockFaceUV , EnumFacing originalSide , ITransformation rotation ) 
 + { 
 + TRSRTransformation global = new TRSRTransformation ( rotation . getMatrix ( ) ) ; 
 + Matrix4f uv = global . getUVLockTransform ( originalSide ) . getMatrix ( ) ; 
 + Vector4f vec = new Vector4f ( 0 , 0 , 0 , 1 ) ; 
 + vec . x = blockFaceUV . getVertexU ( blockFaceUV . getVertexRotatedRev ( 0 ) ) / 16 ; 
 + vec . y = blockFaceUV . getVertexV ( blockFaceUV . getVertexRotatedRev ( 0 ) ) / 16 ; 
 + uv . transform ( vec ) ; 
 + float uMin = 16 * vec . x ; / / / vec . w ; 
 + float vMin = 16 * vec . y ; / / / vec . w ; 
 + vec . x = blockFaceUV . getVertexU ( blockFaceUV . getVertexRotatedRev ( 2 ) ) / 16 ; 
 + vec . y = blockFaceUV . getVertexV ( blockFaceUV . getVertexRotatedRev ( 2 ) ) / 16 ; 
 + vec . z = 0 ; 
 + vec . w = 1 ; 
 + uv . transform ( vec ) ; 
 + float uMax = 16 * vec . x ; / / / vec . w ; 
 + float vMax = 16 * vec . y ; / / / vec . w ; 
 + if ( uMin > uMax ) 
 + { 
 + float t = uMin ; 
 + uMin = uMax ; 
 + uMax = t ; 
 + } 
 + if ( vMin > vMax ) 
 + { 
 + float t = vMin ; 
 + vMin = vMax ; 
 + vMax = t ; 
 + } 
 + float a = ( float ) Math . toRadians ( blockFaceUV . rotation ) ; 
 + Vector3f rv = new Vector3f ( MathHelper . cos ( a ) , MathHelper . sin ( a ) , 0 ) ; 
 + Matrix3f rot = new Matrix3f ( ) ; 
 + uv . getRotationScale ( rot ) ; 
 + rot . transform ( rv ) ; 
 + int angle = MathHelper . normalizeAngle ( - ( int ) Math . round ( Math . toDegrees ( Math . atan2 ( rv . y , rv . x ) ) / 90 ) * 90 , 360 ) ; 
 + return new BlockFaceUV ( new float [ ] { uMin , vMin , uMax , vMax } , angle ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 index 93433bb . . 028e941 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 @ @ - 373 , 7 + 373 , 7 @ @ public class ForgeBlockStateV1 extends Marker 
 
 protected SubModel asGenericSubModel ( ) 
 { 
 - return new SubModel ( state . or ( TRSRTransformation . identity ( ) ) , smooth . or ( true ) , gui3d . or ( true ) , uvLock . or ( false ) , getTextures ( ) , model , getCustomData ( ) ) ; 
 + return new SubModel ( state . or ( TRSRTransformation . identity ( ) ) , uvLock . or ( false ) , smooth . or ( true ) , gui3d . or ( true ) , getTextures ( ) , model , getCustomData ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / common / model / TRSRTransformation . java b / src / main / java / net / minecraftforge / common / model / TRSRTransformation . java 
 index 3c84d27 . . 91ddf6c 100644 
 - - - a / src / main / java / net / minecraftforge / common / model / TRSRTransformation . java 
 + + + b / src / main / java / net / minecraftforge / common / model / TRSRTransformation . java 
 @ @ - 1 , 8 + 1 , 12 @ @ 
 package net . minecraftforge . common . model ; 
 
 + import java . util . EnumMap ; 
 + 
 + import javax . vecmath . AxisAngle4f ; 
 import javax . vecmath . Matrix3f ; 
 import javax . vecmath . Matrix4f ; 
 import javax . vecmath . Quat4f ; 
 + import javax . vecmath . SingularMatrixException ; 
 import javax . vecmath . Tuple3f ; 
 import javax . vecmath . Tuple4f ; 
 import javax . vecmath . Vector3f ; 
 @ @ - 19 , 6 + 23 , 7 @ @ import org . apache . commons . lang3 . tuple . Triple ; 
 
 import com . google . common . base . Objects ; 
 import com . google . common . base . Optional ; 
 + import com . google . common . collect . Maps ; 
 
 / * 
 * Interpolation - friendly affine transformation . 
 @ @ - 128 , 6 + 133 , 14 @ @ public final class TRSRTransformation implements IModelState , ITransformation 
 return new TRSRTransformation ( m ) ; 
 } 
 
 + public TRSRTransformation inverse ( ) 
 + { 
 + if ( this = = identity ) return this ; 
 + Matrix4f m = getMatrix ( ) ; 
 + m . invert ( ) ; 
 + return new TRSRTransformation ( m ) ; 
 + } 
 + 
 private void genCheck ( ) 
 { 
 if ( ! full ) 
 @ @ - 212 , 7 + 225 , 6 @ @ public final class TRSRTransformation implements IModelState , ITransformation 
 return new Vector3f ( ( float ) Math . toDegrees ( xyz . x ) , ( float ) Math . toDegrees ( xyz . y ) , ( float ) Math . toDegrees ( xyz . z ) ) ; 
 } 
 
 - / / TODO check if correct 
 public static Vector3f toXYZ ( Quat4f q ) 
 { 
 float w2 = q . w * q . w ; 
 @ @ - 731 , 4 + 743 , 51 @ @ public final class TRSRTransformation implements IModelState , ITransformation 
 slerp ( this . getRightRot ( ) , that . getRightRot ( ) , progress ) 
 ) ; 
 } 
 + 
 + private static final EnumMap < EnumFacing , TRSRTransformation > vanillaUvTransformLocalToGlobal = Maps . newEnumMap ( EnumFacing . class ) ; 
 + private static final EnumMap < EnumFacing , TRSRTransformation > vanillaUvTransformGlobalToLocal = Maps . newEnumMap ( EnumFacing . class ) ; 
 + 
 + static 
 + { 
 + vanillaUvTransformLocalToGlobal . put ( EnumFacing . SOUTH , identity ) ; 
 + Quat4f tmp = new Quat4f ( ) ; 
 + tmp . set ( new AxisAngle4f ( 0 , 1 , 0 , ( float ) Math . toRadians ( 90 ) ) ) ; 
 + vanillaUvTransformLocalToGlobal . put ( EnumFacing . EAST , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; 
 + tmp . set ( new AxisAngle4f ( 0 , 1 , 0 , ( float ) Math . toRadians ( - 90 ) ) ) ; 
 + vanillaUvTransformLocalToGlobal . put ( EnumFacing . WEST , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; 
 + tmp . set ( new AxisAngle4f ( 0 , 1 , 0 , ( float ) Math . toRadians ( 180 ) ) ) ; 
 + vanillaUvTransformLocalToGlobal . put ( EnumFacing . NORTH , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; 
 + tmp . set ( new AxisAngle4f ( 1 , 0 , 0 , ( float ) Math . toRadians ( - 90 ) ) ) ; 
 + vanillaUvTransformLocalToGlobal . put ( EnumFacing . UP , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; 
 + tmp . set ( new AxisAngle4f ( 1 , 0 , 0 , ( float ) Math . toRadians ( 90 ) ) ) ; 
 + vanillaUvTransformLocalToGlobal . put ( EnumFacing . DOWN , new TRSRTransformation ( null , new Quat4f ( tmp ) , null , null ) ) ; 
 + 
 + for ( EnumFacing side : EnumFacing . values ( ) ) 
 + { 
 + vanillaUvTransformGlobalToLocal . put ( side , vanillaUvTransformLocalToGlobal . get ( side ) . inverse ( ) ) ; 
 + } 
 + } 
 + 
 + public static TRSRTransformation getVanillaUvTransformLocalToGlobal ( EnumFacing side ) 
 + { 
 + return vanillaUvTransformLocalToGlobal . get ( side ) ; 
 + } 
 + 
 + public static TRSRTransformation getVanillaUvTransformGlobalToLocal ( EnumFacing side ) 
 + { 
 + return vanillaUvTransformGlobalToLocal . get ( side ) ; 
 + } 
 + 
 + public TRSRTransformation getUVLockTransform ( EnumFacing originalSide ) 
 + { 
 + EnumFacing newSide = rotate ( originalSide ) ; 
 + try 
 + { 
 + return blockCenterToCorner ( vanillaUvTransformGlobalToLocal . get ( originalSide ) . compose ( blockCornerToCenter ( this . inverse ( ) ) ) . compose ( vanillaUvTransformLocalToGlobal . get ( newSide ) ) ) ; 
 + } 
 + catch ( SingularMatrixException e ) 
 + { 
 + return new TRSRTransformation ( null , null , new Vector3f ( 0 , 0 , 0 ) , null ) ; 
 + } 
 + } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch 
 new file mode 100644 
 index 0000000 . . ae731a3 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockModelShapes . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockModelShapes . java 
 + @ @ - 321 , 6 + 321 , 7 @ @ 
 + return new ModelResourceLocation ( s + " _ double _ slab " , s1 ) ; 
 + } 
 + } ) ; 
 + + net . minecraftforge . client . model . ModelLoader . onRegisterAllBlocks ( this ) ; 
 + } 
 + 
 + @ SideOnly ( Side . CLIENT ) 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch 
 index 48162e1 . . 498fc5d 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch 
 @ @ - 81 , 7 + 81 , 14 @ @ 
 GlStateManager . func _ 179141 _ d ( ) ; 
 GlStateManager . func _ 179098 _ w ( ) ; 
 GlStateManager . func _ 179145 _ e ( ) ; 
 - @ @ - 1078 , 6 + 1072 , 19 @ @ 
 + @ @ - 1072 , 12 + 1066 , 26 @ @ 
 + this . func _ 175029 _ a ( Blocks . field _ 150420 _ aW , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " brown _ mushroom _ block " ) ; 
 + this . func _ 175029 _ a ( Blocks . field _ 150419 _ aX , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " red _ mushroom _ block " ) ; 
 + this . func _ 175031 _ a ( Blocks . field _ 150380 _ bt , " dragon _ egg " ) ; 
 + + net . minecraftforge . client . model . ModelLoader . onRegisterItems ( this . field _ 175059 _ m ) ; 
 + } 
 + 
 + public void func _ 110549 _ a ( IResourceManager p _ 110549 _ 1 _ ) 
 { 
 this . field _ 175059 _ m . func _ 178085 _ b ( ) ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 index 0c6385f . . 8364265 100644 
 - - - a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 @ @ - 9 , 7 + 9 , 15 @ @ 
 } 
 } 
 catch ( Exception exception1 ) 
 - @ @ - 499 , 6 + 499 , 11 @ @ 
 + @ @ - 172 , 6 + 172 , 7 @ @ 
 + } 
 + } 
 + } 
 + + catch ( FileNotFoundException e ) { } 
 + catch ( IOException ioexception ) 
 + { 
 + throw new RuntimeException ( " Encountered an exception when loading model definition of model " + resourcelocation1 . toString ( ) , ioexception ) ; 
 + @ @ - 499 , 6 + 500 , 11 @ @ 
 
 private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) 
 { 
 @ @ - 21 , 7 + 29 , 7 @ @ 
 TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; 
 SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ ) ) . func _ 177646 _ a ( textureatlassprite ) ; 
 Iterator iterator = p _ 177578 _ 1 _ . func _ 178298 _ a ( ) . iterator ( ) ; 
 - @ @ - 516 , 11 + 521 , 11 @ @ 
 + @ @ - 516 , 11 + 522 , 11 @ @ 
 
 if ( blockpartface . field _ 178244 _ b = = null ) 
 { 
 @ @ - 35 , 7 + 43 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 530 , 9 + 535 , 14 @ @ 
 + @ @ - 530 , 9 + 536 , 14 @ @ 
 
 private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index f93959c . . 2407f52 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 59 , 6 + 59 , 7 @ @ import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . client . event . sound . PlaySoundEvent ; 
 import net . minecraftforge . client . model . IPerspectiveAwareModel ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . ForgeVersion . Status ; 
 @ @ - 487 , 7 + 488 , 9 @ @ public class ForgeHooksClient 
 
 public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 { 
 - MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; 
 + ModelLoader loader = ( ModelLoader ) modelBakery ; 
 + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , loader ) ) ; 
 + loader . onPostBakeEvent ( modelRegistry ) ; 
 } 
 
 public static Matrix4f getMatrix ( ItemTransformVec3f transform ) 
 diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 index 502454f . . 3c124d8 100644 
 - - - a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 @ @ - 1 , 9 + 1 , 9 @ @ 
 package net . minecraftforge . client . event ; 
 
 - import net . minecraftforge . fml . common . eventhandler . Event ; 
 - import net . minecraft . client . resources . model . ModelBakery ; 
 import net . minecraft . client . resources . model . ModelManager ; 
 import net . minecraft . util . IRegistry ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 
 / * * 
 * Fired when the ModelManager is notified of the resource manager reloading . 
 @ @ - 13 , 12 + 13 , 12 @ @ public class ModelBakeEvent extends Event 
 { 
 public final ModelManager modelManager ; 
 public final IRegistry modelRegistry ; 
 - public final ModelBakery modelBakery ; 
 + public final ModelLoader modelLoader ; 
 
 - public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelLoader modelLoader ) 
 { 
 this . modelManager = modelManager ; 
 this . modelRegistry = modelRegistry ; 
 - this . modelBakery = modelBakery ; 
 + this . modelLoader = modelLoader ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 8942995 . . 91ea08d 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 11 , 8 + 11 , 11 @ @ import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . Set ; 
 
 + import net . minecraft . block . Block ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . renderer . BlockModelShapes ; 
 + import net . minecraft . client . renderer . ItemMeshDefinition ; 
 + import net . minecraft . client . renderer . ItemModelMesher ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 import net . minecraft . client . renderer . block . model . ItemModelGenerator ; 
 import net . minecraft . client . renderer . block . model . ModelBlock ; 
 @ @ - 20 , 6 + 23 , 7 @ @ import net . minecraft . client . renderer . block . model . ModelBlockDefinition ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition . MissingVariantException ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variant ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variants ; 
 + import net . minecraft . client . renderer . block . statemap . IStateMapper ; 
 import net . minecraft . client . renderer . texture . IIconCreator ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 @ @ - 35 , 7 + 39 , 9 @ @ import net . minecraft . util . IRegistry ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . registry . GameData ; 
 + import net . minecraftforge . fml . common . registry . RegistryDelegate ; 
 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Function ; 
 @ @ - 44 , 6 + 50 , 8 @ @ import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Maps ; 
 + import com . google . common . collect . Sets ; 
 
 public class ModelLoader extends ModelBakery 
 { 
 @ @ - 51 , 6 + 59 , 13 @ @ public class ModelLoader extends ModelBakery 
 private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; 
 + private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; 
 + 
 + private boolean isLoading = false ; 
 + public boolean isLoading ( ) 
 + { 
 + return isLoading ; 
 + } 
 
 public ModelLoader ( IResourceManager manager , TextureMap map , BlockModelShapes shapes ) 
 { 
 @ @ - 62 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery 
 @ Override 
 public IRegistry setupModelRegistry ( ) 
 { 
 + isLoading = true ; 
 loadBlocks ( ) ; 
 loadItems ( ) ; 
 stateModels . put ( MODEL _ MISSING , getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ) ; 
 @ @ - 103 , 19 + 119 , 15 @ @ public class ModelLoader extends ModelBakery 
 { 
 variants = definition . getVariants ( location . getVariant ( ) ) ; 
 } 
 - catch ( MissingVariantException e ) { } 
 - if ( variants = = null ) 
 + catch ( MissingVariantException e ) 
 { 
 - / / adding default variant for simple blocks 
 - ResourceLocation loc = new ResourceLocation ( location . getResourceDomain ( ) , " block / " + location . getResourcePath ( ) ) ; 
 - variants = new Variants ( " normal " , Lists . newArrayList ( new Variant ( loc , ModelRotation . X0 _ Y0 , false , 1 ) ) ) ; 
 + missingVariants . add ( location ) ; 
 } 
 - if ( ! variants . getVariants ( ) . isEmpty ( ) ) 
 + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) 
 { 
 try 
 { 
 stateModels . put ( location , new WeightedRandomModel ( variants ) ) ; 
 - 
 } 
 catch ( Throwable e ) 
 { 
 @ @ - 135 , 7 + 147 , 11 @ @ public class ModelLoader extends ModelBakery 
 ModelResourceLocation memory = new ModelResourceLocation ( s , " inventory " ) ; 
 resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( file ) ) ; 
 IModel model = getModel ( file ) ; 
 - if ( model ! = null ) stateModels . put ( memory , model ) ; 
 + if ( model = = null | | model = = getMissingModel ( ) ) 
 + { 
 + missingVariants . add ( memory ) ; 
 + } 
 + else stateModels . put ( memory , model ) ; 
 } 
 } 
 } 
 @ @ - 415 , 9 + 431 , 65 @ @ public class ModelLoader extends ModelBakery 
 } 
 catch ( IOException e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; 
 + if ( loader . isLoading ) 
 + { 
 + / / holding error until onPostBakeEvent 
 + } 
 + else FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; 
 return loader . getMissingModel ( ) ; 
 } 
 } 
 } 
 + 
 + public void onPostBakeEvent ( IRegistry modelRegistry ) 
 + { 
 + for ( ModelResourceLocation missing : missingVariants ) 
 + { 
 + if ( modelRegistry . getObject ( missing ) = = null ) 
 + { 
 + FMLLog . severe ( " Model definition for location % s not found " , missing ) ; 
 + } 
 + } 
 + isLoading = false ; 
 + } 
 + 
 + private static final Map < RegistryDelegate < Block > , IStateMapper > customStateMappers = Maps . newHashMap ( ) ; 
 + 
 + public static void setCustomStateMapper ( Block block , IStateMapper mapper ) 
 + { 
 + customStateMappers . put ( block . delegate , mapper ) ; 
 + } 
 + 
 + public static void onRegisterAllBlocks ( BlockModelShapes shapes ) 
 + { 
 + for ( Entry < RegistryDelegate < Block > , IStateMapper > e : customStateMappers . entrySet ( ) ) 
 + { 
 + shapes . registerBlockWithStateMapper ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; 
 + } 
 + } 
 + 
 + private static final Map < RegistryDelegate < Item > , ItemMeshDefinition > customMeshDefinitions = com . google . common . collect . Maps . newHashMap ( ) ; 
 + private static final Map < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > customModels = com . google . common . collect . Maps . newHashMap ( ) ; 
 + 
 + public static void setCustomModelResourceLocation ( Item item , int metadata , ModelResourceLocation model ) 
 + { 
 + customModels . put ( item . delegate , Pair . of ( metadata , model ) ) ; 
 + } 
 + 
 + public static void setCustomMeshDefinition ( Item item , ItemMeshDefinition meshDefinition ) 
 + { 
 + customMeshDefinitions . put ( item . delegate , meshDefinition ) ; 
 + } 
 + 
 + public static void onRegisterItems ( ItemModelMesher mesher ) 
 + { 
 + for ( Map . Entry < RegistryDelegate < Item > , ItemMeshDefinition > e : customMeshDefinitions . entrySet ( ) ) 
 + { 
 + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; 
 + } 
 + for ( Entry < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > e : customModels . entrySet ( ) ) 
 + { 
 + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) . getLeft ( ) , e . getValue ( ) . getRight ( ) ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 index c8de9a4 . . 96f9aa5 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 @ @ - 11 , 10 + 11 , 9 @ @ import net . minecraft . block . properties . PropertyInteger ; 
 import net . minecraft . block . state . BlockState ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . Minecraft ; 
 - import net . minecraft . client . renderer . ItemMeshDefinition ; 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 - import net . minecraft . client . renderer . entity . RenderItem ; 
 + import net . minecraft . client . renderer . block . statemap . StateMapperBase ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . resources . model . IBakedModel ; 
 import net . minecraft . client . resources . model . ModelResourceLocation ; 
 @ @ - 31 , 6 + 30 , 7 @ @ import net . minecraft . world . World ; 
 import net . minecraftforge . client . event . ModelBakeEvent ; 
 import net . minecraftforge . client . model . ISmartBlockModel ; 
 import net . minecraftforge . client . model . ISmartItemModel ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . common . property . ExtendedBlockState ; 
 import net . minecraftforge . common . property . IExtendedBlockState ; 
 @ @ - 39 , 8 + 39 , 7 @ @ import net . minecraftforge . common . property . Properties ; 
 import net . minecraftforge . fml . common . Mod ; 
 import net . minecraftforge . fml . common . Mod . EventHandler ; 
 import net . minecraftforge . fml . common . SidedProxy ; 
 - import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 - import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 
 @ @ - 69 , 47 + 68 , 35 @ @ public class ModelBakeEventDebug 
 public static CommonProxy proxy ; 
 
 @ EventHandler 
 - public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } 
 - 
 - @ EventHandler 
 - public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } 
 + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 
 public static class CommonProxy 
 { 
 - public void init ( FMLInitializationEvent event ) 
 + public void preInit ( FMLPreInitializationEvent event ) 
 { 
 GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; 
 GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; 
 } 
 - 
 - public void postInit ( FMLPostInitializationEvent event ) { } 
 } 
 
 public static class ClientProxy extends CommonProxy 
 { 
 - private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; 
 + private static ModelResourceLocation blockLocation = new ModelResourceLocation ( blockName , " normal " ) ; 
 + private static ModelResourceLocation itemLocation = new ModelResourceLocation ( blockName , " inventory " ) ; 
 
 @ Override 
 - public void init ( FMLInitializationEvent event ) 
 + public void preInit ( FMLPreInitializationEvent event ) 
 { 
 - super . init ( event ) ; 
 - MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 - } 
 - 
 - @ Override 
 - public void postInit ( FMLPostInitializationEvent event ) { 
 - super . postInit ( event ) ; 
 + super . preInit ( event ) ; 
 Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 - RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; 
 - if ( renderItem ! = null ) 
 - { 
 - renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { 
 - public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 - { 
 - return modelLocation ; 
 - } 
 - } ) ; 
 - } 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , itemLocation ) ; 
 + ModelLoader . setCustomStateMapper ( CustomModelBlock . instance , new StateMapperBase ( ) { 
 + protected ModelResourceLocation getModelResourceLocation ( IBlockState p _ 178132 _ 1 _ ) 
 + { 
 + return blockLocation ; 
 + } 
 + } ) ; 
 + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 } 
 } 
 
 @ @ - 124 , 7 + 111 , 9 @ @ public class ModelBakeEventDebug 
 { 
 TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; 
 TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; 
 - event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; 
 + IBakedModel customModel = new CustomModel ( base , overlay ) ; 
 + event . modelRegistry . putObject ( ClientProxy . blockLocation , customModel ) ; 
 + event . modelRegistry . putObject ( ClientProxy . itemLocation , customModel ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 index 8a8ecd6 . . b0d0878 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraftforge . client . model . ICustomModelLoader ; 
 import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 import net . minecraftforge . client . model . IModel ; 
 import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . client . model . ModelLoaderRegistry ; 
 import net . minecraftforge . client . model . b3d . B3DLoader ; 
 import net . minecraftforge . common . property . ExtendedBlockState ; 
 @ @ - 58 , 15 + 59 , 11 @ @ public class ModelLoaderRegistryDebug 
 B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; 
 GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; 
 / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; 
 - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , MODID . toLowerCase ( ) + " : untitled2 . b3d " ) ; 
 - } 
 - 
 - @ EventHandler 
 - public void init ( FMLInitializationEvent event ) 
 - { 
 + String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; 
 + ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; 
 Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 - / / Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; 
 - Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : untitled2 . b3d " , " inventory " ) ) ; 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; 
 + / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; 
 } 
 
 public static class CustomModelBlock extends Block 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 deleted file mode 100644 
 index c2352ff . . 0000000 
 - - - a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 + + + / dev / null 
 @ @ - 1 , 4 + 0 , 0 @ @ 
 - { 
 - " variants " : { 
 - } 
 - } 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 deleted file mode 100644 
 index 43a272a . . 0000000 
 - - - a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - { 
 - " parent " : " builtin / entity " 
 - }
