BLEU SCORE: 0.018738883683389617

TEST MSG: Fix the ForgeChunkManager to use the writebehind FileIO thread for writing
GENERATED MSG: Copy fortress . dat from vanilla location

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeChunkManager . java b / src / main / java / net / minecraftforge / common / ForgeChunkManager . java <nl> index d87e705 . . 9878e70 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeChunkManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeChunkManager . java <nl> @ @ - 44 , 6 + 44 , 7 @ @ import net . minecraft . world . World ; <nl> import net . minecraft . world . WorldServer ; <nl> import net . minecraft . world . chunk . Chunk ; <nl> import net . minecraft . world . chunk . storage . AnvilChunkLoader ; <nl> + import net . minecraft . world . storage . ThreadedFileIOBase ; <nl> import net . minecraftforge . common . config . ConfigCategory ; <nl> import net . minecraftforge . common . config . Configuration ; <nl> import net . minecraftforge . common . config . Property ; <nl> @ @ - 944 , 15 + 945 , 19 @ @ public class ForgeChunkManager <nl> } <nl> } <nl> } <nl> - try <nl> - { <nl> - CompressedStreamTools . write ( forcedChunkData , chunkLoaderData ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - FMLLog . log . warn ( " Unable to write forced chunk data to { } - chunkloading won ' t work " , chunkLoaderData . getAbsolutePath ( ) , e ) ; <nl> - return ; <nl> - } <nl> + <nl> + / / Write the actual file on the IO thread rather than blocking the server thread <nl> + ThreadedFileIOBase . getThreadedIOInstance ( ) . queueIO ( ( ) - > { <nl> + try <nl> + { <nl> + CompressedStreamTools . write ( forcedChunkData , chunkLoaderData ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . log . warn ( " Unable to write forced chunk data to { } - chunkloading won ' t work " , chunkLoaderData . getAbsolutePath ( ) , e ) ; <nl> + } <nl> + return false ; <nl> + } ) ; <nl> } <nl> <nl> static void loadEntity ( Entity entity )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java <nl> index 0dd9d6c . . c4d6efe 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java <nl> + + + b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java <nl> @ @ - 1 , 6 + 1 , 8 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> import java . io . File ; <nl> + import java . io . IOException ; <nl> + import java . nio . file . Files ; <nl> <nl> import net . minecraft . world . chunk . storage . IChunkLoader ; <nl> import net . minecraft . world . storage . IPlayerFileData ; <nl> @ @ - 10 , 6 + 12 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . world . storage . WorldInfo ; <nl> import net . minecraft . world . WorldProvider ; <nl> import net . minecraft . world . WorldServer ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> / / Class used internally to provide the world specific data directories . <nl> <nl> @ @ - 43 , 7 + 46 , 23 @ @ public class WorldSpecificSaveHandler implements ISaveHandler <nl> dataDir = new File ( world . getChunkSaveLocation ( ) , " data " ) ; <nl> dataDir . mkdirs ( ) ; <nl> } <nl> - return new File ( dataDir , name + " . dat " ) ; <nl> + File file = new File ( dataDir , name + " . dat " ) ; <nl> + if ( ! file . exists ( ) & & name . equalsIgnoreCase ( " FORTRESS " ) ) <nl> + { <nl> + File parentFile = parent . getMapFileFromName ( name ) ; <nl> + if ( parentFile . exists ( ) ) <nl> + { <nl> + try <nl> + { <nl> + Files . copy ( parentFile . toPath ( ) , file . toPath ( ) ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " A critical error occured copying fortress . dat to world specific dat folder - new file will be created . " ) ; <nl> + } <nl> + } <nl> + } <nl> + return file ; <nl> } <nl> <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeChunkManager . java b / src / main / java / net / minecraftforge / common / ForgeChunkManager . java 
 index d87e705 . . 9878e70 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeChunkManager . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeChunkManager . java 
 @ @ - 44 , 6 + 44 , 7 @ @ import net . minecraft . world . World ; 
 import net . minecraft . world . WorldServer ; 
 import net . minecraft . world . chunk . Chunk ; 
 import net . minecraft . world . chunk . storage . AnvilChunkLoader ; 
 + import net . minecraft . world . storage . ThreadedFileIOBase ; 
 import net . minecraftforge . common . config . ConfigCategory ; 
 import net . minecraftforge . common . config . Configuration ; 
 import net . minecraftforge . common . config . Property ; 
 @ @ - 944 , 15 + 945 , 19 @ @ public class ForgeChunkManager 
 } 
 } 
 } 
 - try 
 - { 
 - CompressedStreamTools . write ( forcedChunkData , chunkLoaderData ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - FMLLog . log . warn ( " Unable to write forced chunk data to { } - chunkloading won ' t work " , chunkLoaderData . getAbsolutePath ( ) , e ) ; 
 - return ; 
 - } 
 + 
 + / / Write the actual file on the IO thread rather than blocking the server thread 
 + ThreadedFileIOBase . getThreadedIOInstance ( ) . queueIO ( ( ) - > { 
 + try 
 + { 
 + CompressedStreamTools . write ( forcedChunkData , chunkLoaderData ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . log . warn ( " Unable to write forced chunk data to { } - chunkloading won ' t work " , chunkLoaderData . getAbsolutePath ( ) , e ) ; 
 + } 
 + return false ; 
 + } ) ; 
 } 
 
 static void loadEntity ( Entity entity )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java 
 index 0dd9d6c . . c4d6efe 100644 
 - - - a / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java 
 + + + b / src / main / java / net / minecraftforge / common / WorldSpecificSaveHandler . java 
 @ @ - 1 , 6 + 1 , 8 @ @ 
 package net . minecraftforge . common ; 
 
 import java . io . File ; 
 + import java . io . IOException ; 
 + import java . nio . file . Files ; 
 
 import net . minecraft . world . chunk . storage . IChunkLoader ; 
 import net . minecraft . world . storage . IPlayerFileData ; 
 @ @ - 10 , 6 + 12 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . world . storage . WorldInfo ; 
 import net . minecraft . world . WorldProvider ; 
 import net . minecraft . world . WorldServer ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 
 / / Class used internally to provide the world specific data directories . 
 
 @ @ - 43 , 7 + 46 , 23 @ @ public class WorldSpecificSaveHandler implements ISaveHandler 
 dataDir = new File ( world . getChunkSaveLocation ( ) , " data " ) ; 
 dataDir . mkdirs ( ) ; 
 } 
 - return new File ( dataDir , name + " . dat " ) ; 
 + File file = new File ( dataDir , name + " . dat " ) ; 
 + if ( ! file . exists ( ) & & name . equalsIgnoreCase ( " FORTRESS " ) ) 
 + { 
 + File parentFile = parent . getMapFileFromName ( name ) ; 
 + if ( parentFile . exists ( ) ) 
 + { 
 + try 
 + { 
 + Files . copy ( parentFile . toPath ( ) , file . toPath ( ) ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " A critical error occured copying fortress . dat to world specific dat folder - new file will be created . " ) ; 
 + } 
 + } 
 + } 
 + return file ; 
 } 
 
 }
