BLEU SCORE: 0.018738883683389617

TEST MSG: Clean up Reader / Writer handling to use a specified charset
GENERATED MSG: Lex doesn ' t like this .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> index f30f788 . . b6c0ebe 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> @ @ - 76 , 7 + 76 , 7 @ @ public class BlockStateLoader <nl> byte [ ] data = IOUtils . toByteArray ( reader , StandardCharsets . UTF _ 8 ) ; <nl> reader = new InputStreamReader ( new ByteArrayInputStream ( data ) , StandardCharsets . UTF _ 8 ) ; <nl> <nl> - Marker marker = GSON . fromJson ( new String ( data ) , Marker . class ) ; / / Read " forge _ marker " to determine what to load . <nl> + Marker marker = GSON . fromJson ( new String ( data , StandardCharsets . UTF _ 8 ) , Marker . class ) ; / / Read " forge _ marker " to determine what to load . <nl> <nl> switch ( marker . forge _ marker ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java <nl> index 3892a65 . . 51f4d4b 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java <nl> @ @ - 22 , 11 + 22 , 13 @ @ package net . minecraftforge . client . model . animation ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . Collections ; <nl> import java . util . EnumSet ; <nl> import java . util . Iterator ; <nl> import java . util . Map ; <nl> import java . util . NoSuchElementException ; <nl> + import java . util . Optional ; <nl> import java . util . TreeMap ; <nl> <nl> import javax . annotation . Nullable ; <nl> @ @ - 35 , 9 + 37 , 6 @ @ import javax . vecmath . Matrix4f ; <nl> import javax . vecmath . Quat4f ; <nl> import javax . vecmath . Vector3f ; <nl> <nl> - import org . apache . commons . io . IOUtils ; <nl> - import org . apache . logging . log4j . Level ; <nl> - <nl> import net . minecraft . client . renderer . block . model . BlockPart ; <nl> import net . minecraft . client . resources . IResource ; <nl> import net . minecraft . client . resources . IResourceManager ; <nl> @ @ - 56 , 7 + 55 , 6 @ @ import net . minecraftforge . common . model . animation . JointClips ; <nl> import net . minecraftforge . common . util . JsonUtils ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> - import java . util . Optional ; <nl> import com . google . common . collect . ImmutableCollection ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> @ @ - 557 , 7 + 555 , 7 @ @ public class ModelBlockAnimation <nl> { <nl> try ( IResource resource = manager . getResource ( armatureLocation ) ) <nl> { <nl> - ModelBlockAnimation mba = mbaGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , " UTF - 8 " ) , ModelBlockAnimation . class ) ; <nl> + ModelBlockAnimation mba = mbaGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , StandardCharsets . UTF _ 8 ) , ModelBlockAnimation . class ) ; <nl> / / String json = mbaGson . toJson ( mba ) ; <nl> return mba ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java <nl> index eae395b . . d7d8125 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java <nl> + + + b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java <nl> @ @ - 51 , 7 + 51 , 6 @ @ import net . minecraftforge . common . util . JsonUtils ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> import net . minecraftforge . fml . relauncher . SideOnly ; <nl> - import org . apache . commons . io . IOUtils ; <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . commons . lang3 . tuple . Triple ; <nl> <nl> @ @ - 60 , 6 + 59 , 7 @ @ import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> import java . lang . reflect . ParameterizedType ; <nl> import java . lang . reflect . Type ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . Collection ; <nl> import java . util . Map ; <nl> import java . util . concurrent . TimeUnit ; <nl> @ @ - 222 , 7 + 222 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine <nl> ParameterResolver parameterResolver = new ParameterResolver ( customParameters ) ; <nl> Clips . CommonClipTypeAdapterFactory . INSTANCE . setClipResolver ( clipResolver ) ; <nl> TimeValues . CommonTimeValueTypeAdapterFactory . INSTANCE . setValueResolver ( parameterResolver ) ; <nl> - AnimationStateMachine asm = asmGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , " UTF - 8 " ) , AnimationStateMachine . class ) ; <nl> + AnimationStateMachine asm = asmGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , StandardCharsets . UTF _ 8 ) , AnimationStateMachine . class ) ; <nl> clipResolver . asm = asm ; <nl> parameterResolver . asm = asm ; <nl> asm . initialize ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> index 318a1ab . . cf41882 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> @ @ - 24 , 12 + 24 , 17 @ @ import static org . lwjgl . opengl . GL12 . * ; <nl> <nl> import java . awt . image . BufferedImage ; <nl> import java . io . File ; <nl> - import java . io . FileReader ; <nl> - import java . io . FileWriter ; <nl> + import java . io . FileInputStream ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . io . InputStreamReader ; <nl> + import java . io . OutputStreamWriter ; <nl> + import java . io . Reader ; <nl> + import java . io . Writer ; <nl> import java . lang . Thread . UncaughtExceptionHandler ; <nl> import java . nio . IntBuffer ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . Iterator ; <nl> import java . util . Properties ; <nl> import java . util . concurrent . Semaphore ; <nl> @ @ - 149 , 7 + 154 , 7 @ @ public class SplashProgress <nl> parent . mkdirs ( ) ; <nl> <nl> config = new Properties ( ) ; <nl> - try ( FileReader r = new FileReader ( configFile ) ) <nl> + try ( Reader r = new InputStreamReader ( new FileInputStream ( configFile ) , StandardCharsets . UTF _ 8 ) ) <nl> { <nl> config . load ( r ) ; <nl> } <nl> @ @ - 184 , 7 + 189 , 7 @ @ public class SplashProgress <nl> <nl> File miscPackFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , getString ( " resourcePackPath " , " resources " ) ) ; <nl> <nl> - try ( FileWriter w = new FileWriter ( configFile ) ) <nl> + try ( Writer w = new OutputStreamWriter ( new FileOutputStream ( configFile ) , StandardCharsets . UTF _ 8 ) ) <nl> { <nl> config . store ( w , " Splash screen properties " ) ; <nl> } <nl> @ @ - 707 , 7 + 712 , 7 @ @ public class SplashProgress <nl> enabled = false ; <nl> config . setProperty ( " enabled " , " false " ) ; <nl> <nl> - try ( FileWriter w = new FileWriter ( configFile ) ) <nl> + try ( Writer w = new OutputStreamWriter ( new FileOutputStream ( configFile ) , StandardCharsets . UTF _ 8 ) ) <nl> { <nl> config . store ( w , " Splash screen properties " ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index affa553 . . 0d6cb7d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 20 , 11 + 20 , 14 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> - import java . io . FileReader ; <nl> - import java . io . FileWriter ; <nl> + import java . io . FileInputStream ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . io . InputStreamReader ; <nl> + import java . io . OutputStreamWriter ; <nl> import java . net . MalformedURLException ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . ArrayList ; <nl> import java . util . Comparator ; <nl> import java . util . Iterator ; <nl> @ @ - 32 , 10 + 35 , 8 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> - import java . util . regex . Matcher ; <nl> <nl> import net . minecraft . util . ResourceLocation ; <nl> - import net . minecraftforge . classloading . FMLForgePlugin ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> import net . minecraftforge . common . config . ConfigManager ; <nl> @ @ - 657 , 7 + 658 , 7 @ @ public class Loader <nl> FMLLog . log . trace ( " Found a mod state file { } " , forcedModFile . getName ( ) ) ; <nl> try <nl> { <nl> - forcedModListProperties . load ( new FileReader ( forcedModFile ) ) ; <nl> + forcedModListProperties . load ( new InputStreamReader ( new FileInputStream ( forcedModFile ) , StandardCharsets . UTF _ 8 ) ) ; <nl> FMLLog . log . trace ( " Loaded states for { } mods from file " , forcedModListProperties . size ( ) ) ; <nl> } <nl> catch ( Exception e ) <nl> @ @ - 960 , 9 + 961 , 9 @ @ public class Loader <nl> try <nl> { <nl> Properties props = new Properties ( ) ; <nl> - props . load ( new FileReader ( forcedModFile ) ) ; <nl> + props . load ( new InputStreamReader ( new FileInputStream ( forcedModFile ) , StandardCharsets . UTF _ 8 ) ) ; <nl> props . put ( modId , " false " ) ; <nl> - props . store ( new FileWriter ( forcedModFile ) , null ) ; <nl> + props . store ( new OutputStreamWriter ( new FileOutputStream ( forcedModFile ) , StandardCharsets . UTF _ 8 ) , null ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 991 , 7 + 992 , 7 @ @ public class Loader <nl> JsonElement injectedDeps ; <nl> try <nl> { <nl> - injectedDeps = parser . parse ( new FileReader ( injectedDepFile ) ) ; <nl> + injectedDeps = parser . parse ( new InputStreamReader ( new FileInputStream ( injectedDepFile ) , StandardCharsets . UTF _ 8 ) ) ; <nl> for ( JsonElement el : injectedDeps . getAsJsonArray ( ) ) <nl> { <nl> JsonObject jo = el . getAsJsonObject ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / MetadataCollection . java b / src / main / java / net / minecraftforge / fml / common / MetadataCollection . java <nl> index 1611efb . . 5a4c30a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / MetadataCollection . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / MetadataCollection . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml . common ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . Map ; <nl> <nl> import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> @ @ - 53 , 7 + 54 , 7 @ @ public class MetadataCollection <nl> return new MetadataCollection ( ) ; <nl> } <nl> <nl> - InputStreamReader reader = new InputStreamReader ( inputStream ) ; <nl> + InputStreamReader reader = new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ; <nl> try <nl> { <nl> MetadataCollection collection ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / json / JsonAnnotationLoader . java b / src / main / java / net / minecraftforge / fml / common / discovery / json / JsonAnnotationLoader . java <nl> index 8af098e . . 21eb2d5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / json / JsonAnnotationLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / json / JsonAnnotationLoader . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . discovery . json ; <nl> import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> import java . lang . reflect . Type ; <nl> + import java . nio . charset . StandardCharsets ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> <nl> @ @ - 43 , 7 + 44 , 7 @ @ public class JsonAnnotationLoader <nl> <nl> public static Multimap < String , ASMData > loadJson ( InputStream data , ModCandidate candidate , ASMDataTable table ) <nl> { <nl> - Map < String , ASMInfo > map = GSON . fromJson ( new InputStreamReader ( data ) , INFO _ TABLE ) ; <nl> + Map < String , ASMInfo > map = GSON . fromJson ( new InputStreamReader ( data , StandardCharsets . UTF _ 8 ) , INFO _ TABLE ) ; <nl> Multimap < String , ASMData > ret = HashMultimap . create ( ) ; <nl> <nl> for ( Entry < String , ASMInfo > entry : map . entrySet ( ) )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index feccc96 . . 484be8b 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 31 , 17 + 31 , 15 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> - import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> - import net . minecraftforge . fml . common . versioning . VersionRange ; <nl> + import org . apache . logging . log4j . Level ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . gson . Gson ; <nl> <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . InjectedModContainer ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> @ @ - 62 , 7 + 60 , 6 @ @ public class ForgeVersion <nl> / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> public static final int buildVersion = 0 ; <nl> / / This is the minecraft version we ' re building for - used in various places in Forge / FML code <nl> - / / Update version compatibility list below if there is SRG compatibility between this version and some previous versions <nl> public static final String mcVersion = " 1 . 12 . 1 " ; <nl> / / This is the MCP data version we ' re using <nl> public static final String mcpVersion = " 9 . 41 " ; <nl> @ @ - 71 , 12 + 68 , 6 @ @ public class ForgeVersion <nl> @ SuppressWarnings ( " unused " ) <nl> private static String target = null ; <nl> <nl> - / * <nl> - * Version compatibility . Add new version strings for each version we ' re SRG compatible with . <nl> - * Reset the list to empty only when incompatible changes occur . <nl> - * / <nl> - private static String [ ] extraCompatibleVersions = { " 1 . 12 " } ; <nl> - <nl> private static final Logger log = LogManager . getLogger ( " ForgeVersionCheck " ) ; <nl> <nl> public static int getMajorVersion ( ) <nl> @ @ - 116 , 15 + 107 , 6 @ @ public class ForgeVersion <nl> return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> } <nl> <nl> - / / We add in the current version ( we ' re compatible with it ) and test additional versions for compatibility <nl> - private static List < DefaultArtifactVersion > COMPATIBLE _ VERSIONS = Stream . concat ( Stream . of ( mcVersion ) , Stream . of ( extraCompatibleVersions ) ) <nl> - . map ( s - > new DefaultArtifactVersion ( " dummy " , s ) ) . collect ( Collectors . toList ( ) ) ; <nl> - <nl> - / / Tests the mod supplied version range for compatibility with our version compatibility list <nl> - public static boolean testMinecraftVersionCompatibility ( VersionRange modVersion ) { <nl> - return COMPATIBLE _ VERSIONS . stream ( ) . anyMatch ( modVersion : : containsVersion ) ; <nl> - } <nl> - <nl> public static enum Status <nl> { <nl> PENDING ( ) , <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index e8a1d15 . . c7b1577 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ import java . util . function . Function ; <nl> import com . google . common . base . Strings ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableList . Builder ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . ListMultimap ; <nl> @ @ - 255 , 7 + 256 , 16 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> <nl> String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; <nl> - <nl> + if ( " [ 1 . 8 . 8 ] " . equals ( mcVersionString ) ) mcVersionString = " [ 1 . 8 . 8 , 1 . 8 . 9 ] " ; / / MC 1 . 8 . 8 and 1 . 8 . 9 is forward SRG compatible so accept these versions by default . <nl> + if ( " [ 1 . 9 . 4 ] " . equals ( mcVersionString ) | | <nl> + " [ 1 . 9 , 1 . 9 . 4 ] " . equals ( mcVersionString ) | | <nl> + " [ 1 . 9 . 4 , 1 . 10 ) " . equals ( mcVersionString ) | | <nl> + " [ 1 . 10 ] " . equals ( mcVersionString ) ) <nl> + mcVersionString = " [ 1 . 9 . 4 , 1 . 10 . 2 ] " ; <nl> + if ( " [ 1 . 11 ] " . equals ( mcVersionString ) ) <nl> + mcVersionString = " [ 1 . 11 , 1 . 11 . 2 ] " ; <nl> + if ( " [ 1 . 12 ] " . equals ( mcVersionString ) ) <nl> + mcVersionString = " [ 1 . 12 , 1 . 12 . 1 ] " ; <nl> if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) <nl> { <nl> minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index e484d47 . . 5646f8b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . net . MalformedURLException ; <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . Comparator ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> @ @ - 34 , 7 + 35 , 6 @ @ import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> import net . minecraft . util . ResourceLocation ; <nl> - import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> import net . minecraftforge . common . config . ConfigManager ; <nl> import net . minecraftforge . common . crafting . CraftingHelper ; <nl> @ @ - 62 , 6 + 62 , 7 @ @ import org . apache . commons . io . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . CharMatcher ; <nl> + import java . util . function . Function ; <nl> import com . google . common . base . Joiner ; <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> @ @ - 237 , 9 + 238 , 9 @ @ public class Loader <nl> ArrayListMultimap < String , String > reqList = ArrayListMultimap . create ( ) ; <nl> for ( ModContainer mod : getActiveModList ( ) ) <nl> { <nl> - if ( ! ForgeVersion . testMinecraftVersionCompatibility ( mod . acceptableMinecraftVersionRange ( ) ) ) <nl> + if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) <nl> { <nl> - FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . It is compatible with { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) , mod . acceptableMinecraftVersionRange ( ) ) ; <nl> + FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; <nl> WrongMinecraftVersionException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; <nl> FMLLog . log . fatal ( ret . getMessage ( ) ) ; <nl> wrongMinecraftExceptions . add ( ret ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 index f30f788 . . b6c0ebe 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 @ @ - 76 , 7 + 76 , 7 @ @ public class BlockStateLoader 
 byte [ ] data = IOUtils . toByteArray ( reader , StandardCharsets . UTF _ 8 ) ; 
 reader = new InputStreamReader ( new ByteArrayInputStream ( data ) , StandardCharsets . UTF _ 8 ) ; 
 
 - Marker marker = GSON . fromJson ( new String ( data ) , Marker . class ) ; / / Read " forge _ marker " to determine what to load . 
 + Marker marker = GSON . fromJson ( new String ( data , StandardCharsets . UTF _ 8 ) , Marker . class ) ; / / Read " forge _ marker " to determine what to load . 
 
 switch ( marker . forge _ marker ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java 
 index 3892a65 . . 51f4d4b 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java 
 @ @ - 22 , 11 + 22 , 13 @ @ package net . minecraftforge . client . model . animation ; 
 import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . Collections ; 
 import java . util . EnumSet ; 
 import java . util . Iterator ; 
 import java . util . Map ; 
 import java . util . NoSuchElementException ; 
 + import java . util . Optional ; 
 import java . util . TreeMap ; 
 
 import javax . annotation . Nullable ; 
 @ @ - 35 , 9 + 37 , 6 @ @ import javax . vecmath . Matrix4f ; 
 import javax . vecmath . Quat4f ; 
 import javax . vecmath . Vector3f ; 
 
 - import org . apache . commons . io . IOUtils ; 
 - import org . apache . logging . log4j . Level ; 
 - 
 import net . minecraft . client . renderer . block . model . BlockPart ; 
 import net . minecraft . client . resources . IResource ; 
 import net . minecraft . client . resources . IResourceManager ; 
 @ @ - 56 , 7 + 55 , 6 @ @ import net . minecraftforge . common . model . animation . JointClips ; 
 import net . minecraftforge . common . util . JsonUtils ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 
 - import java . util . Optional ; 
 import com . google . common . collect . ImmutableCollection ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 @ @ - 557 , 7 + 555 , 7 @ @ public class ModelBlockAnimation 
 { 
 try ( IResource resource = manager . getResource ( armatureLocation ) ) 
 { 
 - ModelBlockAnimation mba = mbaGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , " UTF - 8 " ) , ModelBlockAnimation . class ) ; 
 + ModelBlockAnimation mba = mbaGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , StandardCharsets . UTF _ 8 ) , ModelBlockAnimation . class ) ; 
 / / String json = mbaGson . toJson ( mba ) ; 
 return mba ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java 
 index eae395b . . d7d8125 100644 
 - - - a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java 
 + + + b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java 
 @ @ - 51 , 7 + 51 , 6 @ @ import net . minecraftforge . common . util . JsonUtils ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 import net . minecraftforge . fml . relauncher . SideOnly ; 
 - import org . apache . commons . io . IOUtils ; 
 import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . commons . lang3 . tuple . Triple ; 
 
 @ @ - 60 , 6 + 59 , 7 @ @ import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 import java . lang . reflect . ParameterizedType ; 
 import java . lang . reflect . Type ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . Collection ; 
 import java . util . Map ; 
 import java . util . concurrent . TimeUnit ; 
 @ @ - 222 , 7 + 222 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine 
 ParameterResolver parameterResolver = new ParameterResolver ( customParameters ) ; 
 Clips . CommonClipTypeAdapterFactory . INSTANCE . setClipResolver ( clipResolver ) ; 
 TimeValues . CommonTimeValueTypeAdapterFactory . INSTANCE . setValueResolver ( parameterResolver ) ; 
 - AnimationStateMachine asm = asmGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , " UTF - 8 " ) , AnimationStateMachine . class ) ; 
 + AnimationStateMachine asm = asmGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , StandardCharsets . UTF _ 8 ) , AnimationStateMachine . class ) ; 
 clipResolver . asm = asm ; 
 parameterResolver . asm = asm ; 
 asm . initialize ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 index 318a1ab . . cf41882 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 @ @ - 24 , 12 + 24 , 17 @ @ import static org . lwjgl . opengl . GL12 . * ; 
 
 import java . awt . image . BufferedImage ; 
 import java . io . File ; 
 - import java . io . FileReader ; 
 - import java . io . FileWriter ; 
 + import java . io . FileInputStream ; 
 + import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 + import java . io . InputStreamReader ; 
 + import java . io . OutputStreamWriter ; 
 + import java . io . Reader ; 
 + import java . io . Writer ; 
 import java . lang . Thread . UncaughtExceptionHandler ; 
 import java . nio . IntBuffer ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . Iterator ; 
 import java . util . Properties ; 
 import java . util . concurrent . Semaphore ; 
 @ @ - 149 , 7 + 154 , 7 @ @ public class SplashProgress 
 parent . mkdirs ( ) ; 
 
 config = new Properties ( ) ; 
 - try ( FileReader r = new FileReader ( configFile ) ) 
 + try ( Reader r = new InputStreamReader ( new FileInputStream ( configFile ) , StandardCharsets . UTF _ 8 ) ) 
 { 
 config . load ( r ) ; 
 } 
 @ @ - 184 , 7 + 189 , 7 @ @ public class SplashProgress 
 
 File miscPackFile = new File ( Minecraft . getMinecraft ( ) . mcDataDir , getString ( " resourcePackPath " , " resources " ) ) ; 
 
 - try ( FileWriter w = new FileWriter ( configFile ) ) 
 + try ( Writer w = new OutputStreamWriter ( new FileOutputStream ( configFile ) , StandardCharsets . UTF _ 8 ) ) 
 { 
 config . store ( w , " Splash screen properties " ) ; 
 } 
 @ @ - 707 , 7 + 712 , 7 @ @ public class SplashProgress 
 enabled = false ; 
 config . setProperty ( " enabled " , " false " ) ; 
 
 - try ( FileWriter w = new FileWriter ( configFile ) ) 
 + try ( Writer w = new OutputStreamWriter ( new FileOutputStream ( configFile ) , StandardCharsets . UTF _ 8 ) ) 
 { 
 config . store ( w , " Splash screen properties " ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index affa553 . . 0d6cb7d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 20 , 11 + 20 , 14 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 - import java . io . FileReader ; 
 - import java . io . FileWriter ; 
 + import java . io . FileInputStream ; 
 + import java . io . FileOutputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 + import java . io . InputStreamReader ; 
 + import java . io . OutputStreamWriter ; 
 import java . net . MalformedURLException ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . ArrayList ; 
 import java . util . Comparator ; 
 import java . util . Iterator ; 
 @ @ - 32 , 10 + 35 , 8 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 - import java . util . regex . Matcher ; 
 
 import net . minecraft . util . ResourceLocation ; 
 - import net . minecraftforge . classloading . FMLForgePlugin ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . capabilities . CapabilityManager ; 
 import net . minecraftforge . common . config . ConfigManager ; 
 @ @ - 657 , 7 + 658 , 7 @ @ public class Loader 
 FMLLog . log . trace ( " Found a mod state file { } " , forcedModFile . getName ( ) ) ; 
 try 
 { 
 - forcedModListProperties . load ( new FileReader ( forcedModFile ) ) ; 
 + forcedModListProperties . load ( new InputStreamReader ( new FileInputStream ( forcedModFile ) , StandardCharsets . UTF _ 8 ) ) ; 
 FMLLog . log . trace ( " Loaded states for { } mods from file " , forcedModListProperties . size ( ) ) ; 
 } 
 catch ( Exception e ) 
 @ @ - 960 , 9 + 961 , 9 @ @ public class Loader 
 try 
 { 
 Properties props = new Properties ( ) ; 
 - props . load ( new FileReader ( forcedModFile ) ) ; 
 + props . load ( new InputStreamReader ( new FileInputStream ( forcedModFile ) , StandardCharsets . UTF _ 8 ) ) ; 
 props . put ( modId , " false " ) ; 
 - props . store ( new FileWriter ( forcedModFile ) , null ) ; 
 + props . store ( new OutputStreamWriter ( new FileOutputStream ( forcedModFile ) , StandardCharsets . UTF _ 8 ) , null ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 991 , 7 + 992 , 7 @ @ public class Loader 
 JsonElement injectedDeps ; 
 try 
 { 
 - injectedDeps = parser . parse ( new FileReader ( injectedDepFile ) ) ; 
 + injectedDeps = parser . parse ( new InputStreamReader ( new FileInputStream ( injectedDepFile ) , StandardCharsets . UTF _ 8 ) ) ; 
 for ( JsonElement el : injectedDeps . getAsJsonArray ( ) ) 
 { 
 JsonObject jo = el . getAsJsonObject ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / MetadataCollection . java b / src / main / java / net / minecraftforge / fml / common / MetadataCollection . java 
 index 1611efb . . 5a4c30a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / MetadataCollection . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / MetadataCollection . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml . common ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . Map ; 
 
 import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 @ @ - 53 , 7 + 54 , 7 @ @ public class MetadataCollection 
 return new MetadataCollection ( ) ; 
 } 
 
 - InputStreamReader reader = new InputStreamReader ( inputStream ) ; 
 + InputStreamReader reader = new InputStreamReader ( inputStream , StandardCharsets . UTF _ 8 ) ; 
 try 
 { 
 MetadataCollection collection ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / json / JsonAnnotationLoader . java b / src / main / java / net / minecraftforge / fml / common / discovery / json / JsonAnnotationLoader . java 
 index 8af098e . . 21eb2d5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / json / JsonAnnotationLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / json / JsonAnnotationLoader . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . discovery . json ; 
 import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 import java . lang . reflect . Type ; 
 + import java . nio . charset . StandardCharsets ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 
 @ @ - 43 , 7 + 44 , 7 @ @ public class JsonAnnotationLoader 
 
 public static Multimap < String , ASMData > loadJson ( InputStream data , ModCandidate candidate , ASMDataTable table ) 
 { 
 - Map < String , ASMInfo > map = GSON . fromJson ( new InputStreamReader ( data ) , INFO _ TABLE ) ; 
 + Map < String , ASMInfo > map = GSON . fromJson ( new InputStreamReader ( data , StandardCharsets . UTF _ 8 ) , INFO _ TABLE ) ; 
 Multimap < String , ASMData > ret = HashMultimap . create ( ) ; 
 
 for ( Entry < String , ASMInfo > entry : map . entrySet ( ) )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index feccc96 . . 484be8b 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 31 , 17 + 31 , 15 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 - import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 - import net . minecraftforge . fml . common . versioning . VersionRange ; 
 + import org . apache . logging . log4j . Level ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 import com . google . common . io . ByteStreams ; 
 import com . google . gson . Gson ; 
 
 + import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . InjectedModContainer ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 @ @ - 62 , 7 + 60 , 6 @ @ public class ForgeVersion 
 / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 public static final int buildVersion = 0 ; 
 / / This is the minecraft version we ' re building for - used in various places in Forge / FML code 
 - / / Update version compatibility list below if there is SRG compatibility between this version and some previous versions 
 public static final String mcVersion = " 1 . 12 . 1 " ; 
 / / This is the MCP data version we ' re using 
 public static final String mcpVersion = " 9 . 41 " ; 
 @ @ - 71 , 12 + 68 , 6 @ @ public class ForgeVersion 
 @ SuppressWarnings ( " unused " ) 
 private static String target = null ; 
 
 - / * 
 - * Version compatibility . Add new version strings for each version we ' re SRG compatible with . 
 - * Reset the list to empty only when incompatible changes occur . 
 - * / 
 - private static String [ ] extraCompatibleVersions = { " 1 . 12 " } ; 
 - 
 private static final Logger log = LogManager . getLogger ( " ForgeVersionCheck " ) ; 
 
 public static int getMajorVersion ( ) 
 @ @ - 116 , 15 + 107 , 6 @ @ public class ForgeVersion 
 return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 } 
 
 - / / We add in the current version ( we ' re compatible with it ) and test additional versions for compatibility 
 - private static List < DefaultArtifactVersion > COMPATIBLE _ VERSIONS = Stream . concat ( Stream . of ( mcVersion ) , Stream . of ( extraCompatibleVersions ) ) 
 - . map ( s - > new DefaultArtifactVersion ( " dummy " , s ) ) . collect ( Collectors . toList ( ) ) ; 
 - 
 - / / Tests the mod supplied version range for compatibility with our version compatibility list 
 - public static boolean testMinecraftVersionCompatibility ( VersionRange modVersion ) { 
 - return COMPATIBLE _ VERSIONS . stream ( ) . anyMatch ( modVersion : : containsVersion ) ; 
 - } 
 - 
 public static enum Status 
 { 
 PENDING ( ) , 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index e8a1d15 . . c7b1577 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 67 , 6 + 67 , 7 @ @ import java . util . function . Function ; 
 import com . google . common . base . Strings ; 
 import com . google . common . collect . ArrayListMultimap ; 
 import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableList . Builder ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . ListMultimap ; 
 @ @ - 255 , 7 + 256 , 16 @ @ public class FMLModContainer implements ModContainer 
 } 
 
 String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; 
 - 
 + if ( " [ 1 . 8 . 8 ] " . equals ( mcVersionString ) ) mcVersionString = " [ 1 . 8 . 8 , 1 . 8 . 9 ] " ; / / MC 1 . 8 . 8 and 1 . 8 . 9 is forward SRG compatible so accept these versions by default . 
 + if ( " [ 1 . 9 . 4 ] " . equals ( mcVersionString ) | | 
 + " [ 1 . 9 , 1 . 9 . 4 ] " . equals ( mcVersionString ) | | 
 + " [ 1 . 9 . 4 , 1 . 10 ) " . equals ( mcVersionString ) | | 
 + " [ 1 . 10 ] " . equals ( mcVersionString ) ) 
 + mcVersionString = " [ 1 . 9 . 4 , 1 . 10 . 2 ] " ; 
 + if ( " [ 1 . 11 ] " . equals ( mcVersionString ) ) 
 + mcVersionString = " [ 1 . 11 , 1 . 11 . 2 ] " ; 
 + if ( " [ 1 . 12 ] " . equals ( mcVersionString ) ) 
 + mcVersionString = " [ 1 . 12 , 1 . 12 . 1 ] " ; 
 if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) 
 { 
 minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index e484d47 . . 5646f8b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . net . MalformedURLException ; 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . Comparator ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 @ @ - 34 , 7 + 35 , 6 @ @ import java . util . Properties ; 
 import java . util . Set ; 
 
 import net . minecraft . util . ResourceLocation ; 
 - import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . capabilities . CapabilityManager ; 
 import net . minecraftforge . common . config . ConfigManager ; 
 import net . minecraftforge . common . crafting . CraftingHelper ; 
 @ @ - 62 , 6 + 62 , 7 @ @ import org . apache . commons . io . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . CharMatcher ; 
 + import java . util . function . Function ; 
 import com . google . common . base . Joiner ; 
 import com . google . common . base . Splitter ; 
 import com . google . common . collect . ArrayListMultimap ; 
 @ @ - 237 , 9 + 238 , 9 @ @ public class Loader 
 ArrayListMultimap < String , String > reqList = ArrayListMultimap . create ( ) ; 
 for ( ModContainer mod : getActiveModList ( ) ) 
 { 
 - if ( ! ForgeVersion . testMinecraftVersionCompatibility ( mod . acceptableMinecraftVersionRange ( ) ) ) 
 + if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) 
 { 
 - FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . It is compatible with { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) , mod . acceptableMinecraftVersionRange ( ) ) ; 
 + FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; 
 WrongMinecraftVersionException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; 
 FMLLog . log . fatal ( ret . getMessage ( ) ) ; 
 wrongMinecraftExceptions . add ( ret ) ;
