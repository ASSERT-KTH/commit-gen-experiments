BLEU SCORE: 1.0

TEST MSG: Allow registering custom language adapters .
GENERATED MSG: Allow registering custom language adapters .

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java <nl> index 307deea . . a839d0a 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java <nl> @ @ - 90 , 9 + 90 , 26 @ @ public class FMLModContainer implements ModContainer <nl> this . source = container . getModContainer ( ) ; <nl> this . candidate = container ; <nl> this . descriptor = modDescriptor ; <nl> - this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; <nl> - this . languageAdapter = " scala " . equals ( modLanguage ) ? new ILanguageAdapter . ScalaAdapter ( ) : new ILanguageAdapter . JavaAdapter ( ) ; <nl> this . eventMethods = ArrayListMultimap . create ( ) ; <nl> + <nl> + this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; <nl> + if ( modDescriptor . get ( " modLanguageAdapter " ) . equals ( " " ) ) <nl> + { <nl> + this . languageAdapter = " scala " . equals ( modLanguage ) ? new ILanguageAdapter . ScalaAdapter ( ) : new ILanguageAdapter . JavaAdapter ( ) ; <nl> + } <nl> + else <nl> + { <nl> + try <nl> + { <nl> + this . languageAdapter = ( ILanguageAdapter ) Class . forName ( ( String ) modDescriptor . get ( " modLanguageAdapter " ) , true , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; <nl> + FMLLog . finer ( " Using custom language adapter % s ( for % s ) " , this . languageAdapter , this . className ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + FMLLog . severe ( " Error constructing custom mod language adapter % s ( referenced by % s ) : % s " , modDescriptor . get ( " modLanguageAdapter " ) , this . className , ex ) ; <nl> + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; <nl> + } <nl> + } <nl> } <nl> <nl> private ILanguageAdapter getLanguageAdapter ( ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / Mod . java b / fml / src / main / java / cpw / mods / fml / common / Mod . java <nl> index 1e25d03 . . 3cc2643 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / Mod . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / Mod . java <nl> @ @ - 144 , 6 + 144 , 18 @ @ public @ interface Mod <nl> * @ return The language the mod is authored in <nl> * / <nl> String modLanguage ( ) default " java " ; <nl> + <nl> + / * * <nl> + * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a <nl> + * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . <nl> + * <nl> + * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and <nl> + * halt loading . <nl> + * <nl> + * @ return The full class name of the language adapter <nl> + * / <nl> + String modLanguageAdapter ( ) default " " ; <nl> + <nl> / * * <nl> * NOT YET IMPLEMENTED . < / br > <nl> * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 57296c2 . . 8c8ce46 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 94 , 9 + 94 , 26 @ @ public class FMLModContainer implements ModContainer <nl> this . source = container . getModContainer ( ) ; <nl> this . candidate = container ; <nl> this . descriptor = modDescriptor ; <nl> - this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; <nl> - this . languageAdapter = " scala " . equals ( modLanguage ) ? new ILanguageAdapter . ScalaAdapter ( ) : new ILanguageAdapter . JavaAdapter ( ) ; <nl> this . eventMethods = ArrayListMultimap . create ( ) ; <nl> + <nl> + this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; <nl> + if ( modDescriptor . get ( " modLanguageAdapter " ) . equals ( " " ) ) <nl> + { <nl> + this . languageAdapter = " scala " . equals ( modLanguage ) ? new ILanguageAdapter . ScalaAdapter ( ) : new ILanguageAdapter . JavaAdapter ( ) ; <nl> + } <nl> + else <nl> + { <nl> + try <nl> + { <nl> + this . languageAdapter = ( ILanguageAdapter ) Class . forName ( ( String ) modDescriptor . get ( " modLanguageAdapter " ) , true , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; <nl> + FMLLog . finer ( " Using custom language adapter % s ( for % s ) " , this . languageAdapter , this . className ) ; <nl> + } <nl> + catch ( Exception ex ) <nl> + { <nl> + FMLLog . severe ( " Error constructing custom mod language adapter % s ( referenced by % s ) : % s " , modDescriptor . get ( " modLanguageAdapter " ) , this . className , ex ) ; <nl> + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; <nl> + } <nl> + } <nl> } <nl> <nl> private ILanguageAdapter getLanguageAdapter ( ) <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index ac51b40 . . a2ad320 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 157 , 6 + 157 , 18 @ @ public @ interface Mod <nl> * @ return The language the mod is authored in <nl> * / <nl> String modLanguage ( ) default " java " ; <nl> + <nl> + / * * <nl> + * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a <nl> + * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . <nl> + * <nl> + * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and <nl> + * halt loading . <nl> + * <nl> + * @ return The full class name of the language adapter <nl> + * / <nl> + String modLanguageAdapter ( ) default " " ; <nl> + <nl> / * * <nl> * NOT YET IMPLEMENTED . < / br > <nl> * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java 
 index 307deea . . a839d0a 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLModContainer . java 
 @ @ - 90 , 9 + 90 , 26 @ @ public class FMLModContainer implements ModContainer 
 this . source = container . getModContainer ( ) ; 
 this . candidate = container ; 
 this . descriptor = modDescriptor ; 
 - this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; 
 - this . languageAdapter = " scala " . equals ( modLanguage ) ? new ILanguageAdapter . ScalaAdapter ( ) : new ILanguageAdapter . JavaAdapter ( ) ; 
 this . eventMethods = ArrayListMultimap . create ( ) ; 
 + 
 + this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; 
 + if ( modDescriptor . get ( " modLanguageAdapter " ) . equals ( " " ) ) 
 + { 
 + this . languageAdapter = " scala " . equals ( modLanguage ) ? new ILanguageAdapter . ScalaAdapter ( ) : new ILanguageAdapter . JavaAdapter ( ) ; 
 + } 
 + else 
 + { 
 + try 
 + { 
 + this . languageAdapter = ( ILanguageAdapter ) Class . forName ( ( String ) modDescriptor . get ( " modLanguageAdapter " ) , true , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; 
 + FMLLog . finer ( " Using custom language adapter % s ( for % s ) " , this . languageAdapter , this . className ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + FMLLog . severe ( " Error constructing custom mod language adapter % s ( referenced by % s ) : % s " , modDescriptor . get ( " modLanguageAdapter " ) , this . className , ex ) ; 
 + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; 
 + } 
 + } 
 } 
 
 private ILanguageAdapter getLanguageAdapter ( ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / Mod . java b / fml / src / main / java / cpw / mods / fml / common / Mod . java 
 index 1e25d03 . . 3cc2643 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / Mod . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / Mod . java 
 @ @ - 144 , 6 + 144 , 18 @ @ public @ interface Mod 
 * @ return The language the mod is authored in 
 * / 
 String modLanguage ( ) default " java " ; 
 + 
 + / * * 
 + * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a 
 + * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . 
 + * 
 + * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and 
 + * halt loading . 
 + * 
 + * @ return The full class name of the language adapter 
 + * / 
 + String modLanguageAdapter ( ) default " " ; 
 + 
 / * * 
 * NOT YET IMPLEMENTED . < / br > 
 * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given

NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 57296c2 . . 8c8ce46 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 94 , 9 + 94 , 26 @ @ public class FMLModContainer implements ModContainer 
 this . source = container . getModContainer ( ) ; 
 this . candidate = container ; 
 this . descriptor = modDescriptor ; 
 - this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; 
 - this . languageAdapter = " scala " . equals ( modLanguage ) ? new ILanguageAdapter . ScalaAdapter ( ) : new ILanguageAdapter . JavaAdapter ( ) ; 
 this . eventMethods = ArrayListMultimap . create ( ) ; 
 + 
 + this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; 
 + if ( modDescriptor . get ( " modLanguageAdapter " ) . equals ( " " ) ) 
 + { 
 + this . languageAdapter = " scala " . equals ( modLanguage ) ? new ILanguageAdapter . ScalaAdapter ( ) : new ILanguageAdapter . JavaAdapter ( ) ; 
 + } 
 + else 
 + { 
 + try 
 + { 
 + this . languageAdapter = ( ILanguageAdapter ) Class . forName ( ( String ) modDescriptor . get ( " modLanguageAdapter " ) , true , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; 
 + FMLLog . finer ( " Using custom language adapter % s ( for % s ) " , this . languageAdapter , this . className ) ; 
 + } 
 + catch ( Exception ex ) 
 + { 
 + FMLLog . severe ( " Error constructing custom mod language adapter % s ( referenced by % s ) : % s " , modDescriptor . get ( " modLanguageAdapter " ) , this . className , ex ) ; 
 + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; 
 + } 
 + } 
 } 
 
 private ILanguageAdapter getLanguageAdapter ( ) 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index ac51b40 . . a2ad320 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 157 , 6 + 157 , 18 @ @ public @ interface Mod 
 * @ return The language the mod is authored in 
 * / 
 String modLanguage ( ) default " java " ; 
 + 
 + / * * 
 + * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a 
 + * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . 
 + * 
 + * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and 
 + * halt loading . 
 + * 
 + * @ return The full class name of the language adapter 
 + * / 
 + String modLanguageAdapter ( ) default " " ; 
 + 
 / * * 
 * NOT YET IMPLEMENTED . < / br > 
 * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given
