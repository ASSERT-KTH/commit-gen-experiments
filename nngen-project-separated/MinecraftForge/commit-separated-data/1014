BLEU SCORE: 0.05815868174415823

TEST MSG: Fixing two IndexOutBoundsExceptions from the BiomeDictionary
GENERATED MSG: Fix AIOOB in BiomeDictionary . Closes # 1326

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> index 11f20fd . . b1e52c8 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> @ @ - 104 , 7 + 104 , 16 @ @ public class BiomeDictionary <nl> Type ret = EnumHelper . addEnum ( Type . class , name , new Class [ ] { Type [ ] . class } , new Object [ ] { subTypes } ) ; <nl> if ( ret . ordinal ( ) > = typeInfoList . length ) <nl> { <nl> - typeInfoList = Arrays . copyOf ( typeInfoList , ret . ordinal ( ) ) ; <nl> + typeInfoList = Arrays . copyOf ( typeInfoList , ret . ordinal ( ) + 1 ) ; <nl> + } <nl> + for ( BiomeInfo bInfo : biomeList ) <nl> + { <nl> + if ( bInfo ! = null ) <nl> + { <nl> + EnumSet < Type > oldSet = bInfo . typeList ; <nl> + bInfo . typeList = EnumSet . noneOf ( Type . class ) ; <nl> + bInfo . typeList . addAll ( oldSet ) ; <nl> + } <nl> } <nl> return ret ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> index 726cf9b . . a820b24 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> @ @ - 101 , 7 + 101 , 12 @ @ public class BiomeDictionary <nl> if ( t . name ( ) . equals ( name ) ) <nl> return t ; <nl> } <nl> - return EnumHelper . addEnum ( Type . class , name , new Class [ ] { Type [ ] . class } , new Object [ ] { subTypes } ) ; <nl> + Type ret = EnumHelper . addEnum ( Type . class , name , new Class [ ] { Type [ ] . class } , new Object [ ] { subTypes } ) ; <nl> + if ( ret . ordinal ( ) > = typeInfoList . length ) <nl> + { <nl> + typeInfoList = Arrays . copyOf ( typeInfoList , ret . ordinal ( ) ) ; <nl> + } <nl> + return ret ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 index 11f20fd . . b1e52c8 100644 
 - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 @ @ - 104 , 7 + 104 , 16 @ @ public class BiomeDictionary 
 Type ret = EnumHelper . addEnum ( Type . class , name , new Class [ ] { Type [ ] . class } , new Object [ ] { subTypes } ) ; 
 if ( ret . ordinal ( ) > = typeInfoList . length ) 
 { 
 - typeInfoList = Arrays . copyOf ( typeInfoList , ret . ordinal ( ) ) ; 
 + typeInfoList = Arrays . copyOf ( typeInfoList , ret . ordinal ( ) + 1 ) ; 
 + } 
 + for ( BiomeInfo bInfo : biomeList ) 
 + { 
 + if ( bInfo ! = null ) 
 + { 
 + EnumSet < Type > oldSet = bInfo . typeList ; 
 + bInfo . typeList = EnumSet . noneOf ( Type . class ) ; 
 + bInfo . typeList . addAll ( oldSet ) ; 
 + } 
 } 
 return ret ; 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 index 726cf9b . . a820b24 100644 
 - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 @ @ - 101 , 7 + 101 , 12 @ @ public class BiomeDictionary 
 if ( t . name ( ) . equals ( name ) ) 
 return t ; 
 } 
 - return EnumHelper . addEnum ( Type . class , name , new Class [ ] { Type [ ] . class } , new Object [ ] { subTypes } ) ; 
 + Type ret = EnumHelper . addEnum ( Type . class , name , new Class [ ] { Type [ ] . class } , new Object [ ] { subTypes } ) ; 
 + if ( ret . ordinal ( ) > = typeInfoList . length ) 
 + { 
 + typeInfoList = Arrays . copyOf ( typeInfoList , ret . ordinal ( ) ) ; 
 + } 
 + return ret ; 
 } 
 } 

