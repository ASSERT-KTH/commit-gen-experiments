BLEU SCORE: 0.022694309136445802

TEST MSG: Deprecate int IDs in FluidRegistry . Modders should only ever use the String name . Also add a ' friendly ' exception when attempting to get an ID for a unregistered fluid . Closes # 1374
GENERATED MSG: Restore binary compatibility issues in FluidRegistry caused by recent changes .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> index c76f040 . . 45b6ad3 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> + + + b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> @ @ - 48 , 10 + 48 , 11 @ @ public abstract class ForgeMessage { <nl> public static class FluidIdMapMessage extends ForgeMessage { <nl> BiMap < Fluid , Integer > fluidIds = HashBiMap . create ( ) ; <nl> Set < String > defaultFluids = Sets . newHashSet ( ) ; <nl> + @ SuppressWarnings ( " deprecation " ) <nl> @ Override <nl> void toBytes ( ByteBuf bytes ) <nl> { <nl> - Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDsByFluid ( ) ; <nl> + Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDs ( ) ; <nl> bytes . writeInt ( ids . size ( ) ) ; <nl> for ( Map . Entry < Fluid , Integer > entry : ids . entrySet ( ) ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> index 8da11b4 . . c533506 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> @ @ - 165 , 6 + 165 , 7 @ @ public class Fluid <nl> return this . fluidName ; <nl> } <nl> <nl> + @ Deprecated / / Modders should never actually use int ID , use String <nl> public final int getID ( ) <nl> { <nl> return FluidRegistry . getFluidID ( this . fluidName ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> index 6f1bd7e . . b1a2e6f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> @ @ - 188 , 19 + 188 , 26 @ @ public abstract class FluidRegistry <nl> return fluids . get ( fluidName ) ; <nl> } <nl> <nl> + @ Deprecated / / Modders should never actually use int ID , use String <nl> public static Fluid getFluid ( int fluidID ) <nl> { <nl> return fluidIDs . inverse ( ) . get ( fluidID ) ; <nl> } <nl> <nl> + @ Deprecated / / Modders should never actually use int ID , use String <nl> public static int getFluidID ( Fluid fluid ) <nl> { <nl> - return fluidIDs . get ( fluid ) ; <nl> + Integer ret = fluidIDs . get ( fluid ) ; <nl> + if ( ret = = null ) throw new RuntimeException ( " Attempted to access ID for unregistered fluid , Stop using this method modder ! " ) ; <nl> + return ret ; <nl> } <nl> <nl> + @ Deprecated / / Modders should never actually use int ID , use String <nl> public static int getFluidID ( String fluidName ) <nl> { <nl> - return fluidIDs . get ( getFluid ( fluidName ) ) ; <nl> + Integer ret = fluidIDs . get ( getFluid ( fluidName ) ) ; <nl> + if ( ret = = null ) throw new RuntimeException ( " Attempted to access ID for unregistered fluid , Stop using this method modder ! " ) ; <nl> + return ret ; <nl> } <nl> <nl> public static String getFluidName ( Fluid fluid ) <nl> @ @ - 232 , 21 + 239 , 14 @ @ public abstract class FluidRegistry <nl> <nl> / * * <nl> * Returns a read - only map containing Fluid Names and their associated IDs . <nl> + * Modders should never actually use this , use the String names . <nl> * / <nl> + @ Deprecated <nl> public static Map < Fluid , Integer > getRegisteredFluidIDs ( ) <nl> { <nl> return ImmutableMap . copyOf ( fluidIDs ) ; <nl> } <nl> <nl> - / * * <nl> - * Returns a read - only map containing Fluid IDs and their associated Fluids . <nl> - * In 1 . 8 . 3 , this will change to just ' getRegisteredFluidIDs ' <nl> - * / <nl> - public static Map < Fluid , Integer > getRegisteredFluidIDsByFluid ( ) <nl> - { <nl> - return ImmutableMap . copyOf ( fluidIDs ) ; <nl> - } <nl> - <nl> public static Fluid lookupFluidForBlock ( Block block ) <nl> { <nl> if ( fluidBlocks = = null )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> index 6ba6ccd . . 17f6ff0 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> + + + b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> @ @ - 14 , 14 + 14 , 14 @ @ public abstract class ForgeMessage { <nl> int dimensionId ; <nl> / * * The provider ID to register with dimension on client * / <nl> int providerId ; <nl> - <nl> + <nl> public DimensionRegisterMessage ( ) { } <nl> public DimensionRegisterMessage ( int dimensionId , int providerId ) <nl> { <nl> this . dimensionId = dimensionId ; <nl> this . providerId = providerId ; <nl> } <nl> - <nl> + <nl> @ Override <nl> void toBytes ( ByteBuf bytes ) <nl> { <nl> @ @ - 42 , 7 + 42 , 7 @ @ public abstract class ForgeMessage { <nl> @ Override <nl> void toBytes ( ByteBuf bytes ) <nl> { <nl> - Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDs ( ) ; <nl> + Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDsByFluid ( ) ; <nl> bytes . writeInt ( ids . size ( ) ) ; <nl> for ( Map . Entry < Fluid , Integer > entry : ids . entrySet ( ) ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> index 866f0db . . 30d7774 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package net . minecraftforge . fluids ; <nl> <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . init . Blocks ; <nl> @ @ - 28 , 6 + 29 , 7 @ @ public abstract class FluidRegistry <nl> <nl> static BiMap < String , Fluid > fluids = HashBiMap . create ( ) ; <nl> static BiMap < Fluid , Integer > fluidIDs = HashBiMap . create ( ) ; <nl> + static BiMap < Integer , String > fluidNames = HashBiMap . create ( ) ; / / Caching this just makes some other calls faster <nl> static BiMap < Block , Fluid > fluidBlocks ; <nl> <nl> public static final Fluid WATER = new Fluid ( " water " ) { <nl> @ @ - 63 , 6 + 65 , 9 @ @ public abstract class FluidRegistry <nl> maxID = newfluidIDs . size ( ) ; <nl> fluidIDs . clear ( ) ; <nl> fluidIDs . putAll ( newfluidIDs ) ; <nl> + fluidNames . clear ( ) ; <nl> + for ( Entry < Fluid , Integer > e : fluidIDs . entrySet ( ) ) <nl> + fluidNames . put ( e . getValue ( ) , e . getKey ( ) . getName ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 81 , 6 + 86 , 7 @ @ public abstract class FluidRegistry <nl> } <nl> fluids . put ( fluid . getName ( ) , fluid ) ; <nl> fluidIDs . put ( fluid , + + maxID ) ; <nl> + fluidNames . put ( maxID , fluid . getName ( ) ) ; <nl> <nl> MinecraftForge . EVENT _ BUS . post ( new FluidRegisterEvent ( fluid . getName ( ) , maxID ) ) ; <nl> return true ; <nl> @ @ - 116 , 6 + 122 , 12 @ @ public abstract class FluidRegistry <nl> 	 return fluidIDs . get ( getFluid ( fluidName ) ) ; <nl> } <nl> <nl> + @ Deprecated / / Remove in 1 . 8 . 3 <nl> + public static String getFluidName ( int fluidID ) <nl> + { <nl> + return fluidNames . get ( fluidID ) ; <nl> + } <nl> + <nl> public static String getFluidName ( Fluid fluid ) <nl> { <nl> return fluids . inverse ( ) . get ( fluid ) ; <nl> @ @ - 144 , 9 + 156 , 19 @ @ public abstract class FluidRegistry <nl> } <nl> <nl> / * * <nl> + * Returns a read - only map containing Fluid Names and their associated IDs . <nl> + * / <nl> + @ Deprecated / / Change return type to < Fluid , Integer > in 1 . 8 . 3 <nl> + public static Map < String , Integer > getRegisteredFluidIDs ( ) <nl> + { <nl> + return ImmutableMap . copyOf ( fluidNames . inverse ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> * Returns a read - only map containing Fluid IDs and their associated Fluids . <nl> + * In 1 . 8 . 3 , this will change to just ' getRegisteredFluidIDs ' <nl> * / <nl> - public static Map < Fluid , Integer > getRegisteredFluidIDs ( ) <nl> + public static Map < Fluid , Integer > getRegisteredFluidIDsByFluid ( ) <nl> { <nl> return ImmutableMap . copyOf ( fluidIDs ) ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 index c76f040 . . 45b6ad3 100644 
 - - - a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 + + + b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 @ @ - 48 , 10 + 48 , 11 @ @ public abstract class ForgeMessage { 
 public static class FluidIdMapMessage extends ForgeMessage { 
 BiMap < Fluid , Integer > fluidIds = HashBiMap . create ( ) ; 
 Set < String > defaultFluids = Sets . newHashSet ( ) ; 
 + @ SuppressWarnings ( " deprecation " ) 
 @ Override 
 void toBytes ( ByteBuf bytes ) 
 { 
 - Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDsByFluid ( ) ; 
 + Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDs ( ) ; 
 bytes . writeInt ( ids . size ( ) ) ; 
 for ( Map . Entry < Fluid , Integer > entry : ids . entrySet ( ) ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 index 8da11b4 . . c533506 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java 
 + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 @ @ - 165 , 6 + 165 , 7 @ @ public class Fluid 
 return this . fluidName ; 
 } 
 
 + @ Deprecated / / Modders should never actually use int ID , use String 
 public final int getID ( ) 
 { 
 return FluidRegistry . getFluidID ( this . fluidName ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 index 6f1bd7e . . b1a2e6f 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 @ @ - 188 , 19 + 188 , 26 @ @ public abstract class FluidRegistry 
 return fluids . get ( fluidName ) ; 
 } 
 
 + @ Deprecated / / Modders should never actually use int ID , use String 
 public static Fluid getFluid ( int fluidID ) 
 { 
 return fluidIDs . inverse ( ) . get ( fluidID ) ; 
 } 
 
 + @ Deprecated / / Modders should never actually use int ID , use String 
 public static int getFluidID ( Fluid fluid ) 
 { 
 - return fluidIDs . get ( fluid ) ; 
 + Integer ret = fluidIDs . get ( fluid ) ; 
 + if ( ret = = null ) throw new RuntimeException ( " Attempted to access ID for unregistered fluid , Stop using this method modder ! " ) ; 
 + return ret ; 
 } 
 
 + @ Deprecated / / Modders should never actually use int ID , use String 
 public static int getFluidID ( String fluidName ) 
 { 
 - return fluidIDs . get ( getFluid ( fluidName ) ) ; 
 + Integer ret = fluidIDs . get ( getFluid ( fluidName ) ) ; 
 + if ( ret = = null ) throw new RuntimeException ( " Attempted to access ID for unregistered fluid , Stop using this method modder ! " ) ; 
 + return ret ; 
 } 
 
 public static String getFluidName ( Fluid fluid ) 
 @ @ - 232 , 21 + 239 , 14 @ @ public abstract class FluidRegistry 
 
 / * * 
 * Returns a read - only map containing Fluid Names and their associated IDs . 
 + * Modders should never actually use this , use the String names . 
 * / 
 + @ Deprecated 
 public static Map < Fluid , Integer > getRegisteredFluidIDs ( ) 
 { 
 return ImmutableMap . copyOf ( fluidIDs ) ; 
 } 
 
 - / * * 
 - * Returns a read - only map containing Fluid IDs and their associated Fluids . 
 - * In 1 . 8 . 3 , this will change to just ' getRegisteredFluidIDs ' 
 - * / 
 - public static Map < Fluid , Integer > getRegisteredFluidIDsByFluid ( ) 
 - { 
 - return ImmutableMap . copyOf ( fluidIDs ) ; 
 - } 
 - 
 public static Fluid lookupFluidForBlock ( Block block ) 
 { 
 if ( fluidBlocks = = null )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 index 6ba6ccd . . 17f6ff0 100644 
 - - - a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 + + + b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 @ @ - 14 , 14 + 14 , 14 @ @ public abstract class ForgeMessage { 
 int dimensionId ; 
 / * * The provider ID to register with dimension on client * / 
 int providerId ; 
 - 
 + 
 public DimensionRegisterMessage ( ) { } 
 public DimensionRegisterMessage ( int dimensionId , int providerId ) 
 { 
 this . dimensionId = dimensionId ; 
 this . providerId = providerId ; 
 } 
 - 
 + 
 @ Override 
 void toBytes ( ByteBuf bytes ) 
 { 
 @ @ - 42 , 7 + 42 , 7 @ @ public abstract class ForgeMessage { 
 @ Override 
 void toBytes ( ByteBuf bytes ) 
 { 
 - Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDs ( ) ; 
 + Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDsByFluid ( ) ; 
 bytes . writeInt ( ids . size ( ) ) ; 
 for ( Map . Entry < Fluid , Integer > entry : ids . entrySet ( ) ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 index 866f0db . . 30d7774 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package net . minecraftforge . fluids ; 
 
 import java . util . HashMap ; 
 import java . util . Map ; 
 + import java . util . Map . Entry ; 
 
 import net . minecraft . block . Block ; 
 import net . minecraft . init . Blocks ; 
 @ @ - 28 , 6 + 29 , 7 @ @ public abstract class FluidRegistry 
 
 static BiMap < String , Fluid > fluids = HashBiMap . create ( ) ; 
 static BiMap < Fluid , Integer > fluidIDs = HashBiMap . create ( ) ; 
 + static BiMap < Integer , String > fluidNames = HashBiMap . create ( ) ; / / Caching this just makes some other calls faster 
 static BiMap < Block , Fluid > fluidBlocks ; 
 
 public static final Fluid WATER = new Fluid ( " water " ) { 
 @ @ - 63 , 6 + 65 , 9 @ @ public abstract class FluidRegistry 
 maxID = newfluidIDs . size ( ) ; 
 fluidIDs . clear ( ) ; 
 fluidIDs . putAll ( newfluidIDs ) ; 
 + fluidNames . clear ( ) ; 
 + for ( Entry < Fluid , Integer > e : fluidIDs . entrySet ( ) ) 
 + fluidNames . put ( e . getValue ( ) , e . getKey ( ) . getName ( ) ) ; 
 } 
 
 / * * 
 @ @ - 81 , 6 + 86 , 7 @ @ public abstract class FluidRegistry 
 } 
 fluids . put ( fluid . getName ( ) , fluid ) ; 
 fluidIDs . put ( fluid , + + maxID ) ; 
 + fluidNames . put ( maxID , fluid . getName ( ) ) ; 
 
 MinecraftForge . EVENT _ BUS . post ( new FluidRegisterEvent ( fluid . getName ( ) , maxID ) ) ; 
 return true ; 
 @ @ - 116 , 6 + 122 , 12 @ @ public abstract class FluidRegistry 
 	 return fluidIDs . get ( getFluid ( fluidName ) ) ; 
 } 
 
 + @ Deprecated / / Remove in 1 . 8 . 3 
 + public static String getFluidName ( int fluidID ) 
 + { 
 + return fluidNames . get ( fluidID ) ; 
 + } 
 + 
 public static String getFluidName ( Fluid fluid ) 
 { 
 return fluids . inverse ( ) . get ( fluid ) ; 
 @ @ - 144 , 9 + 156 , 19 @ @ public abstract class FluidRegistry 
 } 
 
 / * * 
 + * Returns a read - only map containing Fluid Names and their associated IDs . 
 + * / 
 + @ Deprecated / / Change return type to < Fluid , Integer > in 1 . 8 . 3 
 + public static Map < String , Integer > getRegisteredFluidIDs ( ) 
 + { 
 + return ImmutableMap . copyOf ( fluidNames . inverse ( ) ) ; 
 + } 
 + 
 + / * * 
 * Returns a read - only map containing Fluid IDs and their associated Fluids . 
 + * In 1 . 8 . 3 , this will change to just ' getRegisteredFluidIDs ' 
 * / 
 - public static Map < Fluid , Integer > getRegisteredFluidIDs ( ) 
 + public static Map < Fluid , Integer > getRegisteredFluidIDsByFluid ( ) 
 { 
 return ImmutableMap . copyOf ( fluidIDs ) ; 
 }
