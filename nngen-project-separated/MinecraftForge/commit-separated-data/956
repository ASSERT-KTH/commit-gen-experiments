BLEU SCORE: 0.03283637368030199

TEST MSG: Fix texture error message for broken textures
GENERATED MSG: Implement STDOUT / STDERR redirection .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 3fc95c6 . . 978b753 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 928 , 7 + 928 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> logger . error ( Strings . repeat ( " + = " , 25 ) ) ; <nl> logger . error ( " The following texture errors were found . " ) ; <nl> Map < String , FallbackResourceManager > resManagers = ObfuscationReflectionHelper . getPrivateValue ( SimpleReloadableResourceManager . class , ( SimpleReloadableResourceManager ) Minecraft . getMinecraft ( ) . getResourceManager ( ) , " domainResourceManagers " , " field _ 110548 " + " _ a " ) ; <nl> - for ( String resourceDomain : missingTextures . keySet ( ) ) <nl> + for ( String resourceDomain : badTextureDomains ) <nl> { <nl> Set < ResourceLocation > missing = missingTextures . get ( resourceDomain ) ; <nl> logger . error ( Strings . repeat ( " = " , 50 ) ) ; <nl> @ @ - 964 , 12 + 964 , 13 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> } <nl> logger . error ( Strings . repeat ( " - " , 25 ) ) ; <nl> - logger . error ( " The missing resources for domain { } are : " , resourceDomain ) ; <nl> - for ( ResourceLocation rl : missing ) <nl> - { <nl> - logger . error ( " { } " , rl . getResourcePath ( ) ) ; <nl> + if ( missingTextures . containsKey ( resourceDomain ) ) { <nl> + logger . error ( " The missing resources for domain { } are : " , resourceDomain ) ; <nl> + for ( ResourceLocation rl : missing ) { <nl> + logger . error ( " { } " , rl . getResourcePath ( ) ) ; <nl> + } <nl> + logger . error ( Strings . repeat ( " - " , 25 ) ) ; <nl> } <nl> - logger . error ( Strings . repeat ( " - " , 25 ) ) ; <nl> if ( ! brokenTextures . containsRow ( resourceDomain ) ) <nl> { <nl> logger . error ( " No other errors exist for domain { } " , resourceDomain ) ;
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java b / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java <nl> new file mode 100644 <nl> index 0000000 . . eb7a83d <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java <nl> @ @ - 0 , 0 + 1 , 46 @ @ <nl> + / * <nl> + * Forge Mod Loader <nl> + * Copyright ( c ) 2012 - 2013 cpw . <nl> + * All rights reserved . This program and the accompanying materials <nl> + * are made available under the terms of the GNU Lesser Public License v2 . 1 <nl> + * which accompanies this distribution , and is available at <nl> + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html <nl> + * / <nl> + <nl> + package cpw . mods . fml . common ; <nl> + <nl> + import java . io . PrintStream ; <nl> + <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + / * * <nl> + * PrintStream which redirects it ' s output to a given logger . <nl> + * <nl> + * @ author Arkan <nl> + * / <nl> + public class TracingPrintStream extends PrintStream { <nl> + <nl> + private Logger logger ; <nl> + <nl> + public TracingPrintStream ( Logger logger , PrintStream original ) { <nl> + super ( original ) ; <nl> + this . logger = logger ; <nl> + } <nl> + <nl> + @ Override <nl> + public void println ( Object o ) { <nl> + logger . info ( getPrefix ( ) + o ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void println ( String s ) { <nl> + logger . info ( getPrefix ( ) + s ) ; <nl> + } <nl> + <nl> + private String getPrefix ( ) { <nl> + StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; <nl> + StackTraceElement elem = elems [ 3 ] ; / / The caller is always at depth 2 , plus this call . <nl> + return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / FMLRelaunchLog . java b / fml / src / main / java / cpw / mods / fml / relauncher / FMLRelaunchLog . java <nl> index 2c6084d . . ff7df33 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / relauncher / FMLRelaunchLog . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / relauncher / FMLRelaunchLog . java <nl> @ @ - 14 , 11 + 14 , 14 @ @ package cpw . mods . fml . relauncher ; <nl> <nl> import java . io . File ; <nl> import java . util . Locale ; <nl> + <nl> import org . apache . logging . log4j . Level ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . ThreadContext ; <nl> <nl> + import cpw . mods . fml . common . TracingPrintStream ; <nl> + <nl> public class FMLRelaunchLog { <nl> <nl> / * * <nl> @ @ - 39 , 13 + 42 , 17 @ @ public class FMLRelaunchLog { <nl> } <nl> <nl> / * * <nl> - * Configure the FML logger <nl> + * Configure the FML logger and inject tracing printstreams . <nl> * / <nl> private static void configureLogging ( ) <nl> { <nl> log . myLog = LogManager . getLogger ( " FML " ) ; <nl> ThreadContext . put ( " side " , side . name ( ) . toLowerCase ( Locale . ENGLISH ) ) ; <nl> configured = true ; <nl> + <nl> + FMLRelaunchLog . fine ( " Injecting tracing printstreams for STDOUT / STDERR . " ) ; <nl> + System . setOut ( new TracingPrintStream ( LogManager . getLogger ( " STDOUT " ) , System . out ) ) ; <nl> + System . setErr ( new TracingPrintStream ( LogManager . getLogger ( " STDERR " ) , System . err ) ) ; <nl> } <nl> <nl> public static void log ( String targetLog , Level level , String format , Object . . . data )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 3fc95c6 . . 978b753 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 928 , 7 + 928 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 logger . error ( Strings . repeat ( " + = " , 25 ) ) ; 
 logger . error ( " The following texture errors were found . " ) ; 
 Map < String , FallbackResourceManager > resManagers = ObfuscationReflectionHelper . getPrivateValue ( SimpleReloadableResourceManager . class , ( SimpleReloadableResourceManager ) Minecraft . getMinecraft ( ) . getResourceManager ( ) , " domainResourceManagers " , " field _ 110548 " + " _ a " ) ; 
 - for ( String resourceDomain : missingTextures . keySet ( ) ) 
 + for ( String resourceDomain : badTextureDomains ) 
 { 
 Set < ResourceLocation > missing = missingTextures . get ( resourceDomain ) ; 
 logger . error ( Strings . repeat ( " = " , 50 ) ) ; 
 @ @ - 964 , 12 + 964 , 13 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 } 
 logger . error ( Strings . repeat ( " - " , 25 ) ) ; 
 - logger . error ( " The missing resources for domain { } are : " , resourceDomain ) ; 
 - for ( ResourceLocation rl : missing ) 
 - { 
 - logger . error ( " { } " , rl . getResourcePath ( ) ) ; 
 + if ( missingTextures . containsKey ( resourceDomain ) ) { 
 + logger . error ( " The missing resources for domain { } are : " , resourceDomain ) ; 
 + for ( ResourceLocation rl : missing ) { 
 + logger . error ( " { } " , rl . getResourcePath ( ) ) ; 
 + } 
 + logger . error ( Strings . repeat ( " - " , 25 ) ) ; 
 } 
 - logger . error ( Strings . repeat ( " - " , 25 ) ) ; 
 if ( ! brokenTextures . containsRow ( resourceDomain ) ) 
 { 
 logger . error ( " No other errors exist for domain { } " , resourceDomain ) ;

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java b / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java 
 new file mode 100644 
 index 0000000 . . eb7a83d 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + / * 
 + * Forge Mod Loader 
 + * Copyright ( c ) 2012 - 2013 cpw . 
 + * All rights reserved . This program and the accompanying materials 
 + * are made available under the terms of the GNU Lesser Public License v2 . 1 
 + * which accompanies this distribution , and is available at 
 + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html 
 + * / 
 + 
 + package cpw . mods . fml . common ; 
 + 
 + import java . io . PrintStream ; 
 + 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + / * * 
 + * PrintStream which redirects it ' s output to a given logger . 
 + * 
 + * @ author Arkan 
 + * / 
 + public class TracingPrintStream extends PrintStream { 
 + 
 + private Logger logger ; 
 + 
 + public TracingPrintStream ( Logger logger , PrintStream original ) { 
 + super ( original ) ; 
 + this . logger = logger ; 
 + } 
 + 
 + @ Override 
 + public void println ( Object o ) { 
 + logger . info ( getPrefix ( ) + o ) ; 
 + } 
 + 
 + @ Override 
 + public void println ( String s ) { 
 + logger . info ( getPrefix ( ) + s ) ; 
 + } 
 + 
 + private String getPrefix ( ) { 
 + StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; 
 + StackTraceElement elem = elems [ 3 ] ; / / The caller is always at depth 2 , plus this call . 
 + return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; 
 + } 
 + 
 + } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / FMLRelaunchLog . java b / fml / src / main / java / cpw / mods / fml / relauncher / FMLRelaunchLog . java 
 index 2c6084d . . ff7df33 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / relauncher / FMLRelaunchLog . java 
 + + + b / fml / src / main / java / cpw / mods / fml / relauncher / FMLRelaunchLog . java 
 @ @ - 14 , 11 + 14 , 14 @ @ package cpw . mods . fml . relauncher ; 
 
 import java . io . File ; 
 import java . util . Locale ; 
 + 
 import org . apache . logging . log4j . Level ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . ThreadContext ; 
 
 + import cpw . mods . fml . common . TracingPrintStream ; 
 + 
 public class FMLRelaunchLog { 
 
 / * * 
 @ @ - 39 , 13 + 42 , 17 @ @ public class FMLRelaunchLog { 
 } 
 
 / * * 
 - * Configure the FML logger 
 + * Configure the FML logger and inject tracing printstreams . 
 * / 
 private static void configureLogging ( ) 
 { 
 log . myLog = LogManager . getLogger ( " FML " ) ; 
 ThreadContext . put ( " side " , side . name ( ) . toLowerCase ( Locale . ENGLISH ) ) ; 
 configured = true ; 
 + 
 + FMLRelaunchLog . fine ( " Injecting tracing printstreams for STDOUT / STDERR . " ) ; 
 + System . setOut ( new TracingPrintStream ( LogManager . getLogger ( " STDOUT " ) , System . out ) ) ; 
 + System . setErr ( new TracingPrintStream ( LogManager . getLogger ( " STDERR " ) , System . err ) ) ; 
 } 
 
 public static void log ( String targetLog , Level level , String format , Object . . . data )
