BLEU SCORE: 0.027196652721749117

TEST MSG: Update FML Entity Spawn packet for 1 . 9 ' s location change . Closes # 2567
GENERATED MSG: Some fixups for FML , and use the FML registry for potions

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> index 2cf6b6e . . dff8d30 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> @ @ - 9 , 6 + 9 , 7 @ @ import net . minecraft . client . entity . EntityPlayerSP ; <nl> import net . minecraft . client . multiplayer . WorldClient ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityLiving ; <nl> + import net . minecraft . entity . EntityTracker ; <nl> import net . minecraft . util . IThreadListener ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> @ @ - 61 , 7 + 62 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E <nl> if ( er = = null ) <nl> { <nl> throw new RuntimeException ( " Could not spawn mod entity ModID : " + spawnMsg . modId + " EntityID : " + spawnMsg . modEntityTypeId + <nl> - " at ( " + spawnMsg . scaledX + " , " + spawnMsg . scaledY + " , " + spawnMsg . scaledZ + " ) Please contact mod author or server admin . " ) ; <nl> + " at ( " + spawnMsg . rawX + " , " + spawnMsg . rawY + " , " + spawnMsg . rawZ + " ) Please contact mod author or server admin . " ) ; <nl> } <nl> WorldClient wc = FMLClientHandler . instance ( ) . getWorldClient ( ) ; <nl> Class < ? extends Entity > cls = er . getEntityClass ( ) ; <nl> @ @ - 77 , 7 + 78 , 8 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E <nl> <nl> int offset = spawnMsg . entityId - entity . getEntityId ( ) ; <nl> entity . setEntityId ( spawnMsg . entityId ) ; <nl> - entity . setLocationAndAngles ( spawnMsg . scaledX , spawnMsg . scaledY , spawnMsg . scaledZ , spawnMsg . scaledYaw , spawnMsg . scaledPitch ) ; <nl> + entity . setUniqueId ( spawnMsg . entityUUID ) ; <nl> + entity . setLocationAndAngles ( spawnMsg . rawX , spawnMsg . rawY , spawnMsg . rawZ , spawnMsg . scaledYaw , spawnMsg . scaledPitch ) ; <nl> if ( entity instanceof EntityLiving ) <nl> { <nl> ( ( EntityLiving ) entity ) . rotationYawHead = spawnMsg . scaledHeadYaw ; <nl> @ @ - 93 , 9 + 95 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E <nl> } <nl> } <nl> <nl> - entity . serverPosX = spawnMsg . rawX ; <nl> - entity . serverPosY = spawnMsg . rawY ; <nl> - entity . serverPosZ = spawnMsg . rawZ ; <nl> + EntityTracker . func _ 187254 _ a ( entity , spawnMsg . rawX , spawnMsg . rawY , spawnMsg . rawZ ) ; <nl> <nl> EntityPlayerSP clientPlayer = FMLClientHandler . instance ( ) . getClientPlayerEntity ( ) ; <nl> if ( entity instanceof IThrowableEntity ) <nl> @ @ - 121 , 7 + 121 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E <nl> wc . addEntityToWorld ( spawnMsg . entityId , entity ) ; <nl> } catch ( Exception e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " A severe problem occurred during the spawning of an entity at ( " + spawnMsg . scaledX + " , " + spawnMsg . scaledY + " , " + spawnMsg . scaledZ + " ) " ) ; <nl> + FMLLog . log ( Level . ERROR , e , " A severe problem occurred during the spawning of an entity at ( " + spawnMsg . rawX + " , " + spawnMsg . rawY + " , " + spawnMsg . rawZ + " ) " ) ; <nl> throw Throwables . propagate ( e ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java <nl> index 5100f2d . . 8dd01e9 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import io . netty . buffer . Unpooled ; <nl> <nl> import java . io . IOException ; <nl> import java . util . List ; <nl> + import java . util . UUID ; <nl> <nl> import net . minecraft . network . datasync . EntityDataManager ; <nl> import org . apache . logging . log4j . Level ; <nl> @ @ - 112 , 12 + 113 , 10 @ @ public abstract class FMLMessage { <nl> public static class EntitySpawnMessage extends EntityMessage { <nl> String modId ; <nl> int modEntityTypeId ; <nl> - int rawX ; <nl> - int rawY ; <nl> - int rawZ ; <nl> - double scaledX ; <nl> - double scaledY ; <nl> - double scaledZ ; <nl> + UUID entityUUID ; <nl> + double rawX ; <nl> + double rawY ; <nl> + double rawZ ; <nl> float scaledYaw ; <nl> float scaledPitch ; <nl> float scaledHeadYaw ; <nl> @ @ - 141 , 10 + 140 , 12 @ @ public abstract class FMLMessage { <nl> super . toBytes ( buf ) ; <nl> ByteBufUtils . writeUTF8String ( buf , modId ) ; <nl> buf . writeInt ( modEntityTypeId ) ; <nl> + buf . writeLong ( entityUUID . getMostSignificantBits ( ) ) ; <nl> + buf . writeLong ( entityUUID . getLeastSignificantBits ( ) ) ; <nl> / / posX , posY , posZ <nl> - buf . writeInt ( MathHelper . floor _ double ( entity . posX * 32D ) ) ; <nl> - buf . writeInt ( MathHelper . floor _ double ( entity . posY * 32D ) ) ; <nl> - buf . writeInt ( MathHelper . floor _ double ( entity . posZ * 32D ) ) ; <nl> + buf . writeDouble ( entity . posX ) ; <nl> + buf . writeDouble ( entity . posY ) ; <nl> + buf . writeDouble ( entity . posZ ) ; <nl> / / yaw , pitch <nl> buf . writeByte ( ( byte ) ( entity . rotationYaw * 256 . 0F / 360 . 0F ) ) ; <nl> buf . writeByte ( ( byte ) ( entity . rotationPitch * 256 . 0F / 360 . 0F ) ) ; <nl> @ @ - 204 , 12 + 205 , 10 @ @ public abstract class FMLMessage { <nl> super . fromBytes ( dat ) ; <nl> modId = ByteBufUtils . readUTF8String ( dat ) ; <nl> modEntityTypeId = dat . readInt ( ) ; <nl> - rawX = dat . readInt ( ) ; <nl> - rawY = dat . readInt ( ) ; <nl> - rawZ = dat . readInt ( ) ; <nl> - scaledX = rawX / 32D ; <nl> - scaledY = rawY / 32D ; <nl> - scaledZ = rawZ / 32D ; <nl> + entityUUID = new UUID ( dat . readLong ( ) , dat . readLong ( ) ) ; <nl> + rawX = dat . readDouble ( ) ; <nl> + rawY = dat . readDouble ( ) ; <nl> + rawZ = dat . readDouble ( ) ; <nl> scaledYaw = dat . readByte ( ) * 360F / 256F ; <nl> scaledPitch = dat . readByte ( ) * 360F / 256F ; <nl> scaledHeadYaw = dat . readByte ( ) * 360F / 256F ;
NEAREST DIFF (one line): diff - - git a / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch b / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch <nl> index 98abf73 . . e908c64 100644 <nl> - - - a / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch <nl> + + + b / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch <nl> @ @ - 1 , 6 + 1 , 21 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / potion / Potion . java <nl> + + + . . / src - work / minecraft / net / minecraft / potion / Potion . java <nl> - @ @ - 195 , 7 + 195 , 6 @ @ <nl> + @ @ - 18 , 12 + 18 , 13 @ @ <nl> + import net . minecraft . util . StringUtils ; <nl> + import net . minecraft . util . math . MathHelper ; <nl> + import net . minecraft . util . registry . RegistryNamespaced ; <nl> + + import net . minecraftforge . fml . common . registry . GameData ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + <nl> + public class Potion <nl> + { <nl> + - public static final RegistryNamespaced < ResourceLocation , Potion > field _ 188414 _ b = new RegistryNamespaced ( ) ; <nl> + + public static final RegistryNamespaced < ResourceLocation , Potion > field _ 188414 _ b = GameData . getPotionRegistry ( ) ; <nl> + private final Map < IAttribute , AttributeModifier > attributeModifierMap = Maps . < IAttribute , AttributeModifier > newHashMap ( ) ; <nl> + private final boolean isBadEffect ; <nl> + private final int liquidColor ; <nl> + @ @ - 195 , 7 + 196 , 6 @ @ <nl> return this . statusIconIndex ; <nl> } <nl> <nl> @ @ - 8 , 7 + 23 , 7 @ @ <nl> public boolean isBadEffect ( ) <nl> { <nl> return this . isBadEffect ; <nl> - @ @ - 266 , 7 + 265 , 37 @ @ <nl> + @ @ - 266 , 7 + 266 , 37 @ @ <nl> return modifier . getAmount ( ) * ( double ) ( p _ 111183 _ 1 _ + 1 ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> index 00c1f70 . . be45fec 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E <nl> <nl> if ( spawnMsg . dataWatcherList ! = null ) <nl> { <nl> - entity . getDataWatcher ( ) . updateWatchedObjectsFromList ( spawnMsg . dataWatcherList ) ; <nl> + entity . func _ 184212 _ Q ( ) . func _ 187218 _ a ( spawnMsg . dataWatcherList ) ; <nl> } <nl> <nl> if ( spawnMsg . throwerId > 0 ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java <nl> index a19c461 . . 2a70bbe 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java <nl> @ @ - 6 , 11 + 6 , 11 @ @ import io . netty . buffer . Unpooled ; <nl> import java . io . IOException ; <nl> import java . util . List ; <nl> <nl> + import net . minecraft . network . datasync . EntityDataManager ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Throwables ; <nl> <nl> - import net . minecraft . entity . DataWatcher ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityLivingBase ; <nl> import net . minecraft . network . PacketBuffer ; <nl> @ @ - 157 , 7 + 157 , 7 @ @ public abstract class FMLMessage { <nl> double speedScaledX ; <nl> double speedScaledY ; <nl> double speedScaledZ ; <nl> - List < DataWatcher . WatchableObject > dataWatcherList ; <nl> + List < EntityDataManager . DataEntry < ? > > dataWatcherList ; <nl> ByteBuf dataStream ; <nl> <nl> public EntitySpawnMessage ( ) { } <nl> @ @ - 193 , 7 + 193 , 7 @ @ public abstract class FMLMessage { <nl> PacketBuffer pb = new PacketBuffer ( tmpBuf ) ; <nl> try <nl> { <nl> - entity . getDataWatcher ( ) . writeTo ( pb ) ; <nl> + entity . func _ 184212 _ Q ( ) . func _ 187216 _ a ( pb ) ; <nl> } catch ( IOException e ) <nl> { <nl> FMLLog . log ( Level . FATAL , e , " Encountered fatal exception trying to send entity spawn data watchers " ) ; <nl> @ @ - 247 , 7 + 247 , 7 @ @ public abstract class FMLMessage { <nl> scaledHeadYaw = dat . readByte ( ) * 360F / 256F ; <nl> try <nl> { <nl> - dataWatcherList = DataWatcher . readWatchedListFromPacketBuffer ( new PacketBuffer ( dat ) ) ; <nl> + dataWatcherList = EntityDataManager . func _ 187215 _ b ( new PacketBuffer ( dat ) ) ; <nl> } catch ( IOException e ) <nl> { <nl> FMLLog . log ( Level . FATAL , e , " There was a critical error decoding the datawatcher stream for a mod entity . " ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java <nl> index 2bbafe3 . . 6dd4839 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import net . minecraft . entity . player . EntityPlayerMP ; <nl> import net . minecraft . inventory . Container ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . Packet ; <nl> - import net . minecraft . server . management . ServerConfigurationManager ; <nl> + import net . minecraft . server . management . PlayerList ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . common . util . FakePlayer ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class FMLNetworkHandler <nl> public static final int LOGIN _ TIMEOUT = Integers . parseInt ( System . getProperty ( " fml . loginTimeout " , " 600 " ) , 600 ) ; <nl> private static EnumMap < Side , FMLEmbeddedChannel > channelPair ; <nl> <nl> - public static void fmlServerHandshake ( ServerConfigurationManager scm , NetworkManager manager , EntityPlayerMP player ) <nl> + public static void fmlServerHandshake ( PlayerList scm , NetworkManager manager , EntityPlayerMP player ) <nl> { <nl> NetworkDispatcher dispatcher = NetworkDispatcher . allocAndSet ( manager , scm ) ; <nl> dispatcher . serverToClientHandshake ( player ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 80e9456 . . 525f9cd 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 254 , 9 + 254 , 7 @ @ public class GameData <nl> <nl> @ Override <nl> public void onAdd ( Potion potion , int id ) { <nl> - / / fix the data in the potion and the potions - array <nl> - potion . id = id ; <nl> - Potion . potionTypes [ id ] = potion ; <nl> + / / no op for the minute ? <nl> } <nl> } <nl> } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 index 2cf6b6e . . dff8d30 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 @ @ - 9 , 6 + 9 , 7 @ @ import net . minecraft . client . entity . EntityPlayerSP ; 
 import net . minecraft . client . multiplayer . WorldClient ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityLiving ; 
 + import net . minecraft . entity . EntityTracker ; 
 import net . minecraft . util . IThreadListener ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 @ @ - 61 , 7 + 62 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E 
 if ( er = = null ) 
 { 
 throw new RuntimeException ( " Could not spawn mod entity ModID : " + spawnMsg . modId + " EntityID : " + spawnMsg . modEntityTypeId + 
 - " at ( " + spawnMsg . scaledX + " , " + spawnMsg . scaledY + " , " + spawnMsg . scaledZ + " ) Please contact mod author or server admin . " ) ; 
 + " at ( " + spawnMsg . rawX + " , " + spawnMsg . rawY + " , " + spawnMsg . rawZ + " ) Please contact mod author or server admin . " ) ; 
 } 
 WorldClient wc = FMLClientHandler . instance ( ) . getWorldClient ( ) ; 
 Class < ? extends Entity > cls = er . getEntityClass ( ) ; 
 @ @ - 77 , 7 + 78 , 8 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E 
 
 int offset = spawnMsg . entityId - entity . getEntityId ( ) ; 
 entity . setEntityId ( spawnMsg . entityId ) ; 
 - entity . setLocationAndAngles ( spawnMsg . scaledX , spawnMsg . scaledY , spawnMsg . scaledZ , spawnMsg . scaledYaw , spawnMsg . scaledPitch ) ; 
 + entity . setUniqueId ( spawnMsg . entityUUID ) ; 
 + entity . setLocationAndAngles ( spawnMsg . rawX , spawnMsg . rawY , spawnMsg . rawZ , spawnMsg . scaledYaw , spawnMsg . scaledPitch ) ; 
 if ( entity instanceof EntityLiving ) 
 { 
 ( ( EntityLiving ) entity ) . rotationYawHead = spawnMsg . scaledHeadYaw ; 
 @ @ - 93 , 9 + 95 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E 
 } 
 } 
 
 - entity . serverPosX = spawnMsg . rawX ; 
 - entity . serverPosY = spawnMsg . rawY ; 
 - entity . serverPosZ = spawnMsg . rawZ ; 
 + EntityTracker . func _ 187254 _ a ( entity , spawnMsg . rawX , spawnMsg . rawY , spawnMsg . rawZ ) ; 
 
 EntityPlayerSP clientPlayer = FMLClientHandler . instance ( ) . getClientPlayerEntity ( ) ; 
 if ( entity instanceof IThrowableEntity ) 
 @ @ - 121 , 7 + 121 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E 
 wc . addEntityToWorld ( spawnMsg . entityId , entity ) ; 
 } catch ( Exception e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " A severe problem occurred during the spawning of an entity at ( " + spawnMsg . scaledX + " , " + spawnMsg . scaledY + " , " + spawnMsg . scaledZ + " ) " ) ; 
 + FMLLog . log ( Level . ERROR , e , " A severe problem occurred during the spawning of an entity at ( " + spawnMsg . rawX + " , " + spawnMsg . rawY + " , " + spawnMsg . rawZ + " ) " ) ; 
 throw Throwables . propagate ( e ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java 
 index 5100f2d . . 8dd01e9 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import io . netty . buffer . Unpooled ; 
 
 import java . io . IOException ; 
 import java . util . List ; 
 + import java . util . UUID ; 
 
 import net . minecraft . network . datasync . EntityDataManager ; 
 import org . apache . logging . log4j . Level ; 
 @ @ - 112 , 12 + 113 , 10 @ @ public abstract class FMLMessage { 
 public static class EntitySpawnMessage extends EntityMessage { 
 String modId ; 
 int modEntityTypeId ; 
 - int rawX ; 
 - int rawY ; 
 - int rawZ ; 
 - double scaledX ; 
 - double scaledY ; 
 - double scaledZ ; 
 + UUID entityUUID ; 
 + double rawX ; 
 + double rawY ; 
 + double rawZ ; 
 float scaledYaw ; 
 float scaledPitch ; 
 float scaledHeadYaw ; 
 @ @ - 141 , 10 + 140 , 12 @ @ public abstract class FMLMessage { 
 super . toBytes ( buf ) ; 
 ByteBufUtils . writeUTF8String ( buf , modId ) ; 
 buf . writeInt ( modEntityTypeId ) ; 
 + buf . writeLong ( entityUUID . getMostSignificantBits ( ) ) ; 
 + buf . writeLong ( entityUUID . getLeastSignificantBits ( ) ) ; 
 / / posX , posY , posZ 
 - buf . writeInt ( MathHelper . floor _ double ( entity . posX * 32D ) ) ; 
 - buf . writeInt ( MathHelper . floor _ double ( entity . posY * 32D ) ) ; 
 - buf . writeInt ( MathHelper . floor _ double ( entity . posZ * 32D ) ) ; 
 + buf . writeDouble ( entity . posX ) ; 
 + buf . writeDouble ( entity . posY ) ; 
 + buf . writeDouble ( entity . posZ ) ; 
 / / yaw , pitch 
 buf . writeByte ( ( byte ) ( entity . rotationYaw * 256 . 0F / 360 . 0F ) ) ; 
 buf . writeByte ( ( byte ) ( entity . rotationPitch * 256 . 0F / 360 . 0F ) ) ; 
 @ @ - 204 , 12 + 205 , 10 @ @ public abstract class FMLMessage { 
 super . fromBytes ( dat ) ; 
 modId = ByteBufUtils . readUTF8String ( dat ) ; 
 modEntityTypeId = dat . readInt ( ) ; 
 - rawX = dat . readInt ( ) ; 
 - rawY = dat . readInt ( ) ; 
 - rawZ = dat . readInt ( ) ; 
 - scaledX = rawX / 32D ; 
 - scaledY = rawY / 32D ; 
 - scaledZ = rawZ / 32D ; 
 + entityUUID = new UUID ( dat . readLong ( ) , dat . readLong ( ) ) ; 
 + rawX = dat . readDouble ( ) ; 
 + rawY = dat . readDouble ( ) ; 
 + rawZ = dat . readDouble ( ) ; 
 scaledYaw = dat . readByte ( ) * 360F / 256F ; 
 scaledPitch = dat . readByte ( ) * 360F / 256F ; 
 scaledHeadYaw = dat . readByte ( ) * 360F / 256F ;

NEAREST DIFF:
diff - - git a / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch b / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch 
 index 98abf73 . . e908c64 100644 
 - - - a / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch 
 + + + b / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch 
 @ @ - 1 , 6 + 1 , 21 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / potion / Potion . java 
 + + + . . / src - work / minecraft / net / minecraft / potion / Potion . java 
 - @ @ - 195 , 7 + 195 , 6 @ @ 
 + @ @ - 18 , 12 + 18 , 13 @ @ 
 + import net . minecraft . util . StringUtils ; 
 + import net . minecraft . util . math . MathHelper ; 
 + import net . minecraft . util . registry . RegistryNamespaced ; 
 + + import net . minecraftforge . fml . common . registry . GameData ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + import net . minecraftforge . fml . relauncher . SideOnly ; 
 + 
 + public class Potion 
 + { 
 + - public static final RegistryNamespaced < ResourceLocation , Potion > field _ 188414 _ b = new RegistryNamespaced ( ) ; 
 + + public static final RegistryNamespaced < ResourceLocation , Potion > field _ 188414 _ b = GameData . getPotionRegistry ( ) ; 
 + private final Map < IAttribute , AttributeModifier > attributeModifierMap = Maps . < IAttribute , AttributeModifier > newHashMap ( ) ; 
 + private final boolean isBadEffect ; 
 + private final int liquidColor ; 
 + @ @ - 195 , 7 + 196 , 6 @ @ 
 return this . statusIconIndex ; 
 } 
 
 @ @ - 8 , 7 + 23 , 7 @ @ 
 public boolean isBadEffect ( ) 
 { 
 return this . isBadEffect ; 
 - @ @ - 266 , 7 + 265 , 37 @ @ 
 + @ @ - 266 , 7 + 266 , 37 @ @ 
 return modifier . getAmount ( ) * ( double ) ( p _ 111183 _ 1 _ + 1 ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 index 00c1f70 . . be45fec 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 @ @ - 126 , 7 + 126 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E 
 
 if ( spawnMsg . dataWatcherList ! = null ) 
 { 
 - entity . getDataWatcher ( ) . updateWatchedObjectsFromList ( spawnMsg . dataWatcherList ) ; 
 + entity . func _ 184212 _ Q ( ) . func _ 187218 _ a ( spawnMsg . dataWatcherList ) ; 
 } 
 
 if ( spawnMsg . throwerId > 0 ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java 
 index a19c461 . . 2a70bbe 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java 
 @ @ - 6 , 11 + 6 , 11 @ @ import io . netty . buffer . Unpooled ; 
 import java . io . IOException ; 
 import java . util . List ; 
 
 + import net . minecraft . network . datasync . EntityDataManager ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Throwables ; 
 
 - import net . minecraft . entity . DataWatcher ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityLivingBase ; 
 import net . minecraft . network . PacketBuffer ; 
 @ @ - 157 , 7 + 157 , 7 @ @ public abstract class FMLMessage { 
 double speedScaledX ; 
 double speedScaledY ; 
 double speedScaledZ ; 
 - List < DataWatcher . WatchableObject > dataWatcherList ; 
 + List < EntityDataManager . DataEntry < ? > > dataWatcherList ; 
 ByteBuf dataStream ; 
 
 public EntitySpawnMessage ( ) { } 
 @ @ - 193 , 7 + 193 , 7 @ @ public abstract class FMLMessage { 
 PacketBuffer pb = new PacketBuffer ( tmpBuf ) ; 
 try 
 { 
 - entity . getDataWatcher ( ) . writeTo ( pb ) ; 
 + entity . func _ 184212 _ Q ( ) . func _ 187216 _ a ( pb ) ; 
 } catch ( IOException e ) 
 { 
 FMLLog . log ( Level . FATAL , e , " Encountered fatal exception trying to send entity spawn data watchers " ) ; 
 @ @ - 247 , 7 + 247 , 7 @ @ public abstract class FMLMessage { 
 scaledHeadYaw = dat . readByte ( ) * 360F / 256F ; 
 try 
 { 
 - dataWatcherList = DataWatcher . readWatchedListFromPacketBuffer ( new PacketBuffer ( dat ) ) ; 
 + dataWatcherList = EntityDataManager . func _ 187215 _ b ( new PacketBuffer ( dat ) ) ; 
 } catch ( IOException e ) 
 { 
 FMLLog . log ( Level . FATAL , e , " There was a critical error decoding the datawatcher stream for a mod entity . " ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java 
 index 2bbafe3 . . 6dd4839 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import net . minecraft . entity . player . EntityPlayerMP ; 
 import net . minecraft . inventory . Container ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . Packet ; 
 - import net . minecraft . server . management . ServerConfigurationManager ; 
 + import net . minecraft . server . management . PlayerList ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . common . util . FakePlayer ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 @ @ - 59 , 7 + 59 , 7 @ @ public class FMLNetworkHandler 
 public static final int LOGIN _ TIMEOUT = Integers . parseInt ( System . getProperty ( " fml . loginTimeout " , " 600 " ) , 600 ) ; 
 private static EnumMap < Side , FMLEmbeddedChannel > channelPair ; 
 
 - public static void fmlServerHandshake ( ServerConfigurationManager scm , NetworkManager manager , EntityPlayerMP player ) 
 + public static void fmlServerHandshake ( PlayerList scm , NetworkManager manager , EntityPlayerMP player ) 
 { 
 NetworkDispatcher dispatcher = NetworkDispatcher . allocAndSet ( manager , scm ) ; 
 dispatcher . serverToClientHandshake ( player ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 80e9456 . . 525f9cd 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 254 , 9 + 254 , 7 @ @ public class GameData 
 
 @ Override 
 public void onAdd ( Potion potion , int id ) { 
 - / / fix the data in the potion and the potions - array 
 - potion . id = id ; 
 - Potion . potionTypes [ id ] = potion ; 
 + / / no op for the minute ? 
 } 
 } 
 } 
 \ No newline at end of file
