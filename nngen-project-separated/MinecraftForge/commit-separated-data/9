BLEU SCORE: 0.02383853510228548

TEST MSG: Reimplement ForgeHooks # onPlaceItemIntoWorld and remove old place events
GENERATED MSG: Add EntityPlaceEvent

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / ItemBlock . java . patch b / patches / minecraft / net / minecraft / item / ItemBlock . java . patch <nl> index 6ea816f . . bf99347 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / ItemBlock . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / ItemBlock . java . patch <nl> @ @ - 1 , 18 + 1 , 6 @ @ <nl> - - - a / net / minecraft / item / ItemBlock . java <nl> + + + b / net / minecraft / item / ItemBlock . java <nl> - @ @ - 40 , 9 + 40 , 10 @ @ <nl> - return EnumActionResult . FAIL ; <nl> - } else { <nl> - IBlockState iblockstate = this . func _ 195945 _ b ( p _ 195942 _ 1 _ ) ; <nl> - + IBlockState currentState = p _ 195942 _ 1 _ . func _ 195991 _ k ( ) . func _ 180495 _ p ( p _ 195942 _ 1 _ . func _ 195995 _ a ( ) ) ; <nl> - if ( iblockstate = = null ) { <nl> - return EnumActionResult . FAIL ; <nl> - - } else if ( ! this . func _ 195941 _ b ( p _ 195942 _ 1 _ , iblockstate ) ) { <nl> - + } else if ( ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( p _ 195942 _ 1 _ . func _ 195999 _ j ( ) , new net . minecraftforge . common . util . BlockSnapshot ( p _ 195942 _ 1 _ . func _ 195991 _ k ( ) , p _ 195942 _ 1 _ . func _ 195995 _ a ( ) , currentState ) , net . minecraft . util . EnumFacing . UP ) & & ! this . func _ 195941 _ b ( p _ 195942 _ 1 _ , iblockstate ) ) { <nl> - return EnumActionResult . FAIL ; <nl> - } else { <nl> - BlockPos blockpos = p _ 195942 _ 1 _ . func _ 195995 _ a ( ) ; <nl> - @ @ - 59 , 7 + 60 , 7 @ @ <nl> + @ @ - 59 , 7 + 59 , 7 @ @ <nl> } <nl> } <nl> <nl> @ @ - 21 , 7 + 9 , 7 @ @ <nl> world . func _ 184133 _ a ( entityplayer , blockpos , soundtype . func _ 185841 _ e ( ) , SoundCategory . BLOCKS , ( soundtype . func _ 185843 _ a ( ) + 1 . 0F ) / 2 . 0F , soundtype . func _ 185847 _ b ( ) * 0 . 8F ) ; <nl> itemstack . func _ 190918 _ g ( 1 ) ; <nl> return EnumActionResult . SUCCESS ; <nl> - @ @ - 134 , 6 + 135 , 10 @ @ <nl> + @ @ - 134 , 6 + 134 , 10 @ @ <nl> } <nl> <nl> public Block func _ 179223 _ d ( ) { <nl> diff - - git a / patches / minecraft / net / minecraft / item / ItemLilyPad . java . patch b / patches / minecraft / net / minecraft / item / ItemLilyPad . java . patch <nl> index 45751e8 . . fdae03e 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / ItemLilyPad . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / ItemLilyPad . java . patch <nl> @ @ - 8 , 7 + 8 , 7 @ @ <nl> + / / special case for handling block placement with water lilies <nl> + net . minecraftforge . common . util . BlockSnapshot blocksnapshot = net . minecraftforge . common . util . BlockSnapshot . getBlockSnapshot ( p _ 77659 _ 1 _ , blockpos1 ) ; <nl> p _ 77659 _ 1 _ . func _ 180501 _ a ( blockpos1 , Blocks . field _ 196651 _ dG . func _ 176223 _ P ( ) , 11 ) ; <nl> - + if ( net . minecraftforge . event . ForgeEventFactory . onPlayerBlockPlace ( p _ 77659 _ 2 _ , blocksnapshot , net . minecraft . util . EnumFacing . UP , p _ 77659 _ 3 _ ) . isCanceled ( ) ) { <nl> + + if ( net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( p _ 77659 _ 2 _ , blocksnapshot , net . minecraft . util . EnumFacing . UP ) ) { <nl> + blocksnapshot . restore ( true , false ) ; <nl> + return new ActionResult < ItemStack > ( EnumActionResult . FAIL , itemstack ) ; <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / item / ItemStack . java . patch b / patches / minecraft / net / minecraft / item / ItemStack . java . patch <nl> index 7e1338e . . 398a1c2 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / ItemStack . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / ItemStack . java . patch <nl> @ @ - 74 , 6 + 74 , 7 @ @ <nl> - BlockPos blockpos = p _ 196084 _ 1 _ . func _ 195995 _ a ( ) ; <nl> - BlockWorldState blockworldstate = new BlockWorldState ( p _ 196084 _ 1 _ . func _ 195991 _ k ( ) , blockpos , false ) ; <nl> - if ( entityplayer ! = null & & ! entityplayer . field _ 71075 _ bZ . field _ 75099 _ e & & ! this . func _ 206847 _ b ( p _ 196084 _ 1 _ . func _ 195991 _ k ( ) . func _ 205772 _ D ( ) , blockworldstate ) ) { <nl> + + if ( ! p _ 196084 _ 1 _ . field _ 196006 _ g . field _ 72995 _ K ) return net . minecraftforge . common . ForgeHooks . onPlaceItemIntoWorld ( p _ 196084 _ 1 _ ) ; <nl> + return onItemUse ( p _ 196084 _ 1 _ , ( c ) - > func _ 77973 _ b ( ) . func _ 195939 _ a ( p _ 196084 _ 1 _ ) ) ; <nl> + } <nl> + <nl> @ @ - 82 , 7 + 83 , 6 @ @ <nl> + } <nl> + <nl> + private EnumActionResult onItemUse ( ItemUseContext context , java . util . function . Function < ItemUseContext , EnumActionResult > callback ) { <nl> - + / / if ( ! context . world . isRemote ) return net . minecraftforge . common . ForgeHooks . onPlaceItemIntoWorld ( context ) ; <nl> + EntityPlayer entityplayer = context . func _ 195999 _ j ( ) ; <nl> + BlockPos blockpos = context . func _ 195995 _ a ( ) ; <nl> + BlockWorldState blockworldstate = new BlockWorldState ( context . func _ 195991 _ k ( ) , blockpos , false ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 3044c9a . . 36c9750 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 66 , 6 + 66 , 7 @ @ import net . minecraft . inventory . ContainerRepair ; <nl> import net . minecraft . inventory . IInventory ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemAxe ; <nl> + import net . minecraft . item . ItemBucket ; <nl> import net . minecraft . item . ItemEnchantedBook ; <nl> import net . minecraft . item . ItemPickaxe ; <nl> import net . minecraft . item . ItemPotion ; <nl> @ @ - 73 , 6 + 74 , 7 @ @ import net . minecraft . item . ItemSpade ; <nl> import net . minecraft . item . ItemSpawnEgg ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . item . ItemTippedArrow ; <nl> + import net . minecraft . item . ItemUseContext ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . nbt . NBTTagList ; <nl> import net . minecraft . network . NetHandlerPlayServer ; <nl> @ @ - 80 , 6 + 82 , 7 @ @ import net . minecraft . network . Packet ; <nl> import net . minecraft . network . play . server . SPacketBlockChange ; <nl> import net . minecraft . potion . PotionType ; <nl> import net . minecraft . potion . PotionUtils ; <nl> + import net . minecraft . stats . StatList ; <nl> import net . minecraft . tags . Tag ; <nl> import net . minecraft . tileentity . MobSpawnerBaseLogic ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> @ @ - 110 , 6 + 113 , 7 @ @ import net . minecraft . world . storage . loot . LootEntry ; <nl> import net . minecraft . world . storage . loot . LootTable ; <nl> import net . minecraft . world . storage . loot . LootTableManager ; <nl> import net . minecraft . world . storage . loot . conditions . LootCondition ; <nl> + import net . minecraftforge . common . util . BlockSnapshot ; <nl> import net . minecraftforge . event . AnvilUpdateEvent ; <nl> import net . minecraftforge . event . DifficultyChangeEvent ; <nl> import net . minecraftforge . event . ForgeEventFactory ; <nl> @ @ - 608 , 19 + 612 , 17 @ @ public class ForgeHooks <nl> return event . isCanceled ( ) ? - 1 : event . getExpToDrop ( ) ; <nl> } <nl> <nl> - / * TODO : Talk to Sponge folk about World rollbacks . <nl> public static EnumActionResult onPlaceItemIntoWorld ( @ Nonnull ItemUseContext context ) <nl> { <nl> ItemStack itemstack = context . getItem ( ) ; <nl> World world = context . getWorld ( ) ; <nl> <nl> / / handle all placement events here <nl> - int meta = itemstack . getItemDamage ( ) ; <nl> int size = itemstack . getCount ( ) ; <nl> NBTTagCompound nbt = null ; <nl> - if ( itemstack . getTagCompound ( ) ! = null ) <nl> + if ( itemstack . hasTag ( ) ) <nl> { <nl> - nbt = itemstack . getTagCompound ( ) . copy ( ) ; <nl> + nbt = itemstack . getTag ( ) . copy ( ) ; <nl> } <nl> <nl> if ( ! ( itemstack . getItem ( ) instanceof ItemBucket ) ) / / if not bucket <nl> @ @ - 634 , 39 + 636 , 37 @ @ public class ForgeHooks <nl> if ( ret = = EnumActionResult . SUCCESS ) <nl> { <nl> / / save new item data <nl> - int newMeta = itemstack . getItemDamage ( ) ; <nl> int newSize = itemstack . getCount ( ) ; <nl> NBTTagCompound newNBT = null ; <nl> - if ( itemstack . getTagCompound ( ) ! = null ) <nl> + if ( itemstack . hasTag ( ) ) <nl> { <nl> - newNBT = itemstack . getTagCompound ( ) . copy ( ) ; <nl> + newNBT = itemstack . getTag ( ) . copy ( ) ; <nl> } <nl> - BlockEvent . PlaceEvent placeEvent = null ; <nl> @ SuppressWarnings ( " unchecked " ) <nl> List < BlockSnapshot > blockSnapshots = ( List < BlockSnapshot > ) world . capturedBlockSnapshots . clone ( ) ; <nl> world . capturedBlockSnapshots . clear ( ) ; <nl> <nl> / / make sure to set pre - placement item data for event <nl> - itemstack . setDamage ( meta ) ; <nl> itemstack . setCount ( size ) ; <nl> if ( nbt ! = null ) <nl> { <nl> - itemstack . setTagCompound ( nbt ) ; <nl> + itemstack . setTag ( nbt ) ; <nl> } <nl> <nl> EntityPlayer player = context . getPlayer ( ) ; <nl> EnumFacing side = context . getFace ( ) ; <nl> <nl> + boolean eventResult = false ; <nl> if ( blockSnapshots . size ( ) > 1 ) <nl> { <nl> - placeEvent = ForgeEventFactory . onPlayerMultiBlockPlace ( player , blockSnapshots , side , hand ) ; <nl> + eventResult = ForgeEventFactory . onMultiBlockPlace ( player , blockSnapshots , side ) ; <nl> } <nl> else if ( blockSnapshots . size ( ) = = 1 ) <nl> { <nl> - placeEvent = ForgeEventFactory . onPlayerBlockPlace ( player , blockSnapshots . get ( 0 ) , side , hand ) ; <nl> + eventResult = ForgeEventFactory . onBlockPlace ( player , blockSnapshots . get ( 0 ) , side ) ; <nl> } <nl> <nl> - if ( placeEvent ! = null & & placeEvent . isCanceled ( ) ) <nl> + if ( eventResult ) <nl> { <nl> ret = EnumActionResult . FAIL ; / / cancel placement <nl> / / revert back all captured blocks <nl> @ @ - 680 , 11 + 680 , 10 @ @ public class ForgeHooks <nl> else <nl> { <nl> / / Change the stack to its new content <nl> - itemstack . setDamage ( newMeta ) ; <nl> itemstack . setCount ( newSize ) ; <nl> if ( nbt ! = null ) <nl> { <nl> - itemstack . setTagCompound ( newNBT ) ; <nl> + itemstack . setTag ( newNBT ) ; <nl> } <nl> <nl> for ( BlockSnapshot snap : blockSnapshots ) <nl> @ @ - 694 , 19 + 693 , 18 @ @ public class ForgeHooks <nl> IBlockState newBlock = world . getBlockState ( snap . getPos ( ) ) ; <nl> if ( ! newBlock . getBlock ( ) . hasTileEntity ( newBlock ) ) / / Containers get placed automatically <nl> { <nl> - newBlock . getBlock ( ) . onBlockAdded ( world , snap . getPos ( ) , newBlock ) ; <nl> + newBlock . onBlockAdded ( world , snap . getPos ( ) , oldBlock ) ; <nl> } <nl> <nl> world . markAndNotifyBlock ( snap . getPos ( ) , null , oldBlock , newBlock , updateFlag ) ; <nl> } <nl> - player . addStat ( StatList . getObjectUseStats ( itemstack . getItem ( ) ) ) ; <nl> + player . addStat ( StatList . ITEM _ USED . get ( itemstack . getItem ( ) ) ) ; <nl> } <nl> } <nl> world . capturedBlockSnapshots . clear ( ) ; <nl> <nl> return ret ; <nl> } <nl> - * / <nl> <nl> public static boolean onAnvilChange ( ContainerRepair container , @ Nonnull ItemStack left , @ Nonnull ItemStack right , IInventory outputSlot , String name , int baseCost ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> index 18d2e2c . . 2e8cc26 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> @ @ - 119 , 12 + 119 , 10 @ @ import net . minecraftforge . event . entity . player . UseHoeEvent ; <nl> import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; <nl> import net . minecraftforge . event . terraingen . ChunkGeneratorEvent ; <nl> import net . minecraftforge . event . world . BlockEvent ; <nl> + import net . minecraftforge . event . world . BlockEvent . CreateFluidSourceEvent ; <nl> import net . minecraftforge . event . world . BlockEvent . EntityMultiPlaceEvent ; <nl> import net . minecraftforge . event . world . BlockEvent . EntityPlaceEvent ; <nl> - import net . minecraftforge . event . world . BlockEvent . CreateFluidSourceEvent ; <nl> - import net . minecraftforge . event . world . BlockEvent . MultiPlaceEvent ; <nl> import net . minecraftforge . event . world . BlockEvent . NeighborNotifyEvent ; <nl> - import net . minecraftforge . event . world . BlockEvent . PlaceEvent ; <nl> import net . minecraftforge . event . world . ExplosionEvent ; <nl> import net . minecraftforge . event . world . GetCollisionBoxesEvent ; <nl> import net . minecraftforge . event . world . SaplingGrowTreeEvent ; <nl> @ @ - 143 , 15 + 141 , 6 @ @ public class ForgeEventFactory <nl> return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> } <nl> <nl> - public static MultiPlaceEvent onPlayerMultiBlockPlace ( EntityPlayer player , List < BlockSnapshot > blockSnapshots , EnumFacing direction , EnumHand hand ) <nl> - { <nl> - BlockSnapshot snap = blockSnapshots . get ( 0 ) ; <nl> - IBlockState placedAgainst = snap . getWorld ( ) . getBlockState ( snap . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; <nl> - MultiPlaceEvent event = new MultiPlaceEvent ( blockSnapshots , placedAgainst , player , hand ) ; <nl> - MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> - return event ; <nl> - } <nl> - <nl> public static boolean onBlockPlace ( @ Nullable Entity entity , @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull EnumFacing direction ) <nl> { <nl> IBlockState placedAgainst = blockSnapshot . getWorld ( ) . getBlockState ( blockSnapshot . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; <nl> @ @ - 159 , 14 + 148 , 6 @ @ public class ForgeEventFactory <nl> return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> } <nl> <nl> - public static PlaceEvent onPlayerBlockPlace ( @ Nonnull EntityPlayer player , @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull EnumFacing direction , @ Nonnull EnumHand hand ) <nl> - { <nl> - IBlockState placedAgainst = blockSnapshot . getWorld ( ) . getBlockState ( blockSnapshot . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; <nl> - PlaceEvent event = new PlaceEvent ( blockSnapshot , placedAgainst , player , hand ) ; <nl> - MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> - return event ; <nl> - } <nl> - <nl> public static NeighborNotifyEvent onNeighborNotify ( World world , BlockPos pos , IBlockState state , EnumSet < EnumFacing > notifiedSides , boolean forceRedstoneUpdate ) <nl> { <nl> NeighborNotifyEvent event = new NeighborNotifyEvent ( world , pos , state , notifiedSides , forceRedstoneUpdate ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / event / world / BlockEvent . java b / src / main / java / net / minecraftforge / event / world / BlockEvent . java <nl> index e549698 . . af09644 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / world / BlockEvent . java <nl> + + + b / src / main / java / net / minecraftforge / event / world / BlockEvent . java <nl> @ @ - 202 , 35 + 202 , 6 @ @ public class BlockEvent extends Event <nl> } <nl> <nl> / * * <nl> - * Called when a block is placed by a player . <nl> - * <nl> - * If a Block Place event is cancelled , the block will not be placed . <nl> - * / <nl> - @ Cancelable <nl> - @ Deprecated / / Remove in 1 . 13 <nl> - public static class PlaceEvent extends EntityPlaceEvent <nl> - { <nl> - private final EntityPlayer player ; <nl> - private final EnumHand hand ; <nl> - <nl> - public PlaceEvent ( @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull IBlockState placedAgainst , @ Nonnull EntityPlayer player , @ Nonnull EnumHand hand ) { <nl> - super ( blockSnapshot , placedAgainst , player ) ; <nl> - this . player = player ; <nl> - this . hand = hand ; <nl> - if ( DEBUG ) <nl> - { <nl> - System . out . printf ( " Created PlaceEvent - [ PlacedBlock : % s ] [ PlacedAgainst : % s ] [ ItemStack : % s ] [ Player : % s ] [ Hand : % s ] \ n " , getPlacedBlock ( ) , placedAgainst , player . getHeldItem ( hand ) , player , hand ) ; <nl> - } <nl> - } <nl> - <nl> - public EntityPlayer getPlayer ( ) { return player ; } <nl> - @ Nonnull <nl> - @ Deprecated <nl> - public ItemStack getItemInHand ( ) { return player . getHeldItem ( hand ) ; } <nl> - public EnumHand getHand ( ) { return hand ; } <nl> - } <nl> - <nl> - / * * <nl> * Fired when a single block placement triggers the <nl> * creation of multiple blocks ( e . g . placing a bed block ) . The block returned <nl> * by { @ link # state } and its related methods is the block where <nl> @ @ - 263 , 40 + 234 , 6 @ @ public class BlockEvent extends Event <nl> } <nl> } <nl> <nl> - <nl> - / * * <nl> - * Fired when a single block placement action of a player triggers the <nl> - * creation of multiple blocks ( e . g . placing a bed block ) . The block returned <nl> - * by { @ link # state } and its related methods is the block where <nl> - * the placed block would exist if the placement only affected a single <nl> - * block . <nl> - * / <nl> - @ Cancelable <nl> - public static class MultiPlaceEvent extends PlaceEvent <nl> - { <nl> - private final List < BlockSnapshot > blockSnapshots ; <nl> - <nl> - public MultiPlaceEvent ( @ Nonnull List < BlockSnapshot > blockSnapshots , @ Nonnull IBlockState placedAgainst , @ Nonnull EntityPlayer player , @ Nonnull EnumHand hand ) { <nl> - super ( blockSnapshots . get ( 0 ) , placedAgainst , player , hand ) ; <nl> - this . blockSnapshots = ImmutableList . copyOf ( blockSnapshots ) ; <nl> - if ( DEBUG ) <nl> - { <nl> - System . out . printf ( " Created MultiPlaceEvent - [ PlacedAgainst : % s ] [ ItemInHand : % s ] [ Player : % s ] \ n " , placedAgainst , player . getHeldItem ( hand ) , player ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Gets a list of BlockSnapshots for all blocks which were replaced by the <nl> - * placement of the new blocks . Most of these blocks will just be of type AIR . <nl> - * <nl> - * @ return immutable list of replaced BlockSnapshots <nl> - * / <nl> - public List < BlockSnapshot > getReplacedBlockSnapshots ( ) <nl> - { <nl> - return blockSnapshots ; <nl> - } <nl> - } <nl> - <nl> / * * <nl> * Fired when a physics update occurs on a block . This event acts as <nl> * a way for mods to detect physics updates , in the same way a BUD switch
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / enchantment / EnchantmentFrostWalker . java . patch b / patches / minecraft / net / minecraft / enchantment / EnchantmentFrostWalker . java . patch <nl> index e0d935d . . efdca14 100644 <nl> - - - a / patches / minecraft / net / minecraft / enchantment / EnchantmentFrostWalker . java . patch <nl> + + + b / patches / minecraft / net / minecraft / enchantment / EnchantmentFrostWalker . java . patch <nl> @ @ - 6 , 7 + 6 , 7 @ @ <nl> IBlockState iblockstate2 = p _ 185266 _ 1 _ . func _ 180495 _ p ( blockpos $ mutableblockpos1 ) ; <nl> - if ( iblockstate2 . func _ 185904 _ a ( ) = = Material . field _ 151586 _ h & & iblockstate2 . func _ 177229 _ b ( BlockFlowingFluid . field _ 176367 _ b ) = = 0 & & iblockstate . func _ 196955 _ c ( p _ 185266 _ 1 _ , blockpos $ mutableblockpos1 ) & & p _ 185266 _ 1 _ . func _ 195584 _ a ( iblockstate , blockpos $ mutableblockpos1 ) ) { <nl> + boolean isFull = iblockstate2 . func _ 177230 _ c ( ) = = Blocks . field _ 150355 _ j & & iblockstate2 . func _ 177229 _ b ( BlockFlowingFluid . field _ 176367 _ b ) = = 0 ; / / TODO : Forge , modded waters ? <nl> - + if ( iblockstate2 . func _ 185904 _ a ( ) = = Material . field _ 151586 _ h & & isFull & & iblockstate . func _ 196955 _ c ( p _ 185266 _ 1 _ , blockpos $ mutableblockpos1 ) & & p _ 185266 _ 1 _ . func _ 195584 _ a ( iblockstate , blockpos $ mutableblockpos1 ) ) { <nl> + + if ( iblockstate2 . func _ 185904 _ a ( ) = = Material . field _ 151586 _ h & & isFull & & iblockstate . func _ 196955 _ c ( p _ 185266 _ 1 _ , blockpos $ mutableblockpos1 ) & & p _ 185266 _ 1 _ . func _ 195584 _ a ( iblockstate , blockpos $ mutableblockpos1 ) & & ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( p _ 185266 _ 0 _ , new net . minecraftforge . common . util . BlockSnapshot ( p _ 185266 _ 1 _ , blockpos $ mutableblockpos1 . func _ 185334 _ h ( ) , iblockstate2 ) , net . minecraft . util . EnumFacing . UP ) ) { <nl> p _ 185266 _ 1 _ . func _ 175656 _ a ( blockpos $ mutableblockpos1 , iblockstate ) ; <nl> p _ 185266 _ 1 _ . func _ 205220 _ G _ ( ) . func _ 205360 _ a ( blockpos $ mutableblockpos1 . func _ 185334 _ h ( ) , Blocks . field _ 185778 _ de , MathHelper . func _ 76136 _ a ( p _ 185266 _ 0 _ . func _ 70681 _ au ( ) , 60 , 120 ) ) ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / entity / item / EntityFallingBlock . java . patch b / patches / minecraft / net / minecraft / entity / item / EntityFallingBlock . java . patch <nl> index 429491e . . a98b6a7 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / item / EntityFallingBlock . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / item / EntityFallingBlock . java . patch <nl> @ @ - 8 , 7 + 8 , 13 @ @ <nl> if ( ! flag1 & & BlockFalling . func _ 185759 _ i ( this . field _ 70170 _ p . func _ 180495 _ p ( new BlockPos ( this . field _ 70165 _ t , this . field _ 70163 _ u - ( double ) 0 . 01F , this . field _ 70161 _ v ) ) ) ) { <nl> this . field _ 70122 _ E = false ; <nl> return ; <nl> - @ @ - 149 , 7 + 150 , 7 @ @ <nl> + @ @ - 144 , 12 + 145 , 12 @ @ <nl> + if ( iblockstate . func _ 177230 _ c ( ) ! = Blocks . field _ 196603 _ bb ) { <nl> + this . func _ 70106 _ y ( ) ; <nl> + if ( ! this . field _ 145808 _ f ) { <nl> + - if ( iblockstate . func _ 185904 _ a ( ) . func _ 76222 _ j ( ) & & ( flag1 | | ! BlockFalling . func _ 185759 _ i ( this . field _ 70170 _ p . func _ 180495 _ p ( blockpos1 . func _ 177977 _ b ( ) ) ) ) & & this . field _ 70170 _ p . func _ 180501 _ a ( blockpos1 , this . field _ 175132 _ d , 3 ) ) { <nl> + + if ( iblockstate . func _ 185904 _ a ( ) . func _ 76222 _ j ( ) & & ( flag1 | | ! BlockFalling . func _ 185759 _ i ( this . field _ 70170 _ p . func _ 180495 _ p ( blockpos1 . func _ 177977 _ b ( ) ) ) ) & & ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( this , new net . minecraftforge . common . util . BlockSnapshot ( func _ 130014 _ f _ ( ) , func _ 180425 _ c ( ) , iblockstate ) , net . minecraft . util . EnumFacing . UP ) & & this . field _ 70170 _ p . func _ 180501 _ a ( blockpos1 , this . field _ 175132 _ d , 3 ) ) { <nl> + if ( block instanceof BlockFalling ) { <nl> ( ( BlockFalling ) block ) . func _ 176502 _ a _ ( this . field _ 70170 _ p , blockpos1 , this . field _ 175132 _ d , iblockstate ) ; <nl> } <nl> <nl> diff - - git a / patches / minecraft / net / minecraft / entity / monster / EntityEnderman . java . patch b / patches / minecraft / net / minecraft / entity / monster / EntityEnderman . java . patch <nl> index b81071f . . e1c4e24 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / monster / EntityEnderman . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / monster / EntityEnderman . java . patch <nl> @ @ - 20 , 6 + 20 , 15 @ @ <nl> return false ; <nl> } else { <nl> return this . field _ 179475 _ a . func _ 70681 _ au ( ) . nextInt ( 2000 ) = = 0 ; <nl> + @ @ - 373 , 7 + 375 , 7 @ @ <nl> + IBlockState iblockstate = iworld . func _ 180495 _ p ( blockpos ) ; <nl> + IBlockState iblockstate1 = iworld . func _ 180495 _ p ( blockpos . func _ 177977 _ b ( ) ) ; <nl> + IBlockState iblockstate2 = this . field _ 179475 _ a . func _ 195405 _ dq ( ) ; <nl> + - if ( iblockstate2 ! = null & & this . func _ 195924 _ a ( iworld , blockpos , iblockstate2 , iblockstate , iblockstate1 ) ) { <nl> + + if ( iblockstate2 ! = null & & this . func _ 195924 _ a ( iworld , blockpos , iblockstate2 , iblockstate , iblockstate1 ) & & ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( field _ 179475 _ a , new net . minecraftforge . common . util . BlockSnapshot ( field _ 179475 _ a . field _ 70170 _ p , blockpos , iblockstate ) , net . minecraft . util . EnumFacing . UP ) ) { <nl> + iworld . func _ 180501 _ a ( blockpos , iblockstate2 , 3 ) ; <nl> + this . field _ 179475 _ a . func _ 195406 _ b ( ( IBlockState ) null ) ; <nl> + } <nl> @ @ - 395 , 7 + 397 , 7 @ @ <nl> public boolean func _ 75250 _ a ( ) { <nl> if ( this . field _ 179473 _ a . func _ 195405 _ dq ( ) ! = null ) { <nl> diff - - git a / patches / minecraft / net / minecraft / item / BlockItemUseContext . java . patch b / patches / minecraft / net / minecraft / item / BlockItemUseContext . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 9ab96fa <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / item / BlockItemUseContext . java . patch <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + - - - a / net / minecraft / item / BlockItemUseContext . java <nl> + + + + b / net / minecraft / item / BlockItemUseContext . java <nl> + @ @ - 5 , 6 + 5 , 7 @ @ <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . world . World ; <nl> + + import net . minecraftforge . event . terraingen . BiomeEvent . GetGrassColor ; <nl> + <nl> + public class BlockItemUseContext extends ItemUseContext { <nl> + private final BlockPos field _ 196014 _ j ; <nl> + @ @ - 25 , 7 + 26 , 7 @ @ <nl> + } <nl> + <nl> + public boolean func _ 196011 _ b ( ) { <nl> + - return this . field _ 196013 _ a | | this . func _ 195991 _ k ( ) . func _ 180495 _ p ( this . func _ 195995 _ a ( ) ) . func _ 196953 _ a ( this ) ; <nl> + + return ( this . field _ 196013 _ a | | this . func _ 195991 _ k ( ) . func _ 180495 _ p ( this . func _ 195995 _ a ( ) ) . func _ 196953 _ a ( this ) ) ; <nl> + } <nl> + <nl> + public boolean func _ 196012 _ c ( ) { <nl> diff - - git a / patches / minecraft / net / minecraft / item / ItemBlock . java . patch b / patches / minecraft / net / minecraft / item / ItemBlock . java . patch <nl> index bf99347 . . 6ea816f 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / ItemBlock . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / ItemBlock . java . patch <nl> @ @ - 1 , 6 + 1 , 18 @ @ <nl> - - - a / net / minecraft / item / ItemBlock . java <nl> + + + b / net / minecraft / item / ItemBlock . java <nl> - @ @ - 59 , 7 + 59 , 7 @ @ <nl> + @ @ - 40 , 9 + 40 , 10 @ @ <nl> + return EnumActionResult . FAIL ; <nl> + } else { <nl> + IBlockState iblockstate = this . func _ 195945 _ b ( p _ 195942 _ 1 _ ) ; <nl> + + IBlockState currentState = p _ 195942 _ 1 _ . func _ 195991 _ k ( ) . func _ 180495 _ p ( p _ 195942 _ 1 _ . func _ 195995 _ a ( ) ) ; <nl> + if ( iblockstate = = null ) { <nl> + return EnumActionResult . FAIL ; <nl> + - } else if ( ! this . func _ 195941 _ b ( p _ 195942 _ 1 _ , iblockstate ) ) { <nl> + + } else if ( ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( p _ 195942 _ 1 _ . func _ 195999 _ j ( ) , new net . minecraftforge . common . util . BlockSnapshot ( p _ 195942 _ 1 _ . func _ 195991 _ k ( ) , p _ 195942 _ 1 _ . func _ 195995 _ a ( ) , currentState ) , net . minecraft . util . EnumFacing . UP ) & & ! this . func _ 195941 _ b ( p _ 195942 _ 1 _ , iblockstate ) ) { <nl> + return EnumActionResult . FAIL ; <nl> + } else { <nl> + BlockPos blockpos = p _ 195942 _ 1 _ . func _ 195995 _ a ( ) ; <nl> + @ @ - 59 , 7 + 60 , 7 @ @ <nl> } <nl> } <nl> <nl> @ @ - 9 , 7 + 21 , 7 @ @ <nl> world . func _ 184133 _ a ( entityplayer , blockpos , soundtype . func _ 185841 _ e ( ) , SoundCategory . BLOCKS , ( soundtype . func _ 185843 _ a ( ) + 1 . 0F ) / 2 . 0F , soundtype . func _ 185847 _ b ( ) * 0 . 8F ) ; <nl> itemstack . func _ 190918 _ g ( 1 ) ; <nl> return EnumActionResult . SUCCESS ; <nl> - @ @ - 134 , 6 + 134 , 10 @ @ <nl> + @ @ - 134 , 6 + 135 , 10 @ @ <nl> } <nl> <nl> public Block func _ 179223 _ d ( ) { <nl> diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> index fefd54d . . 18d2e2c 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> @ @ - 119 , 6 + 119 , 8 @ @ import net . minecraftforge . event . entity . player . UseHoeEvent ; <nl> import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; <nl> import net . minecraftforge . event . terraingen . ChunkGeneratorEvent ; <nl> import net . minecraftforge . event . world . BlockEvent ; <nl> + import net . minecraftforge . event . world . BlockEvent . EntityMultiPlaceEvent ; <nl> + import net . minecraftforge . event . world . BlockEvent . EntityPlaceEvent ; <nl> import net . minecraftforge . event . world . BlockEvent . CreateFluidSourceEvent ; <nl> import net . minecraftforge . event . world . BlockEvent . MultiPlaceEvent ; <nl> import net . minecraftforge . event . world . BlockEvent . NeighborNotifyEvent ; <nl> @ @ - 133 , 6 + 135 , 14 @ @ import net . minecraftforge . eventbus . api . Event . Result ; <nl> public class ForgeEventFactory <nl> { <nl> <nl> + public static boolean onMultiBlockPlace ( @ Nullable Entity entity , List < BlockSnapshot > blockSnapshots , EnumFacing direction ) <nl> + { <nl> + BlockSnapshot snap = blockSnapshots . get ( 0 ) ; <nl> + IBlockState placedAgainst = snap . getWorld ( ) . getBlockState ( snap . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; <nl> + EntityMultiPlaceEvent event = new EntityMultiPlaceEvent ( blockSnapshots , placedAgainst , entity ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> public static MultiPlaceEvent onPlayerMultiBlockPlace ( EntityPlayer player , List < BlockSnapshot > blockSnapshots , EnumFacing direction , EnumHand hand ) <nl> { <nl> BlockSnapshot snap = blockSnapshots . get ( 0 ) ; <nl> @ @ - 142 , 6 + 152 , 13 @ @ public class ForgeEventFactory <nl> return event ; <nl> } <nl> <nl> + public static boolean onBlockPlace ( @ Nullable Entity entity , @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull EnumFacing direction ) <nl> + { <nl> + IBlockState placedAgainst = blockSnapshot . getWorld ( ) . getBlockState ( blockSnapshot . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; <nl> + EntityPlaceEvent event = new BlockEvent . EntityPlaceEvent ( blockSnapshot , placedAgainst , entity ) ; <nl> + return MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + } <nl> + <nl> public static PlaceEvent onPlayerBlockPlace ( @ Nonnull EntityPlayer player , @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull EnumFacing direction , @ Nonnull EnumHand hand ) <nl> { <nl> IBlockState placedAgainst = blockSnapshot . getWorld ( ) . getBlockState ( blockSnapshot . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / event / world / BlockEvent . java b / src / main / java / net / minecraftforge / event / world / BlockEvent . java <nl> index c573160 . . e549698 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / world / BlockEvent . java <nl> + + + b / src / main / java / net / minecraftforge / event / world / BlockEvent . java <nl> @ @ - 43 , 6 + 43 , 7 @ @ import net . minecraftforge . eventbus . api . Event ; <nl> import com . google . common . collect . ImmutableList ; <nl> <nl> import javax . annotation . Nonnull ; <nl> + import javax . annotation . Nullable ; <nl> <nl> import net . minecraftforge . eventbus . api . Event . HasResult ; <nl> <nl> @ @ - 167 , 25 + 168 , 54 @ @ public class BlockEvent extends Event <nl> } <nl> <nl> / * * <nl> - * Called when a block is placed by a player . <nl> + * Called when a block is placed . <nl> * <nl> * If a Block Place event is cancelled , the block will not be placed . <nl> * / <nl> @ Cancelable <nl> - public static class PlaceEvent extends BlockEvent <nl> + public static class EntityPlaceEvent extends BlockEvent <nl> { <nl> - private final EntityPlayer player ; <nl> + private final Entity entity ; <nl> private final BlockSnapshot blockSnapshot ; <nl> private final IBlockState placedBlock ; <nl> private final IBlockState placedAgainst ; <nl> + <nl> + public EntityPlaceEvent ( @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull IBlockState placedAgainst , @ Nullable Entity entity ) <nl> + { <nl> + super ( blockSnapshot . getWorld ( ) , blockSnapshot . getPos ( ) , ! ( entity instanceof EntityPlayer ) ? blockSnapshot . getReplacedBlock ( ) : blockSnapshot . getCurrentBlock ( ) ) ; <nl> + this . entity = entity ; <nl> + this . blockSnapshot = blockSnapshot ; <nl> + this . placedBlock = ! ( entity instanceof EntityPlayer ) ? blockSnapshot . getReplacedBlock ( ) : blockSnapshot . getCurrentBlock ( ) ; <nl> + this . placedAgainst = placedAgainst ; <nl> + <nl> + if ( DEBUG ) <nl> + { <nl> + System . out . printf ( " Created EntityPlaceEvent - [ PlacedBlock : % s ] [ PlacedAgainst : % s ] [ Entity : % s ] \ n " , getPlacedBlock ( ) , placedAgainst , entity ) ; <nl> + } <nl> + } <nl> + <nl> + @ Nullable <nl> + public Entity getEntity ( ) { return entity ; } <nl> + public BlockSnapshot getBlockSnapshot ( ) { return blockSnapshot ; } <nl> + public IBlockState getPlacedBlock ( ) { return placedBlock ; } <nl> + public IBlockState getPlacedAgainst ( ) { return placedAgainst ; } <nl> + } <nl> + <nl> + / * * <nl> + * Called when a block is placed by a player . <nl> + * <nl> + * If a Block Place event is cancelled , the block will not be placed . <nl> + * / <nl> + @ Cancelable <nl> + @ Deprecated / / Remove in 1 . 13 <nl> + public static class PlaceEvent extends EntityPlaceEvent <nl> + { <nl> + private final EntityPlayer player ; <nl> private final EnumHand hand ; <nl> <nl> public PlaceEvent ( @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull IBlockState placedAgainst , @ Nonnull EntityPlayer player , @ Nonnull EnumHand hand ) { <nl> - super ( blockSnapshot . getWorld ( ) , blockSnapshot . getPos ( ) , blockSnapshot . getCurrentBlock ( ) ) ; <nl> + super ( blockSnapshot , placedAgainst , player ) ; <nl> this . player = player ; <nl> - this . blockSnapshot = blockSnapshot ; <nl> - this . placedBlock = blockSnapshot . getCurrentBlock ( ) ; <nl> - this . placedAgainst = placedAgainst ; <nl> this . hand = hand ; <nl> if ( DEBUG ) <nl> { <nl> @ @ - 194 , 13 + 224 , 47 @ @ public class BlockEvent extends Event <nl> } <nl> <nl> public EntityPlayer getPlayer ( ) { return player ; } <nl> - public BlockSnapshot getBlockSnapshot ( ) { return blockSnapshot ; } <nl> - public IBlockState getPlacedBlock ( ) { return placedBlock ; } <nl> - public IBlockState getPlacedAgainst ( ) { return placedAgainst ; } <nl> + @ Nonnull <nl> + @ Deprecated <nl> + public ItemStack getItemInHand ( ) { return player . getHeldItem ( hand ) ; } <nl> public EnumHand getHand ( ) { return hand ; } <nl> } <nl> <nl> / * * <nl> + * Fired when a single block placement triggers the <nl> + * creation of multiple blocks ( e . g . placing a bed block ) . The block returned <nl> + * by { @ link # state } and its related methods is the block where <nl> + * the placed block would exist if the placement only affected a single <nl> + * block . <nl> + * / <nl> + @ Cancelable <nl> + public static class EntityMultiPlaceEvent extends EntityPlaceEvent <nl> + { <nl> + private final List < BlockSnapshot > blockSnapshots ; <nl> + <nl> + public EntityMultiPlaceEvent ( @ Nonnull List < BlockSnapshot > blockSnapshots , @ Nonnull IBlockState placedAgainst , @ Nullable Entity entity ) { <nl> + super ( blockSnapshots . get ( 0 ) , placedAgainst , entity ) ; <nl> + this . blockSnapshots = ImmutableList . copyOf ( blockSnapshots ) ; <nl> + if ( DEBUG ) <nl> + { <nl> + System . out . printf ( " Created EntityMultiPlaceEvent - [ PlacedAgainst : % s ] [ Entity : % s ] \ n " , placedAgainst , entity ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Gets a list of BlockSnapshots for all blocks which were replaced by the <nl> + * placement of the new blocks . Most of these blocks will just be of type AIR . <nl> + * <nl> + * @ return immutable list of replaced BlockSnapshots <nl> + * / <nl> + public List < BlockSnapshot > getReplacedBlockSnapshots ( ) <nl> + { <nl> + return blockSnapshots ; <nl> + } <nl> + } <nl> + <nl> + <nl> + / * * <nl> * Fired when a single block placement action of a player triggers the <nl> * creation of multiple blocks ( e . g . placing a bed block ) . The block returned <nl> * by { @ link # state } and its related methods is the block where <nl> diff - - git a / src / test / java / net / minecraftforge / debug / block / BasePlaceEventTest . java b / src / test / java / net / minecraftforge / debug / block / BasePlaceEventTest . java <nl> new file mode 100644 <nl> index 0000000 . . ecb1bfe <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / block / BasePlaceEventTest . java <nl> @ @ - 0 , 0 + 1 , 46 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . debug . block ; <nl> + <nl> + import net . minecraft . entity . item . EntityFallingBlock ; <nl> + import net . minecraftforge . event . world . BlockEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + @ Mod ( modid = BasePlaceEventTest . MOD _ ID , name = " BaseBlockPlaceEvent test mod " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + @ Mod . EventBusSubscriber <nl> + public class BasePlaceEventTest <nl> + { <nl> + static final String MOD _ ID = " base _ block _ place _ event _ test " ; <nl> + static final boolean ENABLED = true ; <nl> + <nl> + @ SubscribeEvent <nl> + public static void onBlockPlaced ( BlockEvent . EntityPlaceEvent event ) <nl> + { <nl> + if ( ! ENABLED ) <nl> + { <nl> + return ; <nl> + } <nl> + <nl> + if ( event . getEntity ( ) instanceof EntityFallingBlock ) { <nl> + event . setCanceled ( true ) ; <nl> + } <nl> + } <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / ItemBlock . java . patch b / patches / minecraft / net / minecraft / item / ItemBlock . java . patch 
 index 6ea816f . . bf99347 100644 
 - - - a / patches / minecraft / net / minecraft / item / ItemBlock . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / ItemBlock . java . patch 
 @ @ - 1 , 18 + 1 , 6 @ @ 
 - - - a / net / minecraft / item / ItemBlock . java 
 + + + b / net / minecraft / item / ItemBlock . java 
 - @ @ - 40 , 9 + 40 , 10 @ @ 
 - return EnumActionResult . FAIL ; 
 - } else { 
 - IBlockState iblockstate = this . func _ 195945 _ b ( p _ 195942 _ 1 _ ) ; 
 - + IBlockState currentState = p _ 195942 _ 1 _ . func _ 195991 _ k ( ) . func _ 180495 _ p ( p _ 195942 _ 1 _ . func _ 195995 _ a ( ) ) ; 
 - if ( iblockstate = = null ) { 
 - return EnumActionResult . FAIL ; 
 - - } else if ( ! this . func _ 195941 _ b ( p _ 195942 _ 1 _ , iblockstate ) ) { 
 - + } else if ( ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( p _ 195942 _ 1 _ . func _ 195999 _ j ( ) , new net . minecraftforge . common . util . BlockSnapshot ( p _ 195942 _ 1 _ . func _ 195991 _ k ( ) , p _ 195942 _ 1 _ . func _ 195995 _ a ( ) , currentState ) , net . minecraft . util . EnumFacing . UP ) & & ! this . func _ 195941 _ b ( p _ 195942 _ 1 _ , iblockstate ) ) { 
 - return EnumActionResult . FAIL ; 
 - } else { 
 - BlockPos blockpos = p _ 195942 _ 1 _ . func _ 195995 _ a ( ) ; 
 - @ @ - 59 , 7 + 60 , 7 @ @ 
 + @ @ - 59 , 7 + 59 , 7 @ @ 
 } 
 } 
 
 @ @ - 21 , 7 + 9 , 7 @ @ 
 world . func _ 184133 _ a ( entityplayer , blockpos , soundtype . func _ 185841 _ e ( ) , SoundCategory . BLOCKS , ( soundtype . func _ 185843 _ a ( ) + 1 . 0F ) / 2 . 0F , soundtype . func _ 185847 _ b ( ) * 0 . 8F ) ; 
 itemstack . func _ 190918 _ g ( 1 ) ; 
 return EnumActionResult . SUCCESS ; 
 - @ @ - 134 , 6 + 135 , 10 @ @ 
 + @ @ - 134 , 6 + 134 , 10 @ @ 
 } 
 
 public Block func _ 179223 _ d ( ) { 
 diff - - git a / patches / minecraft / net / minecraft / item / ItemLilyPad . java . patch b / patches / minecraft / net / minecraft / item / ItemLilyPad . java . patch 
 index 45751e8 . . fdae03e 100644 
 - - - a / patches / minecraft / net / minecraft / item / ItemLilyPad . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / ItemLilyPad . java . patch 
 @ @ - 8 , 7 + 8 , 7 @ @ 
 + / / special case for handling block placement with water lilies 
 + net . minecraftforge . common . util . BlockSnapshot blocksnapshot = net . minecraftforge . common . util . BlockSnapshot . getBlockSnapshot ( p _ 77659 _ 1 _ , blockpos1 ) ; 
 p _ 77659 _ 1 _ . func _ 180501 _ a ( blockpos1 , Blocks . field _ 196651 _ dG . func _ 176223 _ P ( ) , 11 ) ; 
 - + if ( net . minecraftforge . event . ForgeEventFactory . onPlayerBlockPlace ( p _ 77659 _ 2 _ , blocksnapshot , net . minecraft . util . EnumFacing . UP , p _ 77659 _ 3 _ ) . isCanceled ( ) ) { 
 + + if ( net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( p _ 77659 _ 2 _ , blocksnapshot , net . minecraft . util . EnumFacing . UP ) ) { 
 + blocksnapshot . restore ( true , false ) ; 
 + return new ActionResult < ItemStack > ( EnumActionResult . FAIL , itemstack ) ; 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / item / ItemStack . java . patch b / patches / minecraft / net / minecraft / item / ItemStack . java . patch 
 index 7e1338e . . 398a1c2 100644 
 - - - a / patches / minecraft / net / minecraft / item / ItemStack . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / ItemStack . java . patch 
 @ @ - 74 , 6 + 74 , 7 @ @ 
 - BlockPos blockpos = p _ 196084 _ 1 _ . func _ 195995 _ a ( ) ; 
 - BlockWorldState blockworldstate = new BlockWorldState ( p _ 196084 _ 1 _ . func _ 195991 _ k ( ) , blockpos , false ) ; 
 - if ( entityplayer ! = null & & ! entityplayer . field _ 71075 _ bZ . field _ 75099 _ e & & ! this . func _ 206847 _ b ( p _ 196084 _ 1 _ . func _ 195991 _ k ( ) . func _ 205772 _ D ( ) , blockworldstate ) ) { 
 + + if ( ! p _ 196084 _ 1 _ . field _ 196006 _ g . field _ 72995 _ K ) return net . minecraftforge . common . ForgeHooks . onPlaceItemIntoWorld ( p _ 196084 _ 1 _ ) ; 
 + return onItemUse ( p _ 196084 _ 1 _ , ( c ) - > func _ 77973 _ b ( ) . func _ 195939 _ a ( p _ 196084 _ 1 _ ) ) ; 
 + } 
 + 
 @ @ - 82 , 7 + 83 , 6 @ @ 
 + } 
 + 
 + private EnumActionResult onItemUse ( ItemUseContext context , java . util . function . Function < ItemUseContext , EnumActionResult > callback ) { 
 - + / / if ( ! context . world . isRemote ) return net . minecraftforge . common . ForgeHooks . onPlaceItemIntoWorld ( context ) ; 
 + EntityPlayer entityplayer = context . func _ 195999 _ j ( ) ; 
 + BlockPos blockpos = context . func _ 195995 _ a ( ) ; 
 + BlockWorldState blockworldstate = new BlockWorldState ( context . func _ 195991 _ k ( ) , blockpos , false ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 3044c9a . . 36c9750 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 66 , 6 + 66 , 7 @ @ import net . minecraft . inventory . ContainerRepair ; 
 import net . minecraft . inventory . IInventory ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemAxe ; 
 + import net . minecraft . item . ItemBucket ; 
 import net . minecraft . item . ItemEnchantedBook ; 
 import net . minecraft . item . ItemPickaxe ; 
 import net . minecraft . item . ItemPotion ; 
 @ @ - 73 , 6 + 74 , 7 @ @ import net . minecraft . item . ItemSpade ; 
 import net . minecraft . item . ItemSpawnEgg ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . item . ItemTippedArrow ; 
 + import net . minecraft . item . ItemUseContext ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . nbt . NBTTagList ; 
 import net . minecraft . network . NetHandlerPlayServer ; 
 @ @ - 80 , 6 + 82 , 7 @ @ import net . minecraft . network . Packet ; 
 import net . minecraft . network . play . server . SPacketBlockChange ; 
 import net . minecraft . potion . PotionType ; 
 import net . minecraft . potion . PotionUtils ; 
 + import net . minecraft . stats . StatList ; 
 import net . minecraft . tags . Tag ; 
 import net . minecraft . tileentity . MobSpawnerBaseLogic ; 
 import net . minecraft . tileentity . TileEntity ; 
 @ @ - 110 , 6 + 113 , 7 @ @ import net . minecraft . world . storage . loot . LootEntry ; 
 import net . minecraft . world . storage . loot . LootTable ; 
 import net . minecraft . world . storage . loot . LootTableManager ; 
 import net . minecraft . world . storage . loot . conditions . LootCondition ; 
 + import net . minecraftforge . common . util . BlockSnapshot ; 
 import net . minecraftforge . event . AnvilUpdateEvent ; 
 import net . minecraftforge . event . DifficultyChangeEvent ; 
 import net . minecraftforge . event . ForgeEventFactory ; 
 @ @ - 608 , 19 + 612 , 17 @ @ public class ForgeHooks 
 return event . isCanceled ( ) ? - 1 : event . getExpToDrop ( ) ; 
 } 
 
 - / * TODO : Talk to Sponge folk about World rollbacks . 
 public static EnumActionResult onPlaceItemIntoWorld ( @ Nonnull ItemUseContext context ) 
 { 
 ItemStack itemstack = context . getItem ( ) ; 
 World world = context . getWorld ( ) ; 
 
 / / handle all placement events here 
 - int meta = itemstack . getItemDamage ( ) ; 
 int size = itemstack . getCount ( ) ; 
 NBTTagCompound nbt = null ; 
 - if ( itemstack . getTagCompound ( ) ! = null ) 
 + if ( itemstack . hasTag ( ) ) 
 { 
 - nbt = itemstack . getTagCompound ( ) . copy ( ) ; 
 + nbt = itemstack . getTag ( ) . copy ( ) ; 
 } 
 
 if ( ! ( itemstack . getItem ( ) instanceof ItemBucket ) ) / / if not bucket 
 @ @ - 634 , 39 + 636 , 37 @ @ public class ForgeHooks 
 if ( ret = = EnumActionResult . SUCCESS ) 
 { 
 / / save new item data 
 - int newMeta = itemstack . getItemDamage ( ) ; 
 int newSize = itemstack . getCount ( ) ; 
 NBTTagCompound newNBT = null ; 
 - if ( itemstack . getTagCompound ( ) ! = null ) 
 + if ( itemstack . hasTag ( ) ) 
 { 
 - newNBT = itemstack . getTagCompound ( ) . copy ( ) ; 
 + newNBT = itemstack . getTag ( ) . copy ( ) ; 
 } 
 - BlockEvent . PlaceEvent placeEvent = null ; 
 @ SuppressWarnings ( " unchecked " ) 
 List < BlockSnapshot > blockSnapshots = ( List < BlockSnapshot > ) world . capturedBlockSnapshots . clone ( ) ; 
 world . capturedBlockSnapshots . clear ( ) ; 
 
 / / make sure to set pre - placement item data for event 
 - itemstack . setDamage ( meta ) ; 
 itemstack . setCount ( size ) ; 
 if ( nbt ! = null ) 
 { 
 - itemstack . setTagCompound ( nbt ) ; 
 + itemstack . setTag ( nbt ) ; 
 } 
 
 EntityPlayer player = context . getPlayer ( ) ; 
 EnumFacing side = context . getFace ( ) ; 
 
 + boolean eventResult = false ; 
 if ( blockSnapshots . size ( ) > 1 ) 
 { 
 - placeEvent = ForgeEventFactory . onPlayerMultiBlockPlace ( player , blockSnapshots , side , hand ) ; 
 + eventResult = ForgeEventFactory . onMultiBlockPlace ( player , blockSnapshots , side ) ; 
 } 
 else if ( blockSnapshots . size ( ) = = 1 ) 
 { 
 - placeEvent = ForgeEventFactory . onPlayerBlockPlace ( player , blockSnapshots . get ( 0 ) , side , hand ) ; 
 + eventResult = ForgeEventFactory . onBlockPlace ( player , blockSnapshots . get ( 0 ) , side ) ; 
 } 
 
 - if ( placeEvent ! = null & & placeEvent . isCanceled ( ) ) 
 + if ( eventResult ) 
 { 
 ret = EnumActionResult . FAIL ; / / cancel placement 
 / / revert back all captured blocks 
 @ @ - 680 , 11 + 680 , 10 @ @ public class ForgeHooks 
 else 
 { 
 / / Change the stack to its new content 
 - itemstack . setDamage ( newMeta ) ; 
 itemstack . setCount ( newSize ) ; 
 if ( nbt ! = null ) 
 { 
 - itemstack . setTagCompound ( newNBT ) ; 
 + itemstack . setTag ( newNBT ) ; 
 } 
 
 for ( BlockSnapshot snap : blockSnapshots ) 
 @ @ - 694 , 19 + 693 , 18 @ @ public class ForgeHooks 
 IBlockState newBlock = world . getBlockState ( snap . getPos ( ) ) ; 
 if ( ! newBlock . getBlock ( ) . hasTileEntity ( newBlock ) ) / / Containers get placed automatically 
 { 
 - newBlock . getBlock ( ) . onBlockAdded ( world , snap . getPos ( ) , newBlock ) ; 
 + newBlock . onBlockAdded ( world , snap . getPos ( ) , oldBlock ) ; 
 } 
 
 world . markAndNotifyBlock ( snap . getPos ( ) , null , oldBlock , newBlock , updateFlag ) ; 
 } 
 - player . addStat ( StatList . getObjectUseStats ( itemstack . getItem ( ) ) ) ; 
 + player . addStat ( StatList . ITEM _ USED . get ( itemstack . getItem ( ) ) ) ; 
 } 
 } 
 world . capturedBlockSnapshots . clear ( ) ; 
 
 return ret ; 
 } 
 - * / 
 
 public static boolean onAnvilChange ( ContainerRepair container , @ Nonnull ItemStack left , @ Nonnull ItemStack right , IInventory outputSlot , String name , int baseCost ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 index 18d2e2c . . 2e8cc26 100644 
 - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 @ @ - 119 , 12 + 119 , 10 @ @ import net . minecraftforge . event . entity . player . UseHoeEvent ; 
 import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; 
 import net . minecraftforge . event . terraingen . ChunkGeneratorEvent ; 
 import net . minecraftforge . event . world . BlockEvent ; 
 + import net . minecraftforge . event . world . BlockEvent . CreateFluidSourceEvent ; 
 import net . minecraftforge . event . world . BlockEvent . EntityMultiPlaceEvent ; 
 import net . minecraftforge . event . world . BlockEvent . EntityPlaceEvent ; 
 - import net . minecraftforge . event . world . BlockEvent . CreateFluidSourceEvent ; 
 - import net . minecraftforge . event . world . BlockEvent . MultiPlaceEvent ; 
 import net . minecraftforge . event . world . BlockEvent . NeighborNotifyEvent ; 
 - import net . minecraftforge . event . world . BlockEvent . PlaceEvent ; 
 import net . minecraftforge . event . world . ExplosionEvent ; 
 import net . minecraftforge . event . world . GetCollisionBoxesEvent ; 
 import net . minecraftforge . event . world . SaplingGrowTreeEvent ; 
 @ @ - 143 , 15 + 141 , 6 @ @ public class ForgeEventFactory 
 return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 } 
 
 - public static MultiPlaceEvent onPlayerMultiBlockPlace ( EntityPlayer player , List < BlockSnapshot > blockSnapshots , EnumFacing direction , EnumHand hand ) 
 - { 
 - BlockSnapshot snap = blockSnapshots . get ( 0 ) ; 
 - IBlockState placedAgainst = snap . getWorld ( ) . getBlockState ( snap . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; 
 - MultiPlaceEvent event = new MultiPlaceEvent ( blockSnapshots , placedAgainst , player , hand ) ; 
 - MinecraftForge . EVENT _ BUS . post ( event ) ; 
 - return event ; 
 - } 
 - 
 public static boolean onBlockPlace ( @ Nullable Entity entity , @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull EnumFacing direction ) 
 { 
 IBlockState placedAgainst = blockSnapshot . getWorld ( ) . getBlockState ( blockSnapshot . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; 
 @ @ - 159 , 14 + 148 , 6 @ @ public class ForgeEventFactory 
 return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 } 
 
 - public static PlaceEvent onPlayerBlockPlace ( @ Nonnull EntityPlayer player , @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull EnumFacing direction , @ Nonnull EnumHand hand ) 
 - { 
 - IBlockState placedAgainst = blockSnapshot . getWorld ( ) . getBlockState ( blockSnapshot . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; 
 - PlaceEvent event = new PlaceEvent ( blockSnapshot , placedAgainst , player , hand ) ; 
 - MinecraftForge . EVENT _ BUS . post ( event ) ; 
 - return event ; 
 - } 
 - 
 public static NeighborNotifyEvent onNeighborNotify ( World world , BlockPos pos , IBlockState state , EnumSet < EnumFacing > notifiedSides , boolean forceRedstoneUpdate ) 
 { 
 NeighborNotifyEvent event = new NeighborNotifyEvent ( world , pos , state , notifiedSides , forceRedstoneUpdate ) ; 
 diff - - git a / src / main / java / net / minecraftforge / event / world / BlockEvent . java b / src / main / java / net / minecraftforge / event / world / BlockEvent . java 
 index e549698 . . af09644 100644 
 - - - a / src / main / java / net / minecraftforge / event / world / BlockEvent . java 
 + + + b / src / main / java / net / minecraftforge / event / world / BlockEvent . java 
 @ @ - 202 , 35 + 202 , 6 @ @ public class BlockEvent extends Event 
 } 
 
 / * * 
 - * Called when a block is placed by a player . 
 - * 
 - * If a Block Place event is cancelled , the block will not be placed . 
 - * / 
 - @ Cancelable 
 - @ Deprecated / / Remove in 1 . 13 
 - public static class PlaceEvent extends EntityPlaceEvent 
 - { 
 - private final EntityPlayer player ; 
 - private final EnumHand hand ; 
 - 
 - public PlaceEvent ( @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull IBlockState placedAgainst , @ Nonnull EntityPlayer player , @ Nonnull EnumHand hand ) { 
 - super ( blockSnapshot , placedAgainst , player ) ; 
 - this . player = player ; 
 - this . hand = hand ; 
 - if ( DEBUG ) 
 - { 
 - System . out . printf ( " Created PlaceEvent - [ PlacedBlock : % s ] [ PlacedAgainst : % s ] [ ItemStack : % s ] [ Player : % s ] [ Hand : % s ] \ n " , getPlacedBlock ( ) , placedAgainst , player . getHeldItem ( hand ) , player , hand ) ; 
 - } 
 - } 
 - 
 - public EntityPlayer getPlayer ( ) { return player ; } 
 - @ Nonnull 
 - @ Deprecated 
 - public ItemStack getItemInHand ( ) { return player . getHeldItem ( hand ) ; } 
 - public EnumHand getHand ( ) { return hand ; } 
 - } 
 - 
 - / * * 
 * Fired when a single block placement triggers the 
 * creation of multiple blocks ( e . g . placing a bed block ) . The block returned 
 * by { @ link # state } and its related methods is the block where 
 @ @ - 263 , 40 + 234 , 6 @ @ public class BlockEvent extends Event 
 } 
 } 
 
 - 
 - / * * 
 - * Fired when a single block placement action of a player triggers the 
 - * creation of multiple blocks ( e . g . placing a bed block ) . The block returned 
 - * by { @ link # state } and its related methods is the block where 
 - * the placed block would exist if the placement only affected a single 
 - * block . 
 - * / 
 - @ Cancelable 
 - public static class MultiPlaceEvent extends PlaceEvent 
 - { 
 - private final List < BlockSnapshot > blockSnapshots ; 
 - 
 - public MultiPlaceEvent ( @ Nonnull List < BlockSnapshot > blockSnapshots , @ Nonnull IBlockState placedAgainst , @ Nonnull EntityPlayer player , @ Nonnull EnumHand hand ) { 
 - super ( blockSnapshots . get ( 0 ) , placedAgainst , player , hand ) ; 
 - this . blockSnapshots = ImmutableList . copyOf ( blockSnapshots ) ; 
 - if ( DEBUG ) 
 - { 
 - System . out . printf ( " Created MultiPlaceEvent - [ PlacedAgainst : % s ] [ ItemInHand : % s ] [ Player : % s ] \ n " , placedAgainst , player . getHeldItem ( hand ) , player ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Gets a list of BlockSnapshots for all blocks which were replaced by the 
 - * placement of the new blocks . Most of these blocks will just be of type AIR . 
 - * 
 - * @ return immutable list of replaced BlockSnapshots 
 - * / 
 - public List < BlockSnapshot > getReplacedBlockSnapshots ( ) 
 - { 
 - return blockSnapshots ; 
 - } 
 - } 
 - 
 / * * 
 * Fired when a physics update occurs on a block . This event acts as 
 * a way for mods to detect physics updates , in the same way a BUD switch

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / enchantment / EnchantmentFrostWalker . java . patch b / patches / minecraft / net / minecraft / enchantment / EnchantmentFrostWalker . java . patch 
 index e0d935d . . efdca14 100644 
 - - - a / patches / minecraft / net / minecraft / enchantment / EnchantmentFrostWalker . java . patch 
 + + + b / patches / minecraft / net / minecraft / enchantment / EnchantmentFrostWalker . java . patch 
 @ @ - 6 , 7 + 6 , 7 @ @ 
 IBlockState iblockstate2 = p _ 185266 _ 1 _ . func _ 180495 _ p ( blockpos $ mutableblockpos1 ) ; 
 - if ( iblockstate2 . func _ 185904 _ a ( ) = = Material . field _ 151586 _ h & & iblockstate2 . func _ 177229 _ b ( BlockFlowingFluid . field _ 176367 _ b ) = = 0 & & iblockstate . func _ 196955 _ c ( p _ 185266 _ 1 _ , blockpos $ mutableblockpos1 ) & & p _ 185266 _ 1 _ . func _ 195584 _ a ( iblockstate , blockpos $ mutableblockpos1 ) ) { 
 + boolean isFull = iblockstate2 . func _ 177230 _ c ( ) = = Blocks . field _ 150355 _ j & & iblockstate2 . func _ 177229 _ b ( BlockFlowingFluid . field _ 176367 _ b ) = = 0 ; / / TODO : Forge , modded waters ? 
 - + if ( iblockstate2 . func _ 185904 _ a ( ) = = Material . field _ 151586 _ h & & isFull & & iblockstate . func _ 196955 _ c ( p _ 185266 _ 1 _ , blockpos $ mutableblockpos1 ) & & p _ 185266 _ 1 _ . func _ 195584 _ a ( iblockstate , blockpos $ mutableblockpos1 ) ) { 
 + + if ( iblockstate2 . func _ 185904 _ a ( ) = = Material . field _ 151586 _ h & & isFull & & iblockstate . func _ 196955 _ c ( p _ 185266 _ 1 _ , blockpos $ mutableblockpos1 ) & & p _ 185266 _ 1 _ . func _ 195584 _ a ( iblockstate , blockpos $ mutableblockpos1 ) & & ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( p _ 185266 _ 0 _ , new net . minecraftforge . common . util . BlockSnapshot ( p _ 185266 _ 1 _ , blockpos $ mutableblockpos1 . func _ 185334 _ h ( ) , iblockstate2 ) , net . minecraft . util . EnumFacing . UP ) ) { 
 p _ 185266 _ 1 _ . func _ 175656 _ a ( blockpos $ mutableblockpos1 , iblockstate ) ; 
 p _ 185266 _ 1 _ . func _ 205220 _ G _ ( ) . func _ 205360 _ a ( blockpos $ mutableblockpos1 . func _ 185334 _ h ( ) , Blocks . field _ 185778 _ de , MathHelper . func _ 76136 _ a ( p _ 185266 _ 0 _ . func _ 70681 _ au ( ) , 60 , 120 ) ) ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / entity / item / EntityFallingBlock . java . patch b / patches / minecraft / net / minecraft / entity / item / EntityFallingBlock . java . patch 
 index 429491e . . a98b6a7 100644 
 - - - a / patches / minecraft / net / minecraft / entity / item / EntityFallingBlock . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / item / EntityFallingBlock . java . patch 
 @ @ - 8 , 7 + 8 , 13 @ @ 
 if ( ! flag1 & & BlockFalling . func _ 185759 _ i ( this . field _ 70170 _ p . func _ 180495 _ p ( new BlockPos ( this . field _ 70165 _ t , this . field _ 70163 _ u - ( double ) 0 . 01F , this . field _ 70161 _ v ) ) ) ) { 
 this . field _ 70122 _ E = false ; 
 return ; 
 - @ @ - 149 , 7 + 150 , 7 @ @ 
 + @ @ - 144 , 12 + 145 , 12 @ @ 
 + if ( iblockstate . func _ 177230 _ c ( ) ! = Blocks . field _ 196603 _ bb ) { 
 + this . func _ 70106 _ y ( ) ; 
 + if ( ! this . field _ 145808 _ f ) { 
 + - if ( iblockstate . func _ 185904 _ a ( ) . func _ 76222 _ j ( ) & & ( flag1 | | ! BlockFalling . func _ 185759 _ i ( this . field _ 70170 _ p . func _ 180495 _ p ( blockpos1 . func _ 177977 _ b ( ) ) ) ) & & this . field _ 70170 _ p . func _ 180501 _ a ( blockpos1 , this . field _ 175132 _ d , 3 ) ) { 
 + + if ( iblockstate . func _ 185904 _ a ( ) . func _ 76222 _ j ( ) & & ( flag1 | | ! BlockFalling . func _ 185759 _ i ( this . field _ 70170 _ p . func _ 180495 _ p ( blockpos1 . func _ 177977 _ b ( ) ) ) ) & & ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( this , new net . minecraftforge . common . util . BlockSnapshot ( func _ 130014 _ f _ ( ) , func _ 180425 _ c ( ) , iblockstate ) , net . minecraft . util . EnumFacing . UP ) & & this . field _ 70170 _ p . func _ 180501 _ a ( blockpos1 , this . field _ 175132 _ d , 3 ) ) { 
 + if ( block instanceof BlockFalling ) { 
 ( ( BlockFalling ) block ) . func _ 176502 _ a _ ( this . field _ 70170 _ p , blockpos1 , this . field _ 175132 _ d , iblockstate ) ; 
 } 
 
 diff - - git a / patches / minecraft / net / minecraft / entity / monster / EntityEnderman . java . patch b / patches / minecraft / net / minecraft / entity / monster / EntityEnderman . java . patch 
 index b81071f . . e1c4e24 100644 
 - - - a / patches / minecraft / net / minecraft / entity / monster / EntityEnderman . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / monster / EntityEnderman . java . patch 
 @ @ - 20 , 6 + 20 , 15 @ @ 
 return false ; 
 } else { 
 return this . field _ 179475 _ a . func _ 70681 _ au ( ) . nextInt ( 2000 ) = = 0 ; 
 + @ @ - 373 , 7 + 375 , 7 @ @ 
 + IBlockState iblockstate = iworld . func _ 180495 _ p ( blockpos ) ; 
 + IBlockState iblockstate1 = iworld . func _ 180495 _ p ( blockpos . func _ 177977 _ b ( ) ) ; 
 + IBlockState iblockstate2 = this . field _ 179475 _ a . func _ 195405 _ dq ( ) ; 
 + - if ( iblockstate2 ! = null & & this . func _ 195924 _ a ( iworld , blockpos , iblockstate2 , iblockstate , iblockstate1 ) ) { 
 + + if ( iblockstate2 ! = null & & this . func _ 195924 _ a ( iworld , blockpos , iblockstate2 , iblockstate , iblockstate1 ) & & ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( field _ 179475 _ a , new net . minecraftforge . common . util . BlockSnapshot ( field _ 179475 _ a . field _ 70170 _ p , blockpos , iblockstate ) , net . minecraft . util . EnumFacing . UP ) ) { 
 + iworld . func _ 180501 _ a ( blockpos , iblockstate2 , 3 ) ; 
 + this . field _ 179475 _ a . func _ 195406 _ b ( ( IBlockState ) null ) ; 
 + } 
 @ @ - 395 , 7 + 397 , 7 @ @ 
 public boolean func _ 75250 _ a ( ) { 
 if ( this . field _ 179473 _ a . func _ 195405 _ dq ( ) ! = null ) { 
 diff - - git a / patches / minecraft / net / minecraft / item / BlockItemUseContext . java . patch b / patches / minecraft / net / minecraft / item / BlockItemUseContext . java . patch 
 new file mode 100644 
 index 0000000 . . 9ab96fa 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / item / BlockItemUseContext . java . patch 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + - - - a / net / minecraft / item / BlockItemUseContext . java 
 + + + + b / net / minecraft / item / BlockItemUseContext . java 
 + @ @ - 5 , 6 + 5 , 7 @ @ 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . world . World ; 
 + + import net . minecraftforge . event . terraingen . BiomeEvent . GetGrassColor ; 
 + 
 + public class BlockItemUseContext extends ItemUseContext { 
 + private final BlockPos field _ 196014 _ j ; 
 + @ @ - 25 , 7 + 26 , 7 @ @ 
 + } 
 + 
 + public boolean func _ 196011 _ b ( ) { 
 + - return this . field _ 196013 _ a | | this . func _ 195991 _ k ( ) . func _ 180495 _ p ( this . func _ 195995 _ a ( ) ) . func _ 196953 _ a ( this ) ; 
 + + return ( this . field _ 196013 _ a | | this . func _ 195991 _ k ( ) . func _ 180495 _ p ( this . func _ 195995 _ a ( ) ) . func _ 196953 _ a ( this ) ) ; 
 + } 
 + 
 + public boolean func _ 196012 _ c ( ) { 
 diff - - git a / patches / minecraft / net / minecraft / item / ItemBlock . java . patch b / patches / minecraft / net / minecraft / item / ItemBlock . java . patch 
 index bf99347 . . 6ea816f 100644 
 - - - a / patches / minecraft / net / minecraft / item / ItemBlock . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / ItemBlock . java . patch 
 @ @ - 1 , 6 + 1 , 18 @ @ 
 - - - a / net / minecraft / item / ItemBlock . java 
 + + + b / net / minecraft / item / ItemBlock . java 
 - @ @ - 59 , 7 + 59 , 7 @ @ 
 + @ @ - 40 , 9 + 40 , 10 @ @ 
 + return EnumActionResult . FAIL ; 
 + } else { 
 + IBlockState iblockstate = this . func _ 195945 _ b ( p _ 195942 _ 1 _ ) ; 
 + + IBlockState currentState = p _ 195942 _ 1 _ . func _ 195991 _ k ( ) . func _ 180495 _ p ( p _ 195942 _ 1 _ . func _ 195995 _ a ( ) ) ; 
 + if ( iblockstate = = null ) { 
 + return EnumActionResult . FAIL ; 
 + - } else if ( ! this . func _ 195941 _ b ( p _ 195942 _ 1 _ , iblockstate ) ) { 
 + + } else if ( ! net . minecraftforge . event . ForgeEventFactory . onBlockPlace ( p _ 195942 _ 1 _ . func _ 195999 _ j ( ) , new net . minecraftforge . common . util . BlockSnapshot ( p _ 195942 _ 1 _ . func _ 195991 _ k ( ) , p _ 195942 _ 1 _ . func _ 195995 _ a ( ) , currentState ) , net . minecraft . util . EnumFacing . UP ) & & ! this . func _ 195941 _ b ( p _ 195942 _ 1 _ , iblockstate ) ) { 
 + return EnumActionResult . FAIL ; 
 + } else { 
 + BlockPos blockpos = p _ 195942 _ 1 _ . func _ 195995 _ a ( ) ; 
 + @ @ - 59 , 7 + 60 , 7 @ @ 
 } 
 } 
 
 @ @ - 9 , 7 + 21 , 7 @ @ 
 world . func _ 184133 _ a ( entityplayer , blockpos , soundtype . func _ 185841 _ e ( ) , SoundCategory . BLOCKS , ( soundtype . func _ 185843 _ a ( ) + 1 . 0F ) / 2 . 0F , soundtype . func _ 185847 _ b ( ) * 0 . 8F ) ; 
 itemstack . func _ 190918 _ g ( 1 ) ; 
 return EnumActionResult . SUCCESS ; 
 - @ @ - 134 , 6 + 134 , 10 @ @ 
 + @ @ - 134 , 6 + 135 , 10 @ @ 
 } 
 
 public Block func _ 179223 _ d ( ) { 
 diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 index fefd54d . . 18d2e2c 100644 
 - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 @ @ - 119 , 6 + 119 , 8 @ @ import net . minecraftforge . event . entity . player . UseHoeEvent ; 
 import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; 
 import net . minecraftforge . event . terraingen . ChunkGeneratorEvent ; 
 import net . minecraftforge . event . world . BlockEvent ; 
 + import net . minecraftforge . event . world . BlockEvent . EntityMultiPlaceEvent ; 
 + import net . minecraftforge . event . world . BlockEvent . EntityPlaceEvent ; 
 import net . minecraftforge . event . world . BlockEvent . CreateFluidSourceEvent ; 
 import net . minecraftforge . event . world . BlockEvent . MultiPlaceEvent ; 
 import net . minecraftforge . event . world . BlockEvent . NeighborNotifyEvent ; 
 @ @ - 133 , 6 + 135 , 14 @ @ import net . minecraftforge . eventbus . api . Event . Result ; 
 public class ForgeEventFactory 
 { 
 
 + public static boolean onMultiBlockPlace ( @ Nullable Entity entity , List < BlockSnapshot > blockSnapshots , EnumFacing direction ) 
 + { 
 + BlockSnapshot snap = blockSnapshots . get ( 0 ) ; 
 + IBlockState placedAgainst = snap . getWorld ( ) . getBlockState ( snap . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; 
 + EntityMultiPlaceEvent event = new EntityMultiPlaceEvent ( blockSnapshots , placedAgainst , entity ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 public static MultiPlaceEvent onPlayerMultiBlockPlace ( EntityPlayer player , List < BlockSnapshot > blockSnapshots , EnumFacing direction , EnumHand hand ) 
 { 
 BlockSnapshot snap = blockSnapshots . get ( 0 ) ; 
 @ @ - 142 , 6 + 152 , 13 @ @ public class ForgeEventFactory 
 return event ; 
 } 
 
 + public static boolean onBlockPlace ( @ Nullable Entity entity , @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull EnumFacing direction ) 
 + { 
 + IBlockState placedAgainst = blockSnapshot . getWorld ( ) . getBlockState ( blockSnapshot . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; 
 + EntityPlaceEvent event = new BlockEvent . EntityPlaceEvent ( blockSnapshot , placedAgainst , entity ) ; 
 + return MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + } 
 + 
 public static PlaceEvent onPlayerBlockPlace ( @ Nonnull EntityPlayer player , @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull EnumFacing direction , @ Nonnull EnumHand hand ) 
 { 
 IBlockState placedAgainst = blockSnapshot . getWorld ( ) . getBlockState ( blockSnapshot . getPos ( ) . offset ( direction . getOpposite ( ) ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / event / world / BlockEvent . java b / src / main / java / net / minecraftforge / event / world / BlockEvent . java 
 index c573160 . . e549698 100644 
 - - - a / src / main / java / net / minecraftforge / event / world / BlockEvent . java 
 + + + b / src / main / java / net / minecraftforge / event / world / BlockEvent . java 
 @ @ - 43 , 6 + 43 , 7 @ @ import net . minecraftforge . eventbus . api . Event ; 
 import com . google . common . collect . ImmutableList ; 
 
 import javax . annotation . Nonnull ; 
 + import javax . annotation . Nullable ; 
 
 import net . minecraftforge . eventbus . api . Event . HasResult ; 
 
 @ @ - 167 , 25 + 168 , 54 @ @ public class BlockEvent extends Event 
 } 
 
 / * * 
 - * Called when a block is placed by a player . 
 + * Called when a block is placed . 
 * 
 * If a Block Place event is cancelled , the block will not be placed . 
 * / 
 @ Cancelable 
 - public static class PlaceEvent extends BlockEvent 
 + public static class EntityPlaceEvent extends BlockEvent 
 { 
 - private final EntityPlayer player ; 
 + private final Entity entity ; 
 private final BlockSnapshot blockSnapshot ; 
 private final IBlockState placedBlock ; 
 private final IBlockState placedAgainst ; 
 + 
 + public EntityPlaceEvent ( @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull IBlockState placedAgainst , @ Nullable Entity entity ) 
 + { 
 + super ( blockSnapshot . getWorld ( ) , blockSnapshot . getPos ( ) , ! ( entity instanceof EntityPlayer ) ? blockSnapshot . getReplacedBlock ( ) : blockSnapshot . getCurrentBlock ( ) ) ; 
 + this . entity = entity ; 
 + this . blockSnapshot = blockSnapshot ; 
 + this . placedBlock = ! ( entity instanceof EntityPlayer ) ? blockSnapshot . getReplacedBlock ( ) : blockSnapshot . getCurrentBlock ( ) ; 
 + this . placedAgainst = placedAgainst ; 
 + 
 + if ( DEBUG ) 
 + { 
 + System . out . printf ( " Created EntityPlaceEvent - [ PlacedBlock : % s ] [ PlacedAgainst : % s ] [ Entity : % s ] \ n " , getPlacedBlock ( ) , placedAgainst , entity ) ; 
 + } 
 + } 
 + 
 + @ Nullable 
 + public Entity getEntity ( ) { return entity ; } 
 + public BlockSnapshot getBlockSnapshot ( ) { return blockSnapshot ; } 
 + public IBlockState getPlacedBlock ( ) { return placedBlock ; } 
 + public IBlockState getPlacedAgainst ( ) { return placedAgainst ; } 
 + } 
 + 
 + / * * 
 + * Called when a block is placed by a player . 
 + * 
 + * If a Block Place event is cancelled , the block will not be placed . 
 + * / 
 + @ Cancelable 
 + @ Deprecated / / Remove in 1 . 13 
 + public static class PlaceEvent extends EntityPlaceEvent 
 + { 
 + private final EntityPlayer player ; 
 private final EnumHand hand ; 
 
 public PlaceEvent ( @ Nonnull BlockSnapshot blockSnapshot , @ Nonnull IBlockState placedAgainst , @ Nonnull EntityPlayer player , @ Nonnull EnumHand hand ) { 
 - super ( blockSnapshot . getWorld ( ) , blockSnapshot . getPos ( ) , blockSnapshot . getCurrentBlock ( ) ) ; 
 + super ( blockSnapshot , placedAgainst , player ) ; 
 this . player = player ; 
 - this . blockSnapshot = blockSnapshot ; 
 - this . placedBlock = blockSnapshot . getCurrentBlock ( ) ; 
 - this . placedAgainst = placedAgainst ; 
 this . hand = hand ; 
 if ( DEBUG ) 
 { 
 @ @ - 194 , 13 + 224 , 47 @ @ public class BlockEvent extends Event 
 } 
 
 public EntityPlayer getPlayer ( ) { return player ; } 
 - public BlockSnapshot getBlockSnapshot ( ) { return blockSnapshot ; } 
 - public IBlockState getPlacedBlock ( ) { return placedBlock ; } 
 - public IBlockState getPlacedAgainst ( ) { return placedAgainst ; } 
 + @ Nonnull 
 + @ Deprecated 
 + public ItemStack getItemInHand ( ) { return player . getHeldItem ( hand ) ; } 
 public EnumHand getHand ( ) { return hand ; } 
 } 
 
 / * * 
 + * Fired when a single block placement triggers the 
 + * creation of multiple blocks ( e . g . placing a bed block ) . The block returned 
 + * by { @ link # state } and its related methods is the block where 
 + * the placed block would exist if the placement only affected a single 
 + * block . 
 + * / 
 + @ Cancelable 
 + public static class EntityMultiPlaceEvent extends EntityPlaceEvent 
 + { 
 + private final List < BlockSnapshot > blockSnapshots ; 
 + 
 + public EntityMultiPlaceEvent ( @ Nonnull List < BlockSnapshot > blockSnapshots , @ Nonnull IBlockState placedAgainst , @ Nullable Entity entity ) { 
 + super ( blockSnapshots . get ( 0 ) , placedAgainst , entity ) ; 
 + this . blockSnapshots = ImmutableList . copyOf ( blockSnapshots ) ; 
 + if ( DEBUG ) 
 + { 
 + System . out . printf ( " Created EntityMultiPlaceEvent - [ PlacedAgainst : % s ] [ Entity : % s ] \ n " , placedAgainst , entity ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Gets a list of BlockSnapshots for all blocks which were replaced by the 
 + * placement of the new blocks . Most of these blocks will just be of type AIR . 
 + * 
 + * @ return immutable list of replaced BlockSnapshots 
 + * / 
 + public List < BlockSnapshot > getReplacedBlockSnapshots ( ) 
 + { 
 + return blockSnapshots ; 
 + } 
 + } 
 + 
 + 
 + / * * 
 * Fired when a single block placement action of a player triggers the 
 * creation of multiple blocks ( e . g . placing a bed block ) . The block returned 
 * by { @ link # state } and its related methods is the block where 
 diff - - git a / src / test / java / net / minecraftforge / debug / block / BasePlaceEventTest . java b / src / test / java / net / minecraftforge / debug / block / BasePlaceEventTest . java 
 new file mode 100644 
 index 0000000 . . ecb1bfe 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / block / BasePlaceEventTest . java 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . debug . block ; 
 + 
 + import net . minecraft . entity . item . EntityFallingBlock ; 
 + import net . minecraftforge . event . world . BlockEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + @ Mod ( modid = BasePlaceEventTest . MOD _ ID , name = " BaseBlockPlaceEvent test mod " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + @ Mod . EventBusSubscriber 
 + public class BasePlaceEventTest 
 + { 
 + static final String MOD _ ID = " base _ block _ place _ event _ test " ; 
 + static final boolean ENABLED = true ; 
 + 
 + @ SubscribeEvent 
 + public static void onBlockPlaced ( BlockEvent . EntityPlaceEvent event ) 
 + { 
 + if ( ! ENABLED ) 
 + { 
 + return ; 
 + } 
 + 
 + if ( event . getEntity ( ) instanceof EntityFallingBlock ) { 
 + event . setCanceled ( true ) ; 
 + } 
 + } 
 + }
