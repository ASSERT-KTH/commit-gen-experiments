BLEU SCORE: 0.018738883683389617

TEST MSG: Reworked vanilla texture resolution , hopefully fixes NPE bug in FaceBakery
GENERATED MSG: Fixed tracking of UV locking state . Closes # 1679

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 91ea08d . . e04f642 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 56 , 7 + 56 , 6 @ @ import com . google . common . collect . Sets ; <nl> public class ModelLoader extends ModelBakery <nl> { <nl> private final Map < ModelResourceLocation , IModel > stateModels = new HashMap < ModelResourceLocation , IModel > ( ) ; <nl> - private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; <nl> @ @ - 145 , 7 + 144 , 6 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> ResourceLocation file = getItemLocation ( s ) ; <nl> ModelResourceLocation memory = new ModelResourceLocation ( s , " inventory " ) ; <nl> - resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( file ) ) ; <nl> IModel model = getModel ( file ) ; <nl> if ( model = = null | | model = = getMissingModel ( ) ) <nl> { <nl> @ @ - 217 , 10 + 215 , 7 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> - if ( ! resolveTextures . contains ( location ) ) return Collections . emptyList ( ) ; <nl> - <nl> ImmutableSet . Builder < ResourceLocation > builder = ImmutableSet . builder ( ) ; <nl> - builder . add ( new ResourceLocation ( model . resolveTextureName ( " particle " ) ) ) ; <nl> <nl> if ( hasItemModel ( model ) ) <nl> { <nl> @ @ - 243 , 9 + 238 , 12 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> } <nl> - if ( location . getResourcePath ( ) . startsWith ( " models / block / " ) | | ! ModelLoader . this . isBuiltinModel ( model . getRootModel ( ) ) ) <nl> + for ( String s : ( Iterable < String > ) model . textures . values ( ) ) <nl> { <nl> - builder . addAll ( ModelLoader . this . getTextureLocations ( model ) ) ; <nl> + if ( ! s . startsWith ( " # " ) ) <nl> + { <nl> + builder . add ( new ResourceLocation ( s ) ) ; <nl> + } <nl> } <nl> return builder . build ( ) ; <nl> } <nl> @ @ - 328 , 7 + 326 , 6 @ @ public class ModelLoader extends ModelBakery <nl> for ( Variant v : ( List < Variant > ) variants . getVariants ( ) ) <nl> { <nl> ResourceLocation loc = v . getModelLocation ( ) ; <nl> - resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( loc ) ) ; <nl> locations . add ( loc ) ; <nl> IModel model = new WeightedPartWrapper ( getModel ( loc ) ) ; <nl> models . add ( model ) ; <nl> @ @ - 344 , 12 + 341 , 6 @ @ public class ModelLoader extends ModelBakery <nl> <nl> public Collection < ResourceLocation > getTextures ( ) <nl> { <nl> - / * ImmutableSet . Builder < ResourceLocation > builder = ImmutableSet . builder ( ) ; <nl> - for ( ResourceLocation loc : locations ) <nl> - { <nl> - builder . addAll ( getModel ( loc ) . getTextures ( ) ) ; <nl> - } <nl> - return builder . build ( ) ; * / <nl> return Collections . emptyList ( ) ; <nl> } <nl> <nl> diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg <nl> index 11d7172 . . a1b87c4 100644 <nl> - - - a / src / main / resources / forge _ at . cfg <nl> + + + b / src / main / resources / forge _ at . cfg <nl> @ @ - 123 , 6 + 123 , 7 @ @ public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern <nl> public net . minecraft . block . state . BlockState $ StateImplementation <nl> protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V <nl> protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable <nl> + public net . minecraft . client . renderer . block . model . ModelBlock field _ 178318 _ c # textures <nl> public net . minecraft . client . renderer . block . model . ModelBlock field _ 178315 _ d # parent <nl> protected net . minecraft . client . resources . model . ModelBakery field _ 177602 _ b # LOCATIONS _ BUILTIN _ TEXTURES <nl> protected net . minecraft . client . resources . model . ModelBakery field _ 177598 _ f # resourceManager
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index f4f7762 . . 8942995 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 49 , 7 + 49 , 6 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> private final Map < ModelResourceLocation , IModel > stateModels = new HashMap < ModelResourceLocation , IModel > ( ) ; <nl> private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; <nl> - private final Set < ResourceLocation > uvLocked = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; <nl> <nl> @ @ - 116 , 6 + 115 , 7 @ @ public class ModelLoader extends ModelBakery <nl> try <nl> { <nl> stateModels . put ( location , new WeightedRandomModel ( variants ) ) ; <nl> + <nl> } <nl> catch ( Throwable e ) <nl> { <nl> @ @ - 243 , 7 + 243 , 7 @ @ public class ModelLoader extends ModelBakery <nl> ModelBlock model = this . model ; <nl> if ( hasItemModel ( model ) ) model = makeItemModel ( model ) ; <nl> if ( isCustomRenderer ( model ) ) return new IFlexibleBakedModel . Wrapper ( new BuiltInModel ( new ItemCameraTransforms ( model . getThirdPersonTransform ( ) , model . getFirstPersonTransform ( ) , model . getHeadTransform ( ) , model . getInGuiTransform ( ) ) ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; <nl> - return new IFlexibleBakedModel . Wrapper ( bakeModel ( model , state . apply ( this ) , uvLocked . contains ( location ) ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; <nl> + return new IFlexibleBakedModel . Wrapper ( bakeModel ( model , state . apply ( this ) , state instanceof UVLock ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; <nl> } <nl> <nl> public IModelState getDefaultState ( ) <nl> @ @ - 252 , 6 + 252 , 21 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + public static class UVLock implements IModelState <nl> + { <nl> + private final IModelState state ; <nl> + <nl> + public UVLock ( IModelState state ) <nl> + { <nl> + this . state = state ; <nl> + } <nl> + <nl> + public TRSRTransformation apply ( IModelPart part ) <nl> + { <nl> + return state . apply ( part ) ; <nl> + } <nl> + } <nl> + <nl> / / Weighted models can contain multiple copies of 1 model with different rotations - this is to make it work with IModelState ( different copies will be different objects ) . <nl> private static class WeightedPartWrapper implements IModel <nl> { <nl> @ @ - 302 , 7 + 317 , 6 @ @ public class ModelLoader extends ModelBakery <nl> IModel model = new WeightedPartWrapper ( getModel ( loc ) ) ; <nl> models . add ( model ) ; <nl> builder . put ( model , new TRSRTransformation ( v . getRotation ( ) ) ) ; <nl> - if ( v . isUvLocked ( ) ) uvLocked . add ( ModelLoaderRegistry . getActualLocation ( loc ) ) ; <nl> } <nl> defaultState = new MapModelState ( builder . build ( ) ) ; <nl> } <nl> @ @ - 323 , 6 + 337 , 12 @ @ public class ModelLoader extends ModelBakery <nl> return Collections . emptyList ( ) ; <nl> } <nl> <nl> + private IModelState addUV ( boolean uv , IModelState state ) <nl> + { <nl> + if ( uv ) return new UVLock ( state ) ; <nl> + return state ; <nl> + } <nl> + <nl> public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> { <nl> if ( ! Attributes . moreSpecific ( format , Attributes . DEFAULT _ BAKED _ FORMAT ) ) <nl> @ @ - 333 , 13 + 353 , 14 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> Variant v = variants . get ( 0 ) ; <nl> IModel model = models . get ( 0 ) ; <nl> - return model . bake ( state . apply ( model ) , format , bakedTextureGetter ) ; <nl> + return model . bake ( addUV ( v . isUvLocked ( ) , state . apply ( model ) ) , format , bakedTextureGetter ) ; <nl> } <nl> WeightedBakedModel . Builder builder = new WeightedBakedModel . Builder ( ) ; <nl> for ( int i = 0 ; i < variants . size ( ) ; i + + ) <nl> { <nl> IModel model = models . get ( i ) ; <nl> - builder . add ( model . bake ( state . apply ( model ) , format , bakedTextureGetter ) , variants . get ( i ) . getWeight ( ) ) ; <nl> + Variant v = variants . get ( i ) ; <nl> + builder . add ( model . bake ( addUV ( v . isUvLocked ( ) , state . apply ( model ) ) , format , bakedTextureGetter ) , variants . get ( i ) . getWeight ( ) ) ; <nl> } <nl> return new IFlexibleBakedModel . Wrapper ( builder . build ( ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 91ea08d . . e04f642 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 56 , 7 + 56 , 6 @ @ import com . google . common . collect . Sets ; 
 public class ModelLoader extends ModelBakery 
 { 
 private final Map < ModelResourceLocation , IModel > stateModels = new HashMap < ModelResourceLocation , IModel > ( ) ; 
 - private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; 
 @ @ - 145 , 7 + 144 , 6 @ @ public class ModelLoader extends ModelBakery 
 { 
 ResourceLocation file = getItemLocation ( s ) ; 
 ModelResourceLocation memory = new ModelResourceLocation ( s , " inventory " ) ; 
 - resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( file ) ) ; 
 IModel model = getModel ( file ) ; 
 if ( model = = null | | model = = getMissingModel ( ) ) 
 { 
 @ @ - 217 , 10 + 215 , 7 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 - if ( ! resolveTextures . contains ( location ) ) return Collections . emptyList ( ) ; 
 - 
 ImmutableSet . Builder < ResourceLocation > builder = ImmutableSet . builder ( ) ; 
 - builder . add ( new ResourceLocation ( model . resolveTextureName ( " particle " ) ) ) ; 
 
 if ( hasItemModel ( model ) ) 
 { 
 @ @ - 243 , 9 + 238 , 12 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 } 
 - if ( location . getResourcePath ( ) . startsWith ( " models / block / " ) | | ! ModelLoader . this . isBuiltinModel ( model . getRootModel ( ) ) ) 
 + for ( String s : ( Iterable < String > ) model . textures . values ( ) ) 
 { 
 - builder . addAll ( ModelLoader . this . getTextureLocations ( model ) ) ; 
 + if ( ! s . startsWith ( " # " ) ) 
 + { 
 + builder . add ( new ResourceLocation ( s ) ) ; 
 + } 
 } 
 return builder . build ( ) ; 
 } 
 @ @ - 328 , 7 + 326 , 6 @ @ public class ModelLoader extends ModelBakery 
 for ( Variant v : ( List < Variant > ) variants . getVariants ( ) ) 
 { 
 ResourceLocation loc = v . getModelLocation ( ) ; 
 - resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( loc ) ) ; 
 locations . add ( loc ) ; 
 IModel model = new WeightedPartWrapper ( getModel ( loc ) ) ; 
 models . add ( model ) ; 
 @ @ - 344 , 12 + 341 , 6 @ @ public class ModelLoader extends ModelBakery 
 
 public Collection < ResourceLocation > getTextures ( ) 
 { 
 - / * ImmutableSet . Builder < ResourceLocation > builder = ImmutableSet . builder ( ) ; 
 - for ( ResourceLocation loc : locations ) 
 - { 
 - builder . addAll ( getModel ( loc ) . getTextures ( ) ) ; 
 - } 
 - return builder . build ( ) ; * / 
 return Collections . emptyList ( ) ; 
 } 
 
 diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg 
 index 11d7172 . . a1b87c4 100644 
 - - - a / src / main / resources / forge _ at . cfg 
 + + + b / src / main / resources / forge _ at . cfg 
 @ @ - 123 , 6 + 123 , 7 @ @ public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern 
 public net . minecraft . block . state . BlockState $ StateImplementation 
 protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V 
 protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable 
 + public net . minecraft . client . renderer . block . model . ModelBlock field _ 178318 _ c # textures 
 public net . minecraft . client . renderer . block . model . ModelBlock field _ 178315 _ d # parent 
 protected net . minecraft . client . resources . model . ModelBakery field _ 177602 _ b # LOCATIONS _ BUILTIN _ TEXTURES 
 protected net . minecraft . client . resources . model . ModelBakery field _ 177598 _ f # resourceManager

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index f4f7762 . . 8942995 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 49 , 7 + 49 , 6 @ @ public class ModelLoader extends ModelBakery 
 { 
 private final Map < ModelResourceLocation , IModel > stateModels = new HashMap < ModelResourceLocation , IModel > ( ) ; 
 private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; 
 - private final Set < ResourceLocation > uvLocked = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; 
 
 @ @ - 116 , 6 + 115 , 7 @ @ public class ModelLoader extends ModelBakery 
 try 
 { 
 stateModels . put ( location , new WeightedRandomModel ( variants ) ) ; 
 + 
 } 
 catch ( Throwable e ) 
 { 
 @ @ - 243 , 7 + 243 , 7 @ @ public class ModelLoader extends ModelBakery 
 ModelBlock model = this . model ; 
 if ( hasItemModel ( model ) ) model = makeItemModel ( model ) ; 
 if ( isCustomRenderer ( model ) ) return new IFlexibleBakedModel . Wrapper ( new BuiltInModel ( new ItemCameraTransforms ( model . getThirdPersonTransform ( ) , model . getFirstPersonTransform ( ) , model . getHeadTransform ( ) , model . getInGuiTransform ( ) ) ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; 
 - return new IFlexibleBakedModel . Wrapper ( bakeModel ( model , state . apply ( this ) , uvLocked . contains ( location ) ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; 
 + return new IFlexibleBakedModel . Wrapper ( bakeModel ( model , state . apply ( this ) , state instanceof UVLock ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; 
 } 
 
 public IModelState getDefaultState ( ) 
 @ @ - 252 , 6 + 252 , 21 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + public static class UVLock implements IModelState 
 + { 
 + private final IModelState state ; 
 + 
 + public UVLock ( IModelState state ) 
 + { 
 + this . state = state ; 
 + } 
 + 
 + public TRSRTransformation apply ( IModelPart part ) 
 + { 
 + return state . apply ( part ) ; 
 + } 
 + } 
 + 
 / / Weighted models can contain multiple copies of 1 model with different rotations - this is to make it work with IModelState ( different copies will be different objects ) . 
 private static class WeightedPartWrapper implements IModel 
 { 
 @ @ - 302 , 7 + 317 , 6 @ @ public class ModelLoader extends ModelBakery 
 IModel model = new WeightedPartWrapper ( getModel ( loc ) ) ; 
 models . add ( model ) ; 
 builder . put ( model , new TRSRTransformation ( v . getRotation ( ) ) ) ; 
 - if ( v . isUvLocked ( ) ) uvLocked . add ( ModelLoaderRegistry . getActualLocation ( loc ) ) ; 
 } 
 defaultState = new MapModelState ( builder . build ( ) ) ; 
 } 
 @ @ - 323 , 6 + 337 , 12 @ @ public class ModelLoader extends ModelBakery 
 return Collections . emptyList ( ) ; 
 } 
 
 + private IModelState addUV ( boolean uv , IModelState state ) 
 + { 
 + if ( uv ) return new UVLock ( state ) ; 
 + return state ; 
 + } 
 + 
 public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 { 
 if ( ! Attributes . moreSpecific ( format , Attributes . DEFAULT _ BAKED _ FORMAT ) ) 
 @ @ - 333 , 13 + 353 , 14 @ @ public class ModelLoader extends ModelBakery 
 { 
 Variant v = variants . get ( 0 ) ; 
 IModel model = models . get ( 0 ) ; 
 - return model . bake ( state . apply ( model ) , format , bakedTextureGetter ) ; 
 + return model . bake ( addUV ( v . isUvLocked ( ) , state . apply ( model ) ) , format , bakedTextureGetter ) ; 
 } 
 WeightedBakedModel . Builder builder = new WeightedBakedModel . Builder ( ) ; 
 for ( int i = 0 ; i < variants . size ( ) ; i + + ) 
 { 
 IModel model = models . get ( i ) ; 
 - builder . add ( model . bake ( state . apply ( model ) , format , bakedTextureGetter ) , variants . get ( i ) . getWeight ( ) ) ; 
 + Variant v = variants . get ( i ) ; 
 + builder . add ( model . bake ( addUV ( v . isUvLocked ( ) , state . apply ( model ) ) , format , bakedTextureGetter ) , variants . get ( i ) . getWeight ( ) ) ; 
 } 
 return new IFlexibleBakedModel . Wrapper ( builder . build ( ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; 
 }
