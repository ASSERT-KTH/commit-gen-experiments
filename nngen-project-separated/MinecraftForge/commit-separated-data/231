BLEU SCORE: 0.017110488113633058

TEST MSG: Change composite models to fetch quads from submodels using full context
GENERATED MSG: Delayed quad list resolution in MultiModel , fixes NPE in MultiLayerModel .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> index b3deb51 . . 396268f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> @ @ - 131 , 48 + 131 , 30 @ @ public final class MultiLayerModel implements IModel <nl> private final ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ; <nl> private final IBakedModel base ; <nl> private final IBakedModel missing ; <nl> - private final ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; <nl> <nl> public MultiLayerBakedModel ( ImmutableMap < Optional < BlockRenderLayer > , IBakedModel > models , IBakedModel missing , ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ) <nl> { <nl> this . models = models ; <nl> this . cameraTransforms = cameraTransforms ; <nl> this . missing = missing ; <nl> - base = models . getOrDefault ( Optional . empty ( ) , missing ) ; <nl> - ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > quadBuilder = ImmutableMap . builder ( ) ; <nl> - quadBuilder . put ( Optional . empty ( ) , buildQuads ( models , Optional . empty ( ) ) ) ; <nl> - for ( EnumFacing side : EnumFacing . values ( ) ) <nl> - { <nl> - quadBuilder . put ( Optional . of ( side ) , buildQuads ( models , Optional . of ( side ) ) ) ; <nl> - } <nl> - quads = quadBuilder . build ( ) ; <nl> - } <nl> - <nl> - private static ImmutableList < BakedQuad > buildQuads ( ImmutableMap < Optional < BlockRenderLayer > , IBakedModel > models , Optional < EnumFacing > side ) <nl> - { <nl> - ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> - for ( IBakedModel model : models . values ( ) ) <nl> - { <nl> - builder . addAll ( model . getQuads ( null , side . orElse ( null ) , 0 ) ) ; <nl> - } <nl> - return builder . build ( ) ; <nl> + this . base = models . getOrDefault ( Optional . empty ( ) , missing ) ; <nl> } <nl> <nl> @ Override <nl> public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) <nl> { <nl> - IBakedModel model ; <nl> BlockRenderLayer layer = MinecraftForgeClient . getRenderLayer ( ) ; <nl> - if ( layer = = null ) <nl> - { <nl> - return quads . get ( Optional . ofNullable ( side ) ) ; <nl> - } <nl> - else <nl> + if ( layer = = null ) <nl> { <nl> - model = models . getOrDefault ( Optional . of ( layer ) , missing ) ; <nl> + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> + for ( IBakedModel model : models . values ( ) ) <nl> + { <nl> + builder . addAll ( model . getQuads ( state , side , rand ) ) ; <nl> + } <nl> + return builder . build ( ) ; <nl> } <nl> / / assumes that child model will handle this state properly . FIXME ? <nl> - return model . getQuads ( state , side , rand ) ; <nl> + return models . getOrDefault ( Optional . of ( layer ) , missing ) . getQuads ( state , side , rand ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / MultiModel . java b / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> index 34e0105 . . e121fe8 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> @ @ - 50 , 7 + 50 , 6 @ @ import net . minecraftforge . fml . common . FMLLog ; <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> <nl> import java . util . function . Function ; <nl> - import java . util . Optional ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . Lists ; <nl> @ @ - 68 , 7 + 67 , 6 @ @ public final class MultiModel implements IModel <nl> private final ImmutableMap < String , IBakedModel > parts ; <nl> <nl> private final IBakedModel internalBase ; <nl> - private ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; <nl> private final ImmutableMap < TransformType , Pair < Baked , TRSRTransformation > > transforms ; <nl> private final ItemOverrideList overrides = new ItemOverrideList ( Lists . newArrayList ( ) ) <nl> { <nl> @ @ - 187 , 36 + 185 , 16 @ @ public final class MultiModel implements IModel <nl> @ Override <nl> public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) <nl> { <nl> - if ( quads = = null ) <nl> + ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; <nl> + if ( base ! = null ) <nl> { <nl> - ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > builder = ImmutableMap . builder ( ) ; <nl> - <nl> - for ( EnumFacing face : EnumFacing . values ( ) ) <nl> - { <nl> - ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; <nl> - if ( base ! = null ) <nl> - { <nl> - quads . addAll ( base . getQuads ( state , face , 0 ) ) ; <nl> - } <nl> - for ( IBakedModel bakedPart : parts . values ( ) ) <nl> - { <nl> - quads . addAll ( bakedPart . getQuads ( state , face , 0 ) ) ; <nl> - } <nl> - builder . put ( Optional . of ( face ) , quads . build ( ) ) ; <nl> - } <nl> - ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; <nl> - if ( base ! = null ) <nl> - { <nl> - quads . addAll ( base . getQuads ( state , null , 0 ) ) ; <nl> - } <nl> - for ( IBakedModel bakedPart : parts . values ( ) ) <nl> - { <nl> - quads . addAll ( bakedPart . getQuads ( state , null , 0 ) ) ; <nl> - } <nl> - builder . put ( Optional . empty ( ) , quads . build ( ) ) ; <nl> - this . quads = builder . build ( ) ; <nl> + quads . addAll ( base . getQuads ( state , side , rand ) ) ; <nl> + } <nl> + for ( IBakedModel bakedPart : parts . values ( ) ) <nl> + { <nl> + quads . addAll ( bakedPart . getQuads ( state , side , rand ) ) ; <nl> } <nl> - return quads . get ( Optional . ofNullable ( side ) ) ; <nl> + return quads . build ( ) ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / MultiModel . java b / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> index 4f0178c . . 9e55b60 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> @ @ - 37 , 8 + 37 , 8 @ @ public class MultiModel implements IModel <nl> protected final ImmutableMap < String , IFlexibleBakedModel > parts ; <nl> <nl> protected final IFlexibleBakedModel internalBase ; <nl> - protected final ImmutableList < BakedQuad > general ; <nl> - protected final ImmutableMap < EnumFacing , ImmutableList < BakedQuad > > faces ; <nl> + protected ImmutableList < BakedQuad > general ; <nl> + protected ImmutableMap < EnumFacing , ImmutableList < BakedQuad > > faces ; <nl> protected final ImmutableMap < TransformType , Pair < Baked , TRSRTransformation > > transforms ; <nl> <nl> public Baked ( IFlexibleBakedModel base , ImmutableMap < String , IFlexibleBakedModel > parts ) <nl> @ @ - 62 , 29 + 62 , 6 @ @ public class MultiModel implements IModel <nl> throw new IllegalArgumentException ( " No base model or submodel provided for MultiModel . Baked " + location + " . " ) ; <nl> } <nl> <nl> - / / Create map of each face ' s quads . <nl> - EnumMap < EnumFacing , ImmutableList < BakedQuad > > faces = Maps . newEnumMap ( EnumFacing . class ) ; <nl> - <nl> - for ( EnumFacing face : EnumFacing . values ( ) ) <nl> - { <nl> - ImmutableList . Builder < BakedQuad > faceQuads = ImmutableList . builder ( ) ; <nl> - if ( base ! = null ) <nl> - faceQuads . addAll ( base . getFaceQuads ( face ) ) ; <nl> - for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) <nl> - faceQuads . addAll ( bakedPart . getFaceQuads ( face ) ) ; <nl> - faces . put ( face , faceQuads . build ( ) ) ; <nl> - } <nl> - <nl> - this . faces = Maps . immutableEnumMap ( faces ) ; <nl> - <nl> - / / Create list of general quads . <nl> - ImmutableList . Builder < BakedQuad > genQuads = ImmutableList . builder ( ) ; <nl> - if ( base ! = null ) <nl> - genQuads . addAll ( base . getGeneralQuads ( ) ) ; <nl> - for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) <nl> - genQuads . addAll ( bakedPart . getGeneralQuads ( ) ) ; <nl> - general = genQuads . build ( ) ; <nl> - <nl> / / Only changes the base model based on perspective , may recurse for parts in the future . <nl> if ( perspective & & base instanceof IPerspectiveAwareModel ) <nl> { <nl> @ @ - 137 , 12 + 114 , 38 @ @ public class MultiModel implements IModel <nl> @ Override <nl> public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> { <nl> + if ( faces = = null ) <nl> + { <nl> + / / Create map of each face ' s quads . <nl> + EnumMap < EnumFacing , ImmutableList < BakedQuad > > faces = Maps . newEnumMap ( EnumFacing . class ) ; <nl> + <nl> + for ( EnumFacing face : EnumFacing . values ( ) ) <nl> + { <nl> + ImmutableList . Builder < BakedQuad > faceQuads = ImmutableList . builder ( ) ; <nl> + if ( base ! = null ) <nl> + faceQuads . addAll ( base . getFaceQuads ( face ) ) ; <nl> + for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) <nl> + faceQuads . addAll ( bakedPart . getFaceQuads ( face ) ) ; <nl> + faces . put ( face , faceQuads . build ( ) ) ; <nl> + } <nl> + this . faces = Maps . immutableEnumMap ( faces ) ; <nl> + } <nl> return faces . get ( side ) ; <nl> } <nl> <nl> @ Override <nl> public List < BakedQuad > getGeneralQuads ( ) <nl> { <nl> + if ( general = = null ) <nl> + { <nl> + / / Create list of general quads . <nl> + ImmutableList . Builder < BakedQuad > genQuads = ImmutableList . builder ( ) ; <nl> + if ( base ! = null ) <nl> + genQuads . addAll ( base . getGeneralQuads ( ) ) ; <nl> + for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) <nl> + genQuads . addAll ( bakedPart . getGeneralQuads ( ) ) ; <nl> + general = genQuads . build ( ) ; <nl> + } <nl> return general ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 index b3deb51 . . 396268f 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 @ @ - 131 , 48 + 131 , 30 @ @ public final class MultiLayerModel implements IModel 
 private final ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ; 
 private final IBakedModel base ; 
 private final IBakedModel missing ; 
 - private final ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; 
 
 public MultiLayerBakedModel ( ImmutableMap < Optional < BlockRenderLayer > , IBakedModel > models , IBakedModel missing , ImmutableMap < TransformType , TRSRTransformation > cameraTransforms ) 
 { 
 this . models = models ; 
 this . cameraTransforms = cameraTransforms ; 
 this . missing = missing ; 
 - base = models . getOrDefault ( Optional . empty ( ) , missing ) ; 
 - ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > quadBuilder = ImmutableMap . builder ( ) ; 
 - quadBuilder . put ( Optional . empty ( ) , buildQuads ( models , Optional . empty ( ) ) ) ; 
 - for ( EnumFacing side : EnumFacing . values ( ) ) 
 - { 
 - quadBuilder . put ( Optional . of ( side ) , buildQuads ( models , Optional . of ( side ) ) ) ; 
 - } 
 - quads = quadBuilder . build ( ) ; 
 - } 
 - 
 - private static ImmutableList < BakedQuad > buildQuads ( ImmutableMap < Optional < BlockRenderLayer > , IBakedModel > models , Optional < EnumFacing > side ) 
 - { 
 - ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 - for ( IBakedModel model : models . values ( ) ) 
 - { 
 - builder . addAll ( model . getQuads ( null , side . orElse ( null ) , 0 ) ) ; 
 - } 
 - return builder . build ( ) ; 
 + this . base = models . getOrDefault ( Optional . empty ( ) , missing ) ; 
 } 
 
 @ Override 
 public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) 
 { 
 - IBakedModel model ; 
 BlockRenderLayer layer = MinecraftForgeClient . getRenderLayer ( ) ; 
 - if ( layer = = null ) 
 - { 
 - return quads . get ( Optional . ofNullable ( side ) ) ; 
 - } 
 - else 
 + if ( layer = = null ) 
 { 
 - model = models . getOrDefault ( Optional . of ( layer ) , missing ) ; 
 + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 + for ( IBakedModel model : models . values ( ) ) 
 + { 
 + builder . addAll ( model . getQuads ( state , side , rand ) ) ; 
 + } 
 + return builder . build ( ) ; 
 } 
 / / assumes that child model will handle this state properly . FIXME ? 
 - return model . getQuads ( state , side , rand ) ; 
 + return models . getOrDefault ( Optional . of ( layer ) , missing ) . getQuads ( state , side , rand ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / net / minecraftforge / client / model / MultiModel . java b / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 index 34e0105 . . e121fe8 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 @ @ - 50 , 7 + 50 , 6 @ @ import net . minecraftforge . fml . common . FMLLog ; 
 import org . apache . commons . lang3 . tuple . Pair ; 
 
 import java . util . function . Function ; 
 - import java . util . Optional ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . Lists ; 
 @ @ - 68 , 7 + 67 , 6 @ @ public final class MultiModel implements IModel 
 private final ImmutableMap < String , IBakedModel > parts ; 
 
 private final IBakedModel internalBase ; 
 - private ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; 
 private final ImmutableMap < TransformType , Pair < Baked , TRSRTransformation > > transforms ; 
 private final ItemOverrideList overrides = new ItemOverrideList ( Lists . newArrayList ( ) ) 
 { 
 @ @ - 187 , 36 + 185 , 16 @ @ public final class MultiModel implements IModel 
 @ Override 
 public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) 
 { 
 - if ( quads = = null ) 
 + ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; 
 + if ( base ! = null ) 
 { 
 - ImmutableMap . Builder < Optional < EnumFacing > , ImmutableList < BakedQuad > > builder = ImmutableMap . builder ( ) ; 
 - 
 - for ( EnumFacing face : EnumFacing . values ( ) ) 
 - { 
 - ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; 
 - if ( base ! = null ) 
 - { 
 - quads . addAll ( base . getQuads ( state , face , 0 ) ) ; 
 - } 
 - for ( IBakedModel bakedPart : parts . values ( ) ) 
 - { 
 - quads . addAll ( bakedPart . getQuads ( state , face , 0 ) ) ; 
 - } 
 - builder . put ( Optional . of ( face ) , quads . build ( ) ) ; 
 - } 
 - ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; 
 - if ( base ! = null ) 
 - { 
 - quads . addAll ( base . getQuads ( state , null , 0 ) ) ; 
 - } 
 - for ( IBakedModel bakedPart : parts . values ( ) ) 
 - { 
 - quads . addAll ( bakedPart . getQuads ( state , null , 0 ) ) ; 
 - } 
 - builder . put ( Optional . empty ( ) , quads . build ( ) ) ; 
 - this . quads = builder . build ( ) ; 
 + quads . addAll ( base . getQuads ( state , side , rand ) ) ; 
 + } 
 + for ( IBakedModel bakedPart : parts . values ( ) ) 
 + { 
 + quads . addAll ( bakedPart . getQuads ( state , side , rand ) ) ; 
 } 
 - return quads . get ( Optional . ofNullable ( side ) ) ; 
 + return quads . build ( ) ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / MultiModel . java b / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 index 4f0178c . . 9e55b60 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 @ @ - 37 , 8 + 37 , 8 @ @ public class MultiModel implements IModel 
 protected final ImmutableMap < String , IFlexibleBakedModel > parts ; 
 
 protected final IFlexibleBakedModel internalBase ; 
 - protected final ImmutableList < BakedQuad > general ; 
 - protected final ImmutableMap < EnumFacing , ImmutableList < BakedQuad > > faces ; 
 + protected ImmutableList < BakedQuad > general ; 
 + protected ImmutableMap < EnumFacing , ImmutableList < BakedQuad > > faces ; 
 protected final ImmutableMap < TransformType , Pair < Baked , TRSRTransformation > > transforms ; 
 
 public Baked ( IFlexibleBakedModel base , ImmutableMap < String , IFlexibleBakedModel > parts ) 
 @ @ - 62 , 29 + 62 , 6 @ @ public class MultiModel implements IModel 
 throw new IllegalArgumentException ( " No base model or submodel provided for MultiModel . Baked " + location + " . " ) ; 
 } 
 
 - / / Create map of each face ' s quads . 
 - EnumMap < EnumFacing , ImmutableList < BakedQuad > > faces = Maps . newEnumMap ( EnumFacing . class ) ; 
 - 
 - for ( EnumFacing face : EnumFacing . values ( ) ) 
 - { 
 - ImmutableList . Builder < BakedQuad > faceQuads = ImmutableList . builder ( ) ; 
 - if ( base ! = null ) 
 - faceQuads . addAll ( base . getFaceQuads ( face ) ) ; 
 - for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) 
 - faceQuads . addAll ( bakedPart . getFaceQuads ( face ) ) ; 
 - faces . put ( face , faceQuads . build ( ) ) ; 
 - } 
 - 
 - this . faces = Maps . immutableEnumMap ( faces ) ; 
 - 
 - / / Create list of general quads . 
 - ImmutableList . Builder < BakedQuad > genQuads = ImmutableList . builder ( ) ; 
 - if ( base ! = null ) 
 - genQuads . addAll ( base . getGeneralQuads ( ) ) ; 
 - for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) 
 - genQuads . addAll ( bakedPart . getGeneralQuads ( ) ) ; 
 - general = genQuads . build ( ) ; 
 - 
 / / Only changes the base model based on perspective , may recurse for parts in the future . 
 if ( perspective & & base instanceof IPerspectiveAwareModel ) 
 { 
 @ @ - 137 , 12 + 114 , 38 @ @ public class MultiModel implements IModel 
 @ Override 
 public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 { 
 + if ( faces = = null ) 
 + { 
 + / / Create map of each face ' s quads . 
 + EnumMap < EnumFacing , ImmutableList < BakedQuad > > faces = Maps . newEnumMap ( EnumFacing . class ) ; 
 + 
 + for ( EnumFacing face : EnumFacing . values ( ) ) 
 + { 
 + ImmutableList . Builder < BakedQuad > faceQuads = ImmutableList . builder ( ) ; 
 + if ( base ! = null ) 
 + faceQuads . addAll ( base . getFaceQuads ( face ) ) ; 
 + for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) 
 + faceQuads . addAll ( bakedPart . getFaceQuads ( face ) ) ; 
 + faces . put ( face , faceQuads . build ( ) ) ; 
 + } 
 + this . faces = Maps . immutableEnumMap ( faces ) ; 
 + } 
 return faces . get ( side ) ; 
 } 
 
 @ Override 
 public List < BakedQuad > getGeneralQuads ( ) 
 { 
 + if ( general = = null ) 
 + { 
 + / / Create list of general quads . 
 + ImmutableList . Builder < BakedQuad > genQuads = ImmutableList . builder ( ) ; 
 + if ( base ! = null ) 
 + genQuads . addAll ( base . getGeneralQuads ( ) ) ; 
 + for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) 
 + genQuads . addAll ( bakedPart . getGeneralQuads ( ) ) ; 
 + general = genQuads . build ( ) ; 
 + } 
 return general ; 
 } 

