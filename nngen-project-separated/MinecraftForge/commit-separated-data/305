BLEU SCORE: 0.03089055318156698

TEST MSG: Don ' t enforce IPv4 for clients connecting to IPv6 - only servers
GENERATED MSG: Exposed getters for NetServerHandler . playerEntity and NetworkManager . netHandler

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / network / NetworkManager . java . patch b / patches / minecraft / net / minecraft / network / NetworkManager . java . patch <nl> index 08546e0 . . 7145a31 100644 <nl> - - - a / patches / minecraft / net / minecraft / network / NetworkManager . java . patch <nl> + + + b / patches / minecraft / net / minecraft / network / NetworkManager . java . patch <nl> @ @ - 39 , 7 + 39 , 15 @ @ <nl> { <nl> NetworkManager . this . func _ 150723 _ a ( enumconnectionstate ) ; <nl> } <nl> - @ @ - 454 , 6 + 459 , 11 @ @ <nl> + @ @ - 308 , 6 + 313 , 7 @ @ <nl> + @ SideOnly ( Side . CLIENT ) <nl> + public static NetworkManager func _ 181124 _ a ( InetAddress p _ 181124 _ 0 _ , int p _ 181124 _ 1 _ , boolean p _ 181124 _ 2 _ ) <nl> + { <nl> + + if ( p _ 181124 _ 0 _ instanceof java . net . Inet6Address ) System . setProperty ( " java . net . preferIPv4Stack " , " false " ) ; <nl> + final NetworkManager networkmanager = new NetworkManager ( EnumPacketDirection . CLIENTBOUND ) ; <nl> + Class < ? extends SocketChannel > oclass ; <nl> + LazyLoadBase < ? extends EventLoopGroup > lazyloadbase ; <nl> + @ @ - 454 , 6 + 460 , 11 @ @ <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / forge / patches / minecraft / net / minecraft / src / NetworkManager . java . patch b / forge / patches / minecraft / net / minecraft / src / NetworkManager . java . patch <nl> index 11c6db0 . . f163583 100644 <nl> - - - a / forge / patches / minecraft / net / minecraft / src / NetworkManager . java . patch <nl> + + + b / forge / patches / minecraft / net / minecraft / src / NetworkManager . java . patch <nl> @ @ - 17 , 3 + 17 , 18 @ @ <nl> } <nl> <nl> public void processReadPackets ( ) <nl> + @ @ - 293 , 4 + 296 , 14 @ @ <nl> + { <nl> + return networkmanager . writeThread ; <nl> + } <nl> + + <nl> + + / * * <nl> + + * Retrieves the current associated network handler . <nl> + + * Added so modders dont have to use reflection . <nl> + + * @ return The current registered Network Handler <nl> + + * / <nl> + + public NetHandler getNetHandler ( ) <nl> + + { <nl> + + return netHandler ; <nl> + + } <nl> + } <nl> diff - - git a / forge / patches / minecraft _ server / net / minecraft / src / NetServerHandler . java . patch b / forge / patches / minecraft _ server / net / minecraft / src / NetServerHandler . java . patch <nl> index 89ae125 . . 51e67a5 100644 <nl> - - - a / forge / patches / minecraft _ server / net / minecraft / src / NetServerHandler . java . patch <nl> + + + b / forge / patches / minecraft _ server / net / minecraft / src / NetServerHandler . java . patch <nl> @ @ - 34 , 11 + 34 , 16 @ @ <nl> { <nl> playerEntity . itemInWorldManager . activeBlockOrUseItem ( playerEntity , worldserver , itemstack , i , j , k , l ) ; <nl> } <nl> - @ @ - 764 , 4 + 770 , 44 @ @ <nl> + @ @ - 764 , 4 + 770 , 49 @ @ <nl> { <nl> return true ; <nl> } <nl> + <nl> + + public EntityPlayerMP getPlayerEntity ( ) <nl> + + { <nl> + + return playerEntity ; <nl> + + } <nl> + + <nl> + @ Override <nl> + public void handleCustomPayload ( Packet250CustomPayload pkt ) <nl> + { <nl> diff - - git a / forge / patches / minecraft _ server / net / minecraft / src / NetworkManager . java . patch b / forge / patches / minecraft _ server / net / minecraft / src / NetworkManager . java . patch <nl> index 6ac292d . . 2ce6f1b 100644 <nl> - - - a / forge / patches / minecraft _ server / net / minecraft / src / NetworkManager . java . patch <nl> + + + b / forge / patches / minecraft _ server / net / minecraft / src / NetworkManager . java . patch <nl> @ @ - 19 , 3 + 19 , 18 @ @ <nl> } <nl> <nl> public void processReadPackets ( ) <nl> + @ @ - 313 , 4 + 318 , 14 @ @ <nl> + { <nl> + return networkmanager . writeThread ; <nl> + } <nl> + + <nl> + + / * * <nl> + + * Retrieves the current associated network handler . <nl> + + * Added so modders dont have to use reflection . <nl> + + * @ return The current registered Network Handler <nl> + + * / <nl> + + public NetHandler getNetHandler ( ) <nl> + + { <nl> + + return netHandler ; <nl> + + } <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / network / NetworkManager . java . patch b / patches / minecraft / net / minecraft / network / NetworkManager . java . patch 
 index 08546e0 . . 7145a31 100644 
 - - - a / patches / minecraft / net / minecraft / network / NetworkManager . java . patch 
 + + + b / patches / minecraft / net / minecraft / network / NetworkManager . java . patch 
 @ @ - 39 , 7 + 39 , 15 @ @ 
 { 
 NetworkManager . this . func _ 150723 _ a ( enumconnectionstate ) ; 
 } 
 - @ @ - 454 , 6 + 459 , 11 @ @ 
 + @ @ - 308 , 6 + 313 , 7 @ @ 
 + @ SideOnly ( Side . CLIENT ) 
 + public static NetworkManager func _ 181124 _ a ( InetAddress p _ 181124 _ 0 _ , int p _ 181124 _ 1 _ , boolean p _ 181124 _ 2 _ ) 
 + { 
 + + if ( p _ 181124 _ 0 _ instanceof java . net . Inet6Address ) System . setProperty ( " java . net . preferIPv4Stack " , " false " ) ; 
 + final NetworkManager networkmanager = new NetworkManager ( EnumPacketDirection . CLIENTBOUND ) ; 
 + Class < ? extends SocketChannel > oclass ; 
 + LazyLoadBase < ? extends EventLoopGroup > lazyloadbase ; 
 + @ @ - 454 , 6 + 460 , 11 @ @ 
 } 
 } 


NEAREST DIFF:
diff - - git a / forge / patches / minecraft / net / minecraft / src / NetworkManager . java . patch b / forge / patches / minecraft / net / minecraft / src / NetworkManager . java . patch 
 index 11c6db0 . . f163583 100644 
 - - - a / forge / patches / minecraft / net / minecraft / src / NetworkManager . java . patch 
 + + + b / forge / patches / minecraft / net / minecraft / src / NetworkManager . java . patch 
 @ @ - 17 , 3 + 17 , 18 @ @ 
 } 
 
 public void processReadPackets ( ) 
 + @ @ - 293 , 4 + 296 , 14 @ @ 
 + { 
 + return networkmanager . writeThread ; 
 + } 
 + + 
 + + / * * 
 + + * Retrieves the current associated network handler . 
 + + * Added so modders dont have to use reflection . 
 + + * @ return The current registered Network Handler 
 + + * / 
 + + public NetHandler getNetHandler ( ) 
 + + { 
 + + return netHandler ; 
 + + } 
 + } 
 diff - - git a / forge / patches / minecraft _ server / net / minecraft / src / NetServerHandler . java . patch b / forge / patches / minecraft _ server / net / minecraft / src / NetServerHandler . java . patch 
 index 89ae125 . . 51e67a5 100644 
 - - - a / forge / patches / minecraft _ server / net / minecraft / src / NetServerHandler . java . patch 
 + + + b / forge / patches / minecraft _ server / net / minecraft / src / NetServerHandler . java . patch 
 @ @ - 34 , 11 + 34 , 16 @ @ 
 { 
 playerEntity . itemInWorldManager . activeBlockOrUseItem ( playerEntity , worldserver , itemstack , i , j , k , l ) ; 
 } 
 - @ @ - 764 , 4 + 770 , 44 @ @ 
 + @ @ - 764 , 4 + 770 , 49 @ @ 
 { 
 return true ; 
 } 
 + 
 + + public EntityPlayerMP getPlayerEntity ( ) 
 + + { 
 + + return playerEntity ; 
 + + } 
 + + 
 + @ Override 
 + public void handleCustomPayload ( Packet250CustomPayload pkt ) 
 + { 
 diff - - git a / forge / patches / minecraft _ server / net / minecraft / src / NetworkManager . java . patch b / forge / patches / minecraft _ server / net / minecraft / src / NetworkManager . java . patch 
 index 6ac292d . . 2ce6f1b 100644 
 - - - a / forge / patches / minecraft _ server / net / minecraft / src / NetworkManager . java . patch 
 + + + b / forge / patches / minecraft _ server / net / minecraft / src / NetworkManager . java . patch 
 @ @ - 19 , 3 + 19 , 18 @ @ 
 } 
 
 public void processReadPackets ( ) 
 + @ @ - 313 , 4 + 318 , 14 @ @ 
 + { 
 + return networkmanager . writeThread ; 
 + } 
 + + 
 + + / * * 
 + + * Retrieves the current associated network handler . 
 + + * Added so modders dont have to use reflection . 
 + + * @ return The current registered Network Handler 
 + + * / 
 + + public NetHandler getNetHandler ( ) 
 + + { 
 + + return netHandler ; 
 + + } 
 + }
