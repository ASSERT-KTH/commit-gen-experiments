BLEU SCORE: 0.007887471949677212

TEST MSG: Extended Animation State Machine format to allow multiple transitions from one state .
GENERATED MSG: Added system to place all configs that use Forge ' s Configuration function into a single file on disc . Optional config to enable this . Blame MattaBase for this idea . .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / animation / TimeValues . java b / src / main / java / net / minecraftforge / common / animation / TimeValues . java <nl> index 7481138 . . d1a2b7e 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / animation / TimeValues . java <nl> + + + b / src / main / java / net / minecraftforge / common / animation / TimeValues . java <nl> @ @ - 332 , 7 + 332 , 7 @ @ public final class TimeValues <nl> if ( SimpleExprValue . opsPattern . matcher ( type ) . matches ( ) ) <nl> { <nl> ImmutableList . Builder < ITimeValue > builder = ImmutableList . builder ( ) ; <nl> - while ( in . peek ( ) ! = JsonToken . END _ ARRAY ) <nl> + while ( in . hasNext ( ) ) <nl> { <nl> builder . add ( read ( in ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java <nl> index 6418b0c . . c7c1ef8 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java <nl> + + + b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java <nl> @ @ - 2 , 8 + 2 , 19 @ @ package net . minecraftforge . common . model . animation ; <nl> <nl> import java . io . IOException ; <nl> import java . io . InputStreamReader ; <nl> + import java . lang . reflect . ParameterizedType ; <nl> + import java . lang . reflect . Type ; <nl> + import java . util . Collection ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . TimeUnit ; <nl> <nl> + import com . google . common . base . Supplier ; <nl> + import com . google . common . collect . * ; <nl> + import com . google . gson . * ; <nl> + import com . google . gson . reflect . TypeToken ; <nl> + import com . google . gson . stream . JsonReader ; <nl> + import com . google . gson . stream . JsonWriter ; <nl> import net . minecraft . client . resources . IResource ; <nl> import net . minecraft . client . resources . IResourceManager ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 25 , 12 + 36 , 6 @ @ import com . google . common . base . Predicate ; <nl> import com . google . common . cache . CacheBuilder ; <nl> import com . google . common . cache . CacheLoader ; <nl> import com . google . common . cache . LoadingCache ; <nl> - import com . google . common . collect . ImmutableList ; <nl> - import com . google . common . collect . ImmutableMap ; <nl> - import com . google . common . collect . Iterables ; <nl> - import com . google . gson . Gson ; <nl> - import com . google . gson . GsonBuilder ; <nl> - import com . google . gson . JsonParseException ; <nl> import com . google . gson . annotations . SerializedName ; <nl> <nl> public final class AnimationStateMachine implements IAnimationStateMachine <nl> @ @ - 38 , 7 + 43 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine <nl> private final ImmutableMap < String , ITimeValue > parameters ; <nl> private final ImmutableMap < String , IClip > clips ; <nl> private final ImmutableList < String > states ; <nl> - private final ImmutableMap < String , String > transitions ; <nl> + private final ImmutableMultimap < String , String > transitions ; <nl> @ SerializedName ( " start _ state " ) <nl> private final String startState ; <nl> <nl> @ @ - 58 , 8 + 63 , 26 @ @ public final class AnimationStateMachine implements IAnimationStateMachine <nl> } <nl> } ) ; <nl> <nl> + @ Deprecated <nl> public AnimationStateMachine ( ImmutableMap < String , ITimeValue > parameters , ImmutableMap < String , IClip > clips , ImmutableList < String > states , ImmutableMap < String , String > transitions , String startState ) <nl> { <nl> + this ( parameters , clips , states , ImmutableMultimap . copyOf ( Multimaps . newSetMultimap ( Maps . transformValues ( transitions , new Function < String , Collection < String > > ( ) <nl> + { <nl> + public Collection < String > apply ( String input ) <nl> + { <nl> + return ImmutableSet . of ( input ) ; <nl> + } <nl> + } ) , new Supplier < Set < String > > ( ) <nl> + { <nl> + public Set < String > get ( ) <nl> + { <nl> + return Sets . newHashSet ( ) ; <nl> + } <nl> + } ) ) , startState ) ; <nl> + } <nl> + <nl> + public AnimationStateMachine ( ImmutableMap < String , ITimeValue > parameters , ImmutableMap < String , IClip > clips , ImmutableList < String > states , ImmutableMultimap < String , String > transitions , String startState ) <nl> + { <nl> this . parameters = parameters ; <nl> this . clips = clips ; <nl> this . states = states ; <nl> @ @ - 148 , 7 + 171 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine <nl> { <nl> throw new IllegalStateException ( " unknown state : " + newState ) ; <nl> } <nl> - if ( ! transitions . get ( currentStateName ) . equals ( newState ) ) <nl> + if ( ! transitions . containsEntry ( currentStateName , newState ) ) <nl> { <nl> throw new IllegalArgumentException ( " no transition from current clip \ " " + currentStateName + " \ " to the clip \ " " + newState + " \ " found . " ) ; <nl> } <nl> @ @ - 208 , 7 + 231 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine <nl> ImmutableMap . < String , ITimeValue > of ( ) , <nl> ImmutableMap . of ( " missingno " , ( IClip ) Clips . IdentityClip . INSTANCE ) , <nl> ImmutableList . of ( " missingno " ) , <nl> - ImmutableMap . < String , String > of ( ) , <nl> + ImmutableMultimap . < String , String > of ( ) , <nl> " missingno " ) ; <nl> <nl> static <nl> @ @ - 216 , 7 + 239 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine <nl> missing . initialize ( ) ; <nl> } <nl> <nl> - public static final AnimationStateMachine getMissing ( ) <nl> + public static AnimationStateMachine getMissing ( ) <nl> { <nl> return missing ; <nl> } <nl> @ @ - 257 , 8 + 280 , 62 @ @ public final class AnimationStateMachine implements IAnimationStateMachine <nl> . registerTypeAdapterFactory ( Clips . CommonClipTypeAdapterFactory . INSTANCE ) <nl> / / . registerTypeAdapterFactory ( ClipProviders . CommonClipProviderTypeAdapterFactory . INSTANCE ) <nl> . registerTypeAdapterFactory ( TimeValues . CommonTimeValueTypeAdapterFactory . INSTANCE ) <nl> + . registerTypeAdapterFactory ( TransitionsAdapterFactory . INSTANCE ) <nl> . setPrettyPrinting ( ) <nl> . enableComplexMapKeySerialization ( ) <nl> . disableHtmlEscaping ( ) <nl> . create ( ) ; <nl> + <nl> + private enum TransitionsAdapterFactory implements TypeAdapterFactory <nl> + { <nl> + INSTANCE ; <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public < T > TypeAdapter < T > create ( Gson gson , TypeToken < T > type ) <nl> + { <nl> + if ( type . getRawType ( ) ! = ImmutableMultimap . class | | ! ( type . getType ( ) instanceof ParameterizedType ) ) <nl> + { <nl> + return null ; <nl> + } <nl> + final Type [ ] typeArguments = ( ( ParameterizedType ) type . getType ( ) ) . getActualTypeArguments ( ) ; <nl> + if ( typeArguments . length ! = 2 | | typeArguments [ 0 ] ! = String . class | | typeArguments [ 1 ] ! = String . class ) <nl> + { <nl> + return null ; <nl> + } <nl> + final TypeAdapter < Map < String , Collection < String > > > mapAdapter = gson . getAdapter ( new TypeToken < Map < String , Collection < String > > > ( ) { } ) ; <nl> + final TypeAdapter < Collection < String > > collectionAdapter = gson . getAdapter ( new TypeToken < Collection < String > > ( ) { } ) ; <nl> + return ( TypeAdapter < T > ) new TypeAdapter < ImmutableMultimap < String , String > > ( ) <nl> + { <nl> + @ Override <nl> + public void write ( JsonWriter out , ImmutableMultimap < String , String > value ) throws IOException <nl> + { <nl> + mapAdapter . write ( out , value . asMap ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ImmutableMultimap < String , String > read ( JsonReader in ) throws IOException <nl> + { <nl> + ImmutableMultimap . Builder < String , String > builder = ImmutableMultimap . builder ( ) ; <nl> + in . beginObject ( ) ; <nl> + while ( in . hasNext ( ) ) <nl> + { <nl> + String key = in . nextName ( ) ; <nl> + switch ( in . peek ( ) ) <nl> + { <nl> + case STRING : <nl> + builder . put ( key , in . nextString ( ) ) ; <nl> + break ; <nl> + case BEGIN _ ARRAY : <nl> + builder . putAll ( key , collectionAdapter . read ( in ) ) ; <nl> + break ; <nl> + default : <nl> + throw new JsonParseException ( " Expected String or Array , got " + in . peek ( ) ) ; <nl> + } <nl> + } <nl> + in . endObject ( ) ; <nl> + return builder . build ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelanimation / asms / block / engine . json b / src / test / resources / assets / forgedebugmodelanimation / asms / block / engine . json <nl> index 8ee1f8c . . 558cb24 100644 <nl> - - - a / src / test / resources / assets / forgedebugmodelanimation / asms / block / engine . json <nl> + + + b / src / test / resources / assets / forgedebugmodelanimation / asms / block / engine . json <nl> @ @ - 18 , 7 + 18 , 7 @ @ <nl> ] , <nl> " transitions " : { <nl> " default " : " starting " , <nl> - " starting " : " moving " , <nl> + " starting " : [ " moving " ] , <nl> " moving " : " stopping " , <nl> " stopping " : " default " <nl> } ,
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / common / Configuration . java b / common / net / minecraftforge / common / Configuration . java <nl> index 839b032 . . 1bc04ca 100644 <nl> - - - a / common / net / minecraftforge / common / Configuration . java <nl> + + + b / common / net / minecraftforge / common / Configuration . java <nl> @ @ - 13 , 11 + 13 , 17 @ @ import java . util . Date ; <nl> import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . TreeMap ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> <nl> import com . google . common . base . CharMatcher ; <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . Maps ; <nl> <nl> + import cpw . mods . fml . common . FMLCommonHandler ; <nl> + import cpw . mods . fml . common . Loader ; <nl> + import cpw . mods . fml . relauncher . FMLInjectionData ; <nl> + <nl> import net . minecraft . src . Block ; <nl> import net . minecraft . src . Item ; <nl> import static net . minecraftforge . common . Property . Type . * ; <nl> @ @ - 37 , 28 + 43 , 47 @ @ public class Configuration <nl> public static final String CATEGORY _ ITEM = " item " ; <nl> public static final String ALLOWED _ CHARS = " . _ - " ; <nl> public static final String DEFAULT _ ENCODING = " UTF - 8 " ; <nl> + private static final Pattern CONFIG _ START = Pattern . compile ( " START : \ " ( [ ^ \ \ \ " ] + ) \ " " ) ; <nl> + private static final Pattern CONFIG _ END = Pattern . compile ( " END : \ " ( [ ^ \ \ \ " ] + ) \ " " ) ; <nl> private static final CharMatcher allowedProperties = CharMatcher . JAVA _ LETTER _ OR _ DIGIT . or ( CharMatcher . anyOf ( ALLOWED _ CHARS ) ) ; <nl> + private static Configuration PARENT = null ; <nl> <nl> File file ; <nl> <nl> public Map < String , Map < String , Property > > categories = new TreeMap < String , Map < String , Property > > ( ) ; <nl> + private Map < String , Configuration > children = new TreeMap < String , Configuration > ( ) ; <nl> <nl> private Map < String , String > customCategoryComments = Maps . newHashMap ( ) ; <nl> private boolean caseSensitiveCustomCategories ; <nl> public String defaultEncoding = DEFAULT _ ENCODING ; <nl> - <nl> + private String fileName = null ; <nl> + public boolean isChild = false ; <nl> + <nl> static <nl> { <nl> Arrays . fill ( configBlocks , false ) ; <nl> Arrays . fill ( configItems , false ) ; <nl> } <nl> <nl> + public Configuration ( ) { } <nl> + <nl> / * * <nl> * Create a configuration file for the file given in parameter . <nl> * / <nl> public Configuration ( File file ) <nl> { <nl> this . file = file ; <nl> + String basePath = ( ( File ) ( FMLInjectionData . data ( ) [ 6 ] ) ) . getAbsolutePath ( ) . replace ( File . separatorChar , ' / ' ) . replace ( " / . " , " " ) ; <nl> + String path = file . getAbsolutePath ( ) . replace ( File . separatorChar , ' / ' ) . replace ( " / . / " , " / " ) . replace ( basePath , " " ) ; <nl> + if ( PARENT ! = null ) <nl> + { <nl> + PARENT . setChild ( path , this ) ; <nl> + isChild = true ; <nl> + } <nl> + else <nl> + { <nl> + load ( ) ; <nl> + } <nl> } <nl> <nl> public Configuration ( File file , boolean caseSensitiveCustomCategories ) <nl> @ @ - 221 , 6 + 246 , 10 @ @ public class Configuration <nl> <nl> public void load ( ) <nl> { <nl> + if ( PARENT ! = null & & PARENT ! = this ) <nl> + { <nl> + return ; <nl> + } <nl> BufferedReader buffer = null ; <nl> try <nl> { <nl> @ @ - 252 , 6 + 281 , 26 @ @ public class Configuration <nl> break ; <nl> } <nl> <nl> + Matcher start = CONFIG _ START . matcher ( line ) ; <nl> + Matcher end = CONFIG _ END . matcher ( line ) ; <nl> + <nl> + if ( start . matches ( ) ) <nl> + { <nl> + fileName = start . group ( 1 ) ; <nl> + categories = new TreeMap < String , Map < String , Property > > ( ) ; <nl> + customCategoryComments = Maps . newHashMap ( ) ; <nl> + continue ; <nl> + } <nl> + else if ( end . matches ( ) ) <nl> + { <nl> + fileName = end . group ( 1 ) ; <nl> + Configuration child = new Configuration ( ) ; <nl> + child . categories = categories ; <nl> + child . customCategoryComments = customCategoryComments ; <nl> + this . children . put ( fileName , child ) ; <nl> + continue ; <nl> + } <nl> + <nl> int nameStart = - 1 , nameEnd = - 1 ; <nl> boolean skip = false ; <nl> boolean quoted = false ; <nl> @ @ - 352 , 6 + 401 , 12 @ @ public class Configuration <nl> <nl> public void save ( ) <nl> { <nl> + if ( PARENT ! = null & & PARENT ! = this ) <nl> + { <nl> + PARENT . save ( ) ; <nl> + return ; <nl> + } <nl> + <nl> try <nl> { <nl> if ( file . getParentFile ( ) ! = null ) <nl> @ @ - 373 , 31 + 428 , 18 @ @ public class Configuration <nl> buffer . write ( " # Generated on " + DateFormat . getInstance ( ) . format ( new Date ( ) ) + " \ r \ n " ) ; <nl> buffer . write ( " \ r \ n " ) ; <nl> <nl> - for ( Map . Entry < String , Map < String , Property > > category : categories . entrySet ( ) ) <nl> + if ( children . isEmpty ( ) ) <nl> { <nl> - buffer . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n " ) ; <nl> - buffer . write ( " # " + category . getKey ( ) + " \ r \ n " ) ; <nl> - if ( customCategoryComments . containsKey ( category . getKey ( ) ) ) <nl> - { <nl> - buffer . write ( " # = = = = = = = = = = = = = = = = = = = \ r \ n " ) ; <nl> - String comment = customCategoryComments . get ( category . getKey ( ) ) ; <nl> - Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; <nl> - for ( String commentLine : splitter . split ( comment ) ) <nl> - { <nl> - buffer . write ( " # " ) ; <nl> - buffer . write ( commentLine + " \ r \ n " ) ; <nl> - } <nl> - } <nl> - buffer . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n \ r \ n " ) ; <nl> - <nl> - String catKey = category . getKey ( ) ; <nl> - if ( ! allowedProperties . matchesAllOf ( catKey ) ) <nl> + save ( buffer ) ; <nl> + } <nl> + else <nl> + { <nl> + for ( Map . Entry < String , Configuration > entry : children . entrySet ( ) ) <nl> { <nl> - 	 catKey = ' " ' + catKey + ' " ' ; <nl> + buffer . write ( " START : \ " " + entry . getKey ( ) + " \ " \ r \ n " ) ; <nl> + entry . getValue ( ) . save ( buffer ) ; <nl> + buffer . write ( " END : \ " " + entry . getKey ( ) + " \ " \ r \ n \ r \ n " ) ; <nl> } <nl> - buffer . write ( catKey + " { \ r \ n " ) ; <nl> - writeProperties ( buffer , category . getValue ( ) . values ( ) ) ; <nl> - buffer . write ( " } \ r \ n \ r \ n " ) ; <nl> } <nl> <nl> buffer . close ( ) ; <nl> @ @ - 410 , 6 + 452 , 36 @ @ public class Configuration <nl> } <nl> } <nl> <nl> + private void save ( BufferedWriter out ) throws IOException <nl> + { <nl> + for ( Map . Entry < String , Map < String , Property > > category : categories . entrySet ( ) ) <nl> + { <nl> + out . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n " ) ; <nl> + out . write ( " # " + category . getKey ( ) + " \ r \ n " ) ; <nl> + if ( customCategoryComments . containsKey ( category . getKey ( ) ) ) <nl> + { <nl> + out . write ( " # = = = = = = = = = = = = = = = = = = = \ r \ n " ) ; <nl> + String comment = customCategoryComments . get ( category . getKey ( ) ) ; <nl> + Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; <nl> + for ( String commentLine : splitter . split ( comment ) ) <nl> + { <nl> + out . write ( " # " ) ; <nl> + out . write ( commentLine + " \ r \ n " ) ; <nl> + } <nl> + } <nl> + out . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n \ r \ n " ) ; <nl> + <nl> + String catKey = category . getKey ( ) ; <nl> + if ( ! allowedProperties . matchesAllOf ( catKey ) ) <nl> + { <nl> + catKey = ' " ' + catKey + ' " ' ; <nl> + } <nl> + out . write ( catKey + " { \ r \ n " ) ; <nl> + writeProperties ( out , category . getValue ( ) . values ( ) ) ; <nl> + out . write ( " } \ r \ n \ r \ n " ) ; <nl> + } <nl> + } <nl> + <nl> public void addCustomCategoryComment ( String category , String comment ) <nl> { <nl> if ( ! caseSensitiveCustomCategories ) <nl> @ @ - 439 , 6 + 511 , 27 @ @ public class Configuration <nl> } <nl> } <nl> <nl> + private void setChild ( String name , Configuration child ) <nl> + { <nl> + if ( ! children . containsKey ( name ) ) <nl> + { <nl> + children . put ( name , child ) ; <nl> + } <nl> + else <nl> + { <nl> + Configuration old = children . get ( name ) ; <nl> + child . categories = old . categories ; <nl> + child . customCategoryComments = old . customCategoryComments ; <nl> + child . fileName = old . fileName ; <nl> + } <nl> + } <nl> + <nl> + public static void enableGlobalConfig ( ) <nl> + { <nl> + PARENT = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " global . cfg " ) ) ; <nl> + PARENT . load ( ) ; <nl> + } <nl> + <nl> public static class UnicodeInputStreamReader extends Reader <nl> { <nl> private final InputStreamReader input ; <nl> diff - - git a / common / net / minecraftforge / common / ForgeDummyContainer . java b / common / net / minecraftforge / common / ForgeDummyContainer . java <nl> index bb7caae . . 24000ef 100644 <nl> - - - a / common / net / minecraftforge / common / ForgeDummyContainer . java <nl> + + + b / common / net / minecraftforge / common / ForgeDummyContainer . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> + import java . io . File ; <nl> import java . util . Arrays ; <nl> import java . util . Map ; <nl> <nl> @ @ - 39 , 6 + 40 , 18 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces <nl> meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; <nl> meta . screenshots = new String [ 0 ] ; <nl> meta . logoFile = " / forge _ logo . png " ; <nl> + <nl> + Configuration config = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ) ; <nl> + if ( ! config . isChild ) <nl> + { <nl> + config . load ( ) ; <nl> + Property enableGlobalCfg = config . get ( Configuration . CATEGORY _ GENERAL , " enableGlobalConfig " , false ) ; <nl> + if ( enableGlobalCfg . getBoolean ( false ) ) <nl> + { <nl> + Configuration . enableGlobalConfig ( ) ; <nl> + } <nl> + config . save ( ) ; <nl> + } <nl> } <nl> <nl> @ Override <nl> @ @ - 53 , 6 + 66 , 7 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces <nl> { <nl> ForgeChunkManager . captureConfig ( evt . getModConfigurationDirectory ( ) ) ; <nl> } <nl> + <nl> @ Subscribe <nl> public void postInit ( FMLPostInitializationEvent evt ) <nl> {

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / animation / TimeValues . java b / src / main / java / net / minecraftforge / common / animation / TimeValues . java 
 index 7481138 . . d1a2b7e 100644 
 - - - a / src / main / java / net / minecraftforge / common / animation / TimeValues . java 
 + + + b / src / main / java / net / minecraftforge / common / animation / TimeValues . java 
 @ @ - 332 , 7 + 332 , 7 @ @ public final class TimeValues 
 if ( SimpleExprValue . opsPattern . matcher ( type ) . matches ( ) ) 
 { 
 ImmutableList . Builder < ITimeValue > builder = ImmutableList . builder ( ) ; 
 - while ( in . peek ( ) ! = JsonToken . END _ ARRAY ) 
 + while ( in . hasNext ( ) ) 
 { 
 builder . add ( read ( in ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java 
 index 6418b0c . . c7c1ef8 100644 
 - - - a / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java 
 + + + b / src / main / java / net / minecraftforge / common / model / animation / AnimationStateMachine . java 
 @ @ - 2 , 8 + 2 , 19 @ @ package net . minecraftforge . common . model . animation ; 
 
 import java . io . IOException ; 
 import java . io . InputStreamReader ; 
 + import java . lang . reflect . ParameterizedType ; 
 + import java . lang . reflect . Type ; 
 + import java . util . Collection ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . concurrent . TimeUnit ; 
 
 + import com . google . common . base . Supplier ; 
 + import com . google . common . collect . * ; 
 + import com . google . gson . * ; 
 + import com . google . gson . reflect . TypeToken ; 
 + import com . google . gson . stream . JsonReader ; 
 + import com . google . gson . stream . JsonWriter ; 
 import net . minecraft . client . resources . IResource ; 
 import net . minecraft . client . resources . IResourceManager ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 25 , 12 + 36 , 6 @ @ import com . google . common . base . Predicate ; 
 import com . google . common . cache . CacheBuilder ; 
 import com . google . common . cache . CacheLoader ; 
 import com . google . common . cache . LoadingCache ; 
 - import com . google . common . collect . ImmutableList ; 
 - import com . google . common . collect . ImmutableMap ; 
 - import com . google . common . collect . Iterables ; 
 - import com . google . gson . Gson ; 
 - import com . google . gson . GsonBuilder ; 
 - import com . google . gson . JsonParseException ; 
 import com . google . gson . annotations . SerializedName ; 
 
 public final class AnimationStateMachine implements IAnimationStateMachine 
 @ @ - 38 , 7 + 43 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine 
 private final ImmutableMap < String , ITimeValue > parameters ; 
 private final ImmutableMap < String , IClip > clips ; 
 private final ImmutableList < String > states ; 
 - private final ImmutableMap < String , String > transitions ; 
 + private final ImmutableMultimap < String , String > transitions ; 
 @ SerializedName ( " start _ state " ) 
 private final String startState ; 
 
 @ @ - 58 , 8 + 63 , 26 @ @ public final class AnimationStateMachine implements IAnimationStateMachine 
 } 
 } ) ; 
 
 + @ Deprecated 
 public AnimationStateMachine ( ImmutableMap < String , ITimeValue > parameters , ImmutableMap < String , IClip > clips , ImmutableList < String > states , ImmutableMap < String , String > transitions , String startState ) 
 { 
 + this ( parameters , clips , states , ImmutableMultimap . copyOf ( Multimaps . newSetMultimap ( Maps . transformValues ( transitions , new Function < String , Collection < String > > ( ) 
 + { 
 + public Collection < String > apply ( String input ) 
 + { 
 + return ImmutableSet . of ( input ) ; 
 + } 
 + } ) , new Supplier < Set < String > > ( ) 
 + { 
 + public Set < String > get ( ) 
 + { 
 + return Sets . newHashSet ( ) ; 
 + } 
 + } ) ) , startState ) ; 
 + } 
 + 
 + public AnimationStateMachine ( ImmutableMap < String , ITimeValue > parameters , ImmutableMap < String , IClip > clips , ImmutableList < String > states , ImmutableMultimap < String , String > transitions , String startState ) 
 + { 
 this . parameters = parameters ; 
 this . clips = clips ; 
 this . states = states ; 
 @ @ - 148 , 7 + 171 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine 
 { 
 throw new IllegalStateException ( " unknown state : " + newState ) ; 
 } 
 - if ( ! transitions . get ( currentStateName ) . equals ( newState ) ) 
 + if ( ! transitions . containsEntry ( currentStateName , newState ) ) 
 { 
 throw new IllegalArgumentException ( " no transition from current clip \ " " + currentStateName + " \ " to the clip \ " " + newState + " \ " found . " ) ; 
 } 
 @ @ - 208 , 7 + 231 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine 
 ImmutableMap . < String , ITimeValue > of ( ) , 
 ImmutableMap . of ( " missingno " , ( IClip ) Clips . IdentityClip . INSTANCE ) , 
 ImmutableList . of ( " missingno " ) , 
 - ImmutableMap . < String , String > of ( ) , 
 + ImmutableMultimap . < String , String > of ( ) , 
 " missingno " ) ; 
 
 static 
 @ @ - 216 , 7 + 239 , 7 @ @ public final class AnimationStateMachine implements IAnimationStateMachine 
 missing . initialize ( ) ; 
 } 
 
 - public static final AnimationStateMachine getMissing ( ) 
 + public static AnimationStateMachine getMissing ( ) 
 { 
 return missing ; 
 } 
 @ @ - 257 , 8 + 280 , 62 @ @ public final class AnimationStateMachine implements IAnimationStateMachine 
 . registerTypeAdapterFactory ( Clips . CommonClipTypeAdapterFactory . INSTANCE ) 
 / / . registerTypeAdapterFactory ( ClipProviders . CommonClipProviderTypeAdapterFactory . INSTANCE ) 
 . registerTypeAdapterFactory ( TimeValues . CommonTimeValueTypeAdapterFactory . INSTANCE ) 
 + . registerTypeAdapterFactory ( TransitionsAdapterFactory . INSTANCE ) 
 . setPrettyPrinting ( ) 
 . enableComplexMapKeySerialization ( ) 
 . disableHtmlEscaping ( ) 
 . create ( ) ; 
 + 
 + private enum TransitionsAdapterFactory implements TypeAdapterFactory 
 + { 
 + INSTANCE ; 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + public < T > TypeAdapter < T > create ( Gson gson , TypeToken < T > type ) 
 + { 
 + if ( type . getRawType ( ) ! = ImmutableMultimap . class | | ! ( type . getType ( ) instanceof ParameterizedType ) ) 
 + { 
 + return null ; 
 + } 
 + final Type [ ] typeArguments = ( ( ParameterizedType ) type . getType ( ) ) . getActualTypeArguments ( ) ; 
 + if ( typeArguments . length ! = 2 | | typeArguments [ 0 ] ! = String . class | | typeArguments [ 1 ] ! = String . class ) 
 + { 
 + return null ; 
 + } 
 + final TypeAdapter < Map < String , Collection < String > > > mapAdapter = gson . getAdapter ( new TypeToken < Map < String , Collection < String > > > ( ) { } ) ; 
 + final TypeAdapter < Collection < String > > collectionAdapter = gson . getAdapter ( new TypeToken < Collection < String > > ( ) { } ) ; 
 + return ( TypeAdapter < T > ) new TypeAdapter < ImmutableMultimap < String , String > > ( ) 
 + { 
 + @ Override 
 + public void write ( JsonWriter out , ImmutableMultimap < String , String > value ) throws IOException 
 + { 
 + mapAdapter . write ( out , value . asMap ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public ImmutableMultimap < String , String > read ( JsonReader in ) throws IOException 
 + { 
 + ImmutableMultimap . Builder < String , String > builder = ImmutableMultimap . builder ( ) ; 
 + in . beginObject ( ) ; 
 + while ( in . hasNext ( ) ) 
 + { 
 + String key = in . nextName ( ) ; 
 + switch ( in . peek ( ) ) 
 + { 
 + case STRING : 
 + builder . put ( key , in . nextString ( ) ) ; 
 + break ; 
 + case BEGIN _ ARRAY : 
 + builder . putAll ( key , collectionAdapter . read ( in ) ) ; 
 + break ; 
 + default : 
 + throw new JsonParseException ( " Expected String or Array , got " + in . peek ( ) ) ; 
 + } 
 + } 
 + in . endObject ( ) ; 
 + return builder . build ( ) ; 
 + } 
 + } ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / resources / assets / forgedebugmodelanimation / asms / block / engine . json b / src / test / resources / assets / forgedebugmodelanimation / asms / block / engine . json 
 index 8ee1f8c . . 558cb24 100644 
 - - - a / src / test / resources / assets / forgedebugmodelanimation / asms / block / engine . json 
 + + + b / src / test / resources / assets / forgedebugmodelanimation / asms / block / engine . json 
 @ @ - 18 , 7 + 18 , 7 @ @ 
 ] , 
 " transitions " : { 
 " default " : " starting " , 
 - " starting " : " moving " , 
 + " starting " : [ " moving " ] , 
 " moving " : " stopping " , 
 " stopping " : " default " 
 } ,

NEAREST DIFF:
diff - - git a / common / net / minecraftforge / common / Configuration . java b / common / net / minecraftforge / common / Configuration . java 
 index 839b032 . . 1bc04ca 100644 
 - - - a / common / net / minecraftforge / common / Configuration . java 
 + + + b / common / net / minecraftforge / common / Configuration . java 
 @ @ - 13 , 11 + 13 , 17 @ @ import java . util . Date ; 
 import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . TreeMap ; 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 
 import com . google . common . base . CharMatcher ; 
 import com . google . common . base . Splitter ; 
 import com . google . common . collect . Maps ; 
 
 + import cpw . mods . fml . common . FMLCommonHandler ; 
 + import cpw . mods . fml . common . Loader ; 
 + import cpw . mods . fml . relauncher . FMLInjectionData ; 
 + 
 import net . minecraft . src . Block ; 
 import net . minecraft . src . Item ; 
 import static net . minecraftforge . common . Property . Type . * ; 
 @ @ - 37 , 28 + 43 , 47 @ @ public class Configuration 
 public static final String CATEGORY _ ITEM = " item " ; 
 public static final String ALLOWED _ CHARS = " . _ - " ; 
 public static final String DEFAULT _ ENCODING = " UTF - 8 " ; 
 + private static final Pattern CONFIG _ START = Pattern . compile ( " START : \ " ( [ ^ \ \ \ " ] + ) \ " " ) ; 
 + private static final Pattern CONFIG _ END = Pattern . compile ( " END : \ " ( [ ^ \ \ \ " ] + ) \ " " ) ; 
 private static final CharMatcher allowedProperties = CharMatcher . JAVA _ LETTER _ OR _ DIGIT . or ( CharMatcher . anyOf ( ALLOWED _ CHARS ) ) ; 
 + private static Configuration PARENT = null ; 
 
 File file ; 
 
 public Map < String , Map < String , Property > > categories = new TreeMap < String , Map < String , Property > > ( ) ; 
 + private Map < String , Configuration > children = new TreeMap < String , Configuration > ( ) ; 
 
 private Map < String , String > customCategoryComments = Maps . newHashMap ( ) ; 
 private boolean caseSensitiveCustomCategories ; 
 public String defaultEncoding = DEFAULT _ ENCODING ; 
 - 
 + private String fileName = null ; 
 + public boolean isChild = false ; 
 + 
 static 
 { 
 Arrays . fill ( configBlocks , false ) ; 
 Arrays . fill ( configItems , false ) ; 
 } 
 
 + public Configuration ( ) { } 
 + 
 / * * 
 * Create a configuration file for the file given in parameter . 
 * / 
 public Configuration ( File file ) 
 { 
 this . file = file ; 
 + String basePath = ( ( File ) ( FMLInjectionData . data ( ) [ 6 ] ) ) . getAbsolutePath ( ) . replace ( File . separatorChar , ' / ' ) . replace ( " / . " , " " ) ; 
 + String path = file . getAbsolutePath ( ) . replace ( File . separatorChar , ' / ' ) . replace ( " / . / " , " / " ) . replace ( basePath , " " ) ; 
 + if ( PARENT ! = null ) 
 + { 
 + PARENT . setChild ( path , this ) ; 
 + isChild = true ; 
 + } 
 + else 
 + { 
 + load ( ) ; 
 + } 
 } 
 
 public Configuration ( File file , boolean caseSensitiveCustomCategories ) 
 @ @ - 221 , 6 + 246 , 10 @ @ public class Configuration 
 
 public void load ( ) 
 { 
 + if ( PARENT ! = null & & PARENT ! = this ) 
 + { 
 + return ; 
 + } 
 BufferedReader buffer = null ; 
 try 
 { 
 @ @ - 252 , 6 + 281 , 26 @ @ public class Configuration 
 break ; 
 } 
 
 + Matcher start = CONFIG _ START . matcher ( line ) ; 
 + Matcher end = CONFIG _ END . matcher ( line ) ; 
 + 
 + if ( start . matches ( ) ) 
 + { 
 + fileName = start . group ( 1 ) ; 
 + categories = new TreeMap < String , Map < String , Property > > ( ) ; 
 + customCategoryComments = Maps . newHashMap ( ) ; 
 + continue ; 
 + } 
 + else if ( end . matches ( ) ) 
 + { 
 + fileName = end . group ( 1 ) ; 
 + Configuration child = new Configuration ( ) ; 
 + child . categories = categories ; 
 + child . customCategoryComments = customCategoryComments ; 
 + this . children . put ( fileName , child ) ; 
 + continue ; 
 + } 
 + 
 int nameStart = - 1 , nameEnd = - 1 ; 
 boolean skip = false ; 
 boolean quoted = false ; 
 @ @ - 352 , 6 + 401 , 12 @ @ public class Configuration 
 
 public void save ( ) 
 { 
 + if ( PARENT ! = null & & PARENT ! = this ) 
 + { 
 + PARENT . save ( ) ; 
 + return ; 
 + } 
 + 
 try 
 { 
 if ( file . getParentFile ( ) ! = null ) 
 @ @ - 373 , 31 + 428 , 18 @ @ public class Configuration 
 buffer . write ( " # Generated on " + DateFormat . getInstance ( ) . format ( new Date ( ) ) + " \ r \ n " ) ; 
 buffer . write ( " \ r \ n " ) ; 
 
 - for ( Map . Entry < String , Map < String , Property > > category : categories . entrySet ( ) ) 
 + if ( children . isEmpty ( ) ) 
 { 
 - buffer . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n " ) ; 
 - buffer . write ( " # " + category . getKey ( ) + " \ r \ n " ) ; 
 - if ( customCategoryComments . containsKey ( category . getKey ( ) ) ) 
 - { 
 - buffer . write ( " # = = = = = = = = = = = = = = = = = = = \ r \ n " ) ; 
 - String comment = customCategoryComments . get ( category . getKey ( ) ) ; 
 - Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; 
 - for ( String commentLine : splitter . split ( comment ) ) 
 - { 
 - buffer . write ( " # " ) ; 
 - buffer . write ( commentLine + " \ r \ n " ) ; 
 - } 
 - } 
 - buffer . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n \ r \ n " ) ; 
 - 
 - String catKey = category . getKey ( ) ; 
 - if ( ! allowedProperties . matchesAllOf ( catKey ) ) 
 + save ( buffer ) ; 
 + } 
 + else 
 + { 
 + for ( Map . Entry < String , Configuration > entry : children . entrySet ( ) ) 
 { 
 - 	 catKey = ' " ' + catKey + ' " ' ; 
 + buffer . write ( " START : \ " " + entry . getKey ( ) + " \ " \ r \ n " ) ; 
 + entry . getValue ( ) . save ( buffer ) ; 
 + buffer . write ( " END : \ " " + entry . getKey ( ) + " \ " \ r \ n \ r \ n " ) ; 
 } 
 - buffer . write ( catKey + " { \ r \ n " ) ; 
 - writeProperties ( buffer , category . getValue ( ) . values ( ) ) ; 
 - buffer . write ( " } \ r \ n \ r \ n " ) ; 
 } 
 
 buffer . close ( ) ; 
 @ @ - 410 , 6 + 452 , 36 @ @ public class Configuration 
 } 
 } 
 
 + private void save ( BufferedWriter out ) throws IOException 
 + { 
 + for ( Map . Entry < String , Map < String , Property > > category : categories . entrySet ( ) ) 
 + { 
 + out . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n " ) ; 
 + out . write ( " # " + category . getKey ( ) + " \ r \ n " ) ; 
 + if ( customCategoryComments . containsKey ( category . getKey ( ) ) ) 
 + { 
 + out . write ( " # = = = = = = = = = = = = = = = = = = = \ r \ n " ) ; 
 + String comment = customCategoryComments . get ( category . getKey ( ) ) ; 
 + Splitter splitter = Splitter . onPattern ( " \ r ? \ n " ) ; 
 + for ( String commentLine : splitter . split ( comment ) ) 
 + { 
 + out . write ( " # " ) ; 
 + out . write ( commentLine + " \ r \ n " ) ; 
 + } 
 + } 
 + out . write ( " # # # # # # # # # # # # # # # # # # # # \ r \ n \ r \ n " ) ; 
 + 
 + String catKey = category . getKey ( ) ; 
 + if ( ! allowedProperties . matchesAllOf ( catKey ) ) 
 + { 
 + catKey = ' " ' + catKey + ' " ' ; 
 + } 
 + out . write ( catKey + " { \ r \ n " ) ; 
 + writeProperties ( out , category . getValue ( ) . values ( ) ) ; 
 + out . write ( " } \ r \ n \ r \ n " ) ; 
 + } 
 + } 
 + 
 public void addCustomCategoryComment ( String category , String comment ) 
 { 
 if ( ! caseSensitiveCustomCategories ) 
 @ @ - 439 , 6 + 511 , 27 @ @ public class Configuration 
 } 
 } 
 
 + private void setChild ( String name , Configuration child ) 
 + { 
 + if ( ! children . containsKey ( name ) ) 
 + { 
 + children . put ( name , child ) ; 
 + } 
 + else 
 + { 
 + Configuration old = children . get ( name ) ; 
 + child . categories = old . categories ; 
 + child . customCategoryComments = old . customCategoryComments ; 
 + child . fileName = old . fileName ; 
 + } 
 + } 
 + 
 + public static void enableGlobalConfig ( ) 
 + { 
 + PARENT = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " global . cfg " ) ) ; 
 + PARENT . load ( ) ; 
 + } 
 + 
 public static class UnicodeInputStreamReader extends Reader 
 { 
 private final InputStreamReader input ; 
 diff - - git a / common / net / minecraftforge / common / ForgeDummyContainer . java b / common / net / minecraftforge / common / ForgeDummyContainer . java 
 index bb7caae . . 24000ef 100644 
 - - - a / common / net / minecraftforge / common / ForgeDummyContainer . java 
 + + + b / common / net / minecraftforge / common / ForgeDummyContainer . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package net . minecraftforge . common ; 
 
 + import java . io . File ; 
 import java . util . Arrays ; 
 import java . util . Map ; 
 
 @ @ - 39 , 6 + 40 , 18 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces 
 meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; 
 meta . screenshots = new String [ 0 ] ; 
 meta . logoFile = " / forge _ logo . png " ; 
 + 
 + Configuration config = new Configuration ( new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ) ; 
 + if ( ! config . isChild ) 
 + { 
 + config . load ( ) ; 
 + Property enableGlobalCfg = config . get ( Configuration . CATEGORY _ GENERAL , " enableGlobalConfig " , false ) ; 
 + if ( enableGlobalCfg . getBoolean ( false ) ) 
 + { 
 + Configuration . enableGlobalConfig ( ) ; 
 + } 
 + config . save ( ) ; 
 + } 
 } 
 
 @ Override 
 @ @ - 53 , 6 + 66 , 7 @ @ public class ForgeDummyContainer extends DummyModContainer implements WorldAcces 
 { 
 ForgeChunkManager . captureConfig ( evt . getModConfigurationDirectory ( ) ) ; 
 } 
 + 
 @ Subscribe 
 public void postInit ( FMLPostInitializationEvent evt ) 
 {
