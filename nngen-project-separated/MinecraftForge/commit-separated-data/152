BLEU SCORE: 0.017820934647025707

TEST MSG: FastTESR - > TileEntityRendererFast
GENERATED MSG: Fix most of the compile errors in the client package

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java <nl> index 152886f . . 2781168 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ import org . apache . commons . lang3 . tuple . Pair ; <nl> / * * <nl> * Generic TileEntitySpecialRenderer that works with the Forge model system and animations . <nl> * / <nl> - public class AnimationTESR < T extends TileEntity > extends FastTESR < T > implements IEventHandler < T > <nl> + public class AnimationTESR < T extends TileEntity > extends TileEntityRendererFast < T > implements IEventHandler < T > <nl> { <nl> protected static BlockRendererDispatcher blockRenderer ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / FastTESR . java b / src / main / java / net / minecraftforge / client / model / animation / FastTESR . java <nl> deleted file mode 100644 <nl> index be1b054 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / FastTESR . java <nl> + + + / dev / null <nl> @ @ - 1 , 68 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2018 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . client . model . animation ; <nl> - <nl> - import org . lwjgl . opengl . GL11 ; <nl> - <nl> - import net . minecraft . client . Minecraft ; <nl> - import net . minecraft . client . renderer . GlStateManager ; <nl> - import net . minecraft . client . renderer . RenderHelper ; <nl> - import net . minecraft . client . renderer . Tessellator ; <nl> - import net . minecraft . client . renderer . BufferBuilder ; <nl> - import net . minecraft . client . renderer . texture . TextureMap ; <nl> - import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; <nl> - import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> - import net . minecraft . tileentity . TileEntity ; <nl> - <nl> - public abstract class FastTESR < T extends TileEntity > extends TileEntityRenderer < T > <nl> - { <nl> - @ Override <nl> - public final void render ( T te , double x , double y , double z , float partialTicks , int destroyStage ) <nl> - { <nl> - Tessellator tessellator = Tessellator . getInstance ( ) ; <nl> - BufferBuilder buffer = tessellator . getBuffer ( ) ; <nl> - this . bindTexture ( TextureMap . LOCATION _ BLOCKS _ TEXTURE ) ; <nl> - RenderHelper . disableStandardItemLighting ( ) ; <nl> - GlStateManager . blendFunc ( GL11 . GL _ SRC _ ALPHA , GL11 . GL _ ONE _ MINUS _ SRC _ ALPHA ) ; <nl> - GlStateManager . enableBlend ( ) ; <nl> - GlStateManager . disableCull ( ) ; <nl> - <nl> - if ( Minecraft . isAmbientOcclusionEnabled ( ) ) <nl> - { <nl> - GlStateManager . shadeModel ( GL11 . GL _ SMOOTH ) ; <nl> - } <nl> - else <nl> - { <nl> - GlStateManager . shadeModel ( GL11 . GL _ FLAT ) ; <nl> - } <nl> - <nl> - buffer . begin ( GL11 . GL _ QUADS , DefaultVertexFormats . BLOCK ) ; <nl> - <nl> - renderTileEntityFast ( te , x , y , z , partialTicks , destroyStage , buffer ) ; <nl> - buffer . setTranslation ( 0 , 0 , 0 ) ; <nl> - <nl> - tessellator . draw ( ) ; <nl> - <nl> - RenderHelper . enableStandardItemLighting ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public abstract void renderTileEntityFast ( T te , double x , double y , double z , float partialTicks , int destroyStage , BufferBuilder buffer ) ; <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java <nl> new file mode 100644 <nl> index 0000000 . . 1d4d78b <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java <nl> @ @ - 0 , 0 + 1 , 68 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . client . model . animation ; <nl> + <nl> + import org . lwjgl . opengl . GL11 ; <nl> + <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . GlStateManager ; <nl> + import net . minecraft . client . renderer . RenderHelper ; <nl> + import net . minecraft . client . renderer . Tessellator ; <nl> + import net . minecraft . client . renderer . BufferBuilder ; <nl> + import net . minecraft . client . renderer . texture . TextureMap ; <nl> + import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; <nl> + import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> + import net . minecraft . tileentity . TileEntity ; <nl> + <nl> + public abstract class TileEntityRendererFast < T extends TileEntity > extends TileEntityRenderer < T > <nl> + { <nl> + @ Override <nl> + public final void render ( T te , double x , double y , double z , float partialTicks , int destroyStage ) <nl> + { <nl> + Tessellator tessellator = Tessellator . getInstance ( ) ; <nl> + BufferBuilder buffer = tessellator . getBuffer ( ) ; <nl> + this . bindTexture ( TextureMap . LOCATION _ BLOCKS _ TEXTURE ) ; <nl> + RenderHelper . disableStandardItemLighting ( ) ; <nl> + GlStateManager . blendFunc ( GL11 . GL _ SRC _ ALPHA , GL11 . GL _ ONE _ MINUS _ SRC _ ALPHA ) ; <nl> + GlStateManager . enableBlend ( ) ; <nl> + GlStateManager . disableCull ( ) ; <nl> + <nl> + if ( Minecraft . isAmbientOcclusionEnabled ( ) ) <nl> + { <nl> + GlStateManager . shadeModel ( GL11 . GL _ SMOOTH ) ; <nl> + } <nl> + else <nl> + { <nl> + GlStateManager . shadeModel ( GL11 . GL _ FLAT ) ; <nl> + } <nl> + <nl> + buffer . begin ( GL11 . GL _ QUADS , DefaultVertexFormats . BLOCK ) ; <nl> + <nl> + renderTileEntityFast ( te , x , y , z , partialTicks , destroyStage , buffer ) ; <nl> + buffer . setTranslation ( 0 , 0 , 0 ) ; <nl> + <nl> + tessellator . draw ( ) ; <nl> + <nl> + RenderHelper . enableStandardItemLighting ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public abstract void renderTileEntityFast ( T te , double x , double y , double z , float partialTicks , int destroyStage , BufferBuilder buffer ) ; <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch b / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch <nl> new file mode 100644 <nl> index 0000000 . . b39501f3 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + - - - a / net / minecraft / client / settings / KeyBinding . java <nl> + + + + b / net / minecraft / client / settings / KeyBinding . java <nl> + @ @ - 163 , 4 + 163 , 9 @ @ <nl> + public String func _ 197982 _ m ( ) { <nl> + return this . keyCode . func _ 197935 _ d ( ) ; <nl> + } <nl> + + <nl> + + public InputMappings . Input getKey ( ) <nl> + + { <nl> + + return this . keyCode ; <nl> + + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / world / dimension / Dimension . java . patch b / patches / minecraft / net / minecraft / world / dimension / Dimension . java . patch <nl> index 421ea78 . . 064d2a5 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / dimension / Dimension . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / dimension / Dimension . java . patch <nl> @ @ - 9 , 3 + 9 , 58 @ @ <nl> public static final float [ ] MOON _ PHASE _ FACTORS = new float [ ] { 1 . 0F , 0 . 75F , 0 . 5F , 0 . 25F , 0 . 0F , 0 . 25F , 0 . 5F , 0 . 75F } ; <nl> protected World world ; <nl> protected boolean doesWaterVaporize ; <nl> + @ @ - 141 , 4 + 141 , 54 @ @ <nl> + public abstract boolean doesXZShowFog ( int x , int z ) ; <nl> + <nl> + public abstract DimensionType getDimensionType ( ) ; <nl> + + <nl> + + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = Forge Start = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + + private net . minecraftforge . client . IRenderHandler skyRenderer = null ; <nl> + + private net . minecraftforge . client . IRenderHandler cloudRenderer = null ; <nl> + + private net . minecraftforge . client . IRenderHandler weatherRenderer = null ; <nl> + + <nl> + + @ Nullable <nl> + + @ OnlyIn ( Dist . CLIENT ) <nl> + + @ Override <nl> + + public net . minecraftforge . client . IRenderHandler getSkyRenderer ( ) <nl> + + { <nl> + + return this . skyRenderer ; <nl> + + } <nl> + + <nl> + + @ OnlyIn ( Dist . CLIENT ) <nl> + + @ Override <nl> + + public void setSkyRenderer ( net . minecraftforge . client . IRenderHandler skyRenderer ) <nl> + + { <nl> + + this . skyRenderer = skyRenderer ; <nl> + + } <nl> + + <nl> + + @ Nullable <nl> + + @ OnlyIn ( Dist . CLIENT ) <nl> + + @ Override <nl> + + public net . minecraftforge . client . IRenderHandler getCloudRenderer ( ) <nl> + + { <nl> + + return cloudRenderer ; <nl> + + } <nl> + + <nl> + + @ OnlyIn ( Dist . CLIENT ) <nl> + + @ Override <nl> + + public void setCloudRenderer ( net . minecraftforge . client . IRenderHandler renderer ) <nl> + + { <nl> + + cloudRenderer = renderer ; <nl> + + } <nl> + + <nl> + + @ Nullable <nl> + + @ OnlyIn ( Dist . CLIENT ) <nl> + + @ Override <nl> + + public net . minecraftforge . client . IRenderHandler getWeatherRenderer ( ) <nl> + + { <nl> + + return weatherRenderer ; <nl> + + } <nl> + + <nl> + + @ OnlyIn ( Dist . CLIENT ) <nl> + + @ Override <nl> + + public void setWeatherRenderer ( net . minecraftforge . client . IRenderHandler renderer ) <nl> + + { <nl> + + weatherRenderer = renderer ; <nl> + + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / FluidContainerColorer . java b / src / main / java / net / minecraftforge / client / FluidContainerColorer . java <nl> index bf10b2f . . 1f41a2f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / FluidContainerColorer . java <nl> + + + b / src / main / java / net / minecraftforge / client / FluidContainerColorer . java <nl> @ @ - 19 , 21 + 19 , 20 @ @ <nl> <nl> package net . minecraftforge . client ; <nl> <nl> + import javax . annotation . Nonnull ; <nl> + <nl> import net . minecraft . client . renderer . color . IItemColor ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraftforge . fluids . FluidStack ; <nl> import net . minecraftforge . fluids . FluidUtil ; <nl> <nl> - import javax . annotation . Nonnull ; <nl> - <nl> public class FluidContainerColorer implements IItemColor <nl> { <nl> @ Override <nl> public int getColor ( @ Nonnull ItemStack stack , int tintIndex ) <nl> { <nl> if ( tintIndex ! = 1 ) return 0xFFFFFFFF ; <nl> - FluidStack fluidStack = FluidUtil . getFluidContained ( stack ) ; <nl> - if ( fluidStack = = null ) return 0xFFFFFFFF ; <nl> - return fluidStack . getFluid ( ) . getColor ( fluidStack ) ; <nl> + return FluidUtil . getFluidContained ( stack ) <nl> + . map ( fstack - > fstack . getFluid ( ) . getColor ( fstack ) ) <nl> + . orElse ( 0xFFFFFFFF ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 66b2cac . . c4863a1 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import java . nio . ByteBuffer ; <nl> import java . nio . FloatBuffer ; <nl> import java . util . Map ; <nl> import java . util . Optional ; <nl> + import java . util . Random ; <nl> import java . util . function . Predicate ; <nl> <nl> import javax . annotation . Nonnull ; <nl> @ @ - 54 , 6 + 55 , 7 @ @ import net . minecraft . client . renderer . BlockRendererDispatcher ; <nl> import net . minecraft . client . renderer . BufferBuilder ; <nl> import net . minecraft . client . renderer . EntityRenderer ; <nl> import net . minecraft . client . renderer . GlStateManager ; <nl> + import net . minecraft . client . renderer . ItemRenderer ; <nl> import net . minecraft . client . renderer . OpenGlHelper ; <nl> import net . minecraft . client . renderer . RenderGlobal ; <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> @ @ - 71 , 6 + 73 , 7 @ @ import net . minecraft . client . renderer . entity . model . ModelBiped ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . texture . TextureManager ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> + import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; <nl> import net . minecraft . client . renderer . tileentity . TileEntityRendererDispatcher ; <nl> import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> import net . minecraft . client . renderer . vertex . VertexFormatElement ; <nl> @ @ - 87 , 6 + 90 , 7 @ @ import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . inventory . EntityEquipmentSlot ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . resources . IResourceManagerReloadListener ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> import net . minecraft . util . BlockRenderLayer ; <nl> import net . minecraft . util . EnumFacing ; <nl> @ @ - 131 , 12 + 135 , 17 @ @ import net . minecraftforge . fml . VersionChecker ; <nl> import net . minecraftforge . fml . client . registry . ClientRegistry ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> import org . lwjgl . BufferUtils ; <nl> + import org . lwjgl . opengl . GL11 ; <nl> <nl> import com . google . common . collect . Maps ; <nl> <nl> public class ForgeHooksClient <nl> { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + <nl> / / private static final ResourceLocation ITEM _ GLINT = new ResourceLocation ( " textures / misc / enchanted _ item _ glint . png " ) ; <nl> <nl> public static String getArmorTexture ( Entity entity , ItemStack armor , String _ default , EntityEquipmentSlot slot , String type ) <nl> @ @ - 181 , 7 + 190 , 7 @ @ public class ForgeHooksClient <nl> public static void onTextureStitchedPre ( TextureMap map ) <nl> { <nl> MinecraftForge . EVENT _ BUS . post ( new TextureStitchEvent . Pre ( map ) ) ; <nl> - ModelLoader . White . INSTANCE . register ( map ) ; <nl> + / / ModelLoader . White . INSTANCE . register ( map ) ; / / TODO Custom TAS <nl> ModelDynBucket . LoaderDynBucket . INSTANCE . register ( map ) ; <nl> } <nl> <nl> @ @ - 239 , 12 + 248 , 12 @ @ public class ForgeHooksClient <nl> return base + name ; <nl> } <nl> } <nl> - <nl> + / * TODO mouse input <nl> public static boolean postMouseEvent ( ) <nl> { <nl> return MinecraftForge . EVENT _ BUS . post ( new MouseEvent ( ) ) ; <nl> } <nl> - <nl> + * / <nl> public static float getOffsetFOV ( EntityPlayer entity , float fov ) <nl> { <nl> FOVUpdateEvent fovUpdateEvent = new FOVUpdateEvent ( entity , fov ) ; <nl> @ @ - 446 , 7 + 455 , 7 @ @ public class ForgeHooksClient <nl> matrixBuf . put ( t ) ; <nl> } <nl> matrixBuf . flip ( ) ; <nl> - glMultMatrix ( matrixBuf ) ; <nl> + glMultMatrixf ( matrixBuf ) ; <nl> } <nl> <nl> / / moved and expanded from WorldVertexBufferUploader . draw <nl> @ @ - 487 , 7 + 496 , 7 @ @ public class ForgeHooksClient <nl> glEnableVertexAttribArray ( attr . getIndex ( ) ) ; <nl> glVertexAttribPointer ( attr . getIndex ( ) , count , constant , false , stride , buffer ) ; <nl> default : <nl> - FMLLog . log . fatal ( " Unimplemented vanilla attribute upload : { } " , attrType . getDisplayName ( ) ) ; <nl> + LOGGER . fatal ( " Unimplemented vanilla attribute upload : { } " , attrType . getDisplayName ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 517 , 7 + 526 , 7 @ @ public class ForgeHooksClient <nl> case GENERIC : <nl> glDisableVertexAttribArray ( attr . getIndex ( ) ) ; <nl> default : <nl> - FMLLog . log . fatal ( " Unimplemented vanilla attribute upload : { } " , attrType . getDisplayName ( ) ) ; <nl> + LOGGER . fatal ( " Unimplemented vanilla attribute upload : { } " , attrType . getDisplayName ( ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 572 , 10 + 581 , 10 @ @ public class ForgeHooksClient <nl> Class < ? extends TileEntity > tileClass = tileItemMap . get ( Pair . of ( item , metadata ) ) ; <nl> if ( tileClass ! = null ) <nl> { <nl> - TileEntitySpecialRenderer < ? > r = TileEntityRendererDispatcher . instance . getRenderer ( tileClass ) ; <nl> + TileEntityRenderer < ? > r = TileEntityRendererDispatcher . instance . getRenderer ( tileClass ) ; <nl> if ( r ! = null ) <nl> { <nl> - r . render ( null , 0 , 0 , 0 , 0 , - 1 , 0 . 0F ) ; <nl> + r . func _ 199341 _ a ( null , 0 , 0 , 0 , 0 , - 1 ) ; <nl> } <nl> } <nl> } <nl> @ @ - 648 , 10 + 657 , 10 @ @ public class ForgeHooksClient <nl> } <nl> } <nl> <nl> - public static IBakedModel getDamageModel ( IBakedModel ibakedmodel , TextureAtlasSprite texture , IBlockState state , IBlockAccess world , BlockPos pos ) <nl> + public static IBakedModel getDamageModel ( IBakedModel ibakedmodel , TextureAtlasSprite texture , IBlockState state , IWorldReader world , BlockPos pos ) <nl> { <nl> state = state . getBlock ( ) . getExtendedState ( state , world , pos ) ; <nl> - return ( new SimpleBakedModel . Builder ( state , ibakedmodel , texture , pos ) ) . makeBakedModel ( ) ; <nl> + return ( new SimpleBakedModel . Builder ( state , ibakedmodel , texture , new Random ( ) , 42 ) ) . makeBakedModel ( ) ; <nl> } <nl> <nl> private static int slotMainHand = 0 ; <nl> @ @ - 743 , 7 + 752 , 7 @ @ public class ForgeHooksClient <nl> @ SuppressWarnings ( " deprecation " ) <nl> public static Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( IBakedModel model , ItemCameraTransforms . TransformType type ) <nl> { <nl> - TRSRTransformation tr = new TRSRTransformation ( model . getItemCameraTransforms ( ) . getTransform ( type ) ) ; <nl> + TRSRTransformation tr = TRSRTransformation . from ( model . getItemCameraTransforms ( ) . getTransform ( type ) ) ; <nl> Matrix4f mat = null ; <nl> if ( ! tr . equals ( TRSRTransformation . identity ( ) ) ) mat = tr . getMatrix ( ) ; <nl> return Pair . of ( model , mat ) ; <nl> @ @ - 765 , 7 + 774 , 7 @ @ public class ForgeHooksClient <nl> { <nl> Predicate < IResourceType > predicate = SelectiveReloadStateHandler . INSTANCE . get ( ) ; <nl> <nl> - if ( listener instanceof ModelManager | | listener instanceof RenderItem ) <nl> + if ( listener instanceof ModelManager | | listener instanceof ItemRenderer ) <nl> return predicate . test ( VanillaResourceType . MODELS ) ; <nl> else if ( listener instanceof BlockRendererDispatcher | | listener instanceof RenderGlobal ) <nl> return predicate . test ( VanillaResourceType . MODELS ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / IRenderContextHandler . java b / src / main / java / net / minecraftforge / client / IRenderContextHandler . java <nl> deleted file mode 100644 <nl> index 5b1c390 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / client / IRenderContextHandler . java <nl> + + + / dev / null <nl> @ @ - 1 , 36 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2018 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . client ; <nl> - <nl> - / * * <nl> - * @ deprecated TODO remove in 1 . 13 . This has never been used <nl> - * / <nl> - @ Deprecated <nl> - public interface IRenderContextHandler <nl> - { <nl> - / * * Run before the specified rendering context . <nl> - * / <nl> - void beforeRenderContext ( ) ; <nl> - <nl> - / * * Run after the specified rendering context . <nl> - * / <nl> - void afterRenderContext ( ) ; <nl> - } <nl> - <nl> diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> index 2d92fad . . d63a725 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> @ @ - 48 , 8 + 48 , 9 @ @ import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . SelectValueEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . BooleanEntry ; <nl> import net . minecraftforge . fml . client . config . IConfigElement ; <nl> - import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . ModContainer ; <nl> + import net . minecraftforge . fml . ModList ; <nl> + <nl> import static net . minecraftforge . common . ForgeMod . VERSION _ CHECK _ CAT ; <nl> <nl> / * * <nl> @ @ - 399 , 7 + 400 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory <nl> @ Override <nl> public void onGuiClosed ( ) <nl> { <nl> - Object modObject = Loader . instance ( ) . getModObjectList ( ) . get ( Loader . instance ( ) . getIndexedModList ( ) . get ( currentValue ) ) ; <nl> + Object modObject = ModList . get ( ) . getModContainerById ( getCurrentValue ( ) ) ; <nl> int maxTickets = 200 ; <nl> int maxChunks = 25 ; <nl> if ( modObject ! = null ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> index cc407fe . . 22f9ff9 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> @ @ - 439 , 32 + 439 , 28 @ @ public final class ModelDynBucket implements IUnbakedModel <nl> @ Override <nl> public IBakedModel func _ 209581 _ a ( IBakedModel originalModel , ItemStack stack , @ Nullable World world , @ Nullable EntityLivingBase entity ) <nl> { <nl> - FluidStack fluidStack = FluidUtil . getFluidContained ( stack ) ; <nl> - <nl> - / / not a fluid item apparently <nl> - if ( fluidStack = = null ) <nl> - { <nl> - / / empty bucket <nl> - return originalModel ; <nl> - } <nl> - <nl> - BakedDynBucket model = ( BakedDynBucket ) originalModel ; <nl> - <nl> - Fluid fluid = fluidStack . getFluid ( ) ; <nl> - String name = fluid . getName ( ) ; <nl> - <nl> - if ( ! model . cache . containsKey ( name ) ) <nl> - { <nl> - IUnbakedModel parent = model . parent . process ( ImmutableMap . of ( " fluid " , name ) ) ; <nl> - Function < ResourceLocation , TextureAtlasSprite > textureGetter ; <nl> - textureGetter = location - > Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( location . toString ( ) ) ; <nl> - <nl> - IBakedModel bakedModel = parent . bake ( ModelLoader . defaultModelGetter ( ) , textureGetter , new SimpleModelState ( model . transforms ) , false , model . format ) ; <nl> - model . cache . put ( name , bakedModel ) ; <nl> - return bakedModel ; <nl> - } <nl> - <nl> - return model . cache . get ( name ) ; <nl> + return FluidUtil . getFluidContained ( stack ) <nl> + . map ( fluidStack - > { <nl> + BakedDynBucket model = ( BakedDynBucket ) originalModel ; <nl> + <nl> + Fluid fluid = fluidStack . getFluid ( ) ; <nl> + String name = fluid . getName ( ) ; <nl> + <nl> + if ( ! model . cache . containsKey ( name ) ) <nl> + { <nl> + IUnbakedModel parent = model . parent . process ( ImmutableMap . of ( " fluid " , name ) ) ; <nl> + Function < ResourceLocation , TextureAtlasSprite > textureGetter ; <nl> + textureGetter = location - > Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( location . toString ( ) ) ; <nl> + <nl> + IBakedModel bakedModel = parent . bake ( ModelLoader . defaultModelGetter ( ) , textureGetter , new SimpleModelState ( model . transforms ) , false , model . format ) ; <nl> + model . cache . put ( name , bakedModel ) ; <nl> + return bakedModel ; <nl> + } <nl> + <nl> + return model . cache . get ( name ) ; <nl> + } ) <nl> + / / not a fluid item apparently <nl> + . orElse ( originalModel ) ; / / empty bucket <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / resource / SelectiveReloadStateHandler . java b / src / main / java / net / minecraftforge / client / resource / SelectiveReloadStateHandler . java <nl> index 2b9a762 . . 213e408 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / resource / SelectiveReloadStateHandler . java <nl> + + + b / src / main / java / net / minecraftforge / client / resource / SelectiveReloadStateHandler . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . client . resource ; <nl> import javax . annotation . Nullable ; <nl> import java . util . function . Predicate ; <nl> <nl> + import net . minecraftforge . common . ForgeMod ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> <nl> / * * <nl> @ @ - 58 , 7 + 59 , 7 @ @ public enum SelectiveReloadStateHandler <nl> * / <nl> public Predicate < IResourceType > get ( ) <nl> { <nl> - if ( this . currentPredicate = = null | | ! ForgeModContainer . selectiveResourceReloadEnabled ) <nl> + if ( this . currentPredicate = = null & & false ) / / TODO configs | | ! ForgeMod . selectiveResourceReloadEnabled ) <nl> { <nl> return ReloadRequirements . all ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java <nl> index 5ea5420 . . 6fa000e 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java <nl> + + + b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java <nl> @ @ - 21 , 11 + 21 , 12 @ @ package net . minecraftforge . client . settings ; <nl> <nl> import javax . annotation . Nullable ; <nl> <nl> + import net . minecraft . client . GameSettings ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . client . resources . I18n ; <nl> - import net . minecraft . client . settings . GameSettings ; <nl> - import org . lwjgl . input . Keyboard ; <nl> + <nl> + import org . lwjgl . glfw . GLFW ; <nl> <nl> public enum KeyModifier { <nl> CONTROL { <nl> @ @ - 34 , 11 + 35 , 11 @ @ public enum KeyModifier { <nl> { <nl> if ( Minecraft . IS _ RUNNING _ ON _ MAC ) <nl> { <nl> - return keyCode = = Keyboard . KEY _ LMETA | | keyCode = = Keyboard . KEY _ RMETA ; <nl> + return keyCode = = GLFW . GLFW _ KEY _ LEFT _ ALT | | keyCode = = GLFW . GLFW _ KEY _ RIGHT _ ALT ; <nl> } <nl> else <nl> { <nl> - return keyCode = = Keyboard . KEY _ LCONTROL | | keyCode = = Keyboard . KEY _ RCONTROL ; <nl> + return keyCode = = GLFW . GLFW _ KEY _ LEFT _ CONTROL | | keyCode = = GLFW . GLFW _ KEY _ RIGHT _ CONTROL ; <nl> } <nl> } <nl> <nl> @ @ - 57 , 7 + 58 , 7 @ @ public enum KeyModifier { <nl> @ Override <nl> public String getLocalizedComboName ( int keyCode ) <nl> { <nl> - String keyName = GameSettings . getKeyDisplayString ( keyCode ) ; <nl> + String keyName = GLFW . glfwGetKeyName ( keyCode , 0 ) ; <nl> String localizationFormatKey = Minecraft . IS _ RUNNING _ ON _ MAC ? " forge . controlsgui . control . mac " : " forge . controlsgui . control " ; <nl> return I18n . format ( localizationFormatKey , keyName ) ; <nl> } <nl> @ @ - 66 , 7 + 67 , 7 @ @ public enum KeyModifier { <nl> @ Override <nl> public boolean matches ( int keyCode ) <nl> { <nl> - return keyCode = = Keyboard . KEY _ LSHIFT | | keyCode = = Keyboard . KEY _ RSHIFT ; <nl> + return keyCode = = GLFW . GLFW _ KEY _ LEFT _ SHIFT | | keyCode = = GLFW . GLFW _ KEY _ RIGHT _ SHIFT ; <nl> } <nl> <nl> @ Override <nl> @ @ - 84 , 7 + 85 , 7 @ @ public enum KeyModifier { <nl> @ Override <nl> public String getLocalizedComboName ( int keyCode ) <nl> { <nl> - String keyName = GameSettings . getKeyDisplayString ( keyCode ) ; <nl> + String keyName = GLFW . glfwGetKeyName ( keyCode , 0 ) ; <nl> return I18n . format ( " forge . controlsgui . shift " , keyName ) ; <nl> } <nl> } , <nl> @ @ - 92 , 7 + 93 , 7 @ @ public enum KeyModifier { <nl> @ Override <nl> public boolean matches ( int keyCode ) <nl> { <nl> - return keyCode = = Keyboard . KEY _ LMENU | | keyCode = = Keyboard . KEY _ RMENU ; <nl> + return keyCode = = GLFW . GLFW _ KEY _ LEFT _ ALT | | keyCode = = GLFW . GLFW _ KEY _ RIGHT _ ALT ; <nl> } <nl> <nl> @ Override <nl> @ @ - 110 , 7 + 111 , 7 @ @ public enum KeyModifier { <nl> @ Override <nl> public String getLocalizedComboName ( int keyCode ) <nl> { <nl> - String keyName = GameSettings . getKeyDisplayString ( keyCode ) ; <nl> + String keyName = GLFW . glfwGetKeyName ( keyCode , 0 ) ; <nl> return I18n . format ( " forge . controlsgui . alt " , keyName ) ; <nl> } <nl> } , <nl> @ @ - 146 , 7 + 147 , 7 @ @ public enum KeyModifier { <nl> @ Override <nl> public String getLocalizedComboName ( int keyCode ) <nl> { <nl> - return GameSettings . getKeyDisplayString ( keyCode ) ; <nl> + return GLFW . glfwGetKeyName ( keyCode , 0 ) ; <nl> } <nl> } ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> index 81f5044 . . c5ae580 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> @ @ - 329 , 6 + 329 , 11 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook <nl> } <nl> } <nl> } <nl> + <nl> + public static Configuration getConfig ( ) <nl> + { <nl> + return config ; <nl> + } <nl> <nl> / * <nl> public void missingMapping ( RegistryEvent . MissingMappings < Item > event ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeDimension . java b / src / main / java / net / minecraftforge / common / extensions / IForgeDimension . java <nl> index 78932a7 . . 771e907 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeDimension . java <nl> + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeDimension . java <nl> @ @ - 1 , 5 + 1 , 12 @ @ <nl> package net . minecraftforge . common . extensions ; <nl> <nl> + import javax . annotation . Nullable ; <nl> + <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . api . distmarker . Dist ; <nl> + import net . minecraftforge . api . distmarker . OnlyIn ; <nl> + import net . minecraftforge . client . IRenderHandler ; <nl> + <nl> public interface IForgeDimension <nl> { <nl> / * * <nl> @ @ - 18 , 4 + 25 , 25 @ @ public interface IForgeDimension <nl> { <nl> return null ; <nl> } <nl> + <nl> + @ OnlyIn ( Dist . CLIENT ) <nl> + @ Nullable <nl> + IRenderHandler getSkyRenderer ( ) ; <nl> + <nl> + @ OnlyIn ( Dist . CLIENT ) <nl> + void setSkyRenderer ( IRenderHandler skyRenderer ) ; <nl> + <nl> + @ OnlyIn ( Dist . CLIENT ) <nl> + @ Nullable <nl> + IRenderHandler getCloudRenderer ( ) ; <nl> + <nl> + @ OnlyIn ( Dist . CLIENT ) <nl> + void setCloudRenderer ( IRenderHandler renderer ) ; <nl> + <nl> + @ OnlyIn ( Dist . CLIENT ) <nl> + @ Nullable <nl> + IRenderHandler getWeatherRenderer ( ) ; <nl> + <nl> + @ OnlyIn ( Dist . CLIENT ) <nl> + void setWeatherRenderer ( IRenderHandler renderer ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiButtonExt . java b / src / main / java / net / minecraftforge / fml / client / config / GuiButtonExt . java <nl> index 4f5f1f6 . . def8a40 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiButtonExt . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiButtonExt . java <nl> @ @ - 48 , 10 + 48 , 11 @ @ public class GuiButtonExt extends GuiButton <nl> * Draws this button to the screen . <nl> * / <nl> @ Override <nl> - public void drawButton ( Minecraft mc , int mouseX , int mouseY , float partial ) <nl> + public void func _ 194828 _ a ( int mouseX , int mouseY , float partial ) <nl> { <nl> if ( this . visible ) <nl> { <nl> + Minecraft mc = Minecraft . getMinecraft ( ) ; <nl> this . hovered = mouseX > = this . x & & mouseY > = this . y & & mouseX < this . x + this . width & & mouseY < this . y + this . height ; <nl> int k = this . getHoverState ( this . hovered ) ; <nl> GuiUtils . drawContinuousTexturedBox ( BUTTON _ TEXTURES , this . x , this . y , 0 , 46 + k * 20 , this . width , this . height , 200 , 20 , 2 , 3 , 2 , 2 , this . zLevel ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java <nl> index c2fa2d4 . . 078dc64 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java <nl> @ @ - 1684 , 7 + 1684 , 7 @ @ public class GuiConfigEntries extends GuiListExtended <nl> / * * <nl> * Provides an interface for defining GuiConfigEntry . listEntry objects . <nl> * / <nl> - public static interface IConfigEntry extends GuiListExtended . IGuiListEntry <nl> + public static interface IConfigEntry <nl> { <nl> / * * <nl> * Gets the IConfigElement object owned by this entry .

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java 
 index 152886f . . 2781168 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java 
 @ @ - 44 , 7 + 44 , 7 @ @ import org . apache . commons . lang3 . tuple . Pair ; 
 / * * 
 * Generic TileEntitySpecialRenderer that works with the Forge model system and animations . 
 * / 
 - public class AnimationTESR < T extends TileEntity > extends FastTESR < T > implements IEventHandler < T > 
 + public class AnimationTESR < T extends TileEntity > extends TileEntityRendererFast < T > implements IEventHandler < T > 
 { 
 protected static BlockRendererDispatcher blockRenderer ; 
 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / FastTESR . java b / src / main / java / net / minecraftforge / client / model / animation / FastTESR . java 
 deleted file mode 100644 
 index be1b054 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / FastTESR . java 
 + + + / dev / null 
 @ @ - 1 , 68 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2018 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . client . model . animation ; 
 - 
 - import org . lwjgl . opengl . GL11 ; 
 - 
 - import net . minecraft . client . Minecraft ; 
 - import net . minecraft . client . renderer . GlStateManager ; 
 - import net . minecraft . client . renderer . RenderHelper ; 
 - import net . minecraft . client . renderer . Tessellator ; 
 - import net . minecraft . client . renderer . BufferBuilder ; 
 - import net . minecraft . client . renderer . texture . TextureMap ; 
 - import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; 
 - import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 - import net . minecraft . tileentity . TileEntity ; 
 - 
 - public abstract class FastTESR < T extends TileEntity > extends TileEntityRenderer < T > 
 - { 
 - @ Override 
 - public final void render ( T te , double x , double y , double z , float partialTicks , int destroyStage ) 
 - { 
 - Tessellator tessellator = Tessellator . getInstance ( ) ; 
 - BufferBuilder buffer = tessellator . getBuffer ( ) ; 
 - this . bindTexture ( TextureMap . LOCATION _ BLOCKS _ TEXTURE ) ; 
 - RenderHelper . disableStandardItemLighting ( ) ; 
 - GlStateManager . blendFunc ( GL11 . GL _ SRC _ ALPHA , GL11 . GL _ ONE _ MINUS _ SRC _ ALPHA ) ; 
 - GlStateManager . enableBlend ( ) ; 
 - GlStateManager . disableCull ( ) ; 
 - 
 - if ( Minecraft . isAmbientOcclusionEnabled ( ) ) 
 - { 
 - GlStateManager . shadeModel ( GL11 . GL _ SMOOTH ) ; 
 - } 
 - else 
 - { 
 - GlStateManager . shadeModel ( GL11 . GL _ FLAT ) ; 
 - } 
 - 
 - buffer . begin ( GL11 . GL _ QUADS , DefaultVertexFormats . BLOCK ) ; 
 - 
 - renderTileEntityFast ( te , x , y , z , partialTicks , destroyStage , buffer ) ; 
 - buffer . setTranslation ( 0 , 0 , 0 ) ; 
 - 
 - tessellator . draw ( ) ; 
 - 
 - RenderHelper . enableStandardItemLighting ( ) ; 
 - } 
 - 
 - @ Override 
 - public abstract void renderTileEntityFast ( T te , double x , double y , double z , float partialTicks , int destroyStage , BufferBuilder buffer ) ; 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java 
 new file mode 100644 
 index 0000000 . . 1d4d78b 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java 
 @ @ - 0 , 0 + 1 , 68 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . client . model . animation ; 
 + 
 + import org . lwjgl . opengl . GL11 ; 
 + 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . GlStateManager ; 
 + import net . minecraft . client . renderer . RenderHelper ; 
 + import net . minecraft . client . renderer . Tessellator ; 
 + import net . minecraft . client . renderer . BufferBuilder ; 
 + import net . minecraft . client . renderer . texture . TextureMap ; 
 + import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; 
 + import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 + import net . minecraft . tileentity . TileEntity ; 
 + 
 + public abstract class TileEntityRendererFast < T extends TileEntity > extends TileEntityRenderer < T > 
 + { 
 + @ Override 
 + public final void render ( T te , double x , double y , double z , float partialTicks , int destroyStage ) 
 + { 
 + Tessellator tessellator = Tessellator . getInstance ( ) ; 
 + BufferBuilder buffer = tessellator . getBuffer ( ) ; 
 + this . bindTexture ( TextureMap . LOCATION _ BLOCKS _ TEXTURE ) ; 
 + RenderHelper . disableStandardItemLighting ( ) ; 
 + GlStateManager . blendFunc ( GL11 . GL _ SRC _ ALPHA , GL11 . GL _ ONE _ MINUS _ SRC _ ALPHA ) ; 
 + GlStateManager . enableBlend ( ) ; 
 + GlStateManager . disableCull ( ) ; 
 + 
 + if ( Minecraft . isAmbientOcclusionEnabled ( ) ) 
 + { 
 + GlStateManager . shadeModel ( GL11 . GL _ SMOOTH ) ; 
 + } 
 + else 
 + { 
 + GlStateManager . shadeModel ( GL11 . GL _ FLAT ) ; 
 + } 
 + 
 + buffer . begin ( GL11 . GL _ QUADS , DefaultVertexFormats . BLOCK ) ; 
 + 
 + renderTileEntityFast ( te , x , y , z , partialTicks , destroyStage , buffer ) ; 
 + buffer . setTranslation ( 0 , 0 , 0 ) ; 
 + 
 + tessellator . draw ( ) ; 
 + 
 + RenderHelper . enableStandardItemLighting ( ) ; 
 + } 
 + 
 + @ Override 
 + public abstract void renderTileEntityFast ( T te , double x , double y , double z , float partialTicks , int destroyStage , BufferBuilder buffer ) ; 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch b / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch 
 new file mode 100644 
 index 0000000 . . b39501f3 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + - - - a / net / minecraft / client / settings / KeyBinding . java 
 + + + + b / net / minecraft / client / settings / KeyBinding . java 
 + @ @ - 163 , 4 + 163 , 9 @ @ 
 + public String func _ 197982 _ m ( ) { 
 + return this . keyCode . func _ 197935 _ d ( ) ; 
 + } 
 + + 
 + + public InputMappings . Input getKey ( ) 
 + + { 
 + + return this . keyCode ; 
 + + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / world / dimension / Dimension . java . patch b / patches / minecraft / net / minecraft / world / dimension / Dimension . java . patch 
 index 421ea78 . . 064d2a5 100644 
 - - - a / patches / minecraft / net / minecraft / world / dimension / Dimension . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / dimension / Dimension . java . patch 
 @ @ - 9 , 3 + 9 , 58 @ @ 
 public static final float [ ] MOON _ PHASE _ FACTORS = new float [ ] { 1 . 0F , 0 . 75F , 0 . 5F , 0 . 25F , 0 . 0F , 0 . 25F , 0 . 5F , 0 . 75F } ; 
 protected World world ; 
 protected boolean doesWaterVaporize ; 
 + @ @ - 141 , 4 + 141 , 54 @ @ 
 + public abstract boolean doesXZShowFog ( int x , int z ) ; 
 + 
 + public abstract DimensionType getDimensionType ( ) ; 
 + + 
 + + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = Forge Start = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + + private net . minecraftforge . client . IRenderHandler skyRenderer = null ; 
 + + private net . minecraftforge . client . IRenderHandler cloudRenderer = null ; 
 + + private net . minecraftforge . client . IRenderHandler weatherRenderer = null ; 
 + + 
 + + @ Nullable 
 + + @ OnlyIn ( Dist . CLIENT ) 
 + + @ Override 
 + + public net . minecraftforge . client . IRenderHandler getSkyRenderer ( ) 
 + + { 
 + + return this . skyRenderer ; 
 + + } 
 + + 
 + + @ OnlyIn ( Dist . CLIENT ) 
 + + @ Override 
 + + public void setSkyRenderer ( net . minecraftforge . client . IRenderHandler skyRenderer ) 
 + + { 
 + + this . skyRenderer = skyRenderer ; 
 + + } 
 + + 
 + + @ Nullable 
 + + @ OnlyIn ( Dist . CLIENT ) 
 + + @ Override 
 + + public net . minecraftforge . client . IRenderHandler getCloudRenderer ( ) 
 + + { 
 + + return cloudRenderer ; 
 + + } 
 + + 
 + + @ OnlyIn ( Dist . CLIENT ) 
 + + @ Override 
 + + public void setCloudRenderer ( net . minecraftforge . client . IRenderHandler renderer ) 
 + + { 
 + + cloudRenderer = renderer ; 
 + + } 
 + + 
 + + @ Nullable 
 + + @ OnlyIn ( Dist . CLIENT ) 
 + + @ Override 
 + + public net . minecraftforge . client . IRenderHandler getWeatherRenderer ( ) 
 + + { 
 + + return weatherRenderer ; 
 + + } 
 + + 
 + + @ OnlyIn ( Dist . CLIENT ) 
 + + @ Override 
 + + public void setWeatherRenderer ( net . minecraftforge . client . IRenderHandler renderer ) 
 + + { 
 + + weatherRenderer = renderer ; 
 + + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / FluidContainerColorer . java b / src / main / java / net / minecraftforge / client / FluidContainerColorer . java 
 index bf10b2f . . 1f41a2f 100644 
 - - - a / src / main / java / net / minecraftforge / client / FluidContainerColorer . java 
 + + + b / src / main / java / net / minecraftforge / client / FluidContainerColorer . java 
 @ @ - 19 , 21 + 19 , 20 @ @ 
 
 package net . minecraftforge . client ; 
 
 + import javax . annotation . Nonnull ; 
 + 
 import net . minecraft . client . renderer . color . IItemColor ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraftforge . fluids . FluidStack ; 
 import net . minecraftforge . fluids . FluidUtil ; 
 
 - import javax . annotation . Nonnull ; 
 - 
 public class FluidContainerColorer implements IItemColor 
 { 
 @ Override 
 public int getColor ( @ Nonnull ItemStack stack , int tintIndex ) 
 { 
 if ( tintIndex ! = 1 ) return 0xFFFFFFFF ; 
 - FluidStack fluidStack = FluidUtil . getFluidContained ( stack ) ; 
 - if ( fluidStack = = null ) return 0xFFFFFFFF ; 
 - return fluidStack . getFluid ( ) . getColor ( fluidStack ) ; 
 + return FluidUtil . getFluidContained ( stack ) 
 + . map ( fstack - > fstack . getFluid ( ) . getColor ( fstack ) ) 
 + . orElse ( 0xFFFFFFFF ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 66b2cac . . c4863a1 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import java . nio . ByteBuffer ; 
 import java . nio . FloatBuffer ; 
 import java . util . Map ; 
 import java . util . Optional ; 
 + import java . util . Random ; 
 import java . util . function . Predicate ; 
 
 import javax . annotation . Nonnull ; 
 @ @ - 54 , 6 + 55 , 7 @ @ import net . minecraft . client . renderer . BlockRendererDispatcher ; 
 import net . minecraft . client . renderer . BufferBuilder ; 
 import net . minecraft . client . renderer . EntityRenderer ; 
 import net . minecraft . client . renderer . GlStateManager ; 
 + import net . minecraft . client . renderer . ItemRenderer ; 
 import net . minecraft . client . renderer . OpenGlHelper ; 
 import net . minecraft . client . renderer . RenderGlobal ; 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 @ @ - 71 , 6 + 73 , 7 @ @ import net . minecraft . client . renderer . entity . model . ModelBiped ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . texture . TextureManager ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 + import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; 
 import net . minecraft . client . renderer . tileentity . TileEntityRendererDispatcher ; 
 import net . minecraft . client . renderer . vertex . VertexFormat ; 
 import net . minecraft . client . renderer . vertex . VertexFormatElement ; 
 @ @ - 87 , 6 + 90 , 7 @ @ import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . inventory . EntityEquipmentSlot ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 + import net . minecraft . resources . IResourceManagerReloadListener ; 
 import net . minecraft . tileentity . TileEntity ; 
 import net . minecraft . util . BlockRenderLayer ; 
 import net . minecraft . util . EnumFacing ; 
 @ @ - 131 , 12 + 135 , 17 @ @ import net . minecraftforge . fml . VersionChecker ; 
 import net . minecraftforge . fml . client . registry . ClientRegistry ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 import org . lwjgl . BufferUtils ; 
 + import org . lwjgl . opengl . GL11 ; 
 
 import com . google . common . collect . Maps ; 
 
 public class ForgeHooksClient 
 { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 + 
 / / private static final ResourceLocation ITEM _ GLINT = new ResourceLocation ( " textures / misc / enchanted _ item _ glint . png " ) ; 
 
 public static String getArmorTexture ( Entity entity , ItemStack armor , String _ default , EntityEquipmentSlot slot , String type ) 
 @ @ - 181 , 7 + 190 , 7 @ @ public class ForgeHooksClient 
 public static void onTextureStitchedPre ( TextureMap map ) 
 { 
 MinecraftForge . EVENT _ BUS . post ( new TextureStitchEvent . Pre ( map ) ) ; 
 - ModelLoader . White . INSTANCE . register ( map ) ; 
 + / / ModelLoader . White . INSTANCE . register ( map ) ; / / TODO Custom TAS 
 ModelDynBucket . LoaderDynBucket . INSTANCE . register ( map ) ; 
 } 
 
 @ @ - 239 , 12 + 248 , 12 @ @ public class ForgeHooksClient 
 return base + name ; 
 } 
 } 
 - 
 + / * TODO mouse input 
 public static boolean postMouseEvent ( ) 
 { 
 return MinecraftForge . EVENT _ BUS . post ( new MouseEvent ( ) ) ; 
 } 
 - 
 + * / 
 public static float getOffsetFOV ( EntityPlayer entity , float fov ) 
 { 
 FOVUpdateEvent fovUpdateEvent = new FOVUpdateEvent ( entity , fov ) ; 
 @ @ - 446 , 7 + 455 , 7 @ @ public class ForgeHooksClient 
 matrixBuf . put ( t ) ; 
 } 
 matrixBuf . flip ( ) ; 
 - glMultMatrix ( matrixBuf ) ; 
 + glMultMatrixf ( matrixBuf ) ; 
 } 
 
 / / moved and expanded from WorldVertexBufferUploader . draw 
 @ @ - 487 , 7 + 496 , 7 @ @ public class ForgeHooksClient 
 glEnableVertexAttribArray ( attr . getIndex ( ) ) ; 
 glVertexAttribPointer ( attr . getIndex ( ) , count , constant , false , stride , buffer ) ; 
 default : 
 - FMLLog . log . fatal ( " Unimplemented vanilla attribute upload : { } " , attrType . getDisplayName ( ) ) ; 
 + LOGGER . fatal ( " Unimplemented vanilla attribute upload : { } " , attrType . getDisplayName ( ) ) ; 
 } 
 } 
 
 @ @ - 517 , 7 + 526 , 7 @ @ public class ForgeHooksClient 
 case GENERIC : 
 glDisableVertexAttribArray ( attr . getIndex ( ) ) ; 
 default : 
 - FMLLog . log . fatal ( " Unimplemented vanilla attribute upload : { } " , attrType . getDisplayName ( ) ) ; 
 + LOGGER . fatal ( " Unimplemented vanilla attribute upload : { } " , attrType . getDisplayName ( ) ) ; 
 } 
 } 
 
 @ @ - 572 , 10 + 581 , 10 @ @ public class ForgeHooksClient 
 Class < ? extends TileEntity > tileClass = tileItemMap . get ( Pair . of ( item , metadata ) ) ; 
 if ( tileClass ! = null ) 
 { 
 - TileEntitySpecialRenderer < ? > r = TileEntityRendererDispatcher . instance . getRenderer ( tileClass ) ; 
 + TileEntityRenderer < ? > r = TileEntityRendererDispatcher . instance . getRenderer ( tileClass ) ; 
 if ( r ! = null ) 
 { 
 - r . render ( null , 0 , 0 , 0 , 0 , - 1 , 0 . 0F ) ; 
 + r . func _ 199341 _ a ( null , 0 , 0 , 0 , 0 , - 1 ) ; 
 } 
 } 
 } 
 @ @ - 648 , 10 + 657 , 10 @ @ public class ForgeHooksClient 
 } 
 } 
 
 - public static IBakedModel getDamageModel ( IBakedModel ibakedmodel , TextureAtlasSprite texture , IBlockState state , IBlockAccess world , BlockPos pos ) 
 + public static IBakedModel getDamageModel ( IBakedModel ibakedmodel , TextureAtlasSprite texture , IBlockState state , IWorldReader world , BlockPos pos ) 
 { 
 state = state . getBlock ( ) . getExtendedState ( state , world , pos ) ; 
 - return ( new SimpleBakedModel . Builder ( state , ibakedmodel , texture , pos ) ) . makeBakedModel ( ) ; 
 + return ( new SimpleBakedModel . Builder ( state , ibakedmodel , texture , new Random ( ) , 42 ) ) . makeBakedModel ( ) ; 
 } 
 
 private static int slotMainHand = 0 ; 
 @ @ - 743 , 7 + 752 , 7 @ @ public class ForgeHooksClient 
 @ SuppressWarnings ( " deprecation " ) 
 public static Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( IBakedModel model , ItemCameraTransforms . TransformType type ) 
 { 
 - TRSRTransformation tr = new TRSRTransformation ( model . getItemCameraTransforms ( ) . getTransform ( type ) ) ; 
 + TRSRTransformation tr = TRSRTransformation . from ( model . getItemCameraTransforms ( ) . getTransform ( type ) ) ; 
 Matrix4f mat = null ; 
 if ( ! tr . equals ( TRSRTransformation . identity ( ) ) ) mat = tr . getMatrix ( ) ; 
 return Pair . of ( model , mat ) ; 
 @ @ - 765 , 7 + 774 , 7 @ @ public class ForgeHooksClient 
 { 
 Predicate < IResourceType > predicate = SelectiveReloadStateHandler . INSTANCE . get ( ) ; 
 
 - if ( listener instanceof ModelManager | | listener instanceof RenderItem ) 
 + if ( listener instanceof ModelManager | | listener instanceof ItemRenderer ) 
 return predicate . test ( VanillaResourceType . MODELS ) ; 
 else if ( listener instanceof BlockRendererDispatcher | | listener instanceof RenderGlobal ) 
 return predicate . test ( VanillaResourceType . MODELS ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / IRenderContextHandler . java b / src / main / java / net / minecraftforge / client / IRenderContextHandler . java 
 deleted file mode 100644 
 index 5b1c390 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / client / IRenderContextHandler . java 
 + + + / dev / null 
 @ @ - 1 , 36 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2018 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . client ; 
 - 
 - / * * 
 - * @ deprecated TODO remove in 1 . 13 . This has never been used 
 - * / 
 - @ Deprecated 
 - public interface IRenderContextHandler 
 - { 
 - / * * Run before the specified rendering context . 
 - * / 
 - void beforeRenderContext ( ) ; 
 - 
 - / * * Run after the specified rendering context . 
 - * / 
 - void afterRenderContext ( ) ; 
 - } 
 - 
 diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 index 2d92fad . . d63a725 100644 
 - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 @ @ - 48 , 8 + 48 , 9 @ @ import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . SelectValueEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . BooleanEntry ; 
 import net . minecraftforge . fml . client . config . IConfigElement ; 
 - import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . ModContainer ; 
 + import net . minecraftforge . fml . ModList ; 
 + 
 import static net . minecraftforge . common . ForgeMod . VERSION _ CHECK _ CAT ; 
 
 / * * 
 @ @ - 399 , 7 + 400 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory 
 @ Override 
 public void onGuiClosed ( ) 
 { 
 - Object modObject = Loader . instance ( ) . getModObjectList ( ) . get ( Loader . instance ( ) . getIndexedModList ( ) . get ( currentValue ) ) ; 
 + Object modObject = ModList . get ( ) . getModContainerById ( getCurrentValue ( ) ) ; 
 int maxTickets = 200 ; 
 int maxChunks = 25 ; 
 if ( modObject ! = null ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 index cc407fe . . 22f9ff9 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 @ @ - 439 , 32 + 439 , 28 @ @ public final class ModelDynBucket implements IUnbakedModel 
 @ Override 
 public IBakedModel func _ 209581 _ a ( IBakedModel originalModel , ItemStack stack , @ Nullable World world , @ Nullable EntityLivingBase entity ) 
 { 
 - FluidStack fluidStack = FluidUtil . getFluidContained ( stack ) ; 
 - 
 - / / not a fluid item apparently 
 - if ( fluidStack = = null ) 
 - { 
 - / / empty bucket 
 - return originalModel ; 
 - } 
 - 
 - BakedDynBucket model = ( BakedDynBucket ) originalModel ; 
 - 
 - Fluid fluid = fluidStack . getFluid ( ) ; 
 - String name = fluid . getName ( ) ; 
 - 
 - if ( ! model . cache . containsKey ( name ) ) 
 - { 
 - IUnbakedModel parent = model . parent . process ( ImmutableMap . of ( " fluid " , name ) ) ; 
 - Function < ResourceLocation , TextureAtlasSprite > textureGetter ; 
 - textureGetter = location - > Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( location . toString ( ) ) ; 
 - 
 - IBakedModel bakedModel = parent . bake ( ModelLoader . defaultModelGetter ( ) , textureGetter , new SimpleModelState ( model . transforms ) , false , model . format ) ; 
 - model . cache . put ( name , bakedModel ) ; 
 - return bakedModel ; 
 - } 
 - 
 - return model . cache . get ( name ) ; 
 + return FluidUtil . getFluidContained ( stack ) 
 + . map ( fluidStack - > { 
 + BakedDynBucket model = ( BakedDynBucket ) originalModel ; 
 + 
 + Fluid fluid = fluidStack . getFluid ( ) ; 
 + String name = fluid . getName ( ) ; 
 + 
 + if ( ! model . cache . containsKey ( name ) ) 
 + { 
 + IUnbakedModel parent = model . parent . process ( ImmutableMap . of ( " fluid " , name ) ) ; 
 + Function < ResourceLocation , TextureAtlasSprite > textureGetter ; 
 + textureGetter = location - > Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( location . toString ( ) ) ; 
 + 
 + IBakedModel bakedModel = parent . bake ( ModelLoader . defaultModelGetter ( ) , textureGetter , new SimpleModelState ( model . transforms ) , false , model . format ) ; 
 + model . cache . put ( name , bakedModel ) ; 
 + return bakedModel ; 
 + } 
 + 
 + return model . cache . get ( name ) ; 
 + } ) 
 + / / not a fluid item apparently 
 + . orElse ( originalModel ) ; / / empty bucket 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / client / resource / SelectiveReloadStateHandler . java b / src / main / java / net / minecraftforge / client / resource / SelectiveReloadStateHandler . java 
 index 2b9a762 . . 213e408 100644 
 - - - a / src / main / java / net / minecraftforge / client / resource / SelectiveReloadStateHandler . java 
 + + + b / src / main / java / net / minecraftforge / client / resource / SelectiveReloadStateHandler . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . client . resource ; 
 import javax . annotation . Nullable ; 
 import java . util . function . Predicate ; 
 
 + import net . minecraftforge . common . ForgeMod ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 
 / * * 
 @ @ - 58 , 7 + 59 , 7 @ @ public enum SelectiveReloadStateHandler 
 * / 
 public Predicate < IResourceType > get ( ) 
 { 
 - if ( this . currentPredicate = = null | | ! ForgeModContainer . selectiveResourceReloadEnabled ) 
 + if ( this . currentPredicate = = null & & false ) / / TODO configs | | ! ForgeMod . selectiveResourceReloadEnabled ) 
 { 
 return ReloadRequirements . all ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java 
 index 5ea5420 . . 6fa000e 100644 
 - - - a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java 
 + + + b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java 
 @ @ - 21 , 11 + 21 , 12 @ @ package net . minecraftforge . client . settings ; 
 
 import javax . annotation . Nullable ; 
 
 + import net . minecraft . client . GameSettings ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . client . resources . I18n ; 
 - import net . minecraft . client . settings . GameSettings ; 
 - import org . lwjgl . input . Keyboard ; 
 + 
 + import org . lwjgl . glfw . GLFW ; 
 
 public enum KeyModifier { 
 CONTROL { 
 @ @ - 34 , 11 + 35 , 11 @ @ public enum KeyModifier { 
 { 
 if ( Minecraft . IS _ RUNNING _ ON _ MAC ) 
 { 
 - return keyCode = = Keyboard . KEY _ LMETA | | keyCode = = Keyboard . KEY _ RMETA ; 
 + return keyCode = = GLFW . GLFW _ KEY _ LEFT _ ALT | | keyCode = = GLFW . GLFW _ KEY _ RIGHT _ ALT ; 
 } 
 else 
 { 
 - return keyCode = = Keyboard . KEY _ LCONTROL | | keyCode = = Keyboard . KEY _ RCONTROL ; 
 + return keyCode = = GLFW . GLFW _ KEY _ LEFT _ CONTROL | | keyCode = = GLFW . GLFW _ KEY _ RIGHT _ CONTROL ; 
 } 
 } 
 
 @ @ - 57 , 7 + 58 , 7 @ @ public enum KeyModifier { 
 @ Override 
 public String getLocalizedComboName ( int keyCode ) 
 { 
 - String keyName = GameSettings . getKeyDisplayString ( keyCode ) ; 
 + String keyName = GLFW . glfwGetKeyName ( keyCode , 0 ) ; 
 String localizationFormatKey = Minecraft . IS _ RUNNING _ ON _ MAC ? " forge . controlsgui . control . mac " : " forge . controlsgui . control " ; 
 return I18n . format ( localizationFormatKey , keyName ) ; 
 } 
 @ @ - 66 , 7 + 67 , 7 @ @ public enum KeyModifier { 
 @ Override 
 public boolean matches ( int keyCode ) 
 { 
 - return keyCode = = Keyboard . KEY _ LSHIFT | | keyCode = = Keyboard . KEY _ RSHIFT ; 
 + return keyCode = = GLFW . GLFW _ KEY _ LEFT _ SHIFT | | keyCode = = GLFW . GLFW _ KEY _ RIGHT _ SHIFT ; 
 } 
 
 @ Override 
 @ @ - 84 , 7 + 85 , 7 @ @ public enum KeyModifier { 
 @ Override 
 public String getLocalizedComboName ( int keyCode ) 
 { 
 - String keyName = GameSettings . getKeyDisplayString ( keyCode ) ; 
 + String keyName = GLFW . glfwGetKeyName ( keyCode , 0 ) ; 
 return I18n . format ( " forge . controlsgui . shift " , keyName ) ; 
 } 
 } , 
 @ @ - 92 , 7 + 93 , 7 @ @ public enum KeyModifier { 
 @ Override 
 public boolean matches ( int keyCode ) 
 { 
 - return keyCode = = Keyboard . KEY _ LMENU | | keyCode = = Keyboard . KEY _ RMENU ; 
 + return keyCode = = GLFW . GLFW _ KEY _ LEFT _ ALT | | keyCode = = GLFW . GLFW _ KEY _ RIGHT _ ALT ; 
 } 
 
 @ Override 
 @ @ - 110 , 7 + 111 , 7 @ @ public enum KeyModifier { 
 @ Override 
 public String getLocalizedComboName ( int keyCode ) 
 { 
 - String keyName = GameSettings . getKeyDisplayString ( keyCode ) ; 
 + String keyName = GLFW . glfwGetKeyName ( keyCode , 0 ) ; 
 return I18n . format ( " forge . controlsgui . alt " , keyName ) ; 
 } 
 } , 
 @ @ - 146 , 7 + 147 , 7 @ @ public enum KeyModifier { 
 @ Override 
 public String getLocalizedComboName ( int keyCode ) 
 { 
 - return GameSettings . getKeyDisplayString ( keyCode ) ; 
 + return GLFW . glfwGetKeyName ( keyCode , 0 ) ; 
 } 
 } ; 
 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 index 81f5044 . . c5ae580 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 @ @ - 329 , 6 + 329 , 11 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook 
 } 
 } 
 } 
 + 
 + public static Configuration getConfig ( ) 
 + { 
 + return config ; 
 + } 
 
 / * 
 public void missingMapping ( RegistryEvent . MissingMappings < Item > event ) 
 diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeDimension . java b / src / main / java / net / minecraftforge / common / extensions / IForgeDimension . java 
 index 78932a7 . . 771e907 100644 
 - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeDimension . java 
 + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeDimension . java 
 @ @ - 1 , 5 + 1 , 12 @ @ 
 package net . minecraftforge . common . extensions ; 
 
 + import javax . annotation . Nullable ; 
 + 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . api . distmarker . Dist ; 
 + import net . minecraftforge . api . distmarker . OnlyIn ; 
 + import net . minecraftforge . client . IRenderHandler ; 
 + 
 public interface IForgeDimension 
 { 
 / * * 
 @ @ - 18 , 4 + 25 , 25 @ @ public interface IForgeDimension 
 { 
 return null ; 
 } 
 + 
 + @ OnlyIn ( Dist . CLIENT ) 
 + @ Nullable 
 + IRenderHandler getSkyRenderer ( ) ; 
 + 
 + @ OnlyIn ( Dist . CLIENT ) 
 + void setSkyRenderer ( IRenderHandler skyRenderer ) ; 
 + 
 + @ OnlyIn ( Dist . CLIENT ) 
 + @ Nullable 
 + IRenderHandler getCloudRenderer ( ) ; 
 + 
 + @ OnlyIn ( Dist . CLIENT ) 
 + void setCloudRenderer ( IRenderHandler renderer ) ; 
 + 
 + @ OnlyIn ( Dist . CLIENT ) 
 + @ Nullable 
 + IRenderHandler getWeatherRenderer ( ) ; 
 + 
 + @ OnlyIn ( Dist . CLIENT ) 
 + void setWeatherRenderer ( IRenderHandler renderer ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiButtonExt . java b / src / main / java / net / minecraftforge / fml / client / config / GuiButtonExt . java 
 index 4f5f1f6 . . def8a40 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiButtonExt . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiButtonExt . java 
 @ @ - 48 , 10 + 48 , 11 @ @ public class GuiButtonExt extends GuiButton 
 * Draws this button to the screen . 
 * / 
 @ Override 
 - public void drawButton ( Minecraft mc , int mouseX , int mouseY , float partial ) 
 + public void func _ 194828 _ a ( int mouseX , int mouseY , float partial ) 
 { 
 if ( this . visible ) 
 { 
 + Minecraft mc = Minecraft . getMinecraft ( ) ; 
 this . hovered = mouseX > = this . x & & mouseY > = this . y & & mouseX < this . x + this . width & & mouseY < this . y + this . height ; 
 int k = this . getHoverState ( this . hovered ) ; 
 GuiUtils . drawContinuousTexturedBox ( BUTTON _ TEXTURES , this . x , this . y , 0 , 46 + k * 20 , this . width , this . height , 200 , 20 , 2 , 3 , 2 , 2 , this . zLevel ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java 
 index c2fa2d4 . . 078dc64 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfigEntries . java 
 @ @ - 1684 , 7 + 1684 , 7 @ @ public class GuiConfigEntries extends GuiListExtended 
 / * * 
 * Provides an interface for defining GuiConfigEntry . listEntry objects . 
 * / 
 - public static interface IConfigEntry extends GuiListExtended . IGuiListEntry 
 + public static interface IConfigEntry 
 { 
 / * * 
 * Gets the IConfigElement object owned by this entry .
