BLEU SCORE: 0.019648763141608138

TEST MSG: Removed fluidID from ItemStack .
GENERATED MSG: Comment out fluids until King gets his hands on it

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> index 72f44d7 . . 6ba6ccd 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> + + + b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java <nl> @ @ - 1 , 12 + 1 , 10 @ @ <nl> package net . minecraftforge . common . network ; <nl> <nl> import java . util . Map ; <nl> - <nl> + import net . minecraftforge . fluids . Fluid ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> - <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBiMap ; <nl> - <nl> import cpw . mods . fml . common . network . ByteBufUtils ; <nl> import io . netty . buffer . ByteBuf ; <nl> <nl> @ @ - 40 , 15 + 38 , 15 @ @ public abstract class ForgeMessage { <nl> } <nl> <nl> public static class FluidIdMapMessage extends ForgeMessage { <nl> - BiMap < String , Integer > fluidIds = HashBiMap . create ( ) ; <nl> + BiMap < Fluid , Integer > fluidIds = HashBiMap . create ( ) ; <nl> @ Override <nl> void toBytes ( ByteBuf bytes ) <nl> { <nl> - Map < String , Integer > ids = FluidRegistry . getRegisteredFluidIDs ( ) ; <nl> + Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDs ( ) ; <nl> bytes . writeInt ( ids . size ( ) ) ; <nl> - for ( Map . Entry < String , Integer > entry : ids . entrySet ( ) ) <nl> + for ( Map . Entry < Fluid , Integer > entry : ids . entrySet ( ) ) <nl> { <nl> - ByteBufUtils . writeUTF8String ( bytes , entry . getKey ( ) ) ; <nl> + ByteBufUtils . writeUTF8String ( bytes , entry . getKey ( ) . getName ( ) ) ; <nl> bytes . writeInt ( entry . getValue ( ) ) ; <nl> } <nl> } <nl> @ @ - 60 , 7 + 58 , 7 @ @ public abstract class ForgeMessage { <nl> for ( int i = 0 ; i < listSize ; i + + ) { <nl> String fluidName = ByteBufUtils . readUTF8String ( bytes ) ; <nl> int fluidId = bytes . readInt ( ) ; <nl> - fluidIds . put ( fluidName , fluidId ) ; <nl> + fluidIds . put ( FluidRegistry . getFluid ( fluidName ) , fluidId ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java b / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java <nl> index 014fec0 . . 2bda1e3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> protected float quantaPerBlockFloat = 8F ; <nl> protected int density = 1 ; <nl> protected int densityDir = - 1 ; <nl> - 	 protected int temperature = 295 ; <nl> + 	 protected int temperature = 300 ; <nl> <nl> protected int tickRate = 20 ; <nl> protected int renderPass = 1 ; <nl> @ @ - 227 , 6 + 227 , 12 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> } <nl> <nl> @ Override <nl> + public boolean canPlaceBlockAt ( World world , int x , int y , int z ) <nl> + { <nl> + return canDisplace ( world , x , y , z ) ; <nl> + } <nl> + <nl> + @ Override <nl> public boolean getBlocksMovement ( IBlockAccess world , int x , int y , int z ) <nl> { <nl> return true ; <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> index 8ef8b9b . . 548e82e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> @ @ - 33 , 7 + 33 , 7 @ @ import net . minecraft . item . EnumRarity ; <nl> * <nl> * / <nl> public class Fluid <nl> - { <nl> + { 	 <nl> / * * The unique identification name for this fluid . * / <nl> protected final String fluidName ; <nl> <nl> @ @ - 65 , 13 + 65 , 17 @ @ public class Fluid <nl> * <nl> * Default value is approximately the real - life room temperature of water in degrees Kelvin . <nl> * / <nl> - protected int temperature = 295 ; <nl> + protected int temperature = 300 ; <nl> <nl> / * * <nl> * Viscosity ( " thickness " ) of the fluid - completely arbitrary ; negative values are not <nl> * permissible . <nl> * <nl> * Default value is approximately the real - life density of water in m / s ^ 2 ( x10 ^ - 3 ) . <nl> + * <nl> + * Higher viscosity means that a fluid flows more slowly , like molasses . <nl> + * Lower viscosity means that a fluid flows more quickly , like helium . <nl> + * <nl> * / <nl> protected int viscosity = 1000 ; <nl> <nl> @ @ - 318 , 19 + 322 , 4 @ @ public class Fluid <nl> public int getColor ( World world , int x , int y , int z ) { return getColor ( ) ; } <nl> public IIcon getIcon ( World world , int x , int y , int z ) { return getIcon ( ) ; } <nl> <nl> - private static Map < String , String > legacyNames = Maps . newHashMap ( ) ; <nl> - static String convertLegacyName ( String fluidName ) <nl> - { <nl> - return fluidName ! = null & & legacyNames . containsKey ( fluidName ) ? legacyNames . get ( fluidName ) : fluidName ; <nl> - } <nl> - <nl> - / * * <nl> - * Register a legacy liquid name with the Fluids system <nl> - * @ param legacyName The legacy name to recognize <nl> - * @ param canonicalName The canonical fluid name it will become <nl> - * / <nl> - public static void registerLegacyName ( String legacyName , String canonicalName ) <nl> - { <nl> - legacyNames . put ( legacyName . toLowerCase ( Locale . ENGLISH ) , canonicalName ) ; <nl> - } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> index 043267c . . 5ff1336 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> @ @ - 34 , 15 + 34 , 15 @ @ public abstract class FluidContainerRegistry <nl> private static class ContainerKey <nl> { <nl> ItemStack container ; <nl> - FluidStack fluid ; <nl> + FluidStack stack ; <nl> private ContainerKey ( ItemStack container ) <nl> { <nl> this . container = container ; <nl> } <nl> - private ContainerKey ( ItemStack container , FluidStack fluid ) <nl> + private ContainerKey ( ItemStack container , FluidStack stack ) <nl> { <nl> this ( container ) ; <nl> - this . fluid = fluid ; <nl> + this . stack = stack ; <nl> } <nl> @ Override <nl> public int hashCode ( ) <nl> @ @ - 50 , 8 + 50 , 8 @ @ public abstract class FluidContainerRegistry <nl> int code = 1 ; <nl> code = 31 * code + container . getItem ( ) . hashCode ( ) ; <nl> code = 31 * code + container . getItemDamage ( ) ; <nl> - if ( fluid ! = null ) <nl> - code = 31 * code + fluid . fluidID ; <nl> + if ( stack ! = null ) <nl> + code = 31 * code + stack . hashCode ( ) ; <nl> return code ; <nl> } <nl> @ Override <nl> @ @ - 61 , 10 + 61 , 10 @ @ public abstract class FluidContainerRegistry <nl> ContainerKey ck = ( ContainerKey ) o ; <nl> if ( container . getItem ( ) ! = ck . container . getItem ( ) ) return false ; <nl> if ( container . getItemDamage ( ) ! = ck . container . getItemDamage ( ) ) return false ; <nl> - if ( fluid = = null & & ck . fluid ! = null ) return false ; <nl> - if ( fluid ! = null & & ck . fluid = = null ) return false ; <nl> - if ( fluid = = null & & ck . fluid = = null ) return true ; <nl> - if ( fluid . fluidID ! = ck . fluid . fluidID ) return false ; <nl> + if ( stack = = null & & ck . stack ! = null ) return false ; <nl> + if ( stack ! = null & & ck . stack = = null ) return false ; <nl> + if ( stack = = null & & ck . stack = = null ) return true ; <nl> + if ( stack . fluid ! = ck . stack . fluid ) return false ; <nl> return true ; <nl> } <nl> } <nl> @ @ - 361 , 7 + 361 , 6 @ @ public abstract class FluidContainerRegistry <nl> public final ItemStack filledContainer ; <nl> public final ItemStack emptyContainer ; <nl> <nl> - <nl> public FluidContainerData ( FluidStack stack , ItemStack filledContainer , ItemStack emptyContainer ) <nl> { <nl> this ( stack , filledContainer , emptyContainer , false ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> index 4fb50d1 . . 89476af 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> @ @ - 25 , 8 + 25 , 8 @ @ public abstract class FluidRegistry <nl> { <nl> static int maxID = 0 ; <nl> <nl> - static HashMap < String , Fluid > fluids = Maps . newHashMap ( ) ; <nl> - static BiMap < String , Integer > fluidIDs = HashBiMap . create ( ) ; <nl> + static BiMap < String , Fluid > fluids = HashBiMap . create ( ) ; <nl> + static BiMap < Fluid , Integer > fluidIDs = HashBiMap . create ( ) ; <nl> static BiMap < Block , Fluid > fluidBlocks ; <nl> <nl> public static final Fluid WATER = new Fluid ( " water " ) { <nl> @ @ - 57 , 7 + 57 , 7 @ @ public abstract class FluidRegistry <nl> * Called by Forge to prepare the ID map for server - > client sync . <nl> * Modders , DO NOT call this . <nl> * / <nl> - public static void initFluidIDs ( BiMap < String , Integer > newfluidIDs ) <nl> + public static void initFluidIDs ( BiMap < Fluid , Integer > newfluidIDs ) <nl> { <nl> maxID = newfluidIDs . size ( ) ; <nl> fluidIDs . clear ( ) ; <nl> @ @ - 78 , 7 + 78 , 7 @ @ public abstract class FluidRegistry <nl> return false ; <nl> } <nl> fluids . put ( fluid . getName ( ) , fluid ) ; <nl> - fluidIDs . put ( fluid . getName ( ) , + + maxID ) ; <nl> + fluidIDs . put ( fluid , + + maxID ) ; <nl> <nl> MinecraftForge . EVENT _ BUS . post ( new FluidRegisterEvent ( fluid . getName ( ) , maxID ) ) ; <nl> return true ; <nl> @ @ - 86 , 12 + 86 , 12 @ @ public abstract class FluidRegistry <nl> <nl> public static boolean isFluidRegistered ( Fluid fluid ) <nl> { <nl> - return fluidIDs . containsKey ( fluid . getName ( ) ) ; <nl> + return fluids . containsKey ( fluid . getName ( ) ) ; <nl> } <nl> <nl> public static boolean isFluidRegistered ( String fluidName ) <nl> { <nl> - return fluidIDs . containsKey ( fluidName ) ; <nl> + return fluids . containsKey ( fluidName ) ; <nl> } <nl> <nl> public static Fluid getFluid ( String fluidName ) <nl> @ @ - 101 , 31 + 101 , 36 @ @ public abstract class FluidRegistry <nl> <nl> public static Fluid getFluid ( int fluidID ) <nl> { <nl> - return fluids . get ( getFluidName ( fluidID ) ) ; <nl> + 	 return fluidIDs . inverse ( ) . get ( fluidID ) ; <nl> } <nl> <nl> - public static String getFluidName ( int fluidID ) <nl> + public static int getFluidID ( Fluid fluid ) <nl> { <nl> - return fluidIDs . inverse ( ) . get ( fluidID ) ; <nl> + 	 return fluidIDs . get ( fluid ) ; <nl> } <nl> <nl> - public static String getFluidName ( FluidStack stack ) <nl> + public static int getFluidID ( String fluidName ) <nl> { <nl> - return getFluidName ( stack . fluidID ) ; <nl> + 	 return fluidIDs . get ( getFluid ( fluidName ) ) ; <nl> } <nl> <nl> - public static int getFluidID ( String fluidName ) <nl> + public static String getFluidName ( Fluid fluid ) <nl> + { <nl> + return fluids . inverse ( ) . get ( fluid ) ; <nl> + } <nl> + <nl> + public static String getFluidName ( FluidStack stack ) <nl> { <nl> - return fluidIDs . get ( fluidName ) ; <nl> + return getFluidName ( stack . fluid ) ; <nl> } <nl> <nl> public static FluidStack getFluidStack ( String fluidName , int amount ) <nl> { <nl> - if ( ! fluidIDs . containsKey ( fluidName ) ) <nl> + if ( ! fluids . containsKey ( fluidName ) ) <nl> { <nl> return null ; <nl> } <nl> - return new FluidStack ( getFluidID ( fluidName ) , amount ) ; <nl> + return new FluidStack ( getFluid ( fluidName ) , amount ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 137 , 9 + 142 , 9 @ @ public abstract class FluidRegistry <nl> } <nl> <nl> / * * <nl> - * Returns a read - only map containing Fluid Names and their associated IDs . <nl> + * Returns a read - only map containing Fluid IDs and their associated Fluids . <nl> * / <nl> - public static Map < String , Integer > getRegisteredFluidIDs ( ) <nl> + public static Map < Fluid , Integer > getRegisteredFluidIDs ( ) <nl> { <nl> return ImmutableMap . copyOf ( fluidIDs ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidStack . java b / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> index 4de7a26 . . f23bb0b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> @ @ - 18 , 25 + 18 , 19 @ @ import net . minecraft . nbt . NBTTagCompound ; <nl> * / <nl> public class FluidStack <nl> { <nl> - public int fluidID ; <nl> + 	 public final Fluid fluid ; <nl> public int amount ; <nl> public NBTTagCompound tag ; <nl> <nl> public FluidStack ( Fluid fluid , int amount ) <nl> { <nl> - this . fluidID = fluid . getID ( ) ; <nl> + 	 this . fluid = fluid ; <nl> this . amount = amount ; <nl> } <nl> <nl> - public FluidStack ( int fluidID , int amount ) <nl> - { <nl> - this . fluidID = fluidID ; <nl> - this . amount = amount ; <nl> - } <nl> - <nl> - public FluidStack ( int fluidID , int amount , NBTTagCompound nbt ) <nl> + public FluidStack ( Fluid fluid , int amount , NBTTagCompound nbt ) <nl> { <nl> - this ( fluidID , amount ) ; <nl> + this ( fluid , amount ) ; <nl> <nl> if ( nbt ! = null ) <nl> { <nl> @ @ - 46 , 9 + 40 , 23 @ @ public class FluidStack <nl> <nl> public FluidStack ( FluidStack stack , int amount ) <nl> { <nl> - this ( stack . fluidID , amount , stack . tag ) ; <nl> + this ( stack . fluid , amount , stack . tag ) ; <nl> + } <nl> + <nl> + / / To be removed in 1 . 8 <nl> + @ Deprecated <nl> + public FluidStack ( int fluidID , int amount ) <nl> + { <nl> + 	 this ( FluidRegistry . getFluid ( fluidID ) , amount ) ; <nl> } <nl> <nl> + / / To be removed in 1 . 8 <nl> + @ Deprecated <nl> + public FluidStack ( int fluidID , int amount , NBTTagCompound nbt ) <nl> + { <nl> + 	 this ( FluidRegistry . getFluid ( fluidID ) , amount , nbt ) ; <nl> + } <nl> + <nl> / * * <nl> * This provides a safe method for retrieving a FluidStack - if the Fluid is invalid , the stack <nl> * will return as null . <nl> @ @ - 60 , 32 + 68 , 23 @ @ public class FluidStack <nl> return null ; <nl> } <nl> String fluidName = nbt . getString ( " FluidName " ) ; <nl> - if ( Strings . isNullOrEmpty ( fluidName ) ) <nl> - { <nl> - fluidName = nbt . hasKey ( " LiquidName " ) ? nbt . getString ( " LiquidName " ) . toLowerCase ( Locale . ENGLISH ) : null ; <nl> - fluidName = Fluid . convertLegacyName ( fluidName ) ; <nl> - } <nl> <nl> - if ( fluidName = = null | | FluidRegistry . getFluid ( fluidName ) = = null ) <nl> + if ( fluidName = = null | | FluidRegistry . getFluid ( fluidName ) = = null ) <nl> { <nl> return null ; <nl> } <nl> - FluidStack stack = new FluidStack ( FluidRegistry . getFluidID ( fluidName ) , nbt . getInteger ( " Amount " ) ) ; <nl> + FluidStack stack = new FluidStack ( FluidRegistry . getFluid ( fluidName ) , nbt . getInteger ( " Amount " ) ) ; <nl> <nl> if ( nbt . hasKey ( " Tag " ) ) <nl> { <nl> stack . tag = nbt . getCompoundTag ( " Tag " ) ; <nl> } <nl> - else if ( nbt . hasKey ( " extra " ) ) <nl> - { <nl> - stack . tag = nbt . getCompoundTag ( " extra " ) ; <nl> - } <nl> return stack ; <nl> } <nl> <nl> public NBTTagCompound writeToNBT ( NBTTagCompound nbt ) <nl> { <nl> - nbt . setString ( " FluidName " , FluidRegistry . getFluidName ( fluidID ) ) ; <nl> + nbt . setString ( " FluidName " , FluidRegistry . getFluidName ( fluid ) ) ; <nl> nbt . setInteger ( " Amount " , amount ) ; <nl> <nl> if ( tag ! = null ) <nl> @ @ - 97 , 9 + 96 , 14 @ @ public class FluidStack <nl> <nl> public final Fluid getFluid ( ) <nl> { <nl> - return FluidRegistry . getFluid ( fluidID ) ; <nl> + return fluid ; <nl> } <nl> <nl> + public final int getFluidID ( ) <nl> + { <nl> + 	 return FluidRegistry . getFluidID ( fluid ) ; <nl> + } <nl> + <nl> public String getLocalizedName ( ) <nl> { <nl> return this . getFluid ( ) . getLocalizedName ( this ) ; <nl> @ @ - 115 , 7 + 119 , 7 @ @ public class FluidStack <nl> * / <nl> public FluidStack copy ( ) <nl> { <nl> - return new FluidStack ( fluidID , amount , tag ) ; <nl> + return new FluidStack ( fluid , amount , tag ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 127 , 7 + 131 , 7 @ @ public class FluidStack <nl> * / <nl> public boolean isFluidEqual ( FluidStack other ) <nl> { <nl> - return other ! = null & & fluidID = = other . fluidID & & isFluidStackTagEqual ( other ) ; <nl> + return other ! = null & & fluid = = other . fluid & & isFluidStackTagEqual ( other ) ; <nl> } <nl> <nl> private boolean isFluidStackTagEqual ( FluidStack other ) <nl> @ @ - 192 , 7 + 196 , 12 @ @ public class FluidStack <nl> @ Override <nl> public final int hashCode ( ) <nl> { <nl> - return fluidID ; <nl> + 	 int code = 1 ; <nl> + 	 code = 31 * code + fluid . hashCode ( ) ; <nl> + 	 code = 31 * code + amount ; <nl> + 	 if ( tag ! = null ) <nl> + 	 	 code = 31 * code + tag . hashCode ( ) ; <nl> + 	 return code ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java b / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java <nl> index 9cb87bf . . 706f608 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import net . minecraft . world . World ; <nl> * / <nl> public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> { <nl> + / * <nl> protected final static Map < Integer , Boolean > defaultDisplacementIds = new HashMap < Integer , Boolean > ( ) ; <nl> <nl> static <nl> @ @ - 45 , 10 + 46 , 11 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> protected int maxScaledLight = 0 ; <nl> <nl> protected final String fluidName ; <nl> - <nl> + * / <nl> public BlockFluidBase ( int id , Fluid fluid , Material material ) <nl> { <nl> - super ( id , material ) ; <nl> + super ( material ) ; <nl> + / * <nl> this . setBlockBounds ( 0 . 0F , 0 . 0F , 0 . 0F , 1 . 0F , 1 . 0F , 1 . 0F ) ; <nl> this . setTickRandomly ( true ) ; <nl> this . disableStats ( ) ; <nl> @ @ - 62 , 8 + 64 , 9 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> fluid . setBlockID ( id ) ; <nl> <nl> displacementIds . putAll ( defaultDisplacementIds ) ; <nl> + * / <nl> } <nl> - <nl> + / * <nl> public BlockFluidBase setQuantaPerBlock ( int quantaPerBlock ) <nl> { <nl> if ( quantaPerBlock > 16 | | quantaPerBlock < 1 ) quantaPerBlock = 8 ; <nl> @ @ - 107 , 7 + 110 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> <nl> / * * <nl> * Returns true if the block at ( x , y , z ) is displaceable . Does not displace the block . <nl> - * / <nl> + * / <nl> public boolean canDisplace ( IBlockAccess world , int x , int y , int z ) <nl> { <nl> if ( world . isAirBlock ( x , y , z ) ) return true ; <nl> @ @ - 148 , 7 + 151 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> <nl> / * * <nl> * Attempt to displace the block at ( x , y , z ) , return true if it was displaced . <nl> - * / <nl> + * / <nl> public boolean displaceIfPossible ( World world , int x , int y , int z ) <nl> { <nl> if ( world . isAirBlock ( x , y , z ) ) <nl> @ @ - 202 , 7 + 205 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> <nl> public abstract int getMaxRenderHeightMeta ( ) ; <nl> <nl> - / * BLOCK FUNCTIONS * / <nl> + / * BLOCK FUNCTIONS * / <nl> @ Override <nl> public void onBlockAdded ( World world , int x , int y , int z ) <nl> { <nl> @ @ - 329 , 7 + 332 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> return mat = = this . blockMaterial ? false : super . shouldSideBeRendered ( world , x , y , z , side ) ; <nl> } <nl> <nl> - / * FLUID FUNCTIONS * / <nl> + / * FLUID FUNCTIONS * / <nl> public static final int getDensity ( IBlockAccess world , int x , int y , int z ) <nl> { <nl> Block block = Block . blocksList [ world . getBlockId ( x , y , z ) ] ; <nl> @ @ - 446 , 7 + 449 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> return vec ; <nl> } <nl> <nl> - / * IFluidBlock * / <nl> + / * IFluidBlock * / <nl> @ Override <nl> public Fluid getFluid ( ) <nl> { <nl> @ @ - 461 , 4 + 464 , 5 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock <nl> if ( remaining > 1 ) remaining = 1 . 0f ; <nl> return remaining * ( density > 0 ? 1 : - 1 ) ; <nl> } <nl> + * / <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java b / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java <nl> index 5af4160 . . dd323bb 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java <nl> @ @ - 17 , 17 + 17 , 18 @ @ import net . minecraft . world . World ; <nl> * / <nl> public class BlockFluidClassic extends BlockFluidBase <nl> { <nl> + / * <nl> protected boolean [ ] isOptimalFlowDirection = new boolean [ 4 ] ; <nl> protected int [ ] flowCost = new int [ 4 ] ; <nl> <nl> protected FluidStack stack ; <nl> - <nl> + * / <nl> public BlockFluidClassic ( int id , Fluid fluid , Material material ) <nl> { <nl> super ( id , fluid , material ) ; <nl> - stack = new FluidStack ( fluid , FluidContainerRegistry . BUCKET _ VOLUME ) ; <nl> + / / stack = new FluidStack ( fluid , FluidContainerRegistry . BUCKET _ VOLUME ) ; <nl> } <nl> - <nl> + / * <nl> public BlockFluidClassic setFluidStack ( FluidStack stack ) <nl> { <nl> this . stack = stack ; <nl> @ @ - 328 , 11 + 329 , 12 @ @ public class BlockFluidClassic extends BlockFluidBase <nl> } <nl> return quantaRemaining > = compare ? quantaRemaining : compare ; <nl> } <nl> - <nl> + * / <nl> / * IFluidBlock * / <nl> @ Override <nl> public FluidStack drain ( World world , int x , int y , int z , boolean doDrain ) <nl> { <nl> + / * <nl> if ( ! isSourceBlock ( world , x , y , z ) ) <nl> { <nl> return null ; <nl> @ @ - 344 , 11 + 346 , 15 @ @ public class BlockFluidClassic extends BlockFluidBase <nl> } <nl> <nl> return stack . copy ( ) ; <nl> + * / <nl> + return null ; <nl> } <nl> <nl> @ Override <nl> public boolean canDrain ( World world , int x , int y , int z ) <nl> { <nl> - return isSourceBlock ( world , x , y , z ) ; <nl> + return false ; / / isSourceBlock ( world , x , y , z ) ; <nl> } <nl> + @ Override public Fluid getFluid ( ) { return null ; } <nl> + @ Override public float getFilledPercentage ( World world , int x , int y , int z ) { return 0 ; } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java b / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java <nl> index 0dc2d0b . . 64128b6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ public class BlockFluidFinite extends BlockFluidBase <nl> { <nl> super ( id , fluid , material ) ; <nl> } <nl> - <nl> + / * <nl> @ Override <nl> public int getQuantaValue ( IBlockAccess world , int x , int y , int z ) <nl> { <nl> @ @ - 320 , 4 + 320 , 6 @ @ public class BlockFluidFinite extends BlockFluidBase <nl> { <nl> return false ; <nl> } <nl> + @ Override public Fluid getFluid ( ) { return null ; } <nl> + @ Override public float getFilledPercentage ( World world , int x , int y , int z ) { return 0 ; } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> index 8a025e3 . . bbc9555 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import net . minecraft . block . Block ; <nl> import net . minecraft . util . IIcon ; <nl> import net . minecraft . util . StatCollector ; <nl> import net . minecraft . world . World ; <nl> - import net . minecraftforge . common . ForgeDummyContainer ; <nl> + import net . minecraftforge . common . ForgeModContainer ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . LoaderException ; <nl> import net . minecraft . item . EnumRarity ; <nl> @ @ - 116 , 7 + 116 , 7 @ @ public class Fluid <nl> { <nl> this . block = block ; <nl> } <nl> - else if ( ! ForgeDummyContainer . forceDuplicateFluidBlockCrash ) <nl> + else if ( ! ForgeModContainer . forceDuplicateFluidBlockCrash ) <nl> { <nl> FMLLog . warning ( " A mod has attempted to assign Block " + block + " to the Fluid ' " + fluidName + " ' but this Fluid has already been linked to BlockID " <nl> + this . block + " . Configure your mods to prevent this from happening . " ) ; <nl> @ @ - 172 , 10 + 172 , 12 @ @ public class Fluid <nl> return this . fluidName ; <nl> } <nl> <nl> + / * <nl> public final int getID ( ) <nl> { <nl> return FluidRegistry . getFluidID ( this . fluidName ) ; <nl> } <nl> + * / <nl> <nl> public final Block getBlock ( ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> index 64f8bff . . 42835cf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> + import net . minecraft . init . Items ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> @ @ - 24 , 20 + 25 , 21 @ @ import net . minecraftforge . event . Event ; <nl> * / <nl> public abstract class FluidContainerRegistry <nl> { <nl> + / * <nl> private static Map < List , FluidContainerData > containerFluidMap = new HashMap ( ) ; <nl> private static Map < List , FluidContainerData > filledContainerMap = new HashMap ( ) ; <nl> private static Set < List > emptyContainers = new HashSet ( ) ; <nl> <nl> public static final int BUCKET _ VOLUME = 1000 ; <nl> - public static final ItemStack EMPTY _ BUCKET = new ItemStack ( Item . bucketEmpty ) ; <nl> - public static final ItemStack EMPTY _ BOTTLE = new ItemStack ( Item . glassBottle ) ; <nl> - private static final ItemStack NULL _ EMPTYCONTAINER = new ItemStack ( Item . bucketEmpty ) ; <nl> + public static final ItemStack EMPTY _ BUCKET = new ItemStack ( Items . bucket ) ; <nl> + public static final ItemStack EMPTY _ BOTTLE = new ItemStack ( Items . glass _ bottle ) ; <nl> + private static final ItemStack NULL _ EMPTYCONTAINER = new ItemStack ( Items . bucket ) ; <nl> <nl> static <nl> { <nl> - registerFluidContainer ( FluidRegistry . WATER , new ItemStack ( Item . bucketWater ) , EMPTY _ BUCKET ) ; <nl> - registerFluidContainer ( FluidRegistry . LAVA , new ItemStack ( Item . bucketLava ) , EMPTY _ BUCKET ) ; <nl> - registerFluidContainer ( FluidRegistry . WATER , new ItemStack ( Item . potion ) , EMPTY _ BOTTLE ) ; <nl> + registerFluidContainer ( FluidRegistry . WATER , new ItemStack ( Items . water _ bucket ) , EMPTY _ BUCKET ) ; <nl> + registerFluidContainer ( FluidRegistry . LAVA , new ItemStack ( Items . lava _ bucket ) , EMPTY _ BUCKET ) ; <nl> + registerFluidContainer ( FluidRegistry . WATER , new ItemStack ( Items . potionitem ) , EMPTY _ BOTTLE ) ; <nl> } <nl> <nl> private FluidContainerRegistry ( ) { } <nl> @ @ - 52 , 7 + 54 , 7 @ @ public abstract class FluidContainerRegistry <nl> * @ param emptyContainer <nl> * ItemStack representing the container when it is empty . <nl> * @ return True if container was successfully registered ; false if it already is . <nl> - * / <nl> + * / <nl> public static boolean registerFluidContainer ( FluidStack stack , ItemStack filledContainer , ItemStack emptyContainer ) <nl> { <nl> return registerFluidContainer ( new FluidContainerData ( stack , filledContainer , emptyContainer ) ) ; <nl> @ @ - 69 , 7 + 71 , 7 @ @ public abstract class FluidContainerRegistry <nl> * @ param emptyContainer <nl> * ItemStack representing the container when it is empty . <nl> * @ return True if container was successfully registered ; false if it already is . <nl> - * / <nl> + * / <nl> public static boolean registerFluidContainer ( Fluid fluid , ItemStack filledContainer , ItemStack emptyContainer ) <nl> { <nl> if ( ! FluidRegistry . isFluidRegistered ( fluid ) ) <nl> @ @ - 87 , 7 + 89 , 7 @ @ public abstract class FluidContainerRegistry <nl> * @ param filledContainer <nl> * ItemStack representing the container when it is full . <nl> * @ return True if container was successfully registered ; false if it already is . <nl> - * / <nl> + * / <nl> public static boolean registerFluidContainer ( FluidStack stack , ItemStack filledContainer ) <nl> { <nl> return registerFluidContainer ( new FluidContainerData ( stack , filledContainer , null , true ) ) ; <nl> @ @ - 102 , 7 + 104 , 7 @ @ public abstract class FluidContainerRegistry <nl> * @ param filledContainer <nl> * ItemStack representing the container when it is full . <nl> * @ return True if container was successfully registered ; false if it already is . <nl> - * / <nl> + * / <nl> public static boolean registerFluidContainer ( Fluid fluid , ItemStack filledContainer ) <nl> { <nl> if ( ! FluidRegistry . isFluidRegistered ( fluid ) ) <nl> @ @ - 118 , 19 + 120 , 19 @ @ public abstract class FluidContainerRegistry <nl> * @ param data <nl> * See { @ link FluidContainerData } . <nl> * @ return True if container was successfully registered ; false if it already is . <nl> - * / <nl> + * / <nl> public static boolean registerFluidContainer ( FluidContainerData data ) <nl> { <nl> if ( isFilledContainer ( data . filledContainer ) ) <nl> { <nl> return false ; <nl> } <nl> - containerFluidMap . put ( Arrays . asList ( data . filledContainer . itemID , data . filledContainer . getItemDamage ( ) ) , data ) ; <nl> + containerFluidMap . put ( Arrays . asList ( data . filledContainer , data . filledContainer . getItemDamage ( ) ) , data ) ; <nl> <nl> if ( data . emptyContainer ! = null & & data . emptyContainer ! = NULL _ EMPTYCONTAINER ) <nl> { <nl> - filledContainerMap . put ( Arrays . asList ( data . emptyContainer . itemID , data . emptyContainer . getItemDamage ( ) , data . fluid . fluidID ) , data ) ; <nl> - emptyContainers . add ( Arrays . asList ( data . emptyContainer . itemID , data . emptyContainer . getItemDamage ( ) ) ) ; <nl> + filledContainerMap . put ( Arrays . asList ( data . emptyContainer , data . emptyContainer . getItemDamage ( ) , data . fluid . fluidID ) , data ) ; <nl> + emptyContainers . add ( Arrays . asList ( data . emptyContainer , data . emptyContainer . getItemDamage ( ) ) ) ; <nl> } <nl> <nl> MinecraftForge . EVENT _ BUS . post ( new FluidContainerRegisterEvent ( data ) ) ; <nl> @ @ - 143 , 7 + 145 , 7 @ @ public abstract class FluidContainerRegistry <nl> * @ param container <nl> * The fluid container . <nl> * @ return FluidStack representing stored fluid . <nl> - * / <nl> + * / <nl> public static FluidStack getFluidForFilledItem ( ItemStack container ) <nl> { <nl> if ( container = = null ) <nl> @ @ - 151 , 7 + 153 , 7 @ @ public abstract class FluidContainerRegistry <nl> return null ; <nl> } <nl> <nl> - FluidContainerData data = containerFluidMap . get ( Arrays . asList ( container . itemID , container . getItemDamage ( ) ) ) ; <nl> + FluidContainerData data = containerFluidMap . get ( Arrays . asList ( container , container . getItemDamage ( ) ) ) ; <nl> return data = = null ? null : data . fluid . copy ( ) ; <nl> } <nl> <nl> @ @ - 165 , 7 + 167 , 7 @ @ public abstract class FluidContainerRegistry <nl> * @ param container <nl> * ItemStack representing the empty container . <nl> * @ return Filled container if successful , otherwise null . <nl> - * / <nl> + * / <nl> public static ItemStack fillFluidContainer ( FluidStack fluid , ItemStack container ) <nl> { <nl> if ( container = = null | | fluid = = null ) <nl> @ @ - 173 , 7 + 175 , 7 @ @ public abstract class FluidContainerRegistry <nl> return null ; <nl> } <nl> <nl> - FluidContainerData data = filledContainerMap . get ( Arrays . asList ( container . itemID , container . getItemDamage ( ) , fluid . fluidID ) ) ; <nl> + FluidContainerData data = filledContainerMap . get ( Arrays . asList ( container , container . getItemDamage ( ) , fluid . fluidID ) ) ; <nl> if ( data ! = null & & fluid . amount > = data . fluid . amount ) <nl> { <nl> return data . filledContainer . copy ( ) ; <nl> @ @ - 183 , 7 + 185 , 7 @ @ public abstract class FluidContainerRegistry <nl> <nl> / * * <nl> * Determines if a container holds a specific fluid . <nl> - * / <nl> + * / <nl> public static boolean containsFluid ( ItemStack container , FluidStack fluid ) <nl> { <nl> if ( container = = null | | fluid = = null ) <nl> @ @ - 191 , 7 + 193 , 7 @ @ public abstract class FluidContainerRegistry <nl> return false ; <nl> } <nl> <nl> - FluidContainerData data = filledContainerMap . get ( Arrays . asList ( container . itemID , container . getItemDamage ( ) , fluid . fluidID ) ) ; <nl> + FluidContainerData data = filledContainerMap . get ( Arrays . asList ( container , container . getItemDamage ( ) , fluid . fluidID ) ) ; <nl> return data = = null ? false : data . fluid . isFluidEqual ( fluid ) ; <nl> } <nl> <nl> @ @ - 207 , 7 + 209 , 7 @ @ public abstract class FluidContainerRegistry <nl> return true ; <nl> } <nl> <nl> - FluidContainerData data = containerFluidMap . get ( Arrays . asList ( container . itemID , container . getItemDamage ( ) ) ) ; <nl> + FluidContainerData data = containerFluidMap . get ( Arrays . asList ( container , container . getItemDamage ( ) ) ) ; <nl> return data ! = null & & data . emptyContainer . isItemEqual ( EMPTY _ BUCKET ) ; <nl> } <nl> <nl> @ @ - 218 , 7 + 220 , 7 @ @ public abstract class FluidContainerRegistry <nl> <nl> public static boolean isEmptyContainer ( ItemStack container ) <nl> { <nl> - return container ! = null & & emptyContainers . contains ( Arrays . asList ( container . itemID , container . getItemDamage ( ) ) ) ; <nl> + return container ! = null & & emptyContainers . contains ( Arrays . asList ( container , container . getItemDamage ( ) ) ) ; <nl> } <nl> <nl> public static boolean isFilledContainer ( ItemStack container ) <nl> @ @ - 234 , 7 + 236 , 7 @ @ public abstract class FluidContainerRegistry <nl> / * * <nl> * Wrapper class for the registry entries . Ensures that none of the attempted registrations <nl> * contain null references unless permitted . <nl> - * / <nl> + * / <nl> public static class FluidContainerData <nl> { <nl> public final FluidStack fluid ; <nl> @ @ - 274 , 5 + 276 , 5 @ @ public abstract class FluidContainerRegistry <nl> this . data = data . copy ( ) ; <nl> } <nl> } <nl> - <nl> + * / <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidIdMapPacket . java b / src / main / java / net / minecraftforge / fluids / FluidIdMapPacket . java <nl> index 9c8cc8a . . 344ffaf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidIdMapPacket . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidIdMapPacket . java <nl> @ @ - 4 , 7 + 4 , 6 @ @ package net . minecraftforge . fluids ; <nl> import java . util . Map ; <nl> <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> - import net . minecraft . network . INetworkManager ; <nl> import net . minecraftforge . common . network . ForgePacket ; <nl> <nl> import com . google . common . collect . BiMap ; <nl> @ @ - 15 , 6 + 14 , 7 @ @ import com . google . common . io . ByteStreams ; <nl> <nl> public class FluidIdMapPacket extends ForgePacket <nl> { <nl> + / * <nl> private BiMap < String , Integer > fluidIds = HashBiMap . create ( ) ; <nl> <nl> @ Override <nl> @ @ - 49 , 4 + 49 , 5 @ @ public class FluidIdMapPacket extends ForgePacket <nl> { <nl> FluidRegistry . initFluidIDs ( fluidIds ) ; <nl> } <nl> + * / <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> index 16d011f . . c6e24cc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ import com . google . common . collect . ImmutableMap ; <nl> * / <nl> public abstract class FluidRegistry <nl> { <nl> + / * <nl> static int maxID = 0 ; <nl> <nl> static HashMap < String , Fluid > fluids = new HashMap ( ) ; <nl> @ @ - 52 , 7 + 53 , 7 @ @ public abstract class FluidRegistry <nl> <nl> / * * <nl> * Called by Forge to prepare the ID map for server - > client sync . <nl> - * / <nl> + * / <nl> static void initFluidIDs ( BiMap < String , Integer > newfluidIDs ) <nl> { <nl> maxID = newfluidIDs . size ( ) ; <nl> @ @ - 66 , 7 + 67 , 7 @ @ public abstract class FluidRegistry <nl> * @ param fluid <nl> * The fluid to register . <nl> * @ return True if the fluid was successfully registered ; false if there is a name clash . <nl> - * / <nl> + * / <nl> public static boolean registerFluid ( Fluid fluid ) <nl> { <nl> if ( fluidIDs . containsKey ( fluid . getName ( ) ) ) <nl> @ @ - 126 , 7 + 127 , 7 @ @ public abstract class FluidRegistry <nl> <nl> / * * <nl> * Returns a read - only map containing Fluid Names and their associated Fluids . <nl> - * / <nl> + * / <nl> public static Map < String , Fluid > getRegisteredFluids ( ) <nl> { <nl> return ImmutableMap . copyOf ( fluids ) ; <nl> @ @ - 134 , 7 + 135 , 7 @ @ public abstract class FluidRegistry <nl> <nl> / * * <nl> * Returns a read - only map containing Fluid Names and their associated IDs . <nl> - * / <nl> + * / <nl> public static Map < String , Integer > getRegisteredFluidIDs ( ) <nl> { <nl> return ImmutableMap . copyOf ( fluidIDs ) ; <nl> @ @ - 167 , 4 + 168 , 5 @ @ public abstract class FluidRegistry <nl> this . fluidID = fluidID ; <nl> } <nl> } <nl> + * / <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidStack . java b / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> index c41a9fc . . 2a7fffa 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; <nl> * / <nl> public class FluidStack <nl> { <nl> + / * <nl> public int fluidID ; <nl> public int amount ; <nl> public NBTTagCompound tag ; <nl> @ @ - 52 , 7 + 53 , 7 @ @ public class FluidStack <nl> / * * <nl> * This provides a safe method for retrieving a FluidStack - if the Fluid is invalid , the stack <nl> * will return as null . <nl> - * / <nl> + * / <nl> public static FluidStack loadFluidStackFromNBT ( NBTTagCompound nbt ) <nl> { <nl> if ( nbt = = null ) <nl> @ @ - 102 , 7 + 103 , 7 @ @ public class FluidStack <nl> <nl> / * * <nl> * @ return A copy of this FluidStack <nl> - * / <nl> + * / <nl> public FluidStack copy ( ) <nl> { <nl> return new FluidStack ( fluidID , amount , tag ) ; <nl> @ @ - 114 , 7 + 115 , 7 @ @ public class FluidStack <nl> * @ param other <nl> * The FluidStack for comparison <nl> * @ return true if the Fluids ( IDs and NBT Tags ) are the same <nl> - * / <nl> + * / <nl> public boolean isFluidEqual ( FluidStack other ) <nl> { <nl> return other ! = null & & fluidID = = other . fluidID & & isFluidStackTagEqual ( other ) ; <nl> @ @ - 127 , 7 + 128 , 7 @ @ public class FluidStack <nl> <nl> / * * <nl> * Determines if the NBT Tags are equal . Useful if the FluidIDs are known to be equal . <nl> - * / <nl> + * / <nl> public static boolean areFluidStackTagsEqual ( FluidStack stack1 , FluidStack stack2 ) <nl> { <nl> return stack1 = = null & & stack2 = = null ? true : stack1 = = null | | stack2 = = null ? false : stack1 . isFluidStackTagEqual ( stack2 ) ; <nl> @ @ - 138 , 7 + 139 , 7 @ @ public class FluidStack <nl> * <nl> * @ param other <nl> * @ return true if this FluidStack contains the other FluidStack ( same fluid and > = amount ) <nl> - * / <nl> + * / <nl> public boolean containsFluid ( FluidStack other ) <nl> { <nl> return isFluidEqual ( other ) & & amount > = other . amount ; <nl> @ @ - 150 , 7 + 151 , 7 @ @ public class FluidStack <nl> * @ param other <nl> * - the FluidStack for comparison <nl> * @ return true if the two FluidStacks are exactly the same <nl> - * / <nl> + * / <nl> public boolean isFluidStackIdentical ( FluidStack other ) <nl> { <nl> return isFluidEqual ( other ) & & amount = = other . amount ; <nl> @ @ - 163 , 7 + 164 , 7 @ @ public class FluidStack <nl> * @ param other <nl> * The ItemStack for comparison <nl> * @ return true if the Fluids ( IDs and NBT Tags ) are the same <nl> - * / <nl> + * / <nl> public boolean isFluidEqual ( ItemStack other ) <nl> { <nl> if ( other = = null ) <nl> @ @ - 189 , 7 + 190 , 7 @ @ public class FluidStack <nl> * Default equality comparison for a FluidStack . Same functionality as isFluidEqual ( ) . <nl> * <nl> * This is included for use in data structures . <nl> - * / <nl> + * / <nl> @ Override <nl> public final boolean equals ( Object o ) <nl> { <nl> @ @ - 200 , 4 + 201 , 5 @ @ public class FluidStack <nl> <nl> return isFluidEqual ( ( FluidStack ) o ) ; <nl> } <nl> + * / <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidTank . java b / src / main / java / net / minecraftforge / fluids / FluidTank . java <nl> index 4aa7a9c . . 5132313 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidTank . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidTank . java <nl> @ @ - 12 , 6 + 12 , 13 @ @ import net . minecraft . tileentity . TileEntity ; <nl> * / <nl> public class FluidTank implements IFluidTank <nl> { <nl> + @ Override public FluidStack getFluid ( ) { return null ; } <nl> + @ Override public int getFluidAmount ( ) { return 0 ; } <nl> + @ Override public int getCapacity ( ) { return 0 ; } <nl> + @ Override public FluidTankInfo getInfo ( ) { return null ; } <nl> + @ Override public int fill ( FluidStack resource , boolean doFill ) { return 0 ; } <nl> + @ Override public FluidStack drain ( int maxDrain , boolean doDrain ) { return null ; } <nl> + / * <nl> protected FluidStack fluid ; <nl> protected int capacity ; <nl> protected TileEntity tile ; <nl> @ @ - 69 , 7 + 76 , 7 @ @ public class FluidTank implements IFluidTank <nl> this . capacity = capacity ; <nl> } <nl> <nl> - / * IFluidTank * / <nl> + / * IFluidTank * / <nl> @ Override <nl> public FluidStack getFluid ( ) <nl> { <nl> @ @ - 127 , 7 + 134 , 7 @ @ public class FluidTank implements IFluidTank <nl> <nl> if ( tile ! = null ) <nl> { <nl> - FluidEvent . fireEvent ( new FluidEvent . FluidFillingEvent ( fluid , tile . worldObj , tile . xCoord , tile . yCoord , tile . zCoord , this ) ) ; <nl> + FluidEvent . fireEvent ( new FluidEvent . FluidFillingEvent ( fluid , tile . func _ 145831 _ w ( ) , tile . field _ 145851 _ c , tile . field _ 145848 _ d , tile . field _ 145849 _ e , this ) ) ; <nl> } <nl> return fluid . amount ; <nl> } <nl> @ @ - 150 , 7 + 157 , 7 @ @ public class FluidTank implements IFluidTank <nl> <nl> if ( tile ! = null ) <nl> { <nl> - FluidEvent . fireEvent ( new FluidEvent . FluidFillingEvent ( fluid , tile . worldObj , tile . xCoord , tile . yCoord , tile . zCoord , this ) ) ; <nl> + FluidEvent . fireEvent ( new FluidEvent . FluidFillingEvent ( fluid , tile . func _ 145831 _ w ( ) , tile . field _ 145851 _ c , tile . field _ 145848 _ d , tile . field _ 145849 _ e , this ) ) ; <nl> } <nl> return filled ; <nl> } <nl> @ @ - 180 , 9 + 187 , 10 @ @ public class FluidTank implements IFluidTank <nl> <nl> if ( tile ! = null ) <nl> { <nl> - FluidEvent . fireEvent ( new FluidEvent . FluidDrainingEvent ( fluid , tile . worldObj , tile . xCoord , tile . yCoord , tile . zCoord , this ) ) ; <nl> + FluidEvent . fireEvent ( new FluidEvent . FluidDrainingEvent ( fluid , tile . func _ 145831 _ w ( ) , tile . field _ 145851 _ c , tile . field _ 145848 _ d , tile . field _ 145849 _ e , this ) ) ; <nl> } <nl> } <nl> return stack ; <nl> } <nl> + * / <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / IFluidHandler . java b / src / main / java / net / minecraftforge / fluids / IFluidHandler . java <nl> index bc443e9 . . 9070423 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / IFluidHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / IFluidHandler . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package net . minecraftforge . fluids ; <nl> <nl> - import net . minecraftforge . common . ForgeDirection ; <nl> + import net . minecraftforge . common . util . ForgeDirection ; <nl> <nl> / * * <nl> * Implement this interface on TileEntities which should handle fluids , generally storing them in <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / ItemFluidContainer . java b / src / main / java / net / minecraftforge / fluids / ItemFluidContainer . java <nl> index be615d3 . . d7af425 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / ItemFluidContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / ItemFluidContainer . java <nl> @ @ - 12 , 16 + 12 , 21 @ @ import net . minecraft . nbt . NBTTagCompound ; <nl> * / <nl> public class ItemFluidContainer extends Item implements IFluidContainerItem <nl> { <nl> + @ Override public FluidStack getFluid ( ItemStack container ) { return null ; } <nl> + @ Override public int getCapacity ( ItemStack container ) { return 0 ; } <nl> + @ Override public int fill ( ItemStack container , FluidStack resource , boolean doFill ) { return 0 ; } <nl> + @ Override public FluidStack drain ( ItemStack container , int maxDrain , boolean doDrain ) { return null ; } <nl> + / * <nl> protected int capacity ; <nl> <nl> public ItemFluidContainer ( int itemID ) <nl> { <nl> - super ( itemID ) ; <nl> + super ( ) ; <nl> } <nl> <nl> public ItemFluidContainer ( int itemID , int capacity ) <nl> { <nl> - super ( itemID ) ; <nl> + super ( ) ; <nl> this . capacity = capacity ; <nl> } <nl> <nl> @ @ - 31 , 7 + 36 , 7 @ @ public class ItemFluidContainer extends Item implements IFluidContainerItem <nl> return this ; <nl> } <nl> <nl> - / * IFluidContainerItem * / <nl> + / * IFluidContainerItem * / <nl> @ Override <nl> public FluidStack getFluid ( ItemStack container ) <nl> { <nl> @ @ - 155 , 4 + 160 , 5 @ @ public class ItemFluidContainer extends Item implements IFluidContainerItem <nl> } <nl> return stack ; <nl> } <nl> + * / <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / RenderBlockFluid . java b / src / main / java / net / minecraftforge / fluids / RenderBlockFluid . java <nl> index 7386f52 . . d90fc26 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / RenderBlockFluid . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / RenderBlockFluid . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package net . minecraftforge . fluids ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . client . renderer . RenderBlocks ; <nl> import net . minecraft . client . renderer . Tessellator ; <nl> - import net . minecraft . util . Icon ; <nl> + import net . minecraft . util . IIcon ; <nl> import net . minecraft . util . MathHelper ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import cpw . mods . fml . client . registry . ISimpleBlockRenderingHandler ; <nl> @ @ - 16 , 6 + 16 , 11 @ @ import cpw . mods . fml . client . registry . ISimpleBlockRenderingHandler ; <nl> * / <nl> public class RenderBlockFluid implements ISimpleBlockRenderingHandler <nl> { <nl> + @ Override public void renderInventoryBlock ( Block block , int metadata , int modelID , RenderBlocks renderer ) { } <nl> + @ Override public boolean renderWorldBlock ( IBlockAccess world , int x , int y , int z , Block block , int modelId , RenderBlocks renderer ) { return false ; } <nl> + @ Override public boolean shouldRender3DInInventory ( ) { return false ; } <nl> + @ Override public int getRenderId ( ) { return 0 ; } <nl> + / * <nl> public static RenderBlockFluid instance = new RenderBlockFluid ( ) ; <nl> <nl> static final float LIGHT _ Y _ NEG = 0 . 5F ; <nl> @ @ - 68 , 7 + 73 , 7 @ @ public class RenderBlockFluid implements ISimpleBlockRenderingHandler <nl> return ! world . getBlockMaterial ( x , y , z ) . isSolid ( ) & & world . getBlockId ( x , y - block . densityDir , z ) = = block . blockID ? 1 : block . getQuantaPercentage ( world , x , y , z ) * 0 . 875F ; <nl> } <nl> <nl> - / * ISimpleBlockRenderingHandler * / <nl> + / * ISimpleBlockRenderingHandler * / <nl> @ Override <nl> public void renderInventoryBlock ( Block block , int metadata , int modelID , RenderBlocks renderer ) { } <nl> <nl> @ @ - 324 , 4 + 329 , 5 @ @ public class RenderBlockFluid implements ISimpleBlockRenderingHandler <nl> { <nl> return FluidRegistry . renderIdFluid ; <nl> } <nl> + * / <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / TileFluidHandler . java b / src / main / java / net / minecraftforge / fluids / TileFluidHandler . java <nl> index b399486 . . e69a5c8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / TileFluidHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / TileFluidHandler . java <nl> @ @ - 3 , 7 + 3 , 7 @ @ package net . minecraftforge . fluids ; <nl> <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> - import net . minecraftforge . common . ForgeDirection ; <nl> + import net . minecraftforge . common . util . ForgeDirection ; <nl> <nl> / * * <nl> * Reference Tile Entity implementation of { @ link IFluidHandler } . Use / extend this or write your own . <nl> @ @ - 13 , 6 + 13 , 13 @ @ import net . minecraftforge . common . ForgeDirection ; <nl> * / <nl> public class TileFluidHandler extends TileEntity implements IFluidHandler <nl> { <nl> + @ Override public int fill ( ForgeDirection from , FluidStack resource , boolean doFill ) { return 0 ; } <nl> + @ Override public FluidStack drain ( ForgeDirection from , FluidStack resource , boolean doDrain ) { return null ; } <nl> + @ Override public FluidStack drain ( ForgeDirection from , int maxDrain , boolean doDrain ) { return null ; } <nl> + @ Override public boolean canFill ( ForgeDirection from , Fluid fluid ) { return false ; } <nl> + @ Override public boolean canDrain ( ForgeDirection from , Fluid fluid ) { return false ; } <nl> + @ Override public FluidTankInfo [ ] getTankInfo ( ForgeDirection from ) { return null ; } <nl> + / * <nl> protected FluidTank tank = new FluidTank ( FluidContainerRegistry . BUCKET _ VOLUME ) ; <nl> <nl> @ Override <nl> @ @ - 29 , 7 + 36 , 7 @ @ public class TileFluidHandler extends TileEntity implements IFluidHandler <nl> tank . readFromNBT ( tag ) ; <nl> } <nl> <nl> - / * IFluidHandler * / <nl> + / * IFluidHandler * / <nl> @ Override <nl> public int fill ( ForgeDirection from , FluidStack resource , boolean doFill ) <nl> { <nl> @ @ - 69 , 4 + 76 , 5 @ @ public class TileFluidHandler extends TileEntity implements IFluidHandler <nl> { <nl> return new FluidTankInfo [ ] { tank . getInfo ( ) } ; <nl> } <nl> + * / <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 index 72f44d7 . . 6ba6ccd 100644 
 - - - a / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 + + + b / src / main / java / net / minecraftforge / common / network / ForgeMessage . java 
 @ @ - 1 , 12 + 1 , 10 @ @ 
 package net . minecraftforge . common . network ; 
 
 import java . util . Map ; 
 - 
 + import net . minecraftforge . fluids . Fluid ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 - 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBiMap ; 
 - 
 import cpw . mods . fml . common . network . ByteBufUtils ; 
 import io . netty . buffer . ByteBuf ; 
 
 @ @ - 40 , 15 + 38 , 15 @ @ public abstract class ForgeMessage { 
 } 
 
 public static class FluidIdMapMessage extends ForgeMessage { 
 - BiMap < String , Integer > fluidIds = HashBiMap . create ( ) ; 
 + BiMap < Fluid , Integer > fluidIds = HashBiMap . create ( ) ; 
 @ Override 
 void toBytes ( ByteBuf bytes ) 
 { 
 - Map < String , Integer > ids = FluidRegistry . getRegisteredFluidIDs ( ) ; 
 + Map < Fluid , Integer > ids = FluidRegistry . getRegisteredFluidIDs ( ) ; 
 bytes . writeInt ( ids . size ( ) ) ; 
 - for ( Map . Entry < String , Integer > entry : ids . entrySet ( ) ) 
 + for ( Map . Entry < Fluid , Integer > entry : ids . entrySet ( ) ) 
 { 
 - ByteBufUtils . writeUTF8String ( bytes , entry . getKey ( ) ) ; 
 + ByteBufUtils . writeUTF8String ( bytes , entry . getKey ( ) . getName ( ) ) ; 
 bytes . writeInt ( entry . getValue ( ) ) ; 
 } 
 } 
 @ @ - 60 , 7 + 58 , 7 @ @ public abstract class ForgeMessage { 
 for ( int i = 0 ; i < listSize ; i + + ) { 
 String fluidName = ByteBufUtils . readUTF8String ( bytes ) ; 
 int fluidId = bytes . readInt ( ) ; 
 - fluidIds . put ( fluidName , fluidId ) ; 
 + fluidIds . put ( FluidRegistry . getFluid ( fluidName ) , fluidId ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java b / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java 
 index 014fec0 . . 2bda1e3 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java 
 + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java 
 @ @ - 42 , 7 + 42 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 protected float quantaPerBlockFloat = 8F ; 
 protected int density = 1 ; 
 protected int densityDir = - 1 ; 
 - 	 protected int temperature = 295 ; 
 + 	 protected int temperature = 300 ; 
 
 protected int tickRate = 20 ; 
 protected int renderPass = 1 ; 
 @ @ - 227 , 6 + 227 , 12 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 } 
 
 @ Override 
 + public boolean canPlaceBlockAt ( World world , int x , int y , int z ) 
 + { 
 + return canDisplace ( world , x , y , z ) ; 
 + } 
 + 
 + @ Override 
 public boolean getBlocksMovement ( IBlockAccess world , int x , int y , int z ) 
 { 
 return true ; 
 diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 index 8ef8b9b . . 548e82e 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java 
 + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 @ @ - 33 , 7 + 33 , 7 @ @ import net . minecraft . item . EnumRarity ; 
 * 
 * / 
 public class Fluid 
 - { 
 + { 	 
 / * * The unique identification name for this fluid . * / 
 protected final String fluidName ; 
 
 @ @ - 65 , 13 + 65 , 17 @ @ public class Fluid 
 * 
 * Default value is approximately the real - life room temperature of water in degrees Kelvin . 
 * / 
 - protected int temperature = 295 ; 
 + protected int temperature = 300 ; 
 
 / * * 
 * Viscosity ( " thickness " ) of the fluid - completely arbitrary ; negative values are not 
 * permissible . 
 * 
 * Default value is approximately the real - life density of water in m / s ^ 2 ( x10 ^ - 3 ) . 
 + * 
 + * Higher viscosity means that a fluid flows more slowly , like molasses . 
 + * Lower viscosity means that a fluid flows more quickly , like helium . 
 + * 
 * / 
 protected int viscosity = 1000 ; 
 
 @ @ - 318 , 19 + 322 , 4 @ @ public class Fluid 
 public int getColor ( World world , int x , int y , int z ) { return getColor ( ) ; } 
 public IIcon getIcon ( World world , int x , int y , int z ) { return getIcon ( ) ; } 
 
 - private static Map < String , String > legacyNames = Maps . newHashMap ( ) ; 
 - static String convertLegacyName ( String fluidName ) 
 - { 
 - return fluidName ! = null & & legacyNames . containsKey ( fluidName ) ? legacyNames . get ( fluidName ) : fluidName ; 
 - } 
 - 
 - / * * 
 - * Register a legacy liquid name with the Fluids system 
 - * @ param legacyName The legacy name to recognize 
 - * @ param canonicalName The canonical fluid name it will become 
 - * / 
 - public static void registerLegacyName ( String legacyName , String canonicalName ) 
 - { 
 - legacyNames . put ( legacyName . toLowerCase ( Locale . ENGLISH ) , canonicalName ) ; 
 - } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 index 043267c . . 5ff1336 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 @ @ - 34 , 15 + 34 , 15 @ @ public abstract class FluidContainerRegistry 
 private static class ContainerKey 
 { 
 ItemStack container ; 
 - FluidStack fluid ; 
 + FluidStack stack ; 
 private ContainerKey ( ItemStack container ) 
 { 
 this . container = container ; 
 } 
 - private ContainerKey ( ItemStack container , FluidStack fluid ) 
 + private ContainerKey ( ItemStack container , FluidStack stack ) 
 { 
 this ( container ) ; 
 - this . fluid = fluid ; 
 + this . stack = stack ; 
 } 
 @ Override 
 public int hashCode ( ) 
 @ @ - 50 , 8 + 50 , 8 @ @ public abstract class FluidContainerRegistry 
 int code = 1 ; 
 code = 31 * code + container . getItem ( ) . hashCode ( ) ; 
 code = 31 * code + container . getItemDamage ( ) ; 
 - if ( fluid ! = null ) 
 - code = 31 * code + fluid . fluidID ; 
 + if ( stack ! = null ) 
 + code = 31 * code + stack . hashCode ( ) ; 
 return code ; 
 } 
 @ Override 
 @ @ - 61 , 10 + 61 , 10 @ @ public abstract class FluidContainerRegistry 
 ContainerKey ck = ( ContainerKey ) o ; 
 if ( container . getItem ( ) ! = ck . container . getItem ( ) ) return false ; 
 if ( container . getItemDamage ( ) ! = ck . container . getItemDamage ( ) ) return false ; 
 - if ( fluid = = null & & ck . fluid ! = null ) return false ; 
 - if ( fluid ! = null & & ck . fluid = = null ) return false ; 
 - if ( fluid = = null & & ck . fluid = = null ) return true ; 
 - if ( fluid . fluidID ! = ck . fluid . fluidID ) return false ; 
 + if ( stack = = null & & ck . stack ! = null ) return false ; 
 + if ( stack ! = null & & ck . stack = = null ) return false ; 
 + if ( stack = = null & & ck . stack = = null ) return true ; 
 + if ( stack . fluid ! = ck . stack . fluid ) return false ; 
 return true ; 
 } 
 } 
 @ @ - 361 , 7 + 361 , 6 @ @ public abstract class FluidContainerRegistry 
 public final ItemStack filledContainer ; 
 public final ItemStack emptyContainer ; 
 
 - 
 public FluidContainerData ( FluidStack stack , ItemStack filledContainer , ItemStack emptyContainer ) 
 { 
 this ( stack , filledContainer , emptyContainer , false ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 index 4fb50d1 . . 89476af 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 @ @ - 25 , 8 + 25 , 8 @ @ public abstract class FluidRegistry 
 { 
 static int maxID = 0 ; 
 
 - static HashMap < String , Fluid > fluids = Maps . newHashMap ( ) ; 
 - static BiMap < String , Integer > fluidIDs = HashBiMap . create ( ) ; 
 + static BiMap < String , Fluid > fluids = HashBiMap . create ( ) ; 
 + static BiMap < Fluid , Integer > fluidIDs = HashBiMap . create ( ) ; 
 static BiMap < Block , Fluid > fluidBlocks ; 
 
 public static final Fluid WATER = new Fluid ( " water " ) { 
 @ @ - 57 , 7 + 57 , 7 @ @ public abstract class FluidRegistry 
 * Called by Forge to prepare the ID map for server - > client sync . 
 * Modders , DO NOT call this . 
 * / 
 - public static void initFluidIDs ( BiMap < String , Integer > newfluidIDs ) 
 + public static void initFluidIDs ( BiMap < Fluid , Integer > newfluidIDs ) 
 { 
 maxID = newfluidIDs . size ( ) ; 
 fluidIDs . clear ( ) ; 
 @ @ - 78 , 7 + 78 , 7 @ @ public abstract class FluidRegistry 
 return false ; 
 } 
 fluids . put ( fluid . getName ( ) , fluid ) ; 
 - fluidIDs . put ( fluid . getName ( ) , + + maxID ) ; 
 + fluidIDs . put ( fluid , + + maxID ) ; 
 
 MinecraftForge . EVENT _ BUS . post ( new FluidRegisterEvent ( fluid . getName ( ) , maxID ) ) ; 
 return true ; 
 @ @ - 86 , 12 + 86 , 12 @ @ public abstract class FluidRegistry 
 
 public static boolean isFluidRegistered ( Fluid fluid ) 
 { 
 - return fluidIDs . containsKey ( fluid . getName ( ) ) ; 
 + return fluids . containsKey ( fluid . getName ( ) ) ; 
 } 
 
 public static boolean isFluidRegistered ( String fluidName ) 
 { 
 - return fluidIDs . containsKey ( fluidName ) ; 
 + return fluids . containsKey ( fluidName ) ; 
 } 
 
 public static Fluid getFluid ( String fluidName ) 
 @ @ - 101 , 31 + 101 , 36 @ @ public abstract class FluidRegistry 
 
 public static Fluid getFluid ( int fluidID ) 
 { 
 - return fluids . get ( getFluidName ( fluidID ) ) ; 
 + 	 return fluidIDs . inverse ( ) . get ( fluidID ) ; 
 } 
 
 - public static String getFluidName ( int fluidID ) 
 + public static int getFluidID ( Fluid fluid ) 
 { 
 - return fluidIDs . inverse ( ) . get ( fluidID ) ; 
 + 	 return fluidIDs . get ( fluid ) ; 
 } 
 
 - public static String getFluidName ( FluidStack stack ) 
 + public static int getFluidID ( String fluidName ) 
 { 
 - return getFluidName ( stack . fluidID ) ; 
 + 	 return fluidIDs . get ( getFluid ( fluidName ) ) ; 
 } 
 
 - public static int getFluidID ( String fluidName ) 
 + public static String getFluidName ( Fluid fluid ) 
 + { 
 + return fluids . inverse ( ) . get ( fluid ) ; 
 + } 
 + 
 + public static String getFluidName ( FluidStack stack ) 
 { 
 - return fluidIDs . get ( fluidName ) ; 
 + return getFluidName ( stack . fluid ) ; 
 } 
 
 public static FluidStack getFluidStack ( String fluidName , int amount ) 
 { 
 - if ( ! fluidIDs . containsKey ( fluidName ) ) 
 + if ( ! fluids . containsKey ( fluidName ) ) 
 { 
 return null ; 
 } 
 - return new FluidStack ( getFluidID ( fluidName ) , amount ) ; 
 + return new FluidStack ( getFluid ( fluidName ) , amount ) ; 
 } 
 
 / * * 
 @ @ - 137 , 9 + 142 , 9 @ @ public abstract class FluidRegistry 
 } 
 
 / * * 
 - * Returns a read - only map containing Fluid Names and their associated IDs . 
 + * Returns a read - only map containing Fluid IDs and their associated Fluids . 
 * / 
 - public static Map < String , Integer > getRegisteredFluidIDs ( ) 
 + public static Map < Fluid , Integer > getRegisteredFluidIDs ( ) 
 { 
 return ImmutableMap . copyOf ( fluidIDs ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidStack . java b / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 index 4de7a26 . . f23bb0b 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 @ @ - 18 , 25 + 18 , 19 @ @ import net . minecraft . nbt . NBTTagCompound ; 
 * / 
 public class FluidStack 
 { 
 - public int fluidID ; 
 + 	 public final Fluid fluid ; 
 public int amount ; 
 public NBTTagCompound tag ; 
 
 public FluidStack ( Fluid fluid , int amount ) 
 { 
 - this . fluidID = fluid . getID ( ) ; 
 + 	 this . fluid = fluid ; 
 this . amount = amount ; 
 } 
 
 - public FluidStack ( int fluidID , int amount ) 
 - { 
 - this . fluidID = fluidID ; 
 - this . amount = amount ; 
 - } 
 - 
 - public FluidStack ( int fluidID , int amount , NBTTagCompound nbt ) 
 + public FluidStack ( Fluid fluid , int amount , NBTTagCompound nbt ) 
 { 
 - this ( fluidID , amount ) ; 
 + this ( fluid , amount ) ; 
 
 if ( nbt ! = null ) 
 { 
 @ @ - 46 , 9 + 40 , 23 @ @ public class FluidStack 
 
 public FluidStack ( FluidStack stack , int amount ) 
 { 
 - this ( stack . fluidID , amount , stack . tag ) ; 
 + this ( stack . fluid , amount , stack . tag ) ; 
 + } 
 + 
 + / / To be removed in 1 . 8 
 + @ Deprecated 
 + public FluidStack ( int fluidID , int amount ) 
 + { 
 + 	 this ( FluidRegistry . getFluid ( fluidID ) , amount ) ; 
 } 
 
 + / / To be removed in 1 . 8 
 + @ Deprecated 
 + public FluidStack ( int fluidID , int amount , NBTTagCompound nbt ) 
 + { 
 + 	 this ( FluidRegistry . getFluid ( fluidID ) , amount , nbt ) ; 
 + } 
 + 
 / * * 
 * This provides a safe method for retrieving a FluidStack - if the Fluid is invalid , the stack 
 * will return as null . 
 @ @ - 60 , 32 + 68 , 23 @ @ public class FluidStack 
 return null ; 
 } 
 String fluidName = nbt . getString ( " FluidName " ) ; 
 - if ( Strings . isNullOrEmpty ( fluidName ) ) 
 - { 
 - fluidName = nbt . hasKey ( " LiquidName " ) ? nbt . getString ( " LiquidName " ) . toLowerCase ( Locale . ENGLISH ) : null ; 
 - fluidName = Fluid . convertLegacyName ( fluidName ) ; 
 - } 
 
 - if ( fluidName = = null | | FluidRegistry . getFluid ( fluidName ) = = null ) 
 + if ( fluidName = = null | | FluidRegistry . getFluid ( fluidName ) = = null ) 
 { 
 return null ; 
 } 
 - FluidStack stack = new FluidStack ( FluidRegistry . getFluidID ( fluidName ) , nbt . getInteger ( " Amount " ) ) ; 
 + FluidStack stack = new FluidStack ( FluidRegistry . getFluid ( fluidName ) , nbt . getInteger ( " Amount " ) ) ; 
 
 if ( nbt . hasKey ( " Tag " ) ) 
 { 
 stack . tag = nbt . getCompoundTag ( " Tag " ) ; 
 } 
 - else if ( nbt . hasKey ( " extra " ) ) 
 - { 
 - stack . tag = nbt . getCompoundTag ( " extra " ) ; 
 - } 
 return stack ; 
 } 
 
 public NBTTagCompound writeToNBT ( NBTTagCompound nbt ) 
 { 
 - nbt . setString ( " FluidName " , FluidRegistry . getFluidName ( fluidID ) ) ; 
 + nbt . setString ( " FluidName " , FluidRegistry . getFluidName ( fluid ) ) ; 
 nbt . setInteger ( " Amount " , amount ) ; 
 
 if ( tag ! = null ) 
 @ @ - 97 , 9 + 96 , 14 @ @ public class FluidStack 
 
 public final Fluid getFluid ( ) 
 { 
 - return FluidRegistry . getFluid ( fluidID ) ; 
 + return fluid ; 
 } 
 
 + public final int getFluidID ( ) 
 + { 
 + 	 return FluidRegistry . getFluidID ( fluid ) ; 
 + } 
 + 
 public String getLocalizedName ( ) 
 { 
 return this . getFluid ( ) . getLocalizedName ( this ) ; 
 @ @ - 115 , 7 + 119 , 7 @ @ public class FluidStack 
 * / 
 public FluidStack copy ( ) 
 { 
 - return new FluidStack ( fluidID , amount , tag ) ; 
 + return new FluidStack ( fluid , amount , tag ) ; 
 } 
 
 / * * 
 @ @ - 127 , 7 + 131 , 7 @ @ public class FluidStack 
 * / 
 public boolean isFluidEqual ( FluidStack other ) 
 { 
 - return other ! = null & & fluidID = = other . fluidID & & isFluidStackTagEqual ( other ) ; 
 + return other ! = null & & fluid = = other . fluid & & isFluidStackTagEqual ( other ) ; 
 } 
 
 private boolean isFluidStackTagEqual ( FluidStack other ) 
 @ @ - 192 , 7 + 196 , 12 @ @ public class FluidStack 
 @ Override 
 public final int hashCode ( ) 
 { 
 - return fluidID ; 
 + 	 int code = 1 ; 
 + 	 code = 31 * code + fluid . hashCode ( ) ; 
 + 	 code = 31 * code + amount ; 
 + 	 if ( tag ! = null ) 
 + 	 	 code = 31 * code + tag . hashCode ( ) ; 
 + 	 return code ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java b / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java 
 index 9cb87bf . . 706f608 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java 
 + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidBase . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import net . minecraft . world . World ; 
 * / 
 public abstract class BlockFluidBase extends Block implements IFluidBlock 
 { 
 + / * 
 protected final static Map < Integer , Boolean > defaultDisplacementIds = new HashMap < Integer , Boolean > ( ) ; 
 
 static 
 @ @ - 45 , 10 + 46 , 11 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 protected int maxScaledLight = 0 ; 
 
 protected final String fluidName ; 
 - 
 + * / 
 public BlockFluidBase ( int id , Fluid fluid , Material material ) 
 { 
 - super ( id , material ) ; 
 + super ( material ) ; 
 + / * 
 this . setBlockBounds ( 0 . 0F , 0 . 0F , 0 . 0F , 1 . 0F , 1 . 0F , 1 . 0F ) ; 
 this . setTickRandomly ( true ) ; 
 this . disableStats ( ) ; 
 @ @ - 62 , 8 + 64 , 9 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 fluid . setBlockID ( id ) ; 
 
 displacementIds . putAll ( defaultDisplacementIds ) ; 
 + * / 
 } 
 - 
 + / * 
 public BlockFluidBase setQuantaPerBlock ( int quantaPerBlock ) 
 { 
 if ( quantaPerBlock > 16 | | quantaPerBlock < 1 ) quantaPerBlock = 8 ; 
 @ @ - 107 , 7 + 110 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 
 / * * 
 * Returns true if the block at ( x , y , z ) is displaceable . Does not displace the block . 
 - * / 
 + * / 
 public boolean canDisplace ( IBlockAccess world , int x , int y , int z ) 
 { 
 if ( world . isAirBlock ( x , y , z ) ) return true ; 
 @ @ - 148 , 7 + 151 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 
 / * * 
 * Attempt to displace the block at ( x , y , z ) , return true if it was displaced . 
 - * / 
 + * / 
 public boolean displaceIfPossible ( World world , int x , int y , int z ) 
 { 
 if ( world . isAirBlock ( x , y , z ) ) 
 @ @ - 202 , 7 + 205 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 
 public abstract int getMaxRenderHeightMeta ( ) ; 
 
 - / * BLOCK FUNCTIONS * / 
 + / * BLOCK FUNCTIONS * / 
 @ Override 
 public void onBlockAdded ( World world , int x , int y , int z ) 
 { 
 @ @ - 329 , 7 + 332 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 return mat = = this . blockMaterial ? false : super . shouldSideBeRendered ( world , x , y , z , side ) ; 
 } 
 
 - / * FLUID FUNCTIONS * / 
 + / * FLUID FUNCTIONS * / 
 public static final int getDensity ( IBlockAccess world , int x , int y , int z ) 
 { 
 Block block = Block . blocksList [ world . getBlockId ( x , y , z ) ] ; 
 @ @ - 446 , 7 + 449 , 7 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 return vec ; 
 } 
 
 - / * IFluidBlock * / 
 + / * IFluidBlock * / 
 @ Override 
 public Fluid getFluid ( ) 
 { 
 @ @ - 461 , 4 + 464 , 5 @ @ public abstract class BlockFluidBase extends Block implements IFluidBlock 
 if ( remaining > 1 ) remaining = 1 . 0f ; 
 return remaining * ( density > 0 ? 1 : - 1 ) ; 
 } 
 + * / 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java b / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java 
 index 5af4160 . . dd323bb 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java 
 + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidClassic . java 
 @ @ - 17 , 17 + 17 , 18 @ @ import net . minecraft . world . World ; 
 * / 
 public class BlockFluidClassic extends BlockFluidBase 
 { 
 + / * 
 protected boolean [ ] isOptimalFlowDirection = new boolean [ 4 ] ; 
 protected int [ ] flowCost = new int [ 4 ] ; 
 
 protected FluidStack stack ; 
 - 
 + * / 
 public BlockFluidClassic ( int id , Fluid fluid , Material material ) 
 { 
 super ( id , fluid , material ) ; 
 - stack = new FluidStack ( fluid , FluidContainerRegistry . BUCKET _ VOLUME ) ; 
 + / / stack = new FluidStack ( fluid , FluidContainerRegistry . BUCKET _ VOLUME ) ; 
 } 
 - 
 + / * 
 public BlockFluidClassic setFluidStack ( FluidStack stack ) 
 { 
 this . stack = stack ; 
 @ @ - 328 , 11 + 329 , 12 @ @ public class BlockFluidClassic extends BlockFluidBase 
 } 
 return quantaRemaining > = compare ? quantaRemaining : compare ; 
 } 
 - 
 + * / 
 / * IFluidBlock * / 
 @ Override 
 public FluidStack drain ( World world , int x , int y , int z , boolean doDrain ) 
 { 
 + / * 
 if ( ! isSourceBlock ( world , x , y , z ) ) 
 { 
 return null ; 
 @ @ - 344 , 11 + 346 , 15 @ @ public class BlockFluidClassic extends BlockFluidBase 
 } 
 
 return stack . copy ( ) ; 
 + * / 
 + return null ; 
 } 
 
 @ Override 
 public boolean canDrain ( World world , int x , int y , int z ) 
 { 
 - return isSourceBlock ( world , x , y , z ) ; 
 + return false ; / / isSourceBlock ( world , x , y , z ) ; 
 } 
 + @ Override public Fluid getFluid ( ) { return null ; } 
 + @ Override public float getFilledPercentage ( World world , int x , int y , int z ) { return 0 ; } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java b / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java 
 index 0dc2d0b . . 64128b6 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java 
 + + + b / src / main / java / net / minecraftforge / fluids / BlockFluidFinite . java 
 @ @ - 22 , 7 + 22 , 7 @ @ public class BlockFluidFinite extends BlockFluidBase 
 { 
 super ( id , fluid , material ) ; 
 } 
 - 
 + / * 
 @ Override 
 public int getQuantaValue ( IBlockAccess world , int x , int y , int z ) 
 { 
 @ @ - 320 , 4 + 320 , 6 @ @ public class BlockFluidFinite extends BlockFluidBase 
 { 
 return false ; 
 } 
 + @ Override public Fluid getFluid ( ) { return null ; } 
 + @ Override public float getFilledPercentage ( World world , int x , int y , int z ) { return 0 ; } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 index 8a025e3 . . bbc9555 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java 
 + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 @ @ - 9 , 7 + 9 , 7 @ @ import net . minecraft . block . Block ; 
 import net . minecraft . util . IIcon ; 
 import net . minecraft . util . StatCollector ; 
 import net . minecraft . world . World ; 
 - import net . minecraftforge . common . ForgeDummyContainer ; 
 + import net . minecraftforge . common . ForgeModContainer ; 
 import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . LoaderException ; 
 import net . minecraft . item . EnumRarity ; 
 @ @ - 116 , 7 + 116 , 7 @ @ public class Fluid 
 { 
 this . block = block ; 
 } 
 - else if ( ! ForgeDummyContainer . forceDuplicateFluidBlockCrash ) 
 + else if ( ! ForgeModContainer . forceDuplicateFluidBlockCrash ) 
 { 
 FMLLog . warning ( " A mod has attempted to assign Block " + block + " to the Fluid ' " + fluidName + " ' but this Fluid has already been linked to BlockID " 
 + this . block + " . Configure your mods to prevent this from happening . " ) ; 
 @ @ - 172 , 10 + 172 , 12 @ @ public class Fluid 
 return this . fluidName ; 
 } 
 
 + / * 
 public final int getID ( ) 
 { 
 return FluidRegistry . getFluidID ( this . fluidName ) ; 
 } 
 + * / 
 
 public final Block getBlock ( ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 index 64f8bff . . 42835cf 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 
 + import net . minecraft . init . Items ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraftforge . common . MinecraftForge ; 
 @ @ - 24 , 20 + 25 , 21 @ @ import net . minecraftforge . event . Event ; 
 * / 
 public abstract class FluidContainerRegistry 
 { 
 + / * 
 private static Map < List , FluidContainerData > containerFluidMap = new HashMap ( ) ; 
 private static Map < List , FluidContainerData > filledContainerMap = new HashMap ( ) ; 
 private static Set < List > emptyContainers = new HashSet ( ) ; 
 
 public static final int BUCKET _ VOLUME = 1000 ; 
 - public static final ItemStack EMPTY _ BUCKET = new ItemStack ( Item . bucketEmpty ) ; 
 - public static final ItemStack EMPTY _ BOTTLE = new ItemStack ( Item . glassBottle ) ; 
 - private static final ItemStack NULL _ EMPTYCONTAINER = new ItemStack ( Item . bucketEmpty ) ; 
 + public static final ItemStack EMPTY _ BUCKET = new ItemStack ( Items . bucket ) ; 
 + public static final ItemStack EMPTY _ BOTTLE = new ItemStack ( Items . glass _ bottle ) ; 
 + private static final ItemStack NULL _ EMPTYCONTAINER = new ItemStack ( Items . bucket ) ; 
 
 static 
 { 
 - registerFluidContainer ( FluidRegistry . WATER , new ItemStack ( Item . bucketWater ) , EMPTY _ BUCKET ) ; 
 - registerFluidContainer ( FluidRegistry . LAVA , new ItemStack ( Item . bucketLava ) , EMPTY _ BUCKET ) ; 
 - registerFluidContainer ( FluidRegistry . WATER , new ItemStack ( Item . potion ) , EMPTY _ BOTTLE ) ; 
 + registerFluidContainer ( FluidRegistry . WATER , new ItemStack ( Items . water _ bucket ) , EMPTY _ BUCKET ) ; 
 + registerFluidContainer ( FluidRegistry . LAVA , new ItemStack ( Items . lava _ bucket ) , EMPTY _ BUCKET ) ; 
 + registerFluidContainer ( FluidRegistry . WATER , new ItemStack ( Items . potionitem ) , EMPTY _ BOTTLE ) ; 
 } 
 
 private FluidContainerRegistry ( ) { } 
 @ @ - 52 , 7 + 54 , 7 @ @ public abstract class FluidContainerRegistry 
 * @ param emptyContainer 
 * ItemStack representing the container when it is empty . 
 * @ return True if container was successfully registered ; false if it already is . 
 - * / 
 + * / 
 public static boolean registerFluidContainer ( FluidStack stack , ItemStack filledContainer , ItemStack emptyContainer ) 
 { 
 return registerFluidContainer ( new FluidContainerData ( stack , filledContainer , emptyContainer ) ) ; 
 @ @ - 69 , 7 + 71 , 7 @ @ public abstract class FluidContainerRegistry 
 * @ param emptyContainer 
 * ItemStack representing the container when it is empty . 
 * @ return True if container was successfully registered ; false if it already is . 
 - * / 
 + * / 
 public static boolean registerFluidContainer ( Fluid fluid , ItemStack filledContainer , ItemStack emptyContainer ) 
 { 
 if ( ! FluidRegistry . isFluidRegistered ( fluid ) ) 
 @ @ - 87 , 7 + 89 , 7 @ @ public abstract class FluidContainerRegistry 
 * @ param filledContainer 
 * ItemStack representing the container when it is full . 
 * @ return True if container was successfully registered ; false if it already is . 
 - * / 
 + * / 
 public static boolean registerFluidContainer ( FluidStack stack , ItemStack filledContainer ) 
 { 
 return registerFluidContainer ( new FluidContainerData ( stack , filledContainer , null , true ) ) ; 
 @ @ - 102 , 7 + 104 , 7 @ @ public abstract class FluidContainerRegistry 
 * @ param filledContainer 
 * ItemStack representing the container when it is full . 
 * @ return True if container was successfully registered ; false if it already is . 
 - * / 
 + * / 
 public static boolean registerFluidContainer ( Fluid fluid , ItemStack filledContainer ) 
 { 
 if ( ! FluidRegistry . isFluidRegistered ( fluid ) ) 
 @ @ - 118 , 19 + 120 , 19 @ @ public abstract class FluidContainerRegistry 
 * @ param data 
 * See { @ link FluidContainerData } . 
 * @ return True if container was successfully registered ; false if it already is . 
 - * / 
 + * / 
 public static boolean registerFluidContainer ( FluidContainerData data ) 
 { 
 if ( isFilledContainer ( data . filledContainer ) ) 
 { 
 return false ; 
 } 
 - containerFluidMap . put ( Arrays . asList ( data . filledContainer . itemID , data . filledContainer . getItemDamage ( ) ) , data ) ; 
 + containerFluidMap . put ( Arrays . asList ( data . filledContainer , data . filledContainer . getItemDamage ( ) ) , data ) ; 
 
 if ( data . emptyContainer ! = null & & data . emptyContainer ! = NULL _ EMPTYCONTAINER ) 
 { 
 - filledContainerMap . put ( Arrays . asList ( data . emptyContainer . itemID , data . emptyContainer . getItemDamage ( ) , data . fluid . fluidID ) , data ) ; 
 - emptyContainers . add ( Arrays . asList ( data . emptyContainer . itemID , data . emptyContainer . getItemDamage ( ) ) ) ; 
 + filledContainerMap . put ( Arrays . asList ( data . emptyContainer , data . emptyContainer . getItemDamage ( ) , data . fluid . fluidID ) , data ) ; 
 + emptyContainers . add ( Arrays . asList ( data . emptyContainer , data . emptyContainer . getItemDamage ( ) ) ) ; 
 } 
 
 MinecraftForge . EVENT _ BUS . post ( new FluidContainerRegisterEvent ( data ) ) ; 
 @ @ - 143 , 7 + 145 , 7 @ @ public abstract class FluidContainerRegistry 
 * @ param container 
 * The fluid container . 
 * @ return FluidStack representing stored fluid . 
 - * / 
 + * / 
 public static FluidStack getFluidForFilledItem ( ItemStack container ) 
 { 
 if ( container = = null ) 
 @ @ - 151 , 7 + 153 , 7 @ @ public abstract class FluidContainerRegistry 
 return null ; 
 } 
 
 - FluidContainerData data = containerFluidMap . get ( Arrays . asList ( container . itemID , container . getItemDamage ( ) ) ) ; 
 + FluidContainerData data = containerFluidMap . get ( Arrays . asList ( container , container . getItemDamage ( ) ) ) ; 
 return data = = null ? null : data . fluid . copy ( ) ; 
 } 
 
 @ @ - 165 , 7 + 167 , 7 @ @ public abstract class FluidContainerRegistry 
 * @ param container 
 * ItemStack representing the empty container . 
 * @ return Filled container if successful , otherwise null . 
 - * / 
 + * / 
 public static ItemStack fillFluidContainer ( FluidStack fluid , ItemStack container ) 
 { 
 if ( container = = null | | fluid = = null ) 
 @ @ - 173 , 7 + 175 , 7 @ @ public abstract class FluidContainerRegistry 
 return null ; 
 } 
 
 - FluidContainerData data = filledContainerMap . get ( Arrays . asList ( container . itemID , container . getItemDamage ( ) , fluid . fluidID ) ) ; 
 + FluidContainerData data = filledContainerMap . get ( Arrays . asList ( container , container . getItemDamage ( ) , fluid . fluidID ) ) ; 
 if ( data ! = null & & fluid . amount > = data . fluid . amount ) 
 { 
 return data . filledContainer . copy ( ) ; 
 @ @ - 183 , 7 + 185 , 7 @ @ public abstract class FluidContainerRegistry 
 
 / * * 
 * Determines if a container holds a specific fluid . 
 - * / 
 + * / 
 public static boolean containsFluid ( ItemStack container , FluidStack fluid ) 
 { 
 if ( container = = null | | fluid = = null ) 
 @ @ - 191 , 7 + 193 , 7 @ @ public abstract class FluidContainerRegistry 
 return false ; 
 } 
 
 - FluidContainerData data = filledContainerMap . get ( Arrays . asList ( container . itemID , container . getItemDamage ( ) , fluid . fluidID ) ) ; 
 + FluidContainerData data = filledContainerMap . get ( Arrays . asList ( container , container . getItemDamage ( ) , fluid . fluidID ) ) ; 
 return data = = null ? false : data . fluid . isFluidEqual ( fluid ) ; 
 } 
 
 @ @ - 207 , 7 + 209 , 7 @ @ public abstract class FluidContainerRegistry 
 return true ; 
 } 
 
 - FluidContainerData data = containerFluidMap . get ( Arrays . asList ( container . itemID , container . getItemDamage ( ) ) ) ; 
 + FluidContainerData data = containerFluidMap . get ( Arrays . asList ( container , container . getItemDamage ( ) ) ) ; 
 return data ! = null & & data . emptyContainer . isItemEqual ( EMPTY _ BUCKET ) ; 
 } 
 
 @ @ - 218 , 7 + 220 , 7 @ @ public abstract class FluidContainerRegistry 
 
 public static boolean isEmptyContainer ( ItemStack container ) 
 { 
 - return container ! = null & & emptyContainers . contains ( Arrays . asList ( container . itemID , container . getItemDamage ( ) ) ) ; 
 + return container ! = null & & emptyContainers . contains ( Arrays . asList ( container , container . getItemDamage ( ) ) ) ; 
 } 
 
 public static boolean isFilledContainer ( ItemStack container ) 
 @ @ - 234 , 7 + 236 , 7 @ @ public abstract class FluidContainerRegistry 
 / * * 
 * Wrapper class for the registry entries . Ensures that none of the attempted registrations 
 * contain null references unless permitted . 
 - * / 
 + * / 
 public static class FluidContainerData 
 { 
 public final FluidStack fluid ; 
 @ @ - 274 , 5 + 276 , 5 @ @ public abstract class FluidContainerRegistry 
 this . data = data . copy ( ) ; 
 } 
 } 
 - 
 + * / 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidIdMapPacket . java b / src / main / java / net / minecraftforge / fluids / FluidIdMapPacket . java 
 index 9c8cc8a . . 344ffaf 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidIdMapPacket . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidIdMapPacket . java 
 @ @ - 4 , 7 + 4 , 6 @ @ package net . minecraftforge . fluids ; 
 import java . util . Map ; 
 
 import net . minecraft . entity . player . EntityPlayer ; 
 - import net . minecraft . network . INetworkManager ; 
 import net . minecraftforge . common . network . ForgePacket ; 
 
 import com . google . common . collect . BiMap ; 
 @ @ - 15 , 6 + 14 , 7 @ @ import com . google . common . io . ByteStreams ; 
 
 public class FluidIdMapPacket extends ForgePacket 
 { 
 + / * 
 private BiMap < String , Integer > fluidIds = HashBiMap . create ( ) ; 
 
 @ Override 
 @ @ - 49 , 4 + 49 , 5 @ @ public class FluidIdMapPacket extends ForgePacket 
 { 
 FluidRegistry . initFluidIDs ( fluidIds ) ; 
 } 
 + * / 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 index 16d011f . . c6e24cc 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 @ @ - 20 , 6 + 20 , 7 @ @ import com . google . common . collect . ImmutableMap ; 
 * / 
 public abstract class FluidRegistry 
 { 
 + / * 
 static int maxID = 0 ; 
 
 static HashMap < String , Fluid > fluids = new HashMap ( ) ; 
 @ @ - 52 , 7 + 53 , 7 @ @ public abstract class FluidRegistry 
 
 / * * 
 * Called by Forge to prepare the ID map for server - > client sync . 
 - * / 
 + * / 
 static void initFluidIDs ( BiMap < String , Integer > newfluidIDs ) 
 { 
 maxID = newfluidIDs . size ( ) ; 
 @ @ - 66 , 7 + 67 , 7 @ @ public abstract class FluidRegistry 
 * @ param fluid 
 * The fluid to register . 
 * @ return True if the fluid was successfully registered ; false if there is a name clash . 
 - * / 
 + * / 
 public static boolean registerFluid ( Fluid fluid ) 
 { 
 if ( fluidIDs . containsKey ( fluid . getName ( ) ) ) 
 @ @ - 126 , 7 + 127 , 7 @ @ public abstract class FluidRegistry 
 
 / * * 
 * Returns a read - only map containing Fluid Names and their associated Fluids . 
 - * / 
 + * / 
 public static Map < String , Fluid > getRegisteredFluids ( ) 
 { 
 return ImmutableMap . copyOf ( fluids ) ; 
 @ @ - 134 , 7 + 135 , 7 @ @ public abstract class FluidRegistry 
 
 / * * 
 * Returns a read - only map containing Fluid Names and their associated IDs . 
 - * / 
 + * / 
 public static Map < String , Integer > getRegisteredFluidIDs ( ) 
 { 
 return ImmutableMap . copyOf ( fluidIDs ) ; 
 @ @ - 167 , 4 + 168 , 5 @ @ public abstract class FluidRegistry 
 this . fluidID = fluidID ; 
 } 
 } 
 + * / 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidStack . java b / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 index c41a9fc . . 2a7fffa 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 @ @ - 18 , 6 + 18 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; 
 * / 
 public class FluidStack 
 { 
 + / * 
 public int fluidID ; 
 public int amount ; 
 public NBTTagCompound tag ; 
 @ @ - 52 , 7 + 53 , 7 @ @ public class FluidStack 
 / * * 
 * This provides a safe method for retrieving a FluidStack - if the Fluid is invalid , the stack 
 * will return as null . 
 - * / 
 + * / 
 public static FluidStack loadFluidStackFromNBT ( NBTTagCompound nbt ) 
 { 
 if ( nbt = = null ) 
 @ @ - 102 , 7 + 103 , 7 @ @ public class FluidStack 
 
 / * * 
 * @ return A copy of this FluidStack 
 - * / 
 + * / 
 public FluidStack copy ( ) 
 { 
 return new FluidStack ( fluidID , amount , tag ) ; 
 @ @ - 114 , 7 + 115 , 7 @ @ public class FluidStack 
 * @ param other 
 * The FluidStack for comparison 
 * @ return true if the Fluids ( IDs and NBT Tags ) are the same 
 - * / 
 + * / 
 public boolean isFluidEqual ( FluidStack other ) 
 { 
 return other ! = null & & fluidID = = other . fluidID & & isFluidStackTagEqual ( other ) ; 
 @ @ - 127 , 7 + 128 , 7 @ @ public class FluidStack 
 
 / * * 
 * Determines if the NBT Tags are equal . Useful if the FluidIDs are known to be equal . 
 - * / 
 + * / 
 public static boolean areFluidStackTagsEqual ( FluidStack stack1 , FluidStack stack2 ) 
 { 
 return stack1 = = null & & stack2 = = null ? true : stack1 = = null | | stack2 = = null ? false : stack1 . isFluidStackTagEqual ( stack2 ) ; 
 @ @ - 138 , 7 + 139 , 7 @ @ public class FluidStack 
 * 
 * @ param other 
 * @ return true if this FluidStack contains the other FluidStack ( same fluid and > = amount ) 
 - * / 
 + * / 
 public boolean containsFluid ( FluidStack other ) 
 { 
 return isFluidEqual ( other ) & & amount > = other . amount ; 
 @ @ - 150 , 7 + 151 , 7 @ @ public class FluidStack 
 * @ param other 
 * - the FluidStack for comparison 
 * @ return true if the two FluidStacks are exactly the same 
 - * / 
 + * / 
 public boolean isFluidStackIdentical ( FluidStack other ) 
 { 
 return isFluidEqual ( other ) & & amount = = other . amount ; 
 @ @ - 163 , 7 + 164 , 7 @ @ public class FluidStack 
 * @ param other 
 * The ItemStack for comparison 
 * @ return true if the Fluids ( IDs and NBT Tags ) are the same 
 - * / 
 + * / 
 public boolean isFluidEqual ( ItemStack other ) 
 { 
 if ( other = = null ) 
 @ @ - 189 , 7 + 190 , 7 @ @ public class FluidStack 
 * Default equality comparison for a FluidStack . Same functionality as isFluidEqual ( ) . 
 * 
 * This is included for use in data structures . 
 - * / 
 + * / 
 @ Override 
 public final boolean equals ( Object o ) 
 { 
 @ @ - 200 , 4 + 201 , 5 @ @ public class FluidStack 
 
 return isFluidEqual ( ( FluidStack ) o ) ; 
 } 
 + * / 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidTank . java b / src / main / java / net / minecraftforge / fluids / FluidTank . java 
 index 4aa7a9c . . 5132313 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidTank . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidTank . java 
 @ @ - 12 , 6 + 12 , 13 @ @ import net . minecraft . tileentity . TileEntity ; 
 * / 
 public class FluidTank implements IFluidTank 
 { 
 + @ Override public FluidStack getFluid ( ) { return null ; } 
 + @ Override public int getFluidAmount ( ) { return 0 ; } 
 + @ Override public int getCapacity ( ) { return 0 ; } 
 + @ Override public FluidTankInfo getInfo ( ) { return null ; } 
 + @ Override public int fill ( FluidStack resource , boolean doFill ) { return 0 ; } 
 + @ Override public FluidStack drain ( int maxDrain , boolean doDrain ) { return null ; } 
 + / * 
 protected FluidStack fluid ; 
 protected int capacity ; 
 protected TileEntity tile ; 
 @ @ - 69 , 7 + 76 , 7 @ @ public class FluidTank implements IFluidTank 
 this . capacity = capacity ; 
 } 
 
 - / * IFluidTank * / 
 + / * IFluidTank * / 
 @ Override 
 public FluidStack getFluid ( ) 
 { 
 @ @ - 127 , 7 + 134 , 7 @ @ public class FluidTank implements IFluidTank 
 
 if ( tile ! = null ) 
 { 
 - FluidEvent . fireEvent ( new FluidEvent . FluidFillingEvent ( fluid , tile . worldObj , tile . xCoord , tile . yCoord , tile . zCoord , this ) ) ; 
 + FluidEvent . fireEvent ( new FluidEvent . FluidFillingEvent ( fluid , tile . func _ 145831 _ w ( ) , tile . field _ 145851 _ c , tile . field _ 145848 _ d , tile . field _ 145849 _ e , this ) ) ; 
 } 
 return fluid . amount ; 
 } 
 @ @ - 150 , 7 + 157 , 7 @ @ public class FluidTank implements IFluidTank 
 
 if ( tile ! = null ) 
 { 
 - FluidEvent . fireEvent ( new FluidEvent . FluidFillingEvent ( fluid , tile . worldObj , tile . xCoord , tile . yCoord , tile . zCoord , this ) ) ; 
 + FluidEvent . fireEvent ( new FluidEvent . FluidFillingEvent ( fluid , tile . func _ 145831 _ w ( ) , tile . field _ 145851 _ c , tile . field _ 145848 _ d , tile . field _ 145849 _ e , this ) ) ; 
 } 
 return filled ; 
 } 
 @ @ - 180 , 9 + 187 , 10 @ @ public class FluidTank implements IFluidTank 
 
 if ( tile ! = null ) 
 { 
 - FluidEvent . fireEvent ( new FluidEvent . FluidDrainingEvent ( fluid , tile . worldObj , tile . xCoord , tile . yCoord , tile . zCoord , this ) ) ; 
 + FluidEvent . fireEvent ( new FluidEvent . FluidDrainingEvent ( fluid , tile . func _ 145831 _ w ( ) , tile . field _ 145851 _ c , tile . field _ 145848 _ d , tile . field _ 145849 _ e , this ) ) ; 
 } 
 } 
 return stack ; 
 } 
 + * / 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / IFluidHandler . java b / src / main / java / net / minecraftforge / fluids / IFluidHandler . java 
 index bc443e9 . . 9070423 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / IFluidHandler . java 
 + + + b / src / main / java / net / minecraftforge / fluids / IFluidHandler . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package net . minecraftforge . fluids ; 
 
 - import net . minecraftforge . common . ForgeDirection ; 
 + import net . minecraftforge . common . util . ForgeDirection ; 
 
 / * * 
 * Implement this interface on TileEntities which should handle fluids , generally storing them in 
 diff - - git a / src / main / java / net / minecraftforge / fluids / ItemFluidContainer . java b / src / main / java / net / minecraftforge / fluids / ItemFluidContainer . java 
 index be615d3 . . d7af425 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / ItemFluidContainer . java 
 + + + b / src / main / java / net / minecraftforge / fluids / ItemFluidContainer . java 
 @ @ - 12 , 16 + 12 , 21 @ @ import net . minecraft . nbt . NBTTagCompound ; 
 * / 
 public class ItemFluidContainer extends Item implements IFluidContainerItem 
 { 
 + @ Override public FluidStack getFluid ( ItemStack container ) { return null ; } 
 + @ Override public int getCapacity ( ItemStack container ) { return 0 ; } 
 + @ Override public int fill ( ItemStack container , FluidStack resource , boolean doFill ) { return 0 ; } 
 + @ Override public FluidStack drain ( ItemStack container , int maxDrain , boolean doDrain ) { return null ; } 
 + / * 
 protected int capacity ; 
 
 public ItemFluidContainer ( int itemID ) 
 { 
 - super ( itemID ) ; 
 + super ( ) ; 
 } 
 
 public ItemFluidContainer ( int itemID , int capacity ) 
 { 
 - super ( itemID ) ; 
 + super ( ) ; 
 this . capacity = capacity ; 
 } 
 
 @ @ - 31 , 7 + 36 , 7 @ @ public class ItemFluidContainer extends Item implements IFluidContainerItem 
 return this ; 
 } 
 
 - / * IFluidContainerItem * / 
 + / * IFluidContainerItem * / 
 @ Override 
 public FluidStack getFluid ( ItemStack container ) 
 { 
 @ @ - 155 , 4 + 160 , 5 @ @ public class ItemFluidContainer extends Item implements IFluidContainerItem 
 } 
 return stack ; 
 } 
 + * / 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / RenderBlockFluid . java b / src / main / java / net / minecraftforge / fluids / RenderBlockFluid . java 
 index 7386f52 . . d90fc26 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / RenderBlockFluid . java 
 + + + b / src / main / java / net / minecraftforge / fluids / RenderBlockFluid . java 
 @ @ - 3 , 7 + 3 , 7 @ @ package net . minecraftforge . fluids ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . client . renderer . RenderBlocks ; 
 import net . minecraft . client . renderer . Tessellator ; 
 - import net . minecraft . util . Icon ; 
 + import net . minecraft . util . IIcon ; 
 import net . minecraft . util . MathHelper ; 
 import net . minecraft . world . IBlockAccess ; 
 import cpw . mods . fml . client . registry . ISimpleBlockRenderingHandler ; 
 @ @ - 16 , 6 + 16 , 11 @ @ import cpw . mods . fml . client . registry . ISimpleBlockRenderingHandler ; 
 * / 
 public class RenderBlockFluid implements ISimpleBlockRenderingHandler 
 { 
 + @ Override public void renderInventoryBlock ( Block block , int metadata , int modelID , RenderBlocks renderer ) { } 
 + @ Override public boolean renderWorldBlock ( IBlockAccess world , int x , int y , int z , Block block , int modelId , RenderBlocks renderer ) { return false ; } 
 + @ Override public boolean shouldRender3DInInventory ( ) { return false ; } 
 + @ Override public int getRenderId ( ) { return 0 ; } 
 + / * 
 public static RenderBlockFluid instance = new RenderBlockFluid ( ) ; 
 
 static final float LIGHT _ Y _ NEG = 0 . 5F ; 
 @ @ - 68 , 7 + 73 , 7 @ @ public class RenderBlockFluid implements ISimpleBlockRenderingHandler 
 return ! world . getBlockMaterial ( x , y , z ) . isSolid ( ) & & world . getBlockId ( x , y - block . densityDir , z ) = = block . blockID ? 1 : block . getQuantaPercentage ( world , x , y , z ) * 0 . 875F ; 
 } 
 
 - / * ISimpleBlockRenderingHandler * / 
 + / * ISimpleBlockRenderingHandler * / 
 @ Override 
 public void renderInventoryBlock ( Block block , int metadata , int modelID , RenderBlocks renderer ) { } 
 
 @ @ - 324 , 4 + 329 , 5 @ @ public class RenderBlockFluid implements ISimpleBlockRenderingHandler 
 { 
 return FluidRegistry . renderIdFluid ; 
 } 
 + * / 
 } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / fluids / TileFluidHandler . java b / src / main / java / net / minecraftforge / fluids / TileFluidHandler . java 
 index b399486 . . e69a5c8 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / TileFluidHandler . java 
 + + + b / src / main / java / net / minecraftforge / fluids / TileFluidHandler . java 
 @ @ - 3 , 7 + 3 , 7 @ @ package net . minecraftforge . fluids ; 
 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . tileentity . TileEntity ; 
 - import net . minecraftforge . common . ForgeDirection ; 
 + import net . minecraftforge . common . util . ForgeDirection ; 
 
 / * * 
 * Reference Tile Entity implementation of { @ link IFluidHandler } . Use / extend this or write your own . 
 @ @ - 13 , 6 + 13 , 13 @ @ import net . minecraftforge . common . ForgeDirection ; 
 * / 
 public class TileFluidHandler extends TileEntity implements IFluidHandler 
 { 
 + @ Override public int fill ( ForgeDirection from , FluidStack resource , boolean doFill ) { return 0 ; } 
 + @ Override public FluidStack drain ( ForgeDirection from , FluidStack resource , boolean doDrain ) { return null ; } 
 + @ Override public FluidStack drain ( ForgeDirection from , int maxDrain , boolean doDrain ) { return null ; } 
 + @ Override public boolean canFill ( ForgeDirection from , Fluid fluid ) { return false ; } 
 + @ Override public boolean canDrain ( ForgeDirection from , Fluid fluid ) { return false ; } 
 + @ Override public FluidTankInfo [ ] getTankInfo ( ForgeDirection from ) { return null ; } 
 + / * 
 protected FluidTank tank = new FluidTank ( FluidContainerRegistry . BUCKET _ VOLUME ) ; 
 
 @ Override 
 @ @ - 29 , 7 + 36 , 7 @ @ public class TileFluidHandler extends TileEntity implements IFluidHandler 
 tank . readFromNBT ( tag ) ; 
 } 
 
 - / * IFluidHandler * / 
 + / * IFluidHandler * / 
 @ Override 
 public int fill ( ForgeDirection from , FluidStack resource , boolean doFill ) 
 { 
 @ @ - 69 , 4 + 76 , 5 @ @ public class TileFluidHandler extends TileEntity implements IFluidHandler 
 { 
 return new FluidTankInfo [ ] { tank . getInfo ( ) } ; 
 } 
 + * / 
 }
