BLEU SCORE: 1.0

TEST MSG: Patch TracingPrintStream to handle Kotlin IO .
GENERATED MSG: Patch TracingPrintStream to handle Kotlin IO .

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java b / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java <nl> index eb7a83d . . 3a56e61 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import org . apache . logging . log4j . Logger ; <nl> public class TracingPrintStream extends PrintStream { <nl> <nl> private Logger logger ; <nl> + private int BASE _ DEPTH = 3 ; <nl> <nl> public TracingPrintStream ( Logger logger , PrintStream original ) { <nl> super ( original ) ; <nl> @ @ - 39 , 7 + 40 , 10 @ @ public class TracingPrintStream extends PrintStream { <nl> <nl> private String getPrefix ( ) { <nl> StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; <nl> - StackTraceElement elem = elems [ 3 ] ; / / The caller is always at depth 2 , plus this call . <nl> + StackTraceElement elem = elems [ BASE _ DEPTH ] ; / / The caller is always at BASE _ DEPTH , including this call . <nl> + if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { <nl> + elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . <nl> + } <nl> return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java b / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> index 90e4b13 . . 2187c9d 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ import org . apache . logging . log4j . Logger ; <nl> public class TracingPrintStream extends PrintStream { <nl> <nl> private Logger logger ; <nl> + private int BASE _ DEPTH = 3 ; <nl> <nl> public TracingPrintStream ( Logger logger , PrintStream original ) { <nl> super ( original ) ; <nl> @ @ - 39 , 7 + 40 , 10 @ @ public class TracingPrintStream extends PrintStream { <nl> <nl> private String getPrefix ( ) { <nl> StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; <nl> - StackTraceElement elem = elems [ 3 ] ; / / The caller is always at depth 2 , plus this call . <nl> + StackTraceElement elem = elems [ BASE _ DEPTH ] ; / / The caller is always at BASE _ DEPTH , including this call . <nl> + if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { <nl> + elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . <nl> + } <nl> return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; <nl> } <nl>

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java b / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java 
 index eb7a83d . . 3a56e61 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / TracingPrintStream . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import org . apache . logging . log4j . Logger ; 
 public class TracingPrintStream extends PrintStream { 
 
 private Logger logger ; 
 + private int BASE _ DEPTH = 3 ; 
 
 public TracingPrintStream ( Logger logger , PrintStream original ) { 
 super ( original ) ; 
 @ @ - 39 , 7 + 40 , 10 @ @ public class TracingPrintStream extends PrintStream { 
 
 private String getPrefix ( ) { 
 StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; 
 - StackTraceElement elem = elems [ 3 ] ; / / The caller is always at depth 2 , plus this call . 
 + StackTraceElement elem = elems [ BASE _ DEPTH ] ; / / The caller is always at BASE _ DEPTH , including this call . 
 + if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { 
 + elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . 
 + } 
 return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; 
 } 


NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java b / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 index 90e4b13 . . 2187c9d 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 @ @ - 21 , 6 + 21 , 7 @ @ import org . apache . logging . log4j . Logger ; 
 public class TracingPrintStream extends PrintStream { 
 
 private Logger logger ; 
 + private int BASE _ DEPTH = 3 ; 
 
 public TracingPrintStream ( Logger logger , PrintStream original ) { 
 super ( original ) ; 
 @ @ - 39 , 7 + 40 , 10 @ @ public class TracingPrintStream extends PrintStream { 
 
 private String getPrefix ( ) { 
 StackTraceElement [ ] elems = Thread . currentThread ( ) . getStackTrace ( ) ; 
 - StackTraceElement elem = elems [ 3 ] ; / / The caller is always at depth 2 , plus this call . 
 + StackTraceElement elem = elems [ BASE _ DEPTH ] ; / / The caller is always at BASE _ DEPTH , including this call . 
 + if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { 
 + elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . 
 + } 
 return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; 
 } 

