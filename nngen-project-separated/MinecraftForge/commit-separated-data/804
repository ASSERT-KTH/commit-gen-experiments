BLEU SCORE: 4.148492410530926E-4

TEST MSG: Interaction hooks need to be re - added but compiles { Doesn ' t run }
GENERATED MSG: Add a version check mechanic to startup , it is done in a seperate thread and has a config option to compleetly disable it . This allows us to notify users of new recomended builds . Hopefully stemming the flow of outdated help request . Also adds a warning to the main screen if you are running a ' Beta ' Forge . Which means a Forge for a new version of Minecraft that we have not promoted a recomended build for yet .

TEST DIFF (one line): diff - - git a / patches . mcp / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch b / patches . mcp / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch <nl> index 0b1fdfb . . ec372f4 100644 <nl> - - - a / patches . mcp / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch <nl> + + + b / patches . mcp / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch <nl> @ @ - 51 , 8 + 51 , 8 @ @ <nl> float f = entityplayersp . func _ 184825 _ o ( 1 . 0F ) ; <nl> - this . field _ 187469 _ f + = MathHelper . clamp _ float ( ( Objects . equal ( this . field _ 187467 _ d , itemstack ) ? f * f * f : 0 . 0F ) - this . field _ 187469 _ f , - 0 . 4F , 0 . 4F ) ; <nl> - this . field _ 187471 _ h + = MathHelper . clamp _ float ( ( float ) ( Objects . equal ( this . field _ 187468 _ e , itemstack1 ) ? 1 : 0 ) - this . field _ 187471 _ h , - 0 . 4F , 0 . 4F ) ; <nl> - + this . field _ 187469 _ f + = MathHelper . clamp _ float ( ( net . minecraftforge . client . ForgeHooksClient . shouldCauseReequipAnimation ( this . field _ 187467 _ d , itemstack ) ? f * f * f : 0 . 0F ) - this . field _ 187469 _ f , - 0 . 4F , 0 . 4F ) ; <nl> - + this . field _ 187471 _ h + = MathHelper . clamp _ float ( ( float ) ( net . minecraftforge . client . ForgeHooksClient . shouldCauseReequipAnimation ( this . field _ 187468 _ e , itemstack1 ) ? 1 : 0 ) - this . field _ 187471 _ h , - 0 . 4F , 0 . 4F ) ; <nl> + + this . field _ 187469 _ f + = MathHelper . clamp _ float ( ( net . minecraftforge . client . ForgeHooksClient . shouldCauseReequipAnimation ( this . field _ 187467 _ d , itemstack , entityplayersp . inventory . currentItem ) ? f * f * f : 0 . 0F ) - this . field _ 187469 _ f , - 0 . 4F , 0 . 4F ) ; <nl> + + this . field _ 187471 _ h + = MathHelper . clamp _ float ( ( float ) ( net . minecraftforge . client . ForgeHooksClient . shouldCauseReequipAnimation ( this . field _ 187468 _ e , itemstack1 , - 1 ) ? 1 : 0 ) - this . field _ 187471 _ h , - 0 . 4F , 0 . 4F ) ; <nl> } <nl> <nl> if ( this . field _ 187469 _ f < 0 . 1F ) <nl> diff - - git a / patches . mcp / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches . mcp / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> index 4532e82 . . e347436 100644 <nl> - - - a / patches . mcp / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> + + + b / patches . mcp / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch <nl> @ @ - 107 , 7 + 107 , 7 @ @ <nl> public EntityItem dropItem ( ItemStack droppedItem , boolean dropAround , boolean traceItem ) <nl> @ @ - 746 , 15 + 773 , 22 @ @ <nl> <nl> - protected ItemStack func _ 184816 _ a ( EntityItem p _ 184816 _ 1 _ ) <nl> + public ItemStack func _ 184816 _ a ( EntityItem p _ 184816 _ 1 _ ) <nl> { <nl> + if ( captureDrops ) capturedDrops . add ( p _ 184816 _ 1 _ ) ; <nl> + else / / Forge : Don ' t indent to keep patch smaller . <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index c98196d . . 4ead4ca 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 604 , 13 + 604 , 19 @ @ public class ForgeHooksClient <nl> return ( new SimpleBakedModel . Builder ( state , ibakedmodel , texture , pos ) ) . makeBakedModel ( ) ; <nl> } <nl> <nl> - public static boolean shouldCauseReequipAnimation ( ItemStack from , ItemStack to ) <nl> + private static int slotMainHand = 0 ; <nl> + public static boolean shouldCauseReequipAnimation ( ItemStack from , ItemStack to , int slot ) <nl> { <nl> if ( ! Objects . equal ( from , to ) | | from = = null ) <nl> { <nl> return false ; <nl> } <nl> - / / FIXME : 3rd argument ? <nl> - return from . getItem ( ) . shouldCauseReequipAnimation ( from , to ) ; <nl> + boolean changed = false ; <nl> + if ( slot ! = - 1 ) <nl> + { <nl> + changed = slot ! = slotMainHand ; <nl> + slotMainHand = slot ; <nl> + } <nl> + return from . getItem ( ) . shouldCauseReequipAnimation ( from , to , changed ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 77de536 . . 0c3ea9f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 249 , 7 + 249 , 7 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> <nl> registerVariantNames ( ) ; <nl> - <nl> + <nl> List < String > itemVariants = Lists . newArrayList ( ) ; <nl> for ( Item item : GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) <nl> { <nl> @ @ - 560 , 7 + 560 , 7 @ @ public class ModelLoader extends ModelBakery <nl> return bakeNormal ( model , perState , state . apply ( Optional . < IModelPart > absent ( ) ) . or ( TRSRTransformation . identity ( ) ) , newTransforms , format , bakedTextureGetter , uvlock ) ; <nl> } <nl> <nl> - private IBakedModel bakeNormal ( ModelBlock model , IModelState perState , final TRSRTransformation modelState , List < TRSRTransformation > newTransforms , VertexFormat format , final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) <nl> + private IBakedModel bakeNormal ( ModelBlock model , IModelState perState , final TRSRTransformation modelState , List < TRSRTransformation > newTransforms , final VertexFormat format , final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) <nl> { <nl> TextureAtlasSprite particle = bakedTextureGetter . apply ( new ResourceLocation ( model . resolveTextureName ( " particle " ) ) ) ; <nl> SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( model , model . func _ 187967 _ g ( ) ) ) . setTexture ( particle ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 405e224 . . cecc177 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 656 , 7 + 656 , 7 @ @ public class ForgeHooks <nl> { <nl> / / Logic from tryHarvestBlock for pre - canceling the event <nl> boolean preCancelEvent = false ; <nl> - if ( gameType . isCreative ( ) & & entityPlayer . getHeldItem ( ) ! = null & & entityPlayer . getHeldItem ( ) . getItem ( ) instanceof ItemSword ) <nl> + if ( gameType . isCreative ( ) & & entityPlayer . func _ 184614 _ ca ( ) ! = null & & entityPlayer . func _ 184614 _ ca ( ) . getItem ( ) instanceof ItemSword ) <nl> preCancelEvent = true ; <nl> <nl> if ( gameType . isAdventure ( ) ) <nl> @ @ - 666 , 7 + 666 , 7 @ @ public class ForgeHooks <nl> <nl> if ( ! entityPlayer . isAllowEdit ( ) ) <nl> { <nl> - ItemStack itemstack = entityPlayer . getCurrentEquippedItem ( ) ; <nl> + ItemStack itemstack = entityPlayer . func _ 184614 _ ca ( ) ; <nl> if ( itemstack = = null | | ! itemstack . canDestroy ( world . getBlockState ( pos ) . getBlock ( ) ) ) <nl> preCancelEvent = true ; <nl> } <nl> @ @ - 865 , 7 + 865 , 7 @ @ public class ForgeHooks <nl> stack = stack . getItem ( ) . getContainerItem ( stack ) ; <nl> if ( stack ! = null & & stack . isItemStackDamageable ( ) & & stack . getMetadata ( ) > stack . getMaxDamage ( ) ) <nl> { <nl> - MinecraftForge . EVENT _ BUS . post ( new PlayerDestroyItemEvent ( craftingPlayer . get ( ) , stack ) ) ; <nl> + ForgeEventFactory . onPlayerDestroyItem ( craftingPlayer . get ( ) , stack , null ) ; <nl> return null ; <nl> } <nl> return stack ; <nl> @ @ - 904 , 7 + 904 , 7 @ @ public class ForgeHooks <nl> public static boolean onPlayerAttackTarget ( EntityPlayer player , Entity target ) <nl> { <nl> if ( MinecraftForge . EVENT _ BUS . post ( new AttackEntityEvent ( player , target ) ) ) return false ; <nl> - ItemStack stack = player . getCurrentEquippedItem ( ) ; <nl> + ItemStack stack = player . func _ 184614 _ ca ( ) ; <nl> if ( stack ! = null & & stack . getItem ( ) . onLeftClickEntity ( stack , player , target ) ) return false ; <nl> return true ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / event / entity / player / PlayerDestroyItemEvent . java b / src / main / java / net / minecraftforge / event / entity / player / PlayerDestroyItemEvent . java <nl> index 65fe0a1 . . 69de7e6 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / entity / player / PlayerDestroyItemEvent . java <nl> + + + b / src / main / java / net / minecraftforge / event / entity / player / PlayerDestroyItemEvent . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import net . minecraft . util . EnumHand ; <nl> public class PlayerDestroyItemEvent extends PlayerEvent <nl> { <nl> private final ItemStack original ; <nl> - private final EnumHand hand ; <nl> + private final EnumHand hand ; / / May be null if this player destroies the item by any use besides holding it . <nl> public PlayerDestroyItemEvent ( EntityPlayer player , ItemStack original , EnumHand hand ) <nl> { <nl> super ( player ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> index d440f38 . . c0df1e3 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package net . minecraftforge . items . wrapper ; <nl> <nl> import net . minecraft . entity . player . InventoryPlayer ; <nl> + import net . minecraft . inventory . EntityEquipmentSlot ; <nl> import net . minecraft . item . ItemStack ; <nl> <nl> public class PlayerArmorInvWrapper extends InvWrapper <nl> @ @ - 31 , 8 + 32 , 17 @ @ public class PlayerArmorInvWrapper extends InvWrapper <nl> @ Override <nl> public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) <nl> { <nl> + EntityEquipmentSlot equ = null ; <nl> + for ( EntityEquipmentSlot s : EntityEquipmentSlot . values ( ) ) <nl> + { <nl> + if ( s . func _ 188453 _ a ( ) = = EntityEquipmentSlot . Type . ARMOR & & s . func _ 188454 _ b ( ) = = slot ) <nl> + { <nl> + equ = s ; <nl> + break ; <nl> + } <nl> + } <nl> / / check if it ' s valid for the armor slot <nl> - if ( slot < 4 & & stack ! = null & & stack . getItem ( ) . isValidArmor ( stack , 3 - slot , inventoryPlayer . player ) ) <nl> + if ( slot < 4 & & stack ! = null & & stack . getItem ( ) . isValidArmor ( stack , equ , inventoryPlayer . player ) ) <nl> { <nl> return super . insertItem ( slot + offset , stack , simulate ) ; <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / NoPotionEffectRenderTest . java b / src / test / java / net / minecraftforge / debug / NoPotionEffectRenderTest . java <nl> index f8d7791 . . 2bb868c 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / NoPotionEffectRenderTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / NoPotionEffectRenderTest . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import net . minecraft . potion . PotionEffect ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameData ; <nl> <nl> @ Mod ( modid = NoPotionEffectRenderTest . modID , name = " No Potion Effect Render Test " , version = " 0 . 0 . 0 " ) <nl> public class NoPotionEffectRenderTest { <nl> @ @ - 12 , 13 + 13 , 14 @ @ public class NoPotionEffectRenderTest { <nl> <nl> @ Mod . EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) { <nl> - TestPotion INSTANCE = new TestPotion ( 30 , new ResourceLocation ( modID , " test _ potion " ) , false , 0xff00ff ) ; <nl> + TestPotion INSTANCE = new TestPotion ( new ResourceLocation ( modID , " test _ potion " ) , false , 0xff00ff ) ; <nl> + GameData . getPotionRegistry ( ) . register ( - 1 , new ResourceLocation ( modID , " test _ potion " ) , INSTANCE ) ; <nl> } <nl> <nl> public static class TestPotion extends Potion { <nl> <nl> - public TestPotion ( int potionID , ResourceLocation location , boolean badEffect , int potionColor ) { <nl> - super ( potionID , location , badEffect , potionColor ) ; <nl> + public TestPotion ( ResourceLocation location , boolean badEffect , int potionColor ) { <nl> + super ( badEffect , potionColor ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / java / net / minecraftforge / debug / PotionRegistryDebug . java b / src / test / java / net / minecraftforge / debug / PotionRegistryDebug . java <nl> index 460567b . . bcd958d 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / PotionRegistryDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / PotionRegistryDebug . java <nl> @ @ - 6 , 13 + 6 , 18 @ @ import gnu . trove . set . hash . TIntHashSet ; <nl> import java . util . Random ; <nl> <nl> import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . GlStateManager ; <nl> + import net . minecraft . client . renderer . Tessellator ; <nl> + import net . minecraft . client . renderer . VertexBuffer ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> + import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> import net . minecraft . potion . Potion ; <nl> import net . minecraft . potion . PotionEffect ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameData ; <nl> <nl> @ Mod ( modid = PotionRegistryDebug . MODID ) <nl> public class PotionRegistryDebug { <nl> @ @ - 20 , 8 + 25 , 10 @ @ public class PotionRegistryDebug { <nl> <nl> @ Mod . EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) { <nl> - new PotionForge ( new ResourceLocation ( " forge " , " forge " ) , false , 0xff00ff ) ; / / test automatic id distribution <nl> - new PotionForge ( 200 , new ResourceLocation ( " forge " , " forgy " ) , true , 0x00ff00 ) ; / / test that ids above 127 work <nl> + Potion forge = new PotionForge ( new ResourceLocation ( " forge " , " forge " ) , false , 0xff00ff ) ; / / test automatic id distribution <nl> + Potion forgy = new PotionForge ( new ResourceLocation ( " forge " , " forgy " ) , true , 0x00ff00 ) ; / / test that ids above 127 work <nl> + GameData . getPotionRegistry ( ) . register ( - 1 , new ResourceLocation ( " forge " , " forge " ) , forge ) ; / / TODo : Generic this out in GameRegistry , ' RegistryEntry ' base type ? <nl> + GameData . getPotionRegistry ( ) . register ( 200 , new ResourceLocation ( " forge " , " forgy " ) , forgy ) ; <nl> <nl> Random rand = new Random ( ) ; <nl> TIntSet taken = new TIntHashSet ( 100 ) ; <nl> @ @ - 29 , 7 + 36 , 7 @ @ public class PotionRegistryDebug { <nl> taken . add ( ra ) ; <nl> <nl> / / a new potion with a random id so that forge has to remap it <nl> - new PotionForge ( ra , new ResourceLocation ( " forge " , " realRandomPotion " ) , false , 0x0000ff ) ; <nl> + / / new PotionForge ( ra , new ResourceLocation ( " forge " , " realRandomPotion " ) , false , 0x0000ff ) ; <nl> <nl> for ( int i = 0 ; i < 20 ; i + + ) { <nl> int r = rand . nextInt ( 200 ) + 35 ; <nl> @ @ - 39 , 25 + 46 , 19 @ @ public class PotionRegistryDebug { <nl> taken . add ( r ) ; <nl> / / this potions will most likely not have the same IDs between server and client . <nl> / / The forge handshake on connect should fix this . <nl> - new PotionForge ( r , new ResourceLocation ( " forge " , " randomPotion " + r ) , false , 0xff00ff ) ; <nl> + / / new PotionForge ( new ResourceLocation ( " forge " , " randomPotion " + r ) , false , 0xff00ff ) ; <nl> } <nl> } <nl> <nl> protected class PotionForge extends Potion { <nl> - <nl> - public PotionForge ( int potionID , ResourceLocation location , boolean badEffect , int potionColor ) { <nl> - super ( potionID , location , badEffect , potionColor ) ; <nl> - setPotionName ( " potion . " + location . getResourcePath ( ) ) ; <nl> - } <nl> - <nl> protected PotionForge ( ResourceLocation location , boolean badEffect , int potionColor ) { <nl> - super ( location , badEffect , potionColor ) ; <nl> + super ( badEffect , potionColor ) ; <nl> setPotionName ( " potion . " + location . getResourcePath ( ) ) ; <nl> } <nl> <nl> @ Override <nl> public void renderInventoryEffect ( int x , int y , PotionEffect effect , Minecraft mc ) { <nl> - Potion potion = Potion . potionTypes [ effect . getPotionID ( ) ] ; <nl> + Potion potion = effect . func _ 188419 _ a ( ) ; <nl> <nl> mc . getTextureManager ( ) . bindTexture ( TextureMap . locationBlocksTexture ) ; <nl> TextureAtlasSprite sprite = mc . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / fire _ layer _ 0 " ) ; <nl> @ @ - 67 , 16 + 68 , 21 @ @ public class PotionRegistryDebug { <nl> <nl> int width = 18 ; <nl> int height = width ; <nl> - / * <nl> + <nl> + float r = ( float ) ( potion . getLiquidColor ( ) > > 24 & 255 ) / 255 . 0F ; <nl> + float g = ( float ) ( potion . getLiquidColor ( ) > > 16 & 255 ) / 255 . 0F ; <nl> + float b = ( float ) ( potion . getLiquidColor ( ) > > 8 & 255 ) / 255 . 0F ; <nl> + float a = ( float ) ( potion . getLiquidColor ( ) & 255 ) / 255 . 0F ; <nl> + <nl> Tessellator tessellator = Tessellator . getInstance ( ) ; <nl> - VertexBuffer VertexBuffer = tessellator . getVertexBuffer ( ) ; <nl> - VertexBuffer . startDrawingQuads ( ) ; <nl> - VertexBuffer . setColorOpaque _ I ( potion . getLiquidColor ( ) ) ; <nl> - VertexBuffer . addVertexWithUV ( ( double ) x , ( double ) ( y + height ) , 0 . 0D , sprite . getMinU ( ) , sprite . getMaxV ( ) ) ; <nl> - VertexBuffer . addVertexWithUV ( ( double ) ( x + width ) , ( double ) ( y + height ) , 0 . 0D , sprite . getMaxU ( ) , sprite . getMaxV ( ) ) ; <nl> - VertexBuffer . addVertexWithUV ( ( double ) ( x + width ) , ( double ) y , 0 . 0D , sprite . getMaxU ( ) , sprite . getMinV ( ) ) ; <nl> - VertexBuffer . addVertexWithUV ( ( double ) x , ( double ) y , 0 . 0D , sprite . getMinU ( ) , sprite . getMinV ( ) ) ; <nl> - tessellator . draw ( ) ; * / <nl> + VertexBuffer buf = tessellator . getWorldRenderer ( ) ; <nl> + buf . begin ( 7 , DefaultVertexFormats . POSITION _ TEX ) ; <nl> + GlStateManager . color ( r , g , b , a ) ; <nl> + buf . pos ( ( double ) x , ( double ) ( y + height ) , 0 . 0D ) . func _ 187315 _ a ( sprite . getMinU ( ) , sprite . getMaxV ( ) ) . endVertex ( ) ; <nl> + buf . pos ( ( double ) ( x + width ) , ( double ) ( y + height ) , 0 . 0D ) . func _ 187315 _ a ( sprite . getMaxU ( ) , sprite . getMaxV ( ) ) . endVertex ( ) ; <nl> + buf . pos ( ( double ) ( x + width ) , ( double ) y , 0 . 0D ) . func _ 187315 _ a ( sprite . getMaxU ( ) , sprite . getMinV ( ) ) . endVertex ( ) ; <nl> + buf . pos ( ( double ) x , ( double ) y , 0 . 0D ) . func _ 187315 _ a ( sprite . getMinU ( ) , sprite . getMinV ( ) ) . endVertex ( ) ; <nl> + tessellator . draw ( ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / test / ClientCommandTest . java b / src / test / java / net / minecraftforge / test / ClientCommandTest . java <nl> index 3d8157e . . 6e4a1d2 100644 <nl> - - - a / src / test / java / net / minecraftforge / test / ClientCommandTest . java <nl> + + + b / src / test / java / net / minecraftforge / test / ClientCommandTest . java <nl> @ @ - 37 , 13 + 37 , 13 @ @ public class ClientCommandTest { <nl> } <nl> <nl> @ Override <nl> - public boolean canCommandSenderUseCommand ( ICommandSender sender ) <nl> + public boolean func _ 184882 _ a ( MinecraftServer server , ICommandSender sender ) <nl> { <nl> return true ; <nl> } <nl> <nl> @ Override <nl> - public List < String > addTabCompletionOptions ( ICommandSender sender , String [ ] args , BlockPos pos ) <nl> + public List < String > func _ 184883 _ a ( MinecraftServer server , ICommandSender sender , String [ ] args , BlockPos pos ) <nl> { <nl> if ( args . length > 0 ) <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / test / NoBedSleepingTest . java b / src / test / java / net / minecraftforge / test / NoBedSleepingTest . java <nl> index c231fcd . . 88ea98d 100644 <nl> - - - a / src / test / java / net / minecraftforge / test / NoBedSleepingTest . java <nl> + + + b / src / test / java / net / minecraftforge / test / NoBedSleepingTest . java <nl> @ @ - 1 , 16 + 1 , 26 @ @ <nl> package net . minecraftforge . test ; <nl> <nl> import net . minecraft . creativetab . CreativeTabs ; <nl> - import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . entity . player . EntityPlayer . EnumStatus ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . nbt . NBTBase ; <nl> + import net . minecraft . nbt . NBTBase . NBTPrimitive ; <nl> + import net . minecraft . nbt . NBTTagByte ; <nl> + import net . minecraft . util . ActionResult ; <nl> + import net . minecraft . util . EnumActionResult ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumHand ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . world . World ; <nl> - import net . minecraftforge . common . IExtendedEntityProperties ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> - import net . minecraftforge . event . entity . EntityEvent . EntityConstructing ; <nl> + import net . minecraftforge . common . capabilities . Capability ; <nl> + import net . minecraftforge . common . capabilities . CapabilityInject ; <nl> + import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> + import net . minecraftforge . common . capabilities . ICapabilitySerializable ; <nl> + import net . minecraftforge . common . capabilities . Capability . IStorage ; <nl> + import net . minecraftforge . event . AttachCapabilitiesEvent ; <nl> import net . minecraftforge . event . entity . player . PlayerWakeUpEvent ; <nl> import net . minecraftforge . event . entity . player . SleepingLocationCheckEvent ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> @ @ - 24 , 64 + 34 , 90 @ @ public class NoBedSleepingTest <nl> { <nl> public static final String MODID = " ForgeDebugNoBedSleeping " ; <nl> public static final String VERSION = " 1 . 0 " ; <nl> + @ CapabilityInject ( IExtraSleeping . class ) <nl> + private static final Capability < IExtraSleeping > SLEEP _ CAP = null ; <nl> <nl> @ Mod . EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> GameRegistry . registerItem ( ItemSleepingPill . instance , ItemSleepingPill . name ) ; <nl> + CapabilityManager . INSTANCE . register ( IExtraSleeping . class , new Storage ( ) , DefaultImpl . class ) ; <nl> MinecraftForge . EVENT _ BUS . register ( new EventHandler ( ) ) ; <nl> } <nl> <nl> public static class EventHandler <nl> { <nl> @ SubscribeEvent <nl> - public void onEntityConstruct ( EntityConstructing evt ) <nl> + public void onEntityConstruct ( AttachCapabilitiesEvent evt ) <nl> { <nl> - evt . entity . registerExtendedProperties ( ExtendedPropertySleeping . name , new ExtendedPropertySleeping ( ) ) ; <nl> + evt . addCapability ( new ResourceLocation ( MODID , " IExtraSleeping " ) , new ICapabilitySerializable < NBTPrimitive > ( ) <nl> + { <nl> + IExtraSleeping inst = SLEEP _ CAP . getDefaultInstance ( ) ; <nl> + @ Override <nl> + public boolean hasCapability ( Capability < ? > capability , EnumFacing facing ) { <nl> + return capability = = SLEEP _ CAP ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + @ Override <nl> + public < T > T getCapability ( Capability < T > capability , EnumFacing facing ) { <nl> + return capability = = SLEEP _ CAP ? ( T ) inst : null ; <nl> + } <nl> + <nl> + @ Override <nl> + public NBTPrimitive serializeNBT ( ) { <nl> + return ( NBTPrimitive ) SLEEP _ CAP . getStorage ( ) . writeNBT ( SLEEP _ CAP , inst , null ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void deserializeNBT ( NBTPrimitive nbt ) { <nl> + SLEEP _ CAP . getStorage ( ) . readNBT ( SLEEP _ CAP , inst , null , nbt ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> @ SubscribeEvent <nl> public void onBedCheck ( SleepingLocationCheckEvent evt ) <nl> { <nl> - final IExtendedEntityProperties property = evt . entityPlayer . getExtendedProperties ( ExtendedPropertySleeping . name ) ; <nl> - if ( property instanceof ExtendedPropertySleeping & & ( ( ExtendedPropertySleeping ) property ) . isSleeping ) <nl> + final IExtraSleeping sleep = evt . entityPlayer . getCapability ( SLEEP _ CAP , null ) ; <nl> + if ( sleep ! = null & & sleep . isSleeping ( ) ) <nl> evt . setResult ( Result . ALLOW ) ; <nl> } <nl> <nl> @ SubscribeEvent <nl> public void onWakeUp ( PlayerWakeUpEvent evt ) <nl> { <nl> - final IExtendedEntityProperties property = evt . entityPlayer . getExtendedProperties ( ExtendedPropertySleeping . name ) ; <nl> - if ( property instanceof ExtendedPropertySleeping ) <nl> - ( ( ExtendedPropertySleeping ) property ) . isSleeping = false ; <nl> + final IExtraSleeping sleep = evt . entityPlayer . getCapability ( SLEEP _ CAP , null ) ; <nl> + if ( sleep ! = null ) <nl> + sleep . setSleeping ( false ) ; <nl> } <nl> } <nl> <nl> - public static class ExtendedPropertySleeping implements IExtendedEntityProperties <nl> - { <nl> - private static final String TAG _ NAME = " IsSleepingExt " ; <nl> - <nl> - public static final String name = " is _ sleeping " ; <nl> - <nl> - public boolean isSleeping ; <nl> - <nl> - @ Override <nl> - public void saveNBTData ( NBTTagCompound compound ) <nl> - { <nl> - compound . setBoolean ( TAG _ NAME , isSleeping ) ; <nl> - } <nl> + public interface IExtraSleeping { <nl> + boolean isSleeping ( ) ; <nl> + void setSleeping ( boolean value ) ; <nl> + } <nl> <nl> + public static class Storage implements IStorage < IExtraSleeping > <nl> + { <nl> @ Override <nl> - public void loadNBTData ( NBTTagCompound compound ) <nl> + public NBTBase writeNBT ( Capability < IExtraSleeping > capability , IExtraSleeping instance , EnumFacing side ) <nl> { <nl> - this . isSleeping = compound . getBoolean ( TAG _ NAME ) ; <nl> + return new NBTTagByte ( ( byte ) ( instance . isSleeping ( ) ? 1 : 0 ) ) ; <nl> } <nl> <nl> @ Override <nl> - public void init ( Entity entity , World world ) <nl> + public void readNBT ( Capability < IExtraSleeping > capability , IExtraSleeping instance , EnumFacing side , NBTBase nbt ) <nl> { <nl> + instance . setSleeping ( ( ( NBTPrimitive ) nbt ) . getByte ( ) = = 1 ) ; <nl> } <nl> + } <nl> <nl> + public static class DefaultImpl implements IExtraSleeping <nl> + { <nl> + private boolean isSleeping = false ; <nl> + @ Override public boolean isSleeping ( ) { return isSleeping ; } <nl> + @ Override public void setSleeping ( boolean value ) { this . isSleeping = value ; } <nl> } <nl> <nl> public static class ItemSleepingPill extends Item <nl> @ @ - 95 , 19 + 131 , 21 @ @ public class NoBedSleepingTest <nl> setUnlocalizedName ( MODID + " : " + name ) ; <nl> } <nl> <nl> - public ItemStack onItemRightClick ( ItemStack itemStackIn , World worldIn , EntityPlayer playerIn ) <nl> + @ Override <nl> + public ActionResult < ItemStack > onItemRightClick ( ItemStack stack , World world , EntityPlayer player , EnumHand hand ) <nl> { <nl> - if ( ! worldIn . isRemote ) <nl> + if ( ! world . isRemote ) <nl> { <nl> - final EnumStatus result = playerIn . trySleep ( playerIn . getPosition ( ) ) ; <nl> + final EnumStatus result = player . trySleep ( player . getPosition ( ) ) ; <nl> if ( result = = EnumStatus . OK ) <nl> { <nl> - final IExtendedEntityProperties property = playerIn . getExtendedProperties ( ExtendedPropertySleeping . name ) ; <nl> - if ( property instanceof ExtendedPropertySleeping ) <nl> - ( ( ExtendedPropertySleeping ) property ) . isSleeping = true ; <nl> + final IExtraSleeping sleep = player . getCapability ( SLEEP _ CAP , null ) ; <nl> + if ( sleep ! = null ) <nl> + sleep . setSleeping ( true ) ; <nl> + return ActionResult . newResult ( EnumActionResult . SUCCESS , stack ) ; <nl> } <nl> } <nl> - return itemStackIn ; <nl> + return ActionResult . newResult ( EnumActionResult . PASS , stack ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 5cd478c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + @ @ - 30 , 6 + 30 , 7 @ @ <nl> + import net . minecraft . world . demo . DemoWorldServer ; <nl> + import net . minecraft . world . storage . ISaveFormat ; <nl> + import net . minecraft . world . storage . WorldInfo ; <nl> + + import net . minecraftforge . client . ForgeHooksClient ; <nl> + import org . apache . commons . io . Charsets ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + @ @ - 630 , 6 + 631 , 7 @ @ <nl> + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; <nl> + } <nl> + } <nl> + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; <nl> + String s1 = " Copyright Mojang AB . Do not distribute ! " ; <nl> + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 10266a2 . . 4ec67c7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 1 , 6 + 1 , 12 @ @ <nl> package net . minecraftforge . client ; <nl> <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> + import java . net . URLConnection ; <nl> import java . util . HashMap ; <nl> + import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . TreeSet ; <nl> <nl> @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; <nl> <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> import net . minecraft . client . entity . EntityPlayerSP ; <nl> + import net . minecraft . client . gui . FontRenderer ; <nl> + import net . minecraft . client . gui . GuiMainMenu ; <nl> import net . minecraftforge . client . event . FOVUpdateEvent ; <nl> <nl> import org . lwjgl . LWJGLException ; <nl> @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; <nl> import org . lwjgl . opengl . GL12 ; <nl> import org . lwjgl . opengl . PixelFormat ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + import com . google . gson . JsonParseException ; <nl> + <nl> import cpw . mods . fml . client . FMLClientHandler ; <nl> import cpw . mods . fml . client . registry . RenderingRegistry ; <nl> + import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockLiquid ; <nl> @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . ChatComponentTranslation ; <nl> + import net . minecraft . util . EnumChatFormatting ; <nl> import net . minecraft . util . MathHelper ; <nl> import net . minecraft . util . MovingObjectPosition ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fluids . RenderBlockFluid ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> public class ForgeHooksClient <nl> { <nl> @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient <nl> / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; <nl> / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; <nl> } <nl> + <nl> + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) <nl> + { <nl> + Status status = ForgeVersion . getStatus ( ) ; <nl> + if ( status = = BETA | | status = = BETA _ OUTDATED ) <nl> + { <nl> + / / render a warning at the top of the screen , <nl> + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + line = " Major issues may arise , verify before reporting . " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + <nl> + String line = null ; <nl> + switch ( status ) <nl> + { <nl> + / / case FAILED : line = " Version check failed " ; break ; <nl> + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; <nl> + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; <nl> + case OUTDATED : <nl> + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; <nl> + default : break ; <nl> + } <nl> + <nl> + if ( line ! = null ) <nl> + { <nl> + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line <nl> + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> index d18f81a . . 86de438 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame <nl> private ScaledResolution res = null ; <nl> private FontRenderer fontrenderer = null ; <nl> private RenderGameOverlayEvent eventParent ; <nl> - private static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; <nl> <nl> public GuiIngameForge ( Minecraft mc ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 145a3c5 . . 9ca5fab 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; <nl> <nl> public class ForgeHooks <nl> { <nl> - static class GrassEntry extends WeightedRandom . Item <nl> - { <nl> - public final Block block ; <nl> - public final int metadata ; <nl> - public GrassEntry ( Block block , int meta , int weight ) <nl> - { <nl> - super ( weight ) ; <nl> - this . block = block ; <nl> - this . metadata = meta ; <nl> - } <nl> - } <nl> - <nl> static class SeedEntry extends WeightedRandom . Item <nl> { <nl> public final ItemStack seed ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 4072090 . . d54730a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static double zombieSummonBaseChance = 0 . 1 ; <nl> public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; <nl> public static float zombieBabyChance = 0 . 05f ; <nl> - public static boolean shouldSortRecipies = false ; <nl> + public static boolean shouldSortRecipies = true ; <nl> + public static boolean disableVersionCheck = false ; <nl> <nl> public ForgeModContainer ( ) <nl> { <nl> @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; <nl> shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; <nl> <nl> + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; <nl> + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; <nl> + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; <nl> + <nl> if ( config . hasChanged ( ) ) <nl> { <nl> config . save ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 3dfe78e . . 0d4d751 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 4 , 6 + 4 , 17 @ @ <nl> * / <nl> <nl> package net . minecraftforge . common ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> + <nl> + import java . io . InputStream ; <nl> + import java . net . URL ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> <nl> public class ForgeVersion <nl> { <nl> @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion <nl> / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> public static final int buildVersion = 0 ; <nl> <nl> + private static Status status = PENDING ; <nl> + private static String target = null ; <nl> + <nl> public static int getMajorVersion ( ) <nl> { <nl> return majorVersion ; <nl> @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion <nl> return buildVersion ; <nl> } <nl> <nl> + public static Status getStatus ( ) <nl> + { <nl> + return status ; <nl> + } <nl> + <nl> + public static String getTarget ( ) <nl> + { <nl> + return target ; <nl> + } <nl> + <nl> public static String getVersion ( ) <nl> { <nl> return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> } <nl> + <nl> + public static enum Status <nl> + { <nl> + PENDING , <nl> + FAILED , <nl> + UP _ TO _ DATE , <nl> + OUTDATED , <nl> + AHEAD , <nl> + BETA , <nl> + BETA _ OUTDATED <nl> + } <nl> + <nl> + public static void startVersionCheck ( ) <nl> + { <nl> + new Thread ( " Forge Version Check " ) <nl> + { <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + try <nl> + { <nl> + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + InputStream con = url . openStream ( ) ; <nl> + String data = new String ( ByteStreams . toByteArray ( con ) ) ; <nl> + con . close ( ) ; <nl> + <nl> + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; <nl> + String homepage = ( String ) json . get ( " homepage " ) ; <nl> + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; <nl> + <nl> + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; <nl> + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; <nl> + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; <nl> + <nl> + if ( rec ! = null ) <nl> + { <nl> + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; <nl> + int diff = recommended . compareTo ( current ) ; <nl> + <nl> + if ( diff = = 0 ) <nl> + status = UP _ TO _ DATE ; <nl> + else if ( diff < 0 ) <nl> + { <nl> + status = AHEAD ; <nl> + if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + } <nl> + } <nl> + else <nl> + { <nl> + status = OUTDATED ; <nl> + target = rec ; <nl> + } <nl> + } <nl> + else if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = BETA _ OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + status = FAILED ; <nl> + } <nl> + } <nl> + } . start ( ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> index bb4a94e . . 3a98b16 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . entity . monster . EntityEnderman ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraftforge . common . ForgeHooks . GrassEntry ; <nl> import net . minecraftforge . common . ForgeHooks . SeedEntry ; <nl> import net . minecraftforge . event . entity . EntityEvent ; <nl> import net . minecraftforge . oredict . OreDictionary ; <nl> @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge <nl> public static final EventBus EVENT _ BUS = new EventBus ( ) ; <nl> public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; <nl> public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; <nl> + public static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> <nl> private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; <nl> <nl> @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge <nl> EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; <nl> OreDictionary . getOreName ( 0 ) ; <nl> <nl> + if ( ! ForgeModContainer . disableVersionCheck ) <nl> + { <nl> + ForgeVersion . startVersionCheck ( ) ; <nl> + } <nl> + <nl> / / Force these classes to be defined , Should prevent derp error hiding . <nl> new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; <nl> }

TEST DIFF:
diff - - git a / patches . mcp / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch b / patches . mcp / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch 
 index 0b1fdfb . . ec372f4 100644 
 - - - a / patches . mcp / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch 
 + + + b / patches . mcp / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch 
 @ @ - 51 , 8 + 51 , 8 @ @ 
 float f = entityplayersp . func _ 184825 _ o ( 1 . 0F ) ; 
 - this . field _ 187469 _ f + = MathHelper . clamp _ float ( ( Objects . equal ( this . field _ 187467 _ d , itemstack ) ? f * f * f : 0 . 0F ) - this . field _ 187469 _ f , - 0 . 4F , 0 . 4F ) ; 
 - this . field _ 187471 _ h + = MathHelper . clamp _ float ( ( float ) ( Objects . equal ( this . field _ 187468 _ e , itemstack1 ) ? 1 : 0 ) - this . field _ 187471 _ h , - 0 . 4F , 0 . 4F ) ; 
 - + this . field _ 187469 _ f + = MathHelper . clamp _ float ( ( net . minecraftforge . client . ForgeHooksClient . shouldCauseReequipAnimation ( this . field _ 187467 _ d , itemstack ) ? f * f * f : 0 . 0F ) - this . field _ 187469 _ f , - 0 . 4F , 0 . 4F ) ; 
 - + this . field _ 187471 _ h + = MathHelper . clamp _ float ( ( float ) ( net . minecraftforge . client . ForgeHooksClient . shouldCauseReequipAnimation ( this . field _ 187468 _ e , itemstack1 ) ? 1 : 0 ) - this . field _ 187471 _ h , - 0 . 4F , 0 . 4F ) ; 
 + + this . field _ 187469 _ f + = MathHelper . clamp _ float ( ( net . minecraftforge . client . ForgeHooksClient . shouldCauseReequipAnimation ( this . field _ 187467 _ d , itemstack , entityplayersp . inventory . currentItem ) ? f * f * f : 0 . 0F ) - this . field _ 187469 _ f , - 0 . 4F , 0 . 4F ) ; 
 + + this . field _ 187471 _ h + = MathHelper . clamp _ float ( ( float ) ( net . minecraftforge . client . ForgeHooksClient . shouldCauseReequipAnimation ( this . field _ 187468 _ e , itemstack1 , - 1 ) ? 1 : 0 ) - this . field _ 187471 _ h , - 0 . 4F , 0 . 4F ) ; 
 } 
 
 if ( this . field _ 187469 _ f < 0 . 1F ) 
 diff - - git a / patches . mcp / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch b / patches . mcp / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 index 4532e82 . . e347436 100644 
 - - - a / patches . mcp / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 + + + b / patches . mcp / minecraft / net / minecraft / entity / player / EntityPlayer . java . patch 
 @ @ - 107 , 7 + 107 , 7 @ @ 
 public EntityItem dropItem ( ItemStack droppedItem , boolean dropAround , boolean traceItem ) 
 @ @ - 746 , 15 + 773 , 22 @ @ 
 
 - protected ItemStack func _ 184816 _ a ( EntityItem p _ 184816 _ 1 _ ) 
 + public ItemStack func _ 184816 _ a ( EntityItem p _ 184816 _ 1 _ ) 
 { 
 + if ( captureDrops ) capturedDrops . add ( p _ 184816 _ 1 _ ) ; 
 + else / / Forge : Don ' t indent to keep patch smaller . 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index c98196d . . 4ead4ca 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 604 , 13 + 604 , 19 @ @ public class ForgeHooksClient 
 return ( new SimpleBakedModel . Builder ( state , ibakedmodel , texture , pos ) ) . makeBakedModel ( ) ; 
 } 
 
 - public static boolean shouldCauseReequipAnimation ( ItemStack from , ItemStack to ) 
 + private static int slotMainHand = 0 ; 
 + public static boolean shouldCauseReequipAnimation ( ItemStack from , ItemStack to , int slot ) 
 { 
 if ( ! Objects . equal ( from , to ) | | from = = null ) 
 { 
 return false ; 
 } 
 - / / FIXME : 3rd argument ? 
 - return from . getItem ( ) . shouldCauseReequipAnimation ( from , to ) ; 
 + boolean changed = false ; 
 + if ( slot ! = - 1 ) 
 + { 
 + changed = slot ! = slotMainHand ; 
 + slotMainHand = slot ; 
 + } 
 + return from . getItem ( ) . shouldCauseReequipAnimation ( from , to , changed ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 77de536 . . 0c3ea9f 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 249 , 7 + 249 , 7 @ @ public class ModelLoader extends ModelBakery 
 } 
 
 registerVariantNames ( ) ; 
 - 
 + 
 List < String > itemVariants = Lists . newArrayList ( ) ; 
 for ( Item item : GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) 
 { 
 @ @ - 560 , 7 + 560 , 7 @ @ public class ModelLoader extends ModelBakery 
 return bakeNormal ( model , perState , state . apply ( Optional . < IModelPart > absent ( ) ) . or ( TRSRTransformation . identity ( ) ) , newTransforms , format , bakedTextureGetter , uvlock ) ; 
 } 
 
 - private IBakedModel bakeNormal ( ModelBlock model , IModelState perState , final TRSRTransformation modelState , List < TRSRTransformation > newTransforms , VertexFormat format , final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) 
 + private IBakedModel bakeNormal ( ModelBlock model , IModelState perState , final TRSRTransformation modelState , List < TRSRTransformation > newTransforms , final VertexFormat format , final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) 
 { 
 TextureAtlasSprite particle = bakedTextureGetter . apply ( new ResourceLocation ( model . resolveTextureName ( " particle " ) ) ) ; 
 SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( model , model . func _ 187967 _ g ( ) ) ) . setTexture ( particle ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 405e224 . . cecc177 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 656 , 7 + 656 , 7 @ @ public class ForgeHooks 
 { 
 / / Logic from tryHarvestBlock for pre - canceling the event 
 boolean preCancelEvent = false ; 
 - if ( gameType . isCreative ( ) & & entityPlayer . getHeldItem ( ) ! = null & & entityPlayer . getHeldItem ( ) . getItem ( ) instanceof ItemSword ) 
 + if ( gameType . isCreative ( ) & & entityPlayer . func _ 184614 _ ca ( ) ! = null & & entityPlayer . func _ 184614 _ ca ( ) . getItem ( ) instanceof ItemSword ) 
 preCancelEvent = true ; 
 
 if ( gameType . isAdventure ( ) ) 
 @ @ - 666 , 7 + 666 , 7 @ @ public class ForgeHooks 
 
 if ( ! entityPlayer . isAllowEdit ( ) ) 
 { 
 - ItemStack itemstack = entityPlayer . getCurrentEquippedItem ( ) ; 
 + ItemStack itemstack = entityPlayer . func _ 184614 _ ca ( ) ; 
 if ( itemstack = = null | | ! itemstack . canDestroy ( world . getBlockState ( pos ) . getBlock ( ) ) ) 
 preCancelEvent = true ; 
 } 
 @ @ - 865 , 7 + 865 , 7 @ @ public class ForgeHooks 
 stack = stack . getItem ( ) . getContainerItem ( stack ) ; 
 if ( stack ! = null & & stack . isItemStackDamageable ( ) & & stack . getMetadata ( ) > stack . getMaxDamage ( ) ) 
 { 
 - MinecraftForge . EVENT _ BUS . post ( new PlayerDestroyItemEvent ( craftingPlayer . get ( ) , stack ) ) ; 
 + ForgeEventFactory . onPlayerDestroyItem ( craftingPlayer . get ( ) , stack , null ) ; 
 return null ; 
 } 
 return stack ; 
 @ @ - 904 , 7 + 904 , 7 @ @ public class ForgeHooks 
 public static boolean onPlayerAttackTarget ( EntityPlayer player , Entity target ) 
 { 
 if ( MinecraftForge . EVENT _ BUS . post ( new AttackEntityEvent ( player , target ) ) ) return false ; 
 - ItemStack stack = player . getCurrentEquippedItem ( ) ; 
 + ItemStack stack = player . func _ 184614 _ ca ( ) ; 
 if ( stack ! = null & & stack . getItem ( ) . onLeftClickEntity ( stack , player , target ) ) return false ; 
 return true ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / event / entity / player / PlayerDestroyItemEvent . java b / src / main / java / net / minecraftforge / event / entity / player / PlayerDestroyItemEvent . java 
 index 65fe0a1 . . 69de7e6 100644 
 - - - a / src / main / java / net / minecraftforge / event / entity / player / PlayerDestroyItemEvent . java 
 + + + b / src / main / java / net / minecraftforge / event / entity / player / PlayerDestroyItemEvent . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import net . minecraft . util . EnumHand ; 
 public class PlayerDestroyItemEvent extends PlayerEvent 
 { 
 private final ItemStack original ; 
 - private final EnumHand hand ; 
 + private final EnumHand hand ; / / May be null if this player destroies the item by any use besides holding it . 
 public PlayerDestroyItemEvent ( EntityPlayer player , ItemStack original , EnumHand hand ) 
 { 
 super ( player ) ; 
 diff - - git a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 index d440f38 . . c0df1e3 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / PlayerArmorInvWrapper . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package net . minecraftforge . items . wrapper ; 
 
 import net . minecraft . entity . player . InventoryPlayer ; 
 + import net . minecraft . inventory . EntityEquipmentSlot ; 
 import net . minecraft . item . ItemStack ; 
 
 public class PlayerArmorInvWrapper extends InvWrapper 
 @ @ - 31 , 8 + 32 , 17 @ @ public class PlayerArmorInvWrapper extends InvWrapper 
 @ Override 
 public ItemStack insertItem ( int slot , ItemStack stack , boolean simulate ) 
 { 
 + EntityEquipmentSlot equ = null ; 
 + for ( EntityEquipmentSlot s : EntityEquipmentSlot . values ( ) ) 
 + { 
 + if ( s . func _ 188453 _ a ( ) = = EntityEquipmentSlot . Type . ARMOR & & s . func _ 188454 _ b ( ) = = slot ) 
 + { 
 + equ = s ; 
 + break ; 
 + } 
 + } 
 / / check if it ' s valid for the armor slot 
 - if ( slot < 4 & & stack ! = null & & stack . getItem ( ) . isValidArmor ( stack , 3 - slot , inventoryPlayer . player ) ) 
 + if ( slot < 4 & & stack ! = null & & stack . getItem ( ) . isValidArmor ( stack , equ , inventoryPlayer . player ) ) 
 { 
 return super . insertItem ( slot + offset , stack , simulate ) ; 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / NoPotionEffectRenderTest . java b / src / test / java / net / minecraftforge / debug / NoPotionEffectRenderTest . java 
 index f8d7791 . . 2bb868c 100644 
 - - - a / src / test / java / net / minecraftforge / debug / NoPotionEffectRenderTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / NoPotionEffectRenderTest . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import net . minecraft . potion . PotionEffect ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . fml . common . Mod ; 
 import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameData ; 
 
 @ Mod ( modid = NoPotionEffectRenderTest . modID , name = " No Potion Effect Render Test " , version = " 0 . 0 . 0 " ) 
 public class NoPotionEffectRenderTest { 
 @ @ - 12 , 13 + 13 , 14 @ @ public class NoPotionEffectRenderTest { 
 
 @ Mod . EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) { 
 - TestPotion INSTANCE = new TestPotion ( 30 , new ResourceLocation ( modID , " test _ potion " ) , false , 0xff00ff ) ; 
 + TestPotion INSTANCE = new TestPotion ( new ResourceLocation ( modID , " test _ potion " ) , false , 0xff00ff ) ; 
 + GameData . getPotionRegistry ( ) . register ( - 1 , new ResourceLocation ( modID , " test _ potion " ) , INSTANCE ) ; 
 } 
 
 public static class TestPotion extends Potion { 
 
 - public TestPotion ( int potionID , ResourceLocation location , boolean badEffect , int potionColor ) { 
 - super ( potionID , location , badEffect , potionColor ) ; 
 + public TestPotion ( ResourceLocation location , boolean badEffect , int potionColor ) { 
 + super ( badEffect , potionColor ) ; 
 } 
 
 @ Override 
 diff - - git a / src / test / java / net / minecraftforge / debug / PotionRegistryDebug . java b / src / test / java / net / minecraftforge / debug / PotionRegistryDebug . java 
 index 460567b . . bcd958d 100644 
 - - - a / src / test / java / net / minecraftforge / debug / PotionRegistryDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / PotionRegistryDebug . java 
 @ @ - 6 , 13 + 6 , 18 @ @ import gnu . trove . set . hash . TIntHashSet ; 
 import java . util . Random ; 
 
 import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . GlStateManager ; 
 + import net . minecraft . client . renderer . Tessellator ; 
 + import net . minecraft . client . renderer . VertexBuffer ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 + import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 import net . minecraft . potion . Potion ; 
 import net . minecraft . potion . PotionEffect ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . fml . common . Mod ; 
 import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameData ; 
 
 @ Mod ( modid = PotionRegistryDebug . MODID ) 
 public class PotionRegistryDebug { 
 @ @ - 20 , 8 + 25 , 10 @ @ public class PotionRegistryDebug { 
 
 @ Mod . EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) { 
 - new PotionForge ( new ResourceLocation ( " forge " , " forge " ) , false , 0xff00ff ) ; / / test automatic id distribution 
 - new PotionForge ( 200 , new ResourceLocation ( " forge " , " forgy " ) , true , 0x00ff00 ) ; / / test that ids above 127 work 
 + Potion forge = new PotionForge ( new ResourceLocation ( " forge " , " forge " ) , false , 0xff00ff ) ; / / test automatic id distribution 
 + Potion forgy = new PotionForge ( new ResourceLocation ( " forge " , " forgy " ) , true , 0x00ff00 ) ; / / test that ids above 127 work 
 + GameData . getPotionRegistry ( ) . register ( - 1 , new ResourceLocation ( " forge " , " forge " ) , forge ) ; / / TODo : Generic this out in GameRegistry , ' RegistryEntry ' base type ? 
 + GameData . getPotionRegistry ( ) . register ( 200 , new ResourceLocation ( " forge " , " forgy " ) , forgy ) ; 
 
 Random rand = new Random ( ) ; 
 TIntSet taken = new TIntHashSet ( 100 ) ; 
 @ @ - 29 , 7 + 36 , 7 @ @ public class PotionRegistryDebug { 
 taken . add ( ra ) ; 
 
 / / a new potion with a random id so that forge has to remap it 
 - new PotionForge ( ra , new ResourceLocation ( " forge " , " realRandomPotion " ) , false , 0x0000ff ) ; 
 + / / new PotionForge ( ra , new ResourceLocation ( " forge " , " realRandomPotion " ) , false , 0x0000ff ) ; 
 
 for ( int i = 0 ; i < 20 ; i + + ) { 
 int r = rand . nextInt ( 200 ) + 35 ; 
 @ @ - 39 , 25 + 46 , 19 @ @ public class PotionRegistryDebug { 
 taken . add ( r ) ; 
 / / this potions will most likely not have the same IDs between server and client . 
 / / The forge handshake on connect should fix this . 
 - new PotionForge ( r , new ResourceLocation ( " forge " , " randomPotion " + r ) , false , 0xff00ff ) ; 
 + / / new PotionForge ( new ResourceLocation ( " forge " , " randomPotion " + r ) , false , 0xff00ff ) ; 
 } 
 } 
 
 protected class PotionForge extends Potion { 
 - 
 - public PotionForge ( int potionID , ResourceLocation location , boolean badEffect , int potionColor ) { 
 - super ( potionID , location , badEffect , potionColor ) ; 
 - setPotionName ( " potion . " + location . getResourcePath ( ) ) ; 
 - } 
 - 
 protected PotionForge ( ResourceLocation location , boolean badEffect , int potionColor ) { 
 - super ( location , badEffect , potionColor ) ; 
 + super ( badEffect , potionColor ) ; 
 setPotionName ( " potion . " + location . getResourcePath ( ) ) ; 
 } 
 
 @ Override 
 public void renderInventoryEffect ( int x , int y , PotionEffect effect , Minecraft mc ) { 
 - Potion potion = Potion . potionTypes [ effect . getPotionID ( ) ] ; 
 + Potion potion = effect . func _ 188419 _ a ( ) ; 
 
 mc . getTextureManager ( ) . bindTexture ( TextureMap . locationBlocksTexture ) ; 
 TextureAtlasSprite sprite = mc . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / fire _ layer _ 0 " ) ; 
 @ @ - 67 , 16 + 68 , 21 @ @ public class PotionRegistryDebug { 
 
 int width = 18 ; 
 int height = width ; 
 - / * 
 + 
 + float r = ( float ) ( potion . getLiquidColor ( ) > > 24 & 255 ) / 255 . 0F ; 
 + float g = ( float ) ( potion . getLiquidColor ( ) > > 16 & 255 ) / 255 . 0F ; 
 + float b = ( float ) ( potion . getLiquidColor ( ) > > 8 & 255 ) / 255 . 0F ; 
 + float a = ( float ) ( potion . getLiquidColor ( ) & 255 ) / 255 . 0F ; 
 + 
 Tessellator tessellator = Tessellator . getInstance ( ) ; 
 - VertexBuffer VertexBuffer = tessellator . getVertexBuffer ( ) ; 
 - VertexBuffer . startDrawingQuads ( ) ; 
 - VertexBuffer . setColorOpaque _ I ( potion . getLiquidColor ( ) ) ; 
 - VertexBuffer . addVertexWithUV ( ( double ) x , ( double ) ( y + height ) , 0 . 0D , sprite . getMinU ( ) , sprite . getMaxV ( ) ) ; 
 - VertexBuffer . addVertexWithUV ( ( double ) ( x + width ) , ( double ) ( y + height ) , 0 . 0D , sprite . getMaxU ( ) , sprite . getMaxV ( ) ) ; 
 - VertexBuffer . addVertexWithUV ( ( double ) ( x + width ) , ( double ) y , 0 . 0D , sprite . getMaxU ( ) , sprite . getMinV ( ) ) ; 
 - VertexBuffer . addVertexWithUV ( ( double ) x , ( double ) y , 0 . 0D , sprite . getMinU ( ) , sprite . getMinV ( ) ) ; 
 - tessellator . draw ( ) ; * / 
 + VertexBuffer buf = tessellator . getWorldRenderer ( ) ; 
 + buf . begin ( 7 , DefaultVertexFormats . POSITION _ TEX ) ; 
 + GlStateManager . color ( r , g , b , a ) ; 
 + buf . pos ( ( double ) x , ( double ) ( y + height ) , 0 . 0D ) . func _ 187315 _ a ( sprite . getMinU ( ) , sprite . getMaxV ( ) ) . endVertex ( ) ; 
 + buf . pos ( ( double ) ( x + width ) , ( double ) ( y + height ) , 0 . 0D ) . func _ 187315 _ a ( sprite . getMaxU ( ) , sprite . getMaxV ( ) ) . endVertex ( ) ; 
 + buf . pos ( ( double ) ( x + width ) , ( double ) y , 0 . 0D ) . func _ 187315 _ a ( sprite . getMaxU ( ) , sprite . getMinV ( ) ) . endVertex ( ) ; 
 + buf . pos ( ( double ) x , ( double ) y , 0 . 0D ) . func _ 187315 _ a ( sprite . getMinU ( ) , sprite . getMinV ( ) ) . endVertex ( ) ; 
 + tessellator . draw ( ) ; 
 } 
 } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / test / ClientCommandTest . java b / src / test / java / net / minecraftforge / test / ClientCommandTest . java 
 index 3d8157e . . 6e4a1d2 100644 
 - - - a / src / test / java / net / minecraftforge / test / ClientCommandTest . java 
 + + + b / src / test / java / net / minecraftforge / test / ClientCommandTest . java 
 @ @ - 37 , 13 + 37 , 13 @ @ public class ClientCommandTest { 
 } 
 
 @ Override 
 - public boolean canCommandSenderUseCommand ( ICommandSender sender ) 
 + public boolean func _ 184882 _ a ( MinecraftServer server , ICommandSender sender ) 
 { 
 return true ; 
 } 
 
 @ Override 
 - public List < String > addTabCompletionOptions ( ICommandSender sender , String [ ] args , BlockPos pos ) 
 + public List < String > func _ 184883 _ a ( MinecraftServer server , ICommandSender sender , String [ ] args , BlockPos pos ) 
 { 
 if ( args . length > 0 ) 
 { 
 diff - - git a / src / test / java / net / minecraftforge / test / NoBedSleepingTest . java b / src / test / java / net / minecraftforge / test / NoBedSleepingTest . java 
 index c231fcd . . 88ea98d 100644 
 - - - a / src / test / java / net / minecraftforge / test / NoBedSleepingTest . java 
 + + + b / src / test / java / net / minecraftforge / test / NoBedSleepingTest . java 
 @ @ - 1 , 16 + 1 , 26 @ @ 
 package net . minecraftforge . test ; 
 
 import net . minecraft . creativetab . CreativeTabs ; 
 - import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . entity . player . EntityPlayer . EnumStatus ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . nbt . NBTBase ; 
 + import net . minecraft . nbt . NBTBase . NBTPrimitive ; 
 + import net . minecraft . nbt . NBTTagByte ; 
 + import net . minecraft . util . ActionResult ; 
 + import net . minecraft . util . EnumActionResult ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumHand ; 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . world . World ; 
 - import net . minecraftforge . common . IExtendedEntityProperties ; 
 import net . minecraftforge . common . MinecraftForge ; 
 - import net . minecraftforge . event . entity . EntityEvent . EntityConstructing ; 
 + import net . minecraftforge . common . capabilities . Capability ; 
 + import net . minecraftforge . common . capabilities . CapabilityInject ; 
 + import net . minecraftforge . common . capabilities . CapabilityManager ; 
 + import net . minecraftforge . common . capabilities . ICapabilitySerializable ; 
 + import net . minecraftforge . common . capabilities . Capability . IStorage ; 
 + import net . minecraftforge . event . AttachCapabilitiesEvent ; 
 import net . minecraftforge . event . entity . player . PlayerWakeUpEvent ; 
 import net . minecraftforge . event . entity . player . SleepingLocationCheckEvent ; 
 import net . minecraftforge . fml . common . Mod ; 
 @ @ - 24 , 64 + 34 , 90 @ @ public class NoBedSleepingTest 
 { 
 public static final String MODID = " ForgeDebugNoBedSleeping " ; 
 public static final String VERSION = " 1 . 0 " ; 
 + @ CapabilityInject ( IExtraSleeping . class ) 
 + private static final Capability < IExtraSleeping > SLEEP _ CAP = null ; 
 
 @ Mod . EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) 
 { 
 GameRegistry . registerItem ( ItemSleepingPill . instance , ItemSleepingPill . name ) ; 
 + CapabilityManager . INSTANCE . register ( IExtraSleeping . class , new Storage ( ) , DefaultImpl . class ) ; 
 MinecraftForge . EVENT _ BUS . register ( new EventHandler ( ) ) ; 
 } 
 
 public static class EventHandler 
 { 
 @ SubscribeEvent 
 - public void onEntityConstruct ( EntityConstructing evt ) 
 + public void onEntityConstruct ( AttachCapabilitiesEvent evt ) 
 { 
 - evt . entity . registerExtendedProperties ( ExtendedPropertySleeping . name , new ExtendedPropertySleeping ( ) ) ; 
 + evt . addCapability ( new ResourceLocation ( MODID , " IExtraSleeping " ) , new ICapabilitySerializable < NBTPrimitive > ( ) 
 + { 
 + IExtraSleeping inst = SLEEP _ CAP . getDefaultInstance ( ) ; 
 + @ Override 
 + public boolean hasCapability ( Capability < ? > capability , EnumFacing facing ) { 
 + return capability = = SLEEP _ CAP ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + @ Override 
 + public < T > T getCapability ( Capability < T > capability , EnumFacing facing ) { 
 + return capability = = SLEEP _ CAP ? ( T ) inst : null ; 
 + } 
 + 
 + @ Override 
 + public NBTPrimitive serializeNBT ( ) { 
 + return ( NBTPrimitive ) SLEEP _ CAP . getStorage ( ) . writeNBT ( SLEEP _ CAP , inst , null ) ; 
 + } 
 + 
 + @ Override 
 + public void deserializeNBT ( NBTPrimitive nbt ) { 
 + SLEEP _ CAP . getStorage ( ) . readNBT ( SLEEP _ CAP , inst , null , nbt ) ; 
 + } 
 + } ) ; 
 } 
 
 @ SubscribeEvent 
 public void onBedCheck ( SleepingLocationCheckEvent evt ) 
 { 
 - final IExtendedEntityProperties property = evt . entityPlayer . getExtendedProperties ( ExtendedPropertySleeping . name ) ; 
 - if ( property instanceof ExtendedPropertySleeping & & ( ( ExtendedPropertySleeping ) property ) . isSleeping ) 
 + final IExtraSleeping sleep = evt . entityPlayer . getCapability ( SLEEP _ CAP , null ) ; 
 + if ( sleep ! = null & & sleep . isSleeping ( ) ) 
 evt . setResult ( Result . ALLOW ) ; 
 } 
 
 @ SubscribeEvent 
 public void onWakeUp ( PlayerWakeUpEvent evt ) 
 { 
 - final IExtendedEntityProperties property = evt . entityPlayer . getExtendedProperties ( ExtendedPropertySleeping . name ) ; 
 - if ( property instanceof ExtendedPropertySleeping ) 
 - ( ( ExtendedPropertySleeping ) property ) . isSleeping = false ; 
 + final IExtraSleeping sleep = evt . entityPlayer . getCapability ( SLEEP _ CAP , null ) ; 
 + if ( sleep ! = null ) 
 + sleep . setSleeping ( false ) ; 
 } 
 } 
 
 - public static class ExtendedPropertySleeping implements IExtendedEntityProperties 
 - { 
 - private static final String TAG _ NAME = " IsSleepingExt " ; 
 - 
 - public static final String name = " is _ sleeping " ; 
 - 
 - public boolean isSleeping ; 
 - 
 - @ Override 
 - public void saveNBTData ( NBTTagCompound compound ) 
 - { 
 - compound . setBoolean ( TAG _ NAME , isSleeping ) ; 
 - } 
 + public interface IExtraSleeping { 
 + boolean isSleeping ( ) ; 
 + void setSleeping ( boolean value ) ; 
 + } 
 
 + public static class Storage implements IStorage < IExtraSleeping > 
 + { 
 @ Override 
 - public void loadNBTData ( NBTTagCompound compound ) 
 + public NBTBase writeNBT ( Capability < IExtraSleeping > capability , IExtraSleeping instance , EnumFacing side ) 
 { 
 - this . isSleeping = compound . getBoolean ( TAG _ NAME ) ; 
 + return new NBTTagByte ( ( byte ) ( instance . isSleeping ( ) ? 1 : 0 ) ) ; 
 } 
 
 @ Override 
 - public void init ( Entity entity , World world ) 
 + public void readNBT ( Capability < IExtraSleeping > capability , IExtraSleeping instance , EnumFacing side , NBTBase nbt ) 
 { 
 + instance . setSleeping ( ( ( NBTPrimitive ) nbt ) . getByte ( ) = = 1 ) ; 
 } 
 + } 
 
 + public static class DefaultImpl implements IExtraSleeping 
 + { 
 + private boolean isSleeping = false ; 
 + @ Override public boolean isSleeping ( ) { return isSleeping ; } 
 + @ Override public void setSleeping ( boolean value ) { this . isSleeping = value ; } 
 } 
 
 public static class ItemSleepingPill extends Item 
 @ @ - 95 , 19 + 131 , 21 @ @ public class NoBedSleepingTest 
 setUnlocalizedName ( MODID + " : " + name ) ; 
 } 
 
 - public ItemStack onItemRightClick ( ItemStack itemStackIn , World worldIn , EntityPlayer playerIn ) 
 + @ Override 
 + public ActionResult < ItemStack > onItemRightClick ( ItemStack stack , World world , EntityPlayer player , EnumHand hand ) 
 { 
 - if ( ! worldIn . isRemote ) 
 + if ( ! world . isRemote ) 
 { 
 - final EnumStatus result = playerIn . trySleep ( playerIn . getPosition ( ) ) ; 
 + final EnumStatus result = player . trySleep ( player . getPosition ( ) ) ; 
 if ( result = = EnumStatus . OK ) 
 { 
 - final IExtendedEntityProperties property = playerIn . getExtendedProperties ( ExtendedPropertySleeping . name ) ; 
 - if ( property instanceof ExtendedPropertySleeping ) 
 - ( ( ExtendedPropertySleeping ) property ) . isSleeping = true ; 
 + final IExtraSleeping sleep = player . getCapability ( SLEEP _ CAP , null ) ; 
 + if ( sleep ! = null ) 
 + sleep . setSleeping ( true ) ; 
 + return ActionResult . newResult ( EnumActionResult . SUCCESS , stack ) ; 
 } 
 } 
 - return itemStackIn ; 
 + return ActionResult . newResult ( EnumActionResult . PASS , stack ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 new file mode 100644 
 index 0000000 . . 5cd478c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + @ @ - 30 , 6 + 30 , 7 @ @ 
 + import net . minecraft . world . demo . DemoWorldServer ; 
 + import net . minecraft . world . storage . ISaveFormat ; 
 + import net . minecraft . world . storage . WorldInfo ; 
 + + import net . minecraftforge . client . ForgeHooksClient ; 
 + import org . apache . commons . io . Charsets ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + @ @ - 630 , 6 + 631 , 7 @ @ 
 + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; 
 + } 
 + } 
 + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; 
 + String s1 = " Copyright Mojang AB . Do not distribute ! " ; 
 + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; 
 + 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 10266a2 . . 4ec67c7 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 1 , 6 + 1 , 12 @ @ 
 package net . minecraftforge . client ; 
 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 + import java . net . URLConnection ; 
 import java . util . HashMap ; 
 + import java . util . Map ; 
 import java . util . Random ; 
 import java . util . TreeSet ; 
 
 @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; 
 
 import net . minecraftforge . client . event . MouseEvent ; 
 import net . minecraft . client . entity . EntityPlayerSP ; 
 + import net . minecraft . client . gui . FontRenderer ; 
 + import net . minecraft . client . gui . GuiMainMenu ; 
 import net . minecraftforge . client . event . FOVUpdateEvent ; 
 
 import org . lwjgl . LWJGLException ; 
 @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; 
 import org . lwjgl . opengl . GL12 ; 
 import org . lwjgl . opengl . PixelFormat ; 
 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + import com . google . gson . JsonParseException ; 
 + 
 import cpw . mods . fml . client . FMLClientHandler ; 
 import cpw . mods . fml . client . registry . RenderingRegistry ; 
 + import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockLiquid ; 
 @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . ChatComponentTranslation ; 
 + import net . minecraft . util . EnumChatFormatting ; 
 import net . minecraft . util . MathHelper ; 
 import net . minecraft . util . MovingObjectPosition ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fluids . RenderBlockFluid ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 public class ForgeHooksClient 
 { 
 @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient 
 / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; 
 / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; 
 } 
 + 
 + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) 
 + { 
 + Status status = ForgeVersion . getStatus ( ) ; 
 + if ( status = = BETA | | status = = BETA _ OUTDATED ) 
 + { 
 + / / render a warning at the top of the screen , 
 + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + line = " Major issues may arise , verify before reporting . " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + 
 + String line = null ; 
 + switch ( status ) 
 + { 
 + / / case FAILED : line = " Version check failed " ; break ; 
 + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; 
 + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; 
 + case OUTDATED : 
 + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; 
 + default : break ; 
 + } 
 + 
 + if ( line ! = null ) 
 + { 
 + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line 
 + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 index d18f81a . . 86de438 100644 
 - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame 
 private ScaledResolution res = null ; 
 private FontRenderer fontrenderer = null ; 
 private RenderGameOverlayEvent eventParent ; 
 - private static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; 
 
 public GuiIngameForge ( Minecraft mc ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 145a3c5 . . 9ca5fab 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; 
 
 public class ForgeHooks 
 { 
 - static class GrassEntry extends WeightedRandom . Item 
 - { 
 - public final Block block ; 
 - public final int metadata ; 
 - public GrassEntry ( Block block , int meta , int weight ) 
 - { 
 - super ( weight ) ; 
 - this . block = block ; 
 - this . metadata = meta ; 
 - } 
 - } 
 - 
 static class SeedEntry extends WeightedRandom . Item 
 { 
 public final ItemStack seed ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 4072090 . . d54730a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static double zombieSummonBaseChance = 0 . 1 ; 
 public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; 
 public static float zombieBabyChance = 0 . 05f ; 
 - public static boolean shouldSortRecipies = false ; 
 + public static boolean shouldSortRecipies = true ; 
 + public static boolean disableVersionCheck = false ; 
 
 public ForgeModContainer ( ) 
 { 
 @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; 
 shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; 
 
 + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; 
 + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; 
 + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; 
 + 
 if ( config . hasChanged ( ) ) 
 { 
 config . save ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 3dfe78e . . 0d4d751 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 4 , 6 + 4 , 17 @ @ 
 * / 
 
 package net . minecraftforge . common ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 + 
 + import java . io . InputStream ; 
 + import java . net . URL ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 
 public class ForgeVersion 
 { 
 @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion 
 / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 public static final int buildVersion = 0 ; 
 
 + private static Status status = PENDING ; 
 + private static String target = null ; 
 + 
 public static int getMajorVersion ( ) 
 { 
 return majorVersion ; 
 @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion 
 return buildVersion ; 
 } 
 
 + public static Status getStatus ( ) 
 + { 
 + return status ; 
 + } 
 + 
 + public static String getTarget ( ) 
 + { 
 + return target ; 
 + } 
 + 
 public static String getVersion ( ) 
 { 
 return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 } 
 + 
 + public static enum Status 
 + { 
 + PENDING , 
 + FAILED , 
 + UP _ TO _ DATE , 
 + OUTDATED , 
 + AHEAD , 
 + BETA , 
 + BETA _ OUTDATED 
 + } 
 + 
 + public static void startVersionCheck ( ) 
 + { 
 + new Thread ( " Forge Version Check " ) 
 + { 
 + @ Override 
 + public void run ( ) 
 + { 
 + try 
 + { 
 + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + InputStream con = url . openStream ( ) ; 
 + String data = new String ( ByteStreams . toByteArray ( con ) ) ; 
 + con . close ( ) ; 
 + 
 + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; 
 + String homepage = ( String ) json . get ( " homepage " ) ; 
 + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; 
 + 
 + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; 
 + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; 
 + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; 
 + 
 + if ( rec ! = null ) 
 + { 
 + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; 
 + int diff = recommended . compareTo ( current ) ; 
 + 
 + if ( diff = = 0 ) 
 + status = UP _ TO _ DATE ; 
 + else if ( diff < 0 ) 
 + { 
 + status = AHEAD ; 
 + if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = OUTDATED ; 
 + target = lat ; 
 + } 
 + } 
 + } 
 + else 
 + { 
 + status = OUTDATED ; 
 + target = rec ; 
 + } 
 + } 
 + else if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = BETA _ OUTDATED ; 
 + target = lat ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + status = FAILED ; 
 + } 
 + } 
 + } . start ( ) ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 index bb4a94e . . 3a98b16 100644 
 - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; 
 import net . minecraft . entity . monster . EntityEnderman ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraftforge . common . ForgeHooks . GrassEntry ; 
 import net . minecraftforge . common . ForgeHooks . SeedEntry ; 
 import net . minecraftforge . event . entity . EntityEvent ; 
 import net . minecraftforge . oredict . OreDictionary ; 
 @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge 
 public static final EventBus EVENT _ BUS = new EventBus ( ) ; 
 public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; 
 public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; 
 + public static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 
 private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; 
 
 @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge 
 EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; 
 OreDictionary . getOreName ( 0 ) ; 
 
 + if ( ! ForgeModContainer . disableVersionCheck ) 
 + { 
 + ForgeVersion . startVersionCheck ( ) ; 
 + } 
 + 
 / / Force these classes to be defined , Should prevent derp error hiding . 
 new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; 
 }
