BLEU SCORE: 0.017060130096854434

TEST MSG: Correctly track exceptions thrown in the loading screen rendering thread
GENERATED MSG: Add a utility method for finding the channel handler name based on type . Should fix naming weirdnesses .

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> index 5966c80 . . 3422b9a 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package cpw . mods . fml . client ; <nl> <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> + import java . lang . Thread . UncaughtExceptionHandler ; <nl> import java . util . Iterator ; <nl> import java . util . Properties ; <nl> import java . util . concurrent . locks . Lock ; <nl> @ @ - 20 , 6 + 21 , 7 @ @ import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . util . ResourceLocation ; <nl> <nl> import org . apache . commons . io . IOUtils ; <nl> + import org . apache . logging . log4j . Level ; <nl> import org . lwjgl . LWJGLException ; <nl> import org . lwjgl . opengl . Display ; <nl> import org . lwjgl . opengl . Drawable ; <nl> @ @ - 27 , 6 + 29 , 7 @ @ import org . lwjgl . opengl . GL11 ; <nl> import org . lwjgl . opengl . SharedDrawable ; <nl> <nl> import cpw . mods . fml . common . FMLCommonHandler ; <nl> + import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . ICrashCallable ; <nl> import cpw . mods . fml . common . ProgressManager ; <nl> import cpw . mods . fml . common . ProgressManager . ProgressBar ; <nl> @ @ - 105 , 6 + 108 , 7 @ @ public class SplashProgress <nl> e . printStackTrace ( ) ; <nl> throw new RuntimeException ( e ) ; <nl> } <nl> + Thread mainThread = Thread . currentThread ( ) ; <nl> thread = new Thread ( new Runnable ( ) <nl> { <nl> private final int barWidth = 400 ; <nl> @ @ - 313 , 6 + 317 , 14 @ @ public class SplashProgress <nl> } <nl> } <nl> } ) ; <nl> + thread . setUncaughtExceptionHandler ( new UncaughtExceptionHandler ( ) <nl> + { <nl> + public void uncaughtException ( Thread t , Throwable e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Splash thread Exception " ) ; <nl> + Minecraft . getMinecraft ( ) . crashed ( CrashReport . makeCrashReport ( e , " Splash thread " ) ) ; <nl> + } <nl> + } ) ; <nl> thread . start ( ) ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java <nl> index 6a78904 . . 0f96063 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package cpw . mods . fml . common . network ; <nl> <nl> + import java . util . Map . Entry ; <nl> import net . minecraft . network . Packet ; <nl> import io . netty . channel . ChannelHandler ; <nl> import io . netty . channel . embedded . EmbeddedChannel ; <nl> @ @ - 7 , 6 + 8 , 7 @ @ import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> import cpw . mods . fml . common . network . FMLOutboundHandler . OutboundTarget ; <nl> import cpw . mods . fml . common . network . internal . FMLProxyPacket ; <nl> + import cpw . mods . fml . common . network . internal . FMLRuntimeCodec ; <nl> import cpw . mods . fml . relauncher . Side ; <nl> <nl> / * * <nl> @ @ - 49 , 4 + 51 , 18 @ @ public class FMLEmbeddedChannel extends EmbeddedChannel { <nl> attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( outboundTarget ) ; <nl> return pkt ; <nl> } <nl> + <nl> + public String findChannelHandlerNameForType ( Class < ? extends ChannelHandler > type ) <nl> + { <nl> + String targetName = null ; <nl> + for ( Entry < String , ChannelHandler > entry : pipeline ( ) ) <nl> + { <nl> + if ( FMLRuntimeCodec . class . isInstance ( entry . getValue ( ) ) ) <nl> + { <nl> + targetName = entry . getKey ( ) ; <nl> + break ; <nl> + } <nl> + } <nl> + return targetName ; <nl> + } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java <nl> index eabf4e1 . . 3f29167 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java <nl> @ @ - 12 , 14 + 12 , 13 @ @ <nl> <nl> package cpw . mods . fml . common . network . internal ; <nl> <nl> + import io . netty . channel . ChannelPipeline ; <nl> import io . netty . channel . embedded . EmbeddedChannel ; <nl> - <nl> import java . util . ArrayList ; <nl> import java . util . EnumMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> - <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . entity . player . EntityPlayerMP ; <nl> @ @ - 28 , 11 + 27 , 8 @ @ import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . Packet ; <nl> import net . minecraft . server . management . ServerConfigurationManager ; <nl> import net . minecraft . world . World ; <nl> - <nl> import org . apache . logging . log4j . core . helpers . Integers ; <nl> - <nl> import com . google . common . collect . Lists ; <nl> - <nl> import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLContainer ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> @ @ - 149 , 8 + 145 , 10 @ @ public class FMLNetworkHandler <nl> @ SideOnly ( Side . CLIENT ) <nl> private static void addClientHandlers ( ) <nl> { <nl> - channelPair . get ( Side . CLIENT ) . pipeline ( ) . addAfter ( " FMLRuntimeCodec # 0 " , " GuiHandler " , new OpenGuiHandler ( ) ) ; <nl> - channelPair . get ( Side . CLIENT ) . pipeline ( ) . addAfter ( " FMLRuntimeCodec # 0 " , " EntitySpawnHandler " , new EntitySpawnHandler ( ) ) ; <nl> + ChannelPipeline pipeline = channelPair . get ( Side . CLIENT ) . pipeline ( ) ; <nl> + String targetName = channelPair . get ( Side . CLIENT ) . findChannelHandlerNameForType ( FMLRuntimeCodec . class ) ; <nl> + pipeline . addAfter ( targetName , " GuiHandler " , new OpenGuiHandler ( ) ) ; <nl> + pipeline . addAfter ( targetName , " EntitySpawnHandler " , new EntitySpawnHandler ( ) ) ; <nl> } <nl> public static void registerChannel ( FMLContainer container , Side side ) <nl> {

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 index 5966c80 . . 3422b9a 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / SplashProgress . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package cpw . mods . fml . client ; 
 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 + import java . lang . Thread . UncaughtExceptionHandler ; 
 import java . util . Iterator ; 
 import java . util . Properties ; 
 import java . util . concurrent . locks . Lock ; 
 @ @ - 20 , 6 + 21 , 7 @ @ import net . minecraft . crash . CrashReport ; 
 import net . minecraft . util . ResourceLocation ; 
 
 import org . apache . commons . io . IOUtils ; 
 + import org . apache . logging . log4j . Level ; 
 import org . lwjgl . LWJGLException ; 
 import org . lwjgl . opengl . Display ; 
 import org . lwjgl . opengl . Drawable ; 
 @ @ - 27 , 6 + 29 , 7 @ @ import org . lwjgl . opengl . GL11 ; 
 import org . lwjgl . opengl . SharedDrawable ; 
 
 import cpw . mods . fml . common . FMLCommonHandler ; 
 + import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . ICrashCallable ; 
 import cpw . mods . fml . common . ProgressManager ; 
 import cpw . mods . fml . common . ProgressManager . ProgressBar ; 
 @ @ - 105 , 6 + 108 , 7 @ @ public class SplashProgress 
 e . printStackTrace ( ) ; 
 throw new RuntimeException ( e ) ; 
 } 
 + Thread mainThread = Thread . currentThread ( ) ; 
 thread = new Thread ( new Runnable ( ) 
 { 
 private final int barWidth = 400 ; 
 @ @ - 313 , 6 + 317 , 14 @ @ public class SplashProgress 
 } 
 } 
 } ) ; 
 + thread . setUncaughtExceptionHandler ( new UncaughtExceptionHandler ( ) 
 + { 
 + public void uncaughtException ( Thread t , Throwable e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Splash thread Exception " ) ; 
 + Minecraft . getMinecraft ( ) . crashed ( CrashReport . makeCrashReport ( e , " Splash thread " ) ) ; 
 + } 
 + } ) ; 
 thread . start ( ) ; 
 } 


NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java b / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java 
 index 6a78904 . . 0f96063 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / FMLEmbeddedChannel . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package cpw . mods . fml . common . network ; 
 
 + import java . util . Map . Entry ; 
 import net . minecraft . network . Packet ; 
 import io . netty . channel . ChannelHandler ; 
 import io . netty . channel . embedded . EmbeddedChannel ; 
 @ @ - 7 , 6 + 8 , 7 @ @ import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 import cpw . mods . fml . common . network . FMLOutboundHandler . OutboundTarget ; 
 import cpw . mods . fml . common . network . internal . FMLProxyPacket ; 
 + import cpw . mods . fml . common . network . internal . FMLRuntimeCodec ; 
 import cpw . mods . fml . relauncher . Side ; 
 
 / * * 
 @ @ - 49 , 4 + 51 , 18 @ @ public class FMLEmbeddedChannel extends EmbeddedChannel { 
 attr ( FMLOutboundHandler . FML _ MESSAGETARGET ) . set ( outboundTarget ) ; 
 return pkt ; 
 } 
 + 
 + public String findChannelHandlerNameForType ( Class < ? extends ChannelHandler > type ) 
 + { 
 + String targetName = null ; 
 + for ( Entry < String , ChannelHandler > entry : pipeline ( ) ) 
 + { 
 + if ( FMLRuntimeCodec . class . isInstance ( entry . getValue ( ) ) ) 
 + { 
 + targetName = entry . getKey ( ) ; 
 + break ; 
 + } 
 + } 
 + return targetName ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java 
 index eabf4e1 . . 3f29167 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / internal / FMLNetworkHandler . java 
 @ @ - 12 , 14 + 12 , 13 @ @ 
 
 package cpw . mods . fml . common . network . internal ; 
 
 + import io . netty . channel . ChannelPipeline ; 
 import io . netty . channel . embedded . EmbeddedChannel ; 
 - 
 import java . util . ArrayList ; 
 import java . util . EnumMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 - 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . entity . player . EntityPlayerMP ; 
 @ @ - 28 , 11 + 27 , 8 @ @ import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . Packet ; 
 import net . minecraft . server . management . ServerConfigurationManager ; 
 import net . minecraft . world . World ; 
 - 
 import org . apache . logging . log4j . core . helpers . Integers ; 
 - 
 import com . google . common . collect . Lists ; 
 - 
 import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLContainer ; 
 import cpw . mods . fml . common . FMLLog ; 
 @ @ - 149 , 8 + 145 , 10 @ @ public class FMLNetworkHandler 
 @ SideOnly ( Side . CLIENT ) 
 private static void addClientHandlers ( ) 
 { 
 - channelPair . get ( Side . CLIENT ) . pipeline ( ) . addAfter ( " FMLRuntimeCodec # 0 " , " GuiHandler " , new OpenGuiHandler ( ) ) ; 
 - channelPair . get ( Side . CLIENT ) . pipeline ( ) . addAfter ( " FMLRuntimeCodec # 0 " , " EntitySpawnHandler " , new EntitySpawnHandler ( ) ) ; 
 + ChannelPipeline pipeline = channelPair . get ( Side . CLIENT ) . pipeline ( ) ; 
 + String targetName = channelPair . get ( Side . CLIENT ) . findChannelHandlerNameForType ( FMLRuntimeCodec . class ) ; 
 + pipeline . addAfter ( targetName , " GuiHandler " , new OpenGuiHandler ( ) ) ; 
 + pipeline . addAfter ( targetName , " EntitySpawnHandler " , new EntitySpawnHandler ( ) ) ; 
 } 
 public static void registerChannel ( FMLContainer container , Side side ) 
 {
