BLEU SCORE: 0.03466791587270993

TEST MSG: Some more FML related fixups
GENERATED MSG: Some fixups for FML , and use the FML registry for potions

TEST DIFF (one line): diff - - git a / patches . mcp / minecraft / net / minecraft / util / IntIdentityHashBiMap . java . patch b / patches . mcp / minecraft / net / minecraft / util / IntIdentityHashBiMap . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 2b9932b <nl> - - - / dev / null <nl> + + + b / patches . mcp / minecraft / net / minecraft / util / IntIdentityHashBiMap . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / util / IntIdentityHashBiMap . java <nl> + + + + . . / src - work / minecraft / net / minecraft / util / IntIdentityHashBiMap . java <nl> + @ @ - 166 , 7 + 166 , 6 @ @ <nl> + return Iterators . filter ( Iterators . forArray ( this . field _ 186820 _ d ) , Predicates . notNull ( ) ) ; <nl> + } <nl> + <nl> + - @ SideOnly ( Side . CLIENT ) <nl> + public void func _ 186812 _ a ( ) <nl> + { <nl> + Arrays . fill ( this . field _ 186818 _ b , ( Object ) null ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / FMLOutboundHandler . java b / src / main / java / net / minecraftforge / fml / common / network / FMLOutboundHandler . java <nl> index 11d4715 . . 5db838d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / FMLOutboundHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / FMLOutboundHandler . java <nl> @ @ - 128 , 7 + 128 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) <nl> { <nl> ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; <nl> - for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . getConfigurationManager ( ) . playerEntityList ) <nl> + for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . func _ 184103 _ al ( ) . getPlayerList ( ) ) <nl> { <nl> NetworkDispatcher dispatcher = player . playerNetServerHandler . netManager . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; <nl> if ( dispatcher ! = null ) builder . add ( dispatcher ) ; <nl> @ @ - 156 , 7 + 156 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> { <nl> int dimension = ( Integer ) args ; <nl> ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; <nl> - for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . getConfigurationManager ( ) . playerEntityList ) <nl> + for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . func _ 184103 _ al ( ) . getPlayerList ( ) ) <nl> { <nl> if ( dimension = = player . dimension ) <nl> { <nl> @ @ - 190 , 7 + 190 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { <nl> { <nl> TargetPoint tp = ( TargetPoint ) args ; <nl> ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; <nl> - for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . getConfigurationManager ( ) . playerEntityList ) <nl> + for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . func _ 184103 _ al ( ) . getPlayerList ( ) ) <nl> { <nl> if ( player . dimension = = tp . dimension ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index 22b6673 . . b18c2cf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 17 , 6 + 17 , 7 @ @ import com . google . common . collect . HashBiMap ; <nl> import com . google . common . collect . Iterators ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> + import net . minecraft . util . IntIdentityHashBiMap ; <nl> import org . apache . commons . lang3 . Validate ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> @ @ - 170 , 7 + 171 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> this . dummiedLocations . clear ( ) ; <nl> this . dummiedLocations . addAll ( otherRegistry . dummiedLocations ) ; <nl> <nl> - underlyingIntegerMap = new ObjectIntIdentityMap < I > ( ) ; <nl> + underlyingIntegerMap . func _ 186812 _ a ( ) ; <nl> registryObjects . clear ( ) ; <nl> <nl> for ( I thing : otherRegistry . typeSafeIterable ( ) ) <nl> @ @ - 556 , 7 + 557 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> throw new IllegalArgumentException ( " The object to be added to the registry is not of the right type . Reflection / ASM hackery ? Registry bug ? " ) ; <nl> } <nl> <nl> - underlyingIntegerMap . put ( thing , id ) ; / / obj < - > id <nl> + underlyingIntegerMap . func _ 186814 _ a ( thing , id ) ; / / obj < - > id <nl> super . putObject ( name , thing ) ; / / name < - > obj <nl> availabilityMap . set ( id ) ; <nl> if ( addCallback ! = null ) <nl> @ @ - 758 , 7 + 759 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> <nl> for ( I i : this . underlyingIntegerMap ) <nl> { <nl> - addCallback . onAdd ( i , this . underlyingIntegerMap . get ( i ) ) ; <nl> + addCallback . onAdd ( i , this . underlyingIntegerMap . func _ 186808 _ c ( i ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 8e8c4f7 . . 379e298 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 152 , 8 + 152 , 6 @ @ public class PersistentRegistryManager <nl> <nl> / / Empty the blockstate map before loading <nl> GameData . getBlockStateIDMap ( ) . clear ( ) ; <nl> - / / Clean up potion array before reloading it from the snapshot <nl> - Arrays . fill ( Potion . potionTypes , null ) ; <nl> <nl> / / Load the snapshot into the " STAGING " registry <nl> for ( Map . Entry < ResourceLocation , GameDataSnapshot . Entry > snapshotEntry : snapshot . entries . entrySet ( ) )
NEAREST DIFF (one line): diff - - git a / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch b / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch <nl> index 98abf73 . . e908c64 100644 <nl> - - - a / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch <nl> + + + b / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch <nl> @ @ - 1 , 6 + 1 , 21 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / potion / Potion . java <nl> + + + . . / src - work / minecraft / net / minecraft / potion / Potion . java <nl> - @ @ - 195 , 7 + 195 , 6 @ @ <nl> + @ @ - 18 , 12 + 18 , 13 @ @ <nl> + import net . minecraft . util . StringUtils ; <nl> + import net . minecraft . util . math . MathHelper ; <nl> + import net . minecraft . util . registry . RegistryNamespaced ; <nl> + + import net . minecraftforge . fml . common . registry . GameData ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + <nl> + public class Potion <nl> + { <nl> + - public static final RegistryNamespaced < ResourceLocation , Potion > field _ 188414 _ b = new RegistryNamespaced ( ) ; <nl> + + public static final RegistryNamespaced < ResourceLocation , Potion > field _ 188414 _ b = GameData . getPotionRegistry ( ) ; <nl> + private final Map < IAttribute , AttributeModifier > attributeModifierMap = Maps . < IAttribute , AttributeModifier > newHashMap ( ) ; <nl> + private final boolean isBadEffect ; <nl> + private final int liquidColor ; <nl> + @ @ - 195 , 7 + 196 , 6 @ @ <nl> return this . statusIconIndex ; <nl> } <nl> <nl> @ @ - 8 , 7 + 23 , 7 @ @ <nl> public boolean isBadEffect ( ) <nl> { <nl> return this . isBadEffect ; <nl> - @ @ - 266 , 7 + 265 , 37 @ @ <nl> + @ @ - 266 , 7 + 266 , 37 @ @ <nl> return modifier . getAmount ( ) * ( double ) ( p _ 111183 _ 1 _ + 1 ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> index 00c1f70 . . be45fec 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> @ @ - 126 , 7 + 126 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E <nl> <nl> if ( spawnMsg . dataWatcherList ! = null ) <nl> { <nl> - entity . getDataWatcher ( ) . updateWatchedObjectsFromList ( spawnMsg . dataWatcherList ) ; <nl> + entity . func _ 184212 _ Q ( ) . func _ 187218 _ a ( spawnMsg . dataWatcherList ) ; <nl> } <nl> <nl> if ( spawnMsg . throwerId > 0 ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java <nl> index a19c461 . . 2a70bbe 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java <nl> @ @ - 6 , 11 + 6 , 11 @ @ import io . netty . buffer . Unpooled ; <nl> import java . io . IOException ; <nl> import java . util . List ; <nl> <nl> + import net . minecraft . network . datasync . EntityDataManager ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Throwables ; <nl> <nl> - import net . minecraft . entity . DataWatcher ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityLivingBase ; <nl> import net . minecraft . network . PacketBuffer ; <nl> @ @ - 157 , 7 + 157 , 7 @ @ public abstract class FMLMessage { <nl> double speedScaledX ; <nl> double speedScaledY ; <nl> double speedScaledZ ; <nl> - List < DataWatcher . WatchableObject > dataWatcherList ; <nl> + List < EntityDataManager . DataEntry < ? > > dataWatcherList ; <nl> ByteBuf dataStream ; <nl> <nl> public EntitySpawnMessage ( ) { } <nl> @ @ - 193 , 7 + 193 , 7 @ @ public abstract class FMLMessage { <nl> PacketBuffer pb = new PacketBuffer ( tmpBuf ) ; <nl> try <nl> { <nl> - entity . getDataWatcher ( ) . writeTo ( pb ) ; <nl> + entity . func _ 184212 _ Q ( ) . func _ 187216 _ a ( pb ) ; <nl> } catch ( IOException e ) <nl> { <nl> FMLLog . log ( Level . FATAL , e , " Encountered fatal exception trying to send entity spawn data watchers " ) ; <nl> @ @ - 247 , 7 + 247 , 7 @ @ public abstract class FMLMessage { <nl> scaledHeadYaw = dat . readByte ( ) * 360F / 256F ; <nl> try <nl> { <nl> - dataWatcherList = DataWatcher . readWatchedListFromPacketBuffer ( new PacketBuffer ( dat ) ) ; <nl> + dataWatcherList = EntityDataManager . func _ 187215 _ b ( new PacketBuffer ( dat ) ) ; <nl> } catch ( IOException e ) <nl> { <nl> FMLLog . log ( Level . FATAL , e , " There was a critical error decoding the datawatcher stream for a mod entity . " ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java <nl> index 2bbafe3 . . 6dd4839 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java <nl> @ @ - 27 , 7 + 27 , 7 @ @ import net . minecraft . entity . player . EntityPlayerMP ; <nl> import net . minecraft . inventory . Container ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . Packet ; <nl> - import net . minecraft . server . management . ServerConfigurationManager ; <nl> + import net . minecraft . server . management . PlayerList ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . common . util . FakePlayer ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> @ @ - 59 , 7 + 59 , 7 @ @ public class FMLNetworkHandler <nl> public static final int LOGIN _ TIMEOUT = Integers . parseInt ( System . getProperty ( " fml . loginTimeout " , " 600 " ) , 600 ) ; <nl> private static EnumMap < Side , FMLEmbeddedChannel > channelPair ; <nl> <nl> - public static void fmlServerHandshake ( ServerConfigurationManager scm , NetworkManager manager , EntityPlayerMP player ) <nl> + public static void fmlServerHandshake ( PlayerList scm , NetworkManager manager , EntityPlayerMP player ) <nl> { <nl> NetworkDispatcher dispatcher = NetworkDispatcher . allocAndSet ( manager , scm ) ; <nl> dispatcher . serverToClientHandshake ( player ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 80e9456 . . 525f9cd 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 254 , 9 + 254 , 7 @ @ public class GameData <nl> <nl> @ Override <nl> public void onAdd ( Potion potion , int id ) { <nl> - / / fix the data in the potion and the potions - array <nl> - potion . id = id ; <nl> - Potion . potionTypes [ id ] = potion ; <nl> + / / no op for the minute ? <nl> } <nl> } <nl> } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / patches . mcp / minecraft / net / minecraft / util / IntIdentityHashBiMap . java . patch b / patches . mcp / minecraft / net / minecraft / util / IntIdentityHashBiMap . java . patch 
 new file mode 100644 
 index 0000000 . . 2b9932b 
 - - - / dev / null 
 + + + b / patches . mcp / minecraft / net / minecraft / util / IntIdentityHashBiMap . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / util / IntIdentityHashBiMap . java 
 + + + + . . / src - work / minecraft / net / minecraft / util / IntIdentityHashBiMap . java 
 + @ @ - 166 , 7 + 166 , 6 @ @ 
 + return Iterators . filter ( Iterators . forArray ( this . field _ 186820 _ d ) , Predicates . notNull ( ) ) ; 
 + } 
 + 
 + - @ SideOnly ( Side . CLIENT ) 
 + public void func _ 186812 _ a ( ) 
 + { 
 + Arrays . fill ( this . field _ 186818 _ b , ( Object ) null ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / FMLOutboundHandler . java b / src / main / java / net / minecraftforge / fml / common / network / FMLOutboundHandler . java 
 index 11d4715 . . 5db838d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / FMLOutboundHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / FMLOutboundHandler . java 
 @ @ - 128 , 7 + 128 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 public List < NetworkDispatcher > selectNetworks ( Object args , ChannelHandlerContext context , FMLProxyPacket packet ) 
 { 
 ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; 
 - for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . getConfigurationManager ( ) . playerEntityList ) 
 + for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . func _ 184103 _ al ( ) . getPlayerList ( ) ) 
 { 
 NetworkDispatcher dispatcher = player . playerNetServerHandler . netManager . channel ( ) . attr ( NetworkDispatcher . FML _ DISPATCHER ) . get ( ) ; 
 if ( dispatcher ! = null ) builder . add ( dispatcher ) ; 
 @ @ - 156 , 7 + 156 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 { 
 int dimension = ( Integer ) args ; 
 ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; 
 - for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . getConfigurationManager ( ) . playerEntityList ) 
 + for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . func _ 184103 _ al ( ) . getPlayerList ( ) ) 
 { 
 if ( dimension = = player . dimension ) 
 { 
 @ @ - 190 , 7 + 190 , 7 @ @ public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter { 
 { 
 TargetPoint tp = ( TargetPoint ) args ; 
 ImmutableList . Builder < NetworkDispatcher > builder = ImmutableList . < NetworkDispatcher > builder ( ) ; 
 - for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . getConfigurationManager ( ) . playerEntityList ) 
 + for ( EntityPlayerMP player : ( List < EntityPlayerMP > ) FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . func _ 184103 _ al ( ) . getPlayerList ( ) ) 
 { 
 if ( player . dimension = = tp . dimension ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index 22b6673 . . b18c2cf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 17 , 6 + 17 , 7 @ @ import com . google . common . collect . HashBiMap ; 
 import com . google . common . collect . Iterators ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 + import net . minecraft . util . IntIdentityHashBiMap ; 
 import org . apache . commons . lang3 . Validate ; 
 import org . apache . logging . log4j . Level ; 
 
 @ @ - 170 , 7 + 171 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 this . dummiedLocations . clear ( ) ; 
 this . dummiedLocations . addAll ( otherRegistry . dummiedLocations ) ; 
 
 - underlyingIntegerMap = new ObjectIntIdentityMap < I > ( ) ; 
 + underlyingIntegerMap . func _ 186812 _ a ( ) ; 
 registryObjects . clear ( ) ; 
 
 for ( I thing : otherRegistry . typeSafeIterable ( ) ) 
 @ @ - 556 , 7 + 557 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 throw new IllegalArgumentException ( " The object to be added to the registry is not of the right type . Reflection / ASM hackery ? Registry bug ? " ) ; 
 } 
 
 - underlyingIntegerMap . put ( thing , id ) ; / / obj < - > id 
 + underlyingIntegerMap . func _ 186814 _ a ( thing , id ) ; / / obj < - > id 
 super . putObject ( name , thing ) ; / / name < - > obj 
 availabilityMap . set ( id ) ; 
 if ( addCallback ! = null ) 
 @ @ - 758 , 7 + 759 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 
 for ( I i : this . underlyingIntegerMap ) 
 { 
 - addCallback . onAdd ( i , this . underlyingIntegerMap . get ( i ) ) ; 
 + addCallback . onAdd ( i , this . underlyingIntegerMap . func _ 186808 _ c ( i ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 8e8c4f7 . . 379e298 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 152 , 8 + 152 , 6 @ @ public class PersistentRegistryManager 
 
 / / Empty the blockstate map before loading 
 GameData . getBlockStateIDMap ( ) . clear ( ) ; 
 - / / Clean up potion array before reloading it from the snapshot 
 - Arrays . fill ( Potion . potionTypes , null ) ; 
 
 / / Load the snapshot into the " STAGING " registry 
 for ( Map . Entry < ResourceLocation , GameDataSnapshot . Entry > snapshotEntry : snapshot . entries . entrySet ( ) )

NEAREST DIFF:
diff - - git a / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch b / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch 
 index 98abf73 . . e908c64 100644 
 - - - a / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch 
 + + + b / patches . mcp / minecraft / net / minecraft / potion / Potion . java . patch 
 @ @ - 1 , 6 + 1 , 21 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / potion / Potion . java 
 + + + . . / src - work / minecraft / net / minecraft / potion / Potion . java 
 - @ @ - 195 , 7 + 195 , 6 @ @ 
 + @ @ - 18 , 12 + 18 , 13 @ @ 
 + import net . minecraft . util . StringUtils ; 
 + import net . minecraft . util . math . MathHelper ; 
 + import net . minecraft . util . registry . RegistryNamespaced ; 
 + + import net . minecraftforge . fml . common . registry . GameData ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + import net . minecraftforge . fml . relauncher . SideOnly ; 
 + 
 + public class Potion 
 + { 
 + - public static final RegistryNamespaced < ResourceLocation , Potion > field _ 188414 _ b = new RegistryNamespaced ( ) ; 
 + + public static final RegistryNamespaced < ResourceLocation , Potion > field _ 188414 _ b = GameData . getPotionRegistry ( ) ; 
 + private final Map < IAttribute , AttributeModifier > attributeModifierMap = Maps . < IAttribute , AttributeModifier > newHashMap ( ) ; 
 + private final boolean isBadEffect ; 
 + private final int liquidColor ; 
 + @ @ - 195 , 7 + 196 , 6 @ @ 
 return this . statusIconIndex ; 
 } 
 
 @ @ - 8 , 7 + 23 , 7 @ @ 
 public boolean isBadEffect ( ) 
 { 
 return this . isBadEffect ; 
 - @ @ - 266 , 7 + 265 , 37 @ @ 
 + @ @ - 266 , 7 + 266 , 37 @ @ 
 return modifier . getAmount ( ) * ( double ) ( p _ 111183 _ 1 _ + 1 ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 index 00c1f70 . . be45fec 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 @ @ - 126 , 7 + 126 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E 
 
 if ( spawnMsg . dataWatcherList ! = null ) 
 { 
 - entity . getDataWatcher ( ) . updateWatchedObjectsFromList ( spawnMsg . dataWatcherList ) ; 
 + entity . func _ 184212 _ Q ( ) . func _ 187218 _ a ( spawnMsg . dataWatcherList ) ; 
 } 
 
 if ( spawnMsg . throwerId > 0 ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java 
 index a19c461 . . 2a70bbe 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLMessage . java 
 @ @ - 6 , 11 + 6 , 11 @ @ import io . netty . buffer . Unpooled ; 
 import java . io . IOException ; 
 import java . util . List ; 
 
 + import net . minecraft . network . datasync . EntityDataManager ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Throwables ; 
 
 - import net . minecraft . entity . DataWatcher ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityLivingBase ; 
 import net . minecraft . network . PacketBuffer ; 
 @ @ - 157 , 7 + 157 , 7 @ @ public abstract class FMLMessage { 
 double speedScaledX ; 
 double speedScaledY ; 
 double speedScaledZ ; 
 - List < DataWatcher . WatchableObject > dataWatcherList ; 
 + List < EntityDataManager . DataEntry < ? > > dataWatcherList ; 
 ByteBuf dataStream ; 
 
 public EntitySpawnMessage ( ) { } 
 @ @ - 193 , 7 + 193 , 7 @ @ public abstract class FMLMessage { 
 PacketBuffer pb = new PacketBuffer ( tmpBuf ) ; 
 try 
 { 
 - entity . getDataWatcher ( ) . writeTo ( pb ) ; 
 + entity . func _ 184212 _ Q ( ) . func _ 187216 _ a ( pb ) ; 
 } catch ( IOException e ) 
 { 
 FMLLog . log ( Level . FATAL , e , " Encountered fatal exception trying to send entity spawn data watchers " ) ; 
 @ @ - 247 , 7 + 247 , 7 @ @ public abstract class FMLMessage { 
 scaledHeadYaw = dat . readByte ( ) * 360F / 256F ; 
 try 
 { 
 - dataWatcherList = DataWatcher . readWatchedListFromPacketBuffer ( new PacketBuffer ( dat ) ) ; 
 + dataWatcherList = EntityDataManager . func _ 187215 _ b ( new PacketBuffer ( dat ) ) ; 
 } catch ( IOException e ) 
 { 
 FMLLog . log ( Level . FATAL , e , " There was a critical error decoding the datawatcher stream for a mod entity . " ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java 
 index 2bbafe3 . . 6dd4839 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLNetworkHandler . java 
 @ @ - 27 , 7 + 27 , 7 @ @ import net . minecraft . entity . player . EntityPlayerMP ; 
 import net . minecraft . inventory . Container ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . Packet ; 
 - import net . minecraft . server . management . ServerConfigurationManager ; 
 + import net . minecraft . server . management . PlayerList ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . common . util . FakePlayer ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 @ @ - 59 , 7 + 59 , 7 @ @ public class FMLNetworkHandler 
 public static final int LOGIN _ TIMEOUT = Integers . parseInt ( System . getProperty ( " fml . loginTimeout " , " 600 " ) , 600 ) ; 
 private static EnumMap < Side , FMLEmbeddedChannel > channelPair ; 
 
 - public static void fmlServerHandshake ( ServerConfigurationManager scm , NetworkManager manager , EntityPlayerMP player ) 
 + public static void fmlServerHandshake ( PlayerList scm , NetworkManager manager , EntityPlayerMP player ) 
 { 
 NetworkDispatcher dispatcher = NetworkDispatcher . allocAndSet ( manager , scm ) ; 
 dispatcher . serverToClientHandshake ( player ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 80e9456 . . 525f9cd 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 254 , 9 + 254 , 7 @ @ public class GameData 
 
 @ Override 
 public void onAdd ( Potion potion , int id ) { 
 - / / fix the data in the potion and the potions - array 
 - potion . id = id ; 
 - Potion . potionTypes [ id ] = potion ; 
 + / / no op for the minute ? 
 } 
 } 
 } 
 \ No newline at end of file
