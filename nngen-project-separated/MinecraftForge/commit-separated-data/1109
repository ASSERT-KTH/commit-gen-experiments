BLEU SCORE: 0.028398387225677897

TEST MSG: Forgot that I need a noarg ctor . I ' m so rusty .
GENERATED MSG: Allow client handshake to be reset by server to support BungeeCord .

TEST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java <nl> index 89c7f67 . . 7898eee 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java <nl> @ @ - 32 , 7 + 32 , 12 @ @ public abstract class FMLHandshakeMessage { <nl> public static class ServerHello extends FMLHandshakeMessage { <nl> private byte serverProtocolVersion ; <nl> private int overrideDimension ; <nl> - public ServerHello ( int overrideDim ) { <nl> + public ServerHello ( ) <nl> + { <nl> + / / noargs for the proto <nl> + } <nl> + public ServerHello ( int overrideDim ) <nl> + { <nl> this . overrideDimension = overrideDim ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java <nl> index 12ed5f3 . . 1f756f3 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java <nl> @ @ - 125 , 6 + 125 , 11 @ @ enum FMLHandshakeClientState implements IHandshakeState < FMLHandshakeClientState > <nl> @ Override <nl> public FMLHandshakeClientState accept ( ChannelHandlerContext ctx , FMLHandshakeMessage msg ) <nl> { <nl> + if ( msg instanceof FMLHandshakeMessage . HandshakeReset ) <nl> + { <nl> + GameData . revertToFrozen ( ) ; <nl> + return HELLO ; <nl> + } <nl> return this ; <nl> } <nl> } , <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeCodec . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeCodec . java <nl> index 8ccd3c9 . . e004876 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeCodec . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeCodec . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ public class FMLHandshakeCodec extends FMLIndexedMessageToMessageCodec < FMLHandsh <nl> addDiscriminator ( ( byte ) 2 , FMLHandshakeMessage . ModList . class ) ; <nl> addDiscriminator ( ( byte ) 3 , FMLHandshakeMessage . ModIdData . class ) ; <nl> addDiscriminator ( ( byte ) - 1 , FMLHandshakeMessage . HandshakeAck . class ) ; <nl> + addDiscriminator ( ( byte ) - 2 , FMLHandshakeMessage . HandshakeReset . class ) ; <nl> } <nl> @ Override <nl> public void encodeInto ( ChannelHandlerContext ctx , FMLHandshakeMessage msg , ByteBuf target ) throws Exception <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java <nl> index d998703 . . d11933c 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java <nl> @ @ - 235 , 6 + 235 , 9 @ @ public abstract class FMLHandshakeMessage { <nl> return super . toString ( side ) + " : { " + phase + " } " ; <nl> } <nl> } <nl> + public static class HandshakeReset extends FMLHandshakeMessage { <nl> + public HandshakeReset ( ) { } <nl> + } <nl> public void fromBytes ( ByteBuf buffer ) <nl> { <nl> }

TEST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java 
 index 89c7f67 . . 7898eee 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java 
 @ @ - 32 , 7 + 32 , 12 @ @ public abstract class FMLHandshakeMessage { 
 public static class ServerHello extends FMLHandshakeMessage { 
 private byte serverProtocolVersion ; 
 private int overrideDimension ; 
 - public ServerHello ( int overrideDim ) { 
 + public ServerHello ( ) 
 + { 
 + / / noargs for the proto 
 + } 
 + public ServerHello ( int overrideDim ) 
 + { 
 this . overrideDimension = overrideDim ; 
 } 


NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java 
 index 12ed5f3 . . 1f756f3 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeClientState . java 
 @ @ - 125 , 6 + 125 , 11 @ @ enum FMLHandshakeClientState implements IHandshakeState < FMLHandshakeClientState > 
 @ Override 
 public FMLHandshakeClientState accept ( ChannelHandlerContext ctx , FMLHandshakeMessage msg ) 
 { 
 + if ( msg instanceof FMLHandshakeMessage . HandshakeReset ) 
 + { 
 + GameData . revertToFrozen ( ) ; 
 + return HELLO ; 
 + } 
 return this ; 
 } 
 } , 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeCodec . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeCodec . java 
 index 8ccd3c9 . . e004876 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeCodec . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeCodec . java 
 @ @ - 12 , 6 + 12 , 7 @ @ public class FMLHandshakeCodec extends FMLIndexedMessageToMessageCodec < FMLHandsh 
 addDiscriminator ( ( byte ) 2 , FMLHandshakeMessage . ModList . class ) ; 
 addDiscriminator ( ( byte ) 3 , FMLHandshakeMessage . ModIdData . class ) ; 
 addDiscriminator ( ( byte ) - 1 , FMLHandshakeMessage . HandshakeAck . class ) ; 
 + addDiscriminator ( ( byte ) - 2 , FMLHandshakeMessage . HandshakeReset . class ) ; 
 } 
 @ Override 
 public void encodeInto ( ChannelHandlerContext ctx , FMLHandshakeMessage msg , ByteBuf target ) throws Exception 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java 
 index d998703 . . d11933c 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / network / handshake / FMLHandshakeMessage . java 
 @ @ - 235 , 6 + 235 , 9 @ @ public abstract class FMLHandshakeMessage { 
 return super . toString ( side ) + " : { " + phase + " } " ; 
 } 
 } 
 + public static class HandshakeReset extends FMLHandshakeMessage { 
 + public HandshakeReset ( ) { } 
 + } 
 public void fromBytes ( ByteBuf buffer ) 
 { 
 }
