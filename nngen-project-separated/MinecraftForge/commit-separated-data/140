BLEU SCORE: 0.037954847898457066

TEST MSG: Allow providing a BufferedImage for banner render generation
GENERATED MSG: Added Breaking Animation for Smart Models , Checking each layer .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java . patch b / patches / minecraft / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 55d8503 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java . patch <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + - - - a / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java <nl> + + + + b / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java <nl> + @ @ - 38 , 8 + 38 , 7 @ @ <nl> + String s = this . field _ 174949 _ h . get ( i ) ; <nl> + if ( s ! = null ) { <nl> + try ( <nl> + - IResource iresource1 = p _ 195413 _ 1 _ . func _ 199002 _ a ( new ResourceLocation ( s ) ) ; <nl> + - NativeImage nativeimage2 = NativeImage . func _ 195713 _ a ( iresource1 . func _ 199027 _ b ( ) ) ; <nl> + + NativeImage nativeimage2 = net . minecraftforge . client . MinecraftForgeClient . getImageLayer ( new ResourceLocation ( s ) , p _ 195413 _ 1 _ ) ; <nl> + ) { <nl> + int j = ( ( EnumDyeColor ) this . field _ 174950 _ i . get ( i ) ) . func _ 196057 _ c ( ) ; <nl> + if ( nativeimage2 . func _ 195702 _ a ( ) = = nativeimage1 . func _ 195702 _ a ( ) & & nativeimage2 . func _ 195714 _ b ( ) = = nativeimage1 . func _ 195714 _ b ( ) ) { <nl> diff - - git a / src / main / java / net / minecraftforge / client / MinecraftForgeClient . java b / src / main / java / net / minecraftforge / client / MinecraftForgeClient . java <nl> index 65ee3f9 . . 9f171d8 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / MinecraftForgeClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / MinecraftForgeClient . java <nl> @ @ - 19 , 12 + 19 , 21 @ @ <nl> <nl> package net . minecraftforge . client ; <nl> <nl> + import java . io . IOException ; <nl> import java . util . BitSet ; <nl> + import java . util . HashMap ; <nl> import java . util . Locale ; <nl> import java . util . concurrent . TimeUnit ; <nl> + import java . util . function . Supplier ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> <nl> import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . texture . NativeImage ; <nl> + import net . minecraft . resources . IResource ; <nl> + import net . minecraft . resources . IResourceManager ; <nl> import net . minecraft . util . BlockRenderLayer ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . world . ChunkCache ; <nl> import net . minecraft . world . World ; <nl> @ @ - 124 , 4 + 133 , 21 @ @ public class MinecraftForgeClient <nl> regionCache . invalidateAll ( ) ; <nl> regionCache . cleanUp ( ) ; <nl> } <nl> + <nl> + private static HashMap < ResourceLocation , Supplier < NativeImage > > bufferedImageSuppliers = new HashMap < ResourceLocation , Supplier < NativeImage > > ( ) ; <nl> + public static void registerImageLayerSupplier ( ResourceLocation resourceLocation , Supplier < NativeImage > supplier ) <nl> + { <nl> + bufferedImageSuppliers . put ( resourceLocation , supplier ) ; <nl> + } <nl> + <nl> + @ Nonnull <nl> + public static NativeImage getImageLayer ( ResourceLocation resourceLocation , IResourceManager resourceManager ) throws IOException <nl> + { <nl> + Supplier < NativeImage > supplier = bufferedImageSuppliers . get ( resourceLocation ) ; <nl> + if ( supplier ! = null ) <nl> + return supplier . get ( ) ; <nl> + <nl> + IResource iresource1 = resourceManager . getResource ( resourceLocation ) ; <nl> + return NativeImage . read ( iresource1 . getInputStream ( ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / gameplay / DynamicBannerTest . java b / src / test / java / net / minecraftforge / debug / gameplay / DynamicBannerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 46fb546 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / gameplay / DynamicBannerTest . java <nl> @ @ - 0 , 0 + 1 , 184 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . debug . gameplay ; <nl> + <nl> + import java . awt . image . BufferedImage ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + <nl> + import javax . imageio . ImageIO ; <nl> + <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . BannerTextures ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . item . EnumDyeColor ; <nl> + import net . minecraft . item . ItemBanner ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . nbt . NBTTagList ; <nl> + import net . minecraft . tileentity . BannerPattern ; <nl> + import net . minecraft . util . NonNullList ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . MinecraftForgeClient ; <nl> + import net . minecraftforge . common . util . EnumHelper ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . SidedProxy ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + <nl> + @ Mod ( modid = DynamicBannerTest . MODID , name = " ForgeDebugDynamicBanner " , version = DynamicBannerTest . VERSION , acceptableRemoteVersions = " * " ) <nl> + public class DynamicBannerTest <nl> + { <nl> + private static final boolean ENABLE = false ; <nl> + public static final String MODID = " forgedebugdynamicbanner " ; <nl> + public static final String VERSION = " 1 . 0 " ; <nl> + <nl> + public static CreativeTabs bannerTab ; <nl> + @ SidedProxy <nl> + public static CommonProxy proxy = null ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + if ( ENABLE ) <nl> + { <nl> + BannerPattern pattern = addBasicPattern ( " Y " ) ; <nl> + proxy . registerSupplier ( new ResourceLocation ( " textures / entity / banner / " + pattern . getFileName ( ) + " . png " ) ) ; <nl> + proxy . registerSupplier ( new ResourceLocation ( " textures / entity / shield / " + pattern . getFileName ( ) + " . png " ) ) ; <nl> + bannerTab = new CreativeTabBanners ( " dynbanner . banners " ) ; <nl> + } <nl> + } <nl> + <nl> + public static abstract class CommonProxy <nl> + { <nl> + public void registerSupplier ( ResourceLocation location ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + public static final class ServerProxy extends CommonProxy <nl> + { <nl> + } <nl> + <nl> + public static final class ClientProxy extends CommonProxy <nl> + { <nl> + @ Override <nl> + @ SideOnly ( Side . CLIENT ) <nl> + public void registerSupplier ( ResourceLocation location ) <nl> + { <nl> + MinecraftForgeClient . registerImageLayerSupplier ( location , ( ) - > { <nl> + return createBufferedImage ( ) ; <nl> + } ) ; <nl> + } <nl> + } <nl> + <nl> + public static BannerPattern addBasicPattern ( String name ) <nl> + { <nl> + final Class < ? > [ ] paramTypes = { String . class , String . class } ; <nl> + final Object [ ] paramValues = { MODID + " _ " + name , MODID + " . " + name } ; <nl> + return EnumHelper . addEnum ( BannerPattern . class , name . toUpperCase ( ) , paramTypes , paramValues ) ; <nl> + } <nl> + <nl> + @ SideOnly ( Side . CLIENT ) <nl> + private static BufferedImage createBufferedImage ( ) <nl> + { <nl> + BufferedImage baseImage = buildBackground ( ) ; <nl> + <nl> + int width = 11 ; <nl> + int height = 30 ; <nl> + int startX = 5 ; <nl> + int startY = 5 ; <nl> + <nl> + for ( int xx = startX ; xx < = startX + width ; xx + + ) <nl> + { <nl> + for ( int yy = startY ; yy < = startY + height ; yy + + ) <nl> + { <nl> + baseImage . setRGB ( xx , yy , 0xFF000000 ) ; / / Black <nl> + } <nl> + } <nl> + return baseImage ; <nl> + } <nl> + <nl> + @ SideOnly ( Side . CLIENT ) <nl> + private static BufferedImage buildBackground ( ) <nl> + { <nl> + ResourceLocation originalBackground = BannerTextures . BANNER _ BASE _ TEXTURE ; <nl> + try ( InputStream is = Minecraft . getMinecraft ( ) . getResourceManager ( ) . getResource ( originalBackground ) . getInputStream ( ) ) <nl> + { <nl> + return ImageIO . read ( is ) ; <nl> + } <nl> + catch ( IOException exc ) <nl> + { <nl> + throw new RuntimeException ( " Couldn ' t find or open the page background image . " , exc ) ; <nl> + } <nl> + } <nl> + <nl> + public static NBTTagList makePatternNBTList ( BannerPattern pattern , EnumDyeColor color ) <nl> + { <nl> + final NBTTagList patterns = new NBTTagList ( ) ; <nl> + final NBTTagCompound tag = new NBTTagCompound ( ) ; <nl> + tag . setString ( " Pattern " , pattern . getHashname ( ) ) ; <nl> + tag . setInteger ( " Color " , color . getDyeDamage ( ) ) ; <nl> + patterns . appendTag ( tag ) ; <nl> + return patterns ; <nl> + } <nl> + <nl> + public static class CreativeTabBanners extends CreativeTabs <nl> + { <nl> + private static ItemStack DISPLAY = null ; <nl> + <nl> + public CreativeTabBanners ( String id ) <nl> + { <nl> + super ( id ) ; <nl> + this . setBackgroundImageName ( " item _ search . png " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack getTabIconItem ( ) <nl> + { <nl> + return this . getIconItemStack ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemStack getIconItemStack ( ) <nl> + { <nl> + if ( DISPLAY = = null ) <nl> + DISPLAY = ItemBanner . makeBanner ( EnumDyeColor . WHITE , makePatternNBTList ( BannerPattern . CREEPER , EnumDyeColor . GREEN ) ) ; <nl> + <nl> + return DISPLAY ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasSearchBar ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public void displayAllRelevantItems ( NonNullList < ItemStack > itemList ) <nl> + { <nl> + super . displayAllRelevantItems ( itemList ) ; <nl> + <nl> + for ( final BannerPattern pattern : BannerPattern . values ( ) ) <nl> + itemList . add ( ItemBanner . makeBanner ( EnumDyeColor . WHITE , makePatternNBTList ( pattern , EnumDyeColor . BLACK ) ) ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> index a24be3d . . 2eef166 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> @ @ - 1 , 6 + 1 , 31 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> - @ @ - 129 , 6 + 129 , 12 @ @ <nl> + @ @ - 49 , 6 + 49 , 24 @ @ <nl> + { <nl> + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; <nl> + + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) <nl> + + { <nl> + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) <nl> + + { <nl> + + if ( block . canRenderInLayer ( layer ) ) <nl> + + { <nl> + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; <nl> + + <nl> + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; <nl> + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + + } <nl> + + } <nl> + + return ; <nl> + + } <nl> + + <nl> + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + } <nl> + @ @ - 129 , 6 + 147 , 12 @ @ <nl> ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> new file mode 100644 <nl> index 0000000 . . 593101c <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> @ @ - 0 , 0 + 1 , 265 @ @ <nl> + <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . init . Blocks ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumWorldBlockLayer ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> + import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> + import net . minecraftforge . client . model . IModelPart ; <nl> + import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . ISmartBlockModel ; <nl> + import net . minecraftforge . client . model . TRSRTransformation ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) <nl> + public class LayerBreakingTest <nl> + { <nl> + <nl> + public static final boolean ENABLE = true ; <nl> + public static TestBlock testBlock ; <nl> + <nl> + class TestBakedModel implements IFlexibleBakedModel <nl> + { <nl> + <nl> + TextureAtlasSprite texture ; <nl> + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; <nl> + <nl> + private int [ ] vertexToInts ( <nl> + float x , <nl> + float y , <nl> + float z , <nl> + int color , <nl> + TextureAtlasSprite texture , <nl> + int u , <nl> + int v ) <nl> + { <nl> + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; <nl> + } <nl> + <nl> + public TestBakedModel ( <nl> + TextureAtlasSprite sprite , <nl> + boolean top ) <nl> + { <nl> + texture = sprite ; <nl> + if ( top ) <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; <nl> + } <nl> + else <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return texture ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getFaceQuads ( <nl> + EnumFacing side ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getGeneralQuads ( ) <nl> + { <nl> + return list ; <nl> + } <nl> + <nl> + @ Override <nl> + public VertexFormat getFormat ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class TestBlock extends Block <nl> + { <nl> + <nl> + protected TestBlock ( ) <nl> + { <nl> + super ( Material . glass ) ; <nl> + setHardness ( 7 ) ; <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean isFullCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean canRenderInLayer ( <nl> + EnumWorldBlockLayer layer ) <nl> + { <nl> + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class SmartModel implements IBakedModel , ISmartBlockModel <nl> + { <nl> + <nl> + IFlexibleBakedModel solid ; <nl> + IFlexibleBakedModel translucent ; <nl> + <nl> + private class DefState implements IModelState <nl> + { <nl> + <nl> + @ Override <nl> + public TRSRTransformation apply ( <nl> + IModelPart part ) <nl> + { <nl> + return TRSRTransformation . identity ( ) ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ Override <nl> + public List getFaceQuads ( <nl> + EnumFacing p _ 177551 _ 1 _ ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List getGeneralQuads ( ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleBlockState ( <nl> + IBlockState state ) <nl> + { <nl> + if ( solid = = null ) <nl> + { <nl> + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; <nl> + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; <nl> + <nl> + translucent = new TestBakedModel ( a , true ) ; <nl> + solid = new TestBakedModel ( b , false ) ; <nl> + } <nl> + <nl> + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) <nl> + { <nl> + return solid ; <nl> + } <nl> + else <nl> + { <nl> + return translucent ; <nl> + } <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ SubscribeEvent <nl> + public void onModelBakeEvent ( <nl> + ModelBakeEvent event ) <nl> + { <nl> + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; <nl> + } <nl> + <nl> + @ EventHandler <nl> + public void init ( <nl> + FMLInitializationEvent event ) <nl> + { <nl> + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; <nl> + } <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java . patch b / patches / minecraft / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java . patch 
 new file mode 100644 
 index 0000000 . . 55d8503 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java . patch 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + - - - a / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java 
 + + + + b / net / minecraft / client / renderer / texture / LayeredColorMaskTexture . java 
 + @ @ - 38 , 8 + 38 , 7 @ @ 
 + String s = this . field _ 174949 _ h . get ( i ) ; 
 + if ( s ! = null ) { 
 + try ( 
 + - IResource iresource1 = p _ 195413 _ 1 _ . func _ 199002 _ a ( new ResourceLocation ( s ) ) ; 
 + - NativeImage nativeimage2 = NativeImage . func _ 195713 _ a ( iresource1 . func _ 199027 _ b ( ) ) ; 
 + + NativeImage nativeimage2 = net . minecraftforge . client . MinecraftForgeClient . getImageLayer ( new ResourceLocation ( s ) , p _ 195413 _ 1 _ ) ; 
 + ) { 
 + int j = ( ( EnumDyeColor ) this . field _ 174950 _ i . get ( i ) ) . func _ 196057 _ c ( ) ; 
 + if ( nativeimage2 . func _ 195702 _ a ( ) = = nativeimage1 . func _ 195702 _ a ( ) & & nativeimage2 . func _ 195714 _ b ( ) = = nativeimage1 . func _ 195714 _ b ( ) ) { 
 diff - - git a / src / main / java / net / minecraftforge / client / MinecraftForgeClient . java b / src / main / java / net / minecraftforge / client / MinecraftForgeClient . java 
 index 65ee3f9 . . 9f171d8 100644 
 - - - a / src / main / java / net / minecraftforge / client / MinecraftForgeClient . java 
 + + + b / src / main / java / net / minecraftforge / client / MinecraftForgeClient . java 
 @ @ - 19 , 12 + 19 , 21 @ @ 
 
 package net . minecraftforge . client ; 
 
 + import java . io . IOException ; 
 import java . util . BitSet ; 
 + import java . util . HashMap ; 
 import java . util . Locale ; 
 import java . util . concurrent . TimeUnit ; 
 + import java . util . function . Supplier ; 
 + 
 + import javax . annotation . Nonnull ; 
 
 import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . texture . NativeImage ; 
 + import net . minecraft . resources . IResource ; 
 + import net . minecraft . resources . IResourceManager ; 
 import net . minecraft . util . BlockRenderLayer ; 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . world . ChunkCache ; 
 import net . minecraft . world . World ; 
 @ @ - 124 , 4 + 133 , 21 @ @ public class MinecraftForgeClient 
 regionCache . invalidateAll ( ) ; 
 regionCache . cleanUp ( ) ; 
 } 
 + 
 + private static HashMap < ResourceLocation , Supplier < NativeImage > > bufferedImageSuppliers = new HashMap < ResourceLocation , Supplier < NativeImage > > ( ) ; 
 + public static void registerImageLayerSupplier ( ResourceLocation resourceLocation , Supplier < NativeImage > supplier ) 
 + { 
 + bufferedImageSuppliers . put ( resourceLocation , supplier ) ; 
 + } 
 + 
 + @ Nonnull 
 + public static NativeImage getImageLayer ( ResourceLocation resourceLocation , IResourceManager resourceManager ) throws IOException 
 + { 
 + Supplier < NativeImage > supplier = bufferedImageSuppliers . get ( resourceLocation ) ; 
 + if ( supplier ! = null ) 
 + return supplier . get ( ) ; 
 + 
 + IResource iresource1 = resourceManager . getResource ( resourceLocation ) ; 
 + return NativeImage . read ( iresource1 . getInputStream ( ) ) ; 
 + } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / gameplay / DynamicBannerTest . java b / src / test / java / net / minecraftforge / debug / gameplay / DynamicBannerTest . java 
 new file mode 100644 
 index 0000000 . . 46fb546 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / gameplay / DynamicBannerTest . java 
 @ @ - 0 , 0 + 1 , 184 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . debug . gameplay ; 
 + 
 + import java . awt . image . BufferedImage ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + 
 + import javax . imageio . ImageIO ; 
 + 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . BannerTextures ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . item . EnumDyeColor ; 
 + import net . minecraft . item . ItemBanner ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . nbt . NBTTagList ; 
 + import net . minecraft . tileentity . BannerPattern ; 
 + import net . minecraft . util . NonNullList ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . MinecraftForgeClient ; 
 + import net . minecraftforge . common . util . EnumHelper ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . SidedProxy ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + import net . minecraftforge . fml . relauncher . SideOnly ; 
 + 
 + @ Mod ( modid = DynamicBannerTest . MODID , name = " ForgeDebugDynamicBanner " , version = DynamicBannerTest . VERSION , acceptableRemoteVersions = " * " ) 
 + public class DynamicBannerTest 
 + { 
 + private static final boolean ENABLE = false ; 
 + public static final String MODID = " forgedebugdynamicbanner " ; 
 + public static final String VERSION = " 1 . 0 " ; 
 + 
 + public static CreativeTabs bannerTab ; 
 + @ SidedProxy 
 + public static CommonProxy proxy = null ; 
 + 
 + @ Mod . EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + if ( ENABLE ) 
 + { 
 + BannerPattern pattern = addBasicPattern ( " Y " ) ; 
 + proxy . registerSupplier ( new ResourceLocation ( " textures / entity / banner / " + pattern . getFileName ( ) + " . png " ) ) ; 
 + proxy . registerSupplier ( new ResourceLocation ( " textures / entity / shield / " + pattern . getFileName ( ) + " . png " ) ) ; 
 + bannerTab = new CreativeTabBanners ( " dynbanner . banners " ) ; 
 + } 
 + } 
 + 
 + public static abstract class CommonProxy 
 + { 
 + public void registerSupplier ( ResourceLocation location ) 
 + { 
 + } 
 + } 
 + 
 + public static final class ServerProxy extends CommonProxy 
 + { 
 + } 
 + 
 + public static final class ClientProxy extends CommonProxy 
 + { 
 + @ Override 
 + @ SideOnly ( Side . CLIENT ) 
 + public void registerSupplier ( ResourceLocation location ) 
 + { 
 + MinecraftForgeClient . registerImageLayerSupplier ( location , ( ) - > { 
 + return createBufferedImage ( ) ; 
 + } ) ; 
 + } 
 + } 
 + 
 + public static BannerPattern addBasicPattern ( String name ) 
 + { 
 + final Class < ? > [ ] paramTypes = { String . class , String . class } ; 
 + final Object [ ] paramValues = { MODID + " _ " + name , MODID + " . " + name } ; 
 + return EnumHelper . addEnum ( BannerPattern . class , name . toUpperCase ( ) , paramTypes , paramValues ) ; 
 + } 
 + 
 + @ SideOnly ( Side . CLIENT ) 
 + private static BufferedImage createBufferedImage ( ) 
 + { 
 + BufferedImage baseImage = buildBackground ( ) ; 
 + 
 + int width = 11 ; 
 + int height = 30 ; 
 + int startX = 5 ; 
 + int startY = 5 ; 
 + 
 + for ( int xx = startX ; xx < = startX + width ; xx + + ) 
 + { 
 + for ( int yy = startY ; yy < = startY + height ; yy + + ) 
 + { 
 + baseImage . setRGB ( xx , yy , 0xFF000000 ) ; / / Black 
 + } 
 + } 
 + return baseImage ; 
 + } 
 + 
 + @ SideOnly ( Side . CLIENT ) 
 + private static BufferedImage buildBackground ( ) 
 + { 
 + ResourceLocation originalBackground = BannerTextures . BANNER _ BASE _ TEXTURE ; 
 + try ( InputStream is = Minecraft . getMinecraft ( ) . getResourceManager ( ) . getResource ( originalBackground ) . getInputStream ( ) ) 
 + { 
 + return ImageIO . read ( is ) ; 
 + } 
 + catch ( IOException exc ) 
 + { 
 + throw new RuntimeException ( " Couldn ' t find or open the page background image . " , exc ) ; 
 + } 
 + } 
 + 
 + public static NBTTagList makePatternNBTList ( BannerPattern pattern , EnumDyeColor color ) 
 + { 
 + final NBTTagList patterns = new NBTTagList ( ) ; 
 + final NBTTagCompound tag = new NBTTagCompound ( ) ; 
 + tag . setString ( " Pattern " , pattern . getHashname ( ) ) ; 
 + tag . setInteger ( " Color " , color . getDyeDamage ( ) ) ; 
 + patterns . appendTag ( tag ) ; 
 + return patterns ; 
 + } 
 + 
 + public static class CreativeTabBanners extends CreativeTabs 
 + { 
 + private static ItemStack DISPLAY = null ; 
 + 
 + public CreativeTabBanners ( String id ) 
 + { 
 + super ( id ) ; 
 + this . setBackgroundImageName ( " item _ search . png " ) ; 
 + } 
 + 
 + @ Override 
 + public ItemStack getTabIconItem ( ) 
 + { 
 + return this . getIconItemStack ( ) ; 
 + } 
 + 
 + @ Override 
 + public ItemStack getIconItemStack ( ) 
 + { 
 + if ( DISPLAY = = null ) 
 + DISPLAY = ItemBanner . makeBanner ( EnumDyeColor . WHITE , makePatternNBTList ( BannerPattern . CREEPER , EnumDyeColor . GREEN ) ) ; 
 + 
 + return DISPLAY ; 
 + } 
 + 
 + @ Override 
 + public boolean hasSearchBar ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public void displayAllRelevantItems ( NonNullList < ItemStack > itemList ) 
 + { 
 + super . displayAllRelevantItems ( itemList ) ; 
 + 
 + for ( final BannerPattern pattern : BannerPattern . values ( ) ) 
 + itemList . add ( ItemBanner . makeBanner ( EnumDyeColor . WHITE , makePatternNBTList ( pattern , EnumDyeColor . BLACK ) ) ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 index a24be3d . . 2eef166 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 @ @ - 1 , 6 + 1 , 31 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 - @ @ - 129 , 6 + 129 , 12 @ @ 
 + @ @ - 49 , 6 + 49 , 24 @ @ 
 + { 
 + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; 
 + + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) 
 + + { 
 + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) 
 + + { 
 + + if ( block . canRenderInLayer ( layer ) ) 
 + + { 
 + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; 
 + + 
 + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; 
 + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + + } 
 + + } 
 + + return ; 
 + + } 
 + + 
 + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + } 
 + @ @ - 129 , 6 + 147 , 12 @ @ 
 ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 new file mode 100644 
 index 0000000 . . 593101c 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 @ @ - 0 , 0 + 1 , 265 @ @ 
 + 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import com . google . common . primitives . Ints ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . init . Blocks ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumWorldBlockLayer ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 + import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 + import net . minecraftforge . client . model . IModelPart ; 
 + import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . ISmartBlockModel ; 
 + import net . minecraftforge . client . model . TRSRTransformation ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + 
 + @ SuppressWarnings ( " deprecation " ) 
 + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) 
 + public class LayerBreakingTest 
 + { 
 + 
 + public static final boolean ENABLE = true ; 
 + public static TestBlock testBlock ; 
 + 
 + class TestBakedModel implements IFlexibleBakedModel 
 + { 
 + 
 + TextureAtlasSprite texture ; 
 + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; 
 + 
 + private int [ ] vertexToInts ( 
 + float x , 
 + float y , 
 + float z , 
 + int color , 
 + TextureAtlasSprite texture , 
 + int u , 
 + int v ) 
 + { 
 + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; 
 + } 
 + 
 + public TestBakedModel ( 
 + TextureAtlasSprite sprite , 
 + boolean top ) 
 + { 
 + texture = sprite ; 
 + if ( top ) 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; 
 + } 
 + else 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return texture ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getFaceQuads ( 
 + EnumFacing side ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getGeneralQuads ( ) 
 + { 
 + return list ; 
 + } 
 + 
 + @ Override 
 + public VertexFormat getFormat ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + } ; 
 + 
 + class TestBlock extends Block 
 + { 
 + 
 + protected TestBlock ( ) 
 + { 
 + super ( Material . glass ) ; 
 + setHardness ( 7 ) ; 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean isFullCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public boolean canRenderInLayer ( 
 + EnumWorldBlockLayer layer ) 
 + { 
 + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; 
 + } 
 + 
 + } ; 
 + 
 + class SmartModel implements IBakedModel , ISmartBlockModel 
 + { 
 + 
 + IFlexibleBakedModel solid ; 
 + IFlexibleBakedModel translucent ; 
 + 
 + private class DefState implements IModelState 
 + { 
 + 
 + @ Override 
 + public TRSRTransformation apply ( 
 + IModelPart part ) 
 + { 
 + return TRSRTransformation . identity ( ) ; 
 + } 
 + 
 + } ; 
 + 
 + @ Override 
 + public List getFaceQuads ( 
 + EnumFacing p _ 177551 _ 1 _ ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List getGeneralQuads ( ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleBlockState ( 
 + IBlockState state ) 
 + { 
 + if ( solid = = null ) 
 + { 
 + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; 
 + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; 
 + 
 + translucent = new TestBakedModel ( a , true ) ; 
 + solid = new TestBakedModel ( b , false ) ; 
 + } 
 + 
 + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) 
 + { 
 + return solid ; 
 + } 
 + else 
 + { 
 + return translucent ; 
 + } 
 + } 
 + 
 + } ; 
 + 
 + @ SubscribeEvent 
 + public void onModelBakeEvent ( 
 + ModelBakeEvent event ) 
 + { 
 + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; 
 + } 
 + 
 + @ EventHandler 
 + public void init ( 
 + FMLInitializationEvent event ) 
 + { 
 + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; 
 + } 
 + } 
 + 
 + }
