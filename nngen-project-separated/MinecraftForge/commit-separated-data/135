BLEU SCORE: 0.02383853510228548

TEST MSG: Move Registry Events to the mod event bus .
GENERATED MSG: Remove Java 8 warnings now that Minecraft requires it

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 5d02a33 . . 6c22886 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 260 , 7 + 260 , 7 @ @ project ( ' : forge ' ) { <nl> installer ' org . ow2 . asm : asm - tree : 6 . 2 ' <nl> installer ' cpw . mods : modlauncher : 0 . 6 . 0 ' <nl> installer ' net . minecraftforge : accesstransformers : 0 . 14 . + : shadowed ' <nl> - installer ' net . minecraftforge : eventbus : 0 . 3 . + : service ' <nl> + installer ' net . minecraftforge : eventbus : 0 . 6 . + : service ' <nl> installer ' net . minecraftforge : forgespi : 0 . 2 . + ' <nl> installer ' net . minecraftforge : coremods : 0 . 2 . + ' <nl> installer ' com . electronwill . night - config : core : 3 . 4 . 2 ' <nl> diff - - git a / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java <nl> index bbb8dcb . . 31aa8a5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java <nl> + + + b / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java <nl> @ @ - 39 , 7 + 39 , 8 @ @ import static net . minecraftforge . fml . Logging . LOADING ; <nl> <nl> / * * <nl> * Automatic eventbus subscriber - reads { @ link net . minecraftforge . fml . common . Mod . EventBusSubscriber } <nl> - * annotations and passes the class instances to the { @ link net . minecraftforge . common . MinecraftForge . EVENT _ BUS } <nl> + * annotations and passes the class instances to the { @ link net . minecraftforge . fml . common . Mod . EventBusSubscriber . Bus } <nl> + * defined by the annotation . Defaults to { @ link MinecraftForge # EVENT _ BUS } <nl> * / <nl> public class AutomaticEventSubscriber <nl> { <nl> @ @ - 60 , 10 + 61 , 11 @ @ public class AutomaticEventSubscriber <nl> final EnumSet < Dist > sides = sidesValue . stream ( ) . map ( eh - > Dist . valueOf ( eh . getValue ( ) ) ) . <nl> collect ( Collectors . toCollection ( ( ) - > EnumSet . noneOf ( Dist . class ) ) ) ; <nl> final String modId = ( String ) ad . getAnnotationData ( ) . getOrDefault ( " modId " , mod . getModId ( ) ) ; <nl> + final Mod . EventBusSubscriber . Bus busTarget = ( Mod . EventBusSubscriber . Bus ) ad . getAnnotationData ( ) . getOrDefault ( " bus " , Mod . EventBusSubscriber . Bus . FORGE ) ; <nl> if ( Objects . equals ( mod . getModId ( ) , modId ) & & sides . contains ( FMLEnvironment . dist ) ) { <nl> try <nl> { <nl> - MinecraftForge . EVENT _ BUS . register ( Class . forName ( ad . getClassType ( ) . getClassName ( ) , true , loader ) ) ; <nl> + busTarget . bus ( ) . get ( ) . register ( Class . forName ( ad . getClassType ( ) . getClassName ( ) , true , loader ) ) ; <nl> } <nl> catch ( ClassNotFoundException e ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java b / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java <nl> index e6bea2c . . fdedfc6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java <nl> @ @ - 19 , 40 + 19 , 72 @ @ <nl> <nl> package net . minecraftforge . fml ; <nl> <nl> + import net . minecraftforge . eventbus . api . Event ; <nl> import net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent ; <nl> import net . minecraftforge . fml . javafmlmod . FMLModContainer ; <nl> import net . minecraftforge . forgespi . language . ILifecycleEvent ; <nl> <nl> import java . util . List ; <nl> + import java . util . function . BiConsumer ; <nl> import java . util . function . Consumer ; <nl> + import java . util . function . Function ; <nl> import java . util . function . Supplier ; <nl> <nl> public enum LifecycleEventProvider <nl> { <nl> CONSTRUCT ( ( ) - > new LifecycleEvent ( ModLoadingStage . CONSTRUCT ) ) , <nl> + CREATE _ REGISTRIES ( ( ) - > new LifecycleEvent ( ModLoadingStage . CREATE _ REGISTRIES ) , ModList . inlineDispatcher ) , <nl> + LOAD _ REGISTRIES ( ( ) - > new LifecycleEvent ( ModLoadingStage . LOAD _ REGISTRIES , LifecycleEvent . Progression . STAY ) , ModList . inlineDispatcher ) , <nl> SETUP ( ( ) - > new LifecycleEvent ( ModLoadingStage . COMMON _ SETUP ) ) , <nl> SIDED _ SETUP ( ( ) - > new LifecycleEvent ( ModLoadingStage . SIDED _ SETUP ) ) , <nl> ENQUEUE _ IMC ( ( ) - > new LifecycleEvent ( ModLoadingStage . ENQUEUE _ IMC ) ) , <nl> PROCESS _ IMC ( ( ) - > new LifecycleEvent ( ModLoadingStage . PROCESS _ IMC ) ) , <nl> COMPLETE ( ( ) - > new LifecycleEvent ( ModLoadingStage . COMPLETE ) ) ; <nl> <nl> - public void dispatch ( Consumer < List < ModLoadingException > > errorHandler ) { <nl> - ModList . get ( ) . dispatchLifeCycleEvent ( this . event . get ( ) , errorHandler ) ; <nl> - } <nl> private final Supplier < ? extends LifecycleEvent > event ; <nl> + private final BiConsumer < LifecycleEvent , Consumer < List < ModLoadingException > > > eventDispatcher ; <nl> + private Supplier < Event > customEventSupplier ; <nl> + private LifecycleEvent . Progression progression = LifecycleEvent . Progression . NEXT ; <nl> <nl> LifecycleEventProvider ( Supplier < ? extends LifecycleEvent > e ) <nl> { <nl> - event = e ; <nl> + this ( e , ModList . parallelDispatcher ) ; <nl> + } <nl> + <nl> + LifecycleEventProvider ( Supplier < ? extends LifecycleEvent > e , BiConsumer < LifecycleEvent , Consumer < List < ModLoadingException > > > eventDispatcher ) <nl> + { <nl> + this . event = e ; <nl> + this . eventDispatcher = eventDispatcher ; <nl> + } <nl> + <nl> + public void setCustomEventSupplier ( Supplier < Event > eventSupplier ) { <nl> + this . customEventSupplier = eventSupplier ; <nl> + } <nl> + <nl> + public void changeProgression ( LifecycleEvent . Progression progression ) { <nl> + this . progression = progression ; <nl> + } <nl> + <nl> + public void dispatch ( Consumer < List < ModLoadingException > > errorHandler ) { <nl> + final LifecycleEvent lifecycleEvent = this . event . get ( ) ; <nl> + lifecycleEvent . setCustomEventSupplier ( this . customEventSupplier ) ; <nl> + lifecycleEvent . changeProgression ( this . progression ) ; <nl> + this . eventDispatcher . accept ( lifecycleEvent , errorHandler ) ; <nl> } <nl> <nl> <nl> public static class LifecycleEvent implements ILifecycleEvent < LifecycleEvent > { <nl> private final ModLoadingStage stage ; <nl> - <nl> - public LifecycleEvent ( ModLoadingStage stage ) <nl> + private Supplier < Event > customEventSupplier ; <nl> + private Progression progression ; <nl> + LifecycleEvent ( final ModLoadingStage stage ) <nl> { <nl> + this ( stage , Progression . NEXT ) ; <nl> + } <nl> + <nl> + LifecycleEvent ( final ModLoadingStage stage , final Progression progression ) { <nl> this . stage = stage ; <nl> + this . progression = progression ; <nl> } <nl> <nl> public ModLoadingStage fromStage ( ) <nl> @ @ - 62 , 12 + 94 , 42 @ @ public enum LifecycleEventProvider <nl> <nl> public ModLoadingStage toStage ( ) <nl> { <nl> - return ModLoadingStage . values ( ) [ this . stage . ordinal ( ) + 1 ] ; <nl> + return progression . apply ( this . stage ) ; <nl> + } <nl> + <nl> + public void setCustomEventSupplier ( Supplier < Event > customEventSupplier ) { <nl> + this . customEventSupplier = customEventSupplier ; <nl> } <nl> <nl> - public ModLifecycleEvent buildModEvent ( FMLModContainer fmlModContainer ) <nl> + public void changeProgression ( Progression p ) { <nl> + this . progression = p ; <nl> + } <nl> + <nl> + public Event getOrBuildEvent ( FMLModContainer fmlModContainer ) <nl> { <nl> + if ( customEventSupplier ! = null ) return customEventSupplier . get ( ) ; <nl> + <nl> return stage . getModEvent ( fmlModContainer ) ; <nl> } <nl> + <nl> + @ Override <nl> + public String toString ( ) { <nl> + return " LifecycleEvent : " + stage ; <nl> + } <nl> + <nl> + public enum Progression { <nl> + NEXT ( ( current ) - > ModLoadingStage . values ( ) [ current . ordinal ( ) + 1 ] ) , <nl> + STAY ( Function . identity ( ) ) ; <nl> + <nl> + private final Function < ModLoadingStage , ModLoadingStage > edge ; <nl> + <nl> + Progression ( Function < ModLoadingStage , ModLoadingStage > edge ) { <nl> + this . edge = edge ; <nl> + } <nl> + <nl> + public ModLoadingStage apply ( ModLoadingStage in ) { <nl> + return this . edge . apply ( in ) ; <nl> + } <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java <nl> index 6af85bc . . ff5f04a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModList . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import java . util . Optional ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ForkJoinPool ; <nl> import java . util . concurrent . FutureTask ; <nl> + import java . util . function . BiConsumer ; <nl> import java . util . function . Consumer ; <nl> import java . util . function . Function ; <nl> import java . util . stream . Collectors ; <nl> @ @ - 74 , 6 + 75 , 10 @ @ public class ModList <nl> return INSTANCE ; <nl> } <nl> <nl> + static BiConsumer < LifecycleEventProvider . LifecycleEvent , Consumer < List < ModLoadingException > > > inlineDispatcher = ( event , errors ) - > ModList . get ( ) . dispatchSynchronousEvent ( event , errors ) ; <nl> + <nl> + static BiConsumer < LifecycleEventProvider . LifecycleEvent , Consumer < List < ModLoadingException > > > parallelDispatcher = ( event , errors ) - > ModList . get ( ) . dispatchParallelEvent ( event , errors ) ; <nl> + <nl> public static ModList get ( ) { <nl> return INSTANCE ; <nl> } <nl> @ @ - 83 , 13 + 88 , 19 @ @ public class ModList <nl> return modFiles ; <nl> } <nl> <nl> - <nl> public ModFileInfo getModFileById ( String modid ) <nl> { <nl> return this . fileById . get ( modid ) ; <nl> } <nl> <nl> - public void dispatchLifeCycleEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { <nl> + private void dispatchSynchronousEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { <nl> + LOGGER . info ( LOADING , " Dispatching synchronous event { } " , lifecycleEvent ) ; <nl> + FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; <nl> + this . mods . forEach ( m - > m . transitionState ( lifecycleEvent , errorHandler ) ) ; <nl> + FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; <nl> + } <nl> + private void dispatchParallelEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { <nl> + LOGGER . info ( LOADING , " Dispatching parallel event { } " , lifecycleEvent ) ; <nl> FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; <nl> DeferredWorkQueue . clear ( ) ; <nl> try <nl> @ @ - 104 , 7 + 115 , 7 @ @ public class ModList <nl> FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; <nl> } <nl> <nl> - public void setLoadedMods ( final List < ModContainer > modContainers ) <nl> + void setLoadedMods ( final List < ModContainer > modContainers ) <nl> { <nl> this . mods = modContainers ; <nl> this . indexedMods = modContainers . stream ( ) . collect ( Collectors . toMap ( ModContainer : : getModId , Function . identity ( ) ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> index 662c245 . . 8818b1a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> @ @ - 123 , 10 + 123 , 10 @ @ public class ModLoader <nl> } <nl> modList . setLoadedMods ( modContainerStream . collect ( Collectors . toList ( ) ) ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . CONSTRUCT ) ; <nl> - GameData . fireCreateRegistryEvents ( ) ; <nl> + GameData . fireCreateRegistryEvents ( LifecycleEventProvider . CREATE _ REGISTRIES , this : : dispatchAndHandleError ) ; <nl> ObjectHolderRegistry . findObjectHolders ( ) ; <nl> CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; <nl> - GameData . fireRegistryEvents ( ) ; <nl> + GameData . fireRegistryEvents ( rl - > true , LifecycleEventProvider . LOAD _ REGISTRIES , this : : dispatchAndHandleError ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . SETUP ) ; <nl> DistExecutor . runWhenOn ( Dist . CLIENT , ModLoader : : fireClientEvents ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . SIDED _ SETUP ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingStage . java b / src / main / java / net / minecraftforge / fml / ModLoadingStage . java <nl> index 06dae55 . . f055752 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoadingStage . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoadingStage . java <nl> @ @ - 29 , 13 + 29 , 14 @ @ public enum ModLoadingStage <nl> ERROR ( null ) , <nl> VALIDATE ( null ) , <nl> CONSTRUCT ( null ) , <nl> + CREATE _ REGISTRIES ( null ) , <nl> + LOAD _ REGISTRIES ( null ) , <nl> COMMON _ SETUP ( ( ) - > FMLCommonSetupEvent : : new ) , <nl> SIDED _ SETUP ( SidedProvider . SIDED _ SETUP _ EVENT : : get ) , <nl> ENQUEUE _ IMC ( ( ) - > InterModEnqueueEvent : : new ) , <nl> PROCESS _ IMC ( ( ) - > InterModProcessEvent : : new ) , <nl> COMPLETE ( ( ) - > FMLLoadCompleteEvent : : new ) , <nl> DONE ( null ) ; <nl> - <nl> private final Supplier < Function < ModContainer , ModLifecycleEvent > > modLifecycleEventFunction ; <nl> <nl> ModLoadingStage ( Supplier < Function < ModContainer , ModLifecycleEvent > > modLifecycleEventFunction ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index 37cfbdc . . 150a590 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 23 , 26 + 23 , 19 @ @ import java . lang . annotation . ElementType ; <nl> import java . lang . annotation . Retention ; <nl> import java . lang . annotation . RetentionPolicy ; <nl> import java . lang . annotation . Target ; <nl> + import java . util . function . Supplier ; <nl> <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> - import net . minecraftforge . fml . event . lifecycle . FMLFingerprintViolationEvent ; <nl> - import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; <nl> - import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; <nl> - import net . minecraftforge . fml . event . server . FMLServerAboutToStartEvent ; <nl> - import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; <nl> - import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; <nl> - import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; <nl> - import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . eventbus . api . IEventBus ; <nl> import net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent ; <nl> - import net . minecraftforge . fml . event . lifecycle . InterModEnqueueEvent ; <nl> - import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; <nl> <nl> / * * <nl> * This defines a Mod to FML . <nl> * Any class found with this annotation applied will be loaded as a Mod . The instance that is loaded will <nl> * represent the mod to other Mods in the system . It will be sent various subclasses of { @ link ModLifecycleEvent } <nl> - * at pre - defined times during the loading of the game , based on where you have applied the { @ link EventHandler } <nl> - * annotation . <nl> + * at pre - defined times during the loading of the game . <nl> * / <nl> @ Retention ( RetentionPolicy . RUNTIME ) <nl> @ Target ( ElementType . TYPE ) <nl> @ @ - 56 , 63 + 49 , 60 @ @ public @ interface Mod <nl> * By default , you will have a resource domain that matches the modid . All these uses require that constraints are imposed on the format of the modid . <nl> * / <nl> String value ( ) ; <nl> - / * * <nl> - * Marks the associated method as handling an FML lifecycle event . <nl> - * The method must have a single parameter , one of the following types . This annotation <nl> - * replaces the multiple different annotations that previously were used . <nl> - * <nl> - * Current event classes . This first section is standard lifecycle events . They are dispatched <nl> - * at various phases as the game starts . Each event should have information useful to that <nl> - * phase of the lifecycle . They are fired in this order . <nl> - * <nl> - * These suggestions are mostly just suggestions on what to do in each event . <nl> - * < ul > <nl> - * < li > { @ link FMLCommonSetupEvent } : Run before anything else . Read your config , create blocks , <nl> - * items , etc , and register them with the { @ link GameRegistry } . < / li > <nl> - * < li > { @ link InterModEnqueueEvent } : Do your mod setup . Build whatever data structures you care about . Register recipes , <nl> - * send { @ link FMLInterModComms } messages to other mods . < / li > <nl> - * < li > { @ link InterModProcessEvent } : Handle interaction with other mods , complete your setup based on this . < / li > <nl> - * < / ul > <nl> - * < p > These are the server lifecycle events . They are fired whenever a server is running , or about to run . Each time a server <nl> - * starts they will be fired in this sequence . <nl> - * < ul > <nl> - * < li > { @ link FMLServerAboutToStartEvent } : Use if you need to handle something before the server has even been created . < / li > <nl> - * < li > { @ link FMLServerStartingEvent } : Do stuff you need to do to set up the server . register commands , tweak the server . < / li > <nl> - * < li > { @ link FMLServerStartedEvent } : Do what you need to with the running server . < / li > <nl> - * < li > { @ link FMLServerStoppingEvent } : Do what you need to before the server has started it ' s shutdown sequence . < / li > <nl> - * < li > { @ link FMLServerStoppedEvent } : Do whatever cleanup you need once the server has shutdown . Generally only useful <nl> - * on the integrated server . < / li > <nl> - * < / ul > <nl> - * The second set of events are more specialized , for receiving notification of specific <nl> - * information . <nl> - * < ul > <nl> - * < li > { @ link FMLFingerprintViolationEvent } : Sent just before { @ link FMLCommonSetupEvent } <nl> - * if something is wrong with your mod signature < / li > <nl> - * < li > { @ link IMCEvent } : Sent just after { @ link InterModEnqueueEvent } if you have IMC messages waiting <nl> - * from other mods < / li > <nl> - * < / ul > <nl> - * <nl> - * @ author cpw <nl> - * <nl> - * / <nl> - @ Deprecated <nl> - @ Retention ( RetentionPolicy . RUNTIME ) <nl> - @ Target ( ElementType . METHOD ) <nl> - @ interface EventHandler { } <nl> <nl> / * * <nl> - * A class which will be subscribed to { @ link net . minecraftforge . common . MinecraftForge . EVENT _ BUS } at mod construction time . <nl> + * Annotate a class which will be subscribed to an Event Bus at mod construction time . <nl> + * Defaults to subscribing the current modid to the { @ link MinecraftForge # EVENT _ BUS } <nl> + * on both sides . <nl> + * <nl> + * @ see Bus <nl> * / <nl> @ Retention ( RetentionPolicy . RUNTIME ) <nl> @ Target ( ElementType . TYPE ) <nl> @ interface EventBusSubscriber { <nl> + / * * <nl> + * Specify targets to load this event subscriber on . Can be used to avoid loading Client specific events <nl> + * on a dedicated server , for example . <nl> + * <nl> + * @ return an array of Dist to load this event subscriber on <nl> + * / <nl> Dist [ ] value ( ) default { Dist . CLIENT , Dist . DEDICATED _ SERVER } ; <nl> <nl> / * * <nl> - * Optional value , only nessasary if tis annotation is not on the same class that has a @ Mod annotation . <nl> + * Optional value , only necessary if this annotation is not on the same class that has a @ Mod annotation . <nl> * Needed to prevent early classloading of classes not owned by your mod . <nl> - * @ return <nl> + * @ return a modid <nl> * / <nl> String modid ( ) default " " ; <nl> + <nl> + / * * <nl> + * Specify an alternative bus to listen to <nl> + * <nl> + * @ return the bus you wish to listen to <nl> + * / <nl> + Bus bus ( ) default Bus . FORGE ; <nl> + <nl> + enum Bus { <nl> + / * * <nl> + * The main Forge Event Bus . <nl> + * @ see MinecraftForge # EVENT _ BUS <nl> + * / <nl> + FORGE ( ( ) - > MinecraftForge . EVENT _ BUS ) , <nl> + / * * <nl> + * The mod specific Event bus . <nl> + * @ see FMLModLoadingContext # getModEventBus ( ) <nl> + * / <nl> + MOD ( ( ) - > FMLModLoadingContext . get ( ) . getModEventBus ( ) ) ; <nl> + <nl> + private final Supplier < IEventBus > busSupplier ; <nl> + <nl> + Bus ( final Supplier < IEventBus > eventBusSupplier ) { <nl> + this . busSupplier = eventBusSupplier ; <nl> + } <nl> + <nl> + public Supplier < IEventBus > bus ( ) { <nl> + return busSupplier ; <nl> + } <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> index 5b431be . . 2630fb8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> @ @ - 29 , 7 + 29 , 6 @ @ import net . minecraftforge . fml . ModContainer ; <nl> import net . minecraftforge . fml . ModLoadingException ; <nl> import net . minecraftforge . fml . ModLoadingStage ; <nl> import net . minecraftforge . fml . ModThreadContext ; <nl> - import net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent ; <nl> import net . minecraftforge . forgespi . language . IModInfo ; <nl> import net . minecraftforge . forgespi . language . ModFileScanData ; <nl> <nl> @ @ - 54 , 6 + 53 , 8 @ @ public class FMLModContainer extends ModContainer <nl> LOGGER . debug ( " Creating FMLModContainer instance for { } with classLoader { } & { } " , className , modClassLoader , getClass ( ) . getClassLoader ( ) ) ; <nl> this . scanResults = modFileScanResults ; <nl> triggerMap . put ( ModLoadingStage . CONSTRUCT , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : constructMod ) . andThen ( this : : afterEvent ) ) ; <nl> + triggerMap . put ( ModLoadingStage . CREATE _ REGISTRIES , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; <nl> + triggerMap . put ( ModLoadingStage . LOAD _ REGISTRIES , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; <nl> triggerMap . put ( ModLoadingStage . COMMON _ SETUP , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : preinitMod ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; <nl> triggerMap . put ( ModLoadingStage . SIDED _ SETUP , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; <nl> triggerMap . put ( ModLoadingStage . ENQUEUE _ IMC , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : initMod ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; <nl> @ @ - 96 , 8 + 97 , 8 @ @ public class FMLModContainer extends ModContainer <nl> } <nl> <nl> private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> - final ModLifecycleEvent event = lifecycleEvent . buildModEvent ( this ) ; <nl> - LOGGER . debug ( LOADING , " Firing event for modid { } : { } " , this . getModId ( ) , event . getClass ( ) . getName ( ) ) ; <nl> + final Event event = lifecycleEvent . getOrBuildEvent ( this ) ; <nl> + LOGGER . info ( LOADING , " Firing event for modid { } : { } " , this . getModId ( ) , event . getClass ( ) . getName ( ) ) ; <nl> try <nl> { <nl> eventBus . post ( event ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 4f641fc . . 8da094b 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 41 , 6 + 41 , 7 @ @ import net . minecraft . world . biome . Biome ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . event . RegistryEvent ; <nl> import net . minecraftforge . event . RegistryEvent . MissingMappings ; <nl> + import net . minecraftforge . fml . LifecycleEventProvider ; <nl> import net . minecraftforge . fml . ModThreadContext ; <nl> import net . minecraftforge . fml . StartupQuery ; <nl> import net . minecraftforge . fml . common . EnhancedRuntimeException ; <nl> @ @ - 61 , 6 + 62 , 7 @ @ import java . util . List ; <nl> import java . util . Locale ; <nl> import java . util . Map ; <nl> import java . util . function . BiConsumer ; <nl> + import java . util . function . Consumer ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Collectors ; <nl> <nl> @ @ - 779 , 14 + 781 , 17 @ @ public class GameData <nl> MinecraftForge . EVENT _ BUS . post ( new RegistryEvent . NewRegistry ( ) ) ; <nl> } <nl> <nl> - public static void fireRegistryEvents ( ) <nl> - { <nl> - fireRegistryEvents ( rl - > true ) ; <nl> + public static void fireCreateRegistryEvents ( final LifecycleEventProvider lifecycleEventProvider , final Consumer < LifecycleEventProvider > eventDispatcher ) { <nl> + final RegistryEvent . NewRegistry newRegistryEvent = new RegistryEvent . NewRegistry ( ) ; <nl> + lifecycleEventProvider . setCustomEventSupplier ( ( ) - > newRegistryEvent ) ; <nl> + eventDispatcher . accept ( lifecycleEventProvider ) ; <nl> } <nl> - public static void fireRegistryEvents ( Predicate < ResourceLocation > filter ) <nl> + <nl> + <nl> + public static void fireRegistryEvents ( Predicate < ResourceLocation > filter , final LifecycleEventProvider lifecycleEventProvider , final Consumer < LifecycleEventProvider > eventDispatcher ) <nl> { <nl> List < ResourceLocation > keys = Lists . newArrayList ( RegistryManager . ACTIVE . registries . keySet ( ) ) ; <nl> - Collections . sort ( keys , ( o1 , o2 ) - > o1 . toString ( ) . compareToIgnoreCase ( o2 . toString ( ) ) ) ; <nl> + keys . sort ( ( o1 , o2 ) - > String . valueOf ( o1 ) . compareToIgnoreCase ( String . valueOf ( o2 ) ) ) ; <nl> <nl> / / Move Blocks to first , and Items to second . <nl> keys . remove ( BLOCKS ) ; <nl> @ @ - 794 , 16 + 799 , 18 @ @ public class GameData <nl> <nl> keys . add ( 0 , BLOCKS ) ; <nl> keys . add ( 1 , ITEMS ) ; <nl> - <nl> - for ( ResourceLocation rl : keys ) <nl> - { <nl> + for ( int i = 0 , keysSize = keys . size ( ) ; i < keysSize ; i + + ) { <nl> + final ResourceLocation rl = keys . get ( i ) ; <nl> if ( ! filter . test ( rl ) ) continue ; <nl> ForgeRegistry < ? > reg = RegistryManager . ACTIVE . getRegistry ( rl ) ; <nl> reg . unfreeze ( ) ; <nl> - MinecraftForge . EVENT _ BUS . post ( reg . getRegisterEvent ( rl ) ) ; <nl> + final RegistryEvent . Register < ? > registerEvent = reg . getRegisterEvent ( rl ) ; <nl> + lifecycleEventProvider . setCustomEventSupplier ( ( ) - > registerEvent ) ; <nl> + if ( i = = keysSize - 1 ) lifecycleEventProvider . changeProgression ( LifecycleEventProvider . LifecycleEvent . Progression . NEXT ) ; <nl> + eventDispatcher . accept ( lifecycleEventProvider ) ; <nl> reg . freeze ( ) ; <nl> LOGGER . info ( " { } Applying holder lookups " , rl . toString ( ) ) ; <nl> - ObjectHolderRegistry . applyObjectHolders ( key - > rl . equals ( key ) ) ; <nl> + ObjectHolderRegistry . applyObjectHolders ( rl : : equals ) ; <nl> LOGGER . info ( " { } Holder lookups applied " , rl . toString ( ) ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> index 70670bf . . f12c53c 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 73 , 12 + 73 , 3 @ @ <nl> } <nl> <nl> protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException <nl> - @ @ - 562 , 6 + 583 , 8 @ @ <nl> - { <nl> - this . field _ 146297 _ k . func _ 147108 _ a ( new GuiWinGame ( false , Runnables . doNothing ( ) ) ) ; <nl> - } <nl> - + <nl> - + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; <nl> - } <nl> - <nl> - public void func _ 146281 _ b ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 57ce4b1 . . bc2e442 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 29 , 7 + 29 , 6 @ @ import java . awt . image . BufferedImage ; <nl> import java . io . File ; <nl> import java . nio . ByteBuffer ; <nl> import java . nio . FloatBuffer ; <nl> - import java . util . Collections ; <nl> import java . util . Map ; <nl> <nl> import javax . annotation . Nonnull ; <nl> @ @ - 115 , 12 + 114 , 8 @ @ import net . minecraftforge . common . model . IModelPart ; <nl> import net . minecraftforge . common . model . ITransformation ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> - import net . minecraftforge . fml . client . GuiJava8Error ; <nl> import net . minecraftforge . fml . client . registry . ClientRegistry ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> - import net . minecraftforge . fml . common . Java8VersionException ; <nl> - import net . minecraftforge . fml . common . Loader ; <nl> - import net . minecraftforge . fml . common . ModContainer ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . lwjgl . BufferUtils ; <nl> @ @ - 314 , 17 + 309 , 6 @ @ public class ForgeHooksClient <nl> gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> } <nl> <nl> - if ( ! Loader . instance ( ) . java8 ) <nl> - { <nl> - String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; <nl> - gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> - line = I18n . format ( " fml . messages . java8warning . 2 " ) ; <nl> - gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> - splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; <nl> - updatescrollcounter + = 1 ; <nl> - updatescrollcounter % = 100 ; <nl> - } <nl> - <nl> String line = null ; <nl> switch ( status ) <nl> { <nl> @ @ - 345 , 22 + 329 , 6 @ @ public class ForgeHooksClient <nl> return splashText ; <nl> } <nl> <nl> - public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) <nl> - { <nl> - if ( ! Loader . instance ( ) . java8 ) <nl> - { <nl> - if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) <nl> - { <nl> - int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; <nl> - w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; <nl> - if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) <nl> - { <nl> - FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> public static ISound playSound ( SoundManager manager , ISound sound ) <nl> { <nl> PlaySoundEvent e = new PlaySoundEvent ( manager , sound ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 42f14ee . . b27400c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> - import java . util . Date ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 121 , 7 + 120 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> public static boolean replaceVanillaBucketModel = true ; <nl> public static boolean zoomInMissingModelTextInGui = false ; <nl> - public static long java8Reminder = 0 ; <nl> public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag <nl> public static boolean alwaysSetupTerrainOffThread = false ; / / In RenderGlobal . setupTerrain , always force the chunk render updates to be queued to the thread <nl> public static int dimensionUnloadQueueDelay = 0 ; <nl> @ @ - 322 , 12 + 320 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . setLanguageKey ( " forge . configgui . zoomInMissingModelTextInGui " ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> - prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , 0 , <nl> - " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; <nl> - java8Reminder = prop . getLong ( 0 ) ; <nl> - prop . setLanguageKey ( " forge . configgui . java8Reminder " ) ; <nl> - propOrder . add ( prop . getName ( ) ) ; <nl> - <nl> prop = config . get ( Configuration . CATEGORY _ CLIENT , " disableStairSlabCulling " , false , <nl> " Disable culling of hidden faces next to stairs and slabs . Causes extra rendering , but may fix some resource packs that exploit this vanilla mechanic . " ) ; <nl> disableStairSlabCulling = prop . getBoolean ( false ) ; <nl> @ @ - 349 , 13 + 341 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> } <nl> } <nl> <nl> - public static void updateNag ( ) <nl> - { <nl> - Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; <nl> - prop . set ( ( new Date ( ) ) . getTime ( ) ) ; <nl> - config . save ( ) ; <nl> - } <nl> - <nl> / * * <nl> * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . <nl> * This implementation uses the optional configID string to handle multiple Configurations using one event handler . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 2d8725d . . 2a2e2e1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 26 , 7 + 26 , 6 @ @ import java . lang . ref . WeakReference ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> - import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> @ @ - 81 , 7 + 80 , 6 @ @ import net . minecraft . world . WorldSettings ; <nl> import net . minecraft . world . storage . WorldSummary ; <nl> import net . minecraft . world . storage . SaveFormatOld ; <nl> import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> - import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . common . config . ConfigManager ; <nl> import net . minecraftforge . common . util . CompoundDataFixer ; <nl> @ @ - 92 , 7 + 90 , 6 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLContainerHolder ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . IFMLSidedHandler ; <nl> - import net . minecraftforge . fml . common . Java8VersionException ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderException ; <nl> import net . minecraftforge . fml . common . MetadataCollection ; <nl> @ @ - 179 , 8 + 176 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private boolean loading = true ; <nl> <nl> - private Java8VersionException j8onlymods ; <nl> - <nl> private WrongMinecraftVersionException wrongMC ; <nl> <nl> private CustomModLoadingErrorDisplayException customError ; <nl> @ @ - 240 , 10 + 235 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> dupesFound = dupes ; <nl> } <nl> - catch ( Java8VersionException j8mods ) <nl> - { <nl> - j8onlymods = j8mods ; <nl> - } <nl> catch ( MissingModsException missing ) <nl> { <nl> modsMissing = missing ; <nl> @ @ - 338 , 7 + 329 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> public boolean hasError ( ) <nl> { <nl> - return modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null | | multipleModsErrored ! = null ; <nl> + return modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | multipleModsErrored ! = null ; <nl> } <nl> <nl> / * * <nl> @ @ - 440 , 10 + 431 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; <nl> } <nl> - else if ( j8onlymods ! = null ) <nl> - { <nl> - showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; <nl> - } <nl> else if ( modsMissing ! = null ) <nl> { <nl> showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; <nl> @ @ - 467 , 14 + 454 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> else <nl> { <nl> logMissingTextureErrors ( ) ; <nl> - if ( ! Loader . instance ( ) . java8 ) <nl> - { <nl> - if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) <nl> - { <nl> - showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> - ForgeModContainer . updateNag ( ) ; <nl> - } <nl> - } <nl> } <nl> } <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> deleted file mode 100644 <nl> index d986948 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> + + + / dev / null <nl> @ @ - 1 , 136 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . fml . client ; <nl> - <nl> - import net . minecraft . client . gui . GuiButton ; <nl> - import net . minecraft . client . resources . I18n ; <nl> - import net . minecraft . util . text . TextFormatting ; <nl> - import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> - import net . minecraftforge . fml . common . Java8VersionException ; <nl> - import net . minecraftforge . fml . common . Loader ; <nl> - import net . minecraftforge . fml . common . ModContainer ; <nl> - import org . apache . logging . log4j . Level ; <nl> - <nl> - import com . google . common . collect . Lists ; <nl> - <nl> - import java . awt . Desktop ; <nl> - import java . net . URI ; <nl> - import java . util . List ; <nl> - <nl> - public class GuiJava8Error extends GuiErrorBase <nl> - { <nl> - private Java8VersionException java8VersionException ; <nl> - public GuiJava8Error ( Java8VersionException java8VersionException ) <nl> - { <nl> - this . java8VersionException = java8VersionException ; <nl> - } <nl> - <nl> - @ Override <nl> - public void initGui ( ) <nl> - { <nl> - super . initGui ( ) ; <nl> - this . buttonList . remove ( 1 ) ; <nl> - if ( java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> - { <nl> - this . buttonList . remove ( 0 ) ; <nl> - this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; <nl> - } <nl> - this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void actionPerformed ( GuiButton button ) <nl> - { <nl> - if ( button . id = = 1 ) <nl> - { <nl> - FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; <nl> - } <nl> - else if ( button . id = = 2 ) <nl> - { <nl> - try <nl> - { <nl> - Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - FMLLog . log . error ( " Problem launching browser " , e ) ; <nl> - } <nl> - } <nl> - else <nl> - { <nl> - super . actionPerformed ( button ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> - { <nl> - this . drawDefaultBackground ( ) ; <nl> - int offset = 25 ; <nl> - if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> - { <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - } <nl> - else <nl> - { <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - } <nl> - offset + = 15 ; <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 10 ; <nl> - if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> - { <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 15 ; <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 10 ; <nl> - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = 5 ; <nl> - for ( ModContainer mc : java8VersionException . getMods ( ) ) <nl> - { <nl> - offset + = 10 ; <nl> - this . drawCenteredString ( this . fontRenderer , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> - } <nl> - } <nl> - else <nl> - { <nl> - String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; <nl> - List < String > lines = Lists . newArrayList ( ) ; <nl> - for ( String line : text . split ( " \ n " ) ) <nl> - { <nl> - lines . addAll ( this . fontRenderer . listFormattedStringToWidth ( line , this . width - this . fontRenderer . FONT _ HEIGHT * 4 ) ) ; <nl> - } <nl> - <nl> - int maxWidth = 0 ; <nl> - for ( String line : lines ) <nl> - { <nl> - maxWidth = Math . max ( maxWidth , this . fontRenderer . getStringWidth ( line ) ) ; <nl> - } <nl> - <nl> - for ( String line : lines ) <nl> - { <nl> - this . drawString ( this . fontRenderer , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; <nl> - offset + = this . fontRenderer . FONT _ HEIGHT + 2 ; <nl> - } <nl> - } <nl> - super . drawScreen ( mouseX , mouseY , partialTicks ) ; <nl> - } <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> deleted file mode 100644 <nl> index 56dad33 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> + + + / dev / null <nl> @ @ - 1 , 50 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . fml . common ; <nl> - <nl> - import java . util . List ; <nl> - <nl> - public class Java8VersionException extends EnhancedRuntimeException <nl> - { <nl> - private static final long serialVersionUID = 1L ; <nl> - private final List < ModContainer > mods ; <nl> - <nl> - public Java8VersionException ( List < ModContainer > mods ) <nl> - { <nl> - super ( " Mods require Java 8 " ) ; <nl> - this . mods = mods ; <nl> - } <nl> - <nl> - @ Override <nl> - protected void printStackTrace ( WrappedPrintStream stream ) <nl> - { <nl> - stream . println ( " Mods requiring Java 8 : " ) ; <nl> - for ( ModContainer mc : mods ) <nl> - { <nl> - stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; <nl> - } <nl> - stream . println ( " " ) ; <nl> - } <nl> - <nl> - public List < ModContainer > getMods ( ) <nl> - { <nl> - return mods ; <nl> - } <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 6ffb788 . . 5a5f628 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 174 , 7 + 174 , 6 @ @ public class Loader <nl> private File forcedModFile ; <nl> private ModDiscoverer discoverer ; <nl> private ProgressBar progressBar ; <nl> - public final boolean java8 ; <nl> <nl> public static Loader instance ( ) <nl> { <nl> @ @ - 201 , 14 + 200 , 6 @ @ public class Loader <nl> <nl> private Loader ( ) <nl> { <nl> - String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; <nl> - int major = Integer . parseInt ( ver [ 1 ] ) ; <nl> - java8 = major > 7 ; <nl> - if ( ! java8 ) <nl> - { <nl> - FMLLog . log . fatal ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; <nl> - } <nl> - <nl> modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; <nl> if ( mccversion ! = null & & ! mccversion . equals ( MC _ VERSION ) ) <nl> { <nl> @ @ - 555 , 7 + 546 , 6 @ @ public class Loader <nl> ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; <nl> disableRequestedMods ( ) ; <nl> modController . distributeStateMessage ( FMLLoadEvent . class ) ; <nl> - checkJavaCompatibility ( ) ; <nl> sortModList ( ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; <nl> @ @ - 613 , 24 + 603 , 6 @ @ public class Loader <nl> modController . transition ( LoaderState . PREINITIALIZATION , false ) ; <nl> } <nl> <nl> - <nl> - private void checkJavaCompatibility ( ) <nl> - { <nl> - if ( java8 ) return ; <nl> - List < ModContainer > j8mods = Lists . newArrayList ( ) ; <nl> - for ( ModContainer mc : getActiveModList ( ) ) <nl> - { <nl> - if ( mc . getClassVersion ( ) > = 52 ) <nl> - { <nl> - j8mods . add ( mc ) ; <nl> - } <nl> - } <nl> - if ( ! j8mods . isEmpty ( ) ) <nl> - { <nl> - throw new Java8VersionException ( j8mods ) ; <nl> - } <nl> - } <nl> - <nl> public void preinitializeMods ( ) <nl> { <nl> if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> index dde3ca0 . . 8385a50 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java <nl> @ @ - 131 , 11 + 131 , 7 @ @ public class ASMModParser <nl> <nl> public void validate ( ) <nl> { <nl> - / / if ( classVersion > 50 . 0 ) <nl> - / / { <nl> - / / <nl> - / / throw new LoaderException ( new RuntimeException ( " Mod compiled for Java 7 detected " ) ) ; <nl> - / / } <nl> + <nl> } <nl> <nl> public boolean isBaseMod ( List < String > rememberedTypes ) <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 16c4ed4 . . ad8e613 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 49 , 7 + 49 , 6 @ @ forge . configgui . zombieBaseSummonChance = Zombie Summon Chance <nl> forge . configgui . stencilbits = Enable GL Stencil Bits <nl> forge . configgui . replaceBuckets = Use Forge ' s bucket model <nl> forge . configgui . forgeLightPipelineEnabled = Forge Light Pipeline Enabled <nl> - forge . configgui . java8Reminder = Java 8 Reminder timestamp <nl> forge . configgui . disableStairSlabCulling = Disable Stair / Slab culling . <nl> forge . configgui . zoomInMissingModelTextInGui = Zoom in Missing model text in the GUI <nl> forge . configgui . disableStairSlabCulling . tooltip = Enable this if you see through blocks touching stairs / slabs with your resource pack . <nl> @ @ - 167 , 16 + 166 , 6 @ @ fml . menu . modoptions = Mod Options . . . <nl> <nl> item . forge . bucketFilled . name = % s Bucket <nl> <nl> - fml . messages . java8problem = % s % sJava Update Required % s <nl> - fml . messages . java8recommended = % s % sJava Update Recommended % s <nl> - fml . messages . modslistedbelow = The mods listed below % s <nl> - fml . messages . requirejava8 = require Java 8 <nl> - fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! <nl> - fml . messages . java8warning . 2 = You need to update Java <nl> - fml . messages . javaversion = Your Java version is Java % s ( version string % s ) <nl> - fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play <nl> - fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods <nl> - fml . messages . countbadandgood = % s of % s mods have this problem <nl> fml . messages . mod . missing . dependencies = % s is missing mods it depends on . <nl> fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . <nl> fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . <nl> @ @ - 193 , 7 + 182 , 6 @ @ fml . messages . version . restriction . upper . inclusive = % s or below <nl> fml . messages . version . restriction . upper . exclusive = below % s <nl> fml . messages . version . restriction . bounded = between % s and % s <nl> <nl> - fml . button . visitjavadownloads = Oracle Java SE Downloads <nl> fml . button . continue = Continue <nl> fml . button . open . mods . folder = Open Mods Folder <nl> fml . button . open . file = Open % s

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 5d02a33 . . 6c22886 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 260 , 7 + 260 , 7 @ @ project ( ' : forge ' ) { 
 installer ' org . ow2 . asm : asm - tree : 6 . 2 ' 
 installer ' cpw . mods : modlauncher : 0 . 6 . 0 ' 
 installer ' net . minecraftforge : accesstransformers : 0 . 14 . + : shadowed ' 
 - installer ' net . minecraftforge : eventbus : 0 . 3 . + : service ' 
 + installer ' net . minecraftforge : eventbus : 0 . 6 . + : service ' 
 installer ' net . minecraftforge : forgespi : 0 . 2 . + ' 
 installer ' net . minecraftforge : coremods : 0 . 2 . + ' 
 installer ' com . electronwill . night - config : core : 3 . 4 . 2 ' 
 diff - - git a / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java 
 index bbb8dcb . . 31aa8a5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java 
 + + + b / src / main / java / net / minecraftforge / fml / AutomaticEventSubscriber . java 
 @ @ - 39 , 7 + 39 , 8 @ @ import static net . minecraftforge . fml . Logging . LOADING ; 
 
 / * * 
 * Automatic eventbus subscriber - reads { @ link net . minecraftforge . fml . common . Mod . EventBusSubscriber } 
 - * annotations and passes the class instances to the { @ link net . minecraftforge . common . MinecraftForge . EVENT _ BUS } 
 + * annotations and passes the class instances to the { @ link net . minecraftforge . fml . common . Mod . EventBusSubscriber . Bus } 
 + * defined by the annotation . Defaults to { @ link MinecraftForge # EVENT _ BUS } 
 * / 
 public class AutomaticEventSubscriber 
 { 
 @ @ - 60 , 10 + 61 , 11 @ @ public class AutomaticEventSubscriber 
 final EnumSet < Dist > sides = sidesValue . stream ( ) . map ( eh - > Dist . valueOf ( eh . getValue ( ) ) ) . 
 collect ( Collectors . toCollection ( ( ) - > EnumSet . noneOf ( Dist . class ) ) ) ; 
 final String modId = ( String ) ad . getAnnotationData ( ) . getOrDefault ( " modId " , mod . getModId ( ) ) ; 
 + final Mod . EventBusSubscriber . Bus busTarget = ( Mod . EventBusSubscriber . Bus ) ad . getAnnotationData ( ) . getOrDefault ( " bus " , Mod . EventBusSubscriber . Bus . FORGE ) ; 
 if ( Objects . equals ( mod . getModId ( ) , modId ) & & sides . contains ( FMLEnvironment . dist ) ) { 
 try 
 { 
 - MinecraftForge . EVENT _ BUS . register ( Class . forName ( ad . getClassType ( ) . getClassName ( ) , true , loader ) ) ; 
 + busTarget . bus ( ) . get ( ) . register ( Class . forName ( ad . getClassType ( ) . getClassName ( ) , true , loader ) ) ; 
 } 
 catch ( ClassNotFoundException e ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java b / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java 
 index e6bea2c . . fdedfc6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / LifecycleEventProvider . java 
 @ @ - 19 , 40 + 19 , 72 @ @ 
 
 package net . minecraftforge . fml ; 
 
 + import net . minecraftforge . eventbus . api . Event ; 
 import net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent ; 
 import net . minecraftforge . fml . javafmlmod . FMLModContainer ; 
 import net . minecraftforge . forgespi . language . ILifecycleEvent ; 
 
 import java . util . List ; 
 + import java . util . function . BiConsumer ; 
 import java . util . function . Consumer ; 
 + import java . util . function . Function ; 
 import java . util . function . Supplier ; 
 
 public enum LifecycleEventProvider 
 { 
 CONSTRUCT ( ( ) - > new LifecycleEvent ( ModLoadingStage . CONSTRUCT ) ) , 
 + CREATE _ REGISTRIES ( ( ) - > new LifecycleEvent ( ModLoadingStage . CREATE _ REGISTRIES ) , ModList . inlineDispatcher ) , 
 + LOAD _ REGISTRIES ( ( ) - > new LifecycleEvent ( ModLoadingStage . LOAD _ REGISTRIES , LifecycleEvent . Progression . STAY ) , ModList . inlineDispatcher ) , 
 SETUP ( ( ) - > new LifecycleEvent ( ModLoadingStage . COMMON _ SETUP ) ) , 
 SIDED _ SETUP ( ( ) - > new LifecycleEvent ( ModLoadingStage . SIDED _ SETUP ) ) , 
 ENQUEUE _ IMC ( ( ) - > new LifecycleEvent ( ModLoadingStage . ENQUEUE _ IMC ) ) , 
 PROCESS _ IMC ( ( ) - > new LifecycleEvent ( ModLoadingStage . PROCESS _ IMC ) ) , 
 COMPLETE ( ( ) - > new LifecycleEvent ( ModLoadingStage . COMPLETE ) ) ; 
 
 - public void dispatch ( Consumer < List < ModLoadingException > > errorHandler ) { 
 - ModList . get ( ) . dispatchLifeCycleEvent ( this . event . get ( ) , errorHandler ) ; 
 - } 
 private final Supplier < ? extends LifecycleEvent > event ; 
 + private final BiConsumer < LifecycleEvent , Consumer < List < ModLoadingException > > > eventDispatcher ; 
 + private Supplier < Event > customEventSupplier ; 
 + private LifecycleEvent . Progression progression = LifecycleEvent . Progression . NEXT ; 
 
 LifecycleEventProvider ( Supplier < ? extends LifecycleEvent > e ) 
 { 
 - event = e ; 
 + this ( e , ModList . parallelDispatcher ) ; 
 + } 
 + 
 + LifecycleEventProvider ( Supplier < ? extends LifecycleEvent > e , BiConsumer < LifecycleEvent , Consumer < List < ModLoadingException > > > eventDispatcher ) 
 + { 
 + this . event = e ; 
 + this . eventDispatcher = eventDispatcher ; 
 + } 
 + 
 + public void setCustomEventSupplier ( Supplier < Event > eventSupplier ) { 
 + this . customEventSupplier = eventSupplier ; 
 + } 
 + 
 + public void changeProgression ( LifecycleEvent . Progression progression ) { 
 + this . progression = progression ; 
 + } 
 + 
 + public void dispatch ( Consumer < List < ModLoadingException > > errorHandler ) { 
 + final LifecycleEvent lifecycleEvent = this . event . get ( ) ; 
 + lifecycleEvent . setCustomEventSupplier ( this . customEventSupplier ) ; 
 + lifecycleEvent . changeProgression ( this . progression ) ; 
 + this . eventDispatcher . accept ( lifecycleEvent , errorHandler ) ; 
 } 
 
 
 public static class LifecycleEvent implements ILifecycleEvent < LifecycleEvent > { 
 private final ModLoadingStage stage ; 
 - 
 - public LifecycleEvent ( ModLoadingStage stage ) 
 + private Supplier < Event > customEventSupplier ; 
 + private Progression progression ; 
 + LifecycleEvent ( final ModLoadingStage stage ) 
 { 
 + this ( stage , Progression . NEXT ) ; 
 + } 
 + 
 + LifecycleEvent ( final ModLoadingStage stage , final Progression progression ) { 
 this . stage = stage ; 
 + this . progression = progression ; 
 } 
 
 public ModLoadingStage fromStage ( ) 
 @ @ - 62 , 12 + 94 , 42 @ @ public enum LifecycleEventProvider 
 
 public ModLoadingStage toStage ( ) 
 { 
 - return ModLoadingStage . values ( ) [ this . stage . ordinal ( ) + 1 ] ; 
 + return progression . apply ( this . stage ) ; 
 + } 
 + 
 + public void setCustomEventSupplier ( Supplier < Event > customEventSupplier ) { 
 + this . customEventSupplier = customEventSupplier ; 
 } 
 
 - public ModLifecycleEvent buildModEvent ( FMLModContainer fmlModContainer ) 
 + public void changeProgression ( Progression p ) { 
 + this . progression = p ; 
 + } 
 + 
 + public Event getOrBuildEvent ( FMLModContainer fmlModContainer ) 
 { 
 + if ( customEventSupplier ! = null ) return customEventSupplier . get ( ) ; 
 + 
 return stage . getModEvent ( fmlModContainer ) ; 
 } 
 + 
 + @ Override 
 + public String toString ( ) { 
 + return " LifecycleEvent : " + stage ; 
 + } 
 + 
 + public enum Progression { 
 + NEXT ( ( current ) - > ModLoadingStage . values ( ) [ current . ordinal ( ) + 1 ] ) , 
 + STAY ( Function . identity ( ) ) ; 
 + 
 + private final Function < ModLoadingStage , ModLoadingStage > edge ; 
 + 
 + Progression ( Function < ModLoadingStage , ModLoadingStage > edge ) { 
 + this . edge = edge ; 
 + } 
 + 
 + public ModLoadingStage apply ( ModLoadingStage in ) { 
 + return this . edge . apply ( in ) ; 
 + } 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java 
 index 6af85bc . . ff5f04a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModList . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import java . util . Optional ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ForkJoinPool ; 
 import java . util . concurrent . FutureTask ; 
 + import java . util . function . BiConsumer ; 
 import java . util . function . Consumer ; 
 import java . util . function . Function ; 
 import java . util . stream . Collectors ; 
 @ @ - 74 , 6 + 75 , 10 @ @ public class ModList 
 return INSTANCE ; 
 } 
 
 + static BiConsumer < LifecycleEventProvider . LifecycleEvent , Consumer < List < ModLoadingException > > > inlineDispatcher = ( event , errors ) - > ModList . get ( ) . dispatchSynchronousEvent ( event , errors ) ; 
 + 
 + static BiConsumer < LifecycleEventProvider . LifecycleEvent , Consumer < List < ModLoadingException > > > parallelDispatcher = ( event , errors ) - > ModList . get ( ) . dispatchParallelEvent ( event , errors ) ; 
 + 
 public static ModList get ( ) { 
 return INSTANCE ; 
 } 
 @ @ - 83 , 13 + 88 , 19 @ @ public class ModList 
 return modFiles ; 
 } 
 
 - 
 public ModFileInfo getModFileById ( String modid ) 
 { 
 return this . fileById . get ( modid ) ; 
 } 
 
 - public void dispatchLifeCycleEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { 
 + private void dispatchSynchronousEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { 
 + LOGGER . info ( LOADING , " Dispatching synchronous event { } " , lifecycleEvent ) ; 
 + FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; 
 + this . mods . forEach ( m - > m . transitionState ( lifecycleEvent , errorHandler ) ) ; 
 + FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; 
 + } 
 + private void dispatchParallelEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent , final Consumer < List < ModLoadingException > > errorHandler ) { 
 + LOGGER . info ( LOADING , " Dispatching parallel event { } " , lifecycleEvent ) ; 
 FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; 
 DeferredWorkQueue . clear ( ) ; 
 try 
 @ @ - 104 , 7 + 115 , 7 @ @ public class ModList 
 FMLLoader . getLanguageLoadingProvider ( ) . forEach ( lp - > lp . consumeLifecycleEvent ( ( ) - > lifecycleEvent ) ) ; 
 } 
 
 - public void setLoadedMods ( final List < ModContainer > modContainers ) 
 + void setLoadedMods ( final List < ModContainer > modContainers ) 
 { 
 this . mods = modContainers ; 
 this . indexedMods = modContainers . stream ( ) . collect ( Collectors . toMap ( ModContainer : : getModId , Function . identity ( ) ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 index 662c245 . . 8818b1a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 @ @ - 123 , 10 + 123 , 10 @ @ public class ModLoader 
 } 
 modList . setLoadedMods ( modContainerStream . collect ( Collectors . toList ( ) ) ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . CONSTRUCT ) ; 
 - GameData . fireCreateRegistryEvents ( ) ; 
 + GameData . fireCreateRegistryEvents ( LifecycleEventProvider . CREATE _ REGISTRIES , this : : dispatchAndHandleError ) ; 
 ObjectHolderRegistry . findObjectHolders ( ) ; 
 CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; 
 - GameData . fireRegistryEvents ( ) ; 
 + GameData . fireRegistryEvents ( rl - > true , LifecycleEventProvider . LOAD _ REGISTRIES , this : : dispatchAndHandleError ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . SETUP ) ; 
 DistExecutor . runWhenOn ( Dist . CLIENT , ModLoader : : fireClientEvents ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . SIDED _ SETUP ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingStage . java b / src / main / java / net / minecraftforge / fml / ModLoadingStage . java 
 index 06dae55 . . f055752 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoadingStage . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoadingStage . java 
 @ @ - 29 , 13 + 29 , 14 @ @ public enum ModLoadingStage 
 ERROR ( null ) , 
 VALIDATE ( null ) , 
 CONSTRUCT ( null ) , 
 + CREATE _ REGISTRIES ( null ) , 
 + LOAD _ REGISTRIES ( null ) , 
 COMMON _ SETUP ( ( ) - > FMLCommonSetupEvent : : new ) , 
 SIDED _ SETUP ( SidedProvider . SIDED _ SETUP _ EVENT : : get ) , 
 ENQUEUE _ IMC ( ( ) - > InterModEnqueueEvent : : new ) , 
 PROCESS _ IMC ( ( ) - > InterModProcessEvent : : new ) , 
 COMPLETE ( ( ) - > FMLLoadCompleteEvent : : new ) , 
 DONE ( null ) ; 
 - 
 private final Supplier < Function < ModContainer , ModLifecycleEvent > > modLifecycleEventFunction ; 
 
 ModLoadingStage ( Supplier < Function < ModContainer , ModLifecycleEvent > > modLifecycleEventFunction ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index 37cfbdc . . 150a590 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 23 , 26 + 23 , 19 @ @ import java . lang . annotation . ElementType ; 
 import java . lang . annotation . Retention ; 
 import java . lang . annotation . RetentionPolicy ; 
 import java . lang . annotation . Target ; 
 + import java . util . function . Supplier ; 
 
 import net . minecraftforge . api . distmarker . Dist ; 
 - import net . minecraftforge . fml . event . lifecycle . FMLFingerprintViolationEvent ; 
 - import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; 
 - import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; 
 - import net . minecraftforge . fml . event . server . FMLServerAboutToStartEvent ; 
 - import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; 
 - import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; 
 - import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; 
 - import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . eventbus . api . IEventBus ; 
 import net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent ; 
 - import net . minecraftforge . fml . event . lifecycle . InterModEnqueueEvent ; 
 - import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; 
 
 / * * 
 * This defines a Mod to FML . 
 * Any class found with this annotation applied will be loaded as a Mod . The instance that is loaded will 
 * represent the mod to other Mods in the system . It will be sent various subclasses of { @ link ModLifecycleEvent } 
 - * at pre - defined times during the loading of the game , based on where you have applied the { @ link EventHandler } 
 - * annotation . 
 + * at pre - defined times during the loading of the game . 
 * / 
 @ Retention ( RetentionPolicy . RUNTIME ) 
 @ Target ( ElementType . TYPE ) 
 @ @ - 56 , 63 + 49 , 60 @ @ public @ interface Mod 
 * By default , you will have a resource domain that matches the modid . All these uses require that constraints are imposed on the format of the modid . 
 * / 
 String value ( ) ; 
 - / * * 
 - * Marks the associated method as handling an FML lifecycle event . 
 - * The method must have a single parameter , one of the following types . This annotation 
 - * replaces the multiple different annotations that previously were used . 
 - * 
 - * Current event classes . This first section is standard lifecycle events . They are dispatched 
 - * at various phases as the game starts . Each event should have information useful to that 
 - * phase of the lifecycle . They are fired in this order . 
 - * 
 - * These suggestions are mostly just suggestions on what to do in each event . 
 - * < ul > 
 - * < li > { @ link FMLCommonSetupEvent } : Run before anything else . Read your config , create blocks , 
 - * items , etc , and register them with the { @ link GameRegistry } . < / li > 
 - * < li > { @ link InterModEnqueueEvent } : Do your mod setup . Build whatever data structures you care about . Register recipes , 
 - * send { @ link FMLInterModComms } messages to other mods . < / li > 
 - * < li > { @ link InterModProcessEvent } : Handle interaction with other mods , complete your setup based on this . < / li > 
 - * < / ul > 
 - * < p > These are the server lifecycle events . They are fired whenever a server is running , or about to run . Each time a server 
 - * starts they will be fired in this sequence . 
 - * < ul > 
 - * < li > { @ link FMLServerAboutToStartEvent } : Use if you need to handle something before the server has even been created . < / li > 
 - * < li > { @ link FMLServerStartingEvent } : Do stuff you need to do to set up the server . register commands , tweak the server . < / li > 
 - * < li > { @ link FMLServerStartedEvent } : Do what you need to with the running server . < / li > 
 - * < li > { @ link FMLServerStoppingEvent } : Do what you need to before the server has started it ' s shutdown sequence . < / li > 
 - * < li > { @ link FMLServerStoppedEvent } : Do whatever cleanup you need once the server has shutdown . Generally only useful 
 - * on the integrated server . < / li > 
 - * < / ul > 
 - * The second set of events are more specialized , for receiving notification of specific 
 - * information . 
 - * < ul > 
 - * < li > { @ link FMLFingerprintViolationEvent } : Sent just before { @ link FMLCommonSetupEvent } 
 - * if something is wrong with your mod signature < / li > 
 - * < li > { @ link IMCEvent } : Sent just after { @ link InterModEnqueueEvent } if you have IMC messages waiting 
 - * from other mods < / li > 
 - * < / ul > 
 - * 
 - * @ author cpw 
 - * 
 - * / 
 - @ Deprecated 
 - @ Retention ( RetentionPolicy . RUNTIME ) 
 - @ Target ( ElementType . METHOD ) 
 - @ interface EventHandler { } 
 
 / * * 
 - * A class which will be subscribed to { @ link net . minecraftforge . common . MinecraftForge . EVENT _ BUS } at mod construction time . 
 + * Annotate a class which will be subscribed to an Event Bus at mod construction time . 
 + * Defaults to subscribing the current modid to the { @ link MinecraftForge # EVENT _ BUS } 
 + * on both sides . 
 + * 
 + * @ see Bus 
 * / 
 @ Retention ( RetentionPolicy . RUNTIME ) 
 @ Target ( ElementType . TYPE ) 
 @ interface EventBusSubscriber { 
 + / * * 
 + * Specify targets to load this event subscriber on . Can be used to avoid loading Client specific events 
 + * on a dedicated server , for example . 
 + * 
 + * @ return an array of Dist to load this event subscriber on 
 + * / 
 Dist [ ] value ( ) default { Dist . CLIENT , Dist . DEDICATED _ SERVER } ; 
 
 / * * 
 - * Optional value , only nessasary if tis annotation is not on the same class that has a @ Mod annotation . 
 + * Optional value , only necessary if this annotation is not on the same class that has a @ Mod annotation . 
 * Needed to prevent early classloading of classes not owned by your mod . 
 - * @ return 
 + * @ return a modid 
 * / 
 String modid ( ) default " " ; 
 + 
 + / * * 
 + * Specify an alternative bus to listen to 
 + * 
 + * @ return the bus you wish to listen to 
 + * / 
 + Bus bus ( ) default Bus . FORGE ; 
 + 
 + enum Bus { 
 + / * * 
 + * The main Forge Event Bus . 
 + * @ see MinecraftForge # EVENT _ BUS 
 + * / 
 + FORGE ( ( ) - > MinecraftForge . EVENT _ BUS ) , 
 + / * * 
 + * The mod specific Event bus . 
 + * @ see FMLModLoadingContext # getModEventBus ( ) 
 + * / 
 + MOD ( ( ) - > FMLModLoadingContext . get ( ) . getModEventBus ( ) ) ; 
 + 
 + private final Supplier < IEventBus > busSupplier ; 
 + 
 + Bus ( final Supplier < IEventBus > eventBusSupplier ) { 
 + this . busSupplier = eventBusSupplier ; 
 + } 
 + 
 + public Supplier < IEventBus > bus ( ) { 
 + return busSupplier ; 
 + } 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 index 5b431be . . 2630fb8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 @ @ - 29 , 7 + 29 , 6 @ @ import net . minecraftforge . fml . ModContainer ; 
 import net . minecraftforge . fml . ModLoadingException ; 
 import net . minecraftforge . fml . ModLoadingStage ; 
 import net . minecraftforge . fml . ModThreadContext ; 
 - import net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent ; 
 import net . minecraftforge . forgespi . language . IModInfo ; 
 import net . minecraftforge . forgespi . language . ModFileScanData ; 
 
 @ @ - 54 , 6 + 53 , 8 @ @ public class FMLModContainer extends ModContainer 
 LOGGER . debug ( " Creating FMLModContainer instance for { } with classLoader { } & { } " , className , modClassLoader , getClass ( ) . getClassLoader ( ) ) ; 
 this . scanResults = modFileScanResults ; 
 triggerMap . put ( ModLoadingStage . CONSTRUCT , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : constructMod ) . andThen ( this : : afterEvent ) ) ; 
 + triggerMap . put ( ModLoadingStage . CREATE _ REGISTRIES , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; 
 + triggerMap . put ( ModLoadingStage . LOAD _ REGISTRIES , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; 
 triggerMap . put ( ModLoadingStage . COMMON _ SETUP , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : preinitMod ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; 
 triggerMap . put ( ModLoadingStage . SIDED _ SETUP , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; 
 triggerMap . put ( ModLoadingStage . ENQUEUE _ IMC , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : initMod ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; 
 @ @ - 96 , 8 + 97 , 8 @ @ public class FMLModContainer extends ModContainer 
 } 
 
 private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 - final ModLifecycleEvent event = lifecycleEvent . buildModEvent ( this ) ; 
 - LOGGER . debug ( LOADING , " Firing event for modid { } : { } " , this . getModId ( ) , event . getClass ( ) . getName ( ) ) ; 
 + final Event event = lifecycleEvent . getOrBuildEvent ( this ) ; 
 + LOGGER . info ( LOADING , " Firing event for modid { } : { } " , this . getModId ( ) , event . getClass ( ) . getName ( ) ) ; 
 try 
 { 
 eventBus . post ( event ) ; 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 4f641fc . . 8da094b 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 41 , 6 + 41 , 7 @ @ import net . minecraft . world . biome . Biome ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . event . RegistryEvent ; 
 import net . minecraftforge . event . RegistryEvent . MissingMappings ; 
 + import net . minecraftforge . fml . LifecycleEventProvider ; 
 import net . minecraftforge . fml . ModThreadContext ; 
 import net . minecraftforge . fml . StartupQuery ; 
 import net . minecraftforge . fml . common . EnhancedRuntimeException ; 
 @ @ - 61 , 6 + 62 , 7 @ @ import java . util . List ; 
 import java . util . Locale ; 
 import java . util . Map ; 
 import java . util . function . BiConsumer ; 
 + import java . util . function . Consumer ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Collectors ; 
 
 @ @ - 779 , 14 + 781 , 17 @ @ public class GameData 
 MinecraftForge . EVENT _ BUS . post ( new RegistryEvent . NewRegistry ( ) ) ; 
 } 
 
 - public static void fireRegistryEvents ( ) 
 - { 
 - fireRegistryEvents ( rl - > true ) ; 
 + public static void fireCreateRegistryEvents ( final LifecycleEventProvider lifecycleEventProvider , final Consumer < LifecycleEventProvider > eventDispatcher ) { 
 + final RegistryEvent . NewRegistry newRegistryEvent = new RegistryEvent . NewRegistry ( ) ; 
 + lifecycleEventProvider . setCustomEventSupplier ( ( ) - > newRegistryEvent ) ; 
 + eventDispatcher . accept ( lifecycleEventProvider ) ; 
 } 
 - public static void fireRegistryEvents ( Predicate < ResourceLocation > filter ) 
 + 
 + 
 + public static void fireRegistryEvents ( Predicate < ResourceLocation > filter , final LifecycleEventProvider lifecycleEventProvider , final Consumer < LifecycleEventProvider > eventDispatcher ) 
 { 
 List < ResourceLocation > keys = Lists . newArrayList ( RegistryManager . ACTIVE . registries . keySet ( ) ) ; 
 - Collections . sort ( keys , ( o1 , o2 ) - > o1 . toString ( ) . compareToIgnoreCase ( o2 . toString ( ) ) ) ; 
 + keys . sort ( ( o1 , o2 ) - > String . valueOf ( o1 ) . compareToIgnoreCase ( String . valueOf ( o2 ) ) ) ; 
 
 / / Move Blocks to first , and Items to second . 
 keys . remove ( BLOCKS ) ; 
 @ @ - 794 , 16 + 799 , 18 @ @ public class GameData 
 
 keys . add ( 0 , BLOCKS ) ; 
 keys . add ( 1 , ITEMS ) ; 
 - 
 - for ( ResourceLocation rl : keys ) 
 - { 
 + for ( int i = 0 , keysSize = keys . size ( ) ; i < keysSize ; i + + ) { 
 + final ResourceLocation rl = keys . get ( i ) ; 
 if ( ! filter . test ( rl ) ) continue ; 
 ForgeRegistry < ? > reg = RegistryManager . ACTIVE . getRegistry ( rl ) ; 
 reg . unfreeze ( ) ; 
 - MinecraftForge . EVENT _ BUS . post ( reg . getRegisterEvent ( rl ) ) ; 
 + final RegistryEvent . Register < ? > registerEvent = reg . getRegisterEvent ( rl ) ; 
 + lifecycleEventProvider . setCustomEventSupplier ( ( ) - > registerEvent ) ; 
 + if ( i = = keysSize - 1 ) lifecycleEventProvider . changeProgression ( LifecycleEventProvider . LifecycleEvent . Progression . NEXT ) ; 
 + eventDispatcher . accept ( lifecycleEventProvider ) ; 
 reg . freeze ( ) ; 
 LOGGER . info ( " { } Applying holder lookups " , rl . toString ( ) ) ; 
 - ObjectHolderRegistry . applyObjectHolders ( key - > rl . equals ( key ) ) ; 
 + ObjectHolderRegistry . applyObjectHolders ( rl : : equals ) ; 
 LOGGER . info ( " { } Holder lookups applied " , rl . toString ( ) ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 index 70670bf . . f12c53c 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 73 , 12 + 73 , 3 @ @ 
 } 
 
 protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException 
 - @ @ - 562 , 6 + 583 , 8 @ @ 
 - { 
 - this . field _ 146297 _ k . func _ 147108 _ a ( new GuiWinGame ( false , Runnables . doNothing ( ) ) ) ; 
 - } 
 - + 
 - + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; 
 - } 
 - 
 - public void func _ 146281 _ b ( ) 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 57ce4b1 . . bc2e442 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 29 , 7 + 29 , 6 @ @ import java . awt . image . BufferedImage ; 
 import java . io . File ; 
 import java . nio . ByteBuffer ; 
 import java . nio . FloatBuffer ; 
 - import java . util . Collections ; 
 import java . util . Map ; 
 
 import javax . annotation . Nonnull ; 
 @ @ - 115 , 12 + 114 , 8 @ @ import net . minecraftforge . common . model . IModelPart ; 
 import net . minecraftforge . common . model . ITransformation ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 - import net . minecraftforge . fml . client . GuiJava8Error ; 
 import net . minecraftforge . fml . client . registry . ClientRegistry ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 - import net . minecraftforge . fml . common . Java8VersionException ; 
 - import net . minecraftforge . fml . common . Loader ; 
 - import net . minecraftforge . fml . common . ModContainer ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 import org . lwjgl . BufferUtils ; 
 @ @ - 314 , 17 + 309 , 6 @ @ public class ForgeHooksClient 
 gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 } 
 
 - if ( ! Loader . instance ( ) . java8 ) 
 - { 
 - String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; 
 - gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 - line = I18n . format ( " fml . messages . java8warning . 2 " ) ; 
 - gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 - splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; 
 - updatescrollcounter + = 1 ; 
 - updatescrollcounter % = 100 ; 
 - } 
 - 
 String line = null ; 
 switch ( status ) 
 { 
 @ @ - 345 , 22 + 329 , 6 @ @ public class ForgeHooksClient 
 return splashText ; 
 } 
 
 - public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) 
 - { 
 - if ( ! Loader . instance ( ) . java8 ) 
 - { 
 - if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) 
 - { 
 - int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; 
 - w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; 
 - if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) 
 - { 
 - FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 - } 
 - } 
 - } 
 - } 
 - 
 public static ISound playSound ( SoundManager manager , ISound sound ) 
 { 
 PlaySoundEvent e = new PlaySoundEvent ( manager , sound ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 42f14ee . . b27400c 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 36 , 7 + 36 , 6 @ @ import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 - import java . util . Date ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 121 , 7 + 120 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean forgeLightPipelineEnabled = true ; 
 public static boolean replaceVanillaBucketModel = true ; 
 public static boolean zoomInMissingModelTextInGui = false ; 
 - public static long java8Reminder = 0 ; 
 public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag 
 public static boolean alwaysSetupTerrainOffThread = false ; / / In RenderGlobal . setupTerrain , always force the chunk render updates to be queued to the thread 
 public static int dimensionUnloadQueueDelay = 0 ; 
 @ @ - 322 , 12 + 320 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . setLanguageKey ( " forge . configgui . zoomInMissingModelTextInGui " ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 - prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , 0 , 
 - " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; 
 - java8Reminder = prop . getLong ( 0 ) ; 
 - prop . setLanguageKey ( " forge . configgui . java8Reminder " ) ; 
 - propOrder . add ( prop . getName ( ) ) ; 
 - 
 prop = config . get ( Configuration . CATEGORY _ CLIENT , " disableStairSlabCulling " , false , 
 " Disable culling of hidden faces next to stairs and slabs . Causes extra rendering , but may fix some resource packs that exploit this vanilla mechanic . " ) ; 
 disableStairSlabCulling = prop . getBoolean ( false ) ; 
 @ @ - 349 , 13 + 341 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 } 
 } 
 
 - public static void updateNag ( ) 
 - { 
 - Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; 
 - prop . set ( ( new Date ( ) ) . getTime ( ) ) ; 
 - config . save ( ) ; 
 - } 
 - 
 / * * 
 * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . 
 * This implementation uses the optional configID string to handle multiple Configurations using one event handler . 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 2d8725d . . 2a2e2e1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 26 , 7 + 26 , 6 @ @ import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 - import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 @ @ - 81 , 7 + 80 , 6 @ @ import net . minecraft . world . WorldSettings ; 
 import net . minecraft . world . storage . WorldSummary ; 
 import net . minecraft . world . storage . SaveFormatOld ; 
 import net . minecraftforge . client . event . ModelRegistryEvent ; 
 - import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . common . config . ConfigManager ; 
 import net . minecraftforge . common . util . CompoundDataFixer ; 
 @ @ - 92 , 7 + 90 , 6 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLContainerHolder ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . IFMLSidedHandler ; 
 - import net . minecraftforge . fml . common . Java8VersionException ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderException ; 
 import net . minecraftforge . fml . common . MetadataCollection ; 
 @ @ - 179 , 8 + 176 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private boolean loading = true ; 
 
 - private Java8VersionException j8onlymods ; 
 - 
 private WrongMinecraftVersionException wrongMC ; 
 
 private CustomModLoadingErrorDisplayException customError ; 
 @ @ - 240 , 10 + 235 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 dupesFound = dupes ; 
 } 
 - catch ( Java8VersionException j8mods ) 
 - { 
 - j8onlymods = j8mods ; 
 - } 
 catch ( MissingModsException missing ) 
 { 
 modsMissing = missing ; 
 @ @ - 338 , 7 + 329 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 public boolean hasError ( ) 
 { 
 - return modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null | | multipleModsErrored ! = null ; 
 + return modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | multipleModsErrored ! = null ; 
 } 
 
 / * * 
 @ @ - 440 , 10 + 431 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; 
 } 
 - else if ( j8onlymods ! = null ) 
 - { 
 - showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; 
 - } 
 else if ( modsMissing ! = null ) 
 { 
 showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; 
 @ @ - 467 , 14 + 454 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 else 
 { 
 logMissingTextureErrors ( ) ; 
 - if ( ! Loader . instance ( ) . java8 ) 
 - { 
 - if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) 
 - { 
 - showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 - ForgeModContainer . updateNag ( ) ; 
 - } 
 - } 
 } 
 } 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 deleted file mode 100644 
 index d986948 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 + + + / dev / null 
 @ @ - 1 , 136 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . fml . client ; 
 - 
 - import net . minecraft . client . gui . GuiButton ; 
 - import net . minecraft . client . resources . I18n ; 
 - import net . minecraft . util . text . TextFormatting ; 
 - import net . minecraftforge . fml . common . FMLCommonHandler ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 - import net . minecraftforge . fml . common . Java8VersionException ; 
 - import net . minecraftforge . fml . common . Loader ; 
 - import net . minecraftforge . fml . common . ModContainer ; 
 - import org . apache . logging . log4j . Level ; 
 - 
 - import com . google . common . collect . Lists ; 
 - 
 - import java . awt . Desktop ; 
 - import java . net . URI ; 
 - import java . util . List ; 
 - 
 - public class GuiJava8Error extends GuiErrorBase 
 - { 
 - private Java8VersionException java8VersionException ; 
 - public GuiJava8Error ( Java8VersionException java8VersionException ) 
 - { 
 - this . java8VersionException = java8VersionException ; 
 - } 
 - 
 - @ Override 
 - public void initGui ( ) 
 - { 
 - super . initGui ( ) ; 
 - this . buttonList . remove ( 1 ) ; 
 - if ( java8VersionException . getMods ( ) . isEmpty ( ) ) 
 - { 
 - this . buttonList . remove ( 0 ) ; 
 - this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; 
 - } 
 - this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; 
 - } 
 - 
 - @ Override 
 - protected void actionPerformed ( GuiButton button ) 
 - { 
 - if ( button . id = = 1 ) 
 - { 
 - FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; 
 - } 
 - else if ( button . id = = 2 ) 
 - { 
 - try 
 - { 
 - Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - FMLLog . log . error ( " Problem launching browser " , e ) ; 
 - } 
 - } 
 - else 
 - { 
 - super . actionPerformed ( button ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 - { 
 - this . drawDefaultBackground ( ) ; 
 - int offset = 25 ; 
 - if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 - { 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - } 
 - else 
 - { 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - } 
 - offset + = 15 ; 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 10 ; 
 - if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 - { 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 15 ; 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 10 ; 
 - this . drawCenteredString ( this . fontRenderer , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 - offset + = 5 ; 
 - for ( ModContainer mc : java8VersionException . getMods ( ) ) 
 - { 
 - offset + = 10 ; 
 - this . drawCenteredString ( this . fontRenderer , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 - } 
 - } 
 - else 
 - { 
 - String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; 
 - List < String > lines = Lists . newArrayList ( ) ; 
 - for ( String line : text . split ( " \ n " ) ) 
 - { 
 - lines . addAll ( this . fontRenderer . listFormattedStringToWidth ( line , this . width - this . fontRenderer . FONT _ HEIGHT * 4 ) ) ; 
 - } 
 - 
 - int maxWidth = 0 ; 
 - for ( String line : lines ) 
 - { 
 - maxWidth = Math . max ( maxWidth , this . fontRenderer . getStringWidth ( line ) ) ; 
 - } 
 - 
 - for ( String line : lines ) 
 - { 
 - this . drawString ( this . fontRenderer , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; 
 - offset + = this . fontRenderer . FONT _ HEIGHT + 2 ; 
 - } 
 - } 
 - super . drawScreen ( mouseX , mouseY , partialTicks ) ; 
 - } 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 deleted file mode 100644 
 index 56dad33 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 + + + / dev / null 
 @ @ - 1 , 50 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . fml . common ; 
 - 
 - import java . util . List ; 
 - 
 - public class Java8VersionException extends EnhancedRuntimeException 
 - { 
 - private static final long serialVersionUID = 1L ; 
 - private final List < ModContainer > mods ; 
 - 
 - public Java8VersionException ( List < ModContainer > mods ) 
 - { 
 - super ( " Mods require Java 8 " ) ; 
 - this . mods = mods ; 
 - } 
 - 
 - @ Override 
 - protected void printStackTrace ( WrappedPrintStream stream ) 
 - { 
 - stream . println ( " Mods requiring Java 8 : " ) ; 
 - for ( ModContainer mc : mods ) 
 - { 
 - stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; 
 - } 
 - stream . println ( " " ) ; 
 - } 
 - 
 - public List < ModContainer > getMods ( ) 
 - { 
 - return mods ; 
 - } 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 6ffb788 . . 5a5f628 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 174 , 7 + 174 , 6 @ @ public class Loader 
 private File forcedModFile ; 
 private ModDiscoverer discoverer ; 
 private ProgressBar progressBar ; 
 - public final boolean java8 ; 
 
 public static Loader instance ( ) 
 { 
 @ @ - 201 , 14 + 200 , 6 @ @ public class Loader 
 
 private Loader ( ) 
 { 
 - String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; 
 - int major = Integer . parseInt ( ver [ 1 ] ) ; 
 - java8 = major > 7 ; 
 - if ( ! java8 ) 
 - { 
 - FMLLog . log . fatal ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; 
 - } 
 - 
 modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; 
 if ( mccversion ! = null & & ! mccversion . equals ( MC _ VERSION ) ) 
 { 
 @ @ - 555 , 7 + 546 , 6 @ @ public class Loader 
 ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; 
 disableRequestedMods ( ) ; 
 modController . distributeStateMessage ( FMLLoadEvent . class ) ; 
 - checkJavaCompatibility ( ) ; 
 sortModList ( ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; 
 @ @ - 613 , 24 + 603 , 6 @ @ public class Loader 
 modController . transition ( LoaderState . PREINITIALIZATION , false ) ; 
 } 
 
 - 
 - private void checkJavaCompatibility ( ) 
 - { 
 - if ( java8 ) return ; 
 - List < ModContainer > j8mods = Lists . newArrayList ( ) ; 
 - for ( ModContainer mc : getActiveModList ( ) ) 
 - { 
 - if ( mc . getClassVersion ( ) > = 52 ) 
 - { 
 - j8mods . add ( mc ) ; 
 - } 
 - } 
 - if ( ! j8mods . isEmpty ( ) ) 
 - { 
 - throw new Java8VersionException ( j8mods ) ; 
 - } 
 - } 
 - 
 public void preinitializeMods ( ) 
 { 
 if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 index dde3ca0 . . 8385a50 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / asm / ASMModParser . java 
 @ @ - 131 , 11 + 131 , 7 @ @ public class ASMModParser 
 
 public void validate ( ) 
 { 
 - / / if ( classVersion > 50 . 0 ) 
 - / / { 
 - / / 
 - / / throw new LoaderException ( new RuntimeException ( " Mod compiled for Java 7 detected " ) ) ; 
 - / / } 
 + 
 } 
 
 public boolean isBaseMod ( List < String > rememberedTypes ) 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 16c4ed4 . . ad8e613 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 49 , 7 + 49 , 6 @ @ forge . configgui . zombieBaseSummonChance = Zombie Summon Chance 
 forge . configgui . stencilbits = Enable GL Stencil Bits 
 forge . configgui . replaceBuckets = Use Forge ' s bucket model 
 forge . configgui . forgeLightPipelineEnabled = Forge Light Pipeline Enabled 
 - forge . configgui . java8Reminder = Java 8 Reminder timestamp 
 forge . configgui . disableStairSlabCulling = Disable Stair / Slab culling . 
 forge . configgui . zoomInMissingModelTextInGui = Zoom in Missing model text in the GUI 
 forge . configgui . disableStairSlabCulling . tooltip = Enable this if you see through blocks touching stairs / slabs with your resource pack . 
 @ @ - 167 , 16 + 166 , 6 @ @ fml . menu . modoptions = Mod Options . . . 
 
 item . forge . bucketFilled . name = % s Bucket 
 
 - fml . messages . java8problem = % s % sJava Update Required % s 
 - fml . messages . java8recommended = % s % sJava Update Recommended % s 
 - fml . messages . modslistedbelow = The mods listed below % s 
 - fml . messages . requirejava8 = require Java 8 
 - fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! 
 - fml . messages . java8warning . 2 = You need to update Java 
 - fml . messages . javaversion = Your Java version is Java % s ( version string % s ) 
 - fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play 
 - fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods 
 - fml . messages . countbadandgood = % s of % s mods have this problem 
 fml . messages . mod . missing . dependencies = % s is missing mods it depends on . 
 fml . messages . mod . missing . dependencies . fix = Include the following mods or remove % s . 
 fml . messages . mod . missing . dependencies . see . log = See ' % s ' for technical information . 
 @ @ - 193 , 7 + 182 , 6 @ @ fml . messages . version . restriction . upper . inclusive = % s or below 
 fml . messages . version . restriction . upper . exclusive = below % s 
 fml . messages . version . restriction . bounded = between % s and % s 
 
 - fml . button . visitjavadownloads = Oracle Java SE Downloads 
 fml . button . continue = Continue 
 fml . button . open . mods . folder = Open Mods Folder 
 fml . button . open . file = Open % s
