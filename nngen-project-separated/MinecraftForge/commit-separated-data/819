BLEU SCORE: 1.8887889656199507E-5

TEST MSG: Fix various errors in text mods .
GENERATED MSG: Added model bake event ( allows mods to insert custom baked models , much like TextureStitchEvent allows to load custom textures ) , ISmartBlock / ItemModel ( ability form models to react to block / item states ) , Block . getExtendedState , support for unlisted properties in block states . Includes example implementation of http : / / imgur . com / a / FyyJX

TEST DIFF (one line): diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> index 5234555 . . 90208cd 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import net . minecraft . tileentity . TileEntity ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . util . text . TextComponentString ; <nl> import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumHand ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> @ @ - 81 , 6 + 82 , 7 @ @ public class DynBucketTest <nl> } <nl> } <nl> <nl> + @ SuppressWarnings ( " unused " ) <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> @ @ - 113 , 6 + 115 , 7 @ @ public class DynBucketTest <nl> / / MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> } <nl> <nl> + @ SuppressWarnings ( " unused " ) <nl> private void registerFluidContainer ( Fluid fluid , int meta ) <nl> { <nl> if ( fluid = = null ) <nl> @ @ - 123 , 6 + 126 , 7 @ @ public class DynBucketTest <nl> FluidContainerRegistry . registerFluidContainer ( fs , stack , new ItemStack ( Items . bucket ) ) ; <nl> } <nl> <nl> + @ SuppressWarnings ( " unused " ) <nl> private void registerFluidContainer2 ( Fluid fluid , int meta ) <nl> { <nl> if ( fluid = = null ) <nl> @ @ - 136 , 16 + 140 , 16 @ @ public class DynBucketTest <nl> @ SubscribeEvent <nl> public void onBucketFill ( FillBucketEvent event ) <nl> { <nl> - IBlockState state = event . world . getBlockState ( event . target . getBlockPos ( ) ) ; <nl> + IBlockState state = event . getWorld ( ) . getBlockState ( event . getTarget ( ) . getBlockPos ( ) ) ; <nl> if ( state . getBlock ( ) instanceof IFluidBlock ) <nl> { <nl> Fluid fluid = ( ( IFluidBlock ) state . getBlock ( ) ) . getFluid ( ) ; <nl> FluidStack fs = new FluidStack ( fluid , FluidContainerRegistry . BUCKET _ VOLUME ) ; <nl> <nl> - ItemStack filled = FluidContainerRegistry . fillFluidContainer ( fs , event . current ) ; <nl> + ItemStack filled = FluidContainerRegistry . fillFluidContainer ( fs , event . getEmptyBucket ( ) ) ; <nl> if ( filled ! = null ) <nl> { <nl> - event . result = filled ; <nl> + event . setFilledBucket ( filled ) ; <nl> event . setResult ( Result . ALLOW ) ; <nl> } <nl> } <nl> @ @ - 202 , 7 + 206 , 7 @ @ public class DynBucketTest <nl> } <nl> <nl> @ Override <nl> - public boolean onBlockActivated ( World worldIn , BlockPos pos , IBlockState state , EntityPlayer playerIn , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> + public boolean onBlockActivated ( World worldIn , BlockPos pos , IBlockState state , EntityPlayer playerIn , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> { <nl> TileEntity te = worldIn . getTileEntity ( pos ) ; <nl> if ( ! ( te instanceof IFluidHandler ) ) <nl> @ @ - 212 , 15 + 216 , 14 @ @ public class DynBucketTest <nl> IFluidHandler tank = ( IFluidHandler ) te ; <nl> side = side . getOpposite ( ) ; <nl> <nl> - ItemStack stack = playerIn . inventory . getCurrentItem ( ) ; <nl> - if ( stack = = null ) <nl> + if ( heldItem = = null ) <nl> { <nl> sendText ( playerIn , tank , side ) ; <nl> return false ; <nl> } <nl> <nl> / / do the thing with the tank and the buckets <nl> - if ( FluidUtil . interactWithTank ( stack , playerIn , tank , side ) ) <nl> + if ( FluidUtil . interactWithTank ( heldItem , playerIn , tank , side ) ) <nl> { <nl> return true ; <nl> } <nl> @ @ - 230 , 7 + 233 , 7 @ @ public class DynBucketTest <nl> } <nl> <nl> / / prevent interaction of the item if it ' s a fluidcontainer . Prevents placing liquids when interacting with the tank <nl> - return FluidContainerRegistry . isFilledContainer ( stack ) | | stack . getItem ( ) instanceof IFluidContainerItem ; <nl> + return FluidContainerRegistry . isFilledContainer ( heldItem ) | | heldItem . getItem ( ) instanceof IFluidContainerItem ; <nl> } <nl> <nl> private void sendText ( EntityPlayer player , IFluidHandler tank , EnumFacing side ) <nl> @ @ - 259 , 7 + 262 , 8 @ @ public class DynBucketTest <nl> { <nl> int filled = tank . fill ( resource , doFill ) ; <nl> if ( doFill & & filled > 0 ) { <nl> - worldObj . markBlockForUpdate ( pos ) ; <nl> + IBlockState state = worldObj . getBlockState ( pos ) ; <nl> + worldObj . func _ 184138 _ a ( pos , state , state , 8 ) ; / / TODO check flag <nl> } <nl> return filled ; <nl> } <nl> @ @ - 276 , 7 + 280 , 8 @ @ public class DynBucketTest <nl> { <nl> FluidStack drained = tank . drain ( maxDrain , doDrain ) ; <nl> if ( doDrain & & drained ! = null ) { <nl> - worldObj . markBlockForUpdate ( pos ) ; <nl> + IBlockState state = worldObj . getBlockState ( pos ) ; <nl> + worldObj . func _ 184138 _ a ( pos , state , state , 8 ) ; / / TODO check flag <nl> } <nl> return drained ; <nl> } <nl> @ @ - 315 , 7 + 320 , 7 @ @ public class DynBucketTest <nl> } <nl> <nl> @ Override <nl> - public Packet getDescriptionPacket ( ) { <nl> + public Packet < ? > getDescriptionPacket ( ) { <nl> NBTTagCompound tag = new NBTTagCompound ( ) ; <nl> writeToNBT ( tag ) ; <nl> return new SPacketUpdateTileEntity ( this . getPos ( ) , this . getBlockMetadata ( ) , tag ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ItemTileDebug . java b / src / test / java / net / minecraftforge / debug / ItemTileDebug . java <nl> index 2330b01 . . 0539661 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ItemTileDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ItemTileDebug . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package net . minecraftforge . debug ; <nl> <nl> import net . minecraft . block . BlockContainer ; <nl> import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . renderer . GlStateManager ; <nl> import net . minecraft . client . renderer . tileentity . TileEntitySpecialRenderer ; <nl> import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> @ @ - 125 , 10 + 126 , 10 @ @ public class ItemTileDebug <nl> } <nl> <nl> @ Override <nl> - public boolean isOpaqueCube ( ) { return false ; } <nl> + public boolean isOpaqueCube ( IBlockState state ) { return false ; } <nl> <nl> @ Override <nl> - public boolean isFullCube ( ) { return false ; } <nl> + public boolean isFullCube ( IBlockState state ) { return false ; } <nl> <nl> @ Override <nl> public boolean isVisuallyOpaque ( ) { return false ; } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> deleted file mode 100644 <nl> index 3bf068e . . 0000000 <nl> - - - a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> + + + / dev / null <nl> @ @ - 1 , 225 + 0 , 0 @ @ <nl> - <nl> - package net . minecraftforge . debug ; <nl> - <nl> - import java . util . ArrayList ; <nl> - import java . util . Collections ; <nl> - import java . util . List ; <nl> - <nl> - import net . minecraft . block . Block ; <nl> - import net . minecraft . block . material . Material ; <nl> - import net . minecraft . block . state . IBlockState ; <nl> - import net . minecraft . client . Minecraft ; <nl> - import net . minecraft . client . renderer . BlockModelShapes ; <nl> - import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> - import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> - import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> - import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> - import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> - import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> - import net . minecraft . creativetab . CreativeTabs ; <nl> - import net . minecraft . init . Blocks ; <nl> - import net . minecraft . util . EnumFacing ; <nl> - import net . minecraft . util . BlockRenderLayer ; <nl> - import net . minecraftforge . client . event . ModelBakeEvent ; <nl> - import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> - import net . minecraftforge . client . model . ISmartBlockModel ; <nl> - import net . minecraftforge . common . MinecraftForge ; <nl> - import net . minecraftforge . fml . common . Mod ; <nl> - import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> - import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> - import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> - import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> - import net . minecraftforge . fml . relauncher . Side ; <nl> - <nl> - import com . google . common . primitives . Ints ; <nl> - <nl> - @ SuppressWarnings ( " deprecation " ) <nl> - @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) <nl> - public class LayerBreakingTest <nl> - { <nl> - public static final boolean ENABLE = true ; <nl> - public static TestBlock testBlock ; <nl> - <nl> - class TestBakedModel implements IFlexibleBakedModel <nl> - { <nl> - TextureAtlasSprite texture ; <nl> - List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; <nl> - <nl> - private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , int u , int v ) <nl> - { <nl> - return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; <nl> - } <nl> - <nl> - public TestBakedModel ( TextureAtlasSprite sprite , boolean top ) <nl> - { <nl> - texture = sprite ; <nl> - if ( top ) <nl> - { <nl> - list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; <nl> - } <nl> - else <nl> - { <nl> - list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isAmbientOcclusion ( ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isGui3d ( ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isBuiltInRenderer ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public TextureAtlasSprite getParticleTexture ( ) <nl> - { <nl> - return texture ; <nl> - } <nl> - <nl> - @ Override <nl> - public ItemCameraTransforms getItemCameraTransforms ( ) <nl> - { <nl> - return ItemCameraTransforms . DEFAULT ; <nl> - } <nl> - <nl> - @ Override <nl> - public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public List < BakedQuad > getGeneralQuads ( ) <nl> - { <nl> - return list ; <nl> - } <nl> - <nl> - @ Override <nl> - public VertexFormat getFormat ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - } ; <nl> - <nl> - class TestBlock extends Block <nl> - { <nl> - protected TestBlock ( ) <nl> - { <nl> - super ( Material . glass ) ; <nl> - setHardness ( 7 ) ; <nl> - setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isOpaqueCube ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - public boolean isFullCube ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean canRenderInLayer ( BlockRenderLayer layer ) <nl> - { <nl> - return layer = = BlockRenderLayer . SOLID | | layer = = BlockRenderLayer . TRANSLUCENT ; <nl> - } <nl> - } ; <nl> - <nl> - class SmartModel implements IBakedModel , ISmartBlockModel <nl> - { <nl> - IFlexibleBakedModel solid ; <nl> - IFlexibleBakedModel translucent ; <nl> - <nl> - @ Override <nl> - public List < BakedQuad > getFaceQuads ( EnumFacing p _ 177551 _ 1 _ ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public List < BakedQuad > getGeneralQuads ( ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isAmbientOcclusion ( ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isGui3d ( ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean isBuiltInRenderer ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public TextureAtlasSprite getParticleTexture ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public ItemCameraTransforms getItemCameraTransforms ( ) <nl> - { <nl> - return ItemCameraTransforms . DEFAULT ; <nl> - } <nl> - <nl> - @ Override <nl> - public IBakedModel handleBlockState ( IBlockState state ) <nl> - { <nl> - if ( solid = = null ) <nl> - { <nl> - BlockModelShapes models = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) ; <nl> - translucent = new TestBakedModel ( models . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getParticleTexture ( ) , true ) ; <nl> - solid = new TestBakedModel ( models . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getParticleTexture ( ) , false ) ; <nl> - } <nl> - <nl> - if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = BlockRenderLayer . SOLID ) <nl> - { <nl> - return solid ; <nl> - } <nl> - else <nl> - { <nl> - return translucent ; <nl> - } <nl> - } <nl> - } ; <nl> - <nl> - @ SubscribeEvent <nl> - public void onModelBakeEvent ( ModelBakeEvent event ) <nl> - { <nl> - event . modelRegistry . putObject ( new ModelResourceLocation ( " layerbreakingtest : layer _ breaking _ test " ) , new SmartModel ( ) ) ; <nl> - } <nl> - <nl> - @ EventHandler <nl> - public void init ( FMLInitializationEvent event ) <nl> - { <nl> - if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) <nl> - { <nl> - MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> - GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " layer _ breaking _ test " ) ; <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java <nl> index 8ae2a8b . . dd7cf87 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java <nl> @ @ - 8 , 21 + 8 , 24 @ @ import net . minecraft . block . material . Material ; <nl> import net . minecraft . block . properties . IProperty ; <nl> import net . minecraft . block . properties . PropertyDirection ; <nl> import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> import net . minecraft . client . renderer . entity . Render ; <nl> import net . minecraft . client . renderer . entity . RenderLiving ; <nl> import net . minecraft . client . renderer . entity . RenderManager ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> - import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> import net . minecraft . creativetab . CreativeTabs ; <nl> import net . minecraft . entity . EntityLiving ; <nl> import net . minecraft . entity . EntityLivingBase ; <nl> import net . minecraft . entity . SharedMonsterAttributes ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> - import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumHand ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . client . model . IModel ; <nl> @ @ - 93 , 15 + 96 , 15 @ @ public class ModelAnimationDebug <nl> } <nl> <nl> @ Override <nl> - public boolean isOpaqueCube ( ) { return false ; } <nl> + public boolean isOpaqueCube ( IBlockState state ) { return false ; } <nl> <nl> @ Override <nl> - public boolean isFullCube ( ) { return false ; } <nl> + public boolean isFullCube ( IBlockState state ) { return false ; } <nl> <nl> @ Override <nl> public IBlockState onBlockPlaced ( World world , BlockPos pos , EnumFacing facing , float hitX , float hitY , float hitZ , int meta , EntityLivingBase placer ) <nl> { <nl> - return this . getDefaultState ( ) . withProperty ( FACING , BlockPistonBase . getFacingFromEntity ( world , pos , placer ) ) ; <nl> + return this . getDefaultState ( ) . withProperty ( FACING , BlockPistonBase . func _ 185647 _ a ( pos , placer ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 140 , 7 + 143 , 7 @ @ public class ModelAnimationDebug <nl> } * / <nl> <nl> @ Override <nl> - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> { <nl> if ( world . isRemote ) <nl> { <nl> @ @ - 209 , 13 + 212 , 13 @ @ public class ModelAnimationDebug <nl> " chamber " , " blocks / redstone _ block " , <nl> " trunk " , " blocks / end _ stone " <nl> ) ; <nl> - if ( base instanceof IRetexturableModel ) <nl> + if ( base instanceof IRetexturableModel < ? > ) <nl> { <nl> - base = ( ( IRetexturableModel ) base ) . retexture ( textures ) ; <nl> + base = ( ( IRetexturableModel < ? > ) base ) . retexture ( textures ) ; <nl> } <nl> - if ( ring instanceof IRetexturableModel ) <nl> + if ( ring instanceof IRetexturableModel < ? > ) <nl> { <nl> - ring = ( ( IRetexturableModel ) ring ) . retexture ( textures ) ; <nl> + ring = ( ( IRetexturableModel < ? > ) ring ) . retexture ( textures ) ; <nl> } <nl> IModel model = new MultiModel ( <nl> new ResourceLocation ( ModelAnimationDebug . MODID , " builtin / engine " ) , <nl> @ @ - 225 , 7 + 228 , 7 @ @ public class ModelAnimationDebug <nl> " base " , Pair . < IModel , IModelState > of ( base , TRSRTransformation . identity ( ) ) <nl> ) <nl> ) ; <nl> - return new RenderLiving < EntityChest > ( manager , new AnimationModelBase < EntityChest > ( model , new VertexLighterSmoothAo ( ) ) <nl> + return new RenderLiving < EntityChest > ( manager , new AnimationModelBase < EntityChest > ( model , new VertexLighterSmoothAo ( Minecraft . getMinecraft ( ) . func _ 184125 _ al ( ) ) ) <nl> { <nl> @ Override <nl> public void handleEvents ( EntityChest chest , float time , Iterable < Event > pastEvents ) <nl> @ @ - 362 , 11 + 365 , 12 @ @ public class ModelAnimationDebug <nl> return asm ; <nl> } <nl> <nl> - @ Override <nl> - public void onDataWatcherUpdate ( int id ) <nl> + / / FIXME update health <nl> + / * @ Override <nl> + public void func _ 184206 _ a ( DataParameter < ? > key ) <nl> { <nl> - super . onDataWatcherUpdate ( id ) ; <nl> - if ( id = = 6 ) / / health <nl> + super . func _ 184206 _ a ( key ) ; <nl> + if ( field _ 184632 _ c . equals ( key ) ) / / health <nl> { <nl> if ( cycleLength = = null ) <nl> { <nl> @ @ - 374 , 7 + 378 , 7 @ @ public class ModelAnimationDebug <nl> } <nl> cycleLength . setValue ( getHealth ( ) / 5 ) ; <nl> } <nl> - } <nl> + } * / <nl> <nl> @ Override <nl> protected void applyEntityAttributes ( ) <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> index 524b546 . . 7f3dfcc 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> @ @ - 1 , 37 + 1 , 36 @ @ <nl> package net . minecraftforge . debug ; <nl> <nl> import java . util . ArrayList ; <nl> - import java . util . Collections ; <nl> import java . util . List ; <nl> <nl> import net . minecraft . block . BlockContainer ; <nl> import net . minecraft . block . material . Material ; <nl> import net . minecraft . block . properties . IProperty ; <nl> import net . minecraft . block . properties . PropertyInteger ; <nl> - import net . minecraft . block . state . BlockState ; <nl> import net . minecraft . block . state . BlockStateContainer ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . block . model . ItemOverrideList ; <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> import net . minecraft . client . renderer . block . statemap . StateMapperBase ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> - import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> - import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> import net . minecraft . creativetab . CreativeTabs ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> + import net . minecraft . util . EnumBlockRenderType ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumHand ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . util . math . Vec3d ; <nl> - import net . minecraft . util . EnumFacing ; <nl> - import net . minecraft . util . Vec3 ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . client . event . ModelBakeEvent ; <nl> - import net . minecraftforge . client . model . ISmartBlockModel ; <nl> - import net . minecraftforge . client . model . ISmartItemModel ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . common . property . ExtendedBlockState ; <nl> @ @ - 45 , 9 + 44 , 9 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> <nl> + import com . google . common . collect . ImmutableList ; <nl> import com . google . common . primitives . Ints ; <nl> <nl> - @ SuppressWarnings ( " deprecation " ) <nl> @ Mod ( modid = ModelBakeEventDebug . MODID , version = ModelBakeEventDebug . VERSION ) <nl> public class ModelBakeEventDebug <nl> { <nl> @ @ - 136 , 13 + 135 , 13 @ @ public class ModelBakeEventDebug <nl> } <nl> <nl> @ Override <nl> - public int getRenderType ( ) { return 3 ; } <nl> + public EnumBlockRenderType getRenderType ( IBlockState state ) { return EnumBlockRenderType . MODEL ; } <nl> <nl> @ Override <nl> - public boolean isOpaqueCube ( ) { return false ; } <nl> + public boolean isOpaqueCube ( IBlockState state ) { return false ; } <nl> <nl> @ Override <nl> - public boolean isFullCube ( ) { return false ; } <nl> + public boolean isFullCube ( IBlockState state ) { return false ; } <nl> <nl> @ Override <nl> public boolean isVisuallyOpaque ( ) { return false ; } <nl> @ @ - 154 , 7 + 153 , 7 @ @ public class ModelBakeEventDebug <nl> } <nl> <nl> @ Override <nl> - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> { <nl> TileEntity te = world . getTileEntity ( pos ) ; <nl> if ( te instanceof CustomTileEntity ) <nl> @ @ - 210 , 30 + 209 , 18 @ @ public class ModelBakeEventDebug <nl> } <nl> } <nl> <nl> - public static class CustomModel implements IBakedModel , ISmartBlockModel , ISmartItemModel <nl> + public static class CustomModel implements IBakedModel <nl> { <nl> private final TextureAtlasSprite base , overlay ; <nl> / / private boolean hasStateSet = false ; <nl> - private final IExtendedBlockState state ; <nl> <nl> public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay ) <nl> { <nl> - this ( base , overlay , null ) ; <nl> - } <nl> - <nl> - public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay , IExtendedBlockState state ) <nl> - { <nl> this . base = base ; <nl> this . overlay = overlay ; <nl> - this . state = state ; <nl> - } <nl> - <nl> - @ Override <nl> - public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> } <nl> <nl> + / / TODO update to builder <nl> private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , float u , float v ) <nl> { <nl> return new int [ ] { <nl> @ @ - 258 , 12 + 245 , 14 @ @ public class ModelBakeEventDebug <nl> vertexToInts ( ( float ) v2 . xCoord , ( float ) v2 . yCoord , ( float ) v2 . zCoord , - 1 , texture , 0 , 16 ) , <nl> vertexToInts ( ( float ) v3 . xCoord , ( float ) v3 . yCoord , ( float ) v3 . zCoord , - 1 , texture , 16 , 16 ) , <nl> vertexToInts ( ( float ) v4 . xCoord , ( float ) v4 . yCoord , ( float ) v4 . zCoord , - 1 , texture , 16 , 0 ) <nl> - ) , - 1 , side ) ; <nl> + ) , - 1 , side , texture , DefaultVertexFormats . BLOCK ) ; <nl> } <nl> <nl> @ Override <nl> - public List < BakedQuad > getGeneralQuads ( ) <nl> + public List < BakedQuad > func _ 188616 _ a ( IBlockState state , EnumFacing side , long rand ) <nl> { <nl> + if ( side ! = null | | ! ( state instanceof IExtendedBlockState ) ) return ImmutableList . of ( ) ; <nl> + IExtendedBlockState exState = ( IExtendedBlockState ) state ; <nl> int len = cubeSize * 5 + 1 ; <nl> List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; <nl> for ( EnumFacing f : EnumFacing . values ( ) ) <nl> @ @ - 273 , 13 + 262 , 10 @ @ public class ModelBakeEventDebug <nl> { <nl> for ( int j = 0 ; j < cubeSize ; j + + ) <nl> { <nl> - if ( state ! = null ) <nl> + Integer value = exState . getValue ( properties [ f . ordinal ( ) ] ) ; <nl> + if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) <nl> { <nl> - Integer value = state . getValue ( properties [ f . ordinal ( ) ] ) ; <nl> - if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) <nl> - { <nl> - ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; <nl> - } <nl> + ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 294 , 29 + 280 , 16 @ @ public class ModelBakeEventDebug <nl> public boolean isAmbientOcclusion ( ) { return true ; } <nl> <nl> @ Override <nl> - public boolean isBuiltInRenderer ( ) { return false ; } <nl> + public boolean func _ 188618 _ c ( ) { return false ; } <nl> <nl> @ Override <nl> public TextureAtlasSprite getParticleTexture ( ) { return this . base ; } <nl> <nl> @ Override <nl> - public ItemCameraTransforms getItemCameraTransforms ( ) <nl> - { <nl> - return ItemCameraTransforms . DEFAULT ; <nl> - } <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } <nl> <nl> @ Override <nl> - public IBakedModel handleBlockState ( IBlockState state ) <nl> - { <nl> - return new CustomModel ( base , overlay , ( IExtendedBlockState ) state ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public IBakedModel handleItemState ( ItemStack stack ) <nl> - { <nl> - IExtendedBlockState itemState = ( ( IExtendedBlockState ) CustomModelBlock . instance . getDefaultState ( ) ) . withProperty ( properties [ 1 ] , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ; <nl> - return new CustomModel ( base , overlay , itemState ) ; <nl> - } <nl> + public ItemOverrideList func _ 188617 _ f ( ) { return ItemOverrideList . field _ 188022 _ a ; } <nl> } <nl> <nl> private static Vec3d rotate ( Vec3d vec , EnumFacing side ) <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> index a1042a8 . . caac6a9 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> @ @ - 26 , 11 + 26 , 13 @ @ import net . minecraft . creativetab . CreativeTabs ; <nl> import net . minecraft . entity . EntityLivingBase ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . util . math . MathHelper ; <nl> import net . minecraft . util . text . TextComponentString ; <nl> import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumHand ; <nl> import net . minecraft . util . ITickable ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . world . IBlockAccess ; <nl> @ @ - 162 , 7 + 164 , 7 @ @ public class ModelLoaderRegistryDebug <nl> } <nl> <nl> @ Override <nl> - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> { <nl> if ( world . isRemote ) <nl> { <nl> @ @ - 249 , 7 + 251 , 7 @ @ public class ModelLoaderRegistryDebug <nl> } <nl> <nl> @ Override <nl> - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> { <nl> if ( world . getTileEntity ( pos ) = = null ) world . setTileEntity ( pos , new OBJTesseractTileEntity ( ) ) ; <nl> OBJTesseractTileEntity tileEntity = ( OBJTesseractTileEntity ) world . getTileEntity ( pos ) ; <nl> @ @ - 278 , 8 + 280 , 9 @ @ public class ModelLoaderRegistryDebug <nl> <nl> if ( world . isRemote ) <nl> { <nl> - OBJBakedModel objBaked = ( OBJBakedModel ) Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getModelFromBlockState ( state , world , pos ) ; <nl> - objBaked . scheduleRebake ( ) ; / / not necessarily needed for this specific case , but is available <nl> + / / wtf <nl> + / / OBJBakedModel objBaked = ( OBJBakedModel ) Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getModelFromBlockState ( state , world , pos ) ; <nl> + / / objBaked . scheduleRebake ( ) ; / / not necessarily needed for this specific case , but is available <nl> } <nl> world . markBlockRangeForRenderUpdate ( pos , pos ) ; <nl> return false ; <nl> @ @ - 429 , 13 + 432 , 6 @ @ public class ModelLoaderRegistryDebug <nl> } <nl> <nl> @ Override <nl> - @ SideOnly ( Side . CLIENT ) <nl> - public IBlockState getStateForEntityRender ( IBlockState state ) <nl> - { <nl> - return this . getDefaultState ( ) . withProperty ( FACING , EnumFacing . NORTH ) ; <nl> - } <nl> - <nl> - @ Override <nl> public BlockStateContainer createBlockState ( ) <nl> { <nl> return new ExtendedBlockState ( this , new IProperty [ ] { FACING } , new IUnlistedProperty [ ] { OBJModel . OBJProperty . instance } ) ; <nl> @ @ - 506 , 7 + 502 , 7 @ @ public class ModelLoaderRegistryDebug <nl> } <nl> <nl> @ Override <nl> - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> { <nl> if ( world . getTileEntity ( pos ) ! = null & & world . getTileEntity ( pos ) instanceof OBJVertexColoring2TileEntity ) <nl> { <nl> @ @ - 531 , 6 + 527 , 7 @ @ public class ModelLoaderRegistryDebug <nl> if ( this . worldObj . isRemote ) <nl> { <nl> FMLLog . info ( " % b " , shouldIncrement ) ; <nl> + / * <nl> IBakedModel bakedModel = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getModelFromBlockState ( this . worldObj . getBlockState ( this . pos ) , this . worldObj , this . pos ) ; <nl> if ( bakedModel ! = null & & bakedModel instanceof OBJBakedModel ) <nl> { <nl> @ @ - 552 , 6 + 549 , 7 @ @ public class ModelLoaderRegistryDebug <nl> { <nl> FMLLog . info ( " incrementing " ) ; <nl> String name = materialNames . get ( index ) ; <nl> + / / no <nl> objBaked . getModel ( ) . getMatLib ( ) . changeMaterialColor ( name , 0xFF000000 ) ; <nl> objBaked . scheduleRebake ( ) ; <nl> index + + ; <nl> @ @ - 568 , 12 + 566 , 13 @ @ public class ModelLoaderRegistryDebug <nl> String name = materialNames . get ( index ) ; <nl> if ( ! name . equals ( OBJModel . Material . WHITE _ NAME ) ) <nl> { <nl> + / / FIXME <nl> objBaked . getModel ( ) . getMatLib ( ) . changeMaterialColor ( name , color ) ; <nl> objBaked . scheduleRebake ( ) ; <nl> } <nl> } <nl> this . worldObj . markBlockRangeForRenderUpdate ( this . pos , this . pos ) ; <nl> - } <nl> + } * / <nl> } <nl> } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java b / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java <nl> index 4aa3c04 . . 42906bf 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ package net . minecraftforge . debug ; <nl> <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> import net . minecraft . creativetab . CreativeTabs ; <nl> import net . minecraft . item . Item ; <nl> @ @ - 36 , 10 + 37 , 10 @ @ public class MultiLayerModelDebug <nl> } <nl> <nl> @ Override <nl> - public boolean isOpaqueCube ( ) { return false ; } <nl> + public boolean isOpaqueCube ( IBlockState state ) { return false ; } <nl> <nl> @ Override <nl> - public boolean isFullCube ( ) { return false ; } <nl> + public boolean isFullCube ( IBlockState state ) { return false ; } <nl> <nl> @ Override <nl> public boolean canRenderInLayer ( BlockRenderLayer layer ) <nl> diff - - git a / src / test / java / net / minecraftforge / test / FOVModifierTest . java b / src / test / java / net / minecraftforge / test / FOVModifierTest . java <nl> index c7ded0c . . 53f6869 100644 <nl> - - - a / src / test / java / net / minecraftforge / test / FOVModifierTest . java <nl> + + + b / src / test / java / net / minecraftforge / test / FOVModifierTest . java <nl> @ @ - 20 , 7 + 20 , 7 @ @ public class FOVModifierTest { <nl> <nl> @ SubscribeEvent <nl> public void getFOVModifier ( EntityViewRenderEvent . FOVModifier event ) { <nl> - if ( event . block . getMaterial ( ) = = Material . water ) <nl> + if ( event . getState ( ) . func _ 185904 _ a ( ) = = Material . water ) <nl> event . setFOV ( event . getFOV ( ) / 60 . 0f * 50 . 0f ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index 523a8df . . a946cbd 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 161 , 7 + 161 , 7 @ @ <nl> } <nl> <nl> protected ItemStack func _ 180643 _ i ( IBlockState p _ 180643 _ 1 _ ) <nl> - @ @ - 971 , 6 + 989 , 1011 @ @ <nl> + @ @ - 971 , 6 + 989 , 1019 @ @ <nl> return Block . EnumOffsetType . NONE ; <nl> } <nl> <nl> @ @ - 1145 , 6 + 1145 , 14 @ @ <nl> + return type ! = null & & type . equals ( getHarvestTool ( state ) ) ; <nl> + } <nl> + <nl> + + / * * <nl> + + * Can return IExtendedBlockState <nl> + + * / <nl> + + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> + + { <nl> + + return func _ 176221 _ a ( state , world , pos ) ; <nl> + + } <nl> + + <nl> + / / For Internal use only to capture droped items inside getDrops <nl> + protected static ThreadLocal < Boolean > captureDrops = new ThreadLocal < Boolean > ( ) <nl> + { <nl> diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 90b08e7 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / block / state / BlockState . java <nl> + + + + . . / src - work / minecraft / net / minecraft / block / state / BlockState . java <nl> + @ @ - 47 , 6 + 47 , 16 @ @ <nl> + <nl> + public BlockState ( Block p _ i45663 _ 1 _ , IProperty . . . p _ i45663 _ 2 _ ) <nl> + { <nl> + + this ( p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , null ) ; <nl> + + } <nl> + + <nl> + + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) <nl> + + { <nl> + + return new StateImplementation ( block , properties ) ; <nl> + + } <nl> + + <nl> + + protected BlockState ( Block p _ i45663 _ 1 _ , IProperty [ ] p _ i45663 _ 2 _ , ImmutableMap unlistedProperties ) <nl> + + { <nl> + this . field _ 177627 _ c = p _ i45663 _ 1 _ ; <nl> + Arrays . sort ( p _ i45663 _ 2 _ , new Comparator ( ) <nl> + { <nl> + @ @ - 70 , 7 + 80 , 7 @ @ <nl> + { <nl> + List list = ( List ) iterator . next ( ) ; <nl> + Map map = MapPopulator . func _ 179400 _ b ( this . field _ 177624 _ d , list ) ; <nl> + - BlockState . StateImplementation stateimplementation = new BlockState . StateImplementation ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , null ) ; <nl> + + BlockState . StateImplementation stateimplementation = createState ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , unlistedProperties ) ; <nl> + linkedhashmap . put ( map , stateimplementation ) ; <nl> + arraylist . add ( stateimplementation ) ; <nl> + } <nl> + @ @ - 231 , 5 + 241 , 10 @ @ <nl> + { <nl> + this ( p _ i45661 _ 1 _ , p _ i45661 _ 2 _ ) ; <nl> + } <nl> + + <nl> + + public ImmutableTable < IProperty , Comparable , IBlockState > getPropertyValueTable ( ) <nl> + + { <nl> + + return field _ 177238 _ c ; <nl> + + } <nl> + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> new file mode 100644 <nl> index 0000000 . . a24be3d <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + @ @ - 129 , 6 + 129 , 12 @ @ <nl> + ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; <nl> + } <nl> + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) <nl> + + { <nl> + + IBlockState extendedState = block . getExtendedState ( p _ 175022 _ 1 _ , p _ 175022 _ 2 _ , p _ 175022 _ 3 _ ) ; <nl> + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; <nl> + + } <nl> + + <nl> + return ibakedmodel ; <nl> + } <nl> + <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch <nl> new file mode 100644 <nl> index 0000000 . . dbe123b <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / ItemModelMesher . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / ItemModelMesher . java <nl> + @ @ - 52 , 6 + 52 , 11 @ @ <nl> + } <nl> + } <nl> + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartItemModel ) <nl> + + { <nl> + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartItemModel ) ibakedmodel ) . handleItemState ( p _ 178089 _ 1 _ ) ; <nl> + + } <nl> + + <nl> + if ( ibakedmodel = = null ) <nl> + { <nl> + ibakedmodel = this . field _ 178090 _ d . func _ 174951 _ a ( ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 9b2da14 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / resources / model / ModelManager . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / resources / model / ModelManager . java <nl> + @ @ - 28 , 6 + 28 , 7 @ @ <nl> + ModelBakery modelbakery = new ModelBakery ( p _ 110549 _ 1 _ , this . field _ 174956 _ b , this . field _ 174957 _ c ) ; <nl> + this . field _ 174958 _ a = modelbakery . func _ 177570 _ a ( ) ; <nl> + this . field _ 174955 _ d = ( IBakedModel ) this . field _ 174958 _ a . func _ 82594 _ a ( ModelBakery . field _ 177604 _ a ) ; <nl> + + net . minecraftforge . client . ForgeHooksClient . onModelBake ( this , this . field _ 174958 _ a , modelbakery ) ; <nl> + this . field _ 174957 _ c . func _ 178124 _ c ( ) ; <nl> + } <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 9b9b75e . . d0126b6 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 2 , 41 + 2 , 31 @ @ package net . minecraftforge . client ; <nl> <nl> import static net . minecraftforge . common . ForgeVersion . Status . BETA ; <nl> import static net . minecraftforge . common . ForgeVersion . Status . BETA _ OUTDATED ; <nl> - import java . util . Random ; <nl> - import javax . imageio . ImageIO ; <nl> import net . minecraft . block . Block ; <nl> - import net . minecraft . block . BlockBed ; <nl> - import net . minecraft . block . BlockLiquid ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . audio . ISound ; <nl> import net . minecraft . client . audio . SoundEventAccessorComposite ; <nl> import net . minecraft . client . audio . SoundManager ; <nl> - import net . minecraft . client . entity . EntityPlayerSP ; <nl> import net . minecraft . client . gui . FontRenderer ; <nl> import net . minecraft . client . gui . GuiMainMenu ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . client . model . ModelBase ; <nl> - import net . minecraft . client . model . ModelBiped ; <nl> import net . minecraft . client . renderer . EntityRenderer ; <nl> - import net . minecraft . client . renderer . GlStateManager ; <nl> import net . minecraft . client . renderer . RenderGlobal ; <nl> - import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . client . renderer . texture . TextureManager ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . client . resources . model . ModelBakery ; <nl> + import net . minecraft . client . resources . model . ModelManager ; <nl> import net . minecraft . client . settings . GameSettings ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityLivingBase ; <nl> - import net . minecraft . entity . item . EntityItem ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> - import net . minecraft . init . Blocks ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . BlockPos ; <nl> - import net . minecraft . util . ChatComponentTranslation ; <nl> import net . minecraft . util . EnumChatFormatting ; <nl> - import net . minecraft . util . EnumFacing ; <nl> - import net . minecraft . util . MathHelper ; <nl> + import net . minecraft . util . IRegistry ; <nl> import net . minecraft . util . MovingObjectPosition ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> @ @ - 45 , 6 + 35 , 7 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> import net . minecraftforge . client . event . EntityViewRenderEvent ; <nl> import net . minecraftforge . client . event . FOVUpdateEvent ; <nl> import net . minecraftforge . client . event . GuiScreenEvent ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> import net . minecraftforge . client . event . RenderHandEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> @ @ - 54 , 14 + 45 , 9 @ @ import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> - import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> - import net . minecraftforge . fml . client . registry . RenderingRegistry ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> - import org . lwjgl . LWJGLException ; <nl> - import org . lwjgl . opengl . Display ; <nl> + <nl> import org . lwjgl . opengl . GL11 ; <nl> - import org . lwjgl . opengl . PixelFormat ; <nl> / / import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; <nl> / / import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; <nl> <nl> @ @ - 470 , 4 + 456 , 9 @ @ public class ForgeHooksClient <nl> } <nl> } <nl> * / <nl> + <nl> + public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 502454f <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package net . minecraftforge . client . event ; <nl> + <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + import net . minecraft . client . resources . model . ModelBakery ; <nl> + import net . minecraft . client . resources . model . ModelManager ; <nl> + import net . minecraft . util . IRegistry ; <nl> + <nl> + / * * <nl> + * Fired when the ModelManager is notified of the resource manager reloading . <nl> + * Called after model registry is setup , but before it ' s passed to BlockModelShapes . <nl> + * / <nl> + public class ModelBakeEvent extends Event <nl> + { <nl> + public final ModelManager modelManager ; <nl> + public final IRegistry modelRegistry ; <nl> + public final ModelBakery modelBakery ; <nl> + <nl> + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + { <nl> + this . modelManager = modelManager ; <nl> + this . modelRegistry = modelRegistry ; <nl> + this . modelBakery = modelBakery ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java <nl> new file mode 100644 <nl> index 0000000 . . 37dee84 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + <nl> + public interface ISmartBlockModel extends IBakedModel <nl> + { <nl> + IBakedModel handleBlockState ( IBlockState state ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java <nl> new file mode 100644 <nl> index 0000000 . . 7973271 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + <nl> + public interface ISmartItemModel extends IBakedModel <nl> + { <nl> + IBakedModel handleItemState ( ItemStack stack ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> new file mode 100644 <nl> index 0000000 . . ef54140 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> @ @ - 0 , 0 + 1 , 138 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . properties . IProperty ; <nl> + import net . minecraft . block . state . BlockState ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . base . Predicates ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . collect . ImmutableTable ; <nl> + import com . google . common . collect . Iterables ; <nl> + <nl> + public class ExtendedBlockState extends BlockState <nl> + { <nl> + private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; <nl> + <nl> + public ExtendedBlockState ( Block blockIn , IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> + { <nl> + super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; <nl> + ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; <nl> + for ( IUnlistedProperty < ? > property : unlistedProperties ) <nl> + { <nl> + builder . add ( property ) ; <nl> + } <nl> + this . unlistedProperties = builder . build ( ) ; <nl> + } <nl> + <nl> + private static ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > buildUnlistedMap ( IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> + { <nl> + ImmutableMap . Builder < IUnlistedProperty < ? > , Optional < ? > > builder = ImmutableMap . < IUnlistedProperty < ? > , Optional < ? > > builder ( ) ; <nl> + for ( IUnlistedProperty < ? > p : unlistedProperties ) <nl> + { <nl> + builder . put ( p , Optional . absent ( ) ) ; <nl> + } <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) <nl> + { <nl> + return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; <nl> + } <nl> + <nl> + protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState <nl> + { <nl> + private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; <nl> + private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; <nl> + <nl> + protected ExtendedStateImplementation ( Block block , ImmutableMap properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) <nl> + { <nl> + super ( block , properties ) ; <nl> + this . unlistedProperties = unlistedProperties ; <nl> + this . propertyValueTable = table ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBlockState withProperty ( IProperty property , Comparable value ) <nl> + { <nl> + if ( ! this . getProperties ( ) . containsKey ( property ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; <nl> + } <nl> + else if ( ! property . getAllowedValues ( ) . contains ( value ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; <nl> + } <nl> + else <nl> + { <nl> + if ( this . getProperties ( ) . get ( property ) = = value ) <nl> + { <nl> + return this ; <nl> + } <nl> + if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) <nl> + { / / no dynamic properties present , looking up in the normal table <nl> + return super . withProperty ( property , value ) ; <nl> + } <nl> + Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; <nl> + map . put ( property , value ) ; <nl> + ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; <nl> + table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; <nl> + return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) ; <nl> + } <nl> + } <nl> + <nl> + public < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) <nl> + { <nl> + if ( ! this . unlistedProperties . containsKey ( property ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; <nl> + } <nl> + if ( ! property . isValid ( value ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; <nl> + } <nl> + Map < IUnlistedProperty < ? > , Optional < ? > > newMap = new HashMap < IUnlistedProperty < ? > , Optional < ? > > ( unlistedProperties ) ; <nl> + newMap . put ( property , Optional . fromNullable ( value ) ) ; <nl> + if ( Iterables . all ( newMap . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) <nl> + { / / no dynamic properties , lookup normal state <nl> + return ( IExtendedBlockState ) normalMap . get ( getProperties ( ) ) ; <nl> + } <nl> + return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) ; <nl> + } <nl> + <nl> + public Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) <nl> + { <nl> + return Collections . unmodifiableCollection ( unlistedProperties . keySet ( ) ) ; <nl> + } <nl> + <nl> + public < V > V getValue ( IUnlistedProperty < V > property ) <nl> + { <nl> + if ( ! this . unlistedProperties . containsKey ( property ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot get unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; <nl> + } <nl> + return property . getType ( ) . cast ( this . unlistedProperties . get ( property ) . orNull ( ) ) ; <nl> + } <nl> + <nl> + public ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) <nl> + { <nl> + return unlistedProperties ; <nl> + } <nl> + <nl> + @ Override <nl> + public void buildPropertyValueTable ( Map map ) <nl> + { <nl> + this . normalMap = map ; <nl> + super . buildPropertyValueTable ( map ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java <nl> new file mode 100644 <nl> index 0000000 . . 218e427 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + import java . util . Collection ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + public interface IExtendedBlockState extends IBlockState <nl> + { <nl> + Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) ; <nl> + <nl> + < V > V getValue ( IUnlistedProperty < V > property ) ; <nl> + <nl> + < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) ; <nl> + <nl> + ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java <nl> new file mode 100644 <nl> index 0000000 . . da4b702 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + public interface IUnlistedProperty < V > <nl> + { <nl> + String getName ( ) ; <nl> + <nl> + boolean isValid ( V value ) ; <nl> + <nl> + Class < V > getType ( ) ; <nl> + <nl> + String valueToString ( V value ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / Properties . java b / src / main / java / net / minecraftforge / common / property / Properties . java <nl> new file mode 100644 <nl> index 0000000 . . b24e6be <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / Properties . java <nl> @ @ - 0 , 0 + 1 , 45 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + <nl> + import net . minecraft . block . properties . IProperty ; <nl> + <nl> + import org . apache . commons . lang3 . reflect . ConstructorUtils ; <nl> + <nl> + public class Properties <nl> + { <nl> + public static < P extends IProperty , V > IUnlistedProperty < V > toUnlisted ( P property ) <nl> + { <nl> + return new PropertyAdapter ( property ) ; <nl> + } <nl> + <nl> + public static class PropertyAdapter < V extends Comparable > implements IUnlistedProperty < V > <nl> + { <nl> + private final IProperty parent ; <nl> + <nl> + public PropertyAdapter ( IProperty parent ) <nl> + { <nl> + this . parent = parent ; <nl> + } <nl> + <nl> + public String getName ( ) <nl> + { <nl> + return parent . getName ( ) ; <nl> + } <nl> + <nl> + public boolean isValid ( V value ) <nl> + { <nl> + return parent . getAllowedValues ( ) . contains ( value ) ; <nl> + } <nl> + <nl> + public Class < V > getType ( ) <nl> + { <nl> + return parent . getValueClass ( ) ; <nl> + } <nl> + <nl> + public String valueToString ( V value ) <nl> + { <nl> + return parent . getName ( value ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc <nl> index c2381c6 . . f59ef26 100644 <nl> - - - a / src / main / resources / forge . exc <nl> + + + b / src / main / resources / forge . exc <nl> @ @ - 26 , 4 + 26 , 5 @ @ net / minecraft / block / BlockFire . tryCatchFire ( Lnet / minecraft / world / World ; Lnet / minec <nl> net / minecraft / block / BlockSkull . getDrops ( Lnet / minecraft / world / IBlockAccess ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / block / state / IBlockState ; I ) Ljava / util / List ; = | p _ 180663 _ 1 _ , p _ 180663 _ 2 _ , p _ 180663 _ 3 _ , fortune <nl> net / minecraft / item / ItemDye . applyBonemeal ( Lnet / minecraft / item / ItemStack ; Lnet / minecraft / world / World ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / entity / player / EntityPlayer ; ) Z = | p _ 179234 _ 0 _ , p _ 179234 _ 1 _ , p _ 179234 _ 2 _ , player <nl> net / minecraft / server / management / ItemInWorldManager . removeBlock ( Lnet / minecraft / util / BlockPos ; Z ) Z = | p _ 180235 _ 1 _ , canHarvest <nl> - net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font <nl> \ No newline at end of file <nl> + net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font <nl> + net / minecraft / block / state / BlockState . < init > ( Lnet / minecraft / block / Block ; [ Lnet / minecraft / block / properties / IProperty ; Lcom / google / common / collect / ImmutableMap ; ) V = | p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , unlistedProperties <nl> diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg <nl> index ff42e14 . . 6c78cf2 100644 <nl> - - - a / src / main / resources / forge _ at . cfg <nl> + + + b / src / main / resources / forge _ at . cfg <nl> @ @ - 119 , 4 + 119 , 7 @ @ public net . minecraft . world . gen . ChunkProviderServer field _ 73251 _ h # worldObj <nl> # RenderEntityItem <nl> protected net . minecraft . client . renderer . entity . RenderEntityItem func _ 177078 _ a ( Lnet / minecraft / item / ItemStack ; ) I # getMiniItemCount <nl> public net . minecraft . item . crafting . RecipesBanners $ RecipeAddPattern <nl> - public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern <nl> \ No newline at end of file <nl> + public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern <nl> + protected net . minecraft . block . state . BlockState $ StateImplementation <nl> + protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V <nl> + protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> new file mode 100644 <nl> index 0000000 . . c8de9a4 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> @ @ - 0 , 0 + 1 , 354 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . block . BlockContainer ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . properties . IProperty ; <nl> + import net . minecraft . block . properties . PropertyInteger ; <nl> + import net . minecraft . block . state . BlockState ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . entity . RenderItem ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . tileentity . TileEntity ; <nl> + import net . minecraft . util . BlockPos ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . Vec3 ; <nl> + import net . minecraft . world . IBlockAccess ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> + import net . minecraftforge . client . model . ISmartBlockModel ; <nl> + import net . minecraftforge . client . model . ISmartItemModel ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . common . property . ExtendedBlockState ; <nl> + import net . minecraftforge . common . property . IExtendedBlockState ; <nl> + import net . minecraftforge . common . property . IUnlistedProperty ; <nl> + import net . minecraftforge . common . property . Properties ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . SidedProxy ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> + @ Mod ( modid = ModelBakeEventDebug . MODID , version = ModelBakeEventDebug . VERSION ) <nl> + public class ModelBakeEventDebug <nl> + { <nl> + public static final String MODID = " ForgeDebugModelBakeEvent " ; <nl> + public static final String VERSION = " 1 . 0 " ; <nl> + public static final int cubeSize = 3 ; <nl> + <nl> + private static String blockName = MODID . toLowerCase ( ) + " : " + CustomModelBlock . name ; <nl> + <nl> + public static final IUnlistedProperty < Integer > [ ] properties = new IUnlistedProperty [ 6 ] ; <nl> + <nl> + static <nl> + { <nl> + for ( EnumFacing f : EnumFacing . values ( ) ) <nl> + { <nl> + properties [ f . ordinal ( ) ] = Properties . toUnlisted ( PropertyInteger . create ( f . getName ( ) , 0 , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ SidedProxy ( serverSide = " net . minecraftforge . debug . ModelBakeEventDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . ModelBakeEventDebug $ ClientProxy " ) <nl> + public static CommonProxy proxy ; <nl> + <nl> + @ EventHandler <nl> + public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } <nl> + <nl> + @ EventHandler <nl> + public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } <nl> + <nl> + public static class CommonProxy <nl> + { <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; <nl> + GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; <nl> + } <nl> + <nl> + public void postInit ( FMLPostInitializationEvent event ) { } <nl> + } <nl> + <nl> + public static class ClientProxy extends CommonProxy <nl> + { <nl> + private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; <nl> + <nl> + @ Override <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + super . init ( event ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void postInit ( FMLPostInitializationEvent event ) { <nl> + super . postInit ( event ) ; <nl> + Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> + RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; <nl> + if ( renderItem ! = null ) <nl> + { <nl> + renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { <nl> + public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> + { <nl> + return modelLocation ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static class BakeEventHandler <nl> + { <nl> + public static final BakeEventHandler instance = new BakeEventHandler ( ) ; <nl> + <nl> + private BakeEventHandler ( ) { } ; <nl> + <nl> + @ SubscribeEvent <nl> + public void onModelBakeEvent ( ModelBakeEvent event ) <nl> + { <nl> + TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; <nl> + TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; <nl> + event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static class CustomModelBlock extends BlockContainer <nl> + { <nl> + public static final CustomModelBlock instance = new CustomModelBlock ( ) ; <nl> + public static final String name = " custom _ model _ block " ; <nl> + <nl> + private CustomModelBlock ( ) <nl> + { <nl> + super ( Material . iron ) ; <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + setUnlocalizedName ( MODID + " : " + name ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getRenderType ( ) { return 3 ; } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean isFullCube ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean isVisuallyOpaque ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public TileEntity createNewTileEntity ( World world , int meta ) <nl> + { <nl> + return new CustomTileEntity ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> + { <nl> + TileEntity te = world . getTileEntity ( pos ) ; <nl> + if ( te instanceof CustomTileEntity ) <nl> + { <nl> + CustomTileEntity cte = ( CustomTileEntity ) te ; <nl> + Vec3 vec = revRotate ( new Vec3 ( hitX - . 5 , hitY - . 5 , hitZ - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + IUnlistedProperty property = properties [ side . ordinal ( ) ] ; <nl> + Integer value = ( Integer ) cte . getState ( ) . getValue ( property ) ; <nl> + if ( value = = null ) value = 0 ; <nl> + value ^ = ( 1 < < ( cubeSize * ( ( int ) ( vec . xCoord * ( cubeSize - . 0001 ) ) ) + ( ( int ) ( vec . zCoord * ( cubeSize - . 0001 ) ) ) ) ) ; <nl> + cte . setState ( cte . getState ( ) . withProperty ( property , value ) ) ; <nl> + world . markBlockRangeForRenderUpdate ( pos , pos ) ; <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> + { <nl> + TileEntity te = world . getTileEntity ( pos ) ; <nl> + if ( te instanceof CustomTileEntity ) <nl> + { <nl> + CustomTileEntity cte = ( CustomTileEntity ) te ; <nl> + return cte . getState ( ) ; <nl> + } <nl> + return state ; <nl> + } <nl> + <nl> + @ Override <nl> + protected BlockState createBlockState ( ) <nl> + { <nl> + return new ExtendedBlockState ( this , new IProperty [ 0 ] , properties ) ; <nl> + } <nl> + } <nl> + <nl> + public static class CustomTileEntity extends TileEntity <nl> + { <nl> + private IExtendedBlockState state ; <nl> + public CustomTileEntity ( ) { } <nl> + <nl> + public IExtendedBlockState getState ( ) <nl> + { <nl> + if ( state = = null ) <nl> + { <nl> + state = ( IExtendedBlockState ) getBlockType ( ) . getDefaultState ( ) ; <nl> + } <nl> + return state ; <nl> + } <nl> + <nl> + public void setState ( IExtendedBlockState state ) <nl> + { <nl> + this . state = state ; <nl> + } <nl> + } <nl> + <nl> + public static class CustomModel implements IBakedModel , ISmartBlockModel , ISmartItemModel <nl> + { <nl> + private final TextureAtlasSprite base , overlay ; <nl> + private boolean hasStateSet = false ; <nl> + private final IExtendedBlockState state ; <nl> + <nl> + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay ) <nl> + { <nl> + this ( base , overlay , null ) ; <nl> + } <nl> + <nl> + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay , IExtendedBlockState state ) <nl> + { <nl> + this . base = base ; <nl> + this . overlay = overlay ; <nl> + this . state = state ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , float u , float v ) <nl> + { <nl> + return new int [ ] { <nl> + Float . floatToRawIntBits ( x ) , <nl> + Float . floatToRawIntBits ( y ) , <nl> + Float . floatToRawIntBits ( z ) , <nl> + color , <nl> + Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , <nl> + Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , <nl> + 0 <nl> + } ; <nl> + } <nl> + <nl> + private BakedQuad createSidedBakedQuad ( float x1 , float x2 , float z1 , float z2 , float y , TextureAtlasSprite texture , EnumFacing side ) <nl> + { <nl> + Vec3 v1 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + Vec3 v2 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + Vec3 v3 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + Vec3 v4 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + return new BakedQuad ( Ints . concat ( <nl> + vertexToInts ( ( float ) v1 . xCoord , ( float ) v1 . yCoord , ( float ) v1 . zCoord , - 1 , texture , 0 , 0 ) , <nl> + vertexToInts ( ( float ) v2 . xCoord , ( float ) v2 . yCoord , ( float ) v2 . zCoord , - 1 , texture , 0 , 16 ) , <nl> + vertexToInts ( ( float ) v3 . xCoord , ( float ) v3 . yCoord , ( float ) v3 . zCoord , - 1 , texture , 16 , 16 ) , <nl> + vertexToInts ( ( float ) v4 . xCoord , ( float ) v4 . yCoord , ( float ) v4 . zCoord , - 1 , texture , 16 , 0 ) <nl> + ) , - 1 , side ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getGeneralQuads ( ) <nl> + { <nl> + int len = cubeSize * 5 + 1 ; <nl> + List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; <nl> + for ( EnumFacing f : EnumFacing . values ( ) ) <nl> + { <nl> + ret . add ( createSidedBakedQuad ( 0 , 1 , 0 , 1 , 1 , base , f ) ) ; <nl> + for ( int i = 0 ; i < cubeSize ; i + + ) <nl> + { <nl> + for ( int j = 0 ; j < cubeSize ; j + + ) <nl> + { <nl> + if ( state ! = null ) <nl> + { <nl> + Integer value = ( Integer ) state . getValue ( properties [ f . ordinal ( ) ] ) ; <nl> + if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) <nl> + { <nl> + ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + return ret ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) { return true ; } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) { return true ; } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) { return this . base ; } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleBlockState ( IBlockState state ) <nl> + { <nl> + return new CustomModel ( base , overlay , ( IExtendedBlockState ) state ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleItemState ( ItemStack stack ) <nl> + { <nl> + IExtendedBlockState itemState = ( ( IExtendedBlockState ) CustomModelBlock . instance . getDefaultState ( ) ) . withProperty ( properties [ 1 ] , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ; <nl> + return new CustomModel ( base , overlay , itemState ) ; <nl> + } <nl> + } <nl> + <nl> + private static Vec3 rotate ( Vec3 vec , EnumFacing side ) <nl> + { <nl> + switch ( side ) <nl> + { <nl> + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; <nl> + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; <nl> + case NORTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; <nl> + case SOUTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; <nl> + case WEST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; <nl> + case EAST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + private static Vec3 revRotate ( Vec3 vec , EnumFacing side ) <nl> + { <nl> + switch ( side ) <nl> + { <nl> + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; <nl> + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; <nl> + case NORTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; <nl> + case SOUTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; <nl> + case WEST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; <nl> + case EAST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> new file mode 100644 <nl> index 0000000 . . c2352ff <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + { <nl> + " variants " : { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> new file mode 100644 <nl> index 0000000 . . 43a272a <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> @ @ - 0 , 0 + 1 , 3 @ @ <nl> + { <nl> + " parent " : " builtin / entity " <nl> + }

TEST DIFF:
diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 index 5234555 . . 90208cd 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import net . minecraft . tileentity . TileEntity ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . util . text . TextComponentString ; 
 import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumHand ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 @ @ - 81 , 6 + 82 , 7 @ @ public class DynBucketTest 
 } 
 } 
 
 + @ SuppressWarnings ( " unused " ) 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) 
 { 
 @ @ - 113 , 6 + 115 , 7 @ @ public class DynBucketTest 
 / / MinecraftForge . EVENT _ BUS . register ( this ) ; 
 } 
 
 + @ SuppressWarnings ( " unused " ) 
 private void registerFluidContainer ( Fluid fluid , int meta ) 
 { 
 if ( fluid = = null ) 
 @ @ - 123 , 6 + 126 , 7 @ @ public class DynBucketTest 
 FluidContainerRegistry . registerFluidContainer ( fs , stack , new ItemStack ( Items . bucket ) ) ; 
 } 
 
 + @ SuppressWarnings ( " unused " ) 
 private void registerFluidContainer2 ( Fluid fluid , int meta ) 
 { 
 if ( fluid = = null ) 
 @ @ - 136 , 16 + 140 , 16 @ @ public class DynBucketTest 
 @ SubscribeEvent 
 public void onBucketFill ( FillBucketEvent event ) 
 { 
 - IBlockState state = event . world . getBlockState ( event . target . getBlockPos ( ) ) ; 
 + IBlockState state = event . getWorld ( ) . getBlockState ( event . getTarget ( ) . getBlockPos ( ) ) ; 
 if ( state . getBlock ( ) instanceof IFluidBlock ) 
 { 
 Fluid fluid = ( ( IFluidBlock ) state . getBlock ( ) ) . getFluid ( ) ; 
 FluidStack fs = new FluidStack ( fluid , FluidContainerRegistry . BUCKET _ VOLUME ) ; 
 
 - ItemStack filled = FluidContainerRegistry . fillFluidContainer ( fs , event . current ) ; 
 + ItemStack filled = FluidContainerRegistry . fillFluidContainer ( fs , event . getEmptyBucket ( ) ) ; 
 if ( filled ! = null ) 
 { 
 - event . result = filled ; 
 + event . setFilledBucket ( filled ) ; 
 event . setResult ( Result . ALLOW ) ; 
 } 
 } 
 @ @ - 202 , 7 + 206 , 7 @ @ public class DynBucketTest 
 } 
 
 @ Override 
 - public boolean onBlockActivated ( World worldIn , BlockPos pos , IBlockState state , EntityPlayer playerIn , EnumFacing side , float hitX , float hitY , float hitZ ) 
 + public boolean onBlockActivated ( World worldIn , BlockPos pos , IBlockState state , EntityPlayer playerIn , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) 
 { 
 TileEntity te = worldIn . getTileEntity ( pos ) ; 
 if ( ! ( te instanceof IFluidHandler ) ) 
 @ @ - 212 , 15 + 216 , 14 @ @ public class DynBucketTest 
 IFluidHandler tank = ( IFluidHandler ) te ; 
 side = side . getOpposite ( ) ; 
 
 - ItemStack stack = playerIn . inventory . getCurrentItem ( ) ; 
 - if ( stack = = null ) 
 + if ( heldItem = = null ) 
 { 
 sendText ( playerIn , tank , side ) ; 
 return false ; 
 } 
 
 / / do the thing with the tank and the buckets 
 - if ( FluidUtil . interactWithTank ( stack , playerIn , tank , side ) ) 
 + if ( FluidUtil . interactWithTank ( heldItem , playerIn , tank , side ) ) 
 { 
 return true ; 
 } 
 @ @ - 230 , 7 + 233 , 7 @ @ public class DynBucketTest 
 } 
 
 / / prevent interaction of the item if it ' s a fluidcontainer . Prevents placing liquids when interacting with the tank 
 - return FluidContainerRegistry . isFilledContainer ( stack ) | | stack . getItem ( ) instanceof IFluidContainerItem ; 
 + return FluidContainerRegistry . isFilledContainer ( heldItem ) | | heldItem . getItem ( ) instanceof IFluidContainerItem ; 
 } 
 
 private void sendText ( EntityPlayer player , IFluidHandler tank , EnumFacing side ) 
 @ @ - 259 , 7 + 262 , 8 @ @ public class DynBucketTest 
 { 
 int filled = tank . fill ( resource , doFill ) ; 
 if ( doFill & & filled > 0 ) { 
 - worldObj . markBlockForUpdate ( pos ) ; 
 + IBlockState state = worldObj . getBlockState ( pos ) ; 
 + worldObj . func _ 184138 _ a ( pos , state , state , 8 ) ; / / TODO check flag 
 } 
 return filled ; 
 } 
 @ @ - 276 , 7 + 280 , 8 @ @ public class DynBucketTest 
 { 
 FluidStack drained = tank . drain ( maxDrain , doDrain ) ; 
 if ( doDrain & & drained ! = null ) { 
 - worldObj . markBlockForUpdate ( pos ) ; 
 + IBlockState state = worldObj . getBlockState ( pos ) ; 
 + worldObj . func _ 184138 _ a ( pos , state , state , 8 ) ; / / TODO check flag 
 } 
 return drained ; 
 } 
 @ @ - 315 , 7 + 320 , 7 @ @ public class DynBucketTest 
 } 
 
 @ Override 
 - public Packet getDescriptionPacket ( ) { 
 + public Packet < ? > getDescriptionPacket ( ) { 
 NBTTagCompound tag = new NBTTagCompound ( ) ; 
 writeToNBT ( tag ) ; 
 return new SPacketUpdateTileEntity ( this . getPos ( ) , this . getBlockMetadata ( ) , tag ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ItemTileDebug . java b / src / test / java / net / minecraftforge / debug / ItemTileDebug . java 
 index 2330b01 . . 0539661 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ItemTileDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ItemTileDebug . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package net . minecraftforge . debug ; 
 
 import net . minecraft . block . BlockContainer ; 
 import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . renderer . GlStateManager ; 
 import net . minecraft . client . renderer . tileentity . TileEntitySpecialRenderer ; 
 import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 @ @ - 125 , 10 + 126 , 10 @ @ public class ItemTileDebug 
 } 
 
 @ Override 
 - public boolean isOpaqueCube ( ) { return false ; } 
 + public boolean isOpaqueCube ( IBlockState state ) { return false ; } 
 
 @ Override 
 - public boolean isFullCube ( ) { return false ; } 
 + public boolean isFullCube ( IBlockState state ) { return false ; } 
 
 @ Override 
 public boolean isVisuallyOpaque ( ) { return false ; } 
 diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 deleted file mode 100644 
 index 3bf068e . . 0000000 
 - - - a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 + + + / dev / null 
 @ @ - 1 , 225 + 0 , 0 @ @ 
 - 
 - package net . minecraftforge . debug ; 
 - 
 - import java . util . ArrayList ; 
 - import java . util . Collections ; 
 - import java . util . List ; 
 - 
 - import net . minecraft . block . Block ; 
 - import net . minecraft . block . material . Material ; 
 - import net . minecraft . block . state . IBlockState ; 
 - import net . minecraft . client . Minecraft ; 
 - import net . minecraft . client . renderer . BlockModelShapes ; 
 - import net . minecraft . client . renderer . block . model . BakedQuad ; 
 - import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 - import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 - import net . minecraft . client . renderer . vertex . VertexFormat ; 
 - import net . minecraft . client . renderer . block . model . IBakedModel ; 
 - import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 - import net . minecraft . creativetab . CreativeTabs ; 
 - import net . minecraft . init . Blocks ; 
 - import net . minecraft . util . EnumFacing ; 
 - import net . minecraft . util . BlockRenderLayer ; 
 - import net . minecraftforge . client . event . ModelBakeEvent ; 
 - import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 - import net . minecraftforge . client . model . ISmartBlockModel ; 
 - import net . minecraftforge . common . MinecraftForge ; 
 - import net . minecraftforge . fml . common . Mod ; 
 - import net . minecraftforge . fml . common . Mod . EventHandler ; 
 - import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 - import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 - import net . minecraftforge . fml . common . registry . GameRegistry ; 
 - import net . minecraftforge . fml . relauncher . Side ; 
 - 
 - import com . google . common . primitives . Ints ; 
 - 
 - @ SuppressWarnings ( " deprecation " ) 
 - @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) 
 - public class LayerBreakingTest 
 - { 
 - public static final boolean ENABLE = true ; 
 - public static TestBlock testBlock ; 
 - 
 - class TestBakedModel implements IFlexibleBakedModel 
 - { 
 - TextureAtlasSprite texture ; 
 - List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; 
 - 
 - private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , int u , int v ) 
 - { 
 - return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; 
 - } 
 - 
 - public TestBakedModel ( TextureAtlasSprite sprite , boolean top ) 
 - { 
 - texture = sprite ; 
 - if ( top ) 
 - { 
 - list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; 
 - } 
 - else 
 - { 
 - list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; 
 - } 
 - } 
 - 
 - @ Override 
 - public boolean isAmbientOcclusion ( ) 
 - { 
 - return true ; 
 - } 
 - 
 - @ Override 
 - public boolean isGui3d ( ) 
 - { 
 - return true ; 
 - } 
 - 
 - @ Override 
 - public boolean isBuiltInRenderer ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public TextureAtlasSprite getParticleTexture ( ) 
 - { 
 - return texture ; 
 - } 
 - 
 - @ Override 
 - public ItemCameraTransforms getItemCameraTransforms ( ) 
 - { 
 - return ItemCameraTransforms . DEFAULT ; 
 - } 
 - 
 - @ Override 
 - public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - @ Override 
 - public List < BakedQuad > getGeneralQuads ( ) 
 - { 
 - return list ; 
 - } 
 - 
 - @ Override 
 - public VertexFormat getFormat ( ) 
 - { 
 - return null ; 
 - } 
 - } ; 
 - 
 - class TestBlock extends Block 
 - { 
 - protected TestBlock ( ) 
 - { 
 - super ( Material . glass ) ; 
 - setHardness ( 7 ) ; 
 - setCreativeTab ( CreativeTabs . tabBlock ) ; 
 - } 
 - 
 - @ Override 
 - public boolean isOpaqueCube ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - public boolean isFullCube ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public boolean canRenderInLayer ( BlockRenderLayer layer ) 
 - { 
 - return layer = = BlockRenderLayer . SOLID | | layer = = BlockRenderLayer . TRANSLUCENT ; 
 - } 
 - } ; 
 - 
 - class SmartModel implements IBakedModel , ISmartBlockModel 
 - { 
 - IFlexibleBakedModel solid ; 
 - IFlexibleBakedModel translucent ; 
 - 
 - @ Override 
 - public List < BakedQuad > getFaceQuads ( EnumFacing p _ 177551 _ 1 _ ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - @ Override 
 - public List < BakedQuad > getGeneralQuads ( ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean isAmbientOcclusion ( ) 
 - { 
 - return true ; 
 - } 
 - 
 - @ Override 
 - public boolean isGui3d ( ) 
 - { 
 - return true ; 
 - } 
 - 
 - @ Override 
 - public boolean isBuiltInRenderer ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public TextureAtlasSprite getParticleTexture ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public ItemCameraTransforms getItemCameraTransforms ( ) 
 - { 
 - return ItemCameraTransforms . DEFAULT ; 
 - } 
 - 
 - @ Override 
 - public IBakedModel handleBlockState ( IBlockState state ) 
 - { 
 - if ( solid = = null ) 
 - { 
 - BlockModelShapes models = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) ; 
 - translucent = new TestBakedModel ( models . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getParticleTexture ( ) , true ) ; 
 - solid = new TestBakedModel ( models . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getParticleTexture ( ) , false ) ; 
 - } 
 - 
 - if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = BlockRenderLayer . SOLID ) 
 - { 
 - return solid ; 
 - } 
 - else 
 - { 
 - return translucent ; 
 - } 
 - } 
 - } ; 
 - 
 - @ SubscribeEvent 
 - public void onModelBakeEvent ( ModelBakeEvent event ) 
 - { 
 - event . modelRegistry . putObject ( new ModelResourceLocation ( " layerbreakingtest : layer _ breaking _ test " ) , new SmartModel ( ) ) ; 
 - } 
 - 
 - @ EventHandler 
 - public void init ( FMLInitializationEvent event ) 
 - { 
 - if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) 
 - { 
 - MinecraftForge . EVENT _ BUS . register ( this ) ; 
 - GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " layer _ breaking _ test " ) ; 
 - } 
 - } 
 - } 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java 
 index 8ae2a8b . . dd7cf87 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java 
 @ @ - 8 , 21 + 8 , 24 @ @ import net . minecraft . block . material . Material ; 
 import net . minecraft . block . properties . IProperty ; 
 import net . minecraft . block . properties . PropertyDirection ; 
 import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 import net . minecraft . client . renderer . entity . Render ; 
 import net . minecraft . client . renderer . entity . RenderLiving ; 
 import net . minecraft . client . renderer . entity . RenderManager ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 - import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 import net . minecraft . creativetab . CreativeTabs ; 
 import net . minecraft . entity . EntityLiving ; 
 import net . minecraft . entity . EntityLivingBase ; 
 import net . minecraft . entity . SharedMonsterAttributes ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 import net . minecraft . tileentity . TileEntity ; 
 - import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumHand ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . client . model . IModel ; 
 @ @ - 93 , 15 + 96 , 15 @ @ public class ModelAnimationDebug 
 } 
 
 @ Override 
 - public boolean isOpaqueCube ( ) { return false ; } 
 + public boolean isOpaqueCube ( IBlockState state ) { return false ; } 
 
 @ Override 
 - public boolean isFullCube ( ) { return false ; } 
 + public boolean isFullCube ( IBlockState state ) { return false ; } 
 
 @ Override 
 public IBlockState onBlockPlaced ( World world , BlockPos pos , EnumFacing facing , float hitX , float hitY , float hitZ , int meta , EntityLivingBase placer ) 
 { 
 - return this . getDefaultState ( ) . withProperty ( FACING , BlockPistonBase . getFacingFromEntity ( world , pos , placer ) ) ; 
 + return this . getDefaultState ( ) . withProperty ( FACING , BlockPistonBase . func _ 185647 _ a ( pos , placer ) ) ; 
 } 
 
 @ Override 
 @ @ - 140 , 7 + 143 , 7 @ @ public class ModelAnimationDebug 
 } * / 
 
 @ Override 
 - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) 
 + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) 
 { 
 if ( world . isRemote ) 
 { 
 @ @ - 209 , 13 + 212 , 13 @ @ public class ModelAnimationDebug 
 " chamber " , " blocks / redstone _ block " , 
 " trunk " , " blocks / end _ stone " 
 ) ; 
 - if ( base instanceof IRetexturableModel ) 
 + if ( base instanceof IRetexturableModel < ? > ) 
 { 
 - base = ( ( IRetexturableModel ) base ) . retexture ( textures ) ; 
 + base = ( ( IRetexturableModel < ? > ) base ) . retexture ( textures ) ; 
 } 
 - if ( ring instanceof IRetexturableModel ) 
 + if ( ring instanceof IRetexturableModel < ? > ) 
 { 
 - ring = ( ( IRetexturableModel ) ring ) . retexture ( textures ) ; 
 + ring = ( ( IRetexturableModel < ? > ) ring ) . retexture ( textures ) ; 
 } 
 IModel model = new MultiModel ( 
 new ResourceLocation ( ModelAnimationDebug . MODID , " builtin / engine " ) , 
 @ @ - 225 , 7 + 228 , 7 @ @ public class ModelAnimationDebug 
 " base " , Pair . < IModel , IModelState > of ( base , TRSRTransformation . identity ( ) ) 
 ) 
 ) ; 
 - return new RenderLiving < EntityChest > ( manager , new AnimationModelBase < EntityChest > ( model , new VertexLighterSmoothAo ( ) ) 
 + return new RenderLiving < EntityChest > ( manager , new AnimationModelBase < EntityChest > ( model , new VertexLighterSmoothAo ( Minecraft . getMinecraft ( ) . func _ 184125 _ al ( ) ) ) 
 { 
 @ Override 
 public void handleEvents ( EntityChest chest , float time , Iterable < Event > pastEvents ) 
 @ @ - 362 , 11 + 365 , 12 @ @ public class ModelAnimationDebug 
 return asm ; 
 } 
 
 - @ Override 
 - public void onDataWatcherUpdate ( int id ) 
 + / / FIXME update health 
 + / * @ Override 
 + public void func _ 184206 _ a ( DataParameter < ? > key ) 
 { 
 - super . onDataWatcherUpdate ( id ) ; 
 - if ( id = = 6 ) / / health 
 + super . func _ 184206 _ a ( key ) ; 
 + if ( field _ 184632 _ c . equals ( key ) ) / / health 
 { 
 if ( cycleLength = = null ) 
 { 
 @ @ - 374 , 7 + 378 , 7 @ @ public class ModelAnimationDebug 
 } 
 cycleLength . setValue ( getHealth ( ) / 5 ) ; 
 } 
 - } 
 + } * / 
 
 @ Override 
 protected void applyEntityAttributes ( ) 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 index 524b546 . . 7f3dfcc 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 @ @ - 1 , 37 + 1 , 36 @ @ 
 package net . minecraftforge . debug ; 
 
 import java . util . ArrayList ; 
 - import java . util . Collections ; 
 import java . util . List ; 
 
 import net . minecraft . block . BlockContainer ; 
 import net . minecraft . block . material . Material ; 
 import net . minecraft . block . properties . IProperty ; 
 import net . minecraft . block . properties . PropertyInteger ; 
 - import net . minecraft . block . state . BlockState ; 
 import net . minecraft . block . state . BlockStateContainer ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . IBakedModel ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . block . model . ItemOverrideList ; 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 import net . minecraft . client . renderer . block . statemap . StateMapperBase ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 - import net . minecraft . client . renderer . block . model . IBakedModel ; 
 - import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 import net . minecraft . creativetab . CreativeTabs ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . tileentity . TileEntity ; 
 + import net . minecraft . util . EnumBlockRenderType ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumHand ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . util . math . Vec3d ; 
 - import net . minecraft . util . EnumFacing ; 
 - import net . minecraft . util . Vec3 ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . client . event . ModelBakeEvent ; 
 - import net . minecraftforge . client . model . ISmartBlockModel ; 
 - import net . minecraftforge . client . model . ISmartItemModel ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . common . property . ExtendedBlockState ; 
 @ @ - 45 , 9 + 44 , 9 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 
 + import com . google . common . collect . ImmutableList ; 
 import com . google . common . primitives . Ints ; 
 
 - @ SuppressWarnings ( " deprecation " ) 
 @ Mod ( modid = ModelBakeEventDebug . MODID , version = ModelBakeEventDebug . VERSION ) 
 public class ModelBakeEventDebug 
 { 
 @ @ - 136 , 13 + 135 , 13 @ @ public class ModelBakeEventDebug 
 } 
 
 @ Override 
 - public int getRenderType ( ) { return 3 ; } 
 + public EnumBlockRenderType getRenderType ( IBlockState state ) { return EnumBlockRenderType . MODEL ; } 
 
 @ Override 
 - public boolean isOpaqueCube ( ) { return false ; } 
 + public boolean isOpaqueCube ( IBlockState state ) { return false ; } 
 
 @ Override 
 - public boolean isFullCube ( ) { return false ; } 
 + public boolean isFullCube ( IBlockState state ) { return false ; } 
 
 @ Override 
 public boolean isVisuallyOpaque ( ) { return false ; } 
 @ @ - 154 , 7 + 153 , 7 @ @ public class ModelBakeEventDebug 
 } 
 
 @ Override 
 - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) 
 + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) 
 { 
 TileEntity te = world . getTileEntity ( pos ) ; 
 if ( te instanceof CustomTileEntity ) 
 @ @ - 210 , 30 + 209 , 18 @ @ public class ModelBakeEventDebug 
 } 
 } 
 
 - public static class CustomModel implements IBakedModel , ISmartBlockModel , ISmartItemModel 
 + public static class CustomModel implements IBakedModel 
 { 
 private final TextureAtlasSprite base , overlay ; 
 / / private boolean hasStateSet = false ; 
 - private final IExtendedBlockState state ; 
 
 public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay ) 
 { 
 - this ( base , overlay , null ) ; 
 - } 
 - 
 - public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay , IExtendedBlockState state ) 
 - { 
 this . base = base ; 
 this . overlay = overlay ; 
 - this . state = state ; 
 - } 
 - 
 - @ Override 
 - public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 - { 
 - return Collections . emptyList ( ) ; 
 } 
 
 + / / TODO update to builder 
 private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , float u , float v ) 
 { 
 return new int [ ] { 
 @ @ - 258 , 12 + 245 , 14 @ @ public class ModelBakeEventDebug 
 vertexToInts ( ( float ) v2 . xCoord , ( float ) v2 . yCoord , ( float ) v2 . zCoord , - 1 , texture , 0 , 16 ) , 
 vertexToInts ( ( float ) v3 . xCoord , ( float ) v3 . yCoord , ( float ) v3 . zCoord , - 1 , texture , 16 , 16 ) , 
 vertexToInts ( ( float ) v4 . xCoord , ( float ) v4 . yCoord , ( float ) v4 . zCoord , - 1 , texture , 16 , 0 ) 
 - ) , - 1 , side ) ; 
 + ) , - 1 , side , texture , DefaultVertexFormats . BLOCK ) ; 
 } 
 
 @ Override 
 - public List < BakedQuad > getGeneralQuads ( ) 
 + public List < BakedQuad > func _ 188616 _ a ( IBlockState state , EnumFacing side , long rand ) 
 { 
 + if ( side ! = null | | ! ( state instanceof IExtendedBlockState ) ) return ImmutableList . of ( ) ; 
 + IExtendedBlockState exState = ( IExtendedBlockState ) state ; 
 int len = cubeSize * 5 + 1 ; 
 List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; 
 for ( EnumFacing f : EnumFacing . values ( ) ) 
 @ @ - 273 , 13 + 262 , 10 @ @ public class ModelBakeEventDebug 
 { 
 for ( int j = 0 ; j < cubeSize ; j + + ) 
 { 
 - if ( state ! = null ) 
 + Integer value = exState . getValue ( properties [ f . ordinal ( ) ] ) ; 
 + if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) 
 { 
 - Integer value = state . getValue ( properties [ f . ordinal ( ) ] ) ; 
 - if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) 
 - { 
 - ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; 
 - } 
 + ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; 
 } 
 } 
 } 
 @ @ - 294 , 29 + 280 , 16 @ @ public class ModelBakeEventDebug 
 public boolean isAmbientOcclusion ( ) { return true ; } 
 
 @ Override 
 - public boolean isBuiltInRenderer ( ) { return false ; } 
 + public boolean func _ 188618 _ c ( ) { return false ; } 
 
 @ Override 
 public TextureAtlasSprite getParticleTexture ( ) { return this . base ; } 
 
 @ Override 
 - public ItemCameraTransforms getItemCameraTransforms ( ) 
 - { 
 - return ItemCameraTransforms . DEFAULT ; 
 - } 
 + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } 
 
 @ Override 
 - public IBakedModel handleBlockState ( IBlockState state ) 
 - { 
 - return new CustomModel ( base , overlay , ( IExtendedBlockState ) state ) ; 
 - } 
 - 
 - @ Override 
 - public IBakedModel handleItemState ( ItemStack stack ) 
 - { 
 - IExtendedBlockState itemState = ( ( IExtendedBlockState ) CustomModelBlock . instance . getDefaultState ( ) ) . withProperty ( properties [ 1 ] , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ; 
 - return new CustomModel ( base , overlay , itemState ) ; 
 - } 
 + public ItemOverrideList func _ 188617 _ f ( ) { return ItemOverrideList . field _ 188022 _ a ; } 
 } 
 
 private static Vec3d rotate ( Vec3d vec , EnumFacing side ) 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 index a1042a8 . . caac6a9 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 @ @ - 26 , 11 + 26 , 13 @ @ import net . minecraft . creativetab . CreativeTabs ; 
 import net . minecraft . entity . EntityLivingBase ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 import net . minecraft . tileentity . TileEntity ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . util . math . MathHelper ; 
 import net . minecraft . util . text . TextComponentString ; 
 import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumHand ; 
 import net . minecraft . util . ITickable ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . world . IBlockAccess ; 
 @ @ - 162 , 7 + 164 , 7 @ @ public class ModelLoaderRegistryDebug 
 } 
 
 @ Override 
 - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) 
 + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) 
 { 
 if ( world . isRemote ) 
 { 
 @ @ - 249 , 7 + 251 , 7 @ @ public class ModelLoaderRegistryDebug 
 } 
 
 @ Override 
 - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) 
 + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) 
 { 
 if ( world . getTileEntity ( pos ) = = null ) world . setTileEntity ( pos , new OBJTesseractTileEntity ( ) ) ; 
 OBJTesseractTileEntity tileEntity = ( OBJTesseractTileEntity ) world . getTileEntity ( pos ) ; 
 @ @ - 278 , 8 + 280 , 9 @ @ public class ModelLoaderRegistryDebug 
 
 if ( world . isRemote ) 
 { 
 - OBJBakedModel objBaked = ( OBJBakedModel ) Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getModelFromBlockState ( state , world , pos ) ; 
 - objBaked . scheduleRebake ( ) ; / / not necessarily needed for this specific case , but is available 
 + / / wtf 
 + / / OBJBakedModel objBaked = ( OBJBakedModel ) Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getModelFromBlockState ( state , world , pos ) ; 
 + / / objBaked . scheduleRebake ( ) ; / / not necessarily needed for this specific case , but is available 
 } 
 world . markBlockRangeForRenderUpdate ( pos , pos ) ; 
 return false ; 
 @ @ - 429 , 13 + 432 , 6 @ @ public class ModelLoaderRegistryDebug 
 } 
 
 @ Override 
 - @ SideOnly ( Side . CLIENT ) 
 - public IBlockState getStateForEntityRender ( IBlockState state ) 
 - { 
 - return this . getDefaultState ( ) . withProperty ( FACING , EnumFacing . NORTH ) ; 
 - } 
 - 
 - @ Override 
 public BlockStateContainer createBlockState ( ) 
 { 
 return new ExtendedBlockState ( this , new IProperty [ ] { FACING } , new IUnlistedProperty [ ] { OBJModel . OBJProperty . instance } ) ; 
 @ @ - 506 , 7 + 502 , 7 @ @ public class ModelLoaderRegistryDebug 
 } 
 
 @ Override 
 - public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) 
 + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumHand hand , ItemStack heldItem , EnumFacing side , float hitX , float hitY , float hitZ ) 
 { 
 if ( world . getTileEntity ( pos ) ! = null & & world . getTileEntity ( pos ) instanceof OBJVertexColoring2TileEntity ) 
 { 
 @ @ - 531 , 6 + 527 , 7 @ @ public class ModelLoaderRegistryDebug 
 if ( this . worldObj . isRemote ) 
 { 
 FMLLog . info ( " % b " , shouldIncrement ) ; 
 + / * 
 IBakedModel bakedModel = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getModelFromBlockState ( this . worldObj . getBlockState ( this . pos ) , this . worldObj , this . pos ) ; 
 if ( bakedModel ! = null & & bakedModel instanceof OBJBakedModel ) 
 { 
 @ @ - 552 , 6 + 549 , 7 @ @ public class ModelLoaderRegistryDebug 
 { 
 FMLLog . info ( " incrementing " ) ; 
 String name = materialNames . get ( index ) ; 
 + / / no 
 objBaked . getModel ( ) . getMatLib ( ) . changeMaterialColor ( name , 0xFF000000 ) ; 
 objBaked . scheduleRebake ( ) ; 
 index + + ; 
 @ @ - 568 , 12 + 566 , 13 @ @ public class ModelLoaderRegistryDebug 
 String name = materialNames . get ( index ) ; 
 if ( ! name . equals ( OBJModel . Material . WHITE _ NAME ) ) 
 { 
 + / / FIXME 
 objBaked . getModel ( ) . getMatLib ( ) . changeMaterialColor ( name , color ) ; 
 objBaked . scheduleRebake ( ) ; 
 } 
 } 
 this . worldObj . markBlockRangeForRenderUpdate ( this . pos , this . pos ) ; 
 - } 
 + } * / 
 } 
 } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java b / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java 
 index 4aa3c04 . . 42906bf 100644 
 - - - a / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / MultiLayerModelDebug . java 
 @ @ - 2 , 6 + 2 , 7 @ @ package net . minecraftforge . debug ; 
 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 import net . minecraft . creativetab . CreativeTabs ; 
 import net . minecraft . item . Item ; 
 @ @ - 36 , 10 + 37 , 10 @ @ public class MultiLayerModelDebug 
 } 
 
 @ Override 
 - public boolean isOpaqueCube ( ) { return false ; } 
 + public boolean isOpaqueCube ( IBlockState state ) { return false ; } 
 
 @ Override 
 - public boolean isFullCube ( ) { return false ; } 
 + public boolean isFullCube ( IBlockState state ) { return false ; } 
 
 @ Override 
 public boolean canRenderInLayer ( BlockRenderLayer layer ) 
 diff - - git a / src / test / java / net / minecraftforge / test / FOVModifierTest . java b / src / test / java / net / minecraftforge / test / FOVModifierTest . java 
 index c7ded0c . . 53f6869 100644 
 - - - a / src / test / java / net / minecraftforge / test / FOVModifierTest . java 
 + + + b / src / test / java / net / minecraftforge / test / FOVModifierTest . java 
 @ @ - 20 , 7 + 20 , 7 @ @ public class FOVModifierTest { 
 
 @ SubscribeEvent 
 public void getFOVModifier ( EntityViewRenderEvent . FOVModifier event ) { 
 - if ( event . block . getMaterial ( ) = = Material . water ) 
 + if ( event . getState ( ) . func _ 185904 _ a ( ) = = Material . water ) 
 event . setFOV ( event . getFOV ( ) / 60 . 0f * 50 . 0f ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch 
 index 523a8df . . a946cbd 100644 
 - - - a / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 161 , 7 + 161 , 7 @ @ 
 } 
 
 protected ItemStack func _ 180643 _ i ( IBlockState p _ 180643 _ 1 _ ) 
 - @ @ - 971 , 6 + 989 , 1011 @ @ 
 + @ @ - 971 , 6 + 989 , 1019 @ @ 
 return Block . EnumOffsetType . NONE ; 
 } 
 
 @ @ - 1145 , 6 + 1145 , 14 @ @ 
 + return type ! = null & & type . equals ( getHarvestTool ( state ) ) ; 
 + } 
 + 
 + + / * * 
 + + * Can return IExtendedBlockState 
 + + * / 
 + + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 + + { 
 + + return func _ 176221 _ a ( state , world , pos ) ; 
 + + } 
 + + 
 + / / For Internal use only to capture droped items inside getDrops 
 + protected static ThreadLocal < Boolean > captureDrops = new ThreadLocal < Boolean > ( ) 
 + { 
 diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 new file mode 100644 
 index 0000000 . . 90b08e7 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / block / state / BlockState . java 
 + + + + . . / src - work / minecraft / net / minecraft / block / state / BlockState . java 
 + @ @ - 47 , 6 + 47 , 16 @ @ 
 + 
 + public BlockState ( Block p _ i45663 _ 1 _ , IProperty . . . p _ i45663 _ 2 _ ) 
 + { 
 + + this ( p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , null ) ; 
 + + } 
 + + 
 + + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) 
 + + { 
 + + return new StateImplementation ( block , properties ) ; 
 + + } 
 + + 
 + + protected BlockState ( Block p _ i45663 _ 1 _ , IProperty [ ] p _ i45663 _ 2 _ , ImmutableMap unlistedProperties ) 
 + + { 
 + this . field _ 177627 _ c = p _ i45663 _ 1 _ ; 
 + Arrays . sort ( p _ i45663 _ 2 _ , new Comparator ( ) 
 + { 
 + @ @ - 70 , 7 + 80 , 7 @ @ 
 + { 
 + List list = ( List ) iterator . next ( ) ; 
 + Map map = MapPopulator . func _ 179400 _ b ( this . field _ 177624 _ d , list ) ; 
 + - BlockState . StateImplementation stateimplementation = new BlockState . StateImplementation ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , null ) ; 
 + + BlockState . StateImplementation stateimplementation = createState ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , unlistedProperties ) ; 
 + linkedhashmap . put ( map , stateimplementation ) ; 
 + arraylist . add ( stateimplementation ) ; 
 + } 
 + @ @ - 231 , 5 + 241 , 10 @ @ 
 + { 
 + this ( p _ i45661 _ 1 _ , p _ i45661 _ 2 _ ) ; 
 + } 
 + + 
 + + public ImmutableTable < IProperty , Comparable , IBlockState > getPropertyValueTable ( ) 
 + + { 
 + + return field _ 177238 _ c ; 
 + + } 
 + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 new file mode 100644 
 index 0000000 . . a24be3d 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + @ @ - 129 , 6 + 129 , 12 @ @ 
 + ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; 
 + } 
 + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) 
 + + { 
 + + IBlockState extendedState = block . getExtendedState ( p _ 175022 _ 1 _ , p _ 175022 _ 2 _ , p _ 175022 _ 3 _ ) ; 
 + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; 
 + + } 
 + + 
 + return ibakedmodel ; 
 + } 
 + 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch 
 new file mode 100644 
 index 0000000 . . dbe123b 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / ItemModelMesher . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / ItemModelMesher . java 
 + @ @ - 52 , 6 + 52 , 11 @ @ 
 + } 
 + } 
 + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartItemModel ) 
 + + { 
 + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartItemModel ) ibakedmodel ) . handleItemState ( p _ 178089 _ 1 _ ) ; 
 + + } 
 + + 
 + if ( ibakedmodel = = null ) 
 + { 
 + ibakedmodel = this . field _ 178090 _ d . func _ 174951 _ a ( ) ; 
 diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch 
 new file mode 100644 
 index 0000000 . . 9b2da14 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / resources / model / ModelManager . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / resources / model / ModelManager . java 
 + @ @ - 28 , 6 + 28 , 7 @ @ 
 + ModelBakery modelbakery = new ModelBakery ( p _ 110549 _ 1 _ , this . field _ 174956 _ b , this . field _ 174957 _ c ) ; 
 + this . field _ 174958 _ a = modelbakery . func _ 177570 _ a ( ) ; 
 + this . field _ 174955 _ d = ( IBakedModel ) this . field _ 174958 _ a . func _ 82594 _ a ( ModelBakery . field _ 177604 _ a ) ; 
 + + net . minecraftforge . client . ForgeHooksClient . onModelBake ( this , this . field _ 174958 _ a , modelbakery ) ; 
 + this . field _ 174957 _ c . func _ 178124 _ c ( ) ; 
 + } 
 + 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 9b9b75e . . d0126b6 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 2 , 41 + 2 , 31 @ @ package net . minecraftforge . client ; 
 
 import static net . minecraftforge . common . ForgeVersion . Status . BETA ; 
 import static net . minecraftforge . common . ForgeVersion . Status . BETA _ OUTDATED ; 
 - import java . util . Random ; 
 - import javax . imageio . ImageIO ; 
 import net . minecraft . block . Block ; 
 - import net . minecraft . block . BlockBed ; 
 - import net . minecraft . block . BlockLiquid ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . audio . ISound ; 
 import net . minecraft . client . audio . SoundEventAccessorComposite ; 
 import net . minecraft . client . audio . SoundManager ; 
 - import net . minecraft . client . entity . EntityPlayerSP ; 
 import net . minecraft . client . gui . FontRenderer ; 
 import net . minecraft . client . gui . GuiMainMenu ; 
 import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . client . model . ModelBase ; 
 - import net . minecraft . client . model . ModelBiped ; 
 import net . minecraft . client . renderer . EntityRenderer ; 
 - import net . minecraft . client . renderer . GlStateManager ; 
 import net . minecraft . client . renderer . RenderGlobal ; 
 - import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . client . renderer . texture . TextureManager ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . client . resources . model . ModelBakery ; 
 + import net . minecraft . client . resources . model . ModelManager ; 
 import net . minecraft . client . settings . GameSettings ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityLivingBase ; 
 - import net . minecraft . entity . item . EntityItem ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 - import net . minecraft . init . Blocks ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . BlockPos ; 
 - import net . minecraft . util . ChatComponentTranslation ; 
 import net . minecraft . util . EnumChatFormatting ; 
 - import net . minecraft . util . EnumFacing ; 
 - import net . minecraft . util . MathHelper ; 
 + import net . minecraft . util . IRegistry ; 
 import net . minecraft . util . MovingObjectPosition ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 @ @ - 45 , 6 + 35 , 7 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 import net . minecraftforge . client . event . EntityViewRenderEvent ; 
 import net . minecraftforge . client . event . FOVUpdateEvent ; 
 import net . minecraftforge . client . event . GuiScreenEvent ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 import net . minecraftforge . client . event . MouseEvent ; 
 import net . minecraftforge . client . event . RenderHandEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 @ @ - 54 , 14 + 45 , 9 @ @ import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . common . MinecraftForge ; 
 - import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 - import net . minecraftforge . fml . client . registry . RenderingRegistry ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 - import org . lwjgl . LWJGLException ; 
 - import org . lwjgl . opengl . Display ; 
 + 
 import org . lwjgl . opengl . GL11 ; 
 - import org . lwjgl . opengl . PixelFormat ; 
 / / import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; 
 / / import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; 
 
 @ @ - 470 , 4 + 456 , 9 @ @ public class ForgeHooksClient 
 } 
 } 
 * / 
 + 
 + public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 new file mode 100644 
 index 0000000 . . 502454f 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package net . minecraftforge . client . event ; 
 + 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + import net . minecraft . client . resources . model . ModelBakery ; 
 + import net . minecraft . client . resources . model . ModelManager ; 
 + import net . minecraft . util . IRegistry ; 
 + 
 + / * * 
 + * Fired when the ModelManager is notified of the resource manager reloading . 
 + * Called after model registry is setup , but before it ' s passed to BlockModelShapes . 
 + * / 
 + public class ModelBakeEvent extends Event 
 + { 
 + public final ModelManager modelManager ; 
 + public final IRegistry modelRegistry ; 
 + public final ModelBakery modelBakery ; 
 + 
 + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + { 
 + this . modelManager = modelManager ; 
 + this . modelRegistry = modelRegistry ; 
 + this . modelBakery = modelBakery ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java 
 new file mode 100644 
 index 0000000 . . 37dee84 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + 
 + public interface ISmartBlockModel extends IBakedModel 
 + { 
 + IBakedModel handleBlockState ( IBlockState state ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java 
 new file mode 100644 
 index 0000000 . . 7973271 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + 
 + public interface ISmartItemModel extends IBakedModel 
 + { 
 + IBakedModel handleItemState ( ItemStack stack ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 new file mode 100644 
 index 0000000 . . ef54140 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 @ @ - 0 , 0 + 1 , 138 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . properties . IProperty ; 
 + import net . minecraft . block . state . BlockState ; 
 + import net . minecraft . block . state . IBlockState ; 
 + 
 + import com . google . common . base . Optional ; 
 + import com . google . common . base . Predicates ; 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . ImmutableSet ; 
 + import com . google . common . collect . ImmutableTable ; 
 + import com . google . common . collect . Iterables ; 
 + 
 + public class ExtendedBlockState extends BlockState 
 + { 
 + private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; 
 + 
 + public ExtendedBlockState ( Block blockIn , IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) 
 + { 
 + super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; 
 + ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; 
 + for ( IUnlistedProperty < ? > property : unlistedProperties ) 
 + { 
 + builder . add ( property ) ; 
 + } 
 + this . unlistedProperties = builder . build ( ) ; 
 + } 
 + 
 + private static ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > buildUnlistedMap ( IUnlistedProperty < ? > [ ] unlistedProperties ) 
 + { 
 + ImmutableMap . Builder < IUnlistedProperty < ? > , Optional < ? > > builder = ImmutableMap . < IUnlistedProperty < ? > , Optional < ? > > builder ( ) ; 
 + for ( IUnlistedProperty < ? > p : unlistedProperties ) 
 + { 
 + builder . put ( p , Optional . absent ( ) ) ; 
 + } 
 + return builder . build ( ) ; 
 + } 
 + 
 + @ Override 
 + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) 
 + { 
 + return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; 
 + } 
 + 
 + protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState 
 + { 
 + private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; 
 + private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; 
 + 
 + protected ExtendedStateImplementation ( Block block , ImmutableMap properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) 
 + { 
 + super ( block , properties ) ; 
 + this . unlistedProperties = unlistedProperties ; 
 + this . propertyValueTable = table ; 
 + } 
 + 
 + @ Override 
 + public IBlockState withProperty ( IProperty property , Comparable value ) 
 + { 
 + if ( ! this . getProperties ( ) . containsKey ( property ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; 
 + } 
 + else if ( ! property . getAllowedValues ( ) . contains ( value ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; 
 + } 
 + else 
 + { 
 + if ( this . getProperties ( ) . get ( property ) = = value ) 
 + { 
 + return this ; 
 + } 
 + if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) 
 + { / / no dynamic properties present , looking up in the normal table 
 + return super . withProperty ( property , value ) ; 
 + } 
 + Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; 
 + map . put ( property , value ) ; 
 + ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; 
 + table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; 
 + return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) ; 
 + } 
 + } 
 + 
 + public < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) 
 + { 
 + if ( ! this . unlistedProperties . containsKey ( property ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; 
 + } 
 + if ( ! property . isValid ( value ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; 
 + } 
 + Map < IUnlistedProperty < ? > , Optional < ? > > newMap = new HashMap < IUnlistedProperty < ? > , Optional < ? > > ( unlistedProperties ) ; 
 + newMap . put ( property , Optional . fromNullable ( value ) ) ; 
 + if ( Iterables . all ( newMap . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) 
 + { / / no dynamic properties , lookup normal state 
 + return ( IExtendedBlockState ) normalMap . get ( getProperties ( ) ) ; 
 + } 
 + return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) ; 
 + } 
 + 
 + public Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) 
 + { 
 + return Collections . unmodifiableCollection ( unlistedProperties . keySet ( ) ) ; 
 + } 
 + 
 + public < V > V getValue ( IUnlistedProperty < V > property ) 
 + { 
 + if ( ! this . unlistedProperties . containsKey ( property ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot get unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; 
 + } 
 + return property . getType ( ) . cast ( this . unlistedProperties . get ( property ) . orNull ( ) ) ; 
 + } 
 + 
 + public ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) 
 + { 
 + return unlistedProperties ; 
 + } 
 + 
 + @ Override 
 + public void buildPropertyValueTable ( Map map ) 
 + { 
 + this . normalMap = map ; 
 + super . buildPropertyValueTable ( map ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java 
 new file mode 100644 
 index 0000000 . . 218e427 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + import java . util . Collection ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + 
 + import com . google . common . base . Optional ; 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + public interface IExtendedBlockState extends IBlockState 
 + { 
 + Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) ; 
 + 
 + < V > V getValue ( IUnlistedProperty < V > property ) ; 
 + 
 + < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) ; 
 + 
 + ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java 
 new file mode 100644 
 index 0000000 . . da4b702 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + public interface IUnlistedProperty < V > 
 + { 
 + String getName ( ) ; 
 + 
 + boolean isValid ( V value ) ; 
 + 
 + Class < V > getType ( ) ; 
 + 
 + String valueToString ( V value ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / Properties . java b / src / main / java / net / minecraftforge / common / property / Properties . java 
 new file mode 100644 
 index 0000000 . . b24e6be 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / Properties . java 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + import java . lang . reflect . InvocationTargetException ; 
 + 
 + import net . minecraft . block . properties . IProperty ; 
 + 
 + import org . apache . commons . lang3 . reflect . ConstructorUtils ; 
 + 
 + public class Properties 
 + { 
 + public static < P extends IProperty , V > IUnlistedProperty < V > toUnlisted ( P property ) 
 + { 
 + return new PropertyAdapter ( property ) ; 
 + } 
 + 
 + public static class PropertyAdapter < V extends Comparable > implements IUnlistedProperty < V > 
 + { 
 + private final IProperty parent ; 
 + 
 + public PropertyAdapter ( IProperty parent ) 
 + { 
 + this . parent = parent ; 
 + } 
 + 
 + public String getName ( ) 
 + { 
 + return parent . getName ( ) ; 
 + } 
 + 
 + public boolean isValid ( V value ) 
 + { 
 + return parent . getAllowedValues ( ) . contains ( value ) ; 
 + } 
 + 
 + public Class < V > getType ( ) 
 + { 
 + return parent . getValueClass ( ) ; 
 + } 
 + 
 + public String valueToString ( V value ) 
 + { 
 + return parent . getName ( value ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc 
 index c2381c6 . . f59ef26 100644 
 - - - a / src / main / resources / forge . exc 
 + + + b / src / main / resources / forge . exc 
 @ @ - 26 , 4 + 26 , 5 @ @ net / minecraft / block / BlockFire . tryCatchFire ( Lnet / minecraft / world / World ; Lnet / minec 
 net / minecraft / block / BlockSkull . getDrops ( Lnet / minecraft / world / IBlockAccess ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / block / state / IBlockState ; I ) Ljava / util / List ; = | p _ 180663 _ 1 _ , p _ 180663 _ 2 _ , p _ 180663 _ 3 _ , fortune 
 net / minecraft / item / ItemDye . applyBonemeal ( Lnet / minecraft / item / ItemStack ; Lnet / minecraft / world / World ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / entity / player / EntityPlayer ; ) Z = | p _ 179234 _ 0 _ , p _ 179234 _ 1 _ , p _ 179234 _ 2 _ , player 
 net / minecraft / server / management / ItemInWorldManager . removeBlock ( Lnet / minecraft / util / BlockPos ; Z ) Z = | p _ 180235 _ 1 _ , canHarvest 
 - net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font 
 \ No newline at end of file 
 + net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font 
 + net / minecraft / block / state / BlockState . < init > ( Lnet / minecraft / block / Block ; [ Lnet / minecraft / block / properties / IProperty ; Lcom / google / common / collect / ImmutableMap ; ) V = | p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , unlistedProperties 
 diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg 
 index ff42e14 . . 6c78cf2 100644 
 - - - a / src / main / resources / forge _ at . cfg 
 + + + b / src / main / resources / forge _ at . cfg 
 @ @ - 119 , 4 + 119 , 7 @ @ public net . minecraft . world . gen . ChunkProviderServer field _ 73251 _ h # worldObj 
 # RenderEntityItem 
 protected net . minecraft . client . renderer . entity . RenderEntityItem func _ 177078 _ a ( Lnet / minecraft / item / ItemStack ; ) I # getMiniItemCount 
 public net . minecraft . item . crafting . RecipesBanners $ RecipeAddPattern 
 - public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern 
 \ No newline at end of file 
 + public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern 
 + protected net . minecraft . block . state . BlockState $ StateImplementation 
 + protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V 
 + protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 new file mode 100644 
 index 0000000 . . c8de9a4 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 @ @ - 0 , 0 + 1 , 354 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . block . BlockContainer ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . properties . IProperty ; 
 + import net . minecraft . block . properties . PropertyInteger ; 
 + import net . minecraft . block . state . BlockState ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . ItemMeshDefinition ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . entity . RenderItem ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . tileentity . TileEntity ; 
 + import net . minecraft . util . BlockPos ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . Vec3 ; 
 + import net . minecraft . world . IBlockAccess ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 + import net . minecraftforge . client . model . ISmartBlockModel ; 
 + import net . minecraftforge . client . model . ISmartItemModel ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . common . property . ExtendedBlockState ; 
 + import net . minecraftforge . common . property . IExtendedBlockState ; 
 + import net . minecraftforge . common . property . IUnlistedProperty ; 
 + import net . minecraftforge . common . property . Properties ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . SidedProxy ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + import com . google . common . primitives . Ints ; 
 + 
 + @ Mod ( modid = ModelBakeEventDebug . MODID , version = ModelBakeEventDebug . VERSION ) 
 + public class ModelBakeEventDebug 
 + { 
 + public static final String MODID = " ForgeDebugModelBakeEvent " ; 
 + public static final String VERSION = " 1 . 0 " ; 
 + public static final int cubeSize = 3 ; 
 + 
 + private static String blockName = MODID . toLowerCase ( ) + " : " + CustomModelBlock . name ; 
 + 
 + public static final IUnlistedProperty < Integer > [ ] properties = new IUnlistedProperty [ 6 ] ; 
 + 
 + static 
 + { 
 + for ( EnumFacing f : EnumFacing . values ( ) ) 
 + { 
 + properties [ f . ordinal ( ) ] = Properties . toUnlisted ( PropertyInteger . create ( f . getName ( ) , 0 , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ) ; 
 + } 
 + } 
 + 
 + @ SidedProxy ( serverSide = " net . minecraftforge . debug . ModelBakeEventDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . ModelBakeEventDebug $ ClientProxy " ) 
 + public static CommonProxy proxy ; 
 + 
 + @ EventHandler 
 + public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } 
 + 
 + @ EventHandler 
 + public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } 
 + 
 + public static class CommonProxy 
 + { 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; 
 + GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; 
 + } 
 + 
 + public void postInit ( FMLPostInitializationEvent event ) { } 
 + } 
 + 
 + public static class ClientProxy extends CommonProxy 
 + { 
 + private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; 
 + 
 + @ Override 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + super . init ( event ) ; 
 + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 + } 
 + 
 + @ Override 
 + public void postInit ( FMLPostInitializationEvent event ) { 
 + super . postInit ( event ) ; 
 + Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 + RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; 
 + if ( renderItem ! = null ) 
 + { 
 + renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { 
 + public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 + { 
 + return modelLocation ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + } 
 + 
 + public static class BakeEventHandler 
 + { 
 + public static final BakeEventHandler instance = new BakeEventHandler ( ) ; 
 + 
 + private BakeEventHandler ( ) { } ; 
 + 
 + @ SubscribeEvent 
 + public void onModelBakeEvent ( ModelBakeEvent event ) 
 + { 
 + TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; 
 + TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; 
 + event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; 
 + } 
 + } 
 + 
 + public static class CustomModelBlock extends BlockContainer 
 + { 
 + public static final CustomModelBlock instance = new CustomModelBlock ( ) ; 
 + public static final String name = " custom _ model _ block " ; 
 + 
 + private CustomModelBlock ( ) 
 + { 
 + super ( Material . iron ) ; 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + setUnlocalizedName ( MODID + " : " + name ) ; 
 + } 
 + 
 + @ Override 
 + public int getRenderType ( ) { return 3 ; } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( ) { return false ; } 
 + 
 + @ Override 
 + public boolean isFullCube ( ) { return false ; } 
 + 
 + @ Override 
 + public boolean isVisuallyOpaque ( ) { return false ; } 
 + 
 + @ Override 
 + public TileEntity createNewTileEntity ( World world , int meta ) 
 + { 
 + return new CustomTileEntity ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) 
 + { 
 + TileEntity te = world . getTileEntity ( pos ) ; 
 + if ( te instanceof CustomTileEntity ) 
 + { 
 + CustomTileEntity cte = ( CustomTileEntity ) te ; 
 + Vec3 vec = revRotate ( new Vec3 ( hitX - . 5 , hitY - . 5 , hitZ - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + IUnlistedProperty property = properties [ side . ordinal ( ) ] ; 
 + Integer value = ( Integer ) cte . getState ( ) . getValue ( property ) ; 
 + if ( value = = null ) value = 0 ; 
 + value ^ = ( 1 < < ( cubeSize * ( ( int ) ( vec . xCoord * ( cubeSize - . 0001 ) ) ) + ( ( int ) ( vec . zCoord * ( cubeSize - . 0001 ) ) ) ) ) ; 
 + cte . setState ( cte . getState ( ) . withProperty ( property , value ) ) ; 
 + world . markBlockRangeForRenderUpdate ( pos , pos ) ; 
 + } 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 + { 
 + TileEntity te = world . getTileEntity ( pos ) ; 
 + if ( te instanceof CustomTileEntity ) 
 + { 
 + CustomTileEntity cte = ( CustomTileEntity ) te ; 
 + return cte . getState ( ) ; 
 + } 
 + return state ; 
 + } 
 + 
 + @ Override 
 + protected BlockState createBlockState ( ) 
 + { 
 + return new ExtendedBlockState ( this , new IProperty [ 0 ] , properties ) ; 
 + } 
 + } 
 + 
 + public static class CustomTileEntity extends TileEntity 
 + { 
 + private IExtendedBlockState state ; 
 + public CustomTileEntity ( ) { } 
 + 
 + public IExtendedBlockState getState ( ) 
 + { 
 + if ( state = = null ) 
 + { 
 + state = ( IExtendedBlockState ) getBlockType ( ) . getDefaultState ( ) ; 
 + } 
 + return state ; 
 + } 
 + 
 + public void setState ( IExtendedBlockState state ) 
 + { 
 + this . state = state ; 
 + } 
 + } 
 + 
 + public static class CustomModel implements IBakedModel , ISmartBlockModel , ISmartItemModel 
 + { 
 + private final TextureAtlasSprite base , overlay ; 
 + private boolean hasStateSet = false ; 
 + private final IExtendedBlockState state ; 
 + 
 + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay ) 
 + { 
 + this ( base , overlay , null ) ; 
 + } 
 + 
 + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay , IExtendedBlockState state ) 
 + { 
 + this . base = base ; 
 + this . overlay = overlay ; 
 + this . state = state ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , float u , float v ) 
 + { 
 + return new int [ ] { 
 + Float . floatToRawIntBits ( x ) , 
 + Float . floatToRawIntBits ( y ) , 
 + Float . floatToRawIntBits ( z ) , 
 + color , 
 + Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , 
 + Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 
 + 0 
 + } ; 
 + } 
 + 
 + private BakedQuad createSidedBakedQuad ( float x1 , float x2 , float z1 , float z2 , float y , TextureAtlasSprite texture , EnumFacing side ) 
 + { 
 + Vec3 v1 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + Vec3 v2 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + Vec3 v3 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + Vec3 v4 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + return new BakedQuad ( Ints . concat ( 
 + vertexToInts ( ( float ) v1 . xCoord , ( float ) v1 . yCoord , ( float ) v1 . zCoord , - 1 , texture , 0 , 0 ) , 
 + vertexToInts ( ( float ) v2 . xCoord , ( float ) v2 . yCoord , ( float ) v2 . zCoord , - 1 , texture , 0 , 16 ) , 
 + vertexToInts ( ( float ) v3 . xCoord , ( float ) v3 . yCoord , ( float ) v3 . zCoord , - 1 , texture , 16 , 16 ) , 
 + vertexToInts ( ( float ) v4 . xCoord , ( float ) v4 . yCoord , ( float ) v4 . zCoord , - 1 , texture , 16 , 0 ) 
 + ) , - 1 , side ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getGeneralQuads ( ) 
 + { 
 + int len = cubeSize * 5 + 1 ; 
 + List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; 
 + for ( EnumFacing f : EnumFacing . values ( ) ) 
 + { 
 + ret . add ( createSidedBakedQuad ( 0 , 1 , 0 , 1 , 1 , base , f ) ) ; 
 + for ( int i = 0 ; i < cubeSize ; i + + ) 
 + { 
 + for ( int j = 0 ; j < cubeSize ; j + + ) 
 + { 
 + if ( state ! = null ) 
 + { 
 + Integer value = ( Integer ) state . getValue ( properties [ f . ordinal ( ) ] ) ; 
 + if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) 
 + { 
 + ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + return ret ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) { return true ; } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) { return true ; } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) { return false ; } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) { return this . base ; } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleBlockState ( IBlockState state ) 
 + { 
 + return new CustomModel ( base , overlay , ( IExtendedBlockState ) state ) ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleItemState ( ItemStack stack ) 
 + { 
 + IExtendedBlockState itemState = ( ( IExtendedBlockState ) CustomModelBlock . instance . getDefaultState ( ) ) . withProperty ( properties [ 1 ] , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ; 
 + return new CustomModel ( base , overlay , itemState ) ; 
 + } 
 + } 
 + 
 + private static Vec3 rotate ( Vec3 vec , EnumFacing side ) 
 + { 
 + switch ( side ) 
 + { 
 + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; 
 + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; 
 + case NORTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; 
 + case SOUTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; 
 + case WEST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; 
 + case EAST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; 
 + } 
 + return null ; 
 + } 
 + 
 + private static Vec3 revRotate ( Vec3 vec , EnumFacing side ) 
 + { 
 + switch ( side ) 
 + { 
 + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; 
 + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; 
 + case NORTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; 
 + case SOUTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; 
 + case WEST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; 
 + case EAST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; 
 + } 
 + return null ; 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 new file mode 100644 
 index 0000000 . . c2352ff 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + { 
 + " variants " : { 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 new file mode 100644 
 index 0000000 . . 43a272a 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + { 
 + " parent " : " builtin / entity " 
 + }
