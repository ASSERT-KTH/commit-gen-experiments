BLEU SCORE: 0.030098043843528283

TEST MSG: LightUtil . pack and . unpack now work correctly with unpacked arrays of size < 4 .
GENERATED MSG: Add in an " EntityEvent . EnteringChunk " event . Useful for your entity chunkloading stuff .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / pipeline / LightUtil . java b / src / main / java / net / minecraftforge / client / model / pipeline / LightUtil . java <nl> index 00773d4 . . 4a5a803 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / pipeline / LightUtil . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / pipeline / LightUtil . java <nl> @ @ - 136 , 7 + 136 , 8 @ @ public class LightUtil <nl> public static void unpack ( int [ ] from , float [ ] to , VertexFormat formatFrom , int v , int e ) <nl> { <nl> VertexFormatElement element = formatFrom . getElement ( e ) ; <nl> - for ( int i = 0 ; i < 4 ; i + + ) <nl> + int length = 4 < + to . length ? 4 : to . length ; <nl> + for ( int i = 0 ; i < length ; i + + ) <nl> { <nl> if ( i < element . getElementCount ( ) ) <nl> { <nl> @ @ - 193 , 20 + 194 , 21 @ @ public class LightUtil <nl> int offset = pos & 3 ; <nl> int bits = 0 ; <nl> int mask = ( 256 < < ( 8 * ( element . getType ( ) . getSize ( ) - 1 ) ) ) - 1 ; <nl> + float f = i < from . length ? from [ i ] : 0 ; <nl> switch ( element . getType ( ) ) <nl> { <nl> case FLOAT : <nl> - bits = Float . floatToRawIntBits ( from [ i ] ) ; <nl> + bits = Float . floatToRawIntBits ( f ) ; <nl> break ; <nl> case UBYTE : <nl> case USHORT : <nl> case UINT : <nl> - bits = ( int ) ( from [ i ] * mask ) ; <nl> + bits = ( int ) ( f * mask ) ; <nl> break ; <nl> case BYTE : <nl> case SHORT : <nl> case INT : <nl> - bits = ( int ) ( from [ i ] * mask / 2 ) ; <nl> + bits = ( int ) ( f * mask / 2 ) ; <nl> break ; <nl> } <nl> to [ index ] & = ~ ( mask < < ( offset * 8 ) ) ;
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / event / entity / EntityEvent . java b / common / net / minecraftforge / event / entity / EntityEvent . java <nl> index c34b596 . . 61ef275 100644 <nl> - - - a / common / net / minecraftforge / event / entity / EntityEvent . java <nl> + + + b / common / net / minecraftforge / event / entity / EntityEvent . java <nl> @ @ - 6 , 12 + 6 , 12 @ @ import net . minecraftforge . event . Event ; <nl> public class EntityEvent extends Event <nl> { <nl> public final Entity entity ; <nl> - <nl> + <nl> public EntityEvent ( Entity entity ) <nl> { <nl> this . entity = entity ; <nl> } <nl> - <nl> + <nl> public static class CanUpdate extends EntityEvent <nl> { <nl> public boolean canUpdate = false ; <nl> @ @ - 20 , 4 + 20 , 21 @ @ public class EntityEvent extends Event <nl> super ( entity ) ; <nl> } <nl> } <nl> + <nl> + public static class EnteringChunk extends EntityEvent <nl> + { <nl> + public int newChunkX ; <nl> + public int newChunkZ ; <nl> + public int oldChunkX ; <nl> + public int oldChunkZ ; <nl> + <nl> + public EnteringChunk ( Entity entity , int newChunkX , int newChunkZ , int oldChunkX , int oldChunkZ ) <nl> + { <nl> + super ( entity ) ; <nl> + this . newChunkX = newChunkX ; <nl> + this . newChunkZ = newChunkZ ; <nl> + this . oldChunkX = oldChunkX ; <nl> + this . oldChunkZ = oldChunkZ ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / patches / common / net / minecraft / src / Chunk . java . patch b / patches / common / net / minecraft / src / Chunk . java . patch <nl> index 626f490 . . 71977a3 100644 <nl> - - - a / patches / common / net / minecraft / src / Chunk . java . patch <nl> + + + b / patches / common / net / minecraft / src / Chunk . java . patch <nl> @ @ - 1 , 16 + 1 , 17 @ @ <nl> - - - . . / src _ base / common / net / minecraft / src / Chunk . java <nl> + + + . . / src _ work / common / net / minecraft / src / Chunk . java <nl> - @ @ - 9 , 6 + 9 , 9 @ @ <nl> + @ @ - 9 , 6 + 9 , 10 @ @ <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Random ; <nl> + <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + + import net . minecraftforge . event . entity . EntityEvent ; <nl> + import net . minecraftforge . event . world . ChunkEvent ; <nl> <nl> public class Chunk <nl> { <nl> - @ @ - 122 , 7 + 125 , 9 @ @ <nl> + @ @ - 122 , 7 + 126 , 9 @ @ <nl> { <nl> for ( int var8 = 0 ; var8 < var5 ; + + var8 ) <nl> { <nl> @ @ - 21 , 7 + 22 , 7 @ @ <nl> <nl> if ( var9 ! = 0 ) <nl> { <nl> - @ @ - 134 , 6 + 139 , 48 @ @ <nl> + @ @ - 134 , 6 + 140 , 48 @ @ <nl> } <nl> <nl> this . storageArrays [ var10 ] . setExtBlockID ( var6 , var8 & 15 , var7 , var9 ) ; <nl> @ @ - 32 , 11 + 33 , 11 @ @ <nl> + } <nl> + <nl> + / * * <nl> - + * Metadata sensitive Chunk constructor for use in new ChunkProviders that <nl> + + * Metadata sensitive Chunk constructor for use in new ChunkProviders that <nl> + * use metadata sensitive blocks during generation . <nl> - + * <nl> + + * <nl> + * @ param world The world this chunk belongs to <nl> - + * @ param ids A ByteArray containing all the BlockID ' s to set this chunk to <nl> + + * @ param ids A ByteArray containing all the BlockID ' s to set this chunk to <nl> + * @ param metadata A ByteArray containing all the metadata to set this chunk to <nl> + * @ param chunkX The chunk ' s X position <nl> + * @ param chunkZ The Chunk ' s Z position <nl> @ @ - 70 , 7 + 71 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 507 , 7 + 554 , 7 @ @ <nl> + @ @ - 507 , 7 + 555 , 7 @ @ <nl> * / <nl> public int getBlockID ( int par1 , int par2 , int par3 ) <nl> { <nl> @ @ - 79 , 7 + 80 , 7 @ @ <nl> { <nl> return 0 ; <nl> } <nl> - @ @ - 523 , 7 + 570 , 7 @ @ <nl> + @ @ - 523 , 7 + 571 , 7 @ @ <nl> * / <nl> public int getBlockMetadata ( int par1 , int par2 , int par3 ) <nl> { <nl> @ @ - 88 , 7 + 89 , 7 @ @ <nl> { <nl> return 0 ; <nl> } <nl> - @ @ - 564 , 6 + 611 , 11 @ @ <nl> + @ @ - 564 , 6 + 612 , 11 @ @ <nl> } <nl> else <nl> { <nl> @ @ - 100 , 7 + 101 , 7 @ @ <nl> ExtendedBlockStorage var10 = this . storageArrays [ par2 > > 4 ] ; <nl> boolean var11 = false ; <nl> <nl> - @ @ - 594 , 7 + 646 , 7 @ @ <nl> + @ @ - 594 , 7 + 647 , 7 @ @ <nl> { <nl> Block . blocksList [ var8 ] . breakBlock ( this . worldObj , var12 , par2 , var13 , var8 , var9 ) ; <nl> } <nl> @ @ - 109 , 7 + 110 , 7 @ @ <nl> { <nl> this . worldObj . removeBlockTileEntity ( var12 , par2 , var13 ) ; <nl> } <nl> - @ @ - 638 , 29 + 690 , 21 @ @ <nl> + @ @ - 638 , 29 + 691 , 21 @ @ <nl> Block . blocksList [ par4 ] . onBlockAdded ( this . worldObj , var12 , par2 , var13 ) ; <nl> } <nl> <nl> @ @ - 142 , 7 + 143 , 7 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 675 , 7 + 719 , 7 @ @ <nl> + @ @ - 675 , 7 + 720 , 7 @ @ <nl> * / <nl> public boolean setBlockMetadata ( int par1 , int par2 , int par3 , int par4 ) <nl> { <nl> @ @ - 151 , 7 + 152 , 7 @ @ <nl> <nl> if ( var5 = = null ) <nl> { <nl> - @ @ - 695 , 7 + 739 , 7 @ @ <nl> + @ @ - 695 , 7 + 740 , 7 @ @ <nl> var5 . setExtBlockMetadata ( par1 , par2 & 15 , par3 , par4 ) ; <nl> int var7 = var5 . getExtBlockID ( par1 , par2 & 15 , par3 ) ; <nl> <nl> @ @ - 160 , 7 + 161 , 7 @ @ <nl> { <nl> TileEntity var8 = this . getChunkBlockTileEntity ( par1 , par2 , par3 ) ; <nl> <nl> - @ @ - 716 , 7 + 760 , 7 @ @ <nl> + @ @ - 716 , 7 + 761 , 7 @ @ <nl> * / <nl> public int getSavedLightValue ( EnumSkyBlock par1EnumSkyBlock , int par2 , int par3 , int par4 ) <nl> { <nl> @ @ - 169 , 7 + 170 , 7 @ @ <nl> return var5 = = null ? ( this . canBlockSeeTheSky ( par2 , par3 , par4 ) ? par1EnumSkyBlock . defaultLightValue : 0 ) : ( par1EnumSkyBlock = = EnumSkyBlock . Sky ? var5 . getExtSkylightValue ( par2 , par3 & 15 , par4 ) : ( par1EnumSkyBlock = = EnumSkyBlock . Block ? var5 . getExtBlocklightValue ( par2 , par3 & 15 , par4 ) : par1EnumSkyBlock . defaultLightValue ) ) ; <nl> } <nl> <nl> - @ @ - 726 , 6 + 770 , 11 @ @ <nl> + @ @ - 726 , 6 + 771 , 11 @ @ <nl> * / <nl> public void setLightValue ( EnumSkyBlock par1EnumSkyBlock , int par2 , int par3 , int par4 , int par5 ) <nl> { <nl> @ @ - 181 , 7 + 182 , 7 @ @ <nl> ExtendedBlockStorage var6 = this . storageArrays [ par3 > > 4 ] ; <nl> <nl> if ( var6 = = null ) <nl> - @ @ - 754 , 7 + 803 , 7 @ @ <nl> + @ @ - 754 , 7 + 804 , 7 @ @ <nl> * / <nl> public int getBlockLightValue ( int par1 , int par2 , int par3 , int par4 ) <nl> { <nl> @ @ - 190 , 7 + 191 , 16 @ @ <nl> <nl> if ( var5 = = null ) <nl> { <nl> - @ @ - 857 , 33 + 906 , 33 @ @ <nl> + @ @ - 807 , 7 + 857 , 7 @ @ <nl> + { <nl> + var4 = this . entityLists . length - 1 ; <nl> + } <nl> + - <nl> + + MinecraftForge . EVENT _ BUS . post ( new EntityEvent . EnteringChunk ( par1Entity , this . xPosition , this . zPosition , par1Entity . chunkCoordX , par1Entity . chunkCoordZ ) ) ; <nl> + par1Entity . addedToChunk = true ; <nl> + par1Entity . chunkCoordX = this . xPosition ; <nl> + par1Entity . chunkCoordY = var4 ; <nl> + @ @ - 857 , 33 + 907 , 33 @ @ <nl> ChunkPosition var4 = new ChunkPosition ( par1 , par2 , par3 ) ; <nl> TileEntity var5 = ( TileEntity ) this . chunkTileEntityMap . get ( var4 ) ; <nl> <nl> @ @ - 235 , 7 + 245 , 7 @ @ <nl> } <nl> <nl> / * * <nl> - @ @ - 898 , 7 + 947 , 7 @ @ <nl> + @ @ - 898 , 7 + 948 , 7 @ @ <nl> <nl> if ( this . isChunkLoaded ) <nl> { <nl> @ @ - 244 , 7 + 254 , 7 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 913 , 8 + 962 , 14 @ @ <nl> + @ @ - 913 , 8 + 963 , 14 @ @ <nl> par4TileEntity . yCoord = par2 ; <nl> par4TileEntity . zCoord = this . zPosition * 16 + par3 ; <nl> <nl> @ @ - 261 , 7 + 271 , 7 @ @ <nl> par4TileEntity . validate ( ) ; <nl> this . chunkTileEntityMap . put ( var5 , par4TileEntity ) ; <nl> } <nl> - @ @ - 953 , 6 + 1008 , 7 @ @ <nl> + @ @ - 953 , 6 + 1009 , 7 @ @ <nl> List var4 = var1 [ var3 ] ; <nl> this . worldObj . addLoadedEntities ( var4 ) ; <nl> } <nl> @ @ - 269 , 7 + 279 , 7 @ @ <nl> } <nl> <nl> / * * <nl> - @ @ - 977 , 6 + 1033 , 7 @ @ <nl> + @ @ - 977 , 6 + 1034 , 7 @ @ <nl> List var4 = var5 [ var3 ] ; <nl> this . worldObj . unloadEntities ( var4 ) ; <nl> } <nl> @ @ - 277 , 7 + 287 , 7 @ @ <nl> } <nl> <nl> / * * <nl> - @ @ - 993 , 8 + 1050 , 8 @ @ <nl> + @ @ - 993 , 8 + 1051 , 8 @ @ <nl> * / <nl> public void getEntitiesWithinAABBForEntity ( Entity par1Entity , AxisAlignedBB par2AxisAlignedBB , List par3List ) <nl> { <nl> @ @ - 288 , 7 + 298 , 7 @ @ <nl> <nl> if ( var4 < 0 ) <nl> { <nl> - @ @ - 1042 , 8 + 1099 , 8 @ @ <nl> + @ @ - 1042 , 8 + 1100 , 8 @ @ <nl> * / <nl> public void getEntitiesOfTypeWithinAAAB ( Class par1Class , AxisAlignedBB par2AxisAlignedBB , List par3List ) <nl> { <nl> @ @ - 299 , 7 + 309 , 7 @ @ <nl> <nl> if ( var4 < 0 ) <nl> { <nl> - @ @ - 1227 , 6 + 1284 , 15 @ @ <nl> + @ @ - 1227 , 6 + 1285 , 15 @ @ <nl> * / <nl> public void fillChunk ( byte [ ] par1ArrayOfByte , int par2 , int par3 , boolean par4 ) <nl> { <nl> @ @ - 315 , 7 + 325 , 7 @ @ <nl> int var5 = 0 ; <nl> int var6 ; <nl> <nl> - @ @ - 1323 , 12 + 1389 , 26 @ @ <nl> + @ @ - 1323 , 12 + 1390 , 26 @ @ <nl> } <nl> <nl> this . generateHeightMap ( ) ; <nl> @ @ - 341 , 20 + 351 , 20 @ @ <nl> + } <nl> + tileEntity . updateContainingBlockInfo ( ) ; <nl> + } <nl> - + <nl> + + <nl> + for ( TileEntity tileEntity : invalidList ) <nl> + { <nl> + tileEntity . invalidate ( ) ; <nl> } <nl> } <nl> <nl> - @ @ - 1437 , 4 + 1517 , 18 @ @ <nl> + @ @ - 1437 , 4 + 1518 , 18 @ @ <nl> } <nl> } <nl> } <nl> + <nl> + / * * FORGE : Used to remove only invalid TileEntities * / <nl> - + public void cleanChunkBlockTileEntity ( int x , int y , int z ) <nl> + + public void cleanChunkBlockTileEntity ( int x , int y , int z ) <nl> + { <nl> + ChunkPosition position = new ChunkPosition ( x , y , z ) ; <nl> + if ( isChunkLoaded )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / pipeline / LightUtil . java b / src / main / java / net / minecraftforge / client / model / pipeline / LightUtil . java 
 index 00773d4 . . 4a5a803 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / pipeline / LightUtil . java 
 + + + b / src / main / java / net / minecraftforge / client / model / pipeline / LightUtil . java 
 @ @ - 136 , 7 + 136 , 8 @ @ public class LightUtil 
 public static void unpack ( int [ ] from , float [ ] to , VertexFormat formatFrom , int v , int e ) 
 { 
 VertexFormatElement element = formatFrom . getElement ( e ) ; 
 - for ( int i = 0 ; i < 4 ; i + + ) 
 + int length = 4 < + to . length ? 4 : to . length ; 
 + for ( int i = 0 ; i < length ; i + + ) 
 { 
 if ( i < element . getElementCount ( ) ) 
 { 
 @ @ - 193 , 20 + 194 , 21 @ @ public class LightUtil 
 int offset = pos & 3 ; 
 int bits = 0 ; 
 int mask = ( 256 < < ( 8 * ( element . getType ( ) . getSize ( ) - 1 ) ) ) - 1 ; 
 + float f = i < from . length ? from [ i ] : 0 ; 
 switch ( element . getType ( ) ) 
 { 
 case FLOAT : 
 - bits = Float . floatToRawIntBits ( from [ i ] ) ; 
 + bits = Float . floatToRawIntBits ( f ) ; 
 break ; 
 case UBYTE : 
 case USHORT : 
 case UINT : 
 - bits = ( int ) ( from [ i ] * mask ) ; 
 + bits = ( int ) ( f * mask ) ; 
 break ; 
 case BYTE : 
 case SHORT : 
 case INT : 
 - bits = ( int ) ( from [ i ] * mask / 2 ) ; 
 + bits = ( int ) ( f * mask / 2 ) ; 
 break ; 
 } 
 to [ index ] & = ~ ( mask < < ( offset * 8 ) ) ;

NEAREST DIFF:
diff - - git a / common / net / minecraftforge / event / entity / EntityEvent . java b / common / net / minecraftforge / event / entity / EntityEvent . java 
 index c34b596 . . 61ef275 100644 
 - - - a / common / net / minecraftforge / event / entity / EntityEvent . java 
 + + + b / common / net / minecraftforge / event / entity / EntityEvent . java 
 @ @ - 6 , 12 + 6 , 12 @ @ import net . minecraftforge . event . Event ; 
 public class EntityEvent extends Event 
 { 
 public final Entity entity ; 
 - 
 + 
 public EntityEvent ( Entity entity ) 
 { 
 this . entity = entity ; 
 } 
 - 
 + 
 public static class CanUpdate extends EntityEvent 
 { 
 public boolean canUpdate = false ; 
 @ @ - 20 , 4 + 20 , 21 @ @ public class EntityEvent extends Event 
 super ( entity ) ; 
 } 
 } 
 + 
 + public static class EnteringChunk extends EntityEvent 
 + { 
 + public int newChunkX ; 
 + public int newChunkZ ; 
 + public int oldChunkX ; 
 + public int oldChunkZ ; 
 + 
 + public EnteringChunk ( Entity entity , int newChunkX , int newChunkZ , int oldChunkX , int oldChunkZ ) 
 + { 
 + super ( entity ) ; 
 + this . newChunkX = newChunkX ; 
 + this . newChunkZ = newChunkZ ; 
 + this . oldChunkX = oldChunkX ; 
 + this . oldChunkZ = oldChunkZ ; 
 + } 
 + } 
 } 
 diff - - git a / patches / common / net / minecraft / src / Chunk . java . patch b / patches / common / net / minecraft / src / Chunk . java . patch 
 index 626f490 . . 71977a3 100644 
 - - - a / patches / common / net / minecraft / src / Chunk . java . patch 
 + + + b / patches / common / net / minecraft / src / Chunk . java . patch 
 @ @ - 1 , 16 + 1 , 17 @ @ 
 - - - . . / src _ base / common / net / minecraft / src / Chunk . java 
 + + + . . / src _ work / common / net / minecraft / src / Chunk . java 
 - @ @ - 9 , 6 + 9 , 9 @ @ 
 + @ @ - 9 , 6 + 9 , 10 @ @ 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Random ; 
 + 
 + import net . minecraftforge . common . MinecraftForge ; 
 + + import net . minecraftforge . event . entity . EntityEvent ; 
 + import net . minecraftforge . event . world . ChunkEvent ; 
 
 public class Chunk 
 { 
 - @ @ - 122 , 7 + 125 , 9 @ @ 
 + @ @ - 122 , 7 + 126 , 9 @ @ 
 { 
 for ( int var8 = 0 ; var8 < var5 ; + + var8 ) 
 { 
 @ @ - 21 , 7 + 22 , 7 @ @ 
 
 if ( var9 ! = 0 ) 
 { 
 - @ @ - 134 , 6 + 139 , 48 @ @ 
 + @ @ - 134 , 6 + 140 , 48 @ @ 
 } 
 
 this . storageArrays [ var10 ] . setExtBlockID ( var6 , var8 & 15 , var7 , var9 ) ; 
 @ @ - 32 , 11 + 33 , 11 @ @ 
 + } 
 + 
 + / * * 
 - + * Metadata sensitive Chunk constructor for use in new ChunkProviders that 
 + + * Metadata sensitive Chunk constructor for use in new ChunkProviders that 
 + * use metadata sensitive blocks during generation . 
 - + * 
 + + * 
 + * @ param world The world this chunk belongs to 
 - + * @ param ids A ByteArray containing all the BlockID ' s to set this chunk to 
 + + * @ param ids A ByteArray containing all the BlockID ' s to set this chunk to 
 + * @ param metadata A ByteArray containing all the metadata to set this chunk to 
 + * @ param chunkX The chunk ' s X position 
 + * @ param chunkZ The Chunk ' s Z position 
 @ @ - 70 , 7 + 71 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 507 , 7 + 554 , 7 @ @ 
 + @ @ - 507 , 7 + 555 , 7 @ @ 
 * / 
 public int getBlockID ( int par1 , int par2 , int par3 ) 
 { 
 @ @ - 79 , 7 + 80 , 7 @ @ 
 { 
 return 0 ; 
 } 
 - @ @ - 523 , 7 + 570 , 7 @ @ 
 + @ @ - 523 , 7 + 571 , 7 @ @ 
 * / 
 public int getBlockMetadata ( int par1 , int par2 , int par3 ) 
 { 
 @ @ - 88 , 7 + 89 , 7 @ @ 
 { 
 return 0 ; 
 } 
 - @ @ - 564 , 6 + 611 , 11 @ @ 
 + @ @ - 564 , 6 + 612 , 11 @ @ 
 } 
 else 
 { 
 @ @ - 100 , 7 + 101 , 7 @ @ 
 ExtendedBlockStorage var10 = this . storageArrays [ par2 > > 4 ] ; 
 boolean var11 = false ; 
 
 - @ @ - 594 , 7 + 646 , 7 @ @ 
 + @ @ - 594 , 7 + 647 , 7 @ @ 
 { 
 Block . blocksList [ var8 ] . breakBlock ( this . worldObj , var12 , par2 , var13 , var8 , var9 ) ; 
 } 
 @ @ - 109 , 7 + 110 , 7 @ @ 
 { 
 this . worldObj . removeBlockTileEntity ( var12 , par2 , var13 ) ; 
 } 
 - @ @ - 638 , 29 + 690 , 21 @ @ 
 + @ @ - 638 , 29 + 691 , 21 @ @ 
 Block . blocksList [ par4 ] . onBlockAdded ( this . worldObj , var12 , par2 , var13 ) ; 
 } 
 
 @ @ - 142 , 7 + 143 , 7 @ @ 
 } 
 } 
 
 - @ @ - 675 , 7 + 719 , 7 @ @ 
 + @ @ - 675 , 7 + 720 , 7 @ @ 
 * / 
 public boolean setBlockMetadata ( int par1 , int par2 , int par3 , int par4 ) 
 { 
 @ @ - 151 , 7 + 152 , 7 @ @ 
 
 if ( var5 = = null ) 
 { 
 - @ @ - 695 , 7 + 739 , 7 @ @ 
 + @ @ - 695 , 7 + 740 , 7 @ @ 
 var5 . setExtBlockMetadata ( par1 , par2 & 15 , par3 , par4 ) ; 
 int var7 = var5 . getExtBlockID ( par1 , par2 & 15 , par3 ) ; 
 
 @ @ - 160 , 7 + 161 , 7 @ @ 
 { 
 TileEntity var8 = this . getChunkBlockTileEntity ( par1 , par2 , par3 ) ; 
 
 - @ @ - 716 , 7 + 760 , 7 @ @ 
 + @ @ - 716 , 7 + 761 , 7 @ @ 
 * / 
 public int getSavedLightValue ( EnumSkyBlock par1EnumSkyBlock , int par2 , int par3 , int par4 ) 
 { 
 @ @ - 169 , 7 + 170 , 7 @ @ 
 return var5 = = null ? ( this . canBlockSeeTheSky ( par2 , par3 , par4 ) ? par1EnumSkyBlock . defaultLightValue : 0 ) : ( par1EnumSkyBlock = = EnumSkyBlock . Sky ? var5 . getExtSkylightValue ( par2 , par3 & 15 , par4 ) : ( par1EnumSkyBlock = = EnumSkyBlock . Block ? var5 . getExtBlocklightValue ( par2 , par3 & 15 , par4 ) : par1EnumSkyBlock . defaultLightValue ) ) ; 
 } 
 
 - @ @ - 726 , 6 + 770 , 11 @ @ 
 + @ @ - 726 , 6 + 771 , 11 @ @ 
 * / 
 public void setLightValue ( EnumSkyBlock par1EnumSkyBlock , int par2 , int par3 , int par4 , int par5 ) 
 { 
 @ @ - 181 , 7 + 182 , 7 @ @ 
 ExtendedBlockStorage var6 = this . storageArrays [ par3 > > 4 ] ; 
 
 if ( var6 = = null ) 
 - @ @ - 754 , 7 + 803 , 7 @ @ 
 + @ @ - 754 , 7 + 804 , 7 @ @ 
 * / 
 public int getBlockLightValue ( int par1 , int par2 , int par3 , int par4 ) 
 { 
 @ @ - 190 , 7 + 191 , 16 @ @ 
 
 if ( var5 = = null ) 
 { 
 - @ @ - 857 , 33 + 906 , 33 @ @ 
 + @ @ - 807 , 7 + 857 , 7 @ @ 
 + { 
 + var4 = this . entityLists . length - 1 ; 
 + } 
 + - 
 + + MinecraftForge . EVENT _ BUS . post ( new EntityEvent . EnteringChunk ( par1Entity , this . xPosition , this . zPosition , par1Entity . chunkCoordX , par1Entity . chunkCoordZ ) ) ; 
 + par1Entity . addedToChunk = true ; 
 + par1Entity . chunkCoordX = this . xPosition ; 
 + par1Entity . chunkCoordY = var4 ; 
 + @ @ - 857 , 33 + 907 , 33 @ @ 
 ChunkPosition var4 = new ChunkPosition ( par1 , par2 , par3 ) ; 
 TileEntity var5 = ( TileEntity ) this . chunkTileEntityMap . get ( var4 ) ; 
 
 @ @ - 235 , 7 + 245 , 7 @ @ 
 } 
 
 / * * 
 - @ @ - 898 , 7 + 947 , 7 @ @ 
 + @ @ - 898 , 7 + 948 , 7 @ @ 
 
 if ( this . isChunkLoaded ) 
 { 
 @ @ - 244 , 7 + 254 , 7 @ @ 
 } 
 } 
 
 - @ @ - 913 , 8 + 962 , 14 @ @ 
 + @ @ - 913 , 8 + 963 , 14 @ @ 
 par4TileEntity . yCoord = par2 ; 
 par4TileEntity . zCoord = this . zPosition * 16 + par3 ; 
 
 @ @ - 261 , 7 + 271 , 7 @ @ 
 par4TileEntity . validate ( ) ; 
 this . chunkTileEntityMap . put ( var5 , par4TileEntity ) ; 
 } 
 - @ @ - 953 , 6 + 1008 , 7 @ @ 
 + @ @ - 953 , 6 + 1009 , 7 @ @ 
 List var4 = var1 [ var3 ] ; 
 this . worldObj . addLoadedEntities ( var4 ) ; 
 } 
 @ @ - 269 , 7 + 279 , 7 @ @ 
 } 
 
 / * * 
 - @ @ - 977 , 6 + 1033 , 7 @ @ 
 + @ @ - 977 , 6 + 1034 , 7 @ @ 
 List var4 = var5 [ var3 ] ; 
 this . worldObj . unloadEntities ( var4 ) ; 
 } 
 @ @ - 277 , 7 + 287 , 7 @ @ 
 } 
 
 / * * 
 - @ @ - 993 , 8 + 1050 , 8 @ @ 
 + @ @ - 993 , 8 + 1051 , 8 @ @ 
 * / 
 public void getEntitiesWithinAABBForEntity ( Entity par1Entity , AxisAlignedBB par2AxisAlignedBB , List par3List ) 
 { 
 @ @ - 288 , 7 + 298 , 7 @ @ 
 
 if ( var4 < 0 ) 
 { 
 - @ @ - 1042 , 8 + 1099 , 8 @ @ 
 + @ @ - 1042 , 8 + 1100 , 8 @ @ 
 * / 
 public void getEntitiesOfTypeWithinAAAB ( Class par1Class , AxisAlignedBB par2AxisAlignedBB , List par3List ) 
 { 
 @ @ - 299 , 7 + 309 , 7 @ @ 
 
 if ( var4 < 0 ) 
 { 
 - @ @ - 1227 , 6 + 1284 , 15 @ @ 
 + @ @ - 1227 , 6 + 1285 , 15 @ @ 
 * / 
 public void fillChunk ( byte [ ] par1ArrayOfByte , int par2 , int par3 , boolean par4 ) 
 { 
 @ @ - 315 , 7 + 325 , 7 @ @ 
 int var5 = 0 ; 
 int var6 ; 
 
 - @ @ - 1323 , 12 + 1389 , 26 @ @ 
 + @ @ - 1323 , 12 + 1390 , 26 @ @ 
 } 
 
 this . generateHeightMap ( ) ; 
 @ @ - 341 , 20 + 351 , 20 @ @ 
 + } 
 + tileEntity . updateContainingBlockInfo ( ) ; 
 + } 
 - + 
 + + 
 + for ( TileEntity tileEntity : invalidList ) 
 + { 
 + tileEntity . invalidate ( ) ; 
 } 
 } 
 
 - @ @ - 1437 , 4 + 1517 , 18 @ @ 
 + @ @ - 1437 , 4 + 1518 , 18 @ @ 
 } 
 } 
 } 
 + 
 + / * * FORGE : Used to remove only invalid TileEntities * / 
 - + public void cleanChunkBlockTileEntity ( int x , int y , int z ) 
 + + public void cleanChunkBlockTileEntity ( int x , int y , int z ) 
 + { 
 + ChunkPosition position = new ChunkPosition ( x , y , z ) ; 
 + if ( isChunkLoaded )
