BLEU SCORE: 0.0029187678920263066

TEST MSG: Introduce IContextSetter for events .
GENERATED MSG: More tests . Substitutions now work , and a fix is included . * sigh * Closes too many bugs to count .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / event / RegistryEvent . java b / src / main / java / net / minecraftforge / event / RegistryEvent . java <nl> index a1967e5 . . 50d09ab 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / RegistryEvent . java <nl> + + + b / src / main / java / net / minecraftforge / event / RegistryEvent . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . event ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . fml . common . eventhandler . Event ; <nl> import net . minecraftforge . fml . common . eventhandler . GenericEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . IContextSetter ; <nl> import net . minecraftforge . fml . common . registry . IForgeRegistry ; <nl> import net . minecraftforge . fml . common . registry . IForgeRegistryEntry ; <nl> import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; <nl> @ @ - 30 , 7 + 31 , 7 @ @ import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; <nl> / * * <nl> * RegistryEvent supertype . <nl> * / <nl> - public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEvent < T > <nl> + public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEvent < T > implements IContextSetter <nl> { <nl> RegistryEvent ( Class < T > clazz ) { <nl> super ( clazz ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> index 81df043 . . 230abe4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml . common ; <nl> import com . google . common . base . Strings ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> + import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; <nl> import net . minecraftforge . fml . common . discovery . asm . ModAnnotation ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> import org . apache . logging . log4j . Level ; <nl> @ @ - 50 , 6 + 51 , 24 @ @ public class AutomaticEventSubscriber <nl> { <nl> try <nl> { <nl> + / / Filter out handlers for things that arnt this mod . <nl> + / / Perhaps find a way to make this more generic for multiple mods <nl> + / / from the same source . . . . <nl> + boolean register = true ; <nl> + for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) <nl> + { <nl> + if ( a . getClassName ( ) . equals ( targ . getClassName ( ) ) ) <nl> + { <nl> + if ( ! mod . getModId ( ) . equals ( a . getAnnotationInfo ( ) . get ( " modid " ) ) ) <nl> + { <nl> + register = false ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + if ( ! register ) <nl> + continue ; <nl> + <nl> / / noinspection unchecked <nl> List < ModAnnotation . EnumHolder > sidesEnum = ( List < ModAnnotation . EnumHolder > ) targ . getAnnotationInfo ( ) . get ( " value " ) ; <nl> EnumSet < Side > sides = DEFAULT ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 3f43f78 . . 763dffe 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 1144 , 4 + 1144 , 9 @ @ public class Loader <nl> { <nl> return modController ! = null ? modController . getState ( ) : LoaderState . NOINIT ; <nl> } <nl> + <nl> + public void setActiveModContainer ( ModContainer container ) <nl> + { <nl> + this . modController . forceActiveContainer ( container ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> index 651e3d4 . . f3c36c1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> @ @ - 122 , 15 + 122 , 32 @ @ public class EventBus implements IEventExceptionHandler <nl> } <nl> } <nl> <nl> - private void register ( Class < ? > eventType , Object target , Method method , ModContainer owner ) <nl> + private void register ( Class < ? > eventType , Object target , Method method , final ModContainer owner ) <nl> { <nl> try <nl> { <nl> Constructor < ? > ctr = eventType . getConstructor ( ) ; <nl> ctr . setAccessible ( true ) ; <nl> Event event = ( Event ) ctr . newInstance ( ) ; <nl> - ASMEventHandler listener = new ASMEventHandler ( target , method , owner , IGenericEvent . class . isAssignableFrom ( eventType ) ) ; <nl> - event . getListenerList ( ) . register ( busID , listener . getPriority ( ) , listener ) ; <nl> + final ASMEventHandler asm = new ASMEventHandler ( target , method , owner , IGenericEvent . class . isAssignableFrom ( eventType ) ) ; <nl> + <nl> + IEventListener listener = asm ; <nl> + if ( IContextSetter . class . isAssignableFrom ( eventType ) ) <nl> + { <nl> + listener = new IEventListener ( ) <nl> + { <nl> + @ Override <nl> + public void invoke ( Event event ) <nl> + { <nl> + ModContainer old = Loader . instance ( ) . activeModContainer ( ) ; <nl> + Loader . instance ( ) . setActiveModContainer ( owner ) ; <nl> + asm . invoke ( event ) ; <nl> + Loader . instance ( ) . setActiveModContainer ( old ) ; <nl> + } <nl> + } ; <nl> + } <nl> + <nl> + event . getListenerList ( ) . register ( busID , asm . getPriority ( ) , listener ) ; <nl> <nl> ArrayList < IEventListener > others = listeners . get ( target ) ; <nl> if ( others = = null ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / IContextSetter . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / IContextSetter . java <nl> new file mode 100644 <nl> index 0000000 . . eab3999 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / IContextSetter . java <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + package net . minecraftforge . fml . common . eventhandler ; <nl> + <nl> + / / Instructs event handlers to set the active mod container . <nl> + / / This has a major performance impact so use sparingly . <nl> + / / Note : The context IS NOT thread aware as this would be ungodly slow . <nl> + / / So This should ONLY be used for Forge mod lifecycle events . <nl> + public interface IContextSetter { } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ForgeBlockStatesLoaderDebug . java b / src / test / java / net / minecraftforge / debug / ForgeBlockStatesLoaderDebug . java <nl> index 98399ed . . f89dbbe 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ForgeBlockStatesLoaderDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ForgeBlockStatesLoaderDebug . java <nl> @ @ - 5 , 25 + 5 , 21 @ @ import java . util . Map . Entry ; <nl> <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockWall ; <nl> - import net . minecraft . block . material . Material ; <nl> - import net . minecraft . block . properties . PropertyEnum ; <nl> - import net . minecraft . block . state . BlockStateContainer ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . renderer . block . statemap . IStateMapper ; <nl> import net . minecraft . client . renderer . block . statemap . StateMap ; <nl> import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> import net . minecraft . init . Blocks ; <nl> import net . minecraft . item . Item ; <nl> - import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemMultiTexture ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraft . util . IStringSerializable ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> - import net . minecraftforge . fml . common . registry . GameData ; <nl> - import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> import net . minecraftforge . fml . relauncher . SideOnly ; <nl> <nl> @ @ - 31 , 21 + 27 , 45 @ @ import com . google . common . base . Function ; <nl> import com . google . common . collect . Maps ; <nl> <nl> @ Mod ( modid = ForgeBlockStatesLoaderDebug . MODID , name = " ForgeBlockStatesLoader " , version = " 1 . 0 " ) <nl> + @ Mod . EventBusSubscriber <nl> public class ForgeBlockStatesLoaderDebug { <nl> public static final String MODID = " forgeblockstatesloader " ; <nl> public static final String ASSETS = " forgeblockstatesloader : " ; <nl> <nl> - / / public static final Block blockCustom = new CustomMappedBlock ( ) ; <nl> - public static final String nameCustomWall = " custom _ wall " ; <nl> - public static final BlockWall blockCustomWall = new BlockWall ( Blocks . COBBLESTONE ) ; <nl> - public static final ItemMultiTexture itemCustomWall = ( ItemMultiTexture ) new ItemMultiTexture ( blockCustomWall , blockCustomWall , new Function < ItemStack , String > ( ) <nl> + @ ObjectHolder ( MODID ) <nl> + public static class BLOCKS { <nl> + public static final BlockWall custom _ wall = null ; <nl> + } <nl> + <nl> + @ ObjectHolder ( MODID ) <nl> + public static class ITEMS { <nl> + public static final ItemMultiTexture custom _ wall = null ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerBlocks ( RegistryEvent . Register < Block > event ) <nl> { <nl> - @ Override <nl> - public String apply ( ItemStack stack ) <nl> - { <nl> - return BlockWall . EnumType . byMetadata ( stack . getMetadata ( ) ) . getUnlocalizedName ( ) ; <nl> - } <nl> - } ) . setRegistryName ( nameCustomWall ) ; <nl> + event . getRegistry ( ) . registerAll ( <nl> + new BlockWall ( Blocks . COBBLESTONE ) . setUnlocalizedName ( MODID + " . customWall " ) . setRegistryName ( MODID , " custom _ wall " ) <nl> + ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerItems ( RegistryEvent . Register < Item > event ) <nl> + { <nl> + event . getRegistry ( ) . registerAll ( <nl> + new ItemMultiTexture ( BLOCKS . custom _ wall , BLOCKS . custom _ wall , new Function < ItemStack , String > ( ) <nl> + { <nl> + @ Override <nl> + public String apply ( ItemStack stack ) <nl> + { <nl> + return BlockWall . EnumType . byMetadata ( stack . getMetadata ( ) ) . getUnlocalizedName ( ) ; <nl> + } <nl> + } ) . setRegistryName ( BLOCKS . custom _ wall . getRegistryName ( ) ) <nl> + ) ; <nl> + } <nl> + <nl> + / / public static final Block blockCustom = new CustomMappedBlock ( ) ; <nl> <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> @ @ - 53 , 11 + 73 , 6 @ @ public class ForgeBlockStatesLoaderDebug { <nl> / / blockCustom . setUnlocalizedName ( MODID + " . customBlock " ) . setRegistryName ( " customBlock " ) ; <nl> / / GameRegistry . registerBlock ( blockCustom ) ; <nl> <nl> - blockCustomWall . setUnlocalizedName ( MODID + " . customWall " ) . setRegistryName ( nameCustomWall ) ; <nl> - GameRegistry . register ( blockCustomWall ) ; <nl> - GameRegistry . register ( itemCustomWall ) ; <nl> - GameData . getBlockItemMap ( ) . put ( blockCustomWall , itemCustomWall ) ; <nl> - <nl> if ( event . getSide ( ) = = Side . CLIENT ) <nl> preInitClient ( event ) ; <nl> } <nl> @ @ - 67 , 7 + 82 , 7 @ @ public class ForgeBlockStatesLoaderDebug { <nl> { <nl> / / ModelLoader . setCustomStateMapper ( blockCustom , new StateMap . Builder ( ) . withName ( CustomMappedBlock . VARIANT ) . build ( ) ) ; <nl> <nl> - ModelLoader . setCustomStateMapper ( blockCustomWall , new IStateMapper ( ) <nl> + ModelLoader . setCustomStateMapper ( BLOCKS . custom _ wall , new IStateMapper ( ) <nl> { <nl> StateMap stateMap = new StateMap . Builder ( ) . withName ( BlockWall . VARIANT ) . withSuffix ( " _ wall " ) . build ( ) ; <nl> @ Override <nl> @ @ - 85 , 9 + 100 , 8 @ @ public class ForgeBlockStatesLoaderDebug { <nl> return newMap ; <nl> } <nl> } ) ; <nl> - Item customWallItem = Item . getItemFromBlock ( blockCustomWall ) ; <nl> - ModelLoader . setCustomModelResourceLocation ( customWallItem , 0 , new ModelResourceLocation ( ASSETS + " cobblestone _ wall " , " inventory " ) ) ; <nl> - ModelLoader . setCustomModelResourceLocation ( customWallItem , 1 , new ModelResourceLocation ( ASSETS + " mossy _ cobblestone _ wall " , " inventory " ) ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( ITEMS . custom _ wall , 0 , new ModelResourceLocation ( ASSETS + " cobblestone _ wall " , " inventory " ) ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( ITEMS . custom _ wall , 1 , new ModelResourceLocation ( ASSETS + " mossy _ cobblestone _ wall " , " inventory " ) ) ; <nl> } <nl> <nl> / / this block is never actually used , it ' s only needed for the error message on load to see the variant it maps to
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / LoadController . java b / src / main / java / net / minecraftforge / fml / common / LoadController . java <nl> index 99df669 . . 7422eec 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / LoadController . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / LoadController . java <nl> @ @ - 199 , 6 + 199 , 10 @ @ public class LoadController <nl> return activeContainer ! = null ? activeContainer : findActiveContainerFromStack ( ) ; <nl> } <nl> <nl> + void forceActiveContainer ( ModContainer container ) <nl> + { <nl> + activeContainer = container ; <nl> + } <nl> @ Subscribe <nl> public void propogateStateMessage ( FMLEvent stateEvent ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 982c389 . . 82bcd17 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> import net . minecraftforge . fml . common . ModContainer . Disableable ; <nl> import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; <nl> + import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> import net . minecraftforge . fml . common . discovery . ModDiscoverer ; <nl> import net . minecraftforge . fml . common . event . FMLInterModComms ; <nl> import net . minecraftforge . fml . common . event . FMLLoadEvent ; <nl> @ @ - 489 , 10 + 490 , 23 @ @ public class Loader <nl> } <nl> <nl> / * * <nl> + * Used to setup a testharness with a single dummy mod instance for use with various testing hooks <nl> + * @ param dummycontainer A dummy container that will be returned as " active " for all queries <nl> + * / <nl> + public void setupTestHarness ( ModContainer dummycontainer ) <nl> + { <nl> + modController = new LoadController ( this ) ; <nl> + mods = Lists . newArrayList ( dummycontainer ) ; <nl> + modController . transition ( LoaderState . LOADING , false ) ; <nl> + modController . transition ( LoaderState . CONSTRUCTING , false ) ; <nl> + ObjectHolderRegistry . INSTANCE . findObjectHolders ( new ASMDataTable ( ) ) ; <nl> + modController . forceActiveContainer ( dummycontainer ) ; <nl> + } <nl> + / * * <nl> * Called from the hook to start mod loading . We trigger the <nl> * { @ link # identifyMods ( ) } and Constructing , Preinitalization , and Initalization phases here . Finally , <nl> * the mod list is frozen completely and is consider immutable from then on . <nl> - * @ param injectedModContainers <nl> + * @ param injectedModContainers containers to inject <nl> * / <nl> public void loadMods ( List < String > injectedModContainers ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index c6c2d4b . . 5ccad59 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 66 , 6 + 66 , 10 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e <nl> * / <nl> private final BiMap < ResourceLocation , I > persistentSubstitutions = HashBiMap . create ( ) ; <nl> / * * <nl> + * Substitution originals - these are the originals that are being substituted <nl> + * / <nl> + private final BiMap < ResourceLocation , I > substitutionOriginals = HashBiMap . create ( ) ; <nl> + / * * <nl> * This is the current active substitution set for a particular world . It will change as worlds come and go . <nl> * / <nl> private final BiMap < ResourceLocation , I > activeSubstitutions = HashBiMap . create ( ) ; <nl> @ @ - 602 , 6 + 606 , 11 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e <nl> I sub = getPersistentSubstitutions ( ) . get ( nameToReplace ) ; <nl> getExistingDelegate ( original ) . changeReference ( sub ) ; <nl> activeSubstitutions . put ( nameToReplace , sub ) ; <nl> + int id = getIDForObjectBypass ( original ) ; <nl> + / / force the new object into the existing map <nl> + addObjectRaw ( id , nameToReplace , sub ) ; <nl> + / / Track the original in the substitution originals collection <nl> + substitutionOriginals . put ( nameToReplace , original ) ; <nl> return original ; <nl> } <nl> return null ; <nl> @ @ - 747 , 7 + 756 , 11 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e <nl> remappedIds . put ( itemName , new Integer [ ] { currId , newId } ) ; <nl> } <nl> I obj = currentRegistry . getRaw ( itemName ) ; <nl> - <nl> + / / If we have an object in the originals set , we use that for initial adding - substitute activation will readd the substitute if neceessary later <nl> + if ( currentRegistry . substitutionOriginals . containsKey ( itemName ) ) <nl> + { <nl> + obj = currentRegistry . substitutionOriginals . get ( itemName ) ; <nl> + } <nl> add ( newId , itemName , obj ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / fml / common / registry / ForgeTestRunner . java b / src / test / java / net / minecraftforge / fml / common / registry / ForgeTestRunner . java <nl> index cc4fbb0 . . 8302867 100644 <nl> - - - a / src / test / java / net / minecraftforge / fml / common / registry / ForgeTestRunner . java <nl> + + + b / src / test / java / net / minecraftforge / fml / common / registry / ForgeTestRunner . java <nl> @ @ - 13 , 9 + 13 , 8 @ @ import org . junit . runners . JUnit4 ; <nl> import org . junit . runners . model . InitializationError ; <nl> <nl> / * * <nl> - * Uses { @ code ResettingClassLoader } to load the test class , meaning the <nl> - * { @ code Quarantine } annotation can be used to ensure certain classes are <nl> - * loaded separately . <nl> + * Uses { @ code ResettingClassLoader } to load the test class . Minecraft and Forge <nl> + * classes are loaded using the separate class loader . <nl> * <nl> * Use of a separate class loader allows classes to be reloaded for each test <nl> * class , which is handy when you ' re testing frameworks that make use of static <nl> diff - - git a / src / test / java / net / minecraftforge / fml / common / registry / RegistryTestSuite . java b / src / test / java / net / minecraftforge / fml / common / registry / RegistryTestSuite . java <nl> new file mode 100644 <nl> index 0000000 . . d3512ae <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / fml / common / registry / RegistryTestSuite . java <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + package net . minecraftforge . fml . common . registry ; <nl> + <nl> + import org . junit . runner . RunWith ; <nl> + import org . junit . runners . Suite ; <nl> + <nl> + / * * <nl> + * Run the full suite of tests <nl> + * / <nl> + @ RunWith ( Suite . class ) <nl> + @ Suite . SuiteClasses ( { VanillaRegistryTests . class , FreezingTests . class , SubstitutionTests . class } ) <nl> + public class RegistryTestSuite <nl> + { <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / fml / common / registry / SubstitutionTests . java b / src / test / java / net / minecraftforge / fml / common / registry / SubstitutionTests . java <nl> new file mode 100644 <nl> index 0000000 . . 76c663a <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / fml / common / registry / SubstitutionTests . java <nl> @ @ - 0 , 0 + 1 , 75 @ @ <nl> + package net . minecraftforge . fml . common . registry ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . BlockDirt ; <nl> + import net . minecraft . init . Blocks ; <nl> + import net . minecraft . init . Bootstrap ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . common . DummyModContainer ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModMetadata ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + import org . junit . runner . RunWith ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + import static org . junit . Assert . assertNotEquals ; <nl> + <nl> + / * * <nl> + * Substitution test harness - tests that substitutions behave correctly <nl> + * / <nl> + @ RunWith ( ForgeTestRunner . class ) <nl> + public class SubstitutionTests <nl> + { <nl> + private ResourceLocation myDirt = new ResourceLocation ( " minecraft : dirt " ) ; <nl> + private BlockDirt toSub = new BlockDirt ( ) { <nl> + <nl> + } ; <nl> + <nl> + @ BeforeClass <nl> + public static void setup ( ) <nl> + { <nl> + Loader . instance ( ) ; <nl> + Bootstrap . register ( ) ; <nl> + Loader . instance ( ) . setupTestHarness ( new DummyModContainer ( new ModMetadata ( ) { { <nl> + modId = " test " ; <nl> + } } ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testSubstitution ( ) throws Exception <nl> + { <nl> + GameRegistry . addSubstitutionAlias ( " minecraft : dirt " , GameRegistry . Type . BLOCK , toSub ) ; <nl> + PersistentRegistryManager . freezeData ( ) ; <nl> + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> + <nl> + final FMLControlledNamespacedRegistry < Block > blockRegistry = ( FMLControlledNamespacedRegistry < Block > ) PersistentRegistryManager . findRegistryByType ( Block . class ) ; <nl> + <nl> + / / TEST 1 : Does my substitute take effect ? The substitute should be found in the registry <nl> + Block fnd = blockRegistry . getValue ( myDirt ) ; <nl> + Block currDirt = Blocks . DIRT ; <nl> + assertEquals ( " Got my dirt substitute - Blocks " , toSub , currDirt ) ; <nl> + assertEquals ( " Got my dirt substitute - Blocks and registry " , currDirt , fnd ) ; <nl> + assertEquals ( " Got my dirt substitute - registry " , toSub , fnd ) ; <nl> + <nl> + / / TEST 2 : Does the substitute get removed when told by remote operation ? The substitute should NOT be found in the registry <nl> + final PersistentRegistryManager . GameDataSnapshot snapshot = PersistentRegistryManager . takeSnapshot ( ) ; <nl> + snapshot . entries . get ( PersistentRegistryManager . BLOCKS ) . substitutions . clear ( ) ; <nl> + PersistentRegistryManager . injectSnapshot ( snapshot , false , false ) ; <nl> + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> + fnd = blockRegistry . getValue ( myDirt ) ; <nl> + currDirt = Blocks . DIRT ; <nl> + assertNotEquals ( " Got my dirt substitute - Blocks " , toSub , currDirt ) ; <nl> + assertEquals ( " Got my dirt substitute - Blocks and registry " , currDirt , fnd ) ; <nl> + assertNotEquals ( " Got my dirt substitute - registry " , toSub , fnd ) ; <nl> + <nl> + / / TEST 3 : Does the substitute get restored when reverting to frozen state ? The substitute should be found in the registry again <nl> + PersistentRegistryManager . revertToFrozen ( ) ; <nl> + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> + fnd = blockRegistry . getValue ( myDirt ) ; <nl> + currDirt = Blocks . DIRT ; <nl> + assertEquals ( " Got my dirt substitute - Blocks " , toSub , currDirt ) ; <nl> + assertEquals ( " Got my dirt substitute - Blocks and registry " , currDirt , fnd ) ; <nl> + assertEquals ( " Got my dirt substitute - registry " , toSub , fnd ) ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / event / RegistryEvent . java b / src / main / java / net / minecraftforge / event / RegistryEvent . java 
 index a1967e5 . . 50d09ab 100644 
 - - - a / src / main / java / net / minecraftforge / event / RegistryEvent . java 
 + + + b / src / main / java / net / minecraftforge / event / RegistryEvent . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . event ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . fml . common . eventhandler . Event ; 
 import net . minecraftforge . fml . common . eventhandler . GenericEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . IContextSetter ; 
 import net . minecraftforge . fml . common . registry . IForgeRegistry ; 
 import net . minecraftforge . fml . common . registry . IForgeRegistryEntry ; 
 import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; 
 @ @ - 30 , 7 + 31 , 7 @ @ import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; 
 / * * 
 * RegistryEvent supertype . 
 * / 
 - public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEvent < T > 
 + public class RegistryEvent < T extends IForgeRegistryEntry < T > > extends GenericEvent < T > implements IContextSetter 
 { 
 RegistryEvent ( Class < T > clazz ) { 
 super ( clazz ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 index 81df043 . . 230abe4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 @ @ - 22 , 6 + 22 , 7 @ @ package net . minecraftforge . fml . common ; 
 import com . google . common . base . Strings ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 + import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; 
 import net . minecraftforge . fml . common . discovery . asm . ModAnnotation ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 import org . apache . logging . log4j . Level ; 
 @ @ - 50 , 6 + 51 , 24 @ @ public class AutomaticEventSubscriber 
 { 
 try 
 { 
 + / / Filter out handlers for things that arnt this mod . 
 + / / Perhaps find a way to make this more generic for multiple mods 
 + / / from the same source . . . . 
 + boolean register = true ; 
 + for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) 
 + { 
 + if ( a . getClassName ( ) . equals ( targ . getClassName ( ) ) ) 
 + { 
 + if ( ! mod . getModId ( ) . equals ( a . getAnnotationInfo ( ) . get ( " modid " ) ) ) 
 + { 
 + register = false ; 
 + break ; 
 + } 
 + } 
 + } 
 + if ( ! register ) 
 + continue ; 
 + 
 / / noinspection unchecked 
 List < ModAnnotation . EnumHolder > sidesEnum = ( List < ModAnnotation . EnumHolder > ) targ . getAnnotationInfo ( ) . get ( " value " ) ; 
 EnumSet < Side > sides = DEFAULT ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 3f43f78 . . 763dffe 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 1144 , 4 + 1144 , 9 @ @ public class Loader 
 { 
 return modController ! = null ? modController . getState ( ) : LoaderState . NOINIT ; 
 } 
 + 
 + public void setActiveModContainer ( ModContainer container ) 
 + { 
 + this . modController . forceActiveContainer ( container ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 index 651e3d4 . . f3c36c1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 @ @ - 122 , 15 + 122 , 32 @ @ public class EventBus implements IEventExceptionHandler 
 } 
 } 
 
 - private void register ( Class < ? > eventType , Object target , Method method , ModContainer owner ) 
 + private void register ( Class < ? > eventType , Object target , Method method , final ModContainer owner ) 
 { 
 try 
 { 
 Constructor < ? > ctr = eventType . getConstructor ( ) ; 
 ctr . setAccessible ( true ) ; 
 Event event = ( Event ) ctr . newInstance ( ) ; 
 - ASMEventHandler listener = new ASMEventHandler ( target , method , owner , IGenericEvent . class . isAssignableFrom ( eventType ) ) ; 
 - event . getListenerList ( ) . register ( busID , listener . getPriority ( ) , listener ) ; 
 + final ASMEventHandler asm = new ASMEventHandler ( target , method , owner , IGenericEvent . class . isAssignableFrom ( eventType ) ) ; 
 + 
 + IEventListener listener = asm ; 
 + if ( IContextSetter . class . isAssignableFrom ( eventType ) ) 
 + { 
 + listener = new IEventListener ( ) 
 + { 
 + @ Override 
 + public void invoke ( Event event ) 
 + { 
 + ModContainer old = Loader . instance ( ) . activeModContainer ( ) ; 
 + Loader . instance ( ) . setActiveModContainer ( owner ) ; 
 + asm . invoke ( event ) ; 
 + Loader . instance ( ) . setActiveModContainer ( old ) ; 
 + } 
 + } ; 
 + } 
 + 
 + event . getListenerList ( ) . register ( busID , asm . getPriority ( ) , listener ) ; 
 
 ArrayList < IEventListener > others = listeners . get ( target ) ; 
 if ( others = = null ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / eventhandler / IContextSetter . java b / src / main / java / net / minecraftforge / fml / common / eventhandler / IContextSetter . java 
 new file mode 100644 
 index 0000000 . . eab3999 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / eventhandler / IContextSetter . java 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + package net . minecraftforge . fml . common . eventhandler ; 
 + 
 + / / Instructs event handlers to set the active mod container . 
 + / / This has a major performance impact so use sparingly . 
 + / / Note : The context IS NOT thread aware as this would be ungodly slow . 
 + / / So This should ONLY be used for Forge mod lifecycle events . 
 + public interface IContextSetter { } 
 diff - - git a / src / test / java / net / minecraftforge / debug / ForgeBlockStatesLoaderDebug . java b / src / test / java / net / minecraftforge / debug / ForgeBlockStatesLoaderDebug . java 
 index 98399ed . . f89dbbe 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ForgeBlockStatesLoaderDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ForgeBlockStatesLoaderDebug . java 
 @ @ - 5 , 25 + 5 , 21 @ @ import java . util . Map . Entry ; 
 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockWall ; 
 - import net . minecraft . block . material . Material ; 
 - import net . minecraft . block . properties . PropertyEnum ; 
 - import net . minecraft . block . state . BlockStateContainer ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . renderer . block . statemap . IStateMapper ; 
 import net . minecraft . client . renderer . block . statemap . StateMap ; 
 import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 import net . minecraft . init . Blocks ; 
 import net . minecraft . item . Item ; 
 - import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemMultiTexture ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraft . util . IStringSerializable ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 import net . minecraftforge . fml . common . Mod ; 
 import net . minecraftforge . fml . common . Mod . EventHandler ; 
 import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 - import net . minecraftforge . fml . common . registry . GameData ; 
 - import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 import net . minecraftforge . fml . relauncher . SideOnly ; 
 
 @ @ - 31 , 21 + 27 , 45 @ @ import com . google . common . base . Function ; 
 import com . google . common . collect . Maps ; 
 
 @ Mod ( modid = ForgeBlockStatesLoaderDebug . MODID , name = " ForgeBlockStatesLoader " , version = " 1 . 0 " ) 
 + @ Mod . EventBusSubscriber 
 public class ForgeBlockStatesLoaderDebug { 
 public static final String MODID = " forgeblockstatesloader " ; 
 public static final String ASSETS = " forgeblockstatesloader : " ; 
 
 - / / public static final Block blockCustom = new CustomMappedBlock ( ) ; 
 - public static final String nameCustomWall = " custom _ wall " ; 
 - public static final BlockWall blockCustomWall = new BlockWall ( Blocks . COBBLESTONE ) ; 
 - public static final ItemMultiTexture itemCustomWall = ( ItemMultiTexture ) new ItemMultiTexture ( blockCustomWall , blockCustomWall , new Function < ItemStack , String > ( ) 
 + @ ObjectHolder ( MODID ) 
 + public static class BLOCKS { 
 + public static final BlockWall custom _ wall = null ; 
 + } 
 + 
 + @ ObjectHolder ( MODID ) 
 + public static class ITEMS { 
 + public static final ItemMultiTexture custom _ wall = null ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerBlocks ( RegistryEvent . Register < Block > event ) 
 { 
 - @ Override 
 - public String apply ( ItemStack stack ) 
 - { 
 - return BlockWall . EnumType . byMetadata ( stack . getMetadata ( ) ) . getUnlocalizedName ( ) ; 
 - } 
 - } ) . setRegistryName ( nameCustomWall ) ; 
 + event . getRegistry ( ) . registerAll ( 
 + new BlockWall ( Blocks . COBBLESTONE ) . setUnlocalizedName ( MODID + " . customWall " ) . setRegistryName ( MODID , " custom _ wall " ) 
 + ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerItems ( RegistryEvent . Register < Item > event ) 
 + { 
 + event . getRegistry ( ) . registerAll ( 
 + new ItemMultiTexture ( BLOCKS . custom _ wall , BLOCKS . custom _ wall , new Function < ItemStack , String > ( ) 
 + { 
 + @ Override 
 + public String apply ( ItemStack stack ) 
 + { 
 + return BlockWall . EnumType . byMetadata ( stack . getMetadata ( ) ) . getUnlocalizedName ( ) ; 
 + } 
 + } ) . setRegistryName ( BLOCKS . custom _ wall . getRegistryName ( ) ) 
 + ) ; 
 + } 
 + 
 + / / public static final Block blockCustom = new CustomMappedBlock ( ) ; 
 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) 
 @ @ - 53 , 11 + 73 , 6 @ @ public class ForgeBlockStatesLoaderDebug { 
 / / blockCustom . setUnlocalizedName ( MODID + " . customBlock " ) . setRegistryName ( " customBlock " ) ; 
 / / GameRegistry . registerBlock ( blockCustom ) ; 
 
 - blockCustomWall . setUnlocalizedName ( MODID + " . customWall " ) . setRegistryName ( nameCustomWall ) ; 
 - GameRegistry . register ( blockCustomWall ) ; 
 - GameRegistry . register ( itemCustomWall ) ; 
 - GameData . getBlockItemMap ( ) . put ( blockCustomWall , itemCustomWall ) ; 
 - 
 if ( event . getSide ( ) = = Side . CLIENT ) 
 preInitClient ( event ) ; 
 } 
 @ @ - 67 , 7 + 82 , 7 @ @ public class ForgeBlockStatesLoaderDebug { 
 { 
 / / ModelLoader . setCustomStateMapper ( blockCustom , new StateMap . Builder ( ) . withName ( CustomMappedBlock . VARIANT ) . build ( ) ) ; 
 
 - ModelLoader . setCustomStateMapper ( blockCustomWall , new IStateMapper ( ) 
 + ModelLoader . setCustomStateMapper ( BLOCKS . custom _ wall , new IStateMapper ( ) 
 { 
 StateMap stateMap = new StateMap . Builder ( ) . withName ( BlockWall . VARIANT ) . withSuffix ( " _ wall " ) . build ( ) ; 
 @ Override 
 @ @ - 85 , 9 + 100 , 8 @ @ public class ForgeBlockStatesLoaderDebug { 
 return newMap ; 
 } 
 } ) ; 
 - Item customWallItem = Item . getItemFromBlock ( blockCustomWall ) ; 
 - ModelLoader . setCustomModelResourceLocation ( customWallItem , 0 , new ModelResourceLocation ( ASSETS + " cobblestone _ wall " , " inventory " ) ) ; 
 - ModelLoader . setCustomModelResourceLocation ( customWallItem , 1 , new ModelResourceLocation ( ASSETS + " mossy _ cobblestone _ wall " , " inventory " ) ) ; 
 + ModelLoader . setCustomModelResourceLocation ( ITEMS . custom _ wall , 0 , new ModelResourceLocation ( ASSETS + " cobblestone _ wall " , " inventory " ) ) ; 
 + ModelLoader . setCustomModelResourceLocation ( ITEMS . custom _ wall , 1 , new ModelResourceLocation ( ASSETS + " mossy _ cobblestone _ wall " , " inventory " ) ) ; 
 } 
 
 / / this block is never actually used , it ' s only needed for the error message on load to see the variant it maps to

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / LoadController . java b / src / main / java / net / minecraftforge / fml / common / LoadController . java 
 index 99df669 . . 7422eec 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / LoadController . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / LoadController . java 
 @ @ - 199 , 6 + 199 , 10 @ @ public class LoadController 
 return activeContainer ! = null ? activeContainer : findActiveContainerFromStack ( ) ; 
 } 
 
 + void forceActiveContainer ( ModContainer container ) 
 + { 
 + activeContainer = container ; 
 + } 
 @ Subscribe 
 public void propogateStateMessage ( FMLEvent stateEvent ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 982c389 . . 82bcd17 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import net . minecraftforge . common . capabilities . CapabilityManager ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 import net . minecraftforge . fml . common . ModContainer . Disableable ; 
 import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; 
 + import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 import net . minecraftforge . fml . common . discovery . ModDiscoverer ; 
 import net . minecraftforge . fml . common . event . FMLInterModComms ; 
 import net . minecraftforge . fml . common . event . FMLLoadEvent ; 
 @ @ - 489 , 10 + 490 , 23 @ @ public class Loader 
 } 
 
 / * * 
 + * Used to setup a testharness with a single dummy mod instance for use with various testing hooks 
 + * @ param dummycontainer A dummy container that will be returned as " active " for all queries 
 + * / 
 + public void setupTestHarness ( ModContainer dummycontainer ) 
 + { 
 + modController = new LoadController ( this ) ; 
 + mods = Lists . newArrayList ( dummycontainer ) ; 
 + modController . transition ( LoaderState . LOADING , false ) ; 
 + modController . transition ( LoaderState . CONSTRUCTING , false ) ; 
 + ObjectHolderRegistry . INSTANCE . findObjectHolders ( new ASMDataTable ( ) ) ; 
 + modController . forceActiveContainer ( dummycontainer ) ; 
 + } 
 + / * * 
 * Called from the hook to start mod loading . We trigger the 
 * { @ link # identifyMods ( ) } and Constructing , Preinitalization , and Initalization phases here . Finally , 
 * the mod list is frozen completely and is consider immutable from then on . 
 - * @ param injectedModContainers 
 + * @ param injectedModContainers containers to inject 
 * / 
 public void loadMods ( List < String > injectedModContainers ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index c6c2d4b . . 5ccad59 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 66 , 6 + 66 , 10 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e 
 * / 
 private final BiMap < ResourceLocation , I > persistentSubstitutions = HashBiMap . create ( ) ; 
 / * * 
 + * Substitution originals - these are the originals that are being substituted 
 + * / 
 + private final BiMap < ResourceLocation , I > substitutionOriginals = HashBiMap . create ( ) ; 
 + / * * 
 * This is the current active substitution set for a particular world . It will change as worlds come and go . 
 * / 
 private final BiMap < ResourceLocation , I > activeSubstitutions = HashBiMap . create ( ) ; 
 @ @ - 602 , 6 + 606 , 11 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e 
 I sub = getPersistentSubstitutions ( ) . get ( nameToReplace ) ; 
 getExistingDelegate ( original ) . changeReference ( sub ) ; 
 activeSubstitutions . put ( nameToReplace , sub ) ; 
 + int id = getIDForObjectBypass ( original ) ; 
 + / / force the new object into the existing map 
 + addObjectRaw ( id , nameToReplace , sub ) ; 
 + / / Track the original in the substitution originals collection 
 + substitutionOriginals . put ( nameToReplace , original ) ; 
 return original ; 
 } 
 return null ; 
 @ @ - 747 , 7 + 756 , 11 @ @ public class FMLControlledNamespacedRegistry < I extends IForgeRegistryEntry < I > > e 
 remappedIds . put ( itemName , new Integer [ ] { currId , newId } ) ; 
 } 
 I obj = currentRegistry . getRaw ( itemName ) ; 
 - 
 + / / If we have an object in the originals set , we use that for initial adding - substitute activation will readd the substitute if neceessary later 
 + if ( currentRegistry . substitutionOriginals . containsKey ( itemName ) ) 
 + { 
 + obj = currentRegistry . substitutionOriginals . get ( itemName ) ; 
 + } 
 add ( newId , itemName , obj ) ; 
 } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / fml / common / registry / ForgeTestRunner . java b / src / test / java / net / minecraftforge / fml / common / registry / ForgeTestRunner . java 
 index cc4fbb0 . . 8302867 100644 
 - - - a / src / test / java / net / minecraftforge / fml / common / registry / ForgeTestRunner . java 
 + + + b / src / test / java / net / minecraftforge / fml / common / registry / ForgeTestRunner . java 
 @ @ - 13 , 9 + 13 , 8 @ @ import org . junit . runners . JUnit4 ; 
 import org . junit . runners . model . InitializationError ; 
 
 / * * 
 - * Uses { @ code ResettingClassLoader } to load the test class , meaning the 
 - * { @ code Quarantine } annotation can be used to ensure certain classes are 
 - * loaded separately . 
 + * Uses { @ code ResettingClassLoader } to load the test class . Minecraft and Forge 
 + * classes are loaded using the separate class loader . 
 * 
 * Use of a separate class loader allows classes to be reloaded for each test 
 * class , which is handy when you ' re testing frameworks that make use of static 
 diff - - git a / src / test / java / net / minecraftforge / fml / common / registry / RegistryTestSuite . java b / src / test / java / net / minecraftforge / fml / common / registry / RegistryTestSuite . java 
 new file mode 100644 
 index 0000000 . . d3512ae 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / fml / common / registry / RegistryTestSuite . java 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + package net . minecraftforge . fml . common . registry ; 
 + 
 + import org . junit . runner . RunWith ; 
 + import org . junit . runners . Suite ; 
 + 
 + / * * 
 + * Run the full suite of tests 
 + * / 
 + @ RunWith ( Suite . class ) 
 + @ Suite . SuiteClasses ( { VanillaRegistryTests . class , FreezingTests . class , SubstitutionTests . class } ) 
 + public class RegistryTestSuite 
 + { 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / fml / common / registry / SubstitutionTests . java b / src / test / java / net / minecraftforge / fml / common / registry / SubstitutionTests . java 
 new file mode 100644 
 index 0000000 . . 76c663a 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / fml / common / registry / SubstitutionTests . java 
 @ @ - 0 , 0 + 1 , 75 @ @ 
 + package net . minecraftforge . fml . common . registry ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . BlockDirt ; 
 + import net . minecraft . init . Blocks ; 
 + import net . minecraft . init . Bootstrap ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . common . DummyModContainer ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModMetadata ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + import org . junit . runner . RunWith ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + import static org . junit . Assert . assertNotEquals ; 
 + 
 + / * * 
 + * Substitution test harness - tests that substitutions behave correctly 
 + * / 
 + @ RunWith ( ForgeTestRunner . class ) 
 + public class SubstitutionTests 
 + { 
 + private ResourceLocation myDirt = new ResourceLocation ( " minecraft : dirt " ) ; 
 + private BlockDirt toSub = new BlockDirt ( ) { 
 + 
 + } ; 
 + 
 + @ BeforeClass 
 + public static void setup ( ) 
 + { 
 + Loader . instance ( ) ; 
 + Bootstrap . register ( ) ; 
 + Loader . instance ( ) . setupTestHarness ( new DummyModContainer ( new ModMetadata ( ) { { 
 + modId = " test " ; 
 + } } ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testSubstitution ( ) throws Exception 
 + { 
 + GameRegistry . addSubstitutionAlias ( " minecraft : dirt " , GameRegistry . Type . BLOCK , toSub ) ; 
 + PersistentRegistryManager . freezeData ( ) ; 
 + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 + 
 + final FMLControlledNamespacedRegistry < Block > blockRegistry = ( FMLControlledNamespacedRegistry < Block > ) PersistentRegistryManager . findRegistryByType ( Block . class ) ; 
 + 
 + / / TEST 1 : Does my substitute take effect ? The substitute should be found in the registry 
 + Block fnd = blockRegistry . getValue ( myDirt ) ; 
 + Block currDirt = Blocks . DIRT ; 
 + assertEquals ( " Got my dirt substitute - Blocks " , toSub , currDirt ) ; 
 + assertEquals ( " Got my dirt substitute - Blocks and registry " , currDirt , fnd ) ; 
 + assertEquals ( " Got my dirt substitute - registry " , toSub , fnd ) ; 
 + 
 + / / TEST 2 : Does the substitute get removed when told by remote operation ? The substitute should NOT be found in the registry 
 + final PersistentRegistryManager . GameDataSnapshot snapshot = PersistentRegistryManager . takeSnapshot ( ) ; 
 + snapshot . entries . get ( PersistentRegistryManager . BLOCKS ) . substitutions . clear ( ) ; 
 + PersistentRegistryManager . injectSnapshot ( snapshot , false , false ) ; 
 + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 + fnd = blockRegistry . getValue ( myDirt ) ; 
 + currDirt = Blocks . DIRT ; 
 + assertNotEquals ( " Got my dirt substitute - Blocks " , toSub , currDirt ) ; 
 + assertEquals ( " Got my dirt substitute - Blocks and registry " , currDirt , fnd ) ; 
 + assertNotEquals ( " Got my dirt substitute - registry " , toSub , fnd ) ; 
 + 
 + / / TEST 3 : Does the substitute get restored when reverting to frozen state ? The substitute should be found in the registry again 
 + PersistentRegistryManager . revertToFrozen ( ) ; 
 + ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 + fnd = blockRegistry . getValue ( myDirt ) ; 
 + currDirt = Blocks . DIRT ; 
 + assertEquals ( " Got my dirt substitute - Blocks " , toSub , currDirt ) ; 
 + assertEquals ( " Got my dirt substitute - Blocks and registry " , currDirt , fnd ) ; 
 + assertEquals ( " Got my dirt substitute - registry " , toSub , fnd ) ; 
 + } 
 + }
