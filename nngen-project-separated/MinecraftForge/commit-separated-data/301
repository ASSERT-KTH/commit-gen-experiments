BLEU SCORE: 0.021340743160056203

TEST MSG: Fix invalid rendering of single - frame B3D models ( Fix # 3815 )
GENERATED MSG: Model stuff : updated to generics , fixed various warnings , added handling of new perspective types .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 690a488 . . 39d00d5 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 670 , 7 + 670 , 7 @ @ public final class ModelLoader extends ModelBakery <nl> textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . <nl> <nl> models . add ( model ) ; <nl> - builder . add ( Pair . of ( model , v . getState ( ) ) ) ; <nl> + builder . add ( Pair . of ( model , new ModelStateComposition ( v . getState ( ) , model . getDefaultState ( ) ) ) ) ; <nl> } <nl> <nl> if ( models . size ( ) = = 0 ) / / If all variants are missing , add one with the missing model and default rotation . <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index 17986bd . . 1acc3da 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 496 , 6 + 496 , 9 @ @ public enum B3DLoader implements ICustomModelLoader <nl> @ Override <nl> public ModelWrapper process ( ImmutableMap < String , String > data ) <nl> { <nl> + ImmutableSet < String > newMeshes = this . meshes ; <nl> + int newDefaultKey = this . defaultKey ; <nl> + boolean hasChanged = false ; <nl> if ( data . containsKey ( " mesh " ) ) <nl> { <nl> JsonElement e = new JsonParser ( ) . parse ( data . get ( " mesh " ) ) ; <nl> @ @ - 518 , 7 + 521 , 8 @ @ public enum B3DLoader implements ICustomModelLoader <nl> return this ; <nl> } <nl> } <nl> - return new ModelWrapper ( modelLocation , model , builder . build ( ) , smooth , gui3d , defaultKey , textures ) ; <nl> + newMeshes = builder . build ( ) ; <nl> + hasChanged = true ; <nl> } <nl> else <nl> { <nl> @ @ - 531 , 7 + 535 , 8 @ @ public enum B3DLoader implements ICustomModelLoader <nl> JsonElement e = new JsonParser ( ) . parse ( data . get ( " key " ) ) ; <nl> if ( e . isJsonPrimitive ( ) & & e . getAsJsonPrimitive ( ) . isNumber ( ) ) <nl> { <nl> - return new ModelWrapper ( modelLocation , model , meshes , smooth , gui3d , e . getAsNumber ( ) . intValue ( ) , textures ) ; <nl> + newDefaultKey = e . getAsNumber ( ) . intValue ( ) ; <nl> + hasChanged = true ; <nl> } <nl> else <nl> { <nl> @ @ - 539 , 7 + 544 , 7 @ @ public enum B3DLoader implements ICustomModelLoader <nl> return this ; <nl> } <nl> } <nl> - return this ; <nl> + return hasChanged ? new ModelWrapper ( modelLocation , model , newMeshes , smooth , gui3d , newDefaultKey , textures ) : this ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / resources / model / IBakedModel . java . patch b / patches / minecraft / net / minecraft / client / resources / model / IBakedModel . java . patch <nl> index 94444e8 . . d032f72 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / resources / model / IBakedModel . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / resources / model / IBakedModel . java . patch <nl> @ @ - 1 , 18 + 1 , 6 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / resources / model / IBakedModel . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / resources / model / IBakedModel . java <nl> - @ @ - 8 , 7 + 8 , 11 @ @ <nl> - import net . minecraftforge . fml . relauncher . Side ; <nl> - import net . minecraftforge . fml . relauncher . SideOnly ; <nl> - <nl> - + / * <nl> - + * @ deprecated use { @ link net . minecraftforge . client . model . IFlexibleBakedModel } , { @ link net . minecraftforge . client . model . IPerspectiveAwareModel } <nl> - + * / <nl> - @ SideOnly ( Side . CLIENT ) <nl> - + @ Deprecated <nl> - public interface IBakedModel <nl> - { <nl> - List < BakedQuad > getFaceQuads ( EnumFacing p _ 177551 _ 1 _ ) ; <nl> - @ @ - 23 , 5 + 27 , 6 @ @ <nl> + @ @ - 23 , 5 + 23 , 6 @ @ <nl> <nl> TextureAtlasSprite getTexture ( ) ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 2fc9623 . . 2b58dee 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import net . minecraft . client . resources . I18n ; <nl> import net . minecraft . client . resources . model . IBakedModel ; <nl> import net . minecraft . client . resources . model . ModelBakery ; <nl> import net . minecraft . client . resources . model . ModelManager ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> import net . minecraft . client . resources . model . ModelRotation ; <nl> import net . minecraft . client . settings . GameSettings ; <nl> import net . minecraft . entity . Entity ; <nl> @ @ - 90 , 6 + 91 , 7 @ @ import org . lwjgl . opengl . GL11 ; <nl> <nl> <nl> <nl> + <nl> import com . google . common . collect . Maps ; <nl> <nl> public class ForgeHooksClient <nl> @ @ - 510 , 7 + 512 , 7 @ @ public class ForgeHooksClient <nl> } <nl> * / <nl> <nl> - public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + public static void onModelBake ( ModelManager modelManager , IRegistry < ModelResourceLocation , IBakedModel > modelRegistry , ModelBakery modelBakery ) <nl> { <nl> ModelLoader loader = ( ModelLoader ) modelBakery ; <nl> MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , loader ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> index cd3e1d2 . . 007fefc 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> @ @ - 43 , 7 + 43 , 6 @ @ public class BlockStateLoader <nl> * <nl> * @ return Model definition including variants for all known combinations . <nl> * / <nl> - @ SuppressWarnings ( " rawtypes " ) <nl> public static ModelBlockDefinition load ( Reader reader , final Gson vanillaGSON ) <nl> { <nl> try <nl> @ @ - 75 , 7 + 74 , 7 @ @ public class BlockStateLoader <nl> variants . add ( new ModelBlockDefinition . Variants ( entry . getKey ( ) , mcVars ) ) ; <nl> } <nl> <nl> - return new ModelBlockDefinition ( ( Collection ) variants ) ; / / Damn lists being collections ! <nl> + return new ModelBlockDefinition ( variants ) ; <nl> <nl> default : / / Unknown version . . try loading it as normal . <nl> return vanillaGSON . fromJson ( reader , ModelBlockDefinition . class ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> index 59598c2 . . b5ced65 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> @ @ - 534 , 17 + 534 , 29 @ @ public class ForgeBlockStateV1 extends Marker <nl> transform . remove ( " firstperson " ) ; <nl> transforms . put ( TransformType . FIRST _ PERSON , TRSRTransformation . blockCenterToCorner ( t ) ) ; <nl> } <nl> + if ( transform . has ( " head " ) ) <nl> + { <nl> + TRSRTransformation t = context . deserialize ( transform . get ( " head " ) , TRSRTransformation . class ) ; <nl> + transform . remove ( " head " ) ; <nl> + transforms . put ( TransformType . HEAD , TRSRTransformation . blockCenterToCorner ( t ) ) ; <nl> + } <nl> if ( transform . has ( " gui " ) ) <nl> { <nl> TRSRTransformation t = context . deserialize ( transform . get ( " gui " ) , TRSRTransformation . class ) ; <nl> transform . remove ( " gui " ) ; <nl> transforms . put ( TransformType . GUI , TRSRTransformation . blockCenterToCorner ( t ) ) ; <nl> } <nl> - if ( transform . has ( " head " ) ) <nl> + if ( transform . has ( " ground " ) ) <nl> { <nl> - TRSRTransformation t = context . deserialize ( transform . get ( " head " ) , TRSRTransformation . class ) ; <nl> - transform . remove ( " head " ) ; <nl> - transforms . put ( TransformType . HEAD , TRSRTransformation . blockCenterToCorner ( t ) ) ; <nl> + TRSRTransformation t = context . deserialize ( transform . get ( " ground " ) , TRSRTransformation . class ) ; <nl> + transform . remove ( " ground " ) ; <nl> + transforms . put ( TransformType . GROUND , TRSRTransformation . blockCenterToCorner ( t ) ) ; <nl> + } <nl> + if ( transform . has ( " fixed " ) ) <nl> + { <nl> + TRSRTransformation t = context . deserialize ( transform . get ( " fixed " ) , TRSRTransformation . class ) ; <nl> + transform . remove ( " fixed " ) ; <nl> + transforms . put ( TransformType . FIXED , TRSRTransformation . blockCenterToCorner ( t ) ) ; <nl> } <nl> int k = transform . entrySet ( ) . size ( ) ; <nl> if ( transform . has ( " matrix " ) ) k - - ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / IFlexibleBakedModel . java b / src / main / java / net / minecraftforge / client / model / IFlexibleBakedModel . java <nl> index e01989a . . 4d921fa 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IFlexibleBakedModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IFlexibleBakedModel . java <nl> @ @ - 14 , 9 + 14 , 6 @ @ import net . minecraft . util . EnumFacing ; <nl> * / <nl> public interface IFlexibleBakedModel extends IBakedModel <nl> { <nl> - / / non - erased versions of the IBakedModel methods <nl> - List < BakedQuad > getFaceQuads ( EnumFacing side ) ; <nl> - List < BakedQuad > getGeneralQuads ( ) ; <nl> / * <nl> * Specifies the format which BakedQuads ' getVertexData will have . <nl> * / <nl> @ @ - 36 , 13 + 33 , 11 @ @ public interface IFlexibleBakedModel extends IBakedModel <nl> this . format = format ; <nl> } <nl> <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> { <nl> return parent . getFaceQuads ( side ) ; <nl> } <nl> <nl> - @ SuppressWarnings ( " unchecked " ) <nl> public List < BakedQuad > getGeneralQuads ( ) <nl> { <nl> return parent . getGeneralQuads ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> index be4a2ad . . d783267 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> @ @ - 14 , 7 + 14 , 6 @ @ import net . minecraft . util . EnumFacing ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> <nl> - import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> / * <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveState . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveState . java <nl> index 1dbeb77 . . 838090f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveState . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveState . java <nl> @ @ - 38 , 11 + 38 , 10 @ @ public interface IPerspectiveState extends IModelState <nl> private static ImmutableMap < TransformType , IModelState > getMap ( ItemCameraTransforms transforms ) <nl> { <nl> Map < TransformType , IModelState > map = Maps . newHashMap ( ) ; <nl> - map . put ( TransformType . NONE , TRSRTransformation . identity ( ) ) ; <nl> - map . put ( TransformType . THIRD _ PERSON , transforms . thirdPerson ) ; <nl> - map . put ( TransformType . FIRST _ PERSON , transforms . firstPerson ) ; <nl> - map . put ( TransformType . GUI , transforms . gui ) ; <nl> - map . put ( TransformType . HEAD , transforms . head ) ; <nl> + for ( TransformType type : TransformType . values ( ) ) <nl> + { <nl> + map . put ( type , transforms . func _ 181688 _ b ( type ) ) ; <nl> + } <nl> return Maps . immutableEnumMap ( map ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> index 8930101 . . 396c4e6 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> @ @ - 3 , 7 + 3 , 6 @ @ package net . minecraftforge . client . model ; <nl> import java . util . Arrays ; <nl> import java . util . Collection ; <nl> import java . util . List ; <nl> - import java . util . Map ; <nl> <nl> import javax . vecmath . Matrix4f ; <nl> import javax . vecmath . Vector4f ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index fda3968 . . 4e0fdef 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 38 , 6 + 38 , 7 @ @ import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> import net . minecraft . client . resources . IResourceManager ; <nl> import net . minecraft . client . resources . model . BuiltInModel ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> import net . minecraft . client . resources . model . ModelBakery ; <nl> import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> import net . minecraft . client . resources . model . ModelRotation ; <nl> @ @ - 85 , 7 + 86 , 7 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> <nl> @ Override <nl> - public IRegistry setupModelRegistry ( ) <nl> + public IRegistry < ModelResourceLocation , IBakedModel > setupModelRegistry ( ) <nl> { <nl> isLoading = true ; <nl> loadBlocks ( ) ; <nl> @ @ - 717 , 12 + 718 , 12 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> - public void onPostBakeEvent ( IRegistry modelRegistry ) <nl> + public void onPostBakeEvent ( IRegistry < ModelResourceLocation , IBakedModel > modelRegistry ) <nl> { <nl> - Object missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; <nl> + IBakedModel missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; <nl> for ( ModelResourceLocation missing : missingVariants ) <nl> { <nl> - Object model = modelRegistry . getObject ( missing ) ; <nl> + IBakedModel model = modelRegistry . getObject ( missing ) ; <nl> if ( model = = null | | model = = missingModel ) <nl> { <nl> FMLLog . severe ( " Model definition for location % s not found " , missing ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java <nl> index c9b889a . . 60af648 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java <nl> @ @ - 185 , 12 + 185 , 12 @ @ public class B3DModel <nl> { <nl> chunk ( " BB3D " ) ; <nl> int version = buf . getInt ( ) ; <nl> - if ( version / 100 > this . version / 100 ) <nl> + if ( version / 100 > Parser . version / 100 ) <nl> throw new IOException ( " Unsupported major model version : " + ( ( float ) version / 100 ) ) ; <nl> - if ( version % 100 > this . version % 100 ) <nl> + if ( version % 100 > Parser . version % 100 ) <nl> logger . warn ( String . format ( " Minor version differnce in model : " , ( ( float ) version / 100 ) ) ) ; <nl> - List < Texture > textures = Collections . EMPTY _ LIST ; <nl> - List < Brush > brushes = Collections . EMPTY _ LIST ; <nl> + List < Texture > textures = Collections . emptyList ( ) ; <nl> + List < Brush > brushes = Collections . emptyList ( ) ; <nl> Node < ? > root = null ; <nl> while ( buf . hasRemaining ( ) ) <nl> { <nl> @ @ - 400 , 7 + 400 , 6 @ @ public class B3DModel <nl> chunk ( " NODE " ) ; <nl> animations . push ( HashBasedTable . < Integer , Optional < Node < ? > > , Key > create ( ) ) ; <nl> Triple < Integer , Integer , Float > animData = null ; <nl> - Animation animation = null ; <nl> Pair < Brush , List < Face > > mesh = null ; <nl> List < Pair < Vertex , Float > > bone = null ; <nl> Map < Integer , Key > keys = new HashMap < Integer , Key > ( ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 690a488 . . 39d00d5 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 670 , 7 + 670 , 7 @ @ public final class ModelLoader extends ModelBakery 
 textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . 
 
 models . add ( model ) ; 
 - builder . add ( Pair . of ( model , v . getState ( ) ) ) ; 
 + builder . add ( Pair . of ( model , new ModelStateComposition ( v . getState ( ) , model . getDefaultState ( ) ) ) ) ; 
 } 
 
 if ( models . size ( ) = = 0 ) / / If all variants are missing , add one with the missing model and default rotation . 
 diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index 17986bd . . 1acc3da 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 496 , 6 + 496 , 9 @ @ public enum B3DLoader implements ICustomModelLoader 
 @ Override 
 public ModelWrapper process ( ImmutableMap < String , String > data ) 
 { 
 + ImmutableSet < String > newMeshes = this . meshes ; 
 + int newDefaultKey = this . defaultKey ; 
 + boolean hasChanged = false ; 
 if ( data . containsKey ( " mesh " ) ) 
 { 
 JsonElement e = new JsonParser ( ) . parse ( data . get ( " mesh " ) ) ; 
 @ @ - 518 , 7 + 521 , 8 @ @ public enum B3DLoader implements ICustomModelLoader 
 return this ; 
 } 
 } 
 - return new ModelWrapper ( modelLocation , model , builder . build ( ) , smooth , gui3d , defaultKey , textures ) ; 
 + newMeshes = builder . build ( ) ; 
 + hasChanged = true ; 
 } 
 else 
 { 
 @ @ - 531 , 7 + 535 , 8 @ @ public enum B3DLoader implements ICustomModelLoader 
 JsonElement e = new JsonParser ( ) . parse ( data . get ( " key " ) ) ; 
 if ( e . isJsonPrimitive ( ) & & e . getAsJsonPrimitive ( ) . isNumber ( ) ) 
 { 
 - return new ModelWrapper ( modelLocation , model , meshes , smooth , gui3d , e . getAsNumber ( ) . intValue ( ) , textures ) ; 
 + newDefaultKey = e . getAsNumber ( ) . intValue ( ) ; 
 + hasChanged = true ; 
 } 
 else 
 { 
 @ @ - 539 , 7 + 544 , 7 @ @ public enum B3DLoader implements ICustomModelLoader 
 return this ; 
 } 
 } 
 - return this ; 
 + return hasChanged ? new ModelWrapper ( modelLocation , model , newMeshes , smooth , gui3d , newDefaultKey , textures ) : this ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / resources / model / IBakedModel . java . patch b / patches / minecraft / net / minecraft / client / resources / model / IBakedModel . java . patch 
 index 94444e8 . . d032f72 100644 
 - - - a / patches / minecraft / net / minecraft / client / resources / model / IBakedModel . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / resources / model / IBakedModel . java . patch 
 @ @ - 1 , 18 + 1 , 6 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / resources / model / IBakedModel . java 
 + + + . . / src - work / minecraft / net / minecraft / client / resources / model / IBakedModel . java 
 - @ @ - 8 , 7 + 8 , 11 @ @ 
 - import net . minecraftforge . fml . relauncher . Side ; 
 - import net . minecraftforge . fml . relauncher . SideOnly ; 
 - 
 - + / * 
 - + * @ deprecated use { @ link net . minecraftforge . client . model . IFlexibleBakedModel } , { @ link net . minecraftforge . client . model . IPerspectiveAwareModel } 
 - + * / 
 - @ SideOnly ( Side . CLIENT ) 
 - + @ Deprecated 
 - public interface IBakedModel 
 - { 
 - List < BakedQuad > getFaceQuads ( EnumFacing p _ 177551 _ 1 _ ) ; 
 - @ @ - 23 , 5 + 27 , 6 @ @ 
 + @ @ - 23 , 5 + 23 , 6 @ @ 
 
 TextureAtlasSprite getTexture ( ) ; 
 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 2fc9623 . . 2b58dee 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import net . minecraft . client . resources . I18n ; 
 import net . minecraft . client . resources . model . IBakedModel ; 
 import net . minecraft . client . resources . model . ModelBakery ; 
 import net . minecraft . client . resources . model . ModelManager ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 import net . minecraft . client . resources . model . ModelRotation ; 
 import net . minecraft . client . settings . GameSettings ; 
 import net . minecraft . entity . Entity ; 
 @ @ - 90 , 6 + 91 , 7 @ @ import org . lwjgl . opengl . GL11 ; 
 
 
 
 + 
 import com . google . common . collect . Maps ; 
 
 public class ForgeHooksClient 
 @ @ - 510 , 7 + 512 , 7 @ @ public class ForgeHooksClient 
 } 
 * / 
 
 - public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + public static void onModelBake ( ModelManager modelManager , IRegistry < ModelResourceLocation , IBakedModel > modelRegistry , ModelBakery modelBakery ) 
 { 
 ModelLoader loader = ( ModelLoader ) modelBakery ; 
 MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , loader ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 index cd3e1d2 . . 007fefc 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 @ @ - 43 , 7 + 43 , 6 @ @ public class BlockStateLoader 
 * 
 * @ return Model definition including variants for all known combinations . 
 * / 
 - @ SuppressWarnings ( " rawtypes " ) 
 public static ModelBlockDefinition load ( Reader reader , final Gson vanillaGSON ) 
 { 
 try 
 @ @ - 75 , 7 + 74 , 7 @ @ public class BlockStateLoader 
 variants . add ( new ModelBlockDefinition . Variants ( entry . getKey ( ) , mcVars ) ) ; 
 } 
 
 - return new ModelBlockDefinition ( ( Collection ) variants ) ; / / Damn lists being collections ! 
 + return new ModelBlockDefinition ( variants ) ; 
 
 default : / / Unknown version . . try loading it as normal . 
 return vanillaGSON . fromJson ( reader , ModelBlockDefinition . class ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 index 59598c2 . . b5ced65 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 @ @ - 534 , 17 + 534 , 29 @ @ public class ForgeBlockStateV1 extends Marker 
 transform . remove ( " firstperson " ) ; 
 transforms . put ( TransformType . FIRST _ PERSON , TRSRTransformation . blockCenterToCorner ( t ) ) ; 
 } 
 + if ( transform . has ( " head " ) ) 
 + { 
 + TRSRTransformation t = context . deserialize ( transform . get ( " head " ) , TRSRTransformation . class ) ; 
 + transform . remove ( " head " ) ; 
 + transforms . put ( TransformType . HEAD , TRSRTransformation . blockCenterToCorner ( t ) ) ; 
 + } 
 if ( transform . has ( " gui " ) ) 
 { 
 TRSRTransformation t = context . deserialize ( transform . get ( " gui " ) , TRSRTransformation . class ) ; 
 transform . remove ( " gui " ) ; 
 transforms . put ( TransformType . GUI , TRSRTransformation . blockCenterToCorner ( t ) ) ; 
 } 
 - if ( transform . has ( " head " ) ) 
 + if ( transform . has ( " ground " ) ) 
 { 
 - TRSRTransformation t = context . deserialize ( transform . get ( " head " ) , TRSRTransformation . class ) ; 
 - transform . remove ( " head " ) ; 
 - transforms . put ( TransformType . HEAD , TRSRTransformation . blockCenterToCorner ( t ) ) ; 
 + TRSRTransformation t = context . deserialize ( transform . get ( " ground " ) , TRSRTransformation . class ) ; 
 + transform . remove ( " ground " ) ; 
 + transforms . put ( TransformType . GROUND , TRSRTransformation . blockCenterToCorner ( t ) ) ; 
 + } 
 + if ( transform . has ( " fixed " ) ) 
 + { 
 + TRSRTransformation t = context . deserialize ( transform . get ( " fixed " ) , TRSRTransformation . class ) ; 
 + transform . remove ( " fixed " ) ; 
 + transforms . put ( TransformType . FIXED , TRSRTransformation . blockCenterToCorner ( t ) ) ; 
 } 
 int k = transform . entrySet ( ) . size ( ) ; 
 if ( transform . has ( " matrix " ) ) k - - ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / IFlexibleBakedModel . java b / src / main / java / net / minecraftforge / client / model / IFlexibleBakedModel . java 
 index e01989a . . 4d921fa 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IFlexibleBakedModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IFlexibleBakedModel . java 
 @ @ - 14 , 9 + 14 , 6 @ @ import net . minecraft . util . EnumFacing ; 
 * / 
 public interface IFlexibleBakedModel extends IBakedModel 
 { 
 - / / non - erased versions of the IBakedModel methods 
 - List < BakedQuad > getFaceQuads ( EnumFacing side ) ; 
 - List < BakedQuad > getGeneralQuads ( ) ; 
 / * 
 * Specifies the format which BakedQuads ' getVertexData will have . 
 * / 
 @ @ - 36 , 13 + 33 , 11 @ @ public interface IFlexibleBakedModel extends IBakedModel 
 this . format = format ; 
 } 
 
 - @ SuppressWarnings ( " unchecked " ) 
 public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 { 
 return parent . getFaceQuads ( side ) ; 
 } 
 
 - @ SuppressWarnings ( " unchecked " ) 
 public List < BakedQuad > getGeneralQuads ( ) 
 { 
 return parent . getGeneralQuads ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 index be4a2ad . . d783267 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 @ @ - 14 , 7 + 14 , 6 @ @ import net . minecraft . util . EnumFacing ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 
 - import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 
 / * 
 diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveState . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveState . java 
 index 1dbeb77 . . 838090f 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveState . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveState . java 
 @ @ - 38 , 11 + 38 , 10 @ @ public interface IPerspectiveState extends IModelState 
 private static ImmutableMap < TransformType , IModelState > getMap ( ItemCameraTransforms transforms ) 
 { 
 Map < TransformType , IModelState > map = Maps . newHashMap ( ) ; 
 - map . put ( TransformType . NONE , TRSRTransformation . identity ( ) ) ; 
 - map . put ( TransformType . THIRD _ PERSON , transforms . thirdPerson ) ; 
 - map . put ( TransformType . FIRST _ PERSON , transforms . firstPerson ) ; 
 - map . put ( TransformType . GUI , transforms . gui ) ; 
 - map . put ( TransformType . HEAD , transforms . head ) ; 
 + for ( TransformType type : TransformType . values ( ) ) 
 + { 
 + map . put ( type , transforms . func _ 181688 _ b ( type ) ) ; 
 + } 
 return Maps . immutableEnumMap ( map ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 index 8930101 . . 396c4e6 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 @ @ - 3 , 7 + 3 , 6 @ @ package net . minecraftforge . client . model ; 
 import java . util . Arrays ; 
 import java . util . Collection ; 
 import java . util . List ; 
 - import java . util . Map ; 
 
 import javax . vecmath . Matrix4f ; 
 import javax . vecmath . Vector4f ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index fda3968 . . 4e0fdef 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 38 , 6 + 38 , 7 @ @ import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 import net . minecraft . client . renderer . vertex . VertexFormat ; 
 import net . minecraft . client . resources . IResourceManager ; 
 import net . minecraft . client . resources . model . BuiltInModel ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 import net . minecraft . client . resources . model . ModelBakery ; 
 import net . minecraft . client . resources . model . ModelResourceLocation ; 
 import net . minecraft . client . resources . model . ModelRotation ; 
 @ @ - 85 , 7 + 86 , 7 @ @ public class ModelLoader extends ModelBakery 
 } 
 
 @ Override 
 - public IRegistry setupModelRegistry ( ) 
 + public IRegistry < ModelResourceLocation , IBakedModel > setupModelRegistry ( ) 
 { 
 isLoading = true ; 
 loadBlocks ( ) ; 
 @ @ - 717 , 12 + 718 , 12 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 - public void onPostBakeEvent ( IRegistry modelRegistry ) 
 + public void onPostBakeEvent ( IRegistry < ModelResourceLocation , IBakedModel > modelRegistry ) 
 { 
 - Object missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; 
 + IBakedModel missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; 
 for ( ModelResourceLocation missing : missingVariants ) 
 { 
 - Object model = modelRegistry . getObject ( missing ) ; 
 + IBakedModel model = modelRegistry . getObject ( missing ) ; 
 if ( model = = null | | model = = missingModel ) 
 { 
 FMLLog . severe ( " Model definition for location % s not found " , missing ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java 
 index c9b889a . . 60af648 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DModel . java 
 @ @ - 185 , 12 + 185 , 12 @ @ public class B3DModel 
 { 
 chunk ( " BB3D " ) ; 
 int version = buf . getInt ( ) ; 
 - if ( version / 100 > this . version / 100 ) 
 + if ( version / 100 > Parser . version / 100 ) 
 throw new IOException ( " Unsupported major model version : " + ( ( float ) version / 100 ) ) ; 
 - if ( version % 100 > this . version % 100 ) 
 + if ( version % 100 > Parser . version % 100 ) 
 logger . warn ( String . format ( " Minor version differnce in model : " , ( ( float ) version / 100 ) ) ) ; 
 - List < Texture > textures = Collections . EMPTY _ LIST ; 
 - List < Brush > brushes = Collections . EMPTY _ LIST ; 
 + List < Texture > textures = Collections . emptyList ( ) ; 
 + List < Brush > brushes = Collections . emptyList ( ) ; 
 Node < ? > root = null ; 
 while ( buf . hasRemaining ( ) ) 
 { 
 @ @ - 400 , 7 + 400 , 6 @ @ public class B3DModel 
 chunk ( " NODE " ) ; 
 animations . push ( HashBasedTable . < Integer , Optional < Node < ? > > , Key > create ( ) ) ; 
 Triple < Integer , Integer , Float > animData = null ; 
 - Animation animation = null ; 
 Pair < Brush , List < Face > > mesh = null ; 
 List < Pair < Vertex , Float > > bone = null ; 
 Map < Integer , Key > keys = new HashMap < Integer , Key > ( ) ;
