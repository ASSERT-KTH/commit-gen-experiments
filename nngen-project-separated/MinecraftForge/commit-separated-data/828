BLEU SCORE: 0.07986788803078405

TEST MSG: Added EntityViewRenderEvent # FOVModifier
GENERATED MSG: Add cancelable RenderHandEvent .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch <nl> index 8ee9bcf . . 6bc47e6 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch <nl> @ @ - 17 , 6 + 17 , 15 @ @ <nl> { <nl> if ( d2 = = 0 . 0D ) <nl> { <nl> + @ @ - 512 , 7 + 513 , 7 @ @ <nl> + f = f * 60 . 0F / 70 . 0F ; <nl> + } <nl> + <nl> + - return f ; <nl> + + return net . minecraftforge . client . ForgeHooksClient . getFOVModifier ( this , entity , block , p _ 78481 _ 1 _ , f ) ; <nl> + } <nl> + } <nl> + <nl> @ @ - 576 , 14 + 577 , 8 @ @ <nl> { <nl> BlockPos blockpos = new BlockPos ( entity ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 5b8cfea . . 4a184c8 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 196 , 6 + 196 , 12 @ @ public class ForgeHooksClient <nl> MinecraftForge . EVENT _ BUS . post ( fovUpdateEvent ) ; <nl> return fovUpdateEvent . newfov ; <nl> } <nl> + <nl> + public static float getFOVModifier ( EntityRenderer renderer , Entity entity , Block block , double renderPartialTicks , float fov ) { <nl> + EntityViewRenderEvent . FOVModifier event = new EntityViewRenderEvent . FOVModifier ( renderer , entity , block , renderPartialTicks , fov ) ; <nl> + MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + return event . getFOV ( ) ; <nl> + } <nl> <nl> private static int skyX , skyZ ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / EntityViewRenderEvent . java b / src / main / java / net / minecraftforge / client / event / EntityViewRenderEvent . java <nl> index 7d08011 . . 1f23314 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / event / EntityViewRenderEvent . java <nl> + + + b / src / main / java / net / minecraftforge / client / event / EntityViewRenderEvent . java <nl> @ @ - 7 , 8 + 7 , 8 @ @ import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> import net . minecraftforge . fml . common . eventhandler . Event ; <nl> <nl> / * * <nl> - * Event that hooks into EntityRenderer , allowing any feature to customize visual attributes of <nl> - * fog the player sees . <nl> + * Event that hooks into EntityRenderer , allowing any feature to customize visual attributes <nl> + * the player sees . <nl> * / <nl> public abstract class EntityViewRenderEvent extends Event <nl> { <nl> @ @ - 94 , 4 + 94 , 26 @ @ public abstract class EntityViewRenderEvent extends Event <nl> this . roll = roll ; <nl> } <nl> } <nl> + <nl> + / * * <nl> + * Event that allows mods to alter the raw FOV itself . <nl> + * This directly affects to the FOV without being modified . <nl> + * * / <nl> + public static class FOVModifier extends EntityViewRenderEvent <nl> + { <nl> + private float fov ; <nl> + <nl> + public FOVModifier ( EntityRenderer renderer , Entity entity , Block block , double renderPartialTicks , float fov ) { <nl> + super ( renderer , entity , block , renderPartialTicks ) ; <nl> + this . setFOV ( fov ) ; <nl> + } <nl> + <nl> + public float getFOV ( ) { <nl> + return fov ; <nl> + } <nl> + <nl> + public void setFOV ( float fov ) { <nl> + this . fov = fov ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / test / FOVModifierTest . java b / src / test / java / net / minecraftforge / test / FOVModifierTest . java <nl> new file mode 100644 <nl> index 0000000 . . c7ded0c <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / FOVModifierTest . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraftforge . client . event . EntityViewRenderEvent ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + / * * Simple mod to test fov modifier . * / <nl> + @ Mod ( modid = " fovmodifiertest " , name = " FOV Modifier Test " , version = " 0 . 0 . 0 " ) <nl> + public class FOVModifierTest { <nl> + <nl> + @ EventHandler <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + 	 MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void getFOVModifier ( EntityViewRenderEvent . FOVModifier event ) { <nl> + if ( event . block . getMaterial ( ) = = Material . water ) <nl> + event . setFOV ( event . getFOV ( ) / 60 . 0f * 50 . 0f ) ; <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch <nl> index a50787d . . 55c1550 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch <nl> @ @ - 125 , 7 + 125 , 7 @ @ <nl> GL11 . glDepthMask ( true ) ; <nl> GL11 . glEnable ( GL11 . GL _ CULL _ FACE ) ; <nl> GL11 . glDisable ( GL11 . GL _ BLEND ) ; <nl> - @ @ - 1357 , 6 + 1380 , 9 @ @ <nl> + @ @ - 1357 , 9 + 1380 , 12 @ @ <nl> this . renderCloudsCheck ( renderglobal , par1 ) ; <nl> } <nl> <nl> @ @ - 134 , 7 + 134 , 11 @ @ <nl> + <nl> this . mc . mcProfiler . endStartSection ( " hand " ) ; <nl> <nl> - if ( this . cameraZoom = = 1 . 0D ) <nl> + - if ( this . cameraZoom = = 1 . 0D ) <nl> + + if ( ! ForgeHooksClient . renderFirstPersonHand ( renderglobal , par1 , j ) & & this . cameraZoom = = 1 . 0D ) <nl> + { <nl> + GL11 . glClear ( GL11 . GL _ DEPTH _ BUFFER _ BIT ) ; <nl> + this . renderHand ( par1 , j ) ; <nl> @ @ - 1477 , 6 + 1503 , 13 @ @ <nl> / / JAVADOC METHOD $ $ func _ 78474 _ d <nl> protected void renderRainSnow ( float par1 ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index e651cf2 . . 1e4cb7f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 1 , 6 + 1 , 7 @ @ <nl> package net . minecraftforge . client ; <nl> <nl> import java . util . Random ; <nl> + <nl> import javax . imageio . ImageIO ; <nl> <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> @ @ - 44 , 6 + 45 , 7 @ @ import net . minecraft . client . renderer . texture . TextureMap ; <nl> import net . minecraft . client . settings . GameSettings ; <nl> import net . minecraftforge . client . IItemRenderer . ItemRenderType ; <nl> import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> + import net . minecraftforge . client . event . RenderHandEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> @ @ - 251 , 6 + 253 , 11 @ @ public class ForgeHooksClient <nl> MinecraftForge . EVENT _ BUS . post ( new RenderWorldLastEvent ( context , partialTicks ) ) ; <nl> } <nl> <nl> + public static boolean renderFirstPersonHand ( RenderGlobal context , float partialTicks , int renderPass ) <nl> + { <nl> + return MinecraftForge . EVENT _ BUS . post ( new RenderHandEvent ( context , partialTicks , renderPass ) ) ; <nl> + } <nl> + <nl> public static void onTextureStitchedPre ( TextureMap map ) <nl> { <nl> MinecraftForge . EVENT _ BUS . post ( new TextureStitchEvent . Pre ( map ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / RenderHandEvent . java b / src / main / java / net / minecraftforge / client / event / RenderHandEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 1691566 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / event / RenderHandEvent . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package net . minecraftforge . client . event ; <nl> + <nl> + import cpw . mods . fml . common . eventhandler . Cancelable ; <nl> + import cpw . mods . fml . common . eventhandler . Event ; <nl> + import net . minecraft . client . renderer . RenderGlobal ; <nl> + <nl> + @ Cancelable <nl> + public class RenderHandEvent extends Event <nl> + { <nl> + public final RenderGlobal context ; <nl> + public final float partialTicks ; <nl> + public final int renderPass ; <nl> + public RenderHandEvent ( RenderGlobal context , float partialTicks , int renderPass ) <nl> + { <nl> + this . context = context ; <nl> + this . partialTicks = partialTicks ; <nl> + this . renderPass = renderPass ; <nl> + } <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch 
 index 8ee9bcf . . 6bc47e6 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch 
 @ @ - 17 , 6 + 17 , 15 @ @ 
 { 
 if ( d2 = = 0 . 0D ) 
 { 
 + @ @ - 512 , 7 + 513 , 7 @ @ 
 + f = f * 60 . 0F / 70 . 0F ; 
 + } 
 + 
 + - return f ; 
 + + return net . minecraftforge . client . ForgeHooksClient . getFOVModifier ( this , entity , block , p _ 78481 _ 1 _ , f ) ; 
 + } 
 + } 
 + 
 @ @ - 576 , 14 + 577 , 8 @ @ 
 { 
 BlockPos blockpos = new BlockPos ( entity ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 5b8cfea . . 4a184c8 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 196 , 6 + 196 , 12 @ @ public class ForgeHooksClient 
 MinecraftForge . EVENT _ BUS . post ( fovUpdateEvent ) ; 
 return fovUpdateEvent . newfov ; 
 } 
 + 
 + public static float getFOVModifier ( EntityRenderer renderer , Entity entity , Block block , double renderPartialTicks , float fov ) { 
 + EntityViewRenderEvent . FOVModifier event = new EntityViewRenderEvent . FOVModifier ( renderer , entity , block , renderPartialTicks , fov ) ; 
 + MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + return event . getFOV ( ) ; 
 + } 
 
 private static int skyX , skyZ ; 
 
 diff - - git a / src / main / java / net / minecraftforge / client / event / EntityViewRenderEvent . java b / src / main / java / net / minecraftforge / client / event / EntityViewRenderEvent . java 
 index 7d08011 . . 1f23314 100644 
 - - - a / src / main / java / net / minecraftforge / client / event / EntityViewRenderEvent . java 
 + + + b / src / main / java / net / minecraftforge / client / event / EntityViewRenderEvent . java 
 @ @ - 7 , 8 + 7 , 8 @ @ import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 import net . minecraftforge . fml . common . eventhandler . Event ; 
 
 / * * 
 - * Event that hooks into EntityRenderer , allowing any feature to customize visual attributes of 
 - * fog the player sees . 
 + * Event that hooks into EntityRenderer , allowing any feature to customize visual attributes 
 + * the player sees . 
 * / 
 public abstract class EntityViewRenderEvent extends Event 
 { 
 @ @ - 94 , 4 + 94 , 26 @ @ public abstract class EntityViewRenderEvent extends Event 
 this . roll = roll ; 
 } 
 } 
 + 
 + / * * 
 + * Event that allows mods to alter the raw FOV itself . 
 + * This directly affects to the FOV without being modified . 
 + * * / 
 + public static class FOVModifier extends EntityViewRenderEvent 
 + { 
 + private float fov ; 
 + 
 + public FOVModifier ( EntityRenderer renderer , Entity entity , Block block , double renderPartialTicks , float fov ) { 
 + super ( renderer , entity , block , renderPartialTicks ) ; 
 + this . setFOV ( fov ) ; 
 + } 
 + 
 + public float getFOV ( ) { 
 + return fov ; 
 + } 
 + 
 + public void setFOV ( float fov ) { 
 + this . fov = fov ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / test / FOVModifierTest . java b / src / test / java / net / minecraftforge / test / FOVModifierTest . java 
 new file mode 100644 
 index 0000000 . . c7ded0c 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / FOVModifierTest . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraftforge . client . event . EntityViewRenderEvent ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + / * * Simple mod to test fov modifier . * / 
 + @ Mod ( modid = " fovmodifiertest " , name = " FOV Modifier Test " , version = " 0 . 0 . 0 " ) 
 + public class FOVModifierTest { 
 + 
 + @ EventHandler 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + 	 MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void getFOVModifier ( EntityViewRenderEvent . FOVModifier event ) { 
 + if ( event . block . getMaterial ( ) = = Material . water ) 
 + event . setFOV ( event . getFOV ( ) / 60 . 0f * 50 . 0f ) ; 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch 
 index a50787d . . 55c1550 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / EntityRenderer . java . patch 
 @ @ - 125 , 7 + 125 , 7 @ @ 
 GL11 . glDepthMask ( true ) ; 
 GL11 . glEnable ( GL11 . GL _ CULL _ FACE ) ; 
 GL11 . glDisable ( GL11 . GL _ BLEND ) ; 
 - @ @ - 1357 , 6 + 1380 , 9 @ @ 
 + @ @ - 1357 , 9 + 1380 , 12 @ @ 
 this . renderCloudsCheck ( renderglobal , par1 ) ; 
 } 
 
 @ @ - 134 , 7 + 134 , 11 @ @ 
 + 
 this . mc . mcProfiler . endStartSection ( " hand " ) ; 
 
 - if ( this . cameraZoom = = 1 . 0D ) 
 + - if ( this . cameraZoom = = 1 . 0D ) 
 + + if ( ! ForgeHooksClient . renderFirstPersonHand ( renderglobal , par1 , j ) & & this . cameraZoom = = 1 . 0D ) 
 + { 
 + GL11 . glClear ( GL11 . GL _ DEPTH _ BUFFER _ BIT ) ; 
 + this . renderHand ( par1 , j ) ; 
 @ @ - 1477 , 6 + 1503 , 13 @ @ 
 / / JAVADOC METHOD $ $ func _ 78474 _ d 
 protected void renderRainSnow ( float par1 ) 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index e651cf2 . . 1e4cb7f 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 1 , 6 + 1 , 7 @ @ 
 package net . minecraftforge . client ; 
 
 import java . util . Random ; 
 + 
 import javax . imageio . ImageIO ; 
 
 import net . minecraftforge . client . event . MouseEvent ; 
 @ @ - 44 , 6 + 45 , 7 @ @ import net . minecraft . client . renderer . texture . TextureMap ; 
 import net . minecraft . client . settings . GameSettings ; 
 import net . minecraftforge . client . IItemRenderer . ItemRenderType ; 
 import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 + import net . minecraftforge . client . event . RenderHandEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 @ @ - 251 , 6 + 253 , 11 @ @ public class ForgeHooksClient 
 MinecraftForge . EVENT _ BUS . post ( new RenderWorldLastEvent ( context , partialTicks ) ) ; 
 } 
 
 + public static boolean renderFirstPersonHand ( RenderGlobal context , float partialTicks , int renderPass ) 
 + { 
 + return MinecraftForge . EVENT _ BUS . post ( new RenderHandEvent ( context , partialTicks , renderPass ) ) ; 
 + } 
 + 
 public static void onTextureStitchedPre ( TextureMap map ) 
 { 
 MinecraftForge . EVENT _ BUS . post ( new TextureStitchEvent . Pre ( map ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / event / RenderHandEvent . java b / src / main / java / net / minecraftforge / client / event / RenderHandEvent . java 
 new file mode 100644 
 index 0000000 . . 1691566 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / event / RenderHandEvent . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package net . minecraftforge . client . event ; 
 + 
 + import cpw . mods . fml . common . eventhandler . Cancelable ; 
 + import cpw . mods . fml . common . eventhandler . Event ; 
 + import net . minecraft . client . renderer . RenderGlobal ; 
 + 
 + @ Cancelable 
 + public class RenderHandEvent extends Event 
 + { 
 + public final RenderGlobal context ; 
 + public final float partialTicks ; 
 + public final int renderPass ; 
 + public RenderHandEvent ( RenderGlobal context , float partialTicks , int renderPass ) 
 + { 
 + this . context = context ; 
 + this . partialTicks = partialTicks ; 
 + this . renderPass = renderPass ; 
 + } 
 + }
