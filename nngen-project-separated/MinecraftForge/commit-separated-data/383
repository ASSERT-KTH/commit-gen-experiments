BLEU SCORE: 0.010697691669654345

TEST MSG: Add GuiContainer Foreground render event .
GENERATED MSG: Fix vanilla bug causing integrated server saving from 2 threads concurrently after a crash

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java . patch b / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java . patch <nl> index 3e9179c . . 714fc45 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java . patch <nl> @ @ - 1 , 6 + 1 , 14 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java <nl> - @ @ - 180 , 8 + 180 , 10 @ @ <nl> + @ @ - 116 , 6 + 116 , 7 @ @ <nl> + RenderHelper . func _ 74518 _ a ( ) ; <nl> + this . func _ 146979 _ b ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ ) ; <nl> + RenderHelper . func _ 74520 _ c ( ) ; <nl> + + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . client . event . GuiContainerEvent . DrawForeground ( this , p _ 73863 _ 1 _ , p _ 73863 _ 2 _ ) ) ; <nl> + InventoryPlayer inventoryplayer = this . field _ 146297 _ k . field _ 71439 _ g . field _ 71071 _ by ; <nl> + ItemStack itemstack = this . field _ 147012 _ x . func _ 190926 _ b ( ) ? inventoryplayer . func _ 70445 _ o ( ) : this . field _ 147012 _ x ; <nl> + <nl> + @ @ - 180 , 8 + 181 , 10 @ @ <nl> GlStateManager . func _ 179109 _ b ( 0 . 0F , 0 . 0F , 32 . 0F ) ; <nl> this . field _ 73735 _ i = 200 . 0F ; <nl> this . field _ 146296 _ j . field _ 77023 _ b = 200 . 0F ; <nl> @ @ - 12 , 7 + 20 , 7 @ @ <nl> this . field _ 73735 _ i = 0 . 0F ; <nl> this . field _ 146296 _ j . field _ 77023 _ b = 0 . 0F ; <nl> } <nl> - @ @ - 239 , 13 + 241 , 12 @ @ <nl> + @ @ - 239 , 13 + 242 , 12 @ @ <nl> <nl> if ( itemstack . func _ 190926 _ b ( ) & & p _ 146977 _ 1 _ . func _ 111238 _ b ( ) ) <nl> { <nl> @ @ - 29 , 7 + 37 , 7 @ @ <nl> this . func _ 175175 _ a ( i , j , textureatlassprite , 16 , 16 ) ; <nl> GlStateManager . func _ 179145 _ e ( ) ; <nl> flag1 = true ; <nl> - @ @ - 319 , 7 + 320 , 7 @ @ <nl> + @ @ - 319 , 7 + 321 , 7 @ @ <nl> protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException <nl> { <nl> super . func _ 73864 _ a ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ ) ; <nl> @ @ - 38 , 7 + 46 , 7 @ @ <nl> Slot slot = this . func _ 146975 _ c ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ ) ; <nl> long i = Minecraft . func _ 71386 _ F ( ) ; <nl> this . field _ 146993 _ M = this . field _ 146998 _ K = = slot & & i - this . field _ 146997 _ J < 250L & & this . field _ 146992 _ L = = p _ 73864 _ 3 _ ; <nl> - @ @ - 330 , 6 + 331 , 7 @ @ <nl> + @ @ - 330 , 6 + 332 , 7 @ @ <nl> int j = this . field _ 147003 _ i ; <nl> int k = this . field _ 147009 _ r ; <nl> boolean flag1 = this . func _ 193983 _ c ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , j , k ) ; <nl> @ @ - 46 , 7 + 54 , 7 @ @ <nl> int l = - 1 ; <nl> <nl> if ( slot ! = null ) <nl> - @ @ - 367 , 7 + 369 , 7 @ @ <nl> + @ @ - 367 , 7 + 370 , 7 @ @ <nl> { <nl> if ( this . field _ 146297 _ k . field _ 71439 _ g . field _ 71071 _ by . func _ 70445 _ o ( ) . func _ 190926 _ b ( ) ) <nl> { <nl> @ @ - 55 , 7 + 63 , 7 @ @ <nl> { <nl> this . func _ 184098 _ a ( slot , l , p _ 73864 _ 3 _ , ClickType . CLONE ) ; <nl> } <nl> - @ @ - 405 , 7 + 407 , 7 @ @ <nl> + @ @ - 405 , 7 + 408 , 7 @ @ <nl> { <nl> this . field _ 146987 _ F = 1 ; <nl> } <nl> @ @ - 64 , 7 + 72 , 7 @ @ <nl> { <nl> this . field _ 146987 _ F = 2 ; <nl> } <nl> - @ @ - 472 , 10 + 474 , 12 @ @ <nl> + @ @ - 472 , 10 + 475 , 12 @ @ <nl> <nl> protected void func _ 146286 _ b ( int p _ 146286 _ 1 _ , int p _ 146286 _ 2 _ , int p _ 146286 _ 3 _ ) <nl> { <nl> @ @ - 77 , 7 + 85 , 7 @ @ <nl> int k = - 1 ; <nl> <nl> if ( slot ! = null ) <nl> - @ @ - 496 , 7 + 500 , 7 @ @ <nl> + @ @ - 496 , 7 + 501 , 7 @ @ <nl> { <nl> for ( Slot slot2 : this . field _ 147002 _ h . field _ 75151 _ b ) <nl> { <nl> @ @ - 86 , 7 + 94 , 7 @ @ <nl> { <nl> this . func _ 184098 _ a ( slot2 , slot2 . field _ 75222 _ d , p _ 146286 _ 3 _ , ClickType . QUICK _ MOVE ) ; <nl> } <nl> - @ @ - 583 , 7 + 587 , 7 @ @ <nl> + @ @ - 583 , 7 + 588 , 7 @ @ <nl> } <nl> else if ( ! this . field _ 146297 _ k . field _ 71439 _ g . field _ 71071 _ by . func _ 70445 _ o ( ) . func _ 190926 _ b ( ) ) <nl> { <nl> @ @ - 95 , 7 + 103 , 7 @ @ <nl> { <nl> this . func _ 184098 _ a ( slot , k , p _ 146286 _ 3 _ , ClickType . CLONE ) ; <nl> } <nl> - @ @ - 635 , 7 + 639 , 7 @ @ <nl> + @ @ - 635 , 7 + 640 , 7 @ @ <nl> <nl> protected void func _ 73869 _ a ( char p _ 73869 _ 1 _ , int p _ 73869 _ 2 _ ) throws IOException <nl> { <nl> @ @ - 104 , 7 + 112 , 7 @ @ <nl> { <nl> this . field _ 146297 _ k . field _ 71439 _ g . func _ 71053 _ j ( ) ; <nl> } <nl> - @ @ - 644 , 11 + 648 , 11 @ @ <nl> + @ @ - 644 , 11 + 649 , 11 @ @ <nl> <nl> if ( this . field _ 147006 _ u ! = null & & this . field _ 147006 _ u . func _ 75216 _ d ( ) ) <nl> { <nl> @ @ - 118 , 7 + 126 , 7 @ @ <nl> { <nl> this . func _ 184098 _ a ( this . field _ 147006 _ u , this . field _ 147006 _ u . field _ 75222 _ d , func _ 146271 _ m ( ) ? 1 : 0 , ClickType . THROW ) ; <nl> } <nl> - @ @ - 661 , 7 + 665 , 7 @ @ <nl> + @ @ - 661 , 7 + 666 , 7 @ @ <nl> { <nl> for ( int i = 0 ; i < 9 ; + + i ) <nl> { <nl> @ @ - 127 , 7 + 135 , 7 @ @ <nl> { <nl> this . func _ 184098 _ a ( this . field _ 147006 _ u , this . field _ 147006 _ u . field _ 75222 _ d , i , ClickType . SWAP ) ; <nl> return true ; <nl> - @ @ - 694 , 4 + 698 , 18 @ @ <nl> + @ @ - 694 , 4 + 699 , 18 @ @ <nl> this . field _ 146297 _ k . field _ 71439 _ g . func _ 71053 _ j ( ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / GuiContainerEvent . java b / src / main / java / net / minecraftforge / client / event / GuiContainerEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 8b05440 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / event / GuiContainerEvent . java <nl> @ @ - 0 , 0 + 1 , 78 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . client . event ; <nl> + <nl> + import net . minecraft . client . gui . inventory . GuiContainer ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + <nl> + / * * <nl> + * Event class for handling GuiContainer specific events . <nl> + * / <nl> + public class GuiContainerEvent extends Event <nl> + { <nl> + <nl> + private final GuiContainer guiContainer ; <nl> + <nl> + public GuiContainerEvent ( GuiContainer guiContainer ) <nl> + { <nl> + this . guiContainer = guiContainer ; <nl> + } <nl> + <nl> + public GuiContainer getGuiContainer ( ) <nl> + { <nl> + return guiContainer ; <nl> + } <nl> + <nl> + / * * <nl> + * This event is fired directly after the GuiContainer has draw any foreground elements , <nl> + * But before the " dragged " stack , and before any tooltips . <nl> + * This is useful for any slot / item specific overlays . <nl> + * Things that need to be on top of All GUI elements but bellow tooltips and dragged stacks . <nl> + * / <nl> + public static class DrawForeground extends GuiContainerEvent <nl> + { <nl> + private final int mouseX ; <nl> + private final int mouseY ; <nl> + <nl> + / * * <nl> + * Called directly after the GuiContainer has drawn any foreground elements . <nl> + * <nl> + * @ param guiContainer The container . <nl> + * @ param mouseX The current X position of the players mouse . <nl> + * @ param mouseY The current Y position of the players mouse . <nl> + * / <nl> + public DrawForeground ( GuiContainer guiContainer , int mouseX , int mouseY ) <nl> + { <nl> + super ( guiContainer ) ; <nl> + this . mouseX = mouseX ; <nl> + this . mouseY = mouseY ; <nl> + } <nl> + <nl> + public int getMouseX ( ) <nl> + { <nl> + return mouseX ; <nl> + } <nl> + <nl> + public int getMouseY ( ) <nl> + { <nl> + return mouseY ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / GuiContainerEventTest . java b / src / test / java / net / minecraftforge / debug / GuiContainerEventTest . java <nl> new file mode 100644 <nl> index 0000000 . . 06555ec <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / GuiContainerEventTest . java <nl> @ @ - 0 , 0 + 1 , 56 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . client . renderer . GlStateManager ; <nl> + import net . minecraft . inventory . Slot ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraftforge . client . event . GuiContainerEvent ; <nl> + import net . minecraftforge . fml . client . config . GuiUtils ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventBusSubscriber ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; <nl> + <nl> + @ EventBusSubscriber <nl> + @ Mod ( modid = " guicontainereventtest " , name = " GuiContainer Event Tests ! " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class GuiContainerEventTest <nl> + { <nl> + <nl> + @ ObjectHolder ( " minecraft : stone " ) <nl> + public static final Item STONE _ ITEM = null ; <nl> + <nl> + @ SubscribeEvent <nl> + public static void onForegroundRender ( GuiContainerEvent . DrawForeground event ) <nl> + { <nl> + for ( Slot slot : event . getGuiContainer ( ) . inventorySlots . inventorySlots ) <nl> + { <nl> + if ( slot . getStack ( ) . getItem ( ) = = STONE _ ITEM ) <nl> + { <nl> + GlStateManager . disableLighting ( ) ; <nl> + <nl> + GuiUtils . drawGradientRect ( 400 , slot . xPos , slot . yPos , slot . xPos + 16 , slot . yPos + 16 , 0x80000000 , 0x80000000 ) ; <nl> + <nl> + GlStateManager . enableLighting ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / client / Minecraft . java . patch b / fml / patches / minecraft / net / minecraft / client / Minecraft . java . patch <nl> index 9739784 . . 2857f85 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / client / Minecraft . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / client / Minecraft . java . patch <nl> @ @ - 20 , 7 + 20 , 34 @ @ <nl> @ SideOnly ( Side . CLIENT ) <nl> public class Minecraft implements IPlayerUsage <nl> { <nl> - @ @ - 448 , 7 + 454 , 7 @ @ <nl> + @ @ - 333 , 21 + 339 , 23 @ @ <nl> + File file2 = new File ( file1 , " crash - " + ( new SimpleDateFormat ( " yyyy - MM - dd _ HH . mm . ss " ) ) . format ( new Date ( ) ) + " - client . txt " ) ; <nl> + System . out . println ( p _ 71377 _ 1 _ . func _ 71502 _ e ( ) ) ; <nl> + <nl> + + int retVal ; <nl> + if ( p _ 71377 _ 1 _ . func _ 71497 _ f ( ) ! = null ) <nl> + { <nl> + System . out . println ( " # @ ! @ # Game crashed ! Crash report saved to : # @ ! @ # " + p _ 71377 _ 1 _ . func _ 71497 _ f ( ) ) ; <nl> + - System . exit ( - 1 ) ; <nl> + + retVal = - 1 ; <nl> + } <nl> + else if ( p _ 71377 _ 1 _ . func _ 147149 _ a ( file2 ) ) <nl> + { <nl> + System . out . println ( " # @ ! @ # Game crashed ! Crash report saved to : # @ ! @ # " + file2 . getAbsolutePath ( ) ) ; <nl> + - System . exit ( - 1 ) ; <nl> + + retVal = - 1 ; <nl> + } <nl> + else <nl> + { <nl> + System . out . println ( " # @ ? @ # Game crashed ! Crash report could not be saved . # @ ? @ # " ) ; <nl> + - System . exit ( - 2 ) ; <nl> + + retVal = - 2 ; <nl> + } <nl> + + FMLCommonHandler . instance ( ) . handleExit ( retVal ) ; <nl> + } <nl> + <nl> + public void func _ 71367 _ a ( String p _ 71367 _ 1 _ , int p _ 71367 _ 2 _ ) <nl> + @ @ - 448 , 7 + 456 , 7 @ @ <nl> this . field _ 110451 _ am = new SimpleReloadableResourceManager ( this . field _ 110452 _ an ) ; <nl> this . field _ 135017 _ as = new LanguageManager ( this . field _ 110452 _ an , this . field _ 71474 _ y . field _ 74363 _ ab ) ; <nl> this . field _ 110451 _ am . func _ 110542 _ a ( this . field _ 135017 _ as ) ; <nl> @ @ - 29 , 7 + 56 , 7 @ @ <nl> this . field _ 71446 _ o = new TextureManager ( this . field _ 110451 _ am ) ; <nl> this . field _ 110451 _ am . func _ 110542 _ a ( this . field _ 71446 _ o ) ; <nl> this . field _ 147127 _ av = new SoundHandler ( this . field _ 110451 _ am , this . field _ 71474 _ y ) ; <nl> - @ @ - 508 , 12 + 514 , 13 @ @ <nl> + @ @ - 508 , 12 + 516 , 13 @ @ <nl> this . field _ 71446 _ o . func _ 130088 _ a ( TextureMap . field _ 110576 _ c , new TextureMap ( 1 , " textures / items " ) ) ; <nl> GL11 . glViewport ( 0 , 0 , this . field _ 71443 _ c , this . field _ 71440 _ d ) ; <nl> this . field _ 71452 _ i = new EffectRenderer ( this . field _ 71441 _ e , this . field _ 71446 _ o ) ; <nl> @ @ - 44 , 7 + 71 , 7 @ @ <nl> } <nl> else <nl> { <nl> - @ @ - 527 , 6 + 534 , 7 @ @ <nl> + @ @ - 527 , 6 + 536 , 7 @ @ <nl> this . func _ 71352 _ k ( ) ; <nl> } <nl> <nl> @ @ - 52 , 7 + 79 , 7 @ @ <nl> Display . setVSyncEnabled ( this . field _ 71474 _ y . field _ 74352 _ v ) ; <nl> } <nl> <nl> - @ @ - 916 , 9 + 924 , 11 @ @ <nl> + @ @ - 916 , 9 + 926 , 11 @ @ <nl> <nl> if ( ! this . field _ 71454 _ w ) <nl> { <nl> @ @ - 64 , 7 + 91 , 7 @ @ <nl> } <nl> <nl> GL11 . glFlush ( ) ; <nl> - @ @ - 1496 , 6 + 1506 , 8 @ @ <nl> + @ @ - 1496 , 6 + 1508 , 8 @ @ <nl> - - this . field _ 71467 _ ac ; <nl> } <nl> <nl> @ @ - 73 , 7 + 100 , 7 @ @ <nl> this . field _ 71424 _ I . func _ 76320 _ a ( " gui " ) ; <nl> <nl> if ( ! this . field _ 71445 _ n ) <nl> - @ @ - 1646 , 6 + 1658 , 7 @ @ <nl> + @ @ - 1646 , 6 + 1660 , 7 @ @ <nl> this . field _ 71462 _ r . func _ 146274 _ d ( ) ; <nl> } <nl> } <nl> @ @ - 81 , 7 + 108 , 7 @ @ <nl> } <nl> <nl> if ( this . field _ 71429 _ W > 0 ) <nl> - @ @ - 1787 , 6 + 1800 , 7 @ @ <nl> + @ @ - 1787 , 6 + 1802 , 7 @ @ <nl> } <nl> } <nl> } <nl> @ @ - 89 , 7 + 116 , 7 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 1978 , 12 + 1992 , 15 @ @ <nl> + @ @ - 1978 , 12 + 1994 , 15 @ @ <nl> this . field _ 71453 _ ak . func _ 74428 _ b ( ) ; <nl> } <nl> <nl> @ @ - 105 , 7 + 132 , 7 @ @ <nl> this . func _ 71403 _ a ( ( WorldClient ) null ) ; <nl> System . gc ( ) ; <nl> ISaveHandler isavehandler = this . field _ 71469 _ aa . func _ 75804 _ a ( p _ 71371 _ 1 _ , false ) ; <nl> - @ @ - 2019 , 6 + 2036 , 12 @ @ <nl> + @ @ - 2019 , 6 + 2038 , 12 @ @ <nl> <nl> while ( ! this . field _ 71437 _ Z . func _ 71200 _ ad ( ) ) <nl> { <nl> @ @ - 118 , 7 + 145 , 7 @ @ <nl> String s2 = this . field _ 71437 _ Z . func _ 71195 _ b _ ( ) ; <nl> <nl> if ( s2 ! = null ) <nl> - @ @ - 2094 , 6 + 2117 , 7 @ @ <nl> + @ @ - 2094 , 6 + 2119 , 7 @ @ <nl> this . field _ 110448 _ aq . func _ 148529 _ f ( ) ; <nl> this . func _ 71351 _ a ( ( ServerData ) null ) ; <nl> this . field _ 71455 _ al = false ; <nl> diff - - git a / fml / patches / minecraft / net / minecraft / server / MinecraftServer . java . patch b / fml / patches / minecraft / net / minecraft / server / MinecraftServer . java . patch <nl> index 94f0a0c . . 008dbf6 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / server / MinecraftServer . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / server / MinecraftServer . java . patch <nl> @ @ - 29 , 25 + 29 , 36 @ @ <nl> long i = func _ 130071 _ aq ( ) ; <nl> long l = 0L ; <nl> this . field _ 147147 _ p . func _ 151315 _ a ( new ChatComponentText ( this . field _ 71286 _ C ) ) ; <nl> - @ @ - 425 , 12 + 431 , 17 @ @ <nl> + @ @ - 425 , 12 + 431 , 20 @ @ <nl> Thread . sleep ( 1L ) ; <nl> this . field _ 71296 _ Q = true ; <nl> } <nl> + FMLCommonHandler . instance ( ) . handleServerStopping ( ) ; <nl> + + FMLCommonHandler . instance ( ) . expectServerStopped ( ) ; / / has to come before finalTick to avoid race conditions <nl> } <nl> else <nl> { <nl> + + FMLCommonHandler . instance ( ) . expectServerStopped ( ) ; / / has to come before finalTick to avoid race conditions <nl> this . func _ 71228 _ a ( ( CrashReport ) null ) ; <nl> } <nl> } <nl> + catch ( StartupQuery . AbortedException e ) <nl> + { <nl> + / / ignore silently <nl> + + FMLCommonHandler . instance ( ) . expectServerStopped ( ) ; / / has to come before finalTick to avoid race conditions <nl> + } <nl> catch ( Throwable throwable1 ) <nl> { <nl> field _ 147145 _ h . error ( " Encountered an unexpected exception " , throwable1 ) ; <nl> - @ @ - 471 , 6 + 482 , 8 @ @ <nl> + @ @ - 456 , 6 + 470 , 7 @ @ <nl> + field _ 147145 _ h . error ( " We were unable to save this crash report to disk . " ) ; <nl> + } <nl> + <nl> + + FMLCommonHandler . instance ( ) . expectServerStopped ( ) ; / / has to come before finalTick to avoid race conditions <nl> + this . func _ 71228 _ a ( crashreport ) ; <nl> + } <nl> + finally <nl> + @ @ - 471 , 6 + 486 , 8 @ @ <nl> } <nl> finally <nl> { <nl> @ @ - 56 , 7 + 67 , 7 @ @ <nl> this . func _ 71240 _ o ( ) ; <nl> } <nl> } <nl> - @ @ - 513 , 6 + 526 , 7 @ @ <nl> + @ @ - 513 , 6 + 530 , 7 @ @ <nl> { <nl> long i = System . nanoTime ( ) ; <nl> AxisAlignedBB . func _ 72332 _ a ( ) . func _ 72298 _ a ( ) ; <nl> @ @ - 64 , 7 + 75 , 7 @ @ <nl> + + this . field _ 71315 _ w ; <nl> <nl> if ( this . field _ 71295 _ T ) <nl> - @ @ - 566 , 6 + 580 , 7 @ @ <nl> + @ @ - 566 , 6 + 584 , 7 @ @ <nl> <nl> this . field _ 71304 _ b . func _ 76319 _ b ( ) ; <nl> this . field _ 71304 _ b . func _ 76319 _ b ( ) ; <nl> @ @ - 72 , 7 + 83 , 7 @ @ <nl> } <nl> <nl> public void func _ 71190 _ q ( ) <nl> - @ @ - 593 , 6 + 608 , 7 @ @ <nl> + @ @ - 593 , 6 + 612 , 7 @ @ <nl> } <nl> <nl> this . field _ 71304 _ b . func _ 76320 _ a ( " tick " ) ; <nl> @ @ - 80 , 7 + 91 , 7 @ @ <nl> CrashReport crashreport ; <nl> <nl> try <nl> - @ @ - 617 , 6 + 633 , 7 @ @ <nl> + @ @ - 617 , 6 + 637 , 7 @ @ <nl> throw new ReportedException ( crashreport ) ; <nl> } <nl> <nl> @ @ - 88 , 7 + 99 , 7 @ @ <nl> this . field _ 71304 _ b . func _ 76319 _ b ( ) ; <nl> this . field _ 71304 _ b . func _ 76320 _ a ( " tracker " ) ; <nl> worldserver . func _ 73039 _ n ( ) . func _ 72788 _ a ( ) ; <nl> - @ @ - 648 , 6 + 665 , 7 @ @ <nl> + @ @ - 648 , 6 + 669 , 7 @ @ <nl> <nl> public void func _ 71256 _ s ( ) <nl> { <nl> @ @ - 96 , 7 + 107 , 7 @ @ <nl> ( new Thread ( " Server thread " ) <nl> { <nl> private static final String _ _ OBFID = " CL _ 00001418 " ; <nl> - @ @ - 695 , 7 + 713 , 7 @ @ <nl> + @ @ - 695 , 7 + 717 , 7 @ @ <nl> <nl> public String getServerModName ( ) <nl> { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> index 96fc9a0 . . 44d563e 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ import java . lang . ref . WeakReference ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . concurrent . CountDownLatch ; <nl> + import java . util . concurrent . TimeUnit ; <nl> <nl> import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . crash . CrashReportCategory ; <nl> @ @ - 86 , 6 + 88 , 7 @ @ public class FMLCommonHandler <nl> private Set < SaveHandler > handlerSet = Sets . newSetFromMap ( new MapMaker ( ) . weakKeys ( ) . < SaveHandler , Boolean > makeMap ( ) ) ; <nl> private WeakReference < SaveHandler > handlerToCheck ; <nl> private EventBus eventBus = new EventBus ( ) ; <nl> + private volatile CountDownLatch exitLatch = null ; <nl> / * * <nl> * The FML event bus . Subscribe here for FML related events <nl> * <nl> @ @ - 428 , 6 + 431 , 50 @ @ public class FMLCommonHandler <nl> return sidedDelegate . shouldServerShouldBeKilledQuietly ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Make handleExit ( ) wait for handleServerStopped ( ) . <nl> + * <nl> + * For internal use only ! <nl> + * / <nl> + public void expectServerStopped ( ) <nl> + { <nl> + exitLatch = new CountDownLatch ( 1 ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Delayed System . exit ( ) until the server is actually stopped / done saving . <nl> + * <nl> + * For internal use only ! <nl> + * <nl> + * @ param retVal Exit code for System . exit ( ) <nl> + * / <nl> + public void handleExit ( int retVal ) <nl> + { <nl> + CountDownLatch latch = exitLatch ; <nl> + <nl> + if ( latch ! = null ) <nl> + { <nl> + try <nl> + { <nl> + FMLLog . info ( " Waiting for the server to terminate / save . " ) ; <nl> + if ( ! latch . await ( 10 , TimeUnit . SECONDS ) ) <nl> + { <nl> + FMLLog . warning ( " The server didn ' t stop within 10 seconds , exiting anyway . " ) ; <nl> + } <nl> + else <nl> + { <nl> + FMLLog . info ( " Server terminated . " ) ; <nl> + } <nl> + } <nl> + catch ( InterruptedException e ) <nl> + { <nl> + FMLLog . warning ( " Interrupted wait , exiting . " ) ; <nl> + } <nl> + } <nl> + <nl> + System . exit ( retVal ) ; <nl> + } <nl> + <nl> public void handleServerStopped ( ) <nl> { <nl> sidedDelegate . serverStopped ( ) ; <nl> @ @ - 435 , 6 + 482 , 15 @ @ public class FMLCommonHandler <nl> Loader . instance ( ) . serverStopped ( ) ; <nl> / / FORCE the internal server to stop : hello optifine workaround ! <nl> if ( server ! = null ) ObfuscationReflectionHelper . setPrivateValue ( MinecraftServer . class , server , false , " field _ 71316 " + " _ v " , " u " , " serverStopped " ) ; <nl> + <nl> + / / allow any pending exit to continue , clear exitLatch <nl> + CountDownLatch latch = exitLatch ; <nl> + <nl> + if ( latch ! = null ) <nl> + { <nl> + latch . countDown ( ) ; <nl> + exitLatch = null ; <nl> + } <nl> } <nl> <nl> public String getModName ( )

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java . patch b / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java . patch 
 index 3e9179c . . 714fc45 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java . patch 
 @ @ - 1 , 6 + 1 , 14 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java 
 + + + . . / src - work / minecraft / net / minecraft / client / gui / inventory / GuiContainer . java 
 - @ @ - 180 , 8 + 180 , 10 @ @ 
 + @ @ - 116 , 6 + 116 , 7 @ @ 
 + RenderHelper . func _ 74518 _ a ( ) ; 
 + this . func _ 146979 _ b ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ ) ; 
 + RenderHelper . func _ 74520 _ c ( ) ; 
 + + net . minecraftforge . common . MinecraftForge . EVENT _ BUS . post ( new net . minecraftforge . client . event . GuiContainerEvent . DrawForeground ( this , p _ 73863 _ 1 _ , p _ 73863 _ 2 _ ) ) ; 
 + InventoryPlayer inventoryplayer = this . field _ 146297 _ k . field _ 71439 _ g . field _ 71071 _ by ; 
 + ItemStack itemstack = this . field _ 147012 _ x . func _ 190926 _ b ( ) ? inventoryplayer . func _ 70445 _ o ( ) : this . field _ 147012 _ x ; 
 + 
 + @ @ - 180 , 8 + 181 , 10 @ @ 
 GlStateManager . func _ 179109 _ b ( 0 . 0F , 0 . 0F , 32 . 0F ) ; 
 this . field _ 73735 _ i = 200 . 0F ; 
 this . field _ 146296 _ j . field _ 77023 _ b = 200 . 0F ; 
 @ @ - 12 , 7 + 20 , 7 @ @ 
 this . field _ 73735 _ i = 0 . 0F ; 
 this . field _ 146296 _ j . field _ 77023 _ b = 0 . 0F ; 
 } 
 - @ @ - 239 , 13 + 241 , 12 @ @ 
 + @ @ - 239 , 13 + 242 , 12 @ @ 
 
 if ( itemstack . func _ 190926 _ b ( ) & & p _ 146977 _ 1 _ . func _ 111238 _ b ( ) ) 
 { 
 @ @ - 29 , 7 + 37 , 7 @ @ 
 this . func _ 175175 _ a ( i , j , textureatlassprite , 16 , 16 ) ; 
 GlStateManager . func _ 179145 _ e ( ) ; 
 flag1 = true ; 
 - @ @ - 319 , 7 + 320 , 7 @ @ 
 + @ @ - 319 , 7 + 321 , 7 @ @ 
 protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException 
 { 
 super . func _ 73864 _ a ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ ) ; 
 @ @ - 38 , 7 + 46 , 7 @ @ 
 Slot slot = this . func _ 146975 _ c ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ ) ; 
 long i = Minecraft . func _ 71386 _ F ( ) ; 
 this . field _ 146993 _ M = this . field _ 146998 _ K = = slot & & i - this . field _ 146997 _ J < 250L & & this . field _ 146992 _ L = = p _ 73864 _ 3 _ ; 
 - @ @ - 330 , 6 + 331 , 7 @ @ 
 + @ @ - 330 , 6 + 332 , 7 @ @ 
 int j = this . field _ 147003 _ i ; 
 int k = this . field _ 147009 _ r ; 
 boolean flag1 = this . func _ 193983 _ c ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , j , k ) ; 
 @ @ - 46 , 7 + 54 , 7 @ @ 
 int l = - 1 ; 
 
 if ( slot ! = null ) 
 - @ @ - 367 , 7 + 369 , 7 @ @ 
 + @ @ - 367 , 7 + 370 , 7 @ @ 
 { 
 if ( this . field _ 146297 _ k . field _ 71439 _ g . field _ 71071 _ by . func _ 70445 _ o ( ) . func _ 190926 _ b ( ) ) 
 { 
 @ @ - 55 , 7 + 63 , 7 @ @ 
 { 
 this . func _ 184098 _ a ( slot , l , p _ 73864 _ 3 _ , ClickType . CLONE ) ; 
 } 
 - @ @ - 405 , 7 + 407 , 7 @ @ 
 + @ @ - 405 , 7 + 408 , 7 @ @ 
 { 
 this . field _ 146987 _ F = 1 ; 
 } 
 @ @ - 64 , 7 + 72 , 7 @ @ 
 { 
 this . field _ 146987 _ F = 2 ; 
 } 
 - @ @ - 472 , 10 + 474 , 12 @ @ 
 + @ @ - 472 , 10 + 475 , 12 @ @ 
 
 protected void func _ 146286 _ b ( int p _ 146286 _ 1 _ , int p _ 146286 _ 2 _ , int p _ 146286 _ 3 _ ) 
 { 
 @ @ - 77 , 7 + 85 , 7 @ @ 
 int k = - 1 ; 
 
 if ( slot ! = null ) 
 - @ @ - 496 , 7 + 500 , 7 @ @ 
 + @ @ - 496 , 7 + 501 , 7 @ @ 
 { 
 for ( Slot slot2 : this . field _ 147002 _ h . field _ 75151 _ b ) 
 { 
 @ @ - 86 , 7 + 94 , 7 @ @ 
 { 
 this . func _ 184098 _ a ( slot2 , slot2 . field _ 75222 _ d , p _ 146286 _ 3 _ , ClickType . QUICK _ MOVE ) ; 
 } 
 - @ @ - 583 , 7 + 587 , 7 @ @ 
 + @ @ - 583 , 7 + 588 , 7 @ @ 
 } 
 else if ( ! this . field _ 146297 _ k . field _ 71439 _ g . field _ 71071 _ by . func _ 70445 _ o ( ) . func _ 190926 _ b ( ) ) 
 { 
 @ @ - 95 , 7 + 103 , 7 @ @ 
 { 
 this . func _ 184098 _ a ( slot , k , p _ 146286 _ 3 _ , ClickType . CLONE ) ; 
 } 
 - @ @ - 635 , 7 + 639 , 7 @ @ 
 + @ @ - 635 , 7 + 640 , 7 @ @ 
 
 protected void func _ 73869 _ a ( char p _ 73869 _ 1 _ , int p _ 73869 _ 2 _ ) throws IOException 
 { 
 @ @ - 104 , 7 + 112 , 7 @ @ 
 { 
 this . field _ 146297 _ k . field _ 71439 _ g . func _ 71053 _ j ( ) ; 
 } 
 - @ @ - 644 , 11 + 648 , 11 @ @ 
 + @ @ - 644 , 11 + 649 , 11 @ @ 
 
 if ( this . field _ 147006 _ u ! = null & & this . field _ 147006 _ u . func _ 75216 _ d ( ) ) 
 { 
 @ @ - 118 , 7 + 126 , 7 @ @ 
 { 
 this . func _ 184098 _ a ( this . field _ 147006 _ u , this . field _ 147006 _ u . field _ 75222 _ d , func _ 146271 _ m ( ) ? 1 : 0 , ClickType . THROW ) ; 
 } 
 - @ @ - 661 , 7 + 665 , 7 @ @ 
 + @ @ - 661 , 7 + 666 , 7 @ @ 
 { 
 for ( int i = 0 ; i < 9 ; + + i ) 
 { 
 @ @ - 127 , 7 + 135 , 7 @ @ 
 { 
 this . func _ 184098 _ a ( this . field _ 147006 _ u , this . field _ 147006 _ u . field _ 75222 _ d , i , ClickType . SWAP ) ; 
 return true ; 
 - @ @ - 694 , 4 + 698 , 18 @ @ 
 + @ @ - 694 , 4 + 699 , 18 @ @ 
 this . field _ 146297 _ k . field _ 71439 _ g . func _ 71053 _ j ( ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / event / GuiContainerEvent . java b / src / main / java / net / minecraftforge / client / event / GuiContainerEvent . java 
 new file mode 100644 
 index 0000000 . . 8b05440 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / event / GuiContainerEvent . java 
 @ @ - 0 , 0 + 1 , 78 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . client . event ; 
 + 
 + import net . minecraft . client . gui . inventory . GuiContainer ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + 
 + / * * 
 + * Event class for handling GuiContainer specific events . 
 + * / 
 + public class GuiContainerEvent extends Event 
 + { 
 + 
 + private final GuiContainer guiContainer ; 
 + 
 + public GuiContainerEvent ( GuiContainer guiContainer ) 
 + { 
 + this . guiContainer = guiContainer ; 
 + } 
 + 
 + public GuiContainer getGuiContainer ( ) 
 + { 
 + return guiContainer ; 
 + } 
 + 
 + / * * 
 + * This event is fired directly after the GuiContainer has draw any foreground elements , 
 + * But before the " dragged " stack , and before any tooltips . 
 + * This is useful for any slot / item specific overlays . 
 + * Things that need to be on top of All GUI elements but bellow tooltips and dragged stacks . 
 + * / 
 + public static class DrawForeground extends GuiContainerEvent 
 + { 
 + private final int mouseX ; 
 + private final int mouseY ; 
 + 
 + / * * 
 + * Called directly after the GuiContainer has drawn any foreground elements . 
 + * 
 + * @ param guiContainer The container . 
 + * @ param mouseX The current X position of the players mouse . 
 + * @ param mouseY The current Y position of the players mouse . 
 + * / 
 + public DrawForeground ( GuiContainer guiContainer , int mouseX , int mouseY ) 
 + { 
 + super ( guiContainer ) ; 
 + this . mouseX = mouseX ; 
 + this . mouseY = mouseY ; 
 + } 
 + 
 + public int getMouseX ( ) 
 + { 
 + return mouseX ; 
 + } 
 + 
 + public int getMouseY ( ) 
 + { 
 + return mouseY ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / GuiContainerEventTest . java b / src / test / java / net / minecraftforge / debug / GuiContainerEventTest . java 
 new file mode 100644 
 index 0000000 . . 06555ec 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / GuiContainerEventTest . java 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . client . renderer . GlStateManager ; 
 + import net . minecraft . inventory . Slot ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraftforge . client . event . GuiContainerEvent ; 
 + import net . minecraftforge . fml . client . config . GuiUtils ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventBusSubscriber ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; 
 + 
 + @ EventBusSubscriber 
 + @ Mod ( modid = " guicontainereventtest " , name = " GuiContainer Event Tests ! " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class GuiContainerEventTest 
 + { 
 + 
 + @ ObjectHolder ( " minecraft : stone " ) 
 + public static final Item STONE _ ITEM = null ; 
 + 
 + @ SubscribeEvent 
 + public static void onForegroundRender ( GuiContainerEvent . DrawForeground event ) 
 + { 
 + for ( Slot slot : event . getGuiContainer ( ) . inventorySlots . inventorySlots ) 
 + { 
 + if ( slot . getStack ( ) . getItem ( ) = = STONE _ ITEM ) 
 + { 
 + GlStateManager . disableLighting ( ) ; 
 + 
 + GuiUtils . drawGradientRect ( 400 , slot . xPos , slot . yPos , slot . xPos + 16 , slot . yPos + 16 , 0x80000000 , 0x80000000 ) ; 
 + 
 + GlStateManager . enableLighting ( ) ; 
 + } 
 + } 
 + } 
 + 
 + }

NEAREST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / client / Minecraft . java . patch b / fml / patches / minecraft / net / minecraft / client / Minecraft . java . patch 
 index 9739784 . . 2857f85 100644 
 - - - a / fml / patches / minecraft / net / minecraft / client / Minecraft . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / client / Minecraft . java . patch 
 @ @ - 20 , 7 + 20 , 34 @ @ 
 @ SideOnly ( Side . CLIENT ) 
 public class Minecraft implements IPlayerUsage 
 { 
 - @ @ - 448 , 7 + 454 , 7 @ @ 
 + @ @ - 333 , 21 + 339 , 23 @ @ 
 + File file2 = new File ( file1 , " crash - " + ( new SimpleDateFormat ( " yyyy - MM - dd _ HH . mm . ss " ) ) . format ( new Date ( ) ) + " - client . txt " ) ; 
 + System . out . println ( p _ 71377 _ 1 _ . func _ 71502 _ e ( ) ) ; 
 + 
 + + int retVal ; 
 + if ( p _ 71377 _ 1 _ . func _ 71497 _ f ( ) ! = null ) 
 + { 
 + System . out . println ( " # @ ! @ # Game crashed ! Crash report saved to : # @ ! @ # " + p _ 71377 _ 1 _ . func _ 71497 _ f ( ) ) ; 
 + - System . exit ( - 1 ) ; 
 + + retVal = - 1 ; 
 + } 
 + else if ( p _ 71377 _ 1 _ . func _ 147149 _ a ( file2 ) ) 
 + { 
 + System . out . println ( " # @ ! @ # Game crashed ! Crash report saved to : # @ ! @ # " + file2 . getAbsolutePath ( ) ) ; 
 + - System . exit ( - 1 ) ; 
 + + retVal = - 1 ; 
 + } 
 + else 
 + { 
 + System . out . println ( " # @ ? @ # Game crashed ! Crash report could not be saved . # @ ? @ # " ) ; 
 + - System . exit ( - 2 ) ; 
 + + retVal = - 2 ; 
 + } 
 + + FMLCommonHandler . instance ( ) . handleExit ( retVal ) ; 
 + } 
 + 
 + public void func _ 71367 _ a ( String p _ 71367 _ 1 _ , int p _ 71367 _ 2 _ ) 
 + @ @ - 448 , 7 + 456 , 7 @ @ 
 this . field _ 110451 _ am = new SimpleReloadableResourceManager ( this . field _ 110452 _ an ) ; 
 this . field _ 135017 _ as = new LanguageManager ( this . field _ 110452 _ an , this . field _ 71474 _ y . field _ 74363 _ ab ) ; 
 this . field _ 110451 _ am . func _ 110542 _ a ( this . field _ 135017 _ as ) ; 
 @ @ - 29 , 7 + 56 , 7 @ @ 
 this . field _ 71446 _ o = new TextureManager ( this . field _ 110451 _ am ) ; 
 this . field _ 110451 _ am . func _ 110542 _ a ( this . field _ 71446 _ o ) ; 
 this . field _ 147127 _ av = new SoundHandler ( this . field _ 110451 _ am , this . field _ 71474 _ y ) ; 
 - @ @ - 508 , 12 + 514 , 13 @ @ 
 + @ @ - 508 , 12 + 516 , 13 @ @ 
 this . field _ 71446 _ o . func _ 130088 _ a ( TextureMap . field _ 110576 _ c , new TextureMap ( 1 , " textures / items " ) ) ; 
 GL11 . glViewport ( 0 , 0 , this . field _ 71443 _ c , this . field _ 71440 _ d ) ; 
 this . field _ 71452 _ i = new EffectRenderer ( this . field _ 71441 _ e , this . field _ 71446 _ o ) ; 
 @ @ - 44 , 7 + 71 , 7 @ @ 
 } 
 else 
 { 
 - @ @ - 527 , 6 + 534 , 7 @ @ 
 + @ @ - 527 , 6 + 536 , 7 @ @ 
 this . func _ 71352 _ k ( ) ; 
 } 
 
 @ @ - 52 , 7 + 79 , 7 @ @ 
 Display . setVSyncEnabled ( this . field _ 71474 _ y . field _ 74352 _ v ) ; 
 } 
 
 - @ @ - 916 , 9 + 924 , 11 @ @ 
 + @ @ - 916 , 9 + 926 , 11 @ @ 
 
 if ( ! this . field _ 71454 _ w ) 
 { 
 @ @ - 64 , 7 + 91 , 7 @ @ 
 } 
 
 GL11 . glFlush ( ) ; 
 - @ @ - 1496 , 6 + 1506 , 8 @ @ 
 + @ @ - 1496 , 6 + 1508 , 8 @ @ 
 - - this . field _ 71467 _ ac ; 
 } 
 
 @ @ - 73 , 7 + 100 , 7 @ @ 
 this . field _ 71424 _ I . func _ 76320 _ a ( " gui " ) ; 
 
 if ( ! this . field _ 71445 _ n ) 
 - @ @ - 1646 , 6 + 1658 , 7 @ @ 
 + @ @ - 1646 , 6 + 1660 , 7 @ @ 
 this . field _ 71462 _ r . func _ 146274 _ d ( ) ; 
 } 
 } 
 @ @ - 81 , 7 + 108 , 7 @ @ 
 } 
 
 if ( this . field _ 71429 _ W > 0 ) 
 - @ @ - 1787 , 6 + 1800 , 7 @ @ 
 + @ @ - 1787 , 6 + 1802 , 7 @ @ 
 } 
 } 
 } 
 @ @ - 89 , 7 + 116 , 7 @ @ 
 } 
 } 
 
 - @ @ - 1978 , 12 + 1992 , 15 @ @ 
 + @ @ - 1978 , 12 + 1994 , 15 @ @ 
 this . field _ 71453 _ ak . func _ 74428 _ b ( ) ; 
 } 
 
 @ @ - 105 , 7 + 132 , 7 @ @ 
 this . func _ 71403 _ a ( ( WorldClient ) null ) ; 
 System . gc ( ) ; 
 ISaveHandler isavehandler = this . field _ 71469 _ aa . func _ 75804 _ a ( p _ 71371 _ 1 _ , false ) ; 
 - @ @ - 2019 , 6 + 2036 , 12 @ @ 
 + @ @ - 2019 , 6 + 2038 , 12 @ @ 
 
 while ( ! this . field _ 71437 _ Z . func _ 71200 _ ad ( ) ) 
 { 
 @ @ - 118 , 7 + 145 , 7 @ @ 
 String s2 = this . field _ 71437 _ Z . func _ 71195 _ b _ ( ) ; 
 
 if ( s2 ! = null ) 
 - @ @ - 2094 , 6 + 2117 , 7 @ @ 
 + @ @ - 2094 , 6 + 2119 , 7 @ @ 
 this . field _ 110448 _ aq . func _ 148529 _ f ( ) ; 
 this . func _ 71351 _ a ( ( ServerData ) null ) ; 
 this . field _ 71455 _ al = false ; 
 diff - - git a / fml / patches / minecraft / net / minecraft / server / MinecraftServer . java . patch b / fml / patches / minecraft / net / minecraft / server / MinecraftServer . java . patch 
 index 94f0a0c . . 008dbf6 100644 
 - - - a / fml / patches / minecraft / net / minecraft / server / MinecraftServer . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / server / MinecraftServer . java . patch 
 @ @ - 29 , 25 + 29 , 36 @ @ 
 long i = func _ 130071 _ aq ( ) ; 
 long l = 0L ; 
 this . field _ 147147 _ p . func _ 151315 _ a ( new ChatComponentText ( this . field _ 71286 _ C ) ) ; 
 - @ @ - 425 , 12 + 431 , 17 @ @ 
 + @ @ - 425 , 12 + 431 , 20 @ @ 
 Thread . sleep ( 1L ) ; 
 this . field _ 71296 _ Q = true ; 
 } 
 + FMLCommonHandler . instance ( ) . handleServerStopping ( ) ; 
 + + FMLCommonHandler . instance ( ) . expectServerStopped ( ) ; / / has to come before finalTick to avoid race conditions 
 } 
 else 
 { 
 + + FMLCommonHandler . instance ( ) . expectServerStopped ( ) ; / / has to come before finalTick to avoid race conditions 
 this . func _ 71228 _ a ( ( CrashReport ) null ) ; 
 } 
 } 
 + catch ( StartupQuery . AbortedException e ) 
 + { 
 + / / ignore silently 
 + + FMLCommonHandler . instance ( ) . expectServerStopped ( ) ; / / has to come before finalTick to avoid race conditions 
 + } 
 catch ( Throwable throwable1 ) 
 { 
 field _ 147145 _ h . error ( " Encountered an unexpected exception " , throwable1 ) ; 
 - @ @ - 471 , 6 + 482 , 8 @ @ 
 + @ @ - 456 , 6 + 470 , 7 @ @ 
 + field _ 147145 _ h . error ( " We were unable to save this crash report to disk . " ) ; 
 + } 
 + 
 + + FMLCommonHandler . instance ( ) . expectServerStopped ( ) ; / / has to come before finalTick to avoid race conditions 
 + this . func _ 71228 _ a ( crashreport ) ; 
 + } 
 + finally 
 + @ @ - 471 , 6 + 486 , 8 @ @ 
 } 
 finally 
 { 
 @ @ - 56 , 7 + 67 , 7 @ @ 
 this . func _ 71240 _ o ( ) ; 
 } 
 } 
 - @ @ - 513 , 6 + 526 , 7 @ @ 
 + @ @ - 513 , 6 + 530 , 7 @ @ 
 { 
 long i = System . nanoTime ( ) ; 
 AxisAlignedBB . func _ 72332 _ a ( ) . func _ 72298 _ a ( ) ; 
 @ @ - 64 , 7 + 75 , 7 @ @ 
 + + this . field _ 71315 _ w ; 
 
 if ( this . field _ 71295 _ T ) 
 - @ @ - 566 , 6 + 580 , 7 @ @ 
 + @ @ - 566 , 6 + 584 , 7 @ @ 
 
 this . field _ 71304 _ b . func _ 76319 _ b ( ) ; 
 this . field _ 71304 _ b . func _ 76319 _ b ( ) ; 
 @ @ - 72 , 7 + 83 , 7 @ @ 
 } 
 
 public void func _ 71190 _ q ( ) 
 - @ @ - 593 , 6 + 608 , 7 @ @ 
 + @ @ - 593 , 6 + 612 , 7 @ @ 
 } 
 
 this . field _ 71304 _ b . func _ 76320 _ a ( " tick " ) ; 
 @ @ - 80 , 7 + 91 , 7 @ @ 
 CrashReport crashreport ; 
 
 try 
 - @ @ - 617 , 6 + 633 , 7 @ @ 
 + @ @ - 617 , 6 + 637 , 7 @ @ 
 throw new ReportedException ( crashreport ) ; 
 } 
 
 @ @ - 88 , 7 + 99 , 7 @ @ 
 this . field _ 71304 _ b . func _ 76319 _ b ( ) ; 
 this . field _ 71304 _ b . func _ 76320 _ a ( " tracker " ) ; 
 worldserver . func _ 73039 _ n ( ) . func _ 72788 _ a ( ) ; 
 - @ @ - 648 , 6 + 665 , 7 @ @ 
 + @ @ - 648 , 6 + 669 , 7 @ @ 
 
 public void func _ 71256 _ s ( ) 
 { 
 @ @ - 96 , 7 + 107 , 7 @ @ 
 ( new Thread ( " Server thread " ) 
 { 
 private static final String _ _ OBFID = " CL _ 00001418 " ; 
 - @ @ - 695 , 7 + 713 , 7 @ @ 
 + @ @ - 695 , 7 + 717 , 7 @ @ 
 
 public String getServerModName ( ) 
 { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 index 96fc9a0 . . 44d563e 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 @ @ - 17 , 6 + 17 , 8 @ @ import java . lang . ref . WeakReference ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . concurrent . CountDownLatch ; 
 + import java . util . concurrent . TimeUnit ; 
 
 import net . minecraft . crash . CrashReport ; 
 import net . minecraft . crash . CrashReportCategory ; 
 @ @ - 86 , 6 + 88 , 7 @ @ public class FMLCommonHandler 
 private Set < SaveHandler > handlerSet = Sets . newSetFromMap ( new MapMaker ( ) . weakKeys ( ) . < SaveHandler , Boolean > makeMap ( ) ) ; 
 private WeakReference < SaveHandler > handlerToCheck ; 
 private EventBus eventBus = new EventBus ( ) ; 
 + private volatile CountDownLatch exitLatch = null ; 
 / * * 
 * The FML event bus . Subscribe here for FML related events 
 * 
 @ @ - 428 , 6 + 431 , 50 @ @ public class FMLCommonHandler 
 return sidedDelegate . shouldServerShouldBeKilledQuietly ( ) ; 
 } 
 
 + / * * 
 + * Make handleExit ( ) wait for handleServerStopped ( ) . 
 + * 
 + * For internal use only ! 
 + * / 
 + public void expectServerStopped ( ) 
 + { 
 + exitLatch = new CountDownLatch ( 1 ) ; 
 + } 
 + 
 + / * * 
 + * Delayed System . exit ( ) until the server is actually stopped / done saving . 
 + * 
 + * For internal use only ! 
 + * 
 + * @ param retVal Exit code for System . exit ( ) 
 + * / 
 + public void handleExit ( int retVal ) 
 + { 
 + CountDownLatch latch = exitLatch ; 
 + 
 + if ( latch ! = null ) 
 + { 
 + try 
 + { 
 + FMLLog . info ( " Waiting for the server to terminate / save . " ) ; 
 + if ( ! latch . await ( 10 , TimeUnit . SECONDS ) ) 
 + { 
 + FMLLog . warning ( " The server didn ' t stop within 10 seconds , exiting anyway . " ) ; 
 + } 
 + else 
 + { 
 + FMLLog . info ( " Server terminated . " ) ; 
 + } 
 + } 
 + catch ( InterruptedException e ) 
 + { 
 + FMLLog . warning ( " Interrupted wait , exiting . " ) ; 
 + } 
 + } 
 + 
 + System . exit ( retVal ) ; 
 + } 
 + 
 public void handleServerStopped ( ) 
 { 
 sidedDelegate . serverStopped ( ) ; 
 @ @ - 435 , 6 + 482 , 15 @ @ public class FMLCommonHandler 
 Loader . instance ( ) . serverStopped ( ) ; 
 / / FORCE the internal server to stop : hello optifine workaround ! 
 if ( server ! = null ) ObfuscationReflectionHelper . setPrivateValue ( MinecraftServer . class , server , false , " field _ 71316 " + " _ v " , " u " , " serverStopped " ) ; 
 + 
 + / / allow any pending exit to continue , clear exitLatch 
 + CountDownLatch latch = exitLatch ; 
 + 
 + if ( latch ! = null ) 
 + { 
 + latch . countDown ( ) ; 
 + exitLatch = null ; 
 + } 
 } 
 
 public String getModName ( )
