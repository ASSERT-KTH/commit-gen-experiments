BLEU SCORE: 0.024455939372403628

TEST MSG: Add in a check to the splash screen . If the Display . update call takes
GENERATED MSG: Slight tweak to early loading , to accommodate FMP

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 53611c6 . . 006c483 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 1098 , 4 + 1098 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> return ( CompoundDataFixer ) this . client . getDataFixer ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean isDisplayVSyncForced ( ) <nl> + { <nl> + return SplashProgress . isDisplayVSyncForced ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> index df02ff5 . . 8ddda26 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> @ @ - 115 , 6 + 115 , 10 @ @ public class SplashProgress <nl> private static int memoryLowColor ; <nl> private static float memoryColorPercent ; <nl> private static long memoryColorChangeTime ; <nl> + static boolean isDisplayVSyncForced = false ; <nl> + private static final int TIMING _ FRAME _ COUNT = 200 ; <nl> + private static final int TIMING _ FRAME _ THRESHOLD = TIMING _ FRAME _ COUNT * 5 * 1000000 ; / / 5 ms per frame , scaled to nanos <nl> + <nl> static final Semaphore mutex = new Semaphore ( 1 ) ; <nl> <nl> private static String getString ( String name , String def ) <nl> @ @ - 254 , 7 + 258 , 8 @ @ public class SplashProgress <nl> private final int barHeight = 20 ; <nl> private final int textHeight2 = 20 ; <nl> private final int barOffset = 55 ; <nl> - <nl> + private long updateTiming ; <nl> + private long framecount ; <nl> public void run ( ) <nl> { <nl> setGL ( ) ; <nl> @ @ - 266 , 6 + 271 , 7 @ @ public class SplashProgress <nl> glDisable ( GL _ TEXTURE _ 2D ) ; <nl> while ( ! done ) <nl> { <nl> + framecount + + ; <nl> ProgressBar first = null , penult = null , last = null ; <nl> Iterator < ProgressBar > i = ProgressManager . barIterator ( ) ; <nl> while ( i . hasNext ( ) ) <nl> @ @ - 371 , 16 + 377 , 40 @ @ public class SplashProgress <nl> / / is trying to impose a framerate or other thing is occurring . Without the mutex , the main <nl> / / thread would delay waiting for the same global display lock <nl> mutex . acquireUninterruptibly ( ) ; <nl> + long updateStart = System . nanoTime ( ) ; <nl> Display . update ( ) ; <nl> / / As soon as we ' re done , we release the mutex . The other thread can now ping the processmessages <nl> / / call as often as it wants until we get get back here again <nl> + long dur = System . nanoTime ( ) - updateStart ; <nl> + if ( framecount < TIMING _ FRAME _ COUNT ) { <nl> + updateTiming + = dur ; <nl> + } <nl> mutex . release ( ) ; <nl> if ( pause ) <nl> { <nl> clearGL ( ) ; <nl> setGL ( ) ; <nl> } <nl> - Display . sync ( 100 ) ; <nl> + / / Such a hack - if the time taken is greater than 10 milliseconds , we ' re gonna guess that we ' re on a <nl> + / / system where vsync is forced through the swapBuffers call - so we have to force a sleep and let the <nl> + / / loading thread have a turn - some badly designed mods access Keyboard and therefore GlobalLock . lock <nl> + / / during splash screen , and mutex against the above Display . update call as a result . <nl> + / / 4 milliseconds is a guess - but it should be enough to trigger in most circumstances . ( Maybe if <nl> + / / 240FPS is possible , this won ' t fire ? ) <nl> + if ( framecount > = TIMING _ FRAME _ COUNT & & updateTiming > TIMING _ FRAME _ THRESHOLD ) { <nl> + if ( ! isDisplayVSyncForced ) <nl> + { <nl> + isDisplayVSyncForced = true ; <nl> + FMLLog . log ( Level . INFO , " Using alternative sync timing : % d frames of Display . update took % d nanos " , TIMING _ FRAME _ COUNT , updateTiming ) ; <nl> + } <nl> + try { Thread . sleep ( 16 ) ; } catch ( InterruptedException ie ) { } <nl> + } else <nl> + { <nl> + if ( framecount = = TIMING _ FRAME _ COUNT ) { <nl> + FMLLog . log ( Level . INFO , " Using sync timing . % d frames of Display . update took % d nanos " , TIMING _ FRAME _ COUNT , updateTiming ) ; <nl> + } <nl> + Display . sync ( 100 ) ; <nl> + } <nl> } <nl> clearGL ( ) ; <nl> } <nl> @ @ - 464 , 7 + 494 , 7 @ @ public class SplashProgress <nl> memoryColorChangeTime = time ; <nl> memoryColorPercent = usedMemoryPercent ; <nl> } <nl> - <nl> + <nl> int memoryBarColor ; <nl> if ( memoryColorPercent < 0 . 75f ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index 92f85a0 . . 968b6de 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 757 , 4 + 757 , 6 @ @ public class FMLCommonHandler <nl> { <nl> return ( CompoundDataFixer ) sidedDelegate . getDataFixer ( ) ; <nl> } <nl> + <nl> + public boolean isDisplayVSyncForced ( ) { return sidedDelegate . isDisplayVSyncForced ( ) ; } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> index 4cff064 . . e28ea0f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java <nl> @ @ - 80 , 4 + 80 , 6 @ @ public interface IFMLSidedHandler <nl> void fireSidedRegistryEvents ( ) ; <nl> <nl> CompoundDataFixer getDataFixer ( ) ; <nl> + <nl> + boolean isDisplayVSyncForced ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ProgressManager . java b / src / main / java / net / minecraftforge / fml / common / ProgressManager . java <nl> index e2003c1 . . fe2f995 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ProgressManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ProgressManager . java <nl> @ @ - 32 , 7 + 32 , 6 @ @ import com . google . common . base . Joiner ; <nl> public class ProgressManager <nl> { <nl> private static final List < ProgressBar > bars = new CopyOnWriteArrayList < ProgressBar > ( ) ; <nl> - <nl> / * * <nl> * Not a fully fleshed out API , may change in future MC versions . <nl> * However feel free to use and suggest additions . <nl> @ @ - 57 , 7 + 56 , 9 @ @ public class ProgressManager <nl> return bar ; <nl> } <nl> <nl> - <nl> + public static boolean isDisplayVSyncForced ( ) { <nl> + return FMLCommonHandler . instance ( ) . isDisplayVSyncForced ( ) ; <nl> + } <nl> / * * <nl> * Not a fully fleshed out API , may change in future MC versions . <nl> * However feel free to use and suggest additions . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index 32a83db . . 64a175d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 349 , 4 + 349 , 10 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> return ( CompoundDataFixer ) this . server . getDataFixer ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean isDisplayVSyncForced ( ) <nl> + { <nl> + return false ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 1afaf1c . . a072127 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 204 , 10 + 204 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> return ; <nl> } <nl> <nl> - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> + List < String > injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> try <nl> { <nl> - Loader . instance ( ) . loadMods ( ) ; <nl> + Loader . instance ( ) . loadMods ( injectedModContainers ) ; <nl> } <nl> catch ( WrongMinecraftVersionException wrong ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index f135488 . . 7e181d8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 140 , 11 + 140 , 12 @ @ public class FMLCommonHandler <nl> return eventBus ; <nl> } <nl> <nl> - public void beginLoading ( IFMLSidedHandler handler ) <nl> + public List < String > beginLoading ( IFMLSidedHandler handler ) <nl> { <nl> sidedDelegate = handler ; <nl> MinecraftForge . initialize ( ) ; <nl> / / MinecraftForge . registerCrashCallable ( ) ; <nl> + return ImmutableList . < String > of ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 0e60836 . . e2771f3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 26 , 14 + 26 , 11 @ @ import java . util . Map ; <nl> import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> - import net . minecraft . crash . CrashReport ; <nl> - import net . minecraft . crash . ICrashReportDetail ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> import net . minecraftforge . fml . common . ModContainer . Disableable ; <nl> import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; <nl> - import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; <nl> import net . minecraftforge . fml . common . discovery . ModDiscoverer ; <nl> import net . minecraftforge . fml . common . event . FMLInterModComms ; <nl> import net . minecraftforge . fml . common . event . FMLLoadEvent ; <nl> @ @ - 338 , 8 + 335 , 9 @ @ public class Loader <nl> * Finally , if they are successfully loaded as classes , they are then added <nl> * to the available mod list . <nl> * / <nl> - private ModDiscoverer identifyMods ( ) <nl> + private ModDiscoverer identifyMods ( List < String > additionalContainers ) <nl> { <nl> + injectedContainers . addAll ( additionalContainers ) ; <nl> FMLLog . fine ( " Building injected Mod Containers % s " , injectedContainers ) ; <nl> / / Add in the MCP mod container <nl> mods . add ( new InjectedModContainer ( mcp , new File ( " minecraft . jar " ) ) ) ; <nl> @ @ - 487 , 8 + 485 , 9 @ @ public class Loader <nl> * Called from the hook to start mod loading . We trigger the <nl> * { @ link # identifyMods ( ) } and Constructing , Preinitalization , and Initalization phases here . Finally , <nl> * the mod list is frozen completely and is consider immutable from then on . <nl> + * @ param injectedModContainers <nl> * / <nl> - public void loadMods ( ) <nl> + public void loadMods ( List < String > injectedModContainers ) <nl> { <nl> progressBar = ProgressManager . push ( " Loading " , 7 ) ; <nl> progressBar . step ( " Constructing Mods " ) ; <nl> @ @ - 497 , 7 + 496 , 7 @ @ public class Loader <nl> namedMods = Maps . newHashMap ( ) ; <nl> modController = new LoadController ( this ) ; <nl> modController . transition ( LoaderState . LOADING , false ) ; <nl> - discoverer = identifyMods ( ) ; <nl> + discoverer = identifyMods ( injectedModContainers ) ; <nl> ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; <nl> disableRequestedMods ( ) ; <nl> modController . distributeStateMessage ( FMLLoadEvent . class ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index 7d82c64 . . d292218 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 13 , 7 + 13 , 6 @ @ <nl> package net . minecraftforge . fml . server ; <nl> <nl> import java . io . * ; <nl> - import java . util . Enumeration ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> @ @ - 74 , 22 + 73 , 22 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> * A reference to the server itself <nl> * / <nl> private MinecraftServer server ; <nl> - <nl> + private List < String > injectedModContainers ; <nl> private FMLServerHandler ( ) <nl> { <nl> - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> + injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; <nl> } <nl> / * * <nl> * Called to start the whole game off from <nl> * { @ link MinecraftServer # startServer } <nl> * <nl> - * @ param minecraftServer <nl> + * @ param minecraftServer server <nl> * / <nl> @ Override <nl> public void beginServerLoading ( MinecraftServer minecraftServer ) <nl> { <nl> server = minecraftServer ; <nl> - Loader . instance ( ) . loadMods ( ) ; <nl> + Loader . instance ( ) . loadMods ( injectedModContainers ) ; <nl> Loader . instance ( ) . preinitializeMods ( ) ; <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 53611c6 . . 006c483 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 1098 , 4 + 1098 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 return ( CompoundDataFixer ) this . client . getDataFixer ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean isDisplayVSyncForced ( ) 
 + { 
 + return SplashProgress . isDisplayVSyncForced ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 index df02ff5 . . 8ddda26 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 @ @ - 115 , 6 + 115 , 10 @ @ public class SplashProgress 
 private static int memoryLowColor ; 
 private static float memoryColorPercent ; 
 private static long memoryColorChangeTime ; 
 + static boolean isDisplayVSyncForced = false ; 
 + private static final int TIMING _ FRAME _ COUNT = 200 ; 
 + private static final int TIMING _ FRAME _ THRESHOLD = TIMING _ FRAME _ COUNT * 5 * 1000000 ; / / 5 ms per frame , scaled to nanos 
 + 
 static final Semaphore mutex = new Semaphore ( 1 ) ; 
 
 private static String getString ( String name , String def ) 
 @ @ - 254 , 7 + 258 , 8 @ @ public class SplashProgress 
 private final int barHeight = 20 ; 
 private final int textHeight2 = 20 ; 
 private final int barOffset = 55 ; 
 - 
 + private long updateTiming ; 
 + private long framecount ; 
 public void run ( ) 
 { 
 setGL ( ) ; 
 @ @ - 266 , 6 + 271 , 7 @ @ public class SplashProgress 
 glDisable ( GL _ TEXTURE _ 2D ) ; 
 while ( ! done ) 
 { 
 + framecount + + ; 
 ProgressBar first = null , penult = null , last = null ; 
 Iterator < ProgressBar > i = ProgressManager . barIterator ( ) ; 
 while ( i . hasNext ( ) ) 
 @ @ - 371 , 16 + 377 , 40 @ @ public class SplashProgress 
 / / is trying to impose a framerate or other thing is occurring . Without the mutex , the main 
 / / thread would delay waiting for the same global display lock 
 mutex . acquireUninterruptibly ( ) ; 
 + long updateStart = System . nanoTime ( ) ; 
 Display . update ( ) ; 
 / / As soon as we ' re done , we release the mutex . The other thread can now ping the processmessages 
 / / call as often as it wants until we get get back here again 
 + long dur = System . nanoTime ( ) - updateStart ; 
 + if ( framecount < TIMING _ FRAME _ COUNT ) { 
 + updateTiming + = dur ; 
 + } 
 mutex . release ( ) ; 
 if ( pause ) 
 { 
 clearGL ( ) ; 
 setGL ( ) ; 
 } 
 - Display . sync ( 100 ) ; 
 + / / Such a hack - if the time taken is greater than 10 milliseconds , we ' re gonna guess that we ' re on a 
 + / / system where vsync is forced through the swapBuffers call - so we have to force a sleep and let the 
 + / / loading thread have a turn - some badly designed mods access Keyboard and therefore GlobalLock . lock 
 + / / during splash screen , and mutex against the above Display . update call as a result . 
 + / / 4 milliseconds is a guess - but it should be enough to trigger in most circumstances . ( Maybe if 
 + / / 240FPS is possible , this won ' t fire ? ) 
 + if ( framecount > = TIMING _ FRAME _ COUNT & & updateTiming > TIMING _ FRAME _ THRESHOLD ) { 
 + if ( ! isDisplayVSyncForced ) 
 + { 
 + isDisplayVSyncForced = true ; 
 + FMLLog . log ( Level . INFO , " Using alternative sync timing : % d frames of Display . update took % d nanos " , TIMING _ FRAME _ COUNT , updateTiming ) ; 
 + } 
 + try { Thread . sleep ( 16 ) ; } catch ( InterruptedException ie ) { } 
 + } else 
 + { 
 + if ( framecount = = TIMING _ FRAME _ COUNT ) { 
 + FMLLog . log ( Level . INFO , " Using sync timing . % d frames of Display . update took % d nanos " , TIMING _ FRAME _ COUNT , updateTiming ) ; 
 + } 
 + Display . sync ( 100 ) ; 
 + } 
 } 
 clearGL ( ) ; 
 } 
 @ @ - 464 , 7 + 494 , 7 @ @ public class SplashProgress 
 memoryColorChangeTime = time ; 
 memoryColorPercent = usedMemoryPercent ; 
 } 
 - 
 + 
 int memoryBarColor ; 
 if ( memoryColorPercent < 0 . 75f ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index 92f85a0 . . 968b6de 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 757 , 4 + 757 , 6 @ @ public class FMLCommonHandler 
 { 
 return ( CompoundDataFixer ) sidedDelegate . getDataFixer ( ) ; 
 } 
 + 
 + public boolean isDisplayVSyncForced ( ) { return sidedDelegate . isDisplayVSyncForced ( ) ; } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 index 4cff064 . . e28ea0f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / IFMLSidedHandler . java 
 @ @ - 80 , 4 + 80 , 6 @ @ public interface IFMLSidedHandler 
 void fireSidedRegistryEvents ( ) ; 
 
 CompoundDataFixer getDataFixer ( ) ; 
 + 
 + boolean isDisplayVSyncForced ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ProgressManager . java b / src / main / java / net / minecraftforge / fml / common / ProgressManager . java 
 index e2003c1 . . fe2f995 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ProgressManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ProgressManager . java 
 @ @ - 32 , 7 + 32 , 6 @ @ import com . google . common . base . Joiner ; 
 public class ProgressManager 
 { 
 private static final List < ProgressBar > bars = new CopyOnWriteArrayList < ProgressBar > ( ) ; 
 - 
 / * * 
 * Not a fully fleshed out API , may change in future MC versions . 
 * However feel free to use and suggest additions . 
 @ @ - 57 , 7 + 56 , 9 @ @ public class ProgressManager 
 return bar ; 
 } 
 
 - 
 + public static boolean isDisplayVSyncForced ( ) { 
 + return FMLCommonHandler . instance ( ) . isDisplayVSyncForced ( ) ; 
 + } 
 / * * 
 * Not a fully fleshed out API , may change in future MC versions . 
 * However feel free to use and suggest additions . 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index 32a83db . . 64a175d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 349 , 4 + 349 , 10 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 return ( CompoundDataFixer ) this . server . getDataFixer ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean isDisplayVSyncForced ( ) 
 + { 
 + return false ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 1afaf1c . . a072127 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 204 , 10 + 204 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 return ; 
 } 
 
 - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 + List < String > injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 try 
 { 
 - Loader . instance ( ) . loadMods ( ) ; 
 + Loader . instance ( ) . loadMods ( injectedModContainers ) ; 
 } 
 catch ( WrongMinecraftVersionException wrong ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index f135488 . . 7e181d8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 140 , 11 + 140 , 12 @ @ public class FMLCommonHandler 
 return eventBus ; 
 } 
 
 - public void beginLoading ( IFMLSidedHandler handler ) 
 + public List < String > beginLoading ( IFMLSidedHandler handler ) 
 { 
 sidedDelegate = handler ; 
 MinecraftForge . initialize ( ) ; 
 / / MinecraftForge . registerCrashCallable ( ) ; 
 + return ImmutableList . < String > of ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 0e60836 . . e2771f3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 26 , 14 + 26 , 11 @ @ import java . util . Map ; 
 import java . util . Properties ; 
 import java . util . Set ; 
 
 - import net . minecraft . crash . CrashReport ; 
 - import net . minecraft . crash . ICrashReportDetail ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . common . capabilities . CapabilityManager ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 import net . minecraftforge . fml . common . ModContainer . Disableable ; 
 import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; 
 - import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; 
 import net . minecraftforge . fml . common . discovery . ModDiscoverer ; 
 import net . minecraftforge . fml . common . event . FMLInterModComms ; 
 import net . minecraftforge . fml . common . event . FMLLoadEvent ; 
 @ @ - 338 , 8 + 335 , 9 @ @ public class Loader 
 * Finally , if they are successfully loaded as classes , they are then added 
 * to the available mod list . 
 * / 
 - private ModDiscoverer identifyMods ( ) 
 + private ModDiscoverer identifyMods ( List < String > additionalContainers ) 
 { 
 + injectedContainers . addAll ( additionalContainers ) ; 
 FMLLog . fine ( " Building injected Mod Containers % s " , injectedContainers ) ; 
 / / Add in the MCP mod container 
 mods . add ( new InjectedModContainer ( mcp , new File ( " minecraft . jar " ) ) ) ; 
 @ @ - 487 , 8 + 485 , 9 @ @ public class Loader 
 * Called from the hook to start mod loading . We trigger the 
 * { @ link # identifyMods ( ) } and Constructing , Preinitalization , and Initalization phases here . Finally , 
 * the mod list is frozen completely and is consider immutable from then on . 
 + * @ param injectedModContainers 
 * / 
 - public void loadMods ( ) 
 + public void loadMods ( List < String > injectedModContainers ) 
 { 
 progressBar = ProgressManager . push ( " Loading " , 7 ) ; 
 progressBar . step ( " Constructing Mods " ) ; 
 @ @ - 497 , 7 + 496 , 7 @ @ public class Loader 
 namedMods = Maps . newHashMap ( ) ; 
 modController = new LoadController ( this ) ; 
 modController . transition ( LoaderState . LOADING , false ) ; 
 - discoverer = identifyMods ( ) ; 
 + discoverer = identifyMods ( injectedModContainers ) ; 
 ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; 
 disableRequestedMods ( ) ; 
 modController . distributeStateMessage ( FMLLoadEvent . class ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index 7d82c64 . . d292218 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 13 , 7 + 13 , 6 @ @ 
 package net . minecraftforge . fml . server ; 
 
 import java . io . * ; 
 - import java . util . Enumeration ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Set ; 
 @ @ - 74 , 22 + 73 , 22 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 * A reference to the server itself 
 * / 
 private MinecraftServer server ; 
 - 
 + private List < String > injectedModContainers ; 
 private FMLServerHandler ( ) 
 { 
 - FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 + injectedModContainers = FMLCommonHandler . instance ( ) . beginLoading ( this ) ; 
 } 
 / * * 
 * Called to start the whole game off from 
 * { @ link MinecraftServer # startServer } 
 * 
 - * @ param minecraftServer 
 + * @ param minecraftServer server 
 * / 
 @ Override 
 public void beginServerLoading ( MinecraftServer minecraftServer ) 
 { 
 server = minecraftServer ; 
 - Loader . instance ( ) . loadMods ( ) ; 
 + Loader . instance ( ) . loadMods ( injectedModContainers ) ; 
 Loader . instance ( ) . preinitializeMods ( ) ; 
 } 

