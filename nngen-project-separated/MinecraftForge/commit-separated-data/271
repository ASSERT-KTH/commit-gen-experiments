BLEU SCORE: 0.02383853510228548

TEST MSG: Fix serverside startup failure when checking for vanilla acceptance
GENERATED MSG: Better descriptions on dependency version range error screen

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> index d32b466 . . 0e19bb8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ <nl> <nl> package net . minecraftforge . fml . common . versioning ; <nl> <nl> - import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . util . text . translation . I18n ; <nl> <nl> import javax . annotation . Nullable ; <nl> <nl> @ @ - 208 , 31 + 208 , 31 @ @ public class Restriction <nl> { <nl> if ( getLowerBound ( ) = = null & & getUpperBound ( ) = = null ) <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . any " ) ; <nl> + return I18n . translateToLocal ( " fml . messages . version . restriction . any " ) ; <nl> } <nl> else if ( getLowerBound ( ) ! = null & & getUpperBound ( ) ! = null ) <nl> { <nl> if ( getLowerBound ( ) . getVersionString ( ) . equals ( getUpperBound ( ) . getVersionString ( ) ) ) <nl> { <nl> return getLowerBound ( ) . getVersionString ( ) ; <nl> - } <nl> - else <nl> + } <nl> + else <nl> { <nl> - if ( isLowerBoundInclusive ( ) & & isUpperBoundInclusive ( ) ) <nl> + if ( isLowerBoundInclusive ( ) & & isUpperBoundInclusive ( ) ) <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . bounded . inclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> - } <nl> - else if ( isLowerBoundInclusive ( ) ) <nl> + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . bounded . inclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + } <nl> + else if ( isLowerBoundInclusive ( ) ) <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . bounded . upperexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> - } <nl> - else if ( isUpperBoundInclusive ( ) ) <nl> + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . bounded . upperexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + } <nl> + else if ( isUpperBoundInclusive ( ) ) <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . bounded . lowerexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> - } <nl> - else <nl> + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . bounded . lowerexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + } <nl> + else <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . bounded . exclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . bounded . exclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> } <nl> } <nl> } <nl> @ @ - 240 , 22 + 240 , 22 @ @ public class Restriction <nl> { <nl> if ( isLowerBoundInclusive ( ) ) <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . lower . inclusive " , getLowerBound ( ) ) ; <nl> + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . lower . inclusive " , getLowerBound ( ) ) ; <nl> } <nl> else <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . lower . exclusive " , getLowerBound ( ) ) ; <nl> + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . lower . exclusive " , getLowerBound ( ) ) ; <nl> } <nl> } <nl> else <nl> { <nl> if ( isUpperBoundInclusive ( ) ) <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . upper . inclusive " , getUpperBound ( ) ) ; <nl> + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . upper . inclusive " , getUpperBound ( ) ) ; <nl> } <nl> else <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . upper . exclusive " , getUpperBound ( ) ) ; <nl> + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . upper . exclusive " , getUpperBound ( ) ) ; <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> index aa0575c . . d32b466 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> @ @ - 215 , 10 + 215 , 25 @ @ public class Restriction <nl> if ( getLowerBound ( ) . getVersionString ( ) . equals ( getUpperBound ( ) . getVersionString ( ) ) ) <nl> { <nl> return getLowerBound ( ) . getVersionString ( ) ; <nl> - } <nl> - else <nl> + } <nl> + else <nl> { <nl> - return I18n . format ( " fml . messages . version . restriction . bounded " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + if ( isLowerBoundInclusive ( ) & & isUpperBoundInclusive ( ) ) <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . bounded . inclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + } <nl> + else if ( isLowerBoundInclusive ( ) ) <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . bounded . upperexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + } <nl> + else if ( isUpperBoundInclusive ( ) ) <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . bounded . lowerexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + return I18n . format ( " fml . messages . version . restriction . bounded . exclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; <nl> + } <nl> } <nl> } <nl> else if ( getLowerBound ( ) ! = null ) <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index ad8e613 . . 3266491 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 181 , 6 + 181 , 10 @ @ fml . messages . version . restriction . lower . exclusive = above % s <nl> fml . messages . version . restriction . upper . inclusive = % s or below <nl> fml . messages . version . restriction . upper . exclusive = below % s <nl> fml . messages . version . restriction . bounded = between % s and % s <nl> + fml . messages . version . restriction . bounded . inclusive = between % s and % s ( inclusive ) <nl> + fml . messages . version . restriction . bounded . exclusive = between % s and % s ( exclusive ) <nl> + fml . messages . version . restriction . bounded . lowerexclusive = above % s , and % s or below <nl> + fml . messages . version . restriction . bounded . upperexclusive = % s or above , and below % s <nl> <nl> fml . button . continue = Continue <nl> fml . button . open . mods . folder = Open Mods Folder

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 index d32b466 . . 0e19bb8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 @ @ - 19 , 7 + 19 , 7 @ @ 
 
 package net . minecraftforge . fml . common . versioning ; 
 
 - import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . util . text . translation . I18n ; 
 
 import javax . annotation . Nullable ; 
 
 @ @ - 208 , 31 + 208 , 31 @ @ public class Restriction 
 { 
 if ( getLowerBound ( ) = = null & & getUpperBound ( ) = = null ) 
 { 
 - return I18n . format ( " fml . messages . version . restriction . any " ) ; 
 + return I18n . translateToLocal ( " fml . messages . version . restriction . any " ) ; 
 } 
 else if ( getLowerBound ( ) ! = null & & getUpperBound ( ) ! = null ) 
 { 
 if ( getLowerBound ( ) . getVersionString ( ) . equals ( getUpperBound ( ) . getVersionString ( ) ) ) 
 { 
 return getLowerBound ( ) . getVersionString ( ) ; 
 - } 
 - else 
 + } 
 + else 
 { 
 - if ( isLowerBoundInclusive ( ) & & isUpperBoundInclusive ( ) ) 
 + if ( isLowerBoundInclusive ( ) & & isUpperBoundInclusive ( ) ) 
 { 
 - return I18n . format ( " fml . messages . version . restriction . bounded . inclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 - } 
 - else if ( isLowerBoundInclusive ( ) ) 
 + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . bounded . inclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + } 
 + else if ( isLowerBoundInclusive ( ) ) 
 { 
 - return I18n . format ( " fml . messages . version . restriction . bounded . upperexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 - } 
 - else if ( isUpperBoundInclusive ( ) ) 
 + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . bounded . upperexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + } 
 + else if ( isUpperBoundInclusive ( ) ) 
 { 
 - return I18n . format ( " fml . messages . version . restriction . bounded . lowerexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 - } 
 - else 
 + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . bounded . lowerexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + } 
 + else 
 { 
 - return I18n . format ( " fml . messages . version . restriction . bounded . exclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . bounded . exclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 } 
 } 
 } 
 @ @ - 240 , 22 + 240 , 22 @ @ public class Restriction 
 { 
 if ( isLowerBoundInclusive ( ) ) 
 { 
 - return I18n . format ( " fml . messages . version . restriction . lower . inclusive " , getLowerBound ( ) ) ; 
 + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . lower . inclusive " , getLowerBound ( ) ) ; 
 } 
 else 
 { 
 - return I18n . format ( " fml . messages . version . restriction . lower . exclusive " , getLowerBound ( ) ) ; 
 + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . lower . exclusive " , getLowerBound ( ) ) ; 
 } 
 } 
 else 
 { 
 if ( isUpperBoundInclusive ( ) ) 
 { 
 - return I18n . format ( " fml . messages . version . restriction . upper . inclusive " , getUpperBound ( ) ) ; 
 + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . upper . inclusive " , getUpperBound ( ) ) ; 
 } 
 else 
 { 
 - return I18n . format ( " fml . messages . version . restriction . upper . exclusive " , getUpperBound ( ) ) ; 
 + return I18n . translateToLocalFormatted ( " fml . messages . version . restriction . upper . exclusive " , getUpperBound ( ) ) ; 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 index aa0575c . . d32b466 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 @ @ - 215 , 10 + 215 , 25 @ @ public class Restriction 
 if ( getLowerBound ( ) . getVersionString ( ) . equals ( getUpperBound ( ) . getVersionString ( ) ) ) 
 { 
 return getLowerBound ( ) . getVersionString ( ) ; 
 - } 
 - else 
 + } 
 + else 
 { 
 - return I18n . format ( " fml . messages . version . restriction . bounded " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + if ( isLowerBoundInclusive ( ) & & isUpperBoundInclusive ( ) ) 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . bounded . inclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + } 
 + else if ( isLowerBoundInclusive ( ) ) 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . bounded . upperexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + } 
 + else if ( isUpperBoundInclusive ( ) ) 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . bounded . lowerexclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + } 
 + else 
 + { 
 + return I18n . format ( " fml . messages . version . restriction . bounded . exclusive " , getLowerBound ( ) , getUpperBound ( ) ) ; 
 + } 
 } 
 } 
 else if ( getLowerBound ( ) ! = null ) 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index ad8e613 . . 3266491 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 181 , 6 + 181 , 10 @ @ fml . messages . version . restriction . lower . exclusive = above % s 
 fml . messages . version . restriction . upper . inclusive = % s or below 
 fml . messages . version . restriction . upper . exclusive = below % s 
 fml . messages . version . restriction . bounded = between % s and % s 
 + fml . messages . version . restriction . bounded . inclusive = between % s and % s ( inclusive ) 
 + fml . messages . version . restriction . bounded . exclusive = between % s and % s ( exclusive ) 
 + fml . messages . version . restriction . bounded . lowerexclusive = above % s , and % s or below 
 + fml . messages . version . restriction . bounded . upperexclusive = % s or above , and below % s 
 
 fml . button . continue = Continue 
 fml . button . open . mods . folder = Open Mods Folder
