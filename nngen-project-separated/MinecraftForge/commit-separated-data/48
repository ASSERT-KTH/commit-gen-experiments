BLEU SCORE: 0.015542791893293221

TEST MSG: Allow login packets to only generate on server based connections
GENERATED MSG: Fix network syncing of SERVER config . Enable COMMON Config . Fix network

TEST DIFF (one line): diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> index d624df4 . . 5340c54 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> @ @ - 36 , 6 + 36 , 7 @ @ import java . util . Map ; <nl> import java . util . ServiceLoader ; <nl> import java . util . stream . Collectors ; <nl> <nl> + import static net . minecraftforge . fml . loading . LogMarkers . CORE ; <nl> import static net . minecraftforge . fml . loading . LogMarkers . SCAN ; <nl> <nl> <nl> @ @ - 48 , 7 + 49 , 7 @ @ public class ModDiscoverer { <nl> locators = ServiceLoader . load ( IModLocator . class ) ; <nl> locatorList = ServiceLoaderStreamUtils . toList ( this . locators ) ; <nl> locatorList . forEach ( l - > l . initArguments ( arguments ) ) ; <nl> - LOGGER . debug ( SCAN , " Found Mod Locators : { } " , ( ) - > locatorList . stream ( ) . map ( iModLocator - > " ( " + iModLocator . name ( ) + " : " + iModLocator . getClass ( ) . getPackage ( ) . getImplementationVersion ( ) + " ) " ) . collect ( Collectors . joining ( " , " ) ) ) ; <nl> + LOGGER . debug ( CORE , " Found Mod Locators : { } " , ( ) - > locatorList . stream ( ) . map ( iModLocator - > " ( " + iModLocator . name ( ) + " : " + iModLocator . getClass ( ) . getPackage ( ) . getImplementationVersion ( ) + " ) " ) . collect ( Collectors . joining ( " , " ) ) ) ; <nl> } <nl> <nl> ModDiscoverer ( List < IModLocator > locatorList ) { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> index ed0dec6 . . 089a2d2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> + + + b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public class ConfigTracker { <nl> this . configSets . get ( type ) . forEach ( config - > openConfig ( config , configBasePath ) ) ; <nl> } <nl> <nl> - public List < Pair < String , FMLHandshakeMessages . S2CConfigData > > syncConfigs ( ) { <nl> + public List < Pair < String , FMLHandshakeMessages . S2CConfigData > > syncConfigs ( boolean isLocal ) { <nl> final Map < String , byte [ ] > configData = configSets . get ( ModConfig . Type . SERVER ) . stream ( ) . collect ( Collectors . toMap ( ModConfig : : getFileName , mc - > { / / TODO : Test cpw ' s LambdaExceptionUtils on Oracle javac . <nl> try { <nl> return Files . readAllBytes ( mc . getFullPath ( ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / ConnectionType . java b / src / main / java / net / minecraftforge / fml / network / ConnectionType . java <nl> index c437908 . . 1034e55 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / ConnectionType . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / ConnectionType . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ public enum ConnectionType <nl> ConnectionType ( Function < String , Integer > versionExtractor ) { <nl> this . versionExtractor = versionExtractor ; <nl> } <nl> + <nl> public static ConnectionType forVersionFlag ( String vers ) <nl> { <nl> return vers . startsWith ( FMLNetworkConstants . FMLNETMARKER ) ? MODDED : VANILLA ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> index 7a8cb91 . . b3ee0f0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> @ @ - 19 , 14 + 19 , 17 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> + import com . google . common . collect . Multimap ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . network . NetHandlerLoginServer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . text . TextComponentString ; <nl> import net . minecraftforge . fml . config . ConfigTracker ; <nl> + import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; <nl> import net . minecraftforge . fml . network . simple . SimpleChannel ; <nl> import net . minecraftforge . registries . ForgeRegistry ; <nl> + import net . minecraftforge . registries . GameData ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . Marker ; <nl> @ @ - 40 , 6 + 43 , 8 @ @ import java . util . HashSet ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> + import java . util . concurrent . CountDownLatch ; <nl> + import java . util . concurrent . atomic . AtomicBoolean ; <nl> import java . util . function . Supplier ; <nl> <nl> import static net . minecraftforge . registries . ForgeRegistry . REGISTRIES ; <nl> @ @ - 114 , 11 + 119 , 14 @ @ public class FMLHandshakeHandler { <nl> { <nl> this . direction = side ; <nl> this . manager = networkManager ; <nl> - if ( NetworkHooks . getConnectionType ( ( ) - > this . manager ) = = ConnectionType . VANILLA ) { <nl> + if ( networkManager . isLocalChannel ( ) ) { <nl> + this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction , true ) ; <nl> + LOGGER . debug ( FMLHSMARKER , " Starting local connection . " ) ; <nl> + } else if ( NetworkHooks . getConnectionType ( ( ) - > this . manager ) = = ConnectionType . VANILLA ) { <nl> this . messageList = Collections . emptyList ( ) ; <nl> LOGGER . debug ( FMLHSMARKER , " Starting new vanilla network connection . " ) ; <nl> } else { <nl> - this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction ) ; <nl> + this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction , false ) ; <nl> LOGGER . debug ( FMLHSMARKER , " Starting new modded network connection . Found { } messages to dispatch . " , this . messageList . size ( ) ) ; <nl> } <nl> } <nl> @ @ - 170 , 13 + 178 , 48 @ @ public class FMLHandshakeHandler { <nl> LOGGER . debug ( FMLHSMARKER , " Received registry packet for { } " , registryPacket . getRegistryName ( ) ) ; <nl> this . registriesToReceive . remove ( registryPacket . getRegistryName ( ) ) ; <nl> this . registrySnapshots . put ( registryPacket . getRegistryName ( ) , registryPacket . getSnapshot ( ) ) ; <nl> - contextSupplier . get ( ) . setPacketHandled ( true ) ; <nl> - FMLNetworkConstants . handshakeChannel . reply ( new FMLHandshakeMessages . C2SAcknowledge ( ) , contextSupplier . get ( ) ) ; <nl> <nl> + boolean continueHandshake = true ; <nl> if ( this . registriesToReceive . isEmpty ( ) ) { <nl> - / / TODO : @ cpw injectSnapshot Needs to be on the world thread . And maybe block the network / login so we don ' t get world data before we finish ? <nl> - registrySnapshots = null ; <nl> + continueHandshake = handleRegistryLoading ( contextSupplier ) ; <nl> + } <nl> + / / The handshake reply isn ' t sent until we have processed the message <nl> + contextSupplier . get ( ) . setPacketHandled ( true ) ; <nl> + if ( ! continueHandshake ) { <nl> + LOGGER . error ( FMLHSMARKER , " Connection closed , not continuing handshake " ) ; <nl> + } else { <nl> + FMLNetworkConstants . handshakeChannel . reply ( new FMLHandshakeMessages . C2SAcknowledge ( ) , contextSupplier . get ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + private boolean handleRegistryLoading ( final Supplier < NetworkEvent . Context > contextSupplier ) { <nl> + / / We use a countdown latch to suspend the network thread pending the client thread processing the registry data <nl> + AtomicBoolean successfulConnection = new AtomicBoolean ( false ) ; <nl> + CountDownLatch block = new CountDownLatch ( 1 ) ; <nl> + contextSupplier . get ( ) . enqueueWork ( ( ) - > { <nl> + LOGGER . debug ( FMLHSMARKER , " Injecting registry snapshot from server . " ) ; <nl> + final Multimap < ResourceLocation , ResourceLocation > missingData = GameData . injectSnapshot ( registrySnapshots , false , false ) ; <nl> + LOGGER . debug ( FMLHSMARKER , " Snapshot injected . " ) ; <nl> + if ( ! missingData . isEmpty ( ) ) { <nl> + LOGGER . error ( FMLHSMARKER , " Missing registry data for network connection : \ n { } " , new AdvancedLogMessageAdapter ( sb - > <nl> + missingData . forEach ( ( reg , entry ) - > sb . append ( " \ t " ) . append ( reg ) . append ( " : " ) . append ( entry ) . append ( ' \ n ' ) ) ) ) ; <nl> + } <nl> + successfulConnection . set ( missingData . isEmpty ( ) ) ; <nl> + block . countDown ( ) ; <nl> + } ) ; <nl> + LOGGER . debug ( FMLHSMARKER , " Waiting for registries to load . " ) ; <nl> + try { <nl> + block . await ( ) ; <nl> + } catch ( InterruptedException e ) { <nl> + Thread . interrupted ( ) ; <nl> + } <nl> + if ( successfulConnection . get ( ) ) { <nl> + LOGGER . debug ( FMLHSMARKER , " Registry load complete , continuing handshake . " ) ; <nl> + } else { <nl> + LOGGER . error ( FMLHSMARKER , " Failed to load registry , closing connection . " ) ; <nl> + this . manager . closeChannel ( new TextComponentString ( " Failed to synchronize registry data from server , closing connection " ) ) ; <nl> } <nl> + return successfulConnection . get ( ) ; <nl> } <nl> <nl> void handleClientAck ( final FMLHandshakeMessages . C2SAcknowledge msg , final Supplier < NetworkEvent . Context > contextSupplier ) { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java <nl> index eb2791e . . 47e61c9 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java <nl> @ @ - 101 , 14 + 101 , 20 @ @ public class NetworkEvent extends Event <nl> <nl> public static class GatherLoginPayloadsEvent extends Event { <nl> private final List < NetworkRegistry . LoginPayload > collected ; <nl> + private final boolean isLocal ; <nl> <nl> - public GatherLoginPayloadsEvent ( final List < NetworkRegistry . LoginPayload > loginPayloadList ) { <nl> + public GatherLoginPayloadsEvent ( final List < NetworkRegistry . LoginPayload > loginPayloadList , boolean isLocal ) { <nl> this . collected = loginPayloadList ; <nl> + this . isLocal = isLocal ; <nl> } <nl> <nl> public void add ( PacketBuffer buffer , ResourceLocation channelName , String context ) { <nl> collected . add ( new NetworkRegistry . LoginPayload ( buffer , channelName , context ) ) ; <nl> } <nl> + <nl> + public boolean isLocal ( ) { <nl> + return isLocal ; <nl> + } <nl> } <nl> <nl> public static class LoginPayloadEvent extends NetworkEvent { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkInstance . java b / src / main / java / net / minecraftforge / fml / network / NetworkInstance . java <nl> index 30f9dde . . 38456d1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkInstance . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkInstance . java <nl> @ @ - 96 , 8 + 96 , 8 @ @ public class NetworkInstance <nl> return this . serverAcceptedVersions . test ( clientVersion ) ; <nl> } <nl> <nl> - void dispatchGatherLogin ( final List < NetworkRegistry . LoginPayload > loginPayloadList ) { <nl> - this . networkEventBus . post ( new NetworkEvent . GatherLoginPayloadsEvent ( loginPayloadList ) ) ; <nl> + void dispatchGatherLogin ( final List < NetworkRegistry . LoginPayload > loginPayloadList , boolean isLocal ) { <nl> + this . networkEventBus . post ( new NetworkEvent . GatherLoginPayloadsEvent ( loginPayloadList , isLocal ) ) ; <nl> } <nl> <nl> void dispatchLoginPacket ( final NetworkEvent . LoginPayloadEvent loginPayloadEvent ) { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> index bec35da . . 5e7f8e3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> @ @ - 218 , 10 + 218 , 10 @ @ public class NetworkRegistry <nl> * @ return The { @ link LoginPayload } list <nl> * @ param direction the network direction for the request - only gathers for LOGIN _ TO _ CLIENT <nl> * / <nl> - static List < LoginPayload > gatherLoginPayloads ( final NetworkDirection direction ) { <nl> + static List < LoginPayload > gatherLoginPayloads ( final NetworkDirection direction , boolean isLocal ) { <nl> if ( direction ! = NetworkDirection . LOGIN _ TO _ CLIENT ) return Collections . emptyList ( ) ; <nl> List < LoginPayload > gatheredPayloads = new ArrayList < > ( ) ; <nl> - instances . values ( ) . forEach ( ni - > ni . dispatchGatherLogin ( gatheredPayloads ) ) ; <nl> + instances . values ( ) . forEach ( ni - > ni . dispatchGatherLogin ( gatheredPayloads , isLocal ) ) ; <nl> return gatheredPayloads ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java b / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java <nl> index 0309144 . . e2dbd42 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java <nl> @ @ - 39 , 7 + 39 , 7 @ @ public class SimpleChannel <nl> { <nl> private final NetworkInstance instance ; <nl> private final IndexedMessageCodec indexedCodec ; <nl> - private List < Supplier < ? extends List < ? extends Pair < String , ? > > > > loginPackets ; <nl> + private List < Function < Boolean , ? extends List < ? extends Pair < String , ? > > > > loginPackets ; <nl> <nl> public SimpleChannel ( NetworkInstance instance ) <nl> { <nl> @ @ - 52 , 7 + 52 , 7 @ @ public class SimpleChannel <nl> <nl> private void networkLoginGather ( final NetworkEvent . GatherLoginPayloadsEvent gatherEvent ) { <nl> loginPackets . forEach ( packetGenerator - > { <nl> - packetGenerator . get ( ) . forEach ( p - > { <nl> + packetGenerator . apply ( gatherEvent . isLocal ( ) ) . forEach ( p - > { <nl> PacketBuffer pb = new PacketBuffer ( Unpooled . buffer ( ) ) ; <nl> this . indexedCodec . build ( p . getRight ( ) , pb ) ; <nl> gatherEvent . add ( pb , this . instance . getChannelName ( ) , p . getLeft ( ) ) ; <nl> @ @ - 125 , 7 + 125 , 7 @ @ public class SimpleChannel <nl> private BiConsumer < MSG , Supplier < NetworkEvent . Context > > consumer ; <nl> private Function < MSG , Integer > loginIndexGetter ; <nl> private BiConsumer < MSG , Integer > loginIndexSetter ; <nl> - private Supplier < List < Pair < String , MSG > > > loginPacketGenerators ; <nl> + private Function < Boolean , List < Pair < String , MSG > > > loginPacketGenerators ; <nl> <nl> private static < MSG > MessageBuilder < MSG > forType ( final SimpleChannel channel , final Class < MSG > type , int id ) { <nl> MessageBuilder < MSG > builder = new MessageBuilder < > ( ) ; <nl> @ @ - 151 , 18 + 151 , 18 @ @ public class SimpleChannel <nl> return this ; <nl> } <nl> <nl> - public MessageBuilder < MSG > buildLoginPacketList ( Supplier < List < Pair < String , MSG > > > loginPacketGenerators ) { <nl> + public MessageBuilder < MSG > buildLoginPacketList ( Function < Boolean , List < Pair < String , MSG > > > loginPacketGenerators ) { <nl> this . loginPacketGenerators = loginPacketGenerators ; <nl> return this ; <nl> } <nl> <nl> public MessageBuilder < MSG > markAsLoginPacket ( ) <nl> { <nl> - this . loginPacketGenerators = ( ) - > { <nl> + this . loginPacketGenerators = ( isLocal ) - > { <nl> try { <nl> return Collections . singletonList ( Pair . of ( type . getName ( ) , type . newInstance ( ) ) ) ; <nl> } catch ( InstantiationException | IllegalAccessException e ) { <nl> - throw new RuntimeException ( " Inaccessible no - arg constructor for message " + type . getName ( ) , e ) ; <nl> + throw new RuntimeException ( " Inaccessible no - arg constructor for message " + type . getName ( ) , e ) ; <nl> } <nl> } ; <nl> return this ; <nl> diff - - git a / src / main / java / net / minecraftforge / registries / RegistryManager . java b / src / main / java / net / minecraftforge / registries / RegistryManager . java <nl> index cab6b67 . . 3c573aa 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / RegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / registries / RegistryManager . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package net . minecraftforge . registries ; <nl> <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> @ @ - 146 , 15 + 148 , 15 @ @ public class RegistryManager <nl> this . superTypes . clear ( ) ; <nl> } <nl> <nl> - public static List < Pair < String , FMLHandshakeMessages . S2CRegistry > > generateRegistryPackets ( ) <nl> + public static List < Pair < String , FMLHandshakeMessages . S2CRegistry > > generateRegistryPackets ( boolean isLocal ) <nl> { <nl> - return ACTIVE . takeSnapshot ( false ) . entrySet ( ) . stream ( ) . <nl> + return ! isLocal ? ACTIVE . takeSnapshot ( false ) . entrySet ( ) . stream ( ) . <nl> map ( e - > Pair . of ( " Registry " + e . getKey ( ) , new FMLHandshakeMessages . S2CRegistry ( e . getKey ( ) , e . getValue ( ) ) ) ) . <nl> - collect ( Collectors . toList ( ) ) ; <nl> + collect ( Collectors . toList ( ) ) : Collections . emptyList ( ) ; <nl> } <nl> <nl> public static List < ResourceLocation > registryNames ( ) <nl> { <nl> - return ACTIVE . registries . entrySet ( ) . stream ( ) . map ( Map . Entry : : getKey ) . collect ( Collectors . toList ( ) ) ; <nl> + return new ArrayList < > ( ACTIVE . registries . keySet ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / server / command / CommandModList . java b / src / main / java / net / minecraftforge / server / command / CommandModList . java <nl> new file mode 100644 <nl> index 0000000 . . 8ab79ca <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / command / CommandModList . java <nl> @ @ - 0 , 0 + 1 , 45 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2019 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . command ; <nl> + <nl> + import com . mojang . brigadier . builder . ArgumentBuilder ; <nl> + import net . minecraft . command . CommandSource ; <nl> + import net . minecraft . command . Commands ; <nl> + import net . minecraft . util . text . TextComponentTranslation ; <nl> + import net . minecraftforge . fml . ModList ; <nl> + import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> + <nl> + import java . util . stream . Collectors ; <nl> + <nl> + public class CommandModList { <nl> + static ArgumentBuilder < CommandSource , ? > register ( ) <nl> + { <nl> + return Commands . literal ( " mods " ) <nl> + . requires ( cs - > cs . hasPermissionLevel ( 0 ) ) / / permission <nl> + . executes ( ctx - > { <nl> + ctx . getSource ( ) . sendFeedback ( new TextComponentTranslation ( " commands . forge . mods . list " , <nl> + ModList . get ( ) . getMods ( ) . stream ( ) . map ( ModInfo : : getModId ) . collect ( Collectors . joining ( " , " ) ) ) , <nl> + true ) ; <nl> + return 0 ; <nl> + } <nl> + ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> index 9d53215 . . e3f2bad 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> + + + b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ public class ForgeCommand <nl> . then ( CommandGenerate . register ( ) ) <nl> . then ( CommandDimensions . register ( ) ) <nl> . then ( CommandSetDimension . register ( ) ) <nl> + . then ( CommandModList . register ( ) ) <nl> ) ; <nl> } <nl> } <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json <nl> index 2b67a3f . . 7ea486d 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ us . json <nl> + + + b / src / main / resources / assets / forge / lang / en _ us . json <nl> @ @ - 63 , 6 + 63 , 7 @ @ <nl> " commands . forge . setdim . invalid . nochange " : " The entity selected ( { 0 } ) is already in the dimension specified ( { 1 } ) . " , <nl> " commands . forge . tps . invalid " : " Invalid dimension { 0 } Possible values : { 1 } " , <nl> " commands . forge . tps . summary . all " : " Overall : Mean tick time : { 0 } ms . Mean TPS : { 1 } " , <nl> + " commands . forge . mods . list " : " Mod List : { 0 } " , <nl> " commands . forge . tps . summary . basic " : " Dim { 0 } : Mean tick time : { 1 } ms . Mean TPS : { 2 } " , <nl> " commands . forge . tps . summary . named " : " Dim { 0 } ( { 1 } ) : Mean tick time : { 2 } ms . Mean TPS : { 3 } " , <nl> " commands . forge . tracking . entity . enabled " : " Entity tracking enabled for % d seconds . " , <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / FMLDevServerLaunchProvider . java b / src / userdev / java / net / minecraftforge / userdev / FMLDevServerLaunchProvider . java <nl> index dfe3812 . . 73b082c 100644 <nl> - - - a / src / userdev / java / net / minecraftforge / userdev / FMLDevServerLaunchProvider . java <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / FMLDevServerLaunchProvider . java <nl> @ @ - 75 , 6 + 75 , 7 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement <nl> } ; <nl> } <nl> <nl> + @ SuppressWarnings ( " unchecked " ) <nl> @ Override <nl> public void setup ( IEnvironment environment , final Map < String , ? > arguments ) <nl> { <nl> @ @ - 82 , 6 + 83 , 8 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement <nl> final Path forgemodstoml = LibraryFinder . findJarPathFor ( " META - INF / mods . toml " , " forgemodstoml " ) ; <nl> ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) . <nl> add ( Pair . of ( forgemodstoml , Collections . singletonList ( compiledClasses ) ) ) ; <nl> + <nl> + processModClassesEnvironmentVariable ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / LaunchTesting . java b / src / userdev / java / net / minecraftforge / userdev / LaunchTesting . java <nl> index a872633 . . 622e5b1 100644 <nl> - - - a / src / userdev / java / net / minecraftforge / userdev / LaunchTesting . java <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / LaunchTesting . java <nl> @ @ - 32 , 12 + 32 , 9 @ @ import java . net . Proxy ; <nl> import java . util . Arrays ; <nl> import java . util . Locale ; <nl> import org . apache . logging . log4j . LogManager ; <nl> - import org . apache . logging . log4j . Logger ; <nl> <nl> public class LaunchTesting <nl> { <nl> - private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> - <nl> public static void main ( String . . . args ) throws InterruptedException <nl> { <nl> final String markerselection = System . getProperty ( " forge . logging . markers " , " " ) ; <nl> @ @ - 130 , 7 + 127 , 7 @ @ public class LaunchTesting <nl> try { <nl> auth . logIn ( ) ; <nl> } catch ( AuthenticationException e ) { <nl> - LOGGER . error ( " Login failed ! " , e ) ; <nl> + LogManager . getLogger ( ) . error ( " Login failed ! " , e ) ; <nl> throw new RuntimeException ( e ) ; / / don ' t set other variables <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfig . java b / src / main / java / net / minecraftforge / common / ForgeConfig . java <nl> index 5e58eab . . 6f632ee 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeConfig . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeConfig . java <nl> @ @ - 22 , 8 + 22 , 6 @ @ package net . minecraftforge . common ; <nl> import static net . minecraftforge . fml . Logging . CORE ; <nl> import static net . minecraftforge . fml . loading . LogMarkers . FORGEMOD ; <nl> <nl> - import com . electronwill . nightconfig . core . CommentedConfig ; <nl> - import com . google . common . collect . Lists ; <nl> import net . minecraftforge . eventbus . api . SubscribeEvent ; <nl> import net . minecraftforge . fml . config . ModConfig ; <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> @ @ - 33 , 9 + 31 , 6 @ @ import net . minecraftforge . common . ForgeConfigSpec . BooleanValue ; <nl> import net . minecraftforge . common . ForgeConfigSpec . DoubleValue ; <nl> import net . minecraftforge . common . ForgeConfigSpec . IntValue ; <nl> <nl> - import javax . annotation . Nullable ; <nl> - import java . util . List ; <nl> - <nl> public class ForgeConfig <nl> { <nl> public static class Server { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> index ab6cc4c . . cadfc27 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> @ @ - 32 , 13 + 32 , 10 @ @ import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; <nl> import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; <nl> - import net . minecraftforge . fml . loading . FMLPaths ; <nl> import net . minecraftforge . server . command . ForgeCommand ; <nl> import net . minecraftforge . versions . forge . ForgeVersion ; <nl> import net . minecraftforge . versions . mcp . MCPVersion ; <nl> <nl> - import java . nio . file . Path ; <nl> - <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> @ @ - 55 , 9 + 52 , 6 @ @ import net . minecraftforge . fml . common . gameevent . PlayerEvent ; <nl> import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> - import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> - import com . electronwill . nightconfig . core . io . WritingMode ; <nl> - <nl> @ Mod ( " forge " ) <nl> public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> index 1b9d087 . . 22dd276 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> @ @ - 133 , 6 + 133 , 7 @ @ public class ModLoader <nl> CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; <nl> GameData . fireRegistryEvents ( rl - > true , LifecycleEventProvider . LOAD _ REGISTRIES , this : : dispatchAndHandleError ) ; <nl> DistExecutor . runWhenOn ( Dist . CLIENT , ( ) - > ( ) - > ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . CLIENT , FMLPaths . CONFIGDIR . get ( ) ) ) ; <nl> + ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . COMMON , FMLPaths . CONFIGDIR . get ( ) ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . SETUP ) ; <nl> DistExecutor . runWhenOn ( Dist . CLIENT , ModLoader : : fireClientEvents ) ; <nl> dispatchAndHandleError ( LifecycleEventProvider . SIDED _ SETUP ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> index bbe2688 . . 47d0186 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> + + + b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java <nl> @ @ - 20 , 18 + 20 , 31 @ @ <nl> package net . minecraftforge . fml . config ; <nl> <nl> import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> + import com . electronwill . nightconfig . toml . TomlFormat ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraftforge . fml . network . FMLHandshakeMessages ; <nl> + import net . minecraftforge . fml . network . NetworkEvent ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . util . Collections ; <nl> import java . util . EnumMap ; <nl> import java . util . LinkedHashSet ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Optional ; <nl> import java . util . Set ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> - import java . util . concurrent . ConcurrentSkipListSet ; <nl> + import java . util . function . Supplier ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . rethrowFunction ; <nl> <nl> public class ConfigTracker { <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> @ @ - 44 , 6 + 57 , 7 @ @ public class ConfigTracker { <nl> this . fileMap = new ConcurrentHashMap < > ( ) ; <nl> this . configSets = new EnumMap < > ( ModConfig . Type . class ) ; <nl> this . configSets . put ( ModConfig . Type . CLIENT , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; <nl> + this . configSets . put ( ModConfig . Type . COMMON , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; <nl> / / this . configSets . put ( ModConfig . Type . PLAYER , new ConcurrentSkipListSet < > ( ) ) ; <nl> this . configSets . put ( ModConfig . Type . SERVER , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; <nl> } <nl> @ @ - 63 , 11 + 77 , 25 @ @ public class ConfigTracker { <nl> this . configSets . get ( type ) . forEach ( config - > openConfig ( config , configBasePath ) ) ; <nl> } <nl> <nl> + public List < Pair < String , FMLHandshakeMessages . S2CConfigData > > syncConfigs ( ) { <nl> + final Map < String , byte [ ] > configData = configSets . get ( ModConfig . Type . SERVER ) . stream ( ) . collect ( Collectors . toMap ( ModConfig : : getFileName , rethrowFunction ( mc - > Files . readAllBytes ( mc . getFullPath ( ) ) ) ) ) ; <nl> + return configData . entrySet ( ) . stream ( ) . map ( e - > Pair . of ( " Config " + e . getKey ( ) , new FMLHandshakeMessages . S2CConfigData ( e . getKey ( ) , e . getValue ( ) ) ) ) . collect ( Collectors . toList ( ) ) ; <nl> + } <nl> + <nl> private void openConfig ( final ModConfig config , final Path configBasePath ) { <nl> LOGGER . debug ( CONFIG , " Loading config file type { } at { } for { } " , config . getType ( ) , config . getFileName ( ) , config . getModId ( ) ) ; <nl> final CommentedFileConfig configData = config . getHandler ( ) . reader ( configBasePath ) . apply ( config ) ; <nl> config . setConfigData ( configData ) ; <nl> config . fireEvent ( new ModConfig . Loading ( config ) ) ; <nl> - config . getConfigData ( ) . save ( ) ; <nl> + config . save ( ) ; <nl> + } <nl> + <nl> + public void receiveSyncedConfig ( final FMLHandshakeMessages . S2CConfigData s2CConfigData , final Supplier < NetworkEvent . Context > contextSupplier ) { <nl> + if ( ! Minecraft . getInstance ( ) . isIntegratedServerRunning ( ) ) { <nl> + Optional . ofNullable ( fileMap . get ( s2CConfigData . getFileName ( ) ) ) . ifPresent ( mc - > { <nl> + mc . setConfigData ( TomlFormat . instance ( ) . createParser ( ) . parse ( new ByteArrayInputStream ( s2CConfigData . getBytes ( ) ) ) ) ; <nl> + mc . fireEvent ( new ModConfig . ConfigReloading ( mc ) ) ; <nl> + } ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / config / ModConfig . java b / src / main / java / net / minecraftforge / fml / config / ModConfig . java <nl> index 3c4ef9e . . 2e90cdd 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / config / ModConfig . java <nl> + + + b / src / main / java / net / minecraftforge / fml / config / ModConfig . java <nl> @ @ - 19 , 12 + 19 , 19 @ @ <nl> <nl> package net . minecraftforge . fml . config ; <nl> <nl> + import com . electronwill . nightconfig . core . CommentedConfig ; <nl> import com . electronwill . nightconfig . core . file . CommentedFileConfig ; <nl> import net . minecraftforge . common . ForgeConfigSpec ; <nl> import net . minecraftforge . eventbus . api . Event ; <nl> import net . minecraftforge . fml . ModContainer ; <nl> import net . minecraftforge . fml . loading . StringUtils ; <nl> <nl> + import java . nio . file . Path ; <nl> + import java . util . concurrent . Callable ; <nl> + import java . util . function . Consumer ; <nl> + <nl> + import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . uncheck ; <nl> + <nl> public class ModConfig <nl> { <nl> private final Type type ; <nl> @ @ - 32 , 7 + 39 , 8 @ @ public class ModConfig <nl> private final String fileName ; <nl> private final ModContainer container ; <nl> private final ConfigFileTypeHandler configHandler ; <nl> - private CommentedFileConfig configData ; <nl> + private CommentedConfig configData ; <nl> + private Callable < Void > saveHandler ; <nl> <nl> public ModConfig ( final Type type , final ForgeConfigSpec spec , final ModContainer container , final String fileName ) { <nl> this . type = type ; <nl> @ @ - 71 , 11 + 79 , 11 @ @ public class ModConfig <nl> return container . getModId ( ) ; <nl> } <nl> <nl> - public CommentedFileConfig getConfigData ( ) { <nl> + public CommentedConfig getConfigData ( ) { <nl> return this . configData ; <nl> } <nl> <nl> - void setConfigData ( final CommentedFileConfig configData ) { <nl> + void setConfigData ( final CommentedConfig configData ) { <nl> this . configData = configData ; <nl> this . spec . setConfig ( this . configData ) ; <nl> } <nl> @ @ - 84 , 6 + 92 , 14 @ @ public class ModConfig <nl> this . container . dispatchConfigEvent ( configEvent ) ; <nl> } <nl> <nl> + public void save ( ) { <nl> + ( ( CommentedFileConfig ) this . configData ) . save ( ) ; <nl> + } <nl> + <nl> + public Path getFullPath ( ) { <nl> + return ( ( CommentedFileConfig ) this . configData ) . getNioPath ( ) ; <nl> + } <nl> + <nl> public enum Type { <nl> / * * <nl> * Common mod config for configuration that needs to be loaded on both environments . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> index 1e13149 . . 0c39926 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . network . NetHandlerLoginServer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . text . TextComponentString ; <nl> + import net . minecraftforge . fml . config . ConfigTracker ; <nl> import net . minecraftforge . fml . network . simple . SimpleChannel ; <nl> import net . minecraftforge . fml . util . ThreeConsumer ; <nl> import net . minecraftforge . registries . RegistryManager ; <nl> @ @ - 108 , 6 + 109 , 13 @ @ public class FMLHandshakeHandler { <nl> buildLoginPacketList ( RegistryManager : : generateRegistryPackets ) . <nl> consumer ( biConsumerFor ( FMLHandshakeHandler : : handleRegistryMessage ) ) . <nl> add ( ) ; <nl> + channel . messageBuilder ( FMLHandshakeMessages . S2CConfigData . class , 4 ) . <nl> + loginIndex ( FMLHandshakeMessages . LoginIndexedMessage : : getLoginIndex , FMLHandshakeMessages . LoginIndexedMessage : : setLoginIndex ) . <nl> + decoder ( FMLHandshakeMessages . S2CConfigData : : decode ) . <nl> + encoder ( FMLHandshakeMessages . S2CConfigData : : encode ) . <nl> + buildLoginPacketList ( ConfigTracker . INSTANCE : : syncConfigs ) . <nl> + consumer ( biConsumerFor ( FMLHandshakeHandler : : handleConfigSync ) ) . <nl> + add ( ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 172 , 7 + 180 , 7 @ @ public class FMLHandshakeHandler { <nl> { <nl> this . direction = side ; <nl> this . manager = networkManager ; <nl> - this . messageList = NetworkRegistry . gatherLoginPayloads ( ) ; <nl> + this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction ) ; <nl> LOGGER . debug ( FMLHSMARKER , " Starting new modded network connection . Found { } messages to dispatch . " , this . messageList . size ( ) ) ; <nl> } <nl> <nl> @ @ - 224 , 6 + 232 , 13 @ @ public class FMLHandshakeHandler { <nl> contextSupplier . get ( ) . setPacketHandled ( true ) ; <nl> } <nl> <nl> + private void handleConfigSync ( final FMLHandshakeMessages . S2CConfigData msg , final Supplier < NetworkEvent . Context > contextSupplier ) { <nl> + LOGGER . debug ( FMLHSMARKER , " Received config sync from server " ) ; <nl> + ConfigTracker . INSTANCE . receiveSyncedConfig ( msg , contextSupplier ) ; <nl> + contextSupplier . get ( ) . setPacketHandled ( true ) ; <nl> + final FMLHandshakeMessages . C2SAcknowledge reply = new FMLHandshakeMessages . C2SAcknowledge ( ) ; <nl> + channel . reply ( reply , contextSupplier . get ( ) ) ; <nl> + } <nl> / * * <nl> * FML will send packets , from Server to Client , from the messages queue until the queue is drained . Each message <nl> * will be indexed , and placed into the " pending acknowledgement " queue . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java <nl> index af851aa . . 1c944b5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java <nl> @ @ - 119 , 7 + 119 , 6 @ @ public class FMLHandshakeMessages <nl> } <nl> <nl> public static class S2CRegistry extends LoginIndexedMessage { <nl> - <nl> public S2CRegistry ( final ResourceLocation key , final ForgeRegistry < ? extends IForgeRegistryEntry < ? > > registry ) { <nl> } <nl> <nl> @ @ - 133 , 4 + 132 , 32 @ @ public class FMLHandshakeMessages <nl> return new S2CRegistry ( ) ; <nl> } <nl> } <nl> + <nl> + <nl> + public static class S2CConfigData extends LoginIndexedMessage { <nl> + private final String fileName ; <nl> + private final byte [ ] fileData ; <nl> + <nl> + public S2CConfigData ( final String configFileName , final byte [ ] configFileData ) { <nl> + this . fileName = configFileName ; <nl> + this . fileData = configFileData ; <nl> + } <nl> + <nl> + void encode ( final PacketBuffer buffer ) { <nl> + buffer . writeString ( this . fileName ) ; <nl> + buffer . writeByteArray ( this . fileData ) ; <nl> + } <nl> + <nl> + public static S2CConfigData decode ( final PacketBuffer buffer ) { <nl> + return new S2CConfigData ( buffer . readString ( 128 ) , buffer . readByteArray ( ) ) ; <nl> + } <nl> + <nl> + public String getFileName ( ) { <nl> + return fileName ; <nl> + } <nl> + <nl> + public byte [ ] getBytes ( ) { <nl> + return fileData ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java <nl> index 9d8769d . . 539cb43 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java <nl> @ @ - 20 , 15 + 20 , 11 @ @ <nl> package net . minecraftforge . fml . network ; <nl> <nl> import io . netty . util . AttributeKey ; <nl> - import net . minecraft . network . NetworkManager ; <nl> - import org . apache . logging . log4j . LogManager ; <nl> - import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> public class FMLNetworking <nl> { <nl> - private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> static final Marker NETWORK = MarkerManager . getMarker ( " FMLNETWORK " ) ; <nl> static final AttributeKey < String > FML _ MARKER = AttributeKey . valueOf ( " fml : marker " ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> index bc6685e . . b854727 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> @ @ - 79 , 6 + 79 , 7 @ @ public class NetworkHooks <nl> <nl> public static void registerClientLoginChannel ( NetworkManager manager ) <nl> { <nl> + if ( manager = = null ) return ; <nl> manager . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( NETVERSION ) ; <nl> FMLHandshakeHandler . registerHandshake ( manager , NetworkDirection . LOGIN _ TO _ SERVER ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> index 41a60c4 . . 3210503 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 204 , 8 + 205 , 10 @ @ public class NetworkRegistry <nl> * Dispatches { @ link net . minecraftforge . fml . network . NetworkEvent . GatherLoginPayloadsEvent } to each { @ link NetworkInstance } . <nl> * <nl> * @ return The { @ link LoginPayload } list <nl> + * @ param direction the network direction for the request - only gathers for LOGIN _ TO _ CLIENT <nl> * / <nl> - static List < LoginPayload > gatherLoginPayloads ( ) { <nl> + static List < LoginPayload > gatherLoginPayloads ( final NetworkDirection direction ) { <nl> + if ( direction ! = NetworkDirection . LOGIN _ TO _ CLIENT ) return Collections . emptyList ( ) ; <nl> List < LoginPayload > gatheredPayloads = new ArrayList < > ( ) ; <nl> instances . values ( ) . forEach ( ni - > ni . dispatchGatherLogin ( gatheredPayloads ) ) ; <nl> return gatheredPayloads ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> index 021c001 . . 0a0bbd3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java <nl> @ @ - 36 , 7 + 36 , 6 @ @ import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; <nl> - import net . minecraftforge . fml . loading . FMLPaths ; <nl> import net . minecraftforge . fml . loading . FileUtils ; <nl> import net . minecraftforge . fml . network . NetworkHooks ; <nl> import net . minecraftforge . fml . packs . ResourcePackLoader ; <nl> @ @ - 46 , 7 + 45 , 6 @ @ import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> import java . nio . file . Path ; <nl> - import java . nio . file . Paths ; <nl> import java . util . List ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . atomic . AtomicBoolean ; <nl> @ @ - 133 , 6 + 131 , 8 @ @ public class ServerLifecycleHooks <nl> return false ; <nl> } <nl> <nl> + if ( packet . getRequestedState ( ) = = EnumConnectionState . STATUS ) return true ; <nl> + <nl> NetworkHooks . registerServerLoginChannel ( manager , packet ) ; <nl> return true ; <nl>

TEST DIFF:
diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 index d624df4 . . 5340c54 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 @ @ - 36 , 6 + 36 , 7 @ @ import java . util . Map ; 
 import java . util . ServiceLoader ; 
 import java . util . stream . Collectors ; 
 
 + import static net . minecraftforge . fml . loading . LogMarkers . CORE ; 
 import static net . minecraftforge . fml . loading . LogMarkers . SCAN ; 
 
 
 @ @ - 48 , 7 + 49 , 7 @ @ public class ModDiscoverer { 
 locators = ServiceLoader . load ( IModLocator . class ) ; 
 locatorList = ServiceLoaderStreamUtils . toList ( this . locators ) ; 
 locatorList . forEach ( l - > l . initArguments ( arguments ) ) ; 
 - LOGGER . debug ( SCAN , " Found Mod Locators : { } " , ( ) - > locatorList . stream ( ) . map ( iModLocator - > " ( " + iModLocator . name ( ) + " : " + iModLocator . getClass ( ) . getPackage ( ) . getImplementationVersion ( ) + " ) " ) . collect ( Collectors . joining ( " , " ) ) ) ; 
 + LOGGER . debug ( CORE , " Found Mod Locators : { } " , ( ) - > locatorList . stream ( ) . map ( iModLocator - > " ( " + iModLocator . name ( ) + " : " + iModLocator . getClass ( ) . getPackage ( ) . getImplementationVersion ( ) + " ) " ) . collect ( Collectors . joining ( " , " ) ) ) ; 
 } 
 
 ModDiscoverer ( List < IModLocator > locatorList ) { 
 diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 index ed0dec6 . . 089a2d2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 + + + b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 @ @ - 79 , 7 + 79 , 7 @ @ public class ConfigTracker { 
 this . configSets . get ( type ) . forEach ( config - > openConfig ( config , configBasePath ) ) ; 
 } 
 
 - public List < Pair < String , FMLHandshakeMessages . S2CConfigData > > syncConfigs ( ) { 
 + public List < Pair < String , FMLHandshakeMessages . S2CConfigData > > syncConfigs ( boolean isLocal ) { 
 final Map < String , byte [ ] > configData = configSets . get ( ModConfig . Type . SERVER ) . stream ( ) . collect ( Collectors . toMap ( ModConfig : : getFileName , mc - > { / / TODO : Test cpw ' s LambdaExceptionUtils on Oracle javac . 
 try { 
 return Files . readAllBytes ( mc . getFullPath ( ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / ConnectionType . java b / src / main / java / net / minecraftforge / fml / network / ConnectionType . java 
 index c437908 . . 1034e55 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / ConnectionType . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / ConnectionType . java 
 @ @ - 30 , 6 + 30 , 7 @ @ public enum ConnectionType 
 ConnectionType ( Function < String , Integer > versionExtractor ) { 
 this . versionExtractor = versionExtractor ; 
 } 
 + 
 public static ConnectionType forVersionFlag ( String vers ) 
 { 
 return vers . startsWith ( FMLNetworkConstants . FMLNETMARKER ) ? MODDED : VANILLA ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 index 7a8cb91 . . b3ee0f0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 @ @ - 19 , 14 + 19 , 17 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 + import com . google . common . collect . Multimap ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . network . NetHandlerLoginServer ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . text . TextComponentString ; 
 import net . minecraftforge . fml . config . ConfigTracker ; 
 + import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; 
 import net . minecraftforge . fml . network . simple . SimpleChannel ; 
 import net . minecraftforge . registries . ForgeRegistry ; 
 + import net . minecraftforge . registries . GameData ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . Marker ; 
 @ @ - 40 , 6 + 43 , 8 @ @ import java . util . HashSet ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 + import java . util . concurrent . CountDownLatch ; 
 + import java . util . concurrent . atomic . AtomicBoolean ; 
 import java . util . function . Supplier ; 
 
 import static net . minecraftforge . registries . ForgeRegistry . REGISTRIES ; 
 @ @ - 114 , 11 + 119 , 14 @ @ public class FMLHandshakeHandler { 
 { 
 this . direction = side ; 
 this . manager = networkManager ; 
 - if ( NetworkHooks . getConnectionType ( ( ) - > this . manager ) = = ConnectionType . VANILLA ) { 
 + if ( networkManager . isLocalChannel ( ) ) { 
 + this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction , true ) ; 
 + LOGGER . debug ( FMLHSMARKER , " Starting local connection . " ) ; 
 + } else if ( NetworkHooks . getConnectionType ( ( ) - > this . manager ) = = ConnectionType . VANILLA ) { 
 this . messageList = Collections . emptyList ( ) ; 
 LOGGER . debug ( FMLHSMARKER , " Starting new vanilla network connection . " ) ; 
 } else { 
 - this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction ) ; 
 + this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction , false ) ; 
 LOGGER . debug ( FMLHSMARKER , " Starting new modded network connection . Found { } messages to dispatch . " , this . messageList . size ( ) ) ; 
 } 
 } 
 @ @ - 170 , 13 + 178 , 48 @ @ public class FMLHandshakeHandler { 
 LOGGER . debug ( FMLHSMARKER , " Received registry packet for { } " , registryPacket . getRegistryName ( ) ) ; 
 this . registriesToReceive . remove ( registryPacket . getRegistryName ( ) ) ; 
 this . registrySnapshots . put ( registryPacket . getRegistryName ( ) , registryPacket . getSnapshot ( ) ) ; 
 - contextSupplier . get ( ) . setPacketHandled ( true ) ; 
 - FMLNetworkConstants . handshakeChannel . reply ( new FMLHandshakeMessages . C2SAcknowledge ( ) , contextSupplier . get ( ) ) ; 
 
 + boolean continueHandshake = true ; 
 if ( this . registriesToReceive . isEmpty ( ) ) { 
 - / / TODO : @ cpw injectSnapshot Needs to be on the world thread . And maybe block the network / login so we don ' t get world data before we finish ? 
 - registrySnapshots = null ; 
 + continueHandshake = handleRegistryLoading ( contextSupplier ) ; 
 + } 
 + / / The handshake reply isn ' t sent until we have processed the message 
 + contextSupplier . get ( ) . setPacketHandled ( true ) ; 
 + if ( ! continueHandshake ) { 
 + LOGGER . error ( FMLHSMARKER , " Connection closed , not continuing handshake " ) ; 
 + } else { 
 + FMLNetworkConstants . handshakeChannel . reply ( new FMLHandshakeMessages . C2SAcknowledge ( ) , contextSupplier . get ( ) ) ; 
 + } 
 + } 
 + 
 + private boolean handleRegistryLoading ( final Supplier < NetworkEvent . Context > contextSupplier ) { 
 + / / We use a countdown latch to suspend the network thread pending the client thread processing the registry data 
 + AtomicBoolean successfulConnection = new AtomicBoolean ( false ) ; 
 + CountDownLatch block = new CountDownLatch ( 1 ) ; 
 + contextSupplier . get ( ) . enqueueWork ( ( ) - > { 
 + LOGGER . debug ( FMLHSMARKER , " Injecting registry snapshot from server . " ) ; 
 + final Multimap < ResourceLocation , ResourceLocation > missingData = GameData . injectSnapshot ( registrySnapshots , false , false ) ; 
 + LOGGER . debug ( FMLHSMARKER , " Snapshot injected . " ) ; 
 + if ( ! missingData . isEmpty ( ) ) { 
 + LOGGER . error ( FMLHSMARKER , " Missing registry data for network connection : \ n { } " , new AdvancedLogMessageAdapter ( sb - > 
 + missingData . forEach ( ( reg , entry ) - > sb . append ( " \ t " ) . append ( reg ) . append ( " : " ) . append ( entry ) . append ( ' \ n ' ) ) ) ) ; 
 + } 
 + successfulConnection . set ( missingData . isEmpty ( ) ) ; 
 + block . countDown ( ) ; 
 + } ) ; 
 + LOGGER . debug ( FMLHSMARKER , " Waiting for registries to load . " ) ; 
 + try { 
 + block . await ( ) ; 
 + } catch ( InterruptedException e ) { 
 + Thread . interrupted ( ) ; 
 + } 
 + if ( successfulConnection . get ( ) ) { 
 + LOGGER . debug ( FMLHSMARKER , " Registry load complete , continuing handshake . " ) ; 
 + } else { 
 + LOGGER . error ( FMLHSMARKER , " Failed to load registry , closing connection . " ) ; 
 + this . manager . closeChannel ( new TextComponentString ( " Failed to synchronize registry data from server , closing connection " ) ) ; 
 } 
 + return successfulConnection . get ( ) ; 
 } 
 
 void handleClientAck ( final FMLHandshakeMessages . C2SAcknowledge msg , final Supplier < NetworkEvent . Context > contextSupplier ) { 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java 
 index eb2791e . . 47e61c9 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java 
 @ @ - 101 , 14 + 101 , 20 @ @ public class NetworkEvent extends Event 
 
 public static class GatherLoginPayloadsEvent extends Event { 
 private final List < NetworkRegistry . LoginPayload > collected ; 
 + private final boolean isLocal ; 
 
 - public GatherLoginPayloadsEvent ( final List < NetworkRegistry . LoginPayload > loginPayloadList ) { 
 + public GatherLoginPayloadsEvent ( final List < NetworkRegistry . LoginPayload > loginPayloadList , boolean isLocal ) { 
 this . collected = loginPayloadList ; 
 + this . isLocal = isLocal ; 
 } 
 
 public void add ( PacketBuffer buffer , ResourceLocation channelName , String context ) { 
 collected . add ( new NetworkRegistry . LoginPayload ( buffer , channelName , context ) ) ; 
 } 
 + 
 + public boolean isLocal ( ) { 
 + return isLocal ; 
 + } 
 } 
 
 public static class LoginPayloadEvent extends NetworkEvent { 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkInstance . java b / src / main / java / net / minecraftforge / fml / network / NetworkInstance . java 
 index 30f9dde . . 38456d1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkInstance . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkInstance . java 
 @ @ - 96 , 8 + 96 , 8 @ @ public class NetworkInstance 
 return this . serverAcceptedVersions . test ( clientVersion ) ; 
 } 
 
 - void dispatchGatherLogin ( final List < NetworkRegistry . LoginPayload > loginPayloadList ) { 
 - this . networkEventBus . post ( new NetworkEvent . GatherLoginPayloadsEvent ( loginPayloadList ) ) ; 
 + void dispatchGatherLogin ( final List < NetworkRegistry . LoginPayload > loginPayloadList , boolean isLocal ) { 
 + this . networkEventBus . post ( new NetworkEvent . GatherLoginPayloadsEvent ( loginPayloadList , isLocal ) ) ; 
 } 
 
 void dispatchLoginPacket ( final NetworkEvent . LoginPayloadEvent loginPayloadEvent ) { 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 index bec35da . . 5e7f8e3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 @ @ - 218 , 10 + 218 , 10 @ @ public class NetworkRegistry 
 * @ return The { @ link LoginPayload } list 
 * @ param direction the network direction for the request - only gathers for LOGIN _ TO _ CLIENT 
 * / 
 - static List < LoginPayload > gatherLoginPayloads ( final NetworkDirection direction ) { 
 + static List < LoginPayload > gatherLoginPayloads ( final NetworkDirection direction , boolean isLocal ) { 
 if ( direction ! = NetworkDirection . LOGIN _ TO _ CLIENT ) return Collections . emptyList ( ) ; 
 List < LoginPayload > gatheredPayloads = new ArrayList < > ( ) ; 
 - instances . values ( ) . forEach ( ni - > ni . dispatchGatherLogin ( gatheredPayloads ) ) ; 
 + instances . values ( ) . forEach ( ni - > ni . dispatchGatherLogin ( gatheredPayloads , isLocal ) ) ; 
 return gatheredPayloads ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java b / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java 
 index 0309144 . . e2dbd42 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / simple / SimpleChannel . java 
 @ @ - 39 , 7 + 39 , 7 @ @ public class SimpleChannel 
 { 
 private final NetworkInstance instance ; 
 private final IndexedMessageCodec indexedCodec ; 
 - private List < Supplier < ? extends List < ? extends Pair < String , ? > > > > loginPackets ; 
 + private List < Function < Boolean , ? extends List < ? extends Pair < String , ? > > > > loginPackets ; 
 
 public SimpleChannel ( NetworkInstance instance ) 
 { 
 @ @ - 52 , 7 + 52 , 7 @ @ public class SimpleChannel 
 
 private void networkLoginGather ( final NetworkEvent . GatherLoginPayloadsEvent gatherEvent ) { 
 loginPackets . forEach ( packetGenerator - > { 
 - packetGenerator . get ( ) . forEach ( p - > { 
 + packetGenerator . apply ( gatherEvent . isLocal ( ) ) . forEach ( p - > { 
 PacketBuffer pb = new PacketBuffer ( Unpooled . buffer ( ) ) ; 
 this . indexedCodec . build ( p . getRight ( ) , pb ) ; 
 gatherEvent . add ( pb , this . instance . getChannelName ( ) , p . getLeft ( ) ) ; 
 @ @ - 125 , 7 + 125 , 7 @ @ public class SimpleChannel 
 private BiConsumer < MSG , Supplier < NetworkEvent . Context > > consumer ; 
 private Function < MSG , Integer > loginIndexGetter ; 
 private BiConsumer < MSG , Integer > loginIndexSetter ; 
 - private Supplier < List < Pair < String , MSG > > > loginPacketGenerators ; 
 + private Function < Boolean , List < Pair < String , MSG > > > loginPacketGenerators ; 
 
 private static < MSG > MessageBuilder < MSG > forType ( final SimpleChannel channel , final Class < MSG > type , int id ) { 
 MessageBuilder < MSG > builder = new MessageBuilder < > ( ) ; 
 @ @ - 151 , 18 + 151 , 18 @ @ public class SimpleChannel 
 return this ; 
 } 
 
 - public MessageBuilder < MSG > buildLoginPacketList ( Supplier < List < Pair < String , MSG > > > loginPacketGenerators ) { 
 + public MessageBuilder < MSG > buildLoginPacketList ( Function < Boolean , List < Pair < String , MSG > > > loginPacketGenerators ) { 
 this . loginPacketGenerators = loginPacketGenerators ; 
 return this ; 
 } 
 
 public MessageBuilder < MSG > markAsLoginPacket ( ) 
 { 
 - this . loginPacketGenerators = ( ) - > { 
 + this . loginPacketGenerators = ( isLocal ) - > { 
 try { 
 return Collections . singletonList ( Pair . of ( type . getName ( ) , type . newInstance ( ) ) ) ; 
 } catch ( InstantiationException | IllegalAccessException e ) { 
 - throw new RuntimeException ( " Inaccessible no - arg constructor for message " + type . getName ( ) , e ) ; 
 + throw new RuntimeException ( " Inaccessible no - arg constructor for message " + type . getName ( ) , e ) ; 
 } 
 } ; 
 return this ; 
 diff - - git a / src / main / java / net / minecraftforge / registries / RegistryManager . java b / src / main / java / net / minecraftforge / registries / RegistryManager . java 
 index cab6b67 . . 3c573aa 100644 
 - - - a / src / main / java / net / minecraftforge / registries / RegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / registries / RegistryManager . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package net . minecraftforge . registries ; 
 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 @ @ - 146 , 15 + 148 , 15 @ @ public class RegistryManager 
 this . superTypes . clear ( ) ; 
 } 
 
 - public static List < Pair < String , FMLHandshakeMessages . S2CRegistry > > generateRegistryPackets ( ) 
 + public static List < Pair < String , FMLHandshakeMessages . S2CRegistry > > generateRegistryPackets ( boolean isLocal ) 
 { 
 - return ACTIVE . takeSnapshot ( false ) . entrySet ( ) . stream ( ) . 
 + return ! isLocal ? ACTIVE . takeSnapshot ( false ) . entrySet ( ) . stream ( ) . 
 map ( e - > Pair . of ( " Registry " + e . getKey ( ) , new FMLHandshakeMessages . S2CRegistry ( e . getKey ( ) , e . getValue ( ) ) ) ) . 
 - collect ( Collectors . toList ( ) ) ; 
 + collect ( Collectors . toList ( ) ) : Collections . emptyList ( ) ; 
 } 
 
 public static List < ResourceLocation > registryNames ( ) 
 { 
 - return ACTIVE . registries . entrySet ( ) . stream ( ) . map ( Map . Entry : : getKey ) . collect ( Collectors . toList ( ) ) ; 
 + return new ArrayList < > ( ACTIVE . registries . keySet ( ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / server / command / CommandModList . java b / src / main / java / net / minecraftforge / server / command / CommandModList . java 
 new file mode 100644 
 index 0000000 . . 8ab79ca 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / command / CommandModList . java 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2019 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . command ; 
 + 
 + import com . mojang . brigadier . builder . ArgumentBuilder ; 
 + import net . minecraft . command . CommandSource ; 
 + import net . minecraft . command . Commands ; 
 + import net . minecraft . util . text . TextComponentTranslation ; 
 + import net . minecraftforge . fml . ModList ; 
 + import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 + 
 + import java . util . stream . Collectors ; 
 + 
 + public class CommandModList { 
 + static ArgumentBuilder < CommandSource , ? > register ( ) 
 + { 
 + return Commands . literal ( " mods " ) 
 + . requires ( cs - > cs . hasPermissionLevel ( 0 ) ) / / permission 
 + . executes ( ctx - > { 
 + ctx . getSource ( ) . sendFeedback ( new TextComponentTranslation ( " commands . forge . mods . list " , 
 + ModList . get ( ) . getMods ( ) . stream ( ) . map ( ModInfo : : getModId ) . collect ( Collectors . joining ( " , " ) ) ) , 
 + true ) ; 
 + return 0 ; 
 + } 
 + ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 index 9d53215 . . e3f2bad 100644 
 - - - a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 + + + b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 @ @ - 35 , 6 + 35 , 7 @ @ public class ForgeCommand 
 . then ( CommandGenerate . register ( ) ) 
 . then ( CommandDimensions . register ( ) ) 
 . then ( CommandSetDimension . register ( ) ) 
 + . then ( CommandModList . register ( ) ) 
 ) ; 
 } 
 } 
 diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json 
 index 2b67a3f . . 7ea486d 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ us . json 
 + + + b / src / main / resources / assets / forge / lang / en _ us . json 
 @ @ - 63 , 6 + 63 , 7 @ @ 
 " commands . forge . setdim . invalid . nochange " : " The entity selected ( { 0 } ) is already in the dimension specified ( { 1 } ) . " , 
 " commands . forge . tps . invalid " : " Invalid dimension { 0 } Possible values : { 1 } " , 
 " commands . forge . tps . summary . all " : " Overall : Mean tick time : { 0 } ms . Mean TPS : { 1 } " , 
 + " commands . forge . mods . list " : " Mod List : { 0 } " , 
 " commands . forge . tps . summary . basic " : " Dim { 0 } : Mean tick time : { 1 } ms . Mean TPS : { 2 } " , 
 " commands . forge . tps . summary . named " : " Dim { 0 } ( { 1 } ) : Mean tick time : { 2 } ms . Mean TPS : { 3 } " , 
 " commands . forge . tracking . entity . enabled " : " Entity tracking enabled for % d seconds . " , 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / FMLDevServerLaunchProvider . java b / src / userdev / java / net / minecraftforge / userdev / FMLDevServerLaunchProvider . java 
 index dfe3812 . . 73b082c 100644 
 - - - a / src / userdev / java / net / minecraftforge / userdev / FMLDevServerLaunchProvider . java 
 + + + b / src / userdev / java / net / minecraftforge / userdev / FMLDevServerLaunchProvider . java 
 @ @ - 75 , 6 + 75 , 7 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement 
 } ; 
 } 
 
 + @ SuppressWarnings ( " unchecked " ) 
 @ Override 
 public void setup ( IEnvironment environment , final Map < String , ? > arguments ) 
 { 
 @ @ - 82 , 6 + 83 , 8 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement 
 final Path forgemodstoml = LibraryFinder . findJarPathFor ( " META - INF / mods . toml " , " forgemodstoml " ) ; 
 ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) . computeIfAbsent ( " explodedTargets " , a - > new ArrayList < > ( ) ) . 
 add ( Pair . of ( forgemodstoml , Collections . singletonList ( compiledClasses ) ) ) ; 
 + 
 + processModClassesEnvironmentVariable ( ( Map < String , List < Pair < Path , List < Path > > > > ) arguments ) ; 
 } 
 
 @ Override 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / LaunchTesting . java b / src / userdev / java / net / minecraftforge / userdev / LaunchTesting . java 
 index a872633 . . 622e5b1 100644 
 - - - a / src / userdev / java / net / minecraftforge / userdev / LaunchTesting . java 
 + + + b / src / userdev / java / net / minecraftforge / userdev / LaunchTesting . java 
 @ @ - 32 , 12 + 32 , 9 @ @ import java . net . Proxy ; 
 import java . util . Arrays ; 
 import java . util . Locale ; 
 import org . apache . logging . log4j . LogManager ; 
 - import org . apache . logging . log4j . Logger ; 
 
 public class LaunchTesting 
 { 
 - private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 - 
 public static void main ( String . . . args ) throws InterruptedException 
 { 
 final String markerselection = System . getProperty ( " forge . logging . markers " , " " ) ; 
 @ @ - 130 , 7 + 127 , 7 @ @ public class LaunchTesting 
 try { 
 auth . logIn ( ) ; 
 } catch ( AuthenticationException e ) { 
 - LOGGER . error ( " Login failed ! " , e ) ; 
 + LogManager . getLogger ( ) . error ( " Login failed ! " , e ) ; 
 throw new RuntimeException ( e ) ; / / don ' t set other variables 
 } 


NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeConfig . java b / src / main / java / net / minecraftforge / common / ForgeConfig . java 
 index 5e58eab . . 6f632ee 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeConfig . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeConfig . java 
 @ @ - 22 , 8 + 22 , 6 @ @ package net . minecraftforge . common ; 
 import static net . minecraftforge . fml . Logging . CORE ; 
 import static net . minecraftforge . fml . loading . LogMarkers . FORGEMOD ; 
 
 - import com . electronwill . nightconfig . core . CommentedConfig ; 
 - import com . google . common . collect . Lists ; 
 import net . minecraftforge . eventbus . api . SubscribeEvent ; 
 import net . minecraftforge . fml . config . ModConfig ; 
 import org . apache . commons . lang3 . tuple . Pair ; 
 @ @ - 33 , 9 + 31 , 6 @ @ import net . minecraftforge . common . ForgeConfigSpec . BooleanValue ; 
 import net . minecraftforge . common . ForgeConfigSpec . DoubleValue ; 
 import net . minecraftforge . common . ForgeConfigSpec . IntValue ; 
 
 - import javax . annotation . Nullable ; 
 - import java . util . List ; 
 - 
 public class ForgeConfig 
 { 
 public static class Server { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 index ab6cc4c . . cadfc27 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 @ @ - 32 , 13 + 32 , 10 @ @ import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; 
 import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; 
 - import net . minecraftforge . fml . loading . FMLPaths ; 
 import net . minecraftforge . server . command . ForgeCommand ; 
 import net . minecraftforge . versions . forge . ForgeVersion ; 
 import net . minecraftforge . versions . mcp . MCPVersion ; 
 
 - import java . nio . file . Path ; 
 - 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 @ @ - 55 , 9 + 52 , 6 @ @ import net . minecraftforge . fml . common . gameevent . PlayerEvent ; 
 import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 - import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 - import com . electronwill . nightconfig . core . io . WritingMode ; 
 - 
 @ Mod ( " forge " ) 
 public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 index 1b9d087 . . 22dd276 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 @ @ - 133 , 6 + 133 , 7 @ @ public class ModLoader 
 CapabilityManager . INSTANCE . injectCapabilities ( modList . getAllScanData ( ) ) ; 
 GameData . fireRegistryEvents ( rl - > true , LifecycleEventProvider . LOAD _ REGISTRIES , this : : dispatchAndHandleError ) ; 
 DistExecutor . runWhenOn ( Dist . CLIENT , ( ) - > ( ) - > ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . CLIENT , FMLPaths . CONFIGDIR . get ( ) ) ) ; 
 + ConfigTracker . INSTANCE . loadConfigs ( ModConfig . Type . COMMON , FMLPaths . CONFIGDIR . get ( ) ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . SETUP ) ; 
 DistExecutor . runWhenOn ( Dist . CLIENT , ModLoader : : fireClientEvents ) ; 
 dispatchAndHandleError ( LifecycleEventProvider . SIDED _ SETUP ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 index bbe2688 . . 47d0186 100644 
 - - - a / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 + + + b / src / main / java / net / minecraftforge / fml / config / ConfigTracker . java 
 @ @ - 20 , 18 + 20 , 31 @ @ 
 package net . minecraftforge . fml . config ; 
 
 import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 + import com . electronwill . nightconfig . toml . TomlFormat ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraftforge . fml . network . FMLHandshakeMessages ; 
 + import net . minecraftforge . fml . network . NetworkEvent ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 + import java . io . ByteArrayInputStream ; 
 + import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . util . Collections ; 
 import java . util . EnumMap ; 
 import java . util . LinkedHashSet ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Optional ; 
 import java . util . Set ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 - import java . util . concurrent . ConcurrentSkipListSet ; 
 + import java . util . function . Supplier ; 
 + import java . util . stream . Collectors ; 
 + 
 + import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . rethrowFunction ; 
 
 public class ConfigTracker { 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 @ @ - 44 , 6 + 57 , 7 @ @ public class ConfigTracker { 
 this . fileMap = new ConcurrentHashMap < > ( ) ; 
 this . configSets = new EnumMap < > ( ModConfig . Type . class ) ; 
 this . configSets . put ( ModConfig . Type . CLIENT , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; 
 + this . configSets . put ( ModConfig . Type . COMMON , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; 
 / / this . configSets . put ( ModConfig . Type . PLAYER , new ConcurrentSkipListSet < > ( ) ) ; 
 this . configSets . put ( ModConfig . Type . SERVER , Collections . synchronizedSet ( new LinkedHashSet < > ( ) ) ) ; 
 } 
 @ @ - 63 , 11 + 77 , 25 @ @ public class ConfigTracker { 
 this . configSets . get ( type ) . forEach ( config - > openConfig ( config , configBasePath ) ) ; 
 } 
 
 + public List < Pair < String , FMLHandshakeMessages . S2CConfigData > > syncConfigs ( ) { 
 + final Map < String , byte [ ] > configData = configSets . get ( ModConfig . Type . SERVER ) . stream ( ) . collect ( Collectors . toMap ( ModConfig : : getFileName , rethrowFunction ( mc - > Files . readAllBytes ( mc . getFullPath ( ) ) ) ) ) ; 
 + return configData . entrySet ( ) . stream ( ) . map ( e - > Pair . of ( " Config " + e . getKey ( ) , new FMLHandshakeMessages . S2CConfigData ( e . getKey ( ) , e . getValue ( ) ) ) ) . collect ( Collectors . toList ( ) ) ; 
 + } 
 + 
 private void openConfig ( final ModConfig config , final Path configBasePath ) { 
 LOGGER . debug ( CONFIG , " Loading config file type { } at { } for { } " , config . getType ( ) , config . getFileName ( ) , config . getModId ( ) ) ; 
 final CommentedFileConfig configData = config . getHandler ( ) . reader ( configBasePath ) . apply ( config ) ; 
 config . setConfigData ( configData ) ; 
 config . fireEvent ( new ModConfig . Loading ( config ) ) ; 
 - config . getConfigData ( ) . save ( ) ; 
 + config . save ( ) ; 
 + } 
 + 
 + public void receiveSyncedConfig ( final FMLHandshakeMessages . S2CConfigData s2CConfigData , final Supplier < NetworkEvent . Context > contextSupplier ) { 
 + if ( ! Minecraft . getInstance ( ) . isIntegratedServerRunning ( ) ) { 
 + Optional . ofNullable ( fileMap . get ( s2CConfigData . getFileName ( ) ) ) . ifPresent ( mc - > { 
 + mc . setConfigData ( TomlFormat . instance ( ) . createParser ( ) . parse ( new ByteArrayInputStream ( s2CConfigData . getBytes ( ) ) ) ) ; 
 + mc . fireEvent ( new ModConfig . ConfigReloading ( mc ) ) ; 
 + } ) ; 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / config / ModConfig . java b / src / main / java / net / minecraftforge / fml / config / ModConfig . java 
 index 3c4ef9e . . 2e90cdd 100644 
 - - - a / src / main / java / net / minecraftforge / fml / config / ModConfig . java 
 + + + b / src / main / java / net / minecraftforge / fml / config / ModConfig . java 
 @ @ - 19 , 12 + 19 , 19 @ @ 
 
 package net . minecraftforge . fml . config ; 
 
 + import com . electronwill . nightconfig . core . CommentedConfig ; 
 import com . electronwill . nightconfig . core . file . CommentedFileConfig ; 
 import net . minecraftforge . common . ForgeConfigSpec ; 
 import net . minecraftforge . eventbus . api . Event ; 
 import net . minecraftforge . fml . ModContainer ; 
 import net . minecraftforge . fml . loading . StringUtils ; 
 
 + import java . nio . file . Path ; 
 + import java . util . concurrent . Callable ; 
 + import java . util . function . Consumer ; 
 + 
 + import static cpw . mods . modlauncher . api . LamdbaExceptionUtils . uncheck ; 
 + 
 public class ModConfig 
 { 
 private final Type type ; 
 @ @ - 32 , 7 + 39 , 8 @ @ public class ModConfig 
 private final String fileName ; 
 private final ModContainer container ; 
 private final ConfigFileTypeHandler configHandler ; 
 - private CommentedFileConfig configData ; 
 + private CommentedConfig configData ; 
 + private Callable < Void > saveHandler ; 
 
 public ModConfig ( final Type type , final ForgeConfigSpec spec , final ModContainer container , final String fileName ) { 
 this . type = type ; 
 @ @ - 71 , 11 + 79 , 11 @ @ public class ModConfig 
 return container . getModId ( ) ; 
 } 
 
 - public CommentedFileConfig getConfigData ( ) { 
 + public CommentedConfig getConfigData ( ) { 
 return this . configData ; 
 } 
 
 - void setConfigData ( final CommentedFileConfig configData ) { 
 + void setConfigData ( final CommentedConfig configData ) { 
 this . configData = configData ; 
 this . spec . setConfig ( this . configData ) ; 
 } 
 @ @ - 84 , 6 + 92 , 14 @ @ public class ModConfig 
 this . container . dispatchConfigEvent ( configEvent ) ; 
 } 
 
 + public void save ( ) { 
 + ( ( CommentedFileConfig ) this . configData ) . save ( ) ; 
 + } 
 + 
 + public Path getFullPath ( ) { 
 + return ( ( CommentedFileConfig ) this . configData ) . getNioPath ( ) ; 
 + } 
 + 
 public enum Type { 
 / * * 
 * Common mod config for configuration that needs to be loaded on both environments . 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 index 1e13149 . . 0c39926 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeHandler . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . network . NetHandlerLoginServer ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . text . TextComponentString ; 
 + import net . minecraftforge . fml . config . ConfigTracker ; 
 import net . minecraftforge . fml . network . simple . SimpleChannel ; 
 import net . minecraftforge . fml . util . ThreeConsumer ; 
 import net . minecraftforge . registries . RegistryManager ; 
 @ @ - 108 , 6 + 109 , 13 @ @ public class FMLHandshakeHandler { 
 buildLoginPacketList ( RegistryManager : : generateRegistryPackets ) . 
 consumer ( biConsumerFor ( FMLHandshakeHandler : : handleRegistryMessage ) ) . 
 add ( ) ; 
 + channel . messageBuilder ( FMLHandshakeMessages . S2CConfigData . class , 4 ) . 
 + loginIndex ( FMLHandshakeMessages . LoginIndexedMessage : : getLoginIndex , FMLHandshakeMessages . LoginIndexedMessage : : setLoginIndex ) . 
 + decoder ( FMLHandshakeMessages . S2CConfigData : : decode ) . 
 + encoder ( FMLHandshakeMessages . S2CConfigData : : encode ) . 
 + buildLoginPacketList ( ConfigTracker . INSTANCE : : syncConfigs ) . 
 + consumer ( biConsumerFor ( FMLHandshakeHandler : : handleConfigSync ) ) . 
 + add ( ) ; 
 } 
 
 / * * 
 @ @ - 172 , 7 + 180 , 7 @ @ public class FMLHandshakeHandler { 
 { 
 this . direction = side ; 
 this . manager = networkManager ; 
 - this . messageList = NetworkRegistry . gatherLoginPayloads ( ) ; 
 + this . messageList = NetworkRegistry . gatherLoginPayloads ( this . direction ) ; 
 LOGGER . debug ( FMLHSMARKER , " Starting new modded network connection . Found { } messages to dispatch . " , this . messageList . size ( ) ) ; 
 } 
 
 @ @ - 224 , 6 + 232 , 13 @ @ public class FMLHandshakeHandler { 
 contextSupplier . get ( ) . setPacketHandled ( true ) ; 
 } 
 
 + private void handleConfigSync ( final FMLHandshakeMessages . S2CConfigData msg , final Supplier < NetworkEvent . Context > contextSupplier ) { 
 + LOGGER . debug ( FMLHSMARKER , " Received config sync from server " ) ; 
 + ConfigTracker . INSTANCE . receiveSyncedConfig ( msg , contextSupplier ) ; 
 + contextSupplier . get ( ) . setPacketHandled ( true ) ; 
 + final FMLHandshakeMessages . C2SAcknowledge reply = new FMLHandshakeMessages . C2SAcknowledge ( ) ; 
 + channel . reply ( reply , contextSupplier . get ( ) ) ; 
 + } 
 / * * 
 * FML will send packets , from Server to Client , from the messages queue until the queue is drained . Each message 
 * will be indexed , and placed into the " pending acknowledgement " queue . 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java 
 index af851aa . . 1c944b5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLHandshakeMessages . java 
 @ @ - 119 , 7 + 119 , 6 @ @ public class FMLHandshakeMessages 
 } 
 
 public static class S2CRegistry extends LoginIndexedMessage { 
 - 
 public S2CRegistry ( final ResourceLocation key , final ForgeRegistry < ? extends IForgeRegistryEntry < ? > > registry ) { 
 } 
 
 @ @ - 133 , 4 + 132 , 32 @ @ public class FMLHandshakeMessages 
 return new S2CRegistry ( ) ; 
 } 
 } 
 + 
 + 
 + public static class S2CConfigData extends LoginIndexedMessage { 
 + private final String fileName ; 
 + private final byte [ ] fileData ; 
 + 
 + public S2CConfigData ( final String configFileName , final byte [ ] configFileData ) { 
 + this . fileName = configFileName ; 
 + this . fileData = configFileData ; 
 + } 
 + 
 + void encode ( final PacketBuffer buffer ) { 
 + buffer . writeString ( this . fileName ) ; 
 + buffer . writeByteArray ( this . fileData ) ; 
 + } 
 + 
 + public static S2CConfigData decode ( final PacketBuffer buffer ) { 
 + return new S2CConfigData ( buffer . readString ( 128 ) , buffer . readByteArray ( ) ) ; 
 + } 
 + 
 + public String getFileName ( ) { 
 + return fileName ; 
 + } 
 + 
 + public byte [ ] getBytes ( ) { 
 + return fileData ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java 
 index 9d8769d . . 539cb43 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLNetworking . java 
 @ @ - 20 , 15 + 20 , 11 @ @ 
 package net . minecraftforge . fml . network ; 
 
 import io . netty . util . AttributeKey ; 
 - import net . minecraft . network . NetworkManager ; 
 - import org . apache . logging . log4j . LogManager ; 
 - import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 public class FMLNetworking 
 { 
 - private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 static final Marker NETWORK = MarkerManager . getMarker ( " FMLNETWORK " ) ; 
 static final AttributeKey < String > FML _ MARKER = AttributeKey . valueOf ( " fml : marker " ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 index bc6685e . . b854727 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 @ @ - 79 , 6 + 79 , 7 @ @ public class NetworkHooks 
 
 public static void registerClientLoginChannel ( NetworkManager manager ) 
 { 
 + if ( manager = = null ) return ; 
 manager . channel ( ) . attr ( FMLNetworking . FML _ MARKER ) . set ( NETVERSION ) ; 
 FMLHandshakeHandler . registerHandshake ( manager , NetworkDirection . LOGIN _ TO _ SERVER ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 index 41a60c4 . . 3210503 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 204 , 8 + 205 , 10 @ @ public class NetworkRegistry 
 * Dispatches { @ link net . minecraftforge . fml . network . NetworkEvent . GatherLoginPayloadsEvent } to each { @ link NetworkInstance } . 
 * 
 * @ return The { @ link LoginPayload } list 
 + * @ param direction the network direction for the request - only gathers for LOGIN _ TO _ CLIENT 
 * / 
 - static List < LoginPayload > gatherLoginPayloads ( ) { 
 + static List < LoginPayload > gatherLoginPayloads ( final NetworkDirection direction ) { 
 + if ( direction ! = NetworkDirection . LOGIN _ TO _ CLIENT ) return Collections . emptyList ( ) ; 
 List < LoginPayload > gatheredPayloads = new ArrayList < > ( ) ; 
 instances . values ( ) . forEach ( ni - > ni . dispatchGatherLogin ( gatheredPayloads ) ) ; 
 return gatheredPayloads ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 index 021c001 . . 0a0bbd3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / ServerLifecycleHooks . java 
 @ @ - 36 , 7 + 36 , 6 @ @ import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStartedEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppedEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; 
 - import net . minecraftforge . fml . loading . FMLPaths ; 
 import net . minecraftforge . fml . loading . FileUtils ; 
 import net . minecraftforge . fml . network . NetworkHooks ; 
 import net . minecraftforge . fml . packs . ResourcePackLoader ; 
 @ @ - 46 , 7 + 45 , 6 @ @ import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 import java . nio . file . Path ; 
 - import java . nio . file . Paths ; 
 import java . util . List ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . atomic . AtomicBoolean ; 
 @ @ - 133 , 6 + 131 , 8 @ @ public class ServerLifecycleHooks 
 return false ; 
 } 
 
 + if ( packet . getRequestedState ( ) = = EnumConnectionState . STATUS ) return true ; 
 + 
 NetworkHooks . registerServerLoginChannel ( manager , packet ) ; 
 return true ; 

