BLEU SCORE: 0.01081160062096926

TEST MSG: Fixed a bug with item model loading that would occur if ModelBakery . addVariantName ( ) was called with the same string location parameter for 2 different items , and the string pointed to a location that didn ' t exist , where ModelLoader . loadAnyModel ( ) would substitute the blockdefinition in for the item model , but wouldn ' t remove the original input location from the loadingModels list , which would cause the location from the second call to throw an IllegalStateException even though that location now has a model .
GENERATED MSG: Fixed missing variant logging ; added the possibility to specify the item variant in the blockstate json .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 8e79f8f . . 63e7128 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 217 , 13 + 217 , 20 @ @ public class ModelLoader extends ModelBakery <nl> throw new IllegalStateException ( " circular model dependencies involving model " + location ) ; <nl> } <nl> loadingModels . add ( location ) ; <nl> - IModel model = ModelLoaderRegistry . getModel ( location ) ; <nl> - for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> + try <nl> + { <nl> + IModel model = ModelLoaderRegistry . getModel ( location ) ; <nl> + for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> + { <nl> + getModel ( dep ) ; <nl> + <nl> + } <nl> + textures . addAll ( model . getTextures ( ) ) ; <nl> + } <nl> + finally <nl> { <nl> - getModel ( dep ) ; <nl> + loadingModels . remove ( location ) ; <nl> } <nl> - textures . addAll ( model . getTextures ( ) ) ; <nl> - loadingModels . remove ( location ) ; <nl> } <nl> <nl> private class VanillaModelWrapper implements IRetexturableModel
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 3701a9f . . 57d0cc3 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 91 , 7 + 91 , 8 @ @ public class ModelLoader extends ModelBakery <nl> isLoading = true ; <nl> loadBlocks ( ) ; <nl> loadItems ( ) ; <nl> - stateModels . put ( MODEL _ MISSING , getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ) ; <nl> + IModel missing = getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ; <nl> + stateModels . put ( MODEL _ MISSING , missing ) ; <nl> textures . remove ( TextureMap . LOCATION _ MISSING _ TEXTURE ) ; <nl> textures . addAll ( LOCATIONS _ BUILTIN _ TEXTURES ) ; <nl> textureMap . loadSprites ( resourceManager , new IIconCreator ( ) <nl> @ @ - 106 , 9 + 107 , 17 @ @ public class ModelLoader extends ModelBakery <nl> } ) ; <nl> sprites . put ( new ResourceLocation ( " missingno " ) , textureMap . getMissingSprite ( ) ) ; <nl> Function < ResourceLocation , TextureAtlasSprite > textureGetter = Functions . forMap ( sprites , textureMap . getMissingSprite ( ) ) ; <nl> + IFlexibleBakedModel missingBaked = missing . bake ( missing . getDefaultState ( ) , Attributes . DEFAULT _ BAKED _ FORMAT , textureGetter ) ; <nl> for ( Entry < ModelResourceLocation , IModel > e : stateModels . entrySet ( ) ) <nl> { <nl> - bakedRegistry . putObject ( e . getKey ( ) , e . getValue ( ) . bake ( e . getValue ( ) . getDefaultState ( ) , Attributes . DEFAULT _ BAKED _ FORMAT , textureGetter ) ) ; <nl> + if ( e . getValue ( ) = = getMissingModel ( ) ) <nl> + { <nl> + bakedRegistry . putObject ( e . getKey ( ) , missingBaked ) ; <nl> + } <nl> + else <nl> + { <nl> + bakedRegistry . putObject ( e . getKey ( ) , e . getValue ( ) . bake ( e . getValue ( ) . getDefaultState ( ) , Attributes . DEFAULT _ BAKED _ FORMAT , textureGetter ) ) ; <nl> + } <nl> } <nl> return bakedRegistry ; <nl> } <nl> @ @ - 159 , 7 + 168 , 8 @ @ public class ModelLoader extends ModelBakery <nl> IModel model = getModel ( file ) ; <nl> if ( model = = null | | model = = getMissingModel ( ) ) <nl> { <nl> - missingVariants . add ( memory ) ; <nl> + FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; <nl> + registerVariant ( getModelBlockDefinition ( memory ) , memory ) ; <nl> } <nl> else stateModels . put ( memory , model ) ; <nl> } <nl> @ @ - 569 , 9 + 579 , 11 @ @ public class ModelLoader extends ModelBakery <nl> <nl> public void onPostBakeEvent ( IRegistry modelRegistry ) <nl> { <nl> + Object missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; <nl> for ( ModelResourceLocation missing : missingVariants ) <nl> { <nl> - if ( modelRegistry . getObject ( missing ) = = null ) <nl> + Object model = modelRegistry . getObject ( missing ) ; <nl> + if ( model = = null | | model = = missingModel ) <nl> { <nl> FMLLog . severe ( " Model definition for location % s not found " , missing ) ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 8e79f8f . . 63e7128 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 217 , 13 + 217 , 20 @ @ public class ModelLoader extends ModelBakery 
 throw new IllegalStateException ( " circular model dependencies involving model " + location ) ; 
 } 
 loadingModels . add ( location ) ; 
 - IModel model = ModelLoaderRegistry . getModel ( location ) ; 
 - for ( ResourceLocation dep : model . getDependencies ( ) ) 
 + try 
 + { 
 + IModel model = ModelLoaderRegistry . getModel ( location ) ; 
 + for ( ResourceLocation dep : model . getDependencies ( ) ) 
 + { 
 + getModel ( dep ) ; 
 + 
 + } 
 + textures . addAll ( model . getTextures ( ) ) ; 
 + } 
 + finally 
 { 
 - getModel ( dep ) ; 
 + loadingModels . remove ( location ) ; 
 } 
 - textures . addAll ( model . getTextures ( ) ) ; 
 - loadingModels . remove ( location ) ; 
 } 
 
 private class VanillaModelWrapper implements IRetexturableModel

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 3701a9f . . 57d0cc3 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 91 , 7 + 91 , 8 @ @ public class ModelLoader extends ModelBakery 
 isLoading = true ; 
 loadBlocks ( ) ; 
 loadItems ( ) ; 
 - stateModels . put ( MODEL _ MISSING , getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ) ; 
 + IModel missing = getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ; 
 + stateModels . put ( MODEL _ MISSING , missing ) ; 
 textures . remove ( TextureMap . LOCATION _ MISSING _ TEXTURE ) ; 
 textures . addAll ( LOCATIONS _ BUILTIN _ TEXTURES ) ; 
 textureMap . loadSprites ( resourceManager , new IIconCreator ( ) 
 @ @ - 106 , 9 + 107 , 17 @ @ public class ModelLoader extends ModelBakery 
 } ) ; 
 sprites . put ( new ResourceLocation ( " missingno " ) , textureMap . getMissingSprite ( ) ) ; 
 Function < ResourceLocation , TextureAtlasSprite > textureGetter = Functions . forMap ( sprites , textureMap . getMissingSprite ( ) ) ; 
 + IFlexibleBakedModel missingBaked = missing . bake ( missing . getDefaultState ( ) , Attributes . DEFAULT _ BAKED _ FORMAT , textureGetter ) ; 
 for ( Entry < ModelResourceLocation , IModel > e : stateModels . entrySet ( ) ) 
 { 
 - bakedRegistry . putObject ( e . getKey ( ) , e . getValue ( ) . bake ( e . getValue ( ) . getDefaultState ( ) , Attributes . DEFAULT _ BAKED _ FORMAT , textureGetter ) ) ; 
 + if ( e . getValue ( ) = = getMissingModel ( ) ) 
 + { 
 + bakedRegistry . putObject ( e . getKey ( ) , missingBaked ) ; 
 + } 
 + else 
 + { 
 + bakedRegistry . putObject ( e . getKey ( ) , e . getValue ( ) . bake ( e . getValue ( ) . getDefaultState ( ) , Attributes . DEFAULT _ BAKED _ FORMAT , textureGetter ) ) ; 
 + } 
 } 
 return bakedRegistry ; 
 } 
 @ @ - 159 , 7 + 168 , 8 @ @ public class ModelLoader extends ModelBakery 
 IModel model = getModel ( file ) ; 
 if ( model = = null | | model = = getMissingModel ( ) ) 
 { 
 - missingVariants . add ( memory ) ; 
 + FMLLog . fine ( " Item json isn ' t found for ' " + memory + " ' , trying to load the variant from the blockstate json " ) ; 
 + registerVariant ( getModelBlockDefinition ( memory ) , memory ) ; 
 } 
 else stateModels . put ( memory , model ) ; 
 } 
 @ @ - 569 , 9 + 579 , 11 @ @ public class ModelLoader extends ModelBakery 
 
 public void onPostBakeEvent ( IRegistry modelRegistry ) 
 { 
 + Object missingModel = modelRegistry . getObject ( MODEL _ MISSING ) ; 
 for ( ModelResourceLocation missing : missingVariants ) 
 { 
 - if ( modelRegistry . getObject ( missing ) = = null ) 
 + Object model = modelRegistry . getObject ( missing ) ; 
 + if ( model = = null | | model = = missingModel ) 
 { 
 FMLLog . severe ( " Model definition for location % s not found " , missing ) ; 
 }
