BLEU SCORE: 0.01627688800647872

TEST MSG: Fix a vanilla bug with the blockstate ID map not being properly symmetric with respect to block . getStateFromMeta - closes # 3012 properly but probably has a random MCJIRA ticket somewhere too .
GENERATED MSG: Automatically register BlockStates when block is initally registered , and clear the list when new snapshots are injected . Modders DO NOT touch the registry in Block directly . Closes # 537

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index db17f10 . . 29c57c1 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 1337 , 3 + 1337 , 16 @ @ <nl> public static void func _ 149671 _ p ( ) <nl> { <nl> func _ 176215 _ a ( 0 , field _ 176230 _ a , ( new BlockAir ( ) ) . func _ 149663 _ c ( " air " ) ) ; <nl> + @ @ - 1169 , 11 + 2323 , 7 @ @ <nl> + } <nl> + else <nl> + { <nl> + - for ( IBlockState iblockstate : block16 . func _ 176194 _ O ( ) . func _ 177619 _ a ( ) ) <nl> + - { <nl> + - int k = field _ 149771 _ c . func _ 148757 _ b ( block16 ) < < 4 | block16 . func _ 176201 _ c ( iblockstate ) ; <nl> + - field _ 176229 _ d . func _ 148746 _ a ( iblockstate , k ) ; <nl> + - } <nl> + + / / Handled in GameData . BlockCallbacks - leaving tripwire as it seems to be special cased <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 445136a . . 3ed1790 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 288 , 7 + 288 , 10 @ @ public class GameData <nl> ClearableObjectIntIdentityMap < IBlockState > blockstateMap = ( ClearableObjectIntIdentityMap < IBlockState > ) slaves . get ( BLOCKSTATE _ TO _ ID ) ; <nl> for ( IBlockState state : block . getBlockState ( ) . getValidStates ( ) ) <nl> { <nl> - blockstateMap . put ( state , blockId < < 4 | block . getMetaFromState ( state ) ) ; <nl> + final int meta = block . getMetaFromState ( state ) ; / / meta value the block assigns for the state <nl> + final int bsmeta = blockId < < 4 | meta ; / / computed blockstateid for that meta <nl> + final IBlockState blockState = block . getStateFromMeta ( meta ) ; / / state that the block assigns for the meta value <nl> + blockstateMap . put ( blockState , bsmeta ) ; / / store assigned state with computed blockstateid <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / fml / common / registry / BlockStateMappingsTest . java b / src / test / java / net / minecraftforge / fml / common / registry / BlockStateMappingsTest . java <nl> new file mode 100644 <nl> index 0000000 . . 9f1e910 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / fml / common / registry / BlockStateMappingsTest . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + package net . minecraftforge . fml . common . registry ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . BlockDirt ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . properties . PropertyBool ; <nl> + import net . minecraft . block . properties . PropertyInteger ; <nl> + import net . minecraft . block . state . BlockStateContainer ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . init . Blocks ; <nl> + import net . minecraft . init . Bootstrap ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . world . IBlockAccess ; <nl> + import net . minecraftforge . fml . common . DummyModContainer ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModMetadata ; <nl> + import org . junit . BeforeClass ; <nl> + import org . junit . Test ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + <nl> + import static org . junit . Assert . assertEquals ; <nl> + <nl> + / * * <nl> + * Test block state mappings bidirectionality <nl> + * / <nl> + public class BlockStateMappingsTest <nl> + { <nl> + @ BeforeClass <nl> + public static void setup ( ) <nl> + { <nl> + System . setProperty ( " fml . queryResult " , " confirm " ) ; <nl> + System . setProperty ( " fml . doNotBackup " , " true " ) ; <nl> + Loader . instance ( ) ; <nl> + Bootstrap . register ( ) ; <nl> + Loader . instance ( ) . setupTestHarness ( new DummyModContainer ( new ModMetadata ( ) { { <nl> + modId = " test " ; <nl> + } } ) ) ; <nl> + } <nl> + <nl> + @ Test <nl> + public void testBlockStates ( ) <nl> + { <nl> + / / stems have a problem where the blockstate for meta 0 is not the same in the blockstate map and from block . getStateFromMeta <nl> + / / This test asserts that the two values should be equivalent <nl> + / / Specifically , in vanilla the state for meta 0 in the blockstatemap is facing = east , age = 0 but the block says it ' s facing = up , age = 0 <nl> + Block bl = Blocks . MELON _ STEM ; <nl> + int id = Block . getIdFromBlock ( bl ) ; <nl> + for ( int meta = 0 ; meta < 8 ; meta + + ) <nl> + { <nl> + int realbsm = id < < 4 | meta ; / / computed blockstateid for this meta <nl> + IBlockState realst = bl . getStateFromMeta ( meta ) ; / / The state that the block assigns to this meta <nl> + int bsm = GameData . getBlockStateIDMap ( ) . get ( realst ) ; / / The blockstateid for the meta ' s state <nl> + IBlockState foundst = GameData . getBlockStateIDMap ( ) . getByValue ( realbsm ) ; / / The state that is stored for the computed blockstateid <nl> + assertEquals ( " Got computed blockstate ids that match " , realbsm , bsm ) ; <nl> + assertEquals ( " Got equal states " , realst , foundst ) ; <nl> + } <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / block / Block . java . patch b / fml / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index 2fc80de . . 60c590e 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 1 , 15 + 1 , 18 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / block / Block . java <nl> + + + . . / src - work / minecraft / net / minecraft / block / Block . java <nl> - @ @ - 39 , 7 + 39 , 7 @ @ <nl> + @ @ - 39 , 8 + 39 , 9 @ @ <nl> public class Block <nl> { <nl> private static final ResourceLocation field _ 176230 _ a = new ResourceLocation ( " air " ) ; <nl> - public static final RegistryNamespacedDefaultedByKey field _ 149771 _ c = new RegistryNamespacedDefaultedByKey ( field _ 176230 _ a ) ; <nl> + - public static final ObjectIntIdentityMap field _ 176229 _ d = new ObjectIntIdentityMap ( ) ; <nl> + public static final RegistryNamespacedDefaultedByKey field _ 149771 _ c = net . minecraftforge . fml . common . registry . GameData . getBlockRegistry ( ) ; <nl> - public static final ObjectIntIdentityMap field _ 176229 _ d = new ObjectIntIdentityMap ( ) ; <nl> + + @ Deprecated / / Modders : DO NOT use this ! Use GameRegistry <nl> + + public static final ObjectIntIdentityMap field _ 176229 _ d = net . minecraftforge . fml . common . registry . GameData . getBlockStateIDMap ( ) ; <nl> private CreativeTabs field _ 149772 _ a ; <nl> public static final Block . SoundType field _ 149769 _ e = new Block . SoundType ( " stone " , 1 . 0F , 1 . 0F ) ; <nl> - @ @ - 124 , 6 + 124 , 9 @ @ <nl> + public static final Block . SoundType field _ 149766 _ f = new Block . SoundType ( " wood " , 1 . 0F , 1 . 0F ) ; <nl> + @ @ - 124 , 6 + 125 , 9 @ @ <nl> private String field _ 149770 _ b ; <nl> private static final String _ _ OBFID = " CL _ 00000199 " ; <nl> <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 02da755 . . 9ffb22a 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 26 , 9 + 26 , 11 @ @ import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> <nl> import net . minecraft . block . Block ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . ObjectIntIdentityMap ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> @ @ - 384 , 6 + 386 , 10 @ @ public class GameData { <nl> } <nl> } <nl> } <nl> + <nl> + / / Clear State map for it ' s ready for us to register below . <nl> + GameData . BLOCKSTATE _ TO _ ID . clear ( ) ; <nl> + <nl> / / process blocks and items in the world , blocks in the first pass , items in the second <nl> / / blocks need to be added first for proper ItemBlock handling <nl> for ( int pass = 0 ; pass < 2 ; pass + + ) <nl> @ @ - 484 , 6 + 490 , 17 @ @ public class GameData { <nl> Loader . instance ( ) . fireRemapEvent ( remaps ) ; <nl> / / The id map changed , ensure we apply object holders <nl> ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> + <nl> + / / Rebuild the state map for all blocks . TODO : Clean this up to a better system when Block . BLOCK _ STATE _ IDS is cleaned up . <nl> + GameData . BLOCKSTATE _ TO _ ID . clear ( ) ; <nl> + for ( Block block : getMain ( ) . iBlockRegistry . typeSafeIterable ( ) ) <nl> + { <nl> + int id = getMain ( ) . iBlockRegistry . getId ( block ) ; <nl> + for ( IBlockState state : ( ( List < IBlockState > ) block . getBlockState ( ) . getValidStates ( ) ) ) <nl> + { <nl> + GameData . BLOCKSTATE _ TO _ ID . put ( state , id < < 4 | block . getMetaFromState ( state ) ) ; <nl> + } <nl> + } <nl> return ImmutableList . of ( ) ; <nl> } <nl> <nl> @ @ - 789 , 6 + 806 , 12 @ @ public class GameData { <nl> <nl> useSlot ( blockId ) ; <nl> ( ( RegistryDelegate . Delegate < Block > ) block . delegate ) . setName ( name ) ; <nl> + <nl> + for ( IBlockState state : ( ( List < IBlockState > ) block . getBlockState ( ) . getValidStates ( ) ) ) <nl> + { <nl> + GameData . BLOCKSTATE _ TO _ ID . put ( state , blockId < < 4 | block . getMetaFromState ( state ) ) ; <nl> + } <nl> + <nl> return blockId ; <nl> } <nl> <nl> @ @ - 933 , 4 + 956 , 21 @ @ public class GameData { <nl> { <nl> return BLOCK _ TO _ ITEM ; <nl> } <nl> + <nl> + private static ClearableObjectIntIdentityMap BLOCKSTATE _ TO _ ID = new ClearableObjectIntIdentityMap ( ) ; <nl> + / / Internal : DO NOT USE , will change without warning . <nl> + public static ObjectIntIdentityMap getBlockStateIDMap ( ) <nl> + { <nl> + return BLOCKSTATE _ TO _ ID ; <nl> + } <nl> + <nl> + / / Lets us clear the map so we can rebuild it . <nl> + private static class ClearableObjectIntIdentityMap extends ObjectIntIdentityMap <nl> + { <nl> + private void clear ( ) <nl> + { <nl> + this . field _ 148749 _ a . clear ( ) ; <nl> + this . field _ 148748 _ b . clear ( ) ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch 
 index db17f10 . . 29c57c1 100644 
 - - - a / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 1337 , 3 + 1337 , 16 @ @ 
 public static void func _ 149671 _ p ( ) 
 { 
 func _ 176215 _ a ( 0 , field _ 176230 _ a , ( new BlockAir ( ) ) . func _ 149663 _ c ( " air " ) ) ; 
 + @ @ - 1169 , 11 + 2323 , 7 @ @ 
 + } 
 + else 
 + { 
 + - for ( IBlockState iblockstate : block16 . func _ 176194 _ O ( ) . func _ 177619 _ a ( ) ) 
 + - { 
 + - int k = field _ 149771 _ c . func _ 148757 _ b ( block16 ) < < 4 | block16 . func _ 176201 _ c ( iblockstate ) ; 
 + - field _ 176229 _ d . func _ 148746 _ a ( iblockstate , k ) ; 
 + - } 
 + + / / Handled in GameData . BlockCallbacks - leaving tripwire as it seems to be special cased 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 445136a . . 3ed1790 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 288 , 7 + 288 , 10 @ @ public class GameData 
 ClearableObjectIntIdentityMap < IBlockState > blockstateMap = ( ClearableObjectIntIdentityMap < IBlockState > ) slaves . get ( BLOCKSTATE _ TO _ ID ) ; 
 for ( IBlockState state : block . getBlockState ( ) . getValidStates ( ) ) 
 { 
 - blockstateMap . put ( state , blockId < < 4 | block . getMetaFromState ( state ) ) ; 
 + final int meta = block . getMetaFromState ( state ) ; / / meta value the block assigns for the state 
 + final int bsmeta = blockId < < 4 | meta ; / / computed blockstateid for that meta 
 + final IBlockState blockState = block . getStateFromMeta ( meta ) ; / / state that the block assigns for the meta value 
 + blockstateMap . put ( blockState , bsmeta ) ; / / store assigned state with computed blockstateid 
 } 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / fml / common / registry / BlockStateMappingsTest . java b / src / test / java / net / minecraftforge / fml / common / registry / BlockStateMappingsTest . java 
 new file mode 100644 
 index 0000000 . . 9f1e910 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / fml / common / registry / BlockStateMappingsTest . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + package net . minecraftforge . fml . common . registry ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . BlockDirt ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . properties . PropertyBool ; 
 + import net . minecraft . block . properties . PropertyInteger ; 
 + import net . minecraft . block . state . BlockStateContainer ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . init . Blocks ; 
 + import net . minecraft . init . Bootstrap ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . world . IBlockAccess ; 
 + import net . minecraftforge . fml . common . DummyModContainer ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModMetadata ; 
 + import org . junit . BeforeClass ; 
 + import org . junit . Test ; 
 + 
 + import javax . annotation . Nonnull ; 
 + 
 + import static org . junit . Assert . assertEquals ; 
 + 
 + / * * 
 + * Test block state mappings bidirectionality 
 + * / 
 + public class BlockStateMappingsTest 
 + { 
 + @ BeforeClass 
 + public static void setup ( ) 
 + { 
 + System . setProperty ( " fml . queryResult " , " confirm " ) ; 
 + System . setProperty ( " fml . doNotBackup " , " true " ) ; 
 + Loader . instance ( ) ; 
 + Bootstrap . register ( ) ; 
 + Loader . instance ( ) . setupTestHarness ( new DummyModContainer ( new ModMetadata ( ) { { 
 + modId = " test " ; 
 + } } ) ) ; 
 + } 
 + 
 + @ Test 
 + public void testBlockStates ( ) 
 + { 
 + / / stems have a problem where the blockstate for meta 0 is not the same in the blockstate map and from block . getStateFromMeta 
 + / / This test asserts that the two values should be equivalent 
 + / / Specifically , in vanilla the state for meta 0 in the blockstatemap is facing = east , age = 0 but the block says it ' s facing = up , age = 0 
 + Block bl = Blocks . MELON _ STEM ; 
 + int id = Block . getIdFromBlock ( bl ) ; 
 + for ( int meta = 0 ; meta < 8 ; meta + + ) 
 + { 
 + int realbsm = id < < 4 | meta ; / / computed blockstateid for this meta 
 + IBlockState realst = bl . getStateFromMeta ( meta ) ; / / The state that the block assigns to this meta 
 + int bsm = GameData . getBlockStateIDMap ( ) . get ( realst ) ; / / The blockstateid for the meta ' s state 
 + IBlockState foundst = GameData . getBlockStateIDMap ( ) . getByValue ( realbsm ) ; / / The state that is stored for the computed blockstateid 
 + assertEquals ( " Got computed blockstate ids that match " , realbsm , bsm ) ; 
 + assertEquals ( " Got equal states " , realst , foundst ) ; 
 + } 
 + } 
 + 
 + }

NEAREST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / block / Block . java . patch b / fml / patches / minecraft / net / minecraft / block / Block . java . patch 
 index 2fc80de . . 60c590e 100644 
 - - - a / fml / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 1 , 15 + 1 , 18 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / block / Block . java 
 + + + . . / src - work / minecraft / net / minecraft / block / Block . java 
 - @ @ - 39 , 7 + 39 , 7 @ @ 
 + @ @ - 39 , 8 + 39 , 9 @ @ 
 public class Block 
 { 
 private static final ResourceLocation field _ 176230 _ a = new ResourceLocation ( " air " ) ; 
 - public static final RegistryNamespacedDefaultedByKey field _ 149771 _ c = new RegistryNamespacedDefaultedByKey ( field _ 176230 _ a ) ; 
 + - public static final ObjectIntIdentityMap field _ 176229 _ d = new ObjectIntIdentityMap ( ) ; 
 + public static final RegistryNamespacedDefaultedByKey field _ 149771 _ c = net . minecraftforge . fml . common . registry . GameData . getBlockRegistry ( ) ; 
 - public static final ObjectIntIdentityMap field _ 176229 _ d = new ObjectIntIdentityMap ( ) ; 
 + + @ Deprecated / / Modders : DO NOT use this ! Use GameRegistry 
 + + public static final ObjectIntIdentityMap field _ 176229 _ d = net . minecraftforge . fml . common . registry . GameData . getBlockStateIDMap ( ) ; 
 private CreativeTabs field _ 149772 _ a ; 
 public static final Block . SoundType field _ 149769 _ e = new Block . SoundType ( " stone " , 1 . 0F , 1 . 0F ) ; 
 - @ @ - 124 , 6 + 124 , 9 @ @ 
 + public static final Block . SoundType field _ 149766 _ f = new Block . SoundType ( " wood " , 1 . 0F , 1 . 0F ) ; 
 + @ @ - 124 , 6 + 125 , 9 @ @ 
 private String field _ 149770 _ b ; 
 private static final String _ _ OBFID = " CL _ 00000199 " ; 
 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 02da755 . . 9ffb22a 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 26 , 9 + 26 , 11 @ @ import java . util . Map . Entry ; 
 import java . util . Set ; 
 
 import net . minecraft . block . Block ; 
 + import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . ObjectIntIdentityMap ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 @ @ - 384 , 6 + 386 , 10 @ @ public class GameData { 
 } 
 } 
 } 
 + 
 + / / Clear State map for it ' s ready for us to register below . 
 + GameData . BLOCKSTATE _ TO _ ID . clear ( ) ; 
 + 
 / / process blocks and items in the world , blocks in the first pass , items in the second 
 / / blocks need to be added first for proper ItemBlock handling 
 for ( int pass = 0 ; pass < 2 ; pass + + ) 
 @ @ - 484 , 6 + 490 , 17 @ @ public class GameData { 
 Loader . instance ( ) . fireRemapEvent ( remaps ) ; 
 / / The id map changed , ensure we apply object holders 
 ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 + 
 + / / Rebuild the state map for all blocks . TODO : Clean this up to a better system when Block . BLOCK _ STATE _ IDS is cleaned up . 
 + GameData . BLOCKSTATE _ TO _ ID . clear ( ) ; 
 + for ( Block block : getMain ( ) . iBlockRegistry . typeSafeIterable ( ) ) 
 + { 
 + int id = getMain ( ) . iBlockRegistry . getId ( block ) ; 
 + for ( IBlockState state : ( ( List < IBlockState > ) block . getBlockState ( ) . getValidStates ( ) ) ) 
 + { 
 + GameData . BLOCKSTATE _ TO _ ID . put ( state , id < < 4 | block . getMetaFromState ( state ) ) ; 
 + } 
 + } 
 return ImmutableList . of ( ) ; 
 } 
 
 @ @ - 789 , 6 + 806 , 12 @ @ public class GameData { 
 
 useSlot ( blockId ) ; 
 ( ( RegistryDelegate . Delegate < Block > ) block . delegate ) . setName ( name ) ; 
 + 
 + for ( IBlockState state : ( ( List < IBlockState > ) block . getBlockState ( ) . getValidStates ( ) ) ) 
 + { 
 + GameData . BLOCKSTATE _ TO _ ID . put ( state , blockId < < 4 | block . getMetaFromState ( state ) ) ; 
 + } 
 + 
 return blockId ; 
 } 
 
 @ @ - 933 , 4 + 956 , 21 @ @ public class GameData { 
 { 
 return BLOCK _ TO _ ITEM ; 
 } 
 + 
 + private static ClearableObjectIntIdentityMap BLOCKSTATE _ TO _ ID = new ClearableObjectIntIdentityMap ( ) ; 
 + / / Internal : DO NOT USE , will change without warning . 
 + public static ObjectIntIdentityMap getBlockStateIDMap ( ) 
 + { 
 + return BLOCKSTATE _ TO _ ID ; 
 + } 
 + 
 + / / Lets us clear the map so we can rebuild it . 
 + private static class ClearableObjectIntIdentityMap extends ObjectIntIdentityMap 
 + { 
 + private void clear ( ) 
 + { 
 + this . field _ 148749 _ a . clear ( ) ; 
 + this . field _ 148748 _ b . clear ( ) ; 
 + } 
 + } 
 }
