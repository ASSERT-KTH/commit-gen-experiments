BLEU SCORE: 0.07128373858810284

TEST MSG: Reconcile Block . patch
GENERATED MSG: Player sensitive version of Block . getPickBlock Closes # 1348

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index 5f8654e . . 8e26daf 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 182 , 15 + 182 , 20 @ @ <nl> } <nl> <nl> protected ItemStack func _ 180643 _ i ( IBlockState p _ 180643 _ 1 _ ) <nl> - @ @ - 747 , 6 + 764 , 7 @ @ <nl> + @ @ - 747 , 9 + 764 , 11 @ @ <nl> p _ 176216 _ 2 _ . field _ 70181 _ x = 0 . 0D ; <nl> } <nl> <nl> + @ Deprecated / / Forge : Use more sensitive version below : getPickBlock <nl> public ItemStack func _ 185473 _ a ( World p _ 185473 _ 1 _ , BlockPos p _ 185473 _ 2 _ , IBlockState p _ 185473 _ 3 _ ) <nl> { <nl> - return new ItemStack ( Item . func _ 150898 _ a ( this ) , 1 , this . func _ 180651 _ a ( p _ 185473 _ 3 _ ) ) ; <nl> - @ @ - 844 , 6 + 862 , 1120 @ @ <nl> + - return new ItemStack ( Item . func _ 150898 _ a ( this ) , 1 , this . func _ 180651 _ a ( p _ 185473 _ 3 _ ) ) ; <nl> + + Item item = Item . func _ 150898 _ a ( this ) ; <nl> + + return item = = null ? null : new ItemStack ( item , 1 , this . func _ 180651 _ a ( p _ 185473 _ 3 _ ) ) ; <nl> + } <nl> + <nl> + @ SideOnly ( Side . CLIENT ) <nl> + @ @ - 844 , 6 + 863 , 1141 @ @ <nl> return " Block { " + field _ 149771 _ c . func _ 177774 _ c ( this ) + " } " ; <nl> } <nl> <nl> @ @ - 1275 , 13 + 1280 , 24 @ @ <nl> + <nl> + / * * <nl> + * Queries if this block should render in a given layer . <nl> - + * ISmartBlockModel can use MinecraftForgeClient . getRenderLayer to alter their model based on layer <nl> + + * ISmartBlockModel can use { @ link MinecraftForgeClient # getRenderLayer ( ) } to alter their model based on layer . <nl> + + * <nl> + + * @ deprecated New method with state sensitivity : { @ link # canRenderInLayer ( IBlockState , BlockRenderLayer ) } <nl> + * / <nl> + + @ Deprecated <nl> + public boolean canRenderInLayer ( BlockRenderLayer layer ) <nl> + { <nl> + return func _ 180664 _ k ( ) = = layer ; <nl> + } <nl> + <nl> + + / * * <nl> + + * Queries if this block should render in a given layer . <nl> + + * ISmartBlockModel can use { @ link MinecraftForgeClient # getRenderLayer ( ) } to alter their model based on layer . <nl> + + * / <nl> + + public boolean canRenderInLayer ( IBlockState state , BlockRenderLayer layer ) <nl> + + { <nl> + + return canRenderInLayer ( layer ) ; <nl> + + } <nl> + / / For Internal use only to capture droped items inside getDrops <nl> + protected static ThreadLocal < Boolean > captureDrops = new ThreadLocal < Boolean > ( ) <nl> + { <nl> @ @ - 1306 , 6 + 1322 , 16 @ @ <nl> + } <nl> + } <nl> + <nl> + + / * * <nl> + + * Add information to the blocks tooltip , called from the default implementation of { @ link ItemBlock # addInformation ( ItemStack , EntityPlayer , List , boolean ) } <nl> + + * @ param stack The stack the tooltip is being retrieved for <nl> + + * @ param player The player retrieving the tooltip <nl> + + * @ param tooltip The lines to be displayed on the tooltip <nl> + + * @ param advanced If the client has advanced debug tooltips enabled <nl> + + * / <nl> + + public void addInformation ( ItemStack stack , EntityPlayer player , List < String > tooltip , boolean advanced ) <nl> + + { <nl> + + } <nl> + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + <nl> public static void func _ 149671 _ p ( )
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index 102f441 . . 285581f 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 205 , 14 + 205 , 14 @ @ <nl> } <nl> <nl> protected ItemStack func _ 149644 _ j ( int p _ 149644 _ 1 _ ) <nl> - @ @ - 1116 , 6 + 1155 , 1099 @ @ <nl> + @ @ - 1116 , 6 + 1155 , 1104 @ @ <nl> return null ; <nl> } <nl> <nl> + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + / / For ForgeInternal use Only ! <nl> + protected ThreadLocal < EntityPlayer > harvesters = new ThreadLocal ( ) ; <nl> - + private ThreadLocal < Integer > silk _ check _ meta = new ThreadLocal ( ) ; <nl> + + private ThreadLocal < Integer > silk _ check _ meta = new ThreadLocal ( ) ; <nl> + / * * <nl> + * Get a light value for the block at the specified coordinates , normal ranges are between 0 and 15 <nl> + * <nl> @ @ - 380 , 7 + 380 , 7 @ @ <nl> + * @ param x X Position <nl> + * @ param y Y position <nl> + * @ param z Z position <nl> - + * @ param willHarvest True if Block . harvestBlock will be called after this , if the return in true . <nl> + + * @ param willHarvest True if Block . harvestBlock will be called after this , if the return in true . <nl> + * Can be useful to delay the destruction of tile entities till after harvestBlock <nl> + * @ return True if the block is actually destroyed . <nl> + * / <nl> @ @ - 845 , 6 + 845 , 11 @ @ <nl> + * @ param target The full target the player is looking at <nl> + * @ return A ItemStack to add to the player ' s inventory , Null if nothing should be added . <nl> + * / <nl> + + public ItemStack getPickBlock ( MovingObjectPosition target , World world , int x , int y , int z , EntityPlayer player ) <nl> + + { <nl> + + return getPickBlock ( target , world , x , y , z ) ; <nl> + + } <nl> + + @ Deprecated <nl> + public ItemStack getPickBlock ( MovingObjectPosition target , World world , int x , int y , int z ) <nl> + { <nl> + Item item = func _ 149694 _ d ( world , x , y , z ) ; <nl> @ @ - 1047 , 7 + 1052 , 7 @ @ <nl> + } <nl> + else if ( entity instanceof EntityDragon ) <nl> + { <nl> - + return this ! = Blocks . field _ 150343 _ Z & & this ! = Blocks . field _ 150377 _ bs & & this ! = Blocks . field _ 150357 _ h ; <nl> + + return this ! = Blocks . field _ 150343 _ Z & & this ! = Blocks . field _ 150377 _ bs & & this ! = Blocks . field _ 150357 _ h ; <nl> + } <nl> + <nl> + return true ; <nl> @ @ - 1141 , 7 + 1146 , 7 @ @ <nl> + <nl> + / * * <nl> + * Gathers how much experience this block drops when broken . <nl> - + * <nl> + + * <nl> + * @ param world The world <nl> + * @ param metadata <nl> + * @ param fortune <nl> @ @ - 1184 , 7 + 1189 , 7 @ @ <nl> + * If this block should be notified of weak changes . <nl> + * Weak changes are changes 1 block away through a solid block . <nl> + * Similar to comparators . <nl> - + * <nl> + + * <nl> + * @ param world The current world <nl> + * @ param x X Position <nl> + * @ param y Y position <nl> @ @ - 1201 , 7 + 1206 , 7 @ @ <nl> + private int [ ] harvestLevel = new int [ ] { - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 } ; <nl> + / * * <nl> + * Sets or removes the tool and level required to harvest this block . <nl> - + * <nl> + + * <nl> + * @ param toolClass Class <nl> + * @ param level Harvest level : <nl> + * Wood : 0 <nl> @ @ - 1220 , 7 + 1225 , 7 @ @ <nl> + <nl> + / * * <nl> + * Sets or removes the tool and level required to harvest this block . <nl> - + * <nl> + + * <nl> + * @ param toolClass Class <nl> + * @ param level Harvest level : <nl> + * Wood : 0 <nl> @ @ - 1237 , 9 + 1242 , 9 @ @ <nl> + } <nl> + <nl> + / * * <nl> - + * Queries the class of tool required to harvest this block , if null is returned <nl> + + * Queries the class of tool required to harvest this block , if null is returned <nl> + * we assume that anything can harvest this block . <nl> - + * <nl> + + * <nl> + * @ param metadata <nl> + * @ return <nl> + * / <nl> @ @ - 1251 , 7 + 1256 , 7 @ @ <nl> + / * * <nl> + * Queries the harvest level of this item stack for the specifred tool class , <nl> + * Returns - 1 if this tool is not of the specified type <nl> - + * <nl> + + * <nl> + * @ param stack This item stack instance <nl> + * @ return Harvest level , or - 1 if not the specified tool type . <nl> + * / <nl> @ @ - 1261 , 9 + 1266 , 9 @ @ <nl> + } <nl> + <nl> + / * * <nl> - + * Checks if the specified tool type is efficient on this block , <nl> + + * Checks if the specified tool type is efficient on this block , <nl> + * meaning that it digs at full speed . <nl> - + * <nl> + + * <nl> + * @ param type <nl> + * @ param metadata <nl> + * @ return <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 6b88913 . . ce11752 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 224 , 7 + 224 , 7 @ @ public class ForgeHooks <nl> return false ; <nl> } <nl> <nl> - result = block . getPickBlock ( target , world , x , y , z ) ; <nl> + result = block . getPickBlock ( target , world , x , y , z , player ) ; <nl> } <nl> else <nl> { <nl> @ @ - 475 , 10 + 475 , 10 @ @ public class ForgeHooks <nl> { <nl> itemstack . setTagCompound ( nbt ) ; <nl> } <nl> - if ( blockSnapshots . size ( ) > 1 ) <nl> + if ( blockSnapshots . size ( ) > 1 ) <nl> { <nl> placeEvent = ForgeEventFactory . onPlayerMultiBlockPlace ( player , blockSnapshots , net . minecraftforge . common . util . ForgeDirection . getOrientation ( side ) ) ; <nl> - } <nl> + } <nl> else if ( blockSnapshots . size ( ) = = 1 ) <nl> { <nl> placeEvent = ForgeEventFactory . onPlayerBlockPlace ( player , blockSnapshots . get ( 0 ) , net . minecraftforge . common . util . ForgeDirection . getOrientation ( side ) ) ; <nl> @ @ - 540 , 7 + 540 , 7 @ @ public class ForgeHooks <nl> container . stackSizeToBeUsedInRepair = e . materialCost ; <nl> return false ; <nl> } <nl> - <nl> + <nl> public static float onAnvilRepair ( EntityPlayer player , ItemStack output , ItemStack left , ItemStack right ) <nl> { <nl> AnvilRepairEvent e = new AnvilRepairEvent ( player , left , right , output ) ;

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch 
 index 5f8654e . . 8e26daf 100644 
 - - - a / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 182 , 15 + 182 , 20 @ @ 
 } 
 
 protected ItemStack func _ 180643 _ i ( IBlockState p _ 180643 _ 1 _ ) 
 - @ @ - 747 , 6 + 764 , 7 @ @ 
 + @ @ - 747 , 9 + 764 , 11 @ @ 
 p _ 176216 _ 2 _ . field _ 70181 _ x = 0 . 0D ; 
 } 
 
 + @ Deprecated / / Forge : Use more sensitive version below : getPickBlock 
 public ItemStack func _ 185473 _ a ( World p _ 185473 _ 1 _ , BlockPos p _ 185473 _ 2 _ , IBlockState p _ 185473 _ 3 _ ) 
 { 
 - return new ItemStack ( Item . func _ 150898 _ a ( this ) , 1 , this . func _ 180651 _ a ( p _ 185473 _ 3 _ ) ) ; 
 - @ @ - 844 , 6 + 862 , 1120 @ @ 
 + - return new ItemStack ( Item . func _ 150898 _ a ( this ) , 1 , this . func _ 180651 _ a ( p _ 185473 _ 3 _ ) ) ; 
 + + Item item = Item . func _ 150898 _ a ( this ) ; 
 + + return item = = null ? null : new ItemStack ( item , 1 , this . func _ 180651 _ a ( p _ 185473 _ 3 _ ) ) ; 
 + } 
 + 
 + @ SideOnly ( Side . CLIENT ) 
 + @ @ - 844 , 6 + 863 , 1141 @ @ 
 return " Block { " + field _ 149771 _ c . func _ 177774 _ c ( this ) + " } " ; 
 } 
 
 @ @ - 1275 , 13 + 1280 , 24 @ @ 
 + 
 + / * * 
 + * Queries if this block should render in a given layer . 
 - + * ISmartBlockModel can use MinecraftForgeClient . getRenderLayer to alter their model based on layer 
 + + * ISmartBlockModel can use { @ link MinecraftForgeClient # getRenderLayer ( ) } to alter their model based on layer . 
 + + * 
 + + * @ deprecated New method with state sensitivity : { @ link # canRenderInLayer ( IBlockState , BlockRenderLayer ) } 
 + * / 
 + + @ Deprecated 
 + public boolean canRenderInLayer ( BlockRenderLayer layer ) 
 + { 
 + return func _ 180664 _ k ( ) = = layer ; 
 + } 
 + 
 + + / * * 
 + + * Queries if this block should render in a given layer . 
 + + * ISmartBlockModel can use { @ link MinecraftForgeClient # getRenderLayer ( ) } to alter their model based on layer . 
 + + * / 
 + + public boolean canRenderInLayer ( IBlockState state , BlockRenderLayer layer ) 
 + + { 
 + + return canRenderInLayer ( layer ) ; 
 + + } 
 + / / For Internal use only to capture droped items inside getDrops 
 + protected static ThreadLocal < Boolean > captureDrops = new ThreadLocal < Boolean > ( ) 
 + { 
 @ @ - 1306 , 6 + 1322 , 16 @ @ 
 + } 
 + } 
 + 
 + + / * * 
 + + * Add information to the blocks tooltip , called from the default implementation of { @ link ItemBlock # addInformation ( ItemStack , EntityPlayer , List , boolean ) } 
 + + * @ param stack The stack the tooltip is being retrieved for 
 + + * @ param player The player retrieving the tooltip 
 + + * @ param tooltip The lines to be displayed on the tooltip 
 + + * @ param advanced If the client has advanced debug tooltips enabled 
 + + * / 
 + + public void addInformation ( ItemStack stack , EntityPlayer player , List < String > tooltip , boolean advanced ) 
 + + { 
 + + } 
 + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + 
 public static void func _ 149671 _ p ( )

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch 
 index 102f441 . . 285581f 100644 
 - - - a / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 205 , 14 + 205 , 14 @ @ 
 } 
 
 protected ItemStack func _ 149644 _ j ( int p _ 149644 _ 1 _ ) 
 - @ @ - 1116 , 6 + 1155 , 1099 @ @ 
 + @ @ - 1116 , 6 + 1155 , 1104 @ @ 
 return null ; 
 } 
 
 + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + / / For ForgeInternal use Only ! 
 + protected ThreadLocal < EntityPlayer > harvesters = new ThreadLocal ( ) ; 
 - + private ThreadLocal < Integer > silk _ check _ meta = new ThreadLocal ( ) ; 
 + + private ThreadLocal < Integer > silk _ check _ meta = new ThreadLocal ( ) ; 
 + / * * 
 + * Get a light value for the block at the specified coordinates , normal ranges are between 0 and 15 
 + * 
 @ @ - 380 , 7 + 380 , 7 @ @ 
 + * @ param x X Position 
 + * @ param y Y position 
 + * @ param z Z position 
 - + * @ param willHarvest True if Block . harvestBlock will be called after this , if the return in true . 
 + + * @ param willHarvest True if Block . harvestBlock will be called after this , if the return in true . 
 + * Can be useful to delay the destruction of tile entities till after harvestBlock 
 + * @ return True if the block is actually destroyed . 
 + * / 
 @ @ - 845 , 6 + 845 , 11 @ @ 
 + * @ param target The full target the player is looking at 
 + * @ return A ItemStack to add to the player ' s inventory , Null if nothing should be added . 
 + * / 
 + + public ItemStack getPickBlock ( MovingObjectPosition target , World world , int x , int y , int z , EntityPlayer player ) 
 + + { 
 + + return getPickBlock ( target , world , x , y , z ) ; 
 + + } 
 + + @ Deprecated 
 + public ItemStack getPickBlock ( MovingObjectPosition target , World world , int x , int y , int z ) 
 + { 
 + Item item = func _ 149694 _ d ( world , x , y , z ) ; 
 @ @ - 1047 , 7 + 1052 , 7 @ @ 
 + } 
 + else if ( entity instanceof EntityDragon ) 
 + { 
 - + return this ! = Blocks . field _ 150343 _ Z & & this ! = Blocks . field _ 150377 _ bs & & this ! = Blocks . field _ 150357 _ h ; 
 + + return this ! = Blocks . field _ 150343 _ Z & & this ! = Blocks . field _ 150377 _ bs & & this ! = Blocks . field _ 150357 _ h ; 
 + } 
 + 
 + return true ; 
 @ @ - 1141 , 7 + 1146 , 7 @ @ 
 + 
 + / * * 
 + * Gathers how much experience this block drops when broken . 
 - + * 
 + + * 
 + * @ param world The world 
 + * @ param metadata 
 + * @ param fortune 
 @ @ - 1184 , 7 + 1189 , 7 @ @ 
 + * If this block should be notified of weak changes . 
 + * Weak changes are changes 1 block away through a solid block . 
 + * Similar to comparators . 
 - + * 
 + + * 
 + * @ param world The current world 
 + * @ param x X Position 
 + * @ param y Y position 
 @ @ - 1201 , 7 + 1206 , 7 @ @ 
 + private int [ ] harvestLevel = new int [ ] { - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 } ; 
 + / * * 
 + * Sets or removes the tool and level required to harvest this block . 
 - + * 
 + + * 
 + * @ param toolClass Class 
 + * @ param level Harvest level : 
 + * Wood : 0 
 @ @ - 1220 , 7 + 1225 , 7 @ @ 
 + 
 + / * * 
 + * Sets or removes the tool and level required to harvest this block . 
 - + * 
 + + * 
 + * @ param toolClass Class 
 + * @ param level Harvest level : 
 + * Wood : 0 
 @ @ - 1237 , 9 + 1242 , 9 @ @ 
 + } 
 + 
 + / * * 
 - + * Queries the class of tool required to harvest this block , if null is returned 
 + + * Queries the class of tool required to harvest this block , if null is returned 
 + * we assume that anything can harvest this block . 
 - + * 
 + + * 
 + * @ param metadata 
 + * @ return 
 + * / 
 @ @ - 1251 , 7 + 1256 , 7 @ @ 
 + / * * 
 + * Queries the harvest level of this item stack for the specifred tool class , 
 + * Returns - 1 if this tool is not of the specified type 
 - + * 
 + + * 
 + * @ param stack This item stack instance 
 + * @ return Harvest level , or - 1 if not the specified tool type . 
 + * / 
 @ @ - 1261 , 9 + 1266 , 9 @ @ 
 + } 
 + 
 + / * * 
 - + * Checks if the specified tool type is efficient on this block , 
 + + * Checks if the specified tool type is efficient on this block , 
 + * meaning that it digs at full speed . 
 - + * 
 + + * 
 + * @ param type 
 + * @ param metadata 
 + * @ return 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 6b88913 . . ce11752 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 224 , 7 + 224 , 7 @ @ public class ForgeHooks 
 return false ; 
 } 
 
 - result = block . getPickBlock ( target , world , x , y , z ) ; 
 + result = block . getPickBlock ( target , world , x , y , z , player ) ; 
 } 
 else 
 { 
 @ @ - 475 , 10 + 475 , 10 @ @ public class ForgeHooks 
 { 
 itemstack . setTagCompound ( nbt ) ; 
 } 
 - if ( blockSnapshots . size ( ) > 1 ) 
 + if ( blockSnapshots . size ( ) > 1 ) 
 { 
 placeEvent = ForgeEventFactory . onPlayerMultiBlockPlace ( player , blockSnapshots , net . minecraftforge . common . util . ForgeDirection . getOrientation ( side ) ) ; 
 - } 
 + } 
 else if ( blockSnapshots . size ( ) = = 1 ) 
 { 
 placeEvent = ForgeEventFactory . onPlayerBlockPlace ( player , blockSnapshots . get ( 0 ) , net . minecraftforge . common . util . ForgeDirection . getOrientation ( side ) ) ; 
 @ @ - 540 , 7 + 540 , 7 @ @ public class ForgeHooks 
 container . stackSizeToBeUsedInRepair = e . materialCost ; 
 return false ; 
 } 
 - 
 + 
 public static float onAnvilRepair ( EntityPlayer player , ItemStack output , ItemStack left , ItemStack right ) 
 { 
 AnvilRepairEvent e = new AnvilRepairEvent ( player , left , right , output ) ;
