BLEU SCORE: 5.846488541492749E-5

TEST MSG: Changed custom entity selectors from event based to factory based .
GENERATED MSG: Add a version check mechanic to startup , it is done in a seperate thread and has a config option to compleetly disable it . This allows us to notify users of new recomended builds . Hopefully stemming the flow of outdated help request . Also adds a warning to the main screen if you are running a ' Beta ' Forge . Which means a Forge for a new version of Minecraft that we have not promoted a recomended build for yet .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / command / EntitySelector . java . patch b / patches / minecraft / net / minecraft / command / EntitySelector . java . patch <nl> index 1922004 . . 724f47f 100644 <nl> - - - a / patches / minecraft / net / minecraft / command / EntitySelector . java . patch <nl> + + + b / patches / minecraft / net / minecraft / command / EntitySelector . java . patch <nl> @ @ - 4 , 7 + 4 , 7 @ @ <nl> list2 . addAll ( func _ 184951 _ f ( map ) ) ; <nl> list2 . addAll ( func _ 180698 _ a ( map , vec3d ) ) ; <nl> list2 . addAll ( func _ 179662 _ g ( map ) ) ; <nl> - + list2 . addAll ( net . minecraftforge . event . ForgeEventFactory . gatherEntitySelectors ( map , s , p _ 179656 _ 0 _ , vec3d ) ) ; <nl> + + list2 . addAll ( net . minecraftforge . fml . common . registry . GameRegistry . createEntitySelectors ( map , s , p _ 179656 _ 0 _ , vec3d ) ) ; <nl> list1 . addAll ( func _ 179660 _ a ( map , p _ 179656 _ 2 _ , list2 , s , world , blockpos ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / event / EntitySelectorEvent . java b / src / main / java / net / minecraftforge / event / EntitySelectorEvent . java <nl> index c2aefdd . . fc76c69 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / EntitySelectorEvent . java <nl> + + + b / src / main / java / net / minecraftforge / event / EntitySelectorEvent . java <nl> @ @ - 25 , 22 + 25 , 18 @ @ import net . minecraft . command . EntitySelector ; <nl> import net . minecraft . command . ICommandSender ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . util . math . Vec3d ; <nl> - import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . IEntitySelectorFactory ; <nl> import net . minecraftforge . fml . common . eventhandler . Event ; <nl> <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> / * * <nl> - * EntitySelectorEvent is fired whenever Minecraft collects entity selectors . <nl> - * This happens ( one or multiple times ) when you use something like @ a [ gamemode = 1 ] in a command . < br > <nl> - * This event is fired via { @ link ForgeEventFactory # gatherEntitySelectors ( Map , String , ICommandSender , Vec3d ) } , <nl> - * which is executed in { @ link net . minecraft . command . EntitySelector # matchEntities ( ICommandSender , String , Class ) } < br > <nl> - * < br > <nl> - * This event is not cancelable and does not have a result . < br > <nl> - * < br > <nl> - * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } <nl> + * Is not fired anymore . <nl> + * Replaced by a factory , which has to be registered with { @ link net . minecraftforge . fml . common . registry . GameRegistry # registerEntitySelector ( IEntitySelectorFactory , String . . . ) } <nl> + * TODO remove in 1 . 12 <nl> * / <nl> + @ Deprecated <nl> public class EntitySelectorEvent extends Event <nl> { <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> index 8d84a0c . . ce244b5 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> @ @ - 253 , 6 + 253 , 10 @ @ public class ForgeEventFactory <nl> return event . getDisplayname ( ) ; <nl> } <nl> <nl> + / * * <nl> + * TODO remove in 1 . 12 <nl> + * / <nl> + @ Deprecated <nl> public static List < Predicate < Entity > > gatherEntitySelectors ( Map < String , String > map , String mainSelector , ICommandSender sender , Vec3d position ) <nl> { <nl> EntitySelectorEvent event = new EntitySelectorEvent ( map , mainSelector , sender , position ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / IEntitySelectorFactory . java b / src / main / java / net / minecraftforge / fml / common / IEntitySelectorFactory . java <nl> new file mode 100644 <nl> index 0000000 . . 8ac6d68 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / IEntitySelectorFactory . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . common ; <nl> + <nl> + import com . google . common . base . Predicate ; <nl> + import net . minecraft . command . EntitySelector ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraft . util . math . Vec3d ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + / * * <nl> + * Allows mods to create custom selectors in commands . <nl> + * Registered in { @ link net . minecraftforge . fml . common . registry . GameRegistry # registerEntitySelector ( IEntitySelectorFactory , String . . . ) } <nl> + * For an example implementation , see CustomEntitySelectorTest <nl> + * / <nl> + public interface IEntitySelectorFactory <nl> + { <nl> + / * * <nl> + * Called every time a command that contains entity selectors is executed <nl> + * <nl> + * @ param arguments A map with all arguments and their values <nl> + * @ param mainSelector The main selector string ( e . g . ' a ' for all players or ' e ' for all entities ) <nl> + * @ param sender The sender of the command <nl> + * @ param position A position either specified in the selector arguments or by the players position . See { @ link EntitySelector # getPosFromArguments ( Map , Vec3d ) } <nl> + * @ return A list of new predicates , can be empty ( { @ link Collections # emptyList ( ) } but not null . <nl> + * / <nl> + @ Nonnull List < Predicate < Entity > > createPredicates ( Map < String , String > arguments , String mainSelector , ICommandSender sender , Vec3d position ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> index bbd2e9f . . 9165960 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> @ @ - 32 , 7 + 32 , 11 @ @ import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . Set ; <nl> <nl> + import com . google . common . base . Predicate ; <nl> import net . minecraft . block . Block ; <nl> + import net . minecraft . command . EntitySelector ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . entity . Entity ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> @ @ - 45 , 6 + 49 , 7 @ @ import net . minecraft . nbt . NBTException ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . math . Vec3d ; <nl> import net . minecraft . world . World ; <nl> import net . minecraft . world . chunk . IChunkGenerator ; <nl> import net . minecraft . world . chunk . IChunkProvider ; <nl> @ @ - 55 , 6 + 60 , 7 @ @ import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderException ; <nl> import net . minecraftforge . fml . common . LoaderState ; <nl> import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; <nl> + import net . minecraftforge . fml . common . IEntitySelectorFactory ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> <nl> @ @ - 76 , 6 + 82 , 7 @ @ public class GameRegistry <nl> private static Map < IWorldGenerator , Integer > worldGeneratorIndex = Maps . newHashMap ( ) ; <nl> private static List < IFuelHandler > fuelHandlers = Lists . newArrayList ( ) ; <nl> private static List < IWorldGenerator > sortedGeneratorList ; <nl> + private static List < IEntitySelectorFactory > entitySelectorFactories = Lists . newArrayList ( ) ; <nl> <nl> / * * <nl> * Register a world generator - something that inserts new block types into the world <nl> @ @ - 95 , 6 + 102 , 49 @ @ public class GameRegistry <nl> } <nl> <nl> / * * <nl> + * Registers a entity selector factory which is used to create predicates whenever a command containing selectors is executed <nl> + * Any non vanilla arguments that you expect has to be registered . Otherwise Minecraft will throw an CommandException on usage . <nl> + * <nl> + * If you want to react to a command like " / kill @ e [ xyz = 5 ] " , you would have to register the argument " xyz " here and check for that argument in the factory . <nl> + * One factory can listen to any number of arguments as long as they are registered here . <nl> + * <nl> + * For inter mod compatibility you might want to use " modid : xyz " ( e . g . " forge : min _ health " ) as argument . <nl> + * <nl> + * For an example usage , see CustomEntitySelectorTest <nl> + * @ param arguments Expected string arguments in commands <nl> + * / <nl> + public static void registerEntitySelector ( IEntitySelectorFactory factory , String . . . arguments ) <nl> + { <nl> + entitySelectorFactories . add ( factory ) ; <nl> + for ( String s : arguments ) <nl> + { <nl> + EntitySelector . addArgument ( s ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Creates a list of entity selectors using the registered factories . <nl> + * Should probably only be called by Forge <nl> + * / <nl> + public static List < Predicate < Entity > > createEntitySelectors ( Map < String , String > arguments , String mainSelector , ICommandSender sender , Vec3d position ) <nl> + { <nl> + List < Predicate < Entity > > selectors = Lists . newArrayList ( ) ; <nl> + for ( IEntitySelectorFactory factory : entitySelectorFactories ) <nl> + { <nl> + try <nl> + { <nl> + selectors . addAll ( factory . createPredicates ( arguments , mainSelector , sender , position ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Exception caught during entity selector creation with % s for argument map % s of % s for % s at % s " , factory , <nl> + arguments , mainSelector , sender , position ) ; <nl> + } <nl> + } <nl> + return selectors ; <nl> + } <nl> + <nl> + / * * <nl> * Callback hook for world gen - if your mod wishes to add extra mod related generation to the world <nl> * call this <nl> * <nl> diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg <nl> index 09d7de0 . . 9b57f88 100644 <nl> - - - a / src / main / resources / forge _ at . cfg <nl> + + + b / src / main / resources / forge _ at . cfg <nl> @ @ - 303 , 4 + 303 , 7 @ @ protected net . minecraft . entity . monster . EntityWitherSkeleton func _ 190727 _ o ( ) Lnet / <nl> protected net . minecraft . entity . monster . EntityStray func _ 190727 _ o ( ) Lnet / minecraft / util / SoundEvent ; # getStepSound - make AbstractSkeleton implementable <nl> <nl> # EntitySkeleton <nl> - protected net . minecraft . entity . monster . EntitySkeleton func _ 190727 _ o ( ) Lnet / minecraft / util / SoundEvent ; # getStepSound - make AbstractSkeleton implementable <nl> \ No newline at end of file <nl> + protected net . minecraft . entity . monster . EntitySkeleton func _ 190727 _ o ( ) Lnet / minecraft / util / SoundEvent ; # getStepSound - make AbstractSkeleton implementable <nl> + <nl> + # EntitySelector <nl> + public net . minecraft . command . EntitySelector func _ 190826 _ c ( Ljava / lang / String ; ) Ljava / lang / String ; # addArgument <nl> \ No newline at end of file <nl> diff - - git a / src / test / java / net / minecraftforge / test / CustomEntitySelectorTest . java b / src / test / java / net / minecraftforge / test / CustomEntitySelectorTest . java <nl> new file mode 100644 <nl> index 0000000 . . 7450cf6 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / CustomEntitySelectorTest . java <nl> @ @ - 0 , 0 + 1 , 77 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import com . google . common . base . Predicate ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraft . entity . EntityLivingBase ; <nl> + import net . minecraft . util . math . Vec3d ; <nl> + import net . minecraft . util . text . TextComponentString ; <nl> + import net . minecraftforge . fml . common . IEntitySelectorFactory ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + import javax . annotation . Nullable ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + / * * <nl> + * You can verify that this test is working fine by following these steps . <nl> + * Spawn a few cows and a few sheep and then use " / kill @ e [ forge : min _ health = ! 10 ] " <nl> + * All entities with less than 10 health points ( current , not max ) should die . <nl> + * This should include the sheep , but not the ( healthy ) cows . <nl> + * <nl> + * / <nl> + @ Mod ( modid = " customentityselectortest " , name = " Custom Entity Selector Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class CustomEntitySelectorTest <nl> + { <nl> + <nl> + @ Mod . EventHandler <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + GameRegistry . registerEntitySelector ( new EntitySelectorFactory ( ) , " forge : min _ health " ) ; <nl> + } <nl> + <nl> + private class EntitySelectorFactory implements IEntitySelectorFactory <nl> + { <nl> + <nl> + @ Nonnull @ Override <nl> + public List < Predicate < Entity > > createPredicates ( Map < String , String > arguments , String mainSelector , ICommandSender sender , Vec3d position ) <nl> + { <nl> + String health = arguments . get ( " forge : min _ health " ) ; <nl> + <nl> + / / If our selector is used in this command create a Predicate otherwise return an empty list . <nl> + if ( health ! = null ) <nl> + { <nl> + final boolean invert = health . startsWith ( " ! " ) ; <nl> + <nl> + if ( invert ) <nl> + { <nl> + health = health . substring ( 1 ) ; <nl> + } <nl> + try <nl> + { <nl> + final int value = Integer . parseInt ( health ) ; <nl> + <nl> + / / Return a list of predicates . All these predicates have to apply for any entity to be selected . <nl> + return Collections . < Predicate < Entity > > singletonList ( new Predicate < Entity > ( ) <nl> + { <nl> + @ Override <nl> + public boolean apply ( @ Nullable Entity input ) <nl> + { <nl> + if ( ! ( input instanceof EntityLivingBase ) ) return false ; <nl> + return ( ( ( EntityLivingBase ) input ) . getHealth ( ) > = value ) ! = invert ; <nl> + } <nl> + } ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + sender . sendMessage ( new TextComponentString ( " Entity selector ' forge : min _ health ' has to be an integer " ) ) ; <nl> + } <nl> + } <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 5cd478c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + @ @ - 30 , 6 + 30 , 7 @ @ <nl> + import net . minecraft . world . demo . DemoWorldServer ; <nl> + import net . minecraft . world . storage . ISaveFormat ; <nl> + import net . minecraft . world . storage . WorldInfo ; <nl> + + import net . minecraftforge . client . ForgeHooksClient ; <nl> + import org . apache . commons . io . Charsets ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + @ @ - 630 , 6 + 631 , 7 @ @ <nl> + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; <nl> + } <nl> + } <nl> + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; <nl> + String s1 = " Copyright Mojang AB . Do not distribute ! " ; <nl> + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 10266a2 . . 4ec67c7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 1 , 6 + 1 , 12 @ @ <nl> package net . minecraftforge . client ; <nl> <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> + import java . net . URLConnection ; <nl> import java . util . HashMap ; <nl> + import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . TreeSet ; <nl> <nl> @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; <nl> <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> import net . minecraft . client . entity . EntityPlayerSP ; <nl> + import net . minecraft . client . gui . FontRenderer ; <nl> + import net . minecraft . client . gui . GuiMainMenu ; <nl> import net . minecraftforge . client . event . FOVUpdateEvent ; <nl> <nl> import org . lwjgl . LWJGLException ; <nl> @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; <nl> import org . lwjgl . opengl . GL12 ; <nl> import org . lwjgl . opengl . PixelFormat ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + import com . google . gson . JsonParseException ; <nl> + <nl> import cpw . mods . fml . client . FMLClientHandler ; <nl> import cpw . mods . fml . client . registry . RenderingRegistry ; <nl> + import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockLiquid ; <nl> @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . ChatComponentTranslation ; <nl> + import net . minecraft . util . EnumChatFormatting ; <nl> import net . minecraft . util . MathHelper ; <nl> import net . minecraft . util . MovingObjectPosition ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fluids . RenderBlockFluid ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> public class ForgeHooksClient <nl> { <nl> @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient <nl> / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; <nl> / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; <nl> } <nl> + <nl> + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) <nl> + { <nl> + Status status = ForgeVersion . getStatus ( ) ; <nl> + if ( status = = BETA | | status = = BETA _ OUTDATED ) <nl> + { <nl> + / / render a warning at the top of the screen , <nl> + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + line = " Major issues may arise , verify before reporting . " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + <nl> + String line = null ; <nl> + switch ( status ) <nl> + { <nl> + / / case FAILED : line = " Version check failed " ; break ; <nl> + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; <nl> + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; <nl> + case OUTDATED : <nl> + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; <nl> + default : break ; <nl> + } <nl> + <nl> + if ( line ! = null ) <nl> + { <nl> + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line <nl> + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> index d18f81a . . 86de438 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame <nl> private ScaledResolution res = null ; <nl> private FontRenderer fontrenderer = null ; <nl> private RenderGameOverlayEvent eventParent ; <nl> - private static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; <nl> <nl> public GuiIngameForge ( Minecraft mc ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 145a3c5 . . 9ca5fab 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; <nl> <nl> public class ForgeHooks <nl> { <nl> - static class GrassEntry extends WeightedRandom . Item <nl> - { <nl> - public final Block block ; <nl> - public final int metadata ; <nl> - public GrassEntry ( Block block , int meta , int weight ) <nl> - { <nl> - super ( weight ) ; <nl> - this . block = block ; <nl> - this . metadata = meta ; <nl> - } <nl> - } <nl> - <nl> static class SeedEntry extends WeightedRandom . Item <nl> { <nl> public final ItemStack seed ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 4072090 . . d54730a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static double zombieSummonBaseChance = 0 . 1 ; <nl> public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; <nl> public static float zombieBabyChance = 0 . 05f ; <nl> - public static boolean shouldSortRecipies = false ; <nl> + public static boolean shouldSortRecipies = true ; <nl> + public static boolean disableVersionCheck = false ; <nl> <nl> public ForgeModContainer ( ) <nl> { <nl> @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; <nl> shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; <nl> <nl> + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; <nl> + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; <nl> + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; <nl> + <nl> if ( config . hasChanged ( ) ) <nl> { <nl> config . save ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 3dfe78e . . 0d4d751 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 4 , 6 + 4 , 17 @ @ <nl> * / <nl> <nl> package net . minecraftforge . common ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> + <nl> + import java . io . InputStream ; <nl> + import java . net . URL ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> <nl> public class ForgeVersion <nl> { <nl> @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion <nl> / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> public static final int buildVersion = 0 ; <nl> <nl> + private static Status status = PENDING ; <nl> + private static String target = null ; <nl> + <nl> public static int getMajorVersion ( ) <nl> { <nl> return majorVersion ; <nl> @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion <nl> return buildVersion ; <nl> } <nl> <nl> + public static Status getStatus ( ) <nl> + { <nl> + return status ; <nl> + } <nl> + <nl> + public static String getTarget ( ) <nl> + { <nl> + return target ; <nl> + } <nl> + <nl> public static String getVersion ( ) <nl> { <nl> return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> } <nl> + <nl> + public static enum Status <nl> + { <nl> + PENDING , <nl> + FAILED , <nl> + UP _ TO _ DATE , <nl> + OUTDATED , <nl> + AHEAD , <nl> + BETA , <nl> + BETA _ OUTDATED <nl> + } <nl> + <nl> + public static void startVersionCheck ( ) <nl> + { <nl> + new Thread ( " Forge Version Check " ) <nl> + { <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + try <nl> + { <nl> + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + InputStream con = url . openStream ( ) ; <nl> + String data = new String ( ByteStreams . toByteArray ( con ) ) ; <nl> + con . close ( ) ; <nl> + <nl> + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; <nl> + String homepage = ( String ) json . get ( " homepage " ) ; <nl> + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; <nl> + <nl> + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; <nl> + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; <nl> + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; <nl> + <nl> + if ( rec ! = null ) <nl> + { <nl> + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; <nl> + int diff = recommended . compareTo ( current ) ; <nl> + <nl> + if ( diff = = 0 ) <nl> + status = UP _ TO _ DATE ; <nl> + else if ( diff < 0 ) <nl> + { <nl> + status = AHEAD ; <nl> + if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + } <nl> + } <nl> + else <nl> + { <nl> + status = OUTDATED ; <nl> + target = rec ; <nl> + } <nl> + } <nl> + else if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = BETA _ OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + status = FAILED ; <nl> + } <nl> + } <nl> + } . start ( ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> index bb4a94e . . 3a98b16 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . entity . monster . EntityEnderman ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraftforge . common . ForgeHooks . GrassEntry ; <nl> import net . minecraftforge . common . ForgeHooks . SeedEntry ; <nl> import net . minecraftforge . event . entity . EntityEvent ; <nl> import net . minecraftforge . oredict . OreDictionary ; <nl> @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge <nl> public static final EventBus EVENT _ BUS = new EventBus ( ) ; <nl> public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; <nl> public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; <nl> + public static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> <nl> private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; <nl> <nl> @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge <nl> EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; <nl> OreDictionary . getOreName ( 0 ) ; <nl> <nl> + if ( ! ForgeModContainer . disableVersionCheck ) <nl> + { <nl> + ForgeVersion . startVersionCheck ( ) ; <nl> + } <nl> + <nl> / / Force these classes to be defined , Should prevent derp error hiding . <nl> new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; <nl> }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / command / EntitySelector . java . patch b / patches / minecraft / net / minecraft / command / EntitySelector . java . patch 
 index 1922004 . . 724f47f 100644 
 - - - a / patches / minecraft / net / minecraft / command / EntitySelector . java . patch 
 + + + b / patches / minecraft / net / minecraft / command / EntitySelector . java . patch 
 @ @ - 4 , 7 + 4 , 7 @ @ 
 list2 . addAll ( func _ 184951 _ f ( map ) ) ; 
 list2 . addAll ( func _ 180698 _ a ( map , vec3d ) ) ; 
 list2 . addAll ( func _ 179662 _ g ( map ) ) ; 
 - + list2 . addAll ( net . minecraftforge . event . ForgeEventFactory . gatherEntitySelectors ( map , s , p _ 179656 _ 0 _ , vec3d ) ) ; 
 + + list2 . addAll ( net . minecraftforge . fml . common . registry . GameRegistry . createEntitySelectors ( map , s , p _ 179656 _ 0 _ , vec3d ) ) ; 
 list1 . addAll ( func _ 179660 _ a ( map , p _ 179656 _ 2 _ , list2 , s , world , blockpos ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / event / EntitySelectorEvent . java b / src / main / java / net / minecraftforge / event / EntitySelectorEvent . java 
 index c2aefdd . . fc76c69 100644 
 - - - a / src / main / java / net / minecraftforge / event / EntitySelectorEvent . java 
 + + + b / src / main / java / net / minecraftforge / event / EntitySelectorEvent . java 
 @ @ - 25 , 22 + 25 , 18 @ @ import net . minecraft . command . EntitySelector ; 
 import net . minecraft . command . ICommandSender ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . util . math . Vec3d ; 
 - import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . IEntitySelectorFactory ; 
 import net . minecraftforge . fml . common . eventhandler . Event ; 
 
 import java . util . List ; 
 import java . util . Map ; 
 
 / * * 
 - * EntitySelectorEvent is fired whenever Minecraft collects entity selectors . 
 - * This happens ( one or multiple times ) when you use something like @ a [ gamemode = 1 ] in a command . < br > 
 - * This event is fired via { @ link ForgeEventFactory # gatherEntitySelectors ( Map , String , ICommandSender , Vec3d ) } , 
 - * which is executed in { @ link net . minecraft . command . EntitySelector # matchEntities ( ICommandSender , String , Class ) } < br > 
 - * < br > 
 - * This event is not cancelable and does not have a result . < br > 
 - * < br > 
 - * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } 
 + * Is not fired anymore . 
 + * Replaced by a factory , which has to be registered with { @ link net . minecraftforge . fml . common . registry . GameRegistry # registerEntitySelector ( IEntitySelectorFactory , String . . . ) } 
 + * TODO remove in 1 . 12 
 * / 
 + @ Deprecated 
 public class EntitySelectorEvent extends Event 
 { 
 
 diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 index 8d84a0c . . ce244b5 100644 
 - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 @ @ - 253 , 6 + 253 , 10 @ @ public class ForgeEventFactory 
 return event . getDisplayname ( ) ; 
 } 
 
 + / * * 
 + * TODO remove in 1 . 12 
 + * / 
 + @ Deprecated 
 public static List < Predicate < Entity > > gatherEntitySelectors ( Map < String , String > map , String mainSelector , ICommandSender sender , Vec3d position ) 
 { 
 EntitySelectorEvent event = new EntitySelectorEvent ( map , mainSelector , sender , position ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / IEntitySelectorFactory . java b / src / main / java / net / minecraftforge / fml / common / IEntitySelectorFactory . java 
 new file mode 100644 
 index 0000000 . . 8ac6d68 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / IEntitySelectorFactory . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . common ; 
 + 
 + import com . google . common . base . Predicate ; 
 + import net . minecraft . command . EntitySelector ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraft . util . math . Vec3d ; 
 + 
 + import javax . annotation . Nonnull ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + / * * 
 + * Allows mods to create custom selectors in commands . 
 + * Registered in { @ link net . minecraftforge . fml . common . registry . GameRegistry # registerEntitySelector ( IEntitySelectorFactory , String . . . ) } 
 + * For an example implementation , see CustomEntitySelectorTest 
 + * / 
 + public interface IEntitySelectorFactory 
 + { 
 + / * * 
 + * Called every time a command that contains entity selectors is executed 
 + * 
 + * @ param arguments A map with all arguments and their values 
 + * @ param mainSelector The main selector string ( e . g . ' a ' for all players or ' e ' for all entities ) 
 + * @ param sender The sender of the command 
 + * @ param position A position either specified in the selector arguments or by the players position . See { @ link EntitySelector # getPosFromArguments ( Map , Vec3d ) } 
 + * @ return A list of new predicates , can be empty ( { @ link Collections # emptyList ( ) } but not null . 
 + * / 
 + @ Nonnull List < Predicate < Entity > > createPredicates ( Map < String , String > arguments , String mainSelector , ICommandSender sender , Vec3d position ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 index bbd2e9f . . 9165960 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 @ @ - 32 , 7 + 32 , 11 @ @ import java . util . Map ; 
 import java . util . Random ; 
 import java . util . Set ; 
 
 + import com . google . common . base . Predicate ; 
 import net . minecraft . block . Block ; 
 + import net . minecraft . command . EntitySelector ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . entity . Entity ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 @ @ - 45 , 6 + 49 , 7 @ @ import net . minecraft . nbt . NBTException ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . tileentity . TileEntity ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . math . Vec3d ; 
 import net . minecraft . world . World ; 
 import net . minecraft . world . chunk . IChunkGenerator ; 
 import net . minecraft . world . chunk . IChunkProvider ; 
 @ @ - 55 , 6 + 60 , 7 @ @ import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderException ; 
 import net . minecraftforge . fml . common . LoaderState ; 
 import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; 
 + import net . minecraftforge . fml . common . IEntitySelectorFactory ; 
 
 import org . apache . logging . log4j . Level ; 
 
 @ @ - 76 , 6 + 82 , 7 @ @ public class GameRegistry 
 private static Map < IWorldGenerator , Integer > worldGeneratorIndex = Maps . newHashMap ( ) ; 
 private static List < IFuelHandler > fuelHandlers = Lists . newArrayList ( ) ; 
 private static List < IWorldGenerator > sortedGeneratorList ; 
 + private static List < IEntitySelectorFactory > entitySelectorFactories = Lists . newArrayList ( ) ; 
 
 / * * 
 * Register a world generator - something that inserts new block types into the world 
 @ @ - 95 , 6 + 102 , 49 @ @ public class GameRegistry 
 } 
 
 / * * 
 + * Registers a entity selector factory which is used to create predicates whenever a command containing selectors is executed 
 + * Any non vanilla arguments that you expect has to be registered . Otherwise Minecraft will throw an CommandException on usage . 
 + * 
 + * If you want to react to a command like " / kill @ e [ xyz = 5 ] " , you would have to register the argument " xyz " here and check for that argument in the factory . 
 + * One factory can listen to any number of arguments as long as they are registered here . 
 + * 
 + * For inter mod compatibility you might want to use " modid : xyz " ( e . g . " forge : min _ health " ) as argument . 
 + * 
 + * For an example usage , see CustomEntitySelectorTest 
 + * @ param arguments Expected string arguments in commands 
 + * / 
 + public static void registerEntitySelector ( IEntitySelectorFactory factory , String . . . arguments ) 
 + { 
 + entitySelectorFactories . add ( factory ) ; 
 + for ( String s : arguments ) 
 + { 
 + EntitySelector . addArgument ( s ) ; 
 + } 
 + } 
 + 
 + / * * 
 + * Creates a list of entity selectors using the registered factories . 
 + * Should probably only be called by Forge 
 + * / 
 + public static List < Predicate < Entity > > createEntitySelectors ( Map < String , String > arguments , String mainSelector , ICommandSender sender , Vec3d position ) 
 + { 
 + List < Predicate < Entity > > selectors = Lists . newArrayList ( ) ; 
 + for ( IEntitySelectorFactory factory : entitySelectorFactories ) 
 + { 
 + try 
 + { 
 + selectors . addAll ( factory . createPredicates ( arguments , mainSelector , sender , position ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Exception caught during entity selector creation with % s for argument map % s of % s for % s at % s " , factory , 
 + arguments , mainSelector , sender , position ) ; 
 + } 
 + } 
 + return selectors ; 
 + } 
 + 
 + / * * 
 * Callback hook for world gen - if your mod wishes to add extra mod related generation to the world 
 * call this 
 * 
 diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg 
 index 09d7de0 . . 9b57f88 100644 
 - - - a / src / main / resources / forge _ at . cfg 
 + + + b / src / main / resources / forge _ at . cfg 
 @ @ - 303 , 4 + 303 , 7 @ @ protected net . minecraft . entity . monster . EntityWitherSkeleton func _ 190727 _ o ( ) Lnet / 
 protected net . minecraft . entity . monster . EntityStray func _ 190727 _ o ( ) Lnet / minecraft / util / SoundEvent ; # getStepSound - make AbstractSkeleton implementable 
 
 # EntitySkeleton 
 - protected net . minecraft . entity . monster . EntitySkeleton func _ 190727 _ o ( ) Lnet / minecraft / util / SoundEvent ; # getStepSound - make AbstractSkeleton implementable 
 \ No newline at end of file 
 + protected net . minecraft . entity . monster . EntitySkeleton func _ 190727 _ o ( ) Lnet / minecraft / util / SoundEvent ; # getStepSound - make AbstractSkeleton implementable 
 + 
 + # EntitySelector 
 + public net . minecraft . command . EntitySelector func _ 190826 _ c ( Ljava / lang / String ; ) Ljava / lang / String ; # addArgument 
 \ No newline at end of file 
 diff - - git a / src / test / java / net / minecraftforge / test / CustomEntitySelectorTest . java b / src / test / java / net / minecraftforge / test / CustomEntitySelectorTest . java 
 new file mode 100644 
 index 0000000 . . 7450cf6 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / CustomEntitySelectorTest . java 
 @ @ - 0 , 0 + 1 , 77 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import com . google . common . base . Predicate ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraft . entity . EntityLivingBase ; 
 + import net . minecraft . util . math . Vec3d ; 
 + import net . minecraft . util . text . TextComponentString ; 
 + import net . minecraftforge . fml . common . IEntitySelectorFactory ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + import javax . annotation . Nonnull ; 
 + import javax . annotation . Nullable ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + / * * 
 + * You can verify that this test is working fine by following these steps . 
 + * Spawn a few cows and a few sheep and then use " / kill @ e [ forge : min _ health = ! 10 ] " 
 + * All entities with less than 10 health points ( current , not max ) should die . 
 + * This should include the sheep , but not the ( healthy ) cows . 
 + * 
 + * / 
 + @ Mod ( modid = " customentityselectortest " , name = " Custom Entity Selector Test " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class CustomEntitySelectorTest 
 + { 
 + 
 + @ Mod . EventHandler 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + GameRegistry . registerEntitySelector ( new EntitySelectorFactory ( ) , " forge : min _ health " ) ; 
 + } 
 + 
 + private class EntitySelectorFactory implements IEntitySelectorFactory 
 + { 
 + 
 + @ Nonnull @ Override 
 + public List < Predicate < Entity > > createPredicates ( Map < String , String > arguments , String mainSelector , ICommandSender sender , Vec3d position ) 
 + { 
 + String health = arguments . get ( " forge : min _ health " ) ; 
 + 
 + / / If our selector is used in this command create a Predicate otherwise return an empty list . 
 + if ( health ! = null ) 
 + { 
 + final boolean invert = health . startsWith ( " ! " ) ; 
 + 
 + if ( invert ) 
 + { 
 + health = health . substring ( 1 ) ; 
 + } 
 + try 
 + { 
 + final int value = Integer . parseInt ( health ) ; 
 + 
 + / / Return a list of predicates . All these predicates have to apply for any entity to be selected . 
 + return Collections . < Predicate < Entity > > singletonList ( new Predicate < Entity > ( ) 
 + { 
 + @ Override 
 + public boolean apply ( @ Nullable Entity input ) 
 + { 
 + if ( ! ( input instanceof EntityLivingBase ) ) return false ; 
 + return ( ( ( EntityLivingBase ) input ) . getHealth ( ) > = value ) ! = invert ; 
 + } 
 + } ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + sender . sendMessage ( new TextComponentString ( " Entity selector ' forge : min _ health ' has to be an integer " ) ) ; 
 + } 
 + } 
 + return Collections . emptyList ( ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 new file mode 100644 
 index 0000000 . . 5cd478c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + @ @ - 30 , 6 + 30 , 7 @ @ 
 + import net . minecraft . world . demo . DemoWorldServer ; 
 + import net . minecraft . world . storage . ISaveFormat ; 
 + import net . minecraft . world . storage . WorldInfo ; 
 + + import net . minecraftforge . client . ForgeHooksClient ; 
 + import org . apache . commons . io . Charsets ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + @ @ - 630 , 6 + 631 , 7 @ @ 
 + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; 
 + } 
 + } 
 + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; 
 + String s1 = " Copyright Mojang AB . Do not distribute ! " ; 
 + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; 
 + 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 10266a2 . . 4ec67c7 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 1 , 6 + 1 , 12 @ @ 
 package net . minecraftforge . client ; 
 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 + import java . net . URLConnection ; 
 import java . util . HashMap ; 
 + import java . util . Map ; 
 import java . util . Random ; 
 import java . util . TreeSet ; 
 
 @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; 
 
 import net . minecraftforge . client . event . MouseEvent ; 
 import net . minecraft . client . entity . EntityPlayerSP ; 
 + import net . minecraft . client . gui . FontRenderer ; 
 + import net . minecraft . client . gui . GuiMainMenu ; 
 import net . minecraftforge . client . event . FOVUpdateEvent ; 
 
 import org . lwjgl . LWJGLException ; 
 @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; 
 import org . lwjgl . opengl . GL12 ; 
 import org . lwjgl . opengl . PixelFormat ; 
 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + import com . google . gson . JsonParseException ; 
 + 
 import cpw . mods . fml . client . FMLClientHandler ; 
 import cpw . mods . fml . client . registry . RenderingRegistry ; 
 + import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockLiquid ; 
 @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . ChatComponentTranslation ; 
 + import net . minecraft . util . EnumChatFormatting ; 
 import net . minecraft . util . MathHelper ; 
 import net . minecraft . util . MovingObjectPosition ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fluids . RenderBlockFluid ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 public class ForgeHooksClient 
 { 
 @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient 
 / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; 
 / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; 
 } 
 + 
 + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) 
 + { 
 + Status status = ForgeVersion . getStatus ( ) ; 
 + if ( status = = BETA | | status = = BETA _ OUTDATED ) 
 + { 
 + / / render a warning at the top of the screen , 
 + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + line = " Major issues may arise , verify before reporting . " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + 
 + String line = null ; 
 + switch ( status ) 
 + { 
 + / / case FAILED : line = " Version check failed " ; break ; 
 + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; 
 + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; 
 + case OUTDATED : 
 + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; 
 + default : break ; 
 + } 
 + 
 + if ( line ! = null ) 
 + { 
 + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line 
 + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 index d18f81a . . 86de438 100644 
 - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame 
 private ScaledResolution res = null ; 
 private FontRenderer fontrenderer = null ; 
 private RenderGameOverlayEvent eventParent ; 
 - private static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; 
 
 public GuiIngameForge ( Minecraft mc ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 145a3c5 . . 9ca5fab 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; 
 
 public class ForgeHooks 
 { 
 - static class GrassEntry extends WeightedRandom . Item 
 - { 
 - public final Block block ; 
 - public final int metadata ; 
 - public GrassEntry ( Block block , int meta , int weight ) 
 - { 
 - super ( weight ) ; 
 - this . block = block ; 
 - this . metadata = meta ; 
 - } 
 - } 
 - 
 static class SeedEntry extends WeightedRandom . Item 
 { 
 public final ItemStack seed ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 4072090 . . d54730a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static double zombieSummonBaseChance = 0 . 1 ; 
 public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; 
 public static float zombieBabyChance = 0 . 05f ; 
 - public static boolean shouldSortRecipies = false ; 
 + public static boolean shouldSortRecipies = true ; 
 + public static boolean disableVersionCheck = false ; 
 
 public ForgeModContainer ( ) 
 { 
 @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; 
 shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; 
 
 + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; 
 + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; 
 + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; 
 + 
 if ( config . hasChanged ( ) ) 
 { 
 config . save ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 3dfe78e . . 0d4d751 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 4 , 6 + 4 , 17 @ @ 
 * / 
 
 package net . minecraftforge . common ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 + 
 + import java . io . InputStream ; 
 + import java . net . URL ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 
 public class ForgeVersion 
 { 
 @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion 
 / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 public static final int buildVersion = 0 ; 
 
 + private static Status status = PENDING ; 
 + private static String target = null ; 
 + 
 public static int getMajorVersion ( ) 
 { 
 return majorVersion ; 
 @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion 
 return buildVersion ; 
 } 
 
 + public static Status getStatus ( ) 
 + { 
 + return status ; 
 + } 
 + 
 + public static String getTarget ( ) 
 + { 
 + return target ; 
 + } 
 + 
 public static String getVersion ( ) 
 { 
 return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 } 
 + 
 + public static enum Status 
 + { 
 + PENDING , 
 + FAILED , 
 + UP _ TO _ DATE , 
 + OUTDATED , 
 + AHEAD , 
 + BETA , 
 + BETA _ OUTDATED 
 + } 
 + 
 + public static void startVersionCheck ( ) 
 + { 
 + new Thread ( " Forge Version Check " ) 
 + { 
 + @ Override 
 + public void run ( ) 
 + { 
 + try 
 + { 
 + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + InputStream con = url . openStream ( ) ; 
 + String data = new String ( ByteStreams . toByteArray ( con ) ) ; 
 + con . close ( ) ; 
 + 
 + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; 
 + String homepage = ( String ) json . get ( " homepage " ) ; 
 + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; 
 + 
 + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; 
 + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; 
 + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; 
 + 
 + if ( rec ! = null ) 
 + { 
 + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; 
 + int diff = recommended . compareTo ( current ) ; 
 + 
 + if ( diff = = 0 ) 
 + status = UP _ TO _ DATE ; 
 + else if ( diff < 0 ) 
 + { 
 + status = AHEAD ; 
 + if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = OUTDATED ; 
 + target = lat ; 
 + } 
 + } 
 + } 
 + else 
 + { 
 + status = OUTDATED ; 
 + target = rec ; 
 + } 
 + } 
 + else if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = BETA _ OUTDATED ; 
 + target = lat ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + status = FAILED ; 
 + } 
 + } 
 + } . start ( ) ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 index bb4a94e . . 3a98b16 100644 
 - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; 
 import net . minecraft . entity . monster . EntityEnderman ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraftforge . common . ForgeHooks . GrassEntry ; 
 import net . minecraftforge . common . ForgeHooks . SeedEntry ; 
 import net . minecraftforge . event . entity . EntityEvent ; 
 import net . minecraftforge . oredict . OreDictionary ; 
 @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge 
 public static final EventBus EVENT _ BUS = new EventBus ( ) ; 
 public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; 
 public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; 
 + public static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 
 private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; 
 
 @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge 
 EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; 
 OreDictionary . getOreName ( 0 ) ; 
 
 + if ( ! ForgeModContainer . disableVersionCheck ) 
 + { 
 + ForgeVersion . startVersionCheck ( ) ; 
 + } 
 + 
 / / Force these classes to be defined , Should prevent derp error hiding . 
 new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; 
 }
