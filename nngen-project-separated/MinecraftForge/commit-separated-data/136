BLEU SCORE: 0.01219258491591221

TEST MSG: Add utilities that RuntimeEnumExtender expects to exist
GENERATED MSG: Add ability for modders to designate custom biome types . And remove note about automatically registering . Closes # 1167

TEST DIFF (one line): diff - - git a / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> index 2e7cc1f . . 2188ce2 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> @ @ - 45 , 7 + 45 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> private final Type ENUM = Type . getType ( Enum . class ) ; <nl> private final Type ARRAY _ UTILS = Type . getType ( " Lorg / apache / commons / lang3 / ArrayUtils ; " ) ; / / Don ' t directly reference this to prevent class loading . <nl> private final String ADD _ DESC = Type . getMethodDescriptor ( Type . getType ( Object [ ] . class ) , Type . getType ( Object [ ] . class ) , Type . getType ( Object . class ) ) ; <nl> - private final Type ENUM _ HELPER = Type . getType ( " Lnet / minecraftforge / common / util / EnumHelper ; " ) ; / / Again , not direct reference to prevent class loading . <nl> + private final Type UNSAFE _ HACKS = Type . getType ( " Lnet / minecraftforge / fml / UnsafeHacks ; " ) ; / / Again , not direct reference to prevent class loading . <nl> private final String CLEAN _ DESC = Type . getMethodDescriptor ( Type . VOID _ TYPE , Type . getType ( Class . class ) ) ; <nl> private final String NAME _ DESC = Type . getMethodDescriptor ( STRING ) ; <nl> private final String EQUALS _ DESC = Type . getMethodDescriptor ( Type . BOOLEAN _ TYPE , STRING ) ; <nl> @ @ - 181 , 7 + 181 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> ins . putstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> / / EnumHelper . cleanEnumCache ( ThisType . class ) <nl> ins . visitLdcInsn ( classType ) ; <nl> - ins . invokestatic ( ENUM _ HELPER . getInternalName ( ) , " cleanEnumCache " , CLEAN _ DESC , false ) ; <nl> + ins . invokestatic ( UNSAFE _ HACKS . getInternalName ( ) , " cleanEnumCache " , CLEAN _ DESC , false ) ; <nl> / / return ret <nl> ins . load ( vars , classType ) ; <nl> ins . areturn ( classType ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / UnsafeHacks . java b / src / main / java / net / minecraftforge / fml / UnsafeHacks . java <nl> index a91411e . . 80ec3a5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / UnsafeHacks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / UnsafeHacks . java <nl> @ @ - 19 , 14 + 19 , 17 @ @ <nl> <nl> package net . minecraftforge . fml ; <nl> <nl> - import sun . misc . Unsafe ; <nl> - <nl> import java . lang . reflect . Field ; <nl> + import java . util . Optional ; <nl> + <nl> + import sun . misc . Unsafe ; <nl> <nl> + @ SuppressWarnings ( " restriction " ) <nl> public class UnsafeHacks <nl> { <nl> private static final Unsafe UNSAFE ; <nl> - static { <nl> + static <nl> + { <nl> try <nl> { <nl> final Field theUnsafe = Unsafe . class . getDeclaredField ( " theUnsafe " ) ; <nl> @ @ - 40 , 11 + 43 , 11 @ @ public class UnsafeHacks <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public static < T > T newInstance ( Class < T > packetClass ) <nl> + public static < T > T newInstance ( Class < T > clazz ) <nl> { <nl> try <nl> { <nl> - return ( T ) UNSAFE . allocateInstance ( packetClass ) ; <nl> + return ( T ) UNSAFE . allocateInstance ( clazz ) ; <nl> } <nl> catch ( InstantiationException e ) <nl> { <nl> @ @ - 53 , 15 + 56 , 16 @ @ public class UnsafeHacks <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public static < T > T getField ( Field field , Object object ) { <nl> + public static < T > T getField ( Field field , Object object ) <nl> + { <nl> final long l = UNSAFE . objectFieldOffset ( field ) ; <nl> return ( T ) UNSAFE . getObject ( object , l ) ; <nl> } <nl> <nl> - public static void setField ( Field data , Object object , Object buffer ) <nl> + public static void setField ( Field data , Object object , Object value ) <nl> { <nl> long offset = UNSAFE . objectFieldOffset ( data ) ; <nl> - UNSAFE . putObject ( object , offset , buffer ) ; <nl> + UNSAFE . putObject ( object , offset , value ) ; <nl> } <nl> <nl> public static int getIntField ( Field f , Object obj ) <nl> @ @ - 75 , 4 + 79 , 23 @ @ public class UnsafeHacks <nl> long offset = UNSAFE . objectFieldOffset ( data ) ; <nl> UNSAFE . putInt ( object , offset , value ) ; <nl> } <nl> + <nl> + / / Make sure we don ' t crash if any future versions change field names <nl> + private static Optional < Field > findField ( Class < ? > clazz , String name ) <nl> + { <nl> + for ( Field f : clazz . getDeclaredFields ( ) ) <nl> + { <nl> + if ( f . getName ( ) . equals ( name ) ) <nl> + { <nl> + return Optional . of ( f ) ; <nl> + } <nl> + } <nl> + return Optional . empty ( ) ; <nl> + } <nl> + <nl> + public static void cleanEnumCache ( Class < ? extends Enum < ? > > enumClass ) throws Exception <nl> + { <nl> + findField ( Class . class , " enumConstantDirectory " ) . ifPresent ( f - > setField ( f , enumClass , null ) ) ; <nl> + findField ( Class . class , " enumConstants " ) . ifPresent ( f - > setField ( f , enumClass , null ) ) ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> index a62ed47 . . 726cf9b 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import java . util . * ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> import net . minecraft . init . Blocks ; <nl> import net . minecraft . world . biome . * ; <nl> + import net . minecraftforge . common . util . EnumHelper ; <nl> import net . minecraftforge . event . terraingen . DeferredBiomeDecorator ; <nl> import static net . minecraft . world . biome . BiomeGenBase . * ; <nl> import static net . minecraftforge . common . BiomeDictionary . Type . * ; <nl> @ @ - 27 , 7 + 28 , 7 @ @ public class BiomeDictionary <nl> SAVANNA , <nl> CONIFEROUS , <nl> JUNGLE , <nl> - <nl> + <nl> / * Tags specifying the nature of a biome * / <nl> SPOOKY , <nl> DEAD , <nl> @ @ - 36 , 12 + 37 , 12 @ @ public class BiomeDictionary <nl> END , <nl> MUSHROOM , <nl> MAGICAL , <nl> - <nl> + <nl> OCEAN , <nl> RIVER , <nl> / * * A general tag for all water - based biomes . Shown as present if OCEAN or RIVER are . * * / <nl> WATER ( OCEAN , RIVER ) , <nl> - <nl> + <nl> / * Generic types which a biome can be * / <nl> MESA , <nl> FOREST , <nl> @ @ - 53 , 7 + 54 , 7 @ @ public class BiomeDictionary <nl> SNOWY , <nl> WASTELAND , <nl> BEACH , <nl> - <nl> + <nl> / * Deprecated tags , kept for compatibility * / <nl> @ Deprecated <nl> / * * Replaced by SANDY * * / <nl> @ @ - 61 , 18 + 62 , 47 @ @ public class BiomeDictionary <nl> @ Deprecated <nl> / * * Replaced by SNOWY * * / <nl> FROZEN ( SNOWY ) ; <nl> - <nl> + <nl> private List < Type > subTags ; <nl> - <nl> + <nl> private Type ( Type . . . subTags ) <nl> { <nl> this . subTags = Arrays . asList ( subTags ) ; <nl> } <nl> - <nl> + <nl> private boolean hasSubTags ( ) <nl> { <nl> return subTags ! = null & & ! subTags . isEmpty ( ) ; <nl> } <nl> + <nl> + / * * <nl> + * Retrieves a Type value by name , <nl> + * if one does not exist already it creates one . <nl> + * This can be used as interm measure for modders to <nl> + * add there own category of Biome . <nl> + * <nl> + * There are NO naming conventions besides : <nl> + * MUST be all upper case ( enforced by name . toUpper ( ) ) <nl> + * NO Special characters . { Unenforced , just don ' t be a pain , if it becomes a issue I WILL <nl> + * make this RTE with no worry about backwards compatibility } <nl> + * <nl> + * Note : For performance sake , the return value of this function SHOULD be cached . <nl> + * Two calls with the same name SHOULD return the same value . <nl> + * <nl> + * <nl> + * @ param name The name of this Type <nl> + * @ return An instance of Type for this name . <nl> + * / <nl> + public static Type getType ( String name , Type . . . subTypes ) <nl> + { <nl> + name = name . toUpperCase ( ) ; <nl> + for ( Type t : values ( ) ) <nl> + { <nl> + if ( t . name ( ) . equals ( name ) ) <nl> + return t ; <nl> + } <nl> + return EnumHelper . addEnum ( Type . class , name , new Class [ ] { Type [ ] . class } , new Object [ ] { subTypes } ) ; <nl> + } <nl> } <nl> <nl> private static final int BIOME _ LIST _ SIZE = BiomeGenBase . getBiomeGenArray ( ) . length ; <nl> @ @ - 101 , 15 + 131 , 15 @ @ public class BiomeDictionary <nl> <nl> / * * <nl> * Registers a biome with a specific biome type <nl> - * <nl> + * <nl> * @ param biome the biome to be registered <nl> * @ param type the type to register the biome as <nl> * @ return returns true if the biome was registered successfully <nl> * / <nl> public static boolean registerBiomeType ( BiomeGenBase biome , Type . . . types ) <nl> - { <nl> + { <nl> types = listSubTags ( types ) ; <nl> - <nl> + <nl> if ( BiomeGenBase . getBiomeGenArray ( ) [ biome . biomeID ] ! = null ) <nl> { <nl> for ( Type type : types ) <nl> @ @ - 142 , 7 + 172 , 7 @ @ public class BiomeDictionary <nl> <nl> / * * <nl> * Returns a list of biomes registered with a specific type <nl> - * <nl> + * <nl> * @ param type the Type to look for <nl> * @ return a list of biomes of the specified type , null if there are none <nl> * / <nl> @ @ - 158 , 7 + 188 , 7 @ @ public class BiomeDictionary <nl> <nl> / * * <nl> * Gets a list of Types that a specific biome is registered with <nl> - * <nl> + * <nl> * @ param biome the biome to check <nl> * @ return the list of types , null if there are none <nl> * / <nl> @ @ - 176 , 7 + 206 , 7 @ @ public class BiomeDictionary <nl> <nl> / * * <nl> * Checks to see if two biomes are registered as having the same type <nl> - * <nl> + * <nl> * @ param biomeA <nl> * @ param biomeB <nl> * @ return returns true if a common type is found , false otherwise <nl> @ @ - 205 , 7 + 235 , 7 @ @ public class BiomeDictionary <nl> <nl> / * * <nl> * Checks to see if the given biome is registered as being a specific type <nl> - * <nl> + * <nl> * @ param biome the biome to be considered <nl> * @ param type the type to check for <nl> * @ return returns true if the biome is registered as being of type type , false otherwise <nl> @ @ - 228 , 7 + 258 , 7 @ @ public class BiomeDictionary <nl> * @ return returns true if the biome has been registered , false otherwise <nl> * / <nl> public static boolean isBiomeRegistered ( BiomeGenBase biome ) <nl> - { <nl> + { <nl> return biomeList [ biome . biomeID ] ! = null ; <nl> } <nl> <nl> @ @ - 245 , 7 + 275 , 7 @ @ public class BiomeDictionary <nl> * Loops through the biome list and automatically adds tags to any biome that does not have any <nl> * This is called by Forge at postinit time . It will additionally dispatch any deferred decorator <nl> * creation events . <nl> - * <nl> + * <nl> * DO NOT call this during world generation <nl> * / <nl> public static void registerAllBiomesAndGenerateEvents ( ) <nl> @ @ - 273 , 13 + 303 , 11 @ @ public class BiomeDictionary <nl> * Automatically looks for and registers a given biome with appropriate tags <nl> * This method is called automatically if a biome has not been registered with any tags , <nl> * And another method requests information about it <nl> - * <nl> - * NOTE : You can opt out of having your biome registered by registering it as type NULL <nl> - * <nl> + * <nl> * @ param biome the biome to be considered <nl> * / <nl> public static void makeBestGuess ( BiomeGenBase biome ) <nl> - { <nl> + { <nl> if ( biome . theBiomeDecorator . treesPerChunk > = 3 ) <nl> { <nl> if ( biome . isHighHumidity ( ) & & biome . temperature > = 0 . 9F ) <nl> @ @ - 290 , 7 + 318 , 7 @ @ public class BiomeDictionary <nl> { <nl> BiomeDictionary . registerBiomeType ( biome , FOREST ) ; <nl> <nl> - if ( biome . temperature < = 0 . 2f ) <nl> + if ( biome . temperature < = 0 . 2f ) <nl> { <nl> BiomeDictionary . registerBiomeType ( biome , CONIFEROUS ) ; <nl> } <nl> @ @ - 384 , 7 + 412 , 7 @ @ public class BiomeDictionary <nl> } <nl> } <nl> <nl> - / / Internal implementation <nl> + / / Internal implementation <nl> private static void checkRegistration ( BiomeGenBase biome ) <nl> { <nl> if ( ! isBiomeRegistered ( biome ) ) <nl> @ @ - 401 , 23 + 429 , 23 @ @ public class BiomeDictionary <nl> { <nl> if ( info . typeList . contains ( remappedType ) ) return true ; <nl> } <nl> - <nl> + <nl> return false ; <nl> } <nl> - <nl> + <nl> return info . typeList . contains ( type ) ; <nl> } <nl> - <nl> + <nl> private static Type [ ] listSubTags ( Type . . . types ) <nl> { <nl> List < Type > subTags = new ArrayList < Type > ( ) ; <nl> - <nl> + <nl> for ( Type type : types ) <nl> { <nl> if ( type . hasSubTags ( ) ) subTags . addAll ( type . subTags ) ; <nl> else subTags . add ( type ) ; <nl> } <nl> - <nl> + <nl> return subTags . toArray ( new Type [ subTags . size ( ) ] ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / util / EnumHelper . java b / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> index f71408a . . 5f0ec8a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / util / EnumHelper . java <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class EnumHelper <nl> { EnumStatus . class } , <nl> { ToolMaterial . class , int . class , int . class , float . class , float . class , int . class } , <nl> { EnumRarity . class , EnumChatFormatting . class , String . class } <nl> - } ; <nl> + } ; <nl> <nl> public static EnumAction addAction ( String name ) <nl> { <nl> @ @ - 190 , 7 + 190 , 7 @ @ public class EnumHelper <nl> setup ( ) ; <nl> return addEnum ( commonTypes , enumType , enumName , paramValues ) ; <nl> } <nl> - <nl> + <nl> @ SuppressWarnings ( " rawtypes " ) <nl> public static < T extends Enum < ? > > T addEnum ( Class [ ] [ ] map , Class < T > enumType , String enumName , Object . . . paramValues ) <nl> { <nl> @ @ - 219 , 7 + 219 , 7 @ @ public class EnumHelper <nl> <nl> Field valuesField = null ; <nl> Field [ ] fields = enumType . getDeclaredFields ( ) ; <nl> - <nl> + <nl> for ( Field field : fields ) <nl> { <nl> String name = field . getName ( ) ; <nl> @ @ - 234 , 7 + 234 , 7 @ @ public class EnumHelper <nl> if ( valuesField = = null ) <nl> { <nl> String valueType = String . format ( " [ L % s ; " , enumType . getName ( ) . replace ( ' . ' , ' / ' ) ) ; <nl> - <nl> + <nl> for ( Field field : fields ) <nl> { <nl> if ( ( field . getModifiers ( ) & flags ) = = flags & & <nl> diff - - git a / src / test / java / net / minecraftforge / test / EnumHelperTest . java b / src / test / java / net / minecraftforge / test / EnumHelperTest . java <nl> index a79582e . . ed891f7 100644 <nl> - - - a / src / test / java / net / minecraftforge / test / EnumHelperTest . java <nl> + + + b / src / test / java / net / minecraftforge / test / EnumHelperTest . java <nl> @ @ - 6 , 9 + 6 , 10 @ @ import java . util . ArrayList ; <nl> import java . util . List ; <nl> <nl> import net . minecraftforge . client . EnumHelperClient ; <nl> + import net . minecraftforge . common . BiomeDictionary ; <nl> import net . minecraftforge . common . util . EnumHelper ; <nl> <nl> - import org . apache . logging . log4j . core . helpers . Assert ; <nl> + import org . junit . Assert ; <nl> import org . junit . Test ; <nl> <nl> import cpw . mods . fml . relauncher . ReflectionHelper ; <nl> @ @ - 32 , 6 + 33 , 8 @ @ public class EnumHelperTest <nl> <nl> if ( failed ) <nl> throw new RuntimeException ( " Enum Helper test failed ! " ) ; <nl> + Assert . assertEquals ( BiomeDictionary . Type . BEACH , BiomeDictionary . Type . getType ( " BEACH " ) ) ; <nl> + Assert . assertEquals ( BiomeDictionary . Type . getType ( " NEWTYPE " ) , BiomeDictionary . Type . getType ( " NEWTYPE " ) ) ; <nl> } <nl> private void testType ( Object [ ] info ) <nl> {

TEST DIFF:
diff - - git a / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 index 2e7cc1f . . 2188ce2 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 @ @ - 45 , 7 + 45 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 private final Type ENUM = Type . getType ( Enum . class ) ; 
 private final Type ARRAY _ UTILS = Type . getType ( " Lorg / apache / commons / lang3 / ArrayUtils ; " ) ; / / Don ' t directly reference this to prevent class loading . 
 private final String ADD _ DESC = Type . getMethodDescriptor ( Type . getType ( Object [ ] . class ) , Type . getType ( Object [ ] . class ) , Type . getType ( Object . class ) ) ; 
 - private final Type ENUM _ HELPER = Type . getType ( " Lnet / minecraftforge / common / util / EnumHelper ; " ) ; / / Again , not direct reference to prevent class loading . 
 + private final Type UNSAFE _ HACKS = Type . getType ( " Lnet / minecraftforge / fml / UnsafeHacks ; " ) ; / / Again , not direct reference to prevent class loading . 
 private final String CLEAN _ DESC = Type . getMethodDescriptor ( Type . VOID _ TYPE , Type . getType ( Class . class ) ) ; 
 private final String NAME _ DESC = Type . getMethodDescriptor ( STRING ) ; 
 private final String EQUALS _ DESC = Type . getMethodDescriptor ( Type . BOOLEAN _ TYPE , STRING ) ; 
 @ @ - 181 , 7 + 181 , 7 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 ins . putstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 / / EnumHelper . cleanEnumCache ( ThisType . class ) 
 ins . visitLdcInsn ( classType ) ; 
 - ins . invokestatic ( ENUM _ HELPER . getInternalName ( ) , " cleanEnumCache " , CLEAN _ DESC , false ) ; 
 + ins . invokestatic ( UNSAFE _ HACKS . getInternalName ( ) , " cleanEnumCache " , CLEAN _ DESC , false ) ; 
 / / return ret 
 ins . load ( vars , classType ) ; 
 ins . areturn ( classType ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / UnsafeHacks . java b / src / main / java / net / minecraftforge / fml / UnsafeHacks . java 
 index a91411e . . 80ec3a5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / UnsafeHacks . java 
 + + + b / src / main / java / net / minecraftforge / fml / UnsafeHacks . java 
 @ @ - 19 , 14 + 19 , 17 @ @ 
 
 package net . minecraftforge . fml ; 
 
 - import sun . misc . Unsafe ; 
 - 
 import java . lang . reflect . Field ; 
 + import java . util . Optional ; 
 + 
 + import sun . misc . Unsafe ; 
 
 + @ SuppressWarnings ( " restriction " ) 
 public class UnsafeHacks 
 { 
 private static final Unsafe UNSAFE ; 
 - static { 
 + static 
 + { 
 try 
 { 
 final Field theUnsafe = Unsafe . class . getDeclaredField ( " theUnsafe " ) ; 
 @ @ - 40 , 11 + 43 , 11 @ @ public class UnsafeHacks 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - public static < T > T newInstance ( Class < T > packetClass ) 
 + public static < T > T newInstance ( Class < T > clazz ) 
 { 
 try 
 { 
 - return ( T ) UNSAFE . allocateInstance ( packetClass ) ; 
 + return ( T ) UNSAFE . allocateInstance ( clazz ) ; 
 } 
 catch ( InstantiationException e ) 
 { 
 @ @ - 53 , 15 + 56 , 16 @ @ public class UnsafeHacks 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - public static < T > T getField ( Field field , Object object ) { 
 + public static < T > T getField ( Field field , Object object ) 
 + { 
 final long l = UNSAFE . objectFieldOffset ( field ) ; 
 return ( T ) UNSAFE . getObject ( object , l ) ; 
 } 
 
 - public static void setField ( Field data , Object object , Object buffer ) 
 + public static void setField ( Field data , Object object , Object value ) 
 { 
 long offset = UNSAFE . objectFieldOffset ( data ) ; 
 - UNSAFE . putObject ( object , offset , buffer ) ; 
 + UNSAFE . putObject ( object , offset , value ) ; 
 } 
 
 public static int getIntField ( Field f , Object obj ) 
 @ @ - 75 , 4 + 79 , 23 @ @ public class UnsafeHacks 
 long offset = UNSAFE . objectFieldOffset ( data ) ; 
 UNSAFE . putInt ( object , offset , value ) ; 
 } 
 + 
 + / / Make sure we don ' t crash if any future versions change field names 
 + private static Optional < Field > findField ( Class < ? > clazz , String name ) 
 + { 
 + for ( Field f : clazz . getDeclaredFields ( ) ) 
 + { 
 + if ( f . getName ( ) . equals ( name ) ) 
 + { 
 + return Optional . of ( f ) ; 
 + } 
 + } 
 + return Optional . empty ( ) ; 
 + } 
 + 
 + public static void cleanEnumCache ( Class < ? extends Enum < ? > > enumClass ) throws Exception 
 + { 
 + findField ( Class . class , " enumConstantDirectory " ) . ifPresent ( f - > setField ( f , enumClass , null ) ) ; 
 + findField ( Class . class , " enumConstants " ) . ifPresent ( f - > setField ( f , enumClass , null ) ) ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 index a62ed47 . . 726cf9b 100644 
 - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . util . * ; 
 import cpw . mods . fml . common . FMLLog ; 
 import net . minecraft . init . Blocks ; 
 import net . minecraft . world . biome . * ; 
 + import net . minecraftforge . common . util . EnumHelper ; 
 import net . minecraftforge . event . terraingen . DeferredBiomeDecorator ; 
 import static net . minecraft . world . biome . BiomeGenBase . * ; 
 import static net . minecraftforge . common . BiomeDictionary . Type . * ; 
 @ @ - 27 , 7 + 28 , 7 @ @ public class BiomeDictionary 
 SAVANNA , 
 CONIFEROUS , 
 JUNGLE , 
 - 
 + 
 / * Tags specifying the nature of a biome * / 
 SPOOKY , 
 DEAD , 
 @ @ - 36 , 12 + 37 , 12 @ @ public class BiomeDictionary 
 END , 
 MUSHROOM , 
 MAGICAL , 
 - 
 + 
 OCEAN , 
 RIVER , 
 / * * A general tag for all water - based biomes . Shown as present if OCEAN or RIVER are . * * / 
 WATER ( OCEAN , RIVER ) , 
 - 
 + 
 / * Generic types which a biome can be * / 
 MESA , 
 FOREST , 
 @ @ - 53 , 7 + 54 , 7 @ @ public class BiomeDictionary 
 SNOWY , 
 WASTELAND , 
 BEACH , 
 - 
 + 
 / * Deprecated tags , kept for compatibility * / 
 @ Deprecated 
 / * * Replaced by SANDY * * / 
 @ @ - 61 , 18 + 62 , 47 @ @ public class BiomeDictionary 
 @ Deprecated 
 / * * Replaced by SNOWY * * / 
 FROZEN ( SNOWY ) ; 
 - 
 + 
 private List < Type > subTags ; 
 - 
 + 
 private Type ( Type . . . subTags ) 
 { 
 this . subTags = Arrays . asList ( subTags ) ; 
 } 
 - 
 + 
 private boolean hasSubTags ( ) 
 { 
 return subTags ! = null & & ! subTags . isEmpty ( ) ; 
 } 
 + 
 + / * * 
 + * Retrieves a Type value by name , 
 + * if one does not exist already it creates one . 
 + * This can be used as interm measure for modders to 
 + * add there own category of Biome . 
 + * 
 + * There are NO naming conventions besides : 
 + * MUST be all upper case ( enforced by name . toUpper ( ) ) 
 + * NO Special characters . { Unenforced , just don ' t be a pain , if it becomes a issue I WILL 
 + * make this RTE with no worry about backwards compatibility } 
 + * 
 + * Note : For performance sake , the return value of this function SHOULD be cached . 
 + * Two calls with the same name SHOULD return the same value . 
 + * 
 + * 
 + * @ param name The name of this Type 
 + * @ return An instance of Type for this name . 
 + * / 
 + public static Type getType ( String name , Type . . . subTypes ) 
 + { 
 + name = name . toUpperCase ( ) ; 
 + for ( Type t : values ( ) ) 
 + { 
 + if ( t . name ( ) . equals ( name ) ) 
 + return t ; 
 + } 
 + return EnumHelper . addEnum ( Type . class , name , new Class [ ] { Type [ ] . class } , new Object [ ] { subTypes } ) ; 
 + } 
 } 
 
 private static final int BIOME _ LIST _ SIZE = BiomeGenBase . getBiomeGenArray ( ) . length ; 
 @ @ - 101 , 15 + 131 , 15 @ @ public class BiomeDictionary 
 
 / * * 
 * Registers a biome with a specific biome type 
 - * 
 + * 
 * @ param biome the biome to be registered 
 * @ param type the type to register the biome as 
 * @ return returns true if the biome was registered successfully 
 * / 
 public static boolean registerBiomeType ( BiomeGenBase biome , Type . . . types ) 
 - { 
 + { 
 types = listSubTags ( types ) ; 
 - 
 + 
 if ( BiomeGenBase . getBiomeGenArray ( ) [ biome . biomeID ] ! = null ) 
 { 
 for ( Type type : types ) 
 @ @ - 142 , 7 + 172 , 7 @ @ public class BiomeDictionary 
 
 / * * 
 * Returns a list of biomes registered with a specific type 
 - * 
 + * 
 * @ param type the Type to look for 
 * @ return a list of biomes of the specified type , null if there are none 
 * / 
 @ @ - 158 , 7 + 188 , 7 @ @ public class BiomeDictionary 
 
 / * * 
 * Gets a list of Types that a specific biome is registered with 
 - * 
 + * 
 * @ param biome the biome to check 
 * @ return the list of types , null if there are none 
 * / 
 @ @ - 176 , 7 + 206 , 7 @ @ public class BiomeDictionary 
 
 / * * 
 * Checks to see if two biomes are registered as having the same type 
 - * 
 + * 
 * @ param biomeA 
 * @ param biomeB 
 * @ return returns true if a common type is found , false otherwise 
 @ @ - 205 , 7 + 235 , 7 @ @ public class BiomeDictionary 
 
 / * * 
 * Checks to see if the given biome is registered as being a specific type 
 - * 
 + * 
 * @ param biome the biome to be considered 
 * @ param type the type to check for 
 * @ return returns true if the biome is registered as being of type type , false otherwise 
 @ @ - 228 , 7 + 258 , 7 @ @ public class BiomeDictionary 
 * @ return returns true if the biome has been registered , false otherwise 
 * / 
 public static boolean isBiomeRegistered ( BiomeGenBase biome ) 
 - { 
 + { 
 return biomeList [ biome . biomeID ] ! = null ; 
 } 
 
 @ @ - 245 , 7 + 275 , 7 @ @ public class BiomeDictionary 
 * Loops through the biome list and automatically adds tags to any biome that does not have any 
 * This is called by Forge at postinit time . It will additionally dispatch any deferred decorator 
 * creation events . 
 - * 
 + * 
 * DO NOT call this during world generation 
 * / 
 public static void registerAllBiomesAndGenerateEvents ( ) 
 @ @ - 273 , 13 + 303 , 11 @ @ public class BiomeDictionary 
 * Automatically looks for and registers a given biome with appropriate tags 
 * This method is called automatically if a biome has not been registered with any tags , 
 * And another method requests information about it 
 - * 
 - * NOTE : You can opt out of having your biome registered by registering it as type NULL 
 - * 
 + * 
 * @ param biome the biome to be considered 
 * / 
 public static void makeBestGuess ( BiomeGenBase biome ) 
 - { 
 + { 
 if ( biome . theBiomeDecorator . treesPerChunk > = 3 ) 
 { 
 if ( biome . isHighHumidity ( ) & & biome . temperature > = 0 . 9F ) 
 @ @ - 290 , 7 + 318 , 7 @ @ public class BiomeDictionary 
 { 
 BiomeDictionary . registerBiomeType ( biome , FOREST ) ; 
 
 - if ( biome . temperature < = 0 . 2f ) 
 + if ( biome . temperature < = 0 . 2f ) 
 { 
 BiomeDictionary . registerBiomeType ( biome , CONIFEROUS ) ; 
 } 
 @ @ - 384 , 7 + 412 , 7 @ @ public class BiomeDictionary 
 } 
 } 
 
 - / / Internal implementation 
 + / / Internal implementation 
 private static void checkRegistration ( BiomeGenBase biome ) 
 { 
 if ( ! isBiomeRegistered ( biome ) ) 
 @ @ - 401 , 23 + 429 , 23 @ @ public class BiomeDictionary 
 { 
 if ( info . typeList . contains ( remappedType ) ) return true ; 
 } 
 - 
 + 
 return false ; 
 } 
 - 
 + 
 return info . typeList . contains ( type ) ; 
 } 
 - 
 + 
 private static Type [ ] listSubTags ( Type . . . types ) 
 { 
 List < Type > subTags = new ArrayList < Type > ( ) ; 
 - 
 + 
 for ( Type type : types ) 
 { 
 if ( type . hasSubTags ( ) ) subTags . addAll ( type . subTags ) ; 
 else subTags . add ( type ) ; 
 } 
 - 
 + 
 return subTags . toArray ( new Type [ subTags . size ( ) ] ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / util / EnumHelper . java b / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 index f71408a . . 5f0ec8a 100644 
 - - - a / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / util / EnumHelper . java 
 @ @ - 49 , 7 + 49 , 7 @ @ public class EnumHelper 
 { EnumStatus . class } , 
 { ToolMaterial . class , int . class , int . class , float . class , float . class , int . class } , 
 { EnumRarity . class , EnumChatFormatting . class , String . class } 
 - } ; 
 + } ; 
 
 public static EnumAction addAction ( String name ) 
 { 
 @ @ - 190 , 7 + 190 , 7 @ @ public class EnumHelper 
 setup ( ) ; 
 return addEnum ( commonTypes , enumType , enumName , paramValues ) ; 
 } 
 - 
 + 
 @ SuppressWarnings ( " rawtypes " ) 
 public static < T extends Enum < ? > > T addEnum ( Class [ ] [ ] map , Class < T > enumType , String enumName , Object . . . paramValues ) 
 { 
 @ @ - 219 , 7 + 219 , 7 @ @ public class EnumHelper 
 
 Field valuesField = null ; 
 Field [ ] fields = enumType . getDeclaredFields ( ) ; 
 - 
 + 
 for ( Field field : fields ) 
 { 
 String name = field . getName ( ) ; 
 @ @ - 234 , 7 + 234 , 7 @ @ public class EnumHelper 
 if ( valuesField = = null ) 
 { 
 String valueType = String . format ( " [ L % s ; " , enumType . getName ( ) . replace ( ' . ' , ' / ' ) ) ; 
 - 
 + 
 for ( Field field : fields ) 
 { 
 if ( ( field . getModifiers ( ) & flags ) = = flags & & 
 diff - - git a / src / test / java / net / minecraftforge / test / EnumHelperTest . java b / src / test / java / net / minecraftforge / test / EnumHelperTest . java 
 index a79582e . . ed891f7 100644 
 - - - a / src / test / java / net / minecraftforge / test / EnumHelperTest . java 
 + + + b / src / test / java / net / minecraftforge / test / EnumHelperTest . java 
 @ @ - 6 , 9 + 6 , 10 @ @ import java . util . ArrayList ; 
 import java . util . List ; 
 
 import net . minecraftforge . client . EnumHelperClient ; 
 + import net . minecraftforge . common . BiomeDictionary ; 
 import net . minecraftforge . common . util . EnumHelper ; 
 
 - import org . apache . logging . log4j . core . helpers . Assert ; 
 + import org . junit . Assert ; 
 import org . junit . Test ; 
 
 import cpw . mods . fml . relauncher . ReflectionHelper ; 
 @ @ - 32 , 6 + 33 , 8 @ @ public class EnumHelperTest 
 
 if ( failed ) 
 throw new RuntimeException ( " Enum Helper test failed ! " ) ; 
 + Assert . assertEquals ( BiomeDictionary . Type . BEACH , BiomeDictionary . Type . getType ( " BEACH " ) ) ; 
 + Assert . assertEquals ( BiomeDictionary . Type . getType ( " NEWTYPE " ) , BiomeDictionary . Type . getType ( " NEWTYPE " ) ) ; 
 } 
 private void testType ( Object [ ] info ) 
 {
