BLEU SCORE: 0.06971729121692201

TEST MSG: Fix proxy injector filtering .
GENERATED MSG: Filter out proxy injectors for incorrect mods .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> index 959085c . . d159168 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> @ @ - 53 , 7 + 53 , 7 @ @ public class ProxyInjector <nl> { <nl> for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) <nl> { <nl> - if ( a . getClassName ( ) . equals ( targ . getClassName ( ) ) ) <nl> + if ( isProxyFromMod ( a . getClassName ( ) , targ . getClassName ( ) ) ) <nl> { <nl> modid = ( String ) a . getAnnotationInfo ( ) . get ( " modid " ) ; <nl> break ; <nl> @ @ - 61 , 10 + 61 , 13 @ @ public class ProxyInjector <nl> } <nl> } <nl> <nl> - if ( modid = = null | | ! modid . equals ( mod . getModId ( ) ) ) <nl> + if ( modid = = null ) <nl> + { <nl> + FMLLog . warning ( " Unable to determine the associated mod for proxy injection for % s . % s , assuming it ' s from % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; <nl> + } <nl> + else if ( ! modid . equals ( mod . getModId ( ) ) ) <nl> { <nl> - / / TODO ? Throw exception if modid = = null ? As that shouldn ' t happen { annotation with no name in a class without a @ Mod ) <nl> - FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; <nl> + FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s , it should belong to % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) , modid ) ; <nl> continue ; <nl> } <nl> <nl> @ @ - 108 , 4 + 111 , 36 @ @ public class ProxyInjector <nl> / / Allow language specific proxy injection . <nl> languageAdapter . setInternalProxies ( mod , side , mcl ) ; <nl> } <nl> + <nl> + / * * <nl> + * Checks if a proxy is part of a mod . <nl> + * <nl> + * Checks that the proxy is somewhere in the same package that holds the mod . <nl> + * For example , the @ Mod is ' com . modname . Mod ' , the Proxy is ' com . modname . proxies . ProxyClient ' <nl> + * The package of the mod is ' com . modname ' , and Proxy is in that package , so it is from the mod . <nl> + * <nl> + * Compares each path section in a for loop instead of simply using { @ link String # startsWith ( String ) } <nl> + * because a mod like ' com . modname . Mod ' with package ' com . modname ' <nl> + * does not own a proxy from ' com . modnametools . proxies . ProxyClient ' even though they start the same . <nl> + * / <nl> + private static boolean isProxyFromMod ( String modClassName , String proxyClassName ) <nl> + { <nl> + if ( modClassName . equals ( proxyClassName ) ) <nl> + return true ; <nl> + <nl> + String [ ] modPath = modClassName . split ( " \ \ . " ) ; <nl> + String [ ] proxyPath = proxyClassName . split ( " \ \ . " ) ; <nl> + if ( proxyPath . length < modPath . length ) <nl> + return false ; <nl> + <nl> + for ( int i = 0 ; i < modPath . length - 1 ; i + + ) <nl> + { <nl> + if ( ! modPath [ i ] . equals ( proxyPath [ i ] ) ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + return true ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> index 9c66694 . . 959085c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> @ @ - 47 , 6 + 47 , 27 @ @ public class ProxyInjector <nl> { <nl> try <nl> { <nl> + / / Pull this from the ASM data so we do not prematurely initialize mods with the below Class . forName <nl> + String modid = ( String ) targ . getAnnotationInfo ( ) . get ( " modId " ) ; <nl> + if ( modid = = null ) <nl> + { <nl> + for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) <nl> + { <nl> + if ( a . getClassName ( ) . equals ( targ . getClassName ( ) ) ) <nl> + { <nl> + modid = ( String ) a . getAnnotationInfo ( ) . get ( " modid " ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + if ( modid = = null | | ! modid . equals ( mod . getModId ( ) ) ) <nl> + { <nl> + / / TODO ? Throw exception if modid = = null ? As that shouldn ' t happen { annotation with no name in a class without a @ Mod ) <nl> + FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; <nl> + continue ; <nl> + } <nl> + <nl> Class < ? > proxyTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; <nl> Field target = proxyTarget . getDeclaredField ( targ . getObjectName ( ) ) ; <nl> if ( target = = null ) <nl> @ @ - 58 , 11 + 79 , 6 @ @ public class ProxyInjector <nl> target . setAccessible ( true ) ; <nl> <nl> SidedProxy annotation = target . getAnnotation ( SidedProxy . class ) ; <nl> - if ( ! Strings . isNullOrEmpty ( annotation . modId ( ) ) & & ! annotation . modId ( ) . equals ( mod . getModId ( ) ) ) <nl> - { <nl> - FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; <nl> - continue ; <nl> - } <nl> String targetType = side . isClient ( ) ? annotation . clientSide ( ) : annotation . serverSide ( ) ; <nl> if ( targetType . equals ( " " ) ) <nl> {

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 index 959085c . . d159168 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 @ @ - 53 , 7 + 53 , 7 @ @ public class ProxyInjector 
 { 
 for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) 
 { 
 - if ( a . getClassName ( ) . equals ( targ . getClassName ( ) ) ) 
 + if ( isProxyFromMod ( a . getClassName ( ) , targ . getClassName ( ) ) ) 
 { 
 modid = ( String ) a . getAnnotationInfo ( ) . get ( " modid " ) ; 
 break ; 
 @ @ - 61 , 10 + 61 , 13 @ @ public class ProxyInjector 
 } 
 } 
 
 - if ( modid = = null | | ! modid . equals ( mod . getModId ( ) ) ) 
 + if ( modid = = null ) 
 + { 
 + FMLLog . warning ( " Unable to determine the associated mod for proxy injection for % s . % s , assuming it ' s from % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; 
 + } 
 + else if ( ! modid . equals ( mod . getModId ( ) ) ) 
 { 
 - / / TODO ? Throw exception if modid = = null ? As that shouldn ' t happen { annotation with no name in a class without a @ Mod ) 
 - FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; 
 + FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s , it should belong to % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) , modid ) ; 
 continue ; 
 } 
 
 @ @ - 108 , 4 + 111 , 36 @ @ public class ProxyInjector 
 / / Allow language specific proxy injection . 
 languageAdapter . setInternalProxies ( mod , side , mcl ) ; 
 } 
 + 
 + / * * 
 + * Checks if a proxy is part of a mod . 
 + * 
 + * Checks that the proxy is somewhere in the same package that holds the mod . 
 + * For example , the @ Mod is ' com . modname . Mod ' , the Proxy is ' com . modname . proxies . ProxyClient ' 
 + * The package of the mod is ' com . modname ' , and Proxy is in that package , so it is from the mod . 
 + * 
 + * Compares each path section in a for loop instead of simply using { @ link String # startsWith ( String ) } 
 + * because a mod like ' com . modname . Mod ' with package ' com . modname ' 
 + * does not own a proxy from ' com . modnametools . proxies . ProxyClient ' even though they start the same . 
 + * / 
 + private static boolean isProxyFromMod ( String modClassName , String proxyClassName ) 
 + { 
 + if ( modClassName . equals ( proxyClassName ) ) 
 + return true ; 
 + 
 + String [ ] modPath = modClassName . split ( " \ \ . " ) ; 
 + String [ ] proxyPath = proxyClassName . split ( " \ \ . " ) ; 
 + if ( proxyPath . length < modPath . length ) 
 + return false ; 
 + 
 + for ( int i = 0 ; i < modPath . length - 1 ; i + + ) 
 + { 
 + if ( ! modPath [ i ] . equals ( proxyPath [ i ] ) ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + return true ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 index 9c66694 . . 959085c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 @ @ - 47 , 6 + 47 , 27 @ @ public class ProxyInjector 
 { 
 try 
 { 
 + / / Pull this from the ASM data so we do not prematurely initialize mods with the below Class . forName 
 + String modid = ( String ) targ . getAnnotationInfo ( ) . get ( " modId " ) ; 
 + if ( modid = = null ) 
 + { 
 + for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) 
 + { 
 + if ( a . getClassName ( ) . equals ( targ . getClassName ( ) ) ) 
 + { 
 + modid = ( String ) a . getAnnotationInfo ( ) . get ( " modid " ) ; 
 + break ; 
 + } 
 + } 
 + } 
 + 
 + if ( modid = = null | | ! modid . equals ( mod . getModId ( ) ) ) 
 + { 
 + / / TODO ? Throw exception if modid = = null ? As that shouldn ' t happen { annotation with no name in a class without a @ Mod ) 
 + FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; 
 + continue ; 
 + } 
 + 
 Class < ? > proxyTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; 
 Field target = proxyTarget . getDeclaredField ( targ . getObjectName ( ) ) ; 
 if ( target = = null ) 
 @ @ - 58 , 11 + 79 , 6 @ @ public class ProxyInjector 
 target . setAccessible ( true ) ; 
 
 SidedProxy annotation = target . getAnnotation ( SidedProxy . class ) ; 
 - if ( ! Strings . isNullOrEmpty ( annotation . modId ( ) ) & & ! annotation . modId ( ) . equals ( mod . getModId ( ) ) ) 
 - { 
 - FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; 
 - continue ; 
 - } 
 String targetType = side . isClient ( ) ? annotation . clientSide ( ) : annotation . serverSide ( ) ; 
 if ( targetType . equals ( " " ) ) 
 {
