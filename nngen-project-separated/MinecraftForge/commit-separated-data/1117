BLEU SCORE: 0.0032479187022371133

TEST MSG: Fix Event Bus Access Issues
GENERATED MSG: Last part is the itemstack transformer . Itemstacks should now only be loosely coupled with the items within .

TEST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriberTransformer . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriberTransformer . java <nl> new file mode 100644 <nl> index 0000000 . . c910b24 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriberTransformer . java <nl> @ @ - 0 , 0 + 1 , 74 @ @ <nl> + package net . minecraftforge . fml . common . asm . transformers ; <nl> + <nl> + import java . lang . reflect . Modifier ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . launchwrapper . IClassTransformer ; <nl> + <nl> + import org . objectweb . asm . ClassReader ; <nl> + import org . objectweb . asm . ClassWriter ; <nl> + import org . objectweb . asm . Opcodes ; <nl> + import org . objectweb . asm . tree . AnnotationNode ; <nl> + import org . objectweb . asm . tree . ClassNode ; <nl> + import org . objectweb . asm . tree . MethodNode ; <nl> + <nl> + import com . google . common . base . Predicate ; <nl> + import com . google . common . collect . Iterables ; <nl> + <nl> + public class EventSubscriberTransformer implements IClassTransformer <nl> + { <nl> + @ Override <nl> + public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) <nl> + { <nl> + if ( basicClass = = null ) return null ; <nl> + <nl> + ClassNode classNode = new ClassNode ( ) ; <nl> + new ClassReader ( basicClass ) . accept ( classNode , 0 ) ; <nl> + <nl> + boolean isSubscriber = false ; <nl> + <nl> + for ( MethodNode methodNode : classNode . methods ) <nl> + { <nl> + List < AnnotationNode > anns = methodNode . visibleAnnotations ; <nl> + <nl> + if ( anns ! = null & & Iterables . any ( anns , SubscribeEventPredicate . INSTANCE ) ) <nl> + { <nl> + if ( Modifier . isPrivate ( methodNode . access ) ) <nl> + { <nl> + String msg = " Cannot apply @ SubsribeEvent to private method % s / % s % s " ; <nl> + throw new RuntimeException ( String . format ( msg , classNode . name , methodNode . name , methodNode . desc ) ) ; <nl> + } <nl> + <nl> + methodNode . access = toPublic ( methodNode . access ) ; <nl> + isSubscriber = true ; <nl> + } <nl> + } <nl> + <nl> + if ( isSubscriber ) <nl> + { <nl> + classNode . access = toPublic ( classNode . access ) ; <nl> + <nl> + ClassWriter writer = new ClassWriter ( ClassWriter . COMPUTE _ MAXS ) ; <nl> + classNode . accept ( writer ) ; <nl> + return writer . toByteArray ( ) ; <nl> + } <nl> + <nl> + return basicClass ; <nl> + } <nl> + <nl> + private static int toPublic ( int access ) <nl> + { <nl> + return access & ~ ( Opcodes . ACC _ PRIVATE | Opcodes . ACC _ PROTECTED ) | Opcodes . ACC _ PUBLIC ; <nl> + } <nl> + <nl> + private static class SubscribeEventPredicate implements Predicate < AnnotationNode > <nl> + { <nl> + static final SubscribeEventPredicate INSTANCE = new SubscribeEventPredicate ( ) ; <nl> + <nl> + @ Override <nl> + public boolean apply ( AnnotationNode input ) <nl> + { <nl> + return input . desc . equals ( " Lnet / minecraftforge / fml / common / eventhandler / SubscribeEvent ; " ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / fml / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> index 400c190 . . 391810d 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java <nl> @ @ - 82 , 7 + 82 , 7 @ @ public class EventBus implements IEventExceptionHandler <nl> throw new IllegalArgumentException ( " Method " + method + " has @ SubscribeEvent annotation , but takes a argument that is not an Event " + eventType ) ; <nl> } <nl> <nl> - register ( eventType , target , method , activeModContainer ) ; <nl> + register ( eventType , target , real , activeModContainer ) ; <nl> break ; <nl> } <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java b / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java <nl> index f41e74a . . 63e6178 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ public class FMLCorePlugin implements IFMLLoadingPlugin <nl> " net . minecraftforge . fml . common . asm . transformers . MarkerTransformer " , <nl> " net . minecraftforge . fml . common . asm . transformers . SideTransformer " , <nl> " net . minecraftforge . fml . common . asm . transformers . EventSubscriptionTransformer " , <nl> + " net . minecraftforge . fml . common . asm . transformers . EventSubscriberTransformer " , <nl> } ; <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / item / ItemStack . java . patch b / fml / patches / minecraft / net / minecraft / item / ItemStack . java . patch <nl> index 37ac209 . . 7e20471 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / item / ItemStack . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / item / ItemStack . java . patch <nl> @ @ - 22 , 10 + 22 , 19 @ @ <nl> public Item func _ 77973 _ b ( ) <nl> { <nl> - return this . field _ 151002 _ e ; <nl> - + return this . delegate . get ( ) ; <nl> + + return this . delegate ! = null ? this . delegate . get ( ) : null ; <nl> } <nl> <nl> @ SideOnly ( Side . CLIENT ) <nl> + @ @ - 164 , 7 + 165 , 7 @ @ <nl> + <nl> + public void func _ 77963 _ c ( NBTTagCompound p _ 77963 _ 1 _ ) <nl> + { <nl> + - this . field _ 151002 _ e = Item . func _ 150899 _ d ( p _ 77963 _ 1 _ . func _ 74765 _ d ( " id " ) ) ; <nl> + + func _ 150996 _ a ( Item . func _ 150899 _ d ( p _ 77963 _ 1 _ . func _ 74765 _ d ( " id " ) ) ) ; <nl> + this . field _ 77994 _ a = p _ 77963 _ 1 _ . func _ 74771 _ c ( " Count " ) ; <nl> + this . field _ 77991 _ e = p _ 77963 _ 1 _ . func _ 74765 _ d ( " Damage " ) ; <nl> + <nl> @ @ - 744 , 6 + 745 , 7 @ @ <nl> <nl> public void func _ 150996 _ a ( Item p _ 150996 _ 1 _ ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ItemStackTransformer . java b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ItemStackTransformer . java <nl> new file mode 100644 <nl> index 0000000 . . 4c78ae8 <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ItemStackTransformer . java <nl> @ @ - 0 , 0 + 1 , 47 @ @ <nl> + package cpw . mods . fml . common . asm . transformers ; <nl> + <nl> + import java . util . ListIterator ; <nl> + <nl> + import net . minecraft . launchwrapper . IClassTransformer ; <nl> + <nl> + import org . objectweb . asm . ClassReader ; <nl> + import org . objectweb . asm . ClassWriter ; <nl> + import org . objectweb . asm . Opcodes ; <nl> + import org . objectweb . asm . tree . AbstractInsnNode ; <nl> + import org . objectweb . asm . tree . ClassNode ; <nl> + import org . objectweb . asm . tree . FieldInsnNode ; <nl> + import org . objectweb . asm . tree . MethodInsnNode ; <nl> + import org . objectweb . asm . tree . MethodNode ; <nl> + <nl> + public class ItemStackTransformer implements IClassTransformer { <nl> + @ Override <nl> + public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) { <nl> + if ( ! " net . minecraft . item . ItemStack " . equals ( name ) ) <nl> + return basicClass ; <nl> + ClassNode classNode = new ClassNode ( ) ; <nl> + ClassReader classReader = new ClassReader ( basicClass ) ; <nl> + classReader . accept ( classNode , 0 ) ; <nl> + <nl> + for ( MethodNode m : classNode . methods ) <nl> + { <nl> + for ( ListIterator < AbstractInsnNode > it = m . instructions . iterator ( ) ; it . hasNext ( ) ; ) <nl> + { <nl> + AbstractInsnNode insnNode = it . next ( ) ; <nl> + if ( insnNode . getType ( ) = = AbstractInsnNode . FIELD _ INSN ) <nl> + { <nl> + FieldInsnNode fi = ( FieldInsnNode ) insnNode ; <nl> + if ( " field _ 151002 _ e " . equals ( fi . name ) & & fi . getOpcode ( ) = = Opcodes . GETFIELD ) <nl> + { <nl> + it . remove ( ) ; <nl> + MethodInsnNode replace = new MethodInsnNode ( Opcodes . INVOKEVIRTUAL , " net / minecraft / item / ItemStack " , " getItem " , " ( ) Lnet / minecraft / item / Item ; " ) ; <nl> + it . add ( replace ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + ClassWriter writer = new ClassWriter ( ClassWriter . COMPUTE _ MAXS ) ; <nl> + classNode . accept ( writer ) ; <nl> + return writer . toByteArray ( ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java <nl> index 12b18a3 . . 6c738cd 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ public class FMLDeobfTweaker implements ITweaker { <nl> classLoader . registerTransformer ( transformer ) ; <nl> } <nl> classLoader . registerTransformer ( " cpw . mods . fml . common . asm . transformers . ModAccessTransformer " ) ; <nl> + classLoader . registerTransformer ( " cpw . mods . fml . common . asm . transformers . ItemStackTransformer " ) ; <nl> try <nl> { <nl> FMLRelaunchLog . fine ( " Validating minecraft " ) ;

TEST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriberTransformer . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriberTransformer . java 
 new file mode 100644 
 index 0000000 . . c910b24 
 - - - / dev / null 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / EventSubscriberTransformer . java 
 @ @ - 0 , 0 + 1 , 74 @ @ 
 + package net . minecraftforge . fml . common . asm . transformers ; 
 + 
 + import java . lang . reflect . Modifier ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . launchwrapper . IClassTransformer ; 
 + 
 + import org . objectweb . asm . ClassReader ; 
 + import org . objectweb . asm . ClassWriter ; 
 + import org . objectweb . asm . Opcodes ; 
 + import org . objectweb . asm . tree . AnnotationNode ; 
 + import org . objectweb . asm . tree . ClassNode ; 
 + import org . objectweb . asm . tree . MethodNode ; 
 + 
 + import com . google . common . base . Predicate ; 
 + import com . google . common . collect . Iterables ; 
 + 
 + public class EventSubscriberTransformer implements IClassTransformer 
 + { 
 + @ Override 
 + public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) 
 + { 
 + if ( basicClass = = null ) return null ; 
 + 
 + ClassNode classNode = new ClassNode ( ) ; 
 + new ClassReader ( basicClass ) . accept ( classNode , 0 ) ; 
 + 
 + boolean isSubscriber = false ; 
 + 
 + for ( MethodNode methodNode : classNode . methods ) 
 + { 
 + List < AnnotationNode > anns = methodNode . visibleAnnotations ; 
 + 
 + if ( anns ! = null & & Iterables . any ( anns , SubscribeEventPredicate . INSTANCE ) ) 
 + { 
 + if ( Modifier . isPrivate ( methodNode . access ) ) 
 + { 
 + String msg = " Cannot apply @ SubsribeEvent to private method % s / % s % s " ; 
 + throw new RuntimeException ( String . format ( msg , classNode . name , methodNode . name , methodNode . desc ) ) ; 
 + } 
 + 
 + methodNode . access = toPublic ( methodNode . access ) ; 
 + isSubscriber = true ; 
 + } 
 + } 
 + 
 + if ( isSubscriber ) 
 + { 
 + classNode . access = toPublic ( classNode . access ) ; 
 + 
 + ClassWriter writer = new ClassWriter ( ClassWriter . COMPUTE _ MAXS ) ; 
 + classNode . accept ( writer ) ; 
 + return writer . toByteArray ( ) ; 
 + } 
 + 
 + return basicClass ; 
 + } 
 + 
 + private static int toPublic ( int access ) 
 + { 
 + return access & ~ ( Opcodes . ACC _ PRIVATE | Opcodes . ACC _ PROTECTED ) | Opcodes . ACC _ PUBLIC ; 
 + } 
 + 
 + private static class SubscribeEventPredicate implements Predicate < AnnotationNode > 
 + { 
 + static final SubscribeEventPredicate INSTANCE = new SubscribeEventPredicate ( ) ; 
 + 
 + @ Override 
 + public boolean apply ( AnnotationNode input ) 
 + { 
 + return input . desc . equals ( " Lnet / minecraftforge / fml / common / eventhandler / SubscribeEvent ; " ) ; 
 + } 
 + } 
 + } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java b / fml / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 index 400c190 . . 391810d 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / eventhandler / EventBus . java 
 @ @ - 82 , 7 + 82 , 7 @ @ public class EventBus implements IEventExceptionHandler 
 throw new IllegalArgumentException ( " Method " + method + " has @ SubscribeEvent annotation , but takes a argument that is not an Event " + eventType ) ; 
 } 
 
 - register ( eventType , target , method , activeModContainer ) ; 
 + register ( eventType , target , real , activeModContainer ) ; 
 break ; 
 } 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java b / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java 
 index f41e74a . . 63e6178 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java 
 @ @ - 23 , 6 + 23 , 7 @ @ public class FMLCorePlugin implements IFMLLoadingPlugin 
 " net . minecraftforge . fml . common . asm . transformers . MarkerTransformer " , 
 " net . minecraftforge . fml . common . asm . transformers . SideTransformer " , 
 " net . minecraftforge . fml . common . asm . transformers . EventSubscriptionTransformer " , 
 + " net . minecraftforge . fml . common . asm . transformers . EventSubscriberTransformer " , 
 } ; 
 } 


NEAREST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / item / ItemStack . java . patch b / fml / patches / minecraft / net / minecraft / item / ItemStack . java . patch 
 index 37ac209 . . 7e20471 100644 
 - - - a / fml / patches / minecraft / net / minecraft / item / ItemStack . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / item / ItemStack . java . patch 
 @ @ - 22 , 10 + 22 , 19 @ @ 
 public Item func _ 77973 _ b ( ) 
 { 
 - return this . field _ 151002 _ e ; 
 - + return this . delegate . get ( ) ; 
 + + return this . delegate ! = null ? this . delegate . get ( ) : null ; 
 } 
 
 @ SideOnly ( Side . CLIENT ) 
 + @ @ - 164 , 7 + 165 , 7 @ @ 
 + 
 + public void func _ 77963 _ c ( NBTTagCompound p _ 77963 _ 1 _ ) 
 + { 
 + - this . field _ 151002 _ e = Item . func _ 150899 _ d ( p _ 77963 _ 1 _ . func _ 74765 _ d ( " id " ) ) ; 
 + + func _ 150996 _ a ( Item . func _ 150899 _ d ( p _ 77963 _ 1 _ . func _ 74765 _ d ( " id " ) ) ) ; 
 + this . field _ 77994 _ a = p _ 77963 _ 1 _ . func _ 74771 _ c ( " Count " ) ; 
 + this . field _ 77991 _ e = p _ 77963 _ 1 _ . func _ 74765 _ d ( " Damage " ) ; 
 + 
 @ @ - 744 , 6 + 745 , 7 @ @ 
 
 public void func _ 150996 _ a ( Item p _ 150996 _ 1 _ ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ItemStackTransformer . java b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ItemStackTransformer . java 
 new file mode 100644 
 index 0000000 . . 4c78ae8 
 - - - / dev / null 
 + + + b / fml / src / main / java / cpw / mods / fml / common / asm / transformers / ItemStackTransformer . java 
 @ @ - 0 , 0 + 1 , 47 @ @ 
 + package cpw . mods . fml . common . asm . transformers ; 
 + 
 + import java . util . ListIterator ; 
 + 
 + import net . minecraft . launchwrapper . IClassTransformer ; 
 + 
 + import org . objectweb . asm . ClassReader ; 
 + import org . objectweb . asm . ClassWriter ; 
 + import org . objectweb . asm . Opcodes ; 
 + import org . objectweb . asm . tree . AbstractInsnNode ; 
 + import org . objectweb . asm . tree . ClassNode ; 
 + import org . objectweb . asm . tree . FieldInsnNode ; 
 + import org . objectweb . asm . tree . MethodInsnNode ; 
 + import org . objectweb . asm . tree . MethodNode ; 
 + 
 + public class ItemStackTransformer implements IClassTransformer { 
 + @ Override 
 + public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) { 
 + if ( ! " net . minecraft . item . ItemStack " . equals ( name ) ) 
 + return basicClass ; 
 + ClassNode classNode = new ClassNode ( ) ; 
 + ClassReader classReader = new ClassReader ( basicClass ) ; 
 + classReader . accept ( classNode , 0 ) ; 
 + 
 + for ( MethodNode m : classNode . methods ) 
 + { 
 + for ( ListIterator < AbstractInsnNode > it = m . instructions . iterator ( ) ; it . hasNext ( ) ; ) 
 + { 
 + AbstractInsnNode insnNode = it . next ( ) ; 
 + if ( insnNode . getType ( ) = = AbstractInsnNode . FIELD _ INSN ) 
 + { 
 + FieldInsnNode fi = ( FieldInsnNode ) insnNode ; 
 + if ( " field _ 151002 _ e " . equals ( fi . name ) & & fi . getOpcode ( ) = = Opcodes . GETFIELD ) 
 + { 
 + it . remove ( ) ; 
 + MethodInsnNode replace = new MethodInsnNode ( Opcodes . INVOKEVIRTUAL , " net / minecraft / item / ItemStack " , " getItem " , " ( ) Lnet / minecraft / item / Item ; " ) ; 
 + it . add ( replace ) ; 
 + } 
 + } 
 + } 
 + } 
 + ClassWriter writer = new ClassWriter ( ClassWriter . COMPUTE _ MAXS ) ; 
 + classNode . accept ( writer ) ; 
 + return writer . toByteArray ( ) ; 
 + } 
 + 
 + } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java 
 index 12b18a3 . . 6c738cd 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / launcher / FMLDeobfTweaker . java 
 @ @ - 32 , 6 + 32 , 7 @ @ public class FMLDeobfTweaker implements ITweaker { 
 classLoader . registerTransformer ( transformer ) ; 
 } 
 classLoader . registerTransformer ( " cpw . mods . fml . common . asm . transformers . ModAccessTransformer " ) ; 
 + classLoader . registerTransformer ( " cpw . mods . fml . common . asm . transformers . ItemStackTransformer " ) ; 
 try 
 { 
 FMLRelaunchLog . fine ( " Validating minecraft " ) ;
