BLEU SCORE: 0.031251907639724415

TEST MSG: Clean up the mod loading context objects . There is only one ThreadLocal now .
GENERATED MSG: Implement a GUI packet and GUIFACTORY for triggering from the server .

TEST DIFF (one line): diff - - git a / mdk / src / main / java / com / example / examplemod / ExampleMod . java b / mdk / src / main / java / com / example / examplemod / ExampleMod . java <nl> index 30056fe . . 88204a0 100644 <nl> - - - a / mdk / src / main / java / com / example / examplemod / ExampleMod . java <nl> + + + b / mdk / src / main / java / com / example / examplemod / ExampleMod . java <nl> @ @ - 12 , 7 + 12 , 7 @ @ import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; <nl> import net . minecraftforge . fml . event . lifecycle . InterModEnqueueEvent ; <nl> import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; <nl> - import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; <nl> + import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> @ @ - 27 , 13 + 27 , 13 @ @ public class ExampleMod <nl> <nl> public ExampleMod ( ) { <nl> / / Register the setup method for modloading <nl> - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : setup ) ; <nl> + FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : setup ) ; <nl> / / Register the enqueueIMC method for modloading <nl> - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : enqueueIMC ) ; <nl> + FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : enqueueIMC ) ; <nl> / / Register the processIMC method for modloading <nl> - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : processIMC ) ; <nl> + FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : processIMC ) ; <nl> / / Register the doClientStuff method for modloading <nl> - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : doClientStuff ) ; <nl> + FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : doClientStuff ) ; <nl> <nl> / / Register ourselves for server , registry and other game events we are interested in <nl> MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> @ @ - 66 , 18 + 66 , 18 @ @ public class ExampleMod <nl> } <nl> / / You can use SubscribeEvent and let the Event Bus discover methods to call <nl> @ SubscribeEvent <nl> - public void onBlocksRegistry ( final RegistryEvent . Register < Block > blockRegistryEvent ) { <nl> - / / register a new block here <nl> - LOGGER . info ( " HELLO from Register Block " ) ; <nl> + public static void onServerStarting ( FMLServerStartingEvent event ) { <nl> + / / do something when the server starts <nl> + LOGGER . info ( " HELLO from server starting " ) ; <nl> } <nl> <nl> - / / You can use EventBusSubscriber to automatically subscribe events on the contained class <nl> - @ Mod . EventBusSubscriber <nl> - public static class ServerEvents { <nl> + / / You can use EventBusSubscriber to automatically subscribe events on the contained class ( this is subscribing to the MOD event bus <nl> + @ Mod . EventBusSubscriber ( bus = Mod . EventBusSubscriber . Bus . MOD ) <nl> + public static class RegistryEvents { <nl> @ SubscribeEvent <nl> - public static void onServerStarting ( FMLServerStartingEvent event ) { <nl> - / / do something when the server starts <nl> - LOGGER . info ( " HELLO from server starting " ) ; <nl> + public void onBlocksRegistry ( final RegistryEvent . Register < Block > blockRegistryEvent ) { <nl> + / / register a new block here <nl> + LOGGER . info ( " HELLO from Register Block " ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> index 48cbc8c . . 9289141 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java <nl> @ @ - 19 , 7 + 19 , 9 @ @ <nl> <nl> package net . minecraftforge . common ; <nl> <nl> + import net . minecraftforge . eventbus . api . IEventBus ; <nl> import net . minecraftforge . fml . FMLWorldPersistenceHook ; <nl> + import net . minecraftforge . fml . ModLoadingContext ; <nl> import net . minecraftforge . fml . VersionChecker ; <nl> import net . minecraftforge . fml . WorldPersistenceHooks ; <nl> import net . minecraftforge . fml . config . ModConfig ; <nl> @ @ - 29 , 7 + 31 , 7 @ @ import net . minecraftforge . fml . event . lifecycle . FMLModIdMappingEvent ; <nl> import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; <nl> import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; <nl> - import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; <nl> + import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; <nl> import net . minecraftforge . fml . loading . FMLPaths ; <nl> import net . minecraftforge . server . command . ForgeCommand ; <nl> import net . minecraftforge . versions . forge . ForgeVersion ; <nl> @ @ - 86 , 15 + 88 , 16 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook <nl> INSTANCE = this ; <nl> WorldPersistenceHooks . addHook ( this ) ; <nl> WorldPersistenceHooks . addHook ( new FMLWorldPersistenceHook ( ) ) ; <nl> - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : preInit ) ; <nl> - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : postInit ) ; <nl> - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : onAvailable ) ; <nl> + final IEventBus modEventBus = FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) ; <nl> + modEventBus . addListener ( this : : preInit ) ; <nl> + modEventBus . addListener ( this : : postInit ) ; <nl> + modEventBus . addListener ( this : : onAvailable ) ; <nl> MinecraftForge . EVENT _ BUS . addListener ( this : : serverStarting ) ; <nl> MinecraftForge . EVENT _ BUS . addListener ( this : : playerLogin ) ; <nl> MinecraftForge . EVENT _ BUS . addListener ( this : : serverStopping ) ; <nl> - FMLModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . CLIENT , ForgeConfig . clientSpec ) ; <nl> - FMLModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . SERVER , ForgeConfig . serverSpec ) ; <nl> - FMLModLoadingContext . get ( ) . getModEventBus ( ) . register ( ForgeConfig . class ) ; <nl> + ModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . CLIENT , ForgeConfig . clientSpec ) ; <nl> + ModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . SERVER , ForgeConfig . serverSpec ) ; <nl> + modEventBus . register ( ForgeConfig . class ) ; <nl> loadConfig ( ForgeConfig . chunk _ spec , FMLPaths . CONFIGDIR . get ( ) . resolve ( " forge _ chunks . toml " ) ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> index 92a7c7a . . 684fea1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ public abstract class ModContainer <nl> protected final String namespace ; <nl> protected final IModInfo modInfo ; <nl> protected ModLoadingStage modLoadingStage ; <nl> + protected Supplier < ? > contextExtension ; <nl> protected final Map < ModLoadingStage , Consumer < LifecycleEventProvider . LifecycleEvent > > triggerMap ; <nl> protected final Map < ExtensionPoint , Supplier < ? > > extensionPoints = new IdentityHashMap < > ( ) ; <nl> protected final EnumMap < ModConfig . Type , ModConfig > configs = new EnumMap < > ( ModConfig . Type . class ) ; <nl> @ @ - 95 , 8 + 96 , 10 @ @ public abstract class ModContainer <nl> { <nl> try <nl> { <nl> + ModLoadingContext . get ( ) . setActiveContainer ( this , contextExtension . get ( ) ) ; <nl> triggerMap . getOrDefault ( modLoadingStage , e - > { } ) . accept ( event ) ; <nl> modLoadingStage = event . toStage ( ) ; <nl> + ModLoadingContext . get ( ) . setActiveContainer ( null , null ) ; <nl> } <nl> catch ( ModLoadingException e ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingContext . java b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java <nl> index d654666 . . 72b4cd0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoadingContext . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java <nl> @ @ - 19 , 11 + 19 , 15 @ @ <nl> <nl> package net . minecraftforge . fml ; <nl> <nl> + import net . minecraftforge . common . ForgeConfigSpec ; <nl> + import net . minecraftforge . fml . config . ModConfig ; <nl> + <nl> import java . util . function . Supplier ; <nl> <nl> public class ModLoadingContext <nl> { <nl> private static ThreadLocal < ModLoadingContext > context = ThreadLocal . withInitial ( ModLoadingContext : : new ) ; <nl> + private Object languageExtension ; <nl> <nl> public static ModLoadingContext get ( ) { <nl> return context . get ( ) ; <nl> @ @ - 31 , 8 + 35 , 9 @ @ public class ModLoadingContext <nl> <nl> private ModContainer activeContainer ; <nl> <nl> - public void setActiveContainer ( final ModContainer container ) { <nl> + public void setActiveContainer ( final ModContainer container , final Object languageExtension ) { <nl> this . activeContainer = container ; <nl> + this . languageExtension = languageExtension ; <nl> } <nl> <nl> public ModContainer getActiveContainer ( ) { <nl> @ @ - 49 , 4 + 54 , 17 @ @ public class ModLoadingContext <nl> getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; <nl> } <nl> <nl> + public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { <nl> + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) ) ) ; <nl> + } <nl> + <nl> + public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { <nl> + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) , fileName ) ) ; <nl> + } <nl> + <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public < T > T extension ( ) { <nl> + return ( T ) languageExtension ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index 1137ea9 . . d0d8e96 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 29 , 7 + 29 , 7 @ @ import net . minecraftforge . api . distmarker . Dist ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . eventbus . api . IEventBus ; <nl> import net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent ; <nl> - import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; <nl> + import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; <nl> <nl> / * * <nl> * This defines a Mod to FML . <nl> @ @ - 90 , 9 + 90 , 9 @ @ public @ interface Mod <nl> FORGE ( ( ) - > MinecraftForge . EVENT _ BUS ) , <nl> / * * <nl> * The mod specific Event bus . <nl> - * @ see FMLModLoadingContext # getModEventBus ( ) <nl> + * @ see FMLJavaModLoadingContext # getModEventBus ( ) <nl> * / <nl> - MOD ( ( ) - > FMLModLoadingContext . get ( ) . getModEventBus ( ) ) ; <nl> + MOD ( ( ) - > FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) ) ; <nl> <nl> private final Supplier < IEventBus > busSupplier ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLJavaModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLJavaModLoadingContext . java <nl> new file mode 100644 <nl> index 0000000 . . b3dd20c <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLJavaModLoadingContext . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2019 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . javafmlmod ; <nl> + <nl> + import net . minecraftforge . eventbus . api . IEventBus ; <nl> + import net . minecraftforge . fml . ModLoadingContext ; <nl> + <nl> + public class FMLJavaModLoadingContext <nl> + { <nl> + private final FMLModContainer container ; <nl> + <nl> + FMLJavaModLoadingContext ( FMLModContainer container ) { <nl> + this . container = container ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The mod ' s event bus , to allow subscription to Mod specific events <nl> + * / <nl> + public IEventBus getModEventBus ( ) <nl> + { <nl> + return container . getEventBus ( ) ; <nl> + } <nl> + <nl> + <nl> + / * * <nl> + * Helper to get the right instance from the { @ link ModLoadingContext } correctly . <nl> + * @ return The FMLJavaMod language specific extension from the ModLoadingContext <nl> + * / <nl> + public static FMLJavaModLoadingContext get ( ) { <nl> + return ModLoadingContext . get ( ) . extension ( ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> index e226229 . . 8bf6be4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> @ @ - 63 , 6 + 63 , 8 @ @ public class FMLModContainer extends ModContainer <nl> triggerMap . put ( ModLoadingStage . COMPLETE , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : completeLoading ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; <nl> this . eventBus = IEventBus . create ( this : : onEventFailed ) ; <nl> this . configHandler = Optional . of ( event - > this . eventBus . post ( event ) ) ; <nl> + final FMLJavaModLoadingContext contextExtension = new FMLJavaModLoadingContext ( this ) ; <nl> + this . contextExtension = ( ) - > contextExtension ; <nl> try <nl> { <nl> modClass = Class . forName ( className , true , modClassLoader ) ; <nl> @ @ - 93 , 8 + 95 , 6 @ @ public class FMLModContainer extends ModContainer <nl> } <nl> <nl> private void beforeEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> - FMLModLoadingContext . get ( ) . setActiveContainer ( this ) ; <nl> - ModLoadingContext . get ( ) . setActiveContainer ( this ) ; <nl> } <nl> <nl> private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> @ @ - 113 , 8 + 113 , 6 @ @ public class FMLModContainer extends ModContainer <nl> } <nl> <nl> private void afterEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> - ModLoadingContext . get ( ) . setActiveContainer ( null ) ; <nl> - FMLModLoadingContext . get ( ) . setActiveContainer ( null ) ; <nl> if ( getCurrentState ( ) = = ModLoadingStage . ERROR ) { <nl> LOGGER . error ( LOADING , " An error occurred while dispatching event { } to { } " , lifecycleEvent . fromStage ( ) , getModId ( ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> deleted file mode 100644 <nl> index 3a6cfd7 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> + + + / dev / null <nl> @ @ - 1 , 66 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2019 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . fml . javafmlmod ; <nl> - <nl> - import net . minecraftforge . common . ForgeConfigSpec ; <nl> - import net . minecraftforge . eventbus . api . IEventBus ; <nl> - import net . minecraftforge . fml . ExtensionPoint ; <nl> - import net . minecraftforge . fml . config . ModConfig ; <nl> - <nl> - import java . util . function . Supplier ; <nl> - <nl> - public class FMLModLoadingContext <nl> - { <nl> - private static ThreadLocal < FMLModLoadingContext > context = ThreadLocal . withInitial ( FMLModLoadingContext : : new ) ; <nl> - private FMLModContainer activeContainer ; <nl> - public static FMLModLoadingContext get ( ) { <nl> - return context . get ( ) ; <nl> - } <nl> - <nl> - public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { <nl> - getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) ) ) ; <nl> - } <nl> - <nl> - public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { <nl> - getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) , fileName ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * @ return The mod ' s event bus , to allow subscription to Mod specific events <nl> - * / <nl> - public IEventBus getModEventBus ( ) <nl> - { <nl> - return getActiveContainer ( ) . getEventBus ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Only valid during { @ link net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent } dispatch and Mod construction <nl> - * @ return the active FML container <nl> - * / <nl> - public FMLModContainer getActiveContainer ( ) <nl> - { <nl> - return activeContainer ; <nl> - } <nl> - <nl> - public void setActiveContainer ( FMLModContainer activeContainer ) <nl> - { <nl> - this . activeContainer = activeContainer ; <nl> - } <nl> - }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java b / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java <nl> index 3a51300 . . 8227193 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java <nl> + + + b / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java <nl> @ @ - 109 , 7 + 109 , 7 @ @ public class DeferredWorkQueue <nl> * @ return A { @ link CompletableFuture } that completes at said time <nl> * / <nl> public static CompletableFuture < Void > runLater ( Runnable workToEnqueue ) { <nl> - currentOwner . set ( ModThreadContext . get ( ) . getActiveContainer ( ) ) ; <nl> + currentOwner . set ( ModLoadingContext . get ( ) . getActiveContainer ( ) ) ; <nl> return CompletableFuture . runAsync ( workToEnqueue , deferredExecutor ) . exceptionally ( DeferredWorkQueue . handleException ( ) ) ; <nl> } <nl> <nl> @ @ - 154 , 7 + 154 , 7 @ @ public class DeferredWorkQueue <nl> * @ return A { @ link CompletableFuture } that completes at said time <nl> * / <nl> public static < T > CompletableFuture < T > getLater ( Supplier < T > workToEnqueue ) { <nl> - currentOwner . set ( ModThreadContext . get ( ) . getActiveContainer ( ) ) ; <nl> + currentOwner . set ( ModLoadingContext . get ( ) . getActiveContainer ( ) ) ; <nl> return CompletableFuture . supplyAsync ( workToEnqueue , deferredExecutor ) . exceptionally ( DeferredWorkQueue . handleException ( ) ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java <nl> index d087bc0 . . 9cce0ba 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java <nl> @ @ - 22 , 14 + 22 , 23 @ @ package net . minecraftforge . fml ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . resources . IResourcePack ; <nl> + import net . minecraftforge . fml . network . FMLPlayMessages ; <nl> import net . minecraftforge . fml . packs . ModFileResourcePack ; <nl> <nl> import java . util . function . BiFunction ; <nl> + import java . util . function . Function ; <nl> <nl> public class ExtensionPoint < T > <nl> { <nl> - public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; <nl> + public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > CONFIGGUIFACTORY = new ExtensionPoint < > ( ) ; <nl> public static final ExtensionPoint < BiFunction < Minecraft , ModFileResourcePack , IResourcePack > > RESOURCEPACK = new ExtensionPoint < > ( ) ; <nl> + <nl> + / * * <nl> + * Register with { @ link ModLoadingContext # } <nl> + * / <nl> + public static final ExtensionPoint < Function < FMLPlayMessages . OpenContainer , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; <nl> + <nl> + <nl> private Class < T > type ; <nl> <nl> private ExtensionPoint ( ) { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> index 4afbf87 . . 92a7c7a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java <nl> @ @ - 115 , 11 + 115 , 11 @ @ public abstract class ModContainer <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - public < T > Optional < T > getCustomExtension ( ExtensionPoint point ) { <nl> + public < T > Optional < T > getCustomExtension ( ExtensionPoint < T > point ) { <nl> return Optional . ofNullable ( ( T ) extensionPoints . getOrDefault ( point , ( ) - > null ) . get ( ) ) ; <nl> } <nl> <nl> - public < T > void registerExtensionPoint ( ExtensionPoint point , Supplier < T > extension ) <nl> + public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) <nl> { <nl> extensionPoints . put ( point , extension ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingContext . java b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java <nl> new file mode 100644 <nl> index 0000000 . . d654666 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java <nl> @ @ - 0 , 0 + 1 , 52 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2019 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import java . util . function . Supplier ; <nl> + <nl> + public class ModLoadingContext <nl> + { <nl> + private static ThreadLocal < ModLoadingContext > context = ThreadLocal . withInitial ( ModLoadingContext : : new ) ; <nl> + <nl> + public static ModLoadingContext get ( ) { <nl> + return context . get ( ) ; <nl> + } <nl> + <nl> + private ModContainer activeContainer ; <nl> + <nl> + public void setActiveContainer ( final ModContainer container ) { <nl> + this . activeContainer = container ; <nl> + } <nl> + <nl> + public ModContainer getActiveContainer ( ) { <nl> + return activeContainer = = null ? DefaultModContainers . MINECRAFT : activeContainer ; <nl> + } <nl> + <nl> + / * * <nl> + * Register an { @ link ExtensionPoint } with the mod container . <nl> + * @ param point The extension point to register <nl> + * @ param extension An extension operator <nl> + * @ param < T > The type signature of the extension operator <nl> + * / <nl> + public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) { <nl> + getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModThreadContext . java b / src / main / java / net / minecraftforge / fml / ModThreadContext . java <nl> deleted file mode 100644 <nl> index 9bf7e8f . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModThreadContext . java <nl> + + + / dev / null <nl> @ @ - 1 , 39 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2019 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . fml ; <nl> - <nl> - public class ModThreadContext <nl> - { <nl> - private static ThreadLocal < ModThreadContext > context = ThreadLocal . withInitial ( ModThreadContext : : new ) ; <nl> - <nl> - public static ModThreadContext get ( ) { <nl> - return context . get ( ) ; <nl> - } <nl> - <nl> - private ModContainer activeContainer ; <nl> - <nl> - public void setActiveContainer ( final ModContainer container ) { <nl> - this . activeContainer = container ; <nl> - } <nl> - <nl> - public ModContainer getActiveContainer ( ) { <nl> - return activeContainer = = null ? DefaultModContainers . MINECRAFT : activeContainer ; <nl> - } <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java b / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java <nl> index b258b4c . . c12d63f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java <nl> @ @ - 33 , 6 + 33 , 6 @ @ public class ConfigGuiHandler <nl> public static Optional < BiFunction < Minecraft , GuiScreen , GuiScreen > > getGuiFactoryFor ( ModInfo selectedMod ) <nl> { <nl> return ModList . get ( ) . getModContainerById ( selectedMod . getModId ( ) ) . <nl> - flatMap ( mc - > mc . getCustomExtension ( ExtensionPoint . GUIFACTORY ) ) ; <nl> + flatMap ( mc - > mc . getCustomExtension ( ExtensionPoint . CONFIGGUIFACTORY ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> index af47613 . . e226229 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> @ @ - 28 , 7 + 28 , 7 @ @ import net . minecraftforge . fml . LifecycleEventProvider ; <nl> import net . minecraftforge . fml . ModContainer ; <nl> import net . minecraftforge . fml . ModLoadingException ; <nl> import net . minecraftforge . fml . ModLoadingStage ; <nl> - import net . minecraftforge . fml . ModThreadContext ; <nl> + import net . minecraftforge . fml . ModLoadingContext ; <nl> import net . minecraftforge . forgespi . language . IModInfo ; <nl> import net . minecraftforge . forgespi . language . ModFileScanData ; <nl> <nl> @ @ - 94 , 7 + 94 , 7 @ @ public class FMLModContainer extends ModContainer <nl> <nl> private void beforeEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> FMLModLoadingContext . get ( ) . setActiveContainer ( this ) ; <nl> - ModThreadContext . get ( ) . setActiveContainer ( this ) ; <nl> + ModLoadingContext . get ( ) . setActiveContainer ( this ) ; <nl> } <nl> <nl> private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> @ @ - 113 , 7 + 113 , 7 @ @ public class FMLModContainer extends ModContainer <nl> } <nl> <nl> private void afterEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { <nl> - ModThreadContext . get ( ) . setActiveContainer ( null ) ; <nl> + ModLoadingContext . get ( ) . setActiveContainer ( null ) ; <nl> FMLModLoadingContext . get ( ) . setActiveContainer ( null ) ; <nl> if ( getCurrentState ( ) = = ModLoadingStage . ERROR ) { <nl> LOGGER . error ( LOADING , " An error occurred while dispatching event { } to { } " , lifecycleEvent . fromStage ( ) , getModId ( ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> index 2c4459a . . 3a6cfd7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java <nl> @ @ - 34 , 23 + 34 , 26 @ @ public class FMLModLoadingContext <nl> return context . get ( ) ; <nl> } <nl> <nl> - public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) { <nl> - getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; <nl> - } <nl> - <nl> public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { <nl> - activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer ) ) ; <nl> + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) ) ) ; <nl> } <nl> <nl> public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { <nl> - activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer , fileName ) ) ; <nl> + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) , fileName ) ) ; <nl> } <nl> <nl> + / * * <nl> + * @ return The mod ' s event bus , to allow subscription to Mod specific events <nl> + * / <nl> public IEventBus getModEventBus ( ) <nl> { <nl> return getActiveContainer ( ) . getEventBus ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Only valid during { @ link net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent } dispatch and Mod construction <nl> + * @ return the active FML container <nl> + * / <nl> public FMLModContainer getActiveContainer ( ) <nl> { <nl> return activeContainer ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> index ab10cd9 . . 34436ee 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> @ @ - 19 , 20 + 19 , 19 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> - import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . Unpooled ; <nl> import net . minecraft . client . Minecraft ; <nl> - import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityTracker ; <nl> import net . minecraft . entity . EntityType ; <nl> import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . math . MathHelper ; <nl> + import net . minecraftforge . fml . ExtensionPoint ; <nl> + import net . minecraftforge . fml . ModList ; <nl> import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; <nl> <nl> import java . util . UUID ; <nl> - import java . util . function . Function ; <nl> import java . util . function . Supplier ; <nl> <nl> public class FMLPlayMessages <nl> @ @ - 166 , 9 + 165 , 9 @ @ public class FMLPlayMessages <nl> { <nl> private final ResourceLocation id ; <nl> private final int windowId ; <nl> - private final byte [ ] additionalData ; <nl> + private final PacketBuffer additionalData ; <nl> <nl> - public OpenContainer ( ResourceLocation id , int windowId , byte [ ] additionalData ) <nl> + OpenContainer ( ResourceLocation id , int windowId , PacketBuffer additionalData ) <nl> { <nl> this . id = id ; <nl> this . windowId = windowId ; <nl> @ @ - 179 , 27 + 178 , 34 @ @ public class FMLPlayMessages <nl> { <nl> buf . writeResourceLocation ( msg . id ) ; <nl> buf . writeVarInt ( msg . windowId ) ; <nl> - buf . writeByteArray ( msg . additionalData ) ; <nl> + buf . writeBytes ( msg . additionalData ) ; <nl> } <nl> <nl> public static OpenContainer decode ( PacketBuffer buf ) <nl> { <nl> - return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , buf . readByteArray ( ) ) ; <nl> + return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , new PacketBuffer ( Unpooled . wrappedBuffer ( buf . readByteArray ( 32600 ) ) ) ) ; <nl> } <nl> <nl> public static void handle ( OpenContainer msg , Supplier < NetworkEvent . Context > ctx ) <nl> { <nl> - ctx . get ( ) . enqueueWork ( ( ) - > { <nl> - Supplier < Function < ByteBuf , GuiScreen > > sup = NetworkRegistry . guiHandlers . get ( msg . id ) ; <nl> - if ( sup ! = null ) { <nl> - GuiScreen gui = sup . get ( ) . apply ( Unpooled . wrappedBuffer ( msg . additionalData ) ) ; <nl> - if ( gui ! = null ) { <nl> - Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; <nl> - Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; <nl> - } <nl> - } <nl> - } ) ; <nl> + ctx . get ( ) . enqueueWork ( ( ) - > ModList . get ( ) . getModContainerById ( msg . id . getNamespace ( ) ) . ifPresent ( mc - > <nl> + mc . getCustomExtension ( ExtensionPoint . GUIFACTORY ) . map ( f - > f . apply ( msg ) ) . ifPresent ( gui - > { <nl> + Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; <nl> + Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; <nl> + } ) ) ) ; <nl> ctx . get ( ) . setPacketHandled ( true ) ; <nl> } <nl> + <nl> + public final ResourceLocation getId ( ) { <nl> + return this . id ; <nl> + } <nl> + <nl> + public int getWindowId ( ) { <nl> + return windowId ; <nl> + } <nl> + <nl> + public PacketBuffer getAdditionalData ( ) { <nl> + return additionalData ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> index cb16e72 . . 20131bb 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java <nl> @ @ - 19 , 13 + 19 , 14 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> - import io . netty . buffer . ByteBuf ; <nl> + import io . netty . buffer . Unpooled ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . player . EntityPlayerMP ; <nl> import net . minecraft . inventory . Container ; <nl> import net . minecraft . network . NetHandlerPlayServer ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . network . Packet ; <nl> + import net . minecraft . network . PacketBuffer ; <nl> import net . minecraft . network . handshake . client . CPacketHandshake ; <nl> import net . minecraft . server . network . NetHandlerLoginServer ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 87 , 10 + 88 , 22 @ @ public class NetworkHooks <nl> return FMLHandshakeHandler . tickLogin ( networkManager ) ; <nl> } <nl> <nl> - public static void openGui ( EntityPlayerMP player , IInteractionObject container , @ Nullable ByteBuf extraData ) <nl> + / * * <nl> + * Server method to tell the client to open a GUI on behalf of the server <nl> + * <nl> + * The { @ link IInteractionObject # getGuiID ( ) } is treated as a { @ link ResourceLocation } . <nl> + * It should refer to a valid modId namespace , to trigger opening on the client . <nl> + * The namespace is directly used to lookup the modId in the client side . <nl> + * <nl> + * @ param player The player to open the GUI for <nl> + * @ param containerSupplier The Container Supplier <nl> + * @ param extraData Additional data for the GUI <nl> + * / <nl> + public static void openGui ( EntityPlayerMP player , IInteractionObject containerSupplier , @ Nullable PacketBuffer extraData ) <nl> { <nl> - ResourceLocation id = new ResourceLocation ( container . getGuiID ( ) ) ; <nl> - Container c = container . createContainer ( player . inventory , player ) ; <nl> + if ( player . world . isRemote ) return ; <nl> + ResourceLocation id = new ResourceLocation ( containerSupplier . getGuiID ( ) ) ; <nl> + Container c = containerSupplier . createContainer ( player . inventory , player ) ; <nl> player . closeScreen ( ) ; <nl> player . getNextWindowId ( ) ; <nl> player . openContainer = c ; <nl> @ @ - 98 , 14 + 111 , 13 @ @ public class NetworkHooks <nl> player . openContainer . addListener ( player ) ; <nl> MinecraftForge . EVENT _ BUS . post ( new PlayerContainerEvent . Open ( player , c ) ) ; <nl> <nl> - byte [ ] additional ; <nl> if ( extraData = = null ) { <nl> - additional = new byte [ 0 ] ; <nl> - } else { <nl> - additional = new byte [ extraData . readableBytes ( ) ] ; <nl> - extraData . readBytes ( additional ) ; <nl> + extraData = new PacketBuffer ( Unpooled . buffer ( ) ) ; <nl> } <nl> - FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , additional ) ; <nl> + if ( extraData . readableBytes ( ) > 32600 ) { <nl> + throw new IllegalArgumentException ( " GUI Open packet too large : " + extraData . readableBytes ( ) ) ; <nl> + } <nl> + FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , extraData ) ; <nl> FMLPlayHandler . channel . sendTo ( msg , player . connection . getNetworkManager ( ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> index 36e6717 . . 41a60c4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java <nl> @ @ - 19 , 8 + 19 , 6 @ @ <nl> <nl> package net . minecraftforge . fml . network ; <nl> <nl> - import io . netty . buffer . ByteBuf ; <nl> - import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . nbt . NBTTagList ; <nl> import net . minecraft . network . NetworkManager ; <nl> @ @ - 34 , 10 + 32 , 12 @ @ import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . Marker ; <nl> import org . apache . logging . log4j . MarkerManager ; <nl> <nl> - import java . util . * ; <nl> - import java . util . concurrent . ConcurrentHashMap ; <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + import java . util . Optional ; <nl> import java . util . function . BiFunction ; <nl> - import java . util . function . Function ; <nl> import java . util . function . Predicate ; <nl> import java . util . function . Supplier ; <nl> import java . util . stream . Collectors ; <nl> @ @ - 51 , 21 + 51 , 6 @ @ public class NetworkRegistry <nl> private static final Marker NETREGISTRY = MarkerManager . getMarker ( " NETREGISTRY " ) ; <nl> <nl> private static Map < ResourceLocation , NetworkInstance > instances = new HashMap < > ( ) ; <nl> - static final Map < ResourceLocation , Supplier < Function < ByteBuf , GuiScreen > > > guiHandlers = new ConcurrentHashMap < > ( ) ; <nl> - <nl> - / * * <nl> - * Registers a client - side GUI handler for the given ID . <nl> - * The function takes any extra data provided to { @ link net . minecraft . entity . player . EntityPlayer # openGui } <nl> - * and returns a { @ link GuiScreen } to display . <nl> - * Call this during { @ link net . minecraftforge . fml . event . lifecycle . FMLClientSetupEvent } . <nl> - * This method is safe to call in parallel mod loading <nl> - * @ param id <nl> - * @ param handler <nl> - * / <nl> - public static void registerGui ( ResourceLocation id , Supplier < Function < ByteBuf , GuiScreen > > handler ) <nl> - { <nl> - guiHandlers . put ( id , handler ) ; <nl> - } <nl> <nl> / * * <nl> * Special value for clientAcceptedVersions and serverAcceptedVersions predicates indicating the other side lacks <nl> diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> index a9c3bf9 . . d259c3b 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java <nl> @ @ - 28 , 13 + 28 , 12 @ @ import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> <nl> import javax . annotation . Nonnull ; <nl> - import net . minecraftforge . fml . ModThreadContext ; <nl> + import net . minecraftforge . fml . ModLoadingContext ; <nl> import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; <nl> import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; <nl> import org . apache . commons . lang3 . Validate ; <nl> <nl> import java . util . Set ; <nl> - import java . util . stream . Collectors ; <nl> <nl> import com . google . common . base . Preconditions ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> @ @ - 280 , 7 + 279 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe <nl> <nl> int add ( int id , V value ) <nl> { <nl> - final String owner = ModThreadContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; <nl> + final String owner = ModLoadingContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; <nl> return add ( id , value , owner ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 24203a5 . . 7cdbd6b 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 42 , 7 + 42 , 7 @ @ import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . event . RegistryEvent ; <nl> import net . minecraftforge . event . RegistryEvent . MissingMappings ; <nl> import net . minecraftforge . fml . LifecycleEventProvider ; <nl> - import net . minecraftforge . fml . ModThreadContext ; <nl> + import net . minecraftforge . fml . ModLoadingContext ; <nl> import net . minecraftforge . fml . StartupQuery ; <nl> import net . minecraftforge . fml . common . EnhancedRuntimeException ; <nl> import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfession ; <nl> @ @ - 51 , 8 + 51 , 6 @ @ import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; <nl> import org . apache . commons . lang3 . Validate ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> - import org . apache . logging . log4j . Marker ; <nl> - import org . apache . logging . log4j . MarkerManager ; <nl> <nl> import javax . annotation . Nullable ; <nl> import java . lang . reflect . Field ; <nl> @ @ - 66 , 7 + 64 , 6 @ @ import java . util . function . Consumer ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Collectors ; <nl> <nl> - import static net . minecraftforge . fml . Logging . CORE ; <nl> import static net . minecraftforge . registries . ForgeRegistry . REGISTRIES ; <nl> <nl> / * * <nl> @ @ - 828 , 7 + 825 , 7 @ @ public class GameData <nl> int index = name . lastIndexOf ( ' : ' ) ; <nl> String oldPrefix = index = = - 1 ? " " : name . substring ( 0 , index ) . toLowerCase ( Locale . ROOT ) ; <nl> name = index = = - 1 ? name : name . substring ( index + 1 ) ; <nl> - String prefix = ModThreadContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; <nl> + String prefix = ModLoadingContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; <nl> if ( ! oldPrefix . equals ( prefix ) & & oldPrefix . length ( ) > 0 ) <nl> { <nl> LogManager . getLogger ( ) . info ( " Potentially Dangerous alternative prefix ` { } ` for name ` { } ` , expected ` { } ` . This could be a intended override , but in most cases indicates a broken mod . " , oldPrefix , name , prefix ) ;

TEST DIFF:
diff - - git a / mdk / src / main / java / com / example / examplemod / ExampleMod . java b / mdk / src / main / java / com / example / examplemod / ExampleMod . java 
 index 30056fe . . 88204a0 100644 
 - - - a / mdk / src / main / java / com / example / examplemod / ExampleMod . java 
 + + + b / mdk / src / main / java / com / example / examplemod / ExampleMod . java 
 @ @ - 12 , 7 + 12 , 7 @ @ import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; 
 import net . minecraftforge . fml . event . lifecycle . InterModEnqueueEvent ; 
 import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; 
 - import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; 
 + import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 @ @ - 27 , 13 + 27 , 13 @ @ public class ExampleMod 
 
 public ExampleMod ( ) { 
 / / Register the setup method for modloading 
 - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : setup ) ; 
 + FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : setup ) ; 
 / / Register the enqueueIMC method for modloading 
 - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : enqueueIMC ) ; 
 + FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : enqueueIMC ) ; 
 / / Register the processIMC method for modloading 
 - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : processIMC ) ; 
 + FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : processIMC ) ; 
 / / Register the doClientStuff method for modloading 
 - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : doClientStuff ) ; 
 + FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : doClientStuff ) ; 
 
 / / Register ourselves for server , registry and other game events we are interested in 
 MinecraftForge . EVENT _ BUS . register ( this ) ; 
 @ @ - 66 , 18 + 66 , 18 @ @ public class ExampleMod 
 } 
 / / You can use SubscribeEvent and let the Event Bus discover methods to call 
 @ SubscribeEvent 
 - public void onBlocksRegistry ( final RegistryEvent . Register < Block > blockRegistryEvent ) { 
 - / / register a new block here 
 - LOGGER . info ( " HELLO from Register Block " ) ; 
 + public static void onServerStarting ( FMLServerStartingEvent event ) { 
 + / / do something when the server starts 
 + LOGGER . info ( " HELLO from server starting " ) ; 
 } 
 
 - / / You can use EventBusSubscriber to automatically subscribe events on the contained class 
 - @ Mod . EventBusSubscriber 
 - public static class ServerEvents { 
 + / / You can use EventBusSubscriber to automatically subscribe events on the contained class ( this is subscribing to the MOD event bus 
 + @ Mod . EventBusSubscriber ( bus = Mod . EventBusSubscriber . Bus . MOD ) 
 + public static class RegistryEvents { 
 @ SubscribeEvent 
 - public static void onServerStarting ( FMLServerStartingEvent event ) { 
 - / / do something when the server starts 
 - LOGGER . info ( " HELLO from server starting " ) ; 
 + public void onBlocksRegistry ( final RegistryEvent . Register < Block > blockRegistryEvent ) { 
 + / / register a new block here 
 + LOGGER . info ( " HELLO from Register Block " ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeMod . java b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 index 48cbc8c . . 9289141 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeMod . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeMod . java 
 @ @ - 19 , 7 + 19 , 9 @ @ 
 
 package net . minecraftforge . common ; 
 
 + import net . minecraftforge . eventbus . api . IEventBus ; 
 import net . minecraftforge . fml . FMLWorldPersistenceHook ; 
 + import net . minecraftforge . fml . ModLoadingContext ; 
 import net . minecraftforge . fml . VersionChecker ; 
 import net . minecraftforge . fml . WorldPersistenceHooks ; 
 import net . minecraftforge . fml . config . ModConfig ; 
 @ @ - 29 , 7 + 31 , 7 @ @ import net . minecraftforge . fml . event . lifecycle . FMLModIdMappingEvent ; 
 import net . minecraftforge . fml . event . lifecycle . InterModProcessEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStartingEvent ; 
 import net . minecraftforge . fml . event . server . FMLServerStoppingEvent ; 
 - import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; 
 + import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; 
 import net . minecraftforge . fml . loading . FMLPaths ; 
 import net . minecraftforge . server . command . ForgeCommand ; 
 import net . minecraftforge . versions . forge . ForgeVersion ; 
 @ @ - 86 , 15 + 88 , 16 @ @ public class ForgeMod implements WorldPersistenceHooks . WorldPersistenceHook 
 INSTANCE = this ; 
 WorldPersistenceHooks . addHook ( this ) ; 
 WorldPersistenceHooks . addHook ( new FMLWorldPersistenceHook ( ) ) ; 
 - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : preInit ) ; 
 - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : postInit ) ; 
 - FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : onAvailable ) ; 
 + final IEventBus modEventBus = FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) ; 
 + modEventBus . addListener ( this : : preInit ) ; 
 + modEventBus . addListener ( this : : postInit ) ; 
 + modEventBus . addListener ( this : : onAvailable ) ; 
 MinecraftForge . EVENT _ BUS . addListener ( this : : serverStarting ) ; 
 MinecraftForge . EVENT _ BUS . addListener ( this : : playerLogin ) ; 
 MinecraftForge . EVENT _ BUS . addListener ( this : : serverStopping ) ; 
 - FMLModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . CLIENT , ForgeConfig . clientSpec ) ; 
 - FMLModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . SERVER , ForgeConfig . serverSpec ) ; 
 - FMLModLoadingContext . get ( ) . getModEventBus ( ) . register ( ForgeConfig . class ) ; 
 + ModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . CLIENT , ForgeConfig . clientSpec ) ; 
 + ModLoadingContext . get ( ) . registerConfig ( ModConfig . Type . SERVER , ForgeConfig . serverSpec ) ; 
 + modEventBus . register ( ForgeConfig . class ) ; 
 loadConfig ( ForgeConfig . chunk _ spec , FMLPaths . CONFIGDIR . get ( ) . resolve ( " forge _ chunks . toml " ) ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 index 92a7c7a . . 684fea1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 @ @ - 45 , 6 + 45 , 7 @ @ public abstract class ModContainer 
 protected final String namespace ; 
 protected final IModInfo modInfo ; 
 protected ModLoadingStage modLoadingStage ; 
 + protected Supplier < ? > contextExtension ; 
 protected final Map < ModLoadingStage , Consumer < LifecycleEventProvider . LifecycleEvent > > triggerMap ; 
 protected final Map < ExtensionPoint , Supplier < ? > > extensionPoints = new IdentityHashMap < > ( ) ; 
 protected final EnumMap < ModConfig . Type , ModConfig > configs = new EnumMap < > ( ModConfig . Type . class ) ; 
 @ @ - 95 , 8 + 96 , 10 @ @ public abstract class ModContainer 
 { 
 try 
 { 
 + ModLoadingContext . get ( ) . setActiveContainer ( this , contextExtension . get ( ) ) ; 
 triggerMap . getOrDefault ( modLoadingStage , e - > { } ) . accept ( event ) ; 
 modLoadingStage = event . toStage ( ) ; 
 + ModLoadingContext . get ( ) . setActiveContainer ( null , null ) ; 
 } 
 catch ( ModLoadingException e ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingContext . java b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java 
 index d654666 . . 72b4cd0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoadingContext . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java 
 @ @ - 19 , 11 + 19 , 15 @ @ 
 
 package net . minecraftforge . fml ; 
 
 + import net . minecraftforge . common . ForgeConfigSpec ; 
 + import net . minecraftforge . fml . config . ModConfig ; 
 + 
 import java . util . function . Supplier ; 
 
 public class ModLoadingContext 
 { 
 private static ThreadLocal < ModLoadingContext > context = ThreadLocal . withInitial ( ModLoadingContext : : new ) ; 
 + private Object languageExtension ; 
 
 public static ModLoadingContext get ( ) { 
 return context . get ( ) ; 
 @ @ - 31 , 8 + 35 , 9 @ @ public class ModLoadingContext 
 
 private ModContainer activeContainer ; 
 
 - public void setActiveContainer ( final ModContainer container ) { 
 + public void setActiveContainer ( final ModContainer container , final Object languageExtension ) { 
 this . activeContainer = container ; 
 + this . languageExtension = languageExtension ; 
 } 
 
 public ModContainer getActiveContainer ( ) { 
 @ @ - 49 , 4 + 54 , 17 @ @ public class ModLoadingContext 
 getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; 
 } 
 
 + public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { 
 + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) ) ) ; 
 + } 
 + 
 + public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { 
 + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) , fileName ) ) ; 
 + } 
 + 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + public < T > T extension ( ) { 
 + return ( T ) languageExtension ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index 1137ea9 . . d0d8e96 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 29 , 7 + 29 , 7 @ @ import net . minecraftforge . api . distmarker . Dist ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . eventbus . api . IEventBus ; 
 import net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent ; 
 - import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; 
 + import net . minecraftforge . fml . javafmlmod . FMLJavaModLoadingContext ; 
 
 / * * 
 * This defines a Mod to FML . 
 @ @ - 90 , 9 + 90 , 9 @ @ public @ interface Mod 
 FORGE ( ( ) - > MinecraftForge . EVENT _ BUS ) , 
 / * * 
 * The mod specific Event bus . 
 - * @ see FMLModLoadingContext # getModEventBus ( ) 
 + * @ see FMLJavaModLoadingContext # getModEventBus ( ) 
 * / 
 - MOD ( ( ) - > FMLModLoadingContext . get ( ) . getModEventBus ( ) ) ; 
 + MOD ( ( ) - > FMLJavaModLoadingContext . get ( ) . getModEventBus ( ) ) ; 
 
 private final Supplier < IEventBus > busSupplier ; 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLJavaModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLJavaModLoadingContext . java 
 new file mode 100644 
 index 0000000 . . b3dd20c 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLJavaModLoadingContext . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2019 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . javafmlmod ; 
 + 
 + import net . minecraftforge . eventbus . api . IEventBus ; 
 + import net . minecraftforge . fml . ModLoadingContext ; 
 + 
 + public class FMLJavaModLoadingContext 
 + { 
 + private final FMLModContainer container ; 
 + 
 + FMLJavaModLoadingContext ( FMLModContainer container ) { 
 + this . container = container ; 
 + } 
 + 
 + / * * 
 + * @ return The mod ' s event bus , to allow subscription to Mod specific events 
 + * / 
 + public IEventBus getModEventBus ( ) 
 + { 
 + return container . getEventBus ( ) ; 
 + } 
 + 
 + 
 + / * * 
 + * Helper to get the right instance from the { @ link ModLoadingContext } correctly . 
 + * @ return The FMLJavaMod language specific extension from the ModLoadingContext 
 + * / 
 + public static FMLJavaModLoadingContext get ( ) { 
 + return ModLoadingContext . get ( ) . extension ( ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 index e226229 . . 8bf6be4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 @ @ - 63 , 6 + 63 , 8 @ @ public class FMLModContainer extends ModContainer 
 triggerMap . put ( ModLoadingStage . COMPLETE , dummy ( ) . andThen ( this : : beforeEvent ) . andThen ( this : : completeLoading ) . andThen ( this : : fireEvent ) . andThen ( this : : afterEvent ) ) ; 
 this . eventBus = IEventBus . create ( this : : onEventFailed ) ; 
 this . configHandler = Optional . of ( event - > this . eventBus . post ( event ) ) ; 
 + final FMLJavaModLoadingContext contextExtension = new FMLJavaModLoadingContext ( this ) ; 
 + this . contextExtension = ( ) - > contextExtension ; 
 try 
 { 
 modClass = Class . forName ( className , true , modClassLoader ) ; 
 @ @ - 93 , 8 + 95 , 6 @ @ public class FMLModContainer extends ModContainer 
 } 
 
 private void beforeEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 - FMLModLoadingContext . get ( ) . setActiveContainer ( this ) ; 
 - ModLoadingContext . get ( ) . setActiveContainer ( this ) ; 
 } 
 
 private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 @ @ - 113 , 8 + 113 , 6 @ @ public class FMLModContainer extends ModContainer 
 } 
 
 private void afterEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 - ModLoadingContext . get ( ) . setActiveContainer ( null ) ; 
 - FMLModLoadingContext . get ( ) . setActiveContainer ( null ) ; 
 if ( getCurrentState ( ) = = ModLoadingStage . ERROR ) { 
 LOGGER . error ( LOADING , " An error occurred while dispatching event { } to { } " , lifecycleEvent . fromStage ( ) , getModId ( ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 deleted file mode 100644 
 index 3a6cfd7 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 + + + / dev / null 
 @ @ - 1 , 66 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2019 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . fml . javafmlmod ; 
 - 
 - import net . minecraftforge . common . ForgeConfigSpec ; 
 - import net . minecraftforge . eventbus . api . IEventBus ; 
 - import net . minecraftforge . fml . ExtensionPoint ; 
 - import net . minecraftforge . fml . config . ModConfig ; 
 - 
 - import java . util . function . Supplier ; 
 - 
 - public class FMLModLoadingContext 
 - { 
 - private static ThreadLocal < FMLModLoadingContext > context = ThreadLocal . withInitial ( FMLModLoadingContext : : new ) ; 
 - private FMLModContainer activeContainer ; 
 - public static FMLModLoadingContext get ( ) { 
 - return context . get ( ) ; 
 - } 
 - 
 - public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { 
 - getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) ) ) ; 
 - } 
 - 
 - public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { 
 - getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) , fileName ) ) ; 
 - } 
 - 
 - / * * 
 - * @ return The mod ' s event bus , to allow subscription to Mod specific events 
 - * / 
 - public IEventBus getModEventBus ( ) 
 - { 
 - return getActiveContainer ( ) . getEventBus ( ) ; 
 - } 
 - 
 - / * * 
 - * Only valid during { @ link net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent } dispatch and Mod construction 
 - * @ return the active FML container 
 - * / 
 - public FMLModContainer getActiveContainer ( ) 
 - { 
 - return activeContainer ; 
 - } 
 - 
 - public void setActiveContainer ( FMLModContainer activeContainer ) 
 - { 
 - this . activeContainer = activeContainer ; 
 - } 
 - }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java b / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java 
 index 3a51300 . . 8227193 100644 
 - - - a / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java 
 + + + b / src / main / java / net / minecraftforge / fml / DeferredWorkQueue . java 
 @ @ - 109 , 7 + 109 , 7 @ @ public class DeferredWorkQueue 
 * @ return A { @ link CompletableFuture } that completes at said time 
 * / 
 public static CompletableFuture < Void > runLater ( Runnable workToEnqueue ) { 
 - currentOwner . set ( ModThreadContext . get ( ) . getActiveContainer ( ) ) ; 
 + currentOwner . set ( ModLoadingContext . get ( ) . getActiveContainer ( ) ) ; 
 return CompletableFuture . runAsync ( workToEnqueue , deferredExecutor ) . exceptionally ( DeferredWorkQueue . handleException ( ) ) ; 
 } 
 
 @ @ - 154 , 7 + 154 , 7 @ @ public class DeferredWorkQueue 
 * @ return A { @ link CompletableFuture } that completes at said time 
 * / 
 public static < T > CompletableFuture < T > getLater ( Supplier < T > workToEnqueue ) { 
 - currentOwner . set ( ModThreadContext . get ( ) . getActiveContainer ( ) ) ; 
 + currentOwner . set ( ModLoadingContext . get ( ) . getActiveContainer ( ) ) ; 
 return CompletableFuture . supplyAsync ( workToEnqueue , deferredExecutor ) . exceptionally ( DeferredWorkQueue . handleException ( ) ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java 
 index d087bc0 . . 9cce0ba 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ExtensionPoint . java 
 + + + b / src / main / java / net / minecraftforge / fml / ExtensionPoint . java 
 @ @ - 22 , 14 + 22 , 23 @ @ package net . minecraftforge . fml ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . resources . IResourcePack ; 
 + import net . minecraftforge . fml . network . FMLPlayMessages ; 
 import net . minecraftforge . fml . packs . ModFileResourcePack ; 
 
 import java . util . function . BiFunction ; 
 + import java . util . function . Function ; 
 
 public class ExtensionPoint < T > 
 { 
 - public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; 
 + public static final ExtensionPoint < BiFunction < Minecraft , GuiScreen , GuiScreen > > CONFIGGUIFACTORY = new ExtensionPoint < > ( ) ; 
 public static final ExtensionPoint < BiFunction < Minecraft , ModFileResourcePack , IResourcePack > > RESOURCEPACK = new ExtensionPoint < > ( ) ; 
 + 
 + / * * 
 + * Register with { @ link ModLoadingContext # } 
 + * / 
 + public static final ExtensionPoint < Function < FMLPlayMessages . OpenContainer , GuiScreen > > GUIFACTORY = new ExtensionPoint < > ( ) ; 
 + 
 + 
 private Class < T > type ; 
 
 private ExtensionPoint ( ) { 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModContainer . java b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 index 4afbf87 . . 92a7c7a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModContainer . java 
 @ @ - 115 , 11 + 115 , 11 @ @ public abstract class ModContainer 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - public < T > Optional < T > getCustomExtension ( ExtensionPoint point ) { 
 + public < T > Optional < T > getCustomExtension ( ExtensionPoint < T > point ) { 
 return Optional . ofNullable ( ( T ) extensionPoints . getOrDefault ( point , ( ) - > null ) . get ( ) ) ; 
 } 
 
 - public < T > void registerExtensionPoint ( ExtensionPoint point , Supplier < T > extension ) 
 + public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) 
 { 
 extensionPoints . put ( point , extension ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingContext . java b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java 
 new file mode 100644 
 index 0000000 . . d654666 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoadingContext . java 
 @ @ - 0 , 0 + 1 , 52 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2019 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml ; 
 + 
 + import java . util . function . Supplier ; 
 + 
 + public class ModLoadingContext 
 + { 
 + private static ThreadLocal < ModLoadingContext > context = ThreadLocal . withInitial ( ModLoadingContext : : new ) ; 
 + 
 + public static ModLoadingContext get ( ) { 
 + return context . get ( ) ; 
 + } 
 + 
 + private ModContainer activeContainer ; 
 + 
 + public void setActiveContainer ( final ModContainer container ) { 
 + this . activeContainer = container ; 
 + } 
 + 
 + public ModContainer getActiveContainer ( ) { 
 + return activeContainer = = null ? DefaultModContainers . MINECRAFT : activeContainer ; 
 + } 
 + 
 + / * * 
 + * Register an { @ link ExtensionPoint } with the mod container . 
 + * @ param point The extension point to register 
 + * @ param extension An extension operator 
 + * @ param < T > The type signature of the extension operator 
 + * / 
 + public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) { 
 + getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModThreadContext . java b / src / main / java / net / minecraftforge / fml / ModThreadContext . java 
 deleted file mode 100644 
 index 9bf7e8f . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / ModThreadContext . java 
 + + + / dev / null 
 @ @ - 1 , 39 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2019 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . fml ; 
 - 
 - public class ModThreadContext 
 - { 
 - private static ThreadLocal < ModThreadContext > context = ThreadLocal . withInitial ( ModThreadContext : : new ) ; 
 - 
 - public static ModThreadContext get ( ) { 
 - return context . get ( ) ; 
 - } 
 - 
 - private ModContainer activeContainer ; 
 - 
 - public void setActiveContainer ( final ModContainer container ) { 
 - this . activeContainer = container ; 
 - } 
 - 
 - public ModContainer getActiveContainer ( ) { 
 - return activeContainer = = null ? DefaultModContainers . MINECRAFT : activeContainer ; 
 - } 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java b / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java 
 index b258b4c . . c12d63f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / ConfigGuiHandler . java 
 @ @ - 33 , 6 + 33 , 6 @ @ public class ConfigGuiHandler 
 public static Optional < BiFunction < Minecraft , GuiScreen , GuiScreen > > getGuiFactoryFor ( ModInfo selectedMod ) 
 { 
 return ModList . get ( ) . getModContainerById ( selectedMod . getModId ( ) ) . 
 - flatMap ( mc - > mc . getCustomExtension ( ExtensionPoint . GUIFACTORY ) ) ; 
 + flatMap ( mc - > mc . getCustomExtension ( ExtensionPoint . CONFIGGUIFACTORY ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 index af47613 . . e226229 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 @ @ - 28 , 7 + 28 , 7 @ @ import net . minecraftforge . fml . LifecycleEventProvider ; 
 import net . minecraftforge . fml . ModContainer ; 
 import net . minecraftforge . fml . ModLoadingException ; 
 import net . minecraftforge . fml . ModLoadingStage ; 
 - import net . minecraftforge . fml . ModThreadContext ; 
 + import net . minecraftforge . fml . ModLoadingContext ; 
 import net . minecraftforge . forgespi . language . IModInfo ; 
 import net . minecraftforge . forgespi . language . ModFileScanData ; 
 
 @ @ - 94 , 7 + 94 , 7 @ @ public class FMLModContainer extends ModContainer 
 
 private void beforeEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 FMLModLoadingContext . get ( ) . setActiveContainer ( this ) ; 
 - ModThreadContext . get ( ) . setActiveContainer ( this ) ; 
 + ModLoadingContext . get ( ) . setActiveContainer ( this ) ; 
 } 
 
 private void fireEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 @ @ - 113 , 7 + 113 , 7 @ @ public class FMLModContainer extends ModContainer 
 } 
 
 private void afterEvent ( LifecycleEventProvider . LifecycleEvent lifecycleEvent ) { 
 - ModThreadContext . get ( ) . setActiveContainer ( null ) ; 
 + ModLoadingContext . get ( ) . setActiveContainer ( null ) ; 
 FMLModLoadingContext . get ( ) . setActiveContainer ( null ) ; 
 if ( getCurrentState ( ) = = ModLoadingStage . ERROR ) { 
 LOGGER . error ( LOADING , " An error occurred while dispatching event { } to { } " , lifecycleEvent . fromStage ( ) , getModId ( ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 index 2c4459a . . 3a6cfd7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModLoadingContext . java 
 @ @ - 34 , 23 + 34 , 26 @ @ public class FMLModLoadingContext 
 return context . get ( ) ; 
 } 
 
 - public < T > void registerExtensionPoint ( ExtensionPoint < T > point , Supplier < T > extension ) { 
 - getActiveContainer ( ) . registerExtensionPoint ( point , extension ) ; 
 - } 
 - 
 public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec ) { 
 - activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer ) ) ; 
 + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) ) ) ; 
 } 
 
 public void registerConfig ( ModConfig . Type type , ForgeConfigSpec spec , String fileName ) { 
 - activeContainer . addConfig ( new ModConfig ( type , spec , activeContainer , fileName ) ) ; 
 + getActiveContainer ( ) . addConfig ( new ModConfig ( type , spec , getActiveContainer ( ) , fileName ) ) ; 
 } 
 
 + / * * 
 + * @ return The mod ' s event bus , to allow subscription to Mod specific events 
 + * / 
 public IEventBus getModEventBus ( ) 
 { 
 return getActiveContainer ( ) . getEventBus ( ) ; 
 } 
 
 + / * * 
 + * Only valid during { @ link net . minecraftforge . fml . event . lifecycle . ModLifecycleEvent } dispatch and Mod construction 
 + * @ return the active FML container 
 + * / 
 public FMLModContainer getActiveContainer ( ) 
 { 
 return activeContainer ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 index ab10cd9 . . 34436ee 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 @ @ - 19 , 20 + 19 , 19 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 - import io . netty . buffer . ByteBuf ; 
 import io . netty . buffer . Unpooled ; 
 import net . minecraft . client . Minecraft ; 
 - import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityTracker ; 
 import net . minecraft . entity . EntityType ; 
 import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . math . MathHelper ; 
 + import net . minecraftforge . fml . ExtensionPoint ; 
 + import net . minecraftforge . fml . ModList ; 
 import net . minecraftforge . fml . common . registry . IEntityAdditionalSpawnData ; 
 
 import java . util . UUID ; 
 - import java . util . function . Function ; 
 import java . util . function . Supplier ; 
 
 public class FMLPlayMessages 
 @ @ - 166 , 9 + 165 , 9 @ @ public class FMLPlayMessages 
 { 
 private final ResourceLocation id ; 
 private final int windowId ; 
 - private final byte [ ] additionalData ; 
 + private final PacketBuffer additionalData ; 
 
 - public OpenContainer ( ResourceLocation id , int windowId , byte [ ] additionalData ) 
 + OpenContainer ( ResourceLocation id , int windowId , PacketBuffer additionalData ) 
 { 
 this . id = id ; 
 this . windowId = windowId ; 
 @ @ - 179 , 27 + 178 , 34 @ @ public class FMLPlayMessages 
 { 
 buf . writeResourceLocation ( msg . id ) ; 
 buf . writeVarInt ( msg . windowId ) ; 
 - buf . writeByteArray ( msg . additionalData ) ; 
 + buf . writeBytes ( msg . additionalData ) ; 
 } 
 
 public static OpenContainer decode ( PacketBuffer buf ) 
 { 
 - return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , buf . readByteArray ( ) ) ; 
 + return new OpenContainer ( buf . readResourceLocation ( ) , buf . readVarInt ( ) , new PacketBuffer ( Unpooled . wrappedBuffer ( buf . readByteArray ( 32600 ) ) ) ) ; 
 } 
 
 public static void handle ( OpenContainer msg , Supplier < NetworkEvent . Context > ctx ) 
 { 
 - ctx . get ( ) . enqueueWork ( ( ) - > { 
 - Supplier < Function < ByteBuf , GuiScreen > > sup = NetworkRegistry . guiHandlers . get ( msg . id ) ; 
 - if ( sup ! = null ) { 
 - GuiScreen gui = sup . get ( ) . apply ( Unpooled . wrappedBuffer ( msg . additionalData ) ) ; 
 - if ( gui ! = null ) { 
 - Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; 
 - Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; 
 - } 
 - } 
 - } ) ; 
 + ctx . get ( ) . enqueueWork ( ( ) - > ModList . get ( ) . getModContainerById ( msg . id . getNamespace ( ) ) . ifPresent ( mc - > 
 + mc . getCustomExtension ( ExtensionPoint . GUIFACTORY ) . map ( f - > f . apply ( msg ) ) . ifPresent ( gui - > { 
 + Minecraft . getInstance ( ) . displayGuiScreen ( gui ) ; 
 + Minecraft . getInstance ( ) . player . openContainer . windowId = msg . windowId ; 
 + } ) ) ) ; 
 ctx . get ( ) . setPacketHandled ( true ) ; 
 } 
 + 
 + public final ResourceLocation getId ( ) { 
 + return this . id ; 
 + } 
 + 
 + public int getWindowId ( ) { 
 + return windowId ; 
 + } 
 + 
 + public PacketBuffer getAdditionalData ( ) { 
 + return additionalData ; 
 + } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 index cb16e72 . . 20131bb 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkHooks . java 
 @ @ - 19 , 13 + 19 , 14 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 - import io . netty . buffer . ByteBuf ; 
 + import io . netty . buffer . Unpooled ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . player . EntityPlayerMP ; 
 import net . minecraft . inventory . Container ; 
 import net . minecraft . network . NetHandlerPlayServer ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . network . Packet ; 
 + import net . minecraft . network . PacketBuffer ; 
 import net . minecraft . network . handshake . client . CPacketHandshake ; 
 import net . minecraft . server . network . NetHandlerLoginServer ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 87 , 10 + 88 , 22 @ @ public class NetworkHooks 
 return FMLHandshakeHandler . tickLogin ( networkManager ) ; 
 } 
 
 - public static void openGui ( EntityPlayerMP player , IInteractionObject container , @ Nullable ByteBuf extraData ) 
 + / * * 
 + * Server method to tell the client to open a GUI on behalf of the server 
 + * 
 + * The { @ link IInteractionObject # getGuiID ( ) } is treated as a { @ link ResourceLocation } . 
 + * It should refer to a valid modId namespace , to trigger opening on the client . 
 + * The namespace is directly used to lookup the modId in the client side . 
 + * 
 + * @ param player The player to open the GUI for 
 + * @ param containerSupplier The Container Supplier 
 + * @ param extraData Additional data for the GUI 
 + * / 
 + public static void openGui ( EntityPlayerMP player , IInteractionObject containerSupplier , @ Nullable PacketBuffer extraData ) 
 { 
 - ResourceLocation id = new ResourceLocation ( container . getGuiID ( ) ) ; 
 - Container c = container . createContainer ( player . inventory , player ) ; 
 + if ( player . world . isRemote ) return ; 
 + ResourceLocation id = new ResourceLocation ( containerSupplier . getGuiID ( ) ) ; 
 + Container c = containerSupplier . createContainer ( player . inventory , player ) ; 
 player . closeScreen ( ) ; 
 player . getNextWindowId ( ) ; 
 player . openContainer = c ; 
 @ @ - 98 , 14 + 111 , 13 @ @ public class NetworkHooks 
 player . openContainer . addListener ( player ) ; 
 MinecraftForge . EVENT _ BUS . post ( new PlayerContainerEvent . Open ( player , c ) ) ; 
 
 - byte [ ] additional ; 
 if ( extraData = = null ) { 
 - additional = new byte [ 0 ] ; 
 - } else { 
 - additional = new byte [ extraData . readableBytes ( ) ] ; 
 - extraData . readBytes ( additional ) ; 
 + extraData = new PacketBuffer ( Unpooled . buffer ( ) ) ; 
 } 
 - FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , additional ) ; 
 + if ( extraData . readableBytes ( ) > 32600 ) { 
 + throw new IllegalArgumentException ( " GUI Open packet too large : " + extraData . readableBytes ( ) ) ; 
 + } 
 + FMLPlayMessages . OpenContainer msg = new FMLPlayMessages . OpenContainer ( id , player . currentWindowId , extraData ) ; 
 FMLPlayHandler . channel . sendTo ( msg , player . connection . getNetworkManager ( ) , NetworkDirection . PLAY _ TO _ CLIENT ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 index 36e6717 . . 41a60c4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkRegistry . java 
 @ @ - 19 , 8 + 19 , 6 @ @ 
 
 package net . minecraftforge . fml . network ; 
 
 - import io . netty . buffer . ByteBuf ; 
 - import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . nbt . NBTTagList ; 
 import net . minecraft . network . NetworkManager ; 
 @ @ - 34 , 10 + 32 , 12 @ @ import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . Marker ; 
 import org . apache . logging . log4j . MarkerManager ; 
 
 - import java . util . * ; 
 - import java . util . concurrent . ConcurrentHashMap ; 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . List ; 
 + import java . util . Map ; 
 + import java . util . Optional ; 
 import java . util . function . BiFunction ; 
 - import java . util . function . Function ; 
 import java . util . function . Predicate ; 
 import java . util . function . Supplier ; 
 import java . util . stream . Collectors ; 
 @ @ - 51 , 21 + 51 , 6 @ @ public class NetworkRegistry 
 private static final Marker NETREGISTRY = MarkerManager . getMarker ( " NETREGISTRY " ) ; 
 
 private static Map < ResourceLocation , NetworkInstance > instances = new HashMap < > ( ) ; 
 - static final Map < ResourceLocation , Supplier < Function < ByteBuf , GuiScreen > > > guiHandlers = new ConcurrentHashMap < > ( ) ; 
 - 
 - / * * 
 - * Registers a client - side GUI handler for the given ID . 
 - * The function takes any extra data provided to { @ link net . minecraft . entity . player . EntityPlayer # openGui } 
 - * and returns a { @ link GuiScreen } to display . 
 - * Call this during { @ link net . minecraftforge . fml . event . lifecycle . FMLClientSetupEvent } . 
 - * This method is safe to call in parallel mod loading 
 - * @ param id 
 - * @ param handler 
 - * / 
 - public static void registerGui ( ResourceLocation id , Supplier < Function < ByteBuf , GuiScreen > > handler ) 
 - { 
 - guiHandlers . put ( id , handler ) ; 
 - } 
 
 / * * 
 * Special value for clientAcceptedVersions and serverAcceptedVersions predicates indicating the other side lacks 
 diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 index a9c3bf9 . . d259c3b 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistry . java 
 @ @ - 28 , 13 + 28 , 12 @ @ import java . util . Map ; 
 import java . util . Map . Entry ; 
 
 import javax . annotation . Nonnull ; 
 - import net . minecraftforge . fml . ModThreadContext ; 
 + import net . minecraftforge . fml . ModLoadingContext ; 
 import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; 
 import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; 
 import org . apache . commons . lang3 . Validate ; 
 
 import java . util . Set ; 
 - import java . util . stream . Collectors ; 
 
 import com . google . common . base . Preconditions ; 
 import com . google . common . collect . ArrayListMultimap ; 
 @ @ - 280 , 7 + 279 , 7 @ @ public class ForgeRegistry < V extends IForgeRegistryEntry < V > > implements IForgeRe 
 
 int add ( int id , V value ) 
 { 
 - final String owner = ModThreadContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; 
 + final String owner = ModLoadingContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; 
 return add ( id , value , owner ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 24203a5 . . 7cdbd6b 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 42 , 7 + 42 , 7 @ @ import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . event . RegistryEvent ; 
 import net . minecraftforge . event . RegistryEvent . MissingMappings ; 
 import net . minecraftforge . fml . LifecycleEventProvider ; 
 - import net . minecraftforge . fml . ModThreadContext ; 
 + import net . minecraftforge . fml . ModLoadingContext ; 
 import net . minecraftforge . fml . StartupQuery ; 
 import net . minecraftforge . fml . common . EnhancedRuntimeException ; 
 import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfession ; 
 @ @ - 51 , 8 + 51 , 6 @ @ import net . minecraftforge . fml . loading . AdvancedLogMessageAdapter ; 
 import org . apache . commons . lang3 . Validate ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 - import org . apache . logging . log4j . Marker ; 
 - import org . apache . logging . log4j . MarkerManager ; 
 
 import javax . annotation . Nullable ; 
 import java . lang . reflect . Field ; 
 @ @ - 66 , 7 + 64 , 6 @ @ import java . util . function . Consumer ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Collectors ; 
 
 - import static net . minecraftforge . fml . Logging . CORE ; 
 import static net . minecraftforge . registries . ForgeRegistry . REGISTRIES ; 
 
 / * * 
 @ @ - 828 , 7 + 825 , 7 @ @ public class GameData 
 int index = name . lastIndexOf ( ' : ' ) ; 
 String oldPrefix = index = = - 1 ? " " : name . substring ( 0 , index ) . toLowerCase ( Locale . ROOT ) ; 
 name = index = = - 1 ? name : name . substring ( index + 1 ) ; 
 - String prefix = ModThreadContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; 
 + String prefix = ModLoadingContext . get ( ) . getActiveContainer ( ) . getNamespace ( ) ; 
 if ( ! oldPrefix . equals ( prefix ) & & oldPrefix . length ( ) > 0 ) 
 { 
 LogManager . getLogger ( ) . info ( " Potentially Dangerous alternative prefix ` { } ` for name ` { } ` , expected ` { } ` . This could be a intended override , but in most cases indicates a broken mod . " , oldPrefix , name , prefix ) ;
