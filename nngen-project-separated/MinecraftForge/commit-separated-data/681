BLEU SCORE: 0.0712695567709093

TEST MSG: Forge will now warn the user and ask permission to load a world with unknown registries . Closes # 2934
GENERATED MSG: Fixed dummy blocks not being removed from registry on dedicated server correctly . Closes # 2487

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 0001b42 . . c943fc7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 168 , 6 + 168 , 32 @ @ public class PersistentRegistryManager <nl> forAllRegistries ( PersistentRegistry . ACTIVE , DumpRegistryFunction . OPERATION ) ; <nl> forAllRegistries ( PersistentRegistry . ACTIVE , ResetDelegatesFunction . OPERATION ) ; <nl> <nl> + List < ResourceLocation > missingRegs = Lists . newArrayList ( ) ; <nl> + for ( ResourceLocation name : snapshot . entries . keySet ( ) ) <nl> + { <nl> + name = getFixedName ( name ) ; <nl> + if ( PersistentRegistry . ACTIVE . getRegistry ( name , null ) = = null ) <nl> + { <nl> + missingRegs . add ( name ) ; <nl> + } <nl> + } <nl> + <nl> + if ( missingRegs . size ( ) > 0 ) <nl> + { <nl> + String text = " Forge Mod Loader detected missing / unknown registrie ( s ) . \ n \ n " + <nl> + " There are " + missingRegs . size ( ) + " missing registries in this save . \ n " + <nl> + " If you continue the missing registries will get removed . \ n " + <nl> + " This may cause issues , it is advised that you create a world backup before continuing . \ n \ n " + <nl> + " Missing Registries : \ n " ; <nl> + <nl> + for ( ResourceLocation s : missingRegs ) <nl> + text + = s . toString ( ) + " \ n " ; <nl> + <nl> + boolean confirmed = StartupQuery . confirm ( text ) ; <nl> + if ( ! confirmed ) <nl> + StartupQuery . abort ( ) ; <nl> + } <nl> + <nl> / / Load the snapshot into the " STAGING " registry <nl> for ( Map . Entry < ResourceLocation , GameDataSnapshot . Entry > snapshotEntry : snapshot . entries . entrySet ( ) ) <nl> { <nl> @ @ - 316 , 21 + 342 , 25 @ @ public class PersistentRegistryManager <nl> newRegistry . loadIds ( frozenRegistry . getEntriesNotIn ( newRegistry ) , Maps . < ResourceLocation , Integer > newLinkedHashMap ( ) , remaps . get ( registryName ) , frozenRegistry , registryName ) ; <nl> } <nl> <nl> - private static < T extends IForgeRegistryEntry < T > > void loadPersistentDataToStagingRegistry ( boolean injectFrozenData , Map < ResourceLocation , Map < ResourceLocation , Integer [ ] > > remaps , LinkedHashMap < ResourceLocation , Map < ResourceLocation , Integer > > missing , Map . Entry < ResourceLocation , GameDataSnapshot . Entry > snapEntry , Class < T > regType ) <nl> + / / TODO : Remove when we don ' t care about loading 1 . 7 . 10 ( ? ) worlds ? <nl> + private static ResourceLocation getFixedName ( ResourceLocation registryName ) <nl> { <nl> - ResourceLocation registryName = snapEntry . getKey ( ) ; <nl> - <nl> / / Translate old names <nl> if ( " fml : blocks " . equals ( registryName . toString ( ) ) ) registryName = PersistentRegistryManager . BLOCKS ; <nl> else if ( " fml : items " . equals ( registryName . toString ( ) ) ) registryName = PersistentRegistryManager . ITEMS ; <nl> else if ( " fmlgr : villagerprofessions " . equals ( registryName . toString ( ) ) ) registryName = VillagerRegistry . PROFESSIONS ; <nl> <nl> + return registryName ; <nl> + } <nl> + <nl> + private static < T extends IForgeRegistryEntry < T > > void loadPersistentDataToStagingRegistry ( boolean injectFrozenData , Map < ResourceLocation , Map < ResourceLocation , Integer [ ] > > remaps , LinkedHashMap < ResourceLocation , Map < ResourceLocation , Integer > > missing , Map . Entry < ResourceLocation , GameDataSnapshot . Entry > snapEntry , Class < T > regType ) <nl> + { <nl> + ResourceLocation registryName = getFixedName ( snapEntry . getKey ( ) ) ; <nl> + <nl> FMLControlledNamespacedRegistry < T > currentRegistry = PersistentRegistry . ACTIVE . getRegistry ( registryName , regType ) ; <nl> if ( currentRegistry = = null ) <nl> { <nl> - FMLLog . severe ( " An unknown persistent registry type \ " % s \ " has been encountered . This Forge instance cannot understand it . " , registryName ) ; <nl> - StartupQuery . abort ( ) ; <nl> - return ; / / fake exit to shut up null analysis <nl> + return ; / / We ' ve already asked the user if they wish to continue . So if the reg isnt found just assume the user knows and accepted it . <nl> } <nl> FMLControlledNamespacedRegistry < T > newRegistry = PersistentRegistry . STAGING . getOrShallowCopyRegistry ( registryName , regType , currentRegistry ) ; <nl> / / Copy the persistent substitution set from the currently active one into the new registry
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index 3e2a5c6 . . d2385f3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 10 , 6 + 10 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> + import com . google . common . base . Joiner ; <nl> import com . google . common . base . Throwables ; <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBiMap ; <nl> @ @ - 463 , 7 + 464 , 11 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> { <nl> getExistingDelegate ( thing ) . setResourceName ( name ) ; <nl> } <nl> - this . dummiedLocations . remove ( name ) ; <nl> + <nl> + if ( this . dummiedLocations . remove ( name ) & & DEBUG ) <nl> + { <nl> + FMLLog . fine ( " Registry Dummy Remove : % s " , name ) ; <nl> + } <nl> <nl> if ( DEBUG ) <nl> { <nl> @ @ - 474 , 6 + 479 , 10 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> <nl> void markDummy ( ResourceLocation rl , Integer id , I thing ) <nl> { <nl> + if ( DEBUG ) <nl> + { <nl> + FMLLog . finer ( " Registry Dummy Add : % s % d - > % s " , rl , id , thing ) ; <nl> + } <nl> this . dummiedLocations . add ( rl ) ; <nl> this . addObjectRaw ( id , rl , thing ) ; <nl> } <nl> @ @ - 705 , 6 + 714 , 10 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> <nl> public void loadDummied ( Set < ResourceLocation > dummied ) <nl> { <nl> + if ( DEBUG & & dummied . size ( ) > 0 ) <nl> + { <nl> + FMLLog . fine ( " Registry Dummy Load : [ % s ] " , Joiner . on ( " , " ) . join ( dummied ) ) ; <nl> + } <nl> this . dummiedLocations . addAll ( dummied ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 3085cc0 . . 8e8c4f7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 174 , 6 + 174 , 10 @ @ public class PersistentRegistryManager <nl> else if ( isLocalWorld ) <nl> { <nl> / / Carry on , we resuscitated the block <nl> + if ( FMLControlledNamespacedRegistry . DEBUG ) <nl> + { <nl> + FMLLog . log ( Level . DEBUG , " Registry : Resuscitating dummy block % s " , dummy ) ; <nl> + } <nl> } <nl> else <nl> { <nl> @ @ - 324 , 10 + 328 , 11 @ @ public class PersistentRegistryManager <nl> newRegistry . loadBlocked ( snapshotEntry . blocked ) ; <nl> missing . put ( registryName , Maps . < ResourceLocation , Integer > newLinkedHashMap ( ) ) ; <nl> remaps . put ( registryName , Maps . < ResourceLocation , Integer [ ] > newHashMap ( ) ) ; <nl> + / / Load current dummies BEFORE the snapshot is loaded so that add ( ) will remove from the list . <nl> + / / Potentially causes issues from cpw ' s previous comment . Must keep eye on . <nl> + newRegistry . loadDummied ( snapshotEntry . dummied ) ; <nl> newRegistry . loadIds ( snapshotEntry . ids , missing . get ( registryName ) , remaps . get ( registryName ) , currentRegistry , registryName ) ; <nl> newRegistry . loadSubstitutions ( substitutions ) ; <nl> - / / Load current dummies AFTER the snapshot is loaded <nl> - newRegistry . loadDummied ( snapshotEntry . dummied ) ; <nl> } <nl> <nl> public static boolean isFrozen ( FMLControlledNamespacedRegistry < ? > registry )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 0001b42 . . c943fc7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 168 , 6 + 168 , 32 @ @ public class PersistentRegistryManager 
 forAllRegistries ( PersistentRegistry . ACTIVE , DumpRegistryFunction . OPERATION ) ; 
 forAllRegistries ( PersistentRegistry . ACTIVE , ResetDelegatesFunction . OPERATION ) ; 
 
 + List < ResourceLocation > missingRegs = Lists . newArrayList ( ) ; 
 + for ( ResourceLocation name : snapshot . entries . keySet ( ) ) 
 + { 
 + name = getFixedName ( name ) ; 
 + if ( PersistentRegistry . ACTIVE . getRegistry ( name , null ) = = null ) 
 + { 
 + missingRegs . add ( name ) ; 
 + } 
 + } 
 + 
 + if ( missingRegs . size ( ) > 0 ) 
 + { 
 + String text = " Forge Mod Loader detected missing / unknown registrie ( s ) . \ n \ n " + 
 + " There are " + missingRegs . size ( ) + " missing registries in this save . \ n " + 
 + " If you continue the missing registries will get removed . \ n " + 
 + " This may cause issues , it is advised that you create a world backup before continuing . \ n \ n " + 
 + " Missing Registries : \ n " ; 
 + 
 + for ( ResourceLocation s : missingRegs ) 
 + text + = s . toString ( ) + " \ n " ; 
 + 
 + boolean confirmed = StartupQuery . confirm ( text ) ; 
 + if ( ! confirmed ) 
 + StartupQuery . abort ( ) ; 
 + } 
 + 
 / / Load the snapshot into the " STAGING " registry 
 for ( Map . Entry < ResourceLocation , GameDataSnapshot . Entry > snapshotEntry : snapshot . entries . entrySet ( ) ) 
 { 
 @ @ - 316 , 21 + 342 , 25 @ @ public class PersistentRegistryManager 
 newRegistry . loadIds ( frozenRegistry . getEntriesNotIn ( newRegistry ) , Maps . < ResourceLocation , Integer > newLinkedHashMap ( ) , remaps . get ( registryName ) , frozenRegistry , registryName ) ; 
 } 
 
 - private static < T extends IForgeRegistryEntry < T > > void loadPersistentDataToStagingRegistry ( boolean injectFrozenData , Map < ResourceLocation , Map < ResourceLocation , Integer [ ] > > remaps , LinkedHashMap < ResourceLocation , Map < ResourceLocation , Integer > > missing , Map . Entry < ResourceLocation , GameDataSnapshot . Entry > snapEntry , Class < T > regType ) 
 + / / TODO : Remove when we don ' t care about loading 1 . 7 . 10 ( ? ) worlds ? 
 + private static ResourceLocation getFixedName ( ResourceLocation registryName ) 
 { 
 - ResourceLocation registryName = snapEntry . getKey ( ) ; 
 - 
 / / Translate old names 
 if ( " fml : blocks " . equals ( registryName . toString ( ) ) ) registryName = PersistentRegistryManager . BLOCKS ; 
 else if ( " fml : items " . equals ( registryName . toString ( ) ) ) registryName = PersistentRegistryManager . ITEMS ; 
 else if ( " fmlgr : villagerprofessions " . equals ( registryName . toString ( ) ) ) registryName = VillagerRegistry . PROFESSIONS ; 
 
 + return registryName ; 
 + } 
 + 
 + private static < T extends IForgeRegistryEntry < T > > void loadPersistentDataToStagingRegistry ( boolean injectFrozenData , Map < ResourceLocation , Map < ResourceLocation , Integer [ ] > > remaps , LinkedHashMap < ResourceLocation , Map < ResourceLocation , Integer > > missing , Map . Entry < ResourceLocation , GameDataSnapshot . Entry > snapEntry , Class < T > regType ) 
 + { 
 + ResourceLocation registryName = getFixedName ( snapEntry . getKey ( ) ) ; 
 + 
 FMLControlledNamespacedRegistry < T > currentRegistry = PersistentRegistry . ACTIVE . getRegistry ( registryName , regType ) ; 
 if ( currentRegistry = = null ) 
 { 
 - FMLLog . severe ( " An unknown persistent registry type \ " % s \ " has been encountered . This Forge instance cannot understand it . " , registryName ) ; 
 - StartupQuery . abort ( ) ; 
 - return ; / / fake exit to shut up null analysis 
 + return ; / / We ' ve already asked the user if they wish to continue . So if the reg isnt found just assume the user knows and accepted it . 
 } 
 FMLControlledNamespacedRegistry < T > newRegistry = PersistentRegistry . STAGING . getOrShallowCopyRegistry ( registryName , regType , currentRegistry ) ; 
 / / Copy the persistent substitution set from the currently active one into the new registry

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index 3e2a5c6 . . d2385f3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 10 , 6 + 10 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 
 + import com . google . common . base . Joiner ; 
 import com . google . common . base . Throwables ; 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBiMap ; 
 @ @ - 463 , 7 + 464 , 11 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 { 
 getExistingDelegate ( thing ) . setResourceName ( name ) ; 
 } 
 - this . dummiedLocations . remove ( name ) ; 
 + 
 + if ( this . dummiedLocations . remove ( name ) & & DEBUG ) 
 + { 
 + FMLLog . fine ( " Registry Dummy Remove : % s " , name ) ; 
 + } 
 
 if ( DEBUG ) 
 { 
 @ @ - 474 , 6 + 479 , 10 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 
 void markDummy ( ResourceLocation rl , Integer id , I thing ) 
 { 
 + if ( DEBUG ) 
 + { 
 + FMLLog . finer ( " Registry Dummy Add : % s % d - > % s " , rl , id , thing ) ; 
 + } 
 this . dummiedLocations . add ( rl ) ; 
 this . addObjectRaw ( id , rl , thing ) ; 
 } 
 @ @ - 705 , 6 + 714 , 10 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 
 public void loadDummied ( Set < ResourceLocation > dummied ) 
 { 
 + if ( DEBUG & & dummied . size ( ) > 0 ) 
 + { 
 + FMLLog . fine ( " Registry Dummy Load : [ % s ] " , Joiner . on ( " , " ) . join ( dummied ) ) ; 
 + } 
 this . dummiedLocations . addAll ( dummied ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 3085cc0 . . 8e8c4f7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 174 , 6 + 174 , 10 @ @ public class PersistentRegistryManager 
 else if ( isLocalWorld ) 
 { 
 / / Carry on , we resuscitated the block 
 + if ( FMLControlledNamespacedRegistry . DEBUG ) 
 + { 
 + FMLLog . log ( Level . DEBUG , " Registry : Resuscitating dummy block % s " , dummy ) ; 
 + } 
 } 
 else 
 { 
 @ @ - 324 , 10 + 328 , 11 @ @ public class PersistentRegistryManager 
 newRegistry . loadBlocked ( snapshotEntry . blocked ) ; 
 missing . put ( registryName , Maps . < ResourceLocation , Integer > newLinkedHashMap ( ) ) ; 
 remaps . put ( registryName , Maps . < ResourceLocation , Integer [ ] > newHashMap ( ) ) ; 
 + / / Load current dummies BEFORE the snapshot is loaded so that add ( ) will remove from the list . 
 + / / Potentially causes issues from cpw ' s previous comment . Must keep eye on . 
 + newRegistry . loadDummied ( snapshotEntry . dummied ) ; 
 newRegistry . loadIds ( snapshotEntry . ids , missing . get ( registryName ) , remaps . get ( registryName ) , currentRegistry , registryName ) ; 
 newRegistry . loadSubstitutions ( substitutions ) ; 
 - / / Load current dummies AFTER the snapshot is loaded 
 - newRegistry . loadDummied ( snapshotEntry . dummied ) ; 
 } 
 
 public static boolean isFrozen ( FMLControlledNamespacedRegistry < ? > registry )
