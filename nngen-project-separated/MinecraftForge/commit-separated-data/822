BLEU SCORE: 0.0017309476095850546

TEST MSG: Updated raw types in ExtendedBlockState , fixed some ATs , updated some things that needed updating in model classes .
GENERATED MSG: ModelBakeEvent now has ModelLoader as an argument instead of ModelBakery ; Added various static hooks to ModelLoader to allow registering model - related information before it ' s needed ( prevents file - not - found errors on first baking pass ) ; ModelLoader waits until ModelBakeEvent is done before showing any missing model exceptions ; It ' s now possible to define models completely in - code ( as illustrated by ModelBakeEventDebug ) .

TEST DIFF (one line): diff - - git a / patches . mcp / minecraft / net / minecraft / block / state / BlockStateContainer . java . patch b / patches . mcp / minecraft / net / minecraft / block / state / BlockStateContainer . java . patch <nl> index 0bb60ec . . 3342a4b 100644 <nl> - - - a / patches . mcp / minecraft / net / minecraft / block / state / BlockStateContainer . java . patch <nl> + + + b / patches . mcp / minecraft / net / minecraft / block / state / BlockStateContainer . java . patch <nl> @ @ - 12 , 7 + 12 , 7 @ @ <nl> + return new StateImplementation ( block , properties ) ; <nl> + } <nl> + <nl> - + protected BlockStateContainer ( Block blockIn , IProperty [ ] properties , ImmutableMap < net . minecraftforge . common . property . IUnlistedProperty < ? > , com . google . common . base . Optional < ? > > unlistedProperties ) <nl> + + protected BlockStateContainer ( Block blockIn , IProperty < ? > [ ] properties , ImmutableMap < net . minecraftforge . common . property . IUnlistedProperty < ? > , com . google . common . base . Optional < ? > > unlistedProperties ) <nl> + { <nl> this . block = blockIn ; <nl> Map < String , IProperty < ? > > map = Maps . < String , IProperty < ? > > newHashMap ( ) ; <nl> diff - - git a / patches . mcp / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch b / patches . mcp / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch <nl> index fe0de35 . . ebdfd26 100644 <nl> - - - a / patches . mcp / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch <nl> + + + b / patches . mcp / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch <nl> @ @ - 11 , 7 + 11 , 7 @ @ <nl> } <nl> @ @ - 370 , 6 + 370 , 7 @ @ <nl> <nl> - private void registerVariantNames ( ) <nl> + protected void registerVariantNames ( ) <nl> { <nl> + this . variantNames . clear ( ) ; / / FML clear this to prevent double ups . <nl> this . variantNames . put ( Item . getItemFromBlock ( Blocks . stone ) , Lists . newArrayList ( new String [ ] { " stone " , " granite " , " granite _ smooth " , " diorite " , " diorite _ smooth " , " andesite " , " andesite _ smooth " } ) ) ; <nl> @ @ - 27 , 10 + 27 , 10 @ @ <nl> + } <nl> } <nl> <nl> - private List < String > getVariantNames ( Item p _ 177596 _ 1 _ ) <nl> + protected List < String > getVariantNames ( Item p _ 177596 _ 1 _ ) <nl> @ @ - 429 , 7 + 434 , 7 @ @ <nl> <nl> - private ResourceLocation getItemLocation ( String p _ 177583 _ 1 _ ) <nl> + protected ResourceLocation getItemLocation ( String p _ 177583 _ 1 _ ) <nl> { <nl> - ResourceLocation resourcelocation = new ResourceLocation ( p _ 177583 _ 1 _ ) ; <nl> + ResourceLocation resourcelocation = new ResourceLocation ( p _ 177583 _ 1 _ . replaceAll ( " # . * " , " " ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> index dc17789 . . 8a0081f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> @ @ - 108 , 12 + 108 , 6 @ @ public class BlockStateLoader <nl> private final ResourceLocation model ; <nl> private final ImmutableMap < String , String > customData ; <nl> <nl> - @ Deprecated / / remove in 1 . 9 <nl> - public SubModel ( IModelState state , boolean uvLock , ImmutableMap < String , String > textures , ResourceLocation model , ImmutableMap < String , String > customData ) <nl> - { <nl> - this ( state , uvLock , true , true , textures , model , customData ) ; <nl> - } <nl> - <nl> public SubModel ( IModelState state , boolean uvLock , boolean smooth , boolean gui3d , ImmutableMap < String , String > textures , ResourceLocation model , ImmutableMap < String , String > customData ) <nl> { <nl> this . state = state ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> index 39fa4c2 . . 95d871d 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import com . google . gson . JsonElement ; <nl> import com . google . gson . JsonObject ; <nl> import com . google . gson . JsonParseException ; <nl> <nl> - @ SuppressWarnings ( " deprecation " ) <nl> public class ForgeBlockStateV1 extends Marker <nl> { <nl> ForgeBlockStateV1 . Variant defaults ; <nl> @ @ - 372 , 7 + 371 , 7 @ @ public class ForgeBlockStateV1 extends Marker <nl> <nl> protected SubModel asGenericSubModel ( ) <nl> { <nl> - return new SubModel ( state . or ( TRSRTransformation . identity ( ) ) , uvLock . or ( false ) , getTextures ( ) , model , getCustomData ( ) ) ; <nl> + return new SubModel ( state . or ( TRSRTransformation . identity ( ) ) , smooth . or ( true ) , gui3d . or ( true ) , uvLock . or ( false ) , getTextures ( ) , model , getCustomData ( ) ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / IModelCustomData . java b / src / main / java / net / minecraftforge / client / model / IModelCustomData . java <nl> index 810e768 . . ec54716 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IModelCustomData . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IModelCustomData . java <nl> @ @ - 9 , 6 + 9 , 5 @ @ public interface IModelCustomData < M extends IModelCustomData < M > > extends IModel <nl> * If unknown data is encountered it should be skipped . <nl> * @ return a new model , with data applied . <nl> * / <nl> - / / 1 . 9 : change IModel to M <nl> - IModel process ( ImmutableMap < String , String > customData ) ; <nl> + M process ( ImmutableMap < String , String > customData ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java b / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java <nl> index b6b14cc . . 98016dc 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java <nl> @ @ - 21 , 6 + 21 , 5 @ @ public interface IRetexturableModel < M extends IRetexturableModel < M > > extends IMo <nl> * @ param textures New <nl> * @ return Model with textures applied . <nl> * / <nl> - / / 1 . 9 : change IModel to M <nl> - IModel retexture ( ImmutableMap < String , String > textures ) ; <nl> + M retexture ( ImmutableMap < String , String > textures ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> index 208522a . . f129e83 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> @ @ - 31 , 7 + 31 , 6 @ @ import com . google . common . collect . ImmutableMap ; <nl> <nl> public class ItemLayerModel implements IRetexturableModel < ItemLayerModel > <nl> { <nl> - <nl> public static final ItemLayerModel instance = new ItemLayerModel ( ImmutableList . < ResourceLocation > of ( ) ) ; <nl> <nl> private final ImmutableList < ResourceLocation > textures ; <nl> @ @ - 71 , 7 + 70 , 7 @ @ public class ItemLayerModel implements IRetexturableModel < ItemLayerModel > <nl> return TRSRTransformation . identity ( ) ; <nl> } <nl> <nl> - public IModel retexture ( ImmutableMap < String , String > textures ) <nl> + public ItemLayerModel retexture ( ImmutableMap < String , String > textures ) <nl> { <nl> ImmutableList . Builder < ResourceLocation > builder = ImmutableList . builder ( ) ; <nl> for ( int i = 0 ; i < textures . size ( ) + this . textures . size ( ) ; i + + ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> index 8b36e5e . . 932ebfc 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> @ @ - 152 , 7 + 152 , 7 @ @ public class ModelDynBucket implements IModel , IModelCustomData < ModelDynBucket > , <nl> * If the fluid can ' t be found , water is used <nl> * / <nl> @ Override <nl> - public IModel process ( ImmutableMap < String , String > customData ) <nl> + public ModelDynBucket process ( ImmutableMap < String , String > customData ) <nl> { <nl> String fluidName = customData . get ( " fluid " ) ; <nl> Fluid fluid = FluidRegistry . getFluid ( fluidName ) ; <nl> @ @ - 183 , 7 + 183 , 7 @ @ public class ModelDynBucket implements IModel , IModelCustomData < ModelDynBucket > , <nl> * If no liquid is given a hardcoded variant for the bucket is used . <nl> * / <nl> @ Override <nl> - public IModel retexture ( ImmutableMap < String , String > textures ) <nl> + public ModelDynBucket retexture ( ImmutableMap < String , String > textures ) <nl> { <nl> <nl> ResourceLocation base = baseLocation ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelFluid . java b / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> index 2bb2194 . . d08f4af 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> @ @ - 391 , 7 + 391 , 7 @ @ public class ModelFluid implements IModelCustomData < ModelFluid > <nl> } <nl> <nl> @ Override <nl> - public IModel process ( ImmutableMap < String , String > customData ) <nl> + public ModelFluid process ( ImmutableMap < String , String > customData ) <nl> { <nl> if ( ! customData . containsKey ( " fluid " ) ) return this ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> index ea725a3 . . 27423c7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java <nl> @ @ - 93 , 7 + 93 , 7 @ @ public class MultiLayerModel implements IModelCustomData < MultiLayerModel > <nl> } <nl> <nl> @ Override <nl> - public IModel process ( ImmutableMap < String , String > customData ) <nl> + public MultiLayerModel process ( ImmutableMap < String , String > customData ) <nl> { <nl> ImmutableMap . Builder < Optional < BlockRenderLayer > , ModelResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> for ( String key : customData . keySet ( ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> index 5a59784 . . a18af6c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> @ @ - 22 , 7 + 22 , 7 @ @ public class ExtendedBlockState extends BlockStateContainer <nl> { <nl> private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; <nl> <nl> - public ExtendedBlockState ( Block blockIn , @ SuppressWarnings ( " rawtypes " ) IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> + public ExtendedBlockState ( Block blockIn , IProperty < ? > [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> { <nl> super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; <nl> ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; <nl> @ @ - 49 , 7 + 49 , 7 @ @ public class ExtendedBlockState extends BlockStateContainer <nl> } <nl> <nl> @ Override <nl> - protected StateImplementation createState ( Block block , @ SuppressWarnings ( " rawtypes " ) ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ) <nl> + protected StateImplementation createState ( Block block , ImmutableMap < IProperty < ? > , Comparable < ? > > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ) <nl> { <nl> if ( unlistedProperties = = null | | unlistedProperties . isEmpty ( ) ) return super . createState ( block , properties , unlistedProperties ) ; <nl> return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; <nl> @ @ - 58 , 10 + 58 , 9 @ @ public class ExtendedBlockState extends BlockStateContainer <nl> protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState <nl> { <nl> private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; <nl> - @ SuppressWarnings ( " rawtypes " ) <nl> - private Map < Map < IProperty , Comparable > , BlockState . StateImplementation > normalMap ; <nl> + private Map < Map < IProperty < ? > , Comparable < ? > > , BlockStateContainer . StateImplementation > normalMap ; <nl> <nl> - protected ExtendedStateImplementation ( Block block , @ SuppressWarnings ( " rawtypes " ) ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , @ SuppressWarnings ( " rawtypes " ) ImmutableTable < IProperty , Comparable , IBlockState > table ) <nl> + protected ExtendedStateImplementation ( Block block , ImmutableMap < IProperty < ? > , Comparable < ? > > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty < ? > , Comparable < ? > , IBlockState > table ) <nl> { <nl> super ( block , properties ) ; <nl> this . unlistedProperties = unlistedProperties ; <nl> @ @ - 85 , 15 + 84 , 13 @ @ public class ExtendedBlockState extends BlockStateContainer <nl> { <nl> return this ; <nl> } <nl> - @ SuppressWarnings ( " rawtypes " ) <nl> - Map < IProperty , Comparable > map = Maps . newHashMap ( getProperties ( ) ) ; <nl> + Map < IProperty < ? > , Comparable < ? > > map = Maps . newHashMap ( getProperties ( ) ) ; <nl> map . put ( property , value ) ; <nl> if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) <nl> { / / no dynamic properties present , looking up in the normal table <nl> return ( IExtendedBlockState ) normalMap . get ( map ) ; <nl> } <nl> - @ SuppressWarnings ( " rawtypes " ) <nl> - ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; <nl> + ImmutableTable < IProperty < ? > , Comparable < ? > , IBlockState > table = propertyValueTable ; <nl> table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; <nl> return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) . setMap ( this . normalMap ) ; <nl> } <nl> @ @ - 138 , 13 + 135 , 13 @ @ public class ExtendedBlockState extends BlockStateContainer <nl> } <nl> <nl> @ Override <nl> - public void buildPropertyValueTable ( @ SuppressWarnings ( " rawtypes " ) Map < Map < IProperty , Comparable > , BlockState . StateImplementation > map ) <nl> + public void buildPropertyValueTable ( Map < Map < IProperty < ? > , Comparable < ? > > , BlockStateContainer . StateImplementation > map ) <nl> { <nl> this . normalMap = map ; <nl> super . buildPropertyValueTable ( map ) ; <nl> } <nl> <nl> - private ExtendedStateImplementation setMap ( @ SuppressWarnings ( " rawtypes " ) Map < Map < IProperty , Comparable > , BlockState . StateImplementation > map ) <nl> + private ExtendedStateImplementation setMap ( Map < Map < IProperty < ? > , Comparable < ? > > , BlockStateContainer . StateImplementation > map ) <nl> { <nl> this . normalMap = map ; <nl> return this ; <nl> diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg <nl> index 229cde6 . . 5737f44 100644 <nl> - - - a / src / main / resources / forge _ at . cfg <nl> + + + b / src / main / resources / forge _ at . cfg <nl> @ @ - 109 , 35 + 109 , 35 @ @ public net . minecraft . world . gen . ChunkProviderServer field _ 73251 _ h # worldObj <nl> protected net . minecraft . client . renderer . entity . RenderEntityItem func _ 177078 _ a ( Lnet / minecraft / item / ItemStack ; ) I # getMiniItemCount <nl> public net . minecraft . item . crafting . RecipesBanners $ RecipeAddPattern <nl> public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern <nl> - # public net . minecraft . block . state . BlockState $ StateImplementation <nl> - # protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V <nl> - # protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable <nl> + public net . minecraft . block . state . BlockStateContainer $ StateImplementation <nl> + protected net . minecraft . block . state . BlockStateContainer $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V <nl> + protected net . minecraft . block . state . BlockStateContainer $ StateImplementation field _ 177238 _ c # propertyValueTable <nl> public net . minecraft . client . renderer . block . model . ModelBlock field _ 178318 _ c # textures <nl> public net . minecraft . client . renderer . block . model . ModelBlock field _ 178315 _ d # parent <nl> public net . minecraft . client . renderer . block . model . ModelBlock field _ 178322 _ i # ambientOcclusion <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177602 _ b # LOCATIONS _ BUILTIN _ TEXTURES <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177598 _ f # resourceManager <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177599 _ g # sprites <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177609 _ j # textureMap <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177610 _ k # blockModelShapes <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177605 _ n # bakedRegistry <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177606 _ o # MODEL _ GENERATED <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177618 _ p # MODEL _ COMPASS <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177617 _ q # MODEL _ CLOCK <nl> - # protected net . minecraft . client . resources . model . ModelBakery field _ 177616 _ r # MODEL _ ENTITY <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177591 _ a ( Ljava / util / Collection ; ) V # loadVariants <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177569 _ a ( Lnet / minecraft / client / renderer / block / model / ModelBlockDefinition ; Lnet / minecraft / client / resources / model / ModelResourceLocation ; ) V # registerVariant <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177586 _ a ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / client / renderer / block / model / ModelBlockDefinition ; # getModelBlockDefinition <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177594 _ c ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / client / renderer / block / model / ModelBlock ; # loadModel <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177592 _ e ( ) V # registerVariantNames <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177596 _ a ( Lnet / minecraft / item / Item ; ) Ljava / util / List ; # getVariantNames <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177583 _ a ( Ljava / lang / String ; ) Lnet / minecraft / util / ResourceLocation ; # getItemLocation <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177585 _ a ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Ljava / util / Set ; # getTextureLocations <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177581 _ b ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Z # hasItemModel <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177587 _ c ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Z # isCustomRenderer <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177582 _ d ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Lnet / minecraft / client / renderer / block / model / ModelBlock ; # makeItemModel <nl> - # protected net . minecraft . client . resources . model . ModelBakery func _ 177580 _ d ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / util / ResourceLocation ; # getModelLocation <nl> - # public net . minecraft . client . resources . model . WeightedBakedModel field _ 177565 _ b # models <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177602 _ b # LOCATIONS _ BUILTIN _ TEXTURES <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177598 _ f # resourceManager <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177599 _ g # sprites <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177609 _ j # textureMap <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177610 _ k # blockModelShapes <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177605 _ n # bakedRegistry <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177606 _ o # MODEL _ GENERATED <nl> + # protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177618 _ p # MODEL _ COMPASS <nl> + # protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177617 _ q # MODEL _ CLOCK <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177616 _ r # MODEL _ ENTITY <nl> + # protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177591 _ a ( Ljava / util / Collection ; ) V # loadVariants <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177569 _ a ( Lnet / minecraft / client / renderer / block / model / ModelBlockDefinition ; Lnet / minecraft / client / renderer / block / model / ModelResourceLocation ; ) V # registerVariant <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177586 _ a ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / client / renderer / block / model / ModelBlockDefinition ; # getModelBlockDefinition <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177594 _ c ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / client / renderer / block / model / ModelBlock ; # loadModel <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177592 _ e ( ) V # registerVariantNames <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177596 _ a ( Lnet / minecraft / item / Item ; ) Ljava / util / List ; # getVariantNames <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177583 _ a ( Ljava / lang / String ; ) Lnet / minecraft / util / ResourceLocation ; # getItemLocation <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177585 _ a ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Ljava / util / Set ; # getTextureLocations <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177581 _ b ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Z # hasItemModel <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177587 _ c ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Z # isCustomRenderer <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177582 _ d ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Lnet / minecraft / client / renderer / block / model / ModelBlock ; # makeItemModel <nl> + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177580 _ d ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / util / ResourceLocation ; # getModelLocation <nl> + # public net . minecraft . client . renderer . block . model . WeightedBakedModel field _ 177565 _ b # models <nl> # EnumFacing <nl> public net . minecraft . util . EnumFacing field _ 82609 _ l # VALUES <nl> public net . minecraft . util . EnumFacing field _ 176754 _ o # HORIZONTALS
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch <nl> new file mode 100644 <nl> index 0000000 . . ae731a3 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockModelShapes . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockModelShapes . java <nl> + @ @ - 321 , 6 + 321 , 7 @ @ <nl> + return new ModelResourceLocation ( s + " _ double _ slab " , s1 ) ; <nl> + } <nl> + } ) ; <nl> + + net . minecraftforge . client . model . ModelLoader . onRegisterAllBlocks ( this ) ; <nl> + } <nl> + <nl> + @ SideOnly ( Side . CLIENT ) <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch <nl> index 48162e1 . . 498fc5d 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch <nl> @ @ - 81 , 7 + 81 , 14 @ @ <nl> GlStateManager . func _ 179141 _ d ( ) ; <nl> GlStateManager . func _ 179098 _ w ( ) ; <nl> GlStateManager . func _ 179145 _ e ( ) ; <nl> - @ @ - 1078 , 6 + 1072 , 19 @ @ <nl> + @ @ - 1072 , 12 + 1066 , 26 @ @ <nl> + this . func _ 175029 _ a ( Blocks . field _ 150420 _ aW , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " brown _ mushroom _ block " ) ; <nl> + this . func _ 175029 _ a ( Blocks . field _ 150419 _ aX , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " red _ mushroom _ block " ) ; <nl> + this . func _ 175031 _ a ( Blocks . field _ 150380 _ bt , " dragon _ egg " ) ; <nl> + + net . minecraftforge . client . model . ModelLoader . onRegisterItems ( this . field _ 175059 _ m ) ; <nl> + } <nl> + <nl> + public void func _ 110549 _ a ( IResourceManager p _ 110549 _ 1 _ ) <nl> { <nl> this . field _ 175059 _ m . func _ 178085 _ b ( ) ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> index 0c6385f . . 8364265 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> @ @ - 9 , 7 + 9 , 15 @ @ <nl> } <nl> } <nl> catch ( Exception exception1 ) <nl> - @ @ - 499 , 6 + 499 , 11 @ @ <nl> + @ @ - 172 , 6 + 172 , 7 @ @ <nl> + } <nl> + } <nl> + } <nl> + + catch ( FileNotFoundException e ) { } <nl> + catch ( IOException ioexception ) <nl> + { <nl> + throw new RuntimeException ( " Encountered an exception when loading model definition of model " + resourcelocation1 . toString ( ) , ioexception ) ; <nl> + @ @ - 499 , 6 + 500 , 11 @ @ <nl> <nl> private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) <nl> { <nl> @ @ - 21 , 7 + 29 , 7 @ @ <nl> TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; <nl> SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ ) ) . func _ 177646 _ a ( textureatlassprite ) ; <nl> Iterator iterator = p _ 177578 _ 1 _ . func _ 178298 _ a ( ) . iterator ( ) ; <nl> - @ @ - 516 , 11 + 521 , 11 @ @ <nl> + @ @ - 516 , 11 + 522 , 11 @ @ <nl> <nl> if ( blockpartface . field _ 178244 _ b = = null ) <nl> { <nl> @ @ - 35 , 7 + 43 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 530 , 9 + 535 , 14 @ @ <nl> + @ @ - 530 , 9 + 536 , 14 @ @ <nl> <nl> private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index f93959c . . 2407f52 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . client . event . sound . PlaySoundEvent ; <nl> import net . minecraftforge . client . model . IPerspectiveAwareModel ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . ForgeVersion . Status ; <nl> @ @ - 487 , 7 + 488 , 9 @ @ public class ForgeHooksClient <nl> <nl> public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> { <nl> - MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; <nl> + ModelLoader loader = ( ModelLoader ) modelBakery ; <nl> + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , loader ) ) ; <nl> + loader . onPostBakeEvent ( modelRegistry ) ; <nl> } <nl> <nl> public static Matrix4f getMatrix ( ItemTransformVec3f transform ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> index 502454f . . 3c124d8 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> @ @ - 1 , 9 + 1 , 9 @ @ <nl> package net . minecraftforge . client . event ; <nl> <nl> - import net . minecraftforge . fml . common . eventhandler . Event ; <nl> - import net . minecraft . client . resources . model . ModelBakery ; <nl> import net . minecraft . client . resources . model . ModelManager ; <nl> import net . minecraft . util . IRegistry ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> <nl> / * * <nl> * Fired when the ModelManager is notified of the resource manager reloading . <nl> @ @ - 13 , 12 + 13 , 12 @ @ public class ModelBakeEvent extends Event <nl> { <nl> public final ModelManager modelManager ; <nl> public final IRegistry modelRegistry ; <nl> - public final ModelBakery modelBakery ; <nl> + public final ModelLoader modelLoader ; <nl> <nl> - public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelLoader modelLoader ) <nl> { <nl> this . modelManager = modelManager ; <nl> this . modelRegistry = modelRegistry ; <nl> - this . modelBakery = modelBakery ; <nl> + this . modelLoader = modelLoader ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 8942995 . . 91ea08d 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 11 , 8 + 11 , 11 @ @ import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> <nl> + import net . minecraft . block . Block ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . renderer . BlockModelShapes ; <nl> + import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> + import net . minecraft . client . renderer . ItemModelMesher ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> import net . minecraft . client . renderer . block . model . ItemModelGenerator ; <nl> import net . minecraft . client . renderer . block . model . ModelBlock ; <nl> @ @ - 20 , 6 + 23 , 7 @ @ import net . minecraft . client . renderer . block . model . ModelBlockDefinition ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition . MissingVariantException ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variant ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variants ; <nl> + import net . minecraft . client . renderer . block . statemap . IStateMapper ; <nl> import net . minecraft . client . renderer . texture . IIconCreator ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> @ @ - 35 , 7 + 39 , 9 @ @ import net . minecraft . util . IRegistry ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . registry . GameData ; <nl> + import net . minecraftforge . fml . common . registry . RegistryDelegate ; <nl> <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Function ; <nl> @ @ - 44 , 6 + 50 , 8 @ @ import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Maps ; <nl> + import com . google . common . collect . Sets ; <nl> <nl> public class ModelLoader extends ModelBakery <nl> { <nl> @ @ - 51 , 6 + 59 , 13 @ @ public class ModelLoader extends ModelBakery <nl> private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; <nl> + private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; <nl> + <nl> + private boolean isLoading = false ; <nl> + public boolean isLoading ( ) <nl> + { <nl> + return isLoading ; <nl> + } <nl> <nl> public ModelLoader ( IResourceManager manager , TextureMap map , BlockModelShapes shapes ) <nl> { <nl> @ @ - 62 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery <nl> @ Override <nl> public IRegistry setupModelRegistry ( ) <nl> { <nl> + isLoading = true ; <nl> loadBlocks ( ) ; <nl> loadItems ( ) ; <nl> stateModels . put ( MODEL _ MISSING , getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ) ; <nl> @ @ - 103 , 19 + 119 , 15 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> variants = definition . getVariants ( location . getVariant ( ) ) ; <nl> } <nl> - catch ( MissingVariantException e ) { } <nl> - if ( variants = = null ) <nl> + catch ( MissingVariantException e ) <nl> { <nl> - / / adding default variant for simple blocks <nl> - ResourceLocation loc = new ResourceLocation ( location . getResourceDomain ( ) , " block / " + location . getResourcePath ( ) ) ; <nl> - variants = new Variants ( " normal " , Lists . newArrayList ( new Variant ( loc , ModelRotation . X0 _ Y0 , false , 1 ) ) ) ; <nl> + missingVariants . add ( location ) ; <nl> } <nl> - if ( ! variants . getVariants ( ) . isEmpty ( ) ) <nl> + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) <nl> { <nl> try <nl> { <nl> stateModels . put ( location , new WeightedRandomModel ( variants ) ) ; <nl> - <nl> } <nl> catch ( Throwable e ) <nl> { <nl> @ @ - 135 , 7 + 147 , 11 @ @ public class ModelLoader extends ModelBakery <nl> ModelResourceLocation memory = new ModelResourceLocation ( s , " inventory " ) ; <nl> resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( file ) ) ; <nl> IModel model = getModel ( file ) ; <nl> - if ( model ! = null ) stateModels . put ( memory , model ) ; <nl> + if ( model = = null | | model = = getMissingModel ( ) ) <nl> + { <nl> + missingVariants . add ( memory ) ; <nl> + } <nl> + else stateModels . put ( memory , model ) ; <nl> } <nl> } <nl> } <nl> @ @ - 415 , 9 + 431 , 65 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> catch ( IOException e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; <nl> + if ( loader . isLoading ) <nl> + { <nl> + / / holding error until onPostBakeEvent <nl> + } <nl> + else FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; <nl> return loader . getMissingModel ( ) ; <nl> } <nl> } <nl> } <nl> + <nl> + public void onPostBakeEvent ( IRegistry modelRegistry ) <nl> + { <nl> + for ( ModelResourceLocation missing : missingVariants ) <nl> + { <nl> + if ( modelRegistry . getObject ( missing ) = = null ) <nl> + { <nl> + FMLLog . severe ( " Model definition for location % s not found " , missing ) ; <nl> + } <nl> + } <nl> + isLoading = false ; <nl> + } <nl> + <nl> + private static final Map < RegistryDelegate < Block > , IStateMapper > customStateMappers = Maps . newHashMap ( ) ; <nl> + <nl> + public static void setCustomStateMapper ( Block block , IStateMapper mapper ) <nl> + { <nl> + customStateMappers . put ( block . delegate , mapper ) ; <nl> + } <nl> + <nl> + public static void onRegisterAllBlocks ( BlockModelShapes shapes ) <nl> + { <nl> + for ( Entry < RegistryDelegate < Block > , IStateMapper > e : customStateMappers . entrySet ( ) ) <nl> + { <nl> + shapes . registerBlockWithStateMapper ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + private static final Map < RegistryDelegate < Item > , ItemMeshDefinition > customMeshDefinitions = com . google . common . collect . Maps . newHashMap ( ) ; <nl> + private static final Map < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > customModels = com . google . common . collect . Maps . newHashMap ( ) ; <nl> + <nl> + public static void setCustomModelResourceLocation ( Item item , int metadata , ModelResourceLocation model ) <nl> + { <nl> + customModels . put ( item . delegate , Pair . of ( metadata , model ) ) ; <nl> + } <nl> + <nl> + public static void setCustomMeshDefinition ( Item item , ItemMeshDefinition meshDefinition ) <nl> + { <nl> + customMeshDefinitions . put ( item . delegate , meshDefinition ) ; <nl> + } <nl> + <nl> + public static void onRegisterItems ( ItemModelMesher mesher ) <nl> + { <nl> + for ( Map . Entry < RegistryDelegate < Item > , ItemMeshDefinition > e : customMeshDefinitions . entrySet ( ) ) <nl> + { <nl> + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; <nl> + } <nl> + for ( Entry < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > e : customModels . entrySet ( ) ) <nl> + { <nl> + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) . getLeft ( ) , e . getValue ( ) . getRight ( ) ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> index c8de9a4 . . 96f9aa5 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> @ @ - 11 , 10 + 11 , 9 @ @ import net . minecraft . block . properties . PropertyInteger ; <nl> import net . minecraft . block . state . BlockState ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . Minecraft ; <nl> - import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> - import net . minecraft . client . renderer . entity . RenderItem ; <nl> + import net . minecraft . client . renderer . block . statemap . StateMapperBase ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . resources . model . IBakedModel ; <nl> import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> @ @ - 31 , 6 + 30 , 7 @ @ import net . minecraft . world . World ; <nl> import net . minecraftforge . client . event . ModelBakeEvent ; <nl> import net . minecraftforge . client . model . ISmartBlockModel ; <nl> import net . minecraftforge . client . model . ISmartItemModel ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . common . property . ExtendedBlockState ; <nl> import net . minecraftforge . common . property . IExtendedBlockState ; <nl> @ @ - 39 , 8 + 39 , 7 @ @ import net . minecraftforge . common . property . Properties ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> import net . minecraftforge . fml . common . SidedProxy ; <nl> - import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> - import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> <nl> @ @ - 69 , 47 + 68 , 35 @ @ public class ModelBakeEventDebug <nl> public static CommonProxy proxy ; <nl> <nl> @ EventHandler <nl> - public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } <nl> - <nl> - @ EventHandler <nl> - public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } <nl> + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> <nl> public static class CommonProxy <nl> { <nl> - public void init ( FMLInitializationEvent event ) <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; <nl> GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; <nl> } <nl> - <nl> - public void postInit ( FMLPostInitializationEvent event ) { } <nl> } <nl> <nl> public static class ClientProxy extends CommonProxy <nl> { <nl> - private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; <nl> + private static ModelResourceLocation blockLocation = new ModelResourceLocation ( blockName , " normal " ) ; <nl> + private static ModelResourceLocation itemLocation = new ModelResourceLocation ( blockName , " inventory " ) ; <nl> <nl> @ Override <nl> - public void init ( FMLInitializationEvent event ) <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> - super . init ( event ) ; <nl> - MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void postInit ( FMLPostInitializationEvent event ) { <nl> - super . postInit ( event ) ; <nl> + super . preInit ( event ) ; <nl> Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> - RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; <nl> - if ( renderItem ! = null ) <nl> - { <nl> - renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { <nl> - public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> - { <nl> - return modelLocation ; <nl> - } <nl> - } ) ; <nl> - } <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , itemLocation ) ; <nl> + ModelLoader . setCustomStateMapper ( CustomModelBlock . instance , new StateMapperBase ( ) { <nl> + protected ModelResourceLocation getModelResourceLocation ( IBlockState p _ 178132 _ 1 _ ) <nl> + { <nl> + return blockLocation ; <nl> + } <nl> + } ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> } <nl> } <nl> <nl> @ @ - 124 , 7 + 111 , 9 @ @ public class ModelBakeEventDebug <nl> { <nl> TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; <nl> TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; <nl> - event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; <nl> + IBakedModel customModel = new CustomModel ( base , overlay ) ; <nl> + event . modelRegistry . putObject ( ClientProxy . blockLocation , customModel ) ; <nl> + event . modelRegistry . putObject ( ClientProxy . itemLocation , customModel ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> index 8a8ecd6 . . b0d0878 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraftforge . client . model . ICustomModelLoader ; <nl> import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> import net . minecraftforge . client . model . IModel ; <nl> import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . client . model . ModelLoaderRegistry ; <nl> import net . minecraftforge . client . model . b3d . B3DLoader ; <nl> import net . minecraftforge . common . property . ExtendedBlockState ; <nl> @ @ - 58 , 15 + 59 , 11 @ @ public class ModelLoaderRegistryDebug <nl> B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; <nl> GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; <nl> / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; <nl> - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , MODID . toLowerCase ( ) + " : untitled2 . b3d " ) ; <nl> - } <nl> - <nl> - @ EventHandler <nl> - public void init ( FMLInitializationEvent event ) <nl> - { <nl> + String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; <nl> + ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; <nl> Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> - / / Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; <nl> - Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : untitled2 . b3d " , " inventory " ) ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; <nl> + / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; <nl> } <nl> <nl> public static class CustomModelBlock extends Block <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> deleted file mode 100644 <nl> index c2352ff . . 0000000 <nl> - - - a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> + + + / dev / null <nl> @ @ - 1 , 4 + 0 , 0 @ @ <nl> - { <nl> - " variants " : { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> deleted file mode 100644 <nl> index 43a272a . . 0000000 <nl> - - - a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> + + + / dev / null <nl> @ @ - 1 , 3 + 0 , 0 @ @ <nl> - { <nl> - " parent " : " builtin / entity " <nl> - }

TEST DIFF:
diff - - git a / patches . mcp / minecraft / net / minecraft / block / state / BlockStateContainer . java . patch b / patches . mcp / minecraft / net / minecraft / block / state / BlockStateContainer . java . patch 
 index 0bb60ec . . 3342a4b 100644 
 - - - a / patches . mcp / minecraft / net / minecraft / block / state / BlockStateContainer . java . patch 
 + + + b / patches . mcp / minecraft / net / minecraft / block / state / BlockStateContainer . java . patch 
 @ @ - 12 , 7 + 12 , 7 @ @ 
 + return new StateImplementation ( block , properties ) ; 
 + } 
 + 
 - + protected BlockStateContainer ( Block blockIn , IProperty [ ] properties , ImmutableMap < net . minecraftforge . common . property . IUnlistedProperty < ? > , com . google . common . base . Optional < ? > > unlistedProperties ) 
 + + protected BlockStateContainer ( Block blockIn , IProperty < ? > [ ] properties , ImmutableMap < net . minecraftforge . common . property . IUnlistedProperty < ? > , com . google . common . base . Optional < ? > > unlistedProperties ) 
 + { 
 this . block = blockIn ; 
 Map < String , IProperty < ? > > map = Maps . < String , IProperty < ? > > newHashMap ( ) ; 
 diff - - git a / patches . mcp / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch b / patches . mcp / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch 
 index fe0de35 . . ebdfd26 100644 
 - - - a / patches . mcp / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch 
 + + + b / patches . mcp / minecraft / net / minecraft / client / renderer / block / model / ModelBakery . java . patch 
 @ @ - 11 , 7 + 11 , 7 @ @ 
 } 
 @ @ - 370 , 6 + 370 , 7 @ @ 
 
 - private void registerVariantNames ( ) 
 + protected void registerVariantNames ( ) 
 { 
 + this . variantNames . clear ( ) ; / / FML clear this to prevent double ups . 
 this . variantNames . put ( Item . getItemFromBlock ( Blocks . stone ) , Lists . newArrayList ( new String [ ] { " stone " , " granite " , " granite _ smooth " , " diorite " , " diorite _ smooth " , " andesite " , " andesite _ smooth " } ) ) ; 
 @ @ - 27 , 10 + 27 , 10 @ @ 
 + } 
 } 
 
 - private List < String > getVariantNames ( Item p _ 177596 _ 1 _ ) 
 + protected List < String > getVariantNames ( Item p _ 177596 _ 1 _ ) 
 @ @ - 429 , 7 + 434 , 7 @ @ 
 
 - private ResourceLocation getItemLocation ( String p _ 177583 _ 1 _ ) 
 + protected ResourceLocation getItemLocation ( String p _ 177583 _ 1 _ ) 
 { 
 - ResourceLocation resourcelocation = new ResourceLocation ( p _ 177583 _ 1 _ ) ; 
 + ResourceLocation resourcelocation = new ResourceLocation ( p _ 177583 _ 1 _ . replaceAll ( " # . * " , " " ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 index dc17789 . . 8a0081f 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 @ @ - 108 , 12 + 108 , 6 @ @ public class BlockStateLoader 
 private final ResourceLocation model ; 
 private final ImmutableMap < String , String > customData ; 
 
 - @ Deprecated / / remove in 1 . 9 
 - public SubModel ( IModelState state , boolean uvLock , ImmutableMap < String , String > textures , ResourceLocation model , ImmutableMap < String , String > customData ) 
 - { 
 - this ( state , uvLock , true , true , textures , model , customData ) ; 
 - } 
 - 
 public SubModel ( IModelState state , boolean uvLock , boolean smooth , boolean gui3d , ImmutableMap < String , String > textures , ResourceLocation model , ImmutableMap < String , String > customData ) 
 { 
 this . state = state ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 index 39fa4c2 . . 95d871d 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import com . google . gson . JsonElement ; 
 import com . google . gson . JsonObject ; 
 import com . google . gson . JsonParseException ; 
 
 - @ SuppressWarnings ( " deprecation " ) 
 public class ForgeBlockStateV1 extends Marker 
 { 
 ForgeBlockStateV1 . Variant defaults ; 
 @ @ - 372 , 7 + 371 , 7 @ @ public class ForgeBlockStateV1 extends Marker 
 
 protected SubModel asGenericSubModel ( ) 
 { 
 - return new SubModel ( state . or ( TRSRTransformation . identity ( ) ) , uvLock . or ( false ) , getTextures ( ) , model , getCustomData ( ) ) ; 
 + return new SubModel ( state . or ( TRSRTransformation . identity ( ) ) , smooth . or ( true ) , gui3d . or ( true ) , uvLock . or ( false ) , getTextures ( ) , model , getCustomData ( ) ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / client / model / IModelCustomData . java b / src / main / java / net / minecraftforge / client / model / IModelCustomData . java 
 index 810e768 . . ec54716 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IModelCustomData . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IModelCustomData . java 
 @ @ - 9 , 6 + 9 , 5 @ @ public interface IModelCustomData < M extends IModelCustomData < M > > extends IModel 
 * If unknown data is encountered it should be skipped . 
 * @ return a new model , with data applied . 
 * / 
 - / / 1 . 9 : change IModel to M 
 - IModel process ( ImmutableMap < String , String > customData ) ; 
 + M process ( ImmutableMap < String , String > customData ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java b / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java 
 index b6b14cc . . 98016dc 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IRetexturableModel . java 
 @ @ - 21 , 6 + 21 , 5 @ @ public interface IRetexturableModel < M extends IRetexturableModel < M > > extends IMo 
 * @ param textures New 
 * @ return Model with textures applied . 
 * / 
 - / / 1 . 9 : change IModel to M 
 - IModel retexture ( ImmutableMap < String , String > textures ) ; 
 + M retexture ( ImmutableMap < String , String > textures ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 index 208522a . . f129e83 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 @ @ - 31 , 7 + 31 , 6 @ @ import com . google . common . collect . ImmutableMap ; 
 
 public class ItemLayerModel implements IRetexturableModel < ItemLayerModel > 
 { 
 - 
 public static final ItemLayerModel instance = new ItemLayerModel ( ImmutableList . < ResourceLocation > of ( ) ) ; 
 
 private final ImmutableList < ResourceLocation > textures ; 
 @ @ - 71 , 7 + 70 , 7 @ @ public class ItemLayerModel implements IRetexturableModel < ItemLayerModel > 
 return TRSRTransformation . identity ( ) ; 
 } 
 
 - public IModel retexture ( ImmutableMap < String , String > textures ) 
 + public ItemLayerModel retexture ( ImmutableMap < String , String > textures ) 
 { 
 ImmutableList . Builder < ResourceLocation > builder = ImmutableList . builder ( ) ; 
 for ( int i = 0 ; i < textures . size ( ) + this . textures . size ( ) ; i + + ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 index 8b36e5e . . 932ebfc 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 @ @ - 152 , 7 + 152 , 7 @ @ public class ModelDynBucket implements IModel , IModelCustomData < ModelDynBucket > , 
 * If the fluid can ' t be found , water is used 
 * / 
 @ Override 
 - public IModel process ( ImmutableMap < String , String > customData ) 
 + public ModelDynBucket process ( ImmutableMap < String , String > customData ) 
 { 
 String fluidName = customData . get ( " fluid " ) ; 
 Fluid fluid = FluidRegistry . getFluid ( fluidName ) ; 
 @ @ - 183 , 7 + 183 , 7 @ @ public class ModelDynBucket implements IModel , IModelCustomData < ModelDynBucket > , 
 * If no liquid is given a hardcoded variant for the bucket is used . 
 * / 
 @ Override 
 - public IModel retexture ( ImmutableMap < String , String > textures ) 
 + public ModelDynBucket retexture ( ImmutableMap < String , String > textures ) 
 { 
 
 ResourceLocation base = baseLocation ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelFluid . java b / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 index 2bb2194 . . d08f4af 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 @ @ - 391 , 7 + 391 , 7 @ @ public class ModelFluid implements IModelCustomData < ModelFluid > 
 } 
 
 @ Override 
 - public IModel process ( ImmutableMap < String , String > customData ) 
 + public ModelFluid process ( ImmutableMap < String , String > customData ) 
 { 
 if ( ! customData . containsKey ( " fluid " ) ) return this ; 
 
 diff - - git a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 index ea725a3 . . 27423c7 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / MultiLayerModel . java 
 @ @ - 93 , 7 + 93 , 7 @ @ public class MultiLayerModel implements IModelCustomData < MultiLayerModel > 
 } 
 
 @ Override 
 - public IModel process ( ImmutableMap < String , String > customData ) 
 + public MultiLayerModel process ( ImmutableMap < String , String > customData ) 
 { 
 ImmutableMap . Builder < Optional < BlockRenderLayer > , ModelResourceLocation > builder = ImmutableMap . builder ( ) ; 
 for ( String key : customData . keySet ( ) ) 
 diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 index 5a59784 . . a18af6c 100644 
 - - - a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 @ @ - 22 , 7 + 22 , 7 @ @ public class ExtendedBlockState extends BlockStateContainer 
 { 
 private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; 
 
 - public ExtendedBlockState ( Block blockIn , @ SuppressWarnings ( " rawtypes " ) IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) 
 + public ExtendedBlockState ( Block blockIn , IProperty < ? > [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) 
 { 
 super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; 
 ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; 
 @ @ - 49 , 7 + 49 , 7 @ @ public class ExtendedBlockState extends BlockStateContainer 
 } 
 
 @ Override 
 - protected StateImplementation createState ( Block block , @ SuppressWarnings ( " rawtypes " ) ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ) 
 + protected StateImplementation createState ( Block block , ImmutableMap < IProperty < ? > , Comparable < ? > > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ) 
 { 
 if ( unlistedProperties = = null | | unlistedProperties . isEmpty ( ) ) return super . createState ( block , properties , unlistedProperties ) ; 
 return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; 
 @ @ - 58 , 10 + 58 , 9 @ @ public class ExtendedBlockState extends BlockStateContainer 
 protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState 
 { 
 private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; 
 - @ SuppressWarnings ( " rawtypes " ) 
 - private Map < Map < IProperty , Comparable > , BlockState . StateImplementation > normalMap ; 
 + private Map < Map < IProperty < ? > , Comparable < ? > > , BlockStateContainer . StateImplementation > normalMap ; 
 
 - protected ExtendedStateImplementation ( Block block , @ SuppressWarnings ( " rawtypes " ) ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , @ SuppressWarnings ( " rawtypes " ) ImmutableTable < IProperty , Comparable , IBlockState > table ) 
 + protected ExtendedStateImplementation ( Block block , ImmutableMap < IProperty < ? > , Comparable < ? > > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty < ? > , Comparable < ? > , IBlockState > table ) 
 { 
 super ( block , properties ) ; 
 this . unlistedProperties = unlistedProperties ; 
 @ @ - 85 , 15 + 84 , 13 @ @ public class ExtendedBlockState extends BlockStateContainer 
 { 
 return this ; 
 } 
 - @ SuppressWarnings ( " rawtypes " ) 
 - Map < IProperty , Comparable > map = Maps . newHashMap ( getProperties ( ) ) ; 
 + Map < IProperty < ? > , Comparable < ? > > map = Maps . newHashMap ( getProperties ( ) ) ; 
 map . put ( property , value ) ; 
 if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) 
 { / / no dynamic properties present , looking up in the normal table 
 return ( IExtendedBlockState ) normalMap . get ( map ) ; 
 } 
 - @ SuppressWarnings ( " rawtypes " ) 
 - ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; 
 + ImmutableTable < IProperty < ? > , Comparable < ? > , IBlockState > table = propertyValueTable ; 
 table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; 
 return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) . setMap ( this . normalMap ) ; 
 } 
 @ @ - 138 , 13 + 135 , 13 @ @ public class ExtendedBlockState extends BlockStateContainer 
 } 
 
 @ Override 
 - public void buildPropertyValueTable ( @ SuppressWarnings ( " rawtypes " ) Map < Map < IProperty , Comparable > , BlockState . StateImplementation > map ) 
 + public void buildPropertyValueTable ( Map < Map < IProperty < ? > , Comparable < ? > > , BlockStateContainer . StateImplementation > map ) 
 { 
 this . normalMap = map ; 
 super . buildPropertyValueTable ( map ) ; 
 } 
 
 - private ExtendedStateImplementation setMap ( @ SuppressWarnings ( " rawtypes " ) Map < Map < IProperty , Comparable > , BlockState . StateImplementation > map ) 
 + private ExtendedStateImplementation setMap ( Map < Map < IProperty < ? > , Comparable < ? > > , BlockStateContainer . StateImplementation > map ) 
 { 
 this . normalMap = map ; 
 return this ; 
 diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg 
 index 229cde6 . . 5737f44 100644 
 - - - a / src / main / resources / forge _ at . cfg 
 + + + b / src / main / resources / forge _ at . cfg 
 @ @ - 109 , 35 + 109 , 35 @ @ public net . minecraft . world . gen . ChunkProviderServer field _ 73251 _ h # worldObj 
 protected net . minecraft . client . renderer . entity . RenderEntityItem func _ 177078 _ a ( Lnet / minecraft / item / ItemStack ; ) I # getMiniItemCount 
 public net . minecraft . item . crafting . RecipesBanners $ RecipeAddPattern 
 public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern 
 - # public net . minecraft . block . state . BlockState $ StateImplementation 
 - # protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V 
 - # protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable 
 + public net . minecraft . block . state . BlockStateContainer $ StateImplementation 
 + protected net . minecraft . block . state . BlockStateContainer $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V 
 + protected net . minecraft . block . state . BlockStateContainer $ StateImplementation field _ 177238 _ c # propertyValueTable 
 public net . minecraft . client . renderer . block . model . ModelBlock field _ 178318 _ c # textures 
 public net . minecraft . client . renderer . block . model . ModelBlock field _ 178315 _ d # parent 
 public net . minecraft . client . renderer . block . model . ModelBlock field _ 178322 _ i # ambientOcclusion 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177602 _ b # LOCATIONS _ BUILTIN _ TEXTURES 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177598 _ f # resourceManager 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177599 _ g # sprites 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177609 _ j # textureMap 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177610 _ k # blockModelShapes 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177605 _ n # bakedRegistry 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177606 _ o # MODEL _ GENERATED 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177618 _ p # MODEL _ COMPASS 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177617 _ q # MODEL _ CLOCK 
 - # protected net . minecraft . client . resources . model . ModelBakery field _ 177616 _ r # MODEL _ ENTITY 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177591 _ a ( Ljava / util / Collection ; ) V # loadVariants 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177569 _ a ( Lnet / minecraft / client / renderer / block / model / ModelBlockDefinition ; Lnet / minecraft / client / resources / model / ModelResourceLocation ; ) V # registerVariant 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177586 _ a ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / client / renderer / block / model / ModelBlockDefinition ; # getModelBlockDefinition 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177594 _ c ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / client / renderer / block / model / ModelBlock ; # loadModel 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177592 _ e ( ) V # registerVariantNames 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177596 _ a ( Lnet / minecraft / item / Item ; ) Ljava / util / List ; # getVariantNames 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177583 _ a ( Ljava / lang / String ; ) Lnet / minecraft / util / ResourceLocation ; # getItemLocation 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177585 _ a ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Ljava / util / Set ; # getTextureLocations 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177581 _ b ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Z # hasItemModel 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177587 _ c ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Z # isCustomRenderer 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177582 _ d ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Lnet / minecraft / client / renderer / block / model / ModelBlock ; # makeItemModel 
 - # protected net . minecraft . client . resources . model . ModelBakery func _ 177580 _ d ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / util / ResourceLocation ; # getModelLocation 
 - # public net . minecraft . client . resources . model . WeightedBakedModel field _ 177565 _ b # models 
 + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177602 _ b # LOCATIONS _ BUILTIN _ TEXTURES 
 + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177598 _ f # resourceManager 
 + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177599 _ g # sprites 
 + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177609 _ j # textureMap 
 + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177610 _ k # blockModelShapes 
 + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177605 _ n # bakedRegistry 
 + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177606 _ o # MODEL _ GENERATED 
 + # protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177618 _ p # MODEL _ COMPASS 
 + # protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177617 _ q # MODEL _ CLOCK 
 + protected net . minecraft . client . renderer . block . model . ModelBakery field _ 177616 _ r # MODEL _ ENTITY 
 + # protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177591 _ a ( Ljava / util / Collection ; ) V # loadVariants 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177569 _ a ( Lnet / minecraft / client / renderer / block / model / ModelBlockDefinition ; Lnet / minecraft / client / renderer / block / model / ModelResourceLocation ; ) V # registerVariant 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177586 _ a ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / client / renderer / block / model / ModelBlockDefinition ; # getModelBlockDefinition 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177594 _ c ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / client / renderer / block / model / ModelBlock ; # loadModel 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177592 _ e ( ) V # registerVariantNames 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177596 _ a ( Lnet / minecraft / item / Item ; ) Ljava / util / List ; # getVariantNames 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177583 _ a ( Ljava / lang / String ; ) Lnet / minecraft / util / ResourceLocation ; # getItemLocation 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177585 _ a ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Ljava / util / Set ; # getTextureLocations 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177581 _ b ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Z # hasItemModel 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177587 _ c ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Z # isCustomRenderer 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177582 _ d ( Lnet / minecraft / client / renderer / block / model / ModelBlock ; ) Lnet / minecraft / client / renderer / block / model / ModelBlock ; # makeItemModel 
 + protected net . minecraft . client . renderer . block . model . ModelBakery func _ 177580 _ d ( Lnet / minecraft / util / ResourceLocation ; ) Lnet / minecraft / util / ResourceLocation ; # getModelLocation 
 + # public net . minecraft . client . renderer . block . model . WeightedBakedModel field _ 177565 _ b # models 
 # EnumFacing 
 public net . minecraft . util . EnumFacing field _ 82609 _ l # VALUES 
 public net . minecraft . util . EnumFacing field _ 176754 _ o # HORIZONTALS

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch 
 new file mode 100644 
 index 0000000 . . ae731a3 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockModelShapes . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockModelShapes . java 
 + @ @ - 321 , 6 + 321 , 7 @ @ 
 + return new ModelResourceLocation ( s + " _ double _ slab " , s1 ) ; 
 + } 
 + } ) ; 
 + + net . minecraftforge . client . model . ModelLoader . onRegisterAllBlocks ( this ) ; 
 + } 
 + 
 + @ SideOnly ( Side . CLIENT ) 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch 
 index 48162e1 . . 498fc5d 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch 
 @ @ - 81 , 7 + 81 , 14 @ @ 
 GlStateManager . func _ 179141 _ d ( ) ; 
 GlStateManager . func _ 179098 _ w ( ) ; 
 GlStateManager . func _ 179145 _ e ( ) ; 
 - @ @ - 1078 , 6 + 1072 , 19 @ @ 
 + @ @ - 1072 , 12 + 1066 , 26 @ @ 
 + this . func _ 175029 _ a ( Blocks . field _ 150420 _ aW , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " brown _ mushroom _ block " ) ; 
 + this . func _ 175029 _ a ( Blocks . field _ 150419 _ aX , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " red _ mushroom _ block " ) ; 
 + this . func _ 175031 _ a ( Blocks . field _ 150380 _ bt , " dragon _ egg " ) ; 
 + + net . minecraftforge . client . model . ModelLoader . onRegisterItems ( this . field _ 175059 _ m ) ; 
 + } 
 + 
 + public void func _ 110549 _ a ( IResourceManager p _ 110549 _ 1 _ ) 
 { 
 this . field _ 175059 _ m . func _ 178085 _ b ( ) ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 index 0c6385f . . 8364265 100644 
 - - - a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 @ @ - 9 , 7 + 9 , 15 @ @ 
 } 
 } 
 catch ( Exception exception1 ) 
 - @ @ - 499 , 6 + 499 , 11 @ @ 
 + @ @ - 172 , 6 + 172 , 7 @ @ 
 + } 
 + } 
 + } 
 + + catch ( FileNotFoundException e ) { } 
 + catch ( IOException ioexception ) 
 + { 
 + throw new RuntimeException ( " Encountered an exception when loading model definition of model " + resourcelocation1 . toString ( ) , ioexception ) ; 
 + @ @ - 499 , 6 + 500 , 11 @ @ 
 
 private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) 
 { 
 @ @ - 21 , 7 + 29 , 7 @ @ 
 TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; 
 SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ ) ) . func _ 177646 _ a ( textureatlassprite ) ; 
 Iterator iterator = p _ 177578 _ 1 _ . func _ 178298 _ a ( ) . iterator ( ) ; 
 - @ @ - 516 , 11 + 521 , 11 @ @ 
 + @ @ - 516 , 11 + 522 , 11 @ @ 
 
 if ( blockpartface . field _ 178244 _ b = = null ) 
 { 
 @ @ - 35 , 7 + 43 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 530 , 9 + 535 , 14 @ @ 
 + @ @ - 530 , 9 + 536 , 14 @ @ 
 
 private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index f93959c . . 2407f52 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 59 , 6 + 59 , 7 @ @ import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . client . event . sound . PlaySoundEvent ; 
 import net . minecraftforge . client . model . IPerspectiveAwareModel ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . ForgeVersion . Status ; 
 @ @ - 487 , 7 + 488 , 9 @ @ public class ForgeHooksClient 
 
 public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 { 
 - MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; 
 + ModelLoader loader = ( ModelLoader ) modelBakery ; 
 + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , loader ) ) ; 
 + loader . onPostBakeEvent ( modelRegistry ) ; 
 } 
 
 public static Matrix4f getMatrix ( ItemTransformVec3f transform ) 
 diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 index 502454f . . 3c124d8 100644 
 - - - a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 @ @ - 1 , 9 + 1 , 9 @ @ 
 package net . minecraftforge . client . event ; 
 
 - import net . minecraftforge . fml . common . eventhandler . Event ; 
 - import net . minecraft . client . resources . model . ModelBakery ; 
 import net . minecraft . client . resources . model . ModelManager ; 
 import net . minecraft . util . IRegistry ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 
 / * * 
 * Fired when the ModelManager is notified of the resource manager reloading . 
 @ @ - 13 , 12 + 13 , 12 @ @ public class ModelBakeEvent extends Event 
 { 
 public final ModelManager modelManager ; 
 public final IRegistry modelRegistry ; 
 - public final ModelBakery modelBakery ; 
 + public final ModelLoader modelLoader ; 
 
 - public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelLoader modelLoader ) 
 { 
 this . modelManager = modelManager ; 
 this . modelRegistry = modelRegistry ; 
 - this . modelBakery = modelBakery ; 
 + this . modelLoader = modelLoader ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 8942995 . . 91ea08d 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 11 , 8 + 11 , 11 @ @ import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . Set ; 
 
 + import net . minecraft . block . Block ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . renderer . BlockModelShapes ; 
 + import net . minecraft . client . renderer . ItemMeshDefinition ; 
 + import net . minecraft . client . renderer . ItemModelMesher ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 import net . minecraft . client . renderer . block . model . ItemModelGenerator ; 
 import net . minecraft . client . renderer . block . model . ModelBlock ; 
 @ @ - 20 , 6 + 23 , 7 @ @ import net . minecraft . client . renderer . block . model . ModelBlockDefinition ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition . MissingVariantException ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variant ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variants ; 
 + import net . minecraft . client . renderer . block . statemap . IStateMapper ; 
 import net . minecraft . client . renderer . texture . IIconCreator ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 @ @ - 35 , 7 + 39 , 9 @ @ import net . minecraft . util . IRegistry ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . registry . GameData ; 
 + import net . minecraftforge . fml . common . registry . RegistryDelegate ; 
 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Function ; 
 @ @ - 44 , 6 + 50 , 8 @ @ import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Maps ; 
 + import com . google . common . collect . Sets ; 
 
 public class ModelLoader extends ModelBakery 
 { 
 @ @ - 51 , 6 + 59 , 13 @ @ public class ModelLoader extends ModelBakery 
 private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; 
 + private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; 
 + 
 + private boolean isLoading = false ; 
 + public boolean isLoading ( ) 
 + { 
 + return isLoading ; 
 + } 
 
 public ModelLoader ( IResourceManager manager , TextureMap map , BlockModelShapes shapes ) 
 { 
 @ @ - 62 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery 
 @ Override 
 public IRegistry setupModelRegistry ( ) 
 { 
 + isLoading = true ; 
 loadBlocks ( ) ; 
 loadItems ( ) ; 
 stateModels . put ( MODEL _ MISSING , getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ) ; 
 @ @ - 103 , 19 + 119 , 15 @ @ public class ModelLoader extends ModelBakery 
 { 
 variants = definition . getVariants ( location . getVariant ( ) ) ; 
 } 
 - catch ( MissingVariantException e ) { } 
 - if ( variants = = null ) 
 + catch ( MissingVariantException e ) 
 { 
 - / / adding default variant for simple blocks 
 - ResourceLocation loc = new ResourceLocation ( location . getResourceDomain ( ) , " block / " + location . getResourcePath ( ) ) ; 
 - variants = new Variants ( " normal " , Lists . newArrayList ( new Variant ( loc , ModelRotation . X0 _ Y0 , false , 1 ) ) ) ; 
 + missingVariants . add ( location ) ; 
 } 
 - if ( ! variants . getVariants ( ) . isEmpty ( ) ) 
 + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) 
 { 
 try 
 { 
 stateModels . put ( location , new WeightedRandomModel ( variants ) ) ; 
 - 
 } 
 catch ( Throwable e ) 
 { 
 @ @ - 135 , 7 + 147 , 11 @ @ public class ModelLoader extends ModelBakery 
 ModelResourceLocation memory = new ModelResourceLocation ( s , " inventory " ) ; 
 resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( file ) ) ; 
 IModel model = getModel ( file ) ; 
 - if ( model ! = null ) stateModels . put ( memory , model ) ; 
 + if ( model = = null | | model = = getMissingModel ( ) ) 
 + { 
 + missingVariants . add ( memory ) ; 
 + } 
 + else stateModels . put ( memory , model ) ; 
 } 
 } 
 } 
 @ @ - 415 , 9 + 431 , 65 @ @ public class ModelLoader extends ModelBakery 
 } 
 catch ( IOException e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; 
 + if ( loader . isLoading ) 
 + { 
 + / / holding error until onPostBakeEvent 
 + } 
 + else FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; 
 return loader . getMissingModel ( ) ; 
 } 
 } 
 } 
 + 
 + public void onPostBakeEvent ( IRegistry modelRegistry ) 
 + { 
 + for ( ModelResourceLocation missing : missingVariants ) 
 + { 
 + if ( modelRegistry . getObject ( missing ) = = null ) 
 + { 
 + FMLLog . severe ( " Model definition for location % s not found " , missing ) ; 
 + } 
 + } 
 + isLoading = false ; 
 + } 
 + 
 + private static final Map < RegistryDelegate < Block > , IStateMapper > customStateMappers = Maps . newHashMap ( ) ; 
 + 
 + public static void setCustomStateMapper ( Block block , IStateMapper mapper ) 
 + { 
 + customStateMappers . put ( block . delegate , mapper ) ; 
 + } 
 + 
 + public static void onRegisterAllBlocks ( BlockModelShapes shapes ) 
 + { 
 + for ( Entry < RegistryDelegate < Block > , IStateMapper > e : customStateMappers . entrySet ( ) ) 
 + { 
 + shapes . registerBlockWithStateMapper ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; 
 + } 
 + } 
 + 
 + private static final Map < RegistryDelegate < Item > , ItemMeshDefinition > customMeshDefinitions = com . google . common . collect . Maps . newHashMap ( ) ; 
 + private static final Map < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > customModels = com . google . common . collect . Maps . newHashMap ( ) ; 
 + 
 + public static void setCustomModelResourceLocation ( Item item , int metadata , ModelResourceLocation model ) 
 + { 
 + customModels . put ( item . delegate , Pair . of ( metadata , model ) ) ; 
 + } 
 + 
 + public static void setCustomMeshDefinition ( Item item , ItemMeshDefinition meshDefinition ) 
 + { 
 + customMeshDefinitions . put ( item . delegate , meshDefinition ) ; 
 + } 
 + 
 + public static void onRegisterItems ( ItemModelMesher mesher ) 
 + { 
 + for ( Map . Entry < RegistryDelegate < Item > , ItemMeshDefinition > e : customMeshDefinitions . entrySet ( ) ) 
 + { 
 + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; 
 + } 
 + for ( Entry < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > e : customModels . entrySet ( ) ) 
 + { 
 + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) . getLeft ( ) , e . getValue ( ) . getRight ( ) ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 index c8de9a4 . . 96f9aa5 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 @ @ - 11 , 10 + 11 , 9 @ @ import net . minecraft . block . properties . PropertyInteger ; 
 import net . minecraft . block . state . BlockState ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . Minecraft ; 
 - import net . minecraft . client . renderer . ItemMeshDefinition ; 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 - import net . minecraft . client . renderer . entity . RenderItem ; 
 + import net . minecraft . client . renderer . block . statemap . StateMapperBase ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . resources . model . IBakedModel ; 
 import net . minecraft . client . resources . model . ModelResourceLocation ; 
 @ @ - 31 , 6 + 30 , 7 @ @ import net . minecraft . world . World ; 
 import net . minecraftforge . client . event . ModelBakeEvent ; 
 import net . minecraftforge . client . model . ISmartBlockModel ; 
 import net . minecraftforge . client . model . ISmartItemModel ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . common . property . ExtendedBlockState ; 
 import net . minecraftforge . common . property . IExtendedBlockState ; 
 @ @ - 39 , 8 + 39 , 7 @ @ import net . minecraftforge . common . property . Properties ; 
 import net . minecraftforge . fml . common . Mod ; 
 import net . minecraftforge . fml . common . Mod . EventHandler ; 
 import net . minecraftforge . fml . common . SidedProxy ; 
 - import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 - import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 
 @ @ - 69 , 47 + 68 , 35 @ @ public class ModelBakeEventDebug 
 public static CommonProxy proxy ; 
 
 @ EventHandler 
 - public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } 
 - 
 - @ EventHandler 
 - public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } 
 + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 
 public static class CommonProxy 
 { 
 - public void init ( FMLInitializationEvent event ) 
 + public void preInit ( FMLPreInitializationEvent event ) 
 { 
 GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; 
 GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; 
 } 
 - 
 - public void postInit ( FMLPostInitializationEvent event ) { } 
 } 
 
 public static class ClientProxy extends CommonProxy 
 { 
 - private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; 
 + private static ModelResourceLocation blockLocation = new ModelResourceLocation ( blockName , " normal " ) ; 
 + private static ModelResourceLocation itemLocation = new ModelResourceLocation ( blockName , " inventory " ) ; 
 
 @ Override 
 - public void init ( FMLInitializationEvent event ) 
 + public void preInit ( FMLPreInitializationEvent event ) 
 { 
 - super . init ( event ) ; 
 - MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 - } 
 - 
 - @ Override 
 - public void postInit ( FMLPostInitializationEvent event ) { 
 - super . postInit ( event ) ; 
 + super . preInit ( event ) ; 
 Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 - RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; 
 - if ( renderItem ! = null ) 
 - { 
 - renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { 
 - public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 - { 
 - return modelLocation ; 
 - } 
 - } ) ; 
 - } 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , itemLocation ) ; 
 + ModelLoader . setCustomStateMapper ( CustomModelBlock . instance , new StateMapperBase ( ) { 
 + protected ModelResourceLocation getModelResourceLocation ( IBlockState p _ 178132 _ 1 _ ) 
 + { 
 + return blockLocation ; 
 + } 
 + } ) ; 
 + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 } 
 } 
 
 @ @ - 124 , 7 + 111 , 9 @ @ public class ModelBakeEventDebug 
 { 
 TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; 
 TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; 
 - event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; 
 + IBakedModel customModel = new CustomModel ( base , overlay ) ; 
 + event . modelRegistry . putObject ( ClientProxy . blockLocation , customModel ) ; 
 + event . modelRegistry . putObject ( ClientProxy . itemLocation , customModel ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 index 8a8ecd6 . . b0d0878 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraftforge . client . model . ICustomModelLoader ; 
 import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 import net . minecraftforge . client . model . IModel ; 
 import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . client . model . ModelLoaderRegistry ; 
 import net . minecraftforge . client . model . b3d . B3DLoader ; 
 import net . minecraftforge . common . property . ExtendedBlockState ; 
 @ @ - 58 , 15 + 59 , 11 @ @ public class ModelLoaderRegistryDebug 
 B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; 
 GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; 
 / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; 
 - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , MODID . toLowerCase ( ) + " : untitled2 . b3d " ) ; 
 - } 
 - 
 - @ EventHandler 
 - public void init ( FMLInitializationEvent event ) 
 - { 
 + String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; 
 + ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; 
 Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 - / / Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; 
 - Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : untitled2 . b3d " , " inventory " ) ) ; 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; 
 + / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; 
 } 
 
 public static class CustomModelBlock extends Block 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 deleted file mode 100644 
 index c2352ff . . 0000000 
 - - - a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 + + + / dev / null 
 @ @ - 1 , 4 + 0 , 0 @ @ 
 - { 
 - " variants " : { 
 - } 
 - } 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 deleted file mode 100644 
 index 43a272a . . 0000000 
 - - - a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - { 
 - " parent " : " builtin / entity " 
 - }
