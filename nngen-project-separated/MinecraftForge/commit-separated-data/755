BLEU SCORE: 0.04515183688171632

TEST MSG: Add wrapper methods for IStorage # readNBT / writeNBT .
GENERATED MSG: Add in the basic IBlockLiquid interface . The actual block implementation

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / capabilities / Capability . java b / src / main / java / net / minecraftforge / common / capabilities / Capability . java <nl> index aecde88 . . 0e3a0fb 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / capabilities / Capability . java <nl> + + + b / src / main / java / net / minecraftforge / common / capabilities / Capability . java <nl> @ @ - 65 , 10 + 65 , 29 @ @ public class Capability < T > <nl> * the fully qualified class name for the target interface . <nl> * / <nl> public String getName ( ) { return name ; } <nl> + <nl> / * * <nl> * @ return An instance of the default storage handler . You can safely use this store your default implementation in NBT . <nl> * / <nl> public IStorage < T > getStorage ( ) { return storage ; } <nl> + <nl> + / * * <nl> + * Quick access to the IStorage ' s readNBT . <nl> + * See { @ link IStorage # readNBT ( Capability , Object , EnumFacing , NBTBase ) } for documentation . <nl> + * / <nl> + public void readNBT ( T instance , EnumFacing side , NBTBase nbt ) <nl> + { <nl> + 	 storage . readNBT ( this , instance , side , nbt ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Quick access to the IStorage ' s writeNBT . <nl> + * See { @ link IStorage # writeNBT ( Capability , Object , EnumFacing ) } for documentation . <nl> + * / <nl> + public NBTBase writeNBT ( T instance , EnumFacing side ) <nl> + { <nl> + 	 return storage . writeNBT ( this , instance , side ) ; <nl> + } <nl> <nl> / * * <nl> * A NEW instance of the default implementation .
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / liquids / IBlockLiquid . java b / common / net / minecraftforge / liquids / IBlockLiquid . java <nl> new file mode 100644 <nl> index 0000000 . . d57a194 <nl> - - - / dev / null <nl> + + + b / common / net / minecraftforge / liquids / IBlockLiquid . java <nl> @ @ - 0 , 0 + 1 , 59 @ @ <nl> + package net . minecraftforge . liquids ; <nl> + <nl> + import net . minecraft . src . NBTTagCompound ; <nl> + <nl> + / * * <nl> + * Implementors of this interface are a liquid which may receive a block implementation and can be placed in the world . <nl> + * <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public interface IBlockLiquid extends ILiquid { <nl> + 	 / * * <nl> + 	 * Controls the type of block that is generated by this IBlockLiquid <nl> + 	 * @ author cpw <nl> + 	 * <nl> + 	 * / <nl> + 	 public enum BlockType { <nl> + 	 	 / * * <nl> + 	 	 * No block . Completeness really . <nl> + 	 	 * / <nl> + 	 	 NONE , <nl> + 	 	 / * * <nl> + 	 	 * Vanilla style block , up to 8 flowing states . May be able to generate new sources . <nl> + 	 	 * / <nl> + 	 	 VANILLA , <nl> + 	 	 / * * <nl> + 	 	 * Finite liquid style , uses cellular automata to model flowing behaviour . <nl> + 	 	 * / <nl> + 	 	 FINITE ; <nl> + 	 } <nl> + <nl> + 	 / * * <nl> + 	 * Can this liquid , when placed in a specific configuration , generate new source blocks of the liquid . <nl> + 	 * @ return <nl> + 	 * / <nl> + 	 public boolean willGenerateSources ( ) ; <nl> + <nl> + 	 / * * <nl> + 	 * @ return the distance this liquid will flow if placed in the world . Maximum of 7 levels for vanilla types . <nl> + 	 * / <nl> + 	 public int getFlowDistance ( ) ; <nl> + <nl> + 	 / * * <nl> + 	 * @ return the RGB rendering for this liquid <nl> + 	 * / <nl> + 	 public byte [ ] getLiquidRGB ( ) ; <nl> + <nl> + 	 / * * <nl> + 	 * Get the texture file for rendering the liquid <nl> + 	 * @ return <nl> + 	 * / <nl> + 	 public String getLiquidBlockTextureFile ( ) ; <nl> + 	 / * * <nl> + 	 * Custom properties of the liquid . <nl> + 	 * @ return <nl> + 	 * / <nl> + 	 public NBTTagCompound getLiquidProperties ( ) ; <nl> + <nl> + } <nl> diff - - git a / common / net / minecraftforge / liquids / ILiquid . java b / common / net / minecraftforge / liquids / ILiquid . java <nl> index 3d33f3d . . f0efa91 100644 <nl> - - - a / common / net / minecraftforge / liquids / ILiquid . java <nl> + + + b / common / net / minecraftforge / liquids / ILiquid . java <nl> @ @ - 1 , 20 + 1 , 35 @ @ <nl> - / * * <nl> + / * * <nl> * Copyright ( c ) SpaceToad , 2011 <nl> * http : / / www . mod - buildcraft . com <nl> - * <nl> - * BuildCraft is distributed under the terms of the Minecraft Mod Public <nl> + * <nl> + * BuildCraft is distributed under the terms of the Minecraft Mod Public <nl> * License 1 . 0 , or MMPL . Please check the contents of the license located in <nl> * http : / / www . mod - buildcraft . com / MMPL - 1 . 0 . txt <nl> * / <nl> <nl> package net . minecraftforge . liquids ; <nl> <nl> + / * * <nl> + * Liquids implement this interface <nl> + * <nl> + * / <nl> public interface ILiquid { <nl> <nl> + 	 / * * <nl> + 	 * The itemId of the liquid item <nl> + 	 * @ return <nl> + 	 * / <nl> 	 public int stillLiquidId ( ) ; <nl> <nl> + 	 / * * <nl> + 	 * Is this liquid a metadata based liquid <nl> + 	 * @ return <nl> + 	 * / <nl> 	 public boolean isMetaSensitive ( ) ; <nl> <nl> + 	 / * * <nl> + 	 * The item metadata of the liquid <nl> + 	 * @ return <nl> + 	 * / <nl> 	 public int stillLiquidMeta ( ) ; <nl> - <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / capabilities / Capability . java b / src / main / java / net / minecraftforge / common / capabilities / Capability . java 
 index aecde88 . . 0e3a0fb 100644 
 - - - a / src / main / java / net / minecraftforge / common / capabilities / Capability . java 
 + + + b / src / main / java / net / minecraftforge / common / capabilities / Capability . java 
 @ @ - 65 , 10 + 65 , 29 @ @ public class Capability < T > 
 * the fully qualified class name for the target interface . 
 * / 
 public String getName ( ) { return name ; } 
 + 
 / * * 
 * @ return An instance of the default storage handler . You can safely use this store your default implementation in NBT . 
 * / 
 public IStorage < T > getStorage ( ) { return storage ; } 
 + 
 + / * * 
 + * Quick access to the IStorage ' s readNBT . 
 + * See { @ link IStorage # readNBT ( Capability , Object , EnumFacing , NBTBase ) } for documentation . 
 + * / 
 + public void readNBT ( T instance , EnumFacing side , NBTBase nbt ) 
 + { 
 + 	 storage . readNBT ( this , instance , side , nbt ) ; 
 + } 
 + 
 + / * * 
 + * Quick access to the IStorage ' s writeNBT . 
 + * See { @ link IStorage # writeNBT ( Capability , Object , EnumFacing ) } for documentation . 
 + * / 
 + public NBTBase writeNBT ( T instance , EnumFacing side ) 
 + { 
 + 	 return storage . writeNBT ( this , instance , side ) ; 
 + } 
 
 / * * 
 * A NEW instance of the default implementation .

NEAREST DIFF:
diff - - git a / common / net / minecraftforge / liquids / IBlockLiquid . java b / common / net / minecraftforge / liquids / IBlockLiquid . java 
 new file mode 100644 
 index 0000000 . . d57a194 
 - - - / dev / null 
 + + + b / common / net / minecraftforge / liquids / IBlockLiquid . java 
 @ @ - 0 , 0 + 1 , 59 @ @ 
 + package net . minecraftforge . liquids ; 
 + 
 + import net . minecraft . src . NBTTagCompound ; 
 + 
 + / * * 
 + * Implementors of this interface are a liquid which may receive a block implementation and can be placed in the world . 
 + * 
 + * @ author cpw 
 + * 
 + * / 
 + public interface IBlockLiquid extends ILiquid { 
 + 	 / * * 
 + 	 * Controls the type of block that is generated by this IBlockLiquid 
 + 	 * @ author cpw 
 + 	 * 
 + 	 * / 
 + 	 public enum BlockType { 
 + 	 	 / * * 
 + 	 	 * No block . Completeness really . 
 + 	 	 * / 
 + 	 	 NONE , 
 + 	 	 / * * 
 + 	 	 * Vanilla style block , up to 8 flowing states . May be able to generate new sources . 
 + 	 	 * / 
 + 	 	 VANILLA , 
 + 	 	 / * * 
 + 	 	 * Finite liquid style , uses cellular automata to model flowing behaviour . 
 + 	 	 * / 
 + 	 	 FINITE ; 
 + 	 } 
 + 
 + 	 / * * 
 + 	 * Can this liquid , when placed in a specific configuration , generate new source blocks of the liquid . 
 + 	 * @ return 
 + 	 * / 
 + 	 public boolean willGenerateSources ( ) ; 
 + 
 + 	 / * * 
 + 	 * @ return the distance this liquid will flow if placed in the world . Maximum of 7 levels for vanilla types . 
 + 	 * / 
 + 	 public int getFlowDistance ( ) ; 
 + 
 + 	 / * * 
 + 	 * @ return the RGB rendering for this liquid 
 + 	 * / 
 + 	 public byte [ ] getLiquidRGB ( ) ; 
 + 
 + 	 / * * 
 + 	 * Get the texture file for rendering the liquid 
 + 	 * @ return 
 + 	 * / 
 + 	 public String getLiquidBlockTextureFile ( ) ; 
 + 	 / * * 
 + 	 * Custom properties of the liquid . 
 + 	 * @ return 
 + 	 * / 
 + 	 public NBTTagCompound getLiquidProperties ( ) ; 
 + 
 + } 
 diff - - git a / common / net / minecraftforge / liquids / ILiquid . java b / common / net / minecraftforge / liquids / ILiquid . java 
 index 3d33f3d . . f0efa91 100644 
 - - - a / common / net / minecraftforge / liquids / ILiquid . java 
 + + + b / common / net / minecraftforge / liquids / ILiquid . java 
 @ @ - 1 , 20 + 1 , 35 @ @ 
 - / * * 
 + / * * 
 * Copyright ( c ) SpaceToad , 2011 
 * http : / / www . mod - buildcraft . com 
 - * 
 - * BuildCraft is distributed under the terms of the Minecraft Mod Public 
 + * 
 + * BuildCraft is distributed under the terms of the Minecraft Mod Public 
 * License 1 . 0 , or MMPL . Please check the contents of the license located in 
 * http : / / www . mod - buildcraft . com / MMPL - 1 . 0 . txt 
 * / 
 
 package net . minecraftforge . liquids ; 
 
 + / * * 
 + * Liquids implement this interface 
 + * 
 + * / 
 public interface ILiquid { 
 
 + 	 / * * 
 + 	 * The itemId of the liquid item 
 + 	 * @ return 
 + 	 * / 
 	 public int stillLiquidId ( ) ; 
 
 + 	 / * * 
 + 	 * Is this liquid a metadata based liquid 
 + 	 * @ return 
 + 	 * / 
 	 public boolean isMetaSensitive ( ) ; 
 
 + 	 / * * 
 + 	 * The item metadata of the liquid 
 + 	 * @ return 
 + 	 * / 
 	 public int stillLiquidMeta ( ) ; 
 - 
 }
