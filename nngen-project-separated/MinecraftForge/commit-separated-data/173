BLEU SCORE: 0.023028766869631404

TEST MSG: Better error passing from early to game client launch .
GENERATED MSG: Add a java version detection and nag system for users on Java 7 or below .

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 65165ff . . 1bb587e 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 180 , 7 + 180 , 11 @ @ project ( ' : forge ' ) { <nl> main ' net . minecraftforge . fml . LaunchTesting ' <nl> systemProperties = [ <nl> " org . lwjgl . util . Debug " : " true " , <nl> - " org . lwjgl . util . DebugLoader " : " true " <nl> + " org . lwjgl . util . DebugLoader " : " true " , <nl> + " mc . version " : " $ { MC _ VERSION } " , <nl> + " mcp . version " : " $ { MCP _ VERSION } " , <nl> + " forge . version " : " $ { project . version } " , <nl> + " forge . spec " : " $ { SPEC _ VERSION } " <nl> ] <nl> environment + = [ <nl> target : ' fmldevclient ' , <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 5d52259 . . b21ad69 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 39 , 14 + 39 , 23 @ @ public class ForgeVersion <nl> <nl> private static final String forgeVersion ; <nl> <nl> + private static final String forgeSpec ; <nl> + <nl> static { <nl> String vers = ForgeVersion . class . getPackage ( ) . getImplementationVersion ( ) ; <nl> if ( vers = = null ) { <nl> vers = System . getProperty ( " forge . version " ) ; <nl> } <nl> if ( vers = = null ) throw new RuntimeException ( " Missing forge version , cannot continue " ) ; <nl> + String spec = ForgeVersion . class . getPackage ( ) . getSpecificationVersion ( ) ; <nl> + if ( spec = = null ) { <nl> + spec = System . getProperty ( " forge . spec " ) ; <nl> + } <nl> + if ( spec = = null ) throw new RuntimeException ( " Missing forge spec , cannot continue " ) ; <nl> forgeVersion = vers ; <nl> + forgeSpec = spec ; <nl> LOGGER . info ( CORE , " Found Forge version { } " , forgeVersion ) ; <nl> + LOGGER . info ( CORE , " Found Forge spec { } " , forgeSpec ) ; <nl> } <nl> <nl> public static String getVersion ( ) <nl> @ @ - 64 , 5 + 73 , 9 @ @ public class ForgeVersion <nl> { <nl> return " " ; <nl> } <nl> + <nl> + public static String getSpec ( ) { <nl> + return forgeSpec ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java b / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java <nl> index 37da825 . . 23ae5f8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java <nl> + + + b / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java <nl> @ @ - 21 , 11 + 21 , 10 @ @ package net . minecraftforge . fml ; <nl> <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> - import java . util . Map . Entry ; <nl> + import java . util . Objects ; <nl> import java . util . Optional ; <nl> <nl> import com . google . common . collect . Multimap ; <nl> - import net . minecraft . nbt . INBTBase ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . nbt . NBTTagList ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 65 , 7 + 64 , 7 @ @ public final class FMLWorldPersistenceHook implements WorldPersistenceHooks . Worl <nl> { <nl> final NBTTagCompound mod = new NBTTagCompound ( ) ; <nl> mod . setString ( " ModId " , mi . getModId ( ) ) ; <nl> - mod . setString ( " ModVersion " , mi . getVersion ( ) . getVersionString ( ) ) ; <nl> + mod . setString ( " ModVersion " , MavenVersionStringHelper . artifactVersionToString ( mi . getVersion ( ) ) ) ; <nl> modList . add ( mod ) ; <nl> } ) ; <nl> fmlData . setTag ( " LoadingModList " , modList ) ; <nl> @ @ - 98 , 9 + 97 , 9 @ @ public final class FMLWorldPersistenceHook implements WorldPersistenceHooks . Worl <nl> LOGGER . error ( WORLDPERSISTENCE , " This world was saved with mod { } which appears to be missing , things may not work well " , modId ) ; <nl> continue ; <nl> } <nl> - if ( ! modVersion . equals ( container . get ( ) . getModInfo ( ) . getVersion ( ) . getVersionString ( ) ) ) <nl> + if ( ! Objects . equals ( modVersion , MavenVersionStringHelper . artifactVersionToString ( container . get ( ) . getModInfo ( ) . getVersion ( ) ) ) ) <nl> { <nl> - LOGGER . info ( WORLDPERSISTENCE , " This world was saved with mod { } version { } and it is now at version { } , things may not work well " , modId , modVersion , container . get ( ) . getModInfo ( ) . getVersion ( ) . getVersionString ( ) ) ; <nl> + LOGGER . info ( WORLDPERSISTENCE , " This world was saved with mod { } version { } and it is now at version { } , things may not work well " , modId , modVersion , MavenVersionStringHelper . artifactVersionToString ( container . get ( ) . getModInfo ( ) . getVersion ( ) ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> index 5819365 . . 1e1bfe4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ public class ForgeI18n { <nl> customFactories . put ( " lower " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toLowerCase ( ( String ) objectToParse ) ) ) ) ; <nl> customFactories . put ( " upper " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toUpperCase ( ( String ) objectToParse ) ) ) ) ; <nl> customFactories . put ( " exc " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > parseException ( formatString , stringBuffer , objectToParse ) ) ) ; <nl> + customFactories . put ( " vr " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( ( stringBuffer , o ) - > MavenVersionStringHelper . parseVersionRange ( formatString , stringBuffer , o ) ) ) ) ; <nl> } <nl> <nl> private static void parseException ( final String formatString , final StringBuffer stringBuffer , final Object objectToParse ) { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / MavenVersionStringHelper . java b / src / main / java / net / minecraftforge / fml / MavenVersionStringHelper . java <nl> new file mode 100644 <nl> index 0000000 . . 8b3f0cc <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / MavenVersionStringHelper . java <nl> @ @ - 0 , 0 + 1 , 77 @ @ <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import org . apache . maven . artifact . versioning . ArtifactVersion ; <nl> + import org . apache . maven . artifact . versioning . Restriction ; <nl> + import org . apache . maven . artifact . versioning . VersionRange ; <nl> + <nl> + import java . util . Objects ; <nl> + import java . util . stream . Collectors ; <nl> + <nl> + public class MavenVersionStringHelper { <nl> + public static String artifactVersionToString ( final ArtifactVersion artifactVersion ) { <nl> + return artifactVersion . toString ( ) ; <nl> + } <nl> + <nl> + public static String versionRangeToString ( final VersionRange range ) { <nl> + return range . getRestrictions ( ) . stream ( ) . map ( MavenVersionStringHelper : : restrictionToString ) . collect ( Collectors . joining ( " , " ) ) ; <nl> + } <nl> + <nl> + public static String restrictionToString ( final Restriction restriction ) { <nl> + if ( restriction . getLowerBound ( ) = = null & & restriction . getUpperBound ( ) = = null ) <nl> + { <nl> + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . any " ) ; <nl> + } <nl> + else if ( restriction . getLowerBound ( ) ! = null & & restriction . getUpperBound ( ) ! = null ) <nl> + { <nl> + if ( Objects . equals ( artifactVersionToString ( restriction . getLowerBound ( ) ) , artifactVersionToString ( restriction . getUpperBound ( ) ) ) ) <nl> + { <nl> + return artifactVersionToString ( restriction . getLowerBound ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + if ( restriction . isLowerBoundInclusive ( ) & & restriction . isUpperBoundInclusive ( ) ) <nl> + { <nl> + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . inclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; <nl> + } <nl> + else if ( restriction . isLowerBoundInclusive ( ) ) <nl> + { <nl> + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . upperexclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; <nl> + } <nl> + else if ( restriction . isUpperBoundInclusive ( ) ) <nl> + { <nl> + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . lowerexclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . exclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + else if ( restriction . getLowerBound ( ) ! = null ) <nl> + { <nl> + if ( restriction . isLowerBoundInclusive ( ) ) <nl> + { <nl> + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . lower . inclusive " , restriction . getLowerBound ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . lower . exclusive " , restriction . getLowerBound ( ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + if ( restriction . isUpperBoundInclusive ( ) ) <nl> + { <nl> + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . upper . inclusive " , restriction . getUpperBound ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . upper . exclusive " , restriction . getUpperBound ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static void parseVersionRange ( final String formatString , final StringBuffer stringBuffer , final Object range ) { <nl> + stringBuffer . append ( versionRangeToString ( ( VersionRange ) range ) ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> index 4856d9a . . 6dcc4b8 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java <nl> @ @ - 60 , 7 + 60 , 7 @ @ public class ModLoader <nl> this . loadingModList = FMLLoader . getLoadingModList ( ) ; <nl> this . modClassLoader = new ModLoadingClassLoader ( this . launchClassLoader ) ; <nl> this . loadingExceptions = FMLLoader . getLoadingModList ( ) . <nl> - getErrors ( ) . stream ( ) . map ( ModLoadingException : : fromEarlyException ) . collect ( Collectors . toList ( ) ) ; <nl> + getErrors ( ) . stream ( ) . flatMap ( ModLoadingException : : fromEarlyException ) . collect ( Collectors . toList ( ) ) ; <nl> Thread . currentThread ( ) . setContextClassLoader ( this . modClassLoader ) ; <nl> } <nl> <nl> @ @ - 75 , 9 + 75 , 6 @ @ public class ModLoader <nl> } <nl> <nl> public void loadMods ( ) { <nl> - if ( ! this . loadingExceptions . isEmpty ( ) ) { <nl> - throw new LoadingFailedException ( loadingExceptions ) ; <nl> - } <nl> final ModList modList = ModList . of ( loadingModList . getModFiles ( ) . stream ( ) . map ( ModFileInfo : : getFile ) . collect ( Collectors . toList ( ) ) , loadingModList . getMods ( ) ) ; <nl> ModContainer forgeModContainer ; <nl> try <nl> @ @ - 88 , 9 + 85 , 12 @ @ public class ModLoader <nl> catch ( ClassNotFoundException | IllegalAccessException | NoSuchMethodException | InstantiationException | InvocationTargetException e ) <nl> { <nl> LOGGER . error ( CORE , " Unable to load the Forge Mod Container " , e ) ; <nl> - loadingExceptions . add ( new ModLoadingException ( DefaultModInfos . forgeModInfo , ModLoadingStage . CONSTRUCT , " fml . modloading . failedtoloadforge " , e ) ) ; <nl> + loadingExceptions . add ( new ModLoadingException ( DefaultModInfos . forgeModInfo , ModLoadingStage . VALIDATE , " fml . modloading . failedtoloadforge " , e ) ) ; <nl> forgeModContainer = null ; <nl> } <nl> + if ( ! this . loadingExceptions . isEmpty ( ) ) { <nl> + throw new LoadingFailedException ( loadingExceptions ) ; <nl> + } <nl> final Stream < ModContainer > modContainerStream = loadingModList . getModFiles ( ) . stream ( ) . <nl> map ( ModFileInfo : : getFile ) . <nl> map ( mf - > buildMods ( mf , modClassLoader ) ) . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingException . java b / src / main / java / net / minecraftforge / fml / ModLoadingException . java <nl> index 9b667aa . . 7ebbdfa 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoadingException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoadingException . java <nl> @ @ - 59 , 8 + 59 , 8 @ @ public class ModLoadingException extends RuntimeException <nl> this . context = Arrays . asList ( context ) ; <nl> } <nl> <nl> - static ModLoadingException fromEarlyException ( final EarlyLoadingException e ) { <nl> - return new ModLoadingException ( null , ModLoadingStage . VALIDATE , e . getI18NMessage ( ) , e , e . getContext ( ) . toArray ( ) ) ; <nl> + static Stream < ModLoadingException > fromEarlyException ( final EarlyLoadingException e ) { <nl> + return e . getAllData ( ) . stream ( ) . map ( ed - > new ModLoadingException ( null , ModLoadingStage . VALIDATE , ed . getI18message ( ) , e . getCause ( ) , ed . getArgs ( ) ) ) ; <nl> } <nl> <nl> public String getI18NMessage ( ) { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java <nl> index b19bf47 . . 63c0024 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java <nl> @ @ - 37 , 14 + 37 , 10 @ @ import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . text . ITextComponent ; <nl> import net . minecraft . util . text . TextComponentString ; <nl> import net . minecraftforge . common . ForgeHooks ; <nl> - import net . minecraftforge . fml . ForgeI18n ; <nl> - import net . minecraftforge . fml . ModContainer ; <nl> - import net . minecraftforge . fml . ModList ; <nl> - import net . minecraftforge . fml . VersionChecker ; <nl> + import net . minecraftforge . fml . * ; <nl> import net . minecraftforge . fml . client . ConfigGuiHandler ; <nl> import net . minecraftforge . fml . client . ResourcePackLoader ; <nl> import net . minecraftforge . fml . language . IModInfo ; <nl> - import net . minecraftforge . fml . loading . MavenVersionAdapter ; <nl> import net . minecraftforge . fml . loading . StringUtils ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> @ @ - 291 , 7 + 287 , 7 @ @ public class GuiModList extends GuiScreen <nl> for ( ModInfo mod : mods ) <nl> { <nl> listWidth = Math . max ( listWidth , getFontRenderer ( ) . getStringWidth ( mod . getDisplayName ( ) ) + 10 ) ; <nl> - listWidth = Math . max ( listWidth , getFontRenderer ( ) . getStringWidth ( MavenVersionAdapter . artifactVersionToString ( mod . getVersion ( ) ) ) + 5 ) ; <nl> + listWidth = Math . max ( listWidth , getFontRenderer ( ) . getStringWidth ( MavenVersionStringHelper . artifactVersionToString ( mod . getVersion ( ) ) ) + 5 ) ; <nl> } <nl> listWidth = Math . min ( listWidth , 150 ) ; <nl> listWidth + = listWidth % numButtons ! = 0 ? ( numButtons - listWidth % numButtons ) : 0 ; <nl> @ @ - 455 , 7 + 451 , 7 @ @ public class GuiModList extends GuiScreen <nl> } ) . orElse ( Pair . of ( null , new Dimension ( 0 , 0 ) ) ) ; <nl> <nl> lines . add ( selectedMod . getDisplayName ( ) ) ; <nl> - lines . add ( ForgeI18n . parseMessage ( " fml . menu . mods . info . version " , MavenVersionAdapter . artifactVersionToString ( selectedMod . getVersion ( ) ) ) ) ; <nl> + lines . add ( ForgeI18n . parseMessage ( " fml . menu . mods . info . version " , MavenVersionStringHelper . artifactVersionToString ( selectedMod . getVersion ( ) ) ) ) ; <nl> lines . add ( ForgeI18n . parseMessage ( " fml . menu . mods . info . idstate " , selectedMod . getModId ( ) , ModList . get ( ) . getModContainerById ( selectedMod . getModId ( ) ) . <nl> map ( ModContainer : : getCurrentState ) . map ( Object : : toString ) . orElse ( " NONE " ) ) ) ; <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / gui / GuiSlotModList . java b / src / main / java / net / minecraftforge / fml / client / gui / GuiSlotModList . java <nl> index db92165 . . b39ae4e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / gui / GuiSlotModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / gui / GuiSlotModList . java <nl> @ @ - 19 , 16 + 19 , 14 @ @ <nl> <nl> package net . minecraftforge . fml . client . gui ; <nl> <nl> - import java . util . List ; <nl> - <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . gui . FontRenderer ; <nl> import net . minecraft . client . gui . Gui ; <nl> import net . minecraft . client . gui . GuiListExtended ; <nl> import net . minecraft . client . renderer . GlStateManager ; <nl> - import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . fml . MavenVersionStringHelper ; <nl> import net . minecraftforge . fml . VersionChecker ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> <nl> @ @ - 97 , 7 + 95 , 7 @ @ public class GuiSlotModList extends GuiListExtended < GuiSlotModList . ModEntry > <nl> int top = this . getY ( ) ; <nl> int left = this . getX ( ) ; <nl> String name = stripControlCodes ( modInfo . getDisplayName ( ) ) ; <nl> - String version = stripControlCodes ( modInfo . getVersion ( ) . getVersionString ( ) ) ; <nl> + String version = stripControlCodes ( MavenVersionStringHelper . artifactVersionToString ( modInfo . getVersion ( ) ) ) ; <nl> VersionChecker . CheckResult vercheck = VersionChecker . getResult ( modInfo ) ; <nl> FontRenderer font = this . parent . getFontRenderer ( ) ; <nl> font . drawString ( font . trimStringToWidth ( name , listWidth ) , left + 3 , top + 2 , 0xFFFFFF ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java b / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java <nl> index cf12b58 . . 874edff 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package net . minecraftforge . fml . common . toposort ; <nl> <nl> import com . google . common . collect . Sets ; <nl> + import net . minecraftforge . fml . loading . EarlyLoadingException ; <nl> import org . apache . logging . log4j . message . Message ; <nl> import org . apache . logging . log4j . util . StringBuilderFormattable ; <nl> <nl> @ @ - 35 , 6 + 36 , 8 @ @ import java . util . NoSuchElementException ; <nl> import java . util . Set ; <nl> import java . util . SortedSet ; <nl> import java . util . TreeSet ; <nl> + import java . util . function . Function ; <nl> + import java . util . stream . Collectors ; <nl> <nl> / * * <nl> * Topological sort for mod loading <nl> @ @ - 250 , 6 + 253 , 13 @ @ public class TopologicalSort <nl> buffer . append ( " Explored node set : { } \ n " ) . append ( expandedNodes ) ; <nl> buffer . append ( " Likely cycle is in : { } \ n " ) . append ( Sets . difference ( visitedNodes , expandedNodes ) ) ; <nl> } <nl> + <nl> + public List < EarlyLoadingException . ExceptionData > toExceptionData ( Function < T , String > nodeMapper ) { <nl> + return Collections . singletonList ( <nl> + new EarlyLoadingException . ExceptionData ( " fml . messages . cycleproblem " , <nl> + nodeMapper . apply ( node ) , <nl> + visitedNodes . stream ( ) . map ( nodeMapper ) . collect ( Collectors . joining ( " , " ) ) ) ) ; <nl> + } <nl> } <nl> <nl> public < T > TopoSortException ( TopoSortExceptionData < T > data ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / EarlyLoadingException . java b / src / main / java / net / minecraftforge / fml / loading / EarlyLoadingException . java <nl> index 560ecd3 . . ca1ce90 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / EarlyLoadingException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / EarlyLoadingException . java <nl> @ @ - 8 , 20 + 8 , 34 @ @ import java . util . List ; <nl> * or server . <nl> * / <nl> public class EarlyLoadingException extends RuntimeException { <nl> - private final String i18nMessage ; <nl> - private final List < Object > context ; <nl> + public static class ExceptionData { <nl> <nl> - public EarlyLoadingException ( final String message , final String i18nMessage , final Throwable originalException , Object . . . context ) { <nl> - super ( message , originalException ) ; <nl> - this . i18nMessage = i18nMessage ; <nl> - this . context = Arrays . asList ( context ) ; <nl> + <nl> + private final String i18message ; <nl> + private final Object [ ] args ; <nl> + public ExceptionData ( final String message , Object . . . args ) { <nl> + this . i18message = message ; <nl> + this . args = args ; <nl> + } <nl> + <nl> + public String getI18message ( ) { <nl> + return i18message ; <nl> + } <nl> + <nl> + public Object [ ] getArgs ( ) { <nl> + return args ; <nl> + } <nl> } <nl> + private final List < ExceptionData > errorMessages ; <nl> <nl> - public String getI18NMessage ( ) { <nl> - return this . i18nMessage ; <nl> + public List < ExceptionData > getAllData ( ) { <nl> + return errorMessages ; <nl> } <nl> <nl> - public List < Object > getContext ( ) { <nl> - return this . context ; <nl> + EarlyLoadingException ( final String message , final Throwable originalException , List < ExceptionData > errorMessages ) { <nl> + super ( message , originalException ) ; <nl> + this . errorMessages = errorMessages ; <nl> } <nl> + <nl> + <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index c613889 . . 29cdcbb 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . logging . log4j . Logger ; <nl> import org . apache . logging . log4j . core . config . Configurator ; <nl> <nl> import java . net . URISyntaxException ; <nl> + import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> @ @ - 51 , 14 + 52 , 20 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> " net . minecraftforge . fml . common . versioning . " <nl> ) ; <nl> static { <nl> + Path forgePath1 = null ; <nl> + Path patchedBinariesPath1 = null ; <nl> + Path srgMcPath1 = null ; <nl> try { <nl> - forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - patchedBinariesPath = forgePath . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; <nl> - Path libs = forgePath . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; <nl> - srgMcPath = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; <nl> + forgePath1 = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> + patchedBinariesPath1 = forgePath1 . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; <nl> + Path libs = forgePath1 . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; <nl> + srgMcPath1 = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; <nl> } catch ( URISyntaxException e ) { <nl> - throw new RuntimeException ( " Unable to locate myself ! " ) ; <nl> + <nl> } <nl> + forgePath = forgePath1 ; <nl> + patchedBinariesPath = patchedBinariesPath1 ; <nl> + srgMcPath = srgMcPath1 ; <nl> } <nl> @ Override <nl> public String name ( ) <nl> @ @ - 69 , 9 + 76 , 12 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - LOGGER . info ( " Found SRG MC at { } " , srgMcPath . toString ( ) ) ; <nl> - LOGGER . info ( " Found Forge patches at { } " , patchedBinariesPath . toString ( ) ) ; <nl> - LOGGER . info ( " Found Forge at { } " , forgePath . toString ( ) ) ; <nl> + LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; <nl> + LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; <nl> + LOGGER . info ( " Forge at { } is { } " , forgePath . toString ( ) , Files . exists ( forgePath ) ? " present " : " missing " ) ; <nl> + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( forgePath ) ) ) { <nl> + throw new RuntimeException ( " Failed to find patched jars " ) ; <nl> + } <nl> return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java b / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java <nl> index 220b278 . . 35d7058 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java <nl> @ @ - 79 , 7 + 79 , 7 @ @ public class LanguageLoadingProvider <nl> final Package pkg = lp . getClass ( ) . getPackage ( ) ; <nl> String implementationVersion = pkg . getImplementationVersion ( ) ; <nl> if ( implementationVersion = = null ) { <nl> - implementationVersion = ForgeVersion . getVersion ( ) ; <nl> + implementationVersion = ForgeVersion . getSpec ( ) ; <nl> } <nl> LOGGER . debug ( CORE , " Found system classpath language provider { } , version { } " , lp . name ( ) , implementationVersion ) ; <nl> languageProviderMap . put ( lp . name ( ) , new ModLanguageWrapper ( lp , new DefaultArtifactVersion ( implementationVersion ) ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / MavenVersionAdapter . java b / src / main / java / net / minecraftforge / fml / loading / MavenVersionAdapter . java <nl> index 7947e5b . . 0c6a9fc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / MavenVersionAdapter . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / MavenVersionAdapter . java <nl> @ @ - 1 , 16 + 1 , 10 @ @ <nl> package net . minecraftforge . fml . loading ; <nl> <nl> - import net . minecraftforge . fml . ForgeI18n ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> - import org . apache . maven . artifact . versioning . ArtifactVersion ; <nl> import org . apache . maven . artifact . versioning . InvalidVersionSpecificationException ; <nl> - import org . apache . maven . artifact . versioning . Restriction ; <nl> import org . apache . maven . artifact . versioning . VersionRange ; <nl> <nl> - import java . util . Objects ; <nl> - import java . util . stream . Collectors ; <nl> - <nl> import static net . minecraftforge . fml . Logging . CORE ; <nl> <nl> public final class MavenVersionAdapter { <nl> @ @ - 25 , 66 + 19 , 5 @ @ public final class MavenVersionAdapter { <nl> throw new RuntimeException ( " Failed to parse spec " , e ) ; <nl> } <nl> } <nl> - <nl> - public static String artifactVersionToString ( final ArtifactVersion artifactVersion ) { <nl> - return artifactVersion . toString ( ) ; <nl> - } <nl> <nl> - public static String versionRangeToString ( final VersionRange range ) { <nl> - return range . getRestrictions ( ) . stream ( ) . map ( MavenVersionAdapter : : restrictionToString ) . collect ( Collectors . joining ( " , " ) ) ; <nl> - } <nl> - public static String restrictionToString ( final Restriction restriction ) { <nl> - if ( restriction . getLowerBound ( ) = = null & & restriction . getUpperBound ( ) = = null ) <nl> - { <nl> - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . any " ) ; <nl> - } <nl> - else if ( restriction . getLowerBound ( ) ! = null & & restriction . getUpperBound ( ) ! = null ) <nl> - { <nl> - if ( Objects . equals ( artifactVersionToString ( restriction . getLowerBound ( ) ) , artifactVersionToString ( restriction . getUpperBound ( ) ) ) ) <nl> - { <nl> - return artifactVersionToString ( restriction . getLowerBound ( ) ) ; <nl> - } <nl> - else <nl> - { <nl> - if ( restriction . isLowerBoundInclusive ( ) & & restriction . isUpperBoundInclusive ( ) ) <nl> - { <nl> - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . inclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; <nl> - } <nl> - else if ( restriction . isLowerBoundInclusive ( ) ) <nl> - { <nl> - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . upperexclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; <nl> - } <nl> - else if ( restriction . isUpperBoundInclusive ( ) ) <nl> - { <nl> - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . lowerexclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; <nl> - } <nl> - else <nl> - { <nl> - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . exclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; <nl> - } <nl> - } <nl> - } <nl> - else if ( restriction . getLowerBound ( ) ! = null ) <nl> - { <nl> - if ( restriction . isLowerBoundInclusive ( ) ) <nl> - { <nl> - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . lower . inclusive " , restriction . getLowerBound ( ) ) ; <nl> - } <nl> - else <nl> - { <nl> - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . lower . exclusive " , restriction . getLowerBound ( ) ) ; <nl> - } <nl> - } <nl> - else <nl> - { <nl> - if ( restriction . isUpperBoundInclusive ( ) ) <nl> - { <nl> - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . upper . inclusive " , restriction . getUpperBound ( ) ) ; <nl> - } <nl> - else <nl> - { <nl> - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . upper . exclusive " , restriction . getUpperBound ( ) ) ; <nl> - } <nl> - } <nl> - } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / ModSorter . java b / src / main / java / net / minecraftforge / fml / loading / ModSorter . java <nl> index 47b8e4b . . 42f4a04 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / ModSorter . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / ModSorter . java <nl> @ @ - 28 , 11 + 28 , 9 @ @ import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> import org . apache . maven . artifact . versioning . ArtifactVersion ; <nl> + import org . apache . maven . artifact . versioning . DefaultArtifactVersion ; <nl> <nl> - import java . util . Collection ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - import java . util . Set ; <nl> + import java . util . * ; <nl> import java . util . function . Function ; <nl> import java . util . function . Supplier ; <nl> import java . util . stream . Collectors ; <nl> @ @ - 62 , 6 + 60 , 7 @ @ public class ModSorter <nl> ms . sort ( ) ; <nl> } catch ( EarlyLoadingException ele ) { <nl> earlyLoadingException = ele ; <nl> + ms . sortedList = Collections . emptyList ( ) ; <nl> } <nl> return LoadingModList . of ( ms . modFiles , ms . sortedList , earlyLoadingException ) ; <nl> } <nl> @ @ - 70 , 7 + 69 , 8 @ @ public class ModSorter <nl> { <nl> final TopologicalSort . DirectedGraph < Supplier < ModFileInfo > > topoGraph = new TopologicalSort . DirectedGraph < > ( ) ; <nl> modFiles . stream ( ) . map ( ModFile : : getModFileInfo ) . map ( ModFileInfo . class : : cast ) . forEach ( mi - > topoGraph . addNode ( ( ) - > mi ) ) ; <nl> - modFiles . stream ( ) . map ( ModFile : : getModInfos ) . flatMap ( Collection : : stream ) . map ( IModInfo : : getDependencies ) . flatMap ( Collection : : stream ) . <nl> + modFiles . stream ( ) . map ( ModFile : : getModInfos ) . flatMap ( Collection : : stream ) . <nl> + map ( IModInfo : : getDependencies ) . flatMap ( Collection : : stream ) . <nl> forEach ( dep - > addDependency ( topoGraph , dep ) ) ; <nl> final List < Supplier < ModFileInfo > > sorted ; <nl> try <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class ModSorter <nl> { <nl> TopologicalSort . TopoSortException . TopoSortExceptionData < Supplier < ModInfo > > data = e . getData ( ) ; <nl> LOGGER . error ( LOADING , ( ) - > data ) ; <nl> - throw new EarlyLoadingException ( " Sorting error " , " fml . modloading . sortingerror " , e , e . getData ( ) ) ; <nl> + throw new EarlyLoadingException ( " Sorting error " , e , data . toExceptionData ( mi - > mi . get ( ) . getModId ( ) ) ) ; <nl> } <nl> this . sortedList = sorted . stream ( ) . map ( Supplier : : get ) . map ( ModFileInfo : : getMods ) . <nl> flatMap ( Collection : : stream ) . map ( ModInfo . class : : cast ) . collect ( Collectors . toList ( ) ) ; <nl> @ @ - 111 , 7 + 111 , 10 @ @ public class ModSorter <nl> final List < Map . Entry < String , List < ModInfo > > > dupedMods = modIds . entrySet ( ) . stream ( ) . filter ( e - > e . getValue ( ) . size ( ) > 1 ) . collect ( Collectors . toList ( ) ) ; <nl> <nl> if ( ! dupedMods . isEmpty ( ) ) { <nl> - throw new EarlyLoadingException ( " Duplicate mods found " , " fml . modloading . dupesfound " , null , dupedMods ) ; <nl> + final List < EarlyLoadingException . ExceptionData > duplicateModErrors = dupedMods . stream ( ) . <nl> + map ( dm - > new EarlyLoadingException . ExceptionData ( " fml . modloading . dupedmod " , dm . getValue ( ) . get ( 0 ) ) ) . <nl> + collect ( Collectors . toList ( ) ) ; <nl> + throw new EarlyLoadingException ( " Duplicate mods found " , null , duplicateModErrors ) ; <nl> } <nl> <nl> modIdNameLookup = modIds . entrySet ( ) . stream ( ) . collect ( Collectors . toMap ( Map . Entry : : getKey , e - > e . getValue ( ) . get ( 0 ) ) ) ; <nl> @ @ - 131 , 7 + 134 , 12 @ @ public class ModSorter <nl> LOGGER . debug ( LOADING , " Found { } mandatory mod requirements missing " , missingVersions . size ( ) ) ; <nl> <nl> if ( ! missingVersions . isEmpty ( ) ) { <nl> - throw new EarlyLoadingException ( " Missing mods " , " fml . modloading . missingmods " , null , missingVersions ) ; <nl> + final List < EarlyLoadingException . ExceptionData > exceptionData = missingVersions . stream ( ) . map ( mv - > <nl> + new EarlyLoadingException . ExceptionData ( " fml . modloading . missingdependency " , mv . getModId ( ) , <nl> + mv . getOwner ( ) . getModId ( ) , mv . getVersionRange ( ) , <nl> + modVersions . containsKey ( mv . getModId ( ) ) ? modVersions . get ( mv . getModId ( ) ) : " NONE " ) ) . <nl> + collect ( Collectors . toList ( ) ) ; <nl> + throw new EarlyLoadingException ( " Missing mods " , null , exceptionData ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json <nl> index 4f81ed5 . . 174e43b 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ us . json <nl> + + + b / src / main / resources / assets / forge / lang / en _ us . json <nl> @ @ - 23 , 6 + 23 , 7 @ @ <nl> " fml . modloading . failedtoloadmod " : " { 0 , modinfo , name } ( { 0 , modinfo , id } ) has failed to load correctly \ n \ u00a77 { 2 , exc , msg } " , <nl> " fml . modloading . errorduringevent " : " { 0 , modinfo , name } ( { 0 , modinfo , id } ) encountered an error during the { 1 , lower } event phase \ n \ u00a77 { 2 , exc , msg } " , <nl> " fml . modloading . failedtoloadforge " : " Failed to load forge " , <nl> + " fml . modloading . missingdependency " : " Mod { 4 } has missing dependency { 3 } \ n \ u00a77Want { 5 , vr } , have { 6 } " , <nl> <nl> " fml . messages . version . restriction . any " : " any " , <nl> " fml . messages . version . restriction . lower . inclusive " : " { 0 } or above " ,
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> index 4ffa6d8 . . 22dec2e 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 38 , 7 + 38 , 16 @ @ <nl> if ( p _ 146284 _ 1 _ . field _ 146127 _ k = = 11 ) <nl> { <nl> this . field _ 146297 _ k . func _ 71371 _ a ( " Demo _ World " , " Demo _ World " , DemoWorldServer . field _ 73071 _ a ) ; <nl> - @ @ - 512 , 7 + 521 , 16 @ @ <nl> + @ @ - 493 , 6 + 502 , 8 @ @ <nl> + this . func _ 73729 _ b ( j + 155 , k + 0 , 0 , 45 , 155 , 44 ) ; <nl> + } <nl> + <nl> + + this . field _ 73975 _ c = net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m , this . field _ 73975 _ c ) ; <nl> + + <nl> + GlStateManager . func _ 179094 _ E ( ) ; <nl> + GlStateManager . func _ 179109 _ b ( ( float ) ( this . field _ 146294 _ l / 2 + 90 ) , 70 . 0F , 0 . 0F ) ; <nl> + GlStateManager . func _ 179114 _ b ( - 20 . 0F , 0 . 0F , 0 . 0F , 1 . 0F ) ; <nl> + @ @ - 512 , 7 + 523 , 15 @ @ <nl> s = s + ( " release " . equalsIgnoreCase ( this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ? " " : " / " + this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ; <nl> } <nl> <nl> @ @ - 52 , 11 + 61 , 10 @ @ <nl> + this . func _ 73731 _ b ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + brdline * ( this . field _ 146289 _ q . field _ 78288 _ b + 1 ) ) , 16777215 ) ; <nl> + } <nl> + } <nl> - + net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m ) ; <nl> String s1 = " Copyright Mojang AB . Do not distribute ! " ; <nl> this . func _ 73731 _ b ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . func _ 78256 _ a ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; <nl> <nl> - @ @ - 529 , 6 + 547 , 7 @ @ <nl> + @ @ - 529 , 6 + 548 , 7 @ @ <nl> { <nl> this . field _ 183503 _ M . func _ 73863 _ a ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ , p _ 73863 _ 3 _ ) ; <nl> } <nl> @ @ - 64 , 3 + 72 , 12 @ @ <nl> } <nl> <nl> protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException <nl> + @ @ - 549 , 6 + 569 , 8 @ @ <nl> + { <nl> + this . field _ 183503 _ M . func _ 73864 _ a ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ ) ; <nl> + } <nl> + + <nl> + + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; <nl> + } <nl> + <nl> + public void func _ 146281 _ b ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 9f628dd . . a0b6050 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import static org . lwjgl . opengl . GL20 . * ; <nl> <nl> import java . nio . ByteBuffer ; <nl> import java . nio . FloatBuffer ; <nl> + import java . util . Collections ; <nl> import java . util . Map ; <nl> <nl> import javax . vecmath . Matrix3f ; <nl> @ @ - 89 , 8 + 90 , 12 @ @ import net . minecraftforge . common . model . IModelPart ; <nl> import net . minecraftforge . common . model . ITransformation ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> + import net . minecraftforge . fml . client . GuiJava8Error ; <nl> import net . minecraftforge . fml . client . registry . ClientRegistry ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Java8VersionException ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . lwjgl . BufferUtils ; <nl> @ @ - 266 , 7 + 271 , 8 @ @ public class ForgeHooksClient <nl> / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; <nl> } <nl> <nl> - public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) <nl> + private static int updatescrollcounter = 0 ; <nl> + public static String renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height , String splashText ) <nl> { <nl> Status status = ForgeVersion . getStatus ( ) ; <nl> if ( status = = BETA | | status = = BETA _ OUTDATED ) <nl> @ @ - 278 , 6 + 284 , 17 @ @ public class ForgeHooksClient <nl> gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> } <nl> <nl> + if ( ! Loader . instance ( ) . java8 ) <nl> + { <nl> + String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + line = I18n . format ( " fml . messages . java8warning . 2 " ) ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; <nl> + updatescrollcounter + = 1 ; <nl> + updatescrollcounter % = 100 ; <nl> + } <nl> + <nl> String line = null ; <nl> switch ( status ) <nl> { <nl> @ @ - 294 , 6 + 311 , 24 @ @ public class ForgeHooksClient <nl> / / if we have a line , render it in the bottom right , above Mojang ' s copyright line <nl> gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> } <nl> + <nl> + return splashText ; <nl> + } <nl> + <nl> + public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) <nl> + { <nl> + if ( ! Loader . instance ( ) . java8 ) <nl> + { <nl> + if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) <nl> + { <nl> + int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; <nl> + w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; <nl> + if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) <nl> + { <nl> + FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> + } <nl> + } <nl> + } <nl> } <nl> <nl> public static ISound playSound ( SoundManager manager , ISound sound ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index d4a61a4 . . b18562c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> + import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 74 , 6 + 75 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean defaultHasSpawnFuzz = true ; <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> public static boolean replaceVanillaBucketModel = true ; <nl> + public static long java8Reminder = 0 ; <nl> <nl> private static Configuration config ; <nl> private static ForgeModContainer INSTANCE ; <nl> @ @ - 259 , 6 + 261 , 11 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> replaceVanillaBucketModel = prop . getBoolean ( Boolean . FALSE ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> + prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder , <nl> + " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; <nl> + java8Reminder = prop . getLong ( java8Reminder ) ; <nl> + propOrder . add ( prop . getName ( ) ) ; <nl> + <nl> config . setCategoryPropertyOrder ( CATEGORY _ CLIENT , propOrder ) ; <nl> <nl> if ( config . hasChanged ( ) ) <nl> @ @ - 267 , 6 + 274 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> } <nl> } <nl> <nl> + public static void updateNag ( ) <nl> + { <nl> + Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; <nl> + prop . set ( ( new Date ( ) ) . getTime ( ) ) ; <nl> + config . save ( ) ; <nl> + } <nl> + <nl> / * * <nl> * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . <nl> * This implementation uses the optional configID string to handle multiple Configurations using one event handler . <nl> diff - - git a / src / main / java / net / minecraftforge / common / config / Property . java b / src / main / java / net / minecraftforge / common / config / Property . java <nl> index db85afe . . d42bbad 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / config / Property . java <nl> + + + b / src / main / java / net / minecraftforge / common / config / Property . java <nl> @ @ - 680 , 14 + 680 , 7 @ @ public class Property <nl> * / <nl> public int getInt ( ) <nl> { <nl> - try <nl> - { <nl> - return Integer . parseInt ( value ) ; <nl> - } <nl> - catch ( NumberFormatException e ) <nl> - { <nl> - return Integer . parseInt ( defaultValue ) ; <nl> - } <nl> + return getInt ( Integer . parseInt ( defaultValue ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 728 , 6 + 721 , 54 @ @ public class Property <nl> } <nl> <nl> / * * <nl> + * Returns the value in this property as a long , <nl> + * if the value is not a valid long , it will return the initially provided default . <nl> + * <nl> + * @ return The value <nl> + * / <nl> + public long getLong ( ) <nl> + { <nl> + return getLong ( Long . parseLong ( defaultValue ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the value in this property as a long , <nl> + * if the value is not a valid long , it will return the <nl> + * provided default . <nl> + * <nl> + * @ param _ default The default to provide if the current value is not a validlong <nl> + * @ return The value <nl> + * / <nl> + public long getLong ( long _ default ) <nl> + { <nl> + try <nl> + { <nl> + return Long . parseLong ( value ) ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + return _ default ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Checks if the current value stored in this property can be converted to a long . <nl> + * @ return True if the type of the Property is an Long <nl> + * / <nl> + public boolean isLongValue ( ) <nl> + { <nl> + try <nl> + { <nl> + Long . parseLong ( value ) ; <nl> + return true ; <nl> + } <nl> + catch ( NumberFormatException e ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * Returns the value in this property as a boolean , <nl> * if the value is not a valid boolean , it will return the <nl> * provided default . <nl> @ @ - 1148 , 6 + 1189 , 7 @ @ public class Property <nl> this . setValues ( values ) ; <nl> } <nl> public void set ( int value ) { set ( Integer . toString ( value ) ) ; } <nl> + public void set ( long value ) { set ( Long . toString ( value ) ) ; } <nl> public void set ( boolean value ) { set ( Boolean . toString ( value ) ) ; } <nl> public void set ( double value ) { set ( Double . toString ( value ) ) ; } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 19e8d0b . . 87019d1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import java . lang . ref . WeakReference ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> + import java . util . Date ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> @ @ - 69 , 6 + 70 , 7 @ @ import net . minecraft . util . StringUtils ; <nl> import net . minecraft . world . WorldSettings ; <nl> import net . minecraft . world . storage . SaveFormatComparator ; <nl> import net . minecraft . world . storage . SaveFormatOld ; <nl> + import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . fml . client . registry . RenderingRegistry ; <nl> import net . minecraftforge . fml . common . DummyModContainer ; <nl> import net . minecraftforge . fml . common . DuplicateModsFoundException ; <nl> @ @ - 76 , 6 + 78 , 7 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLContainerHolder ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . IFMLSidedHandler ; <nl> + import net . minecraftforge . fml . common . Java8VersionException ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderException ; <nl> import net . minecraftforge . fml . common . MetadataCollection ; <nl> @ @ - 158 , 6 + 161 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> <nl> private boolean loading = true ; <nl> <nl> + private Java8VersionException j8onlymods ; <nl> + <nl> private WrongMinecraftVersionException wrongMC ; <nl> <nl> private CustomModLoadingErrorDisplayException customError ; <nl> @ @ - 212 , 6 + 217 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> dupesFound = dupes ; <nl> } <nl> + catch ( Java8VersionException j8mods ) <nl> + { <nl> + j8onlymods = j8mods ; <nl> + } <nl> catch ( MissingModsException missing ) <nl> { <nl> modsMissing = missing ; <nl> @ @ - 297 , 7 + 306 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> * / <nl> public void finishMinecraftLoading ( ) <nl> { <nl> - if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null ) <nl> + if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null ) <nl> { <nl> SplashProgress . finish ( ) ; <nl> return ; <nl> @ @ - 344 , 6 + 353 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> loading = false ; <nl> client . gameSettings . loadOptions ( ) ; / / Reload options to load any mod added keybindings . <nl> + Loader . instance ( ) . loadingComplete ( ) ; <nl> + SplashProgress . finish ( ) ; <nl> } <nl> <nl> public void extendModList ( ) <nl> @ @ - 383 , 6 + 394 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> { <nl> showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; <nl> } <nl> + else if ( j8onlymods ! = null ) <nl> + { <nl> + showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; <nl> + } <nl> else if ( modsMissing ! = null ) <nl> { <nl> showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; <nl> @ @ - 401 , 10 + 416 , 16 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> else <nl> { <nl> - Loader . instance ( ) . loadingComplete ( ) ; <nl> - SplashProgress . finish ( ) ; <nl> + logMissingTextureErrors ( ) ; <nl> + if ( ! Loader . instance ( ) . java8 ) <nl> + { <nl> + if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) <nl> + { <nl> + showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; <nl> + ForgeModContainer . updateNag ( ) ; <nl> + } <nl> + } <nl> } <nl> - logMissingTextureErrors ( ) ; <nl> } <nl> / * * <nl> * Get the server instance <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> new file mode 100644 <nl> index 0000000 . . af3071d <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java <nl> @ @ - 0 , 0 + 1 , 140 @ @ <nl> + / * <nl> + * Forge Mod Loader <nl> + * Copyright ( c ) 2012 - 2013 cpw . <nl> + * All rights reserved . This program and the accompanying materials <nl> + * are made available under the terms of the GNU Lesser Public License v2 . 1 <nl> + * which accompanies this distribution , and is available at <nl> + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html <nl> + * <nl> + * Contributors : <nl> + * cpw - implementation <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . client ; <nl> + <nl> + import net . minecraft . client . gui . GuiButton ; <nl> + import net . minecraft . client . gui . GuiErrorScreen ; <nl> + import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . util . text . TextFormatting ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Java8VersionException ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> + import com . google . common . collect . Lists ; <nl> + <nl> + import java . awt . * ; <nl> + import java . io . IOException ; <nl> + import java . net . URI ; <nl> + import java . util . List ; <nl> + <nl> + public class GuiJava8Error extends GuiErrorScreen <nl> + { <nl> + private Java8VersionException java8VersionException ; <nl> + public GuiJava8Error ( Java8VersionException java8VersionException ) <nl> + { <nl> + super ( null , null ) ; <nl> + this . java8VersionException = java8VersionException ; <nl> + } <nl> + <nl> + @ Override <nl> + public void initGui ( ) <nl> + { <nl> + this . buttonList . clear ( ) ; <nl> + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; <nl> + if ( java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> + { <nl> + this . buttonList . add ( new GuiButton ( 3 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; <nl> + } <nl> + else <nl> + { <nl> + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " menu . quit " ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + protected void actionPerformed ( GuiButton button ) throws IOException <nl> + { <nl> + if ( button . id = = 1 ) <nl> + { <nl> + try <nl> + { <nl> + Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , e , " Problem launching browser " ) ; <nl> + } <nl> + } <nl> + else if ( button . id = = 2 ) <nl> + { <nl> + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; <nl> + } <nl> + else if ( button . id = = 3 ) <nl> + { <nl> + FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) <nl> + { <nl> + this . drawDefaultBackground ( ) ; <nl> + int offset = 25 ; <nl> + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> + { <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + } <nl> + else <nl> + { <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + } <nl> + offset + = 15 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 10 ; <nl> + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) <nl> + { <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 15 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 10 ; <nl> + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = 5 ; <nl> + for ( ModContainer mc : java8VersionException . getMods ( ) ) <nl> + { <nl> + offset + = 10 ; <nl> + this . drawCenteredString ( this . fontRendererObj , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; <nl> + List < String > lines = Lists . newArrayList ( ) ; <nl> + for ( String line : text . split ( " \ n " ) ) <nl> + { <nl> + lines . addAll ( this . fontRendererObj . listFormattedStringToWidth ( line , this . width - this . fontRendererObj . FONT _ HEIGHT * 4 ) ) ; <nl> + } <nl> + <nl> + int maxWidth = 0 ; <nl> + for ( String line : lines ) <nl> + { <nl> + maxWidth = Math . max ( maxWidth , this . fontRendererObj . getStringWidth ( line ) ) ; <nl> + } <nl> + <nl> + for ( String line : lines ) <nl> + { <nl> + this . drawString ( this . fontRendererObj , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; <nl> + offset + = this . fontRendererObj . FONT _ HEIGHT + 2 ; <nl> + } <nl> + <nl> + offset + = 15 ; <nl> + } <nl> + / / super . super <nl> + for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) <nl> + { <nl> + ( ( GuiButton ) this . buttonList . get ( i ) ) . drawButton ( this . mc , mouseX , mouseY ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> index d9e11b3 . . d73d347 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> @ @ - 32 , 6 + 32 , 7 @ @ public class DummyModContainer implements ModContainer <nl> private ModMetadata md ; <nl> private ArtifactVersion processedVersion ; <nl> private String label ; <nl> + private int classVersion ; <nl> <nl> public DummyModContainer ( ModMetadata md ) <nl> { <nl> @ @ - 213 , 4 + 214 , 16 @ @ public class DummyModContainer implements ModContainer <nl> { <nl> return null ; <nl> } <nl> + <nl> + @ Override <nl> + public void setClassVersion ( int classVersion ) <nl> + { <nl> + this . classVersion = classVersion ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getClassVersion ( ) <nl> + { <nl> + return this . classVersion ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 8452fdc . . 8cc40bf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 90 , 6 + 90 , 7 @ @ public class FMLModContainer implements ModContainer <nl> private Map < String , String > customModProperties ; <nl> private ModCandidate candidate ; <nl> private URL updateJSONUrl ; <nl> + private int classVersion ; <nl> <nl> public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) <nl> { <nl> @ @ - 699 , 4 + 700 , 16 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> return updateJSONUrl ; <nl> } <nl> + <nl> + @ Override <nl> + public void setClassVersion ( int classVersion ) <nl> + { <nl> + this . classVersion = classVersion ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getClassVersion ( ) <nl> + { <nl> + return this . classVersion ; <nl> + } <nl> } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> index 783c28b . . 94c67cf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> @ @ - 214 , 4 + 214 , 16 @ @ public class InjectedModContainer implements ModContainer <nl> { <nl> return wrappedContainer . getUpdateUrl ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void setClassVersion ( int classVersion ) <nl> + { <nl> + wrappedContainer . setClassVersion ( classVersion ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getClassVersion ( ) <nl> + { <nl> + return wrappedContainer . getClassVersion ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> new file mode 100644 <nl> index 0000000 . . c9200f6 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java <nl> @ @ - 0 , 0 + 1 , 43 @ @ <nl> + / * <nl> + * Forge Mod Loader <nl> + * Copyright ( c ) 2012 - 2013 cpw . <nl> + * All rights reserved . This program and the accompanying materials <nl> + * are made available under the terms of the GNU Lesser Public License v2 . 1 <nl> + * which accompanies this distribution , and is available at <nl> + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html <nl> + * <nl> + * Contributors : <nl> + * cpw - implementation <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . common ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + public class Java8VersionException extends EnhancedRuntimeException <nl> + { <nl> + private static final long serialVersionUID = 1L ; <nl> + private final List < ModContainer > mods ; <nl> + <nl> + public Java8VersionException ( List < ModContainer > mods ) <nl> + { <nl> + super ( " Mods require Java 8 " ) ; <nl> + this . mods = mods ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void printStackTrace ( WrappedPrintStream stream ) <nl> + { <nl> + stream . println ( " Mods requiring Java 8 : " ) ; <nl> + for ( ModContainer mc : mods ) <nl> + { <nl> + stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; <nl> + } <nl> + stream . println ( " " ) ; <nl> + } <nl> + <nl> + public List < ModContainer > getMods ( ) <nl> + { <nl> + return mods ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 4bca3c0 . . f4b5142 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 161 , 6 + 161 , 7 @ @ public class Loader <nl> private File forcedModFile ; <nl> private ModDiscoverer discoverer ; <nl> private ProgressBar progressBar ; <nl> + public final boolean java8 ; <nl> <nl> public static Loader instance ( ) <nl> { <nl> @ @ - 187 , 6 + 188 , 14 @ @ public class Loader <nl> <nl> private Loader ( ) <nl> { <nl> + String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; <nl> + int major = Integer . parseInt ( ver [ 1 ] ) ; <nl> + java8 = major > 7 ; <nl> + if ( ! java8 ) <nl> + { <nl> + FMLLog . severe ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; <nl> + } <nl> + <nl> modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; <nl> if ( ! mccversion . equals ( MC _ VERSION ) ) <nl> { <nl> @ @ - 489 , 6 + 498 , 7 @ @ public class Loader <nl> ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; <nl> disableRequestedMods ( ) ; <nl> modController . distributeStateMessage ( FMLLoadEvent . class ) ; <nl> + checkJavaCompatibility ( ) ; <nl> sortModList ( ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; <nl> ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; <nl> @ @ - 543 , 6 + 553 , 24 @ @ public class Loader <nl> modController . transition ( LoaderState . PREINITIALIZATION , false ) ; <nl> } <nl> <nl> + <nl> + private void checkJavaCompatibility ( ) <nl> + { <nl> + if ( java8 ) return ; <nl> + List < ModContainer > j8mods = Lists . newArrayList ( ) ; <nl> + for ( ModContainer mc : getActiveModList ( ) ) <nl> + { <nl> + if ( mc . getClassVersion ( ) > = 52 ) <nl> + { <nl> + j8mods . add ( mc ) ; <nl> + } <nl> + } <nl> + if ( ! j8mods . isEmpty ( ) ) <nl> + { <nl> + throw new Java8VersionException ( j8mods ) ; <nl> + } <nl> + } <nl> + <nl> public void preinitializeMods ( ) <nl> { <nl> if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> index 883f8b9 . . cd82ff0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> @ @ - 152 , 4 + 152 , 8 @ @ public interface ModContainer <nl> boolean shouldLoadInEnvironment ( ) ; <nl> <nl> URL getUpdateUrl ( ) ; <nl> + <nl> + void setClassVersion ( int classVersion ) ; <nl> + <nl> + int getClassVersion ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> index 6eb8dec . . 0fd5d7d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ public class ASMDataTable <nl> private String annotationName ; <nl> private String className ; <nl> private String objectName ; <nl> + private int classVersion ; <nl> private Map < String , Object > annotationInfo ; <nl> public ASMData ( ModCandidate candidate , String annotationName , String className , String objectName , Map < String , Object > info ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> index 226ddd6 . . 77346da 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> @ @ - 83 , 6 + 83 , 7 @ @ public class JarDiscoverer implements ITypeDiscoverer <nl> table . addContainer ( container ) ; <nl> foundMods . add ( container ) ; <nl> container . bindMetadata ( mc ) ; <nl> + container . setClassVersion ( modParser . getClassVersion ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 7c35d8e . . cbdf668 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 1 , 5 + 1 , 5 @ @ <nl> commands . forge . usage = Use / forge < subcommand > . Subcommands are tps , track <nl> - commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . <nl> + commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . <nl> commands . forge . tps . summary = % s : Mean tick time : % d ms . Mean TPS : % d <nl> <nl> commands . forge . tracking . te . enabled = Tile Entity tracking enabled for % d seconds . <nl> @ @ - 153 , 4 + 153 , 18 @ @ fml . menu . mods . normal = Normal <nl> fml . menu . mods . search = Search : <nl> fml . menu . modoptions = Mod Options . . . <nl> <nl> - item . forge . bucketFilled . name = % s Bucket <nl> \ No newline at end of file <nl> + item . forge . bucketFilled . name = % s Bucket <nl> + <nl> + fml . messages . java8problem = % s % sJava Update Required % s <nl> + fml . messages . java8recommended = % s % sJava Update Recommended % s <nl> + fml . messages . modslistedbelow = The mods listed below % s <nl> + fml . messages . requirejava8 = require Java 8 <nl> + fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! <nl> + fml . messages . java8warning . 2 = You need to update Java <nl> + fml . messages . javaversion = Your Java version is Java % s ( version string % s ) <nl> + fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play <nl> + fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods <nl> + fml . messages . countbadandgood = % s of % s mods have this problem <nl> + <nl> + fml . button . visitjavadownloads = Oracle Java SE Downloads <nl> + fml . button . continue = Continue <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 65165ff . . 1bb587e 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 180 , 7 + 180 , 11 @ @ project ( ' : forge ' ) { 
 main ' net . minecraftforge . fml . LaunchTesting ' 
 systemProperties = [ 
 " org . lwjgl . util . Debug " : " true " , 
 - " org . lwjgl . util . DebugLoader " : " true " 
 + " org . lwjgl . util . DebugLoader " : " true " , 
 + " mc . version " : " $ { MC _ VERSION } " , 
 + " mcp . version " : " $ { MCP _ VERSION } " , 
 + " forge . version " : " $ { project . version } " , 
 + " forge . spec " : " $ { SPEC _ VERSION } " 
 ] 
 environment + = [ 
 target : ' fmldevclient ' , 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 5d52259 . . b21ad69 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 39 , 14 + 39 , 23 @ @ public class ForgeVersion 
 
 private static final String forgeVersion ; 
 
 + private static final String forgeSpec ; 
 + 
 static { 
 String vers = ForgeVersion . class . getPackage ( ) . getImplementationVersion ( ) ; 
 if ( vers = = null ) { 
 vers = System . getProperty ( " forge . version " ) ; 
 } 
 if ( vers = = null ) throw new RuntimeException ( " Missing forge version , cannot continue " ) ; 
 + String spec = ForgeVersion . class . getPackage ( ) . getSpecificationVersion ( ) ; 
 + if ( spec = = null ) { 
 + spec = System . getProperty ( " forge . spec " ) ; 
 + } 
 + if ( spec = = null ) throw new RuntimeException ( " Missing forge spec , cannot continue " ) ; 
 forgeVersion = vers ; 
 + forgeSpec = spec ; 
 LOGGER . info ( CORE , " Found Forge version { } " , forgeVersion ) ; 
 + LOGGER . info ( CORE , " Found Forge spec { } " , forgeSpec ) ; 
 } 
 
 public static String getVersion ( ) 
 @ @ - 64 , 5 + 73 , 9 @ @ public class ForgeVersion 
 { 
 return " " ; 
 } 
 + 
 + public static String getSpec ( ) { 
 + return forgeSpec ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java b / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java 
 index 37da825 . . 23ae5f8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java 
 + + + b / src / main / java / net / minecraftforge / fml / FMLWorldPersistenceHook . java 
 @ @ - 21 , 11 + 21 , 10 @ @ package net . minecraftforge . fml ; 
 
 import java . util . HashMap ; 
 import java . util . Map ; 
 - import java . util . Map . Entry ; 
 + import java . util . Objects ; 
 import java . util . Optional ; 
 
 import com . google . common . collect . Multimap ; 
 - import net . minecraft . nbt . INBTBase ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . nbt . NBTTagList ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 65 , 7 + 64 , 7 @ @ public final class FMLWorldPersistenceHook implements WorldPersistenceHooks . Worl 
 { 
 final NBTTagCompound mod = new NBTTagCompound ( ) ; 
 mod . setString ( " ModId " , mi . getModId ( ) ) ; 
 - mod . setString ( " ModVersion " , mi . getVersion ( ) . getVersionString ( ) ) ; 
 + mod . setString ( " ModVersion " , MavenVersionStringHelper . artifactVersionToString ( mi . getVersion ( ) ) ) ; 
 modList . add ( mod ) ; 
 } ) ; 
 fmlData . setTag ( " LoadingModList " , modList ) ; 
 @ @ - 98 , 9 + 97 , 9 @ @ public final class FMLWorldPersistenceHook implements WorldPersistenceHooks . Worl 
 LOGGER . error ( WORLDPERSISTENCE , " This world was saved with mod { } which appears to be missing , things may not work well " , modId ) ; 
 continue ; 
 } 
 - if ( ! modVersion . equals ( container . get ( ) . getModInfo ( ) . getVersion ( ) . getVersionString ( ) ) ) 
 + if ( ! Objects . equals ( modVersion , MavenVersionStringHelper . artifactVersionToString ( container . get ( ) . getModInfo ( ) . getVersion ( ) ) ) ) 
 { 
 - LOGGER . info ( WORLDPERSISTENCE , " This world was saved with mod { } version { } and it is now at version { } , things may not work well " , modId , modVersion , container . get ( ) . getModInfo ( ) . getVersion ( ) . getVersionString ( ) ) ; 
 + LOGGER . info ( WORLDPERSISTENCE , " This world was saved with mod { } version { } and it is now at version { } , things may not work well " , modId , modVersion , MavenVersionStringHelper . artifactVersionToString ( container . get ( ) . getModInfo ( ) . getVersion ( ) ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ForgeI18n . java b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 index 5819365 . . 1e1bfe4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 + + + b / src / main / java / net / minecraftforge / fml / ForgeI18n . java 
 @ @ - 42 , 6 + 42 , 7 @ @ public class ForgeI18n { 
 customFactories . put ( " lower " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toLowerCase ( ( String ) objectToParse ) ) ) ) ; 
 customFactories . put ( " upper " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > stringBuffer . append ( StringUtils . toUpperCase ( ( String ) objectToParse ) ) ) ) ; 
 customFactories . put ( " exc " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( stringBuffer , objectToParse ) - > parseException ( formatString , stringBuffer , objectToParse ) ) ) ; 
 + customFactories . put ( " vr " , ( name , formatString , locale ) - > new CustomReadOnlyFormat ( ( ( stringBuffer , o ) - > MavenVersionStringHelper . parseVersionRange ( formatString , stringBuffer , o ) ) ) ) ; 
 } 
 
 private static void parseException ( final String formatString , final StringBuffer stringBuffer , final Object objectToParse ) { 
 diff - - git a / src / main / java / net / minecraftforge / fml / MavenVersionStringHelper . java b / src / main / java / net / minecraftforge / fml / MavenVersionStringHelper . java 
 new file mode 100644 
 index 0000000 . . 8b3f0cc 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / MavenVersionStringHelper . java 
 @ @ - 0 , 0 + 1 , 77 @ @ 
 + package net . minecraftforge . fml ; 
 + 
 + import org . apache . maven . artifact . versioning . ArtifactVersion ; 
 + import org . apache . maven . artifact . versioning . Restriction ; 
 + import org . apache . maven . artifact . versioning . VersionRange ; 
 + 
 + import java . util . Objects ; 
 + import java . util . stream . Collectors ; 
 + 
 + public class MavenVersionStringHelper { 
 + public static String artifactVersionToString ( final ArtifactVersion artifactVersion ) { 
 + return artifactVersion . toString ( ) ; 
 + } 
 + 
 + public static String versionRangeToString ( final VersionRange range ) { 
 + return range . getRestrictions ( ) . stream ( ) . map ( MavenVersionStringHelper : : restrictionToString ) . collect ( Collectors . joining ( " , " ) ) ; 
 + } 
 + 
 + public static String restrictionToString ( final Restriction restriction ) { 
 + if ( restriction . getLowerBound ( ) = = null & & restriction . getUpperBound ( ) = = null ) 
 + { 
 + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . any " ) ; 
 + } 
 + else if ( restriction . getLowerBound ( ) ! = null & & restriction . getUpperBound ( ) ! = null ) 
 + { 
 + if ( Objects . equals ( artifactVersionToString ( restriction . getLowerBound ( ) ) , artifactVersionToString ( restriction . getUpperBound ( ) ) ) ) 
 + { 
 + return artifactVersionToString ( restriction . getLowerBound ( ) ) ; 
 + } 
 + else 
 + { 
 + if ( restriction . isLowerBoundInclusive ( ) & & restriction . isUpperBoundInclusive ( ) ) 
 + { 
 + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . inclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; 
 + } 
 + else if ( restriction . isLowerBoundInclusive ( ) ) 
 + { 
 + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . upperexclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; 
 + } 
 + else if ( restriction . isUpperBoundInclusive ( ) ) 
 + { 
 + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . lowerexclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; 
 + } 
 + else 
 + { 
 + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . exclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; 
 + } 
 + } 
 + } 
 + else if ( restriction . getLowerBound ( ) ! = null ) 
 + { 
 + if ( restriction . isLowerBoundInclusive ( ) ) 
 + { 
 + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . lower . inclusive " , restriction . getLowerBound ( ) ) ; 
 + } 
 + else 
 + { 
 + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . lower . exclusive " , restriction . getLowerBound ( ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + if ( restriction . isUpperBoundInclusive ( ) ) 
 + { 
 + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . upper . inclusive " , restriction . getUpperBound ( ) ) ; 
 + } 
 + else 
 + { 
 + return ForgeI18n . parseMessage ( " fml . messages . version . restriction . upper . exclusive " , restriction . getUpperBound ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + public static void parseVersionRange ( final String formatString , final StringBuffer stringBuffer , final Object range ) { 
 + stringBuffer . append ( versionRangeToString ( ( VersionRange ) range ) ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoader . java b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 index 4856d9a . . 6dcc4b8 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoader . java 
 @ @ - 60 , 7 + 60 , 7 @ @ public class ModLoader 
 this . loadingModList = FMLLoader . getLoadingModList ( ) ; 
 this . modClassLoader = new ModLoadingClassLoader ( this . launchClassLoader ) ; 
 this . loadingExceptions = FMLLoader . getLoadingModList ( ) . 
 - getErrors ( ) . stream ( ) . map ( ModLoadingException : : fromEarlyException ) . collect ( Collectors . toList ( ) ) ; 
 + getErrors ( ) . stream ( ) . flatMap ( ModLoadingException : : fromEarlyException ) . collect ( Collectors . toList ( ) ) ; 
 Thread . currentThread ( ) . setContextClassLoader ( this . modClassLoader ) ; 
 } 
 
 @ @ - 75 , 9 + 75 , 6 @ @ public class ModLoader 
 } 
 
 public void loadMods ( ) { 
 - if ( ! this . loadingExceptions . isEmpty ( ) ) { 
 - throw new LoadingFailedException ( loadingExceptions ) ; 
 - } 
 final ModList modList = ModList . of ( loadingModList . getModFiles ( ) . stream ( ) . map ( ModFileInfo : : getFile ) . collect ( Collectors . toList ( ) ) , loadingModList . getMods ( ) ) ; 
 ModContainer forgeModContainer ; 
 try 
 @ @ - 88 , 9 + 85 , 12 @ @ public class ModLoader 
 catch ( ClassNotFoundException | IllegalAccessException | NoSuchMethodException | InstantiationException | InvocationTargetException e ) 
 { 
 LOGGER . error ( CORE , " Unable to load the Forge Mod Container " , e ) ; 
 - loadingExceptions . add ( new ModLoadingException ( DefaultModInfos . forgeModInfo , ModLoadingStage . CONSTRUCT , " fml . modloading . failedtoloadforge " , e ) ) ; 
 + loadingExceptions . add ( new ModLoadingException ( DefaultModInfos . forgeModInfo , ModLoadingStage . VALIDATE , " fml . modloading . failedtoloadforge " , e ) ) ; 
 forgeModContainer = null ; 
 } 
 + if ( ! this . loadingExceptions . isEmpty ( ) ) { 
 + throw new LoadingFailedException ( loadingExceptions ) ; 
 + } 
 final Stream < ModContainer > modContainerStream = loadingModList . getModFiles ( ) . stream ( ) . 
 map ( ModFileInfo : : getFile ) . 
 map ( mf - > buildMods ( mf , modClassLoader ) ) . 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingException . java b / src / main / java / net / minecraftforge / fml / ModLoadingException . java 
 index 9b667aa . . 7ebbdfa 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoadingException . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoadingException . java 
 @ @ - 59 , 8 + 59 , 8 @ @ public class ModLoadingException extends RuntimeException 
 this . context = Arrays . asList ( context ) ; 
 } 
 
 - static ModLoadingException fromEarlyException ( final EarlyLoadingException e ) { 
 - return new ModLoadingException ( null , ModLoadingStage . VALIDATE , e . getI18NMessage ( ) , e , e . getContext ( ) . toArray ( ) ) ; 
 + static Stream < ModLoadingException > fromEarlyException ( final EarlyLoadingException e ) { 
 + return e . getAllData ( ) . stream ( ) . map ( ed - > new ModLoadingException ( null , ModLoadingStage . VALIDATE , ed . getI18message ( ) , e . getCause ( ) , ed . getArgs ( ) ) ) ; 
 } 
 
 public String getI18NMessage ( ) { 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java 
 index b19bf47 . . 63c0024 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / gui / GuiModList . java 
 @ @ - 37 , 14 + 37 , 10 @ @ import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . text . ITextComponent ; 
 import net . minecraft . util . text . TextComponentString ; 
 import net . minecraftforge . common . ForgeHooks ; 
 - import net . minecraftforge . fml . ForgeI18n ; 
 - import net . minecraftforge . fml . ModContainer ; 
 - import net . minecraftforge . fml . ModList ; 
 - import net . minecraftforge . fml . VersionChecker ; 
 + import net . minecraftforge . fml . * ; 
 import net . minecraftforge . fml . client . ConfigGuiHandler ; 
 import net . minecraftforge . fml . client . ResourcePackLoader ; 
 import net . minecraftforge . fml . language . IModInfo ; 
 - import net . minecraftforge . fml . loading . MavenVersionAdapter ; 
 import net . minecraftforge . fml . loading . StringUtils ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 import org . apache . commons . lang3 . tuple . Pair ; 
 @ @ - 291 , 7 + 287 , 7 @ @ public class GuiModList extends GuiScreen 
 for ( ModInfo mod : mods ) 
 { 
 listWidth = Math . max ( listWidth , getFontRenderer ( ) . getStringWidth ( mod . getDisplayName ( ) ) + 10 ) ; 
 - listWidth = Math . max ( listWidth , getFontRenderer ( ) . getStringWidth ( MavenVersionAdapter . artifactVersionToString ( mod . getVersion ( ) ) ) + 5 ) ; 
 + listWidth = Math . max ( listWidth , getFontRenderer ( ) . getStringWidth ( MavenVersionStringHelper . artifactVersionToString ( mod . getVersion ( ) ) ) + 5 ) ; 
 } 
 listWidth = Math . min ( listWidth , 150 ) ; 
 listWidth + = listWidth % numButtons ! = 0 ? ( numButtons - listWidth % numButtons ) : 0 ; 
 @ @ - 455 , 7 + 451 , 7 @ @ public class GuiModList extends GuiScreen 
 } ) . orElse ( Pair . of ( null , new Dimension ( 0 , 0 ) ) ) ; 
 
 lines . add ( selectedMod . getDisplayName ( ) ) ; 
 - lines . add ( ForgeI18n . parseMessage ( " fml . menu . mods . info . version " , MavenVersionAdapter . artifactVersionToString ( selectedMod . getVersion ( ) ) ) ) ; 
 + lines . add ( ForgeI18n . parseMessage ( " fml . menu . mods . info . version " , MavenVersionStringHelper . artifactVersionToString ( selectedMod . getVersion ( ) ) ) ) ; 
 lines . add ( ForgeI18n . parseMessage ( " fml . menu . mods . info . idstate " , selectedMod . getModId ( ) , ModList . get ( ) . getModContainerById ( selectedMod . getModId ( ) ) . 
 map ( ModContainer : : getCurrentState ) . map ( Object : : toString ) . orElse ( " NONE " ) ) ) ; 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / gui / GuiSlotModList . java b / src / main / java / net / minecraftforge / fml / client / gui / GuiSlotModList . java 
 index db92165 . . b39ae4e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / gui / GuiSlotModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / gui / GuiSlotModList . java 
 @ @ - 19 , 16 + 19 , 14 @ @ 
 
 package net . minecraftforge . fml . client . gui ; 
 
 - import java . util . List ; 
 - 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . gui . FontRenderer ; 
 import net . minecraft . client . gui . Gui ; 
 import net . minecraft . client . gui . GuiListExtended ; 
 import net . minecraft . client . renderer . GlStateManager ; 
 - import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . fml . MavenVersionStringHelper ; 
 import net . minecraftforge . fml . VersionChecker ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 
 @ @ - 97 , 7 + 95 , 7 @ @ public class GuiSlotModList extends GuiListExtended < GuiSlotModList . ModEntry > 
 int top = this . getY ( ) ; 
 int left = this . getX ( ) ; 
 String name = stripControlCodes ( modInfo . getDisplayName ( ) ) ; 
 - String version = stripControlCodes ( modInfo . getVersion ( ) . getVersionString ( ) ) ; 
 + String version = stripControlCodes ( MavenVersionStringHelper . artifactVersionToString ( modInfo . getVersion ( ) ) ) ; 
 VersionChecker . CheckResult vercheck = VersionChecker . getResult ( modInfo ) ; 
 FontRenderer font = this . parent . getFontRenderer ( ) ; 
 font . drawString ( font . trimStringToWidth ( name , listWidth ) , left + 3 , top + 2 , 0xFFFFFF ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java b / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java 
 index cf12b58 . . 874edff 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package net . minecraftforge . fml . common . toposort ; 
 
 import com . google . common . collect . Sets ; 
 + import net . minecraftforge . fml . loading . EarlyLoadingException ; 
 import org . apache . logging . log4j . message . Message ; 
 import org . apache . logging . log4j . util . StringBuilderFormattable ; 
 
 @ @ - 35 , 6 + 36 , 8 @ @ import java . util . NoSuchElementException ; 
 import java . util . Set ; 
 import java . util . SortedSet ; 
 import java . util . TreeSet ; 
 + import java . util . function . Function ; 
 + import java . util . stream . Collectors ; 
 
 / * * 
 * Topological sort for mod loading 
 @ @ - 250 , 6 + 253 , 13 @ @ public class TopologicalSort 
 buffer . append ( " Explored node set : { } \ n " ) . append ( expandedNodes ) ; 
 buffer . append ( " Likely cycle is in : { } \ n " ) . append ( Sets . difference ( visitedNodes , expandedNodes ) ) ; 
 } 
 + 
 + public List < EarlyLoadingException . ExceptionData > toExceptionData ( Function < T , String > nodeMapper ) { 
 + return Collections . singletonList ( 
 + new EarlyLoadingException . ExceptionData ( " fml . messages . cycleproblem " , 
 + nodeMapper . apply ( node ) , 
 + visitedNodes . stream ( ) . map ( nodeMapper ) . collect ( Collectors . joining ( " , " ) ) ) ) ; 
 + } 
 } 
 
 public < T > TopoSortException ( TopoSortExceptionData < T > data ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / EarlyLoadingException . java b / src / main / java / net / minecraftforge / fml / loading / EarlyLoadingException . java 
 index 560ecd3 . . ca1ce90 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / EarlyLoadingException . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / EarlyLoadingException . java 
 @ @ - 8 , 20 + 8 , 34 @ @ import java . util . List ; 
 * or server . 
 * / 
 public class EarlyLoadingException extends RuntimeException { 
 - private final String i18nMessage ; 
 - private final List < Object > context ; 
 + public static class ExceptionData { 
 
 - public EarlyLoadingException ( final String message , final String i18nMessage , final Throwable originalException , Object . . . context ) { 
 - super ( message , originalException ) ; 
 - this . i18nMessage = i18nMessage ; 
 - this . context = Arrays . asList ( context ) ; 
 + 
 + private final String i18message ; 
 + private final Object [ ] args ; 
 + public ExceptionData ( final String message , Object . . . args ) { 
 + this . i18message = message ; 
 + this . args = args ; 
 + } 
 + 
 + public String getI18message ( ) { 
 + return i18message ; 
 + } 
 + 
 + public Object [ ] getArgs ( ) { 
 + return args ; 
 + } 
 } 
 + private final List < ExceptionData > errorMessages ; 
 
 - public String getI18NMessage ( ) { 
 - return this . i18nMessage ; 
 + public List < ExceptionData > getAllData ( ) { 
 + return errorMessages ; 
 } 
 
 - public List < Object > getContext ( ) { 
 - return this . context ; 
 + EarlyLoadingException ( final String message , final Throwable originalException , List < ExceptionData > errorMessages ) { 
 + super ( message , originalException ) ; 
 + this . errorMessages = errorMessages ; 
 } 
 + 
 + 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index c613889 . . 29cdcbb 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import org . apache . logging . log4j . Logger ; 
 import org . apache . logging . log4j . core . config . Configurator ; 
 
 import java . net . URISyntaxException ; 
 + import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 @ @ - 51 , 14 + 52 , 20 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 " net . minecraftforge . fml . common . versioning . " 
 ) ; 
 static { 
 + Path forgePath1 = null ; 
 + Path patchedBinariesPath1 = null ; 
 + Path srgMcPath1 = null ; 
 try { 
 - forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - patchedBinariesPath = forgePath . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; 
 - Path libs = forgePath . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; 
 - srgMcPath = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; 
 + forgePath1 = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 + patchedBinariesPath1 = forgePath1 . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; 
 + Path libs = forgePath1 . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; 
 + srgMcPath1 = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; 
 } catch ( URISyntaxException e ) { 
 - throw new RuntimeException ( " Unable to locate myself ! " ) ; 
 + 
 } 
 + forgePath = forgePath1 ; 
 + patchedBinariesPath = patchedBinariesPath1 ; 
 + srgMcPath = srgMcPath1 ; 
 } 
 @ Override 
 public String name ( ) 
 @ @ - 69 , 9 + 76 , 12 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - LOGGER . info ( " Found SRG MC at { } " , srgMcPath . toString ( ) ) ; 
 - LOGGER . info ( " Found Forge patches at { } " , patchedBinariesPath . toString ( ) ) ; 
 - LOGGER . info ( " Found Forge at { } " , forgePath . toString ( ) ) ; 
 + LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; 
 + LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; 
 + LOGGER . info ( " Forge at { } is { } " , forgePath . toString ( ) , Files . exists ( forgePath ) ? " present " : " missing " ) ; 
 + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( forgePath ) ) ) { 
 + throw new RuntimeException ( " Failed to find patched jars " ) ; 
 + } 
 return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java b / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java 
 index 220b278 . . 35d7058 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / LanguageLoadingProvider . java 
 @ @ - 79 , 7 + 79 , 7 @ @ public class LanguageLoadingProvider 
 final Package pkg = lp . getClass ( ) . getPackage ( ) ; 
 String implementationVersion = pkg . getImplementationVersion ( ) ; 
 if ( implementationVersion = = null ) { 
 - implementationVersion = ForgeVersion . getVersion ( ) ; 
 + implementationVersion = ForgeVersion . getSpec ( ) ; 
 } 
 LOGGER . debug ( CORE , " Found system classpath language provider { } , version { } " , lp . name ( ) , implementationVersion ) ; 
 languageProviderMap . put ( lp . name ( ) , new ModLanguageWrapper ( lp , new DefaultArtifactVersion ( implementationVersion ) ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / MavenVersionAdapter . java b / src / main / java / net / minecraftforge / fml / loading / MavenVersionAdapter . java 
 index 7947e5b . . 0c6a9fc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / MavenVersionAdapter . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / MavenVersionAdapter . java 
 @ @ - 1 , 16 + 1 , 10 @ @ 
 package net . minecraftforge . fml . loading ; 
 
 - import net . minecraftforge . fml . ForgeI18n ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 - import org . apache . maven . artifact . versioning . ArtifactVersion ; 
 import org . apache . maven . artifact . versioning . InvalidVersionSpecificationException ; 
 - import org . apache . maven . artifact . versioning . Restriction ; 
 import org . apache . maven . artifact . versioning . VersionRange ; 
 
 - import java . util . Objects ; 
 - import java . util . stream . Collectors ; 
 - 
 import static net . minecraftforge . fml . Logging . CORE ; 
 
 public final class MavenVersionAdapter { 
 @ @ - 25 , 66 + 19 , 5 @ @ public final class MavenVersionAdapter { 
 throw new RuntimeException ( " Failed to parse spec " , e ) ; 
 } 
 } 
 - 
 - public static String artifactVersionToString ( final ArtifactVersion artifactVersion ) { 
 - return artifactVersion . toString ( ) ; 
 - } 
 
 - public static String versionRangeToString ( final VersionRange range ) { 
 - return range . getRestrictions ( ) . stream ( ) . map ( MavenVersionAdapter : : restrictionToString ) . collect ( Collectors . joining ( " , " ) ) ; 
 - } 
 - public static String restrictionToString ( final Restriction restriction ) { 
 - if ( restriction . getLowerBound ( ) = = null & & restriction . getUpperBound ( ) = = null ) 
 - { 
 - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . any " ) ; 
 - } 
 - else if ( restriction . getLowerBound ( ) ! = null & & restriction . getUpperBound ( ) ! = null ) 
 - { 
 - if ( Objects . equals ( artifactVersionToString ( restriction . getLowerBound ( ) ) , artifactVersionToString ( restriction . getUpperBound ( ) ) ) ) 
 - { 
 - return artifactVersionToString ( restriction . getLowerBound ( ) ) ; 
 - } 
 - else 
 - { 
 - if ( restriction . isLowerBoundInclusive ( ) & & restriction . isUpperBoundInclusive ( ) ) 
 - { 
 - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . inclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; 
 - } 
 - else if ( restriction . isLowerBoundInclusive ( ) ) 
 - { 
 - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . upperexclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; 
 - } 
 - else if ( restriction . isUpperBoundInclusive ( ) ) 
 - { 
 - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . lowerexclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; 
 - } 
 - else 
 - { 
 - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . bounded . exclusive " , restriction . getLowerBound ( ) , restriction . getUpperBound ( ) ) ; 
 - } 
 - } 
 - } 
 - else if ( restriction . getLowerBound ( ) ! = null ) 
 - { 
 - if ( restriction . isLowerBoundInclusive ( ) ) 
 - { 
 - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . lower . inclusive " , restriction . getLowerBound ( ) ) ; 
 - } 
 - else 
 - { 
 - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . lower . exclusive " , restriction . getLowerBound ( ) ) ; 
 - } 
 - } 
 - else 
 - { 
 - if ( restriction . isUpperBoundInclusive ( ) ) 
 - { 
 - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . upper . inclusive " , restriction . getUpperBound ( ) ) ; 
 - } 
 - else 
 - { 
 - return ForgeI18n . parseMessage ( " fml . messages . version . restriction . upper . exclusive " , restriction . getUpperBound ( ) ) ; 
 - } 
 - } 
 - } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / ModSorter . java b / src / main / java / net / minecraftforge / fml / loading / ModSorter . java 
 index 47b8e4b . . 42f4a04 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / ModSorter . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / ModSorter . java 
 @ @ - 28 , 11 + 28 , 9 @ @ import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 import org . apache . maven . artifact . versioning . ArtifactVersion ; 
 + import org . apache . maven . artifact . versioning . DefaultArtifactVersion ; 
 
 - import java . util . Collection ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - import java . util . Set ; 
 + import java . util . * ; 
 import java . util . function . Function ; 
 import java . util . function . Supplier ; 
 import java . util . stream . Collectors ; 
 @ @ - 62 , 6 + 60 , 7 @ @ public class ModSorter 
 ms . sort ( ) ; 
 } catch ( EarlyLoadingException ele ) { 
 earlyLoadingException = ele ; 
 + ms . sortedList = Collections . emptyList ( ) ; 
 } 
 return LoadingModList . of ( ms . modFiles , ms . sortedList , earlyLoadingException ) ; 
 } 
 @ @ - 70 , 7 + 69 , 8 @ @ public class ModSorter 
 { 
 final TopologicalSort . DirectedGraph < Supplier < ModFileInfo > > topoGraph = new TopologicalSort . DirectedGraph < > ( ) ; 
 modFiles . stream ( ) . map ( ModFile : : getModFileInfo ) . map ( ModFileInfo . class : : cast ) . forEach ( mi - > topoGraph . addNode ( ( ) - > mi ) ) ; 
 - modFiles . stream ( ) . map ( ModFile : : getModInfos ) . flatMap ( Collection : : stream ) . map ( IModInfo : : getDependencies ) . flatMap ( Collection : : stream ) . 
 + modFiles . stream ( ) . map ( ModFile : : getModInfos ) . flatMap ( Collection : : stream ) . 
 + map ( IModInfo : : getDependencies ) . flatMap ( Collection : : stream ) . 
 forEach ( dep - > addDependency ( topoGraph , dep ) ) ; 
 final List < Supplier < ModFileInfo > > sorted ; 
 try 
 @ @ - 81 , 7 + 81 , 7 @ @ public class ModSorter 
 { 
 TopologicalSort . TopoSortException . TopoSortExceptionData < Supplier < ModInfo > > data = e . getData ( ) ; 
 LOGGER . error ( LOADING , ( ) - > data ) ; 
 - throw new EarlyLoadingException ( " Sorting error " , " fml . modloading . sortingerror " , e , e . getData ( ) ) ; 
 + throw new EarlyLoadingException ( " Sorting error " , e , data . toExceptionData ( mi - > mi . get ( ) . getModId ( ) ) ) ; 
 } 
 this . sortedList = sorted . stream ( ) . map ( Supplier : : get ) . map ( ModFileInfo : : getMods ) . 
 flatMap ( Collection : : stream ) . map ( ModInfo . class : : cast ) . collect ( Collectors . toList ( ) ) ; 
 @ @ - 111 , 7 + 111 , 10 @ @ public class ModSorter 
 final List < Map . Entry < String , List < ModInfo > > > dupedMods = modIds . entrySet ( ) . stream ( ) . filter ( e - > e . getValue ( ) . size ( ) > 1 ) . collect ( Collectors . toList ( ) ) ; 
 
 if ( ! dupedMods . isEmpty ( ) ) { 
 - throw new EarlyLoadingException ( " Duplicate mods found " , " fml . modloading . dupesfound " , null , dupedMods ) ; 
 + final List < EarlyLoadingException . ExceptionData > duplicateModErrors = dupedMods . stream ( ) . 
 + map ( dm - > new EarlyLoadingException . ExceptionData ( " fml . modloading . dupedmod " , dm . getValue ( ) . get ( 0 ) ) ) . 
 + collect ( Collectors . toList ( ) ) ; 
 + throw new EarlyLoadingException ( " Duplicate mods found " , null , duplicateModErrors ) ; 
 } 
 
 modIdNameLookup = modIds . entrySet ( ) . stream ( ) . collect ( Collectors . toMap ( Map . Entry : : getKey , e - > e . getValue ( ) . get ( 0 ) ) ) ; 
 @ @ - 131 , 7 + 134 , 12 @ @ public class ModSorter 
 LOGGER . debug ( LOADING , " Found { } mandatory mod requirements missing " , missingVersions . size ( ) ) ; 
 
 if ( ! missingVersions . isEmpty ( ) ) { 
 - throw new EarlyLoadingException ( " Missing mods " , " fml . modloading . missingmods " , null , missingVersions ) ; 
 + final List < EarlyLoadingException . ExceptionData > exceptionData = missingVersions . stream ( ) . map ( mv - > 
 + new EarlyLoadingException . ExceptionData ( " fml . modloading . missingdependency " , mv . getModId ( ) , 
 + mv . getOwner ( ) . getModId ( ) , mv . getVersionRange ( ) , 
 + modVersions . containsKey ( mv . getModId ( ) ) ? modVersions . get ( mv . getModId ( ) ) : " NONE " ) ) . 
 + collect ( Collectors . toList ( ) ) ; 
 + throw new EarlyLoadingException ( " Missing mods " , null , exceptionData ) ; 
 } 
 } 
 
 diff - - git a / src / main / resources / assets / forge / lang / en _ us . json b / src / main / resources / assets / forge / lang / en _ us . json 
 index 4f81ed5 . . 174e43b 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ us . json 
 + + + b / src / main / resources / assets / forge / lang / en _ us . json 
 @ @ - 23 , 6 + 23 , 7 @ @ 
 " fml . modloading . failedtoloadmod " : " { 0 , modinfo , name } ( { 0 , modinfo , id } ) has failed to load correctly \ n \ u00a77 { 2 , exc , msg } " , 
 " fml . modloading . errorduringevent " : " { 0 , modinfo , name } ( { 0 , modinfo , id } ) encountered an error during the { 1 , lower } event phase \ n \ u00a77 { 2 , exc , msg } " , 
 " fml . modloading . failedtoloadforge " : " Failed to load forge " , 
 + " fml . modloading . missingdependency " : " Mod { 4 } has missing dependency { 3 } \ n \ u00a77Want { 5 , vr } , have { 6 } " , 
 
 " fml . messages . version . restriction . any " : " any " , 
 " fml . messages . version . restriction . lower . inclusive " : " { 0 } or above " ,

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 index 4ffa6d8 . . 22dec2e 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 38 , 7 + 38 , 16 @ @ 
 if ( p _ 146284 _ 1 _ . field _ 146127 _ k = = 11 ) 
 { 
 this . field _ 146297 _ k . func _ 71371 _ a ( " Demo _ World " , " Demo _ World " , DemoWorldServer . field _ 73071 _ a ) ; 
 - @ @ - 512 , 7 + 521 , 16 @ @ 
 + @ @ - 493 , 6 + 502 , 8 @ @ 
 + this . func _ 73729 _ b ( j + 155 , k + 0 , 0 , 45 , 155 , 44 ) ; 
 + } 
 + 
 + + this . field _ 73975 _ c = net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m , this . field _ 73975 _ c ) ; 
 + + 
 + GlStateManager . func _ 179094 _ E ( ) ; 
 + GlStateManager . func _ 179109 _ b ( ( float ) ( this . field _ 146294 _ l / 2 + 90 ) , 70 . 0F , 0 . 0F ) ; 
 + GlStateManager . func _ 179114 _ b ( - 20 . 0F , 0 . 0F , 0 . 0F , 1 . 0F ) ; 
 + @ @ - 512 , 7 + 523 , 15 @ @ 
 s = s + ( " release " . equalsIgnoreCase ( this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ? " " : " / " + this . field _ 146297 _ k . func _ 184123 _ d ( ) ) ; 
 } 
 
 @ @ - 52 , 11 + 61 , 10 @ @ 
 + this . func _ 73731 _ b ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + brdline * ( this . field _ 146289 _ q . field _ 78288 _ b + 1 ) ) , 16777215 ) ; 
 + } 
 + } 
 - + net . minecraftforge . client . ForgeHooksClient . renderMainMenu ( this , this . field _ 146289 _ q , this . field _ 146294 _ l , this . field _ 146295 _ m ) ; 
 String s1 = " Copyright Mojang AB . Do not distribute ! " ; 
 this . func _ 73731 _ b ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . func _ 78256 _ a ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; 
 
 - @ @ - 529 , 6 + 547 , 7 @ @ 
 + @ @ - 529 , 6 + 548 , 7 @ @ 
 { 
 this . field _ 183503 _ M . func _ 73863 _ a ( p _ 73863 _ 1 _ , p _ 73863 _ 2 _ , p _ 73863 _ 3 _ ) ; 
 } 
 @ @ - 64 , 3 + 72 , 12 @ @ 
 } 
 
 protected void func _ 73864 _ a ( int p _ 73864 _ 1 _ , int p _ 73864 _ 2 _ , int p _ 73864 _ 3 _ ) throws IOException 
 + @ @ - 549 , 6 + 569 , 8 @ @ 
 + { 
 + this . field _ 183503 _ M . func _ 73864 _ a ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ ) ; 
 + } 
 + + 
 + + net . minecraftforge . client . ForgeHooksClient . mainMenuMouseClick ( p _ 73864 _ 1 _ , p _ 73864 _ 2 _ , p _ 73864 _ 3 _ , this . field _ 146289 _ q , this . field _ 146294 _ l ) ; 
 + } 
 + 
 + public void func _ 146281 _ b ( ) 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 9f628dd . . a0b6050 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import static org . lwjgl . opengl . GL20 . * ; 
 
 import java . nio . ByteBuffer ; 
 import java . nio . FloatBuffer ; 
 + import java . util . Collections ; 
 import java . util . Map ; 
 
 import javax . vecmath . Matrix3f ; 
 @ @ - 89 , 8 + 90 , 12 @ @ import net . minecraftforge . common . model . IModelPart ; 
 import net . minecraftforge . common . model . ITransformation ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 + import net . minecraftforge . fml . client . GuiJava8Error ; 
 import net . minecraftforge . fml . client . registry . ClientRegistry ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Java8VersionException ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 import org . lwjgl . BufferUtils ; 
 @ @ - 266 , 7 + 271 , 8 @ @ public class ForgeHooksClient 
 / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; 
 } 
 
 - public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) 
 + private static int updatescrollcounter = 0 ; 
 + public static String renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height , String splashText ) 
 { 
 Status status = ForgeVersion . getStatus ( ) ; 
 if ( status = = BETA | | status = = BETA _ OUTDATED ) 
 @ @ - 278 , 6 + 284 , 17 @ @ public class ForgeHooksClient 
 gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 } 
 
 + if ( ! Loader . instance ( ) . java8 ) 
 + { 
 + String line = I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 8 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + line = I18n . format ( " fml . messages . java8warning . 2 " ) ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 9 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + splashText = updatescrollcounter < 50 ? " UPDATE ! " : " JAVA ! " ; 
 + updatescrollcounter + = 1 ; 
 + updatescrollcounter % = 100 ; 
 + } 
 + 
 String line = null ; 
 switch ( status ) 
 { 
 @ @ - 294 , 6 + 311 , 24 @ @ public class ForgeHooksClient 
 / / if we have a line , render it in the bottom right , above Mojang ' s copyright line 
 gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 } 
 + 
 + return splashText ; 
 + } 
 + 
 + public static void mainMenuMouseClick ( int mouseX , int mouseY , int mouseButton , FontRenderer font , int width ) 
 + { 
 + if ( ! Loader . instance ( ) . java8 ) 
 + { 
 + if ( mouseY > = ( 4 + ( 8 * 10 ) ) & & mouseY < ( 4 + ( 10 * 10 ) ) ) 
 + { 
 + int w = font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 1 " , TextFormatting . RED , TextFormatting . RESET ) ) ; 
 + w = Math . max ( w , font . getStringWidth ( I18n . format ( " fml . messages . java8warning . 2 " ) ) ) ; 
 + if ( mouseX > = ( ( width - w ) / 2 ) & & mouseX < = ( ( width + w ) / 2 ) ) 
 + { 
 + FMLClientHandler . instance ( ) . showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 + } 
 + } 
 + } 
 } 
 
 public static ISound playSound ( SoundManager manager , ISound sound ) 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index d4a61a4 . . b18562c 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 14 , 6 + 14 , 7 @ @ import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 + import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 74 , 6 + 75 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean defaultHasSpawnFuzz = true ; 
 public static boolean forgeLightPipelineEnabled = true ; 
 public static boolean replaceVanillaBucketModel = true ; 
 + public static long java8Reminder = 0 ; 
 
 private static Configuration config ; 
 private static ForgeModContainer INSTANCE ; 
 @ @ - 259 , 6 + 261 , 11 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 replaceVanillaBucketModel = prop . getBoolean ( Boolean . FALSE ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 + prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder , 
 + " The timestamp of the last reminder to update to Java 8 in number of milliseconds since January 1 , 1970 , 00 : 00 : 00 GMT . Nag will show only once every 24 hours . To disable it set this to some really high number . " ) ; 
 + java8Reminder = prop . getLong ( java8Reminder ) ; 
 + propOrder . add ( prop . getName ( ) ) ; 
 + 
 config . setCategoryPropertyOrder ( CATEGORY _ CLIENT , propOrder ) ; 
 
 if ( config . hasChanged ( ) ) 
 @ @ - 267 , 6 + 274 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 } 
 } 
 
 + public static void updateNag ( ) 
 + { 
 + Property prop = config . get ( Configuration . CATEGORY _ CLIENT , " java8Reminder " , java8Reminder ) ; 
 + prop . set ( ( new Date ( ) ) . getTime ( ) ) ; 
 + config . save ( ) ; 
 + } 
 + 
 / * * 
 * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . 
 * This implementation uses the optional configID string to handle multiple Configurations using one event handler . 
 diff - - git a / src / main / java / net / minecraftforge / common / config / Property . java b / src / main / java / net / minecraftforge / common / config / Property . java 
 index db85afe . . d42bbad 100644 
 - - - a / src / main / java / net / minecraftforge / common / config / Property . java 
 + + + b / src / main / java / net / minecraftforge / common / config / Property . java 
 @ @ - 680 , 14 + 680 , 7 @ @ public class Property 
 * / 
 public int getInt ( ) 
 { 
 - try 
 - { 
 - return Integer . parseInt ( value ) ; 
 - } 
 - catch ( NumberFormatException e ) 
 - { 
 - return Integer . parseInt ( defaultValue ) ; 
 - } 
 + return getInt ( Integer . parseInt ( defaultValue ) ) ; 
 } 
 
 / * * 
 @ @ - 728 , 6 + 721 , 54 @ @ public class Property 
 } 
 
 / * * 
 + * Returns the value in this property as a long , 
 + * if the value is not a valid long , it will return the initially provided default . 
 + * 
 + * @ return The value 
 + * / 
 + public long getLong ( ) 
 + { 
 + return getLong ( Long . parseLong ( defaultValue ) ) ; 
 + } 
 + 
 + / * * 
 + * Returns the value in this property as a long , 
 + * if the value is not a valid long , it will return the 
 + * provided default . 
 + * 
 + * @ param _ default The default to provide if the current value is not a validlong 
 + * @ return The value 
 + * / 
 + public long getLong ( long _ default ) 
 + { 
 + try 
 + { 
 + return Long . parseLong ( value ) ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + return _ default ; 
 + } 
 + } 
 + 
 + / * * 
 + * Checks if the current value stored in this property can be converted to a long . 
 + * @ return True if the type of the Property is an Long 
 + * / 
 + public boolean isLongValue ( ) 
 + { 
 + try 
 + { 
 + Long . parseLong ( value ) ; 
 + return true ; 
 + } 
 + catch ( NumberFormatException e ) 
 + { 
 + return false ; 
 + } 
 + } 
 + 
 + / * * 
 * Returns the value in this property as a boolean , 
 * if the value is not a valid boolean , it will return the 
 * provided default . 
 @ @ - 1148 , 6 + 1189 , 7 @ @ public class Property 
 this . setValues ( values ) ; 
 } 
 public void set ( int value ) { set ( Integer . toString ( value ) ) ; } 
 + public void set ( long value ) { set ( Long . toString ( value ) ) ; } 
 public void set ( boolean value ) { set ( Boolean . toString ( value ) ) ; } 
 public void set ( double value ) { set ( Double . toString ( value ) ) ; } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 19e8d0b . . 87019d1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 + import java . util . Date ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 @ @ - 69 , 6 + 70 , 7 @ @ import net . minecraft . util . StringUtils ; 
 import net . minecraft . world . WorldSettings ; 
 import net . minecraft . world . storage . SaveFormatComparator ; 
 import net . minecraft . world . storage . SaveFormatOld ; 
 + import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . fml . client . registry . RenderingRegistry ; 
 import net . minecraftforge . fml . common . DummyModContainer ; 
 import net . minecraftforge . fml . common . DuplicateModsFoundException ; 
 @ @ - 76 , 6 + 78 , 7 @ @ import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLContainerHolder ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . IFMLSidedHandler ; 
 + import net . minecraftforge . fml . common . Java8VersionException ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderException ; 
 import net . minecraftforge . fml . common . MetadataCollection ; 
 @ @ - 158 , 6 + 161 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 
 private boolean loading = true ; 
 
 + private Java8VersionException j8onlymods ; 
 + 
 private WrongMinecraftVersionException wrongMC ; 
 
 private CustomModLoadingErrorDisplayException customError ; 
 @ @ - 212 , 6 + 217 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 dupesFound = dupes ; 
 } 
 + catch ( Java8VersionException j8mods ) 
 + { 
 + j8onlymods = j8mods ; 
 + } 
 catch ( MissingModsException missing ) 
 { 
 modsMissing = missing ; 
 @ @ - 297 , 7 + 306 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 * / 
 public void finishMinecraftLoading ( ) 
 { 
 - if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null ) 
 + if ( modsMissing ! = null | | wrongMC ! = null | | customError ! = null | | dupesFound ! = null | | modSorting ! = null | | j8onlymods ! = null ) 
 { 
 SplashProgress . finish ( ) ; 
 return ; 
 @ @ - 344 , 6 + 353 , 8 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 loading = false ; 
 client . gameSettings . loadOptions ( ) ; / / Reload options to load any mod added keybindings . 
 + Loader . instance ( ) . loadingComplete ( ) ; 
 + SplashProgress . finish ( ) ; 
 } 
 
 public void extendModList ( ) 
 @ @ - 383 , 6 + 394 , 10 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 { 
 showGuiScreen ( new GuiWrongMinecraft ( wrongMC ) ) ; 
 } 
 + else if ( j8onlymods ! = null ) 
 + { 
 + showGuiScreen ( new GuiJava8Error ( j8onlymods ) ) ; 
 + } 
 else if ( modsMissing ! = null ) 
 { 
 showGuiScreen ( new GuiModsMissing ( modsMissing ) ) ; 
 @ @ - 401 , 10 + 416 , 16 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 else 
 { 
 - Loader . instance ( ) . loadingComplete ( ) ; 
 - SplashProgress . finish ( ) ; 
 + logMissingTextureErrors ( ) ; 
 + if ( ! Loader . instance ( ) . java8 ) 
 + { 
 + if ( ( new Date ( ) ) . getTime ( ) > = ForgeModContainer . java8Reminder + ( 1000 * 60 * 60 * 24 ) ) 
 + { 
 + showGuiScreen ( new GuiJava8Error ( new Java8VersionException ( Collections . < ModContainer > emptyList ( ) ) ) ) ; 
 + ForgeModContainer . updateNag ( ) ; 
 + } 
 + } 
 } 
 - logMissingTextureErrors ( ) ; 
 } 
 / * * 
 * Get the server instance 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 new file mode 100644 
 index 0000000 . . af3071d 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiJava8Error . java 
 @ @ - 0 , 0 + 1 , 140 @ @ 
 + / * 
 + * Forge Mod Loader 
 + * Copyright ( c ) 2012 - 2013 cpw . 
 + * All rights reserved . This program and the accompanying materials 
 + * are made available under the terms of the GNU Lesser Public License v2 . 1 
 + * which accompanies this distribution , and is available at 
 + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html 
 + * 
 + * Contributors : 
 + * cpw - implementation 
 + * / 
 + 
 + package net . minecraftforge . fml . client ; 
 + 
 + import net . minecraft . client . gui . GuiButton ; 
 + import net . minecraft . client . gui . GuiErrorScreen ; 
 + import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . util . text . TextFormatting ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Java8VersionException ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import org . apache . logging . log4j . Level ; 
 + 
 + import com . google . common . collect . Lists ; 
 + 
 + import java . awt . * ; 
 + import java . io . IOException ; 
 + import java . net . URI ; 
 + import java . util . List ; 
 + 
 + public class GuiJava8Error extends GuiErrorScreen 
 + { 
 + private Java8VersionException java8VersionException ; 
 + public GuiJava8Error ( Java8VersionException java8VersionException ) 
 + { 
 + super ( null , null ) ; 
 + this . java8VersionException = java8VersionException ; 
 + } 
 + 
 + @ Override 
 + public void initGui ( ) 
 + { 
 + this . buttonList . clear ( ) ; 
 + this . buttonList . add ( new GuiButton ( 1 , 50 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . visitjavadownloads " ) ) ) ; 
 + if ( java8VersionException . getMods ( ) . isEmpty ( ) ) 
 + { 
 + this . buttonList . add ( new GuiButton ( 3 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " fml . button . continue " ) ) ) ; 
 + } 
 + else 
 + { 
 + this . buttonList . add ( new GuiButton ( 2 , this . width / 2 + 5 , this . height - 38 , this . width / 2 - 55 , 20 , I18n . format ( " menu . quit " ) ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + protected void actionPerformed ( GuiButton button ) throws IOException 
 + { 
 + if ( button . id = = 1 ) 
 + { 
 + try 
 + { 
 + Desktop . getDesktop ( ) . browse ( new URI ( " http : / / www . oracle . com / technetwork / java / javase / downloads / index . html " ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log ( Level . ERROR , e , " Problem launching browser " ) ; 
 + } 
 + } 
 + else if ( button . id = = 2 ) 
 + { 
 + FMLCommonHandler . instance ( ) . exitJava ( 1 , true ) ; 
 + } 
 + else if ( button . id = = 3 ) 
 + { 
 + FMLClientHandler . instance ( ) . showGuiScreen ( null ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void drawScreen ( int mouseX , int mouseY , float partialTicks ) 
 + { 
 + this . drawDefaultBackground ( ) ; 
 + int offset = 25 ; 
 + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 + { 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8problem " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + } 
 + else 
 + { 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . java8recommended " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + } 
 + offset + = 15 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . javaversion " , System . getProperty ( " java . version " ) . split ( " \ \ . " ) [ 1 ] , System . getProperty ( " java . version " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 10 ; 
 + if ( ! java8VersionException . getMods ( ) . isEmpty ( ) ) 
 + { 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . upgradejavaorremove " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 15 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . modslistedbelow " , I18n . format ( " fml . messages . requirejava8 " ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 10 ; 
 + this . drawCenteredString ( this . fontRendererObj , I18n . format ( " fml . messages . countbadandgood " , java8VersionException . getMods ( ) . size ( ) , Loader . instance ( ) . getActiveModList ( ) . size ( ) ) , this . width / 2 , offset , 0xFFFFFF ) ; 
 + offset + = 5 ; 
 + for ( ModContainer mc : java8VersionException . getMods ( ) ) 
 + { 
 + offset + = 10 ; 
 + this . drawCenteredString ( this . fontRendererObj , String . format ( " % s ( % s ) " , mc . getName ( ) , mc . getModId ( ) ) , this . width / 2 , offset , 0xEEEEEE ) ; 
 + } 
 + } 
 + else 
 + { 
 + String text = I18n . format ( " fml . messages . upgradejava " , TextFormatting . RED , TextFormatting . BOLD , TextFormatting . RESET ) . replaceAll ( " \ \ \ \ n " , " \ n " ) ; 
 + List < String > lines = Lists . newArrayList ( ) ; 
 + for ( String line : text . split ( " \ n " ) ) 
 + { 
 + lines . addAll ( this . fontRendererObj . listFormattedStringToWidth ( line , this . width - this . fontRendererObj . FONT _ HEIGHT * 4 ) ) ; 
 + } 
 + 
 + int maxWidth = 0 ; 
 + for ( String line : lines ) 
 + { 
 + maxWidth = Math . max ( maxWidth , this . fontRendererObj . getStringWidth ( line ) ) ; 
 + } 
 + 
 + for ( String line : lines ) 
 + { 
 + this . drawString ( this . fontRendererObj , line , ( this . width - maxWidth ) / 2 , offset , 0xFFFFFF ) ; 
 + offset + = this . fontRendererObj . FONT _ HEIGHT + 2 ; 
 + } 
 + 
 + offset + = 15 ; 
 + } 
 + / / super . super 
 + for ( int i = 0 ; i < this . buttonList . size ( ) ; + + i ) 
 + { 
 + ( ( GuiButton ) this . buttonList . get ( i ) ) . drawButton ( this . mc , mouseX , mouseY ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 index d9e11b3 . . d73d347 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 @ @ - 32 , 6 + 32 , 7 @ @ public class DummyModContainer implements ModContainer 
 private ModMetadata md ; 
 private ArtifactVersion processedVersion ; 
 private String label ; 
 + private int classVersion ; 
 
 public DummyModContainer ( ModMetadata md ) 
 { 
 @ @ - 213 , 4 + 214 , 16 @ @ public class DummyModContainer implements ModContainer 
 { 
 return null ; 
 } 
 + 
 + @ Override 
 + public void setClassVersion ( int classVersion ) 
 + { 
 + this . classVersion = classVersion ; 
 + } 
 + 
 + @ Override 
 + public int getClassVersion ( ) 
 + { 
 + return this . classVersion ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 8452fdc . . 8cc40bf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 90 , 6 + 90 , 7 @ @ public class FMLModContainer implements ModContainer 
 private Map < String , String > customModProperties ; 
 private ModCandidate candidate ; 
 private URL updateJSONUrl ; 
 + private int classVersion ; 
 
 public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) 
 { 
 @ @ - 699 , 4 + 700 , 16 @ @ public class FMLModContainer implements ModContainer 
 { 
 return updateJSONUrl ; 
 } 
 + 
 + @ Override 
 + public void setClassVersion ( int classVersion ) 
 + { 
 + this . classVersion = classVersion ; 
 + } 
 + 
 + @ Override 
 + public int getClassVersion ( ) 
 + { 
 + return this . classVersion ; 
 + } 
 } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 index 783c28b . . 94c67cf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 @ @ - 214 , 4 + 214 , 16 @ @ public class InjectedModContainer implements ModContainer 
 { 
 return wrappedContainer . getUpdateUrl ( ) ; 
 } 
 + 
 + @ Override 
 + public void setClassVersion ( int classVersion ) 
 + { 
 + wrappedContainer . setClassVersion ( classVersion ) ; 
 + } 
 + 
 + @ Override 
 + public int getClassVersion ( ) 
 + { 
 + return wrappedContainer . getClassVersion ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 new file mode 100644 
 index 0000000 . . c9200f6 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / Java8VersionException . java 
 @ @ - 0 , 0 + 1 , 43 @ @ 
 + / * 
 + * Forge Mod Loader 
 + * Copyright ( c ) 2012 - 2013 cpw . 
 + * All rights reserved . This program and the accompanying materials 
 + * are made available under the terms of the GNU Lesser Public License v2 . 1 
 + * which accompanies this distribution , and is available at 
 + * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html 
 + * 
 + * Contributors : 
 + * cpw - implementation 
 + * / 
 + 
 + package net . minecraftforge . fml . common ; 
 + 
 + import java . util . List ; 
 + 
 + public class Java8VersionException extends EnhancedRuntimeException 
 + { 
 + private static final long serialVersionUID = 1L ; 
 + private final List < ModContainer > mods ; 
 + 
 + public Java8VersionException ( List < ModContainer > mods ) 
 + { 
 + super ( " Mods require Java 8 " ) ; 
 + this . mods = mods ; 
 + } 
 + 
 + @ Override 
 + protected void printStackTrace ( WrappedPrintStream stream ) 
 + { 
 + stream . println ( " Mods requiring Java 8 : " ) ; 
 + for ( ModContainer mc : mods ) 
 + { 
 + stream . println ( String . format ( " \ t % s : % s " , mc . getName ( ) , mc . getModId ( ) ) ) ; 
 + } 
 + stream . println ( " " ) ; 
 + } 
 + 
 + public List < ModContainer > getMods ( ) 
 + { 
 + return mods ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 4bca3c0 . . f4b5142 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 161 , 6 + 161 , 7 @ @ public class Loader 
 private File forcedModFile ; 
 private ModDiscoverer discoverer ; 
 private ProgressBar progressBar ; 
 + public final boolean java8 ; 
 
 public static Loader instance ( ) 
 { 
 @ @ - 187 , 6 + 188 , 14 @ @ public class Loader 
 
 private Loader ( ) 
 { 
 + String [ ] ver = System . getProperty ( " java . version " ) . split ( " \ \ . " ) ; 
 + int major = Integer . parseInt ( ver [ 1 ] ) ; 
 + java8 = major > 7 ; 
 + if ( ! java8 ) 
 + { 
 + FMLLog . severe ( " The game is not running with Java 8 . Forge recommends Java 8 for maximum compatibility with mods " ) ; 
 + } 
 + 
 modClassLoader = new ModClassLoader ( getClass ( ) . getClassLoader ( ) ) ; 
 if ( ! mccversion . equals ( MC _ VERSION ) ) 
 { 
 @ @ - 489 , 6 + 498 , 7 @ @ public class Loader 
 ModAPIManager . INSTANCE . manageAPI ( modClassLoader , discoverer ) ; 
 disableRequestedMods ( ) ; 
 modController . distributeStateMessage ( FMLLoadEvent . class ) ; 
 + checkJavaCompatibility ( ) ; 
 sortModList ( ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( modController . getActiveModList ( ) ) ; 
 ModAPIManager . INSTANCE . cleanupAPIContainers ( mods ) ; 
 @ @ - 543 , 6 + 553 , 24 @ @ public class Loader 
 modController . transition ( LoaderState . PREINITIALIZATION , false ) ; 
 } 
 
 + 
 + private void checkJavaCompatibility ( ) 
 + { 
 + if ( java8 ) return ; 
 + List < ModContainer > j8mods = Lists . newArrayList ( ) ; 
 + for ( ModContainer mc : getActiveModList ( ) ) 
 + { 
 + if ( mc . getClassVersion ( ) > = 52 ) 
 + { 
 + j8mods . add ( mc ) ; 
 + } 
 + } 
 + if ( ! j8mods . isEmpty ( ) ) 
 + { 
 + throw new Java8VersionException ( j8mods ) ; 
 + } 
 + } 
 + 
 public void preinitializeMods ( ) 
 { 
 if ( ! modController . isInState ( LoaderState . PREINITIALIZATION ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 index 883f8b9 . . cd82ff0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 @ @ - 152 , 4 + 152 , 8 @ @ public interface ModContainer 
 boolean shouldLoadInEnvironment ( ) ; 
 
 URL getUpdateUrl ( ) ; 
 + 
 + void setClassVersion ( int classVersion ) ; 
 + 
 + int getClassVersion ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 index 6eb8dec . . 0fd5d7d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 @ @ - 35 , 6 + 35 , 7 @ @ public class ASMDataTable 
 private String annotationName ; 
 private String className ; 
 private String objectName ; 
 + private int classVersion ; 
 private Map < String , Object > annotationInfo ; 
 public ASMData ( ModCandidate candidate , String annotationName , String className , String objectName , Map < String , Object > info ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 index 226ddd6 . . 77346da 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 @ @ - 83 , 6 + 83 , 7 @ @ public class JarDiscoverer implements ITypeDiscoverer 
 table . addContainer ( container ) ; 
 foundMods . add ( container ) ; 
 container . bindMetadata ( mc ) ; 
 + container . setClassVersion ( modParser . getClassVersion ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 7c35d8e . . cbdf668 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 1 , 5 + 1 , 5 @ @ 
 commands . forge . usage = Use / forge < subcommand > . Subcommands are tps , track 
 - commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . 
 + commands . forge . usage . tracking = Use / forge track < type > < duration > . Valid types are te ( Tile Entities ) . Duration is < 60 . 
 commands . forge . tps . summary = % s : Mean tick time : % d ms . Mean TPS : % d 
 
 commands . forge . tracking . te . enabled = Tile Entity tracking enabled for % d seconds . 
 @ @ - 153 , 4 + 153 , 18 @ @ fml . menu . mods . normal = Normal 
 fml . menu . mods . search = Search : 
 fml . menu . modoptions = Mod Options . . . 
 
 - item . forge . bucketFilled . name = % s Bucket 
 \ No newline at end of file 
 + item . forge . bucketFilled . name = % s Bucket 
 + 
 + fml . messages . java8problem = % s % sJava Update Required % s 
 + fml . messages . java8recommended = % s % sJava Update Recommended % s 
 + fml . messages . modslistedbelow = The mods listed below % s 
 + fml . messages . requirejava8 = require Java 8 
 + fml . messages . java8warning . 1 = % sJAVA VERSION WARNING % s UPDATE JAVA ! 
 + fml . messages . java8warning . 2 = You need to update Java 
 + fml . messages . javaversion = Your Java version is Java % s ( version string % s ) 
 + fml . messages . upgradejavaorremove = % s % sUpdate Java % s or remove these mods to play 
 + fml . messages . upgradejava = \ n \ nPros of updating to Java 8 \ n - Better Performance \ n - Better Security \ n - Better Compatibility with newer mods 
 + fml . messages . countbadandgood = % s of % s mods have this problem 
 + 
 + fml . button . visitjavadownloads = Oracle Java SE Downloads 
 + fml . button . continue = Continue 
 \ No newline at end of file
