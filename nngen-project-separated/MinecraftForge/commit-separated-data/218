BLEU SCORE: 0.024615130620079664

TEST MSG: Switch from trove to fastutil collections
GENERATED MSG: Fix getting missing models for overridden Item registry entires

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java <nl> index ff551e0 . . c2e6abe 100644 <nl> - - - a / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java <nl> + + + b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java <nl> @ @ - 20 , 17 + 20 , 18 @ @ <nl> package net . minecraftforge . advancements . critereon ; <nl> <nl> import com . google . gson . JsonObject ; <nl> - import gnu . trove . map . hash . THashMap ; <nl> + <nl> import net . minecraft . advancements . critereon . ItemPredicate ; <nl> import net . minecraft . util . ResourceLocation ; <nl> <nl> import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> import java . util . Map ; <nl> import java . util . function . Function ; <nl> <nl> public class ItemPredicates <nl> { <nl> - private static final Map < ResourceLocation , Function < JsonObject , ItemPredicate > > predicates = new THashMap < > ( ) ; <nl> + private static final Map < ResourceLocation , Function < JsonObject , ItemPredicate > > predicates = new HashMap < > ( ) ; <nl> <nl> static <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java <nl> index a2f61f7 . . 9263d39 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java <nl> @ @ - 23 , 7 + 23 , 9 @ @ import java . util . Map ; <nl> <nl> import com . google . common . collect . Maps ; <nl> <nl> - import gnu . trove . map . hash . TIntObjectHashMap ; <nl> + import it . unimi . dsi . fastutil . ints . Int2ObjectMap ; <nl> + import it . unimi . dsi . fastutil . ints . Int2ObjectOpenHashMap ; <nl> + <nl> import net . minecraft . client . renderer . ItemModelMesher ; <nl> import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> import net . minecraft . client . renderer . block . model . ModelManager ; <nl> @ @ - 36 , 8 + 38 , 8 @ @ import net . minecraftforge . registries . IRegistryDelegate ; <nl> * / <nl> public class ItemModelMesherForge extends ItemModelMesher <nl> { <nl> - Map < IRegistryDelegate < Item > , TIntObjectHashMap < ModelResourceLocation > > locations = Maps . newHashMap ( ) ; <nl> - Map < IRegistryDelegate < Item > , TIntObjectHashMap < IBakedModel > > models = Maps . newHashMap ( ) ; <nl> + final Map < IRegistryDelegate < Item > , Int2ObjectMap < ModelResourceLocation > > locations = Maps . newHashMap ( ) ; <nl> + final Map < IRegistryDelegate < Item > , Int2ObjectMap < IBakedModel > > models = Maps . newHashMap ( ) ; <nl> <nl> public ItemModelMesherForge ( ModelManager manager ) <nl> { <nl> @ @ - 47 , 7 + 49 , 7 @ @ public class ItemModelMesherForge extends ItemModelMesher <nl> @ Override <nl> protected IBakedModel getItemModel ( Item item , int meta ) <nl> { <nl> - TIntObjectHashMap < IBakedModel > map = models . get ( item . delegate ) ; <nl> + Int2ObjectMap < IBakedModel > map = models . get ( item . delegate ) ; <nl> return map = = null ? null : map . get ( meta ) ; <nl> } <nl> <nl> @ @ - 55 , 16 + 57 , 16 @ @ public class ItemModelMesherForge extends ItemModelMesher <nl> public void register ( Item item , int meta , ModelResourceLocation location ) <nl> { <nl> IRegistryDelegate < Item > key = item . delegate ; <nl> - TIntObjectHashMap < ModelResourceLocation > locs = locations . get ( key ) ; <nl> - TIntObjectHashMap < IBakedModel > mods = models . get ( key ) ; <nl> + Int2ObjectMap < ModelResourceLocation > locs = locations . get ( key ) ; <nl> + Int2ObjectMap < IBakedModel > mods = models . get ( key ) ; <nl> if ( locs = = null ) <nl> { <nl> - locs = new TIntObjectHashMap < ModelResourceLocation > ( ) ; <nl> + locs = new Int2ObjectOpenHashMap < > ( ) ; <nl> locations . put ( key , locs ) ; <nl> } <nl> if ( mods = = null ) <nl> { <nl> - mods = new TIntObjectHashMap < IBakedModel > ( ) ; <nl> + mods = new Int2ObjectOpenHashMap < > ( ) ; <nl> models . put ( key , mods ) ; <nl> } <nl> locs . put ( meta , location ) ; <nl> @ @ - 75 , 24 + 77 , 22 @ @ public class ItemModelMesherForge extends ItemModelMesher <nl> public void rebuildCache ( ) <nl> { <nl> final ModelManager manager = this . getModelManager ( ) ; <nl> - for ( Map . Entry < IRegistryDelegate < Item > , TIntObjectHashMap < ModelResourceLocation > > e : locations . entrySet ( ) ) <nl> + for ( Map . Entry < IRegistryDelegate < Item > , Int2ObjectMap < ModelResourceLocation > > e : locations . entrySet ( ) ) <nl> { <nl> - TIntObjectHashMap < IBakedModel > mods = models . get ( e . getKey ( ) ) ; <nl> + Int2ObjectMap < IBakedModel > mods = models . get ( e . getKey ( ) ) ; <nl> if ( mods ! = null ) <nl> { <nl> mods . clear ( ) ; <nl> } <nl> else <nl> { <nl> - mods = new TIntObjectHashMap < IBakedModel > ( ) ; <nl> + mods = new Int2ObjectOpenHashMap < > ( ) ; <nl> models . put ( e . getKey ( ) , mods ) ; <nl> } <nl> - final TIntObjectHashMap < IBakedModel > map = mods ; <nl> - e . getValue ( ) . forEachEntry ( ( meta , location ) - > <nl> - { <nl> - map . put ( meta , manager . getModel ( location ) ) ; <nl> - return true ; <nl> - } ) ; <nl> + final Int2ObjectMap < IBakedModel > map = mods ; <nl> + e . getValue ( ) . int2ObjectEntrySet ( ) . forEach ( entry - > <nl> + map . put ( entry . getIntKey ( ) , manager . getModel ( entry . getValue ( ) ) ) <nl> + ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java <nl> index 17e9d09 . . 77213b0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java <nl> @ @ - 19 , 8 + 19 , 6 @ @ <nl> <nl> package net . minecraftforge . fml . common . network ; <nl> <nl> - import gnu . trove . map . hash . TByteObjectHashMap ; <nl> - import gnu . trove . map . hash . TObjectByteHashMap ; <nl> import io . netty . buffer . ByteBuf ; <nl> import io . netty . buffer . Unpooled ; <nl> import io . netty . channel . ChannelHandler . Sharable ; <nl> @ @ - 31 , 14 + 29 , 20 @ @ import io . netty . util . AttributeKey ; <nl> import java . lang . ref . WeakReference ; <nl> import java . util . List ; <nl> <nl> + import it . unimi . dsi . fastutil . bytes . Byte2ObjectMap ; <nl> + import it . unimi . dsi . fastutil . bytes . Byte2ObjectOpenHashMap ; <nl> + import it . unimi . dsi . fastutil . objects . Object2ByteMap ; <nl> + import it . unimi . dsi . fastutil . objects . Object2ByteOpenHashMap ; <nl> + <nl> import net . minecraft . network . PacketBuffer ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . network . internal . FMLProxyPacket ; <nl> <nl> @ Sharable <nl> - public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessageCodec < FMLProxyPacket , A > { <nl> - private TByteObjectHashMap < Class < ? extends A > > discriminators = new TByteObjectHashMap < Class < ? extends A > > ( ) ; <nl> - private TObjectByteHashMap < Class < ? extends A > > types = new TObjectByteHashMap < Class < ? extends A > > ( ) ; <nl> + public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessageCodec < FMLProxyPacket , A > <nl> + { <nl> + private final Byte2ObjectMap < Class < ? extends A > > discriminators = new Byte2ObjectOpenHashMap < > ( ) ; <nl> + private final Object2ByteMap < Class < ? extends A > > types = new Object2ByteOpenHashMap < > ( ) ; <nl> <nl> / * * <nl> * Make this accessible to subclasses <nl> @ @ - 71 , 7 + 75 , 7 @ @ public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessag <nl> { <nl> throw new RuntimeException ( " Undefined discriminator for message type " + clazz . getSimpleName ( ) + " in channel " + channel ) ; <nl> } <nl> - byte discriminator = types . get ( clazz ) ; <nl> + byte discriminator = types . getByte ( clazz ) ; <nl> PacketBuffer buffer = new PacketBuffer ( Unpooled . buffer ( ) ) ; <nl> buffer . writeByte ( discriminator ) ; <nl> encodeInto ( ctx , msg , buffer ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java <nl> index 99670a5 . . a2f61f7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java <nl> @ @ - 19 , 26 + 19 , 25 @ @ <nl> <nl> package net . minecraftforge . client ; <nl> <nl> - import java . util . IdentityHashMap ; <nl> import java . util . Map ; <nl> <nl> import com . google . common . collect . Maps ; <nl> <nl> import gnu . trove . map . hash . TIntObjectHashMap ; <nl> - import gnu . trove . procedure . TIntObjectProcedure ; <nl> import net . minecraft . client . renderer . ItemModelMesher ; <nl> import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> import net . minecraft . client . renderer . block . model . ModelManager ; <nl> import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> import net . minecraft . item . Item ; <nl> + import net . minecraftforge . registries . IRegistryDelegate ; <nl> <nl> / * * <nl> * Wrapper around ItemModeMesher that cleans up the internal maps to respect ID remapping . <nl> * / <nl> public class ItemModelMesherForge extends ItemModelMesher <nl> { <nl> - IdentityHashMap < Item , TIntObjectHashMap < ModelResourceLocation > > locations = Maps . newIdentityHashMap ( ) ; <nl> - IdentityHashMap < Item , TIntObjectHashMap < IBakedModel > > models = Maps . newIdentityHashMap ( ) ; <nl> + Map < IRegistryDelegate < Item > , TIntObjectHashMap < ModelResourceLocation > > locations = Maps . newHashMap ( ) ; <nl> + Map < IRegistryDelegate < Item > , TIntObjectHashMap < IBakedModel > > models = Maps . newHashMap ( ) ; <nl> <nl> public ItemModelMesherForge ( ModelManager manager ) <nl> { <nl> @ @ - 48 , 24 + 47 , 25 @ @ public class ItemModelMesherForge extends ItemModelMesher <nl> @ Override <nl> protected IBakedModel getItemModel ( Item item , int meta ) <nl> { <nl> - TIntObjectHashMap < IBakedModel > map = models . get ( item ) ; <nl> + TIntObjectHashMap < IBakedModel > map = models . get ( item . delegate ) ; <nl> return map = = null ? null : map . get ( meta ) ; <nl> } <nl> <nl> @ Override <nl> public void register ( Item item , int meta , ModelResourceLocation location ) <nl> { <nl> - TIntObjectHashMap < ModelResourceLocation > locs = locations . get ( item ) ; <nl> - TIntObjectHashMap < IBakedModel > mods = models . get ( item ) ; <nl> + IRegistryDelegate < Item > key = item . delegate ; <nl> + TIntObjectHashMap < ModelResourceLocation > locs = locations . get ( key ) ; <nl> + TIntObjectHashMap < IBakedModel > mods = models . get ( key ) ; <nl> if ( locs = = null ) <nl> { <nl> locs = new TIntObjectHashMap < ModelResourceLocation > ( ) ; <nl> - locations . put ( item , locs ) ; <nl> + locations . put ( key , locs ) ; <nl> } <nl> if ( mods = = null ) <nl> { <nl> mods = new TIntObjectHashMap < IBakedModel > ( ) ; <nl> - models . put ( item , mods ) ; <nl> + models . put ( key , mods ) ; <nl> } <nl> locs . put ( meta , location ) ; <nl> mods . put ( meta , getModelManager ( ) . getModel ( location ) ) ; <nl> @ @ - 75 , 7 + 75 , 7 @ @ public class ItemModelMesherForge extends ItemModelMesher <nl> public void rebuildCache ( ) <nl> { <nl> final ModelManager manager = this . getModelManager ( ) ; <nl> - for ( Map . Entry < Item , TIntObjectHashMap < ModelResourceLocation > > e : locations . entrySet ( ) ) <nl> + for ( Map . Entry < IRegistryDelegate < Item > , TIntObjectHashMap < ModelResourceLocation > > e : locations . entrySet ( ) ) <nl> { <nl> TIntObjectHashMap < IBakedModel > mods = models . get ( e . getKey ( ) ) ; <nl> if ( mods ! = null )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java 
 index ff551e0 . . c2e6abe 100644 
 - - - a / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java 
 + + + b / src / main / java / net / minecraftforge / advancements / critereon / ItemPredicates . java 
 @ @ - 20 , 17 + 20 , 18 @ @ 
 package net . minecraftforge . advancements . critereon ; 
 
 import com . google . gson . JsonObject ; 
 - import gnu . trove . map . hash . THashMap ; 
 + 
 import net . minecraft . advancements . critereon . ItemPredicate ; 
 import net . minecraft . util . ResourceLocation ; 
 
 import java . util . Collections ; 
 + import java . util . HashMap ; 
 import java . util . Map ; 
 import java . util . function . Function ; 
 
 public class ItemPredicates 
 { 
 - private static final Map < ResourceLocation , Function < JsonObject , ItemPredicate > > predicates = new THashMap < > ( ) ; 
 + private static final Map < ResourceLocation , Function < JsonObject , ItemPredicate > > predicates = new HashMap < > ( ) ; 
 
 static 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java 
 index a2f61f7 . . 9263d39 100644 
 - - - a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java 
 + + + b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java 
 @ @ - 23 , 7 + 23 , 9 @ @ import java . util . Map ; 
 
 import com . google . common . collect . Maps ; 
 
 - import gnu . trove . map . hash . TIntObjectHashMap ; 
 + import it . unimi . dsi . fastutil . ints . Int2ObjectMap ; 
 + import it . unimi . dsi . fastutil . ints . Int2ObjectOpenHashMap ; 
 + 
 import net . minecraft . client . renderer . ItemModelMesher ; 
 import net . minecraft . client . renderer . block . model . IBakedModel ; 
 import net . minecraft . client . renderer . block . model . ModelManager ; 
 @ @ - 36 , 8 + 38 , 8 @ @ import net . minecraftforge . registries . IRegistryDelegate ; 
 * / 
 public class ItemModelMesherForge extends ItemModelMesher 
 { 
 - Map < IRegistryDelegate < Item > , TIntObjectHashMap < ModelResourceLocation > > locations = Maps . newHashMap ( ) ; 
 - Map < IRegistryDelegate < Item > , TIntObjectHashMap < IBakedModel > > models = Maps . newHashMap ( ) ; 
 + final Map < IRegistryDelegate < Item > , Int2ObjectMap < ModelResourceLocation > > locations = Maps . newHashMap ( ) ; 
 + final Map < IRegistryDelegate < Item > , Int2ObjectMap < IBakedModel > > models = Maps . newHashMap ( ) ; 
 
 public ItemModelMesherForge ( ModelManager manager ) 
 { 
 @ @ - 47 , 7 + 49 , 7 @ @ public class ItemModelMesherForge extends ItemModelMesher 
 @ Override 
 protected IBakedModel getItemModel ( Item item , int meta ) 
 { 
 - TIntObjectHashMap < IBakedModel > map = models . get ( item . delegate ) ; 
 + Int2ObjectMap < IBakedModel > map = models . get ( item . delegate ) ; 
 return map = = null ? null : map . get ( meta ) ; 
 } 
 
 @ @ - 55 , 16 + 57 , 16 @ @ public class ItemModelMesherForge extends ItemModelMesher 
 public void register ( Item item , int meta , ModelResourceLocation location ) 
 { 
 IRegistryDelegate < Item > key = item . delegate ; 
 - TIntObjectHashMap < ModelResourceLocation > locs = locations . get ( key ) ; 
 - TIntObjectHashMap < IBakedModel > mods = models . get ( key ) ; 
 + Int2ObjectMap < ModelResourceLocation > locs = locations . get ( key ) ; 
 + Int2ObjectMap < IBakedModel > mods = models . get ( key ) ; 
 if ( locs = = null ) 
 { 
 - locs = new TIntObjectHashMap < ModelResourceLocation > ( ) ; 
 + locs = new Int2ObjectOpenHashMap < > ( ) ; 
 locations . put ( key , locs ) ; 
 } 
 if ( mods = = null ) 
 { 
 - mods = new TIntObjectHashMap < IBakedModel > ( ) ; 
 + mods = new Int2ObjectOpenHashMap < > ( ) ; 
 models . put ( key , mods ) ; 
 } 
 locs . put ( meta , location ) ; 
 @ @ - 75 , 24 + 77 , 22 @ @ public class ItemModelMesherForge extends ItemModelMesher 
 public void rebuildCache ( ) 
 { 
 final ModelManager manager = this . getModelManager ( ) ; 
 - for ( Map . Entry < IRegistryDelegate < Item > , TIntObjectHashMap < ModelResourceLocation > > e : locations . entrySet ( ) ) 
 + for ( Map . Entry < IRegistryDelegate < Item > , Int2ObjectMap < ModelResourceLocation > > e : locations . entrySet ( ) ) 
 { 
 - TIntObjectHashMap < IBakedModel > mods = models . get ( e . getKey ( ) ) ; 
 + Int2ObjectMap < IBakedModel > mods = models . get ( e . getKey ( ) ) ; 
 if ( mods ! = null ) 
 { 
 mods . clear ( ) ; 
 } 
 else 
 { 
 - mods = new TIntObjectHashMap < IBakedModel > ( ) ; 
 + mods = new Int2ObjectOpenHashMap < > ( ) ; 
 models . put ( e . getKey ( ) , mods ) ; 
 } 
 - final TIntObjectHashMap < IBakedModel > map = mods ; 
 - e . getValue ( ) . forEachEntry ( ( meta , location ) - > 
 - { 
 - map . put ( meta , manager . getModel ( location ) ) ; 
 - return true ; 
 - } ) ; 
 + final Int2ObjectMap < IBakedModel > map = mods ; 
 + e . getValue ( ) . int2ObjectEntrySet ( ) . forEach ( entry - > 
 + map . put ( entry . getIntKey ( ) , manager . getModel ( entry . getValue ( ) ) ) 
 + ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java 
 index 17e9d09 . . 77213b0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / FMLIndexedMessageToMessageCodec . java 
 @ @ - 19 , 8 + 19 , 6 @ @ 
 
 package net . minecraftforge . fml . common . network ; 
 
 - import gnu . trove . map . hash . TByteObjectHashMap ; 
 - import gnu . trove . map . hash . TObjectByteHashMap ; 
 import io . netty . buffer . ByteBuf ; 
 import io . netty . buffer . Unpooled ; 
 import io . netty . channel . ChannelHandler . Sharable ; 
 @ @ - 31 , 14 + 29 , 20 @ @ import io . netty . util . AttributeKey ; 
 import java . lang . ref . WeakReference ; 
 import java . util . List ; 
 
 + import it . unimi . dsi . fastutil . bytes . Byte2ObjectMap ; 
 + import it . unimi . dsi . fastutil . bytes . Byte2ObjectOpenHashMap ; 
 + import it . unimi . dsi . fastutil . objects . Object2ByteMap ; 
 + import it . unimi . dsi . fastutil . objects . Object2ByteOpenHashMap ; 
 + 
 import net . minecraft . network . PacketBuffer ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . network . internal . FMLProxyPacket ; 
 
 @ Sharable 
 - public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessageCodec < FMLProxyPacket , A > { 
 - private TByteObjectHashMap < Class < ? extends A > > discriminators = new TByteObjectHashMap < Class < ? extends A > > ( ) ; 
 - private TObjectByteHashMap < Class < ? extends A > > types = new TObjectByteHashMap < Class < ? extends A > > ( ) ; 
 + public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessageCodec < FMLProxyPacket , A > 
 + { 
 + private final Byte2ObjectMap < Class < ? extends A > > discriminators = new Byte2ObjectOpenHashMap < > ( ) ; 
 + private final Object2ByteMap < Class < ? extends A > > types = new Object2ByteOpenHashMap < > ( ) ; 
 
 / * * 
 * Make this accessible to subclasses 
 @ @ - 71 , 7 + 75 , 7 @ @ public abstract class FMLIndexedMessageToMessageCodec < A > extends MessageToMessag 
 { 
 throw new RuntimeException ( " Undefined discriminator for message type " + clazz . getSimpleName ( ) + " in channel " + channel ) ; 
 } 
 - byte discriminator = types . get ( clazz ) ; 
 + byte discriminator = types . getByte ( clazz ) ; 
 PacketBuffer buffer = new PacketBuffer ( Unpooled . buffer ( ) ) ; 
 buffer . writeByte ( discriminator ) ; 
 encodeInto ( ctx , msg , buffer ) ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java 
 index 99670a5 . . a2f61f7 100644 
 - - - a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java 
 + + + b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java 
 @ @ - 19 , 26 + 19 , 25 @ @ 
 
 package net . minecraftforge . client ; 
 
 - import java . util . IdentityHashMap ; 
 import java . util . Map ; 
 
 import com . google . common . collect . Maps ; 
 
 import gnu . trove . map . hash . TIntObjectHashMap ; 
 - import gnu . trove . procedure . TIntObjectProcedure ; 
 import net . minecraft . client . renderer . ItemModelMesher ; 
 import net . minecraft . client . renderer . block . model . IBakedModel ; 
 import net . minecraft . client . renderer . block . model . ModelManager ; 
 import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 import net . minecraft . item . Item ; 
 + import net . minecraftforge . registries . IRegistryDelegate ; 
 
 / * * 
 * Wrapper around ItemModeMesher that cleans up the internal maps to respect ID remapping . 
 * / 
 public class ItemModelMesherForge extends ItemModelMesher 
 { 
 - IdentityHashMap < Item , TIntObjectHashMap < ModelResourceLocation > > locations = Maps . newIdentityHashMap ( ) ; 
 - IdentityHashMap < Item , TIntObjectHashMap < IBakedModel > > models = Maps . newIdentityHashMap ( ) ; 
 + Map < IRegistryDelegate < Item > , TIntObjectHashMap < ModelResourceLocation > > locations = Maps . newHashMap ( ) ; 
 + Map < IRegistryDelegate < Item > , TIntObjectHashMap < IBakedModel > > models = Maps . newHashMap ( ) ; 
 
 public ItemModelMesherForge ( ModelManager manager ) 
 { 
 @ @ - 48 , 24 + 47 , 25 @ @ public class ItemModelMesherForge extends ItemModelMesher 
 @ Override 
 protected IBakedModel getItemModel ( Item item , int meta ) 
 { 
 - TIntObjectHashMap < IBakedModel > map = models . get ( item ) ; 
 + TIntObjectHashMap < IBakedModel > map = models . get ( item . delegate ) ; 
 return map = = null ? null : map . get ( meta ) ; 
 } 
 
 @ Override 
 public void register ( Item item , int meta , ModelResourceLocation location ) 
 { 
 - TIntObjectHashMap < ModelResourceLocation > locs = locations . get ( item ) ; 
 - TIntObjectHashMap < IBakedModel > mods = models . get ( item ) ; 
 + IRegistryDelegate < Item > key = item . delegate ; 
 + TIntObjectHashMap < ModelResourceLocation > locs = locations . get ( key ) ; 
 + TIntObjectHashMap < IBakedModel > mods = models . get ( key ) ; 
 if ( locs = = null ) 
 { 
 locs = new TIntObjectHashMap < ModelResourceLocation > ( ) ; 
 - locations . put ( item , locs ) ; 
 + locations . put ( key , locs ) ; 
 } 
 if ( mods = = null ) 
 { 
 mods = new TIntObjectHashMap < IBakedModel > ( ) ; 
 - models . put ( item , mods ) ; 
 + models . put ( key , mods ) ; 
 } 
 locs . put ( meta , location ) ; 
 mods . put ( meta , getModelManager ( ) . getModel ( location ) ) ; 
 @ @ - 75 , 7 + 75 , 7 @ @ public class ItemModelMesherForge extends ItemModelMesher 
 public void rebuildCache ( ) 
 { 
 final ModelManager manager = this . getModelManager ( ) ; 
 - for ( Map . Entry < Item , TIntObjectHashMap < ModelResourceLocation > > e : locations . entrySet ( ) ) 
 + for ( Map . Entry < IRegistryDelegate < Item > , TIntObjectHashMap < ModelResourceLocation > > e : locations . entrySet ( ) ) 
 { 
 TIntObjectHashMap < IBakedModel > mods = models . get ( e . getKey ( ) ) ; 
 if ( mods ! = null )
