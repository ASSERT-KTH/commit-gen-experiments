BLEU SCORE: 0.0379680177759557

TEST MSG: Added blaming of coremods and mods not targetting Java 6
GENERATED MSG: Make UniqueIdentifier final and add a hashCode . Closes # 348

TEST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / crash / CrashReport . java . patch b / fml / patches / minecraft / net / minecraft / crash / CrashReport . java . patch <nl> index 0e8441a . . 224cdfd 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / crash / CrashReport . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / crash / CrashReport . java . patch <nl> @ @ - 8 , 3 + 8 , 12 @ @ <nl> } <nl> <nl> public String func _ 71501 _ a ( ) <nl> + @ @ - 220 , 6 + 221 , 8 @ @ <nl> + { <nl> + StringBuilder stringbuilder = new StringBuilder ( ) ; <nl> + stringbuilder . append ( " - - - - Minecraft Crash Report - - - - \ n " ) ; <nl> + + net . minecraftforge . fml . common . asm . transformers . BlamingTransformer . onCrash ( stringbuilder ) ; <nl> + + net . minecraftforge . fml . relauncher . CoreModManager . onCrash ( stringbuilder ) ; <nl> + stringbuilder . append ( " / / " ) ; <nl> + stringbuilder . append ( func _ 71503 _ h ( ) ) ; <nl> + stringbuilder . append ( " \ n \ n " ) ; <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index 391ecf9 . . 003cb06 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ import net . minecraftforge . fml . common . gameevent . PlayerEvent ; <nl> import net . minecraftforge . fml . common . gameevent . TickEvent ; <nl> import net . minecraftforge . fml . common . gameevent . TickEvent . Phase ; <nl> import net . minecraftforge . fml . common . network . NetworkRegistry ; <nl> + import net . minecraftforge . fml . relauncher . CoreModManager ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> import net . minecraftforge . fml . server . FMLServerHandler ; <nl> <nl> @ @ - 97 , 6 + 98 , 28 @ @ public class FMLCommonHandler <nl> private WeakReference < SaveHandler > handlerToCheck ; <nl> private EventBus eventBus = new EventBus ( ) ; <nl> private volatile CountDownLatch exitLatch = null ; <nl> + <nl> + private FMLCommonHandler ( ) <nl> + { <nl> + registerCrashCallable ( new ICrashCallable ( ) <nl> + { <nl> + public String call ( ) throws Exception <nl> + { <nl> + StringBuilder builder = new StringBuilder ( ) ; <nl> + Joiner joiner = Joiner . on ( " \ n " ) ; <nl> + for ( String coreMod : CoreModManager . getTransformers ( ) . keySet ( ) ) <nl> + { <nl> + builder . append ( " \ n " + coreMod + " \ n " ) . append ( joiner . join ( CoreModManager . getTransformers ( ) . get ( coreMod ) ) ) ; <nl> + } <nl> + return builder . toString ( ) ; <nl> + } <nl> + <nl> + public String getLabel ( ) <nl> + { <nl> + return " Loaded coremods ( and transformers ) " ; <nl> + } <nl> + } ) ; <nl> + } <nl> / * * <nl> * The FML event bus . Subscribe here for FML related events <nl> * <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 0c06efb . . e4e6ae4 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Set ; <nl> <nl> import net . minecraftforge . fml . common . Mod . Instance ; <nl> import net . minecraftforge . fml . common . Mod . Metadata ; <nl> + import net . minecraftforge . fml . common . asm . transformers . BlamingTransformer ; <nl> import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> import net . minecraftforge . fml . common . discovery . ModCandidate ; <nl> import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; <nl> @ @ - 416 , 6 + 417 , 7 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> try <nl> { <nl> + BlamingTransformer . addClasses ( getModId ( ) , candidate . getClassList ( ) ) ; <nl> ModClassLoader modClassLoader = event . getModClassLoader ( ) ; <nl> modClassLoader . addFile ( source ) ; <nl> modClassLoader . clearNegativeCacheFor ( candidate . getClassList ( ) ) ; <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java b / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> index b7bd56d . . c0f6091 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java <nl> @ @ - 14 , 19 + 14 , 21 @ @ package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> import java . net . MalformedURLException ; <nl> + import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> import java . net . URL ; <nl> import java . net . URLClassLoader ; <nl> + import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> <nl> - import org . apache . logging . log4j . Level ; <nl> - <nl> import net . minecraft . launchwrapper . IClassTransformer ; <nl> import net . minecraft . launchwrapper . LaunchClassLoader ; <nl> import net . minecraftforge . fml . common . asm . transformers . ModAPITransformer ; <nl> import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> import com . google . common . collect . ImmutableList ; <nl> <nl> / * * <nl> @ @ - 59 , 15 + 61 , 18 @ @ public class ModClassLoader extends URLClassLoader <nl> } <nl> <nl> public File [ ] getParentSources ( ) { <nl> - List < URL > urls = mainClassLoader . getSources ( ) ; <nl> - File [ ] sources = new File [ urls . size ( ) ] ; <nl> try <nl> { <nl> - for ( int i = 0 ; i < urls . size ( ) ; i + + ) <nl> + List < File > files = new ArrayList < File > ( ) ; <nl> + for ( URL url : mainClassLoader . getSources ( ) ) <nl> { <nl> - sources [ i ] = new File ( urls . get ( i ) . toURI ( ) ) ; <nl> + URI uri = url . toURI ( ) ; <nl> + if ( uri . getScheme ( ) = = " file " ) <nl> + { <nl> + files . add ( new File ( uri ) ) ; <nl> + } <nl> } <nl> - return sources ; <nl> + return files . toArray ( new File [ ] { } ) ; <nl> } <nl> catch ( URISyntaxException e ) <nl> { <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java <nl> new file mode 100644 <nl> index 0000000 . . 4e14e6e <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java <nl> @ @ - 0 , 0 + 1 , 263 @ @ <nl> + <nl> + <nl> + package net . minecraftforge . fml . common . asm ; <nl> + <nl> + import java . io . ByteArrayInputStream ; <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> + import java . net . URLConnection ; <nl> + import java . net . URLStreamHandler ; <nl> + import java . security . Permission ; <nl> + import java . util . Map ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + <nl> + import net . minecraft . launchwrapper . IClassTransformer ; <nl> + import net . minecraft . launchwrapper . LaunchClassLoader ; <nl> + <nl> + import org . objectweb . asm . ClassVisitor ; <nl> + import org . objectweb . asm . ClassWriter ; <nl> + import org . objectweb . asm . FieldVisitor ; <nl> + import org . objectweb . asm . Opcodes ; <nl> + import org . objectweb . asm . Type ; <nl> + import org . objectweb . asm . commons . GeneratorAdapter ; <nl> + import org . objectweb . asm . commons . Method ; <nl> + <nl> + import com . google . common . cache . CacheBuilder ; <nl> + import com . google . common . cache . CacheLoader ; <nl> + import com . google . common . cache . LoadingCache ; <nl> + import com . google . common . collect . Maps ; <nl> + <nl> + public class ASMTransformerWrapper <nl> + { <nl> + private static final Map < String , String > wrapperModMap = Maps . newHashMap ( ) ; <nl> + private static final Map < String , String > wrapperParentMap = Maps . newHashMap ( ) ; <nl> + <nl> + private static final LoadingCache < String , byte [ ] > wrapperCache = CacheBuilder . newBuilder ( ) <nl> + . maximumSize ( 30 ) <nl> + . weakValues ( ) <nl> + . build ( new CacheLoader < String , byte [ ] > ( ) <nl> + { <nl> + public byte [ ] load ( String file ) throws Exception <nl> + { <nl> + return makeWrapper ( file ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + private static final URL asmGenRoot ; <nl> + private static boolean injected = false ; <nl> + <nl> + static <nl> + { <nl> + try <nl> + { <nl> + asmGenRoot = new URL ( " asmgen " , null , - 1 , " / " , new ASMGenHandler ( ) ) ; <nl> + } <nl> + catch ( MalformedURLException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private static class ASMGenHandler extends URLStreamHandler <nl> + { <nl> + protected URLConnection openConnection ( URL url ) throws IOException <nl> + { <nl> + String file = url . getFile ( ) ; <nl> + if ( file . equals ( " / " ) ) <nl> + { <nl> + return new URLConnection ( url ) <nl> + { <nl> + public void connect ( ) throws IOException <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + } ; <nl> + } <nl> + if ( ! file . startsWith ( " / " ) ) throw new RuntimeException ( " Malformed URL : " + url ) ; <nl> + file = file . substring ( 1 ) ; <nl> + if ( wrapperModMap . containsKey ( file ) ) <nl> + { <nl> + return new ASMGenConnection ( url , file ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + private static class ASMGenConnection extends URLConnection <nl> + { <nl> + private final String file ; <nl> + <nl> + protected ASMGenConnection ( URL url , String file ) <nl> + { <nl> + super ( url ) ; <nl> + this . file = file ; <nl> + } <nl> + <nl> + public void connect ( ) throws IOException <nl> + { <nl> + throw new UnsupportedOperationException ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public InputStream getInputStream ( ) <nl> + { <nl> + try <nl> + { <nl> + return new ByteArrayInputStream ( wrapperCache . get ( file ) ) ; <nl> + } <nl> + catch ( ExecutionException e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public Permission getPermission ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + public static String getTransformerWrapper ( LaunchClassLoader launchLoader , String parentClass , String coreMod ) <nl> + { <nl> + if ( ! injected ) <nl> + { <nl> + injected = true ; <nl> + launchLoader . addURL ( asmGenRoot ) ; <nl> + } <nl> + <nl> + String name = getWrapperName ( parentClass ) ; <nl> + String fileName = name . replace ( ' . ' , ' / ' ) + " . class " ; <nl> + wrapperModMap . put ( fileName , coreMod ) ; <nl> + wrapperParentMap . put ( fileName , parentClass ) ; <nl> + return name ; <nl> + } <nl> + <nl> + private static byte [ ] makeWrapper ( String fileName ) <nl> + { <nl> + if ( ! wrapperModMap . containsKey ( fileName ) | | ! wrapperParentMap . containsKey ( fileName ) | | ! fileName . endsWith ( " . class " ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " makeWrapper called with strange argument : " + fileName ) ; <nl> + } <nl> + String name = fileName . substring ( 0 , fileName . length ( ) - " . class " . length ( ) ) ; <nl> + <nl> + try <nl> + { <nl> + Type wrapper = Type . getType ( TransformerWrapper . class ) ; <nl> + <nl> + ClassWriter writer = new ClassWriter ( ClassWriter . COMPUTE _ FRAMES ) ; <nl> + <nl> + writer . visit ( Opcodes . V1 _ 6 , Opcodes . ACC _ PUBLIC , name , null , wrapper . getInternalName ( ) , null ) ; <nl> + <nl> + Method m = Method . getMethod ( " void < init > ( ) " ) ; <nl> + GeneratorAdapter mg = new GeneratorAdapter ( Opcodes . ACC _ PUBLIC , m , null , null , writer ) ; <nl> + mg . loadThis ( ) ; <nl> + mg . invokeConstructor ( wrapper , m ) ; <nl> + mg . returnValue ( ) ; <nl> + mg . endMethod ( ) ; <nl> + <nl> + m = Method . getMethod ( " java . lang . String getParentClass ( ) " ) ; <nl> + mg = new GeneratorAdapter ( Opcodes . ACC _ PROTECTED , m , null , null , writer ) ; <nl> + mg . push ( wrapperParentMap . get ( fileName ) ) ; <nl> + mg . returnValue ( ) ; <nl> + mg . endMethod ( ) ; <nl> + <nl> + m = Method . getMethod ( " java . lang . String getCoreMod ( ) " ) ; <nl> + mg = new GeneratorAdapter ( Opcodes . ACC _ PROTECTED , m , null , null , writer ) ; <nl> + mg . push ( wrapperModMap . get ( fileName ) ) ; <nl> + mg . returnValue ( ) ; <nl> + mg . endMethod ( ) ; <nl> + <nl> + writer . visitEnd ( ) ; <nl> + <nl> + return writer . toByteArray ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + private static String getWrapperName ( String parentClass ) <nl> + { <nl> + return parentClass + " _ $ Wrapper " ; <nl> + } <nl> + <nl> + private static class WrapperVisitor extends ClassVisitor <nl> + { <nl> + private final String name ; <nl> + private final String parentClass ; <nl> + <nl> + public WrapperVisitor ( ClassVisitor cv , String name , String parentClass ) <nl> + { <nl> + super ( Opcodes . ASM5 , cv ) ; <nl> + this . name = name . replace ( ' . ' , ' / ' ) ; <nl> + this . parentClass = parentClass ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) <nl> + { <nl> + super . visit ( version , access , this . name , signature , superName , interfaces ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public FieldVisitor visitField ( int access , String name , String desc , String signature , Object value ) <nl> + { <nl> + if ( name . equals ( " parentClass " ) ) <nl> + { <nl> + return super . visitField ( access , name , desc , signature , parentClass ) ; <nl> + } <nl> + return super . visitField ( access , name , desc , signature , value ) ; <nl> + } <nl> + } <nl> + <nl> + public static abstract class TransformerWrapper implements IClassTransformer <nl> + { <nl> + private final IClassTransformer parent ; <nl> + <nl> + public TransformerWrapper ( ) <nl> + { <nl> + try <nl> + { <nl> + this . parent = ( IClassTransformer ) this . getClass ( ) . getClassLoader ( ) . loadClass ( getParentClass ( ) ) . newInstance ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + <nl> + public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) <nl> + { <nl> + try <nl> + { <nl> + return parent . transform ( name , transformedName , basicClass ) ; <nl> + } <nl> + catch ( Throwable e ) <nl> + { <nl> + throw new TransformerException ( " Exception in class transformer " + parent + " from coremod " + getCoreMod ( ) , e ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String toString ( ) <nl> + { <nl> + return " TransformerWrapper ( " + getParentClass ( ) + " , " + getCoreMod ( ) + " ) " ; <nl> + } <nl> + <nl> + protected abstract String getParentClass ( ) ; <nl> + <nl> + protected abstract String getCoreMod ( ) ; <nl> + } <nl> + <nl> + static class TransformerException extends RuntimeException <nl> + { <nl> + public TransformerException ( String message , Throwable cause ) <nl> + { <nl> + super ( message , cause ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / BlamingTransformer . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / BlamingTransformer . java <nl> new file mode 100644 <nl> index 0000000 . . 772bcaf <nl> - - - / dev / null <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / BlamingTransformer . java <nl> @ @ - 0 , 0 + 1 , 119 @ @ <nl> + package net . minecraftforge . fml . common . asm . transformers ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . HashMap ; <nl> + import java . util . HashSet ; <nl> + import java . util . LinkedList ; <nl> + import java . util . List ; <nl> + import java . util . ListIterator ; <nl> + import java . util . Map ; <nl> + import java . util . Set ; <nl> + import java . util . TreeSet ; <nl> + <nl> + import net . minecraft . launchwrapper . IClassTransformer ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + <nl> + import org . apache . commons . lang3 . JavaVersion ; <nl> + import org . apache . commons . lang3 . SystemUtils ; <nl> + import org . objectweb . asm . ClassReader ; <nl> + import org . objectweb . asm . ClassVisitor ; <nl> + import org . objectweb . asm . ClassWriter ; <nl> + import org . objectweb . asm . Opcodes ; <nl> + <nl> + import com . google . common . collect . ImmutableSet ; <nl> + <nl> + public class BlamingTransformer implements IClassTransformer <nl> + { <nl> + private static final Map < String , String > classMap = new HashMap < String , String > ( ) ; <nl> + private static final Set < String > naughtyMods = new HashSet < String > ( ) ; <nl> + private static final Set < String > naughtyClasses = new TreeSet < String > ( ) ; <nl> + private static final Set < String > orphanNaughtyClasses = new HashSet ( ) ; <nl> + <nl> + @ Override <nl> + public byte [ ] transform ( String name , String transformedName , byte [ ] bytes ) <nl> + { <nl> + if ( bytes = = null ) { return null ; } <nl> + <nl> + ClassReader classReader = new ClassReader ( bytes ) ; <nl> + VersionVisitor visitor = new VersionVisitor ( ) ; <nl> + classReader . accept ( visitor , ClassReader . SKIP _ CODE | ClassReader . SKIP _ DEBUG ) ; <nl> + return bytes ; <nl> + } <nl> + <nl> + public static void blame ( String modId , String cls ) <nl> + { <nl> + naughtyClasses . add ( cls ) ; <nl> + naughtyMods . add ( modId ) ; <nl> + FMLLog . severe ( " Unsupported class format in mod % s : class % s " , modId , cls ) ; <nl> + } <nl> + <nl> + public static class VersionVisitor extends ClassVisitor <nl> + { <nl> + public VersionVisitor ( ) <nl> + { <nl> + super ( Opcodes . ASM5 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) <nl> + { <nl> + if ( ( version = = Opcodes . V1 _ 8 & & ! SystemUtils . isJavaVersionAtLeast ( JavaVersion . JAVA _ 1 _ 8 ) ) | | <nl> + ( version = = Opcodes . V1 _ 7 & & ! SystemUtils . isJavaVersionAtLeast ( JavaVersion . JAVA _ 1 _ 7 ) ) ) <nl> + { <nl> + if ( classMap . containsKey ( name ) ) blame ( classMap . get ( name ) , name ) ; <nl> + else orphanNaughtyClasses . add ( name ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static void checkPendingNaughty ( ) <nl> + { <nl> + ImmutableSet . Builder < String > toRemove = ImmutableSet . builder ( ) ; <nl> + for ( String cls : orphanNaughtyClasses ) <nl> + { <nl> + if ( classMap . containsKey ( cls ) ) <nl> + { <nl> + String modId = classMap . get ( cls ) ; <nl> + blame ( modId , cls ) ; <nl> + toRemove . add ( cls ) ; <nl> + } <nl> + } <nl> + orphanNaughtyClasses . removeAll ( toRemove . build ( ) ) ; <nl> + } <nl> + <nl> + public static void addClasses ( String modId , Set < String > classList ) <nl> + { <nl> + for ( String cls : classList ) <nl> + { <nl> + classMap . put ( cls , modId ) ; <nl> + } <nl> + checkPendingNaughty ( ) ; <nl> + } <nl> + <nl> + public static void onCrash ( StringBuilder builder ) <nl> + { <nl> + checkPendingNaughty ( ) ; <nl> + if ( ! naughtyClasses . isEmpty ( ) ) <nl> + { <nl> + builder . append ( " \ n * * * ATTENTION : detected classes with unsupported format * * * \ n " ) ; <nl> + builder . append ( " * * * DO NOT SUBMIT THIS CRASH REPORT TO FORGE * * * \ n \ n " ) ; <nl> + if ( ! naughtyMods . isEmpty ( ) ) <nl> + { <nl> + builder . append ( " Contact authors of the following mods : \ n " ) ; <nl> + for ( String modId : naughtyMods ) <nl> + { <nl> + builder . append ( " " ) . append ( modId ) . append ( " \ n " ) ; <nl> + } <nl> + } <nl> + if ( ! orphanNaughtyClasses . isEmpty ( ) ) <nl> + { <nl> + builder . append ( " Unidentified unsupported classes : \ n " ) ; <nl> + for ( String cls : orphanNaughtyClasses ) <nl> + { <nl> + builder . append ( " " ) . append ( cls ) . append ( " \ n " ) ; <nl> + } <nl> + } <nl> + builder . append ( ' \ n ' ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / fml / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> index 16947e6 . . 1d5f128 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Comparator ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Set ; <nl> import java . util . jar . Attributes ; <nl> import java . util . jar . JarFile ; <nl> <nl> @ @ - 32 , 6 + 33 , 7 @ @ import net . minecraft . launchwrapper . ITweaker ; <nl> import net . minecraft . launchwrapper . Launch ; <nl> import net . minecraft . launchwrapper . LaunchClassLoader ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . asm . ASMTransformerWrapper ; <nl> import net . minecraftforge . fml . common . asm . transformers . ModAccessTransformer ; <nl> import net . minecraftforge . fml . common . launcher . FMLInjectionAndSortingTweaker ; <nl> import net . minecraftforge . fml . common . launcher . FMLTweaker ; <nl> @ @ - 50 , 6 + 52 , 7 @ @ import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . ObjectArrays ; <nl> + import com . google . common . collect . Sets ; <nl> import com . google . common . primitives . Ints ; <nl> <nl> public class CoreModManager { <nl> @ @ - 58 , 12 + 61 , 22 @ @ public class CoreModManager { <nl> private static final Attributes . Name MODSIDE = new Attributes . Name ( " ModSide " ) ; <nl> private static String [ ] rootPlugins = { " net . minecraftforge . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; <nl> private static List < String > loadedCoremods = Lists . newArrayList ( ) ; <nl> + private static Map < String , List < String > > transformers = Maps . newHashMap ( ) ; <nl> private static List < FMLPluginWrapper > loadPlugins ; <nl> private static boolean deobfuscatedEnvironment ; <nl> private static FMLTweaker tweaker ; <nl> private static File mcDir ; <nl> private static List < String > reparsedCoremods = Lists . newArrayList ( ) ; <nl> private static List < String > accessTransformers = Lists . newArrayList ( ) ; <nl> + private static Set < String > rootNames = Sets . newHashSet ( ) ; <nl> + <nl> + static <nl> + { <nl> + for ( String cls : rootPlugins ) <nl> + { <nl> + rootNames . add ( cls . substring ( cls . lastIndexOf ( ' . ' ) + 1 ) ) ; <nl> + } <nl> + } <nl> <nl> private static class FMLPluginWrapper implements ITweaker { <nl> public final String name ; <nl> @ @ - 98 , 10 + 111 , 19 @ @ public class CoreModManager { <nl> public void injectIntoClassLoader ( LaunchClassLoader classLoader ) <nl> { <nl> FMLRelaunchLog . fine ( " Injecting coremod % s { % s } class transformers " , name , coreModInstance . getClass ( ) . getName ( ) ) ; <nl> + List < String > ts = Lists . newArrayList ( ) ; <nl> if ( coreModInstance . getASMTransformerClass ( ) ! = null ) for ( String transformer : coreModInstance . getASMTransformerClass ( ) ) <nl> { <nl> FMLRelaunchLog . finer ( " Registering transformer % s " , transformer ) ; <nl> - classLoader . registerTransformer ( transformer ) ; <nl> + classLoader . registerTransformer ( ASMTransformerWrapper . getTransformerWrapper ( classLoader , transformer , name ) ) ; <nl> + ts . add ( transformer ) ; <nl> + } <nl> + if ( ! rootNames . contains ( name ) ) <nl> + { <nl> + String loc ; <nl> + if ( location = = null ) loc = " unknown " ; <nl> + else loc = location . getName ( ) ; <nl> + transformers . put ( name + " ( " + loc + " ) " , ts ) ; <nl> } <nl> FMLRelaunchLog . fine ( " Injection complete " ) ; <nl> <nl> @ @ - 405 , 6 + 427 , 11 @ @ public class CoreModManager { <nl> return loadedCoremods ; <nl> } <nl> <nl> + public static Map < String , List < String > > getTransformers ( ) <nl> + { <nl> + return transformers ; <nl> + } <nl> + <nl> public static List < String > getReparseableCoremods ( ) <nl> { <nl> return reparsedCoremods ; <nl> @ @ - 609 , 4 + 636 , 17 @ @ public class CoreModManager { <nl> { <nl> return accessTransformers ; <nl> } <nl> + <nl> + public static void onCrash ( StringBuilder builder ) <nl> + { <nl> + if ( ! loadedCoremods . isEmpty ( ) | | ! reparsedCoremods . isEmpty ( ) ) <nl> + { <nl> + builder . append ( " \ nWARNING : coremods are present : \ n " ) ; <nl> + for ( String coreMod : transformers . keySet ( ) ) <nl> + { <nl> + builder . append ( " " ) . append ( coreMod ) . append ( ' \ n ' ) ; <nl> + } <nl> + builder . append ( " Contact their authors BEFORE contacting forge \ n \ n " ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java b / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java <nl> index f41e74a . . 0ffca56 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ public class FMLCorePlugin implements IFMLLoadingPlugin <nl> public String [ ] getASMTransformerClass ( ) <nl> { <nl> return new String [ ] { <nl> + " net . minecraftforge . fml . common . asm . transformers . BlamingTransformer " , <nl> " net . minecraftforge . fml . common . asm . transformers . MarkerTransformer " , <nl> " net . minecraftforge . fml . common . asm . transformers . SideTransformer " , <nl> " net . minecraftforge . fml . common . asm . transformers . EventSubscriptionTransformer " , <nl> diff - - git a / fml / src / test / java / net / minecraftforge / fml / debug / FaultyCoreMod . java b / fml / src / test / java / net / minecraftforge / fml / debug / FaultyCoreMod . java <nl> new file mode 100644 <nl> index 0000000 . . f42d7ed <nl> - - - / dev / null <nl> + + + b / fml / src / test / java / net / minecraftforge / fml / debug / FaultyCoreMod . java <nl> @ @ - 0 , 0 + 1 , 29 @ @ <nl> + package net . minecraftforge . fml . debug ; <nl> + <nl> + import java . util . Map ; <nl> + <nl> + import net . minecraft . launchwrapper . IClassTransformer ; <nl> + import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin ; <nl> + <nl> + public class FaultyCoreMod implements IFMLLoadingPlugin { <nl> + public static boolean enabled = false ; <nl> + <nl> + public String [ ] getASMTransformerClass ( ) <nl> + { <nl> + return new String [ ] { FaultyTransformer . class . getName ( ) } ; <nl> + } <nl> + <nl> + public String getModContainerClass ( ) { return null ; } <nl> + public String getSetupClass ( ) { return null ; } <nl> + public void injectData ( Map < String , Object > data ) { } <nl> + public String getAccessTransformerClass ( ) { return null ; } <nl> + <nl> + public static class FaultyTransformer implements IClassTransformer { <nl> + <nl> + public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) <nl> + { <nl> + if ( enabled & & name . equals ( " net . minecraft . client . gui . GuiMainMenu " ) ) throw new RuntimeException ( " Faulty transformer test exception " ) ; <nl> + return basicClass ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / fml / src / test / java / net / minecraftforge / fml / debug / Java8Debug . java b / fml / src / test / java / net / minecraftforge / fml / debug / Java8Debug . java <nl> new file mode 100644 <nl> index 0000000 . . a7dffa2 <nl> - - - / dev / null <nl> + + + b / fml / src / test / java / net / minecraftforge / fml / debug / Java8Debug . java <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + / * package net . minecraftforge . fml . debug ; <nl> + <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + <nl> + @ Mod ( modid = Java8Debug . MODID , version = Java8Debug . VERSION ) <nl> + public class Java8Debug implements ITest <nl> + { <nl> + public static final String MODID = " Java8Debug " ; <nl> + public static final String VERSION = " 1 . 0 " ; <nl> + <nl> + @ EventHandler <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + System . out . println ( " Java8Debug mod loaded " ) ; <nl> + } <nl> + } <nl> + <nl> + interface ITest <nl> + { <nl> + default int test ( ) <nl> + { <nl> + return 42 ; <nl> + } <nl> + } * /
NEAREST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch b / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch <nl> index acf32e6 . . 409d67b 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / util / StringTranslate . java <nl> + + + . . / src - work / minecraft / net / minecraft / util / StringTranslate . java <nl> - @ @ - 3 , 6 + 3 , 8 @ @ <nl> + @ @ - 3 , 10 + 3 , 13 @ @ <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Maps ; <nl> @ @ - 9 , 33 + 9 , 53 @ @ <nl> import cpw . mods . fml . relauncher . Side ; <nl> import cpw . mods . fml . relauncher . SideOnly ; <nl> import java . io . IOException ; <nl> - @ @ - 25 , 9 + 27 , 19 @ @ <nl> + import java . io . InputStream ; <nl> + + import java . util . HashMap ; <nl> + import java . util . IllegalFormatException ; <nl> + import java . util . Iterator ; <nl> + import java . util . Map ; <nl> + @ @ - 25 , 9 + 28 , 22 @ @ <nl> <nl> public StringTranslate ( ) <nl> { <nl> + InputStream inputstream = StringTranslate . class . getResourceAsStream ( " / assets / minecraft / lang / en _ US . lang " ) ; <nl> - + localInject ( inputstream ) ; <nl> + + inject ( inputstream ) ; <nl> + } <nl> + <nl> + public static void inject ( InputStream inputstream ) <nl> + { <nl> - + field _ 74817 _ a . localInject ( inputstream ) ; <nl> + + HashMap < String , String > map = parseLangFile ( inputstream ) ; <nl> + + field _ 74817 _ a . field _ 74816 _ c . putAll ( map ) ; <nl> + + field _ 74817 _ a . field _ 150511 _ e = System . currentTimeMillis ( ) ; <nl> + } <nl> + <nl> - + private void localInject ( InputStream inputstream ) <nl> + + public static HashMap < String , String > parseLangFile ( InputStream inputstream ) <nl> + { <nl> + + HashMap < String , String > table = Maps . newHashMap ( ) ; <nl> try <nl> { <nl> - InputStream inputstream = StringTranslate . class . getResourceAsStream ( " / assets / minecraft / lang / en _ US . lang " ) ; <nl> Iterator iterator = IOUtils . readLines ( inputstream , Charsets . UTF _ 8 ) . iterator ( ) ; <nl> <nl> while ( iterator . hasNext ( ) ) <nl> - @ @ - 49 , 7 + 61 , 7 @ @ <nl> + @ @ - 42 , 17 + 58 , 17 @ @ <nl> + { <nl> + String s1 = astring [ 0 ] ; <nl> + String s2 = field _ 111053 _ a . matcher ( astring [ 1 ] ) . replaceAll ( " % $ 1s " ) ; <nl> + - this . field _ 74816 _ c . put ( s1 , s2 ) ; <nl> + + table . put ( s1 , s2 ) ; <nl> + } <nl> + } <nl> + } <nl> <nl> - this . field _ 150511 _ e = System . currentTimeMillis ( ) ; <nl> + - this . field _ 150511 _ e = System . currentTimeMillis ( ) ; <nl> } <nl> - catch ( IOException ioexception ) <nl> + catch ( Exception ioexception ) <nl> { <nl> ; <nl> } <nl> + + return table ; <nl> + } <nl> + <nl> + static StringTranslate func _ 74808 _ a ( ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> index 46c3773 . . fa5971b 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 17 , 8 + 17 , 8 @ @ import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> - import java . util . Set ; <nl> import java . util . Map . Entry ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . logging . Logger ; <nl> @ @ - 75 , 6 + 75 , 7 @ @ import cpw . mods . fml . common . WrongMinecraftVersionException ; <nl> import cpw . mods . fml . common . eventhandler . EventBus ; <nl> import cpw . mods . fml . common . network . FMLNetworkEvent ; <nl> import cpw . mods . fml . common . registry . GameData ; <nl> + import cpw . mods . fml . common . registry . LanguageRegistry ; <nl> import cpw . mods . fml . common . toposort . ModSortingException ; <nl> import cpw . mods . fml . relauncher . Side ; <nl> <nl> @ @ - 480 , 6 + 481 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> @ Override <nl> public void addModAsResource ( ModContainer container ) <nl> { <nl> + LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . CLIENT ) ; <nl> Class < ? > resourcePackType = container . getCustomResourcePackClass ( ) ; <nl> if ( resourcePackType ! = null ) <nl> { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> index 2604b45 . . 6418f1a 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> @ @ - 79 , 7 + 79 , 6 @ @ public class FMLCommonHandler <nl> private List < ICrashCallable > crashCallables = Lists . newArrayList ( Loader . instance ( ) . getCallableCrashInformation ( ) ) ; <nl> private Set < SaveHandler > handlerSet = Sets . newSetFromMap ( new MapMaker ( ) . weakKeys ( ) . < SaveHandler , Boolean > makeMap ( ) ) ; <nl> private EventBus eventBus = new EventBus ( ) ; <nl> - <nl> / * * <nl> * The FML event bus . Subscribe here for FML related events <nl> * <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java <nl> index 77110de . . 95e931b 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java <nl> @ @ - 338 , 7 + 338 , 7 @ @ public class GameRegistry <nl> 	 return null ; <nl> 	 } <nl> <nl> - 	 public static class UniqueIdentifier <nl> + 	 public static final class UniqueIdentifier <nl> 	 { <nl> 	 public final String modId ; <nl> 	 public final String name ; <nl> @ @ - 363 , 7 + 363 , 13 @ @ public class GameRegistry <nl> final UniqueIdentifier other = ( UniqueIdentifier ) obj ; <nl> return Objects . equal ( modId , other . modId ) & & Objects . equal ( name , other . name ) ; <nl> } <nl> - <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hashCode ( modId , name ) ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java <nl> index 8273d5c . . 4cc00c8 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java <nl> @ @ - 12 , 18 + 12 , 26 @ @ <nl> <nl> package cpw . mods . fml . common . registry ; <nl> <nl> + import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> import java . net . URL ; <nl> + import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> import java . util . Properties ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> + import java . util . zip . ZipEntry ; <nl> + import java . util . zip . ZipFile ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . StringTranslate ; <nl> <nl> import com . google . common . base . Charsets ; <nl> <nl> @ @ - 31 , 6 + 39 , 7 @ @ import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> + import cpw . mods . fml . relauncher . Side ; <nl> <nl> public class LanguageRegistry <nl> { <nl> @ @ - 38 , 6 + 47 , 8 @ @ public class LanguageRegistry <nl> <nl> private Map < String , Properties > modLanguageData = new HashMap < String , Properties > ( ) ; <nl> <nl> + private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / ( . * ) . lang " ) ; <nl> + <nl> public static LanguageRegistry instance ( ) <nl> { <nl> return INSTANCE ; <nl> @ @ - 62 , 10 + 73 , 19 @ @ public class LanguageRegistry <nl> return localizedString ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addStringLocalization ( String key , String value ) <nl> { <nl> addStringLocalization ( key , " en _ US " , value ) ; <nl> } <nl> + <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addStringLocalization ( String key , String lang , String value ) <nl> { <nl> Properties langPack = modLanguageData . get ( lang ) ; <nl> @ @ - 76 , 10 + 96 , 18 @ @ public class LanguageRegistry <nl> langPack . put ( key , value ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addStringLocalization ( Properties langPackAdditions ) { <nl> addStringLocalization ( langPackAdditions , " en _ US " ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addStringLocalization ( Properties langPackAdditions , String lang ) { <nl> Properties langPack = modLanguageData . get ( lang ) ; <nl> if ( langPack = = null ) { <nl> @ @ - 91 , 14 + 119 , 10 @ @ public class LanguageRegistry <nl> } <nl> } <nl> <nl> - public static void reloadLanguageTable ( ) <nl> - { <nl> - / / / / reload language table by forcing lang to null and reloading the properties file <nl> - / / String lang = StringTranslate . func _ 74808 _ a ( ) . func _ 74811 _ c ( ) ; <nl> - / / StringTranslate . func _ 74808 _ a ( ) . func _ 74810 _ a ( lang , true ) ; <nl> - } <nl> - <nl> - <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addNameForObject ( Object objectToName , String lang , String name ) <nl> { <nl> String objectName ; <nl> @ @ - 115 , 12 + 139 , 20 @ @ public class LanguageRegistry <nl> addStringLocalization ( objectName , lang , name ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public static void addName ( Object objectToName , String name ) <nl> { <nl> instance ( ) . addNameForObject ( objectToName , " en _ US " , name ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> + @ Deprecated <nl> public void loadLanguageTable ( @ SuppressWarnings ( " rawtypes " ) Map field _ 135032 _ a , String lang ) <nl> { <nl> Properties usPack = modLanguageData . get ( " en _ US " ) ; <nl> @ @ - 134 , 6 + 166 , 10 @ @ public class LanguageRegistry <nl> field _ 135032 _ a . putAll ( langPack ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void loadLocalization ( String localizationFile , String lang , boolean isXML ) <nl> { <nl> URL urlResource = this . getClass ( ) . getResource ( localizationFile ) ; <nl> @ @ - 155 , 6 + 191 , 10 @ @ public class LanguageRegistry <nl> } <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void loadLocalization ( URL localizationFile , String lang , boolean isXML ) <nl> { <nl> InputStream langStream = null ; <nl> @ @ - 186 , 4 + 226 , 81 @ @ public class LanguageRegistry <nl> } <nl> } <nl> } <nl> + <nl> + public void injectLanguage ( String language , HashMap < String , String > parsedLangFile ) <nl> + { <nl> + <nl> + Properties p = modLanguageData . get ( language ) ; <nl> + if ( p = = null ) <nl> + { <nl> + p = new Properties ( ) ; <nl> + modLanguageData . put ( language , p ) ; <nl> + } <nl> + p . putAll ( parsedLangFile ) ; <nl> + } <nl> + <nl> + public void loadLanguagesFor ( ModContainer container , Side side ) <nl> + { <nl> + File source = container . getSource ( ) ; <nl> + try <nl> + { <nl> + if ( source . isDirectory ( ) ) <nl> + { <nl> + searchDirForLanguages ( source , " " , side ) ; <nl> + } <nl> + else <nl> + { <nl> + searchZipForLanguages ( source , side ) ; <nl> + } <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + <nl> + private void searchZipForLanguages ( File source , Side side ) throws IOException <nl> + { <nl> + ZipFile zf = new ZipFile ( source ) ; <nl> + for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) <nl> + { <nl> + Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; <nl> + if ( matcher . matches ( ) ) <nl> + { <nl> + String lang = matcher . group ( 2 ) ; <nl> + FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; <nl> + LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( zf . getInputStream ( ze ) ) ) ; <nl> + / / Ensure en _ US is available to StringTranslate on the server <nl> + if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) <nl> + { <nl> + StringTranslate . inject ( zf . getInputStream ( ze ) ) ; <nl> + } <nl> + } <nl> + } <nl> + zf . close ( ) ; <nl> + } <nl> + <nl> + private void searchDirForLanguages ( File source , String path , Side side ) throws IOException <nl> + { <nl> + for ( File file : source . listFiles ( ) ) <nl> + { <nl> + String currPath = path + file . getName ( ) ; <nl> + if ( file . isDirectory ( ) ) <nl> + { <nl> + searchDirForLanguages ( file , currPath + ' / ' , side ) ; <nl> + } <nl> + Matcher matcher = assetENUSLang . matcher ( currPath ) ; <nl> + if ( matcher . matches ( ) ) <nl> + { <nl> + String lang = matcher . group ( 2 ) ; <nl> + FMLLog . fine ( " Injecting found translation assets for lang % s at % s into language system " , lang , currPath ) ; <nl> + LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( new FileInputStream ( file ) ) ) ; <nl> + / / Ensure en _ US is available to StringTranslate on the server <nl> + if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) <nl> + { <nl> + StringTranslate . inject ( new FileInputStream ( file ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> index b4965d0 . . 17bb021 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> @ @ - 12 , 27 + 12 , 14 @ @ <nl> * / <nl> package cpw . mods . fml . server ; <nl> <nl> - import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . IOException ; <nl> - import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> - import java . util . regex . Matcher ; <nl> - import java . util . regex . Pattern ; <nl> - import java . util . zip . ZipEntry ; <nl> - import java . util . zip . ZipFile ; <nl> - <nl> import net . minecraft . network . INetHandler ; <nl> import net . minecraft . network . NetHandlerPlayServer ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . server . MinecraftServer ; <nl> - import net . minecraft . util . StringTranslate ; <nl> - <nl> import com . google . common . collect . ImmutableList ; <nl> - <nl> import cpw . mods . fml . common . FMLCommonHandler ; <nl> - import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . IFMLSidedHandler ; <nl> import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> @ @ - 94 , 7 + 81 , 6 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> public void finishServerLoading ( ) <nl> { <nl> Loader . instance ( ) . initializeMods ( ) ; <nl> - LanguageRegistry . reloadLanguageTable ( ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 150 , 55 + 136 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> @ Override <nl> public void addModAsResource ( ModContainer container ) <nl> { <nl> - File source = container . getSource ( ) ; <nl> - try <nl> - { <nl> - if ( source . isDirectory ( ) ) <nl> - { <nl> - searchDirForENUSLanguage ( source , " " ) ; <nl> - } <nl> - else <nl> - { <nl> - searchZipForENUSLanguage ( source ) ; <nl> - } <nl> - } <nl> - catch ( IOException ioe ) <nl> - { <nl> - <nl> - } <nl> - } <nl> - private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / en _ US . lang " ) ; <nl> - private void searchZipForENUSLanguage ( File source ) throws IOException <nl> - { <nl> - ZipFile zf = new ZipFile ( source ) ; <nl> - for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) <nl> - { <nl> - Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; <nl> - if ( matcher . matches ( ) ) <nl> - { <nl> - FMLLog . fine ( " Injecting found translation data in zip file % s at % s into language system " , source . getName ( ) , ze . getName ( ) ) ; <nl> - StringTranslate . inject ( zf . getInputStream ( ze ) ) ; <nl> - } <nl> - } <nl> - zf . close ( ) ; <nl> - } <nl> - private void searchDirForENUSLanguage ( File source , String path ) throws IOException <nl> - { <nl> - for ( File file : source . listFiles ( ) ) <nl> - { <nl> - String currPath = path + file . getName ( ) ; <nl> - if ( file . isDirectory ( ) ) <nl> - { <nl> - searchDirForENUSLanguage ( file , currPath + ' / ' ) ; <nl> - } <nl> - Matcher matcher = assetENUSLang . matcher ( currPath ) ; <nl> - if ( matcher . matches ( ) ) <nl> - { <nl> - FMLLog . fine ( " Injecting found translation data at % s into language system " , currPath ) ; <nl> - StringTranslate . inject ( new FileInputStream ( file ) ) ; <nl> - } <nl> - } <nl> + LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . SERVER ) ; <nl> } <nl> + <nl> @ Override <nl> public void updateResourcePackList ( ) <nl> {

TEST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / crash / CrashReport . java . patch b / fml / patches / minecraft / net / minecraft / crash / CrashReport . java . patch 
 index 0e8441a . . 224cdfd 100644 
 - - - a / fml / patches / minecraft / net / minecraft / crash / CrashReport . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / crash / CrashReport . java . patch 
 @ @ - 8 , 3 + 8 , 12 @ @ 
 } 
 
 public String func _ 71501 _ a ( ) 
 + @ @ - 220 , 6 + 221 , 8 @ @ 
 + { 
 + StringBuilder stringbuilder = new StringBuilder ( ) ; 
 + stringbuilder . append ( " - - - - Minecraft Crash Report - - - - \ n " ) ; 
 + + net . minecraftforge . fml . common . asm . transformers . BlamingTransformer . onCrash ( stringbuilder ) ; 
 + + net . minecraftforge . fml . relauncher . CoreModManager . onCrash ( stringbuilder ) ; 
 + stringbuilder . append ( " / / " ) ; 
 + stringbuilder . append ( func _ 71503 _ h ( ) ) ; 
 + stringbuilder . append ( " \ n \ n " ) ; 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index 391ecf9 . . 003cb06 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import net . minecraftforge . fml . common . gameevent . PlayerEvent ; 
 import net . minecraftforge . fml . common . gameevent . TickEvent ; 
 import net . minecraftforge . fml . common . gameevent . TickEvent . Phase ; 
 import net . minecraftforge . fml . common . network . NetworkRegistry ; 
 + import net . minecraftforge . fml . relauncher . CoreModManager ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 import net . minecraftforge . fml . server . FMLServerHandler ; 
 
 @ @ - 97 , 6 + 98 , 28 @ @ public class FMLCommonHandler 
 private WeakReference < SaveHandler > handlerToCheck ; 
 private EventBus eventBus = new EventBus ( ) ; 
 private volatile CountDownLatch exitLatch = null ; 
 + 
 + private FMLCommonHandler ( ) 
 + { 
 + registerCrashCallable ( new ICrashCallable ( ) 
 + { 
 + public String call ( ) throws Exception 
 + { 
 + StringBuilder builder = new StringBuilder ( ) ; 
 + Joiner joiner = Joiner . on ( " \ n " ) ; 
 + for ( String coreMod : CoreModManager . getTransformers ( ) . keySet ( ) ) 
 + { 
 + builder . append ( " \ n " + coreMod + " \ n " ) . append ( joiner . join ( CoreModManager . getTransformers ( ) . get ( coreMod ) ) ) ; 
 + } 
 + return builder . toString ( ) ; 
 + } 
 + 
 + public String getLabel ( ) 
 + { 
 + return " Loaded coremods ( and transformers ) " ; 
 + } 
 + } ) ; 
 + } 
 / * * 
 * The FML event bus . Subscribe here for FML related events 
 * 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 0c06efb . . e4e6ae4 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import java . util . Set ; 
 
 import net . minecraftforge . fml . common . Mod . Instance ; 
 import net . minecraftforge . fml . common . Mod . Metadata ; 
 + import net . minecraftforge . fml . common . asm . transformers . BlamingTransformer ; 
 import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 import net . minecraftforge . fml . common . discovery . ModCandidate ; 
 import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; 
 @ @ - 416 , 6 + 417 , 7 @ @ public class FMLModContainer implements ModContainer 
 { 
 try 
 { 
 + BlamingTransformer . addClasses ( getModId ( ) , candidate . getClassList ( ) ) ; 
 ModClassLoader modClassLoader = event . getModClassLoader ( ) ; 
 modClassLoader . addFile ( source ) ; 
 modClassLoader . clearNegativeCacheFor ( candidate . getClassList ( ) ) ; 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java b / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 index b7bd56d . . c0f6091 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModClassLoader . java 
 @ @ - 14 , 19 + 14 , 21 @ @ package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 import java . net . MalformedURLException ; 
 + import java . net . URI ; 
 import java . net . URISyntaxException ; 
 import java . net . URL ; 
 import java . net . URLClassLoader ; 
 + import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Set ; 
 
 - import org . apache . logging . log4j . Level ; 
 - 
 import net . minecraft . launchwrapper . IClassTransformer ; 
 import net . minecraft . launchwrapper . LaunchClassLoader ; 
 import net . minecraftforge . fml . common . asm . transformers . ModAPITransformer ; 
 import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 
 + import org . apache . logging . log4j . Level ; 
 + 
 import com . google . common . collect . ImmutableList ; 
 
 / * * 
 @ @ - 59 , 15 + 61 , 18 @ @ public class ModClassLoader extends URLClassLoader 
 } 
 
 public File [ ] getParentSources ( ) { 
 - List < URL > urls = mainClassLoader . getSources ( ) ; 
 - File [ ] sources = new File [ urls . size ( ) ] ; 
 try 
 { 
 - for ( int i = 0 ; i < urls . size ( ) ; i + + ) 
 + List < File > files = new ArrayList < File > ( ) ; 
 + for ( URL url : mainClassLoader . getSources ( ) ) 
 { 
 - sources [ i ] = new File ( urls . get ( i ) . toURI ( ) ) ; 
 + URI uri = url . toURI ( ) ; 
 + if ( uri . getScheme ( ) = = " file " ) 
 + { 
 + files . add ( new File ( uri ) ) ; 
 + } 
 } 
 - return sources ; 
 + return files . toArray ( new File [ ] { } ) ; 
 } 
 catch ( URISyntaxException e ) 
 { 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java 
 new file mode 100644 
 index 0000000 . . 4e14e6e 
 - - - / dev / null 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / ASMTransformerWrapper . java 
 @ @ - 0 , 0 + 1 , 263 @ @ 
 + 
 + 
 + package net . minecraftforge . fml . common . asm ; 
 + 
 + import java . io . ByteArrayInputStream ; 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 + import java . net . URLConnection ; 
 + import java . net . URLStreamHandler ; 
 + import java . security . Permission ; 
 + import java . util . Map ; 
 + import java . util . concurrent . ExecutionException ; 
 + 
 + import net . minecraft . launchwrapper . IClassTransformer ; 
 + import net . minecraft . launchwrapper . LaunchClassLoader ; 
 + 
 + import org . objectweb . asm . ClassVisitor ; 
 + import org . objectweb . asm . ClassWriter ; 
 + import org . objectweb . asm . FieldVisitor ; 
 + import org . objectweb . asm . Opcodes ; 
 + import org . objectweb . asm . Type ; 
 + import org . objectweb . asm . commons . GeneratorAdapter ; 
 + import org . objectweb . asm . commons . Method ; 
 + 
 + import com . google . common . cache . CacheBuilder ; 
 + import com . google . common . cache . CacheLoader ; 
 + import com . google . common . cache . LoadingCache ; 
 + import com . google . common . collect . Maps ; 
 + 
 + public class ASMTransformerWrapper 
 + { 
 + private static final Map < String , String > wrapperModMap = Maps . newHashMap ( ) ; 
 + private static final Map < String , String > wrapperParentMap = Maps . newHashMap ( ) ; 
 + 
 + private static final LoadingCache < String , byte [ ] > wrapperCache = CacheBuilder . newBuilder ( ) 
 + . maximumSize ( 30 ) 
 + . weakValues ( ) 
 + . build ( new CacheLoader < String , byte [ ] > ( ) 
 + { 
 + public byte [ ] load ( String file ) throws Exception 
 + { 
 + return makeWrapper ( file ) ; 
 + } 
 + } ) ; 
 + 
 + private static final URL asmGenRoot ; 
 + private static boolean injected = false ; 
 + 
 + static 
 + { 
 + try 
 + { 
 + asmGenRoot = new URL ( " asmgen " , null , - 1 , " / " , new ASMGenHandler ( ) ) ; 
 + } 
 + catch ( MalformedURLException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private static class ASMGenHandler extends URLStreamHandler 
 + { 
 + protected URLConnection openConnection ( URL url ) throws IOException 
 + { 
 + String file = url . getFile ( ) ; 
 + if ( file . equals ( " / " ) ) 
 + { 
 + return new URLConnection ( url ) 
 + { 
 + public void connect ( ) throws IOException 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + } ; 
 + } 
 + if ( ! file . startsWith ( " / " ) ) throw new RuntimeException ( " Malformed URL : " + url ) ; 
 + file = file . substring ( 1 ) ; 
 + if ( wrapperModMap . containsKey ( file ) ) 
 + { 
 + return new ASMGenConnection ( url , file ) ; 
 + } 
 + return null ; 
 + } 
 + } 
 + 
 + private static class ASMGenConnection extends URLConnection 
 + { 
 + private final String file ; 
 + 
 + protected ASMGenConnection ( URL url , String file ) 
 + { 
 + super ( url ) ; 
 + this . file = file ; 
 + } 
 + 
 + public void connect ( ) throws IOException 
 + { 
 + throw new UnsupportedOperationException ( ) ; 
 + } 
 + 
 + @ Override 
 + public InputStream getInputStream ( ) 
 + { 
 + try 
 + { 
 + return new ByteArrayInputStream ( wrapperCache . get ( file ) ) ; 
 + } 
 + catch ( ExecutionException e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public Permission getPermission ( ) 
 + { 
 + return null ; 
 + } 
 + } 
 + 
 + public static String getTransformerWrapper ( LaunchClassLoader launchLoader , String parentClass , String coreMod ) 
 + { 
 + if ( ! injected ) 
 + { 
 + injected = true ; 
 + launchLoader . addURL ( asmGenRoot ) ; 
 + } 
 + 
 + String name = getWrapperName ( parentClass ) ; 
 + String fileName = name . replace ( ' . ' , ' / ' ) + " . class " ; 
 + wrapperModMap . put ( fileName , coreMod ) ; 
 + wrapperParentMap . put ( fileName , parentClass ) ; 
 + return name ; 
 + } 
 + 
 + private static byte [ ] makeWrapper ( String fileName ) 
 + { 
 + if ( ! wrapperModMap . containsKey ( fileName ) | | ! wrapperParentMap . containsKey ( fileName ) | | ! fileName . endsWith ( " . class " ) ) 
 + { 
 + throw new IllegalArgumentException ( " makeWrapper called with strange argument : " + fileName ) ; 
 + } 
 + String name = fileName . substring ( 0 , fileName . length ( ) - " . class " . length ( ) ) ; 
 + 
 + try 
 + { 
 + Type wrapper = Type . getType ( TransformerWrapper . class ) ; 
 + 
 + ClassWriter writer = new ClassWriter ( ClassWriter . COMPUTE _ FRAMES ) ; 
 + 
 + writer . visit ( Opcodes . V1 _ 6 , Opcodes . ACC _ PUBLIC , name , null , wrapper . getInternalName ( ) , null ) ; 
 + 
 + Method m = Method . getMethod ( " void < init > ( ) " ) ; 
 + GeneratorAdapter mg = new GeneratorAdapter ( Opcodes . ACC _ PUBLIC , m , null , null , writer ) ; 
 + mg . loadThis ( ) ; 
 + mg . invokeConstructor ( wrapper , m ) ; 
 + mg . returnValue ( ) ; 
 + mg . endMethod ( ) ; 
 + 
 + m = Method . getMethod ( " java . lang . String getParentClass ( ) " ) ; 
 + mg = new GeneratorAdapter ( Opcodes . ACC _ PROTECTED , m , null , null , writer ) ; 
 + mg . push ( wrapperParentMap . get ( fileName ) ) ; 
 + mg . returnValue ( ) ; 
 + mg . endMethod ( ) ; 
 + 
 + m = Method . getMethod ( " java . lang . String getCoreMod ( ) " ) ; 
 + mg = new GeneratorAdapter ( Opcodes . ACC _ PROTECTED , m , null , null , writer ) ; 
 + mg . push ( wrapperModMap . get ( fileName ) ) ; 
 + mg . returnValue ( ) ; 
 + mg . endMethod ( ) ; 
 + 
 + writer . visitEnd ( ) ; 
 + 
 + return writer . toByteArray ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + private static String getWrapperName ( String parentClass ) 
 + { 
 + return parentClass + " _ $ Wrapper " ; 
 + } 
 + 
 + private static class WrapperVisitor extends ClassVisitor 
 + { 
 + private final String name ; 
 + private final String parentClass ; 
 + 
 + public WrapperVisitor ( ClassVisitor cv , String name , String parentClass ) 
 + { 
 + super ( Opcodes . ASM5 , cv ) ; 
 + this . name = name . replace ( ' . ' , ' / ' ) ; 
 + this . parentClass = parentClass ; 
 + } 
 + 
 + @ Override 
 + public void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) 
 + { 
 + super . visit ( version , access , this . name , signature , superName , interfaces ) ; 
 + } 
 + 
 + @ Override 
 + public FieldVisitor visitField ( int access , String name , String desc , String signature , Object value ) 
 + { 
 + if ( name . equals ( " parentClass " ) ) 
 + { 
 + return super . visitField ( access , name , desc , signature , parentClass ) ; 
 + } 
 + return super . visitField ( access , name , desc , signature , value ) ; 
 + } 
 + } 
 + 
 + public static abstract class TransformerWrapper implements IClassTransformer 
 + { 
 + private final IClassTransformer parent ; 
 + 
 + public TransformerWrapper ( ) 
 + { 
 + try 
 + { 
 + this . parent = ( IClassTransformer ) this . getClass ( ) . getClassLoader ( ) . loadClass ( getParentClass ( ) ) . newInstance ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + 
 + public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) 
 + { 
 + try 
 + { 
 + return parent . transform ( name , transformedName , basicClass ) ; 
 + } 
 + catch ( Throwable e ) 
 + { 
 + throw new TransformerException ( " Exception in class transformer " + parent + " from coremod " + getCoreMod ( ) , e ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String toString ( ) 
 + { 
 + return " TransformerWrapper ( " + getParentClass ( ) + " , " + getCoreMod ( ) + " ) " ; 
 + } 
 + 
 + protected abstract String getParentClass ( ) ; 
 + 
 + protected abstract String getCoreMod ( ) ; 
 + } 
 + 
 + static class TransformerException extends RuntimeException 
 + { 
 + public TransformerException ( String message , Throwable cause ) 
 + { 
 + super ( message , cause ) ; 
 + } 
 + } 
 + } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / BlamingTransformer . java b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / BlamingTransformer . java 
 new file mode 100644 
 index 0000000 . . 772bcaf 
 - - - / dev / null 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / asm / transformers / BlamingTransformer . java 
 @ @ - 0 , 0 + 1 , 119 @ @ 
 + package net . minecraftforge . fml . common . asm . transformers ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . HashMap ; 
 + import java . util . HashSet ; 
 + import java . util . LinkedList ; 
 + import java . util . List ; 
 + import java . util . ListIterator ; 
 + import java . util . Map ; 
 + import java . util . Set ; 
 + import java . util . TreeSet ; 
 + 
 + import net . minecraft . launchwrapper . IClassTransformer ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + 
 + import org . apache . commons . lang3 . JavaVersion ; 
 + import org . apache . commons . lang3 . SystemUtils ; 
 + import org . objectweb . asm . ClassReader ; 
 + import org . objectweb . asm . ClassVisitor ; 
 + import org . objectweb . asm . ClassWriter ; 
 + import org . objectweb . asm . Opcodes ; 
 + 
 + import com . google . common . collect . ImmutableSet ; 
 + 
 + public class BlamingTransformer implements IClassTransformer 
 + { 
 + private static final Map < String , String > classMap = new HashMap < String , String > ( ) ; 
 + private static final Set < String > naughtyMods = new HashSet < String > ( ) ; 
 + private static final Set < String > naughtyClasses = new TreeSet < String > ( ) ; 
 + private static final Set < String > orphanNaughtyClasses = new HashSet ( ) ; 
 + 
 + @ Override 
 + public byte [ ] transform ( String name , String transformedName , byte [ ] bytes ) 
 + { 
 + if ( bytes = = null ) { return null ; } 
 + 
 + ClassReader classReader = new ClassReader ( bytes ) ; 
 + VersionVisitor visitor = new VersionVisitor ( ) ; 
 + classReader . accept ( visitor , ClassReader . SKIP _ CODE | ClassReader . SKIP _ DEBUG ) ; 
 + return bytes ; 
 + } 
 + 
 + public static void blame ( String modId , String cls ) 
 + { 
 + naughtyClasses . add ( cls ) ; 
 + naughtyMods . add ( modId ) ; 
 + FMLLog . severe ( " Unsupported class format in mod % s : class % s " , modId , cls ) ; 
 + } 
 + 
 + public static class VersionVisitor extends ClassVisitor 
 + { 
 + public VersionVisitor ( ) 
 + { 
 + super ( Opcodes . ASM5 ) ; 
 + } 
 + 
 + @ Override 
 + public void visit ( int version , int access , String name , String signature , String superName , String [ ] interfaces ) 
 + { 
 + if ( ( version = = Opcodes . V1 _ 8 & & ! SystemUtils . isJavaVersionAtLeast ( JavaVersion . JAVA _ 1 _ 8 ) ) | | 
 + ( version = = Opcodes . V1 _ 7 & & ! SystemUtils . isJavaVersionAtLeast ( JavaVersion . JAVA _ 1 _ 7 ) ) ) 
 + { 
 + if ( classMap . containsKey ( name ) ) blame ( classMap . get ( name ) , name ) ; 
 + else orphanNaughtyClasses . add ( name ) ; 
 + } 
 + } 
 + } 
 + 
 + private static void checkPendingNaughty ( ) 
 + { 
 + ImmutableSet . Builder < String > toRemove = ImmutableSet . builder ( ) ; 
 + for ( String cls : orphanNaughtyClasses ) 
 + { 
 + if ( classMap . containsKey ( cls ) ) 
 + { 
 + String modId = classMap . get ( cls ) ; 
 + blame ( modId , cls ) ; 
 + toRemove . add ( cls ) ; 
 + } 
 + } 
 + orphanNaughtyClasses . removeAll ( toRemove . build ( ) ) ; 
 + } 
 + 
 + public static void addClasses ( String modId , Set < String > classList ) 
 + { 
 + for ( String cls : classList ) 
 + { 
 + classMap . put ( cls , modId ) ; 
 + } 
 + checkPendingNaughty ( ) ; 
 + } 
 + 
 + public static void onCrash ( StringBuilder builder ) 
 + { 
 + checkPendingNaughty ( ) ; 
 + if ( ! naughtyClasses . isEmpty ( ) ) 
 + { 
 + builder . append ( " \ n * * * ATTENTION : detected classes with unsupported format * * * \ n " ) ; 
 + builder . append ( " * * * DO NOT SUBMIT THIS CRASH REPORT TO FORGE * * * \ n \ n " ) ; 
 + if ( ! naughtyMods . isEmpty ( ) ) 
 + { 
 + builder . append ( " Contact authors of the following mods : \ n " ) ; 
 + for ( String modId : naughtyMods ) 
 + { 
 + builder . append ( " " ) . append ( modId ) . append ( " \ n " ) ; 
 + } 
 + } 
 + if ( ! orphanNaughtyClasses . isEmpty ( ) ) 
 + { 
 + builder . append ( " Unidentified unsupported classes : \ n " ) ; 
 + for ( String cls : orphanNaughtyClasses ) 
 + { 
 + builder . append ( " " ) . append ( cls ) . append ( " \ n " ) ; 
 + } 
 + } 
 + builder . append ( ' \ n ' ) ; 
 + } 
 + } 
 + } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / fml / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 index 16947e6 . . 1d5f128 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 @ @ - 25 , 6 + 25 , 7 @ @ import java . util . Comparator ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Set ; 
 import java . util . jar . Attributes ; 
 import java . util . jar . JarFile ; 
 
 @ @ - 32 , 6 + 33 , 7 @ @ import net . minecraft . launchwrapper . ITweaker ; 
 import net . minecraft . launchwrapper . Launch ; 
 import net . minecraft . launchwrapper . LaunchClassLoader ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . asm . ASMTransformerWrapper ; 
 import net . minecraftforge . fml . common . asm . transformers . ModAccessTransformer ; 
 import net . minecraftforge . fml . common . launcher . FMLInjectionAndSortingTweaker ; 
 import net . minecraftforge . fml . common . launcher . FMLTweaker ; 
 @ @ - 50 , 6 + 52 , 7 @ @ import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . ObjectArrays ; 
 + import com . google . common . collect . Sets ; 
 import com . google . common . primitives . Ints ; 
 
 public class CoreModManager { 
 @ @ - 58 , 12 + 61 , 22 @ @ public class CoreModManager { 
 private static final Attributes . Name MODSIDE = new Attributes . Name ( " ModSide " ) ; 
 private static String [ ] rootPlugins = { " net . minecraftforge . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; 
 private static List < String > loadedCoremods = Lists . newArrayList ( ) ; 
 + private static Map < String , List < String > > transformers = Maps . newHashMap ( ) ; 
 private static List < FMLPluginWrapper > loadPlugins ; 
 private static boolean deobfuscatedEnvironment ; 
 private static FMLTweaker tweaker ; 
 private static File mcDir ; 
 private static List < String > reparsedCoremods = Lists . newArrayList ( ) ; 
 private static List < String > accessTransformers = Lists . newArrayList ( ) ; 
 + private static Set < String > rootNames = Sets . newHashSet ( ) ; 
 + 
 + static 
 + { 
 + for ( String cls : rootPlugins ) 
 + { 
 + rootNames . add ( cls . substring ( cls . lastIndexOf ( ' . ' ) + 1 ) ) ; 
 + } 
 + } 
 
 private static class FMLPluginWrapper implements ITweaker { 
 public final String name ; 
 @ @ - 98 , 10 + 111 , 19 @ @ public class CoreModManager { 
 public void injectIntoClassLoader ( LaunchClassLoader classLoader ) 
 { 
 FMLRelaunchLog . fine ( " Injecting coremod % s { % s } class transformers " , name , coreModInstance . getClass ( ) . getName ( ) ) ; 
 + List < String > ts = Lists . newArrayList ( ) ; 
 if ( coreModInstance . getASMTransformerClass ( ) ! = null ) for ( String transformer : coreModInstance . getASMTransformerClass ( ) ) 
 { 
 FMLRelaunchLog . finer ( " Registering transformer % s " , transformer ) ; 
 - classLoader . registerTransformer ( transformer ) ; 
 + classLoader . registerTransformer ( ASMTransformerWrapper . getTransformerWrapper ( classLoader , transformer , name ) ) ; 
 + ts . add ( transformer ) ; 
 + } 
 + if ( ! rootNames . contains ( name ) ) 
 + { 
 + String loc ; 
 + if ( location = = null ) loc = " unknown " ; 
 + else loc = location . getName ( ) ; 
 + transformers . put ( name + " ( " + loc + " ) " , ts ) ; 
 } 
 FMLRelaunchLog . fine ( " Injection complete " ) ; 
 
 @ @ - 405 , 6 + 427 , 11 @ @ public class CoreModManager { 
 return loadedCoremods ; 
 } 
 
 + public static Map < String , List < String > > getTransformers ( ) 
 + { 
 + return transformers ; 
 + } 
 + 
 public static List < String > getReparseableCoremods ( ) 
 { 
 return reparsedCoremods ; 
 @ @ - 609 , 4 + 636 , 17 @ @ public class CoreModManager { 
 { 
 return accessTransformers ; 
 } 
 + 
 + public static void onCrash ( StringBuilder builder ) 
 + { 
 + if ( ! loadedCoremods . isEmpty ( ) | | ! reparsedCoremods . isEmpty ( ) ) 
 + { 
 + builder . append ( " \ nWARNING : coremods are present : \ n " ) ; 
 + for ( String coreMod : transformers . keySet ( ) ) 
 + { 
 + builder . append ( " " ) . append ( coreMod ) . append ( ' \ n ' ) ; 
 + } 
 + builder . append ( " Contact their authors BEFORE contacting forge \ n \ n " ) ; 
 + } 
 + } 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java b / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java 
 index f41e74a . . 0ffca56 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / relauncher / FMLCorePlugin . java 
 @ @ - 20 , 6 + 20 , 7 @ @ public class FMLCorePlugin implements IFMLLoadingPlugin 
 public String [ ] getASMTransformerClass ( ) 
 { 
 return new String [ ] { 
 + " net . minecraftforge . fml . common . asm . transformers . BlamingTransformer " , 
 " net . minecraftforge . fml . common . asm . transformers . MarkerTransformer " , 
 " net . minecraftforge . fml . common . asm . transformers . SideTransformer " , 
 " net . minecraftforge . fml . common . asm . transformers . EventSubscriptionTransformer " , 
 diff - - git a / fml / src / test / java / net / minecraftforge / fml / debug / FaultyCoreMod . java b / fml / src / test / java / net / minecraftforge / fml / debug / FaultyCoreMod . java 
 new file mode 100644 
 index 0000000 . . f42d7ed 
 - - - / dev / null 
 + + + b / fml / src / test / java / net / minecraftforge / fml / debug / FaultyCoreMod . java 
 @ @ - 0 , 0 + 1 , 29 @ @ 
 + package net . minecraftforge . fml . debug ; 
 + 
 + import java . util . Map ; 
 + 
 + import net . minecraft . launchwrapper . IClassTransformer ; 
 + import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin ; 
 + 
 + public class FaultyCoreMod implements IFMLLoadingPlugin { 
 + public static boolean enabled = false ; 
 + 
 + public String [ ] getASMTransformerClass ( ) 
 + { 
 + return new String [ ] { FaultyTransformer . class . getName ( ) } ; 
 + } 
 + 
 + public String getModContainerClass ( ) { return null ; } 
 + public String getSetupClass ( ) { return null ; } 
 + public void injectData ( Map < String , Object > data ) { } 
 + public String getAccessTransformerClass ( ) { return null ; } 
 + 
 + public static class FaultyTransformer implements IClassTransformer { 
 + 
 + public byte [ ] transform ( String name , String transformedName , byte [ ] basicClass ) 
 + { 
 + if ( enabled & & name . equals ( " net . minecraft . client . gui . GuiMainMenu " ) ) throw new RuntimeException ( " Faulty transformer test exception " ) ; 
 + return basicClass ; 
 + } 
 + } 
 + } 
 diff - - git a / fml / src / test / java / net / minecraftforge / fml / debug / Java8Debug . java b / fml / src / test / java / net / minecraftforge / fml / debug / Java8Debug . java 
 new file mode 100644 
 index 0000000 . . a7dffa2 
 - - - / dev / null 
 + + + b / fml / src / test / java / net / minecraftforge / fml / debug / Java8Debug . java 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + / * package net . minecraftforge . fml . debug ; 
 + 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + 
 + @ Mod ( modid = Java8Debug . MODID , version = Java8Debug . VERSION ) 
 + public class Java8Debug implements ITest 
 + { 
 + public static final String MODID = " Java8Debug " ; 
 + public static final String VERSION = " 1 . 0 " ; 
 + 
 + @ EventHandler 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + System . out . println ( " Java8Debug mod loaded " ) ; 
 + } 
 + } 
 + 
 + interface ITest 
 + { 
 + default int test ( ) 
 + { 
 + return 42 ; 
 + } 
 + } * /

NEAREST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch b / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch 
 index acf32e6 . . 409d67b 100644 
 - - - a / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / util / StringTranslate . java 
 + + + . . / src - work / minecraft / net / minecraft / util / StringTranslate . java 
 - @ @ - 3 , 6 + 3 , 8 @ @ 
 + @ @ - 3 , 10 + 3 , 13 @ @ 
 import com . google . common . base . Splitter ; 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Maps ; 
 @ @ - 9 , 33 + 9 , 53 @ @ 
 import cpw . mods . fml . relauncher . Side ; 
 import cpw . mods . fml . relauncher . SideOnly ; 
 import java . io . IOException ; 
 - @ @ - 25 , 9 + 27 , 19 @ @ 
 + import java . io . InputStream ; 
 + + import java . util . HashMap ; 
 + import java . util . IllegalFormatException ; 
 + import java . util . Iterator ; 
 + import java . util . Map ; 
 + @ @ - 25 , 9 + 28 , 22 @ @ 
 
 public StringTranslate ( ) 
 { 
 + InputStream inputstream = StringTranslate . class . getResourceAsStream ( " / assets / minecraft / lang / en _ US . lang " ) ; 
 - + localInject ( inputstream ) ; 
 + + inject ( inputstream ) ; 
 + } 
 + 
 + public static void inject ( InputStream inputstream ) 
 + { 
 - + field _ 74817 _ a . localInject ( inputstream ) ; 
 + + HashMap < String , String > map = parseLangFile ( inputstream ) ; 
 + + field _ 74817 _ a . field _ 74816 _ c . putAll ( map ) ; 
 + + field _ 74817 _ a . field _ 150511 _ e = System . currentTimeMillis ( ) ; 
 + } 
 + 
 - + private void localInject ( InputStream inputstream ) 
 + + public static HashMap < String , String > parseLangFile ( InputStream inputstream ) 
 + { 
 + + HashMap < String , String > table = Maps . newHashMap ( ) ; 
 try 
 { 
 - InputStream inputstream = StringTranslate . class . getResourceAsStream ( " / assets / minecraft / lang / en _ US . lang " ) ; 
 Iterator iterator = IOUtils . readLines ( inputstream , Charsets . UTF _ 8 ) . iterator ( ) ; 
 
 while ( iterator . hasNext ( ) ) 
 - @ @ - 49 , 7 + 61 , 7 @ @ 
 + @ @ - 42 , 17 + 58 , 17 @ @ 
 + { 
 + String s1 = astring [ 0 ] ; 
 + String s2 = field _ 111053 _ a . matcher ( astring [ 1 ] ) . replaceAll ( " % $ 1s " ) ; 
 + - this . field _ 74816 _ c . put ( s1 , s2 ) ; 
 + + table . put ( s1 , s2 ) ; 
 + } 
 + } 
 + } 
 
 - this . field _ 150511 _ e = System . currentTimeMillis ( ) ; 
 + - this . field _ 150511 _ e = System . currentTimeMillis ( ) ; 
 } 
 - catch ( IOException ioexception ) 
 + catch ( Exception ioexception ) 
 { 
 ; 
 } 
 + + return table ; 
 + } 
 + 
 + static StringTranslate func _ 74808 _ a ( ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 index 46c3773 . . fa5971b 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 17 , 8 + 17 , 8 @ @ import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Map ; 
 - import java . util . Set ; 
 import java . util . Map . Entry ; 
 + import java . util . Set ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . logging . Logger ; 
 @ @ - 75 , 6 + 75 , 7 @ @ import cpw . mods . fml . common . WrongMinecraftVersionException ; 
 import cpw . mods . fml . common . eventhandler . EventBus ; 
 import cpw . mods . fml . common . network . FMLNetworkEvent ; 
 import cpw . mods . fml . common . registry . GameData ; 
 + import cpw . mods . fml . common . registry . LanguageRegistry ; 
 import cpw . mods . fml . common . toposort . ModSortingException ; 
 import cpw . mods . fml . relauncher . Side ; 
 
 @ @ - 480 , 6 + 481 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 @ Override 
 public void addModAsResource ( ModContainer container ) 
 { 
 + LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . CLIENT ) ; 
 Class < ? > resourcePackType = container . getCustomResourcePackClass ( ) ; 
 if ( resourcePackType ! = null ) 
 { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 index 2604b45 . . 6418f1a 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 @ @ - 79 , 7 + 79 , 6 @ @ public class FMLCommonHandler 
 private List < ICrashCallable > crashCallables = Lists . newArrayList ( Loader . instance ( ) . getCallableCrashInformation ( ) ) ; 
 private Set < SaveHandler > handlerSet = Sets . newSetFromMap ( new MapMaker ( ) . weakKeys ( ) . < SaveHandler , Boolean > makeMap ( ) ) ; 
 private EventBus eventBus = new EventBus ( ) ; 
 - 
 / * * 
 * The FML event bus . Subscribe here for FML related events 
 * 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java 
 index 77110de . . 95e931b 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java 
 @ @ - 338 , 7 + 338 , 7 @ @ public class GameRegistry 
 	 return null ; 
 	 } 
 
 - 	 public static class UniqueIdentifier 
 + 	 public static final class UniqueIdentifier 
 	 { 
 	 public final String modId ; 
 	 public final String name ; 
 @ @ - 363 , 7 + 363 , 13 @ @ public class GameRegistry 
 final UniqueIdentifier other = ( UniqueIdentifier ) obj ; 
 return Objects . equal ( modId , other . modId ) & & Objects . equal ( name , other . name ) ; 
 } 
 - 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hashCode ( modId , name ) ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java 
 index 8273d5c . . 4cc00c8 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java 
 @ @ - 12 , 18 + 12 , 26 @ @ 
 
 package cpw . mods . fml . common . registry ; 
 
 + import java . io . File ; 
 + import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 import java . net . URL ; 
 + import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 import java . util . Properties ; 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 + import java . util . zip . ZipEntry ; 
 + import java . util . zip . ZipFile ; 
 import org . apache . logging . log4j . Level ; 
 
 import net . minecraft . block . Block ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . StringTranslate ; 
 
 import com . google . common . base . Charsets ; 
 
 @ @ - 31 , 6 + 39 , 7 @ @ import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 + import cpw . mods . fml . relauncher . Side ; 
 
 public class LanguageRegistry 
 { 
 @ @ - 38 , 6 + 47 , 8 @ @ public class LanguageRegistry 
 
 private Map < String , Properties > modLanguageData = new HashMap < String , Properties > ( ) ; 
 
 + private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / ( . * ) . lang " ) ; 
 + 
 public static LanguageRegistry instance ( ) 
 { 
 return INSTANCE ; 
 @ @ - 62 , 10 + 73 , 19 @ @ public class LanguageRegistry 
 return localizedString ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addStringLocalization ( String key , String value ) 
 { 
 addStringLocalization ( key , " en _ US " , value ) ; 
 } 
 + 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addStringLocalization ( String key , String lang , String value ) 
 { 
 Properties langPack = modLanguageData . get ( lang ) ; 
 @ @ - 76 , 10 + 96 , 18 @ @ public class LanguageRegistry 
 langPack . put ( key , value ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addStringLocalization ( Properties langPackAdditions ) { 
 addStringLocalization ( langPackAdditions , " en _ US " ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addStringLocalization ( Properties langPackAdditions , String lang ) { 
 Properties langPack = modLanguageData . get ( lang ) ; 
 if ( langPack = = null ) { 
 @ @ - 91 , 14 + 119 , 10 @ @ public class LanguageRegistry 
 } 
 } 
 
 - public static void reloadLanguageTable ( ) 
 - { 
 - / / / / reload language table by forcing lang to null and reloading the properties file 
 - / / String lang = StringTranslate . func _ 74808 _ a ( ) . func _ 74811 _ c ( ) ; 
 - / / StringTranslate . func _ 74808 _ a ( ) . func _ 74810 _ a ( lang , true ) ; 
 - } 
 - 
 - 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addNameForObject ( Object objectToName , String lang , String name ) 
 { 
 String objectName ; 
 @ @ - 115 , 12 + 139 , 20 @ @ public class LanguageRegistry 
 addStringLocalization ( objectName , lang , name ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public static void addName ( Object objectToName , String name ) 
 { 
 instance ( ) . addNameForObject ( objectToName , " en _ US " , name ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 @ SuppressWarnings ( " unchecked " ) 
 + @ Deprecated 
 public void loadLanguageTable ( @ SuppressWarnings ( " rawtypes " ) Map field _ 135032 _ a , String lang ) 
 { 
 Properties usPack = modLanguageData . get ( " en _ US " ) ; 
 @ @ - 134 , 6 + 166 , 10 @ @ public class LanguageRegistry 
 field _ 135032 _ a . putAll ( langPack ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void loadLocalization ( String localizationFile , String lang , boolean isXML ) 
 { 
 URL urlResource = this . getClass ( ) . getResource ( localizationFile ) ; 
 @ @ - 155 , 6 + 191 , 10 @ @ public class LanguageRegistry 
 } 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void loadLocalization ( URL localizationFile , String lang , boolean isXML ) 
 { 
 InputStream langStream = null ; 
 @ @ - 186 , 4 + 226 , 81 @ @ public class LanguageRegistry 
 } 
 } 
 } 
 + 
 + public void injectLanguage ( String language , HashMap < String , String > parsedLangFile ) 
 + { 
 + 
 + Properties p = modLanguageData . get ( language ) ; 
 + if ( p = = null ) 
 + { 
 + p = new Properties ( ) ; 
 + modLanguageData . put ( language , p ) ; 
 + } 
 + p . putAll ( parsedLangFile ) ; 
 + } 
 + 
 + public void loadLanguagesFor ( ModContainer container , Side side ) 
 + { 
 + File source = container . getSource ( ) ; 
 + try 
 + { 
 + if ( source . isDirectory ( ) ) 
 + { 
 + searchDirForLanguages ( source , " " , side ) ; 
 + } 
 + else 
 + { 
 + searchZipForLanguages ( source , side ) ; 
 + } 
 + } 
 + catch ( IOException ioe ) 
 + { 
 + 
 + } 
 + } 
 + 
 + private void searchZipForLanguages ( File source , Side side ) throws IOException 
 + { 
 + ZipFile zf = new ZipFile ( source ) ; 
 + for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) 
 + { 
 + Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; 
 + if ( matcher . matches ( ) ) 
 + { 
 + String lang = matcher . group ( 2 ) ; 
 + FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; 
 + LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( zf . getInputStream ( ze ) ) ) ; 
 + / / Ensure en _ US is available to StringTranslate on the server 
 + if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) 
 + { 
 + StringTranslate . inject ( zf . getInputStream ( ze ) ) ; 
 + } 
 + } 
 + } 
 + zf . close ( ) ; 
 + } 
 + 
 + private void searchDirForLanguages ( File source , String path , Side side ) throws IOException 
 + { 
 + for ( File file : source . listFiles ( ) ) 
 + { 
 + String currPath = path + file . getName ( ) ; 
 + if ( file . isDirectory ( ) ) 
 + { 
 + searchDirForLanguages ( file , currPath + ' / ' , side ) ; 
 + } 
 + Matcher matcher = assetENUSLang . matcher ( currPath ) ; 
 + if ( matcher . matches ( ) ) 
 + { 
 + String lang = matcher . group ( 2 ) ; 
 + FMLLog . fine ( " Injecting found translation assets for lang % s at % s into language system " , lang , currPath ) ; 
 + LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( new FileInputStream ( file ) ) ) ; 
 + / / Ensure en _ US is available to StringTranslate on the server 
 + if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) 
 + { 
 + StringTranslate . inject ( new FileInputStream ( file ) ) ; 
 + } 
 + } 
 + } 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 index b4965d0 . . 17bb021 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 @ @ - 12 , 27 + 12 , 14 @ @ 
 * / 
 package cpw . mods . fml . server ; 
 
 - import java . io . File ; 
 - import java . io . FileInputStream ; 
 - import java . io . IOException ; 
 - import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Set ; 
 - import java . util . regex . Matcher ; 
 - import java . util . regex . Pattern ; 
 - import java . util . zip . ZipEntry ; 
 - import java . util . zip . ZipFile ; 
 - 
 import net . minecraft . network . INetHandler ; 
 import net . minecraft . network . NetHandlerPlayServer ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . server . MinecraftServer ; 
 - import net . minecraft . util . StringTranslate ; 
 - 
 import com . google . common . collect . ImmutableList ; 
 - 
 import cpw . mods . fml . common . FMLCommonHandler ; 
 - import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . IFMLSidedHandler ; 
 import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 @ @ - 94 , 7 + 81 , 6 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 public void finishServerLoading ( ) 
 { 
 Loader . instance ( ) . initializeMods ( ) ; 
 - LanguageRegistry . reloadLanguageTable ( ) ; 
 } 
 
 @ Override 
 @ @ - 150 , 55 + 136 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 @ Override 
 public void addModAsResource ( ModContainer container ) 
 { 
 - File source = container . getSource ( ) ; 
 - try 
 - { 
 - if ( source . isDirectory ( ) ) 
 - { 
 - searchDirForENUSLanguage ( source , " " ) ; 
 - } 
 - else 
 - { 
 - searchZipForENUSLanguage ( source ) ; 
 - } 
 - } 
 - catch ( IOException ioe ) 
 - { 
 - 
 - } 
 - } 
 - private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / en _ US . lang " ) ; 
 - private void searchZipForENUSLanguage ( File source ) throws IOException 
 - { 
 - ZipFile zf = new ZipFile ( source ) ; 
 - for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) 
 - { 
 - Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; 
 - if ( matcher . matches ( ) ) 
 - { 
 - FMLLog . fine ( " Injecting found translation data in zip file % s at % s into language system " , source . getName ( ) , ze . getName ( ) ) ; 
 - StringTranslate . inject ( zf . getInputStream ( ze ) ) ; 
 - } 
 - } 
 - zf . close ( ) ; 
 - } 
 - private void searchDirForENUSLanguage ( File source , String path ) throws IOException 
 - { 
 - for ( File file : source . listFiles ( ) ) 
 - { 
 - String currPath = path + file . getName ( ) ; 
 - if ( file . isDirectory ( ) ) 
 - { 
 - searchDirForENUSLanguage ( file , currPath + ' / ' ) ; 
 - } 
 - Matcher matcher = assetENUSLang . matcher ( currPath ) ; 
 - if ( matcher . matches ( ) ) 
 - { 
 - FMLLog . fine ( " Injecting found translation data at % s into language system " , currPath ) ; 
 - StringTranslate . inject ( new FileInputStream ( file ) ) ; 
 - } 
 - } 
 + LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . SERVER ) ; 
 } 
 + 
 @ Override 
 public void updateResourcePackList ( ) 
 {
