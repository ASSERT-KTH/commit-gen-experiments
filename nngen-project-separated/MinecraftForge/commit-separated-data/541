BLEU SCORE: 0.034585921141027376

TEST MSG: Properly filter out annotations that are for multiple mods in the same mod source .
GENERATED MSG: New @ Mod properties to define which environment to load the mod on .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> index d1fe342 . . e622d9f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> @ @ - 20 , 6 + 20 , 8 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import com . google . common . base . Strings ; <nl> + import com . google . common . collect . SetMultimap ; <nl> + <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fml . common . discovery . ASMDataTable ; <nl> import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; <nl> @ @ - 44 , 7 + 46 , 9 @ @ public class AutomaticEventSubscriber <nl> public static void inject ( ModContainer mod , ASMDataTable data , Side side ) <nl> { <nl> FMLLog . fine ( " Attempting to inject @ EventBusSubscriber classes into the eventbus for % s " , mod . getModId ( ) ) ; <nl> - Set < ASMDataTable . ASMData > targets = data . getAnnotationsFor ( mod ) . get ( Mod . EventBusSubscriber . class . getName ( ) ) ; <nl> + SetMultimap < String , ASMData > modData = data . getAnnotationsFor ( mod ) ; <nl> + Set < ASMDataTable . ASMData > mods = modData . get ( Mod . class . getName ( ) ) ; <nl> + Set < ASMDataTable . ASMData > targets = modData . get ( Mod . EventBusSubscriber . class . getName ( ) ) ; <nl> ClassLoader mcl = Loader . instance ( ) . getModClassLoader ( ) ; <nl> <nl> for ( ASMDataTable . ASMData targ : targets ) <nl> @ @ - 62 , 6 + 66 , 19 @ @ public class AutomaticEventSubscriber <nl> } <nl> if ( sides = = DEFAULT | | sides . contains ( side ) ) { <nl> FMLLog . fine ( " Found @ EventBusSubscriber class % s " , targ . getClassName ( ) ) ; <nl> + String amodid = ( String ) targ . getAnnotationInfo ( ) . get ( " modid " ) ; <nl> + if ( Strings . isNullOrEmpty ( amodid ) ) { <nl> + amodid = ASMDataTable . getOwnerModID ( mods , targ ) ; <nl> + if ( Strings . isNullOrEmpty ( amodid ) ) { <nl> + FMLLog . bigWarning ( " Could not determine owning mod for @ EventBusSubscriber on % s for mod % s " , targ . getClassName ( ) , mod . getModId ( ) ) ; <nl> + continue ; <nl> + } <nl> + } <nl> + if ( ! mod . getModId ( ) . equals ( amodid ) ) <nl> + { <nl> + FMLLog . fine ( " Skipping @ EventBusSubscriber injection for % s since it is not for mod % s " , targ . getClassName ( ) , mod . getModId ( ) ) ; <nl> + continue ; / / We ' re not injecting this guy <nl> + } <nl> Class < ? > subscriptionTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; <nl> MinecraftForge . EVENT _ BUS . register ( subscriptionTarget ) ; <nl> FMLLog . fine ( " Injected @ EventBusSubscriber class % s " , targ . getClassName ( ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index a6a67ba . . 33d64dd 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 435 , 11 + 435 , 27 @ @ public class FMLModContainer implements ModContainer <nl> <nl> private void parseSimpleFieldAnnotation ( SetMultimap < String , ASMData > annotations , String annotationClassName , Function < ModContainer , Object > retriever ) throws IllegalAccessException <nl> { <nl> + Set < ASMDataTable . ASMData > mods = annotations . get ( Mod . class . getName ( ) ) ; <nl> String [ ] annName = annotationClassName . split ( " \ \ . " ) ; <nl> String annotationName = annName [ annName . length - 1 ] ; <nl> for ( ASMData targets : annotations . get ( annotationClassName ) ) <nl> { <nl> String targetMod = ( String ) targets . getAnnotationInfo ( ) . get ( " value " ) ; <nl> + String owner = ( String ) targets . getAnnotationInfo ( ) . get ( " owner " ) ; <nl> + if ( Strings . isNullOrEmpty ( owner ) ) <nl> + { <nl> + owner = ASMDataTable . getOwnerModID ( mods , targets ) ; <nl> + if ( Strings . isNullOrEmpty ( owner ) ) <nl> + { <nl> + FMLLog . bigWarning ( " Could not determine owning mod for @ % s on % s for mod % s " , annotationClassName , targets . getClassName ( ) , this . getModId ( ) ) ; <nl> + continue ; <nl> + } <nl> + } <nl> + if ( ! this . getModId ( ) . equals ( owner ) ) <nl> + { <nl> + FMLLog . fine ( " Skipping @ % s injection for % s . % s since it is not for mod % s " , annotationClassName , targets . getClassName ( ) , targets . getObjectName ( ) , this . getModId ( ) ) ; <nl> + continue ; <nl> + } <nl> Field f = null ; <nl> Object injectedMod = null ; <nl> ModContainer mc = this ; <nl> @ @ - 751 , 4 + 767 , 4 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> return this . classVersion ; <nl> } <nl> - } <nl> \ No newline at end of file <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index 24afe9d . . 830bddc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 282 , 6 + 282 , 12 @ @ public @ interface Mod <nl> * The mod object to inject into this field <nl> * / <nl> String value ( ) default " " ; <nl> + <nl> + / * * <nl> + * Optional owner modid , required if this annotation is on something that is not inside the main class of a mod container . <nl> + * This is required to prevent mods from classloading other , potentially disabled mods . <nl> + * / <nl> + String owner ( ) default " " ; <nl> } <nl> / * * <nl> * Populate the annotated field with the mod ' s metadata . <nl> @ @ - 295 , 6 + 301 , 12 @ @ public @ interface Mod <nl> * The mod id specifying the metadata to load here <nl> * / <nl> String value ( ) default " " ; <nl> + <nl> + / * * <nl> + * Optional owner modid , required if this annotation is on something that is not inside the main class of a mod container . <nl> + * This is required to prevent mods from classloading other , potentially disabled mods . <nl> + * / <nl> + String owner ( ) default " " ; <nl> } <nl> <nl> / * * <nl> @ @ - 314 , 5 + 326 , 12 @ @ public @ interface Mod <nl> @ Target ( ElementType . TYPE ) <nl> public @ interface EventBusSubscriber { <nl> Side [ ] value ( ) default { Side . CLIENT , Side . SERVER } ; <nl> + <nl> + / * * <nl> + * Optional value , only nessasary if tis annotation is not on the same class that has a @ Mod annotation . <nl> + * Needed to prevent early classloading of classes not owned by your mod . <nl> + * @ return <nl> + * / <nl> + String modid ( ) default " " ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> index 9c66694 . . 8f46893 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> @ @ - 30 , 6 + 30 , 7 @ @ import net . minecraftforge . fml . relauncher . Side ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Strings ; <nl> + import com . google . common . collect . SetMultimap ; <nl> <nl> / * * <nl> * @ author cpw <nl> @ @ - 40 , 13 + 41 , 31 @ @ public class ProxyInjector <nl> public static void inject ( ModContainer mod , ASMDataTable data , Side side , ILanguageAdapter languageAdapter ) <nl> { <nl> FMLLog . fine ( " Attempting to inject @ SidedProxy classes into % s " , mod . getModId ( ) ) ; <nl> - Set < ASMData > targets = data . getAnnotationsFor ( mod ) . get ( SidedProxy . class . getName ( ) ) ; <nl> + SetMultimap < String , ASMData > modData = data . getAnnotationsFor ( mod ) ; <nl> + Set < ASMData > mods = modData . get ( Mod . class . getName ( ) ) ; <nl> + Set < ASMData > targets = modData . get ( SidedProxy . class . getName ( ) ) ; <nl> ClassLoader mcl = Loader . instance ( ) . getModClassLoader ( ) ; <nl> <nl> for ( ASMData targ : targets ) <nl> { <nl> try <nl> { <nl> + String amodid = ( String ) targ . getAnnotationInfo ( ) . get ( " modid " ) ; <nl> + if ( Strings . isNullOrEmpty ( amodid ) ) <nl> + { <nl> + amodid = ASMDataTable . getOwnerModID ( mods , targ ) ; <nl> + if ( Strings . isNullOrEmpty ( amodid ) ) <nl> + { <nl> + FMLLog . bigWarning ( " Could not determine owning mod for @ SidedProxy on % s for mod % s " , targ . getClassName ( ) , mod . getModId ( ) ) ; <nl> + continue ; <nl> + } <nl> + } <nl> + if ( ! mod . getModId ( ) . equals ( amodid ) ) <nl> + { <nl> + FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; <nl> + continue ; <nl> + } <nl> + <nl> Class < ? > proxyTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; <nl> Field target = proxyTarget . getDeclaredField ( targ . getObjectName ( ) ) ; <nl> if ( target = = null ) <nl> @ @ - 58 , 11 + 77 , 6 @ @ public class ProxyInjector <nl> target . setAccessible ( true ) ; <nl> <nl> SidedProxy annotation = target . getAnnotation ( SidedProxy . class ) ; <nl> - if ( ! Strings . isNullOrEmpty ( annotation . modId ( ) ) & & ! annotation . modId ( ) . equals ( mod . getModId ( ) ) ) <nl> - { <nl> - FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; <nl> - continue ; <nl> - } <nl> String targetType = side . isClient ( ) ? annotation . clientSide ( ) : annotation . serverSide ( ) ; <nl> if ( targetType . equals ( " " ) ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / SidedProxy . java b / src / main / java / net / minecraftforge / fml / common / SidedProxy . java <nl> index fc79499 . . 011946d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / SidedProxy . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / SidedProxy . java <nl> @ @ - 69 , 9 + 69 , 8 @ @ public @ interface SidedProxy <nl> String serverSide ( ) default " " ; <nl> <nl> / * * <nl> - * The ( optional ) name of a mod to load this proxy for . This will help ensure correct behaviour when loading a combined <nl> - * scala / java mod package . It is almost never going to be required , unless you ship both Scala and Java { @ link Mod } content <nl> - * in a single jar . <nl> + * The name of a mod to load this proxy for . This is required if this annotation is not in the class with @ Mod annotation . <nl> + * Or there is no other way to determine the mod this annotation belongs to . When in doubt , add this value . <nl> * / <nl> String modId ( ) default " " ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> index 3ded1d1 . . 37106e6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . util . Map ; <nl> import java . util . Set ; <nl> <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> + import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; <nl> <nl> import com . google . common . base . Predicate ; <nl> import com . google . common . collect . HashMultimap ; <nl> @ @ - 146 , 4 + 147 , 18 @ @ public class ASMDataTable <nl> { <nl> return this . packageMap . get ( pkg ) ; <nl> } <nl> + <nl> + public static String getOwnerModID ( Set < ASMData > mods , ASMData targ ) <nl> + { <nl> + if ( mods . size ( ) = = 1 ) { <nl> + return ( String ) mods . iterator ( ) . next ( ) . getAnnotationInfo ( ) . get ( " modid " ) ; <nl> + } else { <nl> + for ( ASMData m : mods ) { <nl> + if ( targ . getClassName ( ) . startsWith ( m . getClassName ( ) ) ) { <nl> + return ( String ) m . getAnnotationInfo ( ) . get ( " modid " ) ; <nl> + } <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java b / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java <nl> index 7d80724 . . 8d7b5db 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class ObjectHolderTest <nl> } <nl> } <nl> <nl> - @ Mod . EventBusSubscriber <nl> + @ Mod . EventBusSubscriber ( modid = MODID ) <nl> public static class Registration { <nl> @ SubscribeEvent <nl> public static void newRegistry ( RegistryEvent . NewRegistry event ) {
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> index d2c567f . . 88b171c 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> @ @ - 200 , 4 + 200 , 10 @ @ public class DummyModContainer implements ModContainer <nl> { <nl> return ImmutableList . of ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean shouldLoadInEnvironment ( ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index e4e6ae4 . . 1b6bb19 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> import net . minecraftforge . fml . common . versioning . VersionParser ; <nl> import net . minecraftforge . fml . common . versioning . VersionRange ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> <nl> @ @ - 611 , 4 + 612 , 30 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> return candidate . getContainedPackages ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean shouldLoadInEnvironment ( ) <nl> + { <nl> + boolean clientSideOnly = ( Boolean ) this . descriptor . get ( " clientSideOnly " ) ; <nl> + boolean serverSideOnly = ( Boolean ) this . descriptor . get ( " serverSideOnly " ) ; <nl> + <nl> + if ( clientSideOnly & & serverSideOnly ) <nl> + throw new RuntimeException ( " Mod annotation claims to be both client and server side only ! " ) ; <nl> + <nl> + Side side = FMLCommonHandler . instance ( ) . getSide ( ) ; <nl> + <nl> + if ( clientSideOnly & & side ! = Side . CLIENT ) <nl> + { <nl> + FMLLog . info ( " Disabling mod % d it is client side only . " , getModId ( ) ) ; <nl> + return false ; <nl> + } <nl> + <nl> + if ( serverSideOnly & & side ! = Side . SERVER ) <nl> + { <nl> + FMLLog . info ( " Disabling mod % d it is server side only . " , getModId ( ) ) ; <nl> + return false ; <nl> + } <nl> + <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> index f5e6e8d . . af91db1 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> @ @ - 201 , 4 + 201 , 10 @ @ public class InjectedModContainer implements ModContainer <nl> { <nl> return wrappedContainer . getOwnedPackages ( ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean shouldLoadInEnvironment ( ) <nl> + { <nl> + return true ; <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index de29255 . . ac51b40 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 90 , 8 + 90 , 21 @ @ public @ interface Mod <nl> boolean useMetadata ( ) default false ; <nl> <nl> / * * <nl> + * If true , this mod will not be loaded on the Dedicated Server environment . <nl> + * Will crash if both serverSideOnly and clientSideOnly are set to true . <nl> + * / <nl> + boolean clientSideOnly ( ) default false ; <nl> + <nl> + / * * <nl> + * If true , this mod will not be loaded on the Client environment . <nl> + * Will crash if both serverSideOnly and clientSideOnly are set to true . <nl> + * / <nl> + boolean serverSideOnly ( ) default false ; <nl> + <nl> + / * * <nl> * The acceptable range of minecraft versions that this mod will load and run in <nl> - * The default ( " empty string " ) indicates that only the current minecraft version is acceptable . <nl> + * The default ( " empty string " ) indicates that the currently RUNNING minecraft version is acceptable . <nl> + * This means ANY version that the end user adds the mod to . Modders PLEASS set this . <nl> * FML will refuse to run with an error if the minecraft version is not in this range across all mods . <nl> * @ return A version range as specified by the maven version range specification or the empty string <nl> * / <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> index 984b899 . . dde8dde 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> @ @ - 147 , 4 + 147 , 6 @ @ public interface ModContainer <nl> String getGuiClassName ( ) ; <nl> <nl> List < String > getOwnedPackages ( ) ; <nl> + <nl> + boolean shouldLoadInEnvironment ( ) ; <nl> } <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java b / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java <nl> index db2cd06 . . 6b1a124 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java <nl> @ @ - 32 , 7 + 32 , 7 @ @ public class ModContainerFactory <nl> public static Map < Type , Constructor < ? extends ModContainer > > modTypes = Maps . newHashMap ( ) ; <nl> private static Pattern modClass = Pattern . compile ( " . * ( \ \ . | ) ( mod \ \ _ [ ^ \ \ s $ ] + ) $ " ) ; <nl> private static ModContainerFactory INSTANCE = new ModContainerFactory ( ) ; <nl> - <nl> + <nl> private ModContainerFactory ( ) { <nl> / / We always know about Mod type <nl> registerContainerType ( Type . getType ( Mod . class ) , FMLModContainer . class ) ; <nl> @ @ - 40 , 7 + 40 , 7 @ @ public class ModContainerFactory <nl> public static ModContainerFactory instance ( ) { <nl> return INSTANCE ; <nl> } <nl> - <nl> + <nl> public void registerContainerType ( Type type , Class < ? extends ModContainer > container ) <nl> { <nl> try { <nl> @ @ - 76 , 7 + 76 , 13 @ @ public class ModContainerFactory <nl> { <nl> FMLLog . fine ( " Identified a mod of type % s ( % s ) - loading " , ann . getASMType ( ) , className ) ; <nl> try { <nl> - return modTypes . get ( ann . getASMType ( ) ) . newInstance ( className , container , ann . getValues ( ) ) ; <nl> + ModContainer ret = modTypes . get ( ann . getASMType ( ) ) . newInstance ( className , container , ann . getValues ( ) ) ; <nl> + if ( ! ret . shouldLoadInEnvironment ( ) ) <nl> + { <nl> + FMLLog . fine ( " Skipping mod % s , container opted to not load . " , className ) ; <nl> + return null ; <nl> + } <nl> + return ret ; <nl> } catch ( Exception e ) { <nl> FMLLog . log ( Level . ERROR , e , " Unable to construct % s container " , ann . getASMType ( ) . getClassName ( ) ) ; <nl> return null ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 index d1fe342 . . e622d9f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 @ @ - 20 , 6 + 20 , 8 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import com . google . common . base . Strings ; 
 + import com . google . common . collect . SetMultimap ; 
 + 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fml . common . discovery . ASMDataTable ; 
 import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; 
 @ @ - 44 , 7 + 46 , 9 @ @ public class AutomaticEventSubscriber 
 public static void inject ( ModContainer mod , ASMDataTable data , Side side ) 
 { 
 FMLLog . fine ( " Attempting to inject @ EventBusSubscriber classes into the eventbus for % s " , mod . getModId ( ) ) ; 
 - Set < ASMDataTable . ASMData > targets = data . getAnnotationsFor ( mod ) . get ( Mod . EventBusSubscriber . class . getName ( ) ) ; 
 + SetMultimap < String , ASMData > modData = data . getAnnotationsFor ( mod ) ; 
 + Set < ASMDataTable . ASMData > mods = modData . get ( Mod . class . getName ( ) ) ; 
 + Set < ASMDataTable . ASMData > targets = modData . get ( Mod . EventBusSubscriber . class . getName ( ) ) ; 
 ClassLoader mcl = Loader . instance ( ) . getModClassLoader ( ) ; 
 
 for ( ASMDataTable . ASMData targ : targets ) 
 @ @ - 62 , 6 + 66 , 19 @ @ public class AutomaticEventSubscriber 
 } 
 if ( sides = = DEFAULT | | sides . contains ( side ) ) { 
 FMLLog . fine ( " Found @ EventBusSubscriber class % s " , targ . getClassName ( ) ) ; 
 + String amodid = ( String ) targ . getAnnotationInfo ( ) . get ( " modid " ) ; 
 + if ( Strings . isNullOrEmpty ( amodid ) ) { 
 + amodid = ASMDataTable . getOwnerModID ( mods , targ ) ; 
 + if ( Strings . isNullOrEmpty ( amodid ) ) { 
 + FMLLog . bigWarning ( " Could not determine owning mod for @ EventBusSubscriber on % s for mod % s " , targ . getClassName ( ) , mod . getModId ( ) ) ; 
 + continue ; 
 + } 
 + } 
 + if ( ! mod . getModId ( ) . equals ( amodid ) ) 
 + { 
 + FMLLog . fine ( " Skipping @ EventBusSubscriber injection for % s since it is not for mod % s " , targ . getClassName ( ) , mod . getModId ( ) ) ; 
 + continue ; / / We ' re not injecting this guy 
 + } 
 Class < ? > subscriptionTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; 
 MinecraftForge . EVENT _ BUS . register ( subscriptionTarget ) ; 
 FMLLog . fine ( " Injected @ EventBusSubscriber class % s " , targ . getClassName ( ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index a6a67ba . . 33d64dd 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 435 , 11 + 435 , 27 @ @ public class FMLModContainer implements ModContainer 
 
 private void parseSimpleFieldAnnotation ( SetMultimap < String , ASMData > annotations , String annotationClassName , Function < ModContainer , Object > retriever ) throws IllegalAccessException 
 { 
 + Set < ASMDataTable . ASMData > mods = annotations . get ( Mod . class . getName ( ) ) ; 
 String [ ] annName = annotationClassName . split ( " \ \ . " ) ; 
 String annotationName = annName [ annName . length - 1 ] ; 
 for ( ASMData targets : annotations . get ( annotationClassName ) ) 
 { 
 String targetMod = ( String ) targets . getAnnotationInfo ( ) . get ( " value " ) ; 
 + String owner = ( String ) targets . getAnnotationInfo ( ) . get ( " owner " ) ; 
 + if ( Strings . isNullOrEmpty ( owner ) ) 
 + { 
 + owner = ASMDataTable . getOwnerModID ( mods , targets ) ; 
 + if ( Strings . isNullOrEmpty ( owner ) ) 
 + { 
 + FMLLog . bigWarning ( " Could not determine owning mod for @ % s on % s for mod % s " , annotationClassName , targets . getClassName ( ) , this . getModId ( ) ) ; 
 + continue ; 
 + } 
 + } 
 + if ( ! this . getModId ( ) . equals ( owner ) ) 
 + { 
 + FMLLog . fine ( " Skipping @ % s injection for % s . % s since it is not for mod % s " , annotationClassName , targets . getClassName ( ) , targets . getObjectName ( ) , this . getModId ( ) ) ; 
 + continue ; 
 + } 
 Field f = null ; 
 Object injectedMod = null ; 
 ModContainer mc = this ; 
 @ @ - 751 , 4 + 767 , 4 @ @ public class FMLModContainer implements ModContainer 
 { 
 return this . classVersion ; 
 } 
 - } 
 \ No newline at end of file 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index 24afe9d . . 830bddc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 282 , 6 + 282 , 12 @ @ public @ interface Mod 
 * The mod object to inject into this field 
 * / 
 String value ( ) default " " ; 
 + 
 + / * * 
 + * Optional owner modid , required if this annotation is on something that is not inside the main class of a mod container . 
 + * This is required to prevent mods from classloading other , potentially disabled mods . 
 + * / 
 + String owner ( ) default " " ; 
 } 
 / * * 
 * Populate the annotated field with the mod ' s metadata . 
 @ @ - 295 , 6 + 301 , 12 @ @ public @ interface Mod 
 * The mod id specifying the metadata to load here 
 * / 
 String value ( ) default " " ; 
 + 
 + / * * 
 + * Optional owner modid , required if this annotation is on something that is not inside the main class of a mod container . 
 + * This is required to prevent mods from classloading other , potentially disabled mods . 
 + * / 
 + String owner ( ) default " " ; 
 } 
 
 / * * 
 @ @ - 314 , 5 + 326 , 12 @ @ public @ interface Mod 
 @ Target ( ElementType . TYPE ) 
 public @ interface EventBusSubscriber { 
 Side [ ] value ( ) default { Side . CLIENT , Side . SERVER } ; 
 + 
 + / * * 
 + * Optional value , only nessasary if tis annotation is not on the same class that has a @ Mod annotation . 
 + * Needed to prevent early classloading of classes not owned by your mod . 
 + * @ return 
 + * / 
 + String modid ( ) default " " ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 index 9c66694 . . 8f46893 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 @ @ - 30 , 6 + 30 , 7 @ @ import net . minecraftforge . fml . relauncher . Side ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Strings ; 
 + import com . google . common . collect . SetMultimap ; 
 
 / * * 
 * @ author cpw 
 @ @ - 40 , 13 + 41 , 31 @ @ public class ProxyInjector 
 public static void inject ( ModContainer mod , ASMDataTable data , Side side , ILanguageAdapter languageAdapter ) 
 { 
 FMLLog . fine ( " Attempting to inject @ SidedProxy classes into % s " , mod . getModId ( ) ) ; 
 - Set < ASMData > targets = data . getAnnotationsFor ( mod ) . get ( SidedProxy . class . getName ( ) ) ; 
 + SetMultimap < String , ASMData > modData = data . getAnnotationsFor ( mod ) ; 
 + Set < ASMData > mods = modData . get ( Mod . class . getName ( ) ) ; 
 + Set < ASMData > targets = modData . get ( SidedProxy . class . getName ( ) ) ; 
 ClassLoader mcl = Loader . instance ( ) . getModClassLoader ( ) ; 
 
 for ( ASMData targ : targets ) 
 { 
 try 
 { 
 + String amodid = ( String ) targ . getAnnotationInfo ( ) . get ( " modid " ) ; 
 + if ( Strings . isNullOrEmpty ( amodid ) ) 
 + { 
 + amodid = ASMDataTable . getOwnerModID ( mods , targ ) ; 
 + if ( Strings . isNullOrEmpty ( amodid ) ) 
 + { 
 + FMLLog . bigWarning ( " Could not determine owning mod for @ SidedProxy on % s for mod % s " , targ . getClassName ( ) , mod . getModId ( ) ) ; 
 + continue ; 
 + } 
 + } 
 + if ( ! mod . getModId ( ) . equals ( amodid ) ) 
 + { 
 + FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; 
 + continue ; 
 + } 
 + 
 Class < ? > proxyTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; 
 Field target = proxyTarget . getDeclaredField ( targ . getObjectName ( ) ) ; 
 if ( target = = null ) 
 @ @ - 58 , 11 + 77 , 6 @ @ public class ProxyInjector 
 target . setAccessible ( true ) ; 
 
 SidedProxy annotation = target . getAnnotation ( SidedProxy . class ) ; 
 - if ( ! Strings . isNullOrEmpty ( annotation . modId ( ) ) & & ! annotation . modId ( ) . equals ( mod . getModId ( ) ) ) 
 - { 
 - FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; 
 - continue ; 
 - } 
 String targetType = side . isClient ( ) ? annotation . clientSide ( ) : annotation . serverSide ( ) ; 
 if ( targetType . equals ( " " ) ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / SidedProxy . java b / src / main / java / net / minecraftforge / fml / common / SidedProxy . java 
 index fc79499 . . 011946d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / SidedProxy . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / SidedProxy . java 
 @ @ - 69 , 9 + 69 , 8 @ @ public @ interface SidedProxy 
 String serverSide ( ) default " " ; 
 
 / * * 
 - * The ( optional ) name of a mod to load this proxy for . This will help ensure correct behaviour when loading a combined 
 - * scala / java mod package . It is almost never going to be required , unless you ship both Scala and Java { @ link Mod } content 
 - * in a single jar . 
 + * The name of a mod to load this proxy for . This is required if this annotation is not in the class with @ Mod annotation . 
 + * Or there is no other way to determine the mod this annotation belongs to . When in doubt , add this value . 
 * / 
 String modId ( ) default " " ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 index 3ded1d1 . . 37106e6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ASMDataTable . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . util . Map ; 
 import java . util . Set ; 
 
 import net . minecraftforge . fml . common . ModContainer ; 
 + import net . minecraftforge . fml . common . discovery . ASMDataTable . ASMData ; 
 
 import com . google . common . base . Predicate ; 
 import com . google . common . collect . HashMultimap ; 
 @ @ - 146 , 4 + 147 , 18 @ @ public class ASMDataTable 
 { 
 return this . packageMap . get ( pkg ) ; 
 } 
 + 
 + public static String getOwnerModID ( Set < ASMData > mods , ASMData targ ) 
 + { 
 + if ( mods . size ( ) = = 1 ) { 
 + return ( String ) mods . iterator ( ) . next ( ) . getAnnotationInfo ( ) . get ( " modid " ) ; 
 + } else { 
 + for ( ASMData m : mods ) { 
 + if ( targ . getClassName ( ) . startsWith ( m . getClassName ( ) ) ) { 
 + return ( String ) m . getAnnotationInfo ( ) . get ( " modid " ) ; 
 + } 
 + } 
 + } 
 + return null ; 
 + } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java b / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java 
 index 7d80724 . . 8d7b5db 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public class ObjectHolderTest 
 } 
 } 
 
 - @ Mod . EventBusSubscriber 
 + @ Mod . EventBusSubscriber ( modid = MODID ) 
 public static class Registration { 
 @ SubscribeEvent 
 public static void newRegistry ( RegistryEvent . NewRegistry event ) {

NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 index d2c567f . . 88b171c 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 @ @ - 200 , 4 + 200 , 10 @ @ public class DummyModContainer implements ModContainer 
 { 
 return ImmutableList . of ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean shouldLoadInEnvironment ( ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index e4e6ae4 . . 1b6bb19 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 import net . minecraftforge . fml . common . versioning . VersionParser ; 
 import net . minecraftforge . fml . common . versioning . VersionRange ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 
 import org . apache . logging . log4j . Level ; 
 
 @ @ - 611 , 4 + 612 , 30 @ @ public class FMLModContainer implements ModContainer 
 { 
 return candidate . getContainedPackages ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean shouldLoadInEnvironment ( ) 
 + { 
 + boolean clientSideOnly = ( Boolean ) this . descriptor . get ( " clientSideOnly " ) ; 
 + boolean serverSideOnly = ( Boolean ) this . descriptor . get ( " serverSideOnly " ) ; 
 + 
 + if ( clientSideOnly & & serverSideOnly ) 
 + throw new RuntimeException ( " Mod annotation claims to be both client and server side only ! " ) ; 
 + 
 + Side side = FMLCommonHandler . instance ( ) . getSide ( ) ; 
 + 
 + if ( clientSideOnly & & side ! = Side . CLIENT ) 
 + { 
 + FMLLog . info ( " Disabling mod % d it is client side only . " , getModId ( ) ) ; 
 + return false ; 
 + } 
 + 
 + if ( serverSideOnly & & side ! = Side . SERVER ) 
 + { 
 + FMLLog . info ( " Disabling mod % d it is server side only . " , getModId ( ) ) ; 
 + return false ; 
 + } 
 + 
 + return true ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 index f5e6e8d . . af91db1 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 @ @ - 201 , 4 + 201 , 10 @ @ public class InjectedModContainer implements ModContainer 
 { 
 return wrappedContainer . getOwnedPackages ( ) ; 
 } 
 + 
 + @ Override 
 + public boolean shouldLoadInEnvironment ( ) 
 + { 
 + return true ; 
 + } 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index de29255 . . ac51b40 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 90 , 8 + 90 , 21 @ @ public @ interface Mod 
 boolean useMetadata ( ) default false ; 
 
 / * * 
 + * If true , this mod will not be loaded on the Dedicated Server environment . 
 + * Will crash if both serverSideOnly and clientSideOnly are set to true . 
 + * / 
 + boolean clientSideOnly ( ) default false ; 
 + 
 + / * * 
 + * If true , this mod will not be loaded on the Client environment . 
 + * Will crash if both serverSideOnly and clientSideOnly are set to true . 
 + * / 
 + boolean serverSideOnly ( ) default false ; 
 + 
 + / * * 
 * The acceptable range of minecraft versions that this mod will load and run in 
 - * The default ( " empty string " ) indicates that only the current minecraft version is acceptable . 
 + * The default ( " empty string " ) indicates that the currently RUNNING minecraft version is acceptable . 
 + * This means ANY version that the end user adds the mod to . Modders PLEASS set this . 
 * FML will refuse to run with an error if the minecraft version is not in this range across all mods . 
 * @ return A version range as specified by the maven version range specification or the empty string 
 * / 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 index 984b899 . . dde8dde 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 @ @ - 147 , 4 + 147 , 6 @ @ public interface ModContainer 
 String getGuiClassName ( ) ; 
 
 List < String > getOwnedPackages ( ) ; 
 + 
 + boolean shouldLoadInEnvironment ( ) ; 
 } 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java b / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java 
 index db2cd06 . . 6b1a124 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / ModContainerFactory . java 
 @ @ - 32 , 7 + 32 , 7 @ @ public class ModContainerFactory 
 public static Map < Type , Constructor < ? extends ModContainer > > modTypes = Maps . newHashMap ( ) ; 
 private static Pattern modClass = Pattern . compile ( " . * ( \ \ . | ) ( mod \ \ _ [ ^ \ \ s $ ] + ) $ " ) ; 
 private static ModContainerFactory INSTANCE = new ModContainerFactory ( ) ; 
 - 
 + 
 private ModContainerFactory ( ) { 
 / / We always know about Mod type 
 registerContainerType ( Type . getType ( Mod . class ) , FMLModContainer . class ) ; 
 @ @ - 40 , 7 + 40 , 7 @ @ public class ModContainerFactory 
 public static ModContainerFactory instance ( ) { 
 return INSTANCE ; 
 } 
 - 
 + 
 public void registerContainerType ( Type type , Class < ? extends ModContainer > container ) 
 { 
 try { 
 @ @ - 76 , 7 + 76 , 13 @ @ public class ModContainerFactory 
 { 
 FMLLog . fine ( " Identified a mod of type % s ( % s ) - loading " , ann . getASMType ( ) , className ) ; 
 try { 
 - return modTypes . get ( ann . getASMType ( ) ) . newInstance ( className , container , ann . getValues ( ) ) ; 
 + ModContainer ret = modTypes . get ( ann . getASMType ( ) ) . newInstance ( className , container , ann . getValues ( ) ) ; 
 + if ( ! ret . shouldLoadInEnvironment ( ) ) 
 + { 
 + FMLLog . fine ( " Skipping mod % s , container opted to not load . " , className ) ; 
 + return null ; 
 + } 
 + return ret ; 
 } catch ( Exception e ) { 
 FMLLog . log ( Level . ERROR , e , " Unable to construct % s container " , ann . getASMType ( ) . getClassName ( ) ) ; 
 return null ;
