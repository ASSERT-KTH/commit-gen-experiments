BLEU SCORE: 0.004137511999313648

TEST MSG: Config option implemented
GENERATED MSG: Fix errors in preInit being lost when followed by a crash in fireRegistryEvents or objectHolder

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / VersionChecker . java b / src / main / java / net / minecraftforge / fml / VersionChecker . java <nl> index d304d5b . . 6548978 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / VersionChecker . java <nl> + + + b / src / main / java / net / minecraftforge / fml / VersionChecker . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . gson . Gson ; <nl> + import net . minecraftforge . common . ForgeConfig ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> import net . minecraftforge . forgespi . language . IModInfo ; <nl> import net . minecraftforge . versions . mcp . MCPVersion ; <nl> @ @ - 130 , 11 + 131 , 11 @ @ public class VersionChecker <nl> @ Override <nl> public void run ( ) <nl> { <nl> - / / if ( ! ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , " Global " , true ) . getBoolean ( ) ) <nl> - / / { <nl> - / / log . info ( " Global Forge version check system disabled , no further processing . " ) ; <nl> - / / return ; <nl> - / / } TODO config <nl> + if ( ForgeConfig . GENERAL . disableVersionCheck . get ( ) ) <nl> + { <nl> + LOGGER . info ( " Global Forge version check system disabled , no further processing . " ) ; <nl> + return ; <nl> + } <nl> <nl> for ( IModInfo entry : gatherMods ( ) ) <nl> {
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / LoadController . java b / src / main / java / net / minecraftforge / fml / common / LoadController . java <nl> index b6ed0b8 . . 17c9fa0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / LoadController . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / LoadController . java <nl> @ @ - 174 , 11 + 174 , 18 @ @ public class LoadController <nl> } <nl> } <nl> <nl> + @ Deprecated / / TODO remove in 1 . 13 <nl> public void checkErrorsAfterAvailable ( ) <nl> { <nl> + checkErrors ( ) ; <nl> + } <nl> + <nl> + public void checkErrors ( ) <nl> + { <nl> if ( errors . size ( ) > 0 ) <nl> { <nl> - FMLLog . log . fatal ( " Fatal errors were detected during { } . Loading cannot continue " , LoaderState . AVAILABLE ) ; <nl> + FMLLog . log . fatal ( " Fatal errors were detected during { } . Loading cannot continue . " , state ) ; <nl> + state = state . transition ( true ) ; <nl> throw throwStoredErrors ( ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index f76b4b5 . . 5dd9f22 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 600 , 6 + 600 , 7 @ @ public class Loader <nl> ItemStackHolderInjector . INSTANCE . findHolders ( discoverer . getASMTable ( ) ) ; <nl> CapabilityManager . INSTANCE . injectCapabilities ( discoverer . getASMTable ( ) ) ; <nl> modController . distributeStateMessage ( LoaderState . PREINITIALIZATION , discoverer . getASMTable ( ) , canonicalConfigDir ) ; <nl> + modController . checkErrors ( ) ; <nl> GameData . fireRegistryEvents ( rl - > ! rl . equals ( GameData . RECIPES ) ) ; <nl> FMLCommonHandler . instance ( ) . fireSidedRegistryEvents ( ) ; <nl> ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> @ @ - 725 , 7 + 726 , 7 @ @ public class Loader <nl> progressBar . step ( " Finishing up " ) ; <nl> modController . transition ( LoaderState . AVAILABLE , false ) ; <nl> modController . distributeStateMessage ( LoaderState . AVAILABLE ) ; <nl> - modController . checkErrorsAfterAvailable ( ) ; <nl> + modController . checkErrors ( ) ; <nl> GameData . freezeData ( ) ; <nl> FMLLog . log . info ( " Forge Mod Loader has successfully loaded { } mod { } " , mods . size ( ) , mods . size ( ) = = 1 ? " " : " s " ) ; <nl> progressBar . step ( " Completing Minecraft initialization " ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ClientExceptionTestMod . java b / src / test / java / net / minecraftforge / debug / ClientExceptionTestMod . java <nl> index e07abde . . 3b4edc2 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ClientExceptionTestMod . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ClientExceptionTestMod . java <nl> @ @ - 2 , 11 + 2 , 15 @ @ package net . minecraftforge . debug ; <nl> <nl> import net . minecraft . client . gui . FontRenderer ; <nl> import net . minecraft . client . gui . GuiErrorScreen ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> import net . minecraftforge . fml . client . CustomModLoadingErrorDisplayException ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; <nl> import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> <nl> @ Mod ( modid = " clientexceptiontest " , version = " 1 . 0 " , name = " Client Exception Test " , clientSideOnly = true ) <nl> public class ClientExceptionTestMod <nl> @ @ - 22 , 10 + 26 , 17 @ @ public class ClientExceptionTestMod <nl> { <nl> if ( ENABLE _ PREINIT ) <nl> { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> throwException ( " Thrown in Pre - Init " ) ; <nl> } <nl> } <nl> <nl> + @ SubscribeEvent <nl> + public void registerItems ( RegistryEvent < Item > itemRegistryEvent ) <nl> + { <nl> + throw new RuntimeException ( " This should not be called because the mod threw an exception earlier in Pre - Init and is in a broken state . " ) ; <nl> + } <nl> + <nl> @ Mod . EventHandler <nl> public void onInit ( FMLInitializationEvent e ) <nl> {

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / VersionChecker . java b / src / main / java / net / minecraftforge / fml / VersionChecker . java 
 index d304d5b . . 6548978 100644 
 - - - a / src / main / java / net / minecraftforge / fml / VersionChecker . java 
 + + + b / src / main / java / net / minecraftforge / fml / VersionChecker . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml ; 
 
 import com . google . common . io . ByteStreams ; 
 import com . google . gson . Gson ; 
 + import net . minecraftforge . common . ForgeConfig ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 import net . minecraftforge . forgespi . language . IModInfo ; 
 import net . minecraftforge . versions . mcp . MCPVersion ; 
 @ @ - 130 , 11 + 131 , 11 @ @ public class VersionChecker 
 @ Override 
 public void run ( ) 
 { 
 - / / if ( ! ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , " Global " , true ) . getBoolean ( ) ) 
 - / / { 
 - / / log . info ( " Global Forge version check system disabled , no further processing . " ) ; 
 - / / return ; 
 - / / } TODO config 
 + if ( ForgeConfig . GENERAL . disableVersionCheck . get ( ) ) 
 + { 
 + LOGGER . info ( " Global Forge version check system disabled , no further processing . " ) ; 
 + return ; 
 + } 
 
 for ( IModInfo entry : gatherMods ( ) ) 
 {

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / LoadController . java b / src / main / java / net / minecraftforge / fml / common / LoadController . java 
 index b6ed0b8 . . 17c9fa0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / LoadController . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / LoadController . java 
 @ @ - 174 , 11 + 174 , 18 @ @ public class LoadController 
 } 
 } 
 
 + @ Deprecated / / TODO remove in 1 . 13 
 public void checkErrorsAfterAvailable ( ) 
 { 
 + checkErrors ( ) ; 
 + } 
 + 
 + public void checkErrors ( ) 
 + { 
 if ( errors . size ( ) > 0 ) 
 { 
 - FMLLog . log . fatal ( " Fatal errors were detected during { } . Loading cannot continue " , LoaderState . AVAILABLE ) ; 
 + FMLLog . log . fatal ( " Fatal errors were detected during { } . Loading cannot continue . " , state ) ; 
 + state = state . transition ( true ) ; 
 throw throwStoredErrors ( ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index f76b4b5 . . 5dd9f22 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 600 , 6 + 600 , 7 @ @ public class Loader 
 ItemStackHolderInjector . INSTANCE . findHolders ( discoverer . getASMTable ( ) ) ; 
 CapabilityManager . INSTANCE . injectCapabilities ( discoverer . getASMTable ( ) ) ; 
 modController . distributeStateMessage ( LoaderState . PREINITIALIZATION , discoverer . getASMTable ( ) , canonicalConfigDir ) ; 
 + modController . checkErrors ( ) ; 
 GameData . fireRegistryEvents ( rl - > ! rl . equals ( GameData . RECIPES ) ) ; 
 FMLCommonHandler . instance ( ) . fireSidedRegistryEvents ( ) ; 
 ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 @ @ - 725 , 7 + 726 , 7 @ @ public class Loader 
 progressBar . step ( " Finishing up " ) ; 
 modController . transition ( LoaderState . AVAILABLE , false ) ; 
 modController . distributeStateMessage ( LoaderState . AVAILABLE ) ; 
 - modController . checkErrorsAfterAvailable ( ) ; 
 + modController . checkErrors ( ) ; 
 GameData . freezeData ( ) ; 
 FMLLog . log . info ( " Forge Mod Loader has successfully loaded { } mod { } " , mods . size ( ) , mods . size ( ) = = 1 ? " " : " s " ) ; 
 progressBar . step ( " Completing Minecraft initialization " ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ClientExceptionTestMod . java b / src / test / java / net / minecraftforge / debug / ClientExceptionTestMod . java 
 index e07abde . . 3b4edc2 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ClientExceptionTestMod . java 
 + + + b / src / test / java / net / minecraftforge / debug / ClientExceptionTestMod . java 
 @ @ - 2 , 11 + 2 , 15 @ @ package net . minecraftforge . debug ; 
 
 import net . minecraft . client . gui . FontRenderer ; 
 import net . minecraft . client . gui . GuiErrorScreen ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 import net . minecraftforge . fml . client . CustomModLoadingErrorDisplayException ; 
 import net . minecraftforge . fml . common . Mod ; 
 import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; 
 import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 
 @ Mod ( modid = " clientexceptiontest " , version = " 1 . 0 " , name = " Client Exception Test " , clientSideOnly = true ) 
 public class ClientExceptionTestMod 
 @ @ - 22 , 10 + 26 , 17 @ @ public class ClientExceptionTestMod 
 { 
 if ( ENABLE _ PREINIT ) 
 { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 throwException ( " Thrown in Pre - Init " ) ; 
 } 
 } 
 
 + @ SubscribeEvent 
 + public void registerItems ( RegistryEvent < Item > itemRegistryEvent ) 
 + { 
 + throw new RuntimeException ( " This should not be called because the mod threw an exception earlier in Pre - Init and is in a broken state . " ) ; 
 + } 
 + 
 @ Mod . EventHandler 
 public void onInit ( FMLInitializationEvent e ) 
 {
