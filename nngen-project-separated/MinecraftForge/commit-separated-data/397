BLEU SCORE: 0.02860344994386159

TEST MSG: Fix tripwire statemap not being complete when mappings change . Closes # 3924
GENERATED MSG: Stop rotation of extended pistons , beds , and double chests Fixes # 3634

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index b34d024 . . 7d91196 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 1483 , 10 + 1483 , 25 @ @ <nl> public static void func _ 149671 _ p ( ) <nl> { <nl> func _ 176215 _ a ( 0 , field _ 176230 _ a , ( new BlockAir ( ) ) . func _ 149663 _ c ( " air " ) ) ; <nl> - @ @ - 1247 , 14 + 2511 , 7 @ @ <nl> + @ @ - 1232 , 31 + 2496 , 6 @ @ <nl> + block15 . field _ 149783 _ u = flag ; <nl> } <nl> - else <nl> - { <nl> + } <nl> + - <nl> + - Set < Block > set = Sets . newHashSet ( field _ 149771 _ c . func _ 82594 _ a ( new ResourceLocation ( " tripwire " ) ) ) ; <nl> + - <nl> + - for ( Block block16 : field _ 149771 _ c ) <nl> + - { <nl> + - if ( set . contains ( block16 ) ) <nl> + - { <nl> + - for ( int i = 0 ; i < 15 ; + + i ) <nl> + - { <nl> + - int j = field _ 149771 _ c . func _ 148757 _ b ( block16 ) < < 4 | i ; <nl> + - field _ 176229 _ d . func _ 148746 _ a ( block16 . func _ 176203 _ a ( i ) , j ) ; <nl> + - } <nl> + - } <nl> + - else <nl> + - { <nl> - UnmodifiableIterator unmodifiableiterator = block16 . func _ 176194 _ O ( ) . func _ 177619 _ a ( ) . iterator ( ) ; <nl> - <nl> - while ( unmodifiableiterator . hasNext ( ) ) <nl> @ @ - 1495 , 7 + 1510 , 8 @ @ <nl> - int k = field _ 149771 _ c . func _ 148757 _ b ( block16 ) < < 4 | block16 . func _ 176201 _ c ( iblockstate ) ; <nl> - field _ 176229 _ d . func _ 148746 _ a ( iblockstate , k ) ; <nl> - } <nl> - + / / Handled in GameData . BlockCallbacks - leaving tripwire as it seems to be special cased <nl> - } <nl> - } <nl> + - } <nl> + - } <nl> } <nl> + <nl> + private static void func _ 176215 _ a ( int p _ 176215 _ 0 _ , ResourceLocation p _ 176215 _ 1 _ , Block p _ 176215 _ 2 _ ) <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 7ff7ccd . . 5562582 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 285 , 6 + 285 , 12 @ @ public class GameData <nl> @ SuppressWarnings ( " unchecked " ) <nl> ClearableObjectIntIdentityMap < IBlockState > blockstateMap = owner . getSlaveMap ( BLOCKSTATE _ TO _ ID , ClearableObjectIntIdentityMap . class ) ; <nl> <nl> + if ( " minecraft : tripwire " . equals ( block . getRegistryName ( ) . toString ( ) ) ) / / Tripwire is crap so we have to special case whee ! <nl> + { <nl> + for ( int meta = 0 ; meta < 15 ; meta + + ) <nl> + blockstateMap . put ( block . getStateFromMeta ( meta ) , id < < 4 | meta ) ; <nl> + } <nl> + <nl> / / So , due to blocks having more in - world states then metadata allows , we have to turn the map into a semi - milti - bimap . <nl> / / We can do this however because the implementation of the map is last set wins . So we can add all states , then fix the meta bimap . <nl> / / Multiple states - > meta . But meta to CORRECT state . <nl> @ @ - 303 , 7 + 309 , 6 @ @ public class GameData <nl> blockstateMap . put ( block . getStateFromMeta ( meta ) , id < < 4 | meta ) ; / / Put the CORRECT thing ! <nl> } <nl> <nl> - <nl> if ( oldBlock ! = null ) <nl> { <nl> @ SuppressWarnings ( " unchecked " )
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index 8df9a21 . . cbf7f64 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 197 , 7 + 197 , 7 @ @ <nl> public SoundType func _ 185467 _ w ( ) <nl> { <nl> return this . field _ 149762 _ H ; <nl> - @ @ - 908 , 6 + 932 , 1188 @ @ <nl> + @ @ - 908 , 6 + 932 , 1217 @ @ <nl> { <nl> } <nl> <nl> @ @ - 1037 , 10 + 1037 , 39 @ @ <nl> + IBlockState state = world . func _ 180495 _ p ( pos ) ; <nl> + for ( IProperty < ? > prop : state . func _ 177228 _ b ( ) . keySet ( ) ) <nl> + { <nl> - + if ( prop . func _ 177701 _ a ( ) . equals ( " facing " ) | | prop . func _ 177701 _ a ( ) . equals ( " rotation " ) ) <nl> + + if ( ( prop . func _ 177701 _ a ( ) . equals ( " facing " ) | | prop . func _ 177701 _ a ( ) . equals ( " rotation " ) ) & & prop . func _ 177699 _ b ( ) = = EnumFacing . class ) <nl> + { <nl> - + world . func _ 175656 _ a ( pos , state . func _ 177231 _ a ( prop ) ) ; <nl> - + return true ; <nl> + + Block block = state . func _ 177230 _ c ( ) ; <nl> + + if ( ! ( block instanceof BlockBed ) & & ! ( block instanceof BlockPistonExtension ) ) <nl> + + { <nl> + + IBlockState newState ; <nl> + + / / noinspection unchecked <nl> + + IProperty < EnumFacing > facingProperty = ( IProperty < EnumFacing > ) prop ; <nl> + + EnumFacing facing = state . func _ 177229 _ b ( facingProperty ) ; <nl> + + java . util . Collection < EnumFacing > validFacings = facingProperty . func _ 177700 _ c ( ) ; <nl> + + <nl> + + / / rotate horizontal facings clockwise <nl> + + if ( validFacings . size ( ) = = 4 & & ! validFacings . contains ( EnumFacing . UP ) & & ! validFacings . contains ( EnumFacing . DOWN ) ) <nl> + + { <nl> + + newState = state . func _ 177226 _ a ( facingProperty , facing . func _ 176746 _ e ( ) ) ; <nl> + + } <nl> + + else <nl> + + { <nl> + + / / rotate other facings about the axis <nl> + + EnumFacing rotatedFacing = facing . func _ 176732 _ a ( axis . func _ 176740 _ k ( ) ) ; <nl> + + if ( validFacings . contains ( rotatedFacing ) ) <nl> + + { <nl> + + newState = state . func _ 177226 _ a ( facingProperty , rotatedFacing ) ; <nl> + + } <nl> + + else / / abnormal facing property , just cycle it <nl> + + { <nl> + + newState = state . func _ 177231 _ a ( facingProperty ) ; <nl> + + } <nl> + + } <nl> + + <nl> + + world . func _ 175656 _ a ( pos , newState ) ; <nl> + + return true ; <nl> + + } <nl> + } <nl> + } <nl> + return false ; <nl> @ @ - 1059 , 7 + 1088 , 7 @ @ <nl> + IBlockState state = world . func _ 180495 _ p ( pos ) ; <nl> + for ( IProperty < ? > prop : state . func _ 177228 _ b ( ) . keySet ( ) ) <nl> + { <nl> - + if ( prop . func _ 177701 _ a ( ) . equals ( " facing " ) & & prop . func _ 177699 _ b ( ) = = EnumFacing . class ) <nl> + + if ( ( prop . func _ 177701 _ a ( ) . equals ( " facing " ) | | prop . func _ 177701 _ a ( ) . equals ( " rotation " ) ) & & prop . func _ 177699 _ b ( ) = = EnumFacing . class ) <nl> + { <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + java . util . Collection < EnumFacing > values = ( ( java . util . Collection < EnumFacing > ) prop . func _ 177700 _ c ( ) ) ; <nl> @ @ - 1386 , 7 + 1415 , 7 @ @ <nl> public static void func _ 149671 _ p ( ) <nl> { <nl> func _ 176215 _ a ( 0 , field _ 176230 _ a , ( new BlockAir ( ) ) . func _ 149663 _ c ( " air " ) ) ; <nl> - @ @ - 1201 , 14 + 2407 , 7 @ @ <nl> + @ @ - 1201 , 14 + 2436 , 7 @ @ <nl> } <nl> else <nl> { <nl> diff - - git a / patches / minecraft / net / minecraft / block / BlockChest . java . patch b / patches / minecraft / net / minecraft / block / BlockChest . java . patch <nl> index 55d6a84 . . 338a9c4 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / BlockChest . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / BlockChest . java . patch <nl> @ @ - 9 , 3 + 9 , 14 @ @ <nl> } <nl> <nl> private boolean func _ 176453 _ o ( World p _ 176453 _ 1 _ , BlockPos p _ 176453 _ 2 _ ) <nl> + @ @ - 587 , 4 + 587 , 10 @ @ <nl> + BASIC , <nl> + TRAP ; <nl> + } <nl> + + <nl> + + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + + public boolean rotateBlock ( World world , BlockPos pos , EnumFacing axis ) <nl> + + { <nl> + + return ! func _ 176454 _ e ( world , pos ) & & super . rotateBlock ( world , pos , axis ) ; <nl> + + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / block / BlockPistonBase . java . patch b / patches / minecraft / net / minecraft / block / BlockPistonBase . java . patch <nl> index de7791e . . 7acd5d4 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / BlockPistonBase . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / BlockPistonBase . java . patch <nl> @ @ - 29 , 3 + 29 , 15 @ @ <nl> p _ 176319 _ 1 _ . func _ 180501 _ a ( blockpos1 , Blocks . field _ 150350 _ a . func _ 176223 _ P ( ) , 4 ) ; <nl> - - k ; <nl> aiblockstate [ k ] = iblockstate ; <nl> + @ @ - 432 , 4 + 434 , 11 @ @ <nl> + { <nl> + return new BlockStateContainer ( this , new IProperty [ ] { field _ 176387 _ N , field _ 176320 _ b } ) ; <nl> + } <nl> + + <nl> + + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + + public boolean rotateBlock ( World world , BlockPos pos , EnumFacing axis ) <nl> + + { <nl> + + IBlockState state = world . func _ 180495 _ p ( pos ) ; <nl> + + return ! state . func _ 177229 _ b ( field _ 176320 _ b ) & & super . rotateBlock ( world , pos , axis ) ; <nl> + + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / block / BlockRedstoneDiode . java . patch b / patches / minecraft / net / minecraft / block / BlockRedstoneDiode . java . patch <nl> index 43c5d17 . . 7225c69 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / BlockRedstoneDiode . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / BlockRedstoneDiode . java . patch <nl> @ @ - 9 , 3 + 9 , 27 @ @ <nl> p _ 176400 _ 1 _ . func _ 190524 _ a ( blockpos , this , p _ 176400 _ 2 _ ) ; <nl> p _ 176400 _ 1 _ . func _ 175695 _ a ( blockpos , this , enumfacing ) ; <nl> } <nl> + @ @ - 275 , 4 + 277 , 23 @ @ <nl> + { <nl> + return BlockRenderLayer . CUTOUT ; <nl> + } <nl> + + <nl> + + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + + @ Override <nl> + + public boolean rotateBlock ( World world , BlockPos pos , EnumFacing axis ) <nl> + + { <nl> + + if ( super . rotateBlock ( world , pos , axis ) ) <nl> + + { <nl> + + IBlockState state = world . func _ 180495 _ p ( pos ) ; <nl> + + state = func _ 180675 _ k ( state ) ; <nl> + + world . func _ 175656 _ a ( pos , state ) ; <nl> + + <nl> + + if ( func _ 176404 _ e ( world , pos , state ) ) <nl> + + { <nl> + + world . func _ 175684 _ a ( pos , this , 1 ) ; <nl> + + } <nl> + + return true ; <nl> + + } <nl> + + return false ; <nl> + + } <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / WrenchRotateDebug . java b / src / test / java / net / minecraftforge / debug / WrenchRotateDebug . java <nl> new file mode 100644 <nl> index 0000000 . . 412f1de <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / WrenchRotateDebug . java <nl> @ @ - 0 , 0 + 1 , 106 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> + import net . minecraft . client . renderer . block . model . ModelBakery ; <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . EnumActionResult ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumHand ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . SidedProxy ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + @ Mod ( modid = WrenchRotateDebug . modID , name = " Wrench Rotate Debug " , version = " 0 . 0 . 0 " ) <nl> + public class WrenchRotateDebug <nl> + { <nl> + public static final String modID = " wrenchrotatedebug " ; <nl> + private static final ResourceLocation testWrenchName = new ResourceLocation ( modID , " test _ wrench " ) ; <nl> + <nl> + @ SidedProxy <nl> + public static CommonProxy proxy ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + TestWrench wrench = new TestWrench ( ) ; <nl> + wrench . setRegistryName ( testWrenchName ) ; <nl> + <nl> + GameRegistry . register ( wrench ) ; <nl> + proxy . setupModel ( wrench ) ; <nl> + } <nl> + <nl> + public static class CommonProxy <nl> + { <nl> + void setupModel ( TestWrench wrench ) <nl> + { <nl> + } <nl> + } <nl> + <nl> + public static class ServerProxy extends CommonProxy <nl> + { <nl> + } <nl> + <nl> + public static class ClientProxy extends CommonProxy <nl> + { <nl> + @ SuppressWarnings ( " unused " ) <nl> + @ Override <nl> + void setupModel ( TestWrench wrench ) <nl> + { <nl> + final ModelResourceLocation wrenchName = new ModelResourceLocation ( testWrenchName , " inventory " ) ; <nl> + ModelBakery . registerItemVariants ( wrench , wrenchName ) ; <nl> + ModelLoader . setCustomMeshDefinition ( wrench , new ItemMeshDefinition ( ) <nl> + { <nl> + @ Override <nl> + public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> + { <nl> + return wrenchName ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + <nl> + public static class TestWrench extends Item <nl> + { <nl> + public TestWrench ( ) <nl> + { <nl> + setCreativeTab ( CreativeTabs . TOOLS ) ; <nl> + setMaxStackSize ( 1 ) ; <nl> + setHarvestLevel ( " wrench " , 0 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public EnumActionResult onItemUse ( EntityPlayer player , World worldIn , BlockPos pos , EnumHand hand , EnumFacing facing , float hitX , float hitY , float hitZ ) <nl> + { <nl> + ItemStack wrench = player . getHeldItem ( hand ) ; <nl> + if ( player . canPlayerEdit ( pos , facing , wrench ) & & worldIn . isBlockModifiable ( player , pos ) ) <nl> + { <nl> + IBlockState blockState = worldIn . getBlockState ( pos ) ; <nl> + Block block = blockState . getBlock ( ) ; <nl> + if ( block . rotateBlock ( worldIn , pos , facing ) ) <nl> + { <nl> + player . swingArm ( hand ) ; <nl> + worldIn . notifyNeighborsOfStateChange ( pos , block , false ) ; <nl> + return EnumActionResult . SUCCESS ; <nl> + } <nl> + } <nl> + return EnumActionResult . FAIL ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getItemStackDisplayName ( ItemStack stack ) <nl> + { <nl> + return " Forge Test Wrench " ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / wrenchrotatedebug / models / item / test _ wrench . json b / src / test / resources / assets / wrenchrotatedebug / models / item / test _ wrench . json <nl> new file mode 100644 <nl> index 0000000 . . c4b504f <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / wrenchrotatedebug / models / item / test _ wrench . json <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + { <nl> + " parent " : " item / generated " , <nl> + " textures " : { <nl> + " layer0 " : " wrenchrotatedebug : items / test _ wrench " <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / wrenchrotatedebug / textures / items / test _ wrench . png b / src / test / resources / assets / wrenchrotatedebug / textures / items / test _ wrench . png <nl> new file mode 100644 <nl> index 0000000 . . 3a6ce07 <nl> Binary files / dev / null and b / src / test / resources / assets / wrenchrotatedebug / textures / items / test _ wrench . png differ

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch 
 index b34d024 . . 7d91196 100644 
 - - - a / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 1483 , 10 + 1483 , 25 @ @ 
 public static void func _ 149671 _ p ( ) 
 { 
 func _ 176215 _ a ( 0 , field _ 176230 _ a , ( new BlockAir ( ) ) . func _ 149663 _ c ( " air " ) ) ; 
 - @ @ - 1247 , 14 + 2511 , 7 @ @ 
 + @ @ - 1232 , 31 + 2496 , 6 @ @ 
 + block15 . field _ 149783 _ u = flag ; 
 } 
 - else 
 - { 
 + } 
 + - 
 + - Set < Block > set = Sets . newHashSet ( field _ 149771 _ c . func _ 82594 _ a ( new ResourceLocation ( " tripwire " ) ) ) ; 
 + - 
 + - for ( Block block16 : field _ 149771 _ c ) 
 + - { 
 + - if ( set . contains ( block16 ) ) 
 + - { 
 + - for ( int i = 0 ; i < 15 ; + + i ) 
 + - { 
 + - int j = field _ 149771 _ c . func _ 148757 _ b ( block16 ) < < 4 | i ; 
 + - field _ 176229 _ d . func _ 148746 _ a ( block16 . func _ 176203 _ a ( i ) , j ) ; 
 + - } 
 + - } 
 + - else 
 + - { 
 - UnmodifiableIterator unmodifiableiterator = block16 . func _ 176194 _ O ( ) . func _ 177619 _ a ( ) . iterator ( ) ; 
 - 
 - while ( unmodifiableiterator . hasNext ( ) ) 
 @ @ - 1495 , 7 + 1510 , 8 @ @ 
 - int k = field _ 149771 _ c . func _ 148757 _ b ( block16 ) < < 4 | block16 . func _ 176201 _ c ( iblockstate ) ; 
 - field _ 176229 _ d . func _ 148746 _ a ( iblockstate , k ) ; 
 - } 
 - + / / Handled in GameData . BlockCallbacks - leaving tripwire as it seems to be special cased 
 - } 
 - } 
 + - } 
 + - } 
 } 
 + 
 + private static void func _ 176215 _ a ( int p _ 176215 _ 0 _ , ResourceLocation p _ 176215 _ 1 _ , Block p _ 176215 _ 2 _ ) 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 7ff7ccd . . 5562582 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 285 , 6 + 285 , 12 @ @ public class GameData 
 @ SuppressWarnings ( " unchecked " ) 
 ClearableObjectIntIdentityMap < IBlockState > blockstateMap = owner . getSlaveMap ( BLOCKSTATE _ TO _ ID , ClearableObjectIntIdentityMap . class ) ; 
 
 + if ( " minecraft : tripwire " . equals ( block . getRegistryName ( ) . toString ( ) ) ) / / Tripwire is crap so we have to special case whee ! 
 + { 
 + for ( int meta = 0 ; meta < 15 ; meta + + ) 
 + blockstateMap . put ( block . getStateFromMeta ( meta ) , id < < 4 | meta ) ; 
 + } 
 + 
 / / So , due to blocks having more in - world states then metadata allows , we have to turn the map into a semi - milti - bimap . 
 / / We can do this however because the implementation of the map is last set wins . So we can add all states , then fix the meta bimap . 
 / / Multiple states - > meta . But meta to CORRECT state . 
 @ @ - 303 , 7 + 309 , 6 @ @ public class GameData 
 blockstateMap . put ( block . getStateFromMeta ( meta ) , id < < 4 | meta ) ; / / Put the CORRECT thing ! 
 } 
 
 - 
 if ( oldBlock ! = null ) 
 { 
 @ SuppressWarnings ( " unchecked " )

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch 
 index 8df9a21 . . cbf7f64 100644 
 - - - a / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 197 , 7 + 197 , 7 @ @ 
 public SoundType func _ 185467 _ w ( ) 
 { 
 return this . field _ 149762 _ H ; 
 - @ @ - 908 , 6 + 932 , 1188 @ @ 
 + @ @ - 908 , 6 + 932 , 1217 @ @ 
 { 
 } 
 
 @ @ - 1037 , 10 + 1037 , 39 @ @ 
 + IBlockState state = world . func _ 180495 _ p ( pos ) ; 
 + for ( IProperty < ? > prop : state . func _ 177228 _ b ( ) . keySet ( ) ) 
 + { 
 - + if ( prop . func _ 177701 _ a ( ) . equals ( " facing " ) | | prop . func _ 177701 _ a ( ) . equals ( " rotation " ) ) 
 + + if ( ( prop . func _ 177701 _ a ( ) . equals ( " facing " ) | | prop . func _ 177701 _ a ( ) . equals ( " rotation " ) ) & & prop . func _ 177699 _ b ( ) = = EnumFacing . class ) 
 + { 
 - + world . func _ 175656 _ a ( pos , state . func _ 177231 _ a ( prop ) ) ; 
 - + return true ; 
 + + Block block = state . func _ 177230 _ c ( ) ; 
 + + if ( ! ( block instanceof BlockBed ) & & ! ( block instanceof BlockPistonExtension ) ) 
 + + { 
 + + IBlockState newState ; 
 + + / / noinspection unchecked 
 + + IProperty < EnumFacing > facingProperty = ( IProperty < EnumFacing > ) prop ; 
 + + EnumFacing facing = state . func _ 177229 _ b ( facingProperty ) ; 
 + + java . util . Collection < EnumFacing > validFacings = facingProperty . func _ 177700 _ c ( ) ; 
 + + 
 + + / / rotate horizontal facings clockwise 
 + + if ( validFacings . size ( ) = = 4 & & ! validFacings . contains ( EnumFacing . UP ) & & ! validFacings . contains ( EnumFacing . DOWN ) ) 
 + + { 
 + + newState = state . func _ 177226 _ a ( facingProperty , facing . func _ 176746 _ e ( ) ) ; 
 + + } 
 + + else 
 + + { 
 + + / / rotate other facings about the axis 
 + + EnumFacing rotatedFacing = facing . func _ 176732 _ a ( axis . func _ 176740 _ k ( ) ) ; 
 + + if ( validFacings . contains ( rotatedFacing ) ) 
 + + { 
 + + newState = state . func _ 177226 _ a ( facingProperty , rotatedFacing ) ; 
 + + } 
 + + else / / abnormal facing property , just cycle it 
 + + { 
 + + newState = state . func _ 177231 _ a ( facingProperty ) ; 
 + + } 
 + + } 
 + + 
 + + world . func _ 175656 _ a ( pos , newState ) ; 
 + + return true ; 
 + + } 
 + } 
 + } 
 + return false ; 
 @ @ - 1059 , 7 + 1088 , 7 @ @ 
 + IBlockState state = world . func _ 180495 _ p ( pos ) ; 
 + for ( IProperty < ? > prop : state . func _ 177228 _ b ( ) . keySet ( ) ) 
 + { 
 - + if ( prop . func _ 177701 _ a ( ) . equals ( " facing " ) & & prop . func _ 177699 _ b ( ) = = EnumFacing . class ) 
 + + if ( ( prop . func _ 177701 _ a ( ) . equals ( " facing " ) | | prop . func _ 177701 _ a ( ) . equals ( " rotation " ) ) & & prop . func _ 177699 _ b ( ) = = EnumFacing . class ) 
 + { 
 + @ SuppressWarnings ( " unchecked " ) 
 + java . util . Collection < EnumFacing > values = ( ( java . util . Collection < EnumFacing > ) prop . func _ 177700 _ c ( ) ) ; 
 @ @ - 1386 , 7 + 1415 , 7 @ @ 
 public static void func _ 149671 _ p ( ) 
 { 
 func _ 176215 _ a ( 0 , field _ 176230 _ a , ( new BlockAir ( ) ) . func _ 149663 _ c ( " air " ) ) ; 
 - @ @ - 1201 , 14 + 2407 , 7 @ @ 
 + @ @ - 1201 , 14 + 2436 , 7 @ @ 
 } 
 else 
 { 
 diff - - git a / patches / minecraft / net / minecraft / block / BlockChest . java . patch b / patches / minecraft / net / minecraft / block / BlockChest . java . patch 
 index 55d6a84 . . 338a9c4 100644 
 - - - a / patches / minecraft / net / minecraft / block / BlockChest . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / BlockChest . java . patch 
 @ @ - 9 , 3 + 9 , 14 @ @ 
 } 
 
 private boolean func _ 176453 _ o ( World p _ 176453 _ 1 _ , BlockPos p _ 176453 _ 2 _ ) 
 + @ @ - 587 , 4 + 587 , 10 @ @ 
 + BASIC , 
 + TRAP ; 
 + } 
 + + 
 + + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + + public boolean rotateBlock ( World world , BlockPos pos , EnumFacing axis ) 
 + + { 
 + + return ! func _ 176454 _ e ( world , pos ) & & super . rotateBlock ( world , pos , axis ) ; 
 + + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / block / BlockPistonBase . java . patch b / patches / minecraft / net / minecraft / block / BlockPistonBase . java . patch 
 index de7791e . . 7acd5d4 100644 
 - - - a / patches / minecraft / net / minecraft / block / BlockPistonBase . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / BlockPistonBase . java . patch 
 @ @ - 29 , 3 + 29 , 15 @ @ 
 p _ 176319 _ 1 _ . func _ 180501 _ a ( blockpos1 , Blocks . field _ 150350 _ a . func _ 176223 _ P ( ) , 4 ) ; 
 - - k ; 
 aiblockstate [ k ] = iblockstate ; 
 + @ @ - 432 , 4 + 434 , 11 @ @ 
 + { 
 + return new BlockStateContainer ( this , new IProperty [ ] { field _ 176387 _ N , field _ 176320 _ b } ) ; 
 + } 
 + + 
 + + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + + public boolean rotateBlock ( World world , BlockPos pos , EnumFacing axis ) 
 + + { 
 + + IBlockState state = world . func _ 180495 _ p ( pos ) ; 
 + + return ! state . func _ 177229 _ b ( field _ 176320 _ b ) & & super . rotateBlock ( world , pos , axis ) ; 
 + + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / block / BlockRedstoneDiode . java . patch b / patches / minecraft / net / minecraft / block / BlockRedstoneDiode . java . patch 
 index 43c5d17 . . 7225c69 100644 
 - - - a / patches / minecraft / net / minecraft / block / BlockRedstoneDiode . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / BlockRedstoneDiode . java . patch 
 @ @ - 9 , 3 + 9 , 27 @ @ 
 p _ 176400 _ 1 _ . func _ 190524 _ a ( blockpos , this , p _ 176400 _ 2 _ ) ; 
 p _ 176400 _ 1 _ . func _ 175695 _ a ( blockpos , this , enumfacing ) ; 
 } 
 + @ @ - 275 , 4 + 277 , 23 @ @ 
 + { 
 + return BlockRenderLayer . CUTOUT ; 
 + } 
 + + 
 + + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + + @ Override 
 + + public boolean rotateBlock ( World world , BlockPos pos , EnumFacing axis ) 
 + + { 
 + + if ( super . rotateBlock ( world , pos , axis ) ) 
 + + { 
 + + IBlockState state = world . func _ 180495 _ p ( pos ) ; 
 + + state = func _ 180675 _ k ( state ) ; 
 + + world . func _ 175656 _ a ( pos , state ) ; 
 + + 
 + + if ( func _ 176404 _ e ( world , pos , state ) ) 
 + + { 
 + + world . func _ 175684 _ a ( pos , this , 1 ) ; 
 + + } 
 + + return true ; 
 + + } 
 + + return false ; 
 + + } 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / WrenchRotateDebug . java b / src / test / java / net / minecraftforge / debug / WrenchRotateDebug . java 
 new file mode 100644 
 index 0000000 . . 412f1de 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / WrenchRotateDebug . java 
 @ @ - 0 , 0 + 1 , 106 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . renderer . ItemMeshDefinition ; 
 + import net . minecraft . client . renderer . block . model . ModelBakery ; 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . EnumActionResult ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumHand ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . SidedProxy ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + @ Mod ( modid = WrenchRotateDebug . modID , name = " Wrench Rotate Debug " , version = " 0 . 0 . 0 " ) 
 + public class WrenchRotateDebug 
 + { 
 + public static final String modID = " wrenchrotatedebug " ; 
 + private static final ResourceLocation testWrenchName = new ResourceLocation ( modID , " test _ wrench " ) ; 
 + 
 + @ SidedProxy 
 + public static CommonProxy proxy ; 
 + 
 + @ Mod . EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + TestWrench wrench = new TestWrench ( ) ; 
 + wrench . setRegistryName ( testWrenchName ) ; 
 + 
 + GameRegistry . register ( wrench ) ; 
 + proxy . setupModel ( wrench ) ; 
 + } 
 + 
 + public static class CommonProxy 
 + { 
 + void setupModel ( TestWrench wrench ) 
 + { 
 + } 
 + } 
 + 
 + public static class ServerProxy extends CommonProxy 
 + { 
 + } 
 + 
 + public static class ClientProxy extends CommonProxy 
 + { 
 + @ SuppressWarnings ( " unused " ) 
 + @ Override 
 + void setupModel ( TestWrench wrench ) 
 + { 
 + final ModelResourceLocation wrenchName = new ModelResourceLocation ( testWrenchName , " inventory " ) ; 
 + ModelBakery . registerItemVariants ( wrench , wrenchName ) ; 
 + ModelLoader . setCustomMeshDefinition ( wrench , new ItemMeshDefinition ( ) 
 + { 
 + @ Override 
 + public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 + { 
 + return wrenchName ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + 
 + public static class TestWrench extends Item 
 + { 
 + public TestWrench ( ) 
 + { 
 + setCreativeTab ( CreativeTabs . TOOLS ) ; 
 + setMaxStackSize ( 1 ) ; 
 + setHarvestLevel ( " wrench " , 0 ) ; 
 + } 
 + 
 + @ Override 
 + public EnumActionResult onItemUse ( EntityPlayer player , World worldIn , BlockPos pos , EnumHand hand , EnumFacing facing , float hitX , float hitY , float hitZ ) 
 + { 
 + ItemStack wrench = player . getHeldItem ( hand ) ; 
 + if ( player . canPlayerEdit ( pos , facing , wrench ) & & worldIn . isBlockModifiable ( player , pos ) ) 
 + { 
 + IBlockState blockState = worldIn . getBlockState ( pos ) ; 
 + Block block = blockState . getBlock ( ) ; 
 + if ( block . rotateBlock ( worldIn , pos , facing ) ) 
 + { 
 + player . swingArm ( hand ) ; 
 + worldIn . notifyNeighborsOfStateChange ( pos , block , false ) ; 
 + return EnumActionResult . SUCCESS ; 
 + } 
 + } 
 + return EnumActionResult . FAIL ; 
 + } 
 + 
 + @ Override 
 + public String getItemStackDisplayName ( ItemStack stack ) 
 + { 
 + return " Forge Test Wrench " ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / wrenchrotatedebug / models / item / test _ wrench . json b / src / test / resources / assets / wrenchrotatedebug / models / item / test _ wrench . json 
 new file mode 100644 
 index 0000000 . . c4b504f 
 - - - / dev / null 
 + + + b / src / test / resources / assets / wrenchrotatedebug / models / item / test _ wrench . json 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + { 
 + " parent " : " item / generated " , 
 + " textures " : { 
 + " layer0 " : " wrenchrotatedebug : items / test _ wrench " 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / wrenchrotatedebug / textures / items / test _ wrench . png b / src / test / resources / assets / wrenchrotatedebug / textures / items / test _ wrench . png 
 new file mode 100644 
 index 0000000 . . 3a6ce07 
 Binary files / dev / null and b / src / test / resources / assets / wrenchrotatedebug / textures / items / test _ wrench . png differ
